; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -IC:\vts-ver17\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.11.0\Device\Include -D__UVISION_VERSION=520 -D_RTE_ -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  clear PROC
;;;1593   	
;;;1594   void clear()
000000  48fe              LDR      r0,|L1.1020|
;;;1595   {
;;;1596     if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7900              LDRB     r0,[r0,#4]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L1.20|
;;;1597       {
;;;1598         temp = UART_D_REG(UART1_BASE_PTR);
00000c  48fb              LDR      r0,|L1.1020|
00000e  79c0              LDRB     r0,[r0,#7]
000010  49fb              LDR      r1,|L1.1024|
000012  6008              STR      r0,[r1,#0]  ; temp
                  |L1.20|
;;;1599   		}
;;;1600   		
;;;1601   		UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000014  48f9              LDR      r0,|L1.1020|
000016  7900              LDRB     r0,[r0,#4]
000018  2118              MOVS     r1,#0x18
00001a  4308              ORRS     r0,r0,r1
00001c  49f7              LDR      r1,|L1.1020|
00001e  7108              STRB     r0,[r1,#4]
;;;1602   }	
000020  4770              BX       lr
;;;1603   
                          ENDP

                  send_modem PROC
;;;1569   
;;;1570   void send_modem(char ch[])
000022  b570              PUSH     {r4-r6,lr}
;;;1571   	{	
000024  4605              MOV      r5,r0
;;;1572   						unsigned char i20=0;
000026  2400              MOVS     r4,#0
;;;1573   						for(i20=0;i20<strlen(ch);i20++)
000028  bf00              NOP      
00002a  e005              B        |L1.56|
                  |L1.44|
;;;1574   						{
;;;1575   							uart_putchar(UART1_BASE_PTR, ch[i20]);//clear();
00002c  5d29              LDRB     r1,[r5,r4]
00002e  48f3              LDR      r0,|L1.1020|
000030  f7fffffe          BL       uart_putchar
000034  1c60              ADDS     r0,r4,#1              ;1573
000036  b2c4              UXTB     r4,r0                 ;1573
                  |L1.56|
000038  4628              MOV      r0,r5                 ;1573
00003a  f7fffffe          BL       strlen
00003e  42a0              CMP      r0,r4                 ;1573
000040  d8f4              BHI      |L1.44|
;;;1576   						}
;;;1577   						
;;;1578   	}
000042  bd70              POP      {r4-r6,pc}
;;;1579   
                          ENDP

                  send_SD PROC
;;;51     
;;;52     void send_SD(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000044  b5ff              PUSH     {r0-r7,lr}
;;;53     {
000046  b081              SUB      sp,sp,#4
000048  4607              MOV      r7,r0
00004a  4614              MOV      r4,r2
00004c  461d              MOV      r5,r3
00004e  9e0a              LDR      r6,[sp,#0x28]
;;;54     	clear();
000050  f7fffffe          BL       clear
;;;55     	tout=0;
000054  2000              MOVS     r0,#0
000056  49eb              LDR      r1,|L1.1028|
000058  6008              STR      r0,[r1,#0]  ; tout
;;;56     		memset(uart_string_gsm,0,5000);
00005a  49eb              LDR      r1,|L1.1032|
00005c  48eb              LDR      r0,|L1.1036|
00005e  f7fffffe          BL       __aeabi_memclr
;;;57     		k2=0;									//string array counter for uart 1
000062  2000              MOVS     r0,#0
000064  49ea              LDR      r1,|L1.1040|
000066  6008              STR      r0,[r1,#0]  ; k2
;;;58     		clear();
000068  f7fffffe          BL       clear
;;;59     		send_modem(string);
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       send_modem
;;;60     		
;;;61     		delay(10);
000072  200a              MOVS     r0,#0xa
000074  f7fffffe          BL       delay
;;;62     		uart_putchar(UART1_BASE_PTR,'\r');//uart_putchar(UART1_BASE_PTR,'\r');
000078  210d              MOVS     r1,#0xd
00007a  48e0              LDR      r0,|L1.1020|
00007c  f7fffffe          BL       uart_putchar
;;;63     	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;64     		do
000080  bf00              NOP      
                  |L1.130|
;;;65     		{
;;;66     			
;;;67     //					time111--;
;;;68     //				  timeout222--;
;;;69     
;;;70     			
;;;71     	cond122=strstr(uart_string_gsm, responseA);
000082  48e2              LDR      r0,|L1.1036|
000084  9902              LDR      r1,[sp,#8]
000086  f7fffffe          BL       strstr
00008a  49e2              LDR      r1,|L1.1044|
00008c  6008              STR      r0,[r1,#0]  ; cond122
;;;72     	cond123=strstr(uart_string_gsm, responseB);
00008e  4621              MOV      r1,r4
000090  48de              LDR      r0,|L1.1036|
000092  f7fffffe          BL       strstr
000096  49e0              LDR      r1,|L1.1048|
000098  6008              STR      r0,[r1,#0]  ; cond123
;;;73       cond124=strstr(uart_string_gsm, responseC);
00009a  4629              MOV      r1,r5
00009c  48db              LDR      r0,|L1.1036|
00009e  f7fffffe          BL       strstr
0000a2  49de              LDR      r1,|L1.1052|
0000a4  6008              STR      r0,[r1,#0]  ; cond124
;;;74     	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
0000a6  48db              LDR      r0,|L1.1044|
0000a8  6800              LDR      r0,[r0,#0]  ; cond122
0000aa  2800              CMP      r0,#0
0000ac  d10b              BNE      |L1.198|
0000ae  48da              LDR      r0,|L1.1048|
0000b0  6800              LDR      r0,[r0,#0]  ; cond123
0000b2  2800              CMP      r0,#0
0000b4  d107              BNE      |L1.198|
0000b6  4608              MOV      r0,r1
0000b8  6800              LDR      r0,[r0,#0]  ; cond124
0000ba  2800              CMP      r0,#0
0000bc  d103              BNE      |L1.198|
0000be  48d1              LDR      r0,|L1.1028|
0000c0  6800              LDR      r0,[r0,#0]  ; tout
0000c2  42b0              CMP      r0,r6
0000c4  dd01              BLE      |L1.202|
                  |L1.198|
0000c6  2001              MOVS     r0,#1
0000c8  e000              B        |L1.204|
                  |L1.202|
0000ca  2000              MOVS     r0,#0
                  |L1.204|
0000cc  49d4              LDR      r1,|L1.1056|
0000ce  7008              STRB     r0,[r1,#0]
;;;75     			
;;;76     		}while (!cond121);
0000d0  4608              MOV      r0,r1
0000d2  7800              LDRB     r0,[r0,#0]  ; cond121
0000d4  2800              CMP      r0,#0
0000d6  d0d4              BEQ      |L1.130|
;;;77     		clear();
0000d8  f7fffffe          BL       clear
;;;78     		if(tout>timeout){
0000dc  48c9              LDR      r0,|L1.1028|
0000de  6800              LDR      r0,[r0,#0]  ; tout
0000e0  42b0              CMP      r0,r6
0000e2  dd17              BLE      |L1.276|
;;;79     			uart_putchar(UART1_BASE_PTR,'\r');
0000e4  210d              MOVS     r1,#0xd
0000e6  48c5              LDR      r0,|L1.1020|
0000e8  f7fffffe          BL       uart_putchar
;;;80     		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000ec  210a              MOVS     r1,#0xa
0000ee  48c3              LDR      r0,|L1.1020|
0000f0  f7fffffe          BL       uart_putchar
0000f4  211a              MOVS     r1,#0x1a
0000f6  48c1              LDR      r0,|L1.1020|
0000f8  f7fffffe          BL       uart_putchar
;;;81     		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000fc  211a              MOVS     r1,#0x1a
0000fe  48bf              LDR      r0,|L1.1020|
000100  f7fffffe          BL       uart_putchar
000104  210d              MOVS     r1,#0xd
000106  48bd              LDR      r0,|L1.1020|
000108  f7fffffe          BL       uart_putchar
;;;82     		uart_putchar(UART1_BASE_PTR,'\n');}
00010c  210a              MOVS     r1,#0xa
00010e  48bb              LDR      r0,|L1.1020|
000110  f7fffffe          BL       uart_putchar
                  |L1.276|
;;;83     		//return;
;;;84     //		return uart_string_gsm;
;;;85     
;;;86     }
000114  b005              ADD      sp,sp,#0x14
000116  bdf0              POP      {r4-r7,pc}
;;;87     
                          ENDP

                  send_GSM PROC
;;;1615   
;;;1616   void send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000118  b5ff              PUSH     {r0-r7,lr}
;;;1617   {	 
00011a  b081              SUB      sp,sp,#4
00011c  4607              MOV      r7,r0
00011e  4614              MOV      r4,r2
000120  461d              MOV      r5,r3
000122  9e0a              LDR      r6,[sp,#0x28]
;;;1618   
;;;1619   		//uart_putchar(UART1_BASE_PTR,0xA);
;;;1620   		//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1621   	clear();
000124  f7fffffe          BL       clear
;;;1622   	tout=0;
000128  2000              MOVS     r0,#0
00012a  49b6              LDR      r1,|L1.1028|
00012c  6008              STR      r0,[r1,#0]  ; tout
;;;1623   //	qwe=strlen(uart_string_gsm);
;;;1624   		memset(uart_string_gsm,0,5000);
00012e  49b6              LDR      r1,|L1.1032|
000130  48b6              LDR      r0,|L1.1036|
000132  f7fffffe          BL       __aeabi_memclr
;;;1625   		k2=0;									//string array counter for uart 1
000136  2000              MOVS     r0,#0
000138  49b5              LDR      r1,|L1.1040|
00013a  6008              STR      r0,[r1,#0]  ; k2
;;;1626   	 						//timer counts to wait for characters in uart 1 
;;;1627   		clear();
00013c  f7fffffe          BL       clear
;;;1628   		send_modem(string);
000140  4638              MOV      r0,r7
000142  f7fffffe          BL       send_modem
;;;1629   		uart_putchar(UART1_BASE_PTR,'\n');	uart_putchar(UART1_BASE_PTR,'\n');	
000146  210a              MOVS     r1,#0xa
000148  48ac              LDR      r0,|L1.1020|
00014a  f7fffffe          BL       uart_putchar
00014e  210a              MOVS     r1,#0xa
000150  48aa              LDR      r0,|L1.1020|
000152  f7fffffe          BL       uart_putchar
;;;1630   	delay(10);
000156  200a              MOVS     r0,#0xa
000158  f7fffffe          BL       delay
;;;1631   //	uart_putchar(UART1_BASE_PTR,'\r');
;;;1632   	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1633   		do
00015c  bf00              NOP      
                  |L1.350|
;;;1634   		{
;;;1635   			
;;;1636   //					time111--;
;;;1637   //				  timeout222--;
;;;1638   
;;;1639   			
;;;1640   	cond122=strstr(uart_string_gsm, responseA);
00015e  48ab              LDR      r0,|L1.1036|
000160  9902              LDR      r1,[sp,#8]
000162  f7fffffe          BL       strstr
000166  49ab              LDR      r1,|L1.1044|
000168  6008              STR      r0,[r1,#0]  ; cond122
;;;1641   	cond123=strstr(uart_string_gsm, responseB);
00016a  4621              MOV      r1,r4
00016c  48a7              LDR      r0,|L1.1036|
00016e  f7fffffe          BL       strstr
000172  49a9              LDR      r1,|L1.1048|
000174  6008              STR      r0,[r1,#0]  ; cond123
;;;1642     cond124=strstr(uart_string_gsm, responseC);
000176  4629              MOV      r1,r5
000178  48a4              LDR      r0,|L1.1036|
00017a  f7fffffe          BL       strstr
00017e  49a7              LDR      r1,|L1.1052|
000180  6008              STR      r0,[r1,#0]  ; cond124
;;;1643   	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
000182  48a4              LDR      r0,|L1.1044|
000184  6800              LDR      r0,[r0,#0]  ; cond122
000186  2800              CMP      r0,#0
000188  d10b              BNE      |L1.418|
00018a  48a3              LDR      r0,|L1.1048|
00018c  6800              LDR      r0,[r0,#0]  ; cond123
00018e  2800              CMP      r0,#0
000190  d107              BNE      |L1.418|
000192  4608              MOV      r0,r1
000194  6800              LDR      r0,[r0,#0]  ; cond124
000196  2800              CMP      r0,#0
000198  d103              BNE      |L1.418|
00019a  489a              LDR      r0,|L1.1028|
00019c  6800              LDR      r0,[r0,#0]  ; tout
00019e  42b0              CMP      r0,r6
0001a0  dd01              BLE      |L1.422|
                  |L1.418|
0001a2  2001              MOVS     r0,#1
0001a4  e000              B        |L1.424|
                  |L1.422|
0001a6  2000              MOVS     r0,#0
                  |L1.424|
0001a8  499d              LDR      r1,|L1.1056|
0001aa  7008              STRB     r0,[r1,#0]
;;;1644   			
;;;1645   		}while (!cond121);
0001ac  4608              MOV      r0,r1
0001ae  7800              LDRB     r0,[r0,#0]  ; cond121
0001b0  2800              CMP      r0,#0
0001b2  d0d4              BEQ      |L1.350|
;;;1646   		clear();
0001b4  f7fffffe          BL       clear
;;;1647   		if(tout>timeout){
0001b8  4892              LDR      r0,|L1.1028|
0001ba  6800              LDR      r0,[r0,#0]  ; tout
0001bc  42b0              CMP      r0,r6
0001be  dd17              BLE      |L1.496|
;;;1648   			uart_putchar(UART1_BASE_PTR,'\r');
0001c0  210d              MOVS     r1,#0xd
0001c2  488e              LDR      r0,|L1.1020|
0001c4  f7fffffe          BL       uart_putchar
;;;1649   		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0001c8  210a              MOVS     r1,#0xa
0001ca  488c              LDR      r0,|L1.1020|
0001cc  f7fffffe          BL       uart_putchar
0001d0  211a              MOVS     r1,#0x1a
0001d2  488a              LDR      r0,|L1.1020|
0001d4  f7fffffe          BL       uart_putchar
;;;1650   		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0001d8  211a              MOVS     r1,#0x1a
0001da  4888              LDR      r0,|L1.1020|
0001dc  f7fffffe          BL       uart_putchar
0001e0  210d              MOVS     r1,#0xd
0001e2  4886              LDR      r0,|L1.1020|
0001e4  f7fffffe          BL       uart_putchar
;;;1651   		uart_putchar(UART1_BASE_PTR,'\n');}
0001e8  210a              MOVS     r1,#0xa
0001ea  4884              LDR      r0,|L1.1020|
0001ec  f7fffffe          BL       uart_putchar
                  |L1.496|
;;;1652   		//return;
;;;1653   //		return uart_string_gsm;
;;;1654   
;;;1655   		
;;;1656   
;;;1657   
;;;1658   }
0001f0  b005              ADD      sp,sp,#0x14
0001f2  bdf0              POP      {r4-r7,pc}
;;;1659   
                          ENDP

                  mystrstr PROC
;;;125    
;;;126    char mystrstr(char* str1, char character)
0001f4  b570              PUSH     {r4-r6,lr}
;;;127    {
0001f6  4604              MOV      r4,r0
0001f8  460d              MOV      r5,r1
;;;128    	sz=strlen(str1);
0001fa  4620              MOV      r0,r4
0001fc  f7fffffe          BL       strlen
000200  4988              LDR      r1,|L1.1060|
000202  6008              STR      r0,[r1,#0]  ; sz
;;;129    	for(cn=0;cn<=sz;cn++)
000204  2000              MOVS     r0,#0
000206  4988              LDR      r1,|L1.1064|
000208  6008              STR      r0,[r1,#0]  ; cn
00020a  e00b              B        |L1.548|
                  |L1.524|
;;;130    	{if(str1[cn] == character)
00020c  4886              LDR      r0,|L1.1064|
00020e  6800              LDR      r0,[r0,#0]  ; cn
000210  5c20              LDRB     r0,[r4,r0]
000212  42a8              CMP      r0,r5
000214  d101              BNE      |L1.538|
;;;131    		{return 1;}
000216  2001              MOVS     r0,#1
                  |L1.536|
;;;132    	}
;;;133    	return 0;
;;;134    }
000218  bd70              POP      {r4-r6,pc}
                  |L1.538|
00021a  4883              LDR      r0,|L1.1064|
00021c  6800              LDR      r0,[r0,#0]            ;129  ; cn
00021e  1c40              ADDS     r0,r0,#1              ;129
000220  4981              LDR      r1,|L1.1064|
000222  6008              STR      r0,[r1,#0]            ;129  ; cn
                  |L1.548|
000224  4880              LDR      r0,|L1.1064|
000226  6800              LDR      r0,[r0,#0]            ;129  ; cn
000228  497e              LDR      r1,|L1.1060|
00022a  6809              LDR      r1,[r1,#0]            ;129  ; sz
00022c  4288              CMP      r0,r1                 ;129
00022e  dded              BLE      |L1.524|
000230  2000              MOVS     r0,#0                 ;133
000232  e7f1              B        |L1.536|
;;;135    
                          ENDP

                  stof PROC
;;;1075   
;;;1076   float stof(const char* s)
000234  b570              PUSH     {r4-r6,lr}
;;;1077   {rez=0;fact=1;
000236  4604              MOV      r4,r0
000238  2000              MOVS     r0,#0
00023a  497c              LDR      r1,|L1.1068|
00023c  6008              STR      r0,[r1,#0]  ; rez
00023e  207f              MOVS     r0,#0x7f
000240  05c0              LSLS     r0,r0,#23
000242  497b              LDR      r1,|L1.1072|
000244  6008              STR      r0,[r1,#0]  ; fact
;;;1078   
;;;1079     if (*s == '-'){
000246  7820              LDRB     r0,[r4,#0]
000248  282d              CMP      r0,#0x2d
00024a  d102              BNE      |L1.594|
;;;1080       s++;
00024c  1c64              ADDS     r4,r4,#1
;;;1081       fact = -1;
00024e  4879              LDR      r0,|L1.1076|
000250  6008              STR      r0,[r1,#0]  ; fact
                  |L1.594|
;;;1082     };
;;;1083     for (point_seen = 0; *s; s++){
000252  2000              MOVS     r0,#0
000254  4978              LDR      r1,|L1.1080|
000256  6008              STR      r0,[r1,#0]  ; point_seen
000258  e02f              B        |L1.698|
                  |L1.602|
;;;1084       if (*s == '.'){
00025a  7820              LDRB     r0,[r4,#0]
00025c  282e              CMP      r0,#0x2e
00025e  d103              BNE      |L1.616|
;;;1085         point_seen = 1; 
000260  2001              MOVS     r0,#1
000262  4975              LDR      r1,|L1.1080|
000264  6008              STR      r0,[r1,#0]  ; point_seen
;;;1086         continue;
000266  e027              B        |L1.696|
                  |L1.616|
;;;1087       };
;;;1088       d = *s - '0';
000268  7820              LDRB     r0,[r4,#0]
00026a  3830              SUBS     r0,r0,#0x30
00026c  4973              LDR      r1,|L1.1084|
00026e  6008              STR      r0,[r1,#0]  ; d
;;;1089       if (d >= 0 && d <= 9){
000270  4608              MOV      r0,r1
000272  6800              LDR      r0,[r0,#0]  ; d
000274  2800              CMP      r0,#0
000276  db1e              BLT      |L1.694|
000278  4608              MOV      r0,r1
00027a  6800              LDR      r0,[r0,#0]  ; d
00027c  2809              CMP      r0,#9
00027e  dc1a              BGT      |L1.694|
;;;1090         if (point_seen) fact /= 10.0f;
000280  486d              LDR      r0,|L1.1080|
000282  6800              LDR      r0,[r0,#0]  ; point_seen
000284  2800              CMP      r0,#0
000286  d006              BEQ      |L1.662|
000288  496d              LDR      r1,|L1.1088|
00028a  4869              LDR      r0,|L1.1072|
00028c  6800              LDR      r0,[r0,#0]  ; fact
00028e  f7fffffe          BL       __aeabi_fdiv
000292  4967              LDR      r1,|L1.1072|
000294  6008              STR      r0,[r1,#0]  ; fact
                  |L1.662|
;;;1091         rez = rez * 10.0f + (float)d;
000296  4869              LDR      r0,|L1.1084|
000298  6800              LDR      r0,[r0,#0]  ; d
00029a  f7fffffe          BL       __aeabi_i2f
00029e  4605              MOV      r5,r0
0002a0  4967              LDR      r1,|L1.1088|
0002a2  4862              LDR      r0,|L1.1068|
0002a4  6800              LDR      r0,[r0,#0]  ; rez
0002a6  f7fffffe          BL       __aeabi_fmul
0002aa  4606              MOV      r6,r0
0002ac  4629              MOV      r1,r5
0002ae  f7fffffe          BL       __aeabi_fadd
0002b2  495e              LDR      r1,|L1.1068|
0002b4  6008              STR      r0,[r1,#0]  ; rez
                  |L1.694|
0002b6  bf00              NOP                            ;1086
                  |L1.696|
0002b8  1c64              ADDS     r4,r4,#1              ;1083
                  |L1.698|
0002ba  7820              LDRB     r0,[r4,#0]            ;1083
0002bc  2800              CMP      r0,#0                 ;1083
0002be  d1cc              BNE      |L1.602|
;;;1092       };
;;;1093     };
;;;1094     return rez * fact;
0002c0  485b              LDR      r0,|L1.1072|
0002c2  6801              LDR      r1,[r0,#0]  ; fact
0002c4  4859              LDR      r0,|L1.1068|
0002c6  6800              LDR      r0,[r0,#0]  ; rez
0002c8  f7fffffe          BL       __aeabi_fmul
;;;1095   };
0002cc  bd70              POP      {r4-r6,pc}
;;;1096   
                          ENDP

                  LED_state2 PROC
;;;208    
;;;209    void LED_state2(void)
0002ce  b500              PUSH     {lr}
;;;210    {
;;;211    if(sleep_flag == 1)
0002d0  485c              LDR      r0,|L1.1092|
0002d2  6800              LDR      r0,[r0,#0]  ; sleep_flag
0002d4  2801              CMP      r0,#1
0002d6  d102              BNE      |L1.734|
;;;212    {stateCount=99;
0002d8  2063              MOVS     r0,#0x63
0002da  495b              LDR      r1,|L1.1096|
0002dc  7008              STRB     r0,[r1,#0]
                  |L1.734|
;;;213    }	
;;;214    			
;;;215    	switch(stateCount){
0002de  485a              LDR      r0,|L1.1096|
0002e0  7800              LDRB     r0,[r0,#0]  ; stateCount
0002e2  0003              MOVS     r3,r0
0002e4  f7fffffe          BL       __ARM_common_switch8
0002e8  06040f1a          DCB      0x06,0x04,0x0f,0x1a
0002ec  25303b46          DCB      0x25,0x30,0x3b,0x46
;;;216    	
;;;217    
;;;218                case 0:     //Red
;;;219                       RED_ON;
0002f0  2001              MOVS     r0,#1
0002f2  0740              LSLS     r0,r0,#29
0002f4  4955              LDR      r1,|L1.1100|
0002f6  6088              STR      r0,[r1,#8]
;;;220                       GREEN_OFF;
0002f8  0080              LSLS     r0,r0,#2
0002fa  6048              STR      r0,[r1,#4]
;;;221                       BLUE_OFF;
0002fc  2020              MOVS     r0,#0x20
0002fe  4953              LDR      r1,|L1.1100|
000300  3940              SUBS     r1,r1,#0x40
000302  6048              STR      r0,[r1,#4]
;;;222                       break;
000304  e044              B        |L1.912|
;;;223    
;;;224                case 1:	//Yellow
;;;225    		               RED_ON;
000306  2001              MOVS     r0,#1
000308  0740              LSLS     r0,r0,#29
00030a  4950              LDR      r1,|L1.1100|
00030c  6088              STR      r0,[r1,#8]
;;;226    		               GREEN_ON;
00030e  0080              LSLS     r0,r0,#2
000310  6088              STR      r0,[r1,#8]
;;;227    		               BLUE_OFF;
000312  2020              MOVS     r0,#0x20
000314  494d              LDR      r1,|L1.1100|
000316  3940              SUBS     r1,r1,#0x40
000318  6048              STR      r0,[r1,#4]
;;;228    		               break;
00031a  e039              B        |L1.912|
;;;229    				
;;;230                case 2:	//Green
;;;231    		               RED_OFF;
00031c  2001              MOVS     r0,#1
00031e  0740              LSLS     r0,r0,#29
000320  494a              LDR      r1,|L1.1100|
000322  6048              STR      r0,[r1,#4]
;;;232    		               GREEN_ON;
000324  0080              LSLS     r0,r0,#2
000326  6088              STR      r0,[r1,#8]
;;;233    		               BLUE_OFF;
000328  2020              MOVS     r0,#0x20
00032a  4948              LDR      r1,|L1.1100|
00032c  3940              SUBS     r1,r1,#0x40
00032e  6048              STR      r0,[r1,#4]
;;;234    		               break;
000330  e02e              B        |L1.912|
;;;235    				
;;;236                case 3:	//Blue
;;;237    		               RED_OFF;
000332  2001              MOVS     r0,#1
000334  0740              LSLS     r0,r0,#29
000336  4945              LDR      r1,|L1.1100|
000338  6048              STR      r0,[r1,#4]
;;;238    		               GREEN_OFF;
00033a  0080              LSLS     r0,r0,#2
00033c  6048              STR      r0,[r1,#4]
;;;239    		               BLUE_ON;
00033e  2020              MOVS     r0,#0x20
000340  4942              LDR      r1,|L1.1100|
000342  3940              SUBS     r1,r1,#0x40
000344  6088              STR      r0,[r1,#8]
;;;240    		               break;
000346  e023              B        |L1.912|
;;;241    				
;;;242                case 4:	//Violet
;;;243    		               RED_ON;
000348  2001              MOVS     r0,#1
00034a  0740              LSLS     r0,r0,#29
00034c  493f              LDR      r1,|L1.1100|
00034e  6088              STR      r0,[r1,#8]
;;;244    		               GREEN_OFF;
000350  0080              LSLS     r0,r0,#2
000352  6048              STR      r0,[r1,#4]
;;;245    		               BLUE_ON;
000354  2020              MOVS     r0,#0x20
000356  493d              LDR      r1,|L1.1100|
000358  3940              SUBS     r1,r1,#0x40
00035a  6088              STR      r0,[r1,#8]
;;;246    		               break;
00035c  e018              B        |L1.912|
;;;247    				
;;;248                case 5:	//White
;;;249    		              RED_ON;
00035e  2001              MOVS     r0,#1
000360  0740              LSLS     r0,r0,#29
000362  493a              LDR      r1,|L1.1100|
000364  6088              STR      r0,[r1,#8]
;;;250    		              GREEN_ON;
000366  0080              LSLS     r0,r0,#2
000368  6088              STR      r0,[r1,#8]
;;;251    		              BLUE_ON;
00036a  2020              MOVS     r0,#0x20
00036c  4937              LDR      r1,|L1.1100|
00036e  3940              SUBS     r1,r1,#0x40
000370  6088              STR      r0,[r1,#8]
;;;252    		              break;
000372  e00d              B        |L1.912|
;;;253    				
;;;254                default:	//Red
;;;255    
;;;256    		              RED_OFF;
000374  2001              MOVS     r0,#1
000376  0740              LSLS     r0,r0,#29
000378  4934              LDR      r1,|L1.1100|
00037a  6048              STR      r0,[r1,#4]
;;;257    		              GREEN_OFF;
00037c  0080              LSLS     r0,r0,#2
00037e  6048              STR      r0,[r1,#4]
;;;258    		              BLUE_OFF;
000380  2020              MOVS     r0,#0x20
000382  4932              LDR      r1,|L1.1100|
000384  3940              SUBS     r1,r1,#0x40
000386  6048              STR      r0,[r1,#4]
;;;259    		              stateCount = 0;	//Reset state counter
000388  2000              MOVS     r0,#0
00038a  492f              LDR      r1,|L1.1096|
00038c  7008              STRB     r0,[r1,#0]
;;;260    			      break;
00038e  bf00              NOP      
                  |L1.912|
000390  bf00              NOP                            ;222
;;;261    
;;;262        }
;;;263    	
;;;264    }
000392  bd00              POP      {pc}
;;;265    
                          ENDP

                  clear2 PROC
;;;1603   
;;;1604   void clear2()
000394  482e              LDR      r0,|L1.1104|
;;;1605   {
;;;1606   //    if (UART_S1_REG(UART2_BASE_PTR) & UART_S1_OR_MASK)
;;;1607   //    {
;;;1608   //      temp = UART_D_REG(UART2_BASE_PTR);
;;;1609   //    }
;;;1610   
;;;1611   	UART_S1_REG(UART2_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000396  7900              LDRB     r0,[r0,#4]
000398  2118              MOVS     r1,#0x18
00039a  4308              ORRS     r0,r0,r1
00039c  492c              LDR      r1,|L1.1104|
00039e  7108              STRB     r0,[r1,#4]
;;;1612   }	
0003a0  4770              BX       lr
;;;1613   
                          ENDP

                  send_MSG PROC
;;;1661   
;;;1662   char * send_MSG(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
0003a2  b5f8              PUSH     {r3-r7,lr}
;;;1663   {	
0003a4  4606              MOV      r6,r0
0003a6  460f              MOV      r7,r1
0003a8  4614              MOV      r4,r2
0003aa  461d              MOV      r5,r3
;;;1664   		qwe=strlen(uart_string_gsm);
0003ac  4817              LDR      r0,|L1.1036|
0003ae  f7fffffe          BL       strlen
0003b2  4928              LDR      r1,|L1.1108|
0003b4  6008              STR      r0,[r1,#0]  ; qwe
;;;1665   
;;;1666   	
;;;1667   		memset(uart_string_gsm,0,qwe);
0003b6  4608              MOV      r0,r1
0003b8  6801              LDR      r1,[r0,#0]  ; qwe
0003ba  4814              LDR      r0,|L1.1036|
0003bc  f7fffffe          BL       __aeabi_memclr
;;;1668   		k2=0;									//string array counter for uart 1
0003c0  2000              MOVS     r0,#0
0003c2  4913              LDR      r1,|L1.1040|
0003c4  6008              STR      r0,[r1,#0]  ; k2
;;;1669   	  time111=99999;						//timer counts to wait for characters in uart 1 
0003c6  4824              LDR      r0,|L1.1112|
0003c8  4924              LDR      r1,|L1.1116|
0003ca  6008              STR      r0,[r1,#0]  ; time111
;;;1670   		clear();
0003cc  f7fffffe          BL       clear
;;;1671   		timeout222=2001;
0003d0  4823              LDR      r0,|L1.1120|
0003d2  4924              LDR      r1,|L1.1124|
0003d4  6008              STR      r0,[r1,#0]  ; timeout222
;;;1672   		send_modem(string);
0003d6  4630              MOV      r0,r6
0003d8  f7fffffe          BL       send_modem
;;;1673   		do	{
0003dc  bf00              NOP      
                  |L1.990|
;;;1674   			
;;;1675   					time111--;
0003de  481f              LDR      r0,|L1.1116|
0003e0  6800              LDR      r0,[r0,#0]  ; time111
0003e2  1e40              SUBS     r0,r0,#1
0003e4  491d              LDR      r1,|L1.1116|
0003e6  6008              STR      r0,[r1,#0]  ; time111
;;;1676   				  timeout222--;
0003e8  481e              LDR      r0,|L1.1124|
0003ea  6800              LDR      r0,[r0,#0]  ; timeout222
0003ec  1e40              SUBS     r0,r0,#1
0003ee  491d              LDR      r1,|L1.1124|
0003f0  6008              STR      r0,[r1,#0]  ; timeout222
;;;1677   //          if(lptmr_interrupt == 1){
;;;1678   //					//accel_read();
;;;1679   //					detect_motion();
;;;1680   //					lptmr_interrupt = 0;}		
;;;1681   //					if(timeout222 % 400 == 0)
;;;1682   //					{
;;;1683   //						//uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
;;;1684   //					}
;;;1685   			
;;;1686   	cond122=strstr(uart_string_gsm, responseA);
0003f2  4639              MOV      r1,r7
0003f4  4805              LDR      r0,|L1.1036|
0003f6  f7fffffe          BL       strstr
0003fa  e035              B        |L1.1128|
                  |L1.1020|
                          DCD      0x4006b000
                  |L1.1024|
                          DCD      temp
                  |L1.1028|
                          DCD      tout
                  |L1.1032|
                          DCD      0x00001388
                  |L1.1036|
                          DCD      uart_string_gsm
                  |L1.1040|
                          DCD      ||k2||
                  |L1.1044|
                          DCD      cond122
                  |L1.1048|
                          DCD      cond123
                  |L1.1052|
                          DCD      cond124
                  |L1.1056|
                          DCD      cond121
                  |L1.1060|
                          DCD      ||sz||
                  |L1.1064|
                          DCD      ||cn||
                  |L1.1068|
                          DCD      ||rez||
                  |L1.1072|
                          DCD      fact
                  |L1.1076|
                          DCD      0xbf800000
                  |L1.1080|
                          DCD      point_seen
                  |L1.1084|
                          DCD      d
                  |L1.1088|
                          DCD      0x41200000
                  |L1.1092|
                          DCD      sleep_flag
                  |L1.1096|
                          DCD      stateCount
                  |L1.1100|
                          DCD      0x400ff100
                  |L1.1104|
                          DCD      0x4006c000
                  |L1.1108|
                          DCD      qwe
                  |L1.1112|
                          DCD      0x0001869f
                  |L1.1116|
                          DCD      time111
                  |L1.1120|
                          DCD      0x000007d1
                  |L1.1124|
                          DCD      timeout222
                  |L1.1128|
000468  49fe              LDR      r1,|L1.2148|
00046a  6008              STR      r0,[r1,#0]  ; cond122
;;;1687   	cond123=strstr(uart_string_gsm, responseB);
00046c  4621              MOV      r1,r4
00046e  48fe              LDR      r0,|L1.2152|
000470  f7fffffe          BL       strstr
000474  49fd              LDR      r1,|L1.2156|
000476  6008              STR      r0,[r1,#0]  ; cond123
;;;1688     cond124=strstr(uart_string_gsm, responseC);
000478  4629              MOV      r1,r5
00047a  48fb              LDR      r0,|L1.2152|
00047c  f7fffffe          BL       strstr
000480  49fb              LDR      r1,|L1.2160|
000482  6008              STR      r0,[r1,#0]  ; cond124
;;;1689   	cond121 = (cond122	|| cond123	|| cond124  || (time111<=1))	;			
000484  48f7              LDR      r0,|L1.2148|
000486  6800              LDR      r0,[r0,#0]  ; cond122
000488  2800              CMP      r0,#0
00048a  d10b              BNE      |L1.1188|
00048c  48f7              LDR      r0,|L1.2156|
00048e  6800              LDR      r0,[r0,#0]  ; cond123
000490  2800              CMP      r0,#0
000492  d107              BNE      |L1.1188|
000494  4608              MOV      r0,r1
000496  6800              LDR      r0,[r0,#0]  ; cond124
000498  2800              CMP      r0,#0
00049a  d103              BNE      |L1.1188|
00049c  48f5              LDR      r0,|L1.2164|
00049e  6800              LDR      r0,[r0,#0]  ; time111
0004a0  2801              CMP      r0,#1
0004a2  dc01              BGT      |L1.1192|
                  |L1.1188|
0004a4  2001              MOVS     r0,#1
0004a6  e000              B        |L1.1194|
                  |L1.1192|
0004a8  2000              MOVS     r0,#0
                  |L1.1194|
0004aa  49f3              LDR      r1,|L1.2168|
0004ac  7008              STRB     r0,[r1,#0]
;;;1690   			
;;;1691   			
;;;1692   		}while (!cond121);
0004ae  4608              MOV      r0,r1
0004b0  7800              LDRB     r0,[r0,#0]  ; cond121
0004b2  2800              CMP      r0,#0
0004b4  d093              BEQ      |L1.990|
;;;1693   		clear();
0004b6  f7fffffe          BL       clear
;;;1694   		return uart_string_gsm;
0004ba  48eb              LDR      r0,|L1.2152|
;;;1695   
;;;1696   }
0004bc  bdf8              POP      {r3-r7,pc}
;;;1697   
                          ENDP

                  send_message PROC
;;;2592   			
;;;2593   	void send_message(char * data2)
0004be  b538              PUSH     {r3-r5,lr}
;;;2594   	{
0004c0  4604              MOV      r4,r0
;;;2595   									memset(at_,0,100);
0004c2  2164              MOVS     r1,#0x64
0004c4  48ed              LDR      r0,|L1.2172|
0004c6  f7fffffe          BL       __aeabi_memclr
;;;2596   									sprintf(at_, "\nAT+CMGS=\"%s\"\r\n" ,num2);
0004ca  4aed              LDR      r2,|L1.2176|
0004cc  a1ed              ADR      r1,|L1.2180|
0004ce  48eb              LDR      r0,|L1.2172|
0004d0  f7fffffe          BL       __2sprintf
;;;2597   									send_MSG(at_, ">", "ERROR\r\n" , "ERROR:",tmeout);	
0004d4  48ef              LDR      r0,|L1.2196|
0004d6  6800              LDR      r0,[r0,#0]  ; tmeout
0004d8  a3ef              ADR      r3,|L1.2200|
0004da  a2f1              ADR      r2,|L1.2208|
0004dc  a1f2              ADR      r1,|L1.2216|
0004de  9000              STR      r0,[sp,#0]
0004e0  48e6              LDR      r0,|L1.2172|
0004e2  f7fffffe          BL       send_MSG
;;;2598   									if( strstr(uart_string_gsm, ">"))
0004e6  a1f0              ADR      r1,|L1.2216|
0004e8  48df              LDR      r0,|L1.2152|
0004ea  f7fffffe          BL       strstr
0004ee  2800              CMP      r0,#0
0004f0  d031              BEQ      |L1.1366|
;;;2599   									{
;;;2600   										//
;;;2601   										
;;;2602   											for(k=0;k<strlen(data2);k++)
0004f2  2000              MOVS     r0,#0
0004f4  49ed              LDR      r1,|L1.2220|
0004f6  6008              STR      r0,[r1,#0]  ; k
0004f8  e00c              B        |L1.1300|
                  |L1.1274|
;;;2603   											{
;;;2604   												
;;;2605   												uart_putchar(UART1_BASE_PTR, data2[k]);
0004fa  48ec              LDR      r0,|L1.2220|
0004fc  6800              LDR      r0,[r0,#0]  ; k
0004fe  5c21              LDRB     r1,[r4,r0]
000500  48eb              LDR      r0,|L1.2224|
000502  f7fffffe          BL       uart_putchar
;;;2606   												//uart0_putchar(UART0_BASE_PTR, data2[k]);
;;;2607   												clear();
000506  f7fffffe          BL       clear
00050a  48e8              LDR      r0,|L1.2220|
00050c  6800              LDR      r0,[r0,#0]            ;2602  ; k
00050e  1c40              ADDS     r0,r0,#1              ;2602
000510  49e6              LDR      r1,|L1.2220|
000512  6008              STR      r0,[r1,#0]            ;2602  ; k
                  |L1.1300|
000514  4620              MOV      r0,r4                 ;2602
000516  f7fffffe          BL       strlen
00051a  49e4              LDR      r1,|L1.2220|
00051c  6809              LDR      r1,[r1,#0]            ;2602  ; k
00051e  4288              CMP      r0,r1                 ;2602
000520  d8eb              BHI      |L1.1274|
;;;2608   												
;;;2609   											}		
;;;2610   											uart_putchar(UART1_BASE_PTR, 0x1A);
000522  211a              MOVS     r1,#0x1a
000524  48e2              LDR      r0,|L1.2224|
000526  f7fffffe          BL       uart_putchar
;;;2611   											k2=0;									//string array counter for uart 1
00052a  2000              MOVS     r0,#0
00052c  49e1              LDR      r1,|L1.2228|
00052e  6008              STR      r0,[r1,#0]  ; k2
;;;2612   											timeout=99999;						//timer counts to wait for characters in uart 1 									
000530  48e1              LDR      r0,|L1.2232|
000532  49e2              LDR      r1,|L1.2236|
000534  6008              STR      r0,[r1,#0]  ; timeout
;;;2613   											while(!(strstr(uart_string_gsm,"+CMGS:")  ||  (timeout < 1)))
000536  e004              B        |L1.1346|
                  |L1.1336|
;;;2614   																{
;;;2615   																	timeout--;
000538  48e0              LDR      r0,|L1.2236|
00053a  6800              LDR      r0,[r0,#0]  ; timeout
00053c  1e40              SUBS     r0,r0,#1
00053e  49df              LDR      r1,|L1.2236|
000540  6008              STR      r0,[r1,#0]  ; timeout
                  |L1.1346|
000542  a1df              ADR      r1,|L1.2240|
000544  48c8              LDR      r0,|L1.2152|
000546  f7fffffe          BL       strstr
00054a  2800              CMP      r0,#0                 ;2613
00054c  d103              BNE      |L1.1366|
00054e  48db              LDR      r0,|L1.2236|
000550  6800              LDR      r0,[r0,#0]            ;2613  ; timeout
000552  2801              CMP      r0,#1                 ;2613
000554  daf0              BGE      |L1.1336|
                  |L1.1366|
;;;2616   //																	if(timeout % 4000 == 0)
;;;2617   //																	{
;;;2618   //																		uart0_putchar(UART0_BASE_PTR,'1');
;;;2619   //																		uart_putchar(UART1_BASE_PTR,0x1A);
;;;2620   //																	}
;;;2621   																}
;;;2622   							
;;;2623   									}
;;;2624   		
;;;2625   									
;;;2626   	}
000556  bd38              POP      {r3-r5,pc}
;;;2627   
                          ENDP

                  myAtoi PROC
;;;1063   
;;;1064   int myAtoi(char *str)
000558  4601              MOV      r1,r0
;;;1065   {res=0;
00055a  2000              MOVS     r0,#0
00055c  4ada              LDR      r2,|L1.2248|
00055e  6010              STR      r0,[r2,#0]  ; res
;;;1066       // Initialize result
;;;1067   
;;;1068       // Iterate through all characters of input string and update result
;;;1069       for (iz = 0; str[iz] != '\0'; ++iz)
000560  4ada              LDR      r2,|L1.2252|
000562  6010              STR      r0,[r2,#0]  ; iz
000564  e00f              B        |L1.1414|
                  |L1.1382|
;;;1070           res = res*10 + str[iz] - '0';
000566  48d8              LDR      r0,|L1.2248|
000568  6800              LDR      r0,[r0,#0]  ; res
00056a  220a              MOVS     r2,#0xa
00056c  4350              MULS     r0,r2,r0
00056e  4ad7              LDR      r2,|L1.2252|
000570  6812              LDR      r2,[r2,#0]  ; iz
000572  5c8a              LDRB     r2,[r1,r2]
000574  1880              ADDS     r0,r0,r2
000576  3830              SUBS     r0,r0,#0x30
000578  4ad3              LDR      r2,|L1.2248|
00057a  6010              STR      r0,[r2,#0]  ; res
00057c  48d3              LDR      r0,|L1.2252|
00057e  6800              LDR      r0,[r0,#0]            ;1069  ; iz
000580  1c40              ADDS     r0,r0,#1              ;1069
000582  4ad2              LDR      r2,|L1.2252|
000584  6010              STR      r0,[r2,#0]            ;1069  ; iz
                  |L1.1414|
000586  48d1              LDR      r0,|L1.2252|
000588  6800              LDR      r0,[r0,#0]            ;1069  ; iz
00058a  5c08              LDRB     r0,[r1,r0]            ;1069
00058c  2800              CMP      r0,#0                 ;1069
00058e  d1ea              BNE      |L1.1382|
;;;1071   
;;;1072       // return result.
;;;1073       return res;
000590  48cd              LDR      r0,|L1.2248|
000592  6800              LDR      r0,[r0,#0]  ; res
;;;1074   }
000594  4770              BX       lr
;;;1075   
                          ENDP

                  parse_gsm PROC
;;;1747   
;;;1748   void parse_gsm(char *str, int first, int sec, char *string)
000596  b5f8              PUSH     {r3-r7,lr}
;;;1749   {
000598  4604              MOV      r4,r0
00059a  460e              MOV      r6,r1
00059c  4617              MOV      r7,r2
00059e  461d              MOV      r5,r3
;;;1750   
;;;1751   		delay(10);		
0005a0  200a              MOVS     r0,#0xa
0005a2  f7fffffe          BL       delay
;;;1752   		memset(string,0,15);
0005a6  210f              MOVS     r1,#0xf
0005a8  4628              MOV      r0,r5
0005aa  f7fffffe          BL       __aeabi_memclr
;;;1753   		for(i11=0,temp11=0;i11<100;i11++)
0005ae  2000              MOVS     r0,#0
0005b0  49c7              LDR      r1,|L1.2256|
0005b2  6008              STR      r0,[r1,#0]  ; i11
0005b4  49c7              LDR      r1,|L1.2260|
0005b6  6008              STR      r0,[r1,#0]  ; temp11
0005b8  e01a              B        |L1.1520|
                  |L1.1466|
;;;1754   		{
;;;1755   		if(str[i11]=='"')
0005ba  48c5              LDR      r0,|L1.2256|
0005bc  6800              LDR      r0,[r0,#0]  ; i11
0005be  5c20              LDRB     r0,[r4,r0]
0005c0  2822              CMP      r0,#0x22
0005c2  d108              BNE      |L1.1494|
;;;1756   			{temp11++;j11=i11;}
0005c4  48c3              LDR      r0,|L1.2260|
0005c6  6800              LDR      r0,[r0,#0]  ; temp11
0005c8  1c40              ADDS     r0,r0,#1
0005ca  49c2              LDR      r1,|L1.2260|
0005cc  6008              STR      r0,[r1,#0]  ; temp11
0005ce  48c0              LDR      r0,|L1.2256|
0005d0  6800              LDR      r0,[r0,#0]  ; i11
0005d2  49c1              LDR      r1,|L1.2264|
0005d4  6008              STR      r0,[r1,#0]  ; j11
                  |L1.1494|
;;;1757   		else{}
;;;1758   			
;;;1759   		if(temp11>=sec){i11=900;}
0005d6  48bf              LDR      r0,|L1.2260|
0005d8  6800              LDR      r0,[r0,#0]  ; temp11
0005da  42b8              CMP      r0,r7
0005dc  db03              BLT      |L1.1510|
0005de  20e1              MOVS     r0,#0xe1
0005e0  0080              LSLS     r0,r0,#2
0005e2  49bb              LDR      r1,|L1.2256|
0005e4  6008              STR      r0,[r1,#0]  ; i11
                  |L1.1510|
0005e6  48ba              LDR      r0,|L1.2256|
0005e8  6800              LDR      r0,[r0,#0]            ;1753  ; i11
0005ea  1c40              ADDS     r0,r0,#1              ;1753
0005ec  49b8              LDR      r1,|L1.2256|
0005ee  6008              STR      r0,[r1,#0]            ;1753  ; i11
                  |L1.1520|
0005f0  48b7              LDR      r0,|L1.2256|
0005f2  6800              LDR      r0,[r0,#0]            ;1753  ; i11
0005f4  2864              CMP      r0,#0x64              ;1753
0005f6  dbe0              BLT      |L1.1466|
;;;1760   		else{}	
;;;1761   		
;;;1762   		}	
;;;1763   		
;;;1764   		for(i11=0,temp11=0;i11<100;i11++)
0005f8  2000              MOVS     r0,#0
0005fa  49b5              LDR      r1,|L1.2256|
0005fc  6008              STR      r0,[r1,#0]  ; i11
0005fe  49b5              LDR      r1,|L1.2260|
000600  6008              STR      r0,[r1,#0]  ; temp11
000602  e01a              B        |L1.1594|
                  |L1.1540|
;;;1765   		{
;;;1766   		if(str[i11]=='"')
000604  48b2              LDR      r0,|L1.2256|
000606  6800              LDR      r0,[r0,#0]  ; i11
000608  5c20              LDRB     r0,[r4,r0]
00060a  2822              CMP      r0,#0x22
00060c  d108              BNE      |L1.1568|
;;;1767   			{temp11++;l=i11;}										
00060e  48b1              LDR      r0,|L1.2260|
000610  6800              LDR      r0,[r0,#0]  ; temp11
000612  1c40              ADDS     r0,r0,#1
000614  49af              LDR      r1,|L1.2260|
000616  6008              STR      r0,[r1,#0]  ; temp11
000618  48ad              LDR      r0,|L1.2256|
00061a  6800              LDR      r0,[r0,#0]  ; i11
00061c  49af              LDR      r1,|L1.2268|
00061e  6008              STR      r0,[r1,#0]  ; l
                  |L1.1568|
;;;1768   		else{}
;;;1769   		if(temp11>=first){i11=900;}else{}
000620  48ac              LDR      r0,|L1.2260|
000622  6800              LDR      r0,[r0,#0]  ; temp11
000624  42b0              CMP      r0,r6
000626  db03              BLT      |L1.1584|
000628  20e1              MOVS     r0,#0xe1
00062a  0080              LSLS     r0,r0,#2
00062c  49a8              LDR      r1,|L1.2256|
00062e  6008              STR      r0,[r1,#0]  ; i11
                  |L1.1584|
000630  48a7              LDR      r0,|L1.2256|
000632  6800              LDR      r0,[r0,#0]            ;1764  ; i11
000634  1c40              ADDS     r0,r0,#1              ;1764
000636  49a6              LDR      r1,|L1.2256|
000638  6008              STR      r0,[r1,#0]            ;1764  ; i11
                  |L1.1594|
00063a  48a5              LDR      r0,|L1.2256|
00063c  6800              LDR      r0,[r0,#0]            ;1764  ; i11
00063e  2864              CMP      r0,#0x64              ;1764
000640  dbe0              BLT      |L1.1540|
;;;1770   		}	
;;;1771   		for(i11=0;i11<(j11-l-1);i11++)
000642  2000              MOVS     r0,#0
000644  49a2              LDR      r1,|L1.2256|
000646  6008              STR      r0,[r1,#0]  ; i11
000648  e00e              B        |L1.1640|
                  |L1.1610|
;;;1772   		{
;;;1773   		string[i11] = str[l+i11+1];
00064a  48a4              LDR      r0,|L1.2268|
00064c  6800              LDR      r0,[r0,#0]  ; l
00064e  49a0              LDR      r1,|L1.2256|
000650  6809              LDR      r1,[r1,#0]  ; i11
000652  1840              ADDS     r0,r0,r1
000654  1c40              ADDS     r0,r0,#1
000656  5c20              LDRB     r0,[r4,r0]
000658  499d              LDR      r1,|L1.2256|
00065a  6809              LDR      r1,[r1,#0]  ; i11
00065c  5468              STRB     r0,[r5,r1]
00065e  489c              LDR      r0,|L1.2256|
000660  6800              LDR      r0,[r0,#0]            ;1771  ; i11
000662  1c40              ADDS     r0,r0,#1              ;1771
000664  499a              LDR      r1,|L1.2256|
000666  6008              STR      r0,[r1,#0]            ;1771  ; i11
                  |L1.1640|
000668  489b              LDR      r0,|L1.2264|
00066a  6800              LDR      r0,[r0,#0]            ;1771  ; j11
00066c  499b              LDR      r1,|L1.2268|
00066e  6809              LDR      r1,[r1,#0]            ;1771  ; l
000670  1a40              SUBS     r0,r0,r1              ;1771
000672  1e40              SUBS     r0,r0,#1              ;1771
000674  4996              LDR      r1,|L1.2256|
000676  6809              LDR      r1,[r1,#0]            ;1771  ; i11
000678  4288              CMP      r0,r1                 ;1771
00067a  dce6              BGT      |L1.1610|
;;;1774   		}			
;;;1775   	
;;;1776   
;;;1777   }
00067c  bdf8              POP      {r3-r7,pc}
;;;1778   
                          ENDP

                  cursor_val PROC
;;;2011   
;;;2012   int cursor_val(char * stringsd, int cur){
00067e  b5f8              PUSH     {r3-r7,lr}
000680  4605              MOV      r5,r0
000682  460e              MOV      r6,r1
;;;2013   int curinc=0,curcounter=0,cur2=0;
000684  2400              MOVS     r4,#0
000686  2700              MOVS     r7,#0
000688  2000              MOVS     r0,#0
00068a  9000              STR      r0,[sp,#0]
;;;2014   for(curinc=0;curinc<strlen(stringsd);curinc++){
00068c  bf00              NOP      
00068e  e007              B        |L1.1696|
                  |L1.1680|
;;;2015   		
;;;2016   		if(stringsd[curinc] == '\n'     &&    curcounter < cur   ){ //&& curcounter<=cur	){
000690  5d28              LDRB     r0,[r5,r4]
000692  280a              CMP      r0,#0xa
000694  d103              BNE      |L1.1694|
000696  42b7              CMP      r7,r6
000698  da01              BGE      |L1.1694|
;;;2017   			++curcounter;     cur2=curinc;
00069a  1c7f              ADDS     r7,r7,#1
00069c  9400              STR      r4,[sp,#0]
                  |L1.1694|
00069e  1c64              ADDS     r4,r4,#1              ;2014
                  |L1.1696|
0006a0  4628              MOV      r0,r5                 ;2014
0006a2  f7fffffe          BL       strlen
0006a6  42a0              CMP      r0,r4                 ;2014
0006a8  d8f2              BHI      |L1.1680|
;;;2018   		}
;;;2019   
;;;2020   		
;;;2021   
;;;2022   }
;;;2023   	
;;;2024   	
;;;2025   	return cur2;
0006aa  9800              LDR      r0,[sp,#0]
;;;2026   
;;;2027   }
0006ac  bdf8              POP      {r3-r7,pc}
;;;2028   
                          ENDP

                  count_char PROC
;;;1992   }
;;;1993   int count_char(char ch,char* string)
0006ae  b570              PUSH     {r4-r6,lr}
;;;1994   {count=0;
0006b0  4605              MOV      r5,r0
0006b2  460c              MOV      r4,r1
0006b4  2000              MOVS     r0,#0
0006b6  498a              LDR      r1,|L1.2272|
0006b8  6008              STR      r0,[r1,#0]  ; count
;;;1995   
;;;1996   	//remove_all_chars(string,'\0','\0');
;;;1997   //	ass=strlen(string);
;;;1998   	for(ass=0;ass<strlen(string);ass++)
0006ba  498a              LDR      r1,|L1.2276|
0006bc  6008              STR      r0,[r1,#0]  ; ass
0006be  e00e              B        |L1.1758|
                  |L1.1728|
;;;1999   	{
;;;2000   		if(string[ass] == ch)
0006c0  4888              LDR      r0,|L1.2276|
0006c2  6800              LDR      r0,[r0,#0]  ; ass
0006c4  5c20              LDRB     r0,[r4,r0]
0006c6  42a8              CMP      r0,r5
0006c8  d104              BNE      |L1.1748|
;;;2001   		{count++;}
0006ca  4885              LDR      r0,|L1.2272|
0006cc  6800              LDR      r0,[r0,#0]  ; count
0006ce  1c40              ADDS     r0,r0,#1
0006d0  4983              LDR      r1,|L1.2272|
0006d2  6008              STR      r0,[r1,#0]  ; count
                  |L1.1748|
0006d4  4883              LDR      r0,|L1.2276|
0006d6  6800              LDR      r0,[r0,#0]            ;1998  ; ass
0006d8  1c40              ADDS     r0,r0,#1              ;1998
0006da  4982              LDR      r1,|L1.2276|
0006dc  6008              STR      r0,[r1,#0]            ;1998  ; ass
                  |L1.1758|
0006de  4620              MOV      r0,r4                 ;1998
0006e0  f7fffffe          BL       strlen
0006e4  497f              LDR      r1,|L1.2276|
0006e6  6809              LDR      r1,[r1,#0]            ;1998  ; ass
0006e8  4288              CMP      r0,r1                 ;1998
0006ea  d8e9              BHI      |L1.1728|
;;;2002   		
;;;2003   	}
;;;2004   return count;
0006ec  487c              LDR      r0,|L1.2272|
0006ee  6800              LDR      r0,[r0,#0]  ; count
;;;2005   }
0006f0  bd70              POP      {r4-r6,pc}
;;;2006   
                          ENDP

                  send_tcp PROC
;;;90     
;;;91     void send_tcp()
0006f2  b538              PUSH     {r3-r5,lr}
;;;92     {	
;;;93     memset(stcond1,0,strlen(stcond1));	
0006f4  487c              LDR      r0,|L1.2280|
0006f6  6800              LDR      r0,[r0,#0]  ; stcond1
0006f8  f7fffffe          BL       strlen
0006fc  4604              MOV      r4,r0
0006fe  4621              MOV      r1,r4
000700  4879              LDR      r0,|L1.2280|
000702  6800              LDR      r0,[r0,#0]  ; stcond1
000704  f7fffffe          BL       __aeabi_memclr
;;;94     memset(con1d,0,strlen(con1d));	
000708  4878              LDR      r0,|L1.2284|
00070a  6800              LDR      r0,[r0,#0]  ; con1d
00070c  f7fffffe          BL       strlen
000710  4604              MOV      r4,r0
000712  4621              MOV      r1,r4
000714  4875              LDR      r0,|L1.2284|
000716  6800              LDR      r0,[r0,#0]  ; con1d
000718  f7fffffe          BL       __aeabi_memclr
;;;95     								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;96     
;;;97     								cond=mystrstr(uart_string_gsm,'>');
00071c  213e              MOVS     r1,#0x3e
00071e  4852              LDR      r0,|L1.2152|
000720  f7fffffe          BL       mystrstr
000724  4972              LDR      r1,|L1.2288|
000726  7008              STRB     r0,[r1,#0]
;;;98     								if(cond)	
000728  4608              MOV      r0,r1
00072a  7800              LDRB     r0,[r0,#0]  ; cond
00072c  2800              CMP      r0,#0
00072e  d07c              BEQ      |L1.2090|
;;;99     								{
;;;100    									
;;;101    									clear();
000730  f7fffffe          BL       clear
;;;102    									memset(uart_string_gsm,0,5000);
000734  496f              LDR      r1,|L1.2292|
000736  484c              LDR      r0,|L1.2152|
000738  f7fffffe          BL       __aeabi_memclr
;;;103    									strcat(data,"\n\n");
00073c  a16e              ADR      r1,|L1.2296|
00073e  486f              LDR      r0,|L1.2300|
000740  f7fffffe          BL       strcat
;;;104    									len=strlen(data);
000744  486d              LDR      r0,|L1.2300|
000746  f7fffffe          BL       strlen
00074a  496d              LDR      r1,|L1.2304|
00074c  6008              STR      r0,[r1,#0]  ; len
;;;105    									tout=0;
00074e  2000              MOVS     r0,#0
000750  496c              LDR      r1,|L1.2308|
000752  6008              STR      r0,[r1,#0]  ; tout
;;;106    									k2=0;
000754  4957              LDR      r1,|L1.2228|
000756  6008              STR      r0,[r1,#0]  ; k2
;;;107    									for(k=0;k<len;k++)
000758  4954              LDR      r1,|L1.2220|
00075a  6008              STR      r0,[r1,#0]  ; k
00075c  e00b              B        |L1.1910|
                  |L1.1886|
;;;108    									{
;;;109    										uart_putchar(UART1_BASE_PTR, data[k]);
00075e  4867              LDR      r0,|L1.2300|
000760  4a52              LDR      r2,|L1.2220|
000762  6812              LDR      r2,[r2,#0]  ; k
000764  5c81              LDRB     r1,[r0,r2]
000766  4852              LDR      r0,|L1.2224|
000768  f7fffffe          BL       uart_putchar
00076c  484f              LDR      r0,|L1.2220|
00076e  6800              LDR      r0,[r0,#0]            ;107  ; k
000770  1c40              ADDS     r0,r0,#1              ;107
000772  494e              LDR      r1,|L1.2220|
000774  6008              STR      r0,[r1,#0]            ;107  ; k
                  |L1.1910|
000776  484d              LDR      r0,|L1.2220|
000778  6800              LDR      r0,[r0,#0]            ;107  ; k
00077a  4961              LDR      r1,|L1.2304|
00077c  6809              LDR      r1,[r1,#0]            ;107  ; len
00077e  4288              CMP      r0,r1                 ;107
000780  dbed              BLT      |L1.1886|
;;;110    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000782  210a              MOVS     r1,#0xa
000784  484a              LDR      r0,|L1.2224|
000786  f7fffffe          BL       uart_putchar
00078a  211a              MOVS     r1,#0x1a
00078c  4848              LDR      r0,|L1.2224|
00078e  f7fffffe          BL       uart_putchar
000792  211a              MOVS     r1,#0x1a
000794  4846              LDR      r0,|L1.2224|
000796  f7fffffe          BL       uart_putchar
00079a  211a              MOVS     r1,#0x1a
00079c  4844              LDR      r0,|L1.2224|
00079e  f7fffffe          BL       uart_putchar
0007a2  211a              MOVS     r1,#0x1a
0007a4  4842              LDR      r0,|L1.2224|
0007a6  f7fffffe          BL       uart_putchar
0007aa  211a              MOVS     r1,#0x1a
0007ac  4840              LDR      r0,|L1.2224|
0007ae  f7fffffe          BL       uart_putchar
;;;111    									do
0007b2  bf00              NOP      
                  |L1.1972|
;;;112    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0007b4  a154              ADR      r1,|L1.2312|
0007b6  482c              LDR      r0,|L1.2152|
0007b8  f7fffffe          BL       strstr
0007bc  494a              LDR      r1,|L1.2280|
0007be  6008              STR      r0,[r1,#0]  ; stcond1
;;;113    																	stcond2=strstr(uart_string_gsm, "ERROR");
0007c0  a153              ADR      r1,|L1.2320|
0007c2  4829              LDR      r0,|L1.2152|
0007c4  f7fffffe          BL       strstr
0007c8  4953              LDR      r1,|L1.2328|
0007ca  6008              STR      r0,[r1,#0]  ; stcond2
;;;114    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0007cc  a153              ADR      r1,|L1.2332|
0007ce  4826              LDR      r0,|L1.2152|
0007d0  f7fffffe          BL       strstr
0007d4  4953              LDR      r1,|L1.2340|
0007d6  6008              STR      r0,[r1,#0]  ; stcond3
;;;115    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0007d8  a153              ADR      r1,|L1.2344|
0007da  4823              LDR      r0,|L1.2152|
0007dc  f7fffffe          BL       strstr
0007e0  4953              LDR      r1,|L1.2352|
0007e2  6008              STR      r0,[r1,#0]  ; stcond4
;;;116    																	
;;;117    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0007e4  484c              LDR      r0,|L1.2328|
0007e6  6800              LDR      r0,[r0,#0]  ; stcond2
0007e8  2800              CMP      r0,#0
0007ea  d10f              BNE      |L1.2060|
0007ec  484d              LDR      r0,|L1.2340|
0007ee  6800              LDR      r0,[r0,#0]  ; stcond3
0007f0  2800              CMP      r0,#0
0007f2  d10b              BNE      |L1.2060|
0007f4  4608              MOV      r0,r1
0007f6  6800              LDR      r0,[r0,#0]  ; stcond4
0007f8  2800              CMP      r0,#0
0007fa  d107              BNE      |L1.2060|
0007fc  483a              LDR      r0,|L1.2280|
0007fe  6800              LDR      r0,[r0,#0]  ; stcond1
000800  2800              CMP      r0,#0
000802  d103              BNE      |L1.2060|
000804  483f              LDR      r0,|L1.2308|
000806  6800              LDR      r0,[r0,#0]  ; tout
000808  2804              CMP      r0,#4
00080a  ddd3              BLE      |L1.1972|
                  |L1.2060|
;;;118    																//delay(10);clear();
;;;119    														uart_putchar(UART1_BASE_PTR,0x1A);
00080c  211a              MOVS     r1,#0x1a
00080e  4828              LDR      r0,|L1.2224|
000810  f7fffffe          BL       uart_putchar
;;;120    												//delay(10);
;;;121    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000814  211a              MOVS     r1,#0x1a
000816  4826              LDR      r0,|L1.2224|
000818  f7fffffe          BL       uart_putchar
00081c  211a              MOVS     r1,#0x1a
00081e  4824              LDR      r0,|L1.2224|
000820  f7fffffe          BL       uart_putchar
000824  211a              MOVS     r1,#0x1a
000826  4822              LDR      r0,|L1.2224|
000828  e000              B        |L1.2092|
                  |L1.2090|
00082a  e015              B        |L1.2136|
                  |L1.2092|
00082c  f7fffffe          BL       uart_putchar
;;;122    						
;;;123    									
;;;124    									
;;;125    									
;;;126    									if(flagch==1){		int_erval=temp;flagch=0;	}
000830  4840              LDR      r0,|L1.2356|
000832  6800              LDR      r0,[r0,#0]  ; flagch
000834  2801              CMP      r0,#1
000836  d106              BNE      |L1.2118|
000838  483f              LDR      r0,|L1.2360|
00083a  6800              LDR      r0,[r0,#0]  ; temp
00083c  493f              LDR      r1,|L1.2364|
00083e  6008              STR      r0,[r1,#0]  ; int_erval
000840  2000              MOVS     r0,#0
000842  493c              LDR      r1,|L1.2356|
000844  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.2118|
;;;127    									
;;;128    									
;;;129    									
;;;130    
;;;131    //									for(k=0;k<len;k++)
;;;132    //									{
;;;133    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;134    //									}
;;;135    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;136    
;;;137    //									
;;;138    //													k2=0;									//string array counter for uart 1
;;;139    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;140    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;141    //																{
;;;142    //																	timeout--;
;;;143    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;144    //
;;;145    									delay(20);															
000846  2014              MOVS     r0,#0x14
000848  f7fffffe          BL       delay
;;;146    stcond1=strstr(uart_string_gsm,"SEND OK"); 
00084c  a12e              ADR      r1,|L1.2312|
00084e  4806              LDR      r0,|L1.2152|
000850  f7fffffe          BL       strstr
000854  4924              LDR      r1,|L1.2280|
000856  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.2136|
;;;147    
;;;148    								}
;;;149    
;;;150      //checks for send ok
;;;151    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
000858  4823              LDR      r0,|L1.2280|
00085a  6800              LDR      r0,[r0,#0]  ; stcond1
00085c  2800              CMP      r0,#0
00085e  d070              BEQ      |L1.2370|
000860  f000ffd6          BL       |L1.6160|
                  |L1.2148|
                          DCD      cond122
                  |L1.2152|
                          DCD      uart_string_gsm
                  |L1.2156|
                          DCD      cond123
                  |L1.2160|
                          DCD      cond124
                  |L1.2164|
                          DCD      time111
                  |L1.2168|
                          DCD      cond121
                  |L1.2172|
                          DCD      at_
                  |L1.2176|
                          DCD      num2
                  |L1.2180|
000884  0a41542b          DCB      "\nAT+CMGS=""%s""\r\n",0
000888  434d4753
00088c  3d222573
000890  220d0a00
                  |L1.2196|
                          DCD      tmeout
                  |L1.2200|
000898  4552524f          DCB      "ERROR:",0
00089c  523a00  
00089f  00                DCB      0
                  |L1.2208|
0008a0  4552524f          DCB      "ERROR\r\n",0
0008a4  520d0a00
                  |L1.2216|
0008a8  3e00              DCB      ">",0
0008aa  00                DCB      0
0008ab  00                DCB      0
                  |L1.2220|
                          DCD      k
                  |L1.2224|
                          DCD      0x4006b000
                  |L1.2228|
                          DCD      ||k2||
                  |L1.2232|
                          DCD      0x0001869f
                  |L1.2236|
                          DCD      timeout
                  |L1.2240|
0008c0  2b434d47          DCB      "+CMGS:",0
0008c4  533a00  
0008c7  00                DCB      0
                  |L1.2248|
                          DCD      ||res||
                  |L1.2252|
                          DCD      ||iz||
                  |L1.2256|
                          DCD      i11
                  |L1.2260|
                          DCD      temp11
                  |L1.2264|
                          DCD      j11
                  |L1.2268|
                          DCD      l
                  |L1.2272|
                          DCD      count
                  |L1.2276|
                          DCD      ass
                  |L1.2280|
                          DCD      stcond1
                  |L1.2284|
                          DCD      con1d
                  |L1.2288|
                          DCD      cond
                  |L1.2292|
                          DCD      0x00001388
                  |L1.2296|
0008f8  0a0a00            DCB      "\n\n",0
0008fb  00                DCB      0
                  |L1.2300|
                          DCD      data
                  |L1.2304|
                          DCD      len
                  |L1.2308|
                          DCD      tout
                  |L1.2312|
000908  53454e44          DCB      "SEND OK",0
00090c  204f4b00
                  |L1.2320|
000910  4552524f          DCB      "ERROR",0
000914  5200    
000916  00                DCB      0
000917  00                DCB      0
                  |L1.2328|
                          DCD      stcond2
                  |L1.2332|
00091c  4641494c          DCB      "FAIL",0
000920  00      
000921  00                DCB      0
000922  00                DCB      0
000923  00                DCB      0
                  |L1.2340|
                          DCD      stcond3
                  |L1.2344|
000928  44454143          DCB      "DEACT",0
00092c  5400    
00092e  00                DCB      0
00092f  00                DCB      0
                  |L1.2352|
                          DCD      stcond4
                  |L1.2356|
                          DCD      flagch
                  |L1.2360|
                          DCD      temp
                  |L1.2364|
                          DCD      int_erval
000940  e7ff              B        |L1.2370|
                  |L1.2370|
;;;152    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000942  211a              MOVS     r1,#0x1a
000944  48fd              LDR      r0,|L1.3388|
000946  f7fffffe          BL       uart_putchar
00094a  f7fffffe          BL       clear
00094e  200a              MOVS     r0,#0xa
000950  f7fffffe          BL       delay
;;;153    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000954  211a              MOVS     r1,#0x1a
000956  48f9              LDR      r0,|L1.3388|
000958  f7fffffe          BL       uart_putchar
00095c  f7fffffe          BL       clear
000960  200a              MOVS     r0,#0xa
000962  f7fffffe          BL       delay
;;;154    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000966  211a              MOVS     r1,#0x1a
000968  48f4              LDR      r0,|L1.3388|
00096a  f7fffffe          BL       uart_putchar
00096e  f7fffffe          BL       clear
000972  200a              MOVS     r0,#0xa
000974  f7fffffe          BL       delay
;;;155    							remove_all_chars(data, '\n', '\n');
000978  220a              MOVS     r2,#0xa
00097a  4611              MOV      r1,r2
00097c  48f0              LDR      r0,|L1.3392|
00097e  f7fffffe          BL       remove_all_chars
;;;156    	
;;;157    		strcat(data,"CH\n");	
000982  a1f0              ADR      r1,|L1.3396|
000984  48ee              LDR      r0,|L1.3392|
000986  f7fffffe          BL       strcat
;;;158    		
;;;159    	
;;;160    	delay(100);
00098a  2064              MOVS     r0,#0x64
00098c  f7fffffe          BL       delay
;;;161    		clear();//memset(uart_string_gsm,0,5000);
000990  f7fffffe          BL       clear
;;;162    	
;;;163    	memset(at_,0,100);
000994  2164              MOVS     r1,#0x64
000996  48ec              LDR      r0,|L1.3400|
000998  f7fffffe          BL       __aeabi_memclr
;;;164    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00099c  48e8              LDR      r0,|L1.3392|
00099e  f7fffffe          BL       strlen
0009a2  1c44              ADDS     r4,r0,#1
0009a4  4623              MOV      r3,r4
0009a6  4ae9              LDR      r2,|L1.3404|
0009a8  a1e9              ADR      r1,|L1.3408|
0009aa  48e7              LDR      r0,|L1.3400|
0009ac  f7fffffe          BL       __2sprintf
;;;165    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0009b0  2005              MOVS     r0,#5
0009b2  4bf0              LDR      r3,|L1.3444|
0009b4  461a              MOV      r2,r3
0009b6  3a70              SUBS     r2,r2,#0x70
0009b8  a1ef              ADR      r1,|L1.3448|
0009ba  9000              STR      r0,[sp,#0]
0009bc  48e2              LDR      r0,|L1.3400|
0009be  f7fffffe          BL       send_SD
;;;166    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;167    //	if(strstr(uart_string_gsm,"ERROR")){
;;;168    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;169    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;170    //	}
;;;171    	
;;;172    clear();	
0009c2  f7fffffe          BL       clear
;;;173    									k2=0;									//string array counter for uart 1
0009c6  2000              MOVS     r0,#0
0009c8  49ec              LDR      r1,|L1.3452|
0009ca  6008              STR      r0,[r1,#0]  ; k2
;;;174    									tout=0;	
0009cc  49ec              LDR      r1,|L1.3456|
0009ce  6008              STR      r0,[r1,#0]  ; tout
;;;175    		for(k=0;k<strlen(data);k++)
0009d0  49ec              LDR      r1,|L1.3460|
0009d2  6008              STR      r0,[r1,#0]  ; k
0009d4  e00b              B        |L1.2542|
                  |L1.2518|
;;;176    		{
;;;177    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0009d6  48da              LDR      r0,|L1.3392|
0009d8  4aea              LDR      r2,|L1.3460|
0009da  6812              LDR      r2,[r2,#0]  ; k
0009dc  5c81              LDRB     r1,[r0,r2]
0009de  48d7              LDR      r0,|L1.3388|
0009e0  f7fffffe          BL       uart_putchar
0009e4  48e7              LDR      r0,|L1.3460|
0009e6  6800              LDR      r0,[r0,#0]            ;175  ; k
0009e8  1c40              ADDS     r0,r0,#1              ;175
0009ea  49e6              LDR      r1,|L1.3460|
0009ec  6008              STR      r0,[r1,#0]            ;175  ; k
                  |L1.2542|
0009ee  48d4              LDR      r0,|L1.3392|
0009f0  f7fffffe          BL       strlen
0009f4  49e3              LDR      r1,|L1.3460|
0009f6  6809              LDR      r1,[r1,#0]            ;175  ; k
0009f8  4288              CMP      r0,r1                 ;175
0009fa  d8ec              BHI      |L1.2518|
;;;178    		}	
;;;179    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0009fc  210a              MOVS     r1,#0xa
0009fe  48cf              LDR      r0,|L1.3388|
000a00  f7fffffe          BL       uart_putchar
000a04  210a              MOVS     r1,#0xa
000a06  48cd              LDR      r0,|L1.3388|
000a08  f7fffffe          BL       uart_putchar
000a0c  210a              MOVS     r1,#0xa
000a0e  48cb              LDR      r0,|L1.3388|
000a10  f7fffffe          BL       uart_putchar
000a14  210a              MOVS     r1,#0xa
000a16  48c9              LDR      r0,|L1.3388|
000a18  f7fffffe          BL       uart_putchar
000a1c  210a              MOVS     r1,#0xa
000a1e  48c7              LDR      r0,|L1.3388|
000a20  f7fffffe          BL       uart_putchar
000a24  210a              MOVS     r1,#0xa
000a26  48c5              LDR      r0,|L1.3388|
000a28  f7fffffe          BL       uart_putchar
000a2c  210a              MOVS     r1,#0xa
000a2e  48c3              LDR      r0,|L1.3388|
000a30  f7fffffe          BL       uart_putchar
000a34  210a              MOVS     r1,#0xa
000a36  48c1              LDR      r0,|L1.3388|
000a38  f7fffffe          BL       uart_putchar
000a3c  210a              MOVS     r1,#0xa
000a3e  48bf              LDR      r0,|L1.3388|
000a40  f7fffffe          BL       uart_putchar
000a44  210a              MOVS     r1,#0xa
000a46  48bd              LDR      r0,|L1.3388|
000a48  f7fffffe          BL       uart_putchar
000a4c  210a              MOVS     r1,#0xa
000a4e  48bb              LDR      r0,|L1.3388|
000a50  f7fffffe          BL       uart_putchar
000a54  210a              MOVS     r1,#0xa
000a56  48b9              LDR      r0,|L1.3388|
000a58  f7fffffe          BL       uart_putchar
000a5c  210a              MOVS     r1,#0xa
000a5e  48b7              LDR      r0,|L1.3388|
000a60  f7fffffe          BL       uart_putchar
000a64  210a              MOVS     r1,#0xa
000a66  48b5              LDR      r0,|L1.3388|
000a68  f7fffffe          BL       uart_putchar
000a6c  210a              MOVS     r1,#0xa
000a6e  48b3              LDR      r0,|L1.3388|
000a70  f7fffffe          BL       uart_putchar
000a74  210a              MOVS     r1,#0xa
000a76  48b1              LDR      r0,|L1.3388|
000a78  f7fffffe          BL       uart_putchar
000a7c  210a              MOVS     r1,#0xa
000a7e  48af              LDR      r0,|L1.3388|
000a80  f7fffffe          BL       uart_putchar
000a84  210a              MOVS     r1,#0xa
000a86  48ad              LDR      r0,|L1.3388|
000a88  f7fffffe          BL       uart_putchar
000a8c  210a              MOVS     r1,#0xa
000a8e  48ab              LDR      r0,|L1.3388|
000a90  f7fffffe          BL       uart_putchar
000a94  210a              MOVS     r1,#0xa
000a96  48a9              LDR      r0,|L1.3388|
000a98  f7fffffe          BL       uart_putchar
000a9c  210a              MOVS     r1,#0xa
000a9e  48a7              LDR      r0,|L1.3388|
000aa0  f7fffffe          BL       uart_putchar
000aa4  210a              MOVS     r1,#0xa
000aa6  48a5              LDR      r0,|L1.3388|
000aa8  f7fffffe          BL       uart_putchar
000aac  210a              MOVS     r1,#0xa
000aae  48a3              LDR      r0,|L1.3388|
000ab0  f7fffffe          BL       uart_putchar
000ab4  210a              MOVS     r1,#0xa
000ab6  48a1              LDR      r0,|L1.3388|
000ab8  f7fffffe          BL       uart_putchar
000abc  210a              MOVS     r1,#0xa
000abe  489f              LDR      r0,|L1.3388|
000ac0  f7fffffe          BL       uart_putchar
000ac4  210a              MOVS     r1,#0xa
000ac6  489d              LDR      r0,|L1.3388|
000ac8  f7fffffe          BL       uart_putchar
000acc  210a              MOVS     r1,#0xa
000ace  489b              LDR      r0,|L1.3388|
000ad0  f7fffffe          BL       uart_putchar
000ad4  210a              MOVS     r1,#0xa
000ad6  4899              LDR      r0,|L1.3388|
000ad8  f7fffffe          BL       uart_putchar
000adc  210a              MOVS     r1,#0xa
000ade  4897              LDR      r0,|L1.3388|
000ae0  f7fffffe          BL       uart_putchar
000ae4  210a              MOVS     r1,#0xa
000ae6  4895              LDR      r0,|L1.3388|
000ae8  f7fffffe          BL       uart_putchar
000aec  210a              MOVS     r1,#0xa
000aee  4893              LDR      r0,|L1.3388|
000af0  f7fffffe          BL       uart_putchar
000af4  210a              MOVS     r1,#0xa
000af6  4891              LDR      r0,|L1.3388|
000af8  f7fffffe          BL       uart_putchar
000afc  210a              MOVS     r1,#0xa
000afe  488f              LDR      r0,|L1.3388|
000b00  f7fffffe          BL       uart_putchar
000b04  210a              MOVS     r1,#0xa
000b06  488d              LDR      r0,|L1.3388|
000b08  f7fffffe          BL       uart_putchar
000b0c  210a              MOVS     r1,#0xa
000b0e  488b              LDR      r0,|L1.3388|
000b10  f7fffffe          BL       uart_putchar
000b14  210a              MOVS     r1,#0xa
000b16  4889              LDR      r0,|L1.3388|
000b18  f7fffffe          BL       uart_putchar
000b1c  210a              MOVS     r1,#0xa
000b1e  4887              LDR      r0,|L1.3388|
000b20  f7fffffe          BL       uart_putchar
000b24  210a              MOVS     r1,#0xa
000b26  4885              LDR      r0,|L1.3388|
000b28  f7fffffe          BL       uart_putchar
000b2c  210a              MOVS     r1,#0xa
000b2e  4883              LDR      r0,|L1.3388|
000b30  f7fffffe          BL       uart_putchar
000b34  210a              MOVS     r1,#0xa
000b36  4881              LDR      r0,|L1.3388|
000b38  f7fffffe          BL       uart_putchar
000b3c  210a              MOVS     r1,#0xa
000b3e  487f              LDR      r0,|L1.3388|
000b40  f7fffffe          BL       uart_putchar
000b44  210a              MOVS     r1,#0xa
000b46  487d              LDR      r0,|L1.3388|
000b48  f7fffffe          BL       uart_putchar
000b4c  210a              MOVS     r1,#0xa
000b4e  487b              LDR      r0,|L1.3388|
000b50  f7fffffe          BL       uart_putchar
000b54  210a              MOVS     r1,#0xa
000b56  4879              LDR      r0,|L1.3388|
000b58  f7fffffe          BL       uart_putchar
000b5c  210a              MOVS     r1,#0xa
000b5e  4877              LDR      r0,|L1.3388|
000b60  f7fffffe          BL       uart_putchar
000b64  210a              MOVS     r1,#0xa
000b66  4875              LDR      r0,|L1.3388|
000b68  f7fffffe          BL       uart_putchar
000b6c  210a              MOVS     r1,#0xa
000b6e  4873              LDR      r0,|L1.3388|
000b70  f7fffffe          BL       uart_putchar
000b74  210a              MOVS     r1,#0xa
000b76  4871              LDR      r0,|L1.3388|
000b78  f7fffffe          BL       uart_putchar
000b7c  210a              MOVS     r1,#0xa
000b7e  486f              LDR      r0,|L1.3388|
000b80  f7fffffe          BL       uart_putchar
000b84  210a              MOVS     r1,#0xa
000b86  486d              LDR      r0,|L1.3388|
000b88  f7fffffe          BL       uart_putchar
000b8c  210a              MOVS     r1,#0xa
000b8e  486b              LDR      r0,|L1.3388|
000b90  f7fffffe          BL       uart_putchar
000b94  210a              MOVS     r1,#0xa
000b96  4869              LDR      r0,|L1.3388|
000b98  f7fffffe          BL       uart_putchar
000b9c  210a              MOVS     r1,#0xa
000b9e  4867              LDR      r0,|L1.3388|
000ba0  f7fffffe          BL       uart_putchar
000ba4  210a              MOVS     r1,#0xa
000ba6  4865              LDR      r0,|L1.3388|
000ba8  f7fffffe          BL       uart_putchar
000bac  210a              MOVS     r1,#0xa
000bae  4863              LDR      r0,|L1.3388|
000bb0  f7fffffe          BL       uart_putchar
000bb4  210a              MOVS     r1,#0xa
000bb6  4861              LDR      r0,|L1.3388|
000bb8  f7fffffe          BL       uart_putchar
000bbc  210a              MOVS     r1,#0xa
000bbe  485f              LDR      r0,|L1.3388|
000bc0  f7fffffe          BL       uart_putchar
;;;180    									//memset(data,0,1000);
;;;181    														//timer counts to wait for characters in uart 1 									
;;;182    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000bc4  bf00              NOP      
                  |L1.3014|
000bc6  a170              ADR      r1,|L1.3464|
000bc8  4871              LDR      r0,|L1.3472|
000bca  f7fffffe          BL       strstr
000bce  2800              CMP      r0,#0
000bd0  d109              BNE      |L1.3046|
000bd2  4968              LDR      r1,|L1.3444|
000bd4  486e              LDR      r0,|L1.3472|
000bd6  f7fffffe          BL       strstr
000bda  2800              CMP      r0,#0
000bdc  d103              BNE      |L1.3046|
000bde  4868              LDR      r0,|L1.3456|
000be0  6800              LDR      r0,[r0,#0]  ; tout
000be2  2805              CMP      r0,#5
000be4  ddef              BLE      |L1.3014|
                  |L1.3046|
;;;183    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;184    									}
;;;185    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000be6  f7fffffe          BL       clear
;;;186    									//clear();
;;;187    									memset(data,0,strlen(data));
000bea  4855              LDR      r0,|L1.3392|
000bec  f7fffffe          BL       strlen
000bf0  4604              MOV      r4,r0
000bf2  4621              MOV      r1,r4
000bf4  4852              LDR      r0,|L1.3392|
000bf6  f7fffffe          BL       __aeabi_memclr
;;;188    									clear();
000bfa  f7fffffe          BL       clear
;;;189    
;;;190    								
;;;191    	
;;;192    	//log_it();		                         //logging
;;;193    		memset(data,0,strlen(data));	
000bfe  4850              LDR      r0,|L1.3392|
000c00  f7fffffe          BL       strlen
000c04  4604              MOV      r4,r0
000c06  4621              MOV      r1,r4
000c08  484d              LDR      r0,|L1.3392|
000c0a  f7fffffe          BL       __aeabi_memclr
;;;194    
;;;195    					   	if(flagch!=1){
000c0e  4861              LDR      r0,|L1.3476|
000c10  6800              LDR      r0,[r0,#0]  ; flagch
000c12  2801              CMP      r0,#1
000c14  d009              BEQ      |L1.3114|
;;;196    							temp=int_erval;				
000c16  4860              LDR      r0,|L1.3480|
000c18  6800              LDR      r0,[r0,#0]  ; int_erval
000c1a  4960              LDR      r1,|L1.3484|
000c1c  6008              STR      r0,[r1,#0]  ; temp
;;;197    							int_erval=4;
000c1e  2004              MOVS     r0,#4
000c20  495d              LDR      r1,|L1.3480|
000c22  6008              STR      r0,[r1,#0]  ; int_erval
;;;198    							flagch=1;}
000c24  2001              MOVS     r0,#1
000c26  495b              LDR      r1,|L1.3476|
000c28  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.3114|
;;;199    							clear();	
000c2a  f7fffffe          BL       clear
;;;200    									GPS_COLLECT();
000c2e  f7fffffe          BL       GPS_COLLECT
;;;201    									strcat(data,"CH\n");	
000c32  a144              ADR      r1,|L1.3396|
000c34  4842              LDR      r0,|L1.3392|
000c36  f7fffffe          BL       strcat
;;;202    
;;;203    //*********************************tcp_initialization();//reinitialization*************************************//
;;;204    
;;;205    	
;;;206    msg_sim800(); 
000c3a  f7fffffe          BL       msg_sim800
;;;207    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
000c3e  2005              MOVS     r0,#5
000c40  4b4c              LDR      r3,|L1.3444|
000c42  461a              MOV      r2,r3
000c44  3a70              SUBS     r2,r2,#0x70
000c46  a156              ADR      r1,|L1.3488|
000c48  9000              STR      r0,[sp,#0]
000c4a  a056              ADR      r0,|L1.3492|
000c4c  f7fffffe          BL       send_GSM
;;;208    delay(100);
000c50  2064              MOVS     r0,#0x64
000c52  f7fffffe          BL       delay
;;;209    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
000c56  2004              MOVS     r0,#4
000c58  4b46              LDR      r3,|L1.3444|
000c5a  a256              ADR      r2,|L1.3508|
000c5c  a150              ADR      r1,|L1.3488|
000c5e  9000              STR      r0,[sp,#0]
000c60  a059              ADR      r0,|L1.3528|
000c62  f7fffffe          BL       send_GSM
;;;210    GPS_COLLECT2();
000c66  f7fffffe          BL       GPS_COLLECT2
;;;211    strcat(data,"CH\n");		
000c6a  a136              ADR      r1,|L1.3396|
000c6c  4834              LDR      r0,|L1.3392|
000c6e  f7fffffe          BL       strcat
;;;212    GPS_COLLECT2();
000c72  f7fffffe          BL       GPS_COLLECT2
;;;213    strcat(data,"CH\n");	
000c76  a133              ADR      r1,|L1.3396|
000c78  4831              LDR      r0,|L1.3392|
000c7a  f7fffffe          BL       strcat
;;;214    GPS_COLLECT2();
000c7e  f7fffffe          BL       GPS_COLLECT2
;;;215    strcat(data,"CH\n");
000c82  a130              ADR      r1,|L1.3396|
000c84  482e              LDR      r0,|L1.3392|
000c86  f7fffffe          BL       strcat
;;;216    cond201=(strstr(uart_string_gsm, "OK"));
000c8a  a145              ADR      r1,|L1.3488|
000c8c  4840              LDR      r0,|L1.3472|
000c8e  f7fffffe          BL       strstr
000c92  4951              LDR      r1,|L1.3544|
000c94  6008              STR      r0,[r1,#0]  ; cond201
;;;217    cond200=(strstr(uart_string_gsm, "ERROR"));
000c96  4937              LDR      r1,|L1.3444|
000c98  483d              LDR      r0,|L1.3472|
000c9a  f7fffffe          BL       strstr
000c9e  494f              LDR      r1,|L1.3548|
000ca0  6008              STR      r0,[r1,#0]  ; cond200
;;;218    if((!(cond201|| cond200 ))  && sleep_flag != 1)
000ca2  484d              LDR      r0,|L1.3544|
000ca4  6800              LDR      r0,[r0,#0]  ; cond201
000ca6  2800              CMP      r0,#0
                  |L1.3240|
000ca8  d147              BNE      |L1.3386|
000caa  4608              MOV      r0,r1
000cac  6800              LDR      r0,[r0,#0]  ; cond200
000cae  2800              CMP      r0,#0
000cb0  d1fa              BNE      |L1.3240|
000cb2  484b              LDR      r0,|L1.3552|
000cb4  6800              LDR      r0,[r0,#0]  ; sleep_flag
000cb6  2801              CMP      r0,#1
000cb8  d03f              BEQ      |L1.3386|
;;;219    {
;;;220    delay(100);
000cba  2064              MOVS     r0,#0x64
000cbc  f7fffffe          BL       delay
;;;221    clear();//memset(uart_string_gsm,0,5000);
000cc0  f7fffffe          BL       clear
;;;222    memset(at_,0,100);
000cc4  2164              MOVS     r1,#0x64
000cc6  4820              LDR      r0,|L1.3400|
000cc8  f7fffffe          BL       __aeabi_memclr
;;;223    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000ccc  481c              LDR      r0,|L1.3392|
000cce  f7fffffe          BL       strlen
000cd2  1c44              ADDS     r4,r0,#1
000cd4  4623              MOV      r3,r4
000cd6  4a1d              LDR      r2,|L1.3404|
000cd8  a11d              ADR      r1,|L1.3408|
000cda  481b              LDR      r0,|L1.3400|
000cdc  f7fffffe          BL       __2sprintf
;;;224    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000ce0  2005              MOVS     r0,#5
000ce2  4b24              LDR      r3,|L1.3444|
000ce4  461a              MOV      r2,r3
000ce6  3a70              SUBS     r2,r2,#0x70
000ce8  a123              ADR      r1,|L1.3448|
000cea  9000              STR      r0,[sp,#0]
000cec  4816              LDR      r0,|L1.3400|
000cee  f7fffffe          BL       send_SD
;;;225    clear();	
000cf2  f7fffffe          BL       clear
;;;226    k2=0;									//string array counter for uart 1
000cf6  2000              MOVS     r0,#0
000cf8  4920              LDR      r1,|L1.3452|
000cfa  6008              STR      r0,[r1,#0]  ; k2
;;;227    tout=0;	
000cfc  4920              LDR      r1,|L1.3456|
000cfe  6008              STR      r0,[r1,#0]  ; tout
;;;228    for(k=0;k<strlen(data);k++)
000d00  4920              LDR      r1,|L1.3460|
000d02  6008              STR      r0,[r1,#0]  ; k
000d04  e00b              B        |L1.3358|
                  |L1.3334|
;;;229    {
;;;230    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000d06  480e              LDR      r0,|L1.3392|
000d08  4a1e              LDR      r2,|L1.3460|
000d0a  6812              LDR      r2,[r2,#0]  ; k
000d0c  5c81              LDRB     r1,[r0,r2]
000d0e  480b              LDR      r0,|L1.3388|
000d10  f7fffffe          BL       uart_putchar
000d14  481b              LDR      r0,|L1.3460|
000d16  6800              LDR      r0,[r0,#0]            ;228  ; k
000d18  1c40              ADDS     r0,r0,#1              ;228
000d1a  491a              LDR      r1,|L1.3460|
000d1c  6008              STR      r0,[r1,#0]            ;228  ; k
                  |L1.3358|
000d1e  4808              LDR      r0,|L1.3392|
000d20  f7fffffe          BL       strlen
000d24  4917              LDR      r1,|L1.3460|
000d26  6809              LDR      r1,[r1,#0]            ;228  ; k
000d28  4288              CMP      r0,r1                 ;228
000d2a  d8ec              BHI      |L1.3334|
;;;231    }	
;;;232    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000d2c  210a              MOVS     r1,#0xa
000d2e  4803              LDR      r0,|L1.3388|
000d30  f7fffffe          BL       uart_putchar
000d34  210a              MOVS     r1,#0xa
000d36  4801              LDR      r0,|L1.3388|
000d38  e054              B        |L1.3556|
                  |L1.3386|
000d3a  e15a              B        |L1.4082|
                  |L1.3388|
                          DCD      0x4006b000
                  |L1.3392|
                          DCD      data
                  |L1.3396|
000d44  43480a00          DCB      "CH\n",0
                  |L1.3400|
                          DCD      at_
                  |L1.3404|
                          DCD      drive
                  |L1.3408|
000d50  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
000d54  2b465357
000d58  52495445
000d5c  3d25735c
000d60  4c4f472e
000d64  5458542c
000d68  312c2564
000d6c  2c31300a
000d70  0a00    
000d72  00                DCB      0
000d73  00                DCB      0
                  |L1.3444|
                          DCD      ||.text||+0x910
                  |L1.3448|
000d78  3e00              DCB      ">",0
000d7a  00                DCB      0
000d7b  00                DCB      0
                  |L1.3452|
                          DCD      ||k2||
                  |L1.3456|
                          DCD      tout
                  |L1.3460|
                          DCD      k
                  |L1.3464|
000d88  4f4b0d0a          DCB      "OK\r\n",0
000d8c  00      
000d8d  00                DCB      0
000d8e  00                DCB      0
000d8f  00                DCB      0
                  |L1.3472|
                          DCD      uart_string_gsm
                  |L1.3476|
                          DCD      flagch
                  |L1.3480|
                          DCD      int_erval
                  |L1.3484|
                          DCD      temp
                  |L1.3488|
000da0  4f4b00            DCB      "OK",0
000da3  00                DCB      0
                  |L1.3492|
000da4  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
000da8  2b434655
000dac  4e3d300d
000db0  0d0a0a00
                  |L1.3508|
000db4  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
000db8  494e5345
000dbc  52544544
000dc0  0d0a4f4b
000dc4  00      
000dc5  00                DCB      0
000dc6  00                DCB      0
000dc7  00                DCB      0
                  |L1.3528|
000dc8  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000dcc  2b434655
000dd0  4e3d310d
000dd4  0a00    
000dd6  00                DCB      0
000dd7  00                DCB      0
                  |L1.3544|
                          DCD      cond201
                  |L1.3548|
                          DCD      cond200
                  |L1.3552|
                          DCD      sleep_flag
                  |L1.3556|
000de4  f7fffffe          BL       uart_putchar
000de8  210a              MOVS     r1,#0xa
000dea  48fe              LDR      r0,|L1.4580|
000dec  f7fffffe          BL       uart_putchar
000df0  210a              MOVS     r1,#0xa
000df2  48fc              LDR      r0,|L1.4580|
000df4  f7fffffe          BL       uart_putchar
000df8  210a              MOVS     r1,#0xa
000dfa  48fa              LDR      r0,|L1.4580|
000dfc  f7fffffe          BL       uart_putchar
000e00  210a              MOVS     r1,#0xa
000e02  48f8              LDR      r0,|L1.4580|
000e04  f7fffffe          BL       uart_putchar
000e08  210a              MOVS     r1,#0xa
000e0a  48f6              LDR      r0,|L1.4580|
000e0c  f7fffffe          BL       uart_putchar
000e10  210a              MOVS     r1,#0xa
000e12  48f4              LDR      r0,|L1.4580|
000e14  f7fffffe          BL       uart_putchar
000e18  210a              MOVS     r1,#0xa
000e1a  48f2              LDR      r0,|L1.4580|
000e1c  f7fffffe          BL       uart_putchar
000e20  210a              MOVS     r1,#0xa
000e22  48f0              LDR      r0,|L1.4580|
000e24  f7fffffe          BL       uart_putchar
000e28  210a              MOVS     r1,#0xa
000e2a  48ee              LDR      r0,|L1.4580|
000e2c  f7fffffe          BL       uart_putchar
000e30  210a              MOVS     r1,#0xa
000e32  48ec              LDR      r0,|L1.4580|
000e34  f7fffffe          BL       uart_putchar
000e38  210a              MOVS     r1,#0xa
000e3a  48ea              LDR      r0,|L1.4580|
000e3c  f7fffffe          BL       uart_putchar
000e40  210a              MOVS     r1,#0xa
000e42  48e8              LDR      r0,|L1.4580|
000e44  f7fffffe          BL       uart_putchar
000e48  210a              MOVS     r1,#0xa
000e4a  48e6              LDR      r0,|L1.4580|
000e4c  f7fffffe          BL       uart_putchar
000e50  210a              MOVS     r1,#0xa
000e52  48e4              LDR      r0,|L1.4580|
000e54  f7fffffe          BL       uart_putchar
000e58  210a              MOVS     r1,#0xa
000e5a  48e2              LDR      r0,|L1.4580|
000e5c  f7fffffe          BL       uart_putchar
000e60  210a              MOVS     r1,#0xa
000e62  48e0              LDR      r0,|L1.4580|
000e64  f7fffffe          BL       uart_putchar
000e68  210a              MOVS     r1,#0xa
000e6a  48de              LDR      r0,|L1.4580|
000e6c  f7fffffe          BL       uart_putchar
000e70  210a              MOVS     r1,#0xa
000e72  48dc              LDR      r0,|L1.4580|
000e74  f7fffffe          BL       uart_putchar
000e78  210a              MOVS     r1,#0xa
000e7a  48da              LDR      r0,|L1.4580|
000e7c  f7fffffe          BL       uart_putchar
000e80  210a              MOVS     r1,#0xa
000e82  48d8              LDR      r0,|L1.4580|
000e84  f7fffffe          BL       uart_putchar
000e88  210a              MOVS     r1,#0xa
000e8a  48d6              LDR      r0,|L1.4580|
000e8c  f7fffffe          BL       uart_putchar
000e90  210a              MOVS     r1,#0xa
000e92  48d4              LDR      r0,|L1.4580|
000e94  f7fffffe          BL       uart_putchar
000e98  210a              MOVS     r1,#0xa
000e9a  48d2              LDR      r0,|L1.4580|
000e9c  f7fffffe          BL       uart_putchar
000ea0  210a              MOVS     r1,#0xa
000ea2  48d0              LDR      r0,|L1.4580|
000ea4  f7fffffe          BL       uart_putchar
000ea8  210a              MOVS     r1,#0xa
000eaa  48ce              LDR      r0,|L1.4580|
000eac  f7fffffe          BL       uart_putchar
000eb0  210a              MOVS     r1,#0xa
000eb2  48cc              LDR      r0,|L1.4580|
000eb4  f7fffffe          BL       uart_putchar
000eb8  210a              MOVS     r1,#0xa
000eba  48ca              LDR      r0,|L1.4580|
000ebc  f7fffffe          BL       uart_putchar
000ec0  210a              MOVS     r1,#0xa
000ec2  48c8              LDR      r0,|L1.4580|
000ec4  f7fffffe          BL       uart_putchar
000ec8  210a              MOVS     r1,#0xa
000eca  48c6              LDR      r0,|L1.4580|
000ecc  f7fffffe          BL       uart_putchar
000ed0  210a              MOVS     r1,#0xa
000ed2  48c4              LDR      r0,|L1.4580|
000ed4  f7fffffe          BL       uart_putchar
000ed8  210a              MOVS     r1,#0xa
000eda  48c2              LDR      r0,|L1.4580|
000edc  f7fffffe          BL       uart_putchar
000ee0  210a              MOVS     r1,#0xa
000ee2  48c0              LDR      r0,|L1.4580|
000ee4  f7fffffe          BL       uart_putchar
000ee8  210a              MOVS     r1,#0xa
000eea  48be              LDR      r0,|L1.4580|
000eec  f7fffffe          BL       uart_putchar
000ef0  210a              MOVS     r1,#0xa
000ef2  48bc              LDR      r0,|L1.4580|
000ef4  f7fffffe          BL       uart_putchar
000ef8  210a              MOVS     r1,#0xa
000efa  48ba              LDR      r0,|L1.4580|
000efc  f7fffffe          BL       uart_putchar
000f00  210a              MOVS     r1,#0xa
000f02  48b8              LDR      r0,|L1.4580|
000f04  f7fffffe          BL       uart_putchar
000f08  210a              MOVS     r1,#0xa
000f0a  48b6              LDR      r0,|L1.4580|
000f0c  f7fffffe          BL       uart_putchar
000f10  210a              MOVS     r1,#0xa
000f12  48b4              LDR      r0,|L1.4580|
000f14  f7fffffe          BL       uart_putchar
000f18  210a              MOVS     r1,#0xa
000f1a  48b2              LDR      r0,|L1.4580|
000f1c  f7fffffe          BL       uart_putchar
000f20  210a              MOVS     r1,#0xa
000f22  48b0              LDR      r0,|L1.4580|
000f24  f7fffffe          BL       uart_putchar
000f28  210a              MOVS     r1,#0xa
000f2a  48ae              LDR      r0,|L1.4580|
000f2c  f7fffffe          BL       uart_putchar
000f30  210a              MOVS     r1,#0xa
000f32  48ac              LDR      r0,|L1.4580|
000f34  f7fffffe          BL       uart_putchar
000f38  210a              MOVS     r1,#0xa
000f3a  48aa              LDR      r0,|L1.4580|
000f3c  f7fffffe          BL       uart_putchar
000f40  210a              MOVS     r1,#0xa
000f42  48a8              LDR      r0,|L1.4580|
000f44  f7fffffe          BL       uart_putchar
000f48  210a              MOVS     r1,#0xa
000f4a  48a6              LDR      r0,|L1.4580|
000f4c  f7fffffe          BL       uart_putchar
000f50  210a              MOVS     r1,#0xa
000f52  48a4              LDR      r0,|L1.4580|
000f54  f7fffffe          BL       uart_putchar
000f58  210a              MOVS     r1,#0xa
000f5a  48a2              LDR      r0,|L1.4580|
000f5c  f7fffffe          BL       uart_putchar
000f60  210a              MOVS     r1,#0xa
000f62  48a0              LDR      r0,|L1.4580|
000f64  f7fffffe          BL       uart_putchar
000f68  210a              MOVS     r1,#0xa
000f6a  489e              LDR      r0,|L1.4580|
000f6c  f7fffffe          BL       uart_putchar
000f70  210a              MOVS     r1,#0xa
000f72  489c              LDR      r0,|L1.4580|
000f74  f7fffffe          BL       uart_putchar
000f78  210a              MOVS     r1,#0xa
000f7a  489a              LDR      r0,|L1.4580|
000f7c  f7fffffe          BL       uart_putchar
000f80  210a              MOVS     r1,#0xa
000f82  4898              LDR      r0,|L1.4580|
000f84  f7fffffe          BL       uart_putchar
000f88  210a              MOVS     r1,#0xa
000f8a  4896              LDR      r0,|L1.4580|
000f8c  f7fffffe          BL       uart_putchar
000f90  210a              MOVS     r1,#0xa
000f92  4894              LDR      r0,|L1.4580|
000f94  f7fffffe          BL       uart_putchar
000f98  210a              MOVS     r1,#0xa
000f9a  4892              LDR      r0,|L1.4580|
000f9c  f7fffffe          BL       uart_putchar
;;;233    									//memset(data,0,1000);
;;;234    														//timer counts to wait for characters in uart 1 									
;;;235    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000fa0  bf00              NOP      
                  |L1.4002|
000fa2  4991              LDR      r1,|L1.4584|
000fa4  4891              LDR      r0,|L1.4588|
000fa6  f7fffffe          BL       strstr
000faa  2800              CMP      r0,#0
000fac  d109              BNE      |L1.4034|
000fae  4990              LDR      r1,|L1.4592|
000fb0  488e              LDR      r0,|L1.4588|
000fb2  f7fffffe          BL       strstr
000fb6  2800              CMP      r0,#0
000fb8  d103              BNE      |L1.4034|
000fba  488e              LDR      r0,|L1.4596|
000fbc  6800              LDR      r0,[r0,#0]  ; tout
000fbe  2805              CMP      r0,#5
000fc0  ddef              BLE      |L1.4002|
                  |L1.4034|
;;;236    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;237    									}
;;;238    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000fc2  f7fffffe          BL       clear
;;;239    									//clear();
;;;240    									memset(data,0,strlen(data));
000fc6  488c              LDR      r0,|L1.4600|
000fc8  f7fffffe          BL       strlen
000fcc  4604              MOV      r4,r0
000fce  4621              MOV      r1,r4
000fd0  4889              LDR      r0,|L1.4600|
000fd2  f7fffffe          BL       __aeabi_memclr
;;;241    									clear();
000fd6  f7fffffe          BL       clear
;;;242    									RESET_OFF;delay(100);
000fda  2020              MOVS     r0,#0x20
000fdc  4987              LDR      r1,|L1.4604|
000fde  6088              STR      r0,[r1,#8]
000fe0  2064              MOVS     r0,#0x64
000fe2  f7fffffe          BL       delay
;;;243    									RESET_ON;delay(100);		
000fe6  2020              MOVS     r0,#0x20
000fe8  4984              LDR      r1,|L1.4604|
000fea  6048              STR      r0,[r1,#4]
000fec  2064              MOVS     r0,#0x64
000fee  f7fffffe          BL       delay
                  |L1.4082|
;;;244    }
;;;245    	
;;;246    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000ff2  2004              MOVS     r0,#4
000ff4  4b7e              LDR      r3,|L1.4592|
000ff6  3b78              SUBS     r3,r3,#0x78
000ff8  461a              MOV      r2,r3
000ffa  3208              ADDS     r2,r2,#8
000ffc  a180              ADR      r1,|L1.4608|
000ffe  9000              STR      r0,[sp,#0]
001000  a080              ADR      r0,|L1.4612|
001002  f7fffffe          BL       send_GSM
;;;247    GPS_COLLECT2();
001006  f7fffffe          BL       GPS_COLLECT2
;;;248    strcat(data,"CH\n");	
00100a  4977              LDR      r1,|L1.4584|
00100c  3944              SUBS     r1,r1,#0x44
00100e  487a              LDR      r0,|L1.4600|
001010  f7fffffe          BL       strcat
;;;249    memset(at_,0,100);
001014  2164              MOVS     r1,#0x64
001016  487f              LDR      r0,|L1.4628|
001018  f7fffffe          BL       __aeabi_memclr
;;;250    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
00101c  4a7e              LDR      r2,|L1.4632|
00101e  a17f              ADR      r1,|L1.4636|
001020  487c              LDR      r0,|L1.4628|
001022  f7fffffe          BL       __2sprintf
;;;251    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
001026  4882              LDR      r0,|L1.4656|
001028  6800              LDR      r0,[r0,#0]  ; tmeout
00102a  4b71              LDR      r3,|L1.4592|
00102c  3b78              SUBS     r3,r3,#0x78
00102e  461a              MOV      r2,r3
001030  3208              ADDS     r2,r2,#8
001032  a173              ADR      r1,|L1.4608|
001034  9000              STR      r0,[sp,#0]
001036  4877              LDR      r0,|L1.4628|
001038  f7fffffe          BL       send_GSM
;;;252    msg_sim800(); 
00103c  f7fffffe          BL       msg_sim800
;;;253    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
001040  2004              MOVS     r0,#4
001042  4b6b              LDR      r3,|L1.4592|
001044  3318              ADDS     r3,r3,#0x18
001046  461a              MOV      r2,r3
001048  3a88              SUBS     r2,r2,#0x88
00104a  a16d              ADR      r1,|L1.4608|
00104c  9000              STR      r0,[sp,#0]
00104e  a079              ADR      r0,|L1.4660|
001050  f7fffffe          BL       send_GSM
;;;254    GPS_COLLECT2();
001054  f7fffffe          BL       GPS_COLLECT2
;;;255    strcat(data,"CH\n");	
001058  4963              LDR      r1,|L1.4584|
00105a  3944              SUBS     r1,r1,#0x44
00105c  4866              LDR      r0,|L1.4600|
00105e  f7fffffe          BL       strcat
;;;256    GPS_COLLECT2();
001062  f7fffffe          BL       GPS_COLLECT2
;;;257    strcat(data,"CH\n");	
001066  4960              LDR      r1,|L1.4584|
001068  3944              SUBS     r1,r1,#0x44
00106a  4863              LDR      r0,|L1.4600|
00106c  f7fffffe          BL       strcat
;;;258    
;;;259    
;;;260    msg_sim800(); 
001070  f7fffffe          BL       msg_sim800
;;;261    GPS_COLLECT2();
001074  f7fffffe          BL       GPS_COLLECT2
;;;262    strcat(data,"CH\n");	
001078  495b              LDR      r1,|L1.4584|
00107a  3944              SUBS     r1,r1,#0x44
00107c  485e              LDR      r0,|L1.4600|
00107e  f7fffffe          BL       strcat
;;;263    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
001082  f7fffffe          BL       clear
001086  a06f              ADR      r0,|L1.4676|
001088  f7fffffe          BL       send_modem
00108c  f7fffffe          BL       clear
;;;264    					delay(20);
001090  2014              MOVS     r0,#0x14
001092  f7fffffe          BL       delay
;;;265    
;;;266    
;;;267    msg_sim800(); 
001096  f7fffffe          BL       msg_sim800
;;;268    
;;;269    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
00109a  4b6e              LDR      r3,|L1.4692|
00109c  4a6e              LDR      r2,|L1.4696|
00109e  a16f              ADR      r1,|L1.4700|
0010a0  485c              LDR      r0,|L1.4628|
0010a2  f7fffffe          BL       __2sprintf
;;;270    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0010a6  4862              LDR      r0,|L1.4656|
0010a8  6800              LDR      r0,[r0,#0]  ; tmeout
0010aa  4b51              LDR      r3,|L1.4592|
0010ac  3b78              SUBS     r3,r3,#0x78
0010ae  4a50              LDR      r2,|L1.4592|
0010b0  a172              ADR      r1,|L1.4732|
0010b2  9000              STR      r0,[sp,#0]
0010b4  4857              LDR      r0,|L1.4628|
0010b6  f7fffffe          BL       send_GSM
;;;271    						clear();
0010ba  f7fffffe          BL       clear
;;;272    						
;;;273    						
;;;274    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
0010be  485c              LDR      r0,|L1.4656|
0010c0  6800              LDR      r0,[r0,#0]  ; tmeout
0010c2  a370              ADR      r3,|L1.4740|
0010c4  4a4a              LDR      r2,|L1.4592|
0010c6  a173              ADR      r1,|L1.4756|
0010c8  9000              STR      r0,[sp,#0]
0010ca  a073              ADR      r0,|L1.4760|
0010cc  f7fffffe          BL       send_GSM
;;;275    //*********************************tcp_initialization_ends*****************************************************//							
;;;276    									
;;;277    						clear();		
0010d0  f7fffffe          BL       clear
;;;278    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
0010d4  213e              MOVS     r1,#0x3e
0010d6  4845              LDR      r0,|L1.4588|
0010d8  f7fffffe          BL       mystrstr
0010dc  4972              LDR      r1,|L1.4776|
0010de  7008              STRB     r0,[r1,#0]
;;;279    								if(cond)	
0010e0  4608              MOV      r0,r1
0010e2  7800              LDRB     r0,[r0,#0]  ; cond
0010e4  2800              CMP      r0,#0
0010e6  d07b              BEQ      |L1.4576|
;;;280    								{	
;;;281    
;;;282    									clear();
0010e8  f7fffffe          BL       clear
;;;283    									memset(uart_string_gsm,0,5000);
0010ec  496f              LDR      r1,|L1.4780|
0010ee  483f              LDR      r0,|L1.4588|
0010f0  f7fffffe          BL       __aeabi_memclr
;;;284    									strcat(data,"\n");
0010f4  a152              ADR      r1,|L1.4672|
0010f6  4840              LDR      r0,|L1.4600|
0010f8  f7fffffe          BL       strcat
;;;285    									len=strlen(data);
0010fc  483e              LDR      r0,|L1.4600|
0010fe  f7fffffe          BL       strlen
001102  496b              LDR      r1,|L1.4784|
001104  6008              STR      r0,[r1,#0]  ; len
;;;286    									tout=0;
001106  2000              MOVS     r0,#0
001108  493a              LDR      r1,|L1.4596|
00110a  6008              STR      r0,[r1,#0]  ; tout
;;;287    									k2=0;
00110c  4969              LDR      r1,|L1.4788|
00110e  6008              STR      r0,[r1,#0]  ; k2
;;;288    									for(k=0;k<len;k++)
001110  4969              LDR      r1,|L1.4792|
001112  6008              STR      r0,[r1,#0]  ; k
001114  e00b              B        |L1.4398|
                  |L1.4374|
;;;289    									{
;;;290    										uart_putchar(UART1_BASE_PTR, data[k]);
001116  4838              LDR      r0,|L1.4600|
001118  4a67              LDR      r2,|L1.4792|
00111a  6812              LDR      r2,[r2,#0]  ; k
00111c  5c81              LDRB     r1,[r0,r2]
00111e  4831              LDR      r0,|L1.4580|
001120  f7fffffe          BL       uart_putchar
001124  4864              LDR      r0,|L1.4792|
001126  6800              LDR      r0,[r0,#0]            ;288  ; k
001128  1c40              ADDS     r0,r0,#1              ;288
00112a  4963              LDR      r1,|L1.4792|
00112c  6008              STR      r0,[r1,#0]            ;288  ; k
                  |L1.4398|
00112e  4862              LDR      r0,|L1.4792|
001130  6800              LDR      r0,[r0,#0]            ;288  ; k
001132  495f              LDR      r1,|L1.4784|
001134  6809              LDR      r1,[r1,#0]            ;288  ; len
001136  4288              CMP      r0,r1                 ;288
001138  dbed              BLT      |L1.4374|
;;;291    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00113a  210a              MOVS     r1,#0xa
00113c  4829              LDR      r0,|L1.4580|
00113e  f7fffffe          BL       uart_putchar
001142  211a              MOVS     r1,#0x1a
001144  4827              LDR      r0,|L1.4580|
001146  f7fffffe          BL       uart_putchar
00114a  211a              MOVS     r1,#0x1a
00114c  4825              LDR      r0,|L1.4580|
00114e  f7fffffe          BL       uart_putchar
001152  211a              MOVS     r1,#0x1a
001154  4823              LDR      r0,|L1.4580|
001156  f7fffffe          BL       uart_putchar
;;;292    									do
00115a  bf00              NOP      
                  |L1.4444|
;;;293    																{stcond1=strstr(uart_string_gsm,"SEND OK");
00115c  4924              LDR      r1,|L1.4592|
00115e  3908              SUBS     r1,r1,#8
001160  4822              LDR      r0,|L1.4588|
001162  f7fffffe          BL       strstr
001166  4955              LDR      r1,|L1.4796|
001168  6008              STR      r0,[r1,#0]  ; stcond1
;;;294    																	stcond2=strstr(uart_string_gsm, "ERROR");
00116a  4921              LDR      r1,|L1.4592|
00116c  481f              LDR      r0,|L1.4588|
00116e  f7fffffe          BL       strstr
001172  4953              LDR      r1,|L1.4800|
001174  6008              STR      r0,[r1,#0]  ; stcond2
;;;295    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001176  a145              ADR      r1,|L1.4748|
001178  481c              LDR      r0,|L1.4588|
00117a  f7fffffe          BL       strstr
00117e  4951              LDR      r1,|L1.4804|
001180  6008              STR      r0,[r1,#0]  ; stcond3
;;;296    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001182  491b              LDR      r1,|L1.4592|
001184  3118              ADDS     r1,r1,#0x18
001186  4819              LDR      r0,|L1.4588|
001188  f7fffffe          BL       strstr
00118c  494e              LDR      r1,|L1.4808|
00118e  6008              STR      r0,[r1,#0]  ; stcond4
;;;297    																	
;;;298    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
001190  484b              LDR      r0,|L1.4800|
001192  6800              LDR      r0,[r0,#0]  ; stcond2
001194  2800              CMP      r0,#0
001196  d10f              BNE      |L1.4536|
001198  484a              LDR      r0,|L1.4804|
00119a  6800              LDR      r0,[r0,#0]  ; stcond3
00119c  2800              CMP      r0,#0
00119e  d10b              BNE      |L1.4536|
0011a0  4608              MOV      r0,r1
0011a2  6800              LDR      r0,[r0,#0]  ; stcond4
0011a4  2800              CMP      r0,#0
0011a6  d107              BNE      |L1.4536|
0011a8  4844              LDR      r0,|L1.4796|
0011aa  6800              LDR      r0,[r0,#0]  ; stcond1
0011ac  2800              CMP      r0,#0
0011ae  d103              BNE      |L1.4536|
0011b0  4810              LDR      r0,|L1.4596|
0011b2  6800              LDR      r0,[r0,#0]  ; tout
0011b4  2804              CMP      r0,#4
0011b6  ddd1              BLE      |L1.4444|
                  |L1.4536|
;;;299    															//	delay(10);clear();
;;;300    														uart_putchar(UART1_BASE_PTR,0x1A);
0011b8  211a              MOVS     r1,#0x1a
0011ba  480a              LDR      r0,|L1.4580|
0011bc  f7fffffe          BL       uart_putchar
;;;301    											//	delay(10);
;;;302    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0011c0  211a              MOVS     r1,#0x1a
0011c2  4808              LDR      r0,|L1.4580|
0011c4  f7fffffe          BL       uart_putchar
0011c8  211a              MOVS     r1,#0x1a
0011ca  4806              LDR      r0,|L1.4580|
0011cc  f7fffffe          BL       uart_putchar
0011d0  211a              MOVS     r1,#0x1a
0011d2  4804              LDR      r0,|L1.4580|
0011d4  f7fffffe          BL       uart_putchar
;;;303    						
;;;304    
;;;305    
;;;306    									
;;;307    															
;;;308    															
;;;309    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;310    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;311    															
;;;312    														//qwe=strlen(uart_string_gsm);
;;;313    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;314    															delay(20);
0011d8  2014              MOVS     r0,#0x14
0011da  f7fffffe          BL       delay
;;;315    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
0011de  e075              B        |L1.4812|
                  |L1.4576|
0011e0  e1c1              B        |L1.5478|
0011e2  0000              DCW      0x0000
                  |L1.4580|
                          DCD      0x4006b000
                  |L1.4584|
                          DCD      ||.text||+0xd88
                  |L1.4588|
                          DCD      uart_string_gsm
                  |L1.4592|
                          DCD      ||.text||+0x910
                  |L1.4596|
                          DCD      tout
                  |L1.4600|
                          DCD      data
                  |L1.4604|
                          DCD      0x400ff080
                  |L1.4608|
001200  4f4b00            DCB      "OK",0
001203  00                DCB      0
                  |L1.4612|
001204  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
001208  2b434950
00120c  53485554
001210  0d0a00  
001213  00                DCB      0
                  |L1.4628|
                          DCD      at_
                  |L1.4632|
                          DCD      apn
                  |L1.4636|
00121c  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
001220  2b435354
001224  543d2225
001228  73220d0a
00122c  00      
00122d  00                DCB      0
00122e  00                DCB      0
00122f  00                DCB      0
                  |L1.4656|
                          DCD      tmeout
                  |L1.4660|
001234  0d0a4154          DCB      "\r\nAT+CIICR\r\r"
001238  2b434949
00123c  43520d0d
                  |L1.4672|
001240  0a00              DCB      "\n",0
001242  00                DCB      0
001243  00                DCB      0
                  |L1.4676|
001244  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
001248  43494653
00124c  520d0d0a
001250  00      
001251  00                DCB      0
001252  00                DCB      0
001253  00                DCB      0
                  |L1.4692|
                          DCD      port
                  |L1.4696|
                          DCD      ||ip||
                  |L1.4700|
00125c  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
001260  2b434950
001264  53544152
001268  543d2254
00126c  4350222c
001270  22257322
001274  2c222573
001278  220d0a00
                  |L1.4732|
00127c  434f4e4e          DCB      "CONNECT",0
001280  45435400
                  |L1.4740|
001284  434f4e4e          DCB      "CONNECT "
001288  45435420
                  |L1.4748|
00128c  4641494c          DCB      "FAIL",0
001290  00      
001291  00                DCB      0
001292  00                DCB      0
001293  00                DCB      0
                  |L1.4756|
001294  3e00              DCB      ">",0
001296  00                DCB      0
001297  00                DCB      0
                  |L1.4760|
001298  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
00129c  2b434950
0012a0  53454e44
0012a4  0d0a00  
0012a7  00                DCB      0
                  |L1.4776|
                          DCD      cond
                  |L1.4780|
                          DCD      0x00001388
                  |L1.4784|
                          DCD      len
                  |L1.4788|
                          DCD      ||k2||
                  |L1.4792|
                          DCD      k
                  |L1.4796|
                          DCD      stcond1
                  |L1.4800|
                          DCD      stcond2
                  |L1.4804|
                          DCD      stcond3
                  |L1.4808|
                          DCD      stcond4
                  |L1.4812|
0012cc  49fd              LDR      r1,|L1.5828|
0012ce  48fe              LDR      r0,|L1.5832|
0012d0  f7fffffe          BL       strstr
0012d4  49fd              LDR      r1,|L1.5836|
0012d6  6008              STR      r0,[r1,#0]  ; con1d
;;;316    																if(!con1d)
0012d8  4608              MOV      r0,r1
0012da  6800              LDR      r0,[r0,#0]  ; con1d
0012dc  2800              CMP      r0,#0
0012de  d17c              BNE      |L1.5082|
;;;317    																{
;;;318    																	
;;;319    																	
;;;320    																	
;;;321    																	
;;;322    																	
;;;323    	delay(100);
0012e0  2064              MOVS     r0,#0x64
0012e2  f7fffffe          BL       delay
;;;324    		clear();//memset(uart_string_gsm,0,5000);
0012e6  f7fffffe          BL       clear
;;;325    	
;;;326    	memset(at_,0,100);
0012ea  2164              MOVS     r1,#0x64
0012ec  48f8              LDR      r0,|L1.5840|
0012ee  f7fffffe          BL       __aeabi_memclr
;;;327    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0012f2  48f8              LDR      r0,|L1.5844|
0012f4  f7fffffe          BL       strlen
0012f8  1c44              ADDS     r4,r0,#1
0012fa  4623              MOV      r3,r4
0012fc  4af6              LDR      r2,|L1.5848|
0012fe  49f7              LDR      r1,|L1.5852|
001300  48f3              LDR      r0,|L1.5840|
001302  f7fffffe          BL       __2sprintf
;;;328    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001306  2005              MOVS     r0,#5
001308  4bee              LDR      r3,|L1.5828|
00130a  3308              ADDS     r3,r3,#8
00130c  461a              MOV      r2,r3
00130e  3a70              SUBS     r2,r2,#0x70
001310  a1f3              ADR      r1,|L1.5856|
001312  9000              STR      r0,[sp,#0]
001314  48ee              LDR      r0,|L1.5840|
001316  f7fffffe          BL       send_SD
;;;329    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;330    //	if(strstr(uart_string_gsm,"ERROR")){
;;;331    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;332    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;333    //	}
;;;334    	
;;;335    clear();	
00131a  f7fffffe          BL       clear
;;;336    									k2=0;									//string array counter for uart 1
00131e  2000              MOVS     r0,#0
001320  49f0              LDR      r1,|L1.5860|
001322  6008              STR      r0,[r1,#0]  ; k2
;;;337    									tout=0;	
001324  49f0              LDR      r1,|L1.5864|
001326  6008              STR      r0,[r1,#0]  ; tout
;;;338    		for(k=0;k<strlen(data);k++)
001328  49f0              LDR      r1,|L1.5868|
00132a  6008              STR      r0,[r1,#0]  ; k
00132c  e00b              B        |L1.4934|
                  |L1.4910|
;;;339    		{
;;;340    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00132e  48e9              LDR      r0,|L1.5844|
001330  4aee              LDR      r2,|L1.5868|
001332  6812              LDR      r2,[r2,#0]  ; k
001334  5c81              LDRB     r1,[r0,r2]
001336  48ee              LDR      r0,|L1.5872|
001338  f7fffffe          BL       uart_putchar
00133c  48eb              LDR      r0,|L1.5868|
00133e  6800              LDR      r0,[r0,#0]            ;338  ; k
001340  1c40              ADDS     r0,r0,#1              ;338
001342  49ea              LDR      r1,|L1.5868|
001344  6008              STR      r0,[r1,#0]            ;338  ; k
                  |L1.4934|
001346  48e3              LDR      r0,|L1.5844|
001348  f7fffffe          BL       strlen
00134c  49e7              LDR      r1,|L1.5868|
00134e  6809              LDR      r1,[r1,#0]            ;338  ; k
001350  4288              CMP      r0,r1                 ;338
001352  d8ec              BHI      |L1.4910|
;;;341    		}	
;;;342    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001354  210a              MOVS     r1,#0xa
001356  48e6              LDR      r0,|L1.5872|
001358  f7fffffe          BL       uart_putchar
00135c  210a              MOVS     r1,#0xa
00135e  48e4              LDR      r0,|L1.5872|
001360  f7fffffe          BL       uart_putchar
001364  210a              MOVS     r1,#0xa
001366  48e2              LDR      r0,|L1.5872|
001368  f7fffffe          BL       uart_putchar
00136c  210a              MOVS     r1,#0xa
00136e  48e0              LDR      r0,|L1.5872|
001370  f7fffffe          BL       uart_putchar
001374  210a              MOVS     r1,#0xa
001376  48de              LDR      r0,|L1.5872|
001378  f7fffffe          BL       uart_putchar
00137c  210a              MOVS     r1,#0xa
00137e  48dc              LDR      r0,|L1.5872|
001380  f7fffffe          BL       uart_putchar
001384  210a              MOVS     r1,#0xa
001386  48da              LDR      r0,|L1.5872|
001388  f7fffffe          BL       uart_putchar
00138c  210a              MOVS     r1,#0xa
00138e  48d8              LDR      r0,|L1.5872|
001390  f7fffffe          BL       uart_putchar
001394  210a              MOVS     r1,#0xa
001396  48d6              LDR      r0,|L1.5872|
001398  f7fffffe          BL       uart_putchar
00139c  210a              MOVS     r1,#0xa
00139e  48d4              LDR      r0,|L1.5872|
0013a0  f7fffffe          BL       uart_putchar
0013a4  210a              MOVS     r1,#0xa
0013a6  48d2              LDR      r0,|L1.5872|
0013a8  f7fffffe          BL       uart_putchar
0013ac  210a              MOVS     r1,#0xa
0013ae  48d0              LDR      r0,|L1.5872|
0013b0  f7fffffe          BL       uart_putchar
0013b4  210a              MOVS     r1,#0xa
0013b6  48ce              LDR      r0,|L1.5872|
0013b8  f7fffffe          BL       uart_putchar
0013bc  210a              MOVS     r1,#0xa
0013be  48cc              LDR      r0,|L1.5872|
0013c0  f7fffffe          BL       uart_putchar
0013c4  210a              MOVS     r1,#0xa
0013c6  48ca              LDR      r0,|L1.5872|
0013c8  f7fffffe          BL       uart_putchar
0013cc  210a              MOVS     r1,#0xa
0013ce  48c8              LDR      r0,|L1.5872|
0013d0  f7fffffe          BL       uart_putchar
0013d4  210a              MOVS     r1,#0xa
0013d6  48c6              LDR      r0,|L1.5872|
0013d8  e000              B        |L1.5084|
                  |L1.5082|
0013da  e0c1              B        |L1.5472|
                  |L1.5084|
0013dc  f7fffffe          BL       uart_putchar
0013e0  210a              MOVS     r1,#0xa
0013e2  48c3              LDR      r0,|L1.5872|
0013e4  f7fffffe          BL       uart_putchar
0013e8  210a              MOVS     r1,#0xa
0013ea  48c1              LDR      r0,|L1.5872|
0013ec  f7fffffe          BL       uart_putchar
0013f0  210a              MOVS     r1,#0xa
0013f2  48bf              LDR      r0,|L1.5872|
0013f4  f7fffffe          BL       uart_putchar
0013f8  210a              MOVS     r1,#0xa
0013fa  48bd              LDR      r0,|L1.5872|
0013fc  f7fffffe          BL       uart_putchar
001400  210a              MOVS     r1,#0xa
001402  48bb              LDR      r0,|L1.5872|
001404  f7fffffe          BL       uart_putchar
001408  210a              MOVS     r1,#0xa
00140a  48b9              LDR      r0,|L1.5872|
00140c  f7fffffe          BL       uart_putchar
001410  210a              MOVS     r1,#0xa
001412  48b7              LDR      r0,|L1.5872|
001414  f7fffffe          BL       uart_putchar
001418  210a              MOVS     r1,#0xa
00141a  48b5              LDR      r0,|L1.5872|
00141c  f7fffffe          BL       uart_putchar
001420  210a              MOVS     r1,#0xa
001422  48b3              LDR      r0,|L1.5872|
001424  f7fffffe          BL       uart_putchar
001428  210a              MOVS     r1,#0xa
00142a  48b1              LDR      r0,|L1.5872|
00142c  f7fffffe          BL       uart_putchar
001430  210a              MOVS     r1,#0xa
001432  48af              LDR      r0,|L1.5872|
001434  f7fffffe          BL       uart_putchar
001438  210a              MOVS     r1,#0xa
00143a  48ad              LDR      r0,|L1.5872|
00143c  f7fffffe          BL       uart_putchar
001440  210a              MOVS     r1,#0xa
001442  48ab              LDR      r0,|L1.5872|
001444  f7fffffe          BL       uart_putchar
001448  210a              MOVS     r1,#0xa
00144a  48a9              LDR      r0,|L1.5872|
00144c  f7fffffe          BL       uart_putchar
001450  210a              MOVS     r1,#0xa
001452  48a7              LDR      r0,|L1.5872|
001454  f7fffffe          BL       uart_putchar
001458  210a              MOVS     r1,#0xa
00145a  48a5              LDR      r0,|L1.5872|
00145c  f7fffffe          BL       uart_putchar
001460  210a              MOVS     r1,#0xa
001462  48a3              LDR      r0,|L1.5872|
001464  f7fffffe          BL       uart_putchar
001468  210a              MOVS     r1,#0xa
00146a  48a1              LDR      r0,|L1.5872|
00146c  f7fffffe          BL       uart_putchar
001470  210a              MOVS     r1,#0xa
001472  489f              LDR      r0,|L1.5872|
001474  f7fffffe          BL       uart_putchar
001478  210a              MOVS     r1,#0xa
00147a  489d              LDR      r0,|L1.5872|
00147c  f7fffffe          BL       uart_putchar
001480  210a              MOVS     r1,#0xa
001482  489b              LDR      r0,|L1.5872|
001484  f7fffffe          BL       uart_putchar
001488  210a              MOVS     r1,#0xa
00148a  4899              LDR      r0,|L1.5872|
00148c  f7fffffe          BL       uart_putchar
001490  210a              MOVS     r1,#0xa
001492  4897              LDR      r0,|L1.5872|
001494  f7fffffe          BL       uart_putchar
001498  210a              MOVS     r1,#0xa
00149a  4895              LDR      r0,|L1.5872|
00149c  f7fffffe          BL       uart_putchar
0014a0  210a              MOVS     r1,#0xa
0014a2  4893              LDR      r0,|L1.5872|
0014a4  f7fffffe          BL       uart_putchar
0014a8  210a              MOVS     r1,#0xa
0014aa  4891              LDR      r0,|L1.5872|
0014ac  f7fffffe          BL       uart_putchar
0014b0  210a              MOVS     r1,#0xa
0014b2  488f              LDR      r0,|L1.5872|
0014b4  f7fffffe          BL       uart_putchar
0014b8  210a              MOVS     r1,#0xa
0014ba  488d              LDR      r0,|L1.5872|
0014bc  f7fffffe          BL       uart_putchar
0014c0  210a              MOVS     r1,#0xa
0014c2  488b              LDR      r0,|L1.5872|
0014c4  f7fffffe          BL       uart_putchar
0014c8  210a              MOVS     r1,#0xa
0014ca  4889              LDR      r0,|L1.5872|
0014cc  f7fffffe          BL       uart_putchar
0014d0  210a              MOVS     r1,#0xa
0014d2  4887              LDR      r0,|L1.5872|
0014d4  f7fffffe          BL       uart_putchar
0014d8  210a              MOVS     r1,#0xa
0014da  4885              LDR      r0,|L1.5872|
0014dc  f7fffffe          BL       uart_putchar
0014e0  210a              MOVS     r1,#0xa
0014e2  4883              LDR      r0,|L1.5872|
0014e4  f7fffffe          BL       uart_putchar
0014e8  210a              MOVS     r1,#0xa
0014ea  4881              LDR      r0,|L1.5872|
0014ec  f7fffffe          BL       uart_putchar
0014f0  210a              MOVS     r1,#0xa
0014f2  487f              LDR      r0,|L1.5872|
0014f4  f7fffffe          BL       uart_putchar
0014f8  210a              MOVS     r1,#0xa
0014fa  487d              LDR      r0,|L1.5872|
0014fc  f7fffffe          BL       uart_putchar
001500  210a              MOVS     r1,#0xa
001502  487b              LDR      r0,|L1.5872|
001504  f7fffffe          BL       uart_putchar
001508  210a              MOVS     r1,#0xa
00150a  4879              LDR      r0,|L1.5872|
00150c  f7fffffe          BL       uart_putchar
001510  210a              MOVS     r1,#0xa
001512  4877              LDR      r0,|L1.5872|
001514  f7fffffe          BL       uart_putchar
001518  210a              MOVS     r1,#0xa
00151a  4875              LDR      r0,|L1.5872|
00151c  f7fffffe          BL       uart_putchar
;;;343    									//memset(data,0,1000);
;;;344    														//timer counts to wait for characters in uart 1 									
;;;345    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001520  bf00              NOP      
                  |L1.5410|
001522  496e              LDR      r1,|L1.5852|
001524  3138              ADDS     r1,r1,#0x38
001526  4868              LDR      r0,|L1.5832|
001528  f7fffffe          BL       strstr
00152c  2800              CMP      r0,#0
00152e  d10a              BNE      |L1.5446|
001530  4964              LDR      r1,|L1.5828|
001532  3108              ADDS     r1,r1,#8
001534  4864              LDR      r0,|L1.5832|
001536  f7fffffe          BL       strstr
00153a  2800              CMP      r0,#0
00153c  d103              BNE      |L1.5446|
00153e  486a              LDR      r0,|L1.5864|
001540  6800              LDR      r0,[r0,#0]  ; tout
001542  2805              CMP      r0,#5
001544  dded              BLE      |L1.5410|
                  |L1.5446|
;;;346    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;347    									}
;;;348    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001546  f7fffffe          BL       clear
;;;349    									//clear();
;;;350    									memset(data,0,strlen(data));
00154a  4862              LDR      r0,|L1.5844|
00154c  f7fffffe          BL       strlen
001550  4604              MOV      r4,r0
001552  4621              MOV      r1,r4
001554  485f              LDR      r0,|L1.5844|
001556  f7fffffe          BL       __aeabi_memclr
;;;351    									clear();
00155a  f7fffffe          BL       clear
00155e  e159              B        |L1.6164|
                  |L1.5472|
;;;352    
;;;353    								
;;;354    								//								log_it();								
;;;355    																}else{send_chunk();}													
001560  f7fffffe          BL       send_chunk
001564  e156              B        |L1.6164|
                  |L1.5478|
;;;356    								//checks for the sd_data available
;;;357    								}
;;;358    								//con1d=strstr(uart_string_gsm,"OK");
;;;359    								else
;;;360    								{
;;;361    									
;;;362    									
;;;363    	delay(100);
001566  2064              MOVS     r0,#0x64
001568  f7fffffe          BL       delay
;;;364    		clear();//memset(uart_string_gsm,0,5000);
00156c  f7fffffe          BL       clear
;;;365    	
;;;366    	memset(at_,0,100);
001570  2164              MOVS     r1,#0x64
001572  4857              LDR      r0,|L1.5840|
001574  f7fffffe          BL       __aeabi_memclr
;;;367    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001578  4856              LDR      r0,|L1.5844|
00157a  f7fffffe          BL       strlen
00157e  1c44              ADDS     r4,r0,#1
001580  4623              MOV      r3,r4
001582  4a55              LDR      r2,|L1.5848|
001584  4955              LDR      r1,|L1.5852|
001586  4852              LDR      r0,|L1.5840|
001588  f7fffffe          BL       __2sprintf
;;;368    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00158c  2005              MOVS     r0,#5
00158e  4b4d              LDR      r3,|L1.5828|
001590  3308              ADDS     r3,r3,#8
001592  461a              MOV      r2,r3
001594  3a70              SUBS     r2,r2,#0x70
001596  a152              ADR      r1,|L1.5856|
001598  9000              STR      r0,[sp,#0]
00159a  484d              LDR      r0,|L1.5840|
00159c  f7fffffe          BL       send_SD
;;;369    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;370    //	if(strstr(uart_string_gsm,"ERROR")){
;;;371    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;372    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;373    //	}
;;;374    	
;;;375    clear();	
0015a0  f7fffffe          BL       clear
;;;376    									k2=0;									//string array counter for uart 1
0015a4  2000              MOVS     r0,#0
0015a6  494f              LDR      r1,|L1.5860|
0015a8  6008              STR      r0,[r1,#0]  ; k2
;;;377    									tout=0;	
0015aa  494f              LDR      r1,|L1.5864|
0015ac  6008              STR      r0,[r1,#0]  ; tout
;;;378    		for(k=0;k<strlen(data);k++)
0015ae  494f              LDR      r1,|L1.5868|
0015b0  6008              STR      r0,[r1,#0]  ; k
0015b2  e00b              B        |L1.5580|
                  |L1.5556|
;;;379    		{
;;;380    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0015b4  4847              LDR      r0,|L1.5844|
0015b6  4a4d              LDR      r2,|L1.5868|
0015b8  6812              LDR      r2,[r2,#0]  ; k
0015ba  5c81              LDRB     r1,[r0,r2]
0015bc  484c              LDR      r0,|L1.5872|
0015be  f7fffffe          BL       uart_putchar
0015c2  484a              LDR      r0,|L1.5868|
0015c4  6800              LDR      r0,[r0,#0]            ;378  ; k
0015c6  1c40              ADDS     r0,r0,#1              ;378
0015c8  4948              LDR      r1,|L1.5868|
0015ca  6008              STR      r0,[r1,#0]            ;378  ; k
                  |L1.5580|
0015cc  4841              LDR      r0,|L1.5844|
0015ce  f7fffffe          BL       strlen
0015d2  4946              LDR      r1,|L1.5868|
0015d4  6809              LDR      r1,[r1,#0]            ;378  ; k
0015d6  4288              CMP      r0,r1                 ;378
0015d8  d8ec              BHI      |L1.5556|
;;;381    		}	
;;;382    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0015da  210a              MOVS     r1,#0xa
0015dc  4844              LDR      r0,|L1.5872|
0015de  f7fffffe          BL       uart_putchar
0015e2  210a              MOVS     r1,#0xa
0015e4  4842              LDR      r0,|L1.5872|
0015e6  f7fffffe          BL       uart_putchar
0015ea  210a              MOVS     r1,#0xa
0015ec  4840              LDR      r0,|L1.5872|
0015ee  f7fffffe          BL       uart_putchar
0015f2  210a              MOVS     r1,#0xa
0015f4  483e              LDR      r0,|L1.5872|
0015f6  f7fffffe          BL       uart_putchar
0015fa  210a              MOVS     r1,#0xa
0015fc  483c              LDR      r0,|L1.5872|
0015fe  f7fffffe          BL       uart_putchar
001602  210a              MOVS     r1,#0xa
001604  483a              LDR      r0,|L1.5872|
001606  f7fffffe          BL       uart_putchar
00160a  210a              MOVS     r1,#0xa
00160c  4838              LDR      r0,|L1.5872|
00160e  f7fffffe          BL       uart_putchar
001612  210a              MOVS     r1,#0xa
001614  4836              LDR      r0,|L1.5872|
001616  f7fffffe          BL       uart_putchar
00161a  210a              MOVS     r1,#0xa
00161c  4834              LDR      r0,|L1.5872|
00161e  f7fffffe          BL       uart_putchar
001622  210a              MOVS     r1,#0xa
001624  4832              LDR      r0,|L1.5872|
001626  f7fffffe          BL       uart_putchar
00162a  210a              MOVS     r1,#0xa
00162c  4830              LDR      r0,|L1.5872|
00162e  f7fffffe          BL       uart_putchar
001632  210a              MOVS     r1,#0xa
001634  482e              LDR      r0,|L1.5872|
001636  f7fffffe          BL       uart_putchar
00163a  210a              MOVS     r1,#0xa
00163c  482c              LDR      r0,|L1.5872|
00163e  f7fffffe          BL       uart_putchar
001642  210a              MOVS     r1,#0xa
001644  482a              LDR      r0,|L1.5872|
001646  f7fffffe          BL       uart_putchar
00164a  210a              MOVS     r1,#0xa
00164c  4828              LDR      r0,|L1.5872|
00164e  f7fffffe          BL       uart_putchar
001652  210a              MOVS     r1,#0xa
001654  4826              LDR      r0,|L1.5872|
001656  f7fffffe          BL       uart_putchar
00165a  210a              MOVS     r1,#0xa
00165c  4824              LDR      r0,|L1.5872|
00165e  f7fffffe          BL       uart_putchar
001662  210a              MOVS     r1,#0xa
001664  4822              LDR      r0,|L1.5872|
001666  f7fffffe          BL       uart_putchar
00166a  210a              MOVS     r1,#0xa
00166c  4820              LDR      r0,|L1.5872|
00166e  f7fffffe          BL       uart_putchar
001672  210a              MOVS     r1,#0xa
001674  481e              LDR      r0,|L1.5872|
001676  f7fffffe          BL       uart_putchar
00167a  210a              MOVS     r1,#0xa
00167c  481c              LDR      r0,|L1.5872|
00167e  f7fffffe          BL       uart_putchar
001682  210a              MOVS     r1,#0xa
001684  481a              LDR      r0,|L1.5872|
001686  f7fffffe          BL       uart_putchar
00168a  210a              MOVS     r1,#0xa
00168c  4818              LDR      r0,|L1.5872|
00168e  f7fffffe          BL       uart_putchar
001692  210a              MOVS     r1,#0xa
001694  4816              LDR      r0,|L1.5872|
001696  f7fffffe          BL       uart_putchar
00169a  210a              MOVS     r1,#0xa
00169c  4814              LDR      r0,|L1.5872|
00169e  f7fffffe          BL       uart_putchar
0016a2  210a              MOVS     r1,#0xa
0016a4  4812              LDR      r0,|L1.5872|
0016a6  f7fffffe          BL       uart_putchar
0016aa  210a              MOVS     r1,#0xa
0016ac  4810              LDR      r0,|L1.5872|
0016ae  f7fffffe          BL       uart_putchar
0016b2  210a              MOVS     r1,#0xa
0016b4  480e              LDR      r0,|L1.5872|
0016b6  f7fffffe          BL       uart_putchar
0016ba  210a              MOVS     r1,#0xa
0016bc  480c              LDR      r0,|L1.5872|
0016be  f7fffffe          BL       uart_putchar
0016c2  e017              B        |L1.5876|
                  |L1.5828|
                          DCD      ||.text||+0x908
                  |L1.5832|
                          DCD      uart_string_gsm
                  |L1.5836|
                          DCD      con1d
                  |L1.5840|
                          DCD      at_
                  |L1.5844|
                          DCD      data
                  |L1.5848|
                          DCD      drive
                  |L1.5852|
                          DCD      ||.text||+0xd50
                  |L1.5856|
0016e0  3e00              DCB      ">",0
0016e2  00                DCB      0
0016e3  00                DCB      0
                  |L1.5860|
                          DCD      ||k2||
                  |L1.5864|
                          DCD      tout
                  |L1.5868|
                          DCD      k
                  |L1.5872|
                          DCD      0x4006b000
                  |L1.5876|
0016f4  210a              MOVS     r1,#0xa
0016f6  48fe              LDR      r0,|L1.6896|
0016f8  f7fffffe          BL       uart_putchar
0016fc  210a              MOVS     r1,#0xa
0016fe  48fc              LDR      r0,|L1.6896|
001700  f7fffffe          BL       uart_putchar
001704  210a              MOVS     r1,#0xa
001706  48fa              LDR      r0,|L1.6896|
001708  f7fffffe          BL       uart_putchar
00170c  210a              MOVS     r1,#0xa
00170e  48f8              LDR      r0,|L1.6896|
001710  f7fffffe          BL       uart_putchar
001714  210a              MOVS     r1,#0xa
001716  48f6              LDR      r0,|L1.6896|
001718  f7fffffe          BL       uart_putchar
00171c  210a              MOVS     r1,#0xa
00171e  48f4              LDR      r0,|L1.6896|
001720  f7fffffe          BL       uart_putchar
001724  210a              MOVS     r1,#0xa
001726  48f2              LDR      r0,|L1.6896|
001728  f7fffffe          BL       uart_putchar
00172c  210a              MOVS     r1,#0xa
00172e  48f0              LDR      r0,|L1.6896|
001730  f7fffffe          BL       uart_putchar
001734  210a              MOVS     r1,#0xa
001736  48ee              LDR      r0,|L1.6896|
001738  f7fffffe          BL       uart_putchar
00173c  210a              MOVS     r1,#0xa
00173e  48ec              LDR      r0,|L1.6896|
001740  f7fffffe          BL       uart_putchar
001744  210a              MOVS     r1,#0xa
001746  48ea              LDR      r0,|L1.6896|
001748  f7fffffe          BL       uart_putchar
00174c  210a              MOVS     r1,#0xa
00174e  48e8              LDR      r0,|L1.6896|
001750  f7fffffe          BL       uart_putchar
001754  210a              MOVS     r1,#0xa
001756  48e6              LDR      r0,|L1.6896|
001758  f7fffffe          BL       uart_putchar
00175c  210a              MOVS     r1,#0xa
00175e  48e4              LDR      r0,|L1.6896|
001760  f7fffffe          BL       uart_putchar
001764  210a              MOVS     r1,#0xa
001766  48e2              LDR      r0,|L1.6896|
001768  f7fffffe          BL       uart_putchar
00176c  210a              MOVS     r1,#0xa
00176e  48e0              LDR      r0,|L1.6896|
001770  f7fffffe          BL       uart_putchar
001774  210a              MOVS     r1,#0xa
001776  48de              LDR      r0,|L1.6896|
001778  f7fffffe          BL       uart_putchar
00177c  210a              MOVS     r1,#0xa
00177e  48dc              LDR      r0,|L1.6896|
001780  f7fffffe          BL       uart_putchar
001784  210a              MOVS     r1,#0xa
001786  48da              LDR      r0,|L1.6896|
001788  f7fffffe          BL       uart_putchar
00178c  210a              MOVS     r1,#0xa
00178e  48d8              LDR      r0,|L1.6896|
001790  f7fffffe          BL       uart_putchar
001794  210a              MOVS     r1,#0xa
001796  48d6              LDR      r0,|L1.6896|
001798  f7fffffe          BL       uart_putchar
00179c  210a              MOVS     r1,#0xa
00179e  48d4              LDR      r0,|L1.6896|
0017a0  f7fffffe          BL       uart_putchar
0017a4  210a              MOVS     r1,#0xa
0017a6  48d2              LDR      r0,|L1.6896|
0017a8  f7fffffe          BL       uart_putchar
0017ac  210a              MOVS     r1,#0xa
0017ae  48d0              LDR      r0,|L1.6896|
0017b0  f7fffffe          BL       uart_putchar
0017b4  210a              MOVS     r1,#0xa
0017b6  48ce              LDR      r0,|L1.6896|
0017b8  f7fffffe          BL       uart_putchar
0017bc  210a              MOVS     r1,#0xa
0017be  48cc              LDR      r0,|L1.6896|
0017c0  f7fffffe          BL       uart_putchar
0017c4  210a              MOVS     r1,#0xa
0017c6  48ca              LDR      r0,|L1.6896|
0017c8  f7fffffe          BL       uart_putchar
0017cc  210a              MOVS     r1,#0xa
0017ce  48c8              LDR      r0,|L1.6896|
0017d0  f7fffffe          BL       uart_putchar
;;;383    									//memset(data,0,1000);
;;;384    														//timer counts to wait for characters in uart 1 									
;;;385    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0017d4  bf00              NOP      
                  |L1.6102|
0017d6  49c7              LDR      r1,|L1.6900|
0017d8  48c7              LDR      r0,|L1.6904|
0017da  f7fffffe          BL       strstr
0017de  2800              CMP      r0,#0
0017e0  d109              BNE      |L1.6134|
0017e2  49c6              LDR      r1,|L1.6908|
0017e4  48c4              LDR      r0,|L1.6904|
0017e6  f7fffffe          BL       strstr
0017ea  2800              CMP      r0,#0
0017ec  d103              BNE      |L1.6134|
0017ee  48c4              LDR      r0,|L1.6912|
0017f0  6800              LDR      r0,[r0,#0]  ; tout
0017f2  2805              CMP      r0,#5
0017f4  ddef              BLE      |L1.6102|
                  |L1.6134|
;;;386    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;387    									}
;;;388    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0017f6  f7fffffe          BL       clear
;;;389    									//clear();
;;;390    									memset(data,0,strlen(data));
0017fa  48c2              LDR      r0,|L1.6916|
0017fc  f7fffffe          BL       strlen
001800  4604              MOV      r4,r0
001802  4621              MOV      r1,r4
001804  48bf              LDR      r0,|L1.6916|
001806  f7fffffe          BL       __aeabi_memclr
;;;391    									clear();
00180a  f7fffffe          BL       clear
00180e  e001              B        |L1.6164|
                  |L1.6160|
;;;392    
;;;393    								
;;;394    									
;;;395    									
;;;396    									//log_it();			//otherwize log it					
;;;397    								}
;;;398    
;;;399    																
;;;400    //delay(50);
;;;401    
;;;402    //else{
;;;403    //log_it();}
;;;404    								
;;;405    								
;;;406    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;407    	else
;;;408    	{
;;;409    		send_chunk();
001810  f7fffffe          BL       send_chunk
                  |L1.6164|
;;;410    	}		
;;;411    								
;;;412    								
;;;413    								
;;;414    	memset(data,0,strlen(data));	
001814  48bb              LDR      r0,|L1.6916|
001816  f7fffffe          BL       strlen
00181a  4604              MOV      r4,r0
00181c  4621              MOV      r1,r4
00181e  48b9              LDR      r0,|L1.6916|
001820  f7fffffe          BL       __aeabi_memclr
;;;415    	uart_putchar(UART1_BASE_PTR, 0x1A);
001824  211a              MOVS     r1,#0x1a
001826  48b2              LDR      r0,|L1.6896|
001828  f7fffffe          BL       uart_putchar
;;;416    	
;;;417    }
00182c  bd38              POP      {r3-r5,pc}
;;;418    	
                          ENDP

                  send_tcp_bal PROC
;;;430    
;;;431    void send_tcp_bal()
00182e  b538              PUSH     {r3-r5,lr}
;;;432    {	
;;;433    memset(stcond1,0,strlen(stcond1));	
001830  48b5              LDR      r0,|L1.6920|
001832  6800              LDR      r0,[r0,#0]  ; stcond1
001834  f7fffffe          BL       strlen
001838  4604              MOV      r4,r0
00183a  4621              MOV      r1,r4
00183c  48b2              LDR      r0,|L1.6920|
00183e  6800              LDR      r0,[r0,#0]  ; stcond1
001840  f7fffffe          BL       __aeabi_memclr
;;;434    memset(con1d,0,strlen(con1d));	
001844  48b1              LDR      r0,|L1.6924|
001846  6800              LDR      r0,[r0,#0]  ; con1d
001848  f7fffffe          BL       strlen
00184c  4604              MOV      r4,r0
00184e  4621              MOV      r1,r4
001850  48ae              LDR      r0,|L1.6924|
001852  6800              LDR      r0,[r0,#0]  ; con1d
001854  f7fffffe          BL       __aeabi_memclr
;;;435    	
;;;436    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;437    
;;;438    								cond=mystrstr(uart_string_gsm,'>');
001858  213e              MOVS     r1,#0x3e
00185a  48a7              LDR      r0,|L1.6904|
00185c  f7fffffe          BL       mystrstr
001860  49ab              LDR      r1,|L1.6928|
001862  7008              STRB     r0,[r1,#0]
;;;439    								if(cond)	
001864  4608              MOV      r0,r1
001866  7800              LDRB     r0,[r0,#0]  ; cond
001868  2800              CMP      r0,#0
00186a  d07c              BEQ      |L1.6502|
;;;440    								{
;;;441    									
;;;442    									clear();
00186c  f7fffffe          BL       clear
;;;443    									memset(uart_string_gsm,0,5000);
001870  49a8              LDR      r1,|L1.6932|
001872  48a1              LDR      r0,|L1.6904|
001874  f7fffffe          BL       __aeabi_memclr
;;;444    									strcat(data,"\n\n");
001878  a1a7              ADR      r1,|L1.6936|
00187a  48a2              LDR      r0,|L1.6916|
00187c  f7fffffe          BL       strcat
;;;445    									len=strlen(data);
001880  48a0              LDR      r0,|L1.6916|
001882  f7fffffe          BL       strlen
001886  49a5              LDR      r1,|L1.6940|
001888  6008              STR      r0,[r1,#0]  ; len
;;;446    									tout=0;
00188a  2000              MOVS     r0,#0
00188c  499c              LDR      r1,|L1.6912|
00188e  6008              STR      r0,[r1,#0]  ; tout
;;;447    									k2=0;
001890  49a3              LDR      r1,|L1.6944|
001892  6008              STR      r0,[r1,#0]  ; k2
;;;448    									for(k=0;k<len;k++)
001894  49a3              LDR      r1,|L1.6948|
001896  6008              STR      r0,[r1,#0]  ; k
001898  e00b              B        |L1.6322|
                  |L1.6298|
;;;449    									{
;;;450    										uart_putchar(UART1_BASE_PTR, data[k]);
00189a  489a              LDR      r0,|L1.6916|
00189c  4aa1              LDR      r2,|L1.6948|
00189e  6812              LDR      r2,[r2,#0]  ; k
0018a0  5c81              LDRB     r1,[r0,r2]
0018a2  4893              LDR      r0,|L1.6896|
0018a4  f7fffffe          BL       uart_putchar
0018a8  489e              LDR      r0,|L1.6948|
0018aa  6800              LDR      r0,[r0,#0]            ;448  ; k
0018ac  1c40              ADDS     r0,r0,#1              ;448
0018ae  499d              LDR      r1,|L1.6948|
0018b0  6008              STR      r0,[r1,#0]            ;448  ; k
                  |L1.6322|
0018b2  489c              LDR      r0,|L1.6948|
0018b4  6800              LDR      r0,[r0,#0]            ;448  ; k
0018b6  4999              LDR      r1,|L1.6940|
0018b8  6809              LDR      r1,[r1,#0]            ;448  ; len
0018ba  4288              CMP      r0,r1                 ;448
0018bc  dbed              BLT      |L1.6298|
;;;451    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0018be  211a              MOVS     r1,#0x1a
0018c0  488b              LDR      r0,|L1.6896|
0018c2  f7fffffe          BL       uart_putchar
0018c6  211a              MOVS     r1,#0x1a
0018c8  4889              LDR      r0,|L1.6896|
0018ca  f7fffffe          BL       uart_putchar
;;;452    									do
0018ce  bf00              NOP      
                  |L1.6352|
;;;453    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0018d0  498a              LDR      r1,|L1.6908|
0018d2  3908              SUBS     r1,r1,#8
0018d4  4888              LDR      r0,|L1.6904|
0018d6  f7fffffe          BL       strstr
0018da  498b              LDR      r1,|L1.6920|
0018dc  6008              STR      r0,[r1,#0]  ; stcond1
;;;454    																	stcond2=strstr(uart_string_gsm, "ERROR");
0018de  4987              LDR      r1,|L1.6908|
0018e0  4885              LDR      r0,|L1.6904|
0018e2  f7fffffe          BL       strstr
0018e6  4990              LDR      r1,|L1.6952|
0018e8  6008              STR      r0,[r1,#0]  ; stcond2
;;;455    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0018ea  4990              LDR      r1,|L1.6956|
0018ec  4882              LDR      r0,|L1.6904|
0018ee  f7fffffe          BL       strstr
0018f2  498f              LDR      r1,|L1.6960|
0018f4  6008              STR      r0,[r1,#0]  ; stcond3
;;;456    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0018f6  4981              LDR      r1,|L1.6908|
0018f8  3118              ADDS     r1,r1,#0x18
0018fa  487f              LDR      r0,|L1.6904|
0018fc  f7fffffe          BL       strstr
001900  498c              LDR      r1,|L1.6964|
001902  6008              STR      r0,[r1,#0]  ; stcond4
;;;457    																	
;;;458    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
001904  4888              LDR      r0,|L1.6952|
001906  6800              LDR      r0,[r0,#0]  ; stcond2
001908  2800              CMP      r0,#0
00190a  d10f              BNE      |L1.6444|
00190c  4888              LDR      r0,|L1.6960|
00190e  6800              LDR      r0,[r0,#0]  ; stcond3
001910  2800              CMP      r0,#0
001912  d10b              BNE      |L1.6444|
001914  4608              MOV      r0,r1
001916  6800              LDR      r0,[r0,#0]  ; stcond4
001918  2800              CMP      r0,#0
00191a  d107              BNE      |L1.6444|
00191c  487a              LDR      r0,|L1.6920|
00191e  6800              LDR      r0,[r0,#0]  ; stcond1
001920  2800              CMP      r0,#0
001922  d103              BNE      |L1.6444|
001924  4876              LDR      r0,|L1.6912|
001926  6800              LDR      r0,[r0,#0]  ; tout
001928  2805              CMP      r0,#5
00192a  ddd1              BLE      |L1.6352|
                  |L1.6444|
;;;459    																//delay(10);clear();
;;;460    														uart_putchar(UART1_BASE_PTR,0x1A);
00192c  211a              MOVS     r1,#0x1a
00192e  4870              LDR      r0,|L1.6896|
001930  f7fffffe          BL       uart_putchar
;;;461    												//delay(10);
;;;462    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001934  211a              MOVS     r1,#0x1a
001936  486e              LDR      r0,|L1.6896|
001938  f7fffffe          BL       uart_putchar
00193c  211a              MOVS     r1,#0x1a
00193e  486c              LDR      r0,|L1.6896|
001940  f7fffffe          BL       uart_putchar
001944  211a              MOVS     r1,#0x1a
001946  486a              LDR      r0,|L1.6896|
001948  f7fffffe          BL       uart_putchar
;;;463    						
;;;464    									
;;;465    									
;;;466    									
;;;467    									if(flagch==1){		int_erval=temp;flagch=0;	}
00194c  487a              LDR      r0,|L1.6968|
00194e  6800              LDR      r0,[r0,#0]  ; flagch
001950  2801              CMP      r0,#1
001952  d106              BNE      |L1.6498|
001954  4879              LDR      r0,|L1.6972|
001956  6800              LDR      r0,[r0,#0]  ; temp
001958  4979              LDR      r1,|L1.6976|
00195a  6008              STR      r0,[r1,#0]  ; int_erval
00195c  2000              MOVS     r0,#0
00195e  4976              LDR      r1,|L1.6968|
001960  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.6498|
;;;468    									
;;;469    									
;;;470    									
;;;471    
;;;472    //									for(k=0;k<len;k++)
;;;473    //									{
;;;474    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;475    //									}
;;;476    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;477    
;;;478    //									
;;;479    //													k2=0;									//string array counter for uart 1
;;;480    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;481    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;482    //																{
;;;483    //																	timeout--;
;;;484    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;485    //
;;;486    									delay(20);															
001962  2014              MOVS     r0,#0x14
001964  e000              B        |L1.6504|
                  |L1.6502|
001966  e008              B        |L1.6522|
                  |L1.6504|
001968  f7fffffe          BL       delay
;;;487    stcond1=strstr(uart_string_gsm,"SEND OK"); 
00196c  4963              LDR      r1,|L1.6908|
00196e  3908              SUBS     r1,r1,#8
001970  4861              LDR      r0,|L1.6904|
001972  f7fffffe          BL       strstr
001976  4964              LDR      r1,|L1.6920|
001978  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.6522|
;;;488    
;;;489    								}
;;;490    
;;;491      //checks for send ok
;;;492    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
00197a  4863              LDR      r0,|L1.6920|
00197c  6800              LDR      r0,[r0,#0]  ; stcond1
00197e  2800              CMP      r0,#0
001980  d001              BEQ      |L1.6534|
001982  f000ff13          BL       |L1.10156|
                  |L1.6534|
;;;493    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
001986  211a              MOVS     r1,#0x1a
001988  4859              LDR      r0,|L1.6896|
00198a  f7fffffe          BL       uart_putchar
00198e  f7fffffe          BL       clear
001992  200a              MOVS     r0,#0xa
001994  f7fffffe          BL       delay
;;;494    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
001998  211a              MOVS     r1,#0x1a
00199a  4855              LDR      r0,|L1.6896|
00199c  f7fffffe          BL       uart_putchar
0019a0  f7fffffe          BL       clear
0019a4  200a              MOVS     r0,#0xa
0019a6  f7fffffe          BL       delay
;;;495    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0019aa  211a              MOVS     r1,#0x1a
0019ac  4850              LDR      r0,|L1.6896|
0019ae  f7fffffe          BL       uart_putchar
0019b2  f7fffffe          BL       clear
0019b6  200a              MOVS     r0,#0xa
0019b8  f7fffffe          BL       delay
;;;496    							//remove_all_chars(data, '\n', '\n');
;;;497    	
;;;498    		//strcat(data,"CH\n");	
;;;499    		
;;;500    	
;;;501    	
;;;502    	delay(100);
0019bc  2064              MOVS     r0,#0x64
0019be  f7fffffe          BL       delay
;;;503    		clear();//memset(uart_string_gsm,0,5000);
0019c2  f7fffffe          BL       clear
;;;504    	
;;;505    	memset(at_,0,100);
0019c6  2164              MOVS     r1,#0x64
0019c8  485e              LDR      r0,|L1.6980|
0019ca  f7fffffe          BL       __aeabi_memclr
;;;506    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0019ce  484d              LDR      r0,|L1.6916|
0019d0  f7fffffe          BL       strlen
0019d4  1c44              ADDS     r4,r0,#1
0019d6  4623              MOV      r3,r4
0019d8  4a5b              LDR      r2,|L1.6984|
0019da  4946              LDR      r1,|L1.6900|
0019dc  3938              SUBS     r1,r1,#0x38
0019de  4859              LDR      r0,|L1.6980|
0019e0  f7fffffe          BL       __2sprintf
;;;507    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0019e4  2005              MOVS     r0,#5
0019e6  4b45              LDR      r3,|L1.6908|
0019e8  461a              MOV      r2,r3
0019ea  3a70              SUBS     r2,r2,#0x70
0019ec  a157              ADR      r1,|L1.6988|
0019ee  9000              STR      r0,[sp,#0]
0019f0  4854              LDR      r0,|L1.6980|
0019f2  f7fffffe          BL       send_SD
;;;508    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;509    //	if(strstr(uart_string_gsm,"ERROR")){
;;;510    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;511    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;512    //	}
;;;513    	
;;;514    clear();	
0019f6  f7fffffe          BL       clear
;;;515    									k2=0;									//string array counter for uart 1
0019fa  2000              MOVS     r0,#0
0019fc  4948              LDR      r1,|L1.6944|
0019fe  6008              STR      r0,[r1,#0]  ; k2
;;;516    									tout=0;	
001a00  493f              LDR      r1,|L1.6912|
001a02  6008              STR      r0,[r1,#0]  ; tout
;;;517    		for(k=0;k<strlen(data);k++)
001a04  4947              LDR      r1,|L1.6948|
001a06  6008              STR      r0,[r1,#0]  ; k
001a08  e00b              B        |L1.6690|
                  |L1.6666|
;;;518    		{
;;;519    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001a0a  483e              LDR      r0,|L1.6916|
001a0c  4a45              LDR      r2,|L1.6948|
001a0e  6812              LDR      r2,[r2,#0]  ; k
001a10  5c81              LDRB     r1,[r0,r2]
001a12  4837              LDR      r0,|L1.6896|
001a14  f7fffffe          BL       uart_putchar
001a18  4842              LDR      r0,|L1.6948|
001a1a  6800              LDR      r0,[r0,#0]            ;517  ; k
001a1c  1c40              ADDS     r0,r0,#1              ;517
001a1e  4941              LDR      r1,|L1.6948|
001a20  6008              STR      r0,[r1,#0]            ;517  ; k
                  |L1.6690|
001a22  4838              LDR      r0,|L1.6916|
001a24  f7fffffe          BL       strlen
001a28  493e              LDR      r1,|L1.6948|
001a2a  6809              LDR      r1,[r1,#0]            ;517  ; k
001a2c  4288              CMP      r0,r1                 ;517
001a2e  d8ec              BHI      |L1.6666|
;;;520    		}	
;;;521    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001a30  210a              MOVS     r1,#0xa
001a32  482f              LDR      r0,|L1.6896|
001a34  f7fffffe          BL       uart_putchar
001a38  210a              MOVS     r1,#0xa
001a3a  482d              LDR      r0,|L1.6896|
001a3c  f7fffffe          BL       uart_putchar
001a40  210a              MOVS     r1,#0xa
001a42  482b              LDR      r0,|L1.6896|
001a44  f7fffffe          BL       uart_putchar
001a48  210a              MOVS     r1,#0xa
001a4a  4829              LDR      r0,|L1.6896|
001a4c  f7fffffe          BL       uart_putchar
001a50  210a              MOVS     r1,#0xa
001a52  4827              LDR      r0,|L1.6896|
001a54  f7fffffe          BL       uart_putchar
001a58  210a              MOVS     r1,#0xa
001a5a  4825              LDR      r0,|L1.6896|
001a5c  f7fffffe          BL       uart_putchar
001a60  210a              MOVS     r1,#0xa
001a62  4823              LDR      r0,|L1.6896|
001a64  f7fffffe          BL       uart_putchar
001a68  210a              MOVS     r1,#0xa
001a6a  4821              LDR      r0,|L1.6896|
001a6c  f7fffffe          BL       uart_putchar
001a70  210a              MOVS     r1,#0xa
001a72  481f              LDR      r0,|L1.6896|
001a74  f7fffffe          BL       uart_putchar
001a78  210a              MOVS     r1,#0xa
001a7a  481d              LDR      r0,|L1.6896|
001a7c  f7fffffe          BL       uart_putchar
001a80  210a              MOVS     r1,#0xa
001a82  481b              LDR      r0,|L1.6896|
001a84  f7fffffe          BL       uart_putchar
001a88  210a              MOVS     r1,#0xa
001a8a  4819              LDR      r0,|L1.6896|
001a8c  f7fffffe          BL       uart_putchar
001a90  210a              MOVS     r1,#0xa
001a92  4817              LDR      r0,|L1.6896|
001a94  f7fffffe          BL       uart_putchar
001a98  210a              MOVS     r1,#0xa
001a9a  4815              LDR      r0,|L1.6896|
001a9c  f7fffffe          BL       uart_putchar
001aa0  210a              MOVS     r1,#0xa
001aa2  4813              LDR      r0,|L1.6896|
001aa4  f7fffffe          BL       uart_putchar
001aa8  210a              MOVS     r1,#0xa
001aaa  4811              LDR      r0,|L1.6896|
001aac  f7fffffe          BL       uart_putchar
001ab0  210a              MOVS     r1,#0xa
001ab2  480f              LDR      r0,|L1.6896|
001ab4  f7fffffe          BL       uart_putchar
001ab8  210a              MOVS     r1,#0xa
001aba  480d              LDR      r0,|L1.6896|
001abc  f7fffffe          BL       uart_putchar
001ac0  210a              MOVS     r1,#0xa
001ac2  480b              LDR      r0,|L1.6896|
001ac4  f7fffffe          BL       uart_putchar
001ac8  210a              MOVS     r1,#0xa
001aca  4809              LDR      r0,|L1.6896|
001acc  f7fffffe          BL       uart_putchar
001ad0  210a              MOVS     r1,#0xa
001ad2  4807              LDR      r0,|L1.6896|
001ad4  f7fffffe          BL       uart_putchar
001ad8  210a              MOVS     r1,#0xa
001ada  4805              LDR      r0,|L1.6896|
001adc  f7fffffe          BL       uart_putchar
001ae0  210a              MOVS     r1,#0xa
001ae2  4803              LDR      r0,|L1.6896|
001ae4  f7fffffe          BL       uart_putchar
001ae8  210a              MOVS     r1,#0xa
001aea  4801              LDR      r0,|L1.6896|
001aec  e030              B        |L1.6992|
001aee  0000              DCW      0x0000
                  |L1.6896|
                          DCD      0x4006b000
                  |L1.6900|
                          DCD      ||.text||+0xd88
                  |L1.6904|
                          DCD      uart_string_gsm
                  |L1.6908|
                          DCD      ||.text||+0x910
                  |L1.6912|
                          DCD      tout
                  |L1.6916|
                          DCD      data
                  |L1.6920|
                          DCD      stcond1
                  |L1.6924|
                          DCD      con1d
                  |L1.6928|
                          DCD      cond
                  |L1.6932|
                          DCD      0x00001388
                  |L1.6936|
001b18  0a0a00            DCB      "\n\n",0
001b1b  00                DCB      0
                  |L1.6940|
                          DCD      len
                  |L1.6944|
                          DCD      ||k2||
                  |L1.6948|
                          DCD      k
                  |L1.6952|
                          DCD      stcond2
                  |L1.6956|
                          DCD      ||.text||+0x128c
                  |L1.6960|
                          DCD      stcond3
                  |L1.6964|
                          DCD      stcond4
                  |L1.6968|
                          DCD      flagch
                  |L1.6972|
                          DCD      temp
                  |L1.6976|
                          DCD      int_erval
                  |L1.6980|
                          DCD      at_
                  |L1.6984|
                          DCD      drive
                  |L1.6988|
001b4c  3e00              DCB      ">",0
001b4e  00                DCB      0
001b4f  00                DCB      0
                  |L1.6992|
001b50  f7fffffe          BL       uart_putchar
001b54  210a              MOVS     r1,#0xa
001b56  48fe              LDR      r0,|L1.8016|
001b58  f7fffffe          BL       uart_putchar
001b5c  210a              MOVS     r1,#0xa
001b5e  48fc              LDR      r0,|L1.8016|
001b60  f7fffffe          BL       uart_putchar
001b64  210a              MOVS     r1,#0xa
001b66  48fa              LDR      r0,|L1.8016|
001b68  f7fffffe          BL       uart_putchar
001b6c  210a              MOVS     r1,#0xa
001b6e  48f8              LDR      r0,|L1.8016|
001b70  f7fffffe          BL       uart_putchar
001b74  210a              MOVS     r1,#0xa
001b76  48f6              LDR      r0,|L1.8016|
001b78  f7fffffe          BL       uart_putchar
001b7c  210a              MOVS     r1,#0xa
001b7e  48f4              LDR      r0,|L1.8016|
001b80  f7fffffe          BL       uart_putchar
001b84  210a              MOVS     r1,#0xa
001b86  48f2              LDR      r0,|L1.8016|
001b88  f7fffffe          BL       uart_putchar
001b8c  210a              MOVS     r1,#0xa
001b8e  48f0              LDR      r0,|L1.8016|
001b90  f7fffffe          BL       uart_putchar
001b94  210a              MOVS     r1,#0xa
001b96  48ee              LDR      r0,|L1.8016|
001b98  f7fffffe          BL       uart_putchar
001b9c  210a              MOVS     r1,#0xa
001b9e  48ec              LDR      r0,|L1.8016|
001ba0  f7fffffe          BL       uart_putchar
001ba4  210a              MOVS     r1,#0xa
001ba6  48ea              LDR      r0,|L1.8016|
001ba8  f7fffffe          BL       uart_putchar
001bac  210a              MOVS     r1,#0xa
001bae  48e8              LDR      r0,|L1.8016|
001bb0  f7fffffe          BL       uart_putchar
001bb4  210a              MOVS     r1,#0xa
001bb6  48e6              LDR      r0,|L1.8016|
001bb8  f7fffffe          BL       uart_putchar
001bbc  210a              MOVS     r1,#0xa
001bbe  48e4              LDR      r0,|L1.8016|
001bc0  f7fffffe          BL       uart_putchar
001bc4  210a              MOVS     r1,#0xa
001bc6  48e2              LDR      r0,|L1.8016|
001bc8  f7fffffe          BL       uart_putchar
001bcc  210a              MOVS     r1,#0xa
001bce  48e0              LDR      r0,|L1.8016|
001bd0  f7fffffe          BL       uart_putchar
001bd4  210a              MOVS     r1,#0xa
001bd6  48de              LDR      r0,|L1.8016|
001bd8  f7fffffe          BL       uart_putchar
001bdc  210a              MOVS     r1,#0xa
001bde  48dc              LDR      r0,|L1.8016|
001be0  f7fffffe          BL       uart_putchar
001be4  210a              MOVS     r1,#0xa
001be6  48da              LDR      r0,|L1.8016|
001be8  f7fffffe          BL       uart_putchar
001bec  210a              MOVS     r1,#0xa
001bee  48d8              LDR      r0,|L1.8016|
001bf0  f7fffffe          BL       uart_putchar
001bf4  210a              MOVS     r1,#0xa
001bf6  48d6              LDR      r0,|L1.8016|
001bf8  f7fffffe          BL       uart_putchar
001bfc  210a              MOVS     r1,#0xa
001bfe  48d4              LDR      r0,|L1.8016|
001c00  f7fffffe          BL       uart_putchar
001c04  210a              MOVS     r1,#0xa
001c06  48d2              LDR      r0,|L1.8016|
001c08  f7fffffe          BL       uart_putchar
001c0c  210a              MOVS     r1,#0xa
001c0e  48d0              LDR      r0,|L1.8016|
001c10  f7fffffe          BL       uart_putchar
001c14  210a              MOVS     r1,#0xa
001c16  48ce              LDR      r0,|L1.8016|
001c18  f7fffffe          BL       uart_putchar
001c1c  210a              MOVS     r1,#0xa
001c1e  48cc              LDR      r0,|L1.8016|
001c20  f7fffffe          BL       uart_putchar
001c24  210a              MOVS     r1,#0xa
001c26  48ca              LDR      r0,|L1.8016|
001c28  f7fffffe          BL       uart_putchar
001c2c  210a              MOVS     r1,#0xa
001c2e  48c8              LDR      r0,|L1.8016|
001c30  f7fffffe          BL       uart_putchar
001c34  210a              MOVS     r1,#0xa
001c36  48c6              LDR      r0,|L1.8016|
001c38  f7fffffe          BL       uart_putchar
001c3c  210a              MOVS     r1,#0xa
001c3e  48c4              LDR      r0,|L1.8016|
001c40  f7fffffe          BL       uart_putchar
001c44  210a              MOVS     r1,#0xa
001c46  48c2              LDR      r0,|L1.8016|
001c48  f7fffffe          BL       uart_putchar
001c4c  210a              MOVS     r1,#0xa
001c4e  48c0              LDR      r0,|L1.8016|
001c50  f7fffffe          BL       uart_putchar
001c54  210a              MOVS     r1,#0xa
001c56  48be              LDR      r0,|L1.8016|
001c58  f7fffffe          BL       uart_putchar
;;;522    									//memset(data,0,1000);
;;;523    														//timer counts to wait for characters in uart 1 									
;;;524    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001c5c  bf00              NOP      
                  |L1.7262|
001c5e  49bd              LDR      r1,|L1.8020|
001c60  48bd              LDR      r0,|L1.8024|
001c62  f7fffffe          BL       strstr
001c66  2800              CMP      r0,#0
001c68  d109              BNE      |L1.7294|
001c6a  49bc              LDR      r1,|L1.8028|
001c6c  48ba              LDR      r0,|L1.8024|
001c6e  f7fffffe          BL       strstr
001c72  2800              CMP      r0,#0
001c74  d103              BNE      |L1.7294|
001c76  48ba              LDR      r0,|L1.8032|
001c78  6800              LDR      r0,[r0,#0]  ; tout
001c7a  2805              CMP      r0,#5
001c7c  ddef              BLE      |L1.7262|
                  |L1.7294|
;;;525    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;526    									}
;;;527    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001c7e  f7fffffe          BL       clear
;;;528    									//clear();
;;;529    									memset(data,0,strlen(data));
001c82  48b8              LDR      r0,|L1.8036|
001c84  f7fffffe          BL       strlen
001c88  4604              MOV      r4,r0
001c8a  4621              MOV      r1,r4
001c8c  48b5              LDR      r0,|L1.8036|
001c8e  f7fffffe          BL       __aeabi_memclr
;;;530    									clear();
001c92  f7fffffe          BL       clear
;;;531    
;;;532    								
;;;533    	
;;;534    	
;;;535    	//log_it();		                         //logging
;;;536    		memset(data,0,strlen(data));	
001c96  48b3              LDR      r0,|L1.8036|
001c98  f7fffffe          BL       strlen
001c9c  4604              MOV      r4,r0
001c9e  4621              MOV      r1,r4
001ca0  48b0              LDR      r0,|L1.8036|
001ca2  f7fffffe          BL       __aeabi_memclr
;;;537    
;;;538    					   	if(flagch!=1){
001ca6  48b0              LDR      r0,|L1.8040|
001ca8  6800              LDR      r0,[r0,#0]  ; flagch
001caa  2801              CMP      r0,#1
001cac  d009              BEQ      |L1.7362|
;;;539    							temp=int_erval;				
001cae  48af              LDR      r0,|L1.8044|
001cb0  6800              LDR      r0,[r0,#0]  ; int_erval
001cb2  49af              LDR      r1,|L1.8048|
001cb4  6008              STR      r0,[r1,#0]  ; temp
;;;540    							int_erval=4;
001cb6  2004              MOVS     r0,#4
001cb8  49ac              LDR      r1,|L1.8044|
001cba  6008              STR      r0,[r1,#0]  ; int_erval
;;;541    							flagch=1;}
001cbc  2001              MOVS     r0,#1
001cbe  49aa              LDR      r1,|L1.8040|
001cc0  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.7362|
;;;542    							clear();	
001cc2  f7fffffe          BL       clear
;;;543    									GPS_COLLECT();
001cc6  f7fffffe          BL       GPS_COLLECT
;;;544    									strcat(data,"CH\n");	
001cca  49a2              LDR      r1,|L1.8020|
001ccc  3944              SUBS     r1,r1,#0x44
001cce  48a5              LDR      r0,|L1.8036|
001cd0  f7fffffe          BL       strcat
;;;545    
;;;546    //*************************************tcp_initialization();//reinitialization************************//
;;;547    
;;;548    	
;;;549    msg_sim800(); 
001cd4  f7fffffe          BL       msg_sim800
;;;550    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
001cd8  2005              MOVS     r0,#5
001cda  4ba0              LDR      r3,|L1.8028|
001cdc  461a              MOV      r2,r3
001cde  3a70              SUBS     r2,r2,#0x70
001ce0  a1a4              ADR      r1,|L1.8052|
001ce2  9000              STR      r0,[sp,#0]
001ce4  489b              LDR      r0,|L1.8020|
001ce6  301c              ADDS     r0,r0,#0x1c
001ce8  f7fffffe          BL       send_GSM
;;;551    delay(100);
001cec  2064              MOVS     r0,#0x64
001cee  f7fffffe          BL       delay
;;;552    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
001cf2  2004              MOVS     r0,#4
001cf4  4b99              LDR      r3,|L1.8028|
001cf6  4a97              LDR      r2,|L1.8020|
001cf8  322c              ADDS     r2,r2,#0x2c
001cfa  a19e              ADR      r1,|L1.8052|
001cfc  9000              STR      r0,[sp,#0]
001cfe  4610              MOV      r0,r2
001d00  3014              ADDS     r0,r0,#0x14
001d02  f7fffffe          BL       send_GSM
;;;553    GPS_COLLECT2();
001d06  f7fffffe          BL       GPS_COLLECT2
;;;554    strcat(data,"CH\n");		
001d0a  4992              LDR      r1,|L1.8020|
001d0c  3944              SUBS     r1,r1,#0x44
001d0e  4895              LDR      r0,|L1.8036|
001d10  f7fffffe          BL       strcat
;;;555    GPS_COLLECT2();
001d14  f7fffffe          BL       GPS_COLLECT2
;;;556    strcat(data,"CH\n");	
001d18  498e              LDR      r1,|L1.8020|
001d1a  3944              SUBS     r1,r1,#0x44
001d1c  4891              LDR      r0,|L1.8036|
001d1e  f7fffffe          BL       strcat
;;;557    GPS_COLLECT2();
001d22  f7fffffe          BL       GPS_COLLECT2
;;;558    strcat(data,"CH\n");
001d26  498b              LDR      r1,|L1.8020|
001d28  3944              SUBS     r1,r1,#0x44
001d2a  488e              LDR      r0,|L1.8036|
001d2c  f7fffffe          BL       strcat
;;;559    cond201=(strstr(uart_string_gsm, "OK"));
001d30  a190              ADR      r1,|L1.8052|
001d32  4889              LDR      r0,|L1.8024|
001d34  f7fffffe          BL       strstr
001d38  498f              LDR      r1,|L1.8056|
001d3a  6008              STR      r0,[r1,#0]  ; cond201
;;;560    cond200=(strstr(uart_string_gsm, "ERROR"));
001d3c  4987              LDR      r1,|L1.8028|
001d3e  4886              LDR      r0,|L1.8024|
001d40  f7fffffe          BL       strstr
001d44  498d              LDR      r1,|L1.8060|
001d46  6008              STR      r0,[r1,#0]  ; cond200
;;;561    if((!(cond201|| cond200 ))  && sleep_flag != 1)
001d48  488b              LDR      r0,|L1.8056|
001d4a  6800              LDR      r0,[r0,#0]  ; cond201
001d4c  2800              CMP      r0,#0
                  |L1.7502|
001d4e  d17c              BNE      |L1.7754|
001d50  4608              MOV      r0,r1
001d52  6800              LDR      r0,[r0,#0]  ; cond200
001d54  2800              CMP      r0,#0
001d56  d1fa              BNE      |L1.7502|
001d58  4889              LDR      r0,|L1.8064|
001d5a  6800              LDR      r0,[r0,#0]  ; sleep_flag
001d5c  2801              CMP      r0,#1
001d5e  d074              BEQ      |L1.7754|
;;;562    {
;;;563    delay(100);
001d60  2064              MOVS     r0,#0x64
001d62  f7fffffe          BL       delay
;;;564    clear();//memset(uart_string_gsm,0,5000);
001d66  f7fffffe          BL       clear
;;;565    memset(at_,0,100);
001d6a  2164              MOVS     r1,#0x64
001d6c  4885              LDR      r0,|L1.8068|
001d6e  f7fffffe          BL       __aeabi_memclr
;;;566    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001d72  487c              LDR      r0,|L1.8036|
001d74  f7fffffe          BL       strlen
001d78  1c44              ADDS     r4,r0,#1
001d7a  4623              MOV      r3,r4
001d7c  4a82              LDR      r2,|L1.8072|
001d7e  4975              LDR      r1,|L1.8020|
001d80  3938              SUBS     r1,r1,#0x38
001d82  4880              LDR      r0,|L1.8068|
001d84  f7fffffe          BL       __2sprintf
;;;567    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001d88  2005              MOVS     r0,#5
001d8a  4b74              LDR      r3,|L1.8028|
001d8c  461a              MOV      r2,r3
001d8e  3a70              SUBS     r2,r2,#0x70
001d90  a17e              ADR      r1,|L1.8076|
001d92  9000              STR      r0,[sp,#0]
001d94  487b              LDR      r0,|L1.8068|
001d96  f7fffffe          BL       send_SD
;;;568    clear();	
001d9a  f7fffffe          BL       clear
;;;569    k2=0;									//string array counter for uart 1
001d9e  2000              MOVS     r0,#0
001da0  497b              LDR      r1,|L1.8080|
001da2  6008              STR      r0,[r1,#0]  ; k2
;;;570    tout=0;	
001da4  496e              LDR      r1,|L1.8032|
001da6  6008              STR      r0,[r1,#0]  ; tout
;;;571    for(k=0;k<strlen(data);k++)
001da8  497a              LDR      r1,|L1.8084|
001daa  6008              STR      r0,[r1,#0]  ; k
001dac  e00b              B        |L1.7622|
                  |L1.7598|
;;;572    {
;;;573    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001dae  486d              LDR      r0,|L1.8036|
001db0  4a78              LDR      r2,|L1.8084|
001db2  6812              LDR      r2,[r2,#0]  ; k
001db4  5c81              LDRB     r1,[r0,r2]
001db6  4866              LDR      r0,|L1.8016|
001db8  f7fffffe          BL       uart_putchar
001dbc  4875              LDR      r0,|L1.8084|
001dbe  6800              LDR      r0,[r0,#0]            ;571  ; k
001dc0  1c40              ADDS     r0,r0,#1              ;571
001dc2  4974              LDR      r1,|L1.8084|
001dc4  6008              STR      r0,[r1,#0]            ;571  ; k
                  |L1.7622|
001dc6  4867              LDR      r0,|L1.8036|
001dc8  f7fffffe          BL       strlen
001dcc  4971              LDR      r1,|L1.8084|
001dce  6809              LDR      r1,[r1,#0]            ;571  ; k
001dd0  4288              CMP      r0,r1                 ;571
001dd2  d8ec              BHI      |L1.7598|
;;;574    }	
;;;575    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001dd4  210a              MOVS     r1,#0xa
001dd6  485e              LDR      r0,|L1.8016|
001dd8  f7fffffe          BL       uart_putchar
001ddc  210a              MOVS     r1,#0xa
001dde  485c              LDR      r0,|L1.8016|
001de0  f7fffffe          BL       uart_putchar
001de4  210a              MOVS     r1,#0xa
001de6  485a              LDR      r0,|L1.8016|
001de8  f7fffffe          BL       uart_putchar
001dec  210a              MOVS     r1,#0xa
001dee  4858              LDR      r0,|L1.8016|
001df0  f7fffffe          BL       uart_putchar
001df4  210a              MOVS     r1,#0xa
001df6  4856              LDR      r0,|L1.8016|
001df8  f7fffffe          BL       uart_putchar
001dfc  210a              MOVS     r1,#0xa
001dfe  4854              LDR      r0,|L1.8016|
001e00  f7fffffe          BL       uart_putchar
001e04  210a              MOVS     r1,#0xa
001e06  4852              LDR      r0,|L1.8016|
001e08  f7fffffe          BL       uart_putchar
001e0c  210a              MOVS     r1,#0xa
001e0e  4850              LDR      r0,|L1.8016|
001e10  f7fffffe          BL       uart_putchar
001e14  210a              MOVS     r1,#0xa
001e16  484e              LDR      r0,|L1.8016|
001e18  f7fffffe          BL       uart_putchar
001e1c  210a              MOVS     r1,#0xa
001e1e  484c              LDR      r0,|L1.8016|
001e20  f7fffffe          BL       uart_putchar
001e24  210a              MOVS     r1,#0xa
001e26  484a              LDR      r0,|L1.8016|
001e28  f7fffffe          BL       uart_putchar
001e2c  210a              MOVS     r1,#0xa
001e2e  4848              LDR      r0,|L1.8016|
001e30  f7fffffe          BL       uart_putchar
001e34  210a              MOVS     r1,#0xa
001e36  4846              LDR      r0,|L1.8016|
001e38  f7fffffe          BL       uart_putchar
001e3c  210a              MOVS     r1,#0xa
001e3e  4844              LDR      r0,|L1.8016|
001e40  f7fffffe          BL       uart_putchar
001e44  210a              MOVS     r1,#0xa
001e46  4842              LDR      r0,|L1.8016|
001e48  e000              B        |L1.7756|
                  |L1.7754|
001e4a  e0f8              B        |L1.8254|
                  |L1.7756|
001e4c  f7fffffe          BL       uart_putchar
001e50  210a              MOVS     r1,#0xa
001e52  483f              LDR      r0,|L1.8016|
001e54  f7fffffe          BL       uart_putchar
001e58  210a              MOVS     r1,#0xa
001e5a  483d              LDR      r0,|L1.8016|
001e5c  f7fffffe          BL       uart_putchar
001e60  210a              MOVS     r1,#0xa
001e62  483b              LDR      r0,|L1.8016|
001e64  f7fffffe          BL       uart_putchar
001e68  210a              MOVS     r1,#0xa
001e6a  4839              LDR      r0,|L1.8016|
001e6c  f7fffffe          BL       uart_putchar
001e70  210a              MOVS     r1,#0xa
001e72  4837              LDR      r0,|L1.8016|
001e74  f7fffffe          BL       uart_putchar
001e78  210a              MOVS     r1,#0xa
001e7a  4835              LDR      r0,|L1.8016|
001e7c  f7fffffe          BL       uart_putchar
001e80  210a              MOVS     r1,#0xa
001e82  4833              LDR      r0,|L1.8016|
001e84  f7fffffe          BL       uart_putchar
001e88  210a              MOVS     r1,#0xa
001e8a  4831              LDR      r0,|L1.8016|
001e8c  f7fffffe          BL       uart_putchar
001e90  210a              MOVS     r1,#0xa
001e92  482f              LDR      r0,|L1.8016|
001e94  f7fffffe          BL       uart_putchar
001e98  210a              MOVS     r1,#0xa
001e9a  482d              LDR      r0,|L1.8016|
001e9c  f7fffffe          BL       uart_putchar
001ea0  210a              MOVS     r1,#0xa
001ea2  482b              LDR      r0,|L1.8016|
001ea4  f7fffffe          BL       uart_putchar
001ea8  210a              MOVS     r1,#0xa
001eaa  4829              LDR      r0,|L1.8016|
001eac  f7fffffe          BL       uart_putchar
001eb0  210a              MOVS     r1,#0xa
001eb2  4827              LDR      r0,|L1.8016|
001eb4  f7fffffe          BL       uart_putchar
001eb8  210a              MOVS     r1,#0xa
001eba  4825              LDR      r0,|L1.8016|
001ebc  f7fffffe          BL       uart_putchar
001ec0  210a              MOVS     r1,#0xa
001ec2  4823              LDR      r0,|L1.8016|
001ec4  f7fffffe          BL       uart_putchar
001ec8  210a              MOVS     r1,#0xa
001eca  4821              LDR      r0,|L1.8016|
001ecc  f7fffffe          BL       uart_putchar
001ed0  210a              MOVS     r1,#0xa
001ed2  481f              LDR      r0,|L1.8016|
001ed4  f7fffffe          BL       uart_putchar
001ed8  210a              MOVS     r1,#0xa
001eda  481d              LDR      r0,|L1.8016|
001edc  f7fffffe          BL       uart_putchar
001ee0  210a              MOVS     r1,#0xa
001ee2  481b              LDR      r0,|L1.8016|
001ee4  f7fffffe          BL       uart_putchar
001ee8  210a              MOVS     r1,#0xa
001eea  4819              LDR      r0,|L1.8016|
001eec  f7fffffe          BL       uart_putchar
001ef0  210a              MOVS     r1,#0xa
001ef2  4817              LDR      r0,|L1.8016|
001ef4  f7fffffe          BL       uart_putchar
001ef8  210a              MOVS     r1,#0xa
001efa  4815              LDR      r0,|L1.8016|
001efc  f7fffffe          BL       uart_putchar
001f00  210a              MOVS     r1,#0xa
001f02  4813              LDR      r0,|L1.8016|
001f04  f7fffffe          BL       uart_putchar
001f08  210a              MOVS     r1,#0xa
001f0a  4811              LDR      r0,|L1.8016|
001f0c  f7fffffe          BL       uart_putchar
001f10  210a              MOVS     r1,#0xa
001f12  480f              LDR      r0,|L1.8016|
001f14  f7fffffe          BL       uart_putchar
001f18  210a              MOVS     r1,#0xa
001f1a  480d              LDR      r0,|L1.8016|
001f1c  f7fffffe          BL       uart_putchar
001f20  210a              MOVS     r1,#0xa
001f22  480b              LDR      r0,|L1.8016|
001f24  f7fffffe          BL       uart_putchar
001f28  210a              MOVS     r1,#0xa
001f2a  4809              LDR      r0,|L1.8016|
001f2c  f7fffffe          BL       uart_putchar
001f30  210a              MOVS     r1,#0xa
001f32  4807              LDR      r0,|L1.8016|
001f34  f7fffffe          BL       uart_putchar
001f38  210a              MOVS     r1,#0xa
001f3a  4805              LDR      r0,|L1.8016|
001f3c  f7fffffe          BL       uart_putchar
001f40  210a              MOVS     r1,#0xa
001f42  4803              LDR      r0,|L1.8016|
001f44  f7fffffe          BL       uart_putchar
001f48  210a              MOVS     r1,#0xa
001f4a  4801              LDR      r0,|L1.8016|
001f4c  e024              B        |L1.8088|
001f4e  0000              DCW      0x0000
                  |L1.8016|
                          DCD      0x4006b000
                  |L1.8020|
                          DCD      ||.text||+0xd88
                  |L1.8024|
                          DCD      uart_string_gsm
                  |L1.8028|
                          DCD      ||.text||+0x910
                  |L1.8032|
                          DCD      tout
                  |L1.8036|
                          DCD      data
                  |L1.8040|
                          DCD      flagch
                  |L1.8044|
                          DCD      int_erval
                  |L1.8048|
                          DCD      temp
                  |L1.8052|
001f74  4f4b00            DCB      "OK",0
001f77  00                DCB      0
                  |L1.8056|
                          DCD      cond201
                  |L1.8060|
                          DCD      cond200
                  |L1.8064|
                          DCD      sleep_flag
                  |L1.8068|
                          DCD      at_
                  |L1.8072|
                          DCD      drive
                  |L1.8076|
001f8c  3e00              DCB      ">",0
001f8e  00                DCB      0
001f8f  00                DCB      0
                  |L1.8080|
                          DCD      ||k2||
                  |L1.8084|
                          DCD      k
                  |L1.8088|
001f98  f7fffffe          BL       uart_putchar
001f9c  210a              MOVS     r1,#0xa
001f9e  48fe              LDR      r0,|L1.9112|
001fa0  f7fffffe          BL       uart_putchar
001fa4  210a              MOVS     r1,#0xa
001fa6  48fc              LDR      r0,|L1.9112|
001fa8  f7fffffe          BL       uart_putchar
001fac  210a              MOVS     r1,#0xa
001fae  48fa              LDR      r0,|L1.9112|
001fb0  f7fffffe          BL       uart_putchar
001fb4  210a              MOVS     r1,#0xa
001fb6  48f8              LDR      r0,|L1.9112|
001fb8  f7fffffe          BL       uart_putchar
001fbc  210a              MOVS     r1,#0xa
001fbe  48f6              LDR      r0,|L1.9112|
001fc0  f7fffffe          BL       uart_putchar
001fc4  210a              MOVS     r1,#0xa
001fc6  48f4              LDR      r0,|L1.9112|
001fc8  f7fffffe          BL       uart_putchar
001fcc  210a              MOVS     r1,#0xa
001fce  48f2              LDR      r0,|L1.9112|
001fd0  f7fffffe          BL       uart_putchar
001fd4  210a              MOVS     r1,#0xa
001fd6  48f0              LDR      r0,|L1.9112|
001fd8  f7fffffe          BL       uart_putchar
001fdc  210a              MOVS     r1,#0xa
001fde  48ee              LDR      r0,|L1.9112|
001fe0  f7fffffe          BL       uart_putchar
001fe4  210a              MOVS     r1,#0xa
001fe6  48ec              LDR      r0,|L1.9112|
001fe8  f7fffffe          BL       uart_putchar
;;;576    									//memset(data,0,1000);
;;;577    														//timer counts to wait for characters in uart 1 									
;;;578    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001fec  bf00              NOP      
                  |L1.8174|
001fee  49eb              LDR      r1,|L1.9116|
001ff0  48eb              LDR      r0,|L1.9120|
001ff2  f7fffffe          BL       strstr
001ff6  2800              CMP      r0,#0
001ff8  d109              BNE      |L1.8206|
001ffa  49ea              LDR      r1,|L1.9124|
001ffc  48e8              LDR      r0,|L1.9120|
001ffe  f7fffffe          BL       strstr
002002  2800              CMP      r0,#0
002004  d103              BNE      |L1.8206|
002006  48e8              LDR      r0,|L1.9128|
002008  6800              LDR      r0,[r0,#0]  ; tout
00200a  2805              CMP      r0,#5
00200c  ddef              BLE      |L1.8174|
                  |L1.8206|
;;;579    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;580    									}
;;;581    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00200e  f7fffffe          BL       clear
;;;582    									//clear();
;;;583    									memset(data,0,strlen(data));
002012  48e6              LDR      r0,|L1.9132|
002014  f7fffffe          BL       strlen
002018  4604              MOV      r4,r0
00201a  4621              MOV      r1,r4
00201c  48e3              LDR      r0,|L1.9132|
00201e  f7fffffe          BL       __aeabi_memclr
;;;584    									clear();
002022  f7fffffe          BL       clear
;;;585    									RESET_OFF;delay(100);
002026  2020              MOVS     r0,#0x20
002028  49e1              LDR      r1,|L1.9136|
00202a  6088              STR      r0,[r1,#8]
00202c  2064              MOVS     r0,#0x64
00202e  f7fffffe          BL       delay
;;;586    									RESET_ON;delay(100);		
002032  2020              MOVS     r0,#0x20
002034  49de              LDR      r1,|L1.9136|
002036  6048              STR      r0,[r1,#4]
002038  2064              MOVS     r0,#0x64
00203a  f7fffffe          BL       delay
                  |L1.8254|
;;;587    }
;;;588    	
;;;589    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
00203e  2004              MOVS     r0,#4
002040  4bd8              LDR      r3,|L1.9124|
002042  3b78              SUBS     r3,r3,#0x78
002044  461a              MOV      r2,r3
002046  3208              ADDS     r2,r2,#8
002048  a1da              ADR      r1,|L1.9140|
00204a  9000              STR      r0,[sp,#0]
00204c  48da              LDR      r0,|L1.9144|
00204e  f7fffffe          BL       send_GSM
;;;590    GPS_COLLECT2();
002052  f7fffffe          BL       GPS_COLLECT2
;;;591    strcat(data,"CH\n");	
002056  49d1              LDR      r1,|L1.9116|
002058  3944              SUBS     r1,r1,#0x44
00205a  48d4              LDR      r0,|L1.9132|
00205c  f7fffffe          BL       strcat
;;;592    memset(at_,0,100);
002060  2164              MOVS     r1,#0x64
002062  48d6              LDR      r0,|L1.9148|
002064  f7fffffe          BL       __aeabi_memclr
;;;593    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
002068  4ad5              LDR      r2,|L1.9152|
00206a  49d3              LDR      r1,|L1.9144|
00206c  3118              ADDS     r1,r1,#0x18
00206e  48d3              LDR      r0,|L1.9148|
002070  f7fffffe          BL       __2sprintf
;;;594    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
002074  48d3              LDR      r0,|L1.9156|
002076  6800              LDR      r0,[r0,#0]  ; tmeout
002078  4bca              LDR      r3,|L1.9124|
00207a  3b78              SUBS     r3,r3,#0x78
00207c  461a              MOV      r2,r3
00207e  3208              ADDS     r2,r2,#8
002080  a1cc              ADR      r1,|L1.9140|
002082  9000              STR      r0,[sp,#0]
002084  48cd              LDR      r0,|L1.9148|
002086  f7fffffe          BL       send_GSM
;;;595    msg_sim800(); 
00208a  f7fffffe          BL       msg_sim800
;;;596    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
00208e  2004              MOVS     r0,#4
002090  4bc4              LDR      r3,|L1.9124|
002092  3318              ADDS     r3,r3,#0x18
002094  461a              MOV      r2,r3
002096  3a88              SUBS     r2,r2,#0x88
002098  a1c6              ADR      r1,|L1.9140|
00209a  9000              STR      r0,[sp,#0]
00209c  48c6              LDR      r0,|L1.9144|
00209e  3030              ADDS     r0,r0,#0x30
0020a0  f7fffffe          BL       send_GSM
;;;597    GPS_COLLECT2();
0020a4  f7fffffe          BL       GPS_COLLECT2
;;;598    strcat(data,"CH\n");	
0020a8  49bc              LDR      r1,|L1.9116|
0020aa  3944              SUBS     r1,r1,#0x44
0020ac  48bf              LDR      r0,|L1.9132|
0020ae  f7fffffe          BL       strcat
;;;599    GPS_COLLECT2();
0020b2  f7fffffe          BL       GPS_COLLECT2
;;;600    strcat(data,"CH\n");	
0020b6  49b9              LDR      r1,|L1.9116|
0020b8  3944              SUBS     r1,r1,#0x44
0020ba  48bc              LDR      r0,|L1.9132|
0020bc  f7fffffe          BL       strcat
;;;601    
;;;602    
;;;603    msg_sim800(); 
0020c0  f7fffffe          BL       msg_sim800
;;;604    GPS_COLLECT2();
0020c4  f7fffffe          BL       GPS_COLLECT2
;;;605    strcat(data,"CH\n");	
0020c8  49b4              LDR      r1,|L1.9116|
0020ca  3944              SUBS     r1,r1,#0x44
0020cc  48b7              LDR      r0,|L1.9132|
0020ce  f7fffffe          BL       strcat
;;;606    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0020d2  f7fffffe          BL       clear
0020d6  48b8              LDR      r0,|L1.9144|
0020d8  3040              ADDS     r0,r0,#0x40
0020da  f7fffffe          BL       send_modem
0020de  f7fffffe          BL       clear
;;;607    					delay(20);
0020e2  2014              MOVS     r0,#0x14
0020e4  f7fffffe          BL       delay
;;;608    
;;;609    
;;;610    msg_sim800(); 
0020e8  f7fffffe          BL       msg_sim800
;;;611    
;;;612    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0020ec  4bb6              LDR      r3,|L1.9160|
0020ee  4ab7              LDR      r2,|L1.9164|
0020f0  49b1              LDR      r1,|L1.9144|
0020f2  3158              ADDS     r1,r1,#0x58
0020f4  48b1              LDR      r0,|L1.9148|
0020f6  f7fffffe          BL       __2sprintf
;;;613    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0020fa  48b2              LDR      r0,|L1.9156|
0020fc  6800              LDR      r0,[r0,#0]  ; tmeout
0020fe  4ba9              LDR      r3,|L1.9124|
002100  3b78              SUBS     r3,r3,#0x78
002102  4aa8              LDR      r2,|L1.9124|
002104  49ac              LDR      r1,|L1.9144|
002106  3178              ADDS     r1,r1,#0x78
002108  9000              STR      r0,[sp,#0]
00210a  48ac              LDR      r0,|L1.9148|
00210c  f7fffffe          BL       send_GSM
;;;614    						clear();
002110  f7fffffe          BL       clear
;;;615    						
;;;616    						
;;;617    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
002114  48ab              LDR      r0,|L1.9156|
002116  6800              LDR      r0,[r0,#0]  ; tmeout
002118  4ba7              LDR      r3,|L1.9144|
00211a  3380              ADDS     r3,r3,#0x80
00211c  4aa1              LDR      r2,|L1.9124|
00211e  a1ac              ADR      r1,|L1.9168|
002120  9000              STR      r0,[sp,#0]
002122  4618              MOV      r0,r3
002124  3014              ADDS     r0,r0,#0x14
002126  f7fffffe          BL       send_GSM
;;;618    //*************************************tcp_initialization_ends****************************************//							
;;;619    									
;;;620    						clear();		
00212a  f7fffffe          BL       clear
;;;621    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
00212e  213e              MOVS     r1,#0x3e
002130  489b              LDR      r0,|L1.9120|
002132  f7fffffe          BL       mystrstr
002136  49a7              LDR      r1,|L1.9172|
002138  7008              STRB     r0,[r1,#0]
;;;622    								if(cond)	
00213a  4608              MOV      r0,r1
00213c  7800              LDRB     r0,[r0,#0]  ; cond
00213e  2800              CMP      r0,#0
002140  d07e              BEQ      |L1.8768|
;;;623    								{	
;;;624    
;;;625    									clear();
002142  f7fffffe          BL       clear
;;;626    									memset(uart_string_gsm,0,5000);
002146  49a4              LDR      r1,|L1.9176|
002148  4895              LDR      r0,|L1.9120|
00214a  f7fffffe          BL       __aeabi_memclr
;;;627    									strcat(data,"\n");
00214e  a1a3              ADR      r1,|L1.9180|
002150  4896              LDR      r0,|L1.9132|
002152  f7fffffe          BL       strcat
;;;628    									len=strlen(data);
002156  4895              LDR      r0,|L1.9132|
002158  f7fffffe          BL       strlen
00215c  49a0              LDR      r1,|L1.9184|
00215e  6008              STR      r0,[r1,#0]  ; len
;;;629    									tout=0;
002160  2000              MOVS     r0,#0
002162  4991              LDR      r1,|L1.9128|
002164  6008              STR      r0,[r1,#0]  ; tout
;;;630    									k2=0;
002166  499f              LDR      r1,|L1.9188|
002168  6008              STR      r0,[r1,#0]  ; k2
;;;631    									for(k=0;k<len;k++)
00216a  499f              LDR      r1,|L1.9192|
00216c  6008              STR      r0,[r1,#0]  ; k
00216e  e00b              B        |L1.8584|
                  |L1.8560|
;;;632    									{
;;;633    										uart_putchar(UART1_BASE_PTR, data[k]);
002170  488e              LDR      r0,|L1.9132|
002172  4a9d              LDR      r2,|L1.9192|
002174  6812              LDR      r2,[r2,#0]  ; k
002176  5c81              LDRB     r1,[r0,r2]
002178  4887              LDR      r0,|L1.9112|
00217a  f7fffffe          BL       uart_putchar
00217e  489a              LDR      r0,|L1.9192|
002180  6800              LDR      r0,[r0,#0]            ;631  ; k
002182  1c40              ADDS     r0,r0,#1              ;631
002184  4998              LDR      r1,|L1.9192|
002186  6008              STR      r0,[r1,#0]            ;631  ; k
                  |L1.8584|
002188  4897              LDR      r0,|L1.9192|
00218a  6800              LDR      r0,[r0,#0]            ;631  ; k
00218c  4994              LDR      r1,|L1.9184|
00218e  6809              LDR      r1,[r1,#0]            ;631  ; len
002190  4288              CMP      r0,r1                 ;631
002192  dbed              BLT      |L1.8560|
;;;634    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002194  211a              MOVS     r1,#0x1a
002196  4880              LDR      r0,|L1.9112|
002198  f7fffffe          BL       uart_putchar
00219c  211a              MOVS     r1,#0x1a
00219e  487e              LDR      r0,|L1.9112|
0021a0  f7fffffe          BL       uart_putchar
;;;635    									do
0021a4  bf00              NOP      
                  |L1.8614|
;;;636    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0021a6  497f              LDR      r1,|L1.9124|
0021a8  3908              SUBS     r1,r1,#8
0021aa  487d              LDR      r0,|L1.9120|
0021ac  f7fffffe          BL       strstr
0021b0  498e              LDR      r1,|L1.9196|
0021b2  6008              STR      r0,[r1,#0]  ; stcond1
;;;637    																	stcond2=strstr(uart_string_gsm, "ERROR");
0021b4  497b              LDR      r1,|L1.9124|
0021b6  487a              LDR      r0,|L1.9120|
0021b8  f7fffffe          BL       strstr
0021bc  498c              LDR      r1,|L1.9200|
0021be  6008              STR      r0,[r1,#0]  ; stcond2
;;;638    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0021c0  497d              LDR      r1,|L1.9144|
0021c2  3188              ADDS     r1,r1,#0x88
0021c4  4876              LDR      r0,|L1.9120|
0021c6  f7fffffe          BL       strstr
0021ca  498a              LDR      r1,|L1.9204|
0021cc  6008              STR      r0,[r1,#0]  ; stcond3
;;;639    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0021ce  4975              LDR      r1,|L1.9124|
0021d0  3118              ADDS     r1,r1,#0x18
0021d2  4873              LDR      r0,|L1.9120|
0021d4  f7fffffe          BL       strstr
0021d8  4987              LDR      r1,|L1.9208|
0021da  6008              STR      r0,[r1,#0]  ; stcond4
;;;640    																	
;;;641    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
0021dc  4884              LDR      r0,|L1.9200|
0021de  6800              LDR      r0,[r0,#0]  ; stcond2
0021e0  2800              CMP      r0,#0
0021e2  d10f              BNE      |L1.8708|
0021e4  4883              LDR      r0,|L1.9204|
0021e6  6800              LDR      r0,[r0,#0]  ; stcond3
0021e8  2800              CMP      r0,#0
0021ea  d10b              BNE      |L1.8708|
0021ec  4608              MOV      r0,r1
0021ee  6800              LDR      r0,[r0,#0]  ; stcond4
0021f0  2800              CMP      r0,#0
0021f2  d107              BNE      |L1.8708|
0021f4  487d              LDR      r0,|L1.9196|
0021f6  6800              LDR      r0,[r0,#0]  ; stcond1
0021f8  2800              CMP      r0,#0
0021fa  d103              BNE      |L1.8708|
0021fc  486a              LDR      r0,|L1.9128|
0021fe  6800              LDR      r0,[r0,#0]  ; tout
002200  2805              CMP      r0,#5
002202  ddd0              BLE      |L1.8614|
                  |L1.8708|
;;;642    															//	delay(10);clear();
;;;643    														uart_putchar(UART1_BASE_PTR,0x1A);
002204  211a              MOVS     r1,#0x1a
002206  4864              LDR      r0,|L1.9112|
002208  f7fffffe          BL       uart_putchar
;;;644    											//	delay(10);
;;;645    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00220c  211a              MOVS     r1,#0x1a
00220e  4862              LDR      r0,|L1.9112|
002210  f7fffffe          BL       uart_putchar
002214  211a              MOVS     r1,#0x1a
002216  4860              LDR      r0,|L1.9112|
002218  f7fffffe          BL       uart_putchar
00221c  211a              MOVS     r1,#0x1a
00221e  485e              LDR      r0,|L1.9112|
002220  f7fffffe          BL       uart_putchar
;;;646    						
;;;647    
;;;648    
;;;649    									
;;;650    															
;;;651    															
;;;652    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;653    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;654    															
;;;655    														//qwe=strlen(uart_string_gsm);
;;;656    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;657    															delay(20);
002224  2014              MOVS     r0,#0x14
002226  f7fffffe          BL       delay
;;;658    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
00222a  495e              LDR      r1,|L1.9124|
00222c  3908              SUBS     r1,r1,#8
00222e  485c              LDR      r0,|L1.9120|
002230  f7fffffe          BL       strstr
002234  4971              LDR      r1,|L1.9212|
002236  6008              STR      r0,[r1,#0]  ; con1d
;;;659    																if(!con1d)
002238  4608              MOV      r0,r1
00223a  6800              LDR      r0,[r0,#0]  ; con1d
00223c  2800              CMP      r0,#0
00223e  e000              B        |L1.8770|
                  |L1.8768|
002240  e178              B        |L1.9524|
                  |L1.8770|
002242  d17c              BNE      |L1.9022|
;;;660    																{
;;;661    																	
;;;662    																	
;;;663    	delay(100);
002244  2064              MOVS     r0,#0x64
002246  f7fffffe          BL       delay
;;;664    		clear();//memset(uart_string_gsm,0,5000);
00224a  f7fffffe          BL       clear
;;;665    	
;;;666    	memset(at_,0,100);
00224e  2164              MOVS     r1,#0x64
002250  485a              LDR      r0,|L1.9148|
002252  f7fffffe          BL       __aeabi_memclr
;;;667    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002256  4855              LDR      r0,|L1.9132|
002258  f7fffffe          BL       strlen
00225c  1c44              ADDS     r4,r0,#1
00225e  4623              MOV      r3,r4
002260  4a67              LDR      r2,|L1.9216|
002262  494e              LDR      r1,|L1.9116|
002264  3938              SUBS     r1,r1,#0x38
002266  4855              LDR      r0,|L1.9148|
002268  f7fffffe          BL       __2sprintf
;;;668    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00226c  2005              MOVS     r0,#5
00226e  4b4d              LDR      r3,|L1.9124|
002270  461a              MOV      r2,r3
002272  3a70              SUBS     r2,r2,#0x70
002274  a156              ADR      r1,|L1.9168|
002276  9000              STR      r0,[sp,#0]
002278  4850              LDR      r0,|L1.9148|
00227a  f7fffffe          BL       send_SD
;;;669    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;670    //	if(strstr(uart_string_gsm,"ERROR")){
;;;671    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;672    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;673    //	}
;;;674    	
;;;675    clear();	
00227e  f7fffffe          BL       clear
;;;676    									k2=0;									//string array counter for uart 1
002282  2000              MOVS     r0,#0
002284  4957              LDR      r1,|L1.9188|
002286  6008              STR      r0,[r1,#0]  ; k2
;;;677    									tout=0;	
002288  4947              LDR      r1,|L1.9128|
00228a  6008              STR      r0,[r1,#0]  ; tout
;;;678    		for(k=0;k<strlen(data);k++)
00228c  4956              LDR      r1,|L1.9192|
00228e  6008              STR      r0,[r1,#0]  ; k
002290  e00b              B        |L1.8874|
                  |L1.8850|
;;;679    		{
;;;680    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002292  4846              LDR      r0,|L1.9132|
002294  4a54              LDR      r2,|L1.9192|
002296  6812              LDR      r2,[r2,#0]  ; k
002298  5c81              LDRB     r1,[r0,r2]
00229a  483f              LDR      r0,|L1.9112|
00229c  f7fffffe          BL       uart_putchar
0022a0  4851              LDR      r0,|L1.9192|
0022a2  6800              LDR      r0,[r0,#0]            ;678  ; k
0022a4  1c40              ADDS     r0,r0,#1              ;678
0022a6  4950              LDR      r1,|L1.9192|
0022a8  6008              STR      r0,[r1,#0]            ;678  ; k
                  |L1.8874|
0022aa  4840              LDR      r0,|L1.9132|
0022ac  f7fffffe          BL       strlen
0022b0  494d              LDR      r1,|L1.9192|
0022b2  6809              LDR      r1,[r1,#0]            ;678  ; k
0022b4  4288              CMP      r0,r1                 ;678
0022b6  d8ec              BHI      |L1.8850|
;;;681    		}	
;;;682    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0022b8  210a              MOVS     r1,#0xa
0022ba  4837              LDR      r0,|L1.9112|
0022bc  f7fffffe          BL       uart_putchar
0022c0  210a              MOVS     r1,#0xa
0022c2  4835              LDR      r0,|L1.9112|
0022c4  f7fffffe          BL       uart_putchar
0022c8  210a              MOVS     r1,#0xa
0022ca  4833              LDR      r0,|L1.9112|
0022cc  f7fffffe          BL       uart_putchar
0022d0  210a              MOVS     r1,#0xa
0022d2  4831              LDR      r0,|L1.9112|
0022d4  f7fffffe          BL       uart_putchar
0022d8  210a              MOVS     r1,#0xa
0022da  482f              LDR      r0,|L1.9112|
0022dc  f7fffffe          BL       uart_putchar
0022e0  210a              MOVS     r1,#0xa
0022e2  482d              LDR      r0,|L1.9112|
0022e4  f7fffffe          BL       uart_putchar
0022e8  210a              MOVS     r1,#0xa
0022ea  482b              LDR      r0,|L1.9112|
0022ec  f7fffffe          BL       uart_putchar
0022f0  210a              MOVS     r1,#0xa
0022f2  4829              LDR      r0,|L1.9112|
0022f4  f7fffffe          BL       uart_putchar
0022f8  210a              MOVS     r1,#0xa
0022fa  4827              LDR      r0,|L1.9112|
0022fc  f7fffffe          BL       uart_putchar
002300  210a              MOVS     r1,#0xa
002302  4825              LDR      r0,|L1.9112|
002304  f7fffffe          BL       uart_putchar
002308  210a              MOVS     r1,#0xa
00230a  4823              LDR      r0,|L1.9112|
00230c  f7fffffe          BL       uart_putchar
002310  210a              MOVS     r1,#0xa
002312  4821              LDR      r0,|L1.9112|
002314  f7fffffe          BL       uart_putchar
002318  210a              MOVS     r1,#0xa
00231a  481f              LDR      r0,|L1.9112|
00231c  f7fffffe          BL       uart_putchar
002320  210a              MOVS     r1,#0xa
002322  481d              LDR      r0,|L1.9112|
002324  f7fffffe          BL       uart_putchar
002328  210a              MOVS     r1,#0xa
00232a  481b              LDR      r0,|L1.9112|
00232c  f7fffffe          BL       uart_putchar
002330  210a              MOVS     r1,#0xa
002332  4819              LDR      r0,|L1.9112|
002334  f7fffffe          BL       uart_putchar
002338  210a              MOVS     r1,#0xa
00233a  4817              LDR      r0,|L1.9112|
00233c  e000              B        |L1.9024|
                  |L1.9022|
00233e  e0f6              B        |L1.9518|
                  |L1.9024|
002340  f7fffffe          BL       uart_putchar
002344  210a              MOVS     r1,#0xa
002346  4814              LDR      r0,|L1.9112|
002348  f7fffffe          BL       uart_putchar
00234c  210a              MOVS     r1,#0xa
00234e  4812              LDR      r0,|L1.9112|
002350  f7fffffe          BL       uart_putchar
002354  210a              MOVS     r1,#0xa
002356  4810              LDR      r0,|L1.9112|
002358  f7fffffe          BL       uart_putchar
00235c  210a              MOVS     r1,#0xa
00235e  480e              LDR      r0,|L1.9112|
002360  f7fffffe          BL       uart_putchar
002364  210a              MOVS     r1,#0xa
002366  480c              LDR      r0,|L1.9112|
002368  f7fffffe          BL       uart_putchar
00236c  210a              MOVS     r1,#0xa
00236e  480a              LDR      r0,|L1.9112|
002370  f7fffffe          BL       uart_putchar
002374  210a              MOVS     r1,#0xa
002376  4808              LDR      r0,|L1.9112|
002378  f7fffffe          BL       uart_putchar
00237c  210a              MOVS     r1,#0xa
00237e  4806              LDR      r0,|L1.9112|
002380  f7fffffe          BL       uart_putchar
002384  210a              MOVS     r1,#0xa
002386  4804              LDR      r0,|L1.9112|
002388  f7fffffe          BL       uart_putchar
00238c  210a              MOVS     r1,#0xa
00238e  4802              LDR      r0,|L1.9112|
002390  f7fffffe          BL       uart_putchar
002394  210a              MOVS     r1,#0xa
002396  e035              B        |L1.9220|
                  |L1.9112|
                          DCD      0x4006b000
                  |L1.9116|
                          DCD      ||.text||+0xd88
                  |L1.9120|
                          DCD      uart_string_gsm
                  |L1.9124|
                          DCD      ||.text||+0x910
                  |L1.9128|
                          DCD      tout
                  |L1.9132|
                          DCD      data
                  |L1.9136|
                          DCD      0x400ff080
                  |L1.9140|
0023b4  4f4b00            DCB      "OK",0
0023b7  00                DCB      0
                  |L1.9144|
                          DCD      ||.text||+0x1204
                  |L1.9148|
                          DCD      at_
                  |L1.9152|
                          DCD      apn
                  |L1.9156|
                          DCD      tmeout
                  |L1.9160|
                          DCD      port
                  |L1.9164|
                          DCD      ||ip||
                  |L1.9168|
0023d0  3e00              DCB      ">",0
0023d2  00                DCB      0
0023d3  00                DCB      0
                  |L1.9172|
                          DCD      cond
                  |L1.9176|
                          DCD      0x00001388
                  |L1.9180|
0023dc  0a00              DCB      "\n",0
0023de  00                DCB      0
0023df  00                DCB      0
                  |L1.9184|
                          DCD      len
                  |L1.9188|
                          DCD      ||k2||
                  |L1.9192|
                          DCD      k
                  |L1.9196|
                          DCD      stcond1
                  |L1.9200|
                          DCD      stcond2
                  |L1.9204|
                          DCD      stcond3
                  |L1.9208|
                          DCD      stcond4
                  |L1.9212|
                          DCD      con1d
                  |L1.9216|
                          DCD      drive
                  |L1.9220|
002404  48fe              LDR      r0,|L1.10240|
002406  f7fffffe          BL       uart_putchar
00240a  210a              MOVS     r1,#0xa
00240c  48fc              LDR      r0,|L1.10240|
00240e  f7fffffe          BL       uart_putchar
002412  210a              MOVS     r1,#0xa
002414  48fa              LDR      r0,|L1.10240|
002416  f7fffffe          BL       uart_putchar
00241a  210a              MOVS     r1,#0xa
00241c  48f8              LDR      r0,|L1.10240|
00241e  f7fffffe          BL       uart_putchar
002422  210a              MOVS     r1,#0xa
002424  48f6              LDR      r0,|L1.10240|
002426  f7fffffe          BL       uart_putchar
00242a  210a              MOVS     r1,#0xa
00242c  48f4              LDR      r0,|L1.10240|
00242e  f7fffffe          BL       uart_putchar
002432  210a              MOVS     r1,#0xa
002434  48f2              LDR      r0,|L1.10240|
002436  f7fffffe          BL       uart_putchar
00243a  210a              MOVS     r1,#0xa
00243c  48f0              LDR      r0,|L1.10240|
00243e  f7fffffe          BL       uart_putchar
002442  210a              MOVS     r1,#0xa
002444  48ee              LDR      r0,|L1.10240|
002446  f7fffffe          BL       uart_putchar
00244a  210a              MOVS     r1,#0xa
00244c  48ec              LDR      r0,|L1.10240|
00244e  f7fffffe          BL       uart_putchar
002452  210a              MOVS     r1,#0xa
002454  48ea              LDR      r0,|L1.10240|
002456  f7fffffe          BL       uart_putchar
00245a  210a              MOVS     r1,#0xa
00245c  48e8              LDR      r0,|L1.10240|
00245e  f7fffffe          BL       uart_putchar
002462  210a              MOVS     r1,#0xa
002464  48e6              LDR      r0,|L1.10240|
002466  f7fffffe          BL       uart_putchar
00246a  210a              MOVS     r1,#0xa
00246c  48e4              LDR      r0,|L1.10240|
00246e  f7fffffe          BL       uart_putchar
002472  210a              MOVS     r1,#0xa
002474  48e2              LDR      r0,|L1.10240|
002476  f7fffffe          BL       uart_putchar
00247a  210a              MOVS     r1,#0xa
00247c  48e0              LDR      r0,|L1.10240|
00247e  f7fffffe          BL       uart_putchar
002482  210a              MOVS     r1,#0xa
002484  48de              LDR      r0,|L1.10240|
002486  f7fffffe          BL       uart_putchar
00248a  210a              MOVS     r1,#0xa
00248c  48dc              LDR      r0,|L1.10240|
00248e  f7fffffe          BL       uart_putchar
002492  210a              MOVS     r1,#0xa
002494  48da              LDR      r0,|L1.10240|
002496  f7fffffe          BL       uart_putchar
00249a  210a              MOVS     r1,#0xa
00249c  48d8              LDR      r0,|L1.10240|
00249e  f7fffffe          BL       uart_putchar
0024a2  210a              MOVS     r1,#0xa
0024a4  48d6              LDR      r0,|L1.10240|
0024a6  f7fffffe          BL       uart_putchar
0024aa  210a              MOVS     r1,#0xa
0024ac  48d4              LDR      r0,|L1.10240|
0024ae  f7fffffe          BL       uart_putchar
0024b2  210a              MOVS     r1,#0xa
0024b4  48d2              LDR      r0,|L1.10240|
0024b6  f7fffffe          BL       uart_putchar
0024ba  210a              MOVS     r1,#0xa
0024bc  48d0              LDR      r0,|L1.10240|
0024be  f7fffffe          BL       uart_putchar
0024c2  210a              MOVS     r1,#0xa
0024c4  48ce              LDR      r0,|L1.10240|
0024c6  f7fffffe          BL       uart_putchar
0024ca  210a              MOVS     r1,#0xa
0024cc  48cc              LDR      r0,|L1.10240|
0024ce  f7fffffe          BL       uart_putchar
0024d2  210a              MOVS     r1,#0xa
0024d4  48ca              LDR      r0,|L1.10240|
0024d6  f7fffffe          BL       uart_putchar
0024da  210a              MOVS     r1,#0xa
0024dc  48c8              LDR      r0,|L1.10240|
0024de  f7fffffe          BL       uart_putchar
0024e2  210a              MOVS     r1,#0xa
0024e4  48c6              LDR      r0,|L1.10240|
0024e6  f7fffffe          BL       uart_putchar
0024ea  210a              MOVS     r1,#0xa
0024ec  48c4              LDR      r0,|L1.10240|
0024ee  f7fffffe          BL       uart_putchar
;;;683    									//memset(data,0,1000);
;;;684    														//timer counts to wait for characters in uart 1 									
;;;685    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0024f2  bf00              NOP      
                  |L1.9460|
0024f4  49c3              LDR      r1,|L1.10244|
0024f6  48c4              LDR      r0,|L1.10248|
0024f8  f7fffffe          BL       strstr
0024fc  2800              CMP      r0,#0
0024fe  d109              BNE      |L1.9492|
002500  49c2              LDR      r1,|L1.10252|
002502  48c1              LDR      r0,|L1.10248|
002504  f7fffffe          BL       strstr
002508  2800              CMP      r0,#0
00250a  d103              BNE      |L1.9492|
00250c  48c0              LDR      r0,|L1.10256|
00250e  6800              LDR      r0,[r0,#0]  ; tout
002510  2805              CMP      r0,#5
002512  ddef              BLE      |L1.9460|
                  |L1.9492|
;;;686    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;687    									}
;;;688    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002514  f7fffffe          BL       clear
;;;689    									//clear();
;;;690    									memset(data,0,strlen(data));
002518  48be              LDR      r0,|L1.10260|
00251a  f7fffffe          BL       strlen
00251e  4604              MOV      r4,r0
002520  4621              MOV      r1,r4
002522  48bc              LDR      r0,|L1.10260|
002524  f7fffffe          BL       __aeabi_memclr
;;;691    									clear();
002528  f7fffffe          BL       clear
00252c  e140              B        |L1.10160|
                  |L1.9518|
;;;692    
;;;693    								
;;;694    																	
;;;695    																	
;;;696    								//								log_it();								
;;;697    																}else{send_chunk();}													
00252e  f7fffffe          BL       send_chunk
002532  e13d              B        |L1.10160|
                  |L1.9524|
;;;698    								//checks for the sd_data available
;;;699    								}
;;;700    								//con1d=strstr(uart_string_gsm,"OK");
;;;701    								else
;;;702    								{
;;;703    									
;;;704    									
;;;705    									
;;;706    	delay(100);
002534  2064              MOVS     r0,#0x64
002536  f7fffffe          BL       delay
;;;707    		clear();//memset(uart_string_gsm,0,5000);
00253a  f7fffffe          BL       clear
;;;708    	
;;;709    	memset(at_,0,100);
00253e  2164              MOVS     r1,#0x64
002540  48b5              LDR      r0,|L1.10264|
002542  f7fffffe          BL       __aeabi_memclr
;;;710    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002546  48b3              LDR      r0,|L1.10260|
002548  f7fffffe          BL       strlen
00254c  1c44              ADDS     r4,r0,#1
00254e  4623              MOV      r3,r4
002550  4ab2              LDR      r2,|L1.10268|
002552  49ac              LDR      r1,|L1.10244|
002554  3938              SUBS     r1,r1,#0x38
002556  48b0              LDR      r0,|L1.10264|
002558  f7fffffe          BL       __2sprintf
;;;711    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00255c  2005              MOVS     r0,#5
00255e  4bab              LDR      r3,|L1.10252|
002560  461a              MOV      r2,r3
002562  3a70              SUBS     r2,r2,#0x70
002564  a1ae              ADR      r1,|L1.10272|
002566  9000              STR      r0,[sp,#0]
002568  48ab              LDR      r0,|L1.10264|
00256a  f7fffffe          BL       send_SD
;;;712    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;713    //	if(strstr(uart_string_gsm,"ERROR")){
;;;714    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;715    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;716    //	}
;;;717    	
;;;718    clear();	
00256e  f7fffffe          BL       clear
;;;719    									k2=0;									//string array counter for uart 1
002572  2000              MOVS     r0,#0
002574  49ab              LDR      r1,|L1.10276|
002576  6008              STR      r0,[r1,#0]  ; k2
;;;720    									tout=0;	
002578  49a5              LDR      r1,|L1.10256|
00257a  6008              STR      r0,[r1,#0]  ; tout
;;;721    		for(k=0;k<strlen(data);k++)
00257c  49aa              LDR      r1,|L1.10280|
00257e  6008              STR      r0,[r1,#0]  ; k
002580  e00b              B        |L1.9626|
                  |L1.9602|
;;;722    		{
;;;723    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002582  48a4              LDR      r0,|L1.10260|
002584  4aa8              LDR      r2,|L1.10280|
002586  6812              LDR      r2,[r2,#0]  ; k
002588  5c81              LDRB     r1,[r0,r2]
00258a  489d              LDR      r0,|L1.10240|
00258c  f7fffffe          BL       uart_putchar
002590  48a5              LDR      r0,|L1.10280|
002592  6800              LDR      r0,[r0,#0]            ;721  ; k
002594  1c40              ADDS     r0,r0,#1              ;721
002596  49a4              LDR      r1,|L1.10280|
002598  6008              STR      r0,[r1,#0]            ;721  ; k
                  |L1.9626|
00259a  489e              LDR      r0,|L1.10260|
00259c  f7fffffe          BL       strlen
0025a0  49a1              LDR      r1,|L1.10280|
0025a2  6809              LDR      r1,[r1,#0]            ;721  ; k
0025a4  4288              CMP      r0,r1                 ;721
0025a6  d8ec              BHI      |L1.9602|
;;;724    		}	
;;;725    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0025a8  210a              MOVS     r1,#0xa
0025aa  4895              LDR      r0,|L1.10240|
0025ac  f7fffffe          BL       uart_putchar
0025b0  210a              MOVS     r1,#0xa
0025b2  4893              LDR      r0,|L1.10240|
0025b4  f7fffffe          BL       uart_putchar
0025b8  210a              MOVS     r1,#0xa
0025ba  4891              LDR      r0,|L1.10240|
0025bc  f7fffffe          BL       uart_putchar
0025c0  210a              MOVS     r1,#0xa
0025c2  488f              LDR      r0,|L1.10240|
0025c4  f7fffffe          BL       uart_putchar
0025c8  210a              MOVS     r1,#0xa
0025ca  488d              LDR      r0,|L1.10240|
0025cc  f7fffffe          BL       uart_putchar
0025d0  210a              MOVS     r1,#0xa
0025d2  488b              LDR      r0,|L1.10240|
0025d4  f7fffffe          BL       uart_putchar
0025d8  210a              MOVS     r1,#0xa
0025da  4889              LDR      r0,|L1.10240|
0025dc  f7fffffe          BL       uart_putchar
0025e0  210a              MOVS     r1,#0xa
0025e2  4887              LDR      r0,|L1.10240|
0025e4  f7fffffe          BL       uart_putchar
0025e8  210a              MOVS     r1,#0xa
0025ea  4885              LDR      r0,|L1.10240|
0025ec  f7fffffe          BL       uart_putchar
0025f0  210a              MOVS     r1,#0xa
0025f2  4883              LDR      r0,|L1.10240|
0025f4  f7fffffe          BL       uart_putchar
0025f8  210a              MOVS     r1,#0xa
0025fa  4881              LDR      r0,|L1.10240|
0025fc  f7fffffe          BL       uart_putchar
002600  210a              MOVS     r1,#0xa
002602  487f              LDR      r0,|L1.10240|
002604  f7fffffe          BL       uart_putchar
002608  210a              MOVS     r1,#0xa
00260a  487d              LDR      r0,|L1.10240|
00260c  f7fffffe          BL       uart_putchar
002610  210a              MOVS     r1,#0xa
002612  487b              LDR      r0,|L1.10240|
002614  f7fffffe          BL       uart_putchar
002618  210a              MOVS     r1,#0xa
00261a  4879              LDR      r0,|L1.10240|
00261c  f7fffffe          BL       uart_putchar
002620  210a              MOVS     r1,#0xa
002622  4877              LDR      r0,|L1.10240|
002624  f7fffffe          BL       uart_putchar
002628  210a              MOVS     r1,#0xa
00262a  4875              LDR      r0,|L1.10240|
00262c  f7fffffe          BL       uart_putchar
002630  210a              MOVS     r1,#0xa
002632  4873              LDR      r0,|L1.10240|
002634  f7fffffe          BL       uart_putchar
002638  210a              MOVS     r1,#0xa
00263a  4871              LDR      r0,|L1.10240|
00263c  f7fffffe          BL       uart_putchar
002640  210a              MOVS     r1,#0xa
002642  486f              LDR      r0,|L1.10240|
002644  f7fffffe          BL       uart_putchar
002648  210a              MOVS     r1,#0xa
00264a  486d              LDR      r0,|L1.10240|
00264c  f7fffffe          BL       uart_putchar
002650  210a              MOVS     r1,#0xa
002652  486b              LDR      r0,|L1.10240|
002654  f7fffffe          BL       uart_putchar
002658  210a              MOVS     r1,#0xa
00265a  4869              LDR      r0,|L1.10240|
00265c  f7fffffe          BL       uart_putchar
002660  210a              MOVS     r1,#0xa
002662  4867              LDR      r0,|L1.10240|
002664  f7fffffe          BL       uart_putchar
002668  210a              MOVS     r1,#0xa
00266a  4865              LDR      r0,|L1.10240|
00266c  f7fffffe          BL       uart_putchar
002670  210a              MOVS     r1,#0xa
002672  4863              LDR      r0,|L1.10240|
002674  f7fffffe          BL       uart_putchar
002678  210a              MOVS     r1,#0xa
00267a  4861              LDR      r0,|L1.10240|
00267c  f7fffffe          BL       uart_putchar
002680  210a              MOVS     r1,#0xa
002682  485f              LDR      r0,|L1.10240|
002684  f7fffffe          BL       uart_putchar
002688  210a              MOVS     r1,#0xa
00268a  485d              LDR      r0,|L1.10240|
00268c  f7fffffe          BL       uart_putchar
002690  210a              MOVS     r1,#0xa
002692  485b              LDR      r0,|L1.10240|
002694  f7fffffe          BL       uart_putchar
002698  210a              MOVS     r1,#0xa
00269a  4859              LDR      r0,|L1.10240|
00269c  f7fffffe          BL       uart_putchar
0026a0  210a              MOVS     r1,#0xa
0026a2  4857              LDR      r0,|L1.10240|
0026a4  f7fffffe          BL       uart_putchar
0026a8  210a              MOVS     r1,#0xa
0026aa  4855              LDR      r0,|L1.10240|
0026ac  f7fffffe          BL       uart_putchar
0026b0  210a              MOVS     r1,#0xa
0026b2  4853              LDR      r0,|L1.10240|
0026b4  f7fffffe          BL       uart_putchar
0026b8  210a              MOVS     r1,#0xa
0026ba  4851              LDR      r0,|L1.10240|
0026bc  f7fffffe          BL       uart_putchar
0026c0  210a              MOVS     r1,#0xa
0026c2  484f              LDR      r0,|L1.10240|
0026c4  f7fffffe          BL       uart_putchar
0026c8  210a              MOVS     r1,#0xa
0026ca  484d              LDR      r0,|L1.10240|
0026cc  f7fffffe          BL       uart_putchar
0026d0  210a              MOVS     r1,#0xa
0026d2  484b              LDR      r0,|L1.10240|
0026d4  f7fffffe          BL       uart_putchar
0026d8  210a              MOVS     r1,#0xa
0026da  4849              LDR      r0,|L1.10240|
0026dc  f7fffffe          BL       uart_putchar
0026e0  210a              MOVS     r1,#0xa
0026e2  4847              LDR      r0,|L1.10240|
0026e4  f7fffffe          BL       uart_putchar
0026e8  210a              MOVS     r1,#0xa
0026ea  4845              LDR      r0,|L1.10240|
0026ec  f7fffffe          BL       uart_putchar
0026f0  210a              MOVS     r1,#0xa
0026f2  4843              LDR      r0,|L1.10240|
0026f4  f7fffffe          BL       uart_putchar
0026f8  210a              MOVS     r1,#0xa
0026fa  4841              LDR      r0,|L1.10240|
0026fc  f7fffffe          BL       uart_putchar
002700  210a              MOVS     r1,#0xa
002702  483f              LDR      r0,|L1.10240|
002704  f7fffffe          BL       uart_putchar
002708  210a              MOVS     r1,#0xa
00270a  483d              LDR      r0,|L1.10240|
00270c  f7fffffe          BL       uart_putchar
002710  210a              MOVS     r1,#0xa
002712  483b              LDR      r0,|L1.10240|
002714  f7fffffe          BL       uart_putchar
002718  210a              MOVS     r1,#0xa
00271a  4839              LDR      r0,|L1.10240|
00271c  f7fffffe          BL       uart_putchar
002720  210a              MOVS     r1,#0xa
002722  4837              LDR      r0,|L1.10240|
002724  f7fffffe          BL       uart_putchar
002728  210a              MOVS     r1,#0xa
00272a  4835              LDR      r0,|L1.10240|
00272c  f7fffffe          BL       uart_putchar
002730  210a              MOVS     r1,#0xa
002732  4833              LDR      r0,|L1.10240|
002734  f7fffffe          BL       uart_putchar
002738  210a              MOVS     r1,#0xa
00273a  4831              LDR      r0,|L1.10240|
00273c  f7fffffe          BL       uart_putchar
002740  210a              MOVS     r1,#0xa
002742  482f              LDR      r0,|L1.10240|
002744  f7fffffe          BL       uart_putchar
002748  210a              MOVS     r1,#0xa
00274a  482d              LDR      r0,|L1.10240|
00274c  f7fffffe          BL       uart_putchar
002750  210a              MOVS     r1,#0xa
002752  482b              LDR      r0,|L1.10240|
002754  f7fffffe          BL       uart_putchar
002758  210a              MOVS     r1,#0xa
00275a  4829              LDR      r0,|L1.10240|
00275c  f7fffffe          BL       uart_putchar
002760  210a              MOVS     r1,#0xa
002762  4827              LDR      r0,|L1.10240|
002764  f7fffffe          BL       uart_putchar
002768  210a              MOVS     r1,#0xa
00276a  4825              LDR      r0,|L1.10240|
00276c  f7fffffe          BL       uart_putchar
;;;726    									//memset(data,0,1000);
;;;727    														//timer counts to wait for characters in uart 1 									
;;;728    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002770  bf00              NOP      
                  |L1.10098|
002772  4924              LDR      r1,|L1.10244|
002774  4824              LDR      r0,|L1.10248|
002776  f7fffffe          BL       strstr
00277a  2800              CMP      r0,#0
00277c  d109              BNE      |L1.10130|
00277e  4923              LDR      r1,|L1.10252|
002780  4821              LDR      r0,|L1.10248|
002782  f7fffffe          BL       strstr
002786  2800              CMP      r0,#0
002788  d103              BNE      |L1.10130|
00278a  4821              LDR      r0,|L1.10256|
00278c  6800              LDR      r0,[r0,#0]  ; tout
00278e  2805              CMP      r0,#5
002790  ddef              BLE      |L1.10098|
                  |L1.10130|
;;;729    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;730    									}
;;;731    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002792  f7fffffe          BL       clear
;;;732    									//clear();
;;;733    									memset(data,0,strlen(data));
002796  481f              LDR      r0,|L1.10260|
002798  f7fffffe          BL       strlen
00279c  4604              MOV      r4,r0
00279e  4621              MOV      r1,r4
0027a0  481c              LDR      r0,|L1.10260|
0027a2  f7fffffe          BL       __aeabi_memclr
;;;734    									clear();
0027a6  f7fffffe          BL       clear
0027aa  e001              B        |L1.10160|
                  |L1.10156|
;;;735    
;;;736    								
;;;737    									
;;;738    									
;;;739    									
;;;740    								//	log_it();			//otherwize log it					
;;;741    								}
;;;742    
;;;743    																
;;;744    //delay(50);
;;;745    
;;;746    //else{
;;;747    //log_it();}
;;;748    								
;;;749    								
;;;750    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;751    	else
;;;752    	{
;;;753    		send_chunk();
0027ac  f7fffffe          BL       send_chunk
                  |L1.10160|
;;;754    	}		
;;;755    								
;;;756    								
;;;757    								
;;;758    	memset(data,0,strlen(data));	
0027b0  4818              LDR      r0,|L1.10260|
0027b2  f7fffffe          BL       strlen
0027b6  4604              MOV      r4,r0
0027b8  4621              MOV      r1,r4
0027ba  4816              LDR      r0,|L1.10260|
0027bc  f7fffffe          BL       __aeabi_memclr
;;;759    	uart_putchar(UART1_BASE_PTR, 0x1A);
0027c0  211a              MOVS     r1,#0x1a
0027c2  480f              LDR      r0,|L1.10240|
0027c4  f7fffffe          BL       uart_putchar
;;;760    	
;;;761    }
0027c8  bd38              POP      {r3-r5,pc}
;;;762    	
                          ENDP

                  send_tcp2 PROC
;;;777    
;;;778    void send_tcp2()
0027ca  b538              PUSH     {r3-r5,lr}
;;;779    {	
;;;780    memset(stcond1,0,strlen(stcond1));	
0027cc  4817              LDR      r0,|L1.10284|
0027ce  6800              LDR      r0,[r0,#0]  ; stcond1
0027d0  f7fffffe          BL       strlen
0027d4  4604              MOV      r4,r0
0027d6  4621              MOV      r1,r4
0027d8  4814              LDR      r0,|L1.10284|
0027da  6800              LDR      r0,[r0,#0]  ; stcond1
0027dc  f7fffffe          BL       __aeabi_memclr
;;;781    memset(con1d,0,strlen(con1d));	
0027e0  4813              LDR      r0,|L1.10288|
0027e2  6800              LDR      r0,[r0,#0]  ; con1d
0027e4  f7fffffe          BL       strlen
0027e8  4604              MOV      r4,r0
0027ea  4621              MOV      r1,r4
0027ec  4810              LDR      r0,|L1.10288|
0027ee  6800              LDR      r0,[r0,#0]  ; con1d
0027f0  f7fffffe          BL       __aeabi_memclr
;;;782    	
;;;783    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;784    						
;;;785    								cond=mystrstr(uart_string_gsm,'>');
0027f4  213e              MOVS     r1,#0x3e
0027f6  4804              LDR      r0,|L1.10248|
0027f8  f7fffffe          BL       mystrstr
0027fc  490d              LDR      r1,|L1.10292|
0027fe  e01b              B        |L1.10296|
                  |L1.10240|
                          DCD      0x4006b000
                  |L1.10244|
                          DCD      ||.text||+0xd88
                  |L1.10248|
                          DCD      uart_string_gsm
                  |L1.10252|
                          DCD      ||.text||+0x910
                  |L1.10256|
                          DCD      tout
                  |L1.10260|
                          DCD      data
                  |L1.10264|
                          DCD      at_
                  |L1.10268|
                          DCD      drive
                  |L1.10272|
002820  3e00              DCB      ">",0
002822  00                DCB      0
002823  00                DCB      0
                  |L1.10276|
                          DCD      ||k2||
                  |L1.10280|
                          DCD      k
                  |L1.10284|
                          DCD      stcond1
                  |L1.10288|
                          DCD      con1d
                  |L1.10292|
                          DCD      cond
                  |L1.10296|
002838  7008              STRB     r0,[r1,#0]
;;;786    								if(cond)	
00283a  4608              MOV      r0,r1
00283c  7800              LDRB     r0,[r0,#0]  ; cond
00283e  2800              CMP      r0,#0
002840  d07e              BEQ      |L1.10560|
;;;787    								{
;;;788    									
;;;789    									clear();
002842  f7fffffe          BL       clear
;;;790    									memset(uart_string_gsm,0,5000);
002846  49fe              LDR      r1,|L1.11328|
002848  48fe              LDR      r0,|L1.11332|
00284a  f7fffffe          BL       __aeabi_memclr
;;;791    									strcat(data,"\n");
00284e  a1fe              ADR      r1,|L1.11336|
002850  48fe              LDR      r0,|L1.11340|
002852  f7fffffe          BL       strcat
;;;792    									len=strlen(data);
002856  48fd              LDR      r0,|L1.11340|
002858  f7fffffe          BL       strlen
00285c  49fc              LDR      r1,|L1.11344|
00285e  6008              STR      r0,[r1,#0]  ; len
;;;793    									tout=0;
002860  2000              MOVS     r0,#0
002862  49fc              LDR      r1,|L1.11348|
002864  6008              STR      r0,[r1,#0]  ; tout
;;;794    									k2=0;
002866  49fc              LDR      r1,|L1.11352|
002868  6008              STR      r0,[r1,#0]  ; k2
;;;795    									for(k=0;k<len;k++)
00286a  49fc              LDR      r1,|L1.11356|
00286c  6008              STR      r0,[r1,#0]  ; k
00286e  e00b              B        |L1.10376|
                  |L1.10352|
;;;796    									{
;;;797    										uart_putchar(UART1_BASE_PTR, data[k]);
002870  48f6              LDR      r0,|L1.11340|
002872  4afa              LDR      r2,|L1.11356|
002874  6812              LDR      r2,[r2,#0]  ; k
002876  5c81              LDRB     r1,[r0,r2]
002878  48f9              LDR      r0,|L1.11360|
00287a  f7fffffe          BL       uart_putchar
00287e  48f7              LDR      r0,|L1.11356|
002880  6800              LDR      r0,[r0,#0]            ;795  ; k
002882  1c40              ADDS     r0,r0,#1              ;795
002884  49f5              LDR      r1,|L1.11356|
002886  6008              STR      r0,[r1,#0]            ;795  ; k
                  |L1.10376|
002888  48f4              LDR      r0,|L1.11356|
00288a  6800              LDR      r0,[r0,#0]            ;795  ; k
00288c  49f0              LDR      r1,|L1.11344|
00288e  6809              LDR      r1,[r1,#0]            ;795  ; len
002890  4288              CMP      r0,r1                 ;795
002892  dbed              BLT      |L1.10352|
;;;798    									}uart_putchar(UART1_BASE_PTR, 0x1A);
002894  211a              MOVS     r1,#0x1a
002896  48f2              LDR      r0,|L1.11360|
002898  f7fffffe          BL       uart_putchar
;;;799    									do
00289c  bf00              NOP      
                  |L1.10398|
;;;800    																{stcond1=strstr(uart_string_gsm,"SEND OK");
00289e  49f1              LDR      r1,|L1.11364|
0028a0  48e8              LDR      r0,|L1.11332|
0028a2  f7fffffe          BL       strstr
0028a6  49f0              LDR      r1,|L1.11368|
0028a8  6008              STR      r0,[r1,#0]  ; stcond1
;;;801    																	stcond2=strstr(uart_string_gsm, "ERROR");
0028aa  49ee              LDR      r1,|L1.11364|
0028ac  3108              ADDS     r1,r1,#8
0028ae  48e5              LDR      r0,|L1.11332|
0028b0  f7fffffe          BL       strstr
0028b4  49ed              LDR      r1,|L1.11372|
0028b6  6008              STR      r0,[r1,#0]  ; stcond2
;;;802    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0028b8  49ed              LDR      r1,|L1.11376|
0028ba  48e2              LDR      r0,|L1.11332|
0028bc  f7fffffe          BL       strstr
0028c0  49ec              LDR      r1,|L1.11380|
0028c2  6008              STR      r0,[r1,#0]  ; stcond3
;;;803    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0028c4  49e7              LDR      r1,|L1.11364|
0028c6  3120              ADDS     r1,r1,#0x20
0028c8  48de              LDR      r0,|L1.11332|
0028ca  f7fffffe          BL       strstr
0028ce  49ea              LDR      r1,|L1.11384|
0028d0  6008              STR      r0,[r1,#0]  ; stcond4
;;;804    																	
;;;805    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0028d2  48e6              LDR      r0,|L1.11372|
0028d4  6800              LDR      r0,[r0,#0]  ; stcond2
0028d6  2800              CMP      r0,#0
0028d8  d10f              BNE      |L1.10490|
0028da  48e6              LDR      r0,|L1.11380|
0028dc  6800              LDR      r0,[r0,#0]  ; stcond3
0028de  2800              CMP      r0,#0
0028e0  d10b              BNE      |L1.10490|
0028e2  4608              MOV      r0,r1
0028e4  6800              LDR      r0,[r0,#0]  ; stcond4
0028e6  2800              CMP      r0,#0
0028e8  d107              BNE      |L1.10490|
0028ea  48df              LDR      r0,|L1.11368|
0028ec  6800              LDR      r0,[r0,#0]  ; stcond1
0028ee  2800              CMP      r0,#0
0028f0  d103              BNE      |L1.10490|
0028f2  48d8              LDR      r0,|L1.11348|
0028f4  6800              LDR      r0,[r0,#0]  ; tout
0028f6  2804              CMP      r0,#4
0028f8  ddd1              BLE      |L1.10398|
                  |L1.10490|
;;;806    																//delay(10);clear();
;;;807    														uart_putchar(UART1_BASE_PTR,0x1A);
0028fa  211a              MOVS     r1,#0x1a
0028fc  48d8              LDR      r0,|L1.11360|
0028fe  f7fffffe          BL       uart_putchar
;;;808    												//delay(10);
;;;809    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002902  211a              MOVS     r1,#0x1a
002904  48d6              LDR      r0,|L1.11360|
002906  f7fffffe          BL       uart_putchar
00290a  211a              MOVS     r1,#0x1a
00290c  48d4              LDR      r0,|L1.11360|
00290e  f7fffffe          BL       uart_putchar
002912  211a              MOVS     r1,#0x1a
002914  48d2              LDR      r0,|L1.11360|
002916  f7fffffe          BL       uart_putchar
;;;810    						
;;;811    									
;;;812    									
;;;813    									
;;;814    									
;;;815    									
;;;816    									
;;;817    									
;;;818    
;;;819    //									for(k=0;k<len;k++)
;;;820    //									{
;;;821    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;822    //									}
;;;823    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;824    
;;;825    //									
;;;826    //													k2=0;									//string array counter for uart 1
;;;827    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;828    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;829    //																{
;;;830    //																	timeout--;
;;;831    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;832    //																}
;;;833    																if(flagch==1){		int_erval=temp;flagch=0;	}
00291a  48d8              LDR      r0,|L1.11388|
00291c  6800              LDR      r0,[r0,#0]  ; flagch
00291e  2801              CMP      r0,#1
002920  d106              BNE      |L1.10544|
002922  48d7              LDR      r0,|L1.11392|
002924  6800              LDR      r0,[r0,#0]  ; temp
002926  49d7              LDR      r1,|L1.11396|
002928  6008              STR      r0,[r1,#0]  ; int_erval
00292a  2000              MOVS     r0,#0
00292c  49d3              LDR      r1,|L1.11388|
00292e  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.10544|
;;;834    delay(50);
002930  2032              MOVS     r0,#0x32
002932  f7fffffe          BL       delay
;;;835    stcond1=strstr(uart_string_gsm,"SEND OK");								
002936  49cb              LDR      r1,|L1.11364|
002938  48c2              LDR      r0,|L1.11332|
00293a  f7fffffe          BL       strstr
00293e  e000              B        |L1.10562|
                  |L1.10560|
002940  e001              B        |L1.10566|
                  |L1.10562|
002942  49c9              LDR      r1,|L1.11368|
002944  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.10566|
;;;836    								}
;;;837    //else{
;;;838    //log_it();
;;;839    //}
;;;840    
;;;841    
;;;842    if(!stcond1) // if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
002946  48c8              LDR      r0,|L1.11368|
002948  6800              LDR      r0,[r0,#0]  ; stcond1
00294a  2800              CMP      r0,#0
00294c  d001              BEQ      |L1.10578|
00294e  f000ff28          BL       |L1.14242|
                  |L1.10578|
;;;843    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002952  211a              MOVS     r1,#0x1a
002954  48c2              LDR      r0,|L1.11360|
002956  f7fffffe          BL       uart_putchar
00295a  f7fffffe          BL       clear
00295e  200a              MOVS     r0,#0xa
002960  f7fffffe          BL       delay
;;;844    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002964  211a              MOVS     r1,#0x1a
002966  48be              LDR      r0,|L1.11360|
002968  f7fffffe          BL       uart_putchar
00296c  f7fffffe          BL       clear
002970  200a              MOVS     r0,#0xa
002972  f7fffffe          BL       delay
;;;845    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002976  211a              MOVS     r1,#0x1a
002978  48b9              LDR      r0,|L1.11360|
00297a  f7fffffe          BL       uart_putchar
00297e  f7fffffe          BL       clear
002982  200a              MOVS     r0,#0xa
002984  f7fffffe          BL       delay
;;;846    						//	remove_all_chars(data, '\n', '\n');
;;;847    	
;;;848    	//	strcat(data,"CH\n");	
;;;849    	
;;;850    	
;;;851    	delay(100);
002988  2064              MOVS     r0,#0x64
00298a  f7fffffe          BL       delay
;;;852    		clear();//memset(uart_string_gsm,0,5000);
00298e  f7fffffe          BL       clear
;;;853    	
;;;854    	memset(at_,0,100);
002992  2164              MOVS     r1,#0x64
002994  48bc              LDR      r0,|L1.11400|
002996  f7fffffe          BL       __aeabi_memclr
;;;855    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00299a  48ac              LDR      r0,|L1.11340|
00299c  f7fffffe          BL       strlen
0029a0  1c44              ADDS     r4,r0,#1
0029a2  4623              MOV      r3,r4
0029a4  4ab9              LDR      r2,|L1.11404|
0029a6  49ba              LDR      r1,|L1.11408|
0029a8  48b7              LDR      r0,|L1.11400|
0029aa  f7fffffe          BL       __2sprintf
;;;856    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0029ae  2005              MOVS     r0,#5
0029b0  4bac              LDR      r3,|L1.11364|
0029b2  3308              ADDS     r3,r3,#8
0029b4  461a              MOV      r2,r3
0029b6  3a70              SUBS     r2,r2,#0x70
0029b8  a1b6              ADR      r1,|L1.11412|
0029ba  9000              STR      r0,[sp,#0]
0029bc  48b2              LDR      r0,|L1.11400|
0029be  f7fffffe          BL       send_SD
;;;857    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;858    //	if(strstr(uart_string_gsm,"ERROR")){
;;;859    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;860    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;861    //	}
;;;862    	
;;;863    clear();	
0029c2  f7fffffe          BL       clear
;;;864    									k2=0;									//string array counter for uart 1
0029c6  2000              MOVS     r0,#0
0029c8  49a3              LDR      r1,|L1.11352|
0029ca  6008              STR      r0,[r1,#0]  ; k2
;;;865    									tout=0;	
0029cc  49a1              LDR      r1,|L1.11348|
0029ce  6008              STR      r0,[r1,#0]  ; tout
;;;866    		for(k=0;k<strlen(data);k++)
0029d0  49a2              LDR      r1,|L1.11356|
0029d2  6008              STR      r0,[r1,#0]  ; k
0029d4  e00b              B        |L1.10734|
                  |L1.10710|
;;;867    		{
;;;868    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0029d6  489d              LDR      r0,|L1.11340|
0029d8  4aa0              LDR      r2,|L1.11356|
0029da  6812              LDR      r2,[r2,#0]  ; k
0029dc  5c81              LDRB     r1,[r0,r2]
0029de  48a0              LDR      r0,|L1.11360|
0029e0  f7fffffe          BL       uart_putchar
0029e4  489d              LDR      r0,|L1.11356|
0029e6  6800              LDR      r0,[r0,#0]            ;866  ; k
0029e8  1c40              ADDS     r0,r0,#1              ;866
0029ea  499c              LDR      r1,|L1.11356|
0029ec  6008              STR      r0,[r1,#0]            ;866  ; k
                  |L1.10734|
0029ee  4897              LDR      r0,|L1.11340|
0029f0  f7fffffe          BL       strlen
0029f4  4999              LDR      r1,|L1.11356|
0029f6  6809              LDR      r1,[r1,#0]            ;866  ; k
0029f8  4288              CMP      r0,r1                 ;866
0029fa  d8ec              BHI      |L1.10710|
;;;869    		}	
;;;870    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0029fc  210a              MOVS     r1,#0xa
0029fe  4898              LDR      r0,|L1.11360|
002a00  f7fffffe          BL       uart_putchar
002a04  210a              MOVS     r1,#0xa
002a06  4896              LDR      r0,|L1.11360|
002a08  f7fffffe          BL       uart_putchar
002a0c  210a              MOVS     r1,#0xa
002a0e  4894              LDR      r0,|L1.11360|
002a10  f7fffffe          BL       uart_putchar
002a14  210a              MOVS     r1,#0xa
002a16  4892              LDR      r0,|L1.11360|
002a18  f7fffffe          BL       uart_putchar
002a1c  210a              MOVS     r1,#0xa
002a1e  4890              LDR      r0,|L1.11360|
002a20  f7fffffe          BL       uart_putchar
002a24  210a              MOVS     r1,#0xa
002a26  488e              LDR      r0,|L1.11360|
002a28  f7fffffe          BL       uart_putchar
002a2c  210a              MOVS     r1,#0xa
002a2e  488c              LDR      r0,|L1.11360|
002a30  f7fffffe          BL       uart_putchar
002a34  210a              MOVS     r1,#0xa
002a36  488a              LDR      r0,|L1.11360|
002a38  f7fffffe          BL       uart_putchar
002a3c  210a              MOVS     r1,#0xa
002a3e  4888              LDR      r0,|L1.11360|
002a40  f7fffffe          BL       uart_putchar
002a44  210a              MOVS     r1,#0xa
002a46  4886              LDR      r0,|L1.11360|
002a48  f7fffffe          BL       uart_putchar
002a4c  210a              MOVS     r1,#0xa
002a4e  4884              LDR      r0,|L1.11360|
002a50  f7fffffe          BL       uart_putchar
002a54  210a              MOVS     r1,#0xa
002a56  4882              LDR      r0,|L1.11360|
002a58  f7fffffe          BL       uart_putchar
002a5c  210a              MOVS     r1,#0xa
002a5e  4880              LDR      r0,|L1.11360|
002a60  f7fffffe          BL       uart_putchar
002a64  210a              MOVS     r1,#0xa
002a66  487e              LDR      r0,|L1.11360|
002a68  f7fffffe          BL       uart_putchar
002a6c  210a              MOVS     r1,#0xa
002a6e  487c              LDR      r0,|L1.11360|
002a70  f7fffffe          BL       uart_putchar
002a74  210a              MOVS     r1,#0xa
002a76  487a              LDR      r0,|L1.11360|
002a78  f7fffffe          BL       uart_putchar
002a7c  210a              MOVS     r1,#0xa
002a7e  4878              LDR      r0,|L1.11360|
002a80  f7fffffe          BL       uart_putchar
002a84  210a              MOVS     r1,#0xa
002a86  4876              LDR      r0,|L1.11360|
002a88  f7fffffe          BL       uart_putchar
002a8c  210a              MOVS     r1,#0xa
002a8e  4874              LDR      r0,|L1.11360|
002a90  f7fffffe          BL       uart_putchar
002a94  210a              MOVS     r1,#0xa
002a96  4872              LDR      r0,|L1.11360|
002a98  f7fffffe          BL       uart_putchar
002a9c  210a              MOVS     r1,#0xa
002a9e  4870              LDR      r0,|L1.11360|
002aa0  f7fffffe          BL       uart_putchar
002aa4  210a              MOVS     r1,#0xa
002aa6  486e              LDR      r0,|L1.11360|
002aa8  f7fffffe          BL       uart_putchar
002aac  210a              MOVS     r1,#0xa
002aae  486c              LDR      r0,|L1.11360|
002ab0  f7fffffe          BL       uart_putchar
002ab4  210a              MOVS     r1,#0xa
002ab6  486a              LDR      r0,|L1.11360|
002ab8  f7fffffe          BL       uart_putchar
002abc  210a              MOVS     r1,#0xa
002abe  4868              LDR      r0,|L1.11360|
002ac0  f7fffffe          BL       uart_putchar
002ac4  210a              MOVS     r1,#0xa
002ac6  4866              LDR      r0,|L1.11360|
002ac8  f7fffffe          BL       uart_putchar
002acc  210a              MOVS     r1,#0xa
002ace  4864              LDR      r0,|L1.11360|
002ad0  f7fffffe          BL       uart_putchar
002ad4  210a              MOVS     r1,#0xa
002ad6  4862              LDR      r0,|L1.11360|
002ad8  f7fffffe          BL       uart_putchar
002adc  210a              MOVS     r1,#0xa
002ade  4860              LDR      r0,|L1.11360|
002ae0  f7fffffe          BL       uart_putchar
002ae4  210a              MOVS     r1,#0xa
002ae6  485e              LDR      r0,|L1.11360|
002ae8  f7fffffe          BL       uart_putchar
002aec  210a              MOVS     r1,#0xa
002aee  485c              LDR      r0,|L1.11360|
002af0  f7fffffe          BL       uart_putchar
002af4  210a              MOVS     r1,#0xa
002af6  485a              LDR      r0,|L1.11360|
002af8  f7fffffe          BL       uart_putchar
002afc  210a              MOVS     r1,#0xa
002afe  4858              LDR      r0,|L1.11360|
002b00  f7fffffe          BL       uart_putchar
002b04  210a              MOVS     r1,#0xa
002b06  4856              LDR      r0,|L1.11360|
002b08  f7fffffe          BL       uart_putchar
002b0c  210a              MOVS     r1,#0xa
002b0e  4854              LDR      r0,|L1.11360|
002b10  f7fffffe          BL       uart_putchar
002b14  210a              MOVS     r1,#0xa
002b16  4852              LDR      r0,|L1.11360|
002b18  f7fffffe          BL       uart_putchar
002b1c  210a              MOVS     r1,#0xa
002b1e  4850              LDR      r0,|L1.11360|
002b20  f7fffffe          BL       uart_putchar
002b24  210a              MOVS     r1,#0xa
002b26  484e              LDR      r0,|L1.11360|
002b28  f7fffffe          BL       uart_putchar
002b2c  210a              MOVS     r1,#0xa
002b2e  484c              LDR      r0,|L1.11360|
002b30  f7fffffe          BL       uart_putchar
002b34  210a              MOVS     r1,#0xa
002b36  484a              LDR      r0,|L1.11360|
002b38  f7fffffe          BL       uart_putchar
002b3c  210a              MOVS     r1,#0xa
002b3e  4848              LDR      r0,|L1.11360|
002b40  f7fffffe          BL       uart_putchar
002b44  210a              MOVS     r1,#0xa
002b46  4846              LDR      r0,|L1.11360|
002b48  f7fffffe          BL       uart_putchar
002b4c  210a              MOVS     r1,#0xa
002b4e  4844              LDR      r0,|L1.11360|
002b50  f7fffffe          BL       uart_putchar
002b54  210a              MOVS     r1,#0xa
002b56  4842              LDR      r0,|L1.11360|
002b58  f7fffffe          BL       uart_putchar
002b5c  210a              MOVS     r1,#0xa
002b5e  4840              LDR      r0,|L1.11360|
002b60  f7fffffe          BL       uart_putchar
002b64  210a              MOVS     r1,#0xa
002b66  483e              LDR      r0,|L1.11360|
002b68  f7fffffe          BL       uart_putchar
002b6c  210a              MOVS     r1,#0xa
002b6e  483c              LDR      r0,|L1.11360|
002b70  f7fffffe          BL       uart_putchar
002b74  210a              MOVS     r1,#0xa
002b76  483a              LDR      r0,|L1.11360|
002b78  f7fffffe          BL       uart_putchar
002b7c  210a              MOVS     r1,#0xa
002b7e  4838              LDR      r0,|L1.11360|
002b80  f7fffffe          BL       uart_putchar
002b84  210a              MOVS     r1,#0xa
002b86  4836              LDR      r0,|L1.11360|
002b88  f7fffffe          BL       uart_putchar
002b8c  210a              MOVS     r1,#0xa
002b8e  4834              LDR      r0,|L1.11360|
002b90  f7fffffe          BL       uart_putchar
002b94  210a              MOVS     r1,#0xa
002b96  4832              LDR      r0,|L1.11360|
002b98  f7fffffe          BL       uart_putchar
002b9c  210a              MOVS     r1,#0xa
002b9e  4830              LDR      r0,|L1.11360|
002ba0  f7fffffe          BL       uart_putchar
002ba4  210a              MOVS     r1,#0xa
002ba6  482e              LDR      r0,|L1.11360|
002ba8  f7fffffe          BL       uart_putchar
002bac  210a              MOVS     r1,#0xa
002bae  482c              LDR      r0,|L1.11360|
002bb0  f7fffffe          BL       uart_putchar
002bb4  210a              MOVS     r1,#0xa
002bb6  482a              LDR      r0,|L1.11360|
002bb8  f7fffffe          BL       uart_putchar
002bbc  210a              MOVS     r1,#0xa
002bbe  4828              LDR      r0,|L1.11360|
002bc0  f7fffffe          BL       uart_putchar
;;;871    									//memset(data,0,1000);
;;;872    														//timer counts to wait for characters in uart 1 									
;;;873    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002bc4  bf00              NOP      
                  |L1.11206|
002bc6  4932              LDR      r1,|L1.11408|
002bc8  3138              ADDS     r1,r1,#0x38
002bca  481e              LDR      r0,|L1.11332|
002bcc  f7fffffe          BL       strstr
002bd0  2800              CMP      r0,#0
002bd2  d10a              BNE      |L1.11242|
002bd4  4923              LDR      r1,|L1.11364|
002bd6  3108              ADDS     r1,r1,#8
002bd8  481a              LDR      r0,|L1.11332|
002bda  f7fffffe          BL       strstr
002bde  2800              CMP      r0,#0
002be0  d103              BNE      |L1.11242|
002be2  481c              LDR      r0,|L1.11348|
002be4  6800              LDR      r0,[r0,#0]  ; tout
002be6  2805              CMP      r0,#5
002be8  dded              BLE      |L1.11206|
                  |L1.11242|
;;;874    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;875    									}
;;;876    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002bea  f7fffffe          BL       clear
;;;877    									//clear();
;;;878    									memset(data,0,strlen(data));
002bee  4817              LDR      r0,|L1.11340|
002bf0  f7fffffe          BL       strlen
002bf4  4604              MOV      r4,r0
002bf6  4621              MOV      r1,r4
002bf8  4814              LDR      r0,|L1.11340|
002bfa  f7fffffe          BL       __aeabi_memclr
;;;879    									clear();
002bfe  f7fffffe          BL       clear
;;;880    
;;;881    								
;;;882    	
;;;883    	
;;;884    	
;;;885    	//	log_it();		
;;;886    		memset(data,0,strlen(data));	
002c02  4812              LDR      r0,|L1.11340|
002c04  f7fffffe          BL       strlen
002c08  4604              MOV      r4,r0
002c0a  4621              MOV      r1,r4
002c0c  480f              LDR      r0,|L1.11340|
002c0e  f7fffffe          BL       __aeabi_memclr
;;;887    									GPS_COLLECT();
002c12  f7fffffe          BL       GPS_COLLECT
;;;888    									strcat(data,"CH\n");	
002c16  491e              LDR      r1,|L1.11408|
002c18  390c              SUBS     r1,r1,#0xc
002c1a  480c              LDR      r0,|L1.11340|
002c1c  f7fffffe          BL       strcat
;;;889    				
;;;890    					   	if(flagch!=1){
002c20  4816              LDR      r0,|L1.11388|
002c22  6800              LDR      r0,[r0,#0]  ; flagch
002c24  2801              CMP      r0,#1
002c26  d009              BEQ      |L1.11324|
;;;891    							temp=int_erval;				
002c28  4816              LDR      r0,|L1.11396|
002c2a  6800              LDR      r0,[r0,#0]  ; int_erval
002c2c  4914              LDR      r1,|L1.11392|
002c2e  6008              STR      r0,[r1,#0]  ; temp
;;;892    							int_erval=4;
002c30  2004              MOVS     r0,#4
002c32  4914              LDR      r1,|L1.11396|
002c34  6008              STR      r0,[r1,#0]  ; int_erval
;;;893    							flagch=1;}
002c36  2001              MOVS     r0,#1
002c38  4910              LDR      r1,|L1.11388|
002c3a  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.11324|
;;;894    							clear();	
002c3c  e02c              B        |L1.11416|
002c3e  0000              DCW      0x0000
                  |L1.11328|
                          DCD      0x00001388
                  |L1.11332|
                          DCD      uart_string_gsm
                  |L1.11336|
002c48  0a00              DCB      "\n",0
002c4a  00                DCB      0
002c4b  00                DCB      0
                  |L1.11340|
                          DCD      data
                  |L1.11344|
                          DCD      len
                  |L1.11348|
                          DCD      tout
                  |L1.11352|
                          DCD      ||k2||
                  |L1.11356|
                          DCD      k
                  |L1.11360|
                          DCD      0x4006b000
                  |L1.11364|
                          DCD      ||.text||+0x908
                  |L1.11368|
                          DCD      stcond1
                  |L1.11372|
                          DCD      stcond2
                  |L1.11376|
                          DCD      ||.text||+0x128c
                  |L1.11380|
                          DCD      stcond3
                  |L1.11384|
                          DCD      stcond4
                  |L1.11388|
                          DCD      flagch
                  |L1.11392|
                          DCD      temp
                  |L1.11396|
                          DCD      int_erval
                  |L1.11400|
                          DCD      at_
                  |L1.11404|
                          DCD      drive
                  |L1.11408|
                          DCD      ||.text||+0xd50
                  |L1.11412|
002c94  3e00              DCB      ">",0
002c96  00                DCB      0
002c97  00                DCB      0
                  |L1.11416|
002c98  f7fffffe          BL       clear
;;;895    
;;;896    
;;;897    //**************************************tcp_initialization();********************************//
;;;898    
;;;899    	
;;;900    msg_sim800(); 
002c9c  f7fffffe          BL       msg_sim800
;;;901    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
002ca0  2005              MOVS     r0,#5
002ca2  4bfe              LDR      r3,|L1.12444|
002ca4  461a              MOV      r2,r3
002ca6  3a70              SUBS     r2,r2,#0x70
002ca8  a1fd              ADR      r1,|L1.12448|
002caa  9000              STR      r0,[sp,#0]
002cac  48fd              LDR      r0,|L1.12452|
002cae  f7fffffe          BL       send_GSM
;;;902    delay(100);
002cb2  2064              MOVS     r0,#0x64
002cb4  f7fffffe          BL       delay
;;;903    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
002cb8  2004              MOVS     r0,#4
002cba  4bf8              LDR      r3,|L1.12444|
002cbc  4af9              LDR      r2,|L1.12452|
002cbe  3210              ADDS     r2,r2,#0x10
002cc0  a1f7              ADR      r1,|L1.12448|
002cc2  9000              STR      r0,[sp,#0]
002cc4  4610              MOV      r0,r2
002cc6  3014              ADDS     r0,r0,#0x14
002cc8  f7fffffe          BL       send_GSM
;;;904    GPS_COLLECT2();
002ccc  f7fffffe          BL       GPS_COLLECT2
;;;905    strcat(data,"CH\n");		
002cd0  49f4              LDR      r1,|L1.12452|
002cd2  3960              SUBS     r1,r1,#0x60
002cd4  48f4              LDR      r0,|L1.12456|
002cd6  f7fffffe          BL       strcat
;;;906    GPS_COLLECT2();
002cda  f7fffffe          BL       GPS_COLLECT2
;;;907    strcat(data,"CH\n");	
002cde  49f1              LDR      r1,|L1.12452|
002ce0  3960              SUBS     r1,r1,#0x60
002ce2  48f1              LDR      r0,|L1.12456|
002ce4  f7fffffe          BL       strcat
;;;908    GPS_COLLECT2();
002ce8  f7fffffe          BL       GPS_COLLECT2
;;;909    strcat(data,"CH\n");
002cec  49ed              LDR      r1,|L1.12452|
002cee  3960              SUBS     r1,r1,#0x60
002cf0  48ed              LDR      r0,|L1.12456|
002cf2  f7fffffe          BL       strcat
;;;910    cond201=(strstr(uart_string_gsm, "OK"));
002cf6  a1ea              ADR      r1,|L1.12448|
002cf8  48ec              LDR      r0,|L1.12460|
002cfa  f7fffffe          BL       strstr
002cfe  49ec              LDR      r1,|L1.12464|
002d00  6008              STR      r0,[r1,#0]  ; cond201
;;;911    cond200=(strstr(uart_string_gsm, "ERROR"));
002d02  49e6              LDR      r1,|L1.12444|
002d04  48e9              LDR      r0,|L1.12460|
002d06  f7fffffe          BL       strstr
002d0a  49ea              LDR      r1,|L1.12468|
002d0c  6008              STR      r0,[r1,#0]  ; cond200
;;;912    if((!(cond201|| cond200 ))  && sleep_flag != 1)
002d0e  48e8              LDR      r0,|L1.12464|
002d10  6800              LDR      r0,[r0,#0]  ; cond201
002d12  2800              CMP      r0,#0
                  |L1.11540|
002d14  d17e              BNE      |L1.11796|
002d16  4608              MOV      r0,r1
002d18  6800              LDR      r0,[r0,#0]  ; cond200
002d1a  2800              CMP      r0,#0
002d1c  d1fa              BNE      |L1.11540|
002d1e  48e6              LDR      r0,|L1.12472|
002d20  6800              LDR      r0,[r0,#0]  ; sleep_flag
002d22  2801              CMP      r0,#1
002d24  d076              BEQ      |L1.11796|
;;;913    {
;;;914    delay(100);
002d26  2064              MOVS     r0,#0x64
002d28  f7fffffe          BL       delay
;;;915    clear();//memset(uart_string_gsm,0,5000);
002d2c  f7fffffe          BL       clear
;;;916    memset(at_,0,100);
002d30  2164              MOVS     r1,#0x64
002d32  48e2              LDR      r0,|L1.12476|
002d34  f7fffffe          BL       __aeabi_memclr
;;;917    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002d38  48db              LDR      r0,|L1.12456|
002d3a  f7fffffe          BL       strlen
002d3e  1c44              ADDS     r4,r0,#1
002d40  4623              MOV      r3,r4
002d42  4adf              LDR      r2,|L1.12480|
002d44  49d7              LDR      r1,|L1.12452|
002d46  3954              SUBS     r1,r1,#0x54
002d48  48dc              LDR      r0,|L1.12476|
002d4a  f7fffffe          BL       __2sprintf
;;;918    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002d4e  2005              MOVS     r0,#5
002d50  4bd2              LDR      r3,|L1.12444|
002d52  461a              MOV      r2,r3
002d54  3a70              SUBS     r2,r2,#0x70
002d56  a1db              ADR      r1,|L1.12484|
002d58  9000              STR      r0,[sp,#0]
002d5a  48d8              LDR      r0,|L1.12476|
002d5c  f7fffffe          BL       send_SD
;;;919    clear();	
002d60  f7fffffe          BL       clear
;;;920    k2=0;									//string array counter for uart 1
002d64  2000              MOVS     r0,#0
002d66  49d8              LDR      r1,|L1.12488|
002d68  6008              STR      r0,[r1,#0]  ; k2
;;;921    tout=0;	
002d6a  49d8              LDR      r1,|L1.12492|
002d6c  6008              STR      r0,[r1,#0]  ; tout
;;;922    for(k=0;k<strlen(data);k++)
002d6e  49d8              LDR      r1,|L1.12496|
002d70  6008              STR      r0,[r1,#0]  ; k
002d72  e00b              B        |L1.11660|
                  |L1.11636|
;;;923    {
;;;924    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002d74  48cc              LDR      r0,|L1.12456|
002d76  4ad6              LDR      r2,|L1.12496|
002d78  6812              LDR      r2,[r2,#0]  ; k
002d7a  5c81              LDRB     r1,[r0,r2]
002d7c  48d5              LDR      r0,|L1.12500|
002d7e  f7fffffe          BL       uart_putchar
002d82  48d3              LDR      r0,|L1.12496|
002d84  6800              LDR      r0,[r0,#0]            ;922  ; k
002d86  1c40              ADDS     r0,r0,#1              ;922
002d88  49d1              LDR      r1,|L1.12496|
002d8a  6008              STR      r0,[r1,#0]            ;922  ; k
                  |L1.11660|
002d8c  48c6              LDR      r0,|L1.12456|
002d8e  f7fffffe          BL       strlen
002d92  49cf              LDR      r1,|L1.12496|
002d94  6809              LDR      r1,[r1,#0]            ;922  ; k
002d96  4288              CMP      r0,r1                 ;922
002d98  d8ec              BHI      |L1.11636|
;;;925    }	
;;;926    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002d9a  210a              MOVS     r1,#0xa
002d9c  48cd              LDR      r0,|L1.12500|
002d9e  f7fffffe          BL       uart_putchar
002da2  210a              MOVS     r1,#0xa
002da4  48cb              LDR      r0,|L1.12500|
002da6  f7fffffe          BL       uart_putchar
002daa  210a              MOVS     r1,#0xa
002dac  48c9              LDR      r0,|L1.12500|
002dae  f7fffffe          BL       uart_putchar
002db2  210a              MOVS     r1,#0xa
002db4  48c7              LDR      r0,|L1.12500|
002db6  f7fffffe          BL       uart_putchar
002dba  210a              MOVS     r1,#0xa
002dbc  48c5              LDR      r0,|L1.12500|
002dbe  f7fffffe          BL       uart_putchar
002dc2  210a              MOVS     r1,#0xa
002dc4  48c3              LDR      r0,|L1.12500|
002dc6  f7fffffe          BL       uart_putchar
002dca  210a              MOVS     r1,#0xa
002dcc  48c1              LDR      r0,|L1.12500|
002dce  f7fffffe          BL       uart_putchar
002dd2  210a              MOVS     r1,#0xa
002dd4  48bf              LDR      r0,|L1.12500|
002dd6  f7fffffe          BL       uart_putchar
002dda  210a              MOVS     r1,#0xa
002ddc  48bd              LDR      r0,|L1.12500|
002dde  f7fffffe          BL       uart_putchar
002de2  210a              MOVS     r1,#0xa
002de4  48bb              LDR      r0,|L1.12500|
002de6  f7fffffe          BL       uart_putchar
002dea  210a              MOVS     r1,#0xa
002dec  48b9              LDR      r0,|L1.12500|
002dee  f7fffffe          BL       uart_putchar
002df2  210a              MOVS     r1,#0xa
002df4  48b7              LDR      r0,|L1.12500|
002df6  f7fffffe          BL       uart_putchar
002dfa  210a              MOVS     r1,#0xa
002dfc  48b5              LDR      r0,|L1.12500|
002dfe  f7fffffe          BL       uart_putchar
002e02  210a              MOVS     r1,#0xa
002e04  48b3              LDR      r0,|L1.12500|
002e06  f7fffffe          BL       uart_putchar
002e0a  210a              MOVS     r1,#0xa
002e0c  48b1              LDR      r0,|L1.12500|
002e0e  f7fffffe          BL       uart_putchar
002e12  e000              B        |L1.11798|
                  |L1.11796|
002e14  e0d1              B        |L1.12218|
                  |L1.11798|
002e16  210a              MOVS     r1,#0xa
002e18  48ae              LDR      r0,|L1.12500|
002e1a  f7fffffe          BL       uart_putchar
002e1e  210a              MOVS     r1,#0xa
002e20  48ac              LDR      r0,|L1.12500|
002e22  f7fffffe          BL       uart_putchar
002e26  210a              MOVS     r1,#0xa
002e28  48aa              LDR      r0,|L1.12500|
002e2a  f7fffffe          BL       uart_putchar
002e2e  210a              MOVS     r1,#0xa
002e30  48a8              LDR      r0,|L1.12500|
002e32  f7fffffe          BL       uart_putchar
002e36  210a              MOVS     r1,#0xa
002e38  48a6              LDR      r0,|L1.12500|
002e3a  f7fffffe          BL       uart_putchar
002e3e  210a              MOVS     r1,#0xa
002e40  48a4              LDR      r0,|L1.12500|
002e42  f7fffffe          BL       uart_putchar
002e46  210a              MOVS     r1,#0xa
002e48  48a2              LDR      r0,|L1.12500|
002e4a  f7fffffe          BL       uart_putchar
002e4e  210a              MOVS     r1,#0xa
002e50  48a0              LDR      r0,|L1.12500|
002e52  f7fffffe          BL       uart_putchar
002e56  210a              MOVS     r1,#0xa
002e58  489e              LDR      r0,|L1.12500|
002e5a  f7fffffe          BL       uart_putchar
002e5e  210a              MOVS     r1,#0xa
002e60  489c              LDR      r0,|L1.12500|
002e62  f7fffffe          BL       uart_putchar
002e66  210a              MOVS     r1,#0xa
002e68  489a              LDR      r0,|L1.12500|
002e6a  f7fffffe          BL       uart_putchar
002e6e  210a              MOVS     r1,#0xa
002e70  4898              LDR      r0,|L1.12500|
002e72  f7fffffe          BL       uart_putchar
002e76  210a              MOVS     r1,#0xa
002e78  4896              LDR      r0,|L1.12500|
002e7a  f7fffffe          BL       uart_putchar
002e7e  210a              MOVS     r1,#0xa
002e80  4894              LDR      r0,|L1.12500|
002e82  f7fffffe          BL       uart_putchar
002e86  210a              MOVS     r1,#0xa
002e88  4892              LDR      r0,|L1.12500|
002e8a  f7fffffe          BL       uart_putchar
002e8e  210a              MOVS     r1,#0xa
002e90  4890              LDR      r0,|L1.12500|
002e92  f7fffffe          BL       uart_putchar
002e96  210a              MOVS     r1,#0xa
002e98  488e              LDR      r0,|L1.12500|
002e9a  f7fffffe          BL       uart_putchar
002e9e  210a              MOVS     r1,#0xa
002ea0  488c              LDR      r0,|L1.12500|
002ea2  f7fffffe          BL       uart_putchar
002ea6  210a              MOVS     r1,#0xa
002ea8  488a              LDR      r0,|L1.12500|
002eaa  f7fffffe          BL       uart_putchar
002eae  210a              MOVS     r1,#0xa
002eb0  4888              LDR      r0,|L1.12500|
002eb2  f7fffffe          BL       uart_putchar
002eb6  210a              MOVS     r1,#0xa
002eb8  4886              LDR      r0,|L1.12500|
002eba  f7fffffe          BL       uart_putchar
002ebe  210a              MOVS     r1,#0xa
002ec0  4884              LDR      r0,|L1.12500|
002ec2  f7fffffe          BL       uart_putchar
002ec6  210a              MOVS     r1,#0xa
002ec8  4882              LDR      r0,|L1.12500|
002eca  f7fffffe          BL       uart_putchar
002ece  210a              MOVS     r1,#0xa
002ed0  4880              LDR      r0,|L1.12500|
002ed2  f7fffffe          BL       uart_putchar
002ed6  210a              MOVS     r1,#0xa
002ed8  487e              LDR      r0,|L1.12500|
002eda  f7fffffe          BL       uart_putchar
002ede  210a              MOVS     r1,#0xa
002ee0  487c              LDR      r0,|L1.12500|
002ee2  f7fffffe          BL       uart_putchar
002ee6  210a              MOVS     r1,#0xa
002ee8  487a              LDR      r0,|L1.12500|
002eea  f7fffffe          BL       uart_putchar
002eee  210a              MOVS     r1,#0xa
002ef0  4878              LDR      r0,|L1.12500|
002ef2  f7fffffe          BL       uart_putchar
002ef6  210a              MOVS     r1,#0xa
002ef8  4876              LDR      r0,|L1.12500|
002efa  f7fffffe          BL       uart_putchar
002efe  210a              MOVS     r1,#0xa
002f00  4874              LDR      r0,|L1.12500|
002f02  f7fffffe          BL       uart_putchar
002f06  210a              MOVS     r1,#0xa
002f08  4872              LDR      r0,|L1.12500|
002f0a  f7fffffe          BL       uart_putchar
002f0e  210a              MOVS     r1,#0xa
002f10  4870              LDR      r0,|L1.12500|
002f12  f7fffffe          BL       uart_putchar
002f16  210a              MOVS     r1,#0xa
002f18  486e              LDR      r0,|L1.12500|
002f1a  f7fffffe          BL       uart_putchar
002f1e  210a              MOVS     r1,#0xa
002f20  486c              LDR      r0,|L1.12500|
002f22  f7fffffe          BL       uart_putchar
002f26  210a              MOVS     r1,#0xa
002f28  486a              LDR      r0,|L1.12500|
002f2a  f7fffffe          BL       uart_putchar
002f2e  210a              MOVS     r1,#0xa
002f30  4868              LDR      r0,|L1.12500|
002f32  f7fffffe          BL       uart_putchar
002f36  210a              MOVS     r1,#0xa
002f38  4866              LDR      r0,|L1.12500|
002f3a  f7fffffe          BL       uart_putchar
002f3e  210a              MOVS     r1,#0xa
002f40  4864              LDR      r0,|L1.12500|
002f42  f7fffffe          BL       uart_putchar
002f46  210a              MOVS     r1,#0xa
002f48  4862              LDR      r0,|L1.12500|
002f4a  f7fffffe          BL       uart_putchar
002f4e  210a              MOVS     r1,#0xa
002f50  4860              LDR      r0,|L1.12500|
002f52  f7fffffe          BL       uart_putchar
002f56  210a              MOVS     r1,#0xa
002f58  485e              LDR      r0,|L1.12500|
002f5a  f7fffffe          BL       uart_putchar
002f5e  210a              MOVS     r1,#0xa
002f60  485c              LDR      r0,|L1.12500|
002f62  f7fffffe          BL       uart_putchar
;;;927    									//memset(data,0,1000);
;;;928    														//timer counts to wait for characters in uart 1 									
;;;929    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002f66  bf00              NOP      
                  |L1.12136|
002f68  494e              LDR      r1,|L1.12452|
002f6a  391c              SUBS     r1,r1,#0x1c
002f6c  484f              LDR      r0,|L1.12460|
002f6e  f7fffffe          BL       strstr
002f72  2800              CMP      r0,#0
002f74  d109              BNE      |L1.12170|
002f76  4949              LDR      r1,|L1.12444|
002f78  484c              LDR      r0,|L1.12460|
002f7a  f7fffffe          BL       strstr
002f7e  2800              CMP      r0,#0
002f80  d103              BNE      |L1.12170|
002f82  4852              LDR      r0,|L1.12492|
002f84  6800              LDR      r0,[r0,#0]  ; tout
002f86  2805              CMP      r0,#5
002f88  ddee              BLE      |L1.12136|
                  |L1.12170|
;;;930    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;931    									}
;;;932    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002f8a  f7fffffe          BL       clear
;;;933    									//clear();
;;;934    									memset(data,0,strlen(data));
002f8e  4846              LDR      r0,|L1.12456|
002f90  f7fffffe          BL       strlen
002f94  4604              MOV      r4,r0
002f96  4621              MOV      r1,r4
002f98  4843              LDR      r0,|L1.12456|
002f9a  f7fffffe          BL       __aeabi_memclr
;;;935    									clear();
002f9e  f7fffffe          BL       clear
;;;936    									RESET_OFF;delay(100);
002fa2  2020              MOVS     r0,#0x20
002fa4  494c              LDR      r1,|L1.12504|
002fa6  6088              STR      r0,[r1,#8]
002fa8  2064              MOVS     r0,#0x64
002faa  f7fffffe          BL       delay
;;;937    									RESET_ON;delay(100);		
002fae  2020              MOVS     r0,#0x20
002fb0  4949              LDR      r1,|L1.12504|
002fb2  6048              STR      r0,[r1,#4]
002fb4  2064              MOVS     r0,#0x64
002fb6  f7fffffe          BL       delay
                  |L1.12218|
;;;938    }
;;;939    	
;;;940    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
002fba  2004              MOVS     r0,#4
002fbc  4b37              LDR      r3,|L1.12444|
002fbe  3b78              SUBS     r3,r3,#0x78
002fc0  461a              MOV      r2,r3
002fc2  3208              ADDS     r2,r2,#8
002fc4  a136              ADR      r1,|L1.12448|
002fc6  9000              STR      r0,[sp,#0]
002fc8  4844              LDR      r0,|L1.12508|
002fca  f7fffffe          BL       send_GSM
;;;941    GPS_COLLECT2();
002fce  f7fffffe          BL       GPS_COLLECT2
;;;942    strcat(data,"CH\n");	
002fd2  4934              LDR      r1,|L1.12452|
002fd4  3960              SUBS     r1,r1,#0x60
002fd6  4834              LDR      r0,|L1.12456|
002fd8  f7fffffe          BL       strcat
;;;943    memset(at_,0,100);
002fdc  2164              MOVS     r1,#0x64
002fde  4837              LDR      r0,|L1.12476|
002fe0  f7fffffe          BL       __aeabi_memclr
;;;944    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
002fe4  4a3e              LDR      r2,|L1.12512|
002fe6  493d              LDR      r1,|L1.12508|
002fe8  3118              ADDS     r1,r1,#0x18
002fea  4834              LDR      r0,|L1.12476|
002fec  f7fffffe          BL       __2sprintf
;;;945    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
002ff0  483c              LDR      r0,|L1.12516|
002ff2  6800              LDR      r0,[r0,#0]  ; tmeout
002ff4  4b29              LDR      r3,|L1.12444|
002ff6  3b78              SUBS     r3,r3,#0x78
002ff8  461a              MOV      r2,r3
002ffa  3208              ADDS     r2,r2,#8
002ffc  a128              ADR      r1,|L1.12448|
002ffe  9000              STR      r0,[sp,#0]
003000  482e              LDR      r0,|L1.12476|
003002  f7fffffe          BL       send_GSM
;;;946    msg_sim800(); 
003006  f7fffffe          BL       msg_sim800
;;;947    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
00300a  2004              MOVS     r0,#4
00300c  4b23              LDR      r3,|L1.12444|
00300e  3318              ADDS     r3,r3,#0x18
003010  461a              MOV      r2,r3
003012  3a88              SUBS     r2,r2,#0x88
003014  a122              ADR      r1,|L1.12448|
003016  9000              STR      r0,[sp,#0]
003018  4830              LDR      r0,|L1.12508|
00301a  3030              ADDS     r0,r0,#0x30
00301c  f7fffffe          BL       send_GSM
;;;948    GPS_COLLECT2();
003020  f7fffffe          BL       GPS_COLLECT2
;;;949    strcat(data,"CH\n");	
003024  491f              LDR      r1,|L1.12452|
003026  3960              SUBS     r1,r1,#0x60
003028  481f              LDR      r0,|L1.12456|
00302a  f7fffffe          BL       strcat
;;;950    GPS_COLLECT2();
00302e  f7fffffe          BL       GPS_COLLECT2
;;;951    strcat(data,"CH\n");	
003032  491c              LDR      r1,|L1.12452|
003034  3960              SUBS     r1,r1,#0x60
003036  481c              LDR      r0,|L1.12456|
003038  f7fffffe          BL       strcat
;;;952    
;;;953    
;;;954    msg_sim800(); 
00303c  f7fffffe          BL       msg_sim800
;;;955    GPS_COLLECT2();
003040  f7fffffe          BL       GPS_COLLECT2
;;;956    strcat(data,"CH\n");	
003044  4917              LDR      r1,|L1.12452|
003046  3960              SUBS     r1,r1,#0x60
003048  4817              LDR      r0,|L1.12456|
00304a  f7fffffe          BL       strcat
;;;957    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
00304e  f7fffffe          BL       clear
003052  4822              LDR      r0,|L1.12508|
003054  3040              ADDS     r0,r0,#0x40
003056  f7fffffe          BL       send_modem
00305a  f7fffffe          BL       clear
;;;958    					delay(20);
00305e  2014              MOVS     r0,#0x14
003060  f7fffffe          BL       delay
;;;959    
;;;960    
;;;961    msg_sim800(); 
003064  f7fffffe          BL       msg_sim800
;;;962    
;;;963    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
003068  4b1f              LDR      r3,|L1.12520|
00306a  4a20              LDR      r2,|L1.12524|
00306c  491b              LDR      r1,|L1.12508|
00306e  3158              ADDS     r1,r1,#0x58
003070  4812              LDR      r0,|L1.12476|
003072  f7fffffe          BL       __2sprintf
;;;964    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
003076  481b              LDR      r0,|L1.12516|
003078  6800              LDR      r0,[r0,#0]  ; tmeout
00307a  4b08              LDR      r3,|L1.12444|
00307c  3b78              SUBS     r3,r3,#0x78
00307e  4a07              LDR      r2,|L1.12444|
003080  4916              LDR      r1,|L1.12508|
003082  3178              ADDS     r1,r1,#0x78
003084  9000              STR      r0,[sp,#0]
003086  480d              LDR      r0,|L1.12476|
003088  f7fffffe          BL       send_GSM
;;;965    						clear();
00308c  f7fffffe          BL       clear
;;;966    						
;;;967    						
;;;968    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
003090  4814              LDR      r0,|L1.12516|
003092  6800              LDR      r0,[r0,#0]  ; tmeout
003094  4b11              LDR      r3,|L1.12508|
003096  3380              ADDS     r3,r3,#0x80
003098  4a00              LDR      r2,|L1.12444|
00309a  e029              B        |L1.12528|
                  |L1.12444|
                          DCD      ||.text||+0x910
                  |L1.12448|
0030a0  4f4b00            DCB      "OK",0
0030a3  00                DCB      0
                  |L1.12452|
                          DCD      ||.text||+0xda4
                  |L1.12456|
                          DCD      data
                  |L1.12460|
                          DCD      uart_string_gsm
                  |L1.12464|
                          DCD      cond201
                  |L1.12468|
                          DCD      cond200
                  |L1.12472|
                          DCD      sleep_flag
                  |L1.12476|
                          DCD      at_
                  |L1.12480|
                          DCD      drive
                  |L1.12484|
0030c4  3e00              DCB      ">",0
0030c6  00                DCB      0
0030c7  00                DCB      0
                  |L1.12488|
                          DCD      ||k2||
                  |L1.12492|
                          DCD      tout
                  |L1.12496|
                          DCD      k
                  |L1.12500|
                          DCD      0x4006b000
                  |L1.12504|
                          DCD      0x400ff080
                  |L1.12508|
                          DCD      ||.text||+0x1204
                  |L1.12512|
                          DCD      apn
                  |L1.12516|
                          DCD      tmeout
                  |L1.12520|
                          DCD      port
                  |L1.12524|
                          DCD      ||ip||
                  |L1.12528|
0030f0  a1f7              ADR      r1,|L1.13520|
0030f2  9000              STR      r0,[sp,#0]
0030f4  4618              MOV      r0,r3
0030f6  3014              ADDS     r0,r0,#0x14
0030f8  f7fffffe          BL       send_GSM
;;;969    //**************************************tcp_initialization ends******************************//							
;;;970    									
;;;971    						clear();		
0030fc  f7fffffe          BL       clear
;;;972    						cond=mystrstr(uart_string_gsm,'>');
003100  213e              MOVS     r1,#0x3e
003102  48f4              LDR      r0,|L1.13524|
003104  f7fffffe          BL       mystrstr
003108  49f3              LDR      r1,|L1.13528|
00310a  7008              STRB     r0,[r1,#0]
;;;973    								if(cond)	
00310c  4608              MOV      r0,r1
00310e  7800              LDRB     r0,[r0,#0]  ; cond
003110  2800              CMP      r0,#0
003112  d07d              BEQ      |L1.12816|
;;;974    								{	
;;;975    
;;;976    									clear();
003114  f7fffffe          BL       clear
;;;977    									memset(uart_string_gsm,0,5000);
003118  49f0              LDR      r1,|L1.13532|
00311a  48ee              LDR      r0,|L1.13524|
00311c  f7fffffe          BL       __aeabi_memclr
;;;978    									strcat(data,"\n");
003120  a1ef              ADR      r1,|L1.13536|
003122  48f0              LDR      r0,|L1.13540|
003124  f7fffffe          BL       strcat
;;;979    									len=strlen(data);
003128  48ee              LDR      r0,|L1.13540|
00312a  f7fffffe          BL       strlen
00312e  49ee              LDR      r1,|L1.13544|
003130  6008              STR      r0,[r1,#0]  ; len
;;;980    									tout=0;
003132  2000              MOVS     r0,#0
003134  49ed              LDR      r1,|L1.13548|
003136  6008              STR      r0,[r1,#0]  ; tout
;;;981    									k2=0;
003138  49ed              LDR      r1,|L1.13552|
00313a  6008              STR      r0,[r1,#0]  ; k2
;;;982    									for(k=0;k<len;k++)
00313c  49ed              LDR      r1,|L1.13556|
00313e  6008              STR      r0,[r1,#0]  ; k
003140  e00b              B        |L1.12634|
                  |L1.12610|
;;;983    									{
;;;984    										uart_putchar(UART1_BASE_PTR, data[k]);
003142  48e8              LDR      r0,|L1.13540|
003144  4aeb              LDR      r2,|L1.13556|
003146  6812              LDR      r2,[r2,#0]  ; k
003148  5c81              LDRB     r1,[r0,r2]
00314a  48eb              LDR      r0,|L1.13560|
00314c  f7fffffe          BL       uart_putchar
003150  48e8              LDR      r0,|L1.13556|
003152  6800              LDR      r0,[r0,#0]            ;982  ; k
003154  1c40              ADDS     r0,r0,#1              ;982
003156  49e7              LDR      r1,|L1.13556|
003158  6008              STR      r0,[r1,#0]            ;982  ; k
                  |L1.12634|
00315a  48e6              LDR      r0,|L1.13556|
00315c  6800              LDR      r0,[r0,#0]            ;982  ; k
00315e  49e2              LDR      r1,|L1.13544|
003160  6809              LDR      r1,[r1,#0]            ;982  ; len
003162  4288              CMP      r0,r1                 ;982
003164  dbed              BLT      |L1.12610|
;;;985    									}uart_putchar(UART1_BASE_PTR, 0x1A);
003166  211a              MOVS     r1,#0x1a
003168  48e3              LDR      r0,|L1.13560|
00316a  f7fffffe          BL       uart_putchar
;;;986    									do
00316e  bf00              NOP      
                  |L1.12656|
;;;987    																{stcond1=strstr(uart_string_gsm,"SEND OK");
003170  49e2              LDR      r1,|L1.13564|
003172  48d8              LDR      r0,|L1.13524|
003174  f7fffffe          BL       strstr
003178  49e1              LDR      r1,|L1.13568|
00317a  6008              STR      r0,[r1,#0]  ; stcond1
;;;988    																	stcond2=strstr(uart_string_gsm, "ERROR");
00317c  49df              LDR      r1,|L1.13564|
00317e  3108              ADDS     r1,r1,#8
003180  48d4              LDR      r0,|L1.13524|
003182  f7fffffe          BL       strstr
003186  49df              LDR      r1,|L1.13572|
003188  6008              STR      r0,[r1,#0]  ; stcond2
;;;989    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00318a  49df              LDR      r1,|L1.13576|
00318c  48d1              LDR      r0,|L1.13524|
00318e  f7fffffe          BL       strstr
003192  49de              LDR      r1,|L1.13580|
003194  6008              STR      r0,[r1,#0]  ; stcond3
;;;990    																			stcond4=strstr(uart_string_gsm, "DEACT");	
003196  49d9              LDR      r1,|L1.13564|
003198  3120              ADDS     r1,r1,#0x20
00319a  48ce              LDR      r0,|L1.13524|
00319c  f7fffffe          BL       strstr
0031a0  49db              LDR      r1,|L1.13584|
0031a2  6008              STR      r0,[r1,#0]  ; stcond4
;;;991    																	
;;;992    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0031a4  48d7              LDR      r0,|L1.13572|
0031a6  6800              LDR      r0,[r0,#0]  ; stcond2
0031a8  2800              CMP      r0,#0
0031aa  d10f              BNE      |L1.12748|
0031ac  48d7              LDR      r0,|L1.13580|
0031ae  6800              LDR      r0,[r0,#0]  ; stcond3
0031b0  2800              CMP      r0,#0
0031b2  d10b              BNE      |L1.12748|
0031b4  4608              MOV      r0,r1
0031b6  6800              LDR      r0,[r0,#0]  ; stcond4
0031b8  2800              CMP      r0,#0
0031ba  d107              BNE      |L1.12748|
0031bc  48d0              LDR      r0,|L1.13568|
0031be  6800              LDR      r0,[r0,#0]  ; stcond1
0031c0  2800              CMP      r0,#0
0031c2  d103              BNE      |L1.12748|
0031c4  48c9              LDR      r0,|L1.13548|
0031c6  6800              LDR      r0,[r0,#0]  ; tout
0031c8  2804              CMP      r0,#4
0031ca  ddd1              BLE      |L1.12656|
                  |L1.12748|
;;;993    																delay(10);clear();
0031cc  200a              MOVS     r0,#0xa
0031ce  f7fffffe          BL       delay
0031d2  f7fffffe          BL       clear
;;;994    														uart_putchar(UART1_BASE_PTR,0x1A);
0031d6  211a              MOVS     r1,#0x1a
0031d8  48c7              LDR      r0,|L1.13560|
0031da  f7fffffe          BL       uart_putchar
;;;995    												delay(10);
0031de  200a              MOVS     r0,#0xa
0031e0  f7fffffe          BL       delay
;;;996    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0031e4  211a              MOVS     r1,#0x1a
0031e6  48c4              LDR      r0,|L1.13560|
0031e8  f7fffffe          BL       uart_putchar
0031ec  211a              MOVS     r1,#0x1a
0031ee  48c2              LDR      r0,|L1.13560|
0031f0  f7fffffe          BL       uart_putchar
0031f4  211a              MOVS     r1,#0x1a
0031f6  48c0              LDR      r0,|L1.13560|
0031f8  f7fffffe          BL       uart_putchar
;;;997    						
;;;998    
;;;999    
;;;1000   									
;;;1001   															
;;;1002   															
;;;1003   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
0031fc  211a              MOVS     r1,#0x1a
0031fe  48be              LDR      r0,|L1.13560|
003200  f7fffffe          BL       uart_putchar
003204  f7fffffe          BL       clear
003208  200a              MOVS     r0,#0xa
00320a  f7fffffe          BL       delay
;;;1004   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
00320e  e000              B        |L1.12818|
                  |L1.12816|
003210  e18b              B        |L1.13610|
                  |L1.12818|
003212  211a              MOVS     r1,#0x1a
003214  48b8              LDR      r0,|L1.13560|
003216  f7fffffe          BL       uart_putchar
00321a  f7fffffe          BL       clear
00321e  200a              MOVS     r0,#0xa
003220  f7fffffe          BL       delay
;;;1005   															
;;;1006   														//qwe=strlen(uart_string_gsm);
;;;1007   														uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
003224  211a              MOVS     r1,#0x1a
003226  48b4              LDR      r0,|L1.13560|
003228  f7fffffe          BL       uart_putchar
00322c  f7fffffe          BL       clear
003230  200a              MOVS     r0,#0xa
003232  f7fffffe          BL       delay
;;;1008   								delay(50);
003236  2032              MOVS     r0,#0x32
003238  f7fffffe          BL       delay
;;;1009   								con1d=strstr(uart_string_gsm,"SEND OK");
00323c  49af              LDR      r1,|L1.13564|
00323e  48a5              LDR      r0,|L1.13524|
003240  f7fffffe          BL       strstr
003244  49b3              LDR      r1,|L1.13588|
003246  6008              STR      r0,[r1,#0]  ; con1d
;;;1010   								if(!con1d)
003248  4608              MOV      r0,r1
00324a  6800              LDR      r0,[r0,#0]  ; con1d
00324c  2800              CMP      r0,#0
00324e  d17c              BNE      |L1.13130|
;;;1011   								{
;;;1012   									
;;;1013   									
;;;1014   	delay(100);
003250  2064              MOVS     r0,#0x64
003252  f7fffffe          BL       delay
;;;1015   		clear();//memset(uart_string_gsm,0,5000);
003256  f7fffffe          BL       clear
;;;1016   	
;;;1017   	memset(at_,0,100);
00325a  2164              MOVS     r1,#0x64
00325c  48ae              LDR      r0,|L1.13592|
00325e  f7fffffe          BL       __aeabi_memclr
;;;1018   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003262  48a0              LDR      r0,|L1.13540|
003264  f7fffffe          BL       strlen
003268  1c44              ADDS     r4,r0,#1
00326a  4623              MOV      r3,r4
00326c  4aab              LDR      r2,|L1.13596|
00326e  49ac              LDR      r1,|L1.13600|
003270  48a9              LDR      r0,|L1.13592|
003272  f7fffffe          BL       __2sprintf
;;;1019   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003276  2005              MOVS     r0,#5
003278  4ba0              LDR      r3,|L1.13564|
00327a  3308              ADDS     r3,r3,#8
00327c  461a              MOV      r2,r3
00327e  3a70              SUBS     r2,r2,#0x70
003280  a193              ADR      r1,|L1.13520|
003282  9000              STR      r0,[sp,#0]
003284  48a4              LDR      r0,|L1.13592|
003286  f7fffffe          BL       send_SD
;;;1020   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1021   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1022   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1023   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1024   //	}
;;;1025   	
;;;1026   clear();	
00328a  f7fffffe          BL       clear
;;;1027   									k2=0;									//string array counter for uart 1
00328e  2000              MOVS     r0,#0
003290  4997              LDR      r1,|L1.13552|
003292  6008              STR      r0,[r1,#0]  ; k2
;;;1028   									tout=0;	
003294  4995              LDR      r1,|L1.13548|
003296  6008              STR      r0,[r1,#0]  ; tout
;;;1029   		for(k=0;k<strlen(data);k++)
003298  4996              LDR      r1,|L1.13556|
00329a  6008              STR      r0,[r1,#0]  ; k
00329c  e00b              B        |L1.12982|
                  |L1.12958|
;;;1030   		{
;;;1031   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00329e  4891              LDR      r0,|L1.13540|
0032a0  4a94              LDR      r2,|L1.13556|
0032a2  6812              LDR      r2,[r2,#0]  ; k
0032a4  5c81              LDRB     r1,[r0,r2]
0032a6  4894              LDR      r0,|L1.13560|
0032a8  f7fffffe          BL       uart_putchar
0032ac  4891              LDR      r0,|L1.13556|
0032ae  6800              LDR      r0,[r0,#0]            ;1029  ; k
0032b0  1c40              ADDS     r0,r0,#1              ;1029
0032b2  4990              LDR      r1,|L1.13556|
0032b4  6008              STR      r0,[r1,#0]            ;1029  ; k
                  |L1.12982|
0032b6  488b              LDR      r0,|L1.13540|
0032b8  f7fffffe          BL       strlen
0032bc  498d              LDR      r1,|L1.13556|
0032be  6809              LDR      r1,[r1,#0]            ;1029  ; k
0032c0  4288              CMP      r0,r1                 ;1029
0032c2  d8ec              BHI      |L1.12958|
;;;1032   		}	
;;;1033   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0032c4  210a              MOVS     r1,#0xa
0032c6  488c              LDR      r0,|L1.13560|
0032c8  f7fffffe          BL       uart_putchar
0032cc  210a              MOVS     r1,#0xa
0032ce  488a              LDR      r0,|L1.13560|
0032d0  f7fffffe          BL       uart_putchar
0032d4  210a              MOVS     r1,#0xa
0032d6  4888              LDR      r0,|L1.13560|
0032d8  f7fffffe          BL       uart_putchar
0032dc  210a              MOVS     r1,#0xa
0032de  4886              LDR      r0,|L1.13560|
0032e0  f7fffffe          BL       uart_putchar
0032e4  210a              MOVS     r1,#0xa
0032e6  4884              LDR      r0,|L1.13560|
0032e8  f7fffffe          BL       uart_putchar
0032ec  210a              MOVS     r1,#0xa
0032ee  4882              LDR      r0,|L1.13560|
0032f0  f7fffffe          BL       uart_putchar
0032f4  210a              MOVS     r1,#0xa
0032f6  4880              LDR      r0,|L1.13560|
0032f8  f7fffffe          BL       uart_putchar
0032fc  210a              MOVS     r1,#0xa
0032fe  487e              LDR      r0,|L1.13560|
003300  f7fffffe          BL       uart_putchar
003304  210a              MOVS     r1,#0xa
003306  487c              LDR      r0,|L1.13560|
003308  f7fffffe          BL       uart_putchar
00330c  210a              MOVS     r1,#0xa
00330e  487a              LDR      r0,|L1.13560|
003310  f7fffffe          BL       uart_putchar
003314  210a              MOVS     r1,#0xa
003316  4878              LDR      r0,|L1.13560|
003318  f7fffffe          BL       uart_putchar
00331c  210a              MOVS     r1,#0xa
00331e  4876              LDR      r0,|L1.13560|
003320  f7fffffe          BL       uart_putchar
003324  210a              MOVS     r1,#0xa
003326  4874              LDR      r0,|L1.13560|
003328  f7fffffe          BL       uart_putchar
00332c  210a              MOVS     r1,#0xa
00332e  4872              LDR      r0,|L1.13560|
003330  f7fffffe          BL       uart_putchar
003334  210a              MOVS     r1,#0xa
003336  4870              LDR      r0,|L1.13560|
003338  f7fffffe          BL       uart_putchar
00333c  210a              MOVS     r1,#0xa
00333e  486e              LDR      r0,|L1.13560|
003340  f7fffffe          BL       uart_putchar
003344  210a              MOVS     r1,#0xa
003346  486c              LDR      r0,|L1.13560|
003348  e000              B        |L1.13132|
                  |L1.13130|
00334a  e0eb              B        |L1.13604|
                  |L1.13132|
00334c  f7fffffe          BL       uart_putchar
003350  210a              MOVS     r1,#0xa
003352  4869              LDR      r0,|L1.13560|
003354  f7fffffe          BL       uart_putchar
003358  210a              MOVS     r1,#0xa
00335a  4867              LDR      r0,|L1.13560|
00335c  f7fffffe          BL       uart_putchar
003360  210a              MOVS     r1,#0xa
003362  4865              LDR      r0,|L1.13560|
003364  f7fffffe          BL       uart_putchar
003368  210a              MOVS     r1,#0xa
00336a  4863              LDR      r0,|L1.13560|
00336c  f7fffffe          BL       uart_putchar
003370  210a              MOVS     r1,#0xa
003372  4861              LDR      r0,|L1.13560|
003374  f7fffffe          BL       uart_putchar
003378  210a              MOVS     r1,#0xa
00337a  485f              LDR      r0,|L1.13560|
00337c  f7fffffe          BL       uart_putchar
003380  210a              MOVS     r1,#0xa
003382  485d              LDR      r0,|L1.13560|
003384  f7fffffe          BL       uart_putchar
003388  210a              MOVS     r1,#0xa
00338a  485b              LDR      r0,|L1.13560|
00338c  f7fffffe          BL       uart_putchar
003390  210a              MOVS     r1,#0xa
003392  4859              LDR      r0,|L1.13560|
003394  f7fffffe          BL       uart_putchar
003398  210a              MOVS     r1,#0xa
00339a  4857              LDR      r0,|L1.13560|
00339c  f7fffffe          BL       uart_putchar
0033a0  210a              MOVS     r1,#0xa
0033a2  4855              LDR      r0,|L1.13560|
0033a4  f7fffffe          BL       uart_putchar
0033a8  210a              MOVS     r1,#0xa
0033aa  4853              LDR      r0,|L1.13560|
0033ac  f7fffffe          BL       uart_putchar
0033b0  210a              MOVS     r1,#0xa
0033b2  4851              LDR      r0,|L1.13560|
0033b4  f7fffffe          BL       uart_putchar
0033b8  210a              MOVS     r1,#0xa
0033ba  484f              LDR      r0,|L1.13560|
0033bc  f7fffffe          BL       uart_putchar
0033c0  210a              MOVS     r1,#0xa
0033c2  484d              LDR      r0,|L1.13560|
0033c4  f7fffffe          BL       uart_putchar
0033c8  210a              MOVS     r1,#0xa
0033ca  484b              LDR      r0,|L1.13560|
0033cc  f7fffffe          BL       uart_putchar
0033d0  210a              MOVS     r1,#0xa
0033d2  4849              LDR      r0,|L1.13560|
0033d4  f7fffffe          BL       uart_putchar
0033d8  210a              MOVS     r1,#0xa
0033da  4847              LDR      r0,|L1.13560|
0033dc  f7fffffe          BL       uart_putchar
0033e0  210a              MOVS     r1,#0xa
0033e2  4845              LDR      r0,|L1.13560|
0033e4  f7fffffe          BL       uart_putchar
0033e8  210a              MOVS     r1,#0xa
0033ea  4843              LDR      r0,|L1.13560|
0033ec  f7fffffe          BL       uart_putchar
0033f0  210a              MOVS     r1,#0xa
0033f2  4841              LDR      r0,|L1.13560|
0033f4  f7fffffe          BL       uart_putchar
0033f8  210a              MOVS     r1,#0xa
0033fa  483f              LDR      r0,|L1.13560|
0033fc  f7fffffe          BL       uart_putchar
003400  210a              MOVS     r1,#0xa
003402  483d              LDR      r0,|L1.13560|
003404  f7fffffe          BL       uart_putchar
003408  210a              MOVS     r1,#0xa
00340a  483b              LDR      r0,|L1.13560|
00340c  f7fffffe          BL       uart_putchar
003410  210a              MOVS     r1,#0xa
003412  4839              LDR      r0,|L1.13560|
003414  f7fffffe          BL       uart_putchar
003418  210a              MOVS     r1,#0xa
00341a  4837              LDR      r0,|L1.13560|
00341c  f7fffffe          BL       uart_putchar
003420  210a              MOVS     r1,#0xa
003422  4835              LDR      r0,|L1.13560|
003424  f7fffffe          BL       uart_putchar
003428  210a              MOVS     r1,#0xa
00342a  4833              LDR      r0,|L1.13560|
00342c  f7fffffe          BL       uart_putchar
003430  210a              MOVS     r1,#0xa
003432  4831              LDR      r0,|L1.13560|
003434  f7fffffe          BL       uart_putchar
003438  210a              MOVS     r1,#0xa
00343a  482f              LDR      r0,|L1.13560|
00343c  f7fffffe          BL       uart_putchar
003440  210a              MOVS     r1,#0xa
003442  482d              LDR      r0,|L1.13560|
003444  f7fffffe          BL       uart_putchar
003448  210a              MOVS     r1,#0xa
00344a  482b              LDR      r0,|L1.13560|
00344c  f7fffffe          BL       uart_putchar
003450  210a              MOVS     r1,#0xa
003452  4829              LDR      r0,|L1.13560|
003454  f7fffffe          BL       uart_putchar
003458  210a              MOVS     r1,#0xa
00345a  4827              LDR      r0,|L1.13560|
00345c  f7fffffe          BL       uart_putchar
003460  210a              MOVS     r1,#0xa
003462  4825              LDR      r0,|L1.13560|
003464  f7fffffe          BL       uart_putchar
003468  210a              MOVS     r1,#0xa
00346a  4823              LDR      r0,|L1.13560|
00346c  f7fffffe          BL       uart_putchar
003470  210a              MOVS     r1,#0xa
003472  4821              LDR      r0,|L1.13560|
003474  f7fffffe          BL       uart_putchar
003478  210a              MOVS     r1,#0xa
00347a  481f              LDR      r0,|L1.13560|
00347c  f7fffffe          BL       uart_putchar
003480  210a              MOVS     r1,#0xa
003482  481d              LDR      r0,|L1.13560|
003484  f7fffffe          BL       uart_putchar
003488  210a              MOVS     r1,#0xa
00348a  481b              LDR      r0,|L1.13560|
00348c  f7fffffe          BL       uart_putchar
;;;1034   									//memset(data,0,1000);
;;;1035   														//timer counts to wait for characters in uart 1 									
;;;1036   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003490  bf00              NOP      
                  |L1.13458|
003492  4923              LDR      r1,|L1.13600|
003494  3138              ADDS     r1,r1,#0x38
003496  480f              LDR      r0,|L1.13524|
003498  f7fffffe          BL       strstr
00349c  2800              CMP      r0,#0
00349e  d10a              BNE      |L1.13494|
0034a0  4916              LDR      r1,|L1.13564|
0034a2  3108              ADDS     r1,r1,#8
0034a4  480b              LDR      r0,|L1.13524|
0034a6  f7fffffe          BL       strstr
0034aa  2800              CMP      r0,#0
0034ac  d103              BNE      |L1.13494|
0034ae  480f              LDR      r0,|L1.13548|
0034b0  6800              LDR      r0,[r0,#0]  ; tout
0034b2  2805              CMP      r0,#5
0034b4  dded              BLE      |L1.13458|
                  |L1.13494|
;;;1037   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1038   									}
;;;1039   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0034b6  f7fffffe          BL       clear
;;;1040   									//clear();
;;;1041   									memset(data,0,strlen(data));
0034ba  480a              LDR      r0,|L1.13540|
0034bc  f7fffffe          BL       strlen
0034c0  4604              MOV      r4,r0
0034c2  4621              MOV      r1,r4
0034c4  4807              LDR      r0,|L1.13540|
0034c6  f7fffffe          BL       __aeabi_memclr
;;;1042   									clear();
0034ca  f7fffffe          BL       clear
0034ce  e16a              B        |L1.14246|
                  |L1.13520|
0034d0  3e00              DCB      ">",0
0034d2  00                DCB      0
0034d3  00                DCB      0
                  |L1.13524|
                          DCD      uart_string_gsm
                  |L1.13528|
                          DCD      cond
                  |L1.13532|
                          DCD      0x00001388
                  |L1.13536|
0034e0  0a00              DCB      "\n",0
0034e2  00                DCB      0
0034e3  00                DCB      0
                  |L1.13540|
                          DCD      data
                  |L1.13544|
                          DCD      len
                  |L1.13548|
                          DCD      tout
                  |L1.13552|
                          DCD      ||k2||
                  |L1.13556|
                          DCD      k
                  |L1.13560|
                          DCD      0x4006b000
                  |L1.13564|
                          DCD      ||.text||+0x908
                  |L1.13568|
                          DCD      stcond1
                  |L1.13572|
                          DCD      stcond2
                  |L1.13576|
                          DCD      ||.text||+0x128c
                  |L1.13580|
                          DCD      stcond3
                  |L1.13584|
                          DCD      stcond4
                  |L1.13588|
                          DCD      con1d
                  |L1.13592|
                          DCD      at_
                  |L1.13596|
                          DCD      drive
                  |L1.13600|
                          DCD      ||.text||+0xd50
                  |L1.13604|
;;;1043   
;;;1044   								
;;;1045   									
;;;1046   									
;;;1047   									
;;;1048   								//	log_it();								
;;;1049   								}else{send_chunk();}	
003524  f7fffffe          BL       send_chunk
003528  e13d              B        |L1.14246|
                  |L1.13610|
;;;1050   
;;;1051   																
;;;1052   								}else{
;;;1053   								
;;;1054   								
;;;1055   	delay(100);
00352a  2064              MOVS     r0,#0x64
00352c  f7fffffe          BL       delay
;;;1056   		clear();//memset(uart_string_gsm,0,5000);
003530  f7fffffe          BL       clear
;;;1057   	
;;;1058   	memset(at_,0,100);
003534  2164              MOVS     r1,#0x64
003536  48fe              LDR      r0,|L1.14640|
003538  f7fffffe          BL       __aeabi_memclr
;;;1059   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00353c  48fd              LDR      r0,|L1.14644|
00353e  f7fffffe          BL       strlen
003542  1c44              ADDS     r4,r0,#1
003544  4623              MOV      r3,r4
003546  4afc              LDR      r2,|L1.14648|
003548  49fc              LDR      r1,|L1.14652|
00354a  48f9              LDR      r0,|L1.14640|
00354c  f7fffffe          BL       __2sprintf
;;;1060   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003550  2005              MOVS     r0,#5
003552  4bfb              LDR      r3,|L1.14656|
003554  461a              MOV      r2,r3
003556  3a70              SUBS     r2,r2,#0x70
003558  a1fa              ADR      r1,|L1.14660|
00355a  9000              STR      r0,[sp,#0]
00355c  48f4              LDR      r0,|L1.14640|
00355e  f7fffffe          BL       send_SD
;;;1061   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1062   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1063   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1064   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1065   //	}
;;;1066   	
;;;1067   clear();	
003562  f7fffffe          BL       clear
;;;1068   									k2=0;									//string array counter for uart 1
003566  2000              MOVS     r0,#0
003568  49f7              LDR      r1,|L1.14664|
00356a  6008              STR      r0,[r1,#0]  ; k2
;;;1069   									tout=0;	
00356c  49f7              LDR      r1,|L1.14668|
00356e  6008              STR      r0,[r1,#0]  ; tout
;;;1070   		for(k=0;k<strlen(data);k++)
003570  49f7              LDR      r1,|L1.14672|
003572  6008              STR      r0,[r1,#0]  ; k
003574  e00b              B        |L1.13710|
                  |L1.13686|
;;;1071   		{
;;;1072   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
003576  48ef              LDR      r0,|L1.14644|
003578  4af5              LDR      r2,|L1.14672|
00357a  6812              LDR      r2,[r2,#0]  ; k
00357c  5c81              LDRB     r1,[r0,r2]
00357e  48f5              LDR      r0,|L1.14676|
003580  f7fffffe          BL       uart_putchar
003584  48f2              LDR      r0,|L1.14672|
003586  6800              LDR      r0,[r0,#0]            ;1070  ; k
003588  1c40              ADDS     r0,r0,#1              ;1070
00358a  49f1              LDR      r1,|L1.14672|
00358c  6008              STR      r0,[r1,#0]            ;1070  ; k
                  |L1.13710|
00358e  48e9              LDR      r0,|L1.14644|
003590  f7fffffe          BL       strlen
003594  49ee              LDR      r1,|L1.14672|
003596  6809              LDR      r1,[r1,#0]            ;1070  ; k
003598  4288              CMP      r0,r1                 ;1070
00359a  d8ec              BHI      |L1.13686|
;;;1073   		}	
;;;1074   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00359c  210a              MOVS     r1,#0xa
00359e  48ed              LDR      r0,|L1.14676|
0035a0  f7fffffe          BL       uart_putchar
0035a4  210a              MOVS     r1,#0xa
0035a6  48eb              LDR      r0,|L1.14676|
0035a8  f7fffffe          BL       uart_putchar
0035ac  210a              MOVS     r1,#0xa
0035ae  48e9              LDR      r0,|L1.14676|
0035b0  f7fffffe          BL       uart_putchar
0035b4  210a              MOVS     r1,#0xa
0035b6  48e7              LDR      r0,|L1.14676|
0035b8  f7fffffe          BL       uart_putchar
0035bc  210a              MOVS     r1,#0xa
0035be  48e5              LDR      r0,|L1.14676|
0035c0  f7fffffe          BL       uart_putchar
0035c4  210a              MOVS     r1,#0xa
0035c6  48e3              LDR      r0,|L1.14676|
0035c8  f7fffffe          BL       uart_putchar
0035cc  210a              MOVS     r1,#0xa
0035ce  48e1              LDR      r0,|L1.14676|
0035d0  f7fffffe          BL       uart_putchar
0035d4  210a              MOVS     r1,#0xa
0035d6  48df              LDR      r0,|L1.14676|
0035d8  f7fffffe          BL       uart_putchar
0035dc  210a              MOVS     r1,#0xa
0035de  48dd              LDR      r0,|L1.14676|
0035e0  f7fffffe          BL       uart_putchar
0035e4  210a              MOVS     r1,#0xa
0035e6  48db              LDR      r0,|L1.14676|
0035e8  f7fffffe          BL       uart_putchar
0035ec  210a              MOVS     r1,#0xa
0035ee  48d9              LDR      r0,|L1.14676|
0035f0  f7fffffe          BL       uart_putchar
0035f4  210a              MOVS     r1,#0xa
0035f6  48d7              LDR      r0,|L1.14676|
0035f8  f7fffffe          BL       uart_putchar
0035fc  210a              MOVS     r1,#0xa
0035fe  48d5              LDR      r0,|L1.14676|
003600  f7fffffe          BL       uart_putchar
003604  210a              MOVS     r1,#0xa
003606  48d3              LDR      r0,|L1.14676|
003608  f7fffffe          BL       uart_putchar
00360c  210a              MOVS     r1,#0xa
00360e  48d1              LDR      r0,|L1.14676|
003610  f7fffffe          BL       uart_putchar
003614  210a              MOVS     r1,#0xa
003616  48cf              LDR      r0,|L1.14676|
003618  f7fffffe          BL       uart_putchar
00361c  210a              MOVS     r1,#0xa
00361e  48cd              LDR      r0,|L1.14676|
003620  f7fffffe          BL       uart_putchar
003624  210a              MOVS     r1,#0xa
003626  48cb              LDR      r0,|L1.14676|
003628  f7fffffe          BL       uart_putchar
00362c  210a              MOVS     r1,#0xa
00362e  48c9              LDR      r0,|L1.14676|
003630  f7fffffe          BL       uart_putchar
003634  210a              MOVS     r1,#0xa
003636  48c7              LDR      r0,|L1.14676|
003638  f7fffffe          BL       uart_putchar
00363c  210a              MOVS     r1,#0xa
00363e  48c5              LDR      r0,|L1.14676|
003640  f7fffffe          BL       uart_putchar
003644  210a              MOVS     r1,#0xa
003646  48c3              LDR      r0,|L1.14676|
003648  f7fffffe          BL       uart_putchar
00364c  210a              MOVS     r1,#0xa
00364e  48c1              LDR      r0,|L1.14676|
003650  f7fffffe          BL       uart_putchar
003654  210a              MOVS     r1,#0xa
003656  48bf              LDR      r0,|L1.14676|
003658  f7fffffe          BL       uart_putchar
00365c  210a              MOVS     r1,#0xa
00365e  48bd              LDR      r0,|L1.14676|
003660  f7fffffe          BL       uart_putchar
003664  210a              MOVS     r1,#0xa
003666  48bb              LDR      r0,|L1.14676|
003668  f7fffffe          BL       uart_putchar
00366c  210a              MOVS     r1,#0xa
00366e  48b9              LDR      r0,|L1.14676|
003670  f7fffffe          BL       uart_putchar
003674  210a              MOVS     r1,#0xa
003676  48b7              LDR      r0,|L1.14676|
003678  f7fffffe          BL       uart_putchar
00367c  210a              MOVS     r1,#0xa
00367e  48b5              LDR      r0,|L1.14676|
003680  f7fffffe          BL       uart_putchar
003684  210a              MOVS     r1,#0xa
003686  48b3              LDR      r0,|L1.14676|
003688  f7fffffe          BL       uart_putchar
00368c  210a              MOVS     r1,#0xa
00368e  48b1              LDR      r0,|L1.14676|
003690  f7fffffe          BL       uart_putchar
003694  210a              MOVS     r1,#0xa
003696  48af              LDR      r0,|L1.14676|
003698  f7fffffe          BL       uart_putchar
00369c  210a              MOVS     r1,#0xa
00369e  48ad              LDR      r0,|L1.14676|
0036a0  f7fffffe          BL       uart_putchar
0036a4  210a              MOVS     r1,#0xa
0036a6  48ab              LDR      r0,|L1.14676|
0036a8  f7fffffe          BL       uart_putchar
0036ac  210a              MOVS     r1,#0xa
0036ae  48a9              LDR      r0,|L1.14676|
0036b0  f7fffffe          BL       uart_putchar
0036b4  210a              MOVS     r1,#0xa
0036b6  48a7              LDR      r0,|L1.14676|
0036b8  f7fffffe          BL       uart_putchar
0036bc  210a              MOVS     r1,#0xa
0036be  48a5              LDR      r0,|L1.14676|
0036c0  f7fffffe          BL       uart_putchar
0036c4  210a              MOVS     r1,#0xa
0036c6  48a3              LDR      r0,|L1.14676|
0036c8  f7fffffe          BL       uart_putchar
0036cc  210a              MOVS     r1,#0xa
0036ce  48a1              LDR      r0,|L1.14676|
0036d0  f7fffffe          BL       uart_putchar
0036d4  210a              MOVS     r1,#0xa
0036d6  489f              LDR      r0,|L1.14676|
0036d8  f7fffffe          BL       uart_putchar
0036dc  210a              MOVS     r1,#0xa
0036de  489d              LDR      r0,|L1.14676|
0036e0  f7fffffe          BL       uart_putchar
0036e4  210a              MOVS     r1,#0xa
0036e6  489b              LDR      r0,|L1.14676|
0036e8  f7fffffe          BL       uart_putchar
0036ec  210a              MOVS     r1,#0xa
0036ee  4899              LDR      r0,|L1.14676|
0036f0  f7fffffe          BL       uart_putchar
0036f4  210a              MOVS     r1,#0xa
0036f6  4897              LDR      r0,|L1.14676|
0036f8  f7fffffe          BL       uart_putchar
0036fc  210a              MOVS     r1,#0xa
0036fe  4895              LDR      r0,|L1.14676|
003700  f7fffffe          BL       uart_putchar
003704  210a              MOVS     r1,#0xa
003706  4893              LDR      r0,|L1.14676|
003708  f7fffffe          BL       uart_putchar
00370c  210a              MOVS     r1,#0xa
00370e  4891              LDR      r0,|L1.14676|
003710  f7fffffe          BL       uart_putchar
003714  210a              MOVS     r1,#0xa
003716  488f              LDR      r0,|L1.14676|
003718  f7fffffe          BL       uart_putchar
00371c  210a              MOVS     r1,#0xa
00371e  488d              LDR      r0,|L1.14676|
003720  f7fffffe          BL       uart_putchar
003724  210a              MOVS     r1,#0xa
003726  488b              LDR      r0,|L1.14676|
003728  f7fffffe          BL       uart_putchar
00372c  210a              MOVS     r1,#0xa
00372e  4889              LDR      r0,|L1.14676|
003730  f7fffffe          BL       uart_putchar
003734  210a              MOVS     r1,#0xa
003736  4887              LDR      r0,|L1.14676|
003738  f7fffffe          BL       uart_putchar
00373c  210a              MOVS     r1,#0xa
00373e  4885              LDR      r0,|L1.14676|
003740  f7fffffe          BL       uart_putchar
003744  210a              MOVS     r1,#0xa
003746  4883              LDR      r0,|L1.14676|
003748  f7fffffe          BL       uart_putchar
00374c  210a              MOVS     r1,#0xa
00374e  4881              LDR      r0,|L1.14676|
003750  f7fffffe          BL       uart_putchar
003754  210a              MOVS     r1,#0xa
003756  487f              LDR      r0,|L1.14676|
003758  f7fffffe          BL       uart_putchar
00375c  210a              MOVS     r1,#0xa
00375e  487d              LDR      r0,|L1.14676|
003760  f7fffffe          BL       uart_putchar
;;;1075   									//memset(data,0,1000);
;;;1076   														//timer counts to wait for characters in uart 1 									
;;;1077   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003764  bf00              NOP      
                  |L1.14182|
003766  4975              LDR      r1,|L1.14652|
003768  3138              ADDS     r1,r1,#0x38
00376a  487b              LDR      r0,|L1.14680|
00376c  f7fffffe          BL       strstr
003770  2800              CMP      r0,#0
003772  d109              BNE      |L1.14216|
003774  4972              LDR      r1,|L1.14656|
003776  4878              LDR      r0,|L1.14680|
003778  f7fffffe          BL       strstr
00377c  2800              CMP      r0,#0
00377e  d103              BNE      |L1.14216|
003780  4872              LDR      r0,|L1.14668|
003782  6800              LDR      r0,[r0,#0]  ; tout
003784  2805              CMP      r0,#5
003786  ddee              BLE      |L1.14182|
                  |L1.14216|
;;;1078   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1079   									}
;;;1080   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003788  f7fffffe          BL       clear
;;;1081   									//clear();
;;;1082   									memset(data,0,strlen(data));
00378c  4869              LDR      r0,|L1.14644|
00378e  f7fffffe          BL       strlen
003792  4604              MOV      r4,r0
003794  4621              MOV      r1,r4
003796  4867              LDR      r0,|L1.14644|
003798  f7fffffe          BL       __aeabi_memclr
;;;1083   									clear();
00379c  f7fffffe          BL       clear
0037a0  e001              B        |L1.14246|
                  |L1.14242|
;;;1084   
;;;1085   								
;;;1086   								
;;;1087   								//log_it();
;;;1088   									}			//
;;;1089   
;;;1090   							
;;;1091   
;;;1092   	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1093   	else
;;;1094   	{
;;;1095   		send_chunk();
0037a2  f7fffffe          BL       send_chunk
                  |L1.14246|
;;;1096   	}		
;;;1097   								
;;;1098   								
;;;1099   								
;;;1100   	memset(data,0,strlen(data));	
0037a6  4863              LDR      r0,|L1.14644|
0037a8  f7fffffe          BL       strlen
0037ac  4604              MOV      r4,r0
0037ae  4621              MOV      r1,r4
0037b0  4860              LDR      r0,|L1.14644|
0037b2  f7fffffe          BL       __aeabi_memclr
;;;1101   	uart_putchar(UART1_BASE_PTR, 0x1A);
0037b6  211a              MOVS     r1,#0x1a
0037b8  4866              LDR      r0,|L1.14676|
0037ba  f7fffffe          BL       uart_putchar
;;;1102   	
;;;1103   }
0037be  bd38              POP      {r3-r5,pc}
;;;1104   
                          ENDP

                  log_it PROC
;;;1107   
;;;1108   void log_it()
0037c0  b538              PUSH     {r3-r5,lr}
;;;1109   {
;;;1110   	delay(100);
0037c2  2064              MOVS     r0,#0x64
0037c4  f7fffffe          BL       delay
;;;1111   		clear();//memset(uart_string_gsm,0,5000);
0037c8  f7fffffe          BL       clear
;;;1112   	
;;;1113   	memset(at_,0,100);
0037cc  2164              MOVS     r1,#0x64
0037ce  4858              LDR      r0,|L1.14640|
0037d0  f7fffffe          BL       __aeabi_memclr
;;;1114   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0037d4  4857              LDR      r0,|L1.14644|
0037d6  f7fffffe          BL       strlen
0037da  1c44              ADDS     r4,r0,#1
0037dc  4623              MOV      r3,r4
0037de  4a56              LDR      r2,|L1.14648|
0037e0  4956              LDR      r1,|L1.14652|
0037e2  4853              LDR      r0,|L1.14640|
0037e4  f7fffffe          BL       __2sprintf
;;;1115   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0037e8  2005              MOVS     r0,#5
0037ea  4b55              LDR      r3,|L1.14656|
0037ec  461a              MOV      r2,r3
0037ee  3a70              SUBS     r2,r2,#0x70
0037f0  a154              ADR      r1,|L1.14660|
0037f2  9000              STR      r0,[sp,#0]
0037f4  484e              LDR      r0,|L1.14640|
0037f6  f7fffffe          BL       send_SD
;;;1116   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1117   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1118   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1119   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1120   //	}
;;;1121   	
;;;1122   clear();	
0037fa  f7fffffe          BL       clear
;;;1123   									k2=0;									//string array counter for uart 1
0037fe  2000              MOVS     r0,#0
003800  4951              LDR      r1,|L1.14664|
003802  6008              STR      r0,[r1,#0]  ; k2
;;;1124   									tout=0;	
003804  4951              LDR      r1,|L1.14668|
003806  6008              STR      r0,[r1,#0]  ; tout
;;;1125   		for(k=0;k<strlen(data);k++)
003808  4951              LDR      r1,|L1.14672|
00380a  6008              STR      r0,[r1,#0]  ; k
00380c  e00b              B        |L1.14374|
                  |L1.14350|
;;;1126   		{
;;;1127   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00380e  4849              LDR      r0,|L1.14644|
003810  4a4f              LDR      r2,|L1.14672|
003812  6812              LDR      r2,[r2,#0]  ; k
003814  5c81              LDRB     r1,[r0,r2]
003816  484f              LDR      r0,|L1.14676|
003818  f7fffffe          BL       uart_putchar
00381c  484c              LDR      r0,|L1.14672|
00381e  6800              LDR      r0,[r0,#0]            ;1125  ; k
003820  1c40              ADDS     r0,r0,#1              ;1125
003822  494b              LDR      r1,|L1.14672|
003824  6008              STR      r0,[r1,#0]            ;1125  ; k
                  |L1.14374|
003826  4843              LDR      r0,|L1.14644|
003828  f7fffffe          BL       strlen
00382c  4948              LDR      r1,|L1.14672|
00382e  6809              LDR      r1,[r1,#0]            ;1125  ; k
003830  4288              CMP      r0,r1                 ;1125
003832  d8ec              BHI      |L1.14350|
;;;1128   		}	
;;;1129   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
003834  210a              MOVS     r1,#0xa
003836  4847              LDR      r0,|L1.14676|
003838  f7fffffe          BL       uart_putchar
00383c  210a              MOVS     r1,#0xa
00383e  4845              LDR      r0,|L1.14676|
003840  f7fffffe          BL       uart_putchar
003844  210a              MOVS     r1,#0xa
003846  4843              LDR      r0,|L1.14676|
003848  f7fffffe          BL       uart_putchar
00384c  210a              MOVS     r1,#0xa
00384e  4841              LDR      r0,|L1.14676|
003850  f7fffffe          BL       uart_putchar
003854  210a              MOVS     r1,#0xa
003856  483f              LDR      r0,|L1.14676|
003858  f7fffffe          BL       uart_putchar
00385c  210a              MOVS     r1,#0xa
00385e  483d              LDR      r0,|L1.14676|
003860  f7fffffe          BL       uart_putchar
003864  210a              MOVS     r1,#0xa
003866  483b              LDR      r0,|L1.14676|
003868  f7fffffe          BL       uart_putchar
00386c  210a              MOVS     r1,#0xa
00386e  4839              LDR      r0,|L1.14676|
003870  f7fffffe          BL       uart_putchar
003874  210a              MOVS     r1,#0xa
003876  4837              LDR      r0,|L1.14676|
003878  f7fffffe          BL       uart_putchar
00387c  210a              MOVS     r1,#0xa
00387e  4835              LDR      r0,|L1.14676|
003880  f7fffffe          BL       uart_putchar
003884  210a              MOVS     r1,#0xa
003886  4833              LDR      r0,|L1.14676|
003888  f7fffffe          BL       uart_putchar
00388c  210a              MOVS     r1,#0xa
00388e  4831              LDR      r0,|L1.14676|
003890  f7fffffe          BL       uart_putchar
003894  210a              MOVS     r1,#0xa
003896  482f              LDR      r0,|L1.14676|
003898  f7fffffe          BL       uart_putchar
00389c  210a              MOVS     r1,#0xa
00389e  482d              LDR      r0,|L1.14676|
0038a0  f7fffffe          BL       uart_putchar
0038a4  210a              MOVS     r1,#0xa
0038a6  482b              LDR      r0,|L1.14676|
0038a8  f7fffffe          BL       uart_putchar
0038ac  210a              MOVS     r1,#0xa
0038ae  4829              LDR      r0,|L1.14676|
0038b0  f7fffffe          BL       uart_putchar
0038b4  210a              MOVS     r1,#0xa
0038b6  4827              LDR      r0,|L1.14676|
0038b8  f7fffffe          BL       uart_putchar
0038bc  210a              MOVS     r1,#0xa
0038be  4825              LDR      r0,|L1.14676|
0038c0  f7fffffe          BL       uart_putchar
0038c4  210a              MOVS     r1,#0xa
0038c6  4823              LDR      r0,|L1.14676|
0038c8  f7fffffe          BL       uart_putchar
0038cc  210a              MOVS     r1,#0xa
0038ce  4821              LDR      r0,|L1.14676|
0038d0  f7fffffe          BL       uart_putchar
0038d4  210a              MOVS     r1,#0xa
0038d6  481f              LDR      r0,|L1.14676|
0038d8  f7fffffe          BL       uart_putchar
0038dc  210a              MOVS     r1,#0xa
0038de  481d              LDR      r0,|L1.14676|
0038e0  f7fffffe          BL       uart_putchar
0038e4  210a              MOVS     r1,#0xa
0038e6  481b              LDR      r0,|L1.14676|
0038e8  f7fffffe          BL       uart_putchar
0038ec  210a              MOVS     r1,#0xa
0038ee  4819              LDR      r0,|L1.14676|
0038f0  f7fffffe          BL       uart_putchar
0038f4  210a              MOVS     r1,#0xa
0038f6  4817              LDR      r0,|L1.14676|
0038f8  f7fffffe          BL       uart_putchar
0038fc  210a              MOVS     r1,#0xa
0038fe  4815              LDR      r0,|L1.14676|
003900  f7fffffe          BL       uart_putchar
003904  210a              MOVS     r1,#0xa
003906  4813              LDR      r0,|L1.14676|
003908  f7fffffe          BL       uart_putchar
00390c  210a              MOVS     r1,#0xa
00390e  4811              LDR      r0,|L1.14676|
003910  f7fffffe          BL       uart_putchar
003914  210a              MOVS     r1,#0xa
003916  480f              LDR      r0,|L1.14676|
003918  f7fffffe          BL       uart_putchar
00391c  210a              MOVS     r1,#0xa
00391e  480d              LDR      r0,|L1.14676|
003920  f7fffffe          BL       uart_putchar
003924  210a              MOVS     r1,#0xa
003926  480b              LDR      r0,|L1.14676|
003928  f7fffffe          BL       uart_putchar
00392c  210a              MOVS     r1,#0xa
00392e  e015              B        |L1.14684|
                  |L1.14640|
                          DCD      at_
                  |L1.14644|
                          DCD      data
                  |L1.14648|
                          DCD      drive
                  |L1.14652|
                          DCD      ||.text||+0xd50
                  |L1.14656|
                          DCD      ||.text||+0x910
                  |L1.14660|
003944  3e00              DCB      ">",0
003946  00                DCB      0
003947  00                DCB      0
                  |L1.14664|
                          DCD      ||k2||
                  |L1.14668|
                          DCD      tout
                  |L1.14672|
                          DCD      k
                  |L1.14676|
                          DCD      0x4006b000
                  |L1.14680|
                          DCD      uart_string_gsm
                  |L1.14684|
00395c  48fe              LDR      r0,|L1.15704|
00395e  f7fffffe          BL       uart_putchar
003962  210a              MOVS     r1,#0xa
003964  48fc              LDR      r0,|L1.15704|
003966  f7fffffe          BL       uart_putchar
00396a  210a              MOVS     r1,#0xa
00396c  48fa              LDR      r0,|L1.15704|
00396e  f7fffffe          BL       uart_putchar
003972  210a              MOVS     r1,#0xa
003974  48f8              LDR      r0,|L1.15704|
003976  f7fffffe          BL       uart_putchar
00397a  210a              MOVS     r1,#0xa
00397c  48f6              LDR      r0,|L1.15704|
00397e  f7fffffe          BL       uart_putchar
003982  210a              MOVS     r1,#0xa
003984  48f4              LDR      r0,|L1.15704|
003986  f7fffffe          BL       uart_putchar
00398a  210a              MOVS     r1,#0xa
00398c  48f2              LDR      r0,|L1.15704|
00398e  f7fffffe          BL       uart_putchar
003992  210a              MOVS     r1,#0xa
003994  48f0              LDR      r0,|L1.15704|
003996  f7fffffe          BL       uart_putchar
00399a  210a              MOVS     r1,#0xa
00399c  48ee              LDR      r0,|L1.15704|
00399e  f7fffffe          BL       uart_putchar
0039a2  210a              MOVS     r1,#0xa
0039a4  48ec              LDR      r0,|L1.15704|
0039a6  f7fffffe          BL       uart_putchar
0039aa  210a              MOVS     r1,#0xa
0039ac  48ea              LDR      r0,|L1.15704|
0039ae  f7fffffe          BL       uart_putchar
0039b2  210a              MOVS     r1,#0xa
0039b4  48e8              LDR      r0,|L1.15704|
0039b6  f7fffffe          BL       uart_putchar
0039ba  210a              MOVS     r1,#0xa
0039bc  48e6              LDR      r0,|L1.15704|
0039be  f7fffffe          BL       uart_putchar
0039c2  210a              MOVS     r1,#0xa
0039c4  48e4              LDR      r0,|L1.15704|
0039c6  f7fffffe          BL       uart_putchar
0039ca  210a              MOVS     r1,#0xa
0039cc  48e2              LDR      r0,|L1.15704|
0039ce  f7fffffe          BL       uart_putchar
0039d2  210a              MOVS     r1,#0xa
0039d4  48e0              LDR      r0,|L1.15704|
0039d6  f7fffffe          BL       uart_putchar
0039da  210a              MOVS     r1,#0xa
0039dc  48de              LDR      r0,|L1.15704|
0039de  f7fffffe          BL       uart_putchar
0039e2  210a              MOVS     r1,#0xa
0039e4  48dc              LDR      r0,|L1.15704|
0039e6  f7fffffe          BL       uart_putchar
0039ea  210a              MOVS     r1,#0xa
0039ec  48da              LDR      r0,|L1.15704|
0039ee  f7fffffe          BL       uart_putchar
0039f2  210a              MOVS     r1,#0xa
0039f4  48d8              LDR      r0,|L1.15704|
0039f6  f7fffffe          BL       uart_putchar
0039fa  210a              MOVS     r1,#0xa
0039fc  48d6              LDR      r0,|L1.15704|
0039fe  f7fffffe          BL       uart_putchar
003a02  210a              MOVS     r1,#0xa
003a04  48d4              LDR      r0,|L1.15704|
003a06  f7fffffe          BL       uart_putchar
003a0a  210a              MOVS     r1,#0xa
003a0c  48d2              LDR      r0,|L1.15704|
003a0e  f7fffffe          BL       uart_putchar
003a12  210a              MOVS     r1,#0xa
003a14  48d0              LDR      r0,|L1.15704|
003a16  f7fffffe          BL       uart_putchar
003a1a  210a              MOVS     r1,#0xa
003a1c  48ce              LDR      r0,|L1.15704|
003a1e  f7fffffe          BL       uart_putchar
003a22  210a              MOVS     r1,#0xa
003a24  48cc              LDR      r0,|L1.15704|
003a26  f7fffffe          BL       uart_putchar
;;;1130   									//memset(data,0,1000);
;;;1131   														//timer counts to wait for characters in uart 1 									
;;;1132   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003a2a  bf00              NOP      
                  |L1.14892|
003a2c  49cb              LDR      r1,|L1.15708|
003a2e  48cc              LDR      r0,|L1.15712|
003a30  f7fffffe          BL       strstr
003a34  2800              CMP      r0,#0
003a36  d109              BNE      |L1.14924|
003a38  49ca              LDR      r1,|L1.15716|
003a3a  48c9              LDR      r0,|L1.15712|
003a3c  f7fffffe          BL       strstr
003a40  2800              CMP      r0,#0
003a42  d103              BNE      |L1.14924|
003a44  48c8              LDR      r0,|L1.15720|
003a46  6800              LDR      r0,[r0,#0]  ; tout
003a48  2805              CMP      r0,#5
003a4a  ddef              BLE      |L1.14892|
                  |L1.14924|
;;;1133   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1134   									}
;;;1135   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003a4c  f7fffffe          BL       clear
;;;1136   									//clear();
;;;1137   									memset(data,0,strlen(data));
003a50  48c6              LDR      r0,|L1.15724|
003a52  f7fffffe          BL       strlen
003a56  4604              MOV      r4,r0
003a58  4621              MOV      r1,r4
003a5a  48c4              LDR      r0,|L1.15724|
003a5c  f7fffffe          BL       __aeabi_memclr
;;;1138   									clear();
003a60  f7fffffe          BL       clear
;;;1139   
;;;1140   								
;;;1141   						//		
;;;1142   }
003a64  bd38              POP      {r3-r5,pc}
;;;1143   
                          ENDP

                  send_bal PROC
;;;1424   		
;;;1425   	void send_bal(){
003a66  b538              PUSH     {r3-r5,lr}
;;;1426   	
;;;1427   	
;;;1428   								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;1429   						
;;;1430   								cond=mystrstr(uart_string_gsm,'>');
003a68  213e              MOVS     r1,#0x3e
003a6a  48bd              LDR      r0,|L1.15712|
003a6c  f7fffffe          BL       mystrstr
003a70  49bf              LDR      r1,|L1.15728|
003a72  7008              STRB     r0,[r1,#0]
;;;1431   								if(cond)	
003a74  4608              MOV      r0,r1
003a76  7800              LDRB     r0,[r0,#0]  ; cond
003a78  2800              CMP      r0,#0
003a7a  d07c              BEQ      |L1.15222|
;;;1432   								{
;;;1433   									
;;;1434   									clear();
003a7c  f7fffffe          BL       clear
;;;1435   									memset(uart_string_gsm,0,5000);
003a80  49bc              LDR      r1,|L1.15732|
003a82  48b7              LDR      r0,|L1.15712|
003a84  f7fffffe          BL       __aeabi_memclr
;;;1436   									strcat(data,"\n");
003a88  a1bb              ADR      r1,|L1.15736|
003a8a  48b8              LDR      r0,|L1.15724|
003a8c  f7fffffe          BL       strcat
;;;1437   									len=strlen(data);
003a90  48b6              LDR      r0,|L1.15724|
003a92  f7fffffe          BL       strlen
003a96  49b9              LDR      r1,|L1.15740|
003a98  6008              STR      r0,[r1,#0]  ; len
;;;1438   									tout=0;
003a9a  2000              MOVS     r0,#0
003a9c  49b2              LDR      r1,|L1.15720|
003a9e  6008              STR      r0,[r1,#0]  ; tout
;;;1439   									k2=0;
003aa0  49b7              LDR      r1,|L1.15744|
003aa2  6008              STR      r0,[r1,#0]  ; k2
;;;1440   									for(k=0;k<len;k++)
003aa4  49b7              LDR      r1,|L1.15748|
003aa6  6008              STR      r0,[r1,#0]  ; k
003aa8  e00b              B        |L1.15042|
                  |L1.15018|
;;;1441   									{
;;;1442   										uart_putchar(UART1_BASE_PTR, data[k]);
003aaa  48b0              LDR      r0,|L1.15724|
003aac  4ab5              LDR      r2,|L1.15748|
003aae  6812              LDR      r2,[r2,#0]  ; k
003ab0  5c81              LDRB     r1,[r0,r2]
003ab2  48a9              LDR      r0,|L1.15704|
003ab4  f7fffffe          BL       uart_putchar
003ab8  48b2              LDR      r0,|L1.15748|
003aba  6800              LDR      r0,[r0,#0]            ;1440  ; k
003abc  1c40              ADDS     r0,r0,#1              ;1440
003abe  49b1              LDR      r1,|L1.15748|
003ac0  6008              STR      r0,[r1,#0]            ;1440  ; k
                  |L1.15042|
003ac2  48b0              LDR      r0,|L1.15748|
003ac4  6800              LDR      r0,[r0,#0]            ;1440  ; k
003ac6  49ad              LDR      r1,|L1.15740|
003ac8  6809              LDR      r1,[r1,#0]            ;1440  ; len
003aca  4288              CMP      r0,r1                 ;1440
003acc  dbed              BLT      |L1.15018|
;;;1443   									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
003ace  211a              MOVS     r1,#0x1a
003ad0  48a1              LDR      r0,|L1.15704|
003ad2  f7fffffe          BL       uart_putchar
003ad6  211a              MOVS     r1,#0x1a
003ad8  489f              LDR      r0,|L1.15704|
003ada  f7fffffe          BL       uart_putchar
003ade  211a              MOVS     r1,#0x1a
003ae0  489d              LDR      r0,|L1.15704|
003ae2  f7fffffe          BL       uart_putchar
;;;1444   									do
003ae6  bf00              NOP      
                  |L1.15080|
;;;1445   																{stcond1=strstr(uart_string_gsm,"OK\r\n");
003ae8  499c              LDR      r1,|L1.15708|
003aea  489d              LDR      r0,|L1.15712|
003aec  f7fffffe          BL       strstr
003af0  49a5              LDR      r1,|L1.15752|
003af2  6008              STR      r0,[r1,#0]  ; stcond1
;;;1446   																	stcond2=strstr(uart_string_gsm, "ERROR");
003af4  499b              LDR      r1,|L1.15716|
003af6  489a              LDR      r0,|L1.15712|
003af8  f7fffffe          BL       strstr
003afc  49a3              LDR      r1,|L1.15756|
003afe  6008              STR      r0,[r1,#0]  ; stcond2
;;;1447   																		stcond3=strstr(uart_string_gsm, "FAIL");	
003b00  49a3              LDR      r1,|L1.15760|
003b02  4897              LDR      r0,|L1.15712|
003b04  f7fffffe          BL       strstr
003b08  49a2              LDR      r1,|L1.15764|
003b0a  6008              STR      r0,[r1,#0]  ; stcond3
;;;1448   																			stcond4=strstr(uart_string_gsm, "DEACT");	
003b0c  4995              LDR      r1,|L1.15716|
003b0e  3118              ADDS     r1,r1,#0x18
003b10  4893              LDR      r0,|L1.15712|
003b12  f7fffffe          BL       strstr
003b16  49a0              LDR      r1,|L1.15768|
003b18  6008              STR      r0,[r1,#0]  ; stcond4
;;;1449   																	
;;;1450   																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 10) ) ); //|| (timeout < 1)   
003b1a  489c              LDR      r0,|L1.15756|
003b1c  6800              LDR      r0,[r0,#0]  ; stcond2
003b1e  2800              CMP      r0,#0
003b20  d10f              BNE      |L1.15170|
003b22  489c              LDR      r0,|L1.15764|
003b24  6800              LDR      r0,[r0,#0]  ; stcond3
003b26  2800              CMP      r0,#0
003b28  d10b              BNE      |L1.15170|
003b2a  4608              MOV      r0,r1
003b2c  6800              LDR      r0,[r0,#0]  ; stcond4
003b2e  2800              CMP      r0,#0
003b30  d107              BNE      |L1.15170|
003b32  4895              LDR      r0,|L1.15752|
003b34  6800              LDR      r0,[r0,#0]  ; stcond1
003b36  2800              CMP      r0,#0
003b38  d103              BNE      |L1.15170|
003b3a  488b              LDR      r0,|L1.15720|
003b3c  6800              LDR      r0,[r0,#0]  ; tout
003b3e  280a              CMP      r0,#0xa
003b40  ddd2              BLE      |L1.15080|
                  |L1.15170|
;;;1451   																delay(10);clear();
003b42  200a              MOVS     r0,#0xa
003b44  f7fffffe          BL       delay
003b48  f7fffffe          BL       clear
;;;1452   														uart_putchar(UART1_BASE_PTR,0x1A);
003b4c  211a              MOVS     r1,#0x1a
003b4e  4882              LDR      r0,|L1.15704|
003b50  f7fffffe          BL       uart_putchar
;;;1453   												delay(10);
003b54  200a              MOVS     r0,#0xa
003b56  f7fffffe          BL       delay
;;;1454   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
003b5a  211a              MOVS     r1,#0x1a
003b5c  487e              LDR      r0,|L1.15704|
003b5e  f7fffffe          BL       uart_putchar
003b62  211a              MOVS     r1,#0x1a
003b64  487c              LDR      r0,|L1.15704|
003b66  f7fffffe          BL       uart_putchar
003b6a  211a              MOVS     r1,#0x1a
003b6c  487a              LDR      r0,|L1.15704|
003b6e  f7fffffe          BL       uart_putchar
003b72  e164              B        |L1.15934|
003b74  e7ff              B        |L1.15222|
                  |L1.15222|
;;;1455   				
;;;1456   								}
;;;1457   								else{
;;;1458   								
;;;1459   								
;;;1460   	delay(100);
003b76  2064              MOVS     r0,#0x64
003b78  f7fffffe          BL       delay
;;;1461   		clear();//memset(uart_string_gsm,0,5000);
003b7c  f7fffffe          BL       clear
;;;1462   	
;;;1463   	memset(at_,0,100);
003b80  2164              MOVS     r1,#0x64
003b82  4886              LDR      r0,|L1.15772|
003b84  f7fffffe          BL       __aeabi_memclr
;;;1464   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003b88  4878              LDR      r0,|L1.15724|
003b8a  f7fffffe          BL       strlen
003b8e  1c44              ADDS     r4,r0,#1
003b90  4623              MOV      r3,r4
003b92  4a83              LDR      r2,|L1.15776|
003b94  4971              LDR      r1,|L1.15708|
003b96  3938              SUBS     r1,r1,#0x38
003b98  4880              LDR      r0,|L1.15772|
003b9a  f7fffffe          BL       __2sprintf
;;;1465   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003b9e  2005              MOVS     r0,#5
003ba0  4b70              LDR      r3,|L1.15716|
003ba2  461a              MOV      r2,r3
003ba4  3a70              SUBS     r2,r2,#0x70
003ba6  a17f              ADR      r1,|L1.15780|
003ba8  9000              STR      r0,[sp,#0]
003baa  487c              LDR      r0,|L1.15772|
003bac  f7fffffe          BL       send_SD
;;;1466   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1467   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1468   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1469   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1470   //	}
;;;1471   	
;;;1472   clear();	
003bb0  f7fffffe          BL       clear
;;;1473   									k2=0;									//string array counter for uart 1
003bb4  2000              MOVS     r0,#0
003bb6  4972              LDR      r1,|L1.15744|
003bb8  6008              STR      r0,[r1,#0]  ; k2
;;;1474   									tout=0;	
003bba  496b              LDR      r1,|L1.15720|
003bbc  6008              STR      r0,[r1,#0]  ; tout
;;;1475   		for(k=0;k<strlen(data);k++)
003bbe  4971              LDR      r1,|L1.15748|
003bc0  6008              STR      r0,[r1,#0]  ; k
003bc2  e00b              B        |L1.15324|
                  |L1.15300|
;;;1476   		{
;;;1477   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
003bc4  4869              LDR      r0,|L1.15724|
003bc6  4a6f              LDR      r2,|L1.15748|
003bc8  6812              LDR      r2,[r2,#0]  ; k
003bca  5c81              LDRB     r1,[r0,r2]
003bcc  4862              LDR      r0,|L1.15704|
003bce  f7fffffe          BL       uart_putchar
003bd2  486c              LDR      r0,|L1.15748|
003bd4  6800              LDR      r0,[r0,#0]            ;1475  ; k
003bd6  1c40              ADDS     r0,r0,#1              ;1475
003bd8  496a              LDR      r1,|L1.15748|
003bda  6008              STR      r0,[r1,#0]            ;1475  ; k
                  |L1.15324|
003bdc  4863              LDR      r0,|L1.15724|
003bde  f7fffffe          BL       strlen
003be2  4968              LDR      r1,|L1.15748|
003be4  6809              LDR      r1,[r1,#0]            ;1475  ; k
003be6  4288              CMP      r0,r1                 ;1475
003be8  d8ec              BHI      |L1.15300|
;;;1478   		}	
;;;1479   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
003bea  210a              MOVS     r1,#0xa
003bec  485a              LDR      r0,|L1.15704|
003bee  f7fffffe          BL       uart_putchar
003bf2  210a              MOVS     r1,#0xa
003bf4  4858              LDR      r0,|L1.15704|
003bf6  f7fffffe          BL       uart_putchar
003bfa  210a              MOVS     r1,#0xa
003bfc  4856              LDR      r0,|L1.15704|
003bfe  f7fffffe          BL       uart_putchar
003c02  210a              MOVS     r1,#0xa
003c04  4854              LDR      r0,|L1.15704|
003c06  f7fffffe          BL       uart_putchar
003c0a  210a              MOVS     r1,#0xa
003c0c  4852              LDR      r0,|L1.15704|
003c0e  f7fffffe          BL       uart_putchar
003c12  210a              MOVS     r1,#0xa
003c14  4850              LDR      r0,|L1.15704|
003c16  f7fffffe          BL       uart_putchar
003c1a  210a              MOVS     r1,#0xa
003c1c  484e              LDR      r0,|L1.15704|
003c1e  f7fffffe          BL       uart_putchar
003c22  210a              MOVS     r1,#0xa
003c24  484c              LDR      r0,|L1.15704|
003c26  f7fffffe          BL       uart_putchar
003c2a  210a              MOVS     r1,#0xa
003c2c  484a              LDR      r0,|L1.15704|
003c2e  f7fffffe          BL       uart_putchar
003c32  210a              MOVS     r1,#0xa
003c34  4848              LDR      r0,|L1.15704|
003c36  f7fffffe          BL       uart_putchar
003c3a  210a              MOVS     r1,#0xa
003c3c  4846              LDR      r0,|L1.15704|
003c3e  f7fffffe          BL       uart_putchar
003c42  210a              MOVS     r1,#0xa
003c44  4844              LDR      r0,|L1.15704|
003c46  f7fffffe          BL       uart_putchar
003c4a  210a              MOVS     r1,#0xa
003c4c  4842              LDR      r0,|L1.15704|
003c4e  f7fffffe          BL       uart_putchar
003c52  210a              MOVS     r1,#0xa
003c54  4840              LDR      r0,|L1.15704|
003c56  f7fffffe          BL       uart_putchar
003c5a  210a              MOVS     r1,#0xa
003c5c  483e              LDR      r0,|L1.15704|
003c5e  f7fffffe          BL       uart_putchar
003c62  210a              MOVS     r1,#0xa
003c64  483c              LDR      r0,|L1.15704|
003c66  f7fffffe          BL       uart_putchar
003c6a  210a              MOVS     r1,#0xa
003c6c  483a              LDR      r0,|L1.15704|
003c6e  f7fffffe          BL       uart_putchar
003c72  210a              MOVS     r1,#0xa
003c74  4838              LDR      r0,|L1.15704|
003c76  f7fffffe          BL       uart_putchar
003c7a  210a              MOVS     r1,#0xa
003c7c  4836              LDR      r0,|L1.15704|
003c7e  f7fffffe          BL       uart_putchar
003c82  210a              MOVS     r1,#0xa
003c84  4834              LDR      r0,|L1.15704|
003c86  f7fffffe          BL       uart_putchar
003c8a  210a              MOVS     r1,#0xa
003c8c  4832              LDR      r0,|L1.15704|
003c8e  f7fffffe          BL       uart_putchar
003c92  210a              MOVS     r1,#0xa
003c94  4830              LDR      r0,|L1.15704|
003c96  f7fffffe          BL       uart_putchar
003c9a  210a              MOVS     r1,#0xa
003c9c  482e              LDR      r0,|L1.15704|
003c9e  f7fffffe          BL       uart_putchar
003ca2  210a              MOVS     r1,#0xa
003ca4  482c              LDR      r0,|L1.15704|
003ca6  f7fffffe          BL       uart_putchar
003caa  210a              MOVS     r1,#0xa
003cac  482a              LDR      r0,|L1.15704|
003cae  f7fffffe          BL       uart_putchar
003cb2  210a              MOVS     r1,#0xa
003cb4  4828              LDR      r0,|L1.15704|
003cb6  f7fffffe          BL       uart_putchar
003cba  210a              MOVS     r1,#0xa
003cbc  4826              LDR      r0,|L1.15704|
003cbe  f7fffffe          BL       uart_putchar
003cc2  210a              MOVS     r1,#0xa
003cc4  4824              LDR      r0,|L1.15704|
003cc6  f7fffffe          BL       uart_putchar
003cca  210a              MOVS     r1,#0xa
003ccc  4822              LDR      r0,|L1.15704|
003cce  f7fffffe          BL       uart_putchar
003cd2  210a              MOVS     r1,#0xa
003cd4  4820              LDR      r0,|L1.15704|
003cd6  f7fffffe          BL       uart_putchar
003cda  210a              MOVS     r1,#0xa
003cdc  481e              LDR      r0,|L1.15704|
003cde  f7fffffe          BL       uart_putchar
003ce2  210a              MOVS     r1,#0xa
003ce4  481c              LDR      r0,|L1.15704|
003ce6  f7fffffe          BL       uart_putchar
003cea  210a              MOVS     r1,#0xa
003cec  481a              LDR      r0,|L1.15704|
003cee  f7fffffe          BL       uart_putchar
003cf2  210a              MOVS     r1,#0xa
003cf4  4818              LDR      r0,|L1.15704|
003cf6  f7fffffe          BL       uart_putchar
003cfa  210a              MOVS     r1,#0xa
003cfc  4816              LDR      r0,|L1.15704|
003cfe  f7fffffe          BL       uart_putchar
003d02  210a              MOVS     r1,#0xa
003d04  4814              LDR      r0,|L1.15704|
003d06  f7fffffe          BL       uart_putchar
003d0a  210a              MOVS     r1,#0xa
003d0c  4812              LDR      r0,|L1.15704|
003d0e  f7fffffe          BL       uart_putchar
003d12  210a              MOVS     r1,#0xa
003d14  4810              LDR      r0,|L1.15704|
003d16  f7fffffe          BL       uart_putchar
003d1a  210a              MOVS     r1,#0xa
003d1c  480e              LDR      r0,|L1.15704|
003d1e  f7fffffe          BL       uart_putchar
003d22  210a              MOVS     r1,#0xa
003d24  480c              LDR      r0,|L1.15704|
003d26  f7fffffe          BL       uart_putchar
003d2a  210a              MOVS     r1,#0xa
003d2c  480a              LDR      r0,|L1.15704|
003d2e  f7fffffe          BL       uart_putchar
003d32  210a              MOVS     r1,#0xa
003d34  4808              LDR      r0,|L1.15704|
003d36  f7fffffe          BL       uart_putchar
003d3a  210a              MOVS     r1,#0xa
003d3c  4806              LDR      r0,|L1.15704|
003d3e  f7fffffe          BL       uart_putchar
003d42  210a              MOVS     r1,#0xa
003d44  4804              LDR      r0,|L1.15704|
003d46  f7fffffe          BL       uart_putchar
003d4a  210a              MOVS     r1,#0xa
003d4c  4802              LDR      r0,|L1.15704|
003d4e  f7fffffe          BL       uart_putchar
003d52  210a              MOVS     r1,#0xa
003d54  4800              LDR      r0,|L1.15704|
003d56  e027              B        |L1.15784|
                  |L1.15704|
                          DCD      0x4006b000
                  |L1.15708|
                          DCD      ||.text||+0xd88
                  |L1.15712|
                          DCD      uart_string_gsm
                  |L1.15716|
                          DCD      ||.text||+0x910
                  |L1.15720|
                          DCD      tout
                  |L1.15724|
                          DCD      data
                  |L1.15728|
                          DCD      cond
                  |L1.15732|
                          DCD      0x00001388
                  |L1.15736|
003d78  0a00              DCB      "\n",0
003d7a  00                DCB      0
003d7b  00                DCB      0
                  |L1.15740|
                          DCD      len
                  |L1.15744|
                          DCD      ||k2||
                  |L1.15748|
                          DCD      k
                  |L1.15752|
                          DCD      stcond1
                  |L1.15756|
                          DCD      stcond2
                  |L1.15760|
                          DCD      ||.text||+0x128c
                  |L1.15764|
                          DCD      stcond3
                  |L1.15768|
                          DCD      stcond4
                  |L1.15772|
                          DCD      at_
                  |L1.15776|
                          DCD      drive
                  |L1.15780|
003da4  3e00              DCB      ">",0
003da6  00                DCB      0
003da7  00                DCB      0
                  |L1.15784|
003da8  f7fffffe          BL       uart_putchar
003dac  210a              MOVS     r1,#0xa
003dae  48fe              LDR      r0,|L1.16808|
003db0  f7fffffe          BL       uart_putchar
003db4  210a              MOVS     r1,#0xa
003db6  48fc              LDR      r0,|L1.16808|
003db8  f7fffffe          BL       uart_putchar
003dbc  210a              MOVS     r1,#0xa
003dbe  48fa              LDR      r0,|L1.16808|
003dc0  f7fffffe          BL       uart_putchar
003dc4  210a              MOVS     r1,#0xa
003dc6  48f8              LDR      r0,|L1.16808|
003dc8  f7fffffe          BL       uart_putchar
003dcc  210a              MOVS     r1,#0xa
003dce  48f6              LDR      r0,|L1.16808|
003dd0  f7fffffe          BL       uart_putchar
003dd4  210a              MOVS     r1,#0xa
003dd6  48f4              LDR      r0,|L1.16808|
003dd8  f7fffffe          BL       uart_putchar
003ddc  210a              MOVS     r1,#0xa
003dde  48f2              LDR      r0,|L1.16808|
003de0  f7fffffe          BL       uart_putchar
003de4  210a              MOVS     r1,#0xa
003de6  48f0              LDR      r0,|L1.16808|
003de8  f7fffffe          BL       uart_putchar
003dec  210a              MOVS     r1,#0xa
003dee  48ee              LDR      r0,|L1.16808|
003df0  f7fffffe          BL       uart_putchar
003df4  210a              MOVS     r1,#0xa
003df6  48ec              LDR      r0,|L1.16808|
003df8  f7fffffe          BL       uart_putchar
003dfc  210a              MOVS     r1,#0xa
003dfe  48ea              LDR      r0,|L1.16808|
003e00  f7fffffe          BL       uart_putchar
;;;1480   									//memset(data,0,1000);
;;;1481   														//timer counts to wait for characters in uart 1 									
;;;1482   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003e04  bf00              NOP      
                  |L1.15878|
003e06  49e9              LDR      r1,|L1.16812|
003e08  48e9              LDR      r0,|L1.16816|
003e0a  f7fffffe          BL       strstr
003e0e  2800              CMP      r0,#0
003e10  d109              BNE      |L1.15910|
003e12  49e8              LDR      r1,|L1.16820|
003e14  48e6              LDR      r0,|L1.16816|
003e16  f7fffffe          BL       strstr
003e1a  2800              CMP      r0,#0
003e1c  d103              BNE      |L1.15910|
003e1e  48e6              LDR      r0,|L1.16824|
003e20  6800              LDR      r0,[r0,#0]  ; tout
003e22  2805              CMP      r0,#5
003e24  ddef              BLE      |L1.15878|
                  |L1.15910|
;;;1483   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1484   									}
;;;1485   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003e26  f7fffffe          BL       clear
;;;1486   									//clear();
;;;1487   									memset(data,0,strlen(data));
003e2a  48e4              LDR      r0,|L1.16828|
003e2c  f7fffffe          BL       strlen
003e30  4604              MOV      r4,r0
003e32  4621              MOV      r1,r4
003e34  48e1              LDR      r0,|L1.16828|
003e36  f7fffffe          BL       __aeabi_memclr
;;;1488   									clear();
003e3a  f7fffffe          BL       clear
                  |L1.15934|
;;;1489   
;;;1490   								
;;;1491   								
;;;1492   								//log_it;
;;;1493   									
;;;1494   								}
;;;1495   con1d=strstr(uart_string_gsm,"OK");		
003e3e  a1e0              ADR      r1,|L1.16832|
003e40  48db              LDR      r0,|L1.16816|
003e42  f7fffffe          BL       strstr
003e46  49df              LDR      r1,|L1.16836|
003e48  6008              STR      r0,[r1,#0]  ; con1d
;;;1496   								if(!con1d){
003e4a  4608              MOV      r0,r1
003e4c  6800              LDR      r0,[r0,#0]  ; con1d
003e4e  2800              CMP      r0,#0
003e50  d17e              BNE      |L1.16208|
;;;1497   									
;;;1498   									
;;;1499   	delay(100);
003e52  2064              MOVS     r0,#0x64
003e54  f7fffffe          BL       delay
;;;1500   		clear();//memset(uart_string_gsm,0,5000);
003e58  f7fffffe          BL       clear
;;;1501   	
;;;1502   	memset(at_,0,100);
003e5c  2164              MOVS     r1,#0x64
003e5e  48da              LDR      r0,|L1.16840|
003e60  f7fffffe          BL       __aeabi_memclr
;;;1503   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003e64  48d5              LDR      r0,|L1.16828|
003e66  f7fffffe          BL       strlen
003e6a  1c44              ADDS     r4,r0,#1
003e6c  4623              MOV      r3,r4
003e6e  4ad7              LDR      r2,|L1.16844|
003e70  49ce              LDR      r1,|L1.16812|
003e72  3938              SUBS     r1,r1,#0x38
003e74  48d4              LDR      r0,|L1.16840|
003e76  f7fffffe          BL       __2sprintf
;;;1504   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003e7a  2005              MOVS     r0,#5
003e7c  4bcd              LDR      r3,|L1.16820|
003e7e  461a              MOV      r2,r3
003e80  3a70              SUBS     r2,r2,#0x70
003e82  a1d3              ADR      r1,|L1.16848|
003e84  9000              STR      r0,[sp,#0]
003e86  48d0              LDR      r0,|L1.16840|
003e88  f7fffffe          BL       send_SD
;;;1505   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1506   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1507   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1508   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1509   //	}
;;;1510   	
;;;1511   clear();	
003e8c  f7fffffe          BL       clear
;;;1512   									k2=0;									//string array counter for uart 1
003e90  2000              MOVS     r0,#0
003e92  49d0              LDR      r1,|L1.16852|
003e94  6008              STR      r0,[r1,#0]  ; k2
;;;1513   									tout=0;	
003e96  49c8              LDR      r1,|L1.16824|
003e98  6008              STR      r0,[r1,#0]  ; tout
;;;1514   		for(k=0;k<strlen(data);k++)
003e9a  49cf              LDR      r1,|L1.16856|
003e9c  6008              STR      r0,[r1,#0]  ; k
003e9e  e00b              B        |L1.16056|
                  |L1.16032|
;;;1515   		{
;;;1516   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
003ea0  48c6              LDR      r0,|L1.16828|
003ea2  4acd              LDR      r2,|L1.16856|
003ea4  6812              LDR      r2,[r2,#0]  ; k
003ea6  5c81              LDRB     r1,[r0,r2]
003ea8  48bf              LDR      r0,|L1.16808|
003eaa  f7fffffe          BL       uart_putchar
003eae  48ca              LDR      r0,|L1.16856|
003eb0  6800              LDR      r0,[r0,#0]            ;1514  ; k
003eb2  1c40              ADDS     r0,r0,#1              ;1514
003eb4  49c8              LDR      r1,|L1.16856|
003eb6  6008              STR      r0,[r1,#0]            ;1514  ; k
                  |L1.16056|
003eb8  48c0              LDR      r0,|L1.16828|
003eba  f7fffffe          BL       strlen
003ebe  49c6              LDR      r1,|L1.16856|
003ec0  6809              LDR      r1,[r1,#0]            ;1514  ; k
003ec2  4288              CMP      r0,r1                 ;1514
003ec4  d8ec              BHI      |L1.16032|
;;;1517   		}	
;;;1518   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
003ec6  210a              MOVS     r1,#0xa
003ec8  48b7              LDR      r0,|L1.16808|
003eca  f7fffffe          BL       uart_putchar
003ece  210a              MOVS     r1,#0xa
003ed0  48b5              LDR      r0,|L1.16808|
003ed2  f7fffffe          BL       uart_putchar
003ed6  210a              MOVS     r1,#0xa
003ed8  48b3              LDR      r0,|L1.16808|
003eda  f7fffffe          BL       uart_putchar
003ede  210a              MOVS     r1,#0xa
003ee0  48b1              LDR      r0,|L1.16808|
003ee2  f7fffffe          BL       uart_putchar
003ee6  210a              MOVS     r1,#0xa
003ee8  48af              LDR      r0,|L1.16808|
003eea  f7fffffe          BL       uart_putchar
003eee  210a              MOVS     r1,#0xa
003ef0  48ad              LDR      r0,|L1.16808|
003ef2  f7fffffe          BL       uart_putchar
003ef6  210a              MOVS     r1,#0xa
003ef8  48ab              LDR      r0,|L1.16808|
003efa  f7fffffe          BL       uart_putchar
003efe  210a              MOVS     r1,#0xa
003f00  48a9              LDR      r0,|L1.16808|
003f02  f7fffffe          BL       uart_putchar
003f06  210a              MOVS     r1,#0xa
003f08  48a7              LDR      r0,|L1.16808|
003f0a  f7fffffe          BL       uart_putchar
003f0e  210a              MOVS     r1,#0xa
003f10  48a5              LDR      r0,|L1.16808|
003f12  f7fffffe          BL       uart_putchar
003f16  210a              MOVS     r1,#0xa
003f18  48a3              LDR      r0,|L1.16808|
003f1a  f7fffffe          BL       uart_putchar
003f1e  210a              MOVS     r1,#0xa
003f20  48a1              LDR      r0,|L1.16808|
003f22  f7fffffe          BL       uart_putchar
003f26  210a              MOVS     r1,#0xa
003f28  489f              LDR      r0,|L1.16808|
003f2a  f7fffffe          BL       uart_putchar
003f2e  210a              MOVS     r1,#0xa
003f30  489d              LDR      r0,|L1.16808|
003f32  f7fffffe          BL       uart_putchar
003f36  210a              MOVS     r1,#0xa
003f38  489b              LDR      r0,|L1.16808|
003f3a  f7fffffe          BL       uart_putchar
003f3e  210a              MOVS     r1,#0xa
003f40  4899              LDR      r0,|L1.16808|
003f42  f7fffffe          BL       uart_putchar
003f46  210a              MOVS     r1,#0xa
003f48  4897              LDR      r0,|L1.16808|
003f4a  f7fffffe          BL       uart_putchar
003f4e  e000              B        |L1.16210|
                  |L1.16208|
003f50  e0bc              B        |L1.16588|
                  |L1.16210|
003f52  210a              MOVS     r1,#0xa
003f54  4894              LDR      r0,|L1.16808|
003f56  f7fffffe          BL       uart_putchar
003f5a  210a              MOVS     r1,#0xa
003f5c  4892              LDR      r0,|L1.16808|
003f5e  f7fffffe          BL       uart_putchar
003f62  210a              MOVS     r1,#0xa
003f64  4890              LDR      r0,|L1.16808|
003f66  f7fffffe          BL       uart_putchar
003f6a  210a              MOVS     r1,#0xa
003f6c  488e              LDR      r0,|L1.16808|
003f6e  f7fffffe          BL       uart_putchar
003f72  210a              MOVS     r1,#0xa
003f74  488c              LDR      r0,|L1.16808|
003f76  f7fffffe          BL       uart_putchar
003f7a  210a              MOVS     r1,#0xa
003f7c  488a              LDR      r0,|L1.16808|
003f7e  f7fffffe          BL       uart_putchar
003f82  210a              MOVS     r1,#0xa
003f84  4888              LDR      r0,|L1.16808|
003f86  f7fffffe          BL       uart_putchar
003f8a  210a              MOVS     r1,#0xa
003f8c  4886              LDR      r0,|L1.16808|
003f8e  f7fffffe          BL       uart_putchar
003f92  210a              MOVS     r1,#0xa
003f94  4884              LDR      r0,|L1.16808|
003f96  f7fffffe          BL       uart_putchar
003f9a  210a              MOVS     r1,#0xa
003f9c  4882              LDR      r0,|L1.16808|
003f9e  f7fffffe          BL       uart_putchar
003fa2  210a              MOVS     r1,#0xa
003fa4  4880              LDR      r0,|L1.16808|
003fa6  f7fffffe          BL       uart_putchar
003faa  210a              MOVS     r1,#0xa
003fac  487e              LDR      r0,|L1.16808|
003fae  f7fffffe          BL       uart_putchar
003fb2  210a              MOVS     r1,#0xa
003fb4  487c              LDR      r0,|L1.16808|
003fb6  f7fffffe          BL       uart_putchar
003fba  210a              MOVS     r1,#0xa
003fbc  487a              LDR      r0,|L1.16808|
003fbe  f7fffffe          BL       uart_putchar
003fc2  210a              MOVS     r1,#0xa
003fc4  4878              LDR      r0,|L1.16808|
003fc6  f7fffffe          BL       uart_putchar
003fca  210a              MOVS     r1,#0xa
003fcc  4876              LDR      r0,|L1.16808|
003fce  f7fffffe          BL       uart_putchar
003fd2  210a              MOVS     r1,#0xa
003fd4  4874              LDR      r0,|L1.16808|
003fd6  f7fffffe          BL       uart_putchar
003fda  210a              MOVS     r1,#0xa
003fdc  4872              LDR      r0,|L1.16808|
003fde  f7fffffe          BL       uart_putchar
003fe2  210a              MOVS     r1,#0xa
003fe4  4870              LDR      r0,|L1.16808|
003fe6  f7fffffe          BL       uart_putchar
003fea  210a              MOVS     r1,#0xa
003fec  486e              LDR      r0,|L1.16808|
003fee  f7fffffe          BL       uart_putchar
003ff2  210a              MOVS     r1,#0xa
003ff4  486c              LDR      r0,|L1.16808|
003ff6  f7fffffe          BL       uart_putchar
003ffa  210a              MOVS     r1,#0xa
003ffc  486a              LDR      r0,|L1.16808|
003ffe  f7fffffe          BL       uart_putchar
004002  210a              MOVS     r1,#0xa
004004  4868              LDR      r0,|L1.16808|
004006  f7fffffe          BL       uart_putchar
00400a  210a              MOVS     r1,#0xa
00400c  4866              LDR      r0,|L1.16808|
00400e  f7fffffe          BL       uart_putchar
004012  210a              MOVS     r1,#0xa
004014  4864              LDR      r0,|L1.16808|
004016  f7fffffe          BL       uart_putchar
00401a  210a              MOVS     r1,#0xa
00401c  4862              LDR      r0,|L1.16808|
00401e  f7fffffe          BL       uart_putchar
004022  210a              MOVS     r1,#0xa
004024  4860              LDR      r0,|L1.16808|
004026  f7fffffe          BL       uart_putchar
00402a  210a              MOVS     r1,#0xa
00402c  485e              LDR      r0,|L1.16808|
00402e  f7fffffe          BL       uart_putchar
004032  210a              MOVS     r1,#0xa
004034  485c              LDR      r0,|L1.16808|
004036  f7fffffe          BL       uart_putchar
00403a  210a              MOVS     r1,#0xa
00403c  485a              LDR      r0,|L1.16808|
00403e  f7fffffe          BL       uart_putchar
004042  210a              MOVS     r1,#0xa
004044  4858              LDR      r0,|L1.16808|
004046  f7fffffe          BL       uart_putchar
00404a  210a              MOVS     r1,#0xa
00404c  4856              LDR      r0,|L1.16808|
00404e  f7fffffe          BL       uart_putchar
004052  210a              MOVS     r1,#0xa
004054  4854              LDR      r0,|L1.16808|
004056  f7fffffe          BL       uart_putchar
00405a  210a              MOVS     r1,#0xa
00405c  4852              LDR      r0,|L1.16808|
00405e  f7fffffe          BL       uart_putchar
004062  210a              MOVS     r1,#0xa
004064  4850              LDR      r0,|L1.16808|
004066  f7fffffe          BL       uart_putchar
00406a  210a              MOVS     r1,#0xa
00406c  484e              LDR      r0,|L1.16808|
00406e  f7fffffe          BL       uart_putchar
004072  210a              MOVS     r1,#0xa
004074  484c              LDR      r0,|L1.16808|
004076  f7fffffe          BL       uart_putchar
00407a  210a              MOVS     r1,#0xa
00407c  484a              LDR      r0,|L1.16808|
00407e  f7fffffe          BL       uart_putchar
004082  210a              MOVS     r1,#0xa
004084  4848              LDR      r0,|L1.16808|
004086  f7fffffe          BL       uart_putchar
00408a  210a              MOVS     r1,#0xa
00408c  4846              LDR      r0,|L1.16808|
00408e  f7fffffe          BL       uart_putchar
;;;1519   									//memset(data,0,1000);
;;;1520   														//timer counts to wait for characters in uart 1 									
;;;1521   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004092  bf00              NOP      
                  |L1.16532|
004094  4945              LDR      r1,|L1.16812|
004096  4846              LDR      r0,|L1.16816|
004098  f7fffffe          BL       strstr
00409c  2800              CMP      r0,#0
00409e  d109              BNE      |L1.16564|
0040a0  4944              LDR      r1,|L1.16820|
0040a2  4843              LDR      r0,|L1.16816|
0040a4  f7fffffe          BL       strstr
0040a8  2800              CMP      r0,#0
0040aa  d103              BNE      |L1.16564|
0040ac  4842              LDR      r0,|L1.16824|
0040ae  6800              LDR      r0,[r0,#0]  ; tout
0040b0  2805              CMP      r0,#5
0040b2  ddef              BLE      |L1.16532|
                  |L1.16564|
;;;1522   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1523   									}
;;;1524   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0040b4  f7fffffe          BL       clear
;;;1525   									//clear();
;;;1526   									memset(data,0,strlen(data));
0040b8  4840              LDR      r0,|L1.16828|
0040ba  f7fffffe          BL       strlen
0040be  4604              MOV      r4,r0
0040c0  4621              MOV      r1,r4
0040c2  483e              LDR      r0,|L1.16828|
0040c4  f7fffffe          BL       __aeabi_memclr
;;;1527   									clear();
0040c8  f7fffffe          BL       clear
                  |L1.16588|
;;;1528   
;;;1529   								
;;;1530   									//log_it();
;;;1531   								}
;;;1532   	}
0040cc  bd38              POP      {r3-r5,pc}
;;;1533   	
                          ENDP

                  read PROC
;;;1540   
;;;1541   void read(char * A,char * B,char * C)
0040ce  b570              PUSH     {r4-r6,lr}
;;;1542   {k=0;l=time;
0040d0  4604              MOV      r4,r0
0040d2  460d              MOV      r5,r1
0040d4  4616              MOV      r6,r2
0040d6  2000              MOVS     r0,#0
0040d8  493f              LDR      r1,|L1.16856|
0040da  6008              STR      r0,[r1,#0]  ; k
0040dc  483f              LDR      r0,|L1.16860|
0040de  6800              LDR      r0,[r0,#0]  ; time
0040e0  493f              LDR      r1,|L1.16864|
0040e2  6008              STR      r0,[r1,#0]  ; l
;;;1543   			do{
0040e4  bf00              NOP      
                  |L1.16614|
;;;1544   			if( uart_getchar_present (UART1_BASE_PTR))	
0040e6  4830              LDR      r0,|L1.16808|
0040e8  f7fffffe          BL       uart_getchar_present
0040ec  2800              CMP      r0,#0
0040ee  d018              BEQ      |L1.16674|
;;;1545   			{uart_string_gps[k]=UART_D_REG(UART1_BASE_PTR);k++;l=time;if(k>298){k=0;}}
0040f0  482d              LDR      r0,|L1.16808|
0040f2  79c0              LDRB     r0,[r0,#7]
0040f4  493b              LDR      r1,|L1.16868|
0040f6  4a38              LDR      r2,|L1.16856|
0040f8  6812              LDR      r2,[r2,#0]  ; k
0040fa  5488              STRB     r0,[r1,r2]
0040fc  4836              LDR      r0,|L1.16856|
0040fe  6800              LDR      r0,[r0,#0]  ; k
004100  1c40              ADDS     r0,r0,#1
004102  4935              LDR      r1,|L1.16856|
004104  6008              STR      r0,[r1,#0]  ; k
004106  4835              LDR      r0,|L1.16860|
004108  6800              LDR      r0,[r0,#0]  ; time
00410a  4935              LDR      r1,|L1.16864|
00410c  6008              STR      r0,[r1,#0]  ; l
00410e  4832              LDR      r0,|L1.16856|
004110  6800              LDR      r0,[r0,#0]  ; k
004112  21ff              MOVS     r1,#0xff
004114  312b              ADDS     r1,r1,#0x2b
004116  4288              CMP      r0,r1
004118  dd09              BLE      |L1.16686|
00411a  2000              MOVS     r0,#0
00411c  492e              LDR      r1,|L1.16856|
00411e  6008              STR      r0,[r1,#0]  ; k
004120  e005              B        |L1.16686|
                  |L1.16674|
;;;1546   				else{
;;;1547   							l--;if(l==10){}
004122  482f              LDR      r0,|L1.16864|
004124  6800              LDR      r0,[r0,#0]  ; l
004126  1e40              SUBS     r0,r0,#1
004128  492d              LDR      r1,|L1.16864|
00412a  6008              STR      r0,[r1,#0]  ; l
00412c  bf00              NOP      
                  |L1.16686|
;;;1548   						}
;;;1549   			}while(!((strstr(uart_string_gps, "OK\r\n"))
00412e  491f              LDR      r1,|L1.16812|
004130  482c              LDR      r0,|L1.16868|
004132  f7fffffe          BL       strstr
004136  2800              CMP      r0,#0
004138  d111              BNE      |L1.16734|
00413a  491e              LDR      r1,|L1.16820|
00413c  3970              SUBS     r1,r1,#0x70
00413e  4829              LDR      r0,|L1.16868|
004140  f7fffffe          BL       strstr
004144  2800              CMP      r0,#0
004146  d10a              BNE      |L1.16734|
004148  4825              LDR      r0,|L1.16864|
00414a  6800              LDR      r0,[r0,#0]  ; l
00414c  2800              CMP      r0,#0
00414e  dd06              BLE      |L1.16734|
004150  4918              LDR      r1,|L1.16820|
004152  3978              SUBS     r1,r1,#0x78
004154  4823              LDR      r0,|L1.16868|
004156  f7fffffe          BL       strstr
00415a  2800              CMP      r0,#0
00415c  d0c3              BEQ      |L1.16614|
                  |L1.16734|
;;;1550   							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;1551   				        	||(strstr(uart_string_gps, "ERROR:"))
;;;1552   							));
;;;1553   //		clear();
;;;1554   }	
00415e  bd70              POP      {r4-r6,pc}
;;;1555   void read2(char * respA,char * respB,char * respC, int timeout)
                          ENDP

                  read2 PROC
004160  b5f8              PUSH     {r3-r7,lr}
;;;1556   {k=0;l=time;
004162  4604              MOV      r4,r0
004164  460e              MOV      r6,r1
004166  4615              MOV      r5,r2
004168  461f              MOV      r7,r3
00416a  2000              MOVS     r0,#0
00416c  491a              LDR      r1,|L1.16856|
00416e  6008              STR      r0,[r1,#0]  ; k
004170  481a              LDR      r0,|L1.16860|
004172  6800              LDR      r0,[r0,#0]  ; time
004174  491a              LDR      r1,|L1.16864|
004176  6008              STR      r0,[r1,#0]  ; l
;;;1557   			do{
004178  bf00              NOP      
                  |L1.16762|
;;;1558   			if( uart_getchar_present (UART2_BASE_PTR))	
00417a  481b              LDR      r0,|L1.16872|
00417c  f7fffffe          BL       uart_getchar_present
004180  2800              CMP      r0,#0
004182  d03b              BEQ      |L1.16892|
;;;1559   			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=time;if(k>298){k=0;}}
004184  4818              LDR      r0,|L1.16872|
004186  79c0              LDRB     r0,[r0,#7]
004188  4916              LDR      r1,|L1.16868|
00418a  4a13              LDR      r2,|L1.16856|
00418c  6812              LDR      r2,[r2,#0]  ; k
00418e  5488              STRB     r0,[r1,r2]
004190  4811              LDR      r0,|L1.16856|
004192  6800              LDR      r0,[r0,#0]  ; k
004194  1c40              ADDS     r0,r0,#1
004196  4910              LDR      r1,|L1.16856|
004198  6008              STR      r0,[r1,#0]  ; k
00419a  4810              LDR      r0,|L1.16860|
00419c  6800              LDR      r0,[r0,#0]  ; time
00419e  4910              LDR      r1,|L1.16864|
0041a0  6008              STR      r0,[r1,#0]  ; l
0041a2  480d              LDR      r0,|L1.16856|
0041a4  6800              LDR      r0,[r0,#0]  ; k
0041a6  e021              B        |L1.16876|
                  |L1.16808|
                          DCD      0x4006b000
                  |L1.16812|
                          DCD      ||.text||+0xd88
                  |L1.16816|
                          DCD      uart_string_gsm
                  |L1.16820|
                          DCD      ||.text||+0x910
                  |L1.16824|
                          DCD      tout
                  |L1.16828|
                          DCD      data
                  |L1.16832|
0041c0  4f4b00            DCB      "OK",0
0041c3  00                DCB      0
                  |L1.16836|
                          DCD      con1d
                  |L1.16840|
                          DCD      at_
                  |L1.16844|
                          DCD      drive
                  |L1.16848|
0041d0  3e00              DCB      ">",0
0041d2  00                DCB      0
0041d3  00                DCB      0
                  |L1.16852|
                          DCD      ||k2||
                  |L1.16856|
                          DCD      k
                  |L1.16860|
                          DCD      time
                  |L1.16864|
                          DCD      l
                  |L1.16868|
                          DCD      uart_string_gps
                  |L1.16872|
                          DCD      0x4006c000
                  |L1.16876|
0041ec  21ff              MOVS     r1,#0xff
0041ee  312b              ADDS     r1,r1,#0x2b
0041f0  4288              CMP      r0,r1
0041f2  dd08              BLE      |L1.16902|
0041f4  2000              MOVS     r0,#0
0041f6  49fe              LDR      r1,|L1.17904|
0041f8  6008              STR      r0,[r1,#0]  ; k
0041fa  e004              B        |L1.16902|
                  |L1.16892|
;;;1560   				else{				
;;;1561   								l--;
0041fc  48fd              LDR      r0,|L1.17908|
0041fe  6800              LDR      r0,[r0,#0]  ; l
004200  1e40              SUBS     r0,r0,#1
004202  49fc              LDR      r1,|L1.17908|
004204  6008              STR      r0,[r1,#0]  ; l
                  |L1.16902|
;;;1562   						}
;;;1563   			}while(!((strstr(uart_string_gps, respA))
004206  4621              MOV      r1,r4
004208  48fb              LDR      r0,|L1.17912|
00420a  f7fffffe          BL       strstr
00420e  2800              CMP      r0,#0
004210  d10f              BNE      |L1.16946|
004212  4631              MOV      r1,r6
004214  48f8              LDR      r0,|L1.17912|
004216  f7fffffe          BL       strstr
00421a  2800              CMP      r0,#0
00421c  d109              BNE      |L1.16946|
00421e  48f5              LDR      r0,|L1.17908|
004220  6800              LDR      r0,[r0,#0]  ; l
004222  2800              CMP      r0,#0
004224  dd05              BLE      |L1.16946|
004226  4629              MOV      r1,r5
004228  48f3              LDR      r0,|L1.17912|
00422a  f7fffffe          BL       strstr
00422e  2800              CMP      r0,#0
004230  d0a3              BEQ      |L1.16762|
                  |L1.16946|
;;;1564   							||(strstr(uart_string_gps, respB))  || (l<=0) 
;;;1565   				        	||(strstr(uart_string_gps, respC))
;;;1566   							));
;;;1567   //		clear();
;;;1568   }	
004232  bdf8              POP      {r3-r7,pc}
;;;1569   
                          ENDP

                  send_modem2 PROC
;;;1580   	
;;;1581   void send_modem2(char ch[])
004234  b570              PUSH     {r4-r6,lr}
;;;1582   	{	
004236  4604              MOV      r4,r0
;;;1583   						unsigned char i21;
;;;1584   						i21=0;
004238  2500              MOVS     r5,#0
;;;1585   						while ((*(ch+i21)) != '\0') // NULL
00423a  e005              B        |L1.16968|
                  |L1.16956|
;;;1586   						{	
;;;1587   						// delay(1);
;;;1588   						 uart_putchar(UART2_BASE_PTR, (*(ch+i21)));
00423c  5d61              LDRB     r1,[r4,r5]
00423e  48ef              LDR      r0,|L1.17916|
004240  f7fffffe          BL       uart_putchar
;;;1589   						 i21++;
004244  1c68              ADDS     r0,r5,#1
004246  b2c5              UXTB     r5,r0
                  |L1.16968|
004248  5d60              LDRB     r0,[r4,r5]            ;1585
00424a  2800              CMP      r0,#0                 ;1585
00424c  d1f6              BNE      |L1.16956|
;;;1590   						}
;;;1591   		
;;;1592   	}	
00424e  bd70              POP      {r4-r6,pc}
;;;1593   	
                          ENDP

                  send_GPS PROC
;;;1699   	
;;;1700   char * send_GPS(char * string, char* responseA, char* responseB, char* responseC, int timeout)
004250  b5f8              PUSH     {r3-r7,lr}
;;;1701   {
004252  4607              MOV      r7,r0
004254  460c              MOV      r4,r1
004256  4615              MOV      r5,r2
004258  461e              MOV      r6,r3
;;;1702   qweq = strlen(uart_string_gps);
00425a  48e7              LDR      r0,|L1.17912|
00425c  f7fffffe          BL       strlen
004260  49e7              LDR      r1,|L1.17920|
004262  6008              STR      r0,[r1,#0]  ; qweq
;;;1703   	
;;;1704   	memset(uart_string_gps,0,qweq);
004264  4608              MOV      r0,r1
004266  6801              LDR      r1,[r0,#0]  ; qweq
004268  48e3              LDR      r0,|L1.17912|
00426a  f7fffffe          BL       __aeabi_memclr
;;;1705   	clear2();
00426e  f7fffffe          BL       clear2
;;;1706   	send_modem2(string);
004272  4638              MOV      r0,r7
004274  f7fffffe          BL       send_modem2
;;;1707   	read2(responseA,responseB,responseC,timeout);
004278  4632              MOV      r2,r6
00427a  4629              MOV      r1,r5
00427c  4620              MOV      r0,r4
00427e  9b06              LDR      r3,[sp,#0x18]
004280  f7fffffe          BL       read2
;;;1708   	clear2();
004284  f7fffffe          BL       clear2
;;;1709   	return uart_string_gps;
004288  48db              LDR      r0,|L1.17912|
;;;1710   }
00428a  bdf8              POP      {r3-r7,pc}
;;;1711   	
                          ENDP

                  parse PROC
;;;1716   
;;;1717   void parse(char* str, int first, int sec, char *string)
00428c  b5f8              PUSH     {r3-r7,lr}
;;;1718   {
00428e  4604              MOV      r4,r0
004290  460e              MOV      r6,r1
004292  4617              MOV      r7,r2
004294  461d              MOV      r5,r3
;;;1719   
;;;1720   		delay(10);		
004296  200a              MOVS     r0,#0xa
004298  f7fffffe          BL       delay
;;;1721   		memset(string,0,15);
00429c  210f              MOVS     r1,#0xf
00429e  4628              MOV      r0,r5
0042a0  f7fffffe          BL       __aeabi_memclr
;;;1722   		for(i11=0,temp11=0;i11<100;i11++)
0042a4  2000              MOVS     r0,#0
0042a6  49d7              LDR      r1,|L1.17924|
0042a8  6008              STR      r0,[r1,#0]  ; i11
0042aa  49d7              LDR      r1,|L1.17928|
0042ac  6008              STR      r0,[r1,#0]  ; temp11
0042ae  e01a              B        |L1.17126|
                  |L1.17072|
;;;1723   		{
;;;1724   		if(str[i11]==',')
0042b0  48d4              LDR      r0,|L1.17924|
0042b2  6800              LDR      r0,[r0,#0]  ; i11
0042b4  5c20              LDRB     r0,[r4,r0]
0042b6  282c              CMP      r0,#0x2c
0042b8  d108              BNE      |L1.17100|
;;;1725   			{temp11++;j11=i11;}
0042ba  48d3              LDR      r0,|L1.17928|
0042bc  6800              LDR      r0,[r0,#0]  ; temp11
0042be  1c40              ADDS     r0,r0,#1
0042c0  49d1              LDR      r1,|L1.17928|
0042c2  6008              STR      r0,[r1,#0]  ; temp11
0042c4  48cf              LDR      r0,|L1.17924|
0042c6  6800              LDR      r0,[r0,#0]  ; i11
0042c8  49d0              LDR      r1,|L1.17932|
0042ca  6008              STR      r0,[r1,#0]  ; j11
                  |L1.17100|
;;;1726   		else{}
;;;1727   			
;;;1728   		if(temp11>=sec){i11=900;}
0042cc  48ce              LDR      r0,|L1.17928|
0042ce  6800              LDR      r0,[r0,#0]  ; temp11
0042d0  42b8              CMP      r0,r7
0042d2  db03              BLT      |L1.17116|
0042d4  20e1              MOVS     r0,#0xe1
0042d6  0080              LSLS     r0,r0,#2
0042d8  49ca              LDR      r1,|L1.17924|
0042da  6008              STR      r0,[r1,#0]  ; i11
                  |L1.17116|
0042dc  48c9              LDR      r0,|L1.17924|
0042de  6800              LDR      r0,[r0,#0]            ;1722  ; i11
0042e0  1c40              ADDS     r0,r0,#1              ;1722
0042e2  49c8              LDR      r1,|L1.17924|
0042e4  6008              STR      r0,[r1,#0]            ;1722  ; i11
                  |L1.17126|
0042e6  48c7              LDR      r0,|L1.17924|
0042e8  6800              LDR      r0,[r0,#0]            ;1722  ; i11
0042ea  2864              CMP      r0,#0x64              ;1722
0042ec  dbe0              BLT      |L1.17072|
;;;1729   		else{}	
;;;1730   		
;;;1731   		}	
;;;1732   		
;;;1733   		for(i11=0,temp11=0;i11<100;i11++)
0042ee  2000              MOVS     r0,#0
0042f0  49c4              LDR      r1,|L1.17924|
0042f2  6008              STR      r0,[r1,#0]  ; i11
0042f4  49c4              LDR      r1,|L1.17928|
0042f6  6008              STR      r0,[r1,#0]  ; temp11
0042f8  e01a              B        |L1.17200|
                  |L1.17146|
;;;1734   		{
;;;1735   		if(str[i11]==',')
0042fa  48c2              LDR      r0,|L1.17924|
0042fc  6800              LDR      r0,[r0,#0]  ; i11
0042fe  5c20              LDRB     r0,[r4,r0]
004300  282c              CMP      r0,#0x2c
004302  d108              BNE      |L1.17174|
;;;1736   			{temp11++;l=i11;}										
004304  48c0              LDR      r0,|L1.17928|
004306  6800              LDR      r0,[r0,#0]  ; temp11
004308  1c40              ADDS     r0,r0,#1
00430a  49bf              LDR      r1,|L1.17928|
00430c  6008              STR      r0,[r1,#0]  ; temp11
00430e  48bd              LDR      r0,|L1.17924|
004310  6800              LDR      r0,[r0,#0]  ; i11
004312  49b8              LDR      r1,|L1.17908|
004314  6008              STR      r0,[r1,#0]  ; l
                  |L1.17174|
;;;1737   		else{}
;;;1738   		if(temp11>=first){i11=900;}else{}
004316  48bc              LDR      r0,|L1.17928|
004318  6800              LDR      r0,[r0,#0]  ; temp11
00431a  42b0              CMP      r0,r6
00431c  db03              BLT      |L1.17190|
00431e  20e1              MOVS     r0,#0xe1
004320  0080              LSLS     r0,r0,#2
004322  49b8              LDR      r1,|L1.17924|
004324  6008              STR      r0,[r1,#0]  ; i11
                  |L1.17190|
004326  48b7              LDR      r0,|L1.17924|
004328  6800              LDR      r0,[r0,#0]            ;1733  ; i11
00432a  1c40              ADDS     r0,r0,#1              ;1733
00432c  49b5              LDR      r1,|L1.17924|
00432e  6008              STR      r0,[r1,#0]            ;1733  ; i11
                  |L1.17200|
004330  48b4              LDR      r0,|L1.17924|
004332  6800              LDR      r0,[r0,#0]            ;1733  ; i11
004334  2864              CMP      r0,#0x64              ;1733
004336  dbe0              BLT      |L1.17146|
;;;1739   		}	
;;;1740   		for(i11=0;i11<(j11-l-1);i11++)
004338  2000              MOVS     r0,#0
00433a  49b2              LDR      r1,|L1.17924|
00433c  6008              STR      r0,[r1,#0]  ; i11
00433e  e00e              B        |L1.17246|
                  |L1.17216|
;;;1741   		{
;;;1742   		string[i11] = str[l+i11+1];
004340  48ac              LDR      r0,|L1.17908|
004342  6800              LDR      r0,[r0,#0]  ; l
004344  49af              LDR      r1,|L1.17924|
004346  6809              LDR      r1,[r1,#0]  ; i11
004348  1840              ADDS     r0,r0,r1
00434a  1c40              ADDS     r0,r0,#1
00434c  5c20              LDRB     r0,[r4,r0]
00434e  49ad              LDR      r1,|L1.17924|
004350  6809              LDR      r1,[r1,#0]  ; i11
004352  5468              STRB     r0,[r5,r1]
004354  48ab              LDR      r0,|L1.17924|
004356  6800              LDR      r0,[r0,#0]            ;1740  ; i11
004358  1c40              ADDS     r0,r0,#1              ;1740
00435a  49aa              LDR      r1,|L1.17924|
00435c  6008              STR      r0,[r1,#0]            ;1740  ; i11
                  |L1.17246|
00435e  48ab              LDR      r0,|L1.17932|
004360  6800              LDR      r0,[r0,#0]            ;1740  ; j11
004362  49a4              LDR      r1,|L1.17908|
004364  6809              LDR      r1,[r1,#0]            ;1740  ; l
004366  1a40              SUBS     r0,r0,r1              ;1740
004368  1e40              SUBS     r0,r0,#1              ;1740
00436a  49a6              LDR      r1,|L1.17924|
00436c  6809              LDR      r1,[r1,#0]            ;1740  ; i11
00436e  4288              CMP      r0,r1                 ;1740
004370  dce6              BGT      |L1.17216|
;;;1743   		}			
;;;1744   	
;;;1745   
;;;1746   }
004372  bdf8              POP      {r3-r7,pc}
;;;1747   
                          ENDP

                  gsm_gps_sleep PROC
;;;1816   
;;;1817   void gsm_gps_sleep()
004374  b508              PUSH     {r3,lr}
;;;1818   {
;;;1819   	
;;;1820   sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
004376  4ba6              LDR      r3,|L1.17936|
004378  4aa6              LDR      r2,|L1.17940|
00437a  49a7              LDR      r1,|L1.17944|
00437c  48a7              LDR      r0,|L1.17948|
00437e  f7fffffe          BL       __2sprintf
;;;1821   send_GSM( at_ , "CONNECT", "ERROR" , "CONNECT",tmeout);										
004382  48a7              LDR      r0,|L1.17952|
004384  6800              LDR      r0,[r0,#0]  ; tmeout
004386  4ba4              LDR      r3,|L1.17944|
004388  3320              ADDS     r3,r3,#0x20
00438a  4aa6              LDR      r2,|L1.17956|
00438c  4619              MOV      r1,r3
00438e  9000              STR      r0,[sp,#0]
004390  48a2              LDR      r0,|L1.17948|
004392  f7fffffe          BL       send_GSM
;;;1822   send_chunk();
004396  f7fffffe          BL       send_chunk
;;;1823   	//sleep modules;
;;;1824   //	do{
;;;1825   //				accel_read();
;;;1826   //				motion_samples = 0;
;;;1827   //				detect_motion();
;;;1828   //				
;;;1829   //	}while(motion != 1);
;;;1830   //	motion_samples = 0;
;;;1831   //wakeup modules;
;;;1832   
;;;1833   
;;;1834   
;;;1835   
;;;1836   }
00439a  bd08              POP      {r3,pc}
;;;1837   
                          ENDP

                  SW1_init PROC
;;;74     
;;;75     void SW1_init(void){
00439c  48a2              LDR      r0,|L1.17960|
;;;76     
;;;77     #ifdef CMSIS
;;;78     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
00439e  6b80              LDR      r0,[r0,#0x38]
0043a0  2101              MOVS     r1,#1
0043a2  02c9              LSLS     r1,r1,#11
0043a4  4308              ORRS     r0,r0,r1
0043a6  49a0              LDR      r1,|L1.17960|
0043a8  6388              STR      r0,[r1,#0x38]
;;;79     	
;;;80     	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
0043aa  48a0              LDR      r0,|L1.17964|
0043ac  49a0              LDR      r1,|L1.17968|
0043ae  60c8              STR      r0,[r1,#0xc]
;;;81     	
;;;82     	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
0043b0  489d              LDR      r0,|L1.17960|
0043b2  6b80              LDR      r0,[r0,#0x38]
0043b4  2101              MOVS     r1,#1
0043b6  0309              LSLS     r1,r1,#12
0043b8  4308              ORRS     r0,r0,r1
0043ba  499b              LDR      r1,|L1.17960|
0043bc  6388              STR      r0,[r1,#0x38]
;;;83     	
;;;84     	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
0043be  489b              LDR      r0,|L1.17964|
0043c0  499c              LDR      r1,|L1.17972|
0043c2  6188              STR      r0,[r1,#0x18]
;;;85     	
;;;86     	
;;;87     	
;;;88     	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
0043c4  201f              MOVS     r0,#0x1f
0043c6  2800              CMP      r0,#0
0043c8  db05              BLT      |L1.17366|
0043ca  06c2              LSLS     r2,r0,#27
0043cc  0ed2              LSRS     r2,r2,#27
0043ce  2101              MOVS     r1,#1
0043d0  4091              LSLS     r1,r1,r2
0043d2  4a99              LDR      r2,|L1.17976|
0043d4  6011              STR      r1,[r2,#0]
                  |L1.17366|
0043d6  bf00              NOP      
;;;89     #else
;;;90                
;;;91             enable_irq(31);
;;;92             set_irq_priority(31, 1);
;;;93             
;;;94             SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;95             
;;;96             PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;97             
;;;98     #endif
;;;99     }
0043d8  4770              BX       lr
;;;100    
                          ENDP

                  LED_state PROC
;;;150    
;;;151    void LED_state(void){
0043da  b500              PUSH     {lr}
;;;152    if(sleep_flag == 1)
0043dc  4897              LDR      r0,|L1.17980|
0043de  6800              LDR      r0,[r0,#0]  ; sleep_flag
0043e0  2801              CMP      r0,#1
0043e2  d102              BNE      |L1.17386|
;;;153    {stateCount=99;
0043e4  2063              MOVS     r0,#0x63
0043e6  4996              LDR      r1,|L1.17984|
0043e8  7008              STRB     r0,[r1,#0]
                  |L1.17386|
;;;154    }	
;;;155    			
;;;156    	switch(stateCount){
0043ea  4895              LDR      r0,|L1.17984|
0043ec  7800              LDRB     r0,[r0,#0]  ; stateCount
0043ee  0003              MOVS     r3,r0
0043f0  f7fffffe          BL       __ARM_common_switch8
0043f4  06040c14          DCB      0x06,0x04,0x0c,0x14
0043f8  1c242c34          DCB      0x1c,0x24,0x2c,0x34
;;;157    
;;;158    		
;;;159                case 0:     //Red
;;;160                       REDBAT_ON;
0043fc  2040              MOVS     r0,#0x40
0043fe  4991              LDR      r1,|L1.17988|
004400  6088              STR      r0,[r1,#8]
;;;161                       GREENBAT_OFF;
004402  2080              MOVS     r0,#0x80
004404  6048              STR      r0,[r1,#4]
;;;162                       BLUEBAT_OFF;
004406  0040              LSLS     r0,r0,#1
004408  6048              STR      r0,[r1,#4]
;;;163                       break;
00440a  e032              B        |L1.17522|
;;;164    
;;;165                case 1:	//Yellow
;;;166    		               REDBAT_ON;
00440c  2040              MOVS     r0,#0x40
00440e  498d              LDR      r1,|L1.17988|
004410  6088              STR      r0,[r1,#8]
;;;167    		               GREENBAT_ON;
004412  2080              MOVS     r0,#0x80
004414  6088              STR      r0,[r1,#8]
;;;168    		               BLUEBAT_OFF;
004416  0040              LSLS     r0,r0,#1
004418  6048              STR      r0,[r1,#4]
;;;169    		               break;
00441a  e02a              B        |L1.17522|
;;;170    				
;;;171                case 2:	//Green
;;;172    		               REDBAT_OFF;
00441c  2040              MOVS     r0,#0x40
00441e  4989              LDR      r1,|L1.17988|
004420  6048              STR      r0,[r1,#4]
;;;173    		               GREENBAT_ON;
004422  2080              MOVS     r0,#0x80
004424  6088              STR      r0,[r1,#8]
;;;174    		               BLUEBAT_OFF;
004426  0040              LSLS     r0,r0,#1
004428  6048              STR      r0,[r1,#4]
;;;175    		               break;
00442a  e022              B        |L1.17522|
;;;176    				
;;;177                case 3:	//Blue
;;;178    		               REDBAT_OFF;
00442c  2040              MOVS     r0,#0x40
00442e  4985              LDR      r1,|L1.17988|
004430  6048              STR      r0,[r1,#4]
;;;179    		               GREENBAT_OFF;
004432  2080              MOVS     r0,#0x80
004434  6048              STR      r0,[r1,#4]
;;;180    		               BLUEBAT_ON;
004436  0040              LSLS     r0,r0,#1
004438  6088              STR      r0,[r1,#8]
;;;181    		               break;
00443a  e01a              B        |L1.17522|
;;;182    				
;;;183                case 4:	//Violet
;;;184    		               REDBAT_ON;
00443c  2040              MOVS     r0,#0x40
00443e  4981              LDR      r1,|L1.17988|
004440  6088              STR      r0,[r1,#8]
;;;185    		               GREENBAT_OFF;
004442  2080              MOVS     r0,#0x80
004444  6048              STR      r0,[r1,#4]
;;;186    		               BLUEBAT_ON;
004446  0040              LSLS     r0,r0,#1
004448  6088              STR      r0,[r1,#8]
;;;187    		               break;
00444a  e012              B        |L1.17522|
;;;188    				
;;;189                case 5:	//White
;;;190    		              REDBAT_ON;
00444c  2040              MOVS     r0,#0x40
00444e  497d              LDR      r1,|L1.17988|
004450  6088              STR      r0,[r1,#8]
;;;191    		              GREENBAT_ON;
004452  2080              MOVS     r0,#0x80
004454  6088              STR      r0,[r1,#8]
;;;192    		              BLUEBAT_ON;
004456  0040              LSLS     r0,r0,#1
004458  6088              STR      r0,[r1,#8]
;;;193    		              break;
00445a  e00a              B        |L1.17522|
;;;194    				
;;;195                default:	//Red
;;;196    							
;;;197    
;;;198    		              REDBAT_OFF;
00445c  2040              MOVS     r0,#0x40
00445e  4979              LDR      r1,|L1.17988|
004460  6048              STR      r0,[r1,#4]
;;;199    		              GREENBAT_OFF;
004462  2080              MOVS     r0,#0x80
004464  6048              STR      r0,[r1,#4]
;;;200    		              BLUEBAT_OFF;
004466  0040              LSLS     r0,r0,#1
004468  6048              STR      r0,[r1,#4]
;;;201    		              stateCount = 0;	//Reset state counter
00446a  2000              MOVS     r0,#0
00446c  4974              LDR      r1,|L1.17984|
00446e  7008              STRB     r0,[r1,#0]
;;;202    			      break;
004470  bf00              NOP      
                  |L1.17522|
004472  bf00              NOP                            ;163
;;;203    
;;;204        }
;;;205    	
;;;206    }
004474  bd00              POP      {pc}
;;;207    
                          ENDP

                  PORTD_IRQHandler PROC
;;;101    #ifdef CMSIS
;;;102    void PORTD_IRQHandler(void){
004476  b500              PUSH     {lr}
;;;103      
;;;104    	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
004478  486d              LDR      r0,|L1.17968|
00447a  3080              ADDS     r0,r0,#0x80
00447c  6a00              LDR      r0,[r0,#0x20]
00447e  2108              MOVS     r1,#8
004480  4008              ANDS     r0,r0,r1
004482  2800              CMP      r0,#0
004484  d011              BEQ      |L1.17578|
;;;105    	{
;;;106    		PORTC_ISFR |= (1 << SW_PIN);
004486  486a              LDR      r0,|L1.17968|
004488  3080              ADDS     r0,r0,#0x80
00448a  6a00              LDR      r0,[r0,#0x20]
00448c  4308              ORRS     r0,r0,r1
00448e  4968              LDR      r1,|L1.17968|
004490  3180              ADDS     r1,r1,#0x80
004492  6208              STR      r0,[r1,#0x20]
;;;107    		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
004494  486c              LDR      r0,|L1.17992|
004496  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
004498  2101              MOVS     r1,#1
00449a  4308              ORRS     r0,r0,r1
00449c  496a              LDR      r1,|L1.17992|
00449e  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;108    	
;;;109    /**************ISR follows******/	
;;;110     stateCount++;
0044a0  4867              LDR      r0,|L1.17984|
0044a2  7800              LDRB     r0,[r0,#0]  ; stateCount
0044a4  1c40              ADDS     r0,r0,#1
0044a6  4966              LDR      r1,|L1.17984|
0044a8  7008              STRB     r0,[r1,#0]
                  |L1.17578|
;;;111    	}
;;;112    	
;;;113    	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
0044aa  4862              LDR      r0,|L1.17972|
0044ac  3080              ADDS     r0,r0,#0x80
0044ae  6a00              LDR      r0,[r0,#0x20]
0044b0  2140              MOVS     r1,#0x40
0044b2  4008              ANDS     r0,r0,r1
0044b4  2800              CMP      r0,#0
0044b6  d011              BEQ      |L1.17628|
;;;114    	{
;;;115    		PORTD_ISFR |= (1 << 6);
0044b8  485e              LDR      r0,|L1.17972|
0044ba  3080              ADDS     r0,r0,#0x80
0044bc  6a00              LDR      r0,[r0,#0x20]
0044be  4308              ORRS     r0,r0,r1
0044c0  495c              LDR      r1,|L1.17972|
0044c2  3180              ADDS     r1,r1,#0x80
0044c4  6208              STR      r0,[r1,#0x20]
;;;116    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
0044c6  4860              LDR      r0,|L1.17992|
0044c8  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
0044ca  2101              MOVS     r1,#1
0044cc  4308              ORRS     r0,r0,r1
0044ce  495e              LDR      r1,|L1.17992|
0044d0  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;117    	
;;;118    /**************ISR follows******/	
;;;119    // stateCount++;
;;;120    		
;;;121    ringflag=1;
0044d2  2001              MOVS     r0,#1
0044d4  495d              LDR      r1,|L1.17996|
0044d6  7008              STRB     r0,[r1,#0]
;;;122    	// wakeup and reset
;;;123    	
;;;124    clear();	
0044d8  f7fffffe          BL       clear
                  |L1.17628|
;;;125    	}
;;;126    	
;;;127    	LED_state();
0044dc  f7fffffe          BL       LED_state
;;;128    }
0044e0  bd00              POP      {pc}
;;;129    
                          ENDP

                  PORTC_action PROC
;;;130    void PORTC_action(void){
0044e2  4770              BX       lr
;;;131    }
;;;132    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
0044e4  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
0044e6  495a              LDR      r1,|L1.18000|
0044e8  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
0044ea  485a              LDR      r0,|L1.18004|
0044ec  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK;   
0044ee  2005              MOVS     r0,#5
0044f0  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
0044f2  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
0044f4  4856              LDR      r0,|L1.18000|
;;;17     {
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
0044f6  6900              LDR      r0,[r0,#0x10]
0044f8  0840              LSRS     r0,r0,#1
0044fa  0040              LSLS     r0,r0,#1
0044fc  4954              LDR      r1,|L1.18000|
0044fe  6108              STR      r0,[r1,#0x10]
;;;19     }
004500  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
004502  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
004504  4852              LDR      r0,|L1.18000|
004506  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
004508  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
00450a  1b28              SUBS     r0,r5,r4
00450c  4952              LDR      r1,|L1.18008|
00450e  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
004510  4629              MOV      r1,r5
004512  a052              ADR      r0,|L1.18012|
004514  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
004518  4621              MOV      r1,r4
00451a  a057              ADR      r0,|L1.18040|
00451c  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
004520  484d              LDR      r0,|L1.18008|
004522  6801              LDR      r1,[r0,#0]  ; overhead
004524  a05b              ADR      r0,|L1.18068|
004526  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
00452a  bd70              POP      {r4-r6,pc}
;;;13     #include "stdlib.h"
                          ENDP

                  delay2 PROC
;;;155    }
;;;156     void delay2(int delaytime)
00452c  e00c              B        |L1.17736|
                  |L1.17710|
;;;157    {
;;;158     while(delaytime--)
;;;159        {for(i=5000;i>0;i--);  // about 1 ms
00452e  4964              LDR      r1,|L1.18112|
004530  4a64              LDR      r2,|L1.18116|
004532  6011              STR      r1,[r2,#0]  ; i
004534  e004              B        |L1.17728|
                  |L1.17718|
004536  4963              LDR      r1,|L1.18116|
004538  6809              LDR      r1,[r1,#0]  ; i
00453a  1e49              SUBS     r1,r1,#1
00453c  4a61              LDR      r2,|L1.18116|
00453e  6011              STR      r1,[r2,#0]  ; i
                  |L1.17728|
004540  4960              LDR      r1,|L1.18116|
004542  6809              LDR      r1,[r1,#0]  ; i
004544  2900              CMP      r1,#0
004546  dcf6              BGT      |L1.17718|
                  |L1.17736|
004548  4601              MOV      r1,r0                 ;158
00454a  1e40              SUBS     r0,r0,#1              ;158
00454c  2900              CMP      r1,#0                 ;158
00454e  d1ee              BNE      |L1.17710|
;;;160        }
;;;161    }
004550  4770              BX       lr
;;;162            
                          ENDP

                  main PROC
;;;169    /********************************************************************/
;;;170    int main (void)
004552  b51c              PUSH     {r2-r4,lr}
;;;171    {
;;;172    
;;;173    
;;;174    
;;;175    //int_erval=10;
;;;176    								memset(data,0,strlen(data));
004554  485c              LDR      r0,|L1.18120|
004556  f7fffffe          BL       strlen
00455a  4601              MOV      r1,r0
00455c  9001              STR      r0,[sp,#4]
00455e  485a              LDR      r0,|L1.18120|
004560  f7fffffe          BL       __aeabi_memclr
;;;177    								memset(data2,0,strlen(data2));
004564  4859              LDR      r0,|L1.18124|
004566  f7fffffe          BL       strlen
00456a  4601              MOV      r1,r0
00456c  9001              STR      r0,[sp,#4]
00456e  4857              LDR      r0,|L1.18124|
004570  f7fffffe          BL       __aeabi_memclr
;;;178    	
;;;179    start();
004574  f7fffffe          BL       start
;;;180    systick_init();	
004578  f7fffffe          BL       systick_init
;;;181    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;182    
;;;183    #endif
;;;184    
;;;185    int_erval=5;
00457c  2005              MOVS     r0,#5
00457e  4954              LDR      r1,|L1.18128|
004580  6008              STR      r0,[r1,#0]  ; int_erval
;;;186    
;;;187    
;;;188    	LED_init();		//Initialize GPIO for LEDs
004582  f7fffffe          BL       LED_init
;;;189    	RELAY_init();		//Initialize GPIO for LEDs
004586  bf00              NOP      
004588  4827              LDR      r0,|L1.17960|
00458a  6b80              LDR      r0,[r0,#0x38]
00458c  2101              MOVS     r1,#1
00458e  0249              LSLS     r1,r1,#9
004590  4308              ORRS     r0,r0,r1
004592  4925              LDR      r1,|L1.17960|
004594  6388              STR      r0,[r1,#0x38]
004596  1588              ASRS     r0,r1,#22
004598  494e              LDR      r1,|L1.18132|
00459a  6048              STR      r0,[r1,#4]
00459c  6088              STR      r0,[r1,#8]
00459e  4829              LDR      r0,|L1.17988|
0045a0  3880              SUBS     r0,r0,#0x80
0045a2  6840              LDR      r0,[r0,#4]
0045a4  2106              MOVS     r1,#6
0045a6  4308              ORRS     r0,r0,r1
0045a8  4926              LDR      r1,|L1.17988|
0045aa  3980              SUBS     r1,r1,#0x80
0045ac  6048              STR      r0,[r1,#4]
0045ae  4608              MOV      r0,r1
0045b0  6940              LDR      r0,[r0,#0x14]
0045b2  2106              MOVS     r1,#6
0045b4  4308              ORRS     r0,r0,r1
0045b6  4923              LDR      r1,|L1.17988|
0045b8  3980              SUBS     r1,r1,#0x80
0045ba  6148              STR      r0,[r1,#0x14]
0045bc  2002              MOVS     r0,#2
0045be  6088              STR      r0,[r1,#8]
0045c0  2004              MOVS     r0,#4
0045c2  6088              STR      r0,[r1,#8]
0045c4  bf00              NOP      
;;;190    	SW1_init();		//Initialize GPIO for SW1 w/ interrupt	
0045c6  f7fffffe          BL       SW1_init
;;;191    	//accel_init();
;;;192    	sleep_flag=0;
0045ca  2000              MOVS     r0,#0
0045cc  491b              LDR      r1,|L1.17980|
0045ce  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;193    	DTR_OFF;	
0045d0  2080              MOVS     r0,#0x80
0045d2  491c              LDR      r1,|L1.17988|
0045d4  3140              ADDS     r1,r1,#0x40
0045d6  6088              STR      r0,[r1,#8]
;;;194    	lptmr_init(1000, 1);	
0045d8  2101              MOVS     r1,#1
0045da  207d              MOVS     r0,#0x7d
0045dc  00c0              LSLS     r0,r0,#3
0045de  f7fffffe          BL       lptmr_init
;;;195    
;;;196    //SCB->AIRCR = 0x05fA0000;
;;;197    
;;;198    	int_erval=0;
0045e2  2000              MOVS     r0,#0
0045e4  493a              LDR      r1,|L1.18128|
0045e6  6008              STR      r0,[r1,#0]  ; int_erval
;;;199    
;;;200    		uart_putchar(UART1_BASE_PTR,0xA);
0045e8  210a              MOVS     r1,#0xa
0045ea  483b              LDR      r0,|L1.18136|
0045ec  e076              B        |L1.18140|
0045ee  0000              DCW      0x0000
                  |L1.17904|
                          DCD      k
                  |L1.17908|
                          DCD      l
                  |L1.17912|
                          DCD      uart_string_gps
                  |L1.17916|
                          DCD      0x4006c000
                  |L1.17920|
                          DCD      qweq
                  |L1.17924|
                          DCD      i11
                  |L1.17928|
                          DCD      temp11
                  |L1.17932|
                          DCD      j11
                  |L1.17936|
                          DCD      port
                  |L1.17940|
                          DCD      ||ip||
                  |L1.17944|
                          DCD      ||.text||+0x125c
                  |L1.17948|
                          DCD      at_
                  |L1.17952|
                          DCD      tmeout
                  |L1.17956|
                          DCD      ||.text||+0x910
                  |L1.17960|
                          DCD      0x40048000
                  |L1.17964|
                          DCD      0x000a0103
                  |L1.17968|
                          DCD      0x4004b000
                  |L1.17972|
                          DCD      0x4004c000
                  |L1.17976|
                          DCD      0xe000e100
                  |L1.17980|
                          DCD      sleep_flag
                  |L1.17984|
                          DCD      stateCount
                  |L1.17988|
                          DCD      0x400ff080
                  |L1.17992|
                          DCD      gu32PortStatus
                  |L1.17996|
                          DCD      ringflag
                  |L1.18000|
                          DCD      0xe000e000
                  |L1.18004|
                          DCD      0x00009c3f
                  |L1.18008|
                          DCD      overhead
                  |L1.18012|
00465c  73797374          DCB      "systick start value: 0x%x\n\r",0
004660  69636b20
004664  73746172
004668  74207661
00466c  6c75653a
004670  20307825
004674  780a0d00
                  |L1.18040|
004678  73797374          DCB      "systick end value: 0x%x\n\r",0
00467c  69636b20
004680  656e6420
004684  76616c75
004688  653a2030
00468c  7825780a
004690  0d00    
004692  00                DCB      0
004693  00                DCB      0
                  |L1.18068|
004694  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
004698  69636b20
00469c  63757272
0046a0  656e7420
0046a4  76616c75
0046a8  65207265
0046ac  6164206f
0046b0  76657268
0046b4  6561643a
0046b8  20307825
0046bc  780a0d00
                  |L1.18112|
                          DCD      0x00001388
                  |L1.18116|
                          DCD      i
                  |L1.18120|
                          DCD      data
                  |L1.18124|
                          DCD      data2
                  |L1.18128|
                          DCD      int_erval
                  |L1.18132|
                          DCD      0x40049000
                  |L1.18136|
                          DCD      0x4006b000
                  |L1.18140|
0046dc  f7fffffe          BL       uart_putchar
;;;201    		uart_putchar(UART1_BASE_PTR,0x1A);			
0046e0  211a              MOVS     r1,#0x1a
0046e2  48fe              LDR      r0,|L1.19164|
0046e4  f7fffffe          BL       uart_putchar
;;;202    	
;;;203    send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",2);  
0046e8  2002              MOVS     r0,#2
0046ea  4bfd              LDR      r3,|L1.19168|
0046ec  461a              MOV      r2,r3
0046ee  3208              ADDS     r2,r2,#8
0046f0  49fc              LDR      r1,|L1.19172|
0046f2  9000              STR      r0,[sp,#0]
0046f4  a0fc              ADR      r0,|L1.19176|
0046f6  f7fffffe          BL       send_GSM
;;;204     delay(100); 
0046fa  2064              MOVS     r0,#0x64
0046fc  f7fffffe          BL       delay
;;;205    
;;;206    clear();delay(100);
004700  f7fffffe          BL       clear
004704  2064              MOVS     r0,#0x64
004706  f7fffffe          BL       delay
;;;207    GPS_COLLECT();
00470a  f7fffffe          BL       GPS_COLLECT
;;;208    strcat(data,"CH'1'\n");	
00470e  a1f8              ADR      r1,|L1.19184|
004710  48f9              LDR      r0,|L1.19192|
004712  f7fffffe          BL       strcat
;;;209    
;;;210    
;;;211    int_erval=5;
004716  2005              MOVS     r0,#5
004718  49f8              LDR      r1,|L1.19196|
00471a  6008              STR      r0,[r1,#0]  ; int_erval
;;;212    
;;;213    //if(!(strstr(uart_string_gsm, "OK")|| strstr(uart_string_gsm, "ERROR")))
;;;214    //{HardFault_Handler();}
;;;215    ignread();
00471c  f7fffffe          BL       ignread
;;;216    
;;;217    //	saveapn();
;;;218    	
;;;219    readapn();
004720  f7fffffe          BL       readapn
;;;220    
;;;221    //HardFault_Handler();
;;;222    
;;;223    
;;;224    
;;;225    //RESET_ON;
;;;226    
;;;227    
;;;228    
;;;229    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
004724  2004              MOVS     r0,#4
004726  4bee              LDR      r3,|L1.19168|
004728  3378              ADDS     r3,r3,#0x78
00472a  461a              MOV      r2,r3
00472c  3a70              SUBS     r2,r2,#0x70
00472e  a1f4              ADR      r1,|L1.19200|
004730  9000              STR      r0,[sp,#0]
004732  48ec              LDR      r0,|L1.19172|
004734  301c              ADDS     r0,r0,#0x1c
004736  f7fffffe          BL       send_GSM
;;;230    clear();	
00473a  f7fffffe          BL       clear
;;;231    //delay(10);
;;;232    
;;;233    send_GSM("\r\nAT+CFUN=1\r\n", "Ready", "NOT INSERTED" , "ERROR",7);	
00473e  2007              MOVS     r0,#7
004740  4be7              LDR      r3,|L1.19168|
004742  3378              ADDS     r3,r3,#0x78
004744  a2ef              ADR      r2,|L1.19204|
004746  a1f3              ADR      r1,|L1.19220|
004748  9000              STR      r0,[sp,#0]
00474a  48e6              LDR      r0,|L1.19172|
00474c  3040              ADDS     r0,r0,#0x40
00474e  f7fffffe          BL       send_GSM
;;;234    
;;;235    	
;;;236    GPS_COLLECT();
004752  f7fffffe          BL       GPS_COLLECT
;;;237    strcat(data,"CH\n");	
004756  49e3              LDR      r1,|L1.19172|
004758  3944              SUBS     r1,r1,#0x44
00475a  48e7              LDR      r0,|L1.19192|
00475c  f7fffffe          BL       strcat
;;;238    
;;;239    //GPS_COLLECT();
;;;240    //  strcat(data,"CH\n");	
;;;241    //	
;;;242    
;;;243    GPS_COLLECT();
004760  f7fffffe          BL       GPS_COLLECT
;;;244    strcat(data,"CH\n");	
004764  49df              LDR      r1,|L1.19172|
004766  3944              SUBS     r1,r1,#0x44
004768  48e3              LDR      r0,|L1.19192|
00476a  f7fffffe          BL       strcat
;;;245    
;;;246    
;;;247    stateCount=3;
00476e  2003              MOVS     r0,#3
004770  49ea              LDR      r1,|L1.19228|
004772  7008              STRB     r0,[r1,#0]
;;;248    LED_state();
004774  f7fffffe          BL       LED_state
;;;249    
;;;250    
;;;251    
;;;252    	
;;;253    //send_modem2("$PMTK225,0*2B");
;;;254    //while(!strstr(uart_string_gsm,"OK\r\n"));
;;;255    
;;;256    //bat_cind();
;;;257    //delay(1000);
;;;258    
;;;259    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
004778  48e9              LDR      r0,|L1.19232|
00477a  6800              LDR      r0,[r0,#0]  ; tmeout
00477c  4bd8              LDR      r3,|L1.19168|
00477e  461a              MOV      r2,r3
004780  3208              ADDS     r2,r2,#8
004782  49d8              LDR      r1,|L1.19172|
004784  9000              STR      r0,[sp,#0]
004786  a0e7              ADR      r0,|L1.19236|
004788  f7fffffe          BL       send_GSM
;;;260    //delay(10);
;;;261    
;;;262    send_GSM("\n\nATS0=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
00478c  48e4              LDR      r0,|L1.19232|
00478e  6800              LDR      r0,[r0,#0]  ; tmeout
004790  4bd3              LDR      r3,|L1.19168|
004792  461a              MOV      r2,r3
004794  3208              ADDS     r2,r2,#8
004796  49d3              LDR      r1,|L1.19172|
004798  9000              STR      r0,[sp,#0]
00479a  a0e5              ADR      r0,|L1.19248|
00479c  f7fffffe          BL       send_GSM
;;;263    
;;;264    send_GSM("\n\nAT&F\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
0047a0  48df              LDR      r0,|L1.19232|
0047a2  6800              LDR      r0,[r0,#0]  ; tmeout
0047a4  4bce              LDR      r3,|L1.19168|
0047a6  461a              MOV      r2,r3
0047a8  3208              ADDS     r2,r2,#8
0047aa  49ce              LDR      r1,|L1.19172|
0047ac  9000              STR      r0,[sp,#0]
0047ae  a0e3              ADR      r0,|L1.19260|
0047b0  f7fffffe          BL       send_GSM
;;;265    
;;;266    
;;;267    send_GSM("\n\nAT&D\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
0047b4  48da              LDR      r0,|L1.19232|
0047b6  6800              LDR      r0,[r0,#0]  ; tmeout
0047b8  4bc9              LDR      r3,|L1.19168|
0047ba  461a              MOV      r2,r3
0047bc  3208              ADDS     r2,r2,#8
0047be  49c9              LDR      r1,|L1.19172|
0047c0  9000              STR      r0,[sp,#0]
0047c2  a0e1              ADR      r0,|L1.19272|
0047c4  f7fffffe          BL       send_GSM
;;;268    
;;;269    
;;;270    send_GSM("\n\nAT+IFC=0,0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
0047c8  48d5              LDR      r0,|L1.19232|
0047ca  6800              LDR      r0,[r0,#0]  ; tmeout
0047cc  4bc4              LDR      r3,|L1.19168|
0047ce  461a              MOV      r2,r3
0047d0  3208              ADDS     r2,r2,#8
0047d2  49c4              LDR      r1,|L1.19172|
0047d4  9000              STR      r0,[sp,#0]
0047d6  a0df              ADR      r0,|L1.19284|
0047d8  f7fffffe          BL       send_GSM
;;;271    
;;;272    
;;;273    send_GSM("\n\nAT+CIPQSEND?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
0047dc  48d0              LDR      r0,|L1.19232|
0047de  6800              LDR      r0,[r0,#0]  ; tmeout
0047e0  4bbf              LDR      r3,|L1.19168|
0047e2  461a              MOV      r2,r3
0047e4  3208              ADDS     r2,r2,#8
0047e6  49bf              LDR      r1,|L1.19172|
0047e8  9000              STR      r0,[sp,#0]
0047ea  a0de              ADR      r0,|L1.19300|
0047ec  f7fffffe          BL       send_GSM
;;;274    
;;;275    send_GSM("\n\nAT+CIPQSEND=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
0047f0  48cb              LDR      r0,|L1.19232|
0047f2  6800              LDR      r0,[r0,#0]  ; tmeout
0047f4  4bba              LDR      r3,|L1.19168|
0047f6  461a              MOV      r2,r3
0047f8  3208              ADDS     r2,r2,#8
0047fa  49ba              LDR      r1,|L1.19172|
0047fc  9000              STR      r0,[sp,#0]
0047fe  a0de              ADR      r0,|L1.19320|
004800  f7fffffe          BL       send_GSM
;;;276    
;;;277    
;;;278    //delay(10);
;;;279    
;;;280    
;;;281    //delay(10);
;;;282    
;;;283    send_GSM("\n\nAT+SD2PCM=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004804  48c6              LDR      r0,|L1.19232|
004806  6800              LDR      r0,[r0,#0]  ; tmeout
004808  4bb5              LDR      r3,|L1.19168|
00480a  461a              MOV      r2,r3
00480c  3208              ADDS     r2,r2,#8
00480e  49b5              LDR      r1,|L1.19172|
004810  9000              STR      r0,[sp,#0]
004812  a0de              ADR      r0,|L1.19340|
004814  f7fffffe          BL       send_GSM
;;;284    //delay(10);	
;;;285    
;;;286    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004818  48c1              LDR      r0,|L1.19232|
00481a  6800              LDR      r0,[r0,#0]  ; tmeout
00481c  4bb0              LDR      r3,|L1.19168|
00481e  461a              MOV      r2,r3
004820  3208              ADDS     r2,r2,#8
004822  49b0              LDR      r1,|L1.19172|
004824  9000              STR      r0,[sp,#0]
004826  a0bf              ADR      r0,|L1.19236|
004828  f7fffffe          BL       send_GSM
;;;287    delay(10);	
00482c  200a              MOVS     r0,#0xa
00482e  f7fffffe          BL       delay
;;;288    send_GSM("\n\nAT+FSDRIVE=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004832  48bb              LDR      r0,|L1.19232|
004834  6800              LDR      r0,[r0,#0]  ; tmeout
004836  4baa              LDR      r3,|L1.19168|
004838  461a              MOV      r2,r3
00483a  3208              ADDS     r2,r2,#8
00483c  49a9              LDR      r1,|L1.19172|
00483e  9000              STR      r0,[sp,#0]
004840  a0d6              ADR      r0,|L1.19356|
004842  f7fffffe          BL       send_GSM
;;;289    clear();
004846  f7fffffe          BL       clear
;;;290    delay(10);	
00484a  200a              MOVS     r0,#0xa
00484c  f7fffffe          BL       delay
;;;291    //;	
;;;292    //send_GSM("\n\nAT+FSCREATE=D:\\LOG.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;293    
;;;294    	GPS_COLLECT();
004850  f7fffffe          BL       GPS_COLLECT
;;;295      strcat(data,"CH\n");	
004854  49a3              LDR      r1,|L1.19172|
004856  3944              SUBS     r1,r1,#0x44
004858  48a7              LDR      r0,|L1.19192|
00485a  f7fffffe          BL       strcat
;;;296    
;;;297    send_GSM("\n\nAT+FSMEM\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
00485e  48b0              LDR      r0,|L1.19232|
004860  6800              LDR      r0,[r0,#0]  ; tmeout
004862  4b9f              LDR      r3,|L1.19168|
004864  461a              MOV      r2,r3
004866  3208              ADDS     r2,r2,#8
004868  499e              LDR      r1,|L1.19172|
00486a  9000              STR      r0,[sp,#0]
00486c  a0d0              ADR      r0,|L1.19376|
00486e  f7fffffe          BL       send_GSM
;;;298    delay(100);	
004872  2064              MOVS     r0,#0x64
004874  f7fffffe          BL       delay
;;;299    
;;;300    if(strstr(uart_string_gsm,"D:")){
004878  a1d1              ADR      r1,|L1.19392|
00487a  48d2              LDR      r0,|L1.19396|
00487c  f7fffffe          BL       strstr
004880  2800              CMP      r0,#0
004882  d021              BEQ      |L1.18632|
;;;301    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
004884  48a6              LDR      r0,|L1.19232|
004886  6800              LDR      r0,[r0,#0]  ; tmeout
004888  4b95              LDR      r3,|L1.19168|
00488a  461a              MOV      r2,r3
00488c  3208              ADDS     r2,r2,#8
00488e  4995              LDR      r1,|L1.19172|
004890  9000              STR      r0,[sp,#0]
004892  a0cd              ADR      r0,|L1.19400|
004894  f7fffffe          BL       send_GSM
;;;302    	
;;;303    memset(at_,0,100);
004898  2164              MOVS     r1,#0x64
00489a  48d5              LDR      r0,|L1.19440|
00489c  f7fffffe          BL       __aeabi_memclr
;;;304    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
0048a0  2202              MOVS     r2,#2
0048a2  a1d4              ADR      r1,|L1.19444|
0048a4  48d2              LDR      r0,|L1.19440|
0048a6  f7fffffe          BL       __2sprintf
;;;305    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
0048aa  200a              MOVS     r0,#0xa
0048ac  4b8c              LDR      r3,|L1.19168|
0048ae  461a              MOV      r2,r3
0048b0  3208              ADDS     r2,r2,#8
0048b2  a1db              ADR      r1,|L1.19488|
0048b4  9000              STR      r0,[sp,#0]
0048b6  48ce              LDR      r0,|L1.19440|
0048b8  f7fffffe          BL       send_GSM
;;;306    	
;;;307    clear();
0048bc  f7fffffe          BL       clear
;;;308    send_modem("D:");	
0048c0  a0bf              ADR      r0,|L1.19392|
0048c2  f7fffffe          BL       send_modem
0048c6  e020              B        |L1.18698|
                  |L1.18632|
;;;309    	
;;;310    }
;;;311    else{
;;;312    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0048c8  4895              LDR      r0,|L1.19232|
0048ca  6800              LDR      r0,[r0,#0]  ; tmeout
0048cc  4b84              LDR      r3,|L1.19168|
0048ce  461a              MOV      r2,r3
0048d0  3208              ADDS     r2,r2,#8
0048d2  4984              LDR      r1,|L1.19172|
0048d4  9000              STR      r0,[sp,#0]
0048d6  a0bc              ADR      r0,|L1.19400|
0048d8  f7fffffe          BL       send_GSM
;;;313    	
;;;314    memset(at_,0,100);
0048dc  2164              MOVS     r1,#0x64
0048de  48c4              LDR      r0,|L1.19440|
0048e0  f7fffffe          BL       __aeabi_memclr
;;;315    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
0048e4  2202              MOVS     r2,#2
0048e6  a1c3              ADR      r1,|L1.19444|
0048e8  48c1              LDR      r0,|L1.19440|
0048ea  f7fffffe          BL       __2sprintf
;;;316    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
0048ee  200a              MOVS     r0,#0xa
0048f0  4b7b              LDR      r3,|L1.19168|
0048f2  461a              MOV      r2,r3
0048f4  3208              ADDS     r2,r2,#8
0048f6  a1ca              ADR      r1,|L1.19488|
0048f8  9000              STR      r0,[sp,#0]
0048fa  48bd              LDR      r0,|L1.19440|
0048fc  f7fffffe          BL       send_GSM
;;;317    	
;;;318    clear();
004900  f7fffffe          BL       clear
;;;319    send_modem("C:");		
004904  a0c7              ADR      r0,|L1.19492|
004906  f7fffffe          BL       send_modem
                  |L1.18698|
;;;320    	
;;;321    }	
;;;322    
;;;323    delay(100);
00490a  2064              MOVS     r0,#0x64
00490c  f7fffffe          BL       delay
;;;324    
;;;325    //delay(10);
;;;326    
;;;327    send_GSM("\n\nATS0=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004910  4883              LDR      r0,|L1.19232|
004912  6800              LDR      r0,[r0,#0]  ; tmeout
004914  4b72              LDR      r3,|L1.19168|
004916  461a              MOV      r2,r3
004918  3208              ADDS     r2,r2,#8
00491a  4972              LDR      r1,|L1.19172|
00491c  9000              STR      r0,[sp,#0]
00491e  a0c2              ADR      r0,|L1.19496|
004920  f7fffffe          BL       send_GSM
;;;328    
;;;329    
;;;330    send_GSM("\n\nAT+CSCLK=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004924  487e              LDR      r0,|L1.19232|
004926  6800              LDR      r0,[r0,#0]  ; tmeout
004928  4b6d              LDR      r3,|L1.19168|
00492a  461a              MOV      r2,r3
00492c  3208              ADDS     r2,r2,#8
00492e  496d              LDR      r1,|L1.19172|
004930  9000              STR      r0,[sp,#0]
004932  a0c0              ADR      r0,|L1.19508|
004934  f7fffffe          BL       send_GSM
;;;331    
;;;332    
;;;333    send_GSM("\r\n\r\nAT+CMGD=1,4\r\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
004938  4879              LDR      r0,|L1.19232|
00493a  6800              LDR      r0,[r0,#0]  ; tmeout
00493c  4b68              LDR      r3,|L1.19168|
00493e  461a              MOV      r2,r3
004940  3208              ADDS     r2,r2,#8
004942  4968              LDR      r1,|L1.19172|
004944  9000              STR      r0,[sp,#0]
004946  a0bf              ADR      r0,|L1.19524|
004948  f7fffffe          BL       send_GSM
;;;334    
;;;335    
;;;336    send_GSM("\n\nAT+CPBW=5,\"9643103983\",129,\"OWNER5\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
00494c  4874              LDR      r0,|L1.19232|
00494e  6800              LDR      r0,[r0,#0]  ; tmeout
004950  4b63              LDR      r3,|L1.19168|
004952  461a              MOV      r2,r3
004954  3208              ADDS     r2,r2,#8
004956  4963              LDR      r1,|L1.19172|
004958  9000              STR      r0,[sp,#0]
00495a  a0c0              ADR      r0,|L1.19548|
00495c  f7fffffe          BL       send_GSM
;;;337    
;;;338    
;;;339    send_GSM("\n\nAT+CPBW=6,\"8287324005\",129,\"OWNER6\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004960  486f              LDR      r0,|L1.19232|
004962  6800              LDR      r0,[r0,#0]  ; tmeout
004964  4b5e              LDR      r3,|L1.19168|
004966  461a              MOV      r2,r3
004968  3208              ADDS     r2,r2,#8
00496a  495e              LDR      r1,|L1.19172|
00496c  9000              STR      r0,[sp,#0]
00496e  a0c5              ADR      r0,|L1.19588|
004970  f7fffffe          BL       send_GSM
;;;340    
;;;341    ignread();
004974  f7fffffe          BL       ignread
;;;342    readapn();
004978  f7fffffe          BL       readapn
;;;343    
;;;344    read_interval();
00497c  f7fffffe          BL       read_interval
;;;345    send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004980  4867              LDR      r0,|L1.19232|
004982  6800              LDR      r0,[r0,#0]  ; tmeout
004984  4b56              LDR      r3,|L1.19168|
004986  461a              MOV      r2,r3
004988  3208              ADDS     r2,r2,#8
00498a  4956              LDR      r1,|L1.19172|
00498c  9000              STR      r0,[sp,#0]
00498e  a0c7              ADR      r0,|L1.19628|
004990  f7fffffe          BL       send_GSM
;;;346    //delay(10);	
;;;347    
;;;348    send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
004994  4862              LDR      r0,|L1.19232|
004996  6800              LDR      r0,[r0,#0]  ; tmeout
004998  4b51              LDR      r3,|L1.19168|
00499a  461a              MOV      r2,r3
00499c  3208              ADDS     r2,r2,#8
00499e  4951              LDR      r1,|L1.19172|
0049a0  9000              STR      r0,[sp,#0]
0049a2  a0c6              ADR      r0,|L1.19644|
0049a4  f7fffffe          BL       send_GSM
;;;349    							memset(at_,0,100);
0049a8  2164              MOVS     r1,#0x64
0049aa  4891              LDR      r0,|L1.19440|
0049ac  f7fffffe          BL       __aeabi_memclr
;;;350    							memset(num_o,0,15);
0049b0  210f              MOVS     r1,#0xf
0049b2  48c6              LDR      r0,|L1.19660|
0049b4  f7fffffe          BL       __aeabi_memclr
;;;351    							parse_g(uart_string_gsm, 1, 2, '\"', '\"', num_o);
0049b8  48c4              LDR      r0,|L1.19660|
0049ba  2122              MOVS     r1,#0x22
0049bc  460b              MOV      r3,r1
0049be  2202              MOVS     r2,#2
0049c0  9100              STR      r1,[sp,#0]
0049c2  9001              STR      r0,[sp,#4]
0049c4  2101              MOVS     r1,#1
0049c6  487f              LDR      r0,|L1.19396|
0049c8  f7fffffe          BL       parse_g
;;;352    							sprintf(at_, "\r\nAT+CSCA=\"%s\"\r\n", num_o);
0049cc  4abf              LDR      r2,|L1.19660|
0049ce  a1c0              ADR      r1,|L1.19664|
0049d0  4887              LDR      r0,|L1.19440|
0049d2  f7fffffe          BL       __2sprintf
;;;353    							send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
0049d6  4852              LDR      r0,|L1.19232|
0049d8  6800              LDR      r0,[r0,#0]  ; tmeout
0049da  4b41              LDR      r3,|L1.19168|
0049dc  461a              MOV      r2,r3
0049de  3208              ADDS     r2,r2,#8
0049e0  4940              LDR      r1,|L1.19172|
0049e2  9000              STR      r0,[sp,#0]
0049e4  4882              LDR      r0,|L1.19440|
0049e6  f7fffffe          BL       send_GSM
;;;354    
;;;355    //delay(10);	
;;;356    
;;;357    								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
0049ea  484d              LDR      r0,|L1.19232|
0049ec  6800              LDR      r0,[r0,#0]  ; tmeout
0049ee  4b3c              LDR      r3,|L1.19168|
0049f0  461a              MOV      r2,r3
0049f2  3208              ADDS     r2,r2,#8
0049f4  a142              ADR      r1,|L1.19200|
0049f6  9000              STR      r0,[sp,#0]
0049f8  a0ba              ADR      r0,|L1.19684|
0049fa  f7fffffe          BL       send_GSM
;;;358    				//				send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;359    								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
0049fe  4848              LDR      r0,|L1.19232|
004a00  6800              LDR      r0,[r0,#0]  ; tmeout
004a02  4b37              LDR      r3,|L1.19168|
004a04  461a              MOV      r2,r3
004a06  3208              ADDS     r2,r2,#8
004a08  a13d              ADR      r1,|L1.19200|
004a0a  9000              STR      r0,[sp,#0]
004a0c  a0bd              ADR      r0,|L1.19716|
004a0e  f7fffffe          BL       send_GSM
;;;360    								memcpy (ip, "104.236.203.4", 13);
004a12  220d              MOVS     r2,#0xd
004a14  a1c3              ADR      r1,|L1.19748|
004a16  48c7              LDR      r0,|L1.19764|
004a18  f7fffffe          BL       __aeabi_memcpy
;;;361    								memcpy (port, "5555", 4);		
004a1c  48c6              LDR      r0,|L1.19768|
004a1e  a1c7              ADR      r1,|L1.19772|
004a20  880a              LDRH     r2,[r1,#0]
004a22  8002              STRH     r2,[r0,#0]
004a24  8849              LDRH     r1,[r1,#2]
004a26  8041              STRH     r1,[r0,#2]
;;;362    								memcpy (interval, "5", 1);										
004a28  48c6              LDR      r0,|L1.19780|
004a2a  a1c7              ADR      r1,|L1.19784|
004a2c  7809              LDRB     r1,[r1,#0]
004a2e  7001              STRB     r1,[r0,#0]
;;;363    								save_ip_port();
004a30  f7fffffe          BL       save_ip_port
;;;364    								save_interval();
004a34  f7fffffe          BL       save_interval
;;;365    
;;;366    
;;;367    
;;;368    read_ip_port();
004a38  f7fffffe          BL       read_ip_port
;;;369    		memset(at_,0,100);
004a3c  2164              MOVS     r1,#0x64
004a3e  486c              LDR      r0,|L1.19440|
004a40  f7fffffe          BL       __aeabi_memclr
;;;370    		memset(drive,0,5);
004a44  2105              MOVS     r1,#5
004a46  48c1              LDR      r0,|L1.19788|
004a48  f7fffffe          BL       __aeabi_memclr4
;;;371    		sprintf(at_, "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n");		
004a4c  a1c0              ADR      r1,|L1.19792|
004a4e  4868              LDR      r0,|L1.19440|
004a50  f7fffffe          BL       __2sprintf
;;;372    		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
004a54  200a              MOVS     r0,#0xa
004a56  4b22              LDR      r3,|L1.19168|
004a58  461a              MOV      r2,r3
004a5a  3208              ADDS     r2,r2,#8
004a5c  a128              ADR      r1,|L1.19200|
004a5e  9000              STR      r0,[sp,#0]
004a60  4863              LDR      r0,|L1.19440|
004a62  f7fffffe          BL       send_GSM
;;;373    		parse_g(uart_string_gsm, 1,3, '\n', '\r',drive);
004a66  48b9              LDR      r0,|L1.19788|
004a68  210d              MOVS     r1,#0xd
004a6a  230a              MOVS     r3,#0xa
004a6c  2203              MOVS     r2,#3
004a6e  9100              STR      r1,[sp,#0]
004a70  9001              STR      r0,[sp,#4]
004a72  2101              MOVS     r1,#1
004a74  4853              LDR      r0,|L1.19396|
004a76  f7fffffe          BL       parse_g
;;;374    	
;;;375    
;;;376    msg_sim800(); 
004a7a  f7fffffe          BL       msg_sim800
;;;377    
;;;378    								//GPS_COLLECT();
;;;379    								send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",5);	
004a7e  2005              MOVS     r0,#5
004a80  4b17              LDR      r3,|L1.19168|
004a82  461a              MOV      r2,r3
004a84  3208              ADDS     r2,r2,#8
004a86  a11e              ADR      r1,|L1.19200|
004a88  9000              STR      r0,[sp,#0]
004a8a  48bc              LDR      r0,|L1.19836|
004a8c  f7fffffe          BL       send_GSM
;;;380    								//delay(20);		
;;;381    								GPS_COLLECT();
004a90  f7fffffe          BL       GPS_COLLECT
;;;382    								strcat(data,"CH\n");	
004a94  4913              LDR      r1,|L1.19172|
004a96  3944              SUBS     r1,r1,#0x44
004a98  4817              LDR      r0,|L1.19192|
004a9a  f7fffffe          BL       strcat
;;;383    
;;;384    
;;;385    msg_sim800(); 
004a9e  f7fffffe          BL       msg_sim800
;;;386    
;;;387    	memset(at_,0,100);
004aa2  2164              MOVS     r1,#0x64
004aa4  4852              LDR      r0,|L1.19440|
004aa6  f7fffffe          BL       __aeabi_memclr
;;;388    		sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
004aaa  4ab5              LDR      r2,|L1.19840|
004aac  49b3              LDR      r1,|L1.19836|
004aae  3118              ADDS     r1,r1,#0x18
004ab0  484f              LDR      r0,|L1.19440|
004ab2  f7fffffe          BL       __2sprintf
;;;389    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
004ab6  481a              LDR      r0,|L1.19232|
004ab8  6800              LDR      r0,[r0,#0]  ; tmeout
004aba  4b09              LDR      r3,|L1.19168|
004abc  461a              MOV      r2,r3
004abe  3208              ADDS     r2,r2,#8
004ac0  a10f              ADR      r1,|L1.19200|
004ac2  9000              STR      r0,[sp,#0]
004ac4  484a              LDR      r0,|L1.19440|
004ac6  f7fffffe          BL       send_GSM
;;;390    								//delay(20);
;;;391    			//					GPS_COLLECT();
;;;392    
;;;393    msg_sim800(); 
004aca  f7fffffe          BL       msg_sim800
;;;394    
;;;395    	
;;;396    								send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
004ace  2005              MOVS     r0,#5
004ad0  4b03              LDR      r3,|L1.19168|
004ad2  3390              ADDS     r3,r3,#0x90
004ad4  461a              MOV      r2,r3
004ad6  3a88              SUBS     r2,r2,#0x88
004ad8  a109              ADR      r1,|L1.19200|
004ada  e153              B        |L1.19844|
                  |L1.19164|
                          DCD      0x4006b000
                  |L1.19168|
                          DCD      ||.text||+0x898
                  |L1.19172|
                          DCD      ||.text||+0xd88
                  |L1.19176|
004ae8  0a0a4154          DCB      "\n\nAT\r\n",0
004aec  0d0a00  
004aef  00                DCB      0
                  |L1.19184|
004af0  43482731          DCB      "CH'1'\n",0
004af4  270a00  
004af7  00                DCB      0
                  |L1.19192|
                          DCD      data
                  |L1.19196|
                          DCD      int_erval
                  |L1.19200|
004b00  4f4b00            DCB      "OK",0
004b03  00                DCB      0
                  |L1.19204|
004b04  4e4f5420          DCB      "NOT INSERTED",0
004b08  494e5345
004b0c  52544544
004b10  00      
004b11  00                DCB      0
004b12  00                DCB      0
004b13  00                DCB      0
                  |L1.19220|
004b14  52656164          DCB      "Ready",0
004b18  7900    
004b1a  00                DCB      0
004b1b  00                DCB      0
                  |L1.19228|
                          DCD      stateCount
                  |L1.19232|
                          DCD      tmeout
                  |L1.19236|
004b24  0a0a4154          DCB      "\n\nAT&W\r\n",0
004b28  26570d0a
004b2c  00      
004b2d  00                DCB      0
004b2e  00                DCB      0
004b2f  00                DCB      0
                  |L1.19248|
004b30  0a0a4154          DCB      "\n\nATS0=2\r\n",0
004b34  53303d32
004b38  0d0a00  
004b3b  00                DCB      0
                  |L1.19260|
004b3c  0a0a4154          DCB      "\n\nAT&F\r\n",0
004b40  26460d0a
004b44  00      
004b45  00                DCB      0
004b46  00                DCB      0
004b47  00                DCB      0
                  |L1.19272|
004b48  0a0a4154          DCB      "\n\nAT&D\r\n",0
004b4c  26440d0a
004b50  00      
004b51  00                DCB      0
004b52  00                DCB      0
004b53  00                DCB      0
                  |L1.19284|
004b54  0a0a4154          DCB      "\n\nAT+IFC=0,0\r\n",0
004b58  2b494643
004b5c  3d302c30
004b60  0d0a00  
004b63  00                DCB      0
                  |L1.19300|
004b64  0a0a4154          DCB      "\n\nAT+CIPQSEND?\r\n",0
004b68  2b434950
004b6c  5153454e
004b70  443f0d0a
004b74  00      
004b75  00                DCB      0
004b76  00                DCB      0
004b77  00                DCB      0
                  |L1.19320|
004b78  0a0a4154          DCB      "\n\nAT+CIPQSEND=0\r\n",0
004b7c  2b434950
004b80  5153454e
004b84  443d300d
004b88  0a00    
004b8a  00                DCB      0
004b8b  00                DCB      0
                  |L1.19340|
004b8c  0a0a4154          DCB      "\n\nAT+SD2PCM=0\r\n",0
004b90  2b534432
004b94  50434d3d
004b98  300d0a00
                  |L1.19356|
004b9c  0a0a4154          DCB      "\n\nAT+FSDRIVE=1\r\n",0
004ba0  2b465344
004ba4  52495645
004ba8  3d310d0a
004bac  00      
004bad  00                DCB      0
004bae  00                DCB      0
004baf  00                DCB      0
                  |L1.19376|
004bb0  0a0a4154          DCB      "\n\nAT+FSMEM\r\n",0
004bb4  2b46534d
004bb8  454d0d0a
004bbc  00      
004bbd  00                DCB      0
004bbe  00                DCB      0
004bbf  00                DCB      0
                  |L1.19392|
004bc0  443a00            DCB      "D:",0
004bc3  00                DCB      0
                  |L1.19396|
                          DCD      uart_string_gsm
                  |L1.19400|
004bc8  0a0a4154          DCB      "\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n",0
004bcc  2b465343
004bd0  52454154
004bd4  453d433a
004bd8  5c4c4f47
004bdc  47494e47
004be0  5f445249
004be4  56452e54
004be8  58540d0a
004bec  00      
004bed  00                DCB      0
004bee  00                DCB      0
004bef  00                DCB      0
                  |L1.19440|
                          DCD      at_
                  |L1.19444|
004bf4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",0
004bf8  2b465357
004bfc  52495445
004c00  3d433a5c
004c04  4c4f4747
004c08  494e475f
004c0c  44524956
004c10  452e5458
004c14  542c302c
004c18  25642c31
004c1c  300d0a00
                  |L1.19488|
004c20  3e00              DCB      ">",0
004c22  00                DCB      0
004c23  00                DCB      0
                  |L1.19492|
004c24  433a00            DCB      "C:",0
004c27  00                DCB      0
                  |L1.19496|
004c28  0a0a4154          DCB      "\n\nATS0=1\r\n",0
004c2c  53303d31
004c30  0d0a00  
004c33  00                DCB      0
                  |L1.19508|
004c34  0a0a4154          DCB      "\n\nAT+CSCLK=1\r\n",0
004c38  2b435343
004c3c  4c4b3d31
004c40  0d0a00  
004c43  00                DCB      0
                  |L1.19524|
004c44  0d0a0d0a          DCB      "\r\n\r\nAT+CMGD=1,4\r\n\n\n\n",0
004c48  41542b43
004c4c  4d47443d
004c50  312c340d
004c54  0a0a0a0a
004c58  00      
004c59  00                DCB      0
004c5a  00                DCB      0
004c5b  00                DCB      0
                  |L1.19548|
004c5c  0a0a4154          DCB      "\n\nAT+CPBW=5,""9643103983"",129,""OWNER5""\r\n",0
004c60  2b435042
004c64  573d352c
004c68  22393634
004c6c  33313033
004c70  39383322
004c74  2c313239
004c78  2c224f57
004c7c  4e455235
004c80  220d0a00
                  |L1.19588|
004c84  0a0a4154          DCB      "\n\nAT+CPBW=6,""8287324005"",129,""OWNER6""\r\n",0
004c88  2b435042
004c8c  573d362c
004c90  22383238
004c94  37333234
004c98  30303522
004c9c  2c313239
004ca0  2c224f57
004ca4  4e455236
004ca8  220d0a00
                  |L1.19628|
004cac  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
004cb0  2b434d47
004cb4  463d310a
004cb8  0a00    
004cba  00                DCB      0
004cbb  00                DCB      0
                  |L1.19644|
004cbc  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
004cc0  2b435343
004cc4  413f0d0a
004cc8  00      
004cc9  00                DCB      0
004cca  00                DCB      0
004ccb  00                DCB      0
                  |L1.19660|
                          DCD      num_o
                  |L1.19664|
004cd0  0d0a4154          DCB      "\r\nAT+CSCA=""%s""\r\n",0
004cd4  2b435343
004cd8  413d2225
004cdc  73220d0a
004ce0  00      
004ce1  00                DCB      0
004ce2  00                DCB      0
004ce3  00                DCB      0
                  |L1.19684|
004ce4  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
004ce8  46534352
004cec  45415445
004cf0  3d433a5c
004cf4  49505f50
004cf8  4f52542e
004cfc  5458540d
004d00  0a00    
004d02  00                DCB      0
004d03  00                DCB      0
                  |L1.19716|
004d04  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
004d08  46534352
004d0c  45415445
004d10  3d433a5c
004d14  494e5445
004d18  5256414c
004d1c  2e545854
004d20  0d0a00  
004d23  00                DCB      0
                  |L1.19748|
004d24  3130342e          DCB      "104.236.203.4",0
004d28  3233362e
004d2c  3230332e
004d30  3400    
004d32  00                DCB      0
004d33  00                DCB      0
                  |L1.19764|
                          DCD      ||ip||
                  |L1.19768|
                          DCD      port
                  |L1.19772|
004d3c  35353535          DCB      "5555",0
004d40  00      
004d41  00                DCB      0
004d42  00                DCB      0
004d43  00                DCB      0
                  |L1.19780|
                          DCD      interval
                  |L1.19784|
004d48  3500              DCB      "5",0
004d4a  00                DCB      0
004d4b  00                DCB      0
                  |L1.19788|
                          DCD      drive
                  |L1.19792|
004d50  0a41542b          DCB      "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n",0
004d54  46535245
004d58  41443d43
004d5c  3a5c4c4f
004d60  4747494e
004d64  475f4452
004d68  4956452e
004d6c  5458542c
004d70  302c3130
004d74  302c310d
004d78  0a00    
004d7a  00                DCB      0
004d7b  00                DCB      0
                  |L1.19836|
                          DCD      ||.text||+0x1204
                  |L1.19840|
                          DCD      apn
                  |L1.19844|
004d84  9000              STR      r0,[sp,#0]
004d86  48fe              LDR      r0,|L1.20864|
004d88  f7fffffe          BL       send_GSM
;;;397    								//delay(20);
;;;398    								GPS_COLLECT();
004d8c  f7fffffe          BL       GPS_COLLECT
;;;399    								strcat(data,"CH\n");	
004d90  49fc              LDR      r1,|L1.20868|
004d92  48fd              LDR      r0,|L1.20872|
004d94  f7fffffe          BL       strcat
;;;400    
;;;401    
;;;402    
;;;403    								GPS_COLLECT();
004d98  f7fffffe          BL       GPS_COLLECT
;;;404    								strcat(data,"CH\n");	
004d9c  49f9              LDR      r1,|L1.20868|
004d9e  48fa              LDR      r0,|L1.20872|
004da0  f7fffffe          BL       strcat
;;;405    
;;;406    msg_sim800(); 
004da4  f7fffffe          BL       msg_sim800
;;;407    
;;;408    								
;;;409    								clear();send_modem("\nAT+CIFSR\r\r\n");clear();
004da8  f7fffffe          BL       clear
004dac  48f4              LDR      r0,|L1.20864|
004dae  3010              ADDS     r0,r0,#0x10
004db0  f7fffffe          BL       send_modem
004db4  f7fffffe          BL       clear
;;;410    								delay(20);
004db8  2014              MOVS     r0,#0x14
004dba  f7fffffe          BL       delay
;;;411    	
;;;412    
;;;413    msg_sim800(); 
004dbe  f7fffffe          BL       msg_sim800
;;;414    
;;;415    		
;;;416    								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
004dc2  4bf2              LDR      r3,|L1.20876|
004dc4  4af2              LDR      r2,|L1.20880|
004dc6  49ee              LDR      r1,|L1.20864|
004dc8  3128              ADDS     r1,r1,#0x28
004dca  48f2              LDR      r0,|L1.20884|
004dcc  f7fffffe          BL       __2sprintf
;;;417    								send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
004dd0  48f1              LDR      r0,|L1.20888|
004dd2  6800              LDR      r0,[r0,#0]  ; tmeout
004dd4  4bf1              LDR      r3,|L1.20892|
004dd6  461a              MOV      r2,r3
004dd8  3a70              SUBS     r2,r2,#0x70
004dda  49e9              LDR      r1,|L1.20864|
004ddc  3148              ADDS     r1,r1,#0x48
004dde  9000              STR      r0,[sp,#0]
004de0  48ec              LDR      r0,|L1.20884|
004de2  f7fffffe          BL       send_GSM
;;;418    								clear();
004de6  f7fffffe          BL       clear
;;;419    
;;;420    								GPS_COLLECT();
004dea  f7fffffe          BL       GPS_COLLECT
;;;421    								strcat(data,"CH\n");	
004dee  49e5              LDR      r1,|L1.20868|
004df0  48e5              LDR      r0,|L1.20872|
004df2  f7fffffe          BL       strcat
;;;422    
;;;423    								send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
004df6  48e8              LDR      r0,|L1.20888|
004df8  6800              LDR      r0,[r0,#0]  ; tmeout
004dfa  4be1              LDR      r3,|L1.20864|
004dfc  3350              ADDS     r3,r3,#0x50
004dfe  4ae7              LDR      r2,|L1.20892|
004e00  a1e7              ADR      r1,|L1.20896|
004e02  9000              STR      r0,[sp,#0]
004e04  4618              MOV      r0,r3
004e06  3014              ADDS     r0,r0,#0x14
004e08  f7fffffe          BL       send_GSM
;;;424    
;;;425    
;;;426    memset(stcond1,0,strlen(stcond1));	
004e0c  48e5              LDR      r0,|L1.20900|
004e0e  6800              LDR      r0,[r0,#0]  ; stcond1
004e10  f7fffffe          BL       strlen
004e14  4601              MOV      r1,r0
004e16  9001              STR      r0,[sp,#4]
004e18  48e2              LDR      r0,|L1.20900|
004e1a  6800              LDR      r0,[r0,#0]  ; stcond1
004e1c  f7fffffe          BL       __aeabi_memclr
;;;427    memset(con1d,0,strlen(con1d));	
004e20  48e1              LDR      r0,|L1.20904|
004e22  6800              LDR      r0,[r0,#0]  ; con1d
004e24  f7fffffe          BL       strlen
004e28  4601              MOV      r1,r0
004e2a  9001              STR      r0,[sp,#4]
004e2c  48de              LDR      r0,|L1.20904|
004e2e  6800              LDR      r0,[r0,#0]  ; con1d
004e30  f7fffffe          BL       __aeabi_memclr
;;;428    	
;;;429    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;430    						
;;;431    								cond=mystrstr(uart_string_gsm,'>');
004e34  213e              MOVS     r1,#0x3e
004e36  48dd              LDR      r0,|L1.20908|
004e38  f7fffffe          BL       mystrstr
004e3c  49dc              LDR      r1,|L1.20912|
004e3e  7008              STRB     r0,[r1,#0]
;;;432    								if(cond)	
004e40  4608              MOV      r0,r1
004e42  7800              LDRB     r0,[r0,#0]  ; cond
004e44  2800              CMP      r0,#0
004e46  d07d              BEQ      |L1.20292|
;;;433    								{
;;;434    									
;;;435    									clear();
004e48  f7fffffe          BL       clear
;;;436    									memset(uart_string_gsm,0,5000);
004e4c  49d9              LDR      r1,|L1.20916|
004e4e  48d7              LDR      r0,|L1.20908|
004e50  f7fffffe          BL       __aeabi_memclr
;;;437    									strcat(data,"\n");
004e54  a1d8              ADR      r1,|L1.20920|
004e56  48cc              LDR      r0,|L1.20872|
004e58  f7fffffe          BL       strcat
;;;438    									len=strlen(data);
004e5c  48ca              LDR      r0,|L1.20872|
004e5e  f7fffffe          BL       strlen
004e62  49d6              LDR      r1,|L1.20924|
004e64  6008              STR      r0,[r1,#0]  ; len
;;;439    									tout=0;
004e66  2000              MOVS     r0,#0
004e68  49d5              LDR      r1,|L1.20928|
004e6a  6008              STR      r0,[r1,#0]  ; tout
;;;440    									k2=0;
004e6c  49d5              LDR      r1,|L1.20932|
004e6e  6008              STR      r0,[r1,#0]  ; k2
;;;441    									for(k=0;k<len;k++)
004e70  49d5              LDR      r1,|L1.20936|
004e72  6008              STR      r0,[r1,#0]  ; k
004e74  e00d              B        |L1.20114|
                  |L1.20086|
;;;442    									{
;;;443    										uart_putchar(UART1_BASE_PTR, data[k]);
004e76  48c4              LDR      r0,|L1.20872|
004e78  49d3              LDR      r1,|L1.20936|
004e7a  6809              LDR      r1,[r1,#0]  ; k
004e7c  5c40              LDRB     r0,[r0,r1]
004e7e  4601              MOV      r1,r0
004e80  9001              STR      r0,[sp,#4]
004e82  48d2              LDR      r0,|L1.20940|
004e84  f7fffffe          BL       uart_putchar
004e88  48cf              LDR      r0,|L1.20936|
004e8a  6800              LDR      r0,[r0,#0]            ;441  ; k
004e8c  1c40              ADDS     r0,r0,#1              ;441
004e8e  49ce              LDR      r1,|L1.20936|
004e90  6008              STR      r0,[r1,#0]            ;441  ; k
                  |L1.20114|
004e92  48cd              LDR      r0,|L1.20936|
004e94  6800              LDR      r0,[r0,#0]            ;441  ; k
004e96  49c9              LDR      r1,|L1.20924|
004e98  6809              LDR      r1,[r1,#0]            ;441  ; len
004e9a  4288              CMP      r0,r1                 ;441
004e9c  dbeb              BLT      |L1.20086|
;;;444    									}uart_putchar(UART1_BASE_PTR, 0x1A);
004e9e  211a              MOVS     r1,#0x1a
004ea0  48ca              LDR      r0,|L1.20940|
004ea2  f7fffffe          BL       uart_putchar
;;;445    									do
004ea6  bf00              NOP      
                  |L1.20136|
;;;446    																{stcond1=strstr(uart_string_gsm,"SEND OK");
004ea8  49bc              LDR      r1,|L1.20892|
004eaa  3908              SUBS     r1,r1,#8
004eac  48bf              LDR      r0,|L1.20908|
004eae  f7fffffe          BL       strstr
004eb2  49bc              LDR      r1,|L1.20900|
004eb4  6008              STR      r0,[r1,#0]  ; stcond1
;;;447    																	stcond2=strstr(uart_string_gsm, "ERROR");
004eb6  49b9              LDR      r1,|L1.20892|
004eb8  48bc              LDR      r0,|L1.20908|
004eba  f7fffffe          BL       strstr
004ebe  49c4              LDR      r1,|L1.20944|
004ec0  6008              STR      r0,[r1,#0]  ; stcond2
;;;448    																		stcond3=strstr(uart_string_gsm, "FAIL");	
004ec2  49af              LDR      r1,|L1.20864|
004ec4  3158              ADDS     r1,r1,#0x58
004ec6  48b9              LDR      r0,|L1.20908|
004ec8  f7fffffe          BL       strstr
004ecc  49c1              LDR      r1,|L1.20948|
004ece  6008              STR      r0,[r1,#0]  ; stcond3
;;;449    																			stcond4=strstr(uart_string_gsm, "DEACT");	
004ed0  49b2              LDR      r1,|L1.20892|
004ed2  3118              ADDS     r1,r1,#0x18
004ed4  48b5              LDR      r0,|L1.20908|
004ed6  f7fffffe          BL       strstr
004eda  49bf              LDR      r1,|L1.20952|
004edc  6008              STR      r0,[r1,#0]  ; stcond4
;;;450    																	
;;;451    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
004ede  48bc              LDR      r0,|L1.20944|
004ee0  6800              LDR      r0,[r0,#0]  ; stcond2
004ee2  2800              CMP      r0,#0
004ee4  d10f              BNE      |L1.20230|
004ee6  48bb              LDR      r0,|L1.20948|
004ee8  6800              LDR      r0,[r0,#0]  ; stcond3
004eea  2800              CMP      r0,#0
004eec  d10b              BNE      |L1.20230|
004eee  4608              MOV      r0,r1
004ef0  6800              LDR      r0,[r0,#0]  ; stcond4
004ef2  2800              CMP      r0,#0
004ef4  d107              BNE      |L1.20230|
004ef6  48ab              LDR      r0,|L1.20900|
004ef8  6800              LDR      r0,[r0,#0]  ; stcond1
004efa  2800              CMP      r0,#0
004efc  d103              BNE      |L1.20230|
004efe  48b0              LDR      r0,|L1.20928|
004f00  6800              LDR      r0,[r0,#0]  ; tout
004f02  2804              CMP      r0,#4
004f04  ddd0              BLE      |L1.20136|
                  |L1.20230|
;;;452    																//delay(10);clear();
;;;453    														uart_putchar(UART1_BASE_PTR,0x1A);
004f06  211a              MOVS     r1,#0x1a
004f08  48b0              LDR      r0,|L1.20940|
004f0a  f7fffffe          BL       uart_putchar
;;;454    												//delay(10);
;;;455    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
004f0e  211a              MOVS     r1,#0x1a
004f10  48ae              LDR      r0,|L1.20940|
004f12  f7fffffe          BL       uart_putchar
004f16  211a              MOVS     r1,#0x1a
004f18  48ac              LDR      r0,|L1.20940|
004f1a  f7fffffe          BL       uart_putchar
004f1e  211a              MOVS     r1,#0x1a
004f20  48aa              LDR      r0,|L1.20940|
004f22  f7fffffe          BL       uart_putchar
;;;456    						
;;;457    									
;;;458    										if(flagch==1){		int_erval=temp;flagch=0;	}
004f26  48ad              LDR      r0,|L1.20956|
004f28  6800              LDR      r0,[r0,#0]  ; flagch
004f2a  2801              CMP      r0,#1
004f2c  d106              BNE      |L1.20284|
004f2e  48ac              LDR      r0,|L1.20960|
004f30  6800              LDR      r0,[r0,#0]  ; temp
004f32  49ac              LDR      r1,|L1.20964|
004f34  6008              STR      r0,[r1,#0]  ; int_erval
004f36  2000              MOVS     r0,#0
004f38  49a8              LDR      r1,|L1.20956|
004f3a  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.20284|
;;;459    delay(50);
004f3c  2032              MOVS     r0,#0x32
004f3e  f7fffffe          BL       delay
;;;460    stcond1=strstr(uart_string_gsm,"SEND OK");								
004f42  e000              B        |L1.20294|
                  |L1.20292|
004f44  e006              B        |L1.20308|
                  |L1.20294|
004f46  4995              LDR      r1,|L1.20892|
004f48  3908              SUBS     r1,r1,#8
004f4a  4898              LDR      r0,|L1.20908|
004f4c  f7fffffe          BL       strstr
004f50  4994              LDR      r1,|L1.20900|
004f52  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.20308|
;;;461    								}
;;;462    //else{
;;;463    //log_it();
;;;464    //}
;;;465    
;;;466    
;;;467    if(!(stcond1) == 1 )// if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
004f54  4893              LDR      r0,|L1.20900|
004f56  6800              LDR      r0,[r0,#0]  ; stcond1
004f58  2800              CMP      r0,#0
004f5a  d101              BNE      |L1.20320|
004f5c  2001              MOVS     r0,#1
004f5e  e000              B        |L1.20322|
                  |L1.20320|
004f60  2000              MOVS     r0,#0
                  |L1.20322|
004f62  2801              CMP      r0,#1
004f64  d17e              BNE      |L1.20580|
;;;468    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004f66  211a              MOVS     r1,#0x1a
004f68  4898              LDR      r0,|L1.20940|
004f6a  f7fffffe          BL       uart_putchar
004f6e  f7fffffe          BL       clear
004f72  200a              MOVS     r0,#0xa
004f74  f7fffffe          BL       delay
;;;469    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004f78  211a              MOVS     r1,#0x1a
004f7a  4894              LDR      r0,|L1.20940|
004f7c  f7fffffe          BL       uart_putchar
004f80  f7fffffe          BL       clear
004f84  200a              MOVS     r0,#0xa
004f86  f7fffffe          BL       delay
;;;470    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004f8a  211a              MOVS     r1,#0x1a
004f8c  488f              LDR      r0,|L1.20940|
004f8e  f7fffffe          BL       uart_putchar
004f92  f7fffffe          BL       clear
004f96  200a              MOVS     r0,#0xa
004f98  f7fffffe          BL       delay
;;;471    
;;;472    									delay(100);
004f9c  2064              MOVS     r0,#0x64
004f9e  f7fffffe          BL       delay
;;;473    									clear();//memset(uart_string_gsm,0,5000);
004fa2  f7fffffe          BL       clear
;;;474    
;;;475    									memset(at_,0,100);
004fa6  2164              MOVS     r1,#0x64
004fa8  487a              LDR      r0,|L1.20884|
004faa  f7fffffe          BL       __aeabi_memclr
;;;476    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004fae  4876              LDR      r0,|L1.20872|
004fb0  f7fffffe          BL       strlen
004fb4  1c40              ADDS     r0,r0,#1
004fb6  4603              MOV      r3,r0
004fb8  4a8b              LDR      r2,|L1.20968|
004fba  4972              LDR      r1,|L1.20868|
004fbc  310c              ADDS     r1,r1,#0xc
004fbe  9001              STR      r0,[sp,#4]
004fc0  4874              LDR      r0,|L1.20884|
004fc2  f7fffffe          BL       __2sprintf
;;;477    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004fc6  2005              MOVS     r0,#5
004fc8  4b74              LDR      r3,|L1.20892|
004fca  461a              MOV      r2,r3
004fcc  3a70              SUBS     r2,r2,#0x70
004fce  a174              ADR      r1,|L1.20896|
004fd0  9000              STR      r0,[sp,#0]
004fd2  4870              LDR      r0,|L1.20884|
004fd4  f7fffffe          BL       send_SD
;;;478    
;;;479    									clear();	
004fd8  f7fffffe          BL       clear
;;;480    									k2=0;									//string array counter for uart 1
004fdc  2000              MOVS     r0,#0
004fde  4979              LDR      r1,|L1.20932|
004fe0  6008              STR      r0,[r1,#0]  ; k2
;;;481    									tout=0;	
004fe2  4977              LDR      r1,|L1.20928|
004fe4  6008              STR      r0,[r1,#0]  ; tout
;;;482    									for(k=0;k<strlen(data);k++)
004fe6  4978              LDR      r1,|L1.20936|
004fe8  6008              STR      r0,[r1,#0]  ; k
004fea  e00d              B        |L1.20488|
                  |L1.20460|
;;;483    									{
;;;484    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004fec  4866              LDR      r0,|L1.20872|
004fee  4976              LDR      r1,|L1.20936|
004ff0  6809              LDR      r1,[r1,#0]  ; k
004ff2  5c40              LDRB     r0,[r0,r1]
004ff4  4601              MOV      r1,r0
004ff6  9001              STR      r0,[sp,#4]
004ff8  4874              LDR      r0,|L1.20940|
004ffa  f7fffffe          BL       uart_putchar
004ffe  4872              LDR      r0,|L1.20936|
005000  6800              LDR      r0,[r0,#0]            ;482  ; k
005002  1c40              ADDS     r0,r0,#1              ;482
005004  4970              LDR      r1,|L1.20936|
005006  6008              STR      r0,[r1,#0]            ;482  ; k
                  |L1.20488|
005008  485f              LDR      r0,|L1.20872|
00500a  f7fffffe          BL       strlen
00500e  496e              LDR      r1,|L1.20936|
005010  6809              LDR      r1,[r1,#0]            ;482  ; k
005012  4288              CMP      r0,r1                 ;482
005014  d8ea              BHI      |L1.20460|
;;;485    									}	
;;;486    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005016  210a              MOVS     r1,#0xa
005018  486c              LDR      r0,|L1.20940|
00501a  f7fffffe          BL       uart_putchar
00501e  210a              MOVS     r1,#0xa
005020  486a              LDR      r0,|L1.20940|
005022  f7fffffe          BL       uart_putchar
005026  210a              MOVS     r1,#0xa
005028  4868              LDR      r0,|L1.20940|
00502a  f7fffffe          BL       uart_putchar
00502e  210a              MOVS     r1,#0xa
005030  4866              LDR      r0,|L1.20940|
005032  f7fffffe          BL       uart_putchar
005036  210a              MOVS     r1,#0xa
005038  4864              LDR      r0,|L1.20940|
00503a  f7fffffe          BL       uart_putchar
00503e  210a              MOVS     r1,#0xa
005040  4862              LDR      r0,|L1.20940|
005042  f7fffffe          BL       uart_putchar
005046  210a              MOVS     r1,#0xa
005048  4860              LDR      r0,|L1.20940|
00504a  f7fffffe          BL       uart_putchar
00504e  210a              MOVS     r1,#0xa
005050  485e              LDR      r0,|L1.20940|
005052  f7fffffe          BL       uart_putchar
005056  210a              MOVS     r1,#0xa
005058  485c              LDR      r0,|L1.20940|
00505a  f7fffffe          BL       uart_putchar
00505e  210a              MOVS     r1,#0xa
005060  485a              LDR      r0,|L1.20940|
005062  e000              B        |L1.20582|
                  |L1.20580|
005064  e3fe              B        |L1.22628|
                  |L1.20582|
005066  f7fffffe          BL       uart_putchar
00506a  210a              MOVS     r1,#0xa
00506c  4857              LDR      r0,|L1.20940|
00506e  f7fffffe          BL       uart_putchar
005072  210a              MOVS     r1,#0xa
005074  4855              LDR      r0,|L1.20940|
005076  f7fffffe          BL       uart_putchar
00507a  210a              MOVS     r1,#0xa
00507c  4853              LDR      r0,|L1.20940|
00507e  f7fffffe          BL       uart_putchar
005082  210a              MOVS     r1,#0xa
005084  4851              LDR      r0,|L1.20940|
005086  f7fffffe          BL       uart_putchar
00508a  210a              MOVS     r1,#0xa
00508c  484f              LDR      r0,|L1.20940|
00508e  f7fffffe          BL       uart_putchar
005092  210a              MOVS     r1,#0xa
005094  484d              LDR      r0,|L1.20940|
005096  f7fffffe          BL       uart_putchar
00509a  210a              MOVS     r1,#0xa
00509c  484b              LDR      r0,|L1.20940|
00509e  f7fffffe          BL       uart_putchar
0050a2  210a              MOVS     r1,#0xa
0050a4  4849              LDR      r0,|L1.20940|
0050a6  f7fffffe          BL       uart_putchar
0050aa  210a              MOVS     r1,#0xa
0050ac  4847              LDR      r0,|L1.20940|
0050ae  f7fffffe          BL       uart_putchar
0050b2  210a              MOVS     r1,#0xa
0050b4  4845              LDR      r0,|L1.20940|
0050b6  f7fffffe          BL       uart_putchar
0050ba  210a              MOVS     r1,#0xa
0050bc  4843              LDR      r0,|L1.20940|
0050be  f7fffffe          BL       uart_putchar
0050c2  210a              MOVS     r1,#0xa
0050c4  4841              LDR      r0,|L1.20940|
0050c6  f7fffffe          BL       uart_putchar
0050ca  210a              MOVS     r1,#0xa
0050cc  483f              LDR      r0,|L1.20940|
0050ce  f7fffffe          BL       uart_putchar
0050d2  210a              MOVS     r1,#0xa
0050d4  483d              LDR      r0,|L1.20940|
0050d6  f7fffffe          BL       uart_putchar
0050da  210a              MOVS     r1,#0xa
0050dc  483b              LDR      r0,|L1.20940|
0050de  f7fffffe          BL       uart_putchar
0050e2  210a              MOVS     r1,#0xa
0050e4  4839              LDR      r0,|L1.20940|
0050e6  f7fffffe          BL       uart_putchar
0050ea  210a              MOVS     r1,#0xa
0050ec  4837              LDR      r0,|L1.20940|
0050ee  f7fffffe          BL       uart_putchar
0050f2  210a              MOVS     r1,#0xa
0050f4  4835              LDR      r0,|L1.20940|
0050f6  f7fffffe          BL       uart_putchar
0050fa  210a              MOVS     r1,#0xa
0050fc  4833              LDR      r0,|L1.20940|
0050fe  f7fffffe          BL       uart_putchar
005102  210a              MOVS     r1,#0xa
005104  4831              LDR      r0,|L1.20940|
005106  f7fffffe          BL       uart_putchar
00510a  210a              MOVS     r1,#0xa
00510c  482f              LDR      r0,|L1.20940|
00510e  f7fffffe          BL       uart_putchar
005112  210a              MOVS     r1,#0xa
005114  482d              LDR      r0,|L1.20940|
005116  f7fffffe          BL       uart_putchar
00511a  210a              MOVS     r1,#0xa
00511c  482b              LDR      r0,|L1.20940|
00511e  f7fffffe          BL       uart_putchar
005122  210a              MOVS     r1,#0xa
005124  4829              LDR      r0,|L1.20940|
005126  f7fffffe          BL       uart_putchar
00512a  210a              MOVS     r1,#0xa
00512c  4827              LDR      r0,|L1.20940|
00512e  f7fffffe          BL       uart_putchar
005132  210a              MOVS     r1,#0xa
005134  4825              LDR      r0,|L1.20940|
005136  f7fffffe          BL       uart_putchar
00513a  210a              MOVS     r1,#0xa
00513c  4823              LDR      r0,|L1.20940|
00513e  f7fffffe          BL       uart_putchar
005142  210a              MOVS     r1,#0xa
005144  4821              LDR      r0,|L1.20940|
005146  f7fffffe          BL       uart_putchar
00514a  210a              MOVS     r1,#0xa
00514c  481f              LDR      r0,|L1.20940|
00514e  f7fffffe          BL       uart_putchar
005152  210a              MOVS     r1,#0xa
005154  481d              LDR      r0,|L1.20940|
005156  f7fffffe          BL       uart_putchar
00515a  210a              MOVS     r1,#0xa
00515c  481b              LDR      r0,|L1.20940|
00515e  f7fffffe          BL       uart_putchar
005162  210a              MOVS     r1,#0xa
005164  4819              LDR      r0,|L1.20940|
005166  f7fffffe          BL       uart_putchar
00516a  210a              MOVS     r1,#0xa
00516c  4817              LDR      r0,|L1.20940|
00516e  f7fffffe          BL       uart_putchar
005172  210a              MOVS     r1,#0xa
005174  4815              LDR      r0,|L1.20940|
005176  f7fffffe          BL       uart_putchar
00517a  210a              MOVS     r1,#0xa
00517c  4813              LDR      r0,|L1.20940|
00517e  e035              B        |L1.20972|
                  |L1.20864|
                          DCD      ||.text||+0x1234
                  |L1.20868|
                          DCD      ||.text||+0xd44
                  |L1.20872|
                          DCD      data
                  |L1.20876|
                          DCD      port
                  |L1.20880|
                          DCD      ||ip||
                  |L1.20884|
                          DCD      at_
                  |L1.20888|
                          DCD      tmeout
                  |L1.20892|
                          DCD      ||.text||+0x910
                  |L1.20896|
0051a0  3e00              DCB      ">",0
0051a2  00                DCB      0
0051a3  00                DCB      0
                  |L1.20900|
                          DCD      stcond1
                  |L1.20904|
                          DCD      con1d
                  |L1.20908|
                          DCD      uart_string_gsm
                  |L1.20912|
                          DCD      cond
                  |L1.20916|
                          DCD      0x00001388
                  |L1.20920|
0051b8  0a00              DCB      "\n",0
0051ba  00                DCB      0
0051bb  00                DCB      0
                  |L1.20924|
                          DCD      len
                  |L1.20928|
                          DCD      tout
                  |L1.20932|
                          DCD      ||k2||
                  |L1.20936|
                          DCD      k
                  |L1.20940|
                          DCD      0x4006b000
                  |L1.20944|
                          DCD      stcond2
                  |L1.20948|
                          DCD      stcond3
                  |L1.20952|
                          DCD      stcond4
                  |L1.20956|
                          DCD      flagch
                  |L1.20960|
                          DCD      temp
                  |L1.20964|
                          DCD      int_erval
                  |L1.20968|
                          DCD      drive
                  |L1.20972|
0051ec  f7fffffe          BL       uart_putchar
0051f0  210a              MOVS     r1,#0xa
0051f2  48fe              LDR      r0,|L1.21996|
0051f4  f7fffffe          BL       uart_putchar
0051f8  210a              MOVS     r1,#0xa
0051fa  48fc              LDR      r0,|L1.21996|
0051fc  f7fffffe          BL       uart_putchar
005200  210a              MOVS     r1,#0xa
005202  48fa              LDR      r0,|L1.21996|
005204  f7fffffe          BL       uart_putchar
005208  210a              MOVS     r1,#0xa
00520a  48f8              LDR      r0,|L1.21996|
00520c  f7fffffe          BL       uart_putchar
005210  210a              MOVS     r1,#0xa
005212  48f6              LDR      r0,|L1.21996|
005214  f7fffffe          BL       uart_putchar
005218  210a              MOVS     r1,#0xa
00521a  48f4              LDR      r0,|L1.21996|
00521c  f7fffffe          BL       uart_putchar
005220  210a              MOVS     r1,#0xa
005222  48f2              LDR      r0,|L1.21996|
005224  f7fffffe          BL       uart_putchar
005228  210a              MOVS     r1,#0xa
00522a  48f0              LDR      r0,|L1.21996|
00522c  f7fffffe          BL       uart_putchar
005230  210a              MOVS     r1,#0xa
005232  48ee              LDR      r0,|L1.21996|
005234  f7fffffe          BL       uart_putchar
005238  210a              MOVS     r1,#0xa
00523a  48ec              LDR      r0,|L1.21996|
00523c  f7fffffe          BL       uart_putchar
005240  210a              MOVS     r1,#0xa
005242  48ea              LDR      r0,|L1.21996|
005244  f7fffffe          BL       uart_putchar
005248  210a              MOVS     r1,#0xa
00524a  48e8              LDR      r0,|L1.21996|
00524c  f7fffffe          BL       uart_putchar
;;;487    									//memset(data,0,1000);
;;;488    									//timer counts to wait for characters in uart 1 									
;;;489    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005250  bf00              NOP      
                  |L1.21074|
005252  49e7              LDR      r1,|L1.22000|
005254  48e7              LDR      r0,|L1.22004|
005256  f7fffffe          BL       strstr
00525a  2800              CMP      r0,#0
00525c  d109              BNE      |L1.21106|
00525e  49e6              LDR      r1,|L1.22008|
005260  48e4              LDR      r0,|L1.22004|
005262  f7fffffe          BL       strstr
005266  2800              CMP      r0,#0
005268  d103              BNE      |L1.21106|
00526a  48e4              LDR      r0,|L1.22012|
00526c  6800              LDR      r0,[r0,#0]  ; tout
00526e  2805              CMP      r0,#5
005270  ddef              BLE      |L1.21074|
                  |L1.21106|
;;;490    									{								
;;;491    									}
;;;492    									clear();
005272  f7fffffe          BL       clear
;;;493    									memset(data,0,strlen(data));
005276  48e2              LDR      r0,|L1.22016|
005278  f7fffffe          BL       strlen
00527c  4601              MOV      r1,r0
00527e  9001              STR      r0,[sp,#4]
005280  48df              LDR      r0,|L1.22016|
005282  f7fffffe          BL       __aeabi_memclr
;;;494    									memset(data,0,strlen(data));	
005286  48de              LDR      r0,|L1.22016|
005288  f7fffffe          BL       strlen
00528c  4601              MOV      r1,r0
00528e  9001              STR      r0,[sp,#4]
005290  48db              LDR      r0,|L1.22016|
005292  f7fffffe          BL       __aeabi_memclr
;;;495    									GPS_COLLECT();
005296  f7fffffe          BL       GPS_COLLECT
;;;496    									strcat(data,"CH\n");	
00529a  49d5              LDR      r1,|L1.22000|
00529c  3944              SUBS     r1,r1,#0x44
00529e  48d8              LDR      r0,|L1.22016|
0052a0  f7fffffe          BL       strcat
;;;497    
;;;498    									if(flagch!=1){
0052a4  48d7              LDR      r0,|L1.22020|
0052a6  6800              LDR      r0,[r0,#0]  ; flagch
0052a8  2801              CMP      r0,#1
0052aa  d009              BEQ      |L1.21184|
;;;499    										temp=int_erval;				
0052ac  48d6              LDR      r0,|L1.22024|
0052ae  6800              LDR      r0,[r0,#0]  ; int_erval
0052b0  49d6              LDR      r1,|L1.22028|
0052b2  6008              STR      r0,[r1,#0]  ; temp
;;;500    										int_erval=4;
0052b4  2004              MOVS     r0,#4
0052b6  49d4              LDR      r1,|L1.22024|
0052b8  6008              STR      r0,[r1,#0]  ; int_erval
;;;501    										flagch=1;
0052ba  2001              MOVS     r0,#1
0052bc  49d1              LDR      r1,|L1.22020|
0052be  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.21184|
;;;502    									}
;;;503    									clear();	
0052c0  f7fffffe          BL       clear
;;;504    //*************************************tcp_initialization();*********************
;;;505    
;;;506    	
;;;507    msg_sim800(); 
0052c4  f7fffffe          BL       msg_sim800
;;;508    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0052c8  2005              MOVS     r0,#5
0052ca  4bcb              LDR      r3,|L1.22008|
0052cc  461a              MOV      r2,r3
0052ce  3a70              SUBS     r2,r2,#0x70
0052d0  a1cf              ADR      r1,|L1.22032|
0052d2  9000              STR      r0,[sp,#0]
0052d4  48c6              LDR      r0,|L1.22000|
0052d6  301c              ADDS     r0,r0,#0x1c
0052d8  f7fffffe          BL       send_GSM
;;;509    delay(100);
0052dc  2064              MOVS     r0,#0x64
0052de  f7fffffe          BL       delay
;;;510    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0052e2  2004              MOVS     r0,#4
0052e4  4bc4              LDR      r3,|L1.22008|
0052e6  4ac2              LDR      r2,|L1.22000|
0052e8  322c              ADDS     r2,r2,#0x2c
0052ea  a1c9              ADR      r1,|L1.22032|
0052ec  9000              STR      r0,[sp,#0]
0052ee  4610              MOV      r0,r2
0052f0  3014              ADDS     r0,r0,#0x14
0052f2  f7fffffe          BL       send_GSM
;;;511    GPS_COLLECT2();
0052f6  f7fffffe          BL       GPS_COLLECT2
;;;512    strcat(data,"CH\n");		
0052fa  49bd              LDR      r1,|L1.22000|
0052fc  3944              SUBS     r1,r1,#0x44
0052fe  48c0              LDR      r0,|L1.22016|
005300  f7fffffe          BL       strcat
;;;513    GPS_COLLECT2();
005304  f7fffffe          BL       GPS_COLLECT2
;;;514    strcat(data,"CH\n");	
005308  49b9              LDR      r1,|L1.22000|
00530a  3944              SUBS     r1,r1,#0x44
00530c  48bc              LDR      r0,|L1.22016|
00530e  f7fffffe          BL       strcat
;;;515    GPS_COLLECT2();
005312  f7fffffe          BL       GPS_COLLECT2
;;;516    strcat(data,"CH\n");
005316  49b6              LDR      r1,|L1.22000|
005318  3944              SUBS     r1,r1,#0x44
00531a  48b9              LDR      r0,|L1.22016|
00531c  f7fffffe          BL       strcat
;;;517    
;;;518    	
;;;519    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
005320  2004              MOVS     r0,#4
005322  4bb5              LDR      r3,|L1.22008|
005324  3b78              SUBS     r3,r3,#0x78
005326  461a              MOV      r2,r3
005328  3208              ADDS     r2,r2,#8
00532a  a1b9              ADR      r1,|L1.22032|
00532c  9000              STR      r0,[sp,#0]
00532e  48b9              LDR      r0,|L1.22036|
005330  f7fffffe          BL       send_GSM
;;;520    GPS_COLLECT2();
005334  f7fffffe          BL       GPS_COLLECT2
;;;521    strcat(data,"CH\n");	
005338  49ad              LDR      r1,|L1.22000|
00533a  3944              SUBS     r1,r1,#0x44
00533c  48b0              LDR      r0,|L1.22016|
00533e  f7fffffe          BL       strcat
;;;522    memset(at_,0,100);
005342  2164              MOVS     r1,#0x64
005344  48b4              LDR      r0,|L1.22040|
005346  f7fffffe          BL       __aeabi_memclr
;;;523    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
00534a  4ab4              LDR      r2,|L1.22044|
00534c  49b1              LDR      r1,|L1.22036|
00534e  3118              ADDS     r1,r1,#0x18
005350  48b1              LDR      r0,|L1.22040|
005352  f7fffffe          BL       __2sprintf
;;;524    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
005356  48b2              LDR      r0,|L1.22048|
005358  6800              LDR      r0,[r0,#0]  ; tmeout
00535a  4ba7              LDR      r3,|L1.22008|
00535c  3b78              SUBS     r3,r3,#0x78
00535e  461a              MOV      r2,r3
005360  3208              ADDS     r2,r2,#8
005362  a1ab              ADR      r1,|L1.22032|
005364  9000              STR      r0,[sp,#0]
005366  48ac              LDR      r0,|L1.22040|
005368  f7fffffe          BL       send_GSM
;;;525    msg_sim800(); 
00536c  f7fffffe          BL       msg_sim800
;;;526    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
005370  2004              MOVS     r0,#4
005372  4ba1              LDR      r3,|L1.22008|
005374  3318              ADDS     r3,r3,#0x18
005376  461a              MOV      r2,r3
005378  3a88              SUBS     r2,r2,#0x88
00537a  a1a5              ADR      r1,|L1.22032|
00537c  9000              STR      r0,[sp,#0]
00537e  48a5              LDR      r0,|L1.22036|
005380  3030              ADDS     r0,r0,#0x30
005382  f7fffffe          BL       send_GSM
;;;527    GPS_COLLECT2();
005386  f7fffffe          BL       GPS_COLLECT2
;;;528    strcat(data,"CH\n");	
00538a  4999              LDR      r1,|L1.22000|
00538c  3944              SUBS     r1,r1,#0x44
00538e  489c              LDR      r0,|L1.22016|
005390  f7fffffe          BL       strcat
;;;529    GPS_COLLECT2();
005394  f7fffffe          BL       GPS_COLLECT2
;;;530    strcat(data,"CH\n");	
005398  4995              LDR      r1,|L1.22000|
00539a  3944              SUBS     r1,r1,#0x44
00539c  4898              LDR      r0,|L1.22016|
00539e  f7fffffe          BL       strcat
;;;531    
;;;532    
;;;533    msg_sim800(); 
0053a2  f7fffffe          BL       msg_sim800
;;;534    GPS_COLLECT2();
0053a6  f7fffffe          BL       GPS_COLLECT2
;;;535    strcat(data,"CH\n");	
0053aa  4991              LDR      r1,|L1.22000|
0053ac  3944              SUBS     r1,r1,#0x44
0053ae  4894              LDR      r0,|L1.22016|
0053b0  f7fffffe          BL       strcat
;;;536    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0053b4  f7fffffe          BL       clear
0053b8  4896              LDR      r0,|L1.22036|
0053ba  3040              ADDS     r0,r0,#0x40
0053bc  f7fffffe          BL       send_modem
0053c0  f7fffffe          BL       clear
;;;537    					delay(20);
0053c4  2014              MOVS     r0,#0x14
0053c6  f7fffffe          BL       delay
;;;538    
;;;539    
;;;540    msg_sim800(); 
0053ca  f7fffffe          BL       msg_sim800
;;;541    
;;;542    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0053ce  4b95              LDR      r3,|L1.22052|
0053d0  4a95              LDR      r2,|L1.22056|
0053d2  4990              LDR      r1,|L1.22036|
0053d4  3158              ADDS     r1,r1,#0x58
0053d6  4890              LDR      r0,|L1.22040|
0053d8  f7fffffe          BL       __2sprintf
;;;543    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0053dc  4890              LDR      r0,|L1.22048|
0053de  6800              LDR      r0,[r0,#0]  ; tmeout
0053e0  4b85              LDR      r3,|L1.22008|
0053e2  3b78              SUBS     r3,r3,#0x78
0053e4  4a84              LDR      r2,|L1.22008|
0053e6  498b              LDR      r1,|L1.22036|
0053e8  3178              ADDS     r1,r1,#0x78
0053ea  9000              STR      r0,[sp,#0]
0053ec  488a              LDR      r0,|L1.22040|
0053ee  f7fffffe          BL       send_GSM
;;;544    						clear();
0053f2  f7fffffe          BL       clear
;;;545    						
;;;546    						
;;;547    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
0053f6  488a              LDR      r0,|L1.22048|
0053f8  6800              LDR      r0,[r0,#0]  ; tmeout
0053fa  4b86              LDR      r3,|L1.22036|
0053fc  3380              ADDS     r3,r3,#0x80
0053fe  4a7e              LDR      r2,|L1.22008|
005400  a18a              ADR      r1,|L1.22060|
005402  9000              STR      r0,[sp,#0]
005404  4618              MOV      r0,r3
005406  3014              ADDS     r0,r0,#0x14
005408  f7fffffe          BL       send_GSM
;;;548    						
;;;549    //*************************************tcp initialization*******************************/
;;;550    			clear();		
00540c  f7fffffe          BL       clear
;;;551    						cond=mystrstr(uart_string_gsm,'>');
005410  213e              MOVS     r1,#0x3e
005412  4878              LDR      r0,|L1.22004|
005414  f7fffffe          BL       mystrstr
005418  4985              LDR      r1,|L1.22064|
00541a  7008              STRB     r0,[r1,#0]
;;;552    								if(cond)	
00541c  4608              MOV      r0,r1
00541e  7800              LDRB     r0,[r0,#0]  ; cond
005420  2800              CMP      r0,#0
005422  d07d              BEQ      |L1.21792|
;;;553    								{	
;;;554    
;;;555    									clear();
005424  f7fffffe          BL       clear
;;;556    									memset(uart_string_gsm,0,5000);
005428  4982              LDR      r1,|L1.22068|
00542a  4872              LDR      r0,|L1.22004|
00542c  f7fffffe          BL       __aeabi_memclr
;;;557    									strcat(data,"\n");
005430  a181              ADR      r1,|L1.22072|
005432  4873              LDR      r0,|L1.22016|
005434  f7fffffe          BL       strcat
;;;558    									len=strlen(data);
005438  4871              LDR      r0,|L1.22016|
00543a  f7fffffe          BL       strlen
00543e  497f              LDR      r1,|L1.22076|
005440  6008              STR      r0,[r1,#0]  ; len
;;;559    									tout=0;
005442  2000              MOVS     r0,#0
005444  496d              LDR      r1,|L1.22012|
005446  6008              STR      r0,[r1,#0]  ; tout
;;;560    									k2=0;
005448  497d              LDR      r1,|L1.22080|
00544a  6008              STR      r0,[r1,#0]  ; k2
;;;561    									for(k=0;k<len;k++)
00544c  497d              LDR      r1,|L1.22084|
00544e  6008              STR      r0,[r1,#0]  ; k
005450  e00d              B        |L1.21614|
                  |L1.21586|
;;;562    									{
;;;563    										uart_putchar(UART1_BASE_PTR, data[k]);
005452  486b              LDR      r0,|L1.22016|
005454  497b              LDR      r1,|L1.22084|
005456  6809              LDR      r1,[r1,#0]  ; k
005458  5c40              LDRB     r0,[r0,r1]
00545a  4601              MOV      r1,r0
00545c  9001              STR      r0,[sp,#4]
00545e  4863              LDR      r0,|L1.21996|
005460  f7fffffe          BL       uart_putchar
005464  4877              LDR      r0,|L1.22084|
005466  6800              LDR      r0,[r0,#0]            ;561  ; k
005468  1c40              ADDS     r0,r0,#1              ;561
00546a  4976              LDR      r1,|L1.22084|
00546c  6008              STR      r0,[r1,#0]            ;561  ; k
                  |L1.21614|
00546e  4875              LDR      r0,|L1.22084|
005470  6800              LDR      r0,[r0,#0]            ;561  ; k
005472  4972              LDR      r1,|L1.22076|
005474  6809              LDR      r1,[r1,#0]            ;561  ; len
005476  4288              CMP      r0,r1                 ;561
005478  dbeb              BLT      |L1.21586|
;;;564    									}uart_putchar(UART1_BASE_PTR, 0x1A);
00547a  211a              MOVS     r1,#0x1a
00547c  485b              LDR      r0,|L1.21996|
00547e  f7fffffe          BL       uart_putchar
;;;565    									do
005482  bf00              NOP      
                  |L1.21636|
;;;566    																{stcond1=strstr(uart_string_gsm,"SEND OK");
005484  495c              LDR      r1,|L1.22008|
005486  3908              SUBS     r1,r1,#8
005488  485a              LDR      r0,|L1.22004|
00548a  f7fffffe          BL       strstr
00548e  496e              LDR      r1,|L1.22088|
005490  6008              STR      r0,[r1,#0]  ; stcond1
;;;567    																	stcond2=strstr(uart_string_gsm, "ERROR");
005492  4959              LDR      r1,|L1.22008|
005494  4857              LDR      r0,|L1.22004|
005496  f7fffffe          BL       strstr
00549a  496c              LDR      r1,|L1.22092|
00549c  6008              STR      r0,[r1,#0]  ; stcond2
;;;568    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00549e  495d              LDR      r1,|L1.22036|
0054a0  3188              ADDS     r1,r1,#0x88
0054a2  4854              LDR      r0,|L1.22004|
0054a4  f7fffffe          BL       strstr
0054a8  4969              LDR      r1,|L1.22096|
0054aa  6008              STR      r0,[r1,#0]  ; stcond3
;;;569    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0054ac  4952              LDR      r1,|L1.22008|
0054ae  3118              ADDS     r1,r1,#0x18
0054b0  4850              LDR      r0,|L1.22004|
0054b2  f7fffffe          BL       strstr
0054b6  4967              LDR      r1,|L1.22100|
0054b8  6008              STR      r0,[r1,#0]  ; stcond4
;;;570    																	
;;;571    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 7) ) ); //|| (timeout < 1)   
0054ba  4864              LDR      r0,|L1.22092|
0054bc  6800              LDR      r0,[r0,#0]  ; stcond2
0054be  2800              CMP      r0,#0
0054c0  d10f              BNE      |L1.21730|
0054c2  4863              LDR      r0,|L1.22096|
0054c4  6800              LDR      r0,[r0,#0]  ; stcond3
0054c6  2800              CMP      r0,#0
0054c8  d10b              BNE      |L1.21730|
0054ca  4608              MOV      r0,r1
0054cc  6800              LDR      r0,[r0,#0]  ; stcond4
0054ce  2800              CMP      r0,#0
0054d0  d107              BNE      |L1.21730|
0054d2  485d              LDR      r0,|L1.22088|
0054d4  6800              LDR      r0,[r0,#0]  ; stcond1
0054d6  2800              CMP      r0,#0
0054d8  d103              BNE      |L1.21730|
0054da  4848              LDR      r0,|L1.22012|
0054dc  6800              LDR      r0,[r0,#0]  ; tout
0054de  2807              CMP      r0,#7
0054e0  ddd0              BLE      |L1.21636|
                  |L1.21730|
;;;572    																delay(10);clear();
0054e2  200a              MOVS     r0,#0xa
0054e4  f7fffffe          BL       delay
0054e8  f7fffffe          BL       clear
;;;573    														uart_putchar(UART1_BASE_PTR,0x1A);
0054ec  211a              MOVS     r1,#0x1a
0054ee  483f              LDR      r0,|L1.21996|
0054f0  f7fffffe          BL       uart_putchar
;;;574    												delay(10);
0054f4  200a              MOVS     r0,#0xa
0054f6  f7fffffe          BL       delay
;;;575    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0054fa  211a              MOVS     r1,#0x1a
0054fc  483b              LDR      r0,|L1.21996|
0054fe  f7fffffe          BL       uart_putchar
005502  211a              MOVS     r1,#0x1a
005504  4839              LDR      r0,|L1.21996|
005506  f7fffffe          BL       uart_putchar
00550a  211a              MOVS     r1,#0x1a
00550c  4837              LDR      r0,|L1.21996|
00550e  f7fffffe          BL       uart_putchar
;;;576    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
005512  211a              MOVS     r1,#0x1a
005514  4835              LDR      r0,|L1.21996|
005516  f7fffffe          BL       uart_putchar
00551a  f7fffffe          BL       clear
00551e  e000              B        |L1.21794|
                  |L1.21792|
005520  e1ac              B        |L1.22652|
                  |L1.21794|
005522  200a              MOVS     r0,#0xa
005524  f7fffffe          BL       delay
;;;577    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
005528  211a              MOVS     r1,#0x1a
00552a  4830              LDR      r0,|L1.21996|
00552c  f7fffffe          BL       uart_putchar
005530  f7fffffe          BL       clear
005534  200a              MOVS     r0,#0xa
005536  f7fffffe          BL       delay
;;;578    															
;;;579    										qwe=strlen(uart_string_gsm);
00553a  482e              LDR      r0,|L1.22004|
00553c  f7fffffe          BL       strlen
005540  4945              LDR      r1,|L1.22104|
005542  6008              STR      r0,[r1,#0]  ; qwe
;;;580    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
005544  211a              MOVS     r1,#0x1a
005546  4829              LDR      r0,|L1.21996|
005548  f7fffffe          BL       uart_putchar
00554c  f7fffffe          BL       clear
005550  200a              MOVS     r0,#0xa
005552  f7fffffe          BL       delay
;;;581    								delay(50);
005556  2032              MOVS     r0,#0x32
005558  f7fffffe          BL       delay
;;;582    								con1d=strstr(uart_string_gsm,"SEND OK");
00555c  4926              LDR      r1,|L1.22008|
00555e  3908              SUBS     r1,r1,#8
005560  4824              LDR      r0,|L1.22004|
005562  f7fffffe          BL       strstr
005566  493d              LDR      r1,|L1.22108|
005568  6008              STR      r0,[r1,#0]  ; con1d
;;;583    								if(!(con1d) == 1 )
00556a  4608              MOV      r0,r1
00556c  6800              LDR      r0,[r0,#0]  ; con1d
00556e  2800              CMP      r0,#0
005570  d101              BNE      |L1.21878|
005572  2001              MOVS     r0,#1
005574  e000              B        |L1.21880|
                  |L1.21878|
005576  2000              MOVS     r0,#0
                  |L1.21880|
005578  2801              CMP      r0,#1
00557a  d173              BNE      |L1.22116|
;;;584    								{
;;;585    									delay(100);
00557c  2064              MOVS     r0,#0x64
00557e  f7fffffe          BL       delay
;;;586    									clear();//memset(uart_string_gsm,0,5000);
005582  f7fffffe          BL       clear
;;;587    									memset(at_,0,100);
005586  2164              MOVS     r1,#0x64
005588  4823              LDR      r0,|L1.22040|
00558a  f7fffffe          BL       __aeabi_memclr
;;;588    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00558e  481c              LDR      r0,|L1.22016|
005590  f7fffffe          BL       strlen
005594  1c40              ADDS     r0,r0,#1
005596  4603              MOV      r3,r0
005598  4a31              LDR      r2,|L1.22112|
00559a  4915              LDR      r1,|L1.22000|
00559c  3938              SUBS     r1,r1,#0x38
00559e  9001              STR      r0,[sp,#4]
0055a0  481d              LDR      r0,|L1.22040|
0055a2  f7fffffe          BL       __2sprintf
;;;589    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0055a6  2005              MOVS     r0,#5
0055a8  4b13              LDR      r3,|L1.22008|
0055aa  461a              MOV      r2,r3
0055ac  3a70              SUBS     r2,r2,#0x70
0055ae  a11f              ADR      r1,|L1.22060|
0055b0  9000              STR      r0,[sp,#0]
0055b2  4819              LDR      r0,|L1.22040|
0055b4  f7fffffe          BL       send_SD
;;;590    									clear();	
0055b8  f7fffffe          BL       clear
;;;591    									k2=0;									//string array counter for uart 1
0055bc  2000              MOVS     r0,#0
0055be  4920              LDR      r1,|L1.22080|
0055c0  6008              STR      r0,[r1,#0]  ; k2
;;;592    									tout=0;	
0055c2  490e              LDR      r1,|L1.22012|
0055c4  6008              STR      r0,[r1,#0]  ; tout
;;;593    									for(k=0;k<strlen(data);k++)
0055c6  491f              LDR      r1,|L1.22084|
0055c8  6008              STR      r0,[r1,#0]  ; k
0055ca  e00d              B        |L1.21992|
                  |L1.21964|
;;;594    									{
;;;595    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0055cc  480c              LDR      r0,|L1.22016|
0055ce  491d              LDR      r1,|L1.22084|
0055d0  6809              LDR      r1,[r1,#0]  ; k
0055d2  5c40              LDRB     r0,[r0,r1]
0055d4  4601              MOV      r1,r0
0055d6  9001              STR      r0,[sp,#4]
0055d8  4804              LDR      r0,|L1.21996|
0055da  f7fffffe          BL       uart_putchar
0055de  4819              LDR      r0,|L1.22084|
0055e0  6800              LDR      r0,[r0,#0]            ;593  ; k
0055e2  1c40              ADDS     r0,r0,#1              ;593
0055e4  4917              LDR      r1,|L1.22084|
0055e6  6008              STR      r0,[r1,#0]            ;593  ; k
                  |L1.21992|
0055e8  4805              LDR      r0,|L1.22016|
0055ea  e03c              B        |L1.22118|
                  |L1.21996|
                          DCD      0x4006b000
                  |L1.22000|
                          DCD      ||.text||+0xd88
                  |L1.22004|
                          DCD      uart_string_gsm
                  |L1.22008|
                          DCD      ||.text||+0x910
                  |L1.22012|
                          DCD      tout
                  |L1.22016|
                          DCD      data
                  |L1.22020|
                          DCD      flagch
                  |L1.22024|
                          DCD      int_erval
                  |L1.22028|
                          DCD      temp
                  |L1.22032|
005610  4f4b00            DCB      "OK",0
005613  00                DCB      0
                  |L1.22036|
                          DCD      ||.text||+0x1204
                  |L1.22040|
                          DCD      at_
                  |L1.22044|
                          DCD      apn
                  |L1.22048|
                          DCD      tmeout
                  |L1.22052|
                          DCD      port
                  |L1.22056|
                          DCD      ||ip||
                  |L1.22060|
00562c  3e00              DCB      ">",0
00562e  00                DCB      0
00562f  00                DCB      0
                  |L1.22064|
                          DCD      cond
                  |L1.22068|
                          DCD      0x00001388
                  |L1.22072|
005638  0a00              DCB      "\n",0
00563a  00                DCB      0
00563b  00                DCB      0
                  |L1.22076|
                          DCD      len
                  |L1.22080|
                          DCD      ||k2||
                  |L1.22084|
                          DCD      k
                  |L1.22088|
                          DCD      stcond1
                  |L1.22092|
                          DCD      stcond2
                  |L1.22096|
                          DCD      stcond3
                  |L1.22100|
                          DCD      stcond4
                  |L1.22104|
                          DCD      qwe
                  |L1.22108|
                          DCD      con1d
                  |L1.22112|
                          DCD      drive
                  |L1.22116|
005664  e107              B        |L1.22646|
                  |L1.22118|
005666  f7fffffe          BL       strlen
00566a  49fe              LDR      r1,|L1.23140|
00566c  6809              LDR      r1,[r1,#0]            ;593  ; k
00566e  4288              CMP      r0,r1                 ;593
005670  d8ac              BHI      |L1.21964|
;;;596    									}	
;;;597    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005672  210a              MOVS     r1,#0xa
005674  48fc              LDR      r0,|L1.23144|
005676  f7fffffe          BL       uart_putchar
00567a  210a              MOVS     r1,#0xa
00567c  48fa              LDR      r0,|L1.23144|
00567e  f7fffffe          BL       uart_putchar
005682  210a              MOVS     r1,#0xa
005684  48f8              LDR      r0,|L1.23144|
005686  f7fffffe          BL       uart_putchar
00568a  210a              MOVS     r1,#0xa
00568c  48f6              LDR      r0,|L1.23144|
00568e  f7fffffe          BL       uart_putchar
005692  210a              MOVS     r1,#0xa
005694  48f4              LDR      r0,|L1.23144|
005696  f7fffffe          BL       uart_putchar
00569a  210a              MOVS     r1,#0xa
00569c  48f2              LDR      r0,|L1.23144|
00569e  f7fffffe          BL       uart_putchar
0056a2  210a              MOVS     r1,#0xa
0056a4  48f0              LDR      r0,|L1.23144|
0056a6  f7fffffe          BL       uart_putchar
0056aa  210a              MOVS     r1,#0xa
0056ac  48ee              LDR      r0,|L1.23144|
0056ae  f7fffffe          BL       uart_putchar
0056b2  210a              MOVS     r1,#0xa
0056b4  48ec              LDR      r0,|L1.23144|
0056b6  f7fffffe          BL       uart_putchar
0056ba  210a              MOVS     r1,#0xa
0056bc  48ea              LDR      r0,|L1.23144|
0056be  f7fffffe          BL       uart_putchar
0056c2  210a              MOVS     r1,#0xa
0056c4  48e8              LDR      r0,|L1.23144|
0056c6  f7fffffe          BL       uart_putchar
0056ca  210a              MOVS     r1,#0xa
0056cc  48e6              LDR      r0,|L1.23144|
0056ce  f7fffffe          BL       uart_putchar
0056d2  210a              MOVS     r1,#0xa
0056d4  48e4              LDR      r0,|L1.23144|
0056d6  f7fffffe          BL       uart_putchar
0056da  210a              MOVS     r1,#0xa
0056dc  48e2              LDR      r0,|L1.23144|
0056de  f7fffffe          BL       uart_putchar
0056e2  210a              MOVS     r1,#0xa
0056e4  48e0              LDR      r0,|L1.23144|
0056e6  f7fffffe          BL       uart_putchar
0056ea  210a              MOVS     r1,#0xa
0056ec  48de              LDR      r0,|L1.23144|
0056ee  f7fffffe          BL       uart_putchar
0056f2  210a              MOVS     r1,#0xa
0056f4  48dc              LDR      r0,|L1.23144|
0056f6  f7fffffe          BL       uart_putchar
0056fa  210a              MOVS     r1,#0xa
0056fc  48da              LDR      r0,|L1.23144|
0056fe  f7fffffe          BL       uart_putchar
005702  210a              MOVS     r1,#0xa
005704  48d8              LDR      r0,|L1.23144|
005706  f7fffffe          BL       uart_putchar
00570a  210a              MOVS     r1,#0xa
00570c  48d6              LDR      r0,|L1.23144|
00570e  f7fffffe          BL       uart_putchar
005712  210a              MOVS     r1,#0xa
005714  48d4              LDR      r0,|L1.23144|
005716  f7fffffe          BL       uart_putchar
00571a  210a              MOVS     r1,#0xa
00571c  48d2              LDR      r0,|L1.23144|
00571e  f7fffffe          BL       uart_putchar
005722  210a              MOVS     r1,#0xa
005724  48d0              LDR      r0,|L1.23144|
005726  f7fffffe          BL       uart_putchar
00572a  210a              MOVS     r1,#0xa
00572c  48ce              LDR      r0,|L1.23144|
00572e  f7fffffe          BL       uart_putchar
005732  210a              MOVS     r1,#0xa
005734  48cc              LDR      r0,|L1.23144|
005736  f7fffffe          BL       uart_putchar
00573a  210a              MOVS     r1,#0xa
00573c  48ca              LDR      r0,|L1.23144|
00573e  f7fffffe          BL       uart_putchar
005742  210a              MOVS     r1,#0xa
005744  48c8              LDR      r0,|L1.23144|
005746  f7fffffe          BL       uart_putchar
00574a  210a              MOVS     r1,#0xa
00574c  48c6              LDR      r0,|L1.23144|
00574e  f7fffffe          BL       uart_putchar
005752  210a              MOVS     r1,#0xa
005754  48c4              LDR      r0,|L1.23144|
005756  f7fffffe          BL       uart_putchar
00575a  210a              MOVS     r1,#0xa
00575c  48c2              LDR      r0,|L1.23144|
00575e  f7fffffe          BL       uart_putchar
005762  210a              MOVS     r1,#0xa
005764  48c0              LDR      r0,|L1.23144|
005766  f7fffffe          BL       uart_putchar
00576a  210a              MOVS     r1,#0xa
00576c  48be              LDR      r0,|L1.23144|
00576e  f7fffffe          BL       uart_putchar
005772  210a              MOVS     r1,#0xa
005774  48bc              LDR      r0,|L1.23144|
005776  f7fffffe          BL       uart_putchar
00577a  210a              MOVS     r1,#0xa
00577c  48ba              LDR      r0,|L1.23144|
00577e  f7fffffe          BL       uart_putchar
005782  210a              MOVS     r1,#0xa
005784  48b8              LDR      r0,|L1.23144|
005786  f7fffffe          BL       uart_putchar
00578a  210a              MOVS     r1,#0xa
00578c  48b6              LDR      r0,|L1.23144|
00578e  f7fffffe          BL       uart_putchar
005792  210a              MOVS     r1,#0xa
005794  48b4              LDR      r0,|L1.23144|
005796  f7fffffe          BL       uart_putchar
00579a  210a              MOVS     r1,#0xa
00579c  48b2              LDR      r0,|L1.23144|
00579e  f7fffffe          BL       uart_putchar
0057a2  210a              MOVS     r1,#0xa
0057a4  48b0              LDR      r0,|L1.23144|
0057a6  f7fffffe          BL       uart_putchar
0057aa  210a              MOVS     r1,#0xa
0057ac  48ae              LDR      r0,|L1.23144|
0057ae  f7fffffe          BL       uart_putchar
0057b2  210a              MOVS     r1,#0xa
0057b4  48ac              LDR      r0,|L1.23144|
0057b6  f7fffffe          BL       uart_putchar
0057ba  210a              MOVS     r1,#0xa
0057bc  48aa              LDR      r0,|L1.23144|
0057be  f7fffffe          BL       uart_putchar
0057c2  210a              MOVS     r1,#0xa
0057c4  48a8              LDR      r0,|L1.23144|
0057c6  f7fffffe          BL       uart_putchar
0057ca  210a              MOVS     r1,#0xa
0057cc  48a6              LDR      r0,|L1.23144|
0057ce  f7fffffe          BL       uart_putchar
0057d2  210a              MOVS     r1,#0xa
0057d4  48a4              LDR      r0,|L1.23144|
0057d6  f7fffffe          BL       uart_putchar
0057da  210a              MOVS     r1,#0xa
0057dc  48a2              LDR      r0,|L1.23144|
0057de  f7fffffe          BL       uart_putchar
0057e2  210a              MOVS     r1,#0xa
0057e4  48a0              LDR      r0,|L1.23144|
0057e6  f7fffffe          BL       uart_putchar
0057ea  210a              MOVS     r1,#0xa
0057ec  489e              LDR      r0,|L1.23144|
0057ee  f7fffffe          BL       uart_putchar
0057f2  210a              MOVS     r1,#0xa
0057f4  489c              LDR      r0,|L1.23144|
0057f6  f7fffffe          BL       uart_putchar
0057fa  210a              MOVS     r1,#0xa
0057fc  489a              LDR      r0,|L1.23144|
0057fe  f7fffffe          BL       uart_putchar
005802  210a              MOVS     r1,#0xa
005804  4898              LDR      r0,|L1.23144|
005806  f7fffffe          BL       uart_putchar
00580a  210a              MOVS     r1,#0xa
00580c  4896              LDR      r0,|L1.23144|
00580e  f7fffffe          BL       uart_putchar
005812  210a              MOVS     r1,#0xa
005814  4894              LDR      r0,|L1.23144|
005816  f7fffffe          BL       uart_putchar
00581a  210a              MOVS     r1,#0xa
00581c  4892              LDR      r0,|L1.23144|
00581e  f7fffffe          BL       uart_putchar
005822  210a              MOVS     r1,#0xa
005824  4890              LDR      r0,|L1.23144|
005826  f7fffffe          BL       uart_putchar
00582a  210a              MOVS     r1,#0xa
00582c  488e              LDR      r0,|L1.23144|
00582e  f7fffffe          BL       uart_putchar
005832  210a              MOVS     r1,#0xa
005834  488c              LDR      r0,|L1.23144|
005836  f7fffffe          BL       uart_putchar
;;;598    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00583a  bf00              NOP      
                  |L1.22588|
00583c  498b              LDR      r1,|L1.23148|
00583e  488c              LDR      r0,|L1.23152|
005840  f7fffffe          BL       strstr
005844  2800              CMP      r0,#0
005846  d109              BNE      |L1.22620|
005848  498a              LDR      r1,|L1.23156|
00584a  4889              LDR      r0,|L1.23152|
00584c  f7fffffe          BL       strstr
005850  2800              CMP      r0,#0
005852  d103              BNE      |L1.22620|
005854  4888              LDR      r0,|L1.23160|
005856  6800              LDR      r0,[r0,#0]  ; tout
005858  2805              CMP      r0,#5
00585a  ddef              BLE      |L1.22588|
                  |L1.22620|
;;;599    									{}
;;;600    	                memset(data,0,strlen(data));
00585c  4887              LDR      r0,|L1.23164|
00585e  f7fffffe          BL       strlen
005862  e000              B        |L1.22630|
                  |L1.22628|
005864  e161              B        |L1.23338|
                  |L1.22630|
005866  4601              MOV      r1,r0
005868  9001              STR      r0,[sp,#4]
00586a  4884              LDR      r0,|L1.23164|
00586c  f7fffffe          BL       __aeabi_memclr
;;;601    									clear();
005870  f7fffffe          BL       clear
005874  e15b              B        |L1.23342|
                  |L1.22646|
;;;602    									}else{
;;;603    									send_chunk();
005876  f7fffffe          BL       send_chunk
00587a  e158              B        |L1.23342|
                  |L1.22652|
;;;604    									}	
;;;605    						}else{
;;;606    									delay(100);
00587c  2064              MOVS     r0,#0x64
00587e  f7fffffe          BL       delay
;;;607    									clear();//memset(uart_string_gsm,0,5000);
005882  f7fffffe          BL       clear
;;;608    
;;;609    									memset(at_,0,100);
005886  2164              MOVS     r1,#0x64
005888  487d              LDR      r0,|L1.23168|
00588a  f7fffffe          BL       __aeabi_memclr
;;;610    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00588e  487b              LDR      r0,|L1.23164|
005890  f7fffffe          BL       strlen
005894  1c40              ADDS     r0,r0,#1
005896  4603              MOV      r3,r0
005898  4a7a              LDR      r2,|L1.23172|
00589a  4974              LDR      r1,|L1.23148|
00589c  3938              SUBS     r1,r1,#0x38
00589e  9001              STR      r0,[sp,#4]
0058a0  4877              LDR      r0,|L1.23168|
0058a2  f7fffffe          BL       __2sprintf
;;;611    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0058a6  2005              MOVS     r0,#5
0058a8  4b72              LDR      r3,|L1.23156|
0058aa  461a              MOV      r2,r3
0058ac  3a70              SUBS     r2,r2,#0x70
0058ae  a176              ADR      r1,|L1.23176|
0058b0  9000              STR      r0,[sp,#0]
0058b2  4873              LDR      r0,|L1.23168|
0058b4  f7fffffe          BL       send_SD
;;;612    									clear();	
0058b8  f7fffffe          BL       clear
;;;613    									k2=0;									//string array counter for uart 1
0058bc  2000              MOVS     r0,#0
0058be  4973              LDR      r1,|L1.23180|
0058c0  6008              STR      r0,[r1,#0]  ; k2
;;;614    									tout=0;	
0058c2  496d              LDR      r1,|L1.23160|
0058c4  6008              STR      r0,[r1,#0]  ; tout
;;;615    		for(k=0;k<strlen(data);k++)
0058c6  4967              LDR      r1,|L1.23140|
0058c8  6008              STR      r0,[r1,#0]  ; k
0058ca  e00d              B        |L1.22760|
                  |L1.22732|
;;;616    		{
;;;617    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0058cc  486b              LDR      r0,|L1.23164|
0058ce  4965              LDR      r1,|L1.23140|
0058d0  6809              LDR      r1,[r1,#0]  ; k
0058d2  5c40              LDRB     r0,[r0,r1]
0058d4  4601              MOV      r1,r0
0058d6  9001              STR      r0,[sp,#4]
0058d8  4863              LDR      r0,|L1.23144|
0058da  f7fffffe          BL       uart_putchar
0058de  4861              LDR      r0,|L1.23140|
0058e0  6800              LDR      r0,[r0,#0]            ;615  ; k
0058e2  1c40              ADDS     r0,r0,#1              ;615
0058e4  495f              LDR      r1,|L1.23140|
0058e6  6008              STR      r0,[r1,#0]            ;615  ; k
                  |L1.22760|
0058e8  4864              LDR      r0,|L1.23164|
0058ea  f7fffffe          BL       strlen
0058ee  495d              LDR      r1,|L1.23140|
0058f0  6809              LDR      r1,[r1,#0]            ;615  ; k
0058f2  4288              CMP      r0,r1                 ;615
0058f4  d8ea              BHI      |L1.22732|
;;;618    		}	
;;;619    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0058f6  210a              MOVS     r1,#0xa
0058f8  485b              LDR      r0,|L1.23144|
0058fa  f7fffffe          BL       uart_putchar
0058fe  210a              MOVS     r1,#0xa
005900  4859              LDR      r0,|L1.23144|
005902  f7fffffe          BL       uart_putchar
005906  210a              MOVS     r1,#0xa
005908  4857              LDR      r0,|L1.23144|
00590a  f7fffffe          BL       uart_putchar
00590e  210a              MOVS     r1,#0xa
005910  4855              LDR      r0,|L1.23144|
005912  f7fffffe          BL       uart_putchar
005916  210a              MOVS     r1,#0xa
005918  4853              LDR      r0,|L1.23144|
00591a  f7fffffe          BL       uart_putchar
00591e  210a              MOVS     r1,#0xa
005920  4851              LDR      r0,|L1.23144|
005922  f7fffffe          BL       uart_putchar
005926  210a              MOVS     r1,#0xa
005928  484f              LDR      r0,|L1.23144|
00592a  f7fffffe          BL       uart_putchar
00592e  210a              MOVS     r1,#0xa
005930  484d              LDR      r0,|L1.23144|
005932  f7fffffe          BL       uart_putchar
005936  210a              MOVS     r1,#0xa
005938  484b              LDR      r0,|L1.23144|
00593a  f7fffffe          BL       uart_putchar
00593e  210a              MOVS     r1,#0xa
005940  4849              LDR      r0,|L1.23144|
005942  f7fffffe          BL       uart_putchar
005946  210a              MOVS     r1,#0xa
005948  4847              LDR      r0,|L1.23144|
00594a  f7fffffe          BL       uart_putchar
00594e  210a              MOVS     r1,#0xa
005950  4845              LDR      r0,|L1.23144|
005952  f7fffffe          BL       uart_putchar
005956  210a              MOVS     r1,#0xa
005958  4843              LDR      r0,|L1.23144|
00595a  f7fffffe          BL       uart_putchar
00595e  210a              MOVS     r1,#0xa
005960  4841              LDR      r0,|L1.23144|
005962  f7fffffe          BL       uart_putchar
005966  210a              MOVS     r1,#0xa
005968  483f              LDR      r0,|L1.23144|
00596a  f7fffffe          BL       uart_putchar
00596e  210a              MOVS     r1,#0xa
005970  483d              LDR      r0,|L1.23144|
005972  f7fffffe          BL       uart_putchar
005976  210a              MOVS     r1,#0xa
005978  483b              LDR      r0,|L1.23144|
00597a  f7fffffe          BL       uart_putchar
00597e  210a              MOVS     r1,#0xa
005980  4839              LDR      r0,|L1.23144|
005982  f7fffffe          BL       uart_putchar
005986  210a              MOVS     r1,#0xa
005988  4837              LDR      r0,|L1.23144|
00598a  f7fffffe          BL       uart_putchar
00598e  210a              MOVS     r1,#0xa
005990  4835              LDR      r0,|L1.23144|
005992  f7fffffe          BL       uart_putchar
005996  210a              MOVS     r1,#0xa
005998  4833              LDR      r0,|L1.23144|
00599a  f7fffffe          BL       uart_putchar
00599e  210a              MOVS     r1,#0xa
0059a0  4831              LDR      r0,|L1.23144|
0059a2  f7fffffe          BL       uart_putchar
0059a6  210a              MOVS     r1,#0xa
0059a8  482f              LDR      r0,|L1.23144|
0059aa  f7fffffe          BL       uart_putchar
0059ae  210a              MOVS     r1,#0xa
0059b0  482d              LDR      r0,|L1.23144|
0059b2  f7fffffe          BL       uart_putchar
0059b6  210a              MOVS     r1,#0xa
0059b8  482b              LDR      r0,|L1.23144|
0059ba  f7fffffe          BL       uart_putchar
0059be  210a              MOVS     r1,#0xa
0059c0  4829              LDR      r0,|L1.23144|
0059c2  f7fffffe          BL       uart_putchar
0059c6  210a              MOVS     r1,#0xa
0059c8  4827              LDR      r0,|L1.23144|
0059ca  f7fffffe          BL       uart_putchar
0059ce  210a              MOVS     r1,#0xa
0059d0  4825              LDR      r0,|L1.23144|
0059d2  f7fffffe          BL       uart_putchar
0059d6  210a              MOVS     r1,#0xa
0059d8  4823              LDR      r0,|L1.23144|
0059da  f7fffffe          BL       uart_putchar
0059de  210a              MOVS     r1,#0xa
0059e0  4821              LDR      r0,|L1.23144|
0059e2  f7fffffe          BL       uart_putchar
0059e6  210a              MOVS     r1,#0xa
0059e8  481f              LDR      r0,|L1.23144|
0059ea  f7fffffe          BL       uart_putchar
0059ee  210a              MOVS     r1,#0xa
0059f0  481d              LDR      r0,|L1.23144|
0059f2  f7fffffe          BL       uart_putchar
0059f6  210a              MOVS     r1,#0xa
0059f8  481b              LDR      r0,|L1.23144|
0059fa  f7fffffe          BL       uart_putchar
0059fe  210a              MOVS     r1,#0xa
005a00  4819              LDR      r0,|L1.23144|
005a02  f7fffffe          BL       uart_putchar
005a06  210a              MOVS     r1,#0xa
005a08  4817              LDR      r0,|L1.23144|
005a0a  f7fffffe          BL       uart_putchar
005a0e  210a              MOVS     r1,#0xa
005a10  4815              LDR      r0,|L1.23144|
005a12  f7fffffe          BL       uart_putchar
005a16  210a              MOVS     r1,#0xa
005a18  4813              LDR      r0,|L1.23144|
005a1a  f7fffffe          BL       uart_putchar
005a1e  210a              MOVS     r1,#0xa
005a20  4811              LDR      r0,|L1.23144|
005a22  f7fffffe          BL       uart_putchar
005a26  210a              MOVS     r1,#0xa
005a28  480f              LDR      r0,|L1.23144|
005a2a  f7fffffe          BL       uart_putchar
005a2e  210a              MOVS     r1,#0xa
005a30  480d              LDR      r0,|L1.23144|
005a32  f7fffffe          BL       uart_putchar
005a36  210a              MOVS     r1,#0xa
005a38  480b              LDR      r0,|L1.23144|
005a3a  f7fffffe          BL       uart_putchar
005a3e  210a              MOVS     r1,#0xa
005a40  4809              LDR      r0,|L1.23144|
005a42  f7fffffe          BL       uart_putchar
005a46  210a              MOVS     r1,#0xa
005a48  4807              LDR      r0,|L1.23144|
005a4a  f7fffffe          BL       uart_putchar
005a4e  210a              MOVS     r1,#0xa
005a50  4805              LDR      r0,|L1.23144|
005a52  f7fffffe          BL       uart_putchar
005a56  210a              MOVS     r1,#0xa
005a58  4803              LDR      r0,|L1.23144|
005a5a  f7fffffe          BL       uart_putchar
005a5e  210a              MOVS     r1,#0xa
005a60  4801              LDR      r0,|L1.23144|
005a62  e015              B        |L1.23184|
                  |L1.23140|
                          DCD      k
                  |L1.23144|
                          DCD      0x4006b000
                  |L1.23148|
                          DCD      ||.text||+0xd88
                  |L1.23152|
                          DCD      uart_string_gsm
                  |L1.23156|
                          DCD      ||.text||+0x910
                  |L1.23160|
                          DCD      tout
                  |L1.23164|
                          DCD      data
                  |L1.23168|
                          DCD      at_
                  |L1.23172|
                          DCD      drive
                  |L1.23176|
005a88  3e00              DCB      ">",0
005a8a  00                DCB      0
005a8b  00                DCB      0
                  |L1.23180|
                          DCD      ||k2||
                  |L1.23184|
005a90  f7fffffe          BL       uart_putchar
005a94  210a              MOVS     r1,#0xa
005a96  48fe              LDR      r0,|L1.24208|
005a98  f7fffffe          BL       uart_putchar
005a9c  210a              MOVS     r1,#0xa
005a9e  48fc              LDR      r0,|L1.24208|
005aa0  f7fffffe          BL       uart_putchar
005aa4  210a              MOVS     r1,#0xa
005aa6  48fa              LDR      r0,|L1.24208|
005aa8  f7fffffe          BL       uart_putchar
005aac  210a              MOVS     r1,#0xa
005aae  48f8              LDR      r0,|L1.24208|
005ab0  f7fffffe          BL       uart_putchar
005ab4  210a              MOVS     r1,#0xa
005ab6  48f6              LDR      r0,|L1.24208|
005ab8  f7fffffe          BL       uart_putchar
005abc  210a              MOVS     r1,#0xa
005abe  48f4              LDR      r0,|L1.24208|
005ac0  f7fffffe          BL       uart_putchar
005ac4  210a              MOVS     r1,#0xa
005ac6  48f2              LDR      r0,|L1.24208|
005ac8  f7fffffe          BL       uart_putchar
005acc  210a              MOVS     r1,#0xa
005ace  48f0              LDR      r0,|L1.24208|
005ad0  f7fffffe          BL       uart_putchar
005ad4  210a              MOVS     r1,#0xa
005ad6  48ee              LDR      r0,|L1.24208|
005ad8  f7fffffe          BL       uart_putchar
005adc  210a              MOVS     r1,#0xa
005ade  48ec              LDR      r0,|L1.24208|
005ae0  f7fffffe          BL       uart_putchar
005ae4  210a              MOVS     r1,#0xa
005ae6  48ea              LDR      r0,|L1.24208|
005ae8  f7fffffe          BL       uart_putchar
;;;620    								
;;;621    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005aec  bf00              NOP      
                  |L1.23278|
005aee  49e9              LDR      r1,|L1.24212|
005af0  48e9              LDR      r0,|L1.24216|
005af2  f7fffffe          BL       strstr
005af6  2800              CMP      r0,#0
005af8  d109              BNE      |L1.23310|
005afa  49e8              LDR      r1,|L1.24220|
005afc  48e6              LDR      r0,|L1.24216|
005afe  f7fffffe          BL       strstr
005b02  2800              CMP      r0,#0
005b04  d103              BNE      |L1.23310|
005b06  48e6              LDR      r0,|L1.24224|
005b08  6800              LDR      r0,[r0,#0]  ; tout
005b0a  2805              CMP      r0,#5
005b0c  ddef              BLE      |L1.23278|
                  |L1.23310|
;;;622    									{}
;;;623    	                 memset(data,0,strlen(data));
005b0e  48e5              LDR      r0,|L1.24228|
005b10  f7fffffe          BL       strlen
005b14  4601              MOV      r1,r0
005b16  9001              STR      r0,[sp,#4]
005b18  48e2              LDR      r0,|L1.24228|
005b1a  f7fffffe          BL       __aeabi_memclr
;;;624    									 clear();
005b1e  f7fffffe          BL       clear
;;;625      								logged=1;}			//
005b22  2001              MOVS     r0,#1
005b24  49e0              LDR      r1,|L1.24232|
005b26  6008              STR      r0,[r1,#0]  ; logged
005b28  e001              B        |L1.23342|
                  |L1.23338|
;;;626    
;;;627    							
;;;628    
;;;629    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;630    	else
;;;631    	{
;;;632    		send_chunk();
005b2a  f7fffffe          BL       send_chunk
                  |L1.23342|
;;;633    	}		
;;;634    								
;;;635    								
;;;636    								
;;;637    	memset(data,0,strlen(data));	
005b2e  48dd              LDR      r0,|L1.24228|
005b30  f7fffffe          BL       strlen
005b34  4601              MOV      r1,r0
005b36  9001              STR      r0,[sp,#4]
005b38  48da              LDR      r0,|L1.24228|
005b3a  f7fffffe          BL       __aeabi_memclr
;;;638    	uart_putchar(UART1_BASE_PTR, 0x1A);
005b3e  211a              MOVS     r1,#0x1a
005b40  48d3              LDR      r0,|L1.24208|
005b42  f7fffffe          BL       uart_putchar
                  |L1.23366|
;;;639    
;;;640    while(1)
005b46  e3ed              B        |L1.25380|
                  |L1.23368|
;;;641    {
;;;642    LED_state();
005b48  f7fffffe          BL       LED_state
;;;643    LED_state2();
005b4c  f7fffffe          BL       LED_state2
;;;644    RESET_ON; //not reset
005b50  2020              MOVS     r0,#0x20
005b52  49d6              LDR      r1,|L1.24236|
005b54  6048              STR      r0,[r1,#4]
;;;645    msg_sim800(); 
005b56  f7fffffe          BL       msg_sim800
;;;646    							
;;;647    	DTR_OFF;		// not sleep	
005b5a  2080              MOVS     r0,#0x80
005b5c  49d3              LDR      r1,|L1.24236|
005b5e  3140              ADDS     r1,r1,#0x40
005b60  6088              STR      r0,[r1,#8]
;;;648    	delay(200);
005b62  20c8              MOVS     r0,#0xc8
005b64  f7fffffe          BL       delay
;;;649    	send_GSM("\n\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
005b68  48d1              LDR      r0,|L1.24240|
005b6a  6800              LDR      r0,[r0,#0]  ; tmeout
005b6c  4bcb              LDR      r3,|L1.24220|
005b6e  3b78              SUBS     r3,r3,#0x78
005b70  4aca              LDR      r2,|L1.24220|
005b72  a1d0              ADR      r1,|L1.24244|
005b74  9000              STR      r0,[sp,#0]
005b76  a0d0              ADR      r0,|L1.24248|
005b78  f7fffffe          BL       send_GSM
;;;650    	// not sleep	
;;;651    	memset(num2,0,30);
005b7c  211e              MOVS     r1,#0x1e
005b7e  48d1              LDR      r0,|L1.24260|
005b80  f7fffffe          BL       __aeabi_memclr
;;;652    	parse_g(uart_string_gsm, 2, 3, ',', '\r' ,num2);
005b84  48cf              LDR      r0,|L1.24260|
005b86  210d              MOVS     r1,#0xd
005b88  232c              MOVS     r3,#0x2c
005b8a  2203              MOVS     r2,#3
005b8c  9100              STR      r1,[sp,#0]
005b8e  9001              STR      r0,[sp,#4]
005b90  2102              MOVS     r1,#2
005b92  48c1              LDR      r0,|L1.24216|
005b94  f7fffffe          BL       parse_g
;;;653    	voltagecbc=myAtoi(num2);
005b98  48ca              LDR      r0,|L1.24260|
005b9a  f7fffffe          BL       myAtoi
005b9e  49ca              LDR      r1,|L1.24264|
005ba0  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;654    	sleep_flag=0;
005ba2  2000              MOVS     r0,#0
005ba4  49c9              LDR      r1,|L1.24268|
005ba6  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;655    	test2=GPIOB_PDIR;
005ba8  48c0              LDR      r0,|L1.24236|
005baa  3840              SUBS     r0,r0,#0x40
005bac  6900              LDR      r0,[r0,#0x10]
005bae  49c8              LDR      r1,|L1.24272|
005bb0  6008              STR      r0,[r1,#0]  ; test2
;;;656    	if(voltagecbc<4000){breach=1;}
005bb2  48c5              LDR      r0,|L1.24264|
005bb4  6800              LDR      r0,[r0,#0]  ; voltagecbc
005bb6  217d              MOVS     r1,#0x7d
005bb8  0149              LSLS     r1,r1,#5
005bba  4288              CMP      r0,r1
005bbc  da03              BGE      |L1.23494|
005bbe  2001              MOVS     r0,#1
005bc0  49c4              LDR      r1,|L1.24276|
005bc2  6008              STR      r0,[r1,#0]  ; breach
005bc4  e002              B        |L1.23500|
                  |L1.23494|
;;;657    	else{breach=0;}
005bc6  2000              MOVS     r0,#0
005bc8  49c2              LDR      r1,|L1.24276|
005bca  6008              STR      r0,[r1,#0]  ; breach
                  |L1.23500|
;;;658    	if(voltagecbc<4000  ||  test2==1){
005bcc  48be              LDR      r0,|L1.24264|
005bce  6800              LDR      r0,[r0,#0]  ; voltagecbc
005bd0  217d              MOVS     r1,#0x7d
005bd2  0149              LSLS     r1,r1,#5
005bd4  4288              CMP      r0,r1
005bd6  db03              BLT      |L1.23520|
005bd8  48bd              LDR      r0,|L1.24272|
005bda  6800              LDR      r0,[r0,#0]  ; test2
005bdc  2801              CMP      r0,#1
005bde  d107              BNE      |L1.23536|
                  |L1.23520|
;;;659    	DTR_OFF;sleep_flag = 0;
005be0  2080              MOVS     r0,#0x80
005be2  49b2              LDR      r1,|L1.24236|
005be4  3140              ADDS     r1,r1,#0x40
005be6  6088              STR      r0,[r1,#8]
005be8  2000              MOVS     r0,#0
005bea  49b8              LDR      r1,|L1.24268|
005bec  6008              STR      r0,[r1,#0]  ; sleep_flag
005bee  e006              B        |L1.23550|
                  |L1.23536|
;;;660    	}
;;;661    	else{
;;;662    	DTR_ON;sleep_flag=1;
005bf0  2080              MOVS     r0,#0x80
005bf2  49ae              LDR      r1,|L1.24236|
005bf4  3140              ADDS     r1,r1,#0x40
005bf6  6048              STR      r0,[r1,#4]
005bf8  2001              MOVS     r0,#1
005bfa  49b4              LDR      r1,|L1.24268|
005bfc  6008              STR      r0,[r1,#0]  ; sleep_flag
                  |L1.23550|
;;;663    	}
;;;664    
;;;665    	
;;;666    	
;;;667    if(rtcticks2>=1500){
005bfe  48b6              LDR      r0,|L1.24280|
005c00  6800              LDR      r0,[r0,#0]  ; rtcticks2
005c02  49b6              LDR      r1,|L1.24284|
005c04  4288              CMP      r0,r1
005c06  db7d              BLT      |L1.23812|
;;;668    	DTR_OFF;
005c08  2080              MOVS     r0,#0x80
005c0a  49a8              LDR      r1,|L1.24236|
005c0c  3140              ADDS     r1,r1,#0x40
005c0e  6088              STR      r0,[r1,#8]
;;;669    	delay(100);
005c10  2064              MOVS     r0,#0x64
005c12  f7fffffe          BL       delay
;;;670    					strcat(data, "\n");
005c16  a1b2              ADR      r1,|L1.24288|
005c18  48a2              LDR      r0,|L1.24228|
005c1a  f7fffffe          BL       strcat
;;;671    					strcat(data, imei);
005c1e  49b1              LDR      r1,|L1.24292|
005c20  48a0              LDR      r0,|L1.24228|
005c22  f7fffffe          BL       strcat
;;;672    					strcat(data, ",Hey, This is your device restrting\n");
005c26  a1b0              ADR      r1,|L1.24296|
005c28  489e              LDR      r0,|L1.24228|
005c2a  f7fffffe          BL       strcat
;;;673    
;;;674    				memset(at_,0,100);
005c2e  2164              MOVS     r1,#0x64
005c30  48b7              LDR      r0,|L1.24336|
005c32  f7fffffe          BL       __aeabi_memclr
;;;675    				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005c36  489b              LDR      r0,|L1.24228|
005c38  f7fffffe          BL       strlen
005c3c  1c40              ADDS     r0,r0,#1
005c3e  4603              MOV      r3,r0
005c40  4ab4              LDR      r2,|L1.24340|
005c42  4994              LDR      r1,|L1.24212|
005c44  3938              SUBS     r1,r1,#0x38
005c46  9001              STR      r0,[sp,#4]
005c48  48b1              LDR      r0,|L1.24336|
005c4a  f7fffffe          BL       __2sprintf
;;;676    				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005c4e  2005              MOVS     r0,#5
005c50  4b92              LDR      r3,|L1.24220|
005c52  461a              MOV      r2,r3
005c54  3a70              SUBS     r2,r2,#0x70
005c56  a1b0              ADR      r1,|L1.24344|
005c58  9000              STR      r0,[sp,#0]
005c5a  48ad              LDR      r0,|L1.24336|
005c5c  f7fffffe          BL       send_SD
;;;677    				//clear();	
;;;678    				k2=0;									//string array counter for uart 1
005c60  2000              MOVS     r0,#0
005c62  49ae              LDR      r1,|L1.24348|
005c64  6008              STR      r0,[r1,#0]  ; k2
;;;679    				tout=0;	
005c66  498e              LDR      r1,|L1.24224|
005c68  6008              STR      r0,[r1,#0]  ; tout
;;;680    				for(k=0;k<strlen(data);k++)
005c6a  49ad              LDR      r1,|L1.24352|
005c6c  6008              STR      r0,[r1,#0]  ; k
005c6e  e00d              B        |L1.23692|
                  |L1.23664|
;;;681    				{
;;;682    					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005c70  488c              LDR      r0,|L1.24228|
005c72  49ab              LDR      r1,|L1.24352|
005c74  6809              LDR      r1,[r1,#0]  ; k
005c76  5c40              LDRB     r0,[r0,r1]
005c78  4601              MOV      r1,r0
005c7a  9001              STR      r0,[sp,#4]
005c7c  4884              LDR      r0,|L1.24208|
005c7e  f7fffffe          BL       uart_putchar
005c82  48a7              LDR      r0,|L1.24352|
005c84  6800              LDR      r0,[r0,#0]            ;680  ; k
005c86  1c40              ADDS     r0,r0,#1              ;680
005c88  49a5              LDR      r1,|L1.24352|
005c8a  6008              STR      r0,[r1,#0]            ;680  ; k
                  |L1.23692|
005c8c  4885              LDR      r0,|L1.24228|
005c8e  f7fffffe          BL       strlen
005c92  49a3              LDR      r1,|L1.24352|
005c94  6809              LDR      r1,[r1,#0]            ;680  ; k
005c96  4288              CMP      r0,r1                 ;680
005c98  d8ea              BHI      |L1.23664|
;;;683    				}	
;;;684    				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005c9a  210a              MOVS     r1,#0xa
005c9c  487c              LDR      r0,|L1.24208|
005c9e  f7fffffe          BL       uart_putchar
005ca2  210a              MOVS     r1,#0xa
005ca4  487a              LDR      r0,|L1.24208|
005ca6  f7fffffe          BL       uart_putchar
005caa  210a              MOVS     r1,#0xa
005cac  4878              LDR      r0,|L1.24208|
005cae  f7fffffe          BL       uart_putchar
005cb2  210a              MOVS     r1,#0xa
005cb4  4876              LDR      r0,|L1.24208|
005cb6  f7fffffe          BL       uart_putchar
005cba  210a              MOVS     r1,#0xa
005cbc  4874              LDR      r0,|L1.24208|
005cbe  f7fffffe          BL       uart_putchar
005cc2  210a              MOVS     r1,#0xa
005cc4  4872              LDR      r0,|L1.24208|
005cc6  f7fffffe          BL       uart_putchar
005cca  210a              MOVS     r1,#0xa
005ccc  4870              LDR      r0,|L1.24208|
005cce  f7fffffe          BL       uart_putchar
005cd2  210a              MOVS     r1,#0xa
005cd4  486e              LDR      r0,|L1.24208|
005cd6  f7fffffe          BL       uart_putchar
005cda  210a              MOVS     r1,#0xa
005cdc  486c              LDR      r0,|L1.24208|
005cde  f7fffffe          BL       uart_putchar
005ce2  210a              MOVS     r1,#0xa
005ce4  486a              LDR      r0,|L1.24208|
005ce6  f7fffffe          BL       uart_putchar
005cea  210a              MOVS     r1,#0xa
005cec  4868              LDR      r0,|L1.24208|
005cee  f7fffffe          BL       uart_putchar
005cf2  210a              MOVS     r1,#0xa
005cf4  4866              LDR      r0,|L1.24208|
005cf6  f7fffffe          BL       uart_putchar
005cfa  210a              MOVS     r1,#0xa
005cfc  4864              LDR      r0,|L1.24208|
005cfe  f7fffffe          BL       uart_putchar
005d02  e000              B        |L1.23814|
                  |L1.23812|
005d04  e11c              B        |L1.24384|
                  |L1.23814|
005d06  210a              MOVS     r1,#0xa
005d08  4861              LDR      r0,|L1.24208|
005d0a  f7fffffe          BL       uart_putchar
005d0e  210a              MOVS     r1,#0xa
005d10  485f              LDR      r0,|L1.24208|
005d12  f7fffffe          BL       uart_putchar
005d16  210a              MOVS     r1,#0xa
005d18  485d              LDR      r0,|L1.24208|
005d1a  f7fffffe          BL       uart_putchar
005d1e  210a              MOVS     r1,#0xa
005d20  485b              LDR      r0,|L1.24208|
005d22  f7fffffe          BL       uart_putchar
005d26  210a              MOVS     r1,#0xa
005d28  4859              LDR      r0,|L1.24208|
005d2a  f7fffffe          BL       uart_putchar
005d2e  210a              MOVS     r1,#0xa
005d30  4857              LDR      r0,|L1.24208|
005d32  f7fffffe          BL       uart_putchar
005d36  210a              MOVS     r1,#0xa
005d38  4855              LDR      r0,|L1.24208|
005d3a  f7fffffe          BL       uart_putchar
005d3e  210a              MOVS     r1,#0xa
005d40  4853              LDR      r0,|L1.24208|
005d42  f7fffffe          BL       uart_putchar
005d46  210a              MOVS     r1,#0xa
005d48  4851              LDR      r0,|L1.24208|
005d4a  f7fffffe          BL       uart_putchar
005d4e  210a              MOVS     r1,#0xa
005d50  484f              LDR      r0,|L1.24208|
005d52  f7fffffe          BL       uart_putchar
005d56  210a              MOVS     r1,#0xa
005d58  484d              LDR      r0,|L1.24208|
005d5a  f7fffffe          BL       uart_putchar
005d5e  210a              MOVS     r1,#0xa
005d60  484b              LDR      r0,|L1.24208|
005d62  f7fffffe          BL       uart_putchar
005d66  210a              MOVS     r1,#0xa
005d68  4849              LDR      r0,|L1.24208|
005d6a  f7fffffe          BL       uart_putchar
005d6e  210a              MOVS     r1,#0xa
005d70  4847              LDR      r0,|L1.24208|
005d72  f7fffffe          BL       uart_putchar
005d76  210a              MOVS     r1,#0xa
005d78  4845              LDR      r0,|L1.24208|
005d7a  f7fffffe          BL       uart_putchar
005d7e  210a              MOVS     r1,#0xa
005d80  4843              LDR      r0,|L1.24208|
005d82  f7fffffe          BL       uart_putchar
005d86  210a              MOVS     r1,#0xa
005d88  4841              LDR      r0,|L1.24208|
005d8a  f7fffffe          BL       uart_putchar
005d8e  210a              MOVS     r1,#0xa
005d90  483f              LDR      r0,|L1.24208|
005d92  f7fffffe          BL       uart_putchar
005d96  210a              MOVS     r1,#0xa
005d98  483d              LDR      r0,|L1.24208|
005d9a  f7fffffe          BL       uart_putchar
005d9e  210a              MOVS     r1,#0xa
005da0  483b              LDR      r0,|L1.24208|
005da2  f7fffffe          BL       uart_putchar
005da6  210a              MOVS     r1,#0xa
005da8  4839              LDR      r0,|L1.24208|
005daa  f7fffffe          BL       uart_putchar
005dae  210a              MOVS     r1,#0xa
005db0  4837              LDR      r0,|L1.24208|
005db2  f7fffffe          BL       uart_putchar
005db6  210a              MOVS     r1,#0xa
005db8  4835              LDR      r0,|L1.24208|
005dba  f7fffffe          BL       uart_putchar
005dbe  210a              MOVS     r1,#0xa
005dc0  4833              LDR      r0,|L1.24208|
005dc2  f7fffffe          BL       uart_putchar
005dc6  210a              MOVS     r1,#0xa
005dc8  4831              LDR      r0,|L1.24208|
005dca  f7fffffe          BL       uart_putchar
005dce  210a              MOVS     r1,#0xa
005dd0  482f              LDR      r0,|L1.24208|
005dd2  f7fffffe          BL       uart_putchar
005dd6  210a              MOVS     r1,#0xa
005dd8  482d              LDR      r0,|L1.24208|
005dda  f7fffffe          BL       uart_putchar
005dde  210a              MOVS     r1,#0xa
005de0  482b              LDR      r0,|L1.24208|
005de2  f7fffffe          BL       uart_putchar
005de6  210a              MOVS     r1,#0xa
005de8  4829              LDR      r0,|L1.24208|
005dea  f7fffffe          BL       uart_putchar
005dee  210a              MOVS     r1,#0xa
005df0  4827              LDR      r0,|L1.24208|
005df2  f7fffffe          BL       uart_putchar
005df6  210a              MOVS     r1,#0xa
005df8  4825              LDR      r0,|L1.24208|
005dfa  f7fffffe          BL       uart_putchar
005dfe  210a              MOVS     r1,#0xa
005e00  4823              LDR      r0,|L1.24208|
005e02  f7fffffe          BL       uart_putchar
005e06  210a              MOVS     r1,#0xa
005e08  4821              LDR      r0,|L1.24208|
005e0a  f7fffffe          BL       uart_putchar
005e0e  210a              MOVS     r1,#0xa
005e10  481f              LDR      r0,|L1.24208|
005e12  f7fffffe          BL       uart_putchar
005e16  210a              MOVS     r1,#0xa
005e18  481d              LDR      r0,|L1.24208|
005e1a  f7fffffe          BL       uart_putchar
005e1e  210a              MOVS     r1,#0xa
005e20  481b              LDR      r0,|L1.24208|
005e22  f7fffffe          BL       uart_putchar
005e26  210a              MOVS     r1,#0xa
005e28  4819              LDR      r0,|L1.24208|
005e2a  f7fffffe          BL       uart_putchar
005e2e  210a              MOVS     r1,#0xa
005e30  4817              LDR      r0,|L1.24208|
005e32  f7fffffe          BL       uart_putchar
005e36  210a              MOVS     r1,#0xa
005e38  4815              LDR      r0,|L1.24208|
005e3a  f7fffffe          BL       uart_putchar
005e3e  210a              MOVS     r1,#0xa
005e40  4813              LDR      r0,|L1.24208|
005e42  f7fffffe          BL       uart_putchar
005e46  210a              MOVS     r1,#0xa
005e48  4811              LDR      r0,|L1.24208|
005e4a  f7fffffe          BL       uart_putchar
005e4e  210a              MOVS     r1,#0xa
005e50  480f              LDR      r0,|L1.24208|
005e52  f7fffffe          BL       uart_putchar
005e56  210a              MOVS     r1,#0xa
005e58  480d              LDR      r0,|L1.24208|
005e5a  f7fffffe          BL       uart_putchar
005e5e  210a              MOVS     r1,#0xa
005e60  480b              LDR      r0,|L1.24208|
005e62  f7fffffe          BL       uart_putchar
;;;685    				//memset(data,0,1000);
;;;686    				//timer counts to wait for characters in uart 1 									
;;;687    				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005e66  bf00              NOP      
                  |L1.24168|
005e68  490a              LDR      r1,|L1.24212|
005e6a  480b              LDR      r0,|L1.24216|
005e6c  f7fffffe          BL       strstr
005e70  2800              CMP      r0,#0
005e72  d109              BNE      |L1.24200|
005e74  4909              LDR      r1,|L1.24220|
005e76  4808              LDR      r0,|L1.24216|
005e78  f7fffffe          BL       strstr
005e7c  2800              CMP      r0,#0
005e7e  d103              BNE      |L1.24200|
005e80  4807              LDR      r0,|L1.24224|
005e82  6800              LDR      r0,[r0,#0]  ; tout
005e84  2805              CMP      r0,#5
005e86  ddef              BLE      |L1.24168|
                  |L1.24200|
;;;688    				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;689    				}
;;;690    				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;691    				//memset(data,0,strlen(data));
;;;692    				//clear();
;;;693    	RESET_OFF;
005e88  2020              MOVS     r0,#0x20
005e8a  4908              LDR      r1,|L1.24236|
005e8c  6088              STR      r0,[r1,#8]
;;;694    	RESET_OFF;
005e8e  e049              B        |L1.24356|
                  |L1.24208|
                          DCD      0x4006b000
                  |L1.24212|
                          DCD      ||.text||+0xd88
                  |L1.24216|
                          DCD      uart_string_gsm
                  |L1.24220|
                          DCD      ||.text||+0x910
                  |L1.24224|
                          DCD      tout
                  |L1.24228|
                          DCD      data
                  |L1.24232|
                          DCD      logged
                  |L1.24236|
                          DCD      0x400ff080
                  |L1.24240|
                          DCD      tmeout
                  |L1.24244|
005eb4  4f4b00            DCB      "OK",0
005eb7  00                DCB      0
                  |L1.24248|
005eb8  0a0a4154          DCB      "\n\nAT+CBC\r\n",0
005ebc  2b434243
005ec0  0d0a00  
005ec3  00                DCB      0
                  |L1.24260|
                          DCD      num2
                  |L1.24264|
                          DCD      voltagecbc
                  |L1.24268|
                          DCD      sleep_flag
                  |L1.24272|
                          DCD      test2
                  |L1.24276|
                          DCD      breach
                  |L1.24280|
                          DCD      rtcticks2
                  |L1.24284|
                          DCD      0x000005dc
                  |L1.24288|
005ee0  0a00              DCB      "\n",0
005ee2  00                DCB      0
005ee3  00                DCB      0
                  |L1.24292|
                          DCD      imei
                  |L1.24296|
005ee8  2c486579          DCB      ",Hey, This is your device restrting\n",0
005eec  2c205468
005ef0  69732069
005ef4  7320796f
005ef8  75722064
005efc  65766963
005f00  65207265
005f04  73747274
005f08  696e670a
005f0c  00      
005f0d  00                DCB      0
005f0e  00                DCB      0
005f0f  00                DCB      0
                  |L1.24336|
                          DCD      at_
                  |L1.24340|
                          DCD      drive
                  |L1.24344|
005f18  3e00              DCB      ">",0
005f1a  00                DCB      0
005f1b  00                DCB      0
                  |L1.24348|
                          DCD      ||k2||
                  |L1.24352|
                          DCD      k
                  |L1.24356|
005f24  6088              STR      r0,[r1,#8]
;;;695    	delay(100);	
005f26  2064              MOVS     r0,#0x64
005f28  f7fffffe          BL       delay
;;;696    	RESET_ON;
005f2c  2020              MOVS     r0,#0x20
005f2e  49fe              LDR      r1,|L1.25384|
005f30  6048              STR      r0,[r1,#4]
;;;697    	RESET_ON;	
005f32  6048              STR      r0,[r1,#4]
;;;698    	delay(100);
005f34  2064              MOVS     r0,#0x64
005f36  f7fffffe          BL       delay
;;;699    	rtcticks2 =0;
005f3a  2000              MOVS     r0,#0
005f3c  49fb              LDR      r1,|L1.25388|
005f3e  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.24384|
;;;700    
;;;701    	}//3600	
;;;702    sprintf(num2,"<%d><%ld>",aliveping,rtcticks2);
005f40  48fa              LDR      r0,|L1.25388|
005f42  6803              LDR      r3,[r0,#0]  ; rtcticks2
005f44  48fa              LDR      r0,|L1.25392|
005f46  a1fb              ADR      r1,|L1.25396|
005f48  6802              LDR      r2,[r0,#0]  ; aliveping
005f4a  48fd              LDR      r0,|L1.25408|
005f4c  f7fffffe          BL       __2sprintf
;;;703    //send_modem(num2);	
;;;704    	
;;;705    	
;;;706    if	((sleep_flag != 1  || (aliveping > 60) ) )			
005f50  48fc              LDR      r0,|L1.25412|
005f52  6800              LDR      r0,[r0,#0]  ; sleep_flag
005f54  2801              CMP      r0,#1
005f56  d104              BNE      |L1.24418|
005f58  48f5              LDR      r0,|L1.25392|
005f5a  6800              LDR      r0,[r0,#0]  ; aliveping
005f5c  283c              CMP      r0,#0x3c
005f5e  dc00              BGT      |L1.24418|
005f60  e5f1              B        |L1.23366|
                  |L1.24418|
;;;707    {
;;;708    	DTR_OFF;
005f62  2080              MOVS     r0,#0x80
005f64  49f0              LDR      r1,|L1.25384|
005f66  3140              ADDS     r1,r1,#0x40
005f68  6088              STR      r0,[r1,#8]
;;;709    	sleep_flag=0;
005f6a  2000              MOVS     r0,#0
005f6c  49f5              LDR      r1,|L1.25412|
005f6e  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;710    	send_GSM("\r\nAT+CIPCLOSE\r\n", "CLOSE OK", "ERROR" , "ERROR:",tmeout);		
005f70  48f5              LDR      r0,|L1.25416|
005f72  6800              LDR      r0,[r0,#0]  ; tmeout
005f74  4bf5              LDR      r3,|L1.25420|
005f76  461a              MOV      r2,r3
005f78  3278              ADDS     r2,r2,#0x78
005f7a  a1f5              ADR      r1,|L1.25424|
005f7c  9000              STR      r0,[sp,#0]
005f7e  a0f7              ADR      r0,|L1.25436|
005f80  f7fffffe          BL       send_GSM
;;;711    	memset(at_,0,100);
005f84  2164              MOVS     r1,#0x64
005f86  48f9              LDR      r0,|L1.25452|
005f88  f7fffffe          BL       __aeabi_memclr
;;;712    	memset(data,0,strlen(data));
005f8c  48f8              LDR      r0,|L1.25456|
005f8e  f7fffffe          BL       strlen
005f92  4601              MOV      r1,r0
005f94  9001              STR      r0,[sp,#4]
005f96  48f6              LDR      r0,|L1.25456|
005f98  f7fffffe          BL       __aeabi_memclr
;;;713    	GPS_COLLECT();	
005f9c  f7fffffe          BL       GPS_COLLECT
;;;714    	
;;;715    	if((aliveping>60))	
005fa0  48e3              LDR      r0,|L1.25392|
005fa2  6800              LDR      r0,[r0,#0]  ; aliveping
005fa4  283c              CMP      r0,#0x3c
005fa6  dd1a              BLE      |L1.24542|
;;;716    	{
;;;717    		aliveping=0;
005fa8  2000              MOVS     r0,#0
005faa  49e1              LDR      r1,|L1.25392|
005fac  6008              STR      r0,[r1,#0]  ; aliveping
;;;718    		memset(data,0,strlen(data));	
005fae  48f0              LDR      r0,|L1.25456|
005fb0  f7fffffe          BL       strlen
005fb4  4601              MOV      r1,r0
005fb6  9001              STR      r0,[sp,#4]
005fb8  48ed              LDR      r0,|L1.25456|
005fba  f7fffffe          BL       __aeabi_memclr
;;;719    		strcat(data,imei);strcat(data,",ALIVE,");strcat(data,num2);strcat(data,"\n\n\n"); 
005fbe  49ed              LDR      r1,|L1.25460|
005fc0  48eb              LDR      r0,|L1.25456|
005fc2  f7fffffe          BL       strcat
005fc6  a1ec              ADR      r1,|L1.25464|
005fc8  48e9              LDR      r0,|L1.25456|
005fca  f7fffffe          BL       strcat
005fce  49dc              LDR      r1,|L1.25408|
005fd0  48e7              LDR      r0,|L1.25456|
005fd2  f7fffffe          BL       strcat
005fd6  a1ea              ADR      r1,|L1.25472|
005fd8  48e5              LDR      r0,|L1.25456|
005fda  f7fffffe          BL       strcat
                  |L1.24542|
;;;720    	}	
;;;721    
;;;722    	
;;;723    		sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005fde  4be9              LDR      r3,|L1.25476|
005fe0  4ae9              LDR      r2,|L1.25480|
005fe2  49ea              LDR      r1,|L1.25484|
005fe4  48e1              LDR      r0,|L1.25452|
005fe6  f7fffffe          BL       __2sprintf
;;;724    		send_GSM( at_ , "CONNECT", "ERROR" , "ERROR\r\n",tmeout);	
005fea  48d7              LDR      r0,|L1.25416|
005fec  6800              LDR      r0,[r0,#0]  ; tmeout
005fee  4bd7              LDR      r3,|L1.25420|
005ff0  3308              ADDS     r3,r3,#8
005ff2  461a              MOV      r2,r3
005ff4  3270              ADDS     r2,r2,#0x70
005ff6  49e5              LDR      r1,|L1.25484|
005ff8  3120              ADDS     r1,r1,#0x20
005ffa  9000              STR      r0,[sp,#0]
005ffc  48db              LDR      r0,|L1.25452|
005ffe  f7fffffe          BL       send_GSM
;;;725    		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);	
006002  48d1              LDR      r0,|L1.25416|
006004  6800              LDR      r0,[r0,#0]  ; tmeout
006006  4be1              LDR      r3,|L1.25484|
006008  3328              ADDS     r3,r3,#0x28
00600a  4ad0              LDR      r2,|L1.25420|
00600c  3278              ADDS     r2,r2,#0x78
00600e  a1cb              ADR      r1,|L1.25404|
006010  9000              STR      r0,[sp,#0]
006012  4618              MOV      r0,r3
006014  3014              ADDS     r0,r0,#0x14
006016  f7fffffe          BL       send_GSM
;;;726    		memset(stcond1,0,strlen(stcond1));
00601a  48dd              LDR      r0,|L1.25488|
00601c  6800              LDR      r0,[r0,#0]  ; stcond1
00601e  f7fffffe          BL       strlen
006022  4601              MOV      r1,r0
006024  9001              STR      r0,[sp,#4]
006026  48da              LDR      r0,|L1.25488|
006028  6800              LDR      r0,[r0,#0]  ; stcond1
00602a  f7fffffe          BL       __aeabi_memclr
;;;727    		memset(stcond2,0,strlen(stcond2));	
00602e  48d9              LDR      r0,|L1.25492|
006030  6800              LDR      r0,[r0,#0]  ; stcond2
006032  f7fffffe          BL       strlen
006036  4601              MOV      r1,r0
006038  9001              STR      r0,[sp,#4]
00603a  48d6              LDR      r0,|L1.25492|
00603c  6800              LDR      r0,[r0,#0]  ; stcond2
00603e  f7fffffe          BL       __aeabi_memclr
;;;728    		memset(stcond3,0,strlen(stcond3));	
006042  48d5              LDR      r0,|L1.25496|
006044  6800              LDR      r0,[r0,#0]  ; stcond3
006046  f7fffffe          BL       strlen
00604a  4601              MOV      r1,r0
00604c  9001              STR      r0,[sp,#4]
00604e  48d2              LDR      r0,|L1.25496|
006050  6800              LDR      r0,[r0,#0]  ; stcond3
006052  f7fffffe          BL       __aeabi_memclr
;;;729    		memset(stcond4,0,strlen(stcond4));	
006056  48d1              LDR      r0,|L1.25500|
006058  6800              LDR      r0,[r0,#0]  ; stcond4
00605a  f7fffffe          BL       strlen
00605e  4601              MOV      r1,r0
006060  9001              STR      r0,[sp,#4]
006062  48ce              LDR      r0,|L1.25500|
006064  6800              LDR      r0,[r0,#0]  ; stcond4
006066  f7fffffe          BL       __aeabi_memclr
;;;730    		memset(con1d,0,strlen(con1d));	
00606a  48cd              LDR      r0,|L1.25504|
00606c  6800              LDR      r0,[r0,#0]  ; con1d
00606e  f7fffffe          BL       strlen
006072  4601              MOV      r1,r0
006074  9001              STR      r0,[sp,#4]
006076  48ca              LDR      r0,|L1.25504|
006078  6800              LDR      r0,[r0,#0]  ; con1d
00607a  f7fffffe          BL       __aeabi_memclr
;;;731    		cond=0;
00607e  2000              MOVS     r0,#0
006080  49c8              LDR      r1,|L1.25508|
006082  7008              STRB     r0,[r1,#0]
;;;732    								cond=mystrstr(uart_string_gsm,'>');
006084  213e              MOVS     r1,#0x3e
006086  48c8              LDR      r0,|L1.25512|
006088  f7fffffe          BL       mystrstr
00608c  49c5              LDR      r1,|L1.25508|
00608e  7008              STRB     r0,[r1,#0]
;;;733    	
;;;734    								if(cond)	
006090  4608              MOV      r0,r1
006092  7800              LDRB     r0,[r0,#0]  ; cond
006094  2800              CMP      r0,#0
006096  d07d              BEQ      |L1.24980|
;;;735    								{		
;;;736    									clear();
006098  f7fffffe          BL       clear
;;;737    									memset(uart_string_gsm,0,5000);
00609c  49c3              LDR      r1,|L1.25516|
00609e  48c2              LDR      r0,|L1.25512|
0060a0  f7fffffe          BL       __aeabi_memclr
;;;738    									strcat(data,"\n\n");
0060a4  a1c2              ADR      r1,|L1.25520|
0060a6  48b2              LDR      r0,|L1.25456|
0060a8  f7fffffe          BL       strcat
;;;739    									len=strlen(data);
0060ac  48b0              LDR      r0,|L1.25456|
0060ae  f7fffffe          BL       strlen
0060b2  49c0              LDR      r1,|L1.25524|
0060b4  6008              STR      r0,[r1,#0]  ; len
;;;740    									tout=0;
0060b6  2000              MOVS     r0,#0
0060b8  49bf              LDR      r1,|L1.25528|
0060ba  6008              STR      r0,[r1,#0]  ; tout
;;;741    									k2=0;
0060bc  49bf              LDR      r1,|L1.25532|
0060be  6008              STR      r0,[r1,#0]  ; k2
;;;742    									for(k=0;k<len;k++)
0060c0  49bf              LDR      r1,|L1.25536|
0060c2  6008              STR      r0,[r1,#0]  ; k
0060c4  e00d              B        |L1.24802|
                  |L1.24774|
;;;743    									{
;;;744    										uart_putchar(UART1_BASE_PTR, data[k]);
0060c6  48aa              LDR      r0,|L1.25456|
0060c8  49bd              LDR      r1,|L1.25536|
0060ca  6809              LDR      r1,[r1,#0]  ; k
0060cc  5c40              LDRB     r0,[r0,r1]
0060ce  4601              MOV      r1,r0
0060d0  9001              STR      r0,[sp,#4]
0060d2  48bc              LDR      r0,|L1.25540|
0060d4  f7fffffe          BL       uart_putchar
0060d8  48b9              LDR      r0,|L1.25536|
0060da  6800              LDR      r0,[r0,#0]            ;742  ; k
0060dc  1c40              ADDS     r0,r0,#1              ;742
0060de  49b8              LDR      r1,|L1.25536|
0060e0  6008              STR      r0,[r1,#0]            ;742  ; k
                  |L1.24802|
0060e2  48b7              LDR      r0,|L1.25536|
0060e4  6800              LDR      r0,[r0,#0]            ;742  ; k
0060e6  49b3              LDR      r1,|L1.25524|
0060e8  6809              LDR      r1,[r1,#0]            ;742  ; len
0060ea  4288              CMP      r0,r1                 ;742
0060ec  dbeb              BLT      |L1.24774|
;;;745    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0060ee  210a              MOVS     r1,#0xa
0060f0  48b4              LDR      r0,|L1.25540|
0060f2  f7fffffe          BL       uart_putchar
0060f6  211a              MOVS     r1,#0x1a
0060f8  48b2              LDR      r0,|L1.25540|
0060fa  f7fffffe          BL       uart_putchar
0060fe  211a              MOVS     r1,#0x1a
006100  48b0              LDR      r0,|L1.25540|
006102  f7fffffe          BL       uart_putchar
006106  211a              MOVS     r1,#0x1a
006108  48ae              LDR      r0,|L1.25540|
00610a  f7fffffe          BL       uart_putchar
00610e  211a              MOVS     r1,#0x1a
006110  48ac              LDR      r0,|L1.25540|
006112  f7fffffe          BL       uart_putchar
006116  211a              MOVS     r1,#0x1a
006118  48aa              LDR      r0,|L1.25540|
00611a  f7fffffe          BL       uart_putchar
;;;746    									do
00611e  bf00              NOP      
                  |L1.24864|
;;;747    																{stcond1=strstr(uart_string_gsm,"SEND OK");
006120  498a              LDR      r1,|L1.25420|
006122  3170              ADDS     r1,r1,#0x70
006124  48a0              LDR      r0,|L1.25512|
006126  f7fffffe          BL       strstr
00612a  4999              LDR      r1,|L1.25488|
00612c  6008              STR      r0,[r1,#0]  ; stcond1
;;;748    																	stcond2=strstr(uart_string_gsm, "ERROR");
00612e  4987              LDR      r1,|L1.25420|
006130  3178              ADDS     r1,r1,#0x78
006132  489d              LDR      r0,|L1.25512|
006134  f7fffffe          BL       strstr
006138  4996              LDR      r1,|L1.25492|
00613a  6008              STR      r0,[r1,#0]  ; stcond2
;;;749    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00613c  4993              LDR      r1,|L1.25484|
00613e  3130              ADDS     r1,r1,#0x30
006140  4899              LDR      r0,|L1.25512|
006142  f7fffffe          BL       strstr
006146  4994              LDR      r1,|L1.25496|
006148  6008              STR      r0,[r1,#0]  ; stcond3
;;;750    																			stcond4=strstr(uart_string_gsm, "DEACT");	
00614a  4980              LDR      r1,|L1.25420|
00614c  3190              ADDS     r1,r1,#0x90
00614e  4896              LDR      r0,|L1.25512|
006150  f7fffffe          BL       strstr
006154  4991              LDR      r1,|L1.25500|
006156  6008              STR      r0,[r1,#0]  ; stcond4
;;;751    																	
;;;752    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 7) ) ); //|| (timeout < 1)   
006158  488e              LDR      r0,|L1.25492|
00615a  6800              LDR      r0,[r0,#0]  ; stcond2
00615c  2800              CMP      r0,#0
00615e  d10f              BNE      |L1.24960|
006160  488d              LDR      r0,|L1.25496|
006162  6800              LDR      r0,[r0,#0]  ; stcond3
006164  2800              CMP      r0,#0
006166  d10b              BNE      |L1.24960|
006168  4608              MOV      r0,r1
00616a  6800              LDR      r0,[r0,#0]  ; stcond4
00616c  2800              CMP      r0,#0
00616e  d107              BNE      |L1.24960|
006170  4887              LDR      r0,|L1.25488|
006172  6800              LDR      r0,[r0,#0]  ; stcond1
006174  2800              CMP      r0,#0
006176  d103              BNE      |L1.24960|
006178  488f              LDR      r0,|L1.25528|
00617a  6800              LDR      r0,[r0,#0]  ; tout
00617c  2807              CMP      r0,#7
00617e  ddcf              BLE      |L1.24864|
                  |L1.24960|
;;;753    																//delay(10);clear();
;;;754    														uart_putchar(UART1_BASE_PTR,0x1A);
006180  211a              MOVS     r1,#0x1a
006182  4890              LDR      r0,|L1.25540|
006184  f7fffffe          BL       uart_putchar
;;;755    												//delay(10);
;;;756    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
006188  211a              MOVS     r1,#0x1a
00618a  488e              LDR      r0,|L1.25540|
00618c  f7fffffe          BL       uart_putchar
006190  211a              MOVS     r1,#0x1a
006192  e000              B        |L1.24982|
                  |L1.24980|
006194  e01b              B        |L1.25038|
                  |L1.24982|
006196  488b              LDR      r0,|L1.25540|
006198  f7fffffe          BL       uart_putchar
00619c  211a              MOVS     r1,#0x1a
00619e  4889              LDR      r0,|L1.25540|
0061a0  f7fffffe          BL       uart_putchar
;;;757    								
;;;758    									if(flagch==1){int_erval=temp;flagch=0;}
0061a4  4888              LDR      r0,|L1.25544|
0061a6  6800              LDR      r0,[r0,#0]  ; flagch
0061a8  2801              CMP      r0,#1
0061aa  d106              BNE      |L1.25018|
0061ac  4887              LDR      r0,|L1.25548|
0061ae  6800              LDR      r0,[r0,#0]  ; temp
0061b0  4987              LDR      r1,|L1.25552|
0061b2  6008              STR      r0,[r1,#0]  ; int_erval
0061b4  2000              MOVS     r0,#0
0061b6  4984              LDR      r1,|L1.25544|
0061b8  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.25018|
;;;759    									delay(20);															
0061ba  2014              MOVS     r0,#0x14
0061bc  f7fffffe          BL       delay
;;;760    									stcond1=strstr(uart_string_gsm,"SEND OK"); 
0061c0  4962              LDR      r1,|L1.25420|
0061c2  3170              ADDS     r1,r1,#0x70
0061c4  4878              LDR      r0,|L1.25512|
0061c6  f7fffffe          BL       strstr
0061ca  4971              LDR      r1,|L1.25488|
0061cc  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.25038|
;;;761    								}else{}
;;;762    stcond1=strstr(uart_string_gsm,"SEND OK"); 
0061ce  495f              LDR      r1,|L1.25420|
0061d0  3170              ADDS     r1,r1,#0x70
0061d2  4875              LDR      r0,|L1.25512|
0061d4  f7fffffe          BL       strstr
0061d8  496d              LDR      r1,|L1.25488|
0061da  6008              STR      r0,[r1,#0]  ; stcond1
;;;763    //checks for send ok
;;;764    if(!(stcond1) == 1 ) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
0061dc  4608              MOV      r0,r1
0061de  6800              LDR      r0,[r0,#0]  ; stcond1
0061e0  2800              CMP      r0,#0
0061e2  d101              BNE      |L1.25064|
0061e4  2001              MOVS     r0,#1
0061e6  e000              B        |L1.25066|
                  |L1.25064|
0061e8  2000              MOVS     r0,#0
                  |L1.25066|
0061ea  2801              CMP      r0,#1
0061ec  d17e              BNE      |L1.25324|
;;;765    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0061ee  211a              MOVS     r1,#0x1a
0061f0  4874              LDR      r0,|L1.25540|
0061f2  f7fffffe          BL       uart_putchar
0061f6  f7fffffe          BL       clear
0061fa  200a              MOVS     r0,#0xa
0061fc  f7fffffe          BL       delay
;;;766    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
006200  211a              MOVS     r1,#0x1a
006202  4870              LDR      r0,|L1.25540|
006204  f7fffffe          BL       uart_putchar
006208  f7fffffe          BL       clear
00620c  200a              MOVS     r0,#0xa
00620e  f7fffffe          BL       delay
;;;767    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
006212  211a              MOVS     r1,#0x1a
006214  486b              LDR      r0,|L1.25540|
006216  f7fffffe          BL       uart_putchar
00621a  f7fffffe          BL       clear
00621e  200a              MOVS     r0,#0xa
006220  f7fffffe          BL       delay
;;;768    									remove_all_chars(data, '\n', '\n');
006224  220a              MOVS     r2,#0xa
006226  4611              MOV      r1,r2
006228  4851              LDR      r0,|L1.25456|
00622a  f7fffffe          BL       remove_all_chars
;;;769    									strcat(data,"CH\n");	
00622e  4969              LDR      r1,|L1.25556|
006230  484f              LDR      r0,|L1.25456|
006232  f7fffffe          BL       strcat
;;;770    									delay(100);
006236  2064              MOVS     r0,#0x64
006238  f7fffffe          BL       delay
;;;771    									clear();//memset(uart_string_gsm,0,5000);
00623c  f7fffffe          BL       clear
;;;772    									memset(at_,0,100);
006240  2164              MOVS     r1,#0x64
006242  484a              LDR      r0,|L1.25452|
006244  f7fffffe          BL       __aeabi_memclr
;;;773    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
006248  4849              LDR      r0,|L1.25456|
00624a  f7fffffe          BL       strlen
00624e  1c40              ADDS     r0,r0,#1
006250  4603              MOV      r3,r0
006252  4a61              LDR      r2,|L1.25560|
006254  495f              LDR      r1,|L1.25556|
006256  310c              ADDS     r1,r1,#0xc
006258  9001              STR      r0,[sp,#4]
00625a  4844              LDR      r0,|L1.25452|
00625c  f7fffffe          BL       __2sprintf
;;;774    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
006260  2005              MOVS     r0,#5
006262  4b3a              LDR      r3,|L1.25420|
006264  3378              ADDS     r3,r3,#0x78
006266  461a              MOV      r2,r3
006268  3a70              SUBS     r2,r2,#0x70
00626a  a134              ADR      r1,|L1.25404|
00626c  9000              STR      r0,[sp,#0]
00626e  483f              LDR      r0,|L1.25452|
006270  f7fffffe          BL       send_SD
;;;775    									clear();	
006274  f7fffffe          BL       clear
;;;776    									k2=0;									//string array counter for uart 1
006278  2000              MOVS     r0,#0
00627a  4950              LDR      r1,|L1.25532|
00627c  6008              STR      r0,[r1,#0]  ; k2
;;;777    									tout=0;	
00627e  494e              LDR      r1,|L1.25528|
006280  6008              STR      r0,[r1,#0]  ; tout
;;;778    									for(k=0;k<strlen(data);k++)
006282  494f              LDR      r1,|L1.25536|
006284  6008              STR      r0,[r1,#0]  ; k
006286  e00d              B        |L1.25252|
                  |L1.25224|
;;;779    									{
;;;780    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
006288  4839              LDR      r0,|L1.25456|
00628a  494d              LDR      r1,|L1.25536|
00628c  6809              LDR      r1,[r1,#0]  ; k
00628e  5c40              LDRB     r0,[r0,r1]
006290  4601              MOV      r1,r0
006292  9001              STR      r0,[sp,#4]
006294  484b              LDR      r0,|L1.25540|
006296  f7fffffe          BL       uart_putchar
00629a  4849              LDR      r0,|L1.25536|
00629c  6800              LDR      r0,[r0,#0]            ;778  ; k
00629e  1c40              ADDS     r0,r0,#1              ;778
0062a0  4947              LDR      r1,|L1.25536|
0062a2  6008              STR      r0,[r1,#0]            ;778  ; k
                  |L1.25252|
0062a4  4832              LDR      r0,|L1.25456|
0062a6  f7fffffe          BL       strlen
0062aa  4945              LDR      r1,|L1.25536|
0062ac  6809              LDR      r1,[r1,#0]            ;778  ; k
0062ae  4288              CMP      r0,r1                 ;778
0062b0  d8ea              BHI      |L1.25224|
;;;781    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
0062b2  210a              MOVS     r1,#0xa
0062b4  4843              LDR      r0,|L1.25540|
0062b6  f7fffffe          BL       uart_putchar
0062ba  210a              MOVS     r1,#0xa
0062bc  4841              LDR      r0,|L1.25540|
0062be  f7fffffe          BL       uart_putchar
0062c2  210a              MOVS     r1,#0xa
0062c4  483f              LDR      r0,|L1.25540|
0062c6  f7fffffe          BL       uart_putchar
;;;782    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');
0062ca  210a              MOVS     r1,#0xa
0062cc  483d              LDR      r0,|L1.25540|
0062ce  f7fffffe          BL       uart_putchar
0062d2  210a              MOVS     r1,#0xa
0062d4  483b              LDR      r0,|L1.25540|
0062d6  f7fffffe          BL       uart_putchar
0062da  210a              MOVS     r1,#0xa
0062dc  4839              LDR      r0,|L1.25540|
0062de  f7fffffe          BL       uart_putchar
;;;783    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0062e2  210a              MOVS     r1,#0xa
0062e4  4837              LDR      r0,|L1.25540|
0062e6  f7fffffe          BL       uart_putchar
0062ea  e000              B        |L1.25326|
                  |L1.25324|
0062ec  e3fe              B        |L1.27372|
                  |L1.25326|
0062ee  210a              MOVS     r1,#0xa
0062f0  4834              LDR      r0,|L1.25540|
0062f2  f7fffffe          BL       uart_putchar
0062f6  210a              MOVS     r1,#0xa
0062f8  4832              LDR      r0,|L1.25540|
0062fa  f7fffffe          BL       uart_putchar
;;;784    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0062fe  bf00              NOP      
                  |L1.25344|
006300  4934              LDR      r1,|L1.25556|
006302  3144              ADDS     r1,r1,#0x44
006304  4828              LDR      r0,|L1.25512|
006306  f7fffffe          BL       strstr
00630a  2800              CMP      r0,#0
00630c  d167              BNE      |L1.25566|
00630e  490f              LDR      r1,|L1.25420|
006310  3178              ADDS     r1,r1,#0x78
006312  4825              LDR      r0,|L1.25512|
006314  f7fffffe          BL       strstr
006318  2800              CMP      r0,#0
00631a  d160              BNE      |L1.25566|
00631c  4826              LDR      r0,|L1.25528|
00631e  6800              LDR      r0,[r0,#0]  ; tout
006320  2805              CMP      r0,#5
006322  e05b              B        |L1.25564|
                  |L1.25380|
006324  e3fe              B        |L1.27428|
006326  e05a              B        |L1.25566|
                  |L1.25384|
                          DCD      0x400ff080
                  |L1.25388|
                          DCD      rtcticks2
                  |L1.25392|
                          DCD      aliveping
                  |L1.25396|
006334  3c25643e          DCB      "<%d><%ld"
006338  3c256c64
                  |L1.25404|
00633c  3e00              DCB      ">",0
00633e  00                DCB      0
00633f  00                DCB      0
                  |L1.25408|
                          DCD      num2
                  |L1.25412|
                          DCD      sleep_flag
                  |L1.25416|
                          DCD      tmeout
                  |L1.25420|
                          DCD      ||.text||+0x898
                  |L1.25424|
006350  434c4f53          DCB      "CLOSE OK",0
006354  45204f4b
006358  00      
006359  00                DCB      0
00635a  00                DCB      0
00635b  00                DCB      0
                  |L1.25436|
00635c  0d0a4154          DCB      "\r\nAT+CIPCLOSE\r\n",0
006360  2b434950
006364  434c4f53
006368  450d0a00
                  |L1.25452|
                          DCD      at_
                  |L1.25456|
                          DCD      data
                  |L1.25460|
                          DCD      imei
                  |L1.25464|
006378  2c414c49          DCB      ",ALIVE,",0
00637c  56452c00
                  |L1.25472|
006380  0a0a0a00          DCB      "\n\n\n",0
                  |L1.25476|
                          DCD      port
                  |L1.25480|
                          DCD      ||ip||
                  |L1.25484|
                          DCD      ||.text||+0x125c
                  |L1.25488|
                          DCD      stcond1
                  |L1.25492|
                          DCD      stcond2
                  |L1.25496|
                          DCD      stcond3
                  |L1.25500|
                          DCD      stcond4
                  |L1.25504|
                          DCD      con1d
                  |L1.25508|
                          DCD      cond
                  |L1.25512|
                          DCD      uart_string_gsm
                  |L1.25516|
                          DCD      0x00001388
                  |L1.25520|
0063b0  0a0a00            DCB      "\n\n",0
0063b3  00                DCB      0
                  |L1.25524|
                          DCD      len
                  |L1.25528|
                          DCD      tout
                  |L1.25532|
                          DCD      ||k2||
                  |L1.25536|
                          DCD      k
                  |L1.25540|
                          DCD      0x4006b000
                  |L1.25544|
                          DCD      flagch
                  |L1.25548|
                          DCD      temp
                  |L1.25552|
                          DCD      int_erval
                  |L1.25556|
                          DCD      ||.text||+0xd44
                  |L1.25560|
                          DCD      drive
                  |L1.25564|
0063dc  dd90              BLE      |L1.25344|
                  |L1.25566|
;;;785    									{}
;;;786    									clear();
0063de  f7fffffe          BL       clear
;;;787    									memset(data,0,strlen(data));
0063e2  48fa              LDR      r0,|L1.26572|
0063e4  f7fffffe          BL       strlen
0063e8  4601              MOV      r1,r0
0063ea  9001              STR      r0,[sp,#4]
0063ec  48f7              LDR      r0,|L1.26572|
0063ee  f7fffffe          BL       __aeabi_memclr
;;;788    									clear();
0063f2  f7fffffe          BL       clear
;;;789    									//	log_it();		                         //logging
;;;790    									memset(data,0,strlen(data));	
0063f6  48f5              LDR      r0,|L1.26572|
0063f8  f7fffffe          BL       strlen
0063fc  4601              MOV      r1,r0
0063fe  9001              STR      r0,[sp,#4]
006400  48f2              LDR      r0,|L1.26572|
006402  f7fffffe          BL       __aeabi_memclr
;;;791    									if(flagch!=1){
006406  48f2              LDR      r0,|L1.26576|
006408  6800              LDR      r0,[r0,#0]  ; flagch
00640a  2801              CMP      r0,#1
00640c  d009              BEQ      |L1.25634|
;;;792    										temp=int_erval;				
00640e  48f1              LDR      r0,|L1.26580|
006410  6800              LDR      r0,[r0,#0]  ; int_erval
006412  49f1              LDR      r1,|L1.26584|
006414  6008              STR      r0,[r1,#0]  ; temp
;;;793    										int_erval=4;
006416  2004              MOVS     r0,#4
006418  49ee              LDR      r1,|L1.26580|
00641a  6008              STR      r0,[r1,#0]  ; int_erval
;;;794    										flagch=1;
00641c  2001              MOVS     r0,#1
00641e  49ec              LDR      r1,|L1.26576|
006420  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.25634|
;;;795    									}
;;;796    									GPS_COLLECT();
006422  f7fffffe          BL       GPS_COLLECT
;;;797    									strcat(data,"CH\n");	
006426  49ed              LDR      r1,|L1.26588|
006428  48e8              LDR      r0,|L1.26572|
00642a  f7fffffe          BL       strcat
;;;798    //**************************************tcp_initialization();//reinitialization*********************************/
;;;799    
;;;800    		
;;;801    	msg_sim800(); 
00642e  f7fffffe          BL       msg_sim800
;;;802    	send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
006432  2005              MOVS     r0,#5
006434  4bea              LDR      r3,|L1.26592|
006436  461a              MOV      r2,r3
006438  3a70              SUBS     r2,r2,#0x70
00643a  a1ea              ADR      r1,|L1.26596|
00643c  9000              STR      r0,[sp,#0]
00643e  48e7              LDR      r0,|L1.26588|
006440  3060              ADDS     r0,r0,#0x60
006442  f7fffffe          BL       send_GSM
;;;803    	delay(100);
006446  2064              MOVS     r0,#0x64
006448  f7fffffe          BL       delay
;;;804    	send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00644c  2004              MOVS     r0,#4
00644e  4be4              LDR      r3,|L1.26592|
006450  4ae2              LDR      r2,|L1.26588|
006452  3270              ADDS     r2,r2,#0x70
006454  a1e3              ADR      r1,|L1.26596|
006456  9000              STR      r0,[sp,#0]
006458  4610              MOV      r0,r2
00645a  3014              ADDS     r0,r0,#0x14
00645c  f7fffffe          BL       send_GSM
;;;805    	GPS_COLLECT2();
006460  f7fffffe          BL       GPS_COLLECT2
;;;806    	strcat(data,"CH\n");		
006464  49dd              LDR      r1,|L1.26588|
006466  48d9              LDR      r0,|L1.26572|
006468  f7fffffe          BL       strcat
;;;807    	GPS_COLLECT2();
00646c  f7fffffe          BL       GPS_COLLECT2
;;;808    	strcat(data,"CH\n");	
006470  49da              LDR      r1,|L1.26588|
006472  48d6              LDR      r0,|L1.26572|
006474  f7fffffe          BL       strcat
;;;809    	GPS_COLLECT2();
006478  f7fffffe          BL       GPS_COLLECT2
;;;810    	strcat(data,"CH\n");
00647c  49d7              LDR      r1,|L1.26588|
00647e  48d3              LDR      r0,|L1.26572|
006480  f7fffffe          BL       strcat
;;;811    	cond201=(strstr(uart_string_gsm, "OK"));
006484  a1d7              ADR      r1,|L1.26596|
006486  48d8              LDR      r0,|L1.26600|
006488  f7fffffe          BL       strstr
00648c  49d7              LDR      r1,|L1.26604|
00648e  6008              STR      r0,[r1,#0]  ; cond201
;;;812    	cond200=(strstr(uart_string_gsm, "ERROR"));
006490  49d3              LDR      r1,|L1.26592|
006492  48d5              LDR      r0,|L1.26600|
006494  f7fffffe          BL       strstr
006498  49d5              LDR      r1,|L1.26608|
00649a  6008              STR      r0,[r1,#0]  ; cond200
;;;813    	if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00649c  48d3              LDR      r0,|L1.26604|
00649e  6800              LDR      r0,[r0,#0]  ; cond201
0064a0  2800              CMP      r0,#0
0064a2  d101              BNE      |L1.25768|
0064a4  2001              MOVS     r0,#1
0064a6  e000              B        |L1.25770|
                  |L1.25768|
0064a8  2000              MOVS     r0,#0
                  |L1.25770|
0064aa  2800              CMP      r0,#0
                  |L1.25772|
0064ac  d07e              BEQ      |L1.26028|
0064ae  48d0              LDR      r0,|L1.26608|
0064b0  6800              LDR      r0,[r0,#0]  ; cond200
0064b2  2800              CMP      r0,#0
0064b4  d101              BNE      |L1.25786|
0064b6  2001              MOVS     r0,#1
0064b8  e000              B        |L1.25788|
                  |L1.25786|
0064ba  2000              MOVS     r0,#0
                  |L1.25788|
0064bc  2800              CMP      r0,#0
0064be  d0f5              BEQ      |L1.25772|
0064c0  48cc              LDR      r0,|L1.26612|
0064c2  6800              LDR      r0,[r0,#0]  ; sleep_flag
0064c4  2801              CMP      r0,#1
0064c6  d0f1              BEQ      |L1.25772|
;;;814    	{
;;;815    	delay(100);
0064c8  2064              MOVS     r0,#0x64
0064ca  f7fffffe          BL       delay
;;;816    	clear();//memset(uart_string_gsm,0,5000);
0064ce  f7fffffe          BL       clear
;;;817    	memset(at_,0,100);
0064d2  2164              MOVS     r1,#0x64
0064d4  48c8              LDR      r0,|L1.26616|
0064d6  f7fffffe          BL       __aeabi_memclr
;;;818    	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0064da  48bc              LDR      r0,|L1.26572|
0064dc  f7fffffe          BL       strlen
0064e0  1c40              ADDS     r0,r0,#1
0064e2  4603              MOV      r3,r0
0064e4  4ac5              LDR      r2,|L1.26620|
0064e6  49bd              LDR      r1,|L1.26588|
0064e8  310c              ADDS     r1,r1,#0xc
0064ea  9001              STR      r0,[sp,#4]
0064ec  48c2              LDR      r0,|L1.26616|
0064ee  f7fffffe          BL       __2sprintf
;;;819    	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0064f2  2005              MOVS     r0,#5
0064f4  4bba              LDR      r3,|L1.26592|
0064f6  461a              MOV      r2,r3
0064f8  3a70              SUBS     r2,r2,#0x70
0064fa  a1c1              ADR      r1,|L1.26624|
0064fc  9000              STR      r0,[sp,#0]
0064fe  48be              LDR      r0,|L1.26616|
006500  f7fffffe          BL       send_SD
;;;820    	clear();	
006504  f7fffffe          BL       clear
;;;821    	k2=0;									//string array counter for uart 1
006508  2000              MOVS     r0,#0
00650a  49be              LDR      r1,|L1.26628|
00650c  6008              STR      r0,[r1,#0]  ; k2
;;;822    	tout=0;	
00650e  49be              LDR      r1,|L1.26632|
006510  6008              STR      r0,[r1,#0]  ; tout
;;;823    	for(k=0;k<strlen(data);k++)
006512  49be              LDR      r1,|L1.26636|
006514  6008              STR      r0,[r1,#0]  ; k
006516  e00d              B        |L1.25908|
                  |L1.25880|
;;;824    	{
;;;825    	uart_putchar(UART1_BASE_PTR, data[k]);//clear();
006518  48ac              LDR      r0,|L1.26572|
00651a  49bc              LDR      r1,|L1.26636|
00651c  6809              LDR      r1,[r1,#0]  ; k
00651e  5c40              LDRB     r0,[r0,r1]
006520  4601              MOV      r1,r0
006522  9001              STR      r0,[sp,#4]
006524  48ba              LDR      r0,|L1.26640|
006526  f7fffffe          BL       uart_putchar
00652a  48b8              LDR      r0,|L1.26636|
00652c  6800              LDR      r0,[r0,#0]            ;823  ; k
00652e  1c40              ADDS     r0,r0,#1              ;823
006530  49b6              LDR      r1,|L1.26636|
006532  6008              STR      r0,[r1,#0]            ;823  ; k
                  |L1.25908|
006534  48a5              LDR      r0,|L1.26572|
006536  f7fffffe          BL       strlen
00653a  49b4              LDR      r1,|L1.26636|
00653c  6809              LDR      r1,[r1,#0]            ;823  ; k
00653e  4288              CMP      r0,r1                 ;823
006540  d8ea              BHI      |L1.25880|
;;;826    	}	
;;;827    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
006542  210a              MOVS     r1,#0xa
006544  48b2              LDR      r0,|L1.26640|
006546  f7fffffe          BL       uart_putchar
00654a  210a              MOVS     r1,#0xa
00654c  48b0              LDR      r0,|L1.26640|
00654e  f7fffffe          BL       uart_putchar
006552  210a              MOVS     r1,#0xa
006554  48ae              LDR      r0,|L1.26640|
006556  f7fffffe          BL       uart_putchar
00655a  210a              MOVS     r1,#0xa
00655c  48ac              LDR      r0,|L1.26640|
00655e  f7fffffe          BL       uart_putchar
006562  210a              MOVS     r1,#0xa
006564  48aa              LDR      r0,|L1.26640|
006566  f7fffffe          BL       uart_putchar
00656a  210a              MOVS     r1,#0xa
00656c  48a8              LDR      r0,|L1.26640|
00656e  f7fffffe          BL       uart_putchar
006572  210a              MOVS     r1,#0xa
006574  48a6              LDR      r0,|L1.26640|
006576  f7fffffe          BL       uart_putchar
;;;828    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
00657a  210a              MOVS     r1,#0xa
00657c  48a4              LDR      r0,|L1.26640|
00657e  f7fffffe          BL       uart_putchar
006582  210a              MOVS     r1,#0xa
006584  48a2              LDR      r0,|L1.26640|
006586  f7fffffe          BL       uart_putchar
00658a  210a              MOVS     r1,#0xa
00658c  48a0              LDR      r0,|L1.26640|
00658e  f7fffffe          BL       uart_putchar
006592  210a              MOVS     r1,#0xa
006594  489e              LDR      r0,|L1.26640|
006596  f7fffffe          BL       uart_putchar
00659a  210a              MOVS     r1,#0xa
00659c  489c              LDR      r0,|L1.26640|
00659e  f7fffffe          BL       uart_putchar
0065a2  210a              MOVS     r1,#0xa
0065a4  489a              LDR      r0,|L1.26640|
0065a6  f7fffffe          BL       uart_putchar
0065aa  e000              B        |L1.26030|
                  |L1.26028|
0065ac  e051              B        |L1.26194|
                  |L1.26030|
0065ae  210a              MOVS     r1,#0xa
0065b0  4897              LDR      r0,|L1.26640|
0065b2  f7fffffe          BL       uart_putchar
;;;829    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
0065b6  210a              MOVS     r1,#0xa
0065b8  4895              LDR      r0,|L1.26640|
0065ba  f7fffffe          BL       uart_putchar
0065be  210a              MOVS     r1,#0xa
0065c0  4893              LDR      r0,|L1.26640|
0065c2  f7fffffe          BL       uart_putchar
0065c6  210a              MOVS     r1,#0xa
0065c8  4891              LDR      r0,|L1.26640|
0065ca  f7fffffe          BL       uart_putchar
0065ce  210a              MOVS     r1,#0xa
0065d0  488f              LDR      r0,|L1.26640|
0065d2  f7fffffe          BL       uart_putchar
0065d6  210a              MOVS     r1,#0xa
0065d8  488d              LDR      r0,|L1.26640|
0065da  f7fffffe          BL       uart_putchar
0065de  210a              MOVS     r1,#0xa
0065e0  488b              LDR      r0,|L1.26640|
0065e2  f7fffffe          BL       uart_putchar
0065e6  210a              MOVS     r1,#0xa
0065e8  4889              LDR      r0,|L1.26640|
0065ea  f7fffffe          BL       uart_putchar
;;;830    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
0065ee  210a              MOVS     r1,#0xa
0065f0  4887              LDR      r0,|L1.26640|
0065f2  f7fffffe          BL       uart_putchar
0065f6  210a              MOVS     r1,#0xa
0065f8  4885              LDR      r0,|L1.26640|
0065fa  f7fffffe          BL       uart_putchar
;;;831    										//memset(data,0,1000);
;;;832    															//timer counts to wait for characters in uart 1 									
;;;833    										while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0065fe  bf00              NOP      
                  |L1.26112|
006600  4976              LDR      r1,|L1.26588|
006602  3144              ADDS     r1,r1,#0x44
006604  4878              LDR      r0,|L1.26600|
006606  f7fffffe          BL       strstr
00660a  2800              CMP      r0,#0
00660c  d109              BNE      |L1.26146|
00660e  4974              LDR      r1,|L1.26592|
006610  4875              LDR      r0,|L1.26600|
006612  f7fffffe          BL       strstr
006616  2800              CMP      r0,#0
006618  d103              BNE      |L1.26146|
00661a  487b              LDR      r0,|L1.26632|
00661c  6800              LDR      r0,[r0,#0]  ; tout
00661e  2805              CMP      r0,#5
006620  ddee              BLE      |L1.26112|
                  |L1.26146|
;;;834    										{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;835    										}
;;;836    										clear();//uart_putchar(UART1_BASE_PTR,0x1a);
006622  f7fffffe          BL       clear
;;;837    										//clear();
;;;838    										memset(data,0,strlen(data));
006626  4869              LDR      r0,|L1.26572|
006628  f7fffffe          BL       strlen
00662c  4601              MOV      r1,r0
00662e  9001              STR      r0,[sp,#4]
006630  4866              LDR      r0,|L1.26572|
006632  f7fffffe          BL       __aeabi_memclr
;;;839    										clear();
006636  f7fffffe          BL       clear
;;;840    										RESET_OFF;delay(100);
00663a  2020              MOVS     r0,#0x20
00663c  4975              LDR      r1,|L1.26644|
00663e  6088              STR      r0,[r1,#8]
006640  2064              MOVS     r0,#0x64
006642  f7fffffe          BL       delay
;;;841    										RESET_ON;delay(100);		
006646  2020              MOVS     r0,#0x20
006648  4972              LDR      r1,|L1.26644|
00664a  6048              STR      r0,[r1,#4]
00664c  2064              MOVS     r0,#0x64
00664e  f7fffffe          BL       delay
                  |L1.26194|
;;;842    	}
;;;843    		
;;;844    	send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
006652  2004              MOVS     r0,#4
006654  4b62              LDR      r3,|L1.26592|
006656  3b78              SUBS     r3,r3,#0x78
006658  461a              MOV      r2,r3
00665a  3208              ADDS     r2,r2,#8
00665c  a161              ADR      r1,|L1.26596|
00665e  9000              STR      r0,[sp,#0]
006660  486d              LDR      r0,|L1.26648|
006662  f7fffffe          BL       send_GSM
;;;845    	GPS_COLLECT2();
006666  f7fffffe          BL       GPS_COLLECT2
;;;846    	strcat(data,"CH\n");	
00666a  495c              LDR      r1,|L1.26588|
00666c  4857              LDR      r0,|L1.26572|
00666e  f7fffffe          BL       strcat
;;;847    	memset(at_,0,100);
006672  2164              MOVS     r1,#0x64
006674  4860              LDR      r0,|L1.26616|
006676  f7fffffe          BL       __aeabi_memclr
;;;848    	sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
00667a  4a68              LDR      r2,|L1.26652|
00667c  4966              LDR      r1,|L1.26648|
00667e  3118              ADDS     r1,r1,#0x18
006680  485d              LDR      r0,|L1.26616|
006682  f7fffffe          BL       __2sprintf
;;;849    	send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
006686  4866              LDR      r0,|L1.26656|
006688  6800              LDR      r0,[r0,#0]  ; tmeout
00668a  4b55              LDR      r3,|L1.26592|
00668c  3b78              SUBS     r3,r3,#0x78
00668e  461a              MOV      r2,r3
006690  3208              ADDS     r2,r2,#8
006692  a154              ADR      r1,|L1.26596|
006694  9000              STR      r0,[sp,#0]
006696  4858              LDR      r0,|L1.26616|
006698  f7fffffe          BL       send_GSM
;;;850    	msg_sim800(); 
00669c  f7fffffe          BL       msg_sim800
;;;851    	send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
0066a0  2004              MOVS     r0,#4
0066a2  4b4f              LDR      r3,|L1.26592|
0066a4  3318              ADDS     r3,r3,#0x18
0066a6  461a              MOV      r2,r3
0066a8  3a88              SUBS     r2,r2,#0x88
0066aa  a14e              ADR      r1,|L1.26596|
0066ac  9000              STR      r0,[sp,#0]
0066ae  485a              LDR      r0,|L1.26648|
0066b0  3030              ADDS     r0,r0,#0x30
0066b2  f7fffffe          BL       send_GSM
;;;852    	GPS_COLLECT2();
0066b6  f7fffffe          BL       GPS_COLLECT2
;;;853    	strcat(data,"CH\n");	
0066ba  4948              LDR      r1,|L1.26588|
0066bc  4843              LDR      r0,|L1.26572|
0066be  f7fffffe          BL       strcat
;;;854    	GPS_COLLECT2();
0066c2  f7fffffe          BL       GPS_COLLECT2
;;;855    	strcat(data,"CH\n");	
0066c6  4945              LDR      r1,|L1.26588|
0066c8  4840              LDR      r0,|L1.26572|
0066ca  f7fffffe          BL       strcat
;;;856    
;;;857    
;;;858    	msg_sim800(); 
0066ce  f7fffffe          BL       msg_sim800
;;;859    	GPS_COLLECT2();
0066d2  f7fffffe          BL       GPS_COLLECT2
;;;860    	strcat(data,"CH\n");	
0066d6  4941              LDR      r1,|L1.26588|
0066d8  483c              LDR      r0,|L1.26572|
0066da  f7fffffe          BL       strcat
;;;861    						clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0066de  f7fffffe          BL       clear
0066e2  484d              LDR      r0,|L1.26648|
0066e4  3040              ADDS     r0,r0,#0x40
0066e6  f7fffffe          BL       send_modem
0066ea  f7fffffe          BL       clear
;;;862    						delay(20);
0066ee  2014              MOVS     r0,#0x14
0066f0  f7fffffe          BL       delay
;;;863    
;;;864    
;;;865    	msg_sim800(); 
0066f4  f7fffffe          BL       msg_sim800
;;;866    
;;;867    							sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0066f8  4b4a              LDR      r3,|L1.26660|
0066fa  4a4b              LDR      r2,|L1.26664|
0066fc  4946              LDR      r1,|L1.26648|
0066fe  3158              ADDS     r1,r1,#0x58
006700  483d              LDR      r0,|L1.26616|
006702  f7fffffe          BL       __2sprintf
;;;868    							send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
006706  4846              LDR      r0,|L1.26656|
006708  6800              LDR      r0,[r0,#0]  ; tmeout
00670a  4b35              LDR      r3,|L1.26592|
00670c  3b78              SUBS     r3,r3,#0x78
00670e  4a34              LDR      r2,|L1.26592|
006710  4941              LDR      r1,|L1.26648|
006712  3178              ADDS     r1,r1,#0x78
006714  9000              STR      r0,[sp,#0]
006716  4838              LDR      r0,|L1.26616|
006718  f7fffffe          BL       send_GSM
;;;869    							clear();
00671c  f7fffffe          BL       clear
;;;870    							
;;;871    							
;;;872    							send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
006720  483f              LDR      r0,|L1.26656|
006722  6800              LDR      r0,[r0,#0]  ; tmeout
006724  4b3c              LDR      r3,|L1.26648|
006726  3380              ADDS     r3,r3,#0x80
006728  4a2d              LDR      r2,|L1.26592|
00672a  a135              ADR      r1,|L1.26624|
00672c  9000              STR      r0,[sp,#0]
00672e  4618              MOV      r0,r3
006730  3014              ADDS     r0,r0,#0x14
006732  f7fffffe          BL       send_GSM
;;;873    	//*****************************************tcp_initialization ends**************************//									
;;;874    										clear();		
006736  f7fffffe          BL       clear
;;;875    										memset(stcond1,0,strlen(stcond1));
00673a  483c              LDR      r0,|L1.26668|
00673c  6800              LDR      r0,[r0,#0]  ; stcond1
00673e  f7fffffe          BL       strlen
006742  4601              MOV      r1,r0
006744  9001              STR      r0,[sp,#4]
006746  4839              LDR      r0,|L1.26668|
006748  6800              LDR      r0,[r0,#0]  ; stcond1
00674a  f7fffffe          BL       __aeabi_memclr
;;;876    										memset(stcond2,0,strlen(stcond2));	
00674e  4838              LDR      r0,|L1.26672|
006750  6800              LDR      r0,[r0,#0]  ; stcond2
006752  f7fffffe          BL       strlen
006756  4601              MOV      r1,r0
006758  9001              STR      r0,[sp,#4]
00675a  4835              LDR      r0,|L1.26672|
00675c  6800              LDR      r0,[r0,#0]  ; stcond2
00675e  f7fffffe          BL       __aeabi_memclr
;;;877    										memset(stcond3,0,strlen(stcond3));	
006762  4834              LDR      r0,|L1.26676|
006764  6800              LDR      r0,[r0,#0]  ; stcond3
006766  f7fffffe          BL       strlen
00676a  4601              MOV      r1,r0
00676c  9001              STR      r0,[sp,#4]
00676e  4831              LDR      r0,|L1.26676|
006770  6800              LDR      r0,[r0,#0]  ; stcond3
006772  f7fffffe          BL       __aeabi_memclr
;;;878    										memset(stcond4,0,strlen(stcond4));								
006776  4830              LDR      r0,|L1.26680|
006778  6800              LDR      r0,[r0,#0]  ; stcond4
00677a  f7fffffe          BL       strlen
00677e  4601              MOV      r1,r0
006780  9001              STR      r0,[sp,#4]
006782  482d              LDR      r0,|L1.26680|
006784  6800              LDR      r0,[r0,#0]  ; stcond4
006786  f7fffffe          BL       __aeabi_memclr
;;;879    										cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
00678a  213e              MOVS     r1,#0x3e
00678c  4816              LDR      r0,|L1.26600|
00678e  f7fffffe          BL       mystrstr
006792  492a              LDR      r1,|L1.26684|
006794  7008              STRB     r0,[r1,#0]
;;;880    								
;;;881    									if(cond)	
006796  4608              MOV      r0,r1
006798  7800              LDRB     r0,[r0,#0]  ; cond
00679a  2800              CMP      r0,#0
00679c  d07e              BEQ      |L1.26780|
;;;882    									{	
;;;883    										clear();
00679e  f7fffffe          BL       clear
;;;884    										memset(uart_string_gsm,0,5000);
0067a2  4927              LDR      r1,|L1.26688|
0067a4  4810              LDR      r0,|L1.26600|
0067a6  f7fffffe          BL       __aeabi_memclr
;;;885    										strcat(data,"\n");
0067aa  a126              ADR      r1,|L1.26692|
0067ac  4807              LDR      r0,|L1.26572|
0067ae  f7fffffe          BL       strcat
;;;886    										len=strlen(data);
0067b2  4806              LDR      r0,|L1.26572|
0067b4  f7fffffe          BL       strlen
0067b8  4923              LDR      r1,|L1.26696|
0067ba  6008              STR      r0,[r1,#0]  ; len
;;;887    										tout=0;
0067bc  2000              MOVS     r0,#0
0067be  4912              LDR      r1,|L1.26632|
0067c0  6008              STR      r0,[r1,#0]  ; tout
;;;888    										k2=0;
0067c2  4910              LDR      r1,|L1.26628|
0067c4  6008              STR      r0,[r1,#0]  ; k2
;;;889    										for(k=0;k<len;k++)
0067c6  4911              LDR      r1,|L1.26636|
0067c8  6008              STR      r0,[r1,#0]  ; k
0067ca  e04d              B        |L1.26728|
                  |L1.26572|
                          DCD      data
                  |L1.26576|
                          DCD      flagch
                  |L1.26580|
                          DCD      int_erval
                  |L1.26584|
                          DCD      temp
                  |L1.26588|
                          DCD      ||.text||+0xd44
                  |L1.26592|
                          DCD      ||.text||+0x910
                  |L1.26596|
0067e4  4f4b00            DCB      "OK",0
0067e7  00                DCB      0
                  |L1.26600|
                          DCD      uart_string_gsm
                  |L1.26604|
                          DCD      cond201
                  |L1.26608|
                          DCD      cond200
                  |L1.26612|
                          DCD      sleep_flag
                  |L1.26616|
                          DCD      at_
                  |L1.26620|
                          DCD      drive
                  |L1.26624|
006800  3e00              DCB      ">",0
006802  00                DCB      0
006803  00                DCB      0
                  |L1.26628|
                          DCD      ||k2||
                  |L1.26632|
                          DCD      tout
                  |L1.26636|
                          DCD      k
                  |L1.26640|
                          DCD      0x4006b000
                  |L1.26644|
                          DCD      0x400ff080
                  |L1.26648|
                          DCD      ||.text||+0x1204
                  |L1.26652|
                          DCD      apn
                  |L1.26656|
                          DCD      tmeout
                  |L1.26660|
                          DCD      port
                  |L1.26664|
                          DCD      ||ip||
                  |L1.26668|
                          DCD      stcond1
                  |L1.26672|
                          DCD      stcond2
                  |L1.26676|
                          DCD      stcond3
                  |L1.26680|
                          DCD      stcond4
                  |L1.26684|
                          DCD      cond
                  |L1.26688|
                          DCD      0x00001388
                  |L1.26692|
006844  0a00              DCB      "\n",0
006846  00                DCB      0
006847  00                DCB      0
                  |L1.26696|
                          DCD      len
                  |L1.26700|
;;;890    										{uart_putchar(UART1_BASE_PTR, data[k]);
00684c  48fd              LDR      r0,|L1.27716|
00684e  49fe              LDR      r1,|L1.27720|
006850  6809              LDR      r1,[r1,#0]  ; k
006852  5c40              LDRB     r0,[r0,r1]
006854  4601              MOV      r1,r0
006856  9001              STR      r0,[sp,#4]
006858  48fc              LDR      r0,|L1.27724|
00685a  f7fffffe          BL       uart_putchar
00685e  48fa              LDR      r0,|L1.27720|
006860  6800              LDR      r0,[r0,#0]            ;889  ; k
006862  1c40              ADDS     r0,r0,#1              ;889
006864  49f8              LDR      r1,|L1.27720|
006866  6008              STR      r0,[r1,#0]            ;889  ; k
                  |L1.26728|
006868  48f7              LDR      r0,|L1.27720|
00686a  6800              LDR      r0,[r0,#0]            ;889  ; k
00686c  49f8              LDR      r1,|L1.27728|
00686e  6809              LDR      r1,[r1,#0]            ;889  ; len
006870  4288              CMP      r0,r1                 ;889
006872  dbeb              BLT      |L1.26700|
;;;891    										}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
006874  210a              MOVS     r1,#0xa
006876  48f5              LDR      r0,|L1.27724|
006878  f7fffffe          BL       uart_putchar
00687c  211a              MOVS     r1,#0x1a
00687e  48f3              LDR      r0,|L1.27724|
006880  f7fffffe          BL       uart_putchar
006884  211a              MOVS     r1,#0x1a
006886  48f1              LDR      r0,|L1.27724|
006888  f7fffffe          BL       uart_putchar
00688c  211a              MOVS     r1,#0x1a
00688e  48ef              LDR      r0,|L1.27724|
006890  f7fffffe          BL       uart_putchar
;;;892    										do{stcond1=strstr(uart_string_gsm,"SEND OK");
006894  bf00              NOP      
                  |L1.26774|
006896  49ef              LDR      r1,|L1.27732|
006898  48ef              LDR      r0,|L1.27736|
00689a  e000              B        |L1.26782|
                  |L1.26780|
00689c  e194              B        |L1.27592|
                  |L1.26782|
00689e  f7fffffe          BL       strstr
0068a2  49ee              LDR      r1,|L1.27740|
0068a4  6008              STR      r0,[r1,#0]  ; stcond1
;;;893    												stcond2=strstr(uart_string_gsm, "ERROR");
0068a6  49eb              LDR      r1,|L1.27732|
0068a8  3108              ADDS     r1,r1,#8
0068aa  48eb              LDR      r0,|L1.27736|
0068ac  f7fffffe          BL       strstr
0068b0  49eb              LDR      r1,|L1.27744|
0068b2  6008              STR      r0,[r1,#0]  ; stcond2
;;;894    													stcond3=strstr(uart_string_gsm, "FAIL");	
0068b4  49eb              LDR      r1,|L1.27748|
0068b6  48e8              LDR      r0,|L1.27736|
0068b8  f7fffffe          BL       strstr
0068bc  49ea              LDR      r1,|L1.27752|
0068be  6008              STR      r0,[r1,#0]  ; stcond3
;;;895    														stcond4=strstr(uart_string_gsm, "DEACT");	
0068c0  49e4              LDR      r1,|L1.27732|
0068c2  3120              ADDS     r1,r1,#0x20
0068c4  48e4              LDR      r0,|L1.27736|
0068c6  f7fffffe          BL       strstr
0068ca  49e8              LDR      r1,|L1.27756|
0068cc  6008              STR      r0,[r1,#0]  ; stcond4
;;;896    											}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 7) ) ); //|| (timeout < 1)   
0068ce  48e4              LDR      r0,|L1.27744|
0068d0  6800              LDR      r0,[r0,#0]  ; stcond2
0068d2  2800              CMP      r0,#0
0068d4  d10f              BNE      |L1.26870|
0068d6  48e4              LDR      r0,|L1.27752|
0068d8  6800              LDR      r0,[r0,#0]  ; stcond3
0068da  2800              CMP      r0,#0
0068dc  d10b              BNE      |L1.26870|
0068de  4608              MOV      r0,r1
0068e0  6800              LDR      r0,[r0,#0]  ; stcond4
0068e2  2800              CMP      r0,#0
0068e4  d107              BNE      |L1.26870|
0068e6  48dd              LDR      r0,|L1.27740|
0068e8  6800              LDR      r0,[r0,#0]  ; stcond1
0068ea  2800              CMP      r0,#0
0068ec  d103              BNE      |L1.26870|
0068ee  48e0              LDR      r0,|L1.27760|
0068f0  6800              LDR      r0,[r0,#0]  ; tout
0068f2  2807              CMP      r0,#7
0068f4  ddcf              BLE      |L1.26774|
                  |L1.26870|
;;;897    										uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0068f6  211a              MOVS     r1,#0x1a
0068f8  48d4              LDR      r0,|L1.27724|
0068fa  f7fffffe          BL       uart_putchar
0068fe  211a              MOVS     r1,#0x1a
006900  48d2              LDR      r0,|L1.27724|
006902  f7fffffe          BL       uart_putchar
006906  211a              MOVS     r1,#0x1a
006908  48d0              LDR      r0,|L1.27724|
00690a  f7fffffe          BL       uart_putchar
00690e  211a              MOVS     r1,#0x1a
006910  48ce              LDR      r0,|L1.27724|
006912  f7fffffe          BL       uart_putchar
;;;898    										con1d=	(strstr(uart_string_gsm,"SEND OK"));
006916  49cf              LDR      r1,|L1.27732|
006918  48cf              LDR      r0,|L1.27736|
00691a  f7fffffe          BL       strstr
00691e  49d5              LDR      r1,|L1.27764|
006920  6008              STR      r0,[r1,#0]  ; con1d
;;;899    																	if(!(con1d) == 1 ) 
006922  4608              MOV      r0,r1
006924  6800              LDR      r0,[r0,#0]  ; con1d
006926  2800              CMP      r0,#0
006928  d101              BNE      |L1.26926|
00692a  2001              MOVS     r0,#1
00692c  e000              B        |L1.26928|
                  |L1.26926|
00692e  2000              MOVS     r0,#0
                  |L1.26928|
006930  2801              CMP      r0,#1
006932  d17d              BNE      |L1.27184|
;;;900    																	{
;;;901    																			delay(100);
006934  2064              MOVS     r0,#0x64
006936  f7fffffe          BL       delay
;;;902    																			clear();//memset(uart_string_gsm,0,5000);
00693a  f7fffffe          BL       clear
;;;903    																			memset(at_,0,100);
00693e  2164              MOVS     r1,#0x64
006940  48cd              LDR      r0,|L1.27768|
006942  f7fffffe          BL       __aeabi_memclr
;;;904    																			sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
006946  48bf              LDR      r0,|L1.27716|
006948  f7fffffe          BL       strlen
00694c  1c40              ADDS     r0,r0,#1
00694e  4603              MOV      r3,r0
006950  4aca              LDR      r2,|L1.27772|
006952  49cb              LDR      r1,|L1.27776|
006954  9001              STR      r0,[sp,#4]
006956  48c8              LDR      r0,|L1.27768|
006958  f7fffffe          BL       __2sprintf
;;;905    																			send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00695c  2005              MOVS     r0,#5
00695e  4bbd              LDR      r3,|L1.27732|
006960  3308              ADDS     r3,r3,#8
006962  461a              MOV      r2,r3
006964  3a70              SUBS     r2,r2,#0x70
006966  a1c7              ADR      r1,|L1.27780|
006968  9000              STR      r0,[sp,#0]
00696a  48c3              LDR      r0,|L1.27768|
00696c  f7fffffe          BL       send_SD
;;;906    																			clear();	
006970  f7fffffe          BL       clear
;;;907    																			k2=0;									//string array counter for uart 1
006974  2000              MOVS     r0,#0
006976  49c4              LDR      r1,|L1.27784|
006978  6008              STR      r0,[r1,#0]  ; k2
;;;908    																			tout=0;	
00697a  49bd              LDR      r1,|L1.27760|
00697c  6008              STR      r0,[r1,#0]  ; tout
;;;909    																			for(k=0;k<strlen(data);k++)
00697e  49b2              LDR      r1,|L1.27720|
006980  6008              STR      r0,[r1,#0]  ; k
006982  e00d              B        |L1.27040|
                  |L1.27012|
;;;910    																			{
;;;911    																				uart_putchar(UART1_BASE_PTR, data[k]);//clear();
006984  48af              LDR      r0,|L1.27716|
006986  49b0              LDR      r1,|L1.27720|
006988  6809              LDR      r1,[r1,#0]  ; k
00698a  5c40              LDRB     r0,[r0,r1]
00698c  4601              MOV      r1,r0
00698e  9001              STR      r0,[sp,#4]
006990  48ae              LDR      r0,|L1.27724|
006992  f7fffffe          BL       uart_putchar
006996  48ac              LDR      r0,|L1.27720|
006998  6800              LDR      r0,[r0,#0]            ;909  ; k
00699a  1c40              ADDS     r0,r0,#1              ;909
00699c  49aa              LDR      r1,|L1.27720|
00699e  6008              STR      r0,[r1,#0]            ;909  ; k
                  |L1.27040|
0069a0  48a8              LDR      r0,|L1.27716|
0069a2  f7fffffe          BL       strlen
0069a6  49a8              LDR      r1,|L1.27720|
0069a8  6809              LDR      r1,[r1,#0]            ;909  ; k
0069aa  4288              CMP      r0,r1                 ;909
0069ac  d8ea              BHI      |L1.27012|
;;;912    																			}	
;;;913    																			uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0069ae  210a              MOVS     r1,#0xa
0069b0  48a6              LDR      r0,|L1.27724|
0069b2  f7fffffe          BL       uart_putchar
0069b6  210a              MOVS     r1,#0xa
0069b8  48a4              LDR      r0,|L1.27724|
0069ba  f7fffffe          BL       uart_putchar
0069be  210a              MOVS     r1,#0xa
0069c0  48a2              LDR      r0,|L1.27724|
0069c2  f7fffffe          BL       uart_putchar
0069c6  210a              MOVS     r1,#0xa
0069c8  48a0              LDR      r0,|L1.27724|
0069ca  f7fffffe          BL       uart_putchar
0069ce  210a              MOVS     r1,#0xa
0069d0  489e              LDR      r0,|L1.27724|
0069d2  f7fffffe          BL       uart_putchar
0069d6  210a              MOVS     r1,#0xa
0069d8  489c              LDR      r0,|L1.27724|
0069da  f7fffffe          BL       uart_putchar
0069de  210a              MOVS     r1,#0xa
0069e0  489a              LDR      r0,|L1.27724|
0069e2  f7fffffe          BL       uart_putchar
0069e6  210a              MOVS     r1,#0xa
0069e8  4898              LDR      r0,|L1.27724|
0069ea  f7fffffe          BL       uart_putchar
0069ee  210a              MOVS     r1,#0xa
0069f0  4896              LDR      r0,|L1.27724|
0069f2  f7fffffe          BL       uart_putchar
0069f6  210a              MOVS     r1,#0xa
0069f8  4894              LDR      r0,|L1.27724|
0069fa  f7fffffe          BL       uart_putchar
0069fe  210a              MOVS     r1,#0xa
006a00  4892              LDR      r0,|L1.27724|
006a02  f7fffffe          BL       uart_putchar
006a06  210a              MOVS     r1,#0xa
006a08  4890              LDR      r0,|L1.27724|
006a0a  f7fffffe          BL       uart_putchar
006a0e  210a              MOVS     r1,#0xa
006a10  488e              LDR      r0,|L1.27724|
006a12  f7fffffe          BL       uart_putchar
006a16  210a              MOVS     r1,#0xa
006a18  488c              LDR      r0,|L1.27724|
006a1a  f7fffffe          BL       uart_putchar
006a1e  210a              MOVS     r1,#0xa
006a20  488a              LDR      r0,|L1.27724|
006a22  f7fffffe          BL       uart_putchar
006a26  210a              MOVS     r1,#0xa
006a28  4888              LDR      r0,|L1.27724|
006a2a  f7fffffe          BL       uart_putchar
006a2e  e000              B        |L1.27186|
                  |L1.27184|
006a30  e0c7              B        |L1.27586|
                  |L1.27186|
006a32  210a              MOVS     r1,#0xa
006a34  4885              LDR      r0,|L1.27724|
006a36  f7fffffe          BL       uart_putchar
006a3a  210a              MOVS     r1,#0xa
006a3c  4883              LDR      r0,|L1.27724|
006a3e  f7fffffe          BL       uart_putchar
006a42  210a              MOVS     r1,#0xa
006a44  4881              LDR      r0,|L1.27724|
006a46  f7fffffe          BL       uart_putchar
006a4a  210a              MOVS     r1,#0xa
006a4c  487f              LDR      r0,|L1.27724|
006a4e  f7fffffe          BL       uart_putchar
006a52  210a              MOVS     r1,#0xa
006a54  487d              LDR      r0,|L1.27724|
006a56  f7fffffe          BL       uart_putchar
006a5a  210a              MOVS     r1,#0xa
006a5c  487b              LDR      r0,|L1.27724|
006a5e  f7fffffe          BL       uart_putchar
006a62  210a              MOVS     r1,#0xa
006a64  4879              LDR      r0,|L1.27724|
006a66  f7fffffe          BL       uart_putchar
006a6a  210a              MOVS     r1,#0xa
006a6c  4877              LDR      r0,|L1.27724|
006a6e  f7fffffe          BL       uart_putchar
006a72  210a              MOVS     r1,#0xa
006a74  4875              LDR      r0,|L1.27724|
006a76  f7fffffe          BL       uart_putchar
006a7a  210a              MOVS     r1,#0xa
006a7c  4873              LDR      r0,|L1.27724|
006a7e  f7fffffe          BL       uart_putchar
006a82  210a              MOVS     r1,#0xa
006a84  4871              LDR      r0,|L1.27724|
006a86  f7fffffe          BL       uart_putchar
006a8a  210a              MOVS     r1,#0xa
006a8c  486f              LDR      r0,|L1.27724|
006a8e  f7fffffe          BL       uart_putchar
006a92  210a              MOVS     r1,#0xa
006a94  486d              LDR      r0,|L1.27724|
006a96  f7fffffe          BL       uart_putchar
006a9a  210a              MOVS     r1,#0xa
006a9c  486b              LDR      r0,|L1.27724|
006a9e  f7fffffe          BL       uart_putchar
006aa2  210a              MOVS     r1,#0xa
006aa4  4869              LDR      r0,|L1.27724|
006aa6  f7fffffe          BL       uart_putchar
006aaa  210a              MOVS     r1,#0xa
006aac  4867              LDR      r0,|L1.27724|
006aae  f7fffffe          BL       uart_putchar
006ab2  210a              MOVS     r1,#0xa
006ab4  4865              LDR      r0,|L1.27724|
006ab6  f7fffffe          BL       uart_putchar
006aba  210a              MOVS     r1,#0xa
006abc  4863              LDR      r0,|L1.27724|
006abe  f7fffffe          BL       uart_putchar
006ac2  210a              MOVS     r1,#0xa
006ac4  4861              LDR      r0,|L1.27724|
006ac6  f7fffffe          BL       uart_putchar
006aca  210a              MOVS     r1,#0xa
006acc  485f              LDR      r0,|L1.27724|
006ace  f7fffffe          BL       uart_putchar
006ad2  210a              MOVS     r1,#0xa
006ad4  485d              LDR      r0,|L1.27724|
006ad6  f7fffffe          BL       uart_putchar
006ada  210a              MOVS     r1,#0xa
006adc  485b              LDR      r0,|L1.27724|
006ade  f7fffffe          BL       uart_putchar
006ae2  210a              MOVS     r1,#0xa
006ae4  4859              LDR      r0,|L1.27724|
006ae6  f7fffffe          BL       uart_putchar
006aea  e000              B        |L1.27374|
                  |L1.27372|
006aec  e1d0              B        |L1.28304|
                  |L1.27374|
006aee  210a              MOVS     r1,#0xa
006af0  4856              LDR      r0,|L1.27724|
006af2  f7fffffe          BL       uart_putchar
006af6  210a              MOVS     r1,#0xa
006af8  4854              LDR      r0,|L1.27724|
006afa  f7fffffe          BL       uart_putchar
006afe  210a              MOVS     r1,#0xa
006b00  4852              LDR      r0,|L1.27724|
006b02  f7fffffe          BL       uart_putchar
006b06  210a              MOVS     r1,#0xa
006b08  4850              LDR      r0,|L1.27724|
006b0a  f7fffffe          BL       uart_putchar
006b0e  210a              MOVS     r1,#0xa
006b10  484e              LDR      r0,|L1.27724|
006b12  f7fffffe          BL       uart_putchar
006b16  210a              MOVS     r1,#0xa
006b18  484c              LDR      r0,|L1.27724|
006b1a  f7fffffe          BL       uart_putchar
006b1e  210a              MOVS     r1,#0xa
006b20  484a              LDR      r0,|L1.27724|
006b22  e000              B        |L1.27430|
                  |L1.27428|
006b24  e1b6              B        |L1.28308|
                  |L1.27430|
006b26  f7fffffe          BL       uart_putchar
006b2a  210a              MOVS     r1,#0xa
006b2c  4847              LDR      r0,|L1.27724|
006b2e  f7fffffe          BL       uart_putchar
006b32  210a              MOVS     r1,#0xa
006b34  4845              LDR      r0,|L1.27724|
006b36  f7fffffe          BL       uart_putchar
006b3a  210a              MOVS     r1,#0xa
006b3c  4843              LDR      r0,|L1.27724|
006b3e  f7fffffe          BL       uart_putchar
006b42  210a              MOVS     r1,#0xa
006b44  4841              LDR      r0,|L1.27724|
006b46  f7fffffe          BL       uart_putchar
006b4a  210a              MOVS     r1,#0xa
006b4c  483f              LDR      r0,|L1.27724|
006b4e  f7fffffe          BL       uart_putchar
006b52  210a              MOVS     r1,#0xa
006b54  483d              LDR      r0,|L1.27724|
006b56  f7fffffe          BL       uart_putchar
006b5a  210a              MOVS     r1,#0xa
006b5c  483b              LDR      r0,|L1.27724|
006b5e  f7fffffe          BL       uart_putchar
006b62  210a              MOVS     r1,#0xa
006b64  4839              LDR      r0,|L1.27724|
006b66  f7fffffe          BL       uart_putchar
006b6a  210a              MOVS     r1,#0xa
006b6c  4837              LDR      r0,|L1.27724|
006b6e  f7fffffe          BL       uart_putchar
006b72  210a              MOVS     r1,#0xa
006b74  4835              LDR      r0,|L1.27724|
006b76  f7fffffe          BL       uart_putchar
006b7a  210a              MOVS     r1,#0xa
006b7c  4833              LDR      r0,|L1.27724|
006b7e  f7fffffe          BL       uart_putchar
;;;914    																			while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) ))){}
006b82  bf00              NOP      
                  |L1.27524|
006b84  493e              LDR      r1,|L1.27776|
006b86  3138              ADDS     r1,r1,#0x38
006b88  4833              LDR      r0,|L1.27736|
006b8a  f7fffffe          BL       strstr
006b8e  2800              CMP      r0,#0
006b90  d10a              BNE      |L1.27560|
006b92  4930              LDR      r1,|L1.27732|
006b94  3108              ADDS     r1,r1,#8
006b96  4830              LDR      r0,|L1.27736|
006b98  f7fffffe          BL       strstr
006b9c  2800              CMP      r0,#0
006b9e  d103              BNE      |L1.27560|
006ba0  4833              LDR      r0,|L1.27760|
006ba2  6800              LDR      r0,[r0,#0]  ; tout
006ba4  2805              CMP      r0,#5
006ba6  dded              BLE      |L1.27524|
                  |L1.27560|
;;;915    																			clear();//uart_putchar(UART1_BASE_PTR,0x1a);
006ba8  f7fffffe          BL       clear
;;;916    																			memset(data,0,strlen(data));
006bac  4825              LDR      r0,|L1.27716|
006bae  f7fffffe          BL       strlen
006bb2  4601              MOV      r1,r0
006bb4  9001              STR      r0,[sp,#4]
006bb6  4823              LDR      r0,|L1.27716|
006bb8  f7fffffe          BL       __aeabi_memclr
;;;917    																			clear();
006bbc  f7fffffe          BL       clear
006bc0  e168              B        |L1.28308|
                  |L1.27586|
;;;918    																		
;;;919    																//	log_it();								
;;;920    																	}else{send_chunk();}													
006bc2  f7fffffe          BL       send_chunk
006bc6  e165              B        |L1.28308|
                  |L1.27592|
;;;921    									//checks for the sd_data available
;;;922    									}
;;;923    									//con1d=strstr(uart_string_gsm,"OK");
;;;924    									else
;;;925    									{
;;;926    											delay(100);
006bc8  2064              MOVS     r0,#0x64
006bca  f7fffffe          BL       delay
;;;927    											clear();//memset(uart_string_gsm,0,5000);
006bce  f7fffffe          BL       clear
;;;928    											memset(at_,0,100);
006bd2  2164              MOVS     r1,#0x64
006bd4  4828              LDR      r0,|L1.27768|
006bd6  f7fffffe          BL       __aeabi_memclr
;;;929    											sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
006bda  481a              LDR      r0,|L1.27716|
006bdc  f7fffffe          BL       strlen
006be0  1c40              ADDS     r0,r0,#1
006be2  4603              MOV      r3,r0
006be4  4a25              LDR      r2,|L1.27772|
006be6  4926              LDR      r1,|L1.27776|
006be8  9001              STR      r0,[sp,#4]
006bea  4823              LDR      r0,|L1.27768|
006bec  f7fffffe          BL       __2sprintf
;;;930    											send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
006bf0  2005              MOVS     r0,#5
006bf2  4b18              LDR      r3,|L1.27732|
006bf4  3308              ADDS     r3,r3,#8
006bf6  461a              MOV      r2,r3
006bf8  3a70              SUBS     r2,r2,#0x70
006bfa  a122              ADR      r1,|L1.27780|
006bfc  9000              STR      r0,[sp,#0]
006bfe  481e              LDR      r0,|L1.27768|
006c00  f7fffffe          BL       send_SD
;;;931    											clear();	
006c04  f7fffffe          BL       clear
;;;932    											k2=0;									//string array counter for uart 1
006c08  2000              MOVS     r0,#0
006c0a  491f              LDR      r1,|L1.27784|
006c0c  6008              STR      r0,[r1,#0]  ; k2
;;;933    											tout=0;	
006c0e  4918              LDR      r1,|L1.27760|
006c10  6008              STR      r0,[r1,#0]  ; tout
;;;934    											for(k=0;k<strlen(data);k++)
006c12  490d              LDR      r1,|L1.27720|
006c14  6008              STR      r0,[r1,#0]  ; k
006c16  e00d              B        |L1.27700|
                  |L1.27672|
;;;935    											{
;;;936    											uart_putchar(UART1_BASE_PTR, data[k]);//clear();
006c18  480a              LDR      r0,|L1.27716|
006c1a  490b              LDR      r1,|L1.27720|
006c1c  6809              LDR      r1,[r1,#0]  ; k
006c1e  5c40              LDRB     r0,[r0,r1]
006c20  4601              MOV      r1,r0
006c22  9001              STR      r0,[sp,#4]
006c24  4809              LDR      r0,|L1.27724|
006c26  f7fffffe          BL       uart_putchar
006c2a  4807              LDR      r0,|L1.27720|
006c2c  6800              LDR      r0,[r0,#0]            ;934  ; k
006c2e  1c40              ADDS     r0,r0,#1              ;934
006c30  4905              LDR      r1,|L1.27720|
006c32  6008              STR      r0,[r1,#0]            ;934  ; k
                  |L1.27700|
006c34  4803              LDR      r0,|L1.27716|
006c36  f7fffffe          BL       strlen
006c3a  4903              LDR      r1,|L1.27720|
006c3c  6809              LDR      r1,[r1,#0]            ;934  ; k
006c3e  4288              CMP      r0,r1                 ;934
006c40  d8ea              BHI      |L1.27672|
;;;937    											}	
;;;938    											uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
006c42  e023              B        |L1.27788|
                  |L1.27716|
                          DCD      data
                  |L1.27720|
                          DCD      k
                  |L1.27724|
                          DCD      0x4006b000
                  |L1.27728|
                          DCD      len
                  |L1.27732|
                          DCD      ||.text||+0x908
                  |L1.27736|
                          DCD      uart_string_gsm
                  |L1.27740|
                          DCD      stcond1
                  |L1.27744|
                          DCD      stcond2
                  |L1.27748|
                          DCD      ||.text||+0x128c
                  |L1.27752|
                          DCD      stcond3
                  |L1.27756|
                          DCD      stcond4
                  |L1.27760|
                          DCD      tout
                  |L1.27764|
                          DCD      con1d
                  |L1.27768|
                          DCD      at_
                  |L1.27772|
                          DCD      drive
                  |L1.27776|
                          DCD      ||.text||+0xd50
                  |L1.27780|
006c84  3e00              DCB      ">",0
006c86  00                DCB      0
006c87  00                DCB      0
                  |L1.27784|
                          DCD      ||k2||
                  |L1.27788|
006c8c  210a              MOVS     r1,#0xa
006c8e  48fe              LDR      r0,|L1.28808|
006c90  f7fffffe          BL       uart_putchar
006c94  210a              MOVS     r1,#0xa
006c96  48fc              LDR      r0,|L1.28808|
006c98  f7fffffe          BL       uart_putchar
006c9c  210a              MOVS     r1,#0xa
006c9e  48fa              LDR      r0,|L1.28808|
006ca0  f7fffffe          BL       uart_putchar
006ca4  210a              MOVS     r1,#0xa
006ca6  48f8              LDR      r0,|L1.28808|
006ca8  f7fffffe          BL       uart_putchar
006cac  210a              MOVS     r1,#0xa
006cae  48f6              LDR      r0,|L1.28808|
006cb0  f7fffffe          BL       uart_putchar
006cb4  210a              MOVS     r1,#0xa
006cb6  48f4              LDR      r0,|L1.28808|
006cb8  f7fffffe          BL       uart_putchar
006cbc  210a              MOVS     r1,#0xa
006cbe  48f2              LDR      r0,|L1.28808|
006cc0  f7fffffe          BL       uart_putchar
006cc4  210a              MOVS     r1,#0xa
006cc6  48f0              LDR      r0,|L1.28808|
006cc8  f7fffffe          BL       uart_putchar
006ccc  210a              MOVS     r1,#0xa
006cce  48ee              LDR      r0,|L1.28808|
006cd0  f7fffffe          BL       uart_putchar
006cd4  210a              MOVS     r1,#0xa
006cd6  48ec              LDR      r0,|L1.28808|
006cd8  f7fffffe          BL       uart_putchar
006cdc  210a              MOVS     r1,#0xa
006cde  48ea              LDR      r0,|L1.28808|
006ce0  f7fffffe          BL       uart_putchar
006ce4  210a              MOVS     r1,#0xa
006ce6  48e8              LDR      r0,|L1.28808|
006ce8  f7fffffe          BL       uart_putchar
006cec  210a              MOVS     r1,#0xa
006cee  48e6              LDR      r0,|L1.28808|
006cf0  f7fffffe          BL       uart_putchar
006cf4  210a              MOVS     r1,#0xa
006cf6  48e4              LDR      r0,|L1.28808|
006cf8  f7fffffe          BL       uart_putchar
006cfc  210a              MOVS     r1,#0xa
006cfe  48e2              LDR      r0,|L1.28808|
006d00  f7fffffe          BL       uart_putchar
006d04  210a              MOVS     r1,#0xa
006d06  48e0              LDR      r0,|L1.28808|
006d08  f7fffffe          BL       uart_putchar
006d0c  210a              MOVS     r1,#0xa
006d0e  48de              LDR      r0,|L1.28808|
006d10  f7fffffe          BL       uart_putchar
006d14  210a              MOVS     r1,#0xa
006d16  48dc              LDR      r0,|L1.28808|
006d18  f7fffffe          BL       uart_putchar
006d1c  210a              MOVS     r1,#0xa
006d1e  48da              LDR      r0,|L1.28808|
006d20  f7fffffe          BL       uart_putchar
006d24  210a              MOVS     r1,#0xa
006d26  48d8              LDR      r0,|L1.28808|
006d28  f7fffffe          BL       uart_putchar
006d2c  210a              MOVS     r1,#0xa
006d2e  48d6              LDR      r0,|L1.28808|
006d30  f7fffffe          BL       uart_putchar
006d34  210a              MOVS     r1,#0xa
006d36  48d4              LDR      r0,|L1.28808|
006d38  f7fffffe          BL       uart_putchar
006d3c  210a              MOVS     r1,#0xa
006d3e  48d2              LDR      r0,|L1.28808|
006d40  f7fffffe          BL       uart_putchar
006d44  210a              MOVS     r1,#0xa
006d46  48d0              LDR      r0,|L1.28808|
006d48  f7fffffe          BL       uart_putchar
006d4c  210a              MOVS     r1,#0xa
006d4e  48ce              LDR      r0,|L1.28808|
006d50  f7fffffe          BL       uart_putchar
006d54  210a              MOVS     r1,#0xa
006d56  48cc              LDR      r0,|L1.28808|
006d58  f7fffffe          BL       uart_putchar
006d5c  210a              MOVS     r1,#0xa
006d5e  48ca              LDR      r0,|L1.28808|
006d60  f7fffffe          BL       uart_putchar
006d64  210a              MOVS     r1,#0xa
006d66  48c8              LDR      r0,|L1.28808|
006d68  f7fffffe          BL       uart_putchar
006d6c  210a              MOVS     r1,#0xa
006d6e  48c6              LDR      r0,|L1.28808|
006d70  f7fffffe          BL       uart_putchar
006d74  210a              MOVS     r1,#0xa
006d76  48c4              LDR      r0,|L1.28808|
006d78  f7fffffe          BL       uart_putchar
006d7c  210a              MOVS     r1,#0xa
006d7e  48c2              LDR      r0,|L1.28808|
006d80  f7fffffe          BL       uart_putchar
006d84  210a              MOVS     r1,#0xa
006d86  48c0              LDR      r0,|L1.28808|
006d88  f7fffffe          BL       uart_putchar
006d8c  210a              MOVS     r1,#0xa
006d8e  48be              LDR      r0,|L1.28808|
006d90  f7fffffe          BL       uart_putchar
006d94  210a              MOVS     r1,#0xa
006d96  48bc              LDR      r0,|L1.28808|
006d98  f7fffffe          BL       uart_putchar
006d9c  210a              MOVS     r1,#0xa
006d9e  48ba              LDR      r0,|L1.28808|
006da0  f7fffffe          BL       uart_putchar
006da4  210a              MOVS     r1,#0xa
006da6  48b8              LDR      r0,|L1.28808|
006da8  f7fffffe          BL       uart_putchar
006dac  210a              MOVS     r1,#0xa
006dae  48b6              LDR      r0,|L1.28808|
006db0  f7fffffe          BL       uart_putchar
006db4  210a              MOVS     r1,#0xa
006db6  48b4              LDR      r0,|L1.28808|
006db8  f7fffffe          BL       uart_putchar
006dbc  210a              MOVS     r1,#0xa
006dbe  48b2              LDR      r0,|L1.28808|
006dc0  f7fffffe          BL       uart_putchar
006dc4  210a              MOVS     r1,#0xa
006dc6  48b0              LDR      r0,|L1.28808|
006dc8  f7fffffe          BL       uart_putchar
006dcc  210a              MOVS     r1,#0xa
006dce  48ae              LDR      r0,|L1.28808|
006dd0  f7fffffe          BL       uart_putchar
006dd4  210a              MOVS     r1,#0xa
006dd6  48ac              LDR      r0,|L1.28808|
006dd8  f7fffffe          BL       uart_putchar
006ddc  210a              MOVS     r1,#0xa
006dde  48aa              LDR      r0,|L1.28808|
006de0  f7fffffe          BL       uart_putchar
006de4  210a              MOVS     r1,#0xa
006de6  48a8              LDR      r0,|L1.28808|
006de8  f7fffffe          BL       uart_putchar
006dec  210a              MOVS     r1,#0xa
006dee  48a6              LDR      r0,|L1.28808|
006df0  f7fffffe          BL       uart_putchar
006df4  210a              MOVS     r1,#0xa
006df6  48a4              LDR      r0,|L1.28808|
006df8  f7fffffe          BL       uart_putchar
006dfc  210a              MOVS     r1,#0xa
006dfe  48a2              LDR      r0,|L1.28808|
006e00  f7fffffe          BL       uart_putchar
006e04  210a              MOVS     r1,#0xa
006e06  48a0              LDR      r0,|L1.28808|
006e08  f7fffffe          BL       uart_putchar
006e0c  210a              MOVS     r1,#0xa
006e0e  489e              LDR      r0,|L1.28808|
006e10  f7fffffe          BL       uart_putchar
006e14  210a              MOVS     r1,#0xa
006e16  489c              LDR      r0,|L1.28808|
006e18  f7fffffe          BL       uart_putchar
006e1c  210a              MOVS     r1,#0xa
006e1e  489a              LDR      r0,|L1.28808|
006e20  f7fffffe          BL       uart_putchar
006e24  210a              MOVS     r1,#0xa
006e26  4898              LDR      r0,|L1.28808|
006e28  f7fffffe          BL       uart_putchar
006e2c  210a              MOVS     r1,#0xa
006e2e  4896              LDR      r0,|L1.28808|
006e30  f7fffffe          BL       uart_putchar
006e34  210a              MOVS     r1,#0xa
006e36  4894              LDR      r0,|L1.28808|
006e38  f7fffffe          BL       uart_putchar
006e3c  210a              MOVS     r1,#0xa
006e3e  4892              LDR      r0,|L1.28808|
006e40  f7fffffe          BL       uart_putchar
006e44  210a              MOVS     r1,#0xa
006e46  4890              LDR      r0,|L1.28808|
006e48  f7fffffe          BL       uart_putchar
006e4c  210a              MOVS     r1,#0xa
006e4e  488e              LDR      r0,|L1.28808|
006e50  f7fffffe          BL       uart_putchar
;;;939    											//memset(data,0,1000);
;;;940    											//timer counts to wait for characters in uart 1 									
;;;941    											while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
006e54  bf00              NOP      
                  |L1.28246|
006e56  498d              LDR      r1,|L1.28812|
006e58  488d              LDR      r0,|L1.28816|
006e5a  f7fffffe          BL       strstr
006e5e  2800              CMP      r0,#0
006e60  d109              BNE      |L1.28278|
006e62  498c              LDR      r1,|L1.28820|
006e64  488a              LDR      r0,|L1.28816|
006e66  f7fffffe          BL       strstr
006e6a  2800              CMP      r0,#0
006e6c  d103              BNE      |L1.28278|
006e6e  488a              LDR      r0,|L1.28824|
006e70  6800              LDR      r0,[r0,#0]  ; tout
006e72  2805              CMP      r0,#5
006e74  ddef              BLE      |L1.28246|
                  |L1.28278|
;;;942    											{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;943    											}
;;;944    											clear();//uart_putchar(UART1_BASE_PTR,0x1a);
006e76  f7fffffe          BL       clear
;;;945    											memset(data,0,strlen(data));
006e7a  4888              LDR      r0,|L1.28828|
006e7c  f7fffffe          BL       strlen
006e80  4601              MOV      r1,r0
006e82  9001              STR      r0,[sp,#4]
006e84  4885              LDR      r0,|L1.28828|
006e86  f7fffffe          BL       __aeabi_memclr
;;;946    											clear();
006e8a  f7fffffe          BL       clear
006e8e  e001              B        |L1.28308|
                  |L1.28304|
;;;947    										//log_it();			//otherwize log it					
;;;948    									}
;;;949    } // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;950    else
;;;951    {
;;;952    	send_chunk();
006e90  f7fffffe          BL       send_chunk
                  |L1.28308|
006e94  f7fefe58          BL       |L1.23368|
;;;953    }		
;;;954    /******************sleep checker end**********************/		
;;;955    		}
;;;956    /******************while end**********************/		
;;;957    	} 
;;;958    /******************main end***********************/
;;;959    }
;;;960    /********************************************************************/
                          ENDP

                  HardFault_Handler PROC
;;;972    
;;;973    void HardFault_Handler()
006e98  2000              MOVS     r0,#0
;;;974    {	long ppp=0;
;;;975    //		vectkeyVal=0x5fa;
;;;976    //		vectkeyVal=vectkeyVal<<16;
;;;977    //		SCB->AIRCR |= vectkeyVal;
;;;978    //		SCB->AIRCR |= 4;
;;;979    //while(1);	
;;;980    	
;;;981    	RESET_OFF;
006e9a  2120              MOVS     r1,#0x20
006e9c  4a80              LDR      r2,|L1.28832|
006e9e  6091              STR      r1,[r2,#8]
;;;982    	RESET_OFF;
006ea0  6091              STR      r1,[r2,#8]
;;;983    for(ppp=0;ppp<9999999; ppp++);	
006ea2  bf00              NOP      
006ea4  e000              B        |L1.28328|
                  |L1.28326|
006ea6  1c40              ADDS     r0,r0,#1
                  |L1.28328|
006ea8  497e              LDR      r1,|L1.28836|
006eaa  4288              CMP      r0,r1
006eac  dbfb              BLT      |L1.28326|
;;;984    	
;;;985    	RESET_ON;
006eae  2120              MOVS     r1,#0x20
006eb0  4a7b              LDR      r2,|L1.28832|
006eb2  6051              STR      r1,[r2,#4]
;;;986    	RESET_ON;
006eb4  6051              STR      r1,[r2,#4]
;;;987    for(ppp=0;ppp<9999999; ppp++);
006eb6  2000              MOVS     r0,#0
006eb8  e000              B        |L1.28348|
                  |L1.28346|
006eba  1c40              ADDS     r0,r0,#1
                  |L1.28348|
006ebc  4979              LDR      r1,|L1.28836|
006ebe  4288              CMP      r0,r1
006ec0  dbfb              BLT      |L1.28346|
;;;988    }
006ec2  4770              BX       lr
;;;989    
                          ENDP

                  LPTimer_IRQHandler PROC
;;;990    
;;;991    void LPTimer_IRQHandler(void)
006ec4  4878              LDR      r0,|L1.28840|
;;;992    {
;;;993    lpticks+=1;
006ec6  6800              LDR      r0,[r0,#0]  ; lpticks
006ec8  1c40              ADDS     r0,r0,#1
006eca  4977              LDR      r1,|L1.28840|
006ecc  6008              STR      r0,[r1,#0]  ; lpticks
;;;994    //rtcticks++;
;;;995    	tout++;tout2++;
006ece  4872              LDR      r0,|L1.28824|
006ed0  6800              LDR      r0,[r0,#0]  ; tout
006ed2  1c40              ADDS     r0,r0,#1
006ed4  4970              LDR      r1,|L1.28824|
006ed6  6008              STR      r0,[r1,#0]  ; tout
006ed8  4874              LDR      r0,|L1.28844|
006eda  6800              LDR      r0,[r0,#0]  ; tout2
006edc  1c40              ADDS     r0,r0,#1
006ede  4973              LDR      r1,|L1.28844|
006ee0  6008              STR      r0,[r1,#0]  ; tout2
;;;996    	rtcticks2++;
006ee2  4873              LDR      r0,|L1.28848|
006ee4  6800              LDR      r0,[r0,#0]  ; rtcticks2
006ee6  1c40              ADDS     r0,r0,#1
006ee8  4971              LDR      r1,|L1.28848|
006eea  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;997    	if(sleep_flag == 1){aliveping++;}
006eec  4871              LDR      r0,|L1.28852|
006eee  6800              LDR      r0,[r0,#0]  ; sleep_flag
006ef0  2801              CMP      r0,#1
006ef2  d104              BNE      |L1.28414|
006ef4  4870              LDR      r0,|L1.28856|
006ef6  6800              LDR      r0,[r0,#0]  ; aliveping
006ef8  1c40              ADDS     r0,r0,#1
006efa  496f              LDR      r1,|L1.28856|
006efc  6008              STR      r0,[r1,#0]  ; aliveping
                  |L1.28414|
;;;998    
;;;999      LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
006efe  486f              LDR      r0,|L1.28860|
006f00  6800              LDR      r0,[r0,#0]
006f02  2180              MOVS     r1,#0x80
006f04  4308              ORRS     r0,r0,r1
006f06  496d              LDR      r1,|L1.28860|
006f08  6008              STR      r0,[r1,#0]
;;;1000     LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
006f0a  20c1              MOVS     r0,#0xc1
006f0c  6008              STR      r0,[r1,#0]
;;;1001     
;;;1002   }
006f0e  4770              BX       lr
;;;1003   
                          ENDP

                  dtr_sleep PROC
;;;1005   
;;;1006   void dtr_sleep()
006f10  b538              PUSH     {r3-r5,lr}
;;;1007   {
;;;1008   
;;;1009   test2=GPIOB_PDIR;
006f12  4863              LDR      r0,|L1.28832|
006f14  3840              SUBS     r0,r0,#0x40
006f16  6900              LDR      r0,[r0,#0x10]
006f18  4969              LDR      r1,|L1.28864|
006f1a  6008              STR      r0,[r1,#0]  ; test2
;;;1010   memset(at_,0,strlen(at_));
006f1c  4869              LDR      r0,|L1.28868|
006f1e  f7fffffe          BL       strlen
006f22  4604              MOV      r4,r0
006f24  4621              MOV      r1,r4
006f26  4867              LDR      r0,|L1.28868|
006f28  f7fffffe          BL       __aeabi_memclr
;;;1011   sprintf(at_,"\n\n\n GPIOB = %d \n\n\n ",test2);	
006f2c  4864              LDR      r0,|L1.28864|
006f2e  a166              ADR      r1,|L1.28872|
006f30  6802              LDR      r2,[r0,#0]  ; test2
006f32  4864              LDR      r0,|L1.28868|
006f34  f7fffffe          BL       __2sprintf
;;;1012   send_modem(at_);
006f38  4862              LDR      r0,|L1.28868|
006f3a  f7fffffe          BL       send_modem
;;;1013   if( test2 == 0 )	
006f3e  4860              LDR      r0,|L1.28864|
006f40  6800              LDR      r0,[r0,#0]  ; test2
006f42  2800              CMP      r0,#0
006f44  d107              BNE      |L1.28502|
;;;1014   {
;;;1015   	sleep_flag=1;	
006f46  2001              MOVS     r0,#1
006f48  495a              LDR      r1,|L1.28852|
006f4a  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1016   	DTR_ON;   //sleep
006f4c  2080              MOVS     r0,#0x80
006f4e  4954              LDR      r1,|L1.28832|
006f50  3140              ADDS     r1,r1,#0x40
006f52  6048              STR      r0,[r1,#4]
006f54  e02e              B        |L1.28596|
                  |L1.28502|
;;;1017   
;;;1018   }
;;;1019   else
;;;1020   {DTR_OFF;
006f56  2080              MOVS     r0,#0x80
006f58  4951              LDR      r1,|L1.28832|
006f5a  3140              ADDS     r1,r1,#0x40
006f5c  6088              STR      r0,[r1,#8]
;;;1021   	
;;;1022   	if (sleep_flag != 0  )
006f5e  4855              LDR      r0,|L1.28852|
006f60  6800              LDR      r0,[r0,#0]  ; sleep_flag
006f62  2800              CMP      r0,#0
006f64  d022              BEQ      |L1.28588|
;;;1023   	{
;;;1024   	// wakeup and reset
;;;1025   		sleep_flag=0;
006f66  2000              MOVS     r0,#0
006f68  4952              LDR      r1,|L1.28852|
006f6a  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1026       		// not sleep	
;;;1027   //	  HardFault_Handler();
;;;1028   delay(1000);
006f6c  207d              MOVS     r0,#0x7d
006f6e  00c0              LSLS     r0,r0,#3
006f70  f7fffffe          BL       delay
;;;1029   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
006f74  4859              LDR      r0,|L1.28892|
006f76  6800              LDR      r0,[r0,#0]  ; tmeout
006f78  4b46              LDR      r3,|L1.28820|
006f7a  3b78              SUBS     r3,r3,#0x78
006f7c  461a              MOV      r2,r3
006f7e  3208              ADDS     r2,r2,#8
006f80  4942              LDR      r1,|L1.28812|
006f82  9000              STR      r0,[sp,#0]
006f84  4856              LDR      r0,|L1.28896|
006f86  f7fffffe          BL       send_GSM
;;;1030   		
;;;1031   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
006f8a  4854              LDR      r0,|L1.28892|
006f8c  6800              LDR      r0,[r0,#0]  ; tmeout
006f8e  4b41              LDR      r3,|L1.28820|
006f90  3b78              SUBS     r3,r3,#0x78
006f92  461a              MOV      r2,r3
006f94  3208              ADDS     r2,r2,#8
006f96  493d              LDR      r1,|L1.28812|
006f98  9000              STR      r0,[sp,#0]
006f9a  a052              ADR      r0,|L1.28900|
006f9c  f7fffffe          BL       send_GSM
;;;1032   
;;;1033   //send_GSM("\n\nAT+CFUN=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;1034   		
;;;1035   delay(1000);	
006fa0  207d              MOVS     r0,#0x7d
006fa2  00c0              LSLS     r0,r0,#3
006fa4  f7fffffe          BL       delay
;;;1036   clear();	
006fa8  f7fffffe          BL       clear
                  |L1.28588|
;;;1037   	}  
;;;1038   	DTR_OFF;		// not sleep	
006fac  2080              MOVS     r0,#0x80
006fae  493c              LDR      r1,|L1.28832|
006fb0  3140              ADDS     r1,r1,#0x40
006fb2  6088              STR      r0,[r1,#8]
                  |L1.28596|
;;;1039   
;;;1040   
;;;1041   
;;;1042   }
;;;1043   
;;;1044   LED_state();LED_state2();
006fb4  f7fffffe          BL       LED_state
006fb8  f7fffffe          BL       LED_state2
;;;1045   }
006fbc  bd38              POP      {r3-r5,pc}
;;;1046   
                          ENDP

                  t3cp_initialization PROC
;;;1205   
;;;1206   int t3cp_initialization()
006fbe  b538              PUSH     {r3-r5,lr}
;;;1207   { 
;;;1208   	
;;;1209   	
;;;1210   	
;;;1211   	
;;;1212   msg_sim800(); 
006fc0  f7fffffe          BL       msg_sim800
;;;1213   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
006fc4  2005              MOVS     r0,#5
006fc6  4b33              LDR      r3,|L1.28820|
006fc8  461a              MOV      r2,r3
006fca  3a70              SUBS     r2,r2,#0x70
006fcc  a148              ADR      r1,|L1.28912|
006fce  9000              STR      r0,[sp,#0]
006fd0  482e              LDR      r0,|L1.28812|
006fd2  301c              ADDS     r0,r0,#0x1c
006fd4  f7fffffe          BL       send_GSM
;;;1214   delay(100);
006fd8  2064              MOVS     r0,#0x64
006fda  f7fffffe          BL       delay
;;;1215   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
006fde  2004              MOVS     r0,#4
006fe0  4b2c              LDR      r3,|L1.28820|
006fe2  4a2a              LDR      r2,|L1.28812|
006fe4  322c              ADDS     r2,r2,#0x2c
006fe6  a142              ADR      r1,|L1.28912|
006fe8  9000              STR      r0,[sp,#0]
006fea  4610              MOV      r0,r2
006fec  3014              ADDS     r0,r0,#0x14
006fee  f7fffffe          BL       send_GSM
;;;1216   GPS_COLLECT2();
006ff2  f7fffffe          BL       GPS_COLLECT2
;;;1217   strcat(data,"CH\n");		
006ff6  4925              LDR      r1,|L1.28812|
006ff8  3944              SUBS     r1,r1,#0x44
006ffa  4828              LDR      r0,|L1.28828|
006ffc  f7fffffe          BL       strcat
;;;1218   GPS_COLLECT2();
007000  f7fffffe          BL       GPS_COLLECT2
;;;1219   strcat(data,"CH\n");	
007004  4921              LDR      r1,|L1.28812|
007006  3944              SUBS     r1,r1,#0x44
007008  4824              LDR      r0,|L1.28828|
00700a  f7fffffe          BL       strcat
;;;1220   GPS_COLLECT2();
00700e  f7fffffe          BL       GPS_COLLECT2
;;;1221   strcat(data,"CH\n");
007012  491e              LDR      r1,|L1.28812|
007014  3944              SUBS     r1,r1,#0x44
007016  4821              LDR      r0,|L1.28828|
007018  f7fffffe          BL       strcat
;;;1222   cond201=(strstr(uart_string_gsm, "OK"));
00701c  a134              ADR      r1,|L1.28912|
00701e  481c              LDR      r0,|L1.28816|
007020  f7fffffe          BL       strstr
007024  4933              LDR      r1,|L1.28916|
007026  6008              STR      r0,[r1,#0]  ; cond201
;;;1223   cond200=(strstr(uart_string_gsm, "ERROR"));
007028  491a              LDR      r1,|L1.28820|
00702a  4819              LDR      r0,|L1.28816|
00702c  f7fffffe          BL       strstr
007030  4931              LDR      r1,|L1.28920|
007032  6008              STR      r0,[r1,#0]  ; cond200
;;;1224   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
007034  482f              LDR      r0,|L1.28916|
007036  6800              LDR      r0,[r0,#0]  ; cond201
007038  2800              CMP      r0,#0
00703a  d101              BNE      |L1.28736|
00703c  2001              MOVS     r0,#1
00703e  e000              B        |L1.28738|
                  |L1.28736|
007040  2000              MOVS     r0,#0
                  |L1.28738|
007042  2800              CMP      r0,#0
                  |L1.28740|
007044  d071              BEQ      |L1.28970|
007046  482c              LDR      r0,|L1.28920|
007048  6800              LDR      r0,[r0,#0]  ; cond200
00704a  2800              CMP      r0,#0
00704c  d101              BNE      |L1.28754|
00704e  2001              MOVS     r0,#1
007050  e000              B        |L1.28756|
                  |L1.28754|
007052  2000              MOVS     r0,#0
                  |L1.28756|
007054  2800              CMP      r0,#0
007056  d0f5              BEQ      |L1.28740|
007058  4816              LDR      r0,|L1.28852|
00705a  6800              LDR      r0,[r0,#0]  ; sleep_flag
00705c  2801              CMP      r0,#1
00705e  d0f1              BEQ      |L1.28740|
;;;1225   {
;;;1226   delay(100);
007060  2064              MOVS     r0,#0x64
007062  f7fffffe          BL       delay
;;;1227   clear();//memset(uart_string_gsm,0,5000);
007066  f7fffffe          BL       clear
;;;1228   memset(at_,0,100);
00706a  2164              MOVS     r1,#0x64
00706c  4815              LDR      r0,|L1.28868|
00706e  f7fffffe          BL       __aeabi_memclr
;;;1229   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
007072  480a              LDR      r0,|L1.28828|
007074  f7fffffe          BL       strlen
007078  1c44              ADDS     r4,r0,#1
00707a  4623              MOV      r3,r4
00707c  4a1f              LDR      r2,|L1.28924|
00707e  4903              LDR      r1,|L1.28812|
007080  3938              SUBS     r1,r1,#0x38
007082  4810              LDR      r0,|L1.28868|
007084  e03c              B        |L1.28928|
007086  0000              DCW      0x0000
                  |L1.28808|
                          DCD      0x4006b000
                  |L1.28812|
                          DCD      ||.text||+0xd88
                  |L1.28816|
                          DCD      uart_string_gsm
                  |L1.28820|
                          DCD      ||.text||+0x910
                  |L1.28824|
                          DCD      tout
                  |L1.28828|
                          DCD      data
                  |L1.28832|
                          DCD      0x400ff080
                  |L1.28836|
                          DCD      0x0098967f
                  |L1.28840|
                          DCD      lpticks
                  |L1.28844|
                          DCD      tout2
                  |L1.28848|
                          DCD      rtcticks2
                  |L1.28852|
                          DCD      sleep_flag
                  |L1.28856|
                          DCD      aliveping
                  |L1.28860|
                          DCD      0x40040000
                  |L1.28864|
                          DCD      test2
                  |L1.28868|
                          DCD      at_
                  |L1.28872|
0070c8  0a0a0a20          DCB      "\n\n\n GPIOB = %d \n\n\n ",0
0070cc  4750494f
0070d0  42203d20
0070d4  2564200a
0070d8  0a0a2000
                  |L1.28892|
                          DCD      tmeout
                  |L1.28896|
                          DCD      ||.text||+0x4ae8
                  |L1.28900|
0070e4  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
0070e8  2b475356
0070ec  0d0a00  
0070ef  00                DCB      0
                  |L1.28912|
0070f0  4f4b00            DCB      "OK",0
0070f3  00                DCB      0
                  |L1.28916|
                          DCD      cond201
                  |L1.28920|
                          DCD      cond200
                  |L1.28924|
                          DCD      drive
                  |L1.28928|
007100  f7fffffe          BL       __2sprintf
;;;1230   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
007104  2005              MOVS     r0,#5
007106  4bfe              LDR      r3,|L1.29952|
007108  461a              MOV      r2,r3
00710a  3a70              SUBS     r2,r2,#0x70
00710c  a1fd              ADR      r1,|L1.29956|
00710e  9000              STR      r0,[sp,#0]
007110  48fd              LDR      r0,|L1.29960|
007112  f7fffffe          BL       send_SD
;;;1231   clear();	
007116  f7fffffe          BL       clear
;;;1232   k2=0;									//string array counter for uart 1
00711a  2000              MOVS     r0,#0
00711c  49fb              LDR      r1,|L1.29964|
00711e  6008              STR      r0,[r1,#0]  ; k2
;;;1233   tout=0;	
007120  49fb              LDR      r1,|L1.29968|
007122  6008              STR      r0,[r1,#0]  ; tout
;;;1234   for(k=0;k<strlen(data);k++)
007124  49fb              LDR      r1,|L1.29972|
007126  6008              STR      r0,[r1,#0]  ; k
007128  e00c              B        |L1.28996|
                  |L1.28970|
00712a  e11f              B        |L1.29548|
                  |L1.28972|
;;;1235   {
;;;1236   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00712c  48fa              LDR      r0,|L1.29976|
00712e  4af9              LDR      r2,|L1.29972|
007130  6812              LDR      r2,[r2,#0]  ; k
007132  5c81              LDRB     r1,[r0,r2]
007134  48f9              LDR      r0,|L1.29980|
007136  f7fffffe          BL       uart_putchar
00713a  48f6              LDR      r0,|L1.29972|
00713c  6800              LDR      r0,[r0,#0]            ;1234  ; k
00713e  1c40              ADDS     r0,r0,#1              ;1234
007140  49f4              LDR      r1,|L1.29972|
007142  6008              STR      r0,[r1,#0]            ;1234  ; k
                  |L1.28996|
007144  48f4              LDR      r0,|L1.29976|
007146  f7fffffe          BL       strlen
00714a  49f2              LDR      r1,|L1.29972|
00714c  6809              LDR      r1,[r1,#0]            ;1234  ; k
00714e  4288              CMP      r0,r1                 ;1234
007150  d8ec              BHI      |L1.28972|
;;;1237   }	
;;;1238   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
007152  210a              MOVS     r1,#0xa
007154  48f1              LDR      r0,|L1.29980|
007156  f7fffffe          BL       uart_putchar
00715a  210a              MOVS     r1,#0xa
00715c  48ef              LDR      r0,|L1.29980|
00715e  f7fffffe          BL       uart_putchar
007162  210a              MOVS     r1,#0xa
007164  48ed              LDR      r0,|L1.29980|
007166  f7fffffe          BL       uart_putchar
00716a  210a              MOVS     r1,#0xa
00716c  48eb              LDR      r0,|L1.29980|
00716e  f7fffffe          BL       uart_putchar
007172  210a              MOVS     r1,#0xa
007174  48e9              LDR      r0,|L1.29980|
007176  f7fffffe          BL       uart_putchar
00717a  210a              MOVS     r1,#0xa
00717c  48e7              LDR      r0,|L1.29980|
00717e  f7fffffe          BL       uart_putchar
007182  210a              MOVS     r1,#0xa
007184  48e5              LDR      r0,|L1.29980|
007186  f7fffffe          BL       uart_putchar
00718a  210a              MOVS     r1,#0xa
00718c  48e3              LDR      r0,|L1.29980|
00718e  f7fffffe          BL       uart_putchar
007192  210a              MOVS     r1,#0xa
007194  48e1              LDR      r0,|L1.29980|
007196  f7fffffe          BL       uart_putchar
00719a  210a              MOVS     r1,#0xa
00719c  48df              LDR      r0,|L1.29980|
00719e  f7fffffe          BL       uart_putchar
0071a2  210a              MOVS     r1,#0xa
0071a4  48dd              LDR      r0,|L1.29980|
0071a6  f7fffffe          BL       uart_putchar
0071aa  210a              MOVS     r1,#0xa
0071ac  48db              LDR      r0,|L1.29980|
0071ae  f7fffffe          BL       uart_putchar
0071b2  210a              MOVS     r1,#0xa
0071b4  48d9              LDR      r0,|L1.29980|
0071b6  f7fffffe          BL       uart_putchar
0071ba  210a              MOVS     r1,#0xa
0071bc  48d7              LDR      r0,|L1.29980|
0071be  f7fffffe          BL       uart_putchar
0071c2  210a              MOVS     r1,#0xa
0071c4  48d5              LDR      r0,|L1.29980|
0071c6  f7fffffe          BL       uart_putchar
0071ca  210a              MOVS     r1,#0xa
0071cc  48d3              LDR      r0,|L1.29980|
0071ce  f7fffffe          BL       uart_putchar
0071d2  210a              MOVS     r1,#0xa
0071d4  48d1              LDR      r0,|L1.29980|
0071d6  f7fffffe          BL       uart_putchar
0071da  210a              MOVS     r1,#0xa
0071dc  48cf              LDR      r0,|L1.29980|
0071de  f7fffffe          BL       uart_putchar
0071e2  210a              MOVS     r1,#0xa
0071e4  48cd              LDR      r0,|L1.29980|
0071e6  f7fffffe          BL       uart_putchar
0071ea  210a              MOVS     r1,#0xa
0071ec  48cb              LDR      r0,|L1.29980|
0071ee  f7fffffe          BL       uart_putchar
0071f2  210a              MOVS     r1,#0xa
0071f4  48c9              LDR      r0,|L1.29980|
0071f6  f7fffffe          BL       uart_putchar
0071fa  210a              MOVS     r1,#0xa
0071fc  48c7              LDR      r0,|L1.29980|
0071fe  f7fffffe          BL       uart_putchar
007202  210a              MOVS     r1,#0xa
007204  48c5              LDR      r0,|L1.29980|
007206  f7fffffe          BL       uart_putchar
00720a  210a              MOVS     r1,#0xa
00720c  48c3              LDR      r0,|L1.29980|
00720e  f7fffffe          BL       uart_putchar
007212  210a              MOVS     r1,#0xa
007214  48c1              LDR      r0,|L1.29980|
007216  f7fffffe          BL       uart_putchar
00721a  210a              MOVS     r1,#0xa
00721c  48bf              LDR      r0,|L1.29980|
00721e  f7fffffe          BL       uart_putchar
007222  210a              MOVS     r1,#0xa
007224  48bd              LDR      r0,|L1.29980|
007226  f7fffffe          BL       uart_putchar
00722a  210a              MOVS     r1,#0xa
00722c  48bb              LDR      r0,|L1.29980|
00722e  f7fffffe          BL       uart_putchar
007232  210a              MOVS     r1,#0xa
007234  48b9              LDR      r0,|L1.29980|
007236  f7fffffe          BL       uart_putchar
00723a  210a              MOVS     r1,#0xa
00723c  48b7              LDR      r0,|L1.29980|
00723e  f7fffffe          BL       uart_putchar
007242  210a              MOVS     r1,#0xa
007244  48b5              LDR      r0,|L1.29980|
007246  f7fffffe          BL       uart_putchar
00724a  210a              MOVS     r1,#0xa
00724c  48b3              LDR      r0,|L1.29980|
00724e  f7fffffe          BL       uart_putchar
007252  210a              MOVS     r1,#0xa
007254  48b1              LDR      r0,|L1.29980|
007256  f7fffffe          BL       uart_putchar
00725a  210a              MOVS     r1,#0xa
00725c  48af              LDR      r0,|L1.29980|
00725e  f7fffffe          BL       uart_putchar
007262  210a              MOVS     r1,#0xa
007264  48ad              LDR      r0,|L1.29980|
007266  f7fffffe          BL       uart_putchar
00726a  210a              MOVS     r1,#0xa
00726c  48ab              LDR      r0,|L1.29980|
00726e  f7fffffe          BL       uart_putchar
007272  210a              MOVS     r1,#0xa
007274  48a9              LDR      r0,|L1.29980|
007276  f7fffffe          BL       uart_putchar
00727a  210a              MOVS     r1,#0xa
00727c  48a7              LDR      r0,|L1.29980|
00727e  f7fffffe          BL       uart_putchar
007282  210a              MOVS     r1,#0xa
007284  48a5              LDR      r0,|L1.29980|
007286  f7fffffe          BL       uart_putchar
00728a  210a              MOVS     r1,#0xa
00728c  48a3              LDR      r0,|L1.29980|
00728e  f7fffffe          BL       uart_putchar
007292  210a              MOVS     r1,#0xa
007294  48a1              LDR      r0,|L1.29980|
007296  f7fffffe          BL       uart_putchar
00729a  210a              MOVS     r1,#0xa
00729c  489f              LDR      r0,|L1.29980|
00729e  f7fffffe          BL       uart_putchar
0072a2  210a              MOVS     r1,#0xa
0072a4  489d              LDR      r0,|L1.29980|
0072a6  f7fffffe          BL       uart_putchar
0072aa  210a              MOVS     r1,#0xa
0072ac  489b              LDR      r0,|L1.29980|
0072ae  f7fffffe          BL       uart_putchar
0072b2  210a              MOVS     r1,#0xa
0072b4  4899              LDR      r0,|L1.29980|
0072b6  f7fffffe          BL       uart_putchar
0072ba  210a              MOVS     r1,#0xa
0072bc  4897              LDR      r0,|L1.29980|
0072be  f7fffffe          BL       uart_putchar
0072c2  210a              MOVS     r1,#0xa
0072c4  4895              LDR      r0,|L1.29980|
0072c6  f7fffffe          BL       uart_putchar
0072ca  210a              MOVS     r1,#0xa
0072cc  4893              LDR      r0,|L1.29980|
0072ce  f7fffffe          BL       uart_putchar
0072d2  210a              MOVS     r1,#0xa
0072d4  4891              LDR      r0,|L1.29980|
0072d6  f7fffffe          BL       uart_putchar
0072da  210a              MOVS     r1,#0xa
0072dc  488f              LDR      r0,|L1.29980|
0072de  f7fffffe          BL       uart_putchar
0072e2  210a              MOVS     r1,#0xa
0072e4  488d              LDR      r0,|L1.29980|
0072e6  f7fffffe          BL       uart_putchar
0072ea  210a              MOVS     r1,#0xa
0072ec  488b              LDR      r0,|L1.29980|
0072ee  f7fffffe          BL       uart_putchar
0072f2  210a              MOVS     r1,#0xa
0072f4  4889              LDR      r0,|L1.29980|
0072f6  f7fffffe          BL       uart_putchar
0072fa  210a              MOVS     r1,#0xa
0072fc  4887              LDR      r0,|L1.29980|
0072fe  f7fffffe          BL       uart_putchar
007302  210a              MOVS     r1,#0xa
007304  4885              LDR      r0,|L1.29980|
007306  f7fffffe          BL       uart_putchar
00730a  210a              MOVS     r1,#0xa
00730c  4883              LDR      r0,|L1.29980|
00730e  f7fffffe          BL       uart_putchar
007312  210a              MOVS     r1,#0xa
007314  4881              LDR      r0,|L1.29980|
007316  f7fffffe          BL       uart_putchar
;;;1239   									//memset(data,0,1000);
;;;1240   														//timer counts to wait for characters in uart 1 									
;;;1241   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00731a  bf00              NOP      
                  |L1.29468|
00731c  4980              LDR      r1,|L1.29984|
00731e  4881              LDR      r0,|L1.29988|
007320  f7fffffe          BL       strstr
007324  2800              CMP      r0,#0
007326  d109              BNE      |L1.29500|
007328  4975              LDR      r1,|L1.29952|
00732a  487e              LDR      r0,|L1.29988|
00732c  f7fffffe          BL       strstr
007330  2800              CMP      r0,#0
007332  d103              BNE      |L1.29500|
007334  4876              LDR      r0,|L1.29968|
007336  6800              LDR      r0,[r0,#0]  ; tout
007338  2805              CMP      r0,#5
00733a  ddef              BLE      |L1.29468|
                  |L1.29500|
;;;1242   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1243   									}
;;;1244   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00733c  f7fffffe          BL       clear
;;;1245   									//clear();
;;;1246   									memset(data,0,strlen(data));
007340  4875              LDR      r0,|L1.29976|
007342  f7fffffe          BL       strlen
007346  4604              MOV      r4,r0
007348  4621              MOV      r1,r4
00734a  4873              LDR      r0,|L1.29976|
00734c  f7fffffe          BL       __aeabi_memclr
;;;1247   									clear();
007350  f7fffffe          BL       clear
;;;1248   									RESET_OFF;delay(100);
007354  2020              MOVS     r0,#0x20
007356  4974              LDR      r1,|L1.29992|
007358  6088              STR      r0,[r1,#8]
00735a  2064              MOVS     r0,#0x64
00735c  f7fffffe          BL       delay
;;;1249   									RESET_ON;delay(100);		
007360  2020              MOVS     r0,#0x20
007362  4971              LDR      r1,|L1.29992|
007364  6048              STR      r0,[r1,#4]
007366  2064              MOVS     r0,#0x64
007368  f7fffffe          BL       delay
                  |L1.29548|
;;;1250   }
;;;1251   	
;;;1252   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
00736c  2004              MOVS     r0,#4
00736e  4b64              LDR      r3,|L1.29952|
007370  3b78              SUBS     r3,r3,#0x78
007372  461a              MOV      r2,r3
007374  3208              ADDS     r2,r2,#8
007376  a16d              ADR      r1,|L1.29996|
007378  9000              STR      r0,[sp,#0]
00737a  486d              LDR      r0,|L1.30000|
00737c  f7fffffe          BL       send_GSM
;;;1253   GPS_COLLECT2();
007380  f7fffffe          BL       GPS_COLLECT2
;;;1254   strcat(data,"CH\n");	
007384  4966              LDR      r1,|L1.29984|
007386  3944              SUBS     r1,r1,#0x44
007388  4863              LDR      r0,|L1.29976|
00738a  f7fffffe          BL       strcat
;;;1255   memset(at_,0,100);
00738e  2164              MOVS     r1,#0x64
007390  485d              LDR      r0,|L1.29960|
007392  f7fffffe          BL       __aeabi_memclr
;;;1256   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
007396  4a67              LDR      r2,|L1.30004|
007398  4965              LDR      r1,|L1.30000|
00739a  3118              ADDS     r1,r1,#0x18
00739c  485a              LDR      r0,|L1.29960|
00739e  f7fffffe          BL       __2sprintf
;;;1257   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
0073a2  4865              LDR      r0,|L1.30008|
0073a4  6800              LDR      r0,[r0,#0]  ; tmeout
0073a6  4b56              LDR      r3,|L1.29952|
0073a8  3b78              SUBS     r3,r3,#0x78
0073aa  461a              MOV      r2,r3
0073ac  3208              ADDS     r2,r2,#8
0073ae  a15f              ADR      r1,|L1.29996|
0073b0  9000              STR      r0,[sp,#0]
0073b2  4855              LDR      r0,|L1.29960|
0073b4  f7fffffe          BL       send_GSM
;;;1258   msg_sim800(); 
0073b8  f7fffffe          BL       msg_sim800
;;;1259   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
0073bc  2004              MOVS     r0,#4
0073be  4b50              LDR      r3,|L1.29952|
0073c0  3318              ADDS     r3,r3,#0x18
0073c2  461a              MOV      r2,r3
0073c4  3a88              SUBS     r2,r2,#0x88
0073c6  a159              ADR      r1,|L1.29996|
0073c8  9000              STR      r0,[sp,#0]
0073ca  4859              LDR      r0,|L1.30000|
0073cc  3030              ADDS     r0,r0,#0x30
0073ce  f7fffffe          BL       send_GSM
;;;1260   GPS_COLLECT2();
0073d2  f7fffffe          BL       GPS_COLLECT2
;;;1261   strcat(data,"CH\n");	
0073d6  4952              LDR      r1,|L1.29984|
0073d8  3944              SUBS     r1,r1,#0x44
0073da  484f              LDR      r0,|L1.29976|
0073dc  f7fffffe          BL       strcat
;;;1262   GPS_COLLECT2();
0073e0  f7fffffe          BL       GPS_COLLECT2
;;;1263   strcat(data,"CH\n");	
0073e4  494e              LDR      r1,|L1.29984|
0073e6  3944              SUBS     r1,r1,#0x44
0073e8  484b              LDR      r0,|L1.29976|
0073ea  f7fffffe          BL       strcat
;;;1264   
;;;1265   
;;;1266   msg_sim800(); 
0073ee  f7fffffe          BL       msg_sim800
;;;1267   GPS_COLLECT2();
0073f2  f7fffffe          BL       GPS_COLLECT2
;;;1268   strcat(data,"CH\n");	
0073f6  494a              LDR      r1,|L1.29984|
0073f8  3944              SUBS     r1,r1,#0x44
0073fa  4847              LDR      r0,|L1.29976|
0073fc  f7fffffe          BL       strcat
;;;1269   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
007400  f7fffffe          BL       clear
007404  484a              LDR      r0,|L1.30000|
007406  3040              ADDS     r0,r0,#0x40
007408  f7fffffe          BL       send_modem
00740c  f7fffffe          BL       clear
;;;1270   					delay(20);
007410  2014              MOVS     r0,#0x14
007412  f7fffffe          BL       delay
;;;1271   
;;;1272   
;;;1273   msg_sim800(); 
007416  f7fffffe          BL       msg_sim800
;;;1274   
;;;1275   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
00741a  4b48              LDR      r3,|L1.30012|
00741c  4a48              LDR      r2,|L1.30016|
00741e  4944              LDR      r1,|L1.30000|
007420  3158              ADDS     r1,r1,#0x58
007422  4839              LDR      r0,|L1.29960|
007424  f7fffffe          BL       __2sprintf
;;;1276   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
007428  4843              LDR      r0,|L1.30008|
00742a  6800              LDR      r0,[r0,#0]  ; tmeout
00742c  4b34              LDR      r3,|L1.29952|
00742e  3b78              SUBS     r3,r3,#0x78
007430  4a33              LDR      r2,|L1.29952|
007432  493f              LDR      r1,|L1.30000|
007434  3178              ADDS     r1,r1,#0x78
007436  9000              STR      r0,[sp,#0]
007438  4833              LDR      r0,|L1.29960|
00743a  f7fffffe          BL       send_GSM
;;;1277   						clear();
00743e  f7fffffe          BL       clear
;;;1278   						
;;;1279   						
;;;1280   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
007442  483d              LDR      r0,|L1.30008|
007444  6800              LDR      r0,[r0,#0]  ; tmeout
007446  4b3a              LDR      r3,|L1.30000|
007448  3380              ADDS     r3,r3,#0x80
00744a  4a2d              LDR      r2,|L1.29952|
00744c  a12d              ADR      r1,|L1.29956|
00744e  9000              STR      r0,[sp,#0]
007450  4618              MOV      r0,r3
007452  3014              ADDS     r0,r0,#0x14
007454  f7fffffe          BL       send_GSM
;;;1281   
;;;1282   return 0;
007458  2000              MOVS     r0,#0
;;;1283   }
00745a  bd38              POP      {r3-r5,pc}
;;;1284   
                          ENDP

                  t3cp_initialization2 PROC
;;;1285   
;;;1286   void t3cp_initialization2()
00745c  b538              PUSH     {r3-r5,lr}
;;;1287   {
;;;1288   msg_sim800(); 
00745e  f7fffffe          BL       msg_sim800
;;;1289   
;;;1290   								//GPS_COLLECT();
;;;1291   								send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",5);	
007462  2005              MOVS     r0,#5
007464  4b26              LDR      r3,|L1.29952|
007466  3b78              SUBS     r3,r3,#0x78
007468  461a              MOV      r2,r3
00746a  3208              ADDS     r2,r2,#8
00746c  a12f              ADR      r1,|L1.29996|
00746e  9000              STR      r0,[sp,#0]
007470  482f              LDR      r0,|L1.30000|
007472  f7fffffe          BL       send_GSM
;;;1292   								//delay(20);		
;;;1293   								GPS_COLLECT();
007476  f7fffffe          BL       GPS_COLLECT
;;;1294   								strcat(data,"CH\n");	
00747a  4929              LDR      r1,|L1.29984|
00747c  3944              SUBS     r1,r1,#0x44
00747e  4826              LDR      r0,|L1.29976|
007480  f7fffffe          BL       strcat
;;;1295   
;;;1296   
;;;1297   msg_sim800(); 
007484  f7fffffe          BL       msg_sim800
;;;1298   
;;;1299   	memset(at_,0,100);
007488  2164              MOVS     r1,#0x64
00748a  481f              LDR      r0,|L1.29960|
00748c  f7fffffe          BL       __aeabi_memclr
;;;1300   		sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
007490  4a28              LDR      r2,|L1.30004|
007492  4927              LDR      r1,|L1.30000|
007494  3118              ADDS     r1,r1,#0x18
007496  481c              LDR      r0,|L1.29960|
007498  f7fffffe          BL       __2sprintf
;;;1301   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
00749c  4826              LDR      r0,|L1.30008|
00749e  6800              LDR      r0,[r0,#0]  ; tmeout
0074a0  4b17              LDR      r3,|L1.29952|
0074a2  3b78              SUBS     r3,r3,#0x78
0074a4  461a              MOV      r2,r3
0074a6  3208              ADDS     r2,r2,#8
0074a8  a120              ADR      r1,|L1.29996|
0074aa  9000              STR      r0,[sp,#0]
0074ac  4816              LDR      r0,|L1.29960|
0074ae  f7fffffe          BL       send_GSM
;;;1302   								//delay(20);
;;;1303   			//					GPS_COLLECT();
;;;1304   
;;;1305   msg_sim800(); 
0074b2  f7fffffe          BL       msg_sim800
;;;1306   
;;;1307   	
;;;1308   								send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
0074b6  2005              MOVS     r0,#5
0074b8  4b11              LDR      r3,|L1.29952|
0074ba  3318              ADDS     r3,r3,#0x18
0074bc  461a              MOV      r2,r3
0074be  3a88              SUBS     r2,r2,#0x88
0074c0  a11a              ADR      r1,|L1.29996|
0074c2  9000              STR      r0,[sp,#0]
0074c4  481a              LDR      r0,|L1.30000|
0074c6  3030              ADDS     r0,r0,#0x30
0074c8  f7fffffe          BL       send_GSM
;;;1309   								//delay(20);
;;;1310   								GPS_COLLECT();
0074cc  f7fffffe          BL       GPS_COLLECT
;;;1311   								strcat(data,"CH\n");	
0074d0  4913              LDR      r1,|L1.29984|
0074d2  3944              SUBS     r1,r1,#0x44
0074d4  4810              LDR      r0,|L1.29976|
0074d6  f7fffffe          BL       strcat
;;;1312   
;;;1313   
;;;1314   
;;;1315   								GPS_COLLECT();
0074da  f7fffffe          BL       GPS_COLLECT
;;;1316   								strcat(data,"CH\n");	
0074de  4910              LDR      r1,|L1.29984|
0074e0  3944              SUBS     r1,r1,#0x44
0074e2  480d              LDR      r0,|L1.29976|
0074e4  f7fffffe          BL       strcat
;;;1317   
;;;1318   msg_sim800(); 
0074e8  f7fffffe          BL       msg_sim800
;;;1319   
;;;1320   								
;;;1321   								clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0074ec  f7fffffe          BL       clear
0074f0  480f              LDR      r0,|L1.30000|
0074f2  3040              ADDS     r0,r0,#0x40
0074f4  f7fffffe          BL       send_modem
0074f8  f7fffffe          BL       clear
;;;1322   								delay(20);
0074fc  2014              MOVS     r0,#0x14
0074fe  e021              B        |L1.30020|
                  |L1.29952|
                          DCD      ||.text||+0x910
                  |L1.29956|
007504  3e00              DCB      ">",0
007506  00                DCB      0
007507  00                DCB      0
                  |L1.29960|
                          DCD      at_
                  |L1.29964|
                          DCD      ||k2||
                  |L1.29968|
                          DCD      tout
                  |L1.29972|
                          DCD      k
                  |L1.29976|
                          DCD      data
                  |L1.29980|
                          DCD      0x4006b000
                  |L1.29984|
                          DCD      ||.text||+0xd88
                  |L1.29988|
                          DCD      uart_string_gsm
                  |L1.29992|
                          DCD      0x400ff080
                  |L1.29996|
00752c  4f4b00            DCB      "OK",0
00752f  00                DCB      0
                  |L1.30000|
                          DCD      ||.text||+0x1204
                  |L1.30004|
                          DCD      apn
                  |L1.30008|
                          DCD      tmeout
                  |L1.30012|
                          DCD      port
                  |L1.30016|
                          DCD      ||ip||
                  |L1.30020|
007544  f7fffffe          BL       delay
;;;1323   	
;;;1324   
;;;1325   msg_sim800(); 
007548  f7fffffe          BL       msg_sim800
;;;1326   
;;;1327   		
;;;1328   								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
00754c  4bfc              LDR      r3,|L1.31040|
00754e  4afd              LDR      r2,|L1.31044|
007550  49fd              LDR      r1,|L1.31048|
007552  48fe              LDR      r0,|L1.31052|
007554  f7fffffe          BL       __2sprintf
;;;1329   								send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
007558  48fd              LDR      r0,|L1.31056|
00755a  6800              LDR      r0,[r0,#0]  ; tmeout
00755c  4bfd              LDR      r3,|L1.31060|
00755e  461a              MOV      r2,r3
007560  3a70              SUBS     r2,r2,#0x70
007562  49f9              LDR      r1,|L1.31048|
007564  3120              ADDS     r1,r1,#0x20
007566  9000              STR      r0,[sp,#0]
007568  48f8              LDR      r0,|L1.31052|
00756a  f7fffffe          BL       send_GSM
;;;1330   								clear();
00756e  f7fffffe          BL       clear
;;;1331   
;;;1332   								GPS_COLLECT();
007572  f7fffffe          BL       GPS_COLLECT
;;;1333   								strcat(data,"CH\n");	
007576  49f8              LDR      r1,|L1.31064|
007578  48f8              LDR      r0,|L1.31068|
00757a  f7fffffe          BL       strcat
;;;1334   
;;;1335   								send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
00757e  48f4              LDR      r0,|L1.31056|
007580  6800              LDR      r0,[r0,#0]  ; tmeout
007582  4bf1              LDR      r3,|L1.31048|
007584  3328              ADDS     r3,r3,#0x28
007586  4af3              LDR      r2,|L1.31060|
007588  a1f5              ADR      r1,|L1.31072|
00758a  9000              STR      r0,[sp,#0]
00758c  4618              MOV      r0,r3
00758e  3014              ADDS     r0,r0,#0x14
007590  f7fffffe          BL       send_GSM
;;;1336   
;;;1337   
;;;1338   memset(stcond1,0,strlen(stcond1));	
007594  48f3              LDR      r0,|L1.31076|
007596  6800              LDR      r0,[r0,#0]  ; stcond1
007598  f7fffffe          BL       strlen
00759c  4604              MOV      r4,r0
00759e  4621              MOV      r1,r4
0075a0  48f0              LDR      r0,|L1.31076|
0075a2  6800              LDR      r0,[r0,#0]  ; stcond1
0075a4  f7fffffe          BL       __aeabi_memclr
;;;1339   memset(con1d,0,strlen(con1d));	
0075a8  48ef              LDR      r0,|L1.31080|
0075aa  6800              LDR      r0,[r0,#0]  ; con1d
0075ac  f7fffffe          BL       strlen
0075b0  4604              MOV      r4,r0
0075b2  4621              MOV      r1,r4
0075b4  48ec              LDR      r0,|L1.31080|
0075b6  6800              LDR      r0,[r0,#0]  ; con1d
0075b8  f7fffffe          BL       __aeabi_memclr
;;;1340   	
;;;1341   								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;1342   						
;;;1343   								cond=mystrstr(uart_string_gsm,'>');
0075bc  213e              MOVS     r1,#0x3e
0075be  48eb              LDR      r0,|L1.31084|
0075c0  f7fffffe          BL       mystrstr
0075c4  49ea              LDR      r1,|L1.31088|
0075c6  7008              STRB     r0,[r1,#0]
;;;1344   								if(cond)	
0075c8  4608              MOV      r0,r1
0075ca  7800              LDRB     r0,[r0,#0]  ; cond
0075cc  2800              CMP      r0,#0
0075ce  d07d              BEQ      |L1.30412|
;;;1345   								{
;;;1346   									
;;;1347   									clear();
0075d0  f7fffffe          BL       clear
;;;1348   									memset(uart_string_gsm,0,5000);
0075d4  49e7              LDR      r1,|L1.31092|
0075d6  48e5              LDR      r0,|L1.31084|
0075d8  f7fffffe          BL       __aeabi_memclr
;;;1349   									strcat(data,"\n");
0075dc  a1e6              ADR      r1,|L1.31096|
0075de  48df              LDR      r0,|L1.31068|
0075e0  f7fffffe          BL       strcat
;;;1350   									len=strlen(data);
0075e4  48dd              LDR      r0,|L1.31068|
0075e6  f7fffffe          BL       strlen
0075ea  49e4              LDR      r1,|L1.31100|
0075ec  6008              STR      r0,[r1,#0]  ; len
;;;1351   									tout=0;
0075ee  2000              MOVS     r0,#0
0075f0  49e3              LDR      r1,|L1.31104|
0075f2  6008              STR      r0,[r1,#0]  ; tout
;;;1352   									k2=0;
0075f4  49e3              LDR      r1,|L1.31108|
0075f6  6008              STR      r0,[r1,#0]  ; k2
;;;1353   									for(k=0;k<len;k++)
0075f8  49e3              LDR      r1,|L1.31112|
0075fa  6008              STR      r0,[r1,#0]  ; k
0075fc  e00b              B        |L1.30230|
                  |L1.30206|
;;;1354   									{
;;;1355   										uart_putchar(UART1_BASE_PTR, data[k]);
0075fe  48d7              LDR      r0,|L1.31068|
007600  4ae1              LDR      r2,|L1.31112|
007602  6812              LDR      r2,[r2,#0]  ; k
007604  5c81              LDRB     r1,[r0,r2]
007606  48e1              LDR      r0,|L1.31116|
007608  f7fffffe          BL       uart_putchar
00760c  48de              LDR      r0,|L1.31112|
00760e  6800              LDR      r0,[r0,#0]            ;1353  ; k
007610  1c40              ADDS     r0,r0,#1              ;1353
007612  49dd              LDR      r1,|L1.31112|
007614  6008              STR      r0,[r1,#0]            ;1353  ; k
                  |L1.30230|
007616  48dc              LDR      r0,|L1.31112|
007618  6800              LDR      r0,[r0,#0]            ;1353  ; k
00761a  49d8              LDR      r1,|L1.31100|
00761c  6809              LDR      r1,[r1,#0]            ;1353  ; len
00761e  4288              CMP      r0,r1                 ;1353
007620  dbed              BLT      |L1.30206|
;;;1356   									}uart_putchar(UART1_BASE_PTR, 0x1A);
007622  211a              MOVS     r1,#0x1a
007624  48d9              LDR      r0,|L1.31116|
007626  f7fffffe          BL       uart_putchar
;;;1357   									do
00762a  bf00              NOP      
                  |L1.30252|
;;;1358   																{stcond1=strstr(uart_string_gsm,"SEND OK");
00762c  49c9              LDR      r1,|L1.31060|
00762e  3908              SUBS     r1,r1,#8
007630  48ce              LDR      r0,|L1.31084|
007632  f7fffffe          BL       strstr
007636  49cb              LDR      r1,|L1.31076|
007638  6008              STR      r0,[r1,#0]  ; stcond1
;;;1359   																	stcond2=strstr(uart_string_gsm, "ERROR");
00763a  49c6              LDR      r1,|L1.31060|
00763c  48cb              LDR      r0,|L1.31084|
00763e  f7fffffe          BL       strstr
007642  49d3              LDR      r1,|L1.31120|
007644  6008              STR      r0,[r1,#0]  ; stcond2
;;;1360   																		stcond3=strstr(uart_string_gsm, "FAIL");	
007646  49c0              LDR      r1,|L1.31048|
007648  3130              ADDS     r1,r1,#0x30
00764a  48c8              LDR      r0,|L1.31084|
00764c  f7fffffe          BL       strstr
007650  49d0              LDR      r1,|L1.31124|
007652  6008              STR      r0,[r1,#0]  ; stcond3
;;;1361   																			stcond4=strstr(uart_string_gsm, "DEACT");	
007654  49bf              LDR      r1,|L1.31060|
007656  3118              ADDS     r1,r1,#0x18
007658  48c4              LDR      r0,|L1.31084|
00765a  f7fffffe          BL       strstr
00765e  49ce              LDR      r1,|L1.31128|
007660  6008              STR      r0,[r1,#0]  ; stcond4
;;;1362   																	
;;;1363   																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
007662  48cb              LDR      r0,|L1.31120|
007664  6800              LDR      r0,[r0,#0]  ; stcond2
007666  2800              CMP      r0,#0
007668  d10f              BNE      |L1.30346|
00766a  48ca              LDR      r0,|L1.31124|
00766c  6800              LDR      r0,[r0,#0]  ; stcond3
00766e  2800              CMP      r0,#0
007670  d10b              BNE      |L1.30346|
007672  4608              MOV      r0,r1
007674  6800              LDR      r0,[r0,#0]  ; stcond4
007676  2800              CMP      r0,#0
007678  d107              BNE      |L1.30346|
00767a  48ba              LDR      r0,|L1.31076|
00767c  6800              LDR      r0,[r0,#0]  ; stcond1
00767e  2800              CMP      r0,#0
007680  d103              BNE      |L1.30346|
007682  48bf              LDR      r0,|L1.31104|
007684  6800              LDR      r0,[r0,#0]  ; tout
007686  2804              CMP      r0,#4
007688  ddd0              BLE      |L1.30252|
                  |L1.30346|
;;;1364   																//delay(10);clear();
;;;1365   														uart_putchar(UART1_BASE_PTR,0x1A);
00768a  211a              MOVS     r1,#0x1a
00768c  48bf              LDR      r0,|L1.31116|
00768e  f7fffffe          BL       uart_putchar
;;;1366   												//delay(10);
;;;1367   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
007692  211a              MOVS     r1,#0x1a
007694  48bd              LDR      r0,|L1.31116|
007696  f7fffffe          BL       uart_putchar
00769a  211a              MOVS     r1,#0x1a
00769c  48bb              LDR      r0,|L1.31116|
00769e  f7fffffe          BL       uart_putchar
0076a2  211a              MOVS     r1,#0x1a
0076a4  48b9              LDR      r0,|L1.31116|
0076a6  f7fffffe          BL       uart_putchar
;;;1368   						
;;;1369   									
;;;1370   									
;;;1371   									
;;;1372   									
;;;1373   									
;;;1374   									
;;;1375   									
;;;1376   
;;;1377   //									for(k=0;k<len;k++)
;;;1378   //									{
;;;1379   //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;1380   //									}
;;;1381   //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;1382   
;;;1383   //									
;;;1384   //													k2=0;									//string array counter for uart 1
;;;1385   //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;1386   //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;1387   //																{
;;;1388   //																	timeout--;
;;;1389   //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;1390   //																}
;;;1391   																if(flagch==1){		int_erval=temp;flagch=0;	}
0076aa  48bc              LDR      r0,|L1.31132|
0076ac  6800              LDR      r0,[r0,#0]  ; flagch
0076ae  2801              CMP      r0,#1
0076b0  d106              BNE      |L1.30400|
0076b2  48bb              LDR      r0,|L1.31136|
0076b4  6800              LDR      r0,[r0,#0]  ; temp
0076b6  49bb              LDR      r1,|L1.31140|
0076b8  6008              STR      r0,[r1,#0]  ; int_erval
0076ba  2000              MOVS     r0,#0
0076bc  49b7              LDR      r1,|L1.31132|
0076be  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.30400|
;;;1392   delay(50);
0076c0  2032              MOVS     r0,#0x32
0076c2  f7fffffe          BL       delay
;;;1393   stcond1=strstr(uart_string_gsm,"SEND OK");								
0076c6  49a3              LDR      r1,|L1.31060|
0076c8  3908              SUBS     r1,r1,#8
0076ca  e000              B        |L1.30414|
                  |L1.30412|
0076cc  e004              B        |L1.30424|
                  |L1.30414|
0076ce  48a7              LDR      r0,|L1.31084|
0076d0  f7fffffe          BL       strstr
0076d4  49a3              LDR      r1,|L1.31076|
0076d6  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.30424|
;;;1394   								}
;;;1395   //else{
;;;1396   //log_it();
;;;1397   //}
;;;1398   
;;;1399   
;;;1400   if(!(stcond1) == 1 ) // if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
0076d8  48a2              LDR      r0,|L1.31076|
0076da  6800              LDR      r0,[r0,#0]  ; stcond1
0076dc  2800              CMP      r0,#0
0076de  d101              BNE      |L1.30436|
0076e0  2001              MOVS     r0,#1
0076e2  e000              B        |L1.30438|
                  |L1.30436|
0076e4  2000              MOVS     r0,#0
                  |L1.30438|
0076e6  2801              CMP      r0,#1
0076e8  d001              BEQ      |L1.30446|
0076ea  f000ff4f          BL       |L1.34188|
                  |L1.30446|
;;;1401   {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0076ee  211a              MOVS     r1,#0x1a
0076f0  48a6              LDR      r0,|L1.31116|
0076f2  f7fffffe          BL       uart_putchar
0076f6  f7fffffe          BL       clear
0076fa  200a              MOVS     r0,#0xa
0076fc  f7fffffe          BL       delay
;;;1402   									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
007700  211a              MOVS     r1,#0x1a
007702  48a2              LDR      r0,|L1.31116|
007704  f7fffffe          BL       uart_putchar
007708  f7fffffe          BL       clear
00770c  200a              MOVS     r0,#0xa
00770e  f7fffffe          BL       delay
;;;1403   									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
007712  211a              MOVS     r1,#0x1a
007714  489d              LDR      r0,|L1.31116|
007716  f7fffffe          BL       uart_putchar
00771a  f7fffffe          BL       clear
00771e  200a              MOVS     r0,#0xa
007720  f7fffffe          BL       delay
;;;1404   						//	remove_all_chars(data, '\n', '\n');
;;;1405   	
;;;1406   	//	strcat(data,"CH\n");	
;;;1407   	
;;;1408   	
;;;1409   	
;;;1410   	
;;;1411   	delay(100);
007724  2064              MOVS     r0,#0x64
007726  f7fffffe          BL       delay
;;;1412   		clear();//memset(uart_string_gsm,0,5000);
00772a  f7fffffe          BL       clear
;;;1413   	
;;;1414   	memset(at_,0,100);
00772e  2164              MOVS     r1,#0x64
007730  4886              LDR      r0,|L1.31052|
007732  f7fffffe          BL       __aeabi_memclr
;;;1415   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
007736  4889              LDR      r0,|L1.31068|
007738  f7fffffe          BL       strlen
00773c  1c44              ADDS     r4,r0,#1
00773e  4623              MOV      r3,r4
007740  4a99              LDR      r2,|L1.31144|
007742  4985              LDR      r1,|L1.31064|
007744  310c              ADDS     r1,r1,#0xc
007746  4881              LDR      r0,|L1.31052|
007748  f7fffffe          BL       __2sprintf
;;;1416   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00774c  2005              MOVS     r0,#5
00774e  4b81              LDR      r3,|L1.31060|
007750  461a              MOV      r2,r3
007752  3a70              SUBS     r2,r2,#0x70
007754  a182              ADR      r1,|L1.31072|
007756  9000              STR      r0,[sp,#0]
007758  487c              LDR      r0,|L1.31052|
00775a  f7fffffe          BL       send_SD
;;;1417   	
;;;1418   clear();	
00775e  f7fffffe          BL       clear
;;;1419   									k2=0;									//string array counter for uart 1
007762  2000              MOVS     r0,#0
007764  4987              LDR      r1,|L1.31108|
007766  6008              STR      r0,[r1,#0]  ; k2
;;;1420   									tout=0;	
007768  4985              LDR      r1,|L1.31104|
00776a  6008              STR      r0,[r1,#0]  ; tout
;;;1421   		for(k=0;k<strlen(data);k++)
00776c  4986              LDR      r1,|L1.31112|
00776e  6008              STR      r0,[r1,#0]  ; k
007770  e00b              B        |L1.30602|
                  |L1.30578|
;;;1422   		{
;;;1423   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
007772  487a              LDR      r0,|L1.31068|
007774  4a84              LDR      r2,|L1.31112|
007776  6812              LDR      r2,[r2,#0]  ; k
007778  5c81              LDRB     r1,[r0,r2]
00777a  4884              LDR      r0,|L1.31116|
00777c  f7fffffe          BL       uart_putchar
007780  4881              LDR      r0,|L1.31112|
007782  6800              LDR      r0,[r0,#0]            ;1421  ; k
007784  1c40              ADDS     r0,r0,#1              ;1421
007786  4980              LDR      r1,|L1.31112|
007788  6008              STR      r0,[r1,#0]            ;1421  ; k
                  |L1.30602|
00778a  4874              LDR      r0,|L1.31068|
00778c  f7fffffe          BL       strlen
007790  497d              LDR      r1,|L1.31112|
007792  6809              LDR      r1,[r1,#0]            ;1421  ; k
007794  4288              CMP      r0,r1                 ;1421
007796  d8ec              BHI      |L1.30578|
;;;1424   		}	
;;;1425   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
007798  210a              MOVS     r1,#0xa
00779a  487c              LDR      r0,|L1.31116|
00779c  f7fffffe          BL       uart_putchar
0077a0  210a              MOVS     r1,#0xa
0077a2  487a              LDR      r0,|L1.31116|
0077a4  f7fffffe          BL       uart_putchar
0077a8  210a              MOVS     r1,#0xa
0077aa  4878              LDR      r0,|L1.31116|
0077ac  f7fffffe          BL       uart_putchar
0077b0  210a              MOVS     r1,#0xa
0077b2  4876              LDR      r0,|L1.31116|
0077b4  f7fffffe          BL       uart_putchar
0077b8  210a              MOVS     r1,#0xa
0077ba  4874              LDR      r0,|L1.31116|
0077bc  f7fffffe          BL       uart_putchar
0077c0  210a              MOVS     r1,#0xa
0077c2  4872              LDR      r0,|L1.31116|
0077c4  f7fffffe          BL       uart_putchar
0077c8  210a              MOVS     r1,#0xa
0077ca  4870              LDR      r0,|L1.31116|
0077cc  f7fffffe          BL       uart_putchar
0077d0  210a              MOVS     r1,#0xa
0077d2  486e              LDR      r0,|L1.31116|
0077d4  f7fffffe          BL       uart_putchar
0077d8  210a              MOVS     r1,#0xa
0077da  486c              LDR      r0,|L1.31116|
0077dc  f7fffffe          BL       uart_putchar
0077e0  210a              MOVS     r1,#0xa
0077e2  486a              LDR      r0,|L1.31116|
0077e4  f7fffffe          BL       uart_putchar
0077e8  210a              MOVS     r1,#0xa
0077ea  4868              LDR      r0,|L1.31116|
0077ec  f7fffffe          BL       uart_putchar
0077f0  210a              MOVS     r1,#0xa
0077f2  4866              LDR      r0,|L1.31116|
0077f4  f7fffffe          BL       uart_putchar
0077f8  210a              MOVS     r1,#0xa
0077fa  4864              LDR      r0,|L1.31116|
0077fc  f7fffffe          BL       uart_putchar
007800  210a              MOVS     r1,#0xa
007802  4862              LDR      r0,|L1.31116|
007804  f7fffffe          BL       uart_putchar
007808  210a              MOVS     r1,#0xa
00780a  4860              LDR      r0,|L1.31116|
00780c  f7fffffe          BL       uart_putchar
007810  210a              MOVS     r1,#0xa
007812  485e              LDR      r0,|L1.31116|
007814  f7fffffe          BL       uart_putchar
007818  210a              MOVS     r1,#0xa
00781a  485c              LDR      r0,|L1.31116|
00781c  f7fffffe          BL       uart_putchar
007820  210a              MOVS     r1,#0xa
007822  485a              LDR      r0,|L1.31116|
007824  f7fffffe          BL       uart_putchar
007828  210a              MOVS     r1,#0xa
00782a  4858              LDR      r0,|L1.31116|
00782c  f7fffffe          BL       uart_putchar
007830  210a              MOVS     r1,#0xa
007832  4856              LDR      r0,|L1.31116|
007834  f7fffffe          BL       uart_putchar
007838  210a              MOVS     r1,#0xa
00783a  4854              LDR      r0,|L1.31116|
00783c  f7fffffe          BL       uart_putchar
007840  210a              MOVS     r1,#0xa
007842  4852              LDR      r0,|L1.31116|
007844  f7fffffe          BL       uart_putchar
007848  210a              MOVS     r1,#0xa
00784a  4850              LDR      r0,|L1.31116|
00784c  f7fffffe          BL       uart_putchar
007850  210a              MOVS     r1,#0xa
007852  484e              LDR      r0,|L1.31116|
007854  f7fffffe          BL       uart_putchar
007858  210a              MOVS     r1,#0xa
00785a  484c              LDR      r0,|L1.31116|
00785c  f7fffffe          BL       uart_putchar
007860  210a              MOVS     r1,#0xa
007862  484a              LDR      r0,|L1.31116|
007864  f7fffffe          BL       uart_putchar
007868  210a              MOVS     r1,#0xa
00786a  4848              LDR      r0,|L1.31116|
00786c  f7fffffe          BL       uart_putchar
007870  210a              MOVS     r1,#0xa
007872  4846              LDR      r0,|L1.31116|
007874  f7fffffe          BL       uart_putchar
007878  210a              MOVS     r1,#0xa
00787a  4844              LDR      r0,|L1.31116|
00787c  f7fffffe          BL       uart_putchar
007880  210a              MOVS     r1,#0xa
007882  4842              LDR      r0,|L1.31116|
007884  f7fffffe          BL       uart_putchar
007888  210a              MOVS     r1,#0xa
00788a  4840              LDR      r0,|L1.31116|
00788c  f7fffffe          BL       uart_putchar
007890  210a              MOVS     r1,#0xa
007892  483e              LDR      r0,|L1.31116|
007894  f7fffffe          BL       uart_putchar
007898  210a              MOVS     r1,#0xa
00789a  483c              LDR      r0,|L1.31116|
00789c  f7fffffe          BL       uart_putchar
0078a0  210a              MOVS     r1,#0xa
0078a2  483a              LDR      r0,|L1.31116|
0078a4  f7fffffe          BL       uart_putchar
0078a8  210a              MOVS     r1,#0xa
0078aa  4838              LDR      r0,|L1.31116|
0078ac  f7fffffe          BL       uart_putchar
0078b0  210a              MOVS     r1,#0xa
0078b2  4836              LDR      r0,|L1.31116|
0078b4  f7fffffe          BL       uart_putchar
0078b8  210a              MOVS     r1,#0xa
0078ba  4834              LDR      r0,|L1.31116|
0078bc  f7fffffe          BL       uart_putchar
0078c0  210a              MOVS     r1,#0xa
0078c2  4832              LDR      r0,|L1.31116|
0078c4  f7fffffe          BL       uart_putchar
0078c8  210a              MOVS     r1,#0xa
0078ca  4830              LDR      r0,|L1.31116|
0078cc  f7fffffe          BL       uart_putchar
0078d0  210a              MOVS     r1,#0xa
0078d2  482e              LDR      r0,|L1.31116|
0078d4  f7fffffe          BL       uart_putchar
0078d8  210a              MOVS     r1,#0xa
0078da  482c              LDR      r0,|L1.31116|
0078dc  f7fffffe          BL       uart_putchar
0078e0  210a              MOVS     r1,#0xa
0078e2  482a              LDR      r0,|L1.31116|
0078e4  f7fffffe          BL       uart_putchar
0078e8  210a              MOVS     r1,#0xa
0078ea  4828              LDR      r0,|L1.31116|
0078ec  f7fffffe          BL       uart_putchar
0078f0  210a              MOVS     r1,#0xa
0078f2  4826              LDR      r0,|L1.31116|
0078f4  f7fffffe          BL       uart_putchar
0078f8  210a              MOVS     r1,#0xa
0078fa  4824              LDR      r0,|L1.31116|
0078fc  f7fffffe          BL       uart_putchar
007900  210a              MOVS     r1,#0xa
007902  4822              LDR      r0,|L1.31116|
007904  f7fffffe          BL       uart_putchar
007908  210a              MOVS     r1,#0xa
00790a  4820              LDR      r0,|L1.31116|
00790c  f7fffffe          BL       uart_putchar
007910  210a              MOVS     r1,#0xa
007912  481e              LDR      r0,|L1.31116|
007914  f7fffffe          BL       uart_putchar
007918  210a              MOVS     r1,#0xa
00791a  481c              LDR      r0,|L1.31116|
00791c  f7fffffe          BL       uart_putchar
007920  210a              MOVS     r1,#0xa
007922  481a              LDR      r0,|L1.31116|
007924  f7fffffe          BL       uart_putchar
007928  210a              MOVS     r1,#0xa
00792a  4818              LDR      r0,|L1.31116|
00792c  f7fffffe          BL       uart_putchar
007930  210a              MOVS     r1,#0xa
007932  4816              LDR      r0,|L1.31116|
007934  f7fffffe          BL       uart_putchar
007938  210a              MOVS     r1,#0xa
00793a  4814              LDR      r0,|L1.31116|
00793c  e036              B        |L1.31148|
00793e  0000              DCW      0x0000
                  |L1.31040|
                          DCD      port
                  |L1.31044|
                          DCD      ||ip||
                  |L1.31048|
                          DCD      ||.text||+0x125c
                  |L1.31052|
                          DCD      at_
                  |L1.31056|
                          DCD      tmeout
                  |L1.31060|
                          DCD      ||.text||+0x910
                  |L1.31064|
                          DCD      ||.text||+0xd44
                  |L1.31068|
                          DCD      data
                  |L1.31072|
007960  3e00              DCB      ">",0
007962  00                DCB      0
007963  00                DCB      0
                  |L1.31076|
                          DCD      stcond1
                  |L1.31080|
                          DCD      con1d
                  |L1.31084|
                          DCD      uart_string_gsm
                  |L1.31088|
                          DCD      cond
                  |L1.31092|
                          DCD      0x00001388
                  |L1.31096|
007978  0a00              DCB      "\n",0
00797a  00                DCB      0
00797b  00                DCB      0
                  |L1.31100|
                          DCD      len
                  |L1.31104|
                          DCD      tout
                  |L1.31108|
                          DCD      ||k2||
                  |L1.31112|
                          DCD      k
                  |L1.31116|
                          DCD      0x4006b000
                  |L1.31120|
                          DCD      stcond2
                  |L1.31124|
                          DCD      stcond3
                  |L1.31128|
                          DCD      stcond4
                  |L1.31132|
                          DCD      flagch
                  |L1.31136|
                          DCD      temp
                  |L1.31140|
                          DCD      int_erval
                  |L1.31144|
                          DCD      drive
                  |L1.31148|
0079ac  f7fffffe          BL       uart_putchar
0079b0  210a              MOVS     r1,#0xa
0079b2  48fe              LDR      r0,|L1.32172|
0079b4  f7fffffe          BL       uart_putchar
0079b8  210a              MOVS     r1,#0xa
0079ba  48fc              LDR      r0,|L1.32172|
0079bc  f7fffffe          BL       uart_putchar
0079c0  210a              MOVS     r1,#0xa
0079c2  48fa              LDR      r0,|L1.32172|
0079c4  f7fffffe          BL       uart_putchar
0079c8  210a              MOVS     r1,#0xa
0079ca  48f8              LDR      r0,|L1.32172|
0079cc  f7fffffe          BL       uart_putchar
;;;1426   									//memset(data,0,1000);
;;;1427   														//timer counts to wait for characters in uart 1 									
;;;1428   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0079d0  bf00              NOP      
                  |L1.31186|
0079d2  49f7              LDR      r1,|L1.32176|
0079d4  48f7              LDR      r0,|L1.32180|
0079d6  f7fffffe          BL       strstr
0079da  2800              CMP      r0,#0
0079dc  d109              BNE      |L1.31218|
0079de  49f6              LDR      r1,|L1.32184|
0079e0  48f4              LDR      r0,|L1.32180|
0079e2  f7fffffe          BL       strstr
0079e6  2800              CMP      r0,#0
0079e8  d103              BNE      |L1.31218|
0079ea  48f4              LDR      r0,|L1.32188|
0079ec  6800              LDR      r0,[r0,#0]  ; tout
0079ee  2805              CMP      r0,#5
0079f0  ddef              BLE      |L1.31186|
                  |L1.31218|
;;;1429   									{								
;;;1430   									}
;;;1431   	                clear();
0079f2  f7fffffe          BL       clear
;;;1432   									memset(data,0,strlen(data));
0079f6  48f2              LDR      r0,|L1.32192|
0079f8  f7fffffe          BL       strlen
0079fc  4604              MOV      r4,r0
0079fe  4621              MOV      r1,r4
007a00  48ef              LDR      r0,|L1.32192|
007a02  f7fffffe          BL       __aeabi_memclr
;;;1433   
;;;1434   		
;;;1435   		memset(data,0,strlen(data));	
007a06  48ee              LDR      r0,|L1.32192|
007a08  f7fffffe          BL       strlen
007a0c  4604              MOV      r4,r0
007a0e  4621              MOV      r1,r4
007a10  48eb              LDR      r0,|L1.32192|
007a12  f7fffffe          BL       __aeabi_memclr
;;;1436   							GPS_COLLECT();
007a16  f7fffffe          BL       GPS_COLLECT
;;;1437   							strcat(data,"CH\n");	
007a1a  49e5              LDR      r1,|L1.32176|
007a1c  3944              SUBS     r1,r1,#0x44
007a1e  48e8              LDR      r0,|L1.32192|
007a20  f7fffffe          BL       strcat
;;;1438   				
;;;1439   					   	if(flagch!=1){
007a24  48e7              LDR      r0,|L1.32196|
007a26  6800              LDR      r0,[r0,#0]  ; flagch
007a28  2801              CMP      r0,#1
007a2a  d009              BEQ      |L1.31296|
;;;1440   							temp=int_erval;				
007a2c  48e6              LDR      r0,|L1.32200|
007a2e  6800              LDR      r0,[r0,#0]  ; int_erval
007a30  49e6              LDR      r1,|L1.32204|
007a32  6008              STR      r0,[r1,#0]  ; temp
;;;1441   							int_erval=4;
007a34  2004              MOVS     r0,#4
007a36  49e4              LDR      r1,|L1.32200|
007a38  6008              STR      r0,[r1,#0]  ; int_erval
;;;1442   							flagch=1;}
007a3a  2001              MOVS     r0,#1
007a3c  49e1              LDR      r1,|L1.32196|
007a3e  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.31296|
;;;1443   							clear();	
007a40  f7fffffe          BL       clear
;;;1444   
;;;1445   
;;;1446   //**********************************tcp_initialization();***************************************//
;;;1447   							
;;;1448   	
;;;1449   msg_sim800(); 
007a44  f7fffffe          BL       msg_sim800
;;;1450   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
007a48  2005              MOVS     r0,#5
007a4a  4bdb              LDR      r3,|L1.32184|
007a4c  461a              MOV      r2,r3
007a4e  3a70              SUBS     r2,r2,#0x70
007a50  a1df              ADR      r1,|L1.32208|
007a52  9000              STR      r0,[sp,#0]
007a54  48d6              LDR      r0,|L1.32176|
007a56  301c              ADDS     r0,r0,#0x1c
007a58  f7fffffe          BL       send_GSM
;;;1451   delay(100);
007a5c  2064              MOVS     r0,#0x64
007a5e  f7fffffe          BL       delay
;;;1452   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
007a62  2004              MOVS     r0,#4
007a64  4bd4              LDR      r3,|L1.32184|
007a66  4ad2              LDR      r2,|L1.32176|
007a68  322c              ADDS     r2,r2,#0x2c
007a6a  a1d9              ADR      r1,|L1.32208|
007a6c  9000              STR      r0,[sp,#0]
007a6e  4610              MOV      r0,r2
007a70  3014              ADDS     r0,r0,#0x14
007a72  f7fffffe          BL       send_GSM
;;;1453   GPS_COLLECT2();
007a76  f7fffffe          BL       GPS_COLLECT2
;;;1454   strcat(data,"CH\n");		
007a7a  49cd              LDR      r1,|L1.32176|
007a7c  3944              SUBS     r1,r1,#0x44
007a7e  48d0              LDR      r0,|L1.32192|
007a80  f7fffffe          BL       strcat
;;;1455   GPS_COLLECT2();
007a84  f7fffffe          BL       GPS_COLLECT2
;;;1456   strcat(data,"CH\n");	
007a88  49c9              LDR      r1,|L1.32176|
007a8a  3944              SUBS     r1,r1,#0x44
007a8c  48cc              LDR      r0,|L1.32192|
007a8e  f7fffffe          BL       strcat
;;;1457   GPS_COLLECT2();
007a92  f7fffffe          BL       GPS_COLLECT2
;;;1458   strcat(data,"CH\n");
007a96  49c6              LDR      r1,|L1.32176|
007a98  3944              SUBS     r1,r1,#0x44
007a9a  48c9              LDR      r0,|L1.32192|
007a9c  f7fffffe          BL       strcat
;;;1459   cond201=(strstr(uart_string_gsm, "OK"));
007aa0  a1cb              ADR      r1,|L1.32208|
007aa2  48c4              LDR      r0,|L1.32180|
007aa4  f7fffffe          BL       strstr
007aa8  49ca              LDR      r1,|L1.32212|
007aaa  6008              STR      r0,[r1,#0]  ; cond201
;;;1460   cond200=(strstr(uart_string_gsm, "ERROR"));
007aac  49c2              LDR      r1,|L1.32184|
007aae  48c1              LDR      r0,|L1.32180|
007ab0  f7fffffe          BL       strstr
007ab4  49c8              LDR      r1,|L1.32216|
007ab6  6008              STR      r0,[r1,#0]  ; cond200
;;;1461   if(  (!cond201 !=0  &&   !cond200 !=0)	&& sleep_flag != 1)
007ab8  48c6              LDR      r0,|L1.32212|
007aba  6800              LDR      r0,[r0,#0]  ; cond201
007abc  2800              CMP      r0,#0
007abe  d101              BNE      |L1.31428|
007ac0  2001              MOVS     r0,#1
007ac2  e000              B        |L1.31430|
                  |L1.31428|
007ac4  2000              MOVS     r0,#0
                  |L1.31430|
007ac6  2800              CMP      r0,#0
                  |L1.31432|
007ac8  d07d              BEQ      |L1.31686|
007aca  48c3              LDR      r0,|L1.32216|
007acc  6800              LDR      r0,[r0,#0]  ; cond200
007ace  2800              CMP      r0,#0
007ad0  d101              BNE      |L1.31446|
007ad2  2001              MOVS     r0,#1
007ad4  e000              B        |L1.31448|
                  |L1.31446|
007ad6  2000              MOVS     r0,#0
                  |L1.31448|
007ad8  2800              CMP      r0,#0
007ada  d0f5              BEQ      |L1.31432|
007adc  48bf              LDR      r0,|L1.32220|
007ade  6800              LDR      r0,[r0,#0]  ; sleep_flag
007ae0  2801              CMP      r0,#1
007ae2  d0f1              BEQ      |L1.31432|
;;;1462   {
;;;1463   delay(100);
007ae4  2064              MOVS     r0,#0x64
007ae6  f7fffffe          BL       delay
;;;1464   clear();//memset(uart_string_gsm,0,5000);
007aea  f7fffffe          BL       clear
;;;1465   memset(at_,0,100);
007aee  2164              MOVS     r1,#0x64
007af0  48bb              LDR      r0,|L1.32224|
007af2  f7fffffe          BL       __aeabi_memclr
;;;1466   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
007af6  48b2              LDR      r0,|L1.32192|
007af8  f7fffffe          BL       strlen
007afc  1c44              ADDS     r4,r0,#1
007afe  4623              MOV      r3,r4
007b00  4ab8              LDR      r2,|L1.32228|
007b02  49ab              LDR      r1,|L1.32176|
007b04  3938              SUBS     r1,r1,#0x38
007b06  48b6              LDR      r0,|L1.32224|
007b08  f7fffffe          BL       __2sprintf
;;;1467   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
007b0c  2005              MOVS     r0,#5
007b0e  4baa              LDR      r3,|L1.32184|
007b10  461a              MOV      r2,r3
007b12  3a70              SUBS     r2,r2,#0x70
007b14  a1b4              ADR      r1,|L1.32232|
007b16  9000              STR      r0,[sp,#0]
007b18  48b1              LDR      r0,|L1.32224|
007b1a  f7fffffe          BL       send_SD
;;;1468   clear();	
007b1e  f7fffffe          BL       clear
;;;1469   k2=0;									//string array counter for uart 1
007b22  2000              MOVS     r0,#0
007b24  49b1              LDR      r1,|L1.32236|
007b26  6008              STR      r0,[r1,#0]  ; k2
;;;1470   tout=0;	
007b28  49a4              LDR      r1,|L1.32188|
007b2a  6008              STR      r0,[r1,#0]  ; tout
;;;1471   for(k=0;k<strlen(data);k++)
007b2c  49b0              LDR      r1,|L1.32240|
007b2e  6008              STR      r0,[r1,#0]  ; k
007b30  e00b              B        |L1.31562|
                  |L1.31538|
;;;1472   {
;;;1473   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
007b32  48a3              LDR      r0,|L1.32192|
007b34  4aae              LDR      r2,|L1.32240|
007b36  6812              LDR      r2,[r2,#0]  ; k
007b38  5c81              LDRB     r1,[r0,r2]
007b3a  489c              LDR      r0,|L1.32172|
007b3c  f7fffffe          BL       uart_putchar
007b40  48ab              LDR      r0,|L1.32240|
007b42  6800              LDR      r0,[r0,#0]            ;1471  ; k
007b44  1c40              ADDS     r0,r0,#1              ;1471
007b46  49aa              LDR      r1,|L1.32240|
007b48  6008              STR      r0,[r1,#0]            ;1471  ; k
                  |L1.31562|
007b4a  489d              LDR      r0,|L1.32192|
007b4c  f7fffffe          BL       strlen
007b50  49a7              LDR      r1,|L1.32240|
007b52  6809              LDR      r1,[r1,#0]            ;1471  ; k
007b54  4288              CMP      r0,r1                 ;1471
007b56  d8ec              BHI      |L1.31538|
;;;1474   }	
;;;1475   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
007b58  210a              MOVS     r1,#0xa
007b5a  4894              LDR      r0,|L1.32172|
007b5c  f7fffffe          BL       uart_putchar
007b60  210a              MOVS     r1,#0xa
007b62  4892              LDR      r0,|L1.32172|
007b64  f7fffffe          BL       uart_putchar
007b68  210a              MOVS     r1,#0xa
007b6a  4890              LDR      r0,|L1.32172|
007b6c  f7fffffe          BL       uart_putchar
007b70  210a              MOVS     r1,#0xa
007b72  488e              LDR      r0,|L1.32172|
007b74  f7fffffe          BL       uart_putchar
007b78  210a              MOVS     r1,#0xa
007b7a  488c              LDR      r0,|L1.32172|
007b7c  f7fffffe          BL       uart_putchar
007b80  210a              MOVS     r1,#0xa
007b82  488a              LDR      r0,|L1.32172|
007b84  f7fffffe          BL       uart_putchar
007b88  210a              MOVS     r1,#0xa
007b8a  4888              LDR      r0,|L1.32172|
007b8c  f7fffffe          BL       uart_putchar
007b90  210a              MOVS     r1,#0xa
007b92  4886              LDR      r0,|L1.32172|
007b94  f7fffffe          BL       uart_putchar
007b98  210a              MOVS     r1,#0xa
007b9a  4884              LDR      r0,|L1.32172|
007b9c  f7fffffe          BL       uart_putchar
007ba0  210a              MOVS     r1,#0xa
007ba2  4882              LDR      r0,|L1.32172|
007ba4  f7fffffe          BL       uart_putchar
007ba8  210a              MOVS     r1,#0xa
007baa  4880              LDR      r0,|L1.32172|
007bac  f7fffffe          BL       uart_putchar
007bb0  210a              MOVS     r1,#0xa
007bb2  487e              LDR      r0,|L1.32172|
007bb4  f7fffffe          BL       uart_putchar
007bb8  210a              MOVS     r1,#0xa
007bba  487c              LDR      r0,|L1.32172|
007bbc  f7fffffe          BL       uart_putchar
007bc0  210a              MOVS     r1,#0xa
007bc2  487a              LDR      r0,|L1.32172|
007bc4  e000              B        |L1.31688|
                  |L1.31686|
007bc6  e0d6              B        |L1.32118|
                  |L1.31688|
007bc8  f7fffffe          BL       uart_putchar
007bcc  210a              MOVS     r1,#0xa
007bce  4877              LDR      r0,|L1.32172|
007bd0  f7fffffe          BL       uart_putchar
007bd4  210a              MOVS     r1,#0xa
007bd6  4875              LDR      r0,|L1.32172|
007bd8  f7fffffe          BL       uart_putchar
007bdc  210a              MOVS     r1,#0xa
007bde  4873              LDR      r0,|L1.32172|
007be0  f7fffffe          BL       uart_putchar
007be4  210a              MOVS     r1,#0xa
007be6  4871              LDR      r0,|L1.32172|
007be8  f7fffffe          BL       uart_putchar
007bec  210a              MOVS     r1,#0xa
007bee  486f              LDR      r0,|L1.32172|
007bf0  f7fffffe          BL       uart_putchar
007bf4  210a              MOVS     r1,#0xa
007bf6  486d              LDR      r0,|L1.32172|
007bf8  f7fffffe          BL       uart_putchar
007bfc  210a              MOVS     r1,#0xa
007bfe  486b              LDR      r0,|L1.32172|
007c00  f7fffffe          BL       uart_putchar
007c04  210a              MOVS     r1,#0xa
007c06  4869              LDR      r0,|L1.32172|
007c08  f7fffffe          BL       uart_putchar
007c0c  210a              MOVS     r1,#0xa
007c0e  4867              LDR      r0,|L1.32172|
007c10  f7fffffe          BL       uart_putchar
007c14  210a              MOVS     r1,#0xa
007c16  4865              LDR      r0,|L1.32172|
007c18  f7fffffe          BL       uart_putchar
007c1c  210a              MOVS     r1,#0xa
007c1e  4863              LDR      r0,|L1.32172|
007c20  f7fffffe          BL       uart_putchar
007c24  210a              MOVS     r1,#0xa
007c26  4861              LDR      r0,|L1.32172|
007c28  f7fffffe          BL       uart_putchar
007c2c  210a              MOVS     r1,#0xa
007c2e  485f              LDR      r0,|L1.32172|
007c30  f7fffffe          BL       uart_putchar
007c34  210a              MOVS     r1,#0xa
007c36  485d              LDR      r0,|L1.32172|
007c38  f7fffffe          BL       uart_putchar
007c3c  210a              MOVS     r1,#0xa
007c3e  485b              LDR      r0,|L1.32172|
007c40  f7fffffe          BL       uart_putchar
007c44  210a              MOVS     r1,#0xa
007c46  4859              LDR      r0,|L1.32172|
007c48  f7fffffe          BL       uart_putchar
007c4c  210a              MOVS     r1,#0xa
007c4e  4857              LDR      r0,|L1.32172|
007c50  f7fffffe          BL       uart_putchar
007c54  210a              MOVS     r1,#0xa
007c56  4855              LDR      r0,|L1.32172|
007c58  f7fffffe          BL       uart_putchar
007c5c  210a              MOVS     r1,#0xa
007c5e  4853              LDR      r0,|L1.32172|
007c60  f7fffffe          BL       uart_putchar
007c64  210a              MOVS     r1,#0xa
007c66  4851              LDR      r0,|L1.32172|
007c68  f7fffffe          BL       uart_putchar
007c6c  210a              MOVS     r1,#0xa
007c6e  484f              LDR      r0,|L1.32172|
007c70  f7fffffe          BL       uart_putchar
007c74  210a              MOVS     r1,#0xa
007c76  484d              LDR      r0,|L1.32172|
007c78  f7fffffe          BL       uart_putchar
007c7c  210a              MOVS     r1,#0xa
007c7e  484b              LDR      r0,|L1.32172|
007c80  f7fffffe          BL       uart_putchar
007c84  210a              MOVS     r1,#0xa
007c86  4849              LDR      r0,|L1.32172|
007c88  f7fffffe          BL       uart_putchar
007c8c  210a              MOVS     r1,#0xa
007c8e  4847              LDR      r0,|L1.32172|
007c90  f7fffffe          BL       uart_putchar
007c94  210a              MOVS     r1,#0xa
007c96  4845              LDR      r0,|L1.32172|
007c98  f7fffffe          BL       uart_putchar
007c9c  210a              MOVS     r1,#0xa
007c9e  4843              LDR      r0,|L1.32172|
007ca0  f7fffffe          BL       uart_putchar
007ca4  210a              MOVS     r1,#0xa
007ca6  4841              LDR      r0,|L1.32172|
007ca8  f7fffffe          BL       uart_putchar
007cac  210a              MOVS     r1,#0xa
007cae  483f              LDR      r0,|L1.32172|
007cb0  f7fffffe          BL       uart_putchar
007cb4  210a              MOVS     r1,#0xa
007cb6  483d              LDR      r0,|L1.32172|
007cb8  f7fffffe          BL       uart_putchar
007cbc  210a              MOVS     r1,#0xa
007cbe  483b              LDR      r0,|L1.32172|
007cc0  f7fffffe          BL       uart_putchar
007cc4  210a              MOVS     r1,#0xa
007cc6  4839              LDR      r0,|L1.32172|
007cc8  f7fffffe          BL       uart_putchar
007ccc  210a              MOVS     r1,#0xa
007cce  4837              LDR      r0,|L1.32172|
007cd0  f7fffffe          BL       uart_putchar
007cd4  210a              MOVS     r1,#0xa
007cd6  4835              LDR      r0,|L1.32172|
007cd8  f7fffffe          BL       uart_putchar
007cdc  210a              MOVS     r1,#0xa
007cde  4833              LDR      r0,|L1.32172|
007ce0  f7fffffe          BL       uart_putchar
007ce4  210a              MOVS     r1,#0xa
007ce6  4831              LDR      r0,|L1.32172|
007ce8  f7fffffe          BL       uart_putchar
007cec  210a              MOVS     r1,#0xa
007cee  482f              LDR      r0,|L1.32172|
007cf0  f7fffffe          BL       uart_putchar
007cf4  210a              MOVS     r1,#0xa
007cf6  482d              LDR      r0,|L1.32172|
007cf8  f7fffffe          BL       uart_putchar
007cfc  210a              MOVS     r1,#0xa
007cfe  482b              LDR      r0,|L1.32172|
007d00  f7fffffe          BL       uart_putchar
007d04  210a              MOVS     r1,#0xa
007d06  4829              LDR      r0,|L1.32172|
007d08  f7fffffe          BL       uart_putchar
007d0c  210a              MOVS     r1,#0xa
007d0e  4827              LDR      r0,|L1.32172|
007d10  f7fffffe          BL       uart_putchar
007d14  210a              MOVS     r1,#0xa
007d16  4825              LDR      r0,|L1.32172|
007d18  f7fffffe          BL       uart_putchar
007d1c  210a              MOVS     r1,#0xa
007d1e  4823              LDR      r0,|L1.32172|
007d20  f7fffffe          BL       uart_putchar
;;;1476   									//memset(data,0,1000);
;;;1477   														//timer counts to wait for characters in uart 1 									
;;;1478   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
007d24  bf00              NOP      
                  |L1.32038|
007d26  4922              LDR      r1,|L1.32176|
007d28  4822              LDR      r0,|L1.32180|
007d2a  f7fffffe          BL       strstr
007d2e  2800              CMP      r0,#0
007d30  d109              BNE      |L1.32070|
007d32  4921              LDR      r1,|L1.32184|
007d34  481f              LDR      r0,|L1.32180|
007d36  f7fffffe          BL       strstr
007d3a  2800              CMP      r0,#0
007d3c  d103              BNE      |L1.32070|
007d3e  481f              LDR      r0,|L1.32188|
007d40  6800              LDR      r0,[r0,#0]  ; tout
007d42  2805              CMP      r0,#5
007d44  ddef              BLE      |L1.32038|
                  |L1.32070|
;;;1479   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1480   									}
;;;1481   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
007d46  f7fffffe          BL       clear
;;;1482   									//clear();
;;;1483   									memset(data,0,strlen(data));
007d4a  481d              LDR      r0,|L1.32192|
007d4c  f7fffffe          BL       strlen
007d50  4604              MOV      r4,r0
007d52  4621              MOV      r1,r4
007d54  481a              LDR      r0,|L1.32192|
007d56  f7fffffe          BL       __aeabi_memclr
;;;1484   									clear();
007d5a  f7fffffe          BL       clear
;;;1485   									RESET_OFF;delay(100);
007d5e  2020              MOVS     r0,#0x20
007d60  4924              LDR      r1,|L1.32244|
007d62  6088              STR      r0,[r1,#8]
007d64  2064              MOVS     r0,#0x64
007d66  f7fffffe          BL       delay
;;;1486   									RESET_ON;delay(100);		
007d6a  2020              MOVS     r0,#0x20
007d6c  4921              LDR      r1,|L1.32244|
007d6e  6048              STR      r0,[r1,#4]
007d70  2064              MOVS     r0,#0x64
007d72  f7fffffe          BL       delay
                  |L1.32118|
;;;1487   }
;;;1488   	
;;;1489   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
007d76  2004              MOVS     r0,#4
007d78  4b0f              LDR      r3,|L1.32184|
007d7a  3b78              SUBS     r3,r3,#0x78
007d7c  461a              MOV      r2,r3
007d7e  3208              ADDS     r2,r2,#8
007d80  a113              ADR      r1,|L1.32208|
007d82  9000              STR      r0,[sp,#0]
007d84  481c              LDR      r0,|L1.32248|
007d86  f7fffffe          BL       send_GSM
;;;1490   GPS_COLLECT2();
007d8a  f7fffffe          BL       GPS_COLLECT2
;;;1491   strcat(data,"CH\n");	
007d8e  4908              LDR      r1,|L1.32176|
007d90  3944              SUBS     r1,r1,#0x44
007d92  480b              LDR      r0,|L1.32192|
007d94  f7fffffe          BL       strcat
;;;1492   memset(at_,0,100);
007d98  2164              MOVS     r1,#0x64
007d9a  4811              LDR      r0,|L1.32224|
007d9c  f7fffffe          BL       __aeabi_memclr
;;;1493   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
007da0  4a16              LDR      r2,|L1.32252|
007da2  4915              LDR      r1,|L1.32248|
007da4  3118              ADDS     r1,r1,#0x18
007da6  480e              LDR      r0,|L1.32224|
007da8  e02a              B        |L1.32256|
007daa  0000              DCW      0x0000
                  |L1.32172|
                          DCD      0x4006b000
                  |L1.32176|
                          DCD      ||.text||+0xd88
                  |L1.32180|
                          DCD      uart_string_gsm
                  |L1.32184|
                          DCD      ||.text||+0x910
                  |L1.32188|
                          DCD      tout
                  |L1.32192|
                          DCD      data
                  |L1.32196|
                          DCD      flagch
                  |L1.32200|
                          DCD      int_erval
                  |L1.32204|
                          DCD      temp
                  |L1.32208|
007dd0  4f4b00            DCB      "OK",0
007dd3  00                DCB      0
                  |L1.32212|
                          DCD      cond201
                  |L1.32216|
                          DCD      cond200
                  |L1.32220|
                          DCD      sleep_flag
                  |L1.32224|
                          DCD      at_
                  |L1.32228|
                          DCD      drive
                  |L1.32232|
007de8  3e00              DCB      ">",0
007dea  00                DCB      0
007deb  00                DCB      0
                  |L1.32236|
                          DCD      ||k2||
                  |L1.32240|
                          DCD      k
                  |L1.32244|
                          DCD      0x400ff080
                  |L1.32248|
                          DCD      ||.text||+0x1204
                  |L1.32252|
                          DCD      apn
                  |L1.32256|
007e00  f7fffffe          BL       __2sprintf
;;;1494   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
007e04  48fe              LDR      r0,|L1.33280|
007e06  6800              LDR      r0,[r0,#0]  ; tmeout
007e08  4bfe              LDR      r3,|L1.33284|
007e0a  461a              MOV      r2,r3
007e0c  3208              ADDS     r2,r2,#8
007e0e  a1fe              ADR      r1,|L1.33288|
007e10  9000              STR      r0,[sp,#0]
007e12  48fe              LDR      r0,|L1.33292|
007e14  f7fffffe          BL       send_GSM
;;;1495   msg_sim800(); 
007e18  f7fffffe          BL       msg_sim800
;;;1496   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
007e1c  2004              MOVS     r0,#4
007e1e  4bf9              LDR      r3,|L1.33284|
007e20  3390              ADDS     r3,r3,#0x90
007e22  461a              MOV      r2,r3
007e24  3a88              SUBS     r2,r2,#0x88
007e26  a1f8              ADR      r1,|L1.33288|
007e28  9000              STR      r0,[sp,#0]
007e2a  48f9              LDR      r0,|L1.33296|
007e2c  f7fffffe          BL       send_GSM
;;;1497   GPS_COLLECT2();
007e30  f7fffffe          BL       GPS_COLLECT2
;;;1498   strcat(data,"CH\n");	
007e34  49f7              LDR      r1,|L1.33300|
007e36  48f8              LDR      r0,|L1.33304|
007e38  f7fffffe          BL       strcat
;;;1499   GPS_COLLECT2();
007e3c  f7fffffe          BL       GPS_COLLECT2
;;;1500   strcat(data,"CH\n");	
007e40  49f4              LDR      r1,|L1.33300|
007e42  48f5              LDR      r0,|L1.33304|
007e44  f7fffffe          BL       strcat
;;;1501   
;;;1502   
;;;1503   msg_sim800(); 
007e48  f7fffffe          BL       msg_sim800
;;;1504   GPS_COLLECT2();
007e4c  f7fffffe          BL       GPS_COLLECT2
;;;1505   strcat(data,"CH\n");	
007e50  49f0              LDR      r1,|L1.33300|
007e52  48f1              LDR      r0,|L1.33304|
007e54  f7fffffe          BL       strcat
;;;1506   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
007e58  f7fffffe          BL       clear
007e5c  48ec              LDR      r0,|L1.33296|
007e5e  3010              ADDS     r0,r0,#0x10
007e60  f7fffffe          BL       send_modem
007e64  f7fffffe          BL       clear
;;;1507   					delay(20);
007e68  2014              MOVS     r0,#0x14
007e6a  f7fffffe          BL       delay
;;;1508   
;;;1509   
;;;1510   msg_sim800(); 
007e6e  f7fffffe          BL       msg_sim800
;;;1511   
;;;1512   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
007e72  4bea              LDR      r3,|L1.33308|
007e74  4aea              LDR      r2,|L1.33312|
007e76  49e6              LDR      r1,|L1.33296|
007e78  3128              ADDS     r1,r1,#0x28
007e7a  48e4              LDR      r0,|L1.33292|
007e7c  f7fffffe          BL       __2sprintf
;;;1513   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
007e80  48df              LDR      r0,|L1.33280|
007e82  6800              LDR      r0,[r0,#0]  ; tmeout
007e84  4bdf              LDR      r3,|L1.33284|
007e86  461a              MOV      r2,r3
007e88  3278              ADDS     r2,r2,#0x78
007e8a  49e1              LDR      r1,|L1.33296|
007e8c  3148              ADDS     r1,r1,#0x48
007e8e  9000              STR      r0,[sp,#0]
007e90  48de              LDR      r0,|L1.33292|
007e92  f7fffffe          BL       send_GSM
;;;1514   						clear();
007e96  f7fffffe          BL       clear
;;;1515   						
;;;1516   						
;;;1517   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
007e9a  48d9              LDR      r0,|L1.33280|
007e9c  6800              LDR      r0,[r0,#0]  ; tmeout
007e9e  4bdc              LDR      r3,|L1.33296|
007ea0  3350              ADDS     r3,r3,#0x50
007ea2  4ad8              LDR      r2,|L1.33284|
007ea4  3278              ADDS     r2,r2,#0x78
007ea6  a1df              ADR      r1,|L1.33316|
007ea8  9000              STR      r0,[sp,#0]
007eaa  4618              MOV      r0,r3
007eac  3014              ADDS     r0,r0,#0x14
007eae  f7fffffe          BL       send_GSM
;;;1518   //**********************************tcp_initialization ends*************************************//							
;;;1519   									
;;;1520   						clear();		
007eb2  f7fffffe          BL       clear
;;;1521   						cond=mystrstr(uart_string_gsm,'>');
007eb6  213e              MOVS     r1,#0x3e
007eb8  48db              LDR      r0,|L1.33320|
007eba  f7fffffe          BL       mystrstr
007ebe  49db              LDR      r1,|L1.33324|
007ec0  7008              STRB     r0,[r1,#0]
;;;1522   								if(cond)	
007ec2  4608              MOV      r0,r1
007ec4  7800              LDRB     r0,[r0,#0]  ; cond
007ec6  2800              CMP      r0,#0
007ec8  d07d              BEQ      |L1.32710|
;;;1523   								{	
;;;1524   
;;;1525   									clear();
007eca  f7fffffe          BL       clear
;;;1526   									memset(uart_string_gsm,0,5000);
007ece  49d8              LDR      r1,|L1.33328|
007ed0  48d5              LDR      r0,|L1.33320|
007ed2  f7fffffe          BL       __aeabi_memclr
;;;1527   									strcat(data,"\n");
007ed6  a1d7              ADR      r1,|L1.33332|
007ed8  48cf              LDR      r0,|L1.33304|
007eda  f7fffffe          BL       strcat
;;;1528   									len=strlen(data);
007ede  48ce              LDR      r0,|L1.33304|
007ee0  f7fffffe          BL       strlen
007ee4  49d4              LDR      r1,|L1.33336|
007ee6  6008              STR      r0,[r1,#0]  ; len
;;;1529   									tout=0;
007ee8  2000              MOVS     r0,#0
007eea  49d4              LDR      r1,|L1.33340|
007eec  6008              STR      r0,[r1,#0]  ; tout
;;;1530   									k2=0;
007eee  49d4              LDR      r1,|L1.33344|
007ef0  6008              STR      r0,[r1,#0]  ; k2
;;;1531   									for(k=0;k<len;k++)
007ef2  49d4              LDR      r1,|L1.33348|
007ef4  6008              STR      r0,[r1,#0]  ; k
007ef6  e00b              B        |L1.32528|
                  |L1.32504|
;;;1532   									{
;;;1533   										uart_putchar(UART1_BASE_PTR, data[k]);
007ef8  48c7              LDR      r0,|L1.33304|
007efa  4ad2              LDR      r2,|L1.33348|
007efc  6812              LDR      r2,[r2,#0]  ; k
007efe  5c81              LDRB     r1,[r0,r2]
007f00  48d1              LDR      r0,|L1.33352|
007f02  f7fffffe          BL       uart_putchar
007f06  48cf              LDR      r0,|L1.33348|
007f08  6800              LDR      r0,[r0,#0]            ;1531  ; k
007f0a  1c40              ADDS     r0,r0,#1              ;1531
007f0c  49cd              LDR      r1,|L1.33348|
007f0e  6008              STR      r0,[r1,#0]            ;1531  ; k
                  |L1.32528|
007f10  48cc              LDR      r0,|L1.33348|
007f12  6800              LDR      r0,[r0,#0]            ;1531  ; k
007f14  49c8              LDR      r1,|L1.33336|
007f16  6809              LDR      r1,[r1,#0]            ;1531  ; len
007f18  4288              CMP      r0,r1                 ;1531
007f1a  dbed              BLT      |L1.32504|
;;;1534   									}uart_putchar(UART1_BASE_PTR, 0x1A);
007f1c  211a              MOVS     r1,#0x1a
007f1e  48ca              LDR      r0,|L1.33352|
007f20  f7fffffe          BL       uart_putchar
;;;1535   									do
007f24  bf00              NOP      
                  |L1.32550|
;;;1536   																{stcond1=strstr(uart_string_gsm,"SEND OK");
007f26  49b7              LDR      r1,|L1.33284|
007f28  3170              ADDS     r1,r1,#0x70
007f2a  48bf              LDR      r0,|L1.33320|
007f2c  f7fffffe          BL       strstr
007f30  49c6              LDR      r1,|L1.33356|
007f32  6008              STR      r0,[r1,#0]  ; stcond1
;;;1537   																	stcond2=strstr(uart_string_gsm, "ERROR");
007f34  49b3              LDR      r1,|L1.33284|
007f36  3178              ADDS     r1,r1,#0x78
007f38  48bb              LDR      r0,|L1.33320|
007f3a  f7fffffe          BL       strstr
007f3e  49c4              LDR      r1,|L1.33360|
007f40  6008              STR      r0,[r1,#0]  ; stcond2
;;;1538   																		stcond3=strstr(uart_string_gsm, "FAIL");	
007f42  49b3              LDR      r1,|L1.33296|
007f44  3158              ADDS     r1,r1,#0x58
007f46  48b8              LDR      r0,|L1.33320|
007f48  f7fffffe          BL       strstr
007f4c  49c1              LDR      r1,|L1.33364|
007f4e  6008              STR      r0,[r1,#0]  ; stcond3
;;;1539   																			stcond4=strstr(uart_string_gsm, "DEACT");	
007f50  49ac              LDR      r1,|L1.33284|
007f52  3190              ADDS     r1,r1,#0x90
007f54  48b4              LDR      r0,|L1.33320|
007f56  f7fffffe          BL       strstr
007f5a  49bf              LDR      r1,|L1.33368|
007f5c  6008              STR      r0,[r1,#0]  ; stcond4
;;;1540   																	
;;;1541   																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
007f5e  48bc              LDR      r0,|L1.33360|
007f60  6800              LDR      r0,[r0,#0]  ; stcond2
007f62  2800              CMP      r0,#0
007f64  d10f              BNE      |L1.32646|
007f66  48bb              LDR      r0,|L1.33364|
007f68  6800              LDR      r0,[r0,#0]  ; stcond3
007f6a  2800              CMP      r0,#0
007f6c  d10b              BNE      |L1.32646|
007f6e  4608              MOV      r0,r1
007f70  6800              LDR      r0,[r0,#0]  ; stcond4
007f72  2800              CMP      r0,#0
007f74  d107              BNE      |L1.32646|
007f76  48b5              LDR      r0,|L1.33356|
007f78  6800              LDR      r0,[r0,#0]  ; stcond1
007f7a  2800              CMP      r0,#0
007f7c  d103              BNE      |L1.32646|
007f7e  48af              LDR      r0,|L1.33340|
007f80  6800              LDR      r0,[r0,#0]  ; tout
007f82  2804              CMP      r0,#4
007f84  ddcf              BLE      |L1.32550|
                  |L1.32646|
;;;1542   																delay(10);clear();
007f86  200a              MOVS     r0,#0xa
007f88  f7fffffe          BL       delay
007f8c  f7fffffe          BL       clear
;;;1543   														uart_putchar(UART1_BASE_PTR,0x1A);
007f90  211a              MOVS     r1,#0x1a
007f92  48ad              LDR      r0,|L1.33352|
007f94  f7fffffe          BL       uart_putchar
;;;1544   												delay(10);
007f98  200a              MOVS     r0,#0xa
007f9a  f7fffffe          BL       delay
;;;1545   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
007f9e  211a              MOVS     r1,#0x1a
007fa0  48a9              LDR      r0,|L1.33352|
007fa2  f7fffffe          BL       uart_putchar
007fa6  211a              MOVS     r1,#0x1a
007fa8  48a7              LDR      r0,|L1.33352|
007faa  f7fffffe          BL       uart_putchar
007fae  211a              MOVS     r1,#0x1a
007fb0  48a5              LDR      r0,|L1.33352|
007fb2  f7fffffe          BL       uart_putchar
;;;1546   						
;;;1547   
;;;1548   
;;;1549   									
;;;1550   															
;;;1551   															
;;;1552   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
007fb6  211a              MOVS     r1,#0x1a
007fb8  48a3              LDR      r0,|L1.33352|
007fba  f7fffffe          BL       uart_putchar
007fbe  f7fffffe          BL       clear
007fc2  200a              MOVS     r0,#0xa
007fc4  e000              B        |L1.32712|
                  |L1.32710|
007fc6  e1a2              B        |L1.33550|
                  |L1.32712|
007fc8  f7fffffe          BL       delay
;;;1553   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
007fcc  211a              MOVS     r1,#0x1a
007fce  489e              LDR      r0,|L1.33352|
007fd0  f7fffffe          BL       uart_putchar
007fd4  f7fffffe          BL       clear
007fd8  200a              MOVS     r0,#0xa
007fda  f7fffffe          BL       delay
;;;1554   															
;;;1555   														qwe=strlen(uart_string_gsm);
007fde  4892              LDR      r0,|L1.33320|
007fe0  f7fffffe          BL       strlen
007fe4  499d              LDR      r1,|L1.33372|
007fe6  6008              STR      r0,[r1,#0]  ; qwe
;;;1556   														uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
007fe8  211a              MOVS     r1,#0x1a
007fea  4897              LDR      r0,|L1.33352|
007fec  f7fffffe          BL       uart_putchar
007ff0  f7fffffe          BL       clear
007ff4  200a              MOVS     r0,#0xa
007ff6  f7fffffe          BL       delay
;;;1557   								delay(50);
007ffa  2032              MOVS     r0,#0x32
007ffc  f7fffffe          BL       delay
;;;1558   								con1d=strstr(uart_string_gsm,"SEND OK");
008000  4980              LDR      r1,|L1.33284|
008002  3170              ADDS     r1,r1,#0x70
008004  4888              LDR      r0,|L1.33320|
008006  f7fffffe          BL       strstr
00800a  4995              LDR      r1,|L1.33376|
00800c  6008              STR      r0,[r1,#0]  ; con1d
;;;1559   								if(!(con1d) == 1 ) 
00800e  4608              MOV      r0,r1
008010  6800              LDR      r0,[r0,#0]  ; con1d
008012  2800              CMP      r0,#0
008014  d101              BNE      |L1.32794|
008016  2001              MOVS     r0,#1
008018  e000              B        |L1.32796|
                  |L1.32794|
00801a  2000              MOVS     r0,#0
                  |L1.32796|
00801c  2801              CMP      r0,#1
00801e  d17d              BNE      |L1.33052|
;;;1560   								{
;;;1561   									
;;;1562   									
;;;1563   									
;;;1564   	delay(100);
008020  2064              MOVS     r0,#0x64
008022  f7fffffe          BL       delay
;;;1565   		clear();//memset(uart_string_gsm,0,5000);
008026  f7fffffe          BL       clear
;;;1566   	
;;;1567   	memset(at_,0,100);
00802a  2164              MOVS     r1,#0x64
00802c  4877              LDR      r0,|L1.33292|
00802e  f7fffffe          BL       __aeabi_memclr
;;;1568   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
008032  4879              LDR      r0,|L1.33304|
008034  f7fffffe          BL       strlen
008038  1c44              ADDS     r4,r0,#1
00803a  4623              MOV      r3,r4
00803c  4a89              LDR      r2,|L1.33380|
00803e  4975              LDR      r1,|L1.33300|
008040  310c              ADDS     r1,r1,#0xc
008042  4872              LDR      r0,|L1.33292|
008044  f7fffffe          BL       __2sprintf
;;;1569   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
008048  2005              MOVS     r0,#5
00804a  4b6e              LDR      r3,|L1.33284|
00804c  3378              ADDS     r3,r3,#0x78
00804e  461a              MOV      r2,r3
008050  3a70              SUBS     r2,r2,#0x70
008052  a174              ADR      r1,|L1.33316|
008054  9000              STR      r0,[sp,#0]
008056  486d              LDR      r0,|L1.33292|
008058  f7fffffe          BL       send_SD
;;;1570   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1571   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1572   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1573   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1574   //	}
;;;1575   	
;;;1576   clear();	
00805c  f7fffffe          BL       clear
;;;1577   									k2=0;									//string array counter for uart 1
008060  2000              MOVS     r0,#0
008062  4977              LDR      r1,|L1.33344|
008064  6008              STR      r0,[r1,#0]  ; k2
;;;1578   									tout=0;	
008066  4975              LDR      r1,|L1.33340|
008068  6008              STR      r0,[r1,#0]  ; tout
;;;1579   		for(k=0;k<strlen(data);k++)
00806a  4976              LDR      r1,|L1.33348|
00806c  6008              STR      r0,[r1,#0]  ; k
00806e  e00b              B        |L1.32904|
                  |L1.32880|
;;;1580   		{
;;;1581   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
008070  4869              LDR      r0,|L1.33304|
008072  4a74              LDR      r2,|L1.33348|
008074  6812              LDR      r2,[r2,#0]  ; k
008076  5c81              LDRB     r1,[r0,r2]
008078  4873              LDR      r0,|L1.33352|
00807a  f7fffffe          BL       uart_putchar
00807e  4871              LDR      r0,|L1.33348|
008080  6800              LDR      r0,[r0,#0]            ;1579  ; k
008082  1c40              ADDS     r0,r0,#1              ;1579
008084  496f              LDR      r1,|L1.33348|
008086  6008              STR      r0,[r1,#0]            ;1579  ; k
                  |L1.32904|
008088  4863              LDR      r0,|L1.33304|
00808a  f7fffffe          BL       strlen
00808e  496d              LDR      r1,|L1.33348|
008090  6809              LDR      r1,[r1,#0]            ;1579  ; k
008092  4288              CMP      r0,r1                 ;1579
008094  d8ec              BHI      |L1.32880|
;;;1582   		}	
;;;1583   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
008096  210a              MOVS     r1,#0xa
008098  486b              LDR      r0,|L1.33352|
00809a  f7fffffe          BL       uart_putchar
00809e  210a              MOVS     r1,#0xa
0080a0  4869              LDR      r0,|L1.33352|
0080a2  f7fffffe          BL       uart_putchar
0080a6  210a              MOVS     r1,#0xa
0080a8  4867              LDR      r0,|L1.33352|
0080aa  f7fffffe          BL       uart_putchar
0080ae  210a              MOVS     r1,#0xa
0080b0  4865              LDR      r0,|L1.33352|
0080b2  f7fffffe          BL       uart_putchar
0080b6  210a              MOVS     r1,#0xa
0080b8  4863              LDR      r0,|L1.33352|
0080ba  f7fffffe          BL       uart_putchar
0080be  210a              MOVS     r1,#0xa
0080c0  4861              LDR      r0,|L1.33352|
0080c2  f7fffffe          BL       uart_putchar
0080c6  210a              MOVS     r1,#0xa
0080c8  485f              LDR      r0,|L1.33352|
0080ca  f7fffffe          BL       uart_putchar
0080ce  210a              MOVS     r1,#0xa
0080d0  485d              LDR      r0,|L1.33352|
0080d2  f7fffffe          BL       uart_putchar
0080d6  210a              MOVS     r1,#0xa
0080d8  485b              LDR      r0,|L1.33352|
0080da  f7fffffe          BL       uart_putchar
0080de  210a              MOVS     r1,#0xa
0080e0  4859              LDR      r0,|L1.33352|
0080e2  f7fffffe          BL       uart_putchar
0080e6  210a              MOVS     r1,#0xa
0080e8  4857              LDR      r0,|L1.33352|
0080ea  f7fffffe          BL       uart_putchar
0080ee  210a              MOVS     r1,#0xa
0080f0  4855              LDR      r0,|L1.33352|
0080f2  f7fffffe          BL       uart_putchar
0080f6  210a              MOVS     r1,#0xa
0080f8  4853              LDR      r0,|L1.33352|
0080fa  f7fffffe          BL       uart_putchar
0080fe  210a              MOVS     r1,#0xa
008100  4851              LDR      r0,|L1.33352|
008102  f7fffffe          BL       uart_putchar
008106  210a              MOVS     r1,#0xa
008108  484f              LDR      r0,|L1.33352|
00810a  f7fffffe          BL       uart_putchar
00810e  210a              MOVS     r1,#0xa
008110  484d              LDR      r0,|L1.33352|
008112  f7fffffe          BL       uart_putchar
008116  210a              MOVS     r1,#0xa
008118  484b              LDR      r0,|L1.33352|
00811a  e000              B        |L1.33054|
                  |L1.33052|
00811c  e0f4              B        |L1.33544|
                  |L1.33054|
00811e  f7fffffe          BL       uart_putchar
008122  210a              MOVS     r1,#0xa
008124  4848              LDR      r0,|L1.33352|
008126  f7fffffe          BL       uart_putchar
00812a  210a              MOVS     r1,#0xa
00812c  4846              LDR      r0,|L1.33352|
00812e  f7fffffe          BL       uart_putchar
008132  210a              MOVS     r1,#0xa
008134  4844              LDR      r0,|L1.33352|
008136  f7fffffe          BL       uart_putchar
00813a  210a              MOVS     r1,#0xa
00813c  4842              LDR      r0,|L1.33352|
00813e  f7fffffe          BL       uart_putchar
008142  210a              MOVS     r1,#0xa
008144  4840              LDR      r0,|L1.33352|
008146  f7fffffe          BL       uart_putchar
00814a  210a              MOVS     r1,#0xa
00814c  483e              LDR      r0,|L1.33352|
00814e  f7fffffe          BL       uart_putchar
008152  210a              MOVS     r1,#0xa
008154  483c              LDR      r0,|L1.33352|
008156  f7fffffe          BL       uart_putchar
00815a  210a              MOVS     r1,#0xa
00815c  483a              LDR      r0,|L1.33352|
00815e  f7fffffe          BL       uart_putchar
008162  210a              MOVS     r1,#0xa
008164  4838              LDR      r0,|L1.33352|
008166  f7fffffe          BL       uart_putchar
00816a  210a              MOVS     r1,#0xa
00816c  4836              LDR      r0,|L1.33352|
00816e  f7fffffe          BL       uart_putchar
008172  210a              MOVS     r1,#0xa
008174  4834              LDR      r0,|L1.33352|
008176  f7fffffe          BL       uart_putchar
00817a  210a              MOVS     r1,#0xa
00817c  4832              LDR      r0,|L1.33352|
00817e  f7fffffe          BL       uart_putchar
008182  210a              MOVS     r1,#0xa
008184  4830              LDR      r0,|L1.33352|
008186  f7fffffe          BL       uart_putchar
00818a  210a              MOVS     r1,#0xa
00818c  482e              LDR      r0,|L1.33352|
00818e  f7fffffe          BL       uart_putchar
008192  210a              MOVS     r1,#0xa
008194  482c              LDR      r0,|L1.33352|
008196  f7fffffe          BL       uart_putchar
00819a  210a              MOVS     r1,#0xa
00819c  482a              LDR      r0,|L1.33352|
00819e  f7fffffe          BL       uart_putchar
0081a2  210a              MOVS     r1,#0xa
0081a4  4828              LDR      r0,|L1.33352|
0081a6  f7fffffe          BL       uart_putchar
0081aa  210a              MOVS     r1,#0xa
0081ac  4826              LDR      r0,|L1.33352|
0081ae  f7fffffe          BL       uart_putchar
0081b2  210a              MOVS     r1,#0xa
0081b4  4824              LDR      r0,|L1.33352|
0081b6  f7fffffe          BL       uart_putchar
0081ba  210a              MOVS     r1,#0xa
0081bc  4822              LDR      r0,|L1.33352|
0081be  f7fffffe          BL       uart_putchar
0081c2  210a              MOVS     r1,#0xa
0081c4  4820              LDR      r0,|L1.33352|
0081c6  f7fffffe          BL       uart_putchar
0081ca  210a              MOVS     r1,#0xa
0081cc  481e              LDR      r0,|L1.33352|
0081ce  f7fffffe          BL       uart_putchar
0081d2  210a              MOVS     r1,#0xa
0081d4  481c              LDR      r0,|L1.33352|
0081d6  f7fffffe          BL       uart_putchar
0081da  210a              MOVS     r1,#0xa
0081dc  481a              LDR      r0,|L1.33352|
0081de  f7fffffe          BL       uart_putchar
0081e2  210a              MOVS     r1,#0xa
0081e4  4818              LDR      r0,|L1.33352|
0081e6  f7fffffe          BL       uart_putchar
0081ea  210a              MOVS     r1,#0xa
0081ec  4816              LDR      r0,|L1.33352|
0081ee  f7fffffe          BL       uart_putchar
0081f2  210a              MOVS     r1,#0xa
0081f4  4814              LDR      r0,|L1.33352|
0081f6  f7fffffe          BL       uart_putchar
0081fa  210a              MOVS     r1,#0xa
0081fc  4812              LDR      r0,|L1.33352|
0081fe  e033              B        |L1.33384|
                  |L1.33280|
                          DCD      tmeout
                  |L1.33284|
                          DCD      ||.text||+0x898
                  |L1.33288|
008208  4f4b00            DCB      "OK",0
00820b  00                DCB      0
                  |L1.33292|
                          DCD      at_
                  |L1.33296|
                          DCD      ||.text||+0x1234
                  |L1.33300|
                          DCD      ||.text||+0xd44
                  |L1.33304|
                          DCD      data
                  |L1.33308|
                          DCD      port
                  |L1.33312|
                          DCD      ||ip||
                  |L1.33316|
008224  3e00              DCB      ">",0
008226  00                DCB      0
008227  00                DCB      0
                  |L1.33320|
                          DCD      uart_string_gsm
                  |L1.33324|
                          DCD      cond
                  |L1.33328|
                          DCD      0x00001388
                  |L1.33332|
008234  0a00              DCB      "\n",0
008236  00                DCB      0
008237  00                DCB      0
                  |L1.33336|
                          DCD      len
                  |L1.33340|
                          DCD      tout
                  |L1.33344|
                          DCD      ||k2||
                  |L1.33348|
                          DCD      k
                  |L1.33352|
                          DCD      0x4006b000
                  |L1.33356|
                          DCD      stcond1
                  |L1.33360|
                          DCD      stcond2
                  |L1.33364|
                          DCD      stcond3
                  |L1.33368|
                          DCD      stcond4
                  |L1.33372|
                          DCD      qwe
                  |L1.33376|
                          DCD      con1d
                  |L1.33380|
                          DCD      drive
                  |L1.33384|
008268  f7fffffe          BL       uart_putchar
00826c  210a              MOVS     r1,#0xa
00826e  48cf              LDR      r0,|L1.34220|
008270  f7fffffe          BL       uart_putchar
008274  210a              MOVS     r1,#0xa
008276  48cd              LDR      r0,|L1.34220|
008278  f7fffffe          BL       uart_putchar
00827c  210a              MOVS     r1,#0xa
00827e  48cb              LDR      r0,|L1.34220|
008280  f7fffffe          BL       uart_putchar
008284  210a              MOVS     r1,#0xa
008286  48c9              LDR      r0,|L1.34220|
008288  f7fffffe          BL       uart_putchar
00828c  210a              MOVS     r1,#0xa
00828e  48c7              LDR      r0,|L1.34220|
008290  f7fffffe          BL       uart_putchar
008294  210a              MOVS     r1,#0xa
008296  48c5              LDR      r0,|L1.34220|
008298  f7fffffe          BL       uart_putchar
00829c  210a              MOVS     r1,#0xa
00829e  48c3              LDR      r0,|L1.34220|
0082a0  f7fffffe          BL       uart_putchar
0082a4  210a              MOVS     r1,#0xa
0082a6  48c1              LDR      r0,|L1.34220|
0082a8  f7fffffe          BL       uart_putchar
0082ac  210a              MOVS     r1,#0xa
0082ae  48bf              LDR      r0,|L1.34220|
0082b0  f7fffffe          BL       uart_putchar
0082b4  210a              MOVS     r1,#0xa
0082b6  48bd              LDR      r0,|L1.34220|
0082b8  f7fffffe          BL       uart_putchar
0082bc  210a              MOVS     r1,#0xa
0082be  48bb              LDR      r0,|L1.34220|
0082c0  f7fffffe          BL       uart_putchar
0082c4  210a              MOVS     r1,#0xa
0082c6  48b9              LDR      r0,|L1.34220|
0082c8  f7fffffe          BL       uart_putchar
;;;1584   									//memset(data,0,1000);
;;;1585   														//timer counts to wait for characters in uart 1 									
;;;1586   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0082cc  bf00              NOP      
                  |L1.33486|
0082ce  49b8              LDR      r1,|L1.34224|
0082d0  48b8              LDR      r0,|L1.34228|
0082d2  f7fffffe          BL       strstr
0082d6  2800              CMP      r0,#0
0082d8  d109              BNE      |L1.33518|
0082da  49b7              LDR      r1,|L1.34232|
0082dc  48b5              LDR      r0,|L1.34228|
0082de  f7fffffe          BL       strstr
0082e2  2800              CMP      r0,#0
0082e4  d103              BNE      |L1.33518|
0082e6  48b5              LDR      r0,|L1.34236|
0082e8  6800              LDR      r0,[r0,#0]  ; tout
0082ea  2805              CMP      r0,#5
0082ec  ddef              BLE      |L1.33486|
                  |L1.33518|
;;;1587   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1588   									}
;;;1589   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0082ee  f7fffffe          BL       clear
;;;1590   									//clear();
;;;1591   									memset(data,0,strlen(data));
0082f2  48b3              LDR      r0,|L1.34240|
0082f4  f7fffffe          BL       strlen
0082f8  4604              MOV      r4,r0
0082fa  4621              MOV      r1,r4
0082fc  48b0              LDR      r0,|L1.34240|
0082fe  f7fffffe          BL       __aeabi_memclr
;;;1592   									clear();
008302  f7fffffe          BL       clear
008306  e143              B        |L1.34192|
                  |L1.33544|
;;;1593   									
;;;1594   				
;;;1595   								}else{send_chunk();}	
008308  f7fffffe          BL       send_chunk
00830c  e140              B        |L1.34192|
                  |L1.33550|
;;;1596   
;;;1597   																
;;;1598   								}else{
;;;1599   								
;;;1600   								
;;;1601   								
;;;1602   	delay(100);
00830e  2064              MOVS     r0,#0x64
008310  f7fffffe          BL       delay
;;;1603   		clear();//memset(uart_string_gsm,0,5000);
008314  f7fffffe          BL       clear
;;;1604   	
;;;1605   	memset(at_,0,100);
008318  2164              MOVS     r1,#0x64
00831a  48aa              LDR      r0,|L1.34244|
00831c  f7fffffe          BL       __aeabi_memclr
;;;1606   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
008320  48a7              LDR      r0,|L1.34240|
008322  f7fffffe          BL       strlen
008326  1c44              ADDS     r4,r0,#1
008328  4623              MOV      r3,r4
00832a  4aa7              LDR      r2,|L1.34248|
00832c  49a0              LDR      r1,|L1.34224|
00832e  3938              SUBS     r1,r1,#0x38
008330  48a4              LDR      r0,|L1.34244|
008332  f7fffffe          BL       __2sprintf
;;;1607   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
008336  2005              MOVS     r0,#5
008338  4b9f              LDR      r3,|L1.34232|
00833a  461a              MOV      r2,r3
00833c  3a70              SUBS     r2,r2,#0x70
00833e  a1a3              ADR      r1,|L1.34252|
008340  9000              STR      r0,[sp,#0]
008342  48a0              LDR      r0,|L1.34244|
008344  f7fffffe          BL       send_SD
;;;1608   	
;;;1609   clear();	
008348  f7fffffe          BL       clear
;;;1610   									k2=0;									//string array counter for uart 1
00834c  2000              MOVS     r0,#0
00834e  49a0              LDR      r1,|L1.34256|
008350  6008              STR      r0,[r1,#0]  ; k2
;;;1611   									tout=0;	
008352  499a              LDR      r1,|L1.34236|
008354  6008              STR      r0,[r1,#0]  ; tout
;;;1612   		for(k=0;k<strlen(data);k++)
008356  499f              LDR      r1,|L1.34260|
008358  6008              STR      r0,[r1,#0]  ; k
00835a  e00b              B        |L1.33652|
                  |L1.33628|
;;;1613   		{
;;;1614   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00835c  4898              LDR      r0,|L1.34240|
00835e  4a9d              LDR      r2,|L1.34260|
008360  6812              LDR      r2,[r2,#0]  ; k
008362  5c81              LDRB     r1,[r0,r2]
008364  4891              LDR      r0,|L1.34220|
008366  f7fffffe          BL       uart_putchar
00836a  489a              LDR      r0,|L1.34260|
00836c  6800              LDR      r0,[r0,#0]            ;1612  ; k
00836e  1c40              ADDS     r0,r0,#1              ;1612
008370  4998              LDR      r1,|L1.34260|
008372  6008              STR      r0,[r1,#0]            ;1612  ; k
                  |L1.33652|
008374  4892              LDR      r0,|L1.34240|
008376  f7fffffe          BL       strlen
00837a  4996              LDR      r1,|L1.34260|
00837c  6809              LDR      r1,[r1,#0]            ;1612  ; k
00837e  4288              CMP      r0,r1                 ;1612
008380  d8ec              BHI      |L1.33628|
;;;1615   		}	
;;;1616   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
008382  210a              MOVS     r1,#0xa
008384  4889              LDR      r0,|L1.34220|
008386  f7fffffe          BL       uart_putchar
00838a  210a              MOVS     r1,#0xa
00838c  4887              LDR      r0,|L1.34220|
00838e  f7fffffe          BL       uart_putchar
008392  210a              MOVS     r1,#0xa
008394  4885              LDR      r0,|L1.34220|
008396  f7fffffe          BL       uart_putchar
00839a  210a              MOVS     r1,#0xa
00839c  4883              LDR      r0,|L1.34220|
00839e  f7fffffe          BL       uart_putchar
0083a2  210a              MOVS     r1,#0xa
0083a4  4881              LDR      r0,|L1.34220|
0083a6  f7fffffe          BL       uart_putchar
0083aa  210a              MOVS     r1,#0xa
0083ac  487f              LDR      r0,|L1.34220|
0083ae  f7fffffe          BL       uart_putchar
0083b2  210a              MOVS     r1,#0xa
0083b4  487d              LDR      r0,|L1.34220|
0083b6  f7fffffe          BL       uart_putchar
0083ba  210a              MOVS     r1,#0xa
0083bc  487b              LDR      r0,|L1.34220|
0083be  f7fffffe          BL       uart_putchar
0083c2  210a              MOVS     r1,#0xa
0083c4  4879              LDR      r0,|L1.34220|
0083c6  f7fffffe          BL       uart_putchar
0083ca  210a              MOVS     r1,#0xa
0083cc  4877              LDR      r0,|L1.34220|
0083ce  f7fffffe          BL       uart_putchar
0083d2  210a              MOVS     r1,#0xa
0083d4  4875              LDR      r0,|L1.34220|
0083d6  f7fffffe          BL       uart_putchar
0083da  210a              MOVS     r1,#0xa
0083dc  4873              LDR      r0,|L1.34220|
0083de  f7fffffe          BL       uart_putchar
0083e2  210a              MOVS     r1,#0xa
0083e4  4871              LDR      r0,|L1.34220|
0083e6  f7fffffe          BL       uart_putchar
0083ea  210a              MOVS     r1,#0xa
0083ec  486f              LDR      r0,|L1.34220|
0083ee  f7fffffe          BL       uart_putchar
0083f2  210a              MOVS     r1,#0xa
0083f4  486d              LDR      r0,|L1.34220|
0083f6  f7fffffe          BL       uart_putchar
0083fa  210a              MOVS     r1,#0xa
0083fc  486b              LDR      r0,|L1.34220|
0083fe  f7fffffe          BL       uart_putchar
008402  210a              MOVS     r1,#0xa
008404  4869              LDR      r0,|L1.34220|
008406  f7fffffe          BL       uart_putchar
00840a  210a              MOVS     r1,#0xa
00840c  4867              LDR      r0,|L1.34220|
00840e  f7fffffe          BL       uart_putchar
008412  210a              MOVS     r1,#0xa
008414  4865              LDR      r0,|L1.34220|
008416  f7fffffe          BL       uart_putchar
00841a  210a              MOVS     r1,#0xa
00841c  4863              LDR      r0,|L1.34220|
00841e  f7fffffe          BL       uart_putchar
008422  210a              MOVS     r1,#0xa
008424  4861              LDR      r0,|L1.34220|
008426  f7fffffe          BL       uart_putchar
00842a  210a              MOVS     r1,#0xa
00842c  485f              LDR      r0,|L1.34220|
00842e  f7fffffe          BL       uart_putchar
008432  210a              MOVS     r1,#0xa
008434  485d              LDR      r0,|L1.34220|
008436  f7fffffe          BL       uart_putchar
00843a  210a              MOVS     r1,#0xa
00843c  485b              LDR      r0,|L1.34220|
00843e  f7fffffe          BL       uart_putchar
008442  210a              MOVS     r1,#0xa
008444  4859              LDR      r0,|L1.34220|
008446  f7fffffe          BL       uart_putchar
00844a  210a              MOVS     r1,#0xa
00844c  4857              LDR      r0,|L1.34220|
00844e  f7fffffe          BL       uart_putchar
008452  210a              MOVS     r1,#0xa
008454  4855              LDR      r0,|L1.34220|
008456  f7fffffe          BL       uart_putchar
00845a  210a              MOVS     r1,#0xa
00845c  4853              LDR      r0,|L1.34220|
00845e  f7fffffe          BL       uart_putchar
008462  210a              MOVS     r1,#0xa
008464  4851              LDR      r0,|L1.34220|
008466  f7fffffe          BL       uart_putchar
00846a  210a              MOVS     r1,#0xa
00846c  484f              LDR      r0,|L1.34220|
00846e  f7fffffe          BL       uart_putchar
008472  210a              MOVS     r1,#0xa
008474  484d              LDR      r0,|L1.34220|
008476  f7fffffe          BL       uart_putchar
00847a  210a              MOVS     r1,#0xa
00847c  484b              LDR      r0,|L1.34220|
00847e  f7fffffe          BL       uart_putchar
008482  210a              MOVS     r1,#0xa
008484  4849              LDR      r0,|L1.34220|
008486  f7fffffe          BL       uart_putchar
00848a  210a              MOVS     r1,#0xa
00848c  4847              LDR      r0,|L1.34220|
00848e  f7fffffe          BL       uart_putchar
008492  210a              MOVS     r1,#0xa
008494  4845              LDR      r0,|L1.34220|
008496  f7fffffe          BL       uart_putchar
00849a  210a              MOVS     r1,#0xa
00849c  4843              LDR      r0,|L1.34220|
00849e  f7fffffe          BL       uart_putchar
0084a2  210a              MOVS     r1,#0xa
0084a4  4841              LDR      r0,|L1.34220|
0084a6  f7fffffe          BL       uart_putchar
0084aa  210a              MOVS     r1,#0xa
0084ac  483f              LDR      r0,|L1.34220|
0084ae  f7fffffe          BL       uart_putchar
0084b2  210a              MOVS     r1,#0xa
0084b4  483d              LDR      r0,|L1.34220|
0084b6  f7fffffe          BL       uart_putchar
0084ba  210a              MOVS     r1,#0xa
0084bc  483b              LDR      r0,|L1.34220|
0084be  f7fffffe          BL       uart_putchar
0084c2  210a              MOVS     r1,#0xa
0084c4  4839              LDR      r0,|L1.34220|
0084c6  f7fffffe          BL       uart_putchar
0084ca  210a              MOVS     r1,#0xa
0084cc  4837              LDR      r0,|L1.34220|
0084ce  f7fffffe          BL       uart_putchar
0084d2  210a              MOVS     r1,#0xa
0084d4  4835              LDR      r0,|L1.34220|
0084d6  f7fffffe          BL       uart_putchar
0084da  210a              MOVS     r1,#0xa
0084dc  4833              LDR      r0,|L1.34220|
0084de  f7fffffe          BL       uart_putchar
0084e2  210a              MOVS     r1,#0xa
0084e4  4831              LDR      r0,|L1.34220|
0084e6  f7fffffe          BL       uart_putchar
0084ea  210a              MOVS     r1,#0xa
0084ec  482f              LDR      r0,|L1.34220|
0084ee  f7fffffe          BL       uart_putchar
0084f2  210a              MOVS     r1,#0xa
0084f4  482d              LDR      r0,|L1.34220|
0084f6  f7fffffe          BL       uart_putchar
0084fa  210a              MOVS     r1,#0xa
0084fc  482b              LDR      r0,|L1.34220|
0084fe  f7fffffe          BL       uart_putchar
008502  210a              MOVS     r1,#0xa
008504  4829              LDR      r0,|L1.34220|
008506  f7fffffe          BL       uart_putchar
00850a  210a              MOVS     r1,#0xa
00850c  4827              LDR      r0,|L1.34220|
00850e  f7fffffe          BL       uart_putchar
008512  210a              MOVS     r1,#0xa
008514  4825              LDR      r0,|L1.34220|
008516  f7fffffe          BL       uart_putchar
00851a  210a              MOVS     r1,#0xa
00851c  4823              LDR      r0,|L1.34220|
00851e  f7fffffe          BL       uart_putchar
008522  210a              MOVS     r1,#0xa
008524  4821              LDR      r0,|L1.34220|
008526  f7fffffe          BL       uart_putchar
00852a  210a              MOVS     r1,#0xa
00852c  481f              LDR      r0,|L1.34220|
00852e  f7fffffe          BL       uart_putchar
008532  210a              MOVS     r1,#0xa
008534  481d              LDR      r0,|L1.34220|
008536  f7fffffe          BL       uart_putchar
00853a  210a              MOVS     r1,#0xa
00853c  481b              LDR      r0,|L1.34220|
00853e  f7fffffe          BL       uart_putchar
008542  210a              MOVS     r1,#0xa
008544  4819              LDR      r0,|L1.34220|
008546  f7fffffe          BL       uart_putchar
;;;1617   								
;;;1618   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00854a  bf00              NOP      
                  |L1.34124|
00854c  4918              LDR      r1,|L1.34224|
00854e  4819              LDR      r0,|L1.34228|
008550  f7fffffe          BL       strstr
008554  2800              CMP      r0,#0
008556  d109              BNE      |L1.34156|
008558  4917              LDR      r1,|L1.34232|
00855a  4816              LDR      r0,|L1.34228|
00855c  f7fffffe          BL       strstr
008560  2800              CMP      r0,#0
008562  d103              BNE      |L1.34156|
008564  4815              LDR      r0,|L1.34236|
008566  6800              LDR      r0,[r0,#0]  ; tout
008568  2805              CMP      r0,#5
00856a  ddef              BLE      |L1.34124|
                  |L1.34156|
;;;1619   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1620   									}
;;;1621   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00856c  f7fffffe          BL       clear
;;;1622   									//clear();
;;;1623   									memset(data,0,strlen(data));
008570  4813              LDR      r0,|L1.34240|
008572  f7fffffe          BL       strlen
008576  4604              MOV      r4,r0
008578  4621              MOV      r1,r4
00857a  4811              LDR      r0,|L1.34240|
00857c  f7fffffe          BL       __aeabi_memclr
;;;1624   									clear();
008580  f7fffffe          BL       clear
;;;1625   
;;;1626   								
;;;1627   								
;;;1628   								
;;;1629   								
;;;1630   								
;;;1631   								//log_it();
;;;1632   									logged=1;}			//
008584  2001              MOVS     r0,#1
008586  4914              LDR      r1,|L1.34264|
008588  6008              STR      r0,[r1,#0]  ; logged
00858a  e001              B        |L1.34192|
                  |L1.34188|
;;;1633   
;;;1634   							
;;;1635   
;;;1636   	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1637   	else
;;;1638   	{
;;;1639   		send_chunk();
00858c  f7fffffe          BL       send_chunk
                  |L1.34192|
;;;1640   	}		
;;;1641   								
;;;1642   								
;;;1643   								
;;;1644   	memset(data,0,strlen(data));	
008590  480b              LDR      r0,|L1.34240|
008592  f7fffffe          BL       strlen
008596  4604              MOV      r4,r0
008598  4621              MOV      r1,r4
00859a  4809              LDR      r0,|L1.34240|
00859c  f7fffffe          BL       __aeabi_memclr
;;;1645   	uart_putchar(UART1_BASE_PTR, 0x1A);
0085a0  211a              MOVS     r1,#0x1a
0085a2  4802              LDR      r0,|L1.34220|
0085a4  f7fffffe          BL       uart_putchar
;;;1646   
;;;1647   
;;;1648   }
0085a8  bd38              POP      {r3-r5,pc}
;;;1649   
                          ENDP

0085aa  0000              DCW      0x0000
                  |L1.34220|
                          DCD      0x4006b000
                  |L1.34224|
                          DCD      ||.text||+0xd88
                  |L1.34228|
                          DCD      uart_string_gsm
                  |L1.34232|
                          DCD      ||.text||+0x910
                  |L1.34236|
                          DCD      tout
                  |L1.34240|
                          DCD      data
                  |L1.34244|
                          DCD      at_
                  |L1.34248|
                          DCD      drive
                  |L1.34252|
0085cc  3e00              DCB      ">",0
0085ce  00                DCB      0
0085cf  00                DCB      0
                  |L1.34256|
                          DCD      ||k2||
                  |L1.34260|
                          DCD      k
                  |L1.34264|
                          DCD      logged

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        30
                  latest
                          %        10
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  uart_string_gps
                          %        3000
                  data2
                          %        300
                  exception
                          %        200
                  at_
                          %        100
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  _rtcticks
                          %        10
                  imei
                          %        20
                  sd_data
                          %        1400
                  data_balance
                          %        200

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4552524f          DCB      "ERROR:",0
000004  523a00  
000007  00                DCB      0
000008  4552524f          DCB      "ERROR\r\n",0
00000c  520d0a00
000010  4f4b00            DCB      "OK",0
000013  00                DCB      0
000014  0a41542b          DCB      "\nAT+FSCREATE=C:\\IGN.TXT\r\n",0
000018  46534352
00001c  45415445
000020  3d433a5c
000024  49474e2e
000028  5458540d
00002c  0a00    
00002e  00                DCB      0
00002f  00                DCB      0
000030  3e00              DCB      ">",0
000032  00                DCB      0
000033  00                DCB      0
000034  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n",0
000038  2b465357
00003c  52495445
000040  3d433a5c
000044  49474e2e
000048  5458542c
00004c  302c362c
000050  31300d0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  4f4b0d0a          DCB      "OK\r\n",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
000060  0a494f46          DCB      "\nIOFF\n\n\n\n",0
000064  460a0a0a
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0
00006c  0a494f4e          DCB      "\nION\n\n\n\n",0
000070  0a0a0a0a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
00007c  46534352
000080  45415445
000084  3d433a5c
000088  49505f50
00008c  4f52542e
000090  5458540d
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
000098  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",0
00009c  2b465357
0000a0  52495445
0000a4  3d433a5c
0000a8  49505f50
0000ac  4f52542e
0000b0  5458542c
0000b4  302c2564
0000b8  2c31300d
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0
0000c0  7c49507c          DCB      "|IP|",0
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
0000c8  7c504f52          DCB      "|PORT|",0
0000cc  547c00  
0000cf  00                DCB      0
0000d0  7c00              DCB      "|",0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  4552524f          DCB      "ERROR",0
0000d8  5200    
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  524d4300          DCB      "RMC",0
0000e0  47474100          DCB      "GGA",0
0000e4  0d0a0a0a          DCB      "\r\n\n\nAT+GSN\r\n",0
0000e8  41542b47
0000ec  534e0d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
0000f4  256600            DCB      "%f",0
0000f7  00                DCB      0
0000f8  2c2000            DCB      ", ",0
0000fb  00                DCB      0
0000fc  24477847          DCB      "$$GxGGA",0
000100  474100  
000103  00                DCB      0
000104  2c202447          DCB      ", $$GxRMC",0
000108  78524d43
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
000110  2c00              DCB      ",",0
000112  00                DCB      0
000113  00                DCB      0
000114  2c42522a          DCB      ",BR*",0
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
00011c  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
000120  46534352
000124  45415445
000128  3d433a5c
00012c  494e5445
000130  5256414c
000134  2e545854
000138  0d0a00  
00013b  00                DCB      0
00013c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",0
000140  2b465357
000144  52495445
000148  3d433a5c
00014c  494e5445
000150  5256414c
000154  2e545854
000158  2c302c25
00015c  642c3130
000160  0d0a00  
000163  00                DCB      0
000164  7c494e54          DCB      "|INTERVAL|",0
000168  45525641
00016c  4c7c00  
00016f  00                DCB      0
000170  0a41542b          DCB      "\nAT+FSCREATE=C:\\APN.TXT\r\n",0
000174  46534352
000178  45415445
00017c  3d433a5c
000180  41504e2e
000184  5458540d
000188  0a00    
00018a  00                DCB      0
00018b  00                DCB      0
00018c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",0
000190  2b465357
000194  52495445
000198  3d433a5c
00019c  41504e2e
0001a0  5458542c
0001a4  302c2564
0001a8  2c31300d
0001ac  0a00    
0001ae  00                DCB      0
0001af  00                DCB      0
0001b0  0a0a4154          DCB      "\n\nAT\r\n",0
0001b4  0d0a00  
0001b7  00                DCB      0
0001b8  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
0001bc  2b475356
0001c0  0d0a00  
0001c3  00                DCB      0
0001c4  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
0001c8  2b434d47
0001cc  463d310a
0001d0  0a00    
0001d2  00                DCB      0
0001d3  00                DCB      0
0001d4  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
0001d8  2b435343
0001dc  413f0d0a
0001e0  00      
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
0001e4  0d0a4154          DCB      "\r\nAT+CMGR=1\r\n",0
0001e8  2b434d47
0001ec  523d310d
0001f0  0a00    
0001f2  00                DCB      0
0001f3  00                DCB      0
0001f4  4f574e45          DCB      "OWNER",0
0001f8  5200    
0001fa  00                DCB      0
0001fb  00                DCB      0
0001fc  4c4f4341          DCB      "LOCATION",0
000200  54494f4e
000204  00      
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0
000208  494e5445          DCB      "INTERVAL",0
00020c  5256414c
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
000214  53544152          DCB      "START",0
000218  5400    
00021a  00                DCB      0
00021b  00                DCB      0
00021c  4f574e45          DCB      "OWNER1",0
000220  523100  
000223  00                DCB      0
000224  4f574e45          DCB      "OWNER2",0
000228  523200  
00022b  00                DCB      0
00022c  4f574e45          DCB      "OWNER3",0
000230  523300  
000233  00                DCB      0
000234  44454255          DCB      "DEBUG",0
000238  4700    
00023a  00                DCB      0
00023b  00                DCB      0
00023c  52455345          DCB      "RESET",0
000240  5400    
000242  00                DCB      0
000243  00                DCB      0
000244  495000            DCB      "IP",0
000247  00                DCB      0
000248  4655454c          DCB      "FUEL ON",0
00024c  204f4e00
000250  4655454c          DCB      "FUEL OFF",0
000254  204f4646
000258  00      
000259  00                DCB      0
00025a  00                DCB      0
00025b  00                DCB      0
00025c  49474e49          DCB      "IGNITION ON",0
000260  54494f4e
000264  204f4e00
000268  49474e49          DCB      "IGNITION OFF",0
00026c  54494f4e
000270  204f4646
000274  00      
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
000278  0a436f6f          DCB      "\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://"
00027c  7264696e
000280  61746573
000284  203a2025
000288  73204e2c
00028c  20257320
000290  450a5370
000294  65656420
000298  3a202573
00029c  206b6d70
0002a0  680a0a68
0002a4  74747073
0002a8  3a2f2f  
0002ab  7777772e          DCB      "www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",0
0002af  676f6f67
0002b3  6c652e63
0002b7  6f6d2f73
0002bb  65617263
0002bf  683f713d
0002c3  25732563
0002c7  32432573
0002cb  2669653d
0002cf  7574662d
0002d3  38266f65
0002d7  3d757466
0002db  2d380a00
0002df  00                DCB      0
0002e0  0d0a4154          DCB      "\r\nAT+CMGD=1,4\r\n",0
0002e4  2b434d47
0002e8  443d312c
0002ec  340d0a00
0002f0  0a41542b          DCB      "\nAT+FSCREATE=D:\\LOG.TXT\r\n",0
0002f4  46534352
0002f8  45415445
0002fc  3d443a5c
000300  4c4f472e
000304  5458540d
000308  0a00    
00030a  00                DCB      0
00030b  00                DCB      0
00030c  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
000310  46534352
000314  45415445
000318  3d433a5c
00031c  4c4f472e
000320  5458540d
000324  0a00    
000326  00                DCB      0
000327  00                DCB      0
000328  3130342e          DCB      "104.236.203.4",0
00032c  3233362e
000330  3230332e
000334  3400    
000336  00                DCB      0
000337  00                DCB      0
000338  35353535          DCB      "5555",0
00033c  00      
00033d  00                DCB      0
00033e  00                DCB      0
00033f  00                DCB      0
000340  3500              DCB      "5",0
000342  00                DCB      0
000343  00                DCB      0
000344  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n\r\n",0
000348  542b434d
00034c  47443d31
000350  2c340d0a
000354  0d0a00  
000357  00                DCB      0
000358  257300            DCB      "%s",0
00035b  00                DCB      0
00035c  0a00              DCB      "\n",0
00035e  00                DCB      0
00035f  00                DCB      0
000360  43480a00          DCB      "CH\n",0
000364  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
000368  2b465357
00036c  52495445
000370  3d25735c
000374  4c4f472e
000378  5458542c
00037c  312c2564
000380  2c31300a
000384  0a00    
000386  00                DCB      0
000387  00                DCB      0
000388  0a0a2041          DCB      "\n\n AT+CFUN=1,1\r\n",0
00038c  542b4346
000390  554e3d31
000394  2c310d0a
000398  00      
000399  00                DCB      0
00039a  00                DCB      0
00039b  00                DCB      0
00039c  0d0d0a41          DCB      "\r\r\nAT+CMGD=1,4\r\n\n\n\n\n",0
0003a0  542b434d
0003a4  47443d31
0003a8  2c340d0a
0003ac  0a0a0a0a
0003b0  00      
0003b1  00                DCB      0
0003b2  00                DCB      0
0003b3  00                DCB      0
0003b4  0d0a4154          DCB      "\r\nAT+CPBW=1,""%s"",129,""OWNER1""\r\n",0
0003b8  2b435042
0003bc  573d312c
0003c0  22257322
0003c4  2c313239
0003c8  2c224f57
0003cc  4e455231
0003d0  220d0a00
0003d4  0d0a4154          DCB      "\r\nAT+CPBW=2,""%s"",129,""OWNER2""\r\n",0
0003d8  2b435042
0003dc  573d322c
0003e0  22257322
0003e4  2c313239
0003e8  2c224f57
0003ec  4e455232
0003f0  220d0a00
0003f4  0d0a4154          DCB      "\r\nAT+CPBW=3,""%s"",129,""OWNER3""\r\n",0
0003f8  2b435042
0003fc  573d332c
000400  22257322
000404  2c313239
000408  2c224f57
00040c  4e455233
000410  220d0a00
000414  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n",0
000418  542b434d
00041c  47443d31
000420  2c340d0a
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
000428  0a41542b          DCB      "\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",0
00042c  4653464c
000430  53495a45
000434  3d25735c
000438  4c4f472e
00043c  5458540d
000440  0a00    
000442  00                DCB      0
000443  00                DCB      0
000444  0a41542b          DCB      "\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",0
000448  46535245
00044c  41443d25
000450  735c4c4f
000454  472e5458
000458  542c312c
00045c  31313030
000460  2c25640d
000464  0a00    
000466  00                DCB      0
000467  00                DCB      0
000468  53454e44          DCB      "SEND OK",0
00046c  204f4b00
000470  4641494c          DCB      "FAIL",0
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
000478  44454143          DCB      "DEACT",0
00047c  5400    
00047e  00                DCB      0
00047f  00                DCB      0
000480  65786365          DCB      "exception : COMPARED RESPONCES IN THE DATA\n\n\n\n",0
000484  7074696f
000488  6e203a20
00048c  434f4d50
000490  41524544
000494  20524553
000498  504f4e43
00049c  45532049
0004a0  4e205448
0004a4  45204441
0004a8  54410a0a
0004ac  0a0a00  
0004af  00                DCB      0
0004b0  434f4e4e          DCB      "CONNECT",0
0004b4  45435400
0004b8  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
0004bc  2b434950
0004c0  53454e44
0004c4  0d0a00  
0004c7  00                DCB      0
0004c8  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
0004cc  2b434655
0004d0  4e3d300d
0004d4  0d0a0a00
0004d8  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
0004dc  494e5345
0004e0  52544544
0004e4  0d0a4f4b
0004e8  00      
0004e9  00                DCB      0
0004ea  00                DCB      0
0004eb  00                DCB      0
0004ec  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
0004f0  2b434655
0004f4  4e3d310d
0004f8  0a00    
0004fa  00                DCB      0
0004fb  00                DCB      0
0004fc  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
000500  2b434950
000504  53485554
000508  0d0a00  
00050b  00                DCB      0
00050c  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
000510  2b435354
000514  543d2225
000518  73220d0a
00051c  00      
00051d  00                DCB      0
00051e  00                DCB      0
00051f  00                DCB      0
000520  0d0a4154          DCB      "\r\nAT+CIICR\r\r\n",0
000524  2b434949
000528  43520d0d
00052c  0a00    
00052e  00                DCB      0
00052f  00                DCB      0
000530  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
000534  43494653
000538  520d0d0a
00053c  00      
00053d  00                DCB      0
00053e  00                DCB      0
00053f  00                DCB      0
000540  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000544  2b434950
000548  53544152
00054c  543d2254
000550  4350222c
000554  22257322
000558  2c222573
00055c  220d0a00
000560  434f4e4e          DCB      "CONNECT FAIL",0
000564  45435420
000568  4641494c
00056c  00      
00056d  00                DCB      0
00056e  00                DCB      0
00056f  00                DCB      0
000570  0a41542b          DCB      "\nAT+FSCREATE=%s\\LOG.TXT\r\n",0
000574  46534352
000578  45415445
00057c  3d25735c
000580  4c4f472e
000584  5458540d
000588  0a00    
00058a  00                DCB      0
00058b  00                DCB      0
00058c  0a41542b          DCB      "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n",0
000590  46535245
000594  41443d43
000598  3a5c4150
00059c  4e2e5458
0005a0  542c302c
0005a4  3130302c
0005a8  310d0a00
0005ac  0a41542b          DCB      "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n",0
0005b0  46535245
0005b4  41443d43
0005b8  3a5c4947
0005bc  4e2e5458
0005c0  542c302c
0005c4  3130302c
0005c8  310d0a00
0005cc  494f4e00          DCB      "ION",0
0005d0  494f4646          DCB      "IOFF",0
0005d4  00      
0005d5  00                DCB      0
0005d6  00                DCB      0
0005d7  00                DCB      0
0005d8  0a41542b          DCB      "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n",0
0005dc  46535245
0005e0  41443d43
0005e4  3a5c4950
0005e8  5f504f52
0005ec  542e5458
0005f0  542c302c
0005f4  3130302c
0005f8  310d0a00
0005fc  0a41542b          DCB      "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n",0
000600  46535245
000604  41443d43
000608  3a5c494e
00060c  54455256
000610  414c2e54
000614  58542c30
000618  2c313030
00061c  2c310d0a
000620  00      

                          AREA ||.data||, DATA, ALIGN=3

                  cond200
                          DCD      0x00000000
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  tout
                          DCD      0x00000000
                  tout2
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  temp
                          DCD      0x00000000
                  flagch
                          DCD      0x00000000
                  cond121
000028  00000000          DCB      0x00,0x00,0x00,0x00
                  cond122
                          DCD      0x00000000
                  cond123
                          DCD      0x00000000
                  cond124
                          DCD      0x00000000
                  len
                          DCD      0x00000000
                  cond
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                  con1d
                          DCD      0x00000000
                  stcond1
                          DCD      0x00000000
                  stcond2
                          DCD      0x00000000
                  stcond3
                          DCD      0x00000000
                  stcond4
                          DCD      0x00000000
                  time111
                          DCD      0x00000000
                  timeout222
                          DCD      0x00000000
                  qweq
                          DCD      0x00000000
                  i11
                          DCD      0x00000000
                  j11
                          DCD      0x00000000
                  temp11
                          DCD      0x00000000
                  ||sz1||
                          DCD      0x00000000
                  ||sz2||
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  stateCount
000078  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  ||rez||
000088  00000000          DCFS     0x00000000 ; 0
                  fact
00008c  3f800000          DCFS     0x3f800000 ; 1
                  d
                          DCD      0x00000000
                  point_seen
                          DCD      0x00000000
                  cond201
                          DCD      0x00000000
                  cond1
                          DCD      0x00000000
                  cond2
                          DCD      0x00000000
                  cond3
                          DCD      0x00000000
                  cond4
                          DCD      0x00000000
                  cond5
                          DCD      0x00000000
                  cond6
                          DCD      0x00000000
                  cond7
                          DCD      0x00000000
                  cond8
                          DCD      0x00000000
                  cond9
                          DCD      0x00000000
                  cond10
                          DCD      0x00000000
                  cond11
                          DCD      0x00000000
                  cond12
                          DCD      0x00000000
                  cond13
                          DCD      0x00000000
                  cond14
                          DCD      0x00000000
                  ass
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  ||fsz||
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  qwe
                          DCD      0x00000000
                  ||k5||
                          DCD      0x00000000
                  enters
                          DCD      0x00000000
                  cursorvaluepr
                          DCD      0x00000000
                  cursorvaluene
                          DCD      0x00000000
                  ||q1||
                          DCD      0x00000000
                  ||q2||
                          DCD      0x00000000
                  ||q3||
                          DCD      0x00000000
                  ||q4||
                          DCD      0x00000000
                  cntendl
                          DCD      0x00000000
                  prev
                          %        8
                  ||iz||
                          DCD      0x00000000
                  a
                          %        8
                  b
                          %        8
                  c
                          %        8
                  ||hh||
                          DCD      0x00000000
                  mm1
                          DCD      0x00000000
                  mm2
                          DCD      0x00000000
                          DCD      0x00000000
                  ||a1||
                          %        8
                  ||b1||
                          %        8
                  ||c1||
                          %        8
                  hh11
                          %        8
                  mm11
                          %        8
                  mm22
                          %        8
                  logged
                          DCD      0x00000000
                  check
                          DCD      0x00000000
                  stcond5
                          DCD      0x00000000
                  breach
                          DCD      0x00000000
                  aliveping
                          DCD      0x00000000
                  sleep_flag
                          DCD      0x00000000
                  tmeout
                          DCD      0x00000004
                  int_erval
                          DCD      0x00000001
                  drive
                          DCD      0x00000000
000194  00                DCB      0x00
                  apn
000195  696f74            DCB      0x69,0x6f,0x74
000198  2e636f6d          DCB      0x2e,0x63,0x6f,0x6d
00019c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0001ac  00000000          DCB      0x00,0x00,0x00,0x00
                  speed
0001b0  00000000          DCFS     0x00000000 ; 0
                  lpticks
                          DCD      0x00000000
                  voltagecbc
                          DCD      0x00000000
                  ||csq||
                          DCD      0x00000000
                  rtcticks
                          DCD      0x00000000
                  rtcticks2
                          DCD      0x00000000
                  imeiinc
                          DCD      0x00000000
                  ticks_ch
0001cc  00                DCB      0x00
                  save_rtcticks
0001cd  00                DCB      0x00
                  ||ip||
0001ce  3130              DCB      0x31,0x30
0001d0  342e3233          DCB      0x34,0x2e,0x32,0x33
0001d4  362e3230          DCB      0x36,0x2e,0x32,0x30
0001d8  332e3400          DCB      0x33,0x2e,0x34,0x00
0001dc  0000              DCB      0x00,0x00
                  port
0001de  3535              DCB      0x35,0x35
0001e0  35350000          DCB      0x35,0x35,0x00,0x00
                          DCD      0x00000000
                  velocity
                          DCD      0x00000000
0001ec  00                DCB      0x00
                  interval
0001ed  000000            DCB      0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
                  timeout
                          DCD      0x00000000
                  ||pr||
0001f8  00000000          DCFS     0x00000000 ; 0
                  ||la||
0001fc  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
000214  00                DCB      0x00
                  ringflag
000215  00                DCB      0x00
                  lptmr_interrupt
000216  0000              DCB      0x00,0x00
                  time52
                          DCD      0x0000000f
                  cond277
                          DCD      0x00000000
                  cond20077
                          DCD      0x00000000
                  ||sz||
                          DCD      0x00000000
                  ||cn||
                          DCD      0x00000000
                  ||res||
                          DCD      0x00000000
                  test2
                          DCD      0x00000000

                          AREA ||i.delay||, COMGROUP=delay, CODE, READONLY, ALIGN=2

                  delay PROC
;;;147    /*************************** delay*****************************************/
;;;148    __inline void delay(int32 delaytime)
000000  e00d              B        |L18.30|
                  |L18.2|
;;;149    {
;;;150     while(delaytime--)
;;;151        {for(i=2000;i>0;i--)
000002  217d              MOVS     r1,#0x7d
000004  0109              LSLS     r1,r1,#4
000006  4a08              LDR      r2,|L18.40|
000008  6011              STR      r1,[r2,#0]  ; i
00000a  e004              B        |L18.22|
                  |L18.12|
00000c  4906              LDR      r1,|L18.40|
00000e  6809              LDR      r1,[r1,#0]  ; i
000010  1e49              SUBS     r1,r1,#1
000012  4a05              LDR      r2,|L18.40|
000014  6011              STR      r1,[r2,#0]  ; i
                  |L18.22|
000016  4904              LDR      r1,|L18.40|
000018  6809              LDR      r1,[r1,#0]  ; i
00001a  2900              CMP      r1,#0
00001c  dcf6              BGT      |L18.12|
                  |L18.30|
00001e  4601              MOV      r1,r0                 ;150
000020  1e40              SUBS     r0,r0,#1              ;150
000022  2900              CMP      r1,#0                 ;150
000024  d1ed              BNE      |L18.2|
;;;152    			{	
;;;153    			}			// about 1 ms
;;;154        }
;;;155    }
000026  4770              BX       lr
;;;156     void delay2(int delaytime)
                          ENDP

                  |L18.40|
                          DCD      i

                          AREA ||i.parse_g||, COMGROUP=parse_g, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;1780   
;;;1781   __inline void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1782   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f0b              LDR      r7,[sp,#0x2c]
;;;1783   
;;;1784   		sz1=	strlen(str);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  493c              LDR      r1,|L25.260|
000014  6008              STR      r0,[r1,#0]  ; sz1
;;;1785   		sz2=  strlen(string);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       strlen
00001c  493a              LDR      r1,|L25.264|
00001e  6008              STR      r0,[r1,#0]  ; sz2
;;;1786   		memset(string,0,sz2);
000020  4608              MOV      r0,r1
000022  6801              LDR      r1,[r0,#0]  ; sz2
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_memclr
;;;1787   		for(i11=0,temp11=0;i11<sz1;i11++)
00002a  2000              MOVS     r0,#0
00002c  4937              LDR      r1,|L25.268|
00002e  6008              STR      r0,[r1,#0]  ; i11
000030  4937              LDR      r1,|L25.272|
000032  6008              STR      r0,[r1,#0]  ; temp11
000034  e01a              B        |L25.108|
                  |L25.54|
;;;1788   		{
;;;1789   		if(str[i11]==s)
000036  4835              LDR      r0,|L25.268|
000038  6800              LDR      r0,[r0,#0]  ; i11
00003a  5c21              LDRB     r1,[r4,r0]
00003c  980a              LDR      r0,[sp,#0x28]
00003e  4281              CMP      r1,r0
000040  d108              BNE      |L25.84|
;;;1790   			{temp11++;j11=i11;}
000042  4833              LDR      r0,|L25.272|
000044  6800              LDR      r0,[r0,#0]  ; temp11
000046  1c40              ADDS     r0,r0,#1
000048  4931              LDR      r1,|L25.272|
00004a  6008              STR      r0,[r1,#0]  ; temp11
00004c  482f              LDR      r0,|L25.268|
00004e  6800              LDR      r0,[r0,#0]  ; i11
000050  4930              LDR      r1,|L25.276|
000052  6008              STR      r0,[r1,#0]  ; j11
                  |L25.84|
;;;1791   		else{}
;;;1792   			
;;;1793   		if(temp11>=sec){i11=9900;}
000054  482e              LDR      r0,|L25.272|
000056  6800              LDR      r0,[r0,#0]  ; temp11
000058  42b0              CMP      r0,r6
00005a  db02              BLT      |L25.98|
00005c  482e              LDR      r0,|L25.280|
00005e  492b              LDR      r1,|L25.268|
000060  6008              STR      r0,[r1,#0]  ; i11
                  |L25.98|
000062  482a              LDR      r0,|L25.268|
000064  6800              LDR      r0,[r0,#0]            ;1787  ; i11
000066  1c40              ADDS     r0,r0,#1              ;1787
000068  4928              LDR      r1,|L25.268|
00006a  6008              STR      r0,[r1,#0]            ;1787  ; i11
                  |L25.108|
00006c  4827              LDR      r0,|L25.268|
00006e  6800              LDR      r0,[r0,#0]            ;1787  ; i11
000070  4924              LDR      r1,|L25.260|
000072  6809              LDR      r1,[r1,#0]            ;1787  ; sz1
000074  4288              CMP      r0,r1                 ;1787
000076  dbde              BLT      |L25.54|
;;;1794   		else{}	
;;;1795   		
;;;1796   		}	
;;;1797   		
;;;1798   		for(i11=0,temp11=0;i11<sz1;i11++)
000078  2000              MOVS     r0,#0
00007a  4924              LDR      r1,|L25.268|
00007c  6008              STR      r0,[r1,#0]  ; i11
00007e  4924              LDR      r1,|L25.272|
000080  6008              STR      r0,[r1,#0]  ; temp11
000082  e01a              B        |L25.186|
                  |L25.132|
;;;1799   		{
;;;1800   		if(str[i11]==f)
000084  4821              LDR      r0,|L25.268|
000086  6800              LDR      r0,[r0,#0]  ; i11
000088  5c21              LDRB     r1,[r4,r0]
00008a  9804              LDR      r0,[sp,#0x10]
00008c  4281              CMP      r1,r0
00008e  d108              BNE      |L25.162|
;;;1801   			{temp11++;l=i11;}										
000090  481f              LDR      r0,|L25.272|
000092  6800              LDR      r0,[r0,#0]  ; temp11
000094  1c40              ADDS     r0,r0,#1
000096  491e              LDR      r1,|L25.272|
000098  6008              STR      r0,[r1,#0]  ; temp11
00009a  481c              LDR      r0,|L25.268|
00009c  6800              LDR      r0,[r0,#0]  ; i11
00009e  491f              LDR      r1,|L25.284|
0000a0  6008              STR      r0,[r1,#0]  ; l
                  |L25.162|
;;;1802   		else{}
;;;1803   		if(temp11>=first){i11=9900;}else{}
0000a2  481b              LDR      r0,|L25.272|
0000a4  6800              LDR      r0,[r0,#0]  ; temp11
0000a6  42a8              CMP      r0,r5
0000a8  db02              BLT      |L25.176|
0000aa  481b              LDR      r0,|L25.280|
0000ac  4917              LDR      r1,|L25.268|
0000ae  6008              STR      r0,[r1,#0]  ; i11
                  |L25.176|
0000b0  4816              LDR      r0,|L25.268|
0000b2  6800              LDR      r0,[r0,#0]            ;1798  ; i11
0000b4  1c40              ADDS     r0,r0,#1              ;1798
0000b6  4915              LDR      r1,|L25.268|
0000b8  6008              STR      r0,[r1,#0]            ;1798  ; i11
                  |L25.186|
0000ba  4814              LDR      r0,|L25.268|
0000bc  6800              LDR      r0,[r0,#0]            ;1798  ; i11
0000be  4911              LDR      r1,|L25.260|
0000c0  6809              LDR      r1,[r1,#0]            ;1798  ; sz1
0000c2  4288              CMP      r0,r1                 ;1798
0000c4  dbde              BLT      |L25.132|
;;;1804   		}	
;;;1805   		for(i11=0;i11<(j11-l-1);i11++)
0000c6  2000              MOVS     r0,#0
0000c8  4910              LDR      r1,|L25.268|
0000ca  6008              STR      r0,[r1,#0]  ; i11
0000cc  e00e              B        |L25.236|
                  |L25.206|
;;;1806   		{
;;;1807   		string[i11] = str[l+i11+1];
0000ce  4813              LDR      r0,|L25.284|
0000d0  6800              LDR      r0,[r0,#0]  ; l
0000d2  490e              LDR      r1,|L25.268|
0000d4  6809              LDR      r1,[r1,#0]  ; i11
0000d6  1840              ADDS     r0,r0,r1
0000d8  1c40              ADDS     r0,r0,#1
0000da  5c20              LDRB     r0,[r4,r0]
0000dc  490b              LDR      r1,|L25.268|
0000de  6809              LDR      r1,[r1,#0]  ; i11
0000e0  5478              STRB     r0,[r7,r1]
0000e2  480a              LDR      r0,|L25.268|
0000e4  6800              LDR      r0,[r0,#0]            ;1805  ; i11
0000e6  1c40              ADDS     r0,r0,#1              ;1805
0000e8  4908              LDR      r1,|L25.268|
0000ea  6008              STR      r0,[r1,#0]            ;1805  ; i11
                  |L25.236|
0000ec  4809              LDR      r0,|L25.276|
0000ee  6800              LDR      r0,[r0,#0]            ;1805  ; j11
0000f0  490a              LDR      r1,|L25.284|
0000f2  6809              LDR      r1,[r1,#0]            ;1805  ; l
0000f4  1a40              SUBS     r0,r0,r1              ;1805
0000f6  1e40              SUBS     r0,r0,#1              ;1805
0000f8  4904              LDR      r1,|L25.268|
0000fa  6809              LDR      r1,[r1,#0]            ;1805  ; i11
0000fc  4288              CMP      r0,r1                 ;1805
0000fe  dce6              BGT      |L25.206|
;;;1808   		}			
;;;1809   	
;;;1810   
;;;1811   
;;;1812   }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
;;;1813   
                          ENDP

                  |L25.260|
                          DCD      ||sz1||
                  |L25.264|
                          DCD      ||sz2||
                  |L25.268|
                          DCD      i11
                  |L25.272|
                          DCD      temp11
                  |L25.276|
                          DCD      j11
                  |L25.280|
                          DCD      0x000026ac
                  |L25.284|
                          DCD      l

                          AREA ||i.ignstatoff||, COMGROUP=ignstatoff, CODE, READONLY, ALIGN=2

                  ignstatoff PROC
;;;1276   	
;;;1277   __inline void ignstatoff(){
000000  b508              PUSH     {r3,lr}
;;;1278   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L32.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L32.64|
000008  4a0e              LDR      r2,|L32.68|
00000a  490f              LDR      r1,|L32.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L32.76|
000010  f7fffffe          BL       send_GSM
;;;1279   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L32.64|
000018  4a0a              LDR      r2,|L32.68|
00001a  490d              LDR      r1,|L32.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L32.84|
000020  f7fffffe          BL       send_GSM
;;;1280   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1281   send_GSM("\nIOFF\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L32.64|
00002e  4a05              LDR      r2,|L32.68|
000030  4909              LDR      r1,|L32.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L32.92|
000036  f7fffffe          BL       send_GSM
;;;1282   
;;;1283   
;;;1284   }		
00003a  bd08              POP      {r3,pc}
;;;1285   
                          ENDP

                  |L32.60|
                          DCD      tmeout
                  |L32.64|
                          DCD      ||.conststring||
                  |L32.68|
                          DCD      ||.conststring||+0x8
                  |L32.72|
                          DCD      ||.conststring||+0x10
                  |L32.76|
                          DCD      ||.conststring||+0x14
                  |L32.80|
                          DCD      ||.conststring||+0x30
                  |L32.84|
                          DCD      ||.conststring||+0x34
                  |L32.88|
                          DCD      ||.conststring||+0x58
                  |L32.92|
                          DCD      ||.conststring||+0x60

                          AREA ||i.ignstaton||, COMGROUP=ignstaton, CODE, READONLY, ALIGN=2

                  ignstaton PROC
;;;1267   	
;;;1268   __inline void ignstaton(){
000000  b508              PUSH     {r3,lr}
;;;1269   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L39.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L39.64|
000008  4a0e              LDR      r2,|L39.68|
00000a  490f              LDR      r1,|L39.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L39.76|
000010  f7fffffe          BL       send_GSM
;;;1270   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L39.64|
000018  4a0a              LDR      r2,|L39.68|
00001a  490d              LDR      r1,|L39.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L39.84|
000020  f7fffffe          BL       send_GSM
;;;1271   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1272   send_GSM("\nION\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L39.64|
00002e  4a05              LDR      r2,|L39.68|
000030  4909              LDR      r1,|L39.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L39.92|
000036  f7fffffe          BL       send_GSM
;;;1273   
;;;1274   
;;;1275   }	
00003a  bd08              POP      {r3,pc}
;;;1276   	
                          ENDP

                  |L39.60|
                          DCD      tmeout
                  |L39.64|
                          DCD      ||.conststring||
                  |L39.68|
                          DCD      ||.conststring||+0x8
                  |L39.72|
                          DCD      ||.conststring||+0x10
                  |L39.76|
                          DCD      ||.conststring||+0x14
                  |L39.80|
                          DCD      ||.conststring||+0x30
                  |L39.84|
                          DCD      ||.conststring||+0x34
                  |L39.88|
                          DCD      ||.conststring||+0x58
                  |L39.92|
                          DCD      ||.conststring||+0x6c

                          AREA ||i.save_ip_port||, COMGROUP=save_ip_port, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_ip_port PROC
;;;1228   	
;;;1229   __inline void save_ip_port()
000000  b538              PUSH     {r3-r5,lr}
;;;1230   {
;;;1231   	
;;;1232   send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4844              LDR      r0,|L46.276|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b44              LDR      r3,|L46.280|
000008  4a44              LDR      r2,|L46.284|
00000a  4945              LDR      r1,|L46.288|
00000c  9000              STR      r0,[sp,#0]
00000e  4845              LDR      r0,|L46.292|
000010  f7fffffe          BL       send_GSM
;;;1233   	
;;;1234   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4844              LDR      r0,|L46.296|
000018  f7fffffe          BL       __aeabi_memclr
;;;1235   	sprintf(at_,"\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",strlen(ip)+12+strlen(port));	
00001c  4843              LDR      r0,|L46.300|
00001e  f7fffffe          BL       strlen
000022  4605              MOV      r5,r0
000024  350c              ADDS     r5,r5,#0xc
000026  4842              LDR      r0,|L46.304|
000028  f7fffffe          BL       strlen
00002c  182c              ADDS     r4,r5,r0
00002e  4622              MOV      r2,r4
000030  4940              LDR      r1,|L46.308|
000032  483d              LDR      r0,|L46.296|
000034  f7fffffe          BL       __2sprintf
;;;1236   send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000038  200a              MOVS     r0,#0xa
00003a  4b37              LDR      r3,|L46.280|
00003c  4a37              LDR      r2,|L46.284|
00003e  493e              LDR      r1,|L46.312|
000040  9000              STR      r0,[sp,#0]
000042  4839              LDR      r0,|L46.296|
000044  f7fffffe          BL       send_GSM
;;;1237   	clear();
000048  f7fffffe          BL       clear
;;;1238   
;;;1239   	
;;;1240   	send_modem("|IP|");
00004c  483b              LDR      r0,|L46.316|
00004e  f7fffffe          BL       send_modem
;;;1241   		for(k=0;k<strlen(ip);k++)
000052  2000              MOVS     r0,#0
000054  493a              LDR      r1,|L46.320|
000056  6008              STR      r0,[r1,#0]  ; k
000058  e00b              B        |L46.114|
                  |L46.90|
;;;1242   		{
;;;1243   			uart_putchar(UART1_BASE_PTR, ip[k]);// uart0_putchar(UART0_BASE_PTR, ip[k]);//clear();
00005a  4834              LDR      r0,|L46.300|
00005c  4a38              LDR      r2,|L46.320|
00005e  6812              LDR      r2,[r2,#0]  ; k
000060  5c81              LDRB     r1,[r0,r2]
000062  4838              LDR      r0,|L46.324|
000064  f7fffffe          BL       uart_putchar
000068  4835              LDR      r0,|L46.320|
00006a  6800              LDR      r0,[r0,#0]            ;1241  ; k
00006c  1c40              ADDS     r0,r0,#1              ;1241
00006e  4934              LDR      r1,|L46.320|
000070  6008              STR      r0,[r1,#0]            ;1241  ; k
                  |L46.114|
000072  482e              LDR      r0,|L46.300|
000074  f7fffffe          BL       strlen
000078  4931              LDR      r1,|L46.320|
00007a  6809              LDR      r1,[r1,#0]            ;1241  ; k
00007c  4288              CMP      r0,r1                 ;1241
00007e  d8ec              BHI      |L46.90|
;;;1244   		}	
;;;1245   	send_modem("|PORT|");			
000080  4831              LDR      r0,|L46.328|
000082  f7fffffe          BL       send_modem
;;;1246   		for(k=0;k<strlen(port);k++)
000086  2000              MOVS     r0,#0
000088  492d              LDR      r1,|L46.320|
00008a  6008              STR      r0,[r1,#0]  ; k
00008c  e00b              B        |L46.166|
                  |L46.142|
;;;1247   		{
;;;1248   			uart_putchar(UART1_BASE_PTR, port[k]);// uart0_putchar(UART0_BASE_PTR, port[k]);//clear();
00008e  4828              LDR      r0,|L46.304|
000090  4a2b              LDR      r2,|L46.320|
000092  6812              LDR      r2,[r2,#0]  ; k
000094  5c81              LDRB     r1,[r0,r2]
000096  482b              LDR      r0,|L46.324|
000098  f7fffffe          BL       uart_putchar
00009c  4828              LDR      r0,|L46.320|
00009e  6800              LDR      r0,[r0,#0]            ;1246  ; k
0000a0  1c40              ADDS     r0,r0,#1              ;1246
0000a2  4927              LDR      r1,|L46.320|
0000a4  6008              STR      r0,[r1,#0]            ;1246  ; k
                  |L46.166|
0000a6  4822              LDR      r0,|L46.304|
0000a8  f7fffffe          BL       strlen
0000ac  4924              LDR      r1,|L46.320|
0000ae  6809              LDR      r1,[r1,#0]            ;1246  ; k
0000b0  4288              CMP      r0,r1                 ;1246
0000b2  d8ec              BHI      |L46.142|
;;;1249   		}	
;;;1250   send_modem("|");			
0000b4  4825              LDR      r0,|L46.332|
0000b6  f7fffffe          BL       send_modem
;;;1251   									//memset(data,0,1000);
;;;1252   									k2=0;									//string array counter for uart 1
0000ba  2000              MOVS     r0,#0
0000bc  4924              LDR      r1,|L46.336|
0000be  6008              STR      r0,[r1,#0]  ; k2
;;;1253   									time=19999;						//timer counts to wait for characters in uart 1 									
0000c0  4824              LDR      r0,|L46.340|
0000c2  4925              LDR      r1,|L46.344|
0000c4  6008              STR      r0,[r1,#0]  ; time
;;;1254   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
0000c6  e014              B        |L46.242|
                  |L46.200|
;;;1255   									{
;;;1256   									time--;
0000c8  4823              LDR      r0,|L46.344|
0000ca  6800              LDR      r0,[r0,#0]  ; time
0000cc  1e40              SUBS     r0,r0,#1
0000ce  4922              LDR      r1,|L46.344|
0000d0  6008              STR      r0,[r1,#0]  ; time
;;;1257   									if(time % 2000 == 0)
0000d2  217d              MOVS     r1,#0x7d
0000d4  0109              LSLS     r1,r1,#4
0000d6  4820              LDR      r0,|L46.344|
0000d8  6800              LDR      r0,[r0,#0]  ; time
0000da  f7fffffe          BL       __aeabi_idivmod
0000de  2900              CMP      r1,#0
0000e0  d107              BNE      |L46.242|
;;;1258   										{
;;;1259   											uart0_putchar(UART0_BASE_PTR,'1');
0000e2  2131              MOVS     r1,#0x31
0000e4  481d              LDR      r0,|L46.348|
0000e6  f7fffffe          BL       uart0_putchar
;;;1260   											uart_putchar(UART1_BASE_PTR,'\n');
0000ea  210a              MOVS     r1,#0xa
0000ec  4815              LDR      r0,|L46.324|
0000ee  f7fffffe          BL       uart_putchar
                  |L46.242|
0000f2  491b              LDR      r1,|L46.352|
0000f4  481b              LDR      r0,|L46.356|
0000f6  f7fffffe          BL       strstr
0000fa  2800              CMP      r0,#0                 ;1254
0000fc  d109              BNE      |L46.274|
0000fe  4816              LDR      r0,|L46.344|
000100  6800              LDR      r0,[r0,#0]            ;1254  ; time
000102  2801              CMP      r0,#1                 ;1254
000104  db05              BLT      |L46.274|
000106  4918              LDR      r1,|L46.360|
000108  4816              LDR      r0,|L46.356|
00010a  f7fffffe          BL       strstr
00010e  2800              CMP      r0,#0                 ;1254
000110  d0da              BEQ      |L46.200|
                  |L46.274|
;;;1261   										}
;;;1262   	
;;;1263   									}
;;;1264   
;;;1265   	
;;;1266   }	
000112  bd38              POP      {r3-r5,pc}
;;;1267   	
                          ENDP

                  |L46.276|
                          DCD      tmeout
                  |L46.280|
                          DCD      ||.conststring||
                  |L46.284|
                          DCD      ||.conststring||+0x8
                  |L46.288|
                          DCD      ||.conststring||+0x10
                  |L46.292|
                          DCD      ||.conststring||+0x78
                  |L46.296|
                          DCD      at_
                  |L46.300|
                          DCD      ||ip||
                  |L46.304|
                          DCD      port
                  |L46.308|
                          DCD      ||.conststring||+0x98
                  |L46.312|
                          DCD      ||.conststring||+0x30
                  |L46.316|
                          DCD      ||.conststring||+0xc0
                  |L46.320|
                          DCD      k
                  |L46.324|
                          DCD      0x4006b000
                  |L46.328|
                          DCD      ||.conststring||+0xc8
                  |L46.332|
                          DCD      ||.conststring||+0xd0
                  |L46.336|
                          DCD      ||k2||
                  |L46.340|
                          DCD      0x00004e1f
                  |L46.344|
                          DCD      time
                  |L46.348|
                          DCD      0x4006a000
                  |L46.352|
                          DCD      ||.conststring||+0x58
                  |L46.356|
                          DCD      uart_string_gsm
                  |L46.360|
                          DCD      ||.conststring||+0xd4

                          AREA ||i.get_gpsdata||, COMGROUP=get_gpsdata, CODE, READONLY, ALIGN=2

                  get_gpsdata PROC
;;;1655   
;;;1656   __inline void get_gpsdata()
000000  b510              PUSH     {r4,lr}
;;;1657   {
;;;1658   						clear2();
000002  f7fffffe          BL       clear2
;;;1659   						memset(uart_string_gps,0,3000);memset(gga,0,100);memset(rmc,0,100);			
000006  4952              LDR      r1,|L53.336|
000008  4852              LDR      r0,|L53.340|
00000a  f7fffffe          BL       __aeabi_memclr
00000e  2164              MOVS     r1,#0x64
000010  4851              LDR      r0,|L53.344|
000012  f7fffffe          BL       __aeabi_memclr
000016  2164              MOVS     r1,#0x64
000018  4850              LDR      r0,|L53.348|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1660   						i=0;tout2=0;
00001e  2000              MOVS     r0,#0
000020  494f              LDR      r1,|L53.352|
000022  6008              STR      r0,[r1,#0]  ; i
000024  494f              LDR      r1,|L53.356|
000026  6008              STR      r0,[r1,#0]  ; tout2
;;;1661   //						t22=9999999;
;;;1662   do{
000028  bf00              NOP      
                  |L53.42|
;;;1663   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00002a  484f              LDR      r0,|L53.360|
00002c  7900              LDRB     r0,[r0,#4]
00002e  2120              MOVS     r1,#0x20
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d00a              BEQ      |L53.76|
;;;1664   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000036  484c              LDR      r0,|L53.360|
000038  79c0              LDRB     r0,[r0,#7]
00003a  4946              LDR      r1,|L53.340|
00003c  4a48              LDR      r2,|L53.352|
00003e  6812              LDR      r2,[r2,#0]  ; i
000040  5488              STRB     r0,[r1,r2]
;;;1665   				i++;
000042  4847              LDR      r0,|L53.352|
000044  6800              LDR      r0,[r0,#0]  ; i
000046  1c40              ADDS     r0,r0,#1
000048  4945              LDR      r1,|L53.352|
00004a  6008              STR      r0,[r1,#0]  ; i
                  |L53.76|
;;;1666   	}
;;;1667   	}while(!   (strstr(uart_string_gps,"RMC")       ||  (tout2>1)  )  );
00004c  4947              LDR      r1,|L53.364|
00004e  4841              LDR      r0,|L53.340|
000050  f7fffffe          BL       strstr
000054  2800              CMP      r0,#0
000056  d103              BNE      |L53.96|
000058  4842              LDR      r0,|L53.356|
00005a  6800              LDR      r0,[r0,#0]  ; tout2
00005c  2801              CMP      r0,#1
00005e  dde4              BLE      |L53.42|
                  |L53.96|
;;;1668   i=0;tout2=0;
000060  2000              MOVS     r0,#0
000062  493f              LDR      r1,|L53.352|
000064  6008              STR      r0,[r1,#0]  ; i
000066  493f              LDR      r1,|L53.356|
000068  6008              STR      r0,[r1,#0]  ; tout2
;;;1669   do{
00006a  bf00              NOP      
                  |L53.108|
;;;1670   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00006c  483e              LDR      r0,|L53.360|
00006e  7900              LDRB     r0,[r0,#4]
000070  2120              MOVS     r1,#0x20
000072  4008              ANDS     r0,r0,r1
000074  2800              CMP      r0,#0
000076  d00a              BEQ      |L53.142|
;;;1671   	{		rmc[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000078  483b              LDR      r0,|L53.360|
00007a  79c1              LDRB     r1,[r0,#7]
00007c  4837              LDR      r0,|L53.348|
00007e  4a38              LDR      r2,|L53.352|
000080  6812              LDR      r2,[r2,#0]  ; i
000082  5481              STRB     r1,[r0,r2]
;;;1672   				i++;
000084  4836              LDR      r0,|L53.352|
000086  6800              LDR      r0,[r0,#0]  ; i
000088  1c40              ADDS     r0,r0,#1
00008a  4935              LDR      r1,|L53.352|
00008c  6008              STR      r0,[r1,#0]  ; i
                  |L53.142|
;;;1673   	}
;;;1674   }while(     !( mystrstr(rmc,'*')    ||  tout2>1) );
00008e  212a              MOVS     r1,#0x2a
000090  4832              LDR      r0,|L53.348|
000092  f7fffffe          BL       mystrstr
000096  2800              CMP      r0,#0
000098  d103              BNE      |L53.162|
00009a  4832              LDR      r0,|L53.356|
00009c  6800              LDR      r0,[r0,#0]  ; tout2
00009e  2801              CMP      r0,#1
0000a0  dde4              BLE      |L53.108|
                  |L53.162|
;;;1675   memset(uart_string_gps,0,3000);
0000a2  492b              LDR      r1,|L53.336|
0000a4  482b              LDR      r0,|L53.340|
0000a6  f7fffffe          BL       __aeabi_memclr
;;;1676   i=0;tout2=0;
0000aa  2000              MOVS     r0,#0
0000ac  492c              LDR      r1,|L53.352|
0000ae  6008              STR      r0,[r1,#0]  ; i
0000b0  492c              LDR      r1,|L53.356|
0000b2  6008              STR      r0,[r1,#0]  ; tout2
;;;1677   do{
0000b4  bf00              NOP      
                  |L53.182|
;;;1678   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000b6  482c              LDR      r0,|L53.360|
0000b8  7900              LDRB     r0,[r0,#4]
0000ba  2120              MOVS     r1,#0x20
0000bc  4008              ANDS     r0,r0,r1
0000be  2800              CMP      r0,#0
0000c0  d00a              BEQ      |L53.216|
;;;1679   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
0000c2  4829              LDR      r0,|L53.360|
0000c4  79c0              LDRB     r0,[r0,#7]
0000c6  4923              LDR      r1,|L53.340|
0000c8  4a25              LDR      r2,|L53.352|
0000ca  6812              LDR      r2,[r2,#0]  ; i
0000cc  5488              STRB     r0,[r1,r2]
;;;1680   				i++;
0000ce  4824              LDR      r0,|L53.352|
0000d0  6800              LDR      r0,[r0,#0]  ; i
0000d2  1c40              ADDS     r0,r0,#1
0000d4  4922              LDR      r1,|L53.352|
0000d6  6008              STR      r0,[r1,#0]  ; i
                  |L53.216|
;;;1681   	}
;;;1682   }while(!  (strstr(uart_string_gps,"GGA")      ||  (tout2>1) )  );
0000d8  4925              LDR      r1,|L53.368|
0000da  481e              LDR      r0,|L53.340|
0000dc  f7fffffe          BL       strstr
0000e0  2800              CMP      r0,#0
0000e2  d103              BNE      |L53.236|
0000e4  481f              LDR      r0,|L53.356|
0000e6  6800              LDR      r0,[r0,#0]  ; tout2
0000e8  2801              CMP      r0,#1
0000ea  dde4              BLE      |L53.182|
                  |L53.236|
;;;1683   i=0;tout2=0;
0000ec  2000              MOVS     r0,#0
0000ee  491c              LDR      r1,|L53.352|
0000f0  6008              STR      r0,[r1,#0]  ; i
0000f2  491c              LDR      r1,|L53.356|
0000f4  6008              STR      r0,[r1,#0]  ; tout2
;;;1684   do{
0000f6  bf00              NOP      
                  |L53.248|
;;;1685   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000f8  481b              LDR      r0,|L53.360|
0000fa  7900              LDRB     r0,[r0,#4]
0000fc  2120              MOVS     r1,#0x20
0000fe  4008              ANDS     r0,r0,r1
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L53.282|
;;;1686   	{		gga[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000104  4818              LDR      r0,|L53.360|
000106  79c1              LDRB     r1,[r0,#7]
000108  4813              LDR      r0,|L53.344|
00010a  4a15              LDR      r2,|L53.352|
00010c  6812              LDR      r2,[r2,#0]  ; i
00010e  5481              STRB     r1,[r0,r2]
;;;1687   				i++;
000110  4813              LDR      r0,|L53.352|
000112  6800              LDR      r0,[r0,#0]  ; i
000114  1c40              ADDS     r0,r0,#1
000116  4912              LDR      r1,|L53.352|
000118  6008              STR      r0,[r1,#0]  ; i
                  |L53.282|
;;;1688   	}
;;;1689   }while(!(mystrstr(gga,'*')  ||  (tout2>1) ));
00011a  212a              MOVS     r1,#0x2a
00011c  480e              LDR      r0,|L53.344|
00011e  f7fffffe          BL       mystrstr
000122  2800              CMP      r0,#0
000124  d103              BNE      |L53.302|
000126  480f              LDR      r0,|L53.356|
000128  6800              LDR      r0,[r0,#0]  ; tout2
00012a  2801              CMP      r0,#1
00012c  dde4              BLE      |L53.248|
                  |L53.302|
;;;1690   
;;;1691   clear2();
00012e  f7fffffe          BL       clear2
;;;1692   
;;;1693   		
;;;1694   
;;;1695   stateCount++; 
000132  4810              LDR      r0,|L53.372|
000134  7800              LDRB     r0,[r0,#0]  ; stateCount
000136  1c40              ADDS     r0,r0,#1
000138  490e              LDR      r1,|L53.372|
00013a  7008              STRB     r0,[r1,#0]
;;;1696   if(stateCount>5){stateCount =0;}
00013c  4608              MOV      r0,r1
00013e  7800              LDRB     r0,[r0,#0]  ; stateCount
000140  2805              CMP      r0,#5
000142  dd01              BLE      |L53.328|
000144  2000              MOVS     r0,#0
000146  7008              STRB     r0,[r1,#0]
                  |L53.328|
;;;1697   LED_state2();					
000148  f7fffffe          BL       LED_state2
;;;1698   }
00014c  bd10              POP      {r4,pc}
;;;1699   	
                          ENDP

00014e  0000              DCW      0x0000
                  |L53.336|
                          DCD      0x00000bb8
                  |L53.340|
                          DCD      uart_string_gps
                  |L53.344|
                          DCD      gga
                  |L53.348|
                          DCD      ||rmc||
                  |L53.352|
                          DCD      i
                  |L53.356|
                          DCD      tout2
                  |L53.360|
                          DCD      0x4006c000
                  |L53.364|
                          DCD      ||.conststring||+0xdc
                  |L53.368|
                          DCD      ||.conststring||+0xe0
                  |L53.372|
                          DCD      stateCount

                          AREA ||i.GPS_COLLECT||, COMGROUP=GPS_COLLECT, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT PROC
;;;1098   
;;;1099   __inline void GPS_COLLECT()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1100   {imeiinc=0;
000002  2000              MOVS     r0,#0
000004  4999              LDR      r1,|L60.620|
000006  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1101   delay(200);
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       delay
;;;1102   clear();
00000e  f7fffffe          BL       clear
;;;1103   	
;;;1104   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
000012  200a              MOVS     r0,#0xa
000014  4b96              LDR      r3,|L60.624|
000016  4a97              LDR      r2,|L60.628|
000018  4997              LDR      r1,|L60.632|
00001a  9000              STR      r0,[sp,#0]
00001c  4897              LDR      r0,|L60.636|
00001e  f7fffffe          BL       send_GSM
;;;1105   for(i=0;i<strlen(uart_string_gsm);i++){
000022  2000              MOVS     r0,#0
000024  4996              LDR      r1,|L60.640|
000026  6008              STR      r0,[r1,#0]  ; i
000028  e01d              B        |L60.102|
                  |L60.42|
;;;1106   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
00002a  4896              LDR      r0,|L60.644|
00002c  4994              LDR      r1,|L60.640|
00002e  6809              LDR      r1,[r1,#0]  ; i
000030  5c40              LDRB     r0,[r0,r1]
000032  282f              CMP      r0,#0x2f
000034  dd12              BLE      |L60.92|
000036  4893              LDR      r0,|L60.644|
000038  4991              LDR      r1,|L60.640|
00003a  6809              LDR      r1,[r1,#0]  ; i
00003c  5c40              LDRB     r0,[r0,r1]
00003e  283a              CMP      r0,#0x3a
000040  da0c              BGE      |L60.92|
;;;1107   			imei[imeiinc] = uart_string_gsm[i];
000042  4890              LDR      r0,|L60.644|
000044  498e              LDR      r1,|L60.640|
000046  6809              LDR      r1,[r1,#0]  ; i
000048  5c41              LDRB     r1,[r0,r1]
00004a  488f              LDR      r0,|L60.648|
00004c  4a87              LDR      r2,|L60.620|
00004e  6812              LDR      r2,[r2,#0]  ; imeiinc
000050  5481              STRB     r1,[r0,r2]
;;;1108   			imeiinc++;
000052  4886              LDR      r0,|L60.620|
000054  6800              LDR      r0,[r0,#0]  ; imeiinc
000056  1c40              ADDS     r0,r0,#1
000058  4984              LDR      r1,|L60.620|
00005a  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L60.92|
00005c  4888              LDR      r0,|L60.640|
00005e  6800              LDR      r0,[r0,#0]            ;1105  ; i
000060  1c40              ADDS     r0,r0,#1              ;1105
000062  4987              LDR      r1,|L60.640|
000064  6008              STR      r0,[r1,#0]            ;1105  ; i
                  |L60.102|
000066  4887              LDR      r0,|L60.644|
000068  f7fffffe          BL       strlen
00006c  4984              LDR      r1,|L60.640|
00006e  6809              LDR      r1,[r1,#0]            ;1105  ; i
000070  4288              CMP      r0,r1                 ;1105
000072  d8da              BHI      |L60.42|
;;;1109   		}
;;;1110   }
;;;1111   clear();	
000074  f7fffffe          BL       clear
;;;1112   time52=15;	
000078  200f              MOVS     r0,#0xf
00007a  4984              LDR      r1,|L60.652|
00007c  6008              STR      r0,[r1,#0]  ; time52
;;;1113   if(int_erval>60){int_erval=5;}
00007e  4884              LDR      r0,|L60.656|
000080  6800              LDR      r0,[r0,#0]  ; int_erval
000082  283c              CMP      r0,#0x3c
000084  dd02              BLE      |L60.140|
000086  2005              MOVS     r0,#5
000088  4981              LDR      r1,|L60.656|
00008a  6008              STR      r0,[r1,#0]  ; int_erval
                  |L60.140|
;;;1114   while(lpticks<int_erval);
00008c  bf00              NOP      
                  |L60.142|
00008e  4881              LDR      r0,|L60.660|
000090  6800              LDR      r0,[r0,#0]  ; lpticks
000092  497f              LDR      r1,|L60.656|
000094  6809              LDR      r1,[r1,#0]  ; int_erval
000096  4288              CMP      r0,r1
000098  dbf9              BLT      |L60.142|
;;;1115   get_gpsdata();
00009a  f7fffffe          BL       get_gpsdata
;;;1116   lpticks=0;
00009e  2000              MOVS     r0,#0
0000a0  497c              LDR      r1,|L60.660|
0000a2  6008              STR      r0,[r1,#0]  ; lpticks
;;;1117   
;;;1118   parse_g(rmc, 3, 4, ',', ',' ,lati);
0000a4  487c              LDR      r0,|L60.664|
0000a6  212c              MOVS     r1,#0x2c
0000a8  460b              MOV      r3,r1
0000aa  2204              MOVS     r2,#4
0000ac  9100              STR      r1,[sp,#0]
0000ae  9001              STR      r0,[sp,#4]
0000b0  2103              MOVS     r1,#3
0000b2  487a              LDR      r0,|L60.668|
0000b4  f7fffffe          BL       parse_g
;;;1119   parse_g(rmc, 5, 6, ',', ',' ,longi);
0000b8  4879              LDR      r0,|L60.672|
0000ba  212c              MOVS     r1,#0x2c
0000bc  460b              MOV      r3,r1
0000be  2206              MOVS     r2,#6
0000c0  9100              STR      r1,[sp,#0]
0000c2  9001              STR      r0,[sp,#4]
0000c4  2105              MOVS     r1,#5
0000c6  4875              LDR      r0,|L60.668|
0000c8  f7fffffe          BL       parse_g
;;;1120   parse_g(rmc, 7, 8, ',', ',' ,velocity);
0000cc  4875              LDR      r0,|L60.676|
0000ce  212c              MOVS     r1,#0x2c
0000d0  460b              MOV      r3,r1
0000d2  2208              MOVS     r2,#8
0000d4  9100              STR      r1,[sp,#0]
0000d6  9001              STR      r0,[sp,#4]
0000d8  2107              MOVS     r1,#7
0000da  4870              LDR      r0,|L60.668|
0000dc  f7fffffe          BL       parse_g
;;;1121   		
;;;1122   		speed = stof(velocity);
0000e0  4870              LDR      r0,|L60.676|
0000e2  f7fffffe          BL       stof
0000e6  4970              LDR      r1,|L60.680|
0000e8  6008              STR      r0,[r1,#0]  ; speed
;;;1123   		c=stof(lati);//7523.7412
0000ea  486b              LDR      r0,|L60.664|
0000ec  f7fffffe          BL       stof
0000f0  4604              MOV      r4,r0
0000f2  f7fffffe          BL       __aeabi_f2d
0000f6  4a6d              LDR      r2,|L60.684|
0000f8  c203              STM      r2!,{r0,r1}
;;;1124   		hh= c/100; //75
0000fa  2200              MOVS     r2,#0
0000fc  4b6c              LDR      r3,|L60.688|
0000fe  496b              LDR      r1,|L60.684|
000100  c903              LDM      r1,{r0,r1}
000102  f7fffffe          BL       __aeabi_ddiv
000106  4604              MOV      r4,r0
000108  f7fffffe          BL       __aeabi_d2iz
00010c  4969              LDR      r1,|L60.692|
00010e  6008              STR      r0,[r1,#0]  ; hh
;;;1125   		hh11 = c/100; //75.237412
000110  2200              MOVS     r2,#0
000112  4b67              LDR      r3,|L60.688|
000114  4965              LDR      r1,|L60.684|
000116  c903              LDM      r1,{r0,r1}
000118  f7fffffe          BL       __aeabi_ddiv
00011c  4a66              LDR      r2,|L60.696|
00011e  c203              STM      r2!,{r0,r1}
;;;1126   		mm11 = hh11-hh; //.237412
000120  4864              LDR      r0,|L60.692|
000122  6800              LDR      r0,[r0,#0]  ; hh
000124  f7fffffe          BL       __aeabi_i2d
000128  4604              MOV      r4,r0
00012a  4863              LDR      r0,|L60.696|
00012c  c80c              LDM      r0!,{r2,r3}
00012e  4620              MOV      r0,r4
000130  f7fffffe          BL       __aeabi_drsub
000134  4a61              LDR      r2,|L60.700|
000136  c203              STM      r2!,{r0,r1}
;;;1127   		mm11*=100;
000138  2200              MOVS     r2,#0
00013a  4b5d              LDR      r3,|L60.688|
00013c  495f              LDR      r1,|L60.700|
00013e  c903              LDM      r1,{r0,r1}
000140  f7fffffe          BL       __aeabi_dmul
000144  4a5d              LDR      r2,|L60.700|
000146  c203              STM      r2!,{r0,r1}
;;;1128   		mm22=hh+mm11/60;	
000148  2200              MOVS     r2,#0
00014a  4b5d              LDR      r3,|L60.704|
00014c  495b              LDR      r1,|L60.700|
00014e  c903              LDM      r1,{r0,r1}
000150  f7fffffe          BL       __aeabi_ddiv
000154  4604              MOV      r4,r0
000156  460d              MOV      r5,r1
000158  4856              LDR      r0,|L60.692|
00015a  6800              LDR      r0,[r0,#0]  ; hh
00015c  f7fffffe          BL       __aeabi_i2d
000160  4606              MOV      r6,r0
000162  4622              MOV      r2,r4
000164  462b              MOV      r3,r5
000166  f7fffffe          BL       __aeabi_dadd
00016a  4a56              LDR      r2,|L60.708|
00016c  c203              STM      r2!,{r0,r1}
;;;1129   		memset(lati,0,15);
00016e  210f              MOVS     r1,#0xf
000170  4849              LDR      r0,|L60.664|
000172  f7fffffe          BL       __aeabi_memclr
;;;1130   		sprintf(lati,"%f",mm22);
000176  4853              LDR      r0,|L60.708|
000178  4953              LDR      r1,|L60.712|
00017a  c80c              LDM      r0!,{r2,r3}
00017c  4846              LDR      r0,|L60.664|
00017e  f7fffffe          BL       __2sprintf
;;;1131   		c=stof(longi);//7523.7412
000182  4847              LDR      r0,|L60.672|
000184  f7fffffe          BL       stof
000188  4604              MOV      r4,r0
00018a  f7fffffe          BL       __aeabi_f2d
00018e  4a47              LDR      r2,|L60.684|
000190  c203              STM      r2!,{r0,r1}
;;;1132   		hh= c/100; //75
000192  2200              MOVS     r2,#0
000194  4b46              LDR      r3,|L60.688|
000196  4945              LDR      r1,|L60.684|
000198  c903              LDM      r1,{r0,r1}
00019a  f7fffffe          BL       __aeabi_ddiv
00019e  4604              MOV      r4,r0
0001a0  f7fffffe          BL       __aeabi_d2iz
0001a4  4943              LDR      r1,|L60.692|
0001a6  6008              STR      r0,[r1,#0]  ; hh
;;;1133   		hh11 = c/100; //75.237412
0001a8  2200              MOVS     r2,#0
0001aa  4b41              LDR      r3,|L60.688|
0001ac  493f              LDR      r1,|L60.684|
0001ae  c903              LDM      r1,{r0,r1}
0001b0  f7fffffe          BL       __aeabi_ddiv
0001b4  4a40              LDR      r2,|L60.696|
0001b6  c203              STM      r2!,{r0,r1}
;;;1134   		mm11 = hh11-hh; //.237412
0001b8  483e              LDR      r0,|L60.692|
0001ba  6800              LDR      r0,[r0,#0]  ; hh
0001bc  f7fffffe          BL       __aeabi_i2d
0001c0  4604              MOV      r4,r0
0001c2  483d              LDR      r0,|L60.696|
0001c4  c80c              LDM      r0!,{r2,r3}
0001c6  4620              MOV      r0,r4
0001c8  f7fffffe          BL       __aeabi_drsub
0001cc  4a3b              LDR      r2,|L60.700|
0001ce  c203              STM      r2!,{r0,r1}
;;;1135   		mm11*=100;
0001d0  2200              MOVS     r2,#0
0001d2  4b37              LDR      r3,|L60.688|
0001d4  4939              LDR      r1,|L60.700|
0001d6  c903              LDM      r1,{r0,r1}
0001d8  f7fffffe          BL       __aeabi_dmul
0001dc  4a37              LDR      r2,|L60.700|
0001de  c203              STM      r2!,{r0,r1}
;;;1136   		mm22=hh+mm11/60;	
0001e0  2200              MOVS     r2,#0
0001e2  4b37              LDR      r3,|L60.704|
0001e4  4935              LDR      r1,|L60.700|
0001e6  c903              LDM      r1,{r0,r1}
0001e8  f7fffffe          BL       __aeabi_ddiv
0001ec  4604              MOV      r4,r0
0001ee  460d              MOV      r5,r1
0001f0  4830              LDR      r0,|L60.692|
0001f2  6800              LDR      r0,[r0,#0]  ; hh
0001f4  f7fffffe          BL       __aeabi_i2d
0001f8  4606              MOV      r6,r0
0001fa  4622              MOV      r2,r4
0001fc  462b              MOV      r3,r5
0001fe  f7fffffe          BL       __aeabi_dadd
000202  4a30              LDR      r2,|L60.708|
000204  c203              STM      r2!,{r0,r1}
;;;1137   		memset(longi,0,15);
000206  210f              MOVS     r1,#0xf
000208  4825              LDR      r0,|L60.672|
00020a  f7fffffe          BL       __aeabi_memclr
;;;1138   		sprintf(longi,"%f",mm22);	
00020e  482d              LDR      r0,|L60.708|
000210  492d              LDR      r1,|L60.712|
000212  c80c              LDM      r0!,{r2,r3}
000214  4822              LDR      r0,|L60.672|
000216  f7fffffe          BL       __2sprintf
;;;1139   		strcat(data,imei);
00021a  491b              LDR      r1,|L60.648|
00021c  482b              LDR      r0,|L60.716|
00021e  f7fffffe          BL       strcat
;;;1140   		strcat(data,", ");	
000222  492b              LDR      r1,|L60.720|
000224  4829              LDR      r0,|L60.716|
000226  f7fffffe          BL       strcat
;;;1141   		strcat(data,"$GxGGA");	
00022a  492a              LDR      r1,|L60.724|
00022c  4827              LDR      r0,|L60.716|
00022e  f7fffffe          BL       strcat
;;;1142   		strcat(data,gga);
000232  4929              LDR      r1,|L60.728|
000234  4825              LDR      r0,|L60.716|
000236  f7fffffe          BL       strcat
;;;1143   		strcat(data,", $GxRMC");	
00023a  4928              LDR      r1,|L60.732|
00023c  4823              LDR      r0,|L60.716|
00023e  f7fffffe          BL       strcat
;;;1144   		strcat(data,rmc);	
000242  4916              LDR      r1,|L60.668|
000244  4821              LDR      r0,|L60.716|
000246  f7fffffe          BL       strcat
;;;1145   		strcat(data,",");	
00024a  4925              LDR      r1,|L60.736|
00024c  481f              LDR      r0,|L60.716|
00024e  f7fffffe          BL       strcat
;;;1146   		strcat(data,num2);	
000252  4924              LDR      r1,|L60.740|
000254  481d              LDR      r0,|L60.716|
000256  f7fffffe          BL       strcat
;;;1147   		if	(breach == 1){strcat(data,",BR*");}
00025a  4823              LDR      r0,|L60.744|
00025c  6800              LDR      r0,[r0,#0]  ; breach
00025e  2801              CMP      r0,#1
000260  d103              BNE      |L60.618|
000262  4922              LDR      r1,|L60.748|
000264  4819              LDR      r0,|L60.716|
000266  f7fffffe          BL       strcat
                  |L60.618|
;;;1148   //return 0;
;;;1149   }
00026a  bdfe              POP      {r1-r7,pc}
;;;1150   
                          ENDP

                  |L60.620|
                          DCD      imeiinc
                  |L60.624|
                          DCD      ||.conststring||+0xd4
                  |L60.628|
                          DCD      ||.conststring||+0x8
                  |L60.632|
                          DCD      ||.conststring||+0x10
                  |L60.636|
                          DCD      ||.conststring||+0xe4
                  |L60.640|
                          DCD      i
                  |L60.644|
                          DCD      uart_string_gsm
                  |L60.648|
                          DCD      imei
                  |L60.652|
                          DCD      time52
                  |L60.656|
                          DCD      int_erval
                  |L60.660|
                          DCD      lpticks
                  |L60.664|
                          DCD      lati
                  |L60.668|
                          DCD      ||rmc||
                  |L60.672|
                          DCD      longi
                  |L60.676|
                          DCD      velocity
                  |L60.680|
                          DCD      speed
                  |L60.684|
                          DCD      c
                  |L60.688|
                          DCD      0x40590000
                  |L60.692|
                          DCD      ||hh||
                  |L60.696|
                          DCD      hh11
                  |L60.700|
                          DCD      mm11
                  |L60.704|
                          DCD      0x404e0000
                  |L60.708|
                          DCD      mm22
                  |L60.712|
                          DCD      ||.conststring||+0xf4
                  |L60.716|
                          DCD      data
                  |L60.720|
                          DCD      ||.conststring||+0xf8
                  |L60.724|
                          DCD      ||.conststring||+0xfc
                  |L60.728|
                          DCD      gga
                  |L60.732|
                          DCD      ||.conststring||+0x104
                  |L60.736|
                          DCD      ||.conststring||+0x110
                  |L60.740|
                          DCD      num2
                  |L60.744|
                          DCD      breach
                  |L60.748|
                          DCD      ||.conststring||+0x114

                          AREA ||i.save_interval||, COMGROUP=save_interval, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_interval PROC
;;;1191   
;;;1192   __inline void save_interval()
000000  b538              PUSH     {r3-r5,lr}
;;;1193   {
;;;1194   	
;;;1195   send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L67.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L67.208|
000008  4a32              LDR      r2,|L67.212|
00000a  4933              LDR      r1,|L67.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L67.220|
000010  f7fffffe          BL       send_GSM
;;;1196   
;;;1197   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L67.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1198   	sprintf(at_,"\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",strlen(interval)+11);	
00001c  4831              LDR      r0,|L67.228|
00001e  f7fffffe          BL       strlen
000022  4604              MOV      r4,r0
000024  340b              ADDS     r4,r4,#0xb
000026  4622              MOV      r2,r4
000028  492f              LDR      r1,|L67.232|
00002a  482d              LDR      r0,|L67.224|
00002c  f7fffffe          BL       __2sprintf
;;;1199   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000030  200a              MOVS     r0,#0xa
000032  4b27              LDR      r3,|L67.208|
000034  4a27              LDR      r2,|L67.212|
000036  492d              LDR      r1,|L67.236|
000038  9000              STR      r0,[sp,#0]
00003a  4829              LDR      r0,|L67.224|
00003c  f7fffffe          BL       send_GSM
;;;1200   	//clear();
;;;1201   
;;;1202   	
;;;1203   	send_modem("|INTERVAL|");
000040  482b              LDR      r0,|L67.240|
000042  f7fffffe          BL       send_modem
;;;1204   		for(k=0;k<strlen(interval);k++)
000046  2000              MOVS     r0,#0
000048  492a              LDR      r1,|L67.244|
00004a  6008              STR      r0,[r1,#0]  ; k
00004c  e00b              B        |L67.102|
                  |L67.78|
;;;1205   		{
;;;1206   			uart_putchar(UART1_BASE_PTR, interval[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004e  4825              LDR      r0,|L67.228|
000050  4a28              LDR      r2,|L67.244|
000052  6812              LDR      r2,[r2,#0]  ; k
000054  5c81              LDRB     r1,[r0,r2]
000056  4828              LDR      r0,|L67.248|
000058  f7fffffe          BL       uart_putchar
00005c  4825              LDR      r0,|L67.244|
00005e  6800              LDR      r0,[r0,#0]            ;1204  ; k
000060  1c40              ADDS     r0,r0,#1              ;1204
000062  4924              LDR      r1,|L67.244|
000064  6008              STR      r0,[r1,#0]            ;1204  ; k
                  |L67.102|
000066  481f              LDR      r0,|L67.228|
000068  f7fffffe          BL       strlen
00006c  4921              LDR      r1,|L67.244|
00006e  6809              LDR      r1,[r1,#0]            ;1204  ; k
000070  4288              CMP      r0,r1                 ;1204
000072  d8ec              BHI      |L67.78|
;;;1207   		}	
;;;1208   			send_modem("|");			
000074  4821              LDR      r0,|L67.252|
000076  f7fffffe          BL       send_modem
;;;1209    
;;;1210   									k2=0;									//string array counter for uart 1
00007a  2000              MOVS     r0,#0
00007c  4920              LDR      r1,|L67.256|
00007e  6008              STR      r0,[r1,#0]  ; k2
;;;1211   									time=19999;						//timer counts to wait for characters in uart 1 									
000080  4820              LDR      r0,|L67.260|
000082  4921              LDR      r1,|L67.264|
000084  6008              STR      r0,[r1,#0]  ; time
;;;1212   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000086  e010              B        |L67.170|
                  |L67.136|
;;;1213   									{
;;;1214   									time--;
000088  481f              LDR      r0,|L67.264|
00008a  6800              LDR      r0,[r0,#0]  ; time
00008c  1e40              SUBS     r0,r0,#1
00008e  491e              LDR      r1,|L67.264|
000090  6008              STR      r0,[r1,#0]  ; time
;;;1215   									if(time % 2000 == 0)
000092  217d              MOVS     r1,#0x7d
000094  0109              LSLS     r1,r1,#4
000096  481c              LDR      r0,|L67.264|
000098  6800              LDR      r0,[r0,#0]  ; time
00009a  f7fffffe          BL       __aeabi_idivmod
00009e  2900              CMP      r1,#0
0000a0  d103              BNE      |L67.170|
;;;1216   										{
;;;1217   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1218   											uart_putchar(UART1_BASE_PTR,'\n');
0000a2  210a              MOVS     r1,#0xa
0000a4  4814              LDR      r0,|L67.248|
0000a6  f7fffffe          BL       uart_putchar
                  |L67.170|
0000aa  4918              LDR      r1,|L67.268|
0000ac  4818              LDR      r0,|L67.272|
0000ae  f7fffffe          BL       strstr
0000b2  2800              CMP      r0,#0                 ;1212
0000b4  d109              BNE      |L67.202|
0000b6  4814              LDR      r0,|L67.264|
0000b8  6800              LDR      r0,[r0,#0]            ;1212  ; time
0000ba  2801              CMP      r0,#1                 ;1212
0000bc  db05              BLT      |L67.202|
0000be  4915              LDR      r1,|L67.276|
0000c0  4813              LDR      r0,|L67.272|
0000c2  f7fffffe          BL       strstr
0000c6  2800              CMP      r0,#0                 ;1212
0000c8  d0de              BEQ      |L67.136|
                  |L67.202|
;;;1219   										}
;;;1220   	
;;;1221   									}
;;;1222   
;;;1223   
;;;1224   	
;;;1225   }	
0000ca  bd38              POP      {r3-r5,pc}
;;;1226   	
                          ENDP

                  |L67.204|
                          DCD      tmeout
                  |L67.208|
                          DCD      ||.conststring||
                  |L67.212|
                          DCD      ||.conststring||+0x8
                  |L67.216|
                          DCD      ||.conststring||+0x10
                  |L67.220|
                          DCD      ||.conststring||+0x11c
                  |L67.224|
                          DCD      at_
                  |L67.228|
                          DCD      interval
                  |L67.232|
                          DCD      ||.conststring||+0x13c
                  |L67.236|
                          DCD      ||.conststring||+0x30
                  |L67.240|
                          DCD      ||.conststring||+0x164
                  |L67.244|
                          DCD      k
                  |L67.248|
                          DCD      0x4006b000
                  |L67.252|
                          DCD      ||.conststring||+0xd0
                  |L67.256|
                          DCD      ||k2||
                  |L67.260|
                          DCD      0x00004e1f
                  |L67.264|
                          DCD      time
                  |L67.268|
                          DCD      ||.conststring||+0x58
                  |L67.272|
                          DCD      uart_string_gsm
                  |L67.276|
                          DCD      ||.conststring||+0xd4

                          AREA ||i.saveapn||, COMGROUP=saveapn, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  saveapn PROC
;;;1144   
;;;1145   __inline void saveapn(){
000000  b538              PUSH     {r3-r5,lr}
;;;1146   	
;;;1147   send_GSM("\nAT+FSCREATE=C:\\APN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L74.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L74.208|
000008  4a32              LDR      r2,|L74.212|
00000a  4933              LDR      r1,|L74.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L74.220|
000010  f7fffffe          BL       send_GSM
;;;1148   
;;;1149   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L74.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1150   	sprintf(at_,"\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",strlen(apn)+3);	
00001c  4831              LDR      r0,|L74.228|
00001e  f7fffffe          BL       strlen
000022  1cc4              ADDS     r4,r0,#3
000024  4622              MOV      r2,r4
000026  4930              LDR      r1,|L74.232|
000028  482d              LDR      r0,|L74.224|
00002a  f7fffffe          BL       __2sprintf
;;;1151   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
00002e  200a              MOVS     r0,#0xa
000030  4b27              LDR      r3,|L74.208|
000032  4a28              LDR      r2,|L74.212|
000034  492d              LDR      r1,|L74.236|
000036  9000              STR      r0,[sp,#0]
000038  4829              LDR      r0,|L74.224|
00003a  f7fffffe          BL       send_GSM
;;;1152   	//clear();
;;;1153   
;;;1154   	
;;;1155   	send_modem("|");
00003e  482c              LDR      r0,|L74.240|
000040  f7fffffe          BL       send_modem
;;;1156   		for(k=0;k<strlen(apn);k++)
000044  2000              MOVS     r0,#0
000046  492b              LDR      r1,|L74.244|
000048  6008              STR      r0,[r1,#0]  ; k
00004a  e00b              B        |L74.100|
                  |L74.76|
;;;1157   		{
;;;1158   			uart_putchar(UART1_BASE_PTR, apn[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004c  4825              LDR      r0,|L74.228|
00004e  4a29              LDR      r2,|L74.244|
000050  6812              LDR      r2,[r2,#0]  ; k
000052  5c81              LDRB     r1,[r0,r2]
000054  4828              LDR      r0,|L74.248|
000056  f7fffffe          BL       uart_putchar
00005a  4826              LDR      r0,|L74.244|
00005c  6800              LDR      r0,[r0,#0]            ;1156  ; k
00005e  1c40              ADDS     r0,r0,#1              ;1156
000060  4924              LDR      r1,|L74.244|
000062  6008              STR      r0,[r1,#0]            ;1156  ; k
                  |L74.100|
000064  481f              LDR      r0,|L74.228|
000066  f7fffffe          BL       strlen
00006a  4922              LDR      r1,|L74.244|
00006c  6809              LDR      r1,[r1,#0]            ;1156  ; k
00006e  4288              CMP      r0,r1                 ;1156
000070  d8ec              BHI      |L74.76|
;;;1159   		}	
;;;1160   			send_modem("|");			
000072  481f              LDR      r0,|L74.240|
000074  f7fffffe          BL       send_modem
;;;1161    
;;;1162   									k2=0;									//string array counter for uart 1
000078  2000              MOVS     r0,#0
00007a  4920              LDR      r1,|L74.252|
00007c  6008              STR      r0,[r1,#0]  ; k2
;;;1163   									time=19999;						//timer counts to wait for characters in uart 1 									
00007e  4820              LDR      r0,|L74.256|
000080  4920              LDR      r1,|L74.260|
000082  6008              STR      r0,[r1,#0]  ; time
;;;1164   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000084  e010              B        |L74.168|
                  |L74.134|
;;;1165   									{
;;;1166   									time--;
000086  481f              LDR      r0,|L74.260|
000088  6800              LDR      r0,[r0,#0]  ; time
00008a  1e40              SUBS     r0,r0,#1
00008c  491d              LDR      r1,|L74.260|
00008e  6008              STR      r0,[r1,#0]  ; time
;;;1167   									if(time % 2000 == 0)
000090  217d              MOVS     r1,#0x7d
000092  0109              LSLS     r1,r1,#4
000094  481b              LDR      r0,|L74.260|
000096  6800              LDR      r0,[r0,#0]  ; time
000098  f7fffffe          BL       __aeabi_idivmod
00009c  2900              CMP      r1,#0
00009e  d103              BNE      |L74.168|
;;;1168   										{
;;;1169   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1170   											uart_putchar(UART1_BASE_PTR,'\n');
0000a0  210a              MOVS     r1,#0xa
0000a2  4815              LDR      r0,|L74.248|
0000a4  f7fffffe          BL       uart_putchar
                  |L74.168|
0000a8  4917              LDR      r1,|L74.264|
0000aa  4818              LDR      r0,|L74.268|
0000ac  f7fffffe          BL       strstr
0000b0  2800              CMP      r0,#0                 ;1164
0000b2  d109              BNE      |L74.200|
0000b4  4813              LDR      r0,|L74.260|
0000b6  6800              LDR      r0,[r0,#0]            ;1164  ; time
0000b8  2801              CMP      r0,#1                 ;1164
0000ba  db05              BLT      |L74.200|
0000bc  4914              LDR      r1,|L74.272|
0000be  4813              LDR      r0,|L74.268|
0000c0  f7fffffe          BL       strstr
0000c4  2800              CMP      r0,#0                 ;1164
0000c6  d0de              BEQ      |L74.134|
                  |L74.200|
;;;1171   										}
;;;1172   	
;;;1173   									}
;;;1174   
;;;1175   
;;;1176   	
;;;1177   }
0000c8  bd38              POP      {r3-r5,pc}
;;;1178   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L74.204|
                          DCD      tmeout
                  |L74.208|
                          DCD      ||.conststring||
                  |L74.212|
                          DCD      ||.conststring||+0x8
                  |L74.216|
                          DCD      ||.conststring||+0x10
                  |L74.220|
                          DCD      ||.conststring||+0x170
                  |L74.224|
                          DCD      at_
                  |L74.228|
                          DCD      apn
                  |L74.232|
                          DCD      ||.conststring||+0x18c
                  |L74.236|
                          DCD      ||.conststring||+0x30
                  |L74.240|
                          DCD      ||.conststring||+0xd0
                  |L74.244|
                          DCD      k
                  |L74.248|
                          DCD      0x4006b000
                  |L74.252|
                          DCD      ||k2||
                  |L74.256|
                          DCD      0x00004e1f
                  |L74.260|
                          DCD      time
                  |L74.264|
                          DCD      ||.conststring||+0x58
                  |L74.268|
                          DCD      uart_string_gsm
                  |L74.272|
                          DCD      ||.conststring||+0xd4

                          AREA ||i.msg_sim800||, COMGROUP=msg_sim800, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  msg_sim800 PROC
;;;1700   
;;;1701   __inline void msg_sim800() 
000000  b51f              PUSH     {r0-r4,lr}
;;;1702   {
;;;1703   		cond1=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L81.1024|
000006  6008              STR      r0,[r1,#0]  ; cond1
;;;1704   		cond2=0;
000008  49fe              LDR      r1,|L81.1028|
00000a  6008              STR      r0,[r1,#0]  ; cond2
;;;1705   		cond3=0;
00000c  49fe              LDR      r1,|L81.1032|
00000e  6008              STR      r0,[r1,#0]  ; cond3
;;;1706   		cond4=0;
000010  49fe              LDR      r1,|L81.1036|
000012  6008              STR      r0,[r1,#0]  ; cond4
;;;1707   		cond5=0;
000014  49fe              LDR      r1,|L81.1040|
000016  6008              STR      r0,[r1,#0]  ; cond5
;;;1708   		cond6=0;
000018  49fe              LDR      r1,|L81.1044|
00001a  6008              STR      r0,[r1,#0]  ; cond6
;;;1709   		cond7=0;
00001c  49fe              LDR      r1,|L81.1048|
00001e  6008              STR      r0,[r1,#0]  ; cond7
;;;1710   		cond8=0;
000020  49fe              LDR      r1,|L81.1052|
000022  6008              STR      r0,[r1,#0]  ; cond8
;;;1711   		cond9=0;
000024  49fe              LDR      r1,|L81.1056|
000026  6008              STR      r0,[r1,#0]  ; cond9
;;;1712   		cond10=0;
000028  49fe              LDR      r1,|L81.1060|
00002a  6008              STR      r0,[r1,#0]  ; cond10
;;;1713   		cond11=0;
00002c  49fe              LDR      r1,|L81.1064|
00002e  6008              STR      r0,[r1,#0]  ; cond11
;;;1714   		cond12=0;
000030  49fe              LDR      r1,|L81.1068|
000032  6008              STR      r0,[r1,#0]  ; cond12
;;;1715   		cond13=0;
000034  49fe              LDR      r1,|L81.1072|
000036  6008              STR      r0,[r1,#0]  ; cond13
;;;1716   		cond14=0;
000038  49fe              LDR      r1,|L81.1076|
00003a  6008              STR      r0,[r1,#0]  ; cond14
;;;1717   		
;;;1718   	
;;;1719   //ringflag=1;	
;;;1720   	if(ringflag==1 )
00003c  48fe              LDR      r0,|L81.1080|
00003e  7800              LDRB     r0,[r0,#0]  ; ringflag
000040  2801              CMP      r0,#1
000042  d17d              BNE      |L81.320|
;;;1721   	{
;;;1722   		sleep_flag=0;
000044  2000              MOVS     r0,#0
000046  49fd              LDR      r1,|L81.1084|
000048  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1723       DTR_OFF;		// not sleep	
00004a  2080              MOVS     r0,#0x80
00004c  49fc              LDR      r1,|L81.1088|
00004e  6088              STR      r0,[r1,#8]
;;;1724   
;;;1725   delay(1000);
000050  207d              MOVS     r0,#0x7d
000052  00c0              LSLS     r0,r0,#3
000054  f7fffffe          BL       delay
;;;1726   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
000058  48fa              LDR      r0,|L81.1092|
00005a  6800              LDR      r0,[r0,#0]  ; tmeout
00005c  4bfa              LDR      r3,|L81.1096|
00005e  4afb              LDR      r2,|L81.1100|
000060  49fb              LDR      r1,|L81.1104|
000062  9000              STR      r0,[sp,#0]
000064  48fb              LDR      r0,|L81.1108|
000066  f7fffffe          BL       send_GSM
;;;1727   		
;;;1728   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);  		
00006a  48f6              LDR      r0,|L81.1092|
00006c  6800              LDR      r0,[r0,#0]  ; tmeout
00006e  4bf6              LDR      r3,|L81.1096|
000070  4af6              LDR      r2,|L81.1100|
000072  49f7              LDR      r1,|L81.1104|
000074  9000              STR      r0,[sp,#0]
000076  48f8              LDR      r0,|L81.1112|
000078  f7fffffe          BL       send_GSM
;;;1729   delay(1000);		
00007c  207d              MOVS     r0,#0x7d
00007e  00c0              LSLS     r0,r0,#3
000080  f7fffffe          BL       delay
;;;1730   		
;;;1731   
;;;1732   	send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000084  48ef              LDR      r0,|L81.1092|
000086  6800              LDR      r0,[r0,#0]  ; tmeout
000088  4bef              LDR      r3,|L81.1096|
00008a  4af0              LDR      r2,|L81.1100|
00008c  49f0              LDR      r1,|L81.1104|
00008e  9000              STR      r0,[sp,#0]
000090  48f2              LDR      r0,|L81.1116|
000092  f7fffffe          BL       send_GSM
;;;1733   	send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
000096  48eb              LDR      r0,|L81.1092|
000098  6800              LDR      r0,[r0,#0]  ; tmeout
00009a  4beb              LDR      r3,|L81.1096|
00009c  4aeb              LDR      r2,|L81.1100|
00009e  49ec              LDR      r1,|L81.1104|
0000a0  9000              STR      r0,[sp,#0]
0000a2  48ef              LDR      r0,|L81.1120|
0000a4  f7fffffe          BL       send_GSM
;;;1734   
;;;1735   					send_GSM("\r\nAT+CMGR=1\r\n", "OK\r\n", "ERROR" , "OK\r\n",tmeout);	
0000a8  48e6              LDR      r0,|L81.1092|
0000aa  6800              LDR      r0,[r0,#0]  ; tmeout
0000ac  4be8              LDR      r3,|L81.1104|
0000ae  4aed              LDR      r2,|L81.1124|
0000b0  4619              MOV      r1,r3
0000b2  9000              STR      r0,[sp,#0]
0000b4  48ec              LDR      r0,|L81.1128|
0000b6  f7fffffe          BL       send_GSM
;;;1736   					clear();
0000ba  f7fffffe          BL       clear
;;;1737   					memset(num2,0,30);
0000be  211e              MOVS     r1,#0x1e
0000c0  48ea              LDR      r0,|L81.1132|
0000c2  f7fffffe          BL       __aeabi_memclr
;;;1738   					parse_gsm(uart_string_gsm, 3, 4, num2);
0000c6  4be9              LDR      r3,|L81.1132|
0000c8  2204              MOVS     r2,#4
0000ca  2103              MOVS     r1,#3
0000cc  48e8              LDR      r0,|L81.1136|
0000ce  f7fffffe          BL       parse_gsm
;;;1739   			
;;;1740   						cond1=strstr(uart_string_gsm, "OWNER");	
0000d2  49e8              LDR      r1,|L81.1140|
0000d4  48e6              LDR      r0,|L81.1136|
0000d6  f7fffffe          BL       strstr
0000da  49c9              LDR      r1,|L81.1024|
0000dc  6008              STR      r0,[r1,#0]  ; cond1
;;;1741   						cond2=strstr(uart_string_gsm, "LOCATION");
0000de  49e6              LDR      r1,|L81.1144|
0000e0  48e3              LDR      r0,|L81.1136|
0000e2  f7fffffe          BL       strstr
0000e6  49c7              LDR      r1,|L81.1028|
0000e8  6008              STR      r0,[r1,#0]  ; cond2
;;;1742   						cond3=strstr(uart_string_gsm, "INTERVAL");
0000ea  49e4              LDR      r1,|L81.1148|
0000ec  48e0              LDR      r0,|L81.1136|
0000ee  f7fffffe          BL       strstr
0000f2  49c5              LDR      r1,|L81.1032|
0000f4  6008              STR      r0,[r1,#0]  ; cond3
;;;1743   						cond4=strstr(uart_string_gsm, "START");
0000f6  49e2              LDR      r1,|L81.1152|
0000f8  48dd              LDR      r0,|L81.1136|
0000fa  f7fffffe          BL       strstr
0000fe  49c3              LDR      r1,|L81.1036|
000100  6008              STR      r0,[r1,#0]  ; cond4
;;;1744   						cond5=strstr(uart_string_gsm, "OWNER1");
000102  49e0              LDR      r1,|L81.1156|
000104  48da              LDR      r0,|L81.1136|
000106  f7fffffe          BL       strstr
00010a  49c1              LDR      r1,|L81.1040|
00010c  6008              STR      r0,[r1,#0]  ; cond5
;;;1745   						cond6=strstr(uart_string_gsm, "OWNER2");
00010e  49de              LDR      r1,|L81.1160|
000110  48d7              LDR      r0,|L81.1136|
000112  f7fffffe          BL       strstr
000116  49bf              LDR      r1,|L81.1044|
000118  6008              STR      r0,[r1,#0]  ; cond6
;;;1746   						cond7=strstr(uart_string_gsm, "OWNER3");
00011a  49dc              LDR      r1,|L81.1164|
00011c  48d4              LDR      r0,|L81.1136|
00011e  f7fffffe          BL       strstr
000122  49bd              LDR      r1,|L81.1048|
000124  6008              STR      r0,[r1,#0]  ; cond7
;;;1747   						cond8=strstr(uart_string_gsm, "DEBUG");
000126  49da              LDR      r1,|L81.1168|
000128  48d1              LDR      r0,|L81.1136|
00012a  f7fffffe          BL       strstr
00012e  49bb              LDR      r1,|L81.1052|
000130  6008              STR      r0,[r1,#0]  ; cond8
;;;1748   						cond9=strstr(uart_string_gsm, "RESET");
000132  49d8              LDR      r1,|L81.1172|
000134  48ce              LDR      r0,|L81.1136|
000136  f7fffffe          BL       strstr
00013a  49b9              LDR      r1,|L81.1056|
00013c  6008              STR      r0,[r1,#0]  ; cond9
;;;1749   						cond10=strstr(uart_string_gsm, "IP");
00013e  e000              B        |L81.322|
                  |L81.320|
000140  e3e2              B        |L81.2312|
                  |L81.322|
000142  49d5              LDR      r1,|L81.1176|
000144  48ca              LDR      r0,|L81.1136|
000146  f7fffffe          BL       strstr
00014a  49b6              LDR      r1,|L81.1060|
00014c  6008              STR      r0,[r1,#0]  ; cond10
;;;1750   						cond11=strstr(uart_string_gsm, "FUEL ON");	
00014e  49d3              LDR      r1,|L81.1180|
000150  48c7              LDR      r0,|L81.1136|
000152  f7fffffe          BL       strstr
000156  49b4              LDR      r1,|L81.1064|
000158  6008              STR      r0,[r1,#0]  ; cond11
;;;1751   						cond12=strstr(uart_string_gsm, "FUEL OFF");	
00015a  49d1              LDR      r1,|L81.1184|
00015c  48c4              LDR      r0,|L81.1136|
00015e  f7fffffe          BL       strstr
000162  49b2              LDR      r1,|L81.1068|
000164  6008              STR      r0,[r1,#0]  ; cond12
;;;1752   						cond13=strstr(uart_string_gsm, "IGNITION ON");	
000166  49cf              LDR      r1,|L81.1188|
000168  48c1              LDR      r0,|L81.1136|
00016a  f7fffffe          BL       strstr
00016e  49b0              LDR      r1,|L81.1072|
000170  6008              STR      r0,[r1,#0]  ; cond13
;;;1753   						cond14=strstr(uart_string_gsm, "IGNITION OFF");	
000172  49cd              LDR      r1,|L81.1192|
000174  48be              LDR      r0,|L81.1136|
000176  f7fffffe          BL       strstr
00017a  49ae              LDR      r1,|L81.1076|
00017c  6008              STR      r0,[r1,#0]  ; cond14
;;;1754   							if(cond1 && cond2)
00017e  48a0              LDR      r0,|L81.1024|
000180  6800              LDR      r0,[r0,#0]  ; cond1
000182  2800              CMP      r0,#0
000184  d025              BEQ      |L81.466|
000186  489f              LDR      r0,|L81.1028|
000188  6800              LDR      r0,[r0,#0]  ; cond2
00018a  2800              CMP      r0,#0
00018c  d021              BEQ      |L81.466|
;;;1755   							{
;;;1756   								memset(data2,0,strlen(data2));
00018e  48c7              LDR      r0,|L81.1196|
000190  f7fffffe          BL       strlen
000194  4604              MOV      r4,r0
000196  4621              MOV      r1,r4
000198  48c4              LDR      r0,|L81.1196|
00019a  f7fffffe          BL       __aeabi_memclr
;;;1757   								sprintf(data2,"\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);	
00019e  48c4              LDR      r0,|L81.1200|
0001a0  2125              MOVS     r1,#0x25
0001a2  4ac4              LDR      r2,|L81.1204|
0001a4  4bc4              LDR      r3,|L81.1208|
0001a6  9300              STR      r3,[sp,#0]
0001a8  9201              STR      r2,[sp,#4]
0001aa  9102              STR      r1,[sp,#8]
0001ac  9003              STR      r0,[sp,#0xc]
0001ae  4603              MOV      r3,r0
0001b0  49c2              LDR      r1,|L81.1212|
0001b2  48be              LDR      r0,|L81.1196|
0001b4  f7fffffe          BL       __2sprintf
;;;1758   
;;;1759   								{send_message(data2);}
0001b8  48bc              LDR      r0,|L81.1196|
0001ba  f7fffffe          BL       send_message
;;;1760   
;;;1761   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001be  48a1              LDR      r0,|L81.1092|
0001c0  6800              LDR      r0,[r0,#0]  ; tmeout
0001c2  4ba1              LDR      r3,|L81.1096|
0001c4  4aa1              LDR      r2,|L81.1100|
0001c6  49a2              LDR      r1,|L81.1104|
0001c8  9000              STR      r0,[sp,#0]
0001ca  48bd              LDR      r0,|L81.1216|
0001cc  f7fffffe          BL       send_GSM
                  |L81.464|
0001d0  e31a              B        |L81.2056|
                  |L81.466|
;;;1762   								
;;;1763   								
;;;1764   							}
;;;1765   	
;;;1766   							else if(cond1 && cond3)
0001d2  488b              LDR      r0,|L81.1024|
0001d4  6800              LDR      r0,[r0,#0]  ; cond1
0001d6  2800              CMP      r0,#0
0001d8  d026              BEQ      |L81.552|
0001da  488b              LDR      r0,|L81.1032|
0001dc  6800              LDR      r0,[r0,#0]  ; cond3
0001de  2800              CMP      r0,#0
0001e0  d022              BEQ      |L81.552|
;;;1767   							{
;;;1768   								memset(at_,0,100);
0001e2  2164              MOVS     r1,#0x64
0001e4  48b7              LDR      r0,|L81.1220|
0001e6  f7fffffe          BL       __aeabi_memclr
;;;1769   								memset(interval,0,5);
0001ea  2105              MOVS     r1,#5
0001ec  48b6              LDR      r0,|L81.1224|
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1770   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', interval);		
0001f2  48b5              LDR      r0,|L81.1224|
0001f4  210d              MOVS     r1,#0xd
0001f6  2320              MOVS     r3,#0x20
0001f8  2205              MOVS     r2,#5
0001fa  9100              STR      r1,[sp,#0]
0001fc  9001              STR      r0,[sp,#4]
0001fe  2103              MOVS     r1,#3
000200  489b              LDR      r0,|L81.1136|
000202  f7fffffe          BL       parse_g
;;;1771   								int_erval=myAtoi(interval);
000206  48b0              LDR      r0,|L81.1224|
000208  f7fffffe          BL       myAtoi
00020c  49af              LDR      r1,|L81.1228|
00020e  6008              STR      r0,[r1,#0]  ; int_erval
;;;1772   								save_interval();			
000210  f7fffffe          BL       save_interval
;;;1773   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000214  488b              LDR      r0,|L81.1092|
000216  6800              LDR      r0,[r0,#0]  ; tmeout
000218  4b8b              LDR      r3,|L81.1096|
00021a  4a8c              LDR      r2,|L81.1100|
00021c  498c              LDR      r1,|L81.1104|
00021e  9000              STR      r0,[sp,#0]
000220  48a7              LDR      r0,|L81.1216|
000222  f7fffffe          BL       send_GSM
000226  e7d3              B        |L81.464|
                  |L81.552|
;;;1774   
;;;1775   								
;;;1776   							}				
;;;1777   
;;;1778   			
;;;1779   							else if(cond1 && cond4)
000228  4875              LDR      r0,|L81.1024|
00022a  6800              LDR      r0,[r0,#0]  ; cond1
00022c  2800              CMP      r0,#0
00022e  d073              BEQ      |L81.792|
000230  4876              LDR      r0,|L81.1036|
000232  6800              LDR      r0,[r0,#0]  ; cond4
000234  2800              CMP      r0,#0
000236  d06f              BEQ      |L81.792|
;;;1780   							{
;;;1781   								memset( apn,0,25);
000238  2119              MOVS     r1,#0x19
00023a  48a5              LDR      r0,|L81.1232|
00023c  f7fffffe          BL       __aeabi_memclr
;;;1782   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', apn);			
000240  48a3              LDR      r0,|L81.1232|
000242  210d              MOVS     r1,#0xd
000244  2320              MOVS     r3,#0x20
000246  2205              MOVS     r2,#5
000248  9100              STR      r1,[sp,#0]
00024a  9001              STR      r0,[sp,#4]
00024c  2103              MOVS     r1,#3
00024e  4888              LDR      r0,|L81.1136|
000250  f7fffffe          BL       parse_g
;;;1783   								saveapn();								
000254  f7fffffe          BL       saveapn
;;;1784   								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000258  487a              LDR      r0,|L81.1092|
00025a  6800              LDR      r0,[r0,#0]  ; tmeout
00025c  4b7a              LDR      r3,|L81.1096|
00025e  4a7b              LDR      r2,|L81.1100|
000260  499c              LDR      r1,|L81.1236|
000262  9000              STR      r0,[sp,#0]
000264  489c              LDR      r0,|L81.1240|
000266  f7fffffe          BL       send_GSM
;;;1785   								send_GSM("\nAT+FSCREATE=D:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00026a  4876              LDR      r0,|L81.1092|
00026c  6800              LDR      r0,[r0,#0]  ; tmeout
00026e  4b76              LDR      r3,|L81.1096|
000270  4a76              LDR      r2,|L81.1100|
000272  4998              LDR      r1,|L81.1236|
000274  9000              STR      r0,[sp,#0]
000276  4899              LDR      r0,|L81.1244|
000278  f7fffffe          BL       send_GSM
;;;1786   								send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00027c  4871              LDR      r0,|L81.1092|
00027e  6800              LDR      r0,[r0,#0]  ; tmeout
000280  4b71              LDR      r3,|L81.1096|
000282  4a72              LDR      r2,|L81.1100|
000284  4993              LDR      r1,|L81.1236|
000286  9000              STR      r0,[sp,#0]
000288  4895              LDR      r0,|L81.1248|
00028a  f7fffffe          BL       send_GSM
;;;1787   								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00028e  486d              LDR      r0,|L81.1092|
000290  6800              LDR      r0,[r0,#0]  ; tmeout
000292  4b6d              LDR      r3,|L81.1096|
000294  4a6d              LDR      r2,|L81.1100|
000296  498f              LDR      r1,|L81.1236|
000298  9000              STR      r0,[sp,#0]
00029a  4892              LDR      r0,|L81.1252|
00029c  f7fffffe          BL       send_GSM
;;;1788   								send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
0002a0  4868              LDR      r0,|L81.1092|
0002a2  6800              LDR      r0,[r0,#0]  ; tmeout
0002a4  4b68              LDR      r3,|L81.1096|
0002a6  4a69              LDR      r2,|L81.1100|
0002a8  498a              LDR      r1,|L81.1236|
0002aa  9000              STR      r0,[sp,#0]
0002ac  488e              LDR      r0,|L81.1256|
0002ae  f7fffffe          BL       send_GSM
;;;1789   
;;;1790   								memcpy (ip, "104.236.203.4", 13);
0002b2  220d              MOVS     r2,#0xd
0002b4  498d              LDR      r1,|L81.1260|
0002b6  488e              LDR      r0,|L81.1264|
0002b8  f7fffffe          BL       __aeabi_memcpy
;;;1791   								memcpy (port, "5555", 4);		
0002bc  488d              LDR      r0,|L81.1268|
0002be  498e              LDR      r1,|L81.1272|
0002c0  880a              LDRH     r2,[r1,#0]
0002c2  8002              STRH     r2,[r0,#0]
0002c4  8849              LDRH     r1,[r1,#2]
0002c6  8041              STRH     r1,[r0,#2]
;;;1792   								memcpy (interval, "5", 1);										
0002c8  487f              LDR      r0,|L81.1224|
0002ca  498c              LDR      r1,|L81.1276|
0002cc  7809              LDRB     r1,[r1,#0]
0002ce  7001              STRB     r1,[r0,#0]
;;;1793   								save_ip_port();
0002d0  f7fffffe          BL       save_ip_port
;;;1794   								ignstaton();
0002d4  f7fffffe          BL       ignstaton
;;;1795   
;;;1796   								save_interval();	
0002d8  f7fffffe          BL       save_interval
;;;1797   								int_erval=myAtoi(interval);		
0002dc  487a              LDR      r0,|L81.1224|
0002de  f7fffffe          BL       myAtoi
0002e2  497a              LDR      r1,|L81.1228|
0002e4  6008              STR      r0,[r1,#0]  ; int_erval
;;;1798   
;;;1799   			//					printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
;;;1800   								
;;;1801   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
0002e6  4857              LDR      r0,|L81.1092|
0002e8  6800              LDR      r0,[r0,#0]  ; tmeout
0002ea  4b57              LDR      r3,|L81.1096|
0002ec  4a5d              LDR      r2,|L81.1124|
0002ee  4979              LDR      r1,|L81.1236|
0002f0  9000              STR      r0,[sp,#0]
0002f2  4883              LDR      r0,|L81.1280|
0002f4  f7fffffe          BL       send_GSM
;;;1802   
;;;1803   								
;;;1804   								
;;;1805   		RESET_OFF;delay(10);
0002f8  2020              MOVS     r0,#0x20
0002fa  4951              LDR      r1,|L81.1088|
0002fc  3940              SUBS     r1,r1,#0x40
0002fe  6088              STR      r0,[r1,#8]
000300  200a              MOVS     r0,#0xa
000302  f7fffffe          BL       delay
;;;1806   		RESET_ON;delay(10);		
000306  2020              MOVS     r0,#0x20
000308  494d              LDR      r1,|L81.1088|
00030a  3940              SUBS     r1,r1,#0x40
00030c  6048              STR      r0,[r1,#4]
00030e  200a              MOVS     r0,#0xa
000310  f7fffffe          BL       delay
000314  e3f8              B        |L81.2824|
000316  e7ff              B        |L81.792|
                  |L81.792|
;;;1807   
;;;1808   								
;;;1809   								
;;;1810   							}
;;;1811   	
;;;1812   						else if(cond8)
000318  4840              LDR      r0,|L81.1052|
00031a  6800              LDR      r0,[r0,#0]  ; cond8
00031c  2800              CMP      r0,#0
00031e  d06d              BEQ      |L81.1020|
;;;1813   							{
;;;1814   								
;;;1815   									memset(at_,0,100);
000320  2164              MOVS     r1,#0x64
000322  4868              LDR      r0,|L81.1220|
000324  f7fffffe          BL       __aeabi_memclr
;;;1816   									for(k=0;k<450;k++)
000328  2000              MOVS     r0,#0
00032a  4976              LDR      r1,|L81.1284|
00032c  6008              STR      r0,[r1,#0]  ; k
00032e  e04e              B        |L81.974|
                  |L81.816|
;;;1817   									{
;;;1818   										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
000330  4874              LDR      r0,|L81.1284|
000332  6800              LDR      r0,[r0,#0]  ; k
000334  1e40              SUBS     r0,r0,#1
000336  494e              LDR      r1,|L81.1136|
000338  5c08              LDRB     r0,[r1,r0]
00033a  2820              CMP      r0,#0x20
00033c  d142              BNE      |L81.964|
00033e  4871              LDR      r0,|L81.1284|
000340  6800              LDR      r0,[r0,#0]  ; k
000342  1e80              SUBS     r0,r0,#2
000344  5c08              LDRB     r0,[r1,r0]
000346  2847              CMP      r0,#0x47
000348  d13c              BNE      |L81.964|
00034a  486e              LDR      r0,|L81.1284|
00034c  6800              LDR      r0,[r0,#0]  ; k
00034e  1ec0              SUBS     r0,r0,#3
000350  5c08              LDRB     r0,[r1,r0]
000352  2855              CMP      r0,#0x55
000354  d136              BNE      |L81.964|
;;;1819   										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
000356  486b              LDR      r0,|L81.1284|
000358  6800              LDR      r0,[r0,#0]  ; k
00035a  1f00              SUBS     r0,r0,#4
00035c  5c08              LDRB     r0,[r1,r0]
00035e  2842              CMP      r0,#0x42
000360  d130              BNE      |L81.964|
000362  4868              LDR      r0,|L81.1284|
000364  6800              LDR      r0,[r0,#0]  ; k
000366  1f40              SUBS     r0,r0,#5
000368  5c08              LDRB     r0,[r1,r0]
00036a  2845              CMP      r0,#0x45
00036c  d12a              BNE      |L81.964|
00036e  4865              LDR      r0,|L81.1284|
000370  6800              LDR      r0,[r0,#0]  ; k
000372  1f80              SUBS     r0,r0,#6
000374  5c08              LDRB     r0,[r1,r0]
000376  2844              CMP      r0,#0x44
000378  d124              BNE      |L81.964|
;;;1820   										{
;;;1821   											for(i=0;i<100;i++)
00037a  2000              MOVS     r0,#0
00037c  4962              LDR      r1,|L81.1288|
00037e  6008              STR      r0,[r1,#0]  ; i
000380  e011              B        |L81.934|
                  |L81.898|
;;;1822   											{
;;;1823   												at_[i]=uart_string_gsm[k];
000382  483b              LDR      r0,|L81.1136|
000384  495f              LDR      r1,|L81.1284|
000386  6809              LDR      r1,[r1,#0]  ; k
000388  5c40              LDRB     r0,[r0,r1]
00038a  494e              LDR      r1,|L81.1220|
00038c  4a5e              LDR      r2,|L81.1288|
00038e  6812              LDR      r2,[r2,#0]  ; i
000390  5488              STRB     r0,[r1,r2]
;;;1824   												k++;
000392  485c              LDR      r0,|L81.1284|
000394  6800              LDR      r0,[r0,#0]  ; k
000396  1c40              ADDS     r0,r0,#1
000398  495a              LDR      r1,|L81.1284|
00039a  6008              STR      r0,[r1,#0]  ; k
00039c  485a              LDR      r0,|L81.1288|
00039e  6800              LDR      r0,[r0,#0]            ;1821  ; i
0003a0  1c40              ADDS     r0,r0,#1              ;1821
0003a2  4959              LDR      r1,|L81.1288|
0003a4  6008              STR      r0,[r1,#0]            ;1821  ; i
                  |L81.934|
0003a6  4858              LDR      r0,|L81.1288|
0003a8  6800              LDR      r0,[r0,#0]            ;1821  ; i
0003aa  2864              CMP      r0,#0x64              ;1821
0003ac  dbe9              BLT      |L81.898|
;;;1825   											}	
;;;1826   										at_[i+1]='\r';
0003ae  210d              MOVS     r1,#0xd
0003b0  4a44              LDR      r2,|L81.1220|
0003b2  4855              LDR      r0,|L81.1288|
0003b4  6800              LDR      r0,[r0,#0]  ; i
0003b6  1c40              ADDS     r0,r0,#1
0003b8  5411              STRB     r1,[r2,r0]
;;;1827   										at_[i+2]='\n';	
0003ba  210a              MOVS     r1,#0xa
0003bc  4852              LDR      r0,|L81.1288|
0003be  6800              LDR      r0,[r0,#0]  ; i
0003c0  1c80              ADDS     r0,r0,#2
0003c2  5411              STRB     r1,[r2,r0]
                  |L81.964|
0003c4  484f              LDR      r0,|L81.1284|
0003c6  6800              LDR      r0,[r0,#0]            ;1816  ; k
0003c8  1c40              ADDS     r0,r0,#1              ;1816
0003ca  494e              LDR      r1,|L81.1284|
0003cc  6008              STR      r0,[r1,#0]            ;1816  ; k
                  |L81.974|
0003ce  484d              LDR      r0,|L81.1284|
0003d0  6800              LDR      r0,[r0,#0]            ;1816  ; k
0003d2  21ff              MOVS     r1,#0xff              ;1816
0003d4  31c3              ADDS     r1,r1,#0xc3           ;1816
0003d6  4288              CMP      r0,r1                 ;1816
0003d8  dbaa              BLT      |L81.816|
;;;1828   										}
;;;1829   										else{}
;;;1830   									}
;;;1831   									
;;;1832   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0003da  481a              LDR      r0,|L81.1092|
0003dc  6800              LDR      r0,[r0,#0]  ; tmeout
0003de  4b1a              LDR      r3,|L81.1096|
0003e0  4a1a              LDR      r2,|L81.1100|
0003e2  491b              LDR      r1,|L81.1104|
0003e4  9000              STR      r0,[sp,#0]
0003e6  4836              LDR      r0,|L81.1216|
0003e8  f7fffffe          BL       send_GSM
;;;1833   									  send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);		
0003ec  4815              LDR      r0,|L81.1092|
0003ee  6800              LDR      r0,[r0,#0]  ; tmeout
0003f0  4b15              LDR      r3,|L81.1096|
0003f2  4a16              LDR      r2,|L81.1100|
0003f4  4916              LDR      r1,|L81.1104|
0003f6  9000              STR      r0,[sp,#0]
0003f8  4832              LDR      r0,|L81.1220|
0003fa  e087              B        |L81.1292|
                  |L81.1020|
0003fc  e099              B        |L81.1330|
0003fe  0000              DCW      0x0000
                  |L81.1024|
                          DCD      cond1
                  |L81.1028|
                          DCD      cond2
                  |L81.1032|
                          DCD      cond3
                  |L81.1036|
                          DCD      cond4
                  |L81.1040|
                          DCD      cond5
                  |L81.1044|
                          DCD      cond6
                  |L81.1048|
                          DCD      cond7
                  |L81.1052|
                          DCD      cond8
                  |L81.1056|
                          DCD      cond9
                  |L81.1060|
                          DCD      cond10
                  |L81.1064|
                          DCD      cond11
                  |L81.1068|
                          DCD      cond12
                  |L81.1072|
                          DCD      cond13
                  |L81.1076|
                          DCD      cond14
                  |L81.1080|
                          DCD      ringflag
                  |L81.1084|
                          DCD      sleep_flag
                  |L81.1088|
                          DCD      0x400ff0c0
                  |L81.1092|
                          DCD      tmeout
                  |L81.1096|
                          DCD      ||.conststring||
                  |L81.1100|
                          DCD      ||.conststring||+0x8
                  |L81.1104|
                          DCD      ||.conststring||+0x58
                  |L81.1108|
                          DCD      ||.conststring||+0x1b0
                  |L81.1112|
                          DCD      ||.conststring||+0x1b8
                  |L81.1116|
                          DCD      ||.conststring||+0x1c4
                  |L81.1120|
                          DCD      ||.conststring||+0x1d4
                  |L81.1124|
                          DCD      ||.conststring||+0xd4
                  |L81.1128|
                          DCD      ||.conststring||+0x1e4
                  |L81.1132|
                          DCD      num2
                  |L81.1136|
                          DCD      uart_string_gsm
                  |L81.1140|
                          DCD      ||.conststring||+0x1f4
                  |L81.1144|
                          DCD      ||.conststring||+0x1fc
                  |L81.1148|
                          DCD      ||.conststring||+0x208
                  |L81.1152|
                          DCD      ||.conststring||+0x214
                  |L81.1156|
                          DCD      ||.conststring||+0x21c
                  |L81.1160|
                          DCD      ||.conststring||+0x224
                  |L81.1164|
                          DCD      ||.conststring||+0x22c
                  |L81.1168|
                          DCD      ||.conststring||+0x234
                  |L81.1172|
                          DCD      ||.conststring||+0x23c
                  |L81.1176|
                          DCD      ||.conststring||+0x244
                  |L81.1180|
                          DCD      ||.conststring||+0x248
                  |L81.1184|
                          DCD      ||.conststring||+0x250
                  |L81.1188|
                          DCD      ||.conststring||+0x25c
                  |L81.1192|
                          DCD      ||.conststring||+0x268
                  |L81.1196|
                          DCD      data2
                  |L81.1200|
                          DCD      longi
                  |L81.1204|
                          DCD      lati
                  |L81.1208|
                          DCD      velocity
                  |L81.1212|
                          DCD      ||.conststring||+0x278
                  |L81.1216|
                          DCD      ||.conststring||+0x2e0
                  |L81.1220|
                          DCD      at_
                  |L81.1224|
                          DCD      interval
                  |L81.1228|
                          DCD      int_erval
                  |L81.1232|
                          DCD      apn
                  |L81.1236|
                          DCD      ||.conststring||+0x10
                  |L81.1240|
                          DCD      ||.conststring||+0x78
                  |L81.1244|
                          DCD      ||.conststring||+0x2f0
                  |L81.1248|
                          DCD      ||.conststring||+0x30c
                  |L81.1252|
                          DCD      ||.conststring||+0x11c
                  |L81.1256|
                          DCD      ||.conststring||+0x14
                  |L81.1260|
                          DCD      ||.conststring||+0x328
                  |L81.1264|
                          DCD      ||ip||
                  |L81.1268|
                          DCD      port
                  |L81.1272|
                          DCD      ||.conststring||+0x338
                  |L81.1276|
                          DCD      ||.conststring||+0x340
                  |L81.1280|
                          DCD      ||.conststring||+0x344
                  |L81.1284|
                          DCD      k
                  |L81.1288|
                          DCD      i
                  |L81.1292|
00050c  f7fffffe          BL       send_GSM
;;;1834   										memset(data2,0,strlen(data2));
000510  48fe              LDR      r0,|L81.2316|
000512  f7fffffe          BL       strlen
000516  4604              MOV      r4,r0
000518  4621              MOV      r1,r4
00051a  48fc              LDR      r0,|L81.2316|
00051c  f7fffffe          BL       __aeabi_memclr
;;;1835   										sprintf(data2,"%s",uart_string_gsm);	
000520  4afb              LDR      r2,|L81.2320|
000522  49fc              LDR      r1,|L81.2324|
000524  48f9              LDR      r0,|L81.2316|
000526  f7fffffe          BL       __2sprintf
;;;1836   										send_message(data2);
00052a  48f8              LDR      r0,|L81.2316|
00052c  f7fffffe          BL       send_message
000530  e2ea              B        |L81.2824|
                  |L81.1330|
;;;1837   										
;;;1838   									
;;;1839   								
;;;1840   							}
;;;1841   							
;;;1842   							else if( cond1 && cond9)
000532  48f9              LDR      r0,|L81.2328|
000534  6800              LDR      r0,[r0,#0]  ; cond1
000536  2800              CMP      r0,#0
                  |L81.1336|
000538  d07d              BEQ      |L81.1590|
00053a  48f8              LDR      r0,|L81.2332|
00053c  6800              LDR      r0,[r0,#0]  ; cond9
00053e  2800              CMP      r0,#0
000540  d0fa              BEQ      |L81.1336|
;;;1843   							{
;;;1844   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000542  48f7              LDR      r0,|L81.2336|
000544  6800              LDR      r0,[r0,#0]  ; tmeout
000546  4bf7              LDR      r3,|L81.2340|
000548  4af7              LDR      r2,|L81.2344|
00054a  49f8              LDR      r1,|L81.2348|
00054c  9000              STR      r0,[sp,#0]
00054e  48f8              LDR      r0,|L81.2352|
000550  f7fffffe          BL       send_GSM
;;;1845   
;;;1846   strcat(data,"\n");	
000554  49f7              LDR      r1,|L81.2356|
000556  48f8              LDR      r0,|L81.2360|
000558  f7fffffe          BL       strcat
;;;1847   GPS_COLLECT();
00055c  f7fffffe          BL       GPS_COLLECT
;;;1848   strcat(data,"CH\n");	
000560  49f6              LDR      r1,|L81.2364|
000562  48f5              LDR      r0,|L81.2360|
000564  f7fffffe          BL       strcat
;;;1849   
;;;1850   								
;;;1851   
;;;1852   	delay(100);
000568  2064              MOVS     r0,#0x64
00056a  f7fffffe          BL       delay
;;;1853   		clear();//memset(uart_string_gsm,0,5000);
00056e  f7fffffe          BL       clear
;;;1854   	
;;;1855   	memset(at_,0,100);
000572  2164              MOVS     r1,#0x64
000574  48f2              LDR      r0,|L81.2368|
000576  f7fffffe          BL       __aeabi_memclr
;;;1856   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00057a  48ef              LDR      r0,|L81.2360|
00057c  f7fffffe          BL       strlen
000580  1c44              ADDS     r4,r0,#1
000582  4623              MOV      r3,r4
000584  4aef              LDR      r2,|L81.2372|
000586  49f0              LDR      r1,|L81.2376|
000588  48ed              LDR      r0,|L81.2368|
00058a  f7fffffe          BL       __2sprintf
;;;1857   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00058e  2005              MOVS     r0,#5
000590  4bee              LDR      r3,|L81.2380|
000592  4ae5              LDR      r2,|L81.2344|
000594  49ee              LDR      r1,|L81.2384|
000596  9000              STR      r0,[sp,#0]
000598  48e9              LDR      r0,|L81.2368|
00059a  f7fffffe          BL       send_SD
;;;1858   	
;;;1859   clear();	
00059e  f7fffffe          BL       clear
;;;1860   									k2=0;									//string array counter for uart 1
0005a2  2000              MOVS     r0,#0
0005a4  49eb              LDR      r1,|L81.2388|
0005a6  6008              STR      r0,[r1,#0]  ; k2
;;;1861   									tout=0;	
0005a8  49eb              LDR      r1,|L81.2392|
0005aa  6008              STR      r0,[r1,#0]  ; tout
;;;1862   		for(k=0;k<strlen(data);k++)
0005ac  49eb              LDR      r1,|L81.2396|
0005ae  6008              STR      r0,[r1,#0]  ; k
0005b0  e00b              B        |L81.1482|
                  |L81.1458|
;;;1863   		{
;;;1864   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0005b2  48e1              LDR      r0,|L81.2360|
0005b4  4ae9              LDR      r2,|L81.2396|
0005b6  6812              LDR      r2,[r2,#0]  ; k
0005b8  5c81              LDRB     r1,[r0,r2]
0005ba  48e9              LDR      r0,|L81.2400|
0005bc  f7fffffe          BL       uart_putchar
0005c0  48e6              LDR      r0,|L81.2396|
0005c2  6800              LDR      r0,[r0,#0]            ;1862  ; k
0005c4  1c40              ADDS     r0,r0,#1              ;1862
0005c6  49e5              LDR      r1,|L81.2396|
0005c8  6008              STR      r0,[r1,#0]            ;1862  ; k
                  |L81.1482|
0005ca  48db              LDR      r0,|L81.2360|
0005cc  f7fffffe          BL       strlen
0005d0  49e2              LDR      r1,|L81.2396|
0005d2  6809              LDR      r1,[r1,#0]            ;1862  ; k
0005d4  4288              CMP      r0,r1                 ;1862
0005d6  d8ec              BHI      |L81.1458|
;;;1865   		}	
;;;1866   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0005d8  210a              MOVS     r1,#0xa
0005da  48e1              LDR      r0,|L81.2400|
0005dc  f7fffffe          BL       uart_putchar
0005e0  210a              MOVS     r1,#0xa
0005e2  48df              LDR      r0,|L81.2400|
0005e4  f7fffffe          BL       uart_putchar
0005e8  210a              MOVS     r1,#0xa
0005ea  48dd              LDR      r0,|L81.2400|
0005ec  f7fffffe          BL       uart_putchar
0005f0  210a              MOVS     r1,#0xa
0005f2  48db              LDR      r0,|L81.2400|
0005f4  f7fffffe          BL       uart_putchar
0005f8  210a              MOVS     r1,#0xa
0005fa  48d9              LDR      r0,|L81.2400|
0005fc  f7fffffe          BL       uart_putchar
000600  210a              MOVS     r1,#0xa
000602  48d7              LDR      r0,|L81.2400|
000604  f7fffffe          BL       uart_putchar
000608  210a              MOVS     r1,#0xa
00060a  48d5              LDR      r0,|L81.2400|
00060c  f7fffffe          BL       uart_putchar
000610  210a              MOVS     r1,#0xa
000612  48d3              LDR      r0,|L81.2400|
000614  f7fffffe          BL       uart_putchar
000618  210a              MOVS     r1,#0xa
00061a  48d1              LDR      r0,|L81.2400|
00061c  f7fffffe          BL       uart_putchar
000620  210a              MOVS     r1,#0xa
000622  48cf              LDR      r0,|L81.2400|
000624  f7fffffe          BL       uart_putchar
000628  210a              MOVS     r1,#0xa
00062a  48cd              LDR      r0,|L81.2400|
00062c  f7fffffe          BL       uart_putchar
000630  210a              MOVS     r1,#0xa
000632  48cb              LDR      r0,|L81.2400|
000634  e000              B        |L81.1592|
                  |L81.1590|
000636  e0e8              B        |L81.2058|
                  |L81.1592|
000638  f7fffffe          BL       uart_putchar
00063c  210a              MOVS     r1,#0xa
00063e  48c8              LDR      r0,|L81.2400|
000640  f7fffffe          BL       uart_putchar
000644  210a              MOVS     r1,#0xa
000646  48c6              LDR      r0,|L81.2400|
000648  f7fffffe          BL       uart_putchar
00064c  210a              MOVS     r1,#0xa
00064e  48c4              LDR      r0,|L81.2400|
000650  f7fffffe          BL       uart_putchar
000654  210a              MOVS     r1,#0xa
000656  48c2              LDR      r0,|L81.2400|
000658  f7fffffe          BL       uart_putchar
00065c  210a              MOVS     r1,#0xa
00065e  48c0              LDR      r0,|L81.2400|
000660  f7fffffe          BL       uart_putchar
000664  210a              MOVS     r1,#0xa
000666  48be              LDR      r0,|L81.2400|
000668  f7fffffe          BL       uart_putchar
00066c  210a              MOVS     r1,#0xa
00066e  48bc              LDR      r0,|L81.2400|
000670  f7fffffe          BL       uart_putchar
000674  210a              MOVS     r1,#0xa
000676  48ba              LDR      r0,|L81.2400|
000678  f7fffffe          BL       uart_putchar
00067c  210a              MOVS     r1,#0xa
00067e  48b8              LDR      r0,|L81.2400|
000680  f7fffffe          BL       uart_putchar
000684  210a              MOVS     r1,#0xa
000686  48b6              LDR      r0,|L81.2400|
000688  f7fffffe          BL       uart_putchar
00068c  210a              MOVS     r1,#0xa
00068e  48b4              LDR      r0,|L81.2400|
000690  f7fffffe          BL       uart_putchar
000694  210a              MOVS     r1,#0xa
000696  48b2              LDR      r0,|L81.2400|
000698  f7fffffe          BL       uart_putchar
00069c  210a              MOVS     r1,#0xa
00069e  48b0              LDR      r0,|L81.2400|
0006a0  f7fffffe          BL       uart_putchar
0006a4  210a              MOVS     r1,#0xa
0006a6  48ae              LDR      r0,|L81.2400|
0006a8  f7fffffe          BL       uart_putchar
0006ac  210a              MOVS     r1,#0xa
0006ae  48ac              LDR      r0,|L81.2400|
0006b0  f7fffffe          BL       uart_putchar
0006b4  210a              MOVS     r1,#0xa
0006b6  48aa              LDR      r0,|L81.2400|
0006b8  f7fffffe          BL       uart_putchar
0006bc  210a              MOVS     r1,#0xa
0006be  48a8              LDR      r0,|L81.2400|
0006c0  f7fffffe          BL       uart_putchar
0006c4  210a              MOVS     r1,#0xa
0006c6  48a6              LDR      r0,|L81.2400|
0006c8  f7fffffe          BL       uart_putchar
0006cc  210a              MOVS     r1,#0xa
0006ce  48a4              LDR      r0,|L81.2400|
0006d0  f7fffffe          BL       uart_putchar
0006d4  210a              MOVS     r1,#0xa
0006d6  48a2              LDR      r0,|L81.2400|
0006d8  f7fffffe          BL       uart_putchar
0006dc  210a              MOVS     r1,#0xa
0006de  48a0              LDR      r0,|L81.2400|
0006e0  f7fffffe          BL       uart_putchar
0006e4  210a              MOVS     r1,#0xa
0006e6  489e              LDR      r0,|L81.2400|
0006e8  f7fffffe          BL       uart_putchar
0006ec  210a              MOVS     r1,#0xa
0006ee  489c              LDR      r0,|L81.2400|
0006f0  f7fffffe          BL       uart_putchar
0006f4  210a              MOVS     r1,#0xa
0006f6  489a              LDR      r0,|L81.2400|
0006f8  f7fffffe          BL       uart_putchar
0006fc  210a              MOVS     r1,#0xa
0006fe  4898              LDR      r0,|L81.2400|
000700  f7fffffe          BL       uart_putchar
000704  210a              MOVS     r1,#0xa
000706  4896              LDR      r0,|L81.2400|
000708  f7fffffe          BL       uart_putchar
00070c  210a              MOVS     r1,#0xa
00070e  4894              LDR      r0,|L81.2400|
000710  f7fffffe          BL       uart_putchar
000714  210a              MOVS     r1,#0xa
000716  4892              LDR      r0,|L81.2400|
000718  f7fffffe          BL       uart_putchar
00071c  210a              MOVS     r1,#0xa
00071e  4890              LDR      r0,|L81.2400|
000720  f7fffffe          BL       uart_putchar
000724  210a              MOVS     r1,#0xa
000726  488e              LDR      r0,|L81.2400|
000728  f7fffffe          BL       uart_putchar
00072c  210a              MOVS     r1,#0xa
00072e  488c              LDR      r0,|L81.2400|
000730  f7fffffe          BL       uart_putchar
000734  210a              MOVS     r1,#0xa
000736  488a              LDR      r0,|L81.2400|
000738  f7fffffe          BL       uart_putchar
00073c  210a              MOVS     r1,#0xa
00073e  4888              LDR      r0,|L81.2400|
000740  f7fffffe          BL       uart_putchar
000744  210a              MOVS     r1,#0xa
000746  4886              LDR      r0,|L81.2400|
000748  f7fffffe          BL       uart_putchar
00074c  210a              MOVS     r1,#0xa
00074e  4884              LDR      r0,|L81.2400|
000750  f7fffffe          BL       uart_putchar
000754  210a              MOVS     r1,#0xa
000756  4882              LDR      r0,|L81.2400|
000758  f7fffffe          BL       uart_putchar
00075c  210a              MOVS     r1,#0xa
00075e  4880              LDR      r0,|L81.2400|
000760  f7fffffe          BL       uart_putchar
000764  210a              MOVS     r1,#0xa
000766  487e              LDR      r0,|L81.2400|
000768  f7fffffe          BL       uart_putchar
00076c  210a              MOVS     r1,#0xa
00076e  487c              LDR      r0,|L81.2400|
000770  f7fffffe          BL       uart_putchar
000774  210a              MOVS     r1,#0xa
000776  487a              LDR      r0,|L81.2400|
000778  f7fffffe          BL       uart_putchar
00077c  210a              MOVS     r1,#0xa
00077e  4878              LDR      r0,|L81.2400|
000780  f7fffffe          BL       uart_putchar
000784  210a              MOVS     r1,#0xa
000786  4876              LDR      r0,|L81.2400|
000788  f7fffffe          BL       uart_putchar
00078c  210a              MOVS     r1,#0xa
00078e  4874              LDR      r0,|L81.2400|
000790  f7fffffe          BL       uart_putchar
000794  210a              MOVS     r1,#0xa
000796  4872              LDR      r0,|L81.2400|
000798  f7fffffe          BL       uart_putchar
00079c  210a              MOVS     r1,#0xa
00079e  4870              LDR      r0,|L81.2400|
0007a0  f7fffffe          BL       uart_putchar
;;;1867   									//memset(data,0,1000);
;;;1868   														//timer counts to wait for characters in uart 1 									
;;;1869   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0007a4  bf00              NOP      
                  |L81.1958|
0007a6  4961              LDR      r1,|L81.2348|
0007a8  4859              LDR      r0,|L81.2320|
0007aa  f7fffffe          BL       strstr
0007ae  2800              CMP      r0,#0
0007b0  d109              BNE      |L81.1990|
0007b2  4966              LDR      r1,|L81.2380|
0007b4  4856              LDR      r0,|L81.2320|
0007b6  f7fffffe          BL       strstr
0007ba  2800              CMP      r0,#0
0007bc  d103              BNE      |L81.1990|
0007be  4866              LDR      r0,|L81.2392|
0007c0  6800              LDR      r0,[r0,#0]  ; tout
0007c2  2805              CMP      r0,#5
0007c4  ddef              BLE      |L81.1958|
                  |L81.1990|
;;;1870   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1871   									}
;;;1872   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0007c6  f7fffffe          BL       clear
;;;1873   									//clear();
;;;1874   									memset(data,0,strlen(data));
0007ca  485b              LDR      r0,|L81.2360|
0007cc  f7fffffe          BL       strlen
0007d0  4604              MOV      r4,r0
0007d2  4621              MOV      r1,r4
0007d4  4858              LDR      r0,|L81.2360|
0007d6  f7fffffe          BL       __aeabi_memclr
;;;1875   									clear();
0007da  f7fffffe          BL       clear
;;;1876   
;;;1877   																
;;;1878   								
;;;1879   								
;;;1880   //log_it();								
;;;1881   		RESET_OFF;delay(10);
0007de  2020              MOVS     r0,#0x20
0007e0  4960              LDR      r1,|L81.2404|
0007e2  6088              STR      r0,[r1,#8]
0007e4  200a              MOVS     r0,#0xa
0007e6  f7fffffe          BL       delay
;;;1882   		RESET_ON;delay(10);
0007ea  2020              MOVS     r0,#0x20
0007ec  495d              LDR      r1,|L81.2404|
0007ee  6048              STR      r0,[r1,#4]
0007f0  200a              MOVS     r0,#0xa
0007f2  f7fffffe          BL       delay
;;;1883   								send_GSM("\n\n AT+CFUN=1,1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);			
0007f6  484a              LDR      r0,|L81.2336|
0007f8  6800              LDR      r0,[r0,#0]  ; tmeout
0007fa  4b4a              LDR      r3,|L81.2340|
0007fc  4a4a              LDR      r2,|L81.2344|
0007fe  494b              LDR      r1,|L81.2348|
000800  9000              STR      r0,[sp,#0]
000802  4859              LDR      r0,|L81.2408|
000804  f7fffffe          BL       send_GSM
                  |L81.2056|
000808  e17e              B        |L81.2824|
                  |L81.2058|
;;;1884   							}
;;;1885   							
;;;1886   							else if(cond1 && cond10)
00080a  4843              LDR      r0,|L81.2328|
00080c  6800              LDR      r0,[r0,#0]  ; cond1
00080e  2800              CMP      r0,#0
000810  d027              BEQ      |L81.2146|
000812  4856              LDR      r0,|L81.2412|
000814  6800              LDR      r0,[r0,#0]  ; cond10
000816  2800              CMP      r0,#0
000818  d023              BEQ      |L81.2146|
;;;1887   							{
;;;1888   						//		printf("\n\n\n\t%s",uart_string_gsm);
;;;1889   								memset(ip,0,16);
00081a  2110              MOVS     r1,#0x10
00081c  4854              LDR      r0,|L81.2416|
00081e  f7fffffe          BL       __aeabi_memclr
;;;1890   								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
000822  4853              LDR      r0,|L81.2416|
000824  2120              MOVS     r1,#0x20
000826  460b              MOV      r3,r1
000828  2204              MOVS     r2,#4
00082a  9100              STR      r1,[sp,#0]
00082c  9001              STR      r0,[sp,#4]
00082e  2103              MOVS     r1,#3
000830  4837              LDR      r0,|L81.2320|
000832  f7fffffe          BL       parse_g
;;;1891   								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
000836  484f              LDR      r0,|L81.2420|
000838  210d              MOVS     r1,#0xd
00083a  2320              MOVS     r3,#0x20
00083c  2205              MOVS     r2,#5
00083e  9100              STR      r1,[sp,#0]
000840  9001              STR      r0,[sp,#4]
000842  2106              MOVS     r1,#6
000844  4832              LDR      r0,|L81.2320|
000846  f7fffffe          BL       parse_g
;;;1892   			//					printf("\n%s\n",port);
;;;1893   								save_ip_port();
00084a  f7fffffe          BL       save_ip_port
;;;1894   							
;;;1895   	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;1896   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
00084e  4834              LDR      r0,|L81.2336|
000850  6800              LDR      r0,[r0,#0]  ; tmeout
000852  4b34              LDR      r3,|L81.2340|
000854  4a34              LDR      r2,|L81.2344|
000856  4935              LDR      r1,|L81.2348|
000858  9000              STR      r0,[sp,#0]
00085a  4835              LDR      r0,|L81.2352|
00085c  f7fffffe          BL       send_GSM
000860  e152              B        |L81.2824|
                  |L81.2146|
;;;1897   
;;;1898   //								while(1);
;;;1899   								
;;;1900   								
;;;1901   							}
;;;1902   							else if(cond1 && cond11)
000862  482d              LDR      r0,|L81.2328|
000864  6800              LDR      r0,[r0,#0]  ; cond1
000866  2800              CMP      r0,#0
000868  d01b              BEQ      |L81.2210|
00086a  4843              LDR      r0,|L81.2424|
00086c  6800              LDR      r0,[r0,#0]  ; cond11
00086e  2800              CMP      r0,#0
000870  d017              BEQ      |L81.2210|
;;;1903   							{
;;;1904   								
;;;1905   								IGNITION_ON;FUEL_ON;
000872  2002              MOVS     r0,#2
000874  493b              LDR      r1,|L81.2404|
000876  3980              SUBS     r1,r1,#0x80
000878  6088              STR      r0,[r1,#8]
00087a  2004              MOVS     r0,#4
00087c  6088              STR      r0,[r1,#8]
;;;1906   								clear();
00087e  f7fffffe          BL       clear
;;;1907   								ignstaton();
000882  f7fffffe          BL       ignstaton
;;;1908   								delay(1000);
000886  207d              MOVS     r0,#0x7d
000888  00c0              LSLS     r0,r0,#3
00088a  f7fffffe          BL       delay
;;;1909   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
00088e  4824              LDR      r0,|L81.2336|
000890  6800              LDR      r0,[r0,#0]  ; tmeout
000892  4b24              LDR      r3,|L81.2340|
000894  4a24              LDR      r2,|L81.2344|
000896  4925              LDR      r1,|L81.2348|
000898  9000              STR      r0,[sp,#0]
00089a  4838              LDR      r0,|L81.2428|
00089c  f7fffffe          BL       send_GSM
0008a0  e132              B        |L81.2824|
                  |L81.2210|
;;;1910   								
;;;1911   							}
;;;1912   							else if(cond1 && cond12)
0008a2  481d              LDR      r0,|L81.2328|
0008a4  6800              LDR      r0,[r0,#0]  ; cond1
0008a6  2800              CMP      r0,#0
0008a8  d01b              BEQ      |L81.2274|
0008aa  4835              LDR      r0,|L81.2432|
0008ac  6800              LDR      r0,[r0,#0]  ; cond12
0008ae  2800              CMP      r0,#0
0008b0  d017              BEQ      |L81.2274|
;;;1913   							{
;;;1914   								
;;;1915   								IGNITION_OFF;FUEL_OFF;
0008b2  2002              MOVS     r0,#2
0008b4  492b              LDR      r1,|L81.2404|
0008b6  3980              SUBS     r1,r1,#0x80
0008b8  6048              STR      r0,[r1,#4]
0008ba  2004              MOVS     r0,#4
0008bc  6048              STR      r0,[r1,#4]
;;;1916   								clear();
0008be  f7fffffe          BL       clear
;;;1917   								ignstatoff();
0008c2  f7fffffe          BL       ignstatoff
;;;1918   								delay(1000);
0008c6  207d              MOVS     r0,#0x7d
0008c8  00c0              LSLS     r0,r0,#3
0008ca  f7fffffe          BL       delay
;;;1919   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0008ce  4814              LDR      r0,|L81.2336|
0008d0  6800              LDR      r0,[r0,#0]  ; tmeout
0008d2  4b14              LDR      r3,|L81.2340|
0008d4  4a14              LDR      r2,|L81.2344|
0008d6  4915              LDR      r1,|L81.2348|
0008d8  9000              STR      r0,[sp,#0]
0008da  4828              LDR      r0,|L81.2428|
0008dc  f7fffffe          BL       send_GSM
0008e0  e112              B        |L81.2824|
                  |L81.2274|
;;;1920   								
;;;1921   							}							
;;;1922   							
;;;1923   							else if(cond1 && cond13)
0008e2  480d              LDR      r0,|L81.2328|
0008e4  6800              LDR      r0,[r0,#0]  ; cond1
0008e6  2800              CMP      r0,#0
0008e8  d05c              BEQ      |L81.2468|
0008ea  4826              LDR      r0,|L81.2436|
0008ec  6800              LDR      r0,[r0,#0]  ; cond13
0008ee  2800              CMP      r0,#0
0008f0  d058              BEQ      |L81.2468|
;;;1924   							{
;;;1925   								
;;;1926   								IGNITION_ON;FUEL_ON;
0008f2  2002              MOVS     r0,#2
0008f4  491b              LDR      r1,|L81.2404|
0008f6  3980              SUBS     r1,r1,#0x80
0008f8  6088              STR      r0,[r1,#8]
0008fa  2004              MOVS     r0,#4
0008fc  6088              STR      r0,[r1,#8]
;;;1927   								clear();
0008fe  f7fffffe          BL       clear
;;;1928   								ignstaton();
000902  f7fffffe          BL       ignstaton
;;;1929   								delay(1000);
000906  e03f              B        |L81.2440|
                  |L81.2312|
000908  e110              B        |L81.2860|
00090a  0000              DCW      0x0000
                  |L81.2316|
                          DCD      data2
                  |L81.2320|
                          DCD      uart_string_gsm
                  |L81.2324|
                          DCD      ||.conststring||+0x358
                  |L81.2328|
                          DCD      cond1
                  |L81.2332|
                          DCD      cond9
                  |L81.2336|
                          DCD      tmeout
                  |L81.2340|
                          DCD      ||.conststring||
                  |L81.2344|
                          DCD      ||.conststring||+0x8
                  |L81.2348|
                          DCD      ||.conststring||+0x58
                  |L81.2352|
                          DCD      ||.conststring||+0x2e0
                  |L81.2356|
                          DCD      ||.conststring||+0x35c
                  |L81.2360|
                          DCD      data
                  |L81.2364|
                          DCD      ||.conststring||+0x360
                  |L81.2368|
                          DCD      at_
                  |L81.2372|
                          DCD      drive
                  |L81.2376|
                          DCD      ||.conststring||+0x364
                  |L81.2380|
                          DCD      ||.conststring||+0xd4
                  |L81.2384|
                          DCD      ||.conststring||+0x30
                  |L81.2388|
                          DCD      ||k2||
                  |L81.2392|
                          DCD      tout
                  |L81.2396|
                          DCD      k
                  |L81.2400|
                          DCD      0x4006b000
                  |L81.2404|
                          DCD      0x400ff080
                  |L81.2408|
                          DCD      ||.conststring||+0x388
                  |L81.2412|
                          DCD      cond10
                  |L81.2416|
                          DCD      ||ip||
                  |L81.2420|
                          DCD      port
                  |L81.2424|
                          DCD      cond11
                  |L81.2428|
                          DCD      ||.conststring||+0x39c
                  |L81.2432|
                          DCD      cond12
                  |L81.2436|
                          DCD      cond13
                  |L81.2440|
000988  207d              MOVS     r0,#0x7d
00098a  00c0              LSLS     r0,r0,#3
00098c  f7fffffe          BL       delay
;;;1930   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000990  4867              LDR      r0,|L81.2864|
000992  6800              LDR      r0,[r0,#0]  ; tmeout
000994  4b67              LDR      r3,|L81.2868|
000996  4a68              LDR      r2,|L81.2872|
000998  4968              LDR      r1,|L81.2876|
00099a  9000              STR      r0,[sp,#0]
00099c  4868              LDR      r0,|L81.2880|
00099e  f7fffffe          BL       send_GSM
0009a2  e0b1              B        |L81.2824|
                  |L81.2468|
;;;1931   								
;;;1932   							}
;;;1933   							else if(cond1 && cond14)
0009a4  4867              LDR      r0,|L81.2884|
0009a6  6800              LDR      r0,[r0,#0]  ; cond1
0009a8  2800              CMP      r0,#0
0009aa  d01a              BEQ      |L81.2530|
0009ac  4866              LDR      r0,|L81.2888|
0009ae  6800              LDR      r0,[r0,#0]  ; cond14
0009b0  2800              CMP      r0,#0
0009b2  d016              BEQ      |L81.2530|
;;;1934   							{
;;;1935   								
;;;1936   								IGNITION_OFF;FUEL_OFF;
0009b4  2002              MOVS     r0,#2
0009b6  4965              LDR      r1,|L81.2892|
0009b8  6048              STR      r0,[r1,#4]
0009ba  2004              MOVS     r0,#4
0009bc  6048              STR      r0,[r1,#4]
;;;1937   								clear();
0009be  f7fffffe          BL       clear
;;;1938   								ignstatoff();
0009c2  f7fffffe          BL       ignstatoff
;;;1939   								delay(1000);
0009c6  207d              MOVS     r0,#0x7d
0009c8  00c0              LSLS     r0,r0,#3
0009ca  f7fffffe          BL       delay
;;;1940   								
;;;1941   								
;;;1942   								
;;;1943   								
;;;1944   								
;;;1945   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009ce  4858              LDR      r0,|L81.2864|
0009d0  6800              LDR      r0,[r0,#0]  ; tmeout
0009d2  4b58              LDR      r3,|L81.2868|
0009d4  4a58              LDR      r2,|L81.2872|
0009d6  4959              LDR      r1,|L81.2876|
0009d8  9000              STR      r0,[sp,#0]
0009da  4859              LDR      r0,|L81.2880|
0009dc  f7fffffe          BL       send_GSM
0009e0  e092              B        |L81.2824|
                  |L81.2530|
;;;1946   								
;;;1947   							}
;;;1948   							
;;;1949   							else if(cond5)
0009e2  485b              LDR      r0,|L81.2896|
0009e4  6800              LDR      r0,[r0,#0]  ; cond5
0009e6  2800              CMP      r0,#0
0009e8  d029              BEQ      |L81.2622|
;;;1950   							{
;;;1951   								memset(at_,0,100);
0009ea  2164              MOVS     r1,#0x64
0009ec  4859              LDR      r0,|L81.2900|
0009ee  f7fffffe          BL       __aeabi_memclr
;;;1952   								memset(num_o,0,15);
0009f2  210f              MOVS     r1,#0xf
0009f4  4858              LDR      r0,|L81.2904|
0009f6  f7fffffe          BL       __aeabi_memclr
;;;1953   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
0009fa  4857              LDR      r0,|L81.2904|
0009fc  210d              MOVS     r1,#0xd
0009fe  2320              MOVS     r3,#0x20
000a00  2205              MOVS     r2,#5
000a02  9100              STR      r1,[sp,#0]
000a04  9001              STR      r0,[sp,#4]
000a06  2103              MOVS     r1,#3
000a08  4854              LDR      r0,|L81.2908|
000a0a  f7fffffe          BL       parse_g
;;;1954   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000a0e  4a52              LDR      r2,|L81.2904|
000a10  4953              LDR      r1,|L81.2912|
000a12  4850              LDR      r0,|L81.2900|
000a14  f7fffffe          BL       __2sprintf
;;;1955   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a18  4845              LDR      r0,|L81.2864|
000a1a  6800              LDR      r0,[r0,#0]  ; tmeout
000a1c  4b45              LDR      r3,|L81.2868|
000a1e  4a46              LDR      r2,|L81.2872|
000a20  4946              LDR      r1,|L81.2876|
000a22  9000              STR      r0,[sp,#0]
000a24  484b              LDR      r0,|L81.2900|
000a26  f7fffffe          BL       send_GSM
;;;1956   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a2a  4841              LDR      r0,|L81.2864|
000a2c  6800              LDR      r0,[r0,#0]  ; tmeout
000a2e  4b41              LDR      r3,|L81.2868|
000a30  4a41              LDR      r2,|L81.2872|
000a32  4942              LDR      r1,|L81.2876|
000a34  9000              STR      r0,[sp,#0]
000a36  484b              LDR      r0,|L81.2916|
000a38  f7fffffe          BL       send_GSM
000a3c  e064              B        |L81.2824|
                  |L81.2622|
;;;1957   															
;;;1958   						
;;;1959   								
;;;1960   							}		
;;;1961   							else if(cond6)
000a3e  484a              LDR      r0,|L81.2920|
000a40  6800              LDR      r0,[r0,#0]  ; cond6
000a42  2800              CMP      r0,#0
000a44  d029              BEQ      |L81.2714|
;;;1962   							{
;;;1963   								memset(at_,0,100);
000a46  2164              MOVS     r1,#0x64
000a48  4842              LDR      r0,|L81.2900|
000a4a  f7fffffe          BL       __aeabi_memclr
;;;1964   								memset(num_o,0,15);
000a4e  210f              MOVS     r1,#0xf
000a50  4841              LDR      r0,|L81.2904|
000a52  f7fffffe          BL       __aeabi_memclr
;;;1965   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000a56  4840              LDR      r0,|L81.2904|
000a58  210d              MOVS     r1,#0xd
000a5a  2320              MOVS     r3,#0x20
000a5c  2205              MOVS     r2,#5
000a5e  9100              STR      r1,[sp,#0]
000a60  9001              STR      r0,[sp,#4]
000a62  2103              MOVS     r1,#3
000a64  483d              LDR      r0,|L81.2908|
000a66  f7fffffe          BL       parse_g
;;;1966   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000a6a  4a3b              LDR      r2,|L81.2904|
000a6c  493f              LDR      r1,|L81.2924|
000a6e  4839              LDR      r0,|L81.2900|
000a70  f7fffffe          BL       __2sprintf
;;;1967   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a74  482e              LDR      r0,|L81.2864|
000a76  6800              LDR      r0,[r0,#0]  ; tmeout
000a78  4b2e              LDR      r3,|L81.2868|
000a7a  4a2f              LDR      r2,|L81.2872|
000a7c  492f              LDR      r1,|L81.2876|
000a7e  9000              STR      r0,[sp,#0]
000a80  4834              LDR      r0,|L81.2900|
000a82  f7fffffe          BL       send_GSM
;;;1968   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a86  482a              LDR      r0,|L81.2864|
000a88  6800              LDR      r0,[r0,#0]  ; tmeout
000a8a  4b2a              LDR      r3,|L81.2868|
000a8c  4a2a              LDR      r2,|L81.2872|
000a8e  492b              LDR      r1,|L81.2876|
000a90  9000              STR      r0,[sp,#0]
000a92  4834              LDR      r0,|L81.2916|
000a94  f7fffffe          BL       send_GSM
000a98  e036              B        |L81.2824|
                  |L81.2714|
;;;1969   							}									
;;;1970   							else if(cond7)
000a9a  4835              LDR      r0,|L81.2928|
000a9c  6800              LDR      r0,[r0,#0]  ; cond7
000a9e  2800              CMP      r0,#0
000aa0  d029              BEQ      |L81.2806|
;;;1971   							{
;;;1972   								memset(at_,0,100);
000aa2  2164              MOVS     r1,#0x64
000aa4  482b              LDR      r0,|L81.2900|
000aa6  f7fffffe          BL       __aeabi_memclr
;;;1973   								memset(num_o,0,15);
000aaa  210f              MOVS     r1,#0xf
000aac  482a              LDR      r0,|L81.2904|
000aae  f7fffffe          BL       __aeabi_memclr
;;;1974   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000ab2  4829              LDR      r0,|L81.2904|
000ab4  210d              MOVS     r1,#0xd
000ab6  2320              MOVS     r3,#0x20
000ab8  2205              MOVS     r2,#5
000aba  9100              STR      r1,[sp,#0]
000abc  9001              STR      r0,[sp,#4]
000abe  2103              MOVS     r1,#3
000ac0  4826              LDR      r0,|L81.2908|
000ac2  f7fffffe          BL       parse_g
;;;1975   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000ac6  4a24              LDR      r2,|L81.2904|
000ac8  492a              LDR      r1,|L81.2932|
000aca  4822              LDR      r0,|L81.2900|
000acc  f7fffffe          BL       __2sprintf
;;;1976   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ad0  4817              LDR      r0,|L81.2864|
000ad2  6800              LDR      r0,[r0,#0]  ; tmeout
000ad4  4b17              LDR      r3,|L81.2868|
000ad6  4a18              LDR      r2,|L81.2872|
000ad8  4918              LDR      r1,|L81.2876|
000ada  9000              STR      r0,[sp,#0]
000adc  481d              LDR      r0,|L81.2900|
000ade  f7fffffe          BL       send_GSM
;;;1977   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ae2  4813              LDR      r0,|L81.2864|
000ae4  6800              LDR      r0,[r0,#0]  ; tmeout
000ae6  4b13              LDR      r3,|L81.2868|
000ae8  4a13              LDR      r2,|L81.2872|
000aea  4914              LDR      r1,|L81.2876|
000aec  9000              STR      r0,[sp,#0]
000aee  481d              LDR      r0,|L81.2916|
000af0  f7fffffe          BL       send_GSM
000af4  e008              B        |L81.2824|
                  |L81.2806|
;;;1978   							}													
;;;1979   
;;;1980   							else
;;;1981   							{							
;;;1982   								send_GSM("\r\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000af6  480e              LDR      r0,|L81.2864|
000af8  6800              LDR      r0,[r0,#0]  ; tmeout
000afa  4b0e              LDR      r3,|L81.2868|
000afc  4a0e              LDR      r2,|L81.2872|
000afe  490f              LDR      r1,|L81.2876|
000b00  9000              STR      r0,[sp,#0]
000b02  481d              LDR      r0,|L81.2936|
000b04  f7fffffe          BL       send_GSM
                  |L81.2824|
;;;1983   							}
;;;1984   
;;;1985   
;;;1986   		ringflag=0;
000b08  2000              MOVS     r0,#0
000b0a  491c              LDR      r1,|L81.2940|
000b0c  7008              STRB     r0,[r1,#0]
;;;1987   clear();							
000b0e  f7fffffe          BL       clear
;;;1988   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000b12  4807              LDR      r0,|L81.2864|
000b14  6800              LDR      r0,[r0,#0]  ; tmeout
000b16  4b07              LDR      r3,|L81.2868|
000b18  4a19              LDR      r2,|L81.2944|
000b1a  491a              LDR      r1,|L81.2948|
000b1c  9000              STR      r0,[sp,#0]
000b1e  481a              LDR      r0,|L81.2952|
000b20  f7fffffe          BL       send_GSM
;;;1989   delay(1000);					
000b24  207d              MOVS     r0,#0x7d
000b26  00c0              LSLS     r0,r0,#3
000b28  f7fffffe          BL       delay
                  |L81.2860|
;;;1990   		}
;;;1991   		
;;;1992   }
000b2c  bd1f              POP      {r0-r4,pc}
;;;1993   int count_char(char ch,char* string)
                          ENDP

000b2e  0000              DCW      0x0000
                  |L81.2864|
                          DCD      tmeout
                  |L81.2868|
                          DCD      ||.conststring||
                  |L81.2872|
                          DCD      ||.conststring||+0x8
                  |L81.2876|
                          DCD      ||.conststring||+0x58
                  |L81.2880|
                          DCD      ||.conststring||+0x39c
                  |L81.2884|
                          DCD      cond1
                  |L81.2888|
                          DCD      cond14
                  |L81.2892|
                          DCD      0x400ff000
                  |L81.2896|
                          DCD      cond5
                  |L81.2900|
                          DCD      at_
                  |L81.2904|
                          DCD      num_o
                  |L81.2908|
                          DCD      uart_string_gsm
                  |L81.2912|
                          DCD      ||.conststring||+0x3b4
                  |L81.2916|
                          DCD      ||.conststring||+0x2e0
                  |L81.2920|
                          DCD      cond6
                  |L81.2924|
                          DCD      ||.conststring||+0x3d4
                  |L81.2928|
                          DCD      cond7
                  |L81.2932|
                          DCD      ||.conststring||+0x3f4
                  |L81.2936|
                          DCD      ||.conststring||+0x414
                  |L81.2940|
                          DCD      ringflag
                  |L81.2944|
                          DCD      ||.conststring||+0xd4
                  |L81.2948|
                          DCD      ||.conststring||+0x10
                  |L81.2952|
                          DCD      ||.conststring||+0x344

                          AREA ||i.GPS_COLLECT2||, COMGROUP=GPS_COLLECT2, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT2 PROC
;;;1151   
;;;1152   __inline void GPS_COLLECT2()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1153   {	
;;;1154   time52=15;	
000002  200f              MOVS     r0,#0xf
000004  4978              LDR      r1,|L88.488|
000006  6008              STR      r0,[r1,#0]  ; time52
;;;1155   
;;;1156   while(lpticks<int_erval);
000008  bf00              NOP      
                  |L88.10|
00000a  4878              LDR      r0,|L88.492|
00000c  6800              LDR      r0,[r0,#0]  ; lpticks
00000e  4978              LDR      r1,|L88.496|
000010  6809              LDR      r1,[r1,#0]  ; int_erval
000012  4288              CMP      r0,r1
000014  dbf9              BLT      |L88.10|
;;;1157   get_gpsdata();
000016  f7fffffe          BL       get_gpsdata
;;;1158   lpticks=0;
00001a  2000              MOVS     r0,#0
00001c  4973              LDR      r1,|L88.492|
00001e  6008              STR      r0,[r1,#0]  ; lpticks
;;;1159   
;;;1160   parse_g(rmc, 3, 4, ',', ',' ,lati);
000020  4874              LDR      r0,|L88.500|
000022  212c              MOVS     r1,#0x2c
000024  460b              MOV      r3,r1
000026  2204              MOVS     r2,#4
000028  9100              STR      r1,[sp,#0]
00002a  9001              STR      r0,[sp,#4]
00002c  2103              MOVS     r1,#3
00002e  4872              LDR      r0,|L88.504|
000030  f7fffffe          BL       parse_g
;;;1161   parse_g(rmc, 5, 6, ',', ',' ,longi);
000034  4871              LDR      r0,|L88.508|
000036  212c              MOVS     r1,#0x2c
000038  460b              MOV      r3,r1
00003a  2206              MOVS     r2,#6
00003c  9100              STR      r1,[sp,#0]
00003e  9001              STR      r0,[sp,#4]
000040  2105              MOVS     r1,#5
000042  486d              LDR      r0,|L88.504|
000044  f7fffffe          BL       parse_g
;;;1162   parse_g(rmc, 7, 8, ',', ',' ,velocity);
000048  486d              LDR      r0,|L88.512|
00004a  212c              MOVS     r1,#0x2c
00004c  460b              MOV      r3,r1
00004e  2208              MOVS     r2,#8
000050  9100              STR      r1,[sp,#0]
000052  9001              STR      r0,[sp,#4]
000054  2107              MOVS     r1,#7
000056  4868              LDR      r0,|L88.504|
000058  f7fffffe          BL       parse_g
;;;1163   		
;;;1164   		speed = stof(velocity);
00005c  4868              LDR      r0,|L88.512|
00005e  f7fffffe          BL       stof
000062  4968              LDR      r1,|L88.516|
000064  6008              STR      r0,[r1,#0]  ; speed
;;;1165   		c=stof(lati);//7523.7412
000066  4863              LDR      r0,|L88.500|
000068  f7fffffe          BL       stof
00006c  4604              MOV      r4,r0
00006e  f7fffffe          BL       __aeabi_f2d
000072  4a65              LDR      r2,|L88.520|
000074  c203              STM      r2!,{r0,r1}
;;;1166   		hh= c/100; //75
000076  2200              MOVS     r2,#0
000078  4b64              LDR      r3,|L88.524|
00007a  4963              LDR      r1,|L88.520|
00007c  c903              LDM      r1,{r0,r1}
00007e  f7fffffe          BL       __aeabi_ddiv
000082  4604              MOV      r4,r0
000084  f7fffffe          BL       __aeabi_d2iz
000088  4961              LDR      r1,|L88.528|
00008a  6008              STR      r0,[r1,#0]  ; hh
;;;1167   		hh11 = c/100; //75.237412
00008c  2200              MOVS     r2,#0
00008e  4b5f              LDR      r3,|L88.524|
000090  495d              LDR      r1,|L88.520|
000092  c903              LDM      r1,{r0,r1}
000094  f7fffffe          BL       __aeabi_ddiv
000098  4a5e              LDR      r2,|L88.532|
00009a  c203              STM      r2!,{r0,r1}
;;;1168   		mm11 = hh11-hh; //.237412
00009c  485c              LDR      r0,|L88.528|
00009e  6800              LDR      r0,[r0,#0]  ; hh
0000a0  f7fffffe          BL       __aeabi_i2d
0000a4  4604              MOV      r4,r0
0000a6  485b              LDR      r0,|L88.532|
0000a8  c80c              LDM      r0!,{r2,r3}
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       __aeabi_drsub
0000b0  4a59              LDR      r2,|L88.536|
0000b2  c203              STM      r2!,{r0,r1}
;;;1169   		mm11*=100;
0000b4  2200              MOVS     r2,#0
0000b6  4b55              LDR      r3,|L88.524|
0000b8  4957              LDR      r1,|L88.536|
0000ba  c903              LDM      r1,{r0,r1}
0000bc  f7fffffe          BL       __aeabi_dmul
0000c0  4a55              LDR      r2,|L88.536|
0000c2  c203              STM      r2!,{r0,r1}
;;;1170   		mm22=hh+mm11/60;	
0000c4  2200              MOVS     r2,#0
0000c6  4b55              LDR      r3,|L88.540|
0000c8  4953              LDR      r1,|L88.536|
0000ca  c903              LDM      r1,{r0,r1}
0000cc  f7fffffe          BL       __aeabi_ddiv
0000d0  4604              MOV      r4,r0
0000d2  460d              MOV      r5,r1
0000d4  484e              LDR      r0,|L88.528|
0000d6  6800              LDR      r0,[r0,#0]  ; hh
0000d8  f7fffffe          BL       __aeabi_i2d
0000dc  4606              MOV      r6,r0
0000de  4622              MOV      r2,r4
0000e0  462b              MOV      r3,r5
0000e2  f7fffffe          BL       __aeabi_dadd
0000e6  4a4e              LDR      r2,|L88.544|
0000e8  c203              STM      r2!,{r0,r1}
;;;1171   		memset(lati,0,15);
0000ea  210f              MOVS     r1,#0xf
0000ec  4841              LDR      r0,|L88.500|
0000ee  f7fffffe          BL       __aeabi_memclr
;;;1172   		sprintf(lati,"%f",mm22);
0000f2  484b              LDR      r0,|L88.544|
0000f4  494b              LDR      r1,|L88.548|
0000f6  c80c              LDM      r0!,{r2,r3}
0000f8  483e              LDR      r0,|L88.500|
0000fa  f7fffffe          BL       __2sprintf
;;;1173   		c=stof(longi);//7523.7412
0000fe  483f              LDR      r0,|L88.508|
000100  f7fffffe          BL       stof
000104  4604              MOV      r4,r0
000106  f7fffffe          BL       __aeabi_f2d
00010a  4a3f              LDR      r2,|L88.520|
00010c  c203              STM      r2!,{r0,r1}
;;;1174   		hh= c/100; //75
00010e  2200              MOVS     r2,#0
000110  4b3e              LDR      r3,|L88.524|
000112  493d              LDR      r1,|L88.520|
000114  c903              LDM      r1,{r0,r1}
000116  f7fffffe          BL       __aeabi_ddiv
00011a  4604              MOV      r4,r0
00011c  f7fffffe          BL       __aeabi_d2iz
000120  493b              LDR      r1,|L88.528|
000122  6008              STR      r0,[r1,#0]  ; hh
;;;1175   		hh11 = c/100; //75.237412
000124  2200              MOVS     r2,#0
000126  4b39              LDR      r3,|L88.524|
000128  4937              LDR      r1,|L88.520|
00012a  c903              LDM      r1,{r0,r1}
00012c  f7fffffe          BL       __aeabi_ddiv
000130  4a38              LDR      r2,|L88.532|
000132  c203              STM      r2!,{r0,r1}
;;;1176   		mm11 = hh11-hh; //.237412
000134  4836              LDR      r0,|L88.528|
000136  6800              LDR      r0,[r0,#0]  ; hh
000138  f7fffffe          BL       __aeabi_i2d
00013c  4604              MOV      r4,r0
00013e  4835              LDR      r0,|L88.532|
000140  c80c              LDM      r0!,{r2,r3}
000142  4620              MOV      r0,r4
000144  f7fffffe          BL       __aeabi_drsub
000148  4a33              LDR      r2,|L88.536|
00014a  c203              STM      r2!,{r0,r1}
;;;1177   		mm11*=100;
00014c  2200              MOVS     r2,#0
00014e  4b2f              LDR      r3,|L88.524|
000150  4931              LDR      r1,|L88.536|
000152  c903              LDM      r1,{r0,r1}
000154  f7fffffe          BL       __aeabi_dmul
000158  4a2f              LDR      r2,|L88.536|
00015a  c203              STM      r2!,{r0,r1}
;;;1178   		mm22=hh+mm11/60;	
00015c  2200              MOVS     r2,#0
00015e  4b2f              LDR      r3,|L88.540|
000160  492d              LDR      r1,|L88.536|
000162  c903              LDM      r1,{r0,r1}
000164  f7fffffe          BL       __aeabi_ddiv
000168  4604              MOV      r4,r0
00016a  460d              MOV      r5,r1
00016c  4828              LDR      r0,|L88.528|
00016e  6800              LDR      r0,[r0,#0]  ; hh
000170  f7fffffe          BL       __aeabi_i2d
000174  4606              MOV      r6,r0
000176  4622              MOV      r2,r4
000178  462b              MOV      r3,r5
00017a  f7fffffe          BL       __aeabi_dadd
00017e  4a28              LDR      r2,|L88.544|
000180  c203              STM      r2!,{r0,r1}
;;;1179   		memset(longi,0,15);
000182  210f              MOVS     r1,#0xf
000184  481d              LDR      r0,|L88.508|
000186  f7fffffe          BL       __aeabi_memclr
;;;1180   		sprintf(longi,"%f",mm22);	
00018a  4825              LDR      r0,|L88.544|
00018c  4925              LDR      r1,|L88.548|
00018e  c80c              LDM      r0!,{r2,r3}
000190  481a              LDR      r0,|L88.508|
000192  f7fffffe          BL       __2sprintf
;;;1181   		strcat(data,imei);
000196  4924              LDR      r1,|L88.552|
000198  4824              LDR      r0,|L88.556|
00019a  f7fffffe          BL       strcat
;;;1182   		strcat(data,", ");	
00019e  4924              LDR      r1,|L88.560|
0001a0  4822              LDR      r0,|L88.556|
0001a2  f7fffffe          BL       strcat
;;;1183   		strcat(data,"$GxGGA");	
0001a6  4923              LDR      r1,|L88.564|
0001a8  4820              LDR      r0,|L88.556|
0001aa  f7fffffe          BL       strcat
;;;1184   		strcat(data,gga);
0001ae  4922              LDR      r1,|L88.568|
0001b0  481e              LDR      r0,|L88.556|
0001b2  f7fffffe          BL       strcat
;;;1185   		strcat(data,", $GxRMC");	
0001b6  4921              LDR      r1,|L88.572|
0001b8  481c              LDR      r0,|L88.556|
0001ba  f7fffffe          BL       strcat
;;;1186   		strcat(data,rmc);	
0001be  490e              LDR      r1,|L88.504|
0001c0  481a              LDR      r0,|L88.556|
0001c2  f7fffffe          BL       strcat
;;;1187   		strcat(data,",");	
0001c6  491e              LDR      r1,|L88.576|
0001c8  4818              LDR      r0,|L88.556|
0001ca  f7fffffe          BL       strcat
;;;1188   		strcat(data,num2);	
0001ce  491d              LDR      r1,|L88.580|
0001d0  4816              LDR      r0,|L88.556|
0001d2  f7fffffe          BL       strcat
;;;1189   		if	(breach == 1){strcat(data,",BR*");}
0001d6  481c              LDR      r0,|L88.584|
0001d8  6800              LDR      r0,[r0,#0]  ; breach
0001da  2801              CMP      r0,#1
0001dc  d103              BNE      |L88.486|
0001de  491b              LDR      r1,|L88.588|
0001e0  4812              LDR      r0,|L88.556|
0001e2  f7fffffe          BL       strcat
                  |L88.486|
;;;1190   //return 0;
;;;1191   }
0001e6  bdfe              POP      {r1-r7,pc}
;;;1192   
                          ENDP

                  |L88.488|
                          DCD      time52
                  |L88.492|
                          DCD      lpticks
                  |L88.496|
                          DCD      int_erval
                  |L88.500|
                          DCD      lati
                  |L88.504|
                          DCD      ||rmc||
                  |L88.508|
                          DCD      longi
                  |L88.512|
                          DCD      velocity
                  |L88.516|
                          DCD      speed
                  |L88.520|
                          DCD      c
                  |L88.524|
                          DCD      0x40590000
                  |L88.528|
                          DCD      ||hh||
                  |L88.532|
                          DCD      hh11
                  |L88.536|
                          DCD      mm11
                  |L88.540|
                          DCD      0x404e0000
                  |L88.544|
                          DCD      mm22
                  |L88.548|
                          DCD      ||.conststring||+0xf4
                  |L88.552|
                          DCD      imei
                  |L88.556|
                          DCD      data
                  |L88.560|
                          DCD      ||.conststring||+0xf8
                  |L88.564|
                          DCD      ||.conststring||+0xfc
                  |L88.568|
                          DCD      gga
                  |L88.572|
                          DCD      ||.conststring||+0x104
                  |L88.576|
                          DCD      ||.conststring||+0x110
                  |L88.580|
                          DCD      num2
                  |L88.584|
                          DCD      breach
                  |L88.588|
                          DCD      ||.conststring||+0x114

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;136    
;;;137    __inline void remove_all_chars(char* str, char c, char d) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;138        char *pr = str, *pw = str;
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
;;;139        while (*pr) {
00000a  e015              B        |L95.56|
                  |L95.12|
;;;140            *pw = *pr++;
00000c  780d              LDRB     r5,[r1,#0]
00000e  7005              STRB     r5,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
;;;141    			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
000012  7805              LDRB     r5,[r0,#0]
000014  42a5              CMP      r5,r4
000016  d00d              BEQ      |L95.52|
000018  7805              LDRB     r5,[r0,#0]
00001a  4295              CMP      r5,r2
00001c  d00a              BEQ      |L95.52|
00001e  7805              LDRB     r5,[r0,#0]
000020  2d20              CMP      r5,#0x20
000022  d007              BEQ      |L95.52|
000024  7805              LDRB     r5,[r0,#0]
000026  2d2f              CMP      r5,#0x2f
000028  d004              BEQ      |L95.52|
00002a  7805              LDRB     r5,[r0,#0]
00002c  2d3a              CMP      r5,#0x3a
00002e  d001              BEQ      |L95.52|
000030  2501              MOVS     r5,#1
000032  e000              B        |L95.54|
                  |L95.52|
000034  2500              MOVS     r5,#0
                  |L95.54|
000036  1828              ADDS     r0,r5,r0
                  |L95.56|
000038  780d              LDRB     r5,[r1,#0]            ;139
00003a  2d00              CMP      r5,#0                 ;139
00003c  d1e6              BNE      |L95.12|
;;;142        }
;;;143        *pw = '\0';
00003e  7005              STRB     r5,[r0,#0]
;;;144    }
000040  bd30              POP      {r4,r5,pc}
;;;145    
                          ENDP


                          AREA ||i.send_chunk||, COMGROUP=send_chunk, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_chunk PROC
;;;2029   
;;;2030   __inline void send_chunk(){
000000  b57c              PUSH     {r2-r6,lr}
;;;2031   fsz=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L102.1024|
000006  6008              STR      r0,[r1,#0]  ; fsz
;;;2032   times=-2;	
000008  1e80              SUBS     r0,r0,#2
00000a  49fe              LDR      r1,|L102.1028|
00000c  6008              STR      r0,[r1,#0]  ; times
;;;2033   	
;;;2034   memset(at_,0,100);
00000e  2164              MOVS     r1,#0x64
000010  48fd              LDR      r0,|L102.1032|
000012  f7fffffe          BL       __aeabi_memclr
;;;2035   sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
000016  4afd              LDR      r2,|L102.1036|
000018  49fd              LDR      r1,|L102.1040|
00001a  48fb              LDR      r0,|L102.1032|
00001c  f7fffffe          BL       __2sprintf
;;;2036   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
000020  48fc              LDR      r0,|L102.1044|
000022  6800              LDR      r0,[r0,#0]  ; tmeout
000024  4bfc              LDR      r3,|L102.1048|
000026  4afd              LDR      r2,|L102.1052|
000028  49fd              LDR      r1,|L102.1056|
00002a  9000              STR      r0,[sp,#0]
00002c  48f6              LDR      r0,|L102.1032|
00002e  f7fffffe          BL       send_GSM
;;;2037   parse_g(uart_string_gsm, 1,3, ' ', '\r', fsize);
000032  48fc              LDR      r0,|L102.1060|
000034  210d              MOVS     r1,#0xd
000036  2320              MOVS     r3,#0x20
000038  2203              MOVS     r2,#3
00003a  9100              STR      r1,[sp,#0]
00003c  9001              STR      r0,[sp,#4]
00003e  2101              MOVS     r1,#1
000040  48f9              LDR      r0,|L102.1064|
000042  f7fffffe          BL       parse_g
;;;2038   fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
000046  48f7              LDR      r0,|L102.1060|
000048  f7fffffe          BL       stof
00004c  49ec              LDR      r1,|L102.1024|
00004e  6008              STR      r0,[r1,#0]  ; fsz
;;;2039   //reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;2040   if(fsz==0)k5=9999999;
000050  2100              MOVS     r1,#0
000052  48eb              LDR      r0,|L102.1024|
000054  6800              LDR      r0,[r0,#0]  ; fsz
000056  f7fffffe          BL       __aeabi_cfcmpeq
00005a  d103              BNE      |L102.100|
00005c  48f3              LDR      r0,|L102.1068|
00005e  49f4              LDR      r1,|L102.1072|
000060  6008              STR      r0,[r1,#0]  ; k5
000062  e002              B        |L102.106|
                  |L102.100|
;;;2041   else k5=0;	
000064  2000              MOVS     r0,#0
000066  49f2              LDR      r1,|L102.1072|
000068  6008              STR      r0,[r1,#0]  ; k5
                  |L102.106|
;;;2042   times =	(fsz/900) + 2;
00006a  49f2              LDR      r1,|L102.1076|
00006c  48e4              LDR      r0,|L102.1024|
00006e  6800              LDR      r0,[r0,#0]  ; fsz
000070  f7fffffe          BL       __aeabi_fdiv
000074  4605              MOV      r5,r0
000076  2101              MOVS     r1,#1
000078  0789              LSLS     r1,r1,#30
00007a  f7fffffe          BL       __aeabi_fadd
00007e  4604              MOV      r4,r0
000080  f7fffffe          BL       __aeabi_f2iz
000084  49df              LDR      r1,|L102.1028|
000086  6008              STR      r0,[r1,#0]  ; times
;;;2043   cursorvaluepr=0;
000088  2000              MOVS     r0,#0
00008a  49eb              LDR      r1,|L102.1080|
00008c  6008              STR      r0,[r1,#0]  ; cursorvaluepr
                  |L102.142|
;;;2044   for(;k5<=(times);){
00008e  e3e8              B        |L102.2146|
                  |L102.144|
;;;2045   	
;;;2046   	RESET_ON;
000090  2020              MOVS     r0,#0x20
000092  49ea              LDR      r1,|L102.1084|
000094  6048              STR      r0,[r1,#4]
;;;2047   	DTR_OFF;
000096  2080              MOVS     r0,#0x80
000098  49e8              LDR      r1,|L102.1084|
00009a  3140              ADDS     r1,r1,#0x40
00009c  6088              STR      r0,[r1,#8]
;;;2048   	
;;;2049   	msg_sim800(); 
00009e  f7fffffe          BL       msg_sim800
;;;2050   
;;;2051   memset(data,0,strlen(data));	
0000a2  48e7              LDR      r0,|L102.1088|
0000a4  f7fffffe          BL       strlen
0000a8  4604              MOV      r4,r0
0000aa  4621              MOV      r1,r4
0000ac  48e4              LDR      r0,|L102.1088|
0000ae  f7fffffe          BL       __aeabi_memclr
;;;2052   GPS_COLLECT();
0000b2  f7fffffe          BL       GPS_COLLECT
;;;2053   strcat(data,"\n");	
0000b6  49e3              LDR      r1,|L102.1092|
0000b8  48e1              LDR      r0,|L102.1088|
0000ba  f7fffffe          BL       strcat
;;;2054   	
;;;2055   	
;;;2056   	memset(at_,0,100);
0000be  2164              MOVS     r1,#0x64
0000c0  48d1              LDR      r0,|L102.1032|
0000c2  f7fffffe          BL       __aeabi_memclr
;;;2057   	sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
0000c6  4ad1              LDR      r2,|L102.1036|
0000c8  49d1              LDR      r1,|L102.1040|
0000ca  48cf              LDR      r0,|L102.1032|
0000cc  f7fffffe          BL       __2sprintf
;;;2058   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
0000d0  48d0              LDR      r0,|L102.1044|
0000d2  6800              LDR      r0,[r0,#0]  ; tmeout
0000d4  4bd0              LDR      r3,|L102.1048|
0000d6  4ad1              LDR      r2,|L102.1052|
0000d8  49d1              LDR      r1,|L102.1056|
0000da  9000              STR      r0,[sp,#0]
0000dc  48ca              LDR      r0,|L102.1032|
0000de  f7fffffe          BL       send_GSM
;;;2059   
;;;2060   	
;;;2061   	
;;;2062   	
;;;2063   	parse_g(uart_string_gsm, 1,3, ' ', '\r', fsize);
0000e2  48d0              LDR      r0,|L102.1060|
0000e4  210d              MOVS     r1,#0xd
0000e6  2320              MOVS     r3,#0x20
0000e8  2203              MOVS     r2,#3
0000ea  9100              STR      r1,[sp,#0]
0000ec  9001              STR      r0,[sp,#4]
0000ee  2101              MOVS     r1,#1
0000f0  48cd              LDR      r0,|L102.1064|
0000f2  f7fffffe          BL       parse_g
;;;2064   	fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
0000f6  48cb              LDR      r0,|L102.1060|
0000f8  f7fffffe          BL       stof
0000fc  49c0              LDR      r1,|L102.1024|
0000fe  6008              STR      r0,[r1,#0]  ; fsz
;;;2065   	//reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;2066   	times =	(fsz/900) + 1;	
000100  49cc              LDR      r1,|L102.1076|
000102  48bf              LDR      r0,|L102.1024|
000104  6800              LDR      r0,[r0,#0]  ; fsz
000106  f7fffffe          BL       __aeabi_fdiv
00010a  4605              MOV      r5,r0
00010c  217f              MOVS     r1,#0x7f
00010e  05c9              LSLS     r1,r1,#23
000110  f7fffffe          BL       __aeabi_fadd
000114  4604              MOV      r4,r0
000116  f7fffffe          BL       __aeabi_f2iz
00011a  49ba              LDR      r1,|L102.1028|
00011c  6008              STR      r0,[r1,#0]  ; times
;;;2067   	
;;;2068   		sprintf(at_, "\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",drive,cursorvaluepr );		//1256
00011e  48c6              LDR      r0,|L102.1080|
000120  4aba              LDR      r2,|L102.1036|
000122  49c9              LDR      r1,|L102.1096|
000124  6803              LDR      r3,[r0,#0]  ; cursorvaluepr
000126  48b8              LDR      r0,|L102.1032|
000128  f7fffffe          BL       __2sprintf
;;;2069   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",5);
00012c  2005              MOVS     r0,#5
00012e  4bba              LDR      r3,|L102.1048|
000130  4aba              LDR      r2,|L102.1052|
000132  49bb              LDR      r1,|L102.1056|
000134  9000              STR      r0,[sp,#0]
000136  48b4              LDR      r0,|L102.1032|
000138  f7fffffe          BL       send_GSM
;;;2070   			if(strstr(uart_string_gsm,"ERROR")){
00013c  49c3              LDR      r1,|L102.1100|
00013e  48ba              LDR      r0,|L102.1064|
000140  f7fffffe          BL       strstr
000144  2800              CMP      r0,#0
000146  d00b              BEQ      |L102.352|
;;;2071   				RESET_OFF;
000148  2020              MOVS     r0,#0x20
00014a  49bc              LDR      r1,|L102.1084|
00014c  6088              STR      r0,[r1,#8]
;;;2072   				delay(50);
00014e  2032              MOVS     r0,#0x32
000150  f7fffffe          BL       delay
;;;2073   				RESET_ON;
000154  2020              MOVS     r0,#0x20
000156  49b9              LDR      r1,|L102.1084|
000158  6048              STR      r0,[r1,#4]
;;;2074   				delay(50);
00015a  2032              MOVS     r0,#0x32
00015c  f7fffffe          BL       delay
                  |L102.352|
;;;2075   			}
;;;2076   		cntendl=count_char('\n',uart_string_gsm);
000160  49b1              LDR      r1,|L102.1064|
000162  200a              MOVS     r0,#0xa
000164  f7fffffe          BL       count_char
000168  49b9              LDR      r1,|L102.1104|
00016a  6008              STR      r0,[r1,#0]  ; cntendl
;;;2077      //if(cntendl!=0)
;;;2078   		enters = cntendl;		
00016c  4608              MOV      r0,r1
00016e  6800              LDR      r0,[r0,#0]  ; cntendl
000170  49b8              LDR      r1,|L102.1108|
000172  6008              STR      r0,[r1,#0]  ; enters
;;;2079   		memset(sd_data,0,1400);
000174  21af              MOVS     r1,#0xaf
000176  00c9              LSLS     r1,r1,#3
000178  48b7              LDR      r0,|L102.1112|
00017a  f7fffffe          BL       __aeabi_memclr
;;;2080   		parse_g(uart_string_gsm, 1,enters-2, '\n', '\n' ,sd_data);	
00017e  48b6              LDR      r0,|L102.1112|
000180  210a              MOVS     r1,#0xa
000182  9100              STR      r1,[sp,#0]
000184  9001              STR      r0,[sp,#4]
000186  48b3              LDR      r0,|L102.1108|
000188  6800              LDR      r0,[r0,#0]  ; enters
00018a  1e82              SUBS     r2,r0,#2
00018c  460b              MOV      r3,r1
00018e  2101              MOVS     r1,#1
000190  48a5              LDR      r0,|L102.1064|
000192  f7fffffe          BL       parse_g
;;;2081   		strcat(sd_data,"\n");
000196  49ab              LDR      r1,|L102.1092|
000198  48af              LDR      r0,|L102.1112|
00019a  f7fffffe          BL       strcat
;;;2082   		strcat(sd_data,data);
00019e  49a8              LDR      r1,|L102.1088|
0001a0  48ad              LDR      r0,|L102.1112|
0001a2  f7fffffe          BL       strcat
;;;2083   		if(strstr(sd_data,"SEND OK")    ||   strstr(sd_data,"ERROR") || strstr(sd_data,"FAIL")  ||  strstr(sd_data,"DEACT"))	{
0001a6  49ad              LDR      r1,|L102.1116|
0001a8  48ab              LDR      r0,|L102.1112|
0001aa  f7fffffe          BL       strstr
0001ae  2800              CMP      r0,#0
0001b0  d111              BNE      |L102.470|
0001b2  49a6              LDR      r1,|L102.1100|
0001b4  48a8              LDR      r0,|L102.1112|
0001b6  f7fffffe          BL       strstr
0001ba  2800              CMP      r0,#0
0001bc  d10b              BNE      |L102.470|
0001be  49a8              LDR      r1,|L102.1120|
0001c0  48a5              LDR      r0,|L102.1112|
0001c2  f7fffffe          BL       strstr
0001c6  2800              CMP      r0,#0
0001c8  d105              BNE      |L102.470|
0001ca  49a6              LDR      r1,|L102.1124|
0001cc  48a2              LDR      r0,|L102.1112|
0001ce  f7fffffe          BL       strstr
0001d2  2800              CMP      r0,#0
0001d4  d008              BEQ      |L102.488|
                  |L102.470|
;;;2084   		memset(exception,0,200);	
0001d6  21c8              MOVS     r1,#0xc8
0001d8  48a3              LDR      r0,|L102.1128|
0001da  f7fffffe          BL       __aeabi_memclr
;;;2085   		strcat(exception,"exception : COMPARED RESPONCES IN THE DATA\n\n\n\n");	
0001de  49a3              LDR      r1,|L102.1132|
0001e0  48a1              LDR      r0,|L102.1128|
0001e2  f7fffffe          BL       strcat
0001e6  e003              B        |L102.496|
                  |L102.488|
;;;2086   		}
;;;2087   		else{memset(exception,0,200);}
0001e8  21c8              MOVS     r1,#0xc8
0001ea  489f              LDR      r0,|L102.1128|
0001ec  f7fffffe          BL       __aeabi_memclr
                  |L102.496|
;;;2088   
;;;2089   	
;;;2090   		qwe=strlen(uart_string_gsm);
0001f0  488d              LDR      r0,|L102.1064|
0001f2  f7fffffe          BL       strlen
0001f6  499e              LDR      r1,|L102.1136|
0001f8  6008              STR      r0,[r1,#0]  ; qwe
;;;2091   		memset(uart_string_gsm,0,qwe);
0001fa  4608              MOV      r0,r1
0001fc  6801              LDR      r1,[r0,#0]  ; qwe
0001fe  488a              LDR      r0,|L102.1064|
000200  f7fffffe          BL       __aeabi_memclr
;;;2092   		
;;;2093   							send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT",tmeout);	
000204  4883              LDR      r0,|L102.1044|
000206  6800              LDR      r0,[r0,#0]  ; tmeout
000208  4b9a              LDR      r3,|L102.1140|
00020a  4a90              LDR      r2,|L102.1100|
00020c  499a              LDR      r1,|L102.1144|
00020e  9000              STR      r0,[sp,#0]
000210  489a              LDR      r0,|L102.1148|
000212  f7fffffe          BL       send_GSM
;;;2094   								cond =mystrstr(uart_string_gsm,'>');
000216  213e              MOVS     r1,#0x3e
000218  4883              LDR      r0,|L102.1064|
00021a  f7fffffe          BL       mystrstr
00021e  4998              LDR      r1,|L102.1152|
000220  7008              STRB     r0,[r1,#0]
;;;2095   									if(cond)	
000222  4608              MOV      r0,r1
000224  7800              LDRB     r0,[r0,#0]  ; cond
000226  2800              CMP      r0,#0
000228  d101              BNE      |L102.558|
00022a  f000fff8          BL       |L102.4638|
                  |L102.558|
;;;2096   									{	
;;;2097   									clear();
00022e  f7fffffe          BL       clear
;;;2098   									memset(uart_string_gsm,0,5000);
000232  4994              LDR      r1,|L102.1156|
000234  487c              LDR      r0,|L102.1064|
000236  f7fffffe          BL       __aeabi_memclr
;;;2099   									if(strlen(exception) > 5){
00023a  488b              LDR      r0,|L102.1128|
00023c  f7fffffe          BL       strlen
000240  2805              CMP      r0,#5
000242  d905              BLS      |L102.592|
;;;2100   									qwe=strlen(exception);
000244  4888              LDR      r0,|L102.1128|
000246  f7fffffe          BL       strlen
00024a  4989              LDR      r1,|L102.1136|
00024c  6008              STR      r0,[r1,#0]  ; qwe
00024e  e004              B        |L102.602|
                  |L102.592|
;;;2101   									}
;;;2102   									else{										
;;;2103   									qwe=strlen(sd_data);
000250  4881              LDR      r0,|L102.1112|
000252  f7fffffe          BL       strlen
000256  4986              LDR      r1,|L102.1136|
000258  6008              STR      r0,[r1,#0]  ; qwe
                  |L102.602|
;;;2104   									}										
;;;2105   									tout=0;
00025a  2000              MOVS     r0,#0
00025c  498a              LDR      r1,|L102.1160|
00025e  6008              STR      r0,[r1,#0]  ; tout
;;;2106   									k2=0;
000260  498a              LDR      r1,|L102.1164|
000262  6008              STR      r0,[r1,#0]  ; k2
;;;2107   									for(k=0;k<(qwe);k++)
000264  498a              LDR      r1,|L102.1168|
000266  6008              STR      r0,[r1,#0]  ; k
000268  e018              B        |L102.668|
                  |L102.618|
;;;2108   									{
;;;2109   										if(strlen(exception) > 5){
00026a  487f              LDR      r0,|L102.1128|
00026c  f7fffffe          BL       strlen
000270  2805              CMP      r0,#5
000272  d907              BLS      |L102.644|
;;;2110   										uart_putchar(UART1_BASE_PTR, exception[k]);	
000274  487c              LDR      r0,|L102.1128|
000276  4a86              LDR      r2,|L102.1168|
000278  6812              LDR      r2,[r2,#0]  ; k
00027a  5c81              LDRB     r1,[r0,r2]
00027c  4885              LDR      r0,|L102.1172|
00027e  f7fffffe          BL       uart_putchar
000282  e006              B        |L102.658|
                  |L102.644|
;;;2111   										}
;;;2112   										else{										
;;;2113   										uart_putchar(UART1_BASE_PTR, sd_data[k]);
000284  4874              LDR      r0,|L102.1112|
000286  4a82              LDR      r2,|L102.1168|
000288  6812              LDR      r2,[r2,#0]  ; k
00028a  5c81              LDRB     r1,[r0,r2]
00028c  4881              LDR      r0,|L102.1172|
00028e  f7fffffe          BL       uart_putchar
                  |L102.658|
000292  487f              LDR      r0,|L102.1168|
000294  6800              LDR      r0,[r0,#0]            ;2107  ; k
000296  1c40              ADDS     r0,r0,#1              ;2107
000298  497d              LDR      r1,|L102.1168|
00029a  6008              STR      r0,[r1,#0]            ;2107  ; k
                  |L102.668|
00029c  487c              LDR      r0,|L102.1168|
00029e  6800              LDR      r0,[r0,#0]            ;2107  ; k
0002a0  4973              LDR      r1,|L102.1136|
0002a2  6809              LDR      r1,[r1,#0]            ;2107  ; qwe
0002a4  4288              CMP      r0,r1                 ;2107
0002a6  dbe0              BLT      |L102.618|
;;;2114   										}
;;;2115   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
0002a8  210a              MOVS     r1,#0xa
0002aa  487a              LDR      r0,|L102.1172|
0002ac  f7fffffe          BL       uart_putchar
0002b0  211a              MOVS     r1,#0x1a
0002b2  4878              LDR      r0,|L102.1172|
0002b4  f7fffffe          BL       uart_putchar
0002b8  211a              MOVS     r1,#0x1a
0002ba  4876              LDR      r0,|L102.1172|
0002bc  f7fffffe          BL       uart_putchar
0002c0  211a              MOVS     r1,#0x1a
0002c2  4874              LDR      r0,|L102.1172|
0002c4  f7fffffe          BL       uart_putchar
0002c8  211a              MOVS     r1,#0x1a
0002ca  4872              LDR      r0,|L102.1172|
0002cc  f7fffffe          BL       uart_putchar
0002d0  211a              MOVS     r1,#0x1a
0002d2  4870              LDR      r0,|L102.1172|
0002d4  f7fffffe          BL       uart_putchar
0002d8  211a              MOVS     r1,#0x1a
0002da  486e              LDR      r0,|L102.1172|
0002dc  f7fffffe          BL       uart_putchar
;;;2116   									do
0002e0  bf00              NOP      
                  |L102.738|
;;;2117   																{q1=strstr(uart_string_gsm,"SEND OK");
0002e2  495e              LDR      r1,|L102.1116|
0002e4  4850              LDR      r0,|L102.1064|
0002e6  f7fffffe          BL       strstr
0002ea  496b              LDR      r1,|L102.1176|
0002ec  6008              STR      r0,[r1,#0]  ; q1
;;;2118   																	q2=strstr(uart_string_gsm, "ERROR");
0002ee  4957              LDR      r1,|L102.1100|
0002f0  484d              LDR      r0,|L102.1064|
0002f2  f7fffffe          BL       strstr
0002f6  4969              LDR      r1,|L102.1180|
0002f8  6008              STR      r0,[r1,#0]  ; q2
;;;2119   																		q3=strstr(uart_string_gsm, "FAIL");	
0002fa  4959              LDR      r1,|L102.1120|
0002fc  484a              LDR      r0,|L102.1064|
0002fe  f7fffffe          BL       strstr
000302  4967              LDR      r1,|L102.1184|
000304  6008              STR      r0,[r1,#0]  ; q3
;;;2120   																			q4=strstr(uart_string_gsm, "DEACT");	
000306  4957              LDR      r1,|L102.1124|
000308  4847              LDR      r0,|L102.1064|
00030a  f7fffffe          BL       strstr
00030e  4965              LDR      r1,|L102.1188|
000310  6008              STR      r0,[r1,#0]  ; q4
;;;2121   																	
;;;2122   																}while(!(q1 || q2 || q3 || q4 || (tout > 7) ) ); //|| (timeout < 1)   
000312  4861              LDR      r0,|L102.1176|
000314  6800              LDR      r0,[r0,#0]  ; q1
000316  2800              CMP      r0,#0
000318  d10f              BNE      |L102.826|
00031a  4860              LDR      r0,|L102.1180|
00031c  6800              LDR      r0,[r0,#0]  ; q2
00031e  2800              CMP      r0,#0
000320  d10b              BNE      |L102.826|
000322  485f              LDR      r0,|L102.1184|
000324  6800              LDR      r0,[r0,#0]  ; q3
000326  2800              CMP      r0,#0
000328  d107              BNE      |L102.826|
00032a  4608              MOV      r0,r1
00032c  6800              LDR      r0,[r0,#0]  ; q4
00032e  2800              CMP      r0,#0
000330  d103              BNE      |L102.826|
000332  4855              LDR      r0,|L102.1160|
000334  6800              LDR      r0,[r0,#0]  ; tout
000336  2807              CMP      r0,#7
000338  ddd3              BLE      |L102.738|
                  |L102.826|
;;;2123   																delay(10);clear();
00033a  200a              MOVS     r0,#0xa
00033c  f7fffffe          BL       delay
000340  f7fffffe          BL       clear
;;;2124   														uart_putchar(UART1_BASE_PTR,0x1A);
000344  211a              MOVS     r1,#0x1a
000346  4853              LDR      r0,|L102.1172|
000348  f7fffffe          BL       uart_putchar
;;;2125   												delay(10);
00034c  200a              MOVS     r0,#0xa
00034e  f7fffffe          BL       delay
;;;2126   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000352  211a              MOVS     r1,#0x1a
000354  484f              LDR      r0,|L102.1172|
000356  f7fffffe          BL       uart_putchar
00035a  211a              MOVS     r1,#0x1a
00035c  484d              LDR      r0,|L102.1172|
00035e  f7fffffe          BL       uart_putchar
000362  211a              MOVS     r1,#0x1a
000364  484b              LDR      r0,|L102.1172|
000366  f7fffffe          BL       uart_putchar
;;;2127   delay(50);
00036a  2032              MOVS     r0,#0x32
00036c  f7fffffe          BL       delay
;;;2128   if(strstr(uart_string_gsm,"SEND OK"))
000370  493a              LDR      r1,|L102.1116|
000372  482d              LDR      r0,|L102.1064|
000374  f7fffffe          BL       strstr
000378  2800              CMP      r0,#0
00037a  d013              BEQ      |L102.932|
;;;2129   {
;;;2130   cursorvaluene=cursor_val(sd_data,enters-3);
00037c  4835              LDR      r0,|L102.1108|
00037e  6800              LDR      r0,[r0,#0]  ; enters
000380  1ec1              SUBS     r1,r0,#3
000382  4835              LDR      r0,|L102.1112|
000384  f7fffffe          BL       cursor_val
000388  4947              LDR      r1,|L102.1192|
00038a  6008              STR      r0,[r1,#0]  ; cursorvaluene
;;;2131   cursorvaluepr+=cursorvaluene;
00038c  482a              LDR      r0,|L102.1080|
00038e  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
000390  6809              LDR      r1,[r1,#0]  ; cursorvaluene
000392  1840              ADDS     r0,r0,r1
000394  4928              LDR      r1,|L102.1080|
000396  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;2132   k5++;
000398  4825              LDR      r0,|L102.1072|
00039a  6800              LDR      r0,[r0,#0]  ; k5
00039c  1c40              ADDS     r0,r0,#1
00039e  4924              LDR      r1,|L102.1072|
0003a0  6008              STR      r0,[r1,#0]  ; k5
0003a2  e674              B        |L102.142|
                  |L102.932|
;;;2133   }
;;;2134   else{remove_all_chars(data, '\n', '\n');
0003a4  220a              MOVS     r2,#0xa
0003a6  4611              MOV      r1,r2
0003a8  4825              LDR      r0,|L102.1088|
0003aa  f7fffffe          BL       remove_all_chars
;;;2135   			strcat(data,"CH\n");
0003ae  493f              LDR      r1,|L102.1196|
0003b0  4823              LDR      r0,|L102.1088|
0003b2  f7fffffe          BL       strcat
;;;2136   
;;;2137   	delay(100);
0003b6  2064              MOVS     r0,#0x64
0003b8  f7fffffe          BL       delay
;;;2138   		clear();//memset(uart_string_gsm,0,5000);
0003bc  f7fffffe          BL       clear
;;;2139   	
;;;2140   	memset(at_,0,100);
0003c0  2164              MOVS     r1,#0x64
0003c2  4811              LDR      r0,|L102.1032|
0003c4  f7fffffe          BL       __aeabi_memclr
;;;2141   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0003c8  481d              LDR      r0,|L102.1088|
0003ca  f7fffffe          BL       strlen
0003ce  1c44              ADDS     r4,r0,#1
0003d0  4623              MOV      r3,r4
0003d2  4a0e              LDR      r2,|L102.1036|
0003d4  4936              LDR      r1,|L102.1200|
0003d6  480c              LDR      r0,|L102.1032|
0003d8  f7fffffe          BL       __2sprintf
;;;2142   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0003dc  2005              MOVS     r0,#5
0003de  4b1b              LDR      r3,|L102.1100|
0003e0  4a0e              LDR      r2,|L102.1052|
0003e2  4925              LDR      r1,|L102.1144|
0003e4  9000              STR      r0,[sp,#0]
0003e6  4808              LDR      r0,|L102.1032|
0003e8  f7fffffe          BL       send_SD
;;;2143   
;;;2144   	
;;;2145   clear();	
0003ec  f7fffffe          BL       clear
;;;2146   									k2=0;									//string array counter for uart 1
0003f0  2000              MOVS     r0,#0
0003f2  4926              LDR      r1,|L102.1164|
0003f4  6008              STR      r0,[r1,#0]  ; k2
;;;2147   									tout=0;	
0003f6  4924              LDR      r1,|L102.1160|
0003f8  6008              STR      r0,[r1,#0]  ; tout
;;;2148   		for(k=0;k<strlen(data);k++)
0003fa  4925              LDR      r1,|L102.1168|
0003fc  6008              STR      r0,[r1,#0]  ; k
0003fe  e065              B        |L102.1228|
                  |L102.1024|
                          DCD      ||fsz||
                  |L102.1028|
                          DCD      times
                  |L102.1032|
                          DCD      at_
                  |L102.1036|
                          DCD      drive
                  |L102.1040|
                          DCD      ||.conststring||+0x428
                  |L102.1044|
                          DCD      tmeout
                  |L102.1048|
                          DCD      ||.conststring||
                  |L102.1052|
                          DCD      ||.conststring||+0x8
                  |L102.1056|
                          DCD      ||.conststring||+0x10
                  |L102.1060|
                          DCD      fsize
                  |L102.1064|
                          DCD      uart_string_gsm
                  |L102.1068|
                          DCD      0x0098967f
                  |L102.1072|
                          DCD      ||k5||
                  |L102.1076|
                          DCD      0x44610000
                  |L102.1080|
                          DCD      cursorvaluepr
                  |L102.1084|
                          DCD      0x400ff080
                  |L102.1088|
                          DCD      data
                  |L102.1092|
                          DCD      ||.conststring||+0x35c
                  |L102.1096|
                          DCD      ||.conststring||+0x444
                  |L102.1100|
                          DCD      ||.conststring||+0xd4
                  |L102.1104|
                          DCD      cntendl
                  |L102.1108|
                          DCD      enters
                  |L102.1112|
                          DCD      sd_data
                  |L102.1116|
                          DCD      ||.conststring||+0x468
                  |L102.1120|
                          DCD      ||.conststring||+0x470
                  |L102.1124|
                          DCD      ||.conststring||+0x478
                  |L102.1128|
                          DCD      exception
                  |L102.1132|
                          DCD      ||.conststring||+0x480
                  |L102.1136|
                          DCD      qwe
                  |L102.1140|
                          DCD      ||.conststring||+0x4b0
                  |L102.1144|
                          DCD      ||.conststring||+0x30
                  |L102.1148|
                          DCD      ||.conststring||+0x4b8
                  |L102.1152|
                          DCD      cond
                  |L102.1156|
                          DCD      0x00001388
                  |L102.1160|
                          DCD      tout
                  |L102.1164|
                          DCD      ||k2||
                  |L102.1168|
                          DCD      k
                  |L102.1172|
                          DCD      0x4006b000
                  |L102.1176|
                          DCD      ||q1||
                  |L102.1180|
                          DCD      ||q2||
                  |L102.1184|
                          DCD      ||q3||
                  |L102.1188|
                          DCD      ||q4||
                  |L102.1192|
                          DCD      cursorvaluene
                  |L102.1196|
                          DCD      ||.conststring||+0x360
                  |L102.1200|
                          DCD      ||.conststring||+0x364
                  |L102.1204|
;;;2149   		{
;;;2150   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0004b4  48fd              LDR      r0,|L102.2220|
0004b6  4afe              LDR      r2,|L102.2224|
0004b8  6812              LDR      r2,[r2,#0]  ; k
0004ba  5c81              LDRB     r1,[r0,r2]
0004bc  48fd              LDR      r0,|L102.2228|
0004be  f7fffffe          BL       uart_putchar
0004c2  48fb              LDR      r0,|L102.2224|
0004c4  6800              LDR      r0,[r0,#0]            ;2148  ; k
0004c6  1c40              ADDS     r0,r0,#1              ;2148
0004c8  49f9              LDR      r1,|L102.2224|
0004ca  6008              STR      r0,[r1,#0]            ;2148  ; k
                  |L102.1228|
0004cc  48f7              LDR      r0,|L102.2220|
0004ce  f7fffffe          BL       strlen
0004d2  49f7              LDR      r1,|L102.2224|
0004d4  6809              LDR      r1,[r1,#0]            ;2148  ; k
0004d6  4288              CMP      r0,r1                 ;2148
0004d8  d8ec              BHI      |L102.1204|
;;;2151   		}	
;;;2152   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0004da  210a              MOVS     r1,#0xa
0004dc  48f5              LDR      r0,|L102.2228|
0004de  f7fffffe          BL       uart_putchar
0004e2  210a              MOVS     r1,#0xa
0004e4  48f3              LDR      r0,|L102.2228|
0004e6  f7fffffe          BL       uart_putchar
0004ea  210a              MOVS     r1,#0xa
0004ec  48f1              LDR      r0,|L102.2228|
0004ee  f7fffffe          BL       uart_putchar
0004f2  210a              MOVS     r1,#0xa
0004f4  48ef              LDR      r0,|L102.2228|
0004f6  f7fffffe          BL       uart_putchar
0004fa  210a              MOVS     r1,#0xa
0004fc  48ed              LDR      r0,|L102.2228|
0004fe  f7fffffe          BL       uart_putchar
000502  210a              MOVS     r1,#0xa
000504  48eb              LDR      r0,|L102.2228|
000506  f7fffffe          BL       uart_putchar
00050a  210a              MOVS     r1,#0xa
00050c  48e9              LDR      r0,|L102.2228|
00050e  f7fffffe          BL       uart_putchar
000512  210a              MOVS     r1,#0xa
000514  48e7              LDR      r0,|L102.2228|
000516  f7fffffe          BL       uart_putchar
00051a  210a              MOVS     r1,#0xa
00051c  48e5              LDR      r0,|L102.2228|
00051e  f7fffffe          BL       uart_putchar
000522  210a              MOVS     r1,#0xa
000524  48e3              LDR      r0,|L102.2228|
000526  f7fffffe          BL       uart_putchar
00052a  210a              MOVS     r1,#0xa
00052c  48e1              LDR      r0,|L102.2228|
00052e  f7fffffe          BL       uart_putchar
000532  210a              MOVS     r1,#0xa
000534  48df              LDR      r0,|L102.2228|
000536  f7fffffe          BL       uart_putchar
00053a  210a              MOVS     r1,#0xa
00053c  48dd              LDR      r0,|L102.2228|
00053e  f7fffffe          BL       uart_putchar
000542  210a              MOVS     r1,#0xa
000544  48db              LDR      r0,|L102.2228|
000546  f7fffffe          BL       uart_putchar
00054a  210a              MOVS     r1,#0xa
00054c  48d9              LDR      r0,|L102.2228|
00054e  f7fffffe          BL       uart_putchar
000552  210a              MOVS     r1,#0xa
000554  48d7              LDR      r0,|L102.2228|
000556  f7fffffe          BL       uart_putchar
00055a  210a              MOVS     r1,#0xa
00055c  48d5              LDR      r0,|L102.2228|
00055e  f7fffffe          BL       uart_putchar
000562  210a              MOVS     r1,#0xa
000564  48d3              LDR      r0,|L102.2228|
000566  f7fffffe          BL       uart_putchar
00056a  210a              MOVS     r1,#0xa
00056c  48d1              LDR      r0,|L102.2228|
00056e  f7fffffe          BL       uart_putchar
000572  210a              MOVS     r1,#0xa
000574  48cf              LDR      r0,|L102.2228|
000576  f7fffffe          BL       uart_putchar
00057a  210a              MOVS     r1,#0xa
00057c  48cd              LDR      r0,|L102.2228|
00057e  f7fffffe          BL       uart_putchar
000582  210a              MOVS     r1,#0xa
000584  48cb              LDR      r0,|L102.2228|
000586  f7fffffe          BL       uart_putchar
00058a  210a              MOVS     r1,#0xa
00058c  48c9              LDR      r0,|L102.2228|
00058e  f7fffffe          BL       uart_putchar
000592  210a              MOVS     r1,#0xa
000594  48c7              LDR      r0,|L102.2228|
000596  f7fffffe          BL       uart_putchar
00059a  210a              MOVS     r1,#0xa
00059c  48c5              LDR      r0,|L102.2228|
00059e  f7fffffe          BL       uart_putchar
0005a2  210a              MOVS     r1,#0xa
0005a4  48c3              LDR      r0,|L102.2228|
0005a6  f7fffffe          BL       uart_putchar
0005aa  210a              MOVS     r1,#0xa
0005ac  48c1              LDR      r0,|L102.2228|
0005ae  f7fffffe          BL       uart_putchar
0005b2  210a              MOVS     r1,#0xa
0005b4  48bf              LDR      r0,|L102.2228|
0005b6  f7fffffe          BL       uart_putchar
0005ba  210a              MOVS     r1,#0xa
0005bc  48bd              LDR      r0,|L102.2228|
0005be  f7fffffe          BL       uart_putchar
0005c2  210a              MOVS     r1,#0xa
0005c4  48bb              LDR      r0,|L102.2228|
0005c6  f7fffffe          BL       uart_putchar
0005ca  210a              MOVS     r1,#0xa
0005cc  48b9              LDR      r0,|L102.2228|
0005ce  f7fffffe          BL       uart_putchar
0005d2  210a              MOVS     r1,#0xa
0005d4  48b7              LDR      r0,|L102.2228|
0005d6  f7fffffe          BL       uart_putchar
0005da  210a              MOVS     r1,#0xa
0005dc  48b5              LDR      r0,|L102.2228|
0005de  f7fffffe          BL       uart_putchar
0005e2  210a              MOVS     r1,#0xa
0005e4  48b3              LDR      r0,|L102.2228|
0005e6  f7fffffe          BL       uart_putchar
0005ea  210a              MOVS     r1,#0xa
0005ec  48b1              LDR      r0,|L102.2228|
0005ee  f7fffffe          BL       uart_putchar
0005f2  210a              MOVS     r1,#0xa
0005f4  48af              LDR      r0,|L102.2228|
0005f6  f7fffffe          BL       uart_putchar
0005fa  210a              MOVS     r1,#0xa
0005fc  48ad              LDR      r0,|L102.2228|
0005fe  f7fffffe          BL       uart_putchar
000602  210a              MOVS     r1,#0xa
000604  48ab              LDR      r0,|L102.2228|
000606  f7fffffe          BL       uart_putchar
00060a  210a              MOVS     r1,#0xa
00060c  48a9              LDR      r0,|L102.2228|
00060e  f7fffffe          BL       uart_putchar
000612  210a              MOVS     r1,#0xa
000614  48a7              LDR      r0,|L102.2228|
000616  f7fffffe          BL       uart_putchar
00061a  210a              MOVS     r1,#0xa
00061c  48a5              LDR      r0,|L102.2228|
00061e  f7fffffe          BL       uart_putchar
000622  210a              MOVS     r1,#0xa
000624  48a3              LDR      r0,|L102.2228|
000626  f7fffffe          BL       uart_putchar
00062a  210a              MOVS     r1,#0xa
00062c  48a1              LDR      r0,|L102.2228|
00062e  f7fffffe          BL       uart_putchar
000632  210a              MOVS     r1,#0xa
000634  489f              LDR      r0,|L102.2228|
000636  f7fffffe          BL       uart_putchar
00063a  210a              MOVS     r1,#0xa
00063c  489d              LDR      r0,|L102.2228|
00063e  f7fffffe          BL       uart_putchar
000642  210a              MOVS     r1,#0xa
000644  489b              LDR      r0,|L102.2228|
000646  f7fffffe          BL       uart_putchar
00064a  210a              MOVS     r1,#0xa
00064c  4899              LDR      r0,|L102.2228|
00064e  f7fffffe          BL       uart_putchar
000652  210a              MOVS     r1,#0xa
000654  4897              LDR      r0,|L102.2228|
000656  f7fffffe          BL       uart_putchar
00065a  210a              MOVS     r1,#0xa
00065c  4895              LDR      r0,|L102.2228|
00065e  f7fffffe          BL       uart_putchar
000662  210a              MOVS     r1,#0xa
000664  4893              LDR      r0,|L102.2228|
000666  f7fffffe          BL       uart_putchar
00066a  210a              MOVS     r1,#0xa
00066c  4891              LDR      r0,|L102.2228|
00066e  f7fffffe          BL       uart_putchar
000672  210a              MOVS     r1,#0xa
000674  488f              LDR      r0,|L102.2228|
000676  f7fffffe          BL       uart_putchar
00067a  210a              MOVS     r1,#0xa
00067c  488d              LDR      r0,|L102.2228|
00067e  f7fffffe          BL       uart_putchar
000682  210a              MOVS     r1,#0xa
000684  488b              LDR      r0,|L102.2228|
000686  f7fffffe          BL       uart_putchar
00068a  210a              MOVS     r1,#0xa
00068c  4889              LDR      r0,|L102.2228|
00068e  f7fffffe          BL       uart_putchar
000692  210a              MOVS     r1,#0xa
000694  4887              LDR      r0,|L102.2228|
000696  f7fffffe          BL       uart_putchar
00069a  210a              MOVS     r1,#0xa
00069c  4885              LDR      r0,|L102.2228|
00069e  f7fffffe          BL       uart_putchar
;;;2153   														//timer counts to wait for characters in uart 1 									
;;;2154   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0006a2  bf00              NOP      
                  |L102.1700|
0006a4  4984              LDR      r1,|L102.2232|
0006a6  4885              LDR      r0,|L102.2236|
0006a8  f7fffffe          BL       strstr
0006ac  2800              CMP      r0,#0
0006ae  d109              BNE      |L102.1732|
0006b0  4983              LDR      r1,|L102.2240|
0006b2  4882              LDR      r0,|L102.2236|
0006b4  f7fffffe          BL       strstr
0006b8  2800              CMP      r0,#0
0006ba  d103              BNE      |L102.1732|
0006bc  4881              LDR      r0,|L102.2244|
0006be  6800              LDR      r0,[r0,#0]  ; tout
0006c0  2805              CMP      r0,#5
0006c2  ddef              BLE      |L102.1700|
                  |L102.1732|
;;;2155   									{	}
;;;2156   	                clear();
0006c4  f7fffffe          BL       clear
;;;2157   									memset(data,0,strlen(data));
0006c8  4878              LDR      r0,|L102.2220|
0006ca  f7fffffe          BL       strlen
0006ce  4604              MOV      r4,r0
0006d0  4621              MOV      r1,r4
0006d2  4876              LDR      r0,|L102.2220|
0006d4  f7fffffe          BL       __aeabi_memclr
;;;2158   									clear();
0006d8  f7fffffe          BL       clear
;;;2159   
;;;2160   								
;;;2161   
;;;2162   
;;;2163   
;;;2164   //	log_it();
;;;2165   
;;;2166   			memset(data,0,strlen(data));
0006dc  4873              LDR      r0,|L102.2220|
0006de  f7fffffe          BL       strlen
0006e2  4604              MOV      r4,r0
0006e4  4621              MOV      r1,r4
0006e6  4871              LDR      r0,|L102.2220|
0006e8  f7fffffe          BL       __aeabi_memclr
;;;2167   //*********************************tcp_initialization();***************************************//
;;;2168   
;;;2169   	
;;;2170   msg_sim800(); 
0006ec  f7fffffe          BL       msg_sim800
;;;2171   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0006f0  2005              MOVS     r0,#5
0006f2  4b73              LDR      r3,|L102.2240|
0006f4  4a74              LDR      r2,|L102.2248|
0006f6  4975              LDR      r1,|L102.2252|
0006f8  9000              STR      r0,[sp,#0]
0006fa  4875              LDR      r0,|L102.2256|
0006fc  f7fffffe          BL       send_GSM
;;;2172   delay(100);
000700  2064              MOVS     r0,#0x64
000702  f7fffffe          BL       delay
;;;2173   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
000706  2004              MOVS     r0,#4
000708  4b6d              LDR      r3,|L102.2240|
00070a  4a72              LDR      r2,|L102.2260|
00070c  496f              LDR      r1,|L102.2252|
00070e  9000              STR      r0,[sp,#0]
000710  4871              LDR      r0,|L102.2264|
000712  f7fffffe          BL       send_GSM
;;;2174   GPS_COLLECT2();
000716  f7fffffe          BL       GPS_COLLECT2
;;;2175   strcat(data,"CH\n");		
00071a  4970              LDR      r1,|L102.2268|
00071c  4863              LDR      r0,|L102.2220|
00071e  f7fffffe          BL       strcat
;;;2176   GPS_COLLECT2();
000722  f7fffffe          BL       GPS_COLLECT2
;;;2177   strcat(data,"CH\n");	
000726  496d              LDR      r1,|L102.2268|
000728  4860              LDR      r0,|L102.2220|
00072a  f7fffffe          BL       strcat
;;;2178   GPS_COLLECT2();
00072e  f7fffffe          BL       GPS_COLLECT2
;;;2179   strcat(data,"CH\n");
000732  496a              LDR      r1,|L102.2268|
000734  485d              LDR      r0,|L102.2220|
000736  f7fffffe          BL       strcat
;;;2180   cond201=(strstr(uart_string_gsm, "OK"));
00073a  4964              LDR      r1,|L102.2252|
00073c  485f              LDR      r0,|L102.2236|
00073e  f7fffffe          BL       strstr
000742  4967              LDR      r1,|L102.2272|
000744  6008              STR      r0,[r1,#0]  ; cond201
;;;2181   cond200=(strstr(uart_string_gsm, "ERROR"));
000746  495e              LDR      r1,|L102.2240|
000748  485c              LDR      r0,|L102.2236|
00074a  f7fffffe          BL       strstr
00074e  4965              LDR      r1,|L102.2276|
000750  6008              STR      r0,[r1,#0]  ; cond200
;;;2182   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
000752  4863              LDR      r0,|L102.2272|
000754  6800              LDR      r0,[r0,#0]  ; cond201
000756  2800              CMP      r0,#0
000758  d101              BNE      |L102.1886|
00075a  2001              MOVS     r0,#1
00075c  e000              B        |L102.1888|
                  |L102.1886|
00075e  2000              MOVS     r0,#0
                  |L102.1888|
000760  2800              CMP      r0,#0
                  |L102.1890|
000762  d07d              BEQ      |L102.2144|
000764  485f              LDR      r0,|L102.2276|
000766  6800              LDR      r0,[r0,#0]  ; cond200
000768  2800              CMP      r0,#0
00076a  d101              BNE      |L102.1904|
00076c  2001              MOVS     r0,#1
00076e  e000              B        |L102.1906|
                  |L102.1904|
000770  2000              MOVS     r0,#0
                  |L102.1906|
000772  2800              CMP      r0,#0
000774  d0f5              BEQ      |L102.1890|
000776  485c              LDR      r0,|L102.2280|
000778  6800              LDR      r0,[r0,#0]  ; sleep_flag
00077a  2801              CMP      r0,#1
00077c  d0f1              BEQ      |L102.1890|
;;;2183   {
;;;2184   delay(100);
00077e  2064              MOVS     r0,#0x64
000780  f7fffffe          BL       delay
;;;2185   clear();//memset(uart_string_gsm,0,5000);
000784  f7fffffe          BL       clear
;;;2186   memset(at_,0,100);
000788  2164              MOVS     r1,#0x64
00078a  4858              LDR      r0,|L102.2284|
00078c  f7fffffe          BL       __aeabi_memclr
;;;2187   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000790  4846              LDR      r0,|L102.2220|
000792  f7fffffe          BL       strlen
000796  1c44              ADDS     r4,r0,#1
000798  4623              MOV      r3,r4
00079a  4a55              LDR      r2,|L102.2288|
00079c  4955              LDR      r1,|L102.2292|
00079e  4853              LDR      r0,|L102.2284|
0007a0  f7fffffe          BL       __2sprintf
;;;2188   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0007a4  2005              MOVS     r0,#5
0007a6  4b46              LDR      r3,|L102.2240|
0007a8  4a47              LDR      r2,|L102.2248|
0007aa  4953              LDR      r1,|L102.2296|
0007ac  9000              STR      r0,[sp,#0]
0007ae  484f              LDR      r0,|L102.2284|
0007b0  f7fffffe          BL       send_SD
;;;2189   clear();	
0007b4  f7fffffe          BL       clear
;;;2190   k2=0;									//string array counter for uart 1
0007b8  2000              MOVS     r0,#0
0007ba  4950              LDR      r1,|L102.2300|
0007bc  6008              STR      r0,[r1,#0]  ; k2
;;;2191   tout=0;	
0007be  4941              LDR      r1,|L102.2244|
0007c0  6008              STR      r0,[r1,#0]  ; tout
;;;2192   for(k=0;k<strlen(data);k++)
0007c2  493b              LDR      r1,|L102.2224|
0007c4  6008              STR      r0,[r1,#0]  ; k
0007c6  e00b              B        |L102.2016|
                  |L102.1992|
;;;2193   {
;;;2194   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0007c8  4838              LDR      r0,|L102.2220|
0007ca  4a39              LDR      r2,|L102.2224|
0007cc  6812              LDR      r2,[r2,#0]  ; k
0007ce  5c81              LDRB     r1,[r0,r2]
0007d0  4838              LDR      r0,|L102.2228|
0007d2  f7fffffe          BL       uart_putchar
0007d6  4836              LDR      r0,|L102.2224|
0007d8  6800              LDR      r0,[r0,#0]            ;2192  ; k
0007da  1c40              ADDS     r0,r0,#1              ;2192
0007dc  4934              LDR      r1,|L102.2224|
0007de  6008              STR      r0,[r1,#0]            ;2192  ; k
                  |L102.2016|
0007e0  4832              LDR      r0,|L102.2220|
0007e2  f7fffffe          BL       strlen
0007e6  4932              LDR      r1,|L102.2224|
0007e8  6809              LDR      r1,[r1,#0]            ;2192  ; k
0007ea  4288              CMP      r0,r1                 ;2192
0007ec  d8ec              BHI      |L102.1992|
;;;2195   }	
;;;2196   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0007ee  210a              MOVS     r1,#0xa
0007f0  4830              LDR      r0,|L102.2228|
0007f2  f7fffffe          BL       uart_putchar
0007f6  210a              MOVS     r1,#0xa
0007f8  482e              LDR      r0,|L102.2228|
0007fa  f7fffffe          BL       uart_putchar
0007fe  210a              MOVS     r1,#0xa
000800  482c              LDR      r0,|L102.2228|
000802  f7fffffe          BL       uart_putchar
000806  210a              MOVS     r1,#0xa
000808  482a              LDR      r0,|L102.2228|
00080a  f7fffffe          BL       uart_putchar
00080e  210a              MOVS     r1,#0xa
000810  4828              LDR      r0,|L102.2228|
000812  f7fffffe          BL       uart_putchar
000816  210a              MOVS     r1,#0xa
000818  4826              LDR      r0,|L102.2228|
00081a  f7fffffe          BL       uart_putchar
00081e  210a              MOVS     r1,#0xa
000820  4824              LDR      r0,|L102.2228|
000822  f7fffffe          BL       uart_putchar
000826  210a              MOVS     r1,#0xa
000828  4822              LDR      r0,|L102.2228|
00082a  f7fffffe          BL       uart_putchar
00082e  210a              MOVS     r1,#0xa
000830  4820              LDR      r0,|L102.2228|
000832  f7fffffe          BL       uart_putchar
000836  210a              MOVS     r1,#0xa
000838  481e              LDR      r0,|L102.2228|
00083a  f7fffffe          BL       uart_putchar
00083e  210a              MOVS     r1,#0xa
000840  481c              LDR      r0,|L102.2228|
000842  f7fffffe          BL       uart_putchar
000846  210a              MOVS     r1,#0xa
000848  481a              LDR      r0,|L102.2228|
00084a  f7fffffe          BL       uart_putchar
00084e  210a              MOVS     r1,#0xa
000850  4818              LDR      r0,|L102.2228|
000852  f7fffffe          BL       uart_putchar
000856  210a              MOVS     r1,#0xa
000858  4816              LDR      r0,|L102.2228|
00085a  f7fffffe          BL       uart_putchar
00085e  e001              B        |L102.2148|
                  |L102.2144|
000860  e101              B        |L102.2662|
                  |L102.2146|
000862  e3fc              B        |L102.4190|
                  |L102.2148|
000864  210a              MOVS     r1,#0xa
000866  4813              LDR      r0,|L102.2228|
000868  f7fffffe          BL       uart_putchar
00086c  210a              MOVS     r1,#0xa
00086e  4811              LDR      r0,|L102.2228|
000870  f7fffffe          BL       uart_putchar
000874  210a              MOVS     r1,#0xa
000876  480f              LDR      r0,|L102.2228|
000878  f7fffffe          BL       uart_putchar
00087c  210a              MOVS     r1,#0xa
00087e  480d              LDR      r0,|L102.2228|
000880  f7fffffe          BL       uart_putchar
000884  210a              MOVS     r1,#0xa
000886  480b              LDR      r0,|L102.2228|
000888  f7fffffe          BL       uart_putchar
00088c  210a              MOVS     r1,#0xa
00088e  4809              LDR      r0,|L102.2228|
000890  f7fffffe          BL       uart_putchar
000894  210a              MOVS     r1,#0xa
000896  4807              LDR      r0,|L102.2228|
000898  f7fffffe          BL       uart_putchar
00089c  210a              MOVS     r1,#0xa
00089e  4805              LDR      r0,|L102.2228|
0008a0  f7fffffe          BL       uart_putchar
0008a4  210a              MOVS     r1,#0xa
0008a6  4803              LDR      r0,|L102.2228|
0008a8  e02a              B        |L102.2304|
0008aa  0000              DCW      0x0000
                  |L102.2220|
                          DCD      data
                  |L102.2224|
                          DCD      k
                  |L102.2228|
                          DCD      0x4006b000
                  |L102.2232|
                          DCD      ||.conststring||+0x58
                  |L102.2236|
                          DCD      uart_string_gsm
                  |L102.2240|
                          DCD      ||.conststring||+0xd4
                  |L102.2244|
                          DCD      tout
                  |L102.2248|
                          DCD      ||.conststring||+0x8
                  |L102.2252|
                          DCD      ||.conststring||+0x10
                  |L102.2256|
                          DCD      ||.conststring||+0x4c8
                  |L102.2260|
                          DCD      ||.conststring||+0x4d8
                  |L102.2264|
                          DCD      ||.conststring||+0x4ec
                  |L102.2268|
                          DCD      ||.conststring||+0x360
                  |L102.2272|
                          DCD      cond201
                  |L102.2276|
                          DCD      cond200
                  |L102.2280|
                          DCD      sleep_flag
                  |L102.2284|
                          DCD      at_
                  |L102.2288|
                          DCD      drive
                  |L102.2292|
                          DCD      ||.conststring||+0x364
                  |L102.2296|
                          DCD      ||.conststring||+0x30
                  |L102.2300|
                          DCD      ||k2||
                  |L102.2304|
000900  f7fffffe          BL       uart_putchar
000904  210a              MOVS     r1,#0xa
000906  48fe              LDR      r0,|L102.3328|
000908  f7fffffe          BL       uart_putchar
00090c  210a              MOVS     r1,#0xa
00090e  48fc              LDR      r0,|L102.3328|
000910  f7fffffe          BL       uart_putchar
000914  210a              MOVS     r1,#0xa
000916  48fa              LDR      r0,|L102.3328|
000918  f7fffffe          BL       uart_putchar
00091c  210a              MOVS     r1,#0xa
00091e  48f8              LDR      r0,|L102.3328|
000920  f7fffffe          BL       uart_putchar
000924  210a              MOVS     r1,#0xa
000926  48f6              LDR      r0,|L102.3328|
000928  f7fffffe          BL       uart_putchar
00092c  210a              MOVS     r1,#0xa
00092e  48f4              LDR      r0,|L102.3328|
000930  f7fffffe          BL       uart_putchar
000934  210a              MOVS     r1,#0xa
000936  48f2              LDR      r0,|L102.3328|
000938  f7fffffe          BL       uart_putchar
00093c  210a              MOVS     r1,#0xa
00093e  48f0              LDR      r0,|L102.3328|
000940  f7fffffe          BL       uart_putchar
000944  210a              MOVS     r1,#0xa
000946  48ee              LDR      r0,|L102.3328|
000948  f7fffffe          BL       uart_putchar
00094c  210a              MOVS     r1,#0xa
00094e  48ec              LDR      r0,|L102.3328|
000950  f7fffffe          BL       uart_putchar
000954  210a              MOVS     r1,#0xa
000956  48ea              LDR      r0,|L102.3328|
000958  f7fffffe          BL       uart_putchar
00095c  210a              MOVS     r1,#0xa
00095e  48e8              LDR      r0,|L102.3328|
000960  f7fffffe          BL       uart_putchar
000964  210a              MOVS     r1,#0xa
000966  48e6              LDR      r0,|L102.3328|
000968  f7fffffe          BL       uart_putchar
00096c  210a              MOVS     r1,#0xa
00096e  48e4              LDR      r0,|L102.3328|
000970  f7fffffe          BL       uart_putchar
000974  210a              MOVS     r1,#0xa
000976  48e2              LDR      r0,|L102.3328|
000978  f7fffffe          BL       uart_putchar
00097c  210a              MOVS     r1,#0xa
00097e  48e0              LDR      r0,|L102.3328|
000980  f7fffffe          BL       uart_putchar
000984  210a              MOVS     r1,#0xa
000986  48de              LDR      r0,|L102.3328|
000988  f7fffffe          BL       uart_putchar
00098c  210a              MOVS     r1,#0xa
00098e  48dc              LDR      r0,|L102.3328|
000990  f7fffffe          BL       uart_putchar
000994  210a              MOVS     r1,#0xa
000996  48da              LDR      r0,|L102.3328|
000998  f7fffffe          BL       uart_putchar
00099c  210a              MOVS     r1,#0xa
00099e  48d8              LDR      r0,|L102.3328|
0009a0  f7fffffe          BL       uart_putchar
0009a4  210a              MOVS     r1,#0xa
0009a6  48d6              LDR      r0,|L102.3328|
0009a8  f7fffffe          BL       uart_putchar
0009ac  210a              MOVS     r1,#0xa
0009ae  48d4              LDR      r0,|L102.3328|
0009b0  f7fffffe          BL       uart_putchar
0009b4  210a              MOVS     r1,#0xa
0009b6  48d2              LDR      r0,|L102.3328|
0009b8  f7fffffe          BL       uart_putchar
0009bc  210a              MOVS     r1,#0xa
0009be  48d0              LDR      r0,|L102.3328|
0009c0  f7fffffe          BL       uart_putchar
0009c4  210a              MOVS     r1,#0xa
0009c6  48ce              LDR      r0,|L102.3328|
0009c8  f7fffffe          BL       uart_putchar
0009cc  210a              MOVS     r1,#0xa
0009ce  48cc              LDR      r0,|L102.3328|
0009d0  f7fffffe          BL       uart_putchar
0009d4  210a              MOVS     r1,#0xa
0009d6  48ca              LDR      r0,|L102.3328|
0009d8  f7fffffe          BL       uart_putchar
0009dc  210a              MOVS     r1,#0xa
0009de  48c8              LDR      r0,|L102.3328|
0009e0  f7fffffe          BL       uart_putchar
0009e4  210a              MOVS     r1,#0xa
0009e6  48c6              LDR      r0,|L102.3328|
0009e8  f7fffffe          BL       uart_putchar
0009ec  210a              MOVS     r1,#0xa
0009ee  48c4              LDR      r0,|L102.3328|
0009f0  f7fffffe          BL       uart_putchar
0009f4  210a              MOVS     r1,#0xa
0009f6  48c2              LDR      r0,|L102.3328|
0009f8  f7fffffe          BL       uart_putchar
0009fc  210a              MOVS     r1,#0xa
0009fe  48c0              LDR      r0,|L102.3328|
000a00  f7fffffe          BL       uart_putchar
000a04  210a              MOVS     r1,#0xa
000a06  48be              LDR      r0,|L102.3328|
000a08  f7fffffe          BL       uart_putchar
000a0c  210a              MOVS     r1,#0xa
000a0e  48bc              LDR      r0,|L102.3328|
000a10  f7fffffe          BL       uart_putchar
;;;2197   									//memset(data,0,1000);
;;;2198   														//timer counts to wait for characters in uart 1 									
;;;2199   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000a14  bf00              NOP      
                  |L102.2582|
000a16  49bb              LDR      r1,|L102.3332|
000a18  48bb              LDR      r0,|L102.3336|
000a1a  f7fffffe          BL       strstr
000a1e  2800              CMP      r0,#0
000a20  d109              BNE      |L102.2614|
000a22  49ba              LDR      r1,|L102.3340|
000a24  48b8              LDR      r0,|L102.3336|
000a26  f7fffffe          BL       strstr
000a2a  2800              CMP      r0,#0
000a2c  d103              BNE      |L102.2614|
000a2e  48b8              LDR      r0,|L102.3344|
000a30  6800              LDR      r0,[r0,#0]  ; tout
000a32  2805              CMP      r0,#5
000a34  ddef              BLE      |L102.2582|
                  |L102.2614|
;;;2200   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2201   									}
;;;2202   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000a36  f7fffffe          BL       clear
;;;2203   									//clear();
;;;2204   									memset(data,0,strlen(data));
000a3a  48b6              LDR      r0,|L102.3348|
000a3c  f7fffffe          BL       strlen
000a40  4604              MOV      r4,r0
000a42  4621              MOV      r1,r4
000a44  48b3              LDR      r0,|L102.3348|
000a46  f7fffffe          BL       __aeabi_memclr
;;;2205   									clear();
000a4a  f7fffffe          BL       clear
;;;2206   									RESET_OFF;delay(100);
000a4e  2020              MOVS     r0,#0x20
000a50  49b1              LDR      r1,|L102.3352|
000a52  6088              STR      r0,[r1,#8]
000a54  2064              MOVS     r0,#0x64
000a56  f7fffffe          BL       delay
;;;2207   									RESET_ON;delay(100);		
000a5a  2020              MOVS     r0,#0x20
000a5c  49ae              LDR      r1,|L102.3352|
000a5e  6048              STR      r0,[r1,#4]
000a60  2064              MOVS     r0,#0x64
000a62  f7fffffe          BL       delay
                  |L102.2662|
;;;2208   }
;;;2209   	
;;;2210   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000a66  2004              MOVS     r0,#4
000a68  4bac              LDR      r3,|L102.3356|
000a6a  4aad              LDR      r2,|L102.3360|
000a6c  49ad              LDR      r1,|L102.3364|
000a6e  9000              STR      r0,[sp,#0]
000a70  48ad              LDR      r0,|L102.3368|
000a72  f7fffffe          BL       send_GSM
;;;2211   GPS_COLLECT2();
000a76  f7fffffe          BL       GPS_COLLECT2
;;;2212   strcat(data,"CH\n");	
000a7a  49ac              LDR      r1,|L102.3372|
000a7c  48a5              LDR      r0,|L102.3348|
000a7e  f7fffffe          BL       strcat
;;;2213   memset(at_,0,100);
000a82  2164              MOVS     r1,#0x64
000a84  48aa              LDR      r0,|L102.3376|
000a86  f7fffffe          BL       __aeabi_memclr
;;;2214   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000a8a  4aaa              LDR      r2,|L102.3380|
000a8c  49aa              LDR      r1,|L102.3384|
000a8e  48a8              LDR      r0,|L102.3376|
000a90  f7fffffe          BL       __2sprintf
;;;2215   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000a94  48a9              LDR      r0,|L102.3388|
000a96  6800              LDR      r0,[r0,#0]  ; tmeout
000a98  4ba0              LDR      r3,|L102.3356|
000a9a  4aa1              LDR      r2,|L102.3360|
000a9c  49a1              LDR      r1,|L102.3364|
000a9e  9000              STR      r0,[sp,#0]
000aa0  48a3              LDR      r0,|L102.3376|
000aa2  f7fffffe          BL       send_GSM
;;;2216   msg_sim800(); 
000aa6  f7fffffe          BL       msg_sim800
;;;2217   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000aaa  2004              MOVS     r0,#4
000aac  4ba4              LDR      r3,|L102.3392|
000aae  4a9c              LDR      r2,|L102.3360|
000ab0  499c              LDR      r1,|L102.3364|
000ab2  9000              STR      r0,[sp,#0]
000ab4  48a3              LDR      r0,|L102.3396|
000ab6  f7fffffe          BL       send_GSM
;;;2218   GPS_COLLECT2();
000aba  f7fffffe          BL       GPS_COLLECT2
;;;2219   strcat(data,"CH\n");	
000abe  499b              LDR      r1,|L102.3372|
000ac0  4894              LDR      r0,|L102.3348|
000ac2  f7fffffe          BL       strcat
;;;2220   GPS_COLLECT2();
000ac6  f7fffffe          BL       GPS_COLLECT2
;;;2221   strcat(data,"CH\n");	
000aca  4998              LDR      r1,|L102.3372|
000acc  4891              LDR      r0,|L102.3348|
000ace  f7fffffe          BL       strcat
;;;2222   
;;;2223   
;;;2224   msg_sim800(); 
000ad2  f7fffffe          BL       msg_sim800
;;;2225   GPS_COLLECT2();
000ad6  f7fffffe          BL       GPS_COLLECT2
;;;2226   strcat(data,"CH\n");	
000ada  4994              LDR      r1,|L102.3372|
000adc  488d              LDR      r0,|L102.3348|
000ade  f7fffffe          BL       strcat
;;;2227   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000ae2  f7fffffe          BL       clear
000ae6  4898              LDR      r0,|L102.3400|
000ae8  f7fffffe          BL       send_modem
000aec  f7fffffe          BL       clear
;;;2228   					delay(20);
000af0  2014              MOVS     r0,#0x14
000af2  f7fffffe          BL       delay
;;;2229   
;;;2230   
;;;2231   msg_sim800(); 
000af6  f7fffffe          BL       msg_sim800
;;;2232   
;;;2233   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000afa  4b94              LDR      r3,|L102.3404|
000afc  4a94              LDR      r2,|L102.3408|
000afe  4995              LDR      r1,|L102.3412|
000b00  488b              LDR      r0,|L102.3376|
000b02  f7fffffe          BL       __2sprintf
;;;2234   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000b06  488d              LDR      r0,|L102.3388|
000b08  6800              LDR      r0,[r0,#0]  ; tmeout
000b0a  4b84              LDR      r3,|L102.3356|
000b0c  4a7f              LDR      r2,|L102.3340|
000b0e  4992              LDR      r1,|L102.3416|
000b10  9000              STR      r0,[sp,#0]
000b12  4887              LDR      r0,|L102.3376|
000b14  f7fffffe          BL       send_GSM
;;;2235   						clear();
000b18  f7fffffe          BL       clear
;;;2236   						
;;;2237   						
;;;2238   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
000b1c  4887              LDR      r0,|L102.3388|
000b1e  6800              LDR      r0,[r0,#0]  ; tmeout
000b20  4b8e              LDR      r3,|L102.3420|
000b22  4a7a              LDR      r2,|L102.3340|
000b24  498e              LDR      r1,|L102.3424|
000b26  9000              STR      r0,[sp,#0]
000b28  488e              LDR      r0,|L102.3428|
000b2a  f7fffffe          BL       send_GSM
;;;2239   									
;;;2240   //*********************************tcp_initialization ends*************************************//									
;;;2241   			if(mystrstr(uart_string_gsm,'>')){
000b2e  213e              MOVS     r1,#0x3e
000b30  4875              LDR      r0,|L102.3336|
000b32  f7fffffe          BL       mystrstr
000b36  2800              CMP      r0,#0
000b38  d07e              BEQ      |L102.3128|
;;;2242   									clear();
000b3a  f7fffffe          BL       clear
;;;2243   									memset(uart_string_gsm,0,5000);
000b3e  498a              LDR      r1,|L102.3432|
000b40  4871              LDR      r0,|L102.3336|
000b42  f7fffffe          BL       __aeabi_memclr
;;;2244   									qwe=strlen(data);
000b46  4873              LDR      r0,|L102.3348|
000b48  f7fffffe          BL       strlen
000b4c  4987              LDR      r1,|L102.3436|
000b4e  6008              STR      r0,[r1,#0]  ; qwe
;;;2245   									tout=0;
000b50  2000              MOVS     r0,#0
000b52  496f              LDR      r1,|L102.3344|
000b54  6008              STR      r0,[r1,#0]  ; tout
;;;2246   									k2=0;
000b56  4986              LDR      r1,|L102.3440|
000b58  6008              STR      r0,[r1,#0]  ; k2
;;;2247   									for(k=0;k<(qwe);k++)
000b5a  4986              LDR      r1,|L102.3444|
000b5c  6008              STR      r0,[r1,#0]  ; k
000b5e  e00b              B        |L102.2936|
                  |L102.2912|
;;;2248   									{
;;;2249   										uart_putchar(UART1_BASE_PTR, data[k]);
000b60  486c              LDR      r0,|L102.3348|
000b62  4a84              LDR      r2,|L102.3444|
000b64  6812              LDR      r2,[r2,#0]  ; k
000b66  5c81              LDRB     r1,[r0,r2]
000b68  4865              LDR      r0,|L102.3328|
000b6a  f7fffffe          BL       uart_putchar
000b6e  4881              LDR      r0,|L102.3444|
000b70  6800              LDR      r0,[r0,#0]            ;2247  ; k
000b72  1c40              ADDS     r0,r0,#1              ;2247
000b74  497f              LDR      r1,|L102.3444|
000b76  6008              STR      r0,[r1,#0]            ;2247  ; k
                  |L102.2936|
000b78  487e              LDR      r0,|L102.3444|
000b7a  6800              LDR      r0,[r0,#0]            ;2247  ; k
000b7c  497b              LDR      r1,|L102.3436|
000b7e  6809              LDR      r1,[r1,#0]            ;2247  ; qwe
000b80  4288              CMP      r0,r1                 ;2247
000b82  dbed              BLT      |L102.2912|
;;;2250   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
000b84  210a              MOVS     r1,#0xa
000b86  485e              LDR      r0,|L102.3328|
000b88  f7fffffe          BL       uart_putchar
000b8c  211a              MOVS     r1,#0x1a
000b8e  485c              LDR      r0,|L102.3328|
000b90  f7fffffe          BL       uart_putchar
000b94  211a              MOVS     r1,#0x1a
000b96  485a              LDR      r0,|L102.3328|
000b98  f7fffffe          BL       uart_putchar
000b9c  211a              MOVS     r1,#0x1a
000b9e  4858              LDR      r0,|L102.3328|
000ba0  f7fffffe          BL       uart_putchar
000ba4  211a              MOVS     r1,#0x1a
000ba6  4856              LDR      r0,|L102.3328|
000ba8  f7fffffe          BL       uart_putchar
000bac  211a              MOVS     r1,#0x1a
000bae  4854              LDR      r0,|L102.3328|
000bb0  f7fffffe          BL       uart_putchar
000bb4  211a              MOVS     r1,#0x1a
000bb6  4852              LDR      r0,|L102.3328|
000bb8  f7fffffe          BL       uart_putchar
;;;2251   															do
000bbc  bf00              NOP      
                  |L102.3006|
;;;2252   																{q1=strstr(uart_string_gsm,"SEND OK");
000bbe  496e              LDR      r1,|L102.3448|
000bc0  4851              LDR      r0,|L102.3336|
000bc2  f7fffffe          BL       strstr
000bc6  496d              LDR      r1,|L102.3452|
000bc8  6008              STR      r0,[r1,#0]  ; q1
;;;2253   																	q2=strstr(uart_string_gsm, "ERROR");
000bca  4950              LDR      r1,|L102.3340|
000bcc  484e              LDR      r0,|L102.3336|
000bce  f7fffffe          BL       strstr
000bd2  496b              LDR      r1,|L102.3456|
000bd4  6008              STR      r0,[r1,#0]  ; q2
;;;2254   																		q3=strstr(uart_string_gsm, "FAIL");	
000bd6  496b              LDR      r1,|L102.3460|
000bd8  484b              LDR      r0,|L102.3336|
000bda  f7fffffe          BL       strstr
000bde  496a              LDR      r1,|L102.3464|
000be0  6008              STR      r0,[r1,#0]  ; q3
;;;2255   																			q4=strstr(uart_string_gsm, "DEACT");	
000be2  4957              LDR      r1,|L102.3392|
000be4  4848              LDR      r0,|L102.3336|
000be6  f7fffffe          BL       strstr
000bea  4968              LDR      r1,|L102.3468|
000bec  6008              STR      r0,[r1,#0]  ; q4
;;;2256   																	
;;;2257   																}while(!(q1 || q2 || q3 || q4 || (tout > 7) ) );
000bee  4863              LDR      r0,|L102.3452|
000bf0  6800              LDR      r0,[r0,#0]  ; q1
000bf2  2800              CMP      r0,#0
000bf4  d10f              BNE      |L102.3094|
000bf6  4862              LDR      r0,|L102.3456|
000bf8  6800              LDR      r0,[r0,#0]  ; q2
000bfa  2800              CMP      r0,#0
000bfc  d10b              BNE      |L102.3094|
000bfe  4862              LDR      r0,|L102.3464|
000c00  6800              LDR      r0,[r0,#0]  ; q3
000c02  2800              CMP      r0,#0
000c04  d107              BNE      |L102.3094|
000c06  4608              MOV      r0,r1
000c08  6800              LDR      r0,[r0,#0]  ; q4
000c0a  2800              CMP      r0,#0
000c0c  d103              BNE      |L102.3094|
000c0e  4840              LDR      r0,|L102.3344|
000c10  6800              LDR      r0,[r0,#0]  ; tout
000c12  2807              CMP      r0,#7
000c14  ddd3              BLE      |L102.3006|
                  |L102.3094|
;;;2258   															
;;;2259   																			delay(10);clear();
000c16  200a              MOVS     r0,#0xa
000c18  f7fffffe          BL       delay
000c1c  f7fffffe          BL       clear
;;;2260   														uart_putchar(UART1_BASE_PTR,0x1A);
000c20  211a              MOVS     r1,#0x1a
000c22  4837              LDR      r0,|L102.3328|
000c24  f7fffffe          BL       uart_putchar
;;;2261   												delay(10);
000c28  200a              MOVS     r0,#0xa
000c2a  f7fffffe          BL       delay
;;;2262   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000c2e  211a              MOVS     r1,#0x1a
000c30  4833              LDR      r0,|L102.3328|
000c32  f7fffffe          BL       uart_putchar
000c36  e000              B        |L102.3130|
                  |L102.3128|
000c38  e19a              B        |L102.3952|
                  |L102.3130|
000c3a  211a              MOVS     r1,#0x1a
000c3c  4830              LDR      r0,|L102.3328|
000c3e  f7fffffe          BL       uart_putchar
000c42  211a              MOVS     r1,#0x1a
000c44  482e              LDR      r0,|L102.3328|
000c46  f7fffffe          BL       uart_putchar
;;;2263   delay(20);
000c4a  2014              MOVS     r0,#0x14
000c4c  f7fffffe          BL       delay
;;;2264   if(!strstr(uart_string_gsm,"SEND OK")){
000c50  4949              LDR      r1,|L102.3448|
000c52  482d              LDR      r0,|L102.3336|
000c54  f7fffffe          BL       strstr
000c58  2800              CMP      r0,#0
000c5a  d001              BEQ      |L102.3168|
                  |L102.3164|
000c5c  f001f9b9          BL       |L102.8146|
                  |L102.3168|
;;;2265   
;;;2266   
;;;2267   	delay(100);
000c60  2064              MOVS     r0,#0x64
000c62  f7fffffe          BL       delay
;;;2268   		clear();//memset(uart_string_gsm,0,5000);
000c66  f7fffffe          BL       clear
;;;2269   	
;;;2270   	memset(at_,0,100);
000c6a  2164              MOVS     r1,#0x64
000c6c  4830              LDR      r0,|L102.3376|
000c6e  f7fffffe          BL       __aeabi_memclr
;;;2271   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000c72  4828              LDR      r0,|L102.3348|
000c74  f7fffffe          BL       strlen
000c78  1c44              ADDS     r4,r0,#1
000c7a  4623              MOV      r3,r4
000c7c  4a44              LDR      r2,|L102.3472|
000c7e  4945              LDR      r1,|L102.3476|
000c80  482b              LDR      r0,|L102.3376|
000c82  f7fffffe          BL       __2sprintf
;;;2272   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000c86  2005              MOVS     r0,#5
000c88  4b20              LDR      r3,|L102.3340|
000c8a  4a25              LDR      r2,|L102.3360|
000c8c  4934              LDR      r1,|L102.3424|
000c8e  9000              STR      r0,[sp,#0]
000c90  4827              LDR      r0,|L102.3376|
000c92  f7fffffe          BL       send_SD
;;;2273   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2274   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2275   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2276   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2277   //	}
;;;2278   	
;;;2279   clear();	
000c96  f7fffffe          BL       clear
;;;2280   									k2=0;									//string array counter for uart 1
000c9a  2000              MOVS     r0,#0
000c9c  4934              LDR      r1,|L102.3440|
000c9e  6008              STR      r0,[r1,#0]  ; k2
;;;2281   									tout=0;	
000ca0  491b              LDR      r1,|L102.3344|
000ca2  6008              STR      r0,[r1,#0]  ; tout
;;;2282   		for(k=0;k<strlen(data);k++)
000ca4  4933              LDR      r1,|L102.3444|
000ca6  6008              STR      r0,[r1,#0]  ; k
000ca8  e00b              B        |L102.3266|
                  |L102.3242|
;;;2283   		{
;;;2284   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000caa  481a              LDR      r0,|L102.3348|
000cac  4a31              LDR      r2,|L102.3444|
000cae  6812              LDR      r2,[r2,#0]  ; k
000cb0  5c81              LDRB     r1,[r0,r2]
000cb2  4813              LDR      r0,|L102.3328|
000cb4  f7fffffe          BL       uart_putchar
000cb8  482e              LDR      r0,|L102.3444|
000cba  6800              LDR      r0,[r0,#0]            ;2282  ; k
000cbc  1c40              ADDS     r0,r0,#1              ;2282
000cbe  492d              LDR      r1,|L102.3444|
000cc0  6008              STR      r0,[r1,#0]            ;2282  ; k
                  |L102.3266|
000cc2  4814              LDR      r0,|L102.3348|
000cc4  f7fffffe          BL       strlen
000cc8  492a              LDR      r1,|L102.3444|
000cca  6809              LDR      r1,[r1,#0]            ;2282  ; k
000ccc  4288              CMP      r0,r1                 ;2282
000cce  d8ec              BHI      |L102.3242|
;;;2285   		}	
;;;2286   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000cd0  210a              MOVS     r1,#0xa
000cd2  480b              LDR      r0,|L102.3328|
000cd4  f7fffffe          BL       uart_putchar
000cd8  210a              MOVS     r1,#0xa
000cda  4809              LDR      r0,|L102.3328|
000cdc  f7fffffe          BL       uart_putchar
000ce0  210a              MOVS     r1,#0xa
000ce2  4807              LDR      r0,|L102.3328|
000ce4  f7fffffe          BL       uart_putchar
000ce8  210a              MOVS     r1,#0xa
000cea  4805              LDR      r0,|L102.3328|
000cec  f7fffffe          BL       uart_putchar
000cf0  210a              MOVS     r1,#0xa
000cf2  4803              LDR      r0,|L102.3328|
000cf4  f7fffffe          BL       uart_putchar
000cf8  210a              MOVS     r1,#0xa
000cfa  4801              LDR      r0,|L102.3328|
000cfc  e04c              B        |L102.3480|
000cfe  0000              DCW      0x0000
                  |L102.3328|
                          DCD      0x4006b000
                  |L102.3332|
                          DCD      ||.conststring||+0x58
                  |L102.3336|
                          DCD      uart_string_gsm
                  |L102.3340|
                          DCD      ||.conststring||+0xd4
                  |L102.3344|
                          DCD      tout
                  |L102.3348|
                          DCD      data
                  |L102.3352|
                          DCD      0x400ff080
                  |L102.3356|
                          DCD      ||.conststring||
                  |L102.3360|
                          DCD      ||.conststring||+0x8
                  |L102.3364|
                          DCD      ||.conststring||+0x10
                  |L102.3368|
                          DCD      ||.conststring||+0x4fc
                  |L102.3372|
                          DCD      ||.conststring||+0x360
                  |L102.3376|
                          DCD      at_
                  |L102.3380|
                          DCD      apn
                  |L102.3384|
                          DCD      ||.conststring||+0x50c
                  |L102.3388|
                          DCD      tmeout
                  |L102.3392|
                          DCD      ||.conststring||+0x478
                  |L102.3396|
                          DCD      ||.conststring||+0x520
                  |L102.3400|
                          DCD      ||.conststring||+0x530
                  |L102.3404|
                          DCD      port
                  |L102.3408|
                          DCD      ||ip||
                  |L102.3412|
                          DCD      ||.conststring||+0x540
                  |L102.3416|
                          DCD      ||.conststring||+0x4b0
                  |L102.3420|
                          DCD      ||.conststring||+0x560
                  |L102.3424|
                          DCD      ||.conststring||+0x30
                  |L102.3428|
                          DCD      ||.conststring||+0x4b8
                  |L102.3432|
                          DCD      0x00001388
                  |L102.3436|
                          DCD      qwe
                  |L102.3440|
                          DCD      ||k2||
                  |L102.3444|
                          DCD      k
                  |L102.3448|
                          DCD      ||.conststring||+0x468
                  |L102.3452|
                          DCD      ||q1||
                  |L102.3456|
                          DCD      ||q2||
                  |L102.3460|
                          DCD      ||.conststring||+0x470
                  |L102.3464|
                          DCD      ||q3||
                  |L102.3468|
                          DCD      ||q4||
                  |L102.3472|
                          DCD      drive
                  |L102.3476|
                          DCD      ||.conststring||+0x364
                  |L102.3480|
000d98  f7fffffe          BL       uart_putchar
000d9c  210a              MOVS     r1,#0xa
000d9e  48fe              LDR      r0,|L102.4504|
000da0  f7fffffe          BL       uart_putchar
000da4  210a              MOVS     r1,#0xa
000da6  48fc              LDR      r0,|L102.4504|
000da8  f7fffffe          BL       uart_putchar
000dac  210a              MOVS     r1,#0xa
000dae  48fa              LDR      r0,|L102.4504|
000db0  f7fffffe          BL       uart_putchar
000db4  210a              MOVS     r1,#0xa
000db6  48f8              LDR      r0,|L102.4504|
000db8  f7fffffe          BL       uart_putchar
000dbc  210a              MOVS     r1,#0xa
000dbe  48f6              LDR      r0,|L102.4504|
000dc0  f7fffffe          BL       uart_putchar
000dc4  210a              MOVS     r1,#0xa
000dc6  48f4              LDR      r0,|L102.4504|
000dc8  f7fffffe          BL       uart_putchar
000dcc  210a              MOVS     r1,#0xa
000dce  48f2              LDR      r0,|L102.4504|
000dd0  f7fffffe          BL       uart_putchar
000dd4  210a              MOVS     r1,#0xa
000dd6  48f0              LDR      r0,|L102.4504|
000dd8  f7fffffe          BL       uart_putchar
000ddc  210a              MOVS     r1,#0xa
000dde  48ee              LDR      r0,|L102.4504|
000de0  f7fffffe          BL       uart_putchar
000de4  210a              MOVS     r1,#0xa
000de6  48ec              LDR      r0,|L102.4504|
000de8  f7fffffe          BL       uart_putchar
000dec  210a              MOVS     r1,#0xa
000dee  48ea              LDR      r0,|L102.4504|
000df0  f7fffffe          BL       uart_putchar
000df4  210a              MOVS     r1,#0xa
000df6  48e8              LDR      r0,|L102.4504|
000df8  f7fffffe          BL       uart_putchar
000dfc  210a              MOVS     r1,#0xa
000dfe  48e6              LDR      r0,|L102.4504|
000e00  f7fffffe          BL       uart_putchar
000e04  210a              MOVS     r1,#0xa
000e06  48e4              LDR      r0,|L102.4504|
000e08  f7fffffe          BL       uart_putchar
000e0c  210a              MOVS     r1,#0xa
000e0e  48e2              LDR      r0,|L102.4504|
000e10  f7fffffe          BL       uart_putchar
000e14  210a              MOVS     r1,#0xa
000e16  48e0              LDR      r0,|L102.4504|
000e18  f7fffffe          BL       uart_putchar
000e1c  210a              MOVS     r1,#0xa
000e1e  48de              LDR      r0,|L102.4504|
000e20  f7fffffe          BL       uart_putchar
000e24  210a              MOVS     r1,#0xa
000e26  48dc              LDR      r0,|L102.4504|
000e28  f7fffffe          BL       uart_putchar
000e2c  210a              MOVS     r1,#0xa
000e2e  48da              LDR      r0,|L102.4504|
000e30  f7fffffe          BL       uart_putchar
000e34  210a              MOVS     r1,#0xa
000e36  48d8              LDR      r0,|L102.4504|
000e38  f7fffffe          BL       uart_putchar
000e3c  210a              MOVS     r1,#0xa
000e3e  48d6              LDR      r0,|L102.4504|
000e40  f7fffffe          BL       uart_putchar
000e44  210a              MOVS     r1,#0xa
000e46  48d4              LDR      r0,|L102.4504|
000e48  f7fffffe          BL       uart_putchar
000e4c  210a              MOVS     r1,#0xa
000e4e  48d2              LDR      r0,|L102.4504|
000e50  f7fffffe          BL       uart_putchar
000e54  210a              MOVS     r1,#0xa
000e56  48d0              LDR      r0,|L102.4504|
000e58  f7fffffe          BL       uart_putchar
000e5c  210a              MOVS     r1,#0xa
000e5e  48ce              LDR      r0,|L102.4504|
000e60  f7fffffe          BL       uart_putchar
000e64  210a              MOVS     r1,#0xa
000e66  48cc              LDR      r0,|L102.4504|
000e68  f7fffffe          BL       uart_putchar
000e6c  210a              MOVS     r1,#0xa
000e6e  48ca              LDR      r0,|L102.4504|
000e70  f7fffffe          BL       uart_putchar
000e74  210a              MOVS     r1,#0xa
000e76  48c8              LDR      r0,|L102.4504|
000e78  f7fffffe          BL       uart_putchar
000e7c  210a              MOVS     r1,#0xa
000e7e  48c6              LDR      r0,|L102.4504|
000e80  f7fffffe          BL       uart_putchar
000e84  210a              MOVS     r1,#0xa
000e86  48c4              LDR      r0,|L102.4504|
000e88  f7fffffe          BL       uart_putchar
000e8c  210a              MOVS     r1,#0xa
000e8e  48c2              LDR      r0,|L102.4504|
000e90  f7fffffe          BL       uart_putchar
000e94  210a              MOVS     r1,#0xa
000e96  48c0              LDR      r0,|L102.4504|
000e98  f7fffffe          BL       uart_putchar
000e9c  210a              MOVS     r1,#0xa
000e9e  48be              LDR      r0,|L102.4504|
000ea0  f7fffffe          BL       uart_putchar
000ea4  210a              MOVS     r1,#0xa
000ea6  48bc              LDR      r0,|L102.4504|
000ea8  f7fffffe          BL       uart_putchar
000eac  210a              MOVS     r1,#0xa
000eae  48ba              LDR      r0,|L102.4504|
000eb0  f7fffffe          BL       uart_putchar
000eb4  210a              MOVS     r1,#0xa
000eb6  48b8              LDR      r0,|L102.4504|
000eb8  f7fffffe          BL       uart_putchar
000ebc  210a              MOVS     r1,#0xa
000ebe  48b6              LDR      r0,|L102.4504|
000ec0  f7fffffe          BL       uart_putchar
000ec4  210a              MOVS     r1,#0xa
000ec6  48b4              LDR      r0,|L102.4504|
000ec8  f7fffffe          BL       uart_putchar
000ecc  210a              MOVS     r1,#0xa
000ece  48b2              LDR      r0,|L102.4504|
000ed0  f7fffffe          BL       uart_putchar
000ed4  210a              MOVS     r1,#0xa
000ed6  48b0              LDR      r0,|L102.4504|
000ed8  f7fffffe          BL       uart_putchar
000edc  210a              MOVS     r1,#0xa
000ede  48ae              LDR      r0,|L102.4504|
000ee0  f7fffffe          BL       uart_putchar
000ee4  210a              MOVS     r1,#0xa
000ee6  48ac              LDR      r0,|L102.4504|
000ee8  f7fffffe          BL       uart_putchar
000eec  210a              MOVS     r1,#0xa
000eee  48aa              LDR      r0,|L102.4504|
000ef0  f7fffffe          BL       uart_putchar
000ef4  210a              MOVS     r1,#0xa
000ef6  48a8              LDR      r0,|L102.4504|
000ef8  f7fffffe          BL       uart_putchar
000efc  210a              MOVS     r1,#0xa
000efe  48a6              LDR      r0,|L102.4504|
000f00  f7fffffe          BL       uart_putchar
000f04  210a              MOVS     r1,#0xa
000f06  48a4              LDR      r0,|L102.4504|
000f08  f7fffffe          BL       uart_putchar
000f0c  210a              MOVS     r1,#0xa
000f0e  48a2              LDR      r0,|L102.4504|
000f10  f7fffffe          BL       uart_putchar
000f14  210a              MOVS     r1,#0xa
000f16  48a0              LDR      r0,|L102.4504|
000f18  f7fffffe          BL       uart_putchar
000f1c  210a              MOVS     r1,#0xa
000f1e  489e              LDR      r0,|L102.4504|
000f20  f7fffffe          BL       uart_putchar
000f24  210a              MOVS     r1,#0xa
000f26  489c              LDR      r0,|L102.4504|
000f28  f7fffffe          BL       uart_putchar
000f2c  210a              MOVS     r1,#0xa
000f2e  489a              LDR      r0,|L102.4504|
000f30  f7fffffe          BL       uart_putchar
;;;2287   									//memset(data,0,1000);
;;;2288   														//timer counts to wait for characters in uart 1 									
;;;2289   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000f34  bf00              NOP      
                  |L102.3894|
000f36  4999              LDR      r1,|L102.4508|
000f38  4899              LDR      r0,|L102.4512|
000f3a  f7fffffe          BL       strstr
000f3e  2800              CMP      r0,#0
000f40  d109              BNE      |L102.3926|
000f42  4998              LDR      r1,|L102.4516|
000f44  4896              LDR      r0,|L102.4512|
000f46  f7fffffe          BL       strstr
000f4a  2800              CMP      r0,#0
000f4c  d103              BNE      |L102.3926|
000f4e  4896              LDR      r0,|L102.4520|
000f50  6800              LDR      r0,[r0,#0]  ; tout
000f52  2805              CMP      r0,#5
000f54  ddef              BLE      |L102.3894|
                  |L102.3926|
;;;2290   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2291   									}
;;;2292   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000f56  f7fffffe          BL       clear
;;;2293   									//clear();
;;;2294   									memset(data,0,strlen(data));
000f5a  4894              LDR      r0,|L102.4524|
000f5c  f7fffffe          BL       strlen
000f60  4604              MOV      r4,r0
000f62  4621              MOV      r1,r4
000f64  4891              LDR      r0,|L102.4524|
000f66  f7fffffe          BL       __aeabi_memclr
;;;2295   									clear();
000f6a  f7fffffe          BL       clear
000f6e  e675              B        |L102.3164|
                  |L102.3952|
;;;2296   
;;;2297   								
;;;2298   
;;;2299   
;;;2300   //log_it();
;;;2301   }
;;;2302   			
;;;2303   			
;;;2304   			
;;;2305   			
;;;2306   			
;;;2307   			}
;;;2308   			else
;;;2309   			{
;;;2310   			
;;;2311   			
;;;2312   		delay(100);
000f70  2064              MOVS     r0,#0x64
000f72  f7fffffe          BL       delay
;;;2313   		clear();//memset(uart_string_gsm,0,5000);
000f76  f7fffffe          BL       clear
;;;2314   	
;;;2315   	memset(at_,0,100);
000f7a  2164              MOVS     r1,#0x64
000f7c  488c              LDR      r0,|L102.4528|
000f7e  f7fffffe          BL       __aeabi_memclr
;;;2316   	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000f82  488a              LDR      r0,|L102.4524|
000f84  f7fffffe          BL       strlen
000f88  1c44              ADDS     r4,r0,#1
000f8a  4623              MOV      r3,r4
000f8c  4a89              LDR      r2,|L102.4532|
000f8e  498a              LDR      r1,|L102.4536|
000f90  4887              LDR      r0,|L102.4528|
000f92  f7fffffe          BL       __2sprintf
;;;2317   	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000f96  2005              MOVS     r0,#5
000f98  4b82              LDR      r3,|L102.4516|
000f9a  4a88              LDR      r2,|L102.4540|
000f9c  4988              LDR      r1,|L102.4544|
000f9e  9000              STR      r0,[sp,#0]
000fa0  4883              LDR      r0,|L102.4528|
000fa2  f7fffffe          BL       send_SD
;;;2318   	
;;;2319   	clear();	
000fa6  f7fffffe          BL       clear
;;;2320   									k2=0;									//string array counter for uart 1
000faa  2000              MOVS     r0,#0
000fac  4985              LDR      r1,|L102.4548|
000fae  6008              STR      r0,[r1,#0]  ; k2
;;;2321   									tout=0;	
000fb0  497d              LDR      r1,|L102.4520|
000fb2  6008              STR      r0,[r1,#0]  ; tout
;;;2322   		for(k=0;k<strlen(data);k++)
000fb4  4984              LDR      r1,|L102.4552|
000fb6  6008              STR      r0,[r1,#0]  ; k
000fb8  e00b              B        |L102.4050|
                  |L102.4026|
;;;2323   		{
;;;2324   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000fba  487c              LDR      r0,|L102.4524|
000fbc  4a82              LDR      r2,|L102.4552|
000fbe  6812              LDR      r2,[r2,#0]  ; k
000fc0  5c81              LDRB     r1,[r0,r2]
000fc2  4875              LDR      r0,|L102.4504|
000fc4  f7fffffe          BL       uart_putchar
000fc8  487f              LDR      r0,|L102.4552|
000fca  6800              LDR      r0,[r0,#0]            ;2322  ; k
000fcc  1c40              ADDS     r0,r0,#1              ;2322
000fce  497e              LDR      r1,|L102.4552|
000fd0  6008              STR      r0,[r1,#0]            ;2322  ; k
                  |L102.4050|
000fd2  4876              LDR      r0,|L102.4524|
000fd4  f7fffffe          BL       strlen
000fd8  497b              LDR      r1,|L102.4552|
000fda  6809              LDR      r1,[r1,#0]            ;2322  ; k
000fdc  4288              CMP      r0,r1                 ;2322
000fde  d8ec              BHI      |L102.4026|
;;;2325   		}	
;;;2326   		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000fe0  210a              MOVS     r1,#0xa
000fe2  486d              LDR      r0,|L102.4504|
000fe4  f7fffffe          BL       uart_putchar
000fe8  210a              MOVS     r1,#0xa
000fea  486b              LDR      r0,|L102.4504|
000fec  f7fffffe          BL       uart_putchar
000ff0  210a              MOVS     r1,#0xa
000ff2  4869              LDR      r0,|L102.4504|
000ff4  f7fffffe          BL       uart_putchar
000ff8  210a              MOVS     r1,#0xa
000ffa  4867              LDR      r0,|L102.4504|
000ffc  f7fffffe          BL       uart_putchar
001000  210a              MOVS     r1,#0xa
001002  4865              LDR      r0,|L102.4504|
001004  f7fffffe          BL       uart_putchar
001008  210a              MOVS     r1,#0xa
00100a  4863              LDR      r0,|L102.4504|
00100c  f7fffffe          BL       uart_putchar
001010  210a              MOVS     r1,#0xa
001012  4861              LDR      r0,|L102.4504|
001014  f7fffffe          BL       uart_putchar
001018  210a              MOVS     r1,#0xa
00101a  485f              LDR      r0,|L102.4504|
00101c  f7fffffe          BL       uart_putchar
001020  210a              MOVS     r1,#0xa
001022  485d              LDR      r0,|L102.4504|
001024  f7fffffe          BL       uart_putchar
001028  210a              MOVS     r1,#0xa
00102a  485b              LDR      r0,|L102.4504|
00102c  f7fffffe          BL       uart_putchar
001030  210a              MOVS     r1,#0xa
001032  4859              LDR      r0,|L102.4504|
001034  f7fffffe          BL       uart_putchar
001038  210a              MOVS     r1,#0xa
00103a  4857              LDR      r0,|L102.4504|
00103c  f7fffffe          BL       uart_putchar
001040  210a              MOVS     r1,#0xa
001042  4855              LDR      r0,|L102.4504|
001044  f7fffffe          BL       uart_putchar
001048  210a              MOVS     r1,#0xa
00104a  4853              LDR      r0,|L102.4504|
00104c  f7fffffe          BL       uart_putchar
001050  210a              MOVS     r1,#0xa
001052  4851              LDR      r0,|L102.4504|
001054  f7fffffe          BL       uart_putchar
001058  210a              MOVS     r1,#0xa
00105a  484f              LDR      r0,|L102.4504|
00105c  e000              B        |L102.4192|
                  |L102.4190|
00105e  e3fd              B        |L102.6236|
                  |L102.4192|
001060  f7fffffe          BL       uart_putchar
001064  210a              MOVS     r1,#0xa
001066  484c              LDR      r0,|L102.4504|
001068  f7fffffe          BL       uart_putchar
00106c  210a              MOVS     r1,#0xa
00106e  484a              LDR      r0,|L102.4504|
001070  f7fffffe          BL       uart_putchar
001074  210a              MOVS     r1,#0xa
001076  4848              LDR      r0,|L102.4504|
001078  f7fffffe          BL       uart_putchar
00107c  210a              MOVS     r1,#0xa
00107e  4846              LDR      r0,|L102.4504|
001080  f7fffffe          BL       uart_putchar
001084  210a              MOVS     r1,#0xa
001086  4844              LDR      r0,|L102.4504|
001088  f7fffffe          BL       uart_putchar
00108c  210a              MOVS     r1,#0xa
00108e  4842              LDR      r0,|L102.4504|
001090  f7fffffe          BL       uart_putchar
001094  210a              MOVS     r1,#0xa
001096  4840              LDR      r0,|L102.4504|
001098  f7fffffe          BL       uart_putchar
00109c  210a              MOVS     r1,#0xa
00109e  483e              LDR      r0,|L102.4504|
0010a0  f7fffffe          BL       uart_putchar
0010a4  210a              MOVS     r1,#0xa
0010a6  483c              LDR      r0,|L102.4504|
0010a8  f7fffffe          BL       uart_putchar
0010ac  210a              MOVS     r1,#0xa
0010ae  483a              LDR      r0,|L102.4504|
0010b0  f7fffffe          BL       uart_putchar
0010b4  210a              MOVS     r1,#0xa
0010b6  4838              LDR      r0,|L102.4504|
0010b8  f7fffffe          BL       uart_putchar
0010bc  210a              MOVS     r1,#0xa
0010be  4836              LDR      r0,|L102.4504|
0010c0  f7fffffe          BL       uart_putchar
0010c4  210a              MOVS     r1,#0xa
0010c6  4834              LDR      r0,|L102.4504|
0010c8  f7fffffe          BL       uart_putchar
0010cc  210a              MOVS     r1,#0xa
0010ce  4832              LDR      r0,|L102.4504|
0010d0  f7fffffe          BL       uart_putchar
0010d4  210a              MOVS     r1,#0xa
0010d6  4830              LDR      r0,|L102.4504|
0010d8  f7fffffe          BL       uart_putchar
0010dc  210a              MOVS     r1,#0xa
0010de  482e              LDR      r0,|L102.4504|
0010e0  f7fffffe          BL       uart_putchar
0010e4  210a              MOVS     r1,#0xa
0010e6  482c              LDR      r0,|L102.4504|
0010e8  f7fffffe          BL       uart_putchar
0010ec  210a              MOVS     r1,#0xa
0010ee  482a              LDR      r0,|L102.4504|
0010f0  f7fffffe          BL       uart_putchar
0010f4  210a              MOVS     r1,#0xa
0010f6  4828              LDR      r0,|L102.4504|
0010f8  f7fffffe          BL       uart_putchar
0010fc  210a              MOVS     r1,#0xa
0010fe  4826              LDR      r0,|L102.4504|
001100  f7fffffe          BL       uart_putchar
001104  210a              MOVS     r1,#0xa
001106  4824              LDR      r0,|L102.4504|
001108  f7fffffe          BL       uart_putchar
00110c  210a              MOVS     r1,#0xa
00110e  4822              LDR      r0,|L102.4504|
001110  f7fffffe          BL       uart_putchar
001114  210a              MOVS     r1,#0xa
001116  4820              LDR      r0,|L102.4504|
001118  f7fffffe          BL       uart_putchar
00111c  210a              MOVS     r1,#0xa
00111e  481e              LDR      r0,|L102.4504|
001120  f7fffffe          BL       uart_putchar
001124  210a              MOVS     r1,#0xa
001126  481c              LDR      r0,|L102.4504|
001128  f7fffffe          BL       uart_putchar
00112c  210a              MOVS     r1,#0xa
00112e  481a              LDR      r0,|L102.4504|
001130  f7fffffe          BL       uart_putchar
001134  210a              MOVS     r1,#0xa
001136  4818              LDR      r0,|L102.4504|
001138  f7fffffe          BL       uart_putchar
00113c  210a              MOVS     r1,#0xa
00113e  4816              LDR      r0,|L102.4504|
001140  f7fffffe          BL       uart_putchar
001144  210a              MOVS     r1,#0xa
001146  4814              LDR      r0,|L102.4504|
001148  f7fffffe          BL       uart_putchar
00114c  210a              MOVS     r1,#0xa
00114e  4812              LDR      r0,|L102.4504|
001150  f7fffffe          BL       uart_putchar
001154  210a              MOVS     r1,#0xa
001156  4810              LDR      r0,|L102.4504|
001158  f7fffffe          BL       uart_putchar
00115c  210a              MOVS     r1,#0xa
00115e  480e              LDR      r0,|L102.4504|
001160  f7fffffe          BL       uart_putchar
001164  210a              MOVS     r1,#0xa
001166  480c              LDR      r0,|L102.4504|
001168  f7fffffe          BL       uart_putchar
00116c  210a              MOVS     r1,#0xa
00116e  480a              LDR      r0,|L102.4504|
001170  f7fffffe          BL       uart_putchar
001174  210a              MOVS     r1,#0xa
001176  4808              LDR      r0,|L102.4504|
001178  f7fffffe          BL       uart_putchar
00117c  210a              MOVS     r1,#0xa
00117e  4806              LDR      r0,|L102.4504|
001180  f7fffffe          BL       uart_putchar
001184  210a              MOVS     r1,#0xa
001186  4804              LDR      r0,|L102.4504|
001188  f7fffffe          BL       uart_putchar
00118c  210a              MOVS     r1,#0xa
00118e  4802              LDR      r0,|L102.4504|
001190  f7fffffe          BL       uart_putchar
001194  210a              MOVS     r1,#0xa
001196  e019              B        |L102.4556|
                  |L102.4504|
                          DCD      0x4006b000
                  |L102.4508|
                          DCD      ||.conststring||+0x58
                  |L102.4512|
                          DCD      uart_string_gsm
                  |L102.4516|
                          DCD      ||.conststring||+0xd4
                  |L102.4520|
                          DCD      tout
                  |L102.4524|
                          DCD      data
                  |L102.4528|
                          DCD      at_
                  |L102.4532|
                          DCD      drive
                  |L102.4536|
                          DCD      ||.conststring||+0x364
                  |L102.4540|
                          DCD      ||.conststring||+0x8
                  |L102.4544|
                          DCD      ||.conststring||+0x30
                  |L102.4548|
                          DCD      ||k2||
                  |L102.4552|
                          DCD      k
                  |L102.4556|
0011cc  48fe              LDR      r0,|L102.5576|
0011ce  f7fffffe          BL       uart_putchar
0011d2  210a              MOVS     r1,#0xa
0011d4  48fc              LDR      r0,|L102.5576|
0011d6  f7fffffe          BL       uart_putchar
0011da  210a              MOVS     r1,#0xa
0011dc  48fa              LDR      r0,|L102.5576|
0011de  f7fffffe          BL       uart_putchar
;;;2327   									//memset(data,0,1000);
;;;2328   														//timer counts to wait for characters in uart 1 									
;;;2329   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0011e2  bf00              NOP      
                  |L102.4580|
0011e4  49f9              LDR      r1,|L102.5580|
0011e6  48fa              LDR      r0,|L102.5584|
0011e8  f7fffffe          BL       strstr
0011ec  2800              CMP      r0,#0
0011ee  d109              BNE      |L102.4612|
0011f0  49f8              LDR      r1,|L102.5588|
0011f2  48f7              LDR      r0,|L102.5584|
0011f4  f7fffffe          BL       strstr
0011f8  2800              CMP      r0,#0
0011fa  d103              BNE      |L102.4612|
0011fc  48f6              LDR      r0,|L102.5592|
0011fe  6800              LDR      r0,[r0,#0]  ; tout
001200  2805              CMP      r0,#5
001202  ddef              BLE      |L102.4580|
                  |L102.4612|
;;;2330   									{}
;;;2331   	                clear();
001204  f7fffffe          BL       clear
;;;2332   									memset(data,0,strlen(data));
001208  48f4              LDR      r0,|L102.5596|
00120a  f7fffffe          BL       strlen
00120e  4604              MOV      r4,r0
001210  4621              MOV      r1,r4
001212  48f2              LDR      r0,|L102.5596|
001214  f7fffffe          BL       __aeabi_memclr
;;;2333   									clear();
001218  f7fffffe          BL       clear
00121c  e51e              B        |L102.3164|
                  |L102.4638|
;;;2334   
;;;2335   								
;;;2336   			
;;;2337   			
;;;2338   			//log_it();
;;;2339   			}
;;;2340   
;;;2341   
;;;2342   }
;;;2343   
;;;2344   //if(notsentflag==0){cursorvaluene=cursor_val(sd_data);cursorvaluepr+=cursorvaluene;}
;;;2345   
;;;2346   
;;;2347   }
;;;2348   else{
;;;2349   	remove_all_chars(data, '\n', '\n');
00121e  220a              MOVS     r2,#0xa
001220  4611              MOV      r1,r2
001222  48ee              LDR      r0,|L102.5596|
001224  f7fffffe          BL       remove_all_chars
;;;2350   			strcat(data,"CH\n");	
001228  49ed              LDR      r1,|L102.5600|
00122a  48ec              LDR      r0,|L102.5596|
00122c  f7fffffe          BL       strcat
;;;2351   			
;;;2352   	
;;;2353   	  delay(100);
001230  2064              MOVS     r0,#0x64
001232  f7fffffe          BL       delay
;;;2354   		clear();//memset(uart_string_gsm,0,5000);
001236  f7fffffe          BL       clear
;;;2355   	
;;;2356   	memset(at_,0,100);
00123a  2164              MOVS     r1,#0x64
00123c  48e9              LDR      r0,|L102.5604|
00123e  f7fffffe          BL       __aeabi_memclr
;;;2357   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001242  48e6              LDR      r0,|L102.5596|
001244  f7fffffe          BL       strlen
001248  1c44              ADDS     r4,r0,#1
00124a  4623              MOV      r3,r4
00124c  4ae6              LDR      r2,|L102.5608|
00124e  49e7              LDR      r1,|L102.5612|
001250  48e4              LDR      r0,|L102.5604|
001252  f7fffffe          BL       __2sprintf
;;;2358   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001256  2005              MOVS     r0,#5
001258  4bde              LDR      r3,|L102.5588|
00125a  4ae5              LDR      r2,|L102.5616|
00125c  49e5              LDR      r1,|L102.5620|
00125e  9000              STR      r0,[sp,#0]
001260  48e0              LDR      r0,|L102.5604|
001262  f7fffffe          BL       send_SD
;;;2359   clear();	
001266  f7fffffe          BL       clear
;;;2360   									k2=0;									//string array counter for uart 1
00126a  2000              MOVS     r0,#0
00126c  49e2              LDR      r1,|L102.5624|
00126e  6008              STR      r0,[r1,#0]  ; k2
;;;2361   									tout=0;	
001270  49d9              LDR      r1,|L102.5592|
001272  6008              STR      r0,[r1,#0]  ; tout
;;;2362   		for(k=0;k<strlen(data);k++)
001274  49e1              LDR      r1,|L102.5628|
001276  6008              STR      r0,[r1,#0]  ; k
001278  e00b              B        |L102.4754|
                  |L102.4730|
;;;2363   		{
;;;2364   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00127a  48d8              LDR      r0,|L102.5596|
00127c  4adf              LDR      r2,|L102.5628|
00127e  6812              LDR      r2,[r2,#0]  ; k
001280  5c81              LDRB     r1,[r0,r2]
001282  48d1              LDR      r0,|L102.5576|
001284  f7fffffe          BL       uart_putchar
001288  48dc              LDR      r0,|L102.5628|
00128a  6800              LDR      r0,[r0,#0]            ;2362  ; k
00128c  1c40              ADDS     r0,r0,#1              ;2362
00128e  49db              LDR      r1,|L102.5628|
001290  6008              STR      r0,[r1,#0]            ;2362  ; k
                  |L102.4754|
001292  48d2              LDR      r0,|L102.5596|
001294  f7fffffe          BL       strlen
001298  49d8              LDR      r1,|L102.5628|
00129a  6809              LDR      r1,[r1,#0]            ;2362  ; k
00129c  4288              CMP      r0,r1                 ;2362
00129e  d8ec              BHI      |L102.4730|
;;;2365   		}	
;;;2366   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0012a0  210a              MOVS     r1,#0xa
0012a2  48c9              LDR      r0,|L102.5576|
0012a4  f7fffffe          BL       uart_putchar
0012a8  210a              MOVS     r1,#0xa
0012aa  48c7              LDR      r0,|L102.5576|
0012ac  f7fffffe          BL       uart_putchar
0012b0  210a              MOVS     r1,#0xa
0012b2  48c5              LDR      r0,|L102.5576|
0012b4  f7fffffe          BL       uart_putchar
0012b8  210a              MOVS     r1,#0xa
0012ba  48c3              LDR      r0,|L102.5576|
0012bc  f7fffffe          BL       uart_putchar
0012c0  210a              MOVS     r1,#0xa
0012c2  48c1              LDR      r0,|L102.5576|
0012c4  f7fffffe          BL       uart_putchar
0012c8  210a              MOVS     r1,#0xa
0012ca  48bf              LDR      r0,|L102.5576|
0012cc  f7fffffe          BL       uart_putchar
0012d0  210a              MOVS     r1,#0xa
0012d2  48bd              LDR      r0,|L102.5576|
0012d4  f7fffffe          BL       uart_putchar
0012d8  210a              MOVS     r1,#0xa
0012da  48bb              LDR      r0,|L102.5576|
0012dc  f7fffffe          BL       uart_putchar
0012e0  210a              MOVS     r1,#0xa
0012e2  48b9              LDR      r0,|L102.5576|
0012e4  f7fffffe          BL       uart_putchar
0012e8  210a              MOVS     r1,#0xa
0012ea  48b7              LDR      r0,|L102.5576|
0012ec  f7fffffe          BL       uart_putchar
0012f0  210a              MOVS     r1,#0xa
0012f2  48b5              LDR      r0,|L102.5576|
0012f4  f7fffffe          BL       uart_putchar
0012f8  210a              MOVS     r1,#0xa
0012fa  48b3              LDR      r0,|L102.5576|
0012fc  f7fffffe          BL       uart_putchar
001300  210a              MOVS     r1,#0xa
001302  48b1              LDR      r0,|L102.5576|
001304  f7fffffe          BL       uart_putchar
001308  210a              MOVS     r1,#0xa
00130a  48af              LDR      r0,|L102.5576|
00130c  f7fffffe          BL       uart_putchar
001310  210a              MOVS     r1,#0xa
001312  48ad              LDR      r0,|L102.5576|
001314  f7fffffe          BL       uart_putchar
001318  210a              MOVS     r1,#0xa
00131a  48ab              LDR      r0,|L102.5576|
00131c  f7fffffe          BL       uart_putchar
001320  210a              MOVS     r1,#0xa
001322  48a9              LDR      r0,|L102.5576|
001324  f7fffffe          BL       uart_putchar
001328  210a              MOVS     r1,#0xa
00132a  48a7              LDR      r0,|L102.5576|
00132c  f7fffffe          BL       uart_putchar
001330  210a              MOVS     r1,#0xa
001332  48a5              LDR      r0,|L102.5576|
001334  f7fffffe          BL       uart_putchar
001338  210a              MOVS     r1,#0xa
00133a  48a3              LDR      r0,|L102.5576|
00133c  f7fffffe          BL       uart_putchar
001340  210a              MOVS     r1,#0xa
001342  48a1              LDR      r0,|L102.5576|
001344  f7fffffe          BL       uart_putchar
001348  210a              MOVS     r1,#0xa
00134a  489f              LDR      r0,|L102.5576|
00134c  f7fffffe          BL       uart_putchar
001350  210a              MOVS     r1,#0xa
001352  489d              LDR      r0,|L102.5576|
001354  f7fffffe          BL       uart_putchar
001358  210a              MOVS     r1,#0xa
00135a  489b              LDR      r0,|L102.5576|
00135c  f7fffffe          BL       uart_putchar
001360  210a              MOVS     r1,#0xa
001362  4899              LDR      r0,|L102.5576|
001364  f7fffffe          BL       uart_putchar
001368  210a              MOVS     r1,#0xa
00136a  4897              LDR      r0,|L102.5576|
00136c  f7fffffe          BL       uart_putchar
001370  210a              MOVS     r1,#0xa
001372  4895              LDR      r0,|L102.5576|
001374  f7fffffe          BL       uart_putchar
001378  210a              MOVS     r1,#0xa
00137a  4893              LDR      r0,|L102.5576|
00137c  f7fffffe          BL       uart_putchar
001380  210a              MOVS     r1,#0xa
001382  4891              LDR      r0,|L102.5576|
001384  f7fffffe          BL       uart_putchar
001388  210a              MOVS     r1,#0xa
00138a  488f              LDR      r0,|L102.5576|
00138c  f7fffffe          BL       uart_putchar
001390  210a              MOVS     r1,#0xa
001392  488d              LDR      r0,|L102.5576|
001394  f7fffffe          BL       uart_putchar
001398  210a              MOVS     r1,#0xa
00139a  488b              LDR      r0,|L102.5576|
00139c  f7fffffe          BL       uart_putchar
0013a0  210a              MOVS     r1,#0xa
0013a2  4889              LDR      r0,|L102.5576|
0013a4  f7fffffe          BL       uart_putchar
0013a8  210a              MOVS     r1,#0xa
0013aa  4887              LDR      r0,|L102.5576|
0013ac  f7fffffe          BL       uart_putchar
0013b0  210a              MOVS     r1,#0xa
0013b2  4885              LDR      r0,|L102.5576|
0013b4  f7fffffe          BL       uart_putchar
0013b8  210a              MOVS     r1,#0xa
0013ba  4883              LDR      r0,|L102.5576|
0013bc  f7fffffe          BL       uart_putchar
0013c0  210a              MOVS     r1,#0xa
0013c2  4881              LDR      r0,|L102.5576|
0013c4  f7fffffe          BL       uart_putchar
0013c8  210a              MOVS     r1,#0xa
0013ca  487f              LDR      r0,|L102.5576|
0013cc  f7fffffe          BL       uart_putchar
0013d0  210a              MOVS     r1,#0xa
0013d2  487d              LDR      r0,|L102.5576|
0013d4  f7fffffe          BL       uart_putchar
0013d8  210a              MOVS     r1,#0xa
0013da  487b              LDR      r0,|L102.5576|
0013dc  f7fffffe          BL       uart_putchar
0013e0  210a              MOVS     r1,#0xa
0013e2  4879              LDR      r0,|L102.5576|
0013e4  f7fffffe          BL       uart_putchar
0013e8  210a              MOVS     r1,#0xa
0013ea  4877              LDR      r0,|L102.5576|
0013ec  f7fffffe          BL       uart_putchar
0013f0  210a              MOVS     r1,#0xa
0013f2  4875              LDR      r0,|L102.5576|
0013f4  f7fffffe          BL       uart_putchar
0013f8  210a              MOVS     r1,#0xa
0013fa  4873              LDR      r0,|L102.5576|
0013fc  f7fffffe          BL       uart_putchar
001400  210a              MOVS     r1,#0xa
001402  4871              LDR      r0,|L102.5576|
001404  f7fffffe          BL       uart_putchar
001408  210a              MOVS     r1,#0xa
00140a  486f              LDR      r0,|L102.5576|
00140c  f7fffffe          BL       uart_putchar
001410  210a              MOVS     r1,#0xa
001412  486d              LDR      r0,|L102.5576|
001414  f7fffffe          BL       uart_putchar
001418  210a              MOVS     r1,#0xa
00141a  486b              LDR      r0,|L102.5576|
00141c  f7fffffe          BL       uart_putchar
001420  210a              MOVS     r1,#0xa
001422  4869              LDR      r0,|L102.5576|
001424  f7fffffe          BL       uart_putchar
001428  210a              MOVS     r1,#0xa
00142a  4867              LDR      r0,|L102.5576|
00142c  f7fffffe          BL       uart_putchar
001430  210a              MOVS     r1,#0xa
001432  4865              LDR      r0,|L102.5576|
001434  f7fffffe          BL       uart_putchar
001438  210a              MOVS     r1,#0xa
00143a  4863              LDR      r0,|L102.5576|
00143c  f7fffffe          BL       uart_putchar
001440  210a              MOVS     r1,#0xa
001442  4861              LDR      r0,|L102.5576|
001444  f7fffffe          BL       uart_putchar
001448  210a              MOVS     r1,#0xa
00144a  485f              LDR      r0,|L102.5576|
00144c  f7fffffe          BL       uart_putchar
001450  210a              MOVS     r1,#0xa
001452  485d              LDR      r0,|L102.5576|
001454  f7fffffe          BL       uart_putchar
001458  210a              MOVS     r1,#0xa
00145a  485b              LDR      r0,|L102.5576|
00145c  f7fffffe          BL       uart_putchar
001460  210a              MOVS     r1,#0xa
001462  4859              LDR      r0,|L102.5576|
001464  f7fffffe          BL       uart_putchar
;;;2367   									//memset(data,0,1000);
;;;2368   														//timer counts to wait for characters in uart 1 									
;;;2369   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001468  bf00              NOP      
                  |L102.5226|
00146a  4958              LDR      r1,|L102.5580|
00146c  4858              LDR      r0,|L102.5584|
00146e  f7fffffe          BL       strstr
001472  2800              CMP      r0,#0
001474  d109              BNE      |L102.5258|
001476  4957              LDR      r1,|L102.5588|
001478  4855              LDR      r0,|L102.5584|
00147a  f7fffffe          BL       strstr
00147e  2800              CMP      r0,#0
001480  d103              BNE      |L102.5258|
001482  4855              LDR      r0,|L102.5592|
001484  6800              LDR      r0,[r0,#0]  ; tout
001486  2805              CMP      r0,#5
001488  ddef              BLE      |L102.5226|
                  |L102.5258|
;;;2370   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2371   									}
;;;2372   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00148a  f7fffffe          BL       clear
;;;2373   									//clear();
;;;2374   									memset(data,0,strlen(data));
00148e  4853              LDR      r0,|L102.5596|
001490  f7fffffe          BL       strlen
001494  4604              MOV      r4,r0
001496  4621              MOV      r1,r4
001498  4850              LDR      r0,|L102.5596|
00149a  f7fffffe          BL       __aeabi_memclr
;;;2375   									clear();
00149e  f7fffffe          BL       clear
;;;2376   
;;;2377   								
;;;2378   	
;;;2379   	
;;;2380   	
;;;2381   	//log_it();
;;;2382   			memset(data,0,strlen(data));
0014a2  484e              LDR      r0,|L102.5596|
0014a4  f7fffffe          BL       strlen
0014a8  4604              MOV      r4,r0
0014aa  4621              MOV      r1,r4
0014ac  484b              LDR      r0,|L102.5596|
0014ae  f7fffffe          BL       __aeabi_memclr
;;;2383   //*****************************tcp_initialization();************************************//
;;;2384   
;;;2385   	
;;;2386   msg_sim800(); 
0014b2  f7fffffe          BL       msg_sim800
;;;2387   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0014b6  2005              MOVS     r0,#5
0014b8  4b46              LDR      r3,|L102.5588|
0014ba  4a4d              LDR      r2,|L102.5616|
0014bc  4950              LDR      r1,|L102.5632|
0014be  9000              STR      r0,[sp,#0]
0014c0  4850              LDR      r0,|L102.5636|
0014c2  f7fffffe          BL       send_GSM
;;;2388   delay(100);
0014c6  2064              MOVS     r0,#0x64
0014c8  f7fffffe          BL       delay
;;;2389   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0014cc  2004              MOVS     r0,#4
0014ce  4b41              LDR      r3,|L102.5588|
0014d0  4a4d              LDR      r2,|L102.5640|
0014d2  494b              LDR      r1,|L102.5632|
0014d4  9000              STR      r0,[sp,#0]
0014d6  484d              LDR      r0,|L102.5644|
0014d8  f7fffffe          BL       send_GSM
;;;2390   GPS_COLLECT2();
0014dc  f7fffffe          BL       GPS_COLLECT2
;;;2391   strcat(data,"CH\n");		
0014e0  493f              LDR      r1,|L102.5600|
0014e2  483e              LDR      r0,|L102.5596|
0014e4  f7fffffe          BL       strcat
;;;2392   GPS_COLLECT2();
0014e8  f7fffffe          BL       GPS_COLLECT2
;;;2393   strcat(data,"CH\n");	
0014ec  493c              LDR      r1,|L102.5600|
0014ee  483b              LDR      r0,|L102.5596|
0014f0  f7fffffe          BL       strcat
;;;2394   GPS_COLLECT2();
0014f4  f7fffffe          BL       GPS_COLLECT2
;;;2395   strcat(data,"CH\n");
0014f8  4939              LDR      r1,|L102.5600|
0014fa  4838              LDR      r0,|L102.5596|
0014fc  f7fffffe          BL       strcat
;;;2396   cond201=(strstr(uart_string_gsm, "OK"));
001500  493f              LDR      r1,|L102.5632|
001502  4833              LDR      r0,|L102.5584|
001504  f7fffffe          BL       strstr
001508  4941              LDR      r1,|L102.5648|
00150a  6008              STR      r0,[r1,#0]  ; cond201
;;;2397   cond200=(strstr(uart_string_gsm, "ERROR"));
00150c  4931              LDR      r1,|L102.5588|
00150e  4830              LDR      r0,|L102.5584|
001510  f7fffffe          BL       strstr
001514  493f              LDR      r1,|L102.5652|
001516  6008              STR      r0,[r1,#0]  ; cond200
;;;2398   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
001518  483d              LDR      r0,|L102.5648|
00151a  6800              LDR      r0,[r0,#0]  ; cond201
00151c  2800              CMP      r0,#0
00151e  d101              BNE      |L102.5412|
001520  2001              MOVS     r0,#1
001522  e000              B        |L102.5414|
                  |L102.5412|
001524  2000              MOVS     r0,#0
                  |L102.5414|
001526  2800              CMP      r0,#0
                  |L102.5416|
001528  d078              BEQ      |L102.5660|
00152a  483a              LDR      r0,|L102.5652|
00152c  6800              LDR      r0,[r0,#0]  ; cond200
00152e  2800              CMP      r0,#0
001530  d101              BNE      |L102.5430|
001532  2001              MOVS     r0,#1
001534  e000              B        |L102.5432|
                  |L102.5430|
001536  2000              MOVS     r0,#0
                  |L102.5432|
001538  2800              CMP      r0,#0
00153a  d0f5              BEQ      |L102.5416|
00153c  4836              LDR      r0,|L102.5656|
00153e  6800              LDR      r0,[r0,#0]  ; sleep_flag
001540  2801              CMP      r0,#1
001542  d0f1              BEQ      |L102.5416|
;;;2399   {
;;;2400   delay(100);
001544  2064              MOVS     r0,#0x64
001546  f7fffffe          BL       delay
;;;2401   clear();//memset(uart_string_gsm,0,5000);
00154a  f7fffffe          BL       clear
;;;2402   memset(at_,0,100);
00154e  2164              MOVS     r1,#0x64
001550  4824              LDR      r0,|L102.5604|
001552  f7fffffe          BL       __aeabi_memclr
;;;2403   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001556  4821              LDR      r0,|L102.5596|
001558  f7fffffe          BL       strlen
00155c  1c44              ADDS     r4,r0,#1
00155e  4623              MOV      r3,r4
001560  4a21              LDR      r2,|L102.5608|
001562  4922              LDR      r1,|L102.5612|
001564  481f              LDR      r0,|L102.5604|
001566  f7fffffe          BL       __2sprintf
;;;2404   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00156a  2005              MOVS     r0,#5
00156c  4b19              LDR      r3,|L102.5588|
00156e  4a20              LDR      r2,|L102.5616|
001570  4920              LDR      r1,|L102.5620|
001572  9000              STR      r0,[sp,#0]
001574  481b              LDR      r0,|L102.5604|
001576  f7fffffe          BL       send_SD
;;;2405   clear();	
00157a  f7fffffe          BL       clear
;;;2406   k2=0;									//string array counter for uart 1
00157e  2000              MOVS     r0,#0
001580  491d              LDR      r1,|L102.5624|
001582  6008              STR      r0,[r1,#0]  ; k2
;;;2407   tout=0;	
001584  4914              LDR      r1,|L102.5592|
001586  6008              STR      r0,[r1,#0]  ; tout
;;;2408   for(k=0;k<strlen(data);k++)
001588  491c              LDR      r1,|L102.5628|
00158a  6008              STR      r0,[r1,#0]  ; k
00158c  e00b              B        |L102.5542|
                  |L102.5518|
;;;2409   {
;;;2410   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00158e  4813              LDR      r0,|L102.5596|
001590  4a1a              LDR      r2,|L102.5628|
001592  6812              LDR      r2,[r2,#0]  ; k
001594  5c81              LDRB     r1,[r0,r2]
001596  480c              LDR      r0,|L102.5576|
001598  f7fffffe          BL       uart_putchar
00159c  4817              LDR      r0,|L102.5628|
00159e  6800              LDR      r0,[r0,#0]            ;2408  ; k
0015a0  1c40              ADDS     r0,r0,#1              ;2408
0015a2  4916              LDR      r1,|L102.5628|
0015a4  6008              STR      r0,[r1,#0]            ;2408  ; k
                  |L102.5542|
0015a6  480d              LDR      r0,|L102.5596|
0015a8  f7fffffe          BL       strlen
0015ac  4913              LDR      r1,|L102.5628|
0015ae  6809              LDR      r1,[r1,#0]            ;2408  ; k
0015b0  4288              CMP      r0,r1                 ;2408
0015b2  d8ec              BHI      |L102.5518|
;;;2411   }	
;;;2412   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0015b4  210a              MOVS     r1,#0xa
0015b6  4804              LDR      r0,|L102.5576|
0015b8  f7fffffe          BL       uart_putchar
0015bc  210a              MOVS     r1,#0xa
0015be  4802              LDR      r0,|L102.5576|
0015c0  f7fffffe          BL       uart_putchar
0015c4  210a              MOVS     r1,#0xa
0015c6  e02a              B        |L102.5662|
                  |L102.5576|
                          DCD      0x4006b000
                  |L102.5580|
                          DCD      ||.conststring||+0x58
                  |L102.5584|
                          DCD      uart_string_gsm
                  |L102.5588|
                          DCD      ||.conststring||+0xd4
                  |L102.5592|
                          DCD      tout
                  |L102.5596|
                          DCD      data
                  |L102.5600|
                          DCD      ||.conststring||+0x360
                  |L102.5604|
                          DCD      at_
                  |L102.5608|
                          DCD      drive
                  |L102.5612|
                          DCD      ||.conststring||+0x364
                  |L102.5616|
                          DCD      ||.conststring||+0x8
                  |L102.5620|
                          DCD      ||.conststring||+0x30
                  |L102.5624|
                          DCD      ||k2||
                  |L102.5628|
                          DCD      k
                  |L102.5632|
                          DCD      ||.conststring||+0x10
                  |L102.5636|
                          DCD      ||.conststring||+0x4c8
                  |L102.5640|
                          DCD      ||.conststring||+0x4d8
                  |L102.5644|
                          DCD      ||.conststring||+0x4ec
                  |L102.5648|
                          DCD      cond201
                  |L102.5652|
                          DCD      cond200
                  |L102.5656|
                          DCD      sleep_flag
                  |L102.5660|
00161c  e103              B        |L102.6182|
                  |L102.5662|
00161e  48fe              LDR      r0,|L102.6680|
001620  f7fffffe          BL       uart_putchar
001624  210a              MOVS     r1,#0xa
001626  48fc              LDR      r0,|L102.6680|
001628  f7fffffe          BL       uart_putchar
00162c  210a              MOVS     r1,#0xa
00162e  48fa              LDR      r0,|L102.6680|
001630  f7fffffe          BL       uart_putchar
001634  210a              MOVS     r1,#0xa
001636  48f8              LDR      r0,|L102.6680|
001638  f7fffffe          BL       uart_putchar
00163c  210a              MOVS     r1,#0xa
00163e  48f6              LDR      r0,|L102.6680|
001640  f7fffffe          BL       uart_putchar
001644  210a              MOVS     r1,#0xa
001646  48f4              LDR      r0,|L102.6680|
001648  f7fffffe          BL       uart_putchar
00164c  210a              MOVS     r1,#0xa
00164e  48f2              LDR      r0,|L102.6680|
001650  f7fffffe          BL       uart_putchar
001654  210a              MOVS     r1,#0xa
001656  48f0              LDR      r0,|L102.6680|
001658  f7fffffe          BL       uart_putchar
00165c  210a              MOVS     r1,#0xa
00165e  48ee              LDR      r0,|L102.6680|
001660  f7fffffe          BL       uart_putchar
001664  210a              MOVS     r1,#0xa
001666  48ec              LDR      r0,|L102.6680|
001668  f7fffffe          BL       uart_putchar
00166c  210a              MOVS     r1,#0xa
00166e  48ea              LDR      r0,|L102.6680|
001670  f7fffffe          BL       uart_putchar
001674  210a              MOVS     r1,#0xa
001676  48e8              LDR      r0,|L102.6680|
001678  f7fffffe          BL       uart_putchar
00167c  210a              MOVS     r1,#0xa
00167e  48e6              LDR      r0,|L102.6680|
001680  f7fffffe          BL       uart_putchar
001684  210a              MOVS     r1,#0xa
001686  48e4              LDR      r0,|L102.6680|
001688  f7fffffe          BL       uart_putchar
00168c  210a              MOVS     r1,#0xa
00168e  48e2              LDR      r0,|L102.6680|
001690  f7fffffe          BL       uart_putchar
001694  210a              MOVS     r1,#0xa
001696  48e0              LDR      r0,|L102.6680|
001698  f7fffffe          BL       uart_putchar
00169c  210a              MOVS     r1,#0xa
00169e  48de              LDR      r0,|L102.6680|
0016a0  f7fffffe          BL       uart_putchar
0016a4  210a              MOVS     r1,#0xa
0016a6  48dc              LDR      r0,|L102.6680|
0016a8  f7fffffe          BL       uart_putchar
0016ac  210a              MOVS     r1,#0xa
0016ae  48da              LDR      r0,|L102.6680|
0016b0  f7fffffe          BL       uart_putchar
0016b4  210a              MOVS     r1,#0xa
0016b6  48d8              LDR      r0,|L102.6680|
0016b8  f7fffffe          BL       uart_putchar
0016bc  210a              MOVS     r1,#0xa
0016be  48d6              LDR      r0,|L102.6680|
0016c0  f7fffffe          BL       uart_putchar
0016c4  210a              MOVS     r1,#0xa
0016c6  48d4              LDR      r0,|L102.6680|
0016c8  f7fffffe          BL       uart_putchar
0016cc  210a              MOVS     r1,#0xa
0016ce  48d2              LDR      r0,|L102.6680|
0016d0  f7fffffe          BL       uart_putchar
0016d4  210a              MOVS     r1,#0xa
0016d6  48d0              LDR      r0,|L102.6680|
0016d8  f7fffffe          BL       uart_putchar
0016dc  210a              MOVS     r1,#0xa
0016de  48ce              LDR      r0,|L102.6680|
0016e0  f7fffffe          BL       uart_putchar
0016e4  210a              MOVS     r1,#0xa
0016e6  48cc              LDR      r0,|L102.6680|
0016e8  f7fffffe          BL       uart_putchar
0016ec  210a              MOVS     r1,#0xa
0016ee  48ca              LDR      r0,|L102.6680|
0016f0  f7fffffe          BL       uart_putchar
0016f4  210a              MOVS     r1,#0xa
0016f6  48c8              LDR      r0,|L102.6680|
0016f8  f7fffffe          BL       uart_putchar
0016fc  210a              MOVS     r1,#0xa
0016fe  48c6              LDR      r0,|L102.6680|
001700  f7fffffe          BL       uart_putchar
001704  210a              MOVS     r1,#0xa
001706  48c4              LDR      r0,|L102.6680|
001708  f7fffffe          BL       uart_putchar
00170c  210a              MOVS     r1,#0xa
00170e  48c2              LDR      r0,|L102.6680|
001710  f7fffffe          BL       uart_putchar
001714  210a              MOVS     r1,#0xa
001716  48c0              LDR      r0,|L102.6680|
001718  f7fffffe          BL       uart_putchar
00171c  210a              MOVS     r1,#0xa
00171e  48be              LDR      r0,|L102.6680|
001720  f7fffffe          BL       uart_putchar
001724  210a              MOVS     r1,#0xa
001726  48bc              LDR      r0,|L102.6680|
001728  f7fffffe          BL       uart_putchar
00172c  210a              MOVS     r1,#0xa
00172e  48ba              LDR      r0,|L102.6680|
001730  f7fffffe          BL       uart_putchar
001734  210a              MOVS     r1,#0xa
001736  48b8              LDR      r0,|L102.6680|
001738  f7fffffe          BL       uart_putchar
00173c  210a              MOVS     r1,#0xa
00173e  48b6              LDR      r0,|L102.6680|
001740  f7fffffe          BL       uart_putchar
001744  210a              MOVS     r1,#0xa
001746  48b4              LDR      r0,|L102.6680|
001748  f7fffffe          BL       uart_putchar
00174c  210a              MOVS     r1,#0xa
00174e  48b2              LDR      r0,|L102.6680|
001750  f7fffffe          BL       uart_putchar
001754  210a              MOVS     r1,#0xa
001756  48b0              LDR      r0,|L102.6680|
001758  f7fffffe          BL       uart_putchar
00175c  210a              MOVS     r1,#0xa
00175e  48ae              LDR      r0,|L102.6680|
001760  f7fffffe          BL       uart_putchar
001764  210a              MOVS     r1,#0xa
001766  48ac              LDR      r0,|L102.6680|
001768  f7fffffe          BL       uart_putchar
00176c  210a              MOVS     r1,#0xa
00176e  48aa              LDR      r0,|L102.6680|
001770  f7fffffe          BL       uart_putchar
001774  210a              MOVS     r1,#0xa
001776  48a8              LDR      r0,|L102.6680|
001778  f7fffffe          BL       uart_putchar
00177c  210a              MOVS     r1,#0xa
00177e  48a6              LDR      r0,|L102.6680|
001780  f7fffffe          BL       uart_putchar
001784  210a              MOVS     r1,#0xa
001786  48a4              LDR      r0,|L102.6680|
001788  f7fffffe          BL       uart_putchar
00178c  210a              MOVS     r1,#0xa
00178e  48a2              LDR      r0,|L102.6680|
001790  f7fffffe          BL       uart_putchar
001794  210a              MOVS     r1,#0xa
001796  48a0              LDR      r0,|L102.6680|
001798  f7fffffe          BL       uart_putchar
00179c  210a              MOVS     r1,#0xa
00179e  489e              LDR      r0,|L102.6680|
0017a0  f7fffffe          BL       uart_putchar
0017a4  210a              MOVS     r1,#0xa
0017a6  489c              LDR      r0,|L102.6680|
0017a8  f7fffffe          BL       uart_putchar
0017ac  210a              MOVS     r1,#0xa
0017ae  489a              LDR      r0,|L102.6680|
0017b0  f7fffffe          BL       uart_putchar
0017b4  210a              MOVS     r1,#0xa
0017b6  4898              LDR      r0,|L102.6680|
0017b8  f7fffffe          BL       uart_putchar
0017bc  210a              MOVS     r1,#0xa
0017be  4896              LDR      r0,|L102.6680|
0017c0  f7fffffe          BL       uart_putchar
0017c4  210a              MOVS     r1,#0xa
0017c6  4894              LDR      r0,|L102.6680|
0017c8  f7fffffe          BL       uart_putchar
0017cc  210a              MOVS     r1,#0xa
0017ce  4892              LDR      r0,|L102.6680|
0017d0  f7fffffe          BL       uart_putchar
;;;2413   									//memset(data,0,1000);
;;;2414   														//timer counts to wait for characters in uart 1 									
;;;2415   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0017d4  bf00              NOP      
                  |L102.6102|
0017d6  4991              LDR      r1,|L102.6684|
0017d8  4891              LDR      r0,|L102.6688|
0017da  f7fffffe          BL       strstr
0017de  2800              CMP      r0,#0
0017e0  d109              BNE      |L102.6134|
0017e2  4990              LDR      r1,|L102.6692|
0017e4  488e              LDR      r0,|L102.6688|
0017e6  f7fffffe          BL       strstr
0017ea  2800              CMP      r0,#0
0017ec  d103              BNE      |L102.6134|
0017ee  488e              LDR      r0,|L102.6696|
0017f0  6800              LDR      r0,[r0,#0]  ; tout
0017f2  2805              CMP      r0,#5
0017f4  ddef              BLE      |L102.6102|
                  |L102.6134|
;;;2416   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2417   									}
;;;2418   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0017f6  f7fffffe          BL       clear
;;;2419   									//clear();
;;;2420   									memset(data,0,strlen(data));
0017fa  488c              LDR      r0,|L102.6700|
0017fc  f7fffffe          BL       strlen
001800  4604              MOV      r4,r0
001802  4621              MOV      r1,r4
001804  4889              LDR      r0,|L102.6700|
001806  f7fffffe          BL       __aeabi_memclr
;;;2421   									clear();
00180a  f7fffffe          BL       clear
;;;2422   									RESET_OFF;delay(100);
00180e  2020              MOVS     r0,#0x20
001810  4987              LDR      r1,|L102.6704|
001812  6088              STR      r0,[r1,#8]
001814  2064              MOVS     r0,#0x64
001816  f7fffffe          BL       delay
;;;2423   									RESET_ON;delay(100);		
00181a  2020              MOVS     r0,#0x20
00181c  4984              LDR      r1,|L102.6704|
00181e  6048              STR      r0,[r1,#4]
001820  2064              MOVS     r0,#0x64
001822  f7fffffe          BL       delay
                  |L102.6182|
;;;2424   }
;;;2425   	
;;;2426   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001826  2004              MOVS     r0,#4
001828  4b82              LDR      r3,|L102.6708|
00182a  4a83              LDR      r2,|L102.6712|
00182c  4983              LDR      r1,|L102.6716|
00182e  9000              STR      r0,[sp,#0]
001830  4883              LDR      r0,|L102.6720|
001832  f7fffffe          BL       send_GSM
;;;2427   GPS_COLLECT2();
001836  f7fffffe          BL       GPS_COLLECT2
;;;2428   strcat(data,"CH\n");	
00183a  4982              LDR      r1,|L102.6724|
00183c  487b              LDR      r0,|L102.6700|
00183e  f7fffffe          BL       strcat
;;;2429   memset(at_,0,100);
001842  2164              MOVS     r1,#0x64
001844  4880              LDR      r0,|L102.6728|
001846  f7fffffe          BL       __aeabi_memclr
;;;2430   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
00184a  4a80              LDR      r2,|L102.6732|
00184c  4980              LDR      r1,|L102.6736|
00184e  487e              LDR      r0,|L102.6728|
001850  f7fffffe          BL       __2sprintf
;;;2431   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
001854  487f              LDR      r0,|L102.6740|
001856  6800              LDR      r0,[r0,#0]  ; tmeout
001858  4b76              LDR      r3,|L102.6708|
00185a  e000              B        |L102.6238|
                  |L102.6236|
00185c  e1a8              B        |L102.7088|
                  |L102.6238|
00185e  4a76              LDR      r2,|L102.6712|
001860  4976              LDR      r1,|L102.6716|
001862  9000              STR      r0,[sp,#0]
001864  4878              LDR      r0,|L102.6728|
001866  f7fffffe          BL       send_GSM
;;;2432   msg_sim800(); 
00186a  f7fffffe          BL       msg_sim800
;;;2433   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
00186e  2004              MOVS     r0,#4
001870  4b79              LDR      r3,|L102.6744|
001872  4a71              LDR      r2,|L102.6712|
001874  4971              LDR      r1,|L102.6716|
001876  9000              STR      r0,[sp,#0]
001878  4878              LDR      r0,|L102.6748|
00187a  f7fffffe          BL       send_GSM
;;;2434   GPS_COLLECT2();
00187e  f7fffffe          BL       GPS_COLLECT2
;;;2435   strcat(data,"CH\n");	
001882  4970              LDR      r1,|L102.6724|
001884  4869              LDR      r0,|L102.6700|
001886  f7fffffe          BL       strcat
;;;2436   GPS_COLLECT2();
00188a  f7fffffe          BL       GPS_COLLECT2
;;;2437   strcat(data,"CH\n");	
00188e  496d              LDR      r1,|L102.6724|
001890  4866              LDR      r0,|L102.6700|
001892  f7fffffe          BL       strcat
;;;2438   
;;;2439   
;;;2440   msg_sim800(); 
001896  f7fffffe          BL       msg_sim800
;;;2441   GPS_COLLECT2();
00189a  f7fffffe          BL       GPS_COLLECT2
;;;2442   strcat(data,"CH\n");	
00189e  4969              LDR      r1,|L102.6724|
0018a0  4862              LDR      r0,|L102.6700|
0018a2  f7fffffe          BL       strcat
;;;2443   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0018a6  f7fffffe          BL       clear
0018aa  486d              LDR      r0,|L102.6752|
0018ac  f7fffffe          BL       send_modem
0018b0  f7fffffe          BL       clear
;;;2444   					delay(20);
0018b4  2014              MOVS     r0,#0x14
0018b6  f7fffffe          BL       delay
;;;2445   
;;;2446   
;;;2447   msg_sim800(); 
0018ba  f7fffffe          BL       msg_sim800
;;;2448   
;;;2449   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0018be  4b69              LDR      r3,|L102.6756|
0018c0  4a69              LDR      r2,|L102.6760|
0018c2  496a              LDR      r1,|L102.6764|
0018c4  4860              LDR      r0,|L102.6728|
0018c6  f7fffffe          BL       __2sprintf
;;;2450   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0018ca  4862              LDR      r0,|L102.6740|
0018cc  6800              LDR      r0,[r0,#0]  ; tmeout
0018ce  4b59              LDR      r3,|L102.6708|
0018d0  4a54              LDR      r2,|L102.6692|
0018d2  4967              LDR      r1,|L102.6768|
0018d4  9000              STR      r0,[sp,#0]
0018d6  485c              LDR      r0,|L102.6728|
0018d8  f7fffffe          BL       send_GSM
;;;2451   						clear();
0018dc  f7fffffe          BL       clear
;;;2452   						
;;;2453   						
;;;2454   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
0018e0  485c              LDR      r0,|L102.6740|
0018e2  6800              LDR      r0,[r0,#0]  ; tmeout
0018e4  4b63              LDR      r3,|L102.6772|
0018e6  4a4f              LDR      r2,|L102.6692|
0018e8  4963              LDR      r1,|L102.6776|
0018ea  9000              STR      r0,[sp,#0]
0018ec  4863              LDR      r0,|L102.6780|
0018ee  f7fffffe          BL       send_GSM
;;;2455   //*****************************tcp_initialization ends**********************************//		
;;;2456   
;;;2457   			if(mystrstr(uart_string_gsm,'>')){
0018f2  213e              MOVS     r1,#0x3e
0018f4  484a              LDR      r0,|L102.6688|
0018f6  f7fffffe          BL       mystrstr
0018fa  2800              CMP      r0,#0
0018fc  d07e              BEQ      |L102.6652|
;;;2458   									clear();
0018fe  f7fffffe          BL       clear
;;;2459   									memset(uart_string_gsm,0,5000);
001902  495f              LDR      r1,|L102.6784|
001904  4846              LDR      r0,|L102.6688|
001906  f7fffffe          BL       __aeabi_memclr
;;;2460   									qwe=strlen(data);
00190a  4848              LDR      r0,|L102.6700|
00190c  f7fffffe          BL       strlen
001910  495c              LDR      r1,|L102.6788|
001912  6008              STR      r0,[r1,#0]  ; qwe
;;;2461   									tout=0;
001914  2000              MOVS     r0,#0
001916  4944              LDR      r1,|L102.6696|
001918  6008              STR      r0,[r1,#0]  ; tout
;;;2462   									k2=0;
00191a  495b              LDR      r1,|L102.6792|
00191c  6008              STR      r0,[r1,#0]  ; k2
;;;2463   									for(k=0;k<(qwe);k++)
00191e  495b              LDR      r1,|L102.6796|
001920  6008              STR      r0,[r1,#0]  ; k
001922  e00b              B        |L102.6460|
                  |L102.6436|
;;;2464   									{
;;;2465   										uart_putchar(UART1_BASE_PTR, data[k]);
001924  4841              LDR      r0,|L102.6700|
001926  4a59              LDR      r2,|L102.6796|
001928  6812              LDR      r2,[r2,#0]  ; k
00192a  5c81              LDRB     r1,[r0,r2]
00192c  483a              LDR      r0,|L102.6680|
00192e  f7fffffe          BL       uart_putchar
001932  4856              LDR      r0,|L102.6796|
001934  6800              LDR      r0,[r0,#0]            ;2463  ; k
001936  1c40              ADDS     r0,r0,#1              ;2463
001938  4954              LDR      r1,|L102.6796|
00193a  6008              STR      r0,[r1,#0]            ;2463  ; k
                  |L102.6460|
00193c  4853              LDR      r0,|L102.6796|
00193e  6800              LDR      r0,[r0,#0]            ;2463  ; k
001940  4950              LDR      r1,|L102.6788|
001942  6809              LDR      r1,[r1,#0]            ;2463  ; qwe
001944  4288              CMP      r0,r1                 ;2463
001946  dbed              BLT      |L102.6436|
;;;2466   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
001948  210a              MOVS     r1,#0xa
00194a  4833              LDR      r0,|L102.6680|
00194c  f7fffffe          BL       uart_putchar
001950  211a              MOVS     r1,#0x1a
001952  4831              LDR      r0,|L102.6680|
001954  f7fffffe          BL       uart_putchar
001958  211a              MOVS     r1,#0x1a
00195a  482f              LDR      r0,|L102.6680|
00195c  f7fffffe          BL       uart_putchar
001960  211a              MOVS     r1,#0x1a
001962  482d              LDR      r0,|L102.6680|
001964  f7fffffe          BL       uart_putchar
001968  211a              MOVS     r1,#0x1a
00196a  482b              LDR      r0,|L102.6680|
00196c  f7fffffe          BL       uart_putchar
001970  211a              MOVS     r1,#0x1a
001972  4829              LDR      r0,|L102.6680|
001974  f7fffffe          BL       uart_putchar
001978  211a              MOVS     r1,#0x1a
00197a  4827              LDR      r0,|L102.6680|
00197c  f7fffffe          BL       uart_putchar
;;;2467   															do
001980  bf00              NOP      
                  |L102.6530|
;;;2468   																{q1=strstr(uart_string_gsm,"SEND OK");
001982  4943              LDR      r1,|L102.6800|
001984  4826              LDR      r0,|L102.6688|
001986  f7fffffe          BL       strstr
00198a  4942              LDR      r1,|L102.6804|
00198c  6008              STR      r0,[r1,#0]  ; q1
;;;2469   																	q2=strstr(uart_string_gsm, "ERROR");
00198e  4925              LDR      r1,|L102.6692|
001990  4823              LDR      r0,|L102.6688|
001992  f7fffffe          BL       strstr
001996  4940              LDR      r1,|L102.6808|
001998  6008              STR      r0,[r1,#0]  ; q2
;;;2470   																		q3=strstr(uart_string_gsm, "FAIL");	
00199a  4940              LDR      r1,|L102.6812|
00199c  4820              LDR      r0,|L102.6688|
00199e  f7fffffe          BL       strstr
0019a2  493f              LDR      r1,|L102.6816|
0019a4  6008              STR      r0,[r1,#0]  ; q3
;;;2471   																			q4=strstr(uart_string_gsm, "DEACT");	
0019a6  492c              LDR      r1,|L102.6744|
0019a8  481d              LDR      r0,|L102.6688|
0019aa  f7fffffe          BL       strstr
0019ae  493d              LDR      r1,|L102.6820|
0019b0  6008              STR      r0,[r1,#0]  ; q4
;;;2472   																	
;;;2473   																}while(!(q1 || q2 || q3 || q4 || (tout > 7) ) );
0019b2  4838              LDR      r0,|L102.6804|
0019b4  6800              LDR      r0,[r0,#0]  ; q1
0019b6  2800              CMP      r0,#0
0019b8  d10f              BNE      |L102.6618|
0019ba  4837              LDR      r0,|L102.6808|
0019bc  6800              LDR      r0,[r0,#0]  ; q2
0019be  2800              CMP      r0,#0
0019c0  d10b              BNE      |L102.6618|
0019c2  4837              LDR      r0,|L102.6816|
0019c4  6800              LDR      r0,[r0,#0]  ; q3
0019c6  2800              CMP      r0,#0
0019c8  d107              BNE      |L102.6618|
0019ca  4608              MOV      r0,r1
0019cc  6800              LDR      r0,[r0,#0]  ; q4
0019ce  2800              CMP      r0,#0
0019d0  d103              BNE      |L102.6618|
0019d2  4815              LDR      r0,|L102.6696|
0019d4  6800              LDR      r0,[r0,#0]  ; tout
0019d6  2807              CMP      r0,#7
0019d8  ddd3              BLE      |L102.6530|
                  |L102.6618|
;;;2474   															
;;;2475   																			delay(10);clear();
0019da  200a              MOVS     r0,#0xa
0019dc  f7fffffe          BL       delay
0019e0  f7fffffe          BL       clear
;;;2476   														uart_putchar(UART1_BASE_PTR,0x1A);
0019e4  211a              MOVS     r1,#0x1a
0019e6  480c              LDR      r0,|L102.6680|
0019e8  f7fffffe          BL       uart_putchar
;;;2477   												delay(10);
0019ec  200a              MOVS     r0,#0xa
0019ee  f7fffffe          BL       delay
;;;2478   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0019f2  211a              MOVS     r1,#0x1a
0019f4  4808              LDR      r0,|L102.6680|
0019f6  f7fffffe          BL       uart_putchar
0019fa  e000              B        |L102.6654|
                  |L102.6652|
0019fc  e195              B        |L102.7466|
                  |L102.6654|
0019fe  211a              MOVS     r1,#0x1a
001a00  4805              LDR      r0,|L102.6680|
001a02  f7fffffe          BL       uart_putchar
001a06  211a              MOVS     r1,#0x1a
001a08  4803              LDR      r0,|L102.6680|
001a0a  f7fffffe          BL       uart_putchar
;;;2479   delay(20);
001a0e  2014              MOVS     r0,#0x14
001a10  f7fffffe          BL       delay
;;;2480   if(!strstr(uart_string_gsm,"SEND OK")){
001a14  491e              LDR      r1,|L102.6800|
001a16  e047              B        |L102.6824|
                  |L102.6680|
                          DCD      0x4006b000
                  |L102.6684|
                          DCD      ||.conststring||+0x58
                  |L102.6688|
                          DCD      uart_string_gsm
                  |L102.6692|
                          DCD      ||.conststring||+0xd4
                  |L102.6696|
                          DCD      tout
                  |L102.6700|
                          DCD      data
                  |L102.6704|
                          DCD      0x400ff080
                  |L102.6708|
                          DCD      ||.conststring||
                  |L102.6712|
                          DCD      ||.conststring||+0x8
                  |L102.6716|
                          DCD      ||.conststring||+0x10
                  |L102.6720|
                          DCD      ||.conststring||+0x4fc
                  |L102.6724|
                          DCD      ||.conststring||+0x360
                  |L102.6728|
                          DCD      at_
                  |L102.6732|
                          DCD      apn
                  |L102.6736|
                          DCD      ||.conststring||+0x50c
                  |L102.6740|
                          DCD      tmeout
                  |L102.6744|
                          DCD      ||.conststring||+0x478
                  |L102.6748|
                          DCD      ||.conststring||+0x520
                  |L102.6752|
                          DCD      ||.conststring||+0x530
                  |L102.6756|
                          DCD      port
                  |L102.6760|
                          DCD      ||ip||
                  |L102.6764|
                          DCD      ||.conststring||+0x540
                  |L102.6768|
                          DCD      ||.conststring||+0x4b0
                  |L102.6772|
                          DCD      ||.conststring||+0x560
                  |L102.6776|
                          DCD      ||.conststring||+0x30
                  |L102.6780|
                          DCD      ||.conststring||+0x4b8
                  |L102.6784|
                          DCD      0x00001388
                  |L102.6788|
                          DCD      qwe
                  |L102.6792|
                          DCD      ||k2||
                  |L102.6796|
                          DCD      k
                  |L102.6800|
                          DCD      ||.conststring||+0x468
                  |L102.6804|
                          DCD      ||q1||
                  |L102.6808|
                          DCD      ||q2||
                  |L102.6812|
                          DCD      ||.conststring||+0x470
                  |L102.6816|
                          DCD      ||q3||
                  |L102.6820|
                          DCD      ||q4||
                  |L102.6824|
001aa8  48fe              LDR      r0,|L102.7844|
001aaa  f7fffffe          BL       strstr
001aae  2800              CMP      r0,#0
001ab0  d17e              BNE      |L102.7088|
;;;2481   
;;;2482   
;;;2483   	delay(100);
001ab2  2064              MOVS     r0,#0x64
001ab4  f7fffffe          BL       delay
;;;2484   		clear();//memset(uart_string_gsm,0,5000);
001ab8  f7fffffe          BL       clear
;;;2485   	
;;;2486   	memset(at_,0,100);
001abc  2164              MOVS     r1,#0x64
001abe  48fa              LDR      r0,|L102.7848|
001ac0  f7fffffe          BL       __aeabi_memclr
;;;2487   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001ac4  48f9              LDR      r0,|L102.7852|
001ac6  f7fffffe          BL       strlen
001aca  1c44              ADDS     r4,r0,#1
001acc  4623              MOV      r3,r4
001ace  4af8              LDR      r2,|L102.7856|
001ad0  49f8              LDR      r1,|L102.7860|
001ad2  48f5              LDR      r0,|L102.7848|
001ad4  f7fffffe          BL       __2sprintf
;;;2488   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001ad8  2005              MOVS     r0,#5
001ada  4bf7              LDR      r3,|L102.7864|
001adc  4af7              LDR      r2,|L102.7868|
001ade  49f8              LDR      r1,|L102.7872|
001ae0  9000              STR      r0,[sp,#0]
001ae2  48f1              LDR      r0,|L102.7848|
001ae4  f7fffffe          BL       send_SD
;;;2489   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2490   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2491   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2492   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2493   //	}
;;;2494   	
;;;2495   clear();	
001ae8  f7fffffe          BL       clear
;;;2496   									k2=0;									//string array counter for uart 1
001aec  2000              MOVS     r0,#0
001aee  49f5              LDR      r1,|L102.7876|
001af0  6008              STR      r0,[r1,#0]  ; k2
;;;2497   									tout=0;	
001af2  49f5              LDR      r1,|L102.7880|
001af4  6008              STR      r0,[r1,#0]  ; tout
;;;2498   		for(k=0;k<strlen(data);k++)
001af6  49f5              LDR      r1,|L102.7884|
001af8  6008              STR      r0,[r1,#0]  ; k
001afa  e00b              B        |L102.6932|
                  |L102.6908|
;;;2499   		{
;;;2500   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001afc  48eb              LDR      r0,|L102.7852|
001afe  4af3              LDR      r2,|L102.7884|
001b00  6812              LDR      r2,[r2,#0]  ; k
001b02  5c81              LDRB     r1,[r0,r2]
001b04  48f2              LDR      r0,|L102.7888|
001b06  f7fffffe          BL       uart_putchar
001b0a  48f0              LDR      r0,|L102.7884|
001b0c  6800              LDR      r0,[r0,#0]            ;2498  ; k
001b0e  1c40              ADDS     r0,r0,#1              ;2498
001b10  49ee              LDR      r1,|L102.7884|
001b12  6008              STR      r0,[r1,#0]            ;2498  ; k
                  |L102.6932|
001b14  48e5              LDR      r0,|L102.7852|
001b16  f7fffffe          BL       strlen
001b1a  49ec              LDR      r1,|L102.7884|
001b1c  6809              LDR      r1,[r1,#0]            ;2498  ; k
001b1e  4288              CMP      r0,r1                 ;2498
001b20  d8ec              BHI      |L102.6908|
;;;2501   		}	
;;;2502   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001b22  210a              MOVS     r1,#0xa
001b24  48ea              LDR      r0,|L102.7888|
001b26  f7fffffe          BL       uart_putchar
001b2a  210a              MOVS     r1,#0xa
001b2c  48e8              LDR      r0,|L102.7888|
001b2e  f7fffffe          BL       uart_putchar
001b32  210a              MOVS     r1,#0xa
001b34  48e6              LDR      r0,|L102.7888|
001b36  f7fffffe          BL       uart_putchar
001b3a  210a              MOVS     r1,#0xa
001b3c  48e4              LDR      r0,|L102.7888|
001b3e  f7fffffe          BL       uart_putchar
001b42  210a              MOVS     r1,#0xa
001b44  48e2              LDR      r0,|L102.7888|
001b46  f7fffffe          BL       uart_putchar
001b4a  210a              MOVS     r1,#0xa
001b4c  48e0              LDR      r0,|L102.7888|
001b4e  f7fffffe          BL       uart_putchar
001b52  210a              MOVS     r1,#0xa
001b54  48de              LDR      r0,|L102.7888|
001b56  f7fffffe          BL       uart_putchar
001b5a  210a              MOVS     r1,#0xa
001b5c  48dc              LDR      r0,|L102.7888|
001b5e  f7fffffe          BL       uart_putchar
001b62  210a              MOVS     r1,#0xa
001b64  48da              LDR      r0,|L102.7888|
001b66  f7fffffe          BL       uart_putchar
001b6a  210a              MOVS     r1,#0xa
001b6c  48d8              LDR      r0,|L102.7888|
001b6e  f7fffffe          BL       uart_putchar
001b72  210a              MOVS     r1,#0xa
001b74  48d6              LDR      r0,|L102.7888|
001b76  f7fffffe          BL       uart_putchar
001b7a  210a              MOVS     r1,#0xa
001b7c  48d4              LDR      r0,|L102.7888|
001b7e  f7fffffe          BL       uart_putchar
001b82  210a              MOVS     r1,#0xa
001b84  48d2              LDR      r0,|L102.7888|
001b86  f7fffffe          BL       uart_putchar
001b8a  210a              MOVS     r1,#0xa
001b8c  48d0              LDR      r0,|L102.7888|
001b8e  f7fffffe          BL       uart_putchar
001b92  210a              MOVS     r1,#0xa
001b94  48ce              LDR      r0,|L102.7888|
001b96  f7fffffe          BL       uart_putchar
001b9a  210a              MOVS     r1,#0xa
001b9c  48cc              LDR      r0,|L102.7888|
001b9e  f7fffffe          BL       uart_putchar
001ba2  210a              MOVS     r1,#0xa
001ba4  48ca              LDR      r0,|L102.7888|
001ba6  f7fffffe          BL       uart_putchar
001baa  210a              MOVS     r1,#0xa
001bac  48c8              LDR      r0,|L102.7888|
001bae  e000              B        |L102.7090|
                  |L102.7088|
001bb0  e20f              B        |L102.8146|
                  |L102.7090|
001bb2  f7fffffe          BL       uart_putchar
001bb6  210a              MOVS     r1,#0xa
001bb8  48c5              LDR      r0,|L102.7888|
001bba  f7fffffe          BL       uart_putchar
001bbe  210a              MOVS     r1,#0xa
001bc0  48c3              LDR      r0,|L102.7888|
001bc2  f7fffffe          BL       uart_putchar
001bc6  210a              MOVS     r1,#0xa
001bc8  48c1              LDR      r0,|L102.7888|
001bca  f7fffffe          BL       uart_putchar
001bce  210a              MOVS     r1,#0xa
001bd0  48bf              LDR      r0,|L102.7888|
001bd2  f7fffffe          BL       uart_putchar
001bd6  210a              MOVS     r1,#0xa
001bd8  48bd              LDR      r0,|L102.7888|
001bda  f7fffffe          BL       uart_putchar
001bde  210a              MOVS     r1,#0xa
001be0  48bb              LDR      r0,|L102.7888|
001be2  f7fffffe          BL       uart_putchar
001be6  210a              MOVS     r1,#0xa
001be8  48b9              LDR      r0,|L102.7888|
001bea  f7fffffe          BL       uart_putchar
001bee  210a              MOVS     r1,#0xa
001bf0  48b7              LDR      r0,|L102.7888|
001bf2  f7fffffe          BL       uart_putchar
001bf6  210a              MOVS     r1,#0xa
001bf8  48b5              LDR      r0,|L102.7888|
001bfa  f7fffffe          BL       uart_putchar
001bfe  210a              MOVS     r1,#0xa
001c00  48b3              LDR      r0,|L102.7888|
001c02  f7fffffe          BL       uart_putchar
001c06  210a              MOVS     r1,#0xa
001c08  48b1              LDR      r0,|L102.7888|
001c0a  f7fffffe          BL       uart_putchar
001c0e  210a              MOVS     r1,#0xa
001c10  48af              LDR      r0,|L102.7888|
001c12  f7fffffe          BL       uart_putchar
001c16  210a              MOVS     r1,#0xa
001c18  48ad              LDR      r0,|L102.7888|
001c1a  f7fffffe          BL       uart_putchar
001c1e  210a              MOVS     r1,#0xa
001c20  48ab              LDR      r0,|L102.7888|
001c22  f7fffffe          BL       uart_putchar
001c26  210a              MOVS     r1,#0xa
001c28  48a9              LDR      r0,|L102.7888|
001c2a  f7fffffe          BL       uart_putchar
001c2e  210a              MOVS     r1,#0xa
001c30  48a7              LDR      r0,|L102.7888|
001c32  f7fffffe          BL       uart_putchar
001c36  210a              MOVS     r1,#0xa
001c38  48a5              LDR      r0,|L102.7888|
001c3a  f7fffffe          BL       uart_putchar
001c3e  210a              MOVS     r1,#0xa
001c40  48a3              LDR      r0,|L102.7888|
001c42  f7fffffe          BL       uart_putchar
001c46  210a              MOVS     r1,#0xa
001c48  48a1              LDR      r0,|L102.7888|
001c4a  f7fffffe          BL       uart_putchar
001c4e  210a              MOVS     r1,#0xa
001c50  489f              LDR      r0,|L102.7888|
001c52  f7fffffe          BL       uart_putchar
001c56  210a              MOVS     r1,#0xa
001c58  489d              LDR      r0,|L102.7888|
001c5a  f7fffffe          BL       uart_putchar
001c5e  210a              MOVS     r1,#0xa
001c60  489b              LDR      r0,|L102.7888|
001c62  f7fffffe          BL       uart_putchar
001c66  210a              MOVS     r1,#0xa
001c68  4899              LDR      r0,|L102.7888|
001c6a  f7fffffe          BL       uart_putchar
001c6e  210a              MOVS     r1,#0xa
001c70  4897              LDR      r0,|L102.7888|
001c72  f7fffffe          BL       uart_putchar
001c76  210a              MOVS     r1,#0xa
001c78  4895              LDR      r0,|L102.7888|
001c7a  f7fffffe          BL       uart_putchar
001c7e  210a              MOVS     r1,#0xa
001c80  4893              LDR      r0,|L102.7888|
001c82  f7fffffe          BL       uart_putchar
001c86  210a              MOVS     r1,#0xa
001c88  4891              LDR      r0,|L102.7888|
001c8a  f7fffffe          BL       uart_putchar
001c8e  210a              MOVS     r1,#0xa
001c90  488f              LDR      r0,|L102.7888|
001c92  f7fffffe          BL       uart_putchar
001c96  210a              MOVS     r1,#0xa
001c98  488d              LDR      r0,|L102.7888|
001c9a  f7fffffe          BL       uart_putchar
001c9e  210a              MOVS     r1,#0xa
001ca0  488b              LDR      r0,|L102.7888|
001ca2  f7fffffe          BL       uart_putchar
001ca6  210a              MOVS     r1,#0xa
001ca8  4889              LDR      r0,|L102.7888|
001caa  f7fffffe          BL       uart_putchar
001cae  210a              MOVS     r1,#0xa
001cb0  4887              LDR      r0,|L102.7888|
001cb2  f7fffffe          BL       uart_putchar
001cb6  210a              MOVS     r1,#0xa
001cb8  4885              LDR      r0,|L102.7888|
001cba  f7fffffe          BL       uart_putchar
001cbe  210a              MOVS     r1,#0xa
001cc0  4883              LDR      r0,|L102.7888|
001cc2  f7fffffe          BL       uart_putchar
001cc6  210a              MOVS     r1,#0xa
001cc8  4881              LDR      r0,|L102.7888|
001cca  f7fffffe          BL       uart_putchar
001cce  210a              MOVS     r1,#0xa
001cd0  487f              LDR      r0,|L102.7888|
001cd2  f7fffffe          BL       uart_putchar
001cd6  210a              MOVS     r1,#0xa
001cd8  487d              LDR      r0,|L102.7888|
001cda  f7fffffe          BL       uart_putchar
001cde  210a              MOVS     r1,#0xa
001ce0  487b              LDR      r0,|L102.7888|
001ce2  f7fffffe          BL       uart_putchar
001ce6  210a              MOVS     r1,#0xa
001ce8  4879              LDR      r0,|L102.7888|
001cea  f7fffffe          BL       uart_putchar
;;;2503   									//memset(data,0,1000);
;;;2504   														//timer counts to wait for characters in uart 1 									
;;;2505   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001cee  bf00              NOP      
                  |L102.7408|
001cf0  4978              LDR      r1,|L102.7892|
001cf2  486c              LDR      r0,|L102.7844|
001cf4  f7fffffe          BL       strstr
001cf8  2800              CMP      r0,#0
001cfa  d109              BNE      |L102.7440|
001cfc  496e              LDR      r1,|L102.7864|
001cfe  4869              LDR      r0,|L102.7844|
001d00  f7fffffe          BL       strstr
001d04  2800              CMP      r0,#0
001d06  d103              BNE      |L102.7440|
001d08  486f              LDR      r0,|L102.7880|
001d0a  6800              LDR      r0,[r0,#0]  ; tout
001d0c  2805              CMP      r0,#5
001d0e  ddef              BLE      |L102.7408|
                  |L102.7440|
;;;2506   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2507   									}
;;;2508   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001d10  f7fffffe          BL       clear
;;;2509   									//clear();
;;;2510   									memset(data,0,strlen(data));
001d14  4865              LDR      r0,|L102.7852|
001d16  f7fffffe          BL       strlen
001d1a  4604              MOV      r4,r0
001d1c  4621              MOV      r1,r4
001d1e  4863              LDR      r0,|L102.7852|
001d20  f7fffffe          BL       __aeabi_memclr
;;;2511   									clear();
001d24  f7fffffe          BL       clear
001d28  e153              B        |L102.8146|
                  |L102.7466|
;;;2512   
;;;2513   								
;;;2514   
;;;2515   //log_it();
;;;2516   }
;;;2517   			
;;;2518   			
;;;2519   			
;;;2520   			
;;;2521   			
;;;2522   			}
;;;2523   			else
;;;2524   			{
;;;2525   				
;;;2526   				
;;;2527   				
;;;2528   	delay(100);
001d2a  2064              MOVS     r0,#0x64
001d2c  f7fffffe          BL       delay
;;;2529   		clear();//memset(uart_string_gsm,0,5000);
001d30  f7fffffe          BL       clear
;;;2530   	
;;;2531   	memset(at_,0,100);
001d34  2164              MOVS     r1,#0x64
001d36  485c              LDR      r0,|L102.7848|
001d38  f7fffffe          BL       __aeabi_memclr
;;;2532   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001d3c  485b              LDR      r0,|L102.7852|
001d3e  f7fffffe          BL       strlen
001d42  1c44              ADDS     r4,r0,#1
001d44  4623              MOV      r3,r4
001d46  4a5a              LDR      r2,|L102.7856|
001d48  495a              LDR      r1,|L102.7860|
001d4a  4857              LDR      r0,|L102.7848|
001d4c  f7fffffe          BL       __2sprintf
;;;2533   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001d50  2005              MOVS     r0,#5
001d52  4b59              LDR      r3,|L102.7864|
001d54  4a59              LDR      r2,|L102.7868|
001d56  495a              LDR      r1,|L102.7872|
001d58  9000              STR      r0,[sp,#0]
001d5a  4853              LDR      r0,|L102.7848|
001d5c  f7fffffe          BL       send_SD
;;;2534   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2535   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2536   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2537   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2538   //	}
;;;2539   	
;;;2540   clear();	
001d60  f7fffffe          BL       clear
;;;2541   									k2=0;									//string array counter for uart 1
001d64  2000              MOVS     r0,#0
001d66  4957              LDR      r1,|L102.7876|
001d68  6008              STR      r0,[r1,#0]  ; k2
;;;2542   									tout=0;	
001d6a  4957              LDR      r1,|L102.7880|
001d6c  6008              STR      r0,[r1,#0]  ; tout
;;;2543   		for(k=0;k<strlen(data);k++)
001d6e  4957              LDR      r1,|L102.7884|
001d70  6008              STR      r0,[r1,#0]  ; k
001d72  e00b              B        |L102.7564|
                  |L102.7540|
;;;2544   		{
;;;2545   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001d74  484d              LDR      r0,|L102.7852|
001d76  4a55              LDR      r2,|L102.7884|
001d78  6812              LDR      r2,[r2,#0]  ; k
001d7a  5c81              LDRB     r1,[r0,r2]
001d7c  4854              LDR      r0,|L102.7888|
001d7e  f7fffffe          BL       uart_putchar
001d82  4852              LDR      r0,|L102.7884|
001d84  6800              LDR      r0,[r0,#0]            ;2543  ; k
001d86  1c40              ADDS     r0,r0,#1              ;2543
001d88  4950              LDR      r1,|L102.7884|
001d8a  6008              STR      r0,[r1,#0]            ;2543  ; k
                  |L102.7564|
001d8c  4847              LDR      r0,|L102.7852|
001d8e  f7fffffe          BL       strlen
001d92  494e              LDR      r1,|L102.7884|
001d94  6809              LDR      r1,[r1,#0]            ;2543  ; k
001d96  4288              CMP      r0,r1                 ;2543
001d98  d8ec              BHI      |L102.7540|
;;;2546   		}	
;;;2547   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001d9a  210a              MOVS     r1,#0xa
001d9c  484c              LDR      r0,|L102.7888|
001d9e  f7fffffe          BL       uart_putchar
001da2  210a              MOVS     r1,#0xa
001da4  484a              LDR      r0,|L102.7888|
001da6  f7fffffe          BL       uart_putchar
001daa  210a              MOVS     r1,#0xa
001dac  4848              LDR      r0,|L102.7888|
001dae  f7fffffe          BL       uart_putchar
001db2  210a              MOVS     r1,#0xa
001db4  4846              LDR      r0,|L102.7888|
001db6  f7fffffe          BL       uart_putchar
001dba  210a              MOVS     r1,#0xa
001dbc  4844              LDR      r0,|L102.7888|
001dbe  f7fffffe          BL       uart_putchar
001dc2  210a              MOVS     r1,#0xa
001dc4  4842              LDR      r0,|L102.7888|
001dc6  f7fffffe          BL       uart_putchar
001dca  210a              MOVS     r1,#0xa
001dcc  4840              LDR      r0,|L102.7888|
001dce  f7fffffe          BL       uart_putchar
001dd2  210a              MOVS     r1,#0xa
001dd4  483e              LDR      r0,|L102.7888|
001dd6  f7fffffe          BL       uart_putchar
001dda  210a              MOVS     r1,#0xa
001ddc  483c              LDR      r0,|L102.7888|
001dde  f7fffffe          BL       uart_putchar
001de2  210a              MOVS     r1,#0xa
001de4  483a              LDR      r0,|L102.7888|
001de6  f7fffffe          BL       uart_putchar
001dea  210a              MOVS     r1,#0xa
001dec  4838              LDR      r0,|L102.7888|
001dee  f7fffffe          BL       uart_putchar
001df2  210a              MOVS     r1,#0xa
001df4  4836              LDR      r0,|L102.7888|
001df6  f7fffffe          BL       uart_putchar
001dfa  210a              MOVS     r1,#0xa
001dfc  4834              LDR      r0,|L102.7888|
001dfe  f7fffffe          BL       uart_putchar
001e02  210a              MOVS     r1,#0xa
001e04  4832              LDR      r0,|L102.7888|
001e06  f7fffffe          BL       uart_putchar
001e0a  210a              MOVS     r1,#0xa
001e0c  4830              LDR      r0,|L102.7888|
001e0e  f7fffffe          BL       uart_putchar
001e12  210a              MOVS     r1,#0xa
001e14  482e              LDR      r0,|L102.7888|
001e16  f7fffffe          BL       uart_putchar
001e1a  210a              MOVS     r1,#0xa
001e1c  482c              LDR      r0,|L102.7888|
001e1e  f7fffffe          BL       uart_putchar
001e22  210a              MOVS     r1,#0xa
001e24  482a              LDR      r0,|L102.7888|
001e26  f7fffffe          BL       uart_putchar
001e2a  210a              MOVS     r1,#0xa
001e2c  4828              LDR      r0,|L102.7888|
001e2e  f7fffffe          BL       uart_putchar
001e32  210a              MOVS     r1,#0xa
001e34  4826              LDR      r0,|L102.7888|
001e36  f7fffffe          BL       uart_putchar
001e3a  210a              MOVS     r1,#0xa
001e3c  4824              LDR      r0,|L102.7888|
001e3e  f7fffffe          BL       uart_putchar
001e42  210a              MOVS     r1,#0xa
001e44  4822              LDR      r0,|L102.7888|
001e46  f7fffffe          BL       uart_putchar
001e4a  210a              MOVS     r1,#0xa
001e4c  4820              LDR      r0,|L102.7888|
001e4e  f7fffffe          BL       uart_putchar
001e52  210a              MOVS     r1,#0xa
001e54  481e              LDR      r0,|L102.7888|
001e56  f7fffffe          BL       uart_putchar
001e5a  210a              MOVS     r1,#0xa
001e5c  481c              LDR      r0,|L102.7888|
001e5e  f7fffffe          BL       uart_putchar
001e62  210a              MOVS     r1,#0xa
001e64  481a              LDR      r0,|L102.7888|
001e66  f7fffffe          BL       uart_putchar
001e6a  210a              MOVS     r1,#0xa
001e6c  4818              LDR      r0,|L102.7888|
001e6e  f7fffffe          BL       uart_putchar
001e72  210a              MOVS     r1,#0xa
001e74  4816              LDR      r0,|L102.7888|
001e76  f7fffffe          BL       uart_putchar
001e7a  210a              MOVS     r1,#0xa
001e7c  4814              LDR      r0,|L102.7888|
001e7e  f7fffffe          BL       uart_putchar
001e82  210a              MOVS     r1,#0xa
001e84  4812              LDR      r0,|L102.7888|
001e86  f7fffffe          BL       uart_putchar
001e8a  210a              MOVS     r1,#0xa
001e8c  4810              LDR      r0,|L102.7888|
001e8e  f7fffffe          BL       uart_putchar
001e92  210a              MOVS     r1,#0xa
001e94  480e              LDR      r0,|L102.7888|
001e96  f7fffffe          BL       uart_putchar
001e9a  210a              MOVS     r1,#0xa
001e9c  480c              LDR      r0,|L102.7888|
001e9e  f7fffffe          BL       uart_putchar
001ea2  e019              B        |L102.7896|
                  |L102.7844|
                          DCD      uart_string_gsm
                  |L102.7848|
                          DCD      at_
                  |L102.7852|
                          DCD      data
                  |L102.7856|
                          DCD      drive
                  |L102.7860|
                          DCD      ||.conststring||+0x364
                  |L102.7864|
                          DCD      ||.conststring||+0xd4
                  |L102.7868|
                          DCD      ||.conststring||+0x8
                  |L102.7872|
                          DCD      ||.conststring||+0x30
                  |L102.7876|
                          DCD      ||k2||
                  |L102.7880|
                          DCD      tout
                  |L102.7884|
                          DCD      k
                  |L102.7888|
                          DCD      0x4006b000
                  |L102.7892|
                          DCD      ||.conststring||+0x58
                  |L102.7896|
001ed8  210a              MOVS     r1,#0xa
001eda  4850              LDR      r0,|L102.8220|
001edc  f7fffffe          BL       uart_putchar
001ee0  210a              MOVS     r1,#0xa
001ee2  484e              LDR      r0,|L102.8220|
001ee4  f7fffffe          BL       uart_putchar
001ee8  210a              MOVS     r1,#0xa
001eea  484c              LDR      r0,|L102.8220|
001eec  f7fffffe          BL       uart_putchar
001ef0  210a              MOVS     r1,#0xa
001ef2  484a              LDR      r0,|L102.8220|
001ef4  f7fffffe          BL       uart_putchar
001ef8  210a              MOVS     r1,#0xa
001efa  4848              LDR      r0,|L102.8220|
001efc  f7fffffe          BL       uart_putchar
001f00  210a              MOVS     r1,#0xa
001f02  4846              LDR      r0,|L102.8220|
001f04  f7fffffe          BL       uart_putchar
001f08  210a              MOVS     r1,#0xa
001f0a  4844              LDR      r0,|L102.8220|
001f0c  f7fffffe          BL       uart_putchar
001f10  210a              MOVS     r1,#0xa
001f12  4842              LDR      r0,|L102.8220|
001f14  f7fffffe          BL       uart_putchar
001f18  210a              MOVS     r1,#0xa
001f1a  4840              LDR      r0,|L102.8220|
001f1c  f7fffffe          BL       uart_putchar
001f20  210a              MOVS     r1,#0xa
001f22  483e              LDR      r0,|L102.8220|
001f24  f7fffffe          BL       uart_putchar
001f28  210a              MOVS     r1,#0xa
001f2a  483c              LDR      r0,|L102.8220|
001f2c  f7fffffe          BL       uart_putchar
001f30  210a              MOVS     r1,#0xa
001f32  483a              LDR      r0,|L102.8220|
001f34  f7fffffe          BL       uart_putchar
001f38  210a              MOVS     r1,#0xa
001f3a  4838              LDR      r0,|L102.8220|
001f3c  f7fffffe          BL       uart_putchar
001f40  210a              MOVS     r1,#0xa
001f42  4836              LDR      r0,|L102.8220|
001f44  f7fffffe          BL       uart_putchar
001f48  210a              MOVS     r1,#0xa
001f4a  4834              LDR      r0,|L102.8220|
001f4c  f7fffffe          BL       uart_putchar
001f50  210a              MOVS     r1,#0xa
001f52  4832              LDR      r0,|L102.8220|
001f54  f7fffffe          BL       uart_putchar
001f58  210a              MOVS     r1,#0xa
001f5a  4830              LDR      r0,|L102.8220|
001f5c  f7fffffe          BL       uart_putchar
001f60  210a              MOVS     r1,#0xa
001f62  482e              LDR      r0,|L102.8220|
001f64  f7fffffe          BL       uart_putchar
001f68  210a              MOVS     r1,#0xa
001f6a  482c              LDR      r0,|L102.8220|
001f6c  f7fffffe          BL       uart_putchar
001f70  210a              MOVS     r1,#0xa
001f72  482a              LDR      r0,|L102.8220|
001f74  f7fffffe          BL       uart_putchar
001f78  210a              MOVS     r1,#0xa
001f7a  4828              LDR      r0,|L102.8220|
001f7c  f7fffffe          BL       uart_putchar
001f80  210a              MOVS     r1,#0xa
001f82  4826              LDR      r0,|L102.8220|
001f84  f7fffffe          BL       uart_putchar
001f88  210a              MOVS     r1,#0xa
001f8a  4824              LDR      r0,|L102.8220|
001f8c  f7fffffe          BL       uart_putchar
001f90  210a              MOVS     r1,#0xa
001f92  4822              LDR      r0,|L102.8220|
001f94  f7fffffe          BL       uart_putchar
;;;2548   									//memset(data,0,1000);
;;;2549   														//timer counts to wait for characters in uart 1 									
;;;2550   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001f98  bf00              NOP      
                  |L102.8090|
001f9a  4921              LDR      r1,|L102.8224|
001f9c  4821              LDR      r0,|L102.8228|
001f9e  f7fffffe          BL       strstr
001fa2  2800              CMP      r0,#0
001fa4  d109              BNE      |L102.8122|
001fa6  4920              LDR      r1,|L102.8232|
001fa8  481e              LDR      r0,|L102.8228|
001faa  f7fffffe          BL       strstr
001fae  2800              CMP      r0,#0
001fb0  d103              BNE      |L102.8122|
001fb2  481e              LDR      r0,|L102.8236|
001fb4  6800              LDR      r0,[r0,#0]  ; tout
001fb6  2805              CMP      r0,#5
001fb8  ddef              BLE      |L102.8090|
                  |L102.8122|
;;;2551   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2552   									}
;;;2553   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001fba  f7fffffe          BL       clear
;;;2554   									//clear();
;;;2555   									memset(data,0,strlen(data));
001fbe  481c              LDR      r0,|L102.8240|
001fc0  f7fffffe          BL       strlen
001fc4  4604              MOV      r4,r0
001fc6  4621              MOV      r1,r4
001fc8  4819              LDR      r0,|L102.8240|
001fca  f7fffffe          BL       __aeabi_memclr
;;;2556   									clear();
001fce  f7fffffe          BL       clear
                  |L102.8146|
001fd2  4818              LDR      r0,|L102.8244|
001fd4  6800              LDR      r0,[r0,#0]            ;2044  ; k5
001fd6  4918              LDR      r1,|L102.8248|
001fd8  6809              LDR      r1,[r1,#0]            ;2044  ; times
001fda  4288              CMP      r0,r1                 ;2044
001fdc  dc01              BGT      |L102.8162|
001fde  f7fef857          BL       |L102.144|
                  |L102.8162|
;;;2557   
;;;2558   								
;;;2559   				
;;;2560   				//log_it();
;;;2561   			
;;;2562   			
;;;2563   			
;;;2564   			
;;;2565   			
;;;2566   			}
;;;2567   //			memset(at_,0,100);
;;;2568   //			sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
;;;2569   //			send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2570   //			parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
;;;2571   //			fsz=stof(fsize);//7523.7412
;;;2572   //			times=(fsz/1256)+1;
;;;2573   		}	
;;;2574   	
;;;2575   //		
;;;2576   }
;;;2577   
;;;2578   if((times != 0  && k5!=9999999)){
001fe2  4815              LDR      r0,|L102.8248|
001fe4  6800              LDR      r0,[r0,#0]  ; times
001fe6  2800              CMP      r0,#0
001fe8  d016              BEQ      |L102.8216|
001fea  4812              LDR      r0,|L102.8244|
001fec  6800              LDR      r0,[r0,#0]  ; k5
001fee  4913              LDR      r1,|L102.8252|
001ff0  4288              CMP      r0,r1
001ff2  d011              BEQ      |L102.8216|
;;;2579   	memset(at_,0,100);
001ff4  2164              MOVS     r1,#0x64
001ff6  4812              LDR      r0,|L102.8256|
001ff8  f7fffffe          BL       __aeabi_memclr
;;;2580   	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
001ffc  4a11              LDR      r2,|L102.8260|
001ffe  4912              LDR      r1,|L102.8264|
002000  480f              LDR      r0,|L102.8256|
002002  f7fffffe          BL       __2sprintf
;;;2581   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
002006  4811              LDR      r0,|L102.8268|
002008  6800              LDR      r0,[r0,#0]  ; tmeout
00200a  4b11              LDR      r3,|L102.8272|
00200c  4a11              LDR      r2,|L102.8276|
00200e  4912              LDR      r1,|L102.8280|
002010  9000              STR      r0,[sp,#0]
002012  480b              LDR      r0,|L102.8256|
002014  f7fffffe          BL       send_GSM
                  |L102.8216|
;;;2582   
;;;2583   }		
;;;2584   
;;;2585   
;;;2586   }
002018  bd7c              POP      {r2-r6,pc}
;;;2587   
                          ENDP

00201a  0000              DCW      0x0000
                  |L102.8220|
                          DCD      0x4006b000
                  |L102.8224|
                          DCD      ||.conststring||+0x58
                  |L102.8228|
                          DCD      uart_string_gsm
                  |L102.8232|
                          DCD      ||.conststring||+0xd4
                  |L102.8236|
                          DCD      tout
                  |L102.8240|
                          DCD      data
                  |L102.8244|
                          DCD      ||k5||
                  |L102.8248|
                          DCD      times
                  |L102.8252|
                          DCD      0x0098967f
                  |L102.8256|
                          DCD      at_
                  |L102.8260|
                          DCD      drive
                  |L102.8264|
                          DCD      ||.conststring||+0x570
                  |L102.8268|
                          DCD      tmeout
                  |L102.8272|
                          DCD      ||.conststring||
                  |L102.8276|
                          DCD      ||.conststring||+0x8
                  |L102.8280|
                          DCD      ||.conststring||+0x10

                          AREA ||i.readapn||, COMGROUP=readapn, CODE, READONLY, ALIGN=2

                  readapn PROC
;;;1178   
;;;1179   __inline void readapn()
000000  b51c              PUSH     {r2-r4,lr}
;;;1180   {
;;;1181   	memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480c              LDR      r0,|L109.56|
000006  f7fffffe          BL       __aeabi_memclr
;;;1182   		sprintf(at_, "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n");		
00000a  490c              LDR      r1,|L109.60|
00000c  480a              LDR      r0,|L109.56|
00000e  f7fffffe          BL       __2sprintf
;;;1183   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0a              LDR      r3,|L109.64|
000016  4a0b              LDR      r2,|L109.68|
000018  490b              LDR      r1,|L109.72|
00001a  9000              STR      r0,[sp,#0]
00001c  4806              LDR      r0,|L109.56|
00001e  f7fffffe          BL       send_GSM
;;;1184   	
;;;1185   		parse_g(uart_string_gsm, 1,2, '|', '|',apn);
000022  480a              LDR      r0,|L109.76|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2202              MOVS     r2,#2
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2101              MOVS     r1,#1
000030  4807              LDR      r0,|L109.80|
000032  f7fffffe          BL       parse_g
;;;1186   	
;;;1187   	
;;;1188   }
000036  bd1c              POP      {r2-r4,pc}
;;;1189   
                          ENDP

                  |L109.56|
                          DCD      at_
                  |L109.60|
                          DCD      ||.conststring||+0x58c
                  |L109.64|
                          DCD      ||.conststring||
                  |L109.68|
                          DCD      ||.conststring||+0x8
                  |L109.72|
                          DCD      ||.conststring||+0x10
                  |L109.76|
                          DCD      apn
                  |L109.80|
                          DCD      uart_string_gsm

                          AREA ||i.ignread||, COMGROUP=ignread, CODE, READONLY, ALIGN=2

                  ignread PROC
;;;1286   
;;;1287   __inline void ignread(){
000000  b508              PUSH     {r3,lr}
;;;1288   memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4813              LDR      r0,|L116.84|
000006  f7fffffe          BL       __aeabi_memclr
;;;1289   		sprintf(at_, "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n");		
00000a  4913              LDR      r1,|L116.88|
00000c  4811              LDR      r0,|L116.84|
00000e  f7fffffe          BL       __2sprintf
;;;1290   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b11              LDR      r3,|L116.92|
000016  4a12              LDR      r2,|L116.96|
000018  4912              LDR      r1,|L116.100|
00001a  9000              STR      r0,[sp,#0]
00001c  480d              LDR      r0,|L116.84|
00001e  f7fffffe          BL       send_GSM
;;;1291   if(strstr(uart_string_gsm,"ION")){IGNITION_ON;FUEL_ON;}
000022  4911              LDR      r1,|L116.104|
000024  4811              LDR      r0,|L116.108|
000026  f7fffffe          BL       strstr
00002a  2800              CMP      r0,#0
00002c  d005              BEQ      |L116.58|
00002e  2002              MOVS     r0,#2
000030  490f              LDR      r1,|L116.112|
000032  6088              STR      r0,[r1,#8]
000034  2004              MOVS     r0,#4
000036  6088              STR      r0,[r1,#8]
000038  e00a              B        |L116.80|
                  |L116.58|
;;;1292   else if(strstr(uart_string_gsm,"IOFF")){IGNITION_OFF;FUEL_OFF;}
00003a  490e              LDR      r1,|L116.116|
00003c  480b              LDR      r0,|L116.108|
00003e  f7fffffe          BL       strstr
000042  2800              CMP      r0,#0
000044  d004              BEQ      |L116.80|
000046  2002              MOVS     r0,#2
000048  4909              LDR      r1,|L116.112|
00004a  6048              STR      r0,[r1,#4]
00004c  2004              MOVS     r0,#4
00004e  6048              STR      r0,[r1,#4]
                  |L116.80|
;;;1293   
;;;1294   }	
000050  bd08              POP      {r3,pc}
;;;1295   	
                          ENDP

000052  0000              DCW      0x0000
                  |L116.84|
                          DCD      at_
                  |L116.88|
                          DCD      ||.conststring||+0x5ac
                  |L116.92|
                          DCD      ||.conststring||
                  |L116.96|
                          DCD      ||.conststring||+0x8
                  |L116.100|
                          DCD      ||.conststring||+0x10
                  |L116.104|
                          DCD      ||.conststring||+0x5cc
                  |L116.108|
                          DCD      uart_string_gsm
                  |L116.112|
                          DCD      0x400ff000
                  |L116.116|
                          DCD      ||.conststring||+0x5d0

                          AREA ||i.LED_init||, COMGROUP=LED_init, CODE, READONLY, ALIGN=2

                  LED_init PROC
;;;25     
;;;26     __inline void LED_init(void){
000000  483a              LDR      r0,|L123.236|
;;;27       
;;;28         SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK ;      //Turn on clock to PORTE & D module
000002  6b80              LDR      r0,[r0,#0x38]
000004  210f              MOVS     r1,#0xf
000006  0289              LSLS     r1,r1,#10
000008  4308              ORRS     r0,r0,r1
00000a  4938              LDR      r1,|L123.236|
00000c  6388              STR      r0,[r1,#0x38]
;;;29     
;;;30     		 
;;;31     
;;;32     		PORTE_PCR29 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
00000e  1588              ASRS     r0,r1,#22
000010  4937              LDR      r1,|L123.240|
000012  6348              STR      r0,[r1,#0x34]
;;;33       	PORTD_PCR7 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000014  4937              LDR      r1,|L123.244|
000016  61c8              STR      r0,[r1,#0x1c]
;;;34         PORTE_PCR31 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000018  4935              LDR      r1,|L123.240|
00001a  63c8              STR      r0,[r1,#0x3c]
;;;35         PORTD_PCR5 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode
00001c  4935              LDR      r1,|L123.244|
00001e  6148              STR      r0,[r1,#0x14]
;;;36     	
;;;37         PORTC_PCR5 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000020  4935              LDR      r1,|L123.248|
000022  6148              STR      r0,[r1,#0x14]
;;;38         PORTC_PCR6 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000024  6188              STR      r0,[r1,#0x18]
;;;39         PORTC_PCR7 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	
000026  61c8              STR      r0,[r1,#0x1c]
;;;40         PORTC_PCR8 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	    
000028  6208              STR      r0,[r1,#0x20]
;;;41     		
;;;42     	PORTB_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
00002a  1c80              ADDS     r0,r0,#2
00002c  4933              LDR      r1,|L123.252|
00002e  6008              STR      r0,[r1,#0]
;;;43     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;44     	PTB->PDDR &= ~MASK(ADCIGN);
000030  4833              LDR      r0,|L123.256|
000032  6940              LDR      r0,[r0,#0x14]
000034  0840              LSRS     r0,r0,#1
000036  0040              LSLS     r0,r0,#1
000038  4931              LDR      r1,|L123.256|
00003a  6148              STR      r0,[r1,#0x14]
;;;45     	
;;;46     	GPIOD_PDDR |= (1<<7);
00003c  4830              LDR      r0,|L123.256|
00003e  3080              ADDS     r0,r0,#0x80
000040  6940              LDR      r0,[r0,#0x14]
000042  2180              MOVS     r1,#0x80
000044  4308              ORRS     r0,r0,r1
000046  492e              LDR      r1,|L123.256|
000048  3180              ADDS     r1,r1,#0x80
00004a  6148              STR      r0,[r1,#0x14]
;;;47     	
;;;48     	  
;;;49         GPIOE_PSOR |= RED_SHIFT | GREEN_SHIFT;      //Set the initial output state to high
00004c  482c              LDR      r0,|L123.256|
00004e  30c0              ADDS     r0,r0,#0xc0
000050  6840              LDR      r0,[r0,#4]
000052  2105              MOVS     r1,#5
000054  0749              LSLS     r1,r1,#29
000056  4308              ORRS     r0,r0,r1
000058  4929              LDR      r1,|L123.256|
00005a  31c0              ADDS     r1,r1,#0xc0
00005c  6048              STR      r0,[r1,#4]
;;;50         GPIOD_PSOR |= BLUE_SHIFT;               	//Set the inital output state to high
00005e  4828              LDR      r0,|L123.256|
000060  3080              ADDS     r0,r0,#0x80
000062  6840              LDR      r0,[r0,#4]
000064  2120              MOVS     r1,#0x20
000066  4308              ORRS     r0,r0,r1
000068  4925              LDR      r1,|L123.256|
00006a  3180              ADDS     r1,r1,#0x80
00006c  6048              STR      r0,[r1,#4]
;;;51     		GPIOC_PSOR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT; 
00006e  4824              LDR      r0,|L123.256|
000070  3040              ADDS     r0,r0,#0x40
000072  6840              LDR      r0,[r0,#4]
000074  21ff              MOVS     r1,#0xff
000076  31c1              ADDS     r1,r1,#0xc1
000078  4308              ORRS     r0,r0,r1
00007a  4921              LDR      r1,|L123.256|
00007c  3140              ADDS     r1,r1,#0x40
00007e  6048              STR      r0,[r1,#4]
;;;52     		GPIOC_PSOR |= RESET_SHIFT;
000080  4608              MOV      r0,r1
000082  6840              LDR      r0,[r0,#4]
000084  2120              MOVS     r1,#0x20
000086  4308              ORRS     r0,r0,r1
000088  491d              LDR      r1,|L123.256|
00008a  3140              ADDS     r1,r1,#0x40
00008c  6048              STR      r0,[r1,#4]
;;;53         
;;;54         GPIOE_PDDR |= RED_SHIFT | GREEN_SHIFT;  //Set the pin's direction to output
00008e  481c              LDR      r0,|L123.256|
000090  30c0              ADDS     r0,r0,#0xc0
000092  6940              LDR      r0,[r0,#0x14]
000094  2105              MOVS     r1,#5
000096  0749              LSLS     r1,r1,#29
000098  4308              ORRS     r0,r0,r1
00009a  4919              LDR      r1,|L123.256|
00009c  31c0              ADDS     r1,r1,#0xc0
00009e  6148              STR      r0,[r1,#0x14]
;;;55         GPIOD_PDDR |= BLUE_SHIFT;               //Set the pin's direction to output
0000a0  4817              LDR      r0,|L123.256|
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  6940              LDR      r0,[r0,#0x14]
0000a6  2120              MOVS     r1,#0x20
0000a8  4308              ORRS     r0,r0,r1
0000aa  4915              LDR      r1,|L123.256|
0000ac  3180              ADDS     r1,r1,#0x80
0000ae  6148              STR      r0,[r1,#0x14]
;;;56     		GPIOC_PDDR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT | RESET_SHIFT; 
0000b0  4813              LDR      r0,|L123.256|
0000b2  3040              ADDS     r0,r0,#0x40
0000b4  6940              LDR      r0,[r0,#0x14]
0000b6  21ff              MOVS     r1,#0xff
0000b8  31e1              ADDS     r1,r1,#0xe1
0000ba  4308              ORRS     r0,r0,r1
0000bc  4910              LDR      r1,|L123.256|
0000be  3140              ADDS     r1,r1,#0x40
0000c0  6148              STR      r0,[r1,#0x14]
;;;57         
;;;58         RED_ON;		//Turn off RED LED
0000c2  0588              LSLS     r0,r1,#22
0000c4  490e              LDR      r1,|L123.256|
0000c6  31c0              ADDS     r1,r1,#0xc0
0000c8  6088              STR      r0,[r1,#8]
;;;59         GREEN_ON;	//Turn off GREEN LED
0000ca  0080              LSLS     r0,r0,#2
0000cc  6088              STR      r0,[r1,#8]
;;;60         BLUE_ON;		//Turn off BLUE LED
0000ce  2020              MOVS     r0,#0x20
0000d0  490b              LDR      r1,|L123.256|
0000d2  3180              ADDS     r1,r1,#0x80
0000d4  6088              STR      r0,[r1,#8]
;;;61     		REDBAT_ON;
0000d6  2040              MOVS     r0,#0x40
0000d8  4909              LDR      r1,|L123.256|
0000da  3140              ADDS     r1,r1,#0x40
0000dc  6088              STR      r0,[r1,#8]
;;;62     		GREENBAT_ON;
0000de  2080              MOVS     r0,#0x80
0000e0  6088              STR      r0,[r1,#8]
;;;63     		BLUEBAT_ON;
0000e2  0040              LSLS     r0,r0,#1
0000e4  6088              STR      r0,[r1,#8]
;;;64     		RESET_ON;
0000e6  2020              MOVS     r0,#0x20
0000e8  6048              STR      r0,[r1,#4]
;;;65     		
;;;66     	
;;;67     }
0000ea  4770              BX       lr
;;;68     
                          ENDP

                  |L123.236|
                          DCD      0x40048000
                  |L123.240|
                          DCD      0x4004d040
                  |L123.244|
                          DCD      0x4004c000
                  |L123.248|
                          DCD      0x4004b000
                  |L123.252|
                          DCD      0x4004a000
                  |L123.256|
                          DCD      0x400ff040

                          AREA ||i.read_ip_port||, COMGROUP=read_ip_port, CODE, READONLY, ALIGN=2

                  read_ip_port PROC
;;;1296   	
;;;1297   __inline void read_ip_port()
000000  b51c              PUSH     {r2-r4,lr}
;;;1298   {
;;;1299   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4811              LDR      r0,|L130.76|
000006  f7fffffe          BL       __aeabi_memclr
;;;1300   		sprintf(at_, "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n");		
00000a  4911              LDR      r1,|L130.80|
00000c  480f              LDR      r0,|L130.76|
00000e  f7fffffe          BL       __2sprintf
;;;1301   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0f              LDR      r3,|L130.84|
000016  4a10              LDR      r2,|L130.88|
000018  4910              LDR      r1,|L130.92|
00001a  9000              STR      r0,[sp,#0]
00001c  480b              LDR      r0,|L130.76|
00001e  f7fffffe          BL       send_GSM
;;;1302   		parse_g(uart_string_gsm, 2,3, '|', '|',ip);
000022  480f              LDR      r0,|L130.96|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480c              LDR      r0,|L130.100|
000032  f7fffffe          BL       parse_g
;;;1303   		parse_g(uart_string_gsm, 4,5, '|', '|',port);
000036  480c              LDR      r0,|L130.104|
000038  217c              MOVS     r1,#0x7c
00003a  460b              MOV      r3,r1
00003c  2205              MOVS     r2,#5
00003e  9100              STR      r1,[sp,#0]
000040  9001              STR      r0,[sp,#4]
000042  2104              MOVS     r1,#4
000044  4807              LDR      r0,|L130.100|
000046  f7fffffe          BL       parse_g
;;;1304   	
;;;1305   	
;;;1306   	
;;;1307   	
;;;1308   	
;;;1309   	
;;;1310   	
;;;1311   	
;;;1312   	
;;;1313   	
;;;1314   	
;;;1315   	
;;;1316   	
;;;1317   	
;;;1318   	
;;;1319   	
;;;1320   	
;;;1321   	
;;;1322   	
;;;1323   	
;;;1324   	
;;;1325   	
;;;1326   	
;;;1327   	
;;;1328   	
;;;1329   	
;;;1330   	
;;;1331   	
;;;1332   	
;;;1333   	
;;;1334   	
;;;1335   	
;;;1336   	
;;;1337   	
;;;1338   	
;;;1339   	
;;;1340   	
;;;1341   	
;;;1342   	
;;;1343   	
;;;1344   	
;;;1345   	
;;;1346   	
;;;1347   	
;;;1348   	
;;;1349   	
;;;1350   	
;;;1351   	
;;;1352   	
;;;1353   	
;;;1354   	
;;;1355   	
;;;1356   	
;;;1357   	
;;;1358   	
;;;1359   	
;;;1360   	
;;;1361   	
;;;1362   	
;;;1363   	
;;;1364   	
;;;1365   	
;;;1366   	
;;;1367   	
;;;1368   	
;;;1369   	
;;;1370   	
;;;1371   	
;;;1372   	
;;;1373   	
;;;1374   	
;;;1375   	
;;;1376   	
;;;1377   	
;;;1378   	
;;;1379   	
;;;1380   	
;;;1381   	
;;;1382   	
;;;1383   	
;;;1384   	
;;;1385   	
;;;1386   	
;;;1387   	
;;;1388   	
;;;1389   	
;;;1390   	
;;;1391   	
;;;1392   	
;;;1393   	
;;;1394   	
;;;1395   	
;;;1396   	
;;;1397   	
;;;1398   	
;;;1399   	
;;;1400   	
;;;1401   	
;;;1402   	
;;;1403   	
;;;1404   	
;;;1405   	
;;;1406   	
;;;1407   	
;;;1408   		
;;;1409   
;;;1410   
;;;1411   }		
00004a  bd1c              POP      {r2-r4,pc}
;;;1412   	
                          ENDP

                  |L130.76|
                          DCD      at_
                  |L130.80|
                          DCD      ||.conststring||+0x5d8
                  |L130.84|
                          DCD      ||.conststring||
                  |L130.88|
                          DCD      ||.conststring||+0x8
                  |L130.92|
                          DCD      ||.conststring||+0x10
                  |L130.96|
                          DCD      ||ip||
                  |L130.100|
                          DCD      uart_string_gsm
                  |L130.104|
                          DCD      port

                          AREA ||i.read_interval||, COMGROUP=read_interval, CODE, READONLY, ALIGN=2

                  read_interval PROC
;;;1412   	
;;;1413   __inline void read_interval()
000000  b51c              PUSH     {r2-r4,lr}
;;;1414   {
;;;1415   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480f              LDR      r0,|L136.68|
000006  f7fffffe          BL       __aeabi_memclr
;;;1416   		sprintf(at_, "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n");		
00000a  490f              LDR      r1,|L136.72|
00000c  480d              LDR      r0,|L136.68|
00000e  f7fffffe          BL       __2sprintf
;;;1417   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0d              LDR      r3,|L136.76|
000016  4a0e              LDR      r2,|L136.80|
000018  490e              LDR      r1,|L136.84|
00001a  9000              STR      r0,[sp,#0]
00001c  4809              LDR      r0,|L136.68|
00001e  f7fffffe          BL       send_GSM
;;;1418   		parse_g(uart_string_gsm, 2,3, '|', '|',interval);
000022  480d              LDR      r0,|L136.88|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480a              LDR      r0,|L136.92|
000032  f7fffffe          BL       parse_g
;;;1419   		int_erval=myAtoi(interval);		
000036  4808              LDR      r0,|L136.88|
000038  f7fffffe          BL       myAtoi
00003c  4908              LDR      r1,|L136.96|
00003e  6008              STR      r0,[r1,#0]  ; int_erval
;;;1420   
;;;1421   
;;;1422   }		
000040  bd1c              POP      {r2-r4,pc}
;;;1423   	
                          ENDP

000042  0000              DCW      0x0000
                  |L136.68|
                          DCD      at_
                  |L136.72|
                          DCD      ||.conststring||+0x5fc
                  |L136.76|
                          DCD      ||.conststring||
                  |L136.80|
                          DCD      ||.conststring||+0x8
                  |L136.84|
                          DCD      ||.conststring||+0x10
                  |L136.88|
                          DCD      interval
                  |L136.92|
                          DCD      uart_string_gsm
                  |L136.96|
                          DCD      int_erval

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L142.24|
                  |L142.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L142.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L142.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REV16|
#line 383 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0-Beta4\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_vts_ver2_c_tout____REV16| PROC
#line 384

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REVSH|
#line 397
|__asm___10_vts_ver2_c_tout____REVSH| PROC
#line 398

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
