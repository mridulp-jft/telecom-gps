; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\rtc.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\rtc.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -IC:\vts-ver17\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.11.0\Device\Include -D__UVISION_VERSION=520 -D_RTE_ -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\rtc.crf ..\..\..\src\drivers\rtc\rtc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_i
                          REQUIRE _printf_int_dec
                  rtc_reg_report PROC
;;;109    
;;;110    void rtc_reg_report (void) {
000000  b510              PUSH     {r4,lr}
;;;111       printf("RTC_TSR    = 0x%02X,    ",    ((unsigned int) RTC_TSR)) ;
000002  4882              LDR      r0,|L1.524|
000004  6801              LDR      r1,[r0,#0]
000006  a082              ADR      r0,|L1.528|
000008  f7fffffe          BL       __2printf
;;;112      printf("RTC_TPR    = 0x%02X\n",       ((unsigned int) RTC_TPR)) ;
00000c  487f              LDR      r0,|L1.524|
00000e  6841              LDR      r1,[r0,#4]
000010  a086              ADR      r0,|L1.556|
000012  f7fffffe          BL       __2printf
;;;113      printf("RTC_TAR    = 0x%02X,    ",    ((unsigned int) RTC_TAR)) ;
000016  487d              LDR      r0,|L1.524|
000018  6881              LDR      r1,[r0,#8]
00001a  a08a              ADR      r0,|L1.580|
00001c  f7fffffe          BL       __2printf
;;;114      printf("RTC_TCR    = 0x%02X\n",       ((unsigned int) RTC_TCR)) ;
000020  487a              LDR      r0,|L1.524|
000022  68c1              LDR      r1,[r0,#0xc]
000024  a08e              ADR      r0,|L1.608|
000026  f7fffffe          BL       __2printf
;;;115      printf("RTC_CR     = 0x%02X,    ",    ((unsigned int) RTC_CR)) ;
00002a  4878              LDR      r0,|L1.524|
00002c  6901              LDR      r1,[r0,#0x10]
00002e  a092              ADR      r0,|L1.632|
000030  f7fffffe          BL       __2printf
;;;116      printf("RTC_SR     = 0x%02X\n",       ((unsigned int) RTC_SR)) ;
000034  4875              LDR      r0,|L1.524|
000036  6941              LDR      r1,[r0,#0x14]
000038  a096              ADR      r0,|L1.660|
00003a  f7fffffe          BL       __2printf
;;;117      printf("RTC_LR     = 0x%02X,    ",    ((unsigned int) RTC_LR)) ;
00003e  4873              LDR      r0,|L1.524|
000040  6981              LDR      r1,[r0,#0x18]
000042  a09a              ADR      r0,|L1.684|
000044  f7fffffe          BL       __2printf
;;;118      printf("RTC_IER    = 0x%02X\n",       ((unsigned int) RTC_IER)) ;
000048  4870              LDR      r0,|L1.524|
00004a  69c1              LDR      r1,[r0,#0x1c]
00004c  a09e              ADR      r0,|L1.712|
00004e  f7fffffe          BL       __2printf
;;;119    }
000052  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  rtc_init PROC
;;;34     
;;;35     void rtc_init(uint32 seconds, uint32 alarm, uint8 c_interval, uint8 c_value, uint8 interrupt) 
000054  b5ff              PUSH     {r0-r7,lr}
;;;36     {
000056  b081              SUB      sp,sp,#4
000058  4606              MOV      r6,r0
00005a  460f              MOV      r7,r1
00005c  9c0a              LDR      r4,[sp,#0x28]
;;;37       int i;
;;;38       
;;;39       /*enable the clock to SRTC module register space*/
;;;40       SIM_SCGC6 |= SIM_SCGC6_RTC_MASK;
00005e  48a0              LDR      r0,|L1.736|
000060  6bc0              LDR      r0,[r0,#0x3c]
000062  2101              MOVS     r1,#1
000064  0749              LSLS     r1,r1,#29
000066  4308              ORRS     r0,r0,r1
000068  499d              LDR      r1,|L1.736|
00006a  63c8              STR      r0,[r1,#0x3c]
;;;41       
;;;42       /*Only VBAT_POR has an effect on the SRTC, RESET to the part does not, so you must manually reset the SRTC to make sure everything is in a known state*/
;;;43       /*clear the software reset bit*/
;;;44         printf("Generating SoftWare reset to SRTC\n");
00006c  a09d              ADR      r0,|L1.740|
00006e  f7fffffe          BL       __2printf
;;;45     #ifdef CMSIS
;;;46         NVIC_DisableIRQ((IRQn_Type)interrupt);
000072  b260              SXTB     r0,r4
000074  f7fffffe          BL       NVIC_DisableIRQ
;;;47         NVIC_DisableIRQ((IRQn_Type)(interrupt+1));
000078  1c60              ADDS     r0,r4,#1
00007a  b240              SXTB     r0,r0
00007c  f7fffffe          BL       NVIC_DisableIRQ
;;;48     #else
;;;49         disable_irq(interrupt);
;;;50         disable_irq(interrupt+1);
;;;51     #endif
;;;52         RTC_CR  = RTC_CR_SWR_MASK;
000080  2001              MOVS     r0,#1
000082  4962              LDR      r1,|L1.524|
000084  6108              STR      r0,[r1,#0x10]
;;;53         RTC_CR  &= ~RTC_CR_SWR_MASK;  
000086  4608              MOV      r0,r1
000088  6900              LDR      r0,[r0,#0x10]
00008a  0840              LSRS     r0,r0,#1
00008c  0040              LSLS     r0,r0,#1
00008e  6108              STR      r0,[r1,#0x10]
;;;54       
;;;55         if (RTC_SR & RTC_SR_TIF_MASK){
000090  4608              MOV      r0,r1
000092  6940              LDR      r0,[r0,#0x14]
000094  07c0              LSLS     r0,r0,#31
000096  0fc0              LSRS     r0,r0,#31
000098  2800              CMP      r0,#0
00009a  d006              BEQ      |L1.170|
;;;56             RTC_TSR = 0x00000000;   //  this action clears the TIF
00009c  2000              MOVS     r0,#0
00009e  6008              STR      r0,[r1,#0]
;;;57             printf("RTC Invalid flag was set - Write to TSR done to clears RTC_SR =  %#02X \n",  ((unsigned int)RTC_SR) )  ;
0000a0  4608              MOV      r0,r1
0000a2  6941              LDR      r1,[r0,#0x14]
0000a4  4898              LDR      r0,|L1.776|
0000a6  f7fffffe          BL       __2printf
                  |L1.170|
;;;58         }
;;;59       /*Set time compensation parameters*/
;;;60       RTC_TCR = RTC_TCR_CIR(c_interval) | RTC_TCR_TCR(c_value);
0000aa  9803              LDR      r0,[sp,#0xc]
0000ac  0200              LSLS     r0,r0,#8
0000ae  21ff              MOVS     r1,#0xff
0000b0  0209              LSLS     r1,r1,#8
0000b2  4008              ANDS     r0,r0,r1
0000b4  9904              LDR      r1,[sp,#0x10]
0000b6  b2c9              UXTB     r1,r1
0000b8  4308              ORRS     r0,r0,r1
0000ba  4954              LDR      r1,|L1.524|
0000bc  60c8              STR      r0,[r1,#0xc]
;;;61       
;;;62       /*Enable the counter*/
;;;63       if (seconds >0) {
0000be  2e00              CMP      r6,#0
0000c0  d021              BEQ      |L1.262|
;;;64          /*Enable the interrupt*/
;;;65          if(interrupt >1){
0000c2  2c01              CMP      r4,#1
0000c4  dd02              BLE      |L1.204|
;;;66     #ifdef CMSIS
;;;67              NVIC_EnableIRQ((IRQn_Type)interrupt);
0000c6  b260              SXTB     r0,r4
0000c8  f7fffffe          BL       NVIC_EnableIRQ
                  |L1.204|
;;;68     #else
;;;69             enable_irq(interrupt);
;;;70     #endif
;;;71          }
;;;72          /*Enable the oscillator*/
;;;73         RTC_CR |= RTC_CR_OSCE_MASK;
0000cc  484f              LDR      r0,|L1.524|
0000ce  6900              LDR      r0,[r0,#0x10]
0000d0  21ff              MOVS     r1,#0xff
0000d2  3101              ADDS     r1,#1
0000d4  4308              ORRS     r0,r0,r1
0000d6  494d              LDR      r1,|L1.524|
0000d8  6108              STR      r0,[r1,#0x10]
;;;74       
;;;75         /*Wait to all the 32 kHz to stabilize, refer to the crystal startup time in the crystal datasheet*/
;;;76         for(i=0;i<0x600000;i++);
0000da  2500              MOVS     r5,#0
0000dc  e000              B        |L1.224|
                  |L1.222|
0000de  1c6d              ADDS     r5,r5,#1
                  |L1.224|
0000e0  2003              MOVS     r0,#3
0000e2  0540              LSLS     r0,r0,#21
0000e4  4285              CMP      r5,r0
0000e6  dbfa              BLT      |L1.222|
;;;77      
;;;78         RTC_IER |= RTC_IER_TSIE_MASK;
0000e8  4848              LDR      r0,|L1.524|
0000ea  69c0              LDR      r0,[r0,#0x1c]
0000ec  2110              MOVS     r1,#0x10
0000ee  4308              ORRS     r0,r0,r1
0000f0  4946              LDR      r1,|L1.524|
0000f2  61c8              STR      r0,[r1,#0x1c]
;;;79         RTC_SR |= RTC_SR_TCE_MASK;
0000f4  4608              MOV      r0,r1
0000f6  6940              LDR      r0,[r0,#0x14]
0000f8  2110              MOVS     r1,#0x10
0000fa  4308              ORRS     r0,r0,r1
0000fc  4943              LDR      r1,|L1.524|
0000fe  6148              STR      r0,[r1,#0x14]
;;;80         /*Configure the timer seconds and alarm registers*/
;;;81         RTC_TSR = seconds;
000100  4608              MOV      r0,r1
000102  6006              STR      r6,[r0,#0]
000104  e005              B        |L1.274|
                  |L1.262|
;;;82     
;;;83       } else {
;;;84         RTC_IER &= ~RTC_IER_TSIE_MASK;
000106  4841              LDR      r0,|L1.524|
000108  69c0              LDR      r0,[r0,#0x1c]
00010a  2110              MOVS     r1,#0x10
00010c  4388              BICS     r0,r0,r1
00010e  493f              LDR      r1,|L1.524|
000110  61c8              STR      r0,[r1,#0x1c]
                  |L1.274|
;;;85       }
;;;86       if (alarm >0) {
000112  2f00              CMP      r7,#0
000114  d021              BEQ      |L1.346|
;;;87         RTC_IER |= RTC_IER_TAIE_MASK;
000116  483d              LDR      r0,|L1.524|
000118  69c0              LDR      r0,[r0,#0x1c]
00011a  2104              MOVS     r1,#4
00011c  4308              ORRS     r0,r0,r1
00011e  493b              LDR      r1,|L1.524|
000120  61c8              STR      r0,[r1,#0x1c]
;;;88         RTC_SR |= RTC_SR_TCE_MASK;
000122  4608              MOV      r0,r1
000124  6940              LDR      r0,[r0,#0x14]
000126  2110              MOVS     r1,#0x10
000128  4308              ORRS     r0,r0,r1
00012a  4938              LDR      r1,|L1.524|
00012c  6148              STR      r0,[r1,#0x14]
;;;89         /*Configure the timer seconds and alarm registers*/
;;;90         RTC_TAR = alarm;
00012e  4608              MOV      r0,r1
000130  6087              STR      r7,[r0,#8]
;;;91          /*Enable the interrupt*/
;;;92          if(interrupt >1){
000132  2c01              CMP      r4,#1
000134  dd02              BLE      |L1.316|
;;;93     #ifdef CMSIS
;;;94              NVIC_EnableIRQ((IRQn_Type)interrupt);
000136  b260              SXTB     r0,r4
000138  f7fffffe          BL       NVIC_EnableIRQ
                  |L1.316|
;;;95     #else
;;;96             enable_irq(interrupt);
;;;97     #endif
;;;98          }
;;;99          /*Enable the oscillator*/
;;;100        RTC_CR |= RTC_CR_OSCE_MASK;
00013c  4833              LDR      r0,|L1.524|
00013e  6900              LDR      r0,[r0,#0x10]
000140  21ff              MOVS     r1,#0xff
000142  3101              ADDS     r1,#1
000144  4308              ORRS     r0,r0,r1
000146  4931              LDR      r1,|L1.524|
000148  6108              STR      r0,[r1,#0x10]
;;;101      
;;;102        /*Wait to all the 32 kHz to stabilize, refer to the crystal startup time in the crystal datasheet*/
;;;103        for(i=0;i<0x600000;i++);
00014a  2500              MOVS     r5,#0
00014c  e000              B        |L1.336|
                  |L1.334|
00014e  1c6d              ADDS     r5,r5,#1
                  |L1.336|
000150  2003              MOVS     r0,#3
000152  0540              LSLS     r0,r0,#21
000154  4285              CMP      r5,r0
000156  dbfa              BLT      |L1.334|
000158  e005              B        |L1.358|
                  |L1.346|
;;;104      } else {
;;;105        RTC_IER &= ~RTC_IER_TAIE_MASK;
00015a  482c              LDR      r0,|L1.524|
00015c  69c0              LDR      r0,[r0,#0x1c]
00015e  2104              MOVS     r1,#4
000160  4388              BICS     r0,r0,r1
000162  492a              LDR      r1,|L1.524|
000164  61c8              STR      r0,[r1,#0x1c]
                  |L1.358|
;;;106      }
;;;107      rtc_reg_report();
000166  f7fffffe          BL       rtc_reg_report
;;;108    }
00016a  b005              ADD      sp,sp,#0x14
00016c  bdf0              POP      {r4-r7,pc}
;;;109    
                          ENDP

                  rtc_isr PROC
;;;120    
;;;121    void rtc_isr(void) 
00016e  b510              PUSH     {r4,lr}
;;;122    {
;;;123       GPIOB_PSOR = 0x00080000;           // set Port B 19 indicate wakeup
000170  2001              MOVS     r0,#1
000172  04c0              LSLS     r0,r0,#19
000174  4965              LDR      r1,|L1.780|
000176  6048              STR      r0,[r1,#4]
;;;124       
;;;125       if((RTC_SR & RTC_SR_TIF_MASK)== 0x01)
000178  4824              LDR      r0,|L1.524|
00017a  6940              LDR      r0,[r0,#0x14]
00017c  07c0              LSLS     r0,r0,#31
00017e  0fc0              LSRS     r0,r0,#31
000180  2800              CMP      r0,#0
000182  d00a              BEQ      |L1.410|
;;;126         {
;;;127           printf("SRTC time invalid interrupt entered...\r\n");
000184  a062              ADR      r0,|L1.784|
000186  f7fffffe          BL       __2printf
;;;128       	   RTC_SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
00018a  4820              LDR      r0,|L1.524|
00018c  6940              LDR      r0,[r0,#0x14]
00018e  0740              LSLS     r0,r0,#29
000190  0f40              LSRS     r0,r0,#29
000192  491e              LDR      r1,|L1.524|
000194  6148              STR      r0,[r1,#0x14]
;;;129       	   RTC_TSR = 0x00000000;  //clear TIF 
000196  2000              MOVS     r0,#0
000198  6008              STR      r0,[r1,#0]
                  |L1.410|
;;;130    
;;;131    
;;;132         }	
;;;133       if((RTC_SR & RTC_SR_TOF_MASK) == 0x02)
00019a  481c              LDR      r0,|L1.524|
00019c  6940              LDR      r0,[r0,#0x14]
00019e  2102              MOVS     r1,#2
0001a0  4008              ANDS     r0,r0,r1
0001a2  2802              CMP      r0,#2
0001a4  d10a              BNE      |L1.444|
;;;134       {
;;;135       	   printf("SRTC time overflow interrupt entered...\r\n");
0001a6  a065              ADR      r0,|L1.828|
0001a8  f7fffffe          BL       __2printf
;;;136       	   RTC_SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
0001ac  4817              LDR      r0,|L1.524|
0001ae  6940              LDR      r0,[r0,#0x14]
0001b0  0740              LSLS     r0,r0,#29
0001b2  0f40              LSRS     r0,r0,#29
0001b4  4915              LDR      r1,|L1.524|
0001b6  6148              STR      r0,[r1,#0x14]
;;;137       	   RTC_TSR = 0x00000000;  //clear TOF
0001b8  2000              MOVS     r0,#0
0001ba  6008              STR      r0,[r1,#0]
                  |L1.444|
;;;138       }	 	
;;;139       if((RTC_SR & RTC_SR_TAF_MASK) == 0x04)
0001bc  4813              LDR      r0,|L1.524|
0001be  6940              LDR      r0,[r0,#0x14]
0001c0  2104              MOVS     r1,#4
0001c2  4008              ANDS     r0,r0,r1
0001c4  2804              CMP      r0,#4
0001c6  d10c              BNE      |L1.482|
;;;140       {
;;;141       	   printf("SRTC alarm interrupt entered...\r\n");
0001c8  a067              ADR      r0,|L1.872|
0001ca  f7fffffe          BL       __2printf
;;;142               printf("Time Seconds Register value is: %i\n", (int)RTC_TSR);
0001ce  480f              LDR      r0,|L1.524|
0001d0  6801              LDR      r1,[r0,#0]
0001d2  a06e              ADR      r0,|L1.908|
0001d4  f7fffffe          BL       __2printf
;;;143       	   RTC_TAR += 11;// Write new alarm value, to generate an alarm every second add 1
0001d8  480c              LDR      r0,|L1.524|
0001da  6880              LDR      r0,[r0,#8]
0001dc  300b              ADDS     r0,r0,#0xb
0001de  490b              LDR      r1,|L1.524|
0001e0  6088              STR      r0,[r1,#8]
                  |L1.482|
;;;144       }	
;;;145        return;
;;;146    }
0001e2  bd10              POP      {r4,pc}
                          ENDP

                  NVIC_EnableIRQ PROC
;;;780     */
;;;781    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
0001e4  2800              CMP      r0,#0
;;;782    {
;;;783      if ((int32_t)(IRQn) >= 0)
0001e6  db05              BLT      |L1.500|
;;;784      {
;;;785        NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
0001e8  06c2              LSLS     r2,r0,#27
0001ea  0ed2              LSRS     r2,r2,#27
0001ec  2101              MOVS     r1,#1
0001ee  4091              LSLS     r1,r1,r2
0001f0  4a6f              LDR      r2,|L1.944|
0001f2  6011              STR      r1,[r2,#0]
                  |L1.500|
;;;786      }
;;;787    }
0001f4  4770              BX       lr
;;;788    
                          ENDP

                  NVIC_DisableIRQ PROC
;;;795     */
;;;796    __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
0001f6  2800              CMP      r0,#0
;;;797    {
;;;798      if ((int32_t)(IRQn) >= 0)
0001f8  db06              BLT      |L1.520|
;;;799      {
;;;800        NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
0001fa  06c2              LSLS     r2,r0,#27
0001fc  0ed2              LSRS     r2,r2,#27
0001fe  2101              MOVS     r1,#1
000200  4091              LSLS     r1,r1,r2
000202  4a6b              LDR      r2,|L1.944|
000204  3280              ADDS     r2,r2,#0x80
000206  6011              STR      r1,[r2,#0]
                  |L1.520|
;;;801      }
;;;802    }
000208  4770              BX       lr
;;;803    
                          ENDP

00020a  0000              DCW      0x0000
                  |L1.524|
                          DCD      0x4003d000
                  |L1.528|
000210  5254435f          DCB      "RTC_TSR    = 0x%02X,    ",0
000214  54535220
000218  2020203d
00021c  20307825
000220  3032582c
000224  20202020
000228  00      
000229  00                DCB      0
00022a  00                DCB      0
00022b  00                DCB      0
                  |L1.556|
00022c  5254435f          DCB      "RTC_TPR    = 0x%02X\n",0
000230  54505220
000234  2020203d
000238  20307825
00023c  3032580a
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0
                  |L1.580|
000244  5254435f          DCB      "RTC_TAR    = 0x%02X,    ",0
000248  54415220
00024c  2020203d
000250  20307825
000254  3032582c
000258  20202020
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
000260  5254435f          DCB      "RTC_TCR    = 0x%02X\n",0
000264  54435220
000268  2020203d
00026c  20307825
000270  3032580a
000274  00      
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
                  |L1.632|
000278  5254435f          DCB      "RTC_CR     = 0x%02X,    ",0
00027c  43522020
000280  2020203d
000284  20307825
000288  3032582c
00028c  20202020
000290  00      
000291  00                DCB      0
000292  00                DCB      0
000293  00                DCB      0
                  |L1.660|
000294  5254435f          DCB      "RTC_SR     = 0x%02X\n",0
000298  53522020
00029c  2020203d
0002a0  20307825
0002a4  3032580a
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L1.684|
0002ac  5254435f          DCB      "RTC_LR     = 0x%02X,    ",0
0002b0  4c522020
0002b4  2020203d
0002b8  20307825
0002bc  3032582c
0002c0  20202020
0002c4  00      
0002c5  00                DCB      0
0002c6  00                DCB      0
0002c7  00                DCB      0
                  |L1.712|
0002c8  5254435f          DCB      "RTC_IER    = 0x%02X\n",0
0002cc  49455220
0002d0  2020203d
0002d4  20307825
0002d8  3032580a
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L1.736|
                          DCD      0x40048000
                  |L1.740|
0002e4  47656e65          DCB      "Generating SoftWare reset to SRTC\n",0
0002e8  72617469
0002ec  6e672053
0002f0  6f667457
0002f4  61726520
0002f8  72657365
0002fc  7420746f
000300  20535254
000304  430a00  
000307  00                DCB      0
                  |L1.776|
                          DCD      ||.conststring||
                  |L1.780|
                          DCD      0x400ff040
                  |L1.784|
000310  53525443          DCB      "SRTC time invalid interrupt entered...\r\n",0
000314  2074696d
000318  6520696e
00031c  76616c69
000320  6420696e
000324  74657272
000328  75707420
00032c  656e7465
000330  7265642e
000334  2e2e0d0a
000338  00      
000339  00                DCB      0
00033a  00                DCB      0
00033b  00                DCB      0
                  |L1.828|
00033c  53525443          DCB      "SRTC time overflow interrupt entered...\r\n",0
000340  2074696d
000344  65206f76
000348  6572666c
00034c  6f772069
000350  6e746572
000354  72757074
000358  20656e74
00035c  65726564
000360  2e2e2e0d
000364  0a00    
000366  00                DCB      0
000367  00                DCB      0
                  |L1.872|
000368  53525443          DCB      "SRTC alarm interrupt entered...\r\n",0
00036c  20616c61
000370  726d2069
000374  6e746572
000378  72757074
00037c  20656e74
000380  65726564
000384  2e2e2e0d
000388  0a00    
00038a  00                DCB      0
00038b  00                DCB      0
                  |L1.908|
00038c  54696d65          DCB      "Time Seconds Register value is: %i\n",0
000390  20536563
000394  6f6e6473
000398  20526567
00039c  69737465
0003a0  72207661
0003a4  6c756520
0003a8  69733a20
0003ac  25690a00
                  |L1.944|
                          DCD      0xe000e100

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  52544320          DCB      "RTC Invalid flag was set - Write to TSR done to clears "
000004  496e7661
000008  6c696420
00000c  666c6167
000010  20776173
000014  20736574
000018  202d2057
00001c  72697465
000020  20746f20
000024  54535220
000028  646f6e65
00002c  20746f20
000030  636c6561
000034  727320  
000037  5254435f          DCB      "RTC_SR =  %#02X \n",0
00003b  5352203d
00003f  20202523
000043  30325820
000047  0a00    

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\rtc\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_rtc_init____REV16|
#line 383 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0-Beta4\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_rtc_c_rtc_init____REV16| PROC
#line 384

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_rtc_init____REVSH|
#line 397
|__asm___5_rtc_c_rtc_init____REVSH| PROC
#line 398

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
