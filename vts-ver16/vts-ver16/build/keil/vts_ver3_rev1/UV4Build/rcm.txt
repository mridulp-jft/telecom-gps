; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\rcm.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\rcm.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -IC:\vts-ver17\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.11.0\Device\Include -D__UVISION_VERSION=520 -D_RTE_ -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\rcm.crf ..\..\..\src\drivers\rcm\rcm.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  outSRS PROC
;;;13      */
;;;14     void outSRS(void){                         //[outSRS]
000000  b510              PUSH     {r4,lr}
;;;15       
;;;16     	if (RCM_SRS1 & RCM_SRS1_SACKERR_MASK)
000002  485d              LDR      r0,|L1.376|
000004  7840              LDRB     r0,[r0,#1]
000006  2120              MOVS     r1,#0x20
000008  4008              ANDS     r0,r0,r1
00000a  2800              CMP      r0,#0
00000c  d002              BEQ      |L1.20|
;;;17     		printf("\n\rStop Mode Acknowledge Error Reset");
00000e  a05b              ADR      r0,|L1.380|
000010  f7fffffe          BL       __2printf
                  |L1.20|
;;;18     	if (RCM_SRS1 & RCM_SRS1_MDM_AP_MASK)
000014  4858              LDR      r0,|L1.376|
000016  7840              LDRB     r0,[r0,#1]
000018  2108              MOVS     r1,#8
00001a  4008              ANDS     r0,r0,r1
00001c  2800              CMP      r0,#0
00001e  d002              BEQ      |L1.38|
;;;19     		printf("\n\rMDM-AP Reset");
000020  a05f              ADR      r0,|L1.416|
000022  f7fffffe          BL       __2printf
                  |L1.38|
;;;20     	if (RCM_SRS1 & RCM_SRS1_SW_MASK)
000026  4854              LDR      r0,|L1.376|
000028  7840              LDRB     r0,[r0,#1]
00002a  2104              MOVS     r1,#4
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d002              BEQ      |L1.56|
;;;21     		printf("\n\rSoftware Reset");
000032  a05f              ADR      r0,|L1.432|
000034  f7fffffe          BL       __2printf
                  |L1.56|
;;;22     	if (RCM_SRS1 & RCM_SRS1_LOCKUP_MASK)
000038  484f              LDR      r0,|L1.376|
00003a  7840              LDRB     r0,[r0,#1]
00003c  2102              MOVS     r1,#2
00003e  4008              ANDS     r0,r0,r1
000040  2800              CMP      r0,#0
000042  d002              BEQ      |L1.74|
;;;23     		printf("\n\rCore Lockup Event Reset");
000044  a05f              ADR      r0,|L1.452|
000046  f7fffffe          BL       __2printf
                  |L1.74|
;;;24     	
;;;25     	if (RCM_SRS0 & RCM_SRS0_POR_MASK)
00004a  484b              LDR      r0,|L1.376|
00004c  7800              LDRB     r0,[r0,#0]
00004e  2180              MOVS     r1,#0x80
000050  4008              ANDS     r0,r0,r1
000052  2800              CMP      r0,#0
000054  d002              BEQ      |L1.92|
;;;26     		printf("\n\rPower-on Reset");
000056  a062              ADR      r0,|L1.480|
000058  f7fffffe          BL       __2printf
                  |L1.92|
;;;27     	if (RCM_SRS0 & RCM_SRS0_PIN_MASK)
00005c  4846              LDR      r0,|L1.376|
00005e  7800              LDRB     r0,[r0,#0]
000060  2140              MOVS     r1,#0x40
000062  4008              ANDS     r0,r0,r1
000064  2800              CMP      r0,#0
000066  d002              BEQ      |L1.110|
;;;28     		printf("\n\rExternal Pin Reset");
000068  a062              ADR      r0,|L1.500|
00006a  f7fffffe          BL       __2printf
                  |L1.110|
;;;29     	if (RCM_SRS0 & RCM_SRS0_WDOG_MASK)
00006e  4842              LDR      r0,|L1.376|
000070  7800              LDRB     r0,[r0,#0]
000072  2120              MOVS     r1,#0x20
000074  4008              ANDS     r0,r0,r1
000076  2800              CMP      r0,#0
000078  d002              BEQ      |L1.128|
;;;30     		printf("\n\rWatchdog(COP) Reset");
00007a  a064              ADR      r0,|L1.524|
00007c  f7fffffe          BL       __2printf
                  |L1.128|
;;;31     	if (RCM_SRS0 & RCM_SRS0_LOC_MASK)
000080  483d              LDR      r0,|L1.376|
000082  7800              LDRB     r0,[r0,#0]
000084  2104              MOVS     r1,#4
000086  4008              ANDS     r0,r0,r1
000088  2800              CMP      r0,#0
00008a  d002              BEQ      |L1.146|
;;;32     		printf("\n\rLoss of External Clock Reset");
00008c  a065              ADR      r0,|L1.548|
00008e  f7fffffe          BL       __2printf
                  |L1.146|
;;;33     	if (RCM_SRS0 & RCM_SRS0_LOL_MASK)
000092  4839              LDR      r0,|L1.376|
000094  7800              LDRB     r0,[r0,#0]
000096  2108              MOVS     r1,#8
000098  4008              ANDS     r0,r0,r1
00009a  2800              CMP      r0,#0
00009c  d002              BEQ      |L1.164|
;;;34     		printf("\n\rLoss of Lock in PLL Reset");
00009e  a069              ADR      r0,|L1.580|
0000a0  f7fffffe          BL       __2printf
                  |L1.164|
;;;35     	if (RCM_SRS0 & RCM_SRS0_LVD_MASK)
0000a4  4834              LDR      r0,|L1.376|
0000a6  7800              LDRB     r0,[r0,#0]
0000a8  2102              MOVS     r1,#2
0000aa  4008              ANDS     r0,r0,r1
0000ac  2800              CMP      r0,#0
0000ae  d002              BEQ      |L1.182|
;;;36     		printf("\n\rLow-voltage Detect Reset");
0000b0  a06b              ADR      r0,|L1.608|
0000b2  f7fffffe          BL       __2printf
                  |L1.182|
;;;37     	if (RCM_SRS0 & RCM_SRS0_WAKEUP_MASK)
0000b6  4830              LDR      r0,|L1.376|
0000b8  7800              LDRB     r0,[r0,#0]
0000ba  07c0              LSLS     r0,r0,#31
0000bc  0fc0              LSRS     r0,r0,#31
0000be  2800              CMP      r0,#0
0000c0  d047              BEQ      |L1.338|
;;;38             {
;;;39               printf("\n\r[outSRS]Wakeup bit set from low power mode ");
0000c2  a06e              ADR      r0,|L1.636|
0000c4  f7fffffe          BL       __2printf
;;;40               if ((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 3)
0000c8  4878              LDR      r0,|L1.684|
0000ca  7840              LDRB     r0,[r0,#1]
0000cc  0740              LSLS     r0,r0,#29
0000ce  0f40              LSRS     r0,r0,#29
0000d0  2803              CMP      r0,#3
0000d2  d102              BNE      |L1.218|
;;;41                 printf("LLS exit ") ;
0000d4  a076              ADR      r0,|L1.688|
0000d6  f7fffffe          BL       __2printf
                  |L1.218|
;;;42               if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 0))
0000da  4874              LDR      r0,|L1.684|
0000dc  7840              LDRB     r0,[r0,#1]
0000de  0740              LSLS     r0,r0,#29
0000e0  0f40              LSRS     r0,r0,#29
0000e2  2804              CMP      r0,#4
0000e4  d108              BNE      |L1.248|
0000e6  4871              LDR      r0,|L1.684|
0000e8  7880              LDRB     r0,[r0,#2]
0000ea  0740              LSLS     r0,r0,#29
0000ec  0f40              LSRS     r0,r0,#29
0000ee  2800              CMP      r0,#0
0000f0  d102              BNE      |L1.248|
;;;43                 printf("VLLS0 exit ") ;
0000f2  a072              ADR      r0,|L1.700|
0000f4  f7fffffe          BL       __2printf
                  |L1.248|
;;;44               if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 1))
0000f8  486c              LDR      r0,|L1.684|
0000fa  7840              LDRB     r0,[r0,#1]
0000fc  0740              LSLS     r0,r0,#29
0000fe  0f40              LSRS     r0,r0,#29
000100  2804              CMP      r0,#4
000102  d108              BNE      |L1.278|
000104  4869              LDR      r0,|L1.684|
000106  7880              LDRB     r0,[r0,#2]
000108  0740              LSLS     r0,r0,#29
00010a  0f40              LSRS     r0,r0,#29
00010c  2801              CMP      r0,#1
00010e  d102              BNE      |L1.278|
;;;45                 printf("VLLS1 exit ") ;
000110  a06d              ADR      r0,|L1.712|
000112  f7fffffe          BL       __2printf
                  |L1.278|
;;;46               if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 2))
000116  4865              LDR      r0,|L1.684|
000118  7840              LDRB     r0,[r0,#1]
00011a  0740              LSLS     r0,r0,#29
00011c  0f40              LSRS     r0,r0,#29
00011e  2804              CMP      r0,#4
000120  d108              BNE      |L1.308|
000122  4862              LDR      r0,|L1.684|
000124  7880              LDRB     r0,[r0,#2]
000126  0740              LSLS     r0,r0,#29
000128  0f40              LSRS     r0,r0,#29
00012a  2802              CMP      r0,#2
00012c  d102              BNE      |L1.308|
;;;47                 printf("VLLS2 exit") ;
00012e  a069              ADR      r0,|L1.724|
000130  f7fffffe          BL       __2printf
                  |L1.308|
;;;48               if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 3))
000134  485d              LDR      r0,|L1.684|
000136  7840              LDRB     r0,[r0,#1]
000138  0740              LSLS     r0,r0,#29
00013a  0f40              LSRS     r0,r0,#29
00013c  2804              CMP      r0,#4
00013e  d108              BNE      |L1.338|
000140  485a              LDR      r0,|L1.684|
000142  7880              LDRB     r0,[r0,#2]
000144  0740              LSLS     r0,r0,#29
000146  0f40              LSRS     r0,r0,#29
000148  2803              CMP      r0,#3
00014a  d102              BNE      |L1.338|
;;;49                 printf("VLLS3 exit ") ; 
00014c  a064              ADR      r0,|L1.736|
00014e  f7fffffe          BL       __2printf
                  |L1.338|
;;;50     	}
;;;51     
;;;52             if ((RCM_SRS0 == 0) && (RCM_SRS1 == 0)) 
000152  4809              LDR      r0,|L1.376|
000154  7800              LDRB     r0,[r0,#0]
000156  2800              CMP      r0,#0
000158  d10d              BNE      |L1.374|
00015a  4807              LDR      r0,|L1.376|
00015c  7840              LDRB     r0,[r0,#1]
00015e  2800              CMP      r0,#0
000160  d109              BNE      |L1.374|
;;;53             {
;;;54     	       printf("[outSRS]RCM_SRS0 is ZERO   = %#02X \r\n\r", (RCM_SRS0))  ;
000162  4805              LDR      r0,|L1.376|
000164  7801              LDRB     r1,[r0,#0]
000166  a061              ADR      r0,|L1.748|
000168  f7fffffe          BL       __2printf
;;;55     	       printf("[outSRS]RCM_SRS1 is ZERO   = %#02X \r\n\r", (RCM_SRS1))  ;	 
00016c  4802              LDR      r0,|L1.376|
00016e  7841              LDRB     r1,[r0,#1]
000170  a068              ADR      r0,|L1.788|
000172  f7fffffe          BL       __2printf
                  |L1.374|
;;;56             }
;;;57       }
000176  bd10              POP      {r4,pc}
;;;58     
                          ENDP

                  |L1.376|
                          DCD      0x4007f000
                  |L1.380|
00017c  0a0d5374          DCB      "\n\rStop Mode Acknowledge Error Reset",0
000180  6f70204d
000184  6f646520
000188  41636b6e
00018c  6f776c65
000190  64676520
000194  4572726f
000198  72205265
00019c  73657400
                  |L1.416|
0001a0  0a0d4d44          DCB      "\n\rMDM-AP Reset",0
0001a4  4d2d4150
0001a8  20526573
0001ac  657400  
0001af  00                DCB      0
                  |L1.432|
0001b0  0a0d536f          DCB      "\n\rSoftware Reset",0
0001b4  66747761
0001b8  72652052
0001bc  65736574
0001c0  00      
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L1.452|
0001c4  0a0d436f          DCB      "\n\rCore Lockup Event Reset",0
0001c8  7265204c
0001cc  6f636b75
0001d0  70204576
0001d4  656e7420
0001d8  52657365
0001dc  7400    
0001de  00                DCB      0
0001df  00                DCB      0
                  |L1.480|
0001e0  0a0d506f          DCB      "\n\rPower-on Reset",0
0001e4  7765722d
0001e8  6f6e2052
0001ec  65736574
0001f0  00      
0001f1  00                DCB      0
0001f2  00                DCB      0
0001f3  00                DCB      0
                  |L1.500|
0001f4  0a0d4578          DCB      "\n\rExternal Pin Reset",0
0001f8  7465726e
0001fc  616c2050
000200  696e2052
000204  65736574
000208  00      
000209  00                DCB      0
00020a  00                DCB      0
00020b  00                DCB      0
                  |L1.524|
00020c  0a0d5761          DCB      "\n\rWatchdog(COP) Reset",0
000210  74636864
000214  6f672843
000218  4f502920
00021c  52657365
000220  7400    
000222  00                DCB      0
000223  00                DCB      0
                  |L1.548|
000224  0a0d4c6f          DCB      "\n\rLoss of External Clock Reset",0
000228  7373206f
00022c  66204578
000230  7465726e
000234  616c2043
000238  6c6f636b
00023c  20526573
000240  657400  
000243  00                DCB      0
                  |L1.580|
000244  0a0d4c6f          DCB      "\n\rLoss of Lock in PLL Reset",0
000248  7373206f
00024c  66204c6f
000250  636b2069
000254  6e20504c
000258  4c205265
00025c  73657400
                  |L1.608|
000260  0a0d4c6f          DCB      "\n\rLow-voltage Detect Reset",0
000264  772d766f
000268  6c746167
00026c  65204465
000270  74656374
000274  20526573
000278  657400  
00027b  00                DCB      0
                  |L1.636|
00027c  0a0d5b6f          DCB      "\n\r[outSRS]Wakeup bit set from low power mode ",0
000280  75745352
000284  535d5761
000288  6b657570
00028c  20626974
000290  20736574
000294  2066726f
000298  6d206c6f
00029c  7720706f
0002a0  77657220
0002a4  6d6f6465
0002a8  2000    
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L1.684|
                          DCD      0x4007e000
                  |L1.688|
0002b0  4c4c5320          DCB      "LLS exit ",0
0002b4  65786974
0002b8  2000    
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L1.700|
0002bc  564c4c53          DCB      "VLLS0 exit ",0
0002c0  30206578
0002c4  69742000
                  |L1.712|
0002c8  564c4c53          DCB      "VLLS1 exit ",0
0002cc  31206578
0002d0  69742000
                  |L1.724|
0002d4  564c4c53          DCB      "VLLS2 exit",0
0002d8  32206578
0002dc  697400  
0002df  00                DCB      0
                  |L1.736|
0002e0  564c4c53          DCB      "VLLS3 exit ",0
0002e4  33206578
0002e8  69742000
                  |L1.748|
0002ec  5b6f7574          DCB      "[outSRS]RCM_SRS0 is ZERO   = %#02X \r\n\r",0
0002f0  5352535d
0002f4  52434d5f
0002f8  53525330
0002fc  20697320
000300  5a45524f
000304  2020203d
000308  20252330
00030c  3258200d
000310  0a0d00  
000313  00                DCB      0
                  |L1.788|
000314  5b6f7574          DCB      "[outSRS]RCM_SRS1 is ZERO   = %#02X \r\n\r",0
000318  5352535d
00031c  52434d5f
000320  53525331
000324  20697320
000328  5a45524f
00032c  2020203d
000330  20252330
000334  3258200d
000338  0a0d00  
00033b  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\rcm\\rcm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rcm_c_outSRS____REV16|
#line 383 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0-Beta4\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_rcm_c_outSRS____REV16| PROC
#line 384

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rcm_c_outSRS____REVSH|
#line 397
|__asm___5_rcm_c_outSRS____REVSH| PROC
#line 398

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
