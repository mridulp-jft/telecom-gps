; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\stdlib.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\stdlib.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -IE:\bitbuck\gps-trackr\Software\vts-ver18+\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.11.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\stdlib.crf ..\..\..\src\common\stdlib.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  isspace PROC
;;;13     int
;;;14     isspace (int ch)
000000  4601              MOV      r1,r0
;;;15     {
;;;16         if ((ch == ' ') || (ch == '\t'))    /* \n ??? */
000002  2920              CMP      r1,#0x20
000004  d001              BEQ      |L1.10|
000006  2909              CMP      r1,#9
000008  d101              BNE      |L1.14|
                  |L1.10|
;;;17             return TRUE;
00000a  2001              MOVS     r0,#1
                  |L1.12|
;;;18         else
;;;19             return FALSE;
;;;20     }
00000c  4770              BX       lr
                  |L1.14|
00000e  2000              MOVS     r0,#0                 ;19
000010  e7fc              B        |L1.12|
;;;21     
                          ENDP

                  isalnum PROC
;;;23     int
;;;24     isalnum (int ch)
000012  4601              MOV      r1,r0
;;;25     {
;;;26         /* ASCII only */
;;;27         if (((ch >= '0') && (ch <= '9')) ||
000014  2930              CMP      r1,#0x30
000016  db01              BLT      |L1.28|
000018  2939              CMP      r1,#0x39
00001a  dd07              BLE      |L1.44|
                  |L1.28|
;;;28             ((ch >= 'A') && (ch <= 'Z')) ||
00001c  2941              CMP      r1,#0x41
00001e  db01              BLT      |L1.36|
000020  295a              CMP      r1,#0x5a
000022  dd03              BLE      |L1.44|
                  |L1.36|
;;;29             ((ch >= 'a') && (ch <= 'z')))
000024  2961              CMP      r1,#0x61
000026  db03              BLT      |L1.48|
000028  297a              CMP      r1,#0x7a
00002a  dc01              BGT      |L1.48|
                  |L1.44|
;;;30             return TRUE;
00002c  2001              MOVS     r0,#1
                  |L1.46|
;;;31         else
;;;32             return FALSE;
;;;33     }
00002e  4770              BX       lr
                  |L1.48|
000030  2000              MOVS     r0,#0                 ;32
000032  e7fc              B        |L1.46|
;;;34     
                          ENDP

                  isdigit PROC
;;;36     int
;;;37     isdigit (int ch)
000034  4601              MOV      r1,r0
;;;38     {
;;;39         /* ASCII only */
;;;40         if ((ch >= '0') && (ch <= '9'))
000036  2930              CMP      r1,#0x30
000038  db03              BLT      |L1.66|
00003a  2939              CMP      r1,#0x39
00003c  dc01              BGT      |L1.66|
;;;41             return TRUE;
00003e  2001              MOVS     r0,#1
                  |L1.64|
;;;42         else
;;;43             return FALSE;
;;;44     }
000040  4770              BX       lr
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;43
000044  e7fc              B        |L1.64|
;;;45     
                          ENDP

                  isupper PROC
;;;47     int
;;;48     isupper (int ch)
000046  4601              MOV      r1,r0
;;;49     {
;;;50         /* ASCII only */
;;;51         if ((ch >= 'A') && (ch <= 'Z'))	
000048  2941              CMP      r1,#0x41
00004a  db03              BLT      |L1.84|
00004c  295a              CMP      r1,#0x5a
00004e  dc01              BGT      |L1.84|
;;;52             return TRUE;
000050  2001              MOVS     r0,#1
                  |L1.82|
;;;53         else
;;;54             return FALSE;
;;;55     }
000052  4770              BX       lr
                  |L1.84|
000054  2000              MOVS     r0,#0                 ;54
000056  e7fc              B        |L1.82|
;;;56     
                          ENDP

                  strcasecmp PROC
;;;58     int
;;;59     strcasecmp (const char *s1, const char *s2)
000058  b530              PUSH     {r4,r5,lr}
;;;60     {
00005a  4603              MOV      r3,r0
00005c  460c              MOV      r4,r1
;;;61         char    c1, c2;
;;;62         int     result = 0;
00005e  2000              MOVS     r0,#0
;;;63     
;;;64         while (result == 0)
000060  e01a              B        |L1.152|
                  |L1.98|
;;;65         {
;;;66             c1 = *s1++;
000062  7819              LDRB     r1,[r3,#0]
000064  1c5b              ADDS     r3,r3,#1
;;;67             c2 = *s2++;
000066  7822              LDRB     r2,[r4,#0]
000068  1c64              ADDS     r4,r4,#1
;;;68             if ((c1 >= 'a') && (c1 <= 'z'))
00006a  2961              CMP      r1,#0x61
00006c  db04              BLT      |L1.120|
00006e  297a              CMP      r1,#0x7a
000070  dc02              BGT      |L1.120|
;;;69                 c1 = (char)(c1 - ' ');
000072  460d              MOV      r5,r1
000074  3d20              SUBS     r5,r5,#0x20
000076  b2e9              UXTB     r1,r5
                  |L1.120|
;;;70             if ((c2 >= 'a') && (c2 <= 'z'))
000078  2a61              CMP      r2,#0x61
00007a  db04              BLT      |L1.134|
00007c  2a7a              CMP      r2,#0x7a
00007e  dc02              BGT      |L1.134|
;;;71                 c2 = (char)(c2 - ' ');
000080  4615              MOV      r5,r2
000082  3d20              SUBS     r5,r5,#0x20
000084  b2ea              UXTB     r2,r5
                  |L1.134|
;;;72             if ((result = (c1 - c2)) != 0)
000086  1a8d              SUBS     r5,r1,r2
000088  1e28              SUBS     r0,r5,#0
00008a  d000              BEQ      |L1.142|
;;;73                 break;
00008c  e006              B        |L1.156|
                  |L1.142|
;;;74             if ((c1 == 0) || (c2 == 0))
00008e  2900              CMP      r1,#0
000090  d001              BEQ      |L1.150|
000092  2a00              CMP      r2,#0
000094  d100              BNE      |L1.152|
                  |L1.150|
;;;75                 break;
000096  e001              B        |L1.156|
                  |L1.152|
000098  2800              CMP      r0,#0                 ;64
00009a  d0e2              BEQ      |L1.98|
                  |L1.156|
00009c  bf00              NOP                            ;73
;;;76         }
;;;77         return result;
;;;78     }
00009e  bd30              POP      {r4,r5,pc}
;;;79     
                          ENDP

                  strncasecmp PROC
;;;82     int
;;;83     strncasecmp (const char *s1, const char *s2, int n)
0000a0  b5f8              PUSH     {r3-r7,lr}
;;;84     {
0000a2  4603              MOV      r3,r0
0000a4  460c              MOV      r4,r1
0000a6  4615              MOV      r5,r2
;;;85         char    c1, c2;
;;;86         int     k = 0;
0000a8  2600              MOVS     r6,#0
;;;87         int     result = 0;
0000aa  2000              MOVS     r0,#0
0000ac  9000              STR      r0,[sp,#0]
;;;88     
;;;89         while ( k++ < n )
0000ae  e01b              B        |L1.232|
                  |L1.176|
;;;90         {
;;;91             c1 = *s1++;
0000b0  7819              LDRB     r1,[r3,#0]
0000b2  1c5b              ADDS     r3,r3,#1
;;;92             c2 = *s2++;
0000b4  7822              LDRB     r2,[r4,#0]
0000b6  1c64              ADDS     r4,r4,#1
;;;93             if ((c1 >= 'a') && (c1 <= 'z'))
0000b8  2961              CMP      r1,#0x61
0000ba  db04              BLT      |L1.198|
0000bc  297a              CMP      r1,#0x7a
0000be  dc02              BGT      |L1.198|
;;;94                 c1 = (char)(c1 - ' ');
0000c0  4608              MOV      r0,r1
0000c2  3820              SUBS     r0,r0,#0x20
0000c4  b2c1              UXTB     r1,r0
                  |L1.198|
;;;95             if ((c2 >= 'a') && (c2 <= 'z'))
0000c6  2a61              CMP      r2,#0x61
0000c8  db04              BLT      |L1.212|
0000ca  2a7a              CMP      r2,#0x7a
0000cc  dc02              BGT      |L1.212|
;;;96                 c2 = (char)(c2 - ' ');
0000ce  4610              MOV      r0,r2
0000d0  3820              SUBS     r0,r0,#0x20
0000d2  b2c2              UXTB     r2,r0
                  |L1.212|
;;;97             if ((result = (c1 - c2)) != 0)
0000d4  1a88              SUBS     r0,r1,r2
0000d6  9000              STR      r0,[sp,#0]
0000d8  2800              CMP      r0,#0
0000da  d000              BEQ      |L1.222|
;;;98                 break;
0000dc  e008              B        |L1.240|
                  |L1.222|
;;;99             if ((c1 == 0) || (c2 == 0))
0000de  2900              CMP      r1,#0
0000e0  d001              BEQ      |L1.230|
0000e2  2a00              CMP      r2,#0
0000e4  d100              BNE      |L1.232|
                  |L1.230|
;;;100                break;
0000e6  e003              B        |L1.240|
                  |L1.232|
0000e8  4630              MOV      r0,r6                 ;89
0000ea  1c76              ADDS     r6,r6,#1              ;89
0000ec  42a8              CMP      r0,r5                 ;89
0000ee  dbdf              BLT      |L1.176|
                  |L1.240|
0000f0  bf00              NOP                            ;98
;;;101        }
;;;102        return result;
0000f2  9800              LDR      r0,[sp,#0]
;;;103    }
0000f4  bdf8              POP      {r3-r7,pc}
;;;104    
                          ENDP

                  strtoul PROC
;;;106    uint32
;;;107    strtoul (char *str, char **ptr, int base)
0000f6  b5fe              PUSH     {r1-r7,lr}
;;;108    {
0000f8  4606              MOV      r6,r0
0000fa  460c              MOV      r4,r1
;;;109        unsigned long rvalue;
;;;110        int c, err, neg;
;;;111        char *endp;
;;;112        char *startp;
;;;113    
;;;114        rvalue = 0;  err = 0;  neg = 0;
0000fc  2000              MOVS     r0,#0
0000fe  9002              STR      r0,[sp,#8]
000100  9001              STR      r0,[sp,#4]
000102  9000              STR      r0,[sp,#0]
;;;115    
;;;116        /* Check for invalid arguments */
;;;117        if ((str == NULL) || (base < 0) || (base == 1) || (base > 36))
000104  2e00              CMP      r6,#0
000106  d005              BEQ      |L1.276|
000108  2a00              CMP      r2,#0
00010a  db03              BLT      |L1.276|
00010c  2a01              CMP      r2,#1
00010e  d001              BEQ      |L1.276|
000110  2a24              CMP      r2,#0x24
000112  dd04              BLE      |L1.286|
                  |L1.276|
;;;118        {
;;;119            if (ptr != NULL)
000114  2c00              CMP      r4,#0
000116  d000              BEQ      |L1.282|
;;;120            {
;;;121                *ptr = str;
000118  6026              STR      r6,[r4,#0]
                  |L1.282|
;;;122            }
;;;123            return 0;
00011a  2000              MOVS     r0,#0
                  |L1.284|
;;;124        }
;;;125    
;;;126        /* Skip leading white spaces */
;;;127        for (startp = str; isspace(*startp); ++startp)
;;;128            ;
;;;129    
;;;130        /* Check for notations */
;;;131        switch (startp[0])
;;;132        {
;;;133            case '0':
;;;134                if ((startp[1] == 'x') || (startp[1] == 'X'))
;;;135                {
;;;136                    if ((base == 0) || (base == 16))
;;;137                    {
;;;138                        base = 16;
;;;139                        startp = &startp[2];
;;;140                    }
;;;141                }
;;;142                break;
;;;143            case '-':
;;;144                neg = 1;
;;;145                startp = &startp[1];
;;;146                break;
;;;147            default:
;;;148                break;
;;;149        }
;;;150    
;;;151        if (base == 0)
;;;152            base = 10;
;;;153    
;;;154        /* Check for invalid chars in str */
;;;155        for ( endp = startp; (c = *endp) != '\0'; ++endp)
;;;156        {
;;;157            /* Check for 0..9,Aa-Zz */
;;;158            if (!isalnum(c))
;;;159            {
;;;160                err = 1;
;;;161                break;
;;;162            }
;;;163    
;;;164            /* Convert char to num in 0..36 */
;;;165            if (isdigit(c))
;;;166            {
;;;167                c = c - '0';
;;;168            }
;;;169            else
;;;170            {
;;;171                if (isupper(c))
;;;172                {
;;;173                    c = c - 'A' + 10;
;;;174                }
;;;175                else
;;;176                {
;;;177                    c = c - 'a' + 10;
;;;178                }
;;;179            }
;;;180    
;;;181            /* check c against base */
;;;182            if (c >= base)
;;;183            {
;;;184                err = 1;
;;;185                break;
;;;186            }
;;;187    
;;;188            if (neg)
;;;189            {
;;;190                rvalue = (rvalue * base) - c;
;;;191            }
;;;192            else
;;;193            {
;;;194                rvalue = (rvalue * base) + c;
;;;195            }
;;;196        }
;;;197    
;;;198        /* Upon exit, endp points to the character at which valid info */
;;;199        /* STOPS.  No chars including and beyond endp are used.        */
;;;200    
;;;201        if (ptr != NULL)
;;;202            *ptr = endp;
;;;203    
;;;204        if (err)
;;;205        {
;;;206            if (ptr != NULL)
;;;207                *ptr = str;
;;;208            
;;;209            return 0;
;;;210        }
;;;211        else
;;;212        {
;;;213            return rvalue;
;;;214        }
;;;215    }
00011c  bdfe              POP      {r1-r7,pc}
                  |L1.286|
00011e  4633              MOV      r3,r6                 ;127
000120  e000              B        |L1.292|
                  |L1.290|
000122  1c5b              ADDS     r3,r3,#1              ;127
                  |L1.292|
000124  7818              LDRB     r0,[r3,#0]            ;127
000126  f7fffffe          BL       isspace
00012a  2800              CMP      r0,#0                 ;127
00012c  d1f9              BNE      |L1.290|
00012e  7818              LDRB     r0,[r3,#0]            ;131
000130  282d              CMP      r0,#0x2d              ;131
000132  d00e              BEQ      |L1.338|
000134  2830              CMP      r0,#0x30              ;131
000136  d110              BNE      |L1.346|
000138  7858              LDRB     r0,[r3,#1]            ;134
00013a  2878              CMP      r0,#0x78              ;134
00013c  d002              BEQ      |L1.324|
00013e  7858              LDRB     r0,[r3,#1]            ;134
000140  2858              CMP      r0,#0x58              ;134
000142  d105              BNE      |L1.336|
                  |L1.324|
000144  2a00              CMP      r2,#0                 ;136
000146  d001              BEQ      |L1.332|
000148  2a10              CMP      r2,#0x10              ;136
00014a  d101              BNE      |L1.336|
                  |L1.332|
00014c  2210              MOVS     r2,#0x10              ;138
00014e  1c9b              ADDS     r3,r3,#2              ;139
                  |L1.336|
000150  e004              B        |L1.348|
                  |L1.338|
000152  2001              MOVS     r0,#1                 ;144
000154  9000              STR      r0,[sp,#0]            ;144
000156  1c5b              ADDS     r3,r3,#1              ;145
000158  e000              B        |L1.348|
                  |L1.346|
00015a  bf00              NOP                            ;148
                  |L1.348|
00015c  bf00              NOP                            ;142
00015e  2a00              CMP      r2,#0                 ;151
000160  d100              BNE      |L1.356|
000162  220a              MOVS     r2,#0xa               ;152
                  |L1.356|
000164  461f              MOV      r7,r3                 ;155
000166  e028              B        |L1.442|
                  |L1.360|
000168  4628              MOV      r0,r5                 ;158
00016a  f7fffffe          BL       isalnum
00016e  2800              CMP      r0,#0                 ;158
000170  d102              BNE      |L1.376|
000172  2001              MOVS     r0,#1                 ;160
000174  9001              STR      r0,[sp,#4]            ;160
000176  e023              B        |L1.448|
                  |L1.376|
000178  4628              MOV      r0,r5                 ;165
00017a  f7fffffe          BL       isdigit
00017e  2800              CMP      r0,#0                 ;165
000180  d001              BEQ      |L1.390|
000182  3d30              SUBS     r5,r5,#0x30           ;167
000184  e007              B        |L1.406|
                  |L1.390|
000186  4628              MOV      r0,r5                 ;171
000188  f7fffffe          BL       isupper
00018c  2800              CMP      r0,#0                 ;171
00018e  d001              BEQ      |L1.404|
000190  3d37              SUBS     r5,r5,#0x37           ;173
000192  e000              B        |L1.406|
                  |L1.404|
000194  3d57              SUBS     r5,r5,#0x57           ;177
                  |L1.406|
000196  4295              CMP      r5,r2                 ;182
000198  db02              BLT      |L1.416|
00019a  2001              MOVS     r0,#1                 ;184
00019c  9001              STR      r0,[sp,#4]            ;184
00019e  e00f              B        |L1.448|
                  |L1.416|
0001a0  9800              LDR      r0,[sp,#0]            ;188
0001a2  2800              CMP      r0,#0                 ;188
0001a4  d004              BEQ      |L1.432|
0001a6  9802              LDR      r0,[sp,#8]            ;190
0001a8  4350              MULS     r0,r2,r0              ;190
0001aa  1b40              SUBS     r0,r0,r5              ;190
0001ac  9002              STR      r0,[sp,#8]            ;190
0001ae  e003              B        |L1.440|
                  |L1.432|
0001b0  9802              LDR      r0,[sp,#8]            ;194
0001b2  4350              MULS     r0,r2,r0              ;194
0001b4  1940              ADDS     r0,r0,r5              ;194
0001b6  9002              STR      r0,[sp,#8]            ;194
                  |L1.440|
0001b8  1c7f              ADDS     r7,r7,#1              ;155
                  |L1.442|
0001ba  7838              LDRB     r0,[r7,#0]            ;155
0001bc  1e05              SUBS     r5,r0,#0              ;155
0001be  d1d3              BNE      |L1.360|
                  |L1.448|
0001c0  bf00              NOP                            ;161
0001c2  2c00              CMP      r4,#0                 ;201
0001c4  d000              BEQ      |L1.456|
0001c6  6027              STR      r7,[r4,#0]            ;202
                  |L1.456|
0001c8  9801              LDR      r0,[sp,#4]            ;204
0001ca  2800              CMP      r0,#0                 ;204
0001cc  d004              BEQ      |L1.472|
0001ce  2c00              CMP      r4,#0                 ;206
0001d0  d000              BEQ      |L1.468|
0001d2  6026              STR      r6,[r4,#0]            ;207
                  |L1.468|
0001d4  2000              MOVS     r0,#0                 ;209
0001d6  e7a1              B        |L1.284|
                  |L1.472|
0001d8  9802              LDR      r0,[sp,#8]            ;213
0001da  e79f              B        |L1.284|
;;;216    
                          ENDP

                  strlen PROC
;;;218    int
;;;219    strlen (const char *str)
0001dc  b510              PUSH     {r4,lr}
;;;220    {
0001de  4601              MOV      r1,r0
;;;221        char *s = (char *)str;
0001e0  460a              MOV      r2,r1
;;;222        int len = 0;
0001e2  2300              MOVS     r3,#0
;;;223    
;;;224        if (s == NULL)
0001e4  2a00              CMP      r2,#0
0001e6  d101              BNE      |L1.492|
;;;225            return 0;
0001e8  2000              MOVS     r0,#0
                  |L1.490|
;;;226    
;;;227        while (*s++ != '\0')
;;;228            ++len;
;;;229    
;;;230        return len;
;;;231    }
0001ea  bd10              POP      {r4,pc}
                  |L1.492|
0001ec  e000              B        |L1.496|
                  |L1.494|
0001ee  1c5b              ADDS     r3,r3,#1              ;228
                  |L1.496|
0001f0  7814              LDRB     r4,[r2,#0]            ;227
0001f2  1c52              ADDS     r2,r2,#1              ;227
0001f4  2c00              CMP      r4,#0                 ;227
0001f6  d1fa              BNE      |L1.494|
0001f8  4618              MOV      r0,r3                 ;230
0001fa  e7f6              B        |L1.490|
;;;232    
                          ENDP

                  strcat PROC
;;;234    char *
;;;235    strcat (char *dest, const char *src)
0001fc  b5f0              PUSH     {r4-r7,lr}
;;;236    {
0001fe  4605              MOV      r5,r0
000200  460e              MOV      r6,r1
;;;237        char *dp;
;;;238        char *sp = (char *)src;
000202  4637              MOV      r7,r6
;;;239    
;;;240        if ((dest != NULL) && (src != NULL))
000204  2d00              CMP      r5,#0
000206  d00e              BEQ      |L1.550|
000208  2e00              CMP      r6,#0
00020a  d00c              BEQ      |L1.550|
;;;241        {
;;;242            dp = &dest[strlen(dest)];
00020c  4628              MOV      r0,r5
00020e  f7fffffe          BL       strlen
000212  1944              ADDS     r4,r0,r5
;;;243    
;;;244            while (*sp != '\0')
000214  e003              B        |L1.542|
                  |L1.534|
;;;245            {
;;;246                *dp++ = *sp++;
000216  7838              LDRB     r0,[r7,#0]
000218  7020              STRB     r0,[r4,#0]
00021a  1c7f              ADDS     r7,r7,#1
00021c  1c64              ADDS     r4,r4,#1
                  |L1.542|
00021e  7838              LDRB     r0,[r7,#0]            ;244
000220  2800              CMP      r0,#0                 ;244
000222  d1f8              BNE      |L1.534|
;;;247            }
;;;248            *dp = '\0';
000224  7020              STRB     r0,[r4,#0]
                  |L1.550|
;;;249        }
;;;250        return dest;
000226  4628              MOV      r0,r5
;;;251    }
000228  bdf0              POP      {r4-r7,pc}
;;;252    
                          ENDP

                  strncat PROC
;;;254    char *
;;;255    strncat (char *dest, const char *src, int n)
00022a  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;256    {
00022c  4605              MOV      r5,r0
00022e  460e              MOV      r6,r1
;;;257        char *dp;
;;;258        char *sp = (char *)src;
000230  4637              MOV      r7,r6
;;;259    
;;;260        if ((dest != NULL) && (src != NULL) && (n > 0))
000232  2d00              CMP      r5,#0
000234  d017              BEQ      |L1.614|
000236  2e00              CMP      r6,#0
000238  d015              BEQ      |L1.614|
00023a  9802              LDR      r0,[sp,#8]
00023c  2800              CMP      r0,#0
00023e  dd12              BLE      |L1.614|
;;;261        {
;;;262            dp = &dest[strlen(dest)];
000240  4628              MOV      r0,r5
000242  f7fffffe          BL       strlen
000246  1944              ADDS     r4,r0,r5
;;;263    
;;;264            while ((*sp != '\0') && (n-- > 0))
000248  e003              B        |L1.594|
                  |L1.586|
;;;265            {
;;;266                *dp++ = *sp++;
00024a  7838              LDRB     r0,[r7,#0]
00024c  7020              STRB     r0,[r4,#0]
00024e  1c7f              ADDS     r7,r7,#1
000250  1c64              ADDS     r4,r4,#1
                  |L1.594|
000252  7838              LDRB     r0,[r7,#0]            ;264
000254  2800              CMP      r0,#0                 ;264
000256  d004              BEQ      |L1.610|
000258  9802              LDR      r0,[sp,#8]            ;264
00025a  1e41              SUBS     r1,r0,#1              ;264
00025c  9102              STR      r1,[sp,#8]            ;264
00025e  2800              CMP      r0,#0                 ;264
000260  dcf3              BGT      |L1.586|
                  |L1.610|
;;;267            }
;;;268            *dp = '\0';
000262  2000              MOVS     r0,#0
000264  7020              STRB     r0,[r4,#0]
                  |L1.614|
;;;269        }
;;;270        return dest;
000266  4628              MOV      r0,r5
;;;271    }
000268  bdfe              POP      {r1-r7,pc}
;;;272    
                          ENDP

                  strcpy PROC
;;;274    char *
;;;275    strcpy (char *dest, const char *src)
00026a  b510              PUSH     {r4,lr}
;;;276    {
00026c  460a              MOV      r2,r1
;;;277        char *dp = (char *)dest;
00026e  4601              MOV      r1,r0
;;;278        char *sp = (char *)src;
000270  4613              MOV      r3,r2
;;;279    
;;;280        if ((dest != NULL) && (src != NULL))
000272  2800              CMP      r0,#0
000274  d00a              BEQ      |L1.652|
000276  2a00              CMP      r2,#0
000278  d008              BEQ      |L1.652|
;;;281        {
;;;282            while (*sp != '\0')
00027a  e003              B        |L1.644|
                  |L1.636|
;;;283            {
;;;284                *dp++ = *sp++;
00027c  781c              LDRB     r4,[r3,#0]
00027e  700c              STRB     r4,[r1,#0]
000280  1c5b              ADDS     r3,r3,#1
000282  1c49              ADDS     r1,r1,#1
                  |L1.644|
000284  781c              LDRB     r4,[r3,#0]            ;282
000286  2c00              CMP      r4,#0                 ;282
000288  d1f8              BNE      |L1.636|
;;;285            }
;;;286            *dp = '\0';
00028a  700c              STRB     r4,[r1,#0]
                  |L1.652|
;;;287        }
;;;288        return dest;
;;;289    }
00028c  bd10              POP      {r4,pc}
;;;290    
                          ENDP

                  strncpy PROC
;;;292    char *
;;;293    strncpy (char *dest, const char *src, int n)
00028e  b570              PUSH     {r4-r6,lr}
;;;294    {
000290  460b              MOV      r3,r1
;;;295        char *dp = (char *)dest;
000292  4601              MOV      r1,r0
;;;296        char *sp = (char *)src;
000294  461c              MOV      r4,r3
;;;297    
;;;298        if ((dest != NULL) && (src != NULL) && (n > 0))
000296  2800              CMP      r0,#0
000298  d011              BEQ      |L1.702|
00029a  2b00              CMP      r3,#0
00029c  d00f              BEQ      |L1.702|
00029e  2a00              CMP      r2,#0
0002a0  dd0d              BLE      |L1.702|
;;;299        {
;;;300            while ((*sp != '\0') && (n-- > 0))
0002a2  e003              B        |L1.684|
                  |L1.676|
;;;301            {
;;;302                *dp++ = *sp++;
0002a4  7825              LDRB     r5,[r4,#0]
0002a6  700d              STRB     r5,[r1,#0]
0002a8  1c64              ADDS     r4,r4,#1
0002aa  1c49              ADDS     r1,r1,#1
                  |L1.684|
0002ac  7825              LDRB     r5,[r4,#0]            ;300
0002ae  2d00              CMP      r5,#0                 ;300
0002b0  d003              BEQ      |L1.698|
0002b2  4615              MOV      r5,r2                 ;300
0002b4  1e52              SUBS     r2,r2,#1              ;300
0002b6  2d00              CMP      r5,#0                 ;300
0002b8  dcf4              BGT      |L1.676|
                  |L1.698|
;;;303            }
;;;304            *dp = '\0';
0002ba  2500              MOVS     r5,#0
0002bc  700d              STRB     r5,[r1,#0]
                  |L1.702|
;;;305        }
;;;306        return dest;
;;;307    }
0002be  bd70              POP      {r4-r6,pc}
;;;308    
                          ENDP

                  strcmp PROC
;;;310    int
;;;311    strcmp (const char *s1, const char *s2)
0002c0  b530              PUSH     {r4,r5,lr}
;;;312    {
0002c2  4603              MOV      r3,r0
0002c4  460c              MOV      r4,r1
;;;313        /* No checks for NULL */
;;;314        char *s1p = (char *)s1;
0002c6  461a              MOV      r2,r3
;;;315        char *s2p = (char *)s2;
0002c8  4621              MOV      r1,r4
;;;316    
;;;317        while (*s2p != '\0')
0002ca  e006              B        |L1.730|
                  |L1.716|
;;;318        {
;;;319            if (*s1p != *s2p)
0002cc  7810              LDRB     r0,[r2,#0]
0002ce  780d              LDRB     r5,[r1,#0]
0002d0  42a8              CMP      r0,r5
0002d2  d000              BEQ      |L1.726|
;;;320                break;
0002d4  e004              B        |L1.736|
                  |L1.726|
;;;321    
;;;322            ++s1p;
0002d6  1c52              ADDS     r2,r2,#1
;;;323            ++s2p;
0002d8  1c49              ADDS     r1,r1,#1
                  |L1.730|
0002da  7808              LDRB     r0,[r1,#0]            ;317
0002dc  2800              CMP      r0,#0                 ;317
0002de  d1f5              BNE      |L1.716|
                  |L1.736|
0002e0  bf00              NOP                            ;320
;;;324        }
;;;325        return (*s1p - *s2p);
0002e2  7810              LDRB     r0,[r2,#0]
0002e4  780d              LDRB     r5,[r1,#0]
0002e6  1b40              SUBS     r0,r0,r5
;;;326    }
0002e8  bd30              POP      {r4,r5,pc}
;;;327    
                          ENDP

                  strncmp PROC
;;;329    int
;;;330    strncmp (const char *s1, const char *s2, int n)
0002ea  b570              PUSH     {r4-r6,lr}
;;;331    {
0002ec  4604              MOV      r4,r0
0002ee  460d              MOV      r5,r1
;;;332        /* No checks for NULL */
;;;333        char *s1p = (char *)s1;
0002f0  4623              MOV      r3,r4
;;;334        char *s2p = (char *)s2;
0002f2  4629              MOV      r1,r5
;;;335    
;;;336        if (n <= 0)
0002f4  2a00              CMP      r2,#0
0002f6  dc01              BGT      |L1.764|
;;;337            return 0;
0002f8  2000              MOVS     r0,#0
                  |L1.762|
;;;338    
;;;339        while (*s2p != '\0')
;;;340        {
;;;341            if (*s1p != *s2p)
;;;342                break;
;;;343    
;;;344            if (--n == 0)
;;;345                break;
;;;346    
;;;347            ++s1p;
;;;348            ++s2p;
;;;349        }
;;;350        return (*s1p - *s2p);
;;;351    }
0002fa  bd70              POP      {r4-r6,pc}
                  |L1.764|
0002fc  e00a              B        |L1.788|
                  |L1.766|
0002fe  7818              LDRB     r0,[r3,#0]            ;341
000300  780e              LDRB     r6,[r1,#0]            ;341
000302  42b0              CMP      r0,r6                 ;341
000304  d000              BEQ      |L1.776|
000306  e008              B        |L1.794|
                  |L1.776|
000308  1e50              SUBS     r0,r2,#1              ;344
00030a  1e02              SUBS     r2,r0,#0              ;344
00030c  d100              BNE      |L1.784|
00030e  e004              B        |L1.794|
                  |L1.784|
000310  1c5b              ADDS     r3,r3,#1              ;347
000312  1c49              ADDS     r1,r1,#1              ;348
                  |L1.788|
000314  7808              LDRB     r0,[r1,#0]            ;339
000316  2800              CMP      r0,#0                 ;339
000318  d1f1              BNE      |L1.766|
                  |L1.794|
00031a  bf00              NOP                            ;342
00031c  7818              LDRB     r0,[r3,#0]            ;350
00031e  780e              LDRB     r6,[r1,#0]            ;350
000320  1b80              SUBS     r0,r0,r6              ;350
000322  e7ea              B        |L1.762|
;;;352    
                          ENDP

                  memcpy PROC
;;;354    void *
;;;355    memcpy (void *dest, const void *src, unsigned n)
000324  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;356    {
000326  b081              SUB      sp,sp,#4
;;;357        int longs, bytes;
;;;358        uint32 *dpl = (uint32 *)dest;
000328  9901              LDR      r1,[sp,#4]
;;;359        uint32 *spl = (uint32 *)src;
00032a  9c02              LDR      r4,[sp,#8]
;;;360        uint8  *dpb, *spb;
;;;361    
;;;362        if ((dest != NULL) && (src != NULL) && (n > 0))
00032c  9901              LDR      r1,[sp,#4]
00032e  2900              CMP      r1,#0
000330  d01c              BEQ      |L1.876|
000332  9802              LDR      r0,[sp,#8]
000334  2800              CMP      r0,#0
000336  d019              BEQ      |L1.876|
000338  2a00              CMP      r2,#0
00033a  d017              BEQ      |L1.876|
;;;363        {
;;;364            bytes = (n & 0x3);
00033c  0793              LSLS     r3,r2,#30
00033e  0f9b              LSRS     r3,r3,#30
;;;365            longs = (n - bytes) >> 2;
000340  1ad0              SUBS     r0,r2,r3
000342  0880              LSRS     r0,r0,#2
000344  9000              STR      r0,[sp,#0]
;;;366        
;;;367            while (longs--)
000346  e001              B        |L1.844|
                  |L1.840|
;;;368                *dpl++ = *spl++;
000348  cc01              LDM      r4!,{r0}
00034a  c101              STM      r1!,{r0}
                  |L1.844|
00034c  9800              LDR      r0,[sp,#0]            ;367
00034e  1e47              SUBS     r7,r0,#1              ;367
000350  9700              STR      r7,[sp,#0]            ;367
000352  2800              CMP      r0,#0                 ;367
000354  d1f8              BNE      |L1.840|
;;;369            
;;;370            dpb = (uint8 *)dpl;
000356  460d              MOV      r5,r1
;;;371            spb = (uint8 *)spl;
000358  4626              MOV      r6,r4
;;;372            
;;;373            while (bytes--)
00035a  e003              B        |L1.868|
                  |L1.860|
;;;374                *dpb++ = *spb++;
00035c  7830              LDRB     r0,[r6,#0]
00035e  7028              STRB     r0,[r5,#0]
000360  1c76              ADDS     r6,r6,#1
000362  1c6d              ADDS     r5,r5,#1
                  |L1.868|
000364  4618              MOV      r0,r3                 ;373
000366  1e5b              SUBS     r3,r3,#1              ;373
000368  2800              CMP      r0,#0                 ;373
00036a  d1f7              BNE      |L1.860|
                  |L1.876|
;;;375        }
;;;376        return dest;
00036c  9801              LDR      r0,[sp,#4]
;;;377    }
00036e  b004              ADD      sp,sp,#0x10
000370  bdf0              POP      {r4-r7,pc}
;;;378    
                          ENDP

                  memset PROC
;;;380    void *
;;;381    memset (void *s, int c, unsigned n)
000372  b530              PUSH     {r4,r5,lr}
;;;382    {
000374  460b              MOV      r3,r1
;;;383        /* Not optimized, but very portable */
;;;384        unsigned char *sp = (unsigned char *)s;
000376  4601              MOV      r1,r0
;;;385    
;;;386        if ((s != NULL) && (n > 0))
000378  2800              CMP      r0,#0
00037a  d008              BEQ      |L1.910|
00037c  2a00              CMP      r2,#0
00037e  d006              BEQ      |L1.910|
;;;387        {
;;;388            while (n--)
000380  e001              B        |L1.902|
                  |L1.898|
;;;389            {
;;;390                *sp++ = (unsigned char)c;
000382  700b              STRB     r3,[r1,#0]
000384  1c49              ADDS     r1,r1,#1
                  |L1.902|
000386  4614              MOV      r4,r2                 ;388
000388  1e52              SUBS     r2,r2,#1              ;388
00038a  2c00              CMP      r4,#0                 ;388
00038c  d1f9              BNE      |L1.898|
                  |L1.910|
;;;391            }
;;;392        }
;;;393        return s;
;;;394    }
00038e  bd30              POP      {r4,r5,pc}
;;;395    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\common\\stdlib.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_stdlib_c_isspace____REV16|
#line 383 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0-Beta4\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_stdlib_c_isspace____REV16| PROC
#line 384

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_stdlib_c_isspace____REVSH|
#line 397
|__asm___8_stdlib_c_isspace____REVSH| PROC
#line 398

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
