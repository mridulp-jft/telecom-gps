; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\serial.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\serial.d --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -IC:\Keil_v5\ARM\RV31\Inc -IC:\Users\Mridul\Desktop\vts_ver5\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.5.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__RTX -D__MICROLIB -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\serial.crf ..\..\..\src\drivers\uart\Serial.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SER_PutChar PROC
;;;34      *----------------------------------------------------------------------------*/
;;;35     int32_t SER_PutChar (int32_t ch) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;36     #ifdef __DBG_ITM
;;;37       int i;
;;;38       ITM_SendChar (ch & 0xFF);
;;;39       for (i = 10000; i; i--);
;;;40     #else
;;;41       //while (!(UART1_S1 & UART_S1_TDRE_MASK));
;;;42       //UART1_D = (ch & 0xFF);
;;;43       // Wait until space is available in the FIFO //
;;;44     //  while (!(UART_S1_REG(TERM_PORT) & UART_S1_TDRE_MASK))
;;;45       //{}
;;;46         
;;;47       // Now Send the character //
;;;48       //UART_D_REG(TERM_PORT) = (uint8)ch;
;;;49     	
;;;50     	if (TERM_PORT_NUM == 0)
;;;51         uart0_putchar(UART0_BASE_PTR, ch);
000004  b2e1              UXTB     r1,r4
000006  4805              LDR      r0,|L1.28|
000008  f7fffffe          BL       uart0_putchar
;;;52       else if (TERM_PORT_NUM == 1)
;;;53         uart_putchar(UART1_BASE_PTR, ch);
;;;54       else
;;;55         uart_putchar(UART2_BASE_PTR, ch);
;;;56     
;;;57     #endif  
;;;58       return (ch & 0xFF);
00000c  b2e0              UXTB     r0,r4
;;;59     }
00000e  bd10              POP      {r4,pc}
;;;60     
                          ENDP

                  SER_GetChar PROC
;;;64      *----------------------------------------------------------------------------*/
;;;65     int32_t SER_GetChar (void) {
000010  b510              PUSH     {r4,lr}
;;;66     #ifdef __DBG_ITM
;;;67       if (ITM_CheckChar())
;;;68         return ITM_ReceiveChar();
;;;69     #else
;;;70     //  if (UART1_S1 & UART_S1_RDRF_MASK) {
;;;71         //while (!(UART1_S1 & UART_S1_RDRF_MASK));
;;;72         //return (UART1_D);
;;;73     
;;;74     	// Wait until character has been received //
;;;75         //while (!(UART_S1_REG(TERM_PORT) & UART_S1_RDRF_MASK));
;;;76         
;;;77         // Return the 8-bit data from the receiver //
;;;78         //return UART_D_REG(TERM_PORT);
;;;79     	
;;;80     	if (TERM_PORT_NUM == 0)
;;;81         return uart0_getchar(UART0_BASE_PTR);
000012  4802              LDR      r0,|L1.28|
000014  f7fffffe          BL       uart0_getchar
;;;82       else if (TERM_PORT_NUM == 1)
;;;83         return uart_getchar(UART1_BASE_PTR);
;;;84       else
;;;85         return uart_getchar(UART2_BASE_PTR);
;;;86       
;;;87     #endif
;;;88     }
000018  bd10              POP      {r4,pc}
;;;89     
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x4006a000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\uart\\Serial.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_Serial_c_5b0a5ac0____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_Serial_c_5b0a5ac0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_Serial_c_5b0a5ac0____REVSH|
#line 144
|__asm___8_Serial_c_5b0a5ac0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
