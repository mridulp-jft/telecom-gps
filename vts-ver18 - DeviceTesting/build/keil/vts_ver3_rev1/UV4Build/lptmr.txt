; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\lptmr.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\lptmr.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -I"F:\vts-ver18 - tESTING\build\keil\vts_ver3_rev1\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\lptmr.crf ..\..\..\src\drivers\lptmr\lptmr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  time_delay_ms PROC
;;;30      */
;;;31     void time_delay_ms(unsigned int count_val)
000000  4942              LDR      r1,|L1.268|
;;;32     {
;;;33       /* Make sure the clock to the LPTMR is enabled */
;;;34       SIM_SCGC5|=SIM_SCGC5_LPTMR_MASK;
000002  6b89              LDR      r1,[r1,#0x38]
000004  2201              MOVS     r2,#1
000006  4311              ORRS     r1,r1,r2
000008  4a40              LDR      r2,|L1.268|
00000a  6391              STR      r1,[r2,#0x38]
;;;35     
;;;36       /* Reset LPTMR settings */
;;;37       LPTMR0_CSR=0;
00000c  2100              MOVS     r1,#0
00000e  4a40              LDR      r2,|L1.272|
000010  6011              STR      r1,[r2,#0]
;;;38     
;;;39       /* Set the compare value to the number of ms to delay */
;;;40       LPTMR0_CMR = count_val;
000012  4611              MOV      r1,r2
000014  6088              STR      r0,[r1,#8]
;;;41     
;;;42       /* Set up LPTMR to use 1kHz LPO with no prescaler as its clock source */
;;;43       LPTMR0_PSR = LPTMR_PSR_PCS(1)|LPTMR_PSR_PBYP_MASK;
000016  2105              MOVS     r1,#5
000018  6051              STR      r1,[r2,#4]
;;;44     
;;;45       /* Start the timer */
;;;46       LPTMR0_CSR |= LPTMR_CSR_TEN_MASK;
00001a  4611              MOV      r1,r2
00001c  6809              LDR      r1,[r1,#0]
00001e  2201              MOVS     r2,#1
000020  4311              ORRS     r1,r1,r2
000022  4a3b              LDR      r2,|L1.272|
000024  6011              STR      r1,[r2,#0]
;;;47     
;;;48       /* Wait for counter to reach compare value */
;;;49       while (!(LPTMR0_CSR & LPTMR_CSR_TCF_MASK));
000026  bf00              NOP      
                  |L1.40|
000028  4939              LDR      r1,|L1.272|
00002a  6809              LDR      r1,[r1,#0]
00002c  2280              MOVS     r2,#0x80
00002e  4011              ANDS     r1,r1,r2
000030  2900              CMP      r1,#0
000032  d0f9              BEQ      |L1.40|
;;;50     
;;;51       /* Disable counter and Clear Timer Compare Flag */
;;;52       LPTMR0_CSR &= ~LPTMR_CSR_TEN_MASK;
000034  4936              LDR      r1,|L1.272|
000036  6809              LDR      r1,[r1,#0]
000038  0849              LSRS     r1,r1,#1
00003a  0049              LSLS     r1,r1,#1
00003c  4a34              LDR      r2,|L1.272|
00003e  6011              STR      r1,[r2,#0]
;;;53     
;;;54       return;
;;;55     }
000040  4770              BX       lr
;;;56     
                          ENDP

                  lptmr_init PROC
;;;63     *******************************************************************************/
;;;64     void lptmr_init(int count, int clock_source)
000042  b570              PUSH     {r4-r6,lr}
;;;65     {
000044  4605              MOV      r5,r0
000046  460c              MOV      r4,r1
;;;66     	clock_source = 1;
000048  2401              MOVS     r4,#1
;;;67         SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
00004a  4830              LDR      r0,|L1.268|
00004c  6b80              LDR      r0,[r0,#0x38]
00004e  2101              MOVS     r1,#1
000050  4308              ORRS     r0,r0,r1
000052  492e              LDR      r1,|L1.268|
000054  6388              STR      r0,[r1,#0x38]
;;;68         // disable LPTMR
;;;69     	
;;;70     		NVIC_SetPriority(LPTimer_IRQn, 0);
000056  2100              MOVS     r1,#0
000058  201c              MOVS     r0,#0x1c
00005a  f7fffffe          BL       NVIC_SetPriority
;;;71     	
;;;72         LPTMR0_CSR &= ~LPTMR_CSR_TEN_MASK; 
00005e  482c              LDR      r0,|L1.272|
000060  6800              LDR      r0,[r0,#0]
000062  43a0              BICS     r0,r0,r4
000064  492a              LDR      r1,|L1.272|
000066  6008              STR      r0,[r1,#0]
;;;73         // select LPO for RTC and LPTMR
;;;74         LPTMR0_PSR = ( LPTMR_PSR_PRESCALE(0) // 0000 is div 2
000068  2004              MOVS     r0,#4
00006a  4320              ORRS     r0,r0,r4
00006c  6048              STR      r0,[r1,#4]
;;;75                      | LPTMR_PSR_PBYP_MASK  // clock feeds directly to LPT
;;;76                      | LPTMR_PSR_PCS(clock_source)) ; // use the choice of clock
;;;77                   
;;;78         LPTMR0_CMR = LPTMR_CMR_COMPARE(count);  //Set compare value
00006e  b2a8              UXTH     r0,r5
000070  6088              STR      r0,[r1,#8]
;;;79     	// clear flag
;;;80     	  LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK; 
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]
000076  2180              MOVS     r1,#0x80
000078  4308              ORRS     r0,r0,r1
00007a  4925              LDR      r1,|L1.272|
00007c  6008              STR      r0,[r1,#0]
;;;81     	
;;;82         LPTMR0_CSR =(  LPTMR_CSR_TCF_MASK   // Clear any pending interrupt
00007e  20c0              MOVS     r0,#0xc0
000080  6008              STR      r0,[r1,#0]
;;;83                      | LPTMR_CSR_TIE_MASK   // LPT interrupt enabled
;;;84                      );
;;;85     	
;;;86         LPTMR0_CSR |= LPTMR_CSR_TEN_MASK;   //Turn on LPT and start counting
000082  4608              MOV      r0,r1
000084  6800              LDR      r0,[r0,#0]
000086  2101              MOVS     r1,#1
000088  4308              ORRS     r0,r0,r1
00008a  4921              LDR      r1,|L1.272|
00008c  6008              STR      r0,[r1,#0]
;;;87         
;;;88     		enable_irq(LPTimer_IRQn);
00008e  201c              MOVS     r0,#0x1c
000090  2101              MOVS     r1,#1
000092  4081              LSLS     r1,r1,r0
000094  4a1f              LDR      r2,|L1.276|
000096  6011              STR      r1,[r2,#0]
000098  bf00              NOP      
;;;89     	
;;;90     	
;;;91     //    enable_irq(INT_LPTimer - 16);
;;;92     }
00009a  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP

                  NVIC_SetPriority PROC
;;;803     */
;;;804    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
00009c  b510              PUSH     {r4,lr}
;;;805    {
;;;806      if ((int32_t)(IRQn) < 0)
00009e  2800              CMP      r0,#0
0000a0  da19              BGE      |L1.214|
;;;807      {
;;;808        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
0000a2  4a1d              LDR      r2,|L1.280|
0000a4  0703              LSLS     r3,r0,#28
0000a6  0f1b              LSRS     r3,r3,#28
0000a8  3b08              SUBS     r3,r3,#8
0000aa  089b              LSRS     r3,r3,#2
0000ac  009b              LSLS     r3,r3,#2
0000ae  58d2              LDR      r2,[r2,r3]
0000b0  0783              LSLS     r3,r0,#30
0000b2  0edc              LSRS     r4,r3,#27
0000b4  23ff              MOVS     r3,#0xff
0000b6  40a3              LSLS     r3,r3,r4
0000b8  439a              BICS     r2,r2,r3
0000ba  078b              LSLS     r3,r1,#30
0000bc  0e1b              LSRS     r3,r3,#24
0000be  0784              LSLS     r4,r0,#30
0000c0  0ee4              LSRS     r4,r4,#27
0000c2  40a3              LSLS     r3,r3,r4
0000c4  431a              ORRS     r2,r2,r3
0000c6  4b14              LDR      r3,|L1.280|
0000c8  0704              LSLS     r4,r0,#28
0000ca  0f24              LSRS     r4,r4,#28
0000cc  3c08              SUBS     r4,r4,#8
0000ce  08a4              LSRS     r4,r4,#2
0000d0  00a4              LSLS     r4,r4,#2
0000d2  511a              STR      r2,[r3,r4]
0000d4  e018              B        |L1.264|
                  |L1.214|
;;;809           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;810      }
;;;811      else
;;;812      {
;;;813        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
0000d6  4a0f              LDR      r2,|L1.276|
0000d8  2303              MOVS     r3,#3
0000da  021b              LSLS     r3,r3,#8
0000dc  18d2              ADDS     r2,r2,r3
0000de  0883              LSRS     r3,r0,#2
0000e0  009b              LSLS     r3,r3,#2
0000e2  58d2              LDR      r2,[r2,r3]
0000e4  0783              LSLS     r3,r0,#30
0000e6  0edc              LSRS     r4,r3,#27
0000e8  23ff              MOVS     r3,#0xff
0000ea  40a3              LSLS     r3,r3,r4
0000ec  439a              BICS     r2,r2,r3
0000ee  078b              LSLS     r3,r1,#30
0000f0  0e1b              LSRS     r3,r3,#24
0000f2  0784              LSLS     r4,r0,#30
0000f4  0ee4              LSRS     r4,r4,#27
0000f6  40a3              LSLS     r3,r3,r4
0000f8  431a              ORRS     r2,r2,r3
0000fa  4b06              LDR      r3,|L1.276|
0000fc  2403              MOVS     r4,#3
0000fe  0224              LSLS     r4,r4,#8
000100  191b              ADDS     r3,r3,r4
000102  0884              LSRS     r4,r0,#2
000104  00a4              LSLS     r4,r4,#2
000106  511a              STR      r2,[r3,r4]
                  |L1.264|
;;;814           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;815      }
;;;816    }
000108  bd10              POP      {r4,pc}
;;;817    
                          ENDP

00010a  0000              DCW      0x0000
                  |L1.268|
                          DCD      0x40048000
                  |L1.272|
                          DCD      0x40040000
                  |L1.276|
                          DCD      0xe000e100
                  |L1.280|
                          DCD      0xe000ed1c

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\lptmr\\lptmr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_lptmr_c_ff64738d____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_lptmr_c_ff64738d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_lptmr_c_ff64738d____REVSH|
#line 402
|__asm___7_lptmr_c_ff64738d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
