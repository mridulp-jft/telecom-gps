; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -IC:\Keil_v5\ARM\RV31\Inc -IC:\Users\Mridul\Desktop\vts_ver4\build\keil\vts_ver3\RTE -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.5.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__RTX -D__MICROLIB -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  clear PROC
;;;264    	
;;;265    void clear()
000000  49f9              LDR      r1,|L1.1000|
;;;266    {char temp;
;;;267        if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7909              LDRB     r1,[r1,#4]
000004  2208              MOVS     r2,#8
000006  4011              ANDS     r1,r1,r2
000008  2900              CMP      r1,#0
00000a  d001              BEQ      |L1.16|
;;;268        {
;;;269          temp = UART_D_REG(UART1_BASE_PTR);
00000c  49f6              LDR      r1,|L1.1000|
00000e  79c8              LDRB     r0,[r1,#7]
                  |L1.16|
;;;270    		}
;;;271    		
;;;272    	UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000010  49f5              LDR      r1,|L1.1000|
000012  7909              LDRB     r1,[r1,#4]
000014  2218              MOVS     r2,#0x18
000016  4311              ORRS     r1,r1,r2
000018  4af3              LDR      r2,|L1.1000|
00001a  7111              STRB     r1,[r2,#4]
;;;273    }	
00001c  4770              BX       lr
;;;274    
                          ENDP

                  send_modem PROC
;;;240    
;;;241    void send_modem(char ch[])
00001e  b570              PUSH     {r4-r6,lr}
;;;242    	{	
000020  4605              MOV      r5,r0
;;;243    						unsigned char i=0;
000022  2400              MOVS     r4,#0
;;;244    						for(i=0;i<strlen(ch);i++)
000024  bf00              NOP      
000026  e005              B        |L1.52|
                  |L1.40|
;;;245    						{
;;;246    							uart_putchar(UART1_BASE_PTR, ch[i]);//clear();
000028  5d29              LDRB     r1,[r5,r4]
00002a  48ef              LDR      r0,|L1.1000|
00002c  f7fffffe          BL       uart_putchar
000030  1c60              ADDS     r0,r4,#1              ;244
000032  b2c4              UXTB     r4,r0                 ;244
                  |L1.52|
000034  4628              MOV      r0,r5                 ;244
000036  f7fffffe          BL       strlen
00003a  42a0              CMP      r0,r4                 ;244
00003c  d8f4              BHI      |L1.40|
;;;247    						}
;;;248    						
;;;249    	}
00003e  bd70              POP      {r4-r6,pc}
;;;250    
                          ENDP

                  send_GSM PROC
;;;286    
;;;287    char * send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000040  b5ff              PUSH     {r0-r7,lr}
;;;288    {	int qwe;int exitflag=1;int cntr=0,time;
000042  b083              SUB      sp,sp,#0xc
000044  4614              MOV      r4,r2
000046  461d              MOV      r5,r3
000048  9f0c              LDR      r7,[sp,#0x30]
00004a  2001              MOVS     r0,#1
00004c  9001              STR      r0,[sp,#4]
00004e  2000              MOVS     r0,#0
000050  9000              STR      r0,[sp,#0]
;;;289    		qwe=strlen(uart_string_gsm);
000052  48e6              LDR      r0,|L1.1004|
000054  f7fffffe          BL       strlen
000058  9002              STR      r0,[sp,#8]
;;;290    		printf("\nsizeofbuffer-> %d, motion-> %d, motion_samples-> %d\n",qwe,motion,motion_samples);
00005a  48e5              LDR      r0,|L1.1008|
00005c  6803              LDR      r3,[r0,#0]  ; motion_samples
00005e  48e5              LDR      r0,|L1.1012|
000060  6802              LDR      r2,[r0,#0]  ; motion
000062  a0e5              ADR      r0,|L1.1016|
000064  9902              LDR      r1,[sp,#8]
000066  f7fffffe          BL       __2printf
;;;291    		memset(uart_string_gsm,0,qwe);
00006a  48e0              LDR      r0,|L1.1004|
00006c  9902              LDR      r1,[sp,#8]
00006e  f7fffffe          BL       __aeabi_memclr4
;;;292    		k2=0;									//string array counter for uart 1
000072  2000              MOVS     r0,#0
000074  49ee              LDR      r1,|L1.1072|
000076  6008              STR      r0,[r1,#0]  ; k2
;;;293    	  time=timeout;						//timer counts to wait for characters in uart 1 
000078  463e              MOV      r6,r7
;;;294    		clear();
00007a  f7fffffe          BL       clear
;;;295    		send_modem(string);
00007e  9803              LDR      r0,[sp,#0xc]
000080  f7fffffe          BL       send_modem
;;;296    		while( (!((strstr(uart_string_gsm, responseA))	|| (strstr(uart_string_gsm, responseB))	|| (strstr(uart_string_gsm, responseC))  || (time<=0)    	)))
000084  e000              B        |L1.136|
                  |L1.134|
;;;297    		{
;;;298    			{
;;;299    					time--;
000086  1e76              SUBS     r6,r6,#1
                  |L1.136|
000088  48d8              LDR      r0,|L1.1004|
00008a  9904              LDR      r1,[sp,#0x10]         ;296
00008c  f7fffffe          BL       strstr
000090  2800              CMP      r0,#0                 ;296
000092  d10d              BNE      |L1.176|
000094  4621              MOV      r1,r4                 ;296
000096  48d5              LDR      r0,|L1.1004|
000098  f7fffffe          BL       strstr
00009c  2800              CMP      r0,#0                 ;296
00009e  d107              BNE      |L1.176|
0000a0  4629              MOV      r1,r5                 ;296
0000a2  48d2              LDR      r0,|L1.1004|
0000a4  f7fffffe          BL       strstr
0000a8  2800              CMP      r0,#0                 ;296
0000aa  d101              BNE      |L1.176|
0000ac  2e00              CMP      r6,#0                 ;296
0000ae  dcea              BGT      |L1.134|
                  |L1.176|
;;;300    					//if(time<= 1)
;;;301    					//uart_putchar(UART1_BASE_PTR,0x1A);
;;;302    			
;;;303    			}
;;;304    		}
;;;305    		clear();
0000b0  f7fffffe          BL       clear
;;;306    		return uart_string_gsm;
0000b4  48cd              LDR      r0,|L1.1004|
;;;307    
;;;308    }
0000b6  b007              ADD      sp,sp,#0x1c
0000b8  bdf0              POP      {r4-r7,pc}
;;;309    
                          ENDP

                  log_it PROC
;;;75     
;;;76     void log_it()
0000ba  b538              PUSH     {r3-r5,lr}
;;;77     {
;;;78     	
;;;79     	memset(at_,0,100);
0000bc  2164              MOVS     r1,#0x64
0000be  48dd              LDR      r0,|L1.1076|
0000c0  f7fffffe          BL       __aeabi_memclr4
;;;80     	sprintf(at_,"\r\nAT+FSWRITE=C:\\LOG.TXT,1,%d,10\r\n",strlen(data));	
0000c4  48dc              LDR      r0,|L1.1080|
0000c6  f7fffffe          BL       strlen
0000ca  4604              MOV      r4,r0
0000cc  4622              MOV      r2,r4
0000ce  a1db              ADR      r1,|L1.1084|
0000d0  48d8              LDR      r0,|L1.1076|
0000d2  f7fffffe          BL       __2sprintf
;;;81     	printf("\n%s\n",send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",999999));	
0000d6  48e2              LDR      r0,|L1.1120|
0000d8  a3e2              ADR      r3,|L1.1124|
0000da  a2e4              ADR      r2,|L1.1132|
0000dc  a1e5              ADR      r1,|L1.1140|
0000de  9000              STR      r0,[sp,#0]
0000e0  48d4              LDR      r0,|L1.1076|
0000e2  f7fffffe          BL       send_GSM
0000e6  4604              MOV      r4,r0
0000e8  4621              MOV      r1,r4
0000ea  a0e3              ADR      r0,|L1.1144|
0000ec  f7fffffe          BL       __2printf
;;;82     	clear();
0000f0  f7fffffe          BL       clear
;;;83     		for(k=0;k<=strlen(data);k++)
0000f4  2000              MOVS     r0,#0
0000f6  49e2              LDR      r1,|L1.1152|
0000f8  6008              STR      r0,[r1,#0]  ; k
0000fa  e014              B        |L1.294|
                  |L1.252|
;;;84     		{
;;;85     			uart_putchar(UART1_BASE_PTR, data[k]); uart0_putchar(UART0_BASE_PTR, data[k]);clear();
0000fc  48ce              LDR      r0,|L1.1080|
0000fe  4ae0              LDR      r2,|L1.1152|
000100  6812              LDR      r2,[r2,#0]  ; k
000102  5c81              LDRB     r1,[r0,r2]
000104  48b8              LDR      r0,|L1.1000|
000106  f7fffffe          BL       uart_putchar
00010a  48cb              LDR      r0,|L1.1080|
00010c  4adc              LDR      r2,|L1.1152|
00010e  6812              LDR      r2,[r2,#0]  ; k
000110  5c81              LDRB     r1,[r0,r2]
000112  48dc              LDR      r0,|L1.1156|
000114  f7fffffe          BL       uart0_putchar
000118  f7fffffe          BL       clear
00011c  48d8              LDR      r0,|L1.1152|
00011e  6800              LDR      r0,[r0,#0]            ;83  ; k
000120  1c40              ADDS     r0,r0,#1              ;83
000122  49d7              LDR      r1,|L1.1152|
000124  6008              STR      r0,[r1,#0]            ;83  ; k
                  |L1.294|
000126  48c4              LDR      r0,|L1.1080|
000128  f7fffffe          BL       strlen
00012c  49d4              LDR      r1,|L1.1152|
00012e  6809              LDR      r1,[r1,#0]            ;83  ; k
000130  4288              CMP      r0,r1                 ;83
000132  d2e3              BCS      |L1.252|
;;;86     		}	
;;;87     									//memset(data,0,1000);
;;;88     									k2=0;									//string array counter for uart 1
000134  2000              MOVS     r0,#0
000136  49be              LDR      r1,|L1.1072|
000138  6008              STR      r0,[r1,#0]  ; k2
;;;89     									time=19999;						//timer counts to wait for characters in uart 1 									
00013a  48d3              LDR      r0,|L1.1160|
00013c  49d3              LDR      r1,|L1.1164|
00013e  6008              STR      r0,[r1,#0]  ; time
;;;90     									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1))  ||(strstr(uart_string_gsm, "ERROR")))
000140  e014              B        |L1.364|
                  |L1.322|
;;;91     									{
;;;92     									time--;
000142  48d2              LDR      r0,|L1.1164|
000144  6800              LDR      r0,[r0,#0]  ; time
000146  1e40              SUBS     r0,r0,#1
000148  49d0              LDR      r1,|L1.1164|
00014a  6008              STR      r0,[r1,#0]  ; time
;;;93     									if(time % 2000 == 0)
00014c  217d              MOVS     r1,#0x7d
00014e  0109              LSLS     r1,r1,#4
000150  48ce              LDR      r0,|L1.1164|
000152  6800              LDR      r0,[r0,#0]  ; time
000154  f7fffffe          BL       __aeabi_idivmod
000158  2900              CMP      r1,#0
00015a  d107              BNE      |L1.364|
;;;94     										{uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,'\n');
00015c  2131              MOVS     r1,#0x31
00015e  48c9              LDR      r0,|L1.1156|
000160  f7fffffe          BL       uart0_putchar
000164  210a              MOVS     r1,#0xa
000166  48a0              LDR      r0,|L1.1000|
000168  f7fffffe          BL       uart_putchar
                  |L1.364|
00016c  a1c8              ADR      r1,|L1.1168|
00016e  489f              LDR      r0,|L1.1004|
000170  f7fffffe          BL       strstr
000174  2800              CMP      r0,#0                 ;90
000176  d103              BNE      |L1.384|
000178  48c4              LDR      r0,|L1.1164|
00017a  6800              LDR      r0,[r0,#0]            ;90  ; time
00017c  2801              CMP      r0,#1                 ;90
00017e  dae0              BGE      |L1.322|
                  |L1.384|
000180  a1c5              ADR      r1,|L1.1176|
000182  489a              LDR      r0,|L1.1004|
000184  f7fffffe          BL       strstr
000188  2800              CMP      r0,#0                 ;90
00018a  d1da              BNE      |L1.322|
;;;95     										}
;;;96     	
;;;97     									}
;;;98     	
;;;99     									memset(data,0,strlen(data));
00018c  48aa              LDR      r0,|L1.1080|
00018e  f7fffffe          BL       strlen
000192  4604              MOV      r4,r0
000194  4621              MOV      r1,r4
000196  48a8              LDR      r0,|L1.1080|
000198  f7fffffe          BL       __aeabi_memclr4
;;;100    
;;;101    }
00019c  bd38              POP      {r3-r5,pc}
;;;102    
                          ENDP

                  save_ip_port PROC
;;;137    	
;;;138    void save_ip_port()
00019e  b538              PUSH     {r3-r5,lr}
;;;139    {
;;;140    	
;;;141    printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
0001a0  48af              LDR      r0,|L1.1120|
0001a2  a3b0              ADR      r3,|L1.1124|
0001a4  a2b1              ADR      r2,|L1.1132|
0001a6  a1be              ADR      r1,|L1.1184|
0001a8  9000              STR      r0,[sp,#0]
0001aa  a0be              ADR      r0,|L1.1188|
0001ac  f7fffffe          BL       send_GSM
0001b0  4604              MOV      r4,r0
0001b2  4621              MOV      r1,r4
0001b4  a0b0              ADR      r0,|L1.1144|
0001b6  f7fffffe          BL       __2printf
;;;142    	
;;;143    	memset(at_,0,100);
0001ba  2164              MOVS     r1,#0x64
0001bc  489d              LDR      r0,|L1.1076|
0001be  f7fffffe          BL       __aeabi_memclr4
;;;144    	sprintf(at_,"\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",strlen(ip)+12+strlen(port));	
0001c2  48c0              LDR      r0,|L1.1220|
0001c4  f7fffffe          BL       strlen
0001c8  4605              MOV      r5,r0
0001ca  350c              ADDS     r5,r5,#0xc
0001cc  48be              LDR      r0,|L1.1224|
0001ce  f7fffffe          BL       strlen
0001d2  182c              ADDS     r4,r5,r0
0001d4  4622              MOV      r2,r4
0001d6  a1bd              ADR      r1,|L1.1228|
0001d8  4896              LDR      r0,|L1.1076|
0001da  f7fffffe          BL       __2sprintf
;;;145    	printf("\n%s\n",send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",999999));	
0001de  48a0              LDR      r0,|L1.1120|
0001e0  a3a0              ADR      r3,|L1.1124|
0001e2  a2a2              ADR      r2,|L1.1132|
0001e4  a1a3              ADR      r1,|L1.1140|
0001e6  9000              STR      r0,[sp,#0]
0001e8  4892              LDR      r0,|L1.1076|
0001ea  f7fffffe          BL       send_GSM
0001ee  4604              MOV      r4,r0
0001f0  4621              MOV      r1,r4
0001f2  a0a1              ADR      r0,|L1.1144|
0001f4  f7fffffe          BL       __2printf
;;;146    	clear();
0001f8  f7fffffe          BL       clear
;;;147    	send_modem("|IP|");
0001fc  a0bd              ADR      r0,|L1.1268|
0001fe  f7fffffe          BL       send_modem
;;;148    		for(k=0;k<strlen(ip);k++)
000202  2000              MOVS     r0,#0
000204  499e              LDR      r1,|L1.1152|
000206  6008              STR      r0,[r1,#0]  ; k
000208  e012              B        |L1.560|
                  |L1.522|
;;;149    		{
;;;150    			uart_putchar(UART1_BASE_PTR, ip[k]); uart0_putchar(UART0_BASE_PTR, ip[k]);//clear();
00020a  48ae              LDR      r0,|L1.1220|
00020c  4a9c              LDR      r2,|L1.1152|
00020e  6812              LDR      r2,[r2,#0]  ; k
000210  5c81              LDRB     r1,[r0,r2]
000212  4875              LDR      r0,|L1.1000|
000214  f7fffffe          BL       uart_putchar
000218  48aa              LDR      r0,|L1.1220|
00021a  4a99              LDR      r2,|L1.1152|
00021c  6812              LDR      r2,[r2,#0]  ; k
00021e  5c81              LDRB     r1,[r0,r2]
000220  4898              LDR      r0,|L1.1156|
000222  f7fffffe          BL       uart0_putchar
000226  4896              LDR      r0,|L1.1152|
000228  6800              LDR      r0,[r0,#0]            ;148  ; k
00022a  1c40              ADDS     r0,r0,#1              ;148
00022c  4994              LDR      r1,|L1.1152|
00022e  6008              STR      r0,[r1,#0]            ;148  ; k
                  |L1.560|
000230  48a4              LDR      r0,|L1.1220|
000232  f7fffffe          BL       strlen
000236  4992              LDR      r1,|L1.1152|
000238  6809              LDR      r1,[r1,#0]            ;148  ; k
00023a  4288              CMP      r0,r1                 ;148
00023c  d8e5              BHI      |L1.522|
;;;151    		}	
;;;152    	send_modem("|PORT|");			
00023e  a0af              ADR      r0,|L1.1276|
000240  f7fffffe          BL       send_modem
;;;153    		for(k=0;k<strlen(port);k++)
000244  2000              MOVS     r0,#0
000246  498e              LDR      r1,|L1.1152|
000248  6008              STR      r0,[r1,#0]  ; k
00024a  e012              B        |L1.626|
                  |L1.588|
;;;154    		{
;;;155    			uart_putchar(UART1_BASE_PTR, port[k]); uart0_putchar(UART0_BASE_PTR, port[k]);//clear();
00024c  489e              LDR      r0,|L1.1224|
00024e  4a8c              LDR      r2,|L1.1152|
000250  6812              LDR      r2,[r2,#0]  ; k
000252  5c81              LDRB     r1,[r0,r2]
000254  4864              LDR      r0,|L1.1000|
000256  f7fffffe          BL       uart_putchar
00025a  489b              LDR      r0,|L1.1224|
00025c  4a88              LDR      r2,|L1.1152|
00025e  6812              LDR      r2,[r2,#0]  ; k
000260  5c81              LDRB     r1,[r0,r2]
000262  4888              LDR      r0,|L1.1156|
000264  f7fffffe          BL       uart0_putchar
000268  4885              LDR      r0,|L1.1152|
00026a  6800              LDR      r0,[r0,#0]            ;153  ; k
00026c  1c40              ADDS     r0,r0,#1              ;153
00026e  4984              LDR      r1,|L1.1152|
000270  6008              STR      r0,[r1,#0]            ;153  ; k
                  |L1.626|
000272  4895              LDR      r0,|L1.1224|
000274  f7fffffe          BL       strlen
000278  4981              LDR      r1,|L1.1152|
00027a  6809              LDR      r1,[r1,#0]            ;153  ; k
00027c  4288              CMP      r0,r1                 ;153
00027e  d8e5              BHI      |L1.588|
;;;156    		}	
;;;157    send_modem("|");			
000280  a0a0              ADR      r0,|L1.1284|
000282  f7fffffe          BL       send_modem
;;;158    									//memset(data,0,1000);
;;;159    									k2=0;									//string array counter for uart 1
000286  2000              MOVS     r0,#0
000288  4969              LDR      r1,|L1.1072|
00028a  6008              STR      r0,[r1,#0]  ; k2
;;;160    									time=19999;						//timer counts to wait for characters in uart 1 									
00028c  487e              LDR      r0,|L1.1160|
00028e  497f              LDR      r1,|L1.1164|
000290  6008              STR      r0,[r1,#0]  ; time
;;;161    									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1))  ||(strstr(uart_string_gsm, "ERROR")))
000292  e014              B        |L1.702|
                  |L1.660|
;;;162    									{
;;;163    									time--;
000294  487d              LDR      r0,|L1.1164|
000296  6800              LDR      r0,[r0,#0]  ; time
000298  1e40              SUBS     r0,r0,#1
00029a  497c              LDR      r1,|L1.1164|
00029c  6008              STR      r0,[r1,#0]  ; time
;;;164    									if(time % 2000 == 0)
00029e  217d              MOVS     r1,#0x7d
0002a0  0109              LSLS     r1,r1,#4
0002a2  487a              LDR      r0,|L1.1164|
0002a4  6800              LDR      r0,[r0,#0]  ; time
0002a6  f7fffffe          BL       __aeabi_idivmod
0002aa  2900              CMP      r1,#0
0002ac  d107              BNE      |L1.702|
;;;165    										{
;;;166    											uart0_putchar(UART0_BASE_PTR,'1');
0002ae  2131              MOVS     r1,#0x31
0002b0  4874              LDR      r0,|L1.1156|
0002b2  f7fffffe          BL       uart0_putchar
;;;167    											uart_putchar(UART1_BASE_PTR,'\n');
0002b6  210a              MOVS     r1,#0xa
0002b8  484b              LDR      r0,|L1.1000|
0002ba  f7fffffe          BL       uart_putchar
                  |L1.702|
0002be  a174              ADR      r1,|L1.1168|
0002c0  484a              LDR      r0,|L1.1004|
0002c2  f7fffffe          BL       strstr
0002c6  2800              CMP      r0,#0                 ;161
0002c8  d103              BNE      |L1.722|
0002ca  4870              LDR      r0,|L1.1164|
0002cc  6800              LDR      r0,[r0,#0]            ;161  ; time
0002ce  2801              CMP      r0,#1                 ;161
0002d0  dae0              BGE      |L1.660|
                  |L1.722|
0002d2  a171              ADR      r1,|L1.1176|
0002d4  4845              LDR      r0,|L1.1004|
0002d6  f7fffffe          BL       strstr
0002da  2800              CMP      r0,#0                 ;161
0002dc  d1da              BNE      |L1.660|
;;;168    										}
;;;169    	
;;;170    									}
;;;171    
;;;172    }	
0002de  bd38              POP      {r3-r5,pc}
;;;173    	
                          ENDP

                  delay PROC
;;;65     /*************************** delay*****************************************/
;;;66      void delay(int delaytime)
0002e0  e00d              B        |L1.766|
                  |L1.738|
;;;67     {
;;;68      while(delaytime--)
;;;69         {for(i=20000;i>0;i--);  // about 1 ms
0002e2  4969              LDR      r1,|L1.1160|
0002e4  1c49              ADDS     r1,r1,#1
0002e6  4a88              LDR      r2,|L1.1288|
0002e8  6011              STR      r1,[r2,#0]  ; i
0002ea  e004              B        |L1.758|
                  |L1.748|
0002ec  4986              LDR      r1,|L1.1288|
0002ee  6809              LDR      r1,[r1,#0]  ; i
0002f0  1e49              SUBS     r1,r1,#1
0002f2  4a85              LDR      r2,|L1.1288|
0002f4  6011              STR      r1,[r2,#0]  ; i
                  |L1.758|
0002f6  4984              LDR      r1,|L1.1288|
0002f8  6809              LDR      r1,[r1,#0]  ; i
0002fa  2900              CMP      r1,#0
0002fc  dcf6              BGT      |L1.748|
                  |L1.766|
0002fe  4601              MOV      r1,r0                 ;68
000300  1e40              SUBS     r0,r0,#1              ;68
000302  2900              CMP      r1,#0                 ;68
000304  d1ed              BNE      |L1.738|
;;;70         }
;;;71     }
000306  4770              BX       lr
;;;72      void delay2(int delaytime)
                          ENDP

                  parse_g PROC
;;;393    
;;;394    void parse_g(char* str, int first, int sec, char f, char s , char *string)
000308  b5ff              PUSH     {r0-r7,lr}
;;;395    {int i=0,j=0,temp=0;
00030a  b083              SUB      sp,sp,#0xc
00030c  4605              MOV      r5,r0
00030e  460f              MOV      r7,r1
000310  2400              MOVS     r4,#0
000312  2000              MOVS     r0,#0
000314  9002              STR      r0,[sp,#8]
000316  2600              MOVS     r6,#0
;;;396    
;;;397    		delay(10);		
000318  200a              MOVS     r0,#0xa
00031a  f7fffffe          BL       delay
;;;398    		memset(string,0,strlen(string));
00031e  980d              LDR      r0,[sp,#0x34]
000320  f7fffffe          BL       strlen
000324  4601              MOV      r1,r0
000326  9001              STR      r0,[sp,#4]
000328  980d              LDR      r0,[sp,#0x34]
00032a  f7fffffe          BL       __aeabi_memclr
;;;399    		for(i=0,temp=0;i<strlen(str);i++)
00032e  bf00              NOP      
000330  bf00              NOP      
000332  e00a              B        |L1.842|
                  |L1.820|
;;;400    		{
;;;401    		if(str[i]==s)
000334  5d29              LDRB     r1,[r5,r4]
000336  980c              LDR      r0,[sp,#0x30]
000338  4281              CMP      r1,r0
00033a  d101              BNE      |L1.832|
;;;402    			{temp++;j=i;}
00033c  1c76              ADDS     r6,r6,#1
00033e  9402              STR      r4,[sp,#8]
                  |L1.832|
;;;403    		else{}
;;;404    			
;;;405    		if(temp>=sec){i=9900;}
000340  9805              LDR      r0,[sp,#0x14]
000342  4286              CMP      r6,r0
000344  db00              BLT      |L1.840|
000346  4c71              LDR      r4,|L1.1292|
                  |L1.840|
000348  1c64              ADDS     r4,r4,#1              ;399
                  |L1.842|
00034a  4628              MOV      r0,r5                 ;399
00034c  f7fffffe          BL       strlen
000350  42a0              CMP      r0,r4                 ;399
000352  d8ef              BHI      |L1.820|
;;;406    		else{}	
;;;407    		
;;;408    		}	
;;;409    		
;;;410    		for(i=0,temp=0;i<strlen(str);i++)
000354  2400              MOVS     r4,#0
000356  2600              MOVS     r6,#0
000358  e00a              B        |L1.880|
                  |L1.858|
;;;411    		{
;;;412    		if(str[i]==f)
00035a  5d29              LDRB     r1,[r5,r4]
00035c  9806              LDR      r0,[sp,#0x18]
00035e  4281              CMP      r1,r0
000360  d102              BNE      |L1.872|
;;;413    			{temp++;l=i;}										
000362  1c76              ADDS     r6,r6,#1
000364  486a              LDR      r0,|L1.1296|
000366  6004              STR      r4,[r0,#0]  ; l
                  |L1.872|
;;;414    		else{}
;;;415    		if(temp>=first){i=9900;}else{}
000368  42be              CMP      r6,r7
00036a  db00              BLT      |L1.878|
00036c  4c67              LDR      r4,|L1.1292|
                  |L1.878|
00036e  1c64              ADDS     r4,r4,#1              ;410
                  |L1.880|
000370  4628              MOV      r0,r5                 ;410
000372  f7fffffe          BL       strlen
000376  42a0              CMP      r0,r4                 ;410
000378  d8ef              BHI      |L1.858|
;;;416    		}	
;;;417    		for(i=0;i<(j-l-1);i++)
00037a  2400              MOVS     r4,#0
00037c  e007              B        |L1.910|
                  |L1.894|
;;;418    		{
;;;419    		string[i] = str[l+i+1];
00037e  4864              LDR      r0,|L1.1296|
000380  6800              LDR      r0,[r0,#0]  ; l
000382  1900              ADDS     r0,r0,r4
000384  1c40              ADDS     r0,r0,#1
000386  5c29              LDRB     r1,[r5,r0]
000388  980d              LDR      r0,[sp,#0x34]
00038a  5501              STRB     r1,[r0,r4]
00038c  1c64              ADDS     r4,r4,#1              ;417
                  |L1.910|
00038e  4960              LDR      r1,|L1.1296|
000390  9802              LDR      r0,[sp,#8]            ;417
000392  6809              LDR      r1,[r1,#0]            ;417  ; l
000394  1a40              SUBS     r0,r0,r1              ;417
000396  1e40              SUBS     r0,r0,#1              ;417
000398  42a0              CMP      r0,r4                 ;417
00039a  dcf0              BGT      |L1.894|
;;;420    		}			
;;;421    	
;;;422    
;;;423    
;;;424    }
00039c  b007              ADD      sp,sp,#0x1c
00039e  bdf0              POP      {r4-r7,pc}
;;;425    
                          ENDP

                  send_message PROC
;;;1076   			
;;;1077   	void send_message(char * data2)
0003a0  b538              PUSH     {r3-r5,lr}
;;;1078   	{
0003a2  4604              MOV      r4,r0
;;;1079   									memset(at_,0,100);
0003a4  2164              MOVS     r1,#0x64
0003a6  4823              LDR      r0,|L1.1076|
0003a8  f7fffffe          BL       __aeabi_memclr4
;;;1080   									sprintf(at_, "\nAT+CMGS=\"%s\"\r\n" ,num2);
0003ac  4a59              LDR      r2,|L1.1300|
0003ae  a15a              ADR      r1,|L1.1304|
0003b0  4820              LDR      r0,|L1.1076|
0003b2  f7fffffe          BL       __2sprintf
;;;1081   									printf("\n%s\n",send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",tmeout));	
0003b6  485c              LDR      r0,|L1.1320|
0003b8  6800              LDR      r0,[r0,#0]  ; tmeout
0003ba  a32a              ADR      r3,|L1.1124|
0003bc  a22b              ADR      r2,|L1.1132|
0003be  a12d              ADR      r1,|L1.1140|
0003c0  9000              STR      r0,[sp,#0]
0003c2  481c              LDR      r0,|L1.1076|
0003c4  f7fffffe          BL       send_GSM
0003c8  4605              MOV      r5,r0
0003ca  4629              MOV      r1,r5
0003cc  a02a              ADR      r0,|L1.1144|
0003ce  f7fffffe          BL       __2printf
;;;1082   									if( strstr(uart_string_gsm, ">"))
0003d2  a128              ADR      r1,|L1.1140|
0003d4  4805              LDR      r0,|L1.1004|
0003d6  f7fffffe          BL       strstr
0003da  2800              CMP      r0,#0
0003dc  d003              BEQ      |L1.998|
;;;1083   									{
;;;1084   										//
;;;1085   										
;;;1086   											for(k=0;k<strlen(data2);k++)
0003de  2000              MOVS     r0,#0
0003e0  4927              LDR      r1,|L1.1152|
0003e2  6008              STR      r0,[r1,#0]  ; k
0003e4  e0b5              B        |L1.1362|
                  |L1.998|
0003e6  e0e5              B        |L1.1460|
                  |L1.1000|
                          DCD      0x4006b000
                  |L1.1004|
                          DCD      uart_string_gsm
                  |L1.1008|
                          DCD      motion_samples
                  |L1.1012|
                          DCD      motion
                  |L1.1016|
0003f8  0a73697a          DCB      "\nsizeofbuffer-> %d, motion-> %d, motion_samples-> %d\n"
0003fc  656f6662
000400  75666665
000404  722d3e20
000408  25642c20
00040c  6d6f7469
000410  6f6e2d3e
000414  2025642c
000418  206d6f74
00041c  696f6e5f
000420  73616d70
000424  6c65732d
000428  3e202564
00042c  0a      
00042d  00                DCB      0
00042e  00                DCB      0
00042f  00                DCB      0
                  |L1.1072|
                          DCD      ||k2||
                  |L1.1076|
                          DCD      at_
                  |L1.1080|
                          DCD      data
                  |L1.1084|
00043c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\LOG.TXT,1,%d,10\r\n",0
000440  2b465357
000444  52495445
000448  3d433a5c
00044c  4c4f472e
000450  5458542c
000454  312c2564
000458  2c31300d
00045c  0a00    
00045e  00                DCB      0
00045f  00                DCB      0
                  |L1.1120|
                          DCD      0x000f423f
                  |L1.1124|
000464  4552524f          DCB      "ERROR:",0
000468  523a00  
00046b  00                DCB      0
                  |L1.1132|
00046c  4552524f          DCB      "ERROR\r\n",0
000470  520d0a00
                  |L1.1140|
000474  3e00              DCB      ">",0
000476  00                DCB      0
000477  00                DCB      0
                  |L1.1144|
000478  0a25730a          DCB      "\n%s\n",0
00047c  00      
00047d  00                DCB      0
00047e  00                DCB      0
00047f  00                DCB      0
                  |L1.1152|
                          DCD      k
                  |L1.1156|
                          DCD      0x4006a000
                  |L1.1160|
                          DCD      0x00004e1f
                  |L1.1164|
                          DCD      time
                  |L1.1168|
000490  4f4b0d0a          DCB      "OK\r\n",0
000494  00      
000495  00                DCB      0
000496  00                DCB      0
000497  00                DCB      0
                  |L1.1176|
000498  4552524f          DCB      "ERROR",0
00049c  5200    
00049e  00                DCB      0
00049f  00                DCB      0
                  |L1.1184|
0004a0  4f4b00            DCB      "OK",0
0004a3  00                DCB      0
                  |L1.1188|
0004a4  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
0004a8  46534352
0004ac  45415445
0004b0  3d433a5c
0004b4  49505f50
0004b8  4f52542e
0004bc  5458540d
0004c0  0a00    
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L1.1220|
                          DCD      ||ip||
                  |L1.1224|
                          DCD      port
                  |L1.1228|
0004cc  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",0
0004d0  2b465357
0004d4  52495445
0004d8  3d433a5c
0004dc  49505f50
0004e0  4f52542e
0004e4  5458542c
0004e8  302c2564
0004ec  2c31300d
0004f0  0a00    
0004f2  00                DCB      0
0004f3  00                DCB      0
                  |L1.1268|
0004f4  7c49507c          DCB      "|IP|",0
0004f8  00      
0004f9  00                DCB      0
0004fa  00                DCB      0
0004fb  00                DCB      0
                  |L1.1276|
0004fc  7c504f52          DCB      "|PORT|",0
000500  547c00  
000503  00                DCB      0
                  |L1.1284|
000504  7c00              DCB      "|",0
000506  00                DCB      0
000507  00                DCB      0
                  |L1.1288|
                          DCD      i
                  |L1.1292|
                          DCD      0x000026ac
                  |L1.1296|
                          DCD      l
                  |L1.1300|
                          DCD      num2
                  |L1.1304|
000518  0a41542b          DCB      "\nAT+CMGS=""%s""\r\n",0
00051c  434d4753
000520  3d222573
000524  220d0a00
                  |L1.1320|
                          DCD      tmeout
                  |L1.1324|
;;;1087   											{
;;;1088   												
;;;1089   												uart_putchar(UART1_BASE_PTR, data2[k]);
00052c  48f9              LDR      r0,|L1.2324|
00052e  6800              LDR      r0,[r0,#0]  ; k
000530  5c21              LDRB     r1,[r4,r0]
000532  48f9              LDR      r0,|L1.2328|
000534  f7fffffe          BL       uart_putchar
;;;1090   												uart0_putchar(UART0_BASE_PTR, data2[k]);
000538  48f6              LDR      r0,|L1.2324|
00053a  6800              LDR      r0,[r0,#0]  ; k
00053c  5c21              LDRB     r1,[r4,r0]
00053e  48f7              LDR      r0,|L1.2332|
000540  f7fffffe          BL       uart0_putchar
;;;1091   												clear();
000544  f7fffffe          BL       clear
000548  48f2              LDR      r0,|L1.2324|
00054a  6800              LDR      r0,[r0,#0]            ;1086  ; k
00054c  1c40              ADDS     r0,r0,#1              ;1086
00054e  49f1              LDR      r1,|L1.2324|
000550  6008              STR      r0,[r1,#0]            ;1086  ; k
                  |L1.1362|
000552  4620              MOV      r0,r4                 ;1086
000554  f7fffffe          BL       strlen
000558  49ee              LDR      r1,|L1.2324|
00055a  6809              LDR      r1,[r1,#0]            ;1086  ; k
00055c  4288              CMP      r0,r1                 ;1086
00055e  d8e5              BHI      |L1.1324|
;;;1092   												
;;;1093   											}		
;;;1094   											uart_putchar(UART1_BASE_PTR, 0x1A);
000560  211a              MOVS     r1,#0x1a
000562  48ed              LDR      r0,|L1.2328|
000564  f7fffffe          BL       uart_putchar
;;;1095   											k2=0;									//string array counter for uart 1
000568  2000              MOVS     r0,#0
00056a  49ed              LDR      r1,|L1.2336|
00056c  6008              STR      r0,[r1,#0]  ; k2
;;;1096   											timeout=19999;						//timer counts to wait for characters in uart 1 									
00056e  48ed              LDR      r0,|L1.2340|
000570  49ed              LDR      r1,|L1.2344|
000572  6008              STR      r0,[r1,#0]  ; timeout
;;;1097   											while(!(strstr(uart_string_gsm,"+CMGS:")  ||  (timeout < 1)))
000574  e014              B        |L1.1440|
                  |L1.1398|
;;;1098   																{
;;;1099   																	timeout--;
000576  48ec              LDR      r0,|L1.2344|
000578  6800              LDR      r0,[r0,#0]  ; timeout
00057a  1e40              SUBS     r0,r0,#1
00057c  49ea              LDR      r1,|L1.2344|
00057e  6008              STR      r0,[r1,#0]  ; timeout
;;;1100   																	if(timeout % 4000 == 0)
000580  217d              MOVS     r1,#0x7d
000582  0149              LSLS     r1,r1,#5
000584  48e8              LDR      r0,|L1.2344|
000586  6800              LDR      r0,[r0,#0]  ; timeout
000588  f7fffffe          BL       __aeabi_idivmod
00058c  2900              CMP      r1,#0
00058e  d107              BNE      |L1.1440|
;;;1101   																	{
;;;1102   																		uart0_putchar(UART0_BASE_PTR,'1');
000590  2131              MOVS     r1,#0x31
000592  48e2              LDR      r0,|L1.2332|
000594  f7fffffe          BL       uart0_putchar
;;;1103   																		uart_putchar(UART1_BASE_PTR,0x1A);
000598  211a              MOVS     r1,#0x1a
00059a  48df              LDR      r0,|L1.2328|
00059c  f7fffffe          BL       uart_putchar
                  |L1.1440|
0005a0  a1e2              ADR      r1,|L1.2348|
0005a2  48e4              LDR      r0,|L1.2356|
0005a4  f7fffffe          BL       strstr
0005a8  2800              CMP      r0,#0                 ;1097
0005aa  d103              BNE      |L1.1460|
0005ac  48de              LDR      r0,|L1.2344|
0005ae  6800              LDR      r0,[r0,#0]            ;1097  ; timeout
0005b0  2801              CMP      r0,#1                 ;1097
0005b2  dae0              BGE      |L1.1398|
                  |L1.1460|
;;;1104   																	}
;;;1105   																}
;;;1106   							
;;;1107   									}
;;;1108   		
;;;1109   									
;;;1110   	}
0005b4  bd38              POP      {r3-r5,pc}
;;;1111   
                          ENDP

                  save_interval PROC
;;;103    
;;;104    void save_interval()
0005b6  b538              PUSH     {r3-r5,lr}
;;;105    {
;;;106    	
;;;107    printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
0005b8  48df              LDR      r0,|L1.2360|
0005ba  4be0              LDR      r3,|L1.2364|
0005bc  461a              MOV      r2,r3
0005be  3208              ADDS     r2,r2,#8
0005c0  a1df              ADR      r1,|L1.2368|
0005c2  9000              STR      r0,[sp,#0]
0005c4  a0df              ADR      r0,|L1.2372|
0005c6  f7fffffe          BL       send_GSM
0005ca  4604              MOV      r4,r0
0005cc  4621              MOV      r1,r4
0005ce  48db              LDR      r0,|L1.2364|
0005d0  3014              ADDS     r0,r0,#0x14
0005d2  f7fffffe          BL       __2printf
;;;108    
;;;109    	memset(at_,0,100);
0005d6  2164              MOVS     r1,#0x64
0005d8  48e2              LDR      r0,|L1.2404|
0005da  f7fffffe          BL       __aeabi_memclr4
;;;110    	sprintf(at_,"\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",strlen(interval)+11);	
0005de  48e2              LDR      r0,|L1.2408|
0005e0  f7fffffe          BL       strlen
0005e4  4604              MOV      r4,r0
0005e6  340b              ADDS     r4,r4,#0xb
0005e8  4622              MOV      r2,r4
0005ea  a1e0              ADR      r1,|L1.2412|
0005ec  48dd              LDR      r0,|L1.2404|
0005ee  f7fffffe          BL       __2sprintf
;;;111    	printf("\n%s\n",send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",999999));	
0005f2  48d1              LDR      r0,|L1.2360|
0005f4  4bd1              LDR      r3,|L1.2364|
0005f6  461a              MOV      r2,r3
0005f8  3208              ADDS     r2,r2,#8
0005fa  a1e6              ADR      r1,|L1.2452|
0005fc  9000              STR      r0,[sp,#0]
0005fe  48d9              LDR      r0,|L1.2404|
000600  f7fffffe          BL       send_GSM
000604  4604              MOV      r4,r0
000606  4621              MOV      r1,r4
000608  48cc              LDR      r0,|L1.2364|
00060a  3014              ADDS     r0,r0,#0x14
00060c  f7fffffe          BL       __2printf
;;;112    	clear();
000610  f7fffffe          BL       clear
;;;113    	send_modem("|INTERVAL|");
000614  a0e0              ADR      r0,|L1.2456|
000616  f7fffffe          BL       send_modem
;;;114    		for(k=0;k<strlen(interval);k++)
00061a  2000              MOVS     r0,#0
00061c  49bd              LDR      r1,|L1.2324|
00061e  6008              STR      r0,[r1,#0]  ; k
000620  e012              B        |L1.1608|
                  |L1.1570|
;;;115    		{
;;;116    			uart_putchar(UART1_BASE_PTR, interval[k]); uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
000622  48d1              LDR      r0,|L1.2408|
000624  4abb              LDR      r2,|L1.2324|
000626  6812              LDR      r2,[r2,#0]  ; k
000628  5c81              LDRB     r1,[r0,r2]
00062a  48bb              LDR      r0,|L1.2328|
00062c  f7fffffe          BL       uart_putchar
000630  48cd              LDR      r0,|L1.2408|
000632  4ab8              LDR      r2,|L1.2324|
000634  6812              LDR      r2,[r2,#0]  ; k
000636  5c81              LDRB     r1,[r0,r2]
000638  48b8              LDR      r0,|L1.2332|
00063a  f7fffffe          BL       uart0_putchar
00063e  48b5              LDR      r0,|L1.2324|
000640  6800              LDR      r0,[r0,#0]            ;114  ; k
000642  1c40              ADDS     r0,r0,#1              ;114
000644  49b3              LDR      r1,|L1.2324|
000646  6008              STR      r0,[r1,#0]            ;114  ; k
                  |L1.1608|
000648  48c7              LDR      r0,|L1.2408|
00064a  f7fffffe          BL       strlen
00064e  49b1              LDR      r1,|L1.2324|
000650  6809              LDR      r1,[r1,#0]            ;114  ; k
000652  4288              CMP      r0,r1                 ;114
000654  d8e5              BHI      |L1.1570|
;;;117    		}	
;;;118    			send_modem("|");			
000656  a0d3              ADR      r0,|L1.2468|
000658  f7fffffe          BL       send_modem
;;;119     
;;;120    									k2=0;									//string array counter for uart 1
00065c  2000              MOVS     r0,#0
00065e  49b0              LDR      r1,|L1.2336|
000660  6008              STR      r0,[r1,#0]  ; k2
;;;121    									time=19999;						//timer counts to wait for characters in uart 1 									
000662  48b0              LDR      r0,|L1.2340|
000664  49d0              LDR      r1,|L1.2472|
000666  6008              STR      r0,[r1,#0]  ; time
;;;122    									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1))  ||(strstr(uart_string_gsm, "ERROR")))
000668  e014              B        |L1.1684|
                  |L1.1642|
;;;123    									{
;;;124    									time--;
00066a  48cf              LDR      r0,|L1.2472|
00066c  6800              LDR      r0,[r0,#0]  ; time
00066e  1e40              SUBS     r0,r0,#1
000670  49cd              LDR      r1,|L1.2472|
000672  6008              STR      r0,[r1,#0]  ; time
;;;125    									if(time % 2000 == 0)
000674  217d              MOVS     r1,#0x7d
000676  0109              LSLS     r1,r1,#4
000678  48cb              LDR      r0,|L1.2472|
00067a  6800              LDR      r0,[r0,#0]  ; time
00067c  f7fffffe          BL       __aeabi_idivmod
000680  2900              CMP      r1,#0
000682  d107              BNE      |L1.1684|
;;;126    										{
;;;127    											uart0_putchar(UART0_BASE_PTR,'1');
000684  2131              MOVS     r1,#0x31
000686  48a5              LDR      r0,|L1.2332|
000688  f7fffffe          BL       uart0_putchar
;;;128    											uart_putchar(UART1_BASE_PTR,'\n');
00068c  210a              MOVS     r1,#0xa
00068e  48a2              LDR      r0,|L1.2328|
000690  f7fffffe          BL       uart_putchar
                  |L1.1684|
000694  49a9              LDR      r1,|L1.2364|
000696  312c              ADDS     r1,r1,#0x2c           ;122
000698  48a6              LDR      r0,|L1.2356|
00069a  f7fffffe          BL       strstr
00069e  2800              CMP      r0,#0                 ;122
0006a0  d103              BNE      |L1.1706|
0006a2  48c1              LDR      r0,|L1.2472|
0006a4  6800              LDR      r0,[r0,#0]            ;122  ; time
0006a6  2801              CMP      r0,#1                 ;122
0006a8  dadf              BGE      |L1.1642|
                  |L1.1706|
0006aa  49a4              LDR      r1,|L1.2364|
0006ac  3134              ADDS     r1,r1,#0x34           ;122
0006ae  48a1              LDR      r0,|L1.2356|
0006b0  f7fffffe          BL       strstr
0006b4  2800              CMP      r0,#0                 ;122
0006b6  d1d8              BNE      |L1.1642|
;;;129    										}
;;;130    	
;;;131    									}
;;;132    
;;;133    
;;;134    }	
0006b8  bd38              POP      {r3-r5,pc}
;;;135    	
                          ENDP

                  myAtoi PROC
;;;373    
;;;374    int myAtoi(char *str)
0006ba  b510              PUSH     {r4,lr}
;;;375    {
0006bc  4601              MOV      r1,r0
;;;376        int res = 0,iz; // Initialize result
0006be  2000              MOVS     r0,#0
;;;377    
;;;378        // Iterate through all characters of input string and update result
;;;379        for (iz = 0; str[iz] != '\0'; ++iz)
0006c0  2200              MOVS     r2,#0
0006c2  e006              B        |L1.1746|
                  |L1.1732|
;;;380            res = res*10 + str[iz] - '0';
0006c4  230a              MOVS     r3,#0xa
0006c6  4343              MULS     r3,r0,r3
0006c8  5c8c              LDRB     r4,[r1,r2]
0006ca  191b              ADDS     r3,r3,r4
0006cc  4618              MOV      r0,r3
0006ce  3830              SUBS     r0,r0,#0x30
0006d0  1c52              ADDS     r2,r2,#1              ;379
                  |L1.1746|
0006d2  5c8b              LDRB     r3,[r1,r2]            ;379
0006d4  2b00              CMP      r3,#0                 ;379
0006d6  d1f5              BNE      |L1.1732|
;;;381    
;;;382        // return result.
;;;383        return res;
;;;384    }
0006d8  bd10              POP      {r4,pc}
;;;385    
                          ENDP

                  parse_gsm PROC
;;;360    
;;;361    void parse_gsm(char *str, int first, int sec, char *string)
0006da  b5ff              PUSH     {r0-r7,lr}
;;;362    {int i=0,j=0,temp=0;
0006dc  b081              SUB      sp,sp,#4
0006de  4605              MOV      r5,r0
0006e0  461f              MOV      r7,r3
0006e2  2400              MOVS     r4,#0
0006e4  2000              MOVS     r0,#0
0006e6  9000              STR      r0,[sp,#0]
0006e8  2600              MOVS     r6,#0
;;;363    
;;;364    		delay(10);		
0006ea  200a              MOVS     r0,#0xa
0006ec  f7fffffe          BL       delay
;;;365    		memset(string,0,15);
0006f0  210f              MOVS     r1,#0xf
0006f2  4638              MOV      r0,r7
0006f4  f7fffffe          BL       __aeabi_memclr
;;;366    		for(i=0,temp=0;i<100;i++)
0006f8  bf00              NOP      
0006fa  bf00              NOP      
0006fc  e00a              B        |L1.1812|
                  |L1.1790|
;;;367    		{
;;;368    		if(str[i]=='"')
0006fe  5d28              LDRB     r0,[r5,r4]
000700  2822              CMP      r0,#0x22
000702  d101              BNE      |L1.1800|
;;;369    			{temp++;j=i;}
000704  1c76              ADDS     r6,r6,#1
000706  9400              STR      r4,[sp,#0]
                  |L1.1800|
;;;370    		else{}
;;;371    			
;;;372    		if(temp>=sec){i=900;}
000708  9803              LDR      r0,[sp,#0xc]
00070a  4286              CMP      r6,r0
00070c  db01              BLT      |L1.1810|
00070e  24e1              MOVS     r4,#0xe1
000710  00a4              LSLS     r4,r4,#2
                  |L1.1810|
000712  1c64              ADDS     r4,r4,#1              ;366
                  |L1.1812|
000714  2c64              CMP      r4,#0x64              ;366
000716  dbf2              BLT      |L1.1790|
;;;373    		else{}	
;;;374    		
;;;375    		}	
;;;376    		
;;;377    		for(i=0,temp=0;i<100;i++)
000718  2400              MOVS     r4,#0
00071a  2600              MOVS     r6,#0
00071c  e00b              B        |L1.1846|
                  |L1.1822|
;;;378    		{
;;;379    		if(str[i]=='"')
00071e  5d28              LDRB     r0,[r5,r4]
000720  2822              CMP      r0,#0x22
000722  d102              BNE      |L1.1834|
;;;380    			{temp++;l=i;}										
000724  1c76              ADDS     r6,r6,#1
000726  48a1              LDR      r0,|L1.2476|
000728  6004              STR      r4,[r0,#0]  ; l
                  |L1.1834|
;;;381    		else{}
;;;382    		if(temp>=first){i=900;}else{}
00072a  9802              LDR      r0,[sp,#8]
00072c  4286              CMP      r6,r0
00072e  db01              BLT      |L1.1844|
000730  24e1              MOVS     r4,#0xe1
000732  00a4              LSLS     r4,r4,#2
                  |L1.1844|
000734  1c64              ADDS     r4,r4,#1              ;377
                  |L1.1846|
000736  2c64              CMP      r4,#0x64              ;377
000738  dbf1              BLT      |L1.1822|
;;;383    		}	
;;;384    		for(i=0;i<(j-l-1);i++)
00073a  2400              MOVS     r4,#0
00073c  e006              B        |L1.1868|
                  |L1.1854|
;;;385    		{
;;;386    		string[i] = str[l+i+1];
00073e  489b              LDR      r0,|L1.2476|
000740  6800              LDR      r0,[r0,#0]  ; l
000742  1900              ADDS     r0,r0,r4
000744  1c40              ADDS     r0,r0,#1
000746  5c28              LDRB     r0,[r5,r0]
000748  5538              STRB     r0,[r7,r4]
00074a  1c64              ADDS     r4,r4,#1              ;384
                  |L1.1868|
00074c  4997              LDR      r1,|L1.2476|
00074e  9800              LDR      r0,[sp,#0]            ;384
000750  6809              LDR      r1,[r1,#0]            ;384  ; l
000752  1a40              SUBS     r0,r0,r1              ;384
000754  1e40              SUBS     r0,r0,#1              ;384
000756  42a0              CMP      r0,r4                 ;384
000758  dcf1              BGT      |L1.1854|
;;;387    		}			
;;;388    	
;;;389    
;;;390    }
00075a  b005              ADD      sp,sp,#0x14
00075c  bdf0              POP      {r4-r7,pc}
;;;391    
                          ENDP

                  msg_sim800 PROC
;;;632    
;;;633    void msg_sim800() 
00075e  b51f              PUSH     {r0-r4,lr}
;;;634    {
;;;635    	
;;;636    	if(ringflag==1)
000760  4893              LDR      r0,|L1.2480|
000762  7800              LDRB     r0,[r0,#0]  ; ringflag
000764  2801              CMP      r0,#1
000766  d001              BEQ      |L1.1900|
000768  f000fe6e          BL       |L1.5192|
                  |L1.1900|
;;;637    	{
;;;638    	
;;;639    					printf("\n\n\thttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,'%',longi,velocity,lati,longi);
00076c  4891              LDR      r0,|L1.2484|
00076e  4992              LDR      r1,|L1.2488|
000770  4a92              LDR      r2,|L1.2492|
000772  4603              MOV      r3,r0
000774  9200              STR      r2,[sp,#0]
000776  9101              STR      r1,[sp,#4]
000778  9002              STR      r0,[sp,#8]
00077a  2225              MOVS     r2,#0x25
00077c  a090              ADR      r0,|L1.2496|
00077e  f7fffffe          BL       __2printf
;;;640    					printf("\n%s\n",send_GSM("\r\nAT+CMGR=1\r\n", "OK\r\n", "ERROR" , "OK\r\n",tmeout));	
000782  489f              LDR      r0,|L1.2560|
000784  6800              LDR      r0,[r0,#0]  ; tmeout
000786  4b6d              LDR      r3,|L1.2364|
000788  332c              ADDS     r3,r3,#0x2c
00078a  461a              MOV      r2,r3
00078c  3208              ADDS     r2,r2,#8
00078e  4619              MOV      r1,r3
000790  9000              STR      r0,[sp,#0]
000792  a09c              ADR      r0,|L1.2564|
000794  f7fffffe          BL       send_GSM
000798  4601              MOV      r1,r0
00079a  9003              STR      r0,[sp,#0xc]
00079c  4867              LDR      r0,|L1.2364|
00079e  3014              ADDS     r0,r0,#0x14
0007a0  f7fffffe          BL       __2printf
;;;641    					clear();
0007a4  f7fffffe          BL       clear
;;;642    					parse_gsm(uart_string_gsm, 3, 4, num2);
0007a8  4b9a              LDR      r3,|L1.2580|
0007aa  2204              MOVS     r2,#4
0007ac  2103              MOVS     r1,#3
0007ae  4861              LDR      r0,|L1.2356|
0007b0  f7fffffe          BL       parse_gsm
;;;643    			
;;;644    			
;;;645    			
;;;646    			
;;;647    			
;;;648    			
;;;649    			
;;;650    			
;;;651    					if(strstr(uart_string_gsm, "OWNER"))
0007b4  a198              ADR      r1,|L1.2584|
0007b6  485f              LDR      r0,|L1.2356|
0007b8  f7fffffe          BL       strstr
0007bc  2800              CMP      r0,#0
0007be  d07a              BEQ      |L1.2230|
;;;652    					{
;;;653    							if(strstr(uart_string_gsm, "LOCATION"))
0007c0  a197              ADR      r1,|L1.2592|
0007c2  485c              LDR      r0,|L1.2356|
0007c4  f7fffffe          BL       strstr
0007c8  2800              CMP      r0,#0
0007ca  d028              BEQ      |L1.2078|
;;;654    							{
;;;655    								memset(data2,0,strlen(data2));
0007cc  4897              LDR      r0,|L1.2604|
0007ce  f7fffffe          BL       strlen
0007d2  4601              MOV      r1,r0
0007d4  9003              STR      r0,[sp,#0xc]
0007d6  4895              LDR      r0,|L1.2604|
0007d8  f7fffffe          BL       __aeabi_memclr4
;;;656    								sprintf(data2,"\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);	
0007dc  4875              LDR      r0,|L1.2484|
0007de  2125              MOVS     r1,#0x25
0007e0  4a75              LDR      r2,|L1.2488|
0007e2  4b76              LDR      r3,|L1.2492|
0007e4  9300              STR      r3,[sp,#0]
0007e6  9201              STR      r2,[sp,#4]
0007e8  9102              STR      r1,[sp,#8]
0007ea  9003              STR      r0,[sp,#0xc]
0007ec  4603              MOV      r3,r0
0007ee  4990              LDR      r1,|L1.2608|
0007f0  488e              LDR      r0,|L1.2604|
0007f2  f7fffffe          BL       __2sprintf
;;;657    								send_message(data2);
0007f6  488d              LDR      r0,|L1.2604|
0007f8  f7fffffe          BL       send_message
;;;658    
;;;659    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
0007fc  4880              LDR      r0,|L1.2560|
0007fe  6800              LDR      r0,[r0,#0]  ; tmeout
000800  4b4e              LDR      r3,|L1.2364|
000802  461a              MOV      r2,r3
000804  3208              ADDS     r2,r2,#8
000806  4611              MOV      r1,r2
000808  3124              ADDS     r1,r1,#0x24
00080a  9000              STR      r0,[sp,#0]
00080c  a089              ADR      r0,|L1.2612|
00080e  f7fffffe          BL       send_GSM
000812  4601              MOV      r1,r0
000814  9003              STR      r0,[sp,#0xc]
000816  a08c              ADR      r0,|L1.2632|
000818  f7fffffe          BL       __2printf
00081c  e02e              B        |L1.2172|
                  |L1.2078|
;;;660    								
;;;661    								
;;;662    							}
;;;663    	
;;;664    							
;;;665    							
;;;666    						
;;;667    							else if(strstr(uart_string_gsm, "INTERVAL"))
00081e  a18b              ADR      r1,|L1.2636|
000820  4844              LDR      r0,|L1.2356|
000822  f7fffffe          BL       strstr
000826  2800              CMP      r0,#0
000828  d028              BEQ      |L1.2172|
;;;668    							{
;;;669    								memset(at_,0,100);
00082a  2164              MOVS     r1,#0x64
00082c  484d              LDR      r0,|L1.2404|
00082e  f7fffffe          BL       __aeabi_memclr4
;;;670    								memset(interval,0,5);
000832  2105              MOVS     r1,#5
000834  484c              LDR      r0,|L1.2408|
000836  f7fffffe          BL       __aeabi_memclr
;;;671    								parse_g(uart_string_gsm, 3, 5, ' ', '\r', interval);		
00083a  484b              LDR      r0,|L1.2408|
00083c  210d              MOVS     r1,#0xd
00083e  2320              MOVS     r3,#0x20
000840  2205              MOVS     r2,#5
000842  9100              STR      r1,[sp,#0]
000844  9001              STR      r0,[sp,#4]
000846  2103              MOVS     r1,#3
000848  483a              LDR      r0,|L1.2356|
00084a  f7fffffe          BL       parse_g
;;;672    								int_erval=myAtoi(interval);
00084e  4846              LDR      r0,|L1.2408|
000850  f7fffffe          BL       myAtoi
000854  4980              LDR      r1,|L1.2648|
000856  6008              STR      r0,[r1,#0]  ; int_erval
;;;673    								save_interval();			
000858  f7fffffe          BL       save_interval
;;;674    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
00085c  4868              LDR      r0,|L1.2560|
00085e  6800              LDR      r0,[r0,#0]  ; tmeout
000860  4b36              LDR      r3,|L1.2364|
000862  461a              MOV      r2,r3
000864  3208              ADDS     r2,r2,#8
000866  4611              MOV      r1,r2
000868  3124              ADDS     r1,r1,#0x24
00086a  9000              STR      r0,[sp,#0]
00086c  a071              ADR      r0,|L1.2612|
00086e  f7fffffe          BL       send_GSM
000872  4601              MOV      r1,r0
000874  9003              STR      r0,[sp,#0xc]
000876  a074              ADR      r0,|L1.2632|
000878  f7fffffe          BL       __2printf
                  |L1.2172|
;;;675    
;;;676    								
;;;677    							}				
;;;678    
;;;679    
;;;680    
;;;681    						
;;;682    							if(strstr(uart_string_gsm, "START"))
00087c  a177              ADR      r1,|L1.2652|
00087e  482d              LDR      r0,|L1.2356|
000880  f7fffffe          BL       strstr
000884  2800              CMP      r0,#0
000886  d044              BEQ      |L1.2322|
;;;683    							{
;;;684    								printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
000888  482b              LDR      r0,|L1.2360|
00088a  4b2c              LDR      r3,|L1.2364|
00088c  461a              MOV      r2,r3
00088e  3208              ADDS     r2,r2,#8
000890  a12b              ADR      r1,|L1.2368|
000892  9000              STR      r0,[sp,#0]
000894  4610              MOV      r0,r2
000896  3038              ADDS     r0,r0,#0x38
000898  f7fffffe          BL       send_GSM
00089c  4601              MOV      r1,r0
00089e  9003              STR      r0,[sp,#0xc]
0008a0  4826              LDR      r0,|L1.2364|
0008a2  3014              ADDS     r0,r0,#0x14
0008a4  f7fffffe          BL       __2printf
;;;685    								printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
0008a8  4823              LDR      r0,|L1.2360|
0008aa  4b24              LDR      r3,|L1.2364|
0008ac  461a              MOV      r2,r3
0008ae  3208              ADDS     r2,r2,#8
0008b0  a123              ADR      r1,|L1.2368|
0008b2  9000              STR      r0,[sp,#0]
0008b4  e000              B        |L1.2232|
                  |L1.2230|
0008b6  e2d9              B        |L1.3692|
                  |L1.2232|
0008b8  a06a              ADR      r0,|L1.2660|
0008ba  f7fffffe          BL       send_GSM
0008be  4601              MOV      r1,r0
0008c0  9003              STR      r0,[sp,#0xc]
0008c2  481e              LDR      r0,|L1.2364|
0008c4  3014              ADDS     r0,r0,#0x14
0008c6  f7fffffe          BL       __2printf
;;;686    								printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
0008ca  481b              LDR      r0,|L1.2360|
0008cc  4b1b              LDR      r3,|L1.2364|
0008ce  461a              MOV      r2,r3
0008d0  3208              ADDS     r2,r2,#8
0008d2  a11b              ADR      r1,|L1.2368|
0008d4  9000              STR      r0,[sp,#0]
0008d6  a01b              ADR      r0,|L1.2372|
0008d8  f7fffffe          BL       send_GSM
0008dc  4601              MOV      r1,r0
0008de  9003              STR      r0,[sp,#0xc]
0008e0  4816              LDR      r0,|L1.2364|
0008e2  3014              ADDS     r0,r0,#0x14
0008e4  f7fffffe          BL       __2printf
;;;687    								memcpy (ip, "104.236.203.4", 13);
0008e8  220d              MOVS     r2,#0xd
0008ea  a165              ADR      r1,|L1.2688|
0008ec  4868              LDR      r0,|L1.2704|
0008ee  f7fffffe          BL       __aeabi_memcpy4
;;;688    								memcpy (port, "5555", 4);		
0008f2  4868              LDR      r0,|L1.2708|
0008f4  a168              ADR      r1,|L1.2712|
0008f6  6809              LDR      r1,[r1,#0]
0008f8  6001              STR      r1,[r0,#0]  ; port
;;;689    								memcpy (interval, "1", 1);										
0008fa  481b              LDR      r0,|L1.2408|
0008fc  a168              ADR      r1,|L1.2720|
0008fe  7809              LDRB     r1,[r1,#0]
000900  7001              STRB     r1,[r0,#0]
;;;690    								save_ip_port();
000902  f7fffffe          BL       save_ip_port
;;;691    								save_interval();	
000906  f7fffffe          BL       save_interval
;;;692    								printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
00090a  4b17              LDR      r3,|L1.2408|
00090c  4a61              LDR      r2,|L1.2708|
00090e  4960              LDR      r1,|L1.2704|
000910  e0c8              B        |L1.2724|
                  |L1.2322|
000912  e0dc              B        |L1.2766|
                  |L1.2324|
                          DCD      k
                  |L1.2328|
                          DCD      0x4006b000
                  |L1.2332|
                          DCD      0x4006a000
                  |L1.2336|
                          DCD      ||k2||
                  |L1.2340|
                          DCD      0x00004e1f
                  |L1.2344|
                          DCD      timeout
                  |L1.2348|
00092c  2b434d47          DCB      "+CMGS:",0
000930  533a00  
000933  00                DCB      0
                  |L1.2356|
                          DCD      uart_string_gsm
                  |L1.2360|
                          DCD      0x000f423f
                  |L1.2364|
                          DCD      ||.text||+0x464
                  |L1.2368|
000940  4f4b00            DCB      "OK",0
000943  00                DCB      0
                  |L1.2372|
000944  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
000948  46534352
00094c  45415445
000950  3d433a5c
000954  494e5445
000958  5256414c
00095c  2e545854
000960  0d0a00  
000963  00                DCB      0
                  |L1.2404|
                          DCD      at_
                  |L1.2408|
                          DCD      interval
                  |L1.2412|
00096c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",0
000970  2b465357
000974  52495445
000978  3d433a5c
00097c  494e5445
000980  5256414c
000984  2e545854
000988  2c302c25
00098c  642c3130
000990  0d0a00  
000993  00                DCB      0
                  |L1.2452|
000994  3e00              DCB      ">",0
000996  00                DCB      0
000997  00                DCB      0
                  |L1.2456|
000998  7c494e54          DCB      "|INTERVAL|",0
00099c  45525641
0009a0  4c7c00  
0009a3  00                DCB      0
                  |L1.2468|
0009a4  7c00              DCB      "|",0
0009a6  00                DCB      0
0009a7  00                DCB      0
                  |L1.2472|
                          DCD      time
                  |L1.2476|
                          DCD      l
                  |L1.2480|
                          DCD      ringflag
                  |L1.2484|
                          DCD      longi
                  |L1.2488|
                          DCD      lati
                  |L1.2492|
                          DCD      velocity
                  |L1.2496|
0009c0  0a0a0968          DCB      "\n\n\thttps://www.google.com/search?q=%s%c2C%s&ie=utf-8"
0009c4  74747073
0009c8  3a2f2f77
0009cc  77772e67
0009d0  6f6f676c
0009d4  652e636f
0009d8  6d2f7365
0009dc  61726368
0009e0  3f713d25
0009e4  73256332
0009e8  43257326
0009ec  69653d75
0009f0  74662d38
0009f4  266f653d          DCB      "&oe=utf-8\n",0
0009f8  7574662d
0009fc  380a00  
0009ff  00                DCB      0
                  |L1.2560|
                          DCD      tmeout
                  |L1.2564|
000a04  0d0a4154          DCB      "\r\nAT+CMGR=1\r\n",0
000a08  2b434d47
000a0c  523d310d
000a10  0a00    
000a12  00                DCB      0
000a13  00                DCB      0
                  |L1.2580|
                          DCD      num2
                  |L1.2584|
000a18  4f574e45          DCB      "OWNER",0
000a1c  5200    
000a1e  00                DCB      0
000a1f  00                DCB      0
                  |L1.2592|
000a20  4c4f4341          DCB      "LOCATION",0
000a24  54494f4e
000a28  00      
000a29  00                DCB      0
000a2a  00                DCB      0
000a2b  00                DCB      0
                  |L1.2604|
                          DCD      data2
                  |L1.2608|
                          DCD      ||.conststring||
                  |L1.2612|
000a34  0a0a2041          DCB      "\n\n AT+CMGD=1,4\r\n",0
000a38  542b434d
000a3c  47443d31
000a40  2c340d0a
000a44  00      
000a45  00                DCB      0
000a46  00                DCB      0
000a47  00                DCB      0
                  |L1.2632|
000a48  25730a00          DCB      "%s\n",0
                  |L1.2636|
000a4c  494e5445          DCB      "INTERVAL",0
000a50  5256414c
000a54  00      
000a55  00                DCB      0
000a56  00                DCB      0
000a57  00                DCB      0
                  |L1.2648|
                          DCD      int_erval
                  |L1.2652|
000a5c  53544152          DCB      "START",0
000a60  5400    
000a62  00                DCB      0
000a63  00                DCB      0
                  |L1.2660|
000a64  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
000a68  46534352
000a6c  45415445
000a70  3d433a5c
000a74  4c4f472e
000a78  5458540d
000a7c  0a00    
000a7e  00                DCB      0
000a7f  00                DCB      0
                  |L1.2688|
000a80  3130342e          DCB      "104.236.203.4",0
000a84  3233362e
000a88  3230332e
000a8c  3400    
000a8e  00                DCB      0
000a8f  00                DCB      0
                  |L1.2704|
                          DCD      ||ip||
                  |L1.2708|
                          DCD      port
                  |L1.2712|
000a98  35353535          DCB      "5555",0
000a9c  00      
000a9d  00                DCB      0
000a9e  00                DCB      0
000a9f  00                DCB      0
                  |L1.2720|
000aa0  3100              DCB      "1",0
000aa2  00                DCB      0
000aa3  00                DCB      0
                  |L1.2724|
000aa4  a0fb              ADR      r0,|L1.3732|
000aa6  f7fffffe          BL       __2printf
;;;693    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
000aaa  48fe              LDR      r0,|L1.3748|
000aac  6800              LDR      r0,[r0,#0]  ; tmeout
000aae  4bfe              LDR      r3,|L1.3752|
000ab0  461a              MOV      r2,r3
000ab2  3208              ADDS     r2,r2,#8
000ab4  4611              MOV      r1,r2
000ab6  3124              ADDS     r1,r1,#0x24
000ab8  9000              STR      r0,[sp,#0]
000aba  48fc              LDR      r0,|L1.3756|
000abc  f7fffffe          BL       send_GSM
000ac0  4601              MOV      r1,r0
000ac2  9003              STR      r0,[sp,#0xc]
000ac4  48f9              LDR      r0,|L1.3756|
000ac6  3014              ADDS     r0,r0,#0x14
000ac8  f7fffffe          BL       __2printf
                  |L1.2764|
000acc  e2a9              B        |L1.4130|
                  |L1.2766|
;;;694    								
;;;695    							}
;;;696    							else if(strstr(uart_string_gsm, "OWNER1"))
000ace  a1f8              ADR      r1,|L1.3760|
000ad0  48f9              LDR      r0,|L1.3768|
000ad2  f7fffffe          BL       strstr
000ad6  2800              CMP      r0,#0
000ad8  d039              BEQ      |L1.2894|
;;;697    							{
;;;698    								memset(at_,0,100);
000ada  2164              MOVS     r1,#0x64
000adc  48f7              LDR      r0,|L1.3772|
000ade  f7fffffe          BL       __aeabi_memclr4
;;;699    								memset(num_o,0,15);
000ae2  210f              MOVS     r1,#0xf
000ae4  48f6              LDR      r0,|L1.3776|
000ae6  f7fffffe          BL       __aeabi_memclr
;;;700    								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000aea  48f5              LDR      r0,|L1.3776|
000aec  210d              MOVS     r1,#0xd
000aee  2320              MOVS     r3,#0x20
000af0  2205              MOVS     r2,#5
000af2  9100              STR      r1,[sp,#0]
000af4  9001              STR      r0,[sp,#4]
000af6  2103              MOVS     r1,#3
000af8  48ef              LDR      r0,|L1.3768|
000afa  f7fffffe          BL       parse_g
;;;701    								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000afe  4af0              LDR      r2,|L1.3776|
000b00  a1f0              ADR      r1,|L1.3780|
000b02  48ee              LDR      r0,|L1.3772|
000b04  f7fffffe          BL       __2sprintf
;;;702    								printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));
000b08  48e6              LDR      r0,|L1.3748|
000b0a  6800              LDR      r0,[r0,#0]  ; tmeout
000b0c  4be6              LDR      r3,|L1.3752|
000b0e  461a              MOV      r2,r3
000b10  3208              ADDS     r2,r2,#8
000b12  4611              MOV      r1,r2
000b14  3124              ADDS     r1,r1,#0x24
000b16  9000              STR      r0,[sp,#0]
000b18  48e8              LDR      r0,|L1.3772|
000b1a  f7fffffe          BL       send_GSM
000b1e  4601              MOV      r1,r0
000b20  9003              STR      r0,[sp,#0xc]
000b22  48e2              LDR      r0,|L1.3756|
000b24  3014              ADDS     r0,r0,#0x14
000b26  f7fffffe          BL       __2printf
;;;703    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
000b2a  48de              LDR      r0,|L1.3748|
000b2c  6800              LDR      r0,[r0,#0]  ; tmeout
000b2e  4bde              LDR      r3,|L1.3752|
000b30  461a              MOV      r2,r3
000b32  3208              ADDS     r2,r2,#8
000b34  4611              MOV      r1,r2
000b36  3124              ADDS     r1,r1,#0x24
000b38  9000              STR      r0,[sp,#0]
000b3a  48dc              LDR      r0,|L1.3756|
000b3c  f7fffffe          BL       send_GSM
000b40  4601              MOV      r1,r0
000b42  9003              STR      r0,[sp,#0xc]
000b44  48d9              LDR      r0,|L1.3756|
000b46  3014              ADDS     r0,r0,#0x14
000b48  f7fffffe          BL       __2printf
000b4c  e7be              B        |L1.2764|
                  |L1.2894|
;;;704    															
;;;705    						
;;;706    								
;;;707    							}		
;;;708    							else if(strstr(uart_string_gsm, "OWNER2"))
000b4e  a1e5              ADR      r1,|L1.3812|
000b50  48d9              LDR      r0,|L1.3768|
000b52  f7fffffe          BL       strstr
000b56  2800              CMP      r0,#0
000b58  d039              BEQ      |L1.3022|
;;;709    							{
;;;710    								memset(at_,0,100);
000b5a  2164              MOVS     r1,#0x64
000b5c  48d7              LDR      r0,|L1.3772|
000b5e  f7fffffe          BL       __aeabi_memclr4
;;;711    								memset(num_o,0,15);
000b62  210f              MOVS     r1,#0xf
000b64  48d6              LDR      r0,|L1.3776|
000b66  f7fffffe          BL       __aeabi_memclr
;;;712    								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000b6a  48d5              LDR      r0,|L1.3776|
000b6c  210d              MOVS     r1,#0xd
000b6e  2320              MOVS     r3,#0x20
000b70  2205              MOVS     r2,#5
000b72  9100              STR      r1,[sp,#0]
000b74  9001              STR      r0,[sp,#4]
000b76  2103              MOVS     r1,#3
000b78  48cf              LDR      r0,|L1.3768|
000b7a  f7fffffe          BL       parse_g
;;;713    								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b7e  4ad0              LDR      r2,|L1.3776|
000b80  a1da              ADR      r1,|L1.3820|
000b82  48ce              LDR      r0,|L1.3772|
000b84  f7fffffe          BL       __2sprintf
;;;714    								printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));
000b88  48c6              LDR      r0,|L1.3748|
000b8a  6800              LDR      r0,[r0,#0]  ; tmeout
000b8c  4bc6              LDR      r3,|L1.3752|
000b8e  461a              MOV      r2,r3
000b90  3208              ADDS     r2,r2,#8
000b92  4611              MOV      r1,r2
000b94  3124              ADDS     r1,r1,#0x24
000b96  9000              STR      r0,[sp,#0]
000b98  48c8              LDR      r0,|L1.3772|
000b9a  f7fffffe          BL       send_GSM
000b9e  4601              MOV      r1,r0
000ba0  9003              STR      r0,[sp,#0xc]
000ba2  48c2              LDR      r0,|L1.3756|
000ba4  3014              ADDS     r0,r0,#0x14
000ba6  f7fffffe          BL       __2printf
;;;715    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
000baa  48be              LDR      r0,|L1.3748|
000bac  6800              LDR      r0,[r0,#0]  ; tmeout
000bae  4bbe              LDR      r3,|L1.3752|
000bb0  461a              MOV      r2,r3
000bb2  3208              ADDS     r2,r2,#8
000bb4  4611              MOV      r1,r2
000bb6  3124              ADDS     r1,r1,#0x24
000bb8  9000              STR      r0,[sp,#0]
000bba  48bc              LDR      r0,|L1.3756|
000bbc  f7fffffe          BL       send_GSM
000bc0  4601              MOV      r1,r0
000bc2  9003              STR      r0,[sp,#0xc]
000bc4  48b9              LDR      r0,|L1.3756|
000bc6  3014              ADDS     r0,r0,#0x14
000bc8  f7fffffe          BL       __2printf
000bcc  e77e              B        |L1.2764|
                  |L1.3022|
;;;716    															
;;;717    								
;;;718    							}									
;;;719    							else if(strstr(uart_string_gsm, "OWNER3"))
000bce  a1cf              ADR      r1,|L1.3852|
000bd0  48b9              LDR      r0,|L1.3768|
000bd2  f7fffffe          BL       strstr
000bd6  2800              CMP      r0,#0
000bd8  d039              BEQ      |L1.3150|
;;;720    							{
;;;721    								memset(at_,0,100);
000bda  2164              MOVS     r1,#0x64
000bdc  48b7              LDR      r0,|L1.3772|
000bde  f7fffffe          BL       __aeabi_memclr4
;;;722    								memset(num_o,0,15);
000be2  210f              MOVS     r1,#0xf
000be4  48b6              LDR      r0,|L1.3776|
000be6  f7fffffe          BL       __aeabi_memclr
;;;723    								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000bea  48b5              LDR      r0,|L1.3776|
000bec  210d              MOVS     r1,#0xd
000bee  2320              MOVS     r3,#0x20
000bf0  2205              MOVS     r2,#5
000bf2  9100              STR      r1,[sp,#0]
000bf4  9001              STR      r0,[sp,#4]
000bf6  2103              MOVS     r1,#3
000bf8  48af              LDR      r0,|L1.3768|
000bfa  f7fffffe          BL       parse_g
;;;724    								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000bfe  4ab0              LDR      r2,|L1.3776|
000c00  a1c4              ADR      r1,|L1.3860|
000c02  48ae              LDR      r0,|L1.3772|
000c04  f7fffffe          BL       __2sprintf
;;;725    								printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));
000c08  48a6              LDR      r0,|L1.3748|
000c0a  6800              LDR      r0,[r0,#0]  ; tmeout
000c0c  4ba6              LDR      r3,|L1.3752|
000c0e  461a              MOV      r2,r3
000c10  3208              ADDS     r2,r2,#8
000c12  4611              MOV      r1,r2
000c14  3124              ADDS     r1,r1,#0x24
000c16  9000              STR      r0,[sp,#0]
000c18  48a8              LDR      r0,|L1.3772|
000c1a  f7fffffe          BL       send_GSM
000c1e  4601              MOV      r1,r0
000c20  9003              STR      r0,[sp,#0xc]
000c22  48a2              LDR      r0,|L1.3756|
000c24  3014              ADDS     r0,r0,#0x14
000c26  f7fffffe          BL       __2printf
;;;726    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
000c2a  489e              LDR      r0,|L1.3748|
000c2c  6800              LDR      r0,[r0,#0]  ; tmeout
000c2e  4b9e              LDR      r3,|L1.3752|
000c30  461a              MOV      r2,r3
000c32  3208              ADDS     r2,r2,#8
000c34  4611              MOV      r1,r2
000c36  3124              ADDS     r1,r1,#0x24
000c38  9000              STR      r0,[sp,#0]
000c3a  489c              LDR      r0,|L1.3756|
000c3c  f7fffffe          BL       send_GSM
000c40  4601              MOV      r1,r0
000c42  9003              STR      r0,[sp,#0xc]
000c44  4899              LDR      r0,|L1.3756|
000c46  3014              ADDS     r0,r0,#0x14
000c48  f7fffffe          BL       __2printf
000c4c  e3f9              B        |L1.5186|
                  |L1.3150|
;;;727    															
;;;728    															
;;;729    									
;;;730    							}		
;;;731    						else if(strstr(uart_string_gsm, "DEBUG"))
000c4e  a1b9              ADR      r1,|L1.3892|
000c50  4899              LDR      r0,|L1.3768|
000c52  f7fffffe          BL       strstr
000c56  2800              CMP      r0,#0
000c58  d07e              BEQ      |L1.3416|
;;;732    							{
;;;733    									memset(at_,0,100);
000c5a  2164              MOVS     r1,#0x64
000c5c  4897              LDR      r0,|L1.3772|
000c5e  f7fffffe          BL       __aeabi_memclr4
;;;734    									for(k=0;k<450;k++)
000c62  2000              MOVS     r0,#0
000c64  49b5              LDR      r1,|L1.3900|
000c66  6008              STR      r0,[r1,#0]  ; k
000c68  e04e              B        |L1.3336|
                  |L1.3178|
;;;735    									{
;;;736    										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
000c6a  48b4              LDR      r0,|L1.3900|
000c6c  6800              LDR      r0,[r0,#0]  ; k
000c6e  1e40              SUBS     r0,r0,#1
000c70  4991              LDR      r1,|L1.3768|
000c72  5c08              LDRB     r0,[r1,r0]
000c74  2820              CMP      r0,#0x20
000c76  d142              BNE      |L1.3326|
000c78  48b0              LDR      r0,|L1.3900|
000c7a  6800              LDR      r0,[r0,#0]  ; k
000c7c  1e80              SUBS     r0,r0,#2
000c7e  5c08              LDRB     r0,[r1,r0]
000c80  2847              CMP      r0,#0x47
000c82  d13c              BNE      |L1.3326|
000c84  48ad              LDR      r0,|L1.3900|
000c86  6800              LDR      r0,[r0,#0]  ; k
000c88  1ec0              SUBS     r0,r0,#3
000c8a  5c08              LDRB     r0,[r1,r0]
000c8c  2855              CMP      r0,#0x55
000c8e  d136              BNE      |L1.3326|
;;;737    										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
000c90  48aa              LDR      r0,|L1.3900|
000c92  6800              LDR      r0,[r0,#0]  ; k
000c94  1f00              SUBS     r0,r0,#4
000c96  5c08              LDRB     r0,[r1,r0]
000c98  2842              CMP      r0,#0x42
000c9a  d130              BNE      |L1.3326|
000c9c  48a7              LDR      r0,|L1.3900|
000c9e  6800              LDR      r0,[r0,#0]  ; k
000ca0  1f40              SUBS     r0,r0,#5
000ca2  5c08              LDRB     r0,[r1,r0]
000ca4  2845              CMP      r0,#0x45
000ca6  d12a              BNE      |L1.3326|
000ca8  48a4              LDR      r0,|L1.3900|
000caa  6800              LDR      r0,[r0,#0]  ; k
000cac  1f80              SUBS     r0,r0,#6
000cae  5c08              LDRB     r0,[r1,r0]
000cb0  2844              CMP      r0,#0x44
000cb2  d124              BNE      |L1.3326|
;;;738    										{
;;;739    											for(i=0;i<100;i++)
000cb4  2000              MOVS     r0,#0
000cb6  49a2              LDR      r1,|L1.3904|
000cb8  6008              STR      r0,[r1,#0]  ; i
000cba  e011              B        |L1.3296|
                  |L1.3260|
;;;740    											{
;;;741    												at_[i]=uart_string_gsm[k];
000cbc  487e              LDR      r0,|L1.3768|
000cbe  499f              LDR      r1,|L1.3900|
000cc0  6809              LDR      r1,[r1,#0]  ; k
000cc2  5c40              LDRB     r0,[r0,r1]
000cc4  497d              LDR      r1,|L1.3772|
000cc6  4a9e              LDR      r2,|L1.3904|
000cc8  6812              LDR      r2,[r2,#0]  ; i
000cca  5488              STRB     r0,[r1,r2]
;;;742    												k++;
000ccc  489b              LDR      r0,|L1.3900|
000cce  6800              LDR      r0,[r0,#0]  ; k
000cd0  1c40              ADDS     r0,r0,#1
000cd2  499a              LDR      r1,|L1.3900|
000cd4  6008              STR      r0,[r1,#0]  ; k
000cd6  489a              LDR      r0,|L1.3904|
000cd8  6800              LDR      r0,[r0,#0]            ;739  ; i
000cda  1c40              ADDS     r0,r0,#1              ;739
000cdc  4998              LDR      r1,|L1.3904|
000cde  6008              STR      r0,[r1,#0]            ;739  ; i
                  |L1.3296|
000ce0  4897              LDR      r0,|L1.3904|
000ce2  6800              LDR      r0,[r0,#0]            ;739  ; i
000ce4  2864              CMP      r0,#0x64              ;739
000ce6  dbe9              BLT      |L1.3260|
;;;743    											}	
;;;744    										at_[i+1]='\r';
000ce8  210d              MOVS     r1,#0xd
000cea  4a74              LDR      r2,|L1.3772|
000cec  4894              LDR      r0,|L1.3904|
000cee  6800              LDR      r0,[r0,#0]  ; i
000cf0  1c40              ADDS     r0,r0,#1
000cf2  5411              STRB     r1,[r2,r0]
;;;745    										at_[i+2]='\n';	
000cf4  210a              MOVS     r1,#0xa
000cf6  4892              LDR      r0,|L1.3904|
000cf8  6800              LDR      r0,[r0,#0]  ; i
000cfa  1c80              ADDS     r0,r0,#2
000cfc  5411              STRB     r1,[r2,r0]
                  |L1.3326|
000cfe  488f              LDR      r0,|L1.3900|
000d00  6800              LDR      r0,[r0,#0]            ;734  ; k
000d02  1c40              ADDS     r0,r0,#1              ;734
000d04  498d              LDR      r1,|L1.3900|
000d06  6008              STR      r0,[r1,#0]            ;734  ; k
                  |L1.3336|
000d08  488c              LDR      r0,|L1.3900|
000d0a  6800              LDR      r0,[r0,#0]            ;734  ; k
000d0c  21ff              MOVS     r1,#0xff              ;734
000d0e  31c3              ADDS     r1,r1,#0xc3           ;734
000d10  4288              CMP      r0,r1                 ;734
000d12  dbaa              BLT      |L1.3178|
;;;746    										}
;;;747    										else{}
;;;748    									}
;;;749    									
;;;750    									printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));		
000d14  4863              LDR      r0,|L1.3748|
000d16  6800              LDR      r0,[r0,#0]  ; tmeout
000d18  4b63              LDR      r3,|L1.3752|
000d1a  461a              MOV      r2,r3
000d1c  3208              ADDS     r2,r2,#8
000d1e  4611              MOV      r1,r2
000d20  3124              ADDS     r1,r1,#0x24
000d22  9000              STR      r0,[sp,#0]
000d24  4865              LDR      r0,|L1.3772|
000d26  f7fffffe          BL       send_GSM
000d2a  4601              MOV      r1,r0
000d2c  9003              STR      r0,[sp,#0xc]
000d2e  485f              LDR      r0,|L1.3756|
000d30  3014              ADDS     r0,r0,#0x14
000d32  f7fffffe          BL       __2printf
;;;751    										memset(data2,0,strlen(data2));
000d36  4883              LDR      r0,|L1.3908|
000d38  f7fffffe          BL       strlen
000d3c  4601              MOV      r1,r0
000d3e  9003              STR      r0,[sp,#0xc]
000d40  4880              LDR      r0,|L1.3908|
000d42  f7fffffe          BL       __aeabi_memclr4
;;;752    										sprintf(data2,"%s",uart_string_gsm);	
000d46  4a5c              LDR      r2,|L1.3768|
000d48  a17f              ADR      r1,|L1.3912|
000d4a  487e              LDR      r0,|L1.3908|
000d4c  f7fffffe          BL       __2sprintf
;;;753    										send_message(data2);
000d50  487c              LDR      r0,|L1.3908|
000d52  f7fffffe          BL       send_message
;;;754    									printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));		
000d56  e000              B        |L1.3418|
                  |L1.3416|
000d58  e011              B        |L1.3454|
                  |L1.3418|
000d5a  4852              LDR      r0,|L1.3748|
000d5c  6800              LDR      r0,[r0,#0]  ; tmeout
000d5e  4b52              LDR      r3,|L1.3752|
000d60  461a              MOV      r2,r3
000d62  3208              ADDS     r2,r2,#8
000d64  4611              MOV      r1,r2
000d66  3124              ADDS     r1,r1,#0x24
000d68  9000              STR      r0,[sp,#0]
000d6a  4850              LDR      r0,|L1.3756|
000d6c  f7fffffe          BL       send_GSM
000d70  4601              MOV      r1,r0
000d72  9003              STR      r0,[sp,#0xc]
000d74  484d              LDR      r0,|L1.3756|
000d76  3014              ADDS     r0,r0,#0x14
000d78  f7fffffe          BL       __2printf
000d7c  e361              B        |L1.5186|
                  |L1.3454|
;;;755    									
;;;756    								
;;;757    							}
;;;758    							
;;;759    							else if(strstr(uart_string_gsm, "RESET"))
000d7e  a173              ADR      r1,|L1.3916|
000d80  484d              LDR      r0,|L1.3768|
000d82  f7fffffe          BL       strstr
000d86  2800              CMP      r0,#0
000d88  d022              BEQ      |L1.3536|
;;;760    							{
;;;761    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
000d8a  4846              LDR      r0,|L1.3748|
000d8c  6800              LDR      r0,[r0,#0]  ; tmeout
000d8e  4b46              LDR      r3,|L1.3752|
000d90  461a              MOV      r2,r3
000d92  3208              ADDS     r2,r2,#8
000d94  4611              MOV      r1,r2
000d96  3124              ADDS     r1,r1,#0x24
000d98  9000              STR      r0,[sp,#0]
000d9a  4844              LDR      r0,|L1.3756|
000d9c  f7fffffe          BL       send_GSM
000da0  4601              MOV      r1,r0
000da2  9003              STR      r0,[sp,#0xc]
000da4  4841              LDR      r0,|L1.3756|
000da6  3014              ADDS     r0,r0,#0x14
000da8  f7fffffe          BL       __2printf
;;;762    								printf("%s\n",send_GSM("\n\n AT+CFUN=1,1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
000dac  483d              LDR      r0,|L1.3748|
000dae  6800              LDR      r0,[r0,#0]  ; tmeout
000db0  4b3d              LDR      r3,|L1.3752|
000db2  461a              MOV      r2,r3
000db4  3208              ADDS     r2,r2,#8
000db6  4611              MOV      r1,r2
000db8  3124              ADDS     r1,r1,#0x24
000dba  9000              STR      r0,[sp,#0]
000dbc  a065              ADR      r0,|L1.3924|
000dbe  f7fffffe          BL       send_GSM
000dc2  4601              MOV      r1,r0
000dc4  9003              STR      r0,[sp,#0xc]
000dc6  4839              LDR      r0,|L1.3756|
000dc8  3014              ADDS     r0,r0,#0x14
000dca  f7fffffe          BL       __2printf
000dce  e338              B        |L1.5186|
                  |L1.3536|
;;;763    							}
;;;764    							
;;;765    							else if(strstr(uart_string_gsm, "IP"))
000dd0  a165              ADR      r1,|L1.3944|
000dd2  4839              LDR      r0,|L1.3768|
000dd4  f7fffffe          BL       strstr
000dd8  2800              CMP      r0,#0
000dda  d035              BEQ      |L1.3656|
;;;766    							{
;;;767    								printf("\n\n\n\t%s",uart_string_gsm);
000ddc  4936              LDR      r1,|L1.3768|
000dde  a063              ADR      r0,|L1.3948|
000de0  f7fffffe          BL       __2printf
;;;768    								memset(ip,0,16);
000de4  4863              LDR      r0,|L1.3956|
000de6  2100              MOVS     r1,#0
000de8  6001              STR      r1,[r0,#0]  ; ip
000dea  6041              STR      r1,[r0,#4]  ; ip
000dec  6081              STR      r1,[r0,#8]  ; ip
000dee  60c1              STR      r1,[r0,#0xc]  ; ip
;;;769    								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
000df0  2120              MOVS     r1,#0x20
000df2  460b              MOV      r3,r1
000df4  2204              MOVS     r2,#4
000df6  9100              STR      r1,[sp,#0]
000df8  9001              STR      r0,[sp,#4]
000dfa  2103              MOVS     r1,#3
000dfc  482e              LDR      r0,|L1.3768|
000dfe  f7fffffe          BL       parse_g
;;;770    								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
000e02  485d              LDR      r0,|L1.3960|
000e04  210d              MOVS     r1,#0xd
000e06  2320              MOVS     r3,#0x20
000e08  2205              MOVS     r2,#5
000e0a  9100              STR      r1,[sp,#0]
000e0c  9001              STR      r0,[sp,#4]
000e0e  2106              MOVS     r1,#6
000e10  4829              LDR      r0,|L1.3768|
000e12  f7fffffe          BL       parse_g
;;;771    								printf("\n%s\n",port);
000e16  4958              LDR      r1,|L1.3960|
000e18  4823              LDR      r0,|L1.3752|
000e1a  3014              ADDS     r0,r0,#0x14
000e1c  f7fffffe          BL       __2printf
;;;772    								save_ip_port();
000e20  f7fffffe          BL       save_ip_port
;;;773    							
;;;774    	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;775    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));	
000e24  481f              LDR      r0,|L1.3748|
000e26  6800              LDR      r0,[r0,#0]  ; tmeout
000e28  4b1f              LDR      r3,|L1.3752|
000e2a  461a              MOV      r2,r3
000e2c  3208              ADDS     r2,r2,#8
000e2e  4611              MOV      r1,r2
000e30  3124              ADDS     r1,r1,#0x24
000e32  9000              STR      r0,[sp,#0]
000e34  481d              LDR      r0,|L1.3756|
000e36  f7fffffe          BL       send_GSM
000e3a  4601              MOV      r1,r0
000e3c  9003              STR      r0,[sp,#0xc]
000e3e  481b              LDR      r0,|L1.3756|
000e40  3014              ADDS     r0,r0,#0x14
000e42  f7fffffe          BL       __2printf
000e46  e2fc              B        |L1.5186|
                  |L1.3656|
;;;776    
;;;777    //								while(1);
;;;778    								
;;;779    								
;;;780    							}							
;;;781    							
;;;782    												
;;;783    
;;;784    							else
;;;785    							{
;;;786    								
;;;787    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
000e48  4816              LDR      r0,|L1.3748|
000e4a  6800              LDR      r0,[r0,#0]  ; tmeout
000e4c  4b16              LDR      r3,|L1.3752|
000e4e  461a              MOV      r2,r3
000e50  3208              ADDS     r2,r2,#8
000e52  4611              MOV      r1,r2
000e54  3124              ADDS     r1,r1,#0x24
000e56  9000              STR      r0,[sp,#0]
000e58  4814              LDR      r0,|L1.3756|
000e5a  f7fffffe          BL       send_GSM
000e5e  4601              MOV      r1,r0
000e60  9003              STR      r0,[sp,#0xc]
000e62  4812              LDR      r0,|L1.3756|
000e64  3014              ADDS     r0,r0,#0x14
000e66  f7fffffe          BL       __2printf
000e6a  e2ea              B        |L1.5186|
                  |L1.3692|
;;;788    
;;;789    							}
;;;790    
;;;791    								
;;;792    					}
;;;793    					
;;;794    					else
;;;795    					{
;;;796    						
;;;797    						
;;;798    							if(strstr(uart_string_gsm, "START"))
000e6c  490f              LDR      r1,|L1.3756|
000e6e  3128              ADDS     r1,r1,#0x28
000e70  4811              LDR      r0,|L1.3768|
000e72  f7fffffe          BL       strstr
000e76  2800              CMP      r0,#0
000e78  d00a              BEQ      |L1.3728|
;;;799    							{
;;;800    								printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
000e7a  4840              LDR      r0,|L1.3964|
000e7c  4b0a              LDR      r3,|L1.3752|
000e7e  461a              MOV      r2,r3
000e80  3208              ADDS     r2,r2,#8
000e82  a13f              ADR      r1,|L1.3968|
000e84  9000              STR      r0,[sp,#0]
000e86  4610              MOV      r0,r2
000e88  3038              ADDS     r0,r0,#0x38
000e8a  f7fffffe          BL       send_GSM
000e8e  e079              B        |L1.3972|
                  |L1.3728|
000e90  e0c8              B        |L1.4132|
000e92  0000              DCW      0x0000
                  |L1.3732|
000e94  0a0a092c          DCB      "\n\n\t,%s,%s,%s,\n",0
000e98  25732c25
000e9c  732c2573
000ea0  2c0a00  
000ea3  00                DCB      0
                  |L1.3748|
                          DCD      tmeout
                  |L1.3752|
                          DCD      ||.text||+0x464
                  |L1.3756|
                          DCD      ||.text||+0xa34
                  |L1.3760|
000eb0  4f574e45          DCB      "OWNER1",0
000eb4  523100  
000eb7  00                DCB      0
                  |L1.3768|
                          DCD      uart_string_gsm
                  |L1.3772|
                          DCD      at_
                  |L1.3776|
                          DCD      num_o
                  |L1.3780|
000ec4  0d0a4154          DCB      "\r\nAT+CPBW=1,""%s"",129,""OWNER1""\r\n",0
000ec8  2b435042
000ecc  573d312c
000ed0  22257322
000ed4  2c313239
000ed8  2c224f57
000edc  4e455231
000ee0  220d0a00
                  |L1.3812|
000ee4  4f574e45          DCB      "OWNER2",0
000ee8  523200  
000eeb  00                DCB      0
                  |L1.3820|
000eec  0d0a4154          DCB      "\r\nAT+CPBW=2,""%s"",129,""OWNER2""\r\n",0
000ef0  2b435042
000ef4  573d322c
000ef8  22257322
000efc  2c313239
000f00  2c224f57
000f04  4e455232
000f08  220d0a00
                  |L1.3852|
000f0c  4f574e45          DCB      "OWNER3",0
000f10  523300  
000f13  00                DCB      0
                  |L1.3860|
000f14  0d0a4154          DCB      "\r\nAT+CPBW=3,""%s"",129,""OWNER3""\r\n",0
000f18  2b435042
000f1c  573d332c
000f20  22257322
000f24  2c313239
000f28  2c224f57
000f2c  4e455233
000f30  220d0a00
                  |L1.3892|
000f34  44454255          DCB      "DEBUG",0
000f38  4700    
000f3a  00                DCB      0
000f3b  00                DCB      0
                  |L1.3900|
                          DCD      k
                  |L1.3904|
                          DCD      i
                  |L1.3908|
                          DCD      data2
                  |L1.3912|
000f48  257300            DCB      "%s",0
000f4b  00                DCB      0
                  |L1.3916|
000f4c  52455345          DCB      "RESET",0
000f50  5400    
000f52  00                DCB      0
000f53  00                DCB      0
                  |L1.3924|
000f54  0a0a2041          DCB      "\n\n AT+CFUN=1,1\r\n",0
000f58  542b4346
000f5c  554e3d31
000f60  2c310d0a
000f64  00      
000f65  00                DCB      0
000f66  00                DCB      0
000f67  00                DCB      0
                  |L1.3944|
000f68  495000            DCB      "IP",0
000f6b  00                DCB      0
                  |L1.3948|
000f6c  0a0a0a09          DCB      "\n\n\n\t%s",0
000f70  257300  
000f73  00                DCB      0
                  |L1.3956|
                          DCD      ||ip||
                  |L1.3960|
                          DCD      port
                  |L1.3964|
                          DCD      0x000f423f
                  |L1.3968|
000f80  4f4b00            DCB      "OK",0
000f83  00                DCB      0
                  |L1.3972|
000f84  4601              MOV      r1,r0
000f86  9003              STR      r0,[sp,#0xc]
000f88  48fe              LDR      r0,|L1.4996|
000f8a  f7fffffe          BL       __2printf
;;;801    								printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
000f8e  48fe              LDR      r0,|L1.5000|
000f90  4bfc              LDR      r3,|L1.4996|
000f92  3b14              SUBS     r3,r3,#0x14
000f94  461a              MOV      r2,r3
000f96  3208              ADDS     r2,r2,#8
000f98  a1fc              ADR      r1,|L1.5004|
000f9a  9000              STR      r0,[sp,#0]
000f9c  48fc              LDR      r0,|L1.5008|
000f9e  f7fffffe          BL       send_GSM
000fa2  4601              MOV      r1,r0
000fa4  9003              STR      r0,[sp,#0xc]
000fa6  48f7              LDR      r0,|L1.4996|
000fa8  f7fffffe          BL       __2printf
;;;802    								printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
000fac  48f6              LDR      r0,|L1.5000|
000fae  4bf5              LDR      r3,|L1.4996|
000fb0  3b14              SUBS     r3,r3,#0x14
000fb2  461a              MOV      r2,r3
000fb4  3208              ADDS     r2,r2,#8
000fb6  a1f5              ADR      r1,|L1.5004|
000fb8  9000              STR      r0,[sp,#0]
000fba  48f6              LDR      r0,|L1.5012|
000fbc  f7fffffe          BL       send_GSM
000fc0  4601              MOV      r1,r0
000fc2  9003              STR      r0,[sp,#0xc]
000fc4  48ef              LDR      r0,|L1.4996|
000fc6  f7fffffe          BL       __2printf
;;;803    								memcpy (ip, "104.236.203.4", 13);
000fca  220d              MOVS     r2,#0xd
000fcc  49f0              LDR      r1,|L1.5008|
000fce  311c              ADDS     r1,r1,#0x1c
000fd0  48f1              LDR      r0,|L1.5016|
000fd2  f7fffffe          BL       __aeabi_memcpy4
;;;804    								memcpy (port, "5555", 4);		
000fd6  48f1              LDR      r0,|L1.5020|
000fd8  49ed              LDR      r1,|L1.5008|
000fda  3134              ADDS     r1,r1,#0x34
000fdc  6809              LDR      r1,[r1,#0]
000fde  6001              STR      r1,[r0,#0]  ; port
;;;805    								memcpy (interval, "1", 1);										
000fe0  48ef              LDR      r0,|L1.5024|
000fe2  a1f0              ADR      r1,|L1.5028|
000fe4  7809              LDRB     r1,[r1,#0]
000fe6  7001              STRB     r1,[r0,#0]
;;;806    								save_ip_port();
000fe8  f7fffffe          BL       save_ip_port
;;;807    								save_interval();	
000fec  f7fffffe          BL       save_interval
;;;808    								printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
000ff0  4beb              LDR      r3,|L1.5024|
000ff2  4aea              LDR      r2,|L1.5020|
000ff4  49e8              LDR      r1,|L1.5016|
000ff6  48ec              LDR      r0,|L1.5032|
000ff8  f7fffffe          BL       __2printf
;;;809    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
000ffc  48eb              LDR      r0,|L1.5036|
000ffe  6800              LDR      r0,[r0,#0]  ; tmeout
001000  4be0              LDR      r3,|L1.4996|
001002  3b14              SUBS     r3,r3,#0x14
001004  461a              MOV      r2,r3
001006  3208              ADDS     r2,r2,#8
001008  4611              MOV      r1,r2
00100a  3124              ADDS     r1,r1,#0x24
00100c  9000              STR      r0,[sp,#0]
00100e  48e0              LDR      r0,|L1.5008|
001010  3830              SUBS     r0,r0,#0x30
001012  f7fffffe          BL       send_GSM
001016  4601              MOV      r1,r0
001018  9003              STR      r0,[sp,#0xc]
00101a  48dd              LDR      r0,|L1.5008|
00101c  381c              SUBS     r0,r0,#0x1c
00101e  f7fffffe          BL       __2printf
                  |L1.4130|
001022  e20e              B        |L1.5186|
                  |L1.4132|
;;;810    								
;;;811    							}
;;;812    							else if(strstr(uart_string_gsm, "OWNER1"))
001024  49e0              LDR      r1,|L1.5032|
001026  311c              ADDS     r1,r1,#0x1c
001028  48e1              LDR      r0,|L1.5040|
00102a  f7fffffe          BL       strstr
00102e  2800              CMP      r0,#0
001030  d03d              BEQ      |L1.4270|
;;;813    							{
;;;814    								memset(at_,0,100);
001032  2164              MOVS     r1,#0x64
001034  48df              LDR      r0,|L1.5044|
001036  f7fffffe          BL       __aeabi_memclr4
;;;815    								memset(num_o,0,15);
00103a  210f              MOVS     r1,#0xf
00103c  48de              LDR      r0,|L1.5048|
00103e  f7fffffe          BL       __aeabi_memclr
;;;816    								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
001042  48dd              LDR      r0,|L1.5048|
001044  210d              MOVS     r1,#0xd
001046  2320              MOVS     r3,#0x20
001048  2205              MOVS     r2,#5
00104a  9100              STR      r1,[sp,#0]
00104c  9001              STR      r0,[sp,#4]
00104e  2103              MOVS     r1,#3
001050  48d7              LDR      r0,|L1.5040|
001052  f7fffffe          BL       parse_g
;;;817    								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
001056  4ad8              LDR      r2,|L1.5048|
001058  49d3              LDR      r1,|L1.5032|
00105a  3130              ADDS     r1,r1,#0x30
00105c  48d5              LDR      r0,|L1.5044|
00105e  f7fffffe          BL       __2sprintf
;;;818    								printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));
001062  48d2              LDR      r0,|L1.5036|
001064  6800              LDR      r0,[r0,#0]  ; tmeout
001066  4bc7              LDR      r3,|L1.4996|
001068  3b14              SUBS     r3,r3,#0x14
00106a  461a              MOV      r2,r3
00106c  3208              ADDS     r2,r2,#8
00106e  4611              MOV      r1,r2
001070  3124              ADDS     r1,r1,#0x24
001072  9000              STR      r0,[sp,#0]
001074  48cf              LDR      r0,|L1.5044|
001076  f7fffffe          BL       send_GSM
00107a  4601              MOV      r1,r0
00107c  9003              STR      r0,[sp,#0xc]
00107e  48c4              LDR      r0,|L1.5008|
001080  381c              SUBS     r0,r0,#0x1c
001082  f7fffffe          BL       __2printf
;;;819    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
001086  48c9              LDR      r0,|L1.5036|
001088  6800              LDR      r0,[r0,#0]  ; tmeout
00108a  4bbe              LDR      r3,|L1.4996|
00108c  3b14              SUBS     r3,r3,#0x14
00108e  461a              MOV      r2,r3
001090  3208              ADDS     r2,r2,#8
001092  4611              MOV      r1,r2
001094  3124              ADDS     r1,r1,#0x24
001096  9000              STR      r0,[sp,#0]
001098  48bd              LDR      r0,|L1.5008|
00109a  3830              SUBS     r0,r0,#0x30
00109c  f7fffffe          BL       send_GSM
0010a0  4601              MOV      r1,r0
0010a2  9003              STR      r0,[sp,#0xc]
0010a4  48ba              LDR      r0,|L1.5008|
0010a6  381c              SUBS     r0,r0,#0x1c
0010a8  f7fffffe          BL       __2printf
0010ac  e1c9              B        |L1.5186|
                  |L1.4270|
;;;820    															
;;;821    						
;;;822    								
;;;823    							}		
;;;824    							else if(strstr(uart_string_gsm, "OWNER2"))
0010ae  49be              LDR      r1,|L1.5032|
0010b0  3150              ADDS     r1,r1,#0x50
0010b2  48bf              LDR      r0,|L1.5040|
0010b4  f7fffffe          BL       strstr
0010b8  2800              CMP      r0,#0
0010ba  d03d              BEQ      |L1.4408|
;;;825    							{
;;;826    								memset(at_,0,100);
0010bc  2164              MOVS     r1,#0x64
0010be  48bd              LDR      r0,|L1.5044|
0010c0  f7fffffe          BL       __aeabi_memclr4
;;;827    								memset(num_o,0,15);
0010c4  210f              MOVS     r1,#0xf
0010c6  48bc              LDR      r0,|L1.5048|
0010c8  f7fffffe          BL       __aeabi_memclr
;;;828    								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
0010cc  48ba              LDR      r0,|L1.5048|
0010ce  210d              MOVS     r1,#0xd
0010d0  2320              MOVS     r3,#0x20
0010d2  2205              MOVS     r2,#5
0010d4  9100              STR      r1,[sp,#0]
0010d6  9001              STR      r0,[sp,#4]
0010d8  2103              MOVS     r1,#3
0010da  48b5              LDR      r0,|L1.5040|
0010dc  f7fffffe          BL       parse_g
;;;829    								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
0010e0  4ab5              LDR      r2,|L1.5048|
0010e2  49b1              LDR      r1,|L1.5032|
0010e4  3158              ADDS     r1,r1,#0x58
0010e6  48b3              LDR      r0,|L1.5044|
0010e8  f7fffffe          BL       __2sprintf
;;;830    								printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));
0010ec  48af              LDR      r0,|L1.5036|
0010ee  6800              LDR      r0,[r0,#0]  ; tmeout
0010f0  4ba4              LDR      r3,|L1.4996|
0010f2  3b14              SUBS     r3,r3,#0x14
0010f4  461a              MOV      r2,r3
0010f6  3208              ADDS     r2,r2,#8
0010f8  4611              MOV      r1,r2
0010fa  3124              ADDS     r1,r1,#0x24
0010fc  9000              STR      r0,[sp,#0]
0010fe  48ad              LDR      r0,|L1.5044|
001100  f7fffffe          BL       send_GSM
001104  4601              MOV      r1,r0
001106  9003              STR      r0,[sp,#0xc]
001108  48a1              LDR      r0,|L1.5008|
00110a  381c              SUBS     r0,r0,#0x1c
00110c  f7fffffe          BL       __2printf
;;;831    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
001110  48a6              LDR      r0,|L1.5036|
001112  6800              LDR      r0,[r0,#0]  ; tmeout
001114  4b9b              LDR      r3,|L1.4996|
001116  3b14              SUBS     r3,r3,#0x14
001118  461a              MOV      r2,r3
00111a  3208              ADDS     r2,r2,#8
00111c  4611              MOV      r1,r2
00111e  3124              ADDS     r1,r1,#0x24
001120  9000              STR      r0,[sp,#0]
001122  489b              LDR      r0,|L1.5008|
001124  3830              SUBS     r0,r0,#0x30
001126  f7fffffe          BL       send_GSM
00112a  4601              MOV      r1,r0
00112c  9003              STR      r0,[sp,#0xc]
00112e  4898              LDR      r0,|L1.5008|
001130  381c              SUBS     r0,r0,#0x1c
001132  f7fffffe          BL       __2printf
001136  e184              B        |L1.5186|
                  |L1.4408|
;;;832    															
;;;833    								
;;;834    							}									
;;;835    							else if(strstr(uart_string_gsm, "OWNER3"))
001138  499b              LDR      r1,|L1.5032|
00113a  3178              ADDS     r1,r1,#0x78
00113c  489c              LDR      r0,|L1.5040|
00113e  f7fffffe          BL       strstr
001142  2800              CMP      r0,#0
001144  d03d              BEQ      |L1.4546|
;;;836    							{
;;;837    								memset(at_,0,100);
001146  2164              MOVS     r1,#0x64
001148  489a              LDR      r0,|L1.5044|
00114a  f7fffffe          BL       __aeabi_memclr4
;;;838    								memset(num_o,0,15);
00114e  210f              MOVS     r1,#0xf
001150  4899              LDR      r0,|L1.5048|
001152  f7fffffe          BL       __aeabi_memclr
;;;839    								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
001156  4898              LDR      r0,|L1.5048|
001158  210d              MOVS     r1,#0xd
00115a  2320              MOVS     r3,#0x20
00115c  2205              MOVS     r2,#5
00115e  9100              STR      r1,[sp,#0]
001160  9001              STR      r0,[sp,#4]
001162  2103              MOVS     r1,#3
001164  4892              LDR      r0,|L1.5040|
001166  f7fffffe          BL       parse_g
;;;840    								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
00116a  4a93              LDR      r2,|L1.5048|
00116c  498e              LDR      r1,|L1.5032|
00116e  3180              ADDS     r1,r1,#0x80
001170  4890              LDR      r0,|L1.5044|
001172  f7fffffe          BL       __2sprintf
;;;841    								printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));
001176  488d              LDR      r0,|L1.5036|
001178  6800              LDR      r0,[r0,#0]  ; tmeout
00117a  4b82              LDR      r3,|L1.4996|
00117c  3b14              SUBS     r3,r3,#0x14
00117e  461a              MOV      r2,r3
001180  3208              ADDS     r2,r2,#8
001182  4611              MOV      r1,r2
001184  3124              ADDS     r1,r1,#0x24
001186  9000              STR      r0,[sp,#0]
001188  488a              LDR      r0,|L1.5044|
00118a  f7fffffe          BL       send_GSM
00118e  4601              MOV      r1,r0
001190  9003              STR      r0,[sp,#0xc]
001192  487f              LDR      r0,|L1.5008|
001194  381c              SUBS     r0,r0,#0x1c
001196  f7fffffe          BL       __2printf
;;;842    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
00119a  4884              LDR      r0,|L1.5036|
00119c  6800              LDR      r0,[r0,#0]  ; tmeout
00119e  4b79              LDR      r3,|L1.4996|
0011a0  3b14              SUBS     r3,r3,#0x14
0011a2  461a              MOV      r2,r3
0011a4  3208              ADDS     r2,r2,#8
0011a6  4611              MOV      r1,r2
0011a8  3124              ADDS     r1,r1,#0x24
0011aa  9000              STR      r0,[sp,#0]
0011ac  4878              LDR      r0,|L1.5008|
0011ae  3830              SUBS     r0,r0,#0x30
0011b0  f7fffffe          BL       send_GSM
0011b4  4601              MOV      r1,r0
0011b6  9003              STR      r0,[sp,#0xc]
0011b8  4875              LDR      r0,|L1.5008|
0011ba  381c              SUBS     r0,r0,#0x1c
0011bc  f7fffffe          BL       __2printf
0011c0  e13f              B        |L1.5186|
                  |L1.4546|
;;;843    															
;;;844    															
;;;845    									
;;;846    							}		
;;;847    						else if(strstr(uart_string_gsm, "DEBUG"))
0011c2  4979              LDR      r1,|L1.5032|
0011c4  31a0              ADDS     r1,r1,#0xa0
0011c6  487a              LDR      r0,|L1.5040|
0011c8  f7fffffe          BL       strstr
0011cc  2800              CMP      r0,#0
0011ce  d07d              BEQ      |L1.4812|
;;;848    							{
;;;849    									memset(at_,0,100);
0011d0  2164              MOVS     r1,#0x64
0011d2  4878              LDR      r0,|L1.5044|
0011d4  f7fffffe          BL       __aeabi_memclr4
;;;850    									for(k=0;k<450;k++)
0011d8  2000              MOVS     r0,#0
0011da  4978              LDR      r1,|L1.5052|
0011dc  6008              STR      r0,[r1,#0]  ; k
0011de  e04e              B        |L1.4734|
                  |L1.4576|
;;;851    									{
;;;852    										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
0011e0  4876              LDR      r0,|L1.5052|
0011e2  6800              LDR      r0,[r0,#0]  ; k
0011e4  1e40              SUBS     r0,r0,#1
0011e6  4972              LDR      r1,|L1.5040|
0011e8  5c08              LDRB     r0,[r1,r0]
0011ea  2820              CMP      r0,#0x20
0011ec  d142              BNE      |L1.4724|
0011ee  4873              LDR      r0,|L1.5052|
0011f0  6800              LDR      r0,[r0,#0]  ; k
0011f2  1e80              SUBS     r0,r0,#2
0011f4  5c08              LDRB     r0,[r1,r0]
0011f6  2847              CMP      r0,#0x47
0011f8  d13c              BNE      |L1.4724|
0011fa  4870              LDR      r0,|L1.5052|
0011fc  6800              LDR      r0,[r0,#0]  ; k
0011fe  1ec0              SUBS     r0,r0,#3
001200  5c08              LDRB     r0,[r1,r0]
001202  2855              CMP      r0,#0x55
001204  d136              BNE      |L1.4724|
;;;853    										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
001206  486d              LDR      r0,|L1.5052|
001208  6800              LDR      r0,[r0,#0]  ; k
00120a  1f00              SUBS     r0,r0,#4
00120c  5c08              LDRB     r0,[r1,r0]
00120e  2842              CMP      r0,#0x42
001210  d130              BNE      |L1.4724|
001212  486a              LDR      r0,|L1.5052|
001214  6800              LDR      r0,[r0,#0]  ; k
001216  1f40              SUBS     r0,r0,#5
001218  5c08              LDRB     r0,[r1,r0]
00121a  2845              CMP      r0,#0x45
00121c  d12a              BNE      |L1.4724|
00121e  4867              LDR      r0,|L1.5052|
001220  6800              LDR      r0,[r0,#0]  ; k
001222  1f80              SUBS     r0,r0,#6
001224  5c08              LDRB     r0,[r1,r0]
001226  2844              CMP      r0,#0x44
001228  d124              BNE      |L1.4724|
;;;854    										{
;;;855    											for(i=0;i<100;i++)
00122a  2000              MOVS     r0,#0
00122c  4964              LDR      r1,|L1.5056|
00122e  6008              STR      r0,[r1,#0]  ; i
001230  e011              B        |L1.4694|
                  |L1.4658|
;;;856    											{
;;;857    												at_[i]=uart_string_gsm[k];
001232  485f              LDR      r0,|L1.5040|
001234  4961              LDR      r1,|L1.5052|
001236  6809              LDR      r1,[r1,#0]  ; k
001238  5c41              LDRB     r1,[r0,r1]
00123a  485e              LDR      r0,|L1.5044|
00123c  4a60              LDR      r2,|L1.5056|
00123e  6812              LDR      r2,[r2,#0]  ; i
001240  5481              STRB     r1,[r0,r2]
;;;858    												k++;
001242  485e              LDR      r0,|L1.5052|
001244  6800              LDR      r0,[r0,#0]  ; k
001246  1c40              ADDS     r0,r0,#1
001248  495c              LDR      r1,|L1.5052|
00124a  6008              STR      r0,[r1,#0]  ; k
00124c  485c              LDR      r0,|L1.5056|
00124e  6800              LDR      r0,[r0,#0]            ;855  ; i
001250  1c40              ADDS     r0,r0,#1              ;855
001252  495b              LDR      r1,|L1.5056|
001254  6008              STR      r0,[r1,#0]            ;855  ; i
                  |L1.4694|
001256  485a              LDR      r0,|L1.5056|
001258  6800              LDR      r0,[r0,#0]            ;855  ; i
00125a  2864              CMP      r0,#0x64              ;855
00125c  dbe9              BLT      |L1.4658|
;;;859    											}	
;;;860    										at_[i+1]='\r';
00125e  210d              MOVS     r1,#0xd
001260  4a54              LDR      r2,|L1.5044|
001262  4857              LDR      r0,|L1.5056|
001264  6800              LDR      r0,[r0,#0]  ; i
001266  1c40              ADDS     r0,r0,#1
001268  5411              STRB     r1,[r2,r0]
;;;861    										at_[i+2]='\n';	
00126a  210a              MOVS     r1,#0xa
00126c  4854              LDR      r0,|L1.5056|
00126e  6800              LDR      r0,[r0,#0]  ; i
001270  1c80              ADDS     r0,r0,#2
001272  5411              STRB     r1,[r2,r0]
                  |L1.4724|
001274  4851              LDR      r0,|L1.5052|
001276  6800              LDR      r0,[r0,#0]            ;850  ; k
001278  1c40              ADDS     r0,r0,#1              ;850
00127a  4950              LDR      r1,|L1.5052|
00127c  6008              STR      r0,[r1,#0]            ;850  ; k
                  |L1.4734|
00127e  484f              LDR      r0,|L1.5052|
001280  6800              LDR      r0,[r0,#0]            ;850  ; k
001282  21ff              MOVS     r1,#0xff              ;850
001284  31c3              ADDS     r1,r1,#0xc3           ;850
001286  4288              CMP      r0,r1                 ;850
001288  dbaa              BLT      |L1.4576|
;;;862    										}
;;;863    										else{}
;;;864    									}
;;;865    									
;;;866    									printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));		
00128a  4848              LDR      r0,|L1.5036|
00128c  6800              LDR      r0,[r0,#0]  ; tmeout
00128e  4b3d              LDR      r3,|L1.4996|
001290  3b14              SUBS     r3,r3,#0x14
001292  461a              MOV      r2,r3
001294  3208              ADDS     r2,r2,#8
001296  4611              MOV      r1,r2
001298  3124              ADDS     r1,r1,#0x24
00129a  9000              STR      r0,[sp,#0]
00129c  4845              LDR      r0,|L1.5044|
00129e  f7fffffe          BL       send_GSM
0012a2  4601              MOV      r1,r0
0012a4  9003              STR      r0,[sp,#0xc]
0012a6  483a              LDR      r0,|L1.5008|
0012a8  381c              SUBS     r0,r0,#0x1c
0012aa  f7fffffe          BL       __2printf
;;;867    										memset(data2,0,strlen(data2));
0012ae  4845              LDR      r0,|L1.5060|
0012b0  f7fffffe          BL       strlen
0012b4  4601              MOV      r1,r0
0012b6  9003              STR      r0,[sp,#0xc]
0012b8  4842              LDR      r0,|L1.5060|
0012ba  f7fffffe          BL       __aeabi_memclr4
;;;868    										sprintf(data2,"%s",uart_string_gsm);	
0012be  4a3c              LDR      r2,|L1.5040|
0012c0  a141              ADR      r1,|L1.5064|
0012c2  4840              LDR      r0,|L1.5060|
0012c4  f7fffffe          BL       __2sprintf
;;;869    										send_message(data2);
0012c8  483e              LDR      r0,|L1.5060|
0012ca  e000              B        |L1.4814|
                  |L1.4812|
0012cc  e015              B        |L1.4858|
                  |L1.4814|
0012ce  f7fffffe          BL       send_message
;;;870    									printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));		
0012d2  4836              LDR      r0,|L1.5036|
0012d4  6800              LDR      r0,[r0,#0]  ; tmeout
0012d6  4b2b              LDR      r3,|L1.4996|
0012d8  3b14              SUBS     r3,r3,#0x14
0012da  461a              MOV      r2,r3
0012dc  3208              ADDS     r2,r2,#8
0012de  4611              MOV      r1,r2
0012e0  3124              ADDS     r1,r1,#0x24
0012e2  9000              STR      r0,[sp,#0]
0012e4  482a              LDR      r0,|L1.5008|
0012e6  3830              SUBS     r0,r0,#0x30
0012e8  f7fffffe          BL       send_GSM
0012ec  4601              MOV      r1,r0
0012ee  9003              STR      r0,[sp,#0xc]
0012f0  4827              LDR      r0,|L1.5008|
0012f2  381c              SUBS     r0,r0,#0x1c
0012f4  f7fffffe          BL       __2printf
0012f8  e0a3              B        |L1.5186|
                  |L1.4858|
;;;871    									
;;;872    								
;;;873    							}
;;;874    							
;;;875    							else if(strstr(uart_string_gsm, "RESET"))
0012fa  492b              LDR      r1,|L1.5032|
0012fc  31b8              ADDS     r1,r1,#0xb8
0012fe  482c              LDR      r0,|L1.5040|
001300  f7fffffe          BL       strstr
001304  2800              CMP      r0,#0
001306  d026              BEQ      |L1.4950|
;;;876    							{
;;;877    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
001308  4828              LDR      r0,|L1.5036|
00130a  6800              LDR      r0,[r0,#0]  ; tmeout
00130c  4b1d              LDR      r3,|L1.4996|
00130e  3b14              SUBS     r3,r3,#0x14
001310  461a              MOV      r2,r3
001312  3208              ADDS     r2,r2,#8
001314  4611              MOV      r1,r2
001316  3124              ADDS     r1,r1,#0x24
001318  9000              STR      r0,[sp,#0]
00131a  481d              LDR      r0,|L1.5008|
00131c  3830              SUBS     r0,r0,#0x30
00131e  f7fffffe          BL       send_GSM
001322  4601              MOV      r1,r0
001324  9003              STR      r0,[sp,#0xc]
001326  481a              LDR      r0,|L1.5008|
001328  381c              SUBS     r0,r0,#0x1c
00132a  f7fffffe          BL       __2printf
;;;878    								printf("%s\n",send_GSM("\n\n AT+CFUN=1,1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
00132e  481f              LDR      r0,|L1.5036|
001330  6800              LDR      r0,[r0,#0]  ; tmeout
001332  4b14              LDR      r3,|L1.4996|
001334  3b14              SUBS     r3,r3,#0x14
001336  461a              MOV      r2,r3
001338  3208              ADDS     r2,r2,#8
00133a  4611              MOV      r1,r2
00133c  3124              ADDS     r1,r1,#0x24
00133e  9000              STR      r0,[sp,#0]
001340  4819              LDR      r0,|L1.5032|
001342  30c0              ADDS     r0,r0,#0xc0
001344  f7fffffe          BL       send_GSM
001348  4601              MOV      r1,r0
00134a  9003              STR      r0,[sp,#0xc]
00134c  4810              LDR      r0,|L1.5008|
00134e  381c              SUBS     r0,r0,#0x1c
001350  f7fffffe          BL       __2printf
001354  e075              B        |L1.5186|
                  |L1.4950|
;;;879    							}
;;;880    							
;;;881    							else if(strstr(uart_string_gsm, "IP"))
001356  a11d              ADR      r1,|L1.5068|
001358  4815              LDR      r0,|L1.5040|
00135a  f7fffffe          BL       strstr
00135e  2800              CMP      r0,#0
001360  d05d              BEQ      |L1.5150|
;;;882    							{
;;;883    								printf("\n\n\n\t%s",uart_string_gsm);
001362  4913              LDR      r1,|L1.5040|
001364  4810              LDR      r0,|L1.5032|
001366  30d8              ADDS     r0,r0,#0xd8
001368  f7fffffe          BL       __2printf
;;;884    								memset(ip,0,16);
00136c  480a              LDR      r0,|L1.5016|
00136e  2100              MOVS     r1,#0
001370  6001              STR      r1,[r0,#0]  ; ip
001372  6041              STR      r1,[r0,#4]  ; ip
001374  6081              STR      r1,[r0,#8]  ; ip
001376  60c1              STR      r1,[r0,#0xc]  ; ip
;;;885    								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
001378  2120              MOVS     r1,#0x20
00137a  460b              MOV      r3,r1
00137c  2204              MOVS     r2,#4
00137e  9100              STR      r1,[sp,#0]
001380  9001              STR      r0,[sp,#4]
001382  e025              B        |L1.5072|
                  |L1.4996|
                          DCD      ||.text||+0x478
                  |L1.5000|
                          DCD      0x000f423f
                  |L1.5004|
00138c  4f4b00            DCB      "OK",0
00138f  00                DCB      0
                  |L1.5008|
                          DCD      ||.text||+0xa64
                  |L1.5012|
                          DCD      ||.text||+0x944
                  |L1.5016|
                          DCD      ||ip||
                  |L1.5020|
                          DCD      port
                  |L1.5024|
                          DCD      interval
                  |L1.5028|
0013a4  3100              DCB      "1",0
0013a6  00                DCB      0
0013a7  00                DCB      0
                  |L1.5032|
                          DCD      ||.text||+0xe94
                  |L1.5036|
                          DCD      tmeout
                  |L1.5040|
                          DCD      uart_string_gsm
                  |L1.5044|
                          DCD      at_
                  |L1.5048|
                          DCD      num_o
                  |L1.5052|
                          DCD      k
                  |L1.5056|
                          DCD      i
                  |L1.5060|
                          DCD      data2
                  |L1.5064|
0013c8  257300            DCB      "%s",0
0013cb  00                DCB      0
                  |L1.5068|
0013cc  495000            DCB      "IP",0
0013cf  00                DCB      0
                  |L1.5072|
0013d0  2103              MOVS     r1,#3
0013d2  48fe              LDR      r0,|L1.6092|
0013d4  f7fffffe          BL       parse_g
;;;886    								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
0013d8  48fd              LDR      r0,|L1.6096|
0013da  210d              MOVS     r1,#0xd
0013dc  2320              MOVS     r3,#0x20
0013de  2205              MOVS     r2,#5
0013e0  9100              STR      r1,[sp,#0]
0013e2  9001              STR      r0,[sp,#4]
0013e4  2106              MOVS     r1,#6
0013e6  48f9              LDR      r0,|L1.6092|
0013e8  f7fffffe          BL       parse_g
;;;887    								printf("\n%s\n",port);
0013ec  49f8              LDR      r1,|L1.6096|
0013ee  48f9              LDR      r0,|L1.6100|
0013f0  f7fffffe          BL       __2printf
;;;888    								save_ip_port();
0013f4  f7fffffe          BL       save_ip_port
;;;889    							
;;;890    	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;891    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));	
0013f8  48f7              LDR      r0,|L1.6104|
0013fa  6800              LDR      r0,[r0,#0]  ; tmeout
0013fc  4bf5              LDR      r3,|L1.6100|
0013fe  3b14              SUBS     r3,r3,#0x14
001400  461a              MOV      r2,r3
001402  3208              ADDS     r2,r2,#8
001404  4611              MOV      r1,r2
001406  3124              ADDS     r1,r1,#0x24
001408  9000              STR      r0,[sp,#0]
00140a  48f4              LDR      r0,|L1.6108|
00140c  f7fffffe          BL       send_GSM
001410  4601              MOV      r1,r0
001412  9003              STR      r0,[sp,#0xc]
001414  48f1              LDR      r0,|L1.6108|
001416  3014              ADDS     r0,r0,#0x14
001418  f7fffffe          BL       __2printf
00141c  e011              B        |L1.5186|
                  |L1.5150|
;;;892    
;;;893    //								while(1);
;;;894    								
;;;895    								}		
;;;896    
;;;897    							else
;;;898    							{
;;;899    								
;;;900    								printf("%s\n",send_GSM("\n\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));			
00141e  48ee              LDR      r0,|L1.6104|
001420  6800              LDR      r0,[r0,#0]  ; tmeout
001422  4bec              LDR      r3,|L1.6100|
001424  3b14              SUBS     r3,r3,#0x14
001426  461a              MOV      r2,r3
001428  3208              ADDS     r2,r2,#8
00142a  4611              MOV      r1,r2
00142c  3124              ADDS     r1,r1,#0x24
00142e  9000              STR      r0,[sp,#0]
001430  48ea              LDR      r0,|L1.6108|
001432  f7fffffe          BL       send_GSM
001436  4601              MOV      r1,r0
001438  9003              STR      r0,[sp,#0xc]
00143a  48e8              LDR      r0,|L1.6108|
00143c  3014              ADDS     r0,r0,#0x14
00143e  f7fffffe          BL       __2printf
                  |L1.5186|
;;;901    
;;;902    							}							
;;;903    							
;;;904    					
;;;905    					}
;;;906    		ringflag=0;	
001442  2000              MOVS     r0,#0
001444  49e6              LDR      r1,|L1.6112|
001446  7008              STRB     r0,[r1,#0]
                  |L1.5192|
;;;907    		}
;;;908    		
;;;909    }
001448  bd1f              POP      {r0-r4,pc}
;;;910    
                          ENDP

                  stof PROC
;;;385    
;;;386    float stof(const char* s)
00144a  b5fe              PUSH     {r1-r7,lr}
;;;387    {
00144c  4604              MOV      r4,r0
;;;388      float rez = 0, fact = 1;
00144e  2000              MOVS     r0,#0
001450  9002              STR      r0,[sp,#8]
001452  267f              MOVS     r6,#0x7f
001454  05f6              LSLS     r6,r6,#23
;;;389    	int d,point_seen;
;;;390      if (*s == '-'){
001456  7820              LDRB     r0,[r4,#0]
001458  282d              CMP      r0,#0x2d
00145a  d101              BNE      |L1.5216|
;;;391        s++;
00145c  1c64              ADDS     r4,r4,#1
;;;392        fact = -1;
00145e  4ee1              LDR      r6,|L1.6116|
                  |L1.5216|
;;;393      };
;;;394      for (point_seen = 0; *s; s++){
001460  2700              MOVS     r7,#0
001462  e021              B        |L1.5288|
                  |L1.5220|
;;;395        if (*s == '.'){
001464  7820              LDRB     r0,[r4,#0]
001466  282e              CMP      r0,#0x2e
001468  d101              BNE      |L1.5230|
;;;396          point_seen = 1; 
00146a  2701              MOVS     r7,#1
;;;397          continue;
00146c  e01b              B        |L1.5286|
                  |L1.5230|
;;;398        };
;;;399        d = *s - '0';
00146e  7820              LDRB     r0,[r4,#0]
001470  4605              MOV      r5,r0
001472  3d30              SUBS     r5,r5,#0x30
;;;400        if (d >= 0 && d <= 9){
001474  2d00              CMP      r5,#0
001476  db15              BLT      |L1.5284|
001478  2d09              CMP      r5,#9
00147a  dc13              BGT      |L1.5284|
;;;401          if (point_seen) fact /= 10.0f;
00147c  2f00              CMP      r7,#0
00147e  d004              BEQ      |L1.5258|
001480  49d9              LDR      r1,|L1.6120|
001482  4630              MOV      r0,r6
001484  f7fffffe          BL       __aeabi_fdiv
001488  4606              MOV      r6,r0
                  |L1.5258|
;;;402          rez = rez * 10.0f + (float)d;
00148a  4628              MOV      r0,r5
00148c  f7fffffe          BL       __aeabi_i2f
001490  49d5              LDR      r1,|L1.6120|
001492  9001              STR      r0,[sp,#4]
001494  9802              LDR      r0,[sp,#8]
001496  f7fffffe          BL       __aeabi_fmul
00149a  9000              STR      r0,[sp,#0]
00149c  9901              LDR      r1,[sp,#4]
00149e  f7fffffe          BL       __aeabi_fadd
0014a2  9002              STR      r0,[sp,#8]
                  |L1.5284|
0014a4  bf00              NOP                            ;397
                  |L1.5286|
0014a6  1c64              ADDS     r4,r4,#1              ;394
                  |L1.5288|
0014a8  7820              LDRB     r0,[r4,#0]            ;394
0014aa  2800              CMP      r0,#0                 ;394
0014ac  d1da              BNE      |L1.5220|
;;;403        };
;;;404      };
;;;405      return rez * fact;
0014ae  4631              MOV      r1,r6
0014b0  9802              LDR      r0,[sp,#8]
0014b2  f7fffffe          BL       __aeabi_fmul
;;;406    };
0014b6  bdfe              POP      {r1-r7,pc}
;;;407    
                          ENDP

                  parse PROC
;;;329    
;;;330    void parse(char* str, int first, int sec, char *string)
0014b8  b5ff              PUSH     {r0-r7,lr}
;;;331    {int i=0,j=0,temp=0;
0014ba  b081              SUB      sp,sp,#4
0014bc  4605              MOV      r5,r0
0014be  461f              MOV      r7,r3
0014c0  2400              MOVS     r4,#0
0014c2  2000              MOVS     r0,#0
0014c4  9000              STR      r0,[sp,#0]
0014c6  2600              MOVS     r6,#0
;;;332    
;;;333    		delay(10);		
0014c8  200a              MOVS     r0,#0xa
0014ca  f7fffffe          BL       delay
;;;334    		memset(string,0,15);
0014ce  210f              MOVS     r1,#0xf
0014d0  4638              MOV      r0,r7
0014d2  f7fffffe          BL       __aeabi_memclr
;;;335    		for(i=0,temp=0;i<100;i++)
0014d6  bf00              NOP      
0014d8  bf00              NOP      
0014da  e00a              B        |L1.5362|
                  |L1.5340|
;;;336    		{
;;;337    		if(str[i]==',')
0014dc  5d28              LDRB     r0,[r5,r4]
0014de  282c              CMP      r0,#0x2c
0014e0  d101              BNE      |L1.5350|
;;;338    			{temp++;j=i;}
0014e2  1c76              ADDS     r6,r6,#1
0014e4  9400              STR      r4,[sp,#0]
                  |L1.5350|
;;;339    		else{}
;;;340    			
;;;341    		if(temp>=sec){i=900;}
0014e6  9803              LDR      r0,[sp,#0xc]
0014e8  4286              CMP      r6,r0
0014ea  db01              BLT      |L1.5360|
0014ec  24e1              MOVS     r4,#0xe1
0014ee  00a4              LSLS     r4,r4,#2
                  |L1.5360|
0014f0  1c64              ADDS     r4,r4,#1              ;335
                  |L1.5362|
0014f2  2c64              CMP      r4,#0x64              ;335
0014f4  dbf2              BLT      |L1.5340|
;;;342    		else{}	
;;;343    		
;;;344    		}	
;;;345    		
;;;346    		for(i=0,temp=0;i<100;i++)
0014f6  2400              MOVS     r4,#0
0014f8  2600              MOVS     r6,#0
0014fa  e00b              B        |L1.5396|
                  |L1.5372|
;;;347    		{
;;;348    		if(str[i]==',')
0014fc  5d28              LDRB     r0,[r5,r4]
0014fe  282c              CMP      r0,#0x2c
001500  d102              BNE      |L1.5384|
;;;349    			{temp++;l=i;}										
001502  1c76              ADDS     r6,r6,#1
001504  48b9              LDR      r0,|L1.6124|
001506  6004              STR      r4,[r0,#0]  ; l
                  |L1.5384|
;;;350    		else{}
;;;351    		if(temp>=first){i=900;}else{}
001508  9802              LDR      r0,[sp,#8]
00150a  4286              CMP      r6,r0
00150c  db01              BLT      |L1.5394|
00150e  24e1              MOVS     r4,#0xe1
001510  00a4              LSLS     r4,r4,#2
                  |L1.5394|
001512  1c64              ADDS     r4,r4,#1              ;346
                  |L1.5396|
001514  2c64              CMP      r4,#0x64              ;346
001516  dbf1              BLT      |L1.5372|
;;;352    		}	
;;;353    		for(i=0;i<(j-l-1);i++)
001518  2400              MOVS     r4,#0
00151a  e006              B        |L1.5418|
                  |L1.5404|
;;;354    		{
;;;355    		string[i] = str[l+i+1];
00151c  48b3              LDR      r0,|L1.6124|
00151e  6800              LDR      r0,[r0,#0]  ; l
001520  1900              ADDS     r0,r0,r4
001522  1c40              ADDS     r0,r0,#1
001524  5c28              LDRB     r0,[r5,r0]
001526  5538              STRB     r0,[r7,r4]
001528  1c64              ADDS     r4,r4,#1              ;353
                  |L1.5418|
00152a  49b0              LDR      r1,|L1.6124|
00152c  9800              LDR      r0,[sp,#0]            ;353
00152e  6809              LDR      r1,[r1,#0]            ;353  ; l
001530  1a40              SUBS     r0,r0,r1              ;353
001532  1e40              SUBS     r0,r0,#1              ;353
001534  42a0              CMP      r0,r4                 ;353
001536  dcf1              BGT      |L1.5404|
;;;356    		}			
;;;357    	
;;;358    
;;;359    }
001538  b005              ADD      sp,sp,#0x14
00153a  bdf0              POP      {r4-r7,pc}
;;;360    
                          ENDP

                  detect_motion PROC
;;;85     
;;;86     void detect_motion()
00153c  49ac              LDR      r1,|L1.6128|
;;;87     {
;;;88     	
;;;89     	
;;;90     if(	(resultx+offx>temp1x+2) || (resultx+offx<temp1x-2) ||  (resulty+offy>temp1y+2) || (resulty+offy<temp1y-2)||(resultz+offz>temp1z+2)||(resultz+offz<temp1z-2)	)
00153e  2000              MOVS     r0,#0
001540  5e08              LDRSH    r0,[r1,r0]  ; resultx
001542  49ac              LDR      r1,|L1.6132|
001544  6809              LDR      r1,[r1,#0]  ; offx
001546  1841              ADDS     r1,r0,r1
001548  48ab              LDR      r0,|L1.6136|
00154a  6800              LDR      r0,[r0,#0]  ; temp1x
00154c  1c80              ADDS     r0,r0,#2
00154e  4281              CMP      r1,r0
001550  dc36              BGT      |L1.5568|
001552  49a7              LDR      r1,|L1.6128|
001554  2000              MOVS     r0,#0
001556  5e08              LDRSH    r0,[r1,r0]  ; resultx
001558  49a6              LDR      r1,|L1.6132|
00155a  6809              LDR      r1,[r1,#0]  ; offx
00155c  1841              ADDS     r1,r0,r1
00155e  48a6              LDR      r0,|L1.6136|
001560  6800              LDR      r0,[r0,#0]  ; temp1x
001562  1e80              SUBS     r0,r0,#2
001564  4281              CMP      r1,r0
001566  db2b              BLT      |L1.5568|
001568  49a4              LDR      r1,|L1.6140|
00156a  2000              MOVS     r0,#0
00156c  5e08              LDRSH    r0,[r1,r0]  ; resulty
00156e  49a4              LDR      r1,|L1.6144|
001570  6809              LDR      r1,[r1,#0]  ; offy
001572  1841              ADDS     r1,r0,r1
001574  48a3              LDR      r0,|L1.6148|
001576  6800              LDR      r0,[r0,#0]  ; temp1y
001578  1c80              ADDS     r0,r0,#2
00157a  4281              CMP      r1,r0
00157c  dc20              BGT      |L1.5568|
00157e  499f              LDR      r1,|L1.6140|
001580  2000              MOVS     r0,#0
001582  5e08              LDRSH    r0,[r1,r0]  ; resulty
001584  499e              LDR      r1,|L1.6144|
001586  6809              LDR      r1,[r1,#0]  ; offy
001588  1841              ADDS     r1,r0,r1
00158a  489e              LDR      r0,|L1.6148|
00158c  6800              LDR      r0,[r0,#0]  ; temp1y
00158e  1e80              SUBS     r0,r0,#2
001590  4281              CMP      r1,r0
001592  db15              BLT      |L1.5568|
001594  499c              LDR      r1,|L1.6152|
001596  2000              MOVS     r0,#0
001598  5e08              LDRSH    r0,[r1,r0]  ; resultz
00159a  499c              LDR      r1,|L1.6156|
00159c  6809              LDR      r1,[r1,#0]  ; offz
00159e  1841              ADDS     r1,r0,r1
0015a0  489b              LDR      r0,|L1.6160|
0015a2  6800              LDR      r0,[r0,#0]  ; temp1z
0015a4  1c80              ADDS     r0,r0,#2
0015a6  4281              CMP      r1,r0
0015a8  dc0a              BGT      |L1.5568|
0015aa  4997              LDR      r1,|L1.6152|
0015ac  2000              MOVS     r0,#0
0015ae  5e08              LDRSH    r0,[r1,r0]  ; resultz
0015b0  4996              LDR      r1,|L1.6156|
0015b2  6809              LDR      r1,[r1,#0]  ; offz
0015b4  1841              ADDS     r1,r0,r1
0015b6  4896              LDR      r0,|L1.6160|
0015b8  6800              LDR      r0,[r0,#0]  ; temp1z
0015ba  1e80              SUBS     r0,r0,#2
0015bc  4281              CMP      r1,r0
0015be  da03              BGE      |L1.5576|
                  |L1.5568|
;;;91     {motion = 1;}
0015c0  2001              MOVS     r0,#1
0015c2  4994              LDR      r1,|L1.6164|
0015c4  6008              STR      r0,[r1,#0]  ; motion
0015c6  e002              B        |L1.5582|
                  |L1.5576|
;;;92     else
;;;93     {motion = 0;}
0015c8  2000              MOVS     r0,#0
0015ca  4992              LDR      r1,|L1.6164|
0015cc  6008              STR      r0,[r1,#0]  ; motion
                  |L1.5582|
;;;94     
;;;95     temp1x=resultx+offx;
0015ce  4988              LDR      r1,|L1.6128|
0015d0  2000              MOVS     r0,#0
0015d2  5e08              LDRSH    r0,[r1,r0]  ; resultx
0015d4  4987              LDR      r1,|L1.6132|
0015d6  6809              LDR      r1,[r1,#0]  ; offx
0015d8  1840              ADDS     r0,r0,r1
0015da  4987              LDR      r1,|L1.6136|
0015dc  6008              STR      r0,[r1,#0]  ; temp1x
;;;96     temp1y=resulty+offy;
0015de  4987              LDR      r1,|L1.6140|
0015e0  2000              MOVS     r0,#0
0015e2  5e08              LDRSH    r0,[r1,r0]  ; resulty
0015e4  4986              LDR      r1,|L1.6144|
0015e6  6809              LDR      r1,[r1,#0]  ; offy
0015e8  1840              ADDS     r0,r0,r1
0015ea  4986              LDR      r1,|L1.6148|
0015ec  6008              STR      r0,[r1,#0]  ; temp1y
;;;97     temp1z=resultz+offz;  
0015ee  4986              LDR      r1,|L1.6152|
0015f0  2000              MOVS     r0,#0
0015f2  5e08              LDRSH    r0,[r1,r0]  ; resultz
0015f4  4985              LDR      r1,|L1.6156|
0015f6  6809              LDR      r1,[r1,#0]  ; offz
0015f8  1840              ADDS     r0,r0,r1
0015fa  4985              LDR      r1,|L1.6160|
0015fc  6008              STR      r0,[r1,#0]  ; temp1z
;;;98     
;;;99     if(motion == 0)
0015fe  4885              LDR      r0,|L1.6164|
001600  6800              LDR      r0,[r0,#0]  ; motion
001602  2800              CMP      r0,#0
001604  d105              BNE      |L1.5650|
;;;100    	motion_samples++;
001606  4884              LDR      r0,|L1.6168|
001608  6800              LDR      r0,[r0,#0]  ; motion_samples
00160a  1c40              ADDS     r0,r0,#1
00160c  4982              LDR      r1,|L1.6168|
00160e  6008              STR      r0,[r1,#0]  ; motion_samples
001610  e002              B        |L1.5656|
                  |L1.5650|
;;;101    else
;;;102    	motion_samples = 0;
001612  2000              MOVS     r0,#0
001614  4980              LDR      r1,|L1.6168|
001616  6008              STR      r0,[r1,#0]  ; motion_samples
                  |L1.5656|
;;;103    
;;;104    
;;;105    
;;;106    
;;;107    }
001618  4770              BX       lr
;;;10     #include "gps.c"
                          ENDP

                  pause PROC
;;;19     // this delay is very important, it may cause w-r operation failure.
;;;20     static void pause(void)
00161a  2000              MOVS     r0,#0
;;;21     {
;;;22         int n;
;;;23         for(n=0; n<40; n++){}
00161c  e000              B        |L1.5664|
                  |L1.5662|
00161e  1c40              ADDS     r0,r0,#1
                  |L1.5664|
001620  2828              CMP      r0,#0x28
001622  dbfc              BLT      |L1.5662|
;;;24            // asm("nop");
;;;25     }
001624  4770              BX       lr
;;;26     uint32 hal_dev_mma8451_read_reg(uint8 addr)
                          ENDP

                  i2c_read_byte PROC
;;;41     }
;;;42     uint8 i2c_read_byte(I2C_MemMapPtr p)
001626  4601              MOV      r1,r0
;;;43     {
;;;44         return p->D;
001628  7908              LDRB     r0,[r1,#4]
;;;45     }
00162a  4770              BX       lr
;;;46     void i2c_start(I2C_MemMapPtr p)
                          ENDP

                  i2c_set_rx_mode PROC
;;;9      }
;;;10     void i2c_set_rx_mode(I2C_MemMapPtr p)
00162c  7881              LDRB     r1,[r0,#2]
;;;11     {
;;;12         p->C1 &= ~I2C_C1_TX_MASK;
00162e  2210              MOVS     r2,#0x10
001630  4391              BICS     r1,r1,r2
001632  7081              STRB     r1,[r0,#2]
;;;13     }
001634  4770              BX       lr
;;;14     
                          ENDP

                  i2c_set_slave_mode PROC
;;;15     void i2c_set_slave_mode(I2C_MemMapPtr p)
001636  7881              LDRB     r1,[r0,#2]
;;;16     {
;;;17         p->C1  &= ~I2C_C1_MST_MASK;
001638  2220              MOVS     r2,#0x20
00163a  4391              BICS     r1,r1,r2
00163c  7081              STRB     r1,[r0,#2]
;;;18     }
00163e  4770              BX       lr
;;;19     void i2c_set_master_mode(I2C_MemMapPtr p)
                          ENDP

                  i2c_stop PROC
;;;50     }
;;;51     void i2c_stop(I2C_MemMapPtr p)
001640  b500              PUSH     {lr}
;;;52     {
001642  4603              MOV      r3,r0
;;;53         i2c_set_slave_mode(p);
001644  4618              MOV      r0,r3
001646  f7fffffe          BL       i2c_set_slave_mode
;;;54         i2c_set_rx_mode(p);
00164a  4618              MOV      r0,r3
00164c  f7fffffe          BL       i2c_set_rx_mode
;;;55     }
001650  bd00              POP      {pc}
;;;56     void i2c_wait(I2C_MemMapPtr p)
                          ENDP

                  i2c_wait PROC
001652  4972              LDR      r1,|L1.6172|
;;;57     {long time1out=99999;
;;;58     	
;;;59         // wait flag
;;;60         while((p->S & I2C_S_IICIF_MASK)==0    ||  (time1out <   1)){time1out--;}
001654  e000              B        |L1.5720|
                  |L1.5718|
001656  1e49              SUBS     r1,r1,#1
                  |L1.5720|
001658  78c2              LDRB     r2,[r0,#3]
00165a  2302              MOVS     r3,#2
00165c  401a              ANDS     r2,r2,r3
00165e  2a00              CMP      r2,#0
001660  d0f9              BEQ      |L1.5718|
001662  2901              CMP      r1,#1
001664  dbf7              BLT      |L1.5718|
;;;61         // clear flag
;;;62         p->S |= I2C_S_IICIF_MASK;
001666  78c2              LDRB     r2,[r0,#3]
001668  431a              ORRS     r2,r2,r3
00166a  70c2              STRB     r2,[r0,#3]
;;;63     }
00166c  4770              BX       lr
;;;64     uint16 i2c_get_ack(I2C_MemMapPtr p)
                          ENDP

                  i2c_give_nack PROC
;;;25     
;;;26     void i2c_give_nack(I2C_MemMapPtr p)
00166e  7881              LDRB     r1,[r0,#2]
;;;27     {
;;;28         p->C1 |= I2C_C1_TXAK_MASK;
001670  2208              MOVS     r2,#8
001672  4311              ORRS     r1,r1,r2
001674  7081              STRB     r1,[r0,#2]
;;;29     }
001676  4770              BX       lr
;;;30     void i2c_give_ack(I2C_MemMapPtr p)
                          ENDP

                  i2c_get_ack PROC
;;;63     }
;;;64     uint16 i2c_get_ack(I2C_MemMapPtr p)
001678  4601              MOV      r1,r0
;;;65     {
;;;66         if((p->S & I2C_S_RXAK_MASK) == 0)
00167a  78c8              LDRB     r0,[r1,#3]
00167c  07c0              LSLS     r0,r0,#31
00167e  0fc0              LSRS     r0,r0,#31
001680  2800              CMP      r0,#0
001682  d101              BNE      |L1.5768|
;;;67             return TRUE;
001684  2001              MOVS     r0,#1
                  |L1.5766|
;;;68         else
;;;69             return FALSE;
;;;70     }
001686  4770              BX       lr
                  |L1.5768|
001688  2000              MOVS     r0,#0                 ;69
00168a  e7fc              B        |L1.5766|
;;;71     
                          ENDP

                  i2c_write_byte PROC
;;;37     }
;;;38     void i2c_write_byte(I2C_MemMapPtr p, uint8 data)
00168c  7101              STRB     r1,[r0,#4]
;;;39     {
;;;40         p->D = data;
;;;41     }
00168e  4770              BX       lr
;;;42     uint8 i2c_read_byte(I2C_MemMapPtr p)
                          ENDP

                  i2c_repeated_start PROC
;;;33     }
;;;34     void i2c_repeated_start(I2C_MemMapPtr p)
001690  7881              LDRB     r1,[r0,#2]
;;;35     {
;;;36         p->C1     |= 0x04;
001692  2204              MOVS     r2,#4
001694  4311              ORRS     r1,r1,r2
001696  7081              STRB     r1,[r0,#2]
;;;37     }
001698  4770              BX       lr
;;;38     void i2c_write_byte(I2C_MemMapPtr p, uint8 data)
                          ENDP

                  i2c_set_tx_mode PROC
;;;4      
;;;5      void i2c_set_tx_mode(I2C_MemMapPtr p)
00169a  7881              LDRB     r1,[r0,#2]
;;;6      {
;;;7          p->C1 |= I2C_C1_TX_MASK;
00169c  2210              MOVS     r2,#0x10
00169e  4311              ORRS     r1,r1,r2
0016a0  7081              STRB     r1,[r0,#2]
;;;8      
;;;9      }
0016a2  4770              BX       lr
;;;10     void i2c_set_rx_mode(I2C_MemMapPtr p)
                          ENDP

                  i2c_set_master_mode PROC
;;;18     }
;;;19     void i2c_set_master_mode(I2C_MemMapPtr p)
0016a4  7881              LDRB     r1,[r0,#2]
;;;20     {
;;;21         p->C1  |=  I2C_C1_MST_MASK;
0016a6  2220              MOVS     r2,#0x20
0016a8  4311              ORRS     r1,r1,r2
0016aa  7081              STRB     r1,[r0,#2]
;;;22     }
0016ac  4770              BX       lr
;;;23     
                          ENDP

                  i2c_start PROC
;;;45     }
;;;46     void i2c_start(I2C_MemMapPtr p)
0016ae  b500              PUSH     {lr}
;;;47     {
0016b0  4603              MOV      r3,r0
;;;48         i2c_set_master_mode(p);
0016b2  4618              MOV      r0,r3
0016b4  f7fffffe          BL       i2c_set_master_mode
;;;49         i2c_set_tx_mode(p);
0016b8  4618              MOV      r0,r3
0016ba  f7fffffe          BL       i2c_set_tx_mode
;;;50     }
0016be  bd00              POP      {pc}
;;;51     void i2c_stop(I2C_MemMapPtr p)
                          ENDP

                  hal_dev_mma8451_read_reg PROC
;;;25     }
;;;26     uint32 hal_dev_mma8451_read_reg(uint8 addr)
0016c0  b570              PUSH     {r4-r6,lr}
;;;27     {
0016c2  4604              MOV      r4,r0
;;;28         uint8 result;
;;;29     
;;;30         i2c_start(I2C0_B);
0016c4  4856              LDR      r0,|L1.6176|
0016c6  f7fffffe          BL       i2c_start
;;;31         i2c_write_byte(I2C0_B, MMA8451_I2C_ADDRESS | I2C_WRITE);
0016ca  213a              MOVS     r1,#0x3a
0016cc  4854              LDR      r0,|L1.6176|
0016ce  f7fffffe          BL       i2c_write_byte
;;;32         
;;;33         i2c_wait(I2C0_B);
0016d2  4853              LDR      r0,|L1.6176|
0016d4  f7fffffe          BL       i2c_wait
;;;34         i2c_get_ack(I2C0_B);
0016d8  4851              LDR      r0,|L1.6176|
0016da  f7fffffe          BL       i2c_get_ack
;;;35     
;;;36         i2c_write_byte(I2C0_B, addr);
0016de  4621              MOV      r1,r4
0016e0  484f              LDR      r0,|L1.6176|
0016e2  f7fffffe          BL       i2c_write_byte
;;;37         i2c_wait(I2C0_B);
0016e6  484e              LDR      r0,|L1.6176|
0016e8  f7fffffe          BL       i2c_wait
;;;38         i2c_get_ack(I2C0_B);
0016ec  484c              LDR      r0,|L1.6176|
0016ee  f7fffffe          BL       i2c_get_ack
;;;39     
;;;40         i2c_repeated_start(I2C0_B);
0016f2  484b              LDR      r0,|L1.6176|
0016f4  f7fffffe          BL       i2c_repeated_start
;;;41         i2c_write_byte(I2C0_B, MMA8451_I2C_ADDRESS | I2C_READ);
0016f8  213b              MOVS     r1,#0x3b
0016fa  4849              LDR      r0,|L1.6176|
0016fc  f7fffffe          BL       i2c_write_byte
;;;42         i2c_wait(I2C0_B);
001700  4847              LDR      r0,|L1.6176|
001702  f7fffffe          BL       i2c_wait
;;;43         i2c_get_ack(I2C0_B);
001706  4846              LDR      r0,|L1.6176|
001708  f7fffffe          BL       i2c_get_ack
;;;44     
;;;45         i2c_set_rx_mode(I2C0_B);
00170c  4844              LDR      r0,|L1.6176|
00170e  f7fffffe          BL       i2c_set_rx_mode
;;;46     
;;;47         i2c_give_nack(I2C0_B);
001712  4843              LDR      r0,|L1.6176|
001714  f7fffffe          BL       i2c_give_nack
;;;48         result = i2c_read_byte(I2C0_B);
001718  4841              LDR      r0,|L1.6176|
00171a  f7fffffe          BL       i2c_read_byte
00171e  4605              MOV      r5,r0
;;;49         i2c_wait(I2C0_B);
001720  483f              LDR      r0,|L1.6176|
001722  f7fffffe          BL       i2c_wait
;;;50     
;;;51         i2c_stop(I2C0_B);
001726  483e              LDR      r0,|L1.6176|
001728  f7fffffe          BL       i2c_stop
;;;52         result = i2c_read_byte(I2C0_B);
00172c  483c              LDR      r0,|L1.6176|
00172e  f7fffffe          BL       i2c_read_byte
001732  4605              MOV      r5,r0
;;;53         pause();
001734  f7fffffe          BL       pause
;;;54         return result;
001738  4628              MOV      r0,r5
;;;55     }
00173a  bd70              POP      {r4-r6,pc}
;;;56     void hal_dev_mma8451_write_reg(uint8 addr, uint8 data)
                          ENDP

                  detect_fall_detection PROC
;;;129    #define FALL_LIMIT  45//50
;;;130    void detect_fall_detection(void)
00173c  4839              LDR      r0,|L1.6180|
;;;131    {
;;;132       if (xy_mag<FALL_LIMIT && xz_mag < FALL_LIMIT && yz_mag < FALL_LIMIT  && !ti_fall) 
00173e  6800              LDR      r0,[r0,#0]  ; xy_mag
001740  282d              CMP      r0,#0x2d
001742  d20f              BCS      |L1.5988|
001744  4838              LDR      r0,|L1.6184|
001746  6800              LDR      r0,[r0,#0]  ; xz_mag
001748  282d              CMP      r0,#0x2d
00174a  d20b              BCS      |L1.5988|
00174c  4837              LDR      r0,|L1.6188|
00174e  6800              LDR      r0,[r0,#0]  ; yz_mag
001750  282d              CMP      r0,#0x2d
001752  d207              BCS      |L1.5988|
001754  4836              LDR      r0,|L1.6192|
001756  8800              LDRH     r0,[r0,#0]  ; ti_fall
001758  2800              CMP      r0,#0
00175a  d103              BNE      |L1.5988|
;;;133        fall_input=1;
00175c  2001              MOVS     r0,#1
00175e  4935              LDR      r1,|L1.6196|
001760  7008              STRB     r0,[r1,#0]
001762  e005              B        |L1.6000|
                  |L1.5988|
;;;134       else 
;;;135       {
;;;136         fall_input = 0;
001764  2000              MOVS     r0,#0
001766  4933              LDR      r1,|L1.6196|
001768  7008              STRB     r0,[r1,#0]
;;;137         ti_fall = 10;
00176a  200a              MOVS     r0,#0xa
00176c  4930              LDR      r1,|L1.6192|
00176e  8008              STRH     r0,[r1,#0]
                  |L1.6000|
;;;138        }
;;;139       
;;;140    }
001770  4770              BX       lr
;;;141    
                          ENDP

                  angle_calculation PROC
;;;73     
;;;74     void angle_calculation(void)
001772  b5f8              PUSH     {r3-r7,lr}
;;;75      {
;;;76        signed int nv, x2, y2, z2;
;;;77     
;;;78      /*  if (accel_count != 0) return;
;;;79        accel_count = 60; //60 msec
;;;80        */
;;;81        
;;;82        nv = (signed char)(resultx);
001774  481e              LDR      r0,|L1.6128|
001776  7800              LDRB     r0,[r0,#0]  ; resultx
001778  b247              SXTB     r7,r0
;;;83        X_acc = median(nv, &arr_medianas[0]);
00177a  492f              LDR      r1,|L1.6200|
00177c  4638              MOV      r0,r7
00177e  f7fffffe          BL       median
001782  492e              LDR      r1,|L1.6204|
001784  6008              STR      r0,[r1,#0]  ; X_acc
;;;84        
;;;85        
;;;86        nv = (signed char)(resulty);
001786  481d              LDR      r0,|L1.6140|
001788  7800              LDRB     r0,[r0,#0]  ; resulty
00178a  b247              SXTB     r7,r0
;;;87        Y_acc = median(nv, &arr_medianas[1]);
00178c  492a              LDR      r1,|L1.6200|
00178e  3124              ADDS     r1,r1,#0x24
001790  4638              MOV      r0,r7
001792  f7fffffe          BL       median
001796  492a              LDR      r1,|L1.6208|
001798  6008              STR      r0,[r1,#0]  ; Y_acc
;;;88        
;;;89        nv = (signed char)(resultz);  
00179a  481b              LDR      r0,|L1.6152|
00179c  7800              LDRB     r0,[r0,#0]  ; resultz
00179e  b247              SXTB     r7,r0
;;;90        Z_acc = median(nv, &arr_medianas[2]);
0017a0  4925              LDR      r1,|L1.6200|
0017a2  3148              ADDS     r1,r1,#0x48
0017a4  4638              MOV      r0,r7
0017a6  f7fffffe          BL       median
0017aa  4926              LDR      r1,|L1.6212|
0017ac  6008              STR      r0,[r1,#0]  ; Z_acc
;;;91     
;;;92        x2        = X_acc*X_acc;
0017ae  4823              LDR      r0,|L1.6204|
0017b0  6800              LDR      r0,[r0,#0]  ; X_acc
0017b2  4340              MULS     r0,r0,r0
0017b4  4605              MOV      r5,r0
;;;93        y2        = Y_acc*Y_acc;
0017b6  4822              LDR      r0,|L1.6208|
0017b8  6800              LDR      r0,[r0,#0]  ; Y_acc
0017ba  4340              MULS     r0,r0,r0
0017bc  4606              MOV      r6,r0
;;;94     
;;;95        xy_mag   = sqrt_16(x2 + y2);
0017be  19a8              ADDS     r0,r5,r6
0017c0  f7fffffe          BL       sqrt_16
0017c4  4917              LDR      r1,|L1.6180|
0017c6  6008              STR      r0,[r1,#0]  ; xy_mag
;;;96       
;;;97        if (Y_acc<0) cat = -Y_acc; else cat = Y_acc;
0017c8  481d              LDR      r0,|L1.6208|
0017ca  e03d              B        |L1.6216|
                  |L1.6092|
                          DCD      uart_string_gsm
                  |L1.6096|
                          DCD      port
                  |L1.6100|
                          DCD      ||.text||+0x478
                  |L1.6104|
                          DCD      tmeout
                  |L1.6108|
                          DCD      ||.text||+0xa34
                  |L1.6112|
                          DCD      ringflag
                  |L1.6116|
                          DCD      0xbf800000
                  |L1.6120|
                          DCD      0x41200000
                  |L1.6124|
                          DCD      l
                  |L1.6128|
                          DCD      resultx
                  |L1.6132|
                          DCD      offx
                  |L1.6136|
                          DCD      temp1x
                  |L1.6140|
                          DCD      resulty
                  |L1.6144|
                          DCD      offy
                  |L1.6148|
                          DCD      temp1y
                  |L1.6152|
                          DCD      resultz
                  |L1.6156|
                          DCD      offz
                  |L1.6160|
                          DCD      temp1z
                  |L1.6164|
                          DCD      motion
                  |L1.6168|
                          DCD      motion_samples
                  |L1.6172|
                          DCD      0x0001869f
                  |L1.6176|
                          DCD      0x40066000
                  |L1.6180|
                          DCD      xy_mag
                  |L1.6184|
                          DCD      xz_mag
                  |L1.6188|
                          DCD      yz_mag
                  |L1.6192|
                          DCD      ti_fall
                  |L1.6196|
                          DCD      fall_input
                  |L1.6200|
                          DCD      arr_medianas
                  |L1.6204|
                          DCD      X_acc
                  |L1.6208|
                          DCD      Y_acc
                  |L1.6212|
                          DCD      Z_acc
                  |L1.6216|
001848  6800              LDR      r0,[r0,#0]  ; Y_acc
00184a  2800              CMP      r0,#0
00184c  da05              BGE      |L1.6234|
00184e  48fe              LDR      r0,|L1.7240|
001850  6800              LDR      r0,[r0,#0]  ; Y_acc
001852  4240              RSBS     r0,r0,#0
001854  49fd              LDR      r1,|L1.7244|
001856  6008              STR      r0,[r1,#0]  ; cat
001858  e003              B        |L1.6242|
                  |L1.6234|
00185a  48fb              LDR      r0,|L1.7240|
00185c  6800              LDR      r0,[r0,#0]  ; Y_acc
00185e  49fb              LDR      r1,|L1.7244|
001860  6008              STR      r0,[r1,#0]  ; cat
                  |L1.6242|
;;;98        
;;;99        offset = (unsigned int)(cat<<7)/(unsigned int)xy_mag;
001862  49fa              LDR      r1,|L1.7244|
001864  6809              LDR      r1,[r1,#0]  ; cat
001866  01c8              LSLS     r0,r1,#7
001868  49f9              LDR      r1,|L1.7248|
00186a  6809              LDR      r1,[r1,#0]  ; xy_mag
00186c  f7fffffe          BL       __aeabi_uidivmod
001870  49f8              LDR      r1,|L1.7252|
001872  6008              STR      r0,[r1,#0]  ; offset
;;;100       if (offset>127) offset = 127;    
001874  4608              MOV      r0,r1
001876  6800              LDR      r0,[r0,#0]  ; offset
001878  287f              CMP      r0,#0x7f
00187a  d901              BLS      |L1.6272|
00187c  207f              MOVS     r0,#0x7f
00187e  6008              STR      r0,[r1,#0]  ; offset
                  |L1.6272|
;;;101       xy_angle = asin[offset];
001880  48f4              LDR      r0,|L1.7252|
001882  6800              LDR      r0,[r0,#0]  ; offset
001884  0080              LSLS     r0,r0,#2
001886  49f4              LDR      r1,|L1.7256|
001888  5808              LDR      r0,[r1,r0]
00188a  49f4              LDR      r1,|L1.7260|
00188c  6008              STR      r0,[r1,#0]  ; xy_angle
;;;102       
;;;103       if (Y_acc>0)  xy_angle = -xy_angle;
00188e  48ee              LDR      r0,|L1.7240|
001890  6800              LDR      r0,[r0,#0]  ; Y_acc
001892  2800              CMP      r0,#0
001894  dd03              BLE      |L1.6302|
001896  4608              MOV      r0,r1
001898  6800              LDR      r0,[r0,#0]  ; xy_angle
00189a  4240              RSBS     r0,r0,#0
00189c  6008              STR      r0,[r1,#0]  ; xy_angle
                  |L1.6302|
;;;104       
;;;105     
;;;106       /////////   
;;;107       
;;;108       z2        = Z_acc*Z_acc;   
00189e  48f0              LDR      r0,|L1.7264|
0018a0  6800              LDR      r0,[r0,#0]  ; Z_acc
0018a2  4604              MOV      r4,r0
0018a4  4344              MULS     r4,r0,r4
;;;109       xz_mag    = sqrt_16(x2 + z2);
0018a6  1928              ADDS     r0,r5,r4
0018a8  f7fffffe          BL       sqrt_16
0018ac  49ed              LDR      r1,|L1.7268|
0018ae  6008              STR      r0,[r1,#0]  ; xz_mag
;;;110       if (X_acc<0) cat = -X_acc; else cat = X_acc;
0018b0  48ed              LDR      r0,|L1.7272|
0018b2  6800              LDR      r0,[r0,#0]  ; X_acc
0018b4  2800              CMP      r0,#0
0018b6  da05              BGE      |L1.6340|
0018b8  48eb              LDR      r0,|L1.7272|
0018ba  6800              LDR      r0,[r0,#0]  ; X_acc
0018bc  4240              RSBS     r0,r0,#0
0018be  49e3              LDR      r1,|L1.7244|
0018c0  6008              STR      r0,[r1,#0]  ; cat
0018c2  e003              B        |L1.6348|
                  |L1.6340|
0018c4  48e8              LDR      r0,|L1.7272|
0018c6  6800              LDR      r0,[r0,#0]  ; X_acc
0018c8  49e0              LDR      r1,|L1.7244|
0018ca  6008              STR      r0,[r1,#0]  ; cat
                  |L1.6348|
;;;111       offset = (unsigned int)(cat<<7)/(unsigned int)xz_mag;
0018cc  49df              LDR      r1,|L1.7244|
0018ce  6809              LDR      r1,[r1,#0]  ; cat
0018d0  01c8              LSLS     r0,r1,#7
0018d2  49e4              LDR      r1,|L1.7268|
0018d4  6809              LDR      r1,[r1,#0]  ; xz_mag
0018d6  f7fffffe          BL       __aeabi_uidivmod
0018da  49de              LDR      r1,|L1.7252|
0018dc  6008              STR      r0,[r1,#0]  ; offset
;;;112       if (offset>127) offset = 127;    
0018de  4608              MOV      r0,r1
0018e0  6800              LDR      r0,[r0,#0]  ; offset
0018e2  287f              CMP      r0,#0x7f
0018e4  d901              BLS      |L1.6378|
0018e6  207f              MOVS     r0,#0x7f
0018e8  6008              STR      r0,[r1,#0]  ; offset
                  |L1.6378|
;;;113       xz_angle = asin[offset];
0018ea  48da              LDR      r0,|L1.7252|
0018ec  6800              LDR      r0,[r0,#0]  ; offset
0018ee  0080              LSLS     r0,r0,#2
0018f0  49d9              LDR      r1,|L1.7256|
0018f2  5808              LDR      r0,[r1,r0]
0018f4  49dd              LDR      r1,|L1.7276|
0018f6  6008              STR      r0,[r1,#0]  ; xz_angle
;;;114       
;;;115       if (X_acc>0)  xz_angle = -xz_angle;
0018f8  48db              LDR      r0,|L1.7272|
0018fa  6800              LDR      r0,[r0,#0]  ; X_acc
0018fc  2800              CMP      r0,#0
0018fe  dd03              BLE      |L1.6408|
001900  4608              MOV      r0,r1
001902  6800              LDR      r0,[r0,#0]  ; xz_angle
001904  4240              RSBS     r0,r0,#0
001906  6008              STR      r0,[r1,#0]  ; xz_angle
                  |L1.6408|
;;;116       
;;;117    
;;;118       yz_mag    = sqrt_16(y2 + z2);
001908  1930              ADDS     r0,r6,r4
00190a  f7fffffe          BL       sqrt_16
00190e  49d8              LDR      r1,|L1.7280|
001910  6008              STR      r0,[r1,#0]  ; yz_mag
;;;119       if (Y_acc<0) cat = -Y_acc; else cat = Y_acc;
001912  48cd              LDR      r0,|L1.7240|
001914  6800              LDR      r0,[r0,#0]  ; Y_acc
001916  2800              CMP      r0,#0
001918  da05              BGE      |L1.6438|
00191a  48cb              LDR      r0,|L1.7240|
00191c  6800              LDR      r0,[r0,#0]  ; Y_acc
00191e  4240              RSBS     r0,r0,#0
001920  49ca              LDR      r1,|L1.7244|
001922  6008              STR      r0,[r1,#0]  ; cat
001924  e003              B        |L1.6446|
                  |L1.6438|
001926  48c8              LDR      r0,|L1.7240|
001928  6800              LDR      r0,[r0,#0]  ; Y_acc
00192a  49c8              LDR      r1,|L1.7244|
00192c  6008              STR      r0,[r1,#0]  ; cat
                  |L1.6446|
;;;120       offset = (unsigned int)(cat<<7)/(unsigned int)yz_mag;
00192e  49c7              LDR      r1,|L1.7244|
001930  6809              LDR      r1,[r1,#0]  ; cat
001932  01c8              LSLS     r0,r1,#7
001934  49ce              LDR      r1,|L1.7280|
001936  6809              LDR      r1,[r1,#0]  ; yz_mag
001938  f7fffffe          BL       __aeabi_uidivmod
00193c  49c5              LDR      r1,|L1.7252|
00193e  6008              STR      r0,[r1,#0]  ; offset
;;;121       if (offset>127) offset = 127;    
001940  4608              MOV      r0,r1
001942  6800              LDR      r0,[r0,#0]  ; offset
001944  287f              CMP      r0,#0x7f
001946  d901              BLS      |L1.6476|
001948  207f              MOVS     r0,#0x7f
00194a  6008              STR      r0,[r1,#0]  ; offset
                  |L1.6476|
;;;122       yz_angle = asin[offset];
00194c  48c1              LDR      r0,|L1.7252|
00194e  6800              LDR      r0,[r0,#0]  ; offset
001950  0080              LSLS     r0,r0,#2
001952  49c1              LDR      r1,|L1.7256|
001954  5808              LDR      r0,[r1,r0]
001956  49c7              LDR      r1,|L1.7284|
001958  6008              STR      r0,[r1,#0]  ; yz_angle
;;;123       if (Y_acc>0)  yz_angle = -yz_angle;
00195a  48bb              LDR      r0,|L1.7240|
00195c  6800              LDR      r0,[r0,#0]  ; Y_acc
00195e  2800              CMP      r0,#0
001960  dd03              BLE      |L1.6506|
001962  4608              MOV      r0,r1
001964  6800              LDR      r0,[r0,#0]  ; yz_angle
001966  4240              RSBS     r0,r0,#0
001968  6008              STR      r0,[r1,#0]  ; yz_angle
                  |L1.6506|
;;;124        
;;;125     }
00196a  bdf8              POP      {r3-r7,pc}
;;;126    
                          ENDP

                  accel_read PROC
;;;47     /******************************************************************************/
;;;48     void accel_read(void)
00196c  b570              PUSH     {r4-r6,lr}
;;;49     {
00196e  b086              SUB      sp,sp,#0x18
;;;50         if((hal_dev_mma8451_read_reg(0x00)&0xf) != 0)
001970  2000              MOVS     r0,#0
001972  f7fffffe          BL       hal_dev_mma8451_read_reg
001976  0700              LSLS     r0,r0,#28
001978  0f00              LSRS     r0,r0,#28
00197a  2800              CMP      r0,#0
00197c  d07e              BEQ      |L1.6780|
;;;51         {
;;;52     accel_x = (int16_t)(((hal_dev_mma8451_read_reg(0x01) << 8) | hal_dev_mma8451_read_reg(0x02)))>> 2;		
00197e  2001              MOVS     r0,#1
001980  f7fffffe          BL       hal_dev_mma8451_read_reg
001984  0204              LSLS     r4,r0,#8
001986  2002              MOVS     r0,#2
001988  f7fffffe          BL       hal_dev_mma8451_read_reg
00198c  4304              ORRS     r4,r4,r0
00198e  b220              SXTH     r0,r4
001990  1080              ASRS     r0,r0,#2
001992  49b9              LDR      r1,|L1.7288|
001994  8008              STRH     r0,[r1,#0]
;;;53     accel_y = (int16_t)(((hal_dev_mma8451_read_reg(0x03) << 8) | hal_dev_mma8451_read_reg(0x04)))>> 2;		
001996  2003              MOVS     r0,#3
001998  f7fffffe          BL       hal_dev_mma8451_read_reg
00199c  0204              LSLS     r4,r0,#8
00199e  2004              MOVS     r0,#4
0019a0  f7fffffe          BL       hal_dev_mma8451_read_reg
0019a4  4304              ORRS     r4,r4,r0
0019a6  b220              SXTH     r0,r4
0019a8  1080              ASRS     r0,r0,#2
0019aa  49b4              LDR      r1,|L1.7292|
0019ac  8008              STRH     r0,[r1,#0]
;;;54     accel_z = (int16_t)(((hal_dev_mma8451_read_reg(0x05) << 8) | hal_dev_mma8451_read_reg(0x06)))>> 2;					
0019ae  2005              MOVS     r0,#5
0019b0  f7fffffe          BL       hal_dev_mma8451_read_reg
0019b4  0204              LSLS     r4,r0,#8
0019b6  2006              MOVS     r0,#6
0019b8  f7fffffe          BL       hal_dev_mma8451_read_reg
0019bc  4304              ORRS     r4,r4,r0
0019be  b220              SXTH     r0,r4
0019c0  1080              ASRS     r0,r0,#2
0019c2  49af              LDR      r1,|L1.7296|
0019c4  8008              STRH     r0,[r1,#0]
;;;55     magx = (hal_dev_mma8451_read_reg(0x07) << 8) | hal_dev_mma8451_read_reg(0x08);
0019c6  2007              MOVS     r0,#7
0019c8  f7fffffe          BL       hal_dev_mma8451_read_reg
0019cc  0204              LSLS     r4,r0,#8
0019ce  2008              MOVS     r0,#8
0019d0  f7fffffe          BL       hal_dev_mma8451_read_reg
0019d4  4304              ORRS     r4,r4,r0
0019d6  48ab              LDR      r0,|L1.7300|
0019d8  6004              STR      r4,[r0,#0]  ; magx
;;;56     magy = (hal_dev_mma8451_read_reg(0x09) << 8) | hal_dev_mma8451_read_reg(0x0A);
0019da  2009              MOVS     r0,#9
0019dc  f7fffffe          BL       hal_dev_mma8451_read_reg
0019e0  0204              LSLS     r4,r0,#8
0019e2  200a              MOVS     r0,#0xa
0019e4  f7fffffe          BL       hal_dev_mma8451_read_reg
0019e8  4304              ORRS     r4,r4,r0
0019ea  48a7              LDR      r0,|L1.7304|
0019ec  6004              STR      r4,[r0,#0]  ; magy
;;;57     magz = (hal_dev_mma8451_read_reg(0x0B) << 8) | hal_dev_mma8451_read_reg(0x0C);
0019ee  200b              MOVS     r0,#0xb
0019f0  f7fffffe          BL       hal_dev_mma8451_read_reg
0019f4  0204              LSLS     r4,r0,#8
0019f6  200c              MOVS     r0,#0xc
0019f8  f7fffffe          BL       hal_dev_mma8451_read_reg
0019fc  4304              ORRS     r4,r4,r0
0019fe  48a3              LDR      r0,|L1.7308|
001a00  6004              STR      r4,[r0,#0]  ; magz
;;;58     temp = hal_dev_mma8451_read_reg(0x51);
001a02  2051              MOVS     r0,#0x51
001a04  f7fffffe          BL       hal_dev_mma8451_read_reg
001a08  49a1              LDR      r1,|L1.7312|
001a0a  6008              STR      r0,[r1,#0]  ; temp
;;;59     
;;;60             resultx   = hal_dev_mma8451_read_reg(0x01)<<8;
001a0c  2001              MOVS     r0,#1
001a0e  f7fffffe          BL       hal_dev_mma8451_read_reg
001a12  0200              LSLS     r0,r0,#8
001a14  b200              SXTH     r0,r0
001a16  499f              LDR      r1,|L1.7316|
001a18  8008              STRH     r0,[r1,#0]
;;;61             resultx  |= hal_dev_mma8451_read_reg(0x02);
001a1a  2002              MOVS     r0,#2
001a1c  f7fffffe          BL       hal_dev_mma8451_read_reg
001a20  499c              LDR      r1,|L1.7316|
001a22  8809              LDRH     r1,[r1,#0]  ; resultx
001a24  4308              ORRS     r0,r0,r1
001a26  b200              SXTH     r0,r0
001a28  499a              LDR      r1,|L1.7316|
001a2a  8008              STRH     r0,[r1,#0]
;;;62             resultx >>= 8;
001a2c  4608              MOV      r0,r1
001a2e  2100              MOVS     r1,#0
001a30  5e41              LDRSH    r1,[r0,r1]  ; resultx
001a32  1208              ASRS     r0,r1,#8
001a34  4997              LDR      r1,|L1.7316|
001a36  8008              STRH     r0,[r1,#0]
;;;63     
;;;64             resulty   = hal_dev_mma8451_read_reg(0x03)<<8;
001a38  2003              MOVS     r0,#3
001a3a  f7fffffe          BL       hal_dev_mma8451_read_reg
001a3e  0200              LSLS     r0,r0,#8
001a40  b200              SXTH     r0,r0
001a42  4995              LDR      r1,|L1.7320|
001a44  8008              STRH     r0,[r1,#0]
;;;65             resulty  |= hal_dev_mma8451_read_reg(0x04);
001a46  2004              MOVS     r0,#4
001a48  f7fffffe          BL       hal_dev_mma8451_read_reg
001a4c  4992              LDR      r1,|L1.7320|
001a4e  8809              LDRH     r1,[r1,#0]  ; resulty
001a50  4308              ORRS     r0,r0,r1
001a52  b200              SXTH     r0,r0
001a54  4990              LDR      r1,|L1.7320|
001a56  8008              STRH     r0,[r1,#0]
;;;66             resulty >>= 8;
001a58  4608              MOV      r0,r1
001a5a  2100              MOVS     r1,#0
001a5c  5e41              LDRSH    r1,[r0,r1]  ; resulty
001a5e  1208              ASRS     r0,r1,#8
001a60  498d              LDR      r1,|L1.7320|
001a62  8008              STRH     r0,[r1,#0]
;;;67     
;;;68             resultz   = hal_dev_mma8451_read_reg(0x05)<<8;
001a64  2005              MOVS     r0,#5
001a66  f7fffffe          BL       hal_dev_mma8451_read_reg
001a6a  0200              LSLS     r0,r0,#8
001a6c  b200              SXTH     r0,r0
001a6e  498b              LDR      r1,|L1.7324|
001a70  8008              STRH     r0,[r1,#0]
;;;69             resultz  |= hal_dev_mma8451_read_reg(0x06);
001a72  2006              MOVS     r0,#6
001a74  f7fffffe          BL       hal_dev_mma8451_read_reg
001a78  4988              LDR      r1,|L1.7324|
001a7a  e000              B        |L1.6782|
                  |L1.6780|
001a7c  e03f              B        |L1.6910|
                  |L1.6782|
001a7e  8809              LDRH     r1,[r1,#0]  ; resultz
001a80  4308              ORRS     r0,r0,r1
001a82  b200              SXTH     r0,r0
001a84  4985              LDR      r1,|L1.7324|
001a86  8008              STRH     r0,[r1,#0]
;;;70             resultz >>= 8;
001a88  4608              MOV      r0,r1
001a8a  2100              MOVS     r1,#0
001a8c  5e41              LDRSH    r1,[r0,r1]  ; resultz
001a8e  1208              ASRS     r0,r1,#8
001a90  4982              LDR      r1,|L1.7324|
001a92  8008              STRH     r0,[r1,#0]
;;;71     
;;;72             angle_calculation(); //-900  to  900
001a94  f7fffffe          BL       angle_calculation
;;;73             detect_fall_detection();
001a98  f7fffffe          BL       detect_fall_detection
;;;74     
;;;75     	//		hal_dev_mma8451_write_reg(A_FFMT_CFG,0xFF);		
;;;76     	//		hal_dev_mma8451_write_reg(A_FFMT_SRC,0xFF);					
;;;77     	printf("\n\t\t******************\n\t,\t%d\t,\t%d\t,\t%d\t,\t%d\t,\t%d\t,\t%d,\t%x,\t%x\n\t\t*******************\n",xy_angle+offxy,xz_angle+offxz,yz_angle+offyz,resultx+offx,resulty+offy,resultz+offz,hal_dev_mma8451_read_reg(A_FFMT_CFG),hal_dev_mma8451_read_reg(A_FFMT_SRC));			
001a9c  2016              MOVS     r0,#0x16
001a9e  f7fffffe          BL       hal_dev_mma8451_read_reg
001aa2  4604              MOV      r4,r0
001aa4  2015              MOVS     r0,#0x15
001aa6  f7fffffe          BL       hal_dev_mma8451_read_reg
001aaa  4605              MOV      r5,r0
001aac  497b              LDR      r1,|L1.7324|
001aae  2000              MOVS     r0,#0
001ab0  5e08              LDRSH    r0,[r1,r0]  ; resultz
001ab2  497b              LDR      r1,|L1.7328|
001ab4  6809              LDR      r1,[r1,#0]  ; offz
001ab6  1840              ADDS     r0,r0,r1
001ab8  4a77              LDR      r2,|L1.7320|
001aba  2100              MOVS     r1,#0
001abc  5e51              LDRSH    r1,[r2,r1]  ; resulty
001abe  4a79              LDR      r2,|L1.7332|
001ac0  6812              LDR      r2,[r2,#0]  ; offy
001ac2  1889              ADDS     r1,r1,r2
001ac4  9503              STR      r5,[sp,#0xc]
001ac6  9404              STR      r4,[sp,#0x10]
001ac8  9101              STR      r1,[sp,#4]
001aca  9002              STR      r0,[sp,#8]
001acc  4971              LDR      r1,|L1.7316|
001ace  2000              MOVS     r0,#0
001ad0  5e08              LDRSH    r0,[r1,r0]  ; resultx
001ad2  4975              LDR      r1,|L1.7336|
001ad4  6809              LDR      r1,[r1,#0]  ; offx
001ad6  1840              ADDS     r0,r0,r1
001ad8  9000              STR      r0,[sp,#0]
001ada  4866              LDR      r0,|L1.7284|
001adc  6800              LDR      r0,[r0,#0]  ; yz_angle
001ade  4e73              LDR      r6,|L1.7340|
001ae0  6836              LDR      r6,[r6,#0]  ; offyz
001ae2  1983              ADDS     r3,r0,r6
001ae4  4861              LDR      r0,|L1.7276|
001ae6  6800              LDR      r0,[r0,#0]  ; xz_angle
001ae8  4e71              LDR      r6,|L1.7344|
001aea  6836              LDR      r6,[r6,#0]  ; offxz
001aec  1982              ADDS     r2,r0,r6
001aee  485b              LDR      r0,|L1.7260|
001af0  6800              LDR      r0,[r0,#0]  ; xy_angle
001af2  4e70              LDR      r6,|L1.7348|
001af4  6836              LDR      r6,[r6,#0]  ; offxy
001af6  1981              ADDS     r1,r0,r6
001af8  486f              LDR      r0,|L1.7352|
001afa  f7fffffe          BL       __2printf
                  |L1.6910|
;;;78     
;;;79     
;;;80     		}
;;;81     }
001afe  b006              ADD      sp,sp,#0x18
001b00  bd70              POP      {r4-r6,pc}
;;;82     /******************************************************************************/
                          ENDP

                  clear2 PROC
;;;274    
;;;275    void clear2()
001b02  496e              LDR      r1,|L1.7356|
;;;276    {char temp;
;;;277        if (UART_S1_REG(UART2_BASE_PTR) & UART_S1_OR_MASK)
001b04  7909              LDRB     r1,[r1,#4]
001b06  2208              MOVS     r2,#8
001b08  4011              ANDS     r1,r1,r2
001b0a  2900              CMP      r1,#0
001b0c  d001              BEQ      |L1.6930|
;;;278        {
;;;279          temp = UART_D_REG(UART2_BASE_PTR);
001b0e  496b              LDR      r1,|L1.7356|
001b10  79c8              LDRB     r0,[r1,#7]
                  |L1.6930|
;;;280        }
;;;281    
;;;282    	UART_S1_REG(UART2_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
001b12  496a              LDR      r1,|L1.7356|
001b14  7909              LDRB     r1,[r1,#4]
001b16  2218              MOVS     r2,#0x18
001b18  4311              ORRS     r1,r1,r2
001b1a  4a68              LDR      r2,|L1.7356|
001b1c  7111              STRB     r1,[r2,#4]
;;;283    }	
001b1e  4770              BX       lr
;;;284    
                          ENDP

                  get_gpsdata PROC
;;;569    
;;;570    void get_gpsdata()
001b20  b510              PUSH     {r4,lr}
;;;571    {
;;;572    						int m;	clear2();
001b22  f7fffffe          BL       clear2
;;;573    						memset(uart_string_gps,0,500);memset(gga,0,100);memset(rmc,0,100);			
001b26  21ff              MOVS     r1,#0xff
001b28  31f5              ADDS     r1,r1,#0xf5
001b2a  4865              LDR      r0,|L1.7360|
001b2c  f7fffffe          BL       __aeabi_memclr4
001b30  2164              MOVS     r1,#0x64
001b32  4864              LDR      r0,|L1.7364|
001b34  f7fffffe          BL       __aeabi_memclr4
001b38  2164              MOVS     r1,#0x64
001b3a  4863              LDR      r0,|L1.7368|
001b3c  f7fffffe          BL       __aeabi_memclr4
;;;574    					i=0;
001b40  2000              MOVS     r0,#0
001b42  4962              LDR      r1,|L1.7372|
001b44  6008              STR      r0,[r1,#0]  ; i
;;;575    					do
001b46  bf00              NOP      
                  |L1.6984|
;;;576    						{uart_string_gps[i]=in_char2();i++;if(i>490){i=0;};
001b48  f7fffffe          BL       in_char2
001b4c  495c              LDR      r1,|L1.7360|
001b4e  4a5f              LDR      r2,|L1.7372|
001b50  6812              LDR      r2,[r2,#0]  ; i
001b52  5488              STRB     r0,[r1,r2]
001b54  485d              LDR      r0,|L1.7372|
001b56  6800              LDR      r0,[r0,#0]  ; i
001b58  1c40              ADDS     r0,r0,#1
001b5a  495c              LDR      r1,|L1.7372|
001b5c  6008              STR      r0,[r1,#0]  ; i
001b5e  4608              MOV      r0,r1
001b60  6800              LDR      r0,[r0,#0]  ; i
001b62  21ff              MOVS     r1,#0xff
001b64  31eb              ADDS     r1,r1,#0xeb
001b66  4288              CMP      r0,r1
001b68  dd02              BLE      |L1.7024|
001b6a  2000              MOVS     r0,#0
001b6c  4957              LDR      r1,|L1.7372|
001b6e  6008              STR      r0,[r1,#0]  ; i
                  |L1.7024|
;;;577    						}while(!(uart_string_gps[i-4] == 'R' && uart_string_gps[i-3] == 'M' && uart_string_gps[i-2] == 'C' && uart_string_gps[i-1] == ','));
001b70  4856              LDR      r0,|L1.7372|
001b72  6800              LDR      r0,[r0,#0]  ; i
001b74  1f00              SUBS     r0,r0,#4
001b76  4952              LDR      r1,|L1.7360|
001b78  5c08              LDRB     r0,[r1,r0]
001b7a  2852              CMP      r0,#0x52
001b7c  d1e4              BNE      |L1.6984|
001b7e  4853              LDR      r0,|L1.7372|
001b80  6800              LDR      r0,[r0,#0]  ; i
001b82  1ec0              SUBS     r0,r0,#3
001b84  5c08              LDRB     r0,[r1,r0]
001b86  284d              CMP      r0,#0x4d
001b88  d1de              BNE      |L1.6984|
001b8a  4850              LDR      r0,|L1.7372|
001b8c  6800              LDR      r0,[r0,#0]  ; i
001b8e  1e80              SUBS     r0,r0,#2
001b90  5c08              LDRB     r0,[r1,r0]
001b92  2843              CMP      r0,#0x43
001b94  d1d8              BNE      |L1.6984|
001b96  484d              LDR      r0,|L1.7372|
001b98  6800              LDR      r0,[r0,#0]  ; i
001b9a  1e40              SUBS     r0,r0,#1
001b9c  5c08              LDRB     r0,[r1,r0]
001b9e  282c              CMP      r0,#0x2c
001ba0  d1d2              BNE      |L1.6984|
;;;578    					m=i;	
001ba2  484a              LDR      r0,|L1.7372|
001ba4  6804              LDR      r4,[r0,#0]  ; i
;;;579    					i=0;//uart_string_gps[i-6] != 'G' && uart_string_gps[i-5] != 'P' &&
001ba6  2000              MOVS     r0,#0
001ba8  4948              LDR      r1,|L1.7372|
001baa  6008              STR      r0,[r1,#0]  ; i
;;;580    					do
001bac  bf00              NOP      
                  |L1.7086|
;;;581    						{rmc[i]=in_char2();i++;
001bae  f7fffffe          BL       in_char2
001bb2  4945              LDR      r1,|L1.7368|
001bb4  4a45              LDR      r2,|L1.7372|
001bb6  6812              LDR      r2,[r2,#0]  ; i
001bb8  5488              STRB     r0,[r1,r2]
001bba  4844              LDR      r0,|L1.7372|
001bbc  6800              LDR      r0,[r0,#0]  ; i
001bbe  1c40              ADDS     r0,r0,#1
001bc0  4942              LDR      r1,|L1.7372|
001bc2  6008              STR      r0,[r1,#0]  ; i
;;;582    						}while(rmc[i-1] != '*');
001bc4  4608              MOV      r0,r1
001bc6  6800              LDR      r0,[r0,#0]  ; i
001bc8  1e40              SUBS     r0,r0,#1
001bca  493f              LDR      r1,|L1.7368|
001bcc  5c08              LDRB     r0,[r1,r0]
001bce  282a              CMP      r0,#0x2a
001bd0  d1ed              BNE      |L1.7086|
;;;583    					
;;;584    					i=m;
001bd2  483e              LDR      r0,|L1.7372|
001bd4  6004              STR      r4,[r0,#0]  ; i
;;;585    					do
001bd6  bf00              NOP      
                  |L1.7128|
;;;586    						{uart_string_gps[i]=in_char2();i++;if(i>490){i=0;}
001bd8  f7fffffe          BL       in_char2
001bdc  4938              LDR      r1,|L1.7360|
001bde  4a3b              LDR      r2,|L1.7372|
001be0  6812              LDR      r2,[r2,#0]  ; i
001be2  5488              STRB     r0,[r1,r2]
001be4  4839              LDR      r0,|L1.7372|
001be6  6800              LDR      r0,[r0,#0]  ; i
001be8  1c40              ADDS     r0,r0,#1
001bea  4938              LDR      r1,|L1.7372|
001bec  6008              STR      r0,[r1,#0]  ; i
001bee  4608              MOV      r0,r1
001bf0  6800              LDR      r0,[r0,#0]  ; i
001bf2  21ff              MOVS     r1,#0xff
001bf4  31eb              ADDS     r1,r1,#0xeb
001bf6  4288              CMP      r0,r1
001bf8  dd02              BLE      |L1.7168|
001bfa  2000              MOVS     r0,#0
001bfc  4933              LDR      r1,|L1.7372|
001bfe  6008              STR      r0,[r1,#0]  ; i
                  |L1.7168|
;;;587    						}while(!(uart_string_gps[i-4] == 'G' && uart_string_gps[i-3] == 'G' && uart_string_gps[i-2] == 'A' && uart_string_gps[i-1] == ','));
001c00  4832              LDR      r0,|L1.7372|
001c02  6800              LDR      r0,[r0,#0]  ; i
001c04  1f00              SUBS     r0,r0,#4
001c06  492e              LDR      r1,|L1.7360|
001c08  5c08              LDRB     r0,[r1,r0]
001c0a  2847              CMP      r0,#0x47
001c0c  d1e4              BNE      |L1.7128|
001c0e  482f              LDR      r0,|L1.7372|
001c10  6800              LDR      r0,[r0,#0]  ; i
001c12  1ec0              SUBS     r0,r0,#3
001c14  5c08              LDRB     r0,[r1,r0]
001c16  2847              CMP      r0,#0x47
001c18  d1de              BNE      |L1.7128|
001c1a  482c              LDR      r0,|L1.7372|
001c1c  6800              LDR      r0,[r0,#0]  ; i
001c1e  1e80              SUBS     r0,r0,#2
001c20  5c08              LDRB     r0,[r1,r0]
001c22  2841              CMP      r0,#0x41
001c24  d1d8              BNE      |L1.7128|
001c26  4829              LDR      r0,|L1.7372|
001c28  6800              LDR      r0,[r0,#0]  ; i
001c2a  1e40              SUBS     r0,r0,#1
001c2c  5c08              LDRB     r0,[r1,r0]
001c2e  282c              CMP      r0,#0x2c
001c30  d1d2              BNE      |L1.7128|
;;;588    					i=0;//uart_string_gps[i-6] != 'G' && uart_string_gps[i-5] != 'P' &&
001c32  2000              MOVS     r0,#0
001c34  4925              LDR      r1,|L1.7372|
001c36  6008              STR      r0,[r1,#0]  ; i
;;;589    					do
001c38  bf00              NOP      
                  |L1.7226|
;;;590    						{gga[i]=in_char2();i++;
001c3a  f7fffffe          BL       in_char2
001c3e  4921              LDR      r1,|L1.7364|
001c40  4a22              LDR      r2,|L1.7372|
001c42  6812              LDR      r2,[r2,#0]  ; i
001c44  5488              STRB     r0,[r1,r2]
001c46  e043              B        |L1.7376|
                  |L1.7240|
                          DCD      Y_acc
                  |L1.7244|
                          DCD      ||cat||
                  |L1.7248|
                          DCD      xy_mag
                  |L1.7252|
                          DCD      offset
                  |L1.7256|
                          DCD      asin
                  |L1.7260|
                          DCD      xy_angle
                  |L1.7264|
                          DCD      Z_acc
                  |L1.7268|
                          DCD      xz_mag
                  |L1.7272|
                          DCD      X_acc
                  |L1.7276|
                          DCD      xz_angle
                  |L1.7280|
                          DCD      yz_mag
                  |L1.7284|
                          DCD      yz_angle
                  |L1.7288|
                          DCD      accel_x
                  |L1.7292|
                          DCD      accel_y
                  |L1.7296|
                          DCD      accel_z
                  |L1.7300|
                          DCD      magx
                  |L1.7304|
                          DCD      magy
                  |L1.7308|
                          DCD      magz
                  |L1.7312|
                          DCD      temp
                  |L1.7316|
                          DCD      resultx
                  |L1.7320|
                          DCD      resulty
                  |L1.7324|
                          DCD      resultz
                  |L1.7328|
                          DCD      offz
                  |L1.7332|
                          DCD      offy
                  |L1.7336|
                          DCD      offx
                  |L1.7340|
                          DCD      offyz
                  |L1.7344|
                          DCD      offxz
                  |L1.7348|
                          DCD      offxy
                  |L1.7352|
                          DCD      ||.conststring||+0x68
                  |L1.7356|
                          DCD      0x4006c000
                  |L1.7360|
                          DCD      uart_string_gps
                  |L1.7364|
                          DCD      gga
                  |L1.7368|
                          DCD      ||rmc||
                  |L1.7372|
                          DCD      i
                  |L1.7376|
001cd0  48fe              LDR      r0,|L1.8396|
001cd2  6800              LDR      r0,[r0,#0]  ; i
001cd4  1c40              ADDS     r0,r0,#1
001cd6  49fd              LDR      r1,|L1.8396|
001cd8  6008              STR      r0,[r1,#0]  ; i
;;;591    						}while(gga[i-1] != '*');
001cda  4608              MOV      r0,r1
001cdc  6800              LDR      r0,[r0,#0]  ; i
001cde  1e40              SUBS     r0,r0,#1
001ce0  49fb              LDR      r1,|L1.8400|
001ce2  5c08              LDRB     r0,[r1,r0]
001ce4  282a              CMP      r0,#0x2a
001ce6  d1a8              BNE      |L1.7226|
;;;592    
;;;593    						
;;;594    printf("\n\t%s\n\t%s\n\t\n",gga,rmc);		
001ce8  4afa              LDR      r2,|L1.8404|
001cea  a0fb              ADR      r0,|L1.8408|
001cec  f7fffffe          BL       __2printf
;;;595    }
001cf0  bd10              POP      {r4,pc}
;;;596    
                          ENDP

                  GPS_COLLECT PROC
;;;409    
;;;410    void GPS_COLLECT()
001cf2  b5f0              PUSH     {r4-r7,lr}
;;;411    {
001cf4  b091              SUB      sp,sp,#0x44
;;;412    		char prev[6],latest[6];
;;;413    		int iz;
;;;414    		double a,b,c;int hh,mm1,mm2;
;;;415    		double a1,b1,c1;
;;;416    		double hh11, mm11,mm22;
;;;417    
;;;418    		if (int_erval<5)
001cf6  48fb              LDR      r0,|L1.8420|
001cf8  6800              LDR      r0,[r0,#0]  ; int_erval
001cfa  2805              CMP      r0,#5
001cfc  da02              BGE      |L1.7428|
;;;419    		int_erval=0;
001cfe  2000              MOVS     r0,#0
001d00  49f8              LDR      r1,|L1.8420|
001d02  6008              STR      r0,[r1,#0]  ; int_erval
                  |L1.7428|
;;;420    
;;;421    		do{
001d04  bf00              NOP      
                  |L1.7430|
;;;422    			
;;;423    		get_gpsdata();
001d06  f7fffffe          BL       get_gpsdata
;;;424    		accel_read();detect_motion();	
001d0a  f7fffffe          BL       accel_read
001d0e  f7fffffe          BL       detect_motion
;;;425    		parse(rmc,2,3,lati);
001d12  4bf5              LDR      r3,|L1.8424|
001d14  2203              MOVS     r2,#3
001d16  2102              MOVS     r1,#2
001d18  48ee              LDR      r0,|L1.8404|
001d1a  f7fffffe          BL       parse
;;;426    		parse(rmc,4,5,longi);
001d1e  4bf3              LDR      r3,|L1.8428|
001d20  2205              MOVS     r2,#5
001d22  2104              MOVS     r1,#4
001d24  48eb              LDR      r0,|L1.8404|
001d26  f7fffffe          BL       parse
;;;427    		parse(rmc,6,7,velocity);	
001d2a  4bf1              LDR      r3,|L1.8432|
001d2c  2207              MOVS     r2,#7
001d2e  2106              MOVS     r1,#6
001d30  48e8              LDR      r0,|L1.8404|
001d32  f7fffffe          BL       parse
;;;428    		for(iz=0;iz<6;iz++)
001d36  2000              MOVS     r0,#0
001d38  900e              STR      r0,[sp,#0x38]
001d3a  e007              B        |L1.7500|
                  |L1.7484|
;;;429    			{
;;;430    				latest[iz]=gga[iz];		
001d3c  49e4              LDR      r1,|L1.8400|
001d3e  980e              LDR      r0,[sp,#0x38]
001d40  5c09              LDRB     r1,[r1,r0]
001d42  aa0f              ADD      r2,sp,#0x3c
001d44  5411              STRB     r1,[r2,r0]
001d46  980e              LDR      r0,[sp,#0x38]         ;428
001d48  1c40              ADDS     r0,r0,#1              ;428
001d4a  900e              STR      r0,[sp,#0x38]         ;428
                  |L1.7500|
001d4c  980e              LDR      r0,[sp,#0x38]         ;428
001d4e  2806              CMP      r0,#6                 ;428
001d50  dbf4              BLT      |L1.7484|
;;;431    			}
;;;432    		la=stof(latest);
001d52  a80f              ADD      r0,sp,#0x3c
001d54  f7fffffe          BL       stof
001d58  49e6              LDR      r1,|L1.8436|
001d5a  6008              STR      r0,[r1,#0]  ; la
;;;433    		printf("\n\n\t\t,%f,\t,%f,",la,pr);
001d5c  48e6              LDR      r0,|L1.8440|
001d5e  6800              LDR      r0,[r0,#0]  ; pr
001d60  f7fffffe          BL       __aeabi_f2d
001d64  9107              STR      r1,[sp,#0x1c]
001d66  9006              STR      r0,[sp,#0x18]
001d68  48e2              LDR      r0,|L1.8436|
001d6a  6800              LDR      r0,[r0,#0]  ; la
001d6c  f7fffffe          BL       __aeabi_f2d
001d70  9105              STR      r1,[sp,#0x14]
001d72  9004              STR      r0,[sp,#0x10]
001d74  9907              LDR      r1,[sp,#0x1c]
001d76  9806              LDR      r0,[sp,#0x18]
001d78  9101              STR      r1,[sp,#4]
001d7a  9000              STR      r0,[sp,#0]
001d7c  a0df              ADR      r0,|L1.8444|
001d7e  9b05              LDR      r3,[sp,#0x14]
001d80  9a04              LDR      r2,[sp,#0x10]
001d82  f7fffffe          BL       __2printf
;;;434    
;;;435    		}while((la-pr < int_erval));
001d86  48d7              LDR      r0,|L1.8420|
001d88  6800              LDR      r0,[r0,#0]  ; int_erval
001d8a  f7fffffe          BL       __aeabi_i2f
001d8e  9007              STR      r0,[sp,#0x1c]
001d90  48d9              LDR      r0,|L1.8440|
001d92  6801              LDR      r1,[r0,#0]  ; pr
001d94  48d7              LDR      r0,|L1.8436|
001d96  6800              LDR      r0,[r0,#0]  ; la
001d98  f7fffffe          BL       __aeabi_fsub
001d9c  9006              STR      r0,[sp,#0x18]
001d9e  9907              LDR      r1,[sp,#0x1c]
001da0  f7fffffe          BL       __aeabi_cfcmple
001da4  d3af              BCC      |L1.7430|
;;;436    		pr=la;
001da6  48d3              LDR      r0,|L1.8436|
001da8  6800              LDR      r0,[r0,#0]  ; la
001daa  49d3              LDR      r1,|L1.8440|
001dac  6008              STR      r0,[r1,#0]  ; pr
;;;437    
;;;438    
;;;439    		c=stof(lati);//7523.7412
001dae  48ce              LDR      r0,|L1.8424|
001db0  f7fffffe          BL       stof
001db4  9007              STR      r0,[sp,#0x1c]
001db6  f7fffffe          BL       __aeabi_f2d
001dba  910d              STR      r1,[sp,#0x34]
001dbc  900c              STR      r0,[sp,#0x30]
;;;440    		hh= c/100; //75
001dbe  2200              MOVS     r2,#0
001dc0  4bd2              LDR      r3,|L1.8460|
001dc2  990d              LDR      r1,[sp,#0x34]
001dc4  980c              LDR      r0,[sp,#0x30]
001dc6  f7fffffe          BL       __aeabi_ddiv
001dca  9107              STR      r1,[sp,#0x1c]
001dcc  9006              STR      r0,[sp,#0x18]
001dce  f7fffffe          BL       __aeabi_d2iz
001dd2  900b              STR      r0,[sp,#0x2c]
;;;441    		hh11 = c/100; //75.237412
001dd4  2200              MOVS     r2,#0
001dd6  4bcd              LDR      r3,|L1.8460|
001dd8  990d              LDR      r1,[sp,#0x34]
001dda  980c              LDR      r0,[sp,#0x30]
001ddc  f7fffffe          BL       __aeabi_ddiv
001de0  9109              STR      r1,[sp,#0x24]
001de2  9008              STR      r0,[sp,#0x20]
;;;442    		mm11 = hh11-hh; //.237412
001de4  980b              LDR      r0,[sp,#0x2c]
001de6  f7fffffe          BL       __aeabi_i2d
001dea  9107              STR      r1,[sp,#0x1c]
001dec  9006              STR      r0,[sp,#0x18]
001dee  9b09              LDR      r3,[sp,#0x24]
001df0  9a08              LDR      r2,[sp,#0x20]
001df2  f7fffffe          BL       __aeabi_drsub
001df6  4604              MOV      r4,r0
001df8  460d              MOV      r5,r1
;;;443    		mm11*=100;
001dfa  2200              MOVS     r2,#0
001dfc  4bc3              LDR      r3,|L1.8460|
001dfe  4620              MOV      r0,r4
001e00  4629              MOV      r1,r5
001e02  f7fffffe          BL       __aeabi_dmul
001e06  4604              MOV      r4,r0
001e08  460d              MOV      r5,r1
;;;444    		mm22=hh+mm11/60;	
001e0a  2200              MOVS     r2,#0
001e0c  4bc0              LDR      r3,|L1.8464|
001e0e  4620              MOV      r0,r4
001e10  4629              MOV      r1,r5
001e12  f7fffffe          BL       __aeabi_ddiv
001e16  9107              STR      r1,[sp,#0x1c]
001e18  9006              STR      r0,[sp,#0x18]
001e1a  980b              LDR      r0,[sp,#0x2c]
001e1c  f7fffffe          BL       __aeabi_i2d
001e20  9105              STR      r1,[sp,#0x14]
001e22  9004              STR      r0,[sp,#0x10]
001e24  9b07              LDR      r3,[sp,#0x1c]
001e26  9a06              LDR      r2,[sp,#0x18]
001e28  f7fffffe          BL       __aeabi_dadd
001e2c  4606              MOV      r6,r0
001e2e  460f              MOV      r7,r1
;;;445    		printf("\n\n\t\t,%d,%f,%f\t,%s,%d\n",hh,mm11,mm22,latest,la);
001e30  48b0              LDR      r0,|L1.8436|
001e32  6800              LDR      r0,[r0,#0]  ; la
001e34  f7fffffe          BL       __aeabi_f2d
001e38  9006              STR      r0,[sp,#0x18]
001e3a  9107              STR      r1,[sp,#0x1c]
001e3c  9105              STR      r1,[sp,#0x14]
001e3e  9004              STR      r0,[sp,#0x10]
001e40  a80f              ADD      r0,sp,#0x3c
001e42  4622              MOV      r2,r4
001e44  462b              MOV      r3,r5
001e46  9701              STR      r7,[sp,#4]
001e48  9600              STR      r6,[sp,#0]
001e4a  9002              STR      r0,[sp,#8]
001e4c  a0b1              ADR      r0,|L1.8468|
001e4e  990b              LDR      r1,[sp,#0x2c]
001e50  f7fffffe          BL       __2printf
;;;446    		memset(lati,0,15);
001e54  210f              MOVS     r1,#0xf
001e56  48a4              LDR      r0,|L1.8424|
001e58  f7fffffe          BL       __aeabi_memclr4
;;;447    		sprintf(lati,"%f",mm22);
001e5c  4632              MOV      r2,r6
001e5e  463b              MOV      r3,r7
001e60  a1b2              ADR      r1,|L1.8492|
001e62  48a1              LDR      r0,|L1.8424|
001e64  f7fffffe          BL       __2sprintf
;;;448    		c=stof(longi);//7523.7412
001e68  48a0              LDR      r0,|L1.8428|
001e6a  f7fffffe          BL       stof
001e6e  9007              STR      r0,[sp,#0x1c]
001e70  f7fffffe          BL       __aeabi_f2d
001e74  910d              STR      r1,[sp,#0x34]
001e76  900c              STR      r0,[sp,#0x30]
;;;449    		hh= c/100; //75
001e78  2200              MOVS     r2,#0
001e7a  4ba4              LDR      r3,|L1.8460|
001e7c  990d              LDR      r1,[sp,#0x34]
001e7e  980c              LDR      r0,[sp,#0x30]
001e80  f7fffffe          BL       __aeabi_ddiv
001e84  9107              STR      r1,[sp,#0x1c]
001e86  9006              STR      r0,[sp,#0x18]
001e88  f7fffffe          BL       __aeabi_d2iz
001e8c  900b              STR      r0,[sp,#0x2c]
;;;450    		hh11 = c/100; //75.237412
001e8e  2200              MOVS     r2,#0
001e90  4b9e              LDR      r3,|L1.8460|
001e92  990d              LDR      r1,[sp,#0x34]
001e94  980c              LDR      r0,[sp,#0x30]
001e96  f7fffffe          BL       __aeabi_ddiv
001e9a  9109              STR      r1,[sp,#0x24]
001e9c  9008              STR      r0,[sp,#0x20]
;;;451    		mm11 = hh11-hh; //.237412
001e9e  980b              LDR      r0,[sp,#0x2c]
001ea0  f7fffffe          BL       __aeabi_i2d
001ea4  9107              STR      r1,[sp,#0x1c]
001ea6  9006              STR      r0,[sp,#0x18]
001ea8  9b09              LDR      r3,[sp,#0x24]
001eaa  9a08              LDR      r2,[sp,#0x20]
001eac  f7fffffe          BL       __aeabi_drsub
001eb0  4604              MOV      r4,r0
001eb2  460d              MOV      r5,r1
;;;452    		mm11*=100;
001eb4  2200              MOVS     r2,#0
001eb6  4b95              LDR      r3,|L1.8460|
001eb8  4620              MOV      r0,r4
001eba  4629              MOV      r1,r5
001ebc  f7fffffe          BL       __aeabi_dmul
001ec0  4604              MOV      r4,r0
001ec2  460d              MOV      r5,r1
;;;453    		mm22=hh+mm11/60;	
001ec4  2200              MOVS     r2,#0
001ec6  4b92              LDR      r3,|L1.8464|
001ec8  4620              MOV      r0,r4
001eca  4629              MOV      r1,r5
001ecc  f7fffffe          BL       __aeabi_ddiv
001ed0  9107              STR      r1,[sp,#0x1c]
001ed2  9006              STR      r0,[sp,#0x18]
001ed4  980b              LDR      r0,[sp,#0x2c]
001ed6  f7fffffe          BL       __aeabi_i2d
001eda  9105              STR      r1,[sp,#0x14]
001edc  9004              STR      r0,[sp,#0x10]
001ede  9b07              LDR      r3,[sp,#0x1c]
001ee0  9a06              LDR      r2,[sp,#0x18]
001ee2  f7fffffe          BL       __aeabi_dadd
001ee6  4606              MOV      r6,r0
001ee8  460f              MOV      r7,r1
;;;454    		printf("\n\n\t\t,%d,%f,%f\n",hh,mm11,mm22);	
001eea  4622              MOV      r2,r4
001eec  462b              MOV      r3,r5
001eee  9701              STR      r7,[sp,#4]
001ef0  9600              STR      r6,[sp,#0]
001ef2  a08f              ADR      r0,|L1.8496|
001ef4  990b              LDR      r1,[sp,#0x2c]
001ef6  f7fffffe          BL       __2printf
;;;455    		memset(longi,0,15);
001efa  210f              MOVS     r1,#0xf
001efc  487b              LDR      r0,|L1.8428|
001efe  f7fffffe          BL       __aeabi_memclr4
;;;456    		sprintf(longi,"%f",mm22);	
001f02  4632              MOV      r2,r6
001f04  463b              MOV      r3,r7
001f06  a189              ADR      r1,|L1.8492|
001f08  4878              LDR      r0,|L1.8428|
001f0a  f7fffffe          BL       __2sprintf
;;;457    
;;;458    
;;;459    			
;;;460    			
;;;461    		strcat(data,"\n");
001f0e  a186              ADR      r1,|L1.8488|
001f10  488b              LDR      r0,|L1.8512|
001f12  f7fffffe          BL       strcat
;;;462    		strcat(data,imei);
001f16  498b              LDR      r1,|L1.8516|
001f18  4889              LDR      r0,|L1.8512|
001f1a  f7fffffe          BL       strcat
;;;463    		strcat(data,", ");	
001f1e  a18a              ADR      r1,|L1.8520|
001f20  4887              LDR      r0,|L1.8512|
001f22  f7fffffe          BL       strcat
;;;464    		strcat(data,"$GxGGA,");	
001f26  a189              ADR      r1,|L1.8524|
001f28  4885              LDR      r0,|L1.8512|
001f2a  f7fffffe          BL       strcat
;;;465    		strcat(data,gga);
001f2e  4968              LDR      r1,|L1.8400|
001f30  4883              LDR      r0,|L1.8512|
001f32  f7fffffe          BL       strcat
;;;466    		strcat(data,", $GxRMC,");	
001f36  a187              ADR      r1,|L1.8532|
001f38  4881              LDR      r0,|L1.8512|
001f3a  f7fffffe          BL       strcat
;;;467    		strcat(data,rmc);	
001f3e  4965              LDR      r1,|L1.8404|
001f40  487f              LDR      r0,|L1.8512|
001f42  f7fffffe          BL       strcat
;;;468    		//strcat(data,"\n");		
;;;469    		//printf("\n%s\n",data);
;;;470    
;;;471    }
001f46  b011              ADD      sp,sp,#0x44
001f48  bdf0              POP      {r4-r7,pc}
;;;472    
                          ENDP

                  tcp_initialization PROC
;;;477    
;;;478    void tcp_initialization()
001f4a  b538              PUSH     {r3-r5,lr}
;;;479    {
;;;480    
;;;481    msg_sim800(); 
001f4c  f7fffffe          BL       msg_sim800
;;;482    
;;;483    	
;;;484    						printf("\n%s\n",send_GSM("\r\nAT+CFUN=0\r\n", "OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));	
001f50  4883              LDR      r0,|L1.8544|
001f52  6800              LDR      r0,[r0,#0]  ; tmeout
001f54  4b83              LDR      r3,|L1.8548|
001f56  461a              MOV      r2,r3
001f58  3208              ADDS     r2,r2,#8
001f5a  4611              MOV      r1,r2
001f5c  3124              ADDS     r1,r1,#0x24
001f5e  9000              STR      r0,[sp,#0]
001f60  a081              ADR      r0,|L1.8552|
001f62  f7fffffe          BL       send_GSM
001f66  4604              MOV      r4,r0
001f68  4621              MOV      r1,r4
001f6a  487e              LDR      r0,|L1.8548|
001f6c  3014              ADDS     r0,r0,#0x14
001f6e  f7fffffe          BL       __2printf
;;;485    						delay(500);
001f72  20ff              MOVS     r0,#0xff
001f74  30f5              ADDS     r0,r0,#0xf5
001f76  f7fffffe          BL       delay
;;;486    
;;;487    						printf("\n%s\n",send_GSM("\r\nAT+CFUN=1\r\n", "OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));	
001f7a  4879              LDR      r0,|L1.8544|
001f7c  6800              LDR      r0,[r0,#0]  ; tmeout
001f7e  4b79              LDR      r3,|L1.8548|
001f80  461a              MOV      r2,r3
001f82  3208              ADDS     r2,r2,#8
001f84  4611              MOV      r1,r2
001f86  3124              ADDS     r1,r1,#0x24
001f88  9000              STR      r0,[sp,#0]
001f8a  a07b              ADR      r0,|L1.8568|
001f8c  f7fffffe          BL       send_GSM
001f90  4604              MOV      r4,r0
001f92  4621              MOV      r1,r4
001f94  4873              LDR      r0,|L1.8548|
001f96  3014              ADDS     r0,r0,#0x14
001f98  f7fffffe          BL       __2printf
;;;488    						delay(2000);
001f9c  207d              MOVS     r0,#0x7d
001f9e  0100              LSLS     r0,r0,#4
001fa0  f7fffffe          BL       delay
;;;489    
;;;490    msg_sim800(); 
001fa4  f7fffffe          BL       msg_sim800
;;;491    
;;;492    						GPS_COLLECT();
001fa8  f7fffffe          BL       GPS_COLLECT
;;;493    						printf("\n%s\n",send_GSM("\r\nAT+CIPSHUT\r\n", "SHUT OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));	
001fac  486c              LDR      r0,|L1.8544|
001fae  6800              LDR      r0,[r0,#0]  ; tmeout
001fb0  4b6c              LDR      r3,|L1.8548|
001fb2  461a              MOV      r2,r3
001fb4  3208              ADDS     r2,r2,#8
001fb6  a174              ADR      r1,|L1.8584|
001fb8  9000              STR      r0,[sp,#0]
001fba  a076              ADR      r0,|L1.8596|
001fbc  f7fffffe          BL       send_GSM
001fc0  4604              MOV      r4,r0
001fc2  4621              MOV      r1,r4
001fc4  4867              LDR      r0,|L1.8548|
001fc6  3014              ADDS     r0,r0,#0x14
001fc8  f7fffffe          BL       __2printf
;;;494    
;;;495    msg_sim800(); 
001fcc  f7fffffe          BL       msg_sim800
;;;496    
;;;497    						//delay(20);								
;;;498    						GPS_COLLECT();
001fd0  f7fffffe          BL       GPS_COLLECT
;;;499    						printf("\n%s\n",send_GSM("\r\nAT+CSTT=\"www\"\r\n", "OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));	
001fd4  4862              LDR      r0,|L1.8544|
001fd6  6800              LDR      r0,[r0,#0]  ; tmeout
001fd8  4b62              LDR      r3,|L1.8548|
001fda  461a              MOV      r2,r3
001fdc  3208              ADDS     r2,r2,#8
001fde  4611              MOV      r1,r2
001fe0  3124              ADDS     r1,r1,#0x24
001fe2  9000              STR      r0,[sp,#0]
001fe4  a06f              ADR      r0,|L1.8612|
001fe6  f7fffffe          BL       send_GSM
001fea  4604              MOV      r4,r0
001fec  4621              MOV      r1,r4
001fee  485d              LDR      r0,|L1.8548|
001ff0  3014              ADDS     r0,r0,#0x14
001ff2  f7fffffe          BL       __2printf
;;;500    						//delay(20);
;;;501    
;;;502    msg_sim800(); 
001ff6  f7fffffe          BL       msg_sim800
;;;503    
;;;504    						GPS_COLLECT();
001ffa  f7fffffe          BL       GPS_COLLECT
;;;505    						printf("\n%s\n",send_GSM("\r\nAT+CIICR\r\r\n", "OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));		
001ffe  4858              LDR      r0,|L1.8544|
002000  6800              LDR      r0,[r0,#0]  ; tmeout
002002  4b58              LDR      r3,|L1.8548|
002004  461a              MOV      r2,r3
002006  3208              ADDS     r2,r2,#8
002008  4611              MOV      r1,r2
00200a  3124              ADDS     r1,r1,#0x24
00200c  9000              STR      r0,[sp,#0]
00200e  a06a              ADR      r0,|L1.8632|
002010  f7fffffe          BL       send_GSM
002014  4604              MOV      r4,r0
002016  4621              MOV      r1,r4
002018  4852              LDR      r0,|L1.8548|
00201a  3014              ADDS     r0,r0,#0x14
00201c  f7fffffe          BL       __2printf
;;;506    						//delay(20);
;;;507    		//				GPS_COLLECT();
;;;508    
;;;509    msg_sim800(); 
002020  f7fffffe          BL       msg_sim800
;;;510    
;;;511    						clear();send_modem("\nAT+CIFSR\r\r\n");clear();
002024  f7fffffe          BL       clear
002028  a067              ADR      r0,|L1.8648|
00202a  f7fffffe          BL       send_modem
00202e  f7fffffe          BL       clear
;;;512    						delay(20);
002032  2014              MOVS     r0,#0x14
002034  f7fffffe          BL       delay
;;;513    
;;;514    
;;;515    msg_sim800(); 
002038  f7fffffe          BL       msg_sim800
;;;516    
;;;517    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
00203c  4b66              LDR      r3,|L1.8664|
00203e  4a67              LDR      r2,|L1.8668|
002040  a167              ADR      r1,|L1.8672|
002042  486f              LDR      r0,|L1.8704|
002044  f7fffffe          BL       __2sprintf
;;;518    						printf("\n%s\n",send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout));	
002048  4845              LDR      r0,|L1.8544|
00204a  6800              LDR      r0,[r0,#0]  ; tmeout
00204c  4b45              LDR      r3,|L1.8548|
00204e  461a              MOV      r2,r3
002050  3234              ADDS     r2,r2,#0x34
002052  a16c              ADR      r1,|L1.8708|
002054  9000              STR      r0,[sp,#0]
002056  486a              LDR      r0,|L1.8704|
002058  f7fffffe          BL       send_GSM
00205c  4604              MOV      r4,r0
00205e  4621              MOV      r1,r4
002060  4840              LDR      r0,|L1.8548|
002062  3014              ADDS     r0,r0,#0x14
002064  f7fffffe          BL       __2printf
;;;519    						clear();
002068  f7fffffe          BL       clear
;;;520    
;;;521    }
00206c  bd38              POP      {r3-r5,pc}
;;;522    
                          ENDP

                  send_tcp PROC
;;;16     
;;;17     void send_tcp()
00206e  b570              PUSH     {r4-r6,lr}
;;;18     {	int qwe,timeout;
;;;19     	
;;;20     								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;21     								if(strstr(uart_string_gsm,">"))	
002070  a166              ADR      r1,|L1.8716|
002072  4867              LDR      r0,|L1.8720|
002074  f7fffffe          BL       strstr
002078  2800              CMP      r0,#0
00207a  d025              BEQ      |L1.8392|
;;;22     								{
;;;23     									
;;;24     															clear();
00207c  f7fffffe          BL       clear
;;;25     															qwe=strlen(uart_string_gsm);
002080  4863              LDR      r0,|L1.8720|
002082  f7fffffe          BL       strlen
002086  4605              MOV      r5,r0
;;;26     															printf("\nsizeofbuffer-> %d\n",qwe);
002088  4629              MOV      r1,r5
00208a  a062              ADR      r0,|L1.8724|
00208c  f7fffffe          BL       __2printf
;;;27     															memset(uart_string_gsm,0,qwe);
002090  4629              MOV      r1,r5
002092  485f              LDR      r0,|L1.8720|
002094  f7fffffe          BL       __aeabi_memclr4
;;;28     
;;;29     									for(k=0;k<strlen(data);k++)
002098  2000              MOVS     r0,#0
00209a  4963              LDR      r1,|L1.8744|
00209c  6008              STR      r0,[r1,#0]  ; k
00209e  e00d              B        |L1.8380|
                  |L1.8352|
;;;30     									{
;;;31     										uart_putchar(UART1_BASE_PTR, data[k]);clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
0020a0  4827              LDR      r0,|L1.8512|
0020a2  4a61              LDR      r2,|L1.8744|
0020a4  6812              LDR      r2,[r2,#0]  ; k
0020a6  5c81              LDRB     r1,[r0,r2]
0020a8  4860              LDR      r0,|L1.8748|
0020aa  f7fffffe          BL       uart_putchar
0020ae  f7fffffe          BL       clear
0020b2  485d              LDR      r0,|L1.8744|
0020b4  6800              LDR      r0,[r0,#0]            ;29  ; k
0020b6  1c40              ADDS     r0,r0,#1              ;29
0020b8  495b              LDR      r1,|L1.8744|
0020ba  6008              STR      r0,[r1,#0]            ;29  ; k
                  |L1.8380|
0020bc  4820              LDR      r0,|L1.8512|
0020be  f7fffffe          BL       strlen
0020c2  4959              LDR      r1,|L1.8744|
0020c4  6809              LDR      r1,[r1,#0]            ;29  ; k
0020c6  e0b3              B        |L1.8752|
                  |L1.8392|
0020c8  e0fd              B        |L1.8902|
0020ca  0000              DCW      0x0000
                  |L1.8396|
                          DCD      i
                  |L1.8400|
                          DCD      gga
                  |L1.8404|
                          DCD      ||rmc||
                  |L1.8408|
0020d8  0a092573          DCB      "\n\t%s\n\t%s\n\t\n",0
0020dc  0a092573
0020e0  0a090a00
                  |L1.8420|
                          DCD      int_erval
                  |L1.8424|
                          DCD      lati
                  |L1.8428|
                          DCD      longi
                  |L1.8432|
                          DCD      velocity
                  |L1.8436|
                          DCD      ||la||
                  |L1.8440|
                          DCD      ||pr||
                  |L1.8444|
0020fc  0a0a0909          DCB      "\n\n\t\t,%f,\t,%f,",0
002100  2c25662c
002104  092c2566
002108  2c00    
00210a  00                DCB      0
00210b  00                DCB      0
                  |L1.8460|
                          DCD      0x40590000
                  |L1.8464|
                          DCD      0x404e0000
                  |L1.8468|
002114  0a0a0909          DCB      "\n\n\t\t,%d,%f,%f\t,%s,%d"
002118  2c25642c
00211c  25662c25
002120  66092c25
002124  732c2564
                  |L1.8488|
002128  0a00              DCB      "\n",0
00212a  00                DCB      0
00212b  00                DCB      0
                  |L1.8492|
00212c  256600            DCB      "%f",0
00212f  00                DCB      0
                  |L1.8496|
002130  0a0a0909          DCB      "\n\n\t\t,%d,%f,%f\n",0
002134  2c25642c
002138  25662c25
00213c  660a00  
00213f  00                DCB      0
                  |L1.8512|
                          DCD      data
                  |L1.8516|
                          DCD      imei
                  |L1.8520|
002148  2c2000            DCB      ", ",0
00214b  00                DCB      0
                  |L1.8524|
00214c  24477847          DCB      "$$GxGGA,",0
002150  47412c00
                  |L1.8532|
002154  2c202447          DCB      ", $$GxRMC,",0
002158  78524d43
00215c  2c00    
00215e  00                DCB      0
00215f  00                DCB      0
                  |L1.8544|
                          DCD      tmeout
                  |L1.8548|
                          DCD      ||.text||+0x464
                  |L1.8552|
002168  0d0a4154          DCB      "\r\nAT+CFUN=0\r\n",0
00216c  2b434655
002170  4e3d300d
002174  0a00    
002176  00                DCB      0
002177  00                DCB      0
                  |L1.8568|
002178  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
00217c  2b434655
002180  4e3d310d
002184  0a00    
002186  00                DCB      0
002187  00                DCB      0
                  |L1.8584|
002188  53485554          DCB      "SHUT OK\r\n",0
00218c  204f4b0d
002190  0a00    
002192  00                DCB      0
002193  00                DCB      0
                  |L1.8596|
002194  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
002198  2b434950
00219c  53485554
0021a0  0d0a00  
0021a3  00                DCB      0
                  |L1.8612|
0021a4  0d0a4154          DCB      "\r\nAT+CSTT=""www""\r\n",0
0021a8  2b435354
0021ac  543d2277
0021b0  7777220d
0021b4  0a00    
0021b6  00                DCB      0
0021b7  00                DCB      0
                  |L1.8632|
0021b8  0d0a4154          DCB      "\r\nAT+CIICR\r\r\n",0
0021bc  2b434949
0021c0  43520d0d
0021c4  0a00    
0021c6  00                DCB      0
0021c7  00                DCB      0
                  |L1.8648|
0021c8  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
0021cc  43494653
0021d0  520d0d0a
0021d4  00      
0021d5  00                DCB      0
0021d6  00                DCB      0
0021d7  00                DCB      0
                  |L1.8664|
                          DCD      port
                  |L1.8668|
                          DCD      ||ip||
                  |L1.8672|
0021e0  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
0021e4  2b434950
0021e8  53544152
0021ec  543d2254
0021f0  4350222c
0021f4  22257322
0021f8  2c222573
0021fc  220d0a00
                  |L1.8704|
                          DCD      at_
                  |L1.8708|
002204  434f4e4e          DCB      "CONNECT",0
002208  45435400
                  |L1.8716|
00220c  3e00              DCB      ">",0
00220e  00                DCB      0
00220f  00                DCB      0
                  |L1.8720|
                          DCD      uart_string_gsm
                  |L1.8724|
002214  0a73697a          DCB      "\nsizeofbuffer-> %d\n",0
002218  656f6662
00221c  75666665
002220  722d3e20
002224  25640a00
                  |L1.8744|
                          DCD      k
                  |L1.8748|
                          DCD      0x4006b000
                  |L1.8752|
002230  4288              CMP      r0,r1                 ;29
002232  d900              BLS      |L1.8758|
002234  e734              B        |L1.8352|
                  |L1.8758|
;;;32     									}		
;;;33     										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);
002236  210a              MOVS     r1,#0xa
002238  48fe              LDR      r0,|L1.9780|
00223a  f7fffffe          BL       uart_putchar
00223e  211a              MOVS     r1,#0x1a
002240  48fc              LDR      r0,|L1.9780|
002242  f7fffffe          BL       uart_putchar
;;;34     												k2=0;									//string array counter for uart 1
002246  2000              MOVS     r0,#0
002248  49fb              LDR      r1,|L1.9784|
00224a  6008              STR      r0,[r1,#0]  ; k2
;;;35     												timeout=8001;						//timer counts to wait for characters in uart 1 									
00224c  4cfb              LDR      r4,|L1.9788|
;;;36     												//send_modem("\r\n");//uart_putchar(UART1_BASE_PTR, 0x1A);send_modem("\r\n");uart_putchar(UART1_BASE_PTR, 0x1A);send_modem("\r\n");
;;;37     
;;;38     													while(!(strstr(uart_string_gsm,"SEND OK\r\n")  ||  (timeout < 1))       )
00224e  e00f              B        |L1.8816|
                  |L1.8784|
;;;39     															{
;;;40     																timeout--;
002250  1e64              SUBS     r4,r4,#1
;;;41     																if(timeout % 2000 == 0)
002252  217d              MOVS     r1,#0x7d
002254  0109              LSLS     r1,r1,#4
002256  4620              MOV      r0,r4
002258  f7fffffe          BL       __aeabi_idivmod
00225c  2900              CMP      r1,#0
00225e  d107              BNE      |L1.8816|
;;;42     																{uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
002260  2131              MOVS     r1,#0x31
002262  48f7              LDR      r0,|L1.9792|
002264  f7fffffe          BL       uart0_putchar
002268  211a              MOVS     r1,#0x1a
00226a  48f2              LDR      r0,|L1.9780|
00226c  f7fffffe          BL       uart_putchar
                  |L1.8816|
002270  a1f4              ADR      r1,|L1.9796|
002272  48f7              LDR      r0,|L1.9808|
002274  f7fffffe          BL       strstr
002278  2800              CMP      r0,#0                 ;38
00227a  d101              BNE      |L1.8832|
00227c  2c01              CMP      r4,#1                 ;38
00227e  dae7              BGE      |L1.8784|
                  |L1.8832|
;;;43     																}
;;;44     	
;;;45     															}
;;;46     														qwe=strlen(uart_string_gsm);
002280  48f3              LDR      r0,|L1.9808|
002282  f7fffffe          BL       strlen
002286  4605              MOV      r5,r0
;;;47     														printf("\nsizeofbuffer-> %d\n",qwe);
002288  4629              MOV      r1,r5
00228a  48f2              LDR      r0,|L1.9812|
00228c  f7fffffe          BL       __2printf
;;;48     
;;;49     												if( ! strstr(uart_string_gsm,"SEND OK\r\n"))
002290  a1ec              ADR      r1,|L1.9796|
002292  48ef              LDR      r0,|L1.9808|
002294  f7fffffe          BL       strstr
002298  2800              CMP      r0,#0
00229a  d101              BNE      |L1.8864|
;;;50     												{
;;;51     													
;;;52     													log_it();
00229c  f7fffffe          BL       log_it
                  |L1.8864|
;;;53     							
;;;54     													
;;;55     												}
;;;56     									
;;;57     												printf("***********************************************\n\n\n%s\n***********************************************\n",uart_string_gsm);									
0022a0  49eb              LDR      r1,|L1.9808|
0022a2  48ed              LDR      r0,|L1.9816|
0022a4  f7fffffe          BL       __2printf
;;;58     
;;;59     									uart_putchar(UART1_BASE_PTR, 0x1A);clear();
0022a8  211a              MOVS     r1,#0x1a
0022aa  48e2              LDR      r0,|L1.9780|
0022ac  f7fffffe          BL       uart_putchar
0022b0  f7fffffe          BL       clear
;;;60     									memset(data,0,strlen(data));
0022b4  48e9              LDR      r0,|L1.9820|
0022b6  f7fffffe          BL       strlen
0022ba  4606              MOV      r6,r0
0022bc  4631              MOV      r1,r6
0022be  48e7              LDR      r0,|L1.9820|
0022c0  f7fffffe          BL       __aeabi_memclr4
0022c4  e00a              B        |L1.8924|
                  |L1.8902|
;;;61     
;;;62     								}
;;;63     						else{
;;;64     									uart_putchar(UART1_BASE_PTR, 0x1A);
0022c6  211a              MOVS     r1,#0x1a
0022c8  48da              LDR      r0,|L1.9780|
0022ca  f7fffffe          BL       uart_putchar
;;;65     									printf("reinitialization ON LOOP...\n");	
0022ce  a0e4              ADR      r0,|L1.9824|
0022d0  f7fffffe          BL       __2printf
;;;66     									tcp_initialization();
0022d4  f7fffffe          BL       tcp_initialization
;;;67     									log_it();
0022d8  f7fffffe          BL       log_it
                  |L1.8924|
;;;68     
;;;69     								}
;;;70     		
;;;71     	uart_putchar(UART1_BASE_PTR, 0x1A);
0022dc  211a              MOVS     r1,#0x1a
0022de  48d5              LDR      r0,|L1.9780|
0022e0  f7fffffe          BL       uart_putchar
;;;72     	
;;;73     }
0022e4  bd70              POP      {r4-r6,pc}
;;;74     	
                          ENDP

                  read_ip_port PROC
;;;178    	
;;;179    void read_ip_port()
0022e6  b51c              PUSH     {r2-r4,lr}
;;;180    {
;;;181    		memset(at_,0,100);
0022e8  2164              MOVS     r1,#0x64
0022ea  48e5              LDR      r0,|L1.9856|
0022ec  f7fffffe          BL       __aeabi_memclr4
;;;182    		sprintf(at_, "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n");		
0022f0  a1e4              ADR      r1,|L1.9860|
0022f2  48e3              LDR      r0,|L1.9856|
0022f4  f7fffffe          BL       __2sprintf
;;;183    		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",99999);	
0022f8  48eb              LDR      r0,|L1.9896|
0022fa  4bec              LDR      r3,|L1.9900|
0022fc  461a              MOV      r2,r3
0022fe  3208              ADDS     r2,r2,#8
002300  a1eb              ADR      r1,|L1.9904|
002302  9000              STR      r0,[sp,#0]
002304  48de              LDR      r0,|L1.9856|
002306  f7fffffe          BL       send_GSM
;;;184    		parse_g(uart_string_gsm, 2,3, '|', '|',ip);
00230a  48ea              LDR      r0,|L1.9908|
00230c  217c              MOVS     r1,#0x7c
00230e  460b              MOV      r3,r1
002310  2203              MOVS     r2,#3
002312  9100              STR      r1,[sp,#0]
002314  9001              STR      r0,[sp,#4]
002316  2102              MOVS     r1,#2
002318  48cd              LDR      r0,|L1.9808|
00231a  f7fffffe          BL       parse_g
;;;185    		parse_g(uart_string_gsm, 4,5, '|', '|',port);
00231e  48e6              LDR      r0,|L1.9912|
002320  217c              MOVS     r1,#0x7c
002322  460b              MOV      r3,r1
002324  2205              MOVS     r2,#5
002326  9100              STR      r1,[sp,#0]
002328  9001              STR      r0,[sp,#4]
00232a  2104              MOVS     r1,#4
00232c  48c8              LDR      r0,|L1.9808|
00232e  f7fffffe          BL       parse_g
;;;186    		
;;;187    		printf ("\n\n\n\t\t\t****************************\n%s\n%s\n%s\n\n\t\t\t*****************************",uart_string_gsm,ip,port);
002332  4be1              LDR      r3,|L1.9912|
002334  4adf              LDR      r2,|L1.9908|
002336  49c6              LDR      r1,|L1.9808|
002338  48e0              LDR      r0,|L1.9916|
00233a  f7fffffe          BL       __2printf
;;;188    
;;;189    }		
00233e  bd1c              POP      {r2-r4,pc}
;;;190    	
                          ENDP

                  read_interval PROC
;;;191    void read_interval()
002340  b51c              PUSH     {r2-r4,lr}
;;;192    {
;;;193    		memset(at_,0,100);
002342  2164              MOVS     r1,#0x64
002344  48ce              LDR      r0,|L1.9856|
002346  f7fffffe          BL       __aeabi_memclr4
;;;194    		sprintf(at_, "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n");		
00234a  a1dd              ADR      r1,|L1.9920|
00234c  48cc              LDR      r0,|L1.9856|
00234e  f7fffffe          BL       __2sprintf
;;;195    		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",99999);	
002352  48d5              LDR      r0,|L1.9896|
002354  4bd5              LDR      r3,|L1.9900|
002356  461a              MOV      r2,r3
002358  3208              ADDS     r2,r2,#8
00235a  a1d5              ADR      r1,|L1.9904|
00235c  9000              STR      r0,[sp,#0]
00235e  48c8              LDR      r0,|L1.9856|
002360  f7fffffe          BL       send_GSM
;;;196    		parse_g(uart_string_gsm, 2,3, '|', '|',interval);
002364  48e0              LDR      r0,|L1.9960|
002366  217c              MOVS     r1,#0x7c
002368  460b              MOV      r3,r1
00236a  2203              MOVS     r2,#3
00236c  9100              STR      r1,[sp,#0]
00236e  9001              STR      r0,[sp,#4]
002370  2102              MOVS     r1,#2
002372  48b7              LDR      r0,|L1.9808|
002374  f7fffffe          BL       parse_g
;;;197    		int_erval=myAtoi(interval);		
002378  48db              LDR      r0,|L1.9960|
00237a  f7fffffe          BL       myAtoi
00237e  49db              LDR      r1,|L1.9964|
002380  6008              STR      r0,[r1,#0]  ; int_erval
;;;198    		printf ("\n\n\n\t\t\t****************************\n%s\n\n\n\t\t\t*****************************",interval);
002382  49d9              LDR      r1,|L1.9960|
002384  48da              LDR      r0,|L1.9968|
002386  f7fffffe          BL       __2printf
;;;199    
;;;200    }		
00238a  bd1c              POP      {r2-r4,pc}
;;;201    	
                          ENDP

                  read PROC
;;;211    
;;;212    void read(char * A,char * B,char * C)
00238c  b570              PUSH     {r4-r6,lr}
;;;213    {k=0;l=time;
00238e  4604              MOV      r4,r0
002390  460d              MOV      r5,r1
002392  4616              MOV      r6,r2
002394  2000              MOVS     r0,#0
002396  49d7              LDR      r1,|L1.9972|
002398  6008              STR      r0,[r1,#0]  ; k
00239a  48d7              LDR      r0,|L1.9976|
00239c  6800              LDR      r0,[r0,#0]  ; time
00239e  49d7              LDR      r1,|L1.9980|
0023a0  6008              STR      r0,[r1,#0]  ; l
;;;214    			do{
0023a2  bf00              NOP      
                  |L1.9124|
;;;215    			if( uart_getchar_present (UART1_BASE_PTR))	
0023a4  48a3              LDR      r0,|L1.9780|
0023a6  f7fffffe          BL       uart_getchar_present
0023aa  2800              CMP      r0,#0
0023ac  d018              BEQ      |L1.9184|
;;;216    			{uart_string_gps[k]=UART_D_REG(UART1_BASE_PTR);k++;l=time;if(k>298){k=0;}}
0023ae  48a1              LDR      r0,|L1.9780|
0023b0  79c0              LDRB     r0,[r0,#7]
0023b2  49d3              LDR      r1,|L1.9984|
0023b4  4acf              LDR      r2,|L1.9972|
0023b6  6812              LDR      r2,[r2,#0]  ; k
0023b8  5488              STRB     r0,[r1,r2]
0023ba  48ce              LDR      r0,|L1.9972|
0023bc  6800              LDR      r0,[r0,#0]  ; k
0023be  1c40              ADDS     r0,r0,#1
0023c0  49cc              LDR      r1,|L1.9972|
0023c2  6008              STR      r0,[r1,#0]  ; k
0023c4  48cc              LDR      r0,|L1.9976|
0023c6  6800              LDR      r0,[r0,#0]  ; time
0023c8  49cc              LDR      r1,|L1.9980|
0023ca  6008              STR      r0,[r1,#0]  ; l
0023cc  48c9              LDR      r0,|L1.9972|
0023ce  6800              LDR      r0,[r0,#0]  ; k
0023d0  21ff              MOVS     r1,#0xff
0023d2  312b              ADDS     r1,r1,#0x2b
0023d4  4288              CMP      r0,r1
0023d6  dd09              BLE      |L1.9196|
0023d8  2000              MOVS     r0,#0
0023da  49c6              LDR      r1,|L1.9972|
0023dc  6008              STR      r0,[r1,#0]  ; k
0023de  e005              B        |L1.9196|
                  |L1.9184|
;;;217    				else{
;;;218    							l--;if(l==10){}
0023e0  48c6              LDR      r0,|L1.9980|
0023e2  6800              LDR      r0,[r0,#0]  ; l
0023e4  1e40              SUBS     r0,r0,#1
0023e6  49c5              LDR      r1,|L1.9980|
0023e8  6008              STR      r0,[r1,#0]  ; l
0023ea  bf00              NOP      
                  |L1.9196|
;;;219    						}
;;;220    			}while(!((strstr(uart_string_gps, "OK\r\n"))
0023ec  49af              LDR      r1,|L1.9900|
0023ee  312c              ADDS     r1,r1,#0x2c
0023f0  48c3              LDR      r0,|L1.9984|
0023f2  f7fffffe          BL       strstr
0023f6  2800              CMP      r0,#0
0023f8  d110              BNE      |L1.9244|
0023fa  49ac              LDR      r1,|L1.9900|
0023fc  3108              ADDS     r1,r1,#8
0023fe  48c0              LDR      r0,|L1.9984|
002400  f7fffffe          BL       strstr
002404  2800              CMP      r0,#0
002406  d109              BNE      |L1.9244|
002408  48bc              LDR      r0,|L1.9980|
00240a  6800              LDR      r0,[r0,#0]  ; l
00240c  2800              CMP      r0,#0
00240e  dd05              BLE      |L1.9244|
002410  49a6              LDR      r1,|L1.9900|
002412  48bb              LDR      r0,|L1.9984|
002414  f7fffffe          BL       strstr
002418  2800              CMP      r0,#0
00241a  d0c3              BEQ      |L1.9124|
                  |L1.9244|
;;;221    							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;222    				        	||(strstr(uart_string_gps, "ERROR:"))
;;;223    							));
;;;224    //		clear();
;;;225    }	
00241c  bd70              POP      {r4-r6,pc}
;;;226    void read2(char * respA,char * respB,char * respC, int timeout)
                          ENDP

                  read2 PROC
00241e  b5f8              PUSH     {r3-r7,lr}
;;;227    {int cntr;k=0;l=time;
002420  4604              MOV      r4,r0
002422  460e              MOV      r6,r1
002424  4615              MOV      r5,r2
002426  461f              MOV      r7,r3
002428  2000              MOVS     r0,#0
00242a  49b2              LDR      r1,|L1.9972|
00242c  6008              STR      r0,[r1,#0]  ; k
00242e  48b2              LDR      r0,|L1.9976|
002430  6800              LDR      r0,[r0,#0]  ; time
002432  49b2              LDR      r1,|L1.9980|
002434  6008              STR      r0,[r1,#0]  ; l
;;;228    			do{
002436  bf00              NOP      
                  |L1.9272|
;;;229    			if( uart_getchar_present (UART2_BASE_PTR))	
002438  48b2              LDR      r0,|L1.9988|
00243a  f7fffffe          BL       uart_getchar_present
00243e  2800              CMP      r0,#0
002440  d018              BEQ      |L1.9332|
;;;230    			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=time;if(k>298){k=0;}}
002442  48b0              LDR      r0,|L1.9988|
002444  79c0              LDRB     r0,[r0,#7]
002446  49ae              LDR      r1,|L1.9984|
002448  4aaa              LDR      r2,|L1.9972|
00244a  6812              LDR      r2,[r2,#0]  ; k
00244c  5488              STRB     r0,[r1,r2]
00244e  48a9              LDR      r0,|L1.9972|
002450  6800              LDR      r0,[r0,#0]  ; k
002452  1c40              ADDS     r0,r0,#1
002454  49a7              LDR      r1,|L1.9972|
002456  6008              STR      r0,[r1,#0]  ; k
002458  48a7              LDR      r0,|L1.9976|
00245a  6800              LDR      r0,[r0,#0]  ; time
00245c  49a7              LDR      r1,|L1.9980|
00245e  6008              STR      r0,[r1,#0]  ; l
002460  48a4              LDR      r0,|L1.9972|
002462  6800              LDR      r0,[r0,#0]  ; k
002464  21ff              MOVS     r1,#0xff
002466  312b              ADDS     r1,r1,#0x2b
002468  4288              CMP      r0,r1
00246a  dd08              BLE      |L1.9342|
00246c  2000              MOVS     r0,#0
00246e  49a1              LDR      r1,|L1.9972|
002470  6008              STR      r0,[r1,#0]  ; k
002472  e004              B        |L1.9342|
                  |L1.9332|
;;;231    				else{				
;;;232    								l--;
002474  48a1              LDR      r0,|L1.9980|
002476  6800              LDR      r0,[r0,#0]  ; l
002478  1e40              SUBS     r0,r0,#1
00247a  49a0              LDR      r1,|L1.9980|
00247c  6008              STR      r0,[r1,#0]  ; l
                  |L1.9342|
;;;233    						}
;;;234    			}while(!((strstr(uart_string_gps, respA))
00247e  4621              MOV      r1,r4
002480  489f              LDR      r0,|L1.9984|
002482  f7fffffe          BL       strstr
002486  2800              CMP      r0,#0
002488  d10f              BNE      |L1.9386|
00248a  4631              MOV      r1,r6
00248c  489c              LDR      r0,|L1.9984|
00248e  f7fffffe          BL       strstr
002492  2800              CMP      r0,#0
002494  d109              BNE      |L1.9386|
002496  4899              LDR      r0,|L1.9980|
002498  6800              LDR      r0,[r0,#0]  ; l
00249a  2800              CMP      r0,#0
00249c  dd05              BLE      |L1.9386|
00249e  4629              MOV      r1,r5
0024a0  4897              LDR      r0,|L1.9984|
0024a2  f7fffffe          BL       strstr
0024a6  2800              CMP      r0,#0
0024a8  d0c6              BEQ      |L1.9272|
                  |L1.9386|
;;;235    							||(strstr(uart_string_gps, respB))  || (l<=0) 
;;;236    				        	||(strstr(uart_string_gps, respC))
;;;237    							));
;;;238    //		clear();
;;;239    }	
0024aa  bdf8              POP      {r3-r7,pc}
;;;240    
                          ENDP

                  send_modem2 PROC
;;;251    	
;;;252    void send_modem2(char ch[])
0024ac  b570              PUSH     {r4-r6,lr}
;;;253    	{	
0024ae  4604              MOV      r4,r0
;;;254    						unsigned char i;
;;;255    						i=0;
0024b0  2500              MOVS     r5,#0
;;;256    						while ((*(ch+i)) != '\0') // NULL
0024b2  e005              B        |L1.9408|
                  |L1.9396|
;;;257    						{	
;;;258    						// delay(1);
;;;259    						 uart_putchar(UART2_BASE_PTR, (*(ch+i)));
0024b4  5d61              LDRB     r1,[r4,r5]
0024b6  4893              LDR      r0,|L1.9988|
0024b8  f7fffffe          BL       uart_putchar
;;;260    						 i++;
0024bc  1c68              ADDS     r0,r5,#1
0024be  b2c5              UXTB     r5,r0
                  |L1.9408|
0024c0  5d60              LDRB     r0,[r4,r5]            ;256
0024c2  2800              CMP      r0,#0                 ;256
0024c4  d1f6              BNE      |L1.9396|
;;;261    						}
;;;262    		
;;;263    	}	
0024c6  bd70              POP      {r4-r6,pc}
;;;264    	
                          ENDP

                  send_GPS PROC
;;;312    	
;;;313    char * send_GPS(char * string, char* responseA, char* responseB, char* responseC, int timeout)
0024c8  b5f8              PUSH     {r3-r7,lr}
;;;314    {
0024ca  4607              MOV      r7,r0
0024cc  460c              MOV      r4,r1
0024ce  4615              MOV      r5,r2
0024d0  461e              MOV      r6,r3
;;;315    int qweq = strlen(uart_string_gps);
0024d2  488b              LDR      r0,|L1.9984|
0024d4  f7fffffe          BL       strlen
0024d8  9000              STR      r0,[sp,#0]
;;;316    	
;;;317    	memset(uart_string_gps,0,qweq);
0024da  4889              LDR      r0,|L1.9984|
0024dc  9900              LDR      r1,[sp,#0]
0024de  f7fffffe          BL       __aeabi_memclr4
;;;318    	clear2();
0024e2  f7fffffe          BL       clear2
;;;319    	send_modem2(string);
0024e6  4638              MOV      r0,r7
0024e8  f7fffffe          BL       send_modem2
;;;320    	read2(responseA,responseB,responseC,timeout);
0024ec  4632              MOV      r2,r6
0024ee  4629              MOV      r1,r5
0024f0  4620              MOV      r0,r4
0024f2  9b06              LDR      r3,[sp,#0x18]
0024f4  f7fffffe          BL       read2
;;;321    	clear2();
0024f8  f7fffffe          BL       clear2
;;;322    	return uart_string_gps;
0024fc  4880              LDR      r0,|L1.9984|
;;;323    }
0024fe  bdf8              POP      {r3-r7,pc}
;;;324    	
                          ENDP

                  send_chunk PROC
;;;911    
;;;912    void send_chunk()
002500  b5f0              PUSH     {r4-r7,lr}
;;;913    {float fsz;
002502  b085              SUB      sp,sp,#0x14
;;;914     int times,qwe,timeout,k5;
;;;915    								
;;;916    	printf("\n%s\n",send_GSM("\nAT+FSFLSIZE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
002504  4880              LDR      r0,|L1.9992|
002506  4b69              LDR      r3,|L1.9900|
002508  461a              MOV      r2,r3
00250a  3208              ADDS     r2,r2,#8
00250c  a168              ADR      r1,|L1.9904|
00250e  9000              STR      r0,[sp,#0]
002510  a07e              ADR      r0,|L1.9996|
002512  f7fffffe          BL       send_GSM
002516  4607              MOV      r7,r0
002518  4639              MOV      r1,r7
00251a  4864              LDR      r0,|L1.9900|
00251c  3014              ADDS     r0,r0,#0x14
00251e  f7fffffe          BL       __2printf
;;;917    	parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
002522  4881              LDR      r0,|L1.10024|
002524  210a              MOVS     r1,#0xa
002526  2320              MOVS     r3,#0x20
002528  2202              MOVS     r2,#2
00252a  9100              STR      r1,[sp,#0]
00252c  9001              STR      r0,[sp,#4]
00252e  2101              MOVS     r1,#1
002530  4847              LDR      r0,|L1.9808|
002532  f7fffffe          BL       parse_g
;;;918    	fsz=stof(fsize);//7523.7412
002536  487c              LDR      r0,|L1.10024|
002538  f7fffffe          BL       stof
00253c  9003              STR      r0,[sp,#0xc]
;;;919    	times=(fsz/1400)+1;
00253e  497b              LDR      r1,|L1.10028|
002540  9803              LDR      r0,[sp,#0xc]
002542  f7fffffe          BL       __aeabi_fdiv
002546  217f              MOVS     r1,#0x7f
002548  05c9              LSLS     r1,r1,#23
00254a  9001              STR      r0,[sp,#4]
00254c  f7fffffe          BL       __aeabi_fadd
002550  4607              MOV      r7,r0
002552  f7fffffe          BL       __aeabi_f2iz
002556  4606              MOV      r6,r0
;;;920    	for(k5=0;k5<times;)
002558  2400              MOVS     r4,#0
00255a  e19e              B        |L1.10394|
                  |L1.9564|
;;;921    	{
;;;922    		memset(sd_data,0,1400);
00255c  21af              MOVS     r1,#0xaf
00255e  00c9              LSLS     r1,r1,#3
002560  4873              LDR      r0,|L1.10032|
002562  f7fffffe          BL       __aeabi_memclr
;;;923    		memset(at_,0,100);
002566  2164              MOVS     r1,#0x64
002568  4845              LDR      r0,|L1.9856|
00256a  f7fffffe          BL       __aeabi_memclr4
;;;924    		sprintf(at_, "\nAT+FSREAD=C:\\LOG.TXT,1,1400,%d\r\n",(k5*1400) );		
00256e  20af              MOVS     r0,#0xaf
002570  00c0              LSLS     r0,r0,#3
002572  4360              MULS     r0,r4,r0
002574  4602              MOV      r2,r0
002576  a16f              ADR      r1,|L1.10036|
002578  4841              LDR      r0,|L1.9856|
00257a  f7fffffe          BL       __2sprintf
;;;925    		printf("\n%d,%s\n",k5,send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",999999));	
00257e  4862              LDR      r0,|L1.9992|
002580  4b4a              LDR      r3,|L1.9900|
002582  461a              MOV      r2,r3
002584  3208              ADDS     r2,r2,#8
002586  a14a              ADR      r1,|L1.9904|
002588  9000              STR      r0,[sp,#0]
00258a  483d              LDR      r0,|L1.9856|
00258c  f7fffffe          BL       send_GSM
002590  4607              MOV      r7,r0
002592  463a              MOV      r2,r7
002594  4621              MOV      r1,r4
002596  a070              ADR      r0,|L1.10072|
002598  f7fffffe          BL       __2printf
;;;926    		parse_g(uart_string_gsm, 2,9, '\n', '\n' ,sd_data);
00259c  4864              LDR      r0,|L1.10032|
00259e  210a              MOVS     r1,#0xa
0025a0  460b              MOV      r3,r1
0025a2  2209              MOVS     r2,#9
0025a4  9100              STR      r1,[sp,#0]
0025a6  9001              STR      r0,[sp,#4]
0025a8  2102              MOVS     r1,#2
0025aa  4829              LDR      r0,|L1.9808|
0025ac  f7fffffe          BL       parse_g
;;;927    		printf ("\n\n\n\t\t\t****************************\n%s\n\n\n\t\t\t*****************************",sd_data);
0025b0  495f              LDR      r1,|L1.10032|
0025b2  484f              LDR      r0,|L1.9968|
0025b4  f7fffffe          BL       __2printf
;;;928    		clear();
0025b8  f7fffffe          BL       clear
;;;929    
;;;930    			printf("\n%s\n",send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR\r\n" , "CONNECT",tmeout));		
0025bc  4868              LDR      r0,|L1.10080|
0025be  6800              LDR      r0,[r0,#0]  ; tmeout
0025c0  4b24              LDR      r3,|L1.9812|
0025c2  3b10              SUBS     r3,r3,#0x10
0025c4  4a39              LDR      r2,|L1.9900|
0025c6  3208              ADDS     r2,r2,#8
0025c8  a166              ADR      r1,|L1.10084|
0025ca  9000              STR      r0,[sp,#0]
0025cc  a066              ADR      r0,|L1.10088|
0025ce  f7fffffe          BL       send_GSM
0025d2  4607              MOV      r7,r0
0025d4  4639              MOV      r1,r7
0025d6  4835              LDR      r0,|L1.9900|
0025d8  3014              ADDS     r0,r0,#0x14
0025da  f7fffffe          BL       __2printf
;;;931    									if(strstr(uart_string_gsm,">"))	
0025de  a161              ADR      r1,|L1.10084|
0025e0  481b              LDR      r0,|L1.9808|
0025e2  f7fffffe          BL       strstr
0025e6  2800              CMP      r0,#0
0025e8  d022              BEQ      |L1.9776|
;;;932    									{
;;;933    										
;;;934    																clear();
0025ea  f7fffffe          BL       clear
;;;935    																qwe=strlen(uart_string_gsm);
0025ee  4818              LDR      r0,|L1.9808|
0025f0  f7fffffe          BL       strlen
0025f4  9002              STR      r0,[sp,#8]
;;;936    																printf("\nsizeofbuffer-> %d\n",qwe);
0025f6  4817              LDR      r0,|L1.9812|
0025f8  9902              LDR      r1,[sp,#8]
0025fa  f7fffffe          BL       __2printf
;;;937    																memset(uart_string_gsm,0,qwe);
0025fe  4814              LDR      r0,|L1.9808|
002600  9902              LDR      r1,[sp,#8]
002602  f7fffffe          BL       __aeabi_memclr4
;;;938    
;;;939    										for(k=0;k<strlen(sd_data);k++)
002606  2000              MOVS     r0,#0
002608  493a              LDR      r1,|L1.9972|
00260a  6008              STR      r0,[r1,#0]  ; k
00260c  e0b7              B        |L1.10110|
                  |L1.9742|
;;;940    										{
;;;941    											uart_putchar(UART1_BASE_PTR, sd_data[k]); uart0_putchar(UART0_BASE_PTR, sd_data[k]);//clear();
00260e  4848              LDR      r0,|L1.10032|
002610  4a38              LDR      r2,|L1.9972|
002612  6812              LDR      r2,[r2,#0]  ; k
002614  5c81              LDRB     r1,[r0,r2]
002616  4807              LDR      r0,|L1.9780|
002618  f7fffffe          BL       uart_putchar
00261c  4844              LDR      r0,|L1.10032|
00261e  4a35              LDR      r2,|L1.9972|
002620  6812              LDR      r2,[r2,#0]  ; k
002622  5c81              LDRB     r1,[r0,r2]
002624  4806              LDR      r0,|L1.9792|
002626  f7fffffe          BL       uart0_putchar
00262a  4832              LDR      r0,|L1.9972|
00262c  6800              LDR      r0,[r0,#0]            ;939  ; k
00262e  e0a3              B        |L1.10104|
                  |L1.9776|
002630  e0fb              B        |L1.10282|
002632  0000              DCW      0x0000
                  |L1.9780|
                          DCD      0x4006b000
                  |L1.9784|
                          DCD      ||k2||
                  |L1.9788|
                          DCD      0x00001f41
                  |L1.9792|
                          DCD      0x4006a000
                  |L1.9796|
002644  53454e44          DCB      "SEND OK\r\n",0
002648  204f4b0d
00264c  0a00    
00264e  00                DCB      0
00264f  00                DCB      0
                  |L1.9808|
                          DCD      uart_string_gsm
                  |L1.9812|
                          DCD      ||.text||+0x2214
                  |L1.9816|
                          DCD      ||.conststring||+0xbc
                  |L1.9820|
                          DCD      data
                  |L1.9824|
002660  7265696e          DCB      "reinitialization ON LOOP...\n",0
002664  69746961
002668  6c697a61
00266c  74696f6e
002670  204f4e20
002674  4c4f4f50
002678  2e2e2e0a
00267c  00      
00267d  00                DCB      0
00267e  00                DCB      0
00267f  00                DCB      0
                  |L1.9856|
                          DCD      at_
                  |L1.9860|
002684  0a41542b          DCB      "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n",0
002688  46535245
00268c  41443d43
002690  3a5c4950
002694  5f504f52
002698  542e5458
00269c  542c302c
0026a0  3130302c
0026a4  310d0a00
                  |L1.9896|
                          DCD      0x0001869f
                  |L1.9900|
                          DCD      ||.text||+0x464
                  |L1.9904|
0026b0  4f4b00            DCB      "OK",0
0026b3  00                DCB      0
                  |L1.9908|
                          DCD      ||ip||
                  |L1.9912|
                          DCD      port
                  |L1.9916|
                          DCD      ||.conststring||+0x124
                  |L1.9920|
0026c0  0a41542b          DCB      "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n",0
0026c4  46535245
0026c8  41443d43
0026cc  3a5c494e
0026d0  54455256
0026d4  414c2e54
0026d8  58542c30
0026dc  2c313030
0026e0  2c310d0a
0026e4  00      
0026e5  00                DCB      0
0026e6  00                DCB      0
0026e7  00                DCB      0
                  |L1.9960|
                          DCD      interval
                  |L1.9964|
                          DCD      int_erval
                  |L1.9968|
                          DCD      ||.conststring||+0x174
                  |L1.9972|
                          DCD      k
                  |L1.9976|
                          DCD      time
                  |L1.9980|
                          DCD      l
                  |L1.9984|
                          DCD      uart_string_gps
                  |L1.9988|
                          DCD      0x4006c000
                  |L1.9992|
                          DCD      0x000f423f
                  |L1.9996|
00270c  0a41542b          DCB      "\nAT+FSFLSIZE=C:\\LOG.TXT\r\n",0
002710  4653464c
002714  53495a45
002718  3d433a5c
00271c  4c4f472e
002720  5458540d
002724  0a00    
002726  00                DCB      0
002727  00                DCB      0
                  |L1.10024|
                          DCD      fsize
                  |L1.10028|
                          DCD      0x44af0000
                  |L1.10032|
                          DCD      sd_data
                  |L1.10036|
002734  0a41542b          DCB      "\nAT+FSREAD=C:\\LOG.TXT,1,1400,%d\r\n",0
002738  46535245
00273c  41443d43
002740  3a5c4c4f
002744  472e5458
002748  542c312c
00274c  31343030
002750  2c25640d
002754  0a00    
002756  00                DCB      0
002757  00                DCB      0
                  |L1.10072|
002758  0a25642c          DCB      "\n%d,%s\n",0
00275c  25730a00
                  |L1.10080|
                          DCD      tmeout
                  |L1.10084|
002764  3e00              DCB      ">",0
002766  00                DCB      0
002767  00                DCB      0
                  |L1.10088|
002768  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
00276c  2b434950
002770  53454e44
002774  0d0a00  
002777  00                DCB      0
                  |L1.10104|
002778  1c40              ADDS     r0,r0,#1              ;939
00277a  49fe              LDR      r1,|L1.11124|
00277c  6008              STR      r0,[r1,#0]            ;939  ; k
                  |L1.10110|
00277e  48fe              LDR      r0,|L1.11128|
002780  f7fffffe          BL       strlen
002784  49fb              LDR      r1,|L1.11124|
002786  6809              LDR      r1,[r1,#0]            ;939  ; k
002788  4288              CMP      r0,r1                 ;939
00278a  d900              BLS      |L1.10126|
00278c  e73f              B        |L1.9742|
                  |L1.10126|
;;;942    										}		
;;;943    						
;;;944    												uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);
00278e  210a              MOVS     r1,#0xa
002790  48fa              LDR      r0,|L1.11132|
002792  f7fffffe          BL       uart_putchar
002796  211a              MOVS     r1,#0x1a
002798  48f8              LDR      r0,|L1.11132|
00279a  f7fffffe          BL       uart_putchar
;;;945    													k2=0;									//string array counter for uart 1
00279e  2000              MOVS     r0,#0
0027a0  49f7              LDR      r1,|L1.11136|
0027a2  6008              STR      r0,[r1,#0]  ; k2
;;;946    													timeout=8001;						//timer counts to wait for characters in uart 1 									
0027a4  4df7              LDR      r5,|L1.11140|
;;;947    													//send_modem("\r\n");//uart_putchar(UART1_BASE_PTR, 0x1A);send_modem("\r\n");uart_putchar(UART1_BASE_PTR, 0x1A);send_modem("\r\n");
;;;948    
;;;949    														while(!(strstr(uart_string_gsm,"SEND OK\r\n")  ||  (timeout < 1))   || (strstr(uart_string_gsm, "ERROR"))     )
0027a6  e00f              B        |L1.10184|
                  |L1.10152|
;;;950    																{
;;;951    																	timeout--;
0027a8  1e6d              SUBS     r5,r5,#1
;;;952    																	if(timeout % 2000 == 0)
0027aa  217d              MOVS     r1,#0x7d
0027ac  0109              LSLS     r1,r1,#4
0027ae  4628              MOV      r0,r5
0027b0  f7fffffe          BL       __aeabi_idivmod
0027b4  2900              CMP      r1,#0
0027b6  d107              BNE      |L1.10184|
;;;953    																	{uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
0027b8  2131              MOVS     r1,#0x31
0027ba  48f3              LDR      r0,|L1.11144|
0027bc  f7fffffe          BL       uart0_putchar
0027c0  211a              MOVS     r1,#0x1a
0027c2  48ee              LDR      r0,|L1.11132|
0027c4  f7fffffe          BL       uart_putchar
                  |L1.10184|
0027c8  49f0              LDR      r1,|L1.11148|
0027ca  48f1              LDR      r0,|L1.11152|
0027cc  f7fffffe          BL       strstr
0027d0  2800              CMP      r0,#0                 ;949
0027d2  d101              BNE      |L1.10200|
0027d4  2d01              CMP      r5,#1                 ;949
0027d6  dae7              BGE      |L1.10152|
                  |L1.10200|
0027d8  49ee              LDR      r1,|L1.11156|
0027da  48ed              LDR      r0,|L1.11152|
0027dc  f7fffffe          BL       strstr
0027e0  2800              CMP      r0,#0                 ;949
0027e2  d1e1              BNE      |L1.10152|
;;;954    																	}
;;;955    
;;;956    																}
;;;957    															qwe=strlen(uart_string_gsm);
0027e4  48ea              LDR      r0,|L1.11152|
0027e6  f7fffffe          BL       strlen
0027ea  9002              STR      r0,[sp,#8]
;;;958    															printf("\nsizeofbuffer-> %d\n",qwe);
0027ec  48ea              LDR      r0,|L1.11160|
0027ee  9902              LDR      r1,[sp,#8]
0027f0  f7fffffe          BL       __2printf
;;;959    
;;;960    
;;;961    										
;;;962    													//printf("***********************************************\n\n\n%s\n***********************************************\n",uart_string_gsm);									
;;;963    
;;;964    										uart_putchar(UART1_BASE_PTR, 0x1A);clear();
0027f4  211a              MOVS     r1,#0x1a
0027f6  48e1              LDR      r0,|L1.11132|
0027f8  f7fffffe          BL       uart_putchar
0027fc  f7fffffe          BL       clear
;;;965    										k5++;
002800  1c64              ADDS     r4,r4,#1
;;;966    								//		memset(data,0,1000);
;;;967    											if(k5 >= times-1)printf("\n%s\n",send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
002802  1e70              SUBS     r0,r6,#1
002804  42a0              CMP      r0,r4
002806  dc48              BGT      |L1.10394|
002808  48e4              LDR      r0,|L1.11164|
00280a  4be2              LDR      r3,|L1.11156|
00280c  3b34              SUBS     r3,r3,#0x34
00280e  461a              MOV      r2,r3
002810  3208              ADDS     r2,r2,#8
002812  a1e3              ADR      r1,|L1.11168|
002814  9000              STR      r0,[sp,#0]
002816  48e3              LDR      r0,|L1.11172|
002818  f7fffffe          BL       send_GSM
00281c  4607              MOV      r7,r0
00281e  4639              MOV      r1,r7
002820  48dc              LDR      r0,|L1.11156|
002822  3820              SUBS     r0,r0,#0x20
002824  f7fffffe          BL       __2printf
002828  e037              B        |L1.10394|
                  |L1.10282|
;;;968    
;;;969    									}
;;;970    							else{
;;;971    										log_it();
00282a  f7fffffe          BL       log_it
;;;972    										memset(data,0,strlen(data));
00282e  48de              LDR      r0,|L1.11176|
002830  f7fffffe          BL       strlen
002834  4607              MOV      r7,r0
002836  4639              MOV      r1,r7
002838  48db              LDR      r0,|L1.11176|
00283a  f7fffffe          BL       __aeabi_memclr4
;;;973    										printf("reinitialization...\n");	
00283e  a0db              ADR      r0,|L1.11180|
002840  f7fffffe          BL       __2printf
;;;974    										tcp_initialization();
002844  f7fffffe          BL       tcp_initialization
;;;975    										log_it();
002848  f7fffffe          BL       log_it
;;;976    										printf("\n%s\n",send_GSM("\nAT+FSFLSIZE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
00284c  48d3              LDR      r0,|L1.11164|
00284e  4bd1              LDR      r3,|L1.11156|
002850  3b34              SUBS     r3,r3,#0x34
002852  461a              MOV      r2,r3
002854  3208              ADDS     r2,r2,#8
002856  a1d2              ADR      r1,|L1.11168|
002858  9000              STR      r0,[sp,#0]
00285a  48cc              LDR      r0,|L1.11148|
00285c  30c8              ADDS     r0,r0,#0xc8
00285e  f7fffffe          BL       send_GSM
002862  4607              MOV      r7,r0
002864  4639              MOV      r1,r7
002866  48cb              LDR      r0,|L1.11156|
002868  3820              SUBS     r0,r0,#0x20
00286a  f7fffffe          BL       __2printf
;;;977    										parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
00286e  48d5              LDR      r0,|L1.11204|
002870  210a              MOVS     r1,#0xa
002872  2320              MOVS     r3,#0x20
002874  2202              MOVS     r2,#2
002876  9100              STR      r1,[sp,#0]
002878  9001              STR      r0,[sp,#4]
00287a  2101              MOVS     r1,#1
00287c  48c4              LDR      r0,|L1.11152|
00287e  f7fffffe          BL       parse_g
;;;978    										fsz=stof(fsize);//7523.7412
002882  48d0              LDR      r0,|L1.11204|
002884  f7fffffe          BL       stof
002888  9003              STR      r0,[sp,#0xc]
;;;979    										times=fsz/1400;
00288a  49cf              LDR      r1,|L1.11208|
00288c  9803              LDR      r0,[sp,#0xc]
00288e  f7fffffe          BL       __aeabi_fdiv
002892  4607              MOV      r7,r0
002894  f7fffffe          BL       __aeabi_f2iz
002898  4606              MOV      r6,r0
                  |L1.10394|
00289a  42b4              CMP      r4,r6                 ;920
00289c  da00              BGE      |L1.10400|
00289e  e65d              B        |L1.9564|
                  |L1.10400|
;;;980    									}	
;;;981    		
;;;982    		
;;;983    		}
;;;984    		
;;;985    
;;;986    	//	sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
;;;987    	//	printf("\n%s\n",send_GSM( at_ , "CONNECT", "ERROR\r\n" , "CONNECT",tmeout));	
;;;988    	//	printf("\n%s\n",send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR\r\n" , "CONNECT",tmeout));	
;;;989    
;;;990    	//		
;;;991    		
;;;992    		
;;;993    	}
0028a0  b005              ADD      sp,sp,#0x14
0028a2  bdf0              POP      {r4-r7,pc}
;;;994    			
                          ENDP

                  gsm_gps_sleep PROC
;;;428    
;;;429    void gsm_gps_sleep()
0028a4  b538              PUSH     {r3-r5,lr}
;;;430    {
;;;431    	
;;;432    sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0028a6  4bc9              LDR      r3,|L1.11212|
0028a8  4ac9              LDR      r2,|L1.11216|
0028aa  49bb              LDR      r1,|L1.11160|
0028ac  3934              SUBS     r1,r1,#0x34
0028ae  48c9              LDR      r0,|L1.11220|
0028b0  f7fffffe          BL       __2sprintf
;;;433    printf("\n%s\n",send_GSM( at_ , "CONNECT", "ERROR\r\n" , "CONNECT",tmeout));										
0028b4  48c8              LDR      r0,|L1.11224|
0028b6  6800              LDR      r0,[r0,#0]  ; tmeout
0028b8  4bb7              LDR      r3,|L1.11160|
0028ba  3b10              SUBS     r3,r3,#0x10
0028bc  4ab5              LDR      r2,|L1.11156|
0028be  3a2c              SUBS     r2,r2,#0x2c
0028c0  4619              MOV      r1,r3
0028c2  9000              STR      r0,[sp,#0]
0028c4  48c3              LDR      r0,|L1.11220|
0028c6  f7fffffe          BL       send_GSM
0028ca  4604              MOV      r4,r0
0028cc  4621              MOV      r1,r4
0028ce  48b1              LDR      r0,|L1.11156|
0028d0  3820              SUBS     r0,r0,#0x20
0028d2  f7fffffe          BL       __2printf
;;;434    send_chunk();
0028d6  f7fffffe          BL       send_chunk
;;;435    	//sleep modules;
;;;436    //	do{
;;;437    //				accel_read();
;;;438    //				motion_samples = 0;
;;;439    //				detect_motion();
;;;440    //				
;;;441    //	}while(motion != 1);
;;;442    //	motion_samples = 0;
;;;443    //wakeup modules;
;;;444    }
0028da  bd38              POP      {r3-r5,pc}
;;;9      #include "accelerometer.c"
                          ENDP

                  hal_i2c_init PROC
;;;72     // -------------------------------------------------
;;;73     void hal_i2c_init(I2C_MemMapPtr p)
0028dc  49bf              LDR      r1,|L1.11228|
;;;74     {
;;;75        // SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
;;;76     
;;;77     		SIM_SCGC4 |= SIM_SCGC4_I2C0_MASK;
0028de  6b49              LDR      r1,[r1,#0x34]
0028e0  2240              MOVS     r2,#0x40
0028e2  4311              ORRS     r1,r1,r2
0028e4  4abd              LDR      r2,|L1.11228|
0028e6  6351              STR      r1,[r2,#0x34]
;;;78         
;;;79           // configure GPIO for I2C function
;;;80         PORTE_PCR24 = PORT_PCR_MUX(5);
0028e8  2105              MOVS     r1,#5
0028ea  0209              LSLS     r1,r1,#8
0028ec  4abc              LDR      r2,|L1.11232|
0028ee  6211              STR      r1,[r2,#0x20]
;;;81         PORTE_PCR25 = PORT_PCR_MUX(5);
0028f0  6251              STR      r1,[r2,#0x24]
;;;82     
;;;83     
;;;84         
;;;85         p->F  = 0x14; // baudrate
0028f2  2114              MOVS     r1,#0x14
0028f4  7041              STRB     r1,[r0,#1]
;;;86         p->C1 = 0x80; // enable IIC
0028f6  2180              MOVS     r1,#0x80
0028f8  7081              STRB     r1,[r0,#2]
;;;87     }
0028fa  4770              BX       lr
;;;88     
                          ENDP

                  hal_dev_mma8451_init PROC
;;;10     
;;;11     void hal_dev_mma8451_init(void)
0028fc  b500              PUSH     {lr}
;;;12     {
;;;13       hal_i2c_init(I2C0_B);
0028fe  48b9              LDR      r0,|L1.11236|
002900  f7fffffe          BL       hal_i2c_init
;;;14     }
002904  bd00              POP      {pc}
;;;15     
                          ENDP

                  hal_dev_mma8451_write_reg PROC
;;;55     }
;;;56     void hal_dev_mma8451_write_reg(uint8 addr, uint8 data)
002906  b570              PUSH     {r4-r6,lr}
;;;57     {
002908  4604              MOV      r4,r0
00290a  460d              MOV      r5,r1
;;;58         i2c_start(I2C0_B);
00290c  48b5              LDR      r0,|L1.11236|
00290e  f7fffffe          BL       i2c_start
;;;59     
;;;60         i2c_write_byte(I2C0_B, MMA8451_I2C_ADDRESS|I2C_WRITE);
002912  213a              MOVS     r1,#0x3a
002914  48b3              LDR      r0,|L1.11236|
002916  f7fffffe          BL       i2c_write_byte
;;;61         i2c_wait(I2C0_B);
00291a  48b2              LDR      r0,|L1.11236|
00291c  f7fffffe          BL       i2c_wait
;;;62         i2c_get_ack(I2C0_B);
002920  48b0              LDR      r0,|L1.11236|
002922  f7fffffe          BL       i2c_get_ack
;;;63     
;;;64         i2c_write_byte(I2C0_B, addr);
002926  4621              MOV      r1,r4
002928  48ae              LDR      r0,|L1.11236|
00292a  f7fffffe          BL       i2c_write_byte
;;;65         i2c_wait(I2C0_B);
00292e  48ad              LDR      r0,|L1.11236|
002930  f7fffffe          BL       i2c_wait
;;;66         i2c_get_ack(I2C0_B);
002934  48ab              LDR      r0,|L1.11236|
002936  f7fffffe          BL       i2c_get_ack
;;;67     
;;;68         i2c_write_byte(I2C0_B, data);
00293a  4629              MOV      r1,r5
00293c  48a9              LDR      r0,|L1.11236|
00293e  f7fffffe          BL       i2c_write_byte
;;;69         i2c_wait(I2C0_B);
002942  48a8              LDR      r0,|L1.11236|
002944  f7fffffe          BL       i2c_wait
;;;70         i2c_get_ack(I2C0_B);
002948  48a6              LDR      r0,|L1.11236|
00294a  f7fffffe          BL       i2c_get_ack
;;;71     
;;;72         i2c_stop(I2C0_B);
00294e  48a5              LDR      r0,|L1.11236|
002950  f7fffffe          BL       i2c_stop
;;;73         pause();
002954  f7fffffe          BL       pause
;;;74     }
002958  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP

                  i2c_give_ack PROC
;;;29     }
;;;30     void i2c_give_ack(I2C_MemMapPtr p)
00295a  7881              LDRB     r1,[r0,#2]
;;;31     {
;;;32         p->C1 &= ~I2C_C1_TXAK_MASK;
00295c  2208              MOVS     r2,#8
00295e  4391              BICS     r1,r1,r2
002960  7081              STRB     r1,[r0,#2]
;;;33     }
002962  4770              BX       lr
;;;34     void i2c_repeated_start(I2C_MemMapPtr p)
                          ENDP

                  hal_i2c_deinit PROC
;;;88     
;;;89     void hal_i2c_deinit(I2C_MemMapPtr p)
002964  2100              MOVS     r1,#0
;;;90     {
;;;91         p->C1 = 0x00;
002966  7081              STRB     r1,[r0,#2]
;;;92         
;;;93         SIM_SCGC4 &= ~SIM_SCGC4_I2C1_MASK;
002968  499c              LDR      r1,|L1.11228|
00296a  6b49              LDR      r1,[r1,#0x34]
00296c  2280              MOVS     r2,#0x80
00296e  4391              BICS     r1,r1,r2
002970  4a9a              LDR      r2,|L1.11228|
002972  6351              STR      r1,[r2,#0x34]
;;;94     }
002974  4770              BX       lr
;;;95     
                          ENDP

                  accel_init PROC
;;;29     
;;;30     void accel_init(void)
002976  b510              PUSH     {r4,lr}
;;;31     {
;;;32         unsigned char tmp;
;;;33         //printf("****Accelerometor init ****\n");
;;;34         //Configure MMA8451 sensor //MMA8451Q
;;;35         hal_dev_mma8451_init();      //Initialize I2C modules
002978  f7fffffe          BL       hal_dev_mma8451_init
;;;36         tmp = hal_dev_mma8451_read_reg(FXOS8700CQ_CTRL_REG1);
00297c  202a              MOVS     r0,#0x2a
00297e  f7fffffe          BL       hal_dev_mma8451_read_reg
002982  b2c4              UXTB     r4,r0
;;;37         hal_dev_mma8451_write_reg(FXOS8700CQ_CTRL_REG1,tmp&0xFE);
002984  20fe              MOVS     r0,#0xfe
002986  4020              ANDS     r0,r0,r4
002988  4601              MOV      r1,r0
00298a  202a              MOVS     r0,#0x2a
00298c  f7fffffe          BL       hal_dev_mma8451_write_reg
;;;38         tmp &= ~0xFE;
002990  21fe              MOVS     r1,#0xfe
002992  4620              MOV      r0,r4
002994  4388              BICS     r0,r0,r1
002996  4604              MOV      r4,r0
;;;39         hal_dev_mma8451_write_reg(FXOS8700CQ_CTRL_REG1,tmp|0x02);
002998  2002              MOVS     r0,#2
00299a  4320              ORRS     r0,r0,r4
00299c  4601              MOV      r1,r0
00299e  202a              MOVS     r0,#0x2a
0029a0  f7fffffe          BL       hal_dev_mma8451_write_reg
;;;40         tmp |= 0x02;
0029a4  2002              MOVS     r0,#2
0029a6  4304              ORRS     r4,r4,r0
;;;41         hal_dev_mma8451_write_reg(FXOS8700CQ_CTRL_REG1,tmp|0x01);
0029a8  2001              MOVS     r0,#1
0029aa  4320              ORRS     r0,r0,r4
0029ac  4601              MOV      r1,r0
0029ae  202a              MOVS     r0,#0x2a
0029b0  f7fffffe          BL       hal_dev_mma8451_write_reg
;;;42     //		tmp = hal_dev_mma8451_read_reg(A_FFMT_CFG);
;;;43     //		hal_dev_mma8451_write_reg(A_FFMT_CFG,hal_dev_mma8451_read_reg(A_FFMT_CFG)|0x40);
;;;44     }
0029b4  bd10              POP      {r4,pc}
;;;45     
                          ENDP

                  LED_init PROC
;;;8      
;;;9      void LED_init(void){
0029b6  4889              LDR      r0,|L1.11228|
;;;10       
;;;11         SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK ;      //Turn on clock to PORTE & D module
0029b8  6b80              LDR      r0,[r0,#0x38]
0029ba  2107              MOVS     r1,#7
0029bc  02c9              LSLS     r1,r1,#11
0029be  4308              ORRS     r0,r0,r1
0029c0  4986              LDR      r1,|L1.11228|
0029c2  6388              STR      r0,[r1,#0x38]
;;;12         
;;;13         PORTE_PCR29 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
0029c4  1588              ASRS     r0,r1,#22
0029c6  4986              LDR      r1,|L1.11232|
0029c8  6348              STR      r0,[r1,#0x34]
;;;14         PORTE_PCR31 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
0029ca  63c8              STR      r0,[r1,#0x3c]
;;;15         PORTD_PCR5 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode
0029cc  4986              LDR      r1,|L1.11240|
0029ce  6148              STR      r0,[r1,#0x14]
;;;16     	
;;;17         PORTC_PCR5 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
0029d0  4986              LDR      r1,|L1.11244|
0029d2  6148              STR      r0,[r1,#0x14]
;;;18         PORTC_PCR6 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
0029d4  6188              STR      r0,[r1,#0x18]
;;;19         PORTC_PCR7 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	
0029d6  61c8              STR      r0,[r1,#0x1c]
;;;20         PORTC_PCR8 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	    
0029d8  6208              STR      r0,[r1,#0x20]
;;;21     	
;;;22         GPIOE_PSOR |= RED_SHIFT | GREEN_SHIFT;      //Set the initial output state to high
0029da  4885              LDR      r0,|L1.11248|
0029dc  6840              LDR      r0,[r0,#4]
0029de  2105              MOVS     r1,#5
0029e0  0749              LSLS     r1,r1,#29
0029e2  4308              ORRS     r0,r0,r1
0029e4  4982              LDR      r1,|L1.11248|
0029e6  6048              STR      r0,[r1,#4]
;;;23         GPIOD_PSOR |= BLUE_SHIFT;               	//Set the inital output state to high
0029e8  4881              LDR      r0,|L1.11248|
0029ea  3840              SUBS     r0,r0,#0x40
0029ec  6840              LDR      r0,[r0,#4]
0029ee  2120              MOVS     r1,#0x20
0029f0  4308              ORRS     r0,r0,r1
0029f2  497f              LDR      r1,|L1.11248|
0029f4  3940              SUBS     r1,r1,#0x40
0029f6  6048              STR      r0,[r1,#4]
;;;24     		GPIOC_PSOR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT; 
0029f8  487d              LDR      r0,|L1.11248|
0029fa  3880              SUBS     r0,r0,#0x80
0029fc  6840              LDR      r0,[r0,#4]
0029fe  21ff              MOVS     r1,#0xff
002a00  31c1              ADDS     r1,r1,#0xc1
002a02  4308              ORRS     r0,r0,r1
002a04  497a              LDR      r1,|L1.11248|
002a06  3980              SUBS     r1,r1,#0x80
002a08  6048              STR      r0,[r1,#4]
;;;25     		GPIOC_PSOR |= RESET_SHIFT;
002a0a  4608              MOV      r0,r1
002a0c  6840              LDR      r0,[r0,#4]
002a0e  2120              MOVS     r1,#0x20
002a10  4308              ORRS     r0,r0,r1
002a12  4977              LDR      r1,|L1.11248|
002a14  3980              SUBS     r1,r1,#0x80
002a16  6048              STR      r0,[r1,#4]
;;;26         
;;;27         GPIOE_PDDR |= RED_SHIFT | GREEN_SHIFT;  //Set the pin's direction to output
002a18  4875              LDR      r0,|L1.11248|
002a1a  6940              LDR      r0,[r0,#0x14]
002a1c  2105              MOVS     r1,#5
002a1e  0749              LSLS     r1,r1,#29
002a20  4308              ORRS     r0,r0,r1
002a22  4973              LDR      r1,|L1.11248|
002a24  6148              STR      r0,[r1,#0x14]
;;;28         GPIOD_PDDR |= BLUE_SHIFT;               //Set the pin's direction to output
002a26  4872              LDR      r0,|L1.11248|
002a28  3840              SUBS     r0,r0,#0x40
002a2a  6940              LDR      r0,[r0,#0x14]
002a2c  2120              MOVS     r1,#0x20
002a2e  4308              ORRS     r0,r0,r1
002a30  496f              LDR      r1,|L1.11248|
002a32  3940              SUBS     r1,r1,#0x40
002a34  6148              STR      r0,[r1,#0x14]
;;;29     		GPIOC_PDDR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT | RESET_SHIFT; 
002a36  486e              LDR      r0,|L1.11248|
002a38  3880              SUBS     r0,r0,#0x80
002a3a  6940              LDR      r0,[r0,#0x14]
002a3c  21ff              MOVS     r1,#0xff
002a3e  31e1              ADDS     r1,r1,#0xe1
002a40  4308              ORRS     r0,r0,r1
002a42  496b              LDR      r1,|L1.11248|
002a44  3980              SUBS     r1,r1,#0x80
002a46  6148              STR      r0,[r1,#0x14]
;;;30         
;;;31         RED_OFF;		//Turn off RED LED
002a48  0588              LSLS     r0,r1,#22
002a4a  4969              LDR      r1,|L1.11248|
002a4c  6048              STR      r0,[r1,#4]
;;;32         GREEN_OFF;	//Turn off GREEN LED
002a4e  0080              LSLS     r0,r0,#2
002a50  6048              STR      r0,[r1,#4]
;;;33         BLUE_OFF;		//Turn off BLUE LED
002a52  2020              MOVS     r0,#0x20
002a54  4966              LDR      r1,|L1.11248|
002a56  3940              SUBS     r1,r1,#0x40
002a58  6048              STR      r0,[r1,#4]
;;;34     		REDBAT_OFF;
002a5a  2040              MOVS     r0,#0x40
002a5c  4964              LDR      r1,|L1.11248|
002a5e  3980              SUBS     r1,r1,#0x80
002a60  6048              STR      r0,[r1,#4]
;;;35     		GREENBAT_OFF;
002a62  2080              MOVS     r0,#0x80
002a64  6048              STR      r0,[r1,#4]
;;;36     		BLUEBAT_OFF;
002a66  0040              LSLS     r0,r0,#1
002a68  6048              STR      r0,[r1,#4]
;;;37     		RESET_OFF;
002a6a  2020              MOVS     r0,#0x20
002a6c  6088              STR      r0,[r1,#8]
;;;38     		
;;;39     	
;;;40     }
002a6e  4770              BX       lr
;;;41     
                          ENDP

                  SW1_init PROC
;;;47     
;;;48     void SW1_init(void){
002a70  485a              LDR      r0,|L1.11228|
;;;49     
;;;50     #ifdef CMSIS
;;;51     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
002a72  6b80              LDR      r0,[r0,#0x38]
002a74  2101              MOVS     r1,#1
002a76  02c9              LSLS     r1,r1,#11
002a78  4308              ORRS     r0,r0,r1
002a7a  4958              LDR      r1,|L1.11228|
002a7c  6388              STR      r0,[r1,#0x38]
;;;52     	
;;;53     	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
002a7e  485d              LDR      r0,|L1.11252|
002a80  495a              LDR      r1,|L1.11244|
002a82  60c8              STR      r0,[r1,#0xc]
;;;54     	
;;;55     	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
002a84  4855              LDR      r0,|L1.11228|
002a86  6b80              LDR      r0,[r0,#0x38]
002a88  2101              MOVS     r1,#1
002a8a  0309              LSLS     r1,r1,#12
002a8c  4308              ORRS     r0,r0,r1
002a8e  4953              LDR      r1,|L1.11228|
002a90  6388              STR      r0,[r1,#0x38]
;;;56     	
;;;57     	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
002a92  4858              LDR      r0,|L1.11252|
002a94  4954              LDR      r1,|L1.11240|
002a96  6188              STR      r0,[r1,#0x18]
;;;58     	
;;;59     	
;;;60     	
;;;61     	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
002a98  201f              MOVS     r0,#0x1f
002a9a  2101              MOVS     r1,#1
002a9c  4081              LSLS     r1,r1,r0
002a9e  4a56              LDR      r2,|L1.11256|
002aa0  6011              STR      r1,[r2,#0]
002aa2  bf00              NOP      
;;;62     #else
;;;63             
;;;64             enable_irq(31);
;;;65             set_irq_priority(31, 1);
;;;66             
;;;67             SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;68             
;;;69             PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;70             
;;;71     #endif
;;;72     }
002aa4  4770              BX       lr
;;;73     
                          ENDP

                  LED_state PROC
;;;121    
;;;122    void LED_state(void){
002aa6  b500              PUSH     {lr}
;;;123    	
;;;124    #ifdef CMSIS
;;;125    
;;;126    #endif
;;;127    			
;;;128    	switch(stateCount){
002aa8  4854              LDR      r0,|L1.11260|
002aaa  7800              LDRB     r0,[r0,#0]  ; stateCount
002aac  0003              MOVS     r3,r0
002aae  f7fffffe          BL       __ARM_common_switch8
002ab2  063b              DCB      0x06,0x3b
002ab4  040f1a25          DCB      0x04,0x0f,0x1a,0x25
002ab8  303b              DCB      0x30,0x3b
;;;129    	
;;;130    #ifndef CMSIS
;;;131                case 0:     //Red
;;;132                       RED_ON;
;;;133                       GREEN_OFF;
;;;134                       BLUE_OFF;
;;;135                       break;
;;;136    #endif
;;;137                case 1:	//Yellow
;;;138    		               RED_ON;
002aba  2001              MOVS     r0,#1
002abc  0740              LSLS     r0,r0,#29
002abe  494c              LDR      r1,|L1.11248|
002ac0  6088              STR      r0,[r1,#8]
;;;139    		               GREEN_ON;
002ac2  0080              LSLS     r0,r0,#2
002ac4  6088              STR      r0,[r1,#8]
;;;140    		               BLUE_OFF;
002ac6  2020              MOVS     r0,#0x20
002ac8  4949              LDR      r1,|L1.11248|
002aca  3940              SUBS     r1,r1,#0x40
002acc  6048              STR      r0,[r1,#4]
;;;141    		               break;
002ace  e039              B        |L1.11076|
;;;142    				
;;;143                case 2:	//Green
;;;144    		               RED_OFF;
002ad0  2001              MOVS     r0,#1
002ad2  0740              LSLS     r0,r0,#29
002ad4  4946              LDR      r1,|L1.11248|
002ad6  6048              STR      r0,[r1,#4]
;;;145    		               GREEN_ON;
002ad8  0080              LSLS     r0,r0,#2
002ada  6088              STR      r0,[r1,#8]
;;;146    		               BLUE_OFF;
002adc  2020              MOVS     r0,#0x20
002ade  4944              LDR      r1,|L1.11248|
002ae0  3940              SUBS     r1,r1,#0x40
002ae2  6048              STR      r0,[r1,#4]
;;;147    		               break;
002ae4  e02e              B        |L1.11076|
;;;148    				
;;;149                case 3:	//Blue
;;;150    		               RED_OFF;
002ae6  2001              MOVS     r0,#1
002ae8  0740              LSLS     r0,r0,#29
002aea  4941              LDR      r1,|L1.11248|
002aec  6048              STR      r0,[r1,#4]
;;;151    		               GREEN_OFF;
002aee  0080              LSLS     r0,r0,#2
002af0  6048              STR      r0,[r1,#4]
;;;152    		               BLUE_ON;
002af2  2020              MOVS     r0,#0x20
002af4  493e              LDR      r1,|L1.11248|
002af6  3940              SUBS     r1,r1,#0x40
002af8  6088              STR      r0,[r1,#8]
;;;153    		               break;
002afa  e023              B        |L1.11076|
;;;154    				
;;;155                case 4:	//Violet
;;;156    		               RED_ON;
002afc  2001              MOVS     r0,#1
002afe  0740              LSLS     r0,r0,#29
002b00  493b              LDR      r1,|L1.11248|
002b02  6088              STR      r0,[r1,#8]
;;;157    		               GREEN_OFF;
002b04  0080              LSLS     r0,r0,#2
002b06  6048              STR      r0,[r1,#4]
;;;158    		               BLUE_ON;
002b08  2020              MOVS     r0,#0x20
002b0a  4939              LDR      r1,|L1.11248|
002b0c  3940              SUBS     r1,r1,#0x40
002b0e  6088              STR      r0,[r1,#8]
;;;159    		               break;
002b10  e018              B        |L1.11076|
;;;160    				
;;;161                case 5:	//White
;;;162    		              RED_ON;
002b12  2001              MOVS     r0,#1
002b14  0740              LSLS     r0,r0,#29
002b16  4936              LDR      r1,|L1.11248|
002b18  6088              STR      r0,[r1,#8]
;;;163    		              GREEN_ON;
002b1a  0080              LSLS     r0,r0,#2
002b1c  6088              STR      r0,[r1,#8]
;;;164    		              BLUE_ON;
002b1e  2020              MOVS     r0,#0x20
002b20  4933              LDR      r1,|L1.11248|
002b22  3940              SUBS     r1,r1,#0x40
002b24  6088              STR      r0,[r1,#8]
;;;165    		              break;
002b26  e00d              B        |L1.11076|
;;;166    				
;;;167                default:	//Red
;;;168    #ifdef CMSIS
;;;169    		              RED_ON;
002b28  2001              MOVS     r0,#1
002b2a  0740              LSLS     r0,r0,#29
002b2c  4930              LDR      r1,|L1.11248|
002b2e  6088              STR      r0,[r1,#8]
;;;170    		              GREEN_OFF;
002b30  0080              LSLS     r0,r0,#2
002b32  6048              STR      r0,[r1,#4]
;;;171    		              BLUE_OFF;
002b34  2020              MOVS     r0,#0x20
002b36  492e              LDR      r1,|L1.11248|
002b38  3940              SUBS     r1,r1,#0x40
002b3a  6048              STR      r0,[r1,#4]
;;;172    		              stateCount = 0;	//Reset state counter
002b3c  2000              MOVS     r0,#0
002b3e  492f              LDR      r1,|L1.11260|
002b40  7008              STRB     r0,[r1,#0]
;;;173    			      break;
002b42  bf00              NOP      
                  |L1.11076|
002b44  bf00              NOP                            ;141
;;;174    #else
;;;175                      stateCount = 0;   //Reset state counter
;;;176    		              break;
;;;177    #endif
;;;178        }
;;;179    	
;;;180    }
002b46  bd00              POP      {pc}
;;;12     #include "systick.c"
                          ENDP

                  PORTD_IRQHandler PROC
;;;74     #ifdef CMSIS
;;;75     void PORTD_IRQHandler(void){
002b48  b500              PUSH     {lr}
;;;76       
;;;77     	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
002b4a  4828              LDR      r0,|L1.11244|
002b4c  3080              ADDS     r0,r0,#0x80
002b4e  6a00              LDR      r0,[r0,#0x20]
002b50  2108              MOVS     r1,#8
002b52  4008              ANDS     r0,r0,r1
002b54  2800              CMP      r0,#0
002b56  d05a              BEQ      |L1.11278|
;;;78     	{
;;;79     		PORTC_ISFR |= (1 << SW_PIN);
002b58  4824              LDR      r0,|L1.11244|
002b5a  3080              ADDS     r0,r0,#0x80
002b5c  6a00              LDR      r0,[r0,#0x20]
002b5e  4308              ORRS     r0,r0,r1
002b60  4922              LDR      r1,|L1.11244|
002b62  3180              ADDS     r1,r1,#0x80
002b64  6208              STR      r0,[r1,#0x20]
;;;80     		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
002b66  4826              LDR      r0,|L1.11264|
002b68  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
002b6a  2101              MOVS     r1,#1
002b6c  4308              ORRS     r0,r0,r1
002b6e  4924              LDR      r1,|L1.11264|
002b70  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;81     	
;;;82     /**************ISR follows******/	
;;;83      stateCount++;
002b72  e047              B        |L1.11268|
                  |L1.11124|
                          DCD      k
                  |L1.11128|
                          DCD      sd_data
                  |L1.11132|
                          DCD      0x4006b000
                  |L1.11136|
                          DCD      ||k2||
                  |L1.11140|
                          DCD      0x00001f41
                  |L1.11144|
                          DCD      0x4006a000
                  |L1.11148|
                          DCD      ||.text||+0x2644
                  |L1.11152|
                          DCD      uart_string_gsm
                  |L1.11156|
                          DCD      ||.text||+0x498
                  |L1.11160|
                          DCD      ||.text||+0x2214
                  |L1.11164|
                          DCD      0x000f423f
                  |L1.11168|
002ba0  4f4b00            DCB      "OK",0
002ba3  00                DCB      0
                  |L1.11172|
                          DCD      ||.text||+0xa64
                  |L1.11176|
                          DCD      data
                  |L1.11180|
002bac  7265696e          DCB      "reinitialization...\n",0
002bb0  69746961
002bb4  6c697a61
002bb8  74696f6e
002bbc  2e2e2e0a
002bc0  00      
002bc1  00                DCB      0
002bc2  00                DCB      0
002bc3  00                DCB      0
                  |L1.11204|
                          DCD      fsize
                  |L1.11208|
                          DCD      0x44af0000
                  |L1.11212|
                          DCD      port
                  |L1.11216|
                          DCD      ||ip||
                  |L1.11220|
                          DCD      at_
                  |L1.11224|
                          DCD      tmeout
                  |L1.11228|
                          DCD      0x40048000
                  |L1.11232|
                          DCD      0x4004d040
                  |L1.11236|
                          DCD      0x40066000
                  |L1.11240|
                          DCD      0x4004c000
                  |L1.11244|
                          DCD      0x4004b000
                  |L1.11248|
                          DCD      0x400ff100
                  |L1.11252|
                          DCD      0x000a0103
                  |L1.11256|
                          DCD      0xe000e100
                  |L1.11260|
                          DCD      stateCount
                  |L1.11264|
                          DCD      gu32PortStatus
                  |L1.11268|
002c04  48fe              LDR      r0,|L1.12288|
002c06  7800              LDRB     r0,[r0,#0]  ; stateCount
002c08  1c40              ADDS     r0,r0,#1
002c0a  49fd              LDR      r1,|L1.12288|
002c0c  7008              STRB     r0,[r1,#0]
                  |L1.11278|
;;;84     	}
;;;85     	
;;;86     	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
002c0e  48fd              LDR      r0,|L1.12292|
002c10  6a00              LDR      r0,[r0,#0x20]
002c12  2140              MOVS     r1,#0x40
002c14  4008              ANDS     r0,r0,r1
002c16  2800              CMP      r0,#0
002c18  d00d              BEQ      |L1.11318|
;;;87     	{
;;;88     		PORTD_ISFR |= (1 << 6);
002c1a  48fa              LDR      r0,|L1.12292|
002c1c  6a00              LDR      r0,[r0,#0x20]
002c1e  4308              ORRS     r0,r0,r1
002c20  49f8              LDR      r1,|L1.12292|
002c22  6208              STR      r0,[r1,#0x20]
;;;89     		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
002c24  48f8              LDR      r0,|L1.12296|
002c26  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
002c28  2101              MOVS     r1,#1
002c2a  4308              ORRS     r0,r0,r1
002c2c  49f6              LDR      r1,|L1.12296|
002c2e  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;90     	
;;;91     /**************ISR follows******/	
;;;92     // stateCount++;
;;;93     		
;;;94     ringflag=1;
002c30  2001              MOVS     r0,#1
002c32  49f6              LDR      r1,|L1.12300|
002c34  7008              STRB     r0,[r1,#0]
                  |L1.11318|
;;;95     
;;;96     	}
;;;97     	
;;;98     	LED_state();
002c36  f7fffffe          BL       LED_state
;;;99     }
002c3a  bd00              POP      {pc}
;;;100    
                          ENDP

                  PORTC_action PROC
;;;101    void PORTC_action(void){
002c3c  4770              BX       lr
;;;102    }
;;;103    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
002c3e  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
002c40  49f3              LDR      r1,|L1.12304|
002c42  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
002c44  48f3              LDR      r0,|L1.12308|
002c46  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK;   
002c48  2005              MOVS     r0,#5
002c4a  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
002c4c  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
002c4e  48f0              LDR      r0,|L1.12304|
;;;17     {
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
002c50  6900              LDR      r0,[r0,#0x10]
002c52  0840              LSRS     r0,r0,#1
002c54  0040              LSLS     r0,r0,#1
002c56  49ee              LDR      r1,|L1.12304|
002c58  6108              STR      r0,[r1,#0x10]
;;;19     }
002c5a  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
002c5c  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
002c5e  48ec              LDR      r0,|L1.12304|
002c60  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
002c62  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
002c64  1b28              SUBS     r0,r5,r4
002c66  49ec              LDR      r1,|L1.12312|
002c68  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
002c6a  4629              MOV      r1,r5
002c6c  a0eb              ADR      r0,|L1.12316|
002c6e  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
002c72  4621              MOV      r1,r4
002c74  a0f0              ADR      r0,|L1.12344|
002c76  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
002c7a  48e7              LDR      r0,|L1.12312|
002c7c  6801              LDR      r1,[r0,#0]  ; overhead
002c7e  a0f5              ADR      r0,|L1.12372|
002c80  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
002c84  bd70              POP      {r4-r6,pc}
;;;13     #include "stdlib.h"
                          ENDP

                  remove_all_chars PROC
;;;54     
;;;55     void remove_all_chars(char* str, char c, char d) {
002c86  b530              PUSH     {r4,r5,lr}
002c88  4603              MOV      r3,r0
002c8a  460c              MOV      r4,r1
;;;56         char *pr = str, *pw = str;
002c8c  4619              MOV      r1,r3
002c8e  4618              MOV      r0,r3
;;;57         while (*pr) {
002c90  e015              B        |L1.11454|
                  |L1.11410|
;;;58             *pw = *pr++;
002c92  780d              LDRB     r5,[r1,#0]
002c94  7005              STRB     r5,[r0,#0]
002c96  1c49              ADDS     r1,r1,#1
;;;59     			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
002c98  7805              LDRB     r5,[r0,#0]
002c9a  42a5              CMP      r5,r4
002c9c  d00d              BEQ      |L1.11450|
002c9e  7805              LDRB     r5,[r0,#0]
002ca0  4295              CMP      r5,r2
002ca2  d00a              BEQ      |L1.11450|
002ca4  7805              LDRB     r5,[r0,#0]
002ca6  2d20              CMP      r5,#0x20
002ca8  d007              BEQ      |L1.11450|
002caa  7805              LDRB     r5,[r0,#0]
002cac  2d2f              CMP      r5,#0x2f
002cae  d004              BEQ      |L1.11450|
002cb0  7805              LDRB     r5,[r0,#0]
002cb2  2d3a              CMP      r5,#0x3a
002cb4  d001              BEQ      |L1.11450|
002cb6  2501              MOVS     r5,#1
002cb8  e000              B        |L1.11452|
                  |L1.11450|
002cba  2500              MOVS     r5,#0
                  |L1.11452|
002cbc  1828              ADDS     r0,r5,r0
                  |L1.11454|
002cbe  780d              LDRB     r5,[r1,#0]            ;57
002cc0  2d00              CMP      r5,#0                 ;57
002cc2  d1e6              BNE      |L1.11410|
;;;60         }
;;;61         *pw = '\0';
002cc4  7005              STRB     r5,[r0,#0]
;;;62     }
002cc6  bd30              POP      {r4,r5,pc}
;;;63     
                          ENDP

                  delay2 PROC
;;;71     }
;;;72      void delay2(int delaytime)
002cc8  e00c              B        |L1.11492|
                  |L1.11466|
;;;73     {
;;;74      while(delaytime--)
;;;75         {for(i=5000;i>0;i--);  // about 1 ms
002cca  49ed              LDR      r1,|L1.12416|
002ccc  4aed              LDR      r2,|L1.12420|
002cce  6011              STR      r1,[r2,#0]  ; i
002cd0  e004              B        |L1.11484|
                  |L1.11474|
002cd2  49ec              LDR      r1,|L1.12420|
002cd4  6809              LDR      r1,[r1,#0]  ; i
002cd6  1e49              SUBS     r1,r1,#1
002cd8  4aea              LDR      r2,|L1.12420|
002cda  6011              STR      r1,[r2,#0]  ; i
                  |L1.11484|
002cdc  49e9              LDR      r1,|L1.12420|
002cde  6809              LDR      r1,[r1,#0]  ; i
002ce0  2900              CMP      r1,#0
002ce2  dcf6              BGT      |L1.11474|
                  |L1.11492|
002ce4  4601              MOV      r1,r0                 ;74
002ce6  1e40              SUBS     r0,r0,#1              ;74
002ce8  2900              CMP      r1,#0                 ;74
002cea  d1ee              BNE      |L1.11466|
;;;76         }
;;;77     }
002cec  4770              BX       lr
;;;78                            
                          ENDP

                  get_imei PROC
;;;611    
;;;612    void get_imei()
002cee  b570              PUSH     {r4-r6,lr}
;;;613    {int c1nt,c1nt2=0;
002cf0  2500              MOVS     r5,#0
;;;614    memset(imei,0,20);
002cf2  2114              MOVS     r1,#0x14
002cf4  48e4              LDR      r0,|L1.12424|
002cf6  f7fffffe          BL       __aeabi_memclr4
;;;615    	clear();	
002cfa  f7fffffe          BL       clear
;;;616    	for(c1nt=0;c1nt<strlen(uart_string_gsm);c1nt++)
002cfe  2400              MOVS     r4,#0
002d00  e035              B        |L1.11630|
                  |L1.11522|
;;;617    	{
;;;618    		if(( uart_string_gsm[c1nt] == '\n')	|| (uart_string_gsm[c1nt] == '\r')	|| (uart_string_gsm[c1nt] == 'A')	
002d02  48e2              LDR      r0,|L1.12428|
002d04  5d00              LDRB     r0,[r0,r4]
002d06  280a              CMP      r0,#0xa
002d08  d030              BEQ      |L1.11628|
002d0a  48e0              LDR      r0,|L1.12428|
002d0c  5d00              LDRB     r0,[r0,r4]
002d0e  280d              CMP      r0,#0xd
002d10  d02c              BEQ      |L1.11628|
002d12  48de              LDR      r0,|L1.12428|
002d14  5d00              LDRB     r0,[r0,r4]
002d16  2841              CMP      r0,#0x41
002d18  d028              BEQ      |L1.11628|
;;;619    																				|| (uart_string_gsm[c1nt] == 'T')		|| (uart_string_gsm[c1nt] == '+')
002d1a  48dc              LDR      r0,|L1.12428|
002d1c  5d00              LDRB     r0,[r0,r4]
002d1e  2854              CMP      r0,#0x54
002d20  d024              BEQ      |L1.11628|
002d22  48da              LDR      r0,|L1.12428|
002d24  5d00              LDRB     r0,[r0,r4]
002d26  282b              CMP      r0,#0x2b
002d28  d020              BEQ      |L1.11628|
;;;620    																				|| (uart_string_gsm[c1nt] == 'G')		|| (uart_string_gsm[c1nt] == 'S')
002d2a  48d8              LDR      r0,|L1.12428|
002d2c  5d00              LDRB     r0,[r0,r4]
002d2e  2847              CMP      r0,#0x47
002d30  d01c              BEQ      |L1.11628|
002d32  48d6              LDR      r0,|L1.12428|
002d34  5d00              LDRB     r0,[r0,r4]
002d36  2853              CMP      r0,#0x53
002d38  d018              BEQ      |L1.11628|
;;;621    																				|| (uart_string_gsm[c1nt] == 'N')		|| (uart_string_gsm[c1nt] == 'O')
002d3a  48d4              LDR      r0,|L1.12428|
002d3c  5d00              LDRB     r0,[r0,r4]
002d3e  284e              CMP      r0,#0x4e
002d40  d014              BEQ      |L1.11628|
002d42  48d2              LDR      r0,|L1.12428|
002d44  5d00              LDRB     r0,[r0,r4]
002d46  284f              CMP      r0,#0x4f
002d48  d010              BEQ      |L1.11628|
;;;622    																				|| (uart_string_gsm[c1nt] == 'K')		|| (uart_string_gsm[c1nt] == 'E')
002d4a  48d0              LDR      r0,|L1.12428|
002d4c  5d00              LDRB     r0,[r0,r4]
002d4e  284b              CMP      r0,#0x4b
002d50  d00c              BEQ      |L1.11628|
002d52  48ce              LDR      r0,|L1.12428|
002d54  5d00              LDRB     r0,[r0,r4]
002d56  2845              CMP      r0,#0x45
002d58  d008              BEQ      |L1.11628|
;;;623    																				|| (uart_string_gsm[c1nt] == 'R'))
002d5a  48cc              LDR      r0,|L1.12428|
002d5c  5d00              LDRB     r0,[r0,r4]
002d5e  2852              CMP      r0,#0x52
002d60  d004              BEQ      |L1.11628|
;;;624    																				{}
;;;625    		
;;;626    		else
;;;627    		{	imei[c1nt2] = uart_string_gsm[c1nt]; c1nt2++;}		
002d62  48ca              LDR      r0,|L1.12428|
002d64  5d00              LDRB     r0,[r0,r4]
002d66  49c8              LDR      r1,|L1.12424|
002d68  5548              STRB     r0,[r1,r5]
002d6a  1c6d              ADDS     r5,r5,#1
                  |L1.11628|
002d6c  1c64              ADDS     r4,r4,#1              ;616
                  |L1.11630|
002d6e  48c7              LDR      r0,|L1.12428|
002d70  f7fffffe          BL       strlen
002d74  42a0              CMP      r0,r4                 ;616
002d76  d8c4              BHI      |L1.11522|
;;;628    		}
;;;629    }
002d78  bd70              POP      {r4-r6,pc}
;;;630    	
                          ENDP

                  bat_cind PROC
;;;995    	
;;;996    	void bat_cind()
002d7a  b53e              PUSH     {r1-r5,lr}
;;;997    	{int netwrk;char netwrk_c[1];
;;;998    		
;;;999    				printf("\n%s\n",send_GSM("\r\nAT+CIND?\r\n", "OK", "ERROR\r\n" , "ERROR:",999999));
002d7c  48c4              LDR      r0,|L1.12432|
002d7e  4bc5              LDR      r3,|L1.12436|
002d80  461a              MOV      r2,r3
002d82  3208              ADDS     r2,r2,#8
002d84  a1c4              ADR      r1,|L1.12440|
002d86  9000              STR      r0,[sp,#0]
002d88  a0c4              ADR      r0,|L1.12444|
002d8a  f7fffffe          BL       send_GSM
002d8e  4605              MOV      r5,r0
002d90  4629              MOV      r1,r5
002d92  48c0              LDR      r0,|L1.12436|
002d94  3014              ADDS     r0,r0,#0x14
002d96  f7fffffe          BL       __2printf
;;;1000   				parse_g(uart_string_gsm, 1, 2, ',', ',', netwrk_c);
002d9a  a802              ADD      r0,sp,#8
002d9c  212c              MOVS     r1,#0x2c
002d9e  460b              MOV      r3,r1
002da0  2202              MOVS     r2,#2
002da2  9100              STR      r1,[sp,#0]
002da4  9001              STR      r0,[sp,#4]
002da6  2101              MOVS     r1,#1
002da8  48b8              LDR      r0,|L1.12428|
002daa  f7fffffe          BL       parse_g
;;;1001   				netwrk = netwrk_c[0]- '0';
002dae  4668              MOV      r0,sp
002db0  7a00              LDRB     r0,[r0,#8]
002db2  4604              MOV      r4,r0
002db4  3c30              SUBS     r4,r4,#0x30
;;;1002   				printf("\n\t%d\n\t%d\n\t%d\n\t%d\n",netwrk,netwrk,netwrk,netwrk);
002db6  4623              MOV      r3,r4
002db8  4622              MOV      r2,r4
002dba  4621              MOV      r1,r4
002dbc  a0bb              ADR      r0,|L1.12460|
002dbe  9400              STR      r4,[sp,#0]
002dc0  f7fffffe          BL       __2printf
;;;1003   
;;;1004   		switch(netwrk)
002dc4  0023              MOVS     r3,r4
002dc6  f7fffffe          BL       __ARM_common_switch8
002dca  064b              DCB      0x06,0x4b
002dcc  04122230          DCB      0x04,0x12,0x22,0x30
002dd0  3f4b              DCB      0x3f,0x4b
;;;1005   		{
;;;1006   			case 1:
;;;1007   				
;;;1008       RED_OFF;		//Turn off RED LED
002dd2  2001              MOVS     r0,#1
002dd4  0740              LSLS     r0,r0,#29
002dd6  49ba              LDR      r1,|L1.12480|
002dd8  6048              STR      r0,[r1,#4]
;;;1009       GREEN_OFF;	//Turn off GREEN LED
002dda  0080              LSLS     r0,r0,#2
002ddc  6048              STR      r0,[r1,#4]
;;;1010       BLUE_OFF;		//Turn off BLUE LED			
002dde  2020              MOVS     r0,#0x20
002de0  49b7              LDR      r1,|L1.12480|
002de2  3940              SUBS     r1,r1,#0x40
002de4  6048              STR      r0,[r1,#4]
;;;1011   			
;;;1012   				 RED_ON;		//Turn off RED LED
002de6  0600              LSLS     r0,r0,#24
002de8  49b5              LDR      r1,|L1.12480|
002dea  6088              STR      r0,[r1,#8]
;;;1013   					
;;;1014   			break;
002dec  e043              B        |L1.11894|
;;;1015   			
;;;1016   			case 2:
;;;1017   		
;;;1018       RED_OFF;		//Turn off RED LED
002dee  2001              MOVS     r0,#1
002df0  0740              LSLS     r0,r0,#29
002df2  49b3              LDR      r1,|L1.12480|
002df4  6048              STR      r0,[r1,#4]
;;;1019       GREEN_OFF;	//Turn off GREEN LED
002df6  0080              LSLS     r0,r0,#2
002df8  6048              STR      r0,[r1,#4]
;;;1020       BLUE_OFF;		//Turn off BLUE LED
002dfa  2020              MOVS     r0,#0x20
002dfc  49b0              LDR      r1,|L1.12480|
002dfe  3940              SUBS     r1,r1,#0x40
002e00  6048              STR      r0,[r1,#4]
;;;1021   			
;;;1022   				 RED_ON;		//Turn off RED LED
002e02  0600              LSLS     r0,r0,#24
002e04  49ae              LDR      r1,|L1.12480|
002e06  6088              STR      r0,[r1,#8]
;;;1023   				 GREEN_ON;
002e08  0080              LSLS     r0,r0,#2
002e0a  6088              STR      r0,[r1,#8]
;;;1024   			
;;;1025   			break;
002e0c  e033              B        |L1.11894|
;;;1026   			
;;;1027   			case 3:
;;;1028   				
;;;1029       RED_OFF;		//Turn off RED LED
002e0e  2001              MOVS     r0,#1
002e10  0740              LSLS     r0,r0,#29
002e12  49ab              LDR      r1,|L1.12480|
002e14  6048              STR      r0,[r1,#4]
;;;1030       GREEN_OFF;	//Turn off GREEN LED
002e16  0080              LSLS     r0,r0,#2
002e18  6048              STR      r0,[r1,#4]
;;;1031       BLUE_OFF;		//Turn off BLUE LED
002e1a  2020              MOVS     r0,#0x20
002e1c  49a8              LDR      r1,|L1.12480|
002e1e  3940              SUBS     r1,r1,#0x40
002e20  6048              STR      r0,[r1,#4]
;;;1032   			
;;;1033   				 GREEN_ON;		//Turn off RED LED
002e22  0680              LSLS     r0,r0,#26
002e24  49a6              LDR      r1,|L1.12480|
002e26  6088              STR      r0,[r1,#8]
;;;1034   
;;;1035   			
;;;1036   			break;
002e28  e025              B        |L1.11894|
;;;1037   
;;;1038   			case 4:
;;;1039   				
;;;1040       RED_OFF;		//Turn off RED LED
002e2a  2001              MOVS     r0,#1
002e2c  0740              LSLS     r0,r0,#29
002e2e  49a4              LDR      r1,|L1.12480|
002e30  6048              STR      r0,[r1,#4]
;;;1041       GREEN_OFF;	//Turn off GREEN LED
002e32  0080              LSLS     r0,r0,#2
002e34  6048              STR      r0,[r1,#4]
;;;1042       BLUE_OFF;		//Turn off BLUE LED
002e36  2020              MOVS     r0,#0x20
002e38  49a1              LDR      r1,|L1.12480|
002e3a  3940              SUBS     r1,r1,#0x40
002e3c  6048              STR      r0,[r1,#4]
;;;1043   			
;;;1044   				 BLUE_ON;		//Turn off RED LED
002e3e  6088              STR      r0,[r1,#8]
;;;1045   				 GREEN_ON;
002e40  0680              LSLS     r0,r0,#26
002e42  499f              LDR      r1,|L1.12480|
002e44  6088              STR      r0,[r1,#8]
;;;1046   			
;;;1047   			break;
002e46  e016              B        |L1.11894|
;;;1048   			
;;;1049   			case 5:
;;;1050   				
;;;1051       RED_OFF;		//Turn off RED LED
002e48  2001              MOVS     r0,#1
002e4a  0740              LSLS     r0,r0,#29
002e4c  499c              LDR      r1,|L1.12480|
002e4e  6048              STR      r0,[r1,#4]
;;;1052       GREEN_OFF;	//Turn off GREEN LED
002e50  0080              LSLS     r0,r0,#2
002e52  6048              STR      r0,[r1,#4]
;;;1053       BLUE_OFF;		//Turn off BLUE LED
002e54  2020              MOVS     r0,#0x20
002e56  499a              LDR      r1,|L1.12480|
002e58  3940              SUBS     r1,r1,#0x40
002e5a  6048              STR      r0,[r1,#4]
;;;1054   						
;;;1055   				 BLUE_ON;		//Turn off RED LED
002e5c  6088              STR      r0,[r1,#8]
;;;1056   				
;;;1057   			break;
002e5e  e00a              B        |L1.11894|
;;;1058   			
;;;1059   			default:
;;;1060   			
;;;1061       RED_OFF;		//Turn off RED LED
002e60  2001              MOVS     r0,#1
002e62  0740              LSLS     r0,r0,#29
002e64  4996              LDR      r1,|L1.12480|
002e66  6048              STR      r0,[r1,#4]
;;;1062       GREEN_OFF;	//Turn off GREEN LED
002e68  0080              LSLS     r0,r0,#2
002e6a  6048              STR      r0,[r1,#4]
;;;1063       BLUE_OFF;		//Turn off BLUE LED
002e6c  2020              MOVS     r0,#0x20
002e6e  4994              LDR      r1,|L1.12480|
002e70  3940              SUBS     r1,r1,#0x40
002e72  6048              STR      r0,[r1,#4]
;;;1064   			
;;;1065   			break;
002e74  bf00              NOP      
                  |L1.11894|
002e76  bf00              NOP                            ;1014
;;;1066   			
;;;1067   			
;;;1068   
;;;1069   		}			
;;;1070   		
;;;1071   		
;;;1072   		
;;;1073   		
;;;1074   	}
002e78  bd3e              POP      {r1-r5,pc}
;;;1075   	
                          ENDP

                  loop PROC
;;;278    
;;;279    void loop()
002e7a  b51c              PUSH     {r2-r4,lr}
;;;280    {
;;;281    				int qwe;
;;;282    	
;;;283    msg_sim800(); 
002e7c  f7fffffe          BL       msg_sim800
;;;284    
;;;285    
;;;286    							bat_cind();
002e80  f7fffffe          BL       bat_cind
;;;287    
;;;288    msg_sim800(); 
002e84  f7fffffe          BL       msg_sim800
;;;289    
;;;290    
;;;291    							GPS_COLLECT();//accel_read();detect_motion();
002e88  f7fffffe          BL       GPS_COLLECT
;;;292    
;;;293    msg_sim800(); 
002e8c  f7fffffe          BL       msg_sim800
;;;294    
;;;295    
;;;296    							printf("\n%s\n",send_GSM("\r\nAT+CIPCLOSE\r\n", "CLOSE OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));		
002e90  488c              LDR      r0,|L1.12484|
002e92  6800              LDR      r0,[r0,#0]  ; tmeout
002e94  4b7f              LDR      r3,|L1.12436|
002e96  461a              MOV      r2,r3
002e98  3208              ADDS     r2,r2,#8
002e9a  a18b              ADR      r1,|L1.12488|
002e9c  9000              STR      r0,[sp,#0]
002e9e  a08d              ADR      r0,|L1.12500|
002ea0  f7fffffe          BL       send_GSM
002ea4  4604              MOV      r4,r0
002ea6  4621              MOV      r1,r4
002ea8  487a              LDR      r0,|L1.12436|
002eaa  3014              ADDS     r0,r0,#0x14
002eac  f7fffffe          BL       __2printf
;;;297    
;;;298    msg_sim800(); 
002eb0  f7fffffe          BL       msg_sim800
;;;299    
;;;300    							GPS_COLLECT();
002eb4  f7fffffe          BL       GPS_COLLECT
;;;301    
;;;302    msg_sim800(); 
002eb8  f7fffffe          BL       msg_sim800
;;;303    
;;;304    							
;;;305    							printf("%s\n",send_GSM("\n\nAT+GSN\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
002ebc  4881              LDR      r0,|L1.12484|
002ebe  6800              LDR      r0,[r0,#0]  ; tmeout
002ec0  4b74              LDR      r3,|L1.12436|
002ec2  461a              MOV      r2,r3
002ec4  3208              ADDS     r2,r2,#8
002ec6  4611              MOV      r1,r2
002ec8  3124              ADDS     r1,r1,#0x24
002eca  9000              STR      r0,[sp,#0]
002ecc  a085              ADR      r0,|L1.12516|
002ece  f7fffffe          BL       send_GSM
002ed2  4604              MOV      r4,r0
002ed4  4621              MOV      r1,r4
002ed6  4886              LDR      r0,|L1.12528|
002ed8  f7fffffe          BL       __2printf
;;;306    							
;;;307    
;;;308    							
;;;309    
;;;310    msg_sim800(); 
002edc  f7fffffe          BL       msg_sim800
;;;311    
;;;312    							get_imei();clear();							
002ee0  f7fffffe          BL       get_imei
002ee4  f7fffffe          BL       clear
;;;313    							printf("\n%s\t->\t%d\n",imei,strlen(imei));
002ee8  4867              LDR      r0,|L1.12424|
002eea  f7fffffe          BL       strlen
002eee  4604              MOV      r4,r0
002ef0  4622              MOV      r2,r4
002ef2  4965              LDR      r1,|L1.12424|
002ef4  a07f              ADR      r0,|L1.12532|
002ef6  f7fffffe          BL       __2printf
;;;314    							memset(at_,0,100);
002efa  2164              MOVS     r1,#0x64
002efc  4880              LDR      r0,|L1.12544|
002efe  f7fffffe          BL       __aeabi_memclr4
;;;315    							sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
002f02  4b80              LDR      r3,|L1.12548|
002f04  4a80              LDR      r2,|L1.12552|
002f06  4981              LDR      r1,|L1.12556|
002f08  487d              LDR      r0,|L1.12544|
002f0a  f7fffffe          BL       __2sprintf
;;;316    							
;;;317    							GPS_COLLECT();//accel_read();detect_motion();
002f0e  f7fffffe          BL       GPS_COLLECT
;;;318    							
;;;319    							printf("\n%s\n",send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout));										
002f12  486c              LDR      r0,|L1.12484|
002f14  6800              LDR      r0,[r0,#0]  ; tmeout
002f16  4b5f              LDR      r3,|L1.12436|
002f18  461a              MOV      r2,r3
002f1a  3234              ADDS     r2,r2,#0x34
002f1c  497b              LDR      r1,|L1.12556|
002f1e  3124              ADDS     r1,r1,#0x24
002f20  9000              STR      r0,[sp,#0]
002f22  4877              LDR      r0,|L1.12544|
002f24  f7fffffe          BL       send_GSM
002f28  4604              MOV      r4,r0
002f2a  4621              MOV      r1,r4
002f2c  4859              LDR      r0,|L1.12436|
002f2e  3014              ADDS     r0,r0,#0x14
002f30  f7fffffe          BL       __2printf
;;;320    
;;;321    							GPS_COLLECT();//accel_read();detect_motion();
002f34  f7fffffe          BL       GPS_COLLECT
;;;322    
;;;323    							printf("\n%d\n",strlen(data));
002f38  4875              LDR      r0,|L1.12560|
002f3a  f7fffffe          BL       strlen
002f3e  4604              MOV      r4,r0
002f40  4621              MOV      r1,r4
002f42  a074              ADR      r0,|L1.12564|
002f44  f7fffffe          BL       __2printf
;;;324    							
;;;325    							printf("\n%s\n",send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR\r\n" , "CONNECT FAIL",tmeout));	
002f48  485e              LDR      r0,|L1.12484|
002f4a  6800              LDR      r0,[r0,#0]  ; tmeout
002f4c  a373              ADR      r3,|L1.12572|
002f4e  4a51              LDR      r2,|L1.12436|
002f50  3208              ADDS     r2,r2,#8
002f52  a176              ADR      r1,|L1.12588|
002f54  9000              STR      r0,[sp,#0]
002f56  4866              LDR      r0,|L1.12528|
002f58  300c              ADDS     r0,r0,#0xc
002f5a  f7fffffe          BL       send_GSM
002f5e  4604              MOV      r4,r0
002f60  4621              MOV      r1,r4
002f62  484c              LDR      r0,|L1.12436|
002f64  3014              ADDS     r0,r0,#0x14
002f66  f7fffffe          BL       __2printf
;;;326    							
;;;327    							GPS_COLLECT();//accel_read();detect_motion();	//
002f6a  f7fffffe          BL       GPS_COLLECT
;;;328    							clear();		
002f6e  f7fffffe          BL       clear
;;;329    							send_tcp();
002f72  f7fffffe          BL       send_tcp
;;;330    
;;;331    msg_sim800(); 
002f76  f7fffffe          BL       msg_sim800
;;;332    
;;;333    							
;;;334    							GPS_COLLECT();//accel_read();detect_motion();
002f7a  f7fffffe          BL       GPS_COLLECT
;;;335    
;;;336    msg_sim800(); 
002f7e  f7fffffe          BL       msg_sim800
;;;337    
;;;338    
;;;339    							printf("%s\n",send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
002f82  4850              LDR      r0,|L1.12484|
002f84  6800              LDR      r0,[r0,#0]  ; tmeout
002f86  4b43              LDR      r3,|L1.12436|
002f88  461a              MOV      r2,r3
002f8a  3208              ADDS     r2,r2,#8
002f8c  4611              MOV      r1,r2
002f8e  3124              ADDS     r1,r1,#0x24
002f90  9000              STR      r0,[sp,#0]
002f92  a067              ADR      r0,|L1.12592|
002f94  f7fffffe          BL       send_GSM
002f98  4604              MOV      r4,r0
002f9a  4621              MOV      r1,r4
002f9c  4854              LDR      r0,|L1.12528|
002f9e  f7fffffe          BL       __2printf
;;;340    
;;;341    msg_sim800(); 
002fa2  f7fffffe          BL       msg_sim800
;;;342    
;;;343    							
;;;344    							//delay(10);	
;;;345    							printf("%s\n",send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
002fa6  4847              LDR      r0,|L1.12484|
002fa8  6800              LDR      r0,[r0,#0]  ; tmeout
002faa  4b3a              LDR      r3,|L1.12436|
002fac  461a              MOV      r2,r3
002fae  3208              ADDS     r2,r2,#8
002fb0  4611              MOV      r1,r2
002fb2  3124              ADDS     r1,r1,#0x24
002fb4  9000              STR      r0,[sp,#0]
002fb6  a062              ADR      r0,|L1.12608|
002fb8  f7fffffe          BL       send_GSM
002fbc  4604              MOV      r4,r0
002fbe  4621              MOV      r1,r4
002fc0  484b              LDR      r0,|L1.12528|
002fc2  f7fffffe          BL       __2printf
;;;346    														memset(at_,0,100);
002fc6  2164              MOVS     r1,#0x64
002fc8  484d              LDR      r0,|L1.12544|
002fca  f7fffffe          BL       __aeabi_memclr4
;;;347    														memset(num_o,0,15);
002fce  210f              MOVS     r1,#0xf
002fd0  485f              LDR      r0,|L1.12624|
002fd2  f7fffffe          BL       __aeabi_memclr
;;;348    														parse_g(uart_string_gsm, 1, 2, '\"', '\"', num_o);
002fd6  485e              LDR      r0,|L1.12624|
002fd8  2122              MOVS     r1,#0x22
002fda  460b              MOV      r3,r1
002fdc  2202              MOVS     r2,#2
002fde  9100              STR      r1,[sp,#0]
002fe0  9001              STR      r0,[sp,#4]
002fe2  2101              MOVS     r1,#1
002fe4  4829              LDR      r0,|L1.12428|
002fe6  f7fffffe          BL       parse_g
;;;349    														sprintf(at_, "\r\nAT+CSCA=\"%s\"\r\n", num_o);
002fea  4a59              LDR      r2,|L1.12624|
002fec  a159              ADR      r1,|L1.12628|
002fee  4844              LDR      r0,|L1.12544|
002ff0  f7fffffe          BL       __2sprintf
;;;350    														printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));	
002ff4  4833              LDR      r0,|L1.12484|
002ff6  6800              LDR      r0,[r0,#0]  ; tmeout
002ff8  4b26              LDR      r3,|L1.12436|
002ffa  461a              MOV      r2,r3
002ffc  3208              ADDS     r2,r2,#8
002ffe  e0b3              B        |L1.12648|
                  |L1.12288|
                          DCD      stateCount
                  |L1.12292|
                          DCD      0x4004c080
                  |L1.12296|
                          DCD      gu32PortStatus
                  |L1.12300|
                          DCD      ringflag
                  |L1.12304|
                          DCD      0xe000e000
                  |L1.12308|
                          DCD      0x00009c3f
                  |L1.12312|
                          DCD      overhead
                  |L1.12316|
00301c  73797374          DCB      "systick start value: 0x%x\n\r",0
003020  69636b20
003024  73746172
003028  74207661
00302c  6c75653a
003030  20307825
003034  780a0d00
                  |L1.12344|
003038  73797374          DCB      "systick end value: 0x%x\n\r",0
00303c  69636b20
003040  656e6420
003044  76616c75
003048  653a2030
00304c  7825780a
003050  0d00    
003052  00                DCB      0
003053  00                DCB      0
                  |L1.12372|
003054  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
003058  69636b20
00305c  63757272
003060  656e7420
003064  76616c75
003068  65207265
00306c  6164206f
003070  76657268
003074  6561643a
003078  20307825
00307c  780a0d00
                  |L1.12416|
                          DCD      0x00001388
                  |L1.12420|
                          DCD      i
                  |L1.12424|
                          DCD      imei
                  |L1.12428|
                          DCD      uart_string_gsm
                  |L1.12432|
                          DCD      0x000f423f
                  |L1.12436|
                          DCD      ||.text||+0x464
                  |L1.12440|
003098  4f4b00            DCB      "OK",0
00309b  00                DCB      0
                  |L1.12444|
00309c  0d0a4154          DCB      "\r\nAT+CIND?\r\n",0
0030a0  2b43494e
0030a4  443f0d0a
0030a8  00      
0030a9  00                DCB      0
0030aa  00                DCB      0
0030ab  00                DCB      0
                  |L1.12460|
0030ac  0a092564          DCB      "\n\t%d\n\t%d\n\t%d\n\t%d\n",0
0030b0  0a092564
0030b4  0a092564
0030b8  0a092564
0030bc  0a00    
0030be  00                DCB      0
0030bf  00                DCB      0
                  |L1.12480|
                          DCD      0x400ff100
                  |L1.12484|
                          DCD      tmeout
                  |L1.12488|
0030c8  434c4f53          DCB      "CLOSE OK\r\n",0
0030cc  45204f4b
0030d0  0d0a00  
0030d3  00                DCB      0
                  |L1.12500|
0030d4  0d0a4154          DCB      "\r\nAT+CIPCLOSE\r\n",0
0030d8  2b434950
0030dc  434c4f53
0030e0  450d0a00
                  |L1.12516|
0030e4  0a0a4154          DCB      "\n\nAT+GSN\r\n",0
0030e8  2b47534e
0030ec  0d0a00  
0030ef  00                DCB      0
                  |L1.12528|
                          DCD      ||.text||+0x275c
                  |L1.12532|
0030f4  0a257309          DCB      "\n%s\t->\t%d\n",0
0030f8  2d3e0925
0030fc  640a00  
0030ff  00                DCB      0
                  |L1.12544|
                          DCD      at_
                  |L1.12548|
                          DCD      port
                  |L1.12552|
                          DCD      ||ip||
                  |L1.12556|
                          DCD      ||.text||+0x21e0
                  |L1.12560|
                          DCD      data
                  |L1.12564|
003114  0a25640a          DCB      "\n%d\n",0
003118  00      
003119  00                DCB      0
00311a  00                DCB      0
00311b  00                DCB      0
                  |L1.12572|
00311c  434f4e4e          DCB      "CONNECT FAIL",0
003120  45435420
003124  4641494c
003128  00      
003129  00                DCB      0
00312a  00                DCB      0
00312b  00                DCB      0
                  |L1.12588|
00312c  3e00              DCB      ">",0
00312e  00                DCB      0
00312f  00                DCB      0
                  |L1.12592|
003130  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
003134  2b434d47
003138  463d310a
00313c  0a00    
00313e  00                DCB      0
00313f  00                DCB      0
                  |L1.12608|
003140  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
003144  2b435343
003148  413f0d0a
00314c  00      
00314d  00                DCB      0
00314e  00                DCB      0
00314f  00                DCB      0
                  |L1.12624|
                          DCD      num_o
                  |L1.12628|
003154  0d0a4154          DCB      "\r\nAT+CSCA=""%s""\r\n",0
003158  2b435343
00315c  413d2225
003160  73220d0a
003164  00      
003165  00                DCB      0
003166  00                DCB      0
003167  00                DCB      0
                  |L1.12648|
003168  4611              MOV      r1,r2
00316a  3124              ADDS     r1,r1,#0x24
00316c  9000              STR      r0,[sp,#0]
00316e  48fe              LDR      r0,|L1.13672|
003170  f7fffffe          BL       send_GSM
003174  4604              MOV      r4,r0
003176  4621              MOV      r1,r4
003178  48fc              LDR      r0,|L1.13676|
00317a  f7fffffe          BL       __2printf
;;;351    														
;;;352    							//msg_sim800(); 
;;;353    
;;;354    							if(motion_samples >= 20)
00317e  48fc              LDR      r0,|L1.13680|
003180  6800              LDR      r0,[r0,#0]  ; motion_samples
003182  2814              CMP      r0,#0x14
003184  db04              BLT      |L1.12688|
;;;355    								{
;;;356    									//vehicle not in motion
;;;357    									gsm_gps_sleep();
003186  f7fffffe          BL       gsm_gps_sleep
;;;358    									motion_samples = 0;
00318a  2000              MOVS     r0,#0
00318c  49f8              LDR      r1,|L1.13680|
00318e  6008              STR      r0,[r1,#0]  ; motion_samples
                  |L1.12688|
;;;359    									
;;;360    								}
;;;361    							
;;;362    								
;;;363    msg_sim800(); 
003190  f7fffffe          BL       msg_sim800
;;;364    
;;;365    
;;;366    								GPS_COLLECT();//accel_read();detect_motion();
003194  f7fffffe          BL       GPS_COLLECT
;;;367    
;;;368    
;;;369    msg_sim800(); 
003198  f7fffffe          BL       msg_sim800
;;;370    
;;;371    								
;;;372    }
00319c  bd1c              POP      {r2-r4,pc}
;;;373    
                          ENDP

                  auto_caliberate_accelerometer PROC
;;;597    
;;;598    void auto_caliberate_accelerometer()
00319e  b510              PUSH     {r4,lr}
;;;599    {
;;;600    accel_read();
0031a0  f7fffffe          BL       accel_read
;;;601    offxy= -xy_angle;
0031a4  48f3              LDR      r0,|L1.13684|
0031a6  6800              LDR      r0,[r0,#0]  ; xy_angle
0031a8  4240              RSBS     r0,r0,#0
0031aa  49f3              LDR      r1,|L1.13688|
0031ac  6008              STR      r0,[r1,#0]  ; offxy
;;;602    offxz= -xz_angle;
0031ae  48f3              LDR      r0,|L1.13692|
0031b0  6800              LDR      r0,[r0,#0]  ; xz_angle
0031b2  4240              RSBS     r0,r0,#0
0031b4  49f2              LDR      r1,|L1.13696|
0031b6  6008              STR      r0,[r1,#0]  ; offxz
;;;603    offyz= -yz_angle;
0031b8  48f2              LDR      r0,|L1.13700|
0031ba  6800              LDR      r0,[r0,#0]  ; yz_angle
0031bc  4240              RSBS     r0,r0,#0
0031be  49f2              LDR      r1,|L1.13704|
0031c0  6008              STR      r0,[r1,#0]  ; offyz
;;;604    offx=  -resultx;
0031c2  48f2              LDR      r0,|L1.13708|
0031c4  2100              MOVS     r1,#0
0031c6  5e41              LDRSH    r1,[r0,r1]  ; resultx
0031c8  4248              RSBS     r0,r1,#0
0031ca  49f1              LDR      r1,|L1.13712|
0031cc  6008              STR      r0,[r1,#0]  ; offx
;;;605    offy=  -resulty; 
0031ce  48f1              LDR      r0,|L1.13716|
0031d0  2100              MOVS     r1,#0
0031d2  5e41              LDRSH    r1,[r0,r1]  ; resulty
0031d4  4248              RSBS     r0,r1,#0
0031d6  49f0              LDR      r1,|L1.13720|
0031d8  6008              STR      r0,[r1,#0]  ; offy
;;;606    offz=  -resultz; 	
0031da  48f0              LDR      r0,|L1.13724|
0031dc  2100              MOVS     r1,#0
0031de  5e41              LDRSH    r1,[r0,r1]  ; resultz
0031e0  4248              RSBS     r0,r1,#0
0031e2  49ef              LDR      r1,|L1.13728|
0031e4  6008              STR      r0,[r1,#0]  ; offz
;;;607    	
;;;608    }
0031e6  bd10              POP      {r4,pc}
;;;609    	
                          ENDP

                  tcp_initialization2 PROC
;;;523    
;;;524    void tcp_initialization2()
0031e8  b538              PUSH     {r3-r5,lr}
;;;525    {
;;;526    
;;;527    msg_sim800(); 
0031ea  f7fffffe          BL       msg_sim800
;;;528    
;;;529    								//GPS_COLLECT();
;;;530    								printf("\n%s\n",send_GSM("\r\nAT+CIPSHUT\r\n", "SHUT OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));	
0031ee  48ed              LDR      r0,|L1.13732|
0031f0  6800              LDR      r0,[r0,#0]  ; tmeout
0031f2  4bed              LDR      r3,|L1.13736|
0031f4  461a              MOV      r2,r3
0031f6  3208              ADDS     r2,r2,#8
0031f8  49ec              LDR      r1,|L1.13740|
0031fa  9000              STR      r0,[sp,#0]
0031fc  4608              MOV      r0,r1
0031fe  300c              ADDS     r0,r0,#0xc
003200  f7fffffe          BL       send_GSM
003204  4604              MOV      r4,r0
003206  4621              MOV      r1,r4
003208  48e7              LDR      r0,|L1.13736|
00320a  3014              ADDS     r0,r0,#0x14
00320c  f7fffffe          BL       __2printf
;;;531    								//delay(20);		
;;;532    								GPS_COLLECT();
003210  f7fffffe          BL       GPS_COLLECT
;;;533    
;;;534    msg_sim800(); 
003214  f7fffffe          BL       msg_sim800
;;;535    
;;;536    
;;;537    								printf("\n%s\n",send_GSM("\r\nAT+CSTT=\"www\"\r\n", "OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));	
003218  48e2              LDR      r0,|L1.13732|
00321a  6800              LDR      r0,[r0,#0]  ; tmeout
00321c  4be2              LDR      r3,|L1.13736|
00321e  461a              MOV      r2,r3
003220  3208              ADDS     r2,r2,#8
003222  4611              MOV      r1,r2
003224  3124              ADDS     r1,r1,#0x24
003226  9000              STR      r0,[sp,#0]
003228  48e0              LDR      r0,|L1.13740|
00322a  301c              ADDS     r0,r0,#0x1c
00322c  f7fffffe          BL       send_GSM
003230  4604              MOV      r4,r0
003232  4621              MOV      r1,r4
003234  48dc              LDR      r0,|L1.13736|
003236  3014              ADDS     r0,r0,#0x14
003238  f7fffffe          BL       __2printf
;;;538    								//delay(20);
;;;539    								GPS_COLLECT();
00323c  f7fffffe          BL       GPS_COLLECT
;;;540    
;;;541    msg_sim800(); 
003240  f7fffffe          BL       msg_sim800
;;;542    
;;;543    	
;;;544    								printf("\n%s\n",send_GSM("\r\nAT+CIICR\r\r\n", "OK\r\n", "ERROR\r\n" , "ERROR:",tmeout));		
003244  48d7              LDR      r0,|L1.13732|
003246  6800              LDR      r0,[r0,#0]  ; tmeout
003248  4bd7              LDR      r3,|L1.13736|
00324a  461a              MOV      r2,r3
00324c  3208              ADDS     r2,r2,#8
00324e  4611              MOV      r1,r2
003250  3124              ADDS     r1,r1,#0x24
003252  9000              STR      r0,[sp,#0]
003254  48d5              LDR      r0,|L1.13740|
003256  3030              ADDS     r0,r0,#0x30
003258  f7fffffe          BL       send_GSM
00325c  4604              MOV      r4,r0
00325e  4621              MOV      r1,r4
003260  48d1              LDR      r0,|L1.13736|
003262  3014              ADDS     r0,r0,#0x14
003264  f7fffffe          BL       __2printf
;;;545    								//delay(20);
;;;546    								GPS_COLLECT();
003268  f7fffffe          BL       GPS_COLLECT
;;;547    
;;;548    msg_sim800(); 
00326c  f7fffffe          BL       msg_sim800
;;;549    
;;;550    								
;;;551    								clear();send_modem("\nAT+CIFSR\r\r\n");clear();
003270  f7fffffe          BL       clear
003274  48cd              LDR      r0,|L1.13740|
003276  3040              ADDS     r0,r0,#0x40
003278  f7fffffe          BL       send_modem
00327c  f7fffffe          BL       clear
;;;552    								delay(20);
003280  2014              MOVS     r0,#0x14
003282  f7fffffe          BL       delay
;;;553    	
;;;554    
;;;555    msg_sim800(); 
003286  f7fffffe          BL       msg_sim800
;;;556    
;;;557    		
;;;558    								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
00328a  4bc9              LDR      r3,|L1.13744|
00328c  4ac9              LDR      r2,|L1.13748|
00328e  49c7              LDR      r1,|L1.13740|
003290  3158              ADDS     r1,r1,#0x58
003292  48b5              LDR      r0,|L1.13672|
003294  f7fffffe          BL       __2sprintf
;;;559    								printf("\n%s\n",send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR:",tmeout));	
003298  48c2              LDR      r0,|L1.13732|
00329a  6800              LDR      r0,[r0,#0]  ; tmeout
00329c  4bc2              LDR      r3,|L1.13736|
00329e  461a              MOV      r2,r3
0032a0  3208              ADDS     r2,r2,#8
0032a2  49c2              LDR      r1,|L1.13740|
0032a4  317c              ADDS     r1,r1,#0x7c
0032a6  9000              STR      r0,[sp,#0]
0032a8  48af              LDR      r0,|L1.13672|
0032aa  f7fffffe          BL       send_GSM
0032ae  4604              MOV      r4,r0
0032b0  4621              MOV      r1,r4
0032b2  48bd              LDR      r0,|L1.13736|
0032b4  3014              ADDS     r0,r0,#0x14
0032b6  f7fffffe          BL       __2printf
;;;560    								clear();
0032ba  f7fffffe          BL       clear
;;;561    
;;;562    }
0032be  bd38              POP      {r3-r5,pc}
;;;563    
                          ENDP

                  main PROC
;;;84     /********************************************************************/
;;;85     int main (void)
0032c0  b51c              PUSH     {r2-r4,lr}
;;;86     {
;;;87     
;;;88     #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;89     start();
0032c2  f7fffffe          BL       start
;;;90     #endif
;;;91     	
;;;92     
;;;93     	
;;;94     	
;;;95     	systick_init();	
0032c6  f7fffffe          BL       systick_init
;;;96     	LED_init();		//Initialize GPIO for LEDs
0032ca  f7fffffe          BL       LED_init
;;;97     	SW1_init();		//Initialize GPIO for SW1 w/ interrupt	
0032ce  f7fffffe          BL       SW1_init
;;;98     	accel_init();
0032d2  f7fffffe          BL       accel_init
;;;99     	lptmr_init(500, 1);
0032d6  2101              MOVS     r1,#1
0032d8  20ff              MOVS     r0,#0xff
0032da  30f5              ADDS     r0,r0,#0xf5
0032dc  f7fffffe          BL       lptmr_init
;;;100    	
;;;101    
;;;102    //delay(100);
;;;103    	
;;;104    uart_putchar(UART1_BASE_PTR,0x1A);
0032e0  211a              MOVS     r1,#0x1a
0032e2  48b5              LDR      r0,|L1.13752|
0032e4  f7fffffe          BL       uart_putchar
;;;105    uart_putchar(UART1_BASE_PTR,0x1A);	
0032e8  211a              MOVS     r1,#0x1a
0032ea  48b3              LDR      r0,|L1.13752|
0032ec  f7fffffe          BL       uart_putchar
;;;106    
;;;107    
;;;108    do{
0032f0  bf00              NOP      
                  |L1.13042|
;;;109    	
;;;110    		uart_putchar(UART1_BASE_PTR,0x1A);
0032f2  211a              MOVS     r1,#0x1a
0032f4  48b0              LDR      r0,|L1.13752|
0032f6  f7fffffe          BL       uart_putchar
;;;111    		uart_putchar(UART1_BASE_PTR,0xA);
0032fa  210a              MOVS     r1,#0xa
0032fc  48ae              LDR      r0,|L1.13752|
0032fe  f7fffffe          BL       uart_putchar
;;;112    		uart_putchar(UART1_BASE_PTR,0x1A);
003302  211a              MOVS     r1,#0x1a
003304  48ac              LDR      r0,|L1.13752|
003306  f7fffffe          BL       uart_putchar
;;;113    		uart_putchar(UART1_BASE_PTR,0xA);
00330a  210a              MOVS     r1,#0xa
00330c  48aa              LDR      r0,|L1.13752|
00330e  f7fffffe          BL       uart_putchar
;;;114    		uart_putchar(UART1_BASE_PTR,0x1A);		
003312  211a              MOVS     r1,#0x1a
003314  48a8              LDR      r0,|L1.13752|
003316  f7fffffe          BL       uart_putchar
;;;115    	
;;;116    	printf("%s\n",send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));    
00331a  48a2              LDR      r0,|L1.13732|
00331c  6800              LDR      r0,[r0,#0]  ; tmeout
00331e  4ba2              LDR      r3,|L1.13736|
003320  461a              MOV      r2,r3
003322  3208              ADDS     r2,r2,#8
003324  4611              MOV      r1,r2
003326  3124              ADDS     r1,r1,#0x24
003328  9000              STR      r0,[sp,#0]
00332a  a0a4              ADR      r0,|L1.13756|
00332c  f7fffffe          BL       send_GSM
003330  4604              MOV      r4,r0
003332  4621              MOV      r1,r4
003334  488d              LDR      r0,|L1.13676|
003336  f7fffffe          BL       __2printf
;;;117    		//delay(10);
;;;118    
;;;119    }while(!strstr(uart_string_gsm,"OK\r\n"));
00333a  499b              LDR      r1,|L1.13736|
00333c  312c              ADDS     r1,r1,#0x2c
00333e  48a1              LDR      r0,|L1.13764|
003340  f7fffffe          BL       strstr
003344  2800              CMP      r0,#0
003346  d0d4              BEQ      |L1.13042|
;;;120    
;;;121    //bat_cind();
;;;122    //delay(1000);
;;;123    
;;;124    printf("%s\n",send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003348  4896              LDR      r0,|L1.13732|
00334a  6800              LDR      r0,[r0,#0]  ; tmeout
00334c  4b96              LDR      r3,|L1.13736|
00334e  461a              MOV      r2,r3
003350  3208              ADDS     r2,r2,#8
003352  4611              MOV      r1,r2
003354  3124              ADDS     r1,r1,#0x24
003356  9000              STR      r0,[sp,#0]
003358  a09b              ADR      r0,|L1.13768|
00335a  f7fffffe          BL       send_GSM
00335e  4604              MOV      r4,r0
003360  4621              MOV      r1,r4
003362  4882              LDR      r0,|L1.13676|
003364  f7fffffe          BL       __2printf
;;;125    //delay(10);
;;;126    
;;;127    printf("%s\n",send_GSM("\n\nATS0=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout)); 	
003368  488e              LDR      r0,|L1.13732|
00336a  6800              LDR      r0,[r0,#0]  ; tmeout
00336c  4b8e              LDR      r3,|L1.13736|
00336e  461a              MOV      r2,r3
003370  3208              ADDS     r2,r2,#8
003372  4611              MOV      r1,r2
003374  3124              ADDS     r1,r1,#0x24
003376  9000              STR      r0,[sp,#0]
003378  a096              ADR      r0,|L1.13780|
00337a  f7fffffe          BL       send_GSM
00337e  4604              MOV      r4,r0
003380  4621              MOV      r1,r4
003382  487a              LDR      r0,|L1.13676|
003384  f7fffffe          BL       __2printf
;;;128    
;;;129    
;;;130    printf("%s\n",send_GSM("\n\nAT&F\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout)); 	
003388  4886              LDR      r0,|L1.13732|
00338a  6800              LDR      r0,[r0,#0]  ; tmeout
00338c  4b86              LDR      r3,|L1.13736|
00338e  461a              MOV      r2,r3
003390  3208              ADDS     r2,r2,#8
003392  4611              MOV      r1,r2
003394  3124              ADDS     r1,r1,#0x24
003396  9000              STR      r0,[sp,#0]
003398  a091              ADR      r0,|L1.13792|
00339a  f7fffffe          BL       send_GSM
00339e  4604              MOV      r4,r0
0033a0  4621              MOV      r1,r4
0033a2  4872              LDR      r0,|L1.13676|
0033a4  f7fffffe          BL       __2printf
;;;131    
;;;132    
;;;133    printf("%s\n",send_GSM("\n\nAT&D\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout)); 	
0033a8  487e              LDR      r0,|L1.13732|
0033aa  6800              LDR      r0,[r0,#0]  ; tmeout
0033ac  4b7e              LDR      r3,|L1.13736|
0033ae  461a              MOV      r2,r3
0033b0  3208              ADDS     r2,r2,#8
0033b2  4611              MOV      r1,r2
0033b4  3124              ADDS     r1,r1,#0x24
0033b6  9000              STR      r0,[sp,#0]
0033b8  a08c              ADR      r0,|L1.13804|
0033ba  f7fffffe          BL       send_GSM
0033be  4604              MOV      r4,r0
0033c0  4621              MOV      r1,r4
0033c2  486a              LDR      r0,|L1.13676|
0033c4  f7fffffe          BL       __2printf
;;;134    
;;;135    
;;;136    printf("%s\n",send_GSM("\n\nAT+IFC=0,0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
0033c8  4876              LDR      r0,|L1.13732|
0033ca  6800              LDR      r0,[r0,#0]  ; tmeout
0033cc  4b76              LDR      r3,|L1.13736|
0033ce  461a              MOV      r2,r3
0033d0  3208              ADDS     r2,r2,#8
0033d2  4611              MOV      r1,r2
0033d4  3124              ADDS     r1,r1,#0x24
0033d6  9000              STR      r0,[sp,#0]
0033d8  a087              ADR      r0,|L1.13816|
0033da  f7fffffe          BL       send_GSM
0033de  4604              MOV      r4,r0
0033e0  4621              MOV      r1,r4
0033e2  4862              LDR      r0,|L1.13676|
0033e4  f7fffffe          BL       __2printf
;;;137    //delay(10);
;;;138    
;;;139    printf("%s\n",send_GSM("\n\nAT+GSN\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
0033e8  486e              LDR      r0,|L1.13732|
0033ea  6800              LDR      r0,[r0,#0]  ; tmeout
0033ec  4b6e              LDR      r3,|L1.13736|
0033ee  461a              MOV      r2,r3
0033f0  3208              ADDS     r2,r2,#8
0033f2  4611              MOV      r1,r2
0033f4  3124              ADDS     r1,r1,#0x24
0033f6  9000              STR      r0,[sp,#0]
0033f8  4883              LDR      r0,|L1.13832|
0033fa  f7fffffe          BL       send_GSM
0033fe  4604              MOV      r4,r0
003400  4621              MOV      r1,r4
003402  485a              LDR      r0,|L1.13676|
003404  f7fffffe          BL       __2printf
;;;140    get_imei();
003408  f7fffffe          BL       get_imei
;;;141    //delay(10);
;;;142    
;;;143    printf("%s\n",send_GSM("\n\nAT+SD2PCM=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
00340c  4865              LDR      r0,|L1.13732|
00340e  6800              LDR      r0,[r0,#0]  ; tmeout
003410  4b65              LDR      r3,|L1.13736|
003412  461a              MOV      r2,r3
003414  3208              ADDS     r2,r2,#8
003416  4611              MOV      r1,r2
003418  3124              ADDS     r1,r1,#0x24
00341a  9000              STR      r0,[sp,#0]
00341c  a07b              ADR      r0,|L1.13836|
00341e  f7fffffe          BL       send_GSM
003422  4604              MOV      r4,r0
003424  4621              MOV      r1,r4
003426  4851              LDR      r0,|L1.13676|
003428  f7fffffe          BL       __2printf
;;;144    //delay(10);	
;;;145    
;;;146    printf("%s\n",send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
00342c  485d              LDR      r0,|L1.13732|
00342e  6800              LDR      r0,[r0,#0]  ; tmeout
003430  4b5d              LDR      r3,|L1.13736|
003432  461a              MOV      r2,r3
003434  3208              ADDS     r2,r2,#8
003436  4611              MOV      r1,r2
003438  3124              ADDS     r1,r1,#0x24
00343a  9000              STR      r0,[sp,#0]
00343c  a062              ADR      r0,|L1.13768|
00343e  f7fffffe          BL       send_GSM
003442  4604              MOV      r4,r0
003444  4621              MOV      r1,r4
003446  4849              LDR      r0,|L1.13676|
003448  f7fffffe          BL       __2printf
;;;147    //;	
;;;148    
;;;149    printf("%s\n",send_GSM("\n\nAT+IFC=0,0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
00344c  4855              LDR      r0,|L1.13732|
00344e  6800              LDR      r0,[r0,#0]  ; tmeout
003450  4b55              LDR      r3,|L1.13736|
003452  461a              MOV      r2,r3
003454  3208              ADDS     r2,r2,#8
003456  4611              MOV      r1,r2
003458  3124              ADDS     r1,r1,#0x24
00345a  9000              STR      r0,[sp,#0]
00345c  a066              ADR      r0,|L1.13816|
00345e  f7fffffe          BL       send_GSM
003462  4604              MOV      r4,r0
003464  4621              MOV      r1,r4
003466  4841              LDR      r0,|L1.13676|
003468  f7fffffe          BL       __2printf
;;;150    
;;;151    printf("%s\n",send_GSM("\n\nATS0=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
00346c  484d              LDR      r0,|L1.13732|
00346e  6800              LDR      r0,[r0,#0]  ; tmeout
003470  4b4d              LDR      r3,|L1.13736|
003472  461a              MOV      r2,r3
003474  3208              ADDS     r2,r2,#8
003476  4611              MOV      r1,r2
003478  3124              ADDS     r1,r1,#0x24
00347a  9000              STR      r0,[sp,#0]
00347c  a067              ADR      r0,|L1.13852|
00347e  f7fffffe          BL       send_GSM
003482  4604              MOV      r4,r0
003484  4621              MOV      r1,r4
003486  4839              LDR      r0,|L1.13676|
003488  f7fffffe          BL       __2printf
;;;152    
;;;153    
;;;154    
;;;155    //delay(10);
;;;156    
;;;157    //printf("%s\n",send_GSM("\n\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));//del_msg();
;;;158    //delay(10);
;;;159    
;;;160    //printf("%s\n",send_GSM("\n\nAT+CPBW=1,\"100\",129,\"OWNER1\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
;;;161    
;;;162    
;;;163    //printf("%s\n",send_GSM("\n\nAT+CPBW=2,\"100\",129,\"OWNER2\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
;;;164    
;;;165    
;;;166    //printf("%s\n",send_GSM("\n\nAT+CPBW=3,\"100\",129,\"OWNER3\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
;;;167    
;;;168    
;;;169    //printf("%s\n",send_GSM("\n\nAT+CPBW=4,\"100\",129,\"OWNER4\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
;;;170    
;;;171    
;;;172    
;;;173    printf("%s\n",send_GSM("\n\nAT+CPBW=5,\"9873999108\",129,\"OWNER5\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
00348c  4845              LDR      r0,|L1.13732|
00348e  6800              LDR      r0,[r0,#0]  ; tmeout
003490  4b45              LDR      r3,|L1.13736|
003492  461a              MOV      r2,r3
003494  3208              ADDS     r2,r2,#8
003496  4611              MOV      r1,r2
003498  3124              ADDS     r1,r1,#0x24
00349a  9000              STR      r0,[sp,#0]
00349c  a062              ADR      r0,|L1.13864|
00349e  f7fffffe          BL       send_GSM
0034a2  4604              MOV      r4,r0
0034a4  4621              MOV      r1,r4
0034a6  4831              LDR      r0,|L1.13676|
0034a8  f7fffffe          BL       __2printf
;;;174    
;;;175    
;;;176    printf("%s\n",send_GSM("\n\nAT+CPBW=6,\"8287324005\",129,\"OWNER6\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
0034ac  483d              LDR      r0,|L1.13732|
0034ae  6800              LDR      r0,[r0,#0]  ; tmeout
0034b0  4b3d              LDR      r3,|L1.13736|
0034b2  461a              MOV      r2,r3
0034b4  3208              ADDS     r2,r2,#8
0034b6  4611              MOV      r1,r2
0034b8  3124              ADDS     r1,r1,#0x24
0034ba  9000              STR      r0,[sp,#0]
0034bc  a064              ADR      r0,|L1.13904|
0034be  f7fffffe          BL       send_GSM
0034c2  4604              MOV      r4,r0
0034c4  4621              MOV      r1,r4
0034c6  4829              LDR      r0,|L1.13676|
0034c8  f7fffffe          BL       __2printf
;;;177    
;;;178    //printf("%s\n",send_GSM("\n\nAT+CPBW=4,\"8287324005\",129,\"OWNER2\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
;;;179    read_interval();
0034cc  f7fffffe          BL       read_interval
;;;180    printf("%s\n",send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
0034d0  4834              LDR      r0,|L1.13732|
0034d2  6800              LDR      r0,[r0,#0]  ; tmeout
0034d4  4b34              LDR      r3,|L1.13736|
0034d6  461a              MOV      r2,r3
0034d8  3208              ADDS     r2,r2,#8
0034da  4611              MOV      r1,r2
0034dc  3124              ADDS     r1,r1,#0x24
0034de  9000              STR      r0,[sp,#0]
0034e0  4849              LDR      r0,|L1.13832|
0034e2  304c              ADDS     r0,r0,#0x4c
0034e4  f7fffffe          BL       send_GSM
0034e8  4604              MOV      r4,r0
0034ea  4621              MOV      r1,r4
0034ec  481f              LDR      r0,|L1.13676|
0034ee  f7fffffe          BL       __2printf
;;;181    //delay(10);	
;;;182    
;;;183    printf("%s\n",send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
0034f2  482c              LDR      r0,|L1.13732|
0034f4  6800              LDR      r0,[r0,#0]  ; tmeout
0034f6  4b2c              LDR      r3,|L1.13736|
0034f8  461a              MOV      r2,r3
0034fa  3208              ADDS     r2,r2,#8
0034fc  4611              MOV      r1,r2
0034fe  3124              ADDS     r1,r1,#0x24
003500  9000              STR      r0,[sp,#0]
003502  4841              LDR      r0,|L1.13832|
003504  305c              ADDS     r0,r0,#0x5c
003506  f7fffffe          BL       send_GSM
00350a  4604              MOV      r4,r0
00350c  4621              MOV      r1,r4
00350e  4817              LDR      r0,|L1.13676|
003510  f7fffffe          BL       __2printf
;;;184    							memset(at_,0,100);
003514  2164              MOVS     r1,#0x64
003516  4814              LDR      r0,|L1.13672|
003518  f7fffffe          BL       __aeabi_memclr4
;;;185    							memset(num_o,0,15);
00351c  210f              MOVS     r1,#0xf
00351e  4856              LDR      r0,|L1.13944|
003520  f7fffffe          BL       __aeabi_memclr
;;;186    							parse_g(uart_string_gsm, 1, 2, '\"', '\"', num_o);
003524  4854              LDR      r0,|L1.13944|
003526  2122              MOVS     r1,#0x22
003528  460b              MOV      r3,r1
00352a  2202              MOVS     r2,#2
00352c  9100              STR      r1,[sp,#0]
00352e  9001              STR      r0,[sp,#4]
003530  2101              MOVS     r1,#1
003532  4824              LDR      r0,|L1.13764|
003534  f7fffffe          BL       parse_g
;;;187    							sprintf(at_, "\r\nAT+CSCA=\"%s\"\r\n", num_o);
003538  4a4f              LDR      r2,|L1.13944|
00353a  4933              LDR      r1,|L1.13832|
00353c  3170              ADDS     r1,r1,#0x70
00353e  480a              LDR      r0,|L1.13672|
003540  f7fffffe          BL       __2sprintf
;;;188    							printf("%s\n",send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout));
003544  4817              LDR      r0,|L1.13732|
003546  6800              LDR      r0,[r0,#0]  ; tmeout
003548  4b17              LDR      r3,|L1.13736|
00354a  461a              MOV      r2,r3
00354c  3208              ADDS     r2,r2,#8
00354e  4611              MOV      r1,r2
003550  3124              ADDS     r1,r1,#0x24
003552  9000              STR      r0,[sp,#0]
003554  4804              LDR      r0,|L1.13672|
003556  f7fffffe          BL       send_GSM
00355a  4604              MOV      r4,r0
00355c  4621              MOV      r1,r4
00355e  4803              LDR      r0,|L1.13676|
003560  f7fffffe          BL       __2printf
;;;189    delay(10);	
003564  200a              MOVS     r0,#0xa
003566  e089              B        |L1.13948|
                  |L1.13672|
                          DCD      at_
                  |L1.13676|
                          DCD      ||.text||+0x275c
                  |L1.13680|
                          DCD      motion_samples
                  |L1.13684|
                          DCD      xy_angle
                  |L1.13688|
                          DCD      offxy
                  |L1.13692|
                          DCD      xz_angle
                  |L1.13696|
                          DCD      offxz
                  |L1.13700|
                          DCD      yz_angle
                  |L1.13704|
                          DCD      offyz
                  |L1.13708|
                          DCD      resultx
                  |L1.13712|
                          DCD      offx
                  |L1.13716|
                          DCD      resulty
                  |L1.13720|
                          DCD      offy
                  |L1.13724|
                          DCD      resultz
                  |L1.13728|
                          DCD      offz
                  |L1.13732|
                          DCD      tmeout
                  |L1.13736|
                          DCD      ||.text||+0x464
                  |L1.13740|
                          DCD      ||.text||+0x2188
                  |L1.13744|
                          DCD      port
                  |L1.13748|
                          DCD      ||ip||
                  |L1.13752|
                          DCD      0x4006b000
                  |L1.13756|
0035bc  0a0a4154          DCB      "\n\nAT\r\n",0
0035c0  0d0a00  
0035c3  00                DCB      0
                  |L1.13764|
                          DCD      uart_string_gsm
                  |L1.13768|
0035c8  0a0a4154          DCB      "\n\nAT&W\r\n",0
0035cc  26570d0a
0035d0  00      
0035d1  00                DCB      0
0035d2  00                DCB      0
0035d3  00                DCB      0
                  |L1.13780|
0035d4  0a0a4154          DCB      "\n\nATS0=2\r\n",0
0035d8  53303d32
0035dc  0d0a00  
0035df  00                DCB      0
                  |L1.13792|
0035e0  0a0a4154          DCB      "\n\nAT&F\r\n",0
0035e4  26460d0a
0035e8  00      
0035e9  00                DCB      0
0035ea  00                DCB      0
0035eb  00                DCB      0
                  |L1.13804|
0035ec  0a0a4154          DCB      "\n\nAT&D\r\n",0
0035f0  26440d0a
0035f4  00      
0035f5  00                DCB      0
0035f6  00                DCB      0
0035f7  00                DCB      0
                  |L1.13816|
0035f8  0a0a4154          DCB      "\n\nAT+IFC=0,0\r\n",0
0035fc  2b494643
003600  3d302c30
003604  0d0a00  
003607  00                DCB      0
                  |L1.13832|
                          DCD      ||.text||+0x30e4
                  |L1.13836|
00360c  0a0a4154          DCB      "\n\nAT+SD2PCM=0\r\n",0
003610  2b534432
003614  50434d3d
003618  300d0a00
                  |L1.13852|
00361c  0a0a4154          DCB      "\n\nATS0=1\r\n",0
003620  53303d31
003624  0d0a00  
003627  00                DCB      0
                  |L1.13864|
003628  0a0a4154          DCB      "\n\nAT+CPBW=5,""9873999108"",129,""OWNER5""\r\n",0
00362c  2b435042
003630  573d352c
003634  22393837
003638  33393939
00363c  31303822
003640  2c313239
003644  2c224f57
003648  4e455235
00364c  220d0a00
                  |L1.13904|
003650  0a0a4154          DCB      "\n\nAT+CPBW=6,""8287324005"",129,""OWNER6""\r\n",0
003654  2b435042
003658  573d362c
00365c  22383238
003660  37333234
003664  30303522
003668  2c313239
00366c  2c224f57
003670  4e455236
003674  220d0a00
                  |L1.13944|
                          DCD      num_o
                  |L1.13948|
00367c  f7fffffe          BL       delay
;;;190    
;;;191    
;;;192    
;;;193    
;;;194    
;;;195    
;;;196    
;;;197    read_ip_port();
003680  f7fffffe          BL       read_ip_port
;;;198    
;;;199    
;;;200    tcp_initialization2();
003684  f7fffffe          BL       tcp_initialization2
;;;201    
;;;202    //							GPS_COLLECT();		accel_read();detect_motion();
;;;203    
;;;204    //do{
;;;205    //printf("%s\n",send_GPS("\n\nAT+CGPSPWR=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
;;;206    //delay(50);
;;;207    //printf("%s\n",send_GPS("\n\nAT+CGPSOUT=255\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout));
;;;208    //}while(strstr(uart_string_gps,"ERROR"));
;;;209    
;;;210    //delay(50);
;;;211    
;;;212    auto_caliberate_accelerometer();
003688  f7fffffe          BL       auto_caliberate_accelerometer
;;;213    
;;;214    
;;;215    //phonebook_read("5");parse(1,2);
;;;216    	
;;;217    
;;;218    
;;;219    while(1)
00368c  e003              B        |L1.13974|
                  |L1.13966|
;;;220    {
;;;221    		accel_read();
00368e  f7fffffe          BL       accel_read
;;;222    
;;;223    						
;;;224    					
;;;225    						{ // main tcp GPS_COLLECT
;;;226    
;;;227    							loop();
003692  f7fffffe          BL       loop
                  |L1.13974|
003696  e7fa              B        |L1.13966|
;;;228    
;;;229    						}
;;;230    
;;;231    		
;;;232    /******************while end**********************/		
;;;233    	} 
;;;234    /******************main end***********************/
;;;235    }
;;;236    /********************************************************************/
                          ENDP

                  LPTimer_IRQHandler PROC
;;;240    
;;;241    void LPTimer_IRQHandler(void)
003698  b510              PUSH     {r4,lr}
;;;242    {
;;;243      
;;;244    //  printf("\n****LPT ISR entered*****\r\n");
;;;245     stateCount++; 
00369a  480d              LDR      r0,|L1.14032|
00369c  7800              LDRB     r0,[r0,#0]  ; stateCount
00369e  1c40              ADDS     r0,r0,#1
0036a0  490b              LDR      r1,|L1.14032|
0036a2  7008              STRB     r0,[r1,#0]
;;;246    if(stateCount>5){stateCount =0;}
0036a4  4608              MOV      r0,r1
0036a6  7800              LDRB     r0,[r0,#0]  ; stateCount
0036a8  2805              CMP      r0,#5
0036aa  dd01              BLE      |L1.14000|
0036ac  2000              MOVS     r0,#0
0036ae  7008              STRB     r0,[r1,#0]
                  |L1.14000|
;;;247    		LED_state();
0036b0  f7fffffe          BL       LED_state
;;;248    accel_read();
0036b4  f7fffffe          BL       accel_read
;;;249    detect_motion();
0036b8  f7fffffe          BL       detect_motion
;;;250      // enable timer
;;;251      // enable interrupts
;;;252      // clear the flag
;;;253      LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
0036bc  4805              LDR      r0,|L1.14036|
0036be  6800              LDR      r0,[r0,#0]
0036c0  2180              MOVS     r1,#0x80
0036c2  4308              ORRS     r0,r0,r1
0036c4  4903              LDR      r1,|L1.14036|
0036c6  6008              STR      r0,[r1,#0]
;;;254      LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
0036c8  20c1              MOVS     r0,#0xc1
0036ca  6008              STR      r0,[r1,#0]
;;;255    
;;;256    }
0036cc  bd10              POP      {r4,pc}
;;;257    
                          ENDP

0036ce  0000              DCW      0x0000
                  |L1.14032|
                          DCD      stateCount
                  |L1.14036|
                          DCD      0x40040000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        32
                  arr_medianas
                          %        108
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  uart_string_gps
                          %        500
                  data2
                          %        200
                  at_
                          %        100
                  imei
                          %        20
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  sd_data
                          %        1400

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a436f6f          DCB      "\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://"
000004  7264696e
000008  61746573
00000c  203a2025
000010  73204e2c
000014  20257320
000018  450a5370
00001c  65656420
000020  3a202573
000024  206b6d70
000028  680a0a68
00002c  74747073
000030  3a2f2f  
000033  7777772e          DCB      "www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",0
000037  676f6f67
00003b  6c652e63
00003f  6f6d2f73
000043  65617263
000047  683f713d
00004b  25732563
00004f  32432573
000053  2669653d
000057  7574662d
00005b  38266f65
00005f  3d757466
000063  2d380a00
000067  00                DCB      0
000068  0a09092a          DCB      "\n\t\t******************\n\t,\t%d\t,\t%d\t,\t%d\t,\t%d\t"
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a0a092c
000080  09256409
000084  2c092564
000088  092c0925
00008c  64092c09
000090  256409  
000093  2c092564          DCB      ",\t%d\t,\t%d,\t%x,\t%x\n\t\t*******************\n",0
000097  092c0925
00009b  642c0925
00009f  782c0925
0000a3  780a0909
0000a7  2a2a2a2a
0000ab  2a2a2a2a
0000af  2a2a2a2a
0000b3  2a2a2a2a
0000b7  2a2a2a0a
0000bb  00      
0000bc  2a2a2a2a          DCB      "***********************************************\n\n\n%s"
0000c0  2a2a2a2a
0000c4  2a2a2a2a
0000c8  2a2a2a2a
0000cc  2a2a2a2a
0000d0  2a2a2a2a
0000d4  2a2a2a2a
0000d8  2a2a2a2a
0000dc  2a2a2a2a
0000e0  2a2a2a2a
0000e4  2a2a2a2a
0000e8  2a2a2a0a
0000ec  0a0a2573
0000f0  0a2a2a2a          DCB      "\n***********************************************\n",0
0000f4  2a2a2a2a
0000f8  2a2a2a2a
0000fc  2a2a2a2a
000100  2a2a2a2a
000104  2a2a2a2a
000108  2a2a2a2a
00010c  2a2a2a2a
000110  2a2a2a2a
000114  2a2a2a2a
000118  2a2a2a2a
00011c  2a2a2a2a
000120  0a00    
000122  00                DCB      0
000123  00                DCB      0
000124  0a0a0a09          DCB      "\n\n\n\t\t\t****************************\n%s\n%s\n%s\n\n"
000128  09092a2a
00012c  2a2a2a2a
000130  2a2a2a2a
000134  2a2a2a2a
000138  2a2a2a2a
00013c  2a2a2a2a
000140  2a2a2a2a
000144  2a2a0a25
000148  730a2573
00014c  0a25730a
000150  0a      
000151  0909092a          DCB      "\t\t\t*****************************",0
000155  2a2a2a2a
000159  2a2a2a2a
00015d  2a2a2a2a
000161  2a2a2a2a
000165  2a2a2a2a
000169  2a2a2a2a
00016d  2a2a2a2a
000171  00      
000172  00                DCB      0
000173  00                DCB      0
000174  0a0a0a09          DCB      "\n\n\n\t\t\t****************************\n%s\n\n\n\t\t\t"
000178  09092a2a
00017c  2a2a2a2a
000180  2a2a2a2a
000184  2a2a2a2a
000188  2a2a2a2a
00018c  2a2a2a2a
000190  2a2a2a2a
000194  2a2a0a25
000198  730a0a0a
00019c  090909  
00019f  2a2a2a2a          DCB      "*****************************",0
0001a3  2a2a2a2a
0001a7  2a2a2a2a
0001ab  2a2a2a2a
0001af  2a2a2a2a
0001b3  2a2a2a2a
0001b7  2a2a2a2a
0001bb  2a00    

                          AREA ||.data||, DATA, ALIGN=2

                  stateCount
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  pit1_isrv_count
000018  0000              DCB      0x00,0x00
                  base_time125m
00001a  0000              DCB      0x00,0x00
                  ti_task
00001c  0000              DCB      0x00,0x00
                  ti_fall
00001e  0000              DCB      0x00,0x00
                  ti_accel_sampling
000020  0000              DCB      0x00,0x00
                  ti_delay
000022  0000              DCB      0x00,0x00
                  ti_print
000024  0000              DCB      0x00,0x00
                  ti_console
000026  0000              DCB      0x00,0x00
                  ti_led
000028  0000              DCB      0x00,0x00
                  ti_tsi0
00002a  0000              DCB      0x00,0x00
                  ti_tsi1
00002c  0000              DCB      0x00,0x00
                  ti_test_adc
00002e  0000              DCB      0x00,0x00
                  adc_sample
000030  00000000          DCB      0x00,0x00,0x00,0x00
                  X_acc
                          DCD      0x00000000
                  Y_acc
                          DCD      0x00000000
                  Z_acc
                          DCD      0x00000000
                  xy_mag
                          DCD      0x00000000
                  xz_mag
                          DCD      0x00000000
                  yz_mag
                          DCD      0x00000000
                  xy_angle
                          DCD      0x00000000
                  xz_angle
                          DCD      0x00000000
                  yz_angle
                          DCD      0x00000000
                  ||cat||
                          DCD      0x00000000
                  offset
                          DCD      0x00000000
                  fall_input
000060  0000              DCB      0x00,0x00
                  accel_x
000062  0000              DCB      0x00,0x00
                  accel_y
000064  0000              DCB      0x00,0x00
                  accel_z
000066  0000              DCB      0x00,0x00
                  resultx
000068  0000              DCB      0x00,0x00
                  resulty
00006a  0000              DCB      0x00,0x00
                  resultz
00006c  0000              DCB      0x00,0x00
                  aux1
00006e  0000              DCB      0x00,0x00
                  accel_mx
                          DCD      0x00000000
                  accel_my
                          DCD      0x00000000
                  accel_mz
                          DCD      0x00000000
                  magx
                          DCD      0x00000000
                  magy
                          DCD      0x00000000
                  magz
                          DCD      0x00000000
                  temp
                          DCD      0x00000000
                  offxy
                          DCD      0x00000000
                  offxz
                          DCD      0x00000000
                  offyz
                          DCD      0x00000000
                  offx
                          DCD      0x00000000
                  offy
                          DCD      0x00000000
                  offz
                          DCD      0x00000000
                  temp1xy
                          DCD      0x00000000
                  temp1xz
                          DCD      0x00000000
                  temp1yz
                          DCD      0x00000000
                  temp1x
                          DCD      0x00000000
                  temp1y
                          DCD      0x00000000
                  temp1z
                          DCD      0x00000000
                  temp2xy
                          DCD      0x00000000
                  temp2xz
                          DCD      0x00000000
                  temp2yz
                          DCD      0x00000000
                  temp2x
                          DCD      0x00000000
                  temp2y
                          DCD      0x00000000
                  temp2z
                          DCD      0x00000000
                  motion
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  tmeout
                          DCD      0x000493df
                  int_erval
                          DCD      0x00000005
                  ||ip||
0000f0  3130342e          DCB      0x31,0x30,0x34,0x2e
0000f4  3233362e          DCB      0x32,0x33,0x36,0x2e
0000f8  3230332e          DCB      0x32,0x30,0x33,0x2e
0000fc  34000000          DCB      0x34,0x00,0x00,0x00
                  port
000100  35353535          DCB      0x35,0x35,0x35,0x35
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  0000              DCB      0x00,0x00
                  velocity
00010a  0000              DCB      0x00,0x00
00010c  000000            DCB      0x00,0x00,0x00
                  interval
00010f  00                DCB      0x00
                          DCD      0x00000000
                  timeout
                          DCD      0x00000000
                  ||pr||
000118  00000000          DCFS     0x00000000 ; 0
                  ||la||
00011c  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
000134  00                DCB      0x00
                  ringflag
000135  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L18.24|
                  |L18.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L18.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L18.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_8dde92bb____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_vts_ver2_c_8dde92bb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_8dde92bb____REVSH|
#line 144
|__asm___10_vts_ver2_c_8dde92bb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
