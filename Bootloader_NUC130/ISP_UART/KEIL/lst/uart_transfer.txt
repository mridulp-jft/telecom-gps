; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart_transfer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart_transfer.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC100Series\Include -I..\..\..\..\Library\StdDriver\inc -I.\RTE\_ISP_UART -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\NUC100\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ --omf_browse=.\obj\uart_transfer.crf ..\uart_transfer.c]
                          THUMB

                          AREA ||i.PutString||, CODE, READONLY, ALIGN=2

                  PutString PROC
;;;50     extern __align(4) uint8_t response_buff[64];
;;;51     void PutString(void)
000000  4905              LDR      r1,|L1.24|
;;;52     {
;;;53         uint32_t i;
;;;54     
;;;55         for(i = 0; i < MAX_PKT_SIZE; i++) {
;;;56             while ((UART_N->FSR & UART_FSR_TX_FULL_Msk));
;;;57             UART_N->THR = response_buff[i];
000002  4a06              LDR      r2,|L1.28|
000004  2000              MOVS     r0,#0                 ;55
                  |L1.6|
000006  698b              LDR      r3,[r1,#0x18]         ;56
000008  021b              LSLS     r3,r3,#8              ;56
00000a  d4fc              BMI      |L1.6|
00000c  5c13              LDRB     r3,[r2,r0]
00000e  600b              STR      r3,[r1,#0]
000010  1c40              ADDS     r0,r0,#1
000012  2840              CMP      r0,#0x40              ;55
000014  d3f7              BCC      |L1.6|
;;;58         }
;;;59     }
000016  4770              BX       lr
;;;60     
                          ENDP

                  |L1.24|
                          DCD      0x40150000
                  |L1.28|
                          DCD      response_buff

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART1_IRQHandler PROC
;;;31     /*---------------------------------------------------------------------------------------------------------*/
;;;32     void UART_N_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
;;;34         /*----- Determine interrupt source -----*/
;;;35         uint32_t u32IntSrc = UART_N->ISR;
000002  4d0f              LDR      r5,|L2.64|
000004  69ec              LDR      r4,[r5,#0x1c]
;;;36     
;;;37         if(u32IntSrc & 0x11) { //RDA FIFO interrupt & RDA timeout interrupt
000006  2011              MOVS     r0,#0x11
;;;38             while(((UART_N->FSR & UART_FSR_RX_EMPTY_Msk) == 0) && (bufhead < MAX_PKT_SIZE))	//RX fifo not empty
;;;39                 uart_rcvbuf[bufhead++] = UART_N->RBR;
000008  4b0e              LDR      r3,|L2.68|
00000a  4204              TST      r4,r0                 ;37
00000c  d00d              BEQ      |L2.42|
00000e  4e0e              LDR      r6,|L2.72|
                  |L2.16|
000010  69a8              LDR      r0,[r5,#0x18]         ;38
000012  0440              LSLS     r0,r0,#17             ;38
000014  d409              BMI      |L2.42|
000016  7858              LDRB     r0,[r3,#1]            ;38  ; bufhead
000018  2840              CMP      r0,#0x40              ;38
00001a  d206              BCS      |L2.42|
00001c  6829              LDR      r1,[r5,#0]
00001e  7858              LDRB     r0,[r3,#1]  ; bufhead
000020  1832              ADDS     r2,r6,r0
000022  1c40              ADDS     r0,r0,#1
000024  7058              STRB     r0,[r3,#1]
000026  7011              STRB     r1,[r2,#0]
000028  e7f2              B        |L2.16|
                  |L2.42|
;;;40         }
;;;41     
;;;42         if(bufhead == MAX_PKT_SIZE) {
00002a  7859              LDRB     r1,[r3,#1]  ; bufhead
00002c  2000              MOVS     r0,#0
00002e  2940              CMP      r1,#0x40
000030  d003              BEQ      |L2.58|
;;;43             bUartDataReady = TRUE;
;;;44             bufhead = 0;
;;;45         } else if(u32IntSrc & 0x10) {
000032  06e1              LSLS     r1,r4,#27
000034  d500              BPL      |L2.56|
                  |L2.54|
;;;46             bufhead = 0;
000036  7058              STRB     r0,[r3,#1]
                  |L2.56|
;;;47         }
;;;48     }
000038  bd70              POP      {r4-r6,pc}
                  |L2.58|
00003a  2101              MOVS     r1,#1                 ;43
00003c  7019              STRB     r1,[r3,#0]            ;43
00003e  e7fa              B        |L2.54|
;;;49     
                          ENDP

                  |L2.64|
                          DCD      0x40150000
                  |L2.68|
                          DCD      ||.data||
                  |L2.72|
                          DCD      ||.bss||

                          AREA ||i.UART_Init||, CODE, READONLY, ALIGN=2

                  UART_Init PROC
;;;60     
;;;61     void UART_Init()
000000  480b              LDR      r0,|L3.48|
;;;62     {
;;;63         /*---------------------------------------------------------------------------------------------------------*/
;;;64         /* Init UART                                                                                               */
;;;65         /*---------------------------------------------------------------------------------------------------------*/
;;;66     
;;;67     //  UART_N->FUN_SEL = UART_FUNC_SEL_UART;
;;;68         UART_N->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
000002  2103              MOVS     r1,#3
000004  60c1              STR      r1,[r0,#0xc]
;;;69         UART_N->FCR = UART_FCR_RFITL_14BYTES | UART_FCR_RTS_TRI_LEV_14BYTES;
000006  490b              LDR      r1,|L3.52|
000008  6081              STR      r1,[r0,#8]
;;;70     
;;;71         UART_N->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(__HIRC, 115200));
00000a  210a              MOVS     r1,#0xa
00000c  6241              STR      r1,[r0,#0x24]
;;;72     
;;;73     //  UART_N->TOR = (UART_N->TOR & ~UART_TOR_TOIC_Msk)| (0x40);
;;;74         UART_N->TOR = 0x40;
00000e  2140              MOVS     r1,#0x40
000010  6201              STR      r1,[r0,#0x20]
000012  4909              LDR      r1,|L3.56|
000014  680a              LDR      r2,[r1,#0]
000016  23ff              MOVS     r3,#0xff
000018  021b              LSLS     r3,r3,#8
00001a  439a              BICS     r2,r2,r3
00001c  2301              MOVS     r3,#1
00001e  03db              LSLS     r3,r3,#15
000020  431a              ORRS     r2,r2,r3
000022  600a              STR      r2,[r1,#0]
000024  4a05              LDR      r2,|L3.60|
000026  1099              ASRS     r1,r3,#2
000028  6011              STR      r1,[r2,#0]
;;;75     
;;;76         NVIC_SetPriority (UART_N_IRQn, 2);
;;;77         NVIC_EnableIRQ(UART_N_IRQn);
;;;78     
;;;79         UART_N->IER = (UART_IER_TIME_OUT_EN_Msk | UART_IER_TOUT_IEN_Msk | UART_IER_RDA_IEN_Msk);	
00002a  4905              LDR      r1,|L3.64|
00002c  6041              STR      r1,[r0,#4]
;;;80     }
00002e  4770              BX       lr
                          ENDP

                  |L3.48|
                          DCD      0x40150000
                  |L3.52|
                          DCD      0x00030030
                  |L3.56|
                          DCD      0xe000e40c
                  |L3.60|
                          DCD      0xe000e100
                  |L3.64|
                          DCD      0x00000811

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  uart_rcvbuf
                          %        64

                          AREA ||.data||, DATA, ALIGN=0

                  bUartDataReady
000000  00                DCB      0x00
                  bufhead
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\uart_transfer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_uart_transfer_c_92e3c5f3____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_uart_transfer_c_92e3c5f3____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_uart_transfer_c_92e3c5f3____REVSH|
#line 132
|__asm___15_uart_transfer_c_92e3c5f3____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
