; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\isp_user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\isp_user.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC100Series\Include -I..\..\..\..\Library\StdDriver\inc -I.\RTE\_ISP_UART -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\NUC100\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ --omf_browse=.\obj\isp_user.crf ..\ISP_USER.c]
                          THUMB

                          AREA ||i.Checksum||, CODE, READONLY, ALIGN=1

                  Checksum PROC
;;;18     
;;;19     static uint16_t Checksum(unsigned char *buf, int len)
000000  4603              MOV      r3,r0
;;;20     {
000002  b510              PUSH     {r4,lr}
;;;21         int i;
;;;22         uint16_t c;
;;;23     
;;;24         for(c = 0 , i = 0 ; i < len; i++) {
000004  2000              MOVS     r0,#0
000006  4602              MOV      r2,r0
000008  e003              B        |L1.18|
                  |L1.10|
;;;25             c += buf[i];
00000a  5c9c              LDRB     r4,[r3,r2]
00000c  1820              ADDS     r0,r4,r0
00000e  b280              UXTH     r0,r0
000010  1c52              ADDS     r2,r2,#1
                  |L1.18|
000012  428a              CMP      r2,r1                 ;24
000014  dbf9              BLT      |L1.10|
;;;26         }
;;;27     
;;;28         return (c);
;;;29     }
000016  bd10              POP      {r4,pc}
;;;30     
                          ENDP


                          AREA ||i.EraseAP||, CODE, READONLY, ALIGN=1

                  EraseAP PROC
;;;48     //bAprom == TRUE erase all aprom besides data flash
;;;49     void EraseAP(unsigned int addr_start, unsigned int addr_end)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;51         unsigned int eraseLoop = addr_start;
;;;52     
;;;53         for(; eraseLoop < addr_end; eraseLoop += FMC_FLASH_PAGE_SIZE ) {
000006  e005              B        |L2.20|
                  |L2.8|
;;;54             FMC_Erase_User(eraseLoop);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       FMC_Erase_User
00000e  34ff              ADDS     r4,r4,#0xff
000010  34ff              ADDS     r4,r4,#0xff
000012  3402              ADDS     r4,#2
                  |L2.20|
000014  42ac              CMP      r4,r5                 ;53
000016  d3f7              BCC      |L2.8|
;;;55         }
;;;56         return;
;;;57     }
000018  bd70              POP      {r4-r6,pc}
;;;58     
                          ENDP


                          AREA ||i.ParseCmd||, CODE, READONLY, ALIGN=2

                  ParseCmd PROC
;;;76     
;;;77     int ParseCmd(unsigned char *buffer, uint8_t len)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;78     {
000002  b083              SUB      sp,sp,#0xc
;;;79         static uint32_t StartAddress, StartAddress_bak, TotalLen, TotalLen_bak, LastDataLen, g_packno = 1;
;;;80         uint8_t *response;
;;;81         uint16_t lcksum;
;;;82         uint32_t lcmd, srclen, i, regcnf0, security;
;;;83         unsigned char *pSrc;
;;;84         static uint32_t	gcmd;
;;;85     
;;;86         response = response_buff;
;;;87     
;;;88         pSrc = buffer;
;;;89         srclen = len;
;;;90         lcmd = inpw(pSrc);
000004  9f03              LDR      r7,[sp,#0xc]
000006  4d91              LDR      r5,|L3.588|
000008  9e04              LDR      r6,[sp,#0x10]
00000a  683c              LDR      r4,[r7,#0]
;;;91     
;;;92         outpw(response + 4, 0);
00000c  2000              MOVS     r0,#0
00000e  6068              STR      r0,[r5,#4]
;;;93     
;;;94         pSrc += 8;
;;;95         srclen -= 8;
;;;96     
;;;97         ReadData(Config0, Config0 + 8, (uint32_t*)(response + 8));//read config
000010  462a              MOV      r2,r5
000012  3208              ADDS     r2,r2,#8
000014  2003              MOVS     r0,#3
000016  498e              LDR      r1,|L3.592|
000018  0500              LSLS     r0,r0,#20
00001a  3e08              SUBS     r6,r6,#8
00001c  3708              ADDS     r7,r7,#8
00001e  9200              STR      r2,[sp,#0]
000020  f7fffffe          BL       ReadData
;;;98         regcnf0 = *(uint32_t*)(response + 8);
000024  68a8              LDR      r0,[r5,#8]
;;;99         security = regcnf0 & 0x2;
000026  2102              MOVS     r1,#2
000028  9001              STR      r0,[sp,#4]
00002a  4008              ANDS     r0,r0,r1
;;;100    
;;;101    
;;;102        if(lcmd == CMD_SYNC_PACKNO) {
00002c  9002              STR      r0,[sp,#8]
00002e  2ca4              CMP      r4,#0xa4
000030  d01d              BEQ      |L3.110|
;;;103            g_packno = inpw(pSrc);
;;;104        }
;;;105    
;;;106        if((lcmd) && (lcmd!=CMD_RESEND_PACKET))
000032  2c00              CMP      r4,#0
000034  d021              BEQ      |L3.122|
000036  2cff              CMP      r4,#0xff
000038  d074              BEQ      |L3.292|
                  |L3.58|
;;;107            gcmd = lcmd;
00003a  4886              LDR      r0,|L3.596|
;;;108    
;;;109        if(lcmd == CMD_GET_FWVER) {
00003c  2ca6              CMP      r4,#0xa6
00003e  6184              STR      r4,[r0,#0x18]  ; gcmd
000040  d019              BEQ      |L3.118|
;;;110            response[8] = FW_VERSION;//version 2.3
;;;111        } else if(lcmd == CMD_GET_DEVICEID) {
;;;112            outpw(response+8, SYS->PDID);
000042  2005              MOVS     r0,#5
000044  0700              LSLS     r0,r0,#28
000046  2cb1              CMP      r4,#0xb1              ;111
000048  d018              BEQ      |L3.124|
;;;113            goto out;
;;;114        } else if(lcmd == CMD_RUN_APROM || lcmd == CMD_RUN_LDROM || lcmd == CMD_RESET) {
;;;115            outpw(&SYS->RSTSRC, 3);//clear bit
;;;116            /* Set BS */
;;;117            if(lcmd == CMD_RUN_APROM) {
;;;118                i = (FMC->ISPCON & 0xFFFFFFFC);
00004a  4983              LDR      r1,|L3.600|
00004c  2cab              CMP      r4,#0xab              ;114
00004e  d018              BEQ      |L3.130|
000050  2cac              CMP      r4,#0xac              ;114
000052  d016              BEQ      |L3.130|
000054  2cad              CMP      r4,#0xad              ;114
000056  d014              BEQ      |L3.130|
;;;119            } else if(lcmd == CMD_RUN_LDROM) {
;;;120                i = (FMC->ISPCON & 0xFFFFFFFC);
;;;121                i |= 0x00000002;
;;;122            } else {
;;;123                i = (FMC->ISPCON & 0xFFFFFFFE);//ISP disable
;;;124            }
;;;125    
;;;126            outpw(&FMC->ISPCON, i);
;;;127            outpw(&SCB->AIRCR, (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ));
;;;128    
;;;129            /* Trap the CPU */
;;;130            while(1);
;;;131        } else if(lcmd == CMD_CONNECT) {
000058  2cae              CMP      r4,#0xae
00005a  d029              BEQ      |L3.176|
;;;132            g_packno = 1;
;;;133            goto out;
;;;134        } else if(lcmd == CMD_DISCONNECT) {
00005c  2caf              CMP      r4,#0xaf
00005e  d02b              BEQ      |L3.184|
;;;135            return 0;
;;;136        } else if((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_ERASE_ALL)) {
000060  2ca0              CMP      r4,#0xa0
000062  d02c              BEQ      |L3.190|
000064  2ca3              CMP      r4,#0xa3
000066  d02a              BEQ      |L3.190|
;;;137    
;;;138            EraseAP(FMC_APROM_BASE, g_apromSize); // erase APROM // g_dataFlashAddr, g_apromSize
;;;139    
;;;140            if(lcmd == CMD_ERASE_ALL) { //erase APROM + data flash
;;;141                EraseAP(g_dataFlashAddr, g_dataFlashAddr + g_dataFlashSize);
;;;142                *(uint32_t*)(response + 8) = regcnf0|0x02;
;;;143                UpdateConfig((uint32_t*)(response + 8), NULL);
;;;144            }
;;;145            bUpdateApromCmd = TRUE;
;;;146        } else if(lcmd == CMD_GET_FLASHMODE) {
000068  2cca              CMP      r4,#0xca
00006a  d049              BEQ      |L3.256|
00006c  e03f              B        |L3.238|
                  |L3.110|
00006e  6839              LDR      r1,[r7,#0]            ;103
000070  4878              LDR      r0,|L3.596|
000072  6141              STR      r1,[r0,#0x14]         ;103  ; g_packno
000074  e7e1              B        |L3.58|
                  |L3.118|
000076  2031              MOVS     r0,#0x31              ;110
000078  7228              STRB     r0,[r5,#8]            ;110
                  |L3.122|
00007a  e05f              B        |L3.316|
                  |L3.124|
00007c  6800              LDR      r0,[r0,#0]            ;112
00007e  60a8              STR      r0,[r5,#8]            ;112
000080  e0d8              B        |L3.564|
                  |L3.130|
000082  2203              MOVS     r2,#3                 ;115
000084  6042              STR      r2,[r0,#4]            ;115
000086  2cab              CMP      r4,#0xab              ;117
000088  d009              BEQ      |L3.158|
00008a  6808              LDR      r0,[r1,#0]            ;123
00008c  2cac              CMP      r4,#0xac              ;119
00008e  d00a              BEQ      |L3.166|
000090  0840              LSRS     r0,r0,#1              ;123
000092  0040              LSLS     r0,r0,#1              ;123
                  |L3.148|
000094  6008              STR      r0,[r1,#0]            ;126
000096  4972              LDR      r1,|L3.608|
000098  4870              LDR      r0,|L3.604|
00009a  60c8              STR      r0,[r1,#0xc]          ;127
                  |L3.156|
00009c  e7fe              B        |L3.156|
                  |L3.158|
00009e  6808              LDR      r0,[r1,#0]            ;118
0000a0  0880              LSRS     r0,r0,#2              ;118
0000a2  0080              LSLS     r0,r0,#2              ;118
0000a4  e7f6              B        |L3.148|
                  |L3.166|
0000a6  0880              LSRS     r0,r0,#2              ;120
0000a8  0080              LSLS     r0,r0,#2              ;120
0000aa  2202              MOVS     r2,#2                 ;121
0000ac  4310              ORRS     r0,r0,r2              ;121
0000ae  e7f1              B        |L3.148|
                  |L3.176|
0000b0  4968              LDR      r1,|L3.596|
0000b2  2001              MOVS     r0,#1                 ;132
0000b4  6148              STR      r0,[r1,#0x14]         ;133  ; g_packno
0000b6  e0bd              B        |L3.564|
                  |L3.184|
0000b8  2000              MOVS     r0,#0                 ;135
;;;147            //return 1: APROM, 2: LDROM
;;;148            outpw(response+8, (FMC->ISPCON&0x2)? 2 : 1);
;;;149        }
;;;150    
;;;151    
;;;152        if((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_UPDATE_DATAFLASH)) {
;;;153            if(lcmd == CMD_UPDATE_DATAFLASH) {
;;;154                StartAddress = g_dataFlashAddr;
;;;155    
;;;156                if(g_dataFlashSize) { //g_dataFlashAddr
;;;157                    EraseAP(g_dataFlashAddr, g_dataFlashAddr + g_dataFlashSize);
;;;158                } else
;;;159                    goto out;
;;;160            } else {
;;;161                StartAddress = 0;
;;;162            }
;;;163    
;;;164            //StartAddress = inpw(pSrc);
;;;165            TotalLen = inpw(pSrc+4);
;;;166            pSrc += 8;
;;;167            srclen -= 8;
;;;168            StartAddress_bak = StartAddress;
;;;169            TotalLen_bak = TotalLen;
;;;170        } else if(lcmd == CMD_UPDATE_CONFIG) {
;;;171            if((security == 0) && (!bUpdateApromCmd))//security lock
;;;172                goto out;
;;;173    
;;;174            UpdateConfig((uint32_t*)(pSrc), (uint32_t*)(response+8));
;;;175            GetDataFlashInfo(&g_dataFlashAddr, &g_dataFlashSize);
;;;176    
;;;177            goto out;
;;;178        } else if(lcmd == CMD_RESEND_PACKET) { //for APROM&Data flash only
;;;179            StartAddress -= LastDataLen;
;;;180            TotalLen += LastDataLen;
;;;181            if((StartAddress & 0xFFE00) >= Config0)
;;;182                goto out;
;;;183            ReadData(StartAddress & 0xFFE00, StartAddress, (uint32_t*)aprom_buf);
;;;184            FMC_Erase_User(StartAddress & 0xFFE00);
;;;185            WriteData(StartAddress & 0xFFE00, StartAddress, (uint32_t*)aprom_buf);
;;;186            if((StartAddress%FMC_FLASH_PAGE_SIZE) >= (FMC_FLASH_PAGE_SIZE-LastDataLen))
;;;187                FMC_Erase_User((StartAddress & 0xFFE00)+FMC_FLASH_PAGE_SIZE);
;;;188            goto out;
;;;189    
;;;190        }
;;;191    
;;;192        if((gcmd == CMD_UPDATE_APROM) || (gcmd == CMD_UPDATE_DATAFLASH)) {
;;;193            if(TotalLen < srclen) {
;;;194                srclen = TotalLen;//prevent last package from over writing
;;;195            }
;;;196    
;;;197            TotalLen -= srclen;
;;;198    
;;;199            WriteData(StartAddress, StartAddress + srclen, (uint32_t*)pSrc); //WriteData(StartAddress, StartAddress + srclen, (uint32_t*)pSrc);
;;;200            memset(pSrc, 0, srclen);
;;;201    
;;;202            ReadData(StartAddress, StartAddress + srclen, (uint32_t*)pSrc);
;;;203            StartAddress += srclen;
;;;204            LastDataLen =  srclen;
;;;205    
;;;206            if(TotalLen == 0) {
;;;207                lcksum = CalCheckSum(StartAddress_bak, TotalLen_bak);
;;;208                outps(response + 8, lcksum);
;;;209            }
;;;210        }
;;;211    out:
;;;212        lcksum = Checksum(buffer, len);
;;;213        outps(response, lcksum);
;;;214        ++g_packno;
;;;215        outpw(response+4, g_packno);
;;;216        g_packno++;
;;;217    
;;;218    
;;;219        return 0;
;;;220    }
0000ba  b005              ADD      sp,sp,#0x14
0000bc  bdf0              POP      {r4-r7,pc}
                  |L3.190|
0000be  4865              LDR      r0,|L3.596|
0000c0  6a01              LDR      r1,[r0,#0x20]         ;138  ; g_apromSize
0000c2  2000              MOVS     r0,#0                 ;138
0000c4  f7fffffe          BL       EraseAP
0000c8  2ca3              CMP      r4,#0xa3              ;140
0000ca  d10d              BNE      |L3.232|
0000cc  4961              LDR      r1,|L3.596|
0000ce  6a48              LDR      r0,[r1,#0x24]         ;141  ; g_dataFlashAddr
0000d0  6a89              LDR      r1,[r1,#0x28]         ;141  ; g_dataFlashSize
0000d2  1841              ADDS     r1,r0,r1              ;141
0000d4  f7fffffe          BL       EraseAP
0000d8  9801              LDR      r0,[sp,#4]            ;142
0000da  2102              MOVS     r1,#2                 ;142
0000dc  4308              ORRS     r0,r0,r1              ;142
0000de  60a8              STR      r0,[r5,#8]            ;143
0000e0  2100              MOVS     r1,#0                 ;143
0000e2  9800              LDR      r0,[sp,#0]            ;143
0000e4  f7fffffe          BL       UpdateConfig
                  |L3.232|
0000e8  495a              LDR      r1,|L3.596|
0000ea  2001              MOVS     r0,#1                 ;145
0000ec  61c8              STR      r0,[r1,#0x1c]         ;145  ; bUpdateApromCmd
                  |L3.238|
0000ee  2ca0              CMP      r4,#0xa0              ;152
0000f0  d019              BEQ      |L3.294|
0000f2  2cc3              CMP      r4,#0xc3              ;152
0000f4  d00c              BEQ      |L3.272|
0000f6  2ca1              CMP      r4,#0xa1              ;170
0000f8  d027              BEQ      |L3.330|
0000fa  2cff              CMP      r4,#0xff              ;178
0000fc  d034              BEQ      |L3.360|
0000fe  e01d              B        |L3.316|
                  |L3.256|
000100  6808              LDR      r0,[r1,#0]            ;148
000102  0780              LSLS     r0,r0,#30             ;148
000104  d501              BPL      |L3.266|
000106  2002              MOVS     r0,#2                 ;148
000108  e000              B        |L3.268|
                  |L3.266|
00010a  2001              MOVS     r0,#1                 ;148
                  |L3.268|
00010c  60a8              STR      r0,[r5,#8]            ;148
00010e  e015              B        |L3.316|
                  |L3.272|
000110  4950              LDR      r1,|L3.596|
000112  6a48              LDR      r0,[r1,#0x24]         ;154  ; g_dataFlashAddr
000114  6008              STR      r0,[r1,#0]            ;156  ; StartAddress
000116  6a89              LDR      r1,[r1,#0x28]         ;156  ; g_dataFlashSize
000118  2900              CMP      r1,#0                 ;156
00011a  d015              BEQ      |L3.328|
00011c  1841              ADDS     r1,r0,r1              ;157
00011e  f7fffffe          BL       EraseAP
000122  e003              B        |L3.300|
                  |L3.292|
000124  e020              B        |L3.360|
                  |L3.294|
000126  494b              LDR      r1,|L3.596|
000128  2000              MOVS     r0,#0                 ;161
00012a  6008              STR      r0,[r1,#0]            ;161  ; StartAddress
                  |L3.300|
00012c  6878              LDR      r0,[r7,#4]            ;165
00012e  4949              LDR      r1,|L3.596|
000130  3e08              SUBS     r6,r6,#8              ;169
000132  6088              STR      r0,[r1,#8]            ;168  ; TotalLen
000134  680a              LDR      r2,[r1,#0]            ;168  ; StartAddress
000136  604a              STR      r2,[r1,#4]            ;169  ; StartAddress_bak
000138  3708              ADDS     r7,r7,#8              ;169
00013a  60c8              STR      r0,[r1,#0xc]          ;169  ; TotalLen_bak
                  |L3.316|
00013c  4c45              LDR      r4,|L3.596|
00013e  69a0              LDR      r0,[r4,#0x18]         ;192  ; gcmd
000140  28a0              CMP      r0,#0xa0              ;192
000142  d03b              BEQ      |L3.444|
000144  28c3              CMP      r0,#0xc3              ;192
000146  d039              BEQ      |L3.444|
                  |L3.328|
000148  e074              B        |L3.564|
                  |L3.330|
00014a  4942              LDR      r1,|L3.596|
00014c  9802              LDR      r0,[sp,#8]            ;171
00014e  69c9              LDR      r1,[r1,#0x1c]         ;171  ; bUpdateApromCmd
000150  4308              ORRS     r0,r0,r1              ;171
000152  d06f              BEQ      |L3.564|
000154  4638              MOV      r0,r7                 ;174
000156  9900              LDR      r1,[sp,#0]            ;174
000158  f7fffffe          BL       UpdateConfig
00015c  493d              LDR      r1,|L3.596|
00015e  3128              ADDS     r1,r1,#0x28           ;175
000160  1f08              SUBS     r0,r1,#4              ;175
000162  f7fffffe          BL       GetDataFlashInfo
000166  e065              B        |L3.564|
                  |L3.360|
000168  4c3a              LDR      r4,|L3.596|
00016a  4e3e              LDR      r6,|L3.612|
00016c  6821              LDR      r1,[r4,#0]            ;179  ; StartAddress
00016e  6920              LDR      r0,[r4,#0x10]         ;179  ; LastDataLen
000170  1a09              SUBS     r1,r1,r0              ;179
000172  6021              STR      r1,[r4,#0]            ;180  ; StartAddress
000174  68a2              LDR      r2,[r4,#8]            ;180  ; TotalLen
000176  1810              ADDS     r0,r2,r0              ;180
000178  60a0              STR      r0,[r4,#8]            ;183  ; TotalLen
00017a  4a34              LDR      r2,|L3.588|
00017c  4608              MOV      r0,r1                 ;183
00017e  4030              ANDS     r0,r0,r6              ;183
000180  3240              ADDS     r2,r2,#0x40           ;183
000182  f7fffffe          BL       ReadData
000186  6820              LDR      r0,[r4,#0]            ;184  ; StartAddress
000188  4030              ANDS     r0,r0,r6              ;184
00018a  f7fffffe          BL       FMC_Erase_User
00018e  6820              LDR      r0,[r4,#0]            ;185  ; StartAddress
000190  4a2e              LDR      r2,|L3.588|
000192  4601              MOV      r1,r0                 ;185
000194  4030              ANDS     r0,r0,r6              ;185
000196  3240              ADDS     r2,r2,#0x40           ;185
000198  f7fffffe          BL       WriteData
00019c  6820              LDR      r0,[r4,#0]            ;186  ; StartAddress
00019e  2101              MOVS     r1,#1                 ;186
0001a0  6923              LDR      r3,[r4,#0x10]         ;186  ; LastDataLen
0001a2  05c2              LSLS     r2,r0,#23             ;186
0001a4  0249              LSLS     r1,r1,#9              ;186
0001a6  0dd2              LSRS     r2,r2,#23             ;186
0001a8  1ac9              SUBS     r1,r1,r3              ;186
0001aa  428a              CMP      r2,r1                 ;186
0001ac  d342              BCC      |L3.564|
0001ae  4030              ANDS     r0,r0,r6              ;187
0001b0  30ff              ADDS     r0,r0,#0xff           ;187
0001b2  30ff              ADDS     r0,r0,#0xff           ;187
0001b4  3002              ADDS     r0,#2                 ;187
0001b6  f7fffffe          BL       FMC_Erase_User
0001ba  e03b              B        |L3.564|
                  |L3.444|
0001bc  68a0              LDR      r0,[r4,#8]            ;193  ; TotalLen
0001be  42b0              CMP      r0,r6                 ;193
0001c0  d200              BCS      |L3.452|
0001c2  4606              MOV      r6,r0                 ;194
                  |L3.452|
0001c4  1b80              SUBS     r0,r0,r6              ;197
0001c6  60a0              STR      r0,[r4,#8]            ;199  ; TotalLen
0001c8  6820              LDR      r0,[r4,#0]            ;199  ; StartAddress
0001ca  463a              MOV      r2,r7                 ;199
0001cc  1981              ADDS     r1,r0,r6              ;199
0001ce  f7fffffe          BL       WriteData
0001d2  4631              MOV      r1,r6                 ;200
0001d4  4638              MOV      r0,r7                 ;200
0001d6  f7fffffe          BL       __aeabi_memclr
0001da  6820              LDR      r0,[r4,#0]            ;202  ; StartAddress
0001dc  463a              MOV      r2,r7                 ;202
0001de  1981              ADDS     r1,r0,r6              ;202
0001e0  f7fffffe          BL       ReadData
0001e4  6820              LDR      r0,[r4,#0]            ;203  ; StartAddress
0001e6  6126              STR      r6,[r4,#0x10]         ;206  ; LastDataLen
0001e8  1980              ADDS     r0,r0,r6              ;203
0001ea  6020              STR      r0,[r4,#0]            ;206  ; StartAddress
0001ec  68a0              LDR      r0,[r4,#8]            ;206  ; TotalLen
0001ee  2800              CMP      r0,#0                 ;206
0001f0  d120              BNE      |L3.564|
0001f2  6860              LDR      r0,[r4,#4]            ;207  ; StartAddress_bak
0001f4  9000              STR      r0,[sp,#0]            ;207
0001f6  2600              MOVS     r6,#0                 ;207
0001f8  68e7              LDR      r7,[r4,#0xc]          ;207  ; TotalLen_bak
0001fa  4634              MOV      r4,r6                 ;207
0001fc  e017              B        |L3.558|
                  |L3.510|
0001fe  9800              LDR      r0,[sp,#0]            ;207
000200  4a12              LDR      r2,|L3.588|
000202  1900              ADDS     r0,r0,r4              ;207
000204  1dc1              ADDS     r1,r0,#7              ;207
000206  31ff              ADDS     r1,r1,#0xff           ;207
000208  31fa              ADDS     r1,r1,#0xfa           ;207
00020a  3240              ADDS     r2,r2,#0x40           ;207
00020c  f7fffffe          BL       ReadData
000210  2101              MOVS     r1,#1                 ;207
000212  1b38              SUBS     r0,r7,r4              ;207
000214  0249              LSLS     r1,r1,#9              ;207
000216  4288              CMP      r0,r1                 ;207
000218  d200              BCS      |L3.540|
00021a  4601              MOV      r1,r0                 ;207
                  |L3.540|
00021c  480b              LDR      r0,|L3.588|
00021e  3040              ADDS     r0,r0,#0x40           ;207
000220  f7fffffe          BL       Checksum
000224  1980              ADDS     r0,r0,r6              ;207
000226  34ff              ADDS     r4,r4,#0xff           ;207
000228  34ff              ADDS     r4,r4,#0xff           ;207
00022a  b286              UXTH     r6,r0                 ;207
00022c  3402              ADDS     r4,#2                 ;207
                  |L3.558|
00022e  42bc              CMP      r4,r7                 ;207
000230  d3e5              BCC      |L3.510|
000232  812e              STRH     r6,[r5,#8]            ;208
                  |L3.564|
000234  9904              LDR      r1,[sp,#0x10]         ;212
000236  9803              LDR      r0,[sp,#0xc]          ;212
000238  f7fffffe          BL       Checksum
00023c  8028              STRH     r0,[r5,#0]            ;213
00023e  4905              LDR      r1,|L3.596|
000240  6948              LDR      r0,[r1,#0x14]         ;214  ; g_packno
000242  1c40              ADDS     r0,r0,#1              ;214
000244  6068              STR      r0,[r5,#4]            ;215
000246  1c40              ADDS     r0,r0,#1              ;215
000248  6148              STR      r0,[r1,#0x14]         ;219  ; g_packno
00024a  e735              B        |L3.184|
;;;221    
                          ENDP

                  |L3.588|
                          DCD      ||.bss||
                  |L3.592|
                          DCD      0x00300008
                  |L3.596|
                          DCD      ||.data||
                  |L3.600|
                          DCD      0x5000c000
                  |L3.604|
                          DCD      0x05fa0004
                  |L3.608|
                          DCD      0xe000ed00
                  |L3.612|
                          DCD      0x000ffe00

                          AREA ||i.UpdateConfig||, CODE, READONLY, ALIGN=2

                  UpdateConfig PROC
;;;58     
;;;59     void UpdateConfig(unsigned int *data, unsigned int *res)
000000  b5f8              PUSH     {r3-r7,lr}
;;;60     {
;;;61     
;;;62         FMC_ENABLE_CFG_UPDATE();
000002  4e10              LDR      r6,|L4.68|
000004  4605              MOV      r5,r0                 ;60
000006  6830              LDR      r0,[r6,#0]
000008  460c              MOV      r4,r1                 ;60
00000a  2710              MOVS     r7,#0x10
00000c  4338              ORRS     r0,r0,r7
00000e  6030              STR      r0,[r6,#0]
;;;63     
;;;64         FMC_Erase_User(Config0);
000010  01b0              LSLS     r0,r6,#6
000012  f7fffffe          BL       FMC_Erase_User
;;;65     
;;;66         FMC_Write_User(Config0, *data);
000016  01b0              LSLS     r0,r6,#6
000018  6829              LDR      r1,[r5,#0]
00001a  f7fffffe          BL       FMC_Write_User
;;;67         FMC_Write_User(Config1, *(data+1));
00001e  6869              LDR      r1,[r5,#4]
000020  4d09              LDR      r5,|L4.72|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       FMC_Write_User
;;;68     
;;;69         if(res) {
000028  2c00              CMP      r4,#0
00002a  d007              BEQ      |L4.60|
;;;70             FMC_Read_User(Config0, res);
00002c  4621              MOV      r1,r4
00002e  1f28              SUBS     r0,r5,#4
000030  f7fffffe          BL       FMC_Read_User
;;;71             FMC_Read_User(Config1, res+1);
000034  1d21              ADDS     r1,r4,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       FMC_Read_User
                  |L4.60|
;;;72         }
;;;73     
;;;74         FMC_DISABLE_CFG_UPDATE();
00003c  6830              LDR      r0,[r6,#0]
00003e  43b8              BICS     r0,r0,r7
000040  6030              STR      r0,[r6,#0]
;;;75     }
000042  bdf8              POP      {r3-r7,pc}
;;;76     
                          ENDP

                  |L4.68|
                          DCD      0x5000c000
                  |L4.72|
                          DCD      0x00300004

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  response_buff
                          %        64
                  aprom_buf
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  StartAddress
                          DCD      0x00000000
                  StartAddress_bak
                          DCD      0x00000000
                  TotalLen
                          DCD      0x00000000
                  TotalLen_bak
                          DCD      0x00000000
                  LastDataLen
                          DCD      0x00000000
                  g_packno
                          DCD      0x00000001
                  gcmd
                          DCD      0x00000000
                  bUpdateApromCmd
                          DCD      0x00000000
                  g_apromSize
                          DCD      0x00000000
                  g_dataFlashAddr
                          DCD      0x00000000
                  g_dataFlashSize
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\ISP_USER.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_ISP_USER_c_EraseAP____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_ISP_USER_c_EraseAP____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_ISP_USER_c_EraseAP____REVSH|
#line 132
|__asm___10_ISP_USER_c_EraseAP____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
