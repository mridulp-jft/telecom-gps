; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC100Series\Include -I..\..\..\..\Library\StdDriver\inc -I.\RTE\_ISP_UART -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\NUC100\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;18     /*--------------------------------------------------------------------------*/
;;;19     void SYS_Init(void)
000000  481b              LDR      r0,|L1.112|
;;;20     {
;;;21         /*---------------------------------------------------------------------------------------------------------*/
;;;22         /* Init System Clock                                                                                       */
;;;23         /*---------------------------------------------------------------------------------------------------------*/
;;;24     
;;;25         /* Enable Internal RC 22.1184MHz clock */
;;;26         CLK->PWRCON |= (CLK_PWRCON_OSC22M_EN_Msk | CLK_PWRCON_XTL12M_EN_Msk);
000002  6801              LDR      r1,[r0,#0]
000004  2205              MOVS     r2,#5
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
                  |L1.10|
;;;27     
;;;28         /* Waiting for Internal RC clock ready */
;;;29         while(!(CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk));
00000a  68c1              LDR      r1,[r0,#0xc]
00000c  06c9              LSLS     r1,r1,#27
00000e  d5fc              BPL      |L1.10|
;;;30     
;;;31         /* Switch HCLK clock source to Internal RC and HCLK source divide 1 */
;;;32         //CLK->CLKSEL0 &= ~CLK_CLKSEL0_HCLK_S_Msk;
;;;33         //CLK->CLKSEL0 |= CLK_CLKSEL0_HCLK_S_HIRC;
;;;34         CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_HIRC;
000010  6901              LDR      r1,[r0,#0x10]
000012  2207              MOVS     r2,#7
000014  4311              ORRS     r1,r1,r2
000016  6101              STR      r1,[r0,#0x10]
;;;35         CLK->CLKDIV &= ~CLK_CLKDIV_HCLK_N_Msk;
000018  6981              LDR      r1,[r0,#0x18]
00001a  0909              LSRS     r1,r1,#4
00001c  0109              LSLS     r1,r1,#4
00001e  6181              STR      r1,[r0,#0x18]
;;;36         CLK->CLKDIV |= CLK_CLKDIV_HCLK(1);
000020  6981              LDR      r1,[r0,#0x18]
000022  6181              STR      r1,[r0,#0x18]
;;;37     
;;;38         /* Set core clock as PLL_CLOCK from PLL */
;;;39         CLK->PLLCON = PLLCON_SETTING;
000024  4913              LDR      r1,|L1.116|
000026  6201              STR      r1,[r0,#0x20]
                  |L1.40|
;;;40         while(!(CLK->CLKSTATUS & CLK_CLKSTATUS_PLL_STB_Msk));
000028  68c1              LDR      r1,[r0,#0xc]
00002a  0749              LSLS     r1,r1,#29
00002c  d5fc              BPL      |L1.40|
;;;41         //CLK->CLKSEL0 &= (~CLK_CLKSEL0_HCLK_S_Msk);
;;;42         //CLK->CLKSEL0 |= CLK_CLKSEL0_HCLK_S_PLL;
;;;43         CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_PLL;
00002e  6901              LDR      r1,[r0,#0x10]
000030  08c9              LSRS     r1,r1,#3
000032  00c9              LSLS     r1,r1,#3
000034  1c89              ADDS     r1,r1,#2
000036  6101              STR      r1,[r0,#0x10]
;;;44     
;;;45         /* Update System Core Clock */
;;;46         /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;47         //SystemCoreClockUpdate();
;;;48         //PllClock        = PLL_CLOCK;            // PLL
;;;49         //SystemCoreClock = PLL_CLOCK / 1;        // HCLK
;;;50         CyclesPerUs     = PLL_CLOCK / 1000000;  // For SYS_SysTickDelay()
000038  4a0f              LDR      r2,|L1.120|
00003a  2132              MOVS     r1,#0x32
;;;51     
;;;52         /* Enable module clock */
;;;53         CLK->APBCLK |= (CLK_APBCLK_UART1_EN_Msk);
00003c  6011              STR      r1,[r2,#0]  ; CyclesPerUs
00003e  6881              LDR      r1,[r0,#8]
000040  2201              MOVS     r2,#1
000042  0452              LSLS     r2,r2,#17
000044  4311              ORRS     r1,r1,r2
000046  6081              STR      r1,[r0,#8]
;;;54         CLK->AHBCLK |= CLK_AHBCLK_ISP_EN_Msk;	// (1ul << 2)
000048  6841              LDR      r1,[r0,#4]
00004a  2204              MOVS     r2,#4
00004c  4311              ORRS     r1,r1,r2
00004e  6041              STR      r1,[r0,#4]
;;;55     
;;;56         /* Select module clock source */
;;;57         //CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART_S_HIRC, CLK_CLKDIV_UART(1));
;;;58         /* Select UART module clock source */
;;;59         CLK->CLKSEL1 &= ~CLK_CLKSEL1_UART_S_Msk;
000050  6942              LDR      r2,[r0,#0x14]
000052  2103              MOVS     r1,#3
000054  0609              LSLS     r1,r1,#24
000056  438a              BICS     r2,r2,r1
000058  6142              STR      r2,[r0,#0x14]
;;;60         CLK->CLKSEL1 |= CLK_CLKSEL1_UART_S_HIRC;
00005a  6942              LDR      r2,[r0,#0x14]
00005c  430a              ORRS     r2,r2,r1
00005e  6142              STR      r2,[r0,#0x14]
;;;61     
;;;62         //CLK_SetModuleClock(USBD_MODULE, 0, CLK_CLKDIV_USB(1));
;;;63     
;;;64     
;;;65         /*---------------------------------------------------------------------------------------------------------*/
;;;66         /* Init I/O Multi-function                                                                                 */
;;;67         /*---------------------------------------------------------------------------------------------------------*/
;;;68     
;;;69         /* Set GPB multi-function pins for UART1 RXD and TXD */
;;;70         SYS->GPB_MFP |= (SYS_GPB_MFP_PB4_UART1_RXD | SYS_GPB_MFP_PB5_UART1_TXD);
000060  2005              MOVS     r0,#5
000062  0700              LSLS     r0,r0,#28
000064  6b41              LDR      r1,[r0,#0x34]
000066  2230              MOVS     r2,#0x30
000068  4311              ORRS     r1,r1,r2
00006a  6341              STR      r1,[r0,#0x34]
;;;71     }
00006c  4770              BX       lr
;;;72     
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      0x50000200
                  |L1.116|
                          DCD      0x00085639
                  |L1.120|
                          DCD      CyclesPerUs

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;75     /*---------------------------------------------------------------------------------------------------------*/
;;;76     int32_t main(void)
000000  2159              MOVS     r1,#0x59
000002  2216              MOVS     r2,#0x16
000004  482f              LDR      r0,|L2.196|
000006  2388              MOVS     r3,#0x88
000008  e002              B        |L2.16|
                  |L2.10|
00000a  6001              STR      r1,[r0,#0]
00000c  6002              STR      r2,[r0,#0]
00000e  6003              STR      r3,[r0,#0]
                  |L2.16|
000010  6804              LDR      r4,[r0,#0]
000012  2c01              CMP      r4,#1
000014  d1f9              BNE      |L2.10|
;;;77     {
;;;78         /* Unlock write-protected registers */
;;;79         SYS_UnlockReg();
;;;80         WDT->WTCR &= ~(WDT_WTCR_WTE_Msk | WDT_WTCR_DBGACK_WDT_Msk);
000016  4d2c              LDR      r5,|L2.200|
000018  6828              LDR      r0,[r5,#0]
00001a  4f2c              LDR      r7,|L2.204|
00001c  4038              ANDS     r0,r0,r7
00001e  6028              STR      r0,[r5,#0]
;;;81         WDT->WTCR |= (WDT_TIMEOUT_2POW18 | WDT_WTCR_WTR_Msk);
000020  6828              LDR      r0,[r5,#0]
000022  492b              LDR      r1,|L2.208|
000024  4308              ORRS     r0,r0,r1
000026  6028              STR      r0,[r5,#0]
;;;82         /* Init system and multi-funcition I/O */
;;;83         SYS_Init();
000028  f7fffffe          BL       SYS_Init
;;;84     
;;;85         UART_Init();
00002c  f7fffffe          BL       UART_Init
;;;86     
;;;87         FMC->ISPCON |= FMC_ISPCON_ISPEN_Msk;	// (1ul << 0)
000030  4e28              LDR      r6,|L2.212|
000032  6830              LDR      r0,[r6,#0]
000034  2101              MOVS     r1,#1
000036  4308              ORRS     r0,r0,r1
000038  6030              STR      r0,[r6,#0]
;;;88     
;;;89         g_apromSize = GetApromSize();
00003a  f7fffffe          BL       GetApromSize
00003e  4926              LDR      r1,|L2.216|
;;;90         GetDataFlashInfo(&g_dataFlashAddr , &g_dataFlashSize);
000040  6008              STR      r0,[r1,#0]  ; g_apromSize
000042  4926              LDR      r1,|L2.220|
000044  4826              LDR      r0,|L2.224|
000046  f7fffffe          BL       GetDataFlashInfo
;;;91     
;;;92         SysTick->LOAD = 300000 * CyclesPerUs;
00004a  4826              LDR      r0,|L2.228|
00004c  4926              LDR      r1,|L2.232|
00004e  6800              LDR      r0,[r0,#0]  ; CyclesPerUs
000050  4b26              LDR      r3,|L2.236|
000052  4348              MULS     r0,r1,r0
000054  6158              STR      r0,[r3,#0x14]
;;;93         SysTick->VAL   =  (0x00);
000056  2000              MOVS     r0,#0
000058  6198              STR      r0,[r3,#0x18]
;;;94         SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;//using cpu clock
00005a  6919              LDR      r1,[r3,#0x10]
00005c  2205              MOVS     r2,#5
00005e  4311              ORRS     r1,r1,r2
000060  6119              STR      r1,[r3,#0x10]
;;;95     
;;;96         while(1) {
;;;97             if((bufhead >= 4) || (bUartDataReady == TRUE)) {
000062  4a23              LDR      r2,|L2.240|
000064  4c23              LDR      r4,|L2.244|
                  |L2.102|
000066  7811              LDRB     r1,[r2,#0]  ; bufhead
000068  2904              CMP      r1,#4
00006a  d202              BCS      |L2.114|
00006c  7821              LDRB     r1,[r4,#0]  ; bUartDataReady
00006e  2901              CMP      r1,#1
000070  d105              BNE      |L2.126|
                  |L2.114|
;;;98                 uint32_t lcmd;
;;;99                 lcmd = inpw(uart_rcvbuf);
000072  4921              LDR      r1,|L2.248|
000074  6809              LDR      r1,[r1,#0]  ; uart_rcvbuf
;;;100                if(lcmd == CMD_CONNECT) {
000076  29ae              CMP      r1,#0xae
000078  d010              BEQ      |L2.156|
;;;101                    break;
;;;102                } else {
;;;103                    bUartDataReady = FALSE;
00007a  7020              STRB     r0,[r4,#0]
;;;104                    bufhead = 0;
00007c  7010              STRB     r0,[r2,#0]
                  |L2.126|
;;;105                }
;;;106            }
;;;107    
;;;108            //if((SysTick->CTRL & (1 << 16)) != 0)//timeout, then goto APROM
;;;109            if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
00007e  6919              LDR      r1,[r3,#0x10]
000080  03c9              LSLS     r1,r1,#15
000082  d5f0              BPL      |L2.102|
;;;110                goto _APROM;
;;;111        }
;;;112    
;;;113        while(1) {
;;;114            if (bUartDataReady == TRUE) {
;;;115                WDT->WTCR &= ~(WDT_WTCR_WTE_Msk | WDT_WTCR_DBGACK_WDT_Msk);
;;;116                WDT->WTCR |= (WDT_TIMEOUT_2POW18 | WDT_WTCR_WTR_Msk);
;;;117                bUartDataReady = FALSE;
;;;118                ParseCmd(uart_rcvbuf, 64);
;;;119                PutString();
;;;120            }
;;;121        }
;;;122    
;;;123    _APROM:
;;;124    
;;;125        outpw(&SYS->RSTSRC, 3);//clear bit
000084  2003              MOVS     r0,#3
000086  2105              MOVS     r1,#5
000088  0709              LSLS     r1,r1,#28
00008a  6048              STR      r0,[r1,#4]
;;;126        outpw(&FMC->ISPCON, inpw(&FMC->ISPCON) & 0xFFFFFFFC);
00008c  6830              LDR      r0,[r6,#0]
00008e  0880              LSRS     r0,r0,#2
000090  0080              LSLS     r0,r0,#2
000092  6030              STR      r0,[r6,#0]
;;;127        outpw(&SCB->AIRCR, (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ));
000094  491a              LDR      r1,|L2.256|
000096  4819              LDR      r0,|L2.252|
000098  60c8              STR      r0,[r1,#0xc]
                  |L2.154|
;;;128    
;;;129        /* Trap the CPU */
;;;130        while(1);
00009a  e7fe              B        |L2.154|
                  |L2.156|
00009c  4f0c              LDR      r7,|L2.208|
00009e  4606              MOV      r6,r0
                  |L2.160|
0000a0  7820              LDRB     r0,[r4,#0]            ;114  ; bUartDataReady
0000a2  2801              CMP      r0,#1                 ;114
0000a4  d1fc              BNE      |L2.160|
0000a6  6828              LDR      r0,[r5,#0]            ;115
0000a8  4908              LDR      r1,|L2.204|
0000aa  4008              ANDS     r0,r0,r1              ;115
0000ac  6028              STR      r0,[r5,#0]            ;115
0000ae  6828              LDR      r0,[r5,#0]            ;116
0000b0  4338              ORRS     r0,r0,r7              ;116
0000b2  6028              STR      r0,[r5,#0]            ;116
0000b4  7026              STRB     r6,[r4,#0]            ;117
0000b6  2140              MOVS     r1,#0x40              ;118
0000b8  480f              LDR      r0,|L2.248|
0000ba  f7fffffe          BL       ParseCmd
0000be  f7fffffe          BL       PutString
0000c2  e7ed              B        |L2.160|
;;;131    }
;;;132    
                          ENDP

                  |L2.196|
                          DCD      0x50000100
                  |L2.200|
                          DCD      0x40004000
                  |L2.204|
                          DCD      0x7fffff7f
                  |L2.208|
                          DCD      0x00000701
                  |L2.212|
                          DCD      0x5000c000
                  |L2.216|
                          DCD      g_apromSize
                  |L2.220|
                          DCD      g_dataFlashSize
                  |L2.224|
                          DCD      g_dataFlashAddr
                  |L2.228|
                          DCD      CyclesPerUs
                  |L2.232|
                          DCD      0x000493e0
                  |L2.236|
                          DCD      0xe000e000
                  |L2.240|
                          DCD      bufhead
                  |L2.244|
                          DCD      bUartDataReady
                  |L2.248|
                          DCD      uart_rcvbuf
                  |L2.252|
                          DCD      0x05fa0004
                  |L2.256|
                          DCD      0xe000ed00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 132
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
