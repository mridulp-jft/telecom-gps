; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\keil_mag.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\keil_mag.d --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -IC:\Freescale\kl26_1\FRDM-KL26Z_SC_Rev_1.0\klxx-sc-baremetal\build\keil\KEIL_MAG\RTE -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.5.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\keil_mag.crf ..\..\..\src\projects\KEIL_MAG\KEIL_MAG.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  hal_i2c_init PROC
;;;72     // -------------------------------------------------
;;;73     void hal_i2c_init(I2C_MemMapPtr p)
000000  49fe              LDR      r1,|L1.1020|
;;;74     {
;;;75        // SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
;;;76     
;;;77        SIM_SCGC4 |= SIM_SCGC4_I2C0_MASK;
000002  6b49              LDR      r1,[r1,#0x34]
000004  2240              MOVS     r2,#0x40
000006  4311              ORRS     r1,r1,r2
000008  4afc              LDR      r2,|L1.1020|
00000a  6351              STR      r1,[r2,#0x34]
;;;78         
;;;79           // configure GPIO for I2C function
;;;80         PORTE_PCR24 = PORT_PCR_MUX(5);
00000c  2105              MOVS     r1,#5
00000e  0209              LSLS     r1,r1,#8
000010  4afb              LDR      r2,|L1.1024|
000012  6211              STR      r1,[r2,#0x20]
;;;81         PORTE_PCR25 = PORT_PCR_MUX(5);
000014  6251              STR      r1,[r2,#0x24]
;;;82     
;;;83     
;;;84         
;;;85         p->F  = 0x14; // baudrate
000016  2114              MOVS     r1,#0x14
000018  7041              STRB     r1,[r0,#1]
;;;86         p->C1 = 0x80; // enable IIC
00001a  2180              MOVS     r1,#0x80
00001c  7081              STRB     r1,[r0,#2]
;;;87     }
00001e  4770              BX       lr
;;;88     
                          ENDP

                  hal_dev_mma8451_init PROC
;;;10     
;;;11     void hal_dev_mma8451_init(void)
000020  b500              PUSH     {lr}
;;;12     {
;;;13       hal_i2c_init(I2C0_B);
000022  48f8              LDR      r0,|L1.1028|
000024  f7fffffe          BL       hal_i2c_init
;;;14     }
000028  bd00              POP      {pc}
;;;15     
                          ENDP

                  pause PROC
;;;19     // this delay is very important, it may cause w-r operation failure.
;;;20     static void pause(void)
00002a  2000              MOVS     r0,#0
;;;21     {
;;;22         int n;
;;;23         for(n=0; n<40; n++){}
00002c  e000              B        |L1.48|
                  |L1.46|
00002e  1c40              ADDS     r0,r0,#1
                  |L1.48|
000030  2828              CMP      r0,#0x28
000032  dbfc              BLT      |L1.46|
;;;24            // asm("nop");
;;;25     }
000034  4770              BX       lr
;;;26     uint32 hal_dev_mma8451_read_reg(uint8 addr)
                          ENDP

                  i2c_read_byte PROC
;;;41     }
;;;42     uint8 i2c_read_byte(I2C_MemMapPtr p)
000036  4601              MOV      r1,r0
;;;43     {
;;;44         return p->D;
000038  7908              LDRB     r0,[r1,#4]
;;;45     }
00003a  4770              BX       lr
;;;46     void i2c_start(I2C_MemMapPtr p)
                          ENDP

                  i2c_set_rx_mode PROC
;;;9      }
;;;10     void i2c_set_rx_mode(I2C_MemMapPtr p)
00003c  7881              LDRB     r1,[r0,#2]
;;;11     {
;;;12         p->C1 &= ~I2C_C1_TX_MASK;
00003e  2210              MOVS     r2,#0x10
000040  4391              BICS     r1,r1,r2
000042  7081              STRB     r1,[r0,#2]
;;;13     }
000044  4770              BX       lr
;;;14     
                          ENDP

                  i2c_set_slave_mode PROC
;;;15     void i2c_set_slave_mode(I2C_MemMapPtr p)
000046  7881              LDRB     r1,[r0,#2]
;;;16     {
;;;17         p->C1  &= ~I2C_C1_MST_MASK;
000048  2220              MOVS     r2,#0x20
00004a  4391              BICS     r1,r1,r2
00004c  7081              STRB     r1,[r0,#2]
;;;18     }
00004e  4770              BX       lr
;;;19     void i2c_set_master_mode(I2C_MemMapPtr p)
                          ENDP

                  i2c_stop PROC
;;;50     }
;;;51     void i2c_stop(I2C_MemMapPtr p)
000050  b500              PUSH     {lr}
;;;52     {
000052  4603              MOV      r3,r0
;;;53         i2c_set_slave_mode(p);
000054  4618              MOV      r0,r3
000056  f7fffffe          BL       i2c_set_slave_mode
;;;54         i2c_set_rx_mode(p);
00005a  4618              MOV      r0,r3
00005c  f7fffffe          BL       i2c_set_rx_mode
;;;55     }
000060  bd00              POP      {pc}
;;;56     void i2c_wait(I2C_MemMapPtr p)
                          ENDP

                  i2c_wait PROC
000062  bf00              NOP      
                  |L1.100|
;;;57     {
;;;58         // wait flag
;;;59         while((p->S & I2C_S_IICIF_MASK)==0)
000064  78c1              LDRB     r1,[r0,#3]
000066  2202              MOVS     r2,#2
000068  4011              ANDS     r1,r1,r2
00006a  2900              CMP      r1,#0
00006c  d0fa              BEQ      |L1.100|
;;;60             ;
;;;61         // clear flag
;;;62         p->S |= I2C_S_IICIF_MASK;
00006e  78c1              LDRB     r1,[r0,#3]
000070  4311              ORRS     r1,r1,r2
000072  70c1              STRB     r1,[r0,#3]
;;;63     }
000074  4770              BX       lr
;;;64     uint16 i2c_get_ack(I2C_MemMapPtr p)
                          ENDP

                  i2c_give_nack PROC
;;;25     
;;;26     void i2c_give_nack(I2C_MemMapPtr p)
000076  7881              LDRB     r1,[r0,#2]
;;;27     {
;;;28         p->C1 |= I2C_C1_TXAK_MASK;
000078  2208              MOVS     r2,#8
00007a  4311              ORRS     r1,r1,r2
00007c  7081              STRB     r1,[r0,#2]
;;;29     }
00007e  4770              BX       lr
;;;30     void i2c_give_ack(I2C_MemMapPtr p)
                          ENDP

                  i2c_get_ack PROC
;;;63     }
;;;64     uint16 i2c_get_ack(I2C_MemMapPtr p)
000080  4601              MOV      r1,r0
;;;65     {
;;;66         if((p->S & I2C_S_RXAK_MASK) == 0)
000082  78c8              LDRB     r0,[r1,#3]
000084  07c0              LSLS     r0,r0,#31
000086  0fc0              LSRS     r0,r0,#31
000088  2800              CMP      r0,#0
00008a  d101              BNE      |L1.144|
;;;67             return TRUE;
00008c  2001              MOVS     r0,#1
                  |L1.142|
;;;68         else
;;;69             return FALSE;
;;;70     }
00008e  4770              BX       lr
                  |L1.144|
000090  2000              MOVS     r0,#0                 ;69
000092  e7fc              B        |L1.142|
;;;71     
                          ENDP

                  i2c_write_byte PROC
;;;37     }
;;;38     void i2c_write_byte(I2C_MemMapPtr p, uint8 data)
000094  7101              STRB     r1,[r0,#4]
;;;39     {
;;;40         p->D = data;
;;;41     }
000096  4770              BX       lr
;;;42     uint8 i2c_read_byte(I2C_MemMapPtr p)
                          ENDP

                  i2c_repeated_start PROC
;;;33     }
;;;34     void i2c_repeated_start(I2C_MemMapPtr p)
000098  7881              LDRB     r1,[r0,#2]
;;;35     {
;;;36         p->C1     |= 0x04;
00009a  2204              MOVS     r2,#4
00009c  4311              ORRS     r1,r1,r2
00009e  7081              STRB     r1,[r0,#2]
;;;37     }
0000a0  4770              BX       lr
;;;38     void i2c_write_byte(I2C_MemMapPtr p, uint8 data)
                          ENDP

                  i2c_set_tx_mode PROC
;;;4      
;;;5      void i2c_set_tx_mode(I2C_MemMapPtr p)
0000a2  7881              LDRB     r1,[r0,#2]
;;;6      {
;;;7          p->C1 |= I2C_C1_TX_MASK;
0000a4  2210              MOVS     r2,#0x10
0000a6  4311              ORRS     r1,r1,r2
0000a8  7081              STRB     r1,[r0,#2]
;;;8      
;;;9      }
0000aa  4770              BX       lr
;;;10     void i2c_set_rx_mode(I2C_MemMapPtr p)
                          ENDP

                  i2c_set_master_mode PROC
;;;18     }
;;;19     void i2c_set_master_mode(I2C_MemMapPtr p)
0000ac  7881              LDRB     r1,[r0,#2]
;;;20     {
;;;21         p->C1  |=  I2C_C1_MST_MASK;
0000ae  2220              MOVS     r2,#0x20
0000b0  4311              ORRS     r1,r1,r2
0000b2  7081              STRB     r1,[r0,#2]
;;;22     }
0000b4  4770              BX       lr
;;;23     
                          ENDP

                  i2c_start PROC
;;;45     }
;;;46     void i2c_start(I2C_MemMapPtr p)
0000b6  b500              PUSH     {lr}
;;;47     {
0000b8  4603              MOV      r3,r0
;;;48         i2c_set_master_mode(p);
0000ba  4618              MOV      r0,r3
0000bc  f7fffffe          BL       i2c_set_master_mode
;;;49         i2c_set_tx_mode(p);
0000c0  4618              MOV      r0,r3
0000c2  f7fffffe          BL       i2c_set_tx_mode
;;;50     }
0000c6  bd00              POP      {pc}
;;;51     void i2c_stop(I2C_MemMapPtr p)
                          ENDP

                  hal_dev_mma8451_read_reg PROC
;;;25     }
;;;26     uint32 hal_dev_mma8451_read_reg(uint8 addr)
0000c8  b570              PUSH     {r4-r6,lr}
;;;27     {
0000ca  4604              MOV      r4,r0
;;;28         uint8 result;
;;;29     
;;;30         i2c_start(I2C0_B);
0000cc  48cd              LDR      r0,|L1.1028|
0000ce  f7fffffe          BL       i2c_start
;;;31         i2c_write_byte(I2C0_B, MMA8451_I2C_ADDRESS | I2C_WRITE);
0000d2  213a              MOVS     r1,#0x3a
0000d4  48cb              LDR      r0,|L1.1028|
0000d6  f7fffffe          BL       i2c_write_byte
;;;32         
;;;33         i2c_wait(I2C0_B);
0000da  48ca              LDR      r0,|L1.1028|
0000dc  f7fffffe          BL       i2c_wait
;;;34         i2c_get_ack(I2C0_B);
0000e0  48c8              LDR      r0,|L1.1028|
0000e2  f7fffffe          BL       i2c_get_ack
;;;35     
;;;36         i2c_write_byte(I2C0_B, addr);
0000e6  4621              MOV      r1,r4
0000e8  48c6              LDR      r0,|L1.1028|
0000ea  f7fffffe          BL       i2c_write_byte
;;;37         i2c_wait(I2C0_B);
0000ee  48c5              LDR      r0,|L1.1028|
0000f0  f7fffffe          BL       i2c_wait
;;;38         i2c_get_ack(I2C0_B);
0000f4  48c3              LDR      r0,|L1.1028|
0000f6  f7fffffe          BL       i2c_get_ack
;;;39     
;;;40         i2c_repeated_start(I2C0_B);
0000fa  48c2              LDR      r0,|L1.1028|
0000fc  f7fffffe          BL       i2c_repeated_start
;;;41         i2c_write_byte(I2C0_B, MMA8451_I2C_ADDRESS | I2C_READ);
000100  213b              MOVS     r1,#0x3b
000102  48c0              LDR      r0,|L1.1028|
000104  f7fffffe          BL       i2c_write_byte
;;;42         i2c_wait(I2C0_B);
000108  48be              LDR      r0,|L1.1028|
00010a  f7fffffe          BL       i2c_wait
;;;43         i2c_get_ack(I2C0_B);
00010e  48bd              LDR      r0,|L1.1028|
000110  f7fffffe          BL       i2c_get_ack
;;;44     
;;;45         i2c_set_rx_mode(I2C0_B);
000114  48bb              LDR      r0,|L1.1028|
000116  f7fffffe          BL       i2c_set_rx_mode
;;;46     
;;;47         i2c_give_nack(I2C0_B);
00011a  48ba              LDR      r0,|L1.1028|
00011c  f7fffffe          BL       i2c_give_nack
;;;48         result = i2c_read_byte(I2C0_B);
000120  48b8              LDR      r0,|L1.1028|
000122  f7fffffe          BL       i2c_read_byte
000126  4605              MOV      r5,r0
;;;49         i2c_wait(I2C0_B);
000128  48b6              LDR      r0,|L1.1028|
00012a  f7fffffe          BL       i2c_wait
;;;50     
;;;51         i2c_stop(I2C0_B);
00012e  48b5              LDR      r0,|L1.1028|
000130  f7fffffe          BL       i2c_stop
;;;52         result = i2c_read_byte(I2C0_B);
000134  48b3              LDR      r0,|L1.1028|
000136  f7fffffe          BL       i2c_read_byte
00013a  4605              MOV      r5,r0
;;;53         pause();
00013c  f7fffffe          BL       pause
;;;54         return result;
000140  4628              MOV      r0,r5
;;;55     }
000142  bd70              POP      {r4-r6,pc}
;;;56     void hal_dev_mma8451_write_reg(uint8 addr, uint8 data)
                          ENDP

                  hal_dev_mma8451_write_reg PROC
000144  b570              PUSH     {r4-r6,lr}
;;;57     {
000146  4604              MOV      r4,r0
000148  460d              MOV      r5,r1
;;;58         i2c_start(I2C0_B);
00014a  48ae              LDR      r0,|L1.1028|
00014c  f7fffffe          BL       i2c_start
;;;59     
;;;60         i2c_write_byte(I2C0_B, MMA8451_I2C_ADDRESS|I2C_WRITE);
000150  213a              MOVS     r1,#0x3a
000152  48ac              LDR      r0,|L1.1028|
000154  f7fffffe          BL       i2c_write_byte
;;;61         i2c_wait(I2C0_B);
000158  48aa              LDR      r0,|L1.1028|
00015a  f7fffffe          BL       i2c_wait
;;;62         i2c_get_ack(I2C0_B);
00015e  48a9              LDR      r0,|L1.1028|
000160  f7fffffe          BL       i2c_get_ack
;;;63     
;;;64         i2c_write_byte(I2C0_B, addr);
000164  4621              MOV      r1,r4
000166  48a7              LDR      r0,|L1.1028|
000168  f7fffffe          BL       i2c_write_byte
;;;65         i2c_wait(I2C0_B);
00016c  48a5              LDR      r0,|L1.1028|
00016e  f7fffffe          BL       i2c_wait
;;;66         i2c_get_ack(I2C0_B);
000172  48a4              LDR      r0,|L1.1028|
000174  f7fffffe          BL       i2c_get_ack
;;;67     
;;;68         i2c_write_byte(I2C0_B, data);
000178  4629              MOV      r1,r5
00017a  48a2              LDR      r0,|L1.1028|
00017c  f7fffffe          BL       i2c_write_byte
;;;69         i2c_wait(I2C0_B);
000180  48a0              LDR      r0,|L1.1028|
000182  f7fffffe          BL       i2c_wait
;;;70         i2c_get_ack(I2C0_B);
000186  489f              LDR      r0,|L1.1028|
000188  f7fffffe          BL       i2c_get_ack
;;;71     
;;;72         i2c_stop(I2C0_B);
00018c  489d              LDR      r0,|L1.1028|
00018e  f7fffffe          BL       i2c_stop
;;;73         pause();
000192  f7fffffe          BL       pause
;;;74     }
000196  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP

                  i2c_give_ack PROC
;;;29     }
;;;30     void i2c_give_ack(I2C_MemMapPtr p)
000198  7881              LDRB     r1,[r0,#2]
;;;31     {
;;;32         p->C1 &= ~I2C_C1_TXAK_MASK;
00019a  2208              MOVS     r2,#8
00019c  4391              BICS     r1,r1,r2
00019e  7081              STRB     r1,[r0,#2]
;;;33     }
0001a0  4770              BX       lr
;;;34     void i2c_repeated_start(I2C_MemMapPtr p)
                          ENDP

                  hal_i2c_deinit PROC
;;;88     
;;;89     void hal_i2c_deinit(I2C_MemMapPtr p)
0001a2  2100              MOVS     r1,#0
;;;90     {
;;;91         p->C1 = 0x00;
0001a4  7081              STRB     r1,[r0,#2]
;;;92         
;;;93         SIM_SCGC4 &= ~SIM_SCGC4_I2C1_MASK;
0001a6  4995              LDR      r1,|L1.1020|
0001a8  6b49              LDR      r1,[r1,#0x34]
0001aa  2280              MOVS     r2,#0x80
0001ac  4391              BICS     r1,r1,r2
0001ae  4a93              LDR      r2,|L1.1020|
0001b0  6351              STR      r1,[r2,#0x34]
;;;94     }
0001b2  4770              BX       lr
;;;95     
                          ENDP

                  angle_calculation PROC
;;;70     
;;;71     void angle_calculation(void)
0001b4  b5f8              PUSH     {r3-r7,lr}
;;;72      {
;;;73        signed int nv, x2, y2, z2;
;;;74     
;;;75      /*  if (accel_count != 0) return;
;;;76        accel_count = 60; //60 msec
;;;77        */
;;;78        
;;;79        nv = (signed char)(resultx);
0001b6  4894              LDR      r0,|L1.1032|
0001b8  7800              LDRB     r0,[r0,#0]  ; resultx
0001ba  b247              SXTB     r7,r0
;;;80        X_acc = median(nv, &arr_medianas[0]);
0001bc  4993              LDR      r1,|L1.1036|
0001be  4638              MOV      r0,r7
0001c0  f7fffffe          BL       median
0001c4  4992              LDR      r1,|L1.1040|
0001c6  6008              STR      r0,[r1,#0]  ; X_acc
;;;81        
;;;82        
;;;83        nv = (signed char)(resulty);
0001c8  4892              LDR      r0,|L1.1044|
0001ca  7800              LDRB     r0,[r0,#0]  ; resulty
0001cc  b247              SXTB     r7,r0
;;;84        Y_acc = median(nv, &arr_medianas[1]);
0001ce  498f              LDR      r1,|L1.1036|
0001d0  3124              ADDS     r1,r1,#0x24
0001d2  4638              MOV      r0,r7
0001d4  f7fffffe          BL       median
0001d8  498f              LDR      r1,|L1.1048|
0001da  6008              STR      r0,[r1,#0]  ; Y_acc
;;;85        
;;;86        nv = (signed char)(resultz);  
0001dc  488f              LDR      r0,|L1.1052|
0001de  7800              LDRB     r0,[r0,#0]  ; resultz
0001e0  b247              SXTB     r7,r0
;;;87        Z_acc = median(nv, &arr_medianas[2]);
0001e2  498a              LDR      r1,|L1.1036|
0001e4  3148              ADDS     r1,r1,#0x48
0001e6  4638              MOV      r0,r7
0001e8  f7fffffe          BL       median
0001ec  498c              LDR      r1,|L1.1056|
0001ee  6008              STR      r0,[r1,#0]  ; Z_acc
;;;88     
;;;89        x2        = X_acc*X_acc;
0001f0  4887              LDR      r0,|L1.1040|
0001f2  6800              LDR      r0,[r0,#0]  ; X_acc
0001f4  4340              MULS     r0,r0,r0
0001f6  4605              MOV      r5,r0
;;;90        y2        = Y_acc*Y_acc;
0001f8  4887              LDR      r0,|L1.1048|
0001fa  6800              LDR      r0,[r0,#0]  ; Y_acc
0001fc  4340              MULS     r0,r0,r0
0001fe  4606              MOV      r6,r0
;;;91     
;;;92        xy_mag   = sqrt_16(x2 + y2);
000200  19a8              ADDS     r0,r5,r6
000202  f7fffffe          BL       sqrt_16
000206  4987              LDR      r1,|L1.1060|
000208  6008              STR      r0,[r1,#0]  ; xy_mag
;;;93       
;;;94        if (Y_acc<0) cat = -Y_acc; else cat = Y_acc;
00020a  4883              LDR      r0,|L1.1048|
00020c  6800              LDR      r0,[r0,#0]  ; Y_acc
00020e  2800              CMP      r0,#0
000210  da05              BGE      |L1.542|
000212  4881              LDR      r0,|L1.1048|
000214  6800              LDR      r0,[r0,#0]  ; Y_acc
000216  4240              RSBS     r0,r0,#0
000218  4983              LDR      r1,|L1.1064|
00021a  6008              STR      r0,[r1,#0]  ; cat
00021c  e003              B        |L1.550|
                  |L1.542|
00021e  487e              LDR      r0,|L1.1048|
000220  6800              LDR      r0,[r0,#0]  ; Y_acc
000222  4981              LDR      r1,|L1.1064|
000224  6008              STR      r0,[r1,#0]  ; cat
                  |L1.550|
;;;95        
;;;96        offset = (unsigned int)(cat<<7)/(unsigned int)xy_mag;
000226  4980              LDR      r1,|L1.1064|
000228  6809              LDR      r1,[r1,#0]  ; cat
00022a  01c8              LSLS     r0,r1,#7
00022c  497d              LDR      r1,|L1.1060|
00022e  6809              LDR      r1,[r1,#0]  ; xy_mag
000230  f7fffffe          BL       __aeabi_uidivmod
000234  497d              LDR      r1,|L1.1068|
000236  6008              STR      r0,[r1,#0]  ; offset
;;;97        if (offset>127) offset = 127;    
000238  4608              MOV      r0,r1
00023a  6800              LDR      r0,[r0,#0]  ; offset
00023c  287f              CMP      r0,#0x7f
00023e  d901              BLS      |L1.580|
000240  207f              MOVS     r0,#0x7f
000242  6008              STR      r0,[r1,#0]  ; offset
                  |L1.580|
;;;98        xy_angle = asin[offset];
000244  4879              LDR      r0,|L1.1068|
000246  6800              LDR      r0,[r0,#0]  ; offset
000248  0080              LSLS     r0,r0,#2
00024a  4979              LDR      r1,|L1.1072|
00024c  5808              LDR      r0,[r1,r0]
00024e  4979              LDR      r1,|L1.1076|
000250  6008              STR      r0,[r1,#0]  ; xy_angle
;;;99        
;;;100       if (Y_acc>0)  xy_angle = -xy_angle;
000252  4871              LDR      r0,|L1.1048|
000254  6800              LDR      r0,[r0,#0]  ; Y_acc
000256  2800              CMP      r0,#0
000258  dd03              BLE      |L1.610|
00025a  4608              MOV      r0,r1
00025c  6800              LDR      r0,[r0,#0]  ; xy_angle
00025e  4240              RSBS     r0,r0,#0
000260  6008              STR      r0,[r1,#0]  ; xy_angle
                  |L1.610|
;;;101       
;;;102     
;;;103       /////////   
;;;104       
;;;105       z2        = Z_acc*Z_acc;   
000262  486f              LDR      r0,|L1.1056|
000264  6800              LDR      r0,[r0,#0]  ; Z_acc
000266  4604              MOV      r4,r0
000268  4344              MULS     r4,r0,r4
;;;106       xz_mag    = sqrt_16(x2 + z2);
00026a  1928              ADDS     r0,r5,r4
00026c  f7fffffe          BL       sqrt_16
000270  4971              LDR      r1,|L1.1080|
000272  6008              STR      r0,[r1,#0]  ; xz_mag
;;;107       if (X_acc<0) cat = -X_acc; else cat = X_acc;
000274  4866              LDR      r0,|L1.1040|
000276  6800              LDR      r0,[r0,#0]  ; X_acc
000278  2800              CMP      r0,#0
00027a  da05              BGE      |L1.648|
00027c  4864              LDR      r0,|L1.1040|
00027e  6800              LDR      r0,[r0,#0]  ; X_acc
000280  4240              RSBS     r0,r0,#0
000282  4969              LDR      r1,|L1.1064|
000284  6008              STR      r0,[r1,#0]  ; cat
000286  e003              B        |L1.656|
                  |L1.648|
000288  4861              LDR      r0,|L1.1040|
00028a  6800              LDR      r0,[r0,#0]  ; X_acc
00028c  4966              LDR      r1,|L1.1064|
00028e  6008              STR      r0,[r1,#0]  ; cat
                  |L1.656|
;;;108       offset = (unsigned int)(cat<<7)/(unsigned int)xz_mag;
000290  4965              LDR      r1,|L1.1064|
000292  6809              LDR      r1,[r1,#0]  ; cat
000294  01c8              LSLS     r0,r1,#7
000296  4968              LDR      r1,|L1.1080|
000298  6809              LDR      r1,[r1,#0]  ; xz_mag
00029a  f7fffffe          BL       __aeabi_uidivmod
00029e  4963              LDR      r1,|L1.1068|
0002a0  6008              STR      r0,[r1,#0]  ; offset
;;;109       if (offset>127) offset = 127;    
0002a2  4608              MOV      r0,r1
0002a4  6800              LDR      r0,[r0,#0]  ; offset
0002a6  287f              CMP      r0,#0x7f
0002a8  d901              BLS      |L1.686|
0002aa  207f              MOVS     r0,#0x7f
0002ac  6008              STR      r0,[r1,#0]  ; offset
                  |L1.686|
;;;110       xz_angle = asin[offset];
0002ae  485f              LDR      r0,|L1.1068|
0002b0  6800              LDR      r0,[r0,#0]  ; offset
0002b2  0080              LSLS     r0,r0,#2
0002b4  495e              LDR      r1,|L1.1072|
0002b6  5808              LDR      r0,[r1,r0]
0002b8  4960              LDR      r1,|L1.1084|
0002ba  6008              STR      r0,[r1,#0]  ; xz_angle
;;;111       
;;;112       if (X_acc>0)  xz_angle = -xz_angle;
0002bc  4854              LDR      r0,|L1.1040|
0002be  6800              LDR      r0,[r0,#0]  ; X_acc
0002c0  2800              CMP      r0,#0
0002c2  dd03              BLE      |L1.716|
0002c4  4608              MOV      r0,r1
0002c6  6800              LDR      r0,[r0,#0]  ; xz_angle
0002c8  4240              RSBS     r0,r0,#0
0002ca  6008              STR      r0,[r1,#0]  ; xz_angle
                  |L1.716|
;;;113       
;;;114    
;;;115       yz_mag    = sqrt_16(y2 + z2);
0002cc  1930              ADDS     r0,r6,r4
0002ce  f7fffffe          BL       sqrt_16
0002d2  495b              LDR      r1,|L1.1088|
0002d4  6008              STR      r0,[r1,#0]  ; yz_mag
;;;116       if (Y_acc<0) cat = -Y_acc; else cat = Y_acc;
0002d6  4850              LDR      r0,|L1.1048|
0002d8  6800              LDR      r0,[r0,#0]  ; Y_acc
0002da  2800              CMP      r0,#0
0002dc  da05              BGE      |L1.746|
0002de  484e              LDR      r0,|L1.1048|
0002e0  6800              LDR      r0,[r0,#0]  ; Y_acc
0002e2  4240              RSBS     r0,r0,#0
0002e4  4950              LDR      r1,|L1.1064|
0002e6  6008              STR      r0,[r1,#0]  ; cat
0002e8  e003              B        |L1.754|
                  |L1.746|
0002ea  484b              LDR      r0,|L1.1048|
0002ec  6800              LDR      r0,[r0,#0]  ; Y_acc
0002ee  494e              LDR      r1,|L1.1064|
0002f0  6008              STR      r0,[r1,#0]  ; cat
                  |L1.754|
;;;117       offset = (unsigned int)(cat<<7)/(unsigned int)yz_mag;
0002f2  494d              LDR      r1,|L1.1064|
0002f4  6809              LDR      r1,[r1,#0]  ; cat
0002f6  01c8              LSLS     r0,r1,#7
0002f8  4951              LDR      r1,|L1.1088|
0002fa  6809              LDR      r1,[r1,#0]  ; yz_mag
0002fc  f7fffffe          BL       __aeabi_uidivmod
000300  494a              LDR      r1,|L1.1068|
000302  6008              STR      r0,[r1,#0]  ; offset
;;;118       if (offset>127) offset = 127;    
000304  4608              MOV      r0,r1
000306  6800              LDR      r0,[r0,#0]  ; offset
000308  287f              CMP      r0,#0x7f
00030a  d901              BLS      |L1.784|
00030c  207f              MOVS     r0,#0x7f
00030e  6008              STR      r0,[r1,#0]  ; offset
                  |L1.784|
;;;119       yz_angle = asin[offset];
000310  4846              LDR      r0,|L1.1068|
000312  6800              LDR      r0,[r0,#0]  ; offset
000314  0080              LSLS     r0,r0,#2
000316  4946              LDR      r1,|L1.1072|
000318  5808              LDR      r0,[r1,r0]
00031a  494a              LDR      r1,|L1.1092|
00031c  6008              STR      r0,[r1,#0]  ; yz_angle
;;;120       if (Y_acc>0)  yz_angle = -yz_angle;
00031e  483e              LDR      r0,|L1.1048|
000320  6800              LDR      r0,[r0,#0]  ; Y_acc
000322  2800              CMP      r0,#0
000324  dd03              BLE      |L1.814|
000326  4608              MOV      r0,r1
000328  6800              LDR      r0,[r0,#0]  ; yz_angle
00032a  4240              RSBS     r0,r0,#0
00032c  6008              STR      r0,[r1,#0]  ; yz_angle
                  |L1.814|
;;;121        
;;;122     }
00032e  bdf8              POP      {r3-r7,pc}
;;;123    
                          ENDP

                  detect_fall_detection PROC
;;;126    #define FALL_LIMIT  45//50
;;;127    void detect_fall_detection(void)
000330  483c              LDR      r0,|L1.1060|
;;;128    {
;;;129       if (xy_mag<FALL_LIMIT && xz_mag < FALL_LIMIT && yz_mag < FALL_LIMIT  && !ti_fall) 
000332  6800              LDR      r0,[r0,#0]  ; xy_mag
000334  282d              CMP      r0,#0x2d
000336  d20f              BCS      |L1.856|
000338  483f              LDR      r0,|L1.1080|
00033a  6800              LDR      r0,[r0,#0]  ; xz_mag
00033c  282d              CMP      r0,#0x2d
00033e  d20b              BCS      |L1.856|
000340  483f              LDR      r0,|L1.1088|
000342  6800              LDR      r0,[r0,#0]  ; yz_mag
000344  282d              CMP      r0,#0x2d
000346  d207              BCS      |L1.856|
000348  483f              LDR      r0,|L1.1096|
00034a  8800              LDRH     r0,[r0,#0]  ; ti_fall
00034c  2800              CMP      r0,#0
00034e  d103              BNE      |L1.856|
;;;130        fall_input=1;
000350  2001              MOVS     r0,#1
000352  493e              LDR      r1,|L1.1100|
000354  7008              STRB     r0,[r1,#0]
000356  e005              B        |L1.868|
                  |L1.856|
;;;131       else 
;;;132       {
;;;133         fall_input = 0;
000358  2000              MOVS     r0,#0
00035a  493c              LDR      r1,|L1.1100|
00035c  7008              STRB     r0,[r1,#0]
;;;134         ti_fall = 10;
00035e  200a              MOVS     r0,#0xa
000360  4939              LDR      r1,|L1.1096|
000362  8008              STRH     r0,[r1,#0]
                  |L1.868|
;;;135        }
;;;136       
;;;137    }
000364  4770              BX       lr
;;;11     
                          ENDP

                  accel_init PROC
;;;24     
;;;25     void accel_init(void)
000366  b510              PUSH     {r4,lr}
;;;26     {
;;;27         unsigned char tmp;
;;;28         //printf("****Accelerometor init ****\n");
;;;29         //Configure MMA8451 sensor //MMA8451Q
;;;30         hal_dev_mma8451_init();      //Initialize I2C modules
000368  f7fffffe          BL       hal_dev_mma8451_init
;;;31         tmp = hal_dev_mma8451_read_reg(0x2a);
00036c  202a              MOVS     r0,#0x2a
00036e  f7fffffe          BL       hal_dev_mma8451_read_reg
000372  b2c4              UXTB     r4,r0
;;;32         hal_dev_mma8451_write_reg(0x2a,tmp&0xFE);
000374  20fe              MOVS     r0,#0xfe
000376  4020              ANDS     r0,r0,r4
000378  4601              MOV      r1,r0
00037a  202a              MOVS     r0,#0x2a
00037c  f7fffffe          BL       hal_dev_mma8451_write_reg
;;;33         tmp &= ~0xFE;
000380  21fe              MOVS     r1,#0xfe
000382  4620              MOV      r0,r4
000384  4388              BICS     r0,r0,r1
000386  4604              MOV      r4,r0
;;;34         hal_dev_mma8451_write_reg(0x2a,tmp|0x02);
000388  2002              MOVS     r0,#2
00038a  4320              ORRS     r0,r0,r4
00038c  4601              MOV      r1,r0
00038e  202a              MOVS     r0,#0x2a
000390  f7fffffe          BL       hal_dev_mma8451_write_reg
;;;35         tmp |= 0x02;
000394  2002              MOVS     r0,#2
000396  4304              ORRS     r4,r4,r0
;;;36         hal_dev_mma8451_write_reg(0x2a,tmp|0x01);
000398  2001              MOVS     r0,#1
00039a  4320              ORRS     r0,r0,r4
00039c  4601              MOV      r1,r0
00039e  202a              MOVS     r0,#0x2a
0003a0  f7fffffe          BL       hal_dev_mma8451_write_reg
;;;37     }
0003a4  bd10              POP      {r4,pc}
;;;38     /******************************************************************************/
                          ENDP

                  accel_read PROC
;;;39     void accel_read(void)
0003a6  b510              PUSH     {r4,lr}
;;;40     {
;;;41         if((hal_dev_mma8451_read_reg(0x00)&0xf) != 0)
0003a8  2000              MOVS     r0,#0
0003aa  f7fffffe          BL       hal_dev_mma8451_read_reg
0003ae  0700              LSLS     r0,r0,#28
0003b0  0f00              LSRS     r0,r0,#28
0003b2  2800              CMP      r0,#0
0003b4  d07e              BEQ      |L1.1204|
;;;42         {
;;;43     //        accel_x   = hal_dev_mma8451_read_reg(0x01)<<8;
;;;44     //        accel_x  |= hal_dev_mma8451_read_reg(0x02);
;;;45     //        accel_x >>= 2;
;;;46     			
;;;47     accel_x = (int16_t)(((hal_dev_mma8451_read_reg(0x01) << 8) | hal_dev_mma8451_read_reg(0x02)))>> 2;		
0003b6  2001              MOVS     r0,#1
0003b8  f7fffffe          BL       hal_dev_mma8451_read_reg
0003bc  0204              LSLS     r4,r0,#8
0003be  2002              MOVS     r0,#2
0003c0  f7fffffe          BL       hal_dev_mma8451_read_reg
0003c4  4304              ORRS     r4,r4,r0
0003c6  b220              SXTH     r0,r4
0003c8  1080              ASRS     r0,r0,#2
0003ca  4921              LDR      r1,|L1.1104|
0003cc  8008              STRH     r0,[r1,#0]
;;;48     accel_y = (int16_t)(((hal_dev_mma8451_read_reg(0x03) << 8) | hal_dev_mma8451_read_reg(0x04)))>> 2;		
0003ce  2003              MOVS     r0,#3
0003d0  f7fffffe          BL       hal_dev_mma8451_read_reg
0003d4  0204              LSLS     r4,r0,#8
0003d6  2004              MOVS     r0,#4
0003d8  f7fffffe          BL       hal_dev_mma8451_read_reg
0003dc  4304              ORRS     r4,r4,r0
0003de  b220              SXTH     r0,r4
0003e0  1080              ASRS     r0,r0,#2
0003e2  491c              LDR      r1,|L1.1108|
0003e4  8008              STRH     r0,[r1,#0]
;;;49     accel_z = (int16_t)(((hal_dev_mma8451_read_reg(0x05) << 8) | hal_dev_mma8451_read_reg(0x06)))>> 2;					
0003e6  2005              MOVS     r0,#5
0003e8  f7fffffe          BL       hal_dev_mma8451_read_reg
0003ec  0204              LSLS     r4,r0,#8
0003ee  2006              MOVS     r0,#6
0003f0  f7fffffe          BL       hal_dev_mma8451_read_reg
0003f4  4304              ORRS     r4,r4,r0
0003f6  b220              SXTH     r0,r4
0003f8  1080              ASRS     r0,r0,#2
0003fa  e02d              B        |L1.1112|
                  |L1.1020|
                          DCD      0x40048000
                  |L1.1024|
                          DCD      0x4004d040
                  |L1.1028|
                          DCD      0x40066000
                  |L1.1032|
                          DCD      resultx
                  |L1.1036|
                          DCD      arr_medianas
                  |L1.1040|
                          DCD      X_acc
                  |L1.1044|
                          DCD      resulty
                  |L1.1048|
                          DCD      Y_acc
                  |L1.1052|
                          DCD      resultz
                  |L1.1056|
                          DCD      Z_acc
                  |L1.1060|
                          DCD      xy_mag
                  |L1.1064|
                          DCD      ||cat||
                  |L1.1068|
                          DCD      offset
                  |L1.1072|
                          DCD      asin
                  |L1.1076|
                          DCD      xy_angle
                  |L1.1080|
                          DCD      xz_mag
                  |L1.1084|
                          DCD      xz_angle
                  |L1.1088|
                          DCD      yz_mag
                  |L1.1092|
                          DCD      yz_angle
                  |L1.1096|
                          DCD      ti_fall
                  |L1.1100|
                          DCD      fall_input
                  |L1.1104|
                          DCD      accel_x
                  |L1.1108|
                          DCD      accel_y
                  |L1.1112|
000458  493f              LDR      r1,|L1.1368|
00045a  8008              STRH     r0,[r1,#0]
;;;50     magx = (hal_dev_mma8451_read_reg(0x07) << 8) | hal_dev_mma8451_read_reg(0x08);
00045c  2007              MOVS     r0,#7
00045e  f7fffffe          BL       hal_dev_mma8451_read_reg
000462  0204              LSLS     r4,r0,#8
000464  2008              MOVS     r0,#8
000466  f7fffffe          BL       hal_dev_mma8451_read_reg
00046a  4304              ORRS     r4,r4,r0
00046c  483b              LDR      r0,|L1.1372|
00046e  6004              STR      r4,[r0,#0]  ; magx
;;;51     magy = (hal_dev_mma8451_read_reg(0x09) << 8) | hal_dev_mma8451_read_reg(0x0A);
000470  2009              MOVS     r0,#9
000472  f7fffffe          BL       hal_dev_mma8451_read_reg
000476  0204              LSLS     r4,r0,#8
000478  200a              MOVS     r0,#0xa
00047a  f7fffffe          BL       hal_dev_mma8451_read_reg
00047e  4304              ORRS     r4,r4,r0
000480  4837              LDR      r0,|L1.1376|
000482  6004              STR      r4,[r0,#0]  ; magy
;;;52     magz = (hal_dev_mma8451_read_reg(0x0B) << 8) | hal_dev_mma8451_read_reg(0x0C);
000484  200b              MOVS     r0,#0xb
000486  f7fffffe          BL       hal_dev_mma8451_read_reg
00048a  0204              LSLS     r4,r0,#8
00048c  200c              MOVS     r0,#0xc
00048e  f7fffffe          BL       hal_dev_mma8451_read_reg
000492  4304              ORRS     r4,r4,r0
000494  4833              LDR      r0,|L1.1380|
000496  6004              STR      r4,[r0,#0]  ; magz
;;;53     temp = hal_dev_mma8451_read_reg(0x51);
000498  2051              MOVS     r0,#0x51
00049a  f7fffffe          BL       hal_dev_mma8451_read_reg
00049e  4932              LDR      r1,|L1.1384|
0004a0  6008              STR      r0,[r1,#0]  ; temp
;;;54     			//        accel_y   = hal_dev_mma8451_read_reg(0x03)<<8;
;;;55     //        accel_y  |= hal_dev_mma8451_read_reg(0x04);
;;;56     //        accel_y >>= 2;
;;;57     
;;;58     //        accel_z   = hal_dev_mma8451_read_reg(0x05)<<8;
;;;59     //        accel_z  |= hal_dev_mma8451_read_reg(0x06);
;;;60     //        accel_z >>= 2;
;;;61     
;;;62             resultx   = hal_dev_mma8451_read_reg(0x01)<<8;
0004a2  2001              MOVS     r0,#1
0004a4  f7fffffe          BL       hal_dev_mma8451_read_reg
0004a8  0200              LSLS     r0,r0,#8
0004aa  b200              SXTH     r0,r0
0004ac  492f              LDR      r1,|L1.1388|
0004ae  8008              STRH     r0,[r1,#0]
;;;63             resultx  |= hal_dev_mma8451_read_reg(0x02);
0004b0  2002              MOVS     r0,#2
0004b2  e000              B        |L1.1206|
                  |L1.1204|
0004b4  e03d              B        |L1.1330|
                  |L1.1206|
0004b6  f7fffffe          BL       hal_dev_mma8451_read_reg
0004ba  492c              LDR      r1,|L1.1388|
0004bc  8809              LDRH     r1,[r1,#0]  ; resultx
0004be  4308              ORRS     r0,r0,r1
0004c0  b200              SXTH     r0,r0
0004c2  492a              LDR      r1,|L1.1388|
0004c4  8008              STRH     r0,[r1,#0]
;;;64             resultx >>= 8;
0004c6  4608              MOV      r0,r1
0004c8  2100              MOVS     r1,#0
0004ca  5e41              LDRSH    r1,[r0,r1]  ; resultx
0004cc  1208              ASRS     r0,r1,#8
0004ce  4927              LDR      r1,|L1.1388|
0004d0  8008              STRH     r0,[r1,#0]
;;;65     
;;;66             resulty   = hal_dev_mma8451_read_reg(0x03)<<8;
0004d2  2003              MOVS     r0,#3
0004d4  f7fffffe          BL       hal_dev_mma8451_read_reg
0004d8  0200              LSLS     r0,r0,#8
0004da  b200              SXTH     r0,r0
0004dc  4924              LDR      r1,|L1.1392|
0004de  8008              STRH     r0,[r1,#0]
;;;67             resulty  |= hal_dev_mma8451_read_reg(0x04);
0004e0  2004              MOVS     r0,#4
0004e2  f7fffffe          BL       hal_dev_mma8451_read_reg
0004e6  4922              LDR      r1,|L1.1392|
0004e8  8809              LDRH     r1,[r1,#0]  ; resulty
0004ea  4308              ORRS     r0,r0,r1
0004ec  b200              SXTH     r0,r0
0004ee  4920              LDR      r1,|L1.1392|
0004f0  8008              STRH     r0,[r1,#0]
;;;68             resulty >>= 8;
0004f2  4608              MOV      r0,r1
0004f4  2100              MOVS     r1,#0
0004f6  5e41              LDRSH    r1,[r0,r1]  ; resulty
0004f8  1208              ASRS     r0,r1,#8
0004fa  491d              LDR      r1,|L1.1392|
0004fc  8008              STRH     r0,[r1,#0]
;;;69     
;;;70             resultz   = hal_dev_mma8451_read_reg(0x05)<<8;
0004fe  2005              MOVS     r0,#5
000500  f7fffffe          BL       hal_dev_mma8451_read_reg
000504  0200              LSLS     r0,r0,#8
000506  b200              SXTH     r0,r0
000508  491a              LDR      r1,|L1.1396|
00050a  8008              STRH     r0,[r1,#0]
;;;71             resultz  |= hal_dev_mma8451_read_reg(0x06);
00050c  2006              MOVS     r0,#6
00050e  f7fffffe          BL       hal_dev_mma8451_read_reg
000512  4918              LDR      r1,|L1.1396|
000514  8809              LDRH     r1,[r1,#0]  ; resultz
000516  4308              ORRS     r0,r0,r1
000518  b200              SXTH     r0,r0
00051a  4916              LDR      r1,|L1.1396|
00051c  8008              STRH     r0,[r1,#0]
;;;72             resultz >>= 8;
00051e  4608              MOV      r0,r1
000520  2100              MOVS     r1,#0
000522  5e41              LDRSH    r1,[r0,r1]  ; resultz
000524  1208              ASRS     r0,r1,#8
000526  4913              LDR      r1,|L1.1396|
000528  8008              STRH     r0,[r1,#0]
;;;73     
;;;74             angle_calculation(); //-900  to  900
00052a  f7fffffe          BL       angle_calculation
;;;75             detect_fall_detection();
00052e  f7fffffe          BL       detect_fall_detection
                  |L1.1330|
;;;76     				
;;;77     //printf("||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d    ||   %d    ||\n",accel_x,accel_y,accel_z,resultx,resulty,resultz,xy_angle,xz_angle,yz_angle,  , temp )	;			
;;;78     //printf("||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||   %d   ||\n", (accel_x),resultx, (accel_y),resulty, (accel_z),resultz,magx,magy,magz )	;			
;;;79     	
;;;80     //printf("        %X       %X      \n",magz,~magz);
;;;81     
;;;82     
;;;83     //				        resultx = accel_x >> 8;
;;;84     
;;;85     //        resulty = accel_y >> 8;
;;;86     
;;;87     
;;;88     //        resultz = accel_z >> 8;
;;;89     //				
;;;90         }
;;;91     }
000532  bd10              POP      {r4,pc}
;;;92     /******************************************************************************/
                          ENDP

                  main PROC
;;;95     /********************************************************************/
;;;96     int main (void)
000534  f7fffffe          BL       start
;;;97     {
;;;98         	char ch;
;;;99     
;;;100    
;;;101    	
;;;102    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;103        start();
;;;104    #endif
;;;105    
;;;106    accel_init();
000538  f7fffffe          BL       accel_init
;;;107    printf("Accelerometer initialised\n");        
00053c  a00e              ADR      r0,|L1.1400|
00053e  f7fffffe          BL       __2printf
;;;108     	printf("\n\r\n\r*** Running the KEIL_MAG project ***\n\r");
000542  a014              ADR      r0,|L1.1428|
000544  f7fffffe          BL       __2printf
;;;109    
;;;110    	while(1)
000548  e005              B        |L1.1366|
                  |L1.1354|
;;;111    	{//accel_read();
;;;112    		ch = in_char();
00054a  f7fffffe          BL       in_char
00054e  4604              MOV      r4,r0
;;;113    		out_char(ch);
000550  4620              MOV      r0,r4
000552  f7fffffe          BL       out_char
                  |L1.1366|
000556  e7f8              B        |L1.1354|
;;;114    	} 
;;;115    }
;;;116    /********************************************************************/
                          ENDP

                  |L1.1368|
                          DCD      accel_z
                  |L1.1372|
                          DCD      magx
                  |L1.1376|
                          DCD      magy
                  |L1.1380|
                          DCD      magz
                  |L1.1384|
                          DCD      temp
                  |L1.1388|
                          DCD      resultx
                  |L1.1392|
                          DCD      resulty
                  |L1.1396|
                          DCD      resultz
                  |L1.1400|
000578  41636365          DCB      "Accelerometer initialised\n",0
00057c  6c65726f
000580  6d657465
000584  7220696e
000588  69746961
00058c  6c697365
000590  640a00  
000593  00                DCB      0
                  |L1.1428|
000594  0a0d0a0d          DCB      "\n\r\n\r*** Running the KEIL_MAG project ***\n\r",0
000598  2a2a2a20
00059c  52756e6e
0005a0  696e6720
0005a4  74686520
0005a8  4b45494c
0005ac  5f4d4147
0005b0  2070726f
0005b4  6a656374
0005b8  202a2a2a
0005bc  0a0d00  
0005bf  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  arr_medianas
                          %        108

                          AREA ||.data||, DATA, ALIGN=2

                  pit1_isrv_count
000000  0000              DCB      0x00,0x00
                  base_time125m
000002  0000              DCB      0x00,0x00
                  ti_task
000004  0000              DCB      0x00,0x00
                  ti_fall
000006  0000              DCB      0x00,0x00
                  ti_accel_sampling
000008  0000              DCB      0x00,0x00
                  ti_delay
00000a  0000              DCB      0x00,0x00
                  ti_print
00000c  0000              DCB      0x00,0x00
                  ti_console
00000e  0000              DCB      0x00,0x00
                  ti_led
000010  0000              DCB      0x00,0x00
                  ti_tsi0
000012  0000              DCB      0x00,0x00
                  ti_tsi1
000014  0000              DCB      0x00,0x00
                  ti_test_adc
000016  0000              DCB      0x00,0x00
                  adc_sample
000018  00000000          DCB      0x00,0x00,0x00,0x00
                  X_acc
                          DCD      0x00000000
                  Y_acc
                          DCD      0x00000000
                  Z_acc
                          DCD      0x00000000
                  xy_mag
                          DCD      0x00000000
                  xz_mag
                          DCD      0x00000000
                  yz_mag
                          DCD      0x00000000
                  xy_angle
                          DCD      0x00000000
                  xz_angle
                          DCD      0x00000000
                  yz_angle
                          DCD      0x00000000
                  ||cat||
                          DCD      0x00000000
                  offset
                          DCD      0x00000000
                  fall_input
000048  0000              DCB      0x00,0x00
                  accel_x
00004a  0000              DCB      0x00,0x00
                  accel_y
00004c  0000              DCB      0x00,0x00
                  accel_z
00004e  0000              DCB      0x00,0x00
                  resultx
000050  0000              DCB      0x00,0x00
                  resulty
000052  0000              DCB      0x00,0x00
                  resultz
000054  0000              DCB      0x00,0x00
                  aux1
000056  0000              DCB      0x00,0x00
                  accel_mx
                          DCD      0x00000000
                  accel_my
                          DCD      0x00000000
                  accel_mz
                          DCD      0x00000000
                  magx
                          DCD      0x00000000
                  magy
                          DCD      0x00000000
                  magz
                          DCD      0x00000000
                  temp
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\KEIL_MAG.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_KEIL_MAG_c_39a522ca____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_KEIL_MAG_c_39a522ca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_KEIL_MAG_c_39a522ca____REVSH|
#line 144
|__asm___10_KEIL_MAG_c_39a522ca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
