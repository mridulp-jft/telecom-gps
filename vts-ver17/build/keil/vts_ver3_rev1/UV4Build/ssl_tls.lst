L 1 "C:\Keil_v5\ARM\PACK\ARM\mbedTLS\1.1.1\library\ssl_tls.c"
N/*
N *  SSLv3/TLSv1 shared functions
N *
N *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
N *  SPDX-License-Identifier: Apache-2.0
N *
N *  Licensed under the Apache License, Version 2.0 (the "License"); you may
N *  not use this file except in compliance with the License.
N *  You may obtain a copy of the License at
N *
N *  http://www.apache.org/licenses/LICENSE-2.0
N *
N *  Unless required by applicable law or agreed to in writing, software
N *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N *  See the License for the specific language governing permissions and
N *  limitations under the License.
N *
N *  This file is part of mbed TLS (https://tls.mbed.org)
N */
N/*
N *  The SSL 3.0 specification was drafted by Netscape in 1996,
N *  and became an IETF standard in 1999.
N *
N *  http://wp.netscape.com/eng/ssl3/
N *  http://www.ietf.org/rfc/rfc2246.txt
N *  http://www.ietf.org/rfc/rfc4346.txt
N */
N
N#if !defined(MBEDTLS_CONFIG_FILE)
X#if !0L
N#include "mbedtls/config.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\mbedTLS\1.1.1\include\mbedtls/config.h" 1
N/**
N * \file config.h
N *
N * \brief Configuration options (set of defines)
N *
N *  This set of compile-time options may be used to enable
N *  or disable features selectively, and reduce the global
N *  memory footprint.
N *
N *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
N *  SPDX-License-Identifier: Apache-2.0
N *
N *  Licensed under the Apache License, Version 2.0 (the "License"); you may
N *  not use this file except in compliance with the License.
N *  You may obtain a copy of the License at
N *
N *  http://www.apache.org/licenses/LICENSE-2.0
N *
N *  Unless required by applicable law or agreed to in writing, software
N *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N *  See the License for the specific language governing permissions and
N *  limitations under the License.
N *
N *  This file is part of mbed TLS (https://tls.mbed.org)
N */
N
N#ifdef _RTE_
N#include "mbedTLS_config.h"
L 1 ".\RTE\Security\mbedTLS_config.h" 1
N/*
N *  Configuration template
N *
N *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
N *  SPDX-License-Identifier: Apache-2.0
N *
N *  Licensed under the Apache License, Version 2.0 (the "License"); you may
N *  not use this file except in compliance with the License.
N *  You may obtain a copy of the License at
N *
N *  http://www.apache.org/licenses/LICENSE-2.0
N *
N *  Unless required by applicable law or agreed to in writing, software
N *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N *  See the License for the specific language governing permissions and
N *  limitations under the License.
N *
N *  This file is part of mbed TLS (https://tls.mbed.org)
N */
N
N/*
N * This set of compile-time options may be used to enable
N * or disable features selectively, and reduce the global
N * memory footprint.
N */
N#ifndef MBEDTLS_CONFIG_H
N#define MBEDTLS_CONFIG_H
N
N/* System support */
N//#define MBEDTLS_HAVE_ASM
N//#define MBEDTLS_HAVE_TIME
N//#define MBEDTLS_HAVE_TIME_DATE
N//#define MBEDTLS_PLATFORM_MEMORY
N//#define MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
N
N/* mbed TLS feature support */
N//#define MBEDTLS_AES_ROM_TABLES
N//#define MBEDTLS_CAMELLIA_SMALL_MEMORY
N//#define MBEDTLS_CIPHER_MODE_CBC
N//#define MBEDTLS_CIPHER_MODE_CFB
N//#define MBEDTLS_CIPHER_MODE_CTR
N//#define MBEDTLS_CIPHER_PADDING_PKCS7
N//#define MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS
N//#define MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN
N//#define MBEDTLS_CIPHER_PADDING_ZEROS
N//#define MBEDTLS_REMOVE_ARC4_CIPHERSUITES
N//#define MBEDTLS_ECP_DP_SECP192R1_ENABLED
N//#define MBEDTLS_ECP_DP_SECP224R1_ENABLED
N//#define MBEDTLS_ECP_DP_SECP256R1_ENABLED
N//#define MBEDTLS_ECP_DP_SECP384R1_ENABLED
N//#define MBEDTLS_ECP_DP_SECP521R1_ENABLED
N//#define MBEDTLS_ECP_DP_SECP192K1_ENABLED
N//#define MBEDTLS_ECP_DP_SECP224K1_ENABLED
N//#define MBEDTLS_ECP_DP_SECP256K1_ENABLED
N//#define MBEDTLS_ECP_DP_BP256R1_ENABLED
N//#define MBEDTLS_ECP_DP_BP384R1_ENABLED
N//#define MBEDTLS_ECP_DP_BP512R1_ENABLED
N//#define MBEDTLS_ECP_DP_CURVE25519_ENABLED
N//#define MBEDTLS_ECP_NIST_OPTIM
N//#define MBEDTLS_ECDSA_DETERMINISTIC
N//#define MBEDTLS_KEY_EXCHANGE_PSK_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
N//#define MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
N//#define MBEDTLS_PK_PARSE_EC_EXTENDED
N//#define MBEDTLS_ERROR_STRERROR_DUMMY
N//#define MBEDTLS_GENPRIME
N//#define MBEDTLS_FS_IO
N//#define MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES
N//#define MBEDTLS_NO_PLATFORM_ENTROPY
N//#define MBEDTLS_ENTROPY_FORCE_SHA256
N//#define MBEDTLS_MEMORY_DEBUG
N//#define MBEDTLS_MEMORY_BACKTRACE
N//#define MBEDTLS_PK_RSA_ALT_SUPPORT
N//#define MBEDTLS_PKCS1_V15
N//#define MBEDTLS_PKCS1_V21
N//#define MBEDTLS_RSA_NO_CRT
N//#define MBEDTLS_SELF_TEST
N//#define MBEDTLS_SHA256_SMALLER
N//#define MBEDTLS_SSL_AEAD_RANDOM_IV
N//#define MBEDTLS_SSL_ALL_ALERT_MESSAGES
N//#define MBEDTLS_SSL_DEBUG_ALL
N//#define MBEDTLS_SSL_ENCRYPT_THEN_MAC
N//#define MBEDTLS_SSL_EXTENDED_MASTER_SECRET
N//#define MBEDTLS_SSL_FALLBACK_SCSV
N//#define MBEDTLS_SSL_HW_RECORD_ACCEL
N//#define MBEDTLS_SSL_CBC_RECORD_SPLITTING
N//#define MBEDTLS_SSL_RENEGOTIATION
N//#define MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO
N//#define MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE
N//#define MBEDTLS_SSL_MAX_FRAGMENT_LENGTH
N//#define MBEDTLS_SSL_PROTO_SSL3
N//#define MBEDTLS_SSL_PROTO_TLS1
N//#define MBEDTLS_SSL_PROTO_TLS1_1
N//#define MBEDTLS_SSL_PROTO_TLS1_2
N//#define MBEDTLS_SSL_PROTO_DTLS
N//#define MBEDTLS_SSL_ALPN
N//#define MBEDTLS_SSL_DTLS_ANTI_REPLAY
N//#define MBEDTLS_SSL_DTLS_HELLO_VERIFY
N//#define MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE
N//#define MBEDTLS_SSL_DTLS_BADMAC_LIMIT
N//#define MBEDTLS_SSL_SESSION_TICKETS
N//#define MBEDTLS_SSL_EXPORT_KEYS
N//#define MBEDTLS_SSL_SERVER_NAME_INDICATION
N//#define MBEDTLS_SSL_TRUNCATED_HMAC
N//#define MBEDTLS_VERSION_FEATURES
N//#define MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3
N//#define MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION
N//#define MBEDTLS_X509_CHECK_KEY_USAGE
N//#define MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE
N//#define MBEDTLS_X509_RSASSA_PSS_SUPPORT
N
N/* mbed TLS modules */
N//#define MBEDTLS_AES_C
N//#define MBEDTLS_ARC4_C
N//#define MBEDTLS_ASN1_PARSE_C
N//#define MBEDTLS_ASN1_WRITE_C
N//#define MBEDTLS_BASE64_C
N//#define MBEDTLS_BIGNUM_C
N//#define MBEDTLS_BLOWFISH_C
N//#define MBEDTLS_CAMELLIA_C
N//#define MBEDTLS_CCM_C
N//#define MBEDTLS_CERTS_C
N//#define MBEDTLS_CIPHER_C
N//#define MBEDTLS_CTR_DRBG_C
N//#define MBEDTLS_DEBUG_C
N//#define MBEDTLS_DES_C
N//#define MBEDTLS_DHM_C
N//#define MBEDTLS_ECDH_C
N//#define MBEDTLS_ECDSA_C
N//#define MBEDTLS_ECJPAKE_C
N//#define MBEDTLS_ECP_C
N//#define MBEDTLS_ENTROPY_C
N//#define MBEDTLS_ERROR_C
N//#define MBEDTLS_GCM_C
N//#define MBEDTLS_HAVEGE_C
N//#define MBEDTLS_HMAC_DRBG_C
N//#define MBEDTLS_MD_C
N//#define MBEDTLS_MD2_C
N//#define MBEDTLS_MD4_C
N//#define MBEDTLS_MD5_C
N//#define MBEDTLS_MEMORY_BUFFER_ALLOC_C
N//#define MBEDTLS_NET_C
N//#define MBEDTLS_OID_C
N//#define MBEDTLS_PEM_PARSE_C
N//#define MBEDTLS_PEM_WRITE_C
N//#define MBEDTLS_PK_C
N//#define MBEDTLS_PK_PARSE_C
N//#define MBEDTLS_PK_WRITE_C
N//#define MBEDTLS_PKCS5_C
N//#define MBEDTLS_PKCS11_C
N//#define MBEDTLS_PKCS12_C
N//#define MBEDTLS_PLATFORM_C
N//#define MBEDTLS_RIPEMD160_C
N//#define MBEDTLS_RSA_C
N//#define MBEDTLS_SHA1_C
N//#define MBEDTLS_SHA256_C
N//#define MBEDTLS_SHA512_C
N//#define MBEDTLS_SSL_CACHE_C
N//#define MBEDTLS_SSL_COOKIE_C
N//#define MBEDTLS_SSL_TICKET_C
N//#define MBEDTLS_SSL_CLI_C
N//#define MBEDTLS_SSL_SRV_C
N//#define MBEDTLS_SSL_TLS_C
N//#define MBEDTLS_THREADING_C
N//#define MBEDTLS_TIMING_C
N//#define MBEDTLS_VERSION_C
N//#define MBEDTLS_X509_USE_C
N//#define MBEDTLS_X509_CRT_PARSE_C
N//#define MBEDTLS_X509_CRL_PARSE_C
N//#define MBEDTLS_X509_CSR_PARSE_C
N//#define MBEDTLS_X509_CREATE_C
N//#define MBEDTLS_X509_CRT_WRITE_C
N//#define MBEDTLS_X509_CSR_WRITE_C
N//#define MBEDTLS_XTEA_C
N
N#include "check_config.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\mbedTLS\1.1.1\include\mbedtls\check_config.h" 1
N/**
N * \file check_config.h
N *
N * \brief Consistency checks for configuration options
N *
N *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
N *  SPDX-License-Identifier: Apache-2.0
N *
N *  Licensed under the Apache License, Version 2.0 (the "License"); you may
N *  not use this file except in compliance with the License.
N *  You may obtain a copy of the License at
N *
N *  http://www.apache.org/licenses/LICENSE-2.0
N *
N *  Unless required by applicable law or agreed to in writing, software
N *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N *  See the License for the specific language governing permissions and
N *  limitations under the License.
N *
N *  This file is part of mbed TLS (https://tls.mbed.org)
N */
N
N/*
N * It is recommended to include this file from your config.h
N * in order to catch dependency issues early.
N */
N
N#ifndef MBEDTLS_CHECK_CONFIG_H
N#define MBEDTLS_CHECK_CONFIG_H
N
N/*
N * We assume CHAR_BIT is 8 in many places. In practice, this is true on our
N * target platforms, so not an issue, but let's just be extra sure.
N */
N#include <limits.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\limits.h" 1
N/* limits.h: ANSI 'C' (X3J11 Oct 88) library header, section 2.2.4.2 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991-1997 ARM Limited. All rights reserved         */
N
N/*
N * RCS $Revision: 190986 $
N * Checkin $Date: 2015-02-04 14:26:49 +0000 (Wed, 04 Feb 2015) $
N * Revising $Author: drodgman $
N */
N
N#ifndef __limits_h
N#define __limits_h
N#define __ARMCLIB_VERSION 5060002
N
N#define CHAR_BIT 8
N    /* max number of bits for smallest object that is not a bit-field (byte) */
N#define SCHAR_MIN (-128)
N    /* mimimum value for an object of type signed char */
N#define SCHAR_MAX 127
N    /* maximum value for an object of type signed char */
N#define UCHAR_MAX 255
N    /* maximum value for an object of type unsigned char */
N#ifdef __FEATURE_SIGNED_CHAR
S  #define CHAR_MIN (-128)
S      /* minimum value for an object of type char */
S  #define CHAR_MAX 127
S      /* maximum value for an object of type char */
N#else
N  #define CHAR_MIN 0
N      /* minimum value for an object of type char */
N  #define CHAR_MAX 255
N      /* maximum value for an object of type char */
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Sextern const int __aeabi_MB_LEN_MAX;
S#define MB_LEN_MAX (__aeabi_MB_LEN_MAX)
N#else
N#define MB_LEN_MAX 6
N#endif
N    /* maximum number of bytes in a multibyte character, */
N    /* for any supported locale */
N
N#define SHRT_MIN  (-0x8000)
N    /* minimum value for an object of type short int */
N#define SHRT_MAX  0x7fff
N    /* maximum value for an object of type short int */
N#define USHRT_MAX 65535
N    /* maximum value for an object of type unsigned short int */
N#define INT_MIN   (~0x7fffffff)  /* -2147483648 and 0x80000000 are unsigned */
N    /* minimum value for an object of type int */
N#define INT_MAX   0x7fffffff
N    /* maximum value for an object of type int */
N#define UINT_MAX  0xffffffffU
N    /* maximum value for an object of type unsigned int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MIN  (~0x7fffffffffffffffL)
N#else
N  #define LONG_MIN  (~0x7fffffffL)
N#endif
N    /* minimum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MAX  0x7fffffffffffffffL
N#else
N  #define LONG_MAX  0x7fffffffL
N#endif
N    /* maximum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define ULONG_MAX 0xffffffffffffffffUL
N#else
N  #define ULONG_MAX 0xffffffffUL
N#endif
N    /* maximum value for an object of type unsigned long int */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N  #define LLONG_MIN  (~0x7fffffffffffffffLL)
N      /* minimum value for an object of type long long int */
N  #define LLONG_MAX    0x7fffffffffffffffLL
N      /* maximum value for an object of type long long int */
N  #define ULLONG_MAX   0xffffffffffffffffULL
N      /* maximum value for an object of type unsigned long int */
N#endif
N
N#endif
N
N/* end of limits.h */
N
L 37 "C:\Keil_v5\ARM\PACK\ARM\mbedTLS\1.1.1\include\mbedtls\check_config.h" 2
N#if CHAR_BIT != 8
X#if 8 != 8
S#error "mbed TLS requires a platform with 8-bit chars"
N#endif
N
N#if defined(_WIN32)
X#if 0L
S#if !defined(MBEDTLS_PLATFORM_C)
S#error "MBEDTLS_PLATFORM_C is required on Windows"
S#endif
S
S/* Fix the config here. Not convenient to put an #ifdef _WIN32 in config.h as
S * it would confuse config.pl. */
S#if !defined(MBEDTLS_PLATFORM_SNPRINTF_ALT) && \
S    !defined(MBEDTLS_PLATFORM_SNPRINTF_MACRO)
X#if !defined(MBEDTLS_PLATFORM_SNPRINTF_ALT) &&     !defined(MBEDTLS_PLATFORM_SNPRINTF_MACRO)
S#define MBEDTLS_PLATFORM_SNPRINTF_ALT
S#endif
N#endif /* _WIN32 */
N
N#if defined(TARGET_LIKE_MBED) && \
N    ( defined(MBEDTLS_NET_C) || defined(MBEDTLS_TIMING_C) )
X#if 0L &&     ( 0L || 0L )
S#error "The NET and TIMING modules are not available for mbed OS - please use the network and timing functions provided by mbed OS"
N#endif
N
N#if defined(MBEDTLS_DEPRECATED_WARNING) && \
N    !defined(__GNUC__) && !defined(__clang__)
X#if 0L &&     !0L && !0L
S#error "MBEDTLS_DEPRECATED_WARNING only works with GCC and Clang"
N#endif
N
N#if defined(MBEDTLS_HAVE_TIME_DATE) && !defined(MBEDTLS_HAVE_TIME)
X#if 0L && !0L
S#error "MBEDTLS_HAVE_TIME_DATE without MBEDTLS_HAVE_TIME does not make sense"
N#endif
N
N#if defined(MBEDTLS_AESNI_C) && !defined(MBEDTLS_HAVE_ASM)
X#if 0L && !0L
S#error "MBEDTLS_AESNI_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_CTR_DRBG_C) && !defined(MBEDTLS_AES_C)
X#if 0L && !0L
S#error "MBEDTLS_CTR_DRBG_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_DHM_C) && !defined(MBEDTLS_BIGNUM_C)
X#if 0L && !0L
S#error "MBEDTLS_DHM_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_ECDH_C) && !defined(MBEDTLS_ECP_C)
X#if 0L && !0L
S#error "MBEDTLS_ECDH_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_ECDSA_C) &&            \
N    ( !defined(MBEDTLS_ECP_C) ||           \
N      !defined(MBEDTLS_ASN1_PARSE_C) ||    \
N      !defined(MBEDTLS_ASN1_WRITE_C) )
X#if 0L &&                ( !0L ||                 !0L ||          !0L )
S#error "MBEDTLS_ECDSA_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_ECJPAKE_C) &&           \
N    ( !defined(MBEDTLS_ECP_C) || !defined(MBEDTLS_MD_C) )
X#if 0L &&               ( !0L || !0L )
S#error "MBEDTLS_ECJPAKE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_ECDSA_DETERMINISTIC) && !defined(MBEDTLS_HMAC_DRBG_C)
X#if 0L && !0L
S#error "MBEDTLS_ECDSA_DETERMINISTIC defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_ECP_C) && ( !defined(MBEDTLS_BIGNUM_C) || (   \
N    !defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED) &&                  \
N    !defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) &&                  \
N    !defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) &&                  \
N    !defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED) &&                  \
N    !defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED) &&                  \
N    !defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)   &&                  \
N    !defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)   &&                  \
N    !defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)   &&                  \
N    !defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) &&                  \
N    !defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) &&                  \
N    !defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED) ) )
X#if 0L && ( !0L || (       !0L &&                      !0L &&                      !0L &&                      !0L &&                      !0L &&                      !0L   &&                      !0L   &&                      !0L   &&                      !0L &&                      !0L &&                      !0L ) )
S#error "MBEDTLS_ECP_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_ENTROPY_C) && (!defined(MBEDTLS_SHA512_C) &&      \
N                                    !defined(MBEDTLS_SHA256_C))
X#if 0L && (!0L &&                                          !0L)
S#error "MBEDTLS_ENTROPY_C defined, but not all prerequisites"
N#endif
N#if defined(MBEDTLS_ENTROPY_C) && defined(MBEDTLS_SHA512_C) &&         \
N    defined(MBEDTLS_CTR_DRBG_ENTROPY_LEN) && (MBEDTLS_CTR_DRBG_ENTROPY_LEN > 64)
X#if 0L && 0L &&             0L && (MBEDTLS_CTR_DRBG_ENTROPY_LEN > 64)
S#error "MBEDTLS_CTR_DRBG_ENTROPY_LEN value too high"
N#endif
N#if defined(MBEDTLS_ENTROPY_C) &&                                            \
N    ( !defined(MBEDTLS_SHA512_C) || defined(MBEDTLS_ENTROPY_FORCE_SHA256) ) \
N    && defined(MBEDTLS_CTR_DRBG_ENTROPY_LEN) && (MBEDTLS_CTR_DRBG_ENTROPY_LEN > 32)
X#if 0L &&                                                ( !0L || 0L )     && 0L && (MBEDTLS_CTR_DRBG_ENTROPY_LEN > 32)
S#error "MBEDTLS_CTR_DRBG_ENTROPY_LEN value too high"
N#endif
N#if defined(MBEDTLS_ENTROPY_C) && \
N    defined(MBEDTLS_ENTROPY_FORCE_SHA256) && !defined(MBEDTLS_SHA256_C)
X#if 0L &&     0L && !0L
S#error "MBEDTLS_ENTROPY_FORCE_SHA256 defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_GCM_C) && (                                        \
N        !defined(MBEDTLS_AES_C) && !defined(MBEDTLS_CAMELLIA_C) )
X#if 0L && (                                                !0L && !0L )
S#error "MBEDTLS_GCM_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_HAVEGE_C) && !defined(MBEDTLS_TIMING_C)
X#if 0L && !0L
S#error "MBEDTLS_HAVEGE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_HMAC_DRBG_C) && !defined(MBEDTLS_MD_C)
X#if 0L && !0L
S#error "MBEDTLS_HMAC_DRBG_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED) &&                 \
N    ( !defined(MBEDTLS_ECDH_C) || !defined(MBEDTLS_X509_CRT_PARSE_C) )
X#if 0L &&                     ( !0L || !0L )
S#error "MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) &&                 \
N    ( !defined(MBEDTLS_ECDH_C) || !defined(MBEDTLS_X509_CRT_PARSE_C) )
X#if 0L &&                     ( !0L || !0L )
S#error "MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED) && !defined(MBEDTLS_DHM_C)
X#if 0L && !0L
S#error "MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) &&                     \
N    !defined(MBEDTLS_ECDH_C)
X#if 0L &&                         !0L
S#error "MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) &&                   \
N    ( !defined(MBEDTLS_DHM_C) || !defined(MBEDTLS_RSA_C) ||           \
N      !defined(MBEDTLS_X509_CRT_PARSE_C) || !defined(MBEDTLS_PKCS1_V15) )
X#if 0L &&                       ( !0L || !0L ||                 !0L || !0L )
S#error "MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) &&                 \
N    ( !defined(MBEDTLS_ECDH_C) || !defined(MBEDTLS_RSA_C) ||          \
N      !defined(MBEDTLS_X509_CRT_PARSE_C) || !defined(MBEDTLS_PKCS1_V15) )
X#if 0L &&                     ( !0L || !0L ||                !0L || !0L )
S#error "MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) &&                 \
N    ( !defined(MBEDTLS_ECDH_C) || !defined(MBEDTLS_ECDSA_C) ||          \
N      !defined(MBEDTLS_X509_CRT_PARSE_C) )
X#if 0L &&                     ( !0L || !0L ||                !0L )
S#error "MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED) &&                   \
N    ( !defined(MBEDTLS_RSA_C) || !defined(MBEDTLS_X509_CRT_PARSE_C) || \
N      !defined(MBEDTLS_PKCS1_V15) )
X#if 0L &&                       ( !0L || !0L ||       !0L )
S#error "MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED) &&                       \
N    ( !defined(MBEDTLS_RSA_C) || !defined(MBEDTLS_X509_CRT_PARSE_C) || \
N      !defined(MBEDTLS_PKCS1_V15) )
X#if 0L &&                           ( !0L || !0L ||       !0L )
S#error "MBEDTLS_KEY_EXCHANGE_RSA_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED) &&                    \
N    ( !defined(MBEDTLS_ECJPAKE_C) || !defined(MBEDTLS_SHA256_C) ||      \
N      !defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) )
X#if 0L &&                        ( !0L || !0L ||            !0L )
S#error "MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_MEMORY_BUFFER_ALLOC_C) &&                          \
N    ( !defined(MBEDTLS_PLATFORM_C) || !defined(MBEDTLS_PLATFORM_MEMORY) )
X#if 0L &&                              ( !0L || !0L )
S#error "MBEDTLS_MEMORY_BUFFER_ALLOC_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PADLOCK_C) && !defined(MBEDTLS_HAVE_ASM)
X#if 0L && !0L
S#error "MBEDTLS_PADLOCK_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PEM_PARSE_C) && !defined(MBEDTLS_BASE64_C)
X#if 0L && !0L
S#error "MBEDTLS_PEM_PARSE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PEM_WRITE_C) && !defined(MBEDTLS_BASE64_C)
X#if 0L && !0L
S#error "MBEDTLS_PEM_WRITE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PK_C) && \
N    ( !defined(MBEDTLS_RSA_C) && !defined(MBEDTLS_ECP_C) )
X#if 0L &&     ( !0L && !0L )
S#error "MBEDTLS_PK_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PK_PARSE_C) && !defined(MBEDTLS_PK_C)
X#if 0L && !0L
S#error "MBEDTLS_PK_PARSE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PK_WRITE_C) && !defined(MBEDTLS_PK_C)
X#if 0L && !0L
S#error "MBEDTLS_PK_WRITE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PKCS11_C) && !defined(MBEDTLS_PK_C)
X#if 0L && !0L
S#error "MBEDTLS_PKCS11_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_EXIT_ALT) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_EXIT_ALT defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_EXIT_MACRO) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_EXIT_MACRO defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_EXIT_MACRO) &&\
N    ( defined(MBEDTLS_PLATFORM_STD_EXIT) ||\
N        defined(MBEDTLS_PLATFORM_EXIT_ALT) )
X#if 0L &&    ( 0L ||        0L )
S#error "MBEDTLS_PLATFORM_EXIT_MACRO and MBEDTLS_PLATFORM_STD_EXIT/MBEDTLS_PLATFORM_EXIT_ALT cannot be defined simultaneously"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_FPRINTF_ALT) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_FPRINTF_ALT defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_FPRINTF_MACRO) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_FPRINTF_MACRO defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_FPRINTF_MACRO) &&\
N    ( defined(MBEDTLS_PLATFORM_STD_FPRINTF) ||\
N        defined(MBEDTLS_PLATFORM_FPRINTF_ALT) )
X#if 0L &&    ( 0L ||        0L )
S#error "MBEDTLS_PLATFORM_FPRINTF_MACRO and MBEDTLS_PLATFORM_STD_FPRINTF/MBEDTLS_PLATFORM_FPRINTF_ALT cannot be defined simultaneously"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_FREE_MACRO) &&\
N    ( !defined(MBEDTLS_PLATFORM_C) || !defined(MBEDTLS_PLATFORM_MEMORY) )
X#if 0L &&    ( !0L || !0L )
S#error "MBEDTLS_PLATFORM_FREE_MACRO defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_FREE_MACRO) &&\
N    defined(MBEDTLS_PLATFORM_STD_FREE)
X#if 0L &&    0L
S#error "MBEDTLS_PLATFORM_FREE_MACRO and MBEDTLS_PLATFORM_STD_FREE cannot be defined simultaneously"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_FREE_MACRO) && !defined(MBEDTLS_PLATFORM_CALLOC_MACRO)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_CALLOC_MACRO must be defined if MBEDTLS_PLATFORM_FREE_MACRO is"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_CALLOC_MACRO) &&\
N    ( !defined(MBEDTLS_PLATFORM_C) || !defined(MBEDTLS_PLATFORM_MEMORY) )
X#if 0L &&    ( !0L || !0L )
S#error "MBEDTLS_PLATFORM_CALLOC_MACRO defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_CALLOC_MACRO) &&\
N    defined(MBEDTLS_PLATFORM_STD_CALLOC)
X#if 0L &&    0L
S#error "MBEDTLS_PLATFORM_CALLOC_MACRO and MBEDTLS_PLATFORM_STD_CALLOC cannot be defined simultaneously"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_CALLOC_MACRO) && !defined(MBEDTLS_PLATFORM_FREE_MACRO)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_FREE_MACRO must be defined if MBEDTLS_PLATFORM_CALLOC_MACRO is"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_MEMORY) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_MEMORY defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_PRINTF_ALT) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_PRINTF_ALT defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_PRINTF_MACRO) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_PRINTF_MACRO defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_PRINTF_MACRO) &&\
N    ( defined(MBEDTLS_PLATFORM_STD_PRINTF) ||\
N        defined(MBEDTLS_PLATFORM_PRINTF_ALT) )
X#if 0L &&    ( 0L ||        0L )
S#error "MBEDTLS_PLATFORM_PRINTF_MACRO and MBEDTLS_PLATFORM_STD_PRINTF/MBEDTLS_PLATFORM_PRINTF_ALT cannot be defined simultaneously"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_SNPRINTF_ALT) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_SNPRINTF_ALT defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_SNPRINTF_MACRO) && !defined(MBEDTLS_PLATFORM_C)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_SNPRINTF_MACRO defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_SNPRINTF_MACRO) &&\
N    ( defined(MBEDTLS_PLATFORM_STD_SNPRINTF) ||\
N        defined(MBEDTLS_PLATFORM_SNPRINTF_ALT) )
X#if 0L &&    ( 0L ||        0L )
S#error "MBEDTLS_PLATFORM_SNPRINTF_MACRO and MBEDTLS_PLATFORM_STD_SNPRINTF/MBEDTLS_PLATFORM_SNPRINTF_ALT cannot be defined simultaneously"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_STD_MEM_HDR) &&\
N    !defined(MBEDTLS_PLATFORM_NO_STD_FUNCTIONS)
X#if 0L &&    !0L
S#error "MBEDTLS_PLATFORM_STD_MEM_HDR defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_STD_CALLOC) && !defined(MBEDTLS_PLATFORM_MEMORY)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_STD_CALLOC defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_STD_CALLOC) && !defined(MBEDTLS_PLATFORM_MEMORY)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_STD_CALLOC defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_STD_FREE) && !defined(MBEDTLS_PLATFORM_MEMORY)
X#if 0L && !0L
S#error "MBEDTLS_PLATFORM_STD_FREE defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_STD_EXIT) &&\
N    !defined(MBEDTLS_PLATFORM_EXIT_ALT)
X#if 0L &&    !0L
S#error "MBEDTLS_PLATFORM_STD_EXIT defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_STD_FPRINTF) &&\
N    !defined(MBEDTLS_PLATFORM_FPRINTF_ALT)
X#if 0L &&    !0L
S#error "MBEDTLS_PLATFORM_STD_FPRINTF defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_STD_PRINTF) &&\
N    !defined(MBEDTLS_PLATFORM_PRINTF_ALT)
X#if 0L &&    !0L
S#error "MBEDTLS_PLATFORM_STD_PRINTF defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_PLATFORM_STD_SNPRINTF) &&\
N    !defined(MBEDTLS_PLATFORM_SNPRINTF_ALT)
X#if 0L &&    !0L
S#error "MBEDTLS_PLATFORM_STD_SNPRINTF defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_RSA_C) && ( !defined(MBEDTLS_BIGNUM_C) ||         \
N    !defined(MBEDTLS_OID_C) )
X#if 0L && ( !0L ||             !0L )
S#error "MBEDTLS_RSA_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT) &&                        \
N    ( !defined(MBEDTLS_RSA_C) || !defined(MBEDTLS_PKCS1_V21) )
X#if 0L &&                            ( !0L || !0L )
S#error "MBEDTLS_X509_RSASSA_PSS_SUPPORT defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_PROTO_SSL3) && ( !defined(MBEDTLS_MD5_C) ||     \
N    !defined(MBEDTLS_SHA1_C) )
X#if 0L && ( !0L ||         !0L )
S#error "MBEDTLS_SSL_PROTO_SSL3 defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_PROTO_TLS1) && ( !defined(MBEDTLS_MD5_C) ||     \
N    !defined(MBEDTLS_SHA1_C) )
X#if 0L && ( !0L ||         !0L )
S#error "MBEDTLS_SSL_PROTO_TLS1 defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_PROTO_TLS1_1) && ( !defined(MBEDTLS_MD5_C) ||     \
N    !defined(MBEDTLS_SHA1_C) )
X#if 0L && ( !0L ||         !0L )
S#error "MBEDTLS_SSL_PROTO_TLS1_1 defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && ( !defined(MBEDTLS_SHA1_C) &&     \
N    !defined(MBEDTLS_SHA256_C) && !defined(MBEDTLS_SHA512_C) )
X#if 0L && ( !0L &&         !0L && !0L )
S#error "MBEDTLS_SSL_PROTO_TLS1_2 defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_PROTO_DTLS)     && \
N    !defined(MBEDTLS_SSL_PROTO_TLS1_1)  && \
N    !defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if 0L     &&     !0L  &&     !0L
S#error "MBEDTLS_SSL_PROTO_DTLS defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_CLI_C) && !defined(MBEDTLS_SSL_TLS_C)
X#if 0L && !0L
S#error "MBEDTLS_SSL_CLI_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_TLS_C) && ( !defined(MBEDTLS_CIPHER_C) ||     \
N    !defined(MBEDTLS_MD_C) )
X#if 0L && ( !0L ||         !0L )
S#error "MBEDTLS_SSL_TLS_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_SRV_C) && !defined(MBEDTLS_SSL_TLS_C)
X#if 0L && !0L
S#error "MBEDTLS_SSL_SRV_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_TLS_C) && (!defined(MBEDTLS_SSL_PROTO_SSL3) && \
N    !defined(MBEDTLS_SSL_PROTO_TLS1) && !defined(MBEDTLS_SSL_PROTO_TLS1_1) && \
N    !defined(MBEDTLS_SSL_PROTO_TLS1_2))
X#if 0L && (!0L &&     !0L && !0L &&     !0L)
S#error "MBEDTLS_SSL_TLS_C defined, but no protocols are active"
N#endif
N
N#if defined(MBEDTLS_SSL_TLS_C) && (defined(MBEDTLS_SSL_PROTO_SSL3) && \
N    defined(MBEDTLS_SSL_PROTO_TLS1_1) && !defined(MBEDTLS_SSL_PROTO_TLS1))
X#if 0L && (0L &&     0L && !0L)
S#error "Illegal protocol selection"
N#endif
N
N#if defined(MBEDTLS_SSL_TLS_C) && (defined(MBEDTLS_SSL_PROTO_TLS1) && \
N    defined(MBEDTLS_SSL_PROTO_TLS1_2) && !defined(MBEDTLS_SSL_PROTO_TLS1_1))
X#if 0L && (0L &&     0L && !0L)
S#error "Illegal protocol selection"
N#endif
N
N#if defined(MBEDTLS_SSL_TLS_C) && (defined(MBEDTLS_SSL_PROTO_SSL3) && \
N    defined(MBEDTLS_SSL_PROTO_TLS1_2) && (!defined(MBEDTLS_SSL_PROTO_TLS1) || \
N    !defined(MBEDTLS_SSL_PROTO_TLS1_1)))
X#if 0L && (0L &&     0L && (!0L ||     !0L))
S#error "Illegal protocol selection"
N#endif
N
N#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && !defined(MBEDTLS_SSL_PROTO_DTLS)
X#if 0L && !0L
S#error "MBEDTLS_SSL_DTLS_HELLO_VERIFY  defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && \
N    !defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)
X#if 0L &&     !0L
S#error "MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE  defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY) &&                              \
N    ( !defined(MBEDTLS_SSL_TLS_C) || !defined(MBEDTLS_SSL_PROTO_DTLS) )
X#if 0L &&                                  ( !0L || !0L )
S#error "MBEDTLS_SSL_DTLS_ANTI_REPLAY  defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT) &&                              \
N    ( !defined(MBEDTLS_SSL_TLS_C) || !defined(MBEDTLS_SSL_PROTO_DTLS) )
X#if 0L &&                                  ( !0L || !0L )
S#error "MBEDTLS_SSL_DTLS_BADMAC_LIMIT  defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC) &&   \
N    !defined(MBEDTLS_SSL_PROTO_TLS1)   &&      \
N    !defined(MBEDTLS_SSL_PROTO_TLS1_1) &&      \
N    !defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if 0L &&       !0L   &&          !0L &&          !0L
S#error "MBEDTLS_SSL_ENCRYPT_THEN_MAC defined, but not all prerequsites"
N#endif
N
N#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET) && \
N    !defined(MBEDTLS_SSL_PROTO_TLS1)   &&          \
N    !defined(MBEDTLS_SSL_PROTO_TLS1_1) &&          \
N    !defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if 0L &&     !0L   &&              !0L &&              !0L
S#error "MBEDTLS_SSL_EXTENDED_MASTER_SECRET defined, but not all prerequsites"
N#endif
N
N#if defined(MBEDTLS_SSL_TICKET_C) && !defined(MBEDTLS_CIPHER_C)
X#if 0L && !0L
S#error "MBEDTLS_SSL_TICKET_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING) && \
N    !defined(MBEDTLS_SSL_PROTO_SSL3) && !defined(MBEDTLS_SSL_PROTO_TLS1)
X#if 0L &&     !0L && !0L
S#error "MBEDTLS_SSL_CBC_RECORD_SPLITTING defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION) && \
N        !defined(MBEDTLS_X509_CRT_PARSE_C)
X#if 0L &&         !0L
S#error "MBEDTLS_SSL_SERVER_NAME_INDICATION defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_THREADING_PTHREAD)
X#if 0L
S#if !defined(MBEDTLS_THREADING_C) || defined(MBEDTLS_THREADING_IMPL)
S#error "MBEDTLS_THREADING_PTHREAD defined, but not all prerequisites"
S#endif
S#define MBEDTLS_THREADING_IMPL
N#endif
N
N#if defined(MBEDTLS_THREADING_ALT)
X#if 0L
S#if !defined(MBEDTLS_THREADING_C) || defined(MBEDTLS_THREADING_IMPL)
S#error "MBEDTLS_THREADING_ALT defined, but not all prerequisites"
S#endif
S#define MBEDTLS_THREADING_IMPL
N#endif
N
N#if defined(MBEDTLS_THREADING_C) && !defined(MBEDTLS_THREADING_IMPL)
X#if 0L && !0L
S#error "MBEDTLS_THREADING_C defined, single threading implementation required"
N#endif
N#undef MBEDTLS_THREADING_IMPL
N
N#if defined(MBEDTLS_VERSION_FEATURES) && !defined(MBEDTLS_VERSION_C)
X#if 0L && !0L
S#error "MBEDTLS_VERSION_FEATURES defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_X509_USE_C) && ( !defined(MBEDTLS_BIGNUM_C) ||  \
N    !defined(MBEDTLS_OID_C) || !defined(MBEDTLS_ASN1_PARSE_C) ||      \
N    !defined(MBEDTLS_PK_PARSE_C) )
X#if 0L && ( !0L ||      !0L || !0L ||          !0L )
S#error "MBEDTLS_X509_USE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_X509_CREATE_C) && ( !defined(MBEDTLS_BIGNUM_C) ||  \
N    !defined(MBEDTLS_OID_C) || !defined(MBEDTLS_ASN1_WRITE_C) ||       \
N    !defined(MBEDTLS_PK_WRITE_C) )
X#if 0L && ( !0L ||      !0L || !0L ||           !0L )
S#error "MBEDTLS_X509_CREATE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_X509_CRT_PARSE_C) && ( !defined(MBEDTLS_X509_USE_C) )
X#if 0L && ( !0L )
S#error "MBEDTLS_X509_CRT_PARSE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_X509_CRL_PARSE_C) && ( !defined(MBEDTLS_X509_USE_C) )
X#if 0L && ( !0L )
S#error "MBEDTLS_X509_CRL_PARSE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_X509_CSR_PARSE_C) && ( !defined(MBEDTLS_X509_USE_C) )
X#if 0L && ( !0L )
S#error "MBEDTLS_X509_CSR_PARSE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_X509_CRT_WRITE_C) && ( !defined(MBEDTLS_X509_CREATE_C) )
X#if 0L && ( !0L )
S#error "MBEDTLS_X509_CRT_WRITE_C defined, but not all prerequisites"
N#endif
N
N#if defined(MBEDTLS_X509_CSR_WRITE_C) && ( !defined(MBEDTLS_X509_CREATE_C) )
X#if 0L && ( !0L )
S#error "MBEDTLS_X509_CSR_WRITE_C defined, but not all prerequisites"
N#endif
N
N/*
N * Avoid warning from -pedantic. This is a convenient place for this
N * workaround since this is included by every single file before the
N * #if defined(MBEDTLS_xxx_C) that results in emtpy translation units.
N */
Ntypedef int mbedtls_iso_c_forbids_empty_translation_units;
N
N#endif /* MBEDTLS_CHECK_CONFIG_H */
L 186 ".\RTE\Security\mbedTLS_config.h" 2
N
N#endif /* MBEDTLS_CONFIG_H */
L 30 "C:\Keil_v5\ARM\PACK\ARM\mbedTLS\1.1.1\include\mbedtls/config.h" 2
N#endif
N
N#ifndef MBEDTLS_CONFIG_H
S#define MBEDTLS_CONFIG_H
S
S#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
S#define _CRT_SECURE_NO_DEPRECATE 1
S#endif
S
S/**
S * \name SECTION: System support
S *
S * This section sets system specific settings.
S * \{
S */
S
S/**
S * \def MBEDTLS_HAVE_ASM
S *
S * The compiler has support for asm().
S *
S * Requires support for asm() in compiler.
S *
S * Used in:
S *      library/timing.c
S *      library/padlock.c
S *      include/mbedtls/bn_mul.h
S *
S * Comment to disable the use of assembly code.
S */
S#define MBEDTLS_HAVE_ASM
S
S/**
S * \def MBEDTLS_HAVE_SSE2
S *
S * CPU supports SSE2 instruction set.
S *
S * Uncomment if the CPU supports SSE2 (IA-32 specific).
S */
S//#define MBEDTLS_HAVE_SSE2
S
S/**
S * \def MBEDTLS_HAVE_TIME
S *
S * System has time.h and time().
S * The time does not need to be correct, only time differences are used,
S * by contrast with MBEDTLS_HAVE_TIME_DATE
S *
S * Comment if your system does not support time functions
S */
S#define MBEDTLS_HAVE_TIME
S
S/**
S * \def MBEDTLS_HAVE_TIME_DATE
S *
S * System has time.h and time(), gmtime() and the clock is correct.
S * The time needs to be correct (not necesarily very accurate, but at least
S * the date should be correct). This is used to verify the validity period of
S * X.509 certificates.
S *
S * Comment if your system does not have a correct clock.
S */
S#define MBEDTLS_HAVE_TIME_DATE
S
S/**
S * \def MBEDTLS_PLATFORM_MEMORY
S *
S * Enable the memory allocation layer.
S *
S * By default mbed TLS uses the system-provided calloc() and free().
S * This allows different allocators (self-implemented or provided) to be
S * provided to the platform abstraction layer.
S *
S * Enabling MBEDTLS_PLATFORM_MEMORY without the
S * MBEDTLS_PLATFORM_{FREE,CALLOC}_MACROs will provide
S * "mbedtls_platform_set_calloc_free()" allowing you to set an alternative calloc() and
S * free() function pointer at runtime.
S *
S * Enabling MBEDTLS_PLATFORM_MEMORY and specifying
S * MBEDTLS_PLATFORM_{CALLOC,FREE}_MACROs will allow you to specify the
S * alternate function at compile time.
S *
S * Requires: MBEDTLS_PLATFORM_C
S *
S * Enable this layer to allow use of alternative memory allocators.
S */
S//#define MBEDTLS_PLATFORM_MEMORY
S
S/**
S * \def MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
S *
S * Do not assign standard functions in the platform layer (e.g. calloc() to
S * MBEDTLS_PLATFORM_STD_CALLOC and printf() to MBEDTLS_PLATFORM_STD_PRINTF)
S *
S * This makes sure there are no linking errors on platforms that do not support
S * these functions. You will HAVE to provide alternatives, either at runtime
S * via the platform_set_xxx() functions or at compile time by setting
S * the MBEDTLS_PLATFORM_STD_XXX defines, or enabling a
S * MBEDTLS_PLATFORM_XXX_MACRO.
S *
S * Requires: MBEDTLS_PLATFORM_C
S *
S * Uncomment to prevent default assignment of standard functions in the
S * platform layer.
S */
S//#define MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
S
S/**
S * \def MBEDTLS_PLATFORM_EXIT_ALT
S *
S * MBEDTLS_PLATFORM_XXX_ALT: Uncomment a macro to let mbed TLS support the
S * function in the platform abstraction layer.
S *
S * Example: In case you uncomment MBEDTLS_PLATFORM_PRINTF_ALT, mbed TLS will
S * provide a function "mbedtls_platform_set_printf()" that allows you to set an
S * alternative printf function pointer.
S *
S * All these define require MBEDTLS_PLATFORM_C to be defined!
S *
S * \note MBEDTLS_PLATFORM_SNPRINTF_ALT is required on Windows;
S * it will be enabled automatically by check_config.h
S *
S * \warning MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as
S * MBEDTLS_PLATFORM_XXX_MACRO!
S *
S * Uncomment a macro to enable alternate implementation of specific base
S * platform function
S */
S//#define MBEDTLS_PLATFORM_EXIT_ALT
S//#define MBEDTLS_PLATFORM_FPRINTF_ALT
S//#define MBEDTLS_PLATFORM_PRINTF_ALT
S//#define MBEDTLS_PLATFORM_SNPRINTF_ALT
S
S/**
S * \def MBEDTLS_DEPRECATED_WARNING
S *
S * Mark deprecated functions so that they generate a warning if used.
S * Functions deprecated in one version will usually be removed in the next
S * version. You can enable this to help you prepare the transition to a new
S * major version by making sure your code is not using these functions.
S *
S * This only works with GCC and Clang. With other compilers, you may want to
S * use MBEDTLS_DEPRECATED_REMOVED
S *
S * Uncomment to get warnings on using deprecated functions.
S */
S//#define MBEDTLS_DEPRECATED_WARNING
S
S/**
S * \def MBEDTLS_DEPRECATED_REMOVED
S *
S * Remove deprecated functions so that they generate an error if used.
S * Functions deprecated in one version will usually be removed in the next
S * version. You can enable this to help you prepare the transition to a new
S * major version by making sure your code is not using these functions.
S *
S * Uncomment to get errors on using deprecated functions.
S */
S//#define MBEDTLS_DEPRECATED_REMOVED
S
S/* \} name SECTION: System support */
S
S/**
S * \name SECTION: mbed TLS feature support
S *
S * This section sets support for features that are or are not needed
S * within the modules that are enabled.
S * \{
S */
S
S/**
S * \def MBEDTLS_TIMING_ALT
S *
S * Uncomment to provide your own alternate implementation for mbedtls_timing_hardclock(),
S * mbedtls_timing_get_timer(), mbedtls_set_alarm(), mbedtls_set/get_delay()
S *
S * Only works if you have MBEDTLS_TIMING_C enabled.
S *
S * You will need to provide a header "timing_alt.h" and an implementation at
S * compile time.
S */
S//#define MBEDTLS_TIMING_ALT
S
S/**
S * \def MBEDTLS_AES_ALT
S *
S * MBEDTLS__MODULE_NAME__ALT: Uncomment a macro to let mbed TLS use your
S * alternate core implementation of a symmetric crypto or hash module (e.g.
S * platform specific assembly optimized implementations). Keep in mind that
S * the function prototypes should remain the same.
S *
S * This replaces the whole module. If you only want to replace one of the
S * functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags.
S *
S * Example: In case you uncomment MBEDTLS_AES_ALT, mbed TLS will no longer
S * provide the "struct mbedtls_aes_context" definition and omit the base function
S * declarations and implementations. "aes_alt.h" will be included from
S * "aes.h" to include the new function definitions.
S *
S * Uncomment a macro to enable alternate implementation of the corresponding
S * module.
S */
S//#define MBEDTLS_AES_ALT
S//#define MBEDTLS_ARC4_ALT
S//#define MBEDTLS_BLOWFISH_ALT
S//#define MBEDTLS_CAMELLIA_ALT
S//#define MBEDTLS_DES_ALT
S//#define MBEDTLS_XTEA_ALT
S//#define MBEDTLS_MD2_ALT
S//#define MBEDTLS_MD4_ALT
S//#define MBEDTLS_MD5_ALT
S//#define MBEDTLS_RIPEMD160_ALT
S//#define MBEDTLS_SHA1_ALT
S//#define MBEDTLS_SHA256_ALT
S//#define MBEDTLS_SHA512_ALT
S
S/**
S * \def MBEDTLS_MD2_PROCESS_ALT
S *
S * MBEDTLS__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use you
S * alternate core implementation of symmetric crypto or hash function. Keep in
S * mind that function prototypes should remain the same.
S *
S * This replaces only one function. The header file from mbed TLS is still
S * used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.
S *
S * Example: In case you uncomment MBEDTLS_SHA256_PROCESS_ALT, mbed TLS will
S * no longer provide the mbedtls_sha1_process() function, but it will still provide
S * the other function (using your mbedtls_sha1_process() function) and the definition
S * of mbedtls_sha1_context, so your implementation of mbedtls_sha1_process must be compatible
S * with this definition.
S *
S * Note: if you use the AES_xxx_ALT macros, then is is recommended to also set
S * MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES
S * tables.
S *
S * Uncomment a macro to enable alternate implementation of the corresponding
S * function.
S */
S//#define MBEDTLS_MD2_PROCESS_ALT
S//#define MBEDTLS_MD4_PROCESS_ALT
S//#define MBEDTLS_MD5_PROCESS_ALT
S//#define MBEDTLS_RIPEMD160_PROCESS_ALT
S//#define MBEDTLS_SHA1_PROCESS_ALT
S//#define MBEDTLS_SHA256_PROCESS_ALT
S//#define MBEDTLS_SHA512_PROCESS_ALT
S//#define MBEDTLS_DES_SETKEY_ALT
S//#define MBEDTLS_DES_CRYPT_ECB_ALT
S//#define MBEDTLS_DES3_CRYPT_ECB_ALT
S//#define MBEDTLS_AES_SETKEY_ENC_ALT
S//#define MBEDTLS_AES_SETKEY_DEC_ALT
S//#define MBEDTLS_AES_ENCRYPT_ALT
S//#define MBEDTLS_AES_DECRYPT_ALT
S
S/**
S * \def MBEDTLS_ENTROPY_HARDWARE_ALT
S *
S * Uncomment this macro to let mbed TLS use your own implementation of a
S * hardware entropy collector.
S *
S * Your function must be called \c mbedtls_hardware_poll(), have the same
S * prototype as declared in entropy_poll.h, and accept NULL as first argument.
S *
S * Uncomment to use your own hardware entropy collector.
S */
S//#define MBEDTLS_ENTROPY_HARDWARE_ALT
S
S/**
S * \def MBEDTLS_AES_ROM_TABLES
S *
S * Store the AES tables in ROM.
S *
S * Uncomment this macro to store the AES tables in ROM.
S */
S//#define MBEDTLS_AES_ROM_TABLES
S
S/**
S * \def MBEDTLS_CAMELLIA_SMALL_MEMORY
S *
S * Use less ROM for the Camellia implementation (saves about 768 bytes).
S *
S * Uncomment this macro to use less memory for Camellia.
S */
S//#define MBEDTLS_CAMELLIA_SMALL_MEMORY
S
S/**
S * \def MBEDTLS_CIPHER_MODE_CBC
S *
S * Enable Cipher Block Chaining mode (CBC) for symmetric ciphers.
S */
S#define MBEDTLS_CIPHER_MODE_CBC
S
S/**
S * \def MBEDTLS_CIPHER_MODE_CFB
S *
S * Enable Cipher Feedback mode (CFB) for symmetric ciphers.
S */
S#define MBEDTLS_CIPHER_MODE_CFB
S
S/**
S * \def MBEDTLS_CIPHER_MODE_CTR
S *
S * Enable Counter Block Cipher mode (CTR) for symmetric ciphers.
S */
S#define MBEDTLS_CIPHER_MODE_CTR
S
S/**
S * \def MBEDTLS_CIPHER_NULL_CIPHER
S *
S * Enable NULL cipher.
S * Warning: Only do so when you know what you are doing. This allows for
S * encryption or channels without any security!
S *
S * Requires MBEDTLS_ENABLE_WEAK_CIPHERSUITES as well to enable
S * the following ciphersuites:
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384
S *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256
S *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA
S *      MBEDTLS_TLS_RSA_WITH_NULL_SHA256
S *      MBEDTLS_TLS_RSA_WITH_NULL_SHA
S *      MBEDTLS_TLS_RSA_WITH_NULL_MD5
S *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256
S *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA
S *      MBEDTLS_TLS_PSK_WITH_NULL_SHA384
S *      MBEDTLS_TLS_PSK_WITH_NULL_SHA256
S *      MBEDTLS_TLS_PSK_WITH_NULL_SHA
S *
S * Uncomment this macro to enable the NULL cipher and ciphersuites
S */
S//#define MBEDTLS_CIPHER_NULL_CIPHER
S
S/**
S * \def MBEDTLS_CIPHER_PADDING_PKCS7
S *
S * MBEDTLS_CIPHER_PADDING_XXX: Uncomment or comment macros to add support for
S * specific padding modes in the cipher layer with cipher modes that support
S * padding (e.g. CBC)
S *
S * If you disable all padding modes, only full blocks can be used with CBC.
S *
S * Enable padding modes in the cipher layer.
S */
S#define MBEDTLS_CIPHER_PADDING_PKCS7
S#define MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS
S#define MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN
S#define MBEDTLS_CIPHER_PADDING_ZEROS
S
S/**
S * \def MBEDTLS_ENABLE_WEAK_CIPHERSUITES
S *
S * Enable weak ciphersuites in SSL / TLS.
S * Warning: Only do so when you know what you are doing. This allows for
S * channels with virtually no security at all!
S *
S * This enables the following ciphersuites:
S *      MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA
S *      MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA
S *
S * Uncomment this macro to enable weak ciphersuites
S */
S//#define MBEDTLS_ENABLE_WEAK_CIPHERSUITES
S
S/**
S * \def MBEDTLS_REMOVE_ARC4_CIPHERSUITES
S *
S * Remove RC4 ciphersuites by default in SSL / TLS.
S * This flag removes the ciphersuites based on RC4 from the default list as
S * returned by mbedtls_ssl_list_ciphersuites(). However, it is still possible to
S * enable (some of) them with mbedtls_ssl_conf_ciphersuites() by including them
S * explicitly.
S *
S * Uncomment this macro to remove RC4 ciphersuites by default.
S */
S#define MBEDTLS_REMOVE_ARC4_CIPHERSUITES
S
S/**
S * \def MBEDTLS_ECP_DP_SECP192R1_ENABLED
S *
S * MBEDTLS_ECP_XXXX_ENABLED: Enables specific curves within the Elliptic Curve
S * module.  By default all supported curves are enabled.
S *
S * Comment macros to disable the curve and functions for it
S */
S#define MBEDTLS_ECP_DP_SECP192R1_ENABLED
S#define MBEDTLS_ECP_DP_SECP224R1_ENABLED
S#define MBEDTLS_ECP_DP_SECP256R1_ENABLED
S#define MBEDTLS_ECP_DP_SECP384R1_ENABLED
S#define MBEDTLS_ECP_DP_SECP521R1_ENABLED
S#define MBEDTLS_ECP_DP_SECP192K1_ENABLED
S#define MBEDTLS_ECP_DP_SECP224K1_ENABLED
S#define MBEDTLS_ECP_DP_SECP256K1_ENABLED
S#define MBEDTLS_ECP_DP_BP256R1_ENABLED
S#define MBEDTLS_ECP_DP_BP384R1_ENABLED
S#define MBEDTLS_ECP_DP_BP512R1_ENABLED
S#define MBEDTLS_ECP_DP_CURVE25519_ENABLED
S
S/**
S * \def MBEDTLS_ECP_NIST_OPTIM
S *
S * Enable specific 'modulo p' routines for each NIST prime.
S * Depending on the prime and architecture, makes operations 4 to 8 times
S * faster on the corresponding curve.
S *
S * Comment this macro to disable NIST curves optimisation.
S */
S#define MBEDTLS_ECP_NIST_OPTIM
S
S/**
S * \def MBEDTLS_ECDSA_DETERMINISTIC
S *
S * Enable deterministic ECDSA (RFC 6979).
S * Standard ECDSA is "fragile" in the sense that lack of entropy when signing
S * may result in a compromise of the long-term signing key. This is avoided by
S * the deterministic variant.
S *
S * Requires: MBEDTLS_HMAC_DRBG_C
S *
S * Comment this macro to disable deterministic ECDSA.
S */
S#define MBEDTLS_ECDSA_DETERMINISTIC
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_PSK_ENABLED
S *
S * Enable the PSK based ciphersuite modes in SSL / TLS.
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_PSK_WITH_RC4_128_SHA
S */
S#define MBEDTLS_KEY_EXCHANGE_PSK_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED
S *
S * Enable the DHE-PSK based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_DHM_C
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA
S */
S#define MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
S *
S * Enable the ECDHE-PSK based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_ECDH_C
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA
S */
S#define MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
S *
S * Enable the RSA-PSK based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,
S *           MBEDTLS_X509_CRT_PARSE_C
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA
S */
S#define MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
S *
S * Enable the RSA-only based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,
S *           MBEDTLS_X509_CRT_PARSE_C
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_RSA_WITH_RC4_128_MD5
S */
S#define MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
S *
S * Enable the DHE-RSA based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_DHM_C, MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,
S *           MBEDTLS_X509_CRT_PARSE_C
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
S *      MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
S */
S#define MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
S *
S * Enable the ECDHE-RSA based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_ECDH_C, MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,
S *           MBEDTLS_X509_CRT_PARSE_C
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA
S */
S#define MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
S *
S * Enable the ECDHE-ECDSA based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_ECDH_C, MBEDTLS_ECDSA_C, MBEDTLS_X509_CRT_PARSE_C,
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
S */
S#define MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED
S *
S * Enable the ECDH-ECDSA based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_ECDH_C, MBEDTLS_X509_CRT_PARSE_C
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
S */
S#define MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
S *
S * Enable the ECDH-RSA based ciphersuite modes in SSL / TLS.
S *
S * Requires: MBEDTLS_ECDH_C, MBEDTLS_X509_CRT_PARSE_C
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384
S */
S#define MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
S
S/**
S * \def MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
S *
S * Enable the ECJPAKE based ciphersuite modes in SSL / TLS.
S *
S * \warning This is currently experimental. EC J-PAKE support is based on the
S * Thread v1.0.0 specification; incompatible changes to the specification
S * might still happen. For this reason, this is disabled by default.
S *
S * Requires: MBEDTLS_ECJPAKE_C
S *           MBEDTLS_SHA256_C
S *           MBEDTLS_ECP_DP_SECP256R1_ENABLED
S *
S * This enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8
S */
S//#define MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
S
S/**
S * \def MBEDTLS_PK_PARSE_EC_EXTENDED
S *
S * Enhance support for reading EC keys using variants of SEC1 not allowed by
S * RFC 5915 and RFC 5480.
S *
S * Currently this means parsing the SpecifiedECDomain choice of EC
S * parameters (only known groups are supported, not arbitrary domains, to
S * avoid validation issues).
S *
S * Disable if you only need to support RFC 5915 + 5480 key formats.
S */
S#define MBEDTLS_PK_PARSE_EC_EXTENDED
S
S/**
S * \def MBEDTLS_ERROR_STRERROR_DUMMY
S *
S * Enable a dummy error function to make use of mbedtls_strerror() in
S * third party libraries easier when MBEDTLS_ERROR_C is disabled
S * (no effect when MBEDTLS_ERROR_C is enabled).
S *
S * You can safely disable this if MBEDTLS_ERROR_C is enabled, or if you're
S * not using mbedtls_strerror() or error_strerror() in your application.
S *
S * Disable if you run into name conflicts and want to really remove the
S * mbedtls_strerror()
S */
S#define MBEDTLS_ERROR_STRERROR_DUMMY
S
S/**
S * \def MBEDTLS_GENPRIME
S *
S * Enable the prime-number generation code.
S *
S * Requires: MBEDTLS_BIGNUM_C
S */
S#define MBEDTLS_GENPRIME
S
S/**
S * \def MBEDTLS_FS_IO
S *
S * Enable functions that use the filesystem.
S */
S#define MBEDTLS_FS_IO
S
S/**
S * \def MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES
S *
S * Do not add default entropy sources. These are the platform specific,
S * mbedtls_timing_hardclock and HAVEGE based poll functions.
S *
S * This is useful to have more control over the added entropy sources in an
S * application.
S *
S * Uncomment this macro to prevent loading of default entropy functions.
S */
S//#define MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES
S
S/**
S * \def MBEDTLS_NO_PLATFORM_ENTROPY
S *
S * Do not use built-in platform entropy functions.
S * This is useful if your platform does not support
S * standards like the /dev/urandom or Windows CryptoAPI.
S *
S * Uncomment this macro to disable the built-in platform entropy functions.
S */
S//#define MBEDTLS_NO_PLATFORM_ENTROPY
S
S/**
S * \def MBEDTLS_ENTROPY_FORCE_SHA256
S *
S * Force the entropy accumulator to use a SHA-256 accumulator instead of the
S * default SHA-512 based one (if both are available).
S *
S * Requires: MBEDTLS_SHA256_C
S *
S * On 32-bit systems SHA-256 can be much faster than SHA-512. Use this option
S * if you have performance concerns.
S *
S * This option is only useful if both MBEDTLS_SHA256_C and
S * MBEDTLS_SHA512_C are defined. Otherwise the available hash module is used.
S */
S//#define MBEDTLS_ENTROPY_FORCE_SHA256
S
S/**
S * \def MBEDTLS_MEMORY_DEBUG
S *
S * Enable debugging of buffer allocator memory issues. Automatically prints
S * (to stderr) all (fatal) messages on memory allocation issues. Enables
S * function for 'debug output' of allocated memory.
S *
S * Requires: MBEDTLS_MEMORY_BUFFER_ALLOC_C
S *
S * Uncomment this macro to let the buffer allocator print out error messages.
S */
S//#define MBEDTLS_MEMORY_DEBUG
S
S/**
S * \def MBEDTLS_MEMORY_BACKTRACE
S *
S * Include backtrace information with each allocated block.
S *
S * Requires: MBEDTLS_MEMORY_BUFFER_ALLOC_C
S *           GLIBC-compatible backtrace() an backtrace_symbols() support
S *
S * Uncomment this macro to include backtrace information
S */
S//#define MBEDTLS_MEMORY_BACKTRACE
S
S/**
S * \def MBEDTLS_PK_RSA_ALT_SUPPORT
S *
S * Support external private RSA keys (eg from a HSM) in the PK layer.
S *
S * Comment this macro to disable support for external private RSA keys.
S */
S#define MBEDTLS_PK_RSA_ALT_SUPPORT
S
S/**
S * \def MBEDTLS_PKCS1_V15
S *
S * Enable support for PKCS#1 v1.5 encoding.
S *
S * Requires: MBEDTLS_RSA_C
S *
S * This enables support for PKCS#1 v1.5 operations.
S */
S#define MBEDTLS_PKCS1_V15
S
S/**
S * \def MBEDTLS_PKCS1_V21
S *
S * Enable support for PKCS#1 v2.1 encoding.
S *
S * Requires: MBEDTLS_MD_C, MBEDTLS_RSA_C
S *
S * This enables support for RSAES-OAEP and RSASSA-PSS operations.
S */
S#define MBEDTLS_PKCS1_V21
S
S/**
S * \def MBEDTLS_RSA_NO_CRT
S *
S * Do not use the Chinese Remainder Theorem for the RSA private operation.
S *
S * Uncomment this macro to disable the use of CRT in RSA.
S *
S */
S//#define MBEDTLS_RSA_NO_CRT
S
S/**
S * \def MBEDTLS_SELF_TEST
S *
S * Enable the checkup functions (*_self_test).
S */
S#define MBEDTLS_SELF_TEST
S
S/**
S * \def MBEDTLS_SHA256_SMALLER
S *
S * Enable an implementation of SHA-256 that has lower ROM footprint but also
S * lower performance.
S *
S * The default implementation is meant to be a reasonnable compromise between
S * performance and size. This version optimizes more aggressively for size at
S * the expense of performance. Eg on Cortex-M4 it reduces the size of
S * mbedtls_sha256_process() from ~2KB to ~0.5KB for a performance hit of about
S * 30%.
S *
S * Uncomment to enable the smaller implementation of SHA256.
S */
S//#define MBEDTLS_SHA256_SMALLER
S
S/**
S * \def MBEDTLS_SSL_AEAD_RANDOM_IV
S *
S * Generate a random IV rather than using the record sequence number as a
S * nonce for ciphersuites using and AEAD algorithm (GCM or CCM).
S *
S * Using the sequence number is generally recommended.
S *
S * Uncomment this macro to always use random IVs with AEAD ciphersuites.
S */
S//#define MBEDTLS_SSL_AEAD_RANDOM_IV
S
S/**
S * \def MBEDTLS_SSL_ALL_ALERT_MESSAGES
S *
S * Enable sending of alert messages in case of encountered errors as per RFC.
S * If you choose not to send the alert messages, mbed TLS can still communicate
S * with other servers, only debugging of failures is harder.
S *
S * The advantage of not sending alert messages, is that no information is given
S * about reasons for failures thus preventing adversaries of gaining intel.
S *
S * Enable sending of all alert messages
S */
S#define MBEDTLS_SSL_ALL_ALERT_MESSAGES
S
S/**
S * \def MBEDTLS_SSL_DEBUG_ALL
S *
S * Enable the debug messages in SSL module for all issues.
S * Debug messages have been disabled in some places to prevent timing
S * attacks due to (unbalanced) debugging function calls.
S *
S * If you need all error reporting you should enable this during debugging,
S * but remove this for production servers that should log as well.
S *
S * Uncomment this macro to report all debug messages on errors introducing
S * a timing side-channel.
S *
S */
S//#define MBEDTLS_SSL_DEBUG_ALL
S
S/** \def MBEDTLS_SSL_ENCRYPT_THEN_MAC
S *
S * Enable support for Encrypt-then-MAC, RFC 7366.
S *
S * This allows peers that both support it to use a more robust protection for
S * ciphersuites using CBC, providing deep resistance against timing attacks
S * on the padding or underlying cipher.
S *
S * This only affects CBC ciphersuites, and is useless if none is defined.
S *
S * Requires: MBEDTLS_SSL_PROTO_TLS1    or
S *           MBEDTLS_SSL_PROTO_TLS1_1  or
S *           MBEDTLS_SSL_PROTO_TLS1_2
S *
S * Comment this macro to disable support for Encrypt-then-MAC
S */
S#define MBEDTLS_SSL_ENCRYPT_THEN_MAC
S
S/** \def MBEDTLS_SSL_EXTENDED_MASTER_SECRET
S *
S * Enable support for Extended Master Secret, aka Session Hash
S * (draft-ietf-tls-session-hash-02).
S *
S * This was introduced as "the proper fix" to the Triple Handshake familiy of
S * attacks, but it is recommended to always use it (even if you disable
S * renegotiation), since it actually fixes a more fundamental issue in the
S * original SSL/TLS design, and has implications beyond Triple Handshake.
S *
S * Requires: MBEDTLS_SSL_PROTO_TLS1    or
S *           MBEDTLS_SSL_PROTO_TLS1_1  or
S *           MBEDTLS_SSL_PROTO_TLS1_2
S *
S * Comment this macro to disable support for Extended Master Secret.
S */
S#define MBEDTLS_SSL_EXTENDED_MASTER_SECRET
S
S/**
S * \def MBEDTLS_SSL_FALLBACK_SCSV
S *
S * Enable support for FALLBACK_SCSV (draft-ietf-tls-downgrade-scsv-00).
S *
S * For servers, it is recommended to always enable this, unless you support
S * only one version of TLS, or know for sure that none of your clients
S * implements a fallback strategy.
S *
S * For clients, you only need this if you're using a fallback strategy, which
S * is not recommended in the first place, unless you absolutely need it to
S * interoperate with buggy (version-intolerant) servers.
S *
S * Comment this macro to disable support for FALLBACK_SCSV
S */
S#define MBEDTLS_SSL_FALLBACK_SCSV
S
S/**
S * \def MBEDTLS_SSL_HW_RECORD_ACCEL
S *
S * Enable hooking functions in SSL module for hardware acceleration of
S * individual records.
S *
S * Uncomment this macro to enable hooking functions.
S */
S//#define MBEDTLS_SSL_HW_RECORD_ACCEL
S
S/**
S * \def MBEDTLS_SSL_CBC_RECORD_SPLITTING
S *
S * Enable 1/n-1 record splitting for CBC mode in SSLv3 and TLS 1.0.
S *
S * This is a countermeasure to the BEAST attack, which also minimizes the risk
S * of interoperability issues compared to sending 0-length records.
S *
S * Comment this macro to disable 1/n-1 record splitting.
S */
S#define MBEDTLS_SSL_CBC_RECORD_SPLITTING
S
S/**
S * \def MBEDTLS_SSL_RENEGOTIATION
S *
S * Disable support for TLS renegotiation.
S *
S * The two main uses of renegotiation are (1) refresh keys on long-lived
S * connections and (2) client authentication after the initial handshake.
S * If you don't need renegotiation, it's probably better to disable it, since
S * it has been associated with security issues in the past and is easy to
S * misuse/misunderstand.
S *
S * Comment this to disable support for renegotiation.
S */
S#define MBEDTLS_SSL_RENEGOTIATION
S
S/**
S * \def MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO
S *
S * Enable support for receiving and parsing SSLv2 Client Hello messages for the
S * SSL Server module (MBEDTLS_SSL_SRV_C).
S *
S * Uncomment this macro to enable support for SSLv2 Client Hello messages.
S */
S//#define MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO
S
S/**
S * \def MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE
S *
S * Pick the ciphersuite according to the client's preferences rather than ours
S * in the SSL Server module (MBEDTLS_SSL_SRV_C).
S *
S * Uncomment this macro to respect client's ciphersuite order
S */
S//#define MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE
S
S/**
S * \def MBEDTLS_SSL_MAX_FRAGMENT_LENGTH
S *
S * Enable support for RFC 6066 max_fragment_length extension in SSL.
S *
S * Comment this macro to disable support for the max_fragment_length extension
S */
S#define MBEDTLS_SSL_MAX_FRAGMENT_LENGTH
S
S/**
S * \def MBEDTLS_SSL_PROTO_SSL3
S *
S * Enable support for SSL 3.0.
S *
S * Requires: MBEDTLS_MD5_C
S *           MBEDTLS_SHA1_C
S *
S * Comment this macro to disable support for SSL 3.0
S */
S#define MBEDTLS_SSL_PROTO_SSL3
S
S/**
S * \def MBEDTLS_SSL_PROTO_TLS1
S *
S * Enable support for TLS 1.0.
S *
S * Requires: MBEDTLS_MD5_C
S *           MBEDTLS_SHA1_C
S *
S * Comment this macro to disable support for TLS 1.0
S */
S#define MBEDTLS_SSL_PROTO_TLS1
S
S/**
S * \def MBEDTLS_SSL_PROTO_TLS1_1
S *
S * Enable support for TLS 1.1 (and DTLS 1.0 if DTLS is enabled).
S *
S * Requires: MBEDTLS_MD5_C
S *           MBEDTLS_SHA1_C
S *
S * Comment this macro to disable support for TLS 1.1 / DTLS 1.0
S */
S#define MBEDTLS_SSL_PROTO_TLS1_1
S
S/**
S * \def MBEDTLS_SSL_PROTO_TLS1_2
S *
S * Enable support for TLS 1.2 (and DTLS 1.2 if DTLS is enabled).
S *
S * Requires: MBEDTLS_SHA1_C or MBEDTLS_SHA256_C or MBEDTLS_SHA512_C
S *           (Depends on ciphersuites)
S *
S * Comment this macro to disable support for TLS 1.2 / DTLS 1.2
S */
S#define MBEDTLS_SSL_PROTO_TLS1_2
S
S/**
S * \def MBEDTLS_SSL_PROTO_DTLS
S *
S * Enable support for DTLS (all available versions).
S *
S * Enable this and MBEDTLS_SSL_PROTO_TLS1_1 to enable DTLS 1.0,
S * and/or this and MBEDTLS_SSL_PROTO_TLS1_2 to enable DTLS 1.2.
S *
S * Requires: MBEDTLS_SSL_PROTO_TLS1_1
S *        or MBEDTLS_SSL_PROTO_TLS1_2
S *
S * Comment this macro to disable support for DTLS
S */
S#define MBEDTLS_SSL_PROTO_DTLS
S
S/**
S * \def MBEDTLS_SSL_ALPN
S *
S * Enable support for RFC 7301 Application Layer Protocol Negotiation.
S *
S * Comment this macro to disable support for ALPN.
S */
S#define MBEDTLS_SSL_ALPN
S
S/**
S * \def MBEDTLS_SSL_DTLS_ANTI_REPLAY
S *
S * Enable support for the anti-replay mechanism in DTLS.
S *
S * Requires: MBEDTLS_SSL_TLS_C
S *           MBEDTLS_SSL_PROTO_DTLS
S *
S * \warning Disabling this is often a security risk!
S * See mbedtls_ssl_conf_dtls_anti_replay() for details.
S *
S * Comment this to disable anti-replay in DTLS.
S */
S#define MBEDTLS_SSL_DTLS_ANTI_REPLAY
S
S/**
S * \def MBEDTLS_SSL_DTLS_HELLO_VERIFY
S *
S * Enable support for HelloVerifyRequest on DTLS servers.
S *
S * This feature is highly recommended to prevent DTLS servers being used as
S * amplifiers in DoS attacks against other hosts. It should always be enabled
S * unless you know for sure amplification cannot be a problem in the
S * environment in which your server operates.
S *
S * \warning Disabling this can ba a security risk! (see above)
S *
S * Requires: MBEDTLS_SSL_PROTO_DTLS
S *
S * Comment this to disable support for HelloVerifyRequest.
S */
S#define MBEDTLS_SSL_DTLS_HELLO_VERIFY
S
S/**
S * \def MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE
S *
S * Enable server-side support for clients that reconnect from the same port.
S *
S * Some clients unexpectedly close the connection and try to reconnect using the
S * same source port. This needs special support from the server to handle the
S * new connection securely, as described in section 4.2.8 of RFC 6347. This
S * flag enables that support.
S *
S * Requires: MBEDTLS_SSL_DTLS_HELLO_VERIFY
S *
S * Comment this to disable support for clients reusing the source port.
S */
S#define MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE
S
S/**
S * \def MBEDTLS_SSL_DTLS_BADMAC_LIMIT
S *
S * Enable support for a limit of records with bad MAC.
S *
S * See mbedtls_ssl_conf_dtls_badmac_limit().
S *
S * Requires: MBEDTLS_SSL_PROTO_DTLS
S */
S#define MBEDTLS_SSL_DTLS_BADMAC_LIMIT
S
S/**
S * \def MBEDTLS_SSL_SESSION_TICKETS
S *
S * Enable support for RFC 5077 session tickets in SSL.
S * Client-side, provides full support for session tickets (maintainance of a
S * session store remains the responsibility of the application, though).
S * Server-side, you also need to provide callbacks for writing and parsing
S * tickets, including authenticated encryption and key management. Example
S * callbacks are provided by MBEDTLS_SSL_TICKET_C.
S *
S * Comment this macro to disable support for SSL session tickets
S */
S#define MBEDTLS_SSL_SESSION_TICKETS
S
S/**
S * \def MBEDTLS_SSL_EXPORT_KEYS
S *
S * Enable support for exporting key block and master secret.
S * This is required for certain users of TLS, e.g. EAP-TLS.
S *
S * Comment this macro to disable support for key export
S */
S#define MBEDTLS_SSL_EXPORT_KEYS
S
S/**
S * \def MBEDTLS_SSL_SERVER_NAME_INDICATION
S *
S * Enable support for RFC 6066 server name indication (SNI) in SSL.
S *
S * Requires: MBEDTLS_X509_CRT_PARSE_C
S *
S * Comment this macro to disable support for server name indication in SSL
S */
S#define MBEDTLS_SSL_SERVER_NAME_INDICATION
S
S/**
S * \def MBEDTLS_SSL_TRUNCATED_HMAC
S *
S * Enable support for RFC 6066 truncated HMAC in SSL.
S *
S * Comment this macro to disable support for truncated HMAC in SSL
S */
S#define MBEDTLS_SSL_TRUNCATED_HMAC
S
S/**
S * \def MBEDTLS_THREADING_ALT
S *
S * Provide your own alternate threading implementation.
S *
S * Requires: MBEDTLS_THREADING_C
S *
S * Uncomment this to allow your own alternate threading implementation.
S */
S//#define MBEDTLS_THREADING_ALT
S
S/**
S * \def MBEDTLS_THREADING_PTHREAD
S *
S * Enable the pthread wrapper layer for the threading layer.
S *
S * Requires: MBEDTLS_THREADING_C
S *
S * Uncomment this to enable pthread mutexes.
S */
S//#define MBEDTLS_THREADING_PTHREAD
S
S/**
S * \def MBEDTLS_VERSION_FEATURES
S *
S * Allow run-time checking of compile-time enabled features. Thus allowing users
S * to check at run-time if the library is for instance compiled with threading
S * support via mbedtls_version_check_feature().
S *
S * Requires: MBEDTLS_VERSION_C
S *
S * Comment this to disable run-time checking and save ROM space
S */
S#define MBEDTLS_VERSION_FEATURES
S
S/**
S * \def MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3
S *
S * If set, the X509 parser will not break-off when parsing an X509 certificate
S * and encountering an extension in a v1 or v2 certificate.
S *
S * Uncomment to prevent an error.
S */
S//#define MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3
S
S/**
S * \def MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION
S *
S * If set, the X509 parser will not break-off when parsing an X509 certificate
S * and encountering an unknown critical extension.
S *
S * \warning Depending on your PKI use, enabling this can be a security risk!
S *
S * Uncomment to prevent an error.
S */
S//#define MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION
S
S/**
S * \def MBEDTLS_X509_CHECK_KEY_USAGE
S *
S * Enable verification of the keyUsage extension (CA and leaf certificates).
S *
S * Disabling this avoids problems with mis-issued and/or misused
S * (intermediate) CA and leaf certificates.
S *
S * \warning Depending on your PKI use, disabling this can be a security risk!
S *
S * Comment to skip keyUsage checking for both CA and leaf certificates.
S */
S#define MBEDTLS_X509_CHECK_KEY_USAGE
S
S/**
S * \def MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE
S *
S * Enable verification of the extendedKeyUsage extension (leaf certificates).
S *
S * Disabling this avoids problems with mis-issued and/or misused certificates.
S *
S * \warning Depending on your PKI use, disabling this can be a security risk!
S *
S * Comment to skip extendedKeyUsage checking for certificates.
S */
S#define MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE
S
S/**
S * \def MBEDTLS_X509_RSASSA_PSS_SUPPORT
S *
S * Enable parsing and verification of X.509 certificates, CRLs and CSRS
S * signed with RSASSA-PSS (aka PKCS#1 v2.1).
S *
S * Comment this macro to disallow using RSASSA-PSS in certificates.
S */
S#define MBEDTLS_X509_RSASSA_PSS_SUPPORT
S
S/**
S * \def MBEDTLS_ZLIB_SUPPORT
S *
S * If set, the SSL/TLS module uses ZLIB to support compression and
S * decompression of packet data.
S *
S * \warning TLS-level compression MAY REDUCE SECURITY! See for example the
S * CRIME attack. Before enabling this option, you should examine with care if
S * CRIME or similar exploits may be a applicable to your use case.
S *
S * \note Currently compression can't be used with DTLS.
S *
S * Used in: library/ssl_tls.c
S *          library/ssl_cli.c
S *          library/ssl_srv.c
S *
S * This feature requires zlib library and headers to be present.
S *
S * Uncomment to enable use of ZLIB
S */
S//#define MBEDTLS_ZLIB_SUPPORT
S/* \} name SECTION: mbed TLS feature support */
S
S/**
S * \name SECTION: mbed TLS modules
S *
S * This section enables or disables entire modules in mbed TLS
S * \{
S */
S
S/**
S * \def MBEDTLS_AESNI_C
S *
S * Enable AES-NI support on x86-64.
S *
S * Module:  library/aesni.c
S * Caller:  library/aes.c
S *
S * Requires: MBEDTLS_HAVE_ASM
S *
S * This modules adds support for the AES-NI instructions on x86-64
S */
S#define MBEDTLS_AESNI_C
S
S/**
S * \def MBEDTLS_AES_C
S *
S * Enable the AES block cipher.
S *
S * Module:  library/aes.c
S * Caller:  library/ssl_tls.c
S *          library/pem.c
S *          library/ctr_drbg.c
S *
S * This module enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA
S *      MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384
S *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384
S *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA
S *      MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256
S *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256
S *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA
S *
S * PEM_PARSE uses AES for decrypting encrypted keys.
S */
S#define MBEDTLS_AES_C
S
S/**
S * \def MBEDTLS_ARC4_C
S *
S * Enable the ARCFOUR stream cipher.
S *
S * Module:  library/arc4.c
S * Caller:  library/ssl_tls.c
S *
S * This module enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_RSA_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_RSA_WITH_RC4_128_MD5
S *      MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA
S *      MBEDTLS_TLS_PSK_WITH_RC4_128_SHA
S */
S#define MBEDTLS_ARC4_C
S
S/**
S * \def MBEDTLS_ASN1_PARSE_C
S *
S * Enable the generic ASN1 parser.
S *
S * Module:  library/asn1.c
S * Caller:  library/x509.c
S *          library/dhm.c
S *          library/pkcs12.c
S *          library/pkcs5.c
S *          library/pkparse.c
S */
S#define MBEDTLS_ASN1_PARSE_C
S
S/**
S * \def MBEDTLS_ASN1_WRITE_C
S *
S * Enable the generic ASN1 writer.
S *
S * Module:  library/asn1write.c
S * Caller:  library/ecdsa.c
S *          library/pkwrite.c
S *          library/x509_create.c
S *          library/x509write_crt.c
S *          library/mbedtls_x509write_csr.c
S */
S#define MBEDTLS_ASN1_WRITE_C
S
S/**
S * \def MBEDTLS_BASE64_C
S *
S * Enable the Base64 module.
S *
S * Module:  library/base64.c
S * Caller:  library/pem.c
S *
S * This module is required for PEM support (required by X.509).
S */
S#define MBEDTLS_BASE64_C
S
S/**
S * \def MBEDTLS_BIGNUM_C
S *
S * Enable the multi-precision integer library.
S *
S * Module:  library/bignum.c
S * Caller:  library/dhm.c
S *          library/ecp.c
S *          library/ecdsa.c
S *          library/rsa.c
S *          library/ssl_tls.c
S *
S * This module is required for RSA, DHM and ECC (ECDH, ECDSA) support.
S */
S#define MBEDTLS_BIGNUM_C
S
S/**
S * \def MBEDTLS_BLOWFISH_C
S *
S * Enable the Blowfish block cipher.
S *
S * Module:  library/blowfish.c
S */
S#define MBEDTLS_BLOWFISH_C
S
S/**
S * \def MBEDTLS_CAMELLIA_C
S *
S * Enable the Camellia block cipher.
S *
S * Module:  library/camellia.c
S * Caller:  library/ssl_tls.c
S *
S * This module enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
S *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
S *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384
S *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384
S *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256
S *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256
S */
S#define MBEDTLS_CAMELLIA_C
S
S/**
S * \def MBEDTLS_CCM_C
S *
S * Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.
S *
S * Module:  library/ccm.c
S *
S * Requires: MBEDTLS_AES_C or MBEDTLS_CAMELLIA_C
S *
S * This module enables the AES-CCM ciphersuites, if other requisites are
S * enabled as well.
S */
S#define MBEDTLS_CCM_C
S
S/**
S * \def MBEDTLS_CERTS_C
S *
S * Enable the test certificates.
S *
S * Module:  library/certs.c
S * Caller:
S *
S * This module is used for testing (ssl_client/server).
S */
S#define MBEDTLS_CERTS_C
S
S/**
S * \def MBEDTLS_CIPHER_C
S *
S * Enable the generic cipher layer.
S *
S * Module:  library/cipher.c
S * Caller:  library/ssl_tls.c
S *
S * Uncomment to enable generic cipher wrappers.
S */
S#define MBEDTLS_CIPHER_C
S
S/**
S * \def MBEDTLS_CTR_DRBG_C
S *
S * Enable the CTR_DRBG AES-256-based random generator.
S *
S * Module:  library/ctr_drbg.c
S * Caller:
S *
S * Requires: MBEDTLS_AES_C
S *
S * This module provides the CTR_DRBG AES-256 random number generator.
S */
S#define MBEDTLS_CTR_DRBG_C
S
S/**
S * \def MBEDTLS_DEBUG_C
S *
S * Enable the debug functions.
S *
S * Module:  library/debug.c
S * Caller:  library/ssl_cli.c
S *          library/ssl_srv.c
S *          library/ssl_tls.c
S *
S * This module provides debugging functions.
S */
S#define MBEDTLS_DEBUG_C
S
S/**
S * \def MBEDTLS_DES_C
S *
S * Enable the DES block cipher.
S *
S * Module:  library/des.c
S * Caller:  library/pem.c
S *          library/ssl_tls.c
S *
S * This module enables the following ciphersuites (if other requisites are
S * enabled as well):
S *      MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA
S *      MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA
S *
S * PEM_PARSE uses DES/3DES for decrypting encrypted keys.
S */
S#define MBEDTLS_DES_C
S
S/**
S * \def MBEDTLS_DHM_C
S *
S * Enable the Diffie-Hellman-Merkle module.
S *
S * Module:  library/dhm.c
S * Caller:  library/ssl_cli.c
S *          library/ssl_srv.c
S *
S * This module is used by the following key exchanges:
S *      DHE-RSA, DHE-PSK
S */
S#define MBEDTLS_DHM_C
S
S/**
S * \def MBEDTLS_ECDH_C
S *
S * Enable the elliptic curve Diffie-Hellman library.
S *
S * Module:  library/ecdh.c
S * Caller:  library/ssl_cli.c
S *          library/ssl_srv.c
S *
S * This module is used by the following key exchanges:
S *      ECDHE-ECDSA, ECDHE-RSA, DHE-PSK
S *
S * Requires: MBEDTLS_ECP_C
S */
S#define MBEDTLS_ECDH_C
S
S/**
S * \def MBEDTLS_ECDSA_C
S *
S * Enable the elliptic curve DSA library.
S *
S * Module:  library/ecdsa.c
S * Caller:
S *
S * This module is used by the following key exchanges:
S *      ECDHE-ECDSA
S *
S * Requires: MBEDTLS_ECP_C, MBEDTLS_ASN1_WRITE_C, MBEDTLS_ASN1_PARSE_C
S */
S#define MBEDTLS_ECDSA_C
S
S/**
S * \def MBEDTLS_ECJPAKE_C
S *
S * Enable the elliptic curve J-PAKE library.
S *
S * \warning This is currently experimental. EC J-PAKE support is based on the
S * Thread v1.0.0 specification; incompatible changes to the specification
S * might still happen. For this reason, this is disabled by default.
S *
S * Module:  library/ecjpake.c
S * Caller:
S *
S * This module is used by the following key exchanges:
S *      ECJPAKE
S *
S * Requires: MBEDTLS_ECP_C, MBEDTLS_MD_C
S */
S//#define MBEDTLS_ECJPAKE_C
S
S/**
S * \def MBEDTLS_ECP_C
S *
S * Enable the elliptic curve over GF(p) library.
S *
S * Module:  library/ecp.c
S * Caller:  library/ecdh.c
S *          library/ecdsa.c
S *          library/ecjpake.c
S *
S * Requires: MBEDTLS_BIGNUM_C and at least one MBEDTLS_ECP_DP_XXX_ENABLED
S */
S#define MBEDTLS_ECP_C
S
S/**
S * \def MBEDTLS_ENTROPY_C
S *
S * Enable the platform-specific entropy code.
S *
S * Module:  library/entropy.c
S * Caller:
S *
S * Requires: MBEDTLS_SHA512_C or MBEDTLS_SHA256_C
S *
S * This module provides a generic entropy pool
S */
S#define MBEDTLS_ENTROPY_C
S
S/**
S * \def MBEDTLS_ERROR_C
S *
S * Enable error code to error string conversion.
S *
S * Module:  library/error.c
S * Caller:
S *
S * This module enables mbedtls_strerror().
S */
S#define MBEDTLS_ERROR_C
S
S/**
S * \def MBEDTLS_GCM_C
S *
S * Enable the Galois/Counter Mode (GCM) for AES.
S *
S * Module:  library/gcm.c
S *
S * Requires: MBEDTLS_AES_C or MBEDTLS_CAMELLIA_C
S *
S * This module enables the AES-GCM and CAMELLIA-GCM ciphersuites, if other
S * requisites are enabled as well.
S */
S#define MBEDTLS_GCM_C
S
S/**
S * \def MBEDTLS_HAVEGE_C
S *
S * Enable the HAVEGE random generator.
S *
S * Warning: the HAVEGE random generator is not suitable for virtualized
S *          environments
S *
S * Warning: the HAVEGE random generator is dependent on timing and specific
S *          processor traits. It is therefore not advised to use HAVEGE as
S *          your applications primary random generator or primary entropy pool
S *          input. As a secondary input to your entropy pool, it IS able add
S *          the (limited) extra entropy it provides.
S *
S * Module:  library/havege.c
S * Caller:
S *
S * Requires: MBEDTLS_TIMING_C
S *
S * Uncomment to enable the HAVEGE random generator.
S */
S//#define MBEDTLS_HAVEGE_C
S
S/**
S * \def MBEDTLS_HMAC_DRBG_C
S *
S * Enable the HMAC_DRBG random generator.
S *
S * Module:  library/hmac_drbg.c
S * Caller:
S *
S * Requires: MBEDTLS_MD_C
S *
S * Uncomment to enable the HMAC_DRBG random number geerator.
S */
S#define MBEDTLS_HMAC_DRBG_C
S
S/**
S * \def MBEDTLS_MD_C
S *
S * Enable the generic message digest layer.
S *
S * Module:  library/mbedtls_md.c
S * Caller:
S *
S * Uncomment to enable generic message digest wrappers.
S */
S#define MBEDTLS_MD_C
S
S/**
S * \def MBEDTLS_MD2_C
S *
S * Enable the MD2 hash algorithm.
S *
S * Module:  library/mbedtls_md2.c
S * Caller:
S *
S * Uncomment to enable support for (rare) MD2-signed X.509 certs.
S */
S//#define MBEDTLS_MD2_C
S
S/**
S * \def MBEDTLS_MD4_C
S *
S * Enable the MD4 hash algorithm.
S *
S * Module:  library/mbedtls_md4.c
S * Caller:
S *
S * Uncomment to enable support for (rare) MD4-signed X.509 certs.
S */
S//#define MBEDTLS_MD4_C
S
S/**
S * \def MBEDTLS_MD5_C
S *
S * Enable the MD5 hash algorithm.
S *
S * Module:  library/mbedtls_md5.c
S * Caller:  library/mbedtls_md.c
S *          library/pem.c
S *          library/ssl_tls.c
S *
S * This module is required for SSL/TLS and X.509.
S * PEM_PARSE uses MD5 for decrypting encrypted keys.
S */
S#define MBEDTLS_MD5_C
S
S/**
S * \def MBEDTLS_MEMORY_BUFFER_ALLOC_C
S *
S * Enable the buffer allocator implementation that makes use of a (stack)
S * based buffer to 'allocate' dynamic memory. (replaces calloc() and free()
S * calls)
S *
S * Module:  library/memory_buffer_alloc.c
S *
S * Requires: MBEDTLS_PLATFORM_C
S *           MBEDTLS_PLATFORM_MEMORY (to use it within mbed TLS)
S *
S * Enable this module to enable the buffer memory allocator.
S */
S//#define MBEDTLS_MEMORY_BUFFER_ALLOC_C
S
S/**
S * \def MBEDTLS_NET_C
S *
S * Enable the TCP/IP networking routines.
S *
S * Module:  library/net.c
S *
S * This module provides TCP/IP networking routines.
S */
S#define MBEDTLS_NET_C
S
S/**
S * \def MBEDTLS_OID_C
S *
S * Enable the OID database.
S *
S * Module:  library/oid.c
S * Caller:  library/asn1write.c
S *          library/pkcs5.c
S *          library/pkparse.c
S *          library/pkwrite.c
S *          library/rsa.c
S *          library/x509.c
S *          library/x509_create.c
S *          library/mbedtls_x509_crl.c
S *          library/mbedtls_x509_crt.c
S *          library/mbedtls_x509_csr.c
S *          library/x509write_crt.c
S *          library/mbedtls_x509write_csr.c
S *
S * This modules translates between OIDs and internal values.
S */
S#define MBEDTLS_OID_C
S
S/**
S * \def MBEDTLS_PADLOCK_C
S *
S * Enable VIA Padlock support on x86.
S *
S * Module:  library/padlock.c
S * Caller:  library/aes.c
S *
S * Requires: MBEDTLS_HAVE_ASM
S *
S * This modules adds support for the VIA PadLock on x86.
S */
S#define MBEDTLS_PADLOCK_C
S
S/**
S * \def MBEDTLS_PEM_PARSE_C
S *
S * Enable PEM decoding / parsing.
S *
S * Module:  library/pem.c
S * Caller:  library/dhm.c
S *          library/pkparse.c
S *          library/mbedtls_x509_crl.c
S *          library/mbedtls_x509_crt.c
S *          library/mbedtls_x509_csr.c
S *
S * Requires: MBEDTLS_BASE64_C
S *
S * This modules adds support for decoding / parsing PEM files.
S */
S#define MBEDTLS_PEM_PARSE_C
S
S/**
S * \def MBEDTLS_PEM_WRITE_C
S *
S * Enable PEM encoding / writing.
S *
S * Module:  library/pem.c
S * Caller:  library/pkwrite.c
S *          library/x509write_crt.c
S *          library/mbedtls_x509write_csr.c
S *
S * Requires: MBEDTLS_BASE64_C
S *
S * This modules adds support for encoding / writing PEM files.
S */
S#define MBEDTLS_PEM_WRITE_C
S
S/**
S * \def MBEDTLS_PK_C
S *
S * Enable the generic public (asymetric) key layer.
S *
S * Module:  library/pk.c
S * Caller:  library/ssl_tls.c
S *          library/ssl_cli.c
S *          library/ssl_srv.c
S *
S * Requires: MBEDTLS_RSA_C or MBEDTLS_ECP_C
S *
S * Uncomment to enable generic public key wrappers.
S */
S#define MBEDTLS_PK_C
S
S/**
S * \def MBEDTLS_PK_PARSE_C
S *
S * Enable the generic public (asymetric) key parser.
S *
S * Module:  library/pkparse.c
S * Caller:  library/mbedtls_x509_crt.c
S *          library/mbedtls_x509_csr.c
S *
S * Requires: MBEDTLS_PK_C
S *
S * Uncomment to enable generic public key parse functions.
S */
S#define MBEDTLS_PK_PARSE_C
S
S/**
S * \def MBEDTLS_PK_WRITE_C
S *
S * Enable the generic public (asymetric) key writer.
S *
S * Module:  library/pkwrite.c
S * Caller:  library/x509write.c
S *
S * Requires: MBEDTLS_PK_C
S *
S * Uncomment to enable generic public key write functions.
S */
S#define MBEDTLS_PK_WRITE_C
S
S/**
S * \def MBEDTLS_PKCS5_C
S *
S * Enable PKCS#5 functions.
S *
S * Module:  library/pkcs5.c
S *
S * Requires: MBEDTLS_MD_C
S *
S * This module adds support for the PKCS#5 functions.
S */
S#define MBEDTLS_PKCS5_C
S
S/**
S * \def MBEDTLS_PKCS11_C
S *
S * Enable wrapper for PKCS#11 smartcard support.
S *
S * Module:  library/pkcs11.c
S * Caller:  library/pk.c
S *
S * Requires: MBEDTLS_PK_C
S *
S * This module enables SSL/TLS PKCS #11 smartcard support.
S * Requires the presence of the PKCS#11 helper library (libpkcs11-helper)
S */
S//#define MBEDTLS_PKCS11_C
S
S/**
S * \def MBEDTLS_PKCS12_C
S *
S * Enable PKCS#12 PBE functions.
S * Adds algorithms for parsing PKCS#8 encrypted private keys
S *
S * Module:  library/pkcs12.c
S * Caller:  library/pkparse.c
S *
S * Requires: MBEDTLS_ASN1_PARSE_C, MBEDTLS_CIPHER_C, MBEDTLS_MD_C
S * Can use:  MBEDTLS_ARC4_C
S *
S * This module enables PKCS#12 functions.
S */
S#define MBEDTLS_PKCS12_C
S
S/**
S * \def MBEDTLS_PLATFORM_C
S *
S * Enable the platform abstraction layer that allows you to re-assign
S * functions like calloc(), free(), snprintf(), printf(), fprintf(), exit().
S *
S * Enabling MBEDTLS_PLATFORM_C enables to use of MBEDTLS_PLATFORM_XXX_ALT
S * or MBEDTLS_PLATFORM_XXX_MACRO directives, allowing the functions mentioned
S * above to be specified at runtime or compile time respectively.
S *
S * \note This abstraction layer must be enabled on Windows (including MSYS2)
S * as other module rely on it for a fixed snprintf implementation.
S *
S * Module:  library/platform.c
S * Caller:  Most other .c files
S *
S * This module enables abstraction of common (libc) functions.
S */
S#define MBEDTLS_PLATFORM_C
S
S/**
S * \def MBEDTLS_RIPEMD160_C
S *
S * Enable the RIPEMD-160 hash algorithm.
S *
S * Module:  library/mbedtls_ripemd160.c
S * Caller:  library/mbedtls_md.c
S *
S */
S#define MBEDTLS_RIPEMD160_C
S
S/**
S * \def MBEDTLS_RSA_C
S *
S * Enable the RSA public-key cryptosystem.
S *
S * Module:  library/rsa.c
S * Caller:  library/ssl_cli.c
S *          library/ssl_srv.c
S *          library/ssl_tls.c
S *          library/x509.c
S *
S * This module is used by the following key exchanges:
S *      RSA, DHE-RSA, ECDHE-RSA, RSA-PSK
S *
S * Requires: MBEDTLS_BIGNUM_C, MBEDTLS_OID_C
S */
S#define MBEDTLS_RSA_C
S
S/**
S * \def MBEDTLS_SHA1_C
S *
S * Enable the SHA1 cryptographic hash algorithm.
S *
S * Module:  library/mbedtls_sha1.c
S * Caller:  library/mbedtls_md.c
S *          library/ssl_cli.c
S *          library/ssl_srv.c
S *          library/ssl_tls.c
S *          library/x509write_crt.c
S *
S * This module is required for SSL/TLS and SHA1-signed certificates.
S */
S#define MBEDTLS_SHA1_C
S
S/**
S * \def MBEDTLS_SHA256_C
S *
S * Enable the SHA-224 and SHA-256 cryptographic hash algorithms.
S *
S * Module:  library/mbedtls_sha256.c
S * Caller:  library/entropy.c
S *          library/mbedtls_md.c
S *          library/ssl_cli.c
S *          library/ssl_srv.c
S *          library/ssl_tls.c
S *
S * This module adds support for SHA-224 and SHA-256.
S * This module is required for the SSL/TLS 1.2 PRF function.
S */
S#define MBEDTLS_SHA256_C
S
S/**
S * \def MBEDTLS_SHA512_C
S *
S * Enable the SHA-384 and SHA-512 cryptographic hash algorithms.
S *
S * Module:  library/mbedtls_sha512.c
S * Caller:  library/entropy.c
S *          library/mbedtls_md.c
S *          library/ssl_cli.c
S *          library/ssl_srv.c
S *
S * This module adds support for SHA-384 and SHA-512.
S */
S#define MBEDTLS_SHA512_C
S
S/**
S * \def MBEDTLS_SSL_CACHE_C
S *
S * Enable simple SSL cache implementation.
S *
S * Module:  library/ssl_cache.c
S * Caller:
S *
S * Requires: MBEDTLS_SSL_CACHE_C
S */
S#define MBEDTLS_SSL_CACHE_C
S
S/**
S * \def MBEDTLS_SSL_COOKIE_C
S *
S * Enable basic implementation of DTLS cookies for hello verification.
S *
S * Module:  library/ssl_cookie.c
S * Caller:
S */
S#define MBEDTLS_SSL_COOKIE_C
S
S/**
S * \def MBEDTLS_SSL_TICKET_C
S *
S * Enable an implementation of TLS server-side callbacks for session tickets.
S *
S * Module:  library/ssl_ticket.c
S * Caller:
S *
S * Requires: MBEDTLS_CIPHER_C
S */
S#define MBEDTLS_SSL_TICKET_C
S
S/**
S * \def MBEDTLS_SSL_CLI_C
S *
S * Enable the SSL/TLS client code.
S *
S * Module:  library/ssl_cli.c
S * Caller:
S *
S * Requires: MBEDTLS_SSL_TLS_C
S *
S * This module is required for SSL/TLS client support.
S */
S#define MBEDTLS_SSL_CLI_C
S
S/**
S * \def MBEDTLS_SSL_SRV_C
S *
S * Enable the SSL/TLS server code.
S *
S * Module:  library/ssl_srv.c
S * Caller:
S *
S * Requires: MBEDTLS_SSL_TLS_C
S *
S * This module is required for SSL/TLS server support.
S */
S#define MBEDTLS_SSL_SRV_C
S
S/**
S * \def MBEDTLS_SSL_TLS_C
S *
S * Enable the generic SSL/TLS code.
S *
S * Module:  library/ssl_tls.c
S * Caller:  library/ssl_cli.c
S *          library/ssl_srv.c
S *
S * Requires: MBEDTLS_CIPHER_C, MBEDTLS_MD_C
S *           and at least one of the MBEDTLS_SSL_PROTO_XXX defines
S *
S * This module is required for SSL/TLS.
S */
S#define MBEDTLS_SSL_TLS_C
S
S/**
S * \def MBEDTLS_THREADING_C
S *
S * Enable the threading abstraction layer.
S * By default mbed TLS assumes it is used in a non-threaded environment or that
S * contexts are not shared between threads. If you do intend to use contexts
S * between threads, you will need to enable this layer to prevent race
S * conditions.
S *
S * Module:  library/threading.c
S *
S * This allows different threading implementations (self-implemented or
S * provided).
S *
S * You will have to enable either MBEDTLS_THREADING_ALT or
S * MBEDTLS_THREADING_PTHREAD.
S *
S * Enable this layer to allow use of mutexes within mbed TLS
S */
S//#define MBEDTLS_THREADING_C
S
S/**
S * \def MBEDTLS_TIMING_C
S *
S * Enable the portable timing interface.
S *
S * Module:  library/timing.c
S * Caller:  library/havege.c
S *
S * This module is used by the HAVEGE random number generator.
S */
S#define MBEDTLS_TIMING_C
S
S/**
S * \def MBEDTLS_VERSION_C
S *
S * Enable run-time version information.
S *
S * Module:  library/version.c
S *
S * This module provides run-time version information.
S */
S#define MBEDTLS_VERSION_C
S
S/**
S * \def MBEDTLS_X509_USE_C
S *
S * Enable X.509 core for using certificates.
S *
S * Module:  library/x509.c
S * Caller:  library/mbedtls_x509_crl.c
S *          library/mbedtls_x509_crt.c
S *          library/mbedtls_x509_csr.c
S *
S * Requires: MBEDTLS_ASN1_PARSE_C, MBEDTLS_BIGNUM_C, MBEDTLS_OID_C,
S *           MBEDTLS_PK_PARSE_C
S *
S * This module is required for the X.509 parsing modules.
S */
S#define MBEDTLS_X509_USE_C
S
S/**
S * \def MBEDTLS_X509_CRT_PARSE_C
S *
S * Enable X.509 certificate parsing.
S *
S * Module:  library/mbedtls_x509_crt.c
S * Caller:  library/ssl_cli.c
S *          library/ssl_srv.c
S *          library/ssl_tls.c
S *
S * Requires: MBEDTLS_X509_USE_C
S *
S * This module is required for X.509 certificate parsing.
S */
S#define MBEDTLS_X509_CRT_PARSE_C
S
S/**
S * \def MBEDTLS_X509_CRL_PARSE_C
S *
S * Enable X.509 CRL parsing.
S *
S * Module:  library/mbedtls_x509_crl.c
S * Caller:  library/mbedtls_x509_crt.c
S *
S * Requires: MBEDTLS_X509_USE_C
S *
S * This module is required for X.509 CRL parsing.
S */
S#define MBEDTLS_X509_CRL_PARSE_C
S
S/**
S * \def MBEDTLS_X509_CSR_PARSE_C
S *
S * Enable X.509 Certificate Signing Request (CSR) parsing.
S *
S * Module:  library/mbedtls_x509_csr.c
S * Caller:  library/x509_crt_write.c
S *
S * Requires: MBEDTLS_X509_USE_C
S *
S * This module is used for reading X.509 certificate request.
S */
S#define MBEDTLS_X509_CSR_PARSE_C
S
S/**
S * \def MBEDTLS_X509_CREATE_C
S *
S * Enable X.509 core for creating certificates.
S *
S * Module:  library/x509_create.c
S *
S * Requires: MBEDTLS_BIGNUM_C, MBEDTLS_OID_C, MBEDTLS_PK_WRITE_C
S *
S * This module is the basis for creating X.509 certificates and CSRs.
S */
S#define MBEDTLS_X509_CREATE_C
S
S/**
S * \def MBEDTLS_X509_CRT_WRITE_C
S *
S * Enable creating X.509 certificates.
S *
S * Module:  library/x509_crt_write.c
S *
S * Requires: MBEDTLS_X509_CREATE_C
S *
S * This module is required for X.509 certificate creation.
S */
S#define MBEDTLS_X509_CRT_WRITE_C
S
S/**
S * \def MBEDTLS_X509_CSR_WRITE_C
S *
S * Enable creating X.509 Certificate Signing Requests (CSR).
S *
S * Module:  library/x509_csr_write.c
S *
S * Requires: MBEDTLS_X509_CREATE_C
S *
S * This module is required for X.509 certificate request writing.
S */
S#define MBEDTLS_X509_CSR_WRITE_C
S
S/**
S * \def MBEDTLS_XTEA_C
S *
S * Enable the XTEA block cipher.
S *
S * Module:  library/xtea.c
S * Caller:
S */
S#define MBEDTLS_XTEA_C
S
S/* \} name SECTION: mbed TLS modules */
S
S/**
S * \name SECTION: Module configuration options
S *
S * This section allows for the setting of module specific sizes and
S * configuration options. The default values are already present in the
S * relevant header files and should suffice for the regular use cases.
S *
S * Our advice is to enable options and change their values here
S * only if you have a good reason and know the consequences.
S *
S * Please check the respective header file for documentation on these
S * parameters (to prevent duplicate documentation).
S * \{
S */
S
S/* MPI / BIGNUM options */
S//#define MBEDTLS_MPI_WINDOW_SIZE            6 /**< Maximum windows size used. */
S//#define MBEDTLS_MPI_MAX_SIZE            1024 /**< Maximum number of bytes for usable MPIs. */
S
S/* CTR_DRBG options */
S//#define MBEDTLS_CTR_DRBG_ENTROPY_LEN               48 /**< Amount of entropy used per seed by default (48 with SHA-512, 32 with SHA-256) */
S//#define MBEDTLS_CTR_DRBG_RESEED_INTERVAL        10000 /**< Interval before reseed is performed by default */
S//#define MBEDTLS_CTR_DRBG_MAX_INPUT                256 /**< Maximum number of additional input bytes */
S//#define MBEDTLS_CTR_DRBG_MAX_REQUEST             1024 /**< Maximum number of requested bytes per call */
S//#define MBEDTLS_CTR_DRBG_MAX_SEED_INPUT           384 /**< Maximum size of (re)seed buffer */
S
S/* HMAC_DRBG options */
S//#define MBEDTLS_HMAC_DRBG_RESEED_INTERVAL   10000 /**< Interval before reseed is performed by default */
S//#define MBEDTLS_HMAC_DRBG_MAX_INPUT           256 /**< Maximum number of additional input bytes */
S//#define MBEDTLS_HMAC_DRBG_MAX_REQUEST        1024 /**< Maximum number of requested bytes per call */
S//#define MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT      384 /**< Maximum size of (re)seed buffer */
S
S/* ECP options */
S//#define MBEDTLS_ECP_MAX_BITS             521 /**< Maximum bit size of groups */
S//#define MBEDTLS_ECP_WINDOW_SIZE            6 /**< Maximum window size used */
S//#define MBEDTLS_ECP_FIXED_POINT_OPTIM      1 /**< Enable fixed-point speed-up */
S
S/* Entropy options */
S//#define MBEDTLS_ENTROPY_MAX_SOURCES                20 /**< Maximum number of sources supported */
S//#define MBEDTLS_ENTROPY_MAX_GATHER                128 /**< Maximum amount requested from entropy sources */
S
S/* Memory buffer allocator options */
S//#define MBEDTLS_MEMORY_ALIGN_MULTIPLE      4 /**< Align on multiples of this value */
S
S/* Platform options */
S//#define MBEDTLS_PLATFORM_STD_MEM_HDR   <stdlib.h> /**< Header to include if MBEDTLS_PLATFORM_NO_STD_FUNCTIONS is defined. Don't define if no header is needed. */
S//#define MBEDTLS_PLATFORM_STD_CALLOC        calloc /**< Default allocator to use, can be undefined */
S//#define MBEDTLS_PLATFORM_STD_FREE            free /**< Default free to use, can be undefined */
S//#define MBEDTLS_PLATFORM_STD_EXIT            exit /**< Default exit to use, can be undefined */
S//#define MBEDTLS_PLATFORM_STD_FPRINTF      fprintf /**< Default fprintf to use, can be undefined */
S//#define MBEDTLS_PLATFORM_STD_PRINTF        printf /**< Default printf to use, can be undefined */
S/* Note: your snprintf must correclty zero-terminate the buffer! */
S//#define MBEDTLS_PLATFORM_STD_SNPRINTF    snprintf /**< Default snprintf to use, can be undefined */
S
S/* To Use Function Macros MBEDTLS_PLATFORM_C must be enabled */
S/* MBEDTLS_PLATFORM_XXX_MACRO and MBEDTLS_PLATFORM_XXX_ALT cannot both be defined */
S//#define MBEDTLS_PLATFORM_CALLOC_MACRO        calloc /**< Default allocator macro to use, can be undefined */
S//#define MBEDTLS_PLATFORM_FREE_MACRO            free /**< Default free macro to use, can be undefined */
S//#define MBEDTLS_PLATFORM_EXIT_MACRO            exit /**< Default exit macro to use, can be undefined */
S//#define MBEDTLS_PLATFORM_FPRINTF_MACRO      fprintf /**< Default fprintf macro to use, can be undefined */
S//#define MBEDTLS_PLATFORM_PRINTF_MACRO        printf /**< Default printf macro to use, can be undefined */
S/* Note: your snprintf must correclty zero-terminate the buffer! */
S//#define MBEDTLS_PLATFORM_SNPRINTF_MACRO    snprintf /**< Default snprintf macro to use, can be undefined */
S
S/* SSL Cache options */
S//#define MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT       86400 /**< 1 day  */
S//#define MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES      50 /**< Maximum entries in cache */
S
S/* SSL options */
S//#define MBEDTLS_SSL_MAX_CONTENT_LEN             16384 /**< Maxium fragment length in bytes, determines the size of each of the two internal I/O buffers */
S//#define MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME     86400 /**< Lifetime of session tickets (if enabled) */
S//#define MBEDTLS_PSK_MAX_LEN               32 /**< Max size of TLS pre-shared keys, in bytes (default 256 bits) */
S//#define MBEDTLS_SSL_COOKIE_TIMEOUT        60 /**< Default expiration delay of DTLS cookies, in seconds if HAVE_TIME, or in number of cookies issued */
S
S/**
S * Complete list of ciphersuites to use, in order of preference.
S *
S * \warning No dependency checking is done on that field! This option can only
S * be used to restrict the set of available ciphersuites. It is your
S * responsibility to make sure the needed modules are active.
S *
S * Use this to save a few hundred bytes of ROM (default ordering of all
S * available ciphersuites) and a few to a few hundred bytes of RAM.
S *
S * The value below is only an example, not the default.
S */
S//#define MBEDTLS_SSL_CIPHERSUITES MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
S
S/* X509 options */
S//#define MBEDTLS_X509_MAX_INTERMEDIATE_CA   8   /**< Maximum number of intermediate CAs in a verification chain. */
S
S/* \} name SECTION: Module configuration options */
S
S#if defined(TARGET_LIKE_MBED)
S#include "mbedtls/target_config.h"
S#endif
S
S/*
S * Allow user to override any previous default.
S *
S * Use two macro names for that, as:
S * - with yotta the prefix YOTTA_CFG_ is forced
S * - without yotta is looks weird to have a YOTTA prefix.
S */
S#if defined(YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE)
S#include YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE
S#elif defined(MBEDTLS_USER_CONFIG_FILE)
S#include MBEDTLS_USER_CONFIG_FILE
S#endif
S
S#include "check_config.h"
S
N#endif /* MBEDTLS_CONFIG_H */
L 32 "C:\Keil_v5\ARM\PACK\ARM\mbedTLS\1.1.1\library\ssl_tls.c" 2
N#else
S#include MBEDTLS_CONFIG_FILE
N#endif
N
N#if defined(MBEDTLS_SSL_TLS_C)
X#if 0L
S
S#include "mbedtls/debug.h"
S#include "mbedtls/ssl.h"
S#include "mbedtls/ssl_internal.h"
S
S#include <string.h>
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C) && \
S    defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
X#if defined(MBEDTLS_X509_CRT_PARSE_C) &&     defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
S#include "mbedtls/oid.h"
S#endif
S
S#if defined(MBEDTLS_PLATFORM_C)
S#include "mbedtls/platform.h"
S#else
S#include <stdlib.h>
S#define mbedtls_calloc    calloc
S#define mbedtls_free       free
S#endif
S
S/* Implementation that should never be optimized out by the compiler */
Sstatic void mbedtls_zeroize( void *v, size_t n ) {
S    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
S}
S
S/* Length of the "epoch" field in the record header */
Sstatic inline size_t ssl_ep_len( const mbedtls_ssl_context *ssl )
S{
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S        return( 2 );
S#else
S    ((void) ssl);
S#endif
S    return( 0 );
S}
S
S/*
S * Start a timer.
S * Passing millisecs = 0 cancels a running timer.
S */
Sstatic void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
S{
S    if( ssl->f_set_timer == NULL )
S        return;
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
S    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
S}
S
S/*
S * Return -1 is timer is expired, 0 if it isn't.
S */
Sstatic int ssl_check_timer( mbedtls_ssl_context *ssl )
S{
S    if( ssl->f_get_timer == NULL )
S        return( 0 );
S
S    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
S        return( -1 );
S    }
S
S    return( 0 );
S}
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S/*
S * Double the retransmit timeout value, within the allowed range,
S * returning -1 if the maximum value has already been reached.
S */
Sstatic int ssl_double_retransmit_timeout( mbedtls_ssl_context *ssl )
S{
S    uint32_t new_timeout;
S
S    if( ssl->handshake->retransmit_timeout >= ssl->conf->hs_timeout_max )
S        return( -1 );
S
S    new_timeout = 2 * ssl->handshake->retransmit_timeout;
S
S    /* Avoid arithmetic overflow and range overflow */
S    if( new_timeout < ssl->handshake->retransmit_timeout ||
S        new_timeout > ssl->conf->hs_timeout_max )
S    {
S        new_timeout = ssl->conf->hs_timeout_max;
S    }
S
S    ssl->handshake->retransmit_timeout = new_timeout;
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "update timeout value to %d millisecs",
S                        ssl->handshake->retransmit_timeout ) );
S
S    return( 0 );
S}
S
Sstatic void ssl_reset_retransmit_timeout( mbedtls_ssl_context *ssl )
S{
S    ssl->handshake->retransmit_timeout = ssl->conf->hs_timeout_min;
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "update timeout value to %d millisecs",
S                        ssl->handshake->retransmit_timeout ) );
S}
S#endif /* MBEDTLS_SSL_PROTO_DTLS */
S
S#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
S/*
S * Convert max_fragment_length codes to length.
S * RFC 6066 says:
S *    enum{
S *        2^9(1), 2^10(2), 2^11(3), 2^12(4), (255)
S *    } MaxFragmentLength;
S * and we add 0 -> extension unused
S */
Sstatic unsigned int mfl_code_to_length[MBEDTLS_SSL_MAX_FRAG_LEN_INVALID] =
S{
S    MBEDTLS_SSL_MAX_CONTENT_LEN,    /* MBEDTLS_SSL_MAX_FRAG_LEN_NONE */
S    512,                    /* MBEDTLS_SSL_MAX_FRAG_LEN_512  */
S    1024,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_1024 */
S    2048,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_2048 */
S    4096,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_4096 */
S};
S#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
S
S#if defined(MBEDTLS_SSL_CLI_C)
Sstatic int ssl_session_copy( mbedtls_ssl_session *dst, const mbedtls_ssl_session *src )
S{
S    mbedtls_ssl_session_free( dst );
S    memcpy( dst, src, sizeof( mbedtls_ssl_session ) );
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
S    if( src->peer_cert != NULL )
S    {
S        int ret;
S
S        dst->peer_cert = mbedtls_calloc( 1, sizeof(mbedtls_x509_crt) );
S        if( dst->peer_cert == NULL )
S            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S
S        mbedtls_x509_crt_init( dst->peer_cert );
S
S        if( ( ret = mbedtls_x509_crt_parse_der( dst->peer_cert, src->peer_cert->raw.p,
S                                        src->peer_cert->raw.len ) ) != 0 )
S        {
S            mbedtls_free( dst->peer_cert );
S            dst->peer_cert = NULL;
S            return( ret );
S        }
S    }
S#endif /* MBEDTLS_X509_CRT_PARSE_C */
S
S#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
S    if( src->ticket != NULL )
S    {
S        dst->ticket = mbedtls_calloc( 1, src->ticket_len );
S        if( dst->ticket == NULL )
S            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S
S        memcpy( dst->ticket, src->ticket, src->ticket_len );
S    }
S#endif /* MBEDTLS_SSL_SESSION_TICKETS && MBEDTLS_SSL_CLI_C */
S
S    return( 0 );
S}
S#endif /* MBEDTLS_SSL_CLI_C */
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
Sint (*mbedtls_ssl_hw_record_init)( mbedtls_ssl_context *ssl,
S                     const unsigned char *key_enc, const unsigned char *key_dec,
S                     size_t keylen,
S                     const unsigned char *iv_enc,  const unsigned char *iv_dec,
S                     size_t ivlen,
S                     const unsigned char *mac_enc, const unsigned char *mac_dec,
S                     size_t maclen ) = NULL;
Sint (*mbedtls_ssl_hw_record_activate)( mbedtls_ssl_context *ssl, int direction) = NULL;
Sint (*mbedtls_ssl_hw_record_reset)( mbedtls_ssl_context *ssl ) = NULL;
Sint (*mbedtls_ssl_hw_record_write)( mbedtls_ssl_context *ssl ) = NULL;
Sint (*mbedtls_ssl_hw_record_read)( mbedtls_ssl_context *ssl ) = NULL;
Sint (*mbedtls_ssl_hw_record_finish)( mbedtls_ssl_context *ssl ) = NULL;
S#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
S
S/*
S * Key material generation
S */
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
Sstatic int ssl3_prf( const unsigned char *secret, size_t slen,
S                     const char *label,
S                     const unsigned char *random, size_t rlen,
S                     unsigned char *dstbuf, size_t dlen )
S{
S    size_t i;
S    mbedtls_md5_context md5;
S    mbedtls_sha1_context sha1;
S    unsigned char padding[16];
S    unsigned char sha1sum[20];
S    ((void)label);
S
S    mbedtls_md5_init(  &md5  );
S    mbedtls_sha1_init( &sha1 );
S
S    /*
S     *  SSLv3:
S     *    block =
S     *      MD5( secret + SHA1( 'A'    + secret + random ) ) +
S     *      MD5( secret + SHA1( 'BB'   + secret + random ) ) +
S     *      MD5( secret + SHA1( 'CCC'  + secret + random ) ) +
S     *      ...
S     */
S    for( i = 0; i < dlen / 16; i++ )
S    {
S        memset( padding, (unsigned char) ('A' + i), 1 + i );
S
S        mbedtls_sha1_starts( &sha1 );
S        mbedtls_sha1_update( &sha1, padding, 1 + i );
S        mbedtls_sha1_update( &sha1, secret, slen );
S        mbedtls_sha1_update( &sha1, random, rlen );
S        mbedtls_sha1_finish( &sha1, sha1sum );
S
S        mbedtls_md5_starts( &md5 );
S        mbedtls_md5_update( &md5, secret, slen );
S        mbedtls_md5_update( &md5, sha1sum, 20 );
S        mbedtls_md5_finish( &md5, dstbuf + i * 16 );
S    }
S
S    mbedtls_md5_free(  &md5  );
S    mbedtls_sha1_free( &sha1 );
S
S    mbedtls_zeroize( padding, sizeof( padding ) );
S    mbedtls_zeroize( sha1sum, sizeof( sha1sum ) );
S
S    return( 0 );
S}
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
Sstatic int tls1_prf( const unsigned char *secret, size_t slen,
S                     const char *label,
S                     const unsigned char *random, size_t rlen,
S                     unsigned char *dstbuf, size_t dlen )
S{
S    size_t nb, hs;
S    size_t i, j, k;
S    const unsigned char *S1, *S2;
S    unsigned char tmp[128];
S    unsigned char h_i[20];
S    const mbedtls_md_info_t *md_info;
S    mbedtls_md_context_t md_ctx;
S    int ret;
S
S    mbedtls_md_init( &md_ctx );
S
S    if( sizeof( tmp ) < 20 + strlen( label ) + rlen )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    hs = ( slen + 1 ) / 2;
S    S1 = secret;
S    S2 = secret + slen - hs;
S
S    nb = strlen( label );
S    memcpy( tmp + 20, label, nb );
S    memcpy( tmp + 20 + nb, random, rlen );
S    nb += rlen;
S
S    /*
S     * First compute P_md5(secret,label+random)[0..dlen]
S     */
S    if( ( md_info = mbedtls_md_info_from_type( MBEDTLS_MD_MD5 ) ) == NULL )
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S
S    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
S        return( ret );
S
S    mbedtls_md_hmac_starts( &md_ctx, S1, hs );
S    mbedtls_md_hmac_update( &md_ctx, tmp + 20, nb );
S    mbedtls_md_hmac_finish( &md_ctx, 4 + tmp );
S
S    for( i = 0; i < dlen; i += 16 )
S    {
S        mbedtls_md_hmac_reset ( &md_ctx );
S        mbedtls_md_hmac_update( &md_ctx, 4 + tmp, 16 + nb );
S        mbedtls_md_hmac_finish( &md_ctx, h_i );
S
S        mbedtls_md_hmac_reset ( &md_ctx );
S        mbedtls_md_hmac_update( &md_ctx, 4 + tmp, 16 );
S        mbedtls_md_hmac_finish( &md_ctx, 4 + tmp );
S
S        k = ( i + 16 > dlen ) ? dlen % 16 : 16;
S
S        for( j = 0; j < k; j++ )
S            dstbuf[i + j]  = h_i[j];
S    }
S
S    mbedtls_md_free( &md_ctx );
S
S    /*
S     * XOR out with P_sha1(secret,label+random)[0..dlen]
S     */
S    if( ( md_info = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 ) ) == NULL )
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S
S    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
S        return( ret );
S
S    mbedtls_md_hmac_starts( &md_ctx, S2, hs );
S    mbedtls_md_hmac_update( &md_ctx, tmp + 20, nb );
S    mbedtls_md_hmac_finish( &md_ctx, tmp );
S
S    for( i = 0; i < dlen; i += 20 )
S    {
S        mbedtls_md_hmac_reset ( &md_ctx );
S        mbedtls_md_hmac_update( &md_ctx, tmp, 20 + nb );
S        mbedtls_md_hmac_finish( &md_ctx, h_i );
S
S        mbedtls_md_hmac_reset ( &md_ctx );
S        mbedtls_md_hmac_update( &md_ctx, tmp, 20 );
S        mbedtls_md_hmac_finish( &md_ctx, tmp );
S
S        k = ( i + 20 > dlen ) ? dlen % 20 : 20;
S
S        for( j = 0; j < k; j++ )
S            dstbuf[i + j] = (unsigned char)( dstbuf[i + j] ^ h_i[j] );
S    }
S
S    mbedtls_md_free( &md_ctx );
S
S    mbedtls_zeroize( tmp, sizeof( tmp ) );
S    mbedtls_zeroize( h_i, sizeof( h_i ) );
S
S    return( 0 );
S}
S#endif /* MBEDTLS_SSL_PROTO_TLS1) || MBEDTLS_SSL_PROTO_TLS1_1 */
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
Sstatic int tls_prf_generic( mbedtls_md_type_t md_type,
S                            const unsigned char *secret, size_t slen,
S                            const char *label,
S                            const unsigned char *random, size_t rlen,
S                            unsigned char *dstbuf, size_t dlen )
S{
S    size_t nb;
S    size_t i, j, k, md_len;
S    unsigned char tmp[128];
S    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
S    const mbedtls_md_info_t *md_info;
S    mbedtls_md_context_t md_ctx;
S    int ret;
S
S    mbedtls_md_init( &md_ctx );
S
S    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S
S    md_len = mbedtls_md_get_size( md_info );
S
S    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    nb = strlen( label );
S    memcpy( tmp + md_len, label, nb );
S    memcpy( tmp + md_len + nb, random, rlen );
S    nb += rlen;
S
S    /*
S     * Compute P_<hash>(secret, label + random)[0..dlen]
S     */
S    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
S        return( ret );
S
S    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
S    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
S    mbedtls_md_hmac_finish( &md_ctx, tmp );
S
S    for( i = 0; i < dlen; i += md_len )
S    {
S        mbedtls_md_hmac_reset ( &md_ctx );
S        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
S        mbedtls_md_hmac_finish( &md_ctx, h_i );
S
S        mbedtls_md_hmac_reset ( &md_ctx );
S        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
S        mbedtls_md_hmac_finish( &md_ctx, tmp );
S
S        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
S
S        for( j = 0; j < k; j++ )
S            dstbuf[i + j]  = h_i[j];
S    }
S
S    mbedtls_md_free( &md_ctx );
S
S    mbedtls_zeroize( tmp, sizeof( tmp ) );
S    mbedtls_zeroize( h_i, sizeof( h_i ) );
S
S    return( 0 );
S}
S
S#if defined(MBEDTLS_SHA256_C)
Sstatic int tls_prf_sha256( const unsigned char *secret, size_t slen,
S                           const char *label,
S                           const unsigned char *random, size_t rlen,
S                           unsigned char *dstbuf, size_t dlen )
S{
S    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
S                             label, random, rlen, dstbuf, dlen ) );
S}
S#endif /* MBEDTLS_SHA256_C */
S
S#if defined(MBEDTLS_SHA512_C)
Sstatic int tls_prf_sha384( const unsigned char *secret, size_t slen,
S                           const char *label,
S                           const unsigned char *random, size_t rlen,
S                           unsigned char *dstbuf, size_t dlen )
S{
S    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
S                             label, random, rlen, dstbuf, dlen ) );
S}
S#endif /* MBEDTLS_SHA512_C */
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S
Sstatic void ssl_update_checksum_start( mbedtls_ssl_context *, const unsigned char *, size_t );
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_1)
X#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_1)
Sstatic void ssl_update_checksum_md5sha1( mbedtls_ssl_context *, const unsigned char *, size_t );
S#endif
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
Sstatic void ssl_calc_verify_ssl( mbedtls_ssl_context *, unsigned char * );
Sstatic void ssl_calc_finished_ssl( mbedtls_ssl_context *, unsigned char *, int );
S#endif
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
Sstatic void ssl_calc_verify_tls( mbedtls_ssl_context *, unsigned char * );
Sstatic void ssl_calc_finished_tls( mbedtls_ssl_context *, unsigned char *, int );
S#endif
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA256_C)
Sstatic void ssl_update_checksum_sha256( mbedtls_ssl_context *, const unsigned char *, size_t );
Sstatic void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *,unsigned char * );
Sstatic void ssl_calc_finished_tls_sha256( mbedtls_ssl_context *,unsigned char *, int );
S#endif
S
S#if defined(MBEDTLS_SHA512_C)
Sstatic void ssl_update_checksum_sha384( mbedtls_ssl_context *, const unsigned char *, size_t );
Sstatic void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *, unsigned char * );
Sstatic void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
S#endif
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S
Sint mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
S{
S    int ret = 0;
S    unsigned char tmp[64];
S    unsigned char keyblk[256];
S    unsigned char *key1;
S    unsigned char *key2;
S    unsigned char *mac_enc;
S    unsigned char *mac_dec;
S    size_t iv_copy_len;
S    const mbedtls_cipher_info_t *cipher_info;
S    const mbedtls_md_info_t *md_info;
S
S    mbedtls_ssl_session *session = ssl->session_negotiate;
S    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
S    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
S
S    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
S    if( cipher_info == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
S                            transform->ciphersuite_info->cipher ) );
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
S    if( md_info == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
S                            transform->ciphersuite_info->mac ) );
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    /*
S     * Set appropriate PRF function and other SSL / TLS / TLS1.2 functions
S     */
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S    {
S        handshake->tls_prf = ssl3_prf;
S        handshake->calc_verify = ssl_calc_verify_ssl;
S        handshake->calc_finished = ssl_calc_finished_ssl;
S    }
S    else
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
S    if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )
S    {
S        handshake->tls_prf = tls1_prf;
S        handshake->calc_verify = ssl_calc_verify_tls;
S        handshake->calc_finished = ssl_calc_finished_tls;
S    }
S    else
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA512_C)
S    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
S        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
S    {
S        handshake->tls_prf = tls_prf_sha384;
S        handshake->calc_verify = ssl_calc_verify_tls_sha384;
S        handshake->calc_finished = ssl_calc_finished_tls_sha384;
S    }
S    else
S#endif
S#if defined(MBEDTLS_SHA256_C)
S    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
S    {
S        handshake->tls_prf = tls_prf_sha256;
S        handshake->calc_verify = ssl_calc_verify_tls_sha256;
S        handshake->calc_finished = ssl_calc_finished_tls_sha256;
S    }
S    else
S#endif
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    /*
S     * SSLv3:
S     *   master =
S     *     MD5( premaster + SHA1( 'A'   + premaster + randbytes ) ) +
S     *     MD5( premaster + SHA1( 'BB'  + premaster + randbytes ) ) +
S     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
S     *
S     * TLSv1+:
S     *   master = PRF( premaster, "master secret", randbytes )[0..47]
S     */
S    if( handshake->resume == 0 )
S    {
S        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
S                       handshake->pmslen );
S
S#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
S        if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED )
S        {
S            unsigned char session_hash[48];
S            size_t hash_len;
S
S            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using extended master secret" ) );
S
S            ssl->handshake->calc_verify( ssl, session_hash );
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
S            {
S#if defined(MBEDTLS_SHA512_C)
S                if( ssl->transform_negotiate->ciphersuite_info->mac ==
S                    MBEDTLS_MD_SHA384 )
S                {
S                    hash_len = 48;
S                }
S                else
S#endif
S                    hash_len = 32;
S            }
S            else
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S                hash_len = 36;
S
S            MBEDTLS_SSL_DEBUG_BUF( 3, "session hash", session_hash, hash_len );
S
S            ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
S                                      "extended master secret",
S                                      session_hash, hash_len,
S                                      session->master, 48 );
S            if( ret != 0 )
S            {
S                MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
S                return( ret );
S            }
S
S        }
S        else
S#endif
S        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
S                                  "master secret",
S                                  handshake->randbytes, 64,
S                                  session->master, 48 );
S        if( ret != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
S            return( ret );
S        }
S
S        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
S    }
S    else
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
S
S    /*
S     * Swap the client and server random values.
S     */
S    memcpy( tmp, handshake->randbytes, 64 );
S    memcpy( handshake->randbytes, tmp + 32, 32 );
S    memcpy( handshake->randbytes + 32, tmp, 32 );
S    mbedtls_zeroize( tmp, sizeof( tmp ) );
S
S    /*
S     *  SSLv3:
S     *    key block =
S     *      MD5( master + SHA1( 'A'    + master + randbytes ) ) +
S     *      MD5( master + SHA1( 'BB'   + master + randbytes ) ) +
S     *      MD5( master + SHA1( 'CCC'  + master + randbytes ) ) +
S     *      MD5( master + SHA1( 'DDDD' + master + randbytes ) ) +
S     *      ...
S     *
S     *  TLSv1:
S     *    key block = PRF( master, "key expansion", randbytes )
S     */
S    ret = handshake->tls_prf( session->master, 48, "key expansion",
S                              handshake->randbytes, 64, keyblk, 256 );
S    if( ret != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
S        return( ret );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
S                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
S    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
S    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
S    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
S
S    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
S
S    /*
S     * Determine the appropriate key, IV and MAC length.
S     */
S
S    transform->keylen = cipher_info->key_bitlen / 8;
S
S    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
S        cipher_info->mode == MBEDTLS_MODE_CCM )
S    {
S        transform->maclen = 0;
S
S        transform->ivlen = 12;
S        transform->fixed_ivlen = 4;
S
S        /* Minimum length is expicit IV + tag */
S        transform->minlen = transform->ivlen - transform->fixed_ivlen
S                            + ( transform->ciphersuite_info->flags &
S                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
S    }
S    else
S    {
S        /* Initialize HMAC contexts */
S        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
S            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
S            return( ret );
S        }
S
S        /* Get MAC length */
S        transform->maclen = mbedtls_md_get_size( md_info );
S
S#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)
S        /*
S         * If HMAC is to be truncated, we shall keep the leftmost bytes,
S         * (rfc 6066 page 13 or rfc 2104 section 4),
S         * so we only need to adjust the length here.
S         */
S        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
S            transform->maclen = MBEDTLS_SSL_TRUNCATED_HMAC_LEN;
S#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
S
S        /* IV length */
S        transform->ivlen = cipher_info->iv_size;
S
S        /* Minimum length */
S        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
S            transform->minlen = transform->maclen;
S        else
S        {
S            /*
S             * GenericBlockCipher:
S             * 1. if EtM is in use: one block plus MAC
S             *    otherwise: * first multiple of blocklen greater than maclen
S             * 2. IV except for SSL3 and TLS 1.0
S             */
S#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
S            if( session->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED )
S            {
S                transform->minlen = transform->maclen
S                                  + cipher_info->block_size;
S            }
S            else
S#endif
S            {
S                transform->minlen = transform->maclen
S                                  + cipher_info->block_size
S                                  - transform->maclen % cipher_info->block_size;
S            }
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
S            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||
S                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
S                ; /* No need to adjust minlen */
S            else
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
S            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
S                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
S            {
S                transform->minlen += transform->ivlen;
S            }
S            else
S#endif
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S            }
S        }
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
S                   transform->keylen, transform->minlen, transform->ivlen,
S                   transform->maclen ) );
S
S    /*
S     * Finally setup the cipher contexts, IVs and MAC secrets.
S     */
S#if defined(MBEDTLS_SSL_CLI_C)
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
S    {
S        key1 = keyblk + transform->maclen * 2;
S        key2 = keyblk + transform->maclen * 2 + transform->keylen;
S
S        mac_enc = keyblk;
S        mac_dec = keyblk + transform->maclen;
S
S        /*
S         * This is not used in TLS v1.1.
S         */
S        iv_copy_len = ( transform->fixed_ivlen ) ?
S                            transform->fixed_ivlen : transform->ivlen;
S        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
S        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
S                iv_copy_len );
S    }
S    else
S#endif /* MBEDTLS_SSL_CLI_C */
S#if defined(MBEDTLS_SSL_SRV_C)
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
S    {
S        key1 = keyblk + transform->maclen * 2 + transform->keylen;
S        key2 = keyblk + transform->maclen * 2;
S
S        mac_enc = keyblk + transform->maclen;
S        mac_dec = keyblk;
S
S        /*
S         * This is not used in TLS v1.1.
S         */
S        iv_copy_len = ( transform->fixed_ivlen ) ?
S                            transform->fixed_ivlen : transform->ivlen;
S        memcpy( transform->iv_dec, key1 + transform->keylen,  iv_copy_len );
S        memcpy( transform->iv_enc, key1 + transform->keylen + iv_copy_len,
S                iv_copy_len );
S    }
S    else
S#endif /* MBEDTLS_SSL_SRV_C */
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S    {
S        if( transform->maclen > sizeof transform->mac_enc )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S        memcpy( transform->mac_enc, mac_enc, transform->maclen );
S        memcpy( transform->mac_dec, mac_dec, transform->maclen );
S    }
S    else
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_2)
S    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
S    {
S        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, transform->maclen );
S        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, transform->maclen );
S    }
S    else
S#endif
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
S    if( mbedtls_ssl_hw_record_init != NULL )
S    {
S        int ret = 0;
S
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_init()" ) );
S
S        if( ( ret = mbedtls_ssl_hw_record_init( ssl, key1, key2, transform->keylen,
S                                        transform->iv_enc, transform->iv_dec,
S                                        iv_copy_len,
S                                        mac_enc, mac_dec,
S                                        transform->maclen ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_init", ret );
S            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
S        }
S    }
S#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
S
S#if defined(MBEDTLS_SSL_EXPORT_KEYS)
S    if( ssl->conf->f_export_keys != NULL )
S    {
S        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
S                                  session->master, keyblk,
S                                  transform->maclen, transform->keylen,
S                                  iv_copy_len );
S    }
S#endif
S
S    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
S                                 cipher_info ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
S        return( ret );
S    }
S
S    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
S                                 cipher_info ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
S        return( ret );
S    }
S
S    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
S                               cipher_info->key_bitlen,
S                               MBEDTLS_ENCRYPT ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
S        return( ret );
S    }
S
S    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
S                               cipher_info->key_bitlen,
S                               MBEDTLS_DECRYPT ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
S        return( ret );
S    }
S
S#if defined(MBEDTLS_CIPHER_MODE_CBC)
S    if( cipher_info->mode == MBEDTLS_MODE_CBC )
S    {
S        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
S                                             MBEDTLS_PADDING_NONE ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
S            return( ret );
S        }
S
S        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
S                                             MBEDTLS_PADDING_NONE ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
S            return( ret );
S        }
S    }
S#endif /* MBEDTLS_CIPHER_MODE_CBC */
S
S    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
S
S#if defined(MBEDTLS_ZLIB_SUPPORT)
S    // Initialize compression
S    //
S    if( session->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
S    {
S        if( ssl->compress_buf == NULL )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Allocating compression buffer" ) );
S            ssl->compress_buf = mbedtls_calloc( 1, MBEDTLS_SSL_BUFFER_LEN );
S            if( ssl->compress_buf == NULL )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
S                                    MBEDTLS_SSL_BUFFER_LEN ) );
S                return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S            }
S        }
S
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "Initializing zlib states" ) );
S
S        memset( &transform->ctx_deflate, 0, sizeof( transform->ctx_deflate ) );
S        memset( &transform->ctx_inflate, 0, sizeof( transform->ctx_inflate ) );
S
S        if( deflateInit( &transform->ctx_deflate,
S                         Z_DEFAULT_COMPRESSION )   != Z_OK ||
S            inflateInit( &transform->ctx_inflate ) != Z_OK )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "Failed to initialize compression" ) );
S            return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
S        }
S    }
S#endif /* MBEDTLS_ZLIB_SUPPORT */
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
S
S    return( 0 );
S}
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
Svoid ssl_calc_verify_ssl( mbedtls_ssl_context *ssl, unsigned char hash[36] )
S{
S    mbedtls_md5_context md5;
S    mbedtls_sha1_context sha1;
S    unsigned char pad_1[48];
S    unsigned char pad_2[48];
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify ssl" ) );
S
S    mbedtls_md5_init( &md5 );
S    mbedtls_sha1_init( &sha1 );
S
S    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
S    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
S
S    memset( pad_1, 0x36, 48 );
S    memset( pad_2, 0x5C, 48 );
S
S    mbedtls_md5_update( &md5, ssl->session_negotiate->master, 48 );
S    mbedtls_md5_update( &md5, pad_1, 48 );
S    mbedtls_md5_finish( &md5, hash );
S
S    mbedtls_md5_starts( &md5 );
S    mbedtls_md5_update( &md5, ssl->session_negotiate->master, 48 );
S    mbedtls_md5_update( &md5, pad_2, 48 );
S    mbedtls_md5_update( &md5, hash,  16 );
S    mbedtls_md5_finish( &md5, hash );
S
S    mbedtls_sha1_update( &sha1, ssl->session_negotiate->master, 48 );
S    mbedtls_sha1_update( &sha1, pad_1, 40 );
S    mbedtls_sha1_finish( &sha1, hash + 16 );
S
S    mbedtls_sha1_starts( &sha1 );
S    mbedtls_sha1_update( &sha1, ssl->session_negotiate->master, 48 );
S    mbedtls_sha1_update( &sha1, pad_2, 40 );
S    mbedtls_sha1_update( &sha1, hash + 16, 20 );
S    mbedtls_sha1_finish( &sha1, hash + 16 );
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 36 );
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
S
S    mbedtls_md5_free(  &md5  );
S    mbedtls_sha1_free( &sha1 );
S
S    return;
S}
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
Svoid ssl_calc_verify_tls( mbedtls_ssl_context *ssl, unsigned char hash[36] )
S{
S    mbedtls_md5_context md5;
S    mbedtls_sha1_context sha1;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify tls" ) );
S
S    mbedtls_md5_init( &md5 );
S    mbedtls_sha1_init( &sha1 );
S
S    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
S    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
S
S     mbedtls_md5_finish( &md5,  hash );
S    mbedtls_sha1_finish( &sha1, hash + 16 );
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 36 );
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
S
S    mbedtls_md5_free(  &md5  );
S    mbedtls_sha1_free( &sha1 );
S
S    return;
S}
S#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA256_C)
Svoid ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
S{
S    mbedtls_sha256_context sha256;
S
S    mbedtls_sha256_init( &sha256 );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
S
S    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
S    mbedtls_sha256_finish( &sha256, hash );
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
S
S    mbedtls_sha256_free( &sha256 );
S
S    return;
S}
S#endif /* MBEDTLS_SHA256_C */
S
S#if defined(MBEDTLS_SHA512_C)
Svoid ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
S{
S    mbedtls_sha512_context sha512;
S
S    mbedtls_sha512_init( &sha512 );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
S
S    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
S    mbedtls_sha512_finish( &sha512, hash );
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
S
S    mbedtls_sha512_free( &sha512 );
S
S    return;
S}
S#endif /* MBEDTLS_SHA512_C */
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S
S#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
Sint mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
S{
S    unsigned char *p = ssl->handshake->premaster;
S    unsigned char *end = p + sizeof( ssl->handshake->premaster );
S    const unsigned char *psk = ssl->conf->psk;
S    size_t psk_len = ssl->conf->psk_len;
S
S    /* If the psk callback was called, use its result */
S    if( ssl->handshake->psk != NULL )
S    {
S        psk = ssl->handshake->psk;
S        psk_len = ssl->handshake->psk_len;
S    }
S
S    /*
S     * PMS = struct {
S     *     opaque other_secret<0..2^16-1>;
S     *     opaque psk<0..2^16-1>;
S     * };
S     * with "other_secret" depending on the particular key exchange
S     */
S#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
S    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
S    {
S        if( end - p < 2 )
S            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S        *(p++) = (unsigned char)( psk_len >> 8 );
S        *(p++) = (unsigned char)( psk_len      );
S
S        if( end < p || (size_t)( end - p ) < psk_len )
S            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S        memset( p, 0, psk_len );
S        p += psk_len;
S    }
S    else
S#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
S#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
S    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
S    {
S        /*
S         * other_secret already set by the ClientKeyExchange message,
S         * and is 48 bytes long
S         */
S        *p++ = 0;
S        *p++ = 48;
S        p += 48;
S    }
S    else
S#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
S#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
S    if( key_ex == MBEDTLS_KEY_EXCHANGE_DHE_PSK )
S    {
S        int ret;
S        size_t len;
S
S        /* Write length only when we know the actual value */
S        if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,
S                                      p + 2, end - ( p + 2 ), &len,
S                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_dhm_calc_secret", ret );
S            return( ret );
S        }
S        *(p++) = (unsigned char)( len >> 8 );
S        *(p++) = (unsigned char)( len );
S        p += len;
S
S        MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: K ", &ssl->handshake->dhm_ctx.K  );
S    }
S    else
S#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
S#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
S    if( key_ex == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )
S    {
S        int ret;
S        size_t zlen;
S
S        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx, &zlen,
S                                       p + 2, end - ( p + 2 ),
S                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
S            return( ret );
S        }
S
S        *(p++) = (unsigned char)( zlen >> 8 );
S        *(p++) = (unsigned char)( zlen      );
S        p += zlen;
S
S        MBEDTLS_SSL_DEBUG_MPI( 3, "ECDH: z", &ssl->handshake->ecdh_ctx.z );
S    }
S    else
S#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    /* opaque psk<0..2^16-1>; */
S    if( end - p < 2 )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    *(p++) = (unsigned char)( psk_len >> 8 );
S    *(p++) = (unsigned char)( psk_len      );
S
S    if( end < p || (size_t)( end - p ) < psk_len )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    memcpy( p, psk, psk_len );
S    p += psk_len;
S
S    ssl->handshake->pmslen = p - ssl->handshake->premaster;
S
S    return( 0 );
S}
S#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S/*
S * SSLv3.0 MAC functions
S */
Sstatic void ssl_mac( mbedtls_md_context_t *md_ctx, unsigned char *secret,
S                     unsigned char *buf, size_t len,
S                     unsigned char *ctr, int type )
S{
S    unsigned char header[11];
S    unsigned char padding[48];
S    int padlen;
S    int md_size = mbedtls_md_get_size( md_ctx->md_info );
S    int md_type = mbedtls_md_get_type( md_ctx->md_info );
S
S    /* Only MD5 and SHA-1 supported */
S    if( md_type == MBEDTLS_MD_MD5 )
S        padlen = 48;
S    else
S        padlen = 40;
S
S    memcpy( header, ctr, 8 );
S    header[ 8] = (unsigned char)  type;
S    header[ 9] = (unsigned char)( len >> 8 );
S    header[10] = (unsigned char)( len      );
S
S    memset( padding, 0x36, padlen );
S    mbedtls_md_starts( md_ctx );
S    mbedtls_md_update( md_ctx, secret,  md_size );
S    mbedtls_md_update( md_ctx, padding, padlen  );
S    mbedtls_md_update( md_ctx, header,  11      );
S    mbedtls_md_update( md_ctx, buf,     len     );
S    mbedtls_md_finish( md_ctx, buf +    len     );
S
S    memset( padding, 0x5C, padlen );
S    mbedtls_md_starts( md_ctx );
S    mbedtls_md_update( md_ctx, secret,    md_size );
S    mbedtls_md_update( md_ctx, padding,   padlen  );
S    mbedtls_md_update( md_ctx, buf + len, md_size );
S    mbedtls_md_finish( md_ctx, buf + len          );
S}
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S
S#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER) ||     \
S    ( defined(MBEDTLS_CIPHER_MODE_CBC) &&                                  \
S      ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) ) )
X#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER) ||         ( defined(MBEDTLS_CIPHER_MODE_CBC) &&                                        ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) ) )
S#define SSL_SOME_MODES_USE_MAC
S#endif
S
S/*
S * Encryption/decryption functions
S */
Sstatic int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
S{
S    mbedtls_cipher_mode_t mode;
S    int auth_done = 0;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
S
S    if( ssl->session_out == NULL || ssl->transform_out == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );
S
S    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
S                      ssl->out_msg, ssl->out_msglen );
S
S    /*
S     * Add MAC before if needed
S     */
S#if defined(SSL_SOME_MODES_USE_MAC)
S    if( mode == MBEDTLS_MODE_STREAM ||
S        ( mode == MBEDTLS_MODE_CBC
S#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
S          && ssl->session_out->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED
S#endif
S        ) )
S    {
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S        {
S            ssl_mac( &ssl->transform_out->md_ctx_enc,
S                      ssl->transform_out->mac_enc,
S                      ssl->out_msg, ssl->out_msglen,
S                      ssl->out_ctr, ssl->out_msgtype );
S        }
S        else
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
S        defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) ||         defined(MBEDTLS_SSL_PROTO_TLS1_2)
S        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
S        {
S            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
S            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
S            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
S            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
S                             ssl->out_msg, ssl->out_msglen );
S            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc,
S                             ssl->out_msg + ssl->out_msglen );
S            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
S        }
S        else
S#endif
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
S                       ssl->out_msg + ssl->out_msglen,
S                       ssl->transform_out->maclen );
S
S        ssl->out_msglen += ssl->transform_out->maclen;
S        auth_done++;
S    }
S#endif /* AEAD not the only option */
S
S    /*
S     * Encrypt
S     */
S#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
S    if( mode == MBEDTLS_MODE_STREAM )
S    {
S        int ret;
S        size_t olen = 0;
S
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
S                            "including %d bytes of padding",
S                       ssl->out_msglen, 0 ) );
S
S        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
S                                   ssl->transform_out->iv_enc,
S                                   ssl->transform_out->ivlen,
S                                   ssl->out_msg, ssl->out_msglen,
S                                   ssl->out_msg, &olen ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
S            return( ret );
S        }
S
S        if( ssl->out_msglen != olen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S    }
S    else
S#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
S#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
S    if( mode == MBEDTLS_MODE_GCM ||
S        mode == MBEDTLS_MODE_CCM )
S    {
S        int ret;
S        size_t enc_msglen, olen;
S        unsigned char *enc_msg;
S        unsigned char add_data[13];
S        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
S                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
S
S        memcpy( add_data, ssl->out_ctr, 8 );
S        add_data[8]  = ssl->out_msgtype;
S        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
S                           ssl->conf->transport, add_data + 9 );
S        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
S        add_data[12] = ssl->out_msglen & 0xFF;
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
S                       add_data, 13 );
S
S        /*
S         * Generate IV
S         */
S#if defined(MBEDTLS_SSL_AEAD_RANDOM_IV)
S        ret = ssl->conf->f_rng( ssl->conf->p_rng,
S                ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
S                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );
S        if( ret != 0 )
S            return( ret );
S
S        memcpy( ssl->out_iv,
S                ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
S                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );
S#else
S        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
S        {
S            /* Reminder if we ever add an AEAD mode with a different size */
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
S                             ssl->out_ctr, 8 );
S        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
S#endif
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
S                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );
S
S        /*
S         * Fix pointer positions and message length with added IV
S         */
S        enc_msg = ssl->out_msg;
S        enc_msglen = ssl->out_msglen;
S        ssl->out_msglen += ssl->transform_out->ivlen -
S                           ssl->transform_out->fixed_ivlen;
S
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
S                            "including %d bytes of padding",
S                       ssl->out_msglen, 0 ) );
S
S        /*
S         * Encrypt and authenticate
S         */
S        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
S                                         ssl->transform_out->iv_enc,
S                                         ssl->transform_out->ivlen,
S                                         add_data, 13,
S                                         enc_msg, enc_msglen,
S                                         enc_msg, &olen,
S                                         enc_msg + enc_msglen, taglen ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
S            return( ret );
S        }
S
S        if( olen != enc_msglen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S        ssl->out_msglen += taglen;
S        auth_done++;
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
S    }
S    else
S#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
S#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
S    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
X#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                        ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
S    if( mode == MBEDTLS_MODE_CBC )
S    {
S        int ret;
S        unsigned char *enc_msg;
S        size_t enc_msglen, padlen, olen = 0, i;
S
S        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
S                 ssl->transform_out->ivlen;
S        if( padlen == ssl->transform_out->ivlen )
S            padlen = 0;
S
S        for( i = 0; i <= padlen; i++ )
S            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
S
S        ssl->out_msglen += padlen + 1;
S
S        enc_msglen = ssl->out_msglen;
S        enc_msg = ssl->out_msg;
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
S        /*
S         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
S         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
S         */
S        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
S        {
S            /*
S             * Generate IV
S             */
S            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
S                                  ssl->transform_out->ivlen );
S            if( ret != 0 )
S                return( ret );
S
S            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
S                    ssl->transform_out->ivlen );
S
S            /*
S             * Fix pointer positions and message length with added IV
S             */
S            enc_msg = ssl->out_msg;
S            enc_msglen = ssl->out_msglen;
S            ssl->out_msglen += ssl->transform_out->ivlen;
S        }
S#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */
S
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
S                            "including %d bytes of IV and %d bytes of padding",
S                            ssl->out_msglen, ssl->transform_out->ivlen,
S                            padlen + 1 ) );
S
S        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
S                                   ssl->transform_out->iv_enc,
S                                   ssl->transform_out->ivlen,
S                                   enc_msg, enc_msglen,
S                                   enc_msg, &olen ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
S            return( ret );
S        }
S
S        if( enc_msglen != olen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
S        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
S        {
S            /*
S             * Save IV in SSL3 and TLS1
S             */
S            memcpy( ssl->transform_out->iv_enc,
S                    ssl->transform_out->cipher_ctx_enc.iv,
S                    ssl->transform_out->ivlen );
S        }
S#endif
S
S#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
S        if( auth_done == 0 )
S        {
S            /*
S             * MAC(MAC_write_key, seq_num +
S             *     TLSCipherText.type +
S             *     TLSCipherText.version +
S             *     length_of( (IV +) ENC(...) ) +
S             *     IV + // except for TLS 1.0
S             *     ENC(content + padding + padding_length));
S             */
S            unsigned char pseudo_hdr[13];
S
S            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using encrypt then mac" ) );
S
S            memcpy( pseudo_hdr +  0, ssl->out_ctr, 8 );
S            memcpy( pseudo_hdr +  8, ssl->out_hdr, 3 );
S            pseudo_hdr[11] = (unsigned char)( ( ssl->out_msglen >> 8 ) & 0xFF );
S            pseudo_hdr[12] = (unsigned char)( ( ssl->out_msglen      ) & 0xFF );
S
S            MBEDTLS_SSL_DEBUG_BUF( 4, "MAC'd meta-data", pseudo_hdr, 13 );
S
S            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, pseudo_hdr, 13 );
S            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
S                             ssl->out_iv, ssl->out_msglen );
S            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc,
S                             ssl->out_iv + ssl->out_msglen );
S            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
S
S            ssl->out_msglen += ssl->transform_out->maclen;
S            auth_done++;
S        }
S#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
S    }
S    else
S#endif /* MBEDTLS_CIPHER_MODE_CBC &&
S          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    /* Make extra sure authentication was performed, exactly once */
S    if( auth_done != 1 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
S
S    return( 0 );
S}
S
S#define SSL_MAX_MAC_SIZE   48
S
Sstatic int ssl_decrypt_buf( mbedtls_ssl_context *ssl )
S{
S    size_t i;
S    mbedtls_cipher_mode_t mode;
S    int auth_done = 0;
S#if defined(SSL_SOME_MODES_USE_MAC)
S    size_t padlen = 0, correct = 1;
S#endif
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
S
S    if( ssl->session_in == NULL || ssl->transform_in == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );
S
S    if( ssl->in_msglen < ssl->transform_in->minlen )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
S                       ssl->in_msglen, ssl->transform_in->minlen ) );
S        return( MBEDTLS_ERR_SSL_INVALID_MAC );
S    }
S
S#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
S    if( mode == MBEDTLS_MODE_STREAM )
S    {
S        int ret;
S        size_t olen = 0;
S
S        padlen = 0;
S
S        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
S                                   ssl->transform_in->iv_dec,
S                                   ssl->transform_in->ivlen,
S                                   ssl->in_msg, ssl->in_msglen,
S                                   ssl->in_msg, &olen ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
S            return( ret );
S        }
S
S        if( ssl->in_msglen != olen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S    }
S    else
S#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
S#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
S    if( mode == MBEDTLS_MODE_GCM ||
S        mode == MBEDTLS_MODE_CCM )
S    {
S        int ret;
S        size_t dec_msglen, olen;
S        unsigned char *dec_msg;
S        unsigned char *dec_msg_result;
S        unsigned char add_data[13];
S        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
S                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
S        size_t explicit_iv_len = ssl->transform_in->ivlen -
S                                 ssl->transform_in->fixed_ivlen;
S
S        if( ssl->in_msglen < explicit_iv_len + taglen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
S                                "+ taglen (%d)", ssl->in_msglen,
S                                explicit_iv_len, taglen ) );
S            return( MBEDTLS_ERR_SSL_INVALID_MAC );
S        }
S        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
S
S        dec_msg = ssl->in_msg;
S        dec_msg_result = ssl->in_msg;
S        ssl->in_msglen = dec_msglen;
S
S        memcpy( add_data, ssl->in_ctr, 8 );
S        add_data[8]  = ssl->in_msgtype;
S        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
S                           ssl->conf->transport, add_data + 9 );
S        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
S        add_data[12] = ssl->in_msglen & 0xFF;
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
S                       add_data, 13 );
S
S        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
S                ssl->in_iv,
S                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
S                                     ssl->transform_in->ivlen );
S        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
S
S        /*
S         * Decrypt and authenticate
S         */
S        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
S                                         ssl->transform_in->iv_dec,
S                                         ssl->transform_in->ivlen,
S                                         add_data, 13,
S                                         dec_msg, dec_msglen,
S                                         dec_msg_result, &olen,
S                                         dec_msg + dec_msglen, taglen ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
S
S            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
S                return( MBEDTLS_ERR_SSL_INVALID_MAC );
S
S            return( ret );
S        }
S        auth_done++;
S
S        if( olen != dec_msglen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S    }
S    else
S#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
S#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
S    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
X#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                        ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
S    if( mode == MBEDTLS_MODE_CBC )
S    {
S        /*
S         * Decrypt and check the padding
S         */
S        int ret;
S        unsigned char *dec_msg;
S        unsigned char *dec_msg_result;
S        size_t dec_msglen;
S        size_t minlen = 0;
S        size_t olen = 0;
S
S        /*
S         * Check immediate ciphertext sanity
S         */
S#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
S        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
S            minlen += ssl->transform_in->ivlen;
S#endif
S
S        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
S            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
S                                "+ 1 ) ( + expl IV )", ssl->in_msglen,
S                                ssl->transform_in->ivlen,
S                                ssl->transform_in->maclen ) );
S            return( MBEDTLS_ERR_SSL_INVALID_MAC );
S        }
S
S        dec_msglen = ssl->in_msglen;
S        dec_msg = ssl->in_msg;
S        dec_msg_result = ssl->in_msg;
S
S        /*
S         * Authenticate before decrypt if enabled
S         */
S#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
S        if( ssl->session_in->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED )
S        {
S            unsigned char computed_mac[SSL_MAX_MAC_SIZE];
S            unsigned char pseudo_hdr[13];
S
S            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using encrypt then mac" ) );
S
S            dec_msglen -= ssl->transform_in->maclen;
S            ssl->in_msglen -= ssl->transform_in->maclen;
S
S            memcpy( pseudo_hdr +  0, ssl->in_ctr, 8 );
S            memcpy( pseudo_hdr +  8, ssl->in_hdr, 3 );
S            pseudo_hdr[11] = (unsigned char)( ( ssl->in_msglen >> 8 ) & 0xFF );
S            pseudo_hdr[12] = (unsigned char)( ( ssl->in_msglen      ) & 0xFF );
S
S            MBEDTLS_SSL_DEBUG_BUF( 4, "MAC'd meta-data", pseudo_hdr, 13 );
S
S            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, pseudo_hdr, 13 );
S            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec,
S                             ssl->in_iv, ssl->in_msglen );
S            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, computed_mac );
S            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
S
S            MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_iv + ssl->in_msglen,
S                                              ssl->transform_in->maclen );
S            MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac", computed_mac,
S                                              ssl->transform_in->maclen );
S
S            if( mbedtls_ssl_safer_memcmp( ssl->in_iv + ssl->in_msglen, computed_mac,
S                              ssl->transform_in->maclen ) != 0 )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
S
S                return( MBEDTLS_ERR_SSL_INVALID_MAC );
S            }
S            auth_done++;
S        }
S#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
S
S        /*
S         * Check length sanity
S         */
S        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
S                           ssl->in_msglen, ssl->transform_in->ivlen ) );
S            return( MBEDTLS_ERR_SSL_INVALID_MAC );
S        }
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
S        /*
S         * Initialize for prepended IV for block cipher in TLS v1.1 and up
S         */
S        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
S        {
S            dec_msglen -= ssl->transform_in->ivlen;
S            ssl->in_msglen -= ssl->transform_in->ivlen;
S
S            for( i = 0; i < ssl->transform_in->ivlen; i++ )
S                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
S        }
S#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */
S
S        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
S                                   ssl->transform_in->iv_dec,
S                                   ssl->transform_in->ivlen,
S                                   dec_msg, dec_msglen,
S                                   dec_msg_result, &olen ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
S            return( ret );
S        }
S
S        if( dec_msglen != olen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
S        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
S        {
S            /*
S             * Save IV in SSL3 and TLS1
S             */
S            memcpy( ssl->transform_in->iv_dec,
S                    ssl->transform_in->cipher_ctx_dec.iv,
S                    ssl->transform_in->ivlen );
S        }
S#endif
S
S        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
S
S        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
S            auth_done == 0 )
S        {
S#if defined(MBEDTLS_SSL_DEBUG_ALL)
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
S                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
S#endif
S            padlen = 0;
S            correct = 0;
S        }
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S        {
S            if( padlen > ssl->transform_in->ivlen )
S            {
S#if defined(MBEDTLS_SSL_DEBUG_ALL)
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding length: is %d, "
S                                    "should be no more than %d",
S                               padlen, ssl->transform_in->ivlen ) );
S#endif
S                correct = 0;
S            }
S        }
S        else
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_2)
S        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
S        {
S            /*
S             * TLSv1+: always check the padding up to the first failure
S             * and fake check up to 256 bytes of padding
S             */
S            size_t pad_count = 0, real_count = 1;
S            size_t padding_idx = ssl->in_msglen - padlen - 1;
S
S            /*
S             * Padding is guaranteed to be incorrect if:
S             *   1. padlen >= ssl->in_msglen
S             *
S             *   2. padding_idx >= MBEDTLS_SSL_MAX_CONTENT_LEN +
S             *                     ssl->transform_in->maclen
S             *
S             * In both cases we reset padding_idx to a safe value (0) to
S             * prevent out-of-buffer reads.
S             */
S            correct &= ( ssl->in_msglen >= padlen + 1 );
S            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
S                                       ssl->transform_in->maclen );
S
S            padding_idx *= correct;
S
S            for( i = 1; i <= 256; i++ )
S            {
S                real_count &= ( i <= padlen );
S                pad_count += real_count *
S                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
S            }
S
S            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
S
S#if defined(MBEDTLS_SSL_DEBUG_ALL)
S            if( padlen > 0 && correct == 0 )
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
S#endif
S            padlen &= correct * 0x1FF;
S        }
S        else
S#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
S          MBEDTLS_SSL_PROTO_TLS1_2 */
X#endif  
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S        ssl->in_msglen -= padlen;
S    }
S    else
S#endif /* MBEDTLS_CIPHER_MODE_CBC &&
S          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
S                   ssl->in_msg, ssl->in_msglen );
S
S    /*
S     * Authenticate if not done yet.
S     * Compute the MAC regardless of the padding result (RFC4346, CBCTIME).
S     */
S#if defined(SSL_SOME_MODES_USE_MAC)
S    if( auth_done == 0 )
S    {
S        unsigned char tmp[SSL_MAX_MAC_SIZE];
S
S        ssl->in_msglen -= ssl->transform_in->maclen;
S
S        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
S        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
S
S        memcpy( tmp, ssl->in_msg + ssl->in_msglen, ssl->transform_in->maclen );
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S        {
S            ssl_mac( &ssl->transform_in->md_ctx_dec,
S                      ssl->transform_in->mac_dec,
S                      ssl->in_msg, ssl->in_msglen,
S                      ssl->in_ctr, ssl->in_msgtype );
S        }
S        else
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
S        defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) ||         defined(MBEDTLS_SSL_PROTO_TLS1_2)
S        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
S        {
S            /*
S             * Process MAC and always update for padlen afterwards to make
S             * total time independent of padlen
S             *
S             * extra_run compensates MAC check for padlen
S             *
S             * Known timing attacks:
S             *  - Lucky Thirteen (http://www.isg.rhul.ac.uk/tls/TLStiming.pdf)
S             *
S             * We use ( ( Lx + 8 ) / 64 ) to handle 'negative Lx' values
S             * correctly. (We round down instead of up, so -56 is the correct
S             * value for our calculations instead of -55)
S             */
S            size_t j, extra_run = 0;
S            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
S                        ( 13 + ssl->in_msglen          + 8 ) / 64;
S
S            extra_run &= correct * 0xFF;
S
S            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
S            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
S            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
S            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
S                             ssl->in_msglen );
S            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec,
S                             ssl->in_msg + ssl->in_msglen );
S            /* Call mbedtls_md_process at least once due to cache attacks */
S            for( j = 0; j < extra_run + 1; j++ )
S                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
S
S            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
S        }
S        else
S#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
S              MBEDTLS_SSL_PROTO_TLS1_2 */
X#endif  
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", tmp, ssl->transform_in->maclen );
S        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac", ssl->in_msg + ssl->in_msglen,
S                       ssl->transform_in->maclen );
S
S        if( mbedtls_ssl_safer_memcmp( tmp, ssl->in_msg + ssl->in_msglen,
S                         ssl->transform_in->maclen ) != 0 )
S        {
S#if defined(MBEDTLS_SSL_DEBUG_ALL)
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
S#endif
S            correct = 0;
S        }
S        auth_done++;
S
S        /*
S         * Finally check the correct flag
S         */
S        if( correct == 0 )
S            return( MBEDTLS_ERR_SSL_INVALID_MAC );
S    }
S#endif /* SSL_SOME_MODES_USE_MAC */
S
S    /* Make extra sure authentication was performed, exactly once */
S    if( auth_done != 1 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    if( ssl->in_msglen == 0 )
S    {
S        ssl->nb_zero++;
S
S        /*
S         * Three or more empty messages may be a DoS attack
S         * (excessive CPU consumption).
S         */
S        if( ssl->nb_zero > 3 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
S                                "messages, possible DoS attack" ) );
S            return( MBEDTLS_ERR_SSL_INVALID_MAC );
S        }
S    }
S    else
S        ssl->nb_zero = 0;
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        ; /* in_ctr read from peer, not maintained internally */
S    }
S    else
S#endif
S    {
S        for( i = 8; i > ssl_ep_len( ssl ); i-- )
S            if( ++ssl->in_ctr[i - 1] != 0 )
S                break;
S
S        /* The loop goes to its end iff the counter is wrapping */
S        if( i == ssl_ep_len( ssl ) )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
S            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
S        }
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
S
S    return( 0 );
S}
S
S#undef MAC_NONE
S#undef MAC_PLAINTEXT
S#undef MAC_CIPHERTEXT
S
S#if defined(MBEDTLS_ZLIB_SUPPORT)
S/*
S * Compression/decompression functions
S */
Sstatic int ssl_compress_buf( mbedtls_ssl_context *ssl )
S{
S    int ret;
S    unsigned char *msg_post = ssl->out_msg;
S    size_t len_pre = ssl->out_msglen;
S    unsigned char *msg_pre = ssl->compress_buf;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> compress buf" ) );
S
S    if( len_pre == 0 )
S        return( 0 );
S
S    memcpy( msg_pre, ssl->out_msg, len_pre );
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "before compression: msglen = %d, ",
S                   ssl->out_msglen ) );
S
S    MBEDTLS_SSL_DEBUG_BUF( 4, "before compression: output payload",
S                   ssl->out_msg, ssl->out_msglen );
S
S    ssl->transform_out->ctx_deflate.next_in = msg_pre;
S    ssl->transform_out->ctx_deflate.avail_in = len_pre;
S    ssl->transform_out->ctx_deflate.next_out = msg_post;
S    ssl->transform_out->ctx_deflate.avail_out = MBEDTLS_SSL_BUFFER_LEN;
S
S    ret = deflate( &ssl->transform_out->ctx_deflate, Z_SYNC_FLUSH );
S    if( ret != Z_OK )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "failed to perform compression (%d)", ret ) );
S        return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
S    }
S
S    ssl->out_msglen = MBEDTLS_SSL_BUFFER_LEN -
S                      ssl->transform_out->ctx_deflate.avail_out;
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "after compression: msglen = %d, ",
S                   ssl->out_msglen ) );
S
S    MBEDTLS_SSL_DEBUG_BUF( 4, "after compression: output payload",
S                   ssl->out_msg, ssl->out_msglen );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= compress buf" ) );
S
S    return( 0 );
S}
S
Sstatic int ssl_decompress_buf( mbedtls_ssl_context *ssl )
S{
S    int ret;
S    unsigned char *msg_post = ssl->in_msg;
S    size_t len_pre = ssl->in_msglen;
S    unsigned char *msg_pre = ssl->compress_buf;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decompress buf" ) );
S
S    if( len_pre == 0 )
S        return( 0 );
S
S    memcpy( msg_pre, ssl->in_msg, len_pre );
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "before decompression: msglen = %d, ",
S                   ssl->in_msglen ) );
S
S    MBEDTLS_SSL_DEBUG_BUF( 4, "before decompression: input payload",
S                   ssl->in_msg, ssl->in_msglen );
S
S    ssl->transform_in->ctx_inflate.next_in = msg_pre;
S    ssl->transform_in->ctx_inflate.avail_in = len_pre;
S    ssl->transform_in->ctx_inflate.next_out = msg_post;
S    ssl->transform_in->ctx_inflate.avail_out = MBEDTLS_SSL_MAX_CONTENT_LEN;
S
S    ret = inflate( &ssl->transform_in->ctx_inflate, Z_SYNC_FLUSH );
S    if( ret != Z_OK )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "failed to perform decompression (%d)", ret ) );
S        return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
S    }
S
S    ssl->in_msglen = MBEDTLS_SSL_MAX_CONTENT_LEN -
S                     ssl->transform_in->ctx_inflate.avail_out;
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "after decompression: msglen = %d, ",
S                   ssl->in_msglen ) );
S
S    MBEDTLS_SSL_DEBUG_BUF( 4, "after decompression: input payload",
S                   ssl->in_msg, ssl->in_msglen );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decompress buf" ) );
S
S    return( 0 );
S}
S#endif /* MBEDTLS_ZLIB_SUPPORT */
S
S#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
Sstatic int ssl_write_hello_request( mbedtls_ssl_context *ssl );
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
Sstatic int ssl_resend_hello_request( mbedtls_ssl_context *ssl )
S{
S    /* If renegotiation is not enforced, retransmit until we would reach max
S     * timeout if we were using the usual handshake doubling scheme */
S    if( ssl->conf->renego_max_records < 0 )
S    {
S        uint32_t ratio = ssl->conf->hs_timeout_max / ssl->conf->hs_timeout_min + 1;
S        unsigned char doublings = 1;
S
S        while( ratio != 0 )
S        {
S            ++doublings;
S            ratio >>= 1;
S        }
S
S        if( ++ssl->renego_records_seen > doublings )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "no longer retransmitting hello request" ) );
S            return( 0 );
S        }
S    }
S
S    return( ssl_write_hello_request( ssl ) );
S}
S#endif
S#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
S
S/*
S * Fill the input message buffer by appending data to it.
S * The amount of data already fetched is in ssl->in_left.
S *
S * If we return 0, is it guaranteed that (at least) nb_want bytes are
S * available (from this read and/or a previous one). Otherwise, an error code
S * is returned (possibly EOF or WANT_READ).
S *
S * With stream transport (TLS) on success ssl->in_left == nb_want, but
S * with datagram transport (DTLS) on success ssl->in_left >= nb_want,
S * since we always read a whole datagram at once.
S *
S * For DTLS, it is up to the caller to set ssl->next_record_offset when
S * they're done reading a record.
S */
Sint mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
S{
S    int ret;
S    size_t len;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
S
S    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
S                            "or mbedtls_ssl_set_bio()" ) );
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        uint32_t timeout;
S
S        /* Just to be sure */
S        if( ssl->f_set_timer == NULL || ssl->f_get_timer == NULL )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "You must use "
S                        "mbedtls_ssl_set_timer_cb() for DTLS" ) );
S            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S        }
S
S        /*
S         * The point is, we need to always read a full datagram at once, so we
S         * sometimes read more then requested, and handle the additional data.
S         * It could be the rest of the current record (while fetching the
S         * header) and/or some other records in the same datagram.
S         */
S
S        /*
S         * Move to the next record in the already read datagram if applicable
S         */
S        if( ssl->next_record_offset != 0 )
S        {
S            if( ssl->in_left < ssl->next_record_offset )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S            }
S
S            ssl->in_left -= ssl->next_record_offset;
S
S            if( ssl->in_left != 0 )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 2, ( "next record in same datagram, offset: %d",
S                                    ssl->next_record_offset ) );
S                memmove( ssl->in_hdr,
S                         ssl->in_hdr + ssl->next_record_offset,
S                         ssl->in_left );
S            }
S
S            ssl->next_record_offset = 0;
S        }
S
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
S                       ssl->in_left, nb_want ) );
S
S        /*
S         * Done if we already have enough data.
S         */
S        if( nb_want <= ssl->in_left)
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
S            return( 0 );
S        }
S
S        /*
S         * A record can't be split accross datagrams. If we need to read but
S         * are not at the beginning of a new record, the caller did something
S         * wrong.
S         */
S        if( ssl->in_left != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S        /*
S         * Don't even try to read if time's out already.
S         * This avoids by-passing the timer when repeatedly receiving messages
S         * that will end up being dropped.
S         */
S        if( ssl_check_timer( ssl ) != 0 )
S            ret = MBEDTLS_ERR_SSL_TIMEOUT;
S        else
S        {
S            len = MBEDTLS_SSL_BUFFER_LEN - ( ssl->in_hdr - ssl->in_buf );
S
S            if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
S                timeout = ssl->handshake->retransmit_timeout;
S            else
S                timeout = ssl->conf->read_timeout;
S
S            MBEDTLS_SSL_DEBUG_MSG( 3, ( "f_recv_timeout: %u ms", timeout ) );
S
S            if( ssl->f_recv_timeout != NULL )
S                ret = ssl->f_recv_timeout( ssl->p_bio, ssl->in_hdr, len,
S                                                                    timeout );
S            else
S                ret = ssl->f_recv( ssl->p_bio, ssl->in_hdr, len );
S
S            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
S
S            if( ret == 0 )
S                return( MBEDTLS_ERR_SSL_CONN_EOF );
S        }
S
S        if( ret == MBEDTLS_ERR_SSL_TIMEOUT )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "timeout" ) );
S            ssl_set_timer( ssl, 0 );
S
S            if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
S            {
S                if( ssl_double_retransmit_timeout( ssl ) != 0 )
S                {
S                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake timeout" ) );
S                    return( MBEDTLS_ERR_SSL_TIMEOUT );
S                }
S
S                if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
S                {
S                    MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_resend", ret );
S                    return( ret );
S                }
S
S                return( MBEDTLS_ERR_SSL_WANT_READ );
S            }
S#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
S            else if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
S                     ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
S            {
S                if( ( ret = ssl_resend_hello_request( ssl ) ) != 0 )
S                {
S                    MBEDTLS_SSL_DEBUG_RET( 1, "ssl_resend_hello_request", ret );
S                    return( ret );
S                }
S
S                return( MBEDTLS_ERR_SSL_WANT_READ );
S            }
S#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
S        }
S
S        if( ret < 0 )
S            return( ret );
S
S        ssl->in_left = ret;
S    }
S    else
S#endif
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
S                       ssl->in_left, nb_want ) );
S
S        while( ssl->in_left < nb_want )
S        {
S            len = nb_want - ssl->in_left;
S
S            if( ssl_check_timer( ssl ) != 0 )
S                ret = MBEDTLS_ERR_SSL_TIMEOUT;
S            else
S            {
S                if( ssl->f_recv_timeout != NULL )
S                {
S                    ret = ssl->f_recv_timeout( ssl->p_bio,
S                                               ssl->in_hdr + ssl->in_left, len,
S                                               ssl->conf->read_timeout );
S                }
S                else
S                {
S                    ret = ssl->f_recv( ssl->p_bio,
S                                       ssl->in_hdr + ssl->in_left, len );
S                }
S            }
S
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
S                                        ssl->in_left, nb_want ) );
S            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
S
S            if( ret == 0 )
S                return( MBEDTLS_ERR_SSL_CONN_EOF );
S
S            if( ret < 0 )
S                return( ret );
S
S            ssl->in_left += ret;
S        }
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
S
S    return( 0 );
S}
S
S/*
S * Flush any data not yet written
S */
Sint mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
S{
S    int ret;
S    unsigned char *buf, i;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
S
S    if( ssl->f_send == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
S                            "or mbedtls_ssl_set_bio()" ) );
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    /* Avoid incrementing counter if data is flushed */
S    if( ssl->out_left == 0 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
S        return( 0 );
S    }
S
S    while( ssl->out_left > 0 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
S                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );
S
S        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
S              ssl->out_msglen - ssl->out_left;
S        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
S
S        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
S
S        if( ret <= 0 )
S            return( ret );
S
S        ssl->out_left -= ret;
S    }
S
S    for( i = 8; i > ssl_ep_len( ssl ); i-- )
S        if( ++ssl->out_ctr[i - 1] != 0 )
S            break;
S
S    /* The loop goes to its end iff the counter is wrapping */
S    if( i == ssl_ep_len( ssl ) )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
S        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
S
S    return( 0 );
S}
S
S/*
S * Functions to handle the DTLS retransmission state machine
S */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S/*
S * Append current handshake message to current outgoing flight
S */
Sstatic int ssl_flight_append( mbedtls_ssl_context *ssl )
S{
S    mbedtls_ssl_flight_item *msg;
S
S    /* Allocate space for current message */
S    if( ( msg = mbedtls_calloc( 1, sizeof(  mbedtls_ssl_flight_item ) ) ) == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc %d bytes failed",
S                            sizeof( mbedtls_ssl_flight_item ) ) );
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S    }
S
S    if( ( msg->p = mbedtls_calloc( 1, ssl->out_msglen ) ) == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc %d bytes failed", ssl->out_msglen ) );
S        mbedtls_free( msg );
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S    }
S
S    /* Copy current handshake message with headers */
S    memcpy( msg->p, ssl->out_msg, ssl->out_msglen );
S    msg->len = ssl->out_msglen;
S    msg->type = ssl->out_msgtype;
S    msg->next = NULL;
S
S    /* Append to the current flight */
S    if( ssl->handshake->flight == NULL )
S        ssl->handshake->flight = msg;
S    else
S    {
S        mbedtls_ssl_flight_item *cur = ssl->handshake->flight;
S        while( cur->next != NULL )
S            cur = cur->next;
S        cur->next = msg;
S    }
S
S    return( 0 );
S}
S
S/*
S * Free the current flight of handshake messages
S */
Sstatic void ssl_flight_free( mbedtls_ssl_flight_item *flight )
S{
S    mbedtls_ssl_flight_item *cur = flight;
S    mbedtls_ssl_flight_item *next;
S
S    while( cur != NULL )
S    {
S        next = cur->next;
S
S        mbedtls_free( cur->p );
S        mbedtls_free( cur );
S
S        cur = next;
S    }
S}
S
S#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
Sstatic void ssl_dtls_replay_reset( mbedtls_ssl_context *ssl );
S#endif
S
S/*
S * Swap transform_out and out_ctr with the alternative ones
S */
Sstatic void ssl_swap_epochs( mbedtls_ssl_context *ssl )
S{
S    mbedtls_ssl_transform *tmp_transform;
S    unsigned char tmp_out_ctr[8];
S
S    if( ssl->transform_out == ssl->handshake->alt_transform_out )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip swap epochs" ) );
S        return;
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "swap epochs" ) );
S
S    /* Swap transforms */
S    tmp_transform                     = ssl->transform_out;
S    ssl->transform_out                = ssl->handshake->alt_transform_out;
S    ssl->handshake->alt_transform_out = tmp_transform;
S
S    /* Swap epoch + sequence_number */
S    memcpy( tmp_out_ctr,                 ssl->out_ctr,                8 );
S    memcpy( ssl->out_ctr,                ssl->handshake->alt_out_ctr, 8 );
S    memcpy( ssl->handshake->alt_out_ctr, tmp_out_ctr,                 8 );
S
S    /* Adjust to the newly activated transform */
S    if( ssl->transform_out != NULL &&
S        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
S    {
S        ssl->out_msg = ssl->out_iv + ssl->transform_out->ivlen -
S                                     ssl->transform_out->fixed_ivlen;
S    }
S    else
S        ssl->out_msg = ssl->out_iv;
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
S    if( mbedtls_ssl_hw_record_activate != NULL )
S    {
S        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_OUTBOUND ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
S            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
S        }
S    }
S#endif
S}
S
S/*
S * Retransmit the current flight of messages.
S *
S * Need to remember the current message in case flush_output returns
S * WANT_WRITE, causing us to exit this function and come back later.
S * This function must be called until state is no longer SENDING.
S */
Sint mbedtls_ssl_resend( mbedtls_ssl_context *ssl )
S{
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> mbedtls_ssl_resend" ) );
S
S    if( ssl->handshake->retransmit_state != MBEDTLS_SSL_RETRANS_SENDING )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "initialise resending" ) );
S
S        ssl->handshake->cur_msg = ssl->handshake->flight;
S        ssl_swap_epochs( ssl );
S
S        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_SENDING;
S    }
S
S    while( ssl->handshake->cur_msg != NULL )
S    {
S        int ret;
S        mbedtls_ssl_flight_item *cur = ssl->handshake->cur_msg;
S
S        /* Swap epochs before sending Finished: we can't do it after
S         * sending ChangeCipherSpec, in case write returns WANT_READ.
S         * Must be done before copying, may change out_msg pointer */
S        if( cur->type == MBEDTLS_SSL_MSG_HANDSHAKE &&
S            cur->p[0] == MBEDTLS_SSL_HS_FINISHED )
S        {
S            ssl_swap_epochs( ssl );
S        }
S
S        memcpy( ssl->out_msg, cur->p, cur->len );
S        ssl->out_msglen = cur->len;
S        ssl->out_msgtype = cur->type;
S
S        ssl->handshake->cur_msg = cur->next;
S
S        MBEDTLS_SSL_DEBUG_BUF( 3, "resent handshake message header", ssl->out_msg, 12 );
S
S        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
S            return( ret );
S        }
S    }
S
S    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
S        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
S    else
S    {
S        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
S        ssl_set_timer( ssl, ssl->handshake->retransmit_timeout );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= mbedtls_ssl_resend" ) );
S
S    return( 0 );
S}
S
S/*
S * To be called when the last message of an incoming flight is received.
S */
Svoid mbedtls_ssl_recv_flight_completed( mbedtls_ssl_context *ssl )
S{
S    /* We won't need to resend that one any more */
S    ssl_flight_free( ssl->handshake->flight );
S    ssl->handshake->flight = NULL;
S    ssl->handshake->cur_msg = NULL;
S
S    /* The next incoming flight will start with this msg_seq */
S    ssl->handshake->in_flight_start_seq = ssl->handshake->in_msg_seq;
S
S    /* Cancel timer */
S    ssl_set_timer( ssl, 0 );
S
S    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
S        ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )
S    {
S        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
S    }
S    else
S        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_PREPARING;
S}
S
S/*
S * To be called when the last message of an outgoing flight is send.
S */
Svoid mbedtls_ssl_send_flight_completed( mbedtls_ssl_context *ssl )
S{
S    ssl_reset_retransmit_timeout( ssl );
S    ssl_set_timer( ssl, ssl->handshake->retransmit_timeout );
S
S    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
S        ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )
S    {
S        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
S    }
S    else
S        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
S}
S#endif /* MBEDTLS_SSL_PROTO_DTLS */
S
S/*
S * Record layer functions
S */
S
S/*
S * Write current record.
S * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
S */
Sint mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
S{
S    int ret, done = 0;
S    size_t len = ssl->out_msglen;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
S        ssl->handshake != NULL &&
S        ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )
S    {
S        ; /* Skip special handshake treatment when resending */
S    }
S    else
S#endif
S    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
S    {
S        if( ssl->out_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST &&
S            ssl->handshake == NULL )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S        }
S
S        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
S        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
S        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
S
S        /*
S         * DTLS has additional fields in the Handshake layer,
S         * between the length field and the actual payload:
S         *      uint16 message_seq;
S         *      uint24 fragment_offset;
S         *      uint24 fragment_length;
S         */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S        {
S            /* Make room for the additional DTLS fields */
S            memmove( ssl->out_msg + 12, ssl->out_msg + 4, len - 4 );
S            ssl->out_msglen += 8;
S            len += 8;
S
S            /* Write message_seq and update it, except for HelloRequest */
S            if( ssl->out_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST )
S            {
S                ssl->out_msg[4] = ( ssl->handshake->out_msg_seq >> 8 ) & 0xFF;
S                ssl->out_msg[5] = ( ssl->handshake->out_msg_seq      ) & 0xFF;
S                ++( ssl->handshake->out_msg_seq );
S            }
S            else
S            {
S                ssl->out_msg[4] = 0;
S                ssl->out_msg[5] = 0;
S            }
S
S            /* We don't fragment, so frag_offset = 0 and frag_len = len */
S            memset( ssl->out_msg + 6, 0x00, 3 );
S            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
S        }
S#endif /* MBEDTLS_SSL_PROTO_DTLS */
S
S        if( ssl->out_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST )
S            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
S    }
S
S    /* Save handshake and CCS messages for resending */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
S        ssl->handshake != NULL &&
S        ssl->handshake->retransmit_state != MBEDTLS_SSL_RETRANS_SENDING &&
S        ( ssl->out_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC ||
S          ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE ) )
S    {
S        if( ( ret = ssl_flight_append( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_flight_append", ret );
S            return( ret );
S        }
S    }
S#endif
S
S#if defined(MBEDTLS_ZLIB_SUPPORT)
S    if( ssl->transform_out != NULL &&
S        ssl->session_out->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
S    {
S        if( ( ret = ssl_compress_buf( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_compress_buf", ret );
S            return( ret );
S        }
S
S        len = ssl->out_msglen;
S    }
S#endif /*MBEDTLS_ZLIB_SUPPORT */
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
S    if( mbedtls_ssl_hw_record_write != NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_write()" ) );
S
S        ret = mbedtls_ssl_hw_record_write( ssl );
S        if( ret != 0 && ret != MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_write", ret );
S            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
S        }
S
S        if( ret == 0 )
S            done = 1;
S    }
S#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
S    if( !done )
S    {
S        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
S        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
S                           ssl->conf->transport, ssl->out_hdr + 1 );
S
S        ssl->out_len[0] = (unsigned char)( len >> 8 );
S        ssl->out_len[1] = (unsigned char)( len      );
S
S        if( ssl->transform_out != NULL )
S        {
S            if( ( ret = ssl_encrypt_buf( ssl ) ) != 0 )
S            {
S                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
S                return( ret );
S            }
S
S            len = ssl->out_msglen;
S            ssl->out_len[0] = (unsigned char)( len >> 8 );
S            ssl->out_len[1] = (unsigned char)( len      );
S        }
S
S        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
S
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
S                            "version = [%d:%d], msglen = %d",
S                       ssl->out_hdr[0], ssl->out_hdr[1], ssl->out_hdr[2],
S                     ( ssl->out_len[0] << 8 ) | ssl->out_len[1] ) );
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
S                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
S    }
S
S    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
S        return( ret );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
S
S    return( 0 );
S}
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S/*
S * Mark bits in bitmask (used for DTLS HS reassembly)
S */
Sstatic void ssl_bitmask_set( unsigned char *mask, size_t offset, size_t len )
S{
S    unsigned int start_bits, end_bits;
S
S    start_bits = 8 - ( offset % 8 );
S    if( start_bits != 8 )
S    {
S        size_t first_byte_idx = offset / 8;
S
S        /* Special case */
S        if( len <= start_bits )
S        {
S            for( ; len != 0; len-- )
S                mask[first_byte_idx] |= 1 << ( start_bits - len );
S
S            /* Avoid potential issues with offset or len becoming invalid */
S            return;
S        }
S
S        offset += start_bits; /* Now offset % 8 == 0 */
S        len -= start_bits;
S
S        for( ; start_bits != 0; start_bits-- )
S            mask[first_byte_idx] |= 1 << ( start_bits - 1 );
S    }
S
S    end_bits = len % 8;
S    if( end_bits != 0 )
S    {
S        size_t last_byte_idx = ( offset + len ) / 8;
S
S        len -= end_bits; /* Now len % 8 == 0 */
S
S        for( ; end_bits != 0; end_bits-- )
S            mask[last_byte_idx] |= 1 << ( 8 - end_bits );
S    }
S
S    memset( mask + offset / 8, 0xFF, len / 8 );
S}
S
S/*
S * Check that bitmask is full
S */
Sstatic int ssl_bitmask_check( unsigned char *mask, size_t len )
S{
S    size_t i;
S
S    for( i = 0; i < len / 8; i++ )
S        if( mask[i] != 0xFF )
S            return( -1 );
S
S    for( i = 0; i < len % 8; i++ )
S        if( ( mask[len / 8] & ( 1 << ( 7 - i ) ) ) == 0 )
S            return( -1 );
S
S    return( 0 );
S}
S
S/*
S * Reassemble fragmented DTLS handshake messages.
S *
S * Use a temporary buffer for reassembly, divided in two parts:
S * - the first holds the reassembled message (including handshake header),
S * - the second holds a bitmask indicating which parts of the message
S *   (excluding headers) have been received so far.
S */
Sstatic int ssl_reassemble_dtls_handshake( mbedtls_ssl_context *ssl )
S{
S    unsigned char *msg, *bitmask;
S    size_t frag_len, frag_off;
S    size_t msg_len = ssl->in_hslen - 12; /* Without headers */
S
S    if( ssl->handshake == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "not supported outside handshake (for now)" ) );
S        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
S    }
S
S    /*
S     * For first fragment, check size and allocate buffer
S     */
S    if( ssl->handshake->hs_msg == NULL )
S    {
S        size_t alloc_len;
S
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "initialize reassembly, total length = %d",
S                            msg_len ) );
S
S        if( ssl->in_hslen > MBEDTLS_SSL_MAX_CONTENT_LEN )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too large" ) );
S            return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
S        }
S
S        /* The bitmask needs one bit per byte of message excluding header */
S        alloc_len = 12 + msg_len + msg_len / 8 + ( msg_len % 8 != 0 );
S
S        ssl->handshake->hs_msg = mbedtls_calloc( 1, alloc_len );
S        if( ssl->handshake->hs_msg == NULL )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc failed (%d bytes)", alloc_len ) );
S            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S        }
S
S        /* Prepare final header: copy msg_type, length and message_seq,
S         * then add standardised fragment_offset and fragment_length */
S        memcpy( ssl->handshake->hs_msg, ssl->in_msg, 6 );
S        memset( ssl->handshake->hs_msg + 6, 0, 3 );
S        memcpy( ssl->handshake->hs_msg + 9,
S                ssl->handshake->hs_msg + 1, 3 );
S    }
S    else
S    {
S        /* Make sure msg_type and length are consistent */
S        if( memcmp( ssl->handshake->hs_msg, ssl->in_msg, 4 ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "fragment header mismatch" ) );
S            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S        }
S    }
S
S    msg = ssl->handshake->hs_msg + 12;
S    bitmask = msg + msg_len;
S
S    /*
S     * Check and copy current fragment
S     */
S    frag_off = ( ssl->in_msg[6]  << 16 ) |
S               ( ssl->in_msg[7]  << 8  ) |
S                 ssl->in_msg[8];
S    frag_len = ( ssl->in_msg[9]  << 16 ) |
S               ( ssl->in_msg[10] << 8  ) |
S                 ssl->in_msg[11];
S
S    if( frag_off + frag_len > msg_len )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid fragment offset/len: %d + %d > %d",
S                          frag_off, frag_len, msg_len ) );
S        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S    }
S
S    if( frag_len + 12 > ssl->in_msglen )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid fragment length: %d + 12 > %d",
S                          frag_len, ssl->in_msglen ) );
S        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "adding fragment, offset = %d, length = %d",
S                        frag_off, frag_len ) );
S
S    memcpy( msg + frag_off, ssl->in_msg + 12, frag_len );
S    ssl_bitmask_set( bitmask, frag_off, frag_len );
S
S    /*
S     * Do we have the complete message by now?
S     * If yes, finalize it, else ask to read the next record.
S     */
S    if( ssl_bitmask_check( bitmask, msg_len ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message is not complete yet" ) );
S        return( MBEDTLS_ERR_SSL_WANT_READ );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake message completed" ) );
S
S    if( frag_len + 12 < ssl->in_msglen )
S    {
S        /*
S         * We'got more handshake messages in the same record.
S         * This case is not handled now because no know implementation does
S         * that and it's hard to test, so we prefer to fail cleanly for now.
S         */
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "last fragment not alone in its record" ) );
S        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
S    }
S
S    if( ssl->in_left > ssl->next_record_offset )
S    {
S        /*
S         * We've got more data in the buffer after the current record,
S         * that we don't want to overwrite. Move it before writing the
S         * reassembled message, and adjust in_left and next_record_offset.
S         */
S        unsigned char *cur_remain = ssl->in_hdr + ssl->next_record_offset;
S        unsigned char *new_remain = ssl->in_msg + ssl->in_hslen;
S        size_t remain_len = ssl->in_left - ssl->next_record_offset;
S
S        /* First compute and check new lengths */
S        ssl->next_record_offset = new_remain - ssl->in_hdr;
S        ssl->in_left = ssl->next_record_offset + remain_len;
S
S        if( ssl->in_left > MBEDTLS_SSL_BUFFER_LEN -
S                           (size_t)( ssl->in_hdr - ssl->in_buf ) )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "reassembled message too large for buffer" ) );
S            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
S        }
S
S        memmove( new_remain, cur_remain, remain_len );
S    }
S
S    memcpy( ssl->in_msg, ssl->handshake->hs_msg, ssl->in_hslen );
S
S    mbedtls_free( ssl->handshake->hs_msg );
S    ssl->handshake->hs_msg = NULL;
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "reassembled handshake message",
S                   ssl->in_msg, ssl->in_hslen );
S
S    return( 0 );
S}
S#endif /* MBEDTLS_SSL_PROTO_DTLS */
S
Sstatic int ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
S{
S    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
S                            ssl->in_msglen ) );
S        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S    }
S
S    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
S                    ( ssl->in_msg[1] << 16 ) |
S                    ( ssl->in_msg[2] << 8  ) |
S                      ssl->in_msg[3] );
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
S                        " %d, type = %d, hslen = %d",
S                        ssl->in_msglen, ssl->in_msg[0], ssl->in_hslen ) );
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        int ret;
S        unsigned int recv_msg_seq = ( ssl->in_msg[4] << 8 ) | ssl->in_msg[5];
S
S        /* ssl->handshake is NULL when receiving ClientHello for renego */
S        if( ssl->handshake != NULL &&
S            recv_msg_seq != ssl->handshake->in_msg_seq )
S        {
S            /* Retransmit only on last message from previous flight, to avoid
S             * too many retransmissions.
S             * Besides, No sane server ever retransmits HelloVerifyRequest */
S            if( recv_msg_seq == ssl->handshake->in_flight_start_seq - 1 &&
S                ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 2, ( "received message from last flight, "
S                                    "message_seq = %d, start_of_flight = %d",
S                                    recv_msg_seq,
S                                    ssl->handshake->in_flight_start_seq ) );
S
S                if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
S                {
S                    MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_resend", ret );
S                    return( ret );
S                }
S            }
S            else
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 2, ( "dropping out-of-sequence message: "
S                                    "message_seq = %d, expected = %d",
S                                    recv_msg_seq,
S                                    ssl->handshake->in_msg_seq ) );
S            }
S
S            return( MBEDTLS_ERR_SSL_WANT_READ );
S        }
S        /* Wait until message completion to increment in_msg_seq */
S
S        /* Reassemble if current message is fragmented or reassembly is
S         * already in progress */
S        if( ssl->in_msglen < ssl->in_hslen ||
S            memcmp( ssl->in_msg + 6, "\0\0\0",        3 ) != 0 ||
S            memcmp( ssl->in_msg + 9, ssl->in_msg + 1, 3 ) != 0 ||
S            ( ssl->handshake != NULL && ssl->handshake->hs_msg != NULL ) )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "found fragmented DTLS handshake message" ) );
S
S            if( ( ret = ssl_reassemble_dtls_handshake( ssl ) ) != 0 )
S            {
S                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_reassemble_dtls_handshake", ret );
S                return( ret );
S            }
S        }
S    }
S    else
S#endif /* MBEDTLS_SSL_PROTO_DTLS */
S    /* With TLS we don't handle fragmentation (for now) */
S    if( ssl->in_msglen < ssl->in_hslen )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
S        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
S    }
S
S    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
S        ssl->handshake != NULL )
S    {
S        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
S    }
S
S    /* Handshake message is complete, increment counter */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
S        ssl->handshake != NULL )
S    {
S        ssl->handshake->in_msg_seq++;
S    }
S#endif
S
S    return( 0 );
S}
S
S/*
S * DTLS anti-replay: RFC 6347 4.1.2.6
S *
S * in_window is a field of bits numbered from 0 (lsb) to 63 (msb).
S * Bit n is set iff record number in_window_top - n has been seen.
S *
S * Usually, in_window_top is the last record number seen and the lsb of
S * in_window is set. The only exception is the initial state (record number 0
S * not seen yet).
S */
S#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
Sstatic void ssl_dtls_replay_reset( mbedtls_ssl_context *ssl )
S{
S    ssl->in_window_top = 0;
S    ssl->in_window = 0;
S}
S
Sstatic inline uint64_t ssl_load_six_bytes( unsigned char *buf )
S{
S    return( ( (uint64_t) buf[0] << 40 ) |
S            ( (uint64_t) buf[1] << 32 ) |
S            ( (uint64_t) buf[2] << 24 ) |
S            ( (uint64_t) buf[3] << 16 ) |
S            ( (uint64_t) buf[4] <<  8 ) |
S            ( (uint64_t) buf[5]       ) );
S}
S
S/*
S * Return 0 if sequence number is acceptable, -1 otherwise
S */
Sint mbedtls_ssl_dtls_replay_check( mbedtls_ssl_context *ssl )
S{
S    uint64_t rec_seqnum = ssl_load_six_bytes( ssl->in_ctr + 2 );
S    uint64_t bit;
S
S    if( ssl->conf->anti_replay == MBEDTLS_SSL_ANTI_REPLAY_DISABLED )
S        return( 0 );
S
S    if( rec_seqnum > ssl->in_window_top )
S        return( 0 );
S
S    bit = ssl->in_window_top - rec_seqnum;
S
S    if( bit >= 64 )
S        return( -1 );
S
S    if( ( ssl->in_window & ( (uint64_t) 1 << bit ) ) != 0 )
S        return( -1 );
S
S    return( 0 );
S}
S
S/*
S * Update replay window on new validated record
S */
Svoid mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl )
S{
S    uint64_t rec_seqnum = ssl_load_six_bytes( ssl->in_ctr + 2 );
S
S    if( ssl->conf->anti_replay == MBEDTLS_SSL_ANTI_REPLAY_DISABLED )
S        return;
S
S    if( rec_seqnum > ssl->in_window_top )
S    {
S        /* Update window_top and the contents of the window */
S        uint64_t shift = rec_seqnum - ssl->in_window_top;
S
S        if( shift >= 64 )
S            ssl->in_window = 1;
S        else
S        {
S            ssl->in_window <<= shift;
S            ssl->in_window |= 1;
S        }
S
S        ssl->in_window_top = rec_seqnum;
S    }
S    else
S    {
S        /* Mark that number as seen in the current window */
S        uint64_t bit = ssl->in_window_top - rec_seqnum;
S
S        if( bit < 64 ) /* Always true, but be extra sure */
S            ssl->in_window |= (uint64_t) 1 << bit;
S    }
S}
S#endif /* MBEDTLS_SSL_DTLS_ANTI_REPLAY */
S
S#if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)
S/* Forward declaration */
Sstatic int ssl_session_reset_int( mbedtls_ssl_context *ssl, int partial );
S
S/*
S * Without any SSL context, check if a datagram looks like a ClientHello with
S * a valid cookie, and if it doesn't, generate a HelloVerifyRequest message.
S * Both input and output include full DTLS headers.
S *
S * - if cookie is valid, return 0
S * - if ClientHello looks superficially valid but cookie is not,
S *   fill obuf and set olen, then
S *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
S * - otherwise return a specific error code
S */
Sstatic int ssl_check_dtls_clihlo_cookie(
S                           mbedtls_ssl_cookie_write_t *f_cookie_write,
S                           mbedtls_ssl_cookie_check_t *f_cookie_check,
S                           void *p_cookie,
S                           const unsigned char *cli_id, size_t cli_id_len,
S                           const unsigned char *in, size_t in_len,
S                           unsigned char *obuf, size_t buf_len, size_t *olen )
S{
S    size_t sid_len, cookie_len;
S    unsigned char *p;
S
S    if( f_cookie_write == NULL || f_cookie_check == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    /*
S     * Structure of ClientHello with record and handshake headers,
S     * and expected values. We don't need to check a lot, more checks will be
S     * done when actually parsing the ClientHello - skipping those checks
S     * avoids code duplication and does not make cookie forging any easier.
S     *
S     *  0-0  ContentType type;                  copied, must be handshake
S     *  1-2  ProtocolVersion version;           copied
S     *  3-4  uint16 epoch;                      copied, must be 0
S     *  5-10 uint48 sequence_number;            copied
S     * 11-12 uint16 length;                     (ignored)
S     *
S     * 13-13 HandshakeType msg_type;            (ignored)
S     * 14-16 uint24 length;                     (ignored)
S     * 17-18 uint16 message_seq;                copied
S     * 19-21 uint24 fragment_offset;            copied, must be 0
S     * 22-24 uint24 fragment_length;            (ignored)
S     *
S     * 25-26 ProtocolVersion client_version;    (ignored)
S     * 27-58 Random random;                     (ignored)
S     * 59-xx SessionID session_id;              1 byte len + sid_len content
S     * 60+   opaque cookie<0..2^8-1>;           1 byte len + content
S     *       ...
S     *
S     * Minimum length is 61 bytes.
S     */
S    if( in_len < 61 ||
S        in[0] != MBEDTLS_SSL_MSG_HANDSHAKE ||
S        in[3] != 0 || in[4] != 0 ||
S        in[19] != 0 || in[20] != 0 || in[21] != 0 )
S    {
S        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
S    }
S
S    sid_len = in[59];
S    if( sid_len > in_len - 61 )
S        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
S
S    cookie_len = in[60 + sid_len];
S    if( cookie_len > in_len - 60 )
S        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
S
S    if( f_cookie_check( p_cookie, in + sid_len + 61, cookie_len,
S                        cli_id, cli_id_len ) == 0 )
S    {
S        /* Valid cookie */
S        return( 0 );
S    }
S
S    /*
S     * If we get here, we've got an invalid cookie, let's prepare HVR.
S     *
S     *  0-0  ContentType type;                  copied
S     *  1-2  ProtocolVersion version;           copied
S     *  3-4  uint16 epoch;                      copied
S     *  5-10 uint48 sequence_number;            copied
S     * 11-12 uint16 length;                     olen - 13
S     *
S     * 13-13 HandshakeType msg_type;            hello_verify_request
S     * 14-16 uint24 length;                     olen - 25
S     * 17-18 uint16 message_seq;                copied
S     * 19-21 uint24 fragment_offset;            copied
S     * 22-24 uint24 fragment_length;            olen - 25
S     *
S     * 25-26 ProtocolVersion server_version;    0xfe 0xff
S     * 27-27 opaque cookie<0..2^8-1>;           cookie_len = olen - 27, cookie
S     *
S     * Minimum length is 28.
S     */
S    if( buf_len < 28 )
S        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
S
S    /* Copy most fields and adapt others */
S    memcpy( obuf, in, 25 );
S    obuf[13] = MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST;
S    obuf[25] = 0xfe;
S    obuf[26] = 0xff;
S
S    /* Generate and write actual cookie */
S    p = obuf + 28;
S    if( f_cookie_write( p_cookie,
S                        &p, obuf + buf_len, cli_id, cli_id_len ) != 0 )
S    {
S        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    *olen = p - obuf;
S
S    /* Go back and fill length fields */
S    obuf[27] = (unsigned char)( *olen - 28 );
S
S    obuf[14] = obuf[22] = (unsigned char)( ( *olen - 25 ) >> 16 );
S    obuf[15] = obuf[23] = (unsigned char)( ( *olen - 25 ) >>  8 );
S    obuf[16] = obuf[24] = (unsigned char)( ( *olen - 25 )       );
S
S    obuf[11] = (unsigned char)( ( *olen - 13 ) >>  8 );
S    obuf[12] = (unsigned char)( ( *olen - 13 )       );
S
S    return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );
S}
S
S/*
S * Handle possible client reconnect with the same UDP quadruplet
S * (RFC 6347 Section 4.2.8).
S *
S * Called by ssl_parse_record_header() in case we receive an epoch 0 record
S * that looks like a ClientHello.
S *
S * - if the input looks like a ClientHello without cookies,
S *   send back HelloVerifyRequest, then
S *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
S * - if the input looks like a ClientHello with a valid cookie,
S *   reset the session of the current context, and
S *   return MBEDTLS_ERR_SSL_CLIENT_RECONNECT
S * - if anything goes wrong, return a specific error code
S *
S * mbedtls_ssl_read_record() will ignore the record if anything else than
S * MBEDTLS_ERR_SSL_CLIENT_RECONNECT or 0 is returned, although this function
S * cannot not return 0.
S */
Sstatic int ssl_handle_possible_reconnect( mbedtls_ssl_context *ssl )
S{
S    int ret;
S    size_t len;
S
S    ret = ssl_check_dtls_clihlo_cookie(
S            ssl->conf->f_cookie_write,
S            ssl->conf->f_cookie_check,
S            ssl->conf->p_cookie,
S            ssl->cli_id, ssl->cli_id_len,
S            ssl->in_buf, ssl->in_left,
S            ssl->out_buf, MBEDTLS_SSL_MAX_CONTENT_LEN, &len );
S
S    MBEDTLS_SSL_DEBUG_RET( 2, "ssl_check_dtls_clihlo_cookie", ret );
S
S    if( ret == MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED )
S    {
S        /* Dont check write errors as we can't do anything here.
S         * If the error is permanent we'll catch it later,
S         * if it's not, then hopefully it'll work next time. */
S        (void) ssl->f_send( ssl->p_bio, ssl->out_buf, len );
S
S        return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );
S    }
S
S    if( ret == 0 )
S    {
S        /* Got a valid cookie, partially reset context */
S        if( ( ret = ssl_session_reset_int( ssl, 1 ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "reset", ret );
S            return( ret );
S        }
S
S        return( MBEDTLS_ERR_SSL_CLIENT_RECONNECT );
S    }
S
S    return( ret );
S}
S#endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */
S
S/*
S * ContentType type;
S * ProtocolVersion version;
S * uint16 epoch;            // DTLS only
S * uint48 sequence_number;  // DTLS only
S * uint16 length;
S *
S * Return 0 if header looks sane (and, for DTLS, the record is expected)
S * MBEDTLS_ERR_SSL_INVALID_RECORD if the header looks bad,
S * MBEDTLS_ERR_SSL_UNEXPECTED_RECORD (DTLS only) if sane but unexpected.
S *
S * With DTLS, mbedtls_ssl_read_record() will:
S * 1. proceed with the record if this function returns 0
S * 2. drop only the current record if this function returns UNEXPECTED_RECORD
S * 3. return CLIENT_RECONNECT if this function return that value
S * 4. drop the whole datagram if this function returns anything else.
S * Point 2 is needed when the peer is resending, and we have already received
S * the first record from a datagram but are still waiting for the others.
S */
Sstatic int ssl_parse_record_header( mbedtls_ssl_context *ssl )
S{
S    int ret;
S    int major_ver, minor_ver;
S
S    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
S
S    ssl->in_msgtype =  ssl->in_hdr[0];
S    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
S    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
S                        "version = [%d:%d], msglen = %d",
S                        ssl->in_msgtype,
S                        major_ver, minor_ver, ssl->in_msglen ) );
S
S    /* Check record type */
S    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
S        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
S        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
S        ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
S
S        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
S                        MBEDTLS_SSL_ALERT_LEVEL_FATAL,
S                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE ) ) != 0 )
S        {
S            return( ret );
S        }
S
S        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S    }
S
S    /* Check version */
S    if( major_ver != ssl->major_ver )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
S        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S    }
S
S    if( minor_ver > ssl->conf->max_minor_ver )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
S        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S    }
S
S    /* Check length against the size of our buffer */
S    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
S                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
S        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S    }
S
S    /* Check length against bounds of the current transform and version */
S    if( ssl->transform_in == NULL )
S    {
S        if( ssl->in_msglen < 1 ||
S            ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
S            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S        }
S    }
S    else
S    {
S        if( ssl->in_msglen < ssl->transform_in->minlen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
S            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S        }
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 &&
S            ssl->in_msglen > ssl->transform_in->minlen + MBEDTLS_SSL_MAX_CONTENT_LEN )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
S            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S        }
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_2)
S        /*
S         * TLS encrypted messages can have up to 256 bytes of padding
S         */
S        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
S            ssl->in_msglen > ssl->transform_in->minlen +
S                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
S            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S        }
S#endif
S    }
S
S    /*
S     * DTLS-related tests done last, because most of them may result in
S     * silently dropping the record (but not the whole datagram), and we only
S     * want to consider that after ensuring that the "basic" fields (type,
S     * version, length) are sane.
S     */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        unsigned int rec_epoch = ( ssl->in_ctr[0] << 8 ) | ssl->in_ctr[1];
S
S        /* Drop unexpected ChangeCipherSpec messages */
S        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
S            ssl->state != MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC &&
S            ssl->state != MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "dropping unexpected ChangeCipherSpec" ) );
S            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
S        }
S
S        /* Drop unexpected ApplicationData records,
S         * except at the beginning of renegotiations */
S        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA &&
S            ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S            && ! ( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
S                   ssl->state == MBEDTLS_SSL_SERVER_HELLO )
S#endif
S            )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "dropping unexpected ApplicationData" ) );
S            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
S        }
S
S        /* Check epoch (and sequence number) with DTLS */
S        if( rec_epoch != ssl->in_epoch )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "record from another epoch: "
S                                        "expected %d, received %d",
S                                        ssl->in_epoch, rec_epoch ) );
S
S#if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)
S            /*
S             * Check for an epoch 0 ClientHello. We can't use in_msg here to
S             * access the first byte of record content (handshake type), as we
S             * have an active transform (possibly iv_len != 0), so use the
S             * fact that the record header len is 13 instead.
S             */
S            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
S                ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER &&
S                rec_epoch == 0 &&
S                ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
S                ssl->in_left > 13 &&
S                ssl->in_buf[13] == MBEDTLS_SSL_HS_CLIENT_HELLO )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "possible client reconnect "
S                                            "from the same port" ) );
S                return( ssl_handle_possible_reconnect( ssl ) );
S            }
S            else
S#endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */
S                return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
S        }
S
S#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
S        /* Replay detection only works for the current epoch */
S        if( rec_epoch == ssl->in_epoch &&
S            mbedtls_ssl_dtls_replay_check( ssl ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "replayed record" ) );
S            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
S        }
S#endif
S    }
S#endif /* MBEDTLS_SSL_PROTO_DTLS */
S
S    return( 0 );
S}
S
S/*
S * If applicable, decrypt (and decompress) record content
S */
Sstatic int ssl_prepare_record_content( mbedtls_ssl_context *ssl )
S{
S    int ret, done = 0;
S
S    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
S                   ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen );
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
S    if( mbedtls_ssl_hw_record_read != NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_read()" ) );
S
S        ret = mbedtls_ssl_hw_record_read( ssl );
S        if( ret != 0 && ret != MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_read", ret );
S            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
S        }
S
S        if( ret == 0 )
S            done = 1;
S    }
S#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
S    if( !done && ssl->transform_in != NULL )
S    {
S        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
S            return( ret );
S        }
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
S                       ssl->in_msg, ssl->in_msglen );
S
S        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
S            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
S        }
S    }
S
S#if defined(MBEDTLS_ZLIB_SUPPORT)
S    if( ssl->transform_in != NULL &&
S        ssl->session_in->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
S    {
S        if( ( ret = ssl_decompress_buf( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decompress_buf", ret );
S            return( ret );
S        }
S
S        // TODO: what's the purpose of these lines? is in_len used?
S        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
S        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
S    }
S#endif /* MBEDTLS_ZLIB_SUPPORT */
S
S#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        mbedtls_ssl_dtls_replay_update( ssl );
S    }
S#endif
S
S    return( 0 );
S}
S
Sstatic void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl );
S
S/*
S * Read a record.
S *
S * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
S * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
S *
S */
Sint mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
S{
S    int ret;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
S
S    if( ssl->in_hslen != 0 && ssl->in_hslen < ssl->in_msglen )
S    {
S        /*
S         * Get next Handshake message in the current record
S         */
S        ssl->in_msglen -= ssl->in_hslen;
S
S        memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
S                 ssl->in_msglen );
S
S        MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
S                           ssl->in_msg, ssl->in_msglen );
S
S        if( ( ret = ssl_prepare_handshake_record( ssl ) ) != 0 )
S            return( ret );
S
S        return( 0 );
S    }
S
S    ssl->in_hslen = 0;
S
S    /*
S     * Read the record header and parse it
S     */
Sread_record_header:
S    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
S        return( ret );
S    }
S
S    if( ( ret = ssl_parse_record_header( ssl ) ) != 0 )
S    {
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
S            ret != MBEDTLS_ERR_SSL_CLIENT_RECONNECT )
S        {
S            if( ret == MBEDTLS_ERR_SSL_UNEXPECTED_RECORD )
S            {
S                /* Skip unexpected record (but not whole datagram) */
S                ssl->next_record_offset = ssl->in_msglen
S                                        + mbedtls_ssl_hdr_len( ssl );
S
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding unexpected record "
S                                            "(header)" ) );
S            }
S            else
S            {
S                /* Skip invalid record and the rest of the datagram */
S                ssl->next_record_offset = 0;
S                ssl->in_left = 0;
S
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding invalid record "
S                                            "(header)" ) );
S            }
S
S            /* Get next record */
S            goto read_record_header;
S        }
S#endif
S        return( ret );
S    }
S
S    /*
S     * Read and optionally decrypt the message contents
S     */
S    if( ( ret = mbedtls_ssl_fetch_input( ssl,
S                                 mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
S        return( ret );
S    }
S
S    /* Done reading this record, get ready for the next one */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
S    else
S#endif
S        ssl->in_left = 0;
S
S    if( ( ret = ssl_prepare_record_content( ssl ) ) != 0 )
S    {
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S        {
S            /* Silently discard invalid records */
S            if( ret == MBEDTLS_ERR_SSL_INVALID_RECORD ||
S                ret == MBEDTLS_ERR_SSL_INVALID_MAC )
S            {
S                /* Except when waiting for Finished as a bad mac here
S                 * probably means something went wrong in the handshake
S                 * (eg wrong psk used, mitm downgrade attempt, etc.) */
S                if( ssl->state == MBEDTLS_SSL_CLIENT_FINISHED ||
S                    ssl->state == MBEDTLS_SSL_SERVER_FINISHED )
S                {
S#if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)
S                    if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
S                    {
S                        mbedtls_ssl_send_alert_message( ssl,
S                                MBEDTLS_SSL_ALERT_LEVEL_FATAL,
S                                MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
S                    }
S#endif
S                    return( ret );
S                }
S
S#if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)
S                if( ssl->conf->badmac_limit != 0 &&
S                    ++ssl->badmac_seen >= ssl->conf->badmac_limit )
S                {
S                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "too many records with bad MAC" ) );
S                    return( MBEDTLS_ERR_SSL_INVALID_MAC );
S                }
S#endif
S
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding invalid record (mac)" ) );
S                goto read_record_header;
S            }
S
S            return( ret );
S        }
S        else
S#endif
S        {
S            /* Error out (and send alert) on invalid records */
S#if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)
S            if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
S            {
S                mbedtls_ssl_send_alert_message( ssl,
S                        MBEDTLS_SSL_ALERT_LEVEL_FATAL,
S                        MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
S            }
S#endif
S            return( ret );
S        }
S    }
S
S    /*
S     * When we sent the last flight of the handshake, we MUST respond to a
S     * retransmit of the peer's previous flight with a retransmit. (In
S     * practice, only the Finished message will make it, other messages
S     * including CCS use the old transform so they're dropped as invalid.)
S     *
S     * If the record we received is not a handshake message, however, it
S     * means the peer received our last flight so we can clean up
S     * handshake info.
S     *
S     * This check needs to be done before prepare_handshake() due to an edge
S     * case: if the client immediately requests renegotiation, this
S     * finishes the current handshake first, avoiding the new ClientHello
S     * being mistaken for an ancient message in the current handshake.
S     */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
S        ssl->handshake != NULL &&
S        ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
S    {
S        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
S                ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "received retransmit of last flight" ) );
S
S            if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
S            {
S                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_resend", ret );
S                return( ret );
S            }
S
S            return( MBEDTLS_ERR_SSL_WANT_READ );
S        }
S        else
S        {
S            ssl_handshake_wrapup_free_hs_transform( ssl );
S        }
S    }
S#endif
S
S    /*
S     * Handle particular types of records
S     */
S    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
S    {
S        if( ( ret = ssl_prepare_handshake_record( ssl ) ) != 0 )
S            return( ret );
S    }
S
S    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
S                       ssl->in_msg[0], ssl->in_msg[1] ) );
S
S        /*
S         * Ignore non-fatal alerts, except close_notify and no_renegotiation
S         */
S        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
S                           ssl->in_msg[1] ) );
S            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
S        }
S
S        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
S            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
S            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
S        }
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION_ENABLED)
S        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
S            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
S            /* Will be handled when trying to parse ServerHello */
S            return( 0 );
S        }
S#endif
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_SRV_C)
S        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 &&
S            ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
S            ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
S            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_CERT )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
S            /* Will be handled in mbedtls_ssl_parse_certificate() */
S            return( 0 );
S        }
S#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */
S
S        /* Silently ignore: fetch new message */
S        goto read_record_header;
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
S
S    return( 0 );
S}
S
Sint mbedtls_ssl_send_fatal_handshake_failure( mbedtls_ssl_context *ssl )
S{
S    int ret;
S
S    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
S                    MBEDTLS_SSL_ALERT_LEVEL_FATAL,
S                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE ) ) != 0 )
S    {
S        return( ret );
S    }
S
S    return( 0 );
S}
S
Sint mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
S                            unsigned char level,
S                            unsigned char message )
S{
S    int ret;
S
S    if( ssl == NULL || ssl->conf == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
S
S    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
S    ssl->out_msglen = 2;
S    ssl->out_msg[0] = level;
S    ssl->out_msg[1] = message;
S
S    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
S        return( ret );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
S
S    return( 0 );
S}
S
S/*
S * Handshake functions
S */
S#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)         && \
S    !defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)     && \
S    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)     && \
S    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)   && \
S    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) && \
S    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)    && \
S    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
X#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)         &&     !defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)     &&     !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)     &&     !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)   &&     !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) &&     !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)    &&     !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
Sint mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
S{
S    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
S
S    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
S        ssl->state++;
S        return( 0 );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S}
S
Sint mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
S{
S    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
S
S    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
S        ssl->state++;
S        return( 0 );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S}
S#else
Sint mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
S{
S    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
S    size_t i, n;
S    const mbedtls_x509_crt *crt;
S    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
S
S    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
S        ssl->state++;
S        return( 0 );
S    }
S
S#if defined(MBEDTLS_SSL_CLI_C)
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
S    {
S        if( ssl->client_auth == 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
S            ssl->state++;
S            return( 0 );
S        }
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S        /*
S         * If using SSLv3 and got no cert, send an Alert message
S         * (otherwise an empty Certificate message will be sent).
S         */
S        if( mbedtls_ssl_own_cert( ssl )  == NULL &&
S            ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S        {
S            ssl->out_msglen  = 2;
S            ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
S            ssl->out_msg[0]  = MBEDTLS_SSL_ALERT_LEVEL_WARNING;
S            ssl->out_msg[1]  = MBEDTLS_SSL_ALERT_MSG_NO_CERT;
S
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "got no certificate to send" ) );
S            goto write_msg;
S        }
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S    }
S#endif /* MBEDTLS_SSL_CLI_C */
S#if defined(MBEDTLS_SSL_SRV_C)
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
S    {
S        if( mbedtls_ssl_own_cert( ssl ) == NULL )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no certificate to send" ) );
S            return( MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED );
S        }
S    }
S#endif
S
S    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
S
S    /*
S     *     0  .  0    handshake type
S     *     1  .  3    handshake length
S     *     4  .  6    length of all certs
S     *     7  .  9    length of cert. 1
S     *    10  . n-1   peer certificate
S     *     n  . n+2   length of cert. 2
S     *    n+3 . ...   upper level cert, etc.
S     */
S    i = 7;
S    crt = mbedtls_ssl_own_cert( ssl );
S
S    while( crt != NULL )
S    {
S        n = crt->raw.len;
S        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
S                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
S            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
S        }
S
S        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
S        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
S        ssl->out_msg[i + 2] = (unsigned char)( n       );
S
S        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
S        i += n; crt = crt->next;
S    }
S
S    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
S    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
S    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
S
S    ssl->out_msglen  = i;
S    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
S    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
Swrite_msg:
S#endif
S
S    ssl->state++;
S
S    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
S        return( ret );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
S
S    return( ret );
S}
S
Sint mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
S{
S    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
S    size_t i, n;
S    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
S    int authmode = ssl->conf->authmode;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
S
S    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
S        ssl->state++;
S        return( 0 );
S    }
S
S#if defined(MBEDTLS_SSL_SRV_C)
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
S        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
S        ssl->state++;
S        return( 0 );
S    }
S
S#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
S    if( ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET )
S        authmode = ssl->handshake->sni_authmode;
S#endif
S
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
S        authmode == MBEDTLS_SSL_VERIFY_NONE )
S    {
S        ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_SKIP_VERIFY;
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
S        ssl->state++;
S        return( 0 );
S    }
S#endif
S
S    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
S        return( ret );
S    }
S
S    ssl->state++;
S
S#if defined(MBEDTLS_SSL_SRV_C)
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S    /*
S     * Check if the client sent an empty certificate
S     */
S    if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&
S        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S    {
S        if( ssl->in_msglen  == 2                        &&
S            ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT            &&
S            ssl->in_msg[0]  == MBEDTLS_SSL_ALERT_LEVEL_WARNING  &&
S            ssl->in_msg[1]  == MBEDTLS_SSL_ALERT_MSG_NO_CERT )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "SSLv3 client has no certificate" ) );
S
S            ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;
S            if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )
S                return( 0 );
S            else
S                return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );
S        }
S    }
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_2)
S    if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&
S        ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )
S    {
S        if( ssl->in_hslen   == 3 + mbedtls_ssl_hs_hdr_len( ssl ) &&
S            ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE    &&
S            ssl->in_msg[0]  == MBEDTLS_SSL_HS_CERTIFICATE   &&
S            memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ), "\0\0\0", 3 ) == 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLSv1 client has no certificate" ) );
S
S            ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;
S            if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )
S                return( 0 );
S            else
S                return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );
S        }
S    }
S#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
S          MBEDTLS_SSL_PROTO_TLS1_2 */
X#endif  
S#endif /* MBEDTLS_SSL_SRV_C */
S
S    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
S        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
S    }
S
S    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
S        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
S        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
S    }
S
S    i = mbedtls_ssl_hs_hdr_len( ssl );
S
S    /*
S     * Same message structure as in mbedtls_ssl_write_certificate()
S     */
S    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
S
S    if( ssl->in_msg[i] != 0 ||
S        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
S        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
S    }
S
S    /* In case we tried to reuse a session but it failed */
S    if( ssl->session_negotiate->peer_cert != NULL )
S    {
S        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
S        mbedtls_free( ssl->session_negotiate->peer_cert );
S    }
S
S    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
S                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
S                       sizeof( mbedtls_x509_crt ) ) );
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S    }
S
S    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
S
S    i += 3;
S
S    while( i < ssl->in_hslen )
S    {
S        if( ssl->in_msg[i] != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
S            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
S        }
S
S        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
S            | (unsigned int) ssl->in_msg[i + 2];
S        i += 3;
S
S        if( n < 128 || i + n > ssl->in_hslen )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
S            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
S        }
S
S        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
S                                  ssl->in_msg + i, n );
S        if( ret != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
S            return( ret );
S        }
S
S        i += n;
S    }
S
S    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
S
S    /*
S     * On client, make sure the server cert doesn't change during renego to
S     * avoid "triple handshake" attack: https://secure-resumption.com/
S     */
S#if defined(MBEDTLS_SSL_RENEGOTIATION) && defined(MBEDTLS_SSL_CLI_C)
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
S        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
S    {
S        if( ssl->session->peer_cert == NULL )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "new server cert during renegotiation" ) );
S            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
S        }
S
S        if( ssl->session->peer_cert->raw.len !=
S            ssl->session_negotiate->peer_cert->raw.len ||
S            memcmp( ssl->session->peer_cert->raw.p,
S                    ssl->session_negotiate->peer_cert->raw.p,
S                    ssl->session->peer_cert->raw.len ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
S            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
S        }
S    }
S#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */
S
S    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
S    {
S        mbedtls_x509_crt *ca_chain;
S        mbedtls_x509_crl *ca_crl;
S
S#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
S        if( ssl->handshake->sni_ca_chain != NULL )
S        {
S            ca_chain = ssl->handshake->sni_ca_chain;
S            ca_crl   = ssl->handshake->sni_ca_crl;
S        }
S        else
S#endif
S        {
S            ca_chain = ssl->conf->ca_chain;
S            ca_crl   = ssl->conf->ca_crl;
S        }
S
S        if( ca_chain == NULL )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
S            return( MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED );
S        }
S
S        /*
S         * Main check: verify certificate
S         */
S        ret = mbedtls_x509_crt_verify_with_profile(
S                                ssl->session_negotiate->peer_cert,
S                                ca_chain, ca_crl,
S                                ssl->conf->cert_profile,
S                                ssl->hostname,
S                               &ssl->session_negotiate->verify_result,
S                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
S
S        if( ret != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
S        }
S
S        /*
S         * Secondary checks: always done, but change 'ret' only if it was 0
S         */
S
S#if defined(MBEDTLS_ECP_C)
S        {
S            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
S
S            /* If certificate uses an EC key, make sure the curve is OK */
S            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
S                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
S                if( ret == 0 )
S                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
S            }
S        }
S#endif /* MBEDTLS_ECP_C */
S
S        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
S                                  ciphersuite_info,
S                                  ! ssl->conf->endpoint,
S                                 &ssl->session_negotiate->verify_result ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
S            if( ret == 0 )
S                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
S        }
S
S        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )
S            ret = 0;
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
S
S    return( ret );
S}
S#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
S          !MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
S          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
S          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
S          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
S          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
S          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
S
Sint mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl )
S{
S    int ret;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
S
S    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
S    ssl->out_msglen  = 1;
S    ssl->out_msg[0]  = 1;
S
S    ssl->state++;
S
S    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
S        return( ret );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
S
S    return( 0 );
S}
S
Sint mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
S{
S    int ret;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
S
S    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
S        return( ret );
S    }
S
S    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
S        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
S    }
S
S    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
S        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
S    }
S
S    /*
S     * Switch to our negotiated transform and session parameters for inbound
S     * data.
S     */
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
S    ssl->transform_in = ssl->transform_negotiate;
S    ssl->session_in = ssl->session_negotiate;
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
S        ssl_dtls_replay_reset( ssl );
S#endif
S
S        /* Increment epoch */
S        if( ++ssl->in_epoch == 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "DTLS epoch would wrap" ) );
S            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
S        }
S    }
S    else
S#endif /* MBEDTLS_SSL_PROTO_DTLS */
S    memset( ssl->in_ctr, 0, 8 );
S
S    /*
S     * Set the in_msg pointer to the correct location based on IV length
S     */
S    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
S    {
S        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
S                      ssl->transform_negotiate->fixed_ivlen;
S    }
S    else
S        ssl->in_msg = ssl->in_iv;
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
S    if( mbedtls_ssl_hw_record_activate != NULL )
S    {
S        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_INBOUND ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
S            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
S        }
S    }
S#endif
S
S    ssl->state++;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
S
S    return( 0 );
S}
S
Svoid mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,
S                            const mbedtls_ssl_ciphersuite_t *ciphersuite_info )
S{
S    ((void) ciphersuite_info);
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_1)
X#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_1)
S    if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )
S        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
S    else
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA512_C)
S    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
S        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
S    else
S#endif
S#if defined(MBEDTLS_SHA256_C)
S    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
S        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
S    else
S#endif
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S        return;
S    }
S}
S
Svoid mbedtls_ssl_reset_checksum( mbedtls_ssl_context *ssl )
S{
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_1)
X#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_1)
S     mbedtls_md5_starts( &ssl->handshake->fin_md5  );
S    mbedtls_sha1_starts( &ssl->handshake->fin_sha1 );
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA256_C)
S    mbedtls_sha256_starts( &ssl->handshake->fin_sha256, 0 );
S#endif
S#if defined(MBEDTLS_SHA512_C)
S    mbedtls_sha512_starts( &ssl->handshake->fin_sha512, 1 );
S#endif
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S}
S
Sstatic void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
S                                       const unsigned char *buf, size_t len )
S{
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_1)
X#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_1)
S     mbedtls_md5_update( &ssl->handshake->fin_md5 , buf, len );
S    mbedtls_sha1_update( &ssl->handshake->fin_sha1, buf, len );
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA256_C)
S    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
S#endif
S#if defined(MBEDTLS_SHA512_C)
S    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
S#endif
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S}
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_1)
X#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_1)
Sstatic void ssl_update_checksum_md5sha1( mbedtls_ssl_context *ssl,
S                                         const unsigned char *buf, size_t len )
S{
S     mbedtls_md5_update( &ssl->handshake->fin_md5 , buf, len );
S    mbedtls_sha1_update( &ssl->handshake->fin_sha1, buf, len );
S}
S#endif
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA256_C)
Sstatic void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
S                                        const unsigned char *buf, size_t len )
S{
S    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
S}
S#endif
S
S#if defined(MBEDTLS_SHA512_C)
Sstatic void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
S                                        const unsigned char *buf, size_t len )
S{
S    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
S}
S#endif
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
Sstatic void ssl_calc_finished_ssl(
S                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
S{
S    const char *sender;
S    mbedtls_md5_context  md5;
S    mbedtls_sha1_context sha1;
S
S    unsigned char padbuf[48];
S    unsigned char md5sum[16];
S    unsigned char sha1sum[20];
S
S    mbedtls_ssl_session *session = ssl->session_negotiate;
S    if( !session )
S        session = ssl->session;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished ssl" ) );
S
S    mbedtls_md5_init( &md5 );
S    mbedtls_sha1_init( &sha1 );
S
S    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
S    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
S
S    /*
S     * SSLv3:
S     *   hash =
S     *      MD5( master + pad2 +
S     *          MD5( handshake + sender + master + pad1 ) )
S     *   + SHA1( master + pad2 +
S     *         SHA1( handshake + sender + master + pad1 ) )
S     */
S
S#if !defined(MBEDTLS_MD5_ALT)
S    MBEDTLS_SSL_DEBUG_BUF( 4, "finished  md5 state", (unsigned char *)
S                    md5.state, sizeof(  md5.state ) );
S#endif
S
S#if !defined(MBEDTLS_SHA1_ALT)
S    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha1 state", (unsigned char *)
S                   sha1.state, sizeof( sha1.state ) );
S#endif
S
S    sender = ( from == MBEDTLS_SSL_IS_CLIENT ) ? "CLNT"
S                                       : "SRVR";
S
S    memset( padbuf, 0x36, 48 );
S
S    mbedtls_md5_update( &md5, (const unsigned char *) sender, 4 );
S    mbedtls_md5_update( &md5, session->master, 48 );
S    mbedtls_md5_update( &md5, padbuf, 48 );
S    mbedtls_md5_finish( &md5, md5sum );
S
S    mbedtls_sha1_update( &sha1, (const unsigned char *) sender, 4 );
S    mbedtls_sha1_update( &sha1, session->master, 48 );
S    mbedtls_sha1_update( &sha1, padbuf, 40 );
S    mbedtls_sha1_finish( &sha1, sha1sum );
S
S    memset( padbuf, 0x5C, 48 );
S
S    mbedtls_md5_starts( &md5 );
S    mbedtls_md5_update( &md5, session->master, 48 );
S    mbedtls_md5_update( &md5, padbuf, 48 );
S    mbedtls_md5_update( &md5, md5sum, 16 );
S    mbedtls_md5_finish( &md5, buf );
S
S    mbedtls_sha1_starts( &sha1 );
S    mbedtls_sha1_update( &sha1, session->master, 48 );
S    mbedtls_sha1_update( &sha1, padbuf , 40 );
S    mbedtls_sha1_update( &sha1, sha1sum, 20 );
S    mbedtls_sha1_finish( &sha1, buf + 16 );
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, 36 );
S
S    mbedtls_md5_free(  &md5  );
S    mbedtls_sha1_free( &sha1 );
S
S    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
S    mbedtls_zeroize(  md5sum, sizeof(  md5sum ) );
S    mbedtls_zeroize( sha1sum, sizeof( sha1sum ) );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
S}
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
Sstatic void ssl_calc_finished_tls(
S                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
S{
S    int len = 12;
S    const char *sender;
S    mbedtls_md5_context  md5;
S    mbedtls_sha1_context sha1;
S    unsigned char padbuf[36];
S
S    mbedtls_ssl_session *session = ssl->session_negotiate;
S    if( !session )
S        session = ssl->session;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls" ) );
S
S    mbedtls_md5_init( &md5 );
S    mbedtls_sha1_init( &sha1 );
S
S    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
S    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
S
S    /*
S     * TLSv1:
S     *   hash = PRF( master, finished_label,
S     *               MD5( handshake ) + SHA1( handshake ) )[0..11]
S     */
S
S#if !defined(MBEDTLS_MD5_ALT)
S    MBEDTLS_SSL_DEBUG_BUF( 4, "finished  md5 state", (unsigned char *)
S                    md5.state, sizeof(  md5.state ) );
S#endif
S
S#if !defined(MBEDTLS_SHA1_ALT)
S    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha1 state", (unsigned char *)
S                   sha1.state, sizeof( sha1.state ) );
S#endif
S
S    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
S             ? "client finished"
S             : "server finished";
S
S    mbedtls_md5_finish(  &md5, padbuf );
S    mbedtls_sha1_finish( &sha1, padbuf + 16 );
S
S    ssl->handshake->tls_prf( session->master, 48, sender,
S                             padbuf, 36, buf, len );
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
S
S    mbedtls_md5_free(  &md5  );
S    mbedtls_sha1_free( &sha1 );
S
S    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
S}
S#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
S
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA256_C)
Sstatic void ssl_calc_finished_tls_sha256(
S                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
S{
S    int len = 12;
S    const char *sender;
S    mbedtls_sha256_context sha256;
S    unsigned char padbuf[32];
S
S    mbedtls_ssl_session *session = ssl->session_negotiate;
S    if( !session )
S        session = ssl->session;
S
S    mbedtls_sha256_init( &sha256 );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
S
S    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
S
S    /*
S     * TLSv1.2:
S     *   hash = PRF( master, finished_label,
S     *               Hash( handshake ) )[0.11]
S     */
S
S#if !defined(MBEDTLS_SHA256_ALT)
S    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
S                   sha256.state, sizeof( sha256.state ) );
S#endif
S
S    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
S             ? "client finished"
S             : "server finished";
S
S    mbedtls_sha256_finish( &sha256, padbuf );
S
S    ssl->handshake->tls_prf( session->master, 48, sender,
S                             padbuf, 32, buf, len );
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
S
S    mbedtls_sha256_free( &sha256 );
S
S    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
S}
S#endif /* MBEDTLS_SHA256_C */
S
S#if defined(MBEDTLS_SHA512_C)
Sstatic void ssl_calc_finished_tls_sha384(
S                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
S{
S    int len = 12;
S    const char *sender;
S    mbedtls_sha512_context sha512;
S    unsigned char padbuf[48];
S
S    mbedtls_ssl_session *session = ssl->session_negotiate;
S    if( !session )
S        session = ssl->session;
S
S    mbedtls_sha512_init( &sha512 );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
S
S    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
S
S    /*
S     * TLSv1.2:
S     *   hash = PRF( master, finished_label,
S     *               Hash( handshake ) )[0.11]
S     */
S
S#if !defined(MBEDTLS_SHA512_ALT)
S    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
S                   sha512.state, sizeof( sha512.state ) );
S#endif
S
S    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
S             ? "client finished"
S             : "server finished";
S
S    mbedtls_sha512_finish( &sha512, padbuf );
S
S    ssl->handshake->tls_prf( session->master, 48, sender,
S                             padbuf, 48, buf, len );
S
S    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
S
S    mbedtls_sha512_free( &sha512 );
S
S    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
S}
S#endif /* MBEDTLS_SHA512_C */
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S
Sstatic void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl )
S{
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
S
S    /*
S     * Free our handshake params
S     */
S    mbedtls_ssl_handshake_free( ssl->handshake );
S    mbedtls_free( ssl->handshake );
S    ssl->handshake = NULL;
S
S    /*
S     * Free the previous transform and swith in the current one
S     */
S    if( ssl->transform )
S    {
S        mbedtls_ssl_transform_free( ssl->transform );
S        mbedtls_free( ssl->transform );
S    }
S    ssl->transform = ssl->transform_negotiate;
S    ssl->transform_negotiate = NULL;
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
S}
S
Svoid mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
S{
S    int resume = ssl->handshake->resume;
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
S    {
S        ssl->renego_status =  MBEDTLS_SSL_RENEGOTIATION_DONE;
S        ssl->renego_records_seen = 0;
S    }
S#endif
S
S    /*
S     * Free the previous session and switch in the current one
S     */
S    if( ssl->session )
S    {
S#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
S        /* RFC 7366 3.1: keep the EtM state */
S        ssl->session_negotiate->encrypt_then_mac =
S                  ssl->session->encrypt_then_mac;
S#endif
S
S        mbedtls_ssl_session_free( ssl->session );
S        mbedtls_free( ssl->session );
S    }
S    ssl->session = ssl->session_negotiate;
S    ssl->session_negotiate = NULL;
S
S    /*
S     * Add cache entry
S     */
S    if( ssl->conf->f_set_cache != NULL &&
S        ssl->session->id_len != 0 &&
S        resume == 0 )
S    {
S        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
S    }
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
S        ssl->handshake->flight != NULL )
S    {
S        /* Cancel handshake timer */
S        ssl_set_timer( ssl, 0 );
S
S        /* Keep last flight around in case we need to resend it:
S         * we need the handshake and transform structures for that */
S        MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip freeing handshake and transform" ) );
S    }
S    else
S#endif
S        ssl_handshake_wrapup_free_hs_transform( ssl );
S
S    ssl->state++;
S
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
S}
S
Sint mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
S{
S    int ret, hash_len;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
S
S    /*
S     * Set the out_msg pointer to the correct location based on IV length
S     */
S    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
S    {
S        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
S                       ssl->transform_negotiate->fixed_ivlen;
S    }
S    else
S        ssl->out_msg = ssl->out_iv;
S
S    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
S
S    // TODO TLS/1.2 Hash length is determined by cipher suite (Page 63)
S    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S    ssl->verify_data_len = hash_len;
S    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
S#endif
S
S    ssl->out_msglen  = 4 + hash_len;
S    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
S    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
S
S    /*
S     * In case of session resuming, invert the client and server
S     * ChangeCipherSpec messages order.
S     */
S    if( ssl->handshake->resume != 0 )
S    {
S#if defined(MBEDTLS_SSL_CLI_C)
S        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
S            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
S#endif
S#if defined(MBEDTLS_SSL_SRV_C)
S        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
S            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
S#endif
S    }
S    else
S        ssl->state++;
S
S    /*
S     * Switch to our negotiated transform and session parameters for outbound
S     * data.
S     */
S    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        unsigned char i;
S
S        /* Remember current epoch settings for resending */
S        ssl->handshake->alt_transform_out = ssl->transform_out;
S        memcpy( ssl->handshake->alt_out_ctr, ssl->out_ctr, 8 );
S
S        /* Set sequence_number to zero */
S        memset( ssl->out_ctr + 2, 0, 6 );
S
S        /* Increment epoch */
S        for( i = 2; i > 0; i-- )
S            if( ++ssl->out_ctr[i - 1] != 0 )
S                break;
S
S        /* The loop goes to its end iff the counter is wrapping */
S        if( i == 0 )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "DTLS epoch would wrap" ) );
S            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
S        }
S    }
S    else
S#endif /* MBEDTLS_SSL_PROTO_DTLS */
S    memset( ssl->out_ctr, 0, 8 );
S
S    ssl->transform_out = ssl->transform_negotiate;
S    ssl->session_out = ssl->session_negotiate;
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
S    if( mbedtls_ssl_hw_record_activate != NULL )
S    {
S        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_OUTBOUND ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
S            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
S        }
S    }
S#endif
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S        mbedtls_ssl_send_flight_completed( ssl );
S#endif
S
S    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
S        return( ret );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
S
S    return( 0 );
S}
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S#define SSL_MAX_HASH_LEN 36
S#else
S#define SSL_MAX_HASH_LEN 12
S#endif
S
Sint mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
S{
S    int ret;
S    unsigned int hash_len;
S    unsigned char buf[SSL_MAX_HASH_LEN];
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
S
S    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
S
S    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
S        return( ret );
S    }
S
S    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
S        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
S    }
S
S    /* There is currently no ciphersuite using another length with TLS 1.2 */
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S        hash_len = 36;
S    else
S#endif
S        hash_len = 12;
S
S    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
S        ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) + hash_len )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
S        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
S    }
S
S    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
S                      buf, hash_len ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
S        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
S    }
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S    ssl->verify_data_len = hash_len;
S    memcpy( ssl->peer_verify_data, buf, hash_len );
S#endif
S
S    if( ssl->handshake->resume != 0 )
S    {
S#if defined(MBEDTLS_SSL_CLI_C)
S        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
S            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
S#endif
S#if defined(MBEDTLS_SSL_SRV_C)
S        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
S            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
S#endif
S    }
S    else
S        ssl->state++;
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S        mbedtls_ssl_recv_flight_completed( ssl );
S#endif
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
S
S    return( 0 );
S}
S
Sstatic void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
S{
S    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_1)
X#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_1)
S     mbedtls_md5_init(   &handshake->fin_md5  );
S    mbedtls_sha1_init(   &handshake->fin_sha1 );
S     mbedtls_md5_starts( &handshake->fin_md5  );
S    mbedtls_sha1_starts( &handshake->fin_sha1 );
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA256_C)
S    mbedtls_sha256_init(   &handshake->fin_sha256    );
S    mbedtls_sha256_starts( &handshake->fin_sha256, 0 );
S#endif
S#if defined(MBEDTLS_SHA512_C)
S    mbedtls_sha512_init(   &handshake->fin_sha512    );
S    mbedtls_sha512_starts( &handshake->fin_sha512, 1 );
S#endif
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S
S    handshake->update_checksum = ssl_update_checksum_start;
S    handshake->sig_alg = MBEDTLS_SSL_HASH_SHA1;
S
S#if defined(MBEDTLS_DHM_C)
S    mbedtls_dhm_init( &handshake->dhm_ctx );
S#endif
S#if defined(MBEDTLS_ECDH_C)
S    mbedtls_ecdh_init( &handshake->ecdh_ctx );
S#endif
S#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
S    mbedtls_ecjpake_init( &handshake->ecjpake_ctx );
S#if defined(MBEDTLS_SSL_CLI_C)
S    handshake->ecjpake_cache = NULL;
S    handshake->ecjpake_cache_len = 0;
S#endif
S#endif
S
S#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
S    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
S#endif
S}
S
Sstatic void ssl_transform_init( mbedtls_ssl_transform *transform )
S{
S    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
S
S    mbedtls_cipher_init( &transform->cipher_ctx_enc );
S    mbedtls_cipher_init( &transform->cipher_ctx_dec );
S
S    mbedtls_md_init( &transform->md_ctx_enc );
S    mbedtls_md_init( &transform->md_ctx_dec );
S}
S
Svoid mbedtls_ssl_session_init( mbedtls_ssl_session *session )
S{
S    memset( session, 0, sizeof(mbedtls_ssl_session) );
S}
S
Sstatic int ssl_handshake_init( mbedtls_ssl_context *ssl )
S{
S    /* Clear old handshake information if present */
S    if( ssl->transform_negotiate )
S        mbedtls_ssl_transform_free( ssl->transform_negotiate );
S    if( ssl->session_negotiate )
S        mbedtls_ssl_session_free( ssl->session_negotiate );
S    if( ssl->handshake )
S        mbedtls_ssl_handshake_free( ssl->handshake );
S
S    /*
S     * Either the pointers are now NULL or cleared properly and can be freed.
S     * Now allocate missing structures.
S     */
S    if( ssl->transform_negotiate == NULL )
S    {
S        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
S    }
S
S    if( ssl->session_negotiate == NULL )
S    {
S        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
S    }
S
S    if( ssl->handshake == NULL )
S    {
S        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
S    }
S
S    /* All pointers should exist and can be directly freed without issue */
S    if( ssl->handshake == NULL ||
S        ssl->transform_negotiate == NULL ||
S        ssl->session_negotiate == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
S
S        mbedtls_free( ssl->handshake );
S        mbedtls_free( ssl->transform_negotiate );
S        mbedtls_free( ssl->session_negotiate );
S
S        ssl->handshake = NULL;
S        ssl->transform_negotiate = NULL;
S        ssl->session_negotiate = NULL;
S
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S    }
S
S    /* Initialize structures */
S    mbedtls_ssl_session_init( ssl->session_negotiate );
S    ssl_transform_init( ssl->transform_negotiate );
S    ssl_handshake_params_init( ssl->handshake );
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        ssl->handshake->alt_transform_out = ssl->transform_out;
S
S        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
S            ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_PREPARING;
S        else
S            ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
S
S        ssl_set_timer( ssl, 0 );
S    }
S#endif
S
S    return( 0 );
S}
S
S#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
S/* Dummy cookie callbacks for defaults */
Sstatic int ssl_cookie_write_dummy( void *ctx,
S                      unsigned char **p, unsigned char *end,
S                      const unsigned char *cli_id, size_t cli_id_len )
S{
S    ((void) ctx);
S    ((void) p);
S    ((void) end);
S    ((void) cli_id);
S    ((void) cli_id_len);
S
S    return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
S}
S
Sstatic int ssl_cookie_check_dummy( void *ctx,
S                      const unsigned char *cookie, size_t cookie_len,
S                      const unsigned char *cli_id, size_t cli_id_len )
S{
S    ((void) ctx);
S    ((void) cookie);
S    ((void) cookie_len);
S    ((void) cli_id);
S    ((void) cli_id_len);
S
S    return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
S}
S#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY && MBEDTLS_SSL_SRV_C */
S
S/*
S * Initialize an SSL context
S */
Svoid mbedtls_ssl_init( mbedtls_ssl_context *ssl )
S{
S    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
S}
S
S/*
S * Setup an SSL context
S */
Sint mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
S                       const mbedtls_ssl_config *conf )
S{
S    int ret;
S    const size_t len = MBEDTLS_SSL_BUFFER_LEN;
S
S    ssl->conf = conf;
S
S    /*
S     * Prepare base structures
S     */
S    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
S        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
S        mbedtls_free( ssl->in_buf );
S        ssl->in_buf = NULL;
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S    }
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        ssl->out_hdr = ssl->out_buf;
S        ssl->out_ctr = ssl->out_buf +  3;
S        ssl->out_len = ssl->out_buf + 11;
S        ssl->out_iv  = ssl->out_buf + 13;
S        ssl->out_msg = ssl->out_buf + 13;
S
S        ssl->in_hdr = ssl->in_buf;
S        ssl->in_ctr = ssl->in_buf +  3;
S        ssl->in_len = ssl->in_buf + 11;
S        ssl->in_iv  = ssl->in_buf + 13;
S        ssl->in_msg = ssl->in_buf + 13;
S    }
S    else
S#endif
S    {
S        ssl->out_ctr = ssl->out_buf;
S        ssl->out_hdr = ssl->out_buf +  8;
S        ssl->out_len = ssl->out_buf + 11;
S        ssl->out_iv  = ssl->out_buf + 13;
S        ssl->out_msg = ssl->out_buf + 13;
S
S        ssl->in_ctr = ssl->in_buf;
S        ssl->in_hdr = ssl->in_buf +  8;
S        ssl->in_len = ssl->in_buf + 11;
S        ssl->in_iv  = ssl->in_buf + 13;
S        ssl->in_msg = ssl->in_buf + 13;
S    }
S
S    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
S        return( ret );
S
S    return( 0 );
S}
S
S/*
S * Reset an initialized and used SSL context for re-use while retaining
S * all application-set variables, function pointers and data.
S *
S * If partial is non-zero, keep data in the input buffer and client ID.
S * (Use when a DTLS client reconnects from the same port.)
S */
Sstatic int ssl_session_reset_int( mbedtls_ssl_context *ssl, int partial )
S{
S    int ret;
S
S    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
S
S    /* Cancel any possibly running timer */
S    ssl_set_timer( ssl, 0 );
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S    ssl->renego_status = MBEDTLS_SSL_INITIAL_HANDSHAKE;
S    ssl->renego_records_seen = 0;
S
S    ssl->verify_data_len = 0;
S    memset( ssl->own_verify_data, 0, MBEDTLS_SSL_VERIFY_DATA_MAX_LEN );
S    memset( ssl->peer_verify_data, 0, MBEDTLS_SSL_VERIFY_DATA_MAX_LEN );
S#endif
S    ssl->secure_renegotiation = MBEDTLS_SSL_LEGACY_RENEGOTIATION;
S
S    ssl->in_offt = NULL;
S
S    ssl->in_msg = ssl->in_buf + 13;
S    ssl->in_msgtype = 0;
S    ssl->in_msglen = 0;
S    if( partial == 0 )
S        ssl->in_left = 0;
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    ssl->next_record_offset = 0;
S    ssl->in_epoch = 0;
S#endif
S#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
S    ssl_dtls_replay_reset( ssl );
S#endif
S
S    ssl->in_hslen = 0;
S    ssl->nb_zero = 0;
S    ssl->record_read = 0;
S
S    ssl->out_msg = ssl->out_buf + 13;
S    ssl->out_msgtype = 0;
S    ssl->out_msglen = 0;
S    ssl->out_left = 0;
S#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
S    if( ssl->split_done != MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED )
S        ssl->split_done = 0;
S#endif
S
S    ssl->transform_in = NULL;
S    ssl->transform_out = NULL;
S
S    memset( ssl->out_buf, 0, MBEDTLS_SSL_BUFFER_LEN );
S    if( partial == 0 )
S        memset( ssl->in_buf, 0, MBEDTLS_SSL_BUFFER_LEN );
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
S    if( mbedtls_ssl_hw_record_reset != NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_reset()" ) );
S        if( ( ret = mbedtls_ssl_hw_record_reset( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_reset", ret );
S            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
S        }
S    }
S#endif
S
S    if( ssl->transform )
S    {
S        mbedtls_ssl_transform_free( ssl->transform );
S        mbedtls_free( ssl->transform );
S        ssl->transform = NULL;
S    }
S
S    if( ssl->session )
S    {
S        mbedtls_ssl_session_free( ssl->session );
S        mbedtls_free( ssl->session );
S        ssl->session = NULL;
S    }
S
S#if defined(MBEDTLS_SSL_ALPN)
S    ssl->alpn_chosen = NULL;
S#endif
S
S#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
S    if( partial == 0 )
S    {
S        mbedtls_free( ssl->cli_id );
S        ssl->cli_id = NULL;
S        ssl->cli_id_len = 0;
S    }
S#endif
S
S    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
S        return( ret );
S
S    return( 0 );
S}
S
S/*
S * Reset an initialized and used SSL context for re-use while retaining
S * all application-set variables, function pointers and data.
S */
Sint mbedtls_ssl_session_reset( mbedtls_ssl_context *ssl )
S{
S    return( ssl_session_reset_int( ssl, 0 ) );
S}
S
S/*
S * SSL set accessors
S */
Svoid mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
S{
S    conf->endpoint   = endpoint;
S}
S
Svoid mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
S{
S    conf->transport = transport;
S}
S
S#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
Svoid mbedtls_ssl_conf_dtls_anti_replay( mbedtls_ssl_config *conf, char mode )
S{
S    conf->anti_replay = mode;
S}
S#endif
S
S#if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)
Svoid mbedtls_ssl_conf_dtls_badmac_limit( mbedtls_ssl_config *conf, unsigned limit )
S{
S    conf->badmac_limit = limit;
S}
S#endif
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
Svoid mbedtls_ssl_conf_handshake_timeout( mbedtls_ssl_config *conf, uint32_t min, uint32_t max )
S{
S    conf->hs_timeout_min = min;
S    conf->hs_timeout_max = max;
S}
S#endif
S
Svoid mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
S{
S    conf->authmode   = authmode;
S}
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
Svoid mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
S                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
S                     void *p_vrfy )
S{
S    conf->f_vrfy      = f_vrfy;
S    conf->p_vrfy      = p_vrfy;
S}
S#endif /* MBEDTLS_X509_CRT_PARSE_C */
S
Svoid mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
S                  int (*f_rng)(void *, unsigned char *, size_t),
S                  void *p_rng )
S{
S    conf->f_rng      = f_rng;
S    conf->p_rng      = p_rng;
S}
S
Svoid mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
S                  void (*f_dbg)(void *, int, const char *, int, const char *),
S                  void  *p_dbg )
S{
S    conf->f_dbg      = f_dbg;
S    conf->p_dbg      = p_dbg;
S}
S
Svoid mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,
S        void *p_bio,
S        int (*f_send)(void *, const unsigned char *, size_t),
S        int (*f_recv)(void *, unsigned char *, size_t),
S        int (*f_recv_timeout)(void *, unsigned char *, size_t, uint32_t) )
S{
S    ssl->p_bio          = p_bio;
S    ssl->f_send         = f_send;
S    ssl->f_recv         = f_recv;
S    ssl->f_recv_timeout = f_recv_timeout;
S}
S
Svoid mbedtls_ssl_conf_read_timeout( mbedtls_ssl_config *conf, uint32_t timeout )
S{
S    conf->read_timeout   = timeout;
S}
S
Svoid mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
S                               void *p_timer,
S                               void (*f_set_timer)(void *, uint32_t int_ms, uint32_t fin_ms),
S                               int (*f_get_timer)(void *) )
S{
S    ssl->p_timer        = p_timer;
S    ssl->f_set_timer    = f_set_timer;
S    ssl->f_get_timer    = f_get_timer;
S
S    /* Make sure we start with no timer running */
S    ssl_set_timer( ssl, 0 );
S}
S
S#if defined(MBEDTLS_SSL_SRV_C)
Svoid mbedtls_ssl_conf_session_cache( mbedtls_ssl_config *conf,
S        void *p_cache,
S        int (*f_get_cache)(void *, mbedtls_ssl_session *),
S        int (*f_set_cache)(void *, const mbedtls_ssl_session *) )
S{
S    conf->p_cache = p_cache;
S    conf->f_get_cache = f_get_cache;
S    conf->f_set_cache = f_set_cache;
S}
S#endif /* MBEDTLS_SSL_SRV_C */
S
S#if defined(MBEDTLS_SSL_CLI_C)
Sint mbedtls_ssl_set_session( mbedtls_ssl_context *ssl, const mbedtls_ssl_session *session )
S{
S    int ret;
S
S    if( ssl == NULL ||
S        session == NULL ||
S        ssl->session_negotiate == NULL ||
S        ssl->conf->endpoint != MBEDTLS_SSL_IS_CLIENT )
S    {
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    if( ( ret = ssl_session_copy( ssl->session_negotiate, session ) ) != 0 )
S        return( ret );
S
S    ssl->handshake->resume = 1;
S
S    return( 0 );
S}
S#endif /* MBEDTLS_SSL_CLI_C */
S
Svoid mbedtls_ssl_conf_ciphersuites( mbedtls_ssl_config *conf,
S                                   const int *ciphersuites )
S{
S    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] = ciphersuites;
S    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] = ciphersuites;
S    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] = ciphersuites;
S    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] = ciphersuites;
S}
S
Svoid mbedtls_ssl_conf_ciphersuites_for_version( mbedtls_ssl_config *conf,
S                                       const int *ciphersuites,
S                                       int major, int minor )
S{
S    if( major != MBEDTLS_SSL_MAJOR_VERSION_3 )
S        return;
S
S    if( minor < MBEDTLS_SSL_MINOR_VERSION_0 || minor > MBEDTLS_SSL_MINOR_VERSION_3 )
S        return;
S
S    conf->ciphersuite_list[minor] = ciphersuites;
S}
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
Svoid mbedtls_ssl_conf_cert_profile( mbedtls_ssl_config *conf,
S                                    const mbedtls_x509_crt_profile *profile )
S{
S    conf->cert_profile = profile;
S}
S
S/* Append a new keycert entry to a (possibly empty) list */
Sstatic int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
S                                mbedtls_x509_crt *cert,
S                                mbedtls_pk_context *key )
S{
S    mbedtls_ssl_key_cert *new;
S
S    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
S    if( new == NULL )
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S
S    new->cert = cert;
S    new->key  = key;
S    new->next = NULL;
S
S    /* Update head is the list was null, else add to the end */
S    if( *head == NULL )
S    {
S        *head = new;
S    }
S    else
S    {
S        mbedtls_ssl_key_cert *cur = *head;
S        while( cur->next != NULL )
S            cur = cur->next;
S        cur->next = new;
S    }
S
S    return( 0 );
S}
S
Sint mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
S                              mbedtls_x509_crt *own_cert,
S                              mbedtls_pk_context *pk_key )
S{
S    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
S}
S
Svoid mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
S                               mbedtls_x509_crt *ca_chain,
S                               mbedtls_x509_crl *ca_crl )
S{
S    conf->ca_chain   = ca_chain;
S    conf->ca_crl     = ca_crl;
S}
S#endif /* MBEDTLS_X509_CRT_PARSE_C */
S
S#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
Sint mbedtls_ssl_set_hs_own_cert( mbedtls_ssl_context *ssl,
S                                 mbedtls_x509_crt *own_cert,
S                                 mbedtls_pk_context *pk_key )
S{
S    return( ssl_append_key_cert( &ssl->handshake->sni_key_cert,
S                                 own_cert, pk_key ) );
S}
S
Svoid mbedtls_ssl_set_hs_ca_chain( mbedtls_ssl_context *ssl,
S                                  mbedtls_x509_crt *ca_chain,
S                                  mbedtls_x509_crl *ca_crl )
S{
S    ssl->handshake->sni_ca_chain   = ca_chain;
S    ssl->handshake->sni_ca_crl     = ca_crl;
S}
S
Svoid mbedtls_ssl_set_hs_authmode( mbedtls_ssl_context *ssl,
S                                  int authmode )
S{
S    ssl->handshake->sni_authmode = authmode;
S}
S#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
S
S#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
S/*
S * Set EC J-PAKE password for current handshake
S */
Sint mbedtls_ssl_set_hs_ecjpake_password( mbedtls_ssl_context *ssl,
S                                         const unsigned char *pw,
S                                         size_t pw_len )
S{
S    mbedtls_ecjpake_role role;
S
S    if( ssl->handshake == NULL && ssl->conf == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
S        role = MBEDTLS_ECJPAKE_SERVER;
S    else
S        role = MBEDTLS_ECJPAKE_CLIENT;
S
S    return( mbedtls_ecjpake_setup( &ssl->handshake->ecjpake_ctx,
S                                   role,
S                                   MBEDTLS_MD_SHA256,
S                                   MBEDTLS_ECP_DP_SECP256R1,
S                                   pw, pw_len ) );
S}
S#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
S
S#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
Sint mbedtls_ssl_conf_psk( mbedtls_ssl_config *conf,
S                const unsigned char *psk, size_t psk_len,
S                const unsigned char *psk_identity, size_t psk_identity_len )
S{
S    if( psk == NULL || psk_identity == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    if( psk_len > MBEDTLS_PSK_MAX_LEN )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    /* Identity len will be encoded on two bytes */
S    if( ( psk_identity_len >> 16 ) != 0 ||
S        psk_identity_len > MBEDTLS_SSL_MAX_CONTENT_LEN )
S    {
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    if( conf->psk != NULL || conf->psk_identity != NULL )
S    {
S        mbedtls_free( conf->psk );
S        mbedtls_free( conf->psk_identity );
S        conf->psk = NULL;
S        conf->psk_identity = NULL;
S    }
S
S    if( ( conf->psk = mbedtls_calloc( 1, psk_len ) ) == NULL ||
S        ( conf->psk_identity = mbedtls_calloc( 1, psk_identity_len ) ) == NULL )
S    {
S        mbedtls_free( conf->psk );
S        mbedtls_free( conf->psk_identity );
S        conf->psk = NULL;
S        conf->psk_identity = NULL;
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S    }
S
S    conf->psk_len = psk_len;
S    conf->psk_identity_len = psk_identity_len;
S
S    memcpy( conf->psk, psk, conf->psk_len );
S    memcpy( conf->psk_identity, psk_identity, conf->psk_identity_len );
S
S    return( 0 );
S}
S
Sint mbedtls_ssl_set_hs_psk( mbedtls_ssl_context *ssl,
S                            const unsigned char *psk, size_t psk_len )
S{
S    if( psk == NULL || ssl->handshake == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    if( psk_len > MBEDTLS_PSK_MAX_LEN )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    if( ssl->handshake->psk != NULL )
S        mbedtls_free( ssl->handshake->psk );
S
S    if( ( ssl->handshake->psk = mbedtls_calloc( 1, psk_len ) ) == NULL )
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S
S    ssl->handshake->psk_len = psk_len;
S    memcpy( ssl->handshake->psk, psk, ssl->handshake->psk_len );
S
S    return( 0 );
S}
S
Svoid mbedtls_ssl_conf_psk_cb( mbedtls_ssl_config *conf,
S                     int (*f_psk)(void *, mbedtls_ssl_context *, const unsigned char *,
S                     size_t),
S                     void *p_psk )
S{
S    conf->f_psk = f_psk;
S    conf->p_psk = p_psk;
S}
S#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
S
S#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
Sint mbedtls_ssl_conf_dh_param( mbedtls_ssl_config *conf, const char *dhm_P, const char *dhm_G )
S{
S    int ret;
S
S    if( ( ret = mbedtls_mpi_read_string( &conf->dhm_P, 16, dhm_P ) ) != 0 ||
S        ( ret = mbedtls_mpi_read_string( &conf->dhm_G, 16, dhm_G ) ) != 0 )
S    {
S        mbedtls_mpi_free( &conf->dhm_P );
S        mbedtls_mpi_free( &conf->dhm_G );
S        return( ret );
S    }
S
S    return( 0 );
S}
S
Sint mbedtls_ssl_conf_dh_param_ctx( mbedtls_ssl_config *conf, mbedtls_dhm_context *dhm_ctx )
S{
S    int ret;
S
S    if( ( ret = mbedtls_mpi_copy( &conf->dhm_P, &dhm_ctx->P ) ) != 0 ||
S        ( ret = mbedtls_mpi_copy( &conf->dhm_G, &dhm_ctx->G ) ) != 0 )
S    {
S        mbedtls_mpi_free( &conf->dhm_P );
S        mbedtls_mpi_free( &conf->dhm_G );
S        return( ret );
S    }
S
S    return( 0 );
S}
S#endif /* MBEDTLS_DHM_C && MBEDTLS_SSL_SRV_C */
S
S#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
S/*
S * Set the minimum length for Diffie-Hellman parameters
S */
Svoid mbedtls_ssl_conf_dhm_min_bitlen( mbedtls_ssl_config *conf,
S                                      unsigned int bitlen )
S{
S    conf->dhm_min_bitlen = bitlen;
S}
S#endif /* MBEDTLS_DHM_C && MBEDTLS_SSL_CLI_C */
S
S#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
S/*
S * Set allowed/preferred hashes for handshake signatures
S */
Svoid mbedtls_ssl_conf_sig_hashes( mbedtls_ssl_config *conf,
S                                  const int *hashes )
S{
S    conf->sig_hashes = hashes;
S}
S#endif
S
S#if defined(MBEDTLS_ECP_C)
S/*
S * Set the allowed elliptic curves
S */
Svoid mbedtls_ssl_conf_curves( mbedtls_ssl_config *conf,
S                             const mbedtls_ecp_group_id *curve_list )
S{
S    conf->curve_list = curve_list;
S}
S#endif
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
Sint mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
S{
S    size_t hostname_len;
S
S    if( hostname == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    hostname_len = strlen( hostname );
S
S    if( hostname_len + 1 == 0 )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
S
S    if( ssl->hostname == NULL )
S        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
S
S    memcpy( ssl->hostname, hostname, hostname_len );
S
S    ssl->hostname[hostname_len] = '\0';
S
S    return( 0 );
S}
S#endif
S
S#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
Svoid mbedtls_ssl_conf_sni( mbedtls_ssl_config *conf,
S                  int (*f_sni)(void *, mbedtls_ssl_context *,
S                                const unsigned char *, size_t),
S                  void *p_sni )
S{
S    conf->f_sni = f_sni;
S    conf->p_sni = p_sni;
S}
S#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
S
S#if defined(MBEDTLS_SSL_ALPN)
Sint mbedtls_ssl_conf_alpn_protocols( mbedtls_ssl_config *conf, const char **protos )
S{
S    size_t cur_len, tot_len;
S    const char **p;
S
S    /*
S     * "Empty strings MUST NOT be included and byte strings MUST NOT be
S     * truncated". Check lengths now rather than later.
S     */
S    tot_len = 0;
S    for( p = protos; *p != NULL; p++ )
S    {
S        cur_len = strlen( *p );
S        tot_len += cur_len;
S
S        if( cur_len == 0 || cur_len > 255 || tot_len > 65535 )
S            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    conf->alpn_list = protos;
S
S    return( 0 );
S}
S
Sconst char *mbedtls_ssl_get_alpn_protocol( const mbedtls_ssl_context *ssl )
S{
S    return( ssl->alpn_chosen );
S}
S#endif /* MBEDTLS_SSL_ALPN */
S
Svoid mbedtls_ssl_conf_max_version( mbedtls_ssl_config *conf, int major, int minor )
S{
S    conf->max_major_ver = major;
S    conf->max_minor_ver = minor;
S}
S
Svoid mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
S{
S    conf->min_major_ver = major;
S    conf->min_minor_ver = minor;
S}
S
S#if defined(MBEDTLS_SSL_FALLBACK_SCSV) && defined(MBEDTLS_SSL_CLI_C)
Svoid mbedtls_ssl_conf_fallback( mbedtls_ssl_config *conf, char fallback )
S{
S    conf->fallback = fallback;
S}
S#endif
S
S#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
Svoid mbedtls_ssl_conf_encrypt_then_mac( mbedtls_ssl_config *conf, char etm )
S{
S    conf->encrypt_then_mac = etm;
S}
S#endif
S
S#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
Svoid mbedtls_ssl_conf_extended_master_secret( mbedtls_ssl_config *conf, char ems )
S{
S    conf->extended_ms = ems;
S}
S#endif
S
S#if defined(MBEDTLS_ARC4_C)
Svoid mbedtls_ssl_conf_arc4_support( mbedtls_ssl_config *conf, char arc4 )
S{
S    conf->arc4_disabled = arc4;
S}
S#endif
S
S#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
Sint mbedtls_ssl_conf_max_frag_len( mbedtls_ssl_config *conf, unsigned char mfl_code )
S{
S    if( mfl_code >= MBEDTLS_SSL_MAX_FRAG_LEN_INVALID ||
S        mfl_code_to_length[mfl_code] > MBEDTLS_SSL_MAX_CONTENT_LEN )
S    {
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    conf->mfl_code = mfl_code;
S
S    return( 0 );
S}
S#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
S
S#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)
Svoid mbedtls_ssl_conf_truncated_hmac( mbedtls_ssl_config *conf, int truncate )
S{
S    conf->trunc_hmac = truncate;
S}
S#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
S
S#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
Svoid mbedtls_ssl_conf_cbc_record_splitting( mbedtls_ssl_config *conf, char split )
S{
S    conf->cbc_record_splitting = split;
S}
S#endif
S
Svoid mbedtls_ssl_conf_legacy_renegotiation( mbedtls_ssl_config *conf, int allow_legacy )
S{
S    conf->allow_legacy_renegotiation = allow_legacy;
S}
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
Svoid mbedtls_ssl_conf_renegotiation( mbedtls_ssl_config *conf, int renegotiation )
S{
S    conf->disable_renegotiation = renegotiation;
S}
S
Svoid mbedtls_ssl_conf_renegotiation_enforced( mbedtls_ssl_config *conf, int max_records )
S{
S    conf->renego_max_records = max_records;
S}
S
Svoid mbedtls_ssl_conf_renegotiation_period( mbedtls_ssl_config *conf,
S                                   const unsigned char period[8] )
S{
S    memcpy( conf->renego_period, period, 8 );
S}
S#endif /* MBEDTLS_SSL_RENEGOTIATION */
S
S#if defined(MBEDTLS_SSL_SESSION_TICKETS)
S#if defined(MBEDTLS_SSL_CLI_C)
Svoid mbedtls_ssl_conf_session_tickets( mbedtls_ssl_config *conf, int use_tickets )
S{
S    conf->session_tickets = use_tickets;
S}
S#endif
S
S#if defined(MBEDTLS_SSL_SRV_C)
Svoid mbedtls_ssl_conf_session_tickets_cb( mbedtls_ssl_config *conf,
S        mbedtls_ssl_ticket_write_t *f_ticket_write,
S        mbedtls_ssl_ticket_parse_t *f_ticket_parse,
S        void *p_ticket )
S{
S    conf->f_ticket_write = f_ticket_write;
S    conf->f_ticket_parse = f_ticket_parse;
S    conf->p_ticket       = p_ticket;
S}
S#endif
S#endif /* MBEDTLS_SSL_SESSION_TICKETS */
S
S#if defined(MBEDTLS_SSL_EXPORT_KEYS)
Svoid mbedtls_ssl_conf_export_keys_cb( mbedtls_ssl_config *conf,
S        mbedtls_ssl_export_keys_t *f_export_keys,
S        void *p_export_keys )
S{
S    conf->f_export_keys = f_export_keys;
S    conf->p_export_keys = p_export_keys;
S}
S#endif
S
S/*
S * SSL get accessors
S */
Ssize_t mbedtls_ssl_get_bytes_avail( const mbedtls_ssl_context *ssl )
S{
S    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
S}
S
Suint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
S{
S    if( ssl->session != NULL )
S        return( ssl->session->verify_result );
S
S    if( ssl->session_negotiate != NULL )
S        return( ssl->session_negotiate->verify_result );
S
S    return( 0xFFFFFFFF );
S}
S
Sconst char *mbedtls_ssl_get_ciphersuite( const mbedtls_ssl_context *ssl )
S{
S    if( ssl == NULL || ssl->session == NULL )
S        return( NULL );
S
S    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
S}
S
Sconst char *mbedtls_ssl_get_version( const mbedtls_ssl_context *ssl )
S{
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        switch( ssl->minor_ver )
S        {
S            case MBEDTLS_SSL_MINOR_VERSION_2:
S                return( "DTLSv1.0" );
S
S            case MBEDTLS_SSL_MINOR_VERSION_3:
S                return( "DTLSv1.2" );
S
S            default:
S                return( "unknown (DTLS)" );
S        }
S    }
S#endif
S
S    switch( ssl->minor_ver )
S    {
S        case MBEDTLS_SSL_MINOR_VERSION_0:
S            return( "SSLv3.0" );
S
S        case MBEDTLS_SSL_MINOR_VERSION_1:
S            return( "TLSv1.0" );
S
S        case MBEDTLS_SSL_MINOR_VERSION_2:
S            return( "TLSv1.1" );
S
S        case MBEDTLS_SSL_MINOR_VERSION_3:
S            return( "TLSv1.2" );
S
S        default:
S            return( "unknown" );
S    }
S}
S
Sint mbedtls_ssl_get_record_expansion( const mbedtls_ssl_context *ssl )
S{
S    size_t transform_expansion;
S    const mbedtls_ssl_transform *transform = ssl->transform_out;
S
S#if defined(MBEDTLS_ZLIB_SUPPORT)
S    if( ssl->session_out->compression != MBEDTLS_SSL_COMPRESS_NULL )
S        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
S#endif
S
S    if( transform == NULL )
S        return( (int) mbedtls_ssl_hdr_len( ssl ) );
S
S    switch( mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc ) )
S    {
S        case MBEDTLS_MODE_GCM:
S        case MBEDTLS_MODE_CCM:
S        case MBEDTLS_MODE_STREAM:
S            transform_expansion = transform->minlen;
S            break;
S
S        case MBEDTLS_MODE_CBC:
S            transform_expansion = transform->maclen
S                      + mbedtls_cipher_get_block_size( &transform->cipher_ctx_enc );
S            break;
S
S        default:
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S    }
S
S    return( (int)( mbedtls_ssl_hdr_len( ssl ) + transform_expansion ) );
S}
S
S#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
Ssize_t mbedtls_ssl_get_max_frag_len( const mbedtls_ssl_context *ssl )
S{
S    size_t max_len;
S
S    /*
S     * Assume mfl_code is correct since it was checked when set
S     */
S    max_len = mfl_code_to_length[ssl->conf->mfl_code];
S
S    /*
S     * Check if a smaller max length was negotiated
S     */
S    if( ssl->session_out != NULL &&
S        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
S    {
S        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
S    }
S
S    return max_len;
S}
S#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
Sconst mbedtls_x509_crt *mbedtls_ssl_get_peer_cert( const mbedtls_ssl_context *ssl )
S{
S    if( ssl == NULL || ssl->session == NULL )
S        return( NULL );
S
S    return( ssl->session->peer_cert );
S}
S#endif /* MBEDTLS_X509_CRT_PARSE_C */
S
S#if defined(MBEDTLS_SSL_CLI_C)
Sint mbedtls_ssl_get_session( const mbedtls_ssl_context *ssl, mbedtls_ssl_session *dst )
S{
S    if( ssl == NULL ||
S        dst == NULL ||
S        ssl->session == NULL ||
S        ssl->conf->endpoint != MBEDTLS_SSL_IS_CLIENT )
S    {
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S    }
S
S    return( ssl_session_copy( dst, ssl->session ) );
S}
S#endif /* MBEDTLS_SSL_CLI_C */
S
S/*
S * Perform a single step of the SSL handshake
S */
Sint mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
S{
S    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
S
S    if( ssl == NULL || ssl->conf == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S#if defined(MBEDTLS_SSL_CLI_C)
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
S        ret = mbedtls_ssl_handshake_client_step( ssl );
S#endif
S#if defined(MBEDTLS_SSL_SRV_C)
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
S        ret = mbedtls_ssl_handshake_server_step( ssl );
S#endif
S
S    return( ret );
S}
S
S/*
S * Perform the SSL handshake
S */
Sint mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
S{
S    int ret = 0;
S
S    if( ssl == NULL || ssl->conf == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
S
S    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
S    {
S        ret = mbedtls_ssl_handshake_step( ssl );
S
S        if( ret != 0 )
S            break;
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
S
S    return( ret );
S}
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S#if defined(MBEDTLS_SSL_SRV_C)
S/*
S * Write HelloRequest to request renegotiation on server
S */
Sstatic int ssl_write_hello_request( mbedtls_ssl_context *ssl )
S{
S    int ret;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write hello request" ) );
S
S    ssl->out_msglen  = 4;
S    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
S    ssl->out_msg[0]  = MBEDTLS_SSL_HS_HELLO_REQUEST;
S
S    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
S        return( ret );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write hello request" ) );
S
S    return( 0 );
S}
S#endif /* MBEDTLS_SSL_SRV_C */
S
S/*
S * Actually renegotiate current connection, triggered by either:
S * - any side: calling mbedtls_ssl_renegotiate(),
S * - client: receiving a HelloRequest during mbedtls_ssl_read(),
S * - server: receiving any handshake message on server during mbedtls_ssl_read() after
S *   the initial handshake is completed.
S * If the handshake doesn't complete due to waiting for I/O, it will continue
S * during the next calls to mbedtls_ssl_renegotiate() or mbedtls_ssl_read() respectively.
S */
Sstatic int ssl_start_renegotiation( mbedtls_ssl_context *ssl )
S{
S    int ret;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
S
S    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
S        return( ret );
S
S    /* RFC 6347 4.2.2: "[...] the HelloRequest will have message_seq = 0 and
S     * the ServerHello will have message_seq = 1" */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
S        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
S    {
S        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
S            ssl->handshake->out_msg_seq = 1;
S        else
S            ssl->handshake->in_msg_seq = 1;
S    }
S#endif
S
S    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
S    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
S
S    if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
S        return( ret );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= renegotiate" ) );
S
S    return( 0 );
S}
S
S/*
S * Renegotiate current connection on client,
S * or request renegotiation on server
S */
Sint mbedtls_ssl_renegotiate( mbedtls_ssl_context *ssl )
S{
S    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
S
S    if( ssl == NULL || ssl->conf == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S#if defined(MBEDTLS_SSL_SRV_C)
S    /* On server, just send the request */
S    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
S    {
S        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
S            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S        ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_PENDING;
S
S        /* Did we already try/start sending HelloRequest? */
S        if( ssl->out_left != 0 )
S            return( mbedtls_ssl_flush_output( ssl ) );
S
S        return( ssl_write_hello_request( ssl ) );
S    }
S#endif /* MBEDTLS_SSL_SRV_C */
S
S#if defined(MBEDTLS_SSL_CLI_C)
S    /*
S     * On client, either start the renegotiation process or,
S     * if already in progress, continue the handshake
S     */
S    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
S    {
S        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
S            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S        if( ( ret = ssl_start_renegotiation( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
S            return( ret );
S        }
S    }
S    else
S    {
S        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
S            return( ret );
S        }
S    }
S#endif /* MBEDTLS_SSL_CLI_C */
S
S    return( ret );
S}
S
S/*
S * Check record counters and renegotiate if they're above the limit.
S */
Sstatic int ssl_check_ctr_renegotiate( mbedtls_ssl_context *ssl )
S{
S    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
S        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING ||
S        ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED )
S    {
S        return( 0 );
S    }
S
S    if( memcmp( ssl->in_ctr,  ssl->conf->renego_period, 8 ) <= 0 &&
S        memcmp( ssl->out_ctr, ssl->conf->renego_period, 8 ) <= 0 )
S    {
S        return( 0 );
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 1, ( "record counter limit reached: renegotiate" ) );
S    return( mbedtls_ssl_renegotiate( ssl ) );
S}
S#endif /* MBEDTLS_SSL_RENEGOTIATION */
S
S/*
S * Receive application data decrypted from the SSL layer
S */
Sint mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
S{
S    int ret, record_read = 0;
S    size_t n;
S
S    if( ssl == NULL || ssl->conf == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
S            return( ret );
S
S        if( ssl->handshake != NULL &&
S            ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )
S        {
S            if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
S                return( ret );
S        }
S    }
S#endif
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S    if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
S        return( ret );
S    }
S#endif
S
S    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
S    {
S        ret = mbedtls_ssl_handshake( ssl );
S        if( ret == MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO )
S        {
S            record_read = 1;
S        }
S        else if( ret != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
S            return( ret );
S        }
S    }
S
S    if( ssl->in_offt == NULL )
S    {
S        /* Start timer if not already running */
S        if( ssl->f_get_timer != NULL &&
S            ssl->f_get_timer( ssl->p_timer ) == -1 )
S        {
S            ssl_set_timer( ssl, ssl->conf->read_timeout );
S        }
S
S        if( ! record_read )
S        {
S            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
S            {
S                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
S                    return( 0 );
S
S                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
S                return( ret );
S            }
S        }
S
S        if( ssl->in_msglen  == 0 &&
S            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
S        {
S            /*
S             * OpenSSL sends empty messages to randomize the IV
S             */
S            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
S            {
S                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
S                    return( 0 );
S
S                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
S                return( ret );
S            }
S        }
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
S
S#if defined(MBEDTLS_SSL_CLI_C)
S            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
S                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
S                  ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) ) )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
S
S                /* With DTLS, drop the packet (probably from last handshake) */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S                    return( MBEDTLS_ERR_SSL_WANT_READ );
S#endif
S                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
S            }
S
S            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
S                ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not ClientHello)" ) );
S
S                /* With DTLS, drop the packet (probably from last handshake) */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S                    return( MBEDTLS_ERR_SSL_WANT_READ );
S#endif
S                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
S            }
S#endif
S
S            if( ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED ||
S                ( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
S                  ssl->conf->allow_legacy_renegotiation ==
S                                                MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION ) )
S            {
S                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3)
S                if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
S                {
S                    /*
S                     * SSLv3 does not have a "no_renegotiation" alert
S                     */
S                    if( ( ret = mbedtls_ssl_send_fatal_handshake_failure( ssl ) ) != 0 )
S                        return( ret );
S                }
S                else
S#endif /* MBEDTLS_SSL_PROTO_SSL3 */
S#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_2)
X#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_2)
S                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
S                {
S                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
S                                    MBEDTLS_SSL_ALERT_LEVEL_WARNING,
S                                    MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION ) ) != 0 )
S                    {
S                        return( ret );
S                    }
S                }
S                else
S#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
S          MBEDTLS_SSL_PROTO_TLS1_2 */
S                {
S                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
S                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
S                }
S            }
S            else
S            {
S                /* DTLS clients need to know renego is server-initiated */
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
S                    ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
S                {
S                    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_PENDING;
S                }
S#endif
S                ret = ssl_start_renegotiation( ssl );
S                if( ret == MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO )
S                {
S                    record_read = 1;
S                }
S                else if( ret != 0 )
S                {
S                    MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
S                    return( ret );
S                }
S            }
S
S            /* If a non-handshake record was read during renego, fallthrough,
S             * else tell the user they should call mbedtls_ssl_read() again */
S            if( ! record_read )
S                return( MBEDTLS_ERR_SSL_WANT_READ );
S        }
S        else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
S        {
S
S            if( ssl->conf->renego_max_records >= 0 )
S            {
S                if( ++ssl->renego_records_seen > ssl->conf->renego_max_records )
S                {
S                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
S                                        "but not honored by client" ) );
S                    return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
S                }
S            }
S        }
S#endif /* MBEDTLS_SSL_RENEGOTIATION */
S
S        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
S        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
S            return( MBEDTLS_ERR_SSL_WANT_READ );
S        }
S
S        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
S            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
S        }
S
S        ssl->in_offt = ssl->in_msg;
S
S        /* We're going to return something now, cancel timer,
S         * except if handshake (renegotiation) is in progress */
S        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
S            ssl_set_timer( ssl, 0 );
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S        /* If we requested renego but received AppData, resend HelloRequest.
S         * Do it now, after setting in_offt, to avoid taking this branch
S         * again if ssl_write_hello_request() returns WANT_WRITE */
S#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
S        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
S            ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
S        {
S            if( ( ret = ssl_resend_hello_request( ssl ) ) != 0 )
S            {
S                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_resend_hello_request", ret );
S                return( ret );
S            }
S        }
S#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
S#endif
S    }
S
S    n = ( len < ssl->in_msglen )
S        ? len : ssl->in_msglen;
S
S    memcpy( buf, ssl->in_offt, n );
S    ssl->in_msglen -= n;
S
S    if( ssl->in_msglen == 0 )
S        /* all bytes consumed  */
S        ssl->in_offt = NULL;
S    else
S        /* more data available */
S        ssl->in_offt += n;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
S
S    return( (int) n );
S}
S
S/*
S * Send application data to be encrypted by the SSL layer,
S * taking care of max fragment length and buffer size
S */
Sstatic int ssl_write_real( mbedtls_ssl_context *ssl,
S                           const unsigned char *buf, size_t len )
S{
S    int ret;
S#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
S    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
S
S    if( len > max_len )
S    {
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S        {
S            MBEDTLS_SSL_DEBUG_MSG( 1, ( "fragment larger than the (negotiated) "
S                                "maximum fragment length: %d > %d",
S                                len, max_len ) );
S            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S        }
S        else
S#endif
S            len = max_len;
S    }
S#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
S
S    if( ssl->out_left != 0 )
S    {
S        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
S            return( ret );
S        }
S    }
S    else
S    {
S        ssl->out_msglen  = len;
S        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
S        memcpy( ssl->out_msg, buf, len );
S
S        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
S            return( ret );
S        }
S    }
S
S    return( (int) len );
S}
S
S/*
S * Write application data, doing 1/n-1 splitting if necessary.
S *
S * With non-blocking I/O, ssl_write_real() may return WANT_WRITE,
S * then the caller will call us again with the same arguments, so
S * remember wether we already did the split or not.
S */
S#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
Sstatic int ssl_write_split( mbedtls_ssl_context *ssl,
S                            const unsigned char *buf, size_t len )
S{
S    int ret;
S
S    if( ssl->conf->cbc_record_splitting ==
S            MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED ||
S        len <= 1 ||
S        ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_1 ||
S        mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc )
S                                != MBEDTLS_MODE_CBC )
S    {
S        return( ssl_write_real( ssl, buf, len ) );
S    }
S
S    if( ssl->split_done == 0 )
S    {
S        if( ( ret = ssl_write_real( ssl, buf, 1 ) ) <= 0 )
S            return( ret );
S        ssl->split_done = 1;
S    }
S
S    if( ( ret = ssl_write_real( ssl, buf + 1, len - 1 ) ) <= 0 )
S        return( ret );
S    ssl->split_done = 0;
S
S    return( ret + 1 );
S}
S#endif /* MBEDTLS_SSL_CBC_RECORD_SPLITTING */
S
S/*
S * Write application data (public-facing wrapper)
S */
Sint mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
S{
S    int ret;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
S
S    if( ssl == NULL || ssl->conf == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S    if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )
S    {
S        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
S        return( ret );
S    }
S#endif
S
S    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
S    {
S        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
S            return( ret );
S        }
S    }
S
S#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
S    ret = ssl_write_split( ssl, buf, len );
S#else
S    ret = ssl_write_real( ssl, buf, len );
S#endif
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
S
S    return( ret );
S}
S
S/*
S * Notify the peer that the connection is being closed
S */
Sint mbedtls_ssl_close_notify( mbedtls_ssl_context *ssl )
S{
S    int ret;
S
S    if( ssl == NULL || ssl->conf == NULL )
S        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
S
S    if( ssl->out_left != 0 )
S        return( mbedtls_ssl_flush_output( ssl ) );
S
S    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
S    {
S        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
S                        MBEDTLS_SSL_ALERT_LEVEL_WARNING,
S                        MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY ) ) != 0 )
S        {
S            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
S            return( ret );
S        }
S    }
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
S
S    return( 0 );
S}
S
Svoid mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
S{
S    if( transform == NULL )
S        return;
S
S#if defined(MBEDTLS_ZLIB_SUPPORT)
S    deflateEnd( &transform->ctx_deflate );
S    inflateEnd( &transform->ctx_inflate );
S#endif
S
S    mbedtls_cipher_free( &transform->cipher_ctx_enc );
S    mbedtls_cipher_free( &transform->cipher_ctx_dec );
S
S    mbedtls_md_free( &transform->md_ctx_enc );
S    mbedtls_md_free( &transform->md_ctx_dec );
S
S    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
S}
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
Sstatic void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
S{
S    mbedtls_ssl_key_cert *cur = key_cert, *next;
S
S    while( cur != NULL )
S    {
S        next = cur->next;
S        mbedtls_free( cur );
S        cur = next;
S    }
S}
S#endif /* MBEDTLS_X509_CRT_PARSE_C */
S
Svoid mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
S{
S    if( handshake == NULL )
S        return;
S
S#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
S    defined(MBEDTLS_SSL_PROTO_TLS1_1)
X#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) ||     defined(MBEDTLS_SSL_PROTO_TLS1_1)
S    mbedtls_md5_free(    &handshake->fin_md5  );
S    mbedtls_sha1_free(   &handshake->fin_sha1 );
S#endif
S#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
S#if defined(MBEDTLS_SHA256_C)
S    mbedtls_sha256_free(   &handshake->fin_sha256    );
S#endif
S#if defined(MBEDTLS_SHA512_C)
S    mbedtls_sha512_free(   &handshake->fin_sha512    );
S#endif
S#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
S
S#if defined(MBEDTLS_DHM_C)
S    mbedtls_dhm_free( &handshake->dhm_ctx );
S#endif
S#if defined(MBEDTLS_ECDH_C)
S    mbedtls_ecdh_free( &handshake->ecdh_ctx );
S#endif
S#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
S    mbedtls_ecjpake_free( &handshake->ecjpake_ctx );
S#if defined(MBEDTLS_SSL_CLI_C)
S    mbedtls_free( handshake->ecjpake_cache );
S    handshake->ecjpake_cache = NULL;
S    handshake->ecjpake_cache_len = 0;
S#endif
S#endif
S
S#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)
S    /* explicit void pointer cast for buggy MS compiler */
S    mbedtls_free( (void *) handshake->curves );
S#endif
S
S#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
S    if( handshake->psk != NULL )
S    {
S        mbedtls_zeroize( handshake->psk, handshake->psk_len );
S        mbedtls_free( handshake->psk );
S    }
S#endif
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C) && \
S    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
X#if defined(MBEDTLS_X509_CRT_PARSE_C) &&     defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
S    /*
S     * Free only the linked list wrapper, not the keys themselves
S     * since the belong to the SNI callback
S     */
S    if( handshake->sni_key_cert != NULL )
S    {
S        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;
S
S        while( cur != NULL )
S        {
S            next = cur->next;
S            mbedtls_free( cur );
S            cur = next;
S        }
S    }
S#endif /* MBEDTLS_X509_CRT_PARSE_C && MBEDTLS_SSL_SERVER_NAME_INDICATION */
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    mbedtls_free( handshake->verify_cookie );
S    mbedtls_free( handshake->hs_msg );
S    ssl_flight_free( handshake->flight );
S#endif
S
S    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
S}
S
Svoid mbedtls_ssl_session_free( mbedtls_ssl_session *session )
S{
S    if( session == NULL )
S        return;
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
S    if( session->peer_cert != NULL )
S    {
S        mbedtls_x509_crt_free( session->peer_cert );
S        mbedtls_free( session->peer_cert );
S    }
S#endif
S
S#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
S    mbedtls_free( session->ticket );
S#endif
S
S    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
S}
S
S/*
S * Free an SSL context
S */
Svoid mbedtls_ssl_free( mbedtls_ssl_context *ssl )
S{
S    if( ssl == NULL )
S        return;
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
S
S    if( ssl->out_buf != NULL )
S    {
S        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
S        mbedtls_free( ssl->out_buf );
S    }
S
S    if( ssl->in_buf != NULL )
S    {
S        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
S        mbedtls_free( ssl->in_buf );
S    }
S
S#if defined(MBEDTLS_ZLIB_SUPPORT)
S    if( ssl->compress_buf != NULL )
S    {
S        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
S        mbedtls_free( ssl->compress_buf );
S    }
S#endif
S
S    if( ssl->transform )
S    {
S        mbedtls_ssl_transform_free( ssl->transform );
S        mbedtls_free( ssl->transform );
S    }
S
S    if( ssl->handshake )
S    {
S        mbedtls_ssl_handshake_free( ssl->handshake );
S        mbedtls_ssl_transform_free( ssl->transform_negotiate );
S        mbedtls_ssl_session_free( ssl->session_negotiate );
S
S        mbedtls_free( ssl->handshake );
S        mbedtls_free( ssl->transform_negotiate );
S        mbedtls_free( ssl->session_negotiate );
S    }
S
S    if( ssl->session )
S    {
S        mbedtls_ssl_session_free( ssl->session );
S        mbedtls_free( ssl->session );
S    }
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
S    if( ssl->hostname != NULL )
S    {
S        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
S        mbedtls_free( ssl->hostname );
S    }
S#endif
S
S#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
S    if( mbedtls_ssl_hw_record_finish != NULL )
S    {
S        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_finish()" ) );
S        mbedtls_ssl_hw_record_finish( ssl );
S    }
S#endif
S
S#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
S    mbedtls_free( ssl->cli_id );
S#endif
S
S    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
S
S    /* Actually clear after last debug message */
S    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
S}
S
S/*
S * Initialze mbedtls_ssl_config
S */
Svoid mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
S{
S    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
S}
S
S#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
Sstatic int ssl_preset_default_hashes[] = {
S#if defined(MBEDTLS_SHA512_C)
S    MBEDTLS_MD_SHA512,
S    MBEDTLS_MD_SHA384,
S#endif
S#if defined(MBEDTLS_SHA256_C)
S    MBEDTLS_MD_SHA256,
S    MBEDTLS_MD_SHA224,
S#endif
S#if defined(MBEDTLS_SHA1_C)
S    MBEDTLS_MD_SHA1,
S#endif
S    MBEDTLS_MD_NONE
S};
S#endif
S
Sstatic int ssl_preset_suiteb_ciphersuites[] = {
S    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
S    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
S    0
S};
S
S#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
Sstatic int ssl_preset_suiteb_hashes[] = {
S    MBEDTLS_MD_SHA256,
S    MBEDTLS_MD_SHA384,
S    MBEDTLS_MD_NONE
S};
S#endif
S
S#if defined(MBEDTLS_ECP_C)
Sstatic mbedtls_ecp_group_id ssl_preset_suiteb_curves[] = {
S    MBEDTLS_ECP_DP_SECP256R1,
S    MBEDTLS_ECP_DP_SECP384R1,
S    MBEDTLS_ECP_DP_NONE
S};
S#endif
S
S/*
S * Load default in mbedtls_ssl_config
S */
Sint mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
S                                 int endpoint, int transport, int preset )
S{
S#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
S    int ret;
S#endif
S
S    /* Use the functions here so that they are covered in tests,
S     * but otherwise access member directly for efficiency */
S    mbedtls_ssl_conf_endpoint( conf, endpoint );
S    mbedtls_ssl_conf_transport( conf, transport );
S
S    /*
S     * Things that are common to all presets
S     */
S#if defined(MBEDTLS_SSL_CLI_C)
S    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
S    {
S        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
S#if defined(MBEDTLS_SSL_SESSION_TICKETS)
S        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
S#endif
S    }
S#endif
S
S#if defined(MBEDTLS_ARC4_C)
S    conf->arc4_disabled = MBEDTLS_SSL_ARC4_DISABLED;
S#endif
S
S#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
S    conf->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;
S#endif
S
S#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
S    conf->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
S#endif
S
S#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
S    conf->cbc_record_splitting = MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED;
S#endif
S
S#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
S    conf->f_cookie_write = ssl_cookie_write_dummy;
S    conf->f_cookie_check = ssl_cookie_check_dummy;
S#endif
S
S#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
S    conf->anti_replay = MBEDTLS_SSL_ANTI_REPLAY_ENABLED;
S#endif
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    conf->hs_timeout_min = MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN;
S    conf->hs_timeout_max = MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX;
S#endif
S
S#if defined(MBEDTLS_SSL_RENEGOTIATION)
S    conf->renego_max_records = MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT;
S    memset( conf->renego_period, 0xFF, 7 );
S    conf->renego_period[7] = 0x00;
S#endif
S
S#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
S            if( endpoint == MBEDTLS_SSL_IS_SERVER )
S            {
S                if( ( ret = mbedtls_ssl_conf_dh_param( conf,
S                                MBEDTLS_DHM_RFC5114_MODP_2048_P,
S                                MBEDTLS_DHM_RFC5114_MODP_2048_G ) ) != 0 )
S                {
S                    return( ret );
S                }
S            }
S#endif
S
S    /*
S     * Preset-specific defaults
S     */
S    switch( preset )
S    {
S        /*
S         * NSA Suite B
S         */
S        case MBEDTLS_SSL_PRESET_SUITEB:
S            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
S            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
S            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
S            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
S
S            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
S            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
S            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
S            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
S                                   ssl_preset_suiteb_ciphersuites;
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
S            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
S#endif
S
S#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
S            conf->sig_hashes = ssl_preset_suiteb_hashes;
S#endif
S
S#if defined(MBEDTLS_ECP_C)
S            conf->curve_list = ssl_preset_suiteb_curves;
S#endif
S            break;
S
S        /*
S         * Default
S         */
S        default:
S            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
S            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_1; /* TLS 1.0 */
S            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
S            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
S
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S            if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S                conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_2;
S#endif
S
S            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
S            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
S            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
S            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
S                                   mbedtls_ssl_list_ciphersuites();
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
S            conf->cert_profile = &mbedtls_x509_crt_profile_default;
S#endif
S
S#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
S            conf->sig_hashes = ssl_preset_default_hashes;
S#endif
S
S#if defined(MBEDTLS_ECP_C)
S            conf->curve_list = mbedtls_ecp_grp_id_list();
S#endif
S
S#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
S            conf->dhm_min_bitlen = 1024;
S#endif
S    }
S
S    return( 0 );
S}
S
S/*
S * Free mbedtls_ssl_config
S */
Svoid mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
S{
S#if defined(MBEDTLS_DHM_C)
S    mbedtls_mpi_free( &conf->dhm_P );
S    mbedtls_mpi_free( &conf->dhm_G );
S#endif
S
S#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
S    if( conf->psk != NULL )
S    {
S        mbedtls_zeroize( conf->psk, conf->psk_len );
S        mbedtls_zeroize( conf->psk_identity, conf->psk_identity_len );
S        mbedtls_free( conf->psk );
S        mbedtls_free( conf->psk_identity );
S        conf->psk_len = 0;
S        conf->psk_identity_len = 0;
S    }
S#endif
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
S    ssl_key_cert_free( conf->key_cert );
S#endif
S
S    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
S}
S
S#if defined(MBEDTLS_PK_C) && \
S    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
X#if defined(MBEDTLS_PK_C) &&     ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
S/*
S * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
S */
Sunsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
S{
S#if defined(MBEDTLS_RSA_C)
S    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
S        return( MBEDTLS_SSL_SIG_RSA );
S#endif
S#if defined(MBEDTLS_ECDSA_C)
S    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
S        return( MBEDTLS_SSL_SIG_ECDSA );
S#endif
S    return( MBEDTLS_SSL_SIG_ANON );
S}
S
Smbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig )
S{
S    switch( sig )
S    {
S#if defined(MBEDTLS_RSA_C)
S        case MBEDTLS_SSL_SIG_RSA:
S            return( MBEDTLS_PK_RSA );
S#endif
S#if defined(MBEDTLS_ECDSA_C)
S        case MBEDTLS_SSL_SIG_ECDSA:
S            return( MBEDTLS_PK_ECDSA );
S#endif
S        default:
S            return( MBEDTLS_PK_NONE );
S    }
S}
S#endif /* MBEDTLS_PK_C && ( MBEDTLS_RSA_C || MBEDTLS_ECDSA_C ) */
S
S/*
S * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX
S */
Smbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash )
S{
S    switch( hash )
S    {
S#if defined(MBEDTLS_MD5_C)
S        case MBEDTLS_SSL_HASH_MD5:
S            return( MBEDTLS_MD_MD5 );
S#endif
S#if defined(MBEDTLS_SHA1_C)
S        case MBEDTLS_SSL_HASH_SHA1:
S            return( MBEDTLS_MD_SHA1 );
S#endif
S#if defined(MBEDTLS_SHA256_C)
S        case MBEDTLS_SSL_HASH_SHA224:
S            return( MBEDTLS_MD_SHA224 );
S        case MBEDTLS_SSL_HASH_SHA256:
S            return( MBEDTLS_MD_SHA256 );
S#endif
S#if defined(MBEDTLS_SHA512_C)
S        case MBEDTLS_SSL_HASH_SHA384:
S            return( MBEDTLS_MD_SHA384 );
S        case MBEDTLS_SSL_HASH_SHA512:
S            return( MBEDTLS_MD_SHA512 );
S#endif
S        default:
S            return( MBEDTLS_MD_NONE );
S    }
S}
S
S/*
S * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
S */
Sunsigned char mbedtls_ssl_hash_from_md_alg( int md )
S{
S    switch( md )
S    {
S#if defined(MBEDTLS_MD5_C)
S        case MBEDTLS_MD_MD5:
S            return( MBEDTLS_SSL_HASH_MD5 );
S#endif
S#if defined(MBEDTLS_SHA1_C)
S        case MBEDTLS_MD_SHA1:
S            return( MBEDTLS_SSL_HASH_SHA1 );
S#endif
S#if defined(MBEDTLS_SHA256_C)
S        case MBEDTLS_MD_SHA224:
S            return( MBEDTLS_SSL_HASH_SHA224 );
S        case MBEDTLS_MD_SHA256:
S            return( MBEDTLS_SSL_HASH_SHA256 );
S#endif
S#if defined(MBEDTLS_SHA512_C)
S        case MBEDTLS_MD_SHA384:
S            return( MBEDTLS_SSL_HASH_SHA384 );
S        case MBEDTLS_MD_SHA512:
S            return( MBEDTLS_SSL_HASH_SHA512 );
S#endif
S        default:
S            return( MBEDTLS_SSL_HASH_NONE );
S    }
S}
S
S#if defined(MBEDTLS_ECP_C)
S/*
S * Check if a curve proposed by the peer is in our list.
S * Return 0 if we're willing to use it, -1 otherwise.
S */
Sint mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
S{
S    const mbedtls_ecp_group_id *gid;
S
S    if( ssl->conf->curve_list == NULL )
S        return( -1 );
S
S    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
S        if( *gid == grp_id )
S            return( 0 );
S
S    return( -1 );
S}
S#endif /* MBEDTLS_ECP_C */
S
S#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
S/*
S * Check if a hash proposed by the peer is in our list.
S * Return 0 if we're willing to use it, -1 otherwise.
S */
Sint mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,
S                                mbedtls_md_type_t md )
S{
S    const int *cur;
S
S    if( ssl->conf->sig_hashes == NULL )
S        return( -1 );
S
S    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
S        if( *cur == (int) md )
S            return( 0 );
S
S    return( -1 );
S}
S#endif /* MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
S
S#if defined(MBEDTLS_X509_CRT_PARSE_C)
Sint mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
S                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
S                          int cert_endpoint,
S                          uint32_t *flags )
S{
S    int ret = 0;
S#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
S    int usage = 0;
S#endif
S#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
S    const char *ext_oid;
S    size_t ext_len;
S#endif
S
S#if !defined(MBEDTLS_X509_CHECK_KEY_USAGE) &&          \
S    !defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
X#if !defined(MBEDTLS_X509_CHECK_KEY_USAGE) &&              !defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
S    ((void) cert);
S    ((void) cert_endpoint);
S    ((void) flags);
S#endif
S
S#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
S    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
S    {
S        /* Server part of the key exchange */
S        switch( ciphersuite->key_exchange )
S        {
S            case MBEDTLS_KEY_EXCHANGE_RSA:
S            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
S                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
S                break;
S
S            case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
S            case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
S            case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
S                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
S                break;
S
S            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
S            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
S                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
S                break;
S
S            /* Don't use default: we want warnings when adding new values */
S            case MBEDTLS_KEY_EXCHANGE_NONE:
S            case MBEDTLS_KEY_EXCHANGE_PSK:
S            case MBEDTLS_KEY_EXCHANGE_DHE_PSK:
S            case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
S            case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
S                usage = 0;
S        }
S    }
S    else
S    {
S        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
S        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
S    }
S
S    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
S    {
S        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
S        ret = -1;
S    }
S#else
S    ((void) ciphersuite);
S#endif /* MBEDTLS_X509_CHECK_KEY_USAGE */
S
S#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
S    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
S    {
S        ext_oid = MBEDTLS_OID_SERVER_AUTH;
S        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_SERVER_AUTH );
S    }
S    else
S    {
S        ext_oid = MBEDTLS_OID_CLIENT_AUTH;
S        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );
S    }
S
S    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
S    {
S        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
S        ret = -1;
S    }
S#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */
S
S    return( ret );
S}
S#endif /* MBEDTLS_X509_CRT_PARSE_C */
S
S/*
S * Convert version numbers to/from wire format
S * and, for DTLS, to/from TLS equivalent.
S *
S * For TLS this is the identity.
S * For DTLS, use one complement (v -> 255 - v, and then map as follows:
S * 1.0 <-> 3.2      (DTLS 1.0 is based on TLS 1.1)
S * 1.x <-> 3.x+1    for x != 0 (DTLS 1.2 based on TLS 1.2)
S */
Svoid mbedtls_ssl_write_version( int major, int minor, int transport,
S                        unsigned char ver[2] )
S{
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        if( minor == MBEDTLS_SSL_MINOR_VERSION_2 )
S            --minor; /* DTLS 1.0 stored as TLS 1.1 internally */
S
S        ver[0] = (unsigned char)( 255 - ( major - 2 ) );
S        ver[1] = (unsigned char)( 255 - ( minor - 1 ) );
S    }
S    else
S#else
S    ((void) transport);
S#endif
S    {
S        ver[0] = (unsigned char) major;
S        ver[1] = (unsigned char) minor;
S    }
S}
S
Svoid mbedtls_ssl_read_version( int *major, int *minor, int transport,
S                       const unsigned char ver[2] )
S{
S#if defined(MBEDTLS_SSL_PROTO_DTLS)
S    if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
S    {
S        *major = 255 - ver[0] + 2;
S        *minor = 255 - ver[1] + 1;
S
S        if( *minor == MBEDTLS_SSL_MINOR_VERSION_1 )
S            ++*minor; /* DTLS 1.0 stored as TLS 1.1 internally */
S    }
S    else
S#else
S    ((void) transport);
S#endif
S    {
S        *major = ver[0];
S        *minor = ver[1];
S    }
S}
S
N#endif /* MBEDTLS_SSL_TLS_C */
