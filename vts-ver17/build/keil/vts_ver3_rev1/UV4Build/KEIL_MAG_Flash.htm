<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\UV4Build\KEIL_MAG_Flash.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\UV4Build\KEIL_MAG_Flash.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Feb 07 17:58:29 2017
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d0]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[1c]">CMP0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[25]">DAC0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[c]">DMA0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[d]">DMA1_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[e]">DMA2_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[f]">DMA3_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[11]">FTFA_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from vts_ver2.o(.text) referenced from startup_mkl26z4.o(.text)
 <LI><a href="#[8]">HardFault_Handler</a> from vts_ver2.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[23]">I2S0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[13]">LLW_IRQHandler</a> from llwu.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[28]">LPTimer_IRQHandler</a> from vts_ver2.o(.text) referenced from startup_mkl26z4.o(.text)
 <LI><a href="#[28]">LPTimer_IRQHandler</a> from vts_ver2.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[12]">LVD_LVW_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[27]">MCG_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from nmi_isr_handler.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[22]">PIT_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[2a]">PORTA_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[2b]">PORTD_IRQHandler</a> from vts_ver2.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[21]">RTC_Seconds_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[10]">Reserved20_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[29]">Reserved45_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[17]">SPI1_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[2c]">SystemInit</a> from system_mkl26z4.o(.text) referenced from startup_mkl26z4.o(.text)
 <LI><a href="#[1d]">TPM0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[1e]">TPM1_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[1f]">TPM2_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[26]">TSI0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[18]">UART0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[19]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[1a]">UART2_IRQHandler</a> from uart.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[24]">USB0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[32]">__main</a> from __main.o(!!!main) referenced from startup_mkl26z4.o(.text)
 <LI><a href="#[31]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[2f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2e]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[30]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[35]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a6]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[36]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[37]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[39]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3b]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[3f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[48]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[41]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[f4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[43]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[fa]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[100]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[101]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[104]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[105]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[106]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[107]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[108]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[109]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[34]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[10e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[45]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[10f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[49]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; send_chunk &rArr; msg_sim800 &rArr; GPS_COLLECT &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[110]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[111]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, nmi_isr_handler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>enable_NMI_button</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nmi_isr_handler.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>sysinit</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysinit &rArr; uart0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[114]"></a>enable_abort_button</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sysinit.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>clk_out_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sysinit.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TPM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mkl26z4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[55]"></a>SER_PutChar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SER_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[57]"></a>SER_GetChar</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[59]"></a>send_SD</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_SD &rArr; send_modem &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_it
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[60]"></a>mystrstr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mystrstr &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpsdata
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[62]"></a>LED_state2</STRONG> (Thumb, 198 bytes, Stack size 4 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LED_state2 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpsdata
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>parse_gsm</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = parse_gsm
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[65]"></a>cursor_val</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cursor_val &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
</UL>

<P><STRONG><a name="[66]"></a>count_char</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = count_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
</UL>

<P><STRONG><a name="[67]"></a>send_tcp</STRONG> (Thumb, 4374 bytes, Stack size 16 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_all_chars
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[70]"></a>send_tcp_bal</STRONG> (Thumb, 4048 bytes, Stack size 16 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[71]"></a>send_tcp2</STRONG> (Thumb, 4054 bytes, Stack size 16 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[72]"></a>log_it</STRONG> (Thumb, 680 bytes, Stack size 16 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[73]"></a>read</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getchar_present
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[75]"></a>read2</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getchar_present
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[76]"></a>send_modem2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>

<P><STRONG><a name="[77]"></a>gsm_gps_sleep</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[7e]"></a>SW1_init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, vts_ver2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>LED_state</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LED_state &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
</UL>

<P><STRONG><a name="[2b]"></a>PORTD_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORTD_IRQHandler &rArr; LED_state &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>PORTC_action</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vts_ver2.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>systick_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vts_ver2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>systick_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vts_ver2.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>cal_systick_read_overhead</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[119]"></a>delay2</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vts_ver2.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 10482 bytes, Stack size 16 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = main &rArr; send_chunk &rArr; msg_sim800 &rArr; GPS_COLLECT &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursor
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_all_chars
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcursor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readapn
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ip_port
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_interval
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myAtoi
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignread
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_state
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_state2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vts_ver2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler &rArr; send_modem &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mkl26z4.o(RESET)
<LI> startup_mkl26z4.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, vts_ver2.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mkl26z4.o(RESET)
<LI> startup_mkl26z4.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>dtr_sleep</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, vts_ver2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_state
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_state2
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[8d]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[8e]"></a>isalnum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[8f]"></a>isdigit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[90]"></a>isupper</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[11a]"></a>strcasecmp</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>strncasecmp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>strtoul</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isupper
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isalnum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[61]"></a>strlen</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_MSG
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ip_port
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_it
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_char
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_val
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
</UL>

<P><STRONG><a name="[68]"></a>strcat</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, stdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = strcat &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[91]"></a>strncat</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[11c]"></a>strcpy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>strncpy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>strcmp</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[11e]"></a>strncmp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>memcpy</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>memset</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stdlib.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = start &rArr; sysinit &rArr; uart0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>cpu_identify</STRONG> (Thumb, 492 bytes, Stack size 8 bytes, start.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[93]"></a>flash_identify</STRONG> (Thumb, 1122 bytes, Stack size 8 bytes, start.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2c]"></a>SystemInit</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, system_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, system_mkl26z4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[95]"></a>llwu_configure</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, llwu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[96]"></a>llwu_configure_filter</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, llwu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[13]"></a>LLW_IRQHandler</STRONG> (Thumb, 828 bytes, Stack size 0 bytes, llwu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>time_delay_ms</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lptmr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>lptmr_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lptmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lptmr_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>uart_init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>uart_getchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>uart_putchar</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_it
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
</UL>

<P><STRONG><a name="[74]"></a>uart_getchar_present</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[53]"></a>uart0_init</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[58]"></a>uart0_getchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
</UL>

<P><STRONG><a name="[56]"></a>uart0_putchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
</UL>

<P><STRONG><a name="[123]"></a>uart0_getchar_present</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SER_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
</UL>

<P><STRONG><a name="[c5]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9a]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>

<P><STRONG><a name="[4f]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[124]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llwu_configure_filter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llwu_configure
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_identify
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_identify
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_systick_read_overhead
</UL>

<P><STRONG><a name="[6a]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcursor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readapn
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ip_port
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_interval
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignread
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_gps_sleep
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_it
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[9e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[9f]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[9d]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3a]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3c]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[126]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[5f]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_MSG
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpsdata
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_it
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[127]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[a9]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_MSG
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcursor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readapn
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ip_port
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_interval
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpsdata
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_it
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gsm
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
</UL>

<P><STRONG><a name="[128]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ip_port
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[12c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[ac]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[b0]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[b2]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[b1]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[130]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[131]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[132]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[133]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[134]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stof
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
</UL>

<P><STRONG><a name="[b7]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[b6]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
</UL>

<P><STRONG><a name="[135]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stof
</UL>

<P><STRONG><a name="[136]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[137]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[138]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[9c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[3e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[40]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[9b]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a2]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c6]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[42]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c0]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c2]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bc]"></a>_btod_etento</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bd]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>_btod_emul</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>_btod_emuld</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[be]"></a>_btod_ediv</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>_btod_edivd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[c7]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[c8]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[139]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ce]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[13b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>GPS_COLLECT</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, vts_ver2.o(i.GPS_COLLECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GPS_COLLECT &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stof
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpsdata
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[6e]"></a>GPS_COLLECT2</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, vts_ver2.o(i.GPS_COLLECT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GPS_COLLECT2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stof
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpsdata
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[7d]"></a>LED_init</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, vts_ver2.o(i.LED_init))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[63]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vts_ver2.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_identify
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_state
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_state2
</UL>

<P><STRONG><a name="[c1]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a5]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8a]"></a>adc_read</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, vts_ver2.o(i.adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_read &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>clear</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vts_ver2.o(i.clear))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_MSG
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_it
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
</UL>

<P><STRONG><a name="[db]"></a>clear2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vts_ver2.o(i.clear2))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpsdata
</UL>

<P><STRONG><a name="[5d]"></a>delay</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, vts_ver2.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursor
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignstaton
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignstatoff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_it
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gsm
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
</UL>

<P><STRONG><a name="[d3]"></a>get_gpsdata</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, vts_ver2.o(i.get_gpsdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_gpsdata &rArr; mystrstr &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_state2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[80]"></a>ignread</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, vts_ver2.o(i.ignread))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ignread &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>ignstatoff</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, vts_ver2.o(i.ignstatoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ignstatoff &rArr; send_GSM &rArr; send_modem &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[dd]"></a>ignstaton</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, vts_ver2.o(i.ignstaton))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ignstaton &rArr; send_GSM &rArr; send_modem &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[6c]"></a>msg_sim800</STRONG> (Thumb, 3280 bytes, Stack size 24 bytes, vts_ver2.o(i.msg_sim800))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = msg_sim800 &rArr; GPS_COLLECT &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursord
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myAtoi
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignstaton
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignstatoff
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gsm
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[88]"></a>myAtoi</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, vts_ver2.o(i.myAtoi))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcursor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_interval
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>parse_g</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, vts_ver2.o(i.parse_g))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = parse_g &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcursor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readapn
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ip_port
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_interval
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>read_interval</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vts_ver2.o(i.read_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = read_interval &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myAtoi
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>read_ip_port</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, vts_ver2.o(i.read_ip_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = read_ip_port &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>readapn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, vts_ver2.o(i.readapn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = readapn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>readcursor</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, vts_ver2.o(i.readcursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = readcursor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myAtoi
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>remove_all_chars</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, vts_ver2.o(i.remove_all_chars))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = remove_all_chars
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[df]"></a>save_interval</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, vts_ver2.o(i.save_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = save_interval &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[e1]"></a>save_ip_port</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, vts_ver2.o(i.save_ip_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = save_ip_port &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[e0]"></a>saveapn</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, vts_ver2.o(i.saveapn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = saveapn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[89]"></a>savecursor</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, vts_ver2.o(i.savecursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = savecursor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>savecursord</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, vts_ver2.o(i.savecursord))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = savecursord &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[6d]"></a>send_GSM</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, vts_ver2.o(i.send_GSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_GSM &rArr; send_modem &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savecursor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcursor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readapn
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ip_port
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_interval
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignstaton
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignstatoff
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ignread
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_gps_sleep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[e3]"></a>send_MSG</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, vts_ver2.o(i.send_MSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_MSG &rArr; send_modem &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>

<P><STRONG><a name="[6f]"></a>send_chunk</STRONG> (Thumb, 8346 bytes, Stack size 24 bytes, vts_ver2.o(i.send_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = send_chunk &rArr; msg_sim800 &rArr; GPS_COLLECT &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stof
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modem
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_all_chars
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_g
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_char
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_val
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_gps_sleep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
</UL>

<P><STRONG><a name="[de]"></a>send_message</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, vts_ver2.o(i.send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = send_message &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_MSG
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_sim800
</UL>

<P><STRONG><a name="[82]"></a>send_message1</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, vts_ver2.o(i.send_message1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = send_message1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_MSG
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>send_modem</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vts_ver2.o(i.send_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_modem &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_MSG
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_GSM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveapn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ip_port
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_interval
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtr_sleep
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp_bal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tcp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_SD
</UL>

<P><STRONG><a name="[d4]"></a>stof</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, vts_ver2.o(i.stof))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = stof &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_COLLECT
</UL>

<P><STRONG><a name="[44]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stof
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
</UL>

<P><STRONG><a name="[ea]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_chunk
</UL>

<P><STRONG><a name="[ec]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stof
</UL>

<P><STRONG><a name="[13d]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[ed]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[38]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[97]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lptmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_init
</UL>

<P><STRONG><a name="[98]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[ae]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ad]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ee]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[eb]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[bb]"></a>_fp_digits</STRONG> (Thumb, 408 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>btod_internal_mul</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[cc]"></a>btod_internal_div</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[d1]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c4]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a0]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a1]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
