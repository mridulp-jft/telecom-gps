; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\mcg.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\mcg.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -I.\RTE\_KL26Z128_-_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include -D__UVISION_VERSION=524 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\mcg.crf ..\..\..\src\drivers\mcg\mcg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  pll_init PROC
;;;55     
;;;56     int pll_init(int crystal_val, unsigned char hgo_val, unsigned char erefs_val, signed char prdiv_val, signed char vdiv_val, unsigned char mcgout_select)
000000  b5ff              PUSH     {r0-r7,lr}
;;;57     {
000002  b085              SUB      sp,sp,#0x14
000004  4606              MOV      r6,r0
;;;58       unsigned char frdiv_val;
;;;59       unsigned char temp_reg;
;;;60       unsigned char prdiv, vdiv;
;;;61       short i;
;;;62       int ref_freq;
;;;63       int pll_freq;
;;;64     
;;;65       // check if in FEI mode
;;;66       if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted FLL output
000006  48f8              LDR      r0,|L1.1000|
000008  7980              LDRB     r0,[r0,#6]
00000a  210c              MOVS     r1,#0xc
00000c  4008              ANDS     r0,r0,r1
00000e  0880              LSRS     r0,r0,#2
000010  2800              CMP      r0,#0
000012  d10b              BNE      |L1.44|
000014  48f4              LDR      r0,|L1.1000|
000016  7980              LDRB     r0,[r0,#6]
000018  2110              MOVS     r1,#0x10
00001a  4008              ANDS     r0,r0,r1
00001c  2800              CMP      r0,#0
00001e  d005              BEQ      |L1.44|
000020  48f1              LDR      r0,|L1.1000|
000022  7980              LDRB     r0,[r0,#6]
000024  2120              MOVS     r1,#0x20
000026  4008              ANDS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d002              BEQ      |L1.50|
                  |L1.44|
;;;67           (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;68           (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selected FLL
;;;69       {
;;;70         return 0x1;                                                     // return error code
00002c  2001              MOVS     r0,#1
                  |L1.46|
;;;71       }
;;;72     
;;;73       // check external frequency is less than the maximum frequency
;;;74       if  (crystal_val > 50000000) {return 0x21;}
;;;75     
;;;76       // check crystal frequency is within spec. if crystal osc is being used as PLL ref
;;;77       if (erefs_val)
;;;78       {
;;;79         if ((crystal_val < 3000000) || (crystal_val > 32000000)) {return 0x22;} // return 1 if one of the available crystal options is not available
;;;80       }
;;;81     
;;;82       // make sure HGO will never be greater than 1. Could return an error instead if desired.
;;;83       if (hgo_val > 0)
;;;84       {
;;;85         hgo_val = 1; // force hgo_val to 1 if > 0
;;;86       }
;;;87     
;;;88       // Check PLL divider settings are within spec.
;;;89       if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
;;;90       if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;}
;;;91     
;;;92       // Check PLL reference clock frequency is within spec.
;;;93       ref_freq = crystal_val / prdiv_val;
;;;94       if ((ref_freq < 2000000) || (ref_freq > 4000000)) {return 0x43;}
;;;95     
;;;96       // Check PLL output frequency is within spec.
;;;97       pll_freq = (crystal_val / prdiv_val) * vdiv_val;
;;;98       if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
;;;99     
;;;100      // configure the MCG_C2 register
;;;101      // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the FRDIV divide value
;;;102      // it still needs to be set correctly even if the oscillator is not being used
;;;103          
;;;104      temp_reg = MCG_C2;
;;;105      temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before writing new values
;;;106        
;;;107      if (crystal_val <= 8000000)
;;;108      {
;;;109        temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;110      }
;;;111      else
;;;112      {
;;;113        temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;114      }
;;;115      MCG_C2 = temp_reg;
;;;116      
;;;117      // determine FRDIV based on reference clock frequency
;;;118      // since the external frequency has already been checked only the maximum frequency for each FRDIV value needs to be compared here.
;;;119      if (crystal_val <= 1250000) {frdiv_val = 0;}
;;;120      else if (crystal_val <= 2500000) {frdiv_val = 1;}
;;;121      else if (crystal_val <= 5000000) {frdiv_val = 2;}
;;;122      else if (crystal_val <= 10000000) {frdiv_val = 3;}
;;;123      else if (crystal_val <= 20000000) {frdiv_val = 4;}
;;;124      else {frdiv_val = 5;}
;;;125    
;;;126      // Select external oscillator and Reference Divider and clear IREFS to start ext osc
;;;127      // If IRCLK is required it must be enabled outside of this driver, existing state will be maintained
;;;128      // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
;;;129      temp_reg = MCG_C1;
;;;130      temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these fields
;;;131      temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
;;;132      MCG_C1 = temp_reg;
;;;133    
;;;134      // if the external oscillator is used need to wait for OSCINIT to set
;;;135      if (erefs_val)
;;;136      {
;;;137        for (i = 0 ; i < 20000 ; i++)
;;;138        {
;;;139          if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishes
;;;140        }
;;;141      if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with error if not set
;;;142      }
;;;143    
;;;144      // wait for Reference clock Status bit to clear
;;;145      for (i = 0 ; i < 2000 ; i++)
;;;146      {
;;;147        if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishes
;;;148      }
;;;149      if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if not set
;;;150    
;;;151      // Wait for clock status bits to show clock source is ext ref clk
;;;152      for (i = 0 ; i < 2000 ; i++)
;;;153      {
;;;154        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST shows EXT CLK slected before loop finishes
;;;155      }
;;;156      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is really selected and return with error if not
;;;157    
;;;158      // Now in FBE
;;;159      // It is recommended that the clock monitor is enabled when using an external clock as the clock source/reference.
;;;160      // It is enabled here but can be removed if this is not required.
;;;161      MCG_C6 |= MCG_C6_CME0_MASK;
;;;162      
;;;163      // Configure PLL
;;;164      // Configure MCG_C5
;;;165      // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user code.
;;;166      temp_reg = MCG_C5;
;;;167      temp_reg &= ~MCG_C5_PRDIV0_MASK;
;;;168      temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
;;;169      MCG_C5 = temp_reg;
;;;170    
;;;171      // Configure MCG_C6
;;;172      // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk
;;;173      // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
;;;174      temp_reg = MCG_C6; // store present C6 value
;;;175      temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
;;;176      temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
;;;177      MCG_C6 = temp_reg; // update MCG_C6
;;;178    
;;;179      // wait for PLLST status bit to set
;;;180      for (i = 0 ; i < 2000 ; i++)
;;;181      {
;;;182        if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
;;;183      }
;;;184      if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if not set
;;;185    
;;;186      // Wait for LOCK bit to set
;;;187      for (i = 0 ; i < 4000 ; i++)
;;;188      {
;;;189        if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
;;;190      }
;;;191      if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if not set
;;;192    
;;;193      // Use actual PLL settings to calculate PLL frequency
;;;194      prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
;;;195      vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
;;;196    
;;;197      // now in PBE
;;;198    
;;;199      MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
;;;200    
;;;201      // Wait for clock status bits to update
;;;202      for (i = 0 ; i < 2000 ; i++)
;;;203      {
;;;204        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST = 3 before loop finishes
;;;205      }
;;;206      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set correctly and return with error if not
;;;207    
;;;208      // Now in PEE
;;;209      
;;;210      return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
;;;211    } // pll_init
00002e  b009              ADD      sp,sp,#0x24
000030  bdf0              POP      {r4-r7,pc}
                  |L1.50|
000032  48ee              LDR      r0,|L1.1004|
000034  4286              CMP      r6,r0                 ;74
000036  dd01              BLE      |L1.60|
000038  2021              MOVS     r0,#0x21              ;74
00003a  e7f8              B        |L1.46|
                  |L1.60|
00003c  9807              LDR      r0,[sp,#0x1c]         ;77
00003e  2800              CMP      r0,#0                 ;77
000040  d007              BEQ      |L1.82|
000042  48eb              LDR      r0,|L1.1008|
000044  4286              CMP      r6,r0                 ;79
000046  db02              BLT      |L1.78|
000048  48ea              LDR      r0,|L1.1012|
00004a  4286              CMP      r6,r0                 ;79
00004c  dd01              BLE      |L1.82|
                  |L1.78|
00004e  2022              MOVS     r0,#0x22              ;79
000050  e7ed              B        |L1.46|
                  |L1.82|
000052  9806              LDR      r0,[sp,#0x18]         ;83
000054  2800              CMP      r0,#0                 ;83
000056  dd01              BLE      |L1.92|
000058  2001              MOVS     r0,#1                 ;85
00005a  9006              STR      r0,[sp,#0x18]         ;85
                  |L1.92|
00005c  9808              LDR      r0,[sp,#0x20]         ;89
00005e  2801              CMP      r0,#1                 ;89
000060  db02              BLT      |L1.104|
000062  9808              LDR      r0,[sp,#0x20]         ;89
000064  2819              CMP      r0,#0x19              ;89
000066  dd01              BLE      |L1.108|
                  |L1.104|
000068  2041              MOVS     r0,#0x41              ;89
00006a  e7e0              B        |L1.46|
                  |L1.108|
00006c  980e              LDR      r0,[sp,#0x38]         ;90
00006e  2818              CMP      r0,#0x18              ;90
000070  db02              BLT      |L1.120|
000072  980e              LDR      r0,[sp,#0x38]         ;90
000074  2832              CMP      r0,#0x32              ;90
000076  dd01              BLE      |L1.124|
                  |L1.120|
000078  2042              MOVS     r0,#0x42              ;90
00007a  e7d8              B        |L1.46|
                  |L1.124|
00007c  4630              MOV      r0,r6                 ;93
00007e  9908              LDR      r1,[sp,#0x20]         ;93
000080  f7fffffe          BL       __aeabi_idivmod
000084  9002              STR      r0,[sp,#8]            ;93
000086  49dc              LDR      r1,|L1.1016|
000088  9802              LDR      r0,[sp,#8]            ;94
00008a  4288              CMP      r0,r1                 ;94
00008c  db03              BLT      |L1.150|
00008e  0049              LSLS     r1,r1,#1              ;94
000090  9802              LDR      r0,[sp,#8]            ;94
000092  4288              CMP      r0,r1                 ;94
000094  dd01              BLE      |L1.154|
                  |L1.150|
000096  2043              MOVS     r0,#0x43              ;94
000098  e7c9              B        |L1.46|
                  |L1.154|
00009a  4630              MOV      r0,r6                 ;97
00009c  9908              LDR      r1,[sp,#0x20]         ;97
00009e  f7fffffe          BL       __aeabi_idivmod
0000a2  990e              LDR      r1,[sp,#0x38]         ;97
0000a4  4348              MULS     r0,r1,r0              ;97
0000a6  9001              STR      r0,[sp,#4]            ;97
0000a8  49d4              LDR      r1,|L1.1020|
0000aa  9801              LDR      r0,[sp,#4]            ;98
0000ac  4288              CMP      r0,r1                 ;98
0000ae  db03              BLT      |L1.184|
0000b0  49d3              LDR      r1,|L1.1024|
0000b2  9801              LDR      r0,[sp,#4]            ;98
0000b4  4288              CMP      r0,r1                 ;98
0000b6  dd01              BLE      |L1.188|
                  |L1.184|
0000b8  2045              MOVS     r0,#0x45              ;98
0000ba  e7b8              B        |L1.46|
                  |L1.188|
0000bc  48ca              LDR      r0,|L1.1000|
0000be  7844              LDRB     r4,[r0,#1]            ;104
0000c0  213c              MOVS     r1,#0x3c              ;105
0000c2  4620              MOV      r0,r4                 ;105
0000c4  4388              BICS     r0,r0,r1              ;105
0000c6  4604              MOV      r4,r0                 ;105
0000c8  48ce              LDR      r0,|L1.1028|
0000ca  4286              CMP      r6,r0                 ;107
0000cc  dc09              BGT      |L1.226|
0000ce  9806              LDR      r0,[sp,#0x18]         ;109
0000d0  00c0              LSLS     r0,r0,#3              ;109
0000d2  2110              MOVS     r1,#0x10              ;109
0000d4  4308              ORRS     r0,r0,r1              ;109
0000d6  9907              LDR      r1,[sp,#0x1c]         ;109
0000d8  0089              LSLS     r1,r1,#2              ;109
0000da  4308              ORRS     r0,r0,r1              ;109
0000dc  4320              ORRS     r0,r0,r4              ;109
0000de  b2c4              UXTB     r4,r0                 ;109
0000e0  e008              B        |L1.244|
                  |L1.226|
0000e2  9806              LDR      r0,[sp,#0x18]         ;113
0000e4  00c0              LSLS     r0,r0,#3              ;113
0000e6  2120              MOVS     r1,#0x20              ;113
0000e8  4308              ORRS     r0,r0,r1              ;113
0000ea  9907              LDR      r1,[sp,#0x1c]         ;113
0000ec  0089              LSLS     r1,r1,#2              ;113
0000ee  4308              ORRS     r0,r0,r1              ;113
0000f0  4320              ORRS     r0,r0,r4              ;113
0000f2  b2c4              UXTB     r4,r0                 ;113
                  |L1.244|
0000f4  48bc              LDR      r0,|L1.1000|
0000f6  7044              STRB     r4,[r0,#1]            ;115
0000f8  48c3              LDR      r0,|L1.1032|
0000fa  4286              CMP      r6,r0                 ;119
0000fc  dc01              BGT      |L1.258|
0000fe  2700              MOVS     r7,#0                 ;119
000100  e014              B        |L1.300|
                  |L1.258|
000102  48c2              LDR      r0,|L1.1036|
000104  4286              CMP      r6,r0                 ;120
000106  dc01              BGT      |L1.268|
000108  2701              MOVS     r7,#1                 ;120
00010a  e00f              B        |L1.300|
                  |L1.268|
00010c  48c0              LDR      r0,|L1.1040|
00010e  4286              CMP      r6,r0                 ;121
000110  dc01              BGT      |L1.278|
000112  2702              MOVS     r7,#2                 ;121
000114  e00a              B        |L1.300|
                  |L1.278|
000116  48bf              LDR      r0,|L1.1044|
000118  4286              CMP      r6,r0                 ;122
00011a  dc01              BGT      |L1.288|
00011c  2703              MOVS     r7,#3                 ;122
00011e  e005              B        |L1.300|
                  |L1.288|
000120  48bd              LDR      r0,|L1.1048|
000122  4286              CMP      r6,r0                 ;123
000124  dc01              BGT      |L1.298|
000126  2704              MOVS     r7,#4                 ;123
000128  e000              B        |L1.300|
                  |L1.298|
00012a  2705              MOVS     r7,#5                 ;124
                  |L1.300|
00012c  48ae              LDR      r0,|L1.1000|
00012e  7804              LDRB     r4,[r0,#0]            ;129
000130  21fc              MOVS     r1,#0xfc              ;130
000132  4620              MOV      r0,r4                 ;130
000134  4388              BICS     r0,r0,r1              ;130
000136  4604              MOV      r4,r0                 ;130
000138  00f8              LSLS     r0,r7,#3              ;131
00013a  2138              MOVS     r1,#0x38              ;131
00013c  4008              ANDS     r0,r0,r1              ;131
00013e  2180              MOVS     r1,#0x80              ;131
000140  4308              ORRS     r0,r0,r1              ;131
000142  4304              ORRS     r4,r4,r0              ;131
000144  48a8              LDR      r0,|L1.1000|
000146  7004              STRB     r4,[r0,#0]            ;132
000148  9807              LDR      r0,[sp,#0x1c]         ;135
00014a  2800              CMP      r0,#0                 ;135
00014c  d016              BEQ      |L1.380|
00014e  2500              MOVS     r5,#0                 ;137
000150  e008              B        |L1.356|
                  |L1.338|
000152  48a5              LDR      r0,|L1.1000|
000154  7980              LDRB     r0,[r0,#6]            ;139
000156  2102              MOVS     r1,#2                 ;139
000158  4008              ANDS     r0,r0,r1              ;139
00015a  2800              CMP      r0,#0                 ;139
00015c  d000              BEQ      |L1.352|
00015e  e004              B        |L1.362|
                  |L1.352|
000160  1c68              ADDS     r0,r5,#1              ;137
000162  b205              SXTH     r5,r0                 ;137
                  |L1.356|
000164  48ad              LDR      r0,|L1.1052|
000166  4285              CMP      r5,r0                 ;137
000168  dbf3              BLT      |L1.338|
                  |L1.362|
00016a  bf00              NOP                            ;139
00016c  489e              LDR      r0,|L1.1000|
00016e  7980              LDRB     r0,[r0,#6]            ;141
000170  2102              MOVS     r1,#2                 ;141
000172  4008              ANDS     r0,r0,r1              ;141
000174  2800              CMP      r0,#0                 ;141
000176  d101              BNE      |L1.380|
000178  2023              MOVS     r0,#0x23              ;141
00017a  e758              B        |L1.46|
                  |L1.380|
00017c  2500              MOVS     r5,#0                 ;145
00017e  e008              B        |L1.402|
                  |L1.384|
000180  4899              LDR      r0,|L1.1000|
000182  7980              LDRB     r0,[r0,#6]            ;147
000184  2110              MOVS     r1,#0x10              ;147
000186  4008              ANDS     r0,r0,r1              ;147
000188  2800              CMP      r0,#0                 ;147
00018a  d100              BNE      |L1.398|
00018c  e005              B        |L1.410|
                  |L1.398|
00018e  1c68              ADDS     r0,r5,#1              ;145
000190  b205              SXTH     r5,r0                 ;145
                  |L1.402|
000192  207d              MOVS     r0,#0x7d              ;145
000194  0100              LSLS     r0,r0,#4              ;145
000196  4285              CMP      r5,r0                 ;145
000198  dbf2              BLT      |L1.384|
                  |L1.410|
00019a  bf00              NOP                            ;147
00019c  4892              LDR      r0,|L1.1000|
00019e  7980              LDRB     r0,[r0,#6]            ;149
0001a0  2110              MOVS     r1,#0x10              ;149
0001a2  4008              ANDS     r0,r0,r1              ;149
0001a4  2800              CMP      r0,#0                 ;149
0001a6  d001              BEQ      |L1.428|
0001a8  2011              MOVS     r0,#0x11              ;149
0001aa  e740              B        |L1.46|
                  |L1.428|
0001ac  2500              MOVS     r5,#0                 ;152
0001ae  e009              B        |L1.452|
                  |L1.432|
0001b0  488d              LDR      r0,|L1.1000|
0001b2  7980              LDRB     r0,[r0,#6]            ;154
0001b4  210c              MOVS     r1,#0xc               ;154
0001b6  4008              ANDS     r0,r0,r1              ;154
0001b8  0880              LSRS     r0,r0,#2              ;154
0001ba  2802              CMP      r0,#2                 ;154
0001bc  d100              BNE      |L1.448|
0001be  e005              B        |L1.460|
                  |L1.448|
0001c0  1c68              ADDS     r0,r5,#1              ;152
0001c2  b205              SXTH     r5,r0                 ;152
                  |L1.452|
0001c4  207d              MOVS     r0,#0x7d              ;152
0001c6  0100              LSLS     r0,r0,#4              ;152
0001c8  4285              CMP      r5,r0                 ;152
0001ca  dbf1              BLT      |L1.432|
                  |L1.460|
0001cc  bf00              NOP                            ;154
0001ce  4886              LDR      r0,|L1.1000|
0001d0  7980              LDRB     r0,[r0,#6]            ;156
0001d2  210c              MOVS     r1,#0xc               ;156
0001d4  4008              ANDS     r0,r0,r1              ;156
0001d6  0880              LSRS     r0,r0,#2              ;156
0001d8  2802              CMP      r0,#2                 ;156
0001da  d001              BEQ      |L1.480|
0001dc  201a              MOVS     r0,#0x1a              ;156
0001de  e726              B        |L1.46|
                  |L1.480|
0001e0  4881              LDR      r0,|L1.1000|
0001e2  7940              LDRB     r0,[r0,#5]            ;161
0001e4  2120              MOVS     r1,#0x20              ;161
0001e6  4308              ORRS     r0,r0,r1              ;161
0001e8  497f              LDR      r1,|L1.1000|
0001ea  7148              STRB     r0,[r1,#5]            ;161
0001ec  4608              MOV      r0,r1                 ;166
0001ee  7904              LDRB     r4,[r0,#4]            ;166
0001f0  0964              LSRS     r4,r4,#5              ;167
0001f2  0164              LSLS     r4,r4,#5              ;167
0001f4  9808              LDR      r0,[sp,#0x20]         ;168
0001f6  1e40              SUBS     r0,r0,#1              ;168
0001f8  06c0              LSLS     r0,r0,#27             ;168
0001fa  0ec0              LSRS     r0,r0,#27             ;168
0001fc  4304              ORRS     r4,r4,r0              ;168
0001fe  4608              MOV      r0,r1                 ;169
000200  7104              STRB     r4,[r0,#4]            ;169
000202  7944              LDRB     r4,[r0,#5]            ;174
000204  0964              LSRS     r4,r4,#5              ;175
000206  0164              LSLS     r4,r4,#5              ;175
000208  980e              LDR      r0,[sp,#0x38]         ;176
00020a  3818              SUBS     r0,r0,#0x18           ;176
00020c  06c0              LSLS     r0,r0,#27             ;176
00020e  0ec0              LSRS     r0,r0,#27             ;176
000210  2140              MOVS     r1,#0x40              ;176
000212  4308              ORRS     r0,r0,r1              ;176
000214  4304              ORRS     r4,r4,r0              ;176
000216  4874              LDR      r0,|L1.1000|
000218  7144              STRB     r4,[r0,#5]            ;177
00021a  2500              MOVS     r5,#0                 ;180
00021c  e008              B        |L1.560|
                  |L1.542|
00021e  4872              LDR      r0,|L1.1000|
000220  7980              LDRB     r0,[r0,#6]            ;182
000222  2120              MOVS     r1,#0x20              ;182
000224  4008              ANDS     r0,r0,r1              ;182
000226  2800              CMP      r0,#0                 ;182
000228  d000              BEQ      |L1.556|
00022a  e005              B        |L1.568|
                  |L1.556|
00022c  1c68              ADDS     r0,r5,#1              ;180
00022e  b205              SXTH     r5,r0                 ;180
                  |L1.560|
000230  207d              MOVS     r0,#0x7d              ;180
000232  0100              LSLS     r0,r0,#4              ;180
000234  4285              CMP      r5,r0                 ;180
000236  dbf2              BLT      |L1.542|
                  |L1.568|
000238  bf00              NOP                            ;182
00023a  486b              LDR      r0,|L1.1000|
00023c  7980              LDRB     r0,[r0,#6]            ;184
00023e  2120              MOVS     r1,#0x20              ;184
000240  4008              ANDS     r0,r0,r1              ;184
000242  2800              CMP      r0,#0                 ;184
000244  d101              BNE      |L1.586|
000246  2016              MOVS     r0,#0x16              ;184
000248  e6f1              B        |L1.46|
                  |L1.586|
00024a  2500              MOVS     r5,#0                 ;187
00024c  e008              B        |L1.608|
                  |L1.590|
00024e  4866              LDR      r0,|L1.1000|
000250  7980              LDRB     r0,[r0,#6]            ;189
000252  2140              MOVS     r1,#0x40              ;189
000254  4008              ANDS     r0,r0,r1              ;189
000256  2800              CMP      r0,#0                 ;189
000258  d000              BEQ      |L1.604|
00025a  e005              B        |L1.616|
                  |L1.604|
00025c  1c68              ADDS     r0,r5,#1              ;187
00025e  b205              SXTH     r5,r0                 ;187
                  |L1.608|
000260  207d              MOVS     r0,#0x7d              ;187
000262  0140              LSLS     r0,r0,#5              ;187
000264  4285              CMP      r5,r0                 ;187
000266  dbf2              BLT      |L1.590|
                  |L1.616|
000268  bf00              NOP                            ;189
00026a  485f              LDR      r0,|L1.1000|
00026c  7980              LDRB     r0,[r0,#6]            ;191
00026e  2140              MOVS     r1,#0x40              ;191
000270  4008              ANDS     r0,r0,r1              ;191
000272  2800              CMP      r0,#0                 ;191
000274  d101              BNE      |L1.634|
000276  2044              MOVS     r0,#0x44              ;191
000278  e6d9              B        |L1.46|
                  |L1.634|
00027a  485b              LDR      r0,|L1.1000|
00027c  7900              LDRB     r0,[r0,#4]            ;194
00027e  06c0              LSLS     r0,r0,#27             ;194
000280  0ec0              LSRS     r0,r0,#27             ;194
000282  1c40              ADDS     r0,r0,#1              ;194
000284  9004              STR      r0,[sp,#0x10]         ;194
000286  4858              LDR      r0,|L1.1000|
000288  7940              LDRB     r0,[r0,#5]            ;195
00028a  06c0              LSLS     r0,r0,#27             ;195
00028c  0ec0              LSRS     r0,r0,#27             ;195
00028e  3018              ADDS     r0,r0,#0x18           ;195
000290  9003              STR      r0,[sp,#0xc]          ;195
000292  4855              LDR      r0,|L1.1000|
000294  7800              LDRB     r0,[r0,#0]            ;199
000296  21c0              MOVS     r1,#0xc0              ;199
000298  4388              BICS     r0,r0,r1              ;199
00029a  4953              LDR      r1,|L1.1000|
00029c  7008              STRB     r0,[r1,#0]            ;199
00029e  2500              MOVS     r5,#0                 ;202
0002a0  e009              B        |L1.694|
                  |L1.674|
0002a2  4851              LDR      r0,|L1.1000|
0002a4  7980              LDRB     r0,[r0,#6]            ;204
0002a6  210c              MOVS     r1,#0xc               ;204
0002a8  4008              ANDS     r0,r0,r1              ;204
0002aa  0880              LSRS     r0,r0,#2              ;204
0002ac  2803              CMP      r0,#3                 ;204
0002ae  d100              BNE      |L1.690|
0002b0  e005              B        |L1.702|
                  |L1.690|
0002b2  1c68              ADDS     r0,r5,#1              ;202
0002b4  b205              SXTH     r5,r0                 ;202
                  |L1.694|
0002b6  207d              MOVS     r0,#0x7d              ;202
0002b8  0100              LSLS     r0,r0,#4              ;202
0002ba  4285              CMP      r5,r0                 ;202
0002bc  dbf1              BLT      |L1.674|
                  |L1.702|
0002be  bf00              NOP                            ;204
0002c0  4849              LDR      r0,|L1.1000|
0002c2  7980              LDRB     r0,[r0,#6]            ;206
0002c4  210c              MOVS     r1,#0xc               ;206
0002c6  4008              ANDS     r0,r0,r1              ;206
0002c8  0880              LSRS     r0,r0,#2              ;206
0002ca  2803              CMP      r0,#3                 ;206
0002cc  d001              BEQ      |L1.722|
0002ce  201b              MOVS     r0,#0x1b              ;206
0002d0  e6ad              B        |L1.46|
                  |L1.722|
0002d2  4630              MOV      r0,r6                 ;210
0002d4  9904              LDR      r1,[sp,#0x10]         ;210
0002d6  f7fffffe          BL       __aeabi_idivmod
0002da  9903              LDR      r1,[sp,#0xc]          ;210
0002dc  4348              MULS     r0,r1,r0              ;210
0002de  e6a6              B        |L1.46|
;;;212    
                          ENDP

                  new_pll_freq PROC
;;;245     */
;;;246    int new_pll_freq(int crystal_val, signed char prdiv_val, signed char vdiv_val)
0002e0  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;247    {
0002e2  b084              SUB      sp,sp,#0x10
0002e4  460f              MOV      r7,r1
0002e6  4616              MOV      r6,r2
;;;248      unsigned char temp_reg;
;;;249      unsigned char prdiv, vdiv;
;;;250      short i;
;;;251      int ref_freq;
;;;252      int pll_freq;
;;;253    
;;;254      
;;;255      // Check MCG is in PEE mode
;;;256      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted PLL output
0002e8  483f              LDR      r0,|L1.1000|
0002ea  7980              LDRB     r0,[r0,#6]
0002ec  210c              MOVS     r1,#0xc
0002ee  4008              ANDS     r0,r0,r1
0002f0  0880              LSRS     r0,r0,#2
0002f2  2803              CMP      r0,#3
0002f4  d10b              BNE      |L1.782|
0002f6  483c              LDR      r0,|L1.1000|
0002f8  7980              LDRB     r0,[r0,#6]
0002fa  2110              MOVS     r1,#0x10
0002fc  4008              ANDS     r0,r0,r1
0002fe  2800              CMP      r0,#0
000300  d105              BNE      |L1.782|
000302  4839              LDR      r0,|L1.1000|
000304  7980              LDRB     r0,[r0,#6]
000306  2120              MOVS     r1,#0x20
000308  4008              ANDS     r0,r0,r1
00030a  2800              CMP      r0,#0
00030c  d102              BNE      |L1.788|
                  |L1.782|
;;;257          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;258          (MCG_S & MCG_S_PLLST_MASK)))                                    // check PLLS mux has selected PLL 
;;;259      {
;;;260        return 0x8;                                                       // return error code
00030e  2008              MOVS     r0,#8
                  |L1.784|
;;;261      } 
;;;262      
;;;263      // Check PLL divider settings are within spec.
;;;264      if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
;;;265      if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;}
;;;266    
;;;267      // Check PLL reference clock frequency is within spec.
;;;268      ref_freq = crystal_val / prdiv_val;
;;;269      if ((ref_freq < 2000000) || (ref_freq > 4000000)) {return 0x43;}
;;;270    
;;;271      // Check PLL output frequency is within spec.
;;;272      pll_freq = (crystal_val / prdiv_val) * vdiv_val;
;;;273      if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
;;;274      
;;;275      // First move to PBE mode so that the PLL frequency can be safely changed.
;;;276      // As we are running from the PLL by default the PLL and external clock settings are valid
;;;277      // To move to PBE from PEE simply requires the switching of the CLKS mux to select the ext clock 
;;;278      // As CLKS is already 0 the CLKS value can simply be OR'ed into the register 
;;;279      MCG_C1 |= MCG_C1_CLKS(2); // switch CLKS mux to select external reference clock as MCG_OUT
;;;280      
;;;281      // Wait for clock status bits to update 
;;;282      for (i = 0 ; i < 2000 ; i++)
;;;283      {
;;;284        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST shows EXT CLK slected before loop finishes
;;;285      }
;;;286      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is really selected and return with error if not
;;;287    
;;;288      // Now in PBE mode 
;;;289      // System is clocked off the external clock. 
;;;290      // Now update the PLL settings and wait for the PLL to re-lock
;;;291      // Configure MCG_C5
;;;292      temp_reg = MCG_C5;
;;;293      temp_reg &= ~MCG_C5_PRDIV0_MASK;
;;;294      temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
;;;295      MCG_C5 = temp_reg;
;;;296    
;;;297      // Configure MCG_C6
;;;298      // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk
;;;299      // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
;;;300      temp_reg = MCG_C6; // store present C6 value
;;;301      temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
;;;302      temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
;;;303      MCG_C6 = temp_reg; // update MCG_C6
;;;304    
;;;305      // wait for PLLST status bit to set
;;;306      for (i = 0 ; i < 2000 ; i++)
;;;307      {
;;;308        if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
;;;309      }
;;;310      if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if not set
;;;311    
;;;312      // Wait for LOCK bit to set
;;;313      for (i = 0 ; i < 4000 ; i++)
;;;314      {
;;;315        if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
;;;316      }
;;;317      if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if not set
;;;318    
;;;319      // Change CLKS mux to now select the PLL output
;;;320      MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
;;;321    
;;;322      // Wait for clock status bits to update
;;;323      for (i = 0 ; i < 2000 ; i++)
;;;324      {
;;;325        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST = 3 before loop finishes
;;;326      }
;;;327      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set correctly and return with error if not
;;;328    
;;;329      // Now in PEE
;;;330      // Use actual PLL settings to calculate PLL frequency
;;;331      prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
;;;332      vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
;;;333      
;;;334      return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
;;;335    } // new_pll_freq
000310  b007              ADD      sp,sp,#0x1c
000312  bdf0              POP      {r4-r7,pc}
                  |L1.788|
000314  2f01              CMP      r7,#1                 ;264
000316  db01              BLT      |L1.796|
000318  2f19              CMP      r7,#0x19              ;264
00031a  dd01              BLE      |L1.800|
                  |L1.796|
00031c  2041              MOVS     r0,#0x41              ;264
00031e  e7f7              B        |L1.784|
                  |L1.800|
000320  2e18              CMP      r6,#0x18              ;265
000322  db01              BLT      |L1.808|
000324  2e32              CMP      r6,#0x32              ;265
000326  dd01              BLE      |L1.812|
                  |L1.808|
000328  2042              MOVS     r0,#0x42              ;265
00032a  e7f1              B        |L1.784|
                  |L1.812|
00032c  4639              MOV      r1,r7                 ;268
00032e  9804              LDR      r0,[sp,#0x10]         ;268
000330  f7fffffe          BL       __aeabi_idivmod
000334  9001              STR      r0,[sp,#4]            ;268
000336  4930              LDR      r1,|L1.1016|
000338  9801              LDR      r0,[sp,#4]            ;269
00033a  4288              CMP      r0,r1                 ;269
00033c  db03              BLT      |L1.838|
00033e  0049              LSLS     r1,r1,#1              ;269
000340  9801              LDR      r0,[sp,#4]            ;269
000342  4288              CMP      r0,r1                 ;269
000344  dd01              BLE      |L1.842|
                  |L1.838|
000346  2043              MOVS     r0,#0x43              ;269
000348  e7e2              B        |L1.784|
                  |L1.842|
00034a  4639              MOV      r1,r7                 ;272
00034c  9804              LDR      r0,[sp,#0x10]         ;272
00034e  f7fffffe          BL       __aeabi_idivmod
000352  4370              MULS     r0,r6,r0              ;272
000354  9000              STR      r0,[sp,#0]            ;272
000356  4929              LDR      r1,|L1.1020|
000358  9800              LDR      r0,[sp,#0]            ;273
00035a  4288              CMP      r0,r1                 ;273
00035c  db03              BLT      |L1.870|
00035e  4928              LDR      r1,|L1.1024|
000360  9800              LDR      r0,[sp,#0]            ;273
000362  4288              CMP      r0,r1                 ;273
000364  dd01              BLE      |L1.874|
                  |L1.870|
000366  2045              MOVS     r0,#0x45              ;273
000368  e7d2              B        |L1.784|
                  |L1.874|
00036a  481f              LDR      r0,|L1.1000|
00036c  7800              LDRB     r0,[r0,#0]            ;279
00036e  2180              MOVS     r1,#0x80              ;279
000370  4308              ORRS     r0,r0,r1              ;279
000372  491d              LDR      r1,|L1.1000|
000374  7008              STRB     r0,[r1,#0]            ;279
000376  2400              MOVS     r4,#0                 ;282
000378  e009              B        |L1.910|
                  |L1.890|
00037a  481b              LDR      r0,|L1.1000|
00037c  7980              LDRB     r0,[r0,#6]            ;284
00037e  210c              MOVS     r1,#0xc               ;284
000380  4008              ANDS     r0,r0,r1              ;284
000382  0880              LSRS     r0,r0,#2              ;284
000384  2802              CMP      r0,#2                 ;284
000386  d100              BNE      |L1.906|
000388  e005              B        |L1.918|
                  |L1.906|
00038a  1c60              ADDS     r0,r4,#1              ;282
00038c  b204              SXTH     r4,r0                 ;282
                  |L1.910|
00038e  207d              MOVS     r0,#0x7d              ;282
000390  0100              LSLS     r0,r0,#4              ;282
000392  4284              CMP      r4,r0                 ;282
000394  dbf1              BLT      |L1.890|
                  |L1.918|
000396  bf00              NOP                            ;284
000398  4813              LDR      r0,|L1.1000|
00039a  7980              LDRB     r0,[r0,#6]            ;286
00039c  210c              MOVS     r1,#0xc               ;286
00039e  4008              ANDS     r0,r0,r1              ;286
0003a0  0880              LSRS     r0,r0,#2              ;286
0003a2  2802              CMP      r0,#2                 ;286
0003a4  d001              BEQ      |L1.938|
0003a6  201a              MOVS     r0,#0x1a              ;286
0003a8  e7b2              B        |L1.784|
                  |L1.938|
0003aa  480f              LDR      r0,|L1.1000|
0003ac  7905              LDRB     r5,[r0,#4]            ;292
0003ae  096d              LSRS     r5,r5,#5              ;293
0003b0  016d              LSLS     r5,r5,#5              ;293
0003b2  1e78              SUBS     r0,r7,#1              ;294
0003b4  06c0              LSLS     r0,r0,#27             ;294
0003b6  0ec0              LSRS     r0,r0,#27             ;294
0003b8  4305              ORRS     r5,r5,r0              ;294
0003ba  480b              LDR      r0,|L1.1000|
0003bc  7105              STRB     r5,[r0,#4]            ;295
0003be  7945              LDRB     r5,[r0,#5]            ;300
0003c0  096d              LSRS     r5,r5,#5              ;301
0003c2  016d              LSLS     r5,r5,#5              ;301
0003c4  4630              MOV      r0,r6                 ;302
0003c6  3818              SUBS     r0,r0,#0x18           ;302
0003c8  06c0              LSLS     r0,r0,#27             ;302
0003ca  0ec0              LSRS     r0,r0,#27             ;302
0003cc  2140              MOVS     r1,#0x40              ;302
0003ce  4308              ORRS     r0,r0,r1              ;302
0003d0  4305              ORRS     r5,r5,r0              ;302
0003d2  4805              LDR      r0,|L1.1000|
0003d4  7145              STRB     r5,[r0,#5]            ;303
0003d6  2400              MOVS     r4,#0                 ;306
0003d8  e024              B        |L1.1060|
                  |L1.986|
0003da  4803              LDR      r0,|L1.1000|
0003dc  7980              LDRB     r0,[r0,#6]            ;308
0003de  2120              MOVS     r1,#0x20              ;308
0003e0  4008              ANDS     r0,r0,r1              ;308
0003e2  2800              CMP      r0,#0                 ;308
0003e4  d01c              BEQ      |L1.1056|
0003e6  e021              B        |L1.1068|
                  |L1.1000|
                          DCD      0x40064000
                  |L1.1004|
                          DCD      0x02faf080
                  |L1.1008|
                          DCD      0x002dc6c0
                  |L1.1012|
                          DCD      0x01e84800
                  |L1.1016|
                          DCD      0x001e8480
                  |L1.1020|
                          DCD      0x02dc6c00
                  |L1.1024|
                          DCD      0x05f5e100
                  |L1.1028|
                          DCD      0x007a1200
                  |L1.1032|
                          DCD      0x001312d0
                  |L1.1036|
                          DCD      0x002625a0
                  |L1.1040|
                          DCD      0x004c4b40
                  |L1.1044|
                          DCD      0x00989680
                  |L1.1048|
                          DCD      0x01312d00
                  |L1.1052|
                          DCD      0x00004e20
                  |L1.1056|
000420  1c60              ADDS     r0,r4,#1              ;306
000422  b204              SXTH     r4,r0                 ;306
                  |L1.1060|
000424  207d              MOVS     r0,#0x7d              ;306
000426  0100              LSLS     r0,r0,#4              ;306
000428  4284              CMP      r4,r0                 ;306
00042a  dbd6              BLT      |L1.986|
                  |L1.1068|
00042c  bf00              NOP                            ;308
00042e  48fe              LDR      r0,|L1.2088|
000430  7980              LDRB     r0,[r0,#6]            ;310
000432  2120              MOVS     r1,#0x20              ;310
000434  4008              ANDS     r0,r0,r1              ;310
000436  2800              CMP      r0,#0                 ;310
000438  d101              BNE      |L1.1086|
00043a  2016              MOVS     r0,#0x16              ;310
00043c  e768              B        |L1.784|
                  |L1.1086|
00043e  2400              MOVS     r4,#0                 ;313
000440  e008              B        |L1.1108|
                  |L1.1090|
000442  48f9              LDR      r0,|L1.2088|
000444  7980              LDRB     r0,[r0,#6]            ;315
000446  2140              MOVS     r1,#0x40              ;315
000448  4008              ANDS     r0,r0,r1              ;315
00044a  2800              CMP      r0,#0                 ;315
00044c  d000              BEQ      |L1.1104|
00044e  e005              B        |L1.1116|
                  |L1.1104|
000450  1c60              ADDS     r0,r4,#1              ;313
000452  b204              SXTH     r4,r0                 ;313
                  |L1.1108|
000454  207d              MOVS     r0,#0x7d              ;313
000456  0140              LSLS     r0,r0,#5              ;313
000458  4284              CMP      r4,r0                 ;313
00045a  dbf2              BLT      |L1.1090|
                  |L1.1116|
00045c  bf00              NOP                            ;315
00045e  48f2              LDR      r0,|L1.2088|
000460  7980              LDRB     r0,[r0,#6]            ;317
000462  2140              MOVS     r1,#0x40              ;317
000464  4008              ANDS     r0,r0,r1              ;317
000466  2800              CMP      r0,#0                 ;317
000468  d101              BNE      |L1.1134|
00046a  2044              MOVS     r0,#0x44              ;317
00046c  e750              B        |L1.784|
                  |L1.1134|
00046e  48ee              LDR      r0,|L1.2088|
000470  7800              LDRB     r0,[r0,#0]            ;320
000472  21c0              MOVS     r1,#0xc0              ;320
000474  4388              BICS     r0,r0,r1              ;320
000476  49ec              LDR      r1,|L1.2088|
000478  7008              STRB     r0,[r1,#0]            ;320
00047a  2400              MOVS     r4,#0                 ;323
00047c  e009              B        |L1.1170|
                  |L1.1150|
00047e  48ea              LDR      r0,|L1.2088|
000480  7980              LDRB     r0,[r0,#6]            ;325
000482  210c              MOVS     r1,#0xc               ;325
000484  4008              ANDS     r0,r0,r1              ;325
000486  0880              LSRS     r0,r0,#2              ;325
000488  2803              CMP      r0,#3                 ;325
00048a  d100              BNE      |L1.1166|
00048c  e005              B        |L1.1178|
                  |L1.1166|
00048e  1c60              ADDS     r0,r4,#1              ;323
000490  b204              SXTH     r4,r0                 ;323
                  |L1.1170|
000492  207d              MOVS     r0,#0x7d              ;323
000494  0100              LSLS     r0,r0,#4              ;323
000496  4284              CMP      r4,r0                 ;323
000498  dbf1              BLT      |L1.1150|
                  |L1.1178|
00049a  bf00              NOP                            ;325
00049c  48e2              LDR      r0,|L1.2088|
00049e  7980              LDRB     r0,[r0,#6]            ;327
0004a0  210c              MOVS     r1,#0xc               ;327
0004a2  4008              ANDS     r0,r0,r1              ;327
0004a4  0880              LSRS     r0,r0,#2              ;327
0004a6  2803              CMP      r0,#3                 ;327
0004a8  d001              BEQ      |L1.1198|
0004aa  201b              MOVS     r0,#0x1b              ;327
0004ac  e730              B        |L1.784|
                  |L1.1198|
0004ae  48de              LDR      r0,|L1.2088|
0004b0  7900              LDRB     r0,[r0,#4]            ;331
0004b2  06c0              LSLS     r0,r0,#27             ;331
0004b4  0ec0              LSRS     r0,r0,#27             ;331
0004b6  1c40              ADDS     r0,r0,#1              ;331
0004b8  9003              STR      r0,[sp,#0xc]          ;331
0004ba  48db              LDR      r0,|L1.2088|
0004bc  7940              LDRB     r0,[r0,#5]            ;332
0004be  06c0              LSLS     r0,r0,#27             ;332
0004c0  0ec0              LSRS     r0,r0,#27             ;332
0004c2  3018              ADDS     r0,r0,#0x18           ;332
0004c4  9002              STR      r0,[sp,#8]            ;332
0004c6  9903              LDR      r1,[sp,#0xc]          ;334
0004c8  9804              LDR      r0,[sp,#0x10]         ;334
0004ca  f7fffffe          BL       __aeabi_idivmod
0004ce  9902              LDR      r1,[sp,#8]            ;334
0004d0  4348              MULS     r0,r1,r0              ;334
0004d2  e71d              B        |L1.784|
;;;336    
                          ENDP

                  pee_pbe PROC
;;;339    
;;;340    int pee_pbe(int crystal_val)
0004d4  4602              MOV      r2,r0
;;;341    {
;;;342      short i;
;;;343      
;;;344    // Check MCG is in PEE mode
;;;345      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted PLL output
0004d6  48d4              LDR      r0,|L1.2088|
0004d8  7980              LDRB     r0,[r0,#6]
0004da  230c              MOVS     r3,#0xc
0004dc  4018              ANDS     r0,r0,r3
0004de  0880              LSRS     r0,r0,#2
0004e0  2803              CMP      r0,#3
0004e2  d10b              BNE      |L1.1276|
0004e4  48d0              LDR      r0,|L1.2088|
0004e6  7980              LDRB     r0,[r0,#6]
0004e8  2310              MOVS     r3,#0x10
0004ea  4018              ANDS     r0,r0,r3
0004ec  2800              CMP      r0,#0
0004ee  d105              BNE      |L1.1276|
0004f0  48cd              LDR      r0,|L1.2088|
0004f2  7980              LDRB     r0,[r0,#6]
0004f4  2320              MOVS     r3,#0x20
0004f6  4018              ANDS     r0,r0,r3
0004f8  2800              CMP      r0,#0
0004fa  d101              BNE      |L1.1280|
                  |L1.1276|
;;;346          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;347          (MCG_S & MCG_S_PLLST_MASK)))                                    // check PLLS mux has selected PLL 
;;;348      {
;;;349        return 0x8;                                                       // return error code
0004fc  2008              MOVS     r0,#8
                  |L1.1278|
;;;350      } 
;;;351      
;;;352    // As we are running from the PLL by default the PLL and external clock settings are valid
;;;353    // To move to PBE from PEE simply requires the switching of the CLKS mux to select the ext clock 
;;;354    // As CLKS is already 0 the CLKS value can simply be OR'ed into the register 
;;;355      MCG_C1 |= MCG_C1_CLKS(2); // switch CLKS mux to select external reference clock as MCG_OUT
;;;356      
;;;357    // Wait for clock status bits to update 
;;;358      for (i = 0 ; i < 2000 ; i++)
;;;359      {
;;;360        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST shows EXT CLK slected before loop finishes
;;;361      }
;;;362      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is really selected and return with error if not
;;;363    
;;;364    // Now in PBE mode  
;;;365      return crystal_val; // MCGOUT frequency equals external clock frequency
;;;366    } // pee_pbe
0004fe  4770              BX       lr
                  |L1.1280|
000500  48c9              LDR      r0,|L1.2088|
000502  7800              LDRB     r0,[r0,#0]            ;355
000504  2380              MOVS     r3,#0x80              ;355
000506  4318              ORRS     r0,r0,r3              ;355
000508  4bc7              LDR      r3,|L1.2088|
00050a  7018              STRB     r0,[r3,#0]            ;355
00050c  2100              MOVS     r1,#0                 ;358
00050e  e009              B        |L1.1316|
                  |L1.1296|
000510  48c5              LDR      r0,|L1.2088|
000512  7980              LDRB     r0,[r0,#6]            ;360
000514  230c              MOVS     r3,#0xc               ;360
000516  4018              ANDS     r0,r0,r3              ;360
000518  0880              LSRS     r0,r0,#2              ;360
00051a  2802              CMP      r0,#2                 ;360
00051c  d100              BNE      |L1.1312|
00051e  e005              B        |L1.1324|
                  |L1.1312|
000520  1c48              ADDS     r0,r1,#1              ;358
000522  b201              SXTH     r1,r0                 ;358
                  |L1.1316|
000524  207d              MOVS     r0,#0x7d              ;358
000526  0100              LSLS     r0,r0,#4              ;358
000528  4281              CMP      r1,r0                 ;358
00052a  dbf1              BLT      |L1.1296|
                  |L1.1324|
00052c  bf00              NOP                            ;360
00052e  48be              LDR      r0,|L1.2088|
000530  7980              LDRB     r0,[r0,#6]            ;362
000532  230c              MOVS     r3,#0xc               ;362
000534  4018              ANDS     r0,r0,r3              ;362
000536  0880              LSRS     r0,r0,#2              ;362
000538  2802              CMP      r0,#2                 ;362
00053a  d001              BEQ      |L1.1344|
00053c  201a              MOVS     r0,#0x1a              ;362
00053e  e7de              B        |L1.1278|
                  |L1.1344|
000540  4610              MOV      r0,r2                 ;365
000542  e7dc              B        |L1.1278|
;;;367    
                          ENDP

                  pbe_pee PROC
;;;368    
;;;369    int pbe_pee(int crystal_val)
000544  b5f8              PUSH     {r3-r7,lr}
;;;370    {
000546  4607              MOV      r7,r0
;;;371      unsigned char prdiv, vdiv;
;;;372      short i;
;;;373    
;;;374      // Check MCG is in PBE mode
;;;375      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
000548  48b7              LDR      r0,|L1.2088|
00054a  7980              LDRB     r0,[r0,#6]
00054c  210c              MOVS     r1,#0xc
00054e  4008              ANDS     r0,r0,r1
000550  0880              LSRS     r0,r0,#2
000552  2802              CMP      r0,#2
000554  d111              BNE      |L1.1402|
000556  48b4              LDR      r0,|L1.2088|
000558  7980              LDRB     r0,[r0,#6]
00055a  2110              MOVS     r1,#0x10
00055c  4008              ANDS     r0,r0,r1
00055e  2800              CMP      r0,#0
000560  d10b              BNE      |L1.1402|
000562  48b1              LDR      r0,|L1.2088|
000564  7980              LDRB     r0,[r0,#6]
000566  2120              MOVS     r1,#0x20
000568  4008              ANDS     r0,r0,r1
00056a  2800              CMP      r0,#0
00056c  d005              BEQ      |L1.1402|
00056e  48ae              LDR      r0,|L1.2088|
000570  7840              LDRB     r0,[r0,#1]
000572  2102              MOVS     r1,#2
000574  4008              ANDS     r0,r0,r1
000576  2800              CMP      r0,#0
000578  d001              BEQ      |L1.1406|
                  |L1.1402|
;;;376          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;377          (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selected PLL
;;;378          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is not set
;;;379      {
;;;380        return 0x7;                                                       // return error code
00057a  2007              MOVS     r0,#7
                  |L1.1404|
;;;381      }
;;;382    
;;;383      // As the PLL settings have already been checked when PBE mode was enterred they are not checked here
;;;384    
;;;385      // Check the PLL state before transitioning to PEE mode
;;;386      
;;;387      // Check LOCK bit is set before transitioning MCG to PLL output (already checked in fbe_pbe but good practice
;;;388      // to re-check before switch to use PLL)
;;;389      for (i = 0 ; i < 2000 ; i++)
;;;390      {
;;;391        if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
;;;392      }
;;;393      if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if not set
;;;394      // Use actual PLL settings to calculate PLL frequency
;;;395      prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
;;;396      vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
;;;397      
;;;398      MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
;;;399    
;;;400      // Wait for clock status bits to update
;;;401      for (i = 0 ; i < 2000 ; i++)
;;;402      {
;;;403        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST = 3 before loop finishes
;;;404      }
;;;405      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set correctly and return with error if not
;;;406    
;;;407      // Now in PEE
;;;408      return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
;;;409      
;;;410    }  // pbe_pee
00057c  bdf8              POP      {r3-r7,pc}
                  |L1.1406|
00057e  2400              MOVS     r4,#0                 ;389
000580  e008              B        |L1.1428|
                  |L1.1410|
000582  48a9              LDR      r0,|L1.2088|
000584  7980              LDRB     r0,[r0,#6]            ;391
000586  2140              MOVS     r1,#0x40              ;391
000588  4008              ANDS     r0,r0,r1              ;391
00058a  2800              CMP      r0,#0                 ;391
00058c  d000              BEQ      |L1.1424|
00058e  e005              B        |L1.1436|
                  |L1.1424|
000590  1c60              ADDS     r0,r4,#1              ;389
000592  b204              SXTH     r4,r0                 ;389
                  |L1.1428|
000594  207d              MOVS     r0,#0x7d              ;389
000596  0100              LSLS     r0,r0,#4              ;389
000598  4284              CMP      r4,r0                 ;389
00059a  dbf2              BLT      |L1.1410|
                  |L1.1436|
00059c  bf00              NOP                            ;391
00059e  48a2              LDR      r0,|L1.2088|
0005a0  7980              LDRB     r0,[r0,#6]            ;393
0005a2  2140              MOVS     r1,#0x40              ;393
0005a4  4008              ANDS     r0,r0,r1              ;393
0005a6  2800              CMP      r0,#0                 ;393
0005a8  d101              BNE      |L1.1454|
0005aa  2044              MOVS     r0,#0x44              ;393
0005ac  e7e6              B        |L1.1404|
                  |L1.1454|
0005ae  489e              LDR      r0,|L1.2088|
0005b0  7900              LDRB     r0,[r0,#4]            ;395
0005b2  06c0              LSLS     r0,r0,#27             ;395
0005b4  0ec0              LSRS     r0,r0,#27             ;395
0005b6  1c45              ADDS     r5,r0,#1              ;395
0005b8  489b              LDR      r0,|L1.2088|
0005ba  7940              LDRB     r0,[r0,#5]            ;396
0005bc  06c0              LSLS     r0,r0,#27             ;396
0005be  0ec0              LSRS     r0,r0,#27             ;396
0005c0  4606              MOV      r6,r0                 ;396
0005c2  3618              ADDS     r6,r6,#0x18           ;396
0005c4  4898              LDR      r0,|L1.2088|
0005c6  7800              LDRB     r0,[r0,#0]            ;398
0005c8  21c0              MOVS     r1,#0xc0              ;398
0005ca  4388              BICS     r0,r0,r1              ;398
0005cc  4996              LDR      r1,|L1.2088|
0005ce  7008              STRB     r0,[r1,#0]            ;398
0005d0  2400              MOVS     r4,#0                 ;401
0005d2  e009              B        |L1.1512|
                  |L1.1492|
0005d4  4894              LDR      r0,|L1.2088|
0005d6  7980              LDRB     r0,[r0,#6]            ;403
0005d8  210c              MOVS     r1,#0xc               ;403
0005da  4008              ANDS     r0,r0,r1              ;403
0005dc  0880              LSRS     r0,r0,#2              ;403
0005de  2803              CMP      r0,#3                 ;403
0005e0  d100              BNE      |L1.1508|
0005e2  e005              B        |L1.1520|
                  |L1.1508|
0005e4  1c60              ADDS     r0,r4,#1              ;401
0005e6  b204              SXTH     r4,r0                 ;401
                  |L1.1512|
0005e8  207d              MOVS     r0,#0x7d              ;401
0005ea  0100              LSLS     r0,r0,#4              ;401
0005ec  4284              CMP      r4,r0                 ;401
0005ee  dbf1              BLT      |L1.1492|
                  |L1.1520|
0005f0  bf00              NOP                            ;403
0005f2  488d              LDR      r0,|L1.2088|
0005f4  7980              LDRB     r0,[r0,#6]            ;405
0005f6  210c              MOVS     r1,#0xc               ;405
0005f8  4008              ANDS     r0,r0,r1              ;405
0005fa  0880              LSRS     r0,r0,#2              ;405
0005fc  2803              CMP      r0,#3                 ;405
0005fe  d001              BEQ      |L1.1540|
000600  201b              MOVS     r0,#0x1b              ;405
000602  e7bb              B        |L1.1404|
                  |L1.1540|
000604  4629              MOV      r1,r5                 ;408
000606  4638              MOV      r0,r7                 ;408
000608  f7fffffe          BL       __aeabi_idivmod
00060c  4370              MULS     r0,r6,r0              ;408
00060e  e7b5              B        |L1.1404|
;;;411    
                          ENDP

                  pbe_fbe PROC
;;;412    
;;;413    int pbe_fbe(int crystal_val)
000610  4602              MOV      r2,r0
;;;414    {
;;;415      short i;
;;;416      
;;;417    // Check MCG is in PBE mode
;;;418      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
000612  4885              LDR      r0,|L1.2088|
000614  7980              LDRB     r0,[r0,#6]
000616  230c              MOVS     r3,#0xc
000618  4018              ANDS     r0,r0,r3
00061a  0880              LSRS     r0,r0,#2
00061c  2802              CMP      r0,#2
00061e  d111              BNE      |L1.1604|
000620  4881              LDR      r0,|L1.2088|
000622  7980              LDRB     r0,[r0,#6]
000624  2310              MOVS     r3,#0x10
000626  4018              ANDS     r0,r0,r3
000628  2800              CMP      r0,#0
00062a  d10b              BNE      |L1.1604|
00062c  487e              LDR      r0,|L1.2088|
00062e  7980              LDRB     r0,[r0,#6]
000630  2320              MOVS     r3,#0x20
000632  4018              ANDS     r0,r0,r3
000634  2800              CMP      r0,#0
000636  d005              BEQ      |L1.1604|
000638  487b              LDR      r0,|L1.2088|
00063a  7840              LDRB     r0,[r0,#1]
00063c  2302              MOVS     r3,#2
00063e  4018              ANDS     r0,r0,r3
000640  2800              CMP      r0,#0
000642  d001              BEQ      |L1.1608|
                  |L1.1604|
;;;419          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;420          (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selected PLL
;;;421          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is not set   
;;;422      {
;;;423        return 0x7;                                                       // return error code
000644  2007              MOVS     r0,#7
                  |L1.1606|
;;;424      }
;;;425    
;;;426    // As we are running from the ext clock, by default the external clock settings are valid
;;;427    // To move to FBE from PBE simply requires the switching of the PLLS mux to disable the PLL 
;;;428      
;;;429      MCG_C6 &= ~MCG_C6_PLLS_MASK; // clear PLLS to disable PLL, still clocked from ext ref clk
;;;430      
;;;431    // wait for PLLST status bit to set
;;;432      for (i = 0 ; i < 2000 ; i++)
;;;433      {
;;;434        if (!(MCG_S & MCG_S_PLLST_MASK)) break; // jump out early if PLLST clears before loop finishes
;;;435      }
;;;436      if (MCG_S & MCG_S_PLLST_MASK) return 0x15; // check bit is really clear and return with error if not clear  
;;;437    
;;;438    // Now in FBE mode  
;;;439      return crystal_val; // MCGOUT frequency equals external clock frequency 
;;;440    } // pbe_fbe
000646  4770              BX       lr
                  |L1.1608|
000648  4877              LDR      r0,|L1.2088|
00064a  7940              LDRB     r0,[r0,#5]            ;429
00064c  2340              MOVS     r3,#0x40              ;429
00064e  4398              BICS     r0,r0,r3              ;429
000650  4b75              LDR      r3,|L1.2088|
000652  7158              STRB     r0,[r3,#5]            ;429
000654  2100              MOVS     r1,#0                 ;432
000656  e008              B        |L1.1642|
                  |L1.1624|
000658  4873              LDR      r0,|L1.2088|
00065a  7980              LDRB     r0,[r0,#6]            ;434
00065c  2320              MOVS     r3,#0x20              ;434
00065e  4018              ANDS     r0,r0,r3              ;434
000660  2800              CMP      r0,#0                 ;434
000662  d100              BNE      |L1.1638|
000664  e005              B        |L1.1650|
                  |L1.1638|
000666  1c48              ADDS     r0,r1,#1              ;432
000668  b201              SXTH     r1,r0                 ;432
                  |L1.1642|
00066a  207d              MOVS     r0,#0x7d              ;432
00066c  0100              LSLS     r0,r0,#4              ;432
00066e  4281              CMP      r1,r0                 ;432
000670  dbf2              BLT      |L1.1624|
                  |L1.1650|
000672  bf00              NOP                            ;434
000674  486c              LDR      r0,|L1.2088|
000676  7980              LDRB     r0,[r0,#6]            ;436
000678  2320              MOVS     r3,#0x20              ;436
00067a  4018              ANDS     r0,r0,r3              ;436
00067c  2800              CMP      r0,#0                 ;436
00067e  d001              BEQ      |L1.1668|
000680  2015              MOVS     r0,#0x15              ;436
000682  e7e0              B        |L1.1606|
                  |L1.1668|
000684  4610              MOV      r0,r2                 ;439
000686  e7de              B        |L1.1606|
;;;441    
                          ENDP

                  fbe_pbe PROC
;;;459     */
;;;460    int fbe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val)
000688  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;461    {
00068a  b082              SUB      sp,sp,#8
00068c  460f              MOV      r7,r1
00068e  4615              MOV      r5,r2
;;;462      unsigned char temp_reg;
;;;463      short i;
;;;464      int pll_freq;
;;;465      
;;;466    // Check MCG is in FBE mode
;;;467      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
000690  4865              LDR      r0,|L1.2088|
000692  7980              LDRB     r0,[r0,#6]
000694  210c              MOVS     r1,#0xc
000696  4008              ANDS     r0,r0,r1
000698  0880              LSRS     r0,r0,#2
00069a  2802              CMP      r0,#2
00069c  d111              BNE      |L1.1730|
00069e  4862              LDR      r0,|L1.2088|
0006a0  7980              LDRB     r0,[r0,#6]
0006a2  2110              MOVS     r1,#0x10
0006a4  4008              ANDS     r0,r0,r1
0006a6  2800              CMP      r0,#0
0006a8  d10b              BNE      |L1.1730|
0006aa  485f              LDR      r0,|L1.2088|
0006ac  7980              LDRB     r0,[r0,#6]
0006ae  2120              MOVS     r1,#0x20
0006b0  4008              ANDS     r0,r0,r1
0006b2  2800              CMP      r0,#0
0006b4  d105              BNE      |L1.1730|
0006b6  485c              LDR      r0,|L1.2088|
0006b8  7840              LDRB     r0,[r0,#1]
0006ba  2102              MOVS     r1,#2
0006bc  4008              ANDS     r0,r0,r1
0006be  2800              CMP      r0,#0
0006c0  d002              BEQ      |L1.1736|
                  |L1.1730|
;;;468          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;469          (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;470          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is not set   
;;;471      {
;;;472        return 0x4;                                                       // return error code
0006c2  2004              MOVS     r0,#4
                  |L1.1732|
;;;473      }
;;;474      
;;;475    // As the external frequency has already been checked when FBE mode was enterred it is not checked here
;;;476    
;;;477    // Check PLL divider settings are within spec.
;;;478      if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
;;;479      if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;} 
;;;480      
;;;481    // Check PLL reference clock frequency is within spec.
;;;482      if (((crystal_val / prdiv_val) < 2000000) || ((crystal_val / prdiv_val) > 4000000)) {return 0x43;}
;;;483           
;;;484    // Check PLL output frequency is within spec.
;;;485      pll_freq = (crystal_val / prdiv_val) * vdiv_val;
;;;486      if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
;;;487    
;;;488      // Configure MCG_C5
;;;489      // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user code.       
;;;490      temp_reg = MCG_C5;
;;;491      temp_reg &= ~MCG_C5_PRDIV0_MASK;
;;;492      temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
;;;493      MCG_C5 = temp_reg;
;;;494    
;;;495      // Configure MCG_C6
;;;496      // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk 
;;;497      // The clock monitor is not enabled here as it has likely been enabled previously and so the value of CME
;;;498      // is not altered here.
;;;499      // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
;;;500      temp_reg = MCG_C6; // store present C6 value
;;;501      temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
;;;502      temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
;;;503      MCG_C6 = temp_reg; // update MCG_C6
;;;504      
;;;505      // wait for PLLST status bit to set
;;;506      for (i = 0 ; i < 2000 ; i++)
;;;507      {
;;;508        if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
;;;509      }
;;;510      if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if not set
;;;511    
;;;512      // Wait for LOCK bit to set
;;;513      for (i = 0 ; i < 2000 ; i++)
;;;514      {
;;;515        if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
;;;516      }
;;;517      if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if not set
;;;518        
;;;519    // now in PBE 
;;;520      return crystal_val; // MCGOUT frequency equals external clock frequency
;;;521    } // fbe_pbe
0006c4  b005              ADD      sp,sp,#0x14
0006c6  bdf0              POP      {r4-r7,pc}
                  |L1.1736|
0006c8  2f01              CMP      r7,#1                 ;478
0006ca  db01              BLT      |L1.1744|
0006cc  2f19              CMP      r7,#0x19              ;478
0006ce  dd01              BLE      |L1.1748|
                  |L1.1744|
0006d0  2041              MOVS     r0,#0x41              ;478
0006d2  e7f7              B        |L1.1732|
                  |L1.1748|
0006d4  2d18              CMP      r5,#0x18              ;479
0006d6  db01              BLT      |L1.1756|
0006d8  2d32              CMP      r5,#0x32              ;479
0006da  dd01              BLE      |L1.1760|
                  |L1.1756|
0006dc  2042              MOVS     r0,#0x42              ;479
0006de  e7f1              B        |L1.1732|
                  |L1.1760|
0006e0  4639              MOV      r1,r7                 ;482
0006e2  9802              LDR      r0,[sp,#8]            ;482
0006e4  f7fffffe          BL       __aeabi_idivmod
0006e8  4950              LDR      r1,|L1.2092|
0006ea  4288              CMP      r0,r1                 ;482
0006ec  db06              BLT      |L1.1788|
0006ee  4639              MOV      r1,r7                 ;482
0006f0  9802              LDR      r0,[sp,#8]            ;482
0006f2  f7fffffe          BL       __aeabi_idivmod
0006f6  494e              LDR      r1,|L1.2096|
0006f8  4288              CMP      r0,r1                 ;482
0006fa  dd01              BLE      |L1.1792|
                  |L1.1788|
0006fc  2043              MOVS     r0,#0x43              ;482
0006fe  e7e1              B        |L1.1732|
                  |L1.1792|
000700  4639              MOV      r1,r7                 ;485
000702  9802              LDR      r0,[sp,#8]            ;485
000704  f7fffffe          BL       __aeabi_idivmod
000708  4368              MULS     r0,r5,r0              ;485
00070a  9001              STR      r0,[sp,#4]            ;485
00070c  4949              LDR      r1,|L1.2100|
00070e  9801              LDR      r0,[sp,#4]            ;486
000710  4288              CMP      r0,r1                 ;486
000712  db03              BLT      |L1.1820|
000714  4948              LDR      r1,|L1.2104|
000716  9801              LDR      r0,[sp,#4]            ;486
000718  4288              CMP      r0,r1                 ;486
00071a  dd01              BLE      |L1.1824|
                  |L1.1820|
00071c  2045              MOVS     r0,#0x45              ;486
00071e  e7d1              B        |L1.1732|
                  |L1.1824|
000720  4841              LDR      r0,|L1.2088|
000722  7904              LDRB     r4,[r0,#4]            ;490
000724  0964              LSRS     r4,r4,#5              ;491
000726  0164              LSLS     r4,r4,#5              ;491
000728  1e78              SUBS     r0,r7,#1              ;492
00072a  06c0              LSLS     r0,r0,#27             ;492
00072c  0ec0              LSRS     r0,r0,#27             ;492
00072e  4304              ORRS     r4,r4,r0              ;492
000730  483d              LDR      r0,|L1.2088|
000732  7104              STRB     r4,[r0,#4]            ;493
000734  7944              LDRB     r4,[r0,#5]            ;500
000736  0964              LSRS     r4,r4,#5              ;501
000738  0164              LSLS     r4,r4,#5              ;501
00073a  4628              MOV      r0,r5                 ;502
00073c  3818              SUBS     r0,r0,#0x18           ;502
00073e  06c0              LSLS     r0,r0,#27             ;502
000740  0ec0              LSRS     r0,r0,#27             ;502
000742  2140              MOVS     r1,#0x40              ;502
000744  4308              ORRS     r0,r0,r1              ;502
000746  4304              ORRS     r4,r4,r0              ;502
000748  4837              LDR      r0,|L1.2088|
00074a  7144              STRB     r4,[r0,#5]            ;503
00074c  2600              MOVS     r6,#0                 ;506
00074e  e008              B        |L1.1890|
                  |L1.1872|
000750  4835              LDR      r0,|L1.2088|
000752  7980              LDRB     r0,[r0,#6]            ;508
000754  2120              MOVS     r1,#0x20              ;508
000756  4008              ANDS     r0,r0,r1              ;508
000758  2800              CMP      r0,#0                 ;508
00075a  d000              BEQ      |L1.1886|
00075c  e005              B        |L1.1898|
                  |L1.1886|
00075e  1c70              ADDS     r0,r6,#1              ;506
000760  b206              SXTH     r6,r0                 ;506
                  |L1.1890|
000762  207d              MOVS     r0,#0x7d              ;506
000764  0100              LSLS     r0,r0,#4              ;506
000766  4286              CMP      r6,r0                 ;506
000768  dbf2              BLT      |L1.1872|
                  |L1.1898|
00076a  bf00              NOP                            ;508
00076c  482e              LDR      r0,|L1.2088|
00076e  7980              LDRB     r0,[r0,#6]            ;510
000770  2120              MOVS     r1,#0x20              ;510
000772  4008              ANDS     r0,r0,r1              ;510
000774  2800              CMP      r0,#0                 ;510
000776  d101              BNE      |L1.1916|
000778  2016              MOVS     r0,#0x16              ;510
00077a  e7a3              B        |L1.1732|
                  |L1.1916|
00077c  2600              MOVS     r6,#0                 ;513
00077e  e008              B        |L1.1938|
                  |L1.1920|
000780  4829              LDR      r0,|L1.2088|
000782  7980              LDRB     r0,[r0,#6]            ;515
000784  2140              MOVS     r1,#0x40              ;515
000786  4008              ANDS     r0,r0,r1              ;515
000788  2800              CMP      r0,#0                 ;515
00078a  d000              BEQ      |L1.1934|
00078c  e005              B        |L1.1946|
                  |L1.1934|
00078e  1c70              ADDS     r0,r6,#1              ;513
000790  b206              SXTH     r6,r0                 ;513
                  |L1.1938|
000792  207d              MOVS     r0,#0x7d              ;513
000794  0100              LSLS     r0,r0,#4              ;513
000796  4286              CMP      r6,r0                 ;513
000798  dbf2              BLT      |L1.1920|
                  |L1.1946|
00079a  bf00              NOP                            ;515
00079c  4822              LDR      r0,|L1.2088|
00079e  7980              LDRB     r0,[r0,#6]            ;517
0007a0  2140              MOVS     r1,#0x40              ;517
0007a2  4008              ANDS     r0,r0,r1              ;517
0007a4  2800              CMP      r0,#0                 ;517
0007a6  d101              BNE      |L1.1964|
0007a8  2044              MOVS     r0,#0x44              ;517
0007aa  e78b              B        |L1.1732|
                  |L1.1964|
0007ac  9802              LDR      r0,[sp,#8]            ;520
0007ae  e789              B        |L1.1732|
;;;522    
                          ENDP

                  pbe_blpe PROC
;;;523    
;;;524    int pbe_blpe(int crystal_val)
0007b0  4601              MOV      r1,r0
;;;525    {
;;;526    // Check MCG is in PBE mode
;;;527      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
0007b2  481d              LDR      r0,|L1.2088|
0007b4  7980              LDRB     r0,[r0,#6]
0007b6  220c              MOVS     r2,#0xc
0007b8  4010              ANDS     r0,r0,r2
0007ba  0880              LSRS     r0,r0,#2
0007bc  2802              CMP      r0,#2
0007be  d111              BNE      |L1.2020|
0007c0  4819              LDR      r0,|L1.2088|
0007c2  7980              LDRB     r0,[r0,#6]
0007c4  2210              MOVS     r2,#0x10
0007c6  4010              ANDS     r0,r0,r2
0007c8  2800              CMP      r0,#0
0007ca  d10b              BNE      |L1.2020|
0007cc  4816              LDR      r0,|L1.2088|
0007ce  7980              LDRB     r0,[r0,#6]
0007d0  2220              MOVS     r2,#0x20
0007d2  4010              ANDS     r0,r0,r2
0007d4  2800              CMP      r0,#0
0007d6  d005              BEQ      |L1.2020|
0007d8  4813              LDR      r0,|L1.2088|
0007da  7840              LDRB     r0,[r0,#1]
0007dc  2202              MOVS     r2,#2
0007de  4010              ANDS     r0,r0,r2
0007e0  2800              CMP      r0,#0
0007e2  d001              BEQ      |L1.2024|
                  |L1.2020|
;;;528          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;529          (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selected PLL
;;;530          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is not set   
;;;531      {
;;;532        return 0x7;                                                       // return error code
0007e4  2007              MOVS     r0,#7
                  |L1.2022|
;;;533      }
;;;534      
;;;535    // To enter BLPE mode the LP bit must be set, disabling the PLL  
;;;536      MCG_C2 |= MCG_C2_LP_MASK;
;;;537      
;;;538    // Now in BLPE mode
;;;539      return crystal_val;  
;;;540    } // pbe_blpe
0007e6  4770              BX       lr
                  |L1.2024|
0007e8  480f              LDR      r0,|L1.2088|
0007ea  7840              LDRB     r0,[r0,#1]            ;536
0007ec  2202              MOVS     r2,#2                 ;536
0007ee  4310              ORRS     r0,r0,r2              ;536
0007f0  4a0d              LDR      r2,|L1.2088|
0007f2  7050              STRB     r0,[r2,#1]            ;536
0007f4  4608              MOV      r0,r1                 ;539
0007f6  e7f6              B        |L1.2022|
;;;541    
                          ENDP

                  blpe_pbe PROC
;;;547    // ************************************************************************************************
;;;548    int blpe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val)
0007f8  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;549    {
0007fa  460e              MOV      r6,r1
0007fc  4617              MOV      r7,r2
;;;550      unsigned char temp_reg;
;;;551      short i;
;;;552      
;;;553    // Check MCG is in BLPE mode
;;;554      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
0007fe  480a              LDR      r0,|L1.2088|
000800  7980              LDRB     r0,[r0,#6]
000802  210c              MOVS     r1,#0xc
000804  4008              ANDS     r0,r0,r1
000806  0880              LSRS     r0,r0,#2
000808  2802              CMP      r0,#2
00080a  d10b              BNE      |L1.2084|
00080c  4806              LDR      r0,|L1.2088|
00080e  7980              LDRB     r0,[r0,#6]
000810  2110              MOVS     r1,#0x10
000812  4008              ANDS     r0,r0,r1
000814  2800              CMP      r0,#0
000816  d105              BNE      |L1.2084|
000818  4803              LDR      r0,|L1.2088|
00081a  7840              LDRB     r0,[r0,#1]
00081c  2102              MOVS     r1,#2
00081e  4008              ANDS     r0,r0,r1
000820  2800              CMP      r0,#0
000822  d10b              BNE      |L1.2108|
                  |L1.2084|
;;;555          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;556          (MCG_C2 & MCG_C2_LP_MASK)))                                     // check MCG_C2[LP] bit is set   
;;;557      {
;;;558        return 0x6;                                                       // return error code
000824  2006              MOVS     r0,#6
                  |L1.2086|
;;;559      }
;;;560      
;;;561    // As the external frequency has already been checked when FBE mode was enterred it is not checked here
;;;562    
;;;563    // Check PLL divider settings are within spec.
;;;564      if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
;;;565      if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;} 
;;;566      
;;;567    // Check PLL reference clock frequency is within spec.
;;;568      if (((crystal_val / prdiv_val) < 2000000) || ((crystal_val / prdiv_val) > 4000000)) {return 0x43;}
;;;569           
;;;570    // If PRDIV, VDIV and the PLL ref clock are in spec. then the PLL frequency is within spec.
;;;571    
;;;572    // Configure MCG_C5
;;;573    // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user code.       
;;;574      temp_reg = MCG_C5;
;;;575      temp_reg &= ~MCG_C5_PRDIV0_MASK;
;;;576      temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
;;;577      MCG_C5 = temp_reg;
;;;578    
;;;579    // Configure MCG_C6
;;;580    // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk 
;;;581    // The clock monitor is not enabled here as it has likely been enabled previously and so the value of CME
;;;582    // is not altered here.
;;;583    // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
;;;584      temp_reg = MCG_C6; // store present C6 value
;;;585      temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
;;;586      temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
;;;587      MCG_C6 = temp_reg; // update MCG_C6
;;;588      
;;;589    // Now that PLL is configured, LP is cleared to enable the PLL
;;;590      MCG_C2 &= ~MCG_C2_LP_MASK;
;;;591      
;;;592    // wait for PLLST status bit to set
;;;593      for (i = 0 ; i < 2000 ; i++)
;;;594      {
;;;595        if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
;;;596      }
;;;597      if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if not set
;;;598    
;;;599    // Wait for LOCK bit to set
;;;600      for (i = 0 ; i < 2000 ; i++)
;;;601      {
;;;602        if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
;;;603      }
;;;604      if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if not set
;;;605    
;;;606    // now in PBE 
;;;607      return crystal_val; // MCGOUT frequency equals external clock frequency  
;;;608    } // blpe_pbe
000826  bdfe              POP      {r1-r7,pc}
                  |L1.2088|
                          DCD      0x40064000
                  |L1.2092|
                          DCD      0x001e8480
                  |L1.2096|
                          DCD      0x003d0900
                  |L1.2100|
                          DCD      0x02dc6c00
                  |L1.2104|
                          DCD      0x05f5e100
                  |L1.2108|
00083c  2e01              CMP      r6,#1                 ;564
00083e  db01              BLT      |L1.2116|
000840  2e19              CMP      r6,#0x19              ;564
000842  dd01              BLE      |L1.2120|
                  |L1.2116|
000844  2041              MOVS     r0,#0x41              ;564
000846  e7ee              B        |L1.2086|
                  |L1.2120|
000848  2f18              CMP      r7,#0x18              ;565
00084a  db01              BLT      |L1.2128|
00084c  2f32              CMP      r7,#0x32              ;565
00084e  dd01              BLE      |L1.2132|
                  |L1.2128|
000850  2042              MOVS     r0,#0x42              ;565
000852  e7e8              B        |L1.2086|
                  |L1.2132|
000854  4631              MOV      r1,r6                 ;568
000856  9800              LDR      r0,[sp,#0]            ;568
000858  f7fffffe          BL       __aeabi_idivmod
00085c  49f7              LDR      r1,|L1.3132|
00085e  4288              CMP      r0,r1                 ;568
000860  db06              BLT      |L1.2160|
000862  4631              MOV      r1,r6                 ;568
000864  9800              LDR      r0,[sp,#0]            ;568
000866  f7fffffe          BL       __aeabi_idivmod
00086a  49f5              LDR      r1,|L1.3136|
00086c  4288              CMP      r0,r1                 ;568
00086e  dd01              BLE      |L1.2164|
                  |L1.2160|
000870  2043              MOVS     r0,#0x43              ;568
000872  e7d8              B        |L1.2086|
                  |L1.2164|
000874  48f3              LDR      r0,|L1.3140|
000876  7904              LDRB     r4,[r0,#4]            ;574
000878  0964              LSRS     r4,r4,#5              ;575
00087a  0164              LSLS     r4,r4,#5              ;575
00087c  1e70              SUBS     r0,r6,#1              ;576
00087e  06c0              LSLS     r0,r0,#27             ;576
000880  0ec0              LSRS     r0,r0,#27             ;576
000882  4304              ORRS     r4,r4,r0              ;576
000884  48ef              LDR      r0,|L1.3140|
000886  7104              STRB     r4,[r0,#4]            ;577
000888  7944              LDRB     r4,[r0,#5]            ;584
00088a  0964              LSRS     r4,r4,#5              ;585
00088c  0164              LSLS     r4,r4,#5              ;585
00088e  4638              MOV      r0,r7                 ;586
000890  3818              SUBS     r0,r0,#0x18           ;586
000892  06c0              LSLS     r0,r0,#27             ;586
000894  0ec0              LSRS     r0,r0,#27             ;586
000896  2140              MOVS     r1,#0x40              ;586
000898  4308              ORRS     r0,r0,r1              ;586
00089a  4304              ORRS     r4,r4,r0              ;586
00089c  48e9              LDR      r0,|L1.3140|
00089e  7144              STRB     r4,[r0,#5]            ;587
0008a0  7840              LDRB     r0,[r0,#1]            ;590
0008a2  2102              MOVS     r1,#2                 ;590
0008a4  4388              BICS     r0,r0,r1              ;590
0008a6  49e7              LDR      r1,|L1.3140|
0008a8  7048              STRB     r0,[r1,#1]            ;590
0008aa  2500              MOVS     r5,#0                 ;593
0008ac  e008              B        |L1.2240|
                  |L1.2222|
0008ae  48e5              LDR      r0,|L1.3140|
0008b0  7980              LDRB     r0,[r0,#6]            ;595
0008b2  2120              MOVS     r1,#0x20              ;595
0008b4  4008              ANDS     r0,r0,r1              ;595
0008b6  2800              CMP      r0,#0                 ;595
0008b8  d000              BEQ      |L1.2236|
0008ba  e005              B        |L1.2248|
                  |L1.2236|
0008bc  1c68              ADDS     r0,r5,#1              ;593
0008be  b205              SXTH     r5,r0                 ;593
                  |L1.2240|
0008c0  207d              MOVS     r0,#0x7d              ;593
0008c2  0100              LSLS     r0,r0,#4              ;593
0008c4  4285              CMP      r5,r0                 ;593
0008c6  dbf2              BLT      |L1.2222|
                  |L1.2248|
0008c8  bf00              NOP                            ;595
0008ca  48de              LDR      r0,|L1.3140|
0008cc  7980              LDRB     r0,[r0,#6]            ;597
0008ce  2120              MOVS     r1,#0x20              ;597
0008d0  4008              ANDS     r0,r0,r1              ;597
0008d2  2800              CMP      r0,#0                 ;597
0008d4  d101              BNE      |L1.2266|
0008d6  2016              MOVS     r0,#0x16              ;597
0008d8  e7a5              B        |L1.2086|
                  |L1.2266|
0008da  2500              MOVS     r5,#0                 ;600
0008dc  e008              B        |L1.2288|
                  |L1.2270|
0008de  48d9              LDR      r0,|L1.3140|
0008e0  7980              LDRB     r0,[r0,#6]            ;602
0008e2  2140              MOVS     r1,#0x40              ;602
0008e4  4008              ANDS     r0,r0,r1              ;602
0008e6  2800              CMP      r0,#0                 ;602
0008e8  d000              BEQ      |L1.2284|
0008ea  e005              B        |L1.2296|
                  |L1.2284|
0008ec  1c68              ADDS     r0,r5,#1              ;600
0008ee  b205              SXTH     r5,r0                 ;600
                  |L1.2288|
0008f0  207d              MOVS     r0,#0x7d              ;600
0008f2  0100              LSLS     r0,r0,#4              ;600
0008f4  4285              CMP      r5,r0                 ;600
0008f6  dbf2              BLT      |L1.2270|
                  |L1.2296|
0008f8  bf00              NOP                            ;602
0008fa  48d2              LDR      r0,|L1.3140|
0008fc  7980              LDRB     r0,[r0,#6]            ;604
0008fe  2140              MOVS     r1,#0x40              ;604
000900  4008              ANDS     r0,r0,r1              ;604
000902  2800              CMP      r0,#0                 ;604
000904  d101              BNE      |L1.2314|
000906  2044              MOVS     r0,#0x44              ;604
000908  e78d              B        |L1.2086|
                  |L1.2314|
00090a  9800              LDR      r0,[sp,#0]            ;607
00090c  e78b              B        |L1.2086|
;;;609    
                          ENDP

                  blpe_fbe PROC
;;;610    
;;;611    int blpe_fbe(int crystal_val)
00090e  4602              MOV      r2,r0
;;;612    {
;;;613      short i;
;;;614      
;;;615    // Check MCG is in BLPE mode
;;;616      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
000910  48cc              LDR      r0,|L1.3140|
000912  7980              LDRB     r0,[r0,#6]
000914  230c              MOVS     r3,#0xc
000916  4018              ANDS     r0,r0,r3
000918  0880              LSRS     r0,r0,#2
00091a  2802              CMP      r0,#2
00091c  d10b              BNE      |L1.2358|
00091e  48c9              LDR      r0,|L1.3140|
000920  7980              LDRB     r0,[r0,#6]
000922  2310              MOVS     r3,#0x10
000924  4018              ANDS     r0,r0,r3
000926  2800              CMP      r0,#0
000928  d105              BNE      |L1.2358|
00092a  48c6              LDR      r0,|L1.3140|
00092c  7840              LDRB     r0,[r0,#1]
00092e  2302              MOVS     r3,#2
000930  4018              ANDS     r0,r0,r3
000932  2800              CMP      r0,#0
000934  d101              BNE      |L1.2362|
                  |L1.2358|
;;;617          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;618          (MCG_C2 & MCG_C2_LP_MASK)))                                     // check MCG_C2[LP] bit is set   
;;;619      {
;;;620        return 0x6;                                                       // return error code
000936  2006              MOVS     r0,#6
                  |L1.2360|
;;;621      }
;;;622     
;;;623    // To move from BLPE to FBE the PLLS mux be set to select the FLL output and the LP bit must be cleared
;;;624      MCG_C6 &= ~MCG_C6_PLLS_MASK; // clear PLLS to select the FLL
;;;625      MCG_C2 &= ~MCG_C2_LP_MASK; // clear LP bit  
;;;626    
;;;627    // wait for PLLST status bit to clear
;;;628      for (i = 0 ; i < 2000 ; i++)
;;;629      {
;;;630        if (!(MCG_S & MCG_S_PLLST_MASK)) break; // jump out early if PLLST clears before loop finishes
;;;631      }
;;;632      if (MCG_S & MCG_S_PLLST_MASK) return 0x15; // check bit is really clear and return with error if not clear  
;;;633      
;;;634    // now in FBE mode
;;;635      return crystal_val; // MCGOUT frequency equals external clock frequency     
;;;636    } // blpe_fbe
000938  4770              BX       lr
                  |L1.2362|
00093a  48c2              LDR      r0,|L1.3140|
00093c  7940              LDRB     r0,[r0,#5]            ;624
00093e  2340              MOVS     r3,#0x40              ;624
000940  4398              BICS     r0,r0,r3              ;624
000942  4bc0              LDR      r3,|L1.3140|
000944  7158              STRB     r0,[r3,#5]            ;624
000946  4618              MOV      r0,r3                 ;625
000948  7840              LDRB     r0,[r0,#1]            ;625
00094a  2302              MOVS     r3,#2                 ;625
00094c  4398              BICS     r0,r0,r3              ;625
00094e  4bbd              LDR      r3,|L1.3140|
000950  7058              STRB     r0,[r3,#1]            ;625
000952  2100              MOVS     r1,#0                 ;628
000954  e008              B        |L1.2408|
                  |L1.2390|
000956  48bb              LDR      r0,|L1.3140|
000958  7980              LDRB     r0,[r0,#6]            ;630
00095a  2320              MOVS     r3,#0x20              ;630
00095c  4018              ANDS     r0,r0,r3              ;630
00095e  2800              CMP      r0,#0                 ;630
000960  d100              BNE      |L1.2404|
000962  e005              B        |L1.2416|
                  |L1.2404|
000964  1c48              ADDS     r0,r1,#1              ;628
000966  b201              SXTH     r1,r0                 ;628
                  |L1.2408|
000968  207d              MOVS     r0,#0x7d              ;628
00096a  0100              LSLS     r0,r0,#4              ;628
00096c  4281              CMP      r1,r0                 ;628
00096e  dbf2              BLT      |L1.2390|
                  |L1.2416|
000970  bf00              NOP                            ;630
000972  48b4              LDR      r0,|L1.3140|
000974  7980              LDRB     r0,[r0,#6]            ;632
000976  2320              MOVS     r3,#0x20              ;632
000978  4018              ANDS     r0,r0,r3              ;632
00097a  2800              CMP      r0,#0                 ;632
00097c  d001              BEQ      |L1.2434|
00097e  2015              MOVS     r0,#0x15              ;632
000980  e7da              B        |L1.2360|
                  |L1.2434|
000982  4610              MOV      r0,r2                 ;635
000984  e7d8              B        |L1.2360|
;;;637    
                          ENDP

                  fbe_blpe PROC
;;;638    
;;;639    int fbe_blpe(int crystal_val)
000986  4601              MOV      r1,r0
;;;640    {
;;;641    // Check MCG is in FBE mode
;;;642      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
000988  48ae              LDR      r0,|L1.3140|
00098a  7980              LDRB     r0,[r0,#6]
00098c  220c              MOVS     r2,#0xc
00098e  4010              ANDS     r0,r0,r2
000990  0880              LSRS     r0,r0,#2
000992  2802              CMP      r0,#2
000994  d111              BNE      |L1.2490|
000996  48ab              LDR      r0,|L1.3140|
000998  7980              LDRB     r0,[r0,#6]
00099a  2210              MOVS     r2,#0x10
00099c  4010              ANDS     r0,r0,r2
00099e  2800              CMP      r0,#0
0009a0  d10b              BNE      |L1.2490|
0009a2  48a8              LDR      r0,|L1.3140|
0009a4  7980              LDRB     r0,[r0,#6]
0009a6  2220              MOVS     r2,#0x20
0009a8  4010              ANDS     r0,r0,r2
0009aa  2800              CMP      r0,#0
0009ac  d105              BNE      |L1.2490|
0009ae  48a5              LDR      r0,|L1.3140|
0009b0  7840              LDRB     r0,[r0,#1]
0009b2  2202              MOVS     r2,#2
0009b4  4010              ANDS     r0,r0,r2
0009b6  2800              CMP      r0,#0
0009b8  d001              BEQ      |L1.2494|
                  |L1.2490|
;;;643          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;644          (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;645          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is not set   
;;;646      {
;;;647        return 0x4;                                                       // return error code
0009ba  2004              MOVS     r0,#4
                  |L1.2492|
;;;648      }
;;;649     
;;;650    // To move from FBE to BLPE the LP bit must be set
;;;651      MCG_C2 |= MCG_C2_LP_MASK; // set LP bit  
;;;652     
;;;653    // now in FBE mode
;;;654      return crystal_val; // MCGOUT frequency equals external clock frequency     
;;;655    } // fbe_blpe
0009bc  4770              BX       lr
                  |L1.2494|
0009be  48a1              LDR      r0,|L1.3140|
0009c0  7840              LDRB     r0,[r0,#1]            ;651
0009c2  2202              MOVS     r2,#2                 ;651
0009c4  4310              ORRS     r0,r0,r2              ;651
0009c6  4a9f              LDR      r2,|L1.3140|
0009c8  7050              STRB     r0,[r2,#1]            ;651
0009ca  4608              MOV      r0,r1                 ;654
0009cc  e7f6              B        |L1.2492|
;;;656    
                          ENDP

                  fll_freq PROC
;;;1785   
;;;1786   int fll_freq(int fll_ref)
0009ce  4602              MOV      r2,r0
;;;1787   {
;;;1788     int fll_freq_hz = 0x3B;
0009d0  213b              MOVS     r1,#0x3b
;;;1789     
;;;1790     // Check that only allowed ranges have been selected
;;;1791     if (((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) > 0x1) 
0009d2  489c              LDR      r0,|L1.3140|
0009d4  78c0              LDRB     r0,[r0,#3]
0009d6  2360              MOVS     r3,#0x60
0009d8  4018              ANDS     r0,r0,r3
0009da  0940              LSRS     r0,r0,#5
0009dc  2801              CMP      r0,#1
0009de  d901              BLS      |L1.2532|
;;;1792     {
;;;1793       return 0x3B; // return error code if DRS range 2 or 3 selected
0009e0  203b              MOVS     r0,#0x3b
                  |L1.2530|
;;;1794     }
;;;1795     
;;;1796     if (MCG_C4 & MCG_C4_DMX32_MASK) // if DMX32 set
;;;1797     {
;;;1798       switch ((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) // determine multiplier based on DRS
;;;1799       {
;;;1800       case 0:
;;;1801         fll_freq_hz = (fll_ref * 732);
;;;1802         if (fll_freq_hz < 20000000) {return 0x33;}
;;;1803         else if (fll_freq_hz > 25000000) {return 0x34;}
;;;1804         break;
;;;1805       case 1:
;;;1806         fll_freq_hz = (fll_ref * 1464);
;;;1807         if (fll_freq_hz < 40000000) {return 0x35;}
;;;1808         else if (fll_freq_hz > 50000000) {return 0x36;}
;;;1809         break;
;;;1810       case 2:
;;;1811         fll_freq_hz = (fll_ref * 2197);
;;;1812         if (fll_freq_hz < 60000000) {return 0x37;}
;;;1813         else if (fll_freq_hz > 75000000) {return 0x38;}
;;;1814         break;
;;;1815       case 3:
;;;1816         fll_freq_hz = (fll_ref * 2929);
;;;1817         if (fll_freq_hz < 80000000) {return 0x39;}
;;;1818         else if (fll_freq_hz > 100000000) {return 0x3A;}
;;;1819         break;
;;;1820       }
;;;1821     }
;;;1822     else // if DMX32 = 0
;;;1823     {
;;;1824       switch ((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) // determine multiplier based on DRS
;;;1825       {
;;;1826       case 0:
;;;1827         fll_freq_hz = (fll_ref * 640);
;;;1828         if (fll_freq_hz < 20000000) {return 0x33;}
;;;1829         else if (fll_freq_hz > 25000000) {return 0x34;}
;;;1830         break;
;;;1831       case 1:
;;;1832         fll_freq_hz = (fll_ref * 1280);
;;;1833         if (fll_freq_hz < 40000000) {return 0x35;}
;;;1834         else if (fll_freq_hz > 50000000) {return 0x36;}
;;;1835         break;
;;;1836       case 2:
;;;1837         fll_freq_hz = (fll_ref * 1920);
;;;1838         if (fll_freq_hz < 60000000) {return 0x37;}
;;;1839         else if (fll_freq_hz > 75000000) {return 0x38;}
;;;1840         break;
;;;1841       case 3:
;;;1842         fll_freq_hz = (fll_ref * 2560);
;;;1843         if (fll_freq_hz < 80000000) {return 0x39;}
;;;1844         else if (fll_freq_hz > 100000000) {return 0x3A;}
;;;1845         break;
;;;1846       }
;;;1847     }    
;;;1848     return fll_freq_hz;
;;;1849   } // fll_freq
0009e2  4770              BX       lr
                  |L1.2532|
0009e4  4897              LDR      r0,|L1.3140|
0009e6  78c0              LDRB     r0,[r0,#3]            ;1796
0009e8  2380              MOVS     r3,#0x80              ;1796
0009ea  4018              ANDS     r0,r0,r3              ;1796
0009ec  2800              CMP      r0,#0                 ;1796
0009ee  d048              BEQ      |L1.2690|
0009f0  4894              LDR      r0,|L1.3140|
0009f2  78c0              LDRB     r0,[r0,#3]            ;1798
0009f4  2360              MOVS     r3,#0x60              ;1798
0009f6  4018              ANDS     r0,r0,r3              ;1798
0009f8  0940              LSRS     r0,r0,#5              ;1798
0009fa  2800              CMP      r0,#0                 ;1798
0009fc  d006              BEQ      |L1.2572|
0009fe  2801              CMP      r0,#1                 ;1798
000a00  d013              BEQ      |L1.2602|
000a02  2802              CMP      r0,#2                 ;1798
000a04  d020              BEQ      |L1.2632|
000a06  2803              CMP      r0,#3                 ;1798
000a08  d13a              BNE      |L1.2688|
000a0a  e02b              B        |L1.2660|
                  |L1.2572|
000a0c  20b7              MOVS     r0,#0xb7              ;1801
000a0e  0080              LSLS     r0,r0,#2              ;1801
000a10  4611              MOV      r1,r2                 ;1801
000a12  4341              MULS     r1,r0,r1              ;1801
000a14  488c              LDR      r0,|L1.3144|
000a16  4281              CMP      r1,r0                 ;1802
000a18  da01              BGE      |L1.2590|
000a1a  2033              MOVS     r0,#0x33              ;1802
000a1c  e7e1              B        |L1.2530|
                  |L1.2590|
000a1e  488b              LDR      r0,|L1.3148|
000a20  4281              CMP      r1,r0                 ;1803
000a22  dd01              BLE      |L1.2600|
000a24  2034              MOVS     r0,#0x34              ;1803
000a26  e7dc              B        |L1.2530|
                  |L1.2600|
000a28  e02a              B        |L1.2688|
                  |L1.2602|
000a2a  20b7              MOVS     r0,#0xb7              ;1806
000a2c  00c0              LSLS     r0,r0,#3              ;1806
000a2e  4611              MOV      r1,r2                 ;1806
000a30  4341              MULS     r1,r0,r1              ;1806
000a32  4887              LDR      r0,|L1.3152|
000a34  4281              CMP      r1,r0                 ;1807
000a36  da01              BGE      |L1.2620|
000a38  2035              MOVS     r0,#0x35              ;1807
000a3a  e7d2              B        |L1.2530|
                  |L1.2620|
000a3c  4885              LDR      r0,|L1.3156|
000a3e  4281              CMP      r1,r0                 ;1808
000a40  dd01              BLE      |L1.2630|
000a42  2036              MOVS     r0,#0x36              ;1808
000a44  e7cd              B        |L1.2530|
                  |L1.2630|
000a46  e01b              B        |L1.2688|
                  |L1.2632|
000a48  4883              LDR      r0,|L1.3160|
000a4a  4611              MOV      r1,r2                 ;1811
000a4c  4341              MULS     r1,r0,r1              ;1811
000a4e  4883              LDR      r0,|L1.3164|
000a50  4281              CMP      r1,r0                 ;1812
000a52  da01              BGE      |L1.2648|
000a54  2037              MOVS     r0,#0x37              ;1812
000a56  e7c4              B        |L1.2530|
                  |L1.2648|
000a58  4881              LDR      r0,|L1.3168|
000a5a  4281              CMP      r1,r0                 ;1813
000a5c  dd01              BLE      |L1.2658|
000a5e  2038              MOVS     r0,#0x38              ;1813
000a60  e7bf              B        |L1.2530|
                  |L1.2658|
000a62  e00d              B        |L1.2688|
                  |L1.2660|
000a64  487f              LDR      r0,|L1.3172|
000a66  4611              MOV      r1,r2                 ;1816
000a68  4341              MULS     r1,r0,r1              ;1816
000a6a  487f              LDR      r0,|L1.3176|
000a6c  4281              CMP      r1,r0                 ;1817
000a6e  da01              BGE      |L1.2676|
000a70  2039              MOVS     r0,#0x39              ;1817
000a72  e7b6              B        |L1.2530|
                  |L1.2676|
000a74  487d              LDR      r0,|L1.3180|
000a76  4281              CMP      r1,r0                 ;1818
000a78  dd01              BLE      |L1.2686|
000a7a  203a              MOVS     r0,#0x3a              ;1818
000a7c  e7b1              B        |L1.2530|
                  |L1.2686|
000a7e  bf00              NOP                            ;1819
                  |L1.2688|
000a80  e04a              B        |L1.2840|
                  |L1.2690|
000a82  4870              LDR      r0,|L1.3140|
000a84  78c0              LDRB     r0,[r0,#3]            ;1824
000a86  2360              MOVS     r3,#0x60              ;1824
000a88  4018              ANDS     r0,r0,r3              ;1824
000a8a  0940              LSRS     r0,r0,#5              ;1824
000a8c  2800              CMP      r0,#0                 ;1824
000a8e  d006              BEQ      |L1.2718|
000a90  2801              CMP      r0,#1                 ;1824
000a92  d013              BEQ      |L1.2748|
000a94  2802              CMP      r0,#2                 ;1824
000a96  d020              BEQ      |L1.2778|
000a98  2803              CMP      r0,#3                 ;1824
000a9a  d13c              BNE      |L1.2838|
000a9c  e02c              B        |L1.2808|
                  |L1.2718|
000a9e  2005              MOVS     r0,#5                 ;1827
000aa0  01c0              LSLS     r0,r0,#7              ;1827
000aa2  4611              MOV      r1,r2                 ;1827
000aa4  4341              MULS     r1,r0,r1              ;1827
000aa6  4868              LDR      r0,|L1.3144|
000aa8  4281              CMP      r1,r0                 ;1828
000aaa  da01              BGE      |L1.2736|
000aac  2033              MOVS     r0,#0x33              ;1828
000aae  e798              B        |L1.2530|
                  |L1.2736|
000ab0  4866              LDR      r0,|L1.3148|
000ab2  4281              CMP      r1,r0                 ;1829
000ab4  dd01              BLE      |L1.2746|
000ab6  2034              MOVS     r0,#0x34              ;1829
000ab8  e793              B        |L1.2530|
                  |L1.2746|
000aba  e02c              B        |L1.2838|
                  |L1.2748|
000abc  2005              MOVS     r0,#5                 ;1832
000abe  0200              LSLS     r0,r0,#8              ;1832
000ac0  4611              MOV      r1,r2                 ;1832
000ac2  4341              MULS     r1,r0,r1              ;1832
000ac4  4862              LDR      r0,|L1.3152|
000ac6  4281              CMP      r1,r0                 ;1833
000ac8  da01              BGE      |L1.2766|
000aca  2035              MOVS     r0,#0x35              ;1833
000acc  e789              B        |L1.2530|
                  |L1.2766|
000ace  4861              LDR      r0,|L1.3156|
000ad0  4281              CMP      r1,r0                 ;1834
000ad2  dd01              BLE      |L1.2776|
000ad4  2036              MOVS     r0,#0x36              ;1834
000ad6  e784              B        |L1.2530|
                  |L1.2776|
000ad8  e01d              B        |L1.2838|
                  |L1.2778|
000ada  200f              MOVS     r0,#0xf               ;1837
000adc  01c0              LSLS     r0,r0,#7              ;1837
000ade  4611              MOV      r1,r2                 ;1837
000ae0  4341              MULS     r1,r0,r1              ;1837
000ae2  485e              LDR      r0,|L1.3164|
000ae4  4281              CMP      r1,r0                 ;1838
000ae6  da01              BGE      |L1.2796|
000ae8  2037              MOVS     r0,#0x37              ;1838
000aea  e77a              B        |L1.2530|
                  |L1.2796|
000aec  485c              LDR      r0,|L1.3168|
000aee  4281              CMP      r1,r0                 ;1839
000af0  dd01              BLE      |L1.2806|
000af2  2038              MOVS     r0,#0x38              ;1839
000af4  e775              B        |L1.2530|
                  |L1.2806|
000af6  e00e              B        |L1.2838|
                  |L1.2808|
000af8  2005              MOVS     r0,#5                 ;1842
000afa  0240              LSLS     r0,r0,#9              ;1842
000afc  4611              MOV      r1,r2                 ;1842
000afe  4341              MULS     r1,r0,r1              ;1842
000b00  4859              LDR      r0,|L1.3176|
000b02  4281              CMP      r1,r0                 ;1843
000b04  da01              BGE      |L1.2826|
000b06  2039              MOVS     r0,#0x39              ;1843
000b08  e76b              B        |L1.2530|
                  |L1.2826|
000b0a  4858              LDR      r0,|L1.3180|
000b0c  4281              CMP      r1,r0                 ;1844
000b0e  dd01              BLE      |L1.2836|
000b10  203a              MOVS     r0,#0x3a              ;1844
000b12  e766              B        |L1.2530|
                  |L1.2836|
000b14  bf00              NOP                            ;1845
                  |L1.2838|
000b16  bf00              NOP                            ;1830
                  |L1.2840|
000b18  4608              MOV      r0,r1                 ;1848
000b1a  e762              B        |L1.2530|
;;;1850   
                          ENDP

                  fbe_fei PROC
;;;657    
;;;658    int fbe_fei(int slow_irc_freq)
000b1c  b5f0              PUSH     {r4-r7,lr}
;;;659    {
000b1e  4605              MOV      r5,r0
;;;660      unsigned char temp_reg;
;;;661      short i;
;;;662      int mcg_out;
;;;663      
;;;664    // Check MCG is in FBE mode
;;;665      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
000b20  4848              LDR      r0,|L1.3140|
000b22  7980              LDRB     r0,[r0,#6]
000b24  210c              MOVS     r1,#0xc
000b26  4008              ANDS     r0,r0,r1
000b28  0880              LSRS     r0,r0,#2
000b2a  2802              CMP      r0,#2
000b2c  d111              BNE      |L1.2898|
000b2e  4845              LDR      r0,|L1.3140|
000b30  7980              LDRB     r0,[r0,#6]
000b32  2110              MOVS     r1,#0x10
000b34  4008              ANDS     r0,r0,r1
000b36  2800              CMP      r0,#0
000b38  d10b              BNE      |L1.2898|
000b3a  4842              LDR      r0,|L1.3140|
000b3c  7980              LDRB     r0,[r0,#6]
000b3e  2120              MOVS     r1,#0x20
000b40  4008              ANDS     r0,r0,r1
000b42  2800              CMP      r0,#0
000b44  d105              BNE      |L1.2898|
000b46  483f              LDR      r0,|L1.3140|
000b48  7840              LDRB     r0,[r0,#1]
000b4a  2102              MOVS     r1,#2
000b4c  4008              ANDS     r0,r0,r1
000b4e  2800              CMP      r0,#0
000b50  d001              BEQ      |L1.2902|
                  |L1.2898|
;;;666          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;667          (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;668          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is not set   
;;;669      {
;;;670        return 0x4;                                                       // return error code
000b52  2004              MOVS     r0,#4
                  |L1.2900|
;;;671      }
;;;672    
;;;673    // Check IRC frequency is within spec.
;;;674      if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
;;;675      {
;;;676        return 0x31;
;;;677      }
;;;678      
;;;679    // Check resulting FLL frequency 
;;;680      mcg_out = fll_freq(slow_irc_freq); 
;;;681      if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling function
;;;682    
;;;683    // Need to make sure the clockmonitor is disabled before moving to an "internal" clock mode
;;;684      MCG_C6 &= ~MCG_C6_CME0_MASK; //This assumes OSC0 is used as the external clock source
;;;685      
;;;686    // Move to FEI by setting CLKS to 0 and enabling the slow IRC as the FLL reference clock
;;;687      temp_reg = MCG_C1;
;;;688      temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS to select FLL output
;;;689      temp_reg |= MCG_C1_IREFS_MASK; // select internal reference clock
;;;690      MCG_C1 = temp_reg; // update MCG_C1 
;;;691      
;;;692    // wait for Reference clock Status bit to set
;;;693      for (i = 0 ; i < 2000 ; i++)
;;;694      {
;;;695        if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
;;;696      }
;;;697      if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error if not set
;;;698      
;;;699    // Wait for clock status bits to show clock source is ext ref clk
;;;700      for (i = 0 ; i < 2000 ; i++)
;;;701      {
;;;702        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST shows EXT CLK slected before loop finishes
;;;703      }
;;;704      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check EXT CLK is really selected and return with error if not
;;;705    
;;;706    // Now in FEI mode
;;;707      return mcg_out;
;;;708    } // fbe_fei
000b54  bdf0              POP      {r4-r7,pc}
                  |L1.2902|
000b56  4846              LDR      r0,|L1.3184|
000b58  4285              CMP      r5,r0                 ;674
000b5a  db02              BLT      |L1.2914|
000b5c  4845              LDR      r0,|L1.3188|
000b5e  4285              CMP      r5,r0                 ;674
000b60  dd01              BLE      |L1.2918|
                  |L1.2914|
000b62  2031              MOVS     r0,#0x31              ;676
000b64  e7f6              B        |L1.2900|
                  |L1.2918|
000b66  4628              MOV      r0,r5                 ;680
000b68  f7fffffe          BL       fll_freq
000b6c  4607              MOV      r7,r0                 ;680
000b6e  2f3c              CMP      r7,#0x3c              ;681
000b70  da01              BGE      |L1.2934|
000b72  4638              MOV      r0,r7                 ;681
000b74  e7ee              B        |L1.2900|
                  |L1.2934|
000b76  4833              LDR      r0,|L1.3140|
000b78  7940              LDRB     r0,[r0,#5]            ;684
000b7a  2120              MOVS     r1,#0x20              ;684
000b7c  4388              BICS     r0,r0,r1              ;684
000b7e  4931              LDR      r1,|L1.3140|
000b80  7148              STRB     r0,[r1,#5]            ;684
000b82  4608              MOV      r0,r1                 ;687
000b84  7806              LDRB     r6,[r0,#0]            ;687
000b86  21c0              MOVS     r1,#0xc0              ;688
000b88  4630              MOV      r0,r6                 ;688
000b8a  4388              BICS     r0,r0,r1              ;688
000b8c  4606              MOV      r6,r0                 ;688
000b8e  2004              MOVS     r0,#4                 ;689
000b90  4306              ORRS     r6,r6,r0              ;689
000b92  482c              LDR      r0,|L1.3140|
000b94  7006              STRB     r6,[r0,#0]            ;690
000b96  2400              MOVS     r4,#0                 ;693
000b98  e008              B        |L1.2988|
                  |L1.2970|
000b9a  482a              LDR      r0,|L1.3140|
000b9c  7980              LDRB     r0,[r0,#6]            ;695
000b9e  2110              MOVS     r1,#0x10              ;695
000ba0  4008              ANDS     r0,r0,r1              ;695
000ba2  2800              CMP      r0,#0                 ;695
000ba4  d000              BEQ      |L1.2984|
000ba6  e005              B        |L1.2996|
                  |L1.2984|
000ba8  1c60              ADDS     r0,r4,#1              ;693
000baa  b204              SXTH     r4,r0                 ;693
                  |L1.2988|
000bac  207d              MOVS     r0,#0x7d              ;693
000bae  0100              LSLS     r0,r0,#4              ;693
000bb0  4284              CMP      r4,r0                 ;693
000bb2  dbf2              BLT      |L1.2970|
                  |L1.2996|
000bb4  bf00              NOP                            ;695
000bb6  4823              LDR      r0,|L1.3140|
000bb8  7980              LDRB     r0,[r0,#6]            ;697
000bba  2110              MOVS     r1,#0x10              ;697
000bbc  4008              ANDS     r0,r0,r1              ;697
000bbe  2800              CMP      r0,#0                 ;697
000bc0  d101              BNE      |L1.3014|
000bc2  2012              MOVS     r0,#0x12              ;697
000bc4  e7c6              B        |L1.2900|
                  |L1.3014|
000bc6  2400              MOVS     r4,#0                 ;700
000bc8  e009              B        |L1.3038|
                  |L1.3018|
000bca  481e              LDR      r0,|L1.3140|
000bcc  7980              LDRB     r0,[r0,#6]            ;702
000bce  210c              MOVS     r1,#0xc               ;702
000bd0  4008              ANDS     r0,r0,r1              ;702
000bd2  0880              LSRS     r0,r0,#2              ;702
000bd4  2800              CMP      r0,#0                 ;702
000bd6  d100              BNE      |L1.3034|
000bd8  e005              B        |L1.3046|
                  |L1.3034|
000bda  1c60              ADDS     r0,r4,#1              ;700
000bdc  b204              SXTH     r4,r0                 ;700
                  |L1.3038|
000bde  207d              MOVS     r0,#0x7d              ;700
000be0  0100              LSLS     r0,r0,#4              ;700
000be2  4284              CMP      r4,r0                 ;700
000be4  dbf1              BLT      |L1.3018|
                  |L1.3046|
000be6  bf00              NOP                            ;702
000be8  4816              LDR      r0,|L1.3140|
000bea  7980              LDRB     r0,[r0,#6]            ;704
000bec  210c              MOVS     r1,#0xc               ;704
000bee  4008              ANDS     r0,r0,r1              ;704
000bf0  0880              LSRS     r0,r0,#2              ;704
000bf2  2800              CMP      r0,#0                 ;704
000bf4  d001              BEQ      |L1.3066|
000bf6  2018              MOVS     r0,#0x18              ;704
000bf8  e7ac              B        |L1.2900|
                  |L1.3066|
000bfa  4638              MOV      r0,r7                 ;707
000bfc  e7aa              B        |L1.2900|
;;;709    
                          ENDP

                  fei_fbe PROC
;;;728     */
;;;729    int fei_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
000bfe  b5f0              PUSH     {r4-r7,lr}
;;;730    {
000c00  4603              MOV      r3,r0
000c02  460e              MOV      r6,r1
000c04  4615              MOV      r5,r2
;;;731      unsigned char frdiv_val;
;;;732      unsigned char temp_reg;
;;;733      short i;
;;;734      
;;;735    // check if in FEI mode
;;;736      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted FLL output
000c06  480f              LDR      r0,|L1.3140|
000c08  7980              LDRB     r0,[r0,#6]
000c0a  270c              MOVS     r7,#0xc
000c0c  4038              ANDS     r0,r0,r7
000c0e  0880              LSRS     r0,r0,#2
000c10  2800              CMP      r0,#0
000c12  d10b              BNE      |L1.3116|
000c14  480b              LDR      r0,|L1.3140|
000c16  7980              LDRB     r0,[r0,#6]
000c18  2710              MOVS     r7,#0x10
000c1a  4038              ANDS     r0,r0,r7
000c1c  2800              CMP      r0,#0
000c1e  d005              BEQ      |L1.3116|
000c20  4808              LDR      r0,|L1.3140|
000c22  7980              LDRB     r0,[r0,#6]
000c24  2720              MOVS     r7,#0x20
000c26  4038              ANDS     r0,r0,r7
000c28  2800              CMP      r0,#0
000c2a  d001              BEQ      |L1.3120|
                  |L1.3116|
;;;737          (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;738          (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selected FLL
;;;739      {
;;;740        return 0x1;                                                     // return error code
000c2c  2001              MOVS     r0,#1
                  |L1.3118|
;;;741      }
;;;742    
;;;743    // check external frequency is less than the maximum frequency
;;;744      if  (crystal_val > 50000000) {return 0x21;}
;;;745      
;;;746    // check crystal frequency is within spec. if crystal osc is being used
;;;747      if (erefs_val)
;;;748      {
;;;749        if ((crystal_val < 30000) ||
;;;750            ((crystal_val > 40000) && (crystal_val < 3000000)) ||
;;;751            (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal options is not available
;;;752      }
;;;753    
;;;754    // make sure HGO will never be greater than 1. Could return an error instead if desired.  
;;;755      if (hgo_val > 0)
;;;756      {
;;;757        hgo_val = 1; // force hgo_val to 1 if > 0
;;;758      }
;;;759    
;;;760    // configure the MCG_C2 register
;;;761    // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the FRDIV divide value
;;;762    // it still needs to be set correctly even if the oscillator is not being used
;;;763      temp_reg = MCG_C2;
;;;764      temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before writing new values
;;;765      if (crystal_val <= 40000)
;;;766      {
;;;767        temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;768      }
;;;769      else if (crystal_val <= 8000000)
;;;770      {
;;;771        temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;772      }
;;;773      else
;;;774      {
;;;775        temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;776      }
;;;777      MCG_C2 = temp_reg;
;;;778    // determine FRDIV based on reference clock frequency
;;;779    // since the external frequency has already been checked only the maximum frequency for each FRDIV value needs to be compared here.
;;;780      if (crystal_val <= 1250000) {frdiv_val = 0;}
;;;781      else if (crystal_val <= 2500000) {frdiv_val = 1;}
;;;782      else if (crystal_val <= 5000000) {frdiv_val = 2;}
;;;783      else if (crystal_val <= 10000000) {frdiv_val = 3;}
;;;784      else if (crystal_val <= 20000000) {frdiv_val = 4;}
;;;785      else {frdiv_val = 5;}
;;;786      
;;;787    // Select external oscilator and Reference Divider and clear IREFS to start ext osc
;;;788    // If IRCLK is required it must be enabled outside of this driver, existing state will be maintained
;;;789    // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
;;;790      temp_reg = MCG_C1;
;;;791      temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these fields
;;;792      temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
;;;793      MCG_C1 = temp_reg;
;;;794    
;;;795    // if the external oscillator is used need to wait for OSCINIT to set
;;;796      if (erefs_val)
;;;797      {
;;;798        for (i = 0 ; i < 10000 ; i++)
;;;799        {
;;;800          if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishes
;;;801        }
;;;802        if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with error if not set
;;;803      }
;;;804    
;;;805    // wait for Reference clock Status bit to clear
;;;806      for (i = 0 ; i < 2000 ; i++)
;;;807      {
;;;808        if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishes
;;;809      }
;;;810      if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if not set
;;;811      
;;;812    // Wait for clock status bits to show clock source is ext ref clk
;;;813      for (i = 0 ; i < 2000 ; i++)
;;;814      {
;;;815        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST shows EXT CLK slected before loop finishes
;;;816      }
;;;817      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is really selected and return with error if not
;;;818     
;;;819    // Now in FBE  
;;;820    // It is recommended that the clock monitor is enabled when using an external clock as the clock source/reference.
;;;821    // It is enabled here but can be removed if this is not required.
;;;822      MCG_C6 |= MCG_C6_CME0_MASK;
;;;823      
;;;824      return crystal_val; // MCGOUT frequency equals external clock frequency
;;;825    } // fei_fbe
000c2e  bdf0              POP      {r4-r7,pc}
                  |L1.3120|
000c30  4808              LDR      r0,|L1.3156|
000c32  4283              CMP      r3,r0                 ;744
000c34  dd20              BLE      |L1.3192|
000c36  2021              MOVS     r0,#0x21              ;744
000c38  e7f9              B        |L1.3118|
000c3a  0000              DCW      0x0000
                  |L1.3132|
                          DCD      0x001e8480
                  |L1.3136|
                          DCD      0x003d0900
                  |L1.3140|
                          DCD      0x40064000
                  |L1.3144|
                          DCD      0x01312d00
                  |L1.3148|
                          DCD      0x017d7840
                  |L1.3152|
                          DCD      0x02625a00
                  |L1.3156|
                          DCD      0x02faf080
                  |L1.3160|
                          DCD      0x00000895
                  |L1.3164|
                          DCD      0x03938700
                  |L1.3168|
                          DCD      0x047868c0
                  |L1.3172|
                          DCD      0x00000b71
                  |L1.3176|
                          DCD      0x04c4b400
                  |L1.3180|
                          DCD      0x05f5e100
                  |L1.3184|
                          DCD      0x00007a12
                  |L1.3188|
                          DCD      0x00009897
                  |L1.3192|
000c78  2d00              CMP      r5,#0                 ;747
000c7a  d00d              BEQ      |L1.3224|
000c7c  48f8              LDR      r0,|L1.4192|
000c7e  4283              CMP      r3,r0                 ;749
000c80  db08              BLT      |L1.3220|
000c82  48f8              LDR      r0,|L1.4196|
000c84  4283              CMP      r3,r0                 ;750
000c86  dd02              BLE      |L1.3214|
000c88  48f7              LDR      r0,|L1.4200|
000c8a  4283              CMP      r3,r0                 ;750
000c8c  db02              BLT      |L1.3220|
                  |L1.3214|
000c8e  48f7              LDR      r0,|L1.4204|
000c90  4283              CMP      r3,r0                 ;751
000c92  dd01              BLE      |L1.3224|
                  |L1.3220|
000c94  2022              MOVS     r0,#0x22              ;751
000c96  e7ca              B        |L1.3118|
                  |L1.3224|
000c98  2e00              CMP      r6,#0                 ;755
000c9a  dd00              BLE      |L1.3230|
000c9c  2601              MOVS     r6,#1                 ;757
                  |L1.3230|
000c9e  48f4              LDR      r0,|L1.4208|
000ca0  7841              LDRB     r1,[r0,#1]            ;763
000ca2  203c              MOVS     r0,#0x3c              ;764
000ca4  460f              MOV      r7,r1                 ;764
000ca6  4387              BICS     r7,r7,r0              ;764
000ca8  4639              MOV      r1,r7                 ;764
000caa  48ee              LDR      r0,|L1.4196|
000cac  4283              CMP      r3,r0                 ;765
000cae  dc05              BGT      |L1.3260|
000cb0  00f0              LSLS     r0,r6,#3              ;767
000cb2  00af              LSLS     r7,r5,#2              ;767
000cb4  4338              ORRS     r0,r0,r7              ;767
000cb6  4308              ORRS     r0,r0,r1              ;767
000cb8  b2c1              UXTB     r1,r0                 ;767
000cba  e011              B        |L1.3296|
                  |L1.3260|
000cbc  48ed              LDR      r0,|L1.4212|
000cbe  4283              CMP      r3,r0                 ;769
000cc0  dc07              BGT      |L1.3282|
000cc2  00f0              LSLS     r0,r6,#3              ;771
000cc4  2710              MOVS     r7,#0x10              ;771
000cc6  4338              ORRS     r0,r0,r7              ;771
000cc8  00af              LSLS     r7,r5,#2              ;771
000cca  4338              ORRS     r0,r0,r7              ;771
000ccc  4308              ORRS     r0,r0,r1              ;771
000cce  b2c1              UXTB     r1,r0                 ;771
000cd0  e006              B        |L1.3296|
                  |L1.3282|
000cd2  00f0              LSLS     r0,r6,#3              ;775
000cd4  2720              MOVS     r7,#0x20              ;775
000cd6  4338              ORRS     r0,r0,r7              ;775
000cd8  00af              LSLS     r7,r5,#2              ;775
000cda  4338              ORRS     r0,r0,r7              ;775
000cdc  4308              ORRS     r0,r0,r1              ;775
000cde  b2c1              UXTB     r1,r0                 ;775
                  |L1.3296|
000ce0  48e3              LDR      r0,|L1.4208|
000ce2  7041              STRB     r1,[r0,#1]            ;777
000ce4  48e4              LDR      r0,|L1.4216|
000ce6  4283              CMP      r3,r0                 ;780
000ce8  dc01              BGT      |L1.3310|
000cea  2200              MOVS     r2,#0                 ;780
000cec  e014              B        |L1.3352|
                  |L1.3310|
000cee  48e3              LDR      r0,|L1.4220|
000cf0  4283              CMP      r3,r0                 ;781
000cf2  dc01              BGT      |L1.3320|
000cf4  2201              MOVS     r2,#1                 ;781
000cf6  e00f              B        |L1.3352|
                  |L1.3320|
000cf8  48e1              LDR      r0,|L1.4224|
000cfa  4283              CMP      r3,r0                 ;782
000cfc  dc01              BGT      |L1.3330|
000cfe  2202              MOVS     r2,#2                 ;782
000d00  e00a              B        |L1.3352|
                  |L1.3330|
000d02  48e0              LDR      r0,|L1.4228|
000d04  4283              CMP      r3,r0                 ;783
000d06  dc01              BGT      |L1.3340|
000d08  2203              MOVS     r2,#3                 ;783
000d0a  e005              B        |L1.3352|
                  |L1.3340|
000d0c  48de              LDR      r0,|L1.4232|
000d0e  4283              CMP      r3,r0                 ;784
000d10  dc01              BGT      |L1.3350|
000d12  2204              MOVS     r2,#4                 ;784
000d14  e000              B        |L1.3352|
                  |L1.3350|
000d16  2205              MOVS     r2,#5                 ;785
                  |L1.3352|
000d18  48d5              LDR      r0,|L1.4208|
000d1a  7801              LDRB     r1,[r0,#0]            ;790
000d1c  20fc              MOVS     r0,#0xfc              ;791
000d1e  460f              MOV      r7,r1                 ;791
000d20  4387              BICS     r7,r7,r0              ;791
000d22  4639              MOV      r1,r7                 ;791
000d24  00d0              LSLS     r0,r2,#3              ;792
000d26  2738              MOVS     r7,#0x38              ;792
000d28  4038              ANDS     r0,r0,r7              ;792
000d2a  2780              MOVS     r7,#0x80              ;792
000d2c  4338              ORRS     r0,r0,r7              ;792
000d2e  4301              ORRS     r1,r1,r0              ;792
000d30  48cf              LDR      r0,|L1.4208|
000d32  7001              STRB     r1,[r0,#0]            ;793
000d34  2d00              CMP      r5,#0                 ;796
000d36  d016              BEQ      |L1.3430|
000d38  2400              MOVS     r4,#0                 ;798
000d3a  e008              B        |L1.3406|
                  |L1.3388|
000d3c  48cc              LDR      r0,|L1.4208|
000d3e  7980              LDRB     r0,[r0,#6]            ;800
000d40  2702              MOVS     r7,#2                 ;800
000d42  4038              ANDS     r0,r0,r7              ;800
000d44  2800              CMP      r0,#0                 ;800
000d46  d000              BEQ      |L1.3402|
000d48  e004              B        |L1.3412|
                  |L1.3402|
000d4a  1c60              ADDS     r0,r4,#1              ;798
000d4c  b204              SXTH     r4,r0                 ;798
                  |L1.3406|
000d4e  48cf              LDR      r0,|L1.4236|
000d50  4284              CMP      r4,r0                 ;798
000d52  dbf3              BLT      |L1.3388|
                  |L1.3412|
000d54  bf00              NOP                            ;800
000d56  48c6              LDR      r0,|L1.4208|
000d58  7980              LDRB     r0,[r0,#6]            ;802
000d5a  2702              MOVS     r7,#2                 ;802
000d5c  4038              ANDS     r0,r0,r7              ;802
000d5e  2800              CMP      r0,#0                 ;802
000d60  d101              BNE      |L1.3430|
000d62  2023              MOVS     r0,#0x23              ;802
000d64  e763              B        |L1.3118|
                  |L1.3430|
000d66  2400              MOVS     r4,#0                 ;806
000d68  e008              B        |L1.3452|
                  |L1.3434|
000d6a  48c1              LDR      r0,|L1.4208|
000d6c  7980              LDRB     r0,[r0,#6]            ;808
000d6e  2710              MOVS     r7,#0x10              ;808
000d70  4038              ANDS     r0,r0,r7              ;808
000d72  2800              CMP      r0,#0                 ;808
000d74  d100              BNE      |L1.3448|
000d76  e005              B        |L1.3460|
                  |L1.3448|
000d78  1c60              ADDS     r0,r4,#1              ;806
000d7a  b204              SXTH     r4,r0                 ;806
                  |L1.3452|
000d7c  207d              MOVS     r0,#0x7d              ;806
000d7e  0100              LSLS     r0,r0,#4              ;806
000d80  4284              CMP      r4,r0                 ;806
000d82  dbf2              BLT      |L1.3434|
                  |L1.3460|
000d84  bf00              NOP                            ;808
000d86  48ba              LDR      r0,|L1.4208|
000d88  7980              LDRB     r0,[r0,#6]            ;810
000d8a  2710              MOVS     r7,#0x10              ;810
000d8c  4038              ANDS     r0,r0,r7              ;810
000d8e  2800              CMP      r0,#0                 ;810
000d90  d001              BEQ      |L1.3478|
000d92  2011              MOVS     r0,#0x11              ;810
000d94  e74b              B        |L1.3118|
                  |L1.3478|
000d96  2400              MOVS     r4,#0                 ;813
000d98  e009              B        |L1.3502|
                  |L1.3482|
000d9a  48b5              LDR      r0,|L1.4208|
000d9c  7980              LDRB     r0,[r0,#6]            ;815
000d9e  270c              MOVS     r7,#0xc               ;815
000da0  4038              ANDS     r0,r0,r7              ;815
000da2  0880              LSRS     r0,r0,#2              ;815
000da4  2802              CMP      r0,#2                 ;815
000da6  d100              BNE      |L1.3498|
000da8  e005              B        |L1.3510|
                  |L1.3498|
000daa  1c60              ADDS     r0,r4,#1              ;813
000dac  b204              SXTH     r4,r0                 ;813
                  |L1.3502|
000dae  207d              MOVS     r0,#0x7d              ;813
000db0  0100              LSLS     r0,r0,#4              ;813
000db2  4284              CMP      r4,r0                 ;813
000db4  dbf1              BLT      |L1.3482|
                  |L1.3510|
000db6  bf00              NOP                            ;815
000db8  48ad              LDR      r0,|L1.4208|
000dba  7980              LDRB     r0,[r0,#6]            ;817
000dbc  270c              MOVS     r7,#0xc               ;817
000dbe  4038              ANDS     r0,r0,r7              ;817
000dc0  0880              LSRS     r0,r0,#2              ;817
000dc2  2802              CMP      r0,#2                 ;817
000dc4  d001              BEQ      |L1.3530|
000dc6  201a              MOVS     r0,#0x1a              ;817
000dc8  e731              B        |L1.3118|
                  |L1.3530|
000dca  48a9              LDR      r0,|L1.4208|
000dcc  7940              LDRB     r0,[r0,#5]            ;822
000dce  2720              MOVS     r7,#0x20              ;822
000dd0  4338              ORRS     r0,r0,r7              ;822
000dd2  4fa7              LDR      r7,|L1.4208|
000dd4  7178              STRB     r0,[r7,#5]            ;822
000dd6  4618              MOV      r0,r3                 ;824
000dd8  e729              B        |L1.3118|
;;;826    
                          ENDP

                  fbe_fee PROC
;;;827    
;;;828    int fbe_fee(int crystal_val)
000dda  b5f8              PUSH     {r3-r7,lr}
;;;829    {
000ddc  4607              MOV      r7,r0
;;;830      short i, fll_ref_freq;
;;;831      int mcg_out;
;;;832    
;;;833    // Check MCG is in FBE mode
;;;834      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
000dde  48a4              LDR      r0,|L1.4208|
000de0  7980              LDRB     r0,[r0,#6]
000de2  210c              MOVS     r1,#0xc
000de4  4008              ANDS     r0,r0,r1
000de6  0880              LSRS     r0,r0,#2
000de8  2802              CMP      r0,#2
000dea  d111              BNE      |L1.3600|
000dec  48a0              LDR      r0,|L1.4208|
000dee  7980              LDRB     r0,[r0,#6]
000df0  2110              MOVS     r1,#0x10
000df2  4008              ANDS     r0,r0,r1
000df4  2800              CMP      r0,#0
000df6  d10b              BNE      |L1.3600|
000df8  489d              LDR      r0,|L1.4208|
000dfa  7980              LDRB     r0,[r0,#6]
000dfc  2120              MOVS     r1,#0x20
000dfe  4008              ANDS     r0,r0,r1
000e00  2800              CMP      r0,#0
000e02  d105              BNE      |L1.3600|
000e04  489a              LDR      r0,|L1.4208|
000e06  7840              LDRB     r0,[r0,#1]
000e08  2102              MOVS     r1,#2
000e0a  4008              ANDS     r0,r0,r1
000e0c  2800              CMP      r0,#0
000e0e  d001              BEQ      |L1.3604|
                  |L1.3600|
;;;835          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;836          (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;837          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is not set   
;;;838      {
;;;839        return 0x4;                                                       // return error code
000e10  2004              MOVS     r0,#4
                  |L1.3602|
;;;840      }
;;;841      
;;;842      // The FLL ref clk divide value depends on FRDIV and the RANGE value
;;;843      if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
;;;844      {
;;;845        fll_ref_freq = (crystal_val / (32 << ((MCG_C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT)));
;;;846      }
;;;847      else
;;;848      {
;;;849        fll_ref_freq = ((crystal_val) / (1 << (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT))));
;;;850      }
;;;851      
;;;852    // Check resulting FLL frequency 
;;;853      mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRDIV
;;;854      if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling function
;;;855      
;;;856    // Clear CLKS field to switch CLKS mux to select FLL output
;;;857      MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to select FLL output
;;;858    
;;;859    // Wait for clock status bits to show clock source is FLL
;;;860      for (i = 0 ; i < 2000 ; i++)
;;;861      {
;;;862        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST shows FLL selected before loop finishes
;;;863      }
;;;864      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLL is really selected and return with error if not
;;;865      
;;;866    // Now in FEE mode
;;;867      return mcg_out;
;;;868    } // fbe_fee
000e12  bdf8              POP      {r3-r7,pc}
                  |L1.3604|
000e14  4896              LDR      r0,|L1.4208|
000e16  7840              LDRB     r0,[r0,#1]            ;843
000e18  2130              MOVS     r1,#0x30              ;843
000e1a  4008              ANDS     r0,r0,r1              ;843
000e1c  0900              LSRS     r0,r0,#4              ;843
000e1e  2800              CMP      r0,#0                 ;843
000e20  d00c              BEQ      |L1.3644|
000e22  4893              LDR      r0,|L1.4208|
000e24  7800              LDRB     r0,[r0,#0]            ;845
000e26  2238              MOVS     r2,#0x38              ;845
000e28  4010              ANDS     r0,r0,r2              ;845
000e2a  08c2              LSRS     r2,r0,#3              ;845
000e2c  2020              MOVS     r0,#0x20              ;845
000e2e  4090              LSLS     r0,r0,r2              ;845
000e30  4601              MOV      r1,r0                 ;845
000e32  4638              MOV      r0,r7                 ;845
000e34  f7fffffe          BL       __aeabi_idivmod
000e38  b205              SXTH     r5,r0                 ;845
000e3a  e00b              B        |L1.3668|
                  |L1.3644|
000e3c  488c              LDR      r0,|L1.4208|
000e3e  7840              LDRB     r0,[r0,#1]            ;849
000e40  2230              MOVS     r2,#0x30              ;849
000e42  4010              ANDS     r0,r0,r2              ;849
000e44  0902              LSRS     r2,r0,#4              ;849
000e46  2001              MOVS     r0,#1                 ;849
000e48  4090              LSLS     r0,r0,r2              ;849
000e4a  4601              MOV      r1,r0                 ;849
000e4c  4638              MOV      r0,r7                 ;849
000e4e  f7fffffe          BL       __aeabi_idivmod
000e52  b205              SXTH     r5,r0                 ;849
                  |L1.3668|
000e54  4628              MOV      r0,r5                 ;853
000e56  f7fffffe          BL       fll_freq
000e5a  4606              MOV      r6,r0                 ;853
000e5c  2e3c              CMP      r6,#0x3c              ;854
000e5e  da01              BGE      |L1.3684|
000e60  4630              MOV      r0,r6                 ;854
000e62  e7d6              B        |L1.3602|
                  |L1.3684|
000e64  4882              LDR      r0,|L1.4208|
000e66  7800              LDRB     r0,[r0,#0]            ;857
000e68  21c0              MOVS     r1,#0xc0              ;857
000e6a  4388              BICS     r0,r0,r1              ;857
000e6c  4980              LDR      r1,|L1.4208|
000e6e  7008              STRB     r0,[r1,#0]            ;857
000e70  2400              MOVS     r4,#0                 ;860
000e72  e009              B        |L1.3720|
                  |L1.3700|
000e74  487e              LDR      r0,|L1.4208|
000e76  7980              LDRB     r0,[r0,#6]            ;862
000e78  210c              MOVS     r1,#0xc               ;862
000e7a  4008              ANDS     r0,r0,r1              ;862
000e7c  0880              LSRS     r0,r0,#2              ;862
000e7e  2800              CMP      r0,#0                 ;862
000e80  d100              BNE      |L1.3716|
000e82  e005              B        |L1.3728|
                  |L1.3716|
000e84  1c60              ADDS     r0,r4,#1              ;860
000e86  b204              SXTH     r4,r0                 ;860
                  |L1.3720|
000e88  207d              MOVS     r0,#0x7d              ;860
000e8a  0100              LSLS     r0,r0,#4              ;860
000e8c  4284              CMP      r4,r0                 ;860
000e8e  dbf1              BLT      |L1.3700|
                  |L1.3728|
000e90  bf00              NOP                            ;862
000e92  4877              LDR      r0,|L1.4208|
000e94  7980              LDRB     r0,[r0,#6]            ;864
000e96  210c              MOVS     r1,#0xc               ;864
000e98  4008              ANDS     r0,r0,r1              ;864
000e9a  0880              LSRS     r0,r0,#2              ;864
000e9c  2800              CMP      r0,#0                 ;864
000e9e  d001              BEQ      |L1.3748|
000ea0  2018              MOVS     r0,#0x18              ;864
000ea2  e7b6              B        |L1.3602|
                  |L1.3748|
000ea4  4630              MOV      r0,r6                 ;867
000ea6  e7b4              B        |L1.3602|
;;;869    
                          ENDP

                  fee_fbe PROC
;;;870    
;;;871    int fee_fbe(int crystal_val)
000ea8  4602              MOV      r2,r0
;;;872    { 
;;;873      short i;
;;;874      
;;;875    // Check MCG is in FEE mode
;;;876      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted FLL
000eaa  4871              LDR      r0,|L1.4208|
000eac  7980              LDRB     r0,[r0,#6]
000eae  230c              MOVS     r3,#0xc
000eb0  4018              ANDS     r0,r0,r3
000eb2  0880              LSRS     r0,r0,#2
000eb4  2800              CMP      r0,#0
000eb6  d10b              BNE      |L1.3792|
000eb8  486d              LDR      r0,|L1.4208|
000eba  7980              LDRB     r0,[r0,#6]
000ebc  2310              MOVS     r3,#0x10
000ebe  4018              ANDS     r0,r0,r3
000ec0  2800              CMP      r0,#0
000ec2  d105              BNE      |L1.3792|
000ec4  486a              LDR      r0,|L1.4208|
000ec6  7980              LDRB     r0,[r0,#6]
000ec8  2320              MOVS     r3,#0x20
000eca  4018              ANDS     r0,r0,r3
000ecc  2800              CMP      r0,#0
000ece  d001              BEQ      |L1.3796|
                  |L1.3792|
;;;877          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;878          (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selected FLL
;;;879      {
;;;880        return 0x2;                                                       // return error code
000ed0  2002              MOVS     r0,#2
                  |L1.3794|
;;;881      }
;;;882      
;;;883    // Set CLKS field to 2 to switch CLKS mux to select ext ref clock
;;;884    // MCG is current in FEE mode so CLKS field = 0 so can just OR in new value
;;;885      MCG_C1 |= MCG_C1_CLKS(2); // set CLKS to select ext ref clock
;;;886    
;;;887    /// Wait for clock status bits to show clock source is ext ref clk
;;;888      for (i = 0 ; i < 2000 ; i++)
;;;889      {
;;;890        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST shows EXT CLK slected before loop finishes
;;;891      }
;;;892      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is really selected and return with error if not
;;;893      
;;;894    // Now in FBE mode
;;;895      return crystal_val;
;;;896    } // fee_fbe
000ed2  4770              BX       lr
                  |L1.3796|
000ed4  4866              LDR      r0,|L1.4208|
000ed6  7800              LDRB     r0,[r0,#0]            ;885
000ed8  2380              MOVS     r3,#0x80              ;885
000eda  4318              ORRS     r0,r0,r3              ;885
000edc  4b64              LDR      r3,|L1.4208|
000ede  7018              STRB     r0,[r3,#0]            ;885
000ee0  2100              MOVS     r1,#0                 ;888
000ee2  e009              B        |L1.3832|
                  |L1.3812|
000ee4  4862              LDR      r0,|L1.4208|
000ee6  7980              LDRB     r0,[r0,#6]            ;890
000ee8  230c              MOVS     r3,#0xc               ;890
000eea  4018              ANDS     r0,r0,r3              ;890
000eec  0880              LSRS     r0,r0,#2              ;890
000eee  2802              CMP      r0,#2                 ;890
000ef0  d100              BNE      |L1.3828|
000ef2  e005              B        |L1.3840|
                  |L1.3828|
000ef4  1c48              ADDS     r0,r1,#1              ;888
000ef6  b201              SXTH     r1,r0                 ;888
                  |L1.3832|
000ef8  207d              MOVS     r0,#0x7d              ;888
000efa  0100              LSLS     r0,r0,#4              ;888
000efc  4281              CMP      r1,r0                 ;888
000efe  dbf1              BLT      |L1.3812|
                  |L1.3840|
000f00  bf00              NOP                            ;890
000f02  485b              LDR      r0,|L1.4208|
000f04  7980              LDRB     r0,[r0,#6]            ;892
000f06  230c              MOVS     r3,#0xc               ;892
000f08  4018              ANDS     r0,r0,r3              ;892
000f0a  0880              LSRS     r0,r0,#2              ;892
000f0c  2802              CMP      r0,#2                 ;892
000f0e  d001              BEQ      |L1.3860|
000f10  201a              MOVS     r0,#0x1a              ;892
000f12  e7de              B        |L1.3794|
                  |L1.3860|
000f14  4610              MOV      r0,r2                 ;895
000f16  e7dc              B        |L1.3794|
;;;897    
                          ENDP

                  fbe_fbi PROC
;;;898    
;;;899    int fbe_fbi(int irc_freq, unsigned char irc_select)
000f18  b5f8              PUSH     {r3-r7,lr}
;;;900    {
000f1a  4605              MOV      r5,r0
000f1c  460e              MOV      r6,r1
;;;901      unsigned char temp_reg;
;;;902      unsigned char fcrdiv_val;
;;;903      short i;
;;;904      
;;;905    // Check MCG is in FBE mode
;;;906      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
000f1e  4854              LDR      r0,|L1.4208|
000f20  7980              LDRB     r0,[r0,#6]
000f22  210c              MOVS     r1,#0xc
000f24  4008              ANDS     r0,r0,r1
000f26  0880              LSRS     r0,r0,#2
000f28  2802              CMP      r0,#2
000f2a  d111              BNE      |L1.3920|
000f2c  4850              LDR      r0,|L1.4208|
000f2e  7980              LDRB     r0,[r0,#6]
000f30  2110              MOVS     r1,#0x10
000f32  4008              ANDS     r0,r0,r1
000f34  2800              CMP      r0,#0
000f36  d10b              BNE      |L1.3920|
000f38  484d              LDR      r0,|L1.4208|
000f3a  7980              LDRB     r0,[r0,#6]
000f3c  2120              MOVS     r1,#0x20
000f3e  4008              ANDS     r0,r0,r1
000f40  2800              CMP      r0,#0
000f42  d105              BNE      |L1.3920|
000f44  484a              LDR      r0,|L1.4208|
000f46  7840              LDRB     r0,[r0,#1]
000f48  2102              MOVS     r1,#2
000f4a  4008              ANDS     r0,r0,r1
000f4c  2800              CMP      r0,#0
000f4e  d001              BEQ      |L1.3924|
                  |L1.3920|
;;;907          (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external ref clk
;;;908          (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;909          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is not set   
;;;910      {
;;;911        return 0x4;                                                       // return error code
000f50  2004              MOVS     r0,#4
                  |L1.3922|
;;;912      }
;;;913    
;;;914    // Check that the irc frequency matches the selected IRC 
;;;915      if (!(irc_select))
;;;916      {    
;;;917        if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
;;;918      }
;;;919      else
;;;920      {
;;;921        if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
;;;922      }
;;;923      
;;;924    // Select the required IRC
;;;925      if (irc_select)
;;;926      {
;;;927        MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRC by setting IRCS
;;;928      }
;;;929      else
;;;930      {
;;;931        MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRC by clearing IRCS
;;;932      }
;;;933      
;;;934    // Make sure the clock monitor is disabled before switching modes otherwise it will trigger
;;;935      MCG_C6 &= ~MCG_C6_CME0_MASK;
;;;936      
;;;937    // Select the IRC as the CLKS mux selection
;;;938      temp_reg = MCG_C1;
;;;939      temp_reg &= ~MCG_C1_CLKS_MASK;                    // clear CLKS bits 
;;;940      temp_reg |= (MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK); // select IRC as MCGOUT and enable IREFS
;;;941      MCG_C1 = temp_reg; // update MCG_C1
;;;942      
;;;943    // wait until internal reference switches to requested irc.
;;;944      if (!(irc_select))
;;;945      {
;;;946        for (i = 0 ; i < 2000 ; i++)
;;;947        {
;;;948          if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishes
;;;949        }
;;;950        if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error if set
;;;951      }
;;;952      else
;;;953      {
;;;954        for (i = 0 ; i < 2000 ; i++)
;;;955        {
;;;956          if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
;;;957        }
;;;958        if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error if not set
;;;959      }
;;;960     
;;;961    // Wait for clock status bits to update
;;;962      for (i = 0 ; i < 2000 ; i++)
;;;963      {
;;;964        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST shows IRC slected before loop finishes
;;;965      }
;;;966      if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really selected and return with error if not
;;;967      
;;;968      // wait for Reference clock Status bit to set
;;;969      for (i = 0 ; i < 2000 ; i++)
;;;970      {
;;;971        if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
;;;972      }
;;;973      if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error if not set
;;;974      
;;;975    // Now in FBI mode
;;;976      
;;;977      if (irc_select)
;;;978      {
;;;979        fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fast IRC divder factor
;;;980        return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by FCRDIV factor
;;;981      }
;;;982      else
;;;983      {
;;;984        return irc_freq; // MCGOUT frequency equals slow IRC frequency
;;;985      }
;;;986    } //fbe_fbi
000f52  bdf8              POP      {r3-r7,pc}
                  |L1.3924|
000f54  2e00              CMP      r6,#0                 ;915
000f56  d107              BNE      |L1.3944|
000f58  484d              LDR      r0,|L1.4240|
000f5a  4285              CMP      r5,r0                 ;917
000f5c  db02              BLT      |L1.3940|
000f5e  484d              LDR      r0,|L1.4244|
000f60  4285              CMP      r5,r0                 ;917
000f62  dd09              BLE      |L1.3960|
                  |L1.3940|
000f64  2031              MOVS     r0,#0x31              ;917
000f66  e7f4              B        |L1.3922|
                  |L1.3944|
000f68  483f              LDR      r0,|L1.4200|
000f6a  4285              CMP      r5,r0                 ;921
000f6c  db02              BLT      |L1.3956|
000f6e  4844              LDR      r0,|L1.4224|
000f70  4285              CMP      r5,r0                 ;921
000f72  dd01              BLE      |L1.3960|
                  |L1.3956|
000f74  2032              MOVS     r0,#0x32              ;921
000f76  e7ec              B        |L1.3922|
                  |L1.3960|
000f78  2e00              CMP      r6,#0                 ;925
000f7a  d006              BEQ      |L1.3978|
000f7c  483c              LDR      r0,|L1.4208|
000f7e  7840              LDRB     r0,[r0,#1]            ;927
000f80  2101              MOVS     r1,#1                 ;927
000f82  4308              ORRS     r0,r0,r1              ;927
000f84  493a              LDR      r1,|L1.4208|
000f86  7048              STRB     r0,[r1,#1]            ;927
000f88  e005              B        |L1.3990|
                  |L1.3978|
000f8a  4839              LDR      r0,|L1.4208|
000f8c  7840              LDRB     r0,[r0,#1]            ;931
000f8e  0840              LSRS     r0,r0,#1              ;931
000f90  0040              LSLS     r0,r0,#1              ;931
000f92  4937              LDR      r1,|L1.4208|
000f94  7048              STRB     r0,[r1,#1]            ;931
                  |L1.3990|
000f96  4836              LDR      r0,|L1.4208|
000f98  7940              LDRB     r0,[r0,#5]            ;935
000f9a  2120              MOVS     r1,#0x20              ;935
000f9c  4388              BICS     r0,r0,r1              ;935
000f9e  4934              LDR      r1,|L1.4208|
000fa0  7148              STRB     r0,[r1,#5]            ;935
000fa2  4608              MOV      r0,r1                 ;938
000fa4  7807              LDRB     r7,[r0,#0]            ;938
000fa6  21c0              MOVS     r1,#0xc0              ;939
000fa8  4638              MOV      r0,r7                 ;939
000faa  4388              BICS     r0,r0,r1              ;939
000fac  4607              MOV      r7,r0                 ;939
000fae  2044              MOVS     r0,#0x44              ;940
000fb0  4307              ORRS     r7,r7,r0              ;940
000fb2  482f              LDR      r0,|L1.4208|
000fb4  7007              STRB     r7,[r0,#0]            ;941
000fb6  2e00              CMP      r6,#0                 ;944
000fb8  d117              BNE      |L1.4074|
000fba  2400              MOVS     r4,#0                 ;946
000fbc  e008              B        |L1.4048|
                  |L1.4030|
000fbe  482c              LDR      r0,|L1.4208|
000fc0  7980              LDRB     r0,[r0,#6]            ;948
000fc2  07c0              LSLS     r0,r0,#31             ;948
000fc4  0fc0              LSRS     r0,r0,#31             ;948
000fc6  2800              CMP      r0,#0                 ;948
000fc8  d100              BNE      |L1.4044|
000fca  e005              B        |L1.4056|
                  |L1.4044|
000fcc  1c60              ADDS     r0,r4,#1              ;946
000fce  b204              SXTH     r4,r0                 ;946
                  |L1.4048|
000fd0  207d              MOVS     r0,#0x7d              ;946
000fd2  0100              LSLS     r0,r0,#4              ;946
000fd4  4284              CMP      r4,r0                 ;946
000fd6  dbf2              BLT      |L1.4030|
                  |L1.4056|
000fd8  bf00              NOP                            ;948
000fda  4825              LDR      r0,|L1.4208|
000fdc  7980              LDRB     r0,[r0,#6]            ;950
000fde  07c0              LSLS     r0,r0,#31             ;950
000fe0  0fc0              LSRS     r0,r0,#31             ;950
000fe2  2800              CMP      r0,#0                 ;950
000fe4  d019              BEQ      |L1.4122|
000fe6  2013              MOVS     r0,#0x13              ;950
000fe8  e7b3              B        |L1.3922|
                  |L1.4074|
000fea  2400              MOVS     r4,#0                 ;954
000fec  e008              B        |L1.4096|
                  |L1.4078|
000fee  4820              LDR      r0,|L1.4208|
000ff0  7980              LDRB     r0,[r0,#6]            ;956
000ff2  07c0              LSLS     r0,r0,#31             ;956
000ff4  0fc0              LSRS     r0,r0,#31             ;956
000ff6  2800              CMP      r0,#0                 ;956
000ff8  d000              BEQ      |L1.4092|
000ffa  e005              B        |L1.4104|
                  |L1.4092|
000ffc  1c60              ADDS     r0,r4,#1              ;954
000ffe  b204              SXTH     r4,r0                 ;954
                  |L1.4096|
001000  207d              MOVS     r0,#0x7d              ;954
001002  0100              LSLS     r0,r0,#4              ;954
001004  4284              CMP      r4,r0                 ;954
001006  dbf2              BLT      |L1.4078|
                  |L1.4104|
001008  bf00              NOP                            ;956
00100a  4819              LDR      r0,|L1.4208|
00100c  7980              LDRB     r0,[r0,#6]            ;958
00100e  07c0              LSLS     r0,r0,#31             ;958
001010  0fc0              LSRS     r0,r0,#31             ;958
001012  2800              CMP      r0,#0                 ;958
001014  d101              BNE      |L1.4122|
001016  2014              MOVS     r0,#0x14              ;958
001018  e79b              B        |L1.3922|
                  |L1.4122|
00101a  2400              MOVS     r4,#0                 ;962
00101c  e009              B        |L1.4146|
                  |L1.4126|
00101e  4814              LDR      r0,|L1.4208|
001020  7980              LDRB     r0,[r0,#6]            ;964
001022  210c              MOVS     r1,#0xc               ;964
001024  4008              ANDS     r0,r0,r1              ;964
001026  0880              LSRS     r0,r0,#2              ;964
001028  2801              CMP      r0,#1                 ;964
00102a  d100              BNE      |L1.4142|
00102c  e005              B        |L1.4154|
                  |L1.4142|
00102e  1c60              ADDS     r0,r4,#1              ;962
001030  b204              SXTH     r4,r0                 ;962
                  |L1.4146|
001032  207d              MOVS     r0,#0x7d              ;962
001034  0100              LSLS     r0,r0,#4              ;962
001036  4284              CMP      r4,r0                 ;962
001038  dbf1              BLT      |L1.4126|
                  |L1.4154|
00103a  bf00              NOP                            ;964
00103c  480c              LDR      r0,|L1.4208|
00103e  7980              LDRB     r0,[r0,#6]            ;966
001040  210c              MOVS     r1,#0xc               ;966
001042  4008              ANDS     r0,r0,r1              ;966
001044  0880              LSRS     r0,r0,#2              ;966
001046  2801              CMP      r0,#1                 ;966
001048  d001              BEQ      |L1.4174|
00104a  2019              MOVS     r0,#0x19              ;966
00104c  e781              B        |L1.3922|
                  |L1.4174|
00104e  2400              MOVS     r4,#0                 ;969
001050  e024              B        |L1.4252|
                  |L1.4178|
001052  4807              LDR      r0,|L1.4208|
001054  7980              LDRB     r0,[r0,#6]            ;971
001056  2110              MOVS     r1,#0x10              ;971
001058  4008              ANDS     r0,r0,r1              ;971
00105a  2800              CMP      r0,#0                 ;971
00105c  d01c              BEQ      |L1.4248|
00105e  e021              B        |L1.4260|
                  |L1.4192|
                          DCD      0x00007530
                  |L1.4196|
                          DCD      0x00009c40
                  |L1.4200|
                          DCD      0x002dc6c0
                  |L1.4204|
                          DCD      0x01e84800
                  |L1.4208|
                          DCD      0x40064000
                  |L1.4212|
                          DCD      0x007a1200
                  |L1.4216|
                          DCD      0x001312d0
                  |L1.4220|
                          DCD      0x002625a0
                  |L1.4224|
                          DCD      0x004c4b40
                  |L1.4228|
                          DCD      0x00989680
                  |L1.4232|
                          DCD      0x01312d00
                  |L1.4236|
                          DCD      0x00002710
                  |L1.4240|
                          DCD      0x00007a12
                  |L1.4244|
                          DCD      0x00009897
                  |L1.4248|
001098  1c60              ADDS     r0,r4,#1              ;969
00109a  b204              SXTH     r4,r0                 ;969
                  |L1.4252|
00109c  207d              MOVS     r0,#0x7d              ;969
00109e  0100              LSLS     r0,r0,#4              ;969
0010a0  4284              CMP      r4,r0                 ;969
0010a2  dbd6              BLT      |L1.4178|
                  |L1.4260|
0010a4  bf00              NOP                            ;971
0010a6  48fa              LDR      r0,|L1.5264|
0010a8  7980              LDRB     r0,[r0,#6]            ;973
0010aa  2110              MOVS     r1,#0x10              ;973
0010ac  4008              ANDS     r0,r0,r1              ;973
0010ae  2800              CMP      r0,#0                 ;973
0010b0  d101              BNE      |L1.4278|
0010b2  2012              MOVS     r0,#0x12              ;973
0010b4  e74d              B        |L1.3922|
                  |L1.4278|
0010b6  2e00              CMP      r6,#0                 ;977
0010b8  d00d              BEQ      |L1.4310|
0010ba  48f5              LDR      r0,|L1.5264|
0010bc  7a00              LDRB     r0,[r0,#8]            ;979
0010be  210e              MOVS     r1,#0xe               ;979
0010c0  4008              ANDS     r0,r0,r1              ;979
0010c2  0841              LSRS     r1,r0,#1              ;979
0010c4  2001              MOVS     r0,#1                 ;979
0010c6  4088              LSLS     r0,r0,r1              ;979
0010c8  b2c0              UXTB     r0,r0                 ;979
0010ca  9000              STR      r0,[sp,#0]            ;979
0010cc  4628              MOV      r0,r5                 ;980
0010ce  9900              LDR      r1,[sp,#0]            ;980
0010d0  f7fffffe          BL       __aeabi_idivmod
0010d4  e73d              B        |L1.3922|
                  |L1.4310|
0010d6  4628              MOV      r0,r5                 ;984
0010d8  e73b              B        |L1.3922|
;;;987    
                          ENDP

                  fbi_fbe PROC
;;;988    
;;;989    int fbi_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
0010da  b5f0              PUSH     {r4-r7,lr}
;;;990    {
0010dc  4603              MOV      r3,r0
0010de  460e              MOV      r6,r1
0010e0  4615              MOV      r5,r2
;;;991      unsigned char temp_reg;
;;;992      unsigned char frdiv_val;
;;;993      short i;
;;;994      
;;;995    // check if in FBI mode
;;;996      if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted int ref clk
0010e2  48eb              LDR      r0,|L1.5264|
0010e4  7980              LDRB     r0,[r0,#6]
0010e6  270c              MOVS     r7,#0xc
0010e8  4038              ANDS     r0,r0,r7
0010ea  0880              LSRS     r0,r0,#2
0010ec  2801              CMP      r0,#1
0010ee  d111              BNE      |L1.4372|
0010f0  48e7              LDR      r0,|L1.5264|
0010f2  7980              LDRB     r0,[r0,#6]
0010f4  2710              MOVS     r7,#0x10
0010f6  4038              ANDS     r0,r0,r7
0010f8  2800              CMP      r0,#0
0010fa  d00b              BEQ      |L1.4372|
0010fc  48e4              LDR      r0,|L1.5264|
0010fe  7980              LDRB     r0,[r0,#6]
001100  2720              MOVS     r7,#0x20
001102  4038              ANDS     r0,r0,r7
001104  2800              CMP      r0,#0
001106  d105              BNE      |L1.4372|
001108  48e1              LDR      r0,|L1.5264|
00110a  7840              LDRB     r0,[r0,#1]
00110c  2702              MOVS     r7,#2
00110e  4038              ANDS     r0,r0,r7
001110  2800              CMP      r0,#0
001112  d001              BEQ      |L1.4376|
                  |L1.4372|
;;;997          (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;998          (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;999          (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
;;;1000     {  
;;;1001       return 0x3;                                                       // MCG not in correct mode return fail code 
001114  2003              MOVS     r0,#3
                  |L1.4374|
;;;1002     }
;;;1003    
;;;1004   // check external frequency is less than the maximum frequency
;;;1005     if  (crystal_val > 50000000) {return 0x21;}
;;;1006     
;;;1007   // check crystal frequency is within spec. if crystal osc is being used
;;;1008     if (erefs_val)
;;;1009     {
;;;1010       if ((crystal_val < 30000) ||
;;;1011           ((crystal_val > 40000) && (crystal_val < 3000000)) ||
;;;1012           (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal options is not available
;;;1013     }
;;;1014   
;;;1015   // make sure HGO will never be greater than 1. Could return an error instead if desired.  
;;;1016     if (hgo_val > 0)
;;;1017     {
;;;1018       hgo_val = 1; // force hgo_val to 1 if > 0
;;;1019     }
;;;1020   
;;;1021   // configure the MCG_C2 register
;;;1022   // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the FRDIV divide value
;;;1023   // it still needs to be set correctly even if the oscillator is not being used
;;;1024     temp_reg = MCG_C2;
;;;1025     temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before writing new values
;;;1026     if (crystal_val <= 40000)
;;;1027     {
;;;1028       temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1029     }
;;;1030     else if (crystal_val <= 8000000)
;;;1031     {
;;;1032       temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1033     }
;;;1034     else
;;;1035     {
;;;1036       temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1037     }
;;;1038     MCG_C2 = temp_reg;
;;;1039   
;;;1040   // determine FRDIV based on reference clock frequency
;;;1041   // since the external frequency has already been checked only the maximum frequency for each FRDIV value needs to be compared here.
;;;1042     if (crystal_val <= 1250000) {frdiv_val = 0;}
;;;1043     else if (crystal_val <= 2500000) {frdiv_val = 1;}
;;;1044     else if (crystal_val <= 5000000) {frdiv_val = 2;}
;;;1045     else if (crystal_val <= 10000000) {frdiv_val = 3;}
;;;1046     else if (crystal_val <= 20000000) {frdiv_val = 4;}
;;;1047     else {frdiv_val = 5;}
;;;1048     
;;;1049   // Select external oscilator and Reference Divider and clear IREFS to start ext osc
;;;1050   // If IRCLK is required it must be enabled outside of this driver, existing state will be maintained
;;;1051   // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
;;;1052     temp_reg = MCG_C1;
;;;1053     temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these fields
;;;1054     temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
;;;1055     MCG_C1 = temp_reg;
;;;1056   
;;;1057   // if the external oscillator is used need to wait for OSCINIT to set
;;;1058     if (erefs_val)
;;;1059     {
;;;1060       for (i = 0 ; i < 10000 ; i++)
;;;1061       {
;;;1062         if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishes
;;;1063       }
;;;1064       if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with error if not set
;;;1065     }
;;;1066   
;;;1067   // wait for Reference clock Status bit to clear
;;;1068     for (i = 0 ; i < 2000 ; i++)
;;;1069     {
;;;1070       if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishes
;;;1071     }
;;;1072     if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if not set
;;;1073     
;;;1074   // Wait for clock status bits to show clock source is ext ref clk
;;;1075     for (i = 0 ; i < 2000 ; i++)
;;;1076     {
;;;1077       if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST shows EXT CLK slected before loop finishes
;;;1078     }
;;;1079     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is really selected and return with error if not
;;;1080    
;;;1081   // Now in FBE  
;;;1082   // It is recommended that the clock monitor is enabled when using an external clock as the clock source/reference.
;;;1083   // It is enabled here but can be removed if this is not required.
;;;1084     MCG_C6 |= MCG_C6_CME0_MASK;
;;;1085     
;;;1086     return crystal_val; // MCGOUT frequency equals external clock frequency  
;;;1087   } // fbi_fbe
001116  bdf0              POP      {r4-r7,pc}
                  |L1.4376|
001118  48de              LDR      r0,|L1.5268|
00111a  4283              CMP      r3,r0                 ;1005
00111c  dd01              BLE      |L1.4386|
00111e  2021              MOVS     r0,#0x21              ;1005
001120  e7f9              B        |L1.4374|
                  |L1.4386|
001122  2d00              CMP      r5,#0                 ;1008
001124  d00d              BEQ      |L1.4418|
001126  48dc              LDR      r0,|L1.5272|
001128  4283              CMP      r3,r0                 ;1010
00112a  db08              BLT      |L1.4414|
00112c  48db              LDR      r0,|L1.5276|
00112e  4283              CMP      r3,r0                 ;1011
001130  dd02              BLE      |L1.4408|
001132  48db              LDR      r0,|L1.5280|
001134  4283              CMP      r3,r0                 ;1011
001136  db02              BLT      |L1.4414|
                  |L1.4408|
001138  48da              LDR      r0,|L1.5284|
00113a  4283              CMP      r3,r0                 ;1012
00113c  dd01              BLE      |L1.4418|
                  |L1.4414|
00113e  2022              MOVS     r0,#0x22              ;1012
001140  e7e9              B        |L1.4374|
                  |L1.4418|
001142  2e00              CMP      r6,#0                 ;1016
001144  dd00              BLE      |L1.4424|
001146  2601              MOVS     r6,#1                 ;1018
                  |L1.4424|
001148  48d1              LDR      r0,|L1.5264|
00114a  7841              LDRB     r1,[r0,#1]            ;1024
00114c  203c              MOVS     r0,#0x3c              ;1025
00114e  460f              MOV      r7,r1                 ;1025
001150  4387              BICS     r7,r7,r0              ;1025
001152  4639              MOV      r1,r7                 ;1025
001154  48d1              LDR      r0,|L1.5276|
001156  4283              CMP      r3,r0                 ;1026
001158  dc05              BGT      |L1.4454|
00115a  00f0              LSLS     r0,r6,#3              ;1028
00115c  00af              LSLS     r7,r5,#2              ;1028
00115e  4338              ORRS     r0,r0,r7              ;1028
001160  4308              ORRS     r0,r0,r1              ;1028
001162  b2c1              UXTB     r1,r0                 ;1028
001164  e011              B        |L1.4490|
                  |L1.4454|
001166  48d0              LDR      r0,|L1.5288|
001168  4283              CMP      r3,r0                 ;1030
00116a  dc07              BGT      |L1.4476|
00116c  00f0              LSLS     r0,r6,#3              ;1032
00116e  2710              MOVS     r7,#0x10              ;1032
001170  4338              ORRS     r0,r0,r7              ;1032
001172  00af              LSLS     r7,r5,#2              ;1032
001174  4338              ORRS     r0,r0,r7              ;1032
001176  4308              ORRS     r0,r0,r1              ;1032
001178  b2c1              UXTB     r1,r0                 ;1032
00117a  e006              B        |L1.4490|
                  |L1.4476|
00117c  00f0              LSLS     r0,r6,#3              ;1036
00117e  2720              MOVS     r7,#0x20              ;1036
001180  4338              ORRS     r0,r0,r7              ;1036
001182  00af              LSLS     r7,r5,#2              ;1036
001184  4338              ORRS     r0,r0,r7              ;1036
001186  4308              ORRS     r0,r0,r1              ;1036
001188  b2c1              UXTB     r1,r0                 ;1036
                  |L1.4490|
00118a  48c1              LDR      r0,|L1.5264|
00118c  7041              STRB     r1,[r0,#1]            ;1038
00118e  48c7              LDR      r0,|L1.5292|
001190  4283              CMP      r3,r0                 ;1042
001192  dc01              BGT      |L1.4504|
001194  2200              MOVS     r2,#0                 ;1042
001196  e014              B        |L1.4546|
                  |L1.4504|
001198  48c5              LDR      r0,|L1.5296|
00119a  4283              CMP      r3,r0                 ;1043
00119c  dc01              BGT      |L1.4514|
00119e  2201              MOVS     r2,#1                 ;1043
0011a0  e00f              B        |L1.4546|
                  |L1.4514|
0011a2  48c4              LDR      r0,|L1.5300|
0011a4  4283              CMP      r3,r0                 ;1044
0011a6  dc01              BGT      |L1.4524|
0011a8  2202              MOVS     r2,#2                 ;1044
0011aa  e00a              B        |L1.4546|
                  |L1.4524|
0011ac  48c2              LDR      r0,|L1.5304|
0011ae  4283              CMP      r3,r0                 ;1045
0011b0  dc01              BGT      |L1.4534|
0011b2  2203              MOVS     r2,#3                 ;1045
0011b4  e005              B        |L1.4546|
                  |L1.4534|
0011b6  48c1              LDR      r0,|L1.5308|
0011b8  4283              CMP      r3,r0                 ;1046
0011ba  dc01              BGT      |L1.4544|
0011bc  2204              MOVS     r2,#4                 ;1046
0011be  e000              B        |L1.4546|
                  |L1.4544|
0011c0  2205              MOVS     r2,#5                 ;1047
                  |L1.4546|
0011c2  48b3              LDR      r0,|L1.5264|
0011c4  7801              LDRB     r1,[r0,#0]            ;1052
0011c6  20fc              MOVS     r0,#0xfc              ;1053
0011c8  460f              MOV      r7,r1                 ;1053
0011ca  4387              BICS     r7,r7,r0              ;1053
0011cc  4639              MOV      r1,r7                 ;1053
0011ce  00d0              LSLS     r0,r2,#3              ;1054
0011d0  2738              MOVS     r7,#0x38              ;1054
0011d2  4038              ANDS     r0,r0,r7              ;1054
0011d4  2780              MOVS     r7,#0x80              ;1054
0011d6  4338              ORRS     r0,r0,r7              ;1054
0011d8  4301              ORRS     r1,r1,r0              ;1054
0011da  48ad              LDR      r0,|L1.5264|
0011dc  7001              STRB     r1,[r0,#0]            ;1055
0011de  2d00              CMP      r5,#0                 ;1058
0011e0  d016              BEQ      |L1.4624|
0011e2  2400              MOVS     r4,#0                 ;1060
0011e4  e008              B        |L1.4600|
                  |L1.4582|
0011e6  48aa              LDR      r0,|L1.5264|
0011e8  7980              LDRB     r0,[r0,#6]            ;1062
0011ea  2702              MOVS     r7,#2                 ;1062
0011ec  4038              ANDS     r0,r0,r7              ;1062
0011ee  2800              CMP      r0,#0                 ;1062
0011f0  d000              BEQ      |L1.4596|
0011f2  e004              B        |L1.4606|
                  |L1.4596|
0011f4  1c60              ADDS     r0,r4,#1              ;1060
0011f6  b204              SXTH     r4,r0                 ;1060
                  |L1.4600|
0011f8  48b1              LDR      r0,|L1.5312|
0011fa  4284              CMP      r4,r0                 ;1060
0011fc  dbf3              BLT      |L1.4582|
                  |L1.4606|
0011fe  bf00              NOP                            ;1062
001200  48a3              LDR      r0,|L1.5264|
001202  7980              LDRB     r0,[r0,#6]            ;1064
001204  2702              MOVS     r7,#2                 ;1064
001206  4038              ANDS     r0,r0,r7              ;1064
001208  2800              CMP      r0,#0                 ;1064
00120a  d101              BNE      |L1.4624|
00120c  2023              MOVS     r0,#0x23              ;1064
00120e  e782              B        |L1.4374|
                  |L1.4624|
001210  2400              MOVS     r4,#0                 ;1068
001212  e008              B        |L1.4646|
                  |L1.4628|
001214  489e              LDR      r0,|L1.5264|
001216  7980              LDRB     r0,[r0,#6]            ;1070
001218  2710              MOVS     r7,#0x10              ;1070
00121a  4038              ANDS     r0,r0,r7              ;1070
00121c  2800              CMP      r0,#0                 ;1070
00121e  d100              BNE      |L1.4642|
001220  e005              B        |L1.4654|
                  |L1.4642|
001222  1c60              ADDS     r0,r4,#1              ;1068
001224  b204              SXTH     r4,r0                 ;1068
                  |L1.4646|
001226  207d              MOVS     r0,#0x7d              ;1068
001228  0100              LSLS     r0,r0,#4              ;1068
00122a  4284              CMP      r4,r0                 ;1068
00122c  dbf2              BLT      |L1.4628|
                  |L1.4654|
00122e  bf00              NOP                            ;1070
001230  4897              LDR      r0,|L1.5264|
001232  7980              LDRB     r0,[r0,#6]            ;1072
001234  2710              MOVS     r7,#0x10              ;1072
001236  4038              ANDS     r0,r0,r7              ;1072
001238  2800              CMP      r0,#0                 ;1072
00123a  d001              BEQ      |L1.4672|
00123c  2011              MOVS     r0,#0x11              ;1072
00123e  e76a              B        |L1.4374|
                  |L1.4672|
001240  2400              MOVS     r4,#0                 ;1075
001242  e009              B        |L1.4696|
                  |L1.4676|
001244  4892              LDR      r0,|L1.5264|
001246  7980              LDRB     r0,[r0,#6]            ;1077
001248  270c              MOVS     r7,#0xc               ;1077
00124a  4038              ANDS     r0,r0,r7              ;1077
00124c  0880              LSRS     r0,r0,#2              ;1077
00124e  2802              CMP      r0,#2                 ;1077
001250  d100              BNE      |L1.4692|
001252  e005              B        |L1.4704|
                  |L1.4692|
001254  1c60              ADDS     r0,r4,#1              ;1075
001256  b204              SXTH     r4,r0                 ;1075
                  |L1.4696|
001258  207d              MOVS     r0,#0x7d              ;1075
00125a  0100              LSLS     r0,r0,#4              ;1075
00125c  4284              CMP      r4,r0                 ;1075
00125e  dbf1              BLT      |L1.4676|
                  |L1.4704|
001260  bf00              NOP                            ;1077
001262  488b              LDR      r0,|L1.5264|
001264  7980              LDRB     r0,[r0,#6]            ;1079
001266  270c              MOVS     r7,#0xc               ;1079
001268  4038              ANDS     r0,r0,r7              ;1079
00126a  0880              LSRS     r0,r0,#2              ;1079
00126c  2802              CMP      r0,#2                 ;1079
00126e  d001              BEQ      |L1.4724|
001270  201a              MOVS     r0,#0x1a              ;1079
001272  e750              B        |L1.4374|
                  |L1.4724|
001274  4886              LDR      r0,|L1.5264|
001276  7940              LDRB     r0,[r0,#5]            ;1084
001278  2720              MOVS     r7,#0x20              ;1084
00127a  4338              ORRS     r0,r0,r7              ;1084
00127c  4f84              LDR      r7,|L1.5264|
00127e  7178              STRB     r0,[r7,#5]            ;1084
001280  4618              MOV      r0,r3                 ;1086
001282  e748              B        |L1.4374|
;;;1088   
                          ENDP

                  fbi_blpi PROC
;;;1104    */
;;;1105   int fbi_blpi(int irc_freq, unsigned char irc_select)
001284  b570              PUSH     {r4-r6,lr}
;;;1106   {
001286  4606              MOV      r6,r0
001288  460c              MOV      r4,r1
;;;1107     unsigned char fcrdiv_val;
;;;1108     
;;;1109   // check if in FBI mode
;;;1110     if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted int ref clk
00128a  4881              LDR      r0,|L1.5264|
00128c  7980              LDRB     r0,[r0,#6]
00128e  210c              MOVS     r1,#0xc
001290  4008              ANDS     r0,r0,r1
001292  0880              LSRS     r0,r0,#2
001294  2801              CMP      r0,#1
001296  d111              BNE      |L1.4796|
001298  487d              LDR      r0,|L1.5264|
00129a  7980              LDRB     r0,[r0,#6]
00129c  2110              MOVS     r1,#0x10
00129e  4008              ANDS     r0,r0,r1
0012a0  2800              CMP      r0,#0
0012a2  d00b              BEQ      |L1.4796|
0012a4  487a              LDR      r0,|L1.5264|
0012a6  7980              LDRB     r0,[r0,#6]
0012a8  2120              MOVS     r1,#0x20
0012aa  4008              ANDS     r0,r0,r1
0012ac  2800              CMP      r0,#0
0012ae  d105              BNE      |L1.4796|
0012b0  4877              LDR      r0,|L1.5264|
0012b2  7840              LDRB     r0,[r0,#1]
0012b4  2102              MOVS     r1,#2
0012b6  4008              ANDS     r0,r0,r1
0012b8  2800              CMP      r0,#0
0012ba  d001              BEQ      |L1.4800|
                  |L1.4796|
;;;1111         (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;1112         (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;1113         (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
;;;1114     {  
;;;1115       return 0x3;                                                       // MCG not in correct mode return fail code 
0012bc  2003              MOVS     r0,#3
                  |L1.4798|
;;;1116     }
;;;1117   
;;;1118   // Set LP bit to disable the FLL and enter BLPI
;;;1119     MCG_C2 |= MCG_C2_LP_MASK;
;;;1120     
;;;1121   // Now in BLPI
;;;1122     if (irc_select)
;;;1123     {
;;;1124       fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fast IRC divder factor
;;;1125       return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
;;;1126     }
;;;1127     else
;;;1128     {
;;;1129       return irc_freq; // MCGOUT frequency equals slow IRC frequency
;;;1130     }   
;;;1131   } // fbi_blpi
0012be  bd70              POP      {r4-r6,pc}
                  |L1.4800|
0012c0  4873              LDR      r0,|L1.5264|
0012c2  7840              LDRB     r0,[r0,#1]            ;1119
0012c4  2102              MOVS     r1,#2                 ;1119
0012c6  4308              ORRS     r0,r0,r1              ;1119
0012c8  4971              LDR      r1,|L1.5264|
0012ca  7048              STRB     r0,[r1,#1]            ;1119
0012cc  2c00              CMP      r4,#0                 ;1122
0012ce  d00c              BEQ      |L1.4842|
0012d0  4608              MOV      r0,r1                 ;1124
0012d2  7a00              LDRB     r0,[r0,#8]            ;1124
0012d4  210e              MOVS     r1,#0xe               ;1124
0012d6  4008              ANDS     r0,r0,r1              ;1124
0012d8  0841              LSRS     r1,r0,#1              ;1124
0012da  2001              MOVS     r0,#1                 ;1124
0012dc  4088              LSLS     r0,r0,r1              ;1124
0012de  b2c5              UXTB     r5,r0                 ;1124
0012e0  4629              MOV      r1,r5                 ;1125
0012e2  4630              MOV      r0,r6                 ;1125
0012e4  f7fffffe          BL       __aeabi_idivmod
0012e8  e7e9              B        |L1.4798|
                  |L1.4842|
0012ea  4630              MOV      r0,r6                 ;1129
0012ec  e7e7              B        |L1.4798|
;;;1132   
                          ENDP

                  blpi_fbi PROC
;;;1149    */
;;;1150   int blpi_fbi(int irc_freq, unsigned char irc_select)
0012ee  b570              PUSH     {r4-r6,lr}
;;;1151   {
0012f0  4606              MOV      r6,r0
0012f2  460c              MOV      r4,r1
;;;1152     unsigned char fcrdiv_val;
;;;1153     // check if in BLPI mode
;;;1154     if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted int ref clk
0012f4  4866              LDR      r0,|L1.5264|
0012f6  7980              LDRB     r0,[r0,#6]
0012f8  210c              MOVS     r1,#0xc
0012fa  4008              ANDS     r0,r0,r1
0012fc  0880              LSRS     r0,r0,#2
0012fe  2801              CMP      r0,#1
001300  d111              BNE      |L1.4902|
001302  4863              LDR      r0,|L1.5264|
001304  7980              LDRB     r0,[r0,#6]
001306  2110              MOVS     r1,#0x10
001308  4008              ANDS     r0,r0,r1
00130a  2800              CMP      r0,#0
00130c  d00b              BEQ      |L1.4902|
00130e  4860              LDR      r0,|L1.5264|
001310  7980              LDRB     r0,[r0,#6]
001312  2120              MOVS     r1,#0x20
001314  4008              ANDS     r0,r0,r1
001316  2800              CMP      r0,#0
001318  d105              BNE      |L1.4902|
00131a  485d              LDR      r0,|L1.5264|
00131c  7840              LDRB     r0,[r0,#1]
00131e  2102              MOVS     r1,#2
001320  4008              ANDS     r0,r0,r1
001322  2800              CMP      r0,#0
001324  d101              BNE      |L1.4906|
                  |L1.4902|
;;;1155         (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;1156         (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;1157         (MCG_C2 & MCG_C2_LP_MASK)))                                     // check LP bit is set
;;;1158     {
;;;1159       return 0x5;                                                       // MCG not in correct mode return fail code
001326  2005              MOVS     r0,#5
                  |L1.4904|
;;;1160     }
;;;1161   
;;;1162   // Clear LP bit to enable the FLL and enter FBI mode   
;;;1163     MCG_C2 &= ~MCG_C2_LP_MASK;
;;;1164     
;;;1165   // Now in FBI mode
;;;1166     if (irc_select)
;;;1167     {
;;;1168       fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fast IRC divder factor
;;;1169       return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
;;;1170     }
;;;1171     else
;;;1172     {
;;;1173       return irc_freq; // MCGOUT frequency equals slow IRC frequency
;;;1174     }
;;;1175   } // blpi_fbi
001328  bd70              POP      {r4-r6,pc}
                  |L1.4906|
00132a  4859              LDR      r0,|L1.5264|
00132c  7840              LDRB     r0,[r0,#1]            ;1163
00132e  2102              MOVS     r1,#2                 ;1163
001330  4388              BICS     r0,r0,r1              ;1163
001332  4957              LDR      r1,|L1.5264|
001334  7048              STRB     r0,[r1,#1]            ;1163
001336  2c00              CMP      r4,#0                 ;1166
001338  d00c              BEQ      |L1.4948|
00133a  4608              MOV      r0,r1                 ;1168
00133c  7a00              LDRB     r0,[r0,#8]            ;1168
00133e  210e              MOVS     r1,#0xe               ;1168
001340  4008              ANDS     r0,r0,r1              ;1168
001342  0841              LSRS     r1,r0,#1              ;1168
001344  2001              MOVS     r0,#1                 ;1168
001346  4088              LSLS     r0,r0,r1              ;1168
001348  b2c5              UXTB     r5,r0                 ;1168
00134a  4629              MOV      r1,r5                 ;1169
00134c  4630              MOV      r0,r6                 ;1169
00134e  f7fffffe          BL       __aeabi_idivmod
001352  e7e9              B        |L1.4904|
                  |L1.4948|
001354  4630              MOV      r0,r6                 ;1173
001356  e7e7              B        |L1.4904|
;;;1176   
                          ENDP

                  fbi_fee PROC
;;;1177   
;;;1178   int fbi_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
001358  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1179   {
00135a  b082              SUB      sp,sp,#8
00135c  4604              MOV      r4,r0
;;;1180     unsigned char temp_reg;
;;;1181     unsigned char frdiv_val;
;;;1182     short i;
;;;1183     int mcg_out, fll_ref_freq;
;;;1184   
;;;1185   // check if in FBI mode
;;;1186     if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted int ref clk
00135e  484c              LDR      r0,|L1.5264|
001360  7980              LDRB     r0,[r0,#6]
001362  210c              MOVS     r1,#0xc
001364  4008              ANDS     r0,r0,r1
001366  0880              LSRS     r0,r0,#2
001368  2801              CMP      r0,#1
00136a  d111              BNE      |L1.5008|
00136c  4848              LDR      r0,|L1.5264|
00136e  7980              LDRB     r0,[r0,#6]
001370  2110              MOVS     r1,#0x10
001372  4008              ANDS     r0,r0,r1
001374  2800              CMP      r0,#0
001376  d00b              BEQ      |L1.5008|
001378  4845              LDR      r0,|L1.5264|
00137a  7980              LDRB     r0,[r0,#6]
00137c  2120              MOVS     r1,#0x20
00137e  4008              ANDS     r0,r0,r1
001380  2800              CMP      r0,#0
001382  d105              BNE      |L1.5008|
001384  4842              LDR      r0,|L1.5264|
001386  7840              LDRB     r0,[r0,#1]
001388  2102              MOVS     r1,#2
00138a  4008              ANDS     r0,r0,r1
00138c  2800              CMP      r0,#0
00138e  d002              BEQ      |L1.5014|
                  |L1.5008|
;;;1187         (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;1188         (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;1189         (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
;;;1190     {  
;;;1191       return 0x3;                                                       // MCG not in correct mode return fail code 
001390  2003              MOVS     r0,#3
                  |L1.5010|
;;;1192     }
;;;1193     
;;;1194   // check external frequency is less than the maximum frequency
;;;1195     if  (crystal_val > 50000000) {return 0x21;}
;;;1196     
;;;1197   // check crystal frequency is within spec. if crystal osc is being used
;;;1198     if (erefs_val)
;;;1199     {
;;;1200       if ((crystal_val < 30000) ||
;;;1201           ((crystal_val > 40000) && (crystal_val < 3000000)) ||
;;;1202           (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal options is not available
;;;1203     }
;;;1204   
;;;1205   // make sure HGO will never be greater than 1. Could return an error instead if desired.  
;;;1206     if (hgo_val > 0)
;;;1207     {
;;;1208       hgo_val = 1; // force hgo_val to 1 if > 0
;;;1209     }
;;;1210   
;;;1211   // configure the MCG_C2 register
;;;1212   // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the FRDIV divide value
;;;1213   // it still needs to be set correctly even if the oscillator is not being used
;;;1214     temp_reg = MCG_C2;
;;;1215     temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before writing new values
;;;1216     if (crystal_val <= 40000)
;;;1217     {
;;;1218       temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1219     }
;;;1220     else if (crystal_val <= 8000000)
;;;1221     {
;;;1222       temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1223     }
;;;1224     else
;;;1225     {
;;;1226       temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1227     }
;;;1228     MCG_C2 = temp_reg;
;;;1229   
;;;1230   // determine FRDIV based on reference clock frequency
;;;1231   // since the external frequency has already been checked only the maximum frequency for each FRDIV value needs to be compared here.
;;;1232     if (crystal_val <= 1250000) {frdiv_val = 0;}
;;;1233     else if (crystal_val <= 2500000) {frdiv_val = 1;}
;;;1234     else if (crystal_val <= 5000000) {frdiv_val = 2;}
;;;1235     else if (crystal_val <= 10000000) {frdiv_val = 3;}
;;;1236     else if (crystal_val <= 20000000) {frdiv_val = 4;}
;;;1237     else {frdiv_val = 5;}
;;;1238   // The FLL ref clk divide value depends on FRDIV and the RANGE value
;;;1239     if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
;;;1240     {
;;;1241       fll_ref_freq = ((crystal_val) / (32 << frdiv_val));
;;;1242     }
;;;1243     else
;;;1244     {
;;;1245       fll_ref_freq = ((crystal_val) / (1 << frdiv_val));
;;;1246     }
;;;1247     
;;;1248   // Check resulting FLL frequency 
;;;1249     mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRDIV
;;;1250     if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling function
;;;1251     
;;;1252   // Select external oscilator and Reference Divider and clear IREFS to start ext osc
;;;1253   // If IRCLK is required it must be enabled outside of this driver, existing state will be maintained
;;;1254   // CLKS=0, FRDIV=frdiv_val, IREFS=0, IRCLKEN=?, IREFSTEN=?
;;;1255     temp_reg = MCG_C1;
;;;1256     temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear CLKS, FRDIV and IREFS fields
;;;1257     temp_reg |= (MCG_C1_CLKS(0) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
;;;1258     MCG_C1 = temp_reg;
;;;1259   
;;;1260   // if the external oscillator is used need to wait for OSCINIT to set
;;;1261     if (erefs_val)
;;;1262     {
;;;1263       for (i = 0 ; i < 10000 ; i++)
;;;1264       {
;;;1265         if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishes
;;;1266       }
;;;1267       if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with error if not set
;;;1268     }
;;;1269   
;;;1270   // wait for Reference clock Status bit to clear
;;;1271     for (i = 0 ; i < 2000 ; i++)
;;;1272     {
;;;1273       if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishes
;;;1274     }
;;;1275     if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if not set
;;;1276     
;;;1277   // Wait for clock status bits to show clock source is ext ref clk
;;;1278     for (i = 0 ; i < 2000 ; i++)
;;;1279     {
;;;1280       if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST shows FLL selected before loop finishes
;;;1281     }
;;;1282     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLLK is really selected and return with error if not
;;;1283    
;;;1284   // Now in FEE  
;;;1285   // It is recommended that the clock monitor is enabled when using an external clock as the clock source/reference.
;;;1286   // It is enabled here but can be removed if this is not required.
;;;1287   // The clock monitor MUST be disabled when returning to a non-external clock mode (FEI, FBI and BLPI)
;;;1288     MCG_C6 |= MCG_C6_CME0_MASK;
;;;1289     
;;;1290     return mcg_out; // MCGOUT frequency equals FLL frequency
;;;1291   } //fbi_fee
001392  b005              ADD      sp,sp,#0x14
001394  bdf0              POP      {r4-r7,pc}
                  |L1.5014|
001396  483f              LDR      r0,|L1.5268|
001398  4284              CMP      r4,r0                 ;1195
00139a  dd01              BLE      |L1.5024|
00139c  2021              MOVS     r0,#0x21              ;1195
00139e  e7f8              B        |L1.5010|
                  |L1.5024|
0013a0  9804              LDR      r0,[sp,#0x10]         ;1198
0013a2  2800              CMP      r0,#0                 ;1198
0013a4  d00d              BEQ      |L1.5058|
0013a6  483c              LDR      r0,|L1.5272|
0013a8  4284              CMP      r4,r0                 ;1200
0013aa  db08              BLT      |L1.5054|
0013ac  483b              LDR      r0,|L1.5276|
0013ae  4284              CMP      r4,r0                 ;1201
0013b0  dd02              BLE      |L1.5048|
0013b2  483b              LDR      r0,|L1.5280|
0013b4  4284              CMP      r4,r0                 ;1201
0013b6  db02              BLT      |L1.5054|
                  |L1.5048|
0013b8  483a              LDR      r0,|L1.5284|
0013ba  4284              CMP      r4,r0                 ;1202
0013bc  dd01              BLE      |L1.5058|
                  |L1.5054|
0013be  2022              MOVS     r0,#0x22              ;1202
0013c0  e7e7              B        |L1.5010|
                  |L1.5058|
0013c2  9803              LDR      r0,[sp,#0xc]          ;1206
0013c4  2800              CMP      r0,#0                 ;1206
0013c6  dd01              BLE      |L1.5068|
0013c8  2001              MOVS     r0,#1                 ;1208
0013ca  9003              STR      r0,[sp,#0xc]          ;1208
                  |L1.5068|
0013cc  4830              LDR      r0,|L1.5264|
0013ce  7846              LDRB     r6,[r0,#1]            ;1214
0013d0  213c              MOVS     r1,#0x3c              ;1215
0013d2  4630              MOV      r0,r6                 ;1215
0013d4  4388              BICS     r0,r0,r1              ;1215
0013d6  4606              MOV      r6,r0                 ;1215
0013d8  4830              LDR      r0,|L1.5276|
0013da  4284              CMP      r4,r0                 ;1216
0013dc  dc07              BGT      |L1.5102|
0013de  9803              LDR      r0,[sp,#0xc]          ;1218
0013e0  00c0              LSLS     r0,r0,#3              ;1218
0013e2  9904              LDR      r1,[sp,#0x10]         ;1218
0013e4  0089              LSLS     r1,r1,#2              ;1218
0013e6  4308              ORRS     r0,r0,r1              ;1218
0013e8  4330              ORRS     r0,r0,r6              ;1218
0013ea  b2c6              UXTB     r6,r0                 ;1218
0013ec  e015              B        |L1.5146|
                  |L1.5102|
0013ee  482e              LDR      r0,|L1.5288|
0013f0  4284              CMP      r4,r0                 ;1220
0013f2  dc09              BGT      |L1.5128|
0013f4  9803              LDR      r0,[sp,#0xc]          ;1222
0013f6  00c0              LSLS     r0,r0,#3              ;1222
0013f8  2110              MOVS     r1,#0x10              ;1222
0013fa  4308              ORRS     r0,r0,r1              ;1222
0013fc  9904              LDR      r1,[sp,#0x10]         ;1222
0013fe  0089              LSLS     r1,r1,#2              ;1222
001400  4308              ORRS     r0,r0,r1              ;1222
001402  4330              ORRS     r0,r0,r6              ;1222
001404  b2c6              UXTB     r6,r0                 ;1222
001406  e008              B        |L1.5146|
                  |L1.5128|
001408  9803              LDR      r0,[sp,#0xc]          ;1226
00140a  00c0              LSLS     r0,r0,#3              ;1226
00140c  2120              MOVS     r1,#0x20              ;1226
00140e  4308              ORRS     r0,r0,r1              ;1226
001410  9904              LDR      r1,[sp,#0x10]         ;1226
001412  0089              LSLS     r1,r1,#2              ;1226
001414  4308              ORRS     r0,r0,r1              ;1226
001416  4330              ORRS     r0,r0,r6              ;1226
001418  b2c6              UXTB     r6,r0                 ;1226
                  |L1.5146|
00141a  481d              LDR      r0,|L1.5264|
00141c  7046              STRB     r6,[r0,#1]            ;1228
00141e  4823              LDR      r0,|L1.5292|
001420  4284              CMP      r4,r0                 ;1232
001422  dc01              BGT      |L1.5160|
001424  2500              MOVS     r5,#0                 ;1232
001426  e014              B        |L1.5202|
                  |L1.5160|
001428  4821              LDR      r0,|L1.5296|
00142a  4284              CMP      r4,r0                 ;1233
00142c  dc01              BGT      |L1.5170|
00142e  2501              MOVS     r5,#1                 ;1233
001430  e00f              B        |L1.5202|
                  |L1.5170|
001432  4820              LDR      r0,|L1.5300|
001434  4284              CMP      r4,r0                 ;1234
001436  dc01              BGT      |L1.5180|
001438  2502              MOVS     r5,#2                 ;1234
00143a  e00a              B        |L1.5202|
                  |L1.5180|
00143c  481e              LDR      r0,|L1.5304|
00143e  4284              CMP      r4,r0                 ;1235
001440  dc01              BGT      |L1.5190|
001442  2503              MOVS     r5,#3                 ;1235
001444  e005              B        |L1.5202|
                  |L1.5190|
001446  481d              LDR      r0,|L1.5308|
001448  4284              CMP      r4,r0                 ;1236
00144a  dc01              BGT      |L1.5200|
00144c  2504              MOVS     r5,#4                 ;1236
00144e  e000              B        |L1.5202|
                  |L1.5200|
001450  2505              MOVS     r5,#5                 ;1237
                  |L1.5202|
001452  480f              LDR      r0,|L1.5264|
001454  7840              LDRB     r0,[r0,#1]            ;1239
001456  2130              MOVS     r1,#0x30              ;1239
001458  4008              ANDS     r0,r0,r1              ;1239
00145a  0900              LSRS     r0,r0,#4              ;1239
00145c  2800              CMP      r0,#0                 ;1239
00145e  d007              BEQ      |L1.5232|
001460  2020              MOVS     r0,#0x20              ;1241
001462  40a8              LSLS     r0,r0,r5              ;1241
001464  4601              MOV      r1,r0                 ;1241
001466  4620              MOV      r0,r4                 ;1241
001468  f7fffffe          BL       __aeabi_idivmod
00146c  9000              STR      r0,[sp,#0]            ;1241
00146e  e006              B        |L1.5246|
                  |L1.5232|
001470  2001              MOVS     r0,#1                 ;1245
001472  40a8              LSLS     r0,r0,r5              ;1245
001474  4601              MOV      r1,r0                 ;1245
001476  4620              MOV      r0,r4                 ;1245
001478  f7fffffe          BL       __aeabi_idivmod
00147c  9000              STR      r0,[sp,#0]            ;1245
                  |L1.5246|
00147e  9800              LDR      r0,[sp,#0]            ;1249
001480  f7fffffe          BL       fll_freq
001484  9001              STR      r0,[sp,#4]            ;1249
001486  9801              LDR      r0,[sp,#4]            ;1250
001488  283c              CMP      r0,#0x3c              ;1250
00148a  da1b              BGE      |L1.5316|
00148c  9801              LDR      r0,[sp,#4]            ;1250
00148e  e780              B        |L1.5010|
                  |L1.5264|
                          DCD      0x40064000
                  |L1.5268|
                          DCD      0x02faf080
                  |L1.5272|
                          DCD      0x00007530
                  |L1.5276|
                          DCD      0x00009c40
                  |L1.5280|
                          DCD      0x002dc6c0
                  |L1.5284|
                          DCD      0x01e84800
                  |L1.5288|
                          DCD      0x007a1200
                  |L1.5292|
                          DCD      0x001312d0
                  |L1.5296|
                          DCD      0x002625a0
                  |L1.5300|
                          DCD      0x004c4b40
                  |L1.5304|
                          DCD      0x00989680
                  |L1.5308|
                          DCD      0x01312d00
                  |L1.5312|
                          DCD      0x00002710
                  |L1.5316|
0014c4  48fd              LDR      r0,|L1.6332|
0014c6  7806              LDRB     r6,[r0,#0]            ;1255
0014c8  21fc              MOVS     r1,#0xfc              ;1256
0014ca  4630              MOV      r0,r6                 ;1256
0014cc  4388              BICS     r0,r0,r1              ;1256
0014ce  4606              MOV      r6,r0                 ;1256
0014d0  00e8              LSLS     r0,r5,#3              ;1257
0014d2  2138              MOVS     r1,#0x38              ;1257
0014d4  4008              ANDS     r0,r0,r1              ;1257
0014d6  4306              ORRS     r6,r6,r0              ;1257
0014d8  48f8              LDR      r0,|L1.6332|
0014da  7006              STRB     r6,[r0,#0]            ;1258
0014dc  9804              LDR      r0,[sp,#0x10]         ;1261
0014de  2800              CMP      r0,#0                 ;1261
0014e0  d016              BEQ      |L1.5392|
0014e2  2700              MOVS     r7,#0                 ;1263
0014e4  e008              B        |L1.5368|
                  |L1.5350|
0014e6  48f5              LDR      r0,|L1.6332|
0014e8  7980              LDRB     r0,[r0,#6]            ;1265
0014ea  2102              MOVS     r1,#2                 ;1265
0014ec  4008              ANDS     r0,r0,r1              ;1265
0014ee  2800              CMP      r0,#0                 ;1265
0014f0  d000              BEQ      |L1.5364|
0014f2  e004              B        |L1.5374|
                  |L1.5364|
0014f4  1c78              ADDS     r0,r7,#1              ;1263
0014f6  b207              SXTH     r7,r0                 ;1263
                  |L1.5368|
0014f8  48f1              LDR      r0,|L1.6336|
0014fa  4287              CMP      r7,r0                 ;1263
0014fc  dbf3              BLT      |L1.5350|
                  |L1.5374|
0014fe  bf00              NOP                            ;1265
001500  48ee              LDR      r0,|L1.6332|
001502  7980              LDRB     r0,[r0,#6]            ;1267
001504  2102              MOVS     r1,#2                 ;1267
001506  4008              ANDS     r0,r0,r1              ;1267
001508  2800              CMP      r0,#0                 ;1267
00150a  d101              BNE      |L1.5392|
00150c  2023              MOVS     r0,#0x23              ;1267
00150e  e740              B        |L1.5010|
                  |L1.5392|
001510  2700              MOVS     r7,#0                 ;1271
001512  e008              B        |L1.5414|
                  |L1.5396|
001514  48e9              LDR      r0,|L1.6332|
001516  7980              LDRB     r0,[r0,#6]            ;1273
001518  2110              MOVS     r1,#0x10              ;1273
00151a  4008              ANDS     r0,r0,r1              ;1273
00151c  2800              CMP      r0,#0                 ;1273
00151e  d100              BNE      |L1.5410|
001520  e005              B        |L1.5422|
                  |L1.5410|
001522  1c78              ADDS     r0,r7,#1              ;1271
001524  b207              SXTH     r7,r0                 ;1271
                  |L1.5414|
001526  207d              MOVS     r0,#0x7d              ;1271
001528  0100              LSLS     r0,r0,#4              ;1271
00152a  4287              CMP      r7,r0                 ;1271
00152c  dbf2              BLT      |L1.5396|
                  |L1.5422|
00152e  bf00              NOP                            ;1273
001530  48e2              LDR      r0,|L1.6332|
001532  7980              LDRB     r0,[r0,#6]            ;1275
001534  2110              MOVS     r1,#0x10              ;1275
001536  4008              ANDS     r0,r0,r1              ;1275
001538  2800              CMP      r0,#0                 ;1275
00153a  d001              BEQ      |L1.5440|
00153c  2011              MOVS     r0,#0x11              ;1275
00153e  e728              B        |L1.5010|
                  |L1.5440|
001540  2700              MOVS     r7,#0                 ;1278
001542  e009              B        |L1.5464|
                  |L1.5444|
001544  48dd              LDR      r0,|L1.6332|
001546  7980              LDRB     r0,[r0,#6]            ;1280
001548  210c              MOVS     r1,#0xc               ;1280
00154a  4008              ANDS     r0,r0,r1              ;1280
00154c  0880              LSRS     r0,r0,#2              ;1280
00154e  2800              CMP      r0,#0                 ;1280
001550  d100              BNE      |L1.5460|
001552  e005              B        |L1.5472|
                  |L1.5460|
001554  1c78              ADDS     r0,r7,#1              ;1278
001556  b207              SXTH     r7,r0                 ;1278
                  |L1.5464|
001558  207d              MOVS     r0,#0x7d              ;1278
00155a  0100              LSLS     r0,r0,#4              ;1278
00155c  4287              CMP      r7,r0                 ;1278
00155e  dbf1              BLT      |L1.5444|
                  |L1.5472|
001560  bf00              NOP                            ;1280
001562  48d6              LDR      r0,|L1.6332|
001564  7980              LDRB     r0,[r0,#6]            ;1282
001566  210c              MOVS     r1,#0xc               ;1282
001568  4008              ANDS     r0,r0,r1              ;1282
00156a  0880              LSRS     r0,r0,#2              ;1282
00156c  2800              CMP      r0,#0                 ;1282
00156e  d001              BEQ      |L1.5492|
001570  2018              MOVS     r0,#0x18              ;1282
001572  e70e              B        |L1.5010|
                  |L1.5492|
001574  48d1              LDR      r0,|L1.6332|
001576  7940              LDRB     r0,[r0,#5]            ;1288
001578  2120              MOVS     r1,#0x20              ;1288
00157a  4308              ORRS     r0,r0,r1              ;1288
00157c  49cf              LDR      r1,|L1.6332|
00157e  7148              STRB     r0,[r1,#5]            ;1288
001580  9801              LDR      r0,[sp,#4]            ;1290
001582  e706              B        |L1.5010|
;;;1292   
                          ENDP

                  fee_fbi PROC
;;;1293   
;;;1294   int fee_fbi(int irc_freq, unsigned char irc_select)
001584  b5f8              PUSH     {r3-r7,lr}
;;;1295   { 
001586  4605              MOV      r5,r0
001588  460e              MOV      r6,r1
;;;1296     unsigned char fcrdiv_val;
;;;1297     short i;
;;;1298     
;;;1299   // Check MCG is in FEE mode
;;;1300     if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted FLL output
00158a  48cc              LDR      r0,|L1.6332|
00158c  7980              LDRB     r0,[r0,#6]
00158e  210c              MOVS     r1,#0xc
001590  4008              ANDS     r0,r0,r1
001592  0880              LSRS     r0,r0,#2
001594  2800              CMP      r0,#0
001596  d10b              BNE      |L1.5552|
001598  48c8              LDR      r0,|L1.6332|
00159a  7980              LDRB     r0,[r0,#6]
00159c  2110              MOVS     r1,#0x10
00159e  4008              ANDS     r0,r0,r1
0015a0  2800              CMP      r0,#0
0015a2  d105              BNE      |L1.5552|
0015a4  48c5              LDR      r0,|L1.6332|
0015a6  7980              LDRB     r0,[r0,#6]
0015a8  2120              MOVS     r1,#0x20
0015aa  4008              ANDS     r0,r0,r1
0015ac  2800              CMP      r0,#0
0015ae  d001              BEQ      |L1.5556|
                  |L1.5552|
;;;1301         (!(MCG_S & MCG_S_IREFST_MASK)) &&                             // check FLL ref is external ref clk
;;;1302         (!(MCG_S & MCG_S_PLLST_MASK))))                               // check PLLS mux has selected FLL
;;;1303     {
;;;1304       return 0x2;                                                     // return error code
0015b0  2002              MOVS     r0,#2
                  |L1.5554|
;;;1305     }
;;;1306     
;;;1307     // Check that the irc frequency matches the selected IRC 
;;;1308     if (!(irc_select))
;;;1309     {    
;;;1310       if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
;;;1311     }
;;;1312     else
;;;1313     {
;;;1314       if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
;;;1315     }
;;;1316     
;;;1317   // Select the required IRC
;;;1318     if (irc_select)
;;;1319     {
;;;1320       MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRC by setting IRCS
;;;1321     }
;;;1322     else
;;;1323     {
;;;1324       MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRC by clearing IRCS
;;;1325     }
;;;1326     
;;;1327   // Make sure the clock monitor is disabled before switching modes otherwise it will trigger
;;;1328     MCG_C6 &= ~MCG_C6_CME0_MASK;
;;;1329     
;;;1330   // Select the IRC as the CLKS mux selection
;;;1331     MCG_C1 |= MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK; // set IREFS and select IRC as MCGOUT
;;;1332    
;;;1333   // wait until internal reference switches to requested irc.
;;;1334     if (!(irc_select))
;;;1335     {
;;;1336       for (i = 0 ; i < 2000 ; i++)
;;;1337       {
;;;1338         if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishes
;;;1339       }
;;;1340       if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error if set
;;;1341     }
;;;1342     else
;;;1343     {
;;;1344       for (i = 0 ; i < 2000 ; i++)
;;;1345       {
;;;1346         if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
;;;1347       }
;;;1348       if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error if not set
;;;1349     }
;;;1350     
;;;1351   // Wait for clock status bits to update
;;;1352     for (i = 0 ; i < 2000 ; i++)
;;;1353     {
;;;1354       if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST shows IRC slected before loop finishes
;;;1355     }
;;;1356     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really selected and return with error if not
;;;1357     
;;;1358   // wait for Reference clock Status bit to set
;;;1359     for (i = 0 ; i < 2000 ; i++)
;;;1360     {
;;;1361       if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
;;;1362     }
;;;1363     if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error if not set  
;;;1364     
;;;1365   // Now in FBI mode
;;;1366     if (irc_select)
;;;1367     {
;;;1368       fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fast IRC divder factor
;;;1369       return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
;;;1370     }
;;;1371     else
;;;1372     {
;;;1373       return irc_freq; // MCGOUT frequency equals slow IRC frequency
;;;1374     }
;;;1375   } // fee_fbi 
0015b2  bdf8              POP      {r3-r7,pc}
                  |L1.5556|
0015b4  2e00              CMP      r6,#0                 ;1308
0015b6  d107              BNE      |L1.5576|
0015b8  48c2              LDR      r0,|L1.6340|
0015ba  4285              CMP      r5,r0                 ;1310
0015bc  db02              BLT      |L1.5572|
0015be  48c2              LDR      r0,|L1.6344|
0015c0  4285              CMP      r5,r0                 ;1310
0015c2  dd09              BLE      |L1.5592|
                  |L1.5572|
0015c4  2031              MOVS     r0,#0x31              ;1310
0015c6  e7f4              B        |L1.5554|
                  |L1.5576|
0015c8  48c0              LDR      r0,|L1.6348|
0015ca  4285              CMP      r5,r0                 ;1314
0015cc  db02              BLT      |L1.5588|
0015ce  48c0              LDR      r0,|L1.6352|
0015d0  4285              CMP      r5,r0                 ;1314
0015d2  dd01              BLE      |L1.5592|
                  |L1.5588|
0015d4  2032              MOVS     r0,#0x32              ;1314
0015d6  e7ec              B        |L1.5554|
                  |L1.5592|
0015d8  2e00              CMP      r6,#0                 ;1318
0015da  d006              BEQ      |L1.5610|
0015dc  48b7              LDR      r0,|L1.6332|
0015de  7840              LDRB     r0,[r0,#1]            ;1320
0015e0  2101              MOVS     r1,#1                 ;1320
0015e2  4308              ORRS     r0,r0,r1              ;1320
0015e4  49b5              LDR      r1,|L1.6332|
0015e6  7048              STRB     r0,[r1,#1]            ;1320
0015e8  e005              B        |L1.5622|
                  |L1.5610|
0015ea  48b4              LDR      r0,|L1.6332|
0015ec  7840              LDRB     r0,[r0,#1]            ;1324
0015ee  0840              LSRS     r0,r0,#1              ;1324
0015f0  0040              LSLS     r0,r0,#1              ;1324
0015f2  49b2              LDR      r1,|L1.6332|
0015f4  7048              STRB     r0,[r1,#1]            ;1324
                  |L1.5622|
0015f6  48b1              LDR      r0,|L1.6332|
0015f8  7940              LDRB     r0,[r0,#5]            ;1328
0015fa  2120              MOVS     r1,#0x20              ;1328
0015fc  4388              BICS     r0,r0,r1              ;1328
0015fe  49af              LDR      r1,|L1.6332|
001600  7148              STRB     r0,[r1,#5]            ;1328
001602  4608              MOV      r0,r1                 ;1331
001604  7800              LDRB     r0,[r0,#0]            ;1331
001606  2144              MOVS     r1,#0x44              ;1331
001608  4308              ORRS     r0,r0,r1              ;1331
00160a  49ac              LDR      r1,|L1.6332|
00160c  7008              STRB     r0,[r1,#0]            ;1331
00160e  2e00              CMP      r6,#0                 ;1334
001610  d117              BNE      |L1.5698|
001612  2400              MOVS     r4,#0                 ;1336
001614  e008              B        |L1.5672|
                  |L1.5654|
001616  48a9              LDR      r0,|L1.6332|
001618  7980              LDRB     r0,[r0,#6]            ;1338
00161a  07c0              LSLS     r0,r0,#31             ;1338
00161c  0fc0              LSRS     r0,r0,#31             ;1338
00161e  2800              CMP      r0,#0                 ;1338
001620  d100              BNE      |L1.5668|
001622  e005              B        |L1.5680|
                  |L1.5668|
001624  1c60              ADDS     r0,r4,#1              ;1336
001626  b204              SXTH     r4,r0                 ;1336
                  |L1.5672|
001628  207d              MOVS     r0,#0x7d              ;1336
00162a  0100              LSLS     r0,r0,#4              ;1336
00162c  4284              CMP      r4,r0                 ;1336
00162e  dbf2              BLT      |L1.5654|
                  |L1.5680|
001630  bf00              NOP                            ;1338
001632  48a2              LDR      r0,|L1.6332|
001634  7980              LDRB     r0,[r0,#6]            ;1340
001636  07c0              LSLS     r0,r0,#31             ;1340
001638  0fc0              LSRS     r0,r0,#31             ;1340
00163a  2800              CMP      r0,#0                 ;1340
00163c  d019              BEQ      |L1.5746|
00163e  2013              MOVS     r0,#0x13              ;1340
001640  e7b7              B        |L1.5554|
                  |L1.5698|
001642  2400              MOVS     r4,#0                 ;1344
001644  e008              B        |L1.5720|
                  |L1.5702|
001646  489d              LDR      r0,|L1.6332|
001648  7980              LDRB     r0,[r0,#6]            ;1346
00164a  07c0              LSLS     r0,r0,#31             ;1346
00164c  0fc0              LSRS     r0,r0,#31             ;1346
00164e  2800              CMP      r0,#0                 ;1346
001650  d000              BEQ      |L1.5716|
001652  e005              B        |L1.5728|
                  |L1.5716|
001654  1c60              ADDS     r0,r4,#1              ;1344
001656  b204              SXTH     r4,r0                 ;1344
                  |L1.5720|
001658  207d              MOVS     r0,#0x7d              ;1344
00165a  0100              LSLS     r0,r0,#4              ;1344
00165c  4284              CMP      r4,r0                 ;1344
00165e  dbf2              BLT      |L1.5702|
                  |L1.5728|
001660  bf00              NOP                            ;1346
001662  4896              LDR      r0,|L1.6332|
001664  7980              LDRB     r0,[r0,#6]            ;1348
001666  07c0              LSLS     r0,r0,#31             ;1348
001668  0fc0              LSRS     r0,r0,#31             ;1348
00166a  2800              CMP      r0,#0                 ;1348
00166c  d101              BNE      |L1.5746|
00166e  2014              MOVS     r0,#0x14              ;1348
001670  e79f              B        |L1.5554|
                  |L1.5746|
001672  2400              MOVS     r4,#0                 ;1352
001674  e009              B        |L1.5770|
                  |L1.5750|
001676  4891              LDR      r0,|L1.6332|
001678  7980              LDRB     r0,[r0,#6]            ;1354
00167a  210c              MOVS     r1,#0xc               ;1354
00167c  4008              ANDS     r0,r0,r1              ;1354
00167e  0880              LSRS     r0,r0,#2              ;1354
001680  2801              CMP      r0,#1                 ;1354
001682  d100              BNE      |L1.5766|
001684  e005              B        |L1.5778|
                  |L1.5766|
001686  1c60              ADDS     r0,r4,#1              ;1352
001688  b204              SXTH     r4,r0                 ;1352
                  |L1.5770|
00168a  207d              MOVS     r0,#0x7d              ;1352
00168c  0100              LSLS     r0,r0,#4              ;1352
00168e  4284              CMP      r4,r0                 ;1352
001690  dbf1              BLT      |L1.5750|
                  |L1.5778|
001692  bf00              NOP                            ;1354
001694  4889              LDR      r0,|L1.6332|
001696  7980              LDRB     r0,[r0,#6]            ;1356
001698  210c              MOVS     r1,#0xc               ;1356
00169a  4008              ANDS     r0,r0,r1              ;1356
00169c  0880              LSRS     r0,r0,#2              ;1356
00169e  2801              CMP      r0,#1                 ;1356
0016a0  d001              BEQ      |L1.5798|
0016a2  2019              MOVS     r0,#0x19              ;1356
0016a4  e785              B        |L1.5554|
                  |L1.5798|
0016a6  2400              MOVS     r4,#0                 ;1359
0016a8  e008              B        |L1.5820|
                  |L1.5802|
0016aa  4884              LDR      r0,|L1.6332|
0016ac  7980              LDRB     r0,[r0,#6]            ;1361
0016ae  2110              MOVS     r1,#0x10              ;1361
0016b0  4008              ANDS     r0,r0,r1              ;1361
0016b2  2800              CMP      r0,#0                 ;1361
0016b4  d000              BEQ      |L1.5816|
0016b6  e005              B        |L1.5828|
                  |L1.5816|
0016b8  1c60              ADDS     r0,r4,#1              ;1359
0016ba  b204              SXTH     r4,r0                 ;1359
                  |L1.5820|
0016bc  207d              MOVS     r0,#0x7d              ;1359
0016be  0100              LSLS     r0,r0,#4              ;1359
0016c0  4284              CMP      r4,r0                 ;1359
0016c2  dbf2              BLT      |L1.5802|
                  |L1.5828|
0016c4  bf00              NOP                            ;1361
0016c6  487d              LDR      r0,|L1.6332|
0016c8  7980              LDRB     r0,[r0,#6]            ;1363
0016ca  2110              MOVS     r1,#0x10              ;1363
0016cc  4008              ANDS     r0,r0,r1              ;1363
0016ce  2800              CMP      r0,#0                 ;1363
0016d0  d101              BNE      |L1.5846|
0016d2  2012              MOVS     r0,#0x12              ;1363
0016d4  e76d              B        |L1.5554|
                  |L1.5846|
0016d6  2e00              CMP      r6,#0                 ;1366
0016d8  d00c              BEQ      |L1.5876|
0016da  4878              LDR      r0,|L1.6332|
0016dc  7a00              LDRB     r0,[r0,#8]            ;1368
0016de  210e              MOVS     r1,#0xe               ;1368
0016e0  4008              ANDS     r0,r0,r1              ;1368
0016e2  0841              LSRS     r1,r0,#1              ;1368
0016e4  2001              MOVS     r0,#1                 ;1368
0016e6  4088              LSLS     r0,r0,r1              ;1368
0016e8  b2c7              UXTB     r7,r0                 ;1368
0016ea  4639              MOV      r1,r7                 ;1369
0016ec  4628              MOV      r0,r5                 ;1369
0016ee  f7fffffe          BL       __aeabi_idivmod
0016f2  e75e              B        |L1.5554|
                  |L1.5876|
0016f4  4628              MOV      r0,r5                 ;1373
0016f6  e75c              B        |L1.5554|
;;;1376   
                          ENDP

                  fbi_fei PROC
;;;1377   
;;;1378   int fbi_fei(int slow_irc_freq)
0016f8  b5f0              PUSH     {r4-r7,lr}
;;;1379   {
0016fa  4606              MOV      r6,r0
;;;1380     unsigned char temp_reg;
;;;1381     short i;
;;;1382     int mcg_out;
;;;1383   
;;;1384   // check if in FBI mode
;;;1385     if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted int ref clk
0016fc  486f              LDR      r0,|L1.6332|
0016fe  7980              LDRB     r0,[r0,#6]
001700  210c              MOVS     r1,#0xc
001702  4008              ANDS     r0,r0,r1
001704  0880              LSRS     r0,r0,#2
001706  2801              CMP      r0,#1
001708  d111              BNE      |L1.5934|
00170a  486c              LDR      r0,|L1.6332|
00170c  7980              LDRB     r0,[r0,#6]
00170e  2110              MOVS     r1,#0x10
001710  4008              ANDS     r0,r0,r1
001712  2800              CMP      r0,#0
001714  d00b              BEQ      |L1.5934|
001716  4869              LDR      r0,|L1.6332|
001718  7980              LDRB     r0,[r0,#6]
00171a  2120              MOVS     r1,#0x20
00171c  4008              ANDS     r0,r0,r1
00171e  2800              CMP      r0,#0
001720  d105              BNE      |L1.5934|
001722  4866              LDR      r0,|L1.6332|
001724  7840              LDRB     r0,[r0,#1]
001726  2102              MOVS     r1,#2
001728  4008              ANDS     r0,r0,r1
00172a  2800              CMP      r0,#0
00172c  d001              BEQ      |L1.5938|
                  |L1.5934|
;;;1386         (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;1387         (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selected FLL
;;;1388         (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
;;;1389     {  
;;;1390       return 0x3;                                                       // MCG not in correct mode return fail code 
00172e  2003              MOVS     r0,#3
                  |L1.5936|
;;;1391     }
;;;1392   
;;;1393   // Check IRC frequency is within spec.
;;;1394     if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
;;;1395     {
;;;1396       return 0x31;
;;;1397     }
;;;1398   
;;;1399   // Check resulting FLL frequency 
;;;1400     mcg_out = fll_freq(slow_irc_freq); 
;;;1401     if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling function
;;;1402     
;;;1403   // Change the CLKS mux to select the FLL output as MCGOUT  
;;;1404     temp_reg = MCG_C1;
;;;1405     temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS field
;;;1406     temp_reg |= MCG_C1_CLKS(0); // select FLL as MCGOUT
;;;1407     temp_reg |= MCG_C1_IREFS_MASK; // make sure IRC is FLL reference
;;;1408     MCG_C1 = temp_reg; // update MCG_C1
;;;1409     
;;;1410   // wait for Reference clock Status bit to clear
;;;1411     for (i = 0 ; i < 2000 ; i++)
;;;1412     {
;;;1413       if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST clears before loop finishes
;;;1414     }
;;;1415     if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error if not set
;;;1416     
;;;1417   // Wait for clock status bits to show clock source is ext ref clk
;;;1418     for (i = 0 ; i < 2000 ; i++)
;;;1419     {
;;;1420       if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST shows FLL slected before loop finishes
;;;1421     }
;;;1422     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLL is really selected and return with error if not
;;;1423   
;;;1424   // Now in FEI mode
;;;1425     return mcg_out;  
;;;1426   } // fbi_fei
001730  bdf0              POP      {r4-r7,pc}
                  |L1.5938|
001732  4864              LDR      r0,|L1.6340|
001734  4286              CMP      r6,r0                 ;1394
001736  db02              BLT      |L1.5950|
001738  4863              LDR      r0,|L1.6344|
00173a  4286              CMP      r6,r0                 ;1394
00173c  dd01              BLE      |L1.5954|
                  |L1.5950|
00173e  2031              MOVS     r0,#0x31              ;1396
001740  e7f6              B        |L1.5936|
                  |L1.5954|
001742  4630              MOV      r0,r6                 ;1400
001744  f7fffffe          BL       fll_freq
001748  4607              MOV      r7,r0                 ;1400
00174a  2f3c              CMP      r7,#0x3c              ;1401
00174c  da01              BGE      |L1.5970|
00174e  4638              MOV      r0,r7                 ;1401
001750  e7ee              B        |L1.5936|
                  |L1.5970|
001752  485a              LDR      r0,|L1.6332|
001754  7805              LDRB     r5,[r0,#0]            ;1404
001756  21c0              MOVS     r1,#0xc0              ;1405
001758  4628              MOV      r0,r5                 ;1405
00175a  4388              BICS     r0,r0,r1              ;1405
00175c  4605              MOV      r5,r0                 ;1405
00175e  bf00              NOP                            ;1406
001760  2004              MOVS     r0,#4                 ;1407
001762  4305              ORRS     r5,r5,r0              ;1407
001764  4855              LDR      r0,|L1.6332|
001766  7005              STRB     r5,[r0,#0]            ;1408
001768  2400              MOVS     r4,#0                 ;1411
00176a  e008              B        |L1.6014|
                  |L1.5996|
00176c  4853              LDR      r0,|L1.6332|
00176e  7980              LDRB     r0,[r0,#6]            ;1413
001770  2110              MOVS     r1,#0x10              ;1413
001772  4008              ANDS     r0,r0,r1              ;1413
001774  2800              CMP      r0,#0                 ;1413
001776  d000              BEQ      |L1.6010|
001778  e005              B        |L1.6022|
                  |L1.6010|
00177a  1c60              ADDS     r0,r4,#1              ;1411
00177c  b204              SXTH     r4,r0                 ;1411
                  |L1.6014|
00177e  207d              MOVS     r0,#0x7d              ;1411
001780  0100              LSLS     r0,r0,#4              ;1411
001782  4284              CMP      r4,r0                 ;1411
001784  dbf2              BLT      |L1.5996|
                  |L1.6022|
001786  bf00              NOP                            ;1413
001788  484c              LDR      r0,|L1.6332|
00178a  7980              LDRB     r0,[r0,#6]            ;1415
00178c  2110              MOVS     r1,#0x10              ;1415
00178e  4008              ANDS     r0,r0,r1              ;1415
001790  2800              CMP      r0,#0                 ;1415
001792  d101              BNE      |L1.6040|
001794  2012              MOVS     r0,#0x12              ;1415
001796  e7cb              B        |L1.5936|
                  |L1.6040|
001798  2400              MOVS     r4,#0                 ;1418
00179a  e009              B        |L1.6064|
                  |L1.6044|
00179c  4847              LDR      r0,|L1.6332|
00179e  7980              LDRB     r0,[r0,#6]            ;1420
0017a0  210c              MOVS     r1,#0xc               ;1420
0017a2  4008              ANDS     r0,r0,r1              ;1420
0017a4  0880              LSRS     r0,r0,#2              ;1420
0017a6  2800              CMP      r0,#0                 ;1420
0017a8  d100              BNE      |L1.6060|
0017aa  e005              B        |L1.6072|
                  |L1.6060|
0017ac  1c60              ADDS     r0,r4,#1              ;1418
0017ae  b204              SXTH     r4,r0                 ;1418
                  |L1.6064|
0017b0  207d              MOVS     r0,#0x7d              ;1418
0017b2  0100              LSLS     r0,r0,#4              ;1418
0017b4  4284              CMP      r4,r0                 ;1418
0017b6  dbf1              BLT      |L1.6044|
                  |L1.6072|
0017b8  bf00              NOP                            ;1420
0017ba  4840              LDR      r0,|L1.6332|
0017bc  7980              LDRB     r0,[r0,#6]            ;1422
0017be  210c              MOVS     r1,#0xc               ;1422
0017c0  4008              ANDS     r0,r0,r1              ;1422
0017c2  0880              LSRS     r0,r0,#2              ;1422
0017c4  2800              CMP      r0,#0                 ;1422
0017c6  d001              BEQ      |L1.6092|
0017c8  2018              MOVS     r0,#0x18              ;1422
0017ca  e7b1              B        |L1.5936|
                  |L1.6092|
0017cc  4638              MOV      r0,r7                 ;1425
0017ce  e7af              B        |L1.5936|
;;;1427   
                          ENDP

                  fei_fbi PROC
;;;1428   
;;;1429   int fei_fbi(int irc_freq, unsigned char irc_select)
0017d0  b5f8              PUSH     {r3-r7,lr}
;;;1430   {
0017d2  4605              MOV      r5,r0
0017d4  460e              MOV      r6,r1
;;;1431     unsigned char temp_reg;
;;;1432     unsigned char fcrdiv_val;
;;;1433     short i;
;;;1434     
;;;1435   // Check MCG is in FEI mode
;;;1436     if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted FLL output
0017d6  4839              LDR      r0,|L1.6332|
0017d8  7980              LDRB     r0,[r0,#6]
0017da  210c              MOVS     r1,#0xc
0017dc  4008              ANDS     r0,r0,r1
0017de  0880              LSRS     r0,r0,#2
0017e0  2800              CMP      r0,#0
0017e2  d10b              BNE      |L1.6140|
0017e4  4835              LDR      r0,|L1.6332|
0017e6  7980              LDRB     r0,[r0,#6]
0017e8  2110              MOVS     r1,#0x10
0017ea  4008              ANDS     r0,r0,r1
0017ec  2800              CMP      r0,#0
0017ee  d005              BEQ      |L1.6140|
0017f0  4832              LDR      r0,|L1.6332|
0017f2  7980              LDRB     r0,[r0,#6]
0017f4  2120              MOVS     r1,#0x20
0017f6  4008              ANDS     r0,r0,r1
0017f8  2800              CMP      r0,#0
0017fa  d001              BEQ      |L1.6144|
                  |L1.6140|
;;;1437         (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;1438         (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selected FLL
;;;1439     {
;;;1440       return 0x1;                                                       // return error code
0017fc  2001              MOVS     r0,#1
                  |L1.6142|
;;;1441     } 
;;;1442   
;;;1443   // Check that the irc frequency matches the selected IRC 
;;;1444     if (!(irc_select))
;;;1445     {    
;;;1446       if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
;;;1447     }
;;;1448     else
;;;1449     {
;;;1450       if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
;;;1451     }
;;;1452     
;;;1453   // Select the desired IRC
;;;1454     if (irc_select)
;;;1455     {
;;;1456       MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRCS
;;;1457     }
;;;1458     else
;;;1459     {
;;;1460       MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRCS
;;;1461     }
;;;1462     
;;;1463   // Change the CLKS mux to select the IRC as the MCGOUT
;;;1464     temp_reg = MCG_C1;
;;;1465     temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS
;;;1466     temp_reg |= MCG_C1_CLKS(1); // select IRC as the MCG clock sourse
;;;1467     MCG_C1 = temp_reg;
;;;1468   
;;;1469   // wait until internal reference switches to requested irc.
;;;1470     if (!(irc_select))
;;;1471     {
;;;1472       for (i = 0 ; i < 2000 ; i++)
;;;1473       {
;;;1474         if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishes
;;;1475       }
;;;1476       if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error if set
;;;1477     }
;;;1478     else
;;;1479     {
;;;1480       for (i = 0 ; i < 2000 ; i++)
;;;1481       {
;;;1482         if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
;;;1483       }
;;;1484       if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error if not set
;;;1485     }
;;;1486     
;;;1487   // Wait for clock status bits to update
;;;1488     for (i = 0 ; i < 2000 ; i++)
;;;1489     {
;;;1490       if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST shows IRC slected before loop finishes
;;;1491     }
;;;1492     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really selected and return with error if not
;;;1493     
;;;1494   // Now in FBI mode
;;;1495     if (irc_select)
;;;1496     {
;;;1497       fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fast IRC divder factor
;;;1498       return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
;;;1499     }
;;;1500     else
;;;1501     {
;;;1502       return irc_freq; // MCGOUT frequency equals slow IRC frequency
;;;1503     }   
;;;1504   } // fei_fbi
0017fe  bdf8              POP      {r3-r7,pc}
                  |L1.6144|
001800  2e00              CMP      r6,#0                 ;1444
001802  d107              BNE      |L1.6164|
001804  482f              LDR      r0,|L1.6340|
001806  4285              CMP      r5,r0                 ;1446
001808  db02              BLT      |L1.6160|
00180a  482f              LDR      r0,|L1.6344|
00180c  4285              CMP      r5,r0                 ;1446
00180e  dd09              BLE      |L1.6180|
                  |L1.6160|
001810  2031              MOVS     r0,#0x31              ;1446
001812  e7f4              B        |L1.6142|
                  |L1.6164|
001814  482d              LDR      r0,|L1.6348|
001816  4285              CMP      r5,r0                 ;1450
001818  db02              BLT      |L1.6176|
00181a  482d              LDR      r0,|L1.6352|
00181c  4285              CMP      r5,r0                 ;1450
00181e  dd01              BLE      |L1.6180|
                  |L1.6176|
001820  2032              MOVS     r0,#0x32              ;1450
001822  e7ec              B        |L1.6142|
                  |L1.6180|
001824  2e00              CMP      r6,#0                 ;1454
001826  d006              BEQ      |L1.6198|
001828  4824              LDR      r0,|L1.6332|
00182a  7840              LDRB     r0,[r0,#1]            ;1456
00182c  2101              MOVS     r1,#1                 ;1456
00182e  4308              ORRS     r0,r0,r1              ;1456
001830  4922              LDR      r1,|L1.6332|
001832  7048              STRB     r0,[r1,#1]            ;1456
001834  e005              B        |L1.6210|
                  |L1.6198|
001836  4821              LDR      r0,|L1.6332|
001838  7840              LDRB     r0,[r0,#1]            ;1460
00183a  0840              LSRS     r0,r0,#1              ;1460
00183c  0040              LSLS     r0,r0,#1              ;1460
00183e  491f              LDR      r1,|L1.6332|
001840  7048              STRB     r0,[r1,#1]            ;1460
                  |L1.6210|
001842  481e              LDR      r0,|L1.6332|
001844  7807              LDRB     r7,[r0,#0]            ;1464
001846  21c0              MOVS     r1,#0xc0              ;1465
001848  4638              MOV      r0,r7                 ;1465
00184a  4388              BICS     r0,r0,r1              ;1465
00184c  4607              MOV      r7,r0                 ;1465
00184e  2040              MOVS     r0,#0x40              ;1466
001850  4307              ORRS     r7,r7,r0              ;1466
001852  481a              LDR      r0,|L1.6332|
001854  7007              STRB     r7,[r0,#0]            ;1467
001856  2e00              CMP      r6,#0                 ;1470
001858  d117              BNE      |L1.6282|
00185a  2400              MOVS     r4,#0                 ;1472
00185c  e008              B        |L1.6256|
                  |L1.6238|
00185e  4817              LDR      r0,|L1.6332|
001860  7980              LDRB     r0,[r0,#6]            ;1474
001862  07c0              LSLS     r0,r0,#31             ;1474
001864  0fc0              LSRS     r0,r0,#31             ;1474
001866  2800              CMP      r0,#0                 ;1474
001868  d100              BNE      |L1.6252|
00186a  e005              B        |L1.6264|
                  |L1.6252|
00186c  1c60              ADDS     r0,r4,#1              ;1472
00186e  b204              SXTH     r4,r0                 ;1472
                  |L1.6256|
001870  207d              MOVS     r0,#0x7d              ;1472
001872  0100              LSLS     r0,r0,#4              ;1472
001874  4284              CMP      r4,r0                 ;1472
001876  dbf2              BLT      |L1.6238|
                  |L1.6264|
001878  bf00              NOP                            ;1474
00187a  4810              LDR      r0,|L1.6332|
00187c  7980              LDRB     r0,[r0,#6]            ;1476
00187e  07c0              LSLS     r0,r0,#31             ;1476
001880  0fc0              LSRS     r0,r0,#31             ;1476
001882  2800              CMP      r0,#0                 ;1476
001884  d026              BEQ      |L1.6356|
001886  2013              MOVS     r0,#0x13              ;1476
001888  e7b9              B        |L1.6142|
                  |L1.6282|
00188a  2400              MOVS     r4,#0                 ;1480
00188c  e008              B        |L1.6304|
                  |L1.6286|
00188e  480b              LDR      r0,|L1.6332|
001890  7980              LDRB     r0,[r0,#6]            ;1482
001892  07c0              LSLS     r0,r0,#31             ;1482
001894  0fc0              LSRS     r0,r0,#31             ;1482
001896  2800              CMP      r0,#0                 ;1482
001898  d000              BEQ      |L1.6300|
00189a  e005              B        |L1.6312|
                  |L1.6300|
00189c  1c60              ADDS     r0,r4,#1              ;1480
00189e  b204              SXTH     r4,r0                 ;1480
                  |L1.6304|
0018a0  207d              MOVS     r0,#0x7d              ;1480
0018a2  0100              LSLS     r0,r0,#4              ;1480
0018a4  4284              CMP      r4,r0                 ;1480
0018a6  dbf2              BLT      |L1.6286|
                  |L1.6312|
0018a8  bf00              NOP                            ;1482
0018aa  4804              LDR      r0,|L1.6332|
0018ac  7980              LDRB     r0,[r0,#6]            ;1484
0018ae  07c0              LSLS     r0,r0,#31             ;1484
0018b0  0fc0              LSRS     r0,r0,#31             ;1484
0018b2  2800              CMP      r0,#0                 ;1484
0018b4  d10e              BNE      |L1.6356|
0018b6  2014              MOVS     r0,#0x14              ;1484
0018b8  e7a1              B        |L1.6142|
0018ba  0000              DCW      0x0000
                  |L1.6332|
                          DCD      0x40064000
                  |L1.6336|
                          DCD      0x00002710
                  |L1.6340|
                          DCD      0x00007a12
                  |L1.6344|
                          DCD      0x00009897
                  |L1.6348|
                          DCD      0x002dc6c0
                  |L1.6352|
                          DCD      0x004c4b40
                  |L1.6356|
0018d4  2400              MOVS     r4,#0                 ;1488
0018d6  e009              B        |L1.6380|
                  |L1.6360|
0018d8  48fe              LDR      r0,|L1.7380|
0018da  7980              LDRB     r0,[r0,#6]            ;1490
0018dc  210c              MOVS     r1,#0xc               ;1490
0018de  4008              ANDS     r0,r0,r1              ;1490
0018e0  0880              LSRS     r0,r0,#2              ;1490
0018e2  2801              CMP      r0,#1                 ;1490
0018e4  d100              BNE      |L1.6376|
0018e6  e005              B        |L1.6388|
                  |L1.6376|
0018e8  1c60              ADDS     r0,r4,#1              ;1488
0018ea  b204              SXTH     r4,r0                 ;1488
                  |L1.6380|
0018ec  207d              MOVS     r0,#0x7d              ;1488
0018ee  0100              LSLS     r0,r0,#4              ;1488
0018f0  4284              CMP      r4,r0                 ;1488
0018f2  dbf1              BLT      |L1.6360|
                  |L1.6388|
0018f4  bf00              NOP                            ;1490
0018f6  48f7              LDR      r0,|L1.7380|
0018f8  7980              LDRB     r0,[r0,#6]            ;1492
0018fa  210c              MOVS     r1,#0xc               ;1492
0018fc  4008              ANDS     r0,r0,r1              ;1492
0018fe  0880              LSRS     r0,r0,#2              ;1492
001900  2801              CMP      r0,#1                 ;1492
001902  d001              BEQ      |L1.6408|
001904  2019              MOVS     r0,#0x19              ;1492
001906  e77a              B        |L1.6142|
                  |L1.6408|
001908  2e00              CMP      r6,#0                 ;1495
00190a  d00d              BEQ      |L1.6440|
00190c  48f1              LDR      r0,|L1.7380|
00190e  7a00              LDRB     r0,[r0,#8]            ;1497
001910  210e              MOVS     r1,#0xe               ;1497
001912  4008              ANDS     r0,r0,r1              ;1497
001914  0841              LSRS     r1,r0,#1              ;1497
001916  2001              MOVS     r0,#1                 ;1497
001918  4088              LSLS     r0,r0,r1              ;1497
00191a  b2c0              UXTB     r0,r0                 ;1497
00191c  9000              STR      r0,[sp,#0]            ;1497
00191e  4628              MOV      r0,r5                 ;1498
001920  9900              LDR      r1,[sp,#0]            ;1498
001922  f7fffffe          BL       __aeabi_idivmod
001926  e76a              B        |L1.6142|
                  |L1.6440|
001928  4628              MOV      r0,r5                 ;1502
00192a  e768              B        |L1.6142|
;;;1505   
                          ENDP

                  fei_fee PROC
;;;1524    */
;;;1525   int fei_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
00192c  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1526   {
00192e  b084              SUB      sp,sp,#0x10
001930  4604              MOV      r4,r0
001932  4617              MOV      r7,r2
;;;1527     unsigned char frdiv_val;
;;;1528     unsigned char temp_reg;
;;;1529    // short i;
;;;1530     int mcg_out, fll_ref_freq, i;
;;;1531     
;;;1532   // check if in FEI mode
;;;1533     if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted FLL output
001934  48e7              LDR      r0,|L1.7380|
001936  7980              LDRB     r0,[r0,#6]
001938  210c              MOVS     r1,#0xc
00193a  4008              ANDS     r0,r0,r1
00193c  0880              LSRS     r0,r0,#2
00193e  2800              CMP      r0,#0
001940  d10b              BNE      |L1.6490|
001942  48e4              LDR      r0,|L1.7380|
001944  7980              LDRB     r0,[r0,#6]
001946  2110              MOVS     r1,#0x10
001948  4008              ANDS     r0,r0,r1
00194a  2800              CMP      r0,#0
00194c  d005              BEQ      |L1.6490|
00194e  48e1              LDR      r0,|L1.7380|
001950  7980              LDRB     r0,[r0,#6]
001952  2120              MOVS     r1,#0x20
001954  4008              ANDS     r0,r0,r1
001956  2800              CMP      r0,#0
001958  d002              BEQ      |L1.6496|
                  |L1.6490|
;;;1534         (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal ref clk
;;;1535         (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selected FLL
;;;1536     {
;;;1537       return 0x1;                                                     // return error code
00195a  2001              MOVS     r0,#1
                  |L1.6492|
;;;1538     }
;;;1539   
;;;1540   // check external frequency is less than the maximum frequency
;;;1541     if  (crystal_val > 50000000) {return 0x21;}
;;;1542     
;;;1543   // check crystal frequency is within spec. if crystal osc is being used
;;;1544     if (erefs_val)
;;;1545     {
;;;1546       if ((crystal_val < 30000) ||
;;;1547           ((crystal_val > 40000) && (crystal_val < 3000000)) ||
;;;1548           (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal options is not available
;;;1549     }
;;;1550   
;;;1551   // make sure HGO will never be greater than 1. Could return an error instead if desired.  
;;;1552     if (hgo_val > 0)
;;;1553     {
;;;1554       hgo_val = 1; // force hgo_val to 1 if > 0
;;;1555     }
;;;1556   
;;;1557   // configure the MCG_C2 register
;;;1558   // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the FRDIV divide value
;;;1559   // it still needs to be set correctly even if the oscillator is not being used
;;;1560     temp_reg = MCG_C2;
;;;1561     temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before writing new values
;;;1562     if (crystal_val <= 40000)
;;;1563     {
;;;1564       temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1565     }
;;;1566     else if (crystal_val <= 8000000)
;;;1567     {
;;;1568       temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1569     }
;;;1570     else
;;;1571     {
;;;1572       temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SHIFT));
;;;1573     }
;;;1574     MCG_C2 = temp_reg;
;;;1575   
;;;1576   // determine FRDIV based on reference clock frequency
;;;1577   // since the external frequency has already been checked only the maximum frequency for each FRDIV value needs to be compared here.
;;;1578     if (crystal_val <= 1250000) {frdiv_val = 0;}
;;;1579     else if (crystal_val <= 2500000) {frdiv_val = 1;}
;;;1580     else if (crystal_val <= 5000000) {frdiv_val = 2;}
;;;1581     else if (crystal_val <= 10000000) {frdiv_val = 3;}
;;;1582     else if (crystal_val <= 20000000) {frdiv_val = 4;}
;;;1583     else {frdiv_val = 5;}
;;;1584      
;;;1585     // The FLL ref clk divide value depends on FRDIV and the RANGE value
;;;1586     if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
;;;1587     {
;;;1588       fll_ref_freq = ((crystal_val) / (32 << frdiv_val));
;;;1589     }
;;;1590     else
;;;1591     {
;;;1592       fll_ref_freq = ((crystal_val) / (1 << frdiv_val));
;;;1593     }
;;;1594     
;;;1595   // Check resulting FLL frequency 
;;;1596     mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRDIV
;;;1597     if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling function
;;;1598     
;;;1599   // Select external oscilator and Reference Divider and clear IREFS to start ext osc
;;;1600   // If IRCLK is required it must be enabled outside of this driver, existing state will be maintained
;;;1601   // CLKS=0, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
;;;1602     temp_reg = MCG_C1;
;;;1603     temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these fields
;;;1604     temp_reg |= (MCG_C1_CLKS(0) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
;;;1605     MCG_C1 = temp_reg;
;;;1606   
;;;1607   // if the external oscillator is used need to wait for OSCINIT to set
;;;1608     if (erefs_val)
;;;1609     {
;;;1610       for (i = 0 ; i < 20000000 ; i++)
;;;1611       {
;;;1612         if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishes
;;;1613       }
;;;1614       if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with error if not set
;;;1615     }
;;;1616   
;;;1617   // wait for Reference clock Status bit to clear
;;;1618     for (i = 0 ; i < 2000 ; i++)
;;;1619     {
;;;1620       if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishes
;;;1621     }
;;;1622     if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if not set
;;;1623     
;;;1624   // Now in FBE  
;;;1625   // It is recommended that the clock monitor is enabled when using an external clock as the clock source/reference.
;;;1626   // It is enabled here but can be removed if this is not required.
;;;1627     MCG_C6 |= MCG_C6_CME0_MASK;
;;;1628     
;;;1629     return mcg_out; // MCGOUT frequency equals FLL frequency
;;;1630   } // fei_fee
00195c  b007              ADD      sp,sp,#0x1c
00195e  bdf0              POP      {r4-r7,pc}
                  |L1.6496|
001960  48dd              LDR      r0,|L1.7384|
001962  4284              CMP      r4,r0                 ;1541
001964  dd01              BLE      |L1.6506|
001966  2021              MOVS     r0,#0x21              ;1541
001968  e7f8              B        |L1.6492|
                  |L1.6506|
00196a  2f00              CMP      r7,#0                 ;1544
00196c  d00d              BEQ      |L1.6538|
00196e  48db              LDR      r0,|L1.7388|
001970  4284              CMP      r4,r0                 ;1546
001972  db08              BLT      |L1.6534|
001974  48da              LDR      r0,|L1.7392|
001976  4284              CMP      r4,r0                 ;1547
001978  dd02              BLE      |L1.6528|
00197a  48da              LDR      r0,|L1.7396|
00197c  4284              CMP      r4,r0                 ;1547
00197e  db02              BLT      |L1.6534|
                  |L1.6528|
001980  48d9              LDR      r0,|L1.7400|
001982  4284              CMP      r4,r0                 ;1548
001984  dd01              BLE      |L1.6538|
                  |L1.6534|
001986  2022              MOVS     r0,#0x22              ;1548
001988  e7e8              B        |L1.6492|
                  |L1.6538|
00198a  9805              LDR      r0,[sp,#0x14]         ;1552
00198c  2800              CMP      r0,#0                 ;1552
00198e  dd01              BLE      |L1.6548|
001990  2001              MOVS     r0,#1                 ;1554
001992  9005              STR      r0,[sp,#0x14]         ;1554
                  |L1.6548|
001994  48cf              LDR      r0,|L1.7380|
001996  7846              LDRB     r6,[r0,#1]            ;1560
001998  213c              MOVS     r1,#0x3c              ;1561
00199a  4630              MOV      r0,r6                 ;1561
00199c  4388              BICS     r0,r0,r1              ;1561
00199e  4606              MOV      r6,r0                 ;1561
0019a0  48cf              LDR      r0,|L1.7392|
0019a2  4284              CMP      r4,r0                 ;1562
0019a4  dc06              BGT      |L1.6580|
0019a6  9805              LDR      r0,[sp,#0x14]         ;1564
0019a8  00c0              LSLS     r0,r0,#3              ;1564
0019aa  00b9              LSLS     r1,r7,#2              ;1564
0019ac  4308              ORRS     r0,r0,r1              ;1564
0019ae  4330              ORRS     r0,r0,r6              ;1564
0019b0  b2c6              UXTB     r6,r0                 ;1564
0019b2  e013              B        |L1.6620|
                  |L1.6580|
0019b4  48cd              LDR      r0,|L1.7404|
0019b6  4284              CMP      r4,r0                 ;1566
0019b8  dc08              BGT      |L1.6604|
0019ba  9805              LDR      r0,[sp,#0x14]         ;1568
0019bc  00c0              LSLS     r0,r0,#3              ;1568
0019be  2110              MOVS     r1,#0x10              ;1568
0019c0  4308              ORRS     r0,r0,r1              ;1568
0019c2  00b9              LSLS     r1,r7,#2              ;1568
0019c4  4308              ORRS     r0,r0,r1              ;1568
0019c6  4330              ORRS     r0,r0,r6              ;1568
0019c8  b2c6              UXTB     r6,r0                 ;1568
0019ca  e007              B        |L1.6620|
                  |L1.6604|
0019cc  9805              LDR      r0,[sp,#0x14]         ;1572
0019ce  00c0              LSLS     r0,r0,#3              ;1572
0019d0  2120              MOVS     r1,#0x20              ;1572
0019d2  4308              ORRS     r0,r0,r1              ;1572
0019d4  00b9              LSLS     r1,r7,#2              ;1572
0019d6  4308              ORRS     r0,r0,r1              ;1572
0019d8  4330              ORRS     r0,r0,r6              ;1572
0019da  b2c6              UXTB     r6,r0                 ;1572
                  |L1.6620|
0019dc  48bd              LDR      r0,|L1.7380|
0019de  7046              STRB     r6,[r0,#1]            ;1574
0019e0  48c3              LDR      r0,|L1.7408|
0019e2  4284              CMP      r4,r0                 ;1578
0019e4  dc01              BGT      |L1.6634|
0019e6  2500              MOVS     r5,#0                 ;1578
0019e8  e014              B        |L1.6676|
                  |L1.6634|
0019ea  48c2              LDR      r0,|L1.7412|
0019ec  4284              CMP      r4,r0                 ;1579
0019ee  dc01              BGT      |L1.6644|
0019f0  2501              MOVS     r5,#1                 ;1579
0019f2  e00f              B        |L1.6676|
                  |L1.6644|
0019f4  48c0              LDR      r0,|L1.7416|
0019f6  4284              CMP      r4,r0                 ;1580
0019f8  dc01              BGT      |L1.6654|
0019fa  2502              MOVS     r5,#2                 ;1580
0019fc  e00a              B        |L1.6676|
                  |L1.6654|
0019fe  48bf              LDR      r0,|L1.7420|
001a00  4284              CMP      r4,r0                 ;1581
001a02  dc01              BGT      |L1.6664|
001a04  2503              MOVS     r5,#3                 ;1581
001a06  e005              B        |L1.6676|
                  |L1.6664|
001a08  48bd              LDR      r0,|L1.7424|
001a0a  4284              CMP      r4,r0                 ;1582
001a0c  dc01              BGT      |L1.6674|
001a0e  2504              MOVS     r5,#4                 ;1582
001a10  e000              B        |L1.6676|
                  |L1.6674|
001a12  2505              MOVS     r5,#5                 ;1583
                  |L1.6676|
001a14  48af              LDR      r0,|L1.7380|
001a16  7840              LDRB     r0,[r0,#1]            ;1586
001a18  2130              MOVS     r1,#0x30              ;1586
001a1a  4008              ANDS     r0,r0,r1              ;1586
001a1c  0900              LSRS     r0,r0,#4              ;1586
001a1e  2800              CMP      r0,#0                 ;1586
001a20  d007              BEQ      |L1.6706|
001a22  2020              MOVS     r0,#0x20              ;1588
001a24  40a8              LSLS     r0,r0,r5              ;1588
001a26  4601              MOV      r1,r0                 ;1588
001a28  4620              MOV      r0,r4                 ;1588
001a2a  f7fffffe          BL       __aeabi_idivmod
001a2e  9002              STR      r0,[sp,#8]            ;1588
001a30  e006              B        |L1.6720|
                  |L1.6706|
001a32  2001              MOVS     r0,#1                 ;1592
001a34  40a8              LSLS     r0,r0,r5              ;1592
001a36  4601              MOV      r1,r0                 ;1592
001a38  4620              MOV      r0,r4                 ;1592
001a3a  f7fffffe          BL       __aeabi_idivmod
001a3e  9002              STR      r0,[sp,#8]            ;1592
                  |L1.6720|
001a40  9802              LDR      r0,[sp,#8]            ;1596
001a42  f7fffffe          BL       fll_freq
001a46  9003              STR      r0,[sp,#0xc]          ;1596
001a48  9803              LDR      r0,[sp,#0xc]          ;1597
001a4a  283c              CMP      r0,#0x3c              ;1597
001a4c  da01              BGE      |L1.6738|
001a4e  9803              LDR      r0,[sp,#0xc]          ;1597
001a50  e784              B        |L1.6492|
                  |L1.6738|
001a52  48a0              LDR      r0,|L1.7380|
001a54  7806              LDRB     r6,[r0,#0]            ;1602
001a56  21fc              MOVS     r1,#0xfc              ;1603
001a58  4630              MOV      r0,r6                 ;1603
001a5a  4388              BICS     r0,r0,r1              ;1603
001a5c  4606              MOV      r6,r0                 ;1603
001a5e  00e8              LSLS     r0,r5,#3              ;1604
001a60  2138              MOVS     r1,#0x38              ;1604
001a62  4008              ANDS     r0,r0,r1              ;1604
001a64  4306              ORRS     r6,r6,r0              ;1604
001a66  489b              LDR      r0,|L1.7380|
001a68  7006              STRB     r6,[r0,#0]            ;1605
001a6a  2f00              CMP      r7,#0                 ;1608
001a6c  d019              BEQ      |L1.6818|
001a6e  2000              MOVS     r0,#0                 ;1610
001a70  9001              STR      r0,[sp,#4]            ;1610
001a72  e009              B        |L1.6792|
                  |L1.6772|
001a74  4897              LDR      r0,|L1.7380|
001a76  7980              LDRB     r0,[r0,#6]            ;1612
001a78  2102              MOVS     r1,#2                 ;1612
001a7a  4008              ANDS     r0,r0,r1              ;1612
001a7c  2800              CMP      r0,#0                 ;1612
001a7e  d000              BEQ      |L1.6786|
001a80  e006              B        |L1.6800|
                  |L1.6786|
001a82  9801              LDR      r0,[sp,#4]            ;1610
001a84  1c40              ADDS     r0,r0,#1              ;1610
001a86  9001              STR      r0,[sp,#4]            ;1610
                  |L1.6792|
001a88  499d              LDR      r1,|L1.7424|
001a8a  9801              LDR      r0,[sp,#4]            ;1610
001a8c  4288              CMP      r0,r1                 ;1610
001a8e  dbf1              BLT      |L1.6772|
                  |L1.6800|
001a90  bf00              NOP                            ;1612
001a92  4890              LDR      r0,|L1.7380|
001a94  7980              LDRB     r0,[r0,#6]            ;1614
001a96  2102              MOVS     r1,#2                 ;1614
001a98  4008              ANDS     r0,r0,r1              ;1614
001a9a  2800              CMP      r0,#0                 ;1614
001a9c  d101              BNE      |L1.6818|
001a9e  2023              MOVS     r0,#0x23              ;1614
001aa0  e75c              B        |L1.6492|
                  |L1.6818|
001aa2  2000              MOVS     r0,#0                 ;1618
001aa4  9001              STR      r0,[sp,#4]            ;1618
001aa6  e009              B        |L1.6844|
                  |L1.6824|
001aa8  488a              LDR      r0,|L1.7380|
001aaa  7980              LDRB     r0,[r0,#6]            ;1620
001aac  2110              MOVS     r1,#0x10              ;1620
001aae  4008              ANDS     r0,r0,r1              ;1620
001ab0  2800              CMP      r0,#0                 ;1620
001ab2  d100              BNE      |L1.6838|
001ab4  e007              B        |L1.6854|
                  |L1.6838|
001ab6  9801              LDR      r0,[sp,#4]            ;1618
001ab8  1c40              ADDS     r0,r0,#1              ;1618
001aba  9001              STR      r0,[sp,#4]            ;1618
                  |L1.6844|
001abc  217d              MOVS     r1,#0x7d              ;1618
001abe  0109              LSLS     r1,r1,#4              ;1618
001ac0  9801              LDR      r0,[sp,#4]            ;1618
001ac2  4288              CMP      r0,r1                 ;1618
001ac4  dbf0              BLT      |L1.6824|
                  |L1.6854|
001ac6  bf00              NOP                            ;1620
001ac8  4882              LDR      r0,|L1.7380|
001aca  7980              LDRB     r0,[r0,#6]            ;1622
001acc  2110              MOVS     r1,#0x10              ;1622
001ace  4008              ANDS     r0,r0,r1              ;1622
001ad0  2800              CMP      r0,#0                 ;1622
001ad2  d001              BEQ      |L1.6872|
001ad4  2011              MOVS     r0,#0x11              ;1622
001ad6  e741              B        |L1.6492|
                  |L1.6872|
001ad8  487e              LDR      r0,|L1.7380|
001ada  7940              LDRB     r0,[r0,#5]            ;1627
001adc  2120              MOVS     r1,#0x20              ;1627
001ade  4308              ORRS     r0,r0,r1              ;1627
001ae0  497c              LDR      r1,|L1.7380|
001ae2  7148              STRB     r0,[r1,#5]            ;1627
001ae4  9803              LDR      r0,[sp,#0xc]          ;1629
001ae6  e739              B        |L1.6492|
;;;1631   
                          ENDP

                  fee_fei PROC
;;;1632   
;;;1633   int fee_fei(int slow_irc_freq)
001ae8  b570              PUSH     {r4-r6,lr}
;;;1634   {
001aea  4604              MOV      r4,r0
;;;1635     short i;
;;;1636     int mcg_out;
;;;1637   
;;;1638   // Check MCG is in FEE mode
;;;1639     if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted FLL
001aec  4879              LDR      r0,|L1.7380|
001aee  7980              LDRB     r0,[r0,#6]
001af0  210c              MOVS     r1,#0xc
001af2  4008              ANDS     r0,r0,r1
001af4  0880              LSRS     r0,r0,#2
001af6  2800              CMP      r0,#0
001af8  d10b              BNE      |L1.6930|
001afa  4876              LDR      r0,|L1.7380|
001afc  7980              LDRB     r0,[r0,#6]
001afe  2110              MOVS     r1,#0x10
001b00  4008              ANDS     r0,r0,r1
001b02  2800              CMP      r0,#0
001b04  d105              BNE      |L1.6930|
001b06  4873              LDR      r0,|L1.7380|
001b08  7980              LDRB     r0,[r0,#6]
001b0a  2120              MOVS     r1,#0x20
001b0c  4008              ANDS     r0,r0,r1
001b0e  2800              CMP      r0,#0
001b10  d001              BEQ      |L1.6934|
                  |L1.6930|
;;;1640         (!(MCG_S & MCG_S_IREFST_MASK)) &&                             // check FLL ref is external ref clk
;;;1641         (!(MCG_S & MCG_S_PLLST_MASK))))                               // check PLLS mux has selected FLL
;;;1642     {
;;;1643       return 0x2;                                                     // return error code
001b12  2002              MOVS     r0,#2
                  |L1.6932|
;;;1644     } 
;;;1645         
;;;1646   // Check IRC frequency is within spec.
;;;1647     if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
;;;1648     {
;;;1649       return 0x31;
;;;1650     }
;;;1651   
;;;1652     // Check resulting FLL frequency 
;;;1653     mcg_out = fll_freq(slow_irc_freq); 
;;;1654     if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling function
;;;1655     
;;;1656   // Ensure clock monitor is disabled before switching to FEI otherwise a loss of clock will trigger
;;;1657     MCG_C6 &= ~MCG_C6_CME0_MASK;
;;;1658   
;;;1659   // Change FLL reference clock from external to internal by setting IREFS bit
;;;1660     MCG_C1 |= MCG_C1_IREFS_MASK; // select internal reference
;;;1661     
;;;1662   // wait for Reference clock to switch to internal reference 
;;;1663     for (i = 0 ; i < 2000 ; i++)
;;;1664     {
;;;1665       if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
;;;1666     }
;;;1667     if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error if not set  
;;;1668     
;;;1669   // Now in FEI mode  
;;;1670     return mcg_out;  
;;;1671   } // fee_fei
001b14  bd70              POP      {r4-r6,pc}
                  |L1.6934|
001b16  487b              LDR      r0,|L1.7428|
001b18  4284              CMP      r4,r0                 ;1647
001b1a  db02              BLT      |L1.6946|
001b1c  487a              LDR      r0,|L1.7432|
001b1e  4284              CMP      r4,r0                 ;1647
001b20  dd01              BLE      |L1.6950|
                  |L1.6946|
001b22  2031              MOVS     r0,#0x31              ;1649
001b24  e7f6              B        |L1.6932|
                  |L1.6950|
001b26  4620              MOV      r0,r4                 ;1653
001b28  f7fffffe          BL       fll_freq
001b2c  4606              MOV      r6,r0                 ;1653
001b2e  2e3c              CMP      r6,#0x3c              ;1654
001b30  da01              BGE      |L1.6966|
001b32  4630              MOV      r0,r6                 ;1654
001b34  e7ee              B        |L1.6932|
                  |L1.6966|
001b36  4867              LDR      r0,|L1.7380|
001b38  7940              LDRB     r0,[r0,#5]            ;1657
001b3a  2120              MOVS     r1,#0x20              ;1657
001b3c  4388              BICS     r0,r0,r1              ;1657
001b3e  4965              LDR      r1,|L1.7380|
001b40  7148              STRB     r0,[r1,#5]            ;1657
001b42  4608              MOV      r0,r1                 ;1660
001b44  7800              LDRB     r0,[r0,#0]            ;1660
001b46  2104              MOVS     r1,#4                 ;1660
001b48  4308              ORRS     r0,r0,r1              ;1660
001b4a  4962              LDR      r1,|L1.7380|
001b4c  7008              STRB     r0,[r1,#0]            ;1660
001b4e  2500              MOVS     r5,#0                 ;1663
001b50  e008              B        |L1.7012|
                  |L1.6994|
001b52  4860              LDR      r0,|L1.7380|
001b54  7980              LDRB     r0,[r0,#6]            ;1665
001b56  2110              MOVS     r1,#0x10              ;1665
001b58  4008              ANDS     r0,r0,r1              ;1665
001b5a  2800              CMP      r0,#0                 ;1665
001b5c  d000              BEQ      |L1.7008|
001b5e  e005              B        |L1.7020|
                  |L1.7008|
001b60  1c68              ADDS     r0,r5,#1              ;1663
001b62  b205              SXTH     r5,r0                 ;1663
                  |L1.7012|
001b64  207d              MOVS     r0,#0x7d              ;1663
001b66  0100              LSLS     r0,r0,#4              ;1663
001b68  4285              CMP      r5,r0                 ;1663
001b6a  dbf2              BLT      |L1.6994|
                  |L1.7020|
001b6c  bf00              NOP                            ;1665
001b6e  4859              LDR      r0,|L1.7380|
001b70  7980              LDRB     r0,[r0,#6]            ;1667
001b72  2110              MOVS     r1,#0x10              ;1667
001b74  4008              ANDS     r0,r0,r1              ;1667
001b76  2800              CMP      r0,#0                 ;1667
001b78  d101              BNE      |L1.7038|
001b7a  2012              MOVS     r0,#0x12              ;1667
001b7c  e7ca              B        |L1.6932|
                  |L1.7038|
001b7e  4630              MOV      r0,r6                 ;1670
001b80  e7c8              B        |L1.6932|
;;;1672   
                          ENDP

                  what_mcg_mode PROC
;;;1851   
;;;1852   unsigned char what_mcg_mode(void)
001b82  4854              LDR      r0,|L1.7380|
;;;1853   {
;;;1854     // check if in FEI mode
;;;1855     if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) &&      // check CLKS mux has selcted FLL output
001b84  7980              LDRB     r0,[r0,#6]
001b86  210c              MOVS     r1,#0xc
001b88  4008              ANDS     r0,r0,r1
001b8a  0880              LSRS     r0,r0,#2
001b8c  2800              CMP      r0,#0
001b8e  d10d              BNE      |L1.7084|
;;;1856         (MCG_S & MCG_S_IREFST_MASK) &&                                     // check FLL ref is internal ref clk
001b90  4850              LDR      r0,|L1.7380|
001b92  7980              LDRB     r0,[r0,#6]
001b94  2110              MOVS     r1,#0x10
001b96  4008              ANDS     r0,r0,r1
001b98  2800              CMP      r0,#0
001b9a  d007              BEQ      |L1.7084|
;;;1857         (!(MCG_S & MCG_S_PLLST_MASK)))                                     // check PLLS mux has selected FLL
001b9c  484d              LDR      r0,|L1.7380|
001b9e  7980              LDRB     r0,[r0,#6]
001ba0  2120              MOVS     r1,#0x20
001ba2  4008              ANDS     r0,r0,r1
001ba4  2800              CMP      r0,#0
001ba6  d101              BNE      |L1.7084|
;;;1858     {
;;;1859       return FEI;                                                          // return FEI code
001ba8  2003              MOVS     r0,#3
                  |L1.7082|
;;;1860     }
;;;1861     // Check MCG is in PEE mode
;;;1862     else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted PLL output
;;;1863             (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is external ref clk
;;;1864             (MCG_S & MCG_S_PLLST_MASK))                                    // check PLLS mux has selected PLL 
;;;1865     {
;;;1866       return PEE;                                                          // return PEE code
;;;1867     }
;;;1868     // Check MCG is in PBE mode
;;;1869     else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
;;;1870             (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is external ref clk
;;;1871             (MCG_S & MCG_S_PLLST_MASK) &&                                  // check PLLS mux has selected PLL
;;;1872             (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check MCG_C2[LP] bit is not set
;;;1873     {
;;;1874       return PBE;                                                          // return PBE code
;;;1875     }
;;;1876     // Check MCG is in FBE mode
;;;1877     else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
;;;1878             (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is external ref clk
;;;1879             (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has selected FLL
;;;1880             (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check MCG_C2[LP] bit is not set   
;;;1881     {
;;;1882       return FBE;                                                          // return FBE code
;;;1883     }
;;;1884     // Check MCG is in BLPE mode
;;;1885     else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted external reference
;;;1886             (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is external ref clk
;;;1887             (MCG_C2 & MCG_C2_LP_MASK))                                     // check MCG_C2[LP] bit is set   
;;;1888     {
;;;1889       return BLPE;                                                         // return BLPE code
;;;1890     }
;;;1891     // check if in BLPI mode
;;;1892     else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted int ref clk
;;;1893             (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is internal ref clk
;;;1894             (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has selected FLL
;;;1895             (MCG_C2 & MCG_C2_LP_MASK))                                     // check LP bit is set
;;;1896     {
;;;1897       return BLPI;                                                         // return BLPI code
;;;1898     }
;;;1899     // check if in FBI mode
;;;1900     else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted int ref clk
;;;1901             (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is internal ref clk
;;;1902             (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has selected FLL
;;;1903             (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check LP bit is clear
;;;1904     {  
;;;1905       return FBI;                                                          // return FBI code 
;;;1906     }
;;;1907     // Check MCG is in FEE mode
;;;1908     else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted FLL
;;;1909             (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is external ref clk
;;;1910             (!(MCG_S & MCG_S_PLLST_MASK)))                                 // check PLLS mux has selected FLL
;;;1911     {
;;;1912       return FEE;                                                          // return FEE code
;;;1913     }
;;;1914     else
;;;1915     {
;;;1916       return 0;                                                            // error condition
;;;1917     }
;;;1918   } // what_mcg_mode
001baa  4770              BX       lr
                  |L1.7084|
001bac  4849              LDR      r0,|L1.7380|
001bae  7980              LDRB     r0,[r0,#6]            ;1862
001bb0  210c              MOVS     r1,#0xc               ;1862
001bb2  4008              ANDS     r0,r0,r1              ;1862
001bb4  0880              LSRS     r0,r0,#2              ;1862
001bb6  2803              CMP      r0,#3                 ;1862
001bb8  d10d              BNE      |L1.7126|
001bba  4846              LDR      r0,|L1.7380|
001bbc  7980              LDRB     r0,[r0,#6]            ;1863
001bbe  2110              MOVS     r1,#0x10              ;1863
001bc0  4008              ANDS     r0,r0,r1              ;1863
001bc2  2800              CMP      r0,#0                 ;1863
001bc4  d107              BNE      |L1.7126|
001bc6  4843              LDR      r0,|L1.7380|
001bc8  7980              LDRB     r0,[r0,#6]            ;1864
001bca  2120              MOVS     r1,#0x20              ;1864
001bcc  4008              ANDS     r0,r0,r1              ;1864
001bce  2800              CMP      r0,#0                 ;1864
001bd0  d001              BEQ      |L1.7126|
001bd2  2008              MOVS     r0,#8                 ;1866
001bd4  e7e9              B        |L1.7082|
                  |L1.7126|
001bd6  483f              LDR      r0,|L1.7380|
001bd8  7980              LDRB     r0,[r0,#6]            ;1869
001bda  210c              MOVS     r1,#0xc               ;1869
001bdc  4008              ANDS     r0,r0,r1              ;1869
001bde  0880              LSRS     r0,r0,#2              ;1869
001be0  2802              CMP      r0,#2                 ;1869
001be2  d113              BNE      |L1.7180|
001be4  483b              LDR      r0,|L1.7380|
001be6  7980              LDRB     r0,[r0,#6]            ;1870
001be8  2110              MOVS     r1,#0x10              ;1870
001bea  4008              ANDS     r0,r0,r1              ;1870
001bec  2800              CMP      r0,#0                 ;1870
001bee  d10d              BNE      |L1.7180|
001bf0  4838              LDR      r0,|L1.7380|
001bf2  7980              LDRB     r0,[r0,#6]            ;1871
001bf4  2120              MOVS     r1,#0x20              ;1871
001bf6  4008              ANDS     r0,r0,r1              ;1871
001bf8  2800              CMP      r0,#0                 ;1871
001bfa  d007              BEQ      |L1.7180|
001bfc  4835              LDR      r0,|L1.7380|
001bfe  7840              LDRB     r0,[r0,#1]            ;1872
001c00  2102              MOVS     r1,#2                 ;1872
001c02  4008              ANDS     r0,r0,r1              ;1872
001c04  2800              CMP      r0,#0                 ;1872
001c06  d101              BNE      |L1.7180|
001c08  2007              MOVS     r0,#7                 ;1874
001c0a  e7ce              B        |L1.7082|
                  |L1.7180|
001c0c  4831              LDR      r0,|L1.7380|
001c0e  7980              LDRB     r0,[r0,#6]            ;1877
001c10  210c              MOVS     r1,#0xc               ;1877
001c12  4008              ANDS     r0,r0,r1              ;1877
001c14  0880              LSRS     r0,r0,#2              ;1877
001c16  2802              CMP      r0,#2                 ;1877
001c18  d113              BNE      |L1.7234|
001c1a  482e              LDR      r0,|L1.7380|
001c1c  7980              LDRB     r0,[r0,#6]            ;1878
001c1e  2110              MOVS     r1,#0x10              ;1878
001c20  4008              ANDS     r0,r0,r1              ;1878
001c22  2800              CMP      r0,#0                 ;1878
001c24  d10d              BNE      |L1.7234|
001c26  482b              LDR      r0,|L1.7380|
001c28  7980              LDRB     r0,[r0,#6]            ;1879
001c2a  2120              MOVS     r1,#0x20              ;1879
001c2c  4008              ANDS     r0,r0,r1              ;1879
001c2e  2800              CMP      r0,#0                 ;1879
001c30  d107              BNE      |L1.7234|
001c32  4828              LDR      r0,|L1.7380|
001c34  7840              LDRB     r0,[r0,#1]            ;1880
001c36  2102              MOVS     r1,#2                 ;1880
001c38  4008              ANDS     r0,r0,r1              ;1880
001c3a  2800              CMP      r0,#0                 ;1880
001c3c  d101              BNE      |L1.7234|
001c3e  2005              MOVS     r0,#5                 ;1882
001c40  e7b3              B        |L1.7082|
                  |L1.7234|
001c42  4824              LDR      r0,|L1.7380|
001c44  7980              LDRB     r0,[r0,#6]            ;1885
001c46  210c              MOVS     r1,#0xc               ;1885
001c48  4008              ANDS     r0,r0,r1              ;1885
001c4a  0880              LSRS     r0,r0,#2              ;1885
001c4c  2802              CMP      r0,#2                 ;1885
001c4e  d10d              BNE      |L1.7276|
001c50  4820              LDR      r0,|L1.7380|
001c52  7980              LDRB     r0,[r0,#6]            ;1886
001c54  2110              MOVS     r1,#0x10              ;1886
001c56  4008              ANDS     r0,r0,r1              ;1886
001c58  2800              CMP      r0,#0                 ;1886
001c5a  d107              BNE      |L1.7276|
001c5c  481d              LDR      r0,|L1.7380|
001c5e  7840              LDRB     r0,[r0,#1]            ;1887
001c60  2102              MOVS     r1,#2                 ;1887
001c62  4008              ANDS     r0,r0,r1              ;1887
001c64  2800              CMP      r0,#0                 ;1887
001c66  d001              BEQ      |L1.7276|
001c68  2006              MOVS     r0,#6                 ;1889
001c6a  e79e              B        |L1.7082|
                  |L1.7276|
001c6c  4819              LDR      r0,|L1.7380|
001c6e  7980              LDRB     r0,[r0,#6]            ;1892
001c70  210c              MOVS     r1,#0xc               ;1892
001c72  4008              ANDS     r0,r0,r1              ;1892
001c74  0880              LSRS     r0,r0,#2              ;1892
001c76  2801              CMP      r0,#1                 ;1892
001c78  d113              BNE      |L1.7330|
001c7a  4816              LDR      r0,|L1.7380|
001c7c  7980              LDRB     r0,[r0,#6]            ;1893
001c7e  2110              MOVS     r1,#0x10              ;1893
001c80  4008              ANDS     r0,r0,r1              ;1893
001c82  2800              CMP      r0,#0                 ;1893
001c84  d00d              BEQ      |L1.7330|
001c86  4813              LDR      r0,|L1.7380|
001c88  7980              LDRB     r0,[r0,#6]            ;1894
001c8a  2120              MOVS     r1,#0x20              ;1894
001c8c  4008              ANDS     r0,r0,r1              ;1894
001c8e  2800              CMP      r0,#0                 ;1894
001c90  d107              BNE      |L1.7330|
001c92  4810              LDR      r0,|L1.7380|
001c94  7840              LDRB     r0,[r0,#1]            ;1895
001c96  2102              MOVS     r1,#2                 ;1895
001c98  4008              ANDS     r0,r0,r1              ;1895
001c9a  2800              CMP      r0,#0                 ;1895
001c9c  d001              BEQ      |L1.7330|
001c9e  2001              MOVS     r0,#1                 ;1897
001ca0  e783              B        |L1.7082|
                  |L1.7330|
001ca2  480c              LDR      r0,|L1.7380|
001ca4  7980              LDRB     r0,[r0,#6]            ;1900
001ca6  210c              MOVS     r1,#0xc               ;1900
001ca8  4008              ANDS     r0,r0,r1              ;1900
001caa  0880              LSRS     r0,r0,#2              ;1900
001cac  2801              CMP      r0,#1                 ;1900
001cae  d130              BNE      |L1.7442|
001cb0  4808              LDR      r0,|L1.7380|
001cb2  7980              LDRB     r0,[r0,#6]            ;1901
001cb4  2110              MOVS     r1,#0x10              ;1901
001cb6  4008              ANDS     r0,r0,r1              ;1901
001cb8  2800              CMP      r0,#0                 ;1901
001cba  d02a              BEQ      |L1.7442|
001cbc  4805              LDR      r0,|L1.7380|
001cbe  7980              LDRB     r0,[r0,#6]            ;1902
001cc0  2120              MOVS     r1,#0x20              ;1902
001cc2  4008              ANDS     r0,r0,r1              ;1902
001cc4  2800              CMP      r0,#0                 ;1902
001cc6  d124              BNE      |L1.7442|
001cc8  4802              LDR      r0,|L1.7380|
001cca  7840              LDRB     r0,[r0,#1]            ;1903
001ccc  2102              MOVS     r1,#2                 ;1903
001cce  4008              ANDS     r0,r0,r1              ;1903
001cd0  2800              CMP      r0,#0                 ;1903
001cd2  e01b              B        |L1.7436|
                  |L1.7380|
                          DCD      0x40064000
                  |L1.7384|
                          DCD      0x02faf080
                  |L1.7388|
                          DCD      0x00007530
                  |L1.7392|
                          DCD      0x00009c40
                  |L1.7396|
                          DCD      0x002dc6c0
                  |L1.7400|
                          DCD      0x01e84800
                  |L1.7404|
                          DCD      0x007a1200
                  |L1.7408|
                          DCD      0x001312d0
                  |L1.7412|
                          DCD      0x002625a0
                  |L1.7416|
                          DCD      0x004c4b40
                  |L1.7420|
                          DCD      0x00989680
                  |L1.7424|
                          DCD      0x01312d00
                  |L1.7428|
                          DCD      0x00007a12
                  |L1.7432|
                          DCD      0x00009897
                  |L1.7436|
001d0c  d101              BNE      |L1.7442|
001d0e  2002              MOVS     r0,#2                 ;1905
001d10  e74b              B        |L1.7082|
                  |L1.7442|
001d12  48b4              LDR      r0,|L1.8164|
001d14  7980              LDRB     r0,[r0,#6]            ;1908
001d16  210c              MOVS     r1,#0xc               ;1908
001d18  4008              ANDS     r0,r0,r1              ;1908
001d1a  0880              LSRS     r0,r0,#2              ;1908
001d1c  2800              CMP      r0,#0                 ;1908
001d1e  d10d              BNE      |L1.7484|
001d20  48b0              LDR      r0,|L1.8164|
001d22  7980              LDRB     r0,[r0,#6]            ;1909
001d24  2110              MOVS     r1,#0x10              ;1909
001d26  4008              ANDS     r0,r0,r1              ;1909
001d28  2800              CMP      r0,#0                 ;1909
001d2a  d107              BNE      |L1.7484|
001d2c  48ad              LDR      r0,|L1.8164|
001d2e  7980              LDRB     r0,[r0,#6]            ;1910
001d30  2120              MOVS     r1,#0x20              ;1910
001d32  4008              ANDS     r0,r0,r1              ;1910
001d34  2800              CMP      r0,#0                 ;1910
001d36  d101              BNE      |L1.7484|
001d38  2004              MOVS     r0,#4                 ;1912
001d3a  e736              B        |L1.7082|
                  |L1.7484|
001d3c  2000              MOVS     r0,#0                 ;1916
001d3e  e734              B        |L1.7082|
;;;1919   
                          ENDP

                  atc PROC
;;;1674   
;;;1675   unsigned char atc(unsigned char irc_select, int irc_freq, int mcg_out_freq)
001d40  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1676   {
001d42  b08a              SUB      sp,sp,#0x28
001d44  4605              MOV      r5,r0
001d46  460e              MOV      r6,r1
;;;1677     unsigned char mcg_mode;
;;;1678     unsigned short atcv;
;;;1679     int bus_clock_freq;
;;;1680     int  bus_clk_div_val;
;;;1681     int orig_div;
;;;1682     int temp_reg;
;;;1683     
;;;1684     if (irc_select > 0) // force irc to 1 if greater than 0
001d48  2d00              CMP      r5,#0
001d4a  dd00              BLE      |L1.7502|
;;;1685     {
;;;1686       irc_select = 1;
001d4c  2501              MOVS     r5,#1
                  |L1.7502|
;;;1687     }
;;;1688     
;;;1689     mcg_mode = what_mcg_mode(); // get present MCG mode
001d4e  f7fffffe          BL       what_mcg_mode
001d52  4607              MOV      r7,r0
;;;1690     if ((mcg_mode != PEE) && (mcg_mode != PBE) && (mcg_mode != FBE))
001d54  2f08              CMP      r7,#8
001d56  d006              BEQ      |L1.7526|
001d58  2f07              CMP      r7,#7
001d5a  d004              BEQ      |L1.7526|
001d5c  2f05              CMP      r7,#5
001d5e  d002              BEQ      |L1.7526|
;;;1691     {
;;;1692       return 1; // return error code if not in PEE, PBE or FBE modes
001d60  2001              MOVS     r0,#1
                  |L1.7522|
;;;1693     }
;;;1694     
;;;1695     orig_div = SIM_CLKDIV1; //store present clock divider values
;;;1696     
;;;1697     bus_clk_div_val = mcg_out_freq / 16000000; // calculate bus clock divider to generate fastest allowed bus clock for autotrim
;;;1698     temp_reg = SIM_CLKDIV1;
;;;1699     temp_reg &= ~SIM_CLKDIV1_OUTDIV4_MASK; // clear dividers except core
;;;1700     // set all bus and flash dividers to same value to ensure clocking restrictions are met
;;;1701     temp_reg |= SIM_CLKDIV1_OUTDIV4(bus_clk_div_val);
;;;1702     SIM_CLKDIV1 = temp_reg; // set actual dividers
;;;1703     
;;;1704     bus_clock_freq = mcg_out_freq / (((SIM_CLKDIV1) >> 16)+ 1);//For KL25, flash and bus use the same bus div
;;;1705     if ((bus_clock_freq < 8000000) || (bus_clock_freq > 16000000))
;;;1706     {
;;;1707       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1708       return 3; // error, bus clock frequency is not within 8MHz to 16MHz
;;;1709     }
;;;1710                   
;;;1711     if(!irc_select) //determine if slow or fast IRC to be trimmed
;;;1712     {
;;;1713       if (irc_freq < 31250) // check frequency is above min spec.
;;;1714       {
;;;1715         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1716         return 4;
;;;1717       }
;;;1718       if (irc_freq > 39062) // check frequency is below max spec.
;;;1719       {
;;;1720         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1721         return 5;
;;;1722       }         
;;;1723     }
;;;1724     else
;;;1725     {
;;;1726       if (irc_freq < 3000000) // check frequency is above min spec.
;;;1727       {
;;;1728         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1729         return 6;
;;;1730       }
;;;1731       if (irc_freq > 5000000) // check frequency is below max spec.
;;;1732       {
;;;1733         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1734         return 7;
;;;1735       }            
;;;1736     } // if
;;;1737           
;;;1738   // Set up autocal registers, must use floating point calculation
;;;1739     if (irc_select) 
;;;1740       atcv = (unsigned short)(128.0f * (21.0f * (bus_clock_freq / (float)irc_freq)));
;;;1741     else
;;;1742       atcv = (unsigned short)(21.0f * (bus_clock_freq / (float)irc_freq));
;;;1743           
;;;1744     MCG_ATCVL = (atcv & 0xFF); //Set ATCVL to lower 8 bits of count value
;;;1745     MCG_ATCVH = ((atcv & 0xFF00) >> 8); // Set ATCVH to upper 8 bits of count value
;;;1746   
;;;1747   // Enable autocal
;;;1748     MCG_SC &= ~(MCG_SC_ATME_MASK | MCG_SC_ATMS_MASK |MCG_SC_ATMF_MASK); // clear auto trim settings
;;;1749     temp_reg = (MCG_SC_ATME_MASK | (irc_select << MCG_SC_ATMS_SHIFT)); //Select IRC to trim and enable trim machine
;;;1750     MCG_SC |= temp_reg;
;;;1751           
;;;1752     while (MCG_SC & MCG_SC_ATME_MASK) {}; //poll for ATME bit to clear
;;;1753           
;;;1754     if (MCG_SC & MCG_SC_ATMF_MASK) // check if error flag set
;;;1755     {
;;;1756       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1757       return 8;
;;;1758     } 
;;;1759     else 
;;;1760     {      
;;;1761       if (!irc_select)
;;;1762       {
;;;1763         if ((MCG_C3 == 0xFF) || (MCG_C3 == 0))
;;;1764         {
;;;1765           SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1766           return 9;
;;;1767         }
;;;1768       }
;;;1769       else
;;;1770       {
;;;1771         if ((((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0xF) ||
;;;1772             (((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0))
;;;1773         {
;;;1774           SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1775           return 10;
;;;1776         }
;;;1777       }
;;;1778     }
;;;1779     SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
;;;1780     return 0;
;;;1781   }// atc
001d62  b00d              ADD      sp,sp,#0x34
001d64  bdf0              POP      {r4-r7,pc}
                  |L1.7526|
001d66  48a0              LDR      r0,|L1.8168|
001d68  6844              LDR      r4,[r0,#4]            ;1695
001d6a  49a0              LDR      r1,|L1.8172|
001d6c  980c              LDR      r0,[sp,#0x30]         ;1697
001d6e  f7fffffe          BL       __aeabi_idivmod
001d72  9007              STR      r0,[sp,#0x1c]         ;1697
001d74  489c              LDR      r0,|L1.8168|
001d76  6840              LDR      r0,[r0,#4]            ;1698
001d78  9006              STR      r0,[sp,#0x18]         ;1698
001d7a  2107              MOVS     r1,#7                 ;1699
001d7c  0409              LSLS     r1,r1,#16             ;1699
001d7e  9806              LDR      r0,[sp,#0x18]         ;1699
001d80  4388              BICS     r0,r0,r1              ;1699
001d82  9006              STR      r0,[sp,#0x18]         ;1699
001d84  9807              LDR      r0,[sp,#0x1c]         ;1701
001d86  0400              LSLS     r0,r0,#16             ;1701
001d88  4008              ANDS     r0,r0,r1              ;1701
001d8a  9906              LDR      r1,[sp,#0x18]         ;1701
001d8c  4308              ORRS     r0,r0,r1              ;1701
001d8e  9006              STR      r0,[sp,#0x18]         ;1701
001d90  4995              LDR      r1,|L1.8168|
001d92  9806              LDR      r0,[sp,#0x18]         ;1702
001d94  6048              STR      r0,[r1,#4]            ;1702
001d96  4608              MOV      r0,r1                 ;1704
001d98  6840              LDR      r0,[r0,#4]            ;1704
001d9a  0c00              LSRS     r0,r0,#16             ;1704
001d9c  1c41              ADDS     r1,r0,#1              ;1704
001d9e  980c              LDR      r0,[sp,#0x30]         ;1704
001da0  f7fffffe          BL       __aeabi_uidivmod
001da4  9008              STR      r0,[sp,#0x20]         ;1704
001da6  4992              LDR      r1,|L1.8176|
001da8  9808              LDR      r0,[sp,#0x20]         ;1705
001daa  4288              CMP      r0,r1                 ;1705
001dac  db03              BLT      |L1.7606|
001dae  0049              LSLS     r1,r1,#1              ;1705
001db0  9808              LDR      r0,[sp,#0x20]         ;1705
001db2  4288              CMP      r0,r1                 ;1705
001db4  dd03              BLE      |L1.7614|
                  |L1.7606|
001db6  488c              LDR      r0,|L1.8168|
001db8  6044              STR      r4,[r0,#4]            ;1707
001dba  2003              MOVS     r0,#3                 ;1708
001dbc  e7d1              B        |L1.7522|
                  |L1.7614|
001dbe  2d00              CMP      r5,#0                 ;1711
001dc0  d10d              BNE      |L1.7646|
001dc2  488c              LDR      r0,|L1.8180|
001dc4  4286              CMP      r6,r0                 ;1713
001dc6  da03              BGE      |L1.7632|
001dc8  4887              LDR      r0,|L1.8168|
001dca  6044              STR      r4,[r0,#4]            ;1715
001dcc  2004              MOVS     r0,#4                 ;1716
001dce  e7c8              B        |L1.7522|
                  |L1.7632|
001dd0  4889              LDR      r0,|L1.8184|
001dd2  4286              CMP      r6,r0                 ;1718
001dd4  dd11              BLE      |L1.7674|
001dd6  4884              LDR      r0,|L1.8168|
001dd8  6044              STR      r4,[r0,#4]            ;1720
001dda  2005              MOVS     r0,#5                 ;1721
001ddc  e7c1              B        |L1.7522|
                  |L1.7646|
001dde  4887              LDR      r0,|L1.8188|
001de0  4286              CMP      r6,r0                 ;1726
001de2  da03              BGE      |L1.7660|
001de4  4880              LDR      r0,|L1.8168|
001de6  6044              STR      r4,[r0,#4]            ;1728
001de8  2006              MOVS     r0,#6                 ;1729
001dea  e7ba              B        |L1.7522|
                  |L1.7660|
001dec  4884              LDR      r0,|L1.8192|
001dee  4286              CMP      r6,r0                 ;1731
001df0  dd03              BLE      |L1.7674|
001df2  487d              LDR      r0,|L1.8168|
001df4  6044              STR      r4,[r0,#4]            ;1733
001df6  2007              MOVS     r0,#7                 ;1734
001df8  e7b3              B        |L1.7522|
                  |L1.7674|
001dfa  2d00              CMP      r5,#0                 ;1739
001dfc  d019              BEQ      |L1.7730|
001dfe  4630              MOV      r0,r6                 ;1740
001e00  f7fffffe          BL       __aeabi_i2f
001e04  9002              STR      r0,[sp,#8]            ;1740
001e06  9808              LDR      r0,[sp,#0x20]         ;1740
001e08  f7fffffe          BL       __aeabi_i2f
001e0c  9001              STR      r0,[sp,#4]            ;1740
001e0e  9902              LDR      r1,[sp,#8]            ;1740
001e10  f7fffffe          BL       __aeabi_fdiv
001e14  497b              LDR      r1,|L1.8196|
001e16  9003              STR      r0,[sp,#0xc]          ;1740
001e18  f7fffffe          BL       __aeabi_fmul
001e1c  2143              MOVS     r1,#0x43              ;1740
001e1e  0609              LSLS     r1,r1,#24             ;1740
001e20  9004              STR      r0,[sp,#0x10]         ;1740
001e22  f7fffffe          BL       __aeabi_fmul
001e26  9005              STR      r0,[sp,#0x14]         ;1740
001e28  f7fffffe          BL       __aeabi_f2uiz
001e2c  b280              UXTH     r0,r0                 ;1740
001e2e  9009              STR      r0,[sp,#0x24]         ;1740
001e30  e013              B        |L1.7770|
                  |L1.7730|
001e32  4630              MOV      r0,r6                 ;1742
001e34  f7fffffe          BL       __aeabi_i2f
001e38  9003              STR      r0,[sp,#0xc]          ;1742
001e3a  9808              LDR      r0,[sp,#0x20]         ;1742
001e3c  f7fffffe          BL       __aeabi_i2f
001e40  9002              STR      r0,[sp,#8]            ;1742
001e42  9903              LDR      r1,[sp,#0xc]          ;1742
001e44  f7fffffe          BL       __aeabi_fdiv
001e48  496e              LDR      r1,|L1.8196|
001e4a  9004              STR      r0,[sp,#0x10]         ;1742
001e4c  f7fffffe          BL       __aeabi_fmul
001e50  9005              STR      r0,[sp,#0x14]         ;1742
001e52  f7fffffe          BL       __aeabi_f2uiz
001e56  b280              UXTH     r0,r0                 ;1742
001e58  9009              STR      r0,[sp,#0x24]         ;1742
                  |L1.7770|
001e5a  4962              LDR      r1,|L1.8164|
001e5c  9809              LDR      r0,[sp,#0x24]         ;1744
001e5e  72c8              STRB     r0,[r1,#0xb]          ;1744
001e60  21ff              MOVS     r1,#0xff              ;1745
001e62  0209              LSLS     r1,r1,#8              ;1745
001e64  9809              LDR      r0,[sp,#0x24]         ;1745
001e66  4008              ANDS     r0,r0,r1              ;1745
001e68  1200              ASRS     r0,r0,#8              ;1745
001e6a  495e              LDR      r1,|L1.8164|
001e6c  7288              STRB     r0,[r1,#0xa]          ;1745
001e6e  4608              MOV      r0,r1                 ;1748
001e70  7a00              LDRB     r0,[r0,#8]            ;1748
001e72  21e0              MOVS     r1,#0xe0              ;1748
001e74  4388              BICS     r0,r0,r1              ;1748
001e76  495b              LDR      r1,|L1.8164|
001e78  7208              STRB     r0,[r1,#8]            ;1748
001e7a  01a8              LSLS     r0,r5,#6              ;1749
001e7c  2180              MOVS     r1,#0x80              ;1749
001e7e  4308              ORRS     r0,r0,r1              ;1749
001e80  9006              STR      r0,[sp,#0x18]         ;1749
001e82  4858              LDR      r0,|L1.8164|
001e84  7a00              LDRB     r0,[r0,#8]            ;1750
001e86  9906              LDR      r1,[sp,#0x18]         ;1750
001e88  4308              ORRS     r0,r0,r1              ;1750
001e8a  4956              LDR      r1,|L1.8164|
001e8c  7208              STRB     r0,[r1,#8]            ;1750
001e8e  bf00              NOP                            ;1752
                  |L1.7824|
001e90  4854              LDR      r0,|L1.8164|
001e92  7a00              LDRB     r0,[r0,#8]            ;1752
001e94  2180              MOVS     r1,#0x80              ;1752
001e96  4008              ANDS     r0,r0,r1              ;1752
001e98  2800              CMP      r0,#0                 ;1752
001e9a  d1f9              BNE      |L1.7824|
001e9c  4851              LDR      r0,|L1.8164|
001e9e  7a00              LDRB     r0,[r0,#8]            ;1754
001ea0  2120              MOVS     r1,#0x20              ;1754
001ea2  4008              ANDS     r0,r0,r1              ;1754
001ea4  2800              CMP      r0,#0                 ;1754
001ea6  d003              BEQ      |L1.7856|
001ea8  484f              LDR      r0,|L1.8168|
001eaa  6044              STR      r4,[r0,#4]            ;1756
001eac  2008              MOVS     r0,#8                 ;1757
001eae  e758              B        |L1.7522|
                  |L1.7856|
001eb0  2d00              CMP      r5,#0                 ;1761
001eb2  d10b              BNE      |L1.7884|
001eb4  484b              LDR      r0,|L1.8164|
001eb6  7880              LDRB     r0,[r0,#2]            ;1763
001eb8  28ff              CMP      r0,#0xff              ;1763
001eba  d003              BEQ      |L1.7876|
001ebc  4849              LDR      r0,|L1.8164|
001ebe  7880              LDRB     r0,[r0,#2]            ;1763
001ec0  2800              CMP      r0,#0                 ;1763
001ec2  d114              BNE      |L1.7918|
                  |L1.7876|
001ec4  4848              LDR      r0,|L1.8168|
001ec6  6044              STR      r4,[r0,#4]            ;1765
001ec8  2009              MOVS     r0,#9                 ;1766
001eca  e74a              B        |L1.7522|
                  |L1.7884|
001ecc  4845              LDR      r0,|L1.8164|
001ece  78c0              LDRB     r0,[r0,#3]            ;1771
001ed0  211e              MOVS     r1,#0x1e              ;1771
001ed2  4008              ANDS     r0,r0,r1              ;1771
001ed4  0840              LSRS     r0,r0,#1              ;1771
001ed6  280f              CMP      r0,#0xf               ;1771
001ed8  d005              BEQ      |L1.7910|
001eda  4842              LDR      r0,|L1.8164|
001edc  78c0              LDRB     r0,[r0,#3]            ;1772
001ede  4008              ANDS     r0,r0,r1              ;1772
001ee0  0840              LSRS     r0,r0,#1              ;1772
001ee2  2800              CMP      r0,#0                 ;1772
001ee4  d103              BNE      |L1.7918|
                  |L1.7910|
001ee6  4840              LDR      r0,|L1.8168|
001ee8  6044              STR      r4,[r0,#4]            ;1774
001eea  200a              MOVS     r0,#0xa               ;1775
001eec  e739              B        |L1.7522|
                  |L1.7918|
001eee  483e              LDR      r0,|L1.8168|
001ef0  6044              STR      r4,[r0,#4]            ;1779
001ef2  2000              MOVS     r0,#0                 ;1780
001ef4  e735              B        |L1.7522|
;;;1782   
                          ENDP

                  clk_monitor_0 PROC
;;;1933    */
;;;1934   void clk_monitor_0(unsigned char en_dis)
001ef6  2800              CMP      r0,#0
;;;1935   {         
;;;1936     if (en_dis)
001ef8  d006              BEQ      |L1.7944|
;;;1937     {
;;;1938       MCG_C6 |= MCG_C6_CME0_MASK;   
001efa  493a              LDR      r1,|L1.8164|
001efc  7949              LDRB     r1,[r1,#5]
001efe  2220              MOVS     r2,#0x20
001f00  4311              ORRS     r1,r1,r2
001f02  4a38              LDR      r2,|L1.8164|
001f04  7151              STRB     r1,[r2,#5]
001f06  e005              B        |L1.7956|
                  |L1.7944|
;;;1939     }
;;;1940     else
;;;1941     {
;;;1942       MCG_C6 &= ~MCG_C6_CME0_MASK;
001f08  4936              LDR      r1,|L1.8164|
001f0a  7949              LDRB     r1,[r1,#5]
001f0c  2220              MOVS     r2,#0x20
001f0e  4391              BICS     r1,r1,r2
001f10  4a34              LDR      r2,|L1.8164|
001f12  7151              STRB     r1,[r2,#5]
                  |L1.7956|
;;;1943     }
;;;1944   }    // end clk_monitor_0
001f14  4770              BX       lr
;;;1945   
                          ENDP

                  chk_for_resistor PROC
;;;1967    */
;;;1968   unsigned char chk_for_resistor(void)
001f16  b510              PUSH     {r4,lr}
;;;1969   {
;;;1970     unsigned char extal_high = 0;
001f18  2200              MOVS     r2,#0
;;;1971     unsigned char xtal_high = 0;
001f1a  2300              MOVS     r3,#0
;;;1972     short i;
;;;1973     
;;;1974     // Configure EXTAL (PTA18) and XTAL PTA(19) as GPIO driving Low, no pull enabled
;;;1975     FGPIOA_PCOR = 0xC0000; // clear PTA18 and 19 output data
001f1c  2003              MOVS     r0,#3
001f1e  0480              LSLS     r0,r0,#18
001f20  4c39              LDR      r4,|L1.8200|
001f22  60a0              STR      r0,[r4,#8]
;;;1976     FGPIOA_PDDR |= 0xC0000; // set PTA18 and 19 as outputs
001f24  4620              MOV      r0,r4
001f26  6940              LDR      r0,[r0,#0x14]
001f28  2403              MOVS     r4,#3
001f2a  04a4              LSLS     r4,r4,#18
001f2c  4320              ORRS     r0,r0,r4
001f2e  4c36              LDR      r4,|L1.8200|
001f30  6160              STR      r0,[r4,#0x14]
;;;1977     PORTA_GPCHR = (0xC0000 | PORT_PCR_MUX(1)); // configure the pin muxes for GPIO
001f32  4836              LDR      r0,|L1.8204|
001f34  4c36              LDR      r4,|L1.8208|
001f36  6060              STR      r0,[r4,#4]
;;;1978     // Drive EXTAL high
;;;1979     FGPIOA_PSOR = 0x40000; // set PTA18 data out high
001f38  2001              MOVS     r0,#1
001f3a  0480              LSLS     r0,r0,#18
001f3c  4c32              LDR      r4,|L1.8200|
001f3e  6060              STR      r0,[r4,#4]
;;;1980     // Configure XTAL as an Input, no pull up 
;;;1981     FGPIOA_PDDR &= ~(0x80000); // clear PTA19 data direction to make it an input 
001f40  4620              MOV      r0,r4
001f42  6940              LDR      r0,[r0,#0x14]
001f44  2401              MOVS     r4,#1
001f46  04e4              LSLS     r4,r4,#19
001f48  43a0              BICS     r0,r0,r4
001f4a  4c2f              LDR      r4,|L1.8200|
001f4c  6160              STR      r0,[r4,#0x14]
;;;1982     // Wait for ~2 time constants
;;;1983     for (i = 0 ; i < 300 ; i++) {} 
001f4e  2100              MOVS     r1,#0
001f50  e001              B        |L1.8022|
                  |L1.8018|
001f52  1c48              ADDS     r0,r1,#1
001f54  b201              SXTH     r1,r0
                  |L1.8022|
001f56  20ff              MOVS     r0,#0xff
001f58  302d              ADDS     r0,r0,#0x2d
001f5a  4281              CMP      r1,r0
001f5c  dbf9              BLT      |L1.8018|
;;;1984     // Check if XTAL was pulled high
;;;1985     if (FGPIOA_PDIR & 0x80000)
001f5e  482a              LDR      r0,|L1.8200|
001f60  6900              LDR      r0,[r0,#0x10]
001f62  2401              MOVS     r4,#1
001f64  04e4              LSLS     r4,r4,#19
001f66  4020              ANDS     r0,r0,r4
001f68  2800              CMP      r0,#0
001f6a  d000              BEQ      |L1.8046|
;;;1986     {
;;;1987       xtal_high = 1;
001f6c  2301              MOVS     r3,#1
                  |L1.8046|
;;;1988     }
;;;1989     // Configure EXTAL and XTAL as GPIO driving low
;;;1990     FGPIOA_PCOR = 0xC0000; // clear PTA18 and 19 data output
001f6e  2003              MOVS     r0,#3
001f70  0480              LSLS     r0,r0,#18
001f72  4c25              LDR      r4,|L1.8200|
001f74  60a0              STR      r0,[r4,#8]
;;;1991     FGPIOA_PDDR |= 0xC0000; // set PTA18 and 19 as outputs
001f76  4620              MOV      r0,r4
001f78  6940              LDR      r0,[r0,#0x14]
001f7a  2403              MOVS     r4,#3
001f7c  04a4              LSLS     r4,r4,#18
001f7e  4320              ORRS     r0,r0,r4
001f80  4c21              LDR      r4,|L1.8200|
001f82  6160              STR      r0,[r4,#0x14]
;;;1992     // Drive XTAL high
;;;1993     FGPIOA_PSOR = 0x80000; // set PTA19 data out high
001f84  2001              MOVS     r0,#1
001f86  04c0              LSLS     r0,r0,#19
001f88  6060              STR      r0,[r4,#4]
;;;1994     // Configure EXTAL as Input, no pull up
;;;1995     FGPIOA_PDDR &= ~(0x40000); // clear PTA18 data direction to make it an input
001f8a  4620              MOV      r0,r4
001f8c  6940              LDR      r0,[r0,#0x14]
001f8e  2401              MOVS     r4,#1
001f90  04a4              LSLS     r4,r4,#18
001f92  43a0              BICS     r0,r0,r4
001f94  4c1c              LDR      r4,|L1.8200|
001f96  6160              STR      r0,[r4,#0x14]
;;;1996     // Wait for ~2 time constants
;;;1997     for (i = 0 ; i < 300 ; i++) {} 
001f98  2100              MOVS     r1,#0
001f9a  e001              B        |L1.8096|
                  |L1.8092|
001f9c  1c48              ADDS     r0,r1,#1
001f9e  b201              SXTH     r1,r0
                  |L1.8096|
001fa0  20ff              MOVS     r0,#0xff
001fa2  302d              ADDS     r0,r0,#0x2d
001fa4  4281              CMP      r1,r0
001fa6  dbf9              BLT      |L1.8092|
;;;1998     // Check if EXTAL was pulled high
;;;1999     if (FGPIOA_PDIR & 0x40000)
001fa8  4817              LDR      r0,|L1.8200|
001faa  6900              LDR      r0,[r0,#0x10]
001fac  2401              MOVS     r4,#1
001fae  04a4              LSLS     r4,r4,#18
001fb0  4020              ANDS     r0,r0,r4
001fb2  2800              CMP      r0,#0
001fb4  d000              BEQ      |L1.8120|
;;;2000     {
;;;2001       extal_high = 1;
001fb6  2201              MOVS     r2,#1
                  |L1.8120|
;;;2002     }
;;;2003   
;;;2004     // Now configure both pins back to their default state
;;;2005     PORTA_GPCHR = 0x000C0000; // clear pta18 and 19 mux values to default
001fb8  2003              MOVS     r0,#3
001fba  0480              LSLS     r0,r0,#18
001fbc  4c14              LDR      r4,|L1.8208|
001fbe  6060              STR      r0,[r4,#4]
;;;2006     FGPIOA_PDDR &= ~(0xC0000);    // set PTA18 and 19 as inputs
001fc0  4811              LDR      r0,|L1.8200|
001fc2  6940              LDR      r0,[r0,#0x14]
001fc4  2403              MOVS     r4,#3
001fc6  04a4              LSLS     r4,r4,#18
001fc8  43a0              BICS     r0,r0,r4
001fca  4c0f              LDR      r4,|L1.8200|
001fcc  6160              STR      r0,[r4,#0x14]
;;;2007     FGPIOA_PCOR = 0xC0000;        // clear PTA18 and 19 output data
001fce  2003              MOVS     r0,#3
001fd0  0480              LSLS     r0,r0,#18
001fd2  60a0              STR      r0,[r4,#8]
;;;2008   
;;;2009     // If both rising and falling are true return 1, else return 0
;;;2010     if (extal_high && xtal_high)
001fd4  2a00              CMP      r2,#0
001fd6  d003              BEQ      |L1.8160|
001fd8  2b00              CMP      r3,#0
001fda  d001              BEQ      |L1.8160|
;;;2011     {
;;;2012       return 1;
001fdc  2001              MOVS     r0,#1
                  |L1.8158|
;;;2013     }
;;;2014     else
;;;2015     {
;;;2016       return 0;
;;;2017     }       
;;;2018   } // chk_for_resistor
001fde  bd10              POP      {r4,pc}
                  |L1.8160|
001fe0  2000              MOVS     r0,#0                 ;2016
001fe2  e7fc              B        |L1.8158|
;;;2019   
                          ENDP

                  |L1.8164|
                          DCD      0x40064000
                  |L1.8168|
                          DCD      0x40048040
                  |L1.8172|
                          DCD      0x00f42400
                  |L1.8176|
                          DCD      0x007a1200
                  |L1.8180|
                          DCD      0x00007a12
                  |L1.8184|
                          DCD      0x00009896
                  |L1.8188|
                          DCD      0x002dc6c0
                  |L1.8192|
                          DCD      0x004c4b40
                  |L1.8196|
                          DCD      0x41a80000
                  |L1.8200|
                          DCD      0xf80ff000
                  |L1.8204|
                          DCD      0x000c0100
                  |L1.8208|
                          DCD      0x40049080

                          AREA ||.data||, DATA, ALIGN=0

                  drs_val
000000  00                DCB      0x00
                  dmx32_val
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\mcg\\mcg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_mcg_c_pll_init____REV16|
#line 465 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_mcg_c_pll_init____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_mcg_c_pll_init____REVSH|
#line 480
|__asm___5_mcg_c_pll_init____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
