; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\uart.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\uart.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -I.\RTE\_KL26Z128_-_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include -D__UVISION_VERSION=524 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\uart.crf ..\..\..\src\drivers\uart\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;31      */
;;;32     void uart_init (UART_MemMapPtr uartch, int sysclk, int baud)
000000  b5f8              PUSH     {r3-r7,lr}
;;;33     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;34         register uint16 sbr;
;;;35         uint8 temp;
;;;36      
;;;37           if (uartch == UART1_BASE_PTR)
000008  48c5              LDR      r0,|L1.800|
00000a  4284              CMP      r4,r0
00000c  d106              BNE      |L1.28|
;;;38             SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;
00000e  48c5              LDR      r0,|L1.804|
000010  6b40              LDR      r0,[r0,#0x34]
000012  14e1              ASRS     r1,r4,#19
000014  4308              ORRS     r0,r0,r1
000016  49c3              LDR      r1,|L1.804|
000018  6348              STR      r0,[r1,#0x34]
00001a  e006              B        |L1.42|
                  |L1.28|
;;;39           else
;;;40         	SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
00001c  48c1              LDR      r0,|L1.804|
00001e  6b40              LDR      r0,[r0,#0x34]
000020  2101              MOVS     r1,#1
000022  0309              LSLS     r1,r1,#12
000024  4308              ORRS     r0,r0,r1
000026  49bf              LDR      r1,|L1.804|
000028  6348              STR      r0,[r1,#0x34]
                  |L1.42|
;;;41           /* Make sure that the transmitter and receiver are disabled while we 
;;;42            * change settings.
;;;43            */
;;;44     			
;;;45     				NVIC_SetPriority(UART1_IRQn, 1);
00002a  2101              MOVS     r1,#1
00002c  200d              MOVS     r0,#0xd
00002e  f7fffffe          BL       __NVIC_SetPriority
;;;46     
;;;47     			
;;;48           UART_C2_REG(uartch) &= ~(UART_C2_TE_MASK
000032  78e0              LDRB     r0,[r4,#3]
000034  210c              MOVS     r1,#0xc
000036  4388              BICS     r0,r0,r1
000038  70e0              STRB     r0,[r4,#3]
;;;49     				| UART_C2_RE_MASK );
;;;50     			
;;;51     				      /* Configure the uart for 8-bit mode, no parity */
;;;52           UART_C1_REG(uartch) = 0;	/* We need all default settings, so entire register is cleared */
00003a  2000              MOVS     r0,#0
00003c  70a0              STRB     r0,[r4,#2]
;;;53         
;;;54           /* Calculate baud settings */
;;;55           sbr = (uint16)((sysclk*1000)/(baud * 16));
00003e  0139              LSLS     r1,r7,#4
000040  227d              MOVS     r2,#0x7d
000042  00d2              LSLS     r2,r2,#3
000044  4372              MULS     r2,r6,r2
000046  4610              MOV      r0,r2
000048  f7fffffe          BL       __aeabi_idivmod
00004c  b285              UXTH     r5,r0
;;;56     	//		sbr = sy/baud(OSR+1);
;;;57     			//sbr = 
;;;58             
;;;59           /* Save off the current value of the uartx_BDH except for the SBR field */
;;;60           temp = UART_BDH_REG(uartch) & ~(UART_BDH_SBR(0x1F));
00004e  7820              LDRB     r0,[r4,#0]
000050  0941              LSRS     r1,r0,#5
000052  0149              LSLS     r1,r1,#5
000054  9100              STR      r1,[sp,#0]
;;;61         
;;;62           UART_BDH_REG(uartch) = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
000056  201f              MOVS     r0,#0x1f
000058  0200              LSLS     r0,r0,#8
00005a  4028              ANDS     r0,r0,r5
00005c  1200              ASRS     r0,r0,#8
00005e  9900              LDR      r1,[sp,#0]
000060  4308              ORRS     r0,r0,r1
000062  7020              STRB     r0,[r4,#0]
;;;63           UART_BDL_REG(uartch) = (uint8)(sbr & UART_BDL_SBR_MASK);
000064  7065              STRB     r5,[r4,#1]
;;;64     			
;;;65     			
;;;66     			UART_C2_REG(uartch) |= UART_C2_RIE_MASK;			//newly added
000066  78e0              LDRB     r0,[r4,#3]
000068  2120              MOVS     r1,#0x20
00006a  4308              ORRS     r0,r0,r1
00006c  70e0              STRB     r0,[r4,#3]
;;;67     			
;;;68     
;;;69     		
;;;70     			enable_irq(UART1_IRQn);	
00006e  200d              MOVS     r0,#0xd
000070  f7fffffe          BL       __NVIC_EnableIRQ
;;;71     
;;;72     			EnableInterrupts;		//newly added
000074  b662              CPSIE    i
;;;73          		
;;;74     
;;;75     
;;;76     
;;;77     
;;;78           /* Enable receiver and transmitter */
;;;79           UART_C2_REG(uartch) |= (UART_C2_TE_MASK
000076  78e0              LDRB     r0,[r4,#3]
000078  210c              MOVS     r1,#0xc
00007a  4308              ORRS     r0,r0,r1
00007c  70e0              STRB     r0,[r4,#3]
;;;80     	    		  | UART_C2_RE_MASK );
;;;81     		
;;;82     
;;;83     
;;;84     }
00007e  bdf8              POP      {r3-r7,pc}
;;;85     
                          ENDP

                  UART0_IRQHandler PROC
;;;86     
;;;87     void UART0_IRQHandler(void)
000080  48a9              LDR      r0,|L1.808|
;;;88     {//int32 counter=19999;
;;;89     
;;;90     		//	do
;;;91     				{
;;;92     			if((UART_S1_REG(UART0_BASE_PTR) & UART0_S1_RDRF_MASK))	
000082  7900              LDRB     r0,[r0,#4]
000084  2120              MOVS     r1,#0x20
000086  4008              ANDS     r0,r0,r1
000088  2800              CMP      r0,#0
00008a  d00a              BEQ      |L1.162|
;;;93     			{
;;;94     				uart_string_obd[k23]=UART_D_REG(UART0_BASE_PTR);
00008c  48a6              LDR      r0,|L1.808|
00008e  79c0              LDRB     r0,[r0,#7]
000090  49a6              LDR      r1,|L1.812|
000092  4aa7              LDR      r2,|L1.816|
000094  6812              LDR      r2,[r2,#0]  ; k23
000096  5488              STRB     r0,[r1,r2]
;;;95     				k23++;
000098  48a5              LDR      r0,|L1.816|
00009a  6800              LDR      r0,[r0,#0]  ; k23
00009c  1c40              ADDS     r0,r0,#1
00009e  49a4              LDR      r1,|L1.816|
0000a0  6008              STR      r0,[r1,#0]  ; k23
                  |L1.162|
;;;96     			//	counter=19999;
;;;97     		//	if(k2>4990)k2=0;
;;;98     			}
;;;99     //				else{counter--;
;;;100    //						}
;;;101    			}//`while((UART_S1_REG(UART1_BASE_PTR) & UART_S1_RDRF_MASK)  || (counter>1));
;;;102    			
;;;103    			
;;;104    }
0000a2  4770              BX       lr
;;;105    
                          ENDP

                  UART1_IRQHandler PROC
;;;107    
;;;108    void UART1_IRQHandler(void)
0000a4  489e              LDR      r0,|L1.800|
;;;109    {//int32 counter=19999;
;;;110    
;;;111    		//	do
;;;112    				{
;;;113    			if((UART_S1_REG(UART1_BASE_PTR) & UART_S1_RDRF_MASK))	
0000a6  7900              LDRB     r0,[r0,#4]
0000a8  2120              MOVS     r1,#0x20
0000aa  4008              ANDS     r0,r0,r1
0000ac  2800              CMP      r0,#0
0000ae  d00a              BEQ      |L1.198|
;;;114    			{uart_string_gsm[k2]=UART_D_REG(UART1_BASE_PTR);k2++;
0000b0  489b              LDR      r0,|L1.800|
0000b2  79c0              LDRB     r0,[r0,#7]
0000b4  499f              LDR      r1,|L1.820|
0000b6  4aa0              LDR      r2,|L1.824|
0000b8  6812              LDR      r2,[r2,#0]  ; k2
0000ba  5488              STRB     r0,[r1,r2]
0000bc  489e              LDR      r0,|L1.824|
0000be  6800              LDR      r0,[r0,#0]  ; k2
0000c0  1c40              ADDS     r0,r0,#1
0000c2  499d              LDR      r1,|L1.824|
0000c4  6008              STR      r0,[r1,#0]  ; k2
                  |L1.198|
;;;115    			//	counter=19999;
;;;116    		//	if(k2>4990)k2=0;
;;;117    			}
;;;118    //				else{counter--;
;;;119    //						}
;;;120    			}//`while((UART_S1_REG(UART1_BASE_PTR) & UART_S1_RDRF_MASK)  || (counter>1));
;;;121    			
;;;122    			
;;;123    }
0000c6  4770              BX       lr
;;;124    
                          ENDP

                  UART2_IRQHandler PROC
;;;125    void UART2_IRQHandler(void)
0000c8  4770              BX       lr
;;;126    {
;;;127    //k=0;l=999999;
;;;128    //			do{
;;;129    //			if( uart_getchar_present (UART2_BASE_PTR))	
;;;130    //			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=9999;if(k>298){k=0;}}
;;;131    //				else{
;;;132    //							l--;if(l==10){}
;;;133    //						}
;;;134    //			}while(!((strstr(uart_string_gps, "OK\r\n"))
;;;135    //							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;136    //				        	||(strstr(uart_string_gps, "ERROR:"))
;;;137    //							));
;;;138    //printf("uart_string_gps -> %s",uart_string_gps);
;;;139    }
;;;140    
                          ENDP

                  uart_getchar PROC
;;;153     */
;;;154    char uart_getchar (UART_MemMapPtr channel)
0000ca  4601              MOV      r1,r0
;;;155    {
;;;156          /* Wait until character has been received */
;;;157          while (!((UART_S1_REG(channel) & UART_S1_RDRF_MASK)    ));//{timeouttt--;}
0000cc  bf00              NOP      
                  |L1.206|
0000ce  7908              LDRB     r0,[r1,#4]
0000d0  2220              MOVS     r2,#0x20
0000d2  4010              ANDS     r0,r0,r2
0000d4  2800              CMP      r0,#0
0000d6  d0fa              BEQ      |L1.206|
;;;158     //   ||   (timeouttt < 1 ) 
;;;159          /* Return the 8-bit data from the receiver */
;;;160          return UART_D_REG(channel);
0000d8  79c8              LDRB     r0,[r1,#7]
;;;161    }
0000da  4770              BX       lr
;;;162    /********************************************************************/
                          ENDP

                  uart_putchar PROC
;;;169     */ 
;;;170    void uart_putchar (UART_MemMapPtr channel, char ch)
0000dc  b510              PUSH     {r4,lr}
;;;171    {int to=19999;
0000de  4a97              LDR      r2,|L1.828|
;;;172          /* Wait until space is available in the FIFO */
;;;173          while(!((UART_S1_REG(channel) & UART_S1_TDRE_MASK)    ||  ( to <= 1 ))){to--;}
0000e0  e000              B        |L1.228|
                  |L1.226|
0000e2  1e52              SUBS     r2,r2,#1
                  |L1.228|
0000e4  7903              LDRB     r3,[r0,#4]
0000e6  2480              MOVS     r4,#0x80
0000e8  4023              ANDS     r3,r3,r4
0000ea  2b00              CMP      r3,#0
0000ec  d101              BNE      |L1.242|
0000ee  2a01              CMP      r2,#1
0000f0  dcf7              BGT      |L1.226|
                  |L1.242|
;;;174        
;;;175          /* Send the character */
;;;176          UART_D_REG(channel) = (uint8)ch;
0000f2  71c1              STRB     r1,[r0,#7]
;;;177        
;;;178     }
0000f4  bd10              POP      {r4,pc}
;;;179    /********************************************************************/
                          ENDP

                  uart_getchar_present PROC
;;;189     */
;;;190    int uart_getchar_present (UART_MemMapPtr channel)
0000f6  4601              MOV      r1,r0
;;;191    {
;;;192        return (UART_S1_REG(channel) & UART_S1_RDRF_MASK);
0000f8  7908              LDRB     r0,[r1,#4]
0000fa  2220              MOVS     r2,#0x20
0000fc  4010              ANDS     r0,r0,r2
;;;193    }
0000fe  4770              BX       lr
;;;194    /********************************************************************/
                          ENDP

                  uart0_init PROC
;;;212     */
;;;213    void uart0_init (UART0_MemMapPtr uartch, int sysclk, int baud)
000100  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;214    {
000102  b086              SUB      sp,sp,#0x18
;;;215        uint8 i;
;;;216        uint32 calculated_baud = 0;
000104  bf00              NOP      
;;;217        uint32 baud_diff = 0;
000106  2000              MOVS     r0,#0
000108  9005              STR      r0,[sp,#0x14]
;;;218        uint32 osr_val = 0;
00010a  9004              STR      r0,[sp,#0x10]
;;;219        uint32 sbr_val, uart0clk;
;;;220        uint32 baud_rate;
;;;221        uint32 reg_temp = 0;
00010c  2500              MOVS     r5,#0
;;;222        uint32 temp = 0;
00010e  9001              STR      r0,[sp,#4]
;;;223        
;;;224        SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
000110  4884              LDR      r0,|L1.804|
000112  6b40              LDR      r0,[r0,#0x34]
000114  2101              MOVS     r1,#1
000116  0289              LSLS     r1,r1,#10
000118  4308              ORRS     r0,r0,r1
00011a  4982              LDR      r1,|L1.804|
00011c  6348              STR      r0,[r1,#0x34]
;;;225        
;;;226        // Disable UART0 before changing registers
;;;227        UART0_C2 &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
00011e  4882              LDR      r0,|L1.808|
000120  78c0              LDRB     r0,[r0,#3]
000122  210c              MOVS     r1,#0xc
000124  4388              BICS     r0,r0,r1
000126  4980              LDR      r1,|L1.808|
000128  70c8              STRB     r0,[r1,#3]
;;;228      
;;;229        // Verify that a valid clock value has been passed to the function 
;;;230        if ((sysclk > 50000) || (sysclk < 32))
00012a  4985              LDR      r1,|L1.832|
00012c  9807              LDR      r0,[sp,#0x1c]
00012e  4288              CMP      r0,r1
000130  dc02              BGT      |L1.312|
000132  9807              LDR      r0,[sp,#0x1c]
000134  2820              CMP      r0,#0x20
000136  da0c              BGE      |L1.338|
                  |L1.312|
;;;231        {
;;;232            sysclk = 0;
000138  bf00              NOP      
;;;233            reg_temp = SIM_SOPT2;
00013a  487a              LDR      r0,|L1.804|
00013c  6845              LDR      r5,[r0,#4]
;;;234            reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
00013e  2103              MOVS     r1,#3
000140  0689              LSLS     r1,r1,#26
000142  4628              MOV      r0,r5
000144  4388              BICS     r0,r0,r1
000146  4605              MOV      r5,r0
;;;235            reg_temp |= SIM_SOPT2_UART0SRC(0);
000148  bf00              NOP      
;;;236            SIM_SOPT2 = reg_temp;
00014a  4876              LDR      r0,|L1.804|
00014c  6045              STR      r5,[r0,#4]
;;;237    			
;;;238    			  // Enter inifinite loop because the 
;;;239    			  // the desired system clock value is 
;;;240    			  // invalid!!
;;;241    			  while(1)
00014e  bf00              NOP      
                  |L1.336|
000150  e7fe              B        |L1.336|
                  |L1.338|
;;;242    				{}
;;;243        }
;;;244        
;;;245        // Verify that a valid value has been passed to TERM_PORT_NUM and update
;;;246        // uart0_clk_hz accordingly.  Write 0 to TERM_PORT_NUM if an invalid 
;;;247        // value has been passed.  
;;;248        if (TERM_PORT_NUM != 0)
;;;249        {
;;;250            reg_temp = SIM_SOPT2;
;;;251            reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
;;;252            reg_temp |= SIM_SOPT2_UART0SRC(0);
;;;253            SIM_SOPT2 = reg_temp;
;;;254    			
;;;255    			  // Enter inifinite loop because the 
;;;256    			  // the desired terminal port number 
;;;257    			  // invalid!!
;;;258    			  while(1)
;;;259    				{}
;;;260        }
;;;261        
;;;262        
;;;263        
;;;264        // Initialize baud rate
;;;265        baud_rate = baud;
000152  9c08              LDR      r4,[sp,#0x20]
;;;266        
;;;267        // Change units to Hz
;;;268        uart0clk = sysclk * 1000;
000154  217d              MOVS     r1,#0x7d
000156  00c9              LSLS     r1,r1,#3
000158  9807              LDR      r0,[sp,#0x1c]
00015a  4348              MULS     r0,r1,r0
00015c  9002              STR      r0,[sp,#8]
;;;269        // Calculate the first baud rate using the lowest OSR value possible.  
;;;270        i = 4;
00015e  2604              MOVS     r6,#4
;;;271        sbr_val = (uint32)(uart0clk/(baud_rate * i));
000160  4620              MOV      r0,r4
000162  4370              MULS     r0,r6,r0
000164  4601              MOV      r1,r0
000166  9802              LDR      r0,[sp,#8]
000168  f7fffffe          BL       __aeabi_uidivmod
00016c  9003              STR      r0,[sp,#0xc]
;;;272        calculated_baud = (uart0clk / (i * sbr_val));
00016e  9803              LDR      r0,[sp,#0xc]
000170  4370              MULS     r0,r6,r0
000172  4601              MOV      r1,r0
000174  9802              LDR      r0,[sp,#8]
000176  f7fffffe          BL       __aeabi_uidivmod
00017a  4607              MOV      r7,r0
;;;273            
;;;274        if (calculated_baud > baud_rate)
00017c  42a7              CMP      r7,r4
00017e  d902              BLS      |L1.390|
;;;275            baud_diff = calculated_baud - baud_rate;
000180  1b38              SUBS     r0,r7,r4
000182  9005              STR      r0,[sp,#0x14]
000184  e001              B        |L1.394|
                  |L1.390|
;;;276        else
;;;277            baud_diff = baud_rate - calculated_baud;
000186  1be0              SUBS     r0,r4,r7
000188  9005              STR      r0,[sp,#0x14]
                  |L1.394|
;;;278        
;;;279        osr_val = i;
00018a  9604              STR      r6,[sp,#0x10]
;;;280            
;;;281        // Select the best OSR value
;;;282        for (i = 5; i <= 32; i++)
00018c  2605              MOVS     r6,#5
00018e  e01d              B        |L1.460|
                  |L1.400|
;;;283        {
;;;284            sbr_val = (uint32)(uart0clk/(baud_rate * i));
000190  4620              MOV      r0,r4
000192  4370              MULS     r0,r6,r0
000194  4601              MOV      r1,r0
000196  9802              LDR      r0,[sp,#8]
000198  f7fffffe          BL       __aeabi_uidivmod
00019c  9003              STR      r0,[sp,#0xc]
;;;285            calculated_baud = (uart0clk / (i * sbr_val));
00019e  9803              LDR      r0,[sp,#0xc]
0001a0  4370              MULS     r0,r6,r0
0001a2  4601              MOV      r1,r0
0001a4  9802              LDR      r0,[sp,#8]
0001a6  f7fffffe          BL       __aeabi_uidivmod
0001aa  4607              MOV      r7,r0
;;;286            
;;;287            if (calculated_baud > baud_rate)
0001ac  42a7              CMP      r7,r4
0001ae  d902              BLS      |L1.438|
;;;288                temp = calculated_baud - baud_rate;
0001b0  1b38              SUBS     r0,r7,r4
0001b2  9001              STR      r0,[sp,#4]
0001b4  e001              B        |L1.442|
                  |L1.438|
;;;289            else
;;;290                temp = baud_rate - calculated_baud;
0001b6  1be0              SUBS     r0,r4,r7
0001b8  9001              STR      r0,[sp,#4]
                  |L1.442|
;;;291            
;;;292            if (temp <= baud_diff)
0001ba  9905              LDR      r1,[sp,#0x14]
0001bc  9801              LDR      r0,[sp,#4]
0001be  4288              CMP      r0,r1
0001c0  d802              BHI      |L1.456|
;;;293            {
;;;294                baud_diff = temp;
0001c2  9801              LDR      r0,[sp,#4]
0001c4  9005              STR      r0,[sp,#0x14]
;;;295                osr_val = i; 
0001c6  9604              STR      r6,[sp,#0x10]
                  |L1.456|
0001c8  1c70              ADDS     r0,r6,#1              ;282
0001ca  b2c6              UXTB     r6,r0                 ;282
                  |L1.460|
0001cc  2e20              CMP      r6,#0x20              ;282
0001ce  dddf              BLE      |L1.400|
;;;296            }
;;;297        }
;;;298        
;;;299        if (baud_diff < ((baud_rate / 100) * 3))
0001d0  2164              MOVS     r1,#0x64
0001d2  4620              MOV      r0,r4
0001d4  f7fffffe          BL       __aeabi_uidivmod
0001d8  0041              LSLS     r1,r0,#1
0001da  1841              ADDS     r1,r0,r1
0001dc  9805              LDR      r0,[sp,#0x14]
0001de  4281              CMP      r1,r0
0001e0  d93f              BLS      |L1.610|
;;;300        {
;;;301            // If the OSR is between 4x and 8x then both
;;;302            // edge sampling MUST be turned on.  
;;;303            if ((osr_val >3) && (osr_val < 9))
0001e2  9804              LDR      r0,[sp,#0x10]
0001e4  2803              CMP      r0,#3
0001e6  d908              BLS      |L1.506|
0001e8  9804              LDR      r0,[sp,#0x10]
0001ea  2809              CMP      r0,#9
0001ec  d205              BCS      |L1.506|
;;;304                UART0_C5|= UART0_C5_BOTHEDGE_MASK;
0001ee  484e              LDR      r0,|L1.808|
0001f0  7ac0              LDRB     r0,[r0,#0xb]
0001f2  2102              MOVS     r1,#2
0001f4  4308              ORRS     r0,r0,r1
0001f6  494c              LDR      r1,|L1.808|
0001f8  72c8              STRB     r0,[r1,#0xb]
                  |L1.506|
;;;305            
;;;306            // Setup OSR value 
;;;307            reg_temp = UART0_C4;
0001fa  484b              LDR      r0,|L1.808|
0001fc  7a85              LDRB     r5,[r0,#0xa]
;;;308            reg_temp &= ~UART0_C4_OSR_MASK;
0001fe  096d              LSRS     r5,r5,#5
000200  016d              LSLS     r5,r5,#5
;;;309            reg_temp |= UART0_C4_OSR(osr_val-1);
000202  9804              LDR      r0,[sp,#0x10]
000204  1e40              SUBS     r0,r0,#1
000206  06c0              LSLS     r0,r0,#27
000208  0ec0              LSRS     r0,r0,#27
00020a  4305              ORRS     r5,r5,r0
;;;310        
;;;311            // Write reg_temp to C4 register
;;;312            UART0_C4 = reg_temp;
00020c  4846              LDR      r0,|L1.808|
00020e  7285              STRB     r5,[r0,#0xa]
;;;313            
;;;314            reg_temp = (reg_temp & UART0_C4_OSR_MASK) + 1;
000210  06e8              LSLS     r0,r5,#27
000212  0ec0              LSRS     r0,r0,#27
000214  1c45              ADDS     r5,r0,#1
;;;315            sbr_val = (uint32)((uart0clk)/(baud_rate * (reg_temp)));
000216  4620              MOV      r0,r4
000218  4368              MULS     r0,r5,r0
00021a  4601              MOV      r1,r0
00021c  9802              LDR      r0,[sp,#8]
00021e  f7fffffe          BL       __aeabi_uidivmod
000222  9003              STR      r0,[sp,#0xc]
;;;316            
;;;317             /* Save off the current value of the uartx_BDH except for the SBR field */
;;;318            reg_temp = UART0_BDH & ~(UART0_BDH_SBR(0x1F));
000224  4840              LDR      r0,|L1.808|
000226  7800              LDRB     r0,[r0,#0]
000228  0945              LSRS     r5,r0,#5
00022a  016d              LSLS     r5,r5,#5
;;;319       
;;;320            UART0_BDH = reg_temp |  UART0_BDH_SBR(((sbr_val & 0x1F00) >> 8));
00022c  211f              MOVS     r1,#0x1f
00022e  0209              LSLS     r1,r1,#8
000230  9803              LDR      r0,[sp,#0xc]
000232  4008              ANDS     r0,r0,r1
000234  0a00              LSRS     r0,r0,#8
000236  4328              ORRS     r0,r0,r5
000238  493b              LDR      r1,|L1.808|
00023a  7008              STRB     r0,[r1,#0]
;;;321            UART0_BDL = (uint8)(sbr_val & UART0_BDL_SBR_MASK);
00023c  9803              LDR      r0,[sp,#0xc]
00023e  7048              STRB     r0,[r1,#1]
;;;322    
;;;323    			
;;;324    			UART0_C2_REG(uartch) |= UART0_C2_RIE_MASK;			//newly added
000240  9806              LDR      r0,[sp,#0x18]
000242  78c0              LDRB     r0,[r0,#3]
000244  2120              MOVS     r1,#0x20
000246  4308              ORRS     r0,r0,r1
000248  9906              LDR      r1,[sp,#0x18]
00024a  70c8              STRB     r0,[r1,#3]
;;;325    			
;;;326    
;;;327    		
;;;328    			enable_irq(UART0_IRQn);	
00024c  200c              MOVS     r0,#0xc
00024e  f7fffffe          BL       __NVIC_EnableIRQ
;;;329    
;;;330    			EnableInterrupts;		//newly added
000252  b662              CPSIE    i
;;;331         		
;;;332    
;;;333    			
;;;334            /* Enable receiver and transmitter */
;;;335            UART0_C2 |= (UART0_C2_TE_MASK
000254  4834              LDR      r0,|L1.808|
000256  78c0              LDRB     r0,[r0,#3]
000258  210c              MOVS     r1,#0xc
00025a  4308              ORRS     r0,r0,r1
00025c  4932              LDR      r1,|L1.808|
00025e  70c8              STRB     r0,[r1,#3]
000260  e001              B        |L1.614|
                  |L1.610|
;;;336                        | UART0_C2_RE_MASK );
;;;337        }
;;;338        else
;;;339    		{
;;;340            // Unacceptable baud rate difference
;;;341            // More than 3% difference!!
;;;342            // Enter infinite loop!
;;;343            while(1)
000262  bf00              NOP      
                  |L1.612|
000264  e7fe              B        |L1.612|
                  |L1.614|
;;;344    				{}
;;;345    		}					
;;;346        
;;;347    }
000266  b009              ADD      sp,sp,#0x24
000268  bdf0              POP      {r4-r7,pc}
;;;348    /********************************************************************/
                          ENDP

                  uart0_getchar PROC
;;;357     */
;;;358    char uart0_getchar (UART0_MemMapPtr channel)
00026a  4601              MOV      r1,r0
;;;359    {
;;;360          /* Wait until character has been received */
;;;361          while (!(UART0_S1_REG(channel) & UART0_S1_RDRF_MASK));
00026c  bf00              NOP      
                  |L1.622|
00026e  7908              LDRB     r0,[r1,#4]
000270  2220              MOVS     r2,#0x20
000272  4010              ANDS     r0,r0,r2
000274  2800              CMP      r0,#0
000276  d0fa              BEQ      |L1.622|
;;;362        
;;;363          /* Return the 8-bit data from the receiver */
;;;364          return UART0_D_REG(channel);
000278  79c8              LDRB     r0,[r1,#7]
;;;365    }
00027a  4770              BX       lr
;;;366    /********************************************************************/
                          ENDP

                  uart0_putchar PROC
;;;373     */ 
;;;374    void uart0_putchar (UART0_MemMapPtr channel, char ch)
00027c  b510              PUSH     {r4,lr}
;;;375    {int t0=19999;
00027e  4a2f              LDR      r2,|L1.828|
;;;376          /* Wait until space is available in the FIFO */
;;;377          while(!(UART0_S1_REG(channel) & UART0_S1_TDRE_MASK)||  ( t0 <= 1 )){t0--;}
000280  e000              B        |L1.644|
                  |L1.642|
000282  1e52              SUBS     r2,r2,#1
                  |L1.644|
000284  7903              LDRB     r3,[r0,#4]
000286  2480              MOVS     r4,#0x80
000288  4023              ANDS     r3,r3,r4
00028a  2b00              CMP      r3,#0
00028c  d0f9              BEQ      |L1.642|
00028e  2a01              CMP      r2,#1
000290  ddf7              BLE      |L1.642|
;;;378        
;;;379          /* Send the character */
;;;380          UART0_D_REG(channel) = (uint8)ch;
000292  71c1              STRB     r1,[r0,#7]
;;;381        
;;;382     }
000294  bd10              POP      {r4,pc}
;;;383    /********************************************************************/
                          ENDP

                  uart0_getchar_present PROC
;;;393     */
;;;394    int uart0_getchar_present (UART0_MemMapPtr channel)
000296  4601              MOV      r1,r0
;;;395    {
;;;396        return (UART0_S1_REG(channel) & UART0_S1_RDRF_MASK);
000298  7908              LDRB     r0,[r1,#4]
00029a  2220              MOVS     r2,#0x20
00029c  4010              ANDS     r0,r0,r2
;;;397    }
00029e  4770              BX       lr
;;;398    /********************************************************************/
                          ENDP

                  __NVIC_EnableIRQ PROC
;;;732     */
;;;733    __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
0002a0  2800              CMP      r0,#0
;;;734    {
;;;735      if ((int32_t)(IRQn) >= 0)
0002a2  db05              BLT      |L1.688|
;;;736      {
;;;737        NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
0002a4  06c2              LSLS     r2,r0,#27
0002a6  0ed2              LSRS     r2,r2,#27
0002a8  2101              MOVS     r1,#1
0002aa  4091              LSLS     r1,r1,r2
0002ac  4a25              LDR      r2,|L1.836|
0002ae  6011              STR      r1,[r2,#0]
                  |L1.688|
;;;738      }
;;;739    }
0002b0  4770              BX       lr
;;;740    
                          ENDP

                  __NVIC_SetPriority PROC
;;;839     */
;;;840    __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
0002b2  b510              PUSH     {r4,lr}
;;;841    {
;;;842      if ((int32_t)(IRQn) >= 0)
0002b4  2800              CMP      r0,#0
0002b6  db19              BLT      |L1.748|
;;;843      {
;;;844        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
0002b8  4a22              LDR      r2,|L1.836|
0002ba  2303              MOVS     r3,#3
0002bc  021b              LSLS     r3,r3,#8
0002be  18d2              ADDS     r2,r2,r3
0002c0  0883              LSRS     r3,r0,#2
0002c2  009b              LSLS     r3,r3,#2
0002c4  58d2              LDR      r2,[r2,r3]
0002c6  0783              LSLS     r3,r0,#30
0002c8  0edc              LSRS     r4,r3,#27
0002ca  23ff              MOVS     r3,#0xff
0002cc  40a3              LSLS     r3,r3,r4
0002ce  439a              BICS     r2,r2,r3
0002d0  078b              LSLS     r3,r1,#30
0002d2  0e1b              LSRS     r3,r3,#24
0002d4  0784              LSLS     r4,r0,#30
0002d6  0ee4              LSRS     r4,r4,#27
0002d8  40a3              LSLS     r3,r3,r4
0002da  431a              ORRS     r2,r2,r3
0002dc  4b19              LDR      r3,|L1.836|
0002de  2403              MOVS     r4,#3
0002e0  0224              LSLS     r4,r4,#8
0002e2  191b              ADDS     r3,r3,r4
0002e4  0884              LSRS     r4,r0,#2
0002e6  00a4              LSLS     r4,r4,#2
0002e8  511a              STR      r2,[r3,r4]
0002ea  e018              B        |L1.798|
                  |L1.748|
;;;845           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;846      }
;;;847      else
;;;848      {
;;;849        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
0002ec  4a16              LDR      r2,|L1.840|
0002ee  0703              LSLS     r3,r0,#28
0002f0  0f1b              LSRS     r3,r3,#28
0002f2  3b08              SUBS     r3,r3,#8
0002f4  089b              LSRS     r3,r3,#2
0002f6  009b              LSLS     r3,r3,#2
0002f8  58d2              LDR      r2,[r2,r3]
0002fa  0783              LSLS     r3,r0,#30
0002fc  0edc              LSRS     r4,r3,#27
0002fe  23ff              MOVS     r3,#0xff
000300  40a3              LSLS     r3,r3,r4
000302  439a              BICS     r2,r2,r3
000304  078b              LSLS     r3,r1,#30
000306  0e1b              LSRS     r3,r3,#24
000308  0784              LSLS     r4,r0,#30
00030a  0ee4              LSRS     r4,r4,#27
00030c  40a3              LSLS     r3,r3,r4
00030e  431a              ORRS     r2,r2,r3
000310  4b0d              LDR      r3,|L1.840|
000312  0704              LSLS     r4,r0,#28
000314  0f24              LSRS     r4,r4,#28
000316  3c08              SUBS     r4,r4,#8
000318  08a4              LSRS     r4,r4,#2
00031a  00a4              LSLS     r4,r4,#2
00031c  511a              STR      r2,[r3,r4]
                  |L1.798|
;;;850           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;851      }
;;;852    }
00031e  bd10              POP      {r4,pc}
;;;853    
                          ENDP

                  |L1.800|
                          DCD      0x4006b000
                  |L1.804|
                          DCD      0x40048000
                  |L1.808|
                          DCD      0x4006a000
                  |L1.812|
                          DCD      uart_string_obd
                  |L1.816|
                          DCD      k23
                  |L1.820|
                          DCD      uart_string_gsm
                  |L1.824|
                          DCD      ||k2||
                  |L1.828|
                          DCD      0x00004e1f
                  |L1.832|
                          DCD      0x0000c350
                  |L1.836|
                          DCD      0xe000e100
                  |L1.840|
                          DCD      0xe000ed1c

                          AREA ||.data||, DATA, ALIGN=2

                  test
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\uart\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f64bdfb6____REV16|
#line 465 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f64bdfb6____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f64bdfb6____REVSH|
#line 480
|__asm___6_uart_c_f64bdfb6____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
