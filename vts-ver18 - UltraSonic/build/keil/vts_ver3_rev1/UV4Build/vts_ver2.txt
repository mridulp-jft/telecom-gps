; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -I"E:\bitbuck\vts-ver18 - UltraSonic\build\keil\vts_ver3_rev1\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_SD PROC
;;;54     
;;;55     void send_SD(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;56     {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;57     	clear();
00000c  f7fffffe          BL       clear
;;;58     	tout=0;
000010  2000              MOVS     r0,#0
000012  49fe              LDR      r1,|L1.1036|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;59     		memset(uart_string_gsm,0,5000);
000016  49fe              LDR      r1,|L1.1040|
000018  48fe              LDR      r0,|L1.1044|
00001a  f7fffffe          BL       __aeabi_memclr
;;;60     		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  49fd              LDR      r1,|L1.1048|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;61     		clear();
000024  f7fffffe          BL       clear
;;;62     		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;63     		
;;;64     		delay(10);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       delay
;;;65     		uart_putchar(UART1_BASE_PTR,'\r');//uart_putchar(UART1_BASE_PTR,'\r');
000034  210d              MOVS     r1,#0xd
000036  48f9              LDR      r0,|L1.1052|
000038  f7fffffe          BL       uart_putchar
;;;66     	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;67     		do
00003c  bf00              NOP      
                  |L1.62|
;;;68     		{
;;;69     			
;;;70     //					time111--;
;;;71     //				  timeout222--;
;;;72     
;;;73     			
;;;74     	cond122=strstr(uart_string_gsm, responseA);
00003e  48f5              LDR      r0,|L1.1044|
000040  9902              LDR      r1,[sp,#8]
000042  f7fffffe          BL       strstr
000046  49f6              LDR      r1,|L1.1056|
000048  6008              STR      r0,[r1,#0]  ; cond122
;;;75     	cond123=strstr(uart_string_gsm, responseB);
00004a  4621              MOV      r1,r4
00004c  48f1              LDR      r0,|L1.1044|
00004e  f7fffffe          BL       strstr
000052  49f4              LDR      r1,|L1.1060|
000054  6008              STR      r0,[r1,#0]  ; cond123
;;;76       cond124=strstr(uart_string_gsm, responseC);
000056  4629              MOV      r1,r5
000058  48ee              LDR      r0,|L1.1044|
00005a  f7fffffe          BL       strstr
00005e  49f2              LDR      r1,|L1.1064|
000060  6008              STR      r0,[r1,#0]  ; cond124
;;;77     	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
000062  48ef              LDR      r0,|L1.1056|
000064  6800              LDR      r0,[r0,#0]  ; cond122
000066  2800              CMP      r0,#0
000068  d10b              BNE      |L1.130|
00006a  48ee              LDR      r0,|L1.1060|
00006c  6800              LDR      r0,[r0,#0]  ; cond123
00006e  2800              CMP      r0,#0
000070  d107              BNE      |L1.130|
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]  ; cond124
000076  2800              CMP      r0,#0
000078  d103              BNE      |L1.130|
00007a  48e4              LDR      r0,|L1.1036|
00007c  6800              LDR      r0,[r0,#0]  ; tout
00007e  42b0              CMP      r0,r6
000080  dd01              BLE      |L1.134|
                  |L1.130|
000082  2001              MOVS     r0,#1
000084  e000              B        |L1.136|
                  |L1.134|
000086  2000              MOVS     r0,#0
                  |L1.136|
000088  49e8              LDR      r1,|L1.1068|
00008a  7008              STRB     r0,[r1,#0]
;;;78     			
;;;79     		}while (!cond121);
00008c  4608              MOV      r0,r1
00008e  7800              LDRB     r0,[r0,#0]  ; cond121
000090  2800              CMP      r0,#0
000092  d0d4              BEQ      |L1.62|
;;;80     		clear();
000094  f7fffffe          BL       clear
;;;81     		if(tout>timeout){
000098  48dc              LDR      r0,|L1.1036|
00009a  6800              LDR      r0,[r0,#0]  ; tout
00009c  42b0              CMP      r0,r6
00009e  dd17              BLE      |L1.208|
;;;82     			uart_putchar(UART1_BASE_PTR,'\r');
0000a0  210d              MOVS     r1,#0xd
0000a2  48de              LDR      r0,|L1.1052|
0000a4  f7fffffe          BL       uart_putchar
;;;83     		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000a8  210a              MOVS     r1,#0xa
0000aa  48dc              LDR      r0,|L1.1052|
0000ac  f7fffffe          BL       uart_putchar
0000b0  211a              MOVS     r1,#0x1a
0000b2  48da              LDR      r0,|L1.1052|
0000b4  f7fffffe          BL       uart_putchar
;;;84     		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000b8  211a              MOVS     r1,#0x1a
0000ba  48d8              LDR      r0,|L1.1052|
0000bc  f7fffffe          BL       uart_putchar
0000c0  210d              MOVS     r1,#0xd
0000c2  48d6              LDR      r0,|L1.1052|
0000c4  f7fffffe          BL       uart_putchar
;;;85     		uart_putchar(UART1_BASE_PTR,'\n');}
0000c8  210a              MOVS     r1,#0xa
0000ca  48d4              LDR      r0,|L1.1052|
0000cc  f7fffffe          BL       uart_putchar
                  |L1.208|
;;;86     		//return;
;;;87     //		return uart_string_gsm;
;;;88     
;;;89     }
0000d0  b005              ADD      sp,sp,#0x14
0000d2  bdf0              POP      {r4-r7,pc}
;;;90     
                          ENDP

                  mystrstr PROC
;;;59     
;;;60     char mystrstr(char* str1, char character)
0000d4  b570              PUSH     {r4-r6,lr}
;;;61     {
0000d6  4604              MOV      r4,r0
0000d8  460d              MOV      r5,r1
;;;62     	sz=strlen(str1);
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       strlen
0000e0  49d3              LDR      r1,|L1.1072|
0000e2  6008              STR      r0,[r1,#0]  ; sz
;;;63     	for(cn=0;cn<=sz;cn++)
0000e4  2000              MOVS     r0,#0
0000e6  49d3              LDR      r1,|L1.1076|
0000e8  6008              STR      r0,[r1,#0]  ; cn
0000ea  e00b              B        |L1.260|
                  |L1.236|
;;;64     	{if(str1[cn] == character)
0000ec  48d1              LDR      r0,|L1.1076|
0000ee  6800              LDR      r0,[r0,#0]  ; cn
0000f0  5c20              LDRB     r0,[r4,r0]
0000f2  42a8              CMP      r0,r5
0000f4  d101              BNE      |L1.250|
;;;65     		{return 1;}
0000f6  2001              MOVS     r0,#1
                  |L1.248|
;;;66     	}
;;;67     	return 0;
;;;68     }
0000f8  bd70              POP      {r4-r6,pc}
                  |L1.250|
0000fa  48ce              LDR      r0,|L1.1076|
0000fc  6800              LDR      r0,[r0,#0]            ;63  ; cn
0000fe  1c40              ADDS     r0,r0,#1              ;63
000100  49cc              LDR      r1,|L1.1076|
000102  6008              STR      r0,[r1,#0]            ;63  ; cn
                  |L1.260|
000104  48cb              LDR      r0,|L1.1076|
000106  6800              LDR      r0,[r0,#0]            ;63  ; cn
000108  49c9              LDR      r1,|L1.1072|
00010a  6809              LDR      r1,[r1,#0]            ;63  ; sz
00010c  4288              CMP      r0,r1                 ;63
00010e  dded              BLE      |L1.236|
000110  2000              MOVS     r0,#0                 ;67
000112  e7f1              B        |L1.248|
;;;69     
                          ENDP

                  LED_state2 PROC
;;;248    
;;;249    void LED_state2(void)
000114  b500              PUSH     {lr}
;;;250    {
;;;251    if(sleep_flag == 1)
000116  48c8              LDR      r0,|L1.1080|
000118  6800              LDR      r0,[r0,#0]  ; sleep_flag
00011a  2801              CMP      r0,#1
00011c  d102              BNE      |L1.292|
;;;252    {stateCount=99;
00011e  2063              MOVS     r0,#0x63
000120  49c6              LDR      r1,|L1.1084|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;253    }	
;;;254    			
;;;255    	switch(stateCount){
000124  48c5              LDR      r0,|L1.1084|
000126  7800              LDRB     r0,[r0,#0]  ; stateCount
000128  0003              MOVS     r3,r0
00012a  f7fffffe          BL       __ARM_common_switch8
00012e  0604              DCB      0x06,0x04
000130  0f1a2530          DCB      0x0f,0x1a,0x25,0x30
000134  3b46              DCB      0x3b,0x46
;;;256    	
;;;257    
;;;258                case 0:     //Red
;;;259                       RED_ON;
000136  2001              MOVS     r0,#1
000138  0740              LSLS     r0,r0,#29
00013a  49c1              LDR      r1,|L1.1088|
00013c  6088              STR      r0,[r1,#8]
;;;260                       GREEN_OFF;
00013e  0080              LSLS     r0,r0,#2
000140  6048              STR      r0,[r1,#4]
;;;261                       BLUE_OFF;
000142  2020              MOVS     r0,#0x20
000144  49be              LDR      r1,|L1.1088|
000146  3940              SUBS     r1,r1,#0x40
000148  6048              STR      r0,[r1,#4]
;;;262                       break;
00014a  e044              B        |L1.470|
;;;263    
;;;264                case 1:	//Yellow
;;;265    		               RED_ON;
00014c  2001              MOVS     r0,#1
00014e  0740              LSLS     r0,r0,#29
000150  49bb              LDR      r1,|L1.1088|
000152  6088              STR      r0,[r1,#8]
;;;266    		               GREEN_ON;
000154  0080              LSLS     r0,r0,#2
000156  6088              STR      r0,[r1,#8]
;;;267    		               BLUE_OFF;
000158  2020              MOVS     r0,#0x20
00015a  49b9              LDR      r1,|L1.1088|
00015c  3940              SUBS     r1,r1,#0x40
00015e  6048              STR      r0,[r1,#4]
;;;268    		               break;
000160  e039              B        |L1.470|
;;;269    				
;;;270                case 2:	//Green
;;;271    		               RED_OFF;
000162  2001              MOVS     r0,#1
000164  0740              LSLS     r0,r0,#29
000166  49b6              LDR      r1,|L1.1088|
000168  6048              STR      r0,[r1,#4]
;;;272    		               GREEN_ON;
00016a  0080              LSLS     r0,r0,#2
00016c  6088              STR      r0,[r1,#8]
;;;273    		               BLUE_OFF;
00016e  2020              MOVS     r0,#0x20
000170  49b3              LDR      r1,|L1.1088|
000172  3940              SUBS     r1,r1,#0x40
000174  6048              STR      r0,[r1,#4]
;;;274    		               break;
000176  e02e              B        |L1.470|
;;;275    				
;;;276                case 3:	//Blue
;;;277    		               RED_OFF;
000178  2001              MOVS     r0,#1
00017a  0740              LSLS     r0,r0,#29
00017c  49b0              LDR      r1,|L1.1088|
00017e  6048              STR      r0,[r1,#4]
;;;278    		               GREEN_OFF;
000180  0080              LSLS     r0,r0,#2
000182  6048              STR      r0,[r1,#4]
;;;279    		               BLUE_ON;
000184  2020              MOVS     r0,#0x20
000186  49ae              LDR      r1,|L1.1088|
000188  3940              SUBS     r1,r1,#0x40
00018a  6088              STR      r0,[r1,#8]
;;;280    		               break;
00018c  e023              B        |L1.470|
;;;281    				
;;;282                case 4:	//Violet
;;;283    		               RED_ON;
00018e  2001              MOVS     r0,#1
000190  0740              LSLS     r0,r0,#29
000192  49ab              LDR      r1,|L1.1088|
000194  6088              STR      r0,[r1,#8]
;;;284    		               GREEN_OFF;
000196  0080              LSLS     r0,r0,#2
000198  6048              STR      r0,[r1,#4]
;;;285    		               BLUE_ON;
00019a  2020              MOVS     r0,#0x20
00019c  49a8              LDR      r1,|L1.1088|
00019e  3940              SUBS     r1,r1,#0x40
0001a0  6088              STR      r0,[r1,#8]
;;;286    		               break;
0001a2  e018              B        |L1.470|
;;;287    				
;;;288                case 5:	//White
;;;289    		              RED_ON;
0001a4  2001              MOVS     r0,#1
0001a6  0740              LSLS     r0,r0,#29
0001a8  49a5              LDR      r1,|L1.1088|
0001aa  6088              STR      r0,[r1,#8]
;;;290    		              GREEN_ON;
0001ac  0080              LSLS     r0,r0,#2
0001ae  6088              STR      r0,[r1,#8]
;;;291    		              BLUE_ON;
0001b0  2020              MOVS     r0,#0x20
0001b2  49a3              LDR      r1,|L1.1088|
0001b4  3940              SUBS     r1,r1,#0x40
0001b6  6088              STR      r0,[r1,#8]
;;;292    		              break;
0001b8  e00d              B        |L1.470|
;;;293    				
;;;294                default:	//Red
;;;295    
;;;296    		              RED_OFF;
0001ba  2001              MOVS     r0,#1
0001bc  0740              LSLS     r0,r0,#29
0001be  49a0              LDR      r1,|L1.1088|
0001c0  6048              STR      r0,[r1,#4]
;;;297    		              GREEN_OFF;
0001c2  0080              LSLS     r0,r0,#2
0001c4  6048              STR      r0,[r1,#4]
;;;298    		              BLUE_OFF;
0001c6  2020              MOVS     r0,#0x20
0001c8  499d              LDR      r1,|L1.1088|
0001ca  3940              SUBS     r1,r1,#0x40
0001cc  6048              STR      r0,[r1,#4]
;;;299    		              stateCount = 0;	//Reset state counter
0001ce  2000              MOVS     r0,#0
0001d0  499a              LDR      r1,|L1.1084|
0001d2  7008              STRB     r0,[r1,#0]
;;;300    			      break;
0001d4  bf00              NOP      
                  |L1.470|
0001d6  bf00              NOP                            ;262
;;;301    
;;;302        }
;;;303    	
;;;304    }
0001d8  bd00              POP      {pc}
;;;305    
                          ENDP

                  convtodecnum PROC
;;;2495   
;;;2496   unsigned long convtodecnum(char hex[])
0001da  b5f0              PUSH     {r4-r7,lr}
;;;2497   {
0001dc  b08f              SUB      sp,sp,#0x3c
0001de  4607              MOV      r7,r0
;;;2498       char *hexstr;
;;;2499       int length = 0;
0001e0  2600              MOVS     r6,#0
;;;2500       const int base = 16; // Base of Hexadecimal Number
0001e2  2010              MOVS     r0,#0x10
0001e4  900d              STR      r0,[sp,#0x34]
;;;2501       unsigned long decnum = 0;
0001e6  2000              MOVS     r0,#0
0001e8  900c              STR      r0,[sp,#0x30]
;;;2502       int i;
;;;2503       // Find length of Hexadecimal Number
;;;2504       for (hexstr = hex; *hexstr != '\0'; hexstr++)
0001ea  463c              MOV      r4,r7
0001ec  e001              B        |L1.498|
                  |L1.494|
;;;2505       {
;;;2506   			length++;
0001ee  1c76              ADDS     r6,r6,#1
0001f0  1c64              ADDS     r4,r4,#1              ;2504
                  |L1.498|
0001f2  7820              LDRB     r0,[r4,#0]            ;2504
0001f4  2800              CMP      r0,#0                 ;2504
0001f6  d1fa              BNE      |L1.494|
;;;2507       }
;;;2508       // Find Hexadecimal Number
;;;2509       hexstr = hex;
0001f8  463c              MOV      r4,r7
;;;2510       for (i = 0; *hexstr != '\0' && i < length; i++, hexstr++)
0001fa  2500              MOVS     r5,#0
0001fc  e090              B        |L1.800|
                  |L1.510|
;;;2511       {
;;;2512   	// Compare *hexstr with ASCII values
;;;2513   	if (*hexstr >= 48 && *hexstr <= 57)   // is *hexstr Between 0-9
0001fe  7820              LDRB     r0,[r4,#0]
000200  2830              CMP      r0,#0x30
000202  db2c              BLT      |L1.606|
000204  7820              LDRB     r0,[r4,#0]
000206  2839              CMP      r0,#0x39
000208  dc29              BGT      |L1.606|
;;;2514   	{
;;;2515   	    decnum += (((int)(*hexstr)) - 48) * pow(base, length - i - 1);
00020a  1b71              SUBS     r1,r6,r5
00020c  1e48              SUBS     r0,r1,#1
00020e  f7fffffe          BL       __aeabi_i2d
000212  4602              MOV      r2,r0
000214  460b              MOV      r3,r1
000216  9101              STR      r1,[sp,#4]
000218  9000              STR      r0,[sp,#0]
00021a  2000              MOVS     r0,#0
00021c  4989              LDR      r1,|L1.1092|
00021e  f7fffffe          BL       pow
000222  9105              STR      r1,[sp,#0x14]
000224  9004              STR      r0,[sp,#0x10]
000226  7821              LDRB     r1,[r4,#0]
000228  4608              MOV      r0,r1
00022a  3830              SUBS     r0,r0,#0x30
00022c  f7fffffe          BL       __aeabi_i2d
000230  9103              STR      r1,[sp,#0xc]
000232  9002              STR      r0,[sp,#8]
000234  9b05              LDR      r3,[sp,#0x14]
000236  9a04              LDR      r2,[sp,#0x10]
000238  f7fffffe          BL       __aeabi_dmul
00023c  9109              STR      r1,[sp,#0x24]
00023e  9008              STR      r0,[sp,#0x20]
000240  980c              LDR      r0,[sp,#0x30]
000242  f7fffffe          BL       __aeabi_ui2d
000246  9107              STR      r1,[sp,#0x1c]
000248  9006              STR      r0,[sp,#0x18]
00024a  9b09              LDR      r3,[sp,#0x24]
00024c  9a08              LDR      r2,[sp,#0x20]
00024e  f7fffffe          BL       __aeabi_dadd
000252  910b              STR      r1,[sp,#0x2c]
000254  900a              STR      r0,[sp,#0x28]
000256  f7fffffe          BL       __aeabi_d2uiz
00025a  900c              STR      r0,[sp,#0x30]
00025c  e05e              B        |L1.796|
                  |L1.606|
;;;2516   	}
;;;2517   	else if ((*hexstr >= 65 && *hexstr <= 70))   // is *hexstr Between A-F
00025e  7820              LDRB     r0,[r4,#0]
000260  2841              CMP      r0,#0x41
000262  db2c              BLT      |L1.702|
000264  7820              LDRB     r0,[r4,#0]
000266  2846              CMP      r0,#0x46
000268  dc29              BGT      |L1.702|
;;;2518   	{
;;;2519   	    decnum += (((int)(*hexstr)) - 55) * pow(base, length - i - 1);
00026a  1b71              SUBS     r1,r6,r5
00026c  1e48              SUBS     r0,r1,#1
00026e  f7fffffe          BL       __aeabi_i2d
000272  4602              MOV      r2,r0
000274  460b              MOV      r3,r1
000276  9101              STR      r1,[sp,#4]
000278  9000              STR      r0,[sp,#0]
00027a  2000              MOVS     r0,#0
00027c  4971              LDR      r1,|L1.1092|
00027e  f7fffffe          BL       pow
000282  9105              STR      r1,[sp,#0x14]
000284  9004              STR      r0,[sp,#0x10]
000286  7821              LDRB     r1,[r4,#0]
000288  4608              MOV      r0,r1
00028a  3837              SUBS     r0,r0,#0x37
00028c  f7fffffe          BL       __aeabi_i2d
000290  9103              STR      r1,[sp,#0xc]
000292  9002              STR      r0,[sp,#8]
000294  9b05              LDR      r3,[sp,#0x14]
000296  9a04              LDR      r2,[sp,#0x10]
000298  f7fffffe          BL       __aeabi_dmul
00029c  9109              STR      r1,[sp,#0x24]
00029e  9008              STR      r0,[sp,#0x20]
0002a0  980c              LDR      r0,[sp,#0x30]
0002a2  f7fffffe          BL       __aeabi_ui2d
0002a6  9107              STR      r1,[sp,#0x1c]
0002a8  9006              STR      r0,[sp,#0x18]
0002aa  9b09              LDR      r3,[sp,#0x24]
0002ac  9a08              LDR      r2,[sp,#0x20]
0002ae  f7fffffe          BL       __aeabi_dadd
0002b2  910b              STR      r1,[sp,#0x2c]
0002b4  900a              STR      r0,[sp,#0x28]
0002b6  f7fffffe          BL       __aeabi_d2uiz
0002ba  900c              STR      r0,[sp,#0x30]
0002bc  e02e              B        |L1.796|
                  |L1.702|
;;;2520   	}
;;;2521   	else if (*hexstr >= 97 && *hexstr <= 102)   // is *hexstr Between a-f
0002be  7820              LDRB     r0,[r4,#0]
0002c0  2861              CMP      r0,#0x61
0002c2  db2b              BLT      |L1.796|
0002c4  7820              LDRB     r0,[r4,#0]
0002c6  2866              CMP      r0,#0x66
0002c8  dc28              BGT      |L1.796|
;;;2522   	{
;;;2523   	    decnum += (((int)(*hexstr)) - 87) * pow(base, length - i - 1);
0002ca  1b71              SUBS     r1,r6,r5
0002cc  1e48              SUBS     r0,r1,#1
0002ce  f7fffffe          BL       __aeabi_i2d
0002d2  4602              MOV      r2,r0
0002d4  460b              MOV      r3,r1
0002d6  9101              STR      r1,[sp,#4]
0002d8  9000              STR      r0,[sp,#0]
0002da  2000              MOVS     r0,#0
0002dc  4959              LDR      r1,|L1.1092|
0002de  f7fffffe          BL       pow
0002e2  9105              STR      r1,[sp,#0x14]
0002e4  9004              STR      r0,[sp,#0x10]
0002e6  7821              LDRB     r1,[r4,#0]
0002e8  4608              MOV      r0,r1
0002ea  3857              SUBS     r0,r0,#0x57
0002ec  f7fffffe          BL       __aeabi_i2d
0002f0  9103              STR      r1,[sp,#0xc]
0002f2  9002              STR      r0,[sp,#8]
0002f4  9b05              LDR      r3,[sp,#0x14]
0002f6  9a04              LDR      r2,[sp,#0x10]
0002f8  f7fffffe          BL       __aeabi_dmul
0002fc  9109              STR      r1,[sp,#0x24]
0002fe  9008              STR      r0,[sp,#0x20]
000300  980c              LDR      r0,[sp,#0x30]
000302  f7fffffe          BL       __aeabi_ui2d
000306  9107              STR      r1,[sp,#0x1c]
000308  9006              STR      r0,[sp,#0x18]
00030a  9b09              LDR      r3,[sp,#0x24]
00030c  9a08              LDR      r2,[sp,#0x20]
00030e  f7fffffe          BL       __aeabi_dadd
000312  910b              STR      r1,[sp,#0x2c]
000314  900a              STR      r0,[sp,#0x28]
000316  f7fffffe          BL       __aeabi_d2uiz
00031a  900c              STR      r0,[sp,#0x30]
                  |L1.796|
00031c  1c6d              ADDS     r5,r5,#1              ;2510
00031e  1c64              ADDS     r4,r4,#1              ;2510
                  |L1.800|
000320  7820              LDRB     r0,[r4,#0]            ;2510
000322  2800              CMP      r0,#0                 ;2510
000324  d002              BEQ      |L1.812|
000326  42b5              CMP      r5,r6                 ;2510
000328  da00              BGE      |L1.812|
00032a  e768              B        |L1.510|
                  |L1.812|
;;;2524   	}
;;;2525   	else 
;;;2526   	{
;;;2527   	//    printf(" Invalid Hexadecimal Number \n");
;;;2528   
;;;2529   	}
;;;2530       }
;;;2531       return decnum;
00032c  980c              LDR      r0,[sp,#0x30]
;;;2532   }
00032e  b00f              ADD      sp,sp,#0x3c
000330  bdf0              POP      {r4-r7,pc}
;;;2533   	
                          ENDP

                  Triggerus PROC
;;;2396   
;;;2397   void Triggerus()
000332  b57c              PUSH     {r2-r6,lr}
;;;2398   {
;;;2399   	int32 sonictempptr=0;
000334  2400              MOVS     r4,#0
;;;2400   	int32 sonicptr=0;
000336  2500              MOVS     r5,#0
;;;2401   	int32 val,decimal;
;;;2402   
;;;2403   	
;;;2404   	USTriggerOFF;	
000338  4841              LDR      r0,|L1.1088|
00033a  38c0              SUBS     r0,r0,#0xc0
00033c  6880              LDR      r0,[r0,#8]
00033e  2102              MOVS     r1,#2
000340  4308              ORRS     r0,r0,r1
000342  493f              LDR      r1,|L1.1088|
000344  39c0              SUBS     r1,r1,#0xc0
000346  6088              STR      r0,[r1,#8]
;;;2405   		delay(5);
000348  2005              MOVS     r0,#5
00034a  f7fffffe          BL       delay
;;;2406   	USTriggerON;
00034e  483c              LDR      r0,|L1.1088|
000350  38c0              SUBS     r0,r0,#0xc0
000352  6840              LDR      r0,[r0,#4]
000354  2102              MOVS     r1,#2
000356  4308              ORRS     r0,r0,r1
000358  4939              LDR      r1,|L1.1088|
00035a  39c0              SUBS     r1,r1,#0xc0
00035c  6048              STR      r0,[r1,#4]
;;;2407   		delay(5);
00035e  2005              MOVS     r0,#5
000360  f7fffffe          BL       delay
;;;2408   
;;;2409   	USTriggerOFF;	
000364  4836              LDR      r0,|L1.1088|
000366  38c0              SUBS     r0,r0,#0xc0
000368  6880              LDR      r0,[r0,#8]
00036a  2102              MOVS     r1,#2
00036c  4308              ORRS     r0,r0,r1
00036e  4934              LDR      r1,|L1.1088|
000370  39c0              SUBS     r1,r1,#0xc0
000372  6088              STR      r0,[r1,#8]
;;;2410   
;;;2411   		delay(5);
000374  2005              MOVS     r0,#5
000376  f7fffffe          BL       delay
;;;2412   
;;;2413   	
;;;2414   	memset(sonictemp, 0, 20);
00037a  2114              MOVS     r1,#0x14
00037c  4832              LDR      r0,|L1.1096|
00037e  f7fffffe          BL       __aeabi_memclr
;;;2415   	memset(sonicvalue, 0, 20);
000382  2114              MOVS     r1,#0x14
000384  4831              LDR      r0,|L1.1100|
000386  f7fffffe          BL       __aeabi_memclr
;;;2416   	memset(sonicsensor,0,10);
00038a  210a              MOVS     r1,#0xa
00038c  4830              LDR      r0,|L1.1104|
00038e  f7fffffe          BL       __aeabi_memclr
;;;2417   //for(;;){
;;;2418   //			UART_S1_REG(UART0_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
;;;2419   //			if((UART_S1_REG(UART0_BASE_PTR) & UART0_S1_RDRF_MASK))
;;;2420   //			{
;;;2421   //				sonictemp[sonictempptr]=UART_D_REG(UART0_BASE_PTR);
;;;2422   //				sonictempptr++;
;;;2423   //			}
;;;2424   //			if((int32)sonictemp[sonictempptr] == 255)
;;;2425   //				{break;}
;;;2426   ////				else if((int32)sonictemp[sonictempptr] == 0)
;;;2427   ////				{break;}
;;;2428   //}
;;;2429   
;;;2430   memset(sonictemp, 0, 20);
000392  2114              MOVS     r1,#0x14
000394  482c              LDR      r0,|L1.1096|
000396  f7fffffe          BL       __aeabi_memclr
;;;2431   sonictempptr=0;
00039a  bf00              NOP      
;;;2432   
;;;2433   for(sonicptr=0;sonicptr<10;)
00039c  bf00              NOP      
00039e  e011              B        |L1.964|
                  |L1.928|
;;;2434   {
;;;2435   			UART_S1_REG(UART0_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
0003a0  482c              LDR      r0,|L1.1108|
0003a2  7900              LDRB     r0,[r0,#4]
0003a4  2118              MOVS     r1,#0x18
0003a6  4308              ORRS     r0,r0,r1
0003a8  492a              LDR      r1,|L1.1108|
0003aa  7108              STRB     r0,[r1,#4]
;;;2436   
;;;2437   			if((UART_S1_REG(UART0_BASE_PTR) & UART0_S1_RDRF_MASK))
0003ac  4608              MOV      r0,r1
0003ae  7900              LDRB     r0,[r0,#4]
0003b0  2120              MOVS     r1,#0x20
0003b2  4008              ANDS     r0,r0,r1
0003b4  2800              CMP      r0,#0
0003b6  d005              BEQ      |L1.964|
;;;2438   			{
;;;2439   				
;;;2440   				sonictemp[sonictempptr]=UART_D_REG(UART0_BASE_PTR);
0003b8  4826              LDR      r0,|L1.1108|
0003ba  79c0              LDRB     r0,[r0,#7]
0003bc  4922              LDR      r1,|L1.1096|
0003be  5508              STRB     r0,[r1,r4]
;;;2441   				sonictempptr++;
0003c0  1c64              ADDS     r4,r4,#1
;;;2442   				sonicptr++;
0003c2  1c6d              ADDS     r5,r5,#1
                  |L1.964|
0003c4  2d0a              CMP      r5,#0xa               ;2433
0003c6  dbeb              BLT      |L1.928|
;;;2443   			}
;;;2444   
;;;2445   }
;;;2446   parse_g(sonictemp, 2, 3, (char)0xFF, (char)0xFF, sonicvalue);
0003c8  4820              LDR      r0,|L1.1100|
0003ca  21ff              MOVS     r1,#0xff
0003cc  460b              MOV      r3,r1
0003ce  2203              MOVS     r2,#3
0003d0  9100              STR      r1,[sp,#0]
0003d2  9001              STR      r0,[sp,#4]
0003d4  2102              MOVS     r1,#2
0003d6  481c              LDR      r0,|L1.1096|
0003d8  f7fffffe          BL       parse_g
;;;2447   decimal = 0;
0003dc  2600              MOVS     r6,#0
;;;2448   sprintf(sonicsensor,"%x%x",sonicvalue[0],sonicvalue[1]);
0003de  481b              LDR      r0,|L1.1100|
0003e0  7843              LDRB     r3,[r0,#1]  ; sonicvalue
0003e2  7802              LDRB     r2,[r0,#0]  ; sonicvalue
0003e4  a11c              ADR      r1,|L1.1112|
0003e6  481a              LDR      r0,|L1.1104|
0003e8  f7fffffe          BL       __2sprintf
;;;2449   sonicvaluedecimal = convtodecnum(sonicsensor);
0003ec  4818              LDR      r0,|L1.1104|
0003ee  f7fffffe          BL       convtodecnum
0003f2  491b              LDR      r1,|L1.1120|
0003f4  6008              STR      r0,[r1,#0]  ; sonicvaluedecimal
;;;2450   memset(sonicsensor,0,10);
0003f6  210a              MOVS     r1,#0xa
0003f8  4815              LDR      r0,|L1.1104|
0003fa  f7fffffe          BL       __aeabi_memclr
;;;2451   sprintf(sonicsensor,"%d",sonicvaluedecimal);
0003fe  4818              LDR      r0,|L1.1120|
000400  a118              ADR      r1,|L1.1124|
000402  6802              LDR      r2,[r0,#0]  ; sonicvaluedecimal
000404  4812              LDR      r0,|L1.1104|
000406  f7fffffe          BL       __2sprintf
;;;2452   //send_modem(sonicsensor);
;;;2453   
;;;2454   }
00040a  bd7c              POP      {r2-r6,pc}
                  |L1.1036|
                          DCD      tout
                  |L1.1040|
                          DCD      0x00001388
                  |L1.1044|
                          DCD      uart_string_gsm
                  |L1.1048|
                          DCD      ||k2||
                  |L1.1052|
                          DCD      0x4006b000
                  |L1.1056|
                          DCD      cond122
                  |L1.1060|
                          DCD      cond123
                  |L1.1064|
                          DCD      cond124
                  |L1.1068|
                          DCD      cond121
                  |L1.1072|
                          DCD      ||sz||
                  |L1.1076|
                          DCD      ||cn||
                  |L1.1080|
                          DCD      sleep_flag
                  |L1.1084|
                          DCD      stateCount
                  |L1.1088|
                          DCD      0x400ff100
                  |L1.1092|
                          DCD      0x40300000
                  |L1.1096|
                          DCD      sonictemp
                  |L1.1100|
                          DCD      sonicvalue
                  |L1.1104|
                          DCD      sonicsensor
                  |L1.1108|
                          DCD      0x4006a000
                  |L1.1112|
000458  25782578          DCB      "%x%x",0
00045c  00      
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
                  |L1.1120|
                          DCD      sonicvaluedecimal
                  |L1.1124|
000464  256400            DCB      "%d",0
000467  00                DCB      0
                          ENDP

                  parse_gsm PROC
;;;1569   
;;;1570   void parse_gsm(char *str, int first, int sec, char *string)
000468  b5f8              PUSH     {r3-r7,lr}
;;;1571   {
00046a  4604              MOV      r4,r0
00046c  460e              MOV      r6,r1
00046e  4617              MOV      r7,r2
000470  461d              MOV      r5,r3
;;;1572   
;;;1573   		delay(10);		
000472  200a              MOVS     r0,#0xa
000474  f7fffffe          BL       delay
;;;1574   		memset(string,0,15);
000478  210f              MOVS     r1,#0xf
00047a  4628              MOV      r0,r5
00047c  f7fffffe          BL       __aeabi_memclr
;;;1575   		for(i11=0,temp11=0;i11<100;i11++)
000480  2000              MOVS     r0,#0
000482  49fe              LDR      r1,|L1.2172|
000484  6008              STR      r0,[r1,#0]  ; i11
000486  49fe              LDR      r1,|L1.2176|
000488  6008              STR      r0,[r1,#0]  ; temp11
00048a  e01a              B        |L1.1218|
                  |L1.1164|
;;;1576   		{
;;;1577   		if(str[i11]=='"')
00048c  48fb              LDR      r0,|L1.2172|
00048e  6800              LDR      r0,[r0,#0]  ; i11
000490  5c20              LDRB     r0,[r4,r0]
000492  2822              CMP      r0,#0x22
000494  d108              BNE      |L1.1192|
;;;1578   			{temp11++;j11=i11;}
000496  48fa              LDR      r0,|L1.2176|
000498  6800              LDR      r0,[r0,#0]  ; temp11
00049a  1c40              ADDS     r0,r0,#1
00049c  49f8              LDR      r1,|L1.2176|
00049e  6008              STR      r0,[r1,#0]  ; temp11
0004a0  48f6              LDR      r0,|L1.2172|
0004a2  6800              LDR      r0,[r0,#0]  ; i11
0004a4  49f7              LDR      r1,|L1.2180|
0004a6  6008              STR      r0,[r1,#0]  ; j11
                  |L1.1192|
;;;1579   		else{}
;;;1580   			
;;;1581   		if(temp11>=sec){i11=900;}
0004a8  48f5              LDR      r0,|L1.2176|
0004aa  6800              LDR      r0,[r0,#0]  ; temp11
0004ac  42b8              CMP      r0,r7
0004ae  db03              BLT      |L1.1208|
0004b0  20e1              MOVS     r0,#0xe1
0004b2  0080              LSLS     r0,r0,#2
0004b4  49f1              LDR      r1,|L1.2172|
0004b6  6008              STR      r0,[r1,#0]  ; i11
                  |L1.1208|
0004b8  48f0              LDR      r0,|L1.2172|
0004ba  6800              LDR      r0,[r0,#0]            ;1575  ; i11
0004bc  1c40              ADDS     r0,r0,#1              ;1575
0004be  49ef              LDR      r1,|L1.2172|
0004c0  6008              STR      r0,[r1,#0]            ;1575  ; i11
                  |L1.1218|
0004c2  48ee              LDR      r0,|L1.2172|
0004c4  6800              LDR      r0,[r0,#0]            ;1575  ; i11
0004c6  2864              CMP      r0,#0x64              ;1575
0004c8  dbe0              BLT      |L1.1164|
;;;1582   		else{}	
;;;1583   		
;;;1584   		}	
;;;1585   		
;;;1586   		for(i11=0,temp11=0;i11<100;i11++)
0004ca  2000              MOVS     r0,#0
0004cc  49eb              LDR      r1,|L1.2172|
0004ce  6008              STR      r0,[r1,#0]  ; i11
0004d0  49eb              LDR      r1,|L1.2176|
0004d2  6008              STR      r0,[r1,#0]  ; temp11
0004d4  e01a              B        |L1.1292|
                  |L1.1238|
;;;1587   		{
;;;1588   		if(str[i11]=='"')
0004d6  48e9              LDR      r0,|L1.2172|
0004d8  6800              LDR      r0,[r0,#0]  ; i11
0004da  5c20              LDRB     r0,[r4,r0]
0004dc  2822              CMP      r0,#0x22
0004de  d108              BNE      |L1.1266|
;;;1589   			{temp11++;l=i11;}										
0004e0  48e7              LDR      r0,|L1.2176|
0004e2  6800              LDR      r0,[r0,#0]  ; temp11
0004e4  1c40              ADDS     r0,r0,#1
0004e6  49e6              LDR      r1,|L1.2176|
0004e8  6008              STR      r0,[r1,#0]  ; temp11
0004ea  48e4              LDR      r0,|L1.2172|
0004ec  6800              LDR      r0,[r0,#0]  ; i11
0004ee  49e6              LDR      r1,|L1.2184|
0004f0  6008              STR      r0,[r1,#0]  ; l
                  |L1.1266|
;;;1590   		else{}
;;;1591   		if(temp11>=first){i11=900;}else{}
0004f2  48e3              LDR      r0,|L1.2176|
0004f4  6800              LDR      r0,[r0,#0]  ; temp11
0004f6  42b0              CMP      r0,r6
0004f8  db03              BLT      |L1.1282|
0004fa  20e1              MOVS     r0,#0xe1
0004fc  0080              LSLS     r0,r0,#2
0004fe  49df              LDR      r1,|L1.2172|
000500  6008              STR      r0,[r1,#0]  ; i11
                  |L1.1282|
000502  48de              LDR      r0,|L1.2172|
000504  6800              LDR      r0,[r0,#0]            ;1586  ; i11
000506  1c40              ADDS     r0,r0,#1              ;1586
000508  49dc              LDR      r1,|L1.2172|
00050a  6008              STR      r0,[r1,#0]            ;1586  ; i11
                  |L1.1292|
00050c  48db              LDR      r0,|L1.2172|
00050e  6800              LDR      r0,[r0,#0]            ;1586  ; i11
000510  2864              CMP      r0,#0x64              ;1586
000512  dbe0              BLT      |L1.1238|
;;;1592   		}	
;;;1593   		for(i11=0;i11<(j11-l-1);i11++)
000514  2000              MOVS     r0,#0
000516  49d9              LDR      r1,|L1.2172|
000518  6008              STR      r0,[r1,#0]  ; i11
00051a  e00e              B        |L1.1338|
                  |L1.1308|
;;;1594   		{
;;;1595   		string[i11] = str[l+i11+1];
00051c  48da              LDR      r0,|L1.2184|
00051e  6800              LDR      r0,[r0,#0]  ; l
000520  49d6              LDR      r1,|L1.2172|
000522  6809              LDR      r1,[r1,#0]  ; i11
000524  1840              ADDS     r0,r0,r1
000526  1c40              ADDS     r0,r0,#1
000528  5c20              LDRB     r0,[r4,r0]
00052a  49d4              LDR      r1,|L1.2172|
00052c  6809              LDR      r1,[r1,#0]  ; i11
00052e  5468              STRB     r0,[r5,r1]
000530  48d2              LDR      r0,|L1.2172|
000532  6800              LDR      r0,[r0,#0]            ;1593  ; i11
000534  1c40              ADDS     r0,r0,#1              ;1593
000536  49d1              LDR      r1,|L1.2172|
000538  6008              STR      r0,[r1,#0]            ;1593  ; i11
                  |L1.1338|
00053a  48d2              LDR      r0,|L1.2180|
00053c  6800              LDR      r0,[r0,#0]            ;1593  ; j11
00053e  49d2              LDR      r1,|L1.2184|
000540  6809              LDR      r1,[r1,#0]            ;1593  ; l
000542  1a40              SUBS     r0,r0,r1              ;1593
000544  1e40              SUBS     r0,r0,#1              ;1593
000546  49cd              LDR      r1,|L1.2172|
000548  6809              LDR      r1,[r1,#0]            ;1593  ; i11
00054a  4288              CMP      r0,r1                 ;1593
00054c  dce6              BGT      |L1.1308|
;;;1596   		}			
;;;1597   	
;;;1598   
;;;1599   }
00054e  bdf8              POP      {r3-r7,pc}
;;;1600   
                          ENDP

                  cursor_val PROC
;;;1784   
;;;1785   int cursor_val(char * stringsd, int cur){
000550  b5f8              PUSH     {r3-r7,lr}
000552  4605              MOV      r5,r0
000554  460e              MOV      r6,r1
;;;1786   int curinc=0,curcounter=0,cur2=0;
000556  2400              MOVS     r4,#0
000558  2700              MOVS     r7,#0
00055a  2000              MOVS     r0,#0
00055c  9000              STR      r0,[sp,#0]
;;;1787   for(curinc=0;curinc<strlen(stringsd);curinc++){
00055e  bf00              NOP      
000560  e007              B        |L1.1394|
                  |L1.1378|
;;;1788   		
;;;1789   		if(stringsd[curinc] == '\n'     &&    curcounter < cur   ){ //&& curcounter<=cur	){
000562  5d28              LDRB     r0,[r5,r4]
000564  280a              CMP      r0,#0xa
000566  d103              BNE      |L1.1392|
000568  42b7              CMP      r7,r6
00056a  da01              BGE      |L1.1392|
;;;1790   			++curcounter;     cur2=curinc;
00056c  1c7f              ADDS     r7,r7,#1
00056e  9400              STR      r4,[sp,#0]
                  |L1.1392|
000570  1c64              ADDS     r4,r4,#1              ;1787
                  |L1.1394|
000572  4628              MOV      r0,r5                 ;1787
000574  f7fffffe          BL       strlen
000578  42a0              CMP      r0,r4                 ;1787
00057a  d8f2              BHI      |L1.1378|
;;;1791   		}
;;;1792   
;;;1793   		
;;;1794   
;;;1795   }
;;;1796   	
;;;1797   	
;;;1798   	return cur2;
00057c  9800              LDR      r0,[sp,#0]
;;;1799   
;;;1800   }
00057e  bdf8              POP      {r3-r7,pc}
;;;1801   
                          ENDP

                  count_char PROC
;;;1765   }
;;;1766   int count_char(char ch,char* string)
000580  b570              PUSH     {r4-r6,lr}
;;;1767   {count=0;
000582  4605              MOV      r5,r0
000584  460c              MOV      r4,r1
000586  2000              MOVS     r0,#0
000588  49c0              LDR      r1,|L1.2188|
00058a  6008              STR      r0,[r1,#0]  ; count
;;;1768   
;;;1769   	//remove_all_chars(string,'\0','\0');
;;;1770   //	ass=strlen(string);
;;;1771   	for(ass=0;ass<strlen(string);ass++)
00058c  49c0              LDR      r1,|L1.2192|
00058e  6008              STR      r0,[r1,#0]  ; ass
000590  e00e              B        |L1.1456|
                  |L1.1426|
;;;1772   	{
;;;1773   		if(string[ass] == ch)
000592  48bf              LDR      r0,|L1.2192|
000594  6800              LDR      r0,[r0,#0]  ; ass
000596  5c20              LDRB     r0,[r4,r0]
000598  42a8              CMP      r0,r5
00059a  d104              BNE      |L1.1446|
;;;1774   		{count++;}
00059c  48bb              LDR      r0,|L1.2188|
00059e  6800              LDR      r0,[r0,#0]  ; count
0005a0  1c40              ADDS     r0,r0,#1
0005a2  49ba              LDR      r1,|L1.2188|
0005a4  6008              STR      r0,[r1,#0]  ; count
                  |L1.1446|
0005a6  48ba              LDR      r0,|L1.2192|
0005a8  6800              LDR      r0,[r0,#0]            ;1771  ; ass
0005aa  1c40              ADDS     r0,r0,#1              ;1771
0005ac  49b8              LDR      r1,|L1.2192|
0005ae  6008              STR      r0,[r1,#0]            ;1771  ; ass
                  |L1.1456|
0005b0  4620              MOV      r0,r4                 ;1771
0005b2  f7fffffe          BL       strlen
0005b6  49b6              LDR      r1,|L1.2192|
0005b8  6809              LDR      r1,[r1,#0]            ;1771  ; ass
0005ba  4288              CMP      r0,r1                 ;1771
0005bc  d8e9              BHI      |L1.1426|
;;;1775   		
;;;1776   	}
;;;1777   return count;
0005be  48b3              LDR      r0,|L1.2188|
0005c0  6800              LDR      r0,[r0,#0]  ; count
;;;1778   }
0005c2  bd70              POP      {r4-r6,pc}
;;;1779   
                          ENDP

                  send_tcp PROC
;;;93     
;;;94     void send_tcp()
0005c4  b538              PUSH     {r3-r5,lr}
;;;95     {	
;;;96     memset(stcond1,0,strlen(stcond1));	
0005c6  48b3              LDR      r0,|L1.2196|
0005c8  6800              LDR      r0,[r0,#0]  ; stcond1
0005ca  f7fffffe          BL       strlen
0005ce  4604              MOV      r4,r0
0005d0  4621              MOV      r1,r4
0005d2  48b0              LDR      r0,|L1.2196|
0005d4  6800              LDR      r0,[r0,#0]  ; stcond1
0005d6  f7fffffe          BL       __aeabi_memclr
;;;97     memset(con1d,0,strlen(con1d));	
0005da  48af              LDR      r0,|L1.2200|
0005dc  6800              LDR      r0,[r0,#0]  ; con1d
0005de  f7fffffe          BL       strlen
0005e2  4604              MOV      r4,r0
0005e4  4621              MOV      r1,r4
0005e6  48ac              LDR      r0,|L1.2200|
0005e8  6800              LDR      r0,[r0,#0]  ; con1d
0005ea  f7fffffe          BL       __aeabi_memclr
;;;98     								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;99     
;;;100    								cond=mystrstr(uart_string_gsm,'>');
0005ee  213e              MOVS     r1,#0x3e
0005f0  48aa              LDR      r0,|L1.2204|
0005f2  f7fffffe          BL       mystrstr
0005f6  49aa              LDR      r1,|L1.2208|
0005f8  7008              STRB     r0,[r1,#0]
;;;101    								if(cond)	
0005fa  4608              MOV      r0,r1
0005fc  7800              LDRB     r0,[r0,#0]  ; cond
0005fe  2800              CMP      r0,#0
000600  d07e              BEQ      |L1.1792|
;;;102    								{
;;;103    									
;;;104    									clear();
000602  f7fffffe          BL       clear
;;;105    									memset(uart_string_gsm,0,5000);
000606  49a7              LDR      r1,|L1.2212|
000608  48a4              LDR      r0,|L1.2204|
00060a  f7fffffe          BL       __aeabi_memclr
;;;106    									strcat(data,"\n\n");
00060e  a1a6              ADR      r1,|L1.2216|
000610  48a6              LDR      r0,|L1.2220|
000612  f7fffffe          BL       strcat
;;;107    									len=strlen(data);
000616  48a5              LDR      r0,|L1.2220|
000618  f7fffffe          BL       strlen
00061c  49a4              LDR      r1,|L1.2224|
00061e  6008              STR      r0,[r1,#0]  ; len
;;;108    									tout=0;
000620  2000              MOVS     r0,#0
000622  49a4              LDR      r1,|L1.2228|
000624  6008              STR      r0,[r1,#0]  ; tout
;;;109    									k2=0;
000626  49a4              LDR      r1,|L1.2232|
000628  6008              STR      r0,[r1,#0]  ; k2
;;;110    									for(k=0;k<len;k++)
00062a  49a4              LDR      r1,|L1.2236|
00062c  6008              STR      r0,[r1,#0]  ; k
00062e  e00b              B        |L1.1608|
                  |L1.1584|
;;;111    									{
;;;112    										uart_putchar(UART1_BASE_PTR, data[k]);
000630  489e              LDR      r0,|L1.2220|
000632  4aa2              LDR      r2,|L1.2236|
000634  6812              LDR      r2,[r2,#0]  ; k
000636  5c81              LDRB     r1,[r0,r2]
000638  48a1              LDR      r0,|L1.2240|
00063a  f7fffffe          BL       uart_putchar
00063e  489f              LDR      r0,|L1.2236|
000640  6800              LDR      r0,[r0,#0]            ;110  ; k
000642  1c40              ADDS     r0,r0,#1              ;110
000644  499d              LDR      r1,|L1.2236|
000646  6008              STR      r0,[r1,#0]            ;110  ; k
                  |L1.1608|
000648  489c              LDR      r0,|L1.2236|
00064a  6800              LDR      r0,[r0,#0]            ;110  ; k
00064c  4998              LDR      r1,|L1.2224|
00064e  6809              LDR      r1,[r1,#0]            ;110  ; len
000650  4288              CMP      r0,r1                 ;110
000652  dbed              BLT      |L1.1584|
;;;113    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000654  210a              MOVS     r1,#0xa
000656  489a              LDR      r0,|L1.2240|
000658  f7fffffe          BL       uart_putchar
00065c  211a              MOVS     r1,#0x1a
00065e  4898              LDR      r0,|L1.2240|
000660  f7fffffe          BL       uart_putchar
000664  211a              MOVS     r1,#0x1a
000666  4896              LDR      r0,|L1.2240|
000668  f7fffffe          BL       uart_putchar
00066c  211a              MOVS     r1,#0x1a
00066e  4894              LDR      r0,|L1.2240|
000670  f7fffffe          BL       uart_putchar
000674  211a              MOVS     r1,#0x1a
000676  4892              LDR      r0,|L1.2240|
000678  f7fffffe          BL       uart_putchar
00067c  211a              MOVS     r1,#0x1a
00067e  4890              LDR      r0,|L1.2240|
000680  f7fffffe          BL       uart_putchar
;;;114    									do
000684  bf00              NOP      
                  |L1.1670|
;;;115    																{stcond1=strstr(uart_string_gsm,"SEND OK");
000686  a18f              ADR      r1,|L1.2244|
000688  4884              LDR      r0,|L1.2204|
00068a  f7fffffe          BL       strstr
00068e  4981              LDR      r1,|L1.2196|
000690  6008              STR      r0,[r1,#0]  ; stcond1
;;;116    																	stcond2=strstr(uart_string_gsm, "ERROR");
000692  a18e              ADR      r1,|L1.2252|
000694  4881              LDR      r0,|L1.2204|
000696  f7fffffe          BL       strstr
00069a  498e              LDR      r1,|L1.2260|
00069c  6008              STR      r0,[r1,#0]  ; stcond2
;;;117    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00069e  a18e              ADR      r1,|L1.2264|
0006a0  487e              LDR      r0,|L1.2204|
0006a2  f7fffffe          BL       strstr
0006a6  498e              LDR      r1,|L1.2272|
0006a8  6008              STR      r0,[r1,#0]  ; stcond3
;;;118    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0006aa  a18e              ADR      r1,|L1.2276|
0006ac  487b              LDR      r0,|L1.2204|
0006ae  f7fffffe          BL       strstr
0006b2  498e              LDR      r1,|L1.2284|
0006b4  6008              STR      r0,[r1,#0]  ; stcond4
;;;119    																	
;;;120    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0006b6  4887              LDR      r0,|L1.2260|
0006b8  6800              LDR      r0,[r0,#0]  ; stcond2
0006ba  2800              CMP      r0,#0
0006bc  d10f              BNE      |L1.1758|
0006be  4888              LDR      r0,|L1.2272|
0006c0  6800              LDR      r0,[r0,#0]  ; stcond3
0006c2  2800              CMP      r0,#0
0006c4  d10b              BNE      |L1.1758|
0006c6  4608              MOV      r0,r1
0006c8  6800              LDR      r0,[r0,#0]  ; stcond4
0006ca  2800              CMP      r0,#0
0006cc  d107              BNE      |L1.1758|
0006ce  4871              LDR      r0,|L1.2196|
0006d0  6800              LDR      r0,[r0,#0]  ; stcond1
0006d2  2800              CMP      r0,#0
0006d4  d103              BNE      |L1.1758|
0006d6  4877              LDR      r0,|L1.2228|
0006d8  6800              LDR      r0,[r0,#0]  ; tout
0006da  2804              CMP      r0,#4
0006dc  ddd3              BLE      |L1.1670|
                  |L1.1758|
;;;121    																//delay(10);clear();
;;;122    														uart_putchar(UART1_BASE_PTR,0x1A);
0006de  211a              MOVS     r1,#0x1a
0006e0  4877              LDR      r0,|L1.2240|
0006e2  f7fffffe          BL       uart_putchar
;;;123    												//delay(10);
;;;124    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0006e6  211a              MOVS     r1,#0x1a
0006e8  4875              LDR      r0,|L1.2240|
0006ea  f7fffffe          BL       uart_putchar
0006ee  211a              MOVS     r1,#0x1a
0006f0  4873              LDR      r0,|L1.2240|
0006f2  f7fffffe          BL       uart_putchar
0006f6  211a              MOVS     r1,#0x1a
0006f8  4871              LDR      r0,|L1.2240|
0006fa  f7fffffe          BL       uart_putchar
;;;125    						
;;;126    									
;;;127    									
;;;128    									
;;;129    									if(flagch==1){		int_erval=temp;flagch=0;	}
0006fe  e000              B        |L1.1794|
                  |L1.1792|
000700  e013              B        |L1.1834|
                  |L1.1794|
000702  487b              LDR      r0,|L1.2288|
000704  6800              LDR      r0,[r0,#0]  ; flagch
000706  2801              CMP      r0,#1
000708  d106              BNE      |L1.1816|
00070a  487a              LDR      r0,|L1.2292|
00070c  6800              LDR      r0,[r0,#0]  ; temp
00070e  497a              LDR      r1,|L1.2296|
000710  6008              STR      r0,[r1,#0]  ; int_erval
000712  2000              MOVS     r0,#0
000714  4976              LDR      r1,|L1.2288|
000716  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.1816|
;;;130    									
;;;131    									
;;;132    									
;;;133    
;;;134    //									for(k=0;k<len;k++)
;;;135    //									{
;;;136    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;137    //									}
;;;138    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;139    
;;;140    //									
;;;141    //													k2=0;									//string array counter for uart 1
;;;142    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;143    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;144    //																{
;;;145    //																	timeout--;
;;;146    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;147    //
;;;148    									delay(20);															
000718  2014              MOVS     r0,#0x14
00071a  f7fffffe          BL       delay
;;;149    stcond1=strstr(uart_string_gsm,"SEND OK"); 
00071e  a169              ADR      r1,|L1.2244|
000720  485e              LDR      r0,|L1.2204|
000722  f7fffffe          BL       strstr
000726  495b              LDR      r1,|L1.2196|
000728  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.1834|
;;;150    
;;;151    								}
;;;152    
;;;153      //checks for send ok
;;;154    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
00072a  485a              LDR      r0,|L1.2196|
00072c  6800              LDR      r0,[r0,#0]  ; stcond1
00072e  2800              CMP      r0,#0
000730  d001              BEQ      |L1.1846|
000732  f000ffa2          BL       |L1.5754|
                  |L1.1846|
;;;155    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000736  211a              MOVS     r1,#0x1a
000738  4861              LDR      r0,|L1.2240|
00073a  f7fffffe          BL       uart_putchar
00073e  f7fffffe          BL       clear
000742  200a              MOVS     r0,#0xa
000744  f7fffffe          BL       delay
;;;156    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000748  211a              MOVS     r1,#0x1a
00074a  485d              LDR      r0,|L1.2240|
00074c  f7fffffe          BL       uart_putchar
000750  f7fffffe          BL       clear
000754  200a              MOVS     r0,#0xa
000756  f7fffffe          BL       delay
;;;157    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00075a  211a              MOVS     r1,#0x1a
00075c  4858              LDR      r0,|L1.2240|
00075e  f7fffffe          BL       uart_putchar
000762  f7fffffe          BL       clear
000766  200a              MOVS     r0,#0xa
000768  f7fffffe          BL       delay
;;;158    							remove_all_chars(data, '\n', '\n');
00076c  220a              MOVS     r2,#0xa
00076e  4611              MOV      r1,r2
000770  484e              LDR      r0,|L1.2220|
000772  f7fffffe          BL       remove_all_chars
;;;159    	
;;;160    		strcat(data,"CH\n");	
000776  a161              ADR      r1,|L1.2300|
000778  484c              LDR      r0,|L1.2220|
00077a  f7fffffe          BL       strcat
;;;161    		
;;;162    	
;;;163    	delay(100);
00077e  2064              MOVS     r0,#0x64
000780  f7fffffe          BL       delay
;;;164    		clear();//memset(uart_string_gsm,0,5000);
000784  f7fffffe          BL       clear
;;;165    	
;;;166    	memset(at_,0,100);
000788  2164              MOVS     r1,#0x64
00078a  485d              LDR      r0,|L1.2304|
00078c  f7fffffe          BL       __aeabi_memclr
;;;167    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000790  4846              LDR      r0,|L1.2220|
000792  f7fffffe          BL       strlen
000796  1c44              ADDS     r4,r0,#1
000798  4623              MOV      r3,r4
00079a  4a5a              LDR      r2,|L1.2308|
00079c  a15a              ADR      r1,|L1.2312|
00079e  4858              LDR      r0,|L1.2304|
0007a0  f7fffffe          BL       __2sprintf
;;;168    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0007a4  2005              MOVS     r0,#5
0007a6  a349              ADR      r3,|L1.2252|
0007a8  a260              ADR      r2,|L1.2348|
0007aa  a162              ADR      r1,|L1.2356|
0007ac  9000              STR      r0,[sp,#0]
0007ae  4854              LDR      r0,|L1.2304|
0007b0  f7fffffe          BL       send_SD
;;;169    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;170    //	if(strstr(uart_string_gsm,"ERROR")){
;;;171    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;172    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;173    //	}
;;;174    	
;;;175    clear();	
0007b4  f7fffffe          BL       clear
;;;176    									k2=0;									//string array counter for uart 1
0007b8  2000              MOVS     r0,#0
0007ba  493f              LDR      r1,|L1.2232|
0007bc  6008              STR      r0,[r1,#0]  ; k2
;;;177    									tout=0;	
0007be  493d              LDR      r1,|L1.2228|
0007c0  6008              STR      r0,[r1,#0]  ; tout
;;;178    		for(k=0;k<strlen(data);k++)
0007c2  493e              LDR      r1,|L1.2236|
0007c4  6008              STR      r0,[r1,#0]  ; k
0007c6  e00b              B        |L1.2016|
                  |L1.1992|
;;;179    		{
;;;180    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0007c8  4838              LDR      r0,|L1.2220|
0007ca  4a3c              LDR      r2,|L1.2236|
0007cc  6812              LDR      r2,[r2,#0]  ; k
0007ce  5c81              LDRB     r1,[r0,r2]
0007d0  483b              LDR      r0,|L1.2240|
0007d2  f7fffffe          BL       uart_putchar
0007d6  4839              LDR      r0,|L1.2236|
0007d8  6800              LDR      r0,[r0,#0]            ;178  ; k
0007da  1c40              ADDS     r0,r0,#1              ;178
0007dc  4937              LDR      r1,|L1.2236|
0007de  6008              STR      r0,[r1,#0]            ;178  ; k
                  |L1.2016|
0007e0  4832              LDR      r0,|L1.2220|
0007e2  f7fffffe          BL       strlen
0007e6  4935              LDR      r1,|L1.2236|
0007e8  6809              LDR      r1,[r1,#0]            ;178  ; k
0007ea  4288              CMP      r0,r1                 ;178
0007ec  d8ec              BHI      |L1.1992|
;;;181    		}	
;;;182    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0007ee  210a              MOVS     r1,#0xa
0007f0  4833              LDR      r0,|L1.2240|
0007f2  f7fffffe          BL       uart_putchar
0007f6  210a              MOVS     r1,#0xa
0007f8  4831              LDR      r0,|L1.2240|
0007fa  f7fffffe          BL       uart_putchar
0007fe  210a              MOVS     r1,#0xa
000800  482f              LDR      r0,|L1.2240|
000802  f7fffffe          BL       uart_putchar
000806  210a              MOVS     r1,#0xa
000808  482d              LDR      r0,|L1.2240|
00080a  f7fffffe          BL       uart_putchar
00080e  210a              MOVS     r1,#0xa
000810  482b              LDR      r0,|L1.2240|
000812  f7fffffe          BL       uart_putchar
000816  210a              MOVS     r1,#0xa
000818  4829              LDR      r0,|L1.2240|
00081a  f7fffffe          BL       uart_putchar
00081e  210a              MOVS     r1,#0xa
000820  4827              LDR      r0,|L1.2240|
000822  f7fffffe          BL       uart_putchar
000826  210a              MOVS     r1,#0xa
000828  4825              LDR      r0,|L1.2240|
00082a  f7fffffe          BL       uart_putchar
00082e  210a              MOVS     r1,#0xa
000830  4823              LDR      r0,|L1.2240|
000832  f7fffffe          BL       uart_putchar
000836  210a              MOVS     r1,#0xa
000838  4821              LDR      r0,|L1.2240|
00083a  f7fffffe          BL       uart_putchar
00083e  210a              MOVS     r1,#0xa
000840  481f              LDR      r0,|L1.2240|
000842  f7fffffe          BL       uart_putchar
000846  210a              MOVS     r1,#0xa
000848  481d              LDR      r0,|L1.2240|
00084a  f7fffffe          BL       uart_putchar
00084e  210a              MOVS     r1,#0xa
000850  481b              LDR      r0,|L1.2240|
000852  f7fffffe          BL       uart_putchar
000856  210a              MOVS     r1,#0xa
000858  4819              LDR      r0,|L1.2240|
00085a  f7fffffe          BL       uart_putchar
00085e  210a              MOVS     r1,#0xa
000860  4817              LDR      r0,|L1.2240|
000862  f7fffffe          BL       uart_putchar
000866  210a              MOVS     r1,#0xa
000868  4815              LDR      r0,|L1.2240|
00086a  f7fffffe          BL       uart_putchar
00086e  210a              MOVS     r1,#0xa
000870  4813              LDR      r0,|L1.2240|
000872  f7fffffe          BL       uart_putchar
000876  210a              MOVS     r1,#0xa
000878  4811              LDR      r0,|L1.2240|
00087a  e05d              B        |L1.2360|
                  |L1.2172|
                          DCD      i11
                  |L1.2176|
                          DCD      temp11
                  |L1.2180|
                          DCD      j11
                  |L1.2184|
                          DCD      l
                  |L1.2188|
                          DCD      count
                  |L1.2192|
                          DCD      ass
                  |L1.2196|
                          DCD      stcond1
                  |L1.2200|
                          DCD      con1d
                  |L1.2204|
                          DCD      uart_string_gsm
                  |L1.2208|
                          DCD      cond
                  |L1.2212|
                          DCD      0x00001388
                  |L1.2216|
0008a8  0a0a00            DCB      "\n\n",0
0008ab  00                DCB      0
                  |L1.2220|
                          DCD      data
                  |L1.2224|
                          DCD      len
                  |L1.2228|
                          DCD      tout
                  |L1.2232|
                          DCD      ||k2||
                  |L1.2236|
                          DCD      k
                  |L1.2240|
                          DCD      0x4006b000
                  |L1.2244|
0008c4  53454e44          DCB      "SEND OK",0
0008c8  204f4b00
                  |L1.2252|
0008cc  4552524f          DCB      "ERROR",0
0008d0  5200    
0008d2  00                DCB      0
0008d3  00                DCB      0
                  |L1.2260|
                          DCD      stcond2
                  |L1.2264|
0008d8  4641494c          DCB      "FAIL",0
0008dc  00      
0008dd  00                DCB      0
0008de  00                DCB      0
0008df  00                DCB      0
                  |L1.2272|
                          DCD      stcond3
                  |L1.2276|
0008e4  44454143          DCB      "DEACT",0
0008e8  5400    
0008ea  00                DCB      0
0008eb  00                DCB      0
                  |L1.2284|
                          DCD      stcond4
                  |L1.2288|
                          DCD      flagch
                  |L1.2292|
                          DCD      temp
                  |L1.2296|
                          DCD      int_erval
                  |L1.2300|
0008fc  43480a00          DCB      "CH\n",0
                  |L1.2304|
                          DCD      at_
                  |L1.2308|
                          DCD      drive
                  |L1.2312|
000908  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
00090c  2b465357
000910  52495445
000914  3d25735c
000918  4c4f472e
00091c  5458542c
000920  312c2564
000924  2c31300a
000928  0a00    
00092a  00                DCB      0
00092b  00                DCB      0
                  |L1.2348|
00092c  4552524f          DCB      "ERROR\r\n",0
000930  520d0a00
                  |L1.2356|
000934  3e00              DCB      ">",0
000936  00                DCB      0
000937  00                DCB      0
                  |L1.2360|
000938  f7fffffe          BL       uart_putchar
00093c  210a              MOVS     r1,#0xa
00093e  48fe              LDR      r0,|L1.3384|
000940  f7fffffe          BL       uart_putchar
000944  210a              MOVS     r1,#0xa
000946  48fc              LDR      r0,|L1.3384|
000948  f7fffffe          BL       uart_putchar
00094c  210a              MOVS     r1,#0xa
00094e  48fa              LDR      r0,|L1.3384|
000950  f7fffffe          BL       uart_putchar
000954  210a              MOVS     r1,#0xa
000956  48f8              LDR      r0,|L1.3384|
000958  f7fffffe          BL       uart_putchar
00095c  210a              MOVS     r1,#0xa
00095e  48f6              LDR      r0,|L1.3384|
000960  f7fffffe          BL       uart_putchar
000964  210a              MOVS     r1,#0xa
000966  48f4              LDR      r0,|L1.3384|
000968  f7fffffe          BL       uart_putchar
00096c  210a              MOVS     r1,#0xa
00096e  48f2              LDR      r0,|L1.3384|
000970  f7fffffe          BL       uart_putchar
000974  210a              MOVS     r1,#0xa
000976  48f0              LDR      r0,|L1.3384|
000978  f7fffffe          BL       uart_putchar
00097c  210a              MOVS     r1,#0xa
00097e  48ee              LDR      r0,|L1.3384|
000980  f7fffffe          BL       uart_putchar
000984  210a              MOVS     r1,#0xa
000986  48ec              LDR      r0,|L1.3384|
000988  f7fffffe          BL       uart_putchar
00098c  210a              MOVS     r1,#0xa
00098e  48ea              LDR      r0,|L1.3384|
000990  f7fffffe          BL       uart_putchar
000994  210a              MOVS     r1,#0xa
000996  48e8              LDR      r0,|L1.3384|
000998  f7fffffe          BL       uart_putchar
00099c  210a              MOVS     r1,#0xa
00099e  48e6              LDR      r0,|L1.3384|
0009a0  f7fffffe          BL       uart_putchar
0009a4  210a              MOVS     r1,#0xa
0009a6  48e4              LDR      r0,|L1.3384|
0009a8  f7fffffe          BL       uart_putchar
0009ac  210a              MOVS     r1,#0xa
0009ae  48e2              LDR      r0,|L1.3384|
0009b0  f7fffffe          BL       uart_putchar
0009b4  210a              MOVS     r1,#0xa
0009b6  48e0              LDR      r0,|L1.3384|
0009b8  f7fffffe          BL       uart_putchar
0009bc  210a              MOVS     r1,#0xa
0009be  48de              LDR      r0,|L1.3384|
0009c0  f7fffffe          BL       uart_putchar
0009c4  210a              MOVS     r1,#0xa
0009c6  48dc              LDR      r0,|L1.3384|
0009c8  f7fffffe          BL       uart_putchar
0009cc  210a              MOVS     r1,#0xa
0009ce  48da              LDR      r0,|L1.3384|
0009d0  f7fffffe          BL       uart_putchar
0009d4  210a              MOVS     r1,#0xa
0009d6  48d8              LDR      r0,|L1.3384|
0009d8  f7fffffe          BL       uart_putchar
0009dc  210a              MOVS     r1,#0xa
0009de  48d6              LDR      r0,|L1.3384|
0009e0  f7fffffe          BL       uart_putchar
0009e4  210a              MOVS     r1,#0xa
0009e6  48d4              LDR      r0,|L1.3384|
0009e8  f7fffffe          BL       uart_putchar
0009ec  210a              MOVS     r1,#0xa
0009ee  48d2              LDR      r0,|L1.3384|
0009f0  f7fffffe          BL       uart_putchar
0009f4  210a              MOVS     r1,#0xa
0009f6  48d0              LDR      r0,|L1.3384|
0009f8  f7fffffe          BL       uart_putchar
0009fc  210a              MOVS     r1,#0xa
0009fe  48ce              LDR      r0,|L1.3384|
000a00  f7fffffe          BL       uart_putchar
000a04  210a              MOVS     r1,#0xa
000a06  48cc              LDR      r0,|L1.3384|
000a08  f7fffffe          BL       uart_putchar
000a0c  210a              MOVS     r1,#0xa
000a0e  48ca              LDR      r0,|L1.3384|
000a10  f7fffffe          BL       uart_putchar
000a14  210a              MOVS     r1,#0xa
000a16  48c8              LDR      r0,|L1.3384|
000a18  f7fffffe          BL       uart_putchar
000a1c  210a              MOVS     r1,#0xa
000a1e  48c6              LDR      r0,|L1.3384|
000a20  f7fffffe          BL       uart_putchar
000a24  210a              MOVS     r1,#0xa
000a26  48c4              LDR      r0,|L1.3384|
000a28  f7fffffe          BL       uart_putchar
000a2c  210a              MOVS     r1,#0xa
000a2e  48c2              LDR      r0,|L1.3384|
000a30  f7fffffe          BL       uart_putchar
000a34  210a              MOVS     r1,#0xa
000a36  48c0              LDR      r0,|L1.3384|
000a38  f7fffffe          BL       uart_putchar
000a3c  210a              MOVS     r1,#0xa
000a3e  48be              LDR      r0,|L1.3384|
000a40  f7fffffe          BL       uart_putchar
000a44  210a              MOVS     r1,#0xa
000a46  48bc              LDR      r0,|L1.3384|
000a48  f7fffffe          BL       uart_putchar
000a4c  210a              MOVS     r1,#0xa
000a4e  48ba              LDR      r0,|L1.3384|
000a50  f7fffffe          BL       uart_putchar
000a54  210a              MOVS     r1,#0xa
000a56  48b8              LDR      r0,|L1.3384|
000a58  f7fffffe          BL       uart_putchar
000a5c  210a              MOVS     r1,#0xa
000a5e  48b6              LDR      r0,|L1.3384|
000a60  f7fffffe          BL       uart_putchar
000a64  210a              MOVS     r1,#0xa
000a66  48b4              LDR      r0,|L1.3384|
000a68  f7fffffe          BL       uart_putchar
000a6c  210a              MOVS     r1,#0xa
000a6e  48b2              LDR      r0,|L1.3384|
000a70  f7fffffe          BL       uart_putchar
;;;183    									//memset(data,0,1000);
;;;184    														//timer counts to wait for characters in uart 1 									
;;;185    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000a74  bf00              NOP      
                  |L1.2678|
000a76  a1b1              ADR      r1,|L1.3388|
000a78  48b2              LDR      r0,|L1.3396|
000a7a  f7fffffe          BL       strstr
000a7e  2800              CMP      r0,#0
000a80  d109              BNE      |L1.2710|
000a82  49b1              LDR      r1,|L1.3400|
000a84  48af              LDR      r0,|L1.3396|
000a86  f7fffffe          BL       strstr
000a8a  2800              CMP      r0,#0
000a8c  d103              BNE      |L1.2710|
000a8e  48af              LDR      r0,|L1.3404|
000a90  6800              LDR      r0,[r0,#0]  ; tout
000a92  2805              CMP      r0,#5
000a94  ddef              BLE      |L1.2678|
                  |L1.2710|
;;;186    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;187    									}
;;;188    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000a96  f7fffffe          BL       clear
;;;189    									//clear();
;;;190    									memset(data,0,strlen(data));
000a9a  48ad              LDR      r0,|L1.3408|
000a9c  f7fffffe          BL       strlen
000aa0  4604              MOV      r4,r0
000aa2  4621              MOV      r1,r4
000aa4  48aa              LDR      r0,|L1.3408|
000aa6  f7fffffe          BL       __aeabi_memclr
;;;191    									clear();
000aaa  f7fffffe          BL       clear
;;;192    
;;;193    								
;;;194    	
;;;195    	//log_it();		                         //logging
;;;196    		memset(data,0,strlen(data));	
000aae  48a8              LDR      r0,|L1.3408|
000ab0  f7fffffe          BL       strlen
000ab4  4604              MOV      r4,r0
000ab6  4621              MOV      r1,r4
000ab8  48a5              LDR      r0,|L1.3408|
000aba  f7fffffe          BL       __aeabi_memclr
;;;197    
;;;198    					   	if(flagch!=1){
000abe  48a5              LDR      r0,|L1.3412|
000ac0  6800              LDR      r0,[r0,#0]  ; flagch
000ac2  2801              CMP      r0,#1
000ac4  d009              BEQ      |L1.2778|
;;;199    							temp=int_erval;				
000ac6  48a4              LDR      r0,|L1.3416|
000ac8  6800              LDR      r0,[r0,#0]  ; int_erval
000aca  49a4              LDR      r1,|L1.3420|
000acc  6008              STR      r0,[r1,#0]  ; temp
;;;200    							int_erval=4;
000ace  2004              MOVS     r0,#4
000ad0  49a1              LDR      r1,|L1.3416|
000ad2  6008              STR      r0,[r1,#0]  ; int_erval
;;;201    							flagch=1;}
000ad4  2001              MOVS     r0,#1
000ad6  499f              LDR      r1,|L1.3412|
000ad8  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.2778|
;;;202    							clear();	
000ada  f7fffffe          BL       clear
;;;203    									GPS_COLLECT();
000ade  f7fffffe          BL       GPS_COLLECT
;;;204    									strcat(data,"CH\n");	
000ae2  4999              LDR      r1,|L1.3400|
000ae4  3130              ADDS     r1,r1,#0x30
000ae6  489a              LDR      r0,|L1.3408|
000ae8  f7fffffe          BL       strcat
;;;205    
;;;206    //*********************************tcp_initialization();//reinitialization*************************************//
;;;207    
;;;208    	
;;;209    msg_sim800(); 
000aec  f7fffffe          BL       msg_sim800
;;;210    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
000af0  2005              MOVS     r0,#5
000af2  4b95              LDR      r3,|L1.3400|
000af4  461a              MOV      r2,r3
000af6  3260              ADDS     r2,r2,#0x60
000af8  a199              ADR      r1,|L1.3424|
000afa  9000              STR      r0,[sp,#0]
000afc  a099              ADR      r0,|L1.3428|
000afe  f7fffffe          BL       send_GSM
;;;211    delay(100);
000b02  2064              MOVS     r0,#0x64
000b04  f7fffffe          BL       delay
;;;212    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
000b08  2004              MOVS     r0,#4
000b0a  4b8f              LDR      r3,|L1.3400|
000b0c  a299              ADR      r2,|L1.3444|
000b0e  a194              ADR      r1,|L1.3424|
000b10  9000              STR      r0,[sp,#0]
000b12  a09d              ADR      r0,|L1.3464|
000b14  f7fffffe          BL       send_GSM
;;;213    GPS_COLLECT2();
000b18  f7fffffe          BL       GPS_COLLECT2
;;;214    strcat(data,"CH\n");		
000b1c  498a              LDR      r1,|L1.3400|
000b1e  3130              ADDS     r1,r1,#0x30
000b20  488b              LDR      r0,|L1.3408|
000b22  f7fffffe          BL       strcat
;;;215    GPS_COLLECT2();
000b26  f7fffffe          BL       GPS_COLLECT2
;;;216    strcat(data,"CH\n");	
000b2a  4987              LDR      r1,|L1.3400|
000b2c  3130              ADDS     r1,r1,#0x30
000b2e  4888              LDR      r0,|L1.3408|
000b30  f7fffffe          BL       strcat
;;;217    GPS_COLLECT2();
000b34  f7fffffe          BL       GPS_COLLECT2
;;;218    strcat(data,"CH\n");
000b38  4983              LDR      r1,|L1.3400|
000b3a  3130              ADDS     r1,r1,#0x30
000b3c  4884              LDR      r0,|L1.3408|
000b3e  f7fffffe          BL       strcat
;;;219    cond201=(strstr(uart_string_gsm, "OK"));
000b42  a187              ADR      r1,|L1.3424|
000b44  487f              LDR      r0,|L1.3396|
000b46  f7fffffe          BL       strstr
000b4a  4993              LDR      r1,|L1.3480|
000b4c  6008              STR      r0,[r1,#0]  ; cond201
;;;220    cond200=(strstr(uart_string_gsm, "ERROR"));
000b4e  497e              LDR      r1,|L1.3400|
000b50  487c              LDR      r0,|L1.3396|
000b52  f7fffffe          BL       strstr
000b56  4991              LDR      r1,|L1.3484|
000b58  6008              STR      r0,[r1,#0]  ; cond200
;;;221    if((!(cond201|| cond200 ))  && sleep_flag != 1)
000b5a  488f              LDR      r0,|L1.3480|
000b5c  6800              LDR      r0,[r0,#0]  ; cond201
000b5e  2800              CMP      r0,#0
                  |L1.2912|
000b60  d17e              BNE      |L1.3168|
000b62  4608              MOV      r0,r1
000b64  6800              LDR      r0,[r0,#0]  ; cond200
000b66  2800              CMP      r0,#0
000b68  d1fa              BNE      |L1.2912|
000b6a  488d              LDR      r0,|L1.3488|
000b6c  6800              LDR      r0,[r0,#0]  ; sleep_flag
000b6e  2801              CMP      r0,#1
000b70  d076              BEQ      |L1.3168|
;;;222    {
;;;223    delay(100);
000b72  2064              MOVS     r0,#0x64
000b74  f7fffffe          BL       delay
;;;224    clear();//memset(uart_string_gsm,0,5000);
000b78  f7fffffe          BL       clear
;;;225    memset(at_,0,100);
000b7c  2164              MOVS     r1,#0x64
000b7e  4889              LDR      r0,|L1.3492|
000b80  f7fffffe          BL       __aeabi_memclr
;;;226    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000b84  4872              LDR      r0,|L1.3408|
000b86  f7fffffe          BL       strlen
000b8a  1c44              ADDS     r4,r0,#1
000b8c  4623              MOV      r3,r4
000b8e  4a86              LDR      r2,|L1.3496|
000b90  496d              LDR      r1,|L1.3400|
000b92  313c              ADDS     r1,r1,#0x3c
000b94  4883              LDR      r0,|L1.3492|
000b96  f7fffffe          BL       __2sprintf
;;;227    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000b9a  2005              MOVS     r0,#5
000b9c  4b6a              LDR      r3,|L1.3400|
000b9e  461a              MOV      r2,r3
000ba0  3260              ADDS     r2,r2,#0x60
000ba2  a182              ADR      r1,|L1.3500|
000ba4  9000              STR      r0,[sp,#0]
000ba6  487f              LDR      r0,|L1.3492|
000ba8  f7fffffe          BL       send_SD
;;;228    clear();	
000bac  f7fffffe          BL       clear
;;;229    k2=0;									//string array counter for uart 1
000bb0  2000              MOVS     r0,#0
000bb2  497f              LDR      r1,|L1.3504|
000bb4  6008              STR      r0,[r1,#0]  ; k2
;;;230    tout=0;	
000bb6  4965              LDR      r1,|L1.3404|
000bb8  6008              STR      r0,[r1,#0]  ; tout
;;;231    for(k=0;k<strlen(data);k++)
000bba  497e              LDR      r1,|L1.3508|
000bbc  6008              STR      r0,[r1,#0]  ; k
000bbe  e00b              B        |L1.3032|
                  |L1.3008|
;;;232    {
;;;233    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000bc0  4863              LDR      r0,|L1.3408|
000bc2  4a7c              LDR      r2,|L1.3508|
000bc4  6812              LDR      r2,[r2,#0]  ; k
000bc6  5c81              LDRB     r1,[r0,r2]
000bc8  485b              LDR      r0,|L1.3384|
000bca  f7fffffe          BL       uart_putchar
000bce  4879              LDR      r0,|L1.3508|
000bd0  6800              LDR      r0,[r0,#0]            ;231  ; k
000bd2  1c40              ADDS     r0,r0,#1              ;231
000bd4  4977              LDR      r1,|L1.3508|
000bd6  6008              STR      r0,[r1,#0]            ;231  ; k
                  |L1.3032|
000bd8  485d              LDR      r0,|L1.3408|
000bda  f7fffffe          BL       strlen
000bde  4975              LDR      r1,|L1.3508|
000be0  6809              LDR      r1,[r1,#0]            ;231  ; k
000be2  4288              CMP      r0,r1                 ;231
000be4  d8ec              BHI      |L1.3008|
;;;234    }	
;;;235    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000be6  210a              MOVS     r1,#0xa
000be8  4853              LDR      r0,|L1.3384|
000bea  f7fffffe          BL       uart_putchar
000bee  210a              MOVS     r1,#0xa
000bf0  4851              LDR      r0,|L1.3384|
000bf2  f7fffffe          BL       uart_putchar
000bf6  210a              MOVS     r1,#0xa
000bf8  484f              LDR      r0,|L1.3384|
000bfa  f7fffffe          BL       uart_putchar
000bfe  210a              MOVS     r1,#0xa
000c00  484d              LDR      r0,|L1.3384|
000c02  f7fffffe          BL       uart_putchar
000c06  210a              MOVS     r1,#0xa
000c08  484b              LDR      r0,|L1.3384|
000c0a  f7fffffe          BL       uart_putchar
000c0e  210a              MOVS     r1,#0xa
000c10  4849              LDR      r0,|L1.3384|
000c12  f7fffffe          BL       uart_putchar
000c16  210a              MOVS     r1,#0xa
000c18  4847              LDR      r0,|L1.3384|
000c1a  f7fffffe          BL       uart_putchar
000c1e  210a              MOVS     r1,#0xa
000c20  4845              LDR      r0,|L1.3384|
000c22  f7fffffe          BL       uart_putchar
000c26  210a              MOVS     r1,#0xa
000c28  4843              LDR      r0,|L1.3384|
000c2a  f7fffffe          BL       uart_putchar
000c2e  210a              MOVS     r1,#0xa
000c30  4841              LDR      r0,|L1.3384|
000c32  f7fffffe          BL       uart_putchar
000c36  210a              MOVS     r1,#0xa
000c38  483f              LDR      r0,|L1.3384|
000c3a  f7fffffe          BL       uart_putchar
000c3e  210a              MOVS     r1,#0xa
000c40  483d              LDR      r0,|L1.3384|
000c42  f7fffffe          BL       uart_putchar
000c46  210a              MOVS     r1,#0xa
000c48  483b              LDR      r0,|L1.3384|
000c4a  f7fffffe          BL       uart_putchar
000c4e  210a              MOVS     r1,#0xa
000c50  4839              LDR      r0,|L1.3384|
000c52  f7fffffe          BL       uart_putchar
000c56  210a              MOVS     r1,#0xa
000c58  4837              LDR      r0,|L1.3384|
000c5a  f7fffffe          BL       uart_putchar
000c5e  e000              B        |L1.3170|
                  |L1.3168|
000c60  e111              B        |L1.3718|
                  |L1.3170|
000c62  210a              MOVS     r1,#0xa
000c64  4834              LDR      r0,|L1.3384|
000c66  f7fffffe          BL       uart_putchar
000c6a  210a              MOVS     r1,#0xa
000c6c  4832              LDR      r0,|L1.3384|
000c6e  f7fffffe          BL       uart_putchar
000c72  210a              MOVS     r1,#0xa
000c74  4830              LDR      r0,|L1.3384|
000c76  f7fffffe          BL       uart_putchar
000c7a  210a              MOVS     r1,#0xa
000c7c  482e              LDR      r0,|L1.3384|
000c7e  f7fffffe          BL       uart_putchar
000c82  210a              MOVS     r1,#0xa
000c84  482c              LDR      r0,|L1.3384|
000c86  f7fffffe          BL       uart_putchar
000c8a  210a              MOVS     r1,#0xa
000c8c  482a              LDR      r0,|L1.3384|
000c8e  f7fffffe          BL       uart_putchar
000c92  210a              MOVS     r1,#0xa
000c94  4828              LDR      r0,|L1.3384|
000c96  f7fffffe          BL       uart_putchar
000c9a  210a              MOVS     r1,#0xa
000c9c  4826              LDR      r0,|L1.3384|
000c9e  f7fffffe          BL       uart_putchar
000ca2  210a              MOVS     r1,#0xa
000ca4  4824              LDR      r0,|L1.3384|
000ca6  f7fffffe          BL       uart_putchar
000caa  210a              MOVS     r1,#0xa
000cac  4822              LDR      r0,|L1.3384|
000cae  f7fffffe          BL       uart_putchar
000cb2  210a              MOVS     r1,#0xa
000cb4  4820              LDR      r0,|L1.3384|
000cb6  f7fffffe          BL       uart_putchar
000cba  210a              MOVS     r1,#0xa
000cbc  481e              LDR      r0,|L1.3384|
000cbe  f7fffffe          BL       uart_putchar
000cc2  210a              MOVS     r1,#0xa
000cc4  481c              LDR      r0,|L1.3384|
000cc6  f7fffffe          BL       uart_putchar
000cca  210a              MOVS     r1,#0xa
000ccc  481a              LDR      r0,|L1.3384|
000cce  f7fffffe          BL       uart_putchar
000cd2  210a              MOVS     r1,#0xa
000cd4  4818              LDR      r0,|L1.3384|
000cd6  f7fffffe          BL       uart_putchar
000cda  210a              MOVS     r1,#0xa
000cdc  4816              LDR      r0,|L1.3384|
000cde  f7fffffe          BL       uart_putchar
000ce2  210a              MOVS     r1,#0xa
000ce4  4814              LDR      r0,|L1.3384|
000ce6  f7fffffe          BL       uart_putchar
000cea  210a              MOVS     r1,#0xa
000cec  4812              LDR      r0,|L1.3384|
000cee  f7fffffe          BL       uart_putchar
000cf2  210a              MOVS     r1,#0xa
000cf4  4810              LDR      r0,|L1.3384|
000cf6  f7fffffe          BL       uart_putchar
000cfa  210a              MOVS     r1,#0xa
000cfc  480e              LDR      r0,|L1.3384|
000cfe  f7fffffe          BL       uart_putchar
000d02  210a              MOVS     r1,#0xa
000d04  480c              LDR      r0,|L1.3384|
000d06  f7fffffe          BL       uart_putchar
000d0a  210a              MOVS     r1,#0xa
000d0c  480a              LDR      r0,|L1.3384|
000d0e  f7fffffe          BL       uart_putchar
000d12  210a              MOVS     r1,#0xa
000d14  4808              LDR      r0,|L1.3384|
000d16  f7fffffe          BL       uart_putchar
000d1a  210a              MOVS     r1,#0xa
000d1c  4806              LDR      r0,|L1.3384|
000d1e  f7fffffe          BL       uart_putchar
000d22  210a              MOVS     r1,#0xa
000d24  4804              LDR      r0,|L1.3384|
000d26  f7fffffe          BL       uart_putchar
000d2a  210a              MOVS     r1,#0xa
000d2c  4802              LDR      r0,|L1.3384|
000d2e  f7fffffe          BL       uart_putchar
000d32  210a              MOVS     r1,#0xa
000d34  4800              LDR      r0,|L1.3384|
000d36  e03f              B        |L1.3512|
                  |L1.3384|
                          DCD      0x4006b000
                  |L1.3388|
000d3c  4f4b0d0a          DCB      "OK\r\n",0
000d40  00      
000d41  00                DCB      0
000d42  00                DCB      0
000d43  00                DCB      0
                  |L1.3396|
                          DCD      uart_string_gsm
                  |L1.3400|
                          DCD      ||.text||+0x8cc
                  |L1.3404|
                          DCD      tout
                  |L1.3408|
                          DCD      data
                  |L1.3412|
                          DCD      flagch
                  |L1.3416|
                          DCD      int_erval
                  |L1.3420|
                          DCD      temp
                  |L1.3424|
000d60  4f4b00            DCB      "OK",0
000d63  00                DCB      0
                  |L1.3428|
000d64  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
000d68  2b434655
000d6c  4e3d300d
000d70  0d0a0a00
                  |L1.3444|
000d74  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
000d78  494e5345
000d7c  52544544
000d80  0d0a4f4b
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L1.3464|
000d88  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000d8c  2b434655
000d90  4e3d310d
000d94  0a00    
000d96  00                DCB      0
000d97  00                DCB      0
                  |L1.3480|
                          DCD      cond201
                  |L1.3484|
                          DCD      cond200
                  |L1.3488|
                          DCD      sleep_flag
                  |L1.3492|
                          DCD      at_
                  |L1.3496|
                          DCD      drive
                  |L1.3500|
000dac  3e00              DCB      ">",0
000dae  00                DCB      0
000daf  00                DCB      0
                  |L1.3504|
                          DCD      ||k2||
                  |L1.3508|
                          DCD      k
                  |L1.3512|
000db8  f7fffffe          BL       uart_putchar
000dbc  210a              MOVS     r1,#0xa
000dbe  48fe              LDR      r0,|L1.4536|
000dc0  f7fffffe          BL       uart_putchar
000dc4  210a              MOVS     r1,#0xa
000dc6  48fc              LDR      r0,|L1.4536|
000dc8  f7fffffe          BL       uart_putchar
000dcc  210a              MOVS     r1,#0xa
000dce  48fa              LDR      r0,|L1.4536|
000dd0  f7fffffe          BL       uart_putchar
000dd4  210a              MOVS     r1,#0xa
000dd6  48f8              LDR      r0,|L1.4536|
000dd8  f7fffffe          BL       uart_putchar
000ddc  210a              MOVS     r1,#0xa
000dde  48f6              LDR      r0,|L1.4536|
000de0  f7fffffe          BL       uart_putchar
000de4  210a              MOVS     r1,#0xa
000de6  48f4              LDR      r0,|L1.4536|
000de8  f7fffffe          BL       uart_putchar
000dec  210a              MOVS     r1,#0xa
000dee  48f2              LDR      r0,|L1.4536|
000df0  f7fffffe          BL       uart_putchar
000df4  210a              MOVS     r1,#0xa
000df6  48f0              LDR      r0,|L1.4536|
000df8  f7fffffe          BL       uart_putchar
000dfc  210a              MOVS     r1,#0xa
000dfe  48ee              LDR      r0,|L1.4536|
000e00  f7fffffe          BL       uart_putchar
000e04  210a              MOVS     r1,#0xa
000e06  48ec              LDR      r0,|L1.4536|
000e08  f7fffffe          BL       uart_putchar
000e0c  210a              MOVS     r1,#0xa
000e0e  48ea              LDR      r0,|L1.4536|
000e10  f7fffffe          BL       uart_putchar
000e14  210a              MOVS     r1,#0xa
000e16  48e8              LDR      r0,|L1.4536|
000e18  f7fffffe          BL       uart_putchar
000e1c  210a              MOVS     r1,#0xa
000e1e  48e6              LDR      r0,|L1.4536|
000e20  f7fffffe          BL       uart_putchar
000e24  210a              MOVS     r1,#0xa
000e26  48e4              LDR      r0,|L1.4536|
000e28  f7fffffe          BL       uart_putchar
000e2c  210a              MOVS     r1,#0xa
000e2e  48e2              LDR      r0,|L1.4536|
000e30  f7fffffe          BL       uart_putchar
;;;236    									//memset(data,0,1000);
;;;237    														//timer counts to wait for characters in uart 1 									
;;;238    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000e34  bf00              NOP      
                  |L1.3638|
000e36  49e1              LDR      r1,|L1.4540|
000e38  48e1              LDR      r0,|L1.4544|
000e3a  f7fffffe          BL       strstr
000e3e  2800              CMP      r0,#0
000e40  d109              BNE      |L1.3670|
000e42  49e0              LDR      r1,|L1.4548|
000e44  48de              LDR      r0,|L1.4544|
000e46  f7fffffe          BL       strstr
000e4a  2800              CMP      r0,#0
000e4c  d103              BNE      |L1.3670|
000e4e  48de              LDR      r0,|L1.4552|
000e50  6800              LDR      r0,[r0,#0]  ; tout
000e52  2805              CMP      r0,#5
000e54  ddef              BLE      |L1.3638|
                  |L1.3670|
;;;239    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;240    									}
;;;241    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000e56  f7fffffe          BL       clear
;;;242    									//clear();
;;;243    									memset(data,0,strlen(data));
000e5a  48dc              LDR      r0,|L1.4556|
000e5c  f7fffffe          BL       strlen
000e60  4604              MOV      r4,r0
000e62  4621              MOV      r1,r4
000e64  48d9              LDR      r0,|L1.4556|
000e66  f7fffffe          BL       __aeabi_memclr
;;;244    									clear();
000e6a  f7fffffe          BL       clear
;;;245    									RESET_OFF;delay(100);
000e6e  2020              MOVS     r0,#0x20
000e70  49d7              LDR      r1,|L1.4560|
000e72  6088              STR      r0,[r1,#8]
000e74  2064              MOVS     r0,#0x64
000e76  f7fffffe          BL       delay
;;;246    									RESET_ON;delay(100);		
000e7a  2020              MOVS     r0,#0x20
000e7c  49d4              LDR      r1,|L1.4560|
000e7e  6048              STR      r0,[r1,#4]
000e80  2064              MOVS     r0,#0x64
000e82  f7fffffe          BL       delay
                  |L1.3718|
;;;247    }
;;;248    	
;;;249    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000e86  2004              MOVS     r0,#4
000e88  a3d2              ADR      r3,|L1.4564|
000e8a  4ace              LDR      r2,|L1.4548|
000e8c  3260              ADDS     r2,r2,#0x60
000e8e  a1d3              ADR      r1,|L1.4572|
000e90  9000              STR      r0,[sp,#0]
000e92  a0d3              ADR      r0,|L1.4576|
000e94  f7fffffe          BL       send_GSM
;;;250    GPS_COLLECT2();
000e98  f7fffffe          BL       GPS_COLLECT2
;;;251    strcat(data,"CH\n");	
000e9c  49c9              LDR      r1,|L1.4548|
000e9e  3130              ADDS     r1,r1,#0x30
000ea0  48ca              LDR      r0,|L1.4556|
000ea2  f7fffffe          BL       strcat
;;;252    memset(at_,0,100);
000ea6  2164              MOVS     r1,#0x64
000ea8  48d1              LDR      r0,|L1.4592|
000eaa  f7fffffe          BL       __aeabi_memclr
;;;253    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000eae  4ad1              LDR      r2,|L1.4596|
000eb0  a1d1              ADR      r1,|L1.4600|
000eb2  48cf              LDR      r0,|L1.4592|
000eb4  f7fffffe          BL       __2sprintf
;;;254    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000eb8  48d4              LDR      r0,|L1.4620|
000eba  6800              LDR      r0,[r0,#0]  ; tmeout
000ebc  a3c5              ADR      r3,|L1.4564|
000ebe  4ac1              LDR      r2,|L1.4548|
000ec0  3260              ADDS     r2,r2,#0x60
000ec2  a1c6              ADR      r1,|L1.4572|
000ec4  9000              STR      r0,[sp,#0]
000ec6  48ca              LDR      r0,|L1.4592|
000ec8  f7fffffe          BL       send_GSM
;;;255    msg_sim800(); 
000ecc  f7fffffe          BL       msg_sim800
;;;256    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000ed0  2004              MOVS     r0,#4
000ed2  4bbc              LDR      r3,|L1.4548|
000ed4  3318              ADDS     r3,r3,#0x18
000ed6  461a              MOV      r2,r3
000ed8  3248              ADDS     r2,r2,#0x48
000eda  a1c0              ADR      r1,|L1.4572|
000edc  9000              STR      r0,[sp,#0]
000ede  a0cc              ADR      r0,|L1.4624|
000ee0  f7fffffe          BL       send_GSM
;;;257    GPS_COLLECT2();
000ee4  f7fffffe          BL       GPS_COLLECT2
;;;258    strcat(data,"CH\n");	
000ee8  49b6              LDR      r1,|L1.4548|
000eea  3130              ADDS     r1,r1,#0x30
000eec  48b7              LDR      r0,|L1.4556|
000eee  f7fffffe          BL       strcat
;;;259    GPS_COLLECT2();
000ef2  f7fffffe          BL       GPS_COLLECT2
;;;260    strcat(data,"CH\n");	
000ef6  49b3              LDR      r1,|L1.4548|
000ef8  3130              ADDS     r1,r1,#0x30
000efa  48b4              LDR      r0,|L1.4556|
000efc  f7fffffe          BL       strcat
;;;261    
;;;262    
;;;263    msg_sim800(); 
000f00  f7fffffe          BL       msg_sim800
;;;264    GPS_COLLECT2();
000f04  f7fffffe          BL       GPS_COLLECT2
;;;265    strcat(data,"CH\n");	
000f08  49ae              LDR      r1,|L1.4548|
000f0a  3130              ADDS     r1,r1,#0x30
000f0c  48af              LDR      r0,|L1.4556|
000f0e  f7fffffe          BL       strcat
;;;266    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000f12  f7fffffe          BL       clear
000f16  a0c2              ADR      r0,|L1.4640|
000f18  f7fffffe          BL       send_modem
000f1c  f7fffffe          BL       clear
;;;267    					delay(20);
000f20  2014              MOVS     r0,#0x14
000f22  f7fffffe          BL       delay
;;;268    
;;;269    
;;;270    msg_sim800(); 
000f26  f7fffffe          BL       msg_sim800
;;;271    
;;;272    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000f2a  4bc1              LDR      r3,|L1.4656|
000f2c  4ac1              LDR      r2,|L1.4660|
000f2e  a1c2              ADR      r1,|L1.4664|
000f30  48af              LDR      r0,|L1.4592|
000f32  f7fffffe          BL       __2sprintf
;;;273    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000f36  48b5              LDR      r0,|L1.4620|
000f38  6800              LDR      r0,[r0,#0]  ; tmeout
000f3a  a3a6              ADR      r3,|L1.4564|
000f3c  4aa1              LDR      r2,|L1.4548|
000f3e  a1c6              ADR      r1,|L1.4696|
000f40  9000              STR      r0,[sp,#0]
000f42  48ab              LDR      r0,|L1.4592|
000f44  f7fffffe          BL       send_GSM
;;;274    						clear();
000f48  f7fffffe          BL       clear
;;;275    						
;;;276    						
;;;277    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
000f4c  48af              LDR      r0,|L1.4620|
000f4e  6800              LDR      r0,[r0,#0]  ; tmeout
000f50  a3c3              ADR      r3,|L1.4704|
000f52  4a9c              LDR      r2,|L1.4548|
000f54  a1c6              ADR      r1,|L1.4720|
000f56  9000              STR      r0,[sp,#0]
000f58  a0c6              ADR      r0,|L1.4724|
000f5a  f7fffffe          BL       send_GSM
;;;278    //*********************************tcp_initialization_ends*****************************************************//							
;;;279    									
;;;280    						clear();		
000f5e  f7fffffe          BL       clear
;;;281    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
000f62  213e              MOVS     r1,#0x3e
000f64  4896              LDR      r0,|L1.4544|
000f66  f7fffffe          BL       mystrstr
000f6a  49c6              LDR      r1,|L1.4740|
000f6c  7008              STRB     r0,[r1,#0]
;;;282    								if(cond)	
000f6e  4608              MOV      r0,r1
000f70  7800              LDRB     r0,[r0,#0]  ; cond
000f72  2800              CMP      r0,#0
000f74  d07e              BEQ      |L1.4212|
;;;283    								{	
;;;284    
;;;285    									clear();
000f76  f7fffffe          BL       clear
;;;286    									memset(uart_string_gsm,0,5000);
000f7a  49c3              LDR      r1,|L1.4744|
000f7c  4890              LDR      r0,|L1.4544|
000f7e  f7fffffe          BL       __aeabi_memclr
;;;287    									strcat(data,"\n");
000f82  a1a6              ADR      r1,|L1.4636|
000f84  4891              LDR      r0,|L1.4556|
000f86  f7fffffe          BL       strcat
;;;288    									len=strlen(data);
000f8a  4890              LDR      r0,|L1.4556|
000f8c  f7fffffe          BL       strlen
000f90  49be              LDR      r1,|L1.4748|
000f92  6008              STR      r0,[r1,#0]  ; len
;;;289    									tout=0;
000f94  2000              MOVS     r0,#0
000f96  498c              LDR      r1,|L1.4552|
000f98  6008              STR      r0,[r1,#0]  ; tout
;;;290    									k2=0;
000f9a  49bd              LDR      r1,|L1.4752|
000f9c  6008              STR      r0,[r1,#0]  ; k2
;;;291    									for(k=0;k<len;k++)
000f9e  49bd              LDR      r1,|L1.4756|
000fa0  6008              STR      r0,[r1,#0]  ; k
000fa2  e00b              B        |L1.4028|
                  |L1.4004|
;;;292    									{
;;;293    										uart_putchar(UART1_BASE_PTR, data[k]);
000fa4  4889              LDR      r0,|L1.4556|
000fa6  4abb              LDR      r2,|L1.4756|
000fa8  6812              LDR      r2,[r2,#0]  ; k
000faa  5c81              LDRB     r1,[r0,r2]
000fac  4882              LDR      r0,|L1.4536|
000fae  f7fffffe          BL       uart_putchar
000fb2  48b8              LDR      r0,|L1.4756|
000fb4  6800              LDR      r0,[r0,#0]            ;291  ; k
000fb6  1c40              ADDS     r0,r0,#1              ;291
000fb8  49b6              LDR      r1,|L1.4756|
000fba  6008              STR      r0,[r1,#0]            ;291  ; k
                  |L1.4028|
000fbc  48b5              LDR      r0,|L1.4756|
000fbe  6800              LDR      r0,[r0,#0]            ;291  ; k
000fc0  49b2              LDR      r1,|L1.4748|
000fc2  6809              LDR      r1,[r1,#0]            ;291  ; len
000fc4  4288              CMP      r0,r1                 ;291
000fc6  dbed              BLT      |L1.4004|
;;;294    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000fc8  210a              MOVS     r1,#0xa
000fca  487b              LDR      r0,|L1.4536|
000fcc  f7fffffe          BL       uart_putchar
000fd0  211a              MOVS     r1,#0x1a
000fd2  4879              LDR      r0,|L1.4536|
000fd4  f7fffffe          BL       uart_putchar
000fd8  211a              MOVS     r1,#0x1a
000fda  4877              LDR      r0,|L1.4536|
000fdc  f7fffffe          BL       uart_putchar
000fe0  211a              MOVS     r1,#0x1a
000fe2  4875              LDR      r0,|L1.4536|
000fe4  f7fffffe          BL       uart_putchar
;;;295    									do
000fe8  bf00              NOP      
                  |L1.4074|
;;;296    																{stcond1=strstr(uart_string_gsm,"SEND OK");
000fea  4976              LDR      r1,|L1.4548|
000fec  3908              SUBS     r1,r1,#8
000fee  4874              LDR      r0,|L1.4544|
000ff0  f7fffffe          BL       strstr
000ff4  49a8              LDR      r1,|L1.4760|
000ff6  6008              STR      r0,[r1,#0]  ; stcond1
;;;297    																	stcond2=strstr(uart_string_gsm, "ERROR");
000ff8  4972              LDR      r1,|L1.4548|
000ffa  4871              LDR      r0,|L1.4544|
000ffc  f7fffffe          BL       strstr
001000  49a6              LDR      r1,|L1.4764|
001002  6008              STR      r0,[r1,#0]  ; stcond2
;;;298    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001004  a198              ADR      r1,|L1.4712|
001006  486e              LDR      r0,|L1.4544|
001008  f7fffffe          BL       strstr
00100c  49a4              LDR      r1,|L1.4768|
00100e  6008              STR      r0,[r1,#0]  ; stcond3
;;;299    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001010  496c              LDR      r1,|L1.4548|
001012  3118              ADDS     r1,r1,#0x18
001014  486a              LDR      r0,|L1.4544|
001016  f7fffffe          BL       strstr
00101a  49a2              LDR      r1,|L1.4772|
00101c  6008              STR      r0,[r1,#0]  ; stcond4
;;;300    																	
;;;301    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
00101e  489f              LDR      r0,|L1.4764|
001020  6800              LDR      r0,[r0,#0]  ; stcond2
001022  2800              CMP      r0,#0
001024  d10f              BNE      |L1.4166|
001026  489e              LDR      r0,|L1.4768|
001028  6800              LDR      r0,[r0,#0]  ; stcond3
00102a  2800              CMP      r0,#0
00102c  d10b              BNE      |L1.4166|
00102e  4608              MOV      r0,r1
001030  6800              LDR      r0,[r0,#0]  ; stcond4
001032  2800              CMP      r0,#0
001034  d107              BNE      |L1.4166|
001036  4898              LDR      r0,|L1.4760|
001038  6800              LDR      r0,[r0,#0]  ; stcond1
00103a  2800              CMP      r0,#0
00103c  d103              BNE      |L1.4166|
00103e  4862              LDR      r0,|L1.4552|
001040  6800              LDR      r0,[r0,#0]  ; tout
001042  2804              CMP      r0,#4
001044  ddd1              BLE      |L1.4074|
                  |L1.4166|
;;;302    															//	delay(10);clear();
;;;303    														uart_putchar(UART1_BASE_PTR,0x1A);
001046  211a              MOVS     r1,#0x1a
001048  485b              LDR      r0,|L1.4536|
00104a  f7fffffe          BL       uart_putchar
;;;304    											//	delay(10);
;;;305    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00104e  211a              MOVS     r1,#0x1a
001050  4859              LDR      r0,|L1.4536|
001052  f7fffffe          BL       uart_putchar
001056  211a              MOVS     r1,#0x1a
001058  4857              LDR      r0,|L1.4536|
00105a  f7fffffe          BL       uart_putchar
00105e  211a              MOVS     r1,#0x1a
001060  4855              LDR      r0,|L1.4536|
001062  f7fffffe          BL       uart_putchar
;;;306    						
;;;307    
;;;308    
;;;309    									
;;;310    															
;;;311    															
;;;312    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;313    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;314    															
;;;315    														//qwe=strlen(uart_string_gsm);
;;;316    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;317    															delay(20);
001066  2014              MOVS     r0,#0x14
001068  f7fffffe          BL       delay
;;;318    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
00106c  4955              LDR      r1,|L1.4548|
00106e  3908              SUBS     r1,r1,#8
001070  4853              LDR      r0,|L1.4544|
001072  e000              B        |L1.4214|
                  |L1.4212|
001074  e1c5              B        |L1.5122|
                  |L1.4214|
001076  f7fffffe          BL       strstr
00107a  498b              LDR      r1,|L1.4776|
00107c  6008              STR      r0,[r1,#0]  ; con1d
;;;319    																if(!con1d)
00107e  4608              MOV      r0,r1
001080  6800              LDR      r0,[r0,#0]  ; con1d
001082  2800              CMP      r0,#0
001084  d17e              BNE      |L1.4484|
;;;320    																{
;;;321    																	
;;;322    																	
;;;323    																	
;;;324    																	
;;;325    																	
;;;326    	delay(100);
001086  2064              MOVS     r0,#0x64
001088  f7fffffe          BL       delay
;;;327    		clear();//memset(uart_string_gsm,0,5000);
00108c  f7fffffe          BL       clear
;;;328    	
;;;329    	memset(at_,0,100);
001090  2164              MOVS     r1,#0x64
001092  4857              LDR      r0,|L1.4592|
001094  f7fffffe          BL       __aeabi_memclr
;;;330    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001098  484c              LDR      r0,|L1.4556|
00109a  f7fffffe          BL       strlen
00109e  1c44              ADDS     r4,r0,#1
0010a0  4623              MOV      r3,r4
0010a2  4a82              LDR      r2,|L1.4780|
0010a4  4947              LDR      r1,|L1.4548|
0010a6  313c              ADDS     r1,r1,#0x3c
0010a8  4851              LDR      r0,|L1.4592|
0010aa  f7fffffe          BL       __2sprintf
;;;331    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0010ae  2005              MOVS     r0,#5
0010b0  4b44              LDR      r3,|L1.4548|
0010b2  461a              MOV      r2,r3
0010b4  3260              ADDS     r2,r2,#0x60
0010b6  a16e              ADR      r1,|L1.4720|
0010b8  9000              STR      r0,[sp,#0]
0010ba  484d              LDR      r0,|L1.4592|
0010bc  f7fffffe          BL       send_SD
;;;332    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;333    //	if(strstr(uart_string_gsm,"ERROR")){
;;;334    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;335    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;336    //	}
;;;337    	
;;;338    clear();	
0010c0  f7fffffe          BL       clear
;;;339    									k2=0;									//string array counter for uart 1
0010c4  2000              MOVS     r0,#0
0010c6  4972              LDR      r1,|L1.4752|
0010c8  6008              STR      r0,[r1,#0]  ; k2
;;;340    									tout=0;	
0010ca  493f              LDR      r1,|L1.4552|
0010cc  6008              STR      r0,[r1,#0]  ; tout
;;;341    		for(k=0;k<strlen(data);k++)
0010ce  4971              LDR      r1,|L1.4756|
0010d0  6008              STR      r0,[r1,#0]  ; k
0010d2  e00b              B        |L1.4332|
                  |L1.4308|
;;;342    		{
;;;343    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0010d4  483d              LDR      r0,|L1.4556|
0010d6  4a6f              LDR      r2,|L1.4756|
0010d8  6812              LDR      r2,[r2,#0]  ; k
0010da  5c81              LDRB     r1,[r0,r2]
0010dc  4836              LDR      r0,|L1.4536|
0010de  f7fffffe          BL       uart_putchar
0010e2  486c              LDR      r0,|L1.4756|
0010e4  6800              LDR      r0,[r0,#0]            ;341  ; k
0010e6  1c40              ADDS     r0,r0,#1              ;341
0010e8  496a              LDR      r1,|L1.4756|
0010ea  6008              STR      r0,[r1,#0]            ;341  ; k
                  |L1.4332|
0010ec  4837              LDR      r0,|L1.4556|
0010ee  f7fffffe          BL       strlen
0010f2  4968              LDR      r1,|L1.4756|
0010f4  6809              LDR      r1,[r1,#0]            ;341  ; k
0010f6  4288              CMP      r0,r1                 ;341
0010f8  d8ec              BHI      |L1.4308|
;;;344    		}	
;;;345    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0010fa  210a              MOVS     r1,#0xa
0010fc  482e              LDR      r0,|L1.4536|
0010fe  f7fffffe          BL       uart_putchar
001102  210a              MOVS     r1,#0xa
001104  482c              LDR      r0,|L1.4536|
001106  f7fffffe          BL       uart_putchar
00110a  210a              MOVS     r1,#0xa
00110c  482a              LDR      r0,|L1.4536|
00110e  f7fffffe          BL       uart_putchar
001112  210a              MOVS     r1,#0xa
001114  4828              LDR      r0,|L1.4536|
001116  f7fffffe          BL       uart_putchar
00111a  210a              MOVS     r1,#0xa
00111c  4826              LDR      r0,|L1.4536|
00111e  f7fffffe          BL       uart_putchar
001122  210a              MOVS     r1,#0xa
001124  4824              LDR      r0,|L1.4536|
001126  f7fffffe          BL       uart_putchar
00112a  210a              MOVS     r1,#0xa
00112c  4822              LDR      r0,|L1.4536|
00112e  f7fffffe          BL       uart_putchar
001132  210a              MOVS     r1,#0xa
001134  4820              LDR      r0,|L1.4536|
001136  f7fffffe          BL       uart_putchar
00113a  210a              MOVS     r1,#0xa
00113c  481e              LDR      r0,|L1.4536|
00113e  f7fffffe          BL       uart_putchar
001142  210a              MOVS     r1,#0xa
001144  481c              LDR      r0,|L1.4536|
001146  f7fffffe          BL       uart_putchar
00114a  210a              MOVS     r1,#0xa
00114c  481a              LDR      r0,|L1.4536|
00114e  f7fffffe          BL       uart_putchar
001152  210a              MOVS     r1,#0xa
001154  4818              LDR      r0,|L1.4536|
001156  f7fffffe          BL       uart_putchar
00115a  210a              MOVS     r1,#0xa
00115c  4816              LDR      r0,|L1.4536|
00115e  f7fffffe          BL       uart_putchar
001162  210a              MOVS     r1,#0xa
001164  4814              LDR      r0,|L1.4536|
001166  f7fffffe          BL       uart_putchar
00116a  210a              MOVS     r1,#0xa
00116c  4812              LDR      r0,|L1.4536|
00116e  f7fffffe          BL       uart_putchar
001172  210a              MOVS     r1,#0xa
001174  4810              LDR      r0,|L1.4536|
001176  f7fffffe          BL       uart_putchar
00117a  210a              MOVS     r1,#0xa
00117c  480e              LDR      r0,|L1.4536|
00117e  f7fffffe          BL       uart_putchar
001182  e000              B        |L1.4486|
                  |L1.4484|
001184  e13a              B        |L1.5116|
                  |L1.4486|
001186  210a              MOVS     r1,#0xa
001188  480b              LDR      r0,|L1.4536|
00118a  f7fffffe          BL       uart_putchar
00118e  210a              MOVS     r1,#0xa
001190  4809              LDR      r0,|L1.4536|
001192  f7fffffe          BL       uart_putchar
001196  210a              MOVS     r1,#0xa
001198  4807              LDR      r0,|L1.4536|
00119a  f7fffffe          BL       uart_putchar
00119e  210a              MOVS     r1,#0xa
0011a0  4805              LDR      r0,|L1.4536|
0011a2  f7fffffe          BL       uart_putchar
0011a6  210a              MOVS     r1,#0xa
0011a8  4803              LDR      r0,|L1.4536|
0011aa  f7fffffe          BL       uart_putchar
0011ae  210a              MOVS     r1,#0xa
0011b0  4801              LDR      r0,|L1.4536|
0011b2  f7fffffe          BL       uart_putchar
0011b6  e07b              B        |L1.4784|
                  |L1.4536|
                          DCD      0x4006b000
                  |L1.4540|
                          DCD      ||.text||+0xd3c
                  |L1.4544|
                          DCD      uart_string_gsm
                  |L1.4548|
                          DCD      ||.text||+0x8cc
                  |L1.4552|
                          DCD      tout
                  |L1.4556|
                          DCD      data
                  |L1.4560|
                          DCD      0x400ff080
                  |L1.4564|
0011d4  4552524f          DCB      "ERROR:",0
0011d8  523a00  
0011db  00                DCB      0
                  |L1.4572|
0011dc  4f4b00            DCB      "OK",0
0011df  00                DCB      0
                  |L1.4576|
0011e0  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
0011e4  2b434950
0011e8  53485554
0011ec  0d0a00  
0011ef  00                DCB      0
                  |L1.4592|
                          DCD      at_
                  |L1.4596|
                          DCD      apn
                  |L1.4600|
0011f8  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
0011fc  2b435354
001200  543d2225
001204  73220d0a
001208  00      
001209  00                DCB      0
00120a  00                DCB      0
00120b  00                DCB      0
                  |L1.4620|
                          DCD      tmeout
                  |L1.4624|
001210  0d0a4154          DCB      "\r\nAT+CIICR\r\r"
001214  2b434949
001218  43520d0d
                  |L1.4636|
00121c  0a00              DCB      "\n",0
00121e  00                DCB      0
00121f  00                DCB      0
                  |L1.4640|
001220  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
001224  43494653
001228  520d0d0a
00122c  00      
00122d  00                DCB      0
00122e  00                DCB      0
00122f  00                DCB      0
                  |L1.4656|
                          DCD      port
                  |L1.4660|
                          DCD      ||ip||
                  |L1.4664|
001238  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
00123c  2b434950
001240  53544152
001244  543d2254
001248  4350222c
00124c  22257322
001250  2c222573
001254  220d0a00
                  |L1.4696|
001258  434f4e4e          DCB      "CONNECT",0
00125c  45435400
                  |L1.4704|
001260  434f4e4e          DCB      "CONNECT "
001264  45435420
                  |L1.4712|
001268  4641494c          DCB      "FAIL",0
00126c  00      
00126d  00                DCB      0
00126e  00                DCB      0
00126f  00                DCB      0
                  |L1.4720|
001270  3e00              DCB      ">",0
001272  00                DCB      0
001273  00                DCB      0
                  |L1.4724|
001274  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
001278  2b434950
00127c  53454e44
001280  0d0a00  
001283  00                DCB      0
                  |L1.4740|
                          DCD      cond
                  |L1.4744|
                          DCD      0x00001388
                  |L1.4748|
                          DCD      len
                  |L1.4752|
                          DCD      ||k2||
                  |L1.4756|
                          DCD      k
                  |L1.4760|
                          DCD      stcond1
                  |L1.4764|
                          DCD      stcond2
                  |L1.4768|
                          DCD      stcond3
                  |L1.4772|
                          DCD      stcond4
                  |L1.4776|
                          DCD      con1d
                  |L1.4780|
                          DCD      drive
                  |L1.4784|
0012b0  210a              MOVS     r1,#0xa
0012b2  48f9              LDR      r0,|L1.5784|
0012b4  f7fffffe          BL       uart_putchar
0012b8  210a              MOVS     r1,#0xa
0012ba  48f7              LDR      r0,|L1.5784|
0012bc  f7fffffe          BL       uart_putchar
0012c0  210a              MOVS     r1,#0xa
0012c2  48f5              LDR      r0,|L1.5784|
0012c4  f7fffffe          BL       uart_putchar
0012c8  210a              MOVS     r1,#0xa
0012ca  48f3              LDR      r0,|L1.5784|
0012cc  f7fffffe          BL       uart_putchar
0012d0  210a              MOVS     r1,#0xa
0012d2  48f1              LDR      r0,|L1.5784|
0012d4  f7fffffe          BL       uart_putchar
0012d8  210a              MOVS     r1,#0xa
0012da  48ef              LDR      r0,|L1.5784|
0012dc  f7fffffe          BL       uart_putchar
0012e0  210a              MOVS     r1,#0xa
0012e2  48ed              LDR      r0,|L1.5784|
0012e4  f7fffffe          BL       uart_putchar
0012e8  210a              MOVS     r1,#0xa
0012ea  48eb              LDR      r0,|L1.5784|
0012ec  f7fffffe          BL       uart_putchar
0012f0  210a              MOVS     r1,#0xa
0012f2  48e9              LDR      r0,|L1.5784|
0012f4  f7fffffe          BL       uart_putchar
0012f8  210a              MOVS     r1,#0xa
0012fa  48e7              LDR      r0,|L1.5784|
0012fc  f7fffffe          BL       uart_putchar
001300  210a              MOVS     r1,#0xa
001302  48e5              LDR      r0,|L1.5784|
001304  f7fffffe          BL       uart_putchar
001308  210a              MOVS     r1,#0xa
00130a  48e3              LDR      r0,|L1.5784|
00130c  f7fffffe          BL       uart_putchar
001310  210a              MOVS     r1,#0xa
001312  48e1              LDR      r0,|L1.5784|
001314  f7fffffe          BL       uart_putchar
001318  210a              MOVS     r1,#0xa
00131a  48df              LDR      r0,|L1.5784|
00131c  f7fffffe          BL       uart_putchar
001320  210a              MOVS     r1,#0xa
001322  48dd              LDR      r0,|L1.5784|
001324  f7fffffe          BL       uart_putchar
001328  210a              MOVS     r1,#0xa
00132a  48db              LDR      r0,|L1.5784|
00132c  f7fffffe          BL       uart_putchar
001330  210a              MOVS     r1,#0xa
001332  48d9              LDR      r0,|L1.5784|
001334  f7fffffe          BL       uart_putchar
001338  210a              MOVS     r1,#0xa
00133a  48d7              LDR      r0,|L1.5784|
00133c  f7fffffe          BL       uart_putchar
001340  210a              MOVS     r1,#0xa
001342  48d5              LDR      r0,|L1.5784|
001344  f7fffffe          BL       uart_putchar
001348  210a              MOVS     r1,#0xa
00134a  48d3              LDR      r0,|L1.5784|
00134c  f7fffffe          BL       uart_putchar
001350  210a              MOVS     r1,#0xa
001352  48d1              LDR      r0,|L1.5784|
001354  f7fffffe          BL       uart_putchar
001358  210a              MOVS     r1,#0xa
00135a  48cf              LDR      r0,|L1.5784|
00135c  f7fffffe          BL       uart_putchar
001360  210a              MOVS     r1,#0xa
001362  48cd              LDR      r0,|L1.5784|
001364  f7fffffe          BL       uart_putchar
001368  210a              MOVS     r1,#0xa
00136a  48cb              LDR      r0,|L1.5784|
00136c  f7fffffe          BL       uart_putchar
001370  210a              MOVS     r1,#0xa
001372  48c9              LDR      r0,|L1.5784|
001374  f7fffffe          BL       uart_putchar
001378  210a              MOVS     r1,#0xa
00137a  48c7              LDR      r0,|L1.5784|
00137c  f7fffffe          BL       uart_putchar
001380  210a              MOVS     r1,#0xa
001382  48c5              LDR      r0,|L1.5784|
001384  f7fffffe          BL       uart_putchar
001388  210a              MOVS     r1,#0xa
00138a  48c3              LDR      r0,|L1.5784|
00138c  f7fffffe          BL       uart_putchar
001390  210a              MOVS     r1,#0xa
001392  48c1              LDR      r0,|L1.5784|
001394  f7fffffe          BL       uart_putchar
001398  210a              MOVS     r1,#0xa
00139a  48bf              LDR      r0,|L1.5784|
00139c  f7fffffe          BL       uart_putchar
0013a0  210a              MOVS     r1,#0xa
0013a2  48bd              LDR      r0,|L1.5784|
0013a4  f7fffffe          BL       uart_putchar
0013a8  210a              MOVS     r1,#0xa
0013aa  48bb              LDR      r0,|L1.5784|
0013ac  f7fffffe          BL       uart_putchar
0013b0  210a              MOVS     r1,#0xa
0013b2  48b9              LDR      r0,|L1.5784|
0013b4  f7fffffe          BL       uart_putchar
0013b8  210a              MOVS     r1,#0xa
0013ba  48b7              LDR      r0,|L1.5784|
0013bc  f7fffffe          BL       uart_putchar
;;;346    									//memset(data,0,1000);
;;;347    														//timer counts to wait for characters in uart 1 									
;;;348    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0013c0  bf00              NOP      
                  |L1.5058|
0013c2  49b6              LDR      r1,|L1.5788|
0013c4  48b6              LDR      r0,|L1.5792|
0013c6  f7fffffe          BL       strstr
0013ca  2800              CMP      r0,#0
0013cc  d109              BNE      |L1.5090|
0013ce  49b5              LDR      r1,|L1.5796|
0013d0  48b3              LDR      r0,|L1.5792|
0013d2  f7fffffe          BL       strstr
0013d6  2800              CMP      r0,#0
0013d8  d103              BNE      |L1.5090|
0013da  48b3              LDR      r0,|L1.5800|
0013dc  6800              LDR      r0,[r0,#0]  ; tout
0013de  2805              CMP      r0,#5
0013e0  ddef              BLE      |L1.5058|
                  |L1.5090|
;;;349    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;350    									}
;;;351    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0013e2  f7fffffe          BL       clear
;;;352    									//clear();
;;;353    									memset(data,0,strlen(data));
0013e6  48b1              LDR      r0,|L1.5804|
0013e8  f7fffffe          BL       strlen
0013ec  4604              MOV      r4,r0
0013ee  4621              MOV      r1,r4
0013f0  48ae              LDR      r0,|L1.5804|
0013f2  f7fffffe          BL       __aeabi_memclr
;;;354    									clear();
0013f6  f7fffffe          BL       clear
0013fa  e140              B        |L1.5758|
                  |L1.5116|
;;;355    
;;;356    								
;;;357    								//								log_it();								
;;;358    																}else{send_chunk();}													
0013fc  f7fffffe          BL       send_chunk
001400  e13d              B        |L1.5758|
                  |L1.5122|
;;;359    								//checks for the sd_data available
;;;360    								}
;;;361    								//con1d=strstr(uart_string_gsm,"OK");
;;;362    								else
;;;363    								{
;;;364    									
;;;365    									
;;;366    	delay(100);
001402  2064              MOVS     r0,#0x64
001404  f7fffffe          BL       delay
;;;367    		clear();//memset(uart_string_gsm,0,5000);
001408  f7fffffe          BL       clear
;;;368    	
;;;369    	memset(at_,0,100);
00140c  2164              MOVS     r1,#0x64
00140e  48a8              LDR      r0,|L1.5808|
001410  f7fffffe          BL       __aeabi_memclr
;;;370    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001414  48a5              LDR      r0,|L1.5804|
001416  f7fffffe          BL       strlen
00141a  1c44              ADDS     r4,r0,#1
00141c  4623              MOV      r3,r4
00141e  4aa5              LDR      r2,|L1.5812|
001420  49a0              LDR      r1,|L1.5796|
001422  313c              ADDS     r1,r1,#0x3c
001424  48a2              LDR      r0,|L1.5808|
001426  f7fffffe          BL       __2sprintf
;;;371    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00142a  2005              MOVS     r0,#5
00142c  4b9d              LDR      r3,|L1.5796|
00142e  461a              MOV      r2,r3
001430  3260              ADDS     r2,r2,#0x60
001432  a1a1              ADR      r1,|L1.5816|
001434  9000              STR      r0,[sp,#0]
001436  489e              LDR      r0,|L1.5808|
001438  f7fffffe          BL       send_SD
;;;372    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;373    //	if(strstr(uart_string_gsm,"ERROR")){
;;;374    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;375    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;376    //	}
;;;377    	
;;;378    clear();	
00143c  f7fffffe          BL       clear
;;;379    									k2=0;									//string array counter for uart 1
001440  2000              MOVS     r0,#0
001442  499e              LDR      r1,|L1.5820|
001444  6008              STR      r0,[r1,#0]  ; k2
;;;380    									tout=0;	
001446  4998              LDR      r1,|L1.5800|
001448  6008              STR      r0,[r1,#0]  ; tout
;;;381    		for(k=0;k<strlen(data);k++)
00144a  499d              LDR      r1,|L1.5824|
00144c  6008              STR      r0,[r1,#0]  ; k
00144e  e00b              B        |L1.5224|
                  |L1.5200|
;;;382    		{
;;;383    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001450  4896              LDR      r0,|L1.5804|
001452  4a9b              LDR      r2,|L1.5824|
001454  6812              LDR      r2,[r2,#0]  ; k
001456  5c81              LDRB     r1,[r0,r2]
001458  488f              LDR      r0,|L1.5784|
00145a  f7fffffe          BL       uart_putchar
00145e  4898              LDR      r0,|L1.5824|
001460  6800              LDR      r0,[r0,#0]            ;381  ; k
001462  1c40              ADDS     r0,r0,#1              ;381
001464  4996              LDR      r1,|L1.5824|
001466  6008              STR      r0,[r1,#0]            ;381  ; k
                  |L1.5224|
001468  4890              LDR      r0,|L1.5804|
00146a  f7fffffe          BL       strlen
00146e  4994              LDR      r1,|L1.5824|
001470  6809              LDR      r1,[r1,#0]            ;381  ; k
001472  4288              CMP      r0,r1                 ;381
001474  d8ec              BHI      |L1.5200|
;;;384    		}	
;;;385    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001476  210a              MOVS     r1,#0xa
001478  4887              LDR      r0,|L1.5784|
00147a  f7fffffe          BL       uart_putchar
00147e  210a              MOVS     r1,#0xa
001480  4885              LDR      r0,|L1.5784|
001482  f7fffffe          BL       uart_putchar
001486  210a              MOVS     r1,#0xa
001488  4883              LDR      r0,|L1.5784|
00148a  f7fffffe          BL       uart_putchar
00148e  210a              MOVS     r1,#0xa
001490  4881              LDR      r0,|L1.5784|
001492  f7fffffe          BL       uart_putchar
001496  210a              MOVS     r1,#0xa
001498  487f              LDR      r0,|L1.5784|
00149a  f7fffffe          BL       uart_putchar
00149e  210a              MOVS     r1,#0xa
0014a0  487d              LDR      r0,|L1.5784|
0014a2  f7fffffe          BL       uart_putchar
0014a6  210a              MOVS     r1,#0xa
0014a8  487b              LDR      r0,|L1.5784|
0014aa  f7fffffe          BL       uart_putchar
0014ae  210a              MOVS     r1,#0xa
0014b0  4879              LDR      r0,|L1.5784|
0014b2  f7fffffe          BL       uart_putchar
0014b6  210a              MOVS     r1,#0xa
0014b8  4877              LDR      r0,|L1.5784|
0014ba  f7fffffe          BL       uart_putchar
0014be  210a              MOVS     r1,#0xa
0014c0  4875              LDR      r0,|L1.5784|
0014c2  f7fffffe          BL       uart_putchar
0014c6  210a              MOVS     r1,#0xa
0014c8  4873              LDR      r0,|L1.5784|
0014ca  f7fffffe          BL       uart_putchar
0014ce  210a              MOVS     r1,#0xa
0014d0  4871              LDR      r0,|L1.5784|
0014d2  f7fffffe          BL       uart_putchar
0014d6  210a              MOVS     r1,#0xa
0014d8  486f              LDR      r0,|L1.5784|
0014da  f7fffffe          BL       uart_putchar
0014de  210a              MOVS     r1,#0xa
0014e0  486d              LDR      r0,|L1.5784|
0014e2  f7fffffe          BL       uart_putchar
0014e6  210a              MOVS     r1,#0xa
0014e8  486b              LDR      r0,|L1.5784|
0014ea  f7fffffe          BL       uart_putchar
0014ee  210a              MOVS     r1,#0xa
0014f0  4869              LDR      r0,|L1.5784|
0014f2  f7fffffe          BL       uart_putchar
0014f6  210a              MOVS     r1,#0xa
0014f8  4867              LDR      r0,|L1.5784|
0014fa  f7fffffe          BL       uart_putchar
0014fe  210a              MOVS     r1,#0xa
001500  4865              LDR      r0,|L1.5784|
001502  f7fffffe          BL       uart_putchar
001506  210a              MOVS     r1,#0xa
001508  4863              LDR      r0,|L1.5784|
00150a  f7fffffe          BL       uart_putchar
00150e  210a              MOVS     r1,#0xa
001510  4861              LDR      r0,|L1.5784|
001512  f7fffffe          BL       uart_putchar
001516  210a              MOVS     r1,#0xa
001518  485f              LDR      r0,|L1.5784|
00151a  f7fffffe          BL       uart_putchar
00151e  210a              MOVS     r1,#0xa
001520  485d              LDR      r0,|L1.5784|
001522  f7fffffe          BL       uart_putchar
001526  210a              MOVS     r1,#0xa
001528  485b              LDR      r0,|L1.5784|
00152a  f7fffffe          BL       uart_putchar
00152e  210a              MOVS     r1,#0xa
001530  4859              LDR      r0,|L1.5784|
001532  f7fffffe          BL       uart_putchar
001536  210a              MOVS     r1,#0xa
001538  4857              LDR      r0,|L1.5784|
00153a  f7fffffe          BL       uart_putchar
00153e  210a              MOVS     r1,#0xa
001540  4855              LDR      r0,|L1.5784|
001542  f7fffffe          BL       uart_putchar
001546  210a              MOVS     r1,#0xa
001548  4853              LDR      r0,|L1.5784|
00154a  f7fffffe          BL       uart_putchar
00154e  210a              MOVS     r1,#0xa
001550  4851              LDR      r0,|L1.5784|
001552  f7fffffe          BL       uart_putchar
001556  210a              MOVS     r1,#0xa
001558  484f              LDR      r0,|L1.5784|
00155a  f7fffffe          BL       uart_putchar
00155e  210a              MOVS     r1,#0xa
001560  484d              LDR      r0,|L1.5784|
001562  f7fffffe          BL       uart_putchar
001566  210a              MOVS     r1,#0xa
001568  484b              LDR      r0,|L1.5784|
00156a  f7fffffe          BL       uart_putchar
00156e  210a              MOVS     r1,#0xa
001570  4849              LDR      r0,|L1.5784|
001572  f7fffffe          BL       uart_putchar
001576  210a              MOVS     r1,#0xa
001578  4847              LDR      r0,|L1.5784|
00157a  f7fffffe          BL       uart_putchar
00157e  210a              MOVS     r1,#0xa
001580  4845              LDR      r0,|L1.5784|
001582  f7fffffe          BL       uart_putchar
001586  210a              MOVS     r1,#0xa
001588  4843              LDR      r0,|L1.5784|
00158a  f7fffffe          BL       uart_putchar
00158e  210a              MOVS     r1,#0xa
001590  4841              LDR      r0,|L1.5784|
001592  f7fffffe          BL       uart_putchar
001596  210a              MOVS     r1,#0xa
001598  483f              LDR      r0,|L1.5784|
00159a  f7fffffe          BL       uart_putchar
00159e  210a              MOVS     r1,#0xa
0015a0  483d              LDR      r0,|L1.5784|
0015a2  f7fffffe          BL       uart_putchar
0015a6  210a              MOVS     r1,#0xa
0015a8  483b              LDR      r0,|L1.5784|
0015aa  f7fffffe          BL       uart_putchar
0015ae  210a              MOVS     r1,#0xa
0015b0  4839              LDR      r0,|L1.5784|
0015b2  f7fffffe          BL       uart_putchar
0015b6  210a              MOVS     r1,#0xa
0015b8  4837              LDR      r0,|L1.5784|
0015ba  f7fffffe          BL       uart_putchar
0015be  210a              MOVS     r1,#0xa
0015c0  4835              LDR      r0,|L1.5784|
0015c2  f7fffffe          BL       uart_putchar
0015c6  210a              MOVS     r1,#0xa
0015c8  4833              LDR      r0,|L1.5784|
0015ca  f7fffffe          BL       uart_putchar
0015ce  210a              MOVS     r1,#0xa
0015d0  4831              LDR      r0,|L1.5784|
0015d2  f7fffffe          BL       uart_putchar
0015d6  210a              MOVS     r1,#0xa
0015d8  482f              LDR      r0,|L1.5784|
0015da  f7fffffe          BL       uart_putchar
0015de  210a              MOVS     r1,#0xa
0015e0  482d              LDR      r0,|L1.5784|
0015e2  f7fffffe          BL       uart_putchar
0015e6  210a              MOVS     r1,#0xa
0015e8  482b              LDR      r0,|L1.5784|
0015ea  f7fffffe          BL       uart_putchar
0015ee  210a              MOVS     r1,#0xa
0015f0  4829              LDR      r0,|L1.5784|
0015f2  f7fffffe          BL       uart_putchar
0015f6  210a              MOVS     r1,#0xa
0015f8  4827              LDR      r0,|L1.5784|
0015fa  f7fffffe          BL       uart_putchar
0015fe  210a              MOVS     r1,#0xa
001600  4825              LDR      r0,|L1.5784|
001602  f7fffffe          BL       uart_putchar
001606  210a              MOVS     r1,#0xa
001608  4823              LDR      r0,|L1.5784|
00160a  f7fffffe          BL       uart_putchar
00160e  210a              MOVS     r1,#0xa
001610  4821              LDR      r0,|L1.5784|
001612  f7fffffe          BL       uart_putchar
001616  210a              MOVS     r1,#0xa
001618  481f              LDR      r0,|L1.5784|
00161a  f7fffffe          BL       uart_putchar
00161e  210a              MOVS     r1,#0xa
001620  481d              LDR      r0,|L1.5784|
001622  f7fffffe          BL       uart_putchar
001626  210a              MOVS     r1,#0xa
001628  481b              LDR      r0,|L1.5784|
00162a  f7fffffe          BL       uart_putchar
00162e  210a              MOVS     r1,#0xa
001630  4819              LDR      r0,|L1.5784|
001632  f7fffffe          BL       uart_putchar
001636  210a              MOVS     r1,#0xa
001638  4817              LDR      r0,|L1.5784|
00163a  f7fffffe          BL       uart_putchar
;;;386    									//memset(data,0,1000);
;;;387    														//timer counts to wait for characters in uart 1 									
;;;388    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00163e  bf00              NOP      
                  |L1.5696|
001640  4916              LDR      r1,|L1.5788|
001642  4817              LDR      r0,|L1.5792|
001644  f7fffffe          BL       strstr
001648  2800              CMP      r0,#0
00164a  d109              BNE      |L1.5728|
00164c  4915              LDR      r1,|L1.5796|
00164e  4814              LDR      r0,|L1.5792|
001650  f7fffffe          BL       strstr
001654  2800              CMP      r0,#0
001656  d103              BNE      |L1.5728|
001658  4813              LDR      r0,|L1.5800|
00165a  6800              LDR      r0,[r0,#0]  ; tout
00165c  2805              CMP      r0,#5
00165e  ddef              BLE      |L1.5696|
                  |L1.5728|
;;;389    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;390    									}
;;;391    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001660  f7fffffe          BL       clear
;;;392    									//clear();
;;;393    									memset(data,0,strlen(data));
001664  4811              LDR      r0,|L1.5804|
001666  f7fffffe          BL       strlen
00166a  4604              MOV      r4,r0
00166c  4621              MOV      r1,r4
00166e  480f              LDR      r0,|L1.5804|
001670  f7fffffe          BL       __aeabi_memclr
;;;394    									clear();
001674  f7fffffe          BL       clear
001678  e001              B        |L1.5758|
                  |L1.5754|
;;;395    
;;;396    								
;;;397    									
;;;398    									
;;;399    									//log_it();			//otherwize log it					
;;;400    								}
;;;401    
;;;402    																
;;;403    //delay(50);
;;;404    
;;;405    //else{
;;;406    //log_it();}
;;;407    								
;;;408    								
;;;409    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;410    	else
;;;411    	{
;;;412    		send_chunk();
00167a  f7fffffe          BL       send_chunk
                  |L1.5758|
;;;413    	}		
;;;414    								
;;;415    								
;;;416    								
;;;417    	memset(data,0,strlen(data));	
00167e  480b              LDR      r0,|L1.5804|
001680  f7fffffe          BL       strlen
001684  4604              MOV      r4,r0
001686  4621              MOV      r1,r4
001688  4808              LDR      r0,|L1.5804|
00168a  f7fffffe          BL       __aeabi_memclr
;;;418    	uart_putchar(UART1_BASE_PTR, 0x1A);
00168e  211a              MOVS     r1,#0x1a
001690  4801              LDR      r0,|L1.5784|
001692  f7fffffe          BL       uart_putchar
;;;419    	
;;;420    }
001696  bd38              POP      {r3-r5,pc}
                  |L1.5784|
                          DCD      0x4006b000
                  |L1.5788|
                          DCD      ||.text||+0xd3c
                  |L1.5792|
                          DCD      uart_string_gsm
                  |L1.5796|
                          DCD      ||.text||+0x8cc
                  |L1.5800|
                          DCD      tout
                  |L1.5804|
                          DCD      data
                  |L1.5808|
                          DCD      at_
                  |L1.5812|
                          DCD      drive
                  |L1.5816|
0016b8  3e00              DCB      ">",0
0016ba  00                DCB      0
0016bb  00                DCB      0
                  |L1.5820|
                          DCD      ||k2||
                  |L1.5824|
                          DCD      k
                          ENDP

                  send_tcp_bal PROC
;;;433    
;;;434    void send_tcp_bal()
0016c4  b538              PUSH     {r3-r5,lr}
;;;435    {	
;;;436    memset(stcond1,0,strlen(stcond1));	
0016c6  48fe              LDR      r0,|L1.6848|
0016c8  6800              LDR      r0,[r0,#0]  ; stcond1
0016ca  f7fffffe          BL       strlen
0016ce  4604              MOV      r4,r0
0016d0  4621              MOV      r1,r4
0016d2  48fb              LDR      r0,|L1.6848|
0016d4  6800              LDR      r0,[r0,#0]  ; stcond1
0016d6  f7fffffe          BL       __aeabi_memclr
;;;437    memset(con1d,0,strlen(con1d));	
0016da  48fa              LDR      r0,|L1.6852|
0016dc  6800              LDR      r0,[r0,#0]  ; con1d
0016de  f7fffffe          BL       strlen
0016e2  4604              MOV      r4,r0
0016e4  4621              MOV      r1,r4
0016e6  48f7              LDR      r0,|L1.6852|
0016e8  6800              LDR      r0,[r0,#0]  ; con1d
0016ea  f7fffffe          BL       __aeabi_memclr
;;;438    	
;;;439    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;440    
;;;441    								cond=mystrstr(uart_string_gsm,'>');
0016ee  213e              MOVS     r1,#0x3e
0016f0  48f5              LDR      r0,|L1.6856|
0016f2  f7fffffe          BL       mystrstr
0016f6  49f5              LDR      r1,|L1.6860|
0016f8  7008              STRB     r0,[r1,#0]
;;;442    								if(cond)	
0016fa  4608              MOV      r0,r1
0016fc  7800              LDRB     r0,[r0,#0]  ; cond
0016fe  2800              CMP      r0,#0
001700  d07e              BEQ      |L1.6144|
;;;443    								{
;;;444    									
;;;445    									clear();
001702  f7fffffe          BL       clear
;;;446    									memset(uart_string_gsm,0,5000);
001706  49f2              LDR      r1,|L1.6864|
001708  48ef              LDR      r0,|L1.6856|
00170a  f7fffffe          BL       __aeabi_memclr
;;;447    									strcat(data,"\n\n");
00170e  a1f1              ADR      r1,|L1.6868|
001710  48f1              LDR      r0,|L1.6872|
001712  f7fffffe          BL       strcat
;;;448    									len=strlen(data);
001716  48f0              LDR      r0,|L1.6872|
001718  f7fffffe          BL       strlen
00171c  49ef              LDR      r1,|L1.6876|
00171e  6008              STR      r0,[r1,#0]  ; len
;;;449    									tout=0;
001720  2000              MOVS     r0,#0
001722  49ef              LDR      r1,|L1.6880|
001724  6008              STR      r0,[r1,#0]  ; tout
;;;450    									k2=0;
001726  49ef              LDR      r1,|L1.6884|
001728  6008              STR      r0,[r1,#0]  ; k2
;;;451    									for(k=0;k<len;k++)
00172a  49ef              LDR      r1,|L1.6888|
00172c  6008              STR      r0,[r1,#0]  ; k
00172e  e00b              B        |L1.5960|
                  |L1.5936|
;;;452    									{
;;;453    										uart_putchar(UART1_BASE_PTR, data[k]);
001730  48e9              LDR      r0,|L1.6872|
001732  4aed              LDR      r2,|L1.6888|
001734  6812              LDR      r2,[r2,#0]  ; k
001736  5c81              LDRB     r1,[r0,r2]
001738  48ec              LDR      r0,|L1.6892|
00173a  f7fffffe          BL       uart_putchar
00173e  48ea              LDR      r0,|L1.6888|
001740  6800              LDR      r0,[r0,#0]            ;451  ; k
001742  1c40              ADDS     r0,r0,#1              ;451
001744  49e8              LDR      r1,|L1.6888|
001746  6008              STR      r0,[r1,#0]            ;451  ; k
                  |L1.5960|
001748  48e7              LDR      r0,|L1.6888|
00174a  6800              LDR      r0,[r0,#0]            ;451  ; k
00174c  49e3              LDR      r1,|L1.6876|
00174e  6809              LDR      r1,[r1,#0]            ;451  ; len
001750  4288              CMP      r0,r1                 ;451
001752  dbed              BLT      |L1.5936|
;;;454    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001754  211a              MOVS     r1,#0x1a
001756  48e5              LDR      r0,|L1.6892|
001758  f7fffffe          BL       uart_putchar
00175c  211a              MOVS     r1,#0x1a
00175e  48e3              LDR      r0,|L1.6892|
001760  f7fffffe          BL       uart_putchar
;;;455    									do
001764  bf00              NOP      
                  |L1.5990|
;;;456    																{stcond1=strstr(uart_string_gsm,"SEND OK");
001766  49e2              LDR      r1,|L1.6896|
001768  48d7              LDR      r0,|L1.6856|
00176a  f7fffffe          BL       strstr
00176e  49d4              LDR      r1,|L1.6848|
001770  6008              STR      r0,[r1,#0]  ; stcond1
;;;457    																	stcond2=strstr(uart_string_gsm, "ERROR");
001772  49df              LDR      r1,|L1.6896|
001774  3108              ADDS     r1,r1,#8
001776  48d4              LDR      r0,|L1.6856|
001778  f7fffffe          BL       strstr
00177c  49dd              LDR      r1,|L1.6900|
00177e  6008              STR      r0,[r1,#0]  ; stcond2
;;;458    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001780  49dd              LDR      r1,|L1.6904|
001782  48d1              LDR      r0,|L1.6856|
001784  f7fffffe          BL       strstr
001788  49dc              LDR      r1,|L1.6908|
00178a  6008              STR      r0,[r1,#0]  ; stcond3
;;;459    																			stcond4=strstr(uart_string_gsm, "DEACT");	
00178c  49d8              LDR      r1,|L1.6896|
00178e  3120              ADDS     r1,r1,#0x20
001790  48cd              LDR      r0,|L1.6856|
001792  f7fffffe          BL       strstr
001796  49da              LDR      r1,|L1.6912|
001798  6008              STR      r0,[r1,#0]  ; stcond4
;;;460    																	
;;;461    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
00179a  48d6              LDR      r0,|L1.6900|
00179c  6800              LDR      r0,[r0,#0]  ; stcond2
00179e  2800              CMP      r0,#0
0017a0  d10f              BNE      |L1.6082|
0017a2  48d6              LDR      r0,|L1.6908|
0017a4  6800              LDR      r0,[r0,#0]  ; stcond3
0017a6  2800              CMP      r0,#0
0017a8  d10b              BNE      |L1.6082|
0017aa  4608              MOV      r0,r1
0017ac  6800              LDR      r0,[r0,#0]  ; stcond4
0017ae  2800              CMP      r0,#0
0017b0  d107              BNE      |L1.6082|
0017b2  48c3              LDR      r0,|L1.6848|
0017b4  6800              LDR      r0,[r0,#0]  ; stcond1
0017b6  2800              CMP      r0,#0
0017b8  d103              BNE      |L1.6082|
0017ba  48c9              LDR      r0,|L1.6880|
0017bc  6800              LDR      r0,[r0,#0]  ; tout
0017be  2805              CMP      r0,#5
0017c0  ddd1              BLE      |L1.5990|
                  |L1.6082|
;;;462    																//delay(10);clear();
;;;463    														uart_putchar(UART1_BASE_PTR,0x1A);
0017c2  211a              MOVS     r1,#0x1a
0017c4  48c9              LDR      r0,|L1.6892|
0017c6  f7fffffe          BL       uart_putchar
;;;464    												//delay(10);
;;;465    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0017ca  211a              MOVS     r1,#0x1a
0017cc  48c7              LDR      r0,|L1.6892|
0017ce  f7fffffe          BL       uart_putchar
0017d2  211a              MOVS     r1,#0x1a
0017d4  48c5              LDR      r0,|L1.6892|
0017d6  f7fffffe          BL       uart_putchar
0017da  211a              MOVS     r1,#0x1a
0017dc  48c3              LDR      r0,|L1.6892|
0017de  f7fffffe          BL       uart_putchar
;;;466    						
;;;467    									
;;;468    									
;;;469    									
;;;470    									if(flagch==1){		int_erval=temp;flagch=0;	}
0017e2  48c8              LDR      r0,|L1.6916|
0017e4  6800              LDR      r0,[r0,#0]  ; flagch
0017e6  2801              CMP      r0,#1
0017e8  d106              BNE      |L1.6136|
0017ea  48c7              LDR      r0,|L1.6920|
0017ec  6800              LDR      r0,[r0,#0]  ; temp
0017ee  49c7              LDR      r1,|L1.6924|
0017f0  6008              STR      r0,[r1,#0]  ; int_erval
0017f2  2000              MOVS     r0,#0
0017f4  49c3              LDR      r1,|L1.6916|
0017f6  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.6136|
;;;471    									
;;;472    									
;;;473    									
;;;474    
;;;475    //									for(k=0;k<len;k++)
;;;476    //									{
;;;477    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;478    //									}
;;;479    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;480    
;;;481    //									
;;;482    //													k2=0;									//string array counter for uart 1
;;;483    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;484    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;485    //																{
;;;486    //																	timeout--;
;;;487    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;488    //
;;;489    									delay(20);															
0017f8  2014              MOVS     r0,#0x14
0017fa  f7fffffe          BL       delay
;;;490    stcond1=strstr(uart_string_gsm,"SEND OK"); 
0017fe  e000              B        |L1.6146|
                  |L1.6144|
001800  e005              B        |L1.6158|
                  |L1.6146|
001802  49bb              LDR      r1,|L1.6896|
001804  48b0              LDR      r0,|L1.6856|
001806  f7fffffe          BL       strstr
00180a  49ad              LDR      r1,|L1.6848|
00180c  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.6158|
;;;491    
;;;492    								}
;;;493    
;;;494      //checks for send ok
;;;495    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
00180e  48ac              LDR      r0,|L1.6848|
001810  6800              LDR      r0,[r0,#0]  ; stcond1
001812  2800              CMP      r0,#0
001814  d001              BEQ      |L1.6170|
001816  f000ff10          BL       |L1.9786|
                  |L1.6170|
;;;496    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00181a  211a              MOVS     r1,#0x1a
00181c  48b3              LDR      r0,|L1.6892|
00181e  f7fffffe          BL       uart_putchar
001822  f7fffffe          BL       clear
001826  200a              MOVS     r0,#0xa
001828  f7fffffe          BL       delay
;;;497    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00182c  211a              MOVS     r1,#0x1a
00182e  48af              LDR      r0,|L1.6892|
001830  f7fffffe          BL       uart_putchar
001834  f7fffffe          BL       clear
001838  200a              MOVS     r0,#0xa
00183a  f7fffffe          BL       delay
;;;498    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00183e  211a              MOVS     r1,#0x1a
001840  48aa              LDR      r0,|L1.6892|
001842  f7fffffe          BL       uart_putchar
001846  f7fffffe          BL       clear
00184a  200a              MOVS     r0,#0xa
00184c  f7fffffe          BL       delay
;;;499    							//remove_all_chars(data, '\n', '\n');
;;;500    	
;;;501    		//strcat(data,"CH\n");	
;;;502    		
;;;503    	
;;;504    	
;;;505    	delay(100);
001850  2064              MOVS     r0,#0x64
001852  f7fffffe          BL       delay
;;;506    		clear();//memset(uart_string_gsm,0,5000);
001856  f7fffffe          BL       clear
;;;507    	
;;;508    	memset(at_,0,100);
00185a  2164              MOVS     r1,#0x64
00185c  48ac              LDR      r0,|L1.6928|
00185e  f7fffffe          BL       __aeabi_memclr
;;;509    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001862  489d              LDR      r0,|L1.6872|
001864  f7fffffe          BL       strlen
001868  1c44              ADDS     r4,r0,#1
00186a  4623              MOV      r3,r4
00186c  4aa9              LDR      r2,|L1.6932|
00186e  49a0              LDR      r1,|L1.6896|
001870  3144              ADDS     r1,r1,#0x44
001872  48a7              LDR      r0,|L1.6928|
001874  f7fffffe          BL       __2sprintf
;;;510    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001878  2005              MOVS     r0,#5
00187a  4b9d              LDR      r3,|L1.6896|
00187c  3308              ADDS     r3,r3,#8
00187e  461a              MOV      r2,r3
001880  3260              ADDS     r2,r2,#0x60
001882  a1a5              ADR      r1,|L1.6936|
001884  9000              STR      r0,[sp,#0]
001886  48a2              LDR      r0,|L1.6928|
001888  f7fffffe          BL       send_SD
;;;511    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;512    //	if(strstr(uart_string_gsm,"ERROR")){
;;;513    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;514    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;515    //	}
;;;516    	
;;;517    clear();	
00188c  f7fffffe          BL       clear
;;;518    									k2=0;									//string array counter for uart 1
001890  2000              MOVS     r0,#0
001892  4994              LDR      r1,|L1.6884|
001894  6008              STR      r0,[r1,#0]  ; k2
;;;519    									tout=0;	
001896  4992              LDR      r1,|L1.6880|
001898  6008              STR      r0,[r1,#0]  ; tout
;;;520    		for(k=0;k<strlen(data);k++)
00189a  4993              LDR      r1,|L1.6888|
00189c  6008              STR      r0,[r1,#0]  ; k
00189e  e00b              B        |L1.6328|
                  |L1.6304|
;;;521    		{
;;;522    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0018a0  488d              LDR      r0,|L1.6872|
0018a2  4a91              LDR      r2,|L1.6888|
0018a4  6812              LDR      r2,[r2,#0]  ; k
0018a6  5c81              LDRB     r1,[r0,r2]
0018a8  4890              LDR      r0,|L1.6892|
0018aa  f7fffffe          BL       uart_putchar
0018ae  488e              LDR      r0,|L1.6888|
0018b0  6800              LDR      r0,[r0,#0]            ;520  ; k
0018b2  1c40              ADDS     r0,r0,#1              ;520
0018b4  498c              LDR      r1,|L1.6888|
0018b6  6008              STR      r0,[r1,#0]            ;520  ; k
                  |L1.6328|
0018b8  4887              LDR      r0,|L1.6872|
0018ba  f7fffffe          BL       strlen
0018be  498a              LDR      r1,|L1.6888|
0018c0  6809              LDR      r1,[r1,#0]            ;520  ; k
0018c2  4288              CMP      r0,r1                 ;520
0018c4  d8ec              BHI      |L1.6304|
;;;523    		}	
;;;524    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0018c6  210a              MOVS     r1,#0xa
0018c8  4888              LDR      r0,|L1.6892|
0018ca  f7fffffe          BL       uart_putchar
0018ce  210a              MOVS     r1,#0xa
0018d0  4886              LDR      r0,|L1.6892|
0018d2  f7fffffe          BL       uart_putchar
0018d6  210a              MOVS     r1,#0xa
0018d8  4884              LDR      r0,|L1.6892|
0018da  f7fffffe          BL       uart_putchar
0018de  210a              MOVS     r1,#0xa
0018e0  4882              LDR      r0,|L1.6892|
0018e2  f7fffffe          BL       uart_putchar
0018e6  210a              MOVS     r1,#0xa
0018e8  4880              LDR      r0,|L1.6892|
0018ea  f7fffffe          BL       uart_putchar
0018ee  210a              MOVS     r1,#0xa
0018f0  487e              LDR      r0,|L1.6892|
0018f2  f7fffffe          BL       uart_putchar
0018f6  210a              MOVS     r1,#0xa
0018f8  487c              LDR      r0,|L1.6892|
0018fa  f7fffffe          BL       uart_putchar
0018fe  210a              MOVS     r1,#0xa
001900  487a              LDR      r0,|L1.6892|
001902  f7fffffe          BL       uart_putchar
001906  210a              MOVS     r1,#0xa
001908  4878              LDR      r0,|L1.6892|
00190a  f7fffffe          BL       uart_putchar
00190e  210a              MOVS     r1,#0xa
001910  4876              LDR      r0,|L1.6892|
001912  f7fffffe          BL       uart_putchar
001916  210a              MOVS     r1,#0xa
001918  4874              LDR      r0,|L1.6892|
00191a  f7fffffe          BL       uart_putchar
00191e  210a              MOVS     r1,#0xa
001920  4872              LDR      r0,|L1.6892|
001922  f7fffffe          BL       uart_putchar
001926  210a              MOVS     r1,#0xa
001928  4870              LDR      r0,|L1.6892|
00192a  f7fffffe          BL       uart_putchar
00192e  210a              MOVS     r1,#0xa
001930  486e              LDR      r0,|L1.6892|
001932  f7fffffe          BL       uart_putchar
001936  210a              MOVS     r1,#0xa
001938  486c              LDR      r0,|L1.6892|
00193a  f7fffffe          BL       uart_putchar
00193e  210a              MOVS     r1,#0xa
001940  486a              LDR      r0,|L1.6892|
001942  f7fffffe          BL       uart_putchar
001946  210a              MOVS     r1,#0xa
001948  4868              LDR      r0,|L1.6892|
00194a  f7fffffe          BL       uart_putchar
00194e  210a              MOVS     r1,#0xa
001950  4866              LDR      r0,|L1.6892|
001952  f7fffffe          BL       uart_putchar
001956  210a              MOVS     r1,#0xa
001958  4864              LDR      r0,|L1.6892|
00195a  f7fffffe          BL       uart_putchar
00195e  210a              MOVS     r1,#0xa
001960  4862              LDR      r0,|L1.6892|
001962  f7fffffe          BL       uart_putchar
001966  210a              MOVS     r1,#0xa
001968  4860              LDR      r0,|L1.6892|
00196a  f7fffffe          BL       uart_putchar
00196e  210a              MOVS     r1,#0xa
001970  485e              LDR      r0,|L1.6892|
001972  f7fffffe          BL       uart_putchar
001976  210a              MOVS     r1,#0xa
001978  485c              LDR      r0,|L1.6892|
00197a  f7fffffe          BL       uart_putchar
00197e  210a              MOVS     r1,#0xa
001980  485a              LDR      r0,|L1.6892|
001982  f7fffffe          BL       uart_putchar
001986  210a              MOVS     r1,#0xa
001988  4858              LDR      r0,|L1.6892|
00198a  f7fffffe          BL       uart_putchar
00198e  210a              MOVS     r1,#0xa
001990  4856              LDR      r0,|L1.6892|
001992  f7fffffe          BL       uart_putchar
001996  210a              MOVS     r1,#0xa
001998  4854              LDR      r0,|L1.6892|
00199a  f7fffffe          BL       uart_putchar
00199e  210a              MOVS     r1,#0xa
0019a0  4852              LDR      r0,|L1.6892|
0019a2  f7fffffe          BL       uart_putchar
0019a6  210a              MOVS     r1,#0xa
0019a8  4850              LDR      r0,|L1.6892|
0019aa  f7fffffe          BL       uart_putchar
0019ae  210a              MOVS     r1,#0xa
0019b0  484e              LDR      r0,|L1.6892|
0019b2  f7fffffe          BL       uart_putchar
0019b6  210a              MOVS     r1,#0xa
0019b8  484c              LDR      r0,|L1.6892|
0019ba  f7fffffe          BL       uart_putchar
0019be  210a              MOVS     r1,#0xa
0019c0  484a              LDR      r0,|L1.6892|
0019c2  f7fffffe          BL       uart_putchar
0019c6  210a              MOVS     r1,#0xa
0019c8  4848              LDR      r0,|L1.6892|
0019ca  f7fffffe          BL       uart_putchar
0019ce  210a              MOVS     r1,#0xa
0019d0  4846              LDR      r0,|L1.6892|
0019d2  f7fffffe          BL       uart_putchar
0019d6  210a              MOVS     r1,#0xa
0019d8  4844              LDR      r0,|L1.6892|
0019da  f7fffffe          BL       uart_putchar
0019de  210a              MOVS     r1,#0xa
0019e0  4842              LDR      r0,|L1.6892|
0019e2  f7fffffe          BL       uart_putchar
0019e6  210a              MOVS     r1,#0xa
0019e8  4840              LDR      r0,|L1.6892|
0019ea  f7fffffe          BL       uart_putchar
0019ee  210a              MOVS     r1,#0xa
0019f0  483e              LDR      r0,|L1.6892|
0019f2  f7fffffe          BL       uart_putchar
0019f6  210a              MOVS     r1,#0xa
0019f8  483c              LDR      r0,|L1.6892|
0019fa  f7fffffe          BL       uart_putchar
0019fe  210a              MOVS     r1,#0xa
001a00  483a              LDR      r0,|L1.6892|
001a02  f7fffffe          BL       uart_putchar
001a06  210a              MOVS     r1,#0xa
001a08  4838              LDR      r0,|L1.6892|
001a0a  f7fffffe          BL       uart_putchar
001a0e  210a              MOVS     r1,#0xa
001a10  4836              LDR      r0,|L1.6892|
001a12  f7fffffe          BL       uart_putchar
001a16  210a              MOVS     r1,#0xa
001a18  4834              LDR      r0,|L1.6892|
001a1a  f7fffffe          BL       uart_putchar
001a1e  210a              MOVS     r1,#0xa
001a20  4832              LDR      r0,|L1.6892|
001a22  f7fffffe          BL       uart_putchar
001a26  210a              MOVS     r1,#0xa
001a28  4830              LDR      r0,|L1.6892|
001a2a  f7fffffe          BL       uart_putchar
001a2e  210a              MOVS     r1,#0xa
001a30  482e              LDR      r0,|L1.6892|
001a32  f7fffffe          BL       uart_putchar
001a36  210a              MOVS     r1,#0xa
001a38  482c              LDR      r0,|L1.6892|
001a3a  f7fffffe          BL       uart_putchar
001a3e  210a              MOVS     r1,#0xa
001a40  482a              LDR      r0,|L1.6892|
001a42  f7fffffe          BL       uart_putchar
001a46  210a              MOVS     r1,#0xa
001a48  4828              LDR      r0,|L1.6892|
001a4a  f7fffffe          BL       uart_putchar
001a4e  210a              MOVS     r1,#0xa
001a50  4826              LDR      r0,|L1.6892|
001a52  f7fffffe          BL       uart_putchar
001a56  210a              MOVS     r1,#0xa
001a58  4824              LDR      r0,|L1.6892|
001a5a  f7fffffe          BL       uart_putchar
001a5e  210a              MOVS     r1,#0xa
001a60  4822              LDR      r0,|L1.6892|
001a62  f7fffffe          BL       uart_putchar
001a66  210a              MOVS     r1,#0xa
001a68  4820              LDR      r0,|L1.6892|
001a6a  f7fffffe          BL       uart_putchar
001a6e  210a              MOVS     r1,#0xa
001a70  481e              LDR      r0,|L1.6892|
001a72  f7fffffe          BL       uart_putchar
001a76  210a              MOVS     r1,#0xa
001a78  481c              LDR      r0,|L1.6892|
001a7a  f7fffffe          BL       uart_putchar
001a7e  210a              MOVS     r1,#0xa
001a80  481a              LDR      r0,|L1.6892|
001a82  f7fffffe          BL       uart_putchar
001a86  210a              MOVS     r1,#0xa
001a88  4818              LDR      r0,|L1.6892|
001a8a  f7fffffe          BL       uart_putchar
;;;525    									//memset(data,0,1000);
;;;526    														//timer counts to wait for characters in uart 1 									
;;;527    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001a8e  bf00              NOP      
                  |L1.6800|
001a90  4922              LDR      r1,|L1.6940|
001a92  480d              LDR      r0,|L1.6856|
001a94  f7fffffe          BL       strstr
001a98  2800              CMP      r0,#0
001a9a  d10a              BNE      |L1.6834|
001a9c  4914              LDR      r1,|L1.6896|
001a9e  3108              ADDS     r1,r1,#8
001aa0  4809              LDR      r0,|L1.6856|
001aa2  f7fffffe          BL       strstr
001aa6  2800              CMP      r0,#0
001aa8  d103              BNE      |L1.6834|
001aaa  480d              LDR      r0,|L1.6880|
001aac  6800              LDR      r0,[r0,#0]  ; tout
001aae  2805              CMP      r0,#5
001ab0  ddee              BLE      |L1.6800|
                  |L1.6834|
;;;528    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;529    									}
;;;530    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001ab2  f7fffffe          BL       clear
;;;531    									//clear();
;;;532    									memset(data,0,strlen(data));
001ab6  4808              LDR      r0,|L1.6872|
001ab8  f7fffffe          BL       strlen
001abc  4604              MOV      r4,r0
001abe  e02f              B        |L1.6944|
                  |L1.6848|
                          DCD      stcond1
                  |L1.6852|
                          DCD      con1d
                  |L1.6856|
                          DCD      uart_string_gsm
                  |L1.6860|
                          DCD      cond
                  |L1.6864|
                          DCD      0x00001388
                  |L1.6868|
001ad4  0a0a00            DCB      "\n\n",0
001ad7  00                DCB      0
                  |L1.6872|
                          DCD      data
                  |L1.6876|
                          DCD      len
                  |L1.6880|
                          DCD      tout
                  |L1.6884|
                          DCD      ||k2||
                  |L1.6888|
                          DCD      k
                  |L1.6892|
                          DCD      0x4006b000
                  |L1.6896|
                          DCD      ||.text||+0x8c4
                  |L1.6900|
                          DCD      stcond2
                  |L1.6904|
                          DCD      ||.text||+0x1268
                  |L1.6908|
                          DCD      stcond3
                  |L1.6912|
                          DCD      stcond4
                  |L1.6916|
                          DCD      flagch
                  |L1.6920|
                          DCD      temp
                  |L1.6924|
                          DCD      int_erval
                  |L1.6928|
                          DCD      at_
                  |L1.6932|
                          DCD      drive
                  |L1.6936|
001b18  3e00              DCB      ">",0
001b1a  00                DCB      0
001b1b  00                DCB      0
                  |L1.6940|
                          DCD      ||.text||+0xd3c
                  |L1.6944|
001b20  4621              MOV      r1,r4
001b22  48fe              LDR      r0,|L1.7964|
001b24  f7fffffe          BL       __aeabi_memclr
;;;533    									clear();
001b28  f7fffffe          BL       clear
;;;534    
;;;535    								
;;;536    	
;;;537    	
;;;538    	//log_it();		                         //logging
;;;539    		memset(data,0,strlen(data));	
001b2c  48fb              LDR      r0,|L1.7964|
001b2e  f7fffffe          BL       strlen
001b32  4604              MOV      r4,r0
001b34  4621              MOV      r1,r4
001b36  48f9              LDR      r0,|L1.7964|
001b38  f7fffffe          BL       __aeabi_memclr
;;;540    
;;;541    					   	if(flagch!=1){
001b3c  48f8              LDR      r0,|L1.7968|
001b3e  6800              LDR      r0,[r0,#0]  ; flagch
001b40  2801              CMP      r0,#1
001b42  d009              BEQ      |L1.7000|
;;;542    							temp=int_erval;				
001b44  48f7              LDR      r0,|L1.7972|
001b46  6800              LDR      r0,[r0,#0]  ; int_erval
001b48  49f7              LDR      r1,|L1.7976|
001b4a  6008              STR      r0,[r1,#0]  ; temp
;;;543    							int_erval=4;
001b4c  2004              MOVS     r0,#4
001b4e  49f5              LDR      r1,|L1.7972|
001b50  6008              STR      r0,[r1,#0]  ; int_erval
;;;544    							flagch=1;}
001b52  2001              MOVS     r0,#1
001b54  49f2              LDR      r1,|L1.7968|
001b56  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.7000|
;;;545    							clear();	
001b58  f7fffffe          BL       clear
;;;546    									GPS_COLLECT();
001b5c  f7fffffe          BL       GPS_COLLECT
;;;547    									strcat(data,"CH\n");	
001b60  49f2              LDR      r1,|L1.7980|
001b62  48ee              LDR      r0,|L1.7964|
001b64  f7fffffe          BL       strcat
;;;548    
;;;549    //*************************************tcp_initialization();//reinitialization************************//
;;;550    
;;;551    	
;;;552    msg_sim800(); 
001b68  f7fffffe          BL       msg_sim800
;;;553    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
001b6c  2005              MOVS     r0,#5
001b6e  4bef              LDR      r3,|L1.7980|
001b70  3b30              SUBS     r3,r3,#0x30
001b72  461a              MOV      r2,r3
001b74  3260              ADDS     r2,r2,#0x60
001b76  a1ee              ADR      r1,|L1.7984|
001b78  9000              STR      r0,[sp,#0]
001b7a  48ee              LDR      r0,|L1.7988|
001b7c  f7fffffe          BL       send_GSM
;;;554    delay(100);
001b80  2064              MOVS     r0,#0x64
001b82  f7fffffe          BL       delay
;;;555    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
001b86  2004              MOVS     r0,#4
001b88  4be8              LDR      r3,|L1.7980|
001b8a  3b30              SUBS     r3,r3,#0x30
001b8c  4ae9              LDR      r2,|L1.7988|
001b8e  3210              ADDS     r2,r2,#0x10
001b90  a1e7              ADR      r1,|L1.7984|
001b92  9000              STR      r0,[sp,#0]
001b94  4610              MOV      r0,r2
001b96  3014              ADDS     r0,r0,#0x14
001b98  f7fffffe          BL       send_GSM
;;;556    GPS_COLLECT2();
001b9c  f7fffffe          BL       GPS_COLLECT2
;;;557    strcat(data,"CH\n");		
001ba0  49e2              LDR      r1,|L1.7980|
001ba2  48de              LDR      r0,|L1.7964|
001ba4  f7fffffe          BL       strcat
;;;558    GPS_COLLECT2();
001ba8  f7fffffe          BL       GPS_COLLECT2
;;;559    strcat(data,"CH\n");	
001bac  49df              LDR      r1,|L1.7980|
001bae  48db              LDR      r0,|L1.7964|
001bb0  f7fffffe          BL       strcat
;;;560    GPS_COLLECT2();
001bb4  f7fffffe          BL       GPS_COLLECT2
;;;561    strcat(data,"CH\n");
001bb8  49dc              LDR      r1,|L1.7980|
001bba  48d8              LDR      r0,|L1.7964|
001bbc  f7fffffe          BL       strcat
;;;562    cond201=(strstr(uart_string_gsm, "OK"));
001bc0  a1db              ADR      r1,|L1.7984|
001bc2  48dd              LDR      r0,|L1.7992|
001bc4  f7fffffe          BL       strstr
001bc8  49dc              LDR      r1,|L1.7996|
001bca  6008              STR      r0,[r1,#0]  ; cond201
;;;563    cond200=(strstr(uart_string_gsm, "ERROR"));
001bcc  49d7              LDR      r1,|L1.7980|
001bce  3930              SUBS     r1,r1,#0x30
001bd0  48d9              LDR      r0,|L1.7992|
001bd2  f7fffffe          BL       strstr
001bd6  49da              LDR      r1,|L1.8000|
001bd8  6008              STR      r0,[r1,#0]  ; cond200
;;;564    if((!(cond201|| cond200 ))  && sleep_flag != 1)
001bda  48d8              LDR      r0,|L1.7996|
001bdc  6800              LDR      r0,[r0,#0]  ; cond201
001bde  2800              CMP      r0,#0
                  |L1.7136|
001be0  d17d              BNE      |L1.7390|
001be2  4608              MOV      r0,r1
001be4  6800              LDR      r0,[r0,#0]  ; cond200
001be6  2800              CMP      r0,#0
001be8  d1fa              BNE      |L1.7136|
001bea  48d6              LDR      r0,|L1.8004|
001bec  6800              LDR      r0,[r0,#0]  ; sleep_flag
001bee  2801              CMP      r0,#1
001bf0  d075              BEQ      |L1.7390|
;;;565    {
;;;566    delay(100);
001bf2  2064              MOVS     r0,#0x64
001bf4  f7fffffe          BL       delay
;;;567    clear();//memset(uart_string_gsm,0,5000);
001bf8  f7fffffe          BL       clear
;;;568    memset(at_,0,100);
001bfc  2164              MOVS     r1,#0x64
001bfe  48d2              LDR      r0,|L1.8008|
001c00  f7fffffe          BL       __aeabi_memclr
;;;569    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001c04  48c5              LDR      r0,|L1.7964|
001c06  f7fffffe          BL       strlen
001c0a  1c44              ADDS     r4,r0,#1
001c0c  4623              MOV      r3,r4
001c0e  4acf              LDR      r2,|L1.8012|
001c10  49c6              LDR      r1,|L1.7980|
001c12  310c              ADDS     r1,r1,#0xc
001c14  48cc              LDR      r0,|L1.8008|
001c16  f7fffffe          BL       __2sprintf
;;;570    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001c1a  2005              MOVS     r0,#5
001c1c  4bc3              LDR      r3,|L1.7980|
001c1e  3b30              SUBS     r3,r3,#0x30
001c20  461a              MOV      r2,r3
001c22  3260              ADDS     r2,r2,#0x60
001c24  a1ca              ADR      r1,|L1.8016|
001c26  9000              STR      r0,[sp,#0]
001c28  48c7              LDR      r0,|L1.8008|
001c2a  f7fffffe          BL       send_SD
;;;571    clear();	
001c2e  f7fffffe          BL       clear
;;;572    k2=0;									//string array counter for uart 1
001c32  2000              MOVS     r0,#0
001c34  49c7              LDR      r1,|L1.8020|
001c36  6008              STR      r0,[r1,#0]  ; k2
;;;573    tout=0;	
001c38  49c7              LDR      r1,|L1.8024|
001c3a  6008              STR      r0,[r1,#0]  ; tout
;;;574    for(k=0;k<strlen(data);k++)
001c3c  49c7              LDR      r1,|L1.8028|
001c3e  6008              STR      r0,[r1,#0]  ; k
001c40  e00b              B        |L1.7258|
                  |L1.7234|
;;;575    {
;;;576    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001c42  48b6              LDR      r0,|L1.7964|
001c44  4ac5              LDR      r2,|L1.8028|
001c46  6812              LDR      r2,[r2,#0]  ; k
001c48  5c81              LDRB     r1,[r0,r2]
001c4a  48c5              LDR      r0,|L1.8032|
001c4c  f7fffffe          BL       uart_putchar
001c50  48c2              LDR      r0,|L1.8028|
001c52  6800              LDR      r0,[r0,#0]            ;574  ; k
001c54  1c40              ADDS     r0,r0,#1              ;574
001c56  49c1              LDR      r1,|L1.8028|
001c58  6008              STR      r0,[r1,#0]            ;574  ; k
                  |L1.7258|
001c5a  48b0              LDR      r0,|L1.7964|
001c5c  f7fffffe          BL       strlen
001c60  49be              LDR      r1,|L1.8028|
001c62  6809              LDR      r1,[r1,#0]            ;574  ; k
001c64  4288              CMP      r0,r1                 ;574
001c66  d8ec              BHI      |L1.7234|
;;;577    }	
;;;578    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001c68  210a              MOVS     r1,#0xa
001c6a  48bd              LDR      r0,|L1.8032|
001c6c  f7fffffe          BL       uart_putchar
001c70  210a              MOVS     r1,#0xa
001c72  48bb              LDR      r0,|L1.8032|
001c74  f7fffffe          BL       uart_putchar
001c78  210a              MOVS     r1,#0xa
001c7a  48b9              LDR      r0,|L1.8032|
001c7c  f7fffffe          BL       uart_putchar
001c80  210a              MOVS     r1,#0xa
001c82  48b7              LDR      r0,|L1.8032|
001c84  f7fffffe          BL       uart_putchar
001c88  210a              MOVS     r1,#0xa
001c8a  48b5              LDR      r0,|L1.8032|
001c8c  f7fffffe          BL       uart_putchar
001c90  210a              MOVS     r1,#0xa
001c92  48b3              LDR      r0,|L1.8032|
001c94  f7fffffe          BL       uart_putchar
001c98  210a              MOVS     r1,#0xa
001c9a  48b1              LDR      r0,|L1.8032|
001c9c  f7fffffe          BL       uart_putchar
001ca0  210a              MOVS     r1,#0xa
001ca2  48af              LDR      r0,|L1.8032|
001ca4  f7fffffe          BL       uart_putchar
001ca8  210a              MOVS     r1,#0xa
001caa  48ad              LDR      r0,|L1.8032|
001cac  f7fffffe          BL       uart_putchar
001cb0  210a              MOVS     r1,#0xa
001cb2  48ab              LDR      r0,|L1.8032|
001cb4  f7fffffe          BL       uart_putchar
001cb8  210a              MOVS     r1,#0xa
001cba  48a9              LDR      r0,|L1.8032|
001cbc  f7fffffe          BL       uart_putchar
001cc0  210a              MOVS     r1,#0xa
001cc2  48a7              LDR      r0,|L1.8032|
001cc4  f7fffffe          BL       uart_putchar
001cc8  210a              MOVS     r1,#0xa
001cca  48a5              LDR      r0,|L1.8032|
001ccc  f7fffffe          BL       uart_putchar
001cd0  210a              MOVS     r1,#0xa
001cd2  48a3              LDR      r0,|L1.8032|
001cd4  f7fffffe          BL       uart_putchar
001cd8  210a              MOVS     r1,#0xa
001cda  48a1              LDR      r0,|L1.8032|
001cdc  e000              B        |L1.7392|
                  |L1.7390|
001cde  e0d4              B        |L1.7818|
                  |L1.7392|
001ce0  f7fffffe          BL       uart_putchar
001ce4  210a              MOVS     r1,#0xa
001ce6  489e              LDR      r0,|L1.8032|
001ce8  f7fffffe          BL       uart_putchar
001cec  210a              MOVS     r1,#0xa
001cee  489c              LDR      r0,|L1.8032|
001cf0  f7fffffe          BL       uart_putchar
001cf4  210a              MOVS     r1,#0xa
001cf6  489a              LDR      r0,|L1.8032|
001cf8  f7fffffe          BL       uart_putchar
001cfc  210a              MOVS     r1,#0xa
001cfe  4898              LDR      r0,|L1.8032|
001d00  f7fffffe          BL       uart_putchar
001d04  210a              MOVS     r1,#0xa
001d06  4896              LDR      r0,|L1.8032|
001d08  f7fffffe          BL       uart_putchar
001d0c  210a              MOVS     r1,#0xa
001d0e  4894              LDR      r0,|L1.8032|
001d10  f7fffffe          BL       uart_putchar
001d14  210a              MOVS     r1,#0xa
001d16  4892              LDR      r0,|L1.8032|
001d18  f7fffffe          BL       uart_putchar
001d1c  210a              MOVS     r1,#0xa
001d1e  4890              LDR      r0,|L1.8032|
001d20  f7fffffe          BL       uart_putchar
001d24  210a              MOVS     r1,#0xa
001d26  488e              LDR      r0,|L1.8032|
001d28  f7fffffe          BL       uart_putchar
001d2c  210a              MOVS     r1,#0xa
001d2e  488c              LDR      r0,|L1.8032|
001d30  f7fffffe          BL       uart_putchar
001d34  210a              MOVS     r1,#0xa
001d36  488a              LDR      r0,|L1.8032|
001d38  f7fffffe          BL       uart_putchar
001d3c  210a              MOVS     r1,#0xa
001d3e  4888              LDR      r0,|L1.8032|
001d40  f7fffffe          BL       uart_putchar
001d44  210a              MOVS     r1,#0xa
001d46  4886              LDR      r0,|L1.8032|
001d48  f7fffffe          BL       uart_putchar
001d4c  210a              MOVS     r1,#0xa
001d4e  4884              LDR      r0,|L1.8032|
001d50  f7fffffe          BL       uart_putchar
001d54  210a              MOVS     r1,#0xa
001d56  4882              LDR      r0,|L1.8032|
001d58  f7fffffe          BL       uart_putchar
001d5c  210a              MOVS     r1,#0xa
001d5e  4880              LDR      r0,|L1.8032|
001d60  f7fffffe          BL       uart_putchar
001d64  210a              MOVS     r1,#0xa
001d66  487e              LDR      r0,|L1.8032|
001d68  f7fffffe          BL       uart_putchar
001d6c  210a              MOVS     r1,#0xa
001d6e  487c              LDR      r0,|L1.8032|
001d70  f7fffffe          BL       uart_putchar
001d74  210a              MOVS     r1,#0xa
001d76  487a              LDR      r0,|L1.8032|
001d78  f7fffffe          BL       uart_putchar
001d7c  210a              MOVS     r1,#0xa
001d7e  4878              LDR      r0,|L1.8032|
001d80  f7fffffe          BL       uart_putchar
001d84  210a              MOVS     r1,#0xa
001d86  4876              LDR      r0,|L1.8032|
001d88  f7fffffe          BL       uart_putchar
001d8c  210a              MOVS     r1,#0xa
001d8e  4874              LDR      r0,|L1.8032|
001d90  f7fffffe          BL       uart_putchar
001d94  210a              MOVS     r1,#0xa
001d96  4872              LDR      r0,|L1.8032|
001d98  f7fffffe          BL       uart_putchar
001d9c  210a              MOVS     r1,#0xa
001d9e  4870              LDR      r0,|L1.8032|
001da0  f7fffffe          BL       uart_putchar
001da4  210a              MOVS     r1,#0xa
001da6  486e              LDR      r0,|L1.8032|
001da8  f7fffffe          BL       uart_putchar
001dac  210a              MOVS     r1,#0xa
001dae  486c              LDR      r0,|L1.8032|
001db0  f7fffffe          BL       uart_putchar
001db4  210a              MOVS     r1,#0xa
001db6  486a              LDR      r0,|L1.8032|
001db8  f7fffffe          BL       uart_putchar
001dbc  210a              MOVS     r1,#0xa
001dbe  4868              LDR      r0,|L1.8032|
001dc0  f7fffffe          BL       uart_putchar
001dc4  210a              MOVS     r1,#0xa
001dc6  4866              LDR      r0,|L1.8032|
001dc8  f7fffffe          BL       uart_putchar
001dcc  210a              MOVS     r1,#0xa
001dce  4864              LDR      r0,|L1.8032|
001dd0  f7fffffe          BL       uart_putchar
001dd4  210a              MOVS     r1,#0xa
001dd6  4862              LDR      r0,|L1.8032|
001dd8  f7fffffe          BL       uart_putchar
001ddc  210a              MOVS     r1,#0xa
001dde  4860              LDR      r0,|L1.8032|
001de0  f7fffffe          BL       uart_putchar
001de4  210a              MOVS     r1,#0xa
001de6  485e              LDR      r0,|L1.8032|
001de8  f7fffffe          BL       uart_putchar
001dec  210a              MOVS     r1,#0xa
001dee  485c              LDR      r0,|L1.8032|
001df0  f7fffffe          BL       uart_putchar
001df4  210a              MOVS     r1,#0xa
001df6  485a              LDR      r0,|L1.8032|
001df8  f7fffffe          BL       uart_putchar
001dfc  210a              MOVS     r1,#0xa
001dfe  4858              LDR      r0,|L1.8032|
001e00  f7fffffe          BL       uart_putchar
001e04  210a              MOVS     r1,#0xa
001e06  4856              LDR      r0,|L1.8032|
001e08  f7fffffe          BL       uart_putchar
001e0c  210a              MOVS     r1,#0xa
001e0e  4854              LDR      r0,|L1.8032|
001e10  f7fffffe          BL       uart_putchar
001e14  210a              MOVS     r1,#0xa
001e16  4852              LDR      r0,|L1.8032|
001e18  f7fffffe          BL       uart_putchar
001e1c  210a              MOVS     r1,#0xa
001e1e  4850              LDR      r0,|L1.8032|
001e20  f7fffffe          BL       uart_putchar
001e24  210a              MOVS     r1,#0xa
001e26  484e              LDR      r0,|L1.8032|
001e28  f7fffffe          BL       uart_putchar
001e2c  210a              MOVS     r1,#0xa
001e2e  484c              LDR      r0,|L1.8032|
001e30  f7fffffe          BL       uart_putchar
;;;579    									//memset(data,0,1000);
;;;580    														//timer counts to wait for characters in uart 1 									
;;;581    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001e34  bf00              NOP      
                  |L1.7734|
001e36  493f              LDR      r1,|L1.7988|
001e38  3928              SUBS     r1,r1,#0x28
001e3a  483f              LDR      r0,|L1.7992|
001e3c  f7fffffe          BL       strstr
001e40  2800              CMP      r0,#0
001e42  d10a              BNE      |L1.7770|
001e44  4939              LDR      r1,|L1.7980|
001e46  3930              SUBS     r1,r1,#0x30
001e48  483b              LDR      r0,|L1.7992|
001e4a  f7fffffe          BL       strstr
001e4e  2800              CMP      r0,#0
001e50  d103              BNE      |L1.7770|
001e52  4841              LDR      r0,|L1.8024|
001e54  6800              LDR      r0,[r0,#0]  ; tout
001e56  2805              CMP      r0,#5
001e58  dded              BLE      |L1.7734|
                  |L1.7770|
;;;582    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;583    									}
;;;584    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001e5a  f7fffffe          BL       clear
;;;585    									//clear();
;;;586    									memset(data,0,strlen(data));
001e5e  482f              LDR      r0,|L1.7964|
001e60  f7fffffe          BL       strlen
001e64  4604              MOV      r4,r0
001e66  4621              MOV      r1,r4
001e68  482c              LDR      r0,|L1.7964|
001e6a  f7fffffe          BL       __aeabi_memclr
;;;587    									clear();
001e6e  f7fffffe          BL       clear
;;;588    									RESET_OFF;delay(100);
001e72  2020              MOVS     r0,#0x20
001e74  493b              LDR      r1,|L1.8036|
001e76  6088              STR      r0,[r1,#8]
001e78  2064              MOVS     r0,#0x64
001e7a  f7fffffe          BL       delay
;;;589    									RESET_ON;delay(100);		
001e7e  2020              MOVS     r0,#0x20
001e80  4938              LDR      r1,|L1.8036|
001e82  6048              STR      r0,[r1,#4]
001e84  2064              MOVS     r0,#0x64
001e86  f7fffffe          BL       delay
                  |L1.7818|
;;;590    }
;;;591    	
;;;592    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001e8a  2004              MOVS     r0,#4
001e8c  4b36              LDR      r3,|L1.8040|
001e8e  4a27              LDR      r2,|L1.7980|
001e90  3230              ADDS     r2,r2,#0x30
001e92  a127              ADR      r1,|L1.7984|
001e94  9000              STR      r0,[sp,#0]
001e96  4618              MOV      r0,r3
001e98  300c              ADDS     r0,r0,#0xc
001e9a  f7fffffe          BL       send_GSM
;;;593    GPS_COLLECT2();
001e9e  f7fffffe          BL       GPS_COLLECT2
;;;594    strcat(data,"CH\n");	
001ea2  4922              LDR      r1,|L1.7980|
001ea4  481d              LDR      r0,|L1.7964|
001ea6  f7fffffe          BL       strcat
;;;595    memset(at_,0,100);
001eaa  2164              MOVS     r1,#0x64
001eac  4826              LDR      r0,|L1.8008|
001eae  f7fffffe          BL       __aeabi_memclr
;;;596    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001eb2  4a2e              LDR      r2,|L1.8044|
001eb4  492c              LDR      r1,|L1.8040|
001eb6  3124              ADDS     r1,r1,#0x24
001eb8  4823              LDR      r0,|L1.8008|
001eba  f7fffffe          BL       __2sprintf
;;;597    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
001ebe  482c              LDR      r0,|L1.8048|
001ec0  6800              LDR      r0,[r0,#0]  ; tmeout
001ec2  4b29              LDR      r3,|L1.8040|
001ec4  4a19              LDR      r2,|L1.7980|
001ec6  3230              ADDS     r2,r2,#0x30
001ec8  a119              ADR      r1,|L1.7984|
001eca  9000              STR      r0,[sp,#0]
001ecc  481e              LDR      r0,|L1.8008|
001ece  f7fffffe          BL       send_GSM
;;;598    msg_sim800(); 
001ed2  f7fffffe          BL       msg_sim800
;;;599    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
001ed6  2004              MOVS     r0,#4
001ed8  4b14              LDR      r3,|L1.7980|
001eda  3b18              SUBS     r3,r3,#0x18
001edc  461a              MOV      r2,r3
001ede  3248              ADDS     r2,r2,#0x48
001ee0  a113              ADR      r1,|L1.7984|
001ee2  9000              STR      r0,[sp,#0]
001ee4  4820              LDR      r0,|L1.8040|
001ee6  303c              ADDS     r0,r0,#0x3c
001ee8  f7fffffe          BL       send_GSM
;;;600    GPS_COLLECT2();
001eec  f7fffffe          BL       GPS_COLLECT2
;;;601    strcat(data,"CH\n");	
001ef0  490e              LDR      r1,|L1.7980|
001ef2  480a              LDR      r0,|L1.7964|
001ef4  f7fffffe          BL       strcat
;;;602    GPS_COLLECT2();
001ef8  f7fffffe          BL       GPS_COLLECT2
;;;603    strcat(data,"CH\n");	
001efc  490b              LDR      r1,|L1.7980|
001efe  4807              LDR      r0,|L1.7964|
001f00  f7fffffe          BL       strcat
;;;604    
;;;605    
;;;606    msg_sim800(); 
001f04  f7fffffe          BL       msg_sim800
;;;607    GPS_COLLECT2();
001f08  f7fffffe          BL       GPS_COLLECT2
;;;608    strcat(data,"CH\n");	
001f0c  4907              LDR      r1,|L1.7980|
001f0e  4803              LDR      r0,|L1.7964|
001f10  f7fffffe          BL       strcat
;;;609    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
001f14  f7fffffe          BL       clear
001f18  4813              LDR      r0,|L1.8040|
001f1a  e02b              B        |L1.8052|
                  |L1.7964|
                          DCD      data
                  |L1.7968|
                          DCD      flagch
                  |L1.7972|
                          DCD      int_erval
                  |L1.7976|
                          DCD      temp
                  |L1.7980|
                          DCD      ||.text||+0x8fc
                  |L1.7984|
001f30  4f4b00            DCB      "OK",0
001f33  00                DCB      0
                  |L1.7988|
                          DCD      ||.text||+0xd64
                  |L1.7992|
                          DCD      uart_string_gsm
                  |L1.7996|
                          DCD      cond201
                  |L1.8000|
                          DCD      cond200
                  |L1.8004|
                          DCD      sleep_flag
                  |L1.8008|
                          DCD      at_
                  |L1.8012|
                          DCD      drive
                  |L1.8016|
001f50  3e00              DCB      ">",0
001f52  00                DCB      0
001f53  00                DCB      0
                  |L1.8020|
                          DCD      ||k2||
                  |L1.8024|
                          DCD      tout
                  |L1.8028|
                          DCD      k
                  |L1.8032|
                          DCD      0x4006b000
                  |L1.8036|
                          DCD      0x400ff080
                  |L1.8040|
                          DCD      ||.text||+0x11d4
                  |L1.8044|
                          DCD      apn
                  |L1.8048|
                          DCD      tmeout
                  |L1.8052|
001f74  304c              ADDS     r0,r0,#0x4c
001f76  f7fffffe          BL       send_modem
001f7a  f7fffffe          BL       clear
;;;610    					delay(20);
001f7e  2014              MOVS     r0,#0x14
001f80  f7fffffe          BL       delay
;;;611    
;;;612    
;;;613    msg_sim800(); 
001f84  f7fffffe          BL       msg_sim800
;;;614    
;;;615    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001f88  4bf5              LDR      r3,|L1.9056|
001f8a  4af6              LDR      r2,|L1.9060|
001f8c  49f6              LDR      r1,|L1.9064|
001f8e  48f7              LDR      r0,|L1.9068|
001f90  f7fffffe          BL       __2sprintf
;;;616    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001f94  48f6              LDR      r0,|L1.9072|
001f96  6800              LDR      r0,[r0,#0]  ; tmeout
001f98  4bf3              LDR      r3,|L1.9064|
001f9a  3b64              SUBS     r3,r3,#0x64
001f9c  4af5              LDR      r2,|L1.9076|
001f9e  4619              MOV      r1,r3
001fa0  3184              ADDS     r1,r1,#0x84
001fa2  9000              STR      r0,[sp,#0]
001fa4  48f1              LDR      r0,|L1.9068|
001fa6  f7fffffe          BL       send_GSM
;;;617    						clear();
001faa  f7fffffe          BL       clear
;;;618    						
;;;619    						
;;;620    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
001fae  48f0              LDR      r0,|L1.9072|
001fb0  6800              LDR      r0,[r0,#0]  ; tmeout
001fb2  4bed              LDR      r3,|L1.9064|
001fb4  3328              ADDS     r3,r3,#0x28
001fb6  4aef              LDR      r2,|L1.9076|
001fb8  a1ef              ADR      r1,|L1.9080|
001fba  9000              STR      r0,[sp,#0]
001fbc  4618              MOV      r0,r3
001fbe  3014              ADDS     r0,r0,#0x14
001fc0  f7fffffe          BL       send_GSM
;;;621    //*************************************tcp_initialization_ends****************************************//							
;;;622    									
;;;623    						clear();		
001fc4  f7fffffe          BL       clear
;;;624    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
001fc8  213e              MOVS     r1,#0x3e
001fca  48ec              LDR      r0,|L1.9084|
001fcc  f7fffffe          BL       mystrstr
001fd0  49eb              LDR      r1,|L1.9088|
001fd2  7008              STRB     r0,[r1,#0]
;;;625    								if(cond)	
001fd4  4608              MOV      r0,r1
001fd6  7800              LDRB     r0,[r0,#0]  ; cond
001fd8  2800              CMP      r0,#0
001fda  d07d              BEQ      |L1.8408|
;;;626    								{	
;;;627    
;;;628    									clear();
001fdc  f7fffffe          BL       clear
;;;629    									memset(uart_string_gsm,0,5000);
001fe0  49e8              LDR      r1,|L1.9092|
001fe2  48e6              LDR      r0,|L1.9084|
001fe4  f7fffffe          BL       __aeabi_memclr
;;;630    									strcat(data,"\n");
001fe8  a1e7              ADR      r1,|L1.9096|
001fea  48e8              LDR      r0,|L1.9100|
001fec  f7fffffe          BL       strcat
;;;631    									len=strlen(data);
001ff0  48e6              LDR      r0,|L1.9100|
001ff2  f7fffffe          BL       strlen
001ff6  49e6              LDR      r1,|L1.9104|
001ff8  6008              STR      r0,[r1,#0]  ; len
;;;632    									tout=0;
001ffa  2000              MOVS     r0,#0
001ffc  49e5              LDR      r1,|L1.9108|
001ffe  6008              STR      r0,[r1,#0]  ; tout
;;;633    									k2=0;
002000  49e5              LDR      r1,|L1.9112|
002002  6008              STR      r0,[r1,#0]  ; k2
;;;634    									for(k=0;k<len;k++)
002004  49e5              LDR      r1,|L1.9116|
002006  6008              STR      r0,[r1,#0]  ; k
002008  e00b              B        |L1.8226|
                  |L1.8202|
;;;635    									{
;;;636    										uart_putchar(UART1_BASE_PTR, data[k]);
00200a  48e0              LDR      r0,|L1.9100|
00200c  4ae3              LDR      r2,|L1.9116|
00200e  6812              LDR      r2,[r2,#0]  ; k
002010  5c81              LDRB     r1,[r0,r2]
002012  48e3              LDR      r0,|L1.9120|
002014  f7fffffe          BL       uart_putchar
002018  48e0              LDR      r0,|L1.9116|
00201a  6800              LDR      r0,[r0,#0]            ;634  ; k
00201c  1c40              ADDS     r0,r0,#1              ;634
00201e  49df              LDR      r1,|L1.9116|
002020  6008              STR      r0,[r1,#0]            ;634  ; k
                  |L1.8226|
002022  48de              LDR      r0,|L1.9116|
002024  6800              LDR      r0,[r0,#0]            ;634  ; k
002026  49da              LDR      r1,|L1.9104|
002028  6809              LDR      r1,[r1,#0]            ;634  ; len
00202a  4288              CMP      r0,r1                 ;634
00202c  dbed              BLT      |L1.8202|
;;;637    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00202e  211a              MOVS     r1,#0x1a
002030  48db              LDR      r0,|L1.9120|
002032  f7fffffe          BL       uart_putchar
002036  211a              MOVS     r1,#0x1a
002038  48d9              LDR      r0,|L1.9120|
00203a  f7fffffe          BL       uart_putchar
;;;638    									do
00203e  bf00              NOP      
                  |L1.8256|
;;;639    																{stcond1=strstr(uart_string_gsm,"SEND OK");
002040  49cc              LDR      r1,|L1.9076|
002042  3908              SUBS     r1,r1,#8
002044  48cd              LDR      r0,|L1.9084|
002046  f7fffffe          BL       strstr
00204a  49d6              LDR      r1,|L1.9124|
00204c  6008              STR      r0,[r1,#0]  ; stcond1
;;;640    																	stcond2=strstr(uart_string_gsm, "ERROR");
00204e  49c9              LDR      r1,|L1.9076|
002050  48ca              LDR      r0,|L1.9084|
002052  f7fffffe          BL       strstr
002056  49d4              LDR      r1,|L1.9128|
002058  6008              STR      r0,[r1,#0]  ; stcond2
;;;641    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00205a  49c3              LDR      r1,|L1.9064|
00205c  3130              ADDS     r1,r1,#0x30
00205e  48c7              LDR      r0,|L1.9084|
002060  f7fffffe          BL       strstr
002064  49d1              LDR      r1,|L1.9132|
002066  6008              STR      r0,[r1,#0]  ; stcond3
;;;642    																			stcond4=strstr(uart_string_gsm, "DEACT");	
002068  49c2              LDR      r1,|L1.9076|
00206a  3118              ADDS     r1,r1,#0x18
00206c  48c3              LDR      r0,|L1.9084|
00206e  f7fffffe          BL       strstr
002072  49cf              LDR      r1,|L1.9136|
002074  6008              STR      r0,[r1,#0]  ; stcond4
;;;643    																	
;;;644    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
002076  48cc              LDR      r0,|L1.9128|
002078  6800              LDR      r0,[r0,#0]  ; stcond2
00207a  2800              CMP      r0,#0
00207c  d10f              BNE      |L1.8350|
00207e  48cb              LDR      r0,|L1.9132|
002080  6800              LDR      r0,[r0,#0]  ; stcond3
002082  2800              CMP      r0,#0
002084  d10b              BNE      |L1.8350|
002086  4608              MOV      r0,r1
002088  6800              LDR      r0,[r0,#0]  ; stcond4
00208a  2800              CMP      r0,#0
00208c  d107              BNE      |L1.8350|
00208e  48c5              LDR      r0,|L1.9124|
002090  6800              LDR      r0,[r0,#0]  ; stcond1
002092  2800              CMP      r0,#0
002094  d103              BNE      |L1.8350|
002096  48bf              LDR      r0,|L1.9108|
002098  6800              LDR      r0,[r0,#0]  ; tout
00209a  2805              CMP      r0,#5
00209c  ddd0              BLE      |L1.8256|
                  |L1.8350|
;;;645    															//	delay(10);clear();
;;;646    														uart_putchar(UART1_BASE_PTR,0x1A);
00209e  211a              MOVS     r1,#0x1a
0020a0  48bf              LDR      r0,|L1.9120|
0020a2  f7fffffe          BL       uart_putchar
;;;647    											//	delay(10);
;;;648    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0020a6  211a              MOVS     r1,#0x1a
0020a8  48bd              LDR      r0,|L1.9120|
0020aa  f7fffffe          BL       uart_putchar
0020ae  211a              MOVS     r1,#0x1a
0020b0  48bb              LDR      r0,|L1.9120|
0020b2  f7fffffe          BL       uart_putchar
0020b6  211a              MOVS     r1,#0x1a
0020b8  48b9              LDR      r0,|L1.9120|
0020ba  f7fffffe          BL       uart_putchar
;;;649    						
;;;650    
;;;651    
;;;652    									
;;;653    															
;;;654    															
;;;655    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;656    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;657    															
;;;658    														//qwe=strlen(uart_string_gsm);
;;;659    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;660    															delay(20);
0020be  2014              MOVS     r0,#0x14
0020c0  f7fffffe          BL       delay
;;;661    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
0020c4  49ab              LDR      r1,|L1.9076|
0020c6  3908              SUBS     r1,r1,#8
0020c8  48ac              LDR      r0,|L1.9084|
0020ca  f7fffffe          BL       strstr
0020ce  49b9              LDR      r1,|L1.9140|
0020d0  6008              STR      r0,[r1,#0]  ; con1d
;;;662    																if(!con1d)
0020d2  4608              MOV      r0,r1
0020d4  6800              LDR      r0,[r0,#0]  ; con1d
0020d6  e000              B        |L1.8410|
                  |L1.8408|
0020d8  e172              B        |L1.9152|
                  |L1.8410|
0020da  2800              CMP      r0,#0
0020dc  d17e              BNE      |L1.8668|
;;;663    																{
;;;664    																	
;;;665    																	
;;;666    	delay(100);
0020de  2064              MOVS     r0,#0x64
0020e0  f7fffffe          BL       delay
;;;667    		clear();//memset(uart_string_gsm,0,5000);
0020e4  f7fffffe          BL       clear
;;;668    	
;;;669    	memset(at_,0,100);
0020e8  2164              MOVS     r1,#0x64
0020ea  48a0              LDR      r0,|L1.9068|
0020ec  f7fffffe          BL       __aeabi_memclr
;;;670    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0020f0  48a6              LDR      r0,|L1.9100|
0020f2  f7fffffe          BL       strlen
0020f6  1c44              ADDS     r4,r0,#1
0020f8  4623              MOV      r3,r4
0020fa  4aaf              LDR      r2,|L1.9144|
0020fc  499d              LDR      r1,|L1.9076|
0020fe  313c              ADDS     r1,r1,#0x3c
002100  489a              LDR      r0,|L1.9068|
002102  f7fffffe          BL       __2sprintf
;;;671    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002106  2005              MOVS     r0,#5
002108  4b9a              LDR      r3,|L1.9076|
00210a  461a              MOV      r2,r3
00210c  3260              ADDS     r2,r2,#0x60
00210e  a19a              ADR      r1,|L1.9080|
002110  9000              STR      r0,[sp,#0]
002112  4896              LDR      r0,|L1.9068|
002114  f7fffffe          BL       send_SD
;;;672    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;673    //	if(strstr(uart_string_gsm,"ERROR")){
;;;674    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;675    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;676    //	}
;;;677    	
;;;678    clear();	
002118  f7fffffe          BL       clear
;;;679    									k2=0;									//string array counter for uart 1
00211c  2000              MOVS     r0,#0
00211e  499e              LDR      r1,|L1.9112|
002120  6008              STR      r0,[r1,#0]  ; k2
;;;680    									tout=0;	
002122  499c              LDR      r1,|L1.9108|
002124  6008              STR      r0,[r1,#0]  ; tout
;;;681    		for(k=0;k<strlen(data);k++)
002126  499d              LDR      r1,|L1.9116|
002128  6008              STR      r0,[r1,#0]  ; k
00212a  e00b              B        |L1.8516|
                  |L1.8492|
;;;682    		{
;;;683    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00212c  4897              LDR      r0,|L1.9100|
00212e  4a9b              LDR      r2,|L1.9116|
002130  6812              LDR      r2,[r2,#0]  ; k
002132  5c81              LDRB     r1,[r0,r2]
002134  489a              LDR      r0,|L1.9120|
002136  f7fffffe          BL       uart_putchar
00213a  4898              LDR      r0,|L1.9116|
00213c  6800              LDR      r0,[r0,#0]            ;681  ; k
00213e  1c40              ADDS     r0,r0,#1              ;681
002140  4996              LDR      r1,|L1.9116|
002142  6008              STR      r0,[r1,#0]            ;681  ; k
                  |L1.8516|
002144  4891              LDR      r0,|L1.9100|
002146  f7fffffe          BL       strlen
00214a  4994              LDR      r1,|L1.9116|
00214c  6809              LDR      r1,[r1,#0]            ;681  ; k
00214e  4288              CMP      r0,r1                 ;681
002150  d8ec              BHI      |L1.8492|
;;;684    		}	
;;;685    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002152  210a              MOVS     r1,#0xa
002154  4892              LDR      r0,|L1.9120|
002156  f7fffffe          BL       uart_putchar
00215a  210a              MOVS     r1,#0xa
00215c  4890              LDR      r0,|L1.9120|
00215e  f7fffffe          BL       uart_putchar
002162  210a              MOVS     r1,#0xa
002164  488e              LDR      r0,|L1.9120|
002166  f7fffffe          BL       uart_putchar
00216a  210a              MOVS     r1,#0xa
00216c  488c              LDR      r0,|L1.9120|
00216e  f7fffffe          BL       uart_putchar
002172  210a              MOVS     r1,#0xa
002174  488a              LDR      r0,|L1.9120|
002176  f7fffffe          BL       uart_putchar
00217a  210a              MOVS     r1,#0xa
00217c  4888              LDR      r0,|L1.9120|
00217e  f7fffffe          BL       uart_putchar
002182  210a              MOVS     r1,#0xa
002184  4886              LDR      r0,|L1.9120|
002186  f7fffffe          BL       uart_putchar
00218a  210a              MOVS     r1,#0xa
00218c  4884              LDR      r0,|L1.9120|
00218e  f7fffffe          BL       uart_putchar
002192  210a              MOVS     r1,#0xa
002194  4882              LDR      r0,|L1.9120|
002196  f7fffffe          BL       uart_putchar
00219a  210a              MOVS     r1,#0xa
00219c  4880              LDR      r0,|L1.9120|
00219e  f7fffffe          BL       uart_putchar
0021a2  210a              MOVS     r1,#0xa
0021a4  487e              LDR      r0,|L1.9120|
0021a6  f7fffffe          BL       uart_putchar
0021aa  210a              MOVS     r1,#0xa
0021ac  487c              LDR      r0,|L1.9120|
0021ae  f7fffffe          BL       uart_putchar
0021b2  210a              MOVS     r1,#0xa
0021b4  487a              LDR      r0,|L1.9120|
0021b6  f7fffffe          BL       uart_putchar
0021ba  210a              MOVS     r1,#0xa
0021bc  4878              LDR      r0,|L1.9120|
0021be  f7fffffe          BL       uart_putchar
0021c2  210a              MOVS     r1,#0xa
0021c4  4876              LDR      r0,|L1.9120|
0021c6  f7fffffe          BL       uart_putchar
0021ca  210a              MOVS     r1,#0xa
0021cc  4874              LDR      r0,|L1.9120|
0021ce  f7fffffe          BL       uart_putchar
0021d2  210a              MOVS     r1,#0xa
0021d4  4872              LDR      r0,|L1.9120|
0021d6  f7fffffe          BL       uart_putchar
0021da  e000              B        |L1.8670|
                  |L1.8668|
0021dc  e0bd              B        |L1.9050|
                  |L1.8670|
0021de  210a              MOVS     r1,#0xa
0021e0  486f              LDR      r0,|L1.9120|
0021e2  f7fffffe          BL       uart_putchar
0021e6  210a              MOVS     r1,#0xa
0021e8  486d              LDR      r0,|L1.9120|
0021ea  f7fffffe          BL       uart_putchar
0021ee  210a              MOVS     r1,#0xa
0021f0  486b              LDR      r0,|L1.9120|
0021f2  f7fffffe          BL       uart_putchar
0021f6  210a              MOVS     r1,#0xa
0021f8  4869              LDR      r0,|L1.9120|
0021fa  f7fffffe          BL       uart_putchar
0021fe  210a              MOVS     r1,#0xa
002200  4867              LDR      r0,|L1.9120|
002202  f7fffffe          BL       uart_putchar
002206  210a              MOVS     r1,#0xa
002208  4865              LDR      r0,|L1.9120|
00220a  f7fffffe          BL       uart_putchar
00220e  210a              MOVS     r1,#0xa
002210  4863              LDR      r0,|L1.9120|
002212  f7fffffe          BL       uart_putchar
002216  210a              MOVS     r1,#0xa
002218  4861              LDR      r0,|L1.9120|
00221a  f7fffffe          BL       uart_putchar
00221e  210a              MOVS     r1,#0xa
002220  485f              LDR      r0,|L1.9120|
002222  f7fffffe          BL       uart_putchar
002226  210a              MOVS     r1,#0xa
002228  485d              LDR      r0,|L1.9120|
00222a  f7fffffe          BL       uart_putchar
00222e  210a              MOVS     r1,#0xa
002230  485b              LDR      r0,|L1.9120|
002232  f7fffffe          BL       uart_putchar
002236  210a              MOVS     r1,#0xa
002238  4859              LDR      r0,|L1.9120|
00223a  f7fffffe          BL       uart_putchar
00223e  210a              MOVS     r1,#0xa
002240  4857              LDR      r0,|L1.9120|
002242  f7fffffe          BL       uart_putchar
002246  210a              MOVS     r1,#0xa
002248  4855              LDR      r0,|L1.9120|
00224a  f7fffffe          BL       uart_putchar
00224e  210a              MOVS     r1,#0xa
002250  4853              LDR      r0,|L1.9120|
002252  f7fffffe          BL       uart_putchar
002256  210a              MOVS     r1,#0xa
002258  4851              LDR      r0,|L1.9120|
00225a  f7fffffe          BL       uart_putchar
00225e  210a              MOVS     r1,#0xa
002260  484f              LDR      r0,|L1.9120|
002262  f7fffffe          BL       uart_putchar
002266  210a              MOVS     r1,#0xa
002268  484d              LDR      r0,|L1.9120|
00226a  f7fffffe          BL       uart_putchar
00226e  210a              MOVS     r1,#0xa
002270  484b              LDR      r0,|L1.9120|
002272  f7fffffe          BL       uart_putchar
002276  210a              MOVS     r1,#0xa
002278  4849              LDR      r0,|L1.9120|
00227a  f7fffffe          BL       uart_putchar
00227e  210a              MOVS     r1,#0xa
002280  4847              LDR      r0,|L1.9120|
002282  f7fffffe          BL       uart_putchar
002286  210a              MOVS     r1,#0xa
002288  4845              LDR      r0,|L1.9120|
00228a  f7fffffe          BL       uart_putchar
00228e  210a              MOVS     r1,#0xa
002290  4843              LDR      r0,|L1.9120|
002292  f7fffffe          BL       uart_putchar
002296  210a              MOVS     r1,#0xa
002298  4841              LDR      r0,|L1.9120|
00229a  f7fffffe          BL       uart_putchar
00229e  210a              MOVS     r1,#0xa
0022a0  483f              LDR      r0,|L1.9120|
0022a2  f7fffffe          BL       uart_putchar
0022a6  210a              MOVS     r1,#0xa
0022a8  483d              LDR      r0,|L1.9120|
0022aa  f7fffffe          BL       uart_putchar
0022ae  210a              MOVS     r1,#0xa
0022b0  483b              LDR      r0,|L1.9120|
0022b2  f7fffffe          BL       uart_putchar
0022b6  210a              MOVS     r1,#0xa
0022b8  4839              LDR      r0,|L1.9120|
0022ba  f7fffffe          BL       uart_putchar
0022be  210a              MOVS     r1,#0xa
0022c0  4837              LDR      r0,|L1.9120|
0022c2  f7fffffe          BL       uart_putchar
0022c6  210a              MOVS     r1,#0xa
0022c8  4835              LDR      r0,|L1.9120|
0022ca  f7fffffe          BL       uart_putchar
0022ce  210a              MOVS     r1,#0xa
0022d0  4833              LDR      r0,|L1.9120|
0022d2  f7fffffe          BL       uart_putchar
0022d6  210a              MOVS     r1,#0xa
0022d8  4831              LDR      r0,|L1.9120|
0022da  f7fffffe          BL       uart_putchar
0022de  210a              MOVS     r1,#0xa
0022e0  482f              LDR      r0,|L1.9120|
0022e2  f7fffffe          BL       uart_putchar
0022e6  210a              MOVS     r1,#0xa
0022e8  482d              LDR      r0,|L1.9120|
0022ea  f7fffffe          BL       uart_putchar
0022ee  210a              MOVS     r1,#0xa
0022f0  482b              LDR      r0,|L1.9120|
0022f2  f7fffffe          BL       uart_putchar
0022f6  210a              MOVS     r1,#0xa
0022f8  4829              LDR      r0,|L1.9120|
0022fa  f7fffffe          BL       uart_putchar
0022fe  210a              MOVS     r1,#0xa
002300  4827              LDR      r0,|L1.9120|
002302  f7fffffe          BL       uart_putchar
002306  210a              MOVS     r1,#0xa
002308  4825              LDR      r0,|L1.9120|
00230a  f7fffffe          BL       uart_putchar
00230e  210a              MOVS     r1,#0xa
002310  4823              LDR      r0,|L1.9120|
002312  f7fffffe          BL       uart_putchar
002316  210a              MOVS     r1,#0xa
002318  4821              LDR      r0,|L1.9120|
00231a  f7fffffe          BL       uart_putchar
;;;686    									//memset(data,0,1000);
;;;687    														//timer counts to wait for characters in uart 1 									
;;;688    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00231e  bf00              NOP      
                  |L1.8992|
002320  4926              LDR      r1,|L1.9148|
002322  4816              LDR      r0,|L1.9084|
002324  f7fffffe          BL       strstr
002328  2800              CMP      r0,#0
00232a  d109              BNE      |L1.9024|
00232c  4911              LDR      r1,|L1.9076|
00232e  4813              LDR      r0,|L1.9084|
002330  f7fffffe          BL       strstr
002334  2800              CMP      r0,#0
002336  d103              BNE      |L1.9024|
002338  4816              LDR      r0,|L1.9108|
00233a  6800              LDR      r0,[r0,#0]  ; tout
00233c  2805              CMP      r0,#5
00233e  ddef              BLE      |L1.8992|
                  |L1.9024|
;;;689    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;690    									}
;;;691    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002340  f7fffffe          BL       clear
;;;692    									//clear();
;;;693    									memset(data,0,strlen(data));
002344  4811              LDR      r0,|L1.9100|
002346  f7fffffe          BL       strlen
00234a  4604              MOV      r4,r0
00234c  4621              MOV      r1,r4
00234e  480f              LDR      r0,|L1.9100|
002350  f7fffffe          BL       __aeabi_memclr
;;;694    									clear();
002354  f7fffffe          BL       clear
002358  e171              B        |L1.9790|
                  |L1.9050|
;;;695    
;;;696    								
;;;697    																	
;;;698    																	
;;;699    								//								log_it();								
;;;700    																}else{send_chunk();}													
00235a  f7fffffe          BL       send_chunk
00235e  e16e              B        |L1.9790|
                  |L1.9056|
                          DCD      port
                  |L1.9060|
                          DCD      ||ip||
                  |L1.9064|
                          DCD      ||.text||+0x1238
                  |L1.9068|
                          DCD      at_
                  |L1.9072|
                          DCD      tmeout
                  |L1.9076|
                          DCD      ||.text||+0x8cc
                  |L1.9080|
002378  3e00              DCB      ">",0
00237a  00                DCB      0
00237b  00                DCB      0
                  |L1.9084|
                          DCD      uart_string_gsm
                  |L1.9088|
                          DCD      cond
                  |L1.9092|
                          DCD      0x00001388
                  |L1.9096|
002388  0a00              DCB      "\n",0
00238a  00                DCB      0
00238b  00                DCB      0
                  |L1.9100|
                          DCD      data
                  |L1.9104|
                          DCD      len
                  |L1.9108|
                          DCD      tout
                  |L1.9112|
                          DCD      ||k2||
                  |L1.9116|
                          DCD      k
                  |L1.9120|
                          DCD      0x4006b000
                  |L1.9124|
                          DCD      stcond1
                  |L1.9128|
                          DCD      stcond2
                  |L1.9132|
                          DCD      stcond3
                  |L1.9136|
                          DCD      stcond4
                  |L1.9140|
                          DCD      con1d
                  |L1.9144|
                          DCD      drive
                  |L1.9148|
                          DCD      ||.text||+0xd3c
                  |L1.9152|
;;;701    								//checks for the sd_data available
;;;702    								}
;;;703    								//con1d=strstr(uart_string_gsm,"OK");
;;;704    								else
;;;705    								{
;;;706    									
;;;707    									
;;;708    									
;;;709    	delay(100);
0023c0  2064              MOVS     r0,#0x64
0023c2  f7fffffe          BL       delay
;;;710    		clear();//memset(uart_string_gsm,0,5000);
0023c6  f7fffffe          BL       clear
;;;711    	
;;;712    	memset(at_,0,100);
0023ca  2164              MOVS     r1,#0x64
0023cc  48f7              LDR      r0,|L1.10156|
0023ce  f7fffffe          BL       __aeabi_memclr
;;;713    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0023d2  48f7              LDR      r0,|L1.10160|
0023d4  f7fffffe          BL       strlen
0023d8  1c44              ADDS     r4,r0,#1
0023da  4623              MOV      r3,r4
0023dc  4af5              LDR      r2,|L1.10164|
0023de  49f6              LDR      r1,|L1.10168|
0023e0  48f2              LDR      r0,|L1.10156|
0023e2  f7fffffe          BL       __2sprintf
;;;714    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0023e6  2005              MOVS     r0,#5
0023e8  4bf3              LDR      r3,|L1.10168|
0023ea  3b3c              SUBS     r3,r3,#0x3c
0023ec  461a              MOV      r2,r3
0023ee  3260              ADDS     r2,r2,#0x60
0023f0  a1f2              ADR      r1,|L1.10172|
0023f2  9000              STR      r0,[sp,#0]
0023f4  48ed              LDR      r0,|L1.10156|
0023f6  f7fffffe          BL       send_SD
;;;715    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;716    //	if(strstr(uart_string_gsm,"ERROR")){
;;;717    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;718    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;719    //	}
;;;720    	
;;;721    clear();	
0023fa  f7fffffe          BL       clear
;;;722    									k2=0;									//string array counter for uart 1
0023fe  2000              MOVS     r0,#0
002400  49ef              LDR      r1,|L1.10176|
002402  6008              STR      r0,[r1,#0]  ; k2
;;;723    									tout=0;	
002404  49ef              LDR      r1,|L1.10180|
002406  6008              STR      r0,[r1,#0]  ; tout
;;;724    		for(k=0;k<strlen(data);k++)
002408  49ef              LDR      r1,|L1.10184|
00240a  6008              STR      r0,[r1,#0]  ; k
00240c  e00b              B        |L1.9254|
                  |L1.9230|
;;;725    		{
;;;726    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00240e  48e8              LDR      r0,|L1.10160|
002410  4aed              LDR      r2,|L1.10184|
002412  6812              LDR      r2,[r2,#0]  ; k
002414  5c81              LDRB     r1,[r0,r2]
002416  48ed              LDR      r0,|L1.10188|
002418  f7fffffe          BL       uart_putchar
00241c  48ea              LDR      r0,|L1.10184|
00241e  6800              LDR      r0,[r0,#0]            ;724  ; k
002420  1c40              ADDS     r0,r0,#1              ;724
002422  49e9              LDR      r1,|L1.10184|
002424  6008              STR      r0,[r1,#0]            ;724  ; k
                  |L1.9254|
002426  48e2              LDR      r0,|L1.10160|
002428  f7fffffe          BL       strlen
00242c  49e6              LDR      r1,|L1.10184|
00242e  6809              LDR      r1,[r1,#0]            ;724  ; k
002430  4288              CMP      r0,r1                 ;724
002432  d8ec              BHI      |L1.9230|
;;;727    		}	
;;;728    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002434  210a              MOVS     r1,#0xa
002436  48e5              LDR      r0,|L1.10188|
002438  f7fffffe          BL       uart_putchar
00243c  210a              MOVS     r1,#0xa
00243e  48e3              LDR      r0,|L1.10188|
002440  f7fffffe          BL       uart_putchar
002444  210a              MOVS     r1,#0xa
002446  48e1              LDR      r0,|L1.10188|
002448  f7fffffe          BL       uart_putchar
00244c  210a              MOVS     r1,#0xa
00244e  48df              LDR      r0,|L1.10188|
002450  f7fffffe          BL       uart_putchar
002454  210a              MOVS     r1,#0xa
002456  48dd              LDR      r0,|L1.10188|
002458  f7fffffe          BL       uart_putchar
00245c  210a              MOVS     r1,#0xa
00245e  48db              LDR      r0,|L1.10188|
002460  f7fffffe          BL       uart_putchar
002464  210a              MOVS     r1,#0xa
002466  48d9              LDR      r0,|L1.10188|
002468  f7fffffe          BL       uart_putchar
00246c  210a              MOVS     r1,#0xa
00246e  48d7              LDR      r0,|L1.10188|
002470  f7fffffe          BL       uart_putchar
002474  210a              MOVS     r1,#0xa
002476  48d5              LDR      r0,|L1.10188|
002478  f7fffffe          BL       uart_putchar
00247c  210a              MOVS     r1,#0xa
00247e  48d3              LDR      r0,|L1.10188|
002480  f7fffffe          BL       uart_putchar
002484  210a              MOVS     r1,#0xa
002486  48d1              LDR      r0,|L1.10188|
002488  f7fffffe          BL       uart_putchar
00248c  210a              MOVS     r1,#0xa
00248e  48cf              LDR      r0,|L1.10188|
002490  f7fffffe          BL       uart_putchar
002494  210a              MOVS     r1,#0xa
002496  48cd              LDR      r0,|L1.10188|
002498  f7fffffe          BL       uart_putchar
00249c  210a              MOVS     r1,#0xa
00249e  48cb              LDR      r0,|L1.10188|
0024a0  f7fffffe          BL       uart_putchar
0024a4  210a              MOVS     r1,#0xa
0024a6  48c9              LDR      r0,|L1.10188|
0024a8  f7fffffe          BL       uart_putchar
0024ac  210a              MOVS     r1,#0xa
0024ae  48c7              LDR      r0,|L1.10188|
0024b0  f7fffffe          BL       uart_putchar
0024b4  210a              MOVS     r1,#0xa
0024b6  48c5              LDR      r0,|L1.10188|
0024b8  f7fffffe          BL       uart_putchar
0024bc  210a              MOVS     r1,#0xa
0024be  48c3              LDR      r0,|L1.10188|
0024c0  f7fffffe          BL       uart_putchar
0024c4  210a              MOVS     r1,#0xa
0024c6  48c1              LDR      r0,|L1.10188|
0024c8  f7fffffe          BL       uart_putchar
0024cc  210a              MOVS     r1,#0xa
0024ce  48bf              LDR      r0,|L1.10188|
0024d0  f7fffffe          BL       uart_putchar
0024d4  210a              MOVS     r1,#0xa
0024d6  48bd              LDR      r0,|L1.10188|
0024d8  f7fffffe          BL       uart_putchar
0024dc  210a              MOVS     r1,#0xa
0024de  48bb              LDR      r0,|L1.10188|
0024e0  f7fffffe          BL       uart_putchar
0024e4  210a              MOVS     r1,#0xa
0024e6  48b9              LDR      r0,|L1.10188|
0024e8  f7fffffe          BL       uart_putchar
0024ec  210a              MOVS     r1,#0xa
0024ee  48b7              LDR      r0,|L1.10188|
0024f0  f7fffffe          BL       uart_putchar
0024f4  210a              MOVS     r1,#0xa
0024f6  48b5              LDR      r0,|L1.10188|
0024f8  f7fffffe          BL       uart_putchar
0024fc  210a              MOVS     r1,#0xa
0024fe  48b3              LDR      r0,|L1.10188|
002500  f7fffffe          BL       uart_putchar
002504  210a              MOVS     r1,#0xa
002506  48b1              LDR      r0,|L1.10188|
002508  f7fffffe          BL       uart_putchar
00250c  210a              MOVS     r1,#0xa
00250e  48af              LDR      r0,|L1.10188|
002510  f7fffffe          BL       uart_putchar
002514  210a              MOVS     r1,#0xa
002516  48ad              LDR      r0,|L1.10188|
002518  f7fffffe          BL       uart_putchar
00251c  210a              MOVS     r1,#0xa
00251e  48ab              LDR      r0,|L1.10188|
002520  f7fffffe          BL       uart_putchar
002524  210a              MOVS     r1,#0xa
002526  48a9              LDR      r0,|L1.10188|
002528  f7fffffe          BL       uart_putchar
00252c  210a              MOVS     r1,#0xa
00252e  48a7              LDR      r0,|L1.10188|
002530  f7fffffe          BL       uart_putchar
002534  210a              MOVS     r1,#0xa
002536  48a5              LDR      r0,|L1.10188|
002538  f7fffffe          BL       uart_putchar
00253c  210a              MOVS     r1,#0xa
00253e  48a3              LDR      r0,|L1.10188|
002540  f7fffffe          BL       uart_putchar
002544  210a              MOVS     r1,#0xa
002546  48a1              LDR      r0,|L1.10188|
002548  f7fffffe          BL       uart_putchar
00254c  210a              MOVS     r1,#0xa
00254e  489f              LDR      r0,|L1.10188|
002550  f7fffffe          BL       uart_putchar
002554  210a              MOVS     r1,#0xa
002556  489d              LDR      r0,|L1.10188|
002558  f7fffffe          BL       uart_putchar
00255c  210a              MOVS     r1,#0xa
00255e  489b              LDR      r0,|L1.10188|
002560  f7fffffe          BL       uart_putchar
002564  210a              MOVS     r1,#0xa
002566  4899              LDR      r0,|L1.10188|
002568  f7fffffe          BL       uart_putchar
00256c  210a              MOVS     r1,#0xa
00256e  4897              LDR      r0,|L1.10188|
002570  f7fffffe          BL       uart_putchar
002574  210a              MOVS     r1,#0xa
002576  4895              LDR      r0,|L1.10188|
002578  f7fffffe          BL       uart_putchar
00257c  210a              MOVS     r1,#0xa
00257e  4893              LDR      r0,|L1.10188|
002580  f7fffffe          BL       uart_putchar
002584  210a              MOVS     r1,#0xa
002586  4891              LDR      r0,|L1.10188|
002588  f7fffffe          BL       uart_putchar
00258c  210a              MOVS     r1,#0xa
00258e  488f              LDR      r0,|L1.10188|
002590  f7fffffe          BL       uart_putchar
002594  210a              MOVS     r1,#0xa
002596  488d              LDR      r0,|L1.10188|
002598  f7fffffe          BL       uart_putchar
00259c  210a              MOVS     r1,#0xa
00259e  488b              LDR      r0,|L1.10188|
0025a0  f7fffffe          BL       uart_putchar
0025a4  210a              MOVS     r1,#0xa
0025a6  4889              LDR      r0,|L1.10188|
0025a8  f7fffffe          BL       uart_putchar
0025ac  210a              MOVS     r1,#0xa
0025ae  4887              LDR      r0,|L1.10188|
0025b0  f7fffffe          BL       uart_putchar
0025b4  210a              MOVS     r1,#0xa
0025b6  4885              LDR      r0,|L1.10188|
0025b8  f7fffffe          BL       uart_putchar
0025bc  210a              MOVS     r1,#0xa
0025be  4883              LDR      r0,|L1.10188|
0025c0  f7fffffe          BL       uart_putchar
0025c4  210a              MOVS     r1,#0xa
0025c6  4881              LDR      r0,|L1.10188|
0025c8  f7fffffe          BL       uart_putchar
0025cc  210a              MOVS     r1,#0xa
0025ce  487f              LDR      r0,|L1.10188|
0025d0  f7fffffe          BL       uart_putchar
0025d4  210a              MOVS     r1,#0xa
0025d6  487d              LDR      r0,|L1.10188|
0025d8  f7fffffe          BL       uart_putchar
0025dc  210a              MOVS     r1,#0xa
0025de  487b              LDR      r0,|L1.10188|
0025e0  f7fffffe          BL       uart_putchar
0025e4  210a              MOVS     r1,#0xa
0025e6  4879              LDR      r0,|L1.10188|
0025e8  f7fffffe          BL       uart_putchar
0025ec  210a              MOVS     r1,#0xa
0025ee  4877              LDR      r0,|L1.10188|
0025f0  f7fffffe          BL       uart_putchar
0025f4  210a              MOVS     r1,#0xa
0025f6  4875              LDR      r0,|L1.10188|
0025f8  f7fffffe          BL       uart_putchar
;;;729    									//memset(data,0,1000);
;;;730    														//timer counts to wait for characters in uart 1 									
;;;731    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0025fc  bf00              NOP      
                  |L1.9726|
0025fe  4974              LDR      r1,|L1.10192|
002600  4874              LDR      r0,|L1.10196|
002602  f7fffffe          BL       strstr
002606  2800              CMP      r0,#0
002608  d10a              BNE      |L1.9760|
00260a  496b              LDR      r1,|L1.10168|
00260c  393c              SUBS     r1,r1,#0x3c
00260e  4871              LDR      r0,|L1.10196|
002610  f7fffffe          BL       strstr
002614  2800              CMP      r0,#0
002616  d103              BNE      |L1.9760|
002618  486a              LDR      r0,|L1.10180|
00261a  6800              LDR      r0,[r0,#0]  ; tout
00261c  2805              CMP      r0,#5
00261e  ddee              BLE      |L1.9726|
                  |L1.9760|
;;;732    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;733    									}
;;;734    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002620  f7fffffe          BL       clear
;;;735    									//clear();
;;;736    									memset(data,0,strlen(data));
002624  4862              LDR      r0,|L1.10160|
002626  f7fffffe          BL       strlen
00262a  4604              MOV      r4,r0
00262c  4621              MOV      r1,r4
00262e  4860              LDR      r0,|L1.10160|
002630  f7fffffe          BL       __aeabi_memclr
;;;737    									clear();
002634  f7fffffe          BL       clear
002638  e001              B        |L1.9790|
                  |L1.9786|
;;;738    
;;;739    								
;;;740    									
;;;741    									
;;;742    									
;;;743    								//	log_it();			//otherwize log it					
;;;744    								}
;;;745    
;;;746    																
;;;747    //delay(50);
;;;748    
;;;749    //else{
;;;750    //log_it();}
;;;751    								
;;;752    								
;;;753    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;754    	else
;;;755    	{
;;;756    		send_chunk();
00263a  f7fffffe          BL       send_chunk
                  |L1.9790|
;;;757    	}		
;;;758    								
;;;759    								
;;;760    								
;;;761    	memset(data,0,strlen(data));	
00263e  485c              LDR      r0,|L1.10160|
002640  f7fffffe          BL       strlen
002644  4604              MOV      r4,r0
002646  4621              MOV      r1,r4
002648  4859              LDR      r0,|L1.10160|
00264a  f7fffffe          BL       __aeabi_memclr
;;;762    	uart_putchar(UART1_BASE_PTR, 0x1A);
00264e  211a              MOVS     r1,#0x1a
002650  485e              LDR      r0,|L1.10188|
002652  f7fffffe          BL       uart_putchar
;;;763    	
;;;764    }
002656  bd38              POP      {r3-r5,pc}
;;;765    	
                          ENDP

                  send_tcp2 PROC
;;;780    
;;;781    void send_tcp2()
002658  b538              PUSH     {r3-r5,lr}
;;;782    {	
;;;783    memset(stcond1,0,strlen(stcond1));	
00265a  485f              LDR      r0,|L1.10200|
00265c  6800              LDR      r0,[r0,#0]  ; stcond1
00265e  f7fffffe          BL       strlen
002662  4604              MOV      r4,r0
002664  4621              MOV      r1,r4
002666  485c              LDR      r0,|L1.10200|
002668  6800              LDR      r0,[r0,#0]  ; stcond1
00266a  f7fffffe          BL       __aeabi_memclr
;;;784    memset(con1d,0,strlen(con1d));	
00266e  485b              LDR      r0,|L1.10204|
002670  6800              LDR      r0,[r0,#0]  ; con1d
002672  f7fffffe          BL       strlen
002676  4604              MOV      r4,r0
002678  4621              MOV      r1,r4
00267a  4858              LDR      r0,|L1.10204|
00267c  6800              LDR      r0,[r0,#0]  ; con1d
00267e  f7fffffe          BL       __aeabi_memclr
;;;785    	
;;;786    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;787    						
;;;788    								cond=mystrstr(uart_string_gsm,'>');
002682  213e              MOVS     r1,#0x3e
002684  4853              LDR      r0,|L1.10196|
002686  f7fffffe          BL       mystrstr
00268a  4955              LDR      r1,|L1.10208|
00268c  7008              STRB     r0,[r1,#0]
;;;789    								if(cond)	
00268e  4608              MOV      r0,r1
002690  7800              LDRB     r0,[r0,#0]  ; cond
002692  2800              CMP      r0,#0
002694  d07e              BEQ      |L1.10132|
;;;790    								{
;;;791    									
;;;792    									clear();
002696  f7fffffe          BL       clear
;;;793    									memset(uart_string_gsm,0,5000);
00269a  4952              LDR      r1,|L1.10212|
00269c  484d              LDR      r0,|L1.10196|
00269e  f7fffffe          BL       __aeabi_memclr
;;;794    									strcat(data,"\n");
0026a2  a151              ADR      r1,|L1.10216|
0026a4  4842              LDR      r0,|L1.10160|
0026a6  f7fffffe          BL       strcat
;;;795    									len=strlen(data);
0026aa  4841              LDR      r0,|L1.10160|
0026ac  f7fffffe          BL       strlen
0026b0  494e              LDR      r1,|L1.10220|
0026b2  6008              STR      r0,[r1,#0]  ; len
;;;796    									tout=0;
0026b4  2000              MOVS     r0,#0
0026b6  4943              LDR      r1,|L1.10180|
0026b8  6008              STR      r0,[r1,#0]  ; tout
;;;797    									k2=0;
0026ba  4941              LDR      r1,|L1.10176|
0026bc  6008              STR      r0,[r1,#0]  ; k2
;;;798    									for(k=0;k<len;k++)
0026be  4942              LDR      r1,|L1.10184|
0026c0  6008              STR      r0,[r1,#0]  ; k
0026c2  e00b              B        |L1.9948|
                  |L1.9924|
;;;799    									{
;;;800    										uart_putchar(UART1_BASE_PTR, data[k]);
0026c4  483a              LDR      r0,|L1.10160|
0026c6  4a40              LDR      r2,|L1.10184|
0026c8  6812              LDR      r2,[r2,#0]  ; k
0026ca  5c81              LDRB     r1,[r0,r2]
0026cc  483f              LDR      r0,|L1.10188|
0026ce  f7fffffe          BL       uart_putchar
0026d2  483d              LDR      r0,|L1.10184|
0026d4  6800              LDR      r0,[r0,#0]            ;798  ; k
0026d6  1c40              ADDS     r0,r0,#1              ;798
0026d8  493b              LDR      r1,|L1.10184|
0026da  6008              STR      r0,[r1,#0]            ;798  ; k
                  |L1.9948|
0026dc  483a              LDR      r0,|L1.10184|
0026de  6800              LDR      r0,[r0,#0]            ;798  ; k
0026e0  4942              LDR      r1,|L1.10220|
0026e2  6809              LDR      r1,[r1,#0]            ;798  ; len
0026e4  4288              CMP      r0,r1                 ;798
0026e6  dbed              BLT      |L1.9924|
;;;801    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0026e8  211a              MOVS     r1,#0x1a
0026ea  4838              LDR      r0,|L1.10188|
0026ec  f7fffffe          BL       uart_putchar
;;;802    									do
0026f0  bf00              NOP      
                  |L1.9970|
;;;803    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0026f2  4931              LDR      r1,|L1.10168|
0026f4  3944              SUBS     r1,r1,#0x44
0026f6  4837              LDR      r0,|L1.10196|
0026f8  f7fffffe          BL       strstr
0026fc  4936              LDR      r1,|L1.10200|
0026fe  6008              STR      r0,[r1,#0]  ; stcond1
;;;804    																	stcond2=strstr(uart_string_gsm, "ERROR");
002700  492d              LDR      r1,|L1.10168|
002702  393c              SUBS     r1,r1,#0x3c
002704  4833              LDR      r0,|L1.10196|
002706  f7fffffe          BL       strstr
00270a  4939              LDR      r1,|L1.10224|
00270c  6008              STR      r0,[r1,#0]  ; stcond2
;;;805    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00270e  4939              LDR      r1,|L1.10228|
002710  4830              LDR      r0,|L1.10196|
002712  f7fffffe          BL       strstr
002716  4938              LDR      r1,|L1.10232|
002718  6008              STR      r0,[r1,#0]  ; stcond3
;;;806    																			stcond4=strstr(uart_string_gsm, "DEACT");	
00271a  4927              LDR      r1,|L1.10168|
00271c  3924              SUBS     r1,r1,#0x24
00271e  482d              LDR      r0,|L1.10196|
002720  f7fffffe          BL       strstr
002724  4935              LDR      r1,|L1.10236|
002726  6008              STR      r0,[r1,#0]  ; stcond4
;;;807    																	
;;;808    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
002728  4831              LDR      r0,|L1.10224|
00272a  6800              LDR      r0,[r0,#0]  ; stcond2
00272c  2800              CMP      r0,#0
00272e  d10f              BNE      |L1.10064|
002730  4831              LDR      r0,|L1.10232|
002732  6800              LDR      r0,[r0,#0]  ; stcond3
002734  2800              CMP      r0,#0
002736  d10b              BNE      |L1.10064|
002738  4608              MOV      r0,r1
00273a  6800              LDR      r0,[r0,#0]  ; stcond4
00273c  2800              CMP      r0,#0
00273e  d107              BNE      |L1.10064|
002740  4825              LDR      r0,|L1.10200|
002742  6800              LDR      r0,[r0,#0]  ; stcond1
002744  2800              CMP      r0,#0
002746  d103              BNE      |L1.10064|
002748  481e              LDR      r0,|L1.10180|
00274a  6800              LDR      r0,[r0,#0]  ; tout
00274c  2804              CMP      r0,#4
00274e  ddd0              BLE      |L1.9970|
                  |L1.10064|
;;;809    																//delay(10);clear();
;;;810    														uart_putchar(UART1_BASE_PTR,0x1A);
002750  211a              MOVS     r1,#0x1a
002752  481e              LDR      r0,|L1.10188|
002754  f7fffffe          BL       uart_putchar
;;;811    												//delay(10);
;;;812    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002758  211a              MOVS     r1,#0x1a
00275a  481c              LDR      r0,|L1.10188|
00275c  f7fffffe          BL       uart_putchar
002760  211a              MOVS     r1,#0x1a
002762  481a              LDR      r0,|L1.10188|
002764  f7fffffe          BL       uart_putchar
002768  211a              MOVS     r1,#0x1a
00276a  4818              LDR      r0,|L1.10188|
00276c  f7fffffe          BL       uart_putchar
;;;813    						
;;;814    									
;;;815    									
;;;816    									
;;;817    									
;;;818    									
;;;819    									
;;;820    									
;;;821    
;;;822    //									for(k=0;k<len;k++)
;;;823    //									{
;;;824    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;825    //									}
;;;826    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;827    
;;;828    //									
;;;829    //													k2=0;									//string array counter for uart 1
;;;830    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;831    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;832    //																{
;;;833    //																	timeout--;
;;;834    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;835    //																}
;;;836    																if(flagch==1){		int_erval=temp;flagch=0;	}
002770  4823              LDR      r0,|L1.10240|
002772  6800              LDR      r0,[r0,#0]  ; flagch
002774  2801              CMP      r0,#1
002776  d106              BNE      |L1.10118|
002778  4822              LDR      r0,|L1.10244|
00277a  6800              LDR      r0,[r0,#0]  ; temp
00277c  4922              LDR      r1,|L1.10248|
00277e  6008              STR      r0,[r1,#0]  ; int_erval
002780  2000              MOVS     r0,#0
002782  491f              LDR      r1,|L1.10240|
002784  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.10118|
;;;837    delay(50);
002786  2032              MOVS     r0,#0x32
002788  f7fffffe          BL       delay
;;;838    stcond1=strstr(uart_string_gsm,"SEND OK");								
00278c  490a              LDR      r1,|L1.10168|
00278e  3944              SUBS     r1,r1,#0x44
002790  4810              LDR      r0,|L1.10196|
002792  e000              B        |L1.10134|
                  |L1.10132|
002794  e003              B        |L1.10142|
                  |L1.10134|
002796  f7fffffe          BL       strstr
00279a  490f              LDR      r1,|L1.10200|
00279c  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.10142|
;;;839    								}
;;;840    //else{
;;;841    //log_it();
;;;842    //}
;;;843    
;;;844    
;;;845    if(!stcond1) // if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
00279e  480e              LDR      r0,|L1.10200|
0027a0  6800              LDR      r0,[r0,#0]  ; stcond1
0027a2  2800              CMP      r0,#0
0027a4  d032              BEQ      |L1.10252|
0027a6  f000ff49          BL       |L1.13884|
0027aa  0000              DCW      0x0000
                  |L1.10156|
                          DCD      at_
                  |L1.10160|
                          DCD      data
                  |L1.10164|
                          DCD      drive
                  |L1.10168|
                          DCD      ||.text||+0x908
                  |L1.10172|
0027bc  3e00              DCB      ">",0
0027be  00                DCB      0
0027bf  00                DCB      0
                  |L1.10176|
                          DCD      ||k2||
                  |L1.10180|
                          DCD      tout
                  |L1.10184|
                          DCD      k
                  |L1.10188|
                          DCD      0x4006b000
                  |L1.10192|
                          DCD      ||.text||+0xd3c
                  |L1.10196|
                          DCD      uart_string_gsm
                  |L1.10200|
                          DCD      stcond1
                  |L1.10204|
                          DCD      con1d
                  |L1.10208|
                          DCD      cond
                  |L1.10212|
                          DCD      0x00001388
                  |L1.10216|
0027e8  0a00              DCB      "\n",0
0027ea  00                DCB      0
0027eb  00                DCB      0
                  |L1.10220|
                          DCD      len
                  |L1.10224|
                          DCD      stcond2
                  |L1.10228|
                          DCD      ||.text||+0x1268
                  |L1.10232|
                          DCD      stcond3
                  |L1.10236|
                          DCD      stcond4
                  |L1.10240|
                          DCD      flagch
                  |L1.10244|
                          DCD      temp
                  |L1.10248|
                          DCD      int_erval
                  |L1.10252|
;;;846    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00280c  211a              MOVS     r1,#0x1a
00280e  48fe              LDR      r0,|L1.11272|
002810  f7fffffe          BL       uart_putchar
002814  f7fffffe          BL       clear
002818  200a              MOVS     r0,#0xa
00281a  f7fffffe          BL       delay
;;;847    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00281e  211a              MOVS     r1,#0x1a
002820  48f9              LDR      r0,|L1.11272|
002822  f7fffffe          BL       uart_putchar
002826  f7fffffe          BL       clear
00282a  200a              MOVS     r0,#0xa
00282c  f7fffffe          BL       delay
;;;848    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002830  211a              MOVS     r1,#0x1a
002832  48f5              LDR      r0,|L1.11272|
002834  f7fffffe          BL       uart_putchar
002838  f7fffffe          BL       clear
00283c  200a              MOVS     r0,#0xa
00283e  f7fffffe          BL       delay
;;;849    						//	remove_all_chars(data, '\n', '\n');
;;;850    	
;;;851    	//	strcat(data,"CH\n");	
;;;852    	
;;;853    	
;;;854    	delay(100);
002842  2064              MOVS     r0,#0x64
002844  f7fffffe          BL       delay
;;;855    		clear();//memset(uart_string_gsm,0,5000);
002848  f7fffffe          BL       clear
;;;856    	
;;;857    	memset(at_,0,100);
00284c  2164              MOVS     r1,#0x64
00284e  48ef              LDR      r0,|L1.11276|
002850  f7fffffe          BL       __aeabi_memclr
;;;858    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002854  48ee              LDR      r0,|L1.11280|
002856  f7fffffe          BL       strlen
00285a  1c44              ADDS     r4,r0,#1
00285c  4623              MOV      r3,r4
00285e  4aed              LDR      r2,|L1.11284|
002860  49ed              LDR      r1,|L1.11288|
002862  48ea              LDR      r0,|L1.11276|
002864  f7fffffe          BL       __2sprintf
;;;859    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002868  2005              MOVS     r0,#5
00286a  4beb              LDR      r3,|L1.11288|
00286c  3b3c              SUBS     r3,r3,#0x3c
00286e  461a              MOV      r2,r3
002870  3260              ADDS     r2,r2,#0x60
002872  a1ea              ADR      r1,|L1.11292|
002874  9000              STR      r0,[sp,#0]
002876  48e5              LDR      r0,|L1.11276|
002878  f7fffffe          BL       send_SD
;;;860    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;861    //	if(strstr(uart_string_gsm,"ERROR")){
;;;862    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;863    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;864    //	}
;;;865    	
;;;866    clear();	
00287c  f7fffffe          BL       clear
;;;867    									k2=0;									//string array counter for uart 1
002880  2000              MOVS     r0,#0
002882  49e7              LDR      r1,|L1.11296|
002884  6008              STR      r0,[r1,#0]  ; k2
;;;868    									tout=0;	
002886  49e7              LDR      r1,|L1.11300|
002888  6008              STR      r0,[r1,#0]  ; tout
;;;869    		for(k=0;k<strlen(data);k++)
00288a  49e7              LDR      r1,|L1.11304|
00288c  6008              STR      r0,[r1,#0]  ; k
00288e  e00b              B        |L1.10408|
                  |L1.10384|
;;;870    		{
;;;871    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002890  48df              LDR      r0,|L1.11280|
002892  4ae5              LDR      r2,|L1.11304|
002894  6812              LDR      r2,[r2,#0]  ; k
002896  5c81              LDRB     r1,[r0,r2]
002898  48db              LDR      r0,|L1.11272|
00289a  f7fffffe          BL       uart_putchar
00289e  48e2              LDR      r0,|L1.11304|
0028a0  6800              LDR      r0,[r0,#0]            ;869  ; k
0028a2  1c40              ADDS     r0,r0,#1              ;869
0028a4  49e0              LDR      r1,|L1.11304|
0028a6  6008              STR      r0,[r1,#0]            ;869  ; k
                  |L1.10408|
0028a8  48d9              LDR      r0,|L1.11280|
0028aa  f7fffffe          BL       strlen
0028ae  49de              LDR      r1,|L1.11304|
0028b0  6809              LDR      r1,[r1,#0]            ;869  ; k
0028b2  4288              CMP      r0,r1                 ;869
0028b4  d8ec              BHI      |L1.10384|
;;;872    		}	
;;;873    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0028b6  210a              MOVS     r1,#0xa
0028b8  48d3              LDR      r0,|L1.11272|
0028ba  f7fffffe          BL       uart_putchar
0028be  210a              MOVS     r1,#0xa
0028c0  48d1              LDR      r0,|L1.11272|
0028c2  f7fffffe          BL       uart_putchar
0028c6  210a              MOVS     r1,#0xa
0028c8  48cf              LDR      r0,|L1.11272|
0028ca  f7fffffe          BL       uart_putchar
0028ce  210a              MOVS     r1,#0xa
0028d0  48cd              LDR      r0,|L1.11272|
0028d2  f7fffffe          BL       uart_putchar
0028d6  210a              MOVS     r1,#0xa
0028d8  48cb              LDR      r0,|L1.11272|
0028da  f7fffffe          BL       uart_putchar
0028de  210a              MOVS     r1,#0xa
0028e0  48c9              LDR      r0,|L1.11272|
0028e2  f7fffffe          BL       uart_putchar
0028e6  210a              MOVS     r1,#0xa
0028e8  48c7              LDR      r0,|L1.11272|
0028ea  f7fffffe          BL       uart_putchar
0028ee  210a              MOVS     r1,#0xa
0028f0  48c5              LDR      r0,|L1.11272|
0028f2  f7fffffe          BL       uart_putchar
0028f6  210a              MOVS     r1,#0xa
0028f8  48c3              LDR      r0,|L1.11272|
0028fa  f7fffffe          BL       uart_putchar
0028fe  210a              MOVS     r1,#0xa
002900  48c1              LDR      r0,|L1.11272|
002902  f7fffffe          BL       uart_putchar
002906  210a              MOVS     r1,#0xa
002908  48bf              LDR      r0,|L1.11272|
00290a  f7fffffe          BL       uart_putchar
00290e  210a              MOVS     r1,#0xa
002910  48bd              LDR      r0,|L1.11272|
002912  f7fffffe          BL       uart_putchar
002916  210a              MOVS     r1,#0xa
002918  48bb              LDR      r0,|L1.11272|
00291a  f7fffffe          BL       uart_putchar
00291e  210a              MOVS     r1,#0xa
002920  48b9              LDR      r0,|L1.11272|
002922  f7fffffe          BL       uart_putchar
002926  210a              MOVS     r1,#0xa
002928  48b7              LDR      r0,|L1.11272|
00292a  f7fffffe          BL       uart_putchar
00292e  210a              MOVS     r1,#0xa
002930  48b5              LDR      r0,|L1.11272|
002932  f7fffffe          BL       uart_putchar
002936  210a              MOVS     r1,#0xa
002938  48b3              LDR      r0,|L1.11272|
00293a  f7fffffe          BL       uart_putchar
00293e  210a              MOVS     r1,#0xa
002940  48b1              LDR      r0,|L1.11272|
002942  f7fffffe          BL       uart_putchar
002946  210a              MOVS     r1,#0xa
002948  48af              LDR      r0,|L1.11272|
00294a  f7fffffe          BL       uart_putchar
00294e  210a              MOVS     r1,#0xa
002950  48ad              LDR      r0,|L1.11272|
002952  f7fffffe          BL       uart_putchar
002956  210a              MOVS     r1,#0xa
002958  48ab              LDR      r0,|L1.11272|
00295a  f7fffffe          BL       uart_putchar
00295e  210a              MOVS     r1,#0xa
002960  48a9              LDR      r0,|L1.11272|
002962  f7fffffe          BL       uart_putchar
002966  210a              MOVS     r1,#0xa
002968  48a7              LDR      r0,|L1.11272|
00296a  f7fffffe          BL       uart_putchar
00296e  210a              MOVS     r1,#0xa
002970  48a5              LDR      r0,|L1.11272|
002972  f7fffffe          BL       uart_putchar
002976  210a              MOVS     r1,#0xa
002978  48a3              LDR      r0,|L1.11272|
00297a  f7fffffe          BL       uart_putchar
00297e  210a              MOVS     r1,#0xa
002980  48a1              LDR      r0,|L1.11272|
002982  f7fffffe          BL       uart_putchar
002986  210a              MOVS     r1,#0xa
002988  489f              LDR      r0,|L1.11272|
00298a  f7fffffe          BL       uart_putchar
00298e  210a              MOVS     r1,#0xa
002990  489d              LDR      r0,|L1.11272|
002992  f7fffffe          BL       uart_putchar
002996  210a              MOVS     r1,#0xa
002998  489b              LDR      r0,|L1.11272|
00299a  f7fffffe          BL       uart_putchar
00299e  210a              MOVS     r1,#0xa
0029a0  4899              LDR      r0,|L1.11272|
0029a2  f7fffffe          BL       uart_putchar
0029a6  210a              MOVS     r1,#0xa
0029a8  4897              LDR      r0,|L1.11272|
0029aa  f7fffffe          BL       uart_putchar
0029ae  210a              MOVS     r1,#0xa
0029b0  4895              LDR      r0,|L1.11272|
0029b2  f7fffffe          BL       uart_putchar
0029b6  210a              MOVS     r1,#0xa
0029b8  4893              LDR      r0,|L1.11272|
0029ba  f7fffffe          BL       uart_putchar
0029be  210a              MOVS     r1,#0xa
0029c0  4891              LDR      r0,|L1.11272|
0029c2  f7fffffe          BL       uart_putchar
0029c6  210a              MOVS     r1,#0xa
0029c8  488f              LDR      r0,|L1.11272|
0029ca  f7fffffe          BL       uart_putchar
0029ce  210a              MOVS     r1,#0xa
0029d0  488d              LDR      r0,|L1.11272|
0029d2  f7fffffe          BL       uart_putchar
0029d6  210a              MOVS     r1,#0xa
0029d8  488b              LDR      r0,|L1.11272|
0029da  f7fffffe          BL       uart_putchar
0029de  210a              MOVS     r1,#0xa
0029e0  4889              LDR      r0,|L1.11272|
0029e2  f7fffffe          BL       uart_putchar
0029e6  210a              MOVS     r1,#0xa
0029e8  4887              LDR      r0,|L1.11272|
0029ea  f7fffffe          BL       uart_putchar
0029ee  210a              MOVS     r1,#0xa
0029f0  4885              LDR      r0,|L1.11272|
0029f2  f7fffffe          BL       uart_putchar
0029f6  210a              MOVS     r1,#0xa
0029f8  4883              LDR      r0,|L1.11272|
0029fa  f7fffffe          BL       uart_putchar
0029fe  210a              MOVS     r1,#0xa
002a00  4881              LDR      r0,|L1.11272|
002a02  f7fffffe          BL       uart_putchar
002a06  210a              MOVS     r1,#0xa
002a08  487f              LDR      r0,|L1.11272|
002a0a  f7fffffe          BL       uart_putchar
002a0e  210a              MOVS     r1,#0xa
002a10  487d              LDR      r0,|L1.11272|
002a12  f7fffffe          BL       uart_putchar
002a16  210a              MOVS     r1,#0xa
002a18  487b              LDR      r0,|L1.11272|
002a1a  f7fffffe          BL       uart_putchar
002a1e  210a              MOVS     r1,#0xa
002a20  4879              LDR      r0,|L1.11272|
002a22  f7fffffe          BL       uart_putchar
002a26  210a              MOVS     r1,#0xa
002a28  4877              LDR      r0,|L1.11272|
002a2a  f7fffffe          BL       uart_putchar
002a2e  210a              MOVS     r1,#0xa
002a30  4875              LDR      r0,|L1.11272|
002a32  f7fffffe          BL       uart_putchar
002a36  210a              MOVS     r1,#0xa
002a38  4873              LDR      r0,|L1.11272|
002a3a  f7fffffe          BL       uart_putchar
002a3e  210a              MOVS     r1,#0xa
002a40  4871              LDR      r0,|L1.11272|
002a42  f7fffffe          BL       uart_putchar
002a46  210a              MOVS     r1,#0xa
002a48  486f              LDR      r0,|L1.11272|
002a4a  f7fffffe          BL       uart_putchar
002a4e  210a              MOVS     r1,#0xa
002a50  486d              LDR      r0,|L1.11272|
002a52  f7fffffe          BL       uart_putchar
002a56  210a              MOVS     r1,#0xa
002a58  486b              LDR      r0,|L1.11272|
002a5a  f7fffffe          BL       uart_putchar
002a5e  210a              MOVS     r1,#0xa
002a60  4869              LDR      r0,|L1.11272|
002a62  f7fffffe          BL       uart_putchar
002a66  210a              MOVS     r1,#0xa
002a68  4867              LDR      r0,|L1.11272|
002a6a  f7fffffe          BL       uart_putchar
002a6e  210a              MOVS     r1,#0xa
002a70  4865              LDR      r0,|L1.11272|
002a72  f7fffffe          BL       uart_putchar
002a76  210a              MOVS     r1,#0xa
002a78  4863              LDR      r0,|L1.11272|
002a7a  f7fffffe          BL       uart_putchar
;;;874    									//memset(data,0,1000);
;;;875    														//timer counts to wait for characters in uart 1 									
;;;876    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002a7e  bf00              NOP      
                  |L1.10880|
002a80  496a              LDR      r1,|L1.11308|
002a82  486b              LDR      r0,|L1.11312|
002a84  f7fffffe          BL       strstr
002a88  2800              CMP      r0,#0
002a8a  d10a              BNE      |L1.10914|
002a8c  4962              LDR      r1,|L1.11288|
002a8e  393c              SUBS     r1,r1,#0x3c
002a90  4867              LDR      r0,|L1.11312|
002a92  f7fffffe          BL       strstr
002a96  2800              CMP      r0,#0
002a98  d103              BNE      |L1.10914|
002a9a  4862              LDR      r0,|L1.11300|
002a9c  6800              LDR      r0,[r0,#0]  ; tout
002a9e  2805              CMP      r0,#5
002aa0  ddee              BLE      |L1.10880|
                  |L1.10914|
;;;877    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;878    									}
;;;879    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002aa2  f7fffffe          BL       clear
;;;880    									//clear();
;;;881    									memset(data,0,strlen(data));
002aa6  485a              LDR      r0,|L1.11280|
002aa8  f7fffffe          BL       strlen
002aac  4604              MOV      r4,r0
002aae  4621              MOV      r1,r4
002ab0  4857              LDR      r0,|L1.11280|
002ab2  f7fffffe          BL       __aeabi_memclr
;;;882    									clear();
002ab6  f7fffffe          BL       clear
;;;883    
;;;884    								
;;;885    	
;;;886    	
;;;887    	
;;;888    	//	log_it();		
;;;889    		memset(data,0,strlen(data));	
002aba  4855              LDR      r0,|L1.11280|
002abc  f7fffffe          BL       strlen
002ac0  4604              MOV      r4,r0
002ac2  4621              MOV      r1,r4
002ac4  4852              LDR      r0,|L1.11280|
002ac6  f7fffffe          BL       __aeabi_memclr
;;;890    									GPS_COLLECT();
002aca  f7fffffe          BL       GPS_COLLECT
;;;891    									strcat(data,"CH\n");	
002ace  4952              LDR      r1,|L1.11288|
002ad0  390c              SUBS     r1,r1,#0xc
002ad2  484f              LDR      r0,|L1.11280|
002ad4  f7fffffe          BL       strcat
;;;892    				
;;;893    					   	if(flagch!=1){
002ad8  4856              LDR      r0,|L1.11316|
002ada  6800              LDR      r0,[r0,#0]  ; flagch
002adc  2801              CMP      r0,#1
002ade  d009              BEQ      |L1.10996|
;;;894    							temp=int_erval;				
002ae0  4855              LDR      r0,|L1.11320|
002ae2  6800              LDR      r0,[r0,#0]  ; int_erval
002ae4  4955              LDR      r1,|L1.11324|
002ae6  6008              STR      r0,[r1,#0]  ; temp
;;;895    							int_erval=4;
002ae8  2004              MOVS     r0,#4
002aea  4953              LDR      r1,|L1.11320|
002aec  6008              STR      r0,[r1,#0]  ; int_erval
;;;896    							flagch=1;}
002aee  2001              MOVS     r0,#1
002af0  4950              LDR      r1,|L1.11316|
002af2  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.10996|
;;;897    							clear();	
002af4  f7fffffe          BL       clear
;;;898    
;;;899    
;;;900    //**************************************tcp_initialization();********************************//
;;;901    
;;;902    	
;;;903    msg_sim800(); 
002af8  f7fffffe          BL       msg_sim800
;;;904    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
002afc  2005              MOVS     r0,#5
002afe  4b46              LDR      r3,|L1.11288|
002b00  3b3c              SUBS     r3,r3,#0x3c
002b02  461a              MOV      r2,r3
002b04  3260              ADDS     r2,r2,#0x60
002b06  a14e              ADR      r1,|L1.11328|
002b08  9000              STR      r0,[sp,#0]
002b0a  4848              LDR      r0,|L1.11308|
002b0c  3028              ADDS     r0,r0,#0x28
002b0e  f7fffffe          BL       send_GSM
;;;905    delay(100);
002b12  2064              MOVS     r0,#0x64
002b14  f7fffffe          BL       delay
;;;906    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
002b18  2004              MOVS     r0,#4
002b1a  4b3f              LDR      r3,|L1.11288|
002b1c  3b3c              SUBS     r3,r3,#0x3c
002b1e  4a43              LDR      r2,|L1.11308|
002b20  3238              ADDS     r2,r2,#0x38
002b22  a147              ADR      r1,|L1.11328|
002b24  9000              STR      r0,[sp,#0]
002b26  4610              MOV      r0,r2
002b28  3014              ADDS     r0,r0,#0x14
002b2a  f7fffffe          BL       send_GSM
;;;907    GPS_COLLECT2();
002b2e  f7fffffe          BL       GPS_COLLECT2
;;;908    strcat(data,"CH\n");		
002b32  4939              LDR      r1,|L1.11288|
002b34  390c              SUBS     r1,r1,#0xc
002b36  4836              LDR      r0,|L1.11280|
002b38  f7fffffe          BL       strcat
;;;909    GPS_COLLECT2();
002b3c  f7fffffe          BL       GPS_COLLECT2
;;;910    strcat(data,"CH\n");	
002b40  4935              LDR      r1,|L1.11288|
002b42  390c              SUBS     r1,r1,#0xc
002b44  4832              LDR      r0,|L1.11280|
002b46  f7fffffe          BL       strcat
;;;911    GPS_COLLECT2();
002b4a  f7fffffe          BL       GPS_COLLECT2
;;;912    strcat(data,"CH\n");
002b4e  4932              LDR      r1,|L1.11288|
002b50  390c              SUBS     r1,r1,#0xc
002b52  482f              LDR      r0,|L1.11280|
002b54  f7fffffe          BL       strcat
;;;913    cond201=(strstr(uart_string_gsm, "OK"));
002b58  a139              ADR      r1,|L1.11328|
002b5a  4835              LDR      r0,|L1.11312|
002b5c  f7fffffe          BL       strstr
002b60  4938              LDR      r1,|L1.11332|
002b62  6008              STR      r0,[r1,#0]  ; cond201
;;;914    cond200=(strstr(uart_string_gsm, "ERROR"));
002b64  492c              LDR      r1,|L1.11288|
002b66  393c              SUBS     r1,r1,#0x3c
002b68  4831              LDR      r0,|L1.11312|
002b6a  f7fffffe          BL       strstr
002b6e  4936              LDR      r1,|L1.11336|
002b70  6008              STR      r0,[r1,#0]  ; cond200
;;;915    if((!(cond201|| cond200 ))  && sleep_flag != 1)
002b72  4834              LDR      r0,|L1.11332|
002b74  6800              LDR      r0,[r0,#0]  ; cond201
002b76  2800              CMP      r0,#0
                  |L1.11128|
002b78  d16a              BNE      |L1.11344|
002b7a  4608              MOV      r0,r1
002b7c  6800              LDR      r0,[r0,#0]  ; cond200
002b7e  2800              CMP      r0,#0
002b80  d1fa              BNE      |L1.11128|
002b82  4832              LDR      r0,|L1.11340|
002b84  6800              LDR      r0,[r0,#0]  ; sleep_flag
002b86  2801              CMP      r0,#1
002b88  d062              BEQ      |L1.11344|
;;;916    {
;;;917    delay(100);
002b8a  2064              MOVS     r0,#0x64
002b8c  f7fffffe          BL       delay
;;;918    clear();//memset(uart_string_gsm,0,5000);
002b90  f7fffffe          BL       clear
;;;919    memset(at_,0,100);
002b94  2164              MOVS     r1,#0x64
002b96  481d              LDR      r0,|L1.11276|
002b98  f7fffffe          BL       __aeabi_memclr
;;;920    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002b9c  481c              LDR      r0,|L1.11280|
002b9e  f7fffffe          BL       strlen
002ba2  1c44              ADDS     r4,r0,#1
002ba4  4623              MOV      r3,r4
002ba6  4a1b              LDR      r2,|L1.11284|
002ba8  491b              LDR      r1,|L1.11288|
002baa  4818              LDR      r0,|L1.11276|
002bac  f7fffffe          BL       __2sprintf
;;;921    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002bb0  2005              MOVS     r0,#5
002bb2  4b19              LDR      r3,|L1.11288|
002bb4  3b3c              SUBS     r3,r3,#0x3c
002bb6  461a              MOV      r2,r3
002bb8  3260              ADDS     r2,r2,#0x60
002bba  a118              ADR      r1,|L1.11292|
002bbc  9000              STR      r0,[sp,#0]
002bbe  4813              LDR      r0,|L1.11276|
002bc0  f7fffffe          BL       send_SD
;;;922    clear();	
002bc4  f7fffffe          BL       clear
;;;923    k2=0;									//string array counter for uart 1
002bc8  2000              MOVS     r0,#0
002bca  4915              LDR      r1,|L1.11296|
002bcc  6008              STR      r0,[r1,#0]  ; k2
;;;924    tout=0;	
002bce  4915              LDR      r1,|L1.11300|
002bd0  6008              STR      r0,[r1,#0]  ; tout
;;;925    for(k=0;k<strlen(data);k++)
002bd2  4915              LDR      r1,|L1.11304|
002bd4  6008              STR      r0,[r1,#0]  ; k
002bd6  e00b              B        |L1.11248|
                  |L1.11224|
;;;926    {
;;;927    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002bd8  480d              LDR      r0,|L1.11280|
002bda  4a13              LDR      r2,|L1.11304|
002bdc  6812              LDR      r2,[r2,#0]  ; k
002bde  5c81              LDRB     r1,[r0,r2]
002be0  4809              LDR      r0,|L1.11272|
002be2  f7fffffe          BL       uart_putchar
002be6  4810              LDR      r0,|L1.11304|
002be8  6800              LDR      r0,[r0,#0]            ;925  ; k
002bea  1c40              ADDS     r0,r0,#1              ;925
002bec  490e              LDR      r1,|L1.11304|
002bee  6008              STR      r0,[r1,#0]            ;925  ; k
                  |L1.11248|
002bf0  4807              LDR      r0,|L1.11280|
002bf2  f7fffffe          BL       strlen
002bf6  490c              LDR      r1,|L1.11304|
002bf8  6809              LDR      r1,[r1,#0]            ;925  ; k
002bfa  4288              CMP      r0,r1                 ;925
002bfc  d8ec              BHI      |L1.11224|
;;;928    }	
;;;929    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002bfe  210a              MOVS     r1,#0xa
002c00  4801              LDR      r0,|L1.11272|
002c02  f7fffffe          BL       uart_putchar
002c06  e024              B        |L1.11346|
                  |L1.11272|
                          DCD      0x4006b000
                  |L1.11276|
                          DCD      at_
                  |L1.11280|
                          DCD      data
                  |L1.11284|
                          DCD      drive
                  |L1.11288|
                          DCD      ||.text||+0x908
                  |L1.11292|
002c1c  3e00              DCB      ">",0
002c1e  00                DCB      0
002c1f  00                DCB      0
                  |L1.11296|
                          DCD      ||k2||
                  |L1.11300|
                          DCD      tout
                  |L1.11304|
                          DCD      k
                  |L1.11308|
                          DCD      ||.text||+0xd3c
                  |L1.11312|
                          DCD      uart_string_gsm
                  |L1.11316|
                          DCD      flagch
                  |L1.11320|
                          DCD      int_erval
                  |L1.11324|
                          DCD      temp
                  |L1.11328|
002c40  4f4b00            DCB      "OK",0
002c43  00                DCB      0
                  |L1.11332|
                          DCD      cond201
                  |L1.11336|
                          DCD      cond200
                  |L1.11340|
                          DCD      sleep_flag
                  |L1.11344|
002c50  e108              B        |L1.11876|
                  |L1.11346|
002c52  210a              MOVS     r1,#0xa
002c54  48fe              LDR      r0,|L1.12368|
002c56  f7fffffe          BL       uart_putchar
002c5a  210a              MOVS     r1,#0xa
002c5c  48fc              LDR      r0,|L1.12368|
002c5e  f7fffffe          BL       uart_putchar
002c62  210a              MOVS     r1,#0xa
002c64  48fa              LDR      r0,|L1.12368|
002c66  f7fffffe          BL       uart_putchar
002c6a  210a              MOVS     r1,#0xa
002c6c  48f8              LDR      r0,|L1.12368|
002c6e  f7fffffe          BL       uart_putchar
002c72  210a              MOVS     r1,#0xa
002c74  48f6              LDR      r0,|L1.12368|
002c76  f7fffffe          BL       uart_putchar
002c7a  210a              MOVS     r1,#0xa
002c7c  48f4              LDR      r0,|L1.12368|
002c7e  f7fffffe          BL       uart_putchar
002c82  210a              MOVS     r1,#0xa
002c84  48f2              LDR      r0,|L1.12368|
002c86  f7fffffe          BL       uart_putchar
002c8a  210a              MOVS     r1,#0xa
002c8c  48f0              LDR      r0,|L1.12368|
002c8e  f7fffffe          BL       uart_putchar
002c92  210a              MOVS     r1,#0xa
002c94  48ee              LDR      r0,|L1.12368|
002c96  f7fffffe          BL       uart_putchar
002c9a  210a              MOVS     r1,#0xa
002c9c  48ec              LDR      r0,|L1.12368|
002c9e  f7fffffe          BL       uart_putchar
002ca2  210a              MOVS     r1,#0xa
002ca4  48ea              LDR      r0,|L1.12368|
002ca6  f7fffffe          BL       uart_putchar
002caa  210a              MOVS     r1,#0xa
002cac  48e8              LDR      r0,|L1.12368|
002cae  f7fffffe          BL       uart_putchar
002cb2  210a              MOVS     r1,#0xa
002cb4  48e6              LDR      r0,|L1.12368|
002cb6  f7fffffe          BL       uart_putchar
002cba  210a              MOVS     r1,#0xa
002cbc  48e4              LDR      r0,|L1.12368|
002cbe  f7fffffe          BL       uart_putchar
002cc2  210a              MOVS     r1,#0xa
002cc4  48e2              LDR      r0,|L1.12368|
002cc6  f7fffffe          BL       uart_putchar
002cca  210a              MOVS     r1,#0xa
002ccc  48e0              LDR      r0,|L1.12368|
002cce  f7fffffe          BL       uart_putchar
002cd2  210a              MOVS     r1,#0xa
002cd4  48de              LDR      r0,|L1.12368|
002cd6  f7fffffe          BL       uart_putchar
002cda  210a              MOVS     r1,#0xa
002cdc  48dc              LDR      r0,|L1.12368|
002cde  f7fffffe          BL       uart_putchar
002ce2  210a              MOVS     r1,#0xa
002ce4  48da              LDR      r0,|L1.12368|
002ce6  f7fffffe          BL       uart_putchar
002cea  210a              MOVS     r1,#0xa
002cec  48d8              LDR      r0,|L1.12368|
002cee  f7fffffe          BL       uart_putchar
002cf2  210a              MOVS     r1,#0xa
002cf4  48d6              LDR      r0,|L1.12368|
002cf6  f7fffffe          BL       uart_putchar
002cfa  210a              MOVS     r1,#0xa
002cfc  48d4              LDR      r0,|L1.12368|
002cfe  f7fffffe          BL       uart_putchar
002d02  210a              MOVS     r1,#0xa
002d04  48d2              LDR      r0,|L1.12368|
002d06  f7fffffe          BL       uart_putchar
002d0a  210a              MOVS     r1,#0xa
002d0c  48d0              LDR      r0,|L1.12368|
002d0e  f7fffffe          BL       uart_putchar
002d12  210a              MOVS     r1,#0xa
002d14  48ce              LDR      r0,|L1.12368|
002d16  f7fffffe          BL       uart_putchar
002d1a  210a              MOVS     r1,#0xa
002d1c  48cc              LDR      r0,|L1.12368|
002d1e  f7fffffe          BL       uart_putchar
002d22  210a              MOVS     r1,#0xa
002d24  48ca              LDR      r0,|L1.12368|
002d26  f7fffffe          BL       uart_putchar
002d2a  210a              MOVS     r1,#0xa
002d2c  48c8              LDR      r0,|L1.12368|
002d2e  f7fffffe          BL       uart_putchar
002d32  210a              MOVS     r1,#0xa
002d34  48c6              LDR      r0,|L1.12368|
002d36  f7fffffe          BL       uart_putchar
002d3a  210a              MOVS     r1,#0xa
002d3c  48c4              LDR      r0,|L1.12368|
002d3e  f7fffffe          BL       uart_putchar
002d42  210a              MOVS     r1,#0xa
002d44  48c2              LDR      r0,|L1.12368|
002d46  f7fffffe          BL       uart_putchar
002d4a  210a              MOVS     r1,#0xa
002d4c  48c0              LDR      r0,|L1.12368|
002d4e  f7fffffe          BL       uart_putchar
002d52  210a              MOVS     r1,#0xa
002d54  48be              LDR      r0,|L1.12368|
002d56  f7fffffe          BL       uart_putchar
002d5a  210a              MOVS     r1,#0xa
002d5c  48bc              LDR      r0,|L1.12368|
002d5e  f7fffffe          BL       uart_putchar
002d62  210a              MOVS     r1,#0xa
002d64  48ba              LDR      r0,|L1.12368|
002d66  f7fffffe          BL       uart_putchar
002d6a  210a              MOVS     r1,#0xa
002d6c  48b8              LDR      r0,|L1.12368|
002d6e  f7fffffe          BL       uart_putchar
002d72  210a              MOVS     r1,#0xa
002d74  48b6              LDR      r0,|L1.12368|
002d76  f7fffffe          BL       uart_putchar
002d7a  210a              MOVS     r1,#0xa
002d7c  48b4              LDR      r0,|L1.12368|
002d7e  f7fffffe          BL       uart_putchar
002d82  210a              MOVS     r1,#0xa
002d84  48b2              LDR      r0,|L1.12368|
002d86  f7fffffe          BL       uart_putchar
002d8a  210a              MOVS     r1,#0xa
002d8c  48b0              LDR      r0,|L1.12368|
002d8e  f7fffffe          BL       uart_putchar
002d92  210a              MOVS     r1,#0xa
002d94  48ae              LDR      r0,|L1.12368|
002d96  f7fffffe          BL       uart_putchar
002d9a  210a              MOVS     r1,#0xa
002d9c  48ac              LDR      r0,|L1.12368|
002d9e  f7fffffe          BL       uart_putchar
002da2  210a              MOVS     r1,#0xa
002da4  48aa              LDR      r0,|L1.12368|
002da6  f7fffffe          BL       uart_putchar
002daa  210a              MOVS     r1,#0xa
002dac  48a8              LDR      r0,|L1.12368|
002dae  f7fffffe          BL       uart_putchar
002db2  210a              MOVS     r1,#0xa
002db4  48a6              LDR      r0,|L1.12368|
002db6  f7fffffe          BL       uart_putchar
002dba  210a              MOVS     r1,#0xa
002dbc  48a4              LDR      r0,|L1.12368|
002dbe  f7fffffe          BL       uart_putchar
002dc2  210a              MOVS     r1,#0xa
002dc4  48a2              LDR      r0,|L1.12368|
002dc6  f7fffffe          BL       uart_putchar
002dca  210a              MOVS     r1,#0xa
002dcc  48a0              LDR      r0,|L1.12368|
002dce  f7fffffe          BL       uart_putchar
002dd2  210a              MOVS     r1,#0xa
002dd4  489e              LDR      r0,|L1.12368|
002dd6  f7fffffe          BL       uart_putchar
002dda  210a              MOVS     r1,#0xa
002ddc  489c              LDR      r0,|L1.12368|
002dde  f7fffffe          BL       uart_putchar
002de2  210a              MOVS     r1,#0xa
002de4  489a              LDR      r0,|L1.12368|
002de6  f7fffffe          BL       uart_putchar
002dea  210a              MOVS     r1,#0xa
002dec  4898              LDR      r0,|L1.12368|
002dee  f7fffffe          BL       uart_putchar
002df2  210a              MOVS     r1,#0xa
002df4  4896              LDR      r0,|L1.12368|
002df6  f7fffffe          BL       uart_putchar
002dfa  210a              MOVS     r1,#0xa
002dfc  4894              LDR      r0,|L1.12368|
002dfe  f7fffffe          BL       uart_putchar
002e02  210a              MOVS     r1,#0xa
002e04  4892              LDR      r0,|L1.12368|
002e06  f7fffffe          BL       uart_putchar
002e0a  210a              MOVS     r1,#0xa
002e0c  4890              LDR      r0,|L1.12368|
002e0e  f7fffffe          BL       uart_putchar
;;;930    									//memset(data,0,1000);
;;;931    														//timer counts to wait for characters in uart 1 									
;;;932    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002e12  bf00              NOP      
                  |L1.11796|
002e14  498f              LDR      r1,|L1.12372|
002e16  4890              LDR      r0,|L1.12376|
002e18  f7fffffe          BL       strstr
002e1c  2800              CMP      r0,#0
002e1e  d109              BNE      |L1.11828|
002e20  498e              LDR      r1,|L1.12380|
002e22  488d              LDR      r0,|L1.12376|
002e24  f7fffffe          BL       strstr
002e28  2800              CMP      r0,#0
002e2a  d103              BNE      |L1.11828|
002e2c  488c              LDR      r0,|L1.12384|
002e2e  6800              LDR      r0,[r0,#0]  ; tout
002e30  2805              CMP      r0,#5
002e32  ddef              BLE      |L1.11796|
                  |L1.11828|
;;;933    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;934    									}
;;;935    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002e34  f7fffffe          BL       clear
;;;936    									//clear();
;;;937    									memset(data,0,strlen(data));
002e38  488a              LDR      r0,|L1.12388|
002e3a  f7fffffe          BL       strlen
002e3e  4604              MOV      r4,r0
002e40  4621              MOV      r1,r4
002e42  4888              LDR      r0,|L1.12388|
002e44  f7fffffe          BL       __aeabi_memclr
;;;938    									clear();
002e48  f7fffffe          BL       clear
;;;939    									RESET_OFF;delay(100);
002e4c  2020              MOVS     r0,#0x20
002e4e  4986              LDR      r1,|L1.12392|
002e50  6088              STR      r0,[r1,#8]
002e52  2064              MOVS     r0,#0x64
002e54  f7fffffe          BL       delay
;;;940    									RESET_ON;delay(100);		
002e58  2020              MOVS     r0,#0x20
002e5a  4983              LDR      r1,|L1.12392|
002e5c  6048              STR      r0,[r1,#4]
002e5e  2064              MOVS     r0,#0x64
002e60  f7fffffe          BL       delay
                  |L1.11876|
;;;941    }
;;;942    	
;;;943    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
002e64  2004              MOVS     r0,#4
002e66  4b81              LDR      r3,|L1.12396|
002e68  4a7c              LDR      r2,|L1.12380|
002e6a  3260              ADDS     r2,r2,#0x60
002e6c  a180              ADR      r1,|L1.12400|
002e6e  9000              STR      r0,[sp,#0]
002e70  4618              MOV      r0,r3
002e72  300c              ADDS     r0,r0,#0xc
002e74  f7fffffe          BL       send_GSM
;;;944    GPS_COLLECT2();
002e78  f7fffffe          BL       GPS_COLLECT2
;;;945    strcat(data,"CH\n");	
002e7c  4977              LDR      r1,|L1.12380|
002e7e  3130              ADDS     r1,r1,#0x30
002e80  4878              LDR      r0,|L1.12388|
002e82  f7fffffe          BL       strcat
;;;946    memset(at_,0,100);
002e86  2164              MOVS     r1,#0x64
002e88  487a              LDR      r0,|L1.12404|
002e8a  f7fffffe          BL       __aeabi_memclr
;;;947    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
002e8e  4a7a              LDR      r2,|L1.12408|
002e90  4976              LDR      r1,|L1.12396|
002e92  3124              ADDS     r1,r1,#0x24
002e94  4877              LDR      r0,|L1.12404|
002e96  f7fffffe          BL       __2sprintf
;;;948    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
002e9a  4878              LDR      r0,|L1.12412|
002e9c  6800              LDR      r0,[r0,#0]  ; tmeout
002e9e  4b73              LDR      r3,|L1.12396|
002ea0  4a6e              LDR      r2,|L1.12380|
002ea2  3260              ADDS     r2,r2,#0x60
002ea4  a172              ADR      r1,|L1.12400|
002ea6  9000              STR      r0,[sp,#0]
002ea8  4872              LDR      r0,|L1.12404|
002eaa  f7fffffe          BL       send_GSM
;;;949    msg_sim800(); 
002eae  f7fffffe          BL       msg_sim800
;;;950    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
002eb2  2004              MOVS     r0,#4
002eb4  4b69              LDR      r3,|L1.12380|
002eb6  3318              ADDS     r3,r3,#0x18
002eb8  461a              MOV      r2,r3
002eba  3248              ADDS     r2,r2,#0x48
002ebc  a16c              ADR      r1,|L1.12400|
002ebe  9000              STR      r0,[sp,#0]
002ec0  486a              LDR      r0,|L1.12396|
002ec2  303c              ADDS     r0,r0,#0x3c
002ec4  f7fffffe          BL       send_GSM
;;;951    GPS_COLLECT2();
002ec8  f7fffffe          BL       GPS_COLLECT2
;;;952    strcat(data,"CH\n");	
002ecc  4963              LDR      r1,|L1.12380|
002ece  3130              ADDS     r1,r1,#0x30
002ed0  4864              LDR      r0,|L1.12388|
002ed2  f7fffffe          BL       strcat
;;;953    GPS_COLLECT2();
002ed6  f7fffffe          BL       GPS_COLLECT2
;;;954    strcat(data,"CH\n");	
002eda  4960              LDR      r1,|L1.12380|
002edc  3130              ADDS     r1,r1,#0x30
002ede  4861              LDR      r0,|L1.12388|
002ee0  f7fffffe          BL       strcat
;;;955    
;;;956    
;;;957    msg_sim800(); 
002ee4  f7fffffe          BL       msg_sim800
;;;958    GPS_COLLECT2();
002ee8  f7fffffe          BL       GPS_COLLECT2
;;;959    strcat(data,"CH\n");	
002eec  495b              LDR      r1,|L1.12380|
002eee  3130              ADDS     r1,r1,#0x30
002ef0  485c              LDR      r0,|L1.12388|
002ef2  f7fffffe          BL       strcat
;;;960    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
002ef6  f7fffffe          BL       clear
002efa  485c              LDR      r0,|L1.12396|
002efc  304c              ADDS     r0,r0,#0x4c
002efe  f7fffffe          BL       send_modem
002f02  f7fffffe          BL       clear
;;;961    					delay(20);
002f06  2014              MOVS     r0,#0x14
002f08  f7fffffe          BL       delay
;;;962    
;;;963    
;;;964    msg_sim800(); 
002f0c  f7fffffe          BL       msg_sim800
;;;965    
;;;966    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
002f10  4b5b              LDR      r3,|L1.12416|
002f12  4a5c              LDR      r2,|L1.12420|
002f14  4955              LDR      r1,|L1.12396|
002f16  3164              ADDS     r1,r1,#0x64
002f18  4856              LDR      r0,|L1.12404|
002f1a  f7fffffe          BL       __2sprintf
;;;967    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
002f1e  4857              LDR      r0,|L1.12412|
002f20  6800              LDR      r0,[r0,#0]  ; tmeout
002f22  4b52              LDR      r3,|L1.12396|
002f24  4a4d              LDR      r2,|L1.12380|
002f26  4619              MOV      r1,r3
002f28  3184              ADDS     r1,r1,#0x84
002f2a  9000              STR      r0,[sp,#0]
002f2c  4851              LDR      r0,|L1.12404|
002f2e  f7fffffe          BL       send_GSM
;;;968    						clear();
002f32  f7fffffe          BL       clear
;;;969    						
;;;970    						
;;;971    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
002f36  4851              LDR      r0,|L1.12412|
002f38  6800              LDR      r0,[r0,#0]  ; tmeout
002f3a  4b4c              LDR      r3,|L1.12396|
002f3c  338c              ADDS     r3,r3,#0x8c
002f3e  4a47              LDR      r2,|L1.12380|
002f40  a151              ADR      r1,|L1.12424|
002f42  9000              STR      r0,[sp,#0]
002f44  4618              MOV      r0,r3
002f46  3014              ADDS     r0,r0,#0x14
002f48  f7fffffe          BL       send_GSM
;;;972    //**************************************tcp_initialization ends******************************//							
;;;973    									
;;;974    						clear();		
002f4c  f7fffffe          BL       clear
;;;975    						cond=mystrstr(uart_string_gsm,'>');
002f50  213e              MOVS     r1,#0x3e
002f52  4841              LDR      r0,|L1.12376|
002f54  f7fffffe          BL       mystrstr
002f58  494c              LDR      r1,|L1.12428|
002f5a  7008              STRB     r0,[r1,#0]
;;;976    								if(cond)	
002f5c  4608              MOV      r0,r1
002f5e  7800              LDRB     r0,[r0,#0]  ; cond
002f60  2800              CMP      r0,#0
002f62  d073              BEQ      |L1.12364|
;;;977    								{	
;;;978    
;;;979    									clear();
002f64  f7fffffe          BL       clear
;;;980    									memset(uart_string_gsm,0,5000);
002f68  4949              LDR      r1,|L1.12432|
002f6a  483b              LDR      r0,|L1.12376|
002f6c  f7fffffe          BL       __aeabi_memclr
;;;981    									strcat(data,"\n");
002f70  a148              ADR      r1,|L1.12436|
002f72  483c              LDR      r0,|L1.12388|
002f74  f7fffffe          BL       strcat
;;;982    									len=strlen(data);
002f78  483a              LDR      r0,|L1.12388|
002f7a  f7fffffe          BL       strlen
002f7e  4946              LDR      r1,|L1.12440|
002f80  6008              STR      r0,[r1,#0]  ; len
;;;983    									tout=0;
002f82  2000              MOVS     r0,#0
002f84  4936              LDR      r1,|L1.12384|
002f86  6008              STR      r0,[r1,#0]  ; tout
;;;984    									k2=0;
002f88  4944              LDR      r1,|L1.12444|
002f8a  6008              STR      r0,[r1,#0]  ; k2
;;;985    									for(k=0;k<len;k++)
002f8c  4944              LDR      r1,|L1.12448|
002f8e  6008              STR      r0,[r1,#0]  ; k
002f90  e00b              B        |L1.12202|
                  |L1.12178|
;;;986    									{
;;;987    										uart_putchar(UART1_BASE_PTR, data[k]);
002f92  4834              LDR      r0,|L1.12388|
002f94  4a42              LDR      r2,|L1.12448|
002f96  6812              LDR      r2,[r2,#0]  ; k
002f98  5c81              LDRB     r1,[r0,r2]
002f9a  482d              LDR      r0,|L1.12368|
002f9c  f7fffffe          BL       uart_putchar
002fa0  483f              LDR      r0,|L1.12448|
002fa2  6800              LDR      r0,[r0,#0]            ;985  ; k
002fa4  1c40              ADDS     r0,r0,#1              ;985
002fa6  493e              LDR      r1,|L1.12448|
002fa8  6008              STR      r0,[r1,#0]            ;985  ; k
                  |L1.12202|
002faa  483d              LDR      r0,|L1.12448|
002fac  6800              LDR      r0,[r0,#0]            ;985  ; k
002fae  493a              LDR      r1,|L1.12440|
002fb0  6809              LDR      r1,[r1,#0]            ;985  ; len
002fb2  4288              CMP      r0,r1                 ;985
002fb4  dbed              BLT      |L1.12178|
;;;988    									}uart_putchar(UART1_BASE_PTR, 0x1A);
002fb6  211a              MOVS     r1,#0x1a
002fb8  4825              LDR      r0,|L1.12368|
002fba  f7fffffe          BL       uart_putchar
;;;989    									do
002fbe  bf00              NOP      
                  |L1.12224|
;;;990    																{stcond1=strstr(uart_string_gsm,"SEND OK");
002fc0  4926              LDR      r1,|L1.12380|
002fc2  3908              SUBS     r1,r1,#8
002fc4  4824              LDR      r0,|L1.12376|
002fc6  f7fffffe          BL       strstr
002fca  4936              LDR      r1,|L1.12452|
002fcc  6008              STR      r0,[r1,#0]  ; stcond1
;;;991    																	stcond2=strstr(uart_string_gsm, "ERROR");
002fce  4923              LDR      r1,|L1.12380|
002fd0  4821              LDR      r0,|L1.12376|
002fd2  f7fffffe          BL       strstr
002fd6  4934              LDR      r1,|L1.12456|
002fd8  6008              STR      r0,[r1,#0]  ; stcond2
;;;992    																		stcond3=strstr(uart_string_gsm, "FAIL");	
002fda  4924              LDR      r1,|L1.12396|
002fdc  3194              ADDS     r1,r1,#0x94
002fde  481e              LDR      r0,|L1.12376|
002fe0  f7fffffe          BL       strstr
002fe4  4931              LDR      r1,|L1.12460|
002fe6  6008              STR      r0,[r1,#0]  ; stcond3
;;;993    																			stcond4=strstr(uart_string_gsm, "DEACT");	
002fe8  491c              LDR      r1,|L1.12380|
002fea  3118              ADDS     r1,r1,#0x18
002fec  481a              LDR      r0,|L1.12376|
002fee  f7fffffe          BL       strstr
002ff2  492f              LDR      r1,|L1.12464|
002ff4  6008              STR      r0,[r1,#0]  ; stcond4
;;;994    																	
;;;995    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
002ff6  482c              LDR      r0,|L1.12456|
002ff8  6800              LDR      r0,[r0,#0]  ; stcond2
002ffa  2800              CMP      r0,#0
002ffc  d10f              BNE      |L1.12318|
002ffe  482b              LDR      r0,|L1.12460|
003000  6800              LDR      r0,[r0,#0]  ; stcond3
003002  2800              CMP      r0,#0
003004  d10b              BNE      |L1.12318|
003006  4608              MOV      r0,r1
003008  6800              LDR      r0,[r0,#0]  ; stcond4
00300a  2800              CMP      r0,#0
00300c  d107              BNE      |L1.12318|
00300e  4825              LDR      r0,|L1.12452|
003010  6800              LDR      r0,[r0,#0]  ; stcond1
003012  2800              CMP      r0,#0
003014  d103              BNE      |L1.12318|
003016  4812              LDR      r0,|L1.12384|
003018  6800              LDR      r0,[r0,#0]  ; tout
00301a  2804              CMP      r0,#4
00301c  ddd0              BLE      |L1.12224|
                  |L1.12318|
;;;996    																delay(10);clear();
00301e  200a              MOVS     r0,#0xa
003020  f7fffffe          BL       delay
003024  f7fffffe          BL       clear
;;;997    														uart_putchar(UART1_BASE_PTR,0x1A);
003028  211a              MOVS     r1,#0x1a
00302a  4809              LDR      r0,|L1.12368|
00302c  f7fffffe          BL       uart_putchar
;;;998    												delay(10);
003030  200a              MOVS     r0,#0xa
003032  f7fffffe          BL       delay
;;;999    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
003036  211a              MOVS     r1,#0x1a
003038  4805              LDR      r0,|L1.12368|
00303a  f7fffffe          BL       uart_putchar
00303e  211a              MOVS     r1,#0x1a
003040  4803              LDR      r0,|L1.12368|
003042  f7fffffe          BL       uart_putchar
003046  211a              MOVS     r1,#0x1a
003048  4801              LDR      r0,|L1.12368|
00304a  e033              B        |L1.12468|
                  |L1.12364|
00304c  e19f              B        |L1.13198|
00304e  0000              DCW      0x0000
                  |L1.12368|
                          DCD      0x4006b000
                  |L1.12372|
                          DCD      ||.text||+0xd3c
                  |L1.12376|
                          DCD      uart_string_gsm
                  |L1.12380|
                          DCD      ||.text||+0x8cc
                  |L1.12384|
                          DCD      tout
                  |L1.12388|
                          DCD      data
                  |L1.12392|
                          DCD      0x400ff080
                  |L1.12396|
                          DCD      ||.text||+0x11d4
                  |L1.12400|
003070  4f4b00            DCB      "OK",0
003073  00                DCB      0
                  |L1.12404|
                          DCD      at_
                  |L1.12408|
                          DCD      apn
                  |L1.12412|
                          DCD      tmeout
                  |L1.12416|
                          DCD      port
                  |L1.12420|
                          DCD      ||ip||
                  |L1.12424|
003088  3e00              DCB      ">",0
00308a  00                DCB      0
00308b  00                DCB      0
                  |L1.12428|
                          DCD      cond
                  |L1.12432|
                          DCD      0x00001388
                  |L1.12436|
003094  0a00              DCB      "\n",0
003096  00                DCB      0
003097  00                DCB      0
                  |L1.12440|
                          DCD      len
                  |L1.12444|
                          DCD      ||k2||
                  |L1.12448|
                          DCD      k
                  |L1.12452|
                          DCD      stcond1
                  |L1.12456|
                          DCD      stcond2
                  |L1.12460|
                          DCD      stcond3
                  |L1.12464|
                          DCD      stcond4
                  |L1.12468|
0030b4  f7fffffe          BL       uart_putchar
;;;1000   						
;;;1001   
;;;1002   
;;;1003   									
;;;1004   															
;;;1005   															
;;;1006   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
0030b8  211a              MOVS     r1,#0x1a
0030ba  48fe              LDR      r0,|L1.13492|
0030bc  f7fffffe          BL       uart_putchar
0030c0  f7fffffe          BL       clear
0030c4  200a              MOVS     r0,#0xa
0030c6  f7fffffe          BL       delay
;;;1007   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
0030ca  211a              MOVS     r1,#0x1a
0030cc  48f9              LDR      r0,|L1.13492|
0030ce  f7fffffe          BL       uart_putchar
0030d2  f7fffffe          BL       clear
0030d6  200a              MOVS     r0,#0xa
0030d8  f7fffffe          BL       delay
;;;1008   															
;;;1009   														//qwe=strlen(uart_string_gsm);
;;;1010   														uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
0030dc  211a              MOVS     r1,#0x1a
0030de  48f5              LDR      r0,|L1.13492|
0030e0  f7fffffe          BL       uart_putchar
0030e4  f7fffffe          BL       clear
0030e8  200a              MOVS     r0,#0xa
0030ea  f7fffffe          BL       delay
;;;1011   								delay(50);
0030ee  2032              MOVS     r0,#0x32
0030f0  f7fffffe          BL       delay
;;;1012   								con1d=strstr(uart_string_gsm,"SEND OK");
0030f4  49f0              LDR      r1,|L1.13496|
0030f6  48f1              LDR      r0,|L1.13500|
0030f8  f7fffffe          BL       strstr
0030fc  49f0              LDR      r1,|L1.13504|
0030fe  6008              STR      r0,[r1,#0]  ; con1d
;;;1013   								if(!con1d)
003100  4608              MOV      r0,r1
003102  6800              LDR      r0,[r0,#0]  ; con1d
003104  2800              CMP      r0,#0
003106  d17d              BNE      |L1.12804|
;;;1014   								{
;;;1015   									
;;;1016   									
;;;1017   	delay(100);
003108  2064              MOVS     r0,#0x64
00310a  f7fffffe          BL       delay
;;;1018   		clear();//memset(uart_string_gsm,0,5000);
00310e  f7fffffe          BL       clear
;;;1019   	
;;;1020   	memset(at_,0,100);
003112  2164              MOVS     r1,#0x64
003114  48eb              LDR      r0,|L1.13508|
003116  f7fffffe          BL       __aeabi_memclr
;;;1021   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00311a  48eb              LDR      r0,|L1.13512|
00311c  f7fffffe          BL       strlen
003120  1c44              ADDS     r4,r0,#1
003122  4623              MOV      r3,r4
003124  4ae9              LDR      r2,|L1.13516|
003126  49e4              LDR      r1,|L1.13496|
003128  3144              ADDS     r1,r1,#0x44
00312a  48e6              LDR      r0,|L1.13508|
00312c  f7fffffe          BL       __2sprintf
;;;1022   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003130  2005              MOVS     r0,#5
003132  4be1              LDR      r3,|L1.13496|
003134  3308              ADDS     r3,r3,#8
003136  461a              MOV      r2,r3
003138  3260              ADDS     r2,r2,#0x60
00313a  a1e5              ADR      r1,|L1.13520|
00313c  9000              STR      r0,[sp,#0]
00313e  48e1              LDR      r0,|L1.13508|
003140  f7fffffe          BL       send_SD
;;;1023   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1024   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1025   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1026   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1027   //	}
;;;1028   	
;;;1029   clear();	
003144  f7fffffe          BL       clear
;;;1030   									k2=0;									//string array counter for uart 1
003148  2000              MOVS     r0,#0
00314a  49e2              LDR      r1,|L1.13524|
00314c  6008              STR      r0,[r1,#0]  ; k2
;;;1031   									tout=0;	
00314e  49e2              LDR      r1,|L1.13528|
003150  6008              STR      r0,[r1,#0]  ; tout
;;;1032   		for(k=0;k<strlen(data);k++)
003152  49e2              LDR      r1,|L1.13532|
003154  6008              STR      r0,[r1,#0]  ; k
003156  e00b              B        |L1.12656|
                  |L1.12632|
;;;1033   		{
;;;1034   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
003158  48db              LDR      r0,|L1.13512|
00315a  4ae0              LDR      r2,|L1.13532|
00315c  6812              LDR      r2,[r2,#0]  ; k
00315e  5c81              LDRB     r1,[r0,r2]
003160  48d4              LDR      r0,|L1.13492|
003162  f7fffffe          BL       uart_putchar
003166  48dd              LDR      r0,|L1.13532|
003168  6800              LDR      r0,[r0,#0]            ;1032  ; k
00316a  1c40              ADDS     r0,r0,#1              ;1032
00316c  49db              LDR      r1,|L1.13532|
00316e  6008              STR      r0,[r1,#0]            ;1032  ; k
                  |L1.12656|
003170  48d5              LDR      r0,|L1.13512|
003172  f7fffffe          BL       strlen
003176  49d9              LDR      r1,|L1.13532|
003178  6809              LDR      r1,[r1,#0]            ;1032  ; k
00317a  4288              CMP      r0,r1                 ;1032
00317c  d8ec              BHI      |L1.12632|
;;;1035   		}	
;;;1036   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00317e  210a              MOVS     r1,#0xa
003180  48cc              LDR      r0,|L1.13492|
003182  f7fffffe          BL       uart_putchar
003186  210a              MOVS     r1,#0xa
003188  48ca              LDR      r0,|L1.13492|
00318a  f7fffffe          BL       uart_putchar
00318e  210a              MOVS     r1,#0xa
003190  48c8              LDR      r0,|L1.13492|
003192  f7fffffe          BL       uart_putchar
003196  210a              MOVS     r1,#0xa
003198  48c6              LDR      r0,|L1.13492|
00319a  f7fffffe          BL       uart_putchar
00319e  210a              MOVS     r1,#0xa
0031a0  48c4              LDR      r0,|L1.13492|
0031a2  f7fffffe          BL       uart_putchar
0031a6  210a              MOVS     r1,#0xa
0031a8  48c2              LDR      r0,|L1.13492|
0031aa  f7fffffe          BL       uart_putchar
0031ae  210a              MOVS     r1,#0xa
0031b0  48c0              LDR      r0,|L1.13492|
0031b2  f7fffffe          BL       uart_putchar
0031b6  210a              MOVS     r1,#0xa
0031b8  48be              LDR      r0,|L1.13492|
0031ba  f7fffffe          BL       uart_putchar
0031be  210a              MOVS     r1,#0xa
0031c0  48bc              LDR      r0,|L1.13492|
0031c2  f7fffffe          BL       uart_putchar
0031c6  210a              MOVS     r1,#0xa
0031c8  48ba              LDR      r0,|L1.13492|
0031ca  f7fffffe          BL       uart_putchar
0031ce  210a              MOVS     r1,#0xa
0031d0  48b8              LDR      r0,|L1.13492|
0031d2  f7fffffe          BL       uart_putchar
0031d6  210a              MOVS     r1,#0xa
0031d8  48b6              LDR      r0,|L1.13492|
0031da  f7fffffe          BL       uart_putchar
0031de  210a              MOVS     r1,#0xa
0031e0  48b4              LDR      r0,|L1.13492|
0031e2  f7fffffe          BL       uart_putchar
0031e6  210a              MOVS     r1,#0xa
0031e8  48b2              LDR      r0,|L1.13492|
0031ea  f7fffffe          BL       uart_putchar
0031ee  210a              MOVS     r1,#0xa
0031f0  48b0              LDR      r0,|L1.13492|
0031f2  f7fffffe          BL       uart_putchar
0031f6  210a              MOVS     r1,#0xa
0031f8  48ae              LDR      r0,|L1.13492|
0031fa  f7fffffe          BL       uart_putchar
0031fe  210a              MOVS     r1,#0xa
003200  48ac              LDR      r0,|L1.13492|
003202  e000              B        |L1.12806|
                  |L1.12804|
003204  e0c0              B        |L1.13192|
                  |L1.12806|
003206  f7fffffe          BL       uart_putchar
00320a  210a              MOVS     r1,#0xa
00320c  48a9              LDR      r0,|L1.13492|
00320e  f7fffffe          BL       uart_putchar
003212  210a              MOVS     r1,#0xa
003214  48a7              LDR      r0,|L1.13492|
003216  f7fffffe          BL       uart_putchar
00321a  210a              MOVS     r1,#0xa
00321c  48a5              LDR      r0,|L1.13492|
00321e  f7fffffe          BL       uart_putchar
003222  210a              MOVS     r1,#0xa
003224  48a3              LDR      r0,|L1.13492|
003226  f7fffffe          BL       uart_putchar
00322a  210a              MOVS     r1,#0xa
00322c  48a1              LDR      r0,|L1.13492|
00322e  f7fffffe          BL       uart_putchar
003232  210a              MOVS     r1,#0xa
003234  489f              LDR      r0,|L1.13492|
003236  f7fffffe          BL       uart_putchar
00323a  210a              MOVS     r1,#0xa
00323c  489d              LDR      r0,|L1.13492|
00323e  f7fffffe          BL       uart_putchar
003242  210a              MOVS     r1,#0xa
003244  489b              LDR      r0,|L1.13492|
003246  f7fffffe          BL       uart_putchar
00324a  210a              MOVS     r1,#0xa
00324c  4899              LDR      r0,|L1.13492|
00324e  f7fffffe          BL       uart_putchar
003252  210a              MOVS     r1,#0xa
003254  4897              LDR      r0,|L1.13492|
003256  f7fffffe          BL       uart_putchar
00325a  210a              MOVS     r1,#0xa
00325c  4895              LDR      r0,|L1.13492|
00325e  f7fffffe          BL       uart_putchar
003262  210a              MOVS     r1,#0xa
003264  4893              LDR      r0,|L1.13492|
003266  f7fffffe          BL       uart_putchar
00326a  210a              MOVS     r1,#0xa
00326c  4891              LDR      r0,|L1.13492|
00326e  f7fffffe          BL       uart_putchar
003272  210a              MOVS     r1,#0xa
003274  488f              LDR      r0,|L1.13492|
003276  f7fffffe          BL       uart_putchar
00327a  210a              MOVS     r1,#0xa
00327c  488d              LDR      r0,|L1.13492|
00327e  f7fffffe          BL       uart_putchar
003282  210a              MOVS     r1,#0xa
003284  488b              LDR      r0,|L1.13492|
003286  f7fffffe          BL       uart_putchar
00328a  210a              MOVS     r1,#0xa
00328c  4889              LDR      r0,|L1.13492|
00328e  f7fffffe          BL       uart_putchar
003292  210a              MOVS     r1,#0xa
003294  4887              LDR      r0,|L1.13492|
003296  f7fffffe          BL       uart_putchar
00329a  210a              MOVS     r1,#0xa
00329c  4885              LDR      r0,|L1.13492|
00329e  f7fffffe          BL       uart_putchar
0032a2  210a              MOVS     r1,#0xa
0032a4  4883              LDR      r0,|L1.13492|
0032a6  f7fffffe          BL       uart_putchar
0032aa  210a              MOVS     r1,#0xa
0032ac  4881              LDR      r0,|L1.13492|
0032ae  f7fffffe          BL       uart_putchar
0032b2  210a              MOVS     r1,#0xa
0032b4  487f              LDR      r0,|L1.13492|
0032b6  f7fffffe          BL       uart_putchar
0032ba  210a              MOVS     r1,#0xa
0032bc  487d              LDR      r0,|L1.13492|
0032be  f7fffffe          BL       uart_putchar
0032c2  210a              MOVS     r1,#0xa
0032c4  487b              LDR      r0,|L1.13492|
0032c6  f7fffffe          BL       uart_putchar
0032ca  210a              MOVS     r1,#0xa
0032cc  4879              LDR      r0,|L1.13492|
0032ce  f7fffffe          BL       uart_putchar
0032d2  210a              MOVS     r1,#0xa
0032d4  4877              LDR      r0,|L1.13492|
0032d6  f7fffffe          BL       uart_putchar
0032da  210a              MOVS     r1,#0xa
0032dc  4875              LDR      r0,|L1.13492|
0032de  f7fffffe          BL       uart_putchar
0032e2  210a              MOVS     r1,#0xa
0032e4  4873              LDR      r0,|L1.13492|
0032e6  f7fffffe          BL       uart_putchar
0032ea  210a              MOVS     r1,#0xa
0032ec  4871              LDR      r0,|L1.13492|
0032ee  f7fffffe          BL       uart_putchar
0032f2  210a              MOVS     r1,#0xa
0032f4  486f              LDR      r0,|L1.13492|
0032f6  f7fffffe          BL       uart_putchar
0032fa  210a              MOVS     r1,#0xa
0032fc  486d              LDR      r0,|L1.13492|
0032fe  f7fffffe          BL       uart_putchar
003302  210a              MOVS     r1,#0xa
003304  486b              LDR      r0,|L1.13492|
003306  f7fffffe          BL       uart_putchar
00330a  210a              MOVS     r1,#0xa
00330c  4869              LDR      r0,|L1.13492|
00330e  f7fffffe          BL       uart_putchar
003312  210a              MOVS     r1,#0xa
003314  4867              LDR      r0,|L1.13492|
003316  f7fffffe          BL       uart_putchar
00331a  210a              MOVS     r1,#0xa
00331c  4865              LDR      r0,|L1.13492|
00331e  f7fffffe          BL       uart_putchar
003322  210a              MOVS     r1,#0xa
003324  4863              LDR      r0,|L1.13492|
003326  f7fffffe          BL       uart_putchar
00332a  210a              MOVS     r1,#0xa
00332c  4861              LDR      r0,|L1.13492|
00332e  f7fffffe          BL       uart_putchar
003332  210a              MOVS     r1,#0xa
003334  485f              LDR      r0,|L1.13492|
003336  f7fffffe          BL       uart_putchar
00333a  210a              MOVS     r1,#0xa
00333c  485d              LDR      r0,|L1.13492|
00333e  f7fffffe          BL       uart_putchar
003342  210a              MOVS     r1,#0xa
003344  485b              LDR      r0,|L1.13492|
003346  f7fffffe          BL       uart_putchar
;;;1037   									//memset(data,0,1000);
;;;1038   														//timer counts to wait for characters in uart 1 									
;;;1039   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00334a  bf00              NOP      
                  |L1.13132|
00334c  4964              LDR      r1,|L1.13536|
00334e  485b              LDR      r0,|L1.13500|
003350  f7fffffe          BL       strstr
003354  2800              CMP      r0,#0
003356  d10a              BNE      |L1.13166|
003358  4957              LDR      r1,|L1.13496|
00335a  3108              ADDS     r1,r1,#8
00335c  4857              LDR      r0,|L1.13500|
00335e  f7fffffe          BL       strstr
003362  2800              CMP      r0,#0
003364  d103              BNE      |L1.13166|
003366  485c              LDR      r0,|L1.13528|
003368  6800              LDR      r0,[r0,#0]  ; tout
00336a  2805              CMP      r0,#5
00336c  ddee              BLE      |L1.13132|
                  |L1.13166|
;;;1040   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1041   									}
;;;1042   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00336e  f7fffffe          BL       clear
;;;1043   									//clear();
;;;1044   									memset(data,0,strlen(data));
003372  4855              LDR      r0,|L1.13512|
003374  f7fffffe          BL       strlen
003378  4604              MOV      r4,r0
00337a  4621              MOV      r1,r4
00337c  4852              LDR      r0,|L1.13512|
00337e  f7fffffe          BL       __aeabi_memclr
;;;1045   									clear();
003382  f7fffffe          BL       clear
003386  e15b              B        |L1.13888|
                  |L1.13192|
;;;1046   
;;;1047   								
;;;1048   									
;;;1049   									
;;;1050   									
;;;1051   								//	log_it();								
;;;1052   								}else{send_chunk();}	
003388  f7fffffe          BL       send_chunk
00338c  e158              B        |L1.13888|
                  |L1.13198|
;;;1053   
;;;1054   																
;;;1055   								}else{
;;;1056   								
;;;1057   								
;;;1058   	delay(100);
00338e  2064              MOVS     r0,#0x64
003390  f7fffffe          BL       delay
;;;1059   		clear();//memset(uart_string_gsm,0,5000);
003394  f7fffffe          BL       clear
;;;1060   	
;;;1061   	memset(at_,0,100);
003398  2164              MOVS     r1,#0x64
00339a  484a              LDR      r0,|L1.13508|
00339c  f7fffffe          BL       __aeabi_memclr
;;;1062   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0033a0  4849              LDR      r0,|L1.13512|
0033a2  f7fffffe          BL       strlen
0033a6  1c44              ADDS     r4,r0,#1
0033a8  4623              MOV      r3,r4
0033aa  4a48              LDR      r2,|L1.13516|
0033ac  4942              LDR      r1,|L1.13496|
0033ae  3144              ADDS     r1,r1,#0x44
0033b0  4844              LDR      r0,|L1.13508|
0033b2  f7fffffe          BL       __2sprintf
;;;1063   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0033b6  2005              MOVS     r0,#5
0033b8  4b3f              LDR      r3,|L1.13496|
0033ba  3308              ADDS     r3,r3,#8
0033bc  461a              MOV      r2,r3
0033be  3260              ADDS     r2,r2,#0x60
0033c0  a143              ADR      r1,|L1.13520|
0033c2  9000              STR      r0,[sp,#0]
0033c4  483f              LDR      r0,|L1.13508|
0033c6  f7fffffe          BL       send_SD
;;;1064   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1065   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1066   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1067   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1068   //	}
;;;1069   	
;;;1070   clear();	
0033ca  f7fffffe          BL       clear
;;;1071   									k2=0;									//string array counter for uart 1
0033ce  2000              MOVS     r0,#0
0033d0  4940              LDR      r1,|L1.13524|
0033d2  6008              STR      r0,[r1,#0]  ; k2
;;;1072   									tout=0;	
0033d4  4940              LDR      r1,|L1.13528|
0033d6  6008              STR      r0,[r1,#0]  ; tout
;;;1073   		for(k=0;k<strlen(data);k++)
0033d8  4940              LDR      r1,|L1.13532|
0033da  6008              STR      r0,[r1,#0]  ; k
0033dc  e00b              B        |L1.13302|
                  |L1.13278|
;;;1074   		{
;;;1075   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0033de  483a              LDR      r0,|L1.13512|
0033e0  4a3e              LDR      r2,|L1.13532|
0033e2  6812              LDR      r2,[r2,#0]  ; k
0033e4  5c81              LDRB     r1,[r0,r2]
0033e6  4833              LDR      r0,|L1.13492|
0033e8  f7fffffe          BL       uart_putchar
0033ec  483b              LDR      r0,|L1.13532|
0033ee  6800              LDR      r0,[r0,#0]            ;1073  ; k
0033f0  1c40              ADDS     r0,r0,#1              ;1073
0033f2  493a              LDR      r1,|L1.13532|
0033f4  6008              STR      r0,[r1,#0]            ;1073  ; k
                  |L1.13302|
0033f6  4834              LDR      r0,|L1.13512|
0033f8  f7fffffe          BL       strlen
0033fc  4937              LDR      r1,|L1.13532|
0033fe  6809              LDR      r1,[r1,#0]            ;1073  ; k
003400  4288              CMP      r0,r1                 ;1073
003402  d8ec              BHI      |L1.13278|
;;;1076   		}	
;;;1077   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
003404  210a              MOVS     r1,#0xa
003406  482b              LDR      r0,|L1.13492|
003408  f7fffffe          BL       uart_putchar
00340c  210a              MOVS     r1,#0xa
00340e  4829              LDR      r0,|L1.13492|
003410  f7fffffe          BL       uart_putchar
003414  210a              MOVS     r1,#0xa
003416  4827              LDR      r0,|L1.13492|
003418  f7fffffe          BL       uart_putchar
00341c  210a              MOVS     r1,#0xa
00341e  4825              LDR      r0,|L1.13492|
003420  f7fffffe          BL       uart_putchar
003424  210a              MOVS     r1,#0xa
003426  4823              LDR      r0,|L1.13492|
003428  f7fffffe          BL       uart_putchar
00342c  210a              MOVS     r1,#0xa
00342e  4821              LDR      r0,|L1.13492|
003430  f7fffffe          BL       uart_putchar
003434  210a              MOVS     r1,#0xa
003436  481f              LDR      r0,|L1.13492|
003438  f7fffffe          BL       uart_putchar
00343c  210a              MOVS     r1,#0xa
00343e  481d              LDR      r0,|L1.13492|
003440  f7fffffe          BL       uart_putchar
003444  210a              MOVS     r1,#0xa
003446  481b              LDR      r0,|L1.13492|
003448  f7fffffe          BL       uart_putchar
00344c  210a              MOVS     r1,#0xa
00344e  4819              LDR      r0,|L1.13492|
003450  f7fffffe          BL       uart_putchar
003454  210a              MOVS     r1,#0xa
003456  4817              LDR      r0,|L1.13492|
003458  f7fffffe          BL       uart_putchar
00345c  210a              MOVS     r1,#0xa
00345e  4815              LDR      r0,|L1.13492|
003460  f7fffffe          BL       uart_putchar
003464  210a              MOVS     r1,#0xa
003466  4813              LDR      r0,|L1.13492|
003468  f7fffffe          BL       uart_putchar
00346c  210a              MOVS     r1,#0xa
00346e  4811              LDR      r0,|L1.13492|
003470  f7fffffe          BL       uart_putchar
003474  210a              MOVS     r1,#0xa
003476  480f              LDR      r0,|L1.13492|
003478  f7fffffe          BL       uart_putchar
00347c  210a              MOVS     r1,#0xa
00347e  480d              LDR      r0,|L1.13492|
003480  f7fffffe          BL       uart_putchar
003484  210a              MOVS     r1,#0xa
003486  480b              LDR      r0,|L1.13492|
003488  f7fffffe          BL       uart_putchar
00348c  210a              MOVS     r1,#0xa
00348e  4809              LDR      r0,|L1.13492|
003490  f7fffffe          BL       uart_putchar
003494  210a              MOVS     r1,#0xa
003496  4807              LDR      r0,|L1.13492|
003498  f7fffffe          BL       uart_putchar
00349c  210a              MOVS     r1,#0xa
00349e  4805              LDR      r0,|L1.13492|
0034a0  f7fffffe          BL       uart_putchar
0034a4  210a              MOVS     r1,#0xa
0034a6  4803              LDR      r0,|L1.13492|
0034a8  f7fffffe          BL       uart_putchar
0034ac  210a              MOVS     r1,#0xa
0034ae  4801              LDR      r0,|L1.13492|
0034b0  e018              B        |L1.13540|
0034b2  0000              DCW      0x0000
                  |L1.13492|
                          DCD      0x4006b000
                  |L1.13496|
                          DCD      ||.text||+0x8c4
                  |L1.13500|
                          DCD      uart_string_gsm
                  |L1.13504|
                          DCD      con1d
                  |L1.13508|
                          DCD      at_
                  |L1.13512|
                          DCD      data
                  |L1.13516|
                          DCD      drive
                  |L1.13520|
0034d0  3e00              DCB      ">",0
0034d2  00                DCB      0
0034d3  00                DCB      0
                  |L1.13524|
                          DCD      ||k2||
                  |L1.13528|
                          DCD      tout
                  |L1.13532|
                          DCD      k
                  |L1.13536|
                          DCD      ||.text||+0xd3c
                  |L1.13540|
0034e4  f7fffffe          BL       uart_putchar
0034e8  210a              MOVS     r1,#0xa
0034ea  48fa              LDR      r0,|L1.14548|
0034ec  f7fffffe          BL       uart_putchar
0034f0  210a              MOVS     r1,#0xa
0034f2  48f8              LDR      r0,|L1.14548|
0034f4  f7fffffe          BL       uart_putchar
0034f8  210a              MOVS     r1,#0xa
0034fa  48f6              LDR      r0,|L1.14548|
0034fc  f7fffffe          BL       uart_putchar
003500  210a              MOVS     r1,#0xa
003502  48f4              LDR      r0,|L1.14548|
003504  f7fffffe          BL       uart_putchar
003508  210a              MOVS     r1,#0xa
00350a  48f2              LDR      r0,|L1.14548|
00350c  f7fffffe          BL       uart_putchar
003510  210a              MOVS     r1,#0xa
003512  48f0              LDR      r0,|L1.14548|
003514  f7fffffe          BL       uart_putchar
003518  210a              MOVS     r1,#0xa
00351a  48ee              LDR      r0,|L1.14548|
00351c  f7fffffe          BL       uart_putchar
003520  210a              MOVS     r1,#0xa
003522  48ec              LDR      r0,|L1.14548|
003524  f7fffffe          BL       uart_putchar
003528  210a              MOVS     r1,#0xa
00352a  48ea              LDR      r0,|L1.14548|
00352c  f7fffffe          BL       uart_putchar
003530  210a              MOVS     r1,#0xa
003532  48e8              LDR      r0,|L1.14548|
003534  f7fffffe          BL       uart_putchar
003538  210a              MOVS     r1,#0xa
00353a  48e6              LDR      r0,|L1.14548|
00353c  f7fffffe          BL       uart_putchar
003540  210a              MOVS     r1,#0xa
003542  48e4              LDR      r0,|L1.14548|
003544  f7fffffe          BL       uart_putchar
003548  210a              MOVS     r1,#0xa
00354a  48e2              LDR      r0,|L1.14548|
00354c  f7fffffe          BL       uart_putchar
003550  210a              MOVS     r1,#0xa
003552  48e0              LDR      r0,|L1.14548|
003554  f7fffffe          BL       uart_putchar
003558  210a              MOVS     r1,#0xa
00355a  48de              LDR      r0,|L1.14548|
00355c  f7fffffe          BL       uart_putchar
003560  210a              MOVS     r1,#0xa
003562  48dc              LDR      r0,|L1.14548|
003564  f7fffffe          BL       uart_putchar
003568  210a              MOVS     r1,#0xa
00356a  48da              LDR      r0,|L1.14548|
00356c  f7fffffe          BL       uart_putchar
003570  210a              MOVS     r1,#0xa
003572  48d8              LDR      r0,|L1.14548|
003574  f7fffffe          BL       uart_putchar
003578  210a              MOVS     r1,#0xa
00357a  48d6              LDR      r0,|L1.14548|
00357c  f7fffffe          BL       uart_putchar
003580  210a              MOVS     r1,#0xa
003582  48d4              LDR      r0,|L1.14548|
003584  f7fffffe          BL       uart_putchar
003588  210a              MOVS     r1,#0xa
00358a  48d2              LDR      r0,|L1.14548|
00358c  f7fffffe          BL       uart_putchar
003590  210a              MOVS     r1,#0xa
003592  48d0              LDR      r0,|L1.14548|
003594  f7fffffe          BL       uart_putchar
003598  210a              MOVS     r1,#0xa
00359a  48ce              LDR      r0,|L1.14548|
00359c  f7fffffe          BL       uart_putchar
0035a0  210a              MOVS     r1,#0xa
0035a2  48cc              LDR      r0,|L1.14548|
0035a4  f7fffffe          BL       uart_putchar
0035a8  210a              MOVS     r1,#0xa
0035aa  48ca              LDR      r0,|L1.14548|
0035ac  f7fffffe          BL       uart_putchar
0035b0  210a              MOVS     r1,#0xa
0035b2  48c8              LDR      r0,|L1.14548|
0035b4  f7fffffe          BL       uart_putchar
0035b8  210a              MOVS     r1,#0xa
0035ba  48c6              LDR      r0,|L1.14548|
0035bc  f7fffffe          BL       uart_putchar
0035c0  210a              MOVS     r1,#0xa
0035c2  48c4              LDR      r0,|L1.14548|
0035c4  f7fffffe          BL       uart_putchar
0035c8  210a              MOVS     r1,#0xa
0035ca  48c2              LDR      r0,|L1.14548|
0035cc  f7fffffe          BL       uart_putchar
0035d0  210a              MOVS     r1,#0xa
0035d2  48c0              LDR      r0,|L1.14548|
0035d4  f7fffffe          BL       uart_putchar
0035d8  210a              MOVS     r1,#0xa
0035da  48be              LDR      r0,|L1.14548|
0035dc  f7fffffe          BL       uart_putchar
0035e0  210a              MOVS     r1,#0xa
0035e2  48bc              LDR      r0,|L1.14548|
0035e4  f7fffffe          BL       uart_putchar
0035e8  210a              MOVS     r1,#0xa
0035ea  48ba              LDR      r0,|L1.14548|
0035ec  f7fffffe          BL       uart_putchar
0035f0  210a              MOVS     r1,#0xa
0035f2  48b8              LDR      r0,|L1.14548|
0035f4  f7fffffe          BL       uart_putchar
0035f8  210a              MOVS     r1,#0xa
0035fa  48b6              LDR      r0,|L1.14548|
0035fc  f7fffffe          BL       uart_putchar
;;;1078   									//memset(data,0,1000);
;;;1079   														//timer counts to wait for characters in uart 1 									
;;;1080   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003600  bf00              NOP      
                  |L1.13826|
003602  49b5              LDR      r1,|L1.14552|
003604  48b5              LDR      r0,|L1.14556|
003606  f7fffffe          BL       strstr
00360a  2800              CMP      r0,#0
00360c  d109              BNE      |L1.13858|
00360e  49b4              LDR      r1,|L1.14560|
003610  48b2              LDR      r0,|L1.14556|
003612  f7fffffe          BL       strstr
003616  2800              CMP      r0,#0
003618  d103              BNE      |L1.13858|
00361a  48b2              LDR      r0,|L1.14564|
00361c  6800              LDR      r0,[r0,#0]  ; tout
00361e  2805              CMP      r0,#5
003620  ddef              BLE      |L1.13826|
                  |L1.13858|
;;;1081   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1082   									}
;;;1083   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003622  f7fffffe          BL       clear
;;;1084   									//clear();
;;;1085   									memset(data,0,strlen(data));
003626  48b0              LDR      r0,|L1.14568|
003628  f7fffffe          BL       strlen
00362c  4604              MOV      r4,r0
00362e  4621              MOV      r1,r4
003630  48ad              LDR      r0,|L1.14568|
003632  f7fffffe          BL       __aeabi_memclr
;;;1086   									clear();
003636  f7fffffe          BL       clear
00363a  e001              B        |L1.13888|
                  |L1.13884|
;;;1087   
;;;1088   								
;;;1089   								
;;;1090   								//log_it();
;;;1091   									}			//
;;;1092   
;;;1093   							
;;;1094   
;;;1095   	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1096   	else
;;;1097   	{
;;;1098   		send_chunk();
00363c  f7fffffe          BL       send_chunk
                  |L1.13888|
;;;1099   	}		
;;;1100   								
;;;1101   								
;;;1102   								
;;;1103   	memset(data,0,strlen(data));	
003640  48a9              LDR      r0,|L1.14568|
003642  f7fffffe          BL       strlen
003646  4604              MOV      r4,r0
003648  4621              MOV      r1,r4
00364a  48a7              LDR      r0,|L1.14568|
00364c  f7fffffe          BL       __aeabi_memclr
;;;1104   	uart_putchar(UART1_BASE_PTR, 0x1A);
003650  211a              MOVS     r1,#0x1a
003652  48a0              LDR      r0,|L1.14548|
003654  f7fffffe          BL       uart_putchar
;;;1105   	
;;;1106   }
003658  bd38              POP      {r3-r5,pc}
;;;1107   
                          ENDP

                  log_it PROC
;;;1110   
;;;1111   void log_it()
00365a  b538              PUSH     {r3-r5,lr}
;;;1112   {
;;;1113   	delay(100);
00365c  2064              MOVS     r0,#0x64
00365e  f7fffffe          BL       delay
;;;1114   		clear();//memset(uart_string_gsm,0,5000);
003662  f7fffffe          BL       clear
;;;1115   	
;;;1116   	memset(at_,0,100);
003666  2164              MOVS     r1,#0x64
003668  48a0              LDR      r0,|L1.14572|
00366a  f7fffffe          BL       __aeabi_memclr
;;;1117   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00366e  489e              LDR      r0,|L1.14568|
003670  f7fffffe          BL       strlen
003674  1c44              ADDS     r4,r0,#1
003676  4623              MOV      r3,r4
003678  4a9d              LDR      r2,|L1.14576|
00367a  4999              LDR      r1,|L1.14560|
00367c  313c              ADDS     r1,r1,#0x3c
00367e  489b              LDR      r0,|L1.14572|
003680  f7fffffe          BL       __2sprintf
;;;1118   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003684  2005              MOVS     r0,#5
003686  4b96              LDR      r3,|L1.14560|
003688  461a              MOV      r2,r3
00368a  3260              ADDS     r2,r2,#0x60
00368c  a199              ADR      r1,|L1.14580|
00368e  9000              STR      r0,[sp,#0]
003690  4896              LDR      r0,|L1.14572|
003692  f7fffffe          BL       send_SD
;;;1119   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1120   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1121   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1122   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1123   //	}
;;;1124   	
;;;1125   clear();	
003696  f7fffffe          BL       clear
;;;1126   									k2=0;									//string array counter for uart 1
00369a  2000              MOVS     r0,#0
00369c  4996              LDR      r1,|L1.14584|
00369e  6008              STR      r0,[r1,#0]  ; k2
;;;1127   									tout=0;	
0036a0  4990              LDR      r1,|L1.14564|
0036a2  6008              STR      r0,[r1,#0]  ; tout
;;;1128   		for(k=0;k<strlen(data);k++)
0036a4  4995              LDR      r1,|L1.14588|
0036a6  6008              STR      r0,[r1,#0]  ; k
0036a8  e00b              B        |L1.14018|
                  |L1.13994|
;;;1129   		{
;;;1130   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0036aa  488f              LDR      r0,|L1.14568|
0036ac  4a93              LDR      r2,|L1.14588|
0036ae  6812              LDR      r2,[r2,#0]  ; k
0036b0  5c81              LDRB     r1,[r0,r2]
0036b2  4888              LDR      r0,|L1.14548|
0036b4  f7fffffe          BL       uart_putchar
0036b8  4890              LDR      r0,|L1.14588|
0036ba  6800              LDR      r0,[r0,#0]            ;1128  ; k
0036bc  1c40              ADDS     r0,r0,#1              ;1128
0036be  498f              LDR      r1,|L1.14588|
0036c0  6008              STR      r0,[r1,#0]            ;1128  ; k
                  |L1.14018|
0036c2  4889              LDR      r0,|L1.14568|
0036c4  f7fffffe          BL       strlen
0036c8  498c              LDR      r1,|L1.14588|
0036ca  6809              LDR      r1,[r1,#0]            ;1128  ; k
0036cc  4288              CMP      r0,r1                 ;1128
0036ce  d8ec              BHI      |L1.13994|
;;;1131   		}	
;;;1132   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0036d0  210a              MOVS     r1,#0xa
0036d2  4880              LDR      r0,|L1.14548|
0036d4  f7fffffe          BL       uart_putchar
0036d8  210a              MOVS     r1,#0xa
0036da  487e              LDR      r0,|L1.14548|
0036dc  f7fffffe          BL       uart_putchar
0036e0  210a              MOVS     r1,#0xa
0036e2  487c              LDR      r0,|L1.14548|
0036e4  f7fffffe          BL       uart_putchar
0036e8  210a              MOVS     r1,#0xa
0036ea  487a              LDR      r0,|L1.14548|
0036ec  f7fffffe          BL       uart_putchar
0036f0  210a              MOVS     r1,#0xa
0036f2  4878              LDR      r0,|L1.14548|
0036f4  f7fffffe          BL       uart_putchar
0036f8  210a              MOVS     r1,#0xa
0036fa  4876              LDR      r0,|L1.14548|
0036fc  f7fffffe          BL       uart_putchar
003700  210a              MOVS     r1,#0xa
003702  4874              LDR      r0,|L1.14548|
003704  f7fffffe          BL       uart_putchar
003708  210a              MOVS     r1,#0xa
00370a  4872              LDR      r0,|L1.14548|
00370c  f7fffffe          BL       uart_putchar
003710  210a              MOVS     r1,#0xa
003712  4870              LDR      r0,|L1.14548|
003714  f7fffffe          BL       uart_putchar
003718  210a              MOVS     r1,#0xa
00371a  486e              LDR      r0,|L1.14548|
00371c  f7fffffe          BL       uart_putchar
003720  210a              MOVS     r1,#0xa
003722  486c              LDR      r0,|L1.14548|
003724  f7fffffe          BL       uart_putchar
003728  210a              MOVS     r1,#0xa
00372a  486a              LDR      r0,|L1.14548|
00372c  f7fffffe          BL       uart_putchar
003730  210a              MOVS     r1,#0xa
003732  4868              LDR      r0,|L1.14548|
003734  f7fffffe          BL       uart_putchar
003738  210a              MOVS     r1,#0xa
00373a  4866              LDR      r0,|L1.14548|
00373c  f7fffffe          BL       uart_putchar
003740  210a              MOVS     r1,#0xa
003742  4864              LDR      r0,|L1.14548|
003744  f7fffffe          BL       uart_putchar
003748  210a              MOVS     r1,#0xa
00374a  4862              LDR      r0,|L1.14548|
00374c  f7fffffe          BL       uart_putchar
003750  210a              MOVS     r1,#0xa
003752  4860              LDR      r0,|L1.14548|
003754  f7fffffe          BL       uart_putchar
003758  210a              MOVS     r1,#0xa
00375a  485e              LDR      r0,|L1.14548|
00375c  f7fffffe          BL       uart_putchar
003760  210a              MOVS     r1,#0xa
003762  485c              LDR      r0,|L1.14548|
003764  f7fffffe          BL       uart_putchar
003768  210a              MOVS     r1,#0xa
00376a  485a              LDR      r0,|L1.14548|
00376c  f7fffffe          BL       uart_putchar
003770  210a              MOVS     r1,#0xa
003772  4858              LDR      r0,|L1.14548|
003774  f7fffffe          BL       uart_putchar
003778  210a              MOVS     r1,#0xa
00377a  4856              LDR      r0,|L1.14548|
00377c  f7fffffe          BL       uart_putchar
003780  210a              MOVS     r1,#0xa
003782  4854              LDR      r0,|L1.14548|
003784  f7fffffe          BL       uart_putchar
003788  210a              MOVS     r1,#0xa
00378a  4852              LDR      r0,|L1.14548|
00378c  f7fffffe          BL       uart_putchar
003790  210a              MOVS     r1,#0xa
003792  4850              LDR      r0,|L1.14548|
003794  f7fffffe          BL       uart_putchar
003798  210a              MOVS     r1,#0xa
00379a  484e              LDR      r0,|L1.14548|
00379c  f7fffffe          BL       uart_putchar
0037a0  210a              MOVS     r1,#0xa
0037a2  484c              LDR      r0,|L1.14548|
0037a4  f7fffffe          BL       uart_putchar
0037a8  210a              MOVS     r1,#0xa
0037aa  484a              LDR      r0,|L1.14548|
0037ac  f7fffffe          BL       uart_putchar
0037b0  210a              MOVS     r1,#0xa
0037b2  4848              LDR      r0,|L1.14548|
0037b4  f7fffffe          BL       uart_putchar
0037b8  210a              MOVS     r1,#0xa
0037ba  4846              LDR      r0,|L1.14548|
0037bc  f7fffffe          BL       uart_putchar
0037c0  210a              MOVS     r1,#0xa
0037c2  4844              LDR      r0,|L1.14548|
0037c4  f7fffffe          BL       uart_putchar
0037c8  210a              MOVS     r1,#0xa
0037ca  4842              LDR      r0,|L1.14548|
0037cc  f7fffffe          BL       uart_putchar
0037d0  210a              MOVS     r1,#0xa
0037d2  4840              LDR      r0,|L1.14548|
0037d4  f7fffffe          BL       uart_putchar
0037d8  210a              MOVS     r1,#0xa
0037da  483e              LDR      r0,|L1.14548|
0037dc  f7fffffe          BL       uart_putchar
0037e0  210a              MOVS     r1,#0xa
0037e2  483c              LDR      r0,|L1.14548|
0037e4  f7fffffe          BL       uart_putchar
0037e8  210a              MOVS     r1,#0xa
0037ea  483a              LDR      r0,|L1.14548|
0037ec  f7fffffe          BL       uart_putchar
0037f0  210a              MOVS     r1,#0xa
0037f2  4838              LDR      r0,|L1.14548|
0037f4  f7fffffe          BL       uart_putchar
0037f8  210a              MOVS     r1,#0xa
0037fa  4836              LDR      r0,|L1.14548|
0037fc  f7fffffe          BL       uart_putchar
003800  210a              MOVS     r1,#0xa
003802  4834              LDR      r0,|L1.14548|
003804  f7fffffe          BL       uart_putchar
003808  210a              MOVS     r1,#0xa
00380a  4832              LDR      r0,|L1.14548|
00380c  f7fffffe          BL       uart_putchar
003810  210a              MOVS     r1,#0xa
003812  4830              LDR      r0,|L1.14548|
003814  f7fffffe          BL       uart_putchar
003818  210a              MOVS     r1,#0xa
00381a  482e              LDR      r0,|L1.14548|
00381c  f7fffffe          BL       uart_putchar
003820  210a              MOVS     r1,#0xa
003822  482c              LDR      r0,|L1.14548|
003824  f7fffffe          BL       uart_putchar
003828  210a              MOVS     r1,#0xa
00382a  482a              LDR      r0,|L1.14548|
00382c  f7fffffe          BL       uart_putchar
003830  210a              MOVS     r1,#0xa
003832  4828              LDR      r0,|L1.14548|
003834  f7fffffe          BL       uart_putchar
003838  210a              MOVS     r1,#0xa
00383a  4826              LDR      r0,|L1.14548|
00383c  f7fffffe          BL       uart_putchar
003840  210a              MOVS     r1,#0xa
003842  4824              LDR      r0,|L1.14548|
003844  f7fffffe          BL       uart_putchar
003848  210a              MOVS     r1,#0xa
00384a  4822              LDR      r0,|L1.14548|
00384c  f7fffffe          BL       uart_putchar
003850  210a              MOVS     r1,#0xa
003852  4820              LDR      r0,|L1.14548|
003854  f7fffffe          BL       uart_putchar
003858  210a              MOVS     r1,#0xa
00385a  481e              LDR      r0,|L1.14548|
00385c  f7fffffe          BL       uart_putchar
003860  210a              MOVS     r1,#0xa
003862  481c              LDR      r0,|L1.14548|
003864  f7fffffe          BL       uart_putchar
003868  210a              MOVS     r1,#0xa
00386a  481a              LDR      r0,|L1.14548|
00386c  f7fffffe          BL       uart_putchar
003870  210a              MOVS     r1,#0xa
003872  4818              LDR      r0,|L1.14548|
003874  f7fffffe          BL       uart_putchar
003878  210a              MOVS     r1,#0xa
00387a  4816              LDR      r0,|L1.14548|
00387c  f7fffffe          BL       uart_putchar
003880  210a              MOVS     r1,#0xa
003882  4814              LDR      r0,|L1.14548|
003884  f7fffffe          BL       uart_putchar
003888  210a              MOVS     r1,#0xa
00388a  4812              LDR      r0,|L1.14548|
00388c  f7fffffe          BL       uart_putchar
003890  210a              MOVS     r1,#0xa
003892  4810              LDR      r0,|L1.14548|
003894  f7fffffe          BL       uart_putchar
;;;1133   									//memset(data,0,1000);
;;;1134   														//timer counts to wait for characters in uart 1 									
;;;1135   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003898  bf00              NOP      
                  |L1.14490|
00389a  490f              LDR      r1,|L1.14552|
00389c  480f              LDR      r0,|L1.14556|
00389e  f7fffffe          BL       strstr
0038a2  2800              CMP      r0,#0
0038a4  d109              BNE      |L1.14522|
0038a6  490e              LDR      r1,|L1.14560|
0038a8  480c              LDR      r0,|L1.14556|
0038aa  f7fffffe          BL       strstr
0038ae  2800              CMP      r0,#0
0038b0  d103              BNE      |L1.14522|
0038b2  480c              LDR      r0,|L1.14564|
0038b4  6800              LDR      r0,[r0,#0]  ; tout
0038b6  2805              CMP      r0,#5
0038b8  ddef              BLE      |L1.14490|
                  |L1.14522|
;;;1136   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1137   									}
;;;1138   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0038ba  f7fffffe          BL       clear
;;;1139   									//clear();
;;;1140   									memset(data,0,strlen(data));
0038be  480a              LDR      r0,|L1.14568|
0038c0  f7fffffe          BL       strlen
0038c4  4604              MOV      r4,r0
0038c6  4621              MOV      r1,r4
0038c8  4807              LDR      r0,|L1.14568|
0038ca  f7fffffe          BL       __aeabi_memclr
;;;1141   									clear();
0038ce  f7fffffe          BL       clear
;;;1142   
;;;1143   								
;;;1144   						//		
;;;1145   }
0038d2  bd38              POP      {r3-r5,pc}
                  |L1.14548|
                          DCD      0x4006b000
                  |L1.14552|
                          DCD      ||.text||+0xd3c
                  |L1.14556|
                          DCD      uart_string_gsm
                  |L1.14560|
                          DCD      ||.text||+0x8cc
                  |L1.14564|
                          DCD      tout
                  |L1.14568|
                          DCD      data
                  |L1.14572|
                          DCD      at_
                  |L1.14576|
                          DCD      drive
                  |L1.14580|
0038f4  3e00              DCB      ">",0
0038f6  00                DCB      0
0038f7  00                DCB      0
                  |L1.14584|
                          DCD      ||k2||
                  |L1.14588|
                          DCD      k
                          ENDP

                  read PROC
;;;1362   
;;;1363   void read(char * A,char * B,char * C)
003900  b570              PUSH     {r4-r6,lr}
;;;1364   {k=0;l=time;
003902  4604              MOV      r4,r0
003904  460d              MOV      r5,r1
003906  4616              MOV      r6,r2
003908  2000              MOVS     r0,#0
00390a  49fe              LDR      r1,|L1.15620|
00390c  6008              STR      r0,[r1,#0]  ; k
00390e  48fe              LDR      r0,|L1.15624|
003910  6800              LDR      r0,[r0,#0]  ; time
003912  49fe              LDR      r1,|L1.15628|
003914  6008              STR      r0,[r1,#0]  ; l
;;;1365   			do{
003916  bf00              NOP      
                  |L1.14616|
;;;1366   			if( uart_getchar_present (UART1_BASE_PTR))	
003918  48fd              LDR      r0,|L1.15632|
00391a  f7fffffe          BL       uart_getchar_present
00391e  2800              CMP      r0,#0
003920  d018              BEQ      |L1.14676|
;;;1367   			{uart_string_gps[k]=UART_D_REG(UART1_BASE_PTR);k++;l=time;if(k>298){k=0;}}
003922  48fb              LDR      r0,|L1.15632|
003924  79c0              LDRB     r0,[r0,#7]
003926  49fb              LDR      r1,|L1.15636|
003928  4af6              LDR      r2,|L1.15620|
00392a  6812              LDR      r2,[r2,#0]  ; k
00392c  5488              STRB     r0,[r1,r2]
00392e  48f5              LDR      r0,|L1.15620|
003930  6800              LDR      r0,[r0,#0]  ; k
003932  1c40              ADDS     r0,r0,#1
003934  49f3              LDR      r1,|L1.15620|
003936  6008              STR      r0,[r1,#0]  ; k
003938  48f3              LDR      r0,|L1.15624|
00393a  6800              LDR      r0,[r0,#0]  ; time
00393c  49f3              LDR      r1,|L1.15628|
00393e  6008              STR      r0,[r1,#0]  ; l
003940  48f0              LDR      r0,|L1.15620|
003942  6800              LDR      r0,[r0,#0]  ; k
003944  21ff              MOVS     r1,#0xff
003946  312b              ADDS     r1,r1,#0x2b
003948  4288              CMP      r0,r1
00394a  dd09              BLE      |L1.14688|
00394c  2000              MOVS     r0,#0
00394e  49ed              LDR      r1,|L1.15620|
003950  6008              STR      r0,[r1,#0]  ; k
003952  e005              B        |L1.14688|
                  |L1.14676|
;;;1368   				else{
;;;1369   							l--;if(l==10){}
003954  48ed              LDR      r0,|L1.15628|
003956  6800              LDR      r0,[r0,#0]  ; l
003958  1e40              SUBS     r0,r0,#1
00395a  49ec              LDR      r1,|L1.15628|
00395c  6008              STR      r0,[r1,#0]  ; l
00395e  bf00              NOP      
                  |L1.14688|
;;;1370   						}
;;;1371   			}while(!((strstr(uart_string_gps, "OK\r\n"))
003960  49ed              LDR      r1,|L1.15640|
003962  48ec              LDR      r0,|L1.15636|
003964  f7fffffe          BL       strstr
003968  2800              CMP      r0,#0
00396a  d10f              BNE      |L1.14732|
00396c  49eb              LDR      r1,|L1.15644|
00396e  48e9              LDR      r0,|L1.15636|
003970  f7fffffe          BL       strstr
003974  2800              CMP      r0,#0
003976  d109              BNE      |L1.14732|
003978  48e4              LDR      r0,|L1.15628|
00397a  6800              LDR      r0,[r0,#0]  ; l
00397c  2800              CMP      r0,#0
00397e  dd05              BLE      |L1.14732|
003980  49e7              LDR      r1,|L1.15648|
003982  48e4              LDR      r0,|L1.15636|
003984  f7fffffe          BL       strstr
003988  2800              CMP      r0,#0
00398a  d0c5              BEQ      |L1.14616|
                  |L1.14732|
;;;1372   							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;1373   				        	||(strstr(uart_string_gps, "ERROR:"))
;;;1374   							));
;;;1375   //		clear();
;;;1376   }	
00398c  bd70              POP      {r4-r6,pc}
;;;1377   void read2(char * respA,char * respB,char * respC, int timeout)
                          ENDP

                  read2 PROC
00398e  b5f8              PUSH     {r3-r7,lr}
;;;1378   {k=0;l=time;
003990  4604              MOV      r4,r0
003992  460e              MOV      r6,r1
003994  4615              MOV      r5,r2
003996  461f              MOV      r7,r3
003998  2000              MOVS     r0,#0
00399a  49da              LDR      r1,|L1.15620|
00399c  6008              STR      r0,[r1,#0]  ; k
00399e  48da              LDR      r0,|L1.15624|
0039a0  6800              LDR      r0,[r0,#0]  ; time
0039a2  49da              LDR      r1,|L1.15628|
0039a4  6008              STR      r0,[r1,#0]  ; l
;;;1379   			do{
0039a6  bf00              NOP      
                  |L1.14760|
;;;1380   			if( uart_getchar_present (UART2_BASE_PTR))	
0039a8  48de              LDR      r0,|L1.15652|
0039aa  f7fffffe          BL       uart_getchar_present
0039ae  2800              CMP      r0,#0
0039b0  d018              BEQ      |L1.14820|
;;;1381   			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=time;if(k>298){k=0;}}
0039b2  48dc              LDR      r0,|L1.15652|
0039b4  79c0              LDRB     r0,[r0,#7]
0039b6  49d7              LDR      r1,|L1.15636|
0039b8  4ad2              LDR      r2,|L1.15620|
0039ba  6812              LDR      r2,[r2,#0]  ; k
0039bc  5488              STRB     r0,[r1,r2]
0039be  48d1              LDR      r0,|L1.15620|
0039c0  6800              LDR      r0,[r0,#0]  ; k
0039c2  1c40              ADDS     r0,r0,#1
0039c4  49cf              LDR      r1,|L1.15620|
0039c6  6008              STR      r0,[r1,#0]  ; k
0039c8  48cf              LDR      r0,|L1.15624|
0039ca  6800              LDR      r0,[r0,#0]  ; time
0039cc  49cf              LDR      r1,|L1.15628|
0039ce  6008              STR      r0,[r1,#0]  ; l
0039d0  48cc              LDR      r0,|L1.15620|
0039d2  6800              LDR      r0,[r0,#0]  ; k
0039d4  21ff              MOVS     r1,#0xff
0039d6  312b              ADDS     r1,r1,#0x2b
0039d8  4288              CMP      r0,r1
0039da  dd08              BLE      |L1.14830|
0039dc  2000              MOVS     r0,#0
0039de  49c9              LDR      r1,|L1.15620|
0039e0  6008              STR      r0,[r1,#0]  ; k
0039e2  e004              B        |L1.14830|
                  |L1.14820|
;;;1382   				else{				
;;;1383   								l--;
0039e4  48c9              LDR      r0,|L1.15628|
0039e6  6800              LDR      r0,[r0,#0]  ; l
0039e8  1e40              SUBS     r0,r0,#1
0039ea  49c8              LDR      r1,|L1.15628|
0039ec  6008              STR      r0,[r1,#0]  ; l
                  |L1.14830|
;;;1384   						}
;;;1385   			}while(!((strstr(uart_string_gps, respA))
0039ee  4621              MOV      r1,r4
0039f0  48c8              LDR      r0,|L1.15636|
0039f2  f7fffffe          BL       strstr
0039f6  2800              CMP      r0,#0
0039f8  d10f              BNE      |L1.14874|
0039fa  4631              MOV      r1,r6
0039fc  48c5              LDR      r0,|L1.15636|
0039fe  f7fffffe          BL       strstr
003a02  2800              CMP      r0,#0
003a04  d109              BNE      |L1.14874|
003a06  48c1              LDR      r0,|L1.15628|
003a08  6800              LDR      r0,[r0,#0]  ; l
003a0a  2800              CMP      r0,#0
003a0c  dd05              BLE      |L1.14874|
003a0e  4629              MOV      r1,r5
003a10  48c0              LDR      r0,|L1.15636|
003a12  f7fffffe          BL       strstr
003a16  2800              CMP      r0,#0
003a18  d0c6              BEQ      |L1.14760|
                  |L1.14874|
;;;1386   							||(strstr(uart_string_gps, respB))  || (l<=0) 
;;;1387   				        	||(strstr(uart_string_gps, respC))
;;;1388   							));
;;;1389   //		clear();
;;;1390   }	
003a1a  bdf8              POP      {r3-r7,pc}
;;;1391   
                          ENDP

                  send_modem2 PROC
;;;1402   	
;;;1403   void send_modem2(char ch[])
003a1c  b570              PUSH     {r4-r6,lr}
;;;1404   	{	
003a1e  4604              MOV      r4,r0
;;;1405   						unsigned char i21;
;;;1406   						i21=0;
003a20  2500              MOVS     r5,#0
;;;1407   						while ((*(ch+i21)) != '\0') // NULL
003a22  e005              B        |L1.14896|
                  |L1.14884|
;;;1408   						{	
;;;1409   						// delay(1);
;;;1410   						 uart_putchar(UART2_BASE_PTR, (*(ch+i21)));
003a24  5d61              LDRB     r1,[r4,r5]
003a26  48bf              LDR      r0,|L1.15652|
003a28  f7fffffe          BL       uart_putchar
;;;1411   						 i21++;
003a2c  1c68              ADDS     r0,r5,#1
003a2e  b2c5              UXTB     r5,r0
                  |L1.14896|
003a30  5d60              LDRB     r0,[r4,r5]            ;1407
003a32  2800              CMP      r0,#0                 ;1407
003a34  d1f6              BNE      |L1.14884|
;;;1412   						}
;;;1413   		
;;;1414   	}	
003a36  bd70              POP      {r4-r6,pc}
;;;1415   	
                          ENDP

                  gsm_gps_sleep PROC
;;;1638   
;;;1639   void gsm_gps_sleep()
003a38  b508              PUSH     {r3,lr}
;;;1640   {
;;;1641   	
;;;1642   sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
003a3a  4bbb              LDR      r3,|L1.15656|
003a3c  4abb              LDR      r2,|L1.15660|
003a3e  49b8              LDR      r1,|L1.15648|
003a40  3164              ADDS     r1,r1,#0x64
003a42  48bb              LDR      r0,|L1.15664|
003a44  f7fffffe          BL       __2sprintf
;;;1643   send_GSM( at_ , "CONNECT", "ERROR" , "CONNECT",tmeout);										
003a48  48ba              LDR      r0,|L1.15668|
003a4a  6800              LDR      r0,[r0,#0]  ; tmeout
003a4c  4bb4              LDR      r3,|L1.15648|
003a4e  3384              ADDS     r3,r3,#0x84
003a50  4ab2              LDR      r2,|L1.15644|
003a52  3a60              SUBS     r2,r2,#0x60
003a54  4619              MOV      r1,r3
003a56  9000              STR      r0,[sp,#0]
003a58  48b5              LDR      r0,|L1.15664|
003a5a  f7fffffe          BL       send_GSM
;;;1644   send_chunk();
003a5e  f7fffffe          BL       send_chunk
;;;1645   	//sleep modules;
;;;1646   //	do{
;;;1647   //				accel_read();
;;;1648   //				motion_samples = 0;
;;;1649   //				detect_motion();
;;;1650   //				
;;;1651   //	}while(motion != 1);
;;;1652   //	motion_samples = 0;
;;;1653   //wakeup modules;
;;;1654   
;;;1655   
;;;1656   
;;;1657   
;;;1658   }
003a62  bd08              POP      {r3,pc}
;;;1659   
                          ENDP

                  SW1_init PROC
;;;94     
;;;95     void SW1_init(void){
003a64  48b4              LDR      r0,|L1.15672|
;;;96     
;;;97     #ifdef CMSIS
;;;98     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
003a66  6b80              LDR      r0,[r0,#0x38]
003a68  2101              MOVS     r1,#1
003a6a  02c9              LSLS     r1,r1,#11
003a6c  4308              ORRS     r0,r0,r1
003a6e  49b2              LDR      r1,|L1.15672|
003a70  6388              STR      r0,[r1,#0x38]
;;;99     	
;;;100    	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003a72  48b2              LDR      r0,|L1.15676|
003a74  49b2              LDR      r1,|L1.15680|
003a76  60c8              STR      r0,[r1,#0xc]
;;;101    	
;;;102    	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
003a78  48af              LDR      r0,|L1.15672|
003a7a  6b80              LDR      r0,[r0,#0x38]
003a7c  2101              MOVS     r1,#1
003a7e  0309              LSLS     r1,r1,#12
003a80  4308              ORRS     r0,r0,r1
003a82  49ad              LDR      r1,|L1.15672|
003a84  6388              STR      r0,[r1,#0x38]
;;;103    	
;;;104    	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003a86  48ad              LDR      r0,|L1.15676|
003a88  1c40              ADDS     r0,r0,#1
003a8a  49ae              LDR      r1,|L1.15684|
003a8c  6188              STR      r0,[r1,#0x18]
;;;105    	
;;;106    	PORTD_PCR0 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003a8e  1e40              SUBS     r0,r0,#1
003a90  6008              STR      r0,[r1,#0]
;;;107    	
;;;108    	
;;;109    	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
003a92  201f              MOVS     r0,#0x1f
003a94  2800              CMP      r0,#0
003a96  db05              BLT      |L1.15012|
003a98  06c2              LSLS     r2,r0,#27
003a9a  0ed2              LSRS     r2,r2,#27
003a9c  2101              MOVS     r1,#1
003a9e  4091              LSLS     r1,r1,r2
003aa0  4aa9              LDR      r2,|L1.15688|
003aa2  6011              STR      r1,[r2,#0]
                  |L1.15012|
003aa4  bf00              NOP      
;;;110    #else
;;;111               
;;;112            enable_irq(31);
;;;113            set_irq_priority(31, 1);
;;;114            
;;;115            SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;116            
;;;117            PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;118            
;;;119    #endif
;;;120    }
003aa6  4770              BX       lr
;;;121    
                          ENDP

                  LED_state PROC
;;;190    
;;;191    void LED_state(void){
003aa8  b500              PUSH     {lr}
;;;192    if(sleep_flag == 1)
003aaa  48a8              LDR      r0,|L1.15692|
003aac  6800              LDR      r0,[r0,#0]  ; sleep_flag
003aae  2801              CMP      r0,#1
003ab0  d102              BNE      |L1.15032|
;;;193    {stateCount=99;
003ab2  2063              MOVS     r0,#0x63
003ab4  49a6              LDR      r1,|L1.15696|
003ab6  7008              STRB     r0,[r1,#0]
                  |L1.15032|
;;;194    }	
;;;195    			
;;;196    	switch(stateCount){
003ab8  48a5              LDR      r0,|L1.15696|
003aba  7800              LDRB     r0,[r0,#0]  ; stateCount
003abc  0003              MOVS     r3,r0
003abe  f7fffffe          BL       __ARM_common_switch8
003ac2  0604              DCB      0x06,0x04
003ac4  0c141c24          DCB      0x0c,0x14,0x1c,0x24
003ac8  2c34              DCB      0x2c,0x34
;;;197    
;;;198    		
;;;199                case 0:     //Red
;;;200                       REDBAT_ON;
003aca  2040              MOVS     r0,#0x40
003acc  49a1              LDR      r1,|L1.15700|
003ace  6088              STR      r0,[r1,#8]
;;;201                       GREENBAT_OFF;
003ad0  2080              MOVS     r0,#0x80
003ad2  6048              STR      r0,[r1,#4]
;;;202                       BLUEBAT_OFF;
003ad4  0040              LSLS     r0,r0,#1
003ad6  6048              STR      r0,[r1,#4]
;;;203                       break;
003ad8  e032              B        |L1.15168|
;;;204    
;;;205                case 1:	//Yellow
;;;206    		               REDBAT_ON;
003ada  2040              MOVS     r0,#0x40
003adc  499d              LDR      r1,|L1.15700|
003ade  6088              STR      r0,[r1,#8]
;;;207    		               GREENBAT_ON;
003ae0  2080              MOVS     r0,#0x80
003ae2  6088              STR      r0,[r1,#8]
;;;208    		               BLUEBAT_OFF;
003ae4  0040              LSLS     r0,r0,#1
003ae6  6048              STR      r0,[r1,#4]
;;;209    		               break;
003ae8  e02a              B        |L1.15168|
;;;210    				
;;;211                case 2:	//Green
;;;212    		               REDBAT_OFF;
003aea  2040              MOVS     r0,#0x40
003aec  4999              LDR      r1,|L1.15700|
003aee  6048              STR      r0,[r1,#4]
;;;213    		               GREENBAT_ON;
003af0  2080              MOVS     r0,#0x80
003af2  6088              STR      r0,[r1,#8]
;;;214    		               BLUEBAT_OFF;
003af4  0040              LSLS     r0,r0,#1
003af6  6048              STR      r0,[r1,#4]
;;;215    		               break;
003af8  e022              B        |L1.15168|
;;;216    				
;;;217                case 3:	//Blue
;;;218    		               REDBAT_OFF;
003afa  2040              MOVS     r0,#0x40
003afc  4995              LDR      r1,|L1.15700|
003afe  6048              STR      r0,[r1,#4]
;;;219    		               GREENBAT_OFF;
003b00  2080              MOVS     r0,#0x80
003b02  6048              STR      r0,[r1,#4]
;;;220    		               BLUEBAT_ON;
003b04  0040              LSLS     r0,r0,#1
003b06  6088              STR      r0,[r1,#8]
;;;221    		               break;
003b08  e01a              B        |L1.15168|
;;;222    				
;;;223                case 4:	//Violet
;;;224    		               REDBAT_ON;
003b0a  2040              MOVS     r0,#0x40
003b0c  4991              LDR      r1,|L1.15700|
003b0e  6088              STR      r0,[r1,#8]
;;;225    		               GREENBAT_OFF;
003b10  2080              MOVS     r0,#0x80
003b12  6048              STR      r0,[r1,#4]
;;;226    		               BLUEBAT_ON;
003b14  0040              LSLS     r0,r0,#1
003b16  6088              STR      r0,[r1,#8]
;;;227    		               break;
003b18  e012              B        |L1.15168|
;;;228    				
;;;229                case 5:	//White
;;;230    		              REDBAT_ON;
003b1a  2040              MOVS     r0,#0x40
003b1c  498d              LDR      r1,|L1.15700|
003b1e  6088              STR      r0,[r1,#8]
;;;231    		              GREENBAT_ON;
003b20  2080              MOVS     r0,#0x80
003b22  6088              STR      r0,[r1,#8]
;;;232    		              BLUEBAT_ON;
003b24  0040              LSLS     r0,r0,#1
003b26  6088              STR      r0,[r1,#8]
;;;233    		              break;
003b28  e00a              B        |L1.15168|
;;;234    				
;;;235                default:	//Red
;;;236    							
;;;237    
;;;238    		              REDBAT_OFF;
003b2a  2040              MOVS     r0,#0x40
003b2c  4989              LDR      r1,|L1.15700|
003b2e  6048              STR      r0,[r1,#4]
;;;239    		              GREENBAT_OFF;
003b30  2080              MOVS     r0,#0x80
003b32  6048              STR      r0,[r1,#4]
;;;240    		              BLUEBAT_OFF;
003b34  0040              LSLS     r0,r0,#1
003b36  6048              STR      r0,[r1,#4]
;;;241    		              stateCount = 0;	//Reset state counter
003b38  2000              MOVS     r0,#0
003b3a  4985              LDR      r1,|L1.15696|
003b3c  7008              STRB     r0,[r1,#0]
;;;242    			      break;
003b3e  bf00              NOP      
                  |L1.15168|
003b40  bf00              NOP                            ;203
;;;243    
;;;244        }
;;;245    	
;;;246    }
003b42  bd00              POP      {pc}
;;;247    
                          ENDP

                  PORTD_IRQHandler PROC
;;;122    #ifdef CMSIS
;;;123    void PORTD_IRQHandler(void){
003b44  b510              PUSH     {r4,lr}
;;;124      
;;;125    	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
003b46  487e              LDR      r0,|L1.15680|
003b48  3080              ADDS     r0,r0,#0x80
003b4a  6a00              LDR      r0,[r0,#0x20]
003b4c  2108              MOVS     r1,#8
003b4e  4008              ANDS     r0,r0,r1
003b50  2800              CMP      r0,#0
003b52  d016              BEQ      |L1.15234|
;;;126    	{
;;;127    		PORTC_ISFR |= (1 << SW_PIN);
003b54  487a              LDR      r0,|L1.15680|
003b56  3080              ADDS     r0,r0,#0x80
003b58  6a00              LDR      r0,[r0,#0x20]
003b5a  4308              ORRS     r0,r0,r1
003b5c  4978              LDR      r1,|L1.15680|
003b5e  3180              ADDS     r1,r1,#0x80
003b60  6208              STR      r0,[r1,#0x20]
;;;128    		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
003b62  487d              LDR      r0,|L1.15704|
003b64  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
003b66  2101              MOVS     r1,#1
003b68  4308              ORRS     r0,r0,r1
003b6a  497b              LDR      r1,|L1.15704|
003b6c  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;129    ringflag=1;
003b6e  2001              MOVS     r0,#1
003b70  497a              LDR      r1,|L1.15708|
003b72  7008              STRB     r0,[r1,#0]
;;;130    send_SOS=1;	
003b74  497a              LDR      r1,|L1.15712|
003b76  6008              STR      r0,[r1,#0]  ; send_SOS
;;;131    /**************ISR follows******/	
;;;132     stateCount++;
003b78  4875              LDR      r0,|L1.15696|
003b7a  7800              LDRB     r0,[r0,#0]  ; stateCount
003b7c  1c40              ADDS     r0,r0,#1
003b7e  4974              LDR      r1,|L1.15696|
003b80  7008              STRB     r0,[r1,#0]
                  |L1.15234|
;;;133    	}
;;;134    	
;;;135    	if(PORTD_ISFR & (1 << 0))		//Check for interrupt on PORTD Pin 6
003b82  4870              LDR      r0,|L1.15684|
003b84  3080              ADDS     r0,r0,#0x80
003b86  6a00              LDR      r0,[r0,#0x20]
003b88  07c0              LSLS     r0,r0,#31
003b8a  0fc0              LSRS     r0,r0,#31
003b8c  2800              CMP      r0,#0
003b8e  d014              BEQ      |L1.15290|
;;;136    	{
;;;137    		PORTD_ISFR |= (1 << 0);
003b90  486c              LDR      r0,|L1.15684|
003b92  3080              ADDS     r0,r0,#0x80
003b94  6a00              LDR      r0,[r0,#0x20]
003b96  2101              MOVS     r1,#1
003b98  4308              ORRS     r0,r0,r1
003b9a  496a              LDR      r1,|L1.15684|
003b9c  3180              ADDS     r1,r1,#0x80
003b9e  6208              STR      r0,[r1,#0x20]
;;;138    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
003ba0  486d              LDR      r0,|L1.15704|
003ba2  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
003ba4  2101              MOVS     r1,#1
003ba6  4308              ORRS     r0,r0,r1
003ba8  496b              LDR      r1,|L1.15704|
003baa  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;139    	
;;;140    /**************ISR follows******/	
;;;141    // stateCount++;
;;;142    ringflag=1;
003bac  2001              MOVS     r0,#1
003bae  496b              LDR      r1,|L1.15708|
003bb0  7008              STRB     r0,[r1,#0]
;;;143    send_SOS=1;		
003bb2  496b              LDR      r1,|L1.15712|
003bb4  6008              STR      r0,[r1,#0]  ; send_SOS
;;;144    
;;;145    	// wakeup and reset
;;;146    	
;;;147    clear();	
003bb6  f7fffffe          BL       clear
                  |L1.15290|
;;;148    	}	
;;;149    	
;;;150    	
;;;151    	
;;;152    	
;;;153    	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
003bba  4862              LDR      r0,|L1.15684|
003bbc  3080              ADDS     r0,r0,#0x80
003bbe  6a00              LDR      r0,[r0,#0x20]
003bc0  2140              MOVS     r1,#0x40
003bc2  4008              ANDS     r0,r0,r1
003bc4  2800              CMP      r0,#0
003bc6  d011              BEQ      |L1.15340|
;;;154    	{
;;;155    		PORTD_ISFR |= (1 << 6);
003bc8  485e              LDR      r0,|L1.15684|
003bca  3080              ADDS     r0,r0,#0x80
003bcc  6a00              LDR      r0,[r0,#0x20]
003bce  4308              ORRS     r0,r0,r1
003bd0  495c              LDR      r1,|L1.15684|
003bd2  3180              ADDS     r1,r1,#0x80
003bd4  6208              STR      r0,[r1,#0x20]
;;;156    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
003bd6  4860              LDR      r0,|L1.15704|
003bd8  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
003bda  2101              MOVS     r1,#1
003bdc  4308              ORRS     r0,r0,r1
003bde  495e              LDR      r1,|L1.15704|
003be0  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;157    	
;;;158    /**************ISR follows******/	
;;;159    // stateCount++;
;;;160    		
;;;161    ringflag=1;
003be2  2001              MOVS     r0,#1
003be4  495d              LDR      r1,|L1.15708|
003be6  7008              STRB     r0,[r1,#0]
;;;162    	// wakeup and reset
;;;163    	
;;;164    clear();	
003be8  f7fffffe          BL       clear
                  |L1.15340|
;;;165    	}
;;;166    	
;;;167    	LED_state();
003bec  f7fffffe          BL       LED_state
;;;168    }
003bf0  bd10              POP      {r4,pc}
;;;169    
                          ENDP

                  PORTC_action PROC
;;;170    void PORTC_action(void){
003bf2  4770              BX       lr
;;;171    }
;;;172    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
003bf4  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
003bf6  495b              LDR      r1,|L1.15716|
003bf8  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
003bfa  485b              LDR      r0,|L1.15720|
003bfc  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK;   
003bfe  2005              MOVS     r0,#5
003c00  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
003c02  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
003c04  4857              LDR      r0,|L1.15716|
;;;17     {
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
003c06  6900              LDR      r0,[r0,#0x10]
003c08  0840              LSRS     r0,r0,#1
003c0a  0040              LSLS     r0,r0,#1
003c0c  4955              LDR      r1,|L1.15716|
003c0e  6108              STR      r0,[r1,#0x10]
;;;19     }
003c10  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
003c12  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
003c14  4853              LDR      r0,|L1.15716|
003c16  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
003c18  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
003c1a  1b28              SUBS     r0,r5,r4
003c1c  4953              LDR      r1,|L1.15724|
003c1e  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
003c20  4629              MOV      r1,r5
003c22  a053              ADR      r0,|L1.15728|
003c24  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
003c28  4621              MOV      r1,r4
003c2a  a058              ADR      r0,|L1.15756|
003c2c  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
003c30  484e              LDR      r0,|L1.15724|
003c32  6801              LDR      r1,[r0,#0]  ; overhead
003c34  a05c              ADR      r0,|L1.15784|
003c36  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
003c3a  bd70              POP      {r4-r6,pc}
;;;13     #include "stdlib.h"
                          ENDP

                  delay2 PROC
;;;89     }
;;;90      void delay2(int delaytime)
003c3c  e00c              B        |L1.15448|
                  |L1.15422|
;;;91     {
;;;92      while(delaytime--)
;;;93         {for(i=5000;i>0;i--);  // about 1 ms
003c3e  4965              LDR      r1,|L1.15828|
003c40  4a65              LDR      r2,|L1.15832|
003c42  6011              STR      r1,[r2,#0]  ; i
003c44  e004              B        |L1.15440|
                  |L1.15430|
003c46  4964              LDR      r1,|L1.15832|
003c48  6809              LDR      r1,[r1,#0]  ; i
003c4a  1e49              SUBS     r1,r1,#1
003c4c  4a62              LDR      r2,|L1.15832|
003c4e  6011              STR      r1,[r2,#0]  ; i
                  |L1.15440|
003c50  4961              LDR      r1,|L1.15832|
003c52  6809              LDR      r1,[r1,#0]  ; i
003c54  2900              CMP      r1,#0
003c56  dcf6              BGT      |L1.15430|
                  |L1.15448|
003c58  4601              MOV      r1,r0                 ;92
003c5a  1e40              SUBS     r0,r0,#1              ;92
003c5c  2900              CMP      r1,#0                 ;92
003c5e  d1ee              BNE      |L1.15422|
;;;94         }
;;;95     }
003c60  4770              BX       lr
;;;96             
                          ENDP

                  main PROC
;;;136    /********************************************************************/
;;;137    int main (void)
003c62  b51c              PUSH     {r2-r4,lr}
;;;138    {
;;;139    
;;;140    
;;;141    
;;;142    //int_erval=10;
;;;143    								memset(data,0,strlen(data));
003c64  485d              LDR      r0,|L1.15836|
003c66  f7fffffe          BL       strlen
003c6a  4601              MOV      r1,r0
003c6c  9001              STR      r0,[sp,#4]
003c6e  485b              LDR      r0,|L1.15836|
003c70  f7fffffe          BL       __aeabi_memclr
;;;144    								memset(data2,0,strlen(data2));
003c74  485a              LDR      r0,|L1.15840|
003c76  f7fffffe          BL       strlen
003c7a  4601              MOV      r1,r0
003c7c  9001              STR      r0,[sp,#4]
003c7e  4858              LDR      r0,|L1.15840|
003c80  f7fffffe          BL       __aeabi_memclr
;;;145    								memset(ip,0,strlen(ip));
003c84  4829              LDR      r0,|L1.15660|
003c86  f7fffffe          BL       strlen
003c8a  4601              MOV      r1,r0
003c8c  9001              STR      r0,[sp,#4]
003c8e  4827              LDR      r0,|L1.15660|
003c90  f7fffffe          BL       __aeabi_memclr
;;;146    								memset(port,0,strlen(ip));
003c94  4825              LDR      r0,|L1.15660|
003c96  f7fffffe          BL       strlen
003c9a  4601              MOV      r1,r0
003c9c  9001              STR      r0,[sp,#4]
003c9e  4822              LDR      r0,|L1.15656|
003ca0  f7fffffe          BL       __aeabi_memclr
;;;147    
;;;148    	
;;;149    start();
003ca4  f7fffffe          BL       start
;;;150    systick_init();	
003ca8  f7fffffe          BL       systick_init
;;;151    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;152    
;;;153    #endif
;;;154    
;;;155    int_erval=5;
003cac  2005              MOVS     r0,#5
003cae  494d              LDR      r1,|L1.15844|
003cb0  6008              STR      r0,[r1,#0]  ; int_erval
;;;156    
;;;157    
;;;158    	LED_init();		//Initialize GPIO for LEDs
003cb2  f7fffffe          BL       LED_init
;;;159    	RELAY_init();		//Initialize GPIO for LEDs
003cb6  bf00              NOP      
003cb8  481f              LDR      r0,|L1.15672|
003cba  6b80              LDR      r0,[r0,#0x38]
003cbc  2101              MOVS     r1,#1
003cbe  0249              LSLS     r1,r1,#9
003cc0  4308              ORRS     r0,r0,r1
003cc2  491d              LDR      r1,|L1.15672|
003cc4  6388              STR      r0,[r1,#0x38]
003cc6  1588              ASRS     r0,r1,#22
003cc8  4947              LDR      r1,|L1.15848|
003cca  6048              STR      r0,[r1,#4]
003ccc  6088              STR      r0,[r1,#8]
003cce  4821              LDR      r0,|L1.15700|
003cd0  3880              SUBS     r0,r0,#0x80
003cd2  6840              LDR      r0,[r0,#4]
003cd4  2106              MOVS     r1,#6
003cd6  4308              ORRS     r0,r0,r1
003cd8  491e              LDR      r1,|L1.15700|
003cda  3980              SUBS     r1,r1,#0x80
003cdc  6048              STR      r0,[r1,#4]
003cde  4608              MOV      r0,r1
003ce0  6940              LDR      r0,[r0,#0x14]
003ce2  2106              MOVS     r1,#6
003ce4  4308              ORRS     r0,r0,r1
003ce6  491b              LDR      r1,|L1.15700|
003ce8  3980              SUBS     r1,r1,#0x80
003cea  6148              STR      r0,[r1,#0x14]
003cec  2002              MOVS     r0,#2
003cee  6088              STR      r0,[r1,#8]
003cf0  2004              MOVS     r0,#4
003cf2  6088              STR      r0,[r1,#8]
003cf4  bf00              NOP      
;;;160    	SW1_init();		//Initialize GPIO for SW1 w/ interrupt
003cf6  f7fffffe          BL       SW1_init
;;;161    	send_SOS=0;	
003cfa  2000              MOVS     r0,#0
003cfc  4918              LDR      r1,|L1.15712|
003cfe  6008              STR      r0,[r1,#0]  ; send_SOS
;;;162    	//accel_init();
;;;163    	sleep_flag=0;
003d00  4912              LDR      r1,|L1.15692|
003d02  e073              B        |L1.15852|
                  |L1.15620|
                          DCD      k
                  |L1.15624|
                          DCD      time
                  |L1.15628|
                          DCD      l
                  |L1.15632|
                          DCD      0x4006b000
                  |L1.15636|
                          DCD      uart_string_gps
                  |L1.15640|
                          DCD      ||.text||+0xd3c
                  |L1.15644|
                          DCD      ||.text||+0x92c
                  |L1.15648|
                          DCD      ||.text||+0x11d4
                  |L1.15652|
                          DCD      0x4006c000
                  |L1.15656|
                          DCD      port
                  |L1.15660|
                          DCD      ||ip||
                  |L1.15664|
                          DCD      at_
                  |L1.15668|
                          DCD      tmeout
                  |L1.15672|
                          DCD      0x40048000
                  |L1.15676|
                          DCD      0x000a0102
                  |L1.15680|
                          DCD      0x4004b000
                  |L1.15684|
                          DCD      0x4004c000
                  |L1.15688|
                          DCD      0xe000e100
                  |L1.15692|
                          DCD      sleep_flag
                  |L1.15696|
                          DCD      stateCount
                  |L1.15700|
                          DCD      0x400ff080
                  |L1.15704|
                          DCD      gu32PortStatus
                  |L1.15708|
                          DCD      ringflag
                  |L1.15712|
                          DCD      send_SOS
                  |L1.15716|
                          DCD      0xe000e000
                  |L1.15720|
                          DCD      0x00009c3f
                  |L1.15724|
                          DCD      overhead
                  |L1.15728|
003d70  73797374          DCB      "systick start value: 0x%x\n\r",0
003d74  69636b20
003d78  73746172
003d7c  74207661
003d80  6c75653a
003d84  20307825
003d88  780a0d00
                  |L1.15756|
003d8c  73797374          DCB      "systick end value: 0x%x\n\r",0
003d90  69636b20
003d94  656e6420
003d98  76616c75
003d9c  653a2030
003da0  7825780a
003da4  0d00    
003da6  00                DCB      0
003da7  00                DCB      0
                  |L1.15784|
003da8  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
003dac  69636b20
003db0  63757272
003db4  656e7420
003db8  76616c75
003dbc  65207265
003dc0  6164206f
003dc4  76657268
003dc8  6561643a
003dcc  20307825
003dd0  780a0d00
                  |L1.15828|
                          DCD      0x00001388
                  |L1.15832|
                          DCD      i
                  |L1.15836|
                          DCD      data
                  |L1.15840|
                          DCD      data2
                  |L1.15844|
                          DCD      int_erval
                  |L1.15848|
                          DCD      0x40049000
                  |L1.15852|
003dec  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;164    	DTR_OFF;	
003dee  2080              MOVS     r0,#0x80
003df0  49fe              LDR      r1,|L1.16876|
003df2  6088              STR      r0,[r1,#8]
;;;165    	lptmr_init(1000, 1);	
003df4  2101              MOVS     r1,#1
003df6  207d              MOVS     r0,#0x7d
003df8  00c0              LSLS     r0,r0,#3
003dfa  f7fffffe          BL       lptmr_init
;;;166    	ADC_Init();
003dfe  bf00              NOP      
003e00  48fb              LDR      r0,|L1.16880|
003e02  6bc0              LDR      r0,[r0,#0x3c]
003e04  2101              MOVS     r1,#1
003e06  06c9              LSLS     r1,r1,#27
003e08  4308              ORRS     r0,r0,r1
003e0a  49f9              LDR      r1,|L1.16880|
003e0c  63c8              STR      r0,[r1,#0x3c]
003e0e  202d              MOVS     r0,#0x2d
003e10  49f8              LDR      r1,|L1.16884|
003e12  6088              STR      r0,[r1,#8]
003e14  2000              MOVS     r0,#0
003e16  60c8              STR      r0,[r1,#0xc]
003e18  6208              STR      r0,[r1,#0x20]
003e1a  4608              MOV      r0,r1
003e1c  6a40              LDR      r0,[r0,#0x24]
003e1e  2108              MOVS     r1,#8
003e20  4388              BICS     r0,r0,r1
003e22  49f4              LDR      r1,|L1.16884|
003e24  6248              STR      r0,[r1,#0x24]
003e26  bf00              NOP      
;;;167    	
;;;168    //C0
;;;169    
;;;170    
;;;171    //while(1)
;;;172    //{
;;;173    //	
;;;174    //	
;;;175    //	Triggerus();
;;;176    //}
;;;177    
;;;178    
;;;179    
;;;180    
;;;181    //SCB->AIRCR = 0x05fA0000;
;;;182    
;;;183    	int_erval=0;
003e28  2000              MOVS     r0,#0
003e2a  49f3              LDR      r1,|L1.16888|
003e2c  6008              STR      r0,[r1,#0]  ; int_erval
;;;184    
;;;185    		uart_putchar(UART1_BASE_PTR,0xA);
003e2e  210a              MOVS     r1,#0xa
003e30  48f2              LDR      r0,|L1.16892|
003e32  f7fffffe          BL       uart_putchar
;;;186    		uart_putchar(UART1_BASE_PTR,0x1A);			
003e36  211a              MOVS     r1,#0x1a
003e38  48f0              LDR      r0,|L1.16892|
003e3a  f7fffffe          BL       uart_putchar
;;;187    msg_sim800();
003e3e  f7fffffe          BL       msg_sim800
;;;188    send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",2);  
003e42  2002              MOVS     r0,#2
003e44  4bee              LDR      r3,|L1.16896|
003e46  4aef              LDR      r2,|L1.16900|
003e48  49ef              LDR      r1,|L1.16904|
003e4a  9000              STR      r0,[sp,#0]
003e4c  a0ef              ADR      r0,|L1.16908|
003e4e  f7fffffe          BL       send_GSM
;;;189     delay(100); 
003e52  2064              MOVS     r0,#0x64
003e54  f7fffffe          BL       delay
;;;190    
;;;191    clear();delay(100);
003e58  f7fffffe          BL       clear
003e5c  2064              MOVS     r0,#0x64
003e5e  f7fffffe          BL       delay
;;;192    msg_sim800();
003e62  f7fffffe          BL       msg_sim800
;;;193    
;;;194    GPS_COLLECT();
003e66  f7fffffe          BL       GPS_COLLECT
;;;195    strcat(data,"CH'1'\n");	
003e6a  a1ea              ADR      r1,|L1.16916|
003e6c  48eb              LDR      r0,|L1.16924|
003e6e  f7fffffe          BL       strcat
;;;196    delay(5000);
003e72  48eb              LDR      r0,|L1.16928|
003e74  f7fffffe          BL       delay
;;;197    
;;;198    int_erval=5;
003e78  2005              MOVS     r0,#5
003e7a  49df              LDR      r1,|L1.16888|
003e7c  6008              STR      r0,[r1,#0]  ; int_erval
;;;199    
;;;200    //if(!(strstr(uart_string_gsm, "OK")|| strstr(uart_string_gsm, "ERROR")))
;;;201    //{HardFault_Handler();}
;;;202    ignread();
003e7e  f7fffffe          BL       ignread
;;;203    msg_sim800();
003e82  f7fffffe          BL       msg_sim800
;;;204    
;;;205    //	saveapn();
;;;206    	
;;;207    readapn();
003e86  f7fffffe          BL       readapn
;;;208    
;;;209    //HardFault_Handler();
;;;210    
;;;211    //RESET_ON;
;;;212    
;;;213    
;;;214    //send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
;;;215    clear();	
003e8a  f7fffffe          BL       clear
;;;216    //delay(10);
;;;217    
;;;218    //send_GSM("\r\nAT+CFUN=1\r\n", "Ready", "NOT INSERTED" , "ERROR",7);	
;;;219    
;;;220    msg_sim800();
003e8e  f7fffffe          BL       msg_sim800
;;;221    	
;;;222    GPS_COLLECT();
003e92  f7fffffe          BL       GPS_COLLECT
;;;223    strcat(data,"CH\n");	
003e96  49db              LDR      r1,|L1.16900|
003e98  3930              SUBS     r1,r1,#0x30
003e9a  48e0              LDR      r0,|L1.16924|
003e9c  f7fffffe          BL       strcat
;;;224    
;;;225    //GPS_COLLECT();
;;;226    //  strcat(data,"CH\n");	
;;;227    //	
;;;228    
;;;229    GPS_COLLECT();
003ea0  f7fffffe          BL       GPS_COLLECT
;;;230    strcat(data,"CH\n");	
003ea4  49d7              LDR      r1,|L1.16900|
003ea6  3930              SUBS     r1,r1,#0x30
003ea8  48dc              LDR      r0,|L1.16924|
003eaa  f7fffffe          BL       strcat
;;;231    
;;;232    msg_sim800();
003eae  f7fffffe          BL       msg_sim800
;;;233    
;;;234    stateCount=3;
003eb2  2003              MOVS     r0,#3
003eb4  49db              LDR      r1,|L1.16932|
003eb6  7008              STRB     r0,[r1,#0]
;;;235    LED_state();
003eb8  f7fffffe          BL       LED_state
;;;236    
;;;237    
;;;238    
;;;239    
;;;240    
;;;241    	
;;;242    //send_modem2("$PMTK225,0*2B");
;;;243    //while(!strstr(uart_string_gsm,"OK\r\n"));
;;;244    
;;;245    //bat_cind();
;;;246    //delay(1000);
;;;247    
;;;248    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003ebc  48da              LDR      r0,|L1.16936|
003ebe  6800              LDR      r0,[r0,#0]  ; tmeout
003ec0  4bcf              LDR      r3,|L1.16896|
003ec2  4ad0              LDR      r2,|L1.16900|
003ec4  49d0              LDR      r1,|L1.16904|
003ec6  9000              STR      r0,[sp,#0]
003ec8  a0d8              ADR      r0,|L1.16940|
003eca  f7fffffe          BL       send_GSM
;;;249    //delay(10);
;;;250    
;;;251    send_GSM("\n\nATS0=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003ece  48d6              LDR      r0,|L1.16936|
003ed0  6800              LDR      r0,[r0,#0]  ; tmeout
003ed2  4bcb              LDR      r3,|L1.16896|
003ed4  4acb              LDR      r2,|L1.16900|
003ed6  49cc              LDR      r1,|L1.16904|
003ed8  9000              STR      r0,[sp,#0]
003eda  a0d7              ADR      r0,|L1.16952|
003edc  f7fffffe          BL       send_GSM
;;;252    	msg_sim800(); 
003ee0  f7fffffe          BL       msg_sim800
;;;253    
;;;254    send_GSM("\n\nAT&F\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003ee4  48d0              LDR      r0,|L1.16936|
003ee6  6800              LDR      r0,[r0,#0]  ; tmeout
003ee8  4bc5              LDR      r3,|L1.16896|
003eea  4ac6              LDR      r2,|L1.16900|
003eec  49c6              LDR      r1,|L1.16904|
003eee  9000              STR      r0,[sp,#0]
003ef0  a0d4              ADR      r0,|L1.16964|
003ef2  f7fffffe          BL       send_GSM
;;;255    
;;;256    
;;;257    send_GSM("\n\nAT&D\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003ef6  48cc              LDR      r0,|L1.16936|
003ef8  6800              LDR      r0,[r0,#0]  ; tmeout
003efa  4bc1              LDR      r3,|L1.16896|
003efc  4ac1              LDR      r2,|L1.16900|
003efe  49c2              LDR      r1,|L1.16904|
003f00  9000              STR      r0,[sp,#0]
003f02  a0d3              ADR      r0,|L1.16976|
003f04  f7fffffe          BL       send_GSM
;;;258    
;;;259    
;;;260    send_GSM("\n\nAT+IFC=0,0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f08  48c7              LDR      r0,|L1.16936|
003f0a  6800              LDR      r0,[r0,#0]  ; tmeout
003f0c  4bbc              LDR      r3,|L1.16896|
003f0e  4abd              LDR      r2,|L1.16900|
003f10  49bd              LDR      r1,|L1.16904|
003f12  9000              STR      r0,[sp,#0]
003f14  a0d1              ADR      r0,|L1.16988|
003f16  f7fffffe          BL       send_GSM
;;;261    
;;;262    	msg_sim800(); 
003f1a  f7fffffe          BL       msg_sim800
;;;263    
;;;264    send_GSM("\n\nAT+CIPQSEND?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f1e  48c2              LDR      r0,|L1.16936|
003f20  6800              LDR      r0,[r0,#0]  ; tmeout
003f22  4bb7              LDR      r3,|L1.16896|
003f24  4ab7              LDR      r2,|L1.16900|
003f26  49b8              LDR      r1,|L1.16904|
003f28  9000              STR      r0,[sp,#0]
003f2a  a0d0              ADR      r0,|L1.17004|
003f2c  f7fffffe          BL       send_GSM
;;;265    
;;;266    send_GSM("\n\nAT+CIPQSEND=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f30  48bd              LDR      r0,|L1.16936|
003f32  6800              LDR      r0,[r0,#0]  ; tmeout
003f34  4bb2              LDR      r3,|L1.16896|
003f36  4ab3              LDR      r2,|L1.16900|
003f38  49b3              LDR      r1,|L1.16904|
003f3a  9000              STR      r0,[sp,#0]
003f3c  a0d0              ADR      r0,|L1.17024|
003f3e  f7fffffe          BL       send_GSM
;;;267    
;;;268    //delay(10);
;;;269    
;;;270    
;;;271    
;;;272    
;;;273    //delay(10);
;;;274    send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f42  48b9              LDR      r0,|L1.16936|
003f44  6800              LDR      r0,[r0,#0]  ; tmeout
003f46  4bae              LDR      r3,|L1.16896|
003f48  4aae              LDR      r2,|L1.16900|
003f4a  49af              LDR      r1,|L1.16904|
003f4c  9000              STR      r0,[sp,#0]
003f4e  a0d1              ADR      r0,|L1.17044|
003f50  f7fffffe          BL       send_GSM
;;;275    
;;;276    
;;;277    
;;;278    
;;;279    
;;;280    
;;;281    
;;;282    
;;;283    send_GSM("\n\nAT+SD2PCM=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f54  48b4              LDR      r0,|L1.16936|
003f56  6800              LDR      r0,[r0,#0]  ; tmeout
003f58  4ba9              LDR      r3,|L1.16896|
003f5a  4aaa              LDR      r2,|L1.16900|
003f5c  49aa              LDR      r1,|L1.16904|
003f5e  9000              STR      r0,[sp,#0]
003f60  a0d1              ADR      r0,|L1.17064|
003f62  f7fffffe          BL       send_GSM
;;;284    //delay(10);	
;;;285    
;;;286    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f66  48b0              LDR      r0,|L1.16936|
003f68  6800              LDR      r0,[r0,#0]  ; tmeout
003f6a  4ba5              LDR      r3,|L1.16896|
003f6c  4aa5              LDR      r2,|L1.16900|
003f6e  49a6              LDR      r1,|L1.16904|
003f70  9000              STR      r0,[sp,#0]
003f72  a0ae              ADR      r0,|L1.16940|
003f74  f7fffffe          BL       send_GSM
;;;287    delay(10);	
003f78  200a              MOVS     r0,#0xa
003f7a  f7fffffe          BL       delay
;;;288    send_GSM("\n\nAT+FSDRIVE=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f7e  48aa              LDR      r0,|L1.16936|
003f80  6800              LDR      r0,[r0,#0]  ; tmeout
003f82  4b9f              LDR      r3,|L1.16896|
003f84  4a9f              LDR      r2,|L1.16900|
003f86  49a0              LDR      r1,|L1.16904|
003f88  9000              STR      r0,[sp,#0]
003f8a  a0cb              ADR      r0,|L1.17080|
003f8c  f7fffffe          BL       send_GSM
;;;289    clear();
003f90  f7fffffe          BL       clear
;;;290    delay(10);	
003f94  200a              MOVS     r0,#0xa
003f96  f7fffffe          BL       delay
;;;291    //;	
;;;292    //send_GSM("\n\nAT+FSCREATE=D:\\LOG.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;293    
;;;294    	GPS_COLLECT();
003f9a  f7fffffe          BL       GPS_COLLECT
;;;295      strcat(data,"CH\n");	
003f9e  4999              LDR      r1,|L1.16900|
003fa0  3930              SUBS     r1,r1,#0x30
003fa2  489e              LDR      r0,|L1.16924|
003fa4  f7fffffe          BL       strcat
;;;296    
;;;297    send_GSM("\n\nAT+FSMEM\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003fa8  489f              LDR      r0,|L1.16936|
003faa  6800              LDR      r0,[r0,#0]  ; tmeout
003fac  4b94              LDR      r3,|L1.16896|
003fae  4a95              LDR      r2,|L1.16900|
003fb0  4995              LDR      r1,|L1.16904|
003fb2  9000              STR      r0,[sp,#0]
003fb4  a0c5              ADR      r0,|L1.17100|
003fb6  f7fffffe          BL       send_GSM
;;;298    delay(100);	
003fba  2064              MOVS     r0,#0x64
003fbc  f7fffffe          BL       delay
;;;299    
;;;300    if(strstr(uart_string_gsm,"D:")){
003fc0  a1c6              ADR      r1,|L1.17116|
003fc2  48c7              LDR      r0,|L1.17120|
003fc4  f7fffffe          BL       strstr
003fc8  2800              CMP      r0,#0
003fca  d01f              BEQ      |L1.16396|
;;;301    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003fcc  4896              LDR      r0,|L1.16936|
003fce  6800              LDR      r0,[r0,#0]  ; tmeout
003fd0  4b8b              LDR      r3,|L1.16896|
003fd2  4a8c              LDR      r2,|L1.16900|
003fd4  498c              LDR      r1,|L1.16904|
003fd6  9000              STR      r0,[sp,#0]
003fd8  a0c2              ADR      r0,|L1.17124|
003fda  f7fffffe          BL       send_GSM
;;;302    	
;;;303    memset(at_,0,100);
003fde  2164              MOVS     r1,#0x64
003fe0  48ca              LDR      r0,|L1.17164|
003fe2  f7fffffe          BL       __aeabi_memclr
;;;304    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003fe6  2202              MOVS     r2,#2
003fe8  a1c9              ADR      r1,|L1.17168|
003fea  48c8              LDR      r0,|L1.17164|
003fec  f7fffffe          BL       __2sprintf
;;;305    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003ff0  200a              MOVS     r0,#0xa
003ff2  4b83              LDR      r3,|L1.16896|
003ff4  4a83              LDR      r2,|L1.16900|
003ff6  a1d1              ADR      r1,|L1.17212|
003ff8  9000              STR      r0,[sp,#0]
003ffa  48c4              LDR      r0,|L1.17164|
003ffc  f7fffffe          BL       send_GSM
;;;306    	
;;;307    clear();
004000  f7fffffe          BL       clear
;;;308    send_modem("D:");	
004004  a0b5              ADR      r0,|L1.17116|
004006  f7fffffe          BL       send_modem
00400a  e01e              B        |L1.16458|
                  |L1.16396|
;;;309    	
;;;310    }
;;;311    else{
;;;312    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
00400c  4886              LDR      r0,|L1.16936|
00400e  6800              LDR      r0,[r0,#0]  ; tmeout
004010  4b7b              LDR      r3,|L1.16896|
004012  4a7c              LDR      r2,|L1.16900|
004014  497c              LDR      r1,|L1.16904|
004016  9000              STR      r0,[sp,#0]
004018  a0b2              ADR      r0,|L1.17124|
00401a  f7fffffe          BL       send_GSM
;;;313    	
;;;314    memset(at_,0,100);
00401e  2164              MOVS     r1,#0x64
004020  48ba              LDR      r0,|L1.17164|
004022  f7fffffe          BL       __aeabi_memclr
;;;315    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
004026  2202              MOVS     r2,#2
004028  a1b9              ADR      r1,|L1.17168|
00402a  48b8              LDR      r0,|L1.17164|
00402c  f7fffffe          BL       __2sprintf
;;;316    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
004030  200a              MOVS     r0,#0xa
004032  4b73              LDR      r3,|L1.16896|
004034  4a73              LDR      r2,|L1.16900|
004036  a1c1              ADR      r1,|L1.17212|
004038  9000              STR      r0,[sp,#0]
00403a  48b4              LDR      r0,|L1.17164|
00403c  f7fffffe          BL       send_GSM
;;;317    	
;;;318    clear();
004040  f7fffffe          BL       clear
;;;319    send_modem("C:");		
004044  a0be              ADR      r0,|L1.17216|
004046  f7fffffe          BL       send_modem
                  |L1.16458|
;;;320    	
;;;321    }	
;;;322    
;;;323    delay(100);
00404a  2064              MOVS     r0,#0x64
00404c  f7fffffe          BL       delay
;;;324    
;;;325    //delay(10);
;;;326    
;;;327    send_GSM("\n\nATS0=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004050  4875              LDR      r0,|L1.16936|
004052  6800              LDR      r0,[r0,#0]  ; tmeout
004054  4b6a              LDR      r3,|L1.16896|
004056  4a6b              LDR      r2,|L1.16900|
004058  496b              LDR      r1,|L1.16904|
00405a  9000              STR      r0,[sp,#0]
00405c  a0b9              ADR      r0,|L1.17220|
00405e  f7fffffe          BL       send_GSM
;;;328    
;;;329    
;;;330    send_GSM("\n\nAT+CSCLK=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004062  4871              LDR      r0,|L1.16936|
004064  6800              LDR      r0,[r0,#0]  ; tmeout
004066  4b66              LDR      r3,|L1.16896|
004068  4a66              LDR      r2,|L1.16900|
00406a  4967              LDR      r1,|L1.16904|
00406c  9000              STR      r0,[sp,#0]
00406e  a0b8              ADR      r0,|L1.17232|
004070  f7fffffe          BL       send_GSM
;;;331    
;;;332    
;;;333    send_GSM("\r\n\r\nAT+CMGD=1,4\r\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
004074  486c              LDR      r0,|L1.16936|
004076  6800              LDR      r0,[r0,#0]  ; tmeout
004078  4b61              LDR      r3,|L1.16896|
00407a  4a62              LDR      r2,|L1.16900|
00407c  4962              LDR      r1,|L1.16904|
00407e  9000              STR      r0,[sp,#0]
004080  a0b7              ADR      r0,|L1.17248|
004082  f7fffffe          BL       send_GSM
;;;334    
;;;335    
;;;336    //send_GSM("\n\nAT+CPBW=5,\"0\",129,\"OWNER5\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;337    
;;;338    
;;;339    //send_GSM("\n\nAT+CPBW=6,\"0\",129,\"OWNER6\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;340    
;;;341    ignread();
004086  f7fffffe          BL       ignread
;;;342    readapn();
00408a  f7fffffe          BL       readapn
;;;343    readcursor();
00408e  f7fffffe          BL       readcursor
;;;344    
;;;345    read_interval();
004092  f7fffffe          BL       read_interval
;;;346    send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
004096  4864              LDR      r0,|L1.16936|
004098  6800              LDR      r0,[r0,#0]  ; tmeout
00409a  4b59              LDR      r3,|L1.16896|
00409c  4a59              LDR      r2,|L1.16900|
00409e  495a              LDR      r1,|L1.16904|
0040a0  9000              STR      r0,[sp,#0]
0040a2  a0b5              ADR      r0,|L1.17272|
0040a4  f7fffffe          BL       send_GSM
;;;347    //delay(10);	
;;;348    
;;;349    send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
0040a8  485f              LDR      r0,|L1.16936|
0040aa  6800              LDR      r0,[r0,#0]  ; tmeout
0040ac  4b54              LDR      r3,|L1.16896|
0040ae  4a55              LDR      r2,|L1.16900|
0040b0  4955              LDR      r1,|L1.16904|
0040b2  9000              STR      r0,[sp,#0]
0040b4  a0b4              ADR      r0,|L1.17288|
0040b6  f7fffffe          BL       send_GSM
;;;350    							memset(at_,0,100);
0040ba  2164              MOVS     r1,#0x64
0040bc  4893              LDR      r0,|L1.17164|
0040be  f7fffffe          BL       __aeabi_memclr
;;;351    							memset(num_o,0,15);
0040c2  210f              MOVS     r1,#0xf
0040c4  48b4              LDR      r0,|L1.17304|
0040c6  f7fffffe          BL       __aeabi_memclr
;;;352    							parse_g(uart_string_gsm, 1, 2, '\"', '\"', num_o);
0040ca  48b3              LDR      r0,|L1.17304|
0040cc  2122              MOVS     r1,#0x22
0040ce  460b              MOV      r3,r1
0040d0  2202              MOVS     r2,#2
0040d2  9100              STR      r1,[sp,#0]
0040d4  9001              STR      r0,[sp,#4]
0040d6  2101              MOVS     r1,#1
0040d8  4881              LDR      r0,|L1.17120|
0040da  f7fffffe          BL       parse_g
;;;353    							sprintf(at_, "\r\nAT+CSCA=\"%s\"\r\n", num_o);
0040de  4aae              LDR      r2,|L1.17304|
0040e0  a1ae              ADR      r1,|L1.17308|
0040e2  488a              LDR      r0,|L1.17164|
0040e4  f7fffffe          BL       __2sprintf
;;;354    							send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
0040e8  484f              LDR      r0,|L1.16936|
0040ea  6800              LDR      r0,[r0,#0]  ; tmeout
0040ec  4b44              LDR      r3,|L1.16896|
0040ee  4a45              LDR      r2,|L1.16900|
0040f0  4945              LDR      r1,|L1.16904|
0040f2  9000              STR      r0,[sp,#0]
0040f4  4885              LDR      r0,|L1.17164|
0040f6  f7fffffe          BL       send_GSM
;;;355    
;;;356    
;;;357    
;;;358    read_ip_port();
0040fa  f7fffffe          BL       read_ip_port
;;;359    		memset(at_,0,100);
0040fe  2164              MOVS     r1,#0x64
004100  4882              LDR      r0,|L1.17164|
004102  f7fffffe          BL       __aeabi_memclr
;;;360    		memset(drive,0,5);
004106  2105              MOVS     r1,#5
004108  48a9              LDR      r0,|L1.17328|
00410a  f7fffffe          BL       __aeabi_memclr4
;;;361    		sprintf(at_, "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n");		
00410e  a1a9              ADR      r1,|L1.17332|
004110  487e              LDR      r0,|L1.17164|
004112  f7fffffe          BL       __2sprintf
;;;362    		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
004116  200a              MOVS     r0,#0xa
004118  4b39              LDR      r3,|L1.16896|
00411a  4a3a              LDR      r2,|L1.16900|
00411c  a1b0              ADR      r1,|L1.17376|
00411e  9000              STR      r0,[sp,#0]
004120  487a              LDR      r0,|L1.17164|
004122  f7fffffe          BL       send_GSM
;;;363    		parse_g(uart_string_gsm, 1,3, '\n', '\r',drive);
004126  48a2              LDR      r0,|L1.17328|
004128  210d              MOVS     r1,#0xd
00412a  230a              MOVS     r3,#0xa
00412c  2203              MOVS     r2,#3
00412e  9100              STR      r1,[sp,#0]
004130  9001              STR      r0,[sp,#4]
004132  2101              MOVS     r1,#1
004134  486a              LDR      r0,|L1.17120|
004136  f7fffffe          BL       parse_g
;;;364    	
;;;365    
;;;366    msg_sim800(); 
00413a  f7fffffe          BL       msg_sim800
;;;367    
;;;368    //setting interval 4
;;;369    
;;;370    temp=int_erval;				
00413e  482e              LDR      r0,|L1.16888|
004140  6800              LDR      r0,[r0,#0]  ; int_erval
004142  49a8              LDR      r1,|L1.17380|
004144  6008              STR      r0,[r1,#0]  ; temp
;;;371    int_erval=4;
004146  2004              MOVS     r0,#4
004148  492b              LDR      r1,|L1.16888|
00414a  6008              STR      r0,[r1,#0]  ; int_erval
;;;372    
;;;373    
;;;374    
;;;375    								//GPS_COLLECT();
;;;376    								send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",5);	
00414c  2005              MOVS     r0,#5
00414e  4b2c              LDR      r3,|L1.16896|
004150  4a2c              LDR      r2,|L1.16900|
004152  a1a3              ADR      r1,|L1.17376|
004154  9000              STR      r0,[sp,#0]
004156  4618              MOV      r0,r3
004158  300c              ADDS     r0,r0,#0xc
00415a  f7fffffe          BL       send_GSM
;;;377    								//delay(20);		
;;;378    								GPS_COLLECT();
00415e  f7fffffe          BL       GPS_COLLECT
;;;379    								strcat(data,"CH\n");	
004162  4928              LDR      r1,|L1.16900|
004164  3930              SUBS     r1,r1,#0x30
004166  482d              LDR      r0,|L1.16924|
004168  f7fffffe          BL       strcat
;;;380    
;;;381    
;;;382    msg_sim800(); 
00416c  f7fffffe          BL       msg_sim800
;;;383    
;;;384    	memset(at_,0,100);
004170  2164              MOVS     r1,#0x64
004172  4866              LDR      r0,|L1.17164|
004174  f7fffffe          BL       __aeabi_memclr
;;;385    		sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
004178  4a9b              LDR      r2,|L1.17384|
00417a  4921              LDR      r1,|L1.16896|
00417c  3124              ADDS     r1,r1,#0x24
00417e  4863              LDR      r0,|L1.17164|
004180  f7fffffe          BL       __2sprintf
;;;386    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
004184  4828              LDR      r0,|L1.16936|
004186  6800              LDR      r0,[r0,#0]  ; tmeout
004188  4b1d              LDR      r3,|L1.16896|
00418a  4a1e              LDR      r2,|L1.16900|
00418c  a194              ADR      r1,|L1.17376|
00418e  9000              STR      r0,[sp,#0]
004190  485e              LDR      r0,|L1.17164|
004192  f7fffffe          BL       send_GSM
;;;387    								//delay(20);
;;;388    			//					GPS_COLLECT();
;;;389    
;;;390    msg_sim800(); 
004196  f7fffffe          BL       msg_sim800
;;;391    
;;;392    	
;;;393    								send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
00419a  2005              MOVS     r0,#5
00419c  4b19              LDR      r3,|L1.16900|
00419e  3b48              SUBS     r3,r3,#0x48
0041a0  4a18              LDR      r2,|L1.16900|
0041a2  a18f              ADR      r1,|L1.17376|
0041a4  9000              STR      r0,[sp,#0]
0041a6  4816              LDR      r0,|L1.16896|
0041a8  303c              ADDS     r0,r0,#0x3c
0041aa  f7fffffe          BL       send_GSM
;;;394    								//delay(20);
;;;395    								GPS_COLLECT();
0041ae  f7fffffe          BL       GPS_COLLECT
;;;396    								strcat(data,"CH\n");	
0041b2  4914              LDR      r1,|L1.16900|
0041b4  3930              SUBS     r1,r1,#0x30
0041b6  4819              LDR      r0,|L1.16924|
0041b8  f7fffffe          BL       strcat
;;;397    
;;;398    
;;;399    
;;;400    								GPS_COLLECT();
0041bc  f7fffffe          BL       GPS_COLLECT
;;;401    								strcat(data,"CH\n");	
0041c0  4910              LDR      r1,|L1.16900|
0041c2  3930              SUBS     r1,r1,#0x30
0041c4  4815              LDR      r0,|L1.16924|
0041c6  f7fffffe          BL       strcat
;;;402    
;;;403    msg_sim800(); 
0041ca  f7fffffe          BL       msg_sim800
;;;404    
;;;405    								
;;;406    								clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0041ce  f7fffffe          BL       clear
0041d2  480b              LDR      r0,|L1.16896|
0041d4  304c              ADDS     r0,r0,#0x4c
0041d6  f7fffffe          BL       send_modem
0041da  f7fffffe          BL       clear
;;;407    								delay(20);
0041de  2014              MOVS     r0,#0x14
0041e0  f7fffffe          BL       delay
;;;408    	
;;;409    
;;;410    msg_sim800(); 
0041e4  f7fffffe          BL       msg_sim800
;;;411    
;;;412    		
;;;413    								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0041e8  4b80              LDR      r3,|L1.17388|
0041ea  e101              B        |L1.17392|
                  |L1.16876|
                          DCD      0x400ff0c0
                  |L1.16880|
                          DCD      0x40048000
                  |L1.16884|
                          DCD      0x4003b000
                  |L1.16888|
                          DCD      int_erval
                  |L1.16892|
                          DCD      0x4006b000
                  |L1.16896|
                          DCD      ||.text||+0x11d4
                  |L1.16900|
                          DCD      ||.text||+0x92c
                  |L1.16904|
                          DCD      ||.text||+0xd3c
                  |L1.16908|
00420c  0a0a4154          DCB      "\n\nAT\r\n",0
004210  0d0a00  
004213  00                DCB      0
                  |L1.16916|
004214  43482731          DCB      "CH'1'\n",0
004218  270a00  
00421b  00                DCB      0
                  |L1.16924|
                          DCD      data
                  |L1.16928|
                          DCD      0x00001388
                  |L1.16932|
                          DCD      stateCount
                  |L1.16936|
                          DCD      tmeout
                  |L1.16940|
00422c  0a0a4154          DCB      "\n\nAT&W\r\n",0
004230  26570d0a
004234  00      
004235  00                DCB      0
004236  00                DCB      0
004237  00                DCB      0
                  |L1.16952|
004238  0a0a4154          DCB      "\n\nATS0=2\r\n",0
00423c  53303d32
004240  0d0a00  
004243  00                DCB      0
                  |L1.16964|
004244  0a0a4154          DCB      "\n\nAT&F\r\n",0
004248  26460d0a
00424c  00      
00424d  00                DCB      0
00424e  00                DCB      0
00424f  00                DCB      0
                  |L1.16976|
004250  0a0a4154          DCB      "\n\nAT&D\r\n",0
004254  26440d0a
004258  00      
004259  00                DCB      0
00425a  00                DCB      0
00425b  00                DCB      0
                  |L1.16988|
00425c  0a0a4154          DCB      "\n\nAT+IFC=0,0\r\n",0
004260  2b494643
004264  3d302c30
004268  0d0a00  
00426b  00                DCB      0
                  |L1.17004|
00426c  0a0a4154          DCB      "\n\nAT+CIPQSEND?\r\n",0
004270  2b434950
004274  5153454e
004278  443f0d0a
00427c  00      
00427d  00                DCB      0
00427e  00                DCB      0
00427f  00                DCB      0
                  |L1.17024|
004280  0a0a4154          DCB      "\n\nAT+CIPQSEND=0\r\n",0
004284  2b434950
004288  5153454e
00428c  443d300d
004290  0a00    
004292  00                DCB      0
004293  00                DCB      0
                  |L1.17044|
004294  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
004298  2b435042
00429c  533d2253
0042a0  4d220d0a
0042a4  00      
0042a5  00                DCB      0
0042a6  00                DCB      0
0042a7  00                DCB      0
                  |L1.17064|
0042a8  0a0a4154          DCB      "\n\nAT+SD2PCM=0\r\n",0
0042ac  2b534432
0042b0  50434d3d
0042b4  300d0a00
                  |L1.17080|
0042b8  0a0a4154          DCB      "\n\nAT+FSDRIVE=1\r\n",0
0042bc  2b465344
0042c0  52495645
0042c4  3d310d0a
0042c8  00      
0042c9  00                DCB      0
0042ca  00                DCB      0
0042cb  00                DCB      0
                  |L1.17100|
0042cc  0a0a4154          DCB      "\n\nAT+FSMEM\r\n",0
0042d0  2b46534d
0042d4  454d0d0a
0042d8  00      
0042d9  00                DCB      0
0042da  00                DCB      0
0042db  00                DCB      0
                  |L1.17116|
0042dc  443a00            DCB      "D:",0
0042df  00                DCB      0
                  |L1.17120|
                          DCD      uart_string_gsm
                  |L1.17124|
0042e4  0a0a4154          DCB      "\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n",0
0042e8  2b465343
0042ec  52454154
0042f0  453d433a
0042f4  5c4c4f47
0042f8  47494e47
0042fc  5f445249
004300  56452e54
004304  58540d0a
004308  00      
004309  00                DCB      0
00430a  00                DCB      0
00430b  00                DCB      0
                  |L1.17164|
                          DCD      at_
                  |L1.17168|
004310  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",0
004314  2b465357
004318  52495445
00431c  3d433a5c
004320  4c4f4747
004324  494e475f
004328  44524956
00432c  452e5458
004330  542c302c
004334  25642c31
004338  300d0a00
                  |L1.17212|
00433c  3e00              DCB      ">",0
00433e  00                DCB      0
00433f  00                DCB      0
                  |L1.17216|
004340  433a00            DCB      "C:",0
004343  00                DCB      0
                  |L1.17220|
004344  0a0a4154          DCB      "\n\nATS0=1\r\n",0
004348  53303d31
00434c  0d0a00  
00434f  00                DCB      0
                  |L1.17232|
004350  0a0a4154          DCB      "\n\nAT+CSCLK=1\r\n",0
004354  2b435343
004358  4c4b3d31
00435c  0d0a00  
00435f  00                DCB      0
                  |L1.17248|
004360  0d0a0d0a          DCB      "\r\n\r\nAT+CMGD=1,4\r\n\n\n\n",0
004364  41542b43
004368  4d47443d
00436c  312c340d
004370  0a0a0a0a
004374  00      
004375  00                DCB      0
004376  00                DCB      0
004377  00                DCB      0
                  |L1.17272|
004378  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
00437c  2b434d47
004380  463d310a
004384  0a00    
004386  00                DCB      0
004387  00                DCB      0
                  |L1.17288|
004388  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
00438c  2b435343
004390  413f0d0a
004394  00      
004395  00                DCB      0
004396  00                DCB      0
004397  00                DCB      0
                  |L1.17304|
                          DCD      num_o
                  |L1.17308|
00439c  0d0a4154          DCB      "\r\nAT+CSCA=""%s""\r\n",0
0043a0  2b435343
0043a4  413d2225
0043a8  73220d0a
0043ac  00      
0043ad  00                DCB      0
0043ae  00                DCB      0
0043af  00                DCB      0
                  |L1.17328|
                          DCD      drive
                  |L1.17332|
0043b4  0a41542b          DCB      "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n",0
0043b8  46535245
0043bc  41443d43
0043c0  3a5c4c4f
0043c4  4747494e
0043c8  475f4452
0043cc  4956452e
0043d0  5458542c
0043d4  302c3130
0043d8  302c310d
0043dc  0a00    
0043de  00                DCB      0
0043df  00                DCB      0
                  |L1.17376|
0043e0  4f4b00            DCB      "OK",0
0043e3  00                DCB      0
                  |L1.17380|
                          DCD      temp
                  |L1.17384|
                          DCD      apn
                  |L1.17388|
                          DCD      port
                  |L1.17392|
0043f0  4afd              LDR      r2,|L1.18408|
0043f2  49fe              LDR      r1,|L1.18412|
0043f4  48fe              LDR      r0,|L1.18416|
0043f6  f7fffffe          BL       __2sprintf
;;;414    								send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
0043fa  48fe              LDR      r0,|L1.18420|
0043fc  6800              LDR      r0,[r0,#0]  ; tmeout
0043fe  4bfe              LDR      r3,|L1.18424|
004400  461a              MOV      r2,r3
004402  3260              ADDS     r2,r2,#0x60
004404  49f9              LDR      r1,|L1.18412|
004406  3120              ADDS     r1,r1,#0x20
004408  9000              STR      r0,[sp,#0]
00440a  48f9              LDR      r0,|L1.18416|
00440c  f7fffffe          BL       send_GSM
;;;415    								clear();
004410  f7fffffe          BL       clear
;;;416    
;;;417    								GPS_COLLECT();
004414  f7fffffe          BL       GPS_COLLECT
;;;418    								strcat(data,"CH\n");	
004418  49f7              LDR      r1,|L1.18424|
00441a  3130              ADDS     r1,r1,#0x30
00441c  48f7              LDR      r0,|L1.18428|
00441e  f7fffffe          BL       strcat
;;;419    
;;;420    		int_erval=temp;
004422  48f7              LDR      r0,|L1.18432|
004424  6800              LDR      r0,[r0,#0]  ; temp
004426  49f7              LDR      r1,|L1.18436|
004428  6008              STR      r0,[r1,#0]  ; int_erval
;;;421    //resetting it to its value
;;;422    
;;;423    								send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
00442a  48f2              LDR      r0,|L1.18420|
00442c  6800              LDR      r0,[r0,#0]  ; tmeout
00442e  4bef              LDR      r3,|L1.18412|
004430  3328              ADDS     r3,r3,#0x28
004432  4af1              LDR      r2,|L1.18424|
004434  a1f4              ADR      r1,|L1.18440|
004436  9000              STR      r0,[sp,#0]
004438  4618              MOV      r0,r3
00443a  3014              ADDS     r0,r0,#0x14
00443c  f7fffffe          BL       send_GSM
;;;424    
;;;425    
;;;426    memset(stcond1,0,strlen(stcond1));	
004440  48f2              LDR      r0,|L1.18444|
004442  6800              LDR      r0,[r0,#0]  ; stcond1
004444  f7fffffe          BL       strlen
004448  4601              MOV      r1,r0
00444a  9001              STR      r0,[sp,#4]
00444c  48ef              LDR      r0,|L1.18444|
00444e  6800              LDR      r0,[r0,#0]  ; stcond1
004450  f7fffffe          BL       __aeabi_memclr
;;;427    memset(con1d,0,strlen(con1d));	
004454  48ee              LDR      r0,|L1.18448|
004456  6800              LDR      r0,[r0,#0]  ; con1d
004458  f7fffffe          BL       strlen
00445c  4601              MOV      r1,r0
00445e  9001              STR      r0,[sp,#4]
004460  48eb              LDR      r0,|L1.18448|
004462  6800              LDR      r0,[r0,#0]  ; con1d
004464  f7fffffe          BL       __aeabi_memclr
;;;428    	
;;;429    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;430    						
;;;431    								cond=mystrstr(uart_string_gsm,'>');
004468  213e              MOVS     r1,#0x3e
00446a  48ea              LDR      r0,|L1.18452|
00446c  f7fffffe          BL       mystrstr
004470  49e9              LDR      r1,|L1.18456|
004472  7008              STRB     r0,[r1,#0]
;;;432    								if(cond)	
004474  4608              MOV      r0,r1
004476  7800              LDRB     r0,[r0,#0]  ; cond
004478  2800              CMP      r0,#0
00447a  d078              BEQ      |L1.17774|
;;;433    								{
;;;434    									
;;;435    									clear();
00447c  f7fffffe          BL       clear
;;;436    									memset(uart_string_gsm,0,5000);
004480  49e6              LDR      r1,|L1.18460|
004482  48e4              LDR      r0,|L1.18452|
004484  f7fffffe          BL       __aeabi_memclr
;;;437    									strcat(data,"\n");
004488  a1e5              ADR      r1,|L1.18464|
00448a  48dc              LDR      r0,|L1.18428|
00448c  f7fffffe          BL       strcat
;;;438    									len=strlen(data);
004490  48da              LDR      r0,|L1.18428|
004492  f7fffffe          BL       strlen
004496  49e3              LDR      r1,|L1.18468|
004498  6008              STR      r0,[r1,#0]  ; len
;;;439    									tout=0;
00449a  2000              MOVS     r0,#0
00449c  49e2              LDR      r1,|L1.18472|
00449e  6008              STR      r0,[r1,#0]  ; tout
;;;440    									k2=0;
0044a0  49e2              LDR      r1,|L1.18476|
0044a2  6008              STR      r0,[r1,#0]  ; k2
;;;441    									for(k=0;k<len;k++)
0044a4  49e2              LDR      r1,|L1.18480|
0044a6  6008              STR      r0,[r1,#0]  ; k
0044a8  e00d              B        |L1.17606|
                  |L1.17578|
;;;442    									{
;;;443    										uart_putchar(UART1_BASE_PTR, data[k]);
0044aa  48d4              LDR      r0,|L1.18428|
0044ac  49e0              LDR      r1,|L1.18480|
0044ae  6809              LDR      r1,[r1,#0]  ; k
0044b0  5c40              LDRB     r0,[r0,r1]
0044b2  4601              MOV      r1,r0
0044b4  9001              STR      r0,[sp,#4]
0044b6  48df              LDR      r0,|L1.18484|
0044b8  f7fffffe          BL       uart_putchar
0044bc  48dc              LDR      r0,|L1.18480|
0044be  6800              LDR      r0,[r0,#0]            ;441  ; k
0044c0  1c40              ADDS     r0,r0,#1              ;441
0044c2  49db              LDR      r1,|L1.18480|
0044c4  6008              STR      r0,[r1,#0]            ;441  ; k
                  |L1.17606|
0044c6  48da              LDR      r0,|L1.18480|
0044c8  6800              LDR      r0,[r0,#0]            ;441  ; k
0044ca  49d6              LDR      r1,|L1.18468|
0044cc  6809              LDR      r1,[r1,#0]            ;441  ; len
0044ce  4288              CMP      r0,r1                 ;441
0044d0  dbeb              BLT      |L1.17578|
;;;444    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0044d2  211a              MOVS     r1,#0x1a
0044d4  48d7              LDR      r0,|L1.18484|
0044d6  f7fffffe          BL       uart_putchar
;;;445    									do
0044da  bf00              NOP      
                  |L1.17628|
;;;446    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0044dc  49c6              LDR      r1,|L1.18424|
0044de  3908              SUBS     r1,r1,#8
0044e0  48cc              LDR      r0,|L1.18452|
0044e2  f7fffffe          BL       strstr
0044e6  49c9              LDR      r1,|L1.18444|
0044e8  6008              STR      r0,[r1,#0]  ; stcond1
;;;447    																	stcond2=strstr(uart_string_gsm, "ERROR");
0044ea  49c3              LDR      r1,|L1.18424|
0044ec  48c9              LDR      r0,|L1.18452|
0044ee  f7fffffe          BL       strstr
0044f2  49d1              LDR      r1,|L1.18488|
0044f4  6008              STR      r0,[r1,#0]  ; stcond2
;;;448    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0044f6  49bd              LDR      r1,|L1.18412|
0044f8  3130              ADDS     r1,r1,#0x30
0044fa  48c6              LDR      r0,|L1.18452|
0044fc  f7fffffe          BL       strstr
004500  49ce              LDR      r1,|L1.18492|
004502  6008              STR      r0,[r1,#0]  ; stcond3
;;;449    																			stcond4=strstr(uart_string_gsm, "DEACT");	
004504  49bc              LDR      r1,|L1.18424|
004506  3118              ADDS     r1,r1,#0x18
004508  48c2              LDR      r0,|L1.18452|
00450a  f7fffffe          BL       strstr
00450e  49cc              LDR      r1,|L1.18496|
004510  6008              STR      r0,[r1,#0]  ; stcond4
;;;450    																	
;;;451    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
004512  48c9              LDR      r0,|L1.18488|
004514  6800              LDR      r0,[r0,#0]  ; stcond2
004516  2800              CMP      r0,#0
004518  d10f              BNE      |L1.17722|
00451a  48c8              LDR      r0,|L1.18492|
00451c  6800              LDR      r0,[r0,#0]  ; stcond3
00451e  2800              CMP      r0,#0
004520  d10b              BNE      |L1.17722|
004522  4608              MOV      r0,r1
004524  6800              LDR      r0,[r0,#0]  ; stcond4
004526  2800              CMP      r0,#0
004528  d107              BNE      |L1.17722|
00452a  48b8              LDR      r0,|L1.18444|
00452c  6800              LDR      r0,[r0,#0]  ; stcond1
00452e  2800              CMP      r0,#0
004530  d103              BNE      |L1.17722|
004532  48bd              LDR      r0,|L1.18472|
004534  6800              LDR      r0,[r0,#0]  ; tout
004536  2808              CMP      r0,#8
004538  ddd0              BLE      |L1.17628|
                  |L1.17722|
;;;452    																//delay(10);clear();
;;;453    														uart_putchar(UART1_BASE_PTR,0x1A);
00453a  211a              MOVS     r1,#0x1a
00453c  48bd              LDR      r0,|L1.18484|
00453e  f7fffffe          BL       uart_putchar
;;;454    												//delay(10);
;;;455    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
004542  211a              MOVS     r1,#0x1a
004544  48bb              LDR      r0,|L1.18484|
004546  f7fffffe          BL       uart_putchar
00454a  211a              MOVS     r1,#0x1a
00454c  48b9              LDR      r0,|L1.18484|
00454e  f7fffffe          BL       uart_putchar
004552  211a              MOVS     r1,#0x1a
004554  48b7              LDR      r0,|L1.18484|
004556  f7fffffe          BL       uart_putchar
;;;456    						
;;;457    									
;;;458    delay(50);
00455a  2032              MOVS     r0,#0x32
00455c  f7fffffe          BL       delay
;;;459    stcond1=strstr(uart_string_gsm,"SEND OK");								
004560  49a5              LDR      r1,|L1.18424|
004562  3908              SUBS     r1,r1,#8
004564  48ab              LDR      r0,|L1.18452|
004566  f7fffffe          BL       strstr
00456a  49a8              LDR      r1,|L1.18444|
00456c  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.17774|
;;;460    								}
;;;461    //else{
;;;462    //log_it();
;;;463    //}
;;;464    
;;;465    
;;;466    if(!(stcond1) == 1 )// if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
00456e  48a7              LDR      r0,|L1.18444|
004570  6800              LDR      r0,[r0,#0]  ; stcond1
004572  2800              CMP      r0,#0
004574  d101              BNE      |L1.17786|
004576  2001              MOVS     r0,#1
004578  e000              B        |L1.17788|
                  |L1.17786|
00457a  2000              MOVS     r0,#0
                  |L1.17788|
00457c  2801              CMP      r0,#1
00457e  d17d              BNE      |L1.18044|
;;;467    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004580  211a              MOVS     r1,#0x1a
004582  48ac              LDR      r0,|L1.18484|
004584  f7fffffe          BL       uart_putchar
004588  f7fffffe          BL       clear
00458c  200a              MOVS     r0,#0xa
00458e  f7fffffe          BL       delay
;;;468    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004592  211a              MOVS     r1,#0x1a
004594  48a7              LDR      r0,|L1.18484|
004596  f7fffffe          BL       uart_putchar
00459a  f7fffffe          BL       clear
00459e  200a              MOVS     r0,#0xa
0045a0  f7fffffe          BL       delay
;;;469    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0045a4  211a              MOVS     r1,#0x1a
0045a6  48a3              LDR      r0,|L1.18484|
0045a8  f7fffffe          BL       uart_putchar
0045ac  f7fffffe          BL       clear
0045b0  200a              MOVS     r0,#0xa
0045b2  f7fffffe          BL       delay
;;;470    
;;;471    									delay(100);
0045b6  2064              MOVS     r0,#0x64
0045b8  f7fffffe          BL       delay
;;;472    									clear();//memset(uart_string_gsm,0,5000);
0045bc  f7fffffe          BL       clear
;;;473    
;;;474    									memset(at_,0,100);
0045c0  2164              MOVS     r1,#0x64
0045c2  488b              LDR      r0,|L1.18416|
0045c4  f7fffffe          BL       __aeabi_memclr
;;;475    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0045c8  488c              LDR      r0,|L1.18428|
0045ca  f7fffffe          BL       strlen
0045ce  1c40              ADDS     r0,r0,#1
0045d0  4603              MOV      r3,r0
0045d2  4a9c              LDR      r2,|L1.18500|
0045d4  4988              LDR      r1,|L1.18424|
0045d6  313c              ADDS     r1,r1,#0x3c
0045d8  9001              STR      r0,[sp,#4]
0045da  4885              LDR      r0,|L1.18416|
0045dc  f7fffffe          BL       __2sprintf
;;;476    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0045e0  2005              MOVS     r0,#5
0045e2  4b85              LDR      r3,|L1.18424|
0045e4  461a              MOV      r2,r3
0045e6  3260              ADDS     r2,r2,#0x60
0045e8  a187              ADR      r1,|L1.18440|
0045ea  9000              STR      r0,[sp,#0]
0045ec  4880              LDR      r0,|L1.18416|
0045ee  f7fffffe          BL       send_SD
;;;477    if(strstr(uart_string_gsm,"ERROR")){
0045f2  4981              LDR      r1,|L1.18424|
0045f4  4887              LDR      r0,|L1.18452|
0045f6  f7fffffe          BL       strstr
0045fa  2800              CMP      r0,#0
0045fc  d004              BEQ      |L1.17928|
;;;478    	drive[0]='C';drive[1]=':';
0045fe  2043              MOVS     r0,#0x43
004600  4990              LDR      r1,|L1.18500|
004602  7008              STRB     r0,[r1,#0]
004604  203a              MOVS     r0,#0x3a
004606  7048              STRB     r0,[r1,#1]
                  |L1.17928|
;;;479    }	
;;;480    									clear();	
004608  f7fffffe          BL       clear
;;;481    									k2=0;									//string array counter for uart 1
00460c  2000              MOVS     r0,#0
00460e  4987              LDR      r1,|L1.18476|
004610  6008              STR      r0,[r1,#0]  ; k2
;;;482    									tout=0;	
004612  4985              LDR      r1,|L1.18472|
004614  6008              STR      r0,[r1,#0]  ; tout
;;;483    									for(k=0;k<strlen(data);k++)
004616  4986              LDR      r1,|L1.18480|
004618  6008              STR      r0,[r1,#0]  ; k
00461a  e00d              B        |L1.17976|
                  |L1.17948|
;;;484    									{
;;;485    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00461c  4877              LDR      r0,|L1.18428|
00461e  4984              LDR      r1,|L1.18480|
004620  6809              LDR      r1,[r1,#0]  ; k
004622  5c40              LDRB     r0,[r0,r1]
004624  4601              MOV      r1,r0
004626  9001              STR      r0,[sp,#4]
004628  4882              LDR      r0,|L1.18484|
00462a  f7fffffe          BL       uart_putchar
00462e  4880              LDR      r0,|L1.18480|
004630  6800              LDR      r0,[r0,#0]            ;483  ; k
004632  1c40              ADDS     r0,r0,#1              ;483
004634  497e              LDR      r1,|L1.18480|
004636  6008              STR      r0,[r1,#0]            ;483  ; k
                  |L1.17976|
004638  4870              LDR      r0,|L1.18428|
00463a  f7fffffe          BL       strlen
00463e  497c              LDR      r1,|L1.18480|
004640  6809              LDR      r1,[r1,#0]            ;483  ; k
004642  4288              CMP      r0,r1                 ;483
004644  d8ea              BHI      |L1.17948|
;;;486    									}	
;;;487    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004646  210a              MOVS     r1,#0xa
004648  487a              LDR      r0,|L1.18484|
00464a  f7fffffe          BL       uart_putchar
00464e  210a              MOVS     r1,#0xa
004650  4878              LDR      r0,|L1.18484|
004652  f7fffffe          BL       uart_putchar
004656  210a              MOVS     r1,#0xa
004658  4876              LDR      r0,|L1.18484|
00465a  f7fffffe          BL       uart_putchar
00465e  210a              MOVS     r1,#0xa
004660  4874              LDR      r0,|L1.18484|
004662  f7fffffe          BL       uart_putchar
004666  210a              MOVS     r1,#0xa
004668  4872              LDR      r0,|L1.18484|
00466a  f7fffffe          BL       uart_putchar
00466e  210a              MOVS     r1,#0xa
004670  4870              LDR      r0,|L1.18484|
004672  f7fffffe          BL       uart_putchar
004676  210a              MOVS     r1,#0xa
004678  486e              LDR      r0,|L1.18484|
00467a  e000              B        |L1.18046|
                  |L1.18044|
00467c  e2e2              B        |L1.19524|
                  |L1.18046|
00467e  f7fffffe          BL       uart_putchar
004682  210a              MOVS     r1,#0xa
004684  486b              LDR      r0,|L1.18484|
004686  f7fffffe          BL       uart_putchar
00468a  210a              MOVS     r1,#0xa
00468c  4869              LDR      r0,|L1.18484|
00468e  f7fffffe          BL       uart_putchar
004692  210a              MOVS     r1,#0xa
004694  4867              LDR      r0,|L1.18484|
004696  f7fffffe          BL       uart_putchar
00469a  210a              MOVS     r1,#0xa
00469c  4865              LDR      r0,|L1.18484|
00469e  f7fffffe          BL       uart_putchar
0046a2  210a              MOVS     r1,#0xa
0046a4  4863              LDR      r0,|L1.18484|
0046a6  f7fffffe          BL       uart_putchar
0046aa  210a              MOVS     r1,#0xa
0046ac  4861              LDR      r0,|L1.18484|
0046ae  f7fffffe          BL       uart_putchar
0046b2  210a              MOVS     r1,#0xa
0046b4  485f              LDR      r0,|L1.18484|
0046b6  f7fffffe          BL       uart_putchar
0046ba  210a              MOVS     r1,#0xa
0046bc  485d              LDR      r0,|L1.18484|
0046be  f7fffffe          BL       uart_putchar
0046c2  210a              MOVS     r1,#0xa
0046c4  485b              LDR      r0,|L1.18484|
0046c6  f7fffffe          BL       uart_putchar
0046ca  210a              MOVS     r1,#0xa
0046cc  4859              LDR      r0,|L1.18484|
0046ce  f7fffffe          BL       uart_putchar
0046d2  210a              MOVS     r1,#0xa
0046d4  4857              LDR      r0,|L1.18484|
0046d6  f7fffffe          BL       uart_putchar
0046da  210a              MOVS     r1,#0xa
0046dc  4855              LDR      r0,|L1.18484|
0046de  f7fffffe          BL       uart_putchar
0046e2  210a              MOVS     r1,#0xa
0046e4  4853              LDR      r0,|L1.18484|
0046e6  f7fffffe          BL       uart_putchar
0046ea  210a              MOVS     r1,#0xa
0046ec  4851              LDR      r0,|L1.18484|
0046ee  f7fffffe          BL       uart_putchar
0046f2  210a              MOVS     r1,#0xa
0046f4  484f              LDR      r0,|L1.18484|
0046f6  f7fffffe          BL       uart_putchar
0046fa  210a              MOVS     r1,#0xa
0046fc  484d              LDR      r0,|L1.18484|
0046fe  f7fffffe          BL       uart_putchar
004702  210a              MOVS     r1,#0xa
004704  484b              LDR      r0,|L1.18484|
004706  f7fffffe          BL       uart_putchar
00470a  210a              MOVS     r1,#0xa
00470c  4849              LDR      r0,|L1.18484|
00470e  f7fffffe          BL       uart_putchar
004712  210a              MOVS     r1,#0xa
004714  4847              LDR      r0,|L1.18484|
004716  f7fffffe          BL       uart_putchar
00471a  210a              MOVS     r1,#0xa
00471c  4845              LDR      r0,|L1.18484|
00471e  f7fffffe          BL       uart_putchar
004722  210a              MOVS     r1,#0xa
004724  4843              LDR      r0,|L1.18484|
004726  f7fffffe          BL       uart_putchar
00472a  210a              MOVS     r1,#0xa
00472c  4841              LDR      r0,|L1.18484|
00472e  f7fffffe          BL       uart_putchar
004732  210a              MOVS     r1,#0xa
004734  483f              LDR      r0,|L1.18484|
004736  f7fffffe          BL       uart_putchar
00473a  210a              MOVS     r1,#0xa
00473c  483d              LDR      r0,|L1.18484|
00473e  f7fffffe          BL       uart_putchar
004742  210a              MOVS     r1,#0xa
004744  483b              LDR      r0,|L1.18484|
004746  f7fffffe          BL       uart_putchar
00474a  210a              MOVS     r1,#0xa
00474c  4839              LDR      r0,|L1.18484|
00474e  f7fffffe          BL       uart_putchar
004752  210a              MOVS     r1,#0xa
004754  4837              LDR      r0,|L1.18484|
004756  f7fffffe          BL       uart_putchar
00475a  210a              MOVS     r1,#0xa
00475c  4835              LDR      r0,|L1.18484|
00475e  f7fffffe          BL       uart_putchar
004762  210a              MOVS     r1,#0xa
004764  4833              LDR      r0,|L1.18484|
004766  f7fffffe          BL       uart_putchar
00476a  210a              MOVS     r1,#0xa
00476c  4831              LDR      r0,|L1.18484|
00476e  f7fffffe          BL       uart_putchar
004772  210a              MOVS     r1,#0xa
004774  482f              LDR      r0,|L1.18484|
004776  f7fffffe          BL       uart_putchar
00477a  210a              MOVS     r1,#0xa
00477c  482d              LDR      r0,|L1.18484|
00477e  f7fffffe          BL       uart_putchar
004782  210a              MOVS     r1,#0xa
004784  482b              LDR      r0,|L1.18484|
004786  f7fffffe          BL       uart_putchar
00478a  210a              MOVS     r1,#0xa
00478c  4829              LDR      r0,|L1.18484|
00478e  f7fffffe          BL       uart_putchar
004792  210a              MOVS     r1,#0xa
004794  4827              LDR      r0,|L1.18484|
004796  f7fffffe          BL       uart_putchar
00479a  210a              MOVS     r1,#0xa
00479c  4825              LDR      r0,|L1.18484|
00479e  f7fffffe          BL       uart_putchar
0047a2  210a              MOVS     r1,#0xa
0047a4  4823              LDR      r0,|L1.18484|
0047a6  f7fffffe          BL       uart_putchar
0047aa  210a              MOVS     r1,#0xa
0047ac  4821              LDR      r0,|L1.18484|
0047ae  f7fffffe          BL       uart_putchar
0047b2  210a              MOVS     r1,#0xa
0047b4  481f              LDR      r0,|L1.18484|
0047b6  f7fffffe          BL       uart_putchar
0047ba  210a              MOVS     r1,#0xa
0047bc  481d              LDR      r0,|L1.18484|
0047be  f7fffffe          BL       uart_putchar
0047c2  210a              MOVS     r1,#0xa
0047c4  481b              LDR      r0,|L1.18484|
0047c6  f7fffffe          BL       uart_putchar
0047ca  210a              MOVS     r1,#0xa
0047cc  4819              LDR      r0,|L1.18484|
0047ce  f7fffffe          BL       uart_putchar
0047d2  210a              MOVS     r1,#0xa
0047d4  4817              LDR      r0,|L1.18484|
0047d6  f7fffffe          BL       uart_putchar
0047da  210a              MOVS     r1,#0xa
0047dc  4815              LDR      r0,|L1.18484|
0047de  f7fffffe          BL       uart_putchar
0047e2  210a              MOVS     r1,#0xa
0047e4  4813              LDR      r0,|L1.18484|
0047e6  e02f              B        |L1.18504|
                  |L1.18408|
                          DCD      ||ip||
                  |L1.18412|
                          DCD      ||.text||+0x1238
                  |L1.18416|
                          DCD      at_
                  |L1.18420|
                          DCD      tmeout
                  |L1.18424|
                          DCD      ||.text||+0x8cc
                  |L1.18428|
                          DCD      data
                  |L1.18432|
                          DCD      temp
                  |L1.18436|
                          DCD      int_erval
                  |L1.18440|
004808  3e00              DCB      ">",0
00480a  00                DCB      0
00480b  00                DCB      0
                  |L1.18444|
                          DCD      stcond1
                  |L1.18448|
                          DCD      con1d
                  |L1.18452|
                          DCD      uart_string_gsm
                  |L1.18456|
                          DCD      cond
                  |L1.18460|
                          DCD      0x00001388
                  |L1.18464|
004820  0a00              DCB      "\n",0
004822  00                DCB      0
004823  00                DCB      0
                  |L1.18468|
                          DCD      len
                  |L1.18472|
                          DCD      tout
                  |L1.18476|
                          DCD      ||k2||
                  |L1.18480|
                          DCD      k
                  |L1.18484|
                          DCD      0x4006b000
                  |L1.18488|
                          DCD      stcond2
                  |L1.18492|
                          DCD      stcond3
                  |L1.18496|
                          DCD      stcond4
                  |L1.18500|
                          DCD      drive
                  |L1.18504|
004848  f7fffffe          BL       uart_putchar
00484c  210a              MOVS     r1,#0xa
00484e  48fe              LDR      r0,|L1.19528|
004850  f7fffffe          BL       uart_putchar
004854  210a              MOVS     r1,#0xa
004856  48fc              LDR      r0,|L1.19528|
004858  f7fffffe          BL       uart_putchar
00485c  210a              MOVS     r1,#0xa
00485e  48fa              LDR      r0,|L1.19528|
004860  f7fffffe          BL       uart_putchar
004864  210a              MOVS     r1,#0xa
004866  48f8              LDR      r0,|L1.19528|
004868  f7fffffe          BL       uart_putchar
00486c  210a              MOVS     r1,#0xa
00486e  48f6              LDR      r0,|L1.19528|
004870  f7fffffe          BL       uart_putchar
;;;488    									//memset(data,0,1000);
;;;489    									//timer counts to wait for characters in uart 1 									
;;;490    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004874  bf00              NOP      
                  |L1.18550|
004876  49f5              LDR      r1,|L1.19532|
004878  48f5              LDR      r0,|L1.19536|
00487a  f7fffffe          BL       strstr
00487e  2800              CMP      r0,#0
004880  d109              BNE      |L1.18582|
004882  49f4              LDR      r1,|L1.19540|
004884  48f2              LDR      r0,|L1.19536|
004886  f7fffffe          BL       strstr
00488a  2800              CMP      r0,#0
00488c  d103              BNE      |L1.18582|
00488e  48f2              LDR      r0,|L1.19544|
004890  6800              LDR      r0,[r0,#0]  ; tout
004892  2805              CMP      r0,#5
004894  ddef              BLE      |L1.18550|
                  |L1.18582|
;;;491    									{	}
;;;492    									clear();
004896  f7fffffe          BL       clear
;;;493    									memset(data,0,strlen(data));
00489a  48f0              LDR      r0,|L1.19548|
00489c  f7fffffe          BL       strlen
0048a0  4601              MOV      r1,r0
0048a2  9001              STR      r0,[sp,#4]
0048a4  48ed              LDR      r0,|L1.19548|
0048a6  f7fffffe          BL       __aeabi_memclr
;;;494    									memset(data,0,strlen(data));	
0048aa  48ec              LDR      r0,|L1.19548|
0048ac  f7fffffe          BL       strlen
0048b0  4601              MOV      r1,r0
0048b2  9001              STR      r0,[sp,#4]
0048b4  48e9              LDR      r0,|L1.19548|
0048b6  f7fffffe          BL       __aeabi_memclr
;;;495    									GPS_COLLECT();
0048ba  f7fffffe          BL       GPS_COLLECT
;;;496    									strcat(data,"CH\n");	
0048be  49e5              LDR      r1,|L1.19540|
0048c0  3130              ADDS     r1,r1,#0x30
0048c2  48e6              LDR      r0,|L1.19548|
0048c4  f7fffffe          BL       strcat
;;;497    
;;;498    
;;;499    									clear();	
0048c8  f7fffffe          BL       clear
;;;500    //*************************************tcp_initialization();*********************
;;;501    //setting interval 4
;;;502    temp=int_erval;				
0048cc  48e4              LDR      r0,|L1.19552|
0048ce  6800              LDR      r0,[r0,#0]  ; int_erval
0048d0  49e4              LDR      r1,|L1.19556|
0048d2  6008              STR      r0,[r1,#0]  ; temp
;;;503    int_erval=4;
0048d4  2004              MOVS     r0,#4
0048d6  49e2              LDR      r1,|L1.19552|
0048d8  6008              STR      r0,[r1,#0]  ; int_erval
;;;504    
;;;505    	
;;;506    msg_sim800(); 
0048da  f7fffffe          BL       msg_sim800
;;;507    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0048de  2005              MOVS     r0,#5
0048e0  4bdc              LDR      r3,|L1.19540|
0048e2  461a              MOV      r2,r3
0048e4  3260              ADDS     r2,r2,#0x60
0048e6  a1e0              ADR      r1,|L1.19560|
0048e8  9000              STR      r0,[sp,#0]
0048ea  48d8              LDR      r0,|L1.19532|
0048ec  3028              ADDS     r0,r0,#0x28
0048ee  f7fffffe          BL       send_GSM
;;;508    delay(100);
0048f2  2064              MOVS     r0,#0x64
0048f4  f7fffffe          BL       delay
;;;509    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0048f8  2004              MOVS     r0,#4
0048fa  4bd6              LDR      r3,|L1.19540|
0048fc  4ad3              LDR      r2,|L1.19532|
0048fe  3238              ADDS     r2,r2,#0x38
004900  a1d9              ADR      r1,|L1.19560|
004902  9000              STR      r0,[sp,#0]
004904  4610              MOV      r0,r2
004906  3014              ADDS     r0,r0,#0x14
004908  f7fffffe          BL       send_GSM
;;;510    GPS_COLLECT2();
00490c  f7fffffe          BL       GPS_COLLECT2
;;;511    strcat(data,"CH\n");		
004910  49d0              LDR      r1,|L1.19540|
004912  3130              ADDS     r1,r1,#0x30
004914  48d1              LDR      r0,|L1.19548|
004916  f7fffffe          BL       strcat
;;;512    GPS_COLLECT2();
00491a  f7fffffe          BL       GPS_COLLECT2
;;;513    strcat(data,"CH\n");	
00491e  49cd              LDR      r1,|L1.19540|
004920  3130              ADDS     r1,r1,#0x30
004922  48ce              LDR      r0,|L1.19548|
004924  f7fffffe          BL       strcat
;;;514    GPS_COLLECT2();
004928  f7fffffe          BL       GPS_COLLECT2
;;;515    strcat(data,"CH\n");
00492c  49c9              LDR      r1,|L1.19540|
00492e  3130              ADDS     r1,r1,#0x30
004930  48ca              LDR      r0,|L1.19548|
004932  f7fffffe          BL       strcat
;;;516    
;;;517    	
;;;518    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
004936  2004              MOVS     r0,#4
004938  4bcc              LDR      r3,|L1.19564|
00493a  4ac6              LDR      r2,|L1.19540|
00493c  3260              ADDS     r2,r2,#0x60
00493e  a1ca              ADR      r1,|L1.19560|
004940  9000              STR      r0,[sp,#0]
004942  4618              MOV      r0,r3
004944  300c              ADDS     r0,r0,#0xc
004946  f7fffffe          BL       send_GSM
;;;519    GPS_COLLECT2();
00494a  f7fffffe          BL       GPS_COLLECT2
;;;520    strcat(data,"CH\n");	
00494e  49c1              LDR      r1,|L1.19540|
004950  3130              ADDS     r1,r1,#0x30
004952  48c2              LDR      r0,|L1.19548|
004954  f7fffffe          BL       strcat
;;;521    memset(at_,0,100);
004958  2164              MOVS     r1,#0x64
00495a  48c5              LDR      r0,|L1.19568|
00495c  f7fffffe          BL       __aeabi_memclr
;;;522    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
004960  4ac4              LDR      r2,|L1.19572|
004962  49c2              LDR      r1,|L1.19564|
004964  3124              ADDS     r1,r1,#0x24
004966  48c2              LDR      r0,|L1.19568|
004968  f7fffffe          BL       __2sprintf
;;;523    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
00496c  48c2              LDR      r0,|L1.19576|
00496e  6800              LDR      r0,[r0,#0]  ; tmeout
004970  4bbe              LDR      r3,|L1.19564|
004972  4ab8              LDR      r2,|L1.19540|
004974  3260              ADDS     r2,r2,#0x60
004976  a1bc              ADR      r1,|L1.19560|
004978  9000              STR      r0,[sp,#0]
00497a  48bd              LDR      r0,|L1.19568|
00497c  f7fffffe          BL       send_GSM
;;;524    msg_sim800(); 
004980  f7fffffe          BL       msg_sim800
;;;525    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
004984  2004              MOVS     r0,#4
004986  4bb3              LDR      r3,|L1.19540|
004988  3318              ADDS     r3,r3,#0x18
00498a  461a              MOV      r2,r3
00498c  3248              ADDS     r2,r2,#0x48
00498e  a1b6              ADR      r1,|L1.19560|
004990  9000              STR      r0,[sp,#0]
004992  48b6              LDR      r0,|L1.19564|
004994  303c              ADDS     r0,r0,#0x3c
004996  f7fffffe          BL       send_GSM
;;;526    GPS_COLLECT2();
00499a  f7fffffe          BL       GPS_COLLECT2
;;;527    strcat(data,"CH\n");	
00499e  49ad              LDR      r1,|L1.19540|
0049a0  3130              ADDS     r1,r1,#0x30
0049a2  48ae              LDR      r0,|L1.19548|
0049a4  f7fffffe          BL       strcat
;;;528    GPS_COLLECT2();
0049a8  f7fffffe          BL       GPS_COLLECT2
;;;529    strcat(data,"CH\n");	
0049ac  49a9              LDR      r1,|L1.19540|
0049ae  3130              ADDS     r1,r1,#0x30
0049b0  48aa              LDR      r0,|L1.19548|
0049b2  f7fffffe          BL       strcat
;;;530    
;;;531    
;;;532    msg_sim800(); 
0049b6  f7fffffe          BL       msg_sim800
;;;533    GPS_COLLECT2();
0049ba  f7fffffe          BL       GPS_COLLECT2
;;;534    strcat(data,"CH\n");	
0049be  49a5              LDR      r1,|L1.19540|
0049c0  3130              ADDS     r1,r1,#0x30
0049c2  48a6              LDR      r0,|L1.19548|
0049c4  f7fffffe          BL       strcat
;;;535    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0049c8  f7fffffe          BL       clear
0049cc  48a7              LDR      r0,|L1.19564|
0049ce  304c              ADDS     r0,r0,#0x4c
0049d0  f7fffffe          BL       send_modem
0049d4  f7fffffe          BL       clear
;;;536    					delay(20);
0049d8  2014              MOVS     r0,#0x14
0049da  f7fffffe          BL       delay
;;;537    
;;;538    
;;;539    msg_sim800(); 
0049de  f7fffffe          BL       msg_sim800
;;;540    int_erval=temp;
0049e2  48a0              LDR      r0,|L1.19556|
0049e4  6800              LDR      r0,[r0,#0]  ; temp
0049e6  499e              LDR      r1,|L1.19552|
0049e8  6008              STR      r0,[r1,#0]  ; int_erval
;;;541    //resetting interval 
;;;542    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0049ea  4ba4              LDR      r3,|L1.19580|
0049ec  4aa4              LDR      r2,|L1.19584|
0049ee  499f              LDR      r1,|L1.19564|
0049f0  3164              ADDS     r1,r1,#0x64
0049f2  489f              LDR      r0,|L1.19568|
0049f4  f7fffffe          BL       __2sprintf
;;;543    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0049f8  489f              LDR      r0,|L1.19576|
0049fa  6800              LDR      r0,[r0,#0]  ; tmeout
0049fc  4b9b              LDR      r3,|L1.19564|
0049fe  4a95              LDR      r2,|L1.19540|
004a00  4619              MOV      r1,r3
004a02  3184              ADDS     r1,r1,#0x84
004a04  9000              STR      r0,[sp,#0]
004a06  489a              LDR      r0,|L1.19568|
004a08  f7fffffe          BL       send_GSM
;;;544    						clear();
004a0c  f7fffffe          BL       clear
;;;545    						
;;;546    						
;;;547    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
004a10  4899              LDR      r0,|L1.19576|
004a12  6800              LDR      r0,[r0,#0]  ; tmeout
004a14  4b95              LDR      r3,|L1.19564|
004a16  338c              ADDS     r3,r3,#0x8c
004a18  4a8e              LDR      r2,|L1.19540|
004a1a  a19a              ADR      r1,|L1.19588|
004a1c  9000              STR      r0,[sp,#0]
004a1e  4618              MOV      r0,r3
004a20  3014              ADDS     r0,r0,#0x14
004a22  f7fffffe          BL       send_GSM
;;;548    						
;;;549    //*************************************tcp initialization*******************************/
;;;550    			clear();		
004a26  f7fffffe          BL       clear
;;;551    						cond=mystrstr(uart_string_gsm,'>');
004a2a  213e              MOVS     r1,#0x3e
004a2c  4888              LDR      r0,|L1.19536|
004a2e  f7fffffe          BL       mystrstr
004a32  4995              LDR      r1,|L1.19592|
004a34  7008              STRB     r0,[r1,#0]
;;;552    								if(cond)	
004a36  4608              MOV      r0,r1
004a38  7800              LDRB     r0,[r0,#0]  ; cond
004a3a  2800              CMP      r0,#0
004a3c  d07e              BEQ      |L1.19260|
;;;553    								{	
;;;554    
;;;555    									clear();
004a3e  f7fffffe          BL       clear
;;;556    									memset(uart_string_gsm,0,5000);
004a42  4992              LDR      r1,|L1.19596|
004a44  4882              LDR      r0,|L1.19536|
004a46  f7fffffe          BL       __aeabi_memclr
;;;557    									strcat(data,"\n");
004a4a  a191              ADR      r1,|L1.19600|
004a4c  4883              LDR      r0,|L1.19548|
004a4e  f7fffffe          BL       strcat
;;;558    									len=strlen(data);
004a52  4882              LDR      r0,|L1.19548|
004a54  f7fffffe          BL       strlen
004a58  498e              LDR      r1,|L1.19604|
004a5a  6008              STR      r0,[r1,#0]  ; len
;;;559    									tout=0;
004a5c  2000              MOVS     r0,#0
004a5e  497e              LDR      r1,|L1.19544|
004a60  6008              STR      r0,[r1,#0]  ; tout
;;;560    									k2=0;
004a62  498d              LDR      r1,|L1.19608|
004a64  6008              STR      r0,[r1,#0]  ; k2
;;;561    									for(k=0;k<len;k++)
004a66  498d              LDR      r1,|L1.19612|
004a68  6008              STR      r0,[r1,#0]  ; k
004a6a  e00d              B        |L1.19080|
                  |L1.19052|
;;;562    									{
;;;563    										uart_putchar(UART1_BASE_PTR, data[k]);
004a6c  487b              LDR      r0,|L1.19548|
004a6e  498b              LDR      r1,|L1.19612|
004a70  6809              LDR      r1,[r1,#0]  ; k
004a72  5c40              LDRB     r0,[r0,r1]
004a74  4601              MOV      r1,r0
004a76  9001              STR      r0,[sp,#4]
004a78  4873              LDR      r0,|L1.19528|
004a7a  f7fffffe          BL       uart_putchar
004a7e  4887              LDR      r0,|L1.19612|
004a80  6800              LDR      r0,[r0,#0]            ;561  ; k
004a82  1c40              ADDS     r0,r0,#1              ;561
004a84  4985              LDR      r1,|L1.19612|
004a86  6008              STR      r0,[r1,#0]            ;561  ; k
                  |L1.19080|
004a88  4884              LDR      r0,|L1.19612|
004a8a  6800              LDR      r0,[r0,#0]            ;561  ; k
004a8c  4981              LDR      r1,|L1.19604|
004a8e  6809              LDR      r1,[r1,#0]            ;561  ; len
004a90  4288              CMP      r0,r1                 ;561
004a92  dbeb              BLT      |L1.19052|
;;;564    									}uart_putchar(UART1_BASE_PTR, 0x1A);
004a94  211a              MOVS     r1,#0x1a
004a96  486c              LDR      r0,|L1.19528|
004a98  f7fffffe          BL       uart_putchar
;;;565    									do
004a9c  bf00              NOP      
                  |L1.19102|
;;;566    																{stcond1=strstr(uart_string_gsm,"SEND OK");
004a9e  496d              LDR      r1,|L1.19540|
004aa0  3908              SUBS     r1,r1,#8
004aa2  486b              LDR      r0,|L1.19536|
004aa4  f7fffffe          BL       strstr
004aa8  497d              LDR      r1,|L1.19616|
004aaa  6008              STR      r0,[r1,#0]  ; stcond1
;;;567    																	stcond2=strstr(uart_string_gsm, "ERROR");
004aac  4969              LDR      r1,|L1.19540|
004aae  4868              LDR      r0,|L1.19536|
004ab0  f7fffffe          BL       strstr
004ab4  497b              LDR      r1,|L1.19620|
004ab6  6008              STR      r0,[r1,#0]  ; stcond2
;;;568    																		stcond3=strstr(uart_string_gsm, "FAIL");	
004ab8  496c              LDR      r1,|L1.19564|
004aba  3194              ADDS     r1,r1,#0x94
004abc  4864              LDR      r0,|L1.19536|
004abe  f7fffffe          BL       strstr
004ac2  4979              LDR      r1,|L1.19624|
004ac4  6008              STR      r0,[r1,#0]  ; stcond3
;;;569    																			stcond4=strstr(uart_string_gsm, "DEACT");	
004ac6  4963              LDR      r1,|L1.19540|
004ac8  3118              ADDS     r1,r1,#0x18
004aca  4861              LDR      r0,|L1.19536|
004acc  f7fffffe          BL       strstr
004ad0  4976              LDR      r1,|L1.19628|
004ad2  6008              STR      r0,[r1,#0]  ; stcond4
;;;570    																	
;;;571    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
004ad4  4873              LDR      r0,|L1.19620|
004ad6  6800              LDR      r0,[r0,#0]  ; stcond2
004ad8  2800              CMP      r0,#0
004ada  d10f              BNE      |L1.19196|
004adc  4872              LDR      r0,|L1.19624|
004ade  6800              LDR      r0,[r0,#0]  ; stcond3
004ae0  2800              CMP      r0,#0
004ae2  d10b              BNE      |L1.19196|
004ae4  4608              MOV      r0,r1
004ae6  6800              LDR      r0,[r0,#0]  ; stcond4
004ae8  2800              CMP      r0,#0
004aea  d107              BNE      |L1.19196|
004aec  486c              LDR      r0,|L1.19616|
004aee  6800              LDR      r0,[r0,#0]  ; stcond1
004af0  2800              CMP      r0,#0
004af2  d103              BNE      |L1.19196|
004af4  4858              LDR      r0,|L1.19544|
004af6  6800              LDR      r0,[r0,#0]  ; tout
004af8  2808              CMP      r0,#8
004afa  ddd0              BLE      |L1.19102|
                  |L1.19196|
;;;572    																delay(10);clear();
004afc  200a              MOVS     r0,#0xa
004afe  f7fffffe          BL       delay
004b02  f7fffffe          BL       clear
;;;573    														uart_putchar(UART1_BASE_PTR,0x1A);
004b06  211a              MOVS     r1,#0x1a
004b08  484f              LDR      r0,|L1.19528|
004b0a  f7fffffe          BL       uart_putchar
;;;574    												delay(10);
004b0e  200a              MOVS     r0,#0xa
004b10  f7fffffe          BL       delay
;;;575    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
004b14  211a              MOVS     r1,#0x1a
004b16  484c              LDR      r0,|L1.19528|
004b18  f7fffffe          BL       uart_putchar
004b1c  211a              MOVS     r1,#0x1a
004b1e  484a              LDR      r0,|L1.19528|
004b20  f7fffffe          BL       uart_putchar
004b24  211a              MOVS     r1,#0x1a
004b26  4848              LDR      r0,|L1.19528|
004b28  f7fffffe          BL       uart_putchar
;;;576    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004b2c  211a              MOVS     r1,#0x1a
004b2e  4846              LDR      r0,|L1.19528|
004b30  f7fffffe          BL       uart_putchar
004b34  f7fffffe          BL       clear
004b38  200a              MOVS     r0,#0xa
004b3a  e000              B        |L1.19262|
                  |L1.19260|
004b3c  e1b0              B        |L1.20128|
                  |L1.19262|
004b3e  f7fffffe          BL       delay
;;;577    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004b42  211a              MOVS     r1,#0x1a
004b44  4840              LDR      r0,|L1.19528|
004b46  f7fffffe          BL       uart_putchar
004b4a  f7fffffe          BL       clear
004b4e  200a              MOVS     r0,#0xa
004b50  f7fffffe          BL       delay
;;;578    															
;;;579    										qwe=strlen(uart_string_gsm);
004b54  483e              LDR      r0,|L1.19536|
004b56  f7fffffe          BL       strlen
004b5a  4955              LDR      r1,|L1.19632|
004b5c  6008              STR      r0,[r1,#0]  ; qwe
;;;580    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004b5e  211a              MOVS     r1,#0x1a
004b60  4839              LDR      r0,|L1.19528|
004b62  f7fffffe          BL       uart_putchar
004b66  f7fffffe          BL       clear
004b6a  200a              MOVS     r0,#0xa
004b6c  f7fffffe          BL       delay
;;;581    								delay(50);
004b70  2032              MOVS     r0,#0x32
004b72  f7fffffe          BL       delay
;;;582    								con1d=strstr(uart_string_gsm,"SEND OK");
004b76  4937              LDR      r1,|L1.19540|
004b78  3908              SUBS     r1,r1,#8
004b7a  4835              LDR      r0,|L1.19536|
004b7c  f7fffffe          BL       strstr
004b80  494c              LDR      r1,|L1.19636|
004b82  6008              STR      r0,[r1,#0]  ; con1d
;;;583    								if(!(con1d) == 1 )
004b84  4608              MOV      r0,r1
004b86  6800              LDR      r0,[r0,#0]  ; con1d
004b88  2800              CMP      r0,#0
004b8a  d101              BNE      |L1.19344|
004b8c  2001              MOVS     r0,#1
004b8e  e000              B        |L1.19346|
                  |L1.19344|
004b90  2000              MOVS     r0,#0
                  |L1.19346|
004b92  2801              CMP      r0,#1
004b94  d156              BNE      |L1.19524|
;;;584    								{
;;;585    									delay(100);
004b96  2064              MOVS     r0,#0x64
004b98  f7fffffe          BL       delay
;;;586    									clear();//memset(uart_string_gsm,0,5000);
004b9c  f7fffffe          BL       clear
;;;587    									memset(at_,0,100);
004ba0  2164              MOVS     r1,#0x64
004ba2  4833              LDR      r0,|L1.19568|
004ba4  f7fffffe          BL       __aeabi_memclr
;;;588    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004ba8  482c              LDR      r0,|L1.19548|
004baa  f7fffffe          BL       strlen
004bae  1c40              ADDS     r0,r0,#1
004bb0  4603              MOV      r3,r0
004bb2  4a41              LDR      r2,|L1.19640|
004bb4  4927              LDR      r1,|L1.19540|
004bb6  313c              ADDS     r1,r1,#0x3c
004bb8  9001              STR      r0,[sp,#4]
004bba  482d              LDR      r0,|L1.19568|
004bbc  f7fffffe          BL       __2sprintf
;;;589    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004bc0  2005              MOVS     r0,#5
004bc2  4b24              LDR      r3,|L1.19540|
004bc4  461a              MOV      r2,r3
004bc6  3260              ADDS     r2,r2,#0x60
004bc8  a12e              ADR      r1,|L1.19588|
004bca  9000              STR      r0,[sp,#0]
004bcc  4828              LDR      r0,|L1.19568|
004bce  f7fffffe          BL       send_SD
;;;590    if(strstr(uart_string_gsm,"ERROR")){
004bd2  4920              LDR      r1,|L1.19540|
004bd4  481e              LDR      r0,|L1.19536|
004bd6  f7fffffe          BL       strstr
004bda  2800              CMP      r0,#0
004bdc  d004              BEQ      |L1.19432|
;;;591    	drive[0]='C';drive[1]=':';
004bde  2043              MOVS     r0,#0x43
004be0  4935              LDR      r1,|L1.19640|
004be2  7008              STRB     r0,[r1,#0]
004be4  203a              MOVS     r0,#0x3a
004be6  7048              STRB     r0,[r1,#1]
                  |L1.19432|
;;;592    }	
;;;593    									clear();	
004be8  f7fffffe          BL       clear
;;;594    									k2=0;									//string array counter for uart 1
004bec  2000              MOVS     r0,#0
004bee  492a              LDR      r1,|L1.19608|
004bf0  6008              STR      r0,[r1,#0]  ; k2
;;;595    									tout=0;	
004bf2  4919              LDR      r1,|L1.19544|
004bf4  6008              STR      r0,[r1,#0]  ; tout
;;;596    									for(k=0;k<strlen(data);k++)
004bf6  4929              LDR      r1,|L1.19612|
004bf8  6008              STR      r0,[r1,#0]  ; k
004bfa  e00d              B        |L1.19480|
                  |L1.19452|
;;;597    									{
;;;598    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004bfc  4817              LDR      r0,|L1.19548|
004bfe  4927              LDR      r1,|L1.19612|
004c00  6809              LDR      r1,[r1,#0]  ; k
004c02  5c40              LDRB     r0,[r0,r1]
004c04  4601              MOV      r1,r0
004c06  9001              STR      r0,[sp,#4]
004c08  480f              LDR      r0,|L1.19528|
004c0a  f7fffffe          BL       uart_putchar
004c0e  4823              LDR      r0,|L1.19612|
004c10  6800              LDR      r0,[r0,#0]            ;596  ; k
004c12  1c40              ADDS     r0,r0,#1              ;596
004c14  4921              LDR      r1,|L1.19612|
004c16  6008              STR      r0,[r1,#0]            ;596  ; k
                  |L1.19480|
004c18  4810              LDR      r0,|L1.19548|
004c1a  f7fffffe          BL       strlen
004c1e  491f              LDR      r1,|L1.19612|
004c20  6809              LDR      r1,[r1,#0]            ;596  ; k
004c22  4288              CMP      r0,r1                 ;596
004c24  d8ea              BHI      |L1.19452|
;;;599    									}	
;;;600    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004c26  210a              MOVS     r1,#0xa
004c28  4807              LDR      r0,|L1.19528|
004c2a  f7fffffe          BL       uart_putchar
004c2e  210a              MOVS     r1,#0xa
004c30  4805              LDR      r0,|L1.19528|
004c32  f7fffffe          BL       uart_putchar
004c36  210a              MOVS     r1,#0xa
004c38  4803              LDR      r0,|L1.19528|
004c3a  f7fffffe          BL       uart_putchar
004c3e  210a              MOVS     r1,#0xa
004c40  4801              LDR      r0,|L1.19528|
004c42  e03b              B        |L1.19644|
                  |L1.19524|
004c44  e28d              B        |L1.20834|
004c46  0000              DCW      0x0000
                  |L1.19528|
                          DCD      0x4006b000
                  |L1.19532|
                          DCD      ||.text||+0xd3c
                  |L1.19536|
                          DCD      uart_string_gsm
                  |L1.19540|
                          DCD      ||.text||+0x8cc
                  |L1.19544|
                          DCD      tout
                  |L1.19548|
                          DCD      data
                  |L1.19552|
                          DCD      int_erval
                  |L1.19556|
                          DCD      temp
                  |L1.19560|
004c68  4f4b00            DCB      "OK",0
004c6b  00                DCB      0
                  |L1.19564|
                          DCD      ||.text||+0x11d4
                  |L1.19568|
                          DCD      at_
                  |L1.19572|
                          DCD      apn
                  |L1.19576|
                          DCD      tmeout
                  |L1.19580|
                          DCD      port
                  |L1.19584|
                          DCD      ||ip||
                  |L1.19588|
004c84  3e00              DCB      ">",0
004c86  00                DCB      0
004c87  00                DCB      0
                  |L1.19592|
                          DCD      cond
                  |L1.19596|
                          DCD      0x00001388
                  |L1.19600|
004c90  0a00              DCB      "\n",0
004c92  00                DCB      0
004c93  00                DCB      0
                  |L1.19604|
                          DCD      len
                  |L1.19608|
                          DCD      ||k2||
                  |L1.19612|
                          DCD      k
                  |L1.19616|
                          DCD      stcond1
                  |L1.19620|
                          DCD      stcond2
                  |L1.19624|
                          DCD      stcond3
                  |L1.19628|
                          DCD      stcond4
                  |L1.19632|
                          DCD      qwe
                  |L1.19636|
                          DCD      con1d
                  |L1.19640|
                          DCD      drive
                  |L1.19644|
004cbc  f7fffffe          BL       uart_putchar
004cc0  210a              MOVS     r1,#0xa
004cc2  48fe              LDR      r0,|L1.20668|
004cc4  f7fffffe          BL       uart_putchar
004cc8  210a              MOVS     r1,#0xa
004cca  48fc              LDR      r0,|L1.20668|
004ccc  f7fffffe          BL       uart_putchar
004cd0  210a              MOVS     r1,#0xa
004cd2  48fa              LDR      r0,|L1.20668|
004cd4  f7fffffe          BL       uart_putchar
004cd8  210a              MOVS     r1,#0xa
004cda  48f8              LDR      r0,|L1.20668|
004cdc  f7fffffe          BL       uart_putchar
004ce0  210a              MOVS     r1,#0xa
004ce2  48f6              LDR      r0,|L1.20668|
004ce4  f7fffffe          BL       uart_putchar
004ce8  210a              MOVS     r1,#0xa
004cea  48f4              LDR      r0,|L1.20668|
004cec  f7fffffe          BL       uart_putchar
004cf0  210a              MOVS     r1,#0xa
004cf2  48f2              LDR      r0,|L1.20668|
004cf4  f7fffffe          BL       uart_putchar
004cf8  210a              MOVS     r1,#0xa
004cfa  48f0              LDR      r0,|L1.20668|
004cfc  f7fffffe          BL       uart_putchar
004d00  210a              MOVS     r1,#0xa
004d02  48ee              LDR      r0,|L1.20668|
004d04  f7fffffe          BL       uart_putchar
004d08  210a              MOVS     r1,#0xa
004d0a  48ec              LDR      r0,|L1.20668|
004d0c  f7fffffe          BL       uart_putchar
004d10  210a              MOVS     r1,#0xa
004d12  48ea              LDR      r0,|L1.20668|
004d14  f7fffffe          BL       uart_putchar
004d18  210a              MOVS     r1,#0xa
004d1a  48e8              LDR      r0,|L1.20668|
004d1c  f7fffffe          BL       uart_putchar
004d20  210a              MOVS     r1,#0xa
004d22  48e6              LDR      r0,|L1.20668|
004d24  f7fffffe          BL       uart_putchar
004d28  210a              MOVS     r1,#0xa
004d2a  48e4              LDR      r0,|L1.20668|
004d2c  f7fffffe          BL       uart_putchar
004d30  210a              MOVS     r1,#0xa
004d32  48e2              LDR      r0,|L1.20668|
004d34  f7fffffe          BL       uart_putchar
004d38  210a              MOVS     r1,#0xa
004d3a  48e0              LDR      r0,|L1.20668|
004d3c  f7fffffe          BL       uart_putchar
004d40  210a              MOVS     r1,#0xa
004d42  48de              LDR      r0,|L1.20668|
004d44  f7fffffe          BL       uart_putchar
004d48  210a              MOVS     r1,#0xa
004d4a  48dc              LDR      r0,|L1.20668|
004d4c  f7fffffe          BL       uart_putchar
004d50  210a              MOVS     r1,#0xa
004d52  48da              LDR      r0,|L1.20668|
004d54  f7fffffe          BL       uart_putchar
004d58  210a              MOVS     r1,#0xa
004d5a  48d8              LDR      r0,|L1.20668|
004d5c  f7fffffe          BL       uart_putchar
004d60  210a              MOVS     r1,#0xa
004d62  48d6              LDR      r0,|L1.20668|
004d64  f7fffffe          BL       uart_putchar
004d68  210a              MOVS     r1,#0xa
004d6a  48d4              LDR      r0,|L1.20668|
004d6c  f7fffffe          BL       uart_putchar
004d70  210a              MOVS     r1,#0xa
004d72  48d2              LDR      r0,|L1.20668|
004d74  f7fffffe          BL       uart_putchar
004d78  210a              MOVS     r1,#0xa
004d7a  48d0              LDR      r0,|L1.20668|
004d7c  f7fffffe          BL       uart_putchar
004d80  210a              MOVS     r1,#0xa
004d82  48ce              LDR      r0,|L1.20668|
004d84  f7fffffe          BL       uart_putchar
004d88  210a              MOVS     r1,#0xa
004d8a  48cc              LDR      r0,|L1.20668|
004d8c  f7fffffe          BL       uart_putchar
004d90  210a              MOVS     r1,#0xa
004d92  48ca              LDR      r0,|L1.20668|
004d94  f7fffffe          BL       uart_putchar
004d98  210a              MOVS     r1,#0xa
004d9a  48c8              LDR      r0,|L1.20668|
004d9c  f7fffffe          BL       uart_putchar
004da0  210a              MOVS     r1,#0xa
004da2  48c6              LDR      r0,|L1.20668|
004da4  f7fffffe          BL       uart_putchar
004da8  210a              MOVS     r1,#0xa
004daa  48c4              LDR      r0,|L1.20668|
004dac  f7fffffe          BL       uart_putchar
004db0  210a              MOVS     r1,#0xa
004db2  48c2              LDR      r0,|L1.20668|
004db4  f7fffffe          BL       uart_putchar
004db8  210a              MOVS     r1,#0xa
004dba  48c0              LDR      r0,|L1.20668|
004dbc  f7fffffe          BL       uart_putchar
004dc0  210a              MOVS     r1,#0xa
004dc2  48be              LDR      r0,|L1.20668|
004dc4  f7fffffe          BL       uart_putchar
004dc8  210a              MOVS     r1,#0xa
004dca  48bc              LDR      r0,|L1.20668|
004dcc  f7fffffe          BL       uart_putchar
004dd0  210a              MOVS     r1,#0xa
004dd2  48ba              LDR      r0,|L1.20668|
004dd4  f7fffffe          BL       uart_putchar
004dd8  210a              MOVS     r1,#0xa
004dda  48b8              LDR      r0,|L1.20668|
004ddc  f7fffffe          BL       uart_putchar
004de0  210a              MOVS     r1,#0xa
004de2  48b6              LDR      r0,|L1.20668|
004de4  f7fffffe          BL       uart_putchar
004de8  210a              MOVS     r1,#0xa
004dea  48b4              LDR      r0,|L1.20668|
004dec  f7fffffe          BL       uart_putchar
004df0  210a              MOVS     r1,#0xa
004df2  48b2              LDR      r0,|L1.20668|
004df4  f7fffffe          BL       uart_putchar
004df8  210a              MOVS     r1,#0xa
004dfa  48b0              LDR      r0,|L1.20668|
004dfc  f7fffffe          BL       uart_putchar
004e00  210a              MOVS     r1,#0xa
004e02  48ae              LDR      r0,|L1.20668|
004e04  f7fffffe          BL       uart_putchar
004e08  210a              MOVS     r1,#0xa
004e0a  48ac              LDR      r0,|L1.20668|
004e0c  f7fffffe          BL       uart_putchar
004e10  210a              MOVS     r1,#0xa
004e12  48aa              LDR      r0,|L1.20668|
004e14  f7fffffe          BL       uart_putchar
004e18  210a              MOVS     r1,#0xa
004e1a  48a8              LDR      r0,|L1.20668|
004e1c  f7fffffe          BL       uart_putchar
004e20  210a              MOVS     r1,#0xa
004e22  48a6              LDR      r0,|L1.20668|
004e24  f7fffffe          BL       uart_putchar
004e28  210a              MOVS     r1,#0xa
004e2a  48a4              LDR      r0,|L1.20668|
004e2c  f7fffffe          BL       uart_putchar
004e30  210a              MOVS     r1,#0xa
004e32  48a2              LDR      r0,|L1.20668|
004e34  f7fffffe          BL       uart_putchar
004e38  210a              MOVS     r1,#0xa
004e3a  48a0              LDR      r0,|L1.20668|
004e3c  f7fffffe          BL       uart_putchar
004e40  210a              MOVS     r1,#0xa
004e42  489e              LDR      r0,|L1.20668|
004e44  f7fffffe          BL       uart_putchar
004e48  210a              MOVS     r1,#0xa
004e4a  489c              LDR      r0,|L1.20668|
004e4c  f7fffffe          BL       uart_putchar
004e50  210a              MOVS     r1,#0xa
004e52  489a              LDR      r0,|L1.20668|
004e54  f7fffffe          BL       uart_putchar
004e58  210a              MOVS     r1,#0xa
004e5a  4898              LDR      r0,|L1.20668|
004e5c  f7fffffe          BL       uart_putchar
004e60  210a              MOVS     r1,#0xa
004e62  4896              LDR      r0,|L1.20668|
004e64  f7fffffe          BL       uart_putchar
;;;601    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004e68  bf00              NOP      
                  |L1.20074|
004e6a  4995              LDR      r1,|L1.20672|
004e6c  4895              LDR      r0,|L1.20676|
004e6e  f7fffffe          BL       strstr
004e72  2800              CMP      r0,#0
004e74  d109              BNE      |L1.20106|
004e76  4994              LDR      r1,|L1.20680|
004e78  4892              LDR      r0,|L1.20676|
004e7a  f7fffffe          BL       strstr
004e7e  2800              CMP      r0,#0
004e80  d103              BNE      |L1.20106|
004e82  4892              LDR      r0,|L1.20684|
004e84  6800              LDR      r0,[r0,#0]  ; tout
004e86  2805              CMP      r0,#5
004e88  ddef              BLE      |L1.20074|
                  |L1.20106|
;;;602    									{}
;;;603    	                memset(data,0,strlen(data));
004e8a  4891              LDR      r0,|L1.20688|
004e8c  f7fffffe          BL       strlen
004e90  4601              MOV      r1,r0
004e92  9001              STR      r0,[sp,#4]
004e94  488e              LDR      r0,|L1.20688|
004e96  f7fffffe          BL       __aeabi_memclr
;;;604    									clear();
004e9a  f7fffffe          BL       clear
004e9e  e160              B        |L1.20834|
                  |L1.20128|
;;;605    									}else{
;;;606    									//send_chunk();
;;;607    									}	
;;;608    						}else{
;;;609    									delay(100);
004ea0  2064              MOVS     r0,#0x64
004ea2  f7fffffe          BL       delay
;;;610    									clear();//memset(uart_string_gsm,0,5000);
004ea6  f7fffffe          BL       clear
;;;611    
;;;612    									memset(at_,0,100);
004eaa  2164              MOVS     r1,#0x64
004eac  4889              LDR      r0,|L1.20692|
004eae  f7fffffe          BL       __aeabi_memclr
;;;613    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004eb2  4887              LDR      r0,|L1.20688|
004eb4  f7fffffe          BL       strlen
004eb8  1c40              ADDS     r0,r0,#1
004eba  4603              MOV      r3,r0
004ebc  4a86              LDR      r2,|L1.20696|
004ebe  4982              LDR      r1,|L1.20680|
004ec0  313c              ADDS     r1,r1,#0x3c
004ec2  9001              STR      r0,[sp,#4]
004ec4  4883              LDR      r0,|L1.20692|
004ec6  f7fffffe          BL       __2sprintf
;;;614    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004eca  2005              MOVS     r0,#5
004ecc  4b7e              LDR      r3,|L1.20680|
004ece  461a              MOV      r2,r3
004ed0  3260              ADDS     r2,r2,#0x60
004ed2  a182              ADR      r1,|L1.20700|
004ed4  9000              STR      r0,[sp,#0]
004ed6  487f              LDR      r0,|L1.20692|
004ed8  f7fffffe          BL       send_SD
;;;615    if(strstr(uart_string_gsm,"ERROR")){
004edc  497a              LDR      r1,|L1.20680|
004ede  4879              LDR      r0,|L1.20676|
004ee0  f7fffffe          BL       strstr
004ee4  2800              CMP      r0,#0
004ee6  d004              BEQ      |L1.20210|
;;;616    	drive[0]='C';drive[1]=':';
004ee8  2043              MOVS     r0,#0x43
004eea  497b              LDR      r1,|L1.20696|
004eec  7008              STRB     r0,[r1,#0]
004eee  203a              MOVS     r0,#0x3a
004ef0  7048              STRB     r0,[r1,#1]
                  |L1.20210|
;;;617    }	
;;;618    									clear();	
004ef2  f7fffffe          BL       clear
;;;619    									k2=0;									//string array counter for uart 1
004ef6  2000              MOVS     r0,#0
004ef8  4979              LDR      r1,|L1.20704|
004efa  6008              STR      r0,[r1,#0]  ; k2
;;;620    									tout=0;	
004efc  4973              LDR      r1,|L1.20684|
004efe  6008              STR      r0,[r1,#0]  ; tout
;;;621    		for(k=0;k<strlen(data);k++)
004f00  4978              LDR      r1,|L1.20708|
004f02  6008              STR      r0,[r1,#0]  ; k
004f04  e00d              B        |L1.20258|
                  |L1.20230|
;;;622    		{
;;;623    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004f06  4872              LDR      r0,|L1.20688|
004f08  4976              LDR      r1,|L1.20708|
004f0a  6809              LDR      r1,[r1,#0]  ; k
004f0c  5c40              LDRB     r0,[r0,r1]
004f0e  4601              MOV      r1,r0
004f10  9001              STR      r0,[sp,#4]
004f12  486a              LDR      r0,|L1.20668|
004f14  f7fffffe          BL       uart_putchar
004f18  4872              LDR      r0,|L1.20708|
004f1a  6800              LDR      r0,[r0,#0]            ;621  ; k
004f1c  1c40              ADDS     r0,r0,#1              ;621
004f1e  4971              LDR      r1,|L1.20708|
004f20  6008              STR      r0,[r1,#0]            ;621  ; k
                  |L1.20258|
004f22  486b              LDR      r0,|L1.20688|
004f24  f7fffffe          BL       strlen
004f28  496e              LDR      r1,|L1.20708|
004f2a  6809              LDR      r1,[r1,#0]            ;621  ; k
004f2c  4288              CMP      r0,r1                 ;621
004f2e  d8ea              BHI      |L1.20230|
;;;624    		}	
;;;625    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004f30  210a              MOVS     r1,#0xa
004f32  4862              LDR      r0,|L1.20668|
004f34  f7fffffe          BL       uart_putchar
004f38  210a              MOVS     r1,#0xa
004f3a  4860              LDR      r0,|L1.20668|
004f3c  f7fffffe          BL       uart_putchar
004f40  210a              MOVS     r1,#0xa
004f42  485e              LDR      r0,|L1.20668|
004f44  f7fffffe          BL       uart_putchar
004f48  210a              MOVS     r1,#0xa
004f4a  485c              LDR      r0,|L1.20668|
004f4c  f7fffffe          BL       uart_putchar
004f50  210a              MOVS     r1,#0xa
004f52  485a              LDR      r0,|L1.20668|
004f54  f7fffffe          BL       uart_putchar
004f58  210a              MOVS     r1,#0xa
004f5a  4858              LDR      r0,|L1.20668|
004f5c  f7fffffe          BL       uart_putchar
004f60  210a              MOVS     r1,#0xa
004f62  4856              LDR      r0,|L1.20668|
004f64  f7fffffe          BL       uart_putchar
004f68  210a              MOVS     r1,#0xa
004f6a  4854              LDR      r0,|L1.20668|
004f6c  f7fffffe          BL       uart_putchar
004f70  210a              MOVS     r1,#0xa
004f72  4852              LDR      r0,|L1.20668|
004f74  f7fffffe          BL       uart_putchar
004f78  210a              MOVS     r1,#0xa
004f7a  4850              LDR      r0,|L1.20668|
004f7c  f7fffffe          BL       uart_putchar
004f80  210a              MOVS     r1,#0xa
004f82  484e              LDR      r0,|L1.20668|
004f84  f7fffffe          BL       uart_putchar
004f88  210a              MOVS     r1,#0xa
004f8a  484c              LDR      r0,|L1.20668|
004f8c  f7fffffe          BL       uart_putchar
004f90  210a              MOVS     r1,#0xa
004f92  484a              LDR      r0,|L1.20668|
004f94  f7fffffe          BL       uart_putchar
004f98  210a              MOVS     r1,#0xa
004f9a  4848              LDR      r0,|L1.20668|
004f9c  f7fffffe          BL       uart_putchar
004fa0  210a              MOVS     r1,#0xa
004fa2  4846              LDR      r0,|L1.20668|
004fa4  f7fffffe          BL       uart_putchar
004fa8  210a              MOVS     r1,#0xa
004faa  4844              LDR      r0,|L1.20668|
004fac  f7fffffe          BL       uart_putchar
004fb0  210a              MOVS     r1,#0xa
004fb2  4842              LDR      r0,|L1.20668|
004fb4  f7fffffe          BL       uart_putchar
004fb8  210a              MOVS     r1,#0xa
004fba  4840              LDR      r0,|L1.20668|
004fbc  f7fffffe          BL       uart_putchar
004fc0  210a              MOVS     r1,#0xa
004fc2  483e              LDR      r0,|L1.20668|
004fc4  f7fffffe          BL       uart_putchar
004fc8  210a              MOVS     r1,#0xa
004fca  483c              LDR      r0,|L1.20668|
004fcc  f7fffffe          BL       uart_putchar
004fd0  210a              MOVS     r1,#0xa
004fd2  483a              LDR      r0,|L1.20668|
004fd4  f7fffffe          BL       uart_putchar
004fd8  210a              MOVS     r1,#0xa
004fda  4838              LDR      r0,|L1.20668|
004fdc  f7fffffe          BL       uart_putchar
004fe0  210a              MOVS     r1,#0xa
004fe2  4836              LDR      r0,|L1.20668|
004fe4  f7fffffe          BL       uart_putchar
004fe8  210a              MOVS     r1,#0xa
004fea  4834              LDR      r0,|L1.20668|
004fec  f7fffffe          BL       uart_putchar
004ff0  210a              MOVS     r1,#0xa
004ff2  4832              LDR      r0,|L1.20668|
004ff4  f7fffffe          BL       uart_putchar
004ff8  210a              MOVS     r1,#0xa
004ffa  4830              LDR      r0,|L1.20668|
004ffc  f7fffffe          BL       uart_putchar
005000  210a              MOVS     r1,#0xa
005002  482e              LDR      r0,|L1.20668|
005004  f7fffffe          BL       uart_putchar
005008  210a              MOVS     r1,#0xa
00500a  482c              LDR      r0,|L1.20668|
00500c  f7fffffe          BL       uart_putchar
005010  210a              MOVS     r1,#0xa
005012  482a              LDR      r0,|L1.20668|
005014  f7fffffe          BL       uart_putchar
005018  210a              MOVS     r1,#0xa
00501a  4828              LDR      r0,|L1.20668|
00501c  f7fffffe          BL       uart_putchar
005020  210a              MOVS     r1,#0xa
005022  4826              LDR      r0,|L1.20668|
005024  f7fffffe          BL       uart_putchar
005028  210a              MOVS     r1,#0xa
00502a  4824              LDR      r0,|L1.20668|
00502c  f7fffffe          BL       uart_putchar
005030  210a              MOVS     r1,#0xa
005032  4822              LDR      r0,|L1.20668|
005034  f7fffffe          BL       uart_putchar
005038  210a              MOVS     r1,#0xa
00503a  4820              LDR      r0,|L1.20668|
00503c  f7fffffe          BL       uart_putchar
005040  210a              MOVS     r1,#0xa
005042  481e              LDR      r0,|L1.20668|
005044  f7fffffe          BL       uart_putchar
005048  210a              MOVS     r1,#0xa
00504a  481c              LDR      r0,|L1.20668|
00504c  f7fffffe          BL       uart_putchar
005050  210a              MOVS     r1,#0xa
005052  481a              LDR      r0,|L1.20668|
005054  f7fffffe          BL       uart_putchar
005058  210a              MOVS     r1,#0xa
00505a  4818              LDR      r0,|L1.20668|
00505c  f7fffffe          BL       uart_putchar
005060  210a              MOVS     r1,#0xa
005062  4816              LDR      r0,|L1.20668|
005064  f7fffffe          BL       uart_putchar
005068  210a              MOVS     r1,#0xa
00506a  4814              LDR      r0,|L1.20668|
00506c  f7fffffe          BL       uart_putchar
005070  210a              MOVS     r1,#0xa
005072  4812              LDR      r0,|L1.20668|
005074  f7fffffe          BL       uart_putchar
005078  210a              MOVS     r1,#0xa
00507a  4810              LDR      r0,|L1.20668|
00507c  f7fffffe          BL       uart_putchar
005080  210a              MOVS     r1,#0xa
005082  480e              LDR      r0,|L1.20668|
005084  f7fffffe          BL       uart_putchar
005088  210a              MOVS     r1,#0xa
00508a  480c              LDR      r0,|L1.20668|
00508c  f7fffffe          BL       uart_putchar
005090  210a              MOVS     r1,#0xa
005092  480a              LDR      r0,|L1.20668|
005094  f7fffffe          BL       uart_putchar
005098  210a              MOVS     r1,#0xa
00509a  4808              LDR      r0,|L1.20668|
00509c  f7fffffe          BL       uart_putchar
0050a0  210a              MOVS     r1,#0xa
0050a2  4806              LDR      r0,|L1.20668|
0050a4  f7fffffe          BL       uart_putchar
0050a8  210a              MOVS     r1,#0xa
0050aa  4804              LDR      r0,|L1.20668|
0050ac  f7fffffe          BL       uart_putchar
0050b0  210a              MOVS     r1,#0xa
0050b2  4802              LDR      r0,|L1.20668|
0050b4  f7fffffe          BL       uart_putchar
0050b8  210a              MOVS     r1,#0xa
0050ba  e015              B        |L1.20712|
                  |L1.20668|
                          DCD      0x4006b000
                  |L1.20672|
                          DCD      ||.text||+0xd3c
                  |L1.20676|
                          DCD      uart_string_gsm
                  |L1.20680|
                          DCD      ||.text||+0x8cc
                  |L1.20684|
                          DCD      tout
                  |L1.20688|
                          DCD      data
                  |L1.20692|
                          DCD      at_
                  |L1.20696|
                          DCD      drive
                  |L1.20700|
0050dc  3e00              DCB      ">",0
0050de  00                DCB      0
0050df  00                DCB      0
                  |L1.20704|
                          DCD      ||k2||
                  |L1.20708|
                          DCD      k
                  |L1.20712|
0050e8  48fe              LDR      r0,|L1.21732|
0050ea  f7fffffe          BL       uart_putchar
0050ee  210a              MOVS     r1,#0xa
0050f0  48fc              LDR      r0,|L1.21732|
0050f2  f7fffffe          BL       uart_putchar
0050f6  210a              MOVS     r1,#0xa
0050f8  48fa              LDR      r0,|L1.21732|
0050fa  f7fffffe          BL       uart_putchar
0050fe  210a              MOVS     r1,#0xa
005100  48f8              LDR      r0,|L1.21732|
005102  f7fffffe          BL       uart_putchar
005106  210a              MOVS     r1,#0xa
005108  48f6              LDR      r0,|L1.21732|
00510a  f7fffffe          BL       uart_putchar
00510e  210a              MOVS     r1,#0xa
005110  48f4              LDR      r0,|L1.21732|
005112  f7fffffe          BL       uart_putchar
005116  210a              MOVS     r1,#0xa
005118  48f2              LDR      r0,|L1.21732|
00511a  f7fffffe          BL       uart_putchar
00511e  210a              MOVS     r1,#0xa
005120  48f0              LDR      r0,|L1.21732|
005122  f7fffffe          BL       uart_putchar
;;;626    								
;;;627    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005126  bf00              NOP      
                  |L1.20776|
005128  49ef              LDR      r1,|L1.21736|
00512a  48f0              LDR      r0,|L1.21740|
00512c  f7fffffe          BL       strstr
005130  2800              CMP      r0,#0
005132  d109              BNE      |L1.20808|
005134  49ee              LDR      r1,|L1.21744|
005136  48ed              LDR      r0,|L1.21740|
005138  f7fffffe          BL       strstr
00513c  2800              CMP      r0,#0
00513e  d103              BNE      |L1.20808|
005140  48ec              LDR      r0,|L1.21748|
005142  6800              LDR      r0,[r0,#0]  ; tout
005144  2805              CMP      r0,#5
005146  ddef              BLE      |L1.20776|
                  |L1.20808|
;;;628    									{}
;;;629    	                 memset(data,0,strlen(data));
005148  48eb              LDR      r0,|L1.21752|
00514a  f7fffffe          BL       strlen
00514e  4601              MOV      r1,r0
005150  9001              STR      r0,[sp,#4]
005152  48e9              LDR      r0,|L1.21752|
005154  f7fffffe          BL       __aeabi_memclr
;;;630    									 clear();
005158  f7fffffe          BL       clear
;;;631      								logged=1;}			//
00515c  2001              MOVS     r0,#1
00515e  49e7              LDR      r1,|L1.21756|
005160  6008              STR      r0,[r1,#0]  ; logged
                  |L1.20834|
;;;632    
;;;633    							
;;;634    
;;;635    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;636    	else
;;;637    	{
;;;638    		//send_chunk();
;;;639    	}		
;;;640    								
;;;641    								
;;;642    								
;;;643    	memset(data,0,strlen(data));	
005162  48e5              LDR      r0,|L1.21752|
005164  f7fffffe          BL       strlen
005168  4601              MOV      r1,r0
00516a  9001              STR      r0,[sp,#4]
00516c  48e2              LDR      r0,|L1.21752|
00516e  f7fffffe          BL       __aeabi_memclr
;;;644    	uart_putchar(UART1_BASE_PTR, 0x1A);
005172  211a              MOVS     r1,#0x1a
005174  48db              LDR      r0,|L1.21732|
005176  f7fffffe          BL       uart_putchar
                  |L1.20858|
;;;645    
;;;646    while(1)
00517a  e3fd              B        |L1.22904|
                  |L1.20860|
;;;647    {
;;;648    LED_state();
00517c  f7fffffe          BL       LED_state
;;;649    LED_state2();
005180  f7fffffe          BL       LED_state2
;;;650    RESET_ON; //not reset
005184  2020              MOVS     r0,#0x20
005186  49de              LDR      r1,|L1.21760|
005188  6048              STR      r0,[r1,#4]
;;;651    msg_sim800(); 
00518a  f7fffffe          BL       msg_sim800
;;;652    	DTR_OFF;		// not sleep	
00518e  2080              MOVS     r0,#0x80
005190  49db              LDR      r1,|L1.21760|
005192  3140              ADDS     r1,r1,#0x40
005194  6088              STR      r0,[r1,#8]
;;;653    	delay(200);
005196  20c8              MOVS     r0,#0xc8
005198  f7fffffe          BL       delay
;;;654    
;;;655    	sleep_flag=0;
00519c  2000              MOVS     r0,#0
00519e  49d9              LDR      r1,|L1.21764|
0051a0  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;656    //	if(voltagecbc<4000){breach=1;}
;;;657    //	else{breach=0;}
;;;658    	if(	(GPIOC_PDIR & 0x00000001) || (GPIOB_PDIR & 0x00000001)){
0051a2  48d7              LDR      r0,|L1.21760|
0051a4  6900              LDR      r0,[r0,#0x10]
0051a6  07c0              LSLS     r0,r0,#31
0051a8  0fc0              LSRS     r0,r0,#31
0051aa  2800              CMP      r0,#0
0051ac  d106              BNE      |L1.20924|
0051ae  48d4              LDR      r0,|L1.21760|
0051b0  3840              SUBS     r0,r0,#0x40
0051b2  6900              LDR      r0,[r0,#0x10]
0051b4  07c0              LSLS     r0,r0,#31
0051b6  0fc0              LSRS     r0,r0,#31
0051b8  2800              CMP      r0,#0
0051ba  d007              BEQ      |L1.20940|
                  |L1.20924|
;;;659    	DTR_OFF;sleep_flag = 0;
0051bc  2080              MOVS     r0,#0x80
0051be  49d0              LDR      r1,|L1.21760|
0051c0  3140              ADDS     r1,r1,#0x40
0051c2  6088              STR      r0,[r1,#8]
0051c4  2000              MOVS     r0,#0
0051c6  49cf              LDR      r1,|L1.21764|
0051c8  6008              STR      r0,[r1,#0]  ; sleep_flag
0051ca  e006              B        |L1.20954|
                  |L1.20940|
;;;660    	}
;;;661    	else{
;;;662    	DTR_ON;sleep_flag=1;
0051cc  2080              MOVS     r0,#0x80
0051ce  49cc              LDR      r1,|L1.21760|
0051d0  3140              ADDS     r1,r1,#0x40
0051d2  6048              STR      r0,[r1,#4]
0051d4  2001              MOVS     r0,#1
0051d6  49cb              LDR      r1,|L1.21764|
0051d8  6008              STR      r0,[r1,#0]  ; sleep_flag
                  |L1.20954|
;;;663    	}
;;;664    
;;;665    	
;;;666    	
;;;667    if(rtcticks2>=1500){
0051da  48cb              LDR      r0,|L1.21768|
0051dc  6800              LDR      r0,[r0,#0]  ; rtcticks2
0051de  49cb              LDR      r1,|L1.21772|
0051e0  4288              CMP      r0,r1
0051e2  db7d              BLT      |L1.21216|
;;;668    	DTR_OFF;
0051e4  2080              MOVS     r0,#0x80
0051e6  49c6              LDR      r1,|L1.21760|
0051e8  3140              ADDS     r1,r1,#0x40
0051ea  6088              STR      r0,[r1,#8]
;;;669    	send_modem("\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n");
0051ec  a0c8              ADR      r0,|L1.21776|
0051ee  f7fffffe          BL       send_modem
;;;670    	clear();
0051f2  f7fffffe          BL       clear
;;;671    		delay(100);
0051f6  2064              MOVS     r0,#0x64
0051f8  f7fffffe          BL       delay
;;;672    
;;;673    	savecursor();
0051fc  f7fffffe          BL       savecursor
;;;674    	
;;;675    				memset(at_,0,100);
005200  2164              MOVS     r1,#0x64
005202  48d3              LDR      r0,|L1.21840|
005204  f7fffffe          BL       __aeabi_memclr
;;;676    				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005208  48bb              LDR      r0,|L1.21752|
00520a  f7fffffe          BL       strlen
00520e  1c40              ADDS     r0,r0,#1
005210  4603              MOV      r3,r0
005212  4ad0              LDR      r2,|L1.21844|
005214  49b6              LDR      r1,|L1.21744|
005216  313c              ADDS     r1,r1,#0x3c
005218  9001              STR      r0,[sp,#4]
00521a  48cd              LDR      r0,|L1.21840|
00521c  f7fffffe          BL       __2sprintf
;;;677    				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005220  2005              MOVS     r0,#5
005222  4bb3              LDR      r3,|L1.21744|
005224  461a              MOV      r2,r3
005226  3260              ADDS     r2,r2,#0x60
005228  a1cb              ADR      r1,|L1.21848|
00522a  9000              STR      r0,[sp,#0]
00522c  48c8              LDR      r0,|L1.21840|
00522e  f7fffffe          BL       send_SD
;;;678    if(strstr(uart_string_gsm,"ERROR")){
005232  49af              LDR      r1,|L1.21744|
005234  48ad              LDR      r0,|L1.21740|
005236  f7fffffe          BL       strstr
00523a  2800              CMP      r0,#0
00523c  d004              BEQ      |L1.21064|
;;;679    	drive[0]='C';drive[1]=':';
00523e  2043              MOVS     r0,#0x43
005240  49c4              LDR      r1,|L1.21844|
005242  7008              STRB     r0,[r1,#0]
005244  203a              MOVS     r0,#0x3a
005246  7048              STRB     r0,[r1,#1]
                  |L1.21064|
;;;680    }	
;;;681    				//clear();	
;;;682    				k2=0;									//string array counter for uart 1
005248  2000              MOVS     r0,#0
00524a  49c4              LDR      r1,|L1.21852|
00524c  6008              STR      r0,[r1,#0]  ; k2
;;;683    				tout=0;	
00524e  49a9              LDR      r1,|L1.21748|
005250  6008              STR      r0,[r1,#0]  ; tout
;;;684    				for(k=0;k<strlen(data);k++)
005252  49c3              LDR      r1,|L1.21856|
005254  6008              STR      r0,[r1,#0]  ; k
005256  e00d              B        |L1.21108|
                  |L1.21080|
;;;685    				{
;;;686    					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005258  48a7              LDR      r0,|L1.21752|
00525a  49c1              LDR      r1,|L1.21856|
00525c  6809              LDR      r1,[r1,#0]  ; k
00525e  5c40              LDRB     r0,[r0,r1]
005260  4601              MOV      r1,r0
005262  9001              STR      r0,[sp,#4]
005264  489f              LDR      r0,|L1.21732|
005266  f7fffffe          BL       uart_putchar
00526a  48bd              LDR      r0,|L1.21856|
00526c  6800              LDR      r0,[r0,#0]            ;684  ; k
00526e  1c40              ADDS     r0,r0,#1              ;684
005270  49bb              LDR      r1,|L1.21856|
005272  6008              STR      r0,[r1,#0]            ;684  ; k
                  |L1.21108|
005274  48a0              LDR      r0,|L1.21752|
005276  f7fffffe          BL       strlen
00527a  49b9              LDR      r1,|L1.21856|
00527c  6809              LDR      r1,[r1,#0]            ;684  ; k
00527e  4288              CMP      r0,r1                 ;684
005280  d8ea              BHI      |L1.21080|
;;;687    				}	
;;;688    				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005282  210a              MOVS     r1,#0xa
005284  4897              LDR      r0,|L1.21732|
005286  f7fffffe          BL       uart_putchar
00528a  210a              MOVS     r1,#0xa
00528c  4895              LDR      r0,|L1.21732|
00528e  f7fffffe          BL       uart_putchar
005292  210a              MOVS     r1,#0xa
005294  4893              LDR      r0,|L1.21732|
005296  f7fffffe          BL       uart_putchar
00529a  210a              MOVS     r1,#0xa
00529c  4891              LDR      r0,|L1.21732|
00529e  f7fffffe          BL       uart_putchar
0052a2  210a              MOVS     r1,#0xa
0052a4  488f              LDR      r0,|L1.21732|
0052a6  f7fffffe          BL       uart_putchar
0052aa  210a              MOVS     r1,#0xa
0052ac  488d              LDR      r0,|L1.21732|
0052ae  f7fffffe          BL       uart_putchar
0052b2  210a              MOVS     r1,#0xa
0052b4  488b              LDR      r0,|L1.21732|
0052b6  f7fffffe          BL       uart_putchar
0052ba  210a              MOVS     r1,#0xa
0052bc  4889              LDR      r0,|L1.21732|
0052be  f7fffffe          BL       uart_putchar
0052c2  210a              MOVS     r1,#0xa
0052c4  4887              LDR      r0,|L1.21732|
0052c6  f7fffffe          BL       uart_putchar
0052ca  210a              MOVS     r1,#0xa
0052cc  4885              LDR      r0,|L1.21732|
0052ce  f7fffffe          BL       uart_putchar
0052d2  210a              MOVS     r1,#0xa
0052d4  4883              LDR      r0,|L1.21732|
0052d6  f7fffffe          BL       uart_putchar
0052da  210a              MOVS     r1,#0xa
0052dc  4881              LDR      r0,|L1.21732|
0052de  e000              B        |L1.21218|
                  |L1.21216|
0052e0  e0d7              B        |L1.21650|
                  |L1.21218|
0052e2  f7fffffe          BL       uart_putchar
0052e6  210a              MOVS     r1,#0xa
0052e8  487e              LDR      r0,|L1.21732|
0052ea  f7fffffe          BL       uart_putchar
0052ee  210a              MOVS     r1,#0xa
0052f0  487c              LDR      r0,|L1.21732|
0052f2  f7fffffe          BL       uart_putchar
0052f6  210a              MOVS     r1,#0xa
0052f8  487a              LDR      r0,|L1.21732|
0052fa  f7fffffe          BL       uart_putchar
0052fe  210a              MOVS     r1,#0xa
005300  4878              LDR      r0,|L1.21732|
005302  f7fffffe          BL       uart_putchar
005306  210a              MOVS     r1,#0xa
005308  4876              LDR      r0,|L1.21732|
00530a  f7fffffe          BL       uart_putchar
00530e  210a              MOVS     r1,#0xa
005310  4874              LDR      r0,|L1.21732|
005312  f7fffffe          BL       uart_putchar
005316  210a              MOVS     r1,#0xa
005318  4872              LDR      r0,|L1.21732|
00531a  f7fffffe          BL       uart_putchar
00531e  210a              MOVS     r1,#0xa
005320  4870              LDR      r0,|L1.21732|
005322  f7fffffe          BL       uart_putchar
005326  210a              MOVS     r1,#0xa
005328  486e              LDR      r0,|L1.21732|
00532a  f7fffffe          BL       uart_putchar
00532e  210a              MOVS     r1,#0xa
005330  486c              LDR      r0,|L1.21732|
005332  f7fffffe          BL       uart_putchar
005336  210a              MOVS     r1,#0xa
005338  486a              LDR      r0,|L1.21732|
00533a  f7fffffe          BL       uart_putchar
00533e  210a              MOVS     r1,#0xa
005340  4868              LDR      r0,|L1.21732|
005342  f7fffffe          BL       uart_putchar
005346  210a              MOVS     r1,#0xa
005348  4866              LDR      r0,|L1.21732|
00534a  f7fffffe          BL       uart_putchar
00534e  210a              MOVS     r1,#0xa
005350  4864              LDR      r0,|L1.21732|
005352  f7fffffe          BL       uart_putchar
005356  210a              MOVS     r1,#0xa
005358  4862              LDR      r0,|L1.21732|
00535a  f7fffffe          BL       uart_putchar
00535e  210a              MOVS     r1,#0xa
005360  4860              LDR      r0,|L1.21732|
005362  f7fffffe          BL       uart_putchar
005366  210a              MOVS     r1,#0xa
005368  485e              LDR      r0,|L1.21732|
00536a  f7fffffe          BL       uart_putchar
00536e  210a              MOVS     r1,#0xa
005370  485c              LDR      r0,|L1.21732|
005372  f7fffffe          BL       uart_putchar
005376  210a              MOVS     r1,#0xa
005378  485a              LDR      r0,|L1.21732|
00537a  f7fffffe          BL       uart_putchar
00537e  210a              MOVS     r1,#0xa
005380  4858              LDR      r0,|L1.21732|
005382  f7fffffe          BL       uart_putchar
005386  210a              MOVS     r1,#0xa
005388  4856              LDR      r0,|L1.21732|
00538a  f7fffffe          BL       uart_putchar
00538e  210a              MOVS     r1,#0xa
005390  4854              LDR      r0,|L1.21732|
005392  f7fffffe          BL       uart_putchar
005396  210a              MOVS     r1,#0xa
005398  4852              LDR      r0,|L1.21732|
00539a  f7fffffe          BL       uart_putchar
00539e  210a              MOVS     r1,#0xa
0053a0  4850              LDR      r0,|L1.21732|
0053a2  f7fffffe          BL       uart_putchar
0053a6  210a              MOVS     r1,#0xa
0053a8  484e              LDR      r0,|L1.21732|
0053aa  f7fffffe          BL       uart_putchar
0053ae  210a              MOVS     r1,#0xa
0053b0  484c              LDR      r0,|L1.21732|
0053b2  f7fffffe          BL       uart_putchar
0053b6  210a              MOVS     r1,#0xa
0053b8  484a              LDR      r0,|L1.21732|
0053ba  f7fffffe          BL       uart_putchar
0053be  210a              MOVS     r1,#0xa
0053c0  4848              LDR      r0,|L1.21732|
0053c2  f7fffffe          BL       uart_putchar
0053c6  210a              MOVS     r1,#0xa
0053c8  4846              LDR      r0,|L1.21732|
0053ca  f7fffffe          BL       uart_putchar
0053ce  210a              MOVS     r1,#0xa
0053d0  4844              LDR      r0,|L1.21732|
0053d2  f7fffffe          BL       uart_putchar
0053d6  210a              MOVS     r1,#0xa
0053d8  4842              LDR      r0,|L1.21732|
0053da  f7fffffe          BL       uart_putchar
0053de  210a              MOVS     r1,#0xa
0053e0  4840              LDR      r0,|L1.21732|
0053e2  f7fffffe          BL       uart_putchar
0053e6  210a              MOVS     r1,#0xa
0053e8  483e              LDR      r0,|L1.21732|
0053ea  f7fffffe          BL       uart_putchar
0053ee  210a              MOVS     r1,#0xa
0053f0  483c              LDR      r0,|L1.21732|
0053f2  f7fffffe          BL       uart_putchar
0053f6  210a              MOVS     r1,#0xa
0053f8  483a              LDR      r0,|L1.21732|
0053fa  f7fffffe          BL       uart_putchar
0053fe  210a              MOVS     r1,#0xa
005400  4838              LDR      r0,|L1.21732|
005402  f7fffffe          BL       uart_putchar
005406  210a              MOVS     r1,#0xa
005408  4836              LDR      r0,|L1.21732|
00540a  f7fffffe          BL       uart_putchar
00540e  210a              MOVS     r1,#0xa
005410  4834              LDR      r0,|L1.21732|
005412  f7fffffe          BL       uart_putchar
005416  210a              MOVS     r1,#0xa
005418  4832              LDR      r0,|L1.21732|
00541a  f7fffffe          BL       uart_putchar
00541e  210a              MOVS     r1,#0xa
005420  4830              LDR      r0,|L1.21732|
005422  f7fffffe          BL       uart_putchar
005426  210a              MOVS     r1,#0xa
005428  482e              LDR      r0,|L1.21732|
00542a  f7fffffe          BL       uart_putchar
00542e  210a              MOVS     r1,#0xa
005430  482c              LDR      r0,|L1.21732|
005432  f7fffffe          BL       uart_putchar
005436  210a              MOVS     r1,#0xa
005438  482a              LDR      r0,|L1.21732|
00543a  f7fffffe          BL       uart_putchar
00543e  210a              MOVS     r1,#0xa
005440  4828              LDR      r0,|L1.21732|
005442  f7fffffe          BL       uart_putchar
005446  210a              MOVS     r1,#0xa
005448  4826              LDR      r0,|L1.21732|
00544a  f7fffffe          BL       uart_putchar
;;;689    				//memset(data,0,1000);
;;;690    				//timer counts to wait for characters in uart 1 									
;;;691    				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00544e  bf00              NOP      
                  |L1.21584|
005450  4925              LDR      r1,|L1.21736|
005452  4826              LDR      r0,|L1.21740|
005454  f7fffffe          BL       strstr
005458  2800              CMP      r0,#0
00545a  d109              BNE      |L1.21616|
00545c  4924              LDR      r1,|L1.21744|
00545e  4823              LDR      r0,|L1.21740|
005460  f7fffffe          BL       strstr
005464  2800              CMP      r0,#0
005466  d103              BNE      |L1.21616|
005468  4822              LDR      r0,|L1.21748|
00546a  6800              LDR      r0,[r0,#0]  ; tout
00546c  2805              CMP      r0,#5
00546e  ddef              BLE      |L1.21584|
                  |L1.21616|
;;;692    				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;693    				}
;;;694    				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;695    				//memset(data,0,strlen(data));
;;;696    				//clear();
;;;697    	RESET_OFF;
005470  2020              MOVS     r0,#0x20
005472  4923              LDR      r1,|L1.21760|
005474  6088              STR      r0,[r1,#8]
;;;698    	RESET_OFF;
005476  6088              STR      r0,[r1,#8]
;;;699    	delay(100);	
005478  2064              MOVS     r0,#0x64
00547a  f7fffffe          BL       delay
;;;700    	RESET_ON;
00547e  2020              MOVS     r0,#0x20
005480  491f              LDR      r1,|L1.21760|
005482  6048              STR      r0,[r1,#4]
;;;701    	RESET_ON;	
005484  6048              STR      r0,[r1,#4]
;;;702    	delay(100);
005486  2064              MOVS     r0,#0x64
005488  f7fffffe          BL       delay
;;;703    	rtcticks2 =0;
00548c  2000              MOVS     r0,#0
00548e  491e              LDR      r1,|L1.21768|
005490  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.21650|
;;;704    
;;;705    	}//3600	
;;;706    memset(at_,0,100);
005492  2164              MOVS     r1,#0x64
005494  482e              LDR      r0,|L1.21840|
005496  f7fffffe          BL       __aeabi_memclr
;;;707    sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>         \n \n\n\r\n",aliveping,k5,rtcticks2);							
00549a  481b              LDR      r0,|L1.21768|
00549c  6800              LDR      r0,[r0,#0]  ; rtcticks2
00549e  9000              STR      r0,[sp,#0]
0054a0  4830              LDR      r0,|L1.21860|
0054a2  6803              LDR      r3,[r0,#0]  ; k5
0054a4  4830              LDR      r0,|L1.21864|
0054a6  a131              ADR      r1,|L1.21868|
0054a8  6802              LDR      r2,[r0,#0]  ; aliveping
0054aa  4829              LDR      r0,|L1.21840|
0054ac  f7fffffe          BL       __2sprintf
;;;708    //send_modem(at_);
;;;709    //send_modem(num2);	
;;;710    	
;;;711    	
;;;712    if	((sleep_flag != 1  || (aliveping > 5) ) )			
0054b0  4814              LDR      r0,|L1.21764|
0054b2  6800              LDR      r0,[r0,#0]  ; sleep_flag
0054b4  2801              CMP      r0,#1
0054b6  d104              BNE      |L1.21698|
0054b8  482b              LDR      r0,|L1.21864|
0054ba  6800              LDR      r0,[r0,#0]  ; aliveping
0054bc  2805              CMP      r0,#5
0054be  dc00              BGT      |L1.21698|
0054c0  e65b              B        |L1.20858|
                  |L1.21698|
;;;713    {
;;;714    	DTR_OFF;
0054c2  2080              MOVS     r0,#0x80
0054c4  490e              LDR      r1,|L1.21760|
0054c6  3140              ADDS     r1,r1,#0x40
0054c8  6088              STR      r0,[r1,#8]
;;;715    	sleep_flag=0;
0054ca  2000              MOVS     r0,#0
0054cc  490d              LDR      r1,|L1.21764|
0054ce  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;716    //	send_GSM("\r\nAT+CIPCLOSE\r\n", "CLOSE OK", "ERROR" , "ERROR:",tmeout);		
;;;717    	memset(at_,0,100);
0054d0  2164              MOVS     r1,#0x64
0054d2  481f              LDR      r0,|L1.21840|
0054d4  f7fffffe          BL       __aeabi_memclr
;;;718    	memset(data,0,strlen(data));
0054d8  4807              LDR      r0,|L1.21752|
0054da  f7fffffe          BL       strlen
0054de  4601              MOV      r1,r0
0054e0  9001              STR      r0,[sp,#4]
0054e2  e05f              B        |L1.21924|
                  |L1.21732|
                          DCD      0x4006b000
                  |L1.21736|
                          DCD      ||.text||+0xd3c
                  |L1.21740|
                          DCD      uart_string_gsm
                  |L1.21744|
                          DCD      ||.text||+0x8cc
                  |L1.21748|
                          DCD      tout
                  |L1.21752|
                          DCD      data
                  |L1.21756|
                          DCD      logged
                  |L1.21760|
                          DCD      0x400ff080
                  |L1.21764|
                          DCD      sleep_flag
                  |L1.21768|
                          DCD      rtcticks2
                  |L1.21772|
                          DCD      0x000005dc
                  |L1.21776|
005510  0d0a0d0a          DCB      "\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n"
005514  0d0a0a0a
005518  0a0a0a44
00551c  45564943
005520  45204953
005524  20524553
005528  45545449
00552c  4e472e2e
005530  2e2e2e2e
005534  2e0a0a0a
005538  0a      
005539  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n",0
00553d  0a0a0a0a
005541  0a0a0a0a
005545  0a0a0a0a
005549  0a0a0d0a
00554d  0a0a00  
                  |L1.21840|
                          DCD      at_
                  |L1.21844|
                          DCD      drive
                  |L1.21848|
005558  3e00              DCB      ">",0
00555a  00                DCB      0
00555b  00                DCB      0
                  |L1.21852|
                          DCD      ||k2||
                  |L1.21856|
                          DCD      k
                  |L1.21860|
                          DCD      ||k5||
                  |L1.21864|
                          DCD      aliveping
                  |L1.21868|
00556c  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>         \n \n"
005570  20202020
005574  20202020
005578  20202020
00557c  20203c25
005580  643e2020
005584  203c2564
005588  3e202020
00558c  3c3d2564
005590  3e202020
005594  20202020
005598  20200a20
00559c  0a      
00559d  0a0d0a00          DCB      "\n\r\n",0
0055a1  00                DCB      0
0055a2  00                DCB      0
0055a3  00                DCB      0
                  |L1.21924|
0055a4  48fe              LDR      r0,|L1.22944|
0055a6  f7fffffe          BL       __aeabi_memclr
;;;719    
;;;720    	GPS_COLLECT();	
0055aa  f7fffffe          BL       GPS_COLLECT
;;;721    	
;;;722    	if((aliveping>5))	
0055ae  48fd              LDR      r0,|L1.22948|
0055b0  6800              LDR      r0,[r0,#0]  ; aliveping
0055b2  2805              CMP      r0,#5
0055b4  dd4b              BLE      |L1.22094|
;;;723    	{
;;;724    			memset(ignstr,0,2);
0055b6  48fc              LDR      r0,|L1.22952|
0055b8  2100              MOVS     r1,#0
0055ba  7001              STRB     r1,[r0,#0]
0055bc  7041              STRB     r1,[r0,#1]
;;;725    if(GPIOB_PDIR & 0x00000001){
0055be  48fb              LDR      r0,|L1.22956|
0055c0  6900              LDR      r0,[r0,#0x10]
0055c2  07c0              LSLS     r0,r0,#31
0055c4  0fc0              LSRS     r0,r0,#31
0055c6  2800              CMP      r0,#0
0055c8  d007              BEQ      |L1.21978|
;;;726    			sprintf(ignstr,"%d,%ld",1,rtcticks2);
0055ca  48f9              LDR      r0,|L1.22960|
0055cc  2201              MOVS     r2,#1
0055ce  a1f9              ADR      r1,|L1.22964|
0055d0  6803              LDR      r3,[r0,#0]  ; rtcticks2
0055d2  48f5              LDR      r0,|L1.22952|
0055d4  f7fffffe          BL       __2sprintf
0055d8  e006              B        |L1.21992|
                  |L1.21978|
;;;727    }
;;;728    else{
;;;729    				sprintf(ignstr,"%d,%ld",0,rtcticks2);
0055da  48f5              LDR      r0,|L1.22960|
0055dc  2200              MOVS     r2,#0
0055de  a1f5              ADR      r1,|L1.22964|
0055e0  6803              LDR      r3,[r0,#0]  ; rtcticks2
0055e2  48f1              LDR      r0,|L1.22952|
0055e4  f7fffffe          BL       __2sprintf
                  |L1.21992|
;;;730    
;;;731    }
;;;732    
;;;733    //	adc_read(9);							
;;;734    //	memset(fuelstr,0,5);
;;;735    //	sprintf(fuelstr,"%d,",fuel);
;;;736    //memset(acstr,0,2); //ptb2
;;;737    //if(GPIOB_PDIR & 0x00000004){
;;;738    //			sprintf(acstr,"%d",1);
;;;739    //}
;;;740    //else{
;;;741    //				sprintf(acstr,"%d",0);
;;;742    
;;;743    //}
;;;744    
;;;745    		
;;;746    		aliveping=0;
0055e8  2000              MOVS     r0,#0
0055ea  49ee              LDR      r1,|L1.22948|
0055ec  6008              STR      r0,[r1,#0]  ; aliveping
;;;747    		memset(data,0,strlen(data));	
0055ee  48ec              LDR      r0,|L1.22944|
0055f0  f7fffffe          BL       strlen
0055f4  4601              MOV      r1,r0
0055f6  9001              STR      r0,[sp,#4]
0055f8  48e9              LDR      r0,|L1.22944|
0055fa  f7fffffe          BL       __aeabi_memclr
;;;748    		strcat(data,imei);strcat(data,",ALIVE,");strcat(data,num2);strcat(data,",SS=");strcat(data,fuelstr);		strcat(data,",AC=");	
0055fe  49ef              LDR      r1,|L1.22972|
005600  48e7              LDR      r0,|L1.22944|
005602  f7fffffe          BL       strcat
005606  a1ee              ADR      r1,|L1.22976|
005608  48e5              LDR      r0,|L1.22944|
00560a  f7fffffe          BL       strcat
00560e  49ee              LDR      r1,|L1.22984|
005610  48e3              LDR      r0,|L1.22944|
005612  f7fffffe          BL       strcat
005616  a1ed              ADR      r1,|L1.22988|
005618  48e1              LDR      r0,|L1.22944|
00561a  f7fffffe          BL       strcat
00561e  49ed              LDR      r1,|L1.22996|
005620  48df              LDR      r0,|L1.22944|
005622  f7fffffe          BL       strcat
005626  a1ec              ADR      r1,|L1.23000|
005628  48dd              LDR      r0,|L1.22944|
00562a  f7fffffe          BL       strcat
;;;749    		strcat(data,acstr);
00562e  49ec              LDR      r1,|L1.23008|
005630  48db              LDR      r0,|L1.22944|
005632  f7fffffe          BL       strcat
;;;750    		strcat(data,",I=");	
005636  a1eb              ADR      r1,|L1.23012|
005638  48d9              LDR      r0,|L1.22944|
00563a  f7fffffe          BL       strcat
;;;751    		strcat(data,ignstr);strcat(data,",\n\n\n"); 
00563e  49da              LDR      r1,|L1.22952|
005640  48d7              LDR      r0,|L1.22944|
005642  f7fffffe          BL       strcat
005646  a1e8              ADR      r1,|L1.23016|
005648  48d5              LDR      r0,|L1.22944|
00564a  f7fffffe          BL       strcat
                  |L1.22094|
;;;752    	}	
;;;753    
;;;754    	msg_sim800(); 
00564e  f7fffffe          BL       msg_sim800
;;;755    	
;;;756    		sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005652  4be7              LDR      r3,|L1.23024|
005654  4ae7              LDR      r2,|L1.23028|
005656  49e8              LDR      r1,|L1.23032|
005658  48e8              LDR      r0,|L1.23036|
00565a  f7fffffe          BL       __2sprintf
;;;757    		send_GSM( at_ , "CONNECT", "ERROR" , "ERROR\r\n",tmeout);	
00565e  48e8              LDR      r0,|L1.23040|
005660  6800              LDR      r0,[r0,#0]  ; tmeout
005662  4be8              LDR      r3,|L1.23044|
005664  461a              MOV      r2,r3
005666  3a60              SUBS     r2,r2,#0x60
005668  49e3              LDR      r1,|L1.23032|
00566a  3120              ADDS     r1,r1,#0x20
00566c  9000              STR      r0,[sp,#0]
00566e  48e3              LDR      r0,|L1.23036|
005670  f7fffffe          BL       send_GSM
;;;758    		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);	
005674  48e2              LDR      r0,|L1.23040|
005676  6800              LDR      r0,[r0,#0]  ; tmeout
005678  4bdf              LDR      r3,|L1.23032|
00567a  3328              ADDS     r3,r3,#0x28
00567c  4ae1              LDR      r2,|L1.23044|
00567e  3a60              SUBS     r2,r2,#0x60
005680  a1e1              ADR      r1,|L1.23048|
005682  9000              STR      r0,[sp,#0]
005684  4618              MOV      r0,r3
005686  3014              ADDS     r0,r0,#0x14
005688  f7fffffe          BL       send_GSM
;;;759    		memset(stcond1,0,strlen(stcond1));
00568c  48df              LDR      r0,|L1.23052|
00568e  6800              LDR      r0,[r0,#0]  ; stcond1
005690  f7fffffe          BL       strlen
005694  4601              MOV      r1,r0
005696  9001              STR      r0,[sp,#4]
005698  48dc              LDR      r0,|L1.23052|
00569a  6800              LDR      r0,[r0,#0]  ; stcond1
00569c  f7fffffe          BL       __aeabi_memclr
;;;760    		memset(stcond2,0,strlen(stcond2));	
0056a0  48db              LDR      r0,|L1.23056|
0056a2  6800              LDR      r0,[r0,#0]  ; stcond2
0056a4  f7fffffe          BL       strlen
0056a8  4601              MOV      r1,r0
0056aa  9001              STR      r0,[sp,#4]
0056ac  48d8              LDR      r0,|L1.23056|
0056ae  6800              LDR      r0,[r0,#0]  ; stcond2
0056b0  f7fffffe          BL       __aeabi_memclr
;;;761    		memset(stcond3,0,strlen(stcond3));	
0056b4  48d7              LDR      r0,|L1.23060|
0056b6  6800              LDR      r0,[r0,#0]  ; stcond3
0056b8  f7fffffe          BL       strlen
0056bc  4601              MOV      r1,r0
0056be  9001              STR      r0,[sp,#4]
0056c0  48d4              LDR      r0,|L1.23060|
0056c2  6800              LDR      r0,[r0,#0]  ; stcond3
0056c4  f7fffffe          BL       __aeabi_memclr
;;;762    		memset(stcond4,0,strlen(stcond4));	
0056c8  48d3              LDR      r0,|L1.23064|
0056ca  6800              LDR      r0,[r0,#0]  ; stcond4
0056cc  f7fffffe          BL       strlen
0056d0  4601              MOV      r1,r0
0056d2  9001              STR      r0,[sp,#4]
0056d4  48d0              LDR      r0,|L1.23064|
0056d6  6800              LDR      r0,[r0,#0]  ; stcond4
0056d8  f7fffffe          BL       __aeabi_memclr
;;;763    		memset(con1d,0,strlen(con1d));	
0056dc  48cf              LDR      r0,|L1.23068|
0056de  6800              LDR      r0,[r0,#0]  ; con1d
0056e0  f7fffffe          BL       strlen
0056e4  4601              MOV      r1,r0
0056e6  9001              STR      r0,[sp,#4]
0056e8  48cc              LDR      r0,|L1.23068|
0056ea  6800              LDR      r0,[r0,#0]  ; con1d
0056ec  f7fffffe          BL       __aeabi_memclr
;;;764    		cond=0;
0056f0  2000              MOVS     r0,#0
0056f2  49cb              LDR      r1,|L1.23072|
0056f4  7008              STRB     r0,[r1,#0]
;;;765    								cond=mystrstr(uart_string_gsm,'>');
0056f6  213e              MOVS     r1,#0x3e
0056f8  48ca              LDR      r0,|L1.23076|
0056fa  f7fffffe          BL       mystrstr
0056fe  49c8              LDR      r1,|L1.23072|
005700  7008              STRB     r0,[r1,#0]
;;;766    	
;;;767    								if(cond)	
005702  4608              MOV      r0,r1
005704  7800              LDRB     r0,[r0,#0]  ; cond
005706  2800              CMP      r0,#0
005708  d07e              BEQ      |L1.22536|
;;;768    								{		
;;;769    									clear();
00570a  f7fffffe          BL       clear
;;;770    									memset(uart_string_gsm,0,5000);
00570e  49c6              LDR      r1,|L1.23080|
005710  48c4              LDR      r0,|L1.23076|
005712  f7fffffe          BL       __aeabi_memclr
;;;771    									strcat(data,"\n\n");
005716  a1c5              ADR      r1,|L1.23084|
005718  48a1              LDR      r0,|L1.22944|
00571a  f7fffffe          BL       strcat
;;;772    									len=strlen(data);
00571e  48a0              LDR      r0,|L1.22944|
005720  f7fffffe          BL       strlen
005724  49c2              LDR      r1,|L1.23088|
005726  6008              STR      r0,[r1,#0]  ; len
;;;773    									tout=0;
005728  2000              MOVS     r0,#0
00572a  49c2              LDR      r1,|L1.23092|
00572c  6008              STR      r0,[r1,#0]  ; tout
;;;774    									k2=0;
00572e  49c2              LDR      r1,|L1.23096|
005730  6008              STR      r0,[r1,#0]  ; k2
;;;775    									for(k=0;k<len;k++)
005732  49c2              LDR      r1,|L1.23100|
005734  6008              STR      r0,[r1,#0]  ; k
005736  e00d              B        |L1.22356|
                  |L1.22328|
;;;776    									{
;;;777    										uart_putchar(UART1_BASE_PTR, data[k]);
005738  4899              LDR      r0,|L1.22944|
00573a  49c0              LDR      r1,|L1.23100|
00573c  6809              LDR      r1,[r1,#0]  ; k
00573e  5c40              LDRB     r0,[r0,r1]
005740  4601              MOV      r1,r0
005742  9001              STR      r0,[sp,#4]
005744  48be              LDR      r0,|L1.23104|
005746  f7fffffe          BL       uart_putchar
00574a  48bc              LDR      r0,|L1.23100|
00574c  6800              LDR      r0,[r0,#0]            ;775  ; k
00574e  1c40              ADDS     r0,r0,#1              ;775
005750  49ba              LDR      r1,|L1.23100|
005752  6008              STR      r0,[r1,#0]            ;775  ; k
                  |L1.22356|
005754  48b9              LDR      r0,|L1.23100|
005756  6800              LDR      r0,[r0,#0]            ;775  ; k
005758  49b5              LDR      r1,|L1.23088|
00575a  6809              LDR      r1,[r1,#0]            ;775  ; len
00575c  4288              CMP      r0,r1                 ;775
00575e  dbeb              BLT      |L1.22328|
;;;778    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005760  210a              MOVS     r1,#0xa
005762  48b7              LDR      r0,|L1.23104|
005764  f7fffffe          BL       uart_putchar
005768  211a              MOVS     r1,#0x1a
00576a  48b5              LDR      r0,|L1.23104|
00576c  f7fffffe          BL       uart_putchar
005770  211a              MOVS     r1,#0x1a
005772  48b3              LDR      r0,|L1.23104|
005774  f7fffffe          BL       uart_putchar
005778  211a              MOVS     r1,#0x1a
00577a  48b1              LDR      r0,|L1.23104|
00577c  f7fffffe          BL       uart_putchar
005780  211a              MOVS     r1,#0x1a
005782  48af              LDR      r0,|L1.23104|
005784  f7fffffe          BL       uart_putchar
005788  211a              MOVS     r1,#0x1a
00578a  48ad              LDR      r0,|L1.23104|
00578c  f7fffffe          BL       uart_putchar
;;;779    									do
005790  bf00              NOP      
                  |L1.22418|
;;;780    																{stcond1=strstr(uart_string_gsm,"SEND OK");
005792  499c              LDR      r1,|L1.23044|
005794  3968              SUBS     r1,r1,#0x68
005796  48a3              LDR      r0,|L1.23076|
005798  f7fffffe          BL       strstr
00579c  499b              LDR      r1,|L1.23052|
00579e  6008              STR      r0,[r1,#0]  ; stcond1
;;;781    																	stcond2=strstr(uart_string_gsm, "ERROR");
0057a0  4998              LDR      r1,|L1.23044|
0057a2  3960              SUBS     r1,r1,#0x60
0057a4  489f              LDR      r0,|L1.23076|
0057a6  f7fffffe          BL       strstr
0057aa  4999              LDR      r1,|L1.23056|
0057ac  6008              STR      r0,[r1,#0]  ; stcond2
;;;782    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0057ae  4992              LDR      r1,|L1.23032|
0057b0  3130              ADDS     r1,r1,#0x30
0057b2  489c              LDR      r0,|L1.23076|
0057b4  f7fffffe          BL       strstr
0057b8  4996              LDR      r1,|L1.23060|
0057ba  6008              STR      r0,[r1,#0]  ; stcond3
;;;783    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0057bc  4991              LDR      r1,|L1.23044|
0057be  3948              SUBS     r1,r1,#0x48
0057c0  4898              LDR      r0,|L1.23076|
0057c2  f7fffffe          BL       strstr
0057c6  4994              LDR      r1,|L1.23064|
0057c8  6008              STR      r0,[r1,#0]  ; stcond4
;;;784    																	
;;;785    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0057ca  4891              LDR      r0,|L1.23056|
0057cc  6800              LDR      r0,[r0,#0]  ; stcond2
0057ce  2800              CMP      r0,#0
0057d0  d10f              BNE      |L1.22514|
0057d2  4890              LDR      r0,|L1.23060|
0057d4  6800              LDR      r0,[r0,#0]  ; stcond3
0057d6  2800              CMP      r0,#0
0057d8  d10b              BNE      |L1.22514|
0057da  4608              MOV      r0,r1
0057dc  6800              LDR      r0,[r0,#0]  ; stcond4
0057de  2800              CMP      r0,#0
0057e0  d107              BNE      |L1.22514|
0057e2  488a              LDR      r0,|L1.23052|
0057e4  6800              LDR      r0,[r0,#0]  ; stcond1
0057e6  2800              CMP      r0,#0
0057e8  d103              BNE      |L1.22514|
0057ea  4892              LDR      r0,|L1.23092|
0057ec  6800              LDR      r0,[r0,#0]  ; tout
0057ee  2808              CMP      r0,#8
0057f0  ddcf              BLE      |L1.22418|
                  |L1.22514|
;;;786    																//delay(10);clear();
;;;787    														uart_putchar(UART1_BASE_PTR,0x1A);
0057f2  211a              MOVS     r1,#0x1a
0057f4  4892              LDR      r0,|L1.23104|
0057f6  f7fffffe          BL       uart_putchar
;;;788    												//delay(10);
;;;789    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0057fa  211a              MOVS     r1,#0x1a
0057fc  4890              LDR      r0,|L1.23104|
0057fe  f7fffffe          BL       uart_putchar
005802  211a              MOVS     r1,#0x1a
005804  488e              LDR      r0,|L1.23104|
005806  e000              B        |L1.22538|
                  |L1.22536|
005808  e00f              B        |L1.22570|
                  |L1.22538|
00580a  f7fffffe          BL       uart_putchar
00580e  211a              MOVS     r1,#0x1a
005810  488b              LDR      r0,|L1.23104|
005812  f7fffffe          BL       uart_putchar
;;;790    								
;;;791    									delay(20);															
005816  2014              MOVS     r0,#0x14
005818  f7fffffe          BL       delay
;;;792    									stcond1=strstr(uart_string_gsm,"SEND OK"); 
00581c  4979              LDR      r1,|L1.23044|
00581e  3968              SUBS     r1,r1,#0x68
005820  4880              LDR      r0,|L1.23076|
005822  f7fffffe          BL       strstr
005826  4979              LDR      r1,|L1.23052|
005828  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.22570|
;;;793    								}else{}
;;;794    stcond1=strstr(uart_string_gsm,"SEND OK"); 
00582a  4976              LDR      r1,|L1.23044|
00582c  3968              SUBS     r1,r1,#0x68
00582e  487d              LDR      r0,|L1.23076|
005830  f7fffffe          BL       strstr
005834  4975              LDR      r1,|L1.23052|
005836  6008              STR      r0,[r1,#0]  ; stcond1
;;;795    //checks for send ok
;;;796    if(!(stcond1) == 1 ) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
005838  4608              MOV      r0,r1
00583a  6800              LDR      r0,[r0,#0]  ; stcond1
00583c  2800              CMP      r0,#0
00583e  d101              BNE      |L1.22596|
005840  2001              MOVS     r0,#1
005842  e000              B        |L1.22598|
                  |L1.22596|
005844  2000              MOVS     r0,#0
                  |L1.22598|
005846  2801              CMP      r0,#1
005848  d001              BEQ      |L1.22606|
00584a  f000fe79          BL       |L1.25920|
                  |L1.22606|
;;;797    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00584e  211a              MOVS     r1,#0x1a
005850  487b              LDR      r0,|L1.23104|
005852  f7fffffe          BL       uart_putchar
005856  f7fffffe          BL       clear
00585a  200a              MOVS     r0,#0xa
00585c  f7fffffe          BL       delay
;;;798    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
005860  211a              MOVS     r1,#0x1a
005862  4877              LDR      r0,|L1.23104|
005864  f7fffffe          BL       uart_putchar
005868  f7fffffe          BL       clear
00586c  200a              MOVS     r0,#0xa
00586e  f7fffffe          BL       delay
;;;799    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
005872  211a              MOVS     r1,#0x1a
005874  4872              LDR      r0,|L1.23104|
005876  f7fffffe          BL       uart_putchar
00587a  f7fffffe          BL       clear
00587e  200a              MOVS     r0,#0xa
005880  f7fffffe          BL       delay
;;;800    									remove_all_chars(data, '\n', '\n');
005884  220a              MOVS     r2,#0xa
005886  4611              MOV      r1,r2
005888  4845              LDR      r0,|L1.22944|
00588a  f7fffffe          BL       remove_all_chars
;;;801    									strcat(data,"CH\n");	
00588e  495d              LDR      r1,|L1.23044|
005890  3930              SUBS     r1,r1,#0x30
005892  4843              LDR      r0,|L1.22944|
005894  f7fffffe          BL       strcat
;;;802    									delay(100);
005898  2064              MOVS     r0,#0x64
00589a  f7fffffe          BL       delay
;;;803    									clear();//memset(uart_string_gsm,0,5000);
00589e  f7fffffe          BL       clear
;;;804    									memset(at_,0,100);
0058a2  2164              MOVS     r1,#0x64
0058a4  4855              LDR      r0,|L1.23036|
0058a6  f7fffffe          BL       __aeabi_memclr
;;;805    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0058aa  483d              LDR      r0,|L1.22944|
0058ac  f7fffffe          BL       strlen
0058b0  1c40              ADDS     r0,r0,#1
0058b2  4603              MOV      r3,r0
0058b4  4a63              LDR      r2,|L1.23108|
0058b6  4953              LDR      r1,|L1.23044|
0058b8  3924              SUBS     r1,r1,#0x24
0058ba  9001              STR      r0,[sp,#4]
0058bc  484f              LDR      r0,|L1.23036|
0058be  f7fffffe          BL       __2sprintf
;;;806    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0058c2  2005              MOVS     r0,#5
0058c4  4b4f              LDR      r3,|L1.23044|
0058c6  3b60              SUBS     r3,r3,#0x60
0058c8  4a4e              LDR      r2,|L1.23044|
0058ca  a14f              ADR      r1,|L1.23048|
0058cc  9000              STR      r0,[sp,#0]
0058ce  484b              LDR      r0,|L1.23036|
0058d0  f7fffffe          BL       send_SD
;;;807    if(strstr(uart_string_gsm,"ERROR")){
0058d4  494b              LDR      r1,|L1.23044|
0058d6  3960              SUBS     r1,r1,#0x60
0058d8  4852              LDR      r0,|L1.23076|
0058da  f7fffffe          BL       strstr
0058de  2800              CMP      r0,#0
0058e0  d004              BEQ      |L1.22764|
;;;808    	drive[0]='C';drive[1]=':';
0058e2  2043              MOVS     r0,#0x43
0058e4  4957              LDR      r1,|L1.23108|
0058e6  7008              STRB     r0,[r1,#0]
0058e8  203a              MOVS     r0,#0x3a
0058ea  7048              STRB     r0,[r1,#1]
                  |L1.22764|
;;;809    }	
;;;810    									clear();	
0058ec  f7fffffe          BL       clear
;;;811    									k2=0;									//string array counter for uart 1
0058f0  2000              MOVS     r0,#0
0058f2  4951              LDR      r1,|L1.23096|
0058f4  6008              STR      r0,[r1,#0]  ; k2
;;;812    									tout=0;	
0058f6  494f              LDR      r1,|L1.23092|
0058f8  6008              STR      r0,[r1,#0]  ; tout
;;;813    									for(k=0;k<strlen(data);k++)
0058fa  4950              LDR      r1,|L1.23100|
0058fc  6008              STR      r0,[r1,#0]  ; k
0058fe  e00d              B        |L1.22812|
                  |L1.22784|
;;;814    									{
;;;815    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005900  4827              LDR      r0,|L1.22944|
005902  494e              LDR      r1,|L1.23100|
005904  6809              LDR      r1,[r1,#0]  ; k
005906  5c40              LDRB     r0,[r0,r1]
005908  4601              MOV      r1,r0
00590a  9001              STR      r0,[sp,#4]
00590c  484c              LDR      r0,|L1.23104|
00590e  f7fffffe          BL       uart_putchar
005912  484a              LDR      r0,|L1.23100|
005914  6800              LDR      r0,[r0,#0]            ;813  ; k
005916  1c40              ADDS     r0,r0,#1              ;813
005918  4948              LDR      r1,|L1.23100|
00591a  6008              STR      r0,[r1,#0]            ;813  ; k
                  |L1.22812|
00591c  4820              LDR      r0,|L1.22944|
00591e  f7fffffe          BL       strlen
005922  4946              LDR      r1,|L1.23100|
005924  6809              LDR      r1,[r1,#0]            ;813  ; k
005926  4288              CMP      r0,r1                 ;813
005928  d8ea              BHI      |L1.22784|
;;;816    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
00592a  210a              MOVS     r1,#0xa
00592c  4844              LDR      r0,|L1.23104|
00592e  f7fffffe          BL       uart_putchar
005932  210a              MOVS     r1,#0xa
005934  4842              LDR      r0,|L1.23104|
005936  f7fffffe          BL       uart_putchar
00593a  210a              MOVS     r1,#0xa
00593c  4840              LDR      r0,|L1.23104|
00593e  f7fffffe          BL       uart_putchar
;;;817    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');
005942  210a              MOVS     r1,#0xa
005944  483e              LDR      r0,|L1.23104|
005946  f7fffffe          BL       uart_putchar
00594a  210a              MOVS     r1,#0xa
00594c  483c              LDR      r0,|L1.23104|
00594e  f7fffffe          BL       uart_putchar
005952  210a              MOVS     r1,#0xa
005954  483a              LDR      r0,|L1.23104|
005956  f7fffffe          BL       uart_putchar
;;;818    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00595a  210a              MOVS     r1,#0xa
00595c  4838              LDR      r0,|L1.23104|
00595e  f7fffffe          BL       uart_putchar
005962  210a              MOVS     r1,#0xa
005964  4836              LDR      r0,|L1.23104|
005966  f7fffffe          BL       uart_putchar
00596a  210a              MOVS     r1,#0xa
00596c  4834              LDR      r0,|L1.23104|
00596e  f7fffffe          BL       uart_putchar
;;;819    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 8) )))
005972  bf00              NOP      
                  |L1.22900|
005974  4934              LDR      r1,|L1.23112|
005976  e000              B        |L1.22906|
                  |L1.22904|
005978  e3fe              B        |L1.24952|
                  |L1.22906|
00597a  482a              LDR      r0,|L1.23076|
00597c  f7fffffe          BL       strstr
005980  2800              CMP      r0,#0
005982  d10a              BNE      |L1.22938|
005984  491f              LDR      r1,|L1.23044|
005986  3960              SUBS     r1,r1,#0x60
005988  4826              LDR      r0,|L1.23076|
00598a  f7fffffe          BL       strstr
00598e  2800              CMP      r0,#0
005990  d103              BNE      |L1.22938|
005992  4828              LDR      r0,|L1.23092|
005994  6800              LDR      r0,[r0,#0]  ; tout
005996  2808              CMP      r0,#8
005998  ddec              BLE      |L1.22900|
                  |L1.22938|
;;;820    									{}
;;;821    									clear();
00599a  f7fffffe          BL       clear
;;;822    									memset(data,0,strlen(data));
00599e  e055              B        |L1.23116|
                  |L1.22944|
                          DCD      data
                  |L1.22948|
                          DCD      aliveping
                  |L1.22952|
                          DCD      ignstr
                  |L1.22956|
                          DCD      0x400ff040
                  |L1.22960|
                          DCD      rtcticks2
                  |L1.22964|
0059b4  25642c25          DCB      "%d,%ld",0
0059b8  6c6400  
0059bb  00                DCB      0
                  |L1.22972|
                          DCD      imei
                  |L1.22976|
0059c0  2c414c49          DCB      ",ALIVE,",0
0059c4  56452c00
                  |L1.22984|
                          DCD      num2
                  |L1.22988|
0059cc  2c53533d          DCB      ",SS=",0
0059d0  00      
0059d1  00                DCB      0
0059d2  00                DCB      0
0059d3  00                DCB      0
                  |L1.22996|
                          DCD      fuelstr
                  |L1.23000|
0059d8  2c41433d          DCB      ",AC=",0
0059dc  00      
0059dd  00                DCB      0
0059de  00                DCB      0
0059df  00                DCB      0
                  |L1.23008|
                          DCD      acstr
                  |L1.23012|
0059e4  2c493d00          DCB      ",I=",0
                  |L1.23016|
0059e8  2c0a0a0a          DCB      ",\n\n\n",0
0059ec  00      
0059ed  00                DCB      0
0059ee  00                DCB      0
0059ef  00                DCB      0
                  |L1.23024|
                          DCD      port
                  |L1.23028|
                          DCD      ||ip||
                  |L1.23032|
                          DCD      ||.text||+0x1238
                  |L1.23036|
                          DCD      at_
                  |L1.23040|
                          DCD      tmeout
                  |L1.23044|
                          DCD      ||.text||+0x92c
                  |L1.23048|
005a08  3e00              DCB      ">",0
005a0a  00                DCB      0
005a0b  00                DCB      0
                  |L1.23052|
                          DCD      stcond1
                  |L1.23056|
                          DCD      stcond2
                  |L1.23060|
                          DCD      stcond3
                  |L1.23064|
                          DCD      stcond4
                  |L1.23068|
                          DCD      con1d
                  |L1.23072|
                          DCD      cond
                  |L1.23076|
                          DCD      uart_string_gsm
                  |L1.23080|
                          DCD      0x00001388
                  |L1.23084|
005a2c  0a0a00            DCB      "\n\n",0
005a2f  00                DCB      0
                  |L1.23088|
                          DCD      len
                  |L1.23092|
                          DCD      tout
                  |L1.23096|
                          DCD      ||k2||
                  |L1.23100|
                          DCD      k
                  |L1.23104|
                          DCD      0x4006b000
                  |L1.23108|
                          DCD      drive
                  |L1.23112|
                          DCD      ||.text||+0xd3c
                  |L1.23116|
005a4c  48fe              LDR      r0,|L1.24136|
005a4e  f7fffffe          BL       strlen
005a52  4601              MOV      r1,r0
005a54  9001              STR      r0,[sp,#4]
005a56  48fc              LDR      r0,|L1.24136|
005a58  f7fffffe          BL       __aeabi_memclr
;;;823    									clear();
005a5c  f7fffffe          BL       clear
;;;824    									//	log_it();		                         //logging
;;;825    									memset(data,0,strlen(data));	
005a60  48f9              LDR      r0,|L1.24136|
005a62  f7fffffe          BL       strlen
005a66  4601              MOV      r1,r0
005a68  9001              STR      r0,[sp,#4]
005a6a  48f7              LDR      r0,|L1.24136|
005a6c  f7fffffe          BL       __aeabi_memclr
;;;826    temp=int_erval;				
005a70  48f6              LDR      r0,|L1.24140|
005a72  6800              LDR      r0,[r0,#0]  ; int_erval
005a74  49f6              LDR      r1,|L1.24144|
005a76  6008              STR      r0,[r1,#0]  ; temp
;;;827    int_erval=4;
005a78  2004              MOVS     r0,#4
005a7a  49f4              LDR      r1,|L1.24140|
005a7c  6008              STR      r0,[r1,#0]  ; int_erval
;;;828    //setting interval 4
;;;829    									GPS_COLLECT();
005a7e  f7fffffe          BL       GPS_COLLECT
;;;830    									strcat(data,"CH\n");	
005a82  49f4              LDR      r1,|L1.24148|
005a84  48f0              LDR      r0,|L1.24136|
005a86  f7fffffe          BL       strcat
;;;831    //**************************************tcp_initialization();//reinitialization*********************************/
;;;832    
;;;833    		
;;;834    	msg_sim800(); 
005a8a  f7fffffe          BL       msg_sim800
;;;835    	send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
005a8e  2005              MOVS     r0,#5
005a90  4bf0              LDR      r3,|L1.24148|
005a92  3b30              SUBS     r3,r3,#0x30
005a94  461a              MOV      r2,r3
005a96  3260              ADDS     r2,r2,#0x60
005a98  a1ef              ADR      r1,|L1.24152|
005a9a  9000              STR      r0,[sp,#0]
005a9c  48ef              LDR      r0,|L1.24156|
005a9e  f7fffffe          BL       send_GSM
;;;836    	delay(100);
005aa2  2064              MOVS     r0,#0x64
005aa4  f7fffffe          BL       delay
;;;837    	send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
005aa8  2004              MOVS     r0,#4
005aaa  4bea              LDR      r3,|L1.24148|
005aac  3b30              SUBS     r3,r3,#0x30
005aae  4aeb              LDR      r2,|L1.24156|
005ab0  3210              ADDS     r2,r2,#0x10
005ab2  a1e9              ADR      r1,|L1.24152|
005ab4  9000              STR      r0,[sp,#0]
005ab6  4610              MOV      r0,r2
005ab8  3014              ADDS     r0,r0,#0x14
005aba  f7fffffe          BL       send_GSM
;;;838    	GPS_COLLECT2();
005abe  f7fffffe          BL       GPS_COLLECT2
;;;839    	strcat(data,"CH\n");		
005ac2  49e4              LDR      r1,|L1.24148|
005ac4  48e0              LDR      r0,|L1.24136|
005ac6  f7fffffe          BL       strcat
;;;840    	GPS_COLLECT2();
005aca  f7fffffe          BL       GPS_COLLECT2
;;;841    	strcat(data,"CH\n");	
005ace  49e1              LDR      r1,|L1.24148|
005ad0  48dd              LDR      r0,|L1.24136|
005ad2  f7fffffe          BL       strcat
;;;842    	GPS_COLLECT2();
005ad6  f7fffffe          BL       GPS_COLLECT2
;;;843    	strcat(data,"CH\n");
005ada  49de              LDR      r1,|L1.24148|
005adc  48da              LDR      r0,|L1.24136|
005ade  f7fffffe          BL       strcat
;;;844    	cond201=(strstr(uart_string_gsm, "OK"));
005ae2  a1dd              ADR      r1,|L1.24152|
005ae4  48de              LDR      r0,|L1.24160|
005ae6  f7fffffe          BL       strstr
005aea  49de              LDR      r1,|L1.24164|
005aec  6008              STR      r0,[r1,#0]  ; cond201
;;;845    	cond200=(strstr(uart_string_gsm, "ERROR"));
005aee  49d9              LDR      r1,|L1.24148|
005af0  3930              SUBS     r1,r1,#0x30
005af2  48db              LDR      r0,|L1.24160|
005af4  f7fffffe          BL       strstr
005af8  49db              LDR      r1,|L1.24168|
005afa  6008              STR      r0,[r1,#0]  ; cond200
;;;846    	if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
005afc  48d9              LDR      r0,|L1.24164|
005afe  6800              LDR      r0,[r0,#0]  ; cond201
005b00  2800              CMP      r0,#0
005b02  d101              BNE      |L1.23304|
005b04  2001              MOVS     r0,#1
005b06  e000              B        |L1.23306|
                  |L1.23304|
005b08  2000              MOVS     r0,#0
                  |L1.23306|
005b0a  2800              CMP      r0,#0
                  |L1.23308|
005b0c  d07d              BEQ      |L1.23562|
005b0e  48d6              LDR      r0,|L1.24168|
005b10  6800              LDR      r0,[r0,#0]  ; cond200
005b12  2800              CMP      r0,#0
005b14  d101              BNE      |L1.23322|
005b16  2001              MOVS     r0,#1
005b18  e000              B        |L1.23324|
                  |L1.23322|
005b1a  2000              MOVS     r0,#0
                  |L1.23324|
005b1c  2800              CMP      r0,#0
005b1e  d0f5              BEQ      |L1.23308|
005b20  48d2              LDR      r0,|L1.24172|
005b22  6800              LDR      r0,[r0,#0]  ; sleep_flag
005b24  2801              CMP      r0,#1
005b26  d0f1              BEQ      |L1.23308|
;;;847    	{
;;;848    	delay(100);
005b28  2064              MOVS     r0,#0x64
005b2a  f7fffffe          BL       delay
;;;849    	clear();//memset(uart_string_gsm,0,5000);
005b2e  f7fffffe          BL       clear
;;;850    	memset(at_,0,100);
005b32  2164              MOVS     r1,#0x64
005b34  48ce              LDR      r0,|L1.24176|
005b36  f7fffffe          BL       __aeabi_memclr
;;;851    	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005b3a  48c3              LDR      r0,|L1.24136|
005b3c  f7fffffe          BL       strlen
005b40  1c40              ADDS     r0,r0,#1
005b42  4603              MOV      r3,r0
005b44  4acb              LDR      r2,|L1.24180|
005b46  49c3              LDR      r1,|L1.24148|
005b48  310c              ADDS     r1,r1,#0xc
005b4a  9001              STR      r0,[sp,#4]
005b4c  48c8              LDR      r0,|L1.24176|
005b4e  f7fffffe          BL       __2sprintf
;;;852    	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005b52  2005              MOVS     r0,#5
005b54  4bbf              LDR      r3,|L1.24148|
005b56  3b30              SUBS     r3,r3,#0x30
005b58  461a              MOV      r2,r3
005b5a  3260              ADDS     r2,r2,#0x60
005b5c  a1c6              ADR      r1,|L1.24184|
005b5e  9000              STR      r0,[sp,#0]
005b60  48c3              LDR      r0,|L1.24176|
005b62  f7fffffe          BL       send_SD
;;;853    if(strstr(uart_string_gsm,"ERROR")){
005b66  49bb              LDR      r1,|L1.24148|
005b68  3930              SUBS     r1,r1,#0x30
005b6a  48bd              LDR      r0,|L1.24160|
005b6c  f7fffffe          BL       strstr
005b70  2800              CMP      r0,#0
005b72  d004              BEQ      |L1.23422|
;;;854    	drive[0]='C';drive[1]=':';
005b74  2043              MOVS     r0,#0x43
005b76  49bf              LDR      r1,|L1.24180|
005b78  7008              STRB     r0,[r1,#0]
005b7a  203a              MOVS     r0,#0x3a
005b7c  7048              STRB     r0,[r1,#1]
                  |L1.23422|
;;;855    }	
;;;856    	clear();	
005b7e  f7fffffe          BL       clear
;;;857    	k2=0;									//string array counter for uart 1
005b82  2000              MOVS     r0,#0
005b84  49bd              LDR      r1,|L1.24188|
005b86  6008              STR      r0,[r1,#0]  ; k2
;;;858    	tout=0;	
005b88  49bd              LDR      r1,|L1.24192|
005b8a  6008              STR      r0,[r1,#0]  ; tout
;;;859    	for(k=0;k<strlen(data);k++)
005b8c  49bd              LDR      r1,|L1.24196|
005b8e  6008              STR      r0,[r1,#0]  ; k
005b90  e00d              B        |L1.23470|
                  |L1.23442|
;;;860    	{
;;;861    	uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005b92  48ad              LDR      r0,|L1.24136|
005b94  49bb              LDR      r1,|L1.24196|
005b96  6809              LDR      r1,[r1,#0]  ; k
005b98  5c40              LDRB     r0,[r0,r1]
005b9a  4601              MOV      r1,r0
005b9c  9001              STR      r0,[sp,#4]
005b9e  48ba              LDR      r0,|L1.24200|
005ba0  f7fffffe          BL       uart_putchar
005ba4  48b7              LDR      r0,|L1.24196|
005ba6  6800              LDR      r0,[r0,#0]            ;859  ; k
005ba8  1c40              ADDS     r0,r0,#1              ;859
005baa  49b6              LDR      r1,|L1.24196|
005bac  6008              STR      r0,[r1,#0]            ;859  ; k
                  |L1.23470|
005bae  48a6              LDR      r0,|L1.24136|
005bb0  f7fffffe          BL       strlen
005bb4  49b3              LDR      r1,|L1.24196|
005bb6  6809              LDR      r1,[r1,#0]            ;859  ; k
005bb8  4288              CMP      r0,r1                 ;859
005bba  d8ea              BHI      |L1.23442|
;;;862    	}	
;;;863    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005bbc  210a              MOVS     r1,#0xa
005bbe  48b2              LDR      r0,|L1.24200|
005bc0  f7fffffe          BL       uart_putchar
005bc4  210a              MOVS     r1,#0xa
005bc6  48b0              LDR      r0,|L1.24200|
005bc8  f7fffffe          BL       uart_putchar
005bcc  210a              MOVS     r1,#0xa
005bce  48ae              LDR      r0,|L1.24200|
005bd0  f7fffffe          BL       uart_putchar
005bd4  210a              MOVS     r1,#0xa
005bd6  48ac              LDR      r0,|L1.24200|
005bd8  f7fffffe          BL       uart_putchar
005bdc  210a              MOVS     r1,#0xa
005bde  48aa              LDR      r0,|L1.24200|
005be0  f7fffffe          BL       uart_putchar
005be4  210a              MOVS     r1,#0xa
005be6  48a8              LDR      r0,|L1.24200|
005be8  f7fffffe          BL       uart_putchar
005bec  210a              MOVS     r1,#0xa
005bee  48a6              LDR      r0,|L1.24200|
005bf0  f7fffffe          BL       uart_putchar
;;;864    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005bf4  210a              MOVS     r1,#0xa
005bf6  48a4              LDR      r0,|L1.24200|
005bf8  f7fffffe          BL       uart_putchar
005bfc  210a              MOVS     r1,#0xa
005bfe  48a2              LDR      r0,|L1.24200|
005c00  f7fffffe          BL       uart_putchar
005c04  210a              MOVS     r1,#0xa
005c06  48a0              LDR      r0,|L1.24200|
005c08  e000              B        |L1.23564|
                  |L1.23562|
005c0a  e060              B        |L1.23758|
                  |L1.23564|
005c0c  f7fffffe          BL       uart_putchar
005c10  210a              MOVS     r1,#0xa
005c12  489d              LDR      r0,|L1.24200|
005c14  f7fffffe          BL       uart_putchar
005c18  210a              MOVS     r1,#0xa
005c1a  489b              LDR      r0,|L1.24200|
005c1c  f7fffffe          BL       uart_putchar
005c20  210a              MOVS     r1,#0xa
005c22  4899              LDR      r0,|L1.24200|
005c24  f7fffffe          BL       uart_putchar
005c28  210a              MOVS     r1,#0xa
005c2a  4897              LDR      r0,|L1.24200|
005c2c  f7fffffe          BL       uart_putchar
;;;865    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005c30  210a              MOVS     r1,#0xa
005c32  4895              LDR      r0,|L1.24200|
005c34  f7fffffe          BL       uart_putchar
005c38  210a              MOVS     r1,#0xa
005c3a  4893              LDR      r0,|L1.24200|
005c3c  f7fffffe          BL       uart_putchar
005c40  210a              MOVS     r1,#0xa
005c42  4891              LDR      r0,|L1.24200|
005c44  f7fffffe          BL       uart_putchar
005c48  210a              MOVS     r1,#0xa
005c4a  488f              LDR      r0,|L1.24200|
005c4c  f7fffffe          BL       uart_putchar
005c50  210a              MOVS     r1,#0xa
005c52  488d              LDR      r0,|L1.24200|
005c54  f7fffffe          BL       uart_putchar
005c58  210a              MOVS     r1,#0xa
005c5a  488b              LDR      r0,|L1.24200|
005c5c  f7fffffe          BL       uart_putchar
005c60  210a              MOVS     r1,#0xa
005c62  4889              LDR      r0,|L1.24200|
005c64  f7fffffe          BL       uart_putchar
;;;866    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005c68  210a              MOVS     r1,#0xa
005c6a  4887              LDR      r0,|L1.24200|
005c6c  f7fffffe          BL       uart_putchar
005c70  210a              MOVS     r1,#0xa
005c72  4885              LDR      r0,|L1.24200|
005c74  f7fffffe          BL       uart_putchar
;;;867    										//memset(data,0,1000);
;;;868    															//timer counts to wait for characters in uart 1 									
;;;869    										while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005c78  bf00              NOP      
                  |L1.23674|
005c7a  4978              LDR      r1,|L1.24156|
005c7c  3928              SUBS     r1,r1,#0x28
005c7e  4878              LDR      r0,|L1.24160|
005c80  f7fffffe          BL       strstr
005c84  2800              CMP      r0,#0
005c86  d10a              BNE      |L1.23710|
005c88  4972              LDR      r1,|L1.24148|
005c8a  3930              SUBS     r1,r1,#0x30
005c8c  4874              LDR      r0,|L1.24160|
005c8e  f7fffffe          BL       strstr
005c92  2800              CMP      r0,#0
005c94  d103              BNE      |L1.23710|
005c96  487a              LDR      r0,|L1.24192|
005c98  6800              LDR      r0,[r0,#0]  ; tout
005c9a  2805              CMP      r0,#5
005c9c  dded              BLE      |L1.23674|
                  |L1.23710|
;;;870    										{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;871    										}
;;;872    										clear();//uart_putchar(UART1_BASE_PTR,0x1a);
005c9e  f7fffffe          BL       clear
;;;873    										//clear();
;;;874    										memset(data,0,strlen(data));
005ca2  4869              LDR      r0,|L1.24136|
005ca4  f7fffffe          BL       strlen
005ca8  4601              MOV      r1,r0
005caa  9001              STR      r0,[sp,#4]
005cac  4866              LDR      r0,|L1.24136|
005cae  f7fffffe          BL       __aeabi_memclr
;;;875    										clear();
005cb2  f7fffffe          BL       clear
;;;876    										RESET_OFF;delay(100);
005cb6  2020              MOVS     r0,#0x20
005cb8  4974              LDR      r1,|L1.24204|
005cba  6088              STR      r0,[r1,#8]
005cbc  2064              MOVS     r0,#0x64
005cbe  f7fffffe          BL       delay
;;;877    										RESET_ON;delay(100);		
005cc2  2020              MOVS     r0,#0x20
005cc4  4971              LDR      r1,|L1.24204|
005cc6  6048              STR      r0,[r1,#4]
005cc8  2064              MOVS     r0,#0x64
005cca  f7fffffe          BL       delay
                  |L1.23758|
;;;878    	}
;;;879    		
;;;880    	send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
005cce  2004              MOVS     r0,#4
005cd0  4b6f              LDR      r3,|L1.24208|
005cd2  4a60              LDR      r2,|L1.24148|
005cd4  3230              ADDS     r2,r2,#0x30
005cd6  a160              ADR      r1,|L1.24152|
005cd8  9000              STR      r0,[sp,#0]
005cda  4618              MOV      r0,r3
005cdc  300c              ADDS     r0,r0,#0xc
005cde  f7fffffe          BL       send_GSM
;;;881    	GPS_COLLECT2();
005ce2  f7fffffe          BL       GPS_COLLECT2
;;;882    	strcat(data,"CH\n");	
005ce6  495b              LDR      r1,|L1.24148|
005ce8  4857              LDR      r0,|L1.24136|
005cea  f7fffffe          BL       strcat
;;;883    	memset(at_,0,100);
005cee  2164              MOVS     r1,#0x64
005cf0  485f              LDR      r0,|L1.24176|
005cf2  f7fffffe          BL       __aeabi_memclr
;;;884    	sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
005cf6  4a67              LDR      r2,|L1.24212|
005cf8  4965              LDR      r1,|L1.24208|
005cfa  3124              ADDS     r1,r1,#0x24
005cfc  485c              LDR      r0,|L1.24176|
005cfe  f7fffffe          BL       __2sprintf
;;;885    	send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
005d02  4865              LDR      r0,|L1.24216|
005d04  6800              LDR      r0,[r0,#0]  ; tmeout
005d06  4b62              LDR      r3,|L1.24208|
005d08  4a52              LDR      r2,|L1.24148|
005d0a  3230              ADDS     r2,r2,#0x30
005d0c  a152              ADR      r1,|L1.24152|
005d0e  9000              STR      r0,[sp,#0]
005d10  4857              LDR      r0,|L1.24176|
005d12  f7fffffe          BL       send_GSM
;;;886    	msg_sim800(); 
005d16  f7fffffe          BL       msg_sim800
;;;887    	send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
005d1a  2004              MOVS     r0,#4
005d1c  4b4d              LDR      r3,|L1.24148|
005d1e  3b18              SUBS     r3,r3,#0x18
005d20  461a              MOV      r2,r3
005d22  3248              ADDS     r2,r2,#0x48
005d24  a14c              ADR      r1,|L1.24152|
005d26  9000              STR      r0,[sp,#0]
005d28  4859              LDR      r0,|L1.24208|
005d2a  303c              ADDS     r0,r0,#0x3c
005d2c  f7fffffe          BL       send_GSM
;;;888    	GPS_COLLECT2();
005d30  f7fffffe          BL       GPS_COLLECT2
;;;889    	strcat(data,"CH\n");	
005d34  4947              LDR      r1,|L1.24148|
005d36  4844              LDR      r0,|L1.24136|
005d38  f7fffffe          BL       strcat
;;;890    	GPS_COLLECT2();
005d3c  f7fffffe          BL       GPS_COLLECT2
;;;891    	strcat(data,"CH\n");	
005d40  4944              LDR      r1,|L1.24148|
005d42  4841              LDR      r0,|L1.24136|
005d44  f7fffffe          BL       strcat
;;;892    
;;;893    
;;;894    	msg_sim800(); 
005d48  f7fffffe          BL       msg_sim800
;;;895    	GPS_COLLECT2();
005d4c  f7fffffe          BL       GPS_COLLECT2
;;;896    	strcat(data,"CH\n");	
005d50  4940              LDR      r1,|L1.24148|
005d52  483d              LDR      r0,|L1.24136|
005d54  f7fffffe          BL       strcat
;;;897    						clear();send_modem("\nAT+CIFSR\r\r\n");clear();
005d58  f7fffffe          BL       clear
005d5c  484c              LDR      r0,|L1.24208|
005d5e  304c              ADDS     r0,r0,#0x4c
005d60  f7fffffe          BL       send_modem
005d64  f7fffffe          BL       clear
;;;898    						delay(20);
005d68  2014              MOVS     r0,#0x14
005d6a  f7fffffe          BL       delay
;;;899    
;;;900    
;;;901    	msg_sim800(); 
005d6e  f7fffffe          BL       msg_sim800
;;;902    int_erval=temp;
005d72  4837              LDR      r0,|L1.24144|
005d74  6800              LDR      r0,[r0,#0]  ; temp
005d76  4935              LDR      r1,|L1.24140|
005d78  6008              STR      r0,[r1,#0]  ; int_erval
;;;903    							sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005d7a  4b48              LDR      r3,|L1.24220|
005d7c  4a48              LDR      r2,|L1.24224|
005d7e  4944              LDR      r1,|L1.24208|
005d80  3164              ADDS     r1,r1,#0x64
005d82  483b              LDR      r0,|L1.24176|
005d84  f7fffffe          BL       __2sprintf
;;;904    							send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
005d88  4843              LDR      r0,|L1.24216|
005d8a  6800              LDR      r0,[r0,#0]  ; tmeout
005d8c  4b40              LDR      r3,|L1.24208|
005d8e  4a31              LDR      r2,|L1.24148|
005d90  3a30              SUBS     r2,r2,#0x30
005d92  4619              MOV      r1,r3
005d94  3184              ADDS     r1,r1,#0x84
005d96  9000              STR      r0,[sp,#0]
005d98  4835              LDR      r0,|L1.24176|
005d9a  f7fffffe          BL       send_GSM
;;;905    							clear();
005d9e  f7fffffe          BL       clear
;;;906    							
;;;907    							
;;;908    							send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
005da2  483d              LDR      r0,|L1.24216|
005da4  6800              LDR      r0,[r0,#0]  ; tmeout
005da6  4b3a              LDR      r3,|L1.24208|
005da8  338c              ADDS     r3,r3,#0x8c
005daa  4a2a              LDR      r2,|L1.24148|
005dac  3a30              SUBS     r2,r2,#0x30
005dae  a132              ADR      r1,|L1.24184|
005db0  9000              STR      r0,[sp,#0]
005db2  4618              MOV      r0,r3
005db4  3014              ADDS     r0,r0,#0x14
005db6  f7fffffe          BL       send_GSM
;;;909    	//*****************************************tcp_initialization ends**************************//									
;;;910    										clear();		
005dba  f7fffffe          BL       clear
;;;911    										memset(stcond1,0,strlen(stcond1));
005dbe  4839              LDR      r0,|L1.24228|
005dc0  6800              LDR      r0,[r0,#0]  ; stcond1
005dc2  f7fffffe          BL       strlen
005dc6  4601              MOV      r1,r0
005dc8  9001              STR      r0,[sp,#4]
005dca  4836              LDR      r0,|L1.24228|
005dcc  6800              LDR      r0,[r0,#0]  ; stcond1
005dce  f7fffffe          BL       __aeabi_memclr
;;;912    										memset(stcond2,0,strlen(stcond2));	
005dd2  4835              LDR      r0,|L1.24232|
005dd4  6800              LDR      r0,[r0,#0]  ; stcond2
005dd6  f7fffffe          BL       strlen
005dda  4601              MOV      r1,r0
005ddc  9001              STR      r0,[sp,#4]
005dde  4832              LDR      r0,|L1.24232|
005de0  6800              LDR      r0,[r0,#0]  ; stcond2
005de2  f7fffffe          BL       __aeabi_memclr
;;;913    										memset(stcond3,0,strlen(stcond3));	
005de6  4831              LDR      r0,|L1.24236|
005de8  6800              LDR      r0,[r0,#0]  ; stcond3
005dea  f7fffffe          BL       strlen
005dee  4601              MOV      r1,r0
005df0  9001              STR      r0,[sp,#4]
005df2  482e              LDR      r0,|L1.24236|
005df4  6800              LDR      r0,[r0,#0]  ; stcond3
005df6  f7fffffe          BL       __aeabi_memclr
;;;914    										memset(stcond4,0,strlen(stcond4));								
005dfa  482d              LDR      r0,|L1.24240|
005dfc  6800              LDR      r0,[r0,#0]  ; stcond4
005dfe  f7fffffe          BL       strlen
005e02  4601              MOV      r1,r0
005e04  9001              STR      r0,[sp,#4]
005e06  482a              LDR      r0,|L1.24240|
005e08  6800              LDR      r0,[r0,#0]  ; stcond4
005e0a  f7fffffe          BL       __aeabi_memclr
;;;915    										cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
005e0e  213e              MOVS     r1,#0x3e
005e10  4813              LDR      r0,|L1.24160|
005e12  f7fffffe          BL       mystrstr
005e16  4927              LDR      r1,|L1.24244|
005e18  7008              STRB     r0,[r1,#0]
;;;916    								
;;;917    									if(cond)	
005e1a  4608              MOV      r0,r1
005e1c  7800              LDRB     r0,[r0,#0]  ; cond
005e1e  2800              CMP      r0,#0
005e20  d07d              BEQ      |L1.24350|
;;;918    									{	
;;;919    										clear();
005e22  f7fffffe          BL       clear
;;;920    										memset(uart_string_gsm,0,5000);
005e26  4924              LDR      r1,|L1.24248|
005e28  480d              LDR      r0,|L1.24160|
005e2a  f7fffffe          BL       __aeabi_memclr
;;;921    										strcat(data,"\n");
005e2e  a123              ADR      r1,|L1.24252|
005e30  4805              LDR      r0,|L1.24136|
005e32  f7fffffe          BL       strcat
;;;922    										len=strlen(data);
005e36  4804              LDR      r0,|L1.24136|
005e38  f7fffffe          BL       strlen
005e3c  4920              LDR      r1,|L1.24256|
005e3e  6008              STR      r0,[r1,#0]  ; len
;;;923    										tout=0;
005e40  2000              MOVS     r0,#0
005e42  490f              LDR      r1,|L1.24192|
005e44  6008              STR      r0,[r1,#0]  ; tout
;;;924    										k2=0;
005e46  e03d              B        |L1.24260|
                  |L1.24136|
                          DCD      data
                  |L1.24140|
                          DCD      int_erval
                  |L1.24144|
                          DCD      temp
                  |L1.24148|
                          DCD      ||.text||+0x8fc
                  |L1.24152|
005e58  4f4b00            DCB      "OK",0
005e5b  00                DCB      0
                  |L1.24156|
                          DCD      ||.text||+0xd64
                  |L1.24160|
                          DCD      uart_string_gsm
                  |L1.24164|
                          DCD      cond201
                  |L1.24168|
                          DCD      cond200
                  |L1.24172|
                          DCD      sleep_flag
                  |L1.24176|
                          DCD      at_
                  |L1.24180|
                          DCD      drive
                  |L1.24184|
005e78  3e00              DCB      ">",0
005e7a  00                DCB      0
005e7b  00                DCB      0
                  |L1.24188|
                          DCD      ||k2||
                  |L1.24192|
                          DCD      tout
                  |L1.24196|
                          DCD      k
                  |L1.24200|
                          DCD      0x4006b000
                  |L1.24204|
                          DCD      0x400ff080
                  |L1.24208|
                          DCD      ||.text||+0x11d4
                  |L1.24212|
                          DCD      apn
                  |L1.24216|
                          DCD      tmeout
                  |L1.24220|
                          DCD      port
                  |L1.24224|
                          DCD      ||ip||
                  |L1.24228|
                          DCD      stcond1
                  |L1.24232|
                          DCD      stcond2
                  |L1.24236|
                          DCD      stcond3
                  |L1.24240|
                          DCD      stcond4
                  |L1.24244|
                          DCD      cond
                  |L1.24248|
                          DCD      0x00001388
                  |L1.24252|
005ebc  0a00              DCB      "\n",0
005ebe  00                DCB      0
005ebf  00                DCB      0
                  |L1.24256|
                          DCD      len
                  |L1.24260|
005ec4  49fe              LDR      r1,|L1.25280|
005ec6  6008              STR      r0,[r1,#0]  ; k2
;;;925    										for(k=0;k<len;k++)
005ec8  49fe              LDR      r1,|L1.25284|
005eca  6008              STR      r0,[r1,#0]  ; k
005ecc  e00d              B        |L1.24298|
                  |L1.24270|
;;;926    										{uart_putchar(UART1_BASE_PTR, data[k]);
005ece  48fe              LDR      r0,|L1.25288|
005ed0  49fc              LDR      r1,|L1.25284|
005ed2  6809              LDR      r1,[r1,#0]  ; k
005ed4  5c40              LDRB     r0,[r0,r1]
005ed6  4601              MOV      r1,r0
005ed8  9001              STR      r0,[sp,#4]
005eda  48fc              LDR      r0,|L1.25292|
005edc  f7fffffe          BL       uart_putchar
005ee0  48f8              LDR      r0,|L1.25284|
005ee2  6800              LDR      r0,[r0,#0]            ;925  ; k
005ee4  1c40              ADDS     r0,r0,#1              ;925
005ee6  49f7              LDR      r1,|L1.25284|
005ee8  6008              STR      r0,[r1,#0]            ;925  ; k
                  |L1.24298|
005eea  48f6              LDR      r0,|L1.25284|
005eec  6800              LDR      r0,[r0,#0]            ;925  ; k
005eee  49f8              LDR      r1,|L1.25296|
005ef0  6809              LDR      r1,[r1,#0]            ;925  ; len
005ef2  4288              CMP      r0,r1                 ;925
005ef4  dbeb              BLT      |L1.24270|
;;;927    										}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005ef6  210a              MOVS     r1,#0xa
005ef8  48f4              LDR      r0,|L1.25292|
005efa  f7fffffe          BL       uart_putchar
005efe  211a              MOVS     r1,#0x1a
005f00  48f2              LDR      r0,|L1.25292|
005f02  f7fffffe          BL       uart_putchar
005f06  211a              MOVS     r1,#0x1a
005f08  48f0              LDR      r0,|L1.25292|
005f0a  f7fffffe          BL       uart_putchar
005f0e  211a              MOVS     r1,#0x1a
005f10  48ee              LDR      r0,|L1.25292|
005f12  f7fffffe          BL       uart_putchar
;;;928    										do{stcond1=strstr(uart_string_gsm,"SEND OK");
005f16  bf00              NOP      
                  |L1.24344|
005f18  49ee              LDR      r1,|L1.25300|
005f1a  48ef              LDR      r0,|L1.25304|
005f1c  e000              B        |L1.24352|
                  |L1.24350|
005f1e  e19e              B        |L1.25182|
                  |L1.24352|
005f20  f7fffffe          BL       strstr
005f24  49ed              LDR      r1,|L1.25308|
005f26  6008              STR      r0,[r1,#0]  ; stcond1
;;;929    												stcond2=strstr(uart_string_gsm, "ERROR");
005f28  49ea              LDR      r1,|L1.25300|
005f2a  3108              ADDS     r1,r1,#8
005f2c  48ea              LDR      r0,|L1.25304|
005f2e  f7fffffe          BL       strstr
005f32  49eb              LDR      r1,|L1.25312|
005f34  6008              STR      r0,[r1,#0]  ; stcond2
;;;930    													stcond3=strstr(uart_string_gsm, "FAIL");	
005f36  49eb              LDR      r1,|L1.25316|
005f38  48e7              LDR      r0,|L1.25304|
005f3a  f7fffffe          BL       strstr
005f3e  49ea              LDR      r1,|L1.25320|
005f40  6008              STR      r0,[r1,#0]  ; stcond3
;;;931    														stcond4=strstr(uart_string_gsm, "DEACT");	
005f42  49e4              LDR      r1,|L1.25300|
005f44  3120              ADDS     r1,r1,#0x20
005f46  48e4              LDR      r0,|L1.25304|
005f48  f7fffffe          BL       strstr
005f4c  49e7              LDR      r1,|L1.25324|
005f4e  6008              STR      r0,[r1,#0]  ; stcond4
;;;932    											}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
005f50  48e3              LDR      r0,|L1.25312|
005f52  6800              LDR      r0,[r0,#0]  ; stcond2
005f54  2800              CMP      r0,#0
005f56  d10f              BNE      |L1.24440|
005f58  48e3              LDR      r0,|L1.25320|
005f5a  6800              LDR      r0,[r0,#0]  ; stcond3
005f5c  2800              CMP      r0,#0
005f5e  d10b              BNE      |L1.24440|
005f60  4608              MOV      r0,r1
005f62  6800              LDR      r0,[r0,#0]  ; stcond4
005f64  2800              CMP      r0,#0
005f66  d107              BNE      |L1.24440|
005f68  48dc              LDR      r0,|L1.25308|
005f6a  6800              LDR      r0,[r0,#0]  ; stcond1
005f6c  2800              CMP      r0,#0
005f6e  d103              BNE      |L1.24440|
005f70  48df              LDR      r0,|L1.25328|
005f72  6800              LDR      r0,[r0,#0]  ; tout
005f74  2808              CMP      r0,#8
005f76  ddcf              BLE      |L1.24344|
                  |L1.24440|
;;;933    										uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005f78  211a              MOVS     r1,#0x1a
005f7a  48d4              LDR      r0,|L1.25292|
005f7c  f7fffffe          BL       uart_putchar
005f80  211a              MOVS     r1,#0x1a
005f82  48d2              LDR      r0,|L1.25292|
005f84  f7fffffe          BL       uart_putchar
005f88  211a              MOVS     r1,#0x1a
005f8a  48d0              LDR      r0,|L1.25292|
005f8c  f7fffffe          BL       uart_putchar
005f90  211a              MOVS     r1,#0x1a
005f92  48ce              LDR      r0,|L1.25292|
005f94  f7fffffe          BL       uart_putchar
;;;934    										con1d=	(strstr(uart_string_gsm,"SEND OK"));
005f98  49ce              LDR      r1,|L1.25300|
005f9a  48cf              LDR      r0,|L1.25304|
005f9c  f7fffffe          BL       strstr
005fa0  49d4              LDR      r1,|L1.25332|
005fa2  6008              STR      r0,[r1,#0]  ; con1d
;;;935    																	if(!(con1d) == 1 ) 
005fa4  4608              MOV      r0,r1
005fa6  6800              LDR      r0,[r0,#0]  ; con1d
005fa8  2800              CMP      r0,#0
005faa  d101              BNE      |L1.24496|
005fac  2001              MOVS     r0,#1
005fae  e000              B        |L1.24498|
                  |L1.24496|
005fb0  2000              MOVS     r0,#0
                  |L1.24498|
005fb2  2801              CMP      r0,#1
005fb4  d17e              BNE      |L1.24756|
;;;936    																	{
;;;937    																			delay(100);
005fb6  2064              MOVS     r0,#0x64
005fb8  f7fffffe          BL       delay
;;;938    																			clear();//memset(uart_string_gsm,0,5000);
005fbc  f7fffffe          BL       clear
;;;939    																			memset(at_,0,100);
005fc0  2164              MOVS     r1,#0x64
005fc2  48cd              LDR      r0,|L1.25336|
005fc4  f7fffffe          BL       __aeabi_memclr
;;;940    																			sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005fc8  48bf              LDR      r0,|L1.25288|
005fca  f7fffffe          BL       strlen
005fce  1c40              ADDS     r0,r0,#1
005fd0  4603              MOV      r3,r0
005fd2  4aca              LDR      r2,|L1.25340|
005fd4  49bf              LDR      r1,|L1.25300|
005fd6  3144              ADDS     r1,r1,#0x44
005fd8  9001              STR      r0,[sp,#4]
005fda  48c7              LDR      r0,|L1.25336|
005fdc  f7fffffe          BL       __2sprintf
;;;941    																			send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005fe0  2005              MOVS     r0,#5
005fe2  4bbc              LDR      r3,|L1.25300|
005fe4  3308              ADDS     r3,r3,#8
005fe6  461a              MOV      r2,r3
005fe8  3260              ADDS     r2,r2,#0x60
005fea  a1c5              ADR      r1,|L1.25344|
005fec  9000              STR      r0,[sp,#0]
005fee  48c2              LDR      r0,|L1.25336|
005ff0  f7fffffe          BL       send_SD
;;;942    if(strstr(uart_string_gsm,"ERROR")){
005ff4  49b7              LDR      r1,|L1.25300|
005ff6  3108              ADDS     r1,r1,#8
005ff8  48b7              LDR      r0,|L1.25304|
005ffa  f7fffffe          BL       strstr
005ffe  2800              CMP      r0,#0
006000  d004              BEQ      |L1.24588|
;;;943    	drive[0]='C';drive[1]=':';
006002  2043              MOVS     r0,#0x43
006004  49bd              LDR      r1,|L1.25340|
006006  7008              STRB     r0,[r1,#0]
006008  203a              MOVS     r0,#0x3a
00600a  7048              STRB     r0,[r1,#1]
                  |L1.24588|
;;;944    }	
;;;945    																			clear();	
00600c  f7fffffe          BL       clear
;;;946    																			k2=0;									//string array counter for uart 1
006010  2000              MOVS     r0,#0
006012  49ab              LDR      r1,|L1.25280|
006014  6008              STR      r0,[r1,#0]  ; k2
;;;947    																			tout=0;	
006016  49b6              LDR      r1,|L1.25328|
006018  6008              STR      r0,[r1,#0]  ; tout
;;;948    																			for(k=0;k<strlen(data);k++)
00601a  49aa              LDR      r1,|L1.25284|
00601c  6008              STR      r0,[r1,#0]  ; k
00601e  e00d              B        |L1.24636|
                  |L1.24608|
;;;949    																			{
;;;950    																				uart_putchar(UART1_BASE_PTR, data[k]);//clear();
006020  48a9              LDR      r0,|L1.25288|
006022  49a8              LDR      r1,|L1.25284|
006024  6809              LDR      r1,[r1,#0]  ; k
006026  5c40              LDRB     r0,[r0,r1]
006028  4601              MOV      r1,r0
00602a  9001              STR      r0,[sp,#4]
00602c  48a7              LDR      r0,|L1.25292|
00602e  f7fffffe          BL       uart_putchar
006032  48a4              LDR      r0,|L1.25284|
006034  6800              LDR      r0,[r0,#0]            ;948  ; k
006036  1c40              ADDS     r0,r0,#1              ;948
006038  49a2              LDR      r1,|L1.25284|
00603a  6008              STR      r0,[r1,#0]            ;948  ; k
                  |L1.24636|
00603c  48a2              LDR      r0,|L1.25288|
00603e  f7fffffe          BL       strlen
006042  49a0              LDR      r1,|L1.25284|
006044  6809              LDR      r1,[r1,#0]            ;948  ; k
006046  4288              CMP      r0,r1                 ;948
006048  d8ea              BHI      |L1.24608|
;;;951    																			}	
;;;952    																			uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00604a  210a              MOVS     r1,#0xa
00604c  489f              LDR      r0,|L1.25292|
00604e  f7fffffe          BL       uart_putchar
006052  210a              MOVS     r1,#0xa
006054  489d              LDR      r0,|L1.25292|
006056  f7fffffe          BL       uart_putchar
00605a  210a              MOVS     r1,#0xa
00605c  489b              LDR      r0,|L1.25292|
00605e  f7fffffe          BL       uart_putchar
006062  210a              MOVS     r1,#0xa
006064  4899              LDR      r0,|L1.25292|
006066  f7fffffe          BL       uart_putchar
00606a  210a              MOVS     r1,#0xa
00606c  4897              LDR      r0,|L1.25292|
00606e  f7fffffe          BL       uart_putchar
006072  210a              MOVS     r1,#0xa
006074  4895              LDR      r0,|L1.25292|
006076  f7fffffe          BL       uart_putchar
00607a  210a              MOVS     r1,#0xa
00607c  4893              LDR      r0,|L1.25292|
00607e  f7fffffe          BL       uart_putchar
006082  210a              MOVS     r1,#0xa
006084  4891              LDR      r0,|L1.25292|
006086  f7fffffe          BL       uart_putchar
00608a  210a              MOVS     r1,#0xa
00608c  488f              LDR      r0,|L1.25292|
00608e  f7fffffe          BL       uart_putchar
006092  210a              MOVS     r1,#0xa
006094  488d              LDR      r0,|L1.25292|
006096  f7fffffe          BL       uart_putchar
00609a  210a              MOVS     r1,#0xa
00609c  488b              LDR      r0,|L1.25292|
00609e  f7fffffe          BL       uart_putchar
0060a2  210a              MOVS     r1,#0xa
0060a4  4889              LDR      r0,|L1.25292|
0060a6  f7fffffe          BL       uart_putchar
0060aa  210a              MOVS     r1,#0xa
0060ac  4887              LDR      r0,|L1.25292|
0060ae  f7fffffe          BL       uart_putchar
0060b2  e000              B        |L1.24758|
                  |L1.24756|
0060b4  e0d0              B        |L1.25176|
                  |L1.24758|
0060b6  210a              MOVS     r1,#0xa
0060b8  4884              LDR      r0,|L1.25292|
0060ba  f7fffffe          BL       uart_putchar
0060be  210a              MOVS     r1,#0xa
0060c0  4882              LDR      r0,|L1.25292|
0060c2  f7fffffe          BL       uart_putchar
0060c6  210a              MOVS     r1,#0xa
0060c8  4880              LDR      r0,|L1.25292|
0060ca  f7fffffe          BL       uart_putchar
0060ce  210a              MOVS     r1,#0xa
0060d0  487e              LDR      r0,|L1.25292|
0060d2  f7fffffe          BL       uart_putchar
0060d6  210a              MOVS     r1,#0xa
0060d8  487c              LDR      r0,|L1.25292|
0060da  f7fffffe          BL       uart_putchar
0060de  210a              MOVS     r1,#0xa
0060e0  487a              LDR      r0,|L1.25292|
0060e2  f7fffffe          BL       uart_putchar
0060e6  210a              MOVS     r1,#0xa
0060e8  4878              LDR      r0,|L1.25292|
0060ea  f7fffffe          BL       uart_putchar
0060ee  210a              MOVS     r1,#0xa
0060f0  4876              LDR      r0,|L1.25292|
0060f2  f7fffffe          BL       uart_putchar
0060f6  210a              MOVS     r1,#0xa
0060f8  4874              LDR      r0,|L1.25292|
0060fa  f7fffffe          BL       uart_putchar
0060fe  210a              MOVS     r1,#0xa
006100  4872              LDR      r0,|L1.25292|
006102  f7fffffe          BL       uart_putchar
006106  210a              MOVS     r1,#0xa
006108  4870              LDR      r0,|L1.25292|
00610a  f7fffffe          BL       uart_putchar
00610e  210a              MOVS     r1,#0xa
006110  486e              LDR      r0,|L1.25292|
006112  f7fffffe          BL       uart_putchar
006116  210a              MOVS     r1,#0xa
006118  486c              LDR      r0,|L1.25292|
00611a  f7fffffe          BL       uart_putchar
00611e  210a              MOVS     r1,#0xa
006120  486a              LDR      r0,|L1.25292|
006122  f7fffffe          BL       uart_putchar
006126  210a              MOVS     r1,#0xa
006128  4868              LDR      r0,|L1.25292|
00612a  f7fffffe          BL       uart_putchar
00612e  210a              MOVS     r1,#0xa
006130  4866              LDR      r0,|L1.25292|
006132  f7fffffe          BL       uart_putchar
006136  210a              MOVS     r1,#0xa
006138  4864              LDR      r0,|L1.25292|
00613a  f7fffffe          BL       uart_putchar
00613e  210a              MOVS     r1,#0xa
006140  4862              LDR      r0,|L1.25292|
006142  f7fffffe          BL       uart_putchar
006146  210a              MOVS     r1,#0xa
006148  4860              LDR      r0,|L1.25292|
00614a  f7fffffe          BL       uart_putchar
00614e  210a              MOVS     r1,#0xa
006150  485e              LDR      r0,|L1.25292|
006152  f7fffffe          BL       uart_putchar
006156  210a              MOVS     r1,#0xa
006158  485c              LDR      r0,|L1.25292|
00615a  f7fffffe          BL       uart_putchar
00615e  210a              MOVS     r1,#0xa
006160  485a              LDR      r0,|L1.25292|
006162  f7fffffe          BL       uart_putchar
006166  210a              MOVS     r1,#0xa
006168  4858              LDR      r0,|L1.25292|
00616a  f7fffffe          BL       uart_putchar
00616e  210a              MOVS     r1,#0xa
006170  4856              LDR      r0,|L1.25292|
006172  f7fffffe          BL       uart_putchar
006176  e000              B        |L1.24954|
                  |L1.24952|
006178  e1e4              B        |L1.25924|
                  |L1.24954|
00617a  210a              MOVS     r1,#0xa
00617c  4853              LDR      r0,|L1.25292|
00617e  f7fffffe          BL       uart_putchar
006182  210a              MOVS     r1,#0xa
006184  4851              LDR      r0,|L1.25292|
006186  f7fffffe          BL       uart_putchar
00618a  210a              MOVS     r1,#0xa
00618c  484f              LDR      r0,|L1.25292|
00618e  f7fffffe          BL       uart_putchar
006192  210a              MOVS     r1,#0xa
006194  484d              LDR      r0,|L1.25292|
006196  f7fffffe          BL       uart_putchar
00619a  210a              MOVS     r1,#0xa
00619c  484b              LDR      r0,|L1.25292|
00619e  f7fffffe          BL       uart_putchar
0061a2  210a              MOVS     r1,#0xa
0061a4  4849              LDR      r0,|L1.25292|
0061a6  f7fffffe          BL       uart_putchar
0061aa  210a              MOVS     r1,#0xa
0061ac  4847              LDR      r0,|L1.25292|
0061ae  f7fffffe          BL       uart_putchar
0061b2  210a              MOVS     r1,#0xa
0061b4  4845              LDR      r0,|L1.25292|
0061b6  f7fffffe          BL       uart_putchar
0061ba  210a              MOVS     r1,#0xa
0061bc  4843              LDR      r0,|L1.25292|
0061be  f7fffffe          BL       uart_putchar
0061c2  210a              MOVS     r1,#0xa
0061c4  4841              LDR      r0,|L1.25292|
0061c6  f7fffffe          BL       uart_putchar
0061ca  210a              MOVS     r1,#0xa
0061cc  483f              LDR      r0,|L1.25292|
0061ce  f7fffffe          BL       uart_putchar
0061d2  210a              MOVS     r1,#0xa
0061d4  483d              LDR      r0,|L1.25292|
0061d6  f7fffffe          BL       uart_putchar
0061da  210a              MOVS     r1,#0xa
0061dc  483b              LDR      r0,|L1.25292|
0061de  f7fffffe          BL       uart_putchar
0061e2  210a              MOVS     r1,#0xa
0061e4  4839              LDR      r0,|L1.25292|
0061e6  f7fffffe          BL       uart_putchar
0061ea  210a              MOVS     r1,#0xa
0061ec  4837              LDR      r0,|L1.25292|
0061ee  f7fffffe          BL       uart_putchar
0061f2  210a              MOVS     r1,#0xa
0061f4  4835              LDR      r0,|L1.25292|
0061f6  f7fffffe          BL       uart_putchar
0061fa  210a              MOVS     r1,#0xa
0061fc  4833              LDR      r0,|L1.25292|
0061fe  f7fffffe          BL       uart_putchar
006202  210a              MOVS     r1,#0xa
006204  4831              LDR      r0,|L1.25292|
006206  f7fffffe          BL       uart_putchar
00620a  210a              MOVS     r1,#0xa
00620c  482f              LDR      r0,|L1.25292|
00620e  f7fffffe          BL       uart_putchar
006212  210a              MOVS     r1,#0xa
006214  482d              LDR      r0,|L1.25292|
006216  f7fffffe          BL       uart_putchar
;;;953    																			while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) ))){}
00621a  bf00              NOP      
                  |L1.25116|
00621c  4939              LDR      r1,|L1.25348|
00621e  482e              LDR      r0,|L1.25304|
006220  f7fffffe          BL       strstr
006224  2800              CMP      r0,#0
006226  d10a              BNE      |L1.25150|
006228  492a              LDR      r1,|L1.25300|
00622a  3108              ADDS     r1,r1,#8
00622c  482a              LDR      r0,|L1.25304|
00622e  f7fffffe          BL       strstr
006232  2800              CMP      r0,#0
006234  d103              BNE      |L1.25150|
006236  482e              LDR      r0,|L1.25328|
006238  6800              LDR      r0,[r0,#0]  ; tout
00623a  2805              CMP      r0,#5
00623c  ddee              BLE      |L1.25116|
                  |L1.25150|
;;;954    																			clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00623e  f7fffffe          BL       clear
;;;955    																			memset(data,0,strlen(data));
006242  4821              LDR      r0,|L1.25288|
006244  f7fffffe          BL       strlen
006248  4601              MOV      r1,r0
00624a  9001              STR      r0,[sp,#4]
00624c  481e              LDR      r0,|L1.25288|
00624e  f7fffffe          BL       __aeabi_memclr
;;;956    																			clear();
006252  f7fffffe          BL       clear
006256  e175              B        |L1.25924|
                  |L1.25176|
;;;957    																		
;;;958    																//	log_it();								
;;;959    																	}else{send_chunk();}													
006258  f7fffffe          BL       send_chunk
00625c  e172              B        |L1.25924|
                  |L1.25182|
;;;960    									//checks for the sd_data available
;;;961    									}
;;;962    									//con1d=strstr(uart_string_gsm,"OK");
;;;963    									else
;;;964    									{
;;;965    											delay(100);
00625e  2064              MOVS     r0,#0x64
006260  f7fffffe          BL       delay
;;;966    											clear();//memset(uart_string_gsm,0,5000);
006264  f7fffffe          BL       clear
;;;967    											memset(at_,0,100);
006268  2164              MOVS     r1,#0x64
00626a  4823              LDR      r0,|L1.25336|
00626c  f7fffffe          BL       __aeabi_memclr
;;;968    											sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
006270  4815              LDR      r0,|L1.25288|
006272  f7fffffe          BL       strlen
006276  1c40              ADDS     r0,r0,#1
006278  4603              MOV      r3,r0
00627a  4a20              LDR      r2,|L1.25340|
00627c  4915              LDR      r1,|L1.25300|
00627e  3144              ADDS     r1,r1,#0x44
006280  9001              STR      r0,[sp,#4]
006282  481d              LDR      r0,|L1.25336|
006284  f7fffffe          BL       __2sprintf
;;;969    											send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
006288  2005              MOVS     r0,#5
00628a  4b12              LDR      r3,|L1.25300|
00628c  3308              ADDS     r3,r3,#8
00628e  461a              MOV      r2,r3
006290  3260              ADDS     r2,r2,#0x60
006292  a11b              ADR      r1,|L1.25344|
006294  9000              STR      r0,[sp,#0]
006296  4818              LDR      r0,|L1.25336|
006298  f7fffffe          BL       send_SD
;;;970    if(strstr(uart_string_gsm,"ERROR")){
00629c  490d              LDR      r1,|L1.25300|
00629e  3108              ADDS     r1,r1,#8
0062a0  480d              LDR      r0,|L1.25304|
0062a2  f7fffffe          BL       strstr
0062a6  2800              CMP      r0,#0
0062a8  d004              BEQ      |L1.25268|
;;;971    drive[0]='C';drive[1]=':';
0062aa  2043              MOVS     r0,#0x43
0062ac  4913              LDR      r1,|L1.25340|
0062ae  7008              STRB     r0,[r1,#0]
0062b0  203a              MOVS     r0,#0x3a
0062b2  7048              STRB     r0,[r1,#1]
                  |L1.25268|
;;;972    }	
;;;973    											clear();	
0062b4  f7fffffe          BL       clear
;;;974    											k2=0;									//string array counter for uart 1
0062b8  2000              MOVS     r0,#0
0062ba  4901              LDR      r1,|L1.25280|
0062bc  6008              STR      r0,[r1,#0]  ; k2
;;;975    											tout=0;	
0062be  e023              B        |L1.25352|
                  |L1.25280|
                          DCD      ||k2||
                  |L1.25284|
                          DCD      k
                  |L1.25288|
                          DCD      data
                  |L1.25292|
                          DCD      0x4006b000
                  |L1.25296|
                          DCD      len
                  |L1.25300|
                          DCD      ||.text||+0x8c4
                  |L1.25304|
                          DCD      uart_string_gsm
                  |L1.25308|
                          DCD      stcond1
                  |L1.25312|
                          DCD      stcond2
                  |L1.25316|
                          DCD      ||.text||+0x1268
                  |L1.25320|
                          DCD      stcond3
                  |L1.25324|
                          DCD      stcond4
                  |L1.25328|
                          DCD      tout
                  |L1.25332|
                          DCD      con1d
                  |L1.25336|
                          DCD      at_
                  |L1.25340|
                          DCD      drive
                  |L1.25344|
006300  3e00              DCB      ">",0
006302  00                DCB      0
006303  00                DCB      0
                  |L1.25348|
                          DCD      ||.text||+0xd3c
                  |L1.25352|
006308  49eb              LDR      r1,|L1.26296|
00630a  6008              STR      r0,[r1,#0]  ; tout
;;;976    											for(k=0;k<strlen(data);k++)
00630c  49eb              LDR      r1,|L1.26300|
00630e  6008              STR      r0,[r1,#0]  ; k
006310  e00d              B        |L1.25390|
                  |L1.25362|
;;;977    											{
;;;978    											uart_putchar(UART1_BASE_PTR, data[k]);//clear();
006312  48eb              LDR      r0,|L1.26304|
006314  49e9              LDR      r1,|L1.26300|
006316  6809              LDR      r1,[r1,#0]  ; k
006318  5c40              LDRB     r0,[r0,r1]
00631a  4601              MOV      r1,r0
00631c  9001              STR      r0,[sp,#4]
00631e  48e9              LDR      r0,|L1.26308|
006320  f7fffffe          BL       uart_putchar
006324  48e5              LDR      r0,|L1.26300|
006326  6800              LDR      r0,[r0,#0]            ;976  ; k
006328  1c40              ADDS     r0,r0,#1              ;976
00632a  49e4              LDR      r1,|L1.26300|
00632c  6008              STR      r0,[r1,#0]            ;976  ; k
                  |L1.25390|
00632e  48e4              LDR      r0,|L1.26304|
006330  f7fffffe          BL       strlen
006334  49e1              LDR      r1,|L1.26300|
006336  6809              LDR      r1,[r1,#0]            ;976  ; k
006338  4288              CMP      r0,r1                 ;976
00633a  d8ea              BHI      |L1.25362|
;;;979    											}	
;;;980    											uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00633c  210a              MOVS     r1,#0xa
00633e  48e1              LDR      r0,|L1.26308|
006340  f7fffffe          BL       uart_putchar
006344  210a              MOVS     r1,#0xa
006346  48df              LDR      r0,|L1.26308|
006348  f7fffffe          BL       uart_putchar
00634c  210a              MOVS     r1,#0xa
00634e  48dd              LDR      r0,|L1.26308|
006350  f7fffffe          BL       uart_putchar
006354  210a              MOVS     r1,#0xa
006356  48db              LDR      r0,|L1.26308|
006358  f7fffffe          BL       uart_putchar
00635c  210a              MOVS     r1,#0xa
00635e  48d9              LDR      r0,|L1.26308|
006360  f7fffffe          BL       uart_putchar
006364  210a              MOVS     r1,#0xa
006366  48d7              LDR      r0,|L1.26308|
006368  f7fffffe          BL       uart_putchar
00636c  210a              MOVS     r1,#0xa
00636e  48d5              LDR      r0,|L1.26308|
006370  f7fffffe          BL       uart_putchar
006374  210a              MOVS     r1,#0xa
006376  48d3              LDR      r0,|L1.26308|
006378  f7fffffe          BL       uart_putchar
00637c  210a              MOVS     r1,#0xa
00637e  48d1              LDR      r0,|L1.26308|
006380  f7fffffe          BL       uart_putchar
006384  210a              MOVS     r1,#0xa
006386  48cf              LDR      r0,|L1.26308|
006388  f7fffffe          BL       uart_putchar
00638c  210a              MOVS     r1,#0xa
00638e  48cd              LDR      r0,|L1.26308|
006390  f7fffffe          BL       uart_putchar
006394  210a              MOVS     r1,#0xa
006396  48cb              LDR      r0,|L1.26308|
006398  f7fffffe          BL       uart_putchar
00639c  210a              MOVS     r1,#0xa
00639e  48c9              LDR      r0,|L1.26308|
0063a0  f7fffffe          BL       uart_putchar
0063a4  210a              MOVS     r1,#0xa
0063a6  48c7              LDR      r0,|L1.26308|
0063a8  f7fffffe          BL       uart_putchar
0063ac  210a              MOVS     r1,#0xa
0063ae  48c5              LDR      r0,|L1.26308|
0063b0  f7fffffe          BL       uart_putchar
0063b4  210a              MOVS     r1,#0xa
0063b6  48c3              LDR      r0,|L1.26308|
0063b8  f7fffffe          BL       uart_putchar
0063bc  210a              MOVS     r1,#0xa
0063be  48c1              LDR      r0,|L1.26308|
0063c0  f7fffffe          BL       uart_putchar
0063c4  210a              MOVS     r1,#0xa
0063c6  48bf              LDR      r0,|L1.26308|
0063c8  f7fffffe          BL       uart_putchar
0063cc  210a              MOVS     r1,#0xa
0063ce  48bd              LDR      r0,|L1.26308|
0063d0  f7fffffe          BL       uart_putchar
0063d4  210a              MOVS     r1,#0xa
0063d6  48bb              LDR      r0,|L1.26308|
0063d8  f7fffffe          BL       uart_putchar
0063dc  210a              MOVS     r1,#0xa
0063de  48b9              LDR      r0,|L1.26308|
0063e0  f7fffffe          BL       uart_putchar
0063e4  210a              MOVS     r1,#0xa
0063e6  48b7              LDR      r0,|L1.26308|
0063e8  f7fffffe          BL       uart_putchar
0063ec  210a              MOVS     r1,#0xa
0063ee  48b5              LDR      r0,|L1.26308|
0063f0  f7fffffe          BL       uart_putchar
0063f4  210a              MOVS     r1,#0xa
0063f6  48b3              LDR      r0,|L1.26308|
0063f8  f7fffffe          BL       uart_putchar
0063fc  210a              MOVS     r1,#0xa
0063fe  48b1              LDR      r0,|L1.26308|
006400  f7fffffe          BL       uart_putchar
006404  210a              MOVS     r1,#0xa
006406  48af              LDR      r0,|L1.26308|
006408  f7fffffe          BL       uart_putchar
00640c  210a              MOVS     r1,#0xa
00640e  48ad              LDR      r0,|L1.26308|
006410  f7fffffe          BL       uart_putchar
006414  210a              MOVS     r1,#0xa
006416  48ab              LDR      r0,|L1.26308|
006418  f7fffffe          BL       uart_putchar
00641c  210a              MOVS     r1,#0xa
00641e  48a9              LDR      r0,|L1.26308|
006420  f7fffffe          BL       uart_putchar
006424  210a              MOVS     r1,#0xa
006426  48a7              LDR      r0,|L1.26308|
006428  f7fffffe          BL       uart_putchar
00642c  210a              MOVS     r1,#0xa
00642e  48a5              LDR      r0,|L1.26308|
006430  f7fffffe          BL       uart_putchar
006434  210a              MOVS     r1,#0xa
006436  48a3              LDR      r0,|L1.26308|
006438  f7fffffe          BL       uart_putchar
00643c  210a              MOVS     r1,#0xa
00643e  48a1              LDR      r0,|L1.26308|
006440  f7fffffe          BL       uart_putchar
006444  210a              MOVS     r1,#0xa
006446  489f              LDR      r0,|L1.26308|
006448  f7fffffe          BL       uart_putchar
00644c  210a              MOVS     r1,#0xa
00644e  489d              LDR      r0,|L1.26308|
006450  f7fffffe          BL       uart_putchar
006454  210a              MOVS     r1,#0xa
006456  489b              LDR      r0,|L1.26308|
006458  f7fffffe          BL       uart_putchar
00645c  210a              MOVS     r1,#0xa
00645e  4899              LDR      r0,|L1.26308|
006460  f7fffffe          BL       uart_putchar
006464  210a              MOVS     r1,#0xa
006466  4897              LDR      r0,|L1.26308|
006468  f7fffffe          BL       uart_putchar
00646c  210a              MOVS     r1,#0xa
00646e  4895              LDR      r0,|L1.26308|
006470  f7fffffe          BL       uart_putchar
006474  210a              MOVS     r1,#0xa
006476  4893              LDR      r0,|L1.26308|
006478  f7fffffe          BL       uart_putchar
00647c  210a              MOVS     r1,#0xa
00647e  4891              LDR      r0,|L1.26308|
006480  f7fffffe          BL       uart_putchar
006484  210a              MOVS     r1,#0xa
006486  488f              LDR      r0,|L1.26308|
006488  f7fffffe          BL       uart_putchar
00648c  210a              MOVS     r1,#0xa
00648e  488d              LDR      r0,|L1.26308|
006490  f7fffffe          BL       uart_putchar
006494  210a              MOVS     r1,#0xa
006496  488b              LDR      r0,|L1.26308|
006498  f7fffffe          BL       uart_putchar
00649c  210a              MOVS     r1,#0xa
00649e  4889              LDR      r0,|L1.26308|
0064a0  f7fffffe          BL       uart_putchar
0064a4  210a              MOVS     r1,#0xa
0064a6  4887              LDR      r0,|L1.26308|
0064a8  f7fffffe          BL       uart_putchar
0064ac  210a              MOVS     r1,#0xa
0064ae  4885              LDR      r0,|L1.26308|
0064b0  f7fffffe          BL       uart_putchar
0064b4  210a              MOVS     r1,#0xa
0064b6  4883              LDR      r0,|L1.26308|
0064b8  f7fffffe          BL       uart_putchar
0064bc  210a              MOVS     r1,#0xa
0064be  4881              LDR      r0,|L1.26308|
0064c0  f7fffffe          BL       uart_putchar
0064c4  210a              MOVS     r1,#0xa
0064c6  487f              LDR      r0,|L1.26308|
0064c8  f7fffffe          BL       uart_putchar
0064cc  210a              MOVS     r1,#0xa
0064ce  487d              LDR      r0,|L1.26308|
0064d0  f7fffffe          BL       uart_putchar
0064d4  210a              MOVS     r1,#0xa
0064d6  487b              LDR      r0,|L1.26308|
0064d8  f7fffffe          BL       uart_putchar
0064dc  210a              MOVS     r1,#0xa
0064de  4879              LDR      r0,|L1.26308|
0064e0  f7fffffe          BL       uart_putchar
0064e4  210a              MOVS     r1,#0xa
0064e6  4877              LDR      r0,|L1.26308|
0064e8  f7fffffe          BL       uart_putchar
0064ec  210a              MOVS     r1,#0xa
0064ee  4875              LDR      r0,|L1.26308|
0064f0  f7fffffe          BL       uart_putchar
0064f4  210a              MOVS     r1,#0xa
0064f6  4873              LDR      r0,|L1.26308|
0064f8  f7fffffe          BL       uart_putchar
0064fc  210a              MOVS     r1,#0xa
0064fe  4871              LDR      r0,|L1.26308|
006500  f7fffffe          BL       uart_putchar
;;;981    											//memset(data,0,1000);
;;;982    											//timer counts to wait for characters in uart 1 									
;;;983    											while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
006504  bf00              NOP      
                  |L1.25862|
006506  4970              LDR      r1,|L1.26312|
006508  4870              LDR      r0,|L1.26316|
00650a  f7fffffe          BL       strstr
00650e  2800              CMP      r0,#0
006510  d109              BNE      |L1.25894|
006512  496f              LDR      r1,|L1.26320|
006514  486d              LDR      r0,|L1.26316|
006516  f7fffffe          BL       strstr
00651a  2800              CMP      r0,#0
00651c  d103              BNE      |L1.25894|
00651e  4866              LDR      r0,|L1.26296|
006520  6800              LDR      r0,[r0,#0]  ; tout
006522  2805              CMP      r0,#5
006524  ddef              BLE      |L1.25862|
                  |L1.25894|
;;;984    											{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;985    											}
;;;986    											clear();//uart_putchar(UART1_BASE_PTR,0x1a);
006526  f7fffffe          BL       clear
;;;987    											memset(data,0,strlen(data));
00652a  4865              LDR      r0,|L1.26304|
00652c  f7fffffe          BL       strlen
006530  4601              MOV      r1,r0
006532  9001              STR      r0,[sp,#4]
006534  4862              LDR      r0,|L1.26304|
006536  f7fffffe          BL       __aeabi_memclr
;;;988    											clear();
00653a  f7fffffe          BL       clear
00653e  e001              B        |L1.25924|
                  |L1.25920|
;;;989    										//log_it();			//otherwize log it					
;;;990    									}
;;;991    } // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;992    else
;;;993    {
;;;994    	send_chunk();
006540  f7fffffe          BL       send_chunk
                  |L1.25924|
006544  f7fefe1a          BL       |L1.20860|
;;;995    }		
;;;996    /******************sleep checker end**********************/		
;;;997    		}
;;;998    /******************while end**********************/		
;;;999    	} 
;;;1000   /******************main end***********************/
;;;1001   }
;;;1002   /********************************************************************/
                          ENDP

                  HardFault_Handler PROC
;;;1009   
;;;1010   void HardFault_Handler()
006548  b510              PUSH     {r4,lr}
;;;1011   {	long ppp=0;
00654a  2400              MOVS     r4,#0
;;;1012   
;;;1013   	RESET_OFF;
00654c  2020              MOVS     r0,#0x20
00654e  4961              LDR      r1,|L1.26324|
006550  6088              STR      r0,[r1,#8]
;;;1014   	RESET_OFF;
006552  6088              STR      r0,[r1,#8]
;;;1015   for(ppp=0;ppp<999999; ppp++);	
006554  bf00              NOP      
006556  e000              B        |L1.25946|
                  |L1.25944|
006558  1c64              ADDS     r4,r4,#1
                  |L1.25946|
00655a  485f              LDR      r0,|L1.26328|
00655c  4284              CMP      r4,r0
00655e  dbfb              BLT      |L1.25944|
;;;1016   	
;;;1017   	RESET_ON;
006560  2020              MOVS     r0,#0x20
006562  495c              LDR      r1,|L1.26324|
006564  6048              STR      r0,[r1,#4]
;;;1018   	RESET_ON;
006566  6048              STR      r0,[r1,#4]
;;;1019   for(ppp=0;ppp<999999; ppp++);
006568  2400              MOVS     r4,#0
00656a  e000              B        |L1.25966|
                  |L1.25964|
00656c  1c64              ADDS     r4,r4,#1
                  |L1.25966|
00656e  485a              LDR      r0,|L1.26328|
006570  4284              CMP      r4,r0
006572  dbfb              BLT      |L1.25964|
;;;1020   
;;;1021   RESET_OFF;
006574  2020              MOVS     r0,#0x20
006576  4957              LDR      r1,|L1.26324|
006578  6088              STR      r0,[r1,#8]
;;;1022   	RESET_OFF;
00657a  6088              STR      r0,[r1,#8]
;;;1023   	delay(100);	
00657c  2064              MOVS     r0,#0x64
00657e  f7fffffe          BL       delay
;;;1024   	RESET_ON;
006582  2020              MOVS     r0,#0x20
006584  4953              LDR      r1,|L1.26324|
006586  6048              STR      r0,[r1,#4]
;;;1025   	RESET_ON;	
006588  6048              STR      r0,[r1,#4]
;;;1026   	delay(100);	
00658a  2064              MOVS     r0,#0x64
00658c  f7fffffe          BL       delay
;;;1027   }
006590  bd10              POP      {r4,pc}
;;;1028   
                          ENDP

                  LPTimer_IRQHandler PROC
;;;1030   
;;;1031    void LPTimer_IRQHandler(void)
006592  b510              PUSH     {r4,lr}
;;;1032   {
;;;1033   lpticks+=1;
006594  4851              LDR      r0,|L1.26332|
006596  6800              LDR      r0,[r0,#0]  ; lpticks
006598  1c40              ADDS     r0,r0,#1
00659a  4950              LDR      r1,|L1.26332|
00659c  6008              STR      r0,[r1,#0]  ; lpticks
;;;1034   //rtcticks++;
;;;1035   	tout++;tout2++;
00659e  4846              LDR      r0,|L1.26296|
0065a0  6800              LDR      r0,[r0,#0]  ; tout
0065a2  1c40              ADDS     r0,r0,#1
0065a4  4944              LDR      r1,|L1.26296|
0065a6  6008              STR      r0,[r1,#0]  ; tout
0065a8  484d              LDR      r0,|L1.26336|
0065aa  6800              LDR      r0,[r0,#0]  ; tout2
0065ac  1c40              ADDS     r0,r0,#1
0065ae  494c              LDR      r1,|L1.26336|
0065b0  6008              STR      r0,[r1,#0]  ; tout2
;;;1036   	rtcticks2++;
0065b2  484c              LDR      r0,|L1.26340|
0065b4  6800              LDR      r0,[r0,#0]  ; rtcticks2
0065b6  1c40              ADDS     r0,r0,#1
0065b8  494a              LDR      r1,|L1.26340|
0065ba  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;1037   	if(sleep_flag == 1){aliveping++;}
0065bc  484a              LDR      r0,|L1.26344|
0065be  6800              LDR      r0,[r0,#0]  ; sleep_flag
0065c0  2801              CMP      r0,#1
0065c2  d104              BNE      |L1.26062|
0065c4  4849              LDR      r0,|L1.26348|
0065c6  6800              LDR      r0,[r0,#0]  ; aliveping
0065c8  1c40              ADDS     r0,r0,#1
0065ca  4948              LDR      r1,|L1.26348|
0065cc  6008              STR      r0,[r1,#0]  ; aliveping
                  |L1.26062|
;;;1038   	if(rtcticks2 > 1600)
0065ce  4845              LDR      r0,|L1.26340|
0065d0  6800              LDR      r0,[r0,#0]  ; rtcticks2
0065d2  2119              MOVS     r1,#0x19
0065d4  0189              LSLS     r1,r1,#6
0065d6  4288              CMP      r0,r1
0065d8  dd10              BLE      |L1.26108|
;;;1039   	{
;;;1040   	RESET_OFF;
0065da  2020              MOVS     r0,#0x20
0065dc  493d              LDR      r1,|L1.26324|
0065de  6088              STR      r0,[r1,#8]
;;;1041   	RESET_OFF;
0065e0  6088              STR      r0,[r1,#8]
;;;1042   	delay(100);	
0065e2  2064              MOVS     r0,#0x64
0065e4  f7fffffe          BL       delay
;;;1043   	RESET_ON;
0065e8  2020              MOVS     r0,#0x20
0065ea  493a              LDR      r1,|L1.26324|
0065ec  6048              STR      r0,[r1,#4]
;;;1044   	RESET_ON;	
0065ee  6048              STR      r0,[r1,#4]
;;;1045   	delay(100);
0065f0  2064              MOVS     r0,#0x64
0065f2  f7fffffe          BL       delay
;;;1046   	rtcticks2 =0;
0065f6  2000              MOVS     r0,#0
0065f8  493a              LDR      r1,|L1.26340|
0065fa  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.26108|
;;;1047   	}
;;;1048   	
;;;1049   	
;;;1050   	
;;;1051   
;;;1052   
;;;1053     LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
0065fc  483c              LDR      r0,|L1.26352|
0065fe  6800              LDR      r0,[r0,#0]
006600  2180              MOVS     r1,#0x80
006602  4308              ORRS     r0,r0,r1
006604  493a              LDR      r1,|L1.26352|
006606  6008              STR      r0,[r1,#0]
;;;1054     LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
006608  20c1              MOVS     r0,#0xc1
00660a  6008              STR      r0,[r1,#0]
;;;1055     
;;;1056   }
00660c  bd10              POP      {r4,pc}
;;;1057   
                          ENDP

                  dtr_sleep PROC
;;;1059   
;;;1060   void dtr_sleep()
00660e  b538              PUSH     {r3-r5,lr}
;;;1061   {
;;;1062   
;;;1063   test2=GPIOB_PDIR;
006610  4830              LDR      r0,|L1.26324|
006612  3840              SUBS     r0,r0,#0x40
006614  6900              LDR      r0,[r0,#0x10]
006616  4937              LDR      r1,|L1.26356|
006618  6008              STR      r0,[r1,#0]  ; test2
;;;1064   memset(at_,0,strlen(at_));
00661a  4837              LDR      r0,|L1.26360|
00661c  f7fffffe          BL       strlen
006620  4604              MOV      r4,r0
006622  4621              MOV      r1,r4
006624  4834              LDR      r0,|L1.26360|
006626  f7fffffe          BL       __aeabi_memclr
;;;1065   sprintf(at_,"\n\n\n GPIOB = %d \n\n\n ",test2);	
00662a  4832              LDR      r0,|L1.26356|
00662c  a133              ADR      r1,|L1.26364|
00662e  6802              LDR      r2,[r0,#0]  ; test2
006630  4831              LDR      r0,|L1.26360|
006632  f7fffffe          BL       __2sprintf
;;;1066   send_modem(at_);
006636  4830              LDR      r0,|L1.26360|
006638  f7fffffe          BL       send_modem
;;;1067   if( test2 == 0 )	
00663c  482d              LDR      r0,|L1.26356|
00663e  6800              LDR      r0,[r0,#0]  ; test2
006640  2800              CMP      r0,#0
006642  d107              BNE      |L1.26196|
;;;1068   {
;;;1069   	sleep_flag=1;	
006644  2001              MOVS     r0,#1
006646  4928              LDR      r1,|L1.26344|
006648  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1070   	DTR_ON;   //sleep
00664a  2080              MOVS     r0,#0x80
00664c  4921              LDR      r1,|L1.26324|
00664e  3140              ADDS     r1,r1,#0x40
006650  6048              STR      r0,[r1,#4]
006652  e02c              B        |L1.26286|
                  |L1.26196|
;;;1071   
;;;1072   }
;;;1073   else
;;;1074   {DTR_OFF;
006654  2080              MOVS     r0,#0x80
006656  491f              LDR      r1,|L1.26324|
006658  3140              ADDS     r1,r1,#0x40
00665a  6088              STR      r0,[r1,#8]
;;;1075   	
;;;1076   	if (sleep_flag != 0  )
00665c  4822              LDR      r0,|L1.26344|
00665e  6800              LDR      r0,[r0,#0]  ; sleep_flag
006660  2800              CMP      r0,#0
006662  d020              BEQ      |L1.26278|
;;;1077   	{
;;;1078   	// wakeup and reset
;;;1079   		sleep_flag=0;
006664  2000              MOVS     r0,#0
006666  4920              LDR      r1,|L1.26344|
006668  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1080       		// not sleep	
;;;1081   //	  HardFault_Handler();
;;;1082   delay(1000);
00666a  207d              MOVS     r0,#0x7d
00666c  00c0              LSLS     r0,r0,#3
00666e  f7fffffe          BL       delay
;;;1083   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
006672  4827              LDR      r0,|L1.26384|
006674  6800              LDR      r0,[r0,#0]  ; tmeout
006676  4b27              LDR      r3,|L1.26388|
006678  4a15              LDR      r2,|L1.26320|
00667a  3260              ADDS     r2,r2,#0x60
00667c  4912              LDR      r1,|L1.26312|
00667e  9000              STR      r0,[sp,#0]
006680  4825              LDR      r0,|L1.26392|
006682  f7fffffe          BL       send_GSM
;;;1084   		
;;;1085   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
006686  4822              LDR      r0,|L1.26384|
006688  6800              LDR      r0,[r0,#0]  ; tmeout
00668a  4b22              LDR      r3,|L1.26388|
00668c  4a10              LDR      r2,|L1.26320|
00668e  3260              ADDS     r2,r2,#0x60
006690  490d              LDR      r1,|L1.26312|
006692  9000              STR      r0,[sp,#0]
006694  a021              ADR      r0,|L1.26396|
006696  f7fffffe          BL       send_GSM
;;;1086   
;;;1087   //send_GSM("\n\nAT+CFUN=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;1088   		
;;;1089   delay(1000);	
00669a  207d              MOVS     r0,#0x7d
00669c  00c0              LSLS     r0,r0,#3
00669e  f7fffffe          BL       delay
;;;1090   clear();	
0066a2  f7fffffe          BL       clear
                  |L1.26278|
;;;1091   	}  
;;;1092   	DTR_OFF;		// not sleep	
0066a6  2080              MOVS     r0,#0x80
0066a8  490a              LDR      r1,|L1.26324|
0066aa  3140              ADDS     r1,r1,#0x40
0066ac  6088              STR      r0,[r1,#8]
                  |L1.26286|
;;;1093   
;;;1094   
;;;1095   
;;;1096   }
;;;1097   
;;;1098   LED_state();LED_state2();
0066ae  f7fffffe          BL       LED_state
0066b2  f7fffffe          BL       LED_state2
;;;1099   }
0066b6  bd38              POP      {r3-r5,pc}
;;;1100   
                          ENDP

                  |L1.26296|
                          DCD      tout
                  |L1.26300|
                          DCD      k
                  |L1.26304|
                          DCD      data
                  |L1.26308|
                          DCD      0x4006b000
                  |L1.26312|
                          DCD      ||.text||+0xd3c
                  |L1.26316|
                          DCD      uart_string_gsm
                  |L1.26320|
                          DCD      ||.text||+0x8cc
                  |L1.26324|
                          DCD      0x400ff080
                  |L1.26328|
                          DCD      0x000f423f
                  |L1.26332|
                          DCD      lpticks
                  |L1.26336|
                          DCD      tout2
                  |L1.26340|
                          DCD      rtcticks2
                  |L1.26344|
                          DCD      sleep_flag
                  |L1.26348|
                          DCD      aliveping
                  |L1.26352|
                          DCD      0x40040000
                  |L1.26356|
                          DCD      test2
                  |L1.26360|
                          DCD      at_
                  |L1.26364|
0066fc  0a0a0a20          DCB      "\n\n\n GPIOB = %d \n\n\n ",0
006700  4750494f
006704  42203d20
006708  2564200a
00670c  0a0a2000
                  |L1.26384|
                          DCD      tmeout
                  |L1.26388|
                          DCD      ||.text||+0x11d4
                  |L1.26392|
                          DCD      ||.text||+0x420c
                  |L1.26396|
00671c  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
006720  2b475356
006724  0d0a00  
006727  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        30
                  latest
                          %        10
                  ignstr
                          %        9
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  uart_string_gps
                          %        3000
                  data2
                          %        300
                  exception
                          %        200
                  sonicvalue
                          %        20
                  sonictemp
                          %        20
                  ||ip||
                          %        100
                  port
                          %        10
                  at_
                          %        100
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  _rtcticks
                          %        10
                  imei
                          %        20
                  sd_data
                          %        1400
                  sonicsensor
                          %        10
                  ||id||
                          %        1000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a41542b          DCB      "\nAT+CMGS=""%s""\r\n",0
000004  434d4753
000008  3d222573
00000c  220d0a00
000010  4552524f          DCB      "ERROR:",0
000014  523a00  
000017  00                DCB      0
000018  4552524f          DCB      "ERROR\r\n",0
00001c  520d0a00
000020  3e00              DCB      ">",0
000022  00                DCB      0
000023  00                DCB      0
000024  2b434d47          DCB      "+CMGS:",0
000028  533a00  
00002b  00                DCB      0
00002c  4f4b00            DCB      "OK",0
00002f  00                DCB      0
000030  0a41542b          DCB      "\nAT+FSCREATE=C:\\IGN.TXT\r\n",0
000034  46534352
000038  45415445
00003c  3d433a5c
000040  49474e2e
000044  5458540d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0
00004c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n",0
000050  2b465357
000054  52495445
000058  3d433a5c
00005c  49474e2e
000060  5458542c
000064  302c362c
000068  31300d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  4f4b0d0a          DCB      "OK\r\n",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  0a494f4e          DCB      "\nION\n\n\n\n",0
00007c  0a0a0a0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
000084  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
000088  46534352
00008c  45415445
000090  3d433a5c
000094  49505f50
000098  4f52542e
00009c  5458540d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",0
0000a8  2b465357
0000ac  52495445
0000b0  3d433a5c
0000b4  49505f50
0000b8  4f52542e
0000bc  5458542c
0000c0  302c2564
0000c4  2c31300d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
0000cc  7c49507c          DCB      "|IP|",0
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  7c504f52          DCB      "|PORT|",0
0000d8  547c00  
0000db  00                DCB      0
0000dc  7c00              DCB      "|",0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4552524f          DCB      "ERROR",0
0000e4  5200    
0000e6  00                DCB      0
0000e7  00                DCB      0
0000e8  524d4300          DCB      "RMC",0
0000ec  47474100          DCB      "GGA",0
0000f0  0d0a0a0a          DCB      "\r\n\n\nAT+GSN\r\n",0
0000f4  41542b47
0000f8  534e0d0a
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
000100  0d0a0d0a          DCB      "\r\n\r\nAT+CBC\r\n",0
000104  41542b43
000108  42430d0a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
000110  256400            DCB      "%d",0
000113  00                DCB      0
000114  256600            DCB      "%f",0
000117  00                DCB      0
000118  2c00              DCB      ",",0
00011a  00                DCB      0
00011b  00                DCB      0
00011c  24477847          DCB      "$$GxGGA",0
000120  474100  
000123  00                DCB      0
000124  2c244778          DCB      ",$$GxRMC",0
000128  524d4300
00012c  2c53533d          DCB      ",SS=",0
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
000134  2c41433d          DCB      ",AC=",0
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
00013c  2c493d00          DCB      ",I=",0
000140  25642c00          DCB      "%d,",0
000144  2c42522a          DCB      ",BR*",0
000148  00      
000149  00                DCB      0
00014a  00                DCB      0
00014b  00                DCB      0
00014c  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
000150  46534352
000154  45415445
000158  3d433a5c
00015c  494e5445
000160  5256414c
000164  2e545854
000168  0d0a00  
00016b  00                DCB      0
00016c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",0
000170  2b465357
000174  52495445
000178  3d433a5c
00017c  494e5445
000180  5256414c
000184  2e545854
000188  2c302c25
00018c  642c3130
000190  0d0a00  
000193  00                DCB      0
000194  7c494e54          DCB      "|INTERVAL|",0
000198  45525641
00019c  4c7c00  
00019f  00                DCB      0
0001a0  0a41542b          DCB      "\nAT+FSCREATE=C:\\APN.TXT\r\n",0
0001a4  46534352
0001a8  45415445
0001ac  3d433a5c
0001b0  41504e2e
0001b4  5458540d
0001b8  0a00    
0001ba  00                DCB      0
0001bb  00                DCB      0
0001bc  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",0
0001c0  2b465357
0001c4  52495445
0001c8  3d433a5c
0001cc  41504e2e
0001d0  5458542c
0001d4  302c2564
0001d8  2c31300d
0001dc  0a00    
0001de  00                DCB      0
0001df  00                DCB      0
0001e0  0a0a4154          DCB      "\n\nAT\r\n",0
0001e4  0d0a00  
0001e7  00                DCB      0
0001e8  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
0001ec  2b475356
0001f0  0d0a00  
0001f3  00                DCB      0
0001f4  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
0001f8  2b434d47
0001fc  463d310a
000200  0a00    
000202  00                DCB      0
000203  00                DCB      0
000204  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
000208  2b435343
00020c  413f0d0a
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
000214  0d0a4154          DCB      "\r\nAT+CMGR=1\r\n",0
000218  2b434d47
00021c  523d310d
000220  0a00    
000222  00                DCB      0
000223  00                DCB      0
000224  4f574e45          DCB      "OWNER",0
000228  5200    
00022a  00                DCB      0
00022b  00                DCB      0
00022c  4c4f4341          DCB      "LOCATION",0
000230  54494f4e
000234  00      
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0
000238  494e5445          DCB      "INTERVAL_",0
00023c  5256414c
000240  5f00    
000242  00                DCB      0
000243  00                DCB      0
000244  53544152          DCB      "START",0
000248  5400    
00024a  00                DCB      0
00024b  00                DCB      0
00024c  4f574e45          DCB      "OWNER1",0
000250  523100  
000253  00                DCB      0
000254  4f574e45          DCB      "OWNER2",0
000258  523200  
00025b  00                DCB      0
00025c  4f574e45          DCB      "OWNER3",0
000260  523300  
000263  00                DCB      0
000264  44454255          DCB      "DEBUG",0
000268  4700    
00026a  00                DCB      0
00026b  00                DCB      0
00026c  52455345          DCB      "RESET",0
000270  5400    
000272  00                DCB      0
000273  00                DCB      0
000274  495000            DCB      "IP",0
000277  00                DCB      0
000278  53554f57          DCB      "SUOWNER",0
00027c  4e455200
000280  534f574e          DCB      "SOWNER",0
000284  455200  
000287  00                DCB      0
000288  49474e49          DCB      "IGNITION ON",0
00028c  54494f4e
000290  204f4e00
000294  49474e49          DCB      "IGNITION OFF",0
000298  54494f4e
00029c  204f4646
0002a0  00      
0002a1  00                DCB      0
0002a2  00                DCB      0
0002a3  00                DCB      0
0002a4  49474e53          DCB      "IGNSTAT",0
0002a8  54415400
0002ac  0a546865          DCB      "\nThere is an Emergency please help:\nCoordinates:%sN,%"
0002b0  72652069
0002b4  7320616e
0002b8  20456d65
0002bc  7267656e
0002c0  63792070
0002c4  6c656173
0002c8  65206865
0002cc  6c703a0a
0002d0  436f6f72
0002d4  64696e61
0002d8  7465733a
0002dc  25734e2c
0002e0  25      
0002e1  73450a68          DCB      "sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&o"
0002e5  74747073
0002e9  3a2f2f77
0002ed  77772e67
0002f1  6f6f676c
0002f5  652e636f
0002f9  6d2f7365
0002fd  61726368
000301  3f713d25
000305  73256332
000309  43257326
00030d  69653d75
000311  74662d38
000315  266f    
000317  653d7574          DCB      "e=utf-8\n",0
00031b  662d380a
00031f  00      
000320  0d0a4154          DCB      "\r\nAT+CPBR=1\r\n",0
000324  2b435042
000328  523d310d
00032c  0a00    
00032e  00                DCB      0
00032f  00                DCB      0
000330  0d0a4154          DCB      "\r\nAT+CPBR=2\r\n",0
000334  2b435042
000338  523d320d
00033c  0a00    
00033e  00                DCB      0
00033f  00                DCB      0
000340  0a436f6f          DCB      "\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://"
000344  7264696e
000348  61746573
00034c  203a2025
000350  73204e2c
000354  20257320
000358  450a5370
00035c  65656420
000360  3a202573
000364  206b6d70
000368  680a0a68
00036c  74747073
000370  3a2f2f  
000373  7777772e          DCB      "www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",0
000377  676f6f67
00037b  6c652e63
00037f  6f6d2f73
000383  65617263
000387  683f713d
00038b  25732563
00038f  32432573
000393  2669653d
000397  7574662d
00039b  38266f65
00039f  3d757466
0003a3  2d380a00
0003a7  00                DCB      0
0003a8  0d0a4154          DCB      "\r\nAT+CMGD=1,4\r\n",0
0003ac  2b434d47
0003b0  443d312c
0003b4  340d0a00
0003b8  257300            DCB      "%s",0
0003bb  00                DCB      0
0003bc  0a41542b          DCB      "\nAT+FSCREATE=D:\\LOG.TXT\r\n",0
0003c0  46534352
0003c4  45415445
0003c8  3d443a5c
0003cc  4c4f472e
0003d0  5458540d
0003d4  0a00    
0003d6  00                DCB      0
0003d7  00                DCB      0
0003d8  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
0003dc  46534352
0003e0  45415445
0003e4  3d433a5c
0003e8  4c4f472e
0003ec  5458540d
0003f0  0a00    
0003f2  00                DCB      0
0003f3  00                DCB      0
0003f4  72756472          DCB      "rudra.jellyfishtele.com",0
0003f8  612e6a65
0003fc  6c6c7966
000400  69736874
000404  656c652e
000408  636f6d00
00040c  35353535          DCB      "5555",0
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
000414  3500              DCB      "5",0
000416  00                DCB      0
000417  00                DCB      0
000418  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n\r\n",0
00041c  542b434d
000420  47443d31
000424  2c340d0a
000428  0d0a00  
00042b  00                DCB      0
00042c  0a00              DCB      "\n",0
00042e  00                DCB      0
00042f  00                DCB      0
000430  43480a00          DCB      "CH\n",0
000434  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
000438  2b465357
00043c  52495445
000440  3d25735c
000444  4c4f472e
000448  5458542c
00044c  312c2564
000450  2c31300a
000454  0a00    
000456  00                DCB      0
000457  00                DCB      0
000458  0a0a2041          DCB      "\n\n AT+CFUN=1,1\r\n",0
00045c  542b4346
000460  554e3d31
000464  2c310d0a
000468  00      
000469  00                DCB      0
00046a  00                DCB      0
00046b  00                DCB      0
00046c  0d0d0a41          DCB      "\r\r\nAT+CMGD=1,4\r\n\n\n\n\n",0
000470  542b434d
000474  47443d31
000478  2c340d0a
00047c  0a0a0a0a
000480  00      
000481  00                DCB      0
000482  00                DCB      0
000483  00                DCB      0
000484  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
000488  2b435042
00048c  533d2253
000490  4d220d0a
000494  00      
000495  00                DCB      0
000496  00                DCB      0
000497  00                DCB      0
000498  0d0a4154          DCB      "\r\nAT+CPBW=1\r\r\n\n",0
00049c  2b435042
0004a0  573d310d
0004a4  0d0a0a00
0004a8  0d0a4154          DCB      "\r\nAT+CPBW=1,""%s"",129,""OWNER1""\r\n",0
0004ac  2b435042
0004b0  573d312c
0004b4  22257322
0004b8  2c313239
0004bc  2c224f57
0004c0  4e455231
0004c4  220d0a00
0004c8  0a0a4154          DCB      "\n\nAT+CPBS=""ME""\r\n",0
0004cc  2b435042
0004d0  533d224d
0004d4  45220d0a
0004d8  00      
0004d9  00                DCB      0
0004da  00                DCB      0
0004db  00                DCB      0
0004dc  0d0a4154          DCB      "\r\nAT+CPBW=2\r\r\n\n",0
0004e0  2b435042
0004e4  573d320d
0004e8  0d0a0a00
0004ec  0d0a4154          DCB      "\r\nAT+CPBW=2,""%s"",129,""OWNER2""\r\n",0
0004f0  2b435042
0004f4  573d322c
0004f8  22257322
0004fc  2c313239
000500  2c224f57
000504  4e455232
000508  220d0a00
00050c  0d0a4154          DCB      "\r\nAT+CPBW=3\r\r\n\n",0
000510  2b435042
000514  573d330d
000518  0d0a0a00
00051c  0d0a4154          DCB      "\r\nAT+CPBW=3,""%s"",129,""OWNER3""\r\n",0
000520  2b435042
000524  573d332c
000528  22257322
00052c  2c313239
000530  2c224f57
000534  4e455233
000538  220d0a00
00053c  0d0a4154          DCB      "\r\nAT+CPBW=4\r\r\n\n",0
000540  2b435042
000544  573d340d
000548  0d0a0a00
00054c  0d0a4154          DCB      "\r\nAT+CPBW=4,""%s"",129,""SOWNER""\r\n",0
000550  2b435042
000554  573d342c
000558  22257322
00055c  2c313239
000560  2c22534f
000564  574e4552
000568  220d0a00
00056c  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n",0
000570  542b434d
000574  47443d31
000578  2c340d0a
00057c  00      
00057d  00                DCB      0
00057e  00                DCB      0
00057f  00                DCB      0
000580  2c2000            DCB      ", ",0
000583  00                DCB      0
000584  2c202447          DCB      ", $$GxRMC",0
000588  78524d43
00058c  00      
00058d  00                DCB      0
00058e  00                DCB      0
00058f  00                DCB      0
000590  0d0a0d0a          DCB      "\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",0
000594  41542b46
000598  53464c53
00059c  495a453d
0005a0  25735c4c
0005a4  4f472e54
0005a8  58540d0a
0005ac  00      
0005ad  00                DCB      0
0005ae  00                DCB      0
0005af  00                DCB      0
0005b0  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>          \r\n"
0005b4  20202020
0005b8  20202020
0005bc  20202020
0005c0  20203c25
0005c4  643e2020
0005c8  203c2564
0005cc  3e202020
0005d0  3c3d2564
0005d4  3e202020
0005d8  20202020
0005dc  2020200d
0005e0  0a      
0005e1  0d0a00            DCB      "\r\n",0
0005e4  0d0a0d0a          DCB      "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",0
0005e8  41542b46
0005ec  53524541
0005f0  443d2573
0005f4  5c4c4f47
0005f8  2e545854
0005fc  2c312c31
000600  3130302c
000604  25640d0a
000608  00      
000609  00                DCB      0
00060a  00                DCB      0
00060b  00                DCB      0
00060c  53454e44          DCB      "SEND OK",0
000610  204f4b00
000614  4641494c          DCB      "FAIL",0
000618  00      
000619  00                DCB      0
00061a  00                DCB      0
00061b  00                DCB      0
00061c  44454143          DCB      "DEACT",0
000620  5400    
000622  00                DCB      0
000623  00                DCB      0
000624  65786365          DCB      "exception : COMPARED RESPONCES IN THE DATA\n\n\n\n",0
000628  7074696f
00062c  6e203a20
000630  434f4d50
000634  41524544
000638  20524553
00063c  504f4e43
000640  45532049
000644  4e205448
000648  45204441
00064c  54410a0a
000650  0a0a00  
000653  00                DCB      0
000654  434f4e4e          DCB      "CONNECT",0
000658  45435400
00065c  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
000660  2b434950
000664  53454e44
000668  0d0a00  
00066b  00                DCB      0
00066c  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
000670  2b434655
000674  4e3d300d
000678  0d0a0a00
00067c  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
000680  494e5345
000684  52544544
000688  0d0a4f4b
00068c  00      
00068d  00                DCB      0
00068e  00                DCB      0
00068f  00                DCB      0
000690  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000694  2b434655
000698  4e3d310d
00069c  0a00    
00069e  00                DCB      0
00069f  00                DCB      0
0006a0  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
0006a4  2b434950
0006a8  53485554
0006ac  0d0a00  
0006af  00                DCB      0
0006b0  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
0006b4  2b435354
0006b8  543d2225
0006bc  73220d0a
0006c0  00      
0006c1  00                DCB      0
0006c2  00                DCB      0
0006c3  00                DCB      0
0006c4  0d0a4154          DCB      "\r\nAT+CIICR\r\r\n",0
0006c8  2b434949
0006cc  43520d0d
0006d0  0a00    
0006d2  00                DCB      0
0006d3  00                DCB      0
0006d4  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
0006d8  43494653
0006dc  520d0d0a
0006e0  00      
0006e1  00                DCB      0
0006e2  00                DCB      0
0006e3  00                DCB      0
0006e4  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
0006e8  2b434950
0006ec  53544152
0006f0  543d2254
0006f4  4350222c
0006f8  22257322
0006fc  2c222573
000700  220d0a00
000704  434f4e4e          DCB      "CONNECT FAIL",0
000708  45435420
00070c  4641494c
000710  00      
000711  00                DCB      0
000712  00                DCB      0
000713  00                DCB      0
000714  0d0a4154          DCB      "\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",0
000718  2b465343
00071c  52454154
000720  453d2573
000724  5c4c4f47
000728  2e545854
00072c  0d0a00  
00072f  00                DCB      0
000730  0a41542b          DCB      "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n",0
000734  46535245
000738  41443d43
00073c  3a5c4150
000740  4e2e5458
000744  542c302c
000748  3130302c
00074c  310d0a00
000750  0a41542b          DCB      "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n",0
000754  46535245
000758  41443d43
00075c  3a5c4947
000760  4e2e5458
000764  542c302c
000768  3130302c
00076c  310d0a00
000770  494f4e00          DCB      "ION",0
000774  494f4646          DCB      "IOFF",0
000778  00      
000779  00                DCB      0
00077a  00                DCB      0
00077b  00                DCB      0
00077c  0a41542b          DCB      "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n",0
000780  46535245
000784  41443d43
000788  3a5c4355
00078c  52534f52
000790  2e545854
000794  2c302c31
000798  30302c31
00079c  0d0a00  
00079f  00                DCB      0
0007a0  0a494f46          DCB      "\nIOFF\n\n\n\n",0
0007a4  460a0a0a
0007a8  0a00    
0007aa  00                DCB      0
0007ab  00                DCB      0
0007ac  0a41542b          DCB      "\nAT+FSCREATE=C:\\CURSOR.TXT\r\n",0
0007b0  46534352
0007b4  45415445
0007b8  3d433a5c
0007bc  43555253
0007c0  4f522e54
0007c4  58540d0a
0007c8  00      
0007c9  00                DCB      0
0007ca  00                DCB      0
0007cb  00                DCB      0
0007cc  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n",0
0007d0  2b465357
0007d4  52495445
0007d8  3d433a5c
0007dc  43555253
0007e0  4f522e54
0007e4  58542c30
0007e8  2c35302c
0007ec  31300d0a
0007f0  00      
0007f1  00                DCB      0
0007f2  00                DCB      0
0007f3  00                DCB      0
0007f4  0a2c256c          DCB      "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
0007f8  642c256c
0007fc  642c256c
000800  642c0a0a
000804  0a0a0a0a
000808  0a0a0a0a
00080c  0a0a0a0a
000810  0a0a0a0a
000814  0a0a    
000816  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
00081a  0a0a0a0a
00081e  0a0a0a0a
000822  0a0a0a0a
000826  0a0a0a0a
00082a  0a0a0a0a
00082e  0a0a0a0a
000832  0a0a00            DCB      "\n\n",0
000835  00                DCB      0
000836  00                DCB      0
000837  00                DCB      0
000838  0a41542b          DCB      "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n",0
00083c  46535245
000840  41443d43
000844  3a5c4950
000848  5f504f52
00084c  542e5458
000850  542c302c
000854  3130302c
000858  310d0a00
00085c  0a41542b          DCB      "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n",0
000860  46535245
000864  41443d43
000868  3a5c494e
00086c  54455256
000870  414c2e54
000874  58542c30
000878  2c313030
00087c  2c310d0a
000880  00      

                          AREA ||.data||, DATA, ALIGN=3

                  cond200
                          DCD      0x00000000
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  tout
                          DCD      0x00000000
                  tout2
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  temp
                          DCD      0x00000000
                  flagch
                          DCD      0x00000000
                  cond121
000028  00000000          DCB      0x00,0x00,0x00,0x00
                  cond122
                          DCD      0x00000000
                  cond123
                          DCD      0x00000000
                  cond124
                          DCD      0x00000000
                  len
                          DCD      0x00000000
                  cond
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                  con1d
                          DCD      0x00000000
                  stcond1
                          DCD      0x00000000
                  stcond2
                          DCD      0x00000000
                  stcond3
                          DCD      0x00000000
                  stcond4
                          DCD      0x00000000
                  time111
                          DCD      0x00000000
                  timeout222
                          DCD      0x00000000
                  qweq
                          DCD      0x00000000
                  i11
                          DCD      0x00000000
                  j11
                          DCD      0x00000000
                  temp11
                          DCD      0x00000000
                  ||sz1||
                          DCD      0x00000000
                  ||sz2||
                          DCD      0x00000000
                  send_SOS
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  stateCount
00007c  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  e
                          DCD      0x00000000
                  adcsa
                          DCD      0x00000000
                  adcin
                          DCD      0x00000000
                  adcsample
                          DCD      0x00000000
                  fuel
                          DCD      0x00000000
                  fuelstr
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
                  ||rez||
0000a8  00000000          DCFS     0x00000000 ; 0
                  fact
0000ac  3f800000          DCFS     0x3f800000 ; 1
                  d
                          DCD      0x00000000
                  point_seen
                          DCD      0x00000000
                  cond201
                          DCD      0x00000000
                  cond1
                          DCD      0x00000000
                  cond2
                          DCD      0x00000000
                  cond3
                          DCD      0x00000000
                  cond4
                          DCD      0x00000000
                  cond5
                          DCD      0x00000000
                  cond6
                          DCD      0x00000000
                  cond7
                          DCD      0x00000000
                  cond8
                          DCD      0x00000000
                  cond9
                          DCD      0x00000000
                  cond10
                          DCD      0x00000000
                  cond11
                          DCD      0x00000000
                  cond12
                          DCD      0x00000000
                  cond13
                          DCD      0x00000000
                  cond14
                          DCD      0x00000000
                  cond15
                          DCD      0x00000000
                  ass
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  ||fsz||
                          DCD      0x00000000
                  log0
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  qwe
                          DCD      0x00000000
                  ||k5||
                          DCD      0x00000000
                  enters
                          DCD      0x00000000
                  cursorvaluepr
                          DCD      0x00000000
                  cursorvaluene
                          DCD      0x00000000
                  ||q1||
                          DCD      0x00000000
                  ||q2||
                          DCD      0x00000000
                  ||q3||
                          DCD      0x00000000
                  ||q4||
                          DCD      0x00000000
                  cntendl
                          DCD      0x00000000
                  prev
                          %        8
                  ||iz||
                          DCD      0x00000000
                  a
                          %        8
                  b
                          %        8
                  c
                          %        8
                  ||hh||
                          DCD      0x00000000
                  mm1
                          DCD      0x00000000
                  mm2
                          DCD      0x00000000
                          DCD      0x00000000
                  ||a1||
                          %        8
                  ||b1||
                          %        8
                  ||c1||
                          %        8
                  hh11
                          %        8
                  mm11
                          %        8
                  mm22
                          %        8
                  logged
                          DCD      0x00000000
                  check
                          DCD      0x00000000
                  stcond5
                          DCD      0x00000000
                  acstr
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
                  breach
                          DCD      0x00000000
                  aliveping
                          DCD      0x00000000
                  sleep_flag
                          DCD      0x00000000
                  tmeout
                          DCD      0x00000006
                  int_erval
                          DCD      0x00000001
                  drive
                          DCD      0x00000000
0001c0  00                DCB      0x00
                  apn
0001c1  697361            DCB      0x69,0x73,0x61
0001c4  66650000          DCB      0x66,0x65,0x00,0x00
                          %        16
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
                  speed
0001dc  00000000          DCFS     0x00000000 ; 0
                  lpticks
                          DCD      0x00000000
                  voltagecbc
                          DCD      0x00000000
                  ||csq||
                          DCD      0x00000000
                  rtcticks
                          DCD      0x00000000
                  rtcticks2
                          DCD      0x00000000
                  imeiinc
                          DCD      0x00000000
                  ticks_ch
0001f8  00                DCB      0x00
                  save_rtcticks
0001f9  00                DCB      0x00
                  velocity
0001fa  0000              DCB      0x00,0x00
0001fc  000000            DCB      0x00,0x00,0x00
                  interval
0001ff  00                DCB      0x00
                          DCD      0x00000000
                  timeout
                          DCD      0x00000000
                  ||pr||
000208  00000000          DCFS     0x00000000 ; 0
                  ||la||
00020c  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
000224  00                DCB      0x00
                  ringflag
000225  00                DCB      0x00
                  lptmr_interrupt
000226  0000              DCB      0x00,0x00
                  time52
                          DCD      0x0000000f
                  cond277
                          DCD      0x00000000
                  cond20077
                          DCD      0x00000000
                  ||sz||
                          DCD      0x00000000
                  ||cn||
                          DCD      0x00000000
                  ||res||
                          DCD      0x00000000
                  uart0ptr
                          DCD      0x00000000
                  test2
                          DCD      0x00000000
                  sonicvaluedecimal
                          DCD      0x00000000

                          AREA ||i.clear||, COMGROUP=clear, CODE, READONLY, ALIGN=2

                  clear PROC
;;;1415   	
;;;1416   __inline void clear()
000000  4808              LDR      r0,|L18.36|
;;;1417   {
;;;1418     if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7900              LDRB     r0,[r0,#4]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L18.20|
;;;1419       {
;;;1420         temp = UART_D_REG(UART1_BASE_PTR);
00000c  4805              LDR      r0,|L18.36|
00000e  79c0              LDRB     r0,[r0,#7]
000010  4905              LDR      r1,|L18.40|
000012  6008              STR      r0,[r1,#0]  ; temp
                  |L18.20|
;;;1421   		}
;;;1422   		
;;;1423   		UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000014  4803              LDR      r0,|L18.36|
000016  7900              LDRB     r0,[r0,#4]
000018  2118              MOVS     r1,#0x18
00001a  4308              ORRS     r0,r0,r1
00001c  4901              LDR      r1,|L18.36|
00001e  7108              STRB     r0,[r1,#4]
;;;1424   }	
000020  4770              BX       lr
;;;1425   
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0x4006b000
                  |L18.40|
                          DCD      temp

                          AREA ||i.delay||, COMGROUP=delay, CODE, READONLY, ALIGN=2

                  delay PROC
;;;81     /*************************** delay*****************************************/
;;;82     __inline void delay(int32 delaytime)
000000  e00d              B        |L25.30|
                  |L25.2|
;;;83     {
;;;84      while(delaytime--)
;;;85         {for(i=2000;i>0;i--)
000002  217d              MOVS     r1,#0x7d
000004  0109              LSLS     r1,r1,#4
000006  4a08              LDR      r2,|L25.40|
000008  6011              STR      r1,[r2,#0]  ; i
00000a  e004              B        |L25.22|
                  |L25.12|
00000c  4906              LDR      r1,|L25.40|
00000e  6809              LDR      r1,[r1,#0]  ; i
000010  1e49              SUBS     r1,r1,#1
000012  4a05              LDR      r2,|L25.40|
000014  6011              STR      r1,[r2,#0]  ; i
                  |L25.22|
000016  4904              LDR      r1,|L25.40|
000018  6809              LDR      r1,[r1,#0]  ; i
00001a  2900              CMP      r1,#0
00001c  dcf6              BGT      |L25.12|
                  |L25.30|
00001e  4601              MOV      r1,r0                 ;84
000020  1e40              SUBS     r0,r0,#1              ;84
000022  2900              CMP      r1,#0                 ;84
000024  d1ed              BNE      |L25.2|
;;;86     			{	
;;;87     			}			// about 1 ms
;;;88         }
;;;89     }
000026  4770              BX       lr
;;;90      void delay2(int delaytime)
                          ENDP

                  |L25.40|
                          DCD      i

                          AREA ||i.send_modem||, COMGROUP=send_modem, CODE, READONLY, ALIGN=2

                  send_modem PROC
;;;1391   
;;;1392   __inline void send_modem(char ch[])
000000  b570              PUSH     {r4-r6,lr}
;;;1393   	{	
000002  4605              MOV      r5,r0
;;;1394   						unsigned char i20=0;
000004  2400              MOVS     r4,#0
;;;1395   						for(i20=0;i20<strlen(ch);i20++)
000006  bf00              NOP      
000008  e005              B        |L32.22|
                  |L32.10|
;;;1396   						{
;;;1397   							uart_putchar(UART1_BASE_PTR, ch[i20]);//clear();
00000a  5d29              LDRB     r1,[r5,r4]
00000c  4805              LDR      r0,|L32.36|
00000e  f7fffffe          BL       uart_putchar
000012  1c60              ADDS     r0,r4,#1              ;1395
000014  b2c4              UXTB     r4,r0                 ;1395
                  |L32.22|
000016  4628              MOV      r0,r5                 ;1395
000018  f7fffffe          BL       strlen
00001c  42a0              CMP      r0,r4                 ;1395
00001e  d8f4              BHI      |L32.10|
;;;1398   						}
;;;1399   						
;;;1400   	}
000020  bd70              POP      {r4-r6,pc}
;;;1401   
                          ENDP

000022  0000              DCW      0x0000
                  |L32.36|
                          DCD      0x4006b000

                          AREA ||i.send_GSM||, COMGROUP=send_GSM, CODE, READONLY, ALIGN=2

                  send_GSM PROC
;;;1437   
;;;1438   __inline void send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1439   {	 
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;1440   
;;;1441   		//uart_putchar(UART1_BASE_PTR,0xA);
;;;1442   		//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1443   	clear();
00000c  f7fffffe          BL       clear
;;;1444   	tout=0;
000010  2000              MOVS     r0,#0
000012  4932              LDR      r1,|L39.220|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;1445   //	qwe=strlen(uart_string_gsm);
;;;1446   		memset(uart_string_gsm,0,5000);
000016  4932              LDR      r1,|L39.224|
000018  4832              LDR      r0,|L39.228|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1447   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4931              LDR      r1,|L39.232|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1448   	 						//timer counts to wait for characters in uart 1 
;;;1449   		clear();
000024  f7fffffe          BL       clear
;;;1450   		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;1451   		uart_putchar(UART1_BASE_PTR,'\n');	uart_putchar(UART1_BASE_PTR,'\n');	
00002e  210a              MOVS     r1,#0xa
000030  482e              LDR      r0,|L39.236|
000032  f7fffffe          BL       uart_putchar
000036  210a              MOVS     r1,#0xa
000038  482c              LDR      r0,|L39.236|
00003a  f7fffffe          BL       uart_putchar
;;;1452   	delay(10);
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       delay
;;;1453   //	uart_putchar(UART1_BASE_PTR,'\r');
;;;1454   	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1455   		do
000044  bf00              NOP      
                  |L39.70|
;;;1456   		{
;;;1457   			
;;;1458   //					time111--;
;;;1459   //				  timeout222--;
;;;1460   
;;;1461   			
;;;1462   	cond122=strstr(uart_string_gsm, responseA);
000046  4827              LDR      r0,|L39.228|
000048  9902              LDR      r1,[sp,#8]
00004a  f7fffffe          BL       strstr
00004e  4928              LDR      r1,|L39.240|
000050  6008              STR      r0,[r1,#0]  ; cond122
;;;1463   	cond123=strstr(uart_string_gsm, responseB);
000052  4621              MOV      r1,r4
000054  4823              LDR      r0,|L39.228|
000056  f7fffffe          BL       strstr
00005a  4926              LDR      r1,|L39.244|
00005c  6008              STR      r0,[r1,#0]  ; cond123
;;;1464     cond124=strstr(uart_string_gsm, responseC);
00005e  4629              MOV      r1,r5
000060  4820              LDR      r0,|L39.228|
000062  f7fffffe          BL       strstr
000066  4924              LDR      r1,|L39.248|
000068  6008              STR      r0,[r1,#0]  ; cond124
;;;1465   	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
00006a  4821              LDR      r0,|L39.240|
00006c  6800              LDR      r0,[r0,#0]  ; cond122
00006e  2800              CMP      r0,#0
000070  d10b              BNE      |L39.138|
000072  4820              LDR      r0,|L39.244|
000074  6800              LDR      r0,[r0,#0]  ; cond123
000076  2800              CMP      r0,#0
000078  d107              BNE      |L39.138|
00007a  4608              MOV      r0,r1
00007c  6800              LDR      r0,[r0,#0]  ; cond124
00007e  2800              CMP      r0,#0
000080  d103              BNE      |L39.138|
000082  4816              LDR      r0,|L39.220|
000084  6800              LDR      r0,[r0,#0]  ; tout
000086  42b0              CMP      r0,r6
000088  dd01              BLE      |L39.142|
                  |L39.138|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L39.144|
                  |L39.142|
00008e  2000              MOVS     r0,#0
                  |L39.144|
000090  491a              LDR      r1,|L39.252|
000092  7008              STRB     r0,[r1,#0]
;;;1466   			
;;;1467   		}while (!cond121);
000094  4608              MOV      r0,r1
000096  7800              LDRB     r0,[r0,#0]  ; cond121
000098  2800              CMP      r0,#0
00009a  d0d4              BEQ      |L39.70|
;;;1468   		clear();
00009c  f7fffffe          BL       clear
;;;1469   		if(tout>timeout){
0000a0  480e              LDR      r0,|L39.220|
0000a2  6800              LDR      r0,[r0,#0]  ; tout
0000a4  42b0              CMP      r0,r6
0000a6  dd17              BLE      |L39.216|
;;;1470   			uart_putchar(UART1_BASE_PTR,'\r');
0000a8  210d              MOVS     r1,#0xd
0000aa  4810              LDR      r0,|L39.236|
0000ac  f7fffffe          BL       uart_putchar
;;;1471   		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000b0  210a              MOVS     r1,#0xa
0000b2  480e              LDR      r0,|L39.236|
0000b4  f7fffffe          BL       uart_putchar
0000b8  211a              MOVS     r1,#0x1a
0000ba  480c              LDR      r0,|L39.236|
0000bc  f7fffffe          BL       uart_putchar
;;;1472   		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000c0  211a              MOVS     r1,#0x1a
0000c2  480a              LDR      r0,|L39.236|
0000c4  f7fffffe          BL       uart_putchar
0000c8  210d              MOVS     r1,#0xd
0000ca  4808              LDR      r0,|L39.236|
0000cc  f7fffffe          BL       uart_putchar
;;;1473   		uart_putchar(UART1_BASE_PTR,'\n');}
0000d0  210a              MOVS     r1,#0xa
0000d2  4806              LDR      r0,|L39.236|
0000d4  f7fffffe          BL       uart_putchar
                  |L39.216|
;;;1474   		//return;
;;;1475   //		return uart_string_gsm;
;;;1476   
;;;1477   		
;;;1478   
;;;1479   
;;;1480   }
0000d8  b005              ADD      sp,sp,#0x14
0000da  bdf0              POP      {r4-r7,pc}
;;;1481   
                          ENDP

                  |L39.220|
                          DCD      tout
                  |L39.224|
                          DCD      0x00001388
                  |L39.228|
                          DCD      uart_string_gsm
                  |L39.232|
                          DCD      ||k2||
                  |L39.236|
                          DCD      0x4006b000
                  |L39.240|
                          DCD      cond122
                  |L39.244|
                          DCD      cond123
                  |L39.248|
                          DCD      cond124
                  |L39.252|
                          DCD      cond121

                          AREA ||i.send_MSG||, COMGROUP=send_MSG, CODE, READONLY, ALIGN=2

                  send_MSG PROC
;;;1483   
;;;1484   __inline char * send_MSG(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1485   {	
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;1486   		qwe=strlen(uart_string_gsm);
00000a  4829              LDR      r0,|L46.176|
00000c  f7fffffe          BL       strlen
000010  4928              LDR      r1,|L46.180|
000012  6008              STR      r0,[r1,#0]  ; qwe
;;;1487   
;;;1488   	
;;;1489   		memset(uart_string_gsm,0,qwe);
000014  4608              MOV      r0,r1
000016  6801              LDR      r1,[r0,#0]  ; qwe
000018  4825              LDR      r0,|L46.176|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1490   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4925              LDR      r1,|L46.184|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1491   	  time111=99999;						//timer counts to wait for characters in uart 1 
000024  4825              LDR      r0,|L46.188|
000026  4926              LDR      r1,|L46.192|
000028  6008              STR      r0,[r1,#0]  ; time111
;;;1492   		clear();
00002a  f7fffffe          BL       clear
;;;1493   		timeout222=2001;
00002e  4825              LDR      r0,|L46.196|
000030  4925              LDR      r1,|L46.200|
000032  6008              STR      r0,[r1,#0]  ; timeout222
;;;1494   		send_modem(string);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       send_modem
;;;1495   		do	{
00003a  bf00              NOP      
                  |L46.60|
;;;1496   			
;;;1497   					time111--;
00003c  4820              LDR      r0,|L46.192|
00003e  6800              LDR      r0,[r0,#0]  ; time111
000040  1e40              SUBS     r0,r0,#1
000042  491f              LDR      r1,|L46.192|
000044  6008              STR      r0,[r1,#0]  ; time111
;;;1498   				  timeout222--;
000046  4820              LDR      r0,|L46.200|
000048  6800              LDR      r0,[r0,#0]  ; timeout222
00004a  1e40              SUBS     r0,r0,#1
00004c  491e              LDR      r1,|L46.200|
00004e  6008              STR      r0,[r1,#0]  ; timeout222
;;;1499   //          if(lptmr_interrupt == 1){
;;;1500   //					//accel_read();
;;;1501   //					detect_motion();
;;;1502   //					lptmr_interrupt = 0;}		
;;;1503   //					if(timeout222 % 400 == 0)
;;;1504   //					{
;;;1505   //						//uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
;;;1506   //					}
;;;1507   			
;;;1508   	cond122=strstr(uart_string_gsm, responseA);
000050  4639              MOV      r1,r7
000052  4817              LDR      r0,|L46.176|
000054  f7fffffe          BL       strstr
000058  491c              LDR      r1,|L46.204|
00005a  6008              STR      r0,[r1,#0]  ; cond122
;;;1509   	cond123=strstr(uart_string_gsm, responseB);
00005c  4621              MOV      r1,r4
00005e  4814              LDR      r0,|L46.176|
000060  f7fffffe          BL       strstr
000064  491a              LDR      r1,|L46.208|
000066  6008              STR      r0,[r1,#0]  ; cond123
;;;1510     cond124=strstr(uart_string_gsm, responseC);
000068  4629              MOV      r1,r5
00006a  4811              LDR      r0,|L46.176|
00006c  f7fffffe          BL       strstr
000070  4918              LDR      r1,|L46.212|
000072  6008              STR      r0,[r1,#0]  ; cond124
;;;1511   	cond121 = (cond122	|| cond123	|| cond124  || (time111<=1))	;			
000074  4815              LDR      r0,|L46.204|
000076  6800              LDR      r0,[r0,#0]  ; cond122
000078  2800              CMP      r0,#0
00007a  d10b              BNE      |L46.148|
00007c  4814              LDR      r0,|L46.208|
00007e  6800              LDR      r0,[r0,#0]  ; cond123
000080  2800              CMP      r0,#0
000082  d107              BNE      |L46.148|
000084  4608              MOV      r0,r1
000086  6800              LDR      r0,[r0,#0]  ; cond124
000088  2800              CMP      r0,#0
00008a  d103              BNE      |L46.148|
00008c  480c              LDR      r0,|L46.192|
00008e  6800              LDR      r0,[r0,#0]  ; time111
000090  2801              CMP      r0,#1
000092  dc01              BGT      |L46.152|
                  |L46.148|
000094  2001              MOVS     r0,#1
000096  e000              B        |L46.154|
                  |L46.152|
000098  2000              MOVS     r0,#0
                  |L46.154|
00009a  490f              LDR      r1,|L46.216|
00009c  7008              STRB     r0,[r1,#0]
;;;1512   			
;;;1513   			
;;;1514   		}while (!cond121);
00009e  4608              MOV      r0,r1
0000a0  7800              LDRB     r0,[r0,#0]  ; cond121
0000a2  2800              CMP      r0,#0
0000a4  d0ca              BEQ      |L46.60|
;;;1515   		clear();
0000a6  f7fffffe          BL       clear
;;;1516   		return uart_string_gsm;
0000aa  4801              LDR      r0,|L46.176|
;;;1517   
;;;1518   }
0000ac  bdf8              POP      {r3-r7,pc}
;;;1519   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L46.176|
                          DCD      uart_string_gsm
                  |L46.180|
                          DCD      qwe
                  |L46.184|
                          DCD      ||k2||
                  |L46.188|
                          DCD      0x0001869f
                  |L46.192|
                          DCD      time111
                  |L46.196|
                          DCD      0x000007d1
                  |L46.200|
                          DCD      timeout222
                  |L46.204|
                          DCD      cond122
                  |L46.208|
                          DCD      cond123
                  |L46.212|
                          DCD      cond124
                  |L46.216|
                          DCD      cond121

                          AREA ||i.send_message||, COMGROUP=send_message, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  send_message PROC
;;;2457   			
;;;2458   __inline	void send_message(char * data2)
000000  b538              PUSH     {r3-r5,lr}
;;;2459   	{memset(uart_string_gsm,0,5000);
000002  4604              MOV      r4,r0
000004  4929              LDR      r1,|L53.172|
000006  482a              LDR      r0,|L53.176|
000008  f7fffffe          BL       __aeabi_memclr
;;;2460   									memset(at_,0,100);
00000c  2164              MOVS     r1,#0x64
00000e  4829              LDR      r0,|L53.180|
000010  f7fffffe          BL       __aeabi_memclr
;;;2461   									sprintf(at_, "\nAT+CMGS=\"%s\"\r\n" ,num2);
000014  4a28              LDR      r2,|L53.184|
000016  4929              LDR      r1,|L53.188|
000018  4826              LDR      r0,|L53.180|
00001a  f7fffffe          BL       __2sprintf
;;;2462   									send_MSG(at_, ">", "ERROR\r\n" , "ERROR:",tmeout);	
00001e  4828              LDR      r0,|L53.192|
000020  6800              LDR      r0,[r0,#0]  ; tmeout
000022  4b28              LDR      r3,|L53.196|
000024  4a28              LDR      r2,|L53.200|
000026  4929              LDR      r1,|L53.204|
000028  9000              STR      r0,[sp,#0]
00002a  4822              LDR      r0,|L53.180|
00002c  f7fffffe          BL       send_MSG
;;;2463   									if( strstr(uart_string_gsm, ">"))
000030  4926              LDR      r1,|L53.204|
000032  481f              LDR      r0,|L53.176|
000034  f7fffffe          BL       strstr
000038  2800              CMP      r0,#0
00003a  d031              BEQ      |L53.160|
;;;2464   									{
;;;2465   										//
;;;2466   										
;;;2467   											for(k=0;k<strlen(data2);k++)
00003c  2000              MOVS     r0,#0
00003e  4924              LDR      r1,|L53.208|
000040  6008              STR      r0,[r1,#0]  ; k
000042  e00c              B        |L53.94|
                  |L53.68|
;;;2468   											{
;;;2469   												
;;;2470   												uart_putchar(UART1_BASE_PTR, data2[k]);
000044  4822              LDR      r0,|L53.208|
000046  6800              LDR      r0,[r0,#0]  ; k
000048  5c21              LDRB     r1,[r4,r0]
00004a  4822              LDR      r0,|L53.212|
00004c  f7fffffe          BL       uart_putchar
;;;2471   												//uart0_putchar(UART0_BASE_PTR, data2[k]);
;;;2472   												clear();
000050  f7fffffe          BL       clear
000054  481e              LDR      r0,|L53.208|
000056  6800              LDR      r0,[r0,#0]            ;2467  ; k
000058  1c40              ADDS     r0,r0,#1              ;2467
00005a  491d              LDR      r1,|L53.208|
00005c  6008              STR      r0,[r1,#0]            ;2467  ; k
                  |L53.94|
00005e  4620              MOV      r0,r4                 ;2467
000060  f7fffffe          BL       strlen
000064  491a              LDR      r1,|L53.208|
000066  6809              LDR      r1,[r1,#0]            ;2467  ; k
000068  4288              CMP      r0,r1                 ;2467
00006a  d8eb              BHI      |L53.68|
;;;2473   												
;;;2474   											}		
;;;2475   											uart_putchar(UART1_BASE_PTR, 0x1A);
00006c  211a              MOVS     r1,#0x1a
00006e  4819              LDR      r0,|L53.212|
000070  f7fffffe          BL       uart_putchar
;;;2476   											k2=0;									//string array counter for uart 1
000074  2000              MOVS     r0,#0
000076  4918              LDR      r1,|L53.216|
000078  6008              STR      r0,[r1,#0]  ; k2
;;;2477   											timeout=99999;						//timer counts to wait for characters in uart 1 									
00007a  4818              LDR      r0,|L53.220|
00007c  4918              LDR      r1,|L53.224|
00007e  6008              STR      r0,[r1,#0]  ; timeout
;;;2478   											while(!(strstr(uart_string_gsm,"+CMGS:")  ||  (timeout < 1)))
000080  e004              B        |L53.140|
                  |L53.130|
;;;2479   																{
;;;2480   																	timeout--;
000082  4817              LDR      r0,|L53.224|
000084  6800              LDR      r0,[r0,#0]  ; timeout
000086  1e40              SUBS     r0,r0,#1
000088  4915              LDR      r1,|L53.224|
00008a  6008              STR      r0,[r1,#0]  ; timeout
                  |L53.140|
00008c  4915              LDR      r1,|L53.228|
00008e  4808              LDR      r0,|L53.176|
000090  f7fffffe          BL       strstr
000094  2800              CMP      r0,#0                 ;2478
000096  d103              BNE      |L53.160|
000098  4811              LDR      r0,|L53.224|
00009a  6800              LDR      r0,[r0,#0]            ;2478  ; timeout
00009c  2801              CMP      r0,#1                 ;2478
00009e  daf0              BGE      |L53.130|
                  |L53.160|
;;;2481   //																	if(timeout % 4000 == 0)
;;;2482   //																	{
;;;2483   //																		uart0_putchar(UART0_BASE_PTR,'1');
;;;2484   //																		uart_putchar(UART1_BASE_PTR,0x1A);
;;;2485   //																	}
;;;2486   																}
;;;2487   							
;;;2488   									}
;;;2489   		
;;;2490   	memset(uart_string_gsm,0,5000);								
0000a0  4902              LDR      r1,|L53.172|
0000a2  4803              LDR      r0,|L53.176|
0000a4  f7fffffe          BL       __aeabi_memclr
;;;2491   	}
0000a8  bd38              POP      {r3-r5,pc}
;;;2492   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L53.172|
                          DCD      0x00001388
                  |L53.176|
                          DCD      uart_string_gsm
                  |L53.180|
                          DCD      at_
                  |L53.184|
                          DCD      num2
                  |L53.188|
                          DCD      ||.conststring||
                  |L53.192|
                          DCD      tmeout
                  |L53.196|
                          DCD      ||.conststring||+0x10
                  |L53.200|
                          DCD      ||.conststring||+0x18
                  |L53.204|
                          DCD      ||.conststring||+0x20
                  |L53.208|
                          DCD      k
                  |L53.212|
                          DCD      0x4006b000
                  |L53.216|
                          DCD      ||k2||
                  |L53.220|
                          DCD      0x0001869f
                  |L53.224|
                          DCD      timeout
                  |L53.228|
                          DCD      ||.conststring||+0x24

                          AREA ||i.parse_g||, COMGROUP=parse_g, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;1602   
;;;1603   __inline void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1604   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f0b              LDR      r7,[sp,#0x2c]
;;;1605   
;;;1606   		sz1=	strlen(str);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  493c              LDR      r1,|L60.260|
000014  6008              STR      r0,[r1,#0]  ; sz1
;;;1607   		sz2=  strlen(string);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       strlen
00001c  493a              LDR      r1,|L60.264|
00001e  6008              STR      r0,[r1,#0]  ; sz2
;;;1608   		memset(string,0,sz2);
000020  4608              MOV      r0,r1
000022  6801              LDR      r1,[r0,#0]  ; sz2
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_memclr
;;;1609   		for(i11=0,temp11=0;i11<sz1;i11++)
00002a  2000              MOVS     r0,#0
00002c  4937              LDR      r1,|L60.268|
00002e  6008              STR      r0,[r1,#0]  ; i11
000030  4937              LDR      r1,|L60.272|
000032  6008              STR      r0,[r1,#0]  ; temp11
000034  e01a              B        |L60.108|
                  |L60.54|
;;;1610   		{
;;;1611   		if(str[i11]==s)
000036  4835              LDR      r0,|L60.268|
000038  6800              LDR      r0,[r0,#0]  ; i11
00003a  5c21              LDRB     r1,[r4,r0]
00003c  980a              LDR      r0,[sp,#0x28]
00003e  4281              CMP      r1,r0
000040  d108              BNE      |L60.84|
;;;1612   			{temp11++;j11=i11;}
000042  4833              LDR      r0,|L60.272|
000044  6800              LDR      r0,[r0,#0]  ; temp11
000046  1c40              ADDS     r0,r0,#1
000048  4931              LDR      r1,|L60.272|
00004a  6008              STR      r0,[r1,#0]  ; temp11
00004c  482f              LDR      r0,|L60.268|
00004e  6800              LDR      r0,[r0,#0]  ; i11
000050  4930              LDR      r1,|L60.276|
000052  6008              STR      r0,[r1,#0]  ; j11
                  |L60.84|
;;;1613   		else{}
;;;1614   			
;;;1615   		if(temp11>=sec){i11=9900;}
000054  482e              LDR      r0,|L60.272|
000056  6800              LDR      r0,[r0,#0]  ; temp11
000058  42b0              CMP      r0,r6
00005a  db02              BLT      |L60.98|
00005c  482e              LDR      r0,|L60.280|
00005e  492b              LDR      r1,|L60.268|
000060  6008              STR      r0,[r1,#0]  ; i11
                  |L60.98|
000062  482a              LDR      r0,|L60.268|
000064  6800              LDR      r0,[r0,#0]            ;1609  ; i11
000066  1c40              ADDS     r0,r0,#1              ;1609
000068  4928              LDR      r1,|L60.268|
00006a  6008              STR      r0,[r1,#0]            ;1609  ; i11
                  |L60.108|
00006c  4827              LDR      r0,|L60.268|
00006e  6800              LDR      r0,[r0,#0]            ;1609  ; i11
000070  4924              LDR      r1,|L60.260|
000072  6809              LDR      r1,[r1,#0]            ;1609  ; sz1
000074  4288              CMP      r0,r1                 ;1609
000076  dbde              BLT      |L60.54|
;;;1616   		else{}	
;;;1617   		
;;;1618   		}	
;;;1619   		
;;;1620   		for(i11=0,temp11=0;i11<sz1;i11++)
000078  2000              MOVS     r0,#0
00007a  4924              LDR      r1,|L60.268|
00007c  6008              STR      r0,[r1,#0]  ; i11
00007e  4924              LDR      r1,|L60.272|
000080  6008              STR      r0,[r1,#0]  ; temp11
000082  e01a              B        |L60.186|
                  |L60.132|
;;;1621   		{
;;;1622   		if(str[i11]==f)
000084  4821              LDR      r0,|L60.268|
000086  6800              LDR      r0,[r0,#0]  ; i11
000088  5c21              LDRB     r1,[r4,r0]
00008a  9804              LDR      r0,[sp,#0x10]
00008c  4281              CMP      r1,r0
00008e  d108              BNE      |L60.162|
;;;1623   			{temp11++;l=i11;}										
000090  481f              LDR      r0,|L60.272|
000092  6800              LDR      r0,[r0,#0]  ; temp11
000094  1c40              ADDS     r0,r0,#1
000096  491e              LDR      r1,|L60.272|
000098  6008              STR      r0,[r1,#0]  ; temp11
00009a  481c              LDR      r0,|L60.268|
00009c  6800              LDR      r0,[r0,#0]  ; i11
00009e  491f              LDR      r1,|L60.284|
0000a0  6008              STR      r0,[r1,#0]  ; l
                  |L60.162|
;;;1624   		else{}
;;;1625   		if(temp11>=first){i11=9900;}else{}
0000a2  481b              LDR      r0,|L60.272|
0000a4  6800              LDR      r0,[r0,#0]  ; temp11
0000a6  42a8              CMP      r0,r5
0000a8  db02              BLT      |L60.176|
0000aa  481b              LDR      r0,|L60.280|
0000ac  4917              LDR      r1,|L60.268|
0000ae  6008              STR      r0,[r1,#0]  ; i11
                  |L60.176|
0000b0  4816              LDR      r0,|L60.268|
0000b2  6800              LDR      r0,[r0,#0]            ;1620  ; i11
0000b4  1c40              ADDS     r0,r0,#1              ;1620
0000b6  4915              LDR      r1,|L60.268|
0000b8  6008              STR      r0,[r1,#0]            ;1620  ; i11
                  |L60.186|
0000ba  4814              LDR      r0,|L60.268|
0000bc  6800              LDR      r0,[r0,#0]            ;1620  ; i11
0000be  4911              LDR      r1,|L60.260|
0000c0  6809              LDR      r1,[r1,#0]            ;1620  ; sz1
0000c2  4288              CMP      r0,r1                 ;1620
0000c4  dbde              BLT      |L60.132|
;;;1626   		}	
;;;1627   		for(i11=0;i11<(j11-l-1);i11++)
0000c6  2000              MOVS     r0,#0
0000c8  4910              LDR      r1,|L60.268|
0000ca  6008              STR      r0,[r1,#0]  ; i11
0000cc  e00e              B        |L60.236|
                  |L60.206|
;;;1628   		{
;;;1629   		string[i11] = str[l+i11+1];
0000ce  4813              LDR      r0,|L60.284|
0000d0  6800              LDR      r0,[r0,#0]  ; l
0000d2  490e              LDR      r1,|L60.268|
0000d4  6809              LDR      r1,[r1,#0]  ; i11
0000d6  1840              ADDS     r0,r0,r1
0000d8  1c40              ADDS     r0,r0,#1
0000da  5c20              LDRB     r0,[r4,r0]
0000dc  490b              LDR      r1,|L60.268|
0000de  6809              LDR      r1,[r1,#0]  ; i11
0000e0  5478              STRB     r0,[r7,r1]
0000e2  480a              LDR      r0,|L60.268|
0000e4  6800              LDR      r0,[r0,#0]            ;1627  ; i11
0000e6  1c40              ADDS     r0,r0,#1              ;1627
0000e8  4908              LDR      r1,|L60.268|
0000ea  6008              STR      r0,[r1,#0]            ;1627  ; i11
                  |L60.236|
0000ec  4809              LDR      r0,|L60.276|
0000ee  6800              LDR      r0,[r0,#0]            ;1627  ; j11
0000f0  490a              LDR      r1,|L60.284|
0000f2  6809              LDR      r1,[r1,#0]            ;1627  ; l
0000f4  1a40              SUBS     r0,r0,r1              ;1627
0000f6  1e40              SUBS     r0,r0,#1              ;1627
0000f8  4904              LDR      r1,|L60.268|
0000fa  6809              LDR      r1,[r1,#0]            ;1627  ; i11
0000fc  4288              CMP      r0,r1                 ;1627
0000fe  dce6              BGT      |L60.206|
;;;1630   		}			
;;;1631   	
;;;1632   
;;;1633   
;;;1634   }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
;;;1635   
                          ENDP

                  |L60.260|
                          DCD      ||sz1||
                  |L60.264|
                          DCD      ||sz2||
                  |L60.268|
                          DCD      i11
                  |L60.272|
                          DCD      temp11
                  |L60.276|
                          DCD      j11
                  |L60.280|
                          DCD      0x000026ac
                  |L60.284|
                          DCD      l

                          AREA ||i.ignstaton||, COMGROUP=ignstaton, CODE, READONLY, ALIGN=2

                  ignstaton PROC
;;;1270   	
;;;1271   __inline void ignstaton(){
000000  b508              PUSH     {r3,lr}
;;;1272   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L67.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L67.64|
000008  4a0e              LDR      r2,|L67.68|
00000a  490f              LDR      r1,|L67.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L67.76|
000010  f7fffffe          BL       send_GSM
;;;1273   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L67.64|
000018  4a0a              LDR      r2,|L67.68|
00001a  490d              LDR      r1,|L67.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L67.84|
000020  f7fffffe          BL       send_GSM
;;;1274   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1275   send_GSM("\nION\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L67.64|
00002e  4a05              LDR      r2,|L67.68|
000030  4909              LDR      r1,|L67.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L67.92|
000036  f7fffffe          BL       send_GSM
;;;1276   
;;;1277   
;;;1278   }	
00003a  bd08              POP      {r3,pc}
;;;1279   __inline void ignstatoff(){
                          ENDP

                  |L67.60|
                          DCD      tmeout
                  |L67.64|
                          DCD      ||.conststring||+0x10
                  |L67.68|
                          DCD      ||.conststring||+0x18
                  |L67.72|
                          DCD      ||.conststring||+0x2c
                  |L67.76|
                          DCD      ||.conststring||+0x30
                  |L67.80|
                          DCD      ||.conststring||+0x20
                  |L67.84|
                          DCD      ||.conststring||+0x4c
                  |L67.88|
                          DCD      ||.conststring||+0x70
                  |L67.92|
                          DCD      ||.conststring||+0x78

                          AREA ||i.save_ip_port||, COMGROUP=save_ip_port, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_ip_port PROC
;;;1231   	
;;;1232   __inline void save_ip_port()
000000  b538              PUSH     {r3-r5,lr}
;;;1233   {
;;;1234   	
;;;1235   send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4844              LDR      r0,|L74.276|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b44              LDR      r3,|L74.280|
000008  4a44              LDR      r2,|L74.284|
00000a  4945              LDR      r1,|L74.288|
00000c  9000              STR      r0,[sp,#0]
00000e  4845              LDR      r0,|L74.292|
000010  f7fffffe          BL       send_GSM
;;;1236   	
;;;1237   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4844              LDR      r0,|L74.296|
000018  f7fffffe          BL       __aeabi_memclr
;;;1238   	sprintf(at_,"\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",strlen(ip)+12+strlen(port));	
00001c  4843              LDR      r0,|L74.300|
00001e  f7fffffe          BL       strlen
000022  4605              MOV      r5,r0
000024  350c              ADDS     r5,r5,#0xc
000026  4842              LDR      r0,|L74.304|
000028  f7fffffe          BL       strlen
00002c  182c              ADDS     r4,r5,r0
00002e  4622              MOV      r2,r4
000030  4940              LDR      r1,|L74.308|
000032  483d              LDR      r0,|L74.296|
000034  f7fffffe          BL       __2sprintf
;;;1239   send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000038  200a              MOVS     r0,#0xa
00003a  4b37              LDR      r3,|L74.280|
00003c  4a37              LDR      r2,|L74.284|
00003e  493e              LDR      r1,|L74.312|
000040  9000              STR      r0,[sp,#0]
000042  4839              LDR      r0,|L74.296|
000044  f7fffffe          BL       send_GSM
;;;1240   	clear();
000048  f7fffffe          BL       clear
;;;1241   
;;;1242   	
;;;1243   	send_modem("|IP|");
00004c  483b              LDR      r0,|L74.316|
00004e  f7fffffe          BL       send_modem
;;;1244   		for(k=0;k<strlen(ip);k++)
000052  2000              MOVS     r0,#0
000054  493a              LDR      r1,|L74.320|
000056  6008              STR      r0,[r1,#0]  ; k
000058  e00b              B        |L74.114|
                  |L74.90|
;;;1245   		{
;;;1246   			uart_putchar(UART1_BASE_PTR, ip[k]);// uart0_putchar(UART0_BASE_PTR, ip[k]);//clear();
00005a  4834              LDR      r0,|L74.300|
00005c  4a38              LDR      r2,|L74.320|
00005e  6812              LDR      r2,[r2,#0]  ; k
000060  5c81              LDRB     r1,[r0,r2]
000062  4838              LDR      r0,|L74.324|
000064  f7fffffe          BL       uart_putchar
000068  4835              LDR      r0,|L74.320|
00006a  6800              LDR      r0,[r0,#0]            ;1244  ; k
00006c  1c40              ADDS     r0,r0,#1              ;1244
00006e  4934              LDR      r1,|L74.320|
000070  6008              STR      r0,[r1,#0]            ;1244  ; k
                  |L74.114|
000072  482e              LDR      r0,|L74.300|
000074  f7fffffe          BL       strlen
000078  4931              LDR      r1,|L74.320|
00007a  6809              LDR      r1,[r1,#0]            ;1244  ; k
00007c  4288              CMP      r0,r1                 ;1244
00007e  d8ec              BHI      |L74.90|
;;;1247   		}	
;;;1248   	send_modem("|PORT|");			
000080  4831              LDR      r0,|L74.328|
000082  f7fffffe          BL       send_modem
;;;1249   		for(k=0;k<strlen(port);k++)
000086  2000              MOVS     r0,#0
000088  492d              LDR      r1,|L74.320|
00008a  6008              STR      r0,[r1,#0]  ; k
00008c  e00b              B        |L74.166|
                  |L74.142|
;;;1250   		{
;;;1251   			uart_putchar(UART1_BASE_PTR, port[k]);// uart0_putchar(UART0_BASE_PTR, port[k]);//clear();
00008e  4828              LDR      r0,|L74.304|
000090  4a2b              LDR      r2,|L74.320|
000092  6812              LDR      r2,[r2,#0]  ; k
000094  5c81              LDRB     r1,[r0,r2]
000096  482b              LDR      r0,|L74.324|
000098  f7fffffe          BL       uart_putchar
00009c  4828              LDR      r0,|L74.320|
00009e  6800              LDR      r0,[r0,#0]            ;1249  ; k
0000a0  1c40              ADDS     r0,r0,#1              ;1249
0000a2  4927              LDR      r1,|L74.320|
0000a4  6008              STR      r0,[r1,#0]            ;1249  ; k
                  |L74.166|
0000a6  4822              LDR      r0,|L74.304|
0000a8  f7fffffe          BL       strlen
0000ac  4924              LDR      r1,|L74.320|
0000ae  6809              LDR      r1,[r1,#0]            ;1249  ; k
0000b0  4288              CMP      r0,r1                 ;1249
0000b2  d8ec              BHI      |L74.142|
;;;1252   		}	
;;;1253   send_modem("|");			
0000b4  4825              LDR      r0,|L74.332|
0000b6  f7fffffe          BL       send_modem
;;;1254   									//memset(data,0,1000);
;;;1255   									k2=0;									//string array counter for uart 1
0000ba  2000              MOVS     r0,#0
0000bc  4924              LDR      r1,|L74.336|
0000be  6008              STR      r0,[r1,#0]  ; k2
;;;1256   									time=19999;						//timer counts to wait for characters in uart 1 									
0000c0  4824              LDR      r0,|L74.340|
0000c2  4925              LDR      r1,|L74.344|
0000c4  6008              STR      r0,[r1,#0]  ; time
;;;1257   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
0000c6  e014              B        |L74.242|
                  |L74.200|
;;;1258   									{
;;;1259   									time--;
0000c8  4823              LDR      r0,|L74.344|
0000ca  6800              LDR      r0,[r0,#0]  ; time
0000cc  1e40              SUBS     r0,r0,#1
0000ce  4922              LDR      r1,|L74.344|
0000d0  6008              STR      r0,[r1,#0]  ; time
;;;1260   									if(time % 2000 == 0)
0000d2  217d              MOVS     r1,#0x7d
0000d4  0109              LSLS     r1,r1,#4
0000d6  4820              LDR      r0,|L74.344|
0000d8  6800              LDR      r0,[r0,#0]  ; time
0000da  f7fffffe          BL       __aeabi_idivmod
0000de  2900              CMP      r1,#0
0000e0  d107              BNE      |L74.242|
;;;1261   										{
;;;1262   											uart0_putchar(UART0_BASE_PTR,'1');
0000e2  2131              MOVS     r1,#0x31
0000e4  481d              LDR      r0,|L74.348|
0000e6  f7fffffe          BL       uart0_putchar
;;;1263   											uart_putchar(UART1_BASE_PTR,'\n');
0000ea  210a              MOVS     r1,#0xa
0000ec  4815              LDR      r0,|L74.324|
0000ee  f7fffffe          BL       uart_putchar
                  |L74.242|
0000f2  491b              LDR      r1,|L74.352|
0000f4  481b              LDR      r0,|L74.356|
0000f6  f7fffffe          BL       strstr
0000fa  2800              CMP      r0,#0                 ;1257
0000fc  d109              BNE      |L74.274|
0000fe  4816              LDR      r0,|L74.344|
000100  6800              LDR      r0,[r0,#0]            ;1257  ; time
000102  2801              CMP      r0,#1                 ;1257
000104  db05              BLT      |L74.274|
000106  4918              LDR      r1,|L74.360|
000108  4816              LDR      r0,|L74.356|
00010a  f7fffffe          BL       strstr
00010e  2800              CMP      r0,#0                 ;1257
000110  d0da              BEQ      |L74.200|
                  |L74.274|
;;;1264   										}
;;;1265   	
;;;1266   									}
;;;1267   
;;;1268   	
;;;1269   }	
000112  bd38              POP      {r3-r5,pc}
;;;1270   	
                          ENDP

                  |L74.276|
                          DCD      tmeout
                  |L74.280|
                          DCD      ||.conststring||+0x10
                  |L74.284|
                          DCD      ||.conststring||+0x18
                  |L74.288|
                          DCD      ||.conststring||+0x2c
                  |L74.292|
                          DCD      ||.conststring||+0x84
                  |L74.296|
                          DCD      at_
                  |L74.300|
                          DCD      ||ip||
                  |L74.304|
                          DCD      port
                  |L74.308|
                          DCD      ||.conststring||+0xa4
                  |L74.312|
                          DCD      ||.conststring||+0x20
                  |L74.316|
                          DCD      ||.conststring||+0xcc
                  |L74.320|
                          DCD      k
                  |L74.324|
                          DCD      0x4006b000
                  |L74.328|
                          DCD      ||.conststring||+0xd4
                  |L74.332|
                          DCD      ||.conststring||+0xdc
                  |L74.336|
                          DCD      ||k2||
                  |L74.340|
                          DCD      0x00004e1f
                  |L74.344|
                          DCD      time
                  |L74.348|
                          DCD      0x4006a000
                  |L74.352|
                          DCD      ||.conststring||+0x70
                  |L74.356|
                          DCD      uart_string_gsm
                  |L74.360|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.stof||, COMGROUP=stof, CODE, READONLY, ALIGN=2

                  stof PROC
;;;1129   
;;;1130   __inline float stof(const char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;1131   {rez=0;fact=1;
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  4925              LDR      r1,|L81.156|
000008  6008              STR      r0,[r1,#0]  ; rez
00000a  207f              MOVS     r0,#0x7f
00000c  05c0              LSLS     r0,r0,#23
00000e  4924              LDR      r1,|L81.160|
000010  6008              STR      r0,[r1,#0]  ; fact
;;;1132   
;;;1133     if (*s == '-'){
000012  7820              LDRB     r0,[r4,#0]
000014  282d              CMP      r0,#0x2d
000016  d102              BNE      |L81.30|
;;;1134       s++;
000018  1c64              ADDS     r4,r4,#1
;;;1135       fact = -1;
00001a  4822              LDR      r0,|L81.164|
00001c  6008              STR      r0,[r1,#0]  ; fact
                  |L81.30|
;;;1136     };
;;;1137     for (point_seen = 0; *s; s++){
00001e  2000              MOVS     r0,#0
000020  4921              LDR      r1,|L81.168|
000022  6008              STR      r0,[r1,#0]  ; point_seen
000024  e02f              B        |L81.134|
                  |L81.38|
;;;1138       if (*s == '.'){
000026  7820              LDRB     r0,[r4,#0]
000028  282e              CMP      r0,#0x2e
00002a  d103              BNE      |L81.52|
;;;1139         point_seen = 1; 
00002c  2001              MOVS     r0,#1
00002e  491e              LDR      r1,|L81.168|
000030  6008              STR      r0,[r1,#0]  ; point_seen
;;;1140         continue;
000032  e027              B        |L81.132|
                  |L81.52|
;;;1141       };
;;;1142       d = *s - '0';
000034  7820              LDRB     r0,[r4,#0]
000036  3830              SUBS     r0,r0,#0x30
000038  491c              LDR      r1,|L81.172|
00003a  6008              STR      r0,[r1,#0]  ; d
;;;1143       if (d >= 0 && d <= 9){
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]  ; d
000040  2800              CMP      r0,#0
000042  db1e              BLT      |L81.130|
000044  4608              MOV      r0,r1
000046  6800              LDR      r0,[r0,#0]  ; d
000048  2809              CMP      r0,#9
00004a  dc1a              BGT      |L81.130|
;;;1144         if (point_seen) fact /= 10.0f;
00004c  4816              LDR      r0,|L81.168|
00004e  6800              LDR      r0,[r0,#0]  ; point_seen
000050  2800              CMP      r0,#0
000052  d006              BEQ      |L81.98|
000054  4916              LDR      r1,|L81.176|
000056  4812              LDR      r0,|L81.160|
000058  6800              LDR      r0,[r0,#0]  ; fact
00005a  f7fffffe          BL       __aeabi_fdiv
00005e  4910              LDR      r1,|L81.160|
000060  6008              STR      r0,[r1,#0]  ; fact
                  |L81.98|
;;;1145         rez = rez * 10.0f + (float)d;
000062  4812              LDR      r0,|L81.172|
000064  6800              LDR      r0,[r0,#0]  ; d
000066  f7fffffe          BL       __aeabi_i2f
00006a  4605              MOV      r5,r0
00006c  4910              LDR      r1,|L81.176|
00006e  480b              LDR      r0,|L81.156|
000070  6800              LDR      r0,[r0,#0]  ; rez
000072  f7fffffe          BL       __aeabi_fmul
000076  4606              MOV      r6,r0
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       __aeabi_fadd
00007e  4907              LDR      r1,|L81.156|
000080  6008              STR      r0,[r1,#0]  ; rez
                  |L81.130|
000082  bf00              NOP                            ;1140
                  |L81.132|
000084  1c64              ADDS     r4,r4,#1              ;1137
                  |L81.134|
000086  7820              LDRB     r0,[r4,#0]            ;1137
000088  2800              CMP      r0,#0                 ;1137
00008a  d1cc              BNE      |L81.38|
;;;1146       };
;;;1147     };
;;;1148     return rez * fact;
00008c  4804              LDR      r0,|L81.160|
00008e  6801              LDR      r1,[r0,#0]  ; fact
000090  4802              LDR      r0,|L81.156|
000092  6800              LDR      r0,[r0,#0]  ; rez
000094  f7fffffe          BL       __aeabi_fmul
;;;1149   };
000098  bd70              POP      {r4-r6,pc}
;;;1150   
                          ENDP

00009a  0000              DCW      0x0000
                  |L81.156|
                          DCD      ||rez||
                  |L81.160|
                          DCD      fact
                  |L81.164|
                          DCD      0xbf800000
                  |L81.168|
                          DCD      point_seen
                  |L81.172|
                          DCD      d
                  |L81.176|
                          DCD      0x41200000

                          AREA ||i.get_gpsdata||, COMGROUP=get_gpsdata, CODE, READONLY, ALIGN=2

                  get_gpsdata PROC
;;;1360   
;;;1361   __inline void get_gpsdata()
000000  b510              PUSH     {r4,lr}
;;;1362   {
;;;1363   						clear2();
000002  f7fffffe          BL       clear2
;;;1364   						memset(uart_string_gps,0,3000);memset(gga,0,100);memset(rmc,0,100);			
000006  4952              LDR      r1,|L88.336|
000008  4852              LDR      r0,|L88.340|
00000a  f7fffffe          BL       __aeabi_memclr
00000e  2164              MOVS     r1,#0x64
000010  4851              LDR      r0,|L88.344|
000012  f7fffffe          BL       __aeabi_memclr
000016  2164              MOVS     r1,#0x64
000018  4850              LDR      r0,|L88.348|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1365   						i=0;tout2=0;
00001e  2000              MOVS     r0,#0
000020  494f              LDR      r1,|L88.352|
000022  6008              STR      r0,[r1,#0]  ; i
000024  494f              LDR      r1,|L88.356|
000026  6008              STR      r0,[r1,#0]  ; tout2
;;;1366   //						t22=9999999;
;;;1367   do{
000028  bf00              NOP      
                  |L88.42|
;;;1368   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00002a  484f              LDR      r0,|L88.360|
00002c  7900              LDRB     r0,[r0,#4]
00002e  2120              MOVS     r1,#0x20
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d00a              BEQ      |L88.76|
;;;1369   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000036  484c              LDR      r0,|L88.360|
000038  79c0              LDRB     r0,[r0,#7]
00003a  4946              LDR      r1,|L88.340|
00003c  4a48              LDR      r2,|L88.352|
00003e  6812              LDR      r2,[r2,#0]  ; i
000040  5488              STRB     r0,[r1,r2]
;;;1370   				i++;
000042  4847              LDR      r0,|L88.352|
000044  6800              LDR      r0,[r0,#0]  ; i
000046  1c40              ADDS     r0,r0,#1
000048  4945              LDR      r1,|L88.352|
00004a  6008              STR      r0,[r1,#0]  ; i
                  |L88.76|
;;;1371   	}
;;;1372   	}while(!   (strstr(uart_string_gps,"RMC")       ||  (tout2>1)  )  );
00004c  4947              LDR      r1,|L88.364|
00004e  4841              LDR      r0,|L88.340|
000050  f7fffffe          BL       strstr
000054  2800              CMP      r0,#0
000056  d103              BNE      |L88.96|
000058  4842              LDR      r0,|L88.356|
00005a  6800              LDR      r0,[r0,#0]  ; tout2
00005c  2801              CMP      r0,#1
00005e  dde4              BLE      |L88.42|
                  |L88.96|
;;;1373   i=0;tout2=0;
000060  2000              MOVS     r0,#0
000062  493f              LDR      r1,|L88.352|
000064  6008              STR      r0,[r1,#0]  ; i
000066  493f              LDR      r1,|L88.356|
000068  6008              STR      r0,[r1,#0]  ; tout2
;;;1374   do{
00006a  bf00              NOP      
                  |L88.108|
;;;1375   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00006c  483e              LDR      r0,|L88.360|
00006e  7900              LDRB     r0,[r0,#4]
000070  2120              MOVS     r1,#0x20
000072  4008              ANDS     r0,r0,r1
000074  2800              CMP      r0,#0
000076  d00a              BEQ      |L88.142|
;;;1376   	{		rmc[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000078  483b              LDR      r0,|L88.360|
00007a  79c1              LDRB     r1,[r0,#7]
00007c  4837              LDR      r0,|L88.348|
00007e  4a38              LDR      r2,|L88.352|
000080  6812              LDR      r2,[r2,#0]  ; i
000082  5481              STRB     r1,[r0,r2]
;;;1377   				i++;
000084  4836              LDR      r0,|L88.352|
000086  6800              LDR      r0,[r0,#0]  ; i
000088  1c40              ADDS     r0,r0,#1
00008a  4935              LDR      r1,|L88.352|
00008c  6008              STR      r0,[r1,#0]  ; i
                  |L88.142|
;;;1378   	}
;;;1379   }while(     !( mystrstr(rmc,'*')    ||  tout2>1) );
00008e  212a              MOVS     r1,#0x2a
000090  4832              LDR      r0,|L88.348|
000092  f7fffffe          BL       mystrstr
000096  2800              CMP      r0,#0
000098  d103              BNE      |L88.162|
00009a  4832              LDR      r0,|L88.356|
00009c  6800              LDR      r0,[r0,#0]  ; tout2
00009e  2801              CMP      r0,#1
0000a0  dde4              BLE      |L88.108|
                  |L88.162|
;;;1380   memset(uart_string_gps,0,3000);
0000a2  492b              LDR      r1,|L88.336|
0000a4  482b              LDR      r0,|L88.340|
0000a6  f7fffffe          BL       __aeabi_memclr
;;;1381   i=0;tout2=0;
0000aa  2000              MOVS     r0,#0
0000ac  492c              LDR      r1,|L88.352|
0000ae  6008              STR      r0,[r1,#0]  ; i
0000b0  492c              LDR      r1,|L88.356|
0000b2  6008              STR      r0,[r1,#0]  ; tout2
;;;1382   do{
0000b4  bf00              NOP      
                  |L88.182|
;;;1383   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000b6  482c              LDR      r0,|L88.360|
0000b8  7900              LDRB     r0,[r0,#4]
0000ba  2120              MOVS     r1,#0x20
0000bc  4008              ANDS     r0,r0,r1
0000be  2800              CMP      r0,#0
0000c0  d00a              BEQ      |L88.216|
;;;1384   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
0000c2  4829              LDR      r0,|L88.360|
0000c4  79c0              LDRB     r0,[r0,#7]
0000c6  4923              LDR      r1,|L88.340|
0000c8  4a25              LDR      r2,|L88.352|
0000ca  6812              LDR      r2,[r2,#0]  ; i
0000cc  5488              STRB     r0,[r1,r2]
;;;1385   				i++;
0000ce  4824              LDR      r0,|L88.352|
0000d0  6800              LDR      r0,[r0,#0]  ; i
0000d2  1c40              ADDS     r0,r0,#1
0000d4  4922              LDR      r1,|L88.352|
0000d6  6008              STR      r0,[r1,#0]  ; i
                  |L88.216|
;;;1386   	}
;;;1387   }while(!  (strstr(uart_string_gps,"GGA")      ||  (tout2>1) )  );
0000d8  4925              LDR      r1,|L88.368|
0000da  481e              LDR      r0,|L88.340|
0000dc  f7fffffe          BL       strstr
0000e0  2800              CMP      r0,#0
0000e2  d103              BNE      |L88.236|
0000e4  481f              LDR      r0,|L88.356|
0000e6  6800              LDR      r0,[r0,#0]  ; tout2
0000e8  2801              CMP      r0,#1
0000ea  dde4              BLE      |L88.182|
                  |L88.236|
;;;1388   i=0;tout2=0;
0000ec  2000              MOVS     r0,#0
0000ee  491c              LDR      r1,|L88.352|
0000f0  6008              STR      r0,[r1,#0]  ; i
0000f2  491c              LDR      r1,|L88.356|
0000f4  6008              STR      r0,[r1,#0]  ; tout2
;;;1389   do{
0000f6  bf00              NOP      
                  |L88.248|
;;;1390   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000f8  481b              LDR      r0,|L88.360|
0000fa  7900              LDRB     r0,[r0,#4]
0000fc  2120              MOVS     r1,#0x20
0000fe  4008              ANDS     r0,r0,r1
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L88.282|
;;;1391   	{		gga[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000104  4818              LDR      r0,|L88.360|
000106  79c1              LDRB     r1,[r0,#7]
000108  4813              LDR      r0,|L88.344|
00010a  4a15              LDR      r2,|L88.352|
00010c  6812              LDR      r2,[r2,#0]  ; i
00010e  5481              STRB     r1,[r0,r2]
;;;1392   				i++;
000110  4813              LDR      r0,|L88.352|
000112  6800              LDR      r0,[r0,#0]  ; i
000114  1c40              ADDS     r0,r0,#1
000116  4912              LDR      r1,|L88.352|
000118  6008              STR      r0,[r1,#0]  ; i
                  |L88.282|
;;;1393   	}
;;;1394   }while(!(mystrstr(gga,'*')  ||  (tout2>1) ));
00011a  212a              MOVS     r1,#0x2a
00011c  480e              LDR      r0,|L88.344|
00011e  f7fffffe          BL       mystrstr
000122  2800              CMP      r0,#0
000124  d103              BNE      |L88.302|
000126  480f              LDR      r0,|L88.356|
000128  6800              LDR      r0,[r0,#0]  ; tout2
00012a  2801              CMP      r0,#1
00012c  dde4              BLE      |L88.248|
                  |L88.302|
;;;1395   
;;;1396   clear2();
00012e  f7fffffe          BL       clear2
;;;1397   
;;;1398   		
;;;1399   
;;;1400   stateCount++; 
000132  4810              LDR      r0,|L88.372|
000134  7800              LDRB     r0,[r0,#0]  ; stateCount
000136  1c40              ADDS     r0,r0,#1
000138  490e              LDR      r1,|L88.372|
00013a  7008              STRB     r0,[r1,#0]
;;;1401   if(stateCount>5){stateCount =0;}
00013c  4608              MOV      r0,r1
00013e  7800              LDRB     r0,[r0,#0]  ; stateCount
000140  2805              CMP      r0,#5
000142  dd01              BLE      |L88.328|
000144  2000              MOVS     r0,#0
000146  7008              STRB     r0,[r1,#0]
                  |L88.328|
;;;1402   LED_state2();					
000148  f7fffffe          BL       LED_state2
;;;1403   }
00014c  bd10              POP      {r4,pc}
;;;1404   	
                          ENDP

00014e  0000              DCW      0x0000
                  |L88.336|
                          DCD      0x00000bb8
                  |L88.340|
                          DCD      uart_string_gps
                  |L88.344|
                          DCD      gga
                  |L88.348|
                          DCD      ||rmc||
                  |L88.352|
                          DCD      i
                  |L88.356|
                          DCD      tout2
                  |L88.360|
                          DCD      0x4006c000
                  |L88.364|
                          DCD      ||.conststring||+0xe8
                  |L88.368|
                          DCD      ||.conststring||+0xec
                  |L88.372|
                          DCD      stateCount

                          AREA ||i.myAtoi||, COMGROUP=myAtoi, CODE, READONLY, ALIGN=2

                  myAtoi PROC
;;;1117   
;;;1118   __inline int myAtoi(char *str)
000000  4601              MOV      r1,r0
;;;1119   {res=0;
000002  2000              MOVS     r0,#0
000004  4a0e              LDR      r2,|L95.64|
000006  6010              STR      r0,[r2,#0]  ; res
;;;1120       // Initialize result
;;;1121   
;;;1122       // Iterate through all characters of input string and update result
;;;1123       for (iz = 0; str[iz] != '\0'; ++iz)
000008  4a0e              LDR      r2,|L95.68|
00000a  6010              STR      r0,[r2,#0]  ; iz
00000c  e00f              B        |L95.46|
                  |L95.14|
;;;1124           res = res*10 + str[iz] - '0';
00000e  480c              LDR      r0,|L95.64|
000010  6800              LDR      r0,[r0,#0]  ; res
000012  220a              MOVS     r2,#0xa
000014  4350              MULS     r0,r2,r0
000016  4a0b              LDR      r2,|L95.68|
000018  6812              LDR      r2,[r2,#0]  ; iz
00001a  5c8a              LDRB     r2,[r1,r2]
00001c  1880              ADDS     r0,r0,r2
00001e  3830              SUBS     r0,r0,#0x30
000020  4a07              LDR      r2,|L95.64|
000022  6010              STR      r0,[r2,#0]  ; res
000024  4807              LDR      r0,|L95.68|
000026  6800              LDR      r0,[r0,#0]            ;1123  ; iz
000028  1c40              ADDS     r0,r0,#1              ;1123
00002a  4a06              LDR      r2,|L95.68|
00002c  6010              STR      r0,[r2,#0]            ;1123  ; iz
                  |L95.46|
00002e  4805              LDR      r0,|L95.68|
000030  6800              LDR      r0,[r0,#0]            ;1123  ; iz
000032  5c08              LDRB     r0,[r1,r0]            ;1123
000034  2800              CMP      r0,#0                 ;1123
000036  d1ea              BNE      |L95.14|
;;;1125   
;;;1126       // return result.
;;;1127       return res;
000038  4801              LDR      r0,|L95.64|
00003a  6800              LDR      r0,[r0,#0]  ; res
;;;1128   }
00003c  4770              BX       lr
;;;1129   
                          ENDP

00003e  0000              DCW      0x0000
                  |L95.64|
                          DCD      ||res||
                  |L95.68|
                          DCD      ||iz||

                          AREA ||i.GPS_COLLECT||, COMGROUP=GPS_COLLECT, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT PROC
;;;1152   
;;;1153   __inline void GPS_COLLECT()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1154   {imeiinc=0;
000002  2000              MOVS     r0,#0
000004  49cb              LDR      r1,|L102.820|
000006  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1155   delay(200);
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       delay
;;;1156   clear();
00000e  f7fffffe          BL       clear
;;;1157   //adc_read(8);							
;;;1158   //memset(fuelstr,0,5);
;;;1159   //sprintf(fuelstr,"%d,",fuel);	
;;;1160   
;;;1161   
;;;1162   
;;;1163   	
;;;1164   memset(imei,0,20);
000012  2114              MOVS     r1,#0x14
000014  48c8              LDR      r0,|L102.824|
000016  f7fffffe          BL       __aeabi_memclr
;;;1165   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
00001a  200a              MOVS     r0,#0xa
00001c  4bc7              LDR      r3,|L102.828|
00001e  4ac8              LDR      r2,|L102.832|
000020  49c8              LDR      r1,|L102.836|
000022  9000              STR      r0,[sp,#0]
000024  48c8              LDR      r0,|L102.840|
000026  f7fffffe          BL       send_GSM
;;;1166   for(i=0;i<strlen(uart_string_gsm);i++){
00002a  2000              MOVS     r0,#0
00002c  49c7              LDR      r1,|L102.844|
00002e  6008              STR      r0,[r1,#0]  ; i
000030  e01d              B        |L102.110|
                  |L102.50|
;;;1167   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
000032  48c7              LDR      r0,|L102.848|
000034  49c5              LDR      r1,|L102.844|
000036  6809              LDR      r1,[r1,#0]  ; i
000038  5c40              LDRB     r0,[r0,r1]
00003a  282f              CMP      r0,#0x2f
00003c  dd12              BLE      |L102.100|
00003e  48c4              LDR      r0,|L102.848|
000040  49c2              LDR      r1,|L102.844|
000042  6809              LDR      r1,[r1,#0]  ; i
000044  5c40              LDRB     r0,[r0,r1]
000046  283a              CMP      r0,#0x3a
000048  da0c              BGE      |L102.100|
;;;1168   			imei[imeiinc] = uart_string_gsm[i];
00004a  48c1              LDR      r0,|L102.848|
00004c  49bf              LDR      r1,|L102.844|
00004e  6809              LDR      r1,[r1,#0]  ; i
000050  5c40              LDRB     r0,[r0,r1]
000052  49b9              LDR      r1,|L102.824|
000054  4ab7              LDR      r2,|L102.820|
000056  6812              LDR      r2,[r2,#0]  ; imeiinc
000058  5488              STRB     r0,[r1,r2]
;;;1169   			imeiinc++;
00005a  48b6              LDR      r0,|L102.820|
00005c  6800              LDR      r0,[r0,#0]  ; imeiinc
00005e  1c40              ADDS     r0,r0,#1
000060  49b4              LDR      r1,|L102.820|
000062  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L102.100|
000064  48b9              LDR      r0,|L102.844|
000066  6800              LDR      r0,[r0,#0]            ;1166  ; i
000068  1c40              ADDS     r0,r0,#1              ;1166
00006a  49b8              LDR      r1,|L102.844|
00006c  6008              STR      r0,[r1,#0]            ;1166  ; i
                  |L102.110|
00006e  48b8              LDR      r0,|L102.848|
000070  f7fffffe          BL       strlen
000074  49b5              LDR      r1,|L102.844|
000076  6809              LDR      r1,[r1,#0]            ;1166  ; i
000078  4288              CMP      r0,r1                 ;1166
00007a  d8da              BHI      |L102.50|
;;;1170   		}
;;;1171   }
;;;1172   clear();	
00007c  f7fffffe          BL       clear
;;;1173   
;;;1174   
;;;1175   
;;;1176   
;;;1177   
;;;1178   time52=15;	
000080  200f              MOVS     r0,#0xf
000082  49b4              LDR      r1,|L102.852|
000084  6008              STR      r0,[r1,#0]  ; time52
;;;1179   
;;;1180   
;;;1181   //Triggerus(triggerdelay);
;;;1182   Triggerus();
000086  f7fffffe          BL       Triggerus
;;;1183   
;;;1184   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
00008a  48b3              LDR      r0,|L102.856|
00008c  6800              LDR      r0,[r0,#0]  ; tmeout
00008e  4bb3              LDR      r3,|L102.860|
000090  4aaa              LDR      r2,|L102.828|
000092  49ac              LDR      r1,|L102.836|
000094  9000              STR      r0,[sp,#0]
000096  48b2              LDR      r0,|L102.864|
000098  f7fffffe          BL       send_GSM
;;;1185   	// not sleep	
;;;1186   	memset(num2,0,30);
00009c  211e              MOVS     r1,#0x1e
00009e  48b1              LDR      r0,|L102.868|
0000a0  f7fffffe          BL       __aeabi_memclr
;;;1187   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
0000a4  48af              LDR      r0,|L102.868|
0000a6  210d              MOVS     r1,#0xd
0000a8  232c              MOVS     r3,#0x2c
0000aa  2205              MOVS     r2,#5
0000ac  9100              STR      r1,[sp,#0]
0000ae  9001              STR      r0,[sp,#4]
0000b0  2102              MOVS     r1,#2
0000b2  48a7              LDR      r0,|L102.848|
0000b4  f7fffffe          BL       parse_g
;;;1188   	voltagecbc=myAtoi(num2);
0000b8  48aa              LDR      r0,|L102.868|
0000ba  f7fffffe          BL       myAtoi
0000be  49aa              LDR      r1,|L102.872|
0000c0  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1189   memset(ignstr,0,2);
0000c2  48aa              LDR      r0,|L102.876|
0000c4  2100              MOVS     r1,#0
0000c6  7001              STRB     r1,[r0,#0]
0000c8  7041              STRB     r1,[r0,#1]
;;;1190   if(GPIOB_PDIR & 0x00000001){
0000ca  48a9              LDR      r0,|L102.880|
0000cc  6900              LDR      r0,[r0,#0x10]
0000ce  07c0              LSLS     r0,r0,#31
0000d0  0fc0              LSRS     r0,r0,#31
0000d2  2800              CMP      r0,#0
0000d4  d005              BEQ      |L102.226|
;;;1191   			sprintf(ignstr,"%d",1);
0000d6  2201              MOVS     r2,#1
0000d8  49a6              LDR      r1,|L102.884|
0000da  48a4              LDR      r0,|L102.876|
0000dc  f7fffffe          BL       __2sprintf
0000e0  e004              B        |L102.236|
                  |L102.226|
;;;1192   }
;;;1193   else{
;;;1194   				sprintf(ignstr,"%d",0);
0000e2  2200              MOVS     r2,#0
0000e4  49a3              LDR      r1,|L102.884|
0000e6  48a1              LDR      r0,|L102.876|
0000e8  f7fffffe          BL       __2sprintf
                  |L102.236|
;;;1195   
;;;1196   }
;;;1197   
;;;1198   //memset(acstr,0,2); //ptb2
;;;1199   //if(GPIOB_PDIR & 0x00000004){
;;;1200   //			sprintf(acstr,"%d",1);
;;;1201   //}
;;;1202   //else{
;;;1203   //			sprintf(acstr,"%d",0);
;;;1204   
;;;1205   //}
;;;1206   
;;;1207   
;;;1208   if(int_erval>60){int_erval=5;}
0000ec  48a2              LDR      r0,|L102.888|
0000ee  6800              LDR      r0,[r0,#0]  ; int_erval
0000f0  283c              CMP      r0,#0x3c
0000f2  dd02              BLE      |L102.250|
0000f4  2005              MOVS     r0,#5
0000f6  49a0              LDR      r1,|L102.888|
0000f8  6008              STR      r0,[r1,#0]  ; int_erval
                  |L102.250|
;;;1209   while(lpticks<int_erval);
0000fa  bf00              NOP      
                  |L102.252|
0000fc  489f              LDR      r0,|L102.892|
0000fe  6800              LDR      r0,[r0,#0]  ; lpticks
000100  499d              LDR      r1,|L102.888|
000102  6809              LDR      r1,[r1,#0]  ; int_erval
000104  4288              CMP      r0,r1
000106  dbf9              BLT      |L102.252|
;;;1210   get_gpsdata();
000108  f7fffffe          BL       get_gpsdata
;;;1211   lpticks=0;
00010c  2000              MOVS     r0,#0
00010e  499b              LDR      r1,|L102.892|
000110  6008              STR      r0,[r1,#0]  ; lpticks
;;;1212   
;;;1213   parse_g(rmc, 3, 4, ',', ',' ,lati);
000112  489b              LDR      r0,|L102.896|
000114  212c              MOVS     r1,#0x2c
000116  460b              MOV      r3,r1
000118  2204              MOVS     r2,#4
00011a  9100              STR      r1,[sp,#0]
00011c  9001              STR      r0,[sp,#4]
00011e  2103              MOVS     r1,#3
000120  4898              LDR      r0,|L102.900|
000122  f7fffffe          BL       parse_g
;;;1214   parse_g(rmc, 5, 6, ',', ',' ,longi);
000126  4898              LDR      r0,|L102.904|
000128  212c              MOVS     r1,#0x2c
00012a  460b              MOV      r3,r1
00012c  2206              MOVS     r2,#6
00012e  9100              STR      r1,[sp,#0]
000130  9001              STR      r0,[sp,#4]
000132  2105              MOVS     r1,#5
000134  4893              LDR      r0,|L102.900|
000136  f7fffffe          BL       parse_g
;;;1215   parse_g(rmc, 7, 8, ',', ',' ,velocity);
00013a  4894              LDR      r0,|L102.908|
00013c  212c              MOVS     r1,#0x2c
00013e  460b              MOV      r3,r1
000140  2208              MOVS     r2,#8
000142  9100              STR      r1,[sp,#0]
000144  9001              STR      r0,[sp,#4]
000146  2107              MOVS     r1,#7
000148  488e              LDR      r0,|L102.900|
00014a  f7fffffe          BL       parse_g
;;;1216   		
;;;1217   		speed = stof(velocity);
00014e  488f              LDR      r0,|L102.908|
000150  f7fffffe          BL       stof
000154  498e              LDR      r1,|L102.912|
000156  6008              STR      r0,[r1,#0]  ; speed
;;;1218   		c=stof(lati);//7523.7412
000158  4889              LDR      r0,|L102.896|
00015a  f7fffffe          BL       stof
00015e  4604              MOV      r4,r0
000160  f7fffffe          BL       __aeabi_f2d
000164  4a8b              LDR      r2,|L102.916|
000166  c203              STM      r2!,{r0,r1}
;;;1219   		hh= c/100; //75
000168  2200              MOVS     r2,#0
00016a  4b8b              LDR      r3,|L102.920|
00016c  4989              LDR      r1,|L102.916|
00016e  c903              LDM      r1,{r0,r1}
000170  f7fffffe          BL       __aeabi_ddiv
000174  4604              MOV      r4,r0
000176  f7fffffe          BL       __aeabi_d2iz
00017a  4988              LDR      r1,|L102.924|
00017c  6008              STR      r0,[r1,#0]  ; hh
;;;1220   		hh11 = c/100; //75.237412
00017e  2200              MOVS     r2,#0
000180  4b85              LDR      r3,|L102.920|
000182  4984              LDR      r1,|L102.916|
000184  c903              LDM      r1,{r0,r1}
000186  f7fffffe          BL       __aeabi_ddiv
00018a  4a85              LDR      r2,|L102.928|
00018c  c203              STM      r2!,{r0,r1}
;;;1221   		mm11 = hh11-hh; //.237412
00018e  4883              LDR      r0,|L102.924|
000190  6800              LDR      r0,[r0,#0]  ; hh
000192  f7fffffe          BL       __aeabi_i2d
000196  4604              MOV      r4,r0
000198  4881              LDR      r0,|L102.928|
00019a  c80c              LDM      r0!,{r2,r3}
00019c  4620              MOV      r0,r4
00019e  f7fffffe          BL       __aeabi_drsub
0001a2  4a80              LDR      r2,|L102.932|
0001a4  c203              STM      r2!,{r0,r1}
;;;1222   		mm11*=100;
0001a6  2200              MOVS     r2,#0
0001a8  4b7b              LDR      r3,|L102.920|
0001aa  497e              LDR      r1,|L102.932|
0001ac  c903              LDM      r1,{r0,r1}
0001ae  f7fffffe          BL       __aeabi_dmul
0001b2  4a7c              LDR      r2,|L102.932|
0001b4  c203              STM      r2!,{r0,r1}
;;;1223   		mm22=hh+mm11/60;	
0001b6  2200              MOVS     r2,#0
0001b8  4b7b              LDR      r3,|L102.936|
0001ba  497a              LDR      r1,|L102.932|
0001bc  c903              LDM      r1,{r0,r1}
0001be  f7fffffe          BL       __aeabi_ddiv
0001c2  4604              MOV      r4,r0
0001c4  460d              MOV      r5,r1
0001c6  4875              LDR      r0,|L102.924|
0001c8  6800              LDR      r0,[r0,#0]  ; hh
0001ca  f7fffffe          BL       __aeabi_i2d
0001ce  4606              MOV      r6,r0
0001d0  4622              MOV      r2,r4
0001d2  462b              MOV      r3,r5
0001d4  f7fffffe          BL       __aeabi_dadd
0001d8  4a74              LDR      r2,|L102.940|
0001da  c203              STM      r2!,{r0,r1}
;;;1224   		memset(lati,0,15);
0001dc  210f              MOVS     r1,#0xf
0001de  4868              LDR      r0,|L102.896|
0001e0  f7fffffe          BL       __aeabi_memclr
;;;1225   		sprintf(lati,"%f",mm22);
0001e4  4871              LDR      r0,|L102.940|
0001e6  4972              LDR      r1,|L102.944|
0001e8  c80c              LDM      r0!,{r2,r3}
0001ea  4865              LDR      r0,|L102.896|
0001ec  f7fffffe          BL       __2sprintf
;;;1226   		c=stof(longi);//7523.7412
0001f0  4865              LDR      r0,|L102.904|
0001f2  f7fffffe          BL       stof
0001f6  4604              MOV      r4,r0
0001f8  f7fffffe          BL       __aeabi_f2d
0001fc  4a65              LDR      r2,|L102.916|
0001fe  c203              STM      r2!,{r0,r1}
;;;1227   		hh= c/100; //75
000200  2200              MOVS     r2,#0
000202  4b65              LDR      r3,|L102.920|
000204  4963              LDR      r1,|L102.916|
000206  c903              LDM      r1,{r0,r1}
000208  f7fffffe          BL       __aeabi_ddiv
00020c  4604              MOV      r4,r0
00020e  f7fffffe          BL       __aeabi_d2iz
000212  4962              LDR      r1,|L102.924|
000214  6008              STR      r0,[r1,#0]  ; hh
;;;1228   		hh11 = c/100; //75.237412
000216  2200              MOVS     r2,#0
000218  4b5f              LDR      r3,|L102.920|
00021a  495e              LDR      r1,|L102.916|
00021c  c903              LDM      r1,{r0,r1}
00021e  f7fffffe          BL       __aeabi_ddiv
000222  4a5f              LDR      r2,|L102.928|
000224  c203              STM      r2!,{r0,r1}
;;;1229   		mm11 = hh11-hh; //.237412
000226  485d              LDR      r0,|L102.924|
000228  6800              LDR      r0,[r0,#0]  ; hh
00022a  f7fffffe          BL       __aeabi_i2d
00022e  4604              MOV      r4,r0
000230  485b              LDR      r0,|L102.928|
000232  c80c              LDM      r0!,{r2,r3}
000234  4620              MOV      r0,r4
000236  f7fffffe          BL       __aeabi_drsub
00023a  4a5a              LDR      r2,|L102.932|
00023c  c203              STM      r2!,{r0,r1}
;;;1230   		mm11*=100;
00023e  2200              MOVS     r2,#0
000240  4b55              LDR      r3,|L102.920|
000242  4958              LDR      r1,|L102.932|
000244  c903              LDM      r1,{r0,r1}
000246  f7fffffe          BL       __aeabi_dmul
00024a  4a56              LDR      r2,|L102.932|
00024c  c203              STM      r2!,{r0,r1}
;;;1231   		mm22=hh+mm11/60;	
00024e  2200              MOVS     r2,#0
000250  4b55              LDR      r3,|L102.936|
000252  4954              LDR      r1,|L102.932|
000254  c903              LDM      r1,{r0,r1}
000256  f7fffffe          BL       __aeabi_ddiv
00025a  4604              MOV      r4,r0
00025c  460d              MOV      r5,r1
00025e  484f              LDR      r0,|L102.924|
000260  6800              LDR      r0,[r0,#0]  ; hh
000262  f7fffffe          BL       __aeabi_i2d
000266  4606              MOV      r6,r0
000268  4622              MOV      r2,r4
00026a  462b              MOV      r3,r5
00026c  f7fffffe          BL       __aeabi_dadd
000270  4a4e              LDR      r2,|L102.940|
000272  c203              STM      r2!,{r0,r1}
;;;1232   		memset(longi,0,15);
000274  210f              MOVS     r1,#0xf
000276  4844              LDR      r0,|L102.904|
000278  f7fffffe          BL       __aeabi_memclr
;;;1233   		sprintf(longi,"%f",mm22);	
00027c  484b              LDR      r0,|L102.940|
00027e  494c              LDR      r1,|L102.944|
000280  c80c              LDM      r0!,{r2,r3}
000282  4841              LDR      r0,|L102.904|
000284  f7fffffe          BL       __2sprintf
;;;1234   		strcat(data,imei);
000288  492b              LDR      r1,|L102.824|
00028a  484a              LDR      r0,|L102.948|
00028c  f7fffffe          BL       strcat
;;;1235   		strcat(data,",");	
000290  4949              LDR      r1,|L102.952|
000292  4848              LDR      r0,|L102.948|
000294  f7fffffe          BL       strcat
;;;1236   		strcat(data,"$GxGGA");	
000298  4948              LDR      r1,|L102.956|
00029a  4846              LDR      r0,|L102.948|
00029c  f7fffffe          BL       strcat
;;;1237   		strcat(data,gga);
0002a0  4947              LDR      r1,|L102.960|
0002a2  4844              LDR      r0,|L102.948|
0002a4  f7fffffe          BL       strcat
;;;1238   		strcat(data,",$GxRMC");	
0002a8  4946              LDR      r1,|L102.964|
0002aa  4842              LDR      r0,|L102.948|
0002ac  f7fffffe          BL       strcat
;;;1239   		strcat(data,rmc);	
0002b0  4934              LDR      r1,|L102.900|
0002b2  4840              LDR      r0,|L102.948|
0002b4  f7fffffe          BL       strcat
;;;1240   		strcat(data,",");	
0002b8  493f              LDR      r1,|L102.952|
0002ba  483e              LDR      r0,|L102.948|
0002bc  f7fffffe          BL       strcat
;;;1241   		strcat(data,num2);	
0002c0  4928              LDR      r1,|L102.868|
0002c2  483c              LDR      r0,|L102.948|
0002c4  f7fffffe          BL       strcat
;;;1242   		strcat(data,",SS=");
0002c8  493f              LDR      r1,|L102.968|
0002ca  483a              LDR      r0,|L102.948|
0002cc  f7fffffe          BL       strcat
;;;1243   //	adc_read(9);							
;;;1244   //	memset(fuelstr,0,5);
;;;1245   //	sprintf(fuelstr,"%d,",fuel);
;;;1246   		strcat(data,sonicsensor);		
0002d0  493e              LDR      r1,|L102.972|
0002d2  4838              LDR      r0,|L102.948|
0002d4  f7fffffe          BL       strcat
;;;1247   		strcat(data,",AC=");	
0002d8  493d              LDR      r1,|L102.976|
0002da  4836              LDR      r0,|L102.948|
0002dc  f7fffffe          BL       strcat
;;;1248   		strcat(data,acstr);
0002e0  493c              LDR      r1,|L102.980|
0002e2  4834              LDR      r0,|L102.948|
0002e4  f7fffffe          BL       strcat
;;;1249   		strcat(data,",I=");	
0002e8  493b              LDR      r1,|L102.984|
0002ea  4832              LDR      r0,|L102.948|
0002ec  f7fffffe          BL       strcat
;;;1250   		strcat(data,ignstr);
0002f0  491e              LDR      r1,|L102.876|
0002f2  4830              LDR      r0,|L102.948|
0002f4  f7fffffe          BL       strcat
;;;1251   		strcat(data,",");	
0002f8  492f              LDR      r1,|L102.952|
0002fa  482e              LDR      r0,|L102.948|
0002fc  f7fffffe          BL       strcat
;;;1252   	memset(fuelstr,0,5);
000300  2105              MOVS     r1,#5
000302  4836              LDR      r0,|L102.988|
000304  f7fffffe          BL       __aeabi_memclr4
;;;1253   	sprintf(fuelstr,"%d,",rtcticks2);
000308  4835              LDR      r0,|L102.992|
00030a  4936              LDR      r1,|L102.996|
00030c  6802              LDR      r2,[r0,#0]  ; rtcticks2
00030e  4833              LDR      r0,|L102.988|
000310  f7fffffe          BL       __2sprintf
;;;1254   		strcat(data,fuelstr);	
000314  4931              LDR      r1,|L102.988|
000316  4827              LDR      r0,|L102.948|
000318  f7fffffe          BL       strcat
;;;1255   		
;;;1256   		
;;;1257   //		strcat(data,sprintf(rtcticks2);
;;;1258   		if( !(GPIOC_PDIR & 0x00000001)){
00031c  4814              LDR      r0,|L102.880|
00031e  3040              ADDS     r0,r0,#0x40
000320  6900              LDR      r0,[r0,#0x10]
000322  07c0              LSLS     r0,r0,#31
000324  0fc0              LSRS     r0,r0,#31
000326  2800              CMP      r0,#0
000328  d003              BEQ      |L102.818|
;;;1259   		}
;;;1260   		else{strcat(data,",BR*");}
00032a  492f              LDR      r1,|L102.1000|
00032c  4821              LDR      r0,|L102.948|
00032e  f7fffffe          BL       strcat
                  |L102.818|
;;;1261   //return 0;
;;;1262   }
000332  bdfe              POP      {r1-r7,pc}
;;;1263   
                          ENDP

                  |L102.820|
                          DCD      imeiinc
                  |L102.824|
                          DCD      imei
                  |L102.828|
                          DCD      ||.conststring||+0xe0
                  |L102.832|
                          DCD      ||.conststring||+0x18
                  |L102.836|
                          DCD      ||.conststring||+0x2c
                  |L102.840|
                          DCD      ||.conststring||+0xf0
                  |L102.844|
                          DCD      i
                  |L102.848|
                          DCD      uart_string_gsm
                  |L102.852|
                          DCD      time52
                  |L102.856|
                          DCD      tmeout
                  |L102.860|
                          DCD      ||.conststring||+0x10
                  |L102.864|
                          DCD      ||.conststring||+0x100
                  |L102.868|
                          DCD      num2
                  |L102.872|
                          DCD      voltagecbc
                  |L102.876|
                          DCD      ignstr
                  |L102.880|
                          DCD      0x400ff040
                  |L102.884|
                          DCD      ||.conststring||+0x110
                  |L102.888|
                          DCD      int_erval
                  |L102.892|
                          DCD      lpticks
                  |L102.896|
                          DCD      lati
                  |L102.900|
                          DCD      ||rmc||
                  |L102.904|
                          DCD      longi
                  |L102.908|
                          DCD      velocity
                  |L102.912|
                          DCD      speed
                  |L102.916|
                          DCD      c
                  |L102.920|
                          DCD      0x40590000
                  |L102.924|
                          DCD      ||hh||
                  |L102.928|
                          DCD      hh11
                  |L102.932|
                          DCD      mm11
                  |L102.936|
                          DCD      0x404e0000
                  |L102.940|
                          DCD      mm22
                  |L102.944|
                          DCD      ||.conststring||+0x114
                  |L102.948|
                          DCD      data
                  |L102.952|
                          DCD      ||.conststring||+0x118
                  |L102.956|
                          DCD      ||.conststring||+0x11c
                  |L102.960|
                          DCD      gga
                  |L102.964|
                          DCD      ||.conststring||+0x124
                  |L102.968|
                          DCD      ||.conststring||+0x12c
                  |L102.972|
                          DCD      sonicsensor
                  |L102.976|
                          DCD      ||.conststring||+0x134
                  |L102.980|
                          DCD      acstr
                  |L102.984|
                          DCD      ||.conststring||+0x13c
                  |L102.988|
                          DCD      fuelstr
                  |L102.992|
                          DCD      rtcticks2
                  |L102.996|
                          DCD      ||.conststring||+0x140
                  |L102.1000|
                          DCD      ||.conststring||+0x144

                          AREA ||i.save_interval||, COMGROUP=save_interval, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_interval PROC
;;;1194   
;;;1195   __inline void save_interval()
000000  b538              PUSH     {r3-r5,lr}
;;;1196   {
;;;1197   	
;;;1198   send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L109.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L109.208|
000008  4a32              LDR      r2,|L109.212|
00000a  4933              LDR      r1,|L109.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L109.220|
000010  f7fffffe          BL       send_GSM
;;;1199   
;;;1200   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L109.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1201   	sprintf(at_,"\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",strlen(interval)+11);	
00001c  4831              LDR      r0,|L109.228|
00001e  f7fffffe          BL       strlen
000022  4604              MOV      r4,r0
000024  340b              ADDS     r4,r4,#0xb
000026  4622              MOV      r2,r4
000028  492f              LDR      r1,|L109.232|
00002a  482d              LDR      r0,|L109.224|
00002c  f7fffffe          BL       __2sprintf
;;;1202   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000030  200a              MOVS     r0,#0xa
000032  4b27              LDR      r3,|L109.208|
000034  4a27              LDR      r2,|L109.212|
000036  492d              LDR      r1,|L109.236|
000038  9000              STR      r0,[sp,#0]
00003a  4829              LDR      r0,|L109.224|
00003c  f7fffffe          BL       send_GSM
;;;1203   	//clear();
;;;1204   
;;;1205   	
;;;1206   	send_modem("|INTERVAL|");
000040  482b              LDR      r0,|L109.240|
000042  f7fffffe          BL       send_modem
;;;1207   		for(k=0;k<strlen(interval);k++)
000046  2000              MOVS     r0,#0
000048  492a              LDR      r1,|L109.244|
00004a  6008              STR      r0,[r1,#0]  ; k
00004c  e00b              B        |L109.102|
                  |L109.78|
;;;1208   		{
;;;1209   			uart_putchar(UART1_BASE_PTR, interval[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004e  4825              LDR      r0,|L109.228|
000050  4a28              LDR      r2,|L109.244|
000052  6812              LDR      r2,[r2,#0]  ; k
000054  5c81              LDRB     r1,[r0,r2]
000056  4828              LDR      r0,|L109.248|
000058  f7fffffe          BL       uart_putchar
00005c  4825              LDR      r0,|L109.244|
00005e  6800              LDR      r0,[r0,#0]            ;1207  ; k
000060  1c40              ADDS     r0,r0,#1              ;1207
000062  4924              LDR      r1,|L109.244|
000064  6008              STR      r0,[r1,#0]            ;1207  ; k
                  |L109.102|
000066  481f              LDR      r0,|L109.228|
000068  f7fffffe          BL       strlen
00006c  4921              LDR      r1,|L109.244|
00006e  6809              LDR      r1,[r1,#0]            ;1207  ; k
000070  4288              CMP      r0,r1                 ;1207
000072  d8ec              BHI      |L109.78|
;;;1210   		}	
;;;1211   			send_modem("|");			
000074  4821              LDR      r0,|L109.252|
000076  f7fffffe          BL       send_modem
;;;1212    
;;;1213   									k2=0;									//string array counter for uart 1
00007a  2000              MOVS     r0,#0
00007c  4920              LDR      r1,|L109.256|
00007e  6008              STR      r0,[r1,#0]  ; k2
;;;1214   									time=19999;						//timer counts to wait for characters in uart 1 									
000080  4820              LDR      r0,|L109.260|
000082  4921              LDR      r1,|L109.264|
000084  6008              STR      r0,[r1,#0]  ; time
;;;1215   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000086  e010              B        |L109.170|
                  |L109.136|
;;;1216   									{
;;;1217   									time--;
000088  481f              LDR      r0,|L109.264|
00008a  6800              LDR      r0,[r0,#0]  ; time
00008c  1e40              SUBS     r0,r0,#1
00008e  491e              LDR      r1,|L109.264|
000090  6008              STR      r0,[r1,#0]  ; time
;;;1218   									if(time % 2000 == 0)
000092  217d              MOVS     r1,#0x7d
000094  0109              LSLS     r1,r1,#4
000096  481c              LDR      r0,|L109.264|
000098  6800              LDR      r0,[r0,#0]  ; time
00009a  f7fffffe          BL       __aeabi_idivmod
00009e  2900              CMP      r1,#0
0000a0  d103              BNE      |L109.170|
;;;1219   										{
;;;1220   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1221   											uart_putchar(UART1_BASE_PTR,'\n');
0000a2  210a              MOVS     r1,#0xa
0000a4  4814              LDR      r0,|L109.248|
0000a6  f7fffffe          BL       uart_putchar
                  |L109.170|
0000aa  4918              LDR      r1,|L109.268|
0000ac  4818              LDR      r0,|L109.272|
0000ae  f7fffffe          BL       strstr
0000b2  2800              CMP      r0,#0                 ;1215
0000b4  d109              BNE      |L109.202|
0000b6  4814              LDR      r0,|L109.264|
0000b8  6800              LDR      r0,[r0,#0]            ;1215  ; time
0000ba  2801              CMP      r0,#1                 ;1215
0000bc  db05              BLT      |L109.202|
0000be  4915              LDR      r1,|L109.276|
0000c0  4813              LDR      r0,|L109.272|
0000c2  f7fffffe          BL       strstr
0000c6  2800              CMP      r0,#0                 ;1215
0000c8  d0de              BEQ      |L109.136|
                  |L109.202|
;;;1222   										}
;;;1223   	
;;;1224   									}
;;;1225   
;;;1226   
;;;1227   	
;;;1228   }	
0000ca  bd38              POP      {r3-r5,pc}
;;;1229   	
                          ENDP

                  |L109.204|
                          DCD      tmeout
                  |L109.208|
                          DCD      ||.conststring||+0x10
                  |L109.212|
                          DCD      ||.conststring||+0x18
                  |L109.216|
                          DCD      ||.conststring||+0x2c
                  |L109.220|
                          DCD      ||.conststring||+0x14c
                  |L109.224|
                          DCD      at_
                  |L109.228|
                          DCD      interval
                  |L109.232|
                          DCD      ||.conststring||+0x16c
                  |L109.236|
                          DCD      ||.conststring||+0x20
                  |L109.240|
                          DCD      ||.conststring||+0x194
                  |L109.244|
                          DCD      k
                  |L109.248|
                          DCD      0x4006b000
                  |L109.252|
                          DCD      ||.conststring||+0xdc
                  |L109.256|
                          DCD      ||k2||
                  |L109.260|
                          DCD      0x00004e1f
                  |L109.264|
                          DCD      time
                  |L109.268|
                          DCD      ||.conststring||+0x70
                  |L109.272|
                          DCD      uart_string_gsm
                  |L109.276|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.saveapn||, COMGROUP=saveapn, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  saveapn PROC
;;;1147   
;;;1148   __inline void saveapn(){
000000  b538              PUSH     {r3-r5,lr}
;;;1149   	
;;;1150   send_GSM("\nAT+FSCREATE=C:\\APN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L116.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L116.208|
000008  4a32              LDR      r2,|L116.212|
00000a  4933              LDR      r1,|L116.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L116.220|
000010  f7fffffe          BL       send_GSM
;;;1151   
;;;1152   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L116.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1153   	sprintf(at_,"\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",strlen(apn)+3);	
00001c  4831              LDR      r0,|L116.228|
00001e  f7fffffe          BL       strlen
000022  1cc4              ADDS     r4,r0,#3
000024  4622              MOV      r2,r4
000026  4930              LDR      r1,|L116.232|
000028  482d              LDR      r0,|L116.224|
00002a  f7fffffe          BL       __2sprintf
;;;1154   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
00002e  200a              MOVS     r0,#0xa
000030  4b27              LDR      r3,|L116.208|
000032  4a28              LDR      r2,|L116.212|
000034  492d              LDR      r1,|L116.236|
000036  9000              STR      r0,[sp,#0]
000038  4829              LDR      r0,|L116.224|
00003a  f7fffffe          BL       send_GSM
;;;1155   	//clear();
;;;1156   
;;;1157   	
;;;1158   	send_modem("|");
00003e  482c              LDR      r0,|L116.240|
000040  f7fffffe          BL       send_modem
;;;1159   		for(k=0;k<strlen(apn);k++)
000044  2000              MOVS     r0,#0
000046  492b              LDR      r1,|L116.244|
000048  6008              STR      r0,[r1,#0]  ; k
00004a  e00b              B        |L116.100|
                  |L116.76|
;;;1160   		{
;;;1161   			uart_putchar(UART1_BASE_PTR, apn[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004c  4825              LDR      r0,|L116.228|
00004e  4a29              LDR      r2,|L116.244|
000050  6812              LDR      r2,[r2,#0]  ; k
000052  5c81              LDRB     r1,[r0,r2]
000054  4828              LDR      r0,|L116.248|
000056  f7fffffe          BL       uart_putchar
00005a  4826              LDR      r0,|L116.244|
00005c  6800              LDR      r0,[r0,#0]            ;1159  ; k
00005e  1c40              ADDS     r0,r0,#1              ;1159
000060  4924              LDR      r1,|L116.244|
000062  6008              STR      r0,[r1,#0]            ;1159  ; k
                  |L116.100|
000064  481f              LDR      r0,|L116.228|
000066  f7fffffe          BL       strlen
00006a  4922              LDR      r1,|L116.244|
00006c  6809              LDR      r1,[r1,#0]            ;1159  ; k
00006e  4288              CMP      r0,r1                 ;1159
000070  d8ec              BHI      |L116.76|
;;;1162   		}	
;;;1163   			send_modem("|");			
000072  481f              LDR      r0,|L116.240|
000074  f7fffffe          BL       send_modem
;;;1164    
;;;1165   									k2=0;									//string array counter for uart 1
000078  2000              MOVS     r0,#0
00007a  4920              LDR      r1,|L116.252|
00007c  6008              STR      r0,[r1,#0]  ; k2
;;;1166   									time=19999;						//timer counts to wait for characters in uart 1 									
00007e  4820              LDR      r0,|L116.256|
000080  4920              LDR      r1,|L116.260|
000082  6008              STR      r0,[r1,#0]  ; time
;;;1167   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000084  e010              B        |L116.168|
                  |L116.134|
;;;1168   									{
;;;1169   									time--;
000086  481f              LDR      r0,|L116.260|
000088  6800              LDR      r0,[r0,#0]  ; time
00008a  1e40              SUBS     r0,r0,#1
00008c  491d              LDR      r1,|L116.260|
00008e  6008              STR      r0,[r1,#0]  ; time
;;;1170   									if(time % 2000 == 0)
000090  217d              MOVS     r1,#0x7d
000092  0109              LSLS     r1,r1,#4
000094  481b              LDR      r0,|L116.260|
000096  6800              LDR      r0,[r0,#0]  ; time
000098  f7fffffe          BL       __aeabi_idivmod
00009c  2900              CMP      r1,#0
00009e  d103              BNE      |L116.168|
;;;1171   										{
;;;1172   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1173   											uart_putchar(UART1_BASE_PTR,'\n');
0000a0  210a              MOVS     r1,#0xa
0000a2  4815              LDR      r0,|L116.248|
0000a4  f7fffffe          BL       uart_putchar
                  |L116.168|
0000a8  4917              LDR      r1,|L116.264|
0000aa  4818              LDR      r0,|L116.268|
0000ac  f7fffffe          BL       strstr
0000b0  2800              CMP      r0,#0                 ;1167
0000b2  d109              BNE      |L116.200|
0000b4  4813              LDR      r0,|L116.260|
0000b6  6800              LDR      r0,[r0,#0]            ;1167  ; time
0000b8  2801              CMP      r0,#1                 ;1167
0000ba  db05              BLT      |L116.200|
0000bc  4914              LDR      r1,|L116.272|
0000be  4813              LDR      r0,|L116.268|
0000c0  f7fffffe          BL       strstr
0000c4  2800              CMP      r0,#0                 ;1167
0000c6  d0de              BEQ      |L116.134|
                  |L116.200|
;;;1174   										}
;;;1175   	
;;;1176   									}
;;;1177   
;;;1178   
;;;1179   	
;;;1180   }
0000c8  bd38              POP      {r3-r5,pc}
;;;1181   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L116.204|
                          DCD      tmeout
                  |L116.208|
                          DCD      ||.conststring||+0x10
                  |L116.212|
                          DCD      ||.conststring||+0x18
                  |L116.216|
                          DCD      ||.conststring||+0x2c
                  |L116.220|
                          DCD      ||.conststring||+0x1a0
                  |L116.224|
                          DCD      at_
                  |L116.228|
                          DCD      apn
                  |L116.232|
                          DCD      ||.conststring||+0x1bc
                  |L116.236|
                          DCD      ||.conststring||+0x20
                  |L116.240|
                          DCD      ||.conststring||+0xdc
                  |L116.244|
                          DCD      k
                  |L116.248|
                          DCD      0x4006b000
                  |L116.252|
                          DCD      ||k2||
                  |L116.256|
                          DCD      0x00004e1f
                  |L116.260|
                          DCD      time
                  |L116.264|
                          DCD      ||.conststring||+0x70
                  |L116.268|
                          DCD      uart_string_gsm
                  |L116.272|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.msg_sim800||, COMGROUP=msg_sim800, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  msg_sim800 PROC
;;;1405   
;;;1406   __inline void msg_sim800() 
000000  b51f              PUSH     {r0-r4,lr}
;;;1407   {
;;;1408   		cond1=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L123.1024|
000006  6008              STR      r0,[r1,#0]  ; cond1
;;;1409   		cond2=0;
000008  49fe              LDR      r1,|L123.1028|
00000a  6008              STR      r0,[r1,#0]  ; cond2
;;;1410   		cond3=0;
00000c  49fe              LDR      r1,|L123.1032|
00000e  6008              STR      r0,[r1,#0]  ; cond3
;;;1411   		cond4=0;
000010  49fe              LDR      r1,|L123.1036|
000012  6008              STR      r0,[r1,#0]  ; cond4
;;;1412   		cond5=0;
000014  49fe              LDR      r1,|L123.1040|
000016  6008              STR      r0,[r1,#0]  ; cond5
;;;1413   		cond6=0;
000018  49fe              LDR      r1,|L123.1044|
00001a  6008              STR      r0,[r1,#0]  ; cond6
;;;1414   		cond7=0;
00001c  49fe              LDR      r1,|L123.1048|
00001e  6008              STR      r0,[r1,#0]  ; cond7
;;;1415   		cond8=0;
000020  49fe              LDR      r1,|L123.1052|
000022  6008              STR      r0,[r1,#0]  ; cond8
;;;1416   		cond9=0;
000024  49fe              LDR      r1,|L123.1056|
000026  6008              STR      r0,[r1,#0]  ; cond9
;;;1417   		cond10=0;
000028  49fe              LDR      r1,|L123.1060|
00002a  6008              STR      r0,[r1,#0]  ; cond10
;;;1418   		cond11=0;
00002c  49fe              LDR      r1,|L123.1064|
00002e  6008              STR      r0,[r1,#0]  ; cond11
;;;1419   		cond12=0;
000030  49fe              LDR      r1,|L123.1068|
000032  6008              STR      r0,[r1,#0]  ; cond12
;;;1420   		cond13=0;
000034  49fe              LDR      r1,|L123.1072|
000036  6008              STR      r0,[r1,#0]  ; cond13
;;;1421   		cond14=0;
000038  49fe              LDR      r1,|L123.1076|
00003a  6008              STR      r0,[r1,#0]  ; cond14
;;;1422   		cond15=0;		
00003c  49fe              LDR      r1,|L123.1080|
00003e  6008              STR      r0,[r1,#0]  ; cond15
;;;1423   	
;;;1424   //ringflag=1;	
;;;1425   	if(ringflag==1 )
000040  48fe              LDR      r0,|L123.1084|
000042  7800              LDRB     r0,[r0,#0]  ; ringflag
000044  2801              CMP      r0,#1
000046  d17d              BNE      |L123.324|
;;;1426   	{
;;;1427   		sleep_flag=0;
000048  2000              MOVS     r0,#0
00004a  49fd              LDR      r1,|L123.1088|
00004c  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1428       DTR_OFF;		// not sleep	
00004e  2080              MOVS     r0,#0x80
000050  49fc              LDR      r1,|L123.1092|
000052  6088              STR      r0,[r1,#8]
;;;1429   
;;;1430   delay(1000);
000054  207d              MOVS     r0,#0x7d
000056  00c0              LSLS     r0,r0,#3
000058  f7fffffe          BL       delay
;;;1431   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
00005c  48fa              LDR      r0,|L123.1096|
00005e  6800              LDR      r0,[r0,#0]  ; tmeout
000060  4bfa              LDR      r3,|L123.1100|
000062  4afb              LDR      r2,|L123.1104|
000064  49fb              LDR      r1,|L123.1108|
000066  9000              STR      r0,[sp,#0]
000068  48fb              LDR      r0,|L123.1112|
00006a  f7fffffe          BL       send_GSM
;;;1432   		
;;;1433   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);  		
00006e  48f6              LDR      r0,|L123.1096|
000070  6800              LDR      r0,[r0,#0]  ; tmeout
000072  4bf6              LDR      r3,|L123.1100|
000074  4af6              LDR      r2,|L123.1104|
000076  49f7              LDR      r1,|L123.1108|
000078  9000              STR      r0,[sp,#0]
00007a  48f8              LDR      r0,|L123.1116|
00007c  f7fffffe          BL       send_GSM
;;;1434   delay(1000);		
000080  207d              MOVS     r0,#0x7d
000082  00c0              LSLS     r0,r0,#3
000084  f7fffffe          BL       delay
;;;1435   		
;;;1436   
;;;1437   	send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000088  48ef              LDR      r0,|L123.1096|
00008a  6800              LDR      r0,[r0,#0]  ; tmeout
00008c  4bef              LDR      r3,|L123.1100|
00008e  4af0              LDR      r2,|L123.1104|
000090  49f0              LDR      r1,|L123.1108|
000092  9000              STR      r0,[sp,#0]
000094  48f2              LDR      r0,|L123.1120|
000096  f7fffffe          BL       send_GSM
;;;1438   	send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
00009a  48eb              LDR      r0,|L123.1096|
00009c  6800              LDR      r0,[r0,#0]  ; tmeout
00009e  4beb              LDR      r3,|L123.1100|
0000a0  4aeb              LDR      r2,|L123.1104|
0000a2  49ec              LDR      r1,|L123.1108|
0000a4  9000              STR      r0,[sp,#0]
0000a6  48ef              LDR      r0,|L123.1124|
0000a8  f7fffffe          BL       send_GSM
;;;1439   
;;;1440   					send_GSM("\r\nAT+CMGR=1\r\n", "OK\r\n", "ERROR" , "OK\r\n",tmeout);	
0000ac  48e6              LDR      r0,|L123.1096|
0000ae  6800              LDR      r0,[r0,#0]  ; tmeout
0000b0  4be8              LDR      r3,|L123.1108|
0000b2  4aed              LDR      r2,|L123.1128|
0000b4  4619              MOV      r1,r3
0000b6  9000              STR      r0,[sp,#0]
0000b8  48ec              LDR      r0,|L123.1132|
0000ba  f7fffffe          BL       send_GSM
;;;1441   					clear();
0000be  f7fffffe          BL       clear
;;;1442   					memset(num2,0,30);
0000c2  211e              MOVS     r1,#0x1e
0000c4  48ea              LDR      r0,|L123.1136|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1443   					parse_gsm(uart_string_gsm, 3, 4, num2);
0000ca  4be9              LDR      r3,|L123.1136|
0000cc  2204              MOVS     r2,#4
0000ce  2103              MOVS     r1,#3
0000d0  48e8              LDR      r0,|L123.1140|
0000d2  f7fffffe          BL       parse_gsm
;;;1444   			
;;;1445   						cond1=strstr(uart_string_gsm, "OWNER");	
0000d6  49e8              LDR      r1,|L123.1144|
0000d8  48e6              LDR      r0,|L123.1140|
0000da  f7fffffe          BL       strstr
0000de  49c8              LDR      r1,|L123.1024|
0000e0  6008              STR      r0,[r1,#0]  ; cond1
;;;1446   						cond2=strstr(uart_string_gsm, "LOCATION");
0000e2  49e6              LDR      r1,|L123.1148|
0000e4  48e3              LDR      r0,|L123.1140|
0000e6  f7fffffe          BL       strstr
0000ea  49c6              LDR      r1,|L123.1028|
0000ec  6008              STR      r0,[r1,#0]  ; cond2
;;;1447   						cond3=strstr(uart_string_gsm, "INTERVAL_");
0000ee  49e4              LDR      r1,|L123.1152|
0000f0  48e0              LDR      r0,|L123.1140|
0000f2  f7fffffe          BL       strstr
0000f6  49c4              LDR      r1,|L123.1032|
0000f8  6008              STR      r0,[r1,#0]  ; cond3
;;;1448   						cond4=strstr(uart_string_gsm, "START");
0000fa  49e2              LDR      r1,|L123.1156|
0000fc  48dd              LDR      r0,|L123.1140|
0000fe  f7fffffe          BL       strstr
000102  49c2              LDR      r1,|L123.1036|
000104  6008              STR      r0,[r1,#0]  ; cond4
;;;1449   						cond5=strstr(uart_string_gsm, "OWNER1");
000106  49e0              LDR      r1,|L123.1160|
000108  48da              LDR      r0,|L123.1140|
00010a  f7fffffe          BL       strstr
00010e  49c0              LDR      r1,|L123.1040|
000110  6008              STR      r0,[r1,#0]  ; cond5
;;;1450   						cond6=strstr(uart_string_gsm, "OWNER2");
000112  49de              LDR      r1,|L123.1164|
000114  48d7              LDR      r0,|L123.1140|
000116  f7fffffe          BL       strstr
00011a  49be              LDR      r1,|L123.1044|
00011c  6008              STR      r0,[r1,#0]  ; cond6
;;;1451   						cond7=strstr(uart_string_gsm, "OWNER3");
00011e  49dc              LDR      r1,|L123.1168|
000120  48d4              LDR      r0,|L123.1140|
000122  f7fffffe          BL       strstr
000126  49bc              LDR      r1,|L123.1048|
000128  6008              STR      r0,[r1,#0]  ; cond7
;;;1452   						cond8=strstr(uart_string_gsm, "DEBUG");
00012a  49da              LDR      r1,|L123.1172|
00012c  48d1              LDR      r0,|L123.1140|
00012e  f7fffffe          BL       strstr
000132  49ba              LDR      r1,|L123.1052|
000134  6008              STR      r0,[r1,#0]  ; cond8
;;;1453   						cond9=strstr(uart_string_gsm, "RESET");
000136  49d8              LDR      r1,|L123.1176|
000138  48ce              LDR      r0,|L123.1140|
00013a  f7fffffe          BL       strstr
00013e  49b8              LDR      r1,|L123.1056|
000140  6008              STR      r0,[r1,#0]  ; cond9
;;;1454   						cond10=strstr(uart_string_gsm, "IP");
000142  e000              B        |L123.326|
                  |L123.324|
000144  e3d4              B        |L123.2288|
                  |L123.326|
000146  49d5              LDR      r1,|L123.1180|
000148  48ca              LDR      r0,|L123.1140|
00014a  f7fffffe          BL       strstr
00014e  49b5              LDR      r1,|L123.1060|
000150  6008              STR      r0,[r1,#0]  ; cond10
;;;1455   						cond11=strstr(uart_string_gsm, "SUOWNER");	
000152  49d3              LDR      r1,|L123.1184|
000154  48c7              LDR      r0,|L123.1140|
000156  f7fffffe          BL       strstr
00015a  49b3              LDR      r1,|L123.1064|
00015c  6008              STR      r0,[r1,#0]  ; cond11
;;;1456   						cond12=strstr(uart_string_gsm, "SOWNER");	
00015e  49d1              LDR      r1,|L123.1188|
000160  48c4              LDR      r0,|L123.1140|
000162  f7fffffe          BL       strstr
000166  49b1              LDR      r1,|L123.1068|
000168  6008              STR      r0,[r1,#0]  ; cond12
;;;1457   						cond13=strstr(uart_string_gsm, "IGNITION ON");	
00016a  49cf              LDR      r1,|L123.1192|
00016c  48c1              LDR      r0,|L123.1140|
00016e  f7fffffe          BL       strstr
000172  49af              LDR      r1,|L123.1072|
000174  6008              STR      r0,[r1,#0]  ; cond13
;;;1458   						cond14=strstr(uart_string_gsm, "IGNITION OFF");	
000176  49cd              LDR      r1,|L123.1196|
000178  48be              LDR      r0,|L123.1140|
00017a  f7fffffe          BL       strstr
00017e  49ad              LDR      r1,|L123.1076|
000180  6008              STR      r0,[r1,#0]  ; cond14
;;;1459   						cond15=strstr(uart_string_gsm, "IGNSTAT");
000182  49cb              LDR      r1,|L123.1200|
000184  48bb              LDR      r0,|L123.1140|
000186  f7fffffe          BL       strstr
00018a  49ab              LDR      r1,|L123.1080|
00018c  6008              STR      r0,[r1,#0]  ; cond15
;;;1460   
;;;1461   							if(send_SOS==1){
00018e  48c9              LDR      r0,|L123.1204|
000190  6800              LDR      r0,[r0,#0]  ; send_SOS
000192  2801              CMP      r0,#1
000194  d147              BNE      |L123.550|
;;;1462   										
;;;1463   
;;;1464   								
;;;1465   								memset(data2,0,300);
000196  21ff              MOVS     r1,#0xff
000198  312d              ADDS     r1,r1,#0x2d
00019a  48c7              LDR      r0,|L123.1208|
00019c  f7fffffe          BL       __aeabi_memclr
;;;1466   								sprintf(data2,"\nThere is an Emergency please help:\nCoordinates:%sN,%sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,lati,'%',longi);	
0001a0  48c6              LDR      r0,|L123.1212|
0001a2  2125              MOVS     r1,#0x25
0001a4  4ac6              LDR      r2,|L123.1216|
0001a6  4603              MOV      r3,r0
0001a8  9200              STR      r2,[sp,#0]
0001aa  9101              STR      r1,[sp,#4]
0001ac  9002              STR      r0,[sp,#8]
0001ae  49c5              LDR      r1,|L123.1220|
0001b0  48c1              LDR      r0,|L123.1208|
0001b2  f7fffffe          BL       __2sprintf
;;;1467   								memset(num2,0,30);
0001b6  211e              MOVS     r1,#0x1e
0001b8  48ad              LDR      r0,|L123.1136|
0001ba  f7fffffe          BL       __aeabi_memclr
;;;1468   								send_GSM("\r\nAT+CPBR=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001be  48a2              LDR      r0,|L123.1096|
0001c0  6800              LDR      r0,[r0,#0]  ; tmeout
0001c2  4ba2              LDR      r3,|L123.1100|
0001c4  4aa2              LDR      r2,|L123.1104|
0001c6  49a3              LDR      r1,|L123.1108|
0001c8  9000              STR      r0,[sp,#0]
0001ca  48bf              LDR      r0,|L123.1224|
0001cc  f7fffffe          BL       send_GSM
;;;1469   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
0001d0  48a7              LDR      r0,|L123.1136|
0001d2  2122              MOVS     r1,#0x22
0001d4  460b              MOV      r3,r1
0001d6  2202              MOVS     r2,#2
0001d8  9100              STR      r1,[sp,#0]
0001da  9001              STR      r0,[sp,#4]
0001dc  2101              MOVS     r1,#1
0001de  48a5              LDR      r0,|L123.1140|
0001e0  f7fffffe          BL       parse_g
;;;1470   								send_message(data2);
0001e4  48b4              LDR      r0,|L123.1208|
0001e6  f7fffffe          BL       send_message
;;;1471   								memset(num2,0,30);
0001ea  211e              MOVS     r1,#0x1e
0001ec  48a0              LDR      r0,|L123.1136|
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1472   								send_GSM("\r\nAT+CPBR=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001f2  4895              LDR      r0,|L123.1096|
0001f4  6800              LDR      r0,[r0,#0]  ; tmeout
0001f6  4b95              LDR      r3,|L123.1100|
0001f8  4a95              LDR      r2,|L123.1104|
0001fa  4996              LDR      r1,|L123.1108|
0001fc  9000              STR      r0,[sp,#0]
0001fe  48b3              LDR      r0,|L123.1228|
000200  f7fffffe          BL       send_GSM
;;;1473   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
000204  489a              LDR      r0,|L123.1136|
000206  2122              MOVS     r1,#0x22
000208  460b              MOV      r3,r1
00020a  2202              MOVS     r2,#2
00020c  9100              STR      r1,[sp,#0]
00020e  9001              STR      r0,[sp,#4]
000210  2101              MOVS     r1,#1
000212  4898              LDR      r0,|L123.1140|
000214  f7fffffe          BL       parse_g
;;;1474   								send_message(data2);								
000218  48a7              LDR      r0,|L123.1208|
00021a  f7fffffe          BL       send_message
;;;1475   								send_SOS=0;
00021e  2000              MOVS     r0,#0
000220  49a4              LDR      r1,|L123.1204|
000222  6008              STR      r0,[r1,#0]  ; send_SOS
                  |L123.548|
000224  e34a              B        |L123.2236|
                  |L123.550|
;;;1476   							}
;;;1477   							else if(cond1 && cond2)
000226  4876              LDR      r0,|L123.1024|
000228  6800              LDR      r0,[r0,#0]  ; cond1
00022a  2800              CMP      r0,#0
00022c  d022              BEQ      |L123.628|
00022e  4875              LDR      r0,|L123.1028|
000230  6800              LDR      r0,[r0,#0]  ; cond2
000232  2800              CMP      r0,#0
000234  d01e              BEQ      |L123.628|
;;;1478   							{
;;;1479   								memset(data2,0,300);
000236  21ff              MOVS     r1,#0xff
000238  312d              ADDS     r1,r1,#0x2d
00023a  489f              LDR      r0,|L123.1208|
00023c  f7fffffe          BL       __aeabi_memclr
;;;1480   								sprintf(data2,"\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);	
000240  489e              LDR      r0,|L123.1212|
000242  2125              MOVS     r1,#0x25
000244  4a9e              LDR      r2,|L123.1216|
000246  4ba2              LDR      r3,|L123.1232|
000248  9300              STR      r3,[sp,#0]
00024a  9201              STR      r2,[sp,#4]
00024c  9102              STR      r1,[sp,#8]
00024e  9003              STR      r0,[sp,#0xc]
000250  4603              MOV      r3,r0
000252  49a0              LDR      r1,|L123.1236|
000254  4898              LDR      r0,|L123.1208|
000256  f7fffffe          BL       __2sprintf
;;;1481   
;;;1482   								{send_message(data2);}
00025a  4897              LDR      r0,|L123.1208|
00025c  f7fffffe          BL       send_message
;;;1483   
;;;1484   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000260  4879              LDR      r0,|L123.1096|
000262  6800              LDR      r0,[r0,#0]  ; tmeout
000264  4b79              LDR      r3,|L123.1100|
000266  4a7a              LDR      r2,|L123.1104|
000268  497a              LDR      r1,|L123.1108|
00026a  9000              STR      r0,[sp,#0]
00026c  489a              LDR      r0,|L123.1240|
00026e  f7fffffe          BL       send_GSM
000272  e7d7              B        |L123.548|
                  |L123.628|
;;;1485   								
;;;1486   								
;;;1487   							}
;;;1488   	
;;;1489   							else if(cond1 && cond3)
000274  4862              LDR      r0,|L123.1024|
000276  6800              LDR      r0,[r0,#0]  ; cond1
000278  2800              CMP      r0,#0
00027a  d026              BEQ      |L123.714|
00027c  4862              LDR      r0,|L123.1032|
00027e  6800              LDR      r0,[r0,#0]  ; cond3
000280  2800              CMP      r0,#0
000282  d022              BEQ      |L123.714|
;;;1490   							{
;;;1491   								memset(at_,0,100);
000284  2164              MOVS     r1,#0x64
000286  4895              LDR      r0,|L123.1244|
000288  f7fffffe          BL       __aeabi_memclr
;;;1492   								memset(interval,0,5);
00028c  2105              MOVS     r1,#5
00028e  4894              LDR      r0,|L123.1248|
000290  f7fffffe          BL       __aeabi_memclr
;;;1493   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', interval);		
000294  4892              LDR      r0,|L123.1248|
000296  210d              MOVS     r1,#0xd
000298  2320              MOVS     r3,#0x20
00029a  2205              MOVS     r2,#5
00029c  9100              STR      r1,[sp,#0]
00029e  9001              STR      r0,[sp,#4]
0002a0  2103              MOVS     r1,#3
0002a2  4874              LDR      r0,|L123.1140|
0002a4  f7fffffe          BL       parse_g
;;;1494   								int_erval=myAtoi(interval);
0002a8  488d              LDR      r0,|L123.1248|
0002aa  f7fffffe          BL       myAtoi
0002ae  498d              LDR      r1,|L123.1252|
0002b0  6008              STR      r0,[r1,#0]  ; int_erval
;;;1495   								save_interval();			
0002b2  f7fffffe          BL       save_interval
;;;1496   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0002b6  4864              LDR      r0,|L123.1096|
0002b8  6800              LDR      r0,[r0,#0]  ; tmeout
0002ba  4b64              LDR      r3,|L123.1100|
0002bc  4a64              LDR      r2,|L123.1104|
0002be  4965              LDR      r1,|L123.1108|
0002c0  9000              STR      r0,[sp,#0]
0002c2  4885              LDR      r0,|L123.1240|
0002c4  f7fffffe          BL       send_GSM
0002c8  e7ac              B        |L123.548|
                  |L123.714|
;;;1497   
;;;1498   								
;;;1499   							}				
;;;1500   
;;;1501   						else if(cond8)
0002ca  4854              LDR      r0,|L123.1052|
0002cc  6800              LDR      r0,[r0,#0]  ; cond8
0002ce  2800              CMP      r0,#0
0002d0  d07d              BEQ      |L123.974|
;;;1502   							{
;;;1503   								
;;;1504   									memset(at_,0,100);
0002d2  2164              MOVS     r1,#0x64
0002d4  4881              LDR      r0,|L123.1244|
0002d6  f7fffffe          BL       __aeabi_memclr
;;;1505   									for(k=0;k<450;k++)
0002da  2000              MOVS     r0,#0
0002dc  4982              LDR      r1,|L123.1256|
0002de  6008              STR      r0,[r1,#0]  ; k
0002e0  e04e              B        |L123.896|
                  |L123.738|
;;;1506   									{
;;;1507   										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
0002e2  4881              LDR      r0,|L123.1256|
0002e4  6800              LDR      r0,[r0,#0]  ; k
0002e6  1e40              SUBS     r0,r0,#1
0002e8  4962              LDR      r1,|L123.1140|
0002ea  5c08              LDRB     r0,[r1,r0]
0002ec  2820              CMP      r0,#0x20
0002ee  d142              BNE      |L123.886|
0002f0  487d              LDR      r0,|L123.1256|
0002f2  6800              LDR      r0,[r0,#0]  ; k
0002f4  1e80              SUBS     r0,r0,#2
0002f6  5c08              LDRB     r0,[r1,r0]
0002f8  2847              CMP      r0,#0x47
0002fa  d13c              BNE      |L123.886|
0002fc  487a              LDR      r0,|L123.1256|
0002fe  6800              LDR      r0,[r0,#0]  ; k
000300  1ec0              SUBS     r0,r0,#3
000302  5c08              LDRB     r0,[r1,r0]
000304  2855              CMP      r0,#0x55
000306  d136              BNE      |L123.886|
;;;1508   										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
000308  4877              LDR      r0,|L123.1256|
00030a  6800              LDR      r0,[r0,#0]  ; k
00030c  1f00              SUBS     r0,r0,#4
00030e  5c08              LDRB     r0,[r1,r0]
000310  2842              CMP      r0,#0x42
000312  d130              BNE      |L123.886|
000314  4874              LDR      r0,|L123.1256|
000316  6800              LDR      r0,[r0,#0]  ; k
000318  1f40              SUBS     r0,r0,#5
00031a  5c08              LDRB     r0,[r1,r0]
00031c  2845              CMP      r0,#0x45
00031e  d12a              BNE      |L123.886|
000320  4871              LDR      r0,|L123.1256|
000322  6800              LDR      r0,[r0,#0]  ; k
000324  1f80              SUBS     r0,r0,#6
000326  5c08              LDRB     r0,[r1,r0]
000328  2844              CMP      r0,#0x44
00032a  d124              BNE      |L123.886|
;;;1509   										{
;;;1510   											for(i=0;i<100;i++)
00032c  2000              MOVS     r0,#0
00032e  496f              LDR      r1,|L123.1260|
000330  6008              STR      r0,[r1,#0]  ; i
000332  e011              B        |L123.856|
                  |L123.820|
;;;1511   											{
;;;1512   												at_[i]=uart_string_gsm[k];
000334  484f              LDR      r0,|L123.1140|
000336  496c              LDR      r1,|L123.1256|
000338  6809              LDR      r1,[r1,#0]  ; k
00033a  5c40              LDRB     r0,[r0,r1]
00033c  4967              LDR      r1,|L123.1244|
00033e  4a6b              LDR      r2,|L123.1260|
000340  6812              LDR      r2,[r2,#0]  ; i
000342  5488              STRB     r0,[r1,r2]
;;;1513   												k++;
000344  4868              LDR      r0,|L123.1256|
000346  6800              LDR      r0,[r0,#0]  ; k
000348  1c40              ADDS     r0,r0,#1
00034a  4967              LDR      r1,|L123.1256|
00034c  6008              STR      r0,[r1,#0]  ; k
00034e  4867              LDR      r0,|L123.1260|
000350  6800              LDR      r0,[r0,#0]            ;1510  ; i
000352  1c40              ADDS     r0,r0,#1              ;1510
000354  4965              LDR      r1,|L123.1260|
000356  6008              STR      r0,[r1,#0]            ;1510  ; i
                  |L123.856|
000358  4864              LDR      r0,|L123.1260|
00035a  6800              LDR      r0,[r0,#0]            ;1510  ; i
00035c  2864              CMP      r0,#0x64              ;1510
00035e  dbe9              BLT      |L123.820|
;;;1514   											}	
;;;1515   										at_[i+1]='\r';
000360  210d              MOVS     r1,#0xd
000362  4a5e              LDR      r2,|L123.1244|
000364  4861              LDR      r0,|L123.1260|
000366  6800              LDR      r0,[r0,#0]  ; i
000368  1c40              ADDS     r0,r0,#1
00036a  5411              STRB     r1,[r2,r0]
;;;1516   										at_[i+2]='\n';	
00036c  210a              MOVS     r1,#0xa
00036e  485f              LDR      r0,|L123.1260|
000370  6800              LDR      r0,[r0,#0]  ; i
000372  1c80              ADDS     r0,r0,#2
000374  5411              STRB     r1,[r2,r0]
                  |L123.886|
000376  485c              LDR      r0,|L123.1256|
000378  6800              LDR      r0,[r0,#0]            ;1505  ; k
00037a  1c40              ADDS     r0,r0,#1              ;1505
00037c  495a              LDR      r1,|L123.1256|
00037e  6008              STR      r0,[r1,#0]            ;1505  ; k
                  |L123.896|
000380  4859              LDR      r0,|L123.1256|
000382  6800              LDR      r0,[r0,#0]            ;1505  ; k
000384  21ff              MOVS     r1,#0xff              ;1505
000386  31c3              ADDS     r1,r1,#0xc3           ;1505
000388  4288              CMP      r0,r1                 ;1505
00038a  dbaa              BLT      |L123.738|
;;;1517   										}
;;;1518   										else{}
;;;1519   									}
;;;1520   									
;;;1521   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
00038c  482e              LDR      r0,|L123.1096|
00038e  6800              LDR      r0,[r0,#0]  ; tmeout
000390  4b2e              LDR      r3,|L123.1100|
000392  4a2f              LDR      r2,|L123.1104|
000394  492f              LDR      r1,|L123.1108|
000396  9000              STR      r0,[sp,#0]
000398  484f              LDR      r0,|L123.1240|
00039a  f7fffffe          BL       send_GSM
;;;1522   									  send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);		
00039e  482a              LDR      r0,|L123.1096|
0003a0  6800              LDR      r0,[r0,#0]  ; tmeout
0003a2  4b2a              LDR      r3,|L123.1100|
0003a4  4a2a              LDR      r2,|L123.1104|
0003a6  492b              LDR      r1,|L123.1108|
0003a8  9000              STR      r0,[sp,#0]
0003aa  484c              LDR      r0,|L123.1244|
0003ac  f7fffffe          BL       send_GSM
;;;1523   										memset(data2,0,strlen(data2));
0003b0  4841              LDR      r0,|L123.1208|
0003b2  f7fffffe          BL       strlen
0003b6  4604              MOV      r4,r0
0003b8  4621              MOV      r1,r4
0003ba  483f              LDR      r0,|L123.1208|
0003bc  f7fffffe          BL       __aeabi_memclr
;;;1524   										sprintf(data2,"%s",uart_string_gsm);	
0003c0  4a2c              LDR      r2,|L123.1140|
0003c2  494b              LDR      r1,|L123.1264|
0003c4  483c              LDR      r0,|L123.1208|
0003c6  f7fffffe          BL       __2sprintf
;;;1525   										send_message(data2);
0003ca  483b              LDR      r0,|L123.1208|
0003cc  e000              B        |L123.976|
                  |L123.974|
0003ce  e002              B        |L123.982|
                  |L123.976|
0003d0  f7fffffe          BL       send_message
0003d4  e726              B        |L123.548|
                  |L123.982|
;;;1526   										
;;;1527   									
;;;1528   								
;;;1529   							}
;;;1530   										
;;;1531   							else if(cond12 && cond4)
0003d6  4815              LDR      r0,|L123.1068|
0003d8  6800              LDR      r0,[r0,#0]  ; cond12
0003da  2800              CMP      r0,#0
0003dc  d00e              BEQ      |L123.1020|
0003de  480b              LDR      r0,|L123.1036|
0003e0  6800              LDR      r0,[r0,#0]  ; cond4
0003e2  2800              CMP      r0,#0
0003e4  d00a              BEQ      |L123.1020|
;;;1532   							{
;;;1533   								memset( apn,0,25);
0003e6  2119              MOVS     r1,#0x19
0003e8  4842              LDR      r0,|L123.1268|
0003ea  f7fffffe          BL       __aeabi_memclr
;;;1534   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', apn);			
0003ee  4841              LDR      r0,|L123.1268|
0003f0  210d              MOVS     r1,#0xd
0003f2  2320              MOVS     r3,#0x20
0003f4  2205              MOVS     r2,#5
0003f6  9100              STR      r1,[sp,#0]
0003f8  9001              STR      r0,[sp,#4]
0003fa  e07d              B        |L123.1272|
                  |L123.1020|
0003fc  e0e8              B        |L123.1488|
0003fe  0000              DCW      0x0000
                  |L123.1024|
                          DCD      cond1
                  |L123.1028|
                          DCD      cond2
                  |L123.1032|
                          DCD      cond3
                  |L123.1036|
                          DCD      cond4
                  |L123.1040|
                          DCD      cond5
                  |L123.1044|
                          DCD      cond6
                  |L123.1048|
                          DCD      cond7
                  |L123.1052|
                          DCD      cond8
                  |L123.1056|
                          DCD      cond9
                  |L123.1060|
                          DCD      cond10
                  |L123.1064|
                          DCD      cond11
                  |L123.1068|
                          DCD      cond12
                  |L123.1072|
                          DCD      cond13
                  |L123.1076|
                          DCD      cond14
                  |L123.1080|
                          DCD      cond15
                  |L123.1084|
                          DCD      ringflag
                  |L123.1088|
                          DCD      sleep_flag
                  |L123.1092|
                          DCD      0x400ff0c0
                  |L123.1096|
                          DCD      tmeout
                  |L123.1100|
                          DCD      ||.conststring||+0x10
                  |L123.1104|
                          DCD      ||.conststring||+0x18
                  |L123.1108|
                          DCD      ||.conststring||+0x70
                  |L123.1112|
                          DCD      ||.conststring||+0x1e0
                  |L123.1116|
                          DCD      ||.conststring||+0x1e8
                  |L123.1120|
                          DCD      ||.conststring||+0x1f4
                  |L123.1124|
                          DCD      ||.conststring||+0x204
                  |L123.1128|
                          DCD      ||.conststring||+0xe0
                  |L123.1132|
                          DCD      ||.conststring||+0x214
                  |L123.1136|
                          DCD      num2
                  |L123.1140|
                          DCD      uart_string_gsm
                  |L123.1144|
                          DCD      ||.conststring||+0x224
                  |L123.1148|
                          DCD      ||.conststring||+0x22c
                  |L123.1152|
                          DCD      ||.conststring||+0x238
                  |L123.1156|
                          DCD      ||.conststring||+0x244
                  |L123.1160|
                          DCD      ||.conststring||+0x24c
                  |L123.1164|
                          DCD      ||.conststring||+0x254
                  |L123.1168|
                          DCD      ||.conststring||+0x25c
                  |L123.1172|
                          DCD      ||.conststring||+0x264
                  |L123.1176|
                          DCD      ||.conststring||+0x26c
                  |L123.1180|
                          DCD      ||.conststring||+0x274
                  |L123.1184|
                          DCD      ||.conststring||+0x278
                  |L123.1188|
                          DCD      ||.conststring||+0x280
                  |L123.1192|
                          DCD      ||.conststring||+0x288
                  |L123.1196|
                          DCD      ||.conststring||+0x294
                  |L123.1200|
                          DCD      ||.conststring||+0x2a4
                  |L123.1204|
                          DCD      send_SOS
                  |L123.1208|
                          DCD      data2
                  |L123.1212|
                          DCD      longi
                  |L123.1216|
                          DCD      lati
                  |L123.1220|
                          DCD      ||.conststring||+0x2ac
                  |L123.1224|
                          DCD      ||.conststring||+0x320
                  |L123.1228|
                          DCD      ||.conststring||+0x330
                  |L123.1232|
                          DCD      velocity
                  |L123.1236|
                          DCD      ||.conststring||+0x340
                  |L123.1240|
                          DCD      ||.conststring||+0x3a8
                  |L123.1244|
                          DCD      at_
                  |L123.1248|
                          DCD      interval
                  |L123.1252|
                          DCD      int_erval
                  |L123.1256|
                          DCD      k
                  |L123.1260|
                          DCD      i
                  |L123.1264|
                          DCD      ||.conststring||+0x3b8
                  |L123.1268|
                          DCD      apn
                  |L123.1272|
0004f8  2103              MOVS     r1,#3
0004fa  48fe              LDR      r0,|L123.2292|
0004fc  f7fffffe          BL       parse_g
;;;1535   								saveapn();								
000500  f7fffffe          BL       saveapn
;;;1536   								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000504  48fc              LDR      r0,|L123.2296|
000506  6800              LDR      r0,[r0,#0]  ; tmeout
000508  4bfc              LDR      r3,|L123.2300|
00050a  4afd              LDR      r2,|L123.2304|
00050c  49fd              LDR      r1,|L123.2308|
00050e  9000              STR      r0,[sp,#0]
000510  48fd              LDR      r0,|L123.2312|
000512  f7fffffe          BL       send_GSM
;;;1537   								send_GSM("\nAT+FSCREATE=D:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000516  48f8              LDR      r0,|L123.2296|
000518  6800              LDR      r0,[r0,#0]  ; tmeout
00051a  4bf8              LDR      r3,|L123.2300|
00051c  4af8              LDR      r2,|L123.2304|
00051e  49f9              LDR      r1,|L123.2308|
000520  9000              STR      r0,[sp,#0]
000522  48fa              LDR      r0,|L123.2316|
000524  f7fffffe          BL       send_GSM
;;;1538   								send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000528  48f3              LDR      r0,|L123.2296|
00052a  6800              LDR      r0,[r0,#0]  ; tmeout
00052c  4bf3              LDR      r3,|L123.2300|
00052e  4af4              LDR      r2,|L123.2304|
000530  49f4              LDR      r1,|L123.2308|
000532  9000              STR      r0,[sp,#0]
000534  48f6              LDR      r0,|L123.2320|
000536  f7fffffe          BL       send_GSM
;;;1539   								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00053a  48ef              LDR      r0,|L123.2296|
00053c  6800              LDR      r0,[r0,#0]  ; tmeout
00053e  4bef              LDR      r3,|L123.2300|
000540  4aef              LDR      r2,|L123.2304|
000542  49f0              LDR      r1,|L123.2308|
000544  9000              STR      r0,[sp,#0]
000546  48f3              LDR      r0,|L123.2324|
000548  f7fffffe          BL       send_GSM
;;;1540   								send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00054c  48ea              LDR      r0,|L123.2296|
00054e  6800              LDR      r0,[r0,#0]  ; tmeout
000550  4bea              LDR      r3,|L123.2300|
000552  4aeb              LDR      r2,|L123.2304|
000554  49eb              LDR      r1,|L123.2308|
000556  9000              STR      r0,[sp,#0]
000558  48ef              LDR      r0,|L123.2328|
00055a  f7fffffe          BL       send_GSM
;;;1541   
;;;1542   								memset(ip,0,100);
00055e  2164              MOVS     r1,#0x64
000560  48ee              LDR      r0,|L123.2332|
000562  f7fffffe          BL       __aeabi_memclr
;;;1543   								memset(port,0,10);
000566  210a              MOVS     r1,#0xa
000568  48ed              LDR      r0,|L123.2336|
00056a  f7fffffe          BL       __aeabi_memclr
;;;1544   								strcat (ip, "rudra.jellyfishtele.com");
00056e  49ed              LDR      r1,|L123.2340|
000570  48ea              LDR      r0,|L123.2332|
000572  f7fffffe          BL       strcat
;;;1545   								strcat (port, "5555");		
000576  49ec              LDR      r1,|L123.2344|
000578  48e9              LDR      r0,|L123.2336|
00057a  f7fffffe          BL       strcat
;;;1546   								memcpy (interval, "5", 1);										
00057e  48eb              LDR      r0,|L123.2348|
000580  49eb              LDR      r1,|L123.2352|
000582  7809              LDRB     r1,[r1,#0]
000584  7001              STRB     r1,[r0,#0]
;;;1547   								save_ip_port();
000586  f7fffffe          BL       save_ip_port
;;;1548   								ignstaton();
00058a  f7fffffe          BL       ignstaton
;;;1549   
;;;1550   								save_interval();	
00058e  f7fffffe          BL       save_interval
;;;1551   								int_erval=myAtoi(interval);		
000592  48e6              LDR      r0,|L123.2348|
000594  f7fffffe          BL       myAtoi
000598  49e6              LDR      r1,|L123.2356|
00059a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1552   								savecursord();
00059c  f7fffffe          BL       savecursord
;;;1553   
;;;1554   			//					printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
;;;1555   								
;;;1556   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
0005a0  48d5              LDR      r0,|L123.2296|
0005a2  6800              LDR      r0,[r0,#0]  ; tmeout
0005a4  4bd5              LDR      r3,|L123.2300|
0005a6  4ae4              LDR      r2,|L123.2360|
0005a8  49d6              LDR      r1,|L123.2308|
0005aa  9000              STR      r0,[sp,#0]
0005ac  48e3              LDR      r0,|L123.2364|
0005ae  f7fffffe          BL       send_GSM
;;;1557   
;;;1558   								
;;;1559   								
;;;1560   RESET_OFF;
0005b2  2020              MOVS     r0,#0x20
0005b4  49e2              LDR      r1,|L123.2368|
0005b6  6088              STR      r0,[r1,#8]
;;;1561   	RESET_OFF;
0005b8  6088              STR      r0,[r1,#8]
;;;1562   	delay(100);	
0005ba  2064              MOVS     r0,#0x64
0005bc  f7fffffe          BL       delay
;;;1563   	RESET_ON;
0005c0  2020              MOVS     r0,#0x20
0005c2  49df              LDR      r1,|L123.2368|
0005c4  6048              STR      r0,[r1,#4]
;;;1564   	RESET_ON;	
0005c6  6048              STR      r0,[r1,#4]
;;;1565   	delay(100);
0005c8  2064              MOVS     r0,#0x64
0005ca  f7fffffe          BL       delay
0005ce  e3c4              B        |L123.3418|
                  |L123.1488|
;;;1566   
;;;1567   								
;;;1568   								
;;;1569   							}
;;;1570   	
;;;1571   
;;;1572   							else if( cond1 && cond9)
0005d0  48dc              LDR      r0,|L123.2372|
0005d2  6800              LDR      r0,[r0,#0]  ; cond1
0005d4  2800              CMP      r0,#0
                  |L123.1494|
0005d6  d07c              BEQ      |L123.1746|
0005d8  48db              LDR      r0,|L123.2376|
0005da  6800              LDR      r0,[r0,#0]  ; cond9
0005dc  2800              CMP      r0,#0
0005de  d0fa              BEQ      |L123.1494|
;;;1573   							{
;;;1574   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0005e0  48c5              LDR      r0,|L123.2296|
0005e2  6800              LDR      r0,[r0,#0]  ; tmeout
0005e4  4bc5              LDR      r3,|L123.2300|
0005e6  4ac6              LDR      r2,|L123.2304|
0005e8  49d8              LDR      r1,|L123.2380|
0005ea  9000              STR      r0,[sp,#0]
0005ec  48d8              LDR      r0,|L123.2384|
0005ee  f7fffffe          BL       send_GSM
;;;1575   
;;;1576   strcat(data,"\n");	
0005f2  49d8              LDR      r1,|L123.2388|
0005f4  48d8              LDR      r0,|L123.2392|
0005f6  f7fffffe          BL       strcat
;;;1577   GPS_COLLECT();
0005fa  f7fffffe          BL       GPS_COLLECT
;;;1578   strcat(data,"CH\n");	
0005fe  49d7              LDR      r1,|L123.2396|
000600  48d5              LDR      r0,|L123.2392|
000602  f7fffffe          BL       strcat
;;;1579   
;;;1580   								
;;;1581   
;;;1582   	delay(100);
000606  2064              MOVS     r0,#0x64
000608  f7fffffe          BL       delay
;;;1583   		clear();//memset(uart_string_gsm,0,5000);
00060c  f7fffffe          BL       clear
;;;1584   	
;;;1585   	memset(at_,0,100);
000610  2164              MOVS     r1,#0x64
000612  48d3              LDR      r0,|L123.2400|
000614  f7fffffe          BL       __aeabi_memclr
;;;1586   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000618  48cf              LDR      r0,|L123.2392|
00061a  f7fffffe          BL       strlen
00061e  1c44              ADDS     r4,r0,#1
000620  4623              MOV      r3,r4
000622  4ad0              LDR      r2,|L123.2404|
000624  49d0              LDR      r1,|L123.2408|
000626  48ce              LDR      r0,|L123.2400|
000628  f7fffffe          BL       __2sprintf
;;;1587   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00062c  2005              MOVS     r0,#5
00062e  4bc2              LDR      r3,|L123.2360|
000630  4ab3              LDR      r2,|L123.2304|
000632  49ce              LDR      r1,|L123.2412|
000634  9000              STR      r0,[sp,#0]
000636  48ca              LDR      r0,|L123.2400|
000638  f7fffffe          BL       send_SD
;;;1588   if(strstr(uart_string_gsm,"ERROR")){
00063c  49be              LDR      r1,|L123.2360|
00063e  48ad              LDR      r0,|L123.2292|
000640  f7fffffe          BL       strstr
000644  2800              CMP      r0,#0
000646  d004              BEQ      |L123.1618|
;;;1589   	drive[0]='C';drive[1]=':';
000648  2043              MOVS     r0,#0x43
00064a  49c6              LDR      r1,|L123.2404|
00064c  7008              STRB     r0,[r1,#0]
00064e  203a              MOVS     r0,#0x3a
000650  7048              STRB     r0,[r1,#1]
                  |L123.1618|
;;;1590   }	
;;;1591   clear();	
000652  f7fffffe          BL       clear
;;;1592   									k2=0;									//string array counter for uart 1
000656  2000              MOVS     r0,#0
000658  49c5              LDR      r1,|L123.2416|
00065a  6008              STR      r0,[r1,#0]  ; k2
;;;1593   									tout=0;	
00065c  49c5              LDR      r1,|L123.2420|
00065e  6008              STR      r0,[r1,#0]  ; tout
;;;1594   		for(k=0;k<strlen(data);k++)
000660  49c5              LDR      r1,|L123.2424|
000662  6008              STR      r0,[r1,#0]  ; k
000664  e00b              B        |L123.1662|
                  |L123.1638|
;;;1595   		{
;;;1596   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000666  48bc              LDR      r0,|L123.2392|
000668  4ac3              LDR      r2,|L123.2424|
00066a  6812              LDR      r2,[r2,#0]  ; k
00066c  5c81              LDRB     r1,[r0,r2]
00066e  48c3              LDR      r0,|L123.2428|
000670  f7fffffe          BL       uart_putchar
000674  48c0              LDR      r0,|L123.2424|
000676  6800              LDR      r0,[r0,#0]            ;1594  ; k
000678  1c40              ADDS     r0,r0,#1              ;1594
00067a  49bf              LDR      r1,|L123.2424|
00067c  6008              STR      r0,[r1,#0]            ;1594  ; k
                  |L123.1662|
00067e  48b6              LDR      r0,|L123.2392|
000680  f7fffffe          BL       strlen
000684  49bc              LDR      r1,|L123.2424|
000686  6809              LDR      r1,[r1,#0]            ;1594  ; k
000688  4288              CMP      r0,r1                 ;1594
00068a  d8ec              BHI      |L123.1638|
;;;1597   		}	
;;;1598   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00068c  210a              MOVS     r1,#0xa
00068e  48bb              LDR      r0,|L123.2428|
000690  f7fffffe          BL       uart_putchar
000694  210a              MOVS     r1,#0xa
000696  48b9              LDR      r0,|L123.2428|
000698  f7fffffe          BL       uart_putchar
00069c  210a              MOVS     r1,#0xa
00069e  48b7              LDR      r0,|L123.2428|
0006a0  f7fffffe          BL       uart_putchar
0006a4  210a              MOVS     r1,#0xa
0006a6  48b5              LDR      r0,|L123.2428|
0006a8  f7fffffe          BL       uart_putchar
0006ac  210a              MOVS     r1,#0xa
0006ae  48b3              LDR      r0,|L123.2428|
0006b0  f7fffffe          BL       uart_putchar
0006b4  210a              MOVS     r1,#0xa
0006b6  48b1              LDR      r0,|L123.2428|
0006b8  f7fffffe          BL       uart_putchar
0006bc  210a              MOVS     r1,#0xa
0006be  48af              LDR      r0,|L123.2428|
0006c0  f7fffffe          BL       uart_putchar
0006c4  210a              MOVS     r1,#0xa
0006c6  48ad              LDR      r0,|L123.2428|
0006c8  f7fffffe          BL       uart_putchar
0006cc  210a              MOVS     r1,#0xa
0006ce  48ab              LDR      r0,|L123.2428|
0006d0  e000              B        |L123.1748|
                  |L123.1746|
0006d2  e0f4              B        |L123.2238|
                  |L123.1748|
0006d4  f7fffffe          BL       uart_putchar
0006d8  210a              MOVS     r1,#0xa
0006da  48a8              LDR      r0,|L123.2428|
0006dc  f7fffffe          BL       uart_putchar
0006e0  210a              MOVS     r1,#0xa
0006e2  48a6              LDR      r0,|L123.2428|
0006e4  f7fffffe          BL       uart_putchar
0006e8  210a              MOVS     r1,#0xa
0006ea  48a4              LDR      r0,|L123.2428|
0006ec  f7fffffe          BL       uart_putchar
0006f0  210a              MOVS     r1,#0xa
0006f2  48a2              LDR      r0,|L123.2428|
0006f4  f7fffffe          BL       uart_putchar
0006f8  210a              MOVS     r1,#0xa
0006fa  48a0              LDR      r0,|L123.2428|
0006fc  f7fffffe          BL       uart_putchar
000700  210a              MOVS     r1,#0xa
000702  489e              LDR      r0,|L123.2428|
000704  f7fffffe          BL       uart_putchar
000708  210a              MOVS     r1,#0xa
00070a  489c              LDR      r0,|L123.2428|
00070c  f7fffffe          BL       uart_putchar
000710  210a              MOVS     r1,#0xa
000712  489a              LDR      r0,|L123.2428|
000714  f7fffffe          BL       uart_putchar
000718  210a              MOVS     r1,#0xa
00071a  4898              LDR      r0,|L123.2428|
00071c  f7fffffe          BL       uart_putchar
000720  210a              MOVS     r1,#0xa
000722  4896              LDR      r0,|L123.2428|
000724  f7fffffe          BL       uart_putchar
000728  210a              MOVS     r1,#0xa
00072a  4894              LDR      r0,|L123.2428|
00072c  f7fffffe          BL       uart_putchar
000730  210a              MOVS     r1,#0xa
000732  4892              LDR      r0,|L123.2428|
000734  f7fffffe          BL       uart_putchar
000738  210a              MOVS     r1,#0xa
00073a  4890              LDR      r0,|L123.2428|
00073c  f7fffffe          BL       uart_putchar
000740  210a              MOVS     r1,#0xa
000742  488e              LDR      r0,|L123.2428|
000744  f7fffffe          BL       uart_putchar
000748  210a              MOVS     r1,#0xa
00074a  488c              LDR      r0,|L123.2428|
00074c  f7fffffe          BL       uart_putchar
000750  210a              MOVS     r1,#0xa
000752  488a              LDR      r0,|L123.2428|
000754  f7fffffe          BL       uart_putchar
000758  210a              MOVS     r1,#0xa
00075a  4888              LDR      r0,|L123.2428|
00075c  f7fffffe          BL       uart_putchar
000760  210a              MOVS     r1,#0xa
000762  4886              LDR      r0,|L123.2428|
000764  f7fffffe          BL       uart_putchar
000768  210a              MOVS     r1,#0xa
00076a  4884              LDR      r0,|L123.2428|
00076c  f7fffffe          BL       uart_putchar
000770  210a              MOVS     r1,#0xa
000772  4882              LDR      r0,|L123.2428|
000774  f7fffffe          BL       uart_putchar
000778  210a              MOVS     r1,#0xa
00077a  4880              LDR      r0,|L123.2428|
00077c  f7fffffe          BL       uart_putchar
000780  210a              MOVS     r1,#0xa
000782  487e              LDR      r0,|L123.2428|
000784  f7fffffe          BL       uart_putchar
000788  210a              MOVS     r1,#0xa
00078a  487c              LDR      r0,|L123.2428|
00078c  f7fffffe          BL       uart_putchar
000790  210a              MOVS     r1,#0xa
000792  487a              LDR      r0,|L123.2428|
000794  f7fffffe          BL       uart_putchar
000798  210a              MOVS     r1,#0xa
00079a  4878              LDR      r0,|L123.2428|
00079c  f7fffffe          BL       uart_putchar
0007a0  210a              MOVS     r1,#0xa
0007a2  4876              LDR      r0,|L123.2428|
0007a4  f7fffffe          BL       uart_putchar
0007a8  210a              MOVS     r1,#0xa
0007aa  4874              LDR      r0,|L123.2428|
0007ac  f7fffffe          BL       uart_putchar
0007b0  210a              MOVS     r1,#0xa
0007b2  4872              LDR      r0,|L123.2428|
0007b4  f7fffffe          BL       uart_putchar
0007b8  210a              MOVS     r1,#0xa
0007ba  4870              LDR      r0,|L123.2428|
0007bc  f7fffffe          BL       uart_putchar
0007c0  210a              MOVS     r1,#0xa
0007c2  486e              LDR      r0,|L123.2428|
0007c4  f7fffffe          BL       uart_putchar
0007c8  210a              MOVS     r1,#0xa
0007ca  486c              LDR      r0,|L123.2428|
0007cc  f7fffffe          BL       uart_putchar
0007d0  210a              MOVS     r1,#0xa
0007d2  486a              LDR      r0,|L123.2428|
0007d4  f7fffffe          BL       uart_putchar
0007d8  210a              MOVS     r1,#0xa
0007da  4868              LDR      r0,|L123.2428|
0007dc  f7fffffe          BL       uart_putchar
0007e0  210a              MOVS     r1,#0xa
0007e2  4866              LDR      r0,|L123.2428|
0007e4  f7fffffe          BL       uart_putchar
0007e8  210a              MOVS     r1,#0xa
0007ea  4864              LDR      r0,|L123.2428|
0007ec  f7fffffe          BL       uart_putchar
0007f0  210a              MOVS     r1,#0xa
0007f2  4862              LDR      r0,|L123.2428|
0007f4  f7fffffe          BL       uart_putchar
0007f8  210a              MOVS     r1,#0xa
0007fa  4860              LDR      r0,|L123.2428|
0007fc  f7fffffe          BL       uart_putchar
000800  210a              MOVS     r1,#0xa
000802  485e              LDR      r0,|L123.2428|
000804  f7fffffe          BL       uart_putchar
000808  210a              MOVS     r1,#0xa
00080a  485c              LDR      r0,|L123.2428|
00080c  f7fffffe          BL       uart_putchar
000810  210a              MOVS     r1,#0xa
000812  485a              LDR      r0,|L123.2428|
000814  f7fffffe          BL       uart_putchar
000818  210a              MOVS     r1,#0xa
00081a  4858              LDR      r0,|L123.2428|
00081c  f7fffffe          BL       uart_putchar
000820  210a              MOVS     r1,#0xa
000822  4856              LDR      r0,|L123.2428|
000824  f7fffffe          BL       uart_putchar
000828  210a              MOVS     r1,#0xa
00082a  4854              LDR      r0,|L123.2428|
00082c  f7fffffe          BL       uart_putchar
000830  210a              MOVS     r1,#0xa
000832  4852              LDR      r0,|L123.2428|
000834  f7fffffe          BL       uart_putchar
000838  210a              MOVS     r1,#0xa
00083a  4850              LDR      r0,|L123.2428|
00083c  f7fffffe          BL       uart_putchar
000840  210a              MOVS     r1,#0xa
000842  484e              LDR      r0,|L123.2428|
000844  f7fffffe          BL       uart_putchar
000848  210a              MOVS     r1,#0xa
00084a  484c              LDR      r0,|L123.2428|
00084c  f7fffffe          BL       uart_putchar
000850  210a              MOVS     r1,#0xa
000852  484a              LDR      r0,|L123.2428|
000854  f7fffffe          BL       uart_putchar
;;;1599   									//memset(data,0,1000);
;;;1600   														//timer counts to wait for characters in uart 1 									
;;;1601   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000858  bf00              NOP      
                  |L123.2138|
00085a  493c              LDR      r1,|L123.2380|
00085c  4825              LDR      r0,|L123.2292|
00085e  f7fffffe          BL       strstr
000862  2800              CMP      r0,#0
000864  d109              BNE      |L123.2170|
000866  4934              LDR      r1,|L123.2360|
000868  4822              LDR      r0,|L123.2292|
00086a  f7fffffe          BL       strstr
00086e  2800              CMP      r0,#0
000870  d103              BNE      |L123.2170|
000872  4840              LDR      r0,|L123.2420|
000874  6800              LDR      r0,[r0,#0]  ; tout
000876  2805              CMP      r0,#5
000878  ddef              BLE      |L123.2138|
                  |L123.2170|
;;;1602   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1603   									}
;;;1604   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00087a  f7fffffe          BL       clear
;;;1605   									//clear();
;;;1606   									memset(data,0,strlen(data));
00087e  4836              LDR      r0,|L123.2392|
000880  f7fffffe          BL       strlen
000884  4604              MOV      r4,r0
000886  4621              MOV      r1,r4
000888  4833              LDR      r0,|L123.2392|
00088a  f7fffffe          BL       __aeabi_memclr
;;;1607   									clear();
00088e  f7fffffe          BL       clear
;;;1608   
;;;1609   																
;;;1610   								
;;;1611   								
;;;1612   //log_it();								
;;;1613   		RESET_OFF;delay(10);
000892  2020              MOVS     r0,#0x20
000894  492a              LDR      r1,|L123.2368|
000896  6088              STR      r0,[r1,#8]
000898  200a              MOVS     r0,#0xa
00089a  f7fffffe          BL       delay
;;;1614   		RESET_ON;delay(10);
00089e  2020              MOVS     r0,#0x20
0008a0  4927              LDR      r1,|L123.2368|
0008a2  6048              STR      r0,[r1,#4]
0008a4  200a              MOVS     r0,#0xa
0008a6  f7fffffe          BL       delay
;;;1615   								send_GSM("\n\n AT+CFUN=1,1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);			
0008aa  4813              LDR      r0,|L123.2296|
0008ac  6800              LDR      r0,[r0,#0]  ; tmeout
0008ae  4b13              LDR      r3,|L123.2300|
0008b0  4a13              LDR      r2,|L123.2304|
0008b2  4926              LDR      r1,|L123.2380|
0008b4  9000              STR      r0,[sp,#0]
0008b6  4832              LDR      r0,|L123.2432|
0008b8  f7fffffe          BL       send_GSM
                  |L123.2236|
0008bc  e24d              B        |L123.3418|
                  |L123.2238|
;;;1616   							}
;;;1617   							
;;;1618   							else if(cond12 && cond10)
0008be  4831              LDR      r0,|L123.2436|
0008c0  6800              LDR      r0,[r0,#0]  ; cond12
0008c2  2800              CMP      r0,#0
0008c4  d076              BEQ      |L123.2484|
0008c6  4830              LDR      r0,|L123.2440|
0008c8  6800              LDR      r0,[r0,#0]  ; cond10
0008ca  2800              CMP      r0,#0
0008cc  d072              BEQ      |L123.2484|
;;;1619   							{
;;;1620   						//		printf("\n\n\n\t%s",uart_string_gsm);
;;;1621   								memset(ip,0,16);
0008ce  2110              MOVS     r1,#0x10
0008d0  4812              LDR      r0,|L123.2332|
0008d2  f7fffffe          BL       __aeabi_memclr
;;;1622   								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
0008d6  4811              LDR      r0,|L123.2332|
0008d8  2120              MOVS     r1,#0x20
0008da  460b              MOV      r3,r1
0008dc  2204              MOVS     r2,#4
0008de  9100              STR      r1,[sp,#0]
0008e0  9001              STR      r0,[sp,#4]
0008e2  2103              MOVS     r1,#3
0008e4  4803              LDR      r0,|L123.2292|
0008e6  f7fffffe          BL       parse_g
;;;1623   								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
0008ea  480d              LDR      r0,|L123.2336|
0008ec  210d              MOVS     r1,#0xd
0008ee  e04d              B        |L123.2444|
                  |L123.2288|
0008f0  e245              B        |L123.3454|
0008f2  e05f              B        |L123.2484|
                  |L123.2292|
                          DCD      uart_string_gsm
                  |L123.2296|
                          DCD      tmeout
                  |L123.2300|
                          DCD      ||.conststring||+0x10
                  |L123.2304|
                          DCD      ||.conststring||+0x18
                  |L123.2308|
                          DCD      ||.conststring||+0x2c
                  |L123.2312|
                          DCD      ||.conststring||+0x84
                  |L123.2316|
                          DCD      ||.conststring||+0x3bc
                  |L123.2320|
                          DCD      ||.conststring||+0x3d8
                  |L123.2324|
                          DCD      ||.conststring||+0x14c
                  |L123.2328|
                          DCD      ||.conststring||+0x30
                  |L123.2332|
                          DCD      ||ip||
                  |L123.2336|
                          DCD      port
                  |L123.2340|
                          DCD      ||.conststring||+0x3f4
                  |L123.2344|
                          DCD      ||.conststring||+0x40c
                  |L123.2348|
                          DCD      interval
                  |L123.2352|
                          DCD      ||.conststring||+0x414
                  |L123.2356|
                          DCD      int_erval
                  |L123.2360|
                          DCD      ||.conststring||+0xe0
                  |L123.2364|
                          DCD      ||.conststring||+0x418
                  |L123.2368|
                          DCD      0x400ff080
                  |L123.2372|
                          DCD      cond1
                  |L123.2376|
                          DCD      cond9
                  |L123.2380|
                          DCD      ||.conststring||+0x70
                  |L123.2384|
                          DCD      ||.conststring||+0x3a8
                  |L123.2388|
                          DCD      ||.conststring||+0x42c
                  |L123.2392|
                          DCD      data
                  |L123.2396|
                          DCD      ||.conststring||+0x430
                  |L123.2400|
                          DCD      at_
                  |L123.2404|
                          DCD      drive
                  |L123.2408|
                          DCD      ||.conststring||+0x434
                  |L123.2412|
                          DCD      ||.conststring||+0x20
                  |L123.2416|
                          DCD      ||k2||
                  |L123.2420|
                          DCD      tout
                  |L123.2424|
                          DCD      k
                  |L123.2428|
                          DCD      0x4006b000
                  |L123.2432|
                          DCD      ||.conststring||+0x458
                  |L123.2436|
                          DCD      cond12
                  |L123.2440|
                          DCD      cond10
                  |L123.2444|
00098c  2320              MOVS     r3,#0x20
00098e  2205              MOVS     r2,#5
000990  9100              STR      r1,[sp,#0]
000992  9001              STR      r0,[sp,#4]
000994  2106              MOVS     r1,#6
000996  48fa              LDR      r0,|L123.3456|
000998  f7fffffe          BL       parse_g
;;;1624   			//					printf("\n%s\n",port);
;;;1625   								save_ip_port();
00099c  f7fffffe          BL       save_ip_port
;;;1626   							
;;;1627   	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;1628   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009a0  48f8              LDR      r0,|L123.3460|
0009a2  6800              LDR      r0,[r0,#0]  ; tmeout
0009a4  4bf8              LDR      r3,|L123.3464|
0009a6  4af9              LDR      r2,|L123.3468|
0009a8  49f9              LDR      r1,|L123.3472|
0009aa  9000              STR      r0,[sp,#0]
0009ac  48f9              LDR      r0,|L123.3476|
0009ae  f7fffffe          BL       send_GSM
0009b2  e1d2              B        |L123.3418|
                  |L123.2484|
;;;1629   
;;;1630   //								while(1);
;;;1631   								
;;;1632   								
;;;1633   							}
;;;1634   
;;;1635   											
;;;1636   							else if(cond1 && cond13)
0009b4  48f8              LDR      r0,|L123.3480|
0009b6  6800              LDR      r0,[r0,#0]  ; cond1
0009b8  2800              CMP      r0,#0
0009ba  d01a              BEQ      |L123.2546|
0009bc  48f7              LDR      r0,|L123.3484|
0009be  6800              LDR      r0,[r0,#0]  ; cond13
0009c0  2800              CMP      r0,#0
0009c2  d016              BEQ      |L123.2546|
;;;1637   							{
;;;1638   								
;;;1639   								IGNITION_ON;FUEL_ON;
0009c4  2002              MOVS     r0,#2
0009c6  49f6              LDR      r1,|L123.3488|
0009c8  6088              STR      r0,[r1,#8]
0009ca  2004              MOVS     r0,#4
0009cc  6088              STR      r0,[r1,#8]
;;;1640   								clear();
0009ce  f7fffffe          BL       clear
;;;1641   								ignstaton();
0009d2  f7fffffe          BL       ignstaton
;;;1642   								delay(1000);
0009d6  207d              MOVS     r0,#0x7d
0009d8  00c0              LSLS     r0,r0,#3
0009da  f7fffffe          BL       delay
;;;1643   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009de  48e9              LDR      r0,|L123.3460|
0009e0  6800              LDR      r0,[r0,#0]  ; tmeout
0009e2  4be9              LDR      r3,|L123.3464|
0009e4  4ae9              LDR      r2,|L123.3468|
0009e6  49ea              LDR      r1,|L123.3472|
0009e8  9000              STR      r0,[sp,#0]
0009ea  48ee              LDR      r0,|L123.3492|
0009ec  f7fffffe          BL       send_GSM
0009f0  e1b3              B        |L123.3418|
                  |L123.2546|
;;;1644   								
;;;1645   							}
;;;1646   							else if(cond1 && cond14)
0009f2  48e9              LDR      r0,|L123.3480|
0009f4  6800              LDR      r0,[r0,#0]  ; cond1
0009f6  2800              CMP      r0,#0
0009f8  d01a              BEQ      |L123.2608|
0009fa  48eb              LDR      r0,|L123.3496|
0009fc  6800              LDR      r0,[r0,#0]  ; cond14
0009fe  2800              CMP      r0,#0
000a00  d016              BEQ      |L123.2608|
;;;1647   							{
;;;1648   								
;;;1649   								IGNITION_OFF;FUEL_OFF;
000a02  2002              MOVS     r0,#2
000a04  49e6              LDR      r1,|L123.3488|
000a06  6048              STR      r0,[r1,#4]
000a08  2004              MOVS     r0,#4
000a0a  6048              STR      r0,[r1,#4]
;;;1650   								clear();
000a0c  f7fffffe          BL       clear
;;;1651   								ignstatoff();
000a10  f7fffffe          BL       ignstatoff
;;;1652   								delay(1000);
000a14  207d              MOVS     r0,#0x7d
000a16  00c0              LSLS     r0,r0,#3
000a18  f7fffffe          BL       delay
;;;1653   								
;;;1654   								
;;;1655   								
;;;1656   								
;;;1657   								
;;;1658   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a1c  48d9              LDR      r0,|L123.3460|
000a1e  6800              LDR      r0,[r0,#0]  ; tmeout
000a20  4bd9              LDR      r3,|L123.3464|
000a22  4ada              LDR      r2,|L123.3468|
000a24  49da              LDR      r1,|L123.3472|
000a26  9000              STR      r0,[sp,#0]
000a28  48de              LDR      r0,|L123.3492|
000a2a  f7fffffe          BL       send_GSM
000a2e  e194              B        |L123.3418|
                  |L123.2608|
;;;1659   								
;;;1660   							}
;;;1661   							
;;;1662   							else if(cond1 && cond5)
000a30  48d9              LDR      r0,|L123.3480|
000a32  6800              LDR      r0,[r0,#0]  ; cond1
000a34  2800              CMP      r0,#0
000a36  d05d              BEQ      |L123.2804|
000a38  48dc              LDR      r0,|L123.3500|
000a3a  6800              LDR      r0,[r0,#0]  ; cond5
000a3c  2800              CMP      r0,#0
000a3e  d059              BEQ      |L123.2804|
;;;1663   							{
;;;1664   								
;;;1665   
;;;1666   								memset(at_,0,100);
000a40  2164              MOVS     r1,#0x64
000a42  48db              LDR      r0,|L123.3504|
000a44  f7fffffe          BL       __aeabi_memclr
;;;1667   								memset(num_o,0,15);
000a48  210f              MOVS     r1,#0xf
000a4a  48da              LDR      r0,|L123.3508|
000a4c  f7fffffe          BL       __aeabi_memclr
;;;1668   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000a50  48d8              LDR      r0,|L123.3508|
000a52  210d              MOVS     r1,#0xd
000a54  2320              MOVS     r3,#0x20
000a56  2205              MOVS     r2,#5
000a58  9100              STR      r1,[sp,#0]
000a5a  9001              STR      r0,[sp,#4]
000a5c  2103              MOVS     r1,#3
000a5e  48c8              LDR      r0,|L123.3456|
000a60  f7fffffe          BL       parse_g
;;;1669   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a64  48c7              LDR      r0,|L123.3460|
000a66  6800              LDR      r0,[r0,#0]  ; tmeout
000a68  4bc7              LDR      r3,|L123.3464|
000a6a  4ac8              LDR      r2,|L123.3468|
000a6c  49c8              LDR      r1,|L123.3472|
000a6e  9000              STR      r0,[sp,#0]
000a70  48d1              LDR      r0,|L123.3512|
000a72  f7fffffe          BL       send_GSM
;;;1670   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000a76  2004              MOVS     r0,#4
000a78  4bd0              LDR      r3,|L123.3516|
000a7a  4ac4              LDR      r2,|L123.3468|
000a7c  49d0              LDR      r1,|L123.3520|
000a7e  9000              STR      r0,[sp,#0]
000a80  48d0              LDR      r0,|L123.3524|
000a82  f7fffffe          BL       send_GSM
;;;1671   
;;;1672   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000a86  4acb              LDR      r2,|L123.3508|
000a88  49cf              LDR      r1,|L123.3528|
000a8a  48c9              LDR      r0,|L123.3504|
000a8c  f7fffffe          BL       __2sprintf
;;;1673   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a90  48bc              LDR      r0,|L123.3460|
000a92  6800              LDR      r0,[r0,#0]  ; tmeout
000a94  4bbc              LDR      r3,|L123.3464|
000a96  4abd              LDR      r2,|L123.3468|
000a98  49bd              LDR      r1,|L123.3472|
000a9a  9000              STR      r0,[sp,#0]
000a9c  48c4              LDR      r0,|L123.3504|
000a9e  f7fffffe          BL       send_GSM
;;;1674   								
;;;1675   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000aa2  48b8              LDR      r0,|L123.3460|
000aa4  6800              LDR      r0,[r0,#0]  ; tmeout
000aa6  4bb8              LDR      r3,|L123.3464|
000aa8  4ab8              LDR      r2,|L123.3468|
000aaa  49b9              LDR      r1,|L123.3472|
000aac  9000              STR      r0,[sp,#0]
000aae  48c7              LDR      r0,|L123.3532|
000ab0  f7fffffe          BL       send_GSM
;;;1676   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000ab4  2004              MOVS     r0,#4
000ab6  4bc1              LDR      r3,|L123.3516|
000ab8  4ab4              LDR      r2,|L123.3468|
000aba  49c1              LDR      r1,|L123.3520|
000abc  9000              STR      r0,[sp,#0]
000abe  48c1              LDR      r0,|L123.3524|
000ac0  f7fffffe          BL       send_GSM
;;;1677   
;;;1678   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000ac4  4abb              LDR      r2,|L123.3508|
000ac6  49c0              LDR      r1,|L123.3528|
000ac8  48b9              LDR      r0,|L123.3504|
000aca  f7fffffe          BL       __2sprintf
;;;1679   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ace  48ad              LDR      r0,|L123.3460|
000ad0  6800              LDR      r0,[r0,#0]  ; tmeout
000ad2  4bad              LDR      r3,|L123.3464|
000ad4  4aad              LDR      r2,|L123.3468|
000ad6  49ae              LDR      r1,|L123.3472|
000ad8  9000              STR      r0,[sp,#0]
000ada  48b5              LDR      r0,|L123.3504|
000adc  f7fffffe          BL       send_GSM
;;;1680   
;;;1681   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ae0  48a8              LDR      r0,|L123.3460|
000ae2  6800              LDR      r0,[r0,#0]  ; tmeout
000ae4  4ba8              LDR      r3,|L123.3464|
000ae6  4aa9              LDR      r2,|L123.3468|
000ae8  49a9              LDR      r1,|L123.3472|
000aea  9000              STR      r0,[sp,#0]
000aec  48a9              LDR      r0,|L123.3476|
000aee  f7fffffe          BL       send_GSM
000af2  e132              B        |L123.3418|
                  |L123.2804|
;;;1682   															
;;;1683   						
;;;1684   								
;;;1685   							}		
;;;1686   							else if(cond1 && cond6)
000af4  48a8              LDR      r0,|L123.3480|
000af6  6800              LDR      r0,[r0,#0]  ; cond1
000af8  2800              CMP      r0,#0
000afa  d05d              BEQ      |L123.3000|
000afc  48b4              LDR      r0,|L123.3536|
000afe  6800              LDR      r0,[r0,#0]  ; cond6
000b00  2800              CMP      r0,#0
000b02  d059              BEQ      |L123.3000|
;;;1687   							{
;;;1688   
;;;1689   								
;;;1690   								memset(at_,0,100);
000b04  2164              MOVS     r1,#0x64
000b06  48aa              LDR      r0,|L123.3504|
000b08  f7fffffe          BL       __aeabi_memclr
;;;1691   								memset(num_o,0,15);
000b0c  210f              MOVS     r1,#0xf
000b0e  48a9              LDR      r0,|L123.3508|
000b10  f7fffffe          BL       __aeabi_memclr
;;;1692   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000b14  48a7              LDR      r0,|L123.3508|
000b16  210d              MOVS     r1,#0xd
000b18  2320              MOVS     r3,#0x20
000b1a  2205              MOVS     r2,#5
000b1c  9100              STR      r1,[sp,#0]
000b1e  9001              STR      r0,[sp,#4]
000b20  2103              MOVS     r1,#3
000b22  4897              LDR      r0,|L123.3456|
000b24  f7fffffe          BL       parse_g
;;;1693   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b28  4896              LDR      r0,|L123.3460|
000b2a  6800              LDR      r0,[r0,#0]  ; tmeout
000b2c  4b96              LDR      r3,|L123.3464|
000b2e  4a97              LDR      r2,|L123.3468|
000b30  4997              LDR      r1,|L123.3472|
000b32  9000              STR      r0,[sp,#0]
000b34  48a0              LDR      r0,|L123.3512|
000b36  f7fffffe          BL       send_GSM
;;;1694   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b3a  2004              MOVS     r0,#4
000b3c  4b9f              LDR      r3,|L123.3516|
000b3e  4a93              LDR      r2,|L123.3468|
000b40  499f              LDR      r1,|L123.3520|
000b42  9000              STR      r0,[sp,#0]
000b44  48a3              LDR      r0,|L123.3540|
000b46  f7fffffe          BL       send_GSM
;;;1695   
;;;1696   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b4a  4a9a              LDR      r2,|L123.3508|
000b4c  49a2              LDR      r1,|L123.3544|
000b4e  4898              LDR      r0,|L123.3504|
000b50  f7fffffe          BL       __2sprintf
;;;1697   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b54  488b              LDR      r0,|L123.3460|
000b56  6800              LDR      r0,[r0,#0]  ; tmeout
000b58  4b8b              LDR      r3,|L123.3464|
000b5a  4a8c              LDR      r2,|L123.3468|
000b5c  498c              LDR      r1,|L123.3472|
000b5e  9000              STR      r0,[sp,#0]
000b60  4893              LDR      r0,|L123.3504|
000b62  f7fffffe          BL       send_GSM
;;;1698   								
;;;1699   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b66  4887              LDR      r0,|L123.3460|
000b68  6800              LDR      r0,[r0,#0]  ; tmeout
000b6a  4b87              LDR      r3,|L123.3464|
000b6c  4a87              LDR      r2,|L123.3468|
000b6e  4988              LDR      r1,|L123.3472|
000b70  9000              STR      r0,[sp,#0]
000b72  4896              LDR      r0,|L123.3532|
000b74  f7fffffe          BL       send_GSM
;;;1700   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b78  2004              MOVS     r0,#4
000b7a  4b90              LDR      r3,|L123.3516|
000b7c  4a83              LDR      r2,|L123.3468|
000b7e  4990              LDR      r1,|L123.3520|
000b80  9000              STR      r0,[sp,#0]
000b82  4894              LDR      r0,|L123.3540|
000b84  f7fffffe          BL       send_GSM
;;;1701   
;;;1702   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b88  4a8a              LDR      r2,|L123.3508|
000b8a  4993              LDR      r1,|L123.3544|
000b8c  4888              LDR      r0,|L123.3504|
000b8e  f7fffffe          BL       __2sprintf
;;;1703   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);								
000b92  487c              LDR      r0,|L123.3460|
000b94  6800              LDR      r0,[r0,#0]  ; tmeout
000b96  4b7c              LDR      r3,|L123.3464|
000b98  4a7c              LDR      r2,|L123.3468|
000b9a  497d              LDR      r1,|L123.3472|
000b9c  9000              STR      r0,[sp,#0]
000b9e  4884              LDR      r0,|L123.3504|
000ba0  f7fffffe          BL       send_GSM
;;;1704   
;;;1705   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ba4  4877              LDR      r0,|L123.3460|
000ba6  6800              LDR      r0,[r0,#0]  ; tmeout
000ba8  4b77              LDR      r3,|L123.3464|
000baa  4a78              LDR      r2,|L123.3468|
000bac  4978              LDR      r1,|L123.3472|
000bae  9000              STR      r0,[sp,#0]
000bb0  4878              LDR      r0,|L123.3476|
000bb2  f7fffffe          BL       send_GSM
000bb6  e0d0              B        |L123.3418|
                  |L123.3000|
;;;1706   							}									
;;;1707   							else if(cond1 && cond7)
000bb8  4877              LDR      r0,|L123.3480|
000bba  6800              LDR      r0,[r0,#0]  ; cond1
000bbc  2800              CMP      r0,#0
000bbe  d05d              BEQ      |L123.3196|
000bc0  4886              LDR      r0,|L123.3548|
000bc2  6800              LDR      r0,[r0,#0]  ; cond7
000bc4  2800              CMP      r0,#0
000bc6  d059              BEQ      |L123.3196|
;;;1708   							{
;;;1709   								
;;;1710   								memset(at_,0,100);
000bc8  2164              MOVS     r1,#0x64
000bca  4879              LDR      r0,|L123.3504|
000bcc  f7fffffe          BL       __aeabi_memclr
;;;1711   								memset(num_o,0,15);
000bd0  210f              MOVS     r1,#0xf
000bd2  4878              LDR      r0,|L123.3508|
000bd4  f7fffffe          BL       __aeabi_memclr
;;;1712   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000bd8  4876              LDR      r0,|L123.3508|
000bda  210d              MOVS     r1,#0xd
000bdc  2320              MOVS     r3,#0x20
000bde  2205              MOVS     r2,#5
000be0  9100              STR      r1,[sp,#0]
000be2  9001              STR      r0,[sp,#4]
000be4  2103              MOVS     r1,#3
000be6  4866              LDR      r0,|L123.3456|
000be8  f7fffffe          BL       parse_g
;;;1713   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000bec  4865              LDR      r0,|L123.3460|
000bee  6800              LDR      r0,[r0,#0]  ; tmeout
000bf0  4b65              LDR      r3,|L123.3464|
000bf2  4a66              LDR      r2,|L123.3468|
000bf4  4966              LDR      r1,|L123.3472|
000bf6  9000              STR      r0,[sp,#0]
000bf8  486f              LDR      r0,|L123.3512|
000bfa  f7fffffe          BL       send_GSM
;;;1714   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000bfe  2004              MOVS     r0,#4
000c00  4b6e              LDR      r3,|L123.3516|
000c02  4a62              LDR      r2,|L123.3468|
000c04  496e              LDR      r1,|L123.3520|
000c06  9000              STR      r0,[sp,#0]
000c08  4875              LDR      r0,|L123.3552|
000c0a  f7fffffe          BL       send_GSM
;;;1715   
;;;1716   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c0e  4a69              LDR      r2,|L123.3508|
000c10  4974              LDR      r1,|L123.3556|
000c12  4867              LDR      r0,|L123.3504|
000c14  f7fffffe          BL       __2sprintf
;;;1717   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c18  485a              LDR      r0,|L123.3460|
000c1a  6800              LDR      r0,[r0,#0]  ; tmeout
000c1c  4b5a              LDR      r3,|L123.3464|
000c1e  4a5b              LDR      r2,|L123.3468|
000c20  495b              LDR      r1,|L123.3472|
000c22  9000              STR      r0,[sp,#0]
000c24  4862              LDR      r0,|L123.3504|
000c26  f7fffffe          BL       send_GSM
;;;1718   								
;;;1719   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c2a  4856              LDR      r0,|L123.3460|
000c2c  6800              LDR      r0,[r0,#0]  ; tmeout
000c2e  4b56              LDR      r3,|L123.3464|
000c30  4a56              LDR      r2,|L123.3468|
000c32  4957              LDR      r1,|L123.3472|
000c34  9000              STR      r0,[sp,#0]
000c36  4865              LDR      r0,|L123.3532|
000c38  f7fffffe          BL       send_GSM
;;;1720   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000c3c  2004              MOVS     r0,#4
000c3e  4b5f              LDR      r3,|L123.3516|
000c40  4a52              LDR      r2,|L123.3468|
000c42  495f              LDR      r1,|L123.3520|
000c44  9000              STR      r0,[sp,#0]
000c46  4866              LDR      r0,|L123.3552|
000c48  f7fffffe          BL       send_GSM
;;;1721   
;;;1722   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c4c  4a59              LDR      r2,|L123.3508|
000c4e  4965              LDR      r1,|L123.3556|
000c50  4857              LDR      r0,|L123.3504|
000c52  f7fffffe          BL       __2sprintf
;;;1723   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c56  484b              LDR      r0,|L123.3460|
000c58  6800              LDR      r0,[r0,#0]  ; tmeout
000c5a  4b4b              LDR      r3,|L123.3464|
000c5c  4a4b              LDR      r2,|L123.3468|
000c5e  494c              LDR      r1,|L123.3472|
000c60  9000              STR      r0,[sp,#0]
000c62  4853              LDR      r0,|L123.3504|
000c64  f7fffffe          BL       send_GSM
;;;1724   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000c68  4846              LDR      r0,|L123.3460|
000c6a  6800              LDR      r0,[r0,#0]  ; tmeout
000c6c  4b46              LDR      r3,|L123.3464|
000c6e  4a47              LDR      r2,|L123.3468|
000c70  4947              LDR      r1,|L123.3472|
000c72  9000              STR      r0,[sp,#0]
000c74  4847              LDR      r0,|L123.3476|
000c76  f7fffffe          BL       send_GSM
000c7a  e06e              B        |L123.3418|
                  |L123.3196|
;;;1725   							}			
;;;1726   							else if(cond11)
000c7c  485a              LDR      r0,|L123.3560|
000c7e  6800              LDR      r0,[r0,#0]  ; cond11
000c80  2800              CMP      r0,#0
000c82  d059              BEQ      |L123.3384|
;;;1727   							{
;;;1728   
;;;1729   								memset(at_,0,100);
000c84  2164              MOVS     r1,#0x64
000c86  484a              LDR      r0,|L123.3504|
000c88  f7fffffe          BL       __aeabi_memclr
;;;1730   								memset(num_o,0,15);
000c8c  210f              MOVS     r1,#0xf
000c8e  4849              LDR      r0,|L123.3508|
000c90  f7fffffe          BL       __aeabi_memclr
;;;1731   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000c94  4847              LDR      r0,|L123.3508|
000c96  210d              MOVS     r1,#0xd
000c98  2320              MOVS     r3,#0x20
000c9a  2205              MOVS     r2,#5
000c9c  9100              STR      r1,[sp,#0]
000c9e  9001              STR      r0,[sp,#4]
000ca0  2103              MOVS     r1,#3
000ca2  4837              LDR      r0,|L123.3456|
000ca4  f7fffffe          BL       parse_g
;;;1732   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ca8  4836              LDR      r0,|L123.3460|
000caa  6800              LDR      r0,[r0,#0]  ; tmeout
000cac  4b36              LDR      r3,|L123.3464|
000cae  4a37              LDR      r2,|L123.3468|
000cb0  4937              LDR      r1,|L123.3472|
000cb2  9000              STR      r0,[sp,#0]
000cb4  4840              LDR      r0,|L123.3512|
000cb6  f7fffffe          BL       send_GSM
;;;1733   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cba  2004              MOVS     r0,#4
000cbc  4b3f              LDR      r3,|L123.3516|
000cbe  4a33              LDR      r2,|L123.3468|
000cc0  493f              LDR      r1,|L123.3520|
000cc2  9000              STR      r0,[sp,#0]
000cc4  4849              LDR      r0,|L123.3564|
000cc6  f7fffffe          BL       send_GSM
;;;1734   
;;;1735   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000cca  4a3a              LDR      r2,|L123.3508|
000ccc  4948              LDR      r1,|L123.3568|
000cce  4838              LDR      r0,|L123.3504|
000cd0  f7fffffe          BL       __2sprintf
;;;1736   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000cd4  482b              LDR      r0,|L123.3460|
000cd6  6800              LDR      r0,[r0,#0]  ; tmeout
000cd8  4b2b              LDR      r3,|L123.3464|
000cda  4a2c              LDR      r2,|L123.3468|
000cdc  492c              LDR      r1,|L123.3472|
000cde  9000              STR      r0,[sp,#0]
000ce0  4833              LDR      r0,|L123.3504|
000ce2  f7fffffe          BL       send_GSM
;;;1737   								
;;;1738   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ce6  4827              LDR      r0,|L123.3460|
000ce8  6800              LDR      r0,[r0,#0]  ; tmeout
000cea  4b27              LDR      r3,|L123.3464|
000cec  4a27              LDR      r2,|L123.3468|
000cee  4928              LDR      r1,|L123.3472|
000cf0  9000              STR      r0,[sp,#0]
000cf2  4836              LDR      r0,|L123.3532|
000cf4  f7fffffe          BL       send_GSM
;;;1739   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cf8  2004              MOVS     r0,#4
000cfa  4b30              LDR      r3,|L123.3516|
000cfc  4a23              LDR      r2,|L123.3468|
000cfe  4930              LDR      r1,|L123.3520|
000d00  9000              STR      r0,[sp,#0]
000d02  483a              LDR      r0,|L123.3564|
000d04  f7fffffe          BL       send_GSM
;;;1740   
;;;1741   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000d08  4a2a              LDR      r2,|L123.3508|
000d0a  4939              LDR      r1,|L123.3568|
000d0c  4828              LDR      r0,|L123.3504|
000d0e  f7fffffe          BL       __2sprintf
;;;1742   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d12  481c              LDR      r0,|L123.3460|
000d14  6800              LDR      r0,[r0,#0]  ; tmeout
000d16  4b1c              LDR      r3,|L123.3464|
000d18  4a1c              LDR      r2,|L123.3468|
000d1a  491d              LDR      r1,|L123.3472|
000d1c  9000              STR      r0,[sp,#0]
000d1e  4824              LDR      r0,|L123.3504|
000d20  f7fffffe          BL       send_GSM
;;;1743   								
;;;1744   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000d24  4817              LDR      r0,|L123.3460|
000d26  6800              LDR      r0,[r0,#0]  ; tmeout
000d28  4b17              LDR      r3,|L123.3464|
000d2a  4a18              LDR      r2,|L123.3468|
000d2c  4918              LDR      r1,|L123.3472|
000d2e  9000              STR      r0,[sp,#0]
000d30  4818              LDR      r0,|L123.3476|
000d32  f7fffffe          BL       send_GSM
000d36  e010              B        |L123.3418|
                  |L123.3384|
;;;1745   								
;;;1746   							}	
;;;1747   							else if(cond15)
000d38  482e              LDR      r0,|L123.3572|
000d3a  6800              LDR      r0,[r0,#0]  ; cond15
000d3c  2800              CMP      r0,#0
000d3e  d003              BEQ      |L123.3400|
;;;1748   							{
;;;1749   								send_message(ignstr);
000d40  482d              LDR      r0,|L123.3576|
000d42  f7fffffe          BL       send_message
000d46  e008              B        |L123.3418|
                  |L123.3400|
;;;1750   								
;;;1751   							}							
;;;1752   
;;;1753   							else
;;;1754   							{							
;;;1755   								send_GSM("\r\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000d48  480e              LDR      r0,|L123.3460|
000d4a  6800              LDR      r0,[r0,#0]  ; tmeout
000d4c  4b0e              LDR      r3,|L123.3464|
000d4e  4a0f              LDR      r2,|L123.3468|
000d50  490f              LDR      r1,|L123.3472|
000d52  9000              STR      r0,[sp,#0]
000d54  4829              LDR      r0,|L123.3580|
000d56  f7fffffe          BL       send_GSM
                  |L123.3418|
;;;1756   							}
;;;1757   
;;;1758   
;;;1759   		ringflag=0;
000d5a  2000              MOVS     r0,#0
000d5c  4928              LDR      r1,|L123.3584|
000d5e  7008              STRB     r0,[r1,#0]
;;;1760   clear();							
000d60  f7fffffe          BL       clear
;;;1761   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000d64  4807              LDR      r0,|L123.3460|
000d66  6800              LDR      r0,[r0,#0]  ; tmeout
000d68  4b07              LDR      r3,|L123.3464|
000d6a  4a14              LDR      r2,|L123.3516|
000d6c  4914              LDR      r1,|L123.3520|
000d6e  9000              STR      r0,[sp,#0]
000d70  4824              LDR      r0,|L123.3588|
000d72  f7fffffe          BL       send_GSM
;;;1762   delay(1000);					
000d76  207d              MOVS     r0,#0x7d
000d78  00c0              LSLS     r0,r0,#3
000d7a  f7fffffe          BL       delay
                  |L123.3454|
;;;1763   		}
;;;1764   		
;;;1765   }
000d7e  bd1f              POP      {r0-r4,pc}
                  |L123.3456|
                          DCD      uart_string_gsm
                  |L123.3460|
                          DCD      tmeout
                  |L123.3464|
                          DCD      ||.conststring||+0x10
                  |L123.3468|
                          DCD      ||.conststring||+0x18
                  |L123.3472|
                          DCD      ||.conststring||+0x70
                  |L123.3476|
                          DCD      ||.conststring||+0x3a8
                  |L123.3480|
                          DCD      cond1
                  |L123.3484|
                          DCD      cond13
                  |L123.3488|
                          DCD      0x400ff000
                  |L123.3492|
                          DCD      ||.conststring||+0x46c
                  |L123.3496|
                          DCD      cond14
                  |L123.3500|
                          DCD      cond5
                  |L123.3504|
                          DCD      at_
                  |L123.3508|
                          DCD      num_o
                  |L123.3512|
                          DCD      ||.conststring||+0x484
                  |L123.3516|
                          DCD      ||.conststring||+0xe0
                  |L123.3520|
                          DCD      ||.conststring||+0x2c
                  |L123.3524|
                          DCD      ||.conststring||+0x498
                  |L123.3528|
                          DCD      ||.conststring||+0x4a8
                  |L123.3532|
                          DCD      ||.conststring||+0x4c8
                  |L123.3536|
                          DCD      cond6
                  |L123.3540|
                          DCD      ||.conststring||+0x4dc
                  |L123.3544|
                          DCD      ||.conststring||+0x4ec
                  |L123.3548|
                          DCD      cond7
                  |L123.3552|
                          DCD      ||.conststring||+0x50c
                  |L123.3556|
                          DCD      ||.conststring||+0x51c
                  |L123.3560|
                          DCD      cond11
                  |L123.3564|
                          DCD      ||.conststring||+0x53c
                  |L123.3568|
                          DCD      ||.conststring||+0x54c
                  |L123.3572|
                          DCD      cond15
                  |L123.3576|
                          DCD      ignstr
                  |L123.3580|
                          DCD      ||.conststring||+0x56c
                  |L123.3584|
                          DCD      ringflag
                  |L123.3588|
                          DCD      ||.conststring||+0x418
                          ENDP


                          AREA ||i.GPS_COLLECT2||, COMGROUP=GPS_COLLECT2, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT2 PROC
;;;1264   
;;;1265   __inline void GPS_COLLECT2()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1266   {	
;;;1267   time52=15;	
000002  200f              MOVS     r0,#0xf
000004  49a0              LDR      r1,|L130.648|
000006  6008              STR      r0,[r1,#0]  ; time52
;;;1268   
;;;1269   //memset(imei,0,20);
;;;1270   //send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
;;;1271   //for(i=0;i<strlen(uart_string_gsm);i++){
;;;1272   //		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
;;;1273   //			imei[imeiinc] = uart_string_gsm[i];
;;;1274   //			imeiinc++;
;;;1275   //		}
;;;1276   //}
;;;1277   clear();	
000008  f7fffffe          BL       clear
;;;1278   
;;;1279   	
;;;1280   	
;;;1281   //	adc_read(9);							
;;;1282   //	memset(fuelstr,0,5);
;;;1283   //	sprintf(fuelstr,"%d,",fuel);
;;;1284   
;;;1285   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
00000c  489f              LDR      r0,|L130.652|
00000e  6800              LDR      r0,[r0,#0]  ; tmeout
000010  4b9f              LDR      r3,|L130.656|
000012  4aa0              LDR      r2,|L130.660|
000014  49a0              LDR      r1,|L130.664|
000016  9000              STR      r0,[sp,#0]
000018  48a0              LDR      r0,|L130.668|
00001a  f7fffffe          BL       send_GSM
;;;1286   	// not sleep	
;;;1287   	memset(num2,0,30);
00001e  211e              MOVS     r1,#0x1e
000020  489f              LDR      r0,|L130.672|
000022  f7fffffe          BL       __aeabi_memclr
;;;1288   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
000026  489e              LDR      r0,|L130.672|
000028  210d              MOVS     r1,#0xd
00002a  232c              MOVS     r3,#0x2c
00002c  2205              MOVS     r2,#5
00002e  9100              STR      r1,[sp,#0]
000030  9001              STR      r0,[sp,#4]
000032  2102              MOVS     r1,#2
000034  489b              LDR      r0,|L130.676|
000036  f7fffffe          BL       parse_g
;;;1289   	voltagecbc=myAtoi(num2);	
00003a  4899              LDR      r0,|L130.672|
00003c  f7fffffe          BL       myAtoi
000040  4999              LDR      r1,|L130.680|
000042  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1290   
;;;1291   
;;;1292   //Triggerus(triggerdelay);
;;;1293   Triggerus();
000044  f7fffffe          BL       Triggerus
;;;1294   
;;;1295   
;;;1296   memset(ignstr,0,2);
000048  4898              LDR      r0,|L130.684|
00004a  2100              MOVS     r1,#0
00004c  7001              STRB     r1,[r0,#0]
00004e  7041              STRB     r1,[r0,#1]
;;;1297   if(GPIOB_PDIR & 0x00000001){
000050  4897              LDR      r0,|L130.688|
000052  6900              LDR      r0,[r0,#0x10]
000054  07c0              LSLS     r0,r0,#31
000056  0fc0              LSRS     r0,r0,#31
000058  2800              CMP      r0,#0
00005a  d005              BEQ      |L130.104|
;;;1298   			sprintf(ignstr,"%d",1);
00005c  2201              MOVS     r2,#1
00005e  4995              LDR      r1,|L130.692|
000060  4892              LDR      r0,|L130.684|
000062  f7fffffe          BL       __2sprintf
000066  e004              B        |L130.114|
                  |L130.104|
;;;1299   }
;;;1300   else{
;;;1301   			sprintf(ignstr,"%d",0);
000068  2200              MOVS     r2,#0
00006a  4992              LDR      r1,|L130.692|
00006c  488f              LDR      r0,|L130.684|
00006e  f7fffffe          BL       __2sprintf
                  |L130.114|
;;;1302   
;;;1303   }
;;;1304   
;;;1305   //memset(acstr,0,2); //ptb2
;;;1306   //if(GPIOB_PDIR & 0x00000004){
;;;1307   //			sprintf(acstr,"%d",1);
;;;1308   //}
;;;1309   //else{
;;;1310   //				sprintf(acstr,"%d",0);
;;;1311   
;;;1312   //}
;;;1313   	
;;;1314   while(lpticks<int_erval);
000072  bf00              NOP      
                  |L130.116|
000074  4890              LDR      r0,|L130.696|
000076  6800              LDR      r0,[r0,#0]  ; lpticks
000078  4990              LDR      r1,|L130.700|
00007a  6809              LDR      r1,[r1,#0]  ; int_erval
00007c  4288              CMP      r0,r1
00007e  dbf9              BLT      |L130.116|
;;;1315   get_gpsdata();
000080  f7fffffe          BL       get_gpsdata
;;;1316   lpticks=0;
000084  2000              MOVS     r0,#0
000086  498c              LDR      r1,|L130.696|
000088  6008              STR      r0,[r1,#0]  ; lpticks
;;;1317   
;;;1318   parse_g(rmc, 3, 4, ',', ',' ,lati);
00008a  488d              LDR      r0,|L130.704|
00008c  212c              MOVS     r1,#0x2c
00008e  460b              MOV      r3,r1
000090  2204              MOVS     r2,#4
000092  9100              STR      r1,[sp,#0]
000094  9001              STR      r0,[sp,#4]
000096  2103              MOVS     r1,#3
000098  488a              LDR      r0,|L130.708|
00009a  f7fffffe          BL       parse_g
;;;1319   parse_g(rmc, 5, 6, ',', ',' ,longi);
00009e  488a              LDR      r0,|L130.712|
0000a0  212c              MOVS     r1,#0x2c
0000a2  460b              MOV      r3,r1
0000a4  2206              MOVS     r2,#6
0000a6  9100              STR      r1,[sp,#0]
0000a8  9001              STR      r0,[sp,#4]
0000aa  2105              MOVS     r1,#5
0000ac  4885              LDR      r0,|L130.708|
0000ae  f7fffffe          BL       parse_g
;;;1320   parse_g(rmc, 7, 8, ',', ',' ,velocity);
0000b2  4886              LDR      r0,|L130.716|
0000b4  212c              MOVS     r1,#0x2c
0000b6  460b              MOV      r3,r1
0000b8  2208              MOVS     r2,#8
0000ba  9100              STR      r1,[sp,#0]
0000bc  9001              STR      r0,[sp,#4]
0000be  2107              MOVS     r1,#7
0000c0  4880              LDR      r0,|L130.708|
0000c2  f7fffffe          BL       parse_g
;;;1321   		
;;;1322   		speed = stof(velocity);
0000c6  4881              LDR      r0,|L130.716|
0000c8  f7fffffe          BL       stof
0000cc  4980              LDR      r1,|L130.720|
0000ce  6008              STR      r0,[r1,#0]  ; speed
;;;1323   		c=stof(lati);//7523.7412
0000d0  487b              LDR      r0,|L130.704|
0000d2  f7fffffe          BL       stof
0000d6  4604              MOV      r4,r0
0000d8  f7fffffe          BL       __aeabi_f2d
0000dc  4a7d              LDR      r2,|L130.724|
0000de  c203              STM      r2!,{r0,r1}
;;;1324   		hh= c/100; //75
0000e0  2200              MOVS     r2,#0
0000e2  4b7d              LDR      r3,|L130.728|
0000e4  497b              LDR      r1,|L130.724|
0000e6  c903              LDM      r1,{r0,r1}
0000e8  f7fffffe          BL       __aeabi_ddiv
0000ec  4604              MOV      r4,r0
0000ee  f7fffffe          BL       __aeabi_d2iz
0000f2  497a              LDR      r1,|L130.732|
0000f4  6008              STR      r0,[r1,#0]  ; hh
;;;1325   		hh11 = c/100; //75.237412
0000f6  2200              MOVS     r2,#0
0000f8  4b77              LDR      r3,|L130.728|
0000fa  4976              LDR      r1,|L130.724|
0000fc  c903              LDM      r1,{r0,r1}
0000fe  f7fffffe          BL       __aeabi_ddiv
000102  4a77              LDR      r2,|L130.736|
000104  c203              STM      r2!,{r0,r1}
;;;1326   		mm11 = hh11-hh; //.237412
000106  4875              LDR      r0,|L130.732|
000108  6800              LDR      r0,[r0,#0]  ; hh
00010a  f7fffffe          BL       __aeabi_i2d
00010e  4604              MOV      r4,r0
000110  4873              LDR      r0,|L130.736|
000112  c80c              LDM      r0!,{r2,r3}
000114  4620              MOV      r0,r4
000116  f7fffffe          BL       __aeabi_drsub
00011a  4a72              LDR      r2,|L130.740|
00011c  c203              STM      r2!,{r0,r1}
;;;1327   		mm11*=100;
00011e  2200              MOVS     r2,#0
000120  4b6d              LDR      r3,|L130.728|
000122  4970              LDR      r1,|L130.740|
000124  c903              LDM      r1,{r0,r1}
000126  f7fffffe          BL       __aeabi_dmul
00012a  4a6e              LDR      r2,|L130.740|
00012c  c203              STM      r2!,{r0,r1}
;;;1328   		mm22=hh+mm11/60;	
00012e  2200              MOVS     r2,#0
000130  4b6d              LDR      r3,|L130.744|
000132  496c              LDR      r1,|L130.740|
000134  c903              LDM      r1,{r0,r1}
000136  f7fffffe          BL       __aeabi_ddiv
00013a  4604              MOV      r4,r0
00013c  460d              MOV      r5,r1
00013e  4867              LDR      r0,|L130.732|
000140  6800              LDR      r0,[r0,#0]  ; hh
000142  f7fffffe          BL       __aeabi_i2d
000146  4606              MOV      r6,r0
000148  4622              MOV      r2,r4
00014a  462b              MOV      r3,r5
00014c  f7fffffe          BL       __aeabi_dadd
000150  4a66              LDR      r2,|L130.748|
000152  c203              STM      r2!,{r0,r1}
;;;1329   		memset(lati,0,15);
000154  210f              MOVS     r1,#0xf
000156  485a              LDR      r0,|L130.704|
000158  f7fffffe          BL       __aeabi_memclr
;;;1330   		sprintf(lati,"%f",mm22);
00015c  4863              LDR      r0,|L130.748|
00015e  4964              LDR      r1,|L130.752|
000160  c80c              LDM      r0!,{r2,r3}
000162  4857              LDR      r0,|L130.704|
000164  f7fffffe          BL       __2sprintf
;;;1331   		c=stof(longi);//7523.7412
000168  4857              LDR      r0,|L130.712|
00016a  f7fffffe          BL       stof
00016e  4604              MOV      r4,r0
000170  f7fffffe          BL       __aeabi_f2d
000174  4a57              LDR      r2,|L130.724|
000176  c203              STM      r2!,{r0,r1}
;;;1332   		hh= c/100; //75
000178  2200              MOVS     r2,#0
00017a  4b57              LDR      r3,|L130.728|
00017c  4955              LDR      r1,|L130.724|
00017e  c903              LDM      r1,{r0,r1}
000180  f7fffffe          BL       __aeabi_ddiv
000184  4604              MOV      r4,r0
000186  f7fffffe          BL       __aeabi_d2iz
00018a  4954              LDR      r1,|L130.732|
00018c  6008              STR      r0,[r1,#0]  ; hh
;;;1333   		hh11 = c/100; //75.237412
00018e  2200              MOVS     r2,#0
000190  4b51              LDR      r3,|L130.728|
000192  4950              LDR      r1,|L130.724|
000194  c903              LDM      r1,{r0,r1}
000196  f7fffffe          BL       __aeabi_ddiv
00019a  4a51              LDR      r2,|L130.736|
00019c  c203              STM      r2!,{r0,r1}
;;;1334   		mm11 = hh11-hh; //.237412
00019e  484f              LDR      r0,|L130.732|
0001a0  6800              LDR      r0,[r0,#0]  ; hh
0001a2  f7fffffe          BL       __aeabi_i2d
0001a6  4604              MOV      r4,r0
0001a8  484d              LDR      r0,|L130.736|
0001aa  c80c              LDM      r0!,{r2,r3}
0001ac  4620              MOV      r0,r4
0001ae  f7fffffe          BL       __aeabi_drsub
0001b2  4a4c              LDR      r2,|L130.740|
0001b4  c203              STM      r2!,{r0,r1}
;;;1335   		mm11*=100;
0001b6  2200              MOVS     r2,#0
0001b8  4b47              LDR      r3,|L130.728|
0001ba  494a              LDR      r1,|L130.740|
0001bc  c903              LDM      r1,{r0,r1}
0001be  f7fffffe          BL       __aeabi_dmul
0001c2  4a48              LDR      r2,|L130.740|
0001c4  c203              STM      r2!,{r0,r1}
;;;1336   		mm22=hh+mm11/60;	
0001c6  2200              MOVS     r2,#0
0001c8  4b47              LDR      r3,|L130.744|
0001ca  4946              LDR      r1,|L130.740|
0001cc  c903              LDM      r1,{r0,r1}
0001ce  f7fffffe          BL       __aeabi_ddiv
0001d2  4604              MOV      r4,r0
0001d4  460d              MOV      r5,r1
0001d6  4841              LDR      r0,|L130.732|
0001d8  6800              LDR      r0,[r0,#0]  ; hh
0001da  f7fffffe          BL       __aeabi_i2d
0001de  4606              MOV      r6,r0
0001e0  4622              MOV      r2,r4
0001e2  462b              MOV      r3,r5
0001e4  f7fffffe          BL       __aeabi_dadd
0001e8  4a40              LDR      r2,|L130.748|
0001ea  c203              STM      r2!,{r0,r1}
;;;1337   		memset(longi,0,15);
0001ec  210f              MOVS     r1,#0xf
0001ee  4836              LDR      r0,|L130.712|
0001f0  f7fffffe          BL       __aeabi_memclr
;;;1338   		sprintf(longi,"%f",mm22);	
0001f4  483d              LDR      r0,|L130.748|
0001f6  493e              LDR      r1,|L130.752|
0001f8  c80c              LDM      r0!,{r2,r3}
0001fa  4833              LDR      r0,|L130.712|
0001fc  f7fffffe          BL       __2sprintf
;;;1339   		strcat(data,imei);
000200  493c              LDR      r1,|L130.756|
000202  483d              LDR      r0,|L130.760|
000204  f7fffffe          BL       strcat
;;;1340   		strcat(data,", ");	
000208  493c              LDR      r1,|L130.764|
00020a  483b              LDR      r0,|L130.760|
00020c  f7fffffe          BL       strcat
;;;1341   		strcat(data,"$GxGGA");	
000210  493b              LDR      r1,|L130.768|
000212  4839              LDR      r0,|L130.760|
000214  f7fffffe          BL       strcat
;;;1342   		strcat(data,gga);
000218  493a              LDR      r1,|L130.772|
00021a  4837              LDR      r0,|L130.760|
00021c  f7fffffe          BL       strcat
;;;1343   		strcat(data,", $GxRMC");	
000220  4939              LDR      r1,|L130.776|
000222  4835              LDR      r0,|L130.760|
000224  f7fffffe          BL       strcat
;;;1344   		strcat(data,rmc);	
000228  4926              LDR      r1,|L130.708|
00022a  4833              LDR      r0,|L130.760|
00022c  f7fffffe          BL       strcat
;;;1345   		strcat(data,",");	
000230  4936              LDR      r1,|L130.780|
000232  4831              LDR      r0,|L130.760|
000234  f7fffffe          BL       strcat
;;;1346   		strcat(data,num2);
000238  4919              LDR      r1,|L130.672|
00023a  482f              LDR      r0,|L130.760|
00023c  f7fffffe          BL       strcat
;;;1347   		strcat(data,",SS=");	
000240  4933              LDR      r1,|L130.784|
000242  482d              LDR      r0,|L130.760|
000244  f7fffffe          BL       strcat
;;;1348   		strcat(data,sonicsensor);
000248  4932              LDR      r1,|L130.788|
00024a  482b              LDR      r0,|L130.760|
00024c  f7fffffe          BL       strcat
;;;1349   		strcat(data,",AC=");	
000250  4931              LDR      r1,|L130.792|
000252  4829              LDR      r0,|L130.760|
000254  f7fffffe          BL       strcat
;;;1350   		strcat(data,acstr);
000258  4930              LDR      r1,|L130.796|
00025a  4827              LDR      r0,|L130.760|
00025c  f7fffffe          BL       strcat
;;;1351   		strcat(data,",I=");	
000260  492f              LDR      r1,|L130.800|
000262  4825              LDR      r0,|L130.760|
000264  f7fffffe          BL       strcat
;;;1352   		strcat(data,ignstr);		
000268  4910              LDR      r1,|L130.684|
00026a  4823              LDR      r0,|L130.760|
00026c  f7fffffe          BL       strcat
;;;1353   		if(!(GPIOC_PDIR & 0x00000001)){
000270  480f              LDR      r0,|L130.688|
000272  3040              ADDS     r0,r0,#0x40
000274  6900              LDR      r0,[r0,#0x10]
000276  07c0              LSLS     r0,r0,#31
000278  0fc0              LSRS     r0,r0,#31
00027a  2800              CMP      r0,#0
00027c  d003              BEQ      |L130.646|
;;;1354   		}
;;;1355   		else{strcat(data,",BR*");}
00027e  4929              LDR      r1,|L130.804|
000280  481d              LDR      r0,|L130.760|
000282  f7fffffe          BL       strcat
                  |L130.646|
;;;1356   //return 0;
;;;1357   }
000286  bdfe              POP      {r1-r7,pc}
;;;1358   
                          ENDP

                  |L130.648|
                          DCD      time52
                  |L130.652|
                          DCD      tmeout
                  |L130.656|
                          DCD      ||.conststring||+0x10
                  |L130.660|
                          DCD      ||.conststring||+0xe0
                  |L130.664|
                          DCD      ||.conststring||+0x2c
                  |L130.668|
                          DCD      ||.conststring||+0x100
                  |L130.672|
                          DCD      num2
                  |L130.676|
                          DCD      uart_string_gsm
                  |L130.680|
                          DCD      voltagecbc
                  |L130.684|
                          DCD      ignstr
                  |L130.688|
                          DCD      0x400ff040
                  |L130.692|
                          DCD      ||.conststring||+0x110
                  |L130.696|
                          DCD      lpticks
                  |L130.700|
                          DCD      int_erval
                  |L130.704|
                          DCD      lati
                  |L130.708|
                          DCD      ||rmc||
                  |L130.712|
                          DCD      longi
                  |L130.716|
                          DCD      velocity
                  |L130.720|
                          DCD      speed
                  |L130.724|
                          DCD      c
                  |L130.728|
                          DCD      0x40590000
                  |L130.732|
                          DCD      ||hh||
                  |L130.736|
                          DCD      hh11
                  |L130.740|
                          DCD      mm11
                  |L130.744|
                          DCD      0x404e0000
                  |L130.748|
                          DCD      mm22
                  |L130.752|
                          DCD      ||.conststring||+0x114
                  |L130.756|
                          DCD      imei
                  |L130.760|
                          DCD      data
                  |L130.764|
                          DCD      ||.conststring||+0x580
                  |L130.768|
                          DCD      ||.conststring||+0x11c
                  |L130.772|
                          DCD      gga
                  |L130.776|
                          DCD      ||.conststring||+0x584
                  |L130.780|
                          DCD      ||.conststring||+0x118
                  |L130.784|
                          DCD      ||.conststring||+0x12c
                  |L130.788|
                          DCD      sonicsensor
                  |L130.792|
                          DCD      ||.conststring||+0x134
                  |L130.796|
                          DCD      acstr
                  |L130.800|
                          DCD      ||.conststring||+0x13c
                  |L130.804|
                          DCD      ||.conststring||+0x144

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;70     
;;;71     __inline void remove_all_chars(char* str, char c, char d) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;72         char *pr = str, *pw = str;
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
;;;73         while (*pr) {
00000a  e015              B        |L137.56|
                  |L137.12|
;;;74             *pw = *pr++;
00000c  780d              LDRB     r5,[r1,#0]
00000e  7005              STRB     r5,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
;;;75     			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
000012  7805              LDRB     r5,[r0,#0]
000014  42a5              CMP      r5,r4
000016  d00d              BEQ      |L137.52|
000018  7805              LDRB     r5,[r0,#0]
00001a  4295              CMP      r5,r2
00001c  d00a              BEQ      |L137.52|
00001e  7805              LDRB     r5,[r0,#0]
000020  2d20              CMP      r5,#0x20
000022  d007              BEQ      |L137.52|
000024  7805              LDRB     r5,[r0,#0]
000026  2d2f              CMP      r5,#0x2f
000028  d004              BEQ      |L137.52|
00002a  7805              LDRB     r5,[r0,#0]
00002c  2d3a              CMP      r5,#0x3a
00002e  d001              BEQ      |L137.52|
000030  2501              MOVS     r5,#1
000032  e000              B        |L137.54|
                  |L137.52|
000034  2500              MOVS     r5,#0
                  |L137.54|
000036  1828              ADDS     r0,r5,r0
                  |L137.56|
000038  780d              LDRB     r5,[r1,#0]            ;73
00003a  2d00              CMP      r5,#0                 ;73
00003c  d1e6              BNE      |L137.12|
;;;76         }
;;;77         *pw = '\0';
00003e  7005              STRB     r5,[r0,#0]
;;;78     }
000040  bd30              POP      {r4,r5,pc}
;;;79     
                          ENDP


                          AREA ||i.send_chunk||, COMGROUP=send_chunk, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_chunk PROC
;;;1802   
;;;1803   __inline void  send_chunk(){
000000  b57c              PUSH     {r2-r6,lr}
;;;1804   fsz=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L144.1024|
000006  6008              STR      r0,[r1,#0]  ; fsz
;;;1805   times=-2;	
000008  1e80              SUBS     r0,r0,#2
00000a  49fe              LDR      r1,|L144.1028|
00000c  6008              STR      r0,[r1,#0]  ; times
;;;1806   	
;;;1807   
;;;1808   temp=int_erval;				
00000e  48fe              LDR      r0,|L144.1032|
000010  6800              LDR      r0,[r0,#0]  ; int_erval
000012  49fe              LDR      r1,|L144.1036|
000014  6008              STR      r0,[r1,#0]  ; temp
;;;1809   int_erval=1;
000016  2001              MOVS     r0,#1
000018  49fb              LDR      r1,|L144.1032|
00001a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1810   
;;;1811   	
;;;1812   memset(at_,0,100);
00001c  2164              MOVS     r1,#0x64
00001e  48fc              LDR      r0,|L144.1040|
000020  f7fffffe          BL       __aeabi_memclr
;;;1813   sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
000024  4afb              LDR      r2,|L144.1044|
000026  49fc              LDR      r1,|L144.1048|
000028  48f9              LDR      r0,|L144.1040|
00002a  f7fffffe          BL       __2sprintf
;;;1814   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00002e  48fb              LDR      r0,|L144.1052|
000030  6800              LDR      r0,[r0,#0]  ; tmeout
000032  4bfb              LDR      r3,|L144.1056|
000034  4afb              LDR      r2,|L144.1060|
000036  49fc              LDR      r1,|L144.1064|
000038  9000              STR      r0,[sp,#0]
00003a  48f5              LDR      r0,|L144.1040|
00003c  f7fffffe          BL       send_GSM
;;;1815   parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
000040  48fa              LDR      r0,|L144.1068|
000042  210d              MOVS     r1,#0xd
000044  2320              MOVS     r3,#0x20
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2101              MOVS     r1,#1
00004e  48f8              LDR      r0,|L144.1072|
000050  f7fffffe          BL       parse_g
;;;1816   fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
000054  48f5              LDR      r0,|L144.1068|
000056  f7fffffe          BL       stof
00005a  49e9              LDR      r1,|L144.1024|
00005c  6008              STR      r0,[r1,#0]  ; fsz
;;;1817   //reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1818   	
;;;1819   times =	(fsz/900) + 2;
00005e  49f5              LDR      r1,|L144.1076|
000060  48e7              LDR      r0,|L144.1024|
000062  6800              LDR      r0,[r0,#0]  ; fsz
000064  f7fffffe          BL       __aeabi_fdiv
000068  4605              MOV      r5,r0
00006a  2101              MOVS     r1,#1
00006c  0789              LSLS     r1,r1,#30
00006e  f7fffffe          BL       __aeabi_fadd
000072  4604              MOV      r4,r0
000074  f7fffffe          BL       __aeabi_f2iz
000078  49e2              LDR      r1,|L144.1028|
00007a  6008              STR      r0,[r1,#0]  ; times
;;;1820   for(;k5<=(times);){
00007c  e3fd              B        |L144.2170|
                  |L144.126|
;;;1821   if(fsz==0){log0=1;break;}
00007e  2100              MOVS     r1,#0
000080  48df              LDR      r0,|L144.1024|
000082  6800              LDR      r0,[r0,#0]  ; fsz
000084  f7fffffe          BL       __aeabi_cfcmpeq
000088  d103              BNE      |L144.146|
00008a  2001              MOVS     r0,#1
00008c  49ea              LDR      r1,|L144.1080|
00008e  6008              STR      r0,[r1,#0]  ; log0
000090  e3f4              B        |L144.2172|
                  |L144.146|
;;;1822   else log0=0;
000092  2000              MOVS     r0,#0
000094  49e8              LDR      r1,|L144.1080|
000096  6008              STR      r0,[r1,#0]  ; log0
;;;1823   
;;;1824   	RESET_ON;
000098  2020              MOVS     r0,#0x20
00009a  49e8              LDR      r1,|L144.1084|
00009c  6048              STR      r0,[r1,#4]
;;;1825   	DTR_OFF;
00009e  2080              MOVS     r0,#0x80
0000a0  49e6              LDR      r1,|L144.1084|
0000a2  3140              ADDS     r1,r1,#0x40
0000a4  6088              STR      r0,[r1,#8]
;;;1826   	
;;;1827   msg_sim800(); 
0000a6  f7fffffe          BL       msg_sim800
;;;1828   
;;;1829   memset(data,0,strlen(data));	
0000aa  48e5              LDR      r0,|L144.1088|
0000ac  f7fffffe          BL       strlen
0000b0  4604              MOV      r4,r0
0000b2  4621              MOV      r1,r4
0000b4  48e2              LDR      r0,|L144.1088|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;1830   strcat(data,"\n");	
0000ba  49e2              LDR      r1,|L144.1092|
0000bc  48e0              LDR      r0,|L144.1088|
0000be  f7fffffe          BL       strcat
;;;1831   	
;;;1832   	
;;;1833   	memset(at_,0,100);
0000c2  2164              MOVS     r1,#0x64
0000c4  48d2              LDR      r0,|L144.1040|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1834   	sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);
0000ca  4ad2              LDR      r2,|L144.1044|
0000cc  49d2              LDR      r1,|L144.1048|
0000ce  48d0              LDR      r0,|L144.1040|
0000d0  f7fffffe          BL       __2sprintf
;;;1835   GPS_COLLECT();
0000d4  f7fffffe          BL       GPS_COLLECT
;;;1836   
;;;1837   	
;;;1838   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
0000d8  48d0              LDR      r0,|L144.1052|
0000da  6800              LDR      r0,[r0,#0]  ; tmeout
0000dc  4bd0              LDR      r3,|L144.1056|
0000de  4ad1              LDR      r2,|L144.1060|
0000e0  49d1              LDR      r1,|L144.1064|
0000e2  9000              STR      r0,[sp,#0]
0000e4  48ca              LDR      r0,|L144.1040|
0000e6  f7fffffe          BL       send_GSM
;;;1839   	parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
0000ea  48d0              LDR      r0,|L144.1068|
0000ec  210d              MOVS     r1,#0xd
0000ee  2320              MOVS     r3,#0x20
0000f0  2205              MOVS     r2,#5
0000f2  9100              STR      r1,[sp,#0]
0000f4  9001              STR      r0,[sp,#4]
0000f6  2101              MOVS     r1,#1
0000f8  48cd              LDR      r0,|L144.1072|
0000fa  f7fffffe          BL       parse_g
;;;1840   	fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
0000fe  48cb              LDR      r0,|L144.1068|
000100  f7fffffe          BL       stof
000104  49be              LDR      r1,|L144.1024|
000106  6008              STR      r0,[r1,#0]  ; fsz
;;;1841   	//reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1842   	times =	(fsz/900) + 1;	
000108  49ca              LDR      r1,|L144.1076|
00010a  48bd              LDR      r0,|L144.1024|
00010c  6800              LDR      r0,[r0,#0]  ; fsz
00010e  f7fffffe          BL       __aeabi_fdiv
000112  4605              MOV      r5,r0
000114  217f              MOVS     r1,#0x7f
000116  05c9              LSLS     r1,r1,#23
000118  f7fffffe          BL       __aeabi_fadd
00011c  4604              MOV      r4,r0
00011e  f7fffffe          BL       __aeabi_f2iz
000122  49b8              LDR      r1,|L144.1028|
000124  6008              STR      r0,[r1,#0]  ; times
;;;1843   	
;;;1844   	
;;;1845   memset(at_,0,100);
000126  2164              MOVS     r1,#0x64
000128  48b9              LDR      r0,|L144.1040|
00012a  f7fffffe          BL       __aeabi_memclr
;;;1846   sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>          \r\n\r\n",times,k5,rtcticks2);							
00012e  48c6              LDR      r0,|L144.1096|
000130  6800              LDR      r0,[r0,#0]  ; rtcticks2
000132  9000              STR      r0,[sp,#0]
000134  48c5              LDR      r0,|L144.1100|
000136  6803              LDR      r3,[r0,#0]  ; k5
000138  48b2              LDR      r0,|L144.1028|
00013a  49c5              LDR      r1,|L144.1104|
00013c  6802              LDR      r2,[r0,#0]  ; times
00013e  48b4              LDR      r0,|L144.1040|
000140  f7fffffe          BL       __2sprintf
;;;1847   send_modem(at_);
000144  48b2              LDR      r0,|L144.1040|
000146  f7fffffe          BL       send_modem
;;;1848   clear();
00014a  f7fffffe          BL       clear
;;;1849   	
;;;1850   	
;;;1851   		sprintf(at_, "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",drive,cursorvaluepr );		//1256
00014e  48c1              LDR      r0,|L144.1108|
000150  4ab0              LDR      r2,|L144.1044|
000152  49c1              LDR      r1,|L144.1112|
000154  6803              LDR      r3,[r0,#0]  ; cursorvaluepr
000156  48ae              LDR      r0,|L144.1040|
000158  f7fffffe          BL       __2sprintf
;;;1852   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",5);
00015c  2005              MOVS     r0,#5
00015e  4bb0              LDR      r3,|L144.1056|
000160  4ab0              LDR      r2,|L144.1060|
000162  49b1              LDR      r1,|L144.1064|
000164  9000              STR      r0,[sp,#0]
000166  48aa              LDR      r0,|L144.1040|
000168  f7fffffe          BL       send_GSM
;;;1853   			if(strstr(uart_string_gsm,"ERROR")){
00016c  49bb              LDR      r1,|L144.1116|
00016e  48b0              LDR      r0,|L144.1072|
000170  f7fffffe          BL       strstr
000174  2800              CMP      r0,#0
000176  d00b              BEQ      |L144.400|
;;;1854   				RESET_OFF;
000178  2020              MOVS     r0,#0x20
00017a  49b0              LDR      r1,|L144.1084|
00017c  6088              STR      r0,[r1,#8]
;;;1855   				delay(50);
00017e  2032              MOVS     r0,#0x32
000180  f7fffffe          BL       delay
;;;1856   				RESET_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L144.1084|
000188  6048              STR      r0,[r1,#4]
;;;1857   				delay(50);
00018a  2032              MOVS     r0,#0x32
00018c  f7fffffe          BL       delay
                  |L144.400|
;;;1858   			}
;;;1859   		cntendl=count_char('\n',uart_string_gsm);
000190  49a7              LDR      r1,|L144.1072|
000192  200a              MOVS     r0,#0xa
000194  f7fffffe          BL       count_char
000198  49b1              LDR      r1,|L144.1120|
00019a  6008              STR      r0,[r1,#0]  ; cntendl
;;;1860      //if(cntendl!=0)
;;;1861   		enters = cntendl;		
00019c  4608              MOV      r0,r1
00019e  6800              LDR      r0,[r0,#0]  ; cntendl
0001a0  49b0              LDR      r1,|L144.1124|
0001a2  6008              STR      r0,[r1,#0]  ; enters
;;;1862   		memset(sd_data,0,1400);
0001a4  21af              MOVS     r1,#0xaf
0001a6  00c9              LSLS     r1,r1,#3
0001a8  48af              LDR      r0,|L144.1128|
0001aa  f7fffffe          BL       __aeabi_memclr
;;;1863   		parse_g(uart_string_gsm, 1,enters-2, '\n', '\n' ,sd_data);	
0001ae  48ae              LDR      r0,|L144.1128|
0001b0  210a              MOVS     r1,#0xa
0001b2  9100              STR      r1,[sp,#0]
0001b4  9001              STR      r0,[sp,#4]
0001b6  48ab              LDR      r0,|L144.1124|
0001b8  6800              LDR      r0,[r0,#0]  ; enters
0001ba  1e82              SUBS     r2,r0,#2
0001bc  460b              MOV      r3,r1
0001be  2101              MOVS     r1,#1
0001c0  489b              LDR      r0,|L144.1072|
0001c2  f7fffffe          BL       parse_g
;;;1864   		strcat(sd_data,"\n");
0001c6  499f              LDR      r1,|L144.1092|
0001c8  48a7              LDR      r0,|L144.1128|
0001ca  f7fffffe          BL       strcat
;;;1865   		strcat(sd_data,data);
0001ce  499c              LDR      r1,|L144.1088|
0001d0  48a5              LDR      r0,|L144.1128|
0001d2  f7fffffe          BL       strcat
;;;1866   		if(strstr(sd_data,"SEND OK")    ||   strstr(sd_data,"ERROR") || strstr(sd_data,"FAIL")  ||  strstr(sd_data,"DEACT"))	{
0001d6  49a5              LDR      r1,|L144.1132|
0001d8  48a3              LDR      r0,|L144.1128|
0001da  f7fffffe          BL       strstr
0001de  2800              CMP      r0,#0
0001e0  d111              BNE      |L144.518|
0001e2  499e              LDR      r1,|L144.1116|
0001e4  48a0              LDR      r0,|L144.1128|
0001e6  f7fffffe          BL       strstr
0001ea  2800              CMP      r0,#0
0001ec  d10b              BNE      |L144.518|
0001ee  49a0              LDR      r1,|L144.1136|
0001f0  489d              LDR      r0,|L144.1128|
0001f2  f7fffffe          BL       strstr
0001f6  2800              CMP      r0,#0
0001f8  d105              BNE      |L144.518|
0001fa  499e              LDR      r1,|L144.1140|
0001fc  489a              LDR      r0,|L144.1128|
0001fe  f7fffffe          BL       strstr
000202  2800              CMP      r0,#0
000204  d008              BEQ      |L144.536|
                  |L144.518|
;;;1867   		memset(exception,0,200);	
000206  21c8              MOVS     r1,#0xc8
000208  489b              LDR      r0,|L144.1144|
00020a  f7fffffe          BL       __aeabi_memclr
;;;1868   		strcat(exception,"exception : COMPARED RESPONCES IN THE DATA\n\n\n\n");	
00020e  499b              LDR      r1,|L144.1148|
000210  4899              LDR      r0,|L144.1144|
000212  f7fffffe          BL       strcat
000216  e003              B        |L144.544|
                  |L144.536|
;;;1869   		}
;;;1870   		else{memset(exception,0,200);}
000218  21c8              MOVS     r1,#0xc8
00021a  4897              LDR      r0,|L144.1144|
00021c  f7fffffe          BL       __aeabi_memclr
                  |L144.544|
;;;1871   
;;;1872   	
;;;1873   		qwe=strlen(uart_string_gsm);
000220  4883              LDR      r0,|L144.1072|
000222  f7fffffe          BL       strlen
000226  4996              LDR      r1,|L144.1152|
000228  6008              STR      r0,[r1,#0]  ; qwe
;;;1874   		memset(uart_string_gsm,0,qwe);
00022a  4608              MOV      r0,r1
00022c  6801              LDR      r1,[r0,#0]  ; qwe
00022e  4880              LDR      r0,|L144.1072|
000230  f7fffffe          BL       __aeabi_memclr
;;;1875   		
;;;1876   
;;;1877   	
;;;1878   		
;;;1879   		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT",tmeout);	
000234  4879              LDR      r0,|L144.1052|
000236  6800              LDR      r0,[r0,#0]  ; tmeout
000238  4b92              LDR      r3,|L144.1156|
00023a  4a88              LDR      r2,|L144.1116|
00023c  4992              LDR      r1,|L144.1160|
00023e  9000              STR      r0,[sp,#0]
000240  4892              LDR      r0,|L144.1164|
000242  f7fffffe          BL       send_GSM
;;;1880   								cond =mystrstr(uart_string_gsm,'>');
000246  213e              MOVS     r1,#0x3e
000248  4879              LDR      r0,|L144.1072|
00024a  f7fffffe          BL       mystrstr
00024e  4990              LDR      r1,|L144.1168|
000250  7008              STRB     r0,[r1,#0]
;;;1881   									if(cond)	
000252  4608              MOV      r0,r1
000254  7800              LDRB     r0,[r0,#0]  ; cond
000256  2800              CMP      r0,#0
000258  d101              BNE      |L144.606|
00025a  f001f801          BL       |L144.4704|
                  |L144.606|
;;;1882   									{	
;;;1883   									clear();
00025e  f7fffffe          BL       clear
;;;1884   									memset(uart_string_gsm,0,5000);
000262  498c              LDR      r1,|L144.1172|
000264  4872              LDR      r0,|L144.1072|
000266  f7fffffe          BL       __aeabi_memclr
;;;1885   									if(strlen(exception) > 5){
00026a  4883              LDR      r0,|L144.1144|
00026c  f7fffffe          BL       strlen
000270  2805              CMP      r0,#5
000272  d905              BLS      |L144.640|
;;;1886   									qwe=strlen(exception);
000274  4880              LDR      r0,|L144.1144|
000276  f7fffffe          BL       strlen
00027a  4981              LDR      r1,|L144.1152|
00027c  6008              STR      r0,[r1,#0]  ; qwe
00027e  e004              B        |L144.650|
                  |L144.640|
;;;1887   									}
;;;1888   									else{										
;;;1889   									qwe=strlen(sd_data);
000280  4879              LDR      r0,|L144.1128|
000282  f7fffffe          BL       strlen
000286  497e              LDR      r1,|L144.1152|
000288  6008              STR      r0,[r1,#0]  ; qwe
                  |L144.650|
;;;1890   									}										
;;;1891   									tout=0;
00028a  2000              MOVS     r0,#0
00028c  4982              LDR      r1,|L144.1176|
00028e  6008              STR      r0,[r1,#0]  ; tout
;;;1892   									k2=0;
000290  4982              LDR      r1,|L144.1180|
000292  6008              STR      r0,[r1,#0]  ; k2
;;;1893   									for(k=0;k<(qwe);k++)
000294  4982              LDR      r1,|L144.1184|
000296  6008              STR      r0,[r1,#0]  ; k
000298  e018              B        |L144.716|
                  |L144.666|
;;;1894   									{
;;;1895   										if(strlen(exception) > 5){
00029a  4877              LDR      r0,|L144.1144|
00029c  f7fffffe          BL       strlen
0002a0  2805              CMP      r0,#5
0002a2  d907              BLS      |L144.692|
;;;1896   										uart_putchar(UART1_BASE_PTR, exception[k]);	
0002a4  4874              LDR      r0,|L144.1144|
0002a6  4a7e              LDR      r2,|L144.1184|
0002a8  6812              LDR      r2,[r2,#0]  ; k
0002aa  5c81              LDRB     r1,[r0,r2]
0002ac  487d              LDR      r0,|L144.1188|
0002ae  f7fffffe          BL       uart_putchar
0002b2  e006              B        |L144.706|
                  |L144.692|
;;;1897   										}
;;;1898   										else{										
;;;1899   										uart_putchar(UART1_BASE_PTR, sd_data[k]);
0002b4  486c              LDR      r0,|L144.1128|
0002b6  4a7a              LDR      r2,|L144.1184|
0002b8  6812              LDR      r2,[r2,#0]  ; k
0002ba  5c81              LDRB     r1,[r0,r2]
0002bc  4879              LDR      r0,|L144.1188|
0002be  f7fffffe          BL       uart_putchar
                  |L144.706|
0002c2  4877              LDR      r0,|L144.1184|
0002c4  6800              LDR      r0,[r0,#0]            ;1893  ; k
0002c6  1c40              ADDS     r0,r0,#1              ;1893
0002c8  4975              LDR      r1,|L144.1184|
0002ca  6008              STR      r0,[r1,#0]            ;1893  ; k
                  |L144.716|
0002cc  4874              LDR      r0,|L144.1184|
0002ce  6800              LDR      r0,[r0,#0]            ;1893  ; k
0002d0  496b              LDR      r1,|L144.1152|
0002d2  6809              LDR      r1,[r1,#0]            ;1893  ; qwe
0002d4  4288              CMP      r0,r1                 ;1893
0002d6  dbe0              BLT      |L144.666|
;;;1900   										}
;;;1901   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
0002d8  210a              MOVS     r1,#0xa
0002da  4872              LDR      r0,|L144.1188|
0002dc  f7fffffe          BL       uart_putchar
0002e0  211a              MOVS     r1,#0x1a
0002e2  4870              LDR      r0,|L144.1188|
0002e4  f7fffffe          BL       uart_putchar
0002e8  211a              MOVS     r1,#0x1a
0002ea  486e              LDR      r0,|L144.1188|
0002ec  f7fffffe          BL       uart_putchar
0002f0  211a              MOVS     r1,#0x1a
0002f2  486c              LDR      r0,|L144.1188|
0002f4  f7fffffe          BL       uart_putchar
0002f8  211a              MOVS     r1,#0x1a
0002fa  486a              LDR      r0,|L144.1188|
0002fc  f7fffffe          BL       uart_putchar
000300  211a              MOVS     r1,#0x1a
000302  4868              LDR      r0,|L144.1188|
000304  f7fffffe          BL       uart_putchar
000308  211a              MOVS     r1,#0x1a
00030a  4866              LDR      r0,|L144.1188|
00030c  f7fffffe          BL       uart_putchar
;;;1902   									do
000310  bf00              NOP      
                  |L144.786|
;;;1903   																{q1=strstr(uart_string_gsm,"SEND OK");
000312  4956              LDR      r1,|L144.1132|
000314  4846              LDR      r0,|L144.1072|
000316  f7fffffe          BL       strstr
00031a  4963              LDR      r1,|L144.1192|
00031c  6008              STR      r0,[r1,#0]  ; q1
;;;1904   																	q2=strstr(uart_string_gsm, "ERROR");
00031e  494f              LDR      r1,|L144.1116|
000320  4843              LDR      r0,|L144.1072|
000322  f7fffffe          BL       strstr
000326  4961              LDR      r1,|L144.1196|
000328  6008              STR      r0,[r1,#0]  ; q2
;;;1905   																		q3=strstr(uart_string_gsm, "FAIL");	
00032a  4951              LDR      r1,|L144.1136|
00032c  4840              LDR      r0,|L144.1072|
00032e  f7fffffe          BL       strstr
000332  495f              LDR      r1,|L144.1200|
000334  6008              STR      r0,[r1,#0]  ; q3
;;;1906   																			q4=strstr(uart_string_gsm, "DEACT");	
000336  494f              LDR      r1,|L144.1140|
000338  483d              LDR      r0,|L144.1072|
00033a  f7fffffe          BL       strstr
00033e  495d              LDR      r1,|L144.1204|
000340  6008              STR      r0,[r1,#0]  ; q4
;;;1907   																	
;;;1908   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) ); //|| (timeout < 1)   
000342  4859              LDR      r0,|L144.1192|
000344  6800              LDR      r0,[r0,#0]  ; q1
000346  2800              CMP      r0,#0
000348  d10f              BNE      |L144.874|
00034a  4858              LDR      r0,|L144.1196|
00034c  6800              LDR      r0,[r0,#0]  ; q2
00034e  2800              CMP      r0,#0
000350  d10b              BNE      |L144.874|
000352  4857              LDR      r0,|L144.1200|
000354  6800              LDR      r0,[r0,#0]  ; q3
000356  2800              CMP      r0,#0
000358  d107              BNE      |L144.874|
00035a  4608              MOV      r0,r1
00035c  6800              LDR      r0,[r0,#0]  ; q4
00035e  2800              CMP      r0,#0
000360  d103              BNE      |L144.874|
000362  484d              LDR      r0,|L144.1176|
000364  6800              LDR      r0,[r0,#0]  ; tout
000366  2808              CMP      r0,#8
000368  ddd3              BLE      |L144.786|
                  |L144.874|
;;;1909   																delay(10);clear();
00036a  200a              MOVS     r0,#0xa
00036c  f7fffffe          BL       delay
000370  f7fffffe          BL       clear
;;;1910   														uart_putchar(UART1_BASE_PTR,0x1A);
000374  211a              MOVS     r1,#0x1a
000376  484b              LDR      r0,|L144.1188|
000378  f7fffffe          BL       uart_putchar
;;;1911   												delay(10);
00037c  200a              MOVS     r0,#0xa
00037e  f7fffffe          BL       delay
;;;1912   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000382  211a              MOVS     r1,#0x1a
000384  4847              LDR      r0,|L144.1188|
000386  f7fffffe          BL       uart_putchar
00038a  211a              MOVS     r1,#0x1a
00038c  4845              LDR      r0,|L144.1188|
00038e  f7fffffe          BL       uart_putchar
000392  211a              MOVS     r1,#0x1a
000394  4843              LDR      r0,|L144.1188|
000396  f7fffffe          BL       uart_putchar
;;;1913   delay(50);
00039a  2032              MOVS     r0,#0x32
00039c  f7fffffe          BL       delay
;;;1914   if(strstr(uart_string_gsm,"SEND OK"))
0003a0  4932              LDR      r1,|L144.1132|
0003a2  4823              LDR      r0,|L144.1072|
0003a4  f7fffffe          BL       strstr
0003a8  2800              CMP      r0,#0
0003aa  d013              BEQ      |L144.980|
;;;1915   {
;;;1916   cursorvaluene=cursor_val(sd_data,enters-3);
0003ac  482d              LDR      r0,|L144.1124|
0003ae  6800              LDR      r0,[r0,#0]  ; enters
0003b0  1ec1              SUBS     r1,r0,#3
0003b2  482d              LDR      r0,|L144.1128|
0003b4  f7fffffe          BL       cursor_val
0003b8  493f              LDR      r1,|L144.1208|
0003ba  6008              STR      r0,[r1,#0]  ; cursorvaluene
;;;1917   cursorvaluepr+=cursorvaluene;
0003bc  4825              LDR      r0,|L144.1108|
0003be  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
0003c0  6809              LDR      r1,[r1,#0]  ; cursorvaluene
0003c2  1840              ADDS     r0,r0,r1
0003c4  4923              LDR      r1,|L144.1108|
0003c6  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1918   k5++;
0003c8  4820              LDR      r0,|L144.1100|
0003ca  6800              LDR      r0,[r0,#0]  ; k5
0003cc  1c40              ADDS     r0,r0,#1
0003ce  491f              LDR      r1,|L144.1100|
0003d0  6008              STR      r0,[r1,#0]  ; k5
0003d2  e3fd              B        |L144.3024|
                  |L144.980|
;;;1919   }
;;;1920   else{remove_all_chars(data, '\n', '\n');
0003d4  220a              MOVS     r2,#0xa
0003d6  4611              MOV      r1,r2
0003d8  4819              LDR      r0,|L144.1088|
0003da  f7fffffe          BL       remove_all_chars
;;;1921   			strcat(data,"CH\n");
0003de  4937              LDR      r1,|L144.1212|
0003e0  4817              LDR      r0,|L144.1088|
0003e2  f7fffffe          BL       strcat
;;;1922   
;;;1923   	delay(100);
0003e6  2064              MOVS     r0,#0x64
0003e8  f7fffffe          BL       delay
;;;1924   		clear();//memset(uart_string_gsm,0,5000);
0003ec  f7fffffe          BL       clear
;;;1925   	
;;;1926   	memset(at_,0,100);
0003f0  2164              MOVS     r1,#0x64
0003f2  4807              LDR      r0,|L144.1040|
0003f4  f7fffffe          BL       __aeabi_memclr
;;;1927   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0003f8  4811              LDR      r0,|L144.1088|
0003fa  f7fffffe          BL       strlen
0003fe  e05f              B        |L144.1216|
                  |L144.1024|
                          DCD      ||fsz||
                  |L144.1028|
                          DCD      times
                  |L144.1032|
                          DCD      int_erval
                  |L144.1036|
                          DCD      temp
                  |L144.1040|
                          DCD      at_
                  |L144.1044|
                          DCD      drive
                  |L144.1048|
                          DCD      ||.conststring||+0x590
                  |L144.1052|
                          DCD      tmeout
                  |L144.1056|
                          DCD      ||.conststring||+0x10
                  |L144.1060|
                          DCD      ||.conststring||+0x18
                  |L144.1064|
                          DCD      ||.conststring||+0x2c
                  |L144.1068|
                          DCD      fsize
                  |L144.1072|
                          DCD      uart_string_gsm
                  |L144.1076|
                          DCD      0x44610000
                  |L144.1080|
                          DCD      log0
                  |L144.1084|
                          DCD      0x400ff080
                  |L144.1088|
                          DCD      data
                  |L144.1092|
                          DCD      ||.conststring||+0x42c
                  |L144.1096|
                          DCD      rtcticks2
                  |L144.1100|
                          DCD      ||k5||
                  |L144.1104|
                          DCD      ||.conststring||+0x5b0
                  |L144.1108|
                          DCD      cursorvaluepr
                  |L144.1112|
                          DCD      ||.conststring||+0x5e4
                  |L144.1116|
                          DCD      ||.conststring||+0xe0
                  |L144.1120|
                          DCD      cntendl
                  |L144.1124|
                          DCD      enters
                  |L144.1128|
                          DCD      sd_data
                  |L144.1132|
                          DCD      ||.conststring||+0x60c
                  |L144.1136|
                          DCD      ||.conststring||+0x614
                  |L144.1140|
                          DCD      ||.conststring||+0x61c
                  |L144.1144|
                          DCD      exception
                  |L144.1148|
                          DCD      ||.conststring||+0x624
                  |L144.1152|
                          DCD      qwe
                  |L144.1156|
                          DCD      ||.conststring||+0x654
                  |L144.1160|
                          DCD      ||.conststring||+0x20
                  |L144.1164|
                          DCD      ||.conststring||+0x65c
                  |L144.1168|
                          DCD      cond
                  |L144.1172|
                          DCD      0x00001388
                  |L144.1176|
                          DCD      tout
                  |L144.1180|
                          DCD      ||k2||
                  |L144.1184|
                          DCD      k
                  |L144.1188|
                          DCD      0x4006b000
                  |L144.1192|
                          DCD      ||q1||
                  |L144.1196|
                          DCD      ||q2||
                  |L144.1200|
                          DCD      ||q3||
                  |L144.1204|
                          DCD      ||q4||
                  |L144.1208|
                          DCD      cursorvaluene
                  |L144.1212|
                          DCD      ||.conststring||+0x430
                  |L144.1216|
0004c0  1c44              ADDS     r4,r0,#1
0004c2  4623              MOV      r3,r4
0004c4  4afd              LDR      r2,|L144.2236|
0004c6  49fe              LDR      r1,|L144.2240|
0004c8  48fe              LDR      r0,|L144.2244|
0004ca  f7fffffe          BL       __2sprintf
;;;1928   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0004ce  2005              MOVS     r0,#5
0004d0  4bfd              LDR      r3,|L144.2248|
0004d2  4afe              LDR      r2,|L144.2252|
0004d4  49fe              LDR      r1,|L144.2256|
0004d6  9000              STR      r0,[sp,#0]
0004d8  48fa              LDR      r0,|L144.2244|
0004da  f7fffffe          BL       send_SD
;;;1929   
;;;1930   	
;;;1931   clear();	
0004de  f7fffffe          BL       clear
;;;1932   									k2=0;									//string array counter for uart 1
0004e2  2000              MOVS     r0,#0
0004e4  49fb              LDR      r1,|L144.2260|
0004e6  6008              STR      r0,[r1,#0]  ; k2
;;;1933   									tout=0;	
0004e8  49fb              LDR      r1,|L144.2264|
0004ea  6008              STR      r0,[r1,#0]  ; tout
;;;1934   		for(k=0;k<strlen(data);k++)
0004ec  49fb              LDR      r1,|L144.2268|
0004ee  6008              STR      r0,[r1,#0]  ; k
0004f0  e00b              B        |L144.1290|
                  |L144.1266|
;;;1935   		{
;;;1936   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0004f2  48fb              LDR      r0,|L144.2272|
0004f4  4af9              LDR      r2,|L144.2268|
0004f6  6812              LDR      r2,[r2,#0]  ; k
0004f8  5c81              LDRB     r1,[r0,r2]
0004fa  48fa              LDR      r0,|L144.2276|
0004fc  f7fffffe          BL       uart_putchar
000500  48f6              LDR      r0,|L144.2268|
000502  6800              LDR      r0,[r0,#0]            ;1934  ; k
000504  1c40              ADDS     r0,r0,#1              ;1934
000506  49f5              LDR      r1,|L144.2268|
000508  6008              STR      r0,[r1,#0]            ;1934  ; k
                  |L144.1290|
00050a  48f5              LDR      r0,|L144.2272|
00050c  f7fffffe          BL       strlen
000510  49f2              LDR      r1,|L144.2268|
000512  6809              LDR      r1,[r1,#0]            ;1934  ; k
000514  4288              CMP      r0,r1                 ;1934
000516  d8ec              BHI      |L144.1266|
;;;1937   		}	
;;;1938   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000518  210a              MOVS     r1,#0xa
00051a  48f2              LDR      r0,|L144.2276|
00051c  f7fffffe          BL       uart_putchar
000520  210a              MOVS     r1,#0xa
000522  48f0              LDR      r0,|L144.2276|
000524  f7fffffe          BL       uart_putchar
000528  210a              MOVS     r1,#0xa
00052a  48ee              LDR      r0,|L144.2276|
00052c  f7fffffe          BL       uart_putchar
000530  210a              MOVS     r1,#0xa
000532  48ec              LDR      r0,|L144.2276|
000534  f7fffffe          BL       uart_putchar
000538  210a              MOVS     r1,#0xa
00053a  48ea              LDR      r0,|L144.2276|
00053c  f7fffffe          BL       uart_putchar
000540  210a              MOVS     r1,#0xa
000542  48e8              LDR      r0,|L144.2276|
000544  f7fffffe          BL       uart_putchar
000548  210a              MOVS     r1,#0xa
00054a  48e6              LDR      r0,|L144.2276|
00054c  f7fffffe          BL       uart_putchar
000550  210a              MOVS     r1,#0xa
000552  48e4              LDR      r0,|L144.2276|
000554  f7fffffe          BL       uart_putchar
000558  210a              MOVS     r1,#0xa
00055a  48e2              LDR      r0,|L144.2276|
00055c  f7fffffe          BL       uart_putchar
000560  210a              MOVS     r1,#0xa
000562  48e0              LDR      r0,|L144.2276|
000564  f7fffffe          BL       uart_putchar
000568  210a              MOVS     r1,#0xa
00056a  48de              LDR      r0,|L144.2276|
00056c  f7fffffe          BL       uart_putchar
000570  210a              MOVS     r1,#0xa
000572  48dc              LDR      r0,|L144.2276|
000574  f7fffffe          BL       uart_putchar
000578  210a              MOVS     r1,#0xa
00057a  48da              LDR      r0,|L144.2276|
00057c  f7fffffe          BL       uart_putchar
000580  210a              MOVS     r1,#0xa
000582  48d8              LDR      r0,|L144.2276|
000584  f7fffffe          BL       uart_putchar
000588  210a              MOVS     r1,#0xa
00058a  48d6              LDR      r0,|L144.2276|
00058c  f7fffffe          BL       uart_putchar
000590  210a              MOVS     r1,#0xa
000592  48d4              LDR      r0,|L144.2276|
000594  f7fffffe          BL       uart_putchar
000598  210a              MOVS     r1,#0xa
00059a  48d2              LDR      r0,|L144.2276|
00059c  f7fffffe          BL       uart_putchar
0005a0  210a              MOVS     r1,#0xa
0005a2  48d0              LDR      r0,|L144.2276|
0005a4  f7fffffe          BL       uart_putchar
0005a8  210a              MOVS     r1,#0xa
0005aa  48ce              LDR      r0,|L144.2276|
0005ac  f7fffffe          BL       uart_putchar
0005b0  210a              MOVS     r1,#0xa
0005b2  48cc              LDR      r0,|L144.2276|
0005b4  f7fffffe          BL       uart_putchar
0005b8  210a              MOVS     r1,#0xa
0005ba  48ca              LDR      r0,|L144.2276|
0005bc  f7fffffe          BL       uart_putchar
0005c0  210a              MOVS     r1,#0xa
0005c2  48c8              LDR      r0,|L144.2276|
0005c4  f7fffffe          BL       uart_putchar
0005c8  210a              MOVS     r1,#0xa
0005ca  48c6              LDR      r0,|L144.2276|
0005cc  f7fffffe          BL       uart_putchar
0005d0  210a              MOVS     r1,#0xa
0005d2  48c4              LDR      r0,|L144.2276|
0005d4  f7fffffe          BL       uart_putchar
0005d8  210a              MOVS     r1,#0xa
0005da  48c2              LDR      r0,|L144.2276|
0005dc  f7fffffe          BL       uart_putchar
0005e0  210a              MOVS     r1,#0xa
0005e2  48c0              LDR      r0,|L144.2276|
0005e4  f7fffffe          BL       uart_putchar
0005e8  210a              MOVS     r1,#0xa
0005ea  48be              LDR      r0,|L144.2276|
0005ec  f7fffffe          BL       uart_putchar
0005f0  210a              MOVS     r1,#0xa
0005f2  48bc              LDR      r0,|L144.2276|
0005f4  f7fffffe          BL       uart_putchar
0005f8  210a              MOVS     r1,#0xa
0005fa  48ba              LDR      r0,|L144.2276|
0005fc  f7fffffe          BL       uart_putchar
000600  210a              MOVS     r1,#0xa
000602  48b8              LDR      r0,|L144.2276|
000604  f7fffffe          BL       uart_putchar
000608  210a              MOVS     r1,#0xa
00060a  48b6              LDR      r0,|L144.2276|
00060c  f7fffffe          BL       uart_putchar
000610  210a              MOVS     r1,#0xa
000612  48b4              LDR      r0,|L144.2276|
000614  f7fffffe          BL       uart_putchar
000618  210a              MOVS     r1,#0xa
00061a  48b2              LDR      r0,|L144.2276|
00061c  f7fffffe          BL       uart_putchar
000620  210a              MOVS     r1,#0xa
000622  48b0              LDR      r0,|L144.2276|
000624  f7fffffe          BL       uart_putchar
000628  210a              MOVS     r1,#0xa
00062a  48ae              LDR      r0,|L144.2276|
00062c  f7fffffe          BL       uart_putchar
000630  210a              MOVS     r1,#0xa
000632  48ac              LDR      r0,|L144.2276|
000634  f7fffffe          BL       uart_putchar
000638  210a              MOVS     r1,#0xa
00063a  48aa              LDR      r0,|L144.2276|
00063c  f7fffffe          BL       uart_putchar
000640  210a              MOVS     r1,#0xa
000642  48a8              LDR      r0,|L144.2276|
000644  f7fffffe          BL       uart_putchar
000648  210a              MOVS     r1,#0xa
00064a  48a6              LDR      r0,|L144.2276|
00064c  f7fffffe          BL       uart_putchar
000650  210a              MOVS     r1,#0xa
000652  48a4              LDR      r0,|L144.2276|
000654  f7fffffe          BL       uart_putchar
000658  210a              MOVS     r1,#0xa
00065a  48a2              LDR      r0,|L144.2276|
00065c  f7fffffe          BL       uart_putchar
000660  210a              MOVS     r1,#0xa
000662  48a0              LDR      r0,|L144.2276|
000664  f7fffffe          BL       uart_putchar
000668  210a              MOVS     r1,#0xa
00066a  489e              LDR      r0,|L144.2276|
00066c  f7fffffe          BL       uart_putchar
000670  210a              MOVS     r1,#0xa
000672  489c              LDR      r0,|L144.2276|
000674  f7fffffe          BL       uart_putchar
000678  210a              MOVS     r1,#0xa
00067a  489a              LDR      r0,|L144.2276|
00067c  f7fffffe          BL       uart_putchar
000680  210a              MOVS     r1,#0xa
000682  4898              LDR      r0,|L144.2276|
000684  f7fffffe          BL       uart_putchar
000688  210a              MOVS     r1,#0xa
00068a  4896              LDR      r0,|L144.2276|
00068c  f7fffffe          BL       uart_putchar
000690  210a              MOVS     r1,#0xa
000692  4894              LDR      r0,|L144.2276|
000694  f7fffffe          BL       uart_putchar
000698  210a              MOVS     r1,#0xa
00069a  4892              LDR      r0,|L144.2276|
00069c  f7fffffe          BL       uart_putchar
0006a0  210a              MOVS     r1,#0xa
0006a2  4890              LDR      r0,|L144.2276|
0006a4  f7fffffe          BL       uart_putchar
0006a8  210a              MOVS     r1,#0xa
0006aa  488e              LDR      r0,|L144.2276|
0006ac  f7fffffe          BL       uart_putchar
0006b0  210a              MOVS     r1,#0xa
0006b2  488c              LDR      r0,|L144.2276|
0006b4  f7fffffe          BL       uart_putchar
0006b8  210a              MOVS     r1,#0xa
0006ba  488a              LDR      r0,|L144.2276|
0006bc  f7fffffe          BL       uart_putchar
0006c0  210a              MOVS     r1,#0xa
0006c2  4888              LDR      r0,|L144.2276|
0006c4  f7fffffe          BL       uart_putchar
0006c8  210a              MOVS     r1,#0xa
0006ca  4886              LDR      r0,|L144.2276|
0006cc  f7fffffe          BL       uart_putchar
0006d0  210a              MOVS     r1,#0xa
0006d2  4884              LDR      r0,|L144.2276|
0006d4  f7fffffe          BL       uart_putchar
0006d8  210a              MOVS     r1,#0xa
0006da  4882              LDR      r0,|L144.2276|
0006dc  f7fffffe          BL       uart_putchar
;;;1939   														//timer counts to wait for characters in uart 1 									
;;;1940   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0006e0  bf00              NOP      
                  |L144.1762|
0006e2  4981              LDR      r1,|L144.2280|
0006e4  4881              LDR      r0,|L144.2284|
0006e6  f7fffffe          BL       strstr
0006ea  2800              CMP      r0,#0
0006ec  d109              BNE      |L144.1794|
0006ee  4976              LDR      r1,|L144.2248|
0006f0  487e              LDR      r0,|L144.2284|
0006f2  f7fffffe          BL       strstr
0006f6  2800              CMP      r0,#0
0006f8  d103              BNE      |L144.1794|
0006fa  4877              LDR      r0,|L144.2264|
0006fc  6800              LDR      r0,[r0,#0]  ; tout
0006fe  2805              CMP      r0,#5
000700  ddef              BLE      |L144.1762|
                  |L144.1794|
;;;1941   									{	}
;;;1942   	                clear();
000702  f7fffffe          BL       clear
;;;1943   									memset(data,0,strlen(data));
000706  4876              LDR      r0,|L144.2272|
000708  f7fffffe          BL       strlen
00070c  4604              MOV      r4,r0
00070e  4621              MOV      r1,r4
000710  4873              LDR      r0,|L144.2272|
000712  f7fffffe          BL       __aeabi_memclr
;;;1944   									clear();
000716  f7fffffe          BL       clear
;;;1945   
;;;1946   								
;;;1947   
;;;1948   
;;;1949   
;;;1950   //	log_it();
;;;1951   
;;;1952   			memset(data,0,strlen(data));
00071a  4871              LDR      r0,|L144.2272|
00071c  f7fffffe          BL       strlen
000720  4604              MOV      r4,r0
000722  4621              MOV      r1,r4
000724  486e              LDR      r0,|L144.2272|
000726  f7fffffe          BL       __aeabi_memclr
;;;1953   //*********************************tcp_initialization();***************************************//
;;;1954   
;;;1955   	
;;;1956   msg_sim800(); 
00072a  f7fffffe          BL       msg_sim800
;;;1957   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00072e  2005              MOVS     r0,#5
000730  4b65              LDR      r3,|L144.2248|
000732  4a66              LDR      r2,|L144.2252|
000734  496e              LDR      r1,|L144.2288|
000736  9000              STR      r0,[sp,#0]
000738  486e              LDR      r0,|L144.2292|
00073a  f7fffffe          BL       send_GSM
;;;1958   delay(100);
00073e  2064              MOVS     r0,#0x64
000740  f7fffffe          BL       delay
;;;1959   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
000744  2004              MOVS     r0,#4
000746  4b60              LDR      r3,|L144.2248|
000748  4a6b              LDR      r2,|L144.2296|
00074a  4969              LDR      r1,|L144.2288|
00074c  9000              STR      r0,[sp,#0]
00074e  486b              LDR      r0,|L144.2300|
000750  f7fffffe          BL       send_GSM
;;;1960   GPS_COLLECT2();
000754  f7fffffe          BL       GPS_COLLECT2
;;;1961   strcat(data,"CH\n");		
000758  4969              LDR      r1,|L144.2304|
00075a  4861              LDR      r0,|L144.2272|
00075c  f7fffffe          BL       strcat
;;;1962   GPS_COLLECT2();
000760  f7fffffe          BL       GPS_COLLECT2
;;;1963   strcat(data,"CH\n");	
000764  4966              LDR      r1,|L144.2304|
000766  485e              LDR      r0,|L144.2272|
000768  f7fffffe          BL       strcat
;;;1964   GPS_COLLECT2();
00076c  f7fffffe          BL       GPS_COLLECT2
;;;1965   strcat(data,"CH\n");
000770  4963              LDR      r1,|L144.2304|
000772  485b              LDR      r0,|L144.2272|
000774  f7fffffe          BL       strcat
;;;1966   cond201=(strstr(uart_string_gsm, "OK"));
000778  495d              LDR      r1,|L144.2288|
00077a  485c              LDR      r0,|L144.2284|
00077c  f7fffffe          BL       strstr
000780  4960              LDR      r1,|L144.2308|
000782  6008              STR      r0,[r1,#0]  ; cond201
;;;1967   cond200=(strstr(uart_string_gsm, "ERROR"));
000784  4950              LDR      r1,|L144.2248|
000786  4859              LDR      r0,|L144.2284|
000788  f7fffffe          BL       strstr
00078c  495e              LDR      r1,|L144.2312|
00078e  6008              STR      r0,[r1,#0]  ; cond200
;;;1968   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
000790  485c              LDR      r0,|L144.2308|
000792  6800              LDR      r0,[r0,#0]  ; cond201
000794  2800              CMP      r0,#0
000796  d101              BNE      |L144.1948|
000798  2001              MOVS     r0,#1
00079a  e000              B        |L144.1950|
                  |L144.1948|
00079c  2000              MOVS     r0,#0
                  |L144.1950|
00079e  2800              CMP      r0,#0
                  |L144.1952|
0007a0  d06d              BEQ      |L144.2174|
0007a2  4859              LDR      r0,|L144.2312|
0007a4  6800              LDR      r0,[r0,#0]  ; cond200
0007a6  2800              CMP      r0,#0
0007a8  d101              BNE      |L144.1966|
0007aa  2001              MOVS     r0,#1
0007ac  e000              B        |L144.1968|
                  |L144.1966|
0007ae  2000              MOVS     r0,#0
                  |L144.1968|
0007b0  2800              CMP      r0,#0
0007b2  d0f5              BEQ      |L144.1952|
0007b4  4855              LDR      r0,|L144.2316|
0007b6  6800              LDR      r0,[r0,#0]  ; sleep_flag
0007b8  2801              CMP      r0,#1
0007ba  d0f1              BEQ      |L144.1952|
;;;1969   {
;;;1970   delay(100);
0007bc  2064              MOVS     r0,#0x64
0007be  f7fffffe          BL       delay
;;;1971   clear();//memset(uart_string_gsm,0,5000);
0007c2  f7fffffe          BL       clear
;;;1972   memset(at_,0,100);
0007c6  2164              MOVS     r1,#0x64
0007c8  483e              LDR      r0,|L144.2244|
0007ca  f7fffffe          BL       __aeabi_memclr
;;;1973   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0007ce  4844              LDR      r0,|L144.2272|
0007d0  f7fffffe          BL       strlen
0007d4  1c44              ADDS     r4,r0,#1
0007d6  4623              MOV      r3,r4
0007d8  4a38              LDR      r2,|L144.2236|
0007da  4939              LDR      r1,|L144.2240|
0007dc  4839              LDR      r0,|L144.2244|
0007de  f7fffffe          BL       __2sprintf
;;;1974   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0007e2  2005              MOVS     r0,#5
0007e4  4b38              LDR      r3,|L144.2248|
0007e6  4a39              LDR      r2,|L144.2252|
0007e8  4939              LDR      r1,|L144.2256|
0007ea  9000              STR      r0,[sp,#0]
0007ec  4835              LDR      r0,|L144.2244|
0007ee  f7fffffe          BL       send_SD
;;;1975   clear();	
0007f2  f7fffffe          BL       clear
;;;1976   k2=0;									//string array counter for uart 1
0007f6  2000              MOVS     r0,#0
0007f8  4936              LDR      r1,|L144.2260|
0007fa  6008              STR      r0,[r1,#0]  ; k2
;;;1977   tout=0;	
0007fc  4936              LDR      r1,|L144.2264|
0007fe  6008              STR      r0,[r1,#0]  ; tout
;;;1978   for(k=0;k<strlen(data);k++)
000800  4936              LDR      r1,|L144.2268|
000802  6008              STR      r0,[r1,#0]  ; k
000804  e00b              B        |L144.2078|
                  |L144.2054|
;;;1979   {
;;;1980   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000806  4836              LDR      r0,|L144.2272|
000808  4a34              LDR      r2,|L144.2268|
00080a  6812              LDR      r2,[r2,#0]  ; k
00080c  5c81              LDRB     r1,[r0,r2]
00080e  4835              LDR      r0,|L144.2276|
000810  f7fffffe          BL       uart_putchar
000814  4831              LDR      r0,|L144.2268|
000816  6800              LDR      r0,[r0,#0]            ;1978  ; k
000818  1c40              ADDS     r0,r0,#1              ;1978
00081a  4930              LDR      r1,|L144.2268|
00081c  6008              STR      r0,[r1,#0]            ;1978  ; k
                  |L144.2078|
00081e  4830              LDR      r0,|L144.2272|
000820  f7fffffe          BL       strlen
000824  492d              LDR      r1,|L144.2268|
000826  6809              LDR      r1,[r1,#0]            ;1978  ; k
000828  4288              CMP      r0,r1                 ;1978
00082a  d8ec              BHI      |L144.2054|
;;;1981   }	
;;;1982   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00082c  210a              MOVS     r1,#0xa
00082e  482d              LDR      r0,|L144.2276|
000830  f7fffffe          BL       uart_putchar
000834  210a              MOVS     r1,#0xa
000836  482b              LDR      r0,|L144.2276|
000838  f7fffffe          BL       uart_putchar
00083c  210a              MOVS     r1,#0xa
00083e  4829              LDR      r0,|L144.2276|
000840  f7fffffe          BL       uart_putchar
000844  210a              MOVS     r1,#0xa
000846  4827              LDR      r0,|L144.2276|
000848  f7fffffe          BL       uart_putchar
00084c  210a              MOVS     r1,#0xa
00084e  4825              LDR      r0,|L144.2276|
000850  f7fffffe          BL       uart_putchar
000854  210a              MOVS     r1,#0xa
000856  4823              LDR      r0,|L144.2276|
000858  f7fffffe          BL       uart_putchar
00085c  210a              MOVS     r1,#0xa
00085e  4821              LDR      r0,|L144.2276|
000860  f7fffffe          BL       uart_putchar
000864  210a              MOVS     r1,#0xa
000866  481f              LDR      r0,|L144.2276|
000868  f7fffffe          BL       uart_putchar
00086c  210a              MOVS     r1,#0xa
00086e  481d              LDR      r0,|L144.2276|
000870  f7fffffe          BL       uart_putchar
000874  210a              MOVS     r1,#0xa
000876  481b              LDR      r0,|L144.2276|
000878  e002              B        |L144.2176|
                  |L144.2170|
00087a  e3fd              B        |L144.4216|
                  |L144.2172|
00087c  e398              B        |L144.4016|
                  |L144.2174|
00087e  e112              B        |L144.2726|
                  |L144.2176|
000880  f7fffffe          BL       uart_putchar
000884  210a              MOVS     r1,#0xa
000886  4817              LDR      r0,|L144.2276|
000888  f7fffffe          BL       uart_putchar
00088c  210a              MOVS     r1,#0xa
00088e  4815              LDR      r0,|L144.2276|
000890  f7fffffe          BL       uart_putchar
000894  210a              MOVS     r1,#0xa
000896  4813              LDR      r0,|L144.2276|
000898  f7fffffe          BL       uart_putchar
00089c  210a              MOVS     r1,#0xa
00089e  4811              LDR      r0,|L144.2276|
0008a0  f7fffffe          BL       uart_putchar
0008a4  210a              MOVS     r1,#0xa
0008a6  480f              LDR      r0,|L144.2276|
0008a8  f7fffffe          BL       uart_putchar
0008ac  210a              MOVS     r1,#0xa
0008ae  480d              LDR      r0,|L144.2276|
0008b0  f7fffffe          BL       uart_putchar
0008b4  210a              MOVS     r1,#0xa
0008b6  480b              LDR      r0,|L144.2276|
0008b8  e02a              B        |L144.2320|
0008ba  0000              DCW      0x0000
                  |L144.2236|
                          DCD      drive
                  |L144.2240|
                          DCD      ||.conststring||+0x434
                  |L144.2244|
                          DCD      at_
                  |L144.2248|
                          DCD      ||.conststring||+0xe0
                  |L144.2252|
                          DCD      ||.conststring||+0x18
                  |L144.2256|
                          DCD      ||.conststring||+0x20
                  |L144.2260|
                          DCD      ||k2||
                  |L144.2264|
                          DCD      tout
                  |L144.2268|
                          DCD      k
                  |L144.2272|
                          DCD      data
                  |L144.2276|
                          DCD      0x4006b000
                  |L144.2280|
                          DCD      ||.conststring||+0x70
                  |L144.2284|
                          DCD      uart_string_gsm
                  |L144.2288|
                          DCD      ||.conststring||+0x2c
                  |L144.2292|
                          DCD      ||.conststring||+0x66c
                  |L144.2296|
                          DCD      ||.conststring||+0x67c
                  |L144.2300|
                          DCD      ||.conststring||+0x690
                  |L144.2304|
                          DCD      ||.conststring||+0x430
                  |L144.2308|
                          DCD      cond201
                  |L144.2312|
                          DCD      cond200
                  |L144.2316|
                          DCD      sleep_flag
                  |L144.2320|
000910  f7fffffe          BL       uart_putchar
000914  210a              MOVS     r1,#0xa
000916  48fe              LDR      r0,|L144.3344|
000918  f7fffffe          BL       uart_putchar
00091c  210a              MOVS     r1,#0xa
00091e  48fc              LDR      r0,|L144.3344|
000920  f7fffffe          BL       uart_putchar
000924  210a              MOVS     r1,#0xa
000926  48fa              LDR      r0,|L144.3344|
000928  f7fffffe          BL       uart_putchar
00092c  210a              MOVS     r1,#0xa
00092e  48f8              LDR      r0,|L144.3344|
000930  f7fffffe          BL       uart_putchar
000934  210a              MOVS     r1,#0xa
000936  48f6              LDR      r0,|L144.3344|
000938  f7fffffe          BL       uart_putchar
00093c  210a              MOVS     r1,#0xa
00093e  48f4              LDR      r0,|L144.3344|
000940  f7fffffe          BL       uart_putchar
000944  210a              MOVS     r1,#0xa
000946  48f2              LDR      r0,|L144.3344|
000948  f7fffffe          BL       uart_putchar
00094c  210a              MOVS     r1,#0xa
00094e  48f0              LDR      r0,|L144.3344|
000950  f7fffffe          BL       uart_putchar
000954  210a              MOVS     r1,#0xa
000956  48ee              LDR      r0,|L144.3344|
000958  f7fffffe          BL       uart_putchar
00095c  210a              MOVS     r1,#0xa
00095e  48ec              LDR      r0,|L144.3344|
000960  f7fffffe          BL       uart_putchar
000964  210a              MOVS     r1,#0xa
000966  48ea              LDR      r0,|L144.3344|
000968  f7fffffe          BL       uart_putchar
00096c  210a              MOVS     r1,#0xa
00096e  48e8              LDR      r0,|L144.3344|
000970  f7fffffe          BL       uart_putchar
000974  210a              MOVS     r1,#0xa
000976  48e6              LDR      r0,|L144.3344|
000978  f7fffffe          BL       uart_putchar
00097c  210a              MOVS     r1,#0xa
00097e  48e4              LDR      r0,|L144.3344|
000980  f7fffffe          BL       uart_putchar
000984  210a              MOVS     r1,#0xa
000986  48e2              LDR      r0,|L144.3344|
000988  f7fffffe          BL       uart_putchar
00098c  210a              MOVS     r1,#0xa
00098e  48e0              LDR      r0,|L144.3344|
000990  f7fffffe          BL       uart_putchar
000994  210a              MOVS     r1,#0xa
000996  48de              LDR      r0,|L144.3344|
000998  f7fffffe          BL       uart_putchar
00099c  210a              MOVS     r1,#0xa
00099e  48dc              LDR      r0,|L144.3344|
0009a0  f7fffffe          BL       uart_putchar
0009a4  210a              MOVS     r1,#0xa
0009a6  48da              LDR      r0,|L144.3344|
0009a8  f7fffffe          BL       uart_putchar
0009ac  210a              MOVS     r1,#0xa
0009ae  48d8              LDR      r0,|L144.3344|
0009b0  f7fffffe          BL       uart_putchar
0009b4  210a              MOVS     r1,#0xa
0009b6  48d6              LDR      r0,|L144.3344|
0009b8  f7fffffe          BL       uart_putchar
0009bc  210a              MOVS     r1,#0xa
0009be  48d4              LDR      r0,|L144.3344|
0009c0  f7fffffe          BL       uart_putchar
0009c4  210a              MOVS     r1,#0xa
0009c6  48d2              LDR      r0,|L144.3344|
0009c8  f7fffffe          BL       uart_putchar
0009cc  210a              MOVS     r1,#0xa
0009ce  48d0              LDR      r0,|L144.3344|
0009d0  f7fffffe          BL       uart_putchar
0009d4  210a              MOVS     r1,#0xa
0009d6  48ce              LDR      r0,|L144.3344|
0009d8  f7fffffe          BL       uart_putchar
0009dc  210a              MOVS     r1,#0xa
0009de  48cc              LDR      r0,|L144.3344|
0009e0  f7fffffe          BL       uart_putchar
0009e4  210a              MOVS     r1,#0xa
0009e6  48ca              LDR      r0,|L144.3344|
0009e8  f7fffffe          BL       uart_putchar
0009ec  210a              MOVS     r1,#0xa
0009ee  48c8              LDR      r0,|L144.3344|
0009f0  f7fffffe          BL       uart_putchar
0009f4  210a              MOVS     r1,#0xa
0009f6  48c6              LDR      r0,|L144.3344|
0009f8  f7fffffe          BL       uart_putchar
0009fc  210a              MOVS     r1,#0xa
0009fe  48c4              LDR      r0,|L144.3344|
000a00  f7fffffe          BL       uart_putchar
000a04  210a              MOVS     r1,#0xa
000a06  48c2              LDR      r0,|L144.3344|
000a08  f7fffffe          BL       uart_putchar
000a0c  210a              MOVS     r1,#0xa
000a0e  48c0              LDR      r0,|L144.3344|
000a10  f7fffffe          BL       uart_putchar
000a14  210a              MOVS     r1,#0xa
000a16  48be              LDR      r0,|L144.3344|
000a18  f7fffffe          BL       uart_putchar
000a1c  210a              MOVS     r1,#0xa
000a1e  48bc              LDR      r0,|L144.3344|
000a20  f7fffffe          BL       uart_putchar
000a24  210a              MOVS     r1,#0xa
000a26  48ba              LDR      r0,|L144.3344|
000a28  f7fffffe          BL       uart_putchar
000a2c  210a              MOVS     r1,#0xa
000a2e  48b8              LDR      r0,|L144.3344|
000a30  f7fffffe          BL       uart_putchar
000a34  210a              MOVS     r1,#0xa
000a36  48b6              LDR      r0,|L144.3344|
000a38  f7fffffe          BL       uart_putchar
000a3c  210a              MOVS     r1,#0xa
000a3e  48b4              LDR      r0,|L144.3344|
000a40  f7fffffe          BL       uart_putchar
000a44  210a              MOVS     r1,#0xa
000a46  48b2              LDR      r0,|L144.3344|
000a48  f7fffffe          BL       uart_putchar
000a4c  210a              MOVS     r1,#0xa
000a4e  48b0              LDR      r0,|L144.3344|
000a50  f7fffffe          BL       uart_putchar
;;;1983   									//memset(data,0,1000);
;;;1984   														//timer counts to wait for characters in uart 1 									
;;;1985   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000a54  bf00              NOP      
                  |L144.2646|
000a56  49af              LDR      r1,|L144.3348|
000a58  48af              LDR      r0,|L144.3352|
000a5a  f7fffffe          BL       strstr
000a5e  2800              CMP      r0,#0
000a60  d109              BNE      |L144.2678|
000a62  49ae              LDR      r1,|L144.3356|
000a64  48ac              LDR      r0,|L144.3352|
000a66  f7fffffe          BL       strstr
000a6a  2800              CMP      r0,#0
000a6c  d103              BNE      |L144.2678|
000a6e  48ac              LDR      r0,|L144.3360|
000a70  6800              LDR      r0,[r0,#0]  ; tout
000a72  2805              CMP      r0,#5
000a74  ddef              BLE      |L144.2646|
                  |L144.2678|
;;;1986   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1987   									}
;;;1988   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000a76  f7fffffe          BL       clear
;;;1989   									//clear();
;;;1990   									memset(data,0,strlen(data));
000a7a  48aa              LDR      r0,|L144.3364|
000a7c  f7fffffe          BL       strlen
000a80  4604              MOV      r4,r0
000a82  4621              MOV      r1,r4
000a84  48a7              LDR      r0,|L144.3364|
000a86  f7fffffe          BL       __aeabi_memclr
;;;1991   									clear();
000a8a  f7fffffe          BL       clear
;;;1992   									RESET_OFF;delay(100);
000a8e  2020              MOVS     r0,#0x20
000a90  49a5              LDR      r1,|L144.3368|
000a92  6088              STR      r0,[r1,#8]
000a94  2064              MOVS     r0,#0x64
000a96  f7fffffe          BL       delay
;;;1993   									RESET_ON;delay(100);		
000a9a  2020              MOVS     r0,#0x20
000a9c  49a2              LDR      r1,|L144.3368|
000a9e  6048              STR      r0,[r1,#4]
000aa0  2064              MOVS     r0,#0x64
000aa2  f7fffffe          BL       delay
                  |L144.2726|
;;;1994   }
;;;1995   	
;;;1996   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000aa6  2004              MOVS     r0,#4
000aa8  4ba0              LDR      r3,|L144.3372|
000aaa  4aa1              LDR      r2,|L144.3376|
000aac  49a1              LDR      r1,|L144.3380|
000aae  9000              STR      r0,[sp,#0]
000ab0  48a1              LDR      r0,|L144.3384|
000ab2  f7fffffe          BL       send_GSM
;;;1997   GPS_COLLECT2();
000ab6  f7fffffe          BL       GPS_COLLECT2
;;;1998   strcat(data,"CH\n");	
000aba  49a0              LDR      r1,|L144.3388|
000abc  4899              LDR      r0,|L144.3364|
000abe  f7fffffe          BL       strcat
;;;1999   memset(at_,0,100);
000ac2  2164              MOVS     r1,#0x64
000ac4  489e              LDR      r0,|L144.3392|
000ac6  f7fffffe          BL       __aeabi_memclr
;;;2000   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000aca  4a9e              LDR      r2,|L144.3396|
000acc  499e              LDR      r1,|L144.3400|
000ace  489c              LDR      r0,|L144.3392|
000ad0  f7fffffe          BL       __2sprintf
;;;2001   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000ad4  489d              LDR      r0,|L144.3404|
000ad6  6800              LDR      r0,[r0,#0]  ; tmeout
000ad8  4b94              LDR      r3,|L144.3372|
000ada  4a95              LDR      r2,|L144.3376|
000adc  4995              LDR      r1,|L144.3380|
000ade  9000              STR      r0,[sp,#0]
000ae0  4897              LDR      r0,|L144.3392|
000ae2  f7fffffe          BL       send_GSM
;;;2002   msg_sim800(); 
000ae6  f7fffffe          BL       msg_sim800
;;;2003   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000aea  2004              MOVS     r0,#4
000aec  4b98              LDR      r3,|L144.3408|
000aee  4a90              LDR      r2,|L144.3376|
000af0  4990              LDR      r1,|L144.3380|
000af2  9000              STR      r0,[sp,#0]
000af4  4897              LDR      r0,|L144.3412|
000af6  f7fffffe          BL       send_GSM
;;;2004   GPS_COLLECT2();
000afa  f7fffffe          BL       GPS_COLLECT2
;;;2005   strcat(data,"CH\n");	
000afe  498f              LDR      r1,|L144.3388|
000b00  4888              LDR      r0,|L144.3364|
000b02  f7fffffe          BL       strcat
;;;2006   GPS_COLLECT2();
000b06  f7fffffe          BL       GPS_COLLECT2
;;;2007   strcat(data,"CH\n");	
000b0a  498c              LDR      r1,|L144.3388|
000b0c  4885              LDR      r0,|L144.3364|
000b0e  f7fffffe          BL       strcat
;;;2008   
;;;2009   
;;;2010   msg_sim800(); 
000b12  f7fffffe          BL       msg_sim800
;;;2011   GPS_COLLECT2();
000b16  f7fffffe          BL       GPS_COLLECT2
;;;2012   strcat(data,"CH\n");	
000b1a  4988              LDR      r1,|L144.3388|
000b1c  4881              LDR      r0,|L144.3364|
000b1e  f7fffffe          BL       strcat
;;;2013   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000b22  f7fffffe          BL       clear
000b26  488c              LDR      r0,|L144.3416|
000b28  f7fffffe          BL       send_modem
000b2c  f7fffffe          BL       clear
;;;2014   					delay(20);
000b30  2014              MOVS     r0,#0x14
000b32  f7fffffe          BL       delay
;;;2015   
;;;2016   
;;;2017   msg_sim800(); 
000b36  f7fffffe          BL       msg_sim800
;;;2018   
;;;2019   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000b3a  4b88              LDR      r3,|L144.3420|
000b3c  4a88              LDR      r2,|L144.3424|
000b3e  4989              LDR      r1,|L144.3428|
000b40  487f              LDR      r0,|L144.3392|
000b42  f7fffffe          BL       __2sprintf
;;;2020   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000b46  4881              LDR      r0,|L144.3404|
000b48  6800              LDR      r0,[r0,#0]  ; tmeout
000b4a  4b78              LDR      r3,|L144.3372|
000b4c  4a73              LDR      r2,|L144.3356|
000b4e  4986              LDR      r1,|L144.3432|
000b50  9000              STR      r0,[sp,#0]
000b52  487b              LDR      r0,|L144.3392|
000b54  f7fffffe          BL       send_GSM
;;;2021   						clear();
000b58  f7fffffe          BL       clear
;;;2022   						
;;;2023   						
;;;2024   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
000b5c  487b              LDR      r0,|L144.3404|
000b5e  6800              LDR      r0,[r0,#0]  ; tmeout
000b60  4b82              LDR      r3,|L144.3436|
000b62  4a6e              LDR      r2,|L144.3356|
000b64  4982              LDR      r1,|L144.3440|
000b66  9000              STR      r0,[sp,#0]
000b68  4882              LDR      r0,|L144.3444|
000b6a  f7fffffe          BL       send_GSM
;;;2025   									
;;;2026   //*********************************tcp_initialization ends*************************************//									
;;;2027   			if(mystrstr(uart_string_gsm,'>')){
000b6e  213e              MOVS     r1,#0x3e
000b70  4869              LDR      r0,|L144.3352|
000b72  f7fffffe          BL       mystrstr
000b76  2800              CMP      r0,#0
000b78  d07e              BEQ      |L144.3192|
;;;2028   									clear();
000b7a  f7fffffe          BL       clear
;;;2029   									memset(uart_string_gsm,0,5000);
000b7e  497e              LDR      r1,|L144.3448|
000b80  4865              LDR      r0,|L144.3352|
000b82  f7fffffe          BL       __aeabi_memclr
;;;2030   									qwe=strlen(data);
000b86  4867              LDR      r0,|L144.3364|
000b88  f7fffffe          BL       strlen
000b8c  497b              LDR      r1,|L144.3452|
000b8e  6008              STR      r0,[r1,#0]  ; qwe
;;;2031   									tout=0;
000b90  2000              MOVS     r0,#0
000b92  4963              LDR      r1,|L144.3360|
000b94  6008              STR      r0,[r1,#0]  ; tout
;;;2032   									k2=0;
000b96  497a              LDR      r1,|L144.3456|
000b98  6008              STR      r0,[r1,#0]  ; k2
;;;2033   									for(k=0;k<(qwe);k++)
000b9a  497a              LDR      r1,|L144.3460|
000b9c  6008              STR      r0,[r1,#0]  ; k
000b9e  e00b              B        |L144.3000|
                  |L144.2976|
;;;2034   									{
;;;2035   										uart_putchar(UART1_BASE_PTR, data[k]);
000ba0  4860              LDR      r0,|L144.3364|
000ba2  4a78              LDR      r2,|L144.3460|
000ba4  6812              LDR      r2,[r2,#0]  ; k
000ba6  5c81              LDRB     r1,[r0,r2]
000ba8  4859              LDR      r0,|L144.3344|
000baa  f7fffffe          BL       uart_putchar
000bae  4875              LDR      r0,|L144.3460|
000bb0  6800              LDR      r0,[r0,#0]            ;2033  ; k
000bb2  1c40              ADDS     r0,r0,#1              ;2033
000bb4  4973              LDR      r1,|L144.3460|
000bb6  6008              STR      r0,[r1,#0]            ;2033  ; k
                  |L144.3000|
000bb8  4872              LDR      r0,|L144.3460|
000bba  6800              LDR      r0,[r0,#0]            ;2033  ; k
000bbc  496f              LDR      r1,|L144.3452|
000bbe  6809              LDR      r1,[r1,#0]            ;2033  ; qwe
000bc0  4288              CMP      r0,r1                 ;2033
000bc2  dbed              BLT      |L144.2976|
;;;2036   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
000bc4  210a              MOVS     r1,#0xa
000bc6  4852              LDR      r0,|L144.3344|
000bc8  f7fffffe          BL       uart_putchar
000bcc  211a              MOVS     r1,#0x1a
000bce  e000              B        |L144.3026|
                  |L144.3024|
000bd0  e3fe              B        |L144.5072|
                  |L144.3026|
000bd2  484f              LDR      r0,|L144.3344|
000bd4  f7fffffe          BL       uart_putchar
000bd8  211a              MOVS     r1,#0x1a
000bda  484d              LDR      r0,|L144.3344|
000bdc  f7fffffe          BL       uart_putchar
000be0  211a              MOVS     r1,#0x1a
000be2  484b              LDR      r0,|L144.3344|
000be4  f7fffffe          BL       uart_putchar
000be8  211a              MOVS     r1,#0x1a
000bea  4849              LDR      r0,|L144.3344|
000bec  f7fffffe          BL       uart_putchar
000bf0  211a              MOVS     r1,#0x1a
000bf2  4847              LDR      r0,|L144.3344|
000bf4  f7fffffe          BL       uart_putchar
000bf8  211a              MOVS     r1,#0x1a
000bfa  4845              LDR      r0,|L144.3344|
000bfc  f7fffffe          BL       uart_putchar
;;;2037   															do
000c00  bf00              NOP      
                  |L144.3074|
;;;2038   																{q1=strstr(uart_string_gsm,"SEND OK");
000c02  4961              LDR      r1,|L144.3464|
000c04  4844              LDR      r0,|L144.3352|
000c06  f7fffffe          BL       strstr
000c0a  4960              LDR      r1,|L144.3468|
000c0c  6008              STR      r0,[r1,#0]  ; q1
;;;2039   																	q2=strstr(uart_string_gsm, "ERROR");
000c0e  4943              LDR      r1,|L144.3356|
000c10  4841              LDR      r0,|L144.3352|
000c12  f7fffffe          BL       strstr
000c16  495e              LDR      r1,|L144.3472|
000c18  6008              STR      r0,[r1,#0]  ; q2
;;;2040   																		q3=strstr(uart_string_gsm, "FAIL");	
000c1a  495e              LDR      r1,|L144.3476|
000c1c  483e              LDR      r0,|L144.3352|
000c1e  f7fffffe          BL       strstr
000c22  495d              LDR      r1,|L144.3480|
000c24  6008              STR      r0,[r1,#0]  ; q3
;;;2041   																			q4=strstr(uart_string_gsm, "DEACT");	
000c26  494a              LDR      r1,|L144.3408|
000c28  483b              LDR      r0,|L144.3352|
000c2a  f7fffffe          BL       strstr
000c2e  495b              LDR      r1,|L144.3484|
000c30  6008              STR      r0,[r1,#0]  ; q4
;;;2042   																	
;;;2043   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
000c32  4856              LDR      r0,|L144.3468|
000c34  6800              LDR      r0,[r0,#0]  ; q1
000c36  2800              CMP      r0,#0
000c38  d10f              BNE      |L144.3162|
000c3a  4855              LDR      r0,|L144.3472|
000c3c  6800              LDR      r0,[r0,#0]  ; q2
000c3e  2800              CMP      r0,#0
000c40  d10b              BNE      |L144.3162|
000c42  4855              LDR      r0,|L144.3480|
000c44  6800              LDR      r0,[r0,#0]  ; q3
000c46  2800              CMP      r0,#0
000c48  d107              BNE      |L144.3162|
000c4a  4608              MOV      r0,r1
000c4c  6800              LDR      r0,[r0,#0]  ; q4
000c4e  2800              CMP      r0,#0
000c50  d103              BNE      |L144.3162|
000c52  4833              LDR      r0,|L144.3360|
000c54  6800              LDR      r0,[r0,#0]  ; tout
000c56  2808              CMP      r0,#8
000c58  ddd3              BLE      |L144.3074|
                  |L144.3162|
;;;2044   															
;;;2045   																			delay(10);clear();
000c5a  200a              MOVS     r0,#0xa
000c5c  f7fffffe          BL       delay
000c60  f7fffffe          BL       clear
;;;2046   														uart_putchar(UART1_BASE_PTR,0x1A);
000c64  211a              MOVS     r1,#0x1a
000c66  482a              LDR      r0,|L144.3344|
000c68  f7fffffe          BL       uart_putchar
;;;2047   												delay(10);
000c6c  200a              MOVS     r0,#0xa
000c6e  f7fffffe          BL       delay
;;;2048   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000c72  211a              MOVS     r1,#0x1a
000c74  4826              LDR      r0,|L144.3344|
000c76  e000              B        |L144.3194|
                  |L144.3192|
000c78  e19b              B        |L144.4018|
                  |L144.3194|
000c7a  f7fffffe          BL       uart_putchar
000c7e  211a              MOVS     r1,#0x1a
000c80  4823              LDR      r0,|L144.3344|
000c82  f7fffffe          BL       uart_putchar
000c86  211a              MOVS     r1,#0x1a
000c88  4821              LDR      r0,|L144.3344|
000c8a  f7fffffe          BL       uart_putchar
;;;2049   delay(20);
000c8e  2014              MOVS     r0,#0x14
000c90  f7fffffe          BL       delay
;;;2050   if(!strstr(uart_string_gsm,"SEND OK")){
000c94  493c              LDR      r1,|L144.3464|
000c96  4820              LDR      r0,|L144.3352|
000c98  f7fffffe          BL       strstr
000c9c  2800              CMP      r0,#0
000c9e  d001              BEQ      |L144.3236|
000ca0  f001f9c0          BL       |L144.8228|
                  |L144.3236|
;;;2051   
;;;2052   
;;;2053   	delay(100);
000ca4  2064              MOVS     r0,#0x64
000ca6  f7fffffe          BL       delay
;;;2054   		clear();//memset(uart_string_gsm,0,5000);
000caa  f7fffffe          BL       clear
;;;2055   	
;;;2056   	memset(at_,0,100);
000cae  2164              MOVS     r1,#0x64
000cb0  4823              LDR      r0,|L144.3392|
000cb2  f7fffffe          BL       __aeabi_memclr
;;;2057   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000cb6  481b              LDR      r0,|L144.3364|
000cb8  f7fffffe          BL       strlen
000cbc  1c44              ADDS     r4,r0,#1
000cbe  4623              MOV      r3,r4
000cc0  4a37              LDR      r2,|L144.3488|
000cc2  4938              LDR      r1,|L144.3492|
000cc4  481e              LDR      r0,|L144.3392|
000cc6  f7fffffe          BL       __2sprintf
;;;2058   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000cca  2005              MOVS     r0,#5
000ccc  4b13              LDR      r3,|L144.3356|
000cce  4a18              LDR      r2,|L144.3376|
000cd0  4927              LDR      r1,|L144.3440|
000cd2  9000              STR      r0,[sp,#0]
000cd4  481a              LDR      r0,|L144.3392|
000cd6  f7fffffe          BL       send_SD
;;;2059   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2060   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2061   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2062   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2063   //	}
;;;2064   	
;;;2065   clear();	
000cda  f7fffffe          BL       clear
;;;2066   									k2=0;									//string array counter for uart 1
000cde  2000              MOVS     r0,#0
000ce0  4927              LDR      r1,|L144.3456|
000ce2  6008              STR      r0,[r1,#0]  ; k2
;;;2067   									tout=0;	
000ce4  490e              LDR      r1,|L144.3360|
000ce6  6008              STR      r0,[r1,#0]  ; tout
;;;2068   		for(k=0;k<strlen(data);k++)
000ce8  4926              LDR      r1,|L144.3460|
000cea  6008              STR      r0,[r1,#0]  ; k
000cec  e00b              B        |L144.3334|
                  |L144.3310|
;;;2069   		{
;;;2070   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000cee  480d              LDR      r0,|L144.3364|
000cf0  4a24              LDR      r2,|L144.3460|
000cf2  6812              LDR      r2,[r2,#0]  ; k
000cf4  5c81              LDRB     r1,[r0,r2]
000cf6  4806              LDR      r0,|L144.3344|
000cf8  f7fffffe          BL       uart_putchar
000cfc  4821              LDR      r0,|L144.3460|
000cfe  6800              LDR      r0,[r0,#0]            ;2068  ; k
000d00  1c40              ADDS     r0,r0,#1              ;2068
000d02  4920              LDR      r1,|L144.3460|
000d04  6008              STR      r0,[r1,#0]            ;2068  ; k
                  |L144.3334|
000d06  4807              LDR      r0,|L144.3364|
000d08  f7fffffe          BL       strlen
000d0c  491d              LDR      r1,|L144.3460|
000d0e  e04b              B        |L144.3496|
                  |L144.3344|
                          DCD      0x4006b000
                  |L144.3348|
                          DCD      ||.conststring||+0x70
                  |L144.3352|
                          DCD      uart_string_gsm
                  |L144.3356|
                          DCD      ||.conststring||+0xe0
                  |L144.3360|
                          DCD      tout
                  |L144.3364|
                          DCD      data
                  |L144.3368|
                          DCD      0x400ff080
                  |L144.3372|
                          DCD      ||.conststring||+0x10
                  |L144.3376|
                          DCD      ||.conststring||+0x18
                  |L144.3380|
                          DCD      ||.conststring||+0x2c
                  |L144.3384|
                          DCD      ||.conststring||+0x6a0
                  |L144.3388|
                          DCD      ||.conststring||+0x430
                  |L144.3392|
                          DCD      at_
                  |L144.3396|
                          DCD      apn
                  |L144.3400|
                          DCD      ||.conststring||+0x6b0
                  |L144.3404|
                          DCD      tmeout
                  |L144.3408|
                          DCD      ||.conststring||+0x61c
                  |L144.3412|
                          DCD      ||.conststring||+0x6c4
                  |L144.3416|
                          DCD      ||.conststring||+0x6d4
                  |L144.3420|
                          DCD      port
                  |L144.3424|
                          DCD      ||ip||
                  |L144.3428|
                          DCD      ||.conststring||+0x6e4
                  |L144.3432|
                          DCD      ||.conststring||+0x654
                  |L144.3436|
                          DCD      ||.conststring||+0x704
                  |L144.3440|
                          DCD      ||.conststring||+0x20
                  |L144.3444|
                          DCD      ||.conststring||+0x65c
                  |L144.3448|
                          DCD      0x00001388
                  |L144.3452|
                          DCD      qwe
                  |L144.3456|
                          DCD      ||k2||
                  |L144.3460|
                          DCD      k
                  |L144.3464|
                          DCD      ||.conststring||+0x60c
                  |L144.3468|
                          DCD      ||q1||
                  |L144.3472|
                          DCD      ||q2||
                  |L144.3476|
                          DCD      ||.conststring||+0x614
                  |L144.3480|
                          DCD      ||q3||
                  |L144.3484|
                          DCD      ||q4||
                  |L144.3488|
                          DCD      drive
                  |L144.3492|
                          DCD      ||.conststring||+0x434
                  |L144.3496|
000da8  6809              LDR      r1,[r1,#0]            ;2068  ; k
000daa  4288              CMP      r0,r1                 ;2068
000dac  d89f              BHI      |L144.3310|
;;;2071   		}	
;;;2072   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000dae  210a              MOVS     r1,#0xa
000db0  48fe              LDR      r0,|L144.4524|
000db2  f7fffffe          BL       uart_putchar
000db6  210a              MOVS     r1,#0xa
000db8  48fc              LDR      r0,|L144.4524|
000dba  f7fffffe          BL       uart_putchar
000dbe  210a              MOVS     r1,#0xa
000dc0  48fa              LDR      r0,|L144.4524|
000dc2  f7fffffe          BL       uart_putchar
000dc6  210a              MOVS     r1,#0xa
000dc8  48f8              LDR      r0,|L144.4524|
000dca  f7fffffe          BL       uart_putchar
000dce  210a              MOVS     r1,#0xa
000dd0  48f6              LDR      r0,|L144.4524|
000dd2  f7fffffe          BL       uart_putchar
000dd6  210a              MOVS     r1,#0xa
000dd8  48f4              LDR      r0,|L144.4524|
000dda  f7fffffe          BL       uart_putchar
000dde  210a              MOVS     r1,#0xa
000de0  48f2              LDR      r0,|L144.4524|
000de2  f7fffffe          BL       uart_putchar
000de6  210a              MOVS     r1,#0xa
000de8  48f0              LDR      r0,|L144.4524|
000dea  f7fffffe          BL       uart_putchar
000dee  210a              MOVS     r1,#0xa
000df0  48ee              LDR      r0,|L144.4524|
000df2  f7fffffe          BL       uart_putchar
000df6  210a              MOVS     r1,#0xa
000df8  48ec              LDR      r0,|L144.4524|
000dfa  f7fffffe          BL       uart_putchar
000dfe  210a              MOVS     r1,#0xa
000e00  48ea              LDR      r0,|L144.4524|
000e02  f7fffffe          BL       uart_putchar
000e06  210a              MOVS     r1,#0xa
000e08  48e8              LDR      r0,|L144.4524|
000e0a  f7fffffe          BL       uart_putchar
000e0e  210a              MOVS     r1,#0xa
000e10  48e6              LDR      r0,|L144.4524|
000e12  f7fffffe          BL       uart_putchar
000e16  210a              MOVS     r1,#0xa
000e18  48e4              LDR      r0,|L144.4524|
000e1a  f7fffffe          BL       uart_putchar
000e1e  210a              MOVS     r1,#0xa
000e20  48e2              LDR      r0,|L144.4524|
000e22  f7fffffe          BL       uart_putchar
000e26  210a              MOVS     r1,#0xa
000e28  48e0              LDR      r0,|L144.4524|
000e2a  f7fffffe          BL       uart_putchar
000e2e  210a              MOVS     r1,#0xa
000e30  48de              LDR      r0,|L144.4524|
000e32  f7fffffe          BL       uart_putchar
000e36  210a              MOVS     r1,#0xa
000e38  48dc              LDR      r0,|L144.4524|
000e3a  f7fffffe          BL       uart_putchar
000e3e  210a              MOVS     r1,#0xa
000e40  48da              LDR      r0,|L144.4524|
000e42  f7fffffe          BL       uart_putchar
000e46  210a              MOVS     r1,#0xa
000e48  48d8              LDR      r0,|L144.4524|
000e4a  f7fffffe          BL       uart_putchar
000e4e  210a              MOVS     r1,#0xa
000e50  48d6              LDR      r0,|L144.4524|
000e52  f7fffffe          BL       uart_putchar
000e56  210a              MOVS     r1,#0xa
000e58  48d4              LDR      r0,|L144.4524|
000e5a  f7fffffe          BL       uart_putchar
000e5e  210a              MOVS     r1,#0xa
000e60  48d2              LDR      r0,|L144.4524|
000e62  f7fffffe          BL       uart_putchar
000e66  210a              MOVS     r1,#0xa
000e68  48d0              LDR      r0,|L144.4524|
000e6a  f7fffffe          BL       uart_putchar
000e6e  210a              MOVS     r1,#0xa
000e70  48ce              LDR      r0,|L144.4524|
000e72  f7fffffe          BL       uart_putchar
000e76  210a              MOVS     r1,#0xa
000e78  48cc              LDR      r0,|L144.4524|
000e7a  f7fffffe          BL       uart_putchar
000e7e  210a              MOVS     r1,#0xa
000e80  48ca              LDR      r0,|L144.4524|
000e82  f7fffffe          BL       uart_putchar
000e86  210a              MOVS     r1,#0xa
000e88  48c8              LDR      r0,|L144.4524|
000e8a  f7fffffe          BL       uart_putchar
000e8e  210a              MOVS     r1,#0xa
000e90  48c6              LDR      r0,|L144.4524|
000e92  f7fffffe          BL       uart_putchar
000e96  210a              MOVS     r1,#0xa
000e98  48c4              LDR      r0,|L144.4524|
000e9a  f7fffffe          BL       uart_putchar
000e9e  210a              MOVS     r1,#0xa
000ea0  48c2              LDR      r0,|L144.4524|
000ea2  f7fffffe          BL       uart_putchar
000ea6  210a              MOVS     r1,#0xa
000ea8  48c0              LDR      r0,|L144.4524|
000eaa  f7fffffe          BL       uart_putchar
000eae  210a              MOVS     r1,#0xa
000eb0  48be              LDR      r0,|L144.4524|
000eb2  f7fffffe          BL       uart_putchar
000eb6  210a              MOVS     r1,#0xa
000eb8  48bc              LDR      r0,|L144.4524|
000eba  f7fffffe          BL       uart_putchar
000ebe  210a              MOVS     r1,#0xa
000ec0  48ba              LDR      r0,|L144.4524|
000ec2  f7fffffe          BL       uart_putchar
000ec6  210a              MOVS     r1,#0xa
000ec8  48b8              LDR      r0,|L144.4524|
000eca  f7fffffe          BL       uart_putchar
000ece  210a              MOVS     r1,#0xa
000ed0  48b6              LDR      r0,|L144.4524|
000ed2  f7fffffe          BL       uart_putchar
000ed6  210a              MOVS     r1,#0xa
000ed8  48b4              LDR      r0,|L144.4524|
000eda  f7fffffe          BL       uart_putchar
000ede  210a              MOVS     r1,#0xa
000ee0  48b2              LDR      r0,|L144.4524|
000ee2  f7fffffe          BL       uart_putchar
000ee6  210a              MOVS     r1,#0xa
000ee8  48b0              LDR      r0,|L144.4524|
000eea  f7fffffe          BL       uart_putchar
000eee  210a              MOVS     r1,#0xa
000ef0  48ae              LDR      r0,|L144.4524|
000ef2  f7fffffe          BL       uart_putchar
000ef6  210a              MOVS     r1,#0xa
000ef8  48ac              LDR      r0,|L144.4524|
000efa  f7fffffe          BL       uart_putchar
000efe  210a              MOVS     r1,#0xa
000f00  48aa              LDR      r0,|L144.4524|
000f02  f7fffffe          BL       uart_putchar
000f06  210a              MOVS     r1,#0xa
000f08  48a8              LDR      r0,|L144.4524|
000f0a  f7fffffe          BL       uart_putchar
000f0e  210a              MOVS     r1,#0xa
000f10  48a6              LDR      r0,|L144.4524|
000f12  f7fffffe          BL       uart_putchar
000f16  210a              MOVS     r1,#0xa
000f18  48a4              LDR      r0,|L144.4524|
000f1a  f7fffffe          BL       uart_putchar
000f1e  210a              MOVS     r1,#0xa
000f20  48a2              LDR      r0,|L144.4524|
000f22  f7fffffe          BL       uart_putchar
000f26  210a              MOVS     r1,#0xa
000f28  48a0              LDR      r0,|L144.4524|
000f2a  f7fffffe          BL       uart_putchar
000f2e  210a              MOVS     r1,#0xa
000f30  489e              LDR      r0,|L144.4524|
000f32  f7fffffe          BL       uart_putchar
000f36  210a              MOVS     r1,#0xa
000f38  489c              LDR      r0,|L144.4524|
000f3a  f7fffffe          BL       uart_putchar
000f3e  210a              MOVS     r1,#0xa
000f40  489a              LDR      r0,|L144.4524|
000f42  f7fffffe          BL       uart_putchar
000f46  210a              MOVS     r1,#0xa
000f48  4898              LDR      r0,|L144.4524|
000f4a  f7fffffe          BL       uart_putchar
000f4e  210a              MOVS     r1,#0xa
000f50  4896              LDR      r0,|L144.4524|
000f52  f7fffffe          BL       uart_putchar
000f56  210a              MOVS     r1,#0xa
000f58  4894              LDR      r0,|L144.4524|
000f5a  f7fffffe          BL       uart_putchar
000f5e  210a              MOVS     r1,#0xa
000f60  4892              LDR      r0,|L144.4524|
000f62  f7fffffe          BL       uart_putchar
000f66  210a              MOVS     r1,#0xa
000f68  4890              LDR      r0,|L144.4524|
000f6a  f7fffffe          BL       uart_putchar
000f6e  210a              MOVS     r1,#0xa
000f70  488e              LDR      r0,|L144.4524|
000f72  f7fffffe          BL       uart_putchar
;;;2073   									//memset(data,0,1000);
;;;2074   														//timer counts to wait for characters in uart 1 									
;;;2075   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000f76  bf00              NOP      
                  |L144.3960|
000f78  498d              LDR      r1,|L144.4528|
000f7a  488e              LDR      r0,|L144.4532|
000f7c  f7fffffe          BL       strstr
000f80  2800              CMP      r0,#0
000f82  d109              BNE      |L144.3992|
000f84  498c              LDR      r1,|L144.4536|
000f86  488b              LDR      r0,|L144.4532|
000f88  f7fffffe          BL       strstr
000f8c  2800              CMP      r0,#0
000f8e  d103              BNE      |L144.3992|
000f90  488a              LDR      r0,|L144.4540|
000f92  6800              LDR      r0,[r0,#0]  ; tout
000f94  2805              CMP      r0,#5
000f96  ddef              BLE      |L144.3960|
                  |L144.3992|
;;;2076   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2077   									}
;;;2078   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000f98  f7fffffe          BL       clear
;;;2079   									//clear();
;;;2080   									memset(data,0,strlen(data));
000f9c  4888              LDR      r0,|L144.4544|
000f9e  f7fffffe          BL       strlen
000fa2  4604              MOV      r4,r0
000fa4  4621              MOV      r1,r4
000fa6  4886              LDR      r0,|L144.4544|
000fa8  f7fffffe          BL       __aeabi_memclr
;;;2081   									clear();
000fac  f7fffffe          BL       clear
                  |L144.4016|
;;;2082   
;;;2083   								
;;;2084   
;;;2085   break;
000fb0  e3fe              B        |L144.6064|
                  |L144.4018|
;;;2086   //log_it();
;;;2087   }
;;;2088   			
;;;2089   			
;;;2090   			
;;;2091   			
;;;2092   			
;;;2093   			}
;;;2094   			else
;;;2095   			{
;;;2096   			
;;;2097   			
;;;2098   		delay(100);
000fb2  2064              MOVS     r0,#0x64
000fb4  f7fffffe          BL       delay
;;;2099   		clear();//memset(uart_string_gsm,0,5000);
000fb8  f7fffffe          BL       clear
;;;2100   	
;;;2101   	memset(at_,0,100);
000fbc  2164              MOVS     r1,#0x64
000fbe  4881              LDR      r0,|L144.4548|
000fc0  f7fffffe          BL       __aeabi_memclr
;;;2102   	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000fc4  487e              LDR      r0,|L144.4544|
000fc6  f7fffffe          BL       strlen
000fca  1c44              ADDS     r4,r0,#1
000fcc  4623              MOV      r3,r4
000fce  4a7e              LDR      r2,|L144.4552|
000fd0  497e              LDR      r1,|L144.4556|
000fd2  487c              LDR      r0,|L144.4548|
000fd4  f7fffffe          BL       __2sprintf
;;;2103   	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000fd8  2005              MOVS     r0,#5
000fda  4b77              LDR      r3,|L144.4536|
000fdc  4a7c              LDR      r2,|L144.4560|
000fde  497d              LDR      r1,|L144.4564|
000fe0  9000              STR      r0,[sp,#0]
000fe2  4878              LDR      r0,|L144.4548|
000fe4  f7fffffe          BL       send_SD
;;;2104   	
;;;2105   	clear();	
000fe8  f7fffffe          BL       clear
;;;2106   									k2=0;									//string array counter for uart 1
000fec  2000              MOVS     r0,#0
000fee  497a              LDR      r1,|L144.4568|
000ff0  6008              STR      r0,[r1,#0]  ; k2
;;;2107   									tout=0;	
000ff2  4972              LDR      r1,|L144.4540|
000ff4  6008              STR      r0,[r1,#0]  ; tout
;;;2108   		for(k=0;k<strlen(data);k++)
000ff6  4979              LDR      r1,|L144.4572|
000ff8  6008              STR      r0,[r1,#0]  ; k
000ffa  e00b              B        |L144.4116|
                  |L144.4092|
;;;2109   		{
;;;2110   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000ffc  4870              LDR      r0,|L144.4544|
000ffe  4a77              LDR      r2,|L144.4572|
001000  6812              LDR      r2,[r2,#0]  ; k
001002  5c81              LDRB     r1,[r0,r2]
001004  4869              LDR      r0,|L144.4524|
001006  f7fffffe          BL       uart_putchar
00100a  4874              LDR      r0,|L144.4572|
00100c  6800              LDR      r0,[r0,#0]            ;2108  ; k
00100e  1c40              ADDS     r0,r0,#1              ;2108
001010  4972              LDR      r1,|L144.4572|
001012  6008              STR      r0,[r1,#0]            ;2108  ; k
                  |L144.4116|
001014  486a              LDR      r0,|L144.4544|
001016  f7fffffe          BL       strlen
00101a  4970              LDR      r1,|L144.4572|
00101c  6809              LDR      r1,[r1,#0]            ;2108  ; k
00101e  4288              CMP      r0,r1                 ;2108
001020  d8ec              BHI      |L144.4092|
;;;2111   		}	
;;;2112   		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001022  210a              MOVS     r1,#0xa
001024  4861              LDR      r0,|L144.4524|
001026  f7fffffe          BL       uart_putchar
00102a  210a              MOVS     r1,#0xa
00102c  485f              LDR      r0,|L144.4524|
00102e  f7fffffe          BL       uart_putchar
001032  210a              MOVS     r1,#0xa
001034  485d              LDR      r0,|L144.4524|
001036  f7fffffe          BL       uart_putchar
00103a  210a              MOVS     r1,#0xa
00103c  485b              LDR      r0,|L144.4524|
00103e  f7fffffe          BL       uart_putchar
001042  210a              MOVS     r1,#0xa
001044  4859              LDR      r0,|L144.4524|
001046  f7fffffe          BL       uart_putchar
00104a  210a              MOVS     r1,#0xa
00104c  4857              LDR      r0,|L144.4524|
00104e  f7fffffe          BL       uart_putchar
001052  210a              MOVS     r1,#0xa
001054  4855              LDR      r0,|L144.4524|
001056  f7fffffe          BL       uart_putchar
00105a  210a              MOVS     r1,#0xa
00105c  4853              LDR      r0,|L144.4524|
00105e  f7fffffe          BL       uart_putchar
001062  210a              MOVS     r1,#0xa
001064  4851              LDR      r0,|L144.4524|
001066  f7fffffe          BL       uart_putchar
00106a  210a              MOVS     r1,#0xa
00106c  484f              LDR      r0,|L144.4524|
00106e  f7fffffe          BL       uart_putchar
001072  210a              MOVS     r1,#0xa
001074  484d              LDR      r0,|L144.4524|
001076  e000              B        |L144.4218|
                  |L144.4216|
001078  e3fe              B        |L144.6264|
                  |L144.4218|
00107a  f7fffffe          BL       uart_putchar
00107e  210a              MOVS     r1,#0xa
001080  484a              LDR      r0,|L144.4524|
001082  f7fffffe          BL       uart_putchar
001086  210a              MOVS     r1,#0xa
001088  4848              LDR      r0,|L144.4524|
00108a  f7fffffe          BL       uart_putchar
00108e  210a              MOVS     r1,#0xa
001090  4846              LDR      r0,|L144.4524|
001092  f7fffffe          BL       uart_putchar
001096  210a              MOVS     r1,#0xa
001098  4844              LDR      r0,|L144.4524|
00109a  f7fffffe          BL       uart_putchar
00109e  210a              MOVS     r1,#0xa
0010a0  4842              LDR      r0,|L144.4524|
0010a2  f7fffffe          BL       uart_putchar
0010a6  210a              MOVS     r1,#0xa
0010a8  4840              LDR      r0,|L144.4524|
0010aa  f7fffffe          BL       uart_putchar
0010ae  210a              MOVS     r1,#0xa
0010b0  483e              LDR      r0,|L144.4524|
0010b2  f7fffffe          BL       uart_putchar
0010b6  210a              MOVS     r1,#0xa
0010b8  483c              LDR      r0,|L144.4524|
0010ba  f7fffffe          BL       uart_putchar
0010be  210a              MOVS     r1,#0xa
0010c0  483a              LDR      r0,|L144.4524|
0010c2  f7fffffe          BL       uart_putchar
0010c6  210a              MOVS     r1,#0xa
0010c8  4838              LDR      r0,|L144.4524|
0010ca  f7fffffe          BL       uart_putchar
0010ce  210a              MOVS     r1,#0xa
0010d0  4836              LDR      r0,|L144.4524|
0010d2  f7fffffe          BL       uart_putchar
0010d6  210a              MOVS     r1,#0xa
0010d8  4834              LDR      r0,|L144.4524|
0010da  f7fffffe          BL       uart_putchar
0010de  210a              MOVS     r1,#0xa
0010e0  4832              LDR      r0,|L144.4524|
0010e2  f7fffffe          BL       uart_putchar
0010e6  210a              MOVS     r1,#0xa
0010e8  4830              LDR      r0,|L144.4524|
0010ea  f7fffffe          BL       uart_putchar
0010ee  210a              MOVS     r1,#0xa
0010f0  482e              LDR      r0,|L144.4524|
0010f2  f7fffffe          BL       uart_putchar
0010f6  210a              MOVS     r1,#0xa
0010f8  482c              LDR      r0,|L144.4524|
0010fa  f7fffffe          BL       uart_putchar
0010fe  210a              MOVS     r1,#0xa
001100  482a              LDR      r0,|L144.4524|
001102  f7fffffe          BL       uart_putchar
001106  210a              MOVS     r1,#0xa
001108  4828              LDR      r0,|L144.4524|
00110a  f7fffffe          BL       uart_putchar
00110e  210a              MOVS     r1,#0xa
001110  4826              LDR      r0,|L144.4524|
001112  f7fffffe          BL       uart_putchar
001116  210a              MOVS     r1,#0xa
001118  4824              LDR      r0,|L144.4524|
00111a  f7fffffe          BL       uart_putchar
00111e  210a              MOVS     r1,#0xa
001120  4822              LDR      r0,|L144.4524|
001122  f7fffffe          BL       uart_putchar
001126  210a              MOVS     r1,#0xa
001128  4820              LDR      r0,|L144.4524|
00112a  f7fffffe          BL       uart_putchar
00112e  210a              MOVS     r1,#0xa
001130  481e              LDR      r0,|L144.4524|
001132  f7fffffe          BL       uart_putchar
001136  210a              MOVS     r1,#0xa
001138  481c              LDR      r0,|L144.4524|
00113a  f7fffffe          BL       uart_putchar
00113e  210a              MOVS     r1,#0xa
001140  481a              LDR      r0,|L144.4524|
001142  f7fffffe          BL       uart_putchar
001146  210a              MOVS     r1,#0xa
001148  4818              LDR      r0,|L144.4524|
00114a  f7fffffe          BL       uart_putchar
00114e  210a              MOVS     r1,#0xa
001150  4816              LDR      r0,|L144.4524|
001152  f7fffffe          BL       uart_putchar
001156  210a              MOVS     r1,#0xa
001158  4814              LDR      r0,|L144.4524|
00115a  f7fffffe          BL       uart_putchar
00115e  210a              MOVS     r1,#0xa
001160  4812              LDR      r0,|L144.4524|
001162  f7fffffe          BL       uart_putchar
001166  210a              MOVS     r1,#0xa
001168  4810              LDR      r0,|L144.4524|
00116a  f7fffffe          BL       uart_putchar
00116e  210a              MOVS     r1,#0xa
001170  480e              LDR      r0,|L144.4524|
001172  f7fffffe          BL       uart_putchar
001176  210a              MOVS     r1,#0xa
001178  480c              LDR      r0,|L144.4524|
00117a  f7fffffe          BL       uart_putchar
00117e  210a              MOVS     r1,#0xa
001180  480a              LDR      r0,|L144.4524|
001182  f7fffffe          BL       uart_putchar
001186  210a              MOVS     r1,#0xa
001188  4808              LDR      r0,|L144.4524|
00118a  f7fffffe          BL       uart_putchar
00118e  210a              MOVS     r1,#0xa
001190  4806              LDR      r0,|L144.4524|
001192  f7fffffe          BL       uart_putchar
001196  210a              MOVS     r1,#0xa
001198  4804              LDR      r0,|L144.4524|
00119a  f7fffffe          BL       uart_putchar
00119e  210a              MOVS     r1,#0xa
0011a0  4802              LDR      r0,|L144.4524|
0011a2  f7fffffe          BL       uart_putchar
0011a6  210a              MOVS     r1,#0xa
0011a8  4800              LDR      r0,|L144.4524|
0011aa  e019              B        |L144.4576|
                  |L144.4524|
                          DCD      0x4006b000
                  |L144.4528|
                          DCD      ||.conststring||+0x70
                  |L144.4532|
                          DCD      uart_string_gsm
                  |L144.4536|
                          DCD      ||.conststring||+0xe0
                  |L144.4540|
                          DCD      tout
                  |L144.4544|
                          DCD      data
                  |L144.4548|
                          DCD      at_
                  |L144.4552|
                          DCD      drive
                  |L144.4556|
                          DCD      ||.conststring||+0x434
                  |L144.4560|
                          DCD      ||.conststring||+0x18
                  |L144.4564|
                          DCD      ||.conststring||+0x20
                  |L144.4568|
                          DCD      ||k2||
                  |L144.4572|
                          DCD      k
                  |L144.4576|
0011e0  f7fffffe          BL       uart_putchar
0011e4  210a              MOVS     r1,#0xa
0011e6  48fb              LDR      r0,|L144.5588|
0011e8  f7fffffe          BL       uart_putchar
0011ec  210a              MOVS     r1,#0xa
0011ee  48f9              LDR      r0,|L144.5588|
0011f0  f7fffffe          BL       uart_putchar
0011f4  210a              MOVS     r1,#0xa
0011f6  48f7              LDR      r0,|L144.5588|
0011f8  f7fffffe          BL       uart_putchar
0011fc  210a              MOVS     r1,#0xa
0011fe  48f5              LDR      r0,|L144.5588|
001200  f7fffffe          BL       uart_putchar
001204  210a              MOVS     r1,#0xa
001206  48f3              LDR      r0,|L144.5588|
001208  f7fffffe          BL       uart_putchar
00120c  210a              MOVS     r1,#0xa
00120e  48f1              LDR      r0,|L144.5588|
001210  f7fffffe          BL       uart_putchar
001214  210a              MOVS     r1,#0xa
001216  48ef              LDR      r0,|L144.5588|
001218  f7fffffe          BL       uart_putchar
00121c  210a              MOVS     r1,#0xa
00121e  48ed              LDR      r0,|L144.5588|
001220  f7fffffe          BL       uart_putchar
;;;2113   									//memset(data,0,1000);
;;;2114   														//timer counts to wait for characters in uart 1 									
;;;2115   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001224  bf00              NOP      
                  |L144.4646|
001226  49ec              LDR      r1,|L144.5592|
001228  48ec              LDR      r0,|L144.5596|
00122a  f7fffffe          BL       strstr
00122e  2800              CMP      r0,#0
001230  d109              BNE      |L144.4678|
001232  49eb              LDR      r1,|L144.5600|
001234  48e9              LDR      r0,|L144.5596|
001236  f7fffffe          BL       strstr
00123a  2800              CMP      r0,#0
00123c  d103              BNE      |L144.4678|
00123e  48e9              LDR      r0,|L144.5604|
001240  6800              LDR      r0,[r0,#0]  ; tout
001242  2805              CMP      r0,#5
001244  ddef              BLE      |L144.4646|
                  |L144.4678|
;;;2116   									{}
;;;2117   	                clear();
001246  f7fffffe          BL       clear
;;;2118   									memset(data,0,strlen(data));
00124a  48e7              LDR      r0,|L144.5608|
00124c  f7fffffe          BL       strlen
001250  4604              MOV      r4,r0
001252  4621              MOV      r1,r4
001254  48e4              LDR      r0,|L144.5608|
001256  f7fffffe          BL       __aeabi_memclr
;;;2119   									clear();
00125a  f7fffffe          BL       clear
;;;2120   
;;;2121   								
;;;2122   			break;
00125e  e6a7              B        |L144.4016|
                  |L144.4704|
;;;2123   			///returning; 
;;;2124   			//log_it();
;;;2125   			}
;;;2126   
;;;2127   
;;;2128   }
;;;2129   
;;;2130   //if(notsentflag==0){cursorvaluene=cursor_val(sd_data);cursorvaluepr+=cursorvaluene;}
;;;2131   
;;;2132   
;;;2133   }
;;;2134   else{
;;;2135   	remove_all_chars(data, '\n', '\n');
001260  220a              MOVS     r2,#0xa
001262  4611              MOV      r1,r2
001264  48e0              LDR      r0,|L144.5608|
001266  f7fffffe          BL       remove_all_chars
;;;2136   			strcat(data,"CH\n");	
00126a  49e0              LDR      r1,|L144.5612|
00126c  48de              LDR      r0,|L144.5608|
00126e  f7fffffe          BL       strcat
;;;2137   			
;;;2138   	
;;;2139   	  delay(100);
001272  2064              MOVS     r0,#0x64
001274  f7fffffe          BL       delay
;;;2140   		clear();//memset(uart_string_gsm,0,5000);
001278  f7fffffe          BL       clear
;;;2141   	
;;;2142   	memset(at_,0,100);
00127c  2164              MOVS     r1,#0x64
00127e  48dc              LDR      r0,|L144.5616|
001280  f7fffffe          BL       __aeabi_memclr
;;;2143   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001284  48d8              LDR      r0,|L144.5608|
001286  f7fffffe          BL       strlen
00128a  1c44              ADDS     r4,r0,#1
00128c  4623              MOV      r3,r4
00128e  4ad9              LDR      r2,|L144.5620|
001290  49d9              LDR      r1,|L144.5624|
001292  48d7              LDR      r0,|L144.5616|
001294  f7fffffe          BL       __2sprintf
;;;2144   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001298  2005              MOVS     r0,#5
00129a  4bd1              LDR      r3,|L144.5600|
00129c  4ad7              LDR      r2,|L144.5628|
00129e  49d8              LDR      r1,|L144.5632|
0012a0  9000              STR      r0,[sp,#0]
0012a2  48d3              LDR      r0,|L144.5616|
0012a4  f7fffffe          BL       send_SD
;;;2145   clear();	
0012a8  f7fffffe          BL       clear
;;;2146   									k2=0;									//string array counter for uart 1
0012ac  2000              MOVS     r0,#0
0012ae  49d5              LDR      r1,|L144.5636|
0012b0  6008              STR      r0,[r1,#0]  ; k2
;;;2147   									tout=0;	
0012b2  49cc              LDR      r1,|L144.5604|
0012b4  6008              STR      r0,[r1,#0]  ; tout
;;;2148   		for(k=0;k<strlen(data);k++)
0012b6  49d4              LDR      r1,|L144.5640|
0012b8  6008              STR      r0,[r1,#0]  ; k
0012ba  e00b              B        |L144.4820|
                  |L144.4796|
;;;2149   		{
;;;2150   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0012bc  48ca              LDR      r0,|L144.5608|
0012be  4ad2              LDR      r2,|L144.5640|
0012c0  6812              LDR      r2,[r2,#0]  ; k
0012c2  5c81              LDRB     r1,[r0,r2]
0012c4  48c3              LDR      r0,|L144.5588|
0012c6  f7fffffe          BL       uart_putchar
0012ca  48cf              LDR      r0,|L144.5640|
0012cc  6800              LDR      r0,[r0,#0]            ;2148  ; k
0012ce  1c40              ADDS     r0,r0,#1              ;2148
0012d0  49cd              LDR      r1,|L144.5640|
0012d2  6008              STR      r0,[r1,#0]            ;2148  ; k
                  |L144.4820|
0012d4  48c4              LDR      r0,|L144.5608|
0012d6  f7fffffe          BL       strlen
0012da  49cb              LDR      r1,|L144.5640|
0012dc  6809              LDR      r1,[r1,#0]            ;2148  ; k
0012de  4288              CMP      r0,r1                 ;2148
0012e0  d8ec              BHI      |L144.4796|
;;;2151   		}	
;;;2152   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0012e2  210a              MOVS     r1,#0xa
0012e4  48bb              LDR      r0,|L144.5588|
0012e6  f7fffffe          BL       uart_putchar
0012ea  210a              MOVS     r1,#0xa
0012ec  48b9              LDR      r0,|L144.5588|
0012ee  f7fffffe          BL       uart_putchar
0012f2  210a              MOVS     r1,#0xa
0012f4  48b7              LDR      r0,|L144.5588|
0012f6  f7fffffe          BL       uart_putchar
0012fa  210a              MOVS     r1,#0xa
0012fc  48b5              LDR      r0,|L144.5588|
0012fe  f7fffffe          BL       uart_putchar
001302  210a              MOVS     r1,#0xa
001304  48b3              LDR      r0,|L144.5588|
001306  f7fffffe          BL       uart_putchar
00130a  210a              MOVS     r1,#0xa
00130c  48b1              LDR      r0,|L144.5588|
00130e  f7fffffe          BL       uart_putchar
001312  210a              MOVS     r1,#0xa
001314  48af              LDR      r0,|L144.5588|
001316  f7fffffe          BL       uart_putchar
00131a  210a              MOVS     r1,#0xa
00131c  48ad              LDR      r0,|L144.5588|
00131e  f7fffffe          BL       uart_putchar
001322  210a              MOVS     r1,#0xa
001324  48ab              LDR      r0,|L144.5588|
001326  f7fffffe          BL       uart_putchar
00132a  210a              MOVS     r1,#0xa
00132c  48a9              LDR      r0,|L144.5588|
00132e  f7fffffe          BL       uart_putchar
001332  210a              MOVS     r1,#0xa
001334  48a7              LDR      r0,|L144.5588|
001336  f7fffffe          BL       uart_putchar
00133a  210a              MOVS     r1,#0xa
00133c  48a5              LDR      r0,|L144.5588|
00133e  f7fffffe          BL       uart_putchar
001342  210a              MOVS     r1,#0xa
001344  48a3              LDR      r0,|L144.5588|
001346  f7fffffe          BL       uart_putchar
00134a  210a              MOVS     r1,#0xa
00134c  48a1              LDR      r0,|L144.5588|
00134e  f7fffffe          BL       uart_putchar
001352  210a              MOVS     r1,#0xa
001354  489f              LDR      r0,|L144.5588|
001356  f7fffffe          BL       uart_putchar
00135a  210a              MOVS     r1,#0xa
00135c  489d              LDR      r0,|L144.5588|
00135e  f7fffffe          BL       uart_putchar
001362  210a              MOVS     r1,#0xa
001364  489b              LDR      r0,|L144.5588|
001366  f7fffffe          BL       uart_putchar
00136a  210a              MOVS     r1,#0xa
00136c  4899              LDR      r0,|L144.5588|
00136e  f7fffffe          BL       uart_putchar
001372  210a              MOVS     r1,#0xa
001374  4897              LDR      r0,|L144.5588|
001376  f7fffffe          BL       uart_putchar
00137a  210a              MOVS     r1,#0xa
00137c  4895              LDR      r0,|L144.5588|
00137e  f7fffffe          BL       uart_putchar
001382  210a              MOVS     r1,#0xa
001384  4893              LDR      r0,|L144.5588|
001386  f7fffffe          BL       uart_putchar
00138a  210a              MOVS     r1,#0xa
00138c  4891              LDR      r0,|L144.5588|
00138e  f7fffffe          BL       uart_putchar
001392  210a              MOVS     r1,#0xa
001394  488f              LDR      r0,|L144.5588|
001396  f7fffffe          BL       uart_putchar
00139a  210a              MOVS     r1,#0xa
00139c  488d              LDR      r0,|L144.5588|
00139e  f7fffffe          BL       uart_putchar
0013a2  210a              MOVS     r1,#0xa
0013a4  488b              LDR      r0,|L144.5588|
0013a6  f7fffffe          BL       uart_putchar
0013aa  210a              MOVS     r1,#0xa
0013ac  4889              LDR      r0,|L144.5588|
0013ae  f7fffffe          BL       uart_putchar
0013b2  210a              MOVS     r1,#0xa
0013b4  4887              LDR      r0,|L144.5588|
0013b6  f7fffffe          BL       uart_putchar
0013ba  210a              MOVS     r1,#0xa
0013bc  4885              LDR      r0,|L144.5588|
0013be  f7fffffe          BL       uart_putchar
0013c2  210a              MOVS     r1,#0xa
0013c4  4883              LDR      r0,|L144.5588|
0013c6  f7fffffe          BL       uart_putchar
0013ca  210a              MOVS     r1,#0xa
0013cc  4881              LDR      r0,|L144.5588|
0013ce  e000              B        |L144.5074|
                  |L144.5072|
0013d0  e3fe              B        |L144.7120|
                  |L144.5074|
0013d2  f7fffffe          BL       uart_putchar
0013d6  210a              MOVS     r1,#0xa
0013d8  487e              LDR      r0,|L144.5588|
0013da  f7fffffe          BL       uart_putchar
0013de  210a              MOVS     r1,#0xa
0013e0  487c              LDR      r0,|L144.5588|
0013e2  f7fffffe          BL       uart_putchar
0013e6  210a              MOVS     r1,#0xa
0013e8  487a              LDR      r0,|L144.5588|
0013ea  f7fffffe          BL       uart_putchar
0013ee  210a              MOVS     r1,#0xa
0013f0  4878              LDR      r0,|L144.5588|
0013f2  f7fffffe          BL       uart_putchar
0013f6  210a              MOVS     r1,#0xa
0013f8  4876              LDR      r0,|L144.5588|
0013fa  f7fffffe          BL       uart_putchar
0013fe  210a              MOVS     r1,#0xa
001400  4874              LDR      r0,|L144.5588|
001402  f7fffffe          BL       uart_putchar
001406  210a              MOVS     r1,#0xa
001408  4872              LDR      r0,|L144.5588|
00140a  f7fffffe          BL       uart_putchar
00140e  210a              MOVS     r1,#0xa
001410  4870              LDR      r0,|L144.5588|
001412  f7fffffe          BL       uart_putchar
001416  210a              MOVS     r1,#0xa
001418  486e              LDR      r0,|L144.5588|
00141a  f7fffffe          BL       uart_putchar
00141e  210a              MOVS     r1,#0xa
001420  486c              LDR      r0,|L144.5588|
001422  f7fffffe          BL       uart_putchar
001426  210a              MOVS     r1,#0xa
001428  486a              LDR      r0,|L144.5588|
00142a  f7fffffe          BL       uart_putchar
00142e  210a              MOVS     r1,#0xa
001430  4868              LDR      r0,|L144.5588|
001432  f7fffffe          BL       uart_putchar
001436  210a              MOVS     r1,#0xa
001438  4866              LDR      r0,|L144.5588|
00143a  f7fffffe          BL       uart_putchar
00143e  210a              MOVS     r1,#0xa
001440  4864              LDR      r0,|L144.5588|
001442  f7fffffe          BL       uart_putchar
001446  210a              MOVS     r1,#0xa
001448  4862              LDR      r0,|L144.5588|
00144a  f7fffffe          BL       uart_putchar
00144e  210a              MOVS     r1,#0xa
001450  4860              LDR      r0,|L144.5588|
001452  f7fffffe          BL       uart_putchar
001456  210a              MOVS     r1,#0xa
001458  485e              LDR      r0,|L144.5588|
00145a  f7fffffe          BL       uart_putchar
00145e  210a              MOVS     r1,#0xa
001460  485c              LDR      r0,|L144.5588|
001462  f7fffffe          BL       uart_putchar
001466  210a              MOVS     r1,#0xa
001468  485a              LDR      r0,|L144.5588|
00146a  f7fffffe          BL       uart_putchar
00146e  210a              MOVS     r1,#0xa
001470  4858              LDR      r0,|L144.5588|
001472  f7fffffe          BL       uart_putchar
001476  210a              MOVS     r1,#0xa
001478  4856              LDR      r0,|L144.5588|
00147a  f7fffffe          BL       uart_putchar
00147e  210a              MOVS     r1,#0xa
001480  4854              LDR      r0,|L144.5588|
001482  f7fffffe          BL       uart_putchar
001486  210a              MOVS     r1,#0xa
001488  4852              LDR      r0,|L144.5588|
00148a  f7fffffe          BL       uart_putchar
00148e  210a              MOVS     r1,#0xa
001490  4850              LDR      r0,|L144.5588|
001492  f7fffffe          BL       uart_putchar
001496  210a              MOVS     r1,#0xa
001498  484e              LDR      r0,|L144.5588|
00149a  f7fffffe          BL       uart_putchar
00149e  210a              MOVS     r1,#0xa
0014a0  484c              LDR      r0,|L144.5588|
0014a2  f7fffffe          BL       uart_putchar
0014a6  210a              MOVS     r1,#0xa
0014a8  484a              LDR      r0,|L144.5588|
0014aa  f7fffffe          BL       uart_putchar
;;;2153   									//memset(data,0,1000);
;;;2154   														//timer counts to wait for characters in uart 1 									
;;;2155   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0014ae  bf00              NOP      
                  |L144.5296|
0014b0  4949              LDR      r1,|L144.5592|
0014b2  484a              LDR      r0,|L144.5596|
0014b4  f7fffffe          BL       strstr
0014b8  2800              CMP      r0,#0
0014ba  d109              BNE      |L144.5328|
0014bc  4948              LDR      r1,|L144.5600|
0014be  4847              LDR      r0,|L144.5596|
0014c0  f7fffffe          BL       strstr
0014c4  2800              CMP      r0,#0
0014c6  d103              BNE      |L144.5328|
0014c8  4846              LDR      r0,|L144.5604|
0014ca  6800              LDR      r0,[r0,#0]  ; tout
0014cc  2805              CMP      r0,#5
0014ce  ddef              BLE      |L144.5296|
                  |L144.5328|
;;;2156   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2157   									}
;;;2158   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0014d0  f7fffffe          BL       clear
;;;2159   									//clear();
;;;2160   									memset(data,0,strlen(data));
0014d4  4844              LDR      r0,|L144.5608|
0014d6  f7fffffe          BL       strlen
0014da  4604              MOV      r4,r0
0014dc  4621              MOV      r1,r4
0014de  4842              LDR      r0,|L144.5608|
0014e0  f7fffffe          BL       __aeabi_memclr
;;;2161   									clear();
0014e4  f7fffffe          BL       clear
;;;2162   
;;;2163   								
;;;2164   	
;;;2165   	
;;;2166   	
;;;2167   	//log_it();
;;;2168   			memset(data,0,strlen(data));
0014e8  483f              LDR      r0,|L144.5608|
0014ea  f7fffffe          BL       strlen
0014ee  4604              MOV      r4,r0
0014f0  4621              MOV      r1,r4
0014f2  483d              LDR      r0,|L144.5608|
0014f4  f7fffffe          BL       __aeabi_memclr
;;;2169   //*****************************tcp_initialization();************************************//
;;;2170   
;;;2171   	
;;;2172   msg_sim800(); 
0014f8  f7fffffe          BL       msg_sim800
;;;2173   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0014fc  2005              MOVS     r0,#5
0014fe  4b38              LDR      r3,|L144.5600|
001500  4a3e              LDR      r2,|L144.5628|
001502  4942              LDR      r1,|L144.5644|
001504  9000              STR      r0,[sp,#0]
001506  4842              LDR      r0,|L144.5648|
001508  f7fffffe          BL       send_GSM
;;;2174   delay(100);
00150c  2064              MOVS     r0,#0x64
00150e  f7fffffe          BL       delay
;;;2175   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
001512  2004              MOVS     r0,#4
001514  4b32              LDR      r3,|L144.5600|
001516  4a3f              LDR      r2,|L144.5652|
001518  493c              LDR      r1,|L144.5644|
00151a  9000              STR      r0,[sp,#0]
00151c  483e              LDR      r0,|L144.5656|
00151e  f7fffffe          BL       send_GSM
;;;2176   GPS_COLLECT2();
001522  f7fffffe          BL       GPS_COLLECT2
;;;2177   strcat(data,"CH\n");		
001526  4931              LDR      r1,|L144.5612|
001528  482f              LDR      r0,|L144.5608|
00152a  f7fffffe          BL       strcat
;;;2178   GPS_COLLECT2();
00152e  f7fffffe          BL       GPS_COLLECT2
;;;2179   strcat(data,"CH\n");	
001532  492e              LDR      r1,|L144.5612|
001534  482c              LDR      r0,|L144.5608|
001536  f7fffffe          BL       strcat
;;;2180   GPS_COLLECT2();
00153a  f7fffffe          BL       GPS_COLLECT2
;;;2181   strcat(data,"CH\n");
00153e  492b              LDR      r1,|L144.5612|
001540  4829              LDR      r0,|L144.5608|
001542  f7fffffe          BL       strcat
;;;2182   cond201=(strstr(uart_string_gsm, "OK"));
001546  4931              LDR      r1,|L144.5644|
001548  4824              LDR      r0,|L144.5596|
00154a  f7fffffe          BL       strstr
00154e  4933              LDR      r1,|L144.5660|
001550  6008              STR      r0,[r1,#0]  ; cond201
;;;2183   cond200=(strstr(uart_string_gsm, "ERROR"));
001552  4923              LDR      r1,|L144.5600|
001554  4821              LDR      r0,|L144.5596|
001556  f7fffffe          BL       strstr
00155a  4931              LDR      r1,|L144.5664|
00155c  6008              STR      r0,[r1,#0]  ; cond200
;;;2184   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00155e  482f              LDR      r0,|L144.5660|
001560  6800              LDR      r0,[r0,#0]  ; cond201
001562  2800              CMP      r0,#0
001564  d101              BNE      |L144.5482|
001566  2001              MOVS     r0,#1
001568  e000              B        |L144.5484|
                  |L144.5482|
00156a  2000              MOVS     r0,#0
                  |L144.5484|
00156c  2800              CMP      r0,#0
                  |L144.5486|
00156e  d07d              BEQ      |L144.5740|
001570  482b              LDR      r0,|L144.5664|
001572  6800              LDR      r0,[r0,#0]  ; cond200
001574  2800              CMP      r0,#0
001576  d101              BNE      |L144.5500|
001578  2001              MOVS     r0,#1
00157a  e000              B        |L144.5502|
                  |L144.5500|
00157c  2000              MOVS     r0,#0
                  |L144.5502|
00157e  2800              CMP      r0,#0
001580  d0f5              BEQ      |L144.5486|
001582  4828              LDR      r0,|L144.5668|
001584  6800              LDR      r0,[r0,#0]  ; sleep_flag
001586  2801              CMP      r0,#1
001588  d0f1              BEQ      |L144.5486|
;;;2185   {
;;;2186   delay(100);
00158a  2064              MOVS     r0,#0x64
00158c  f7fffffe          BL       delay
;;;2187   clear();//memset(uart_string_gsm,0,5000);
001590  f7fffffe          BL       clear
;;;2188   memset(at_,0,100);
001594  2164              MOVS     r1,#0x64
001596  4816              LDR      r0,|L144.5616|
001598  f7fffffe          BL       __aeabi_memclr
;;;2189   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00159c  4812              LDR      r0,|L144.5608|
00159e  f7fffffe          BL       strlen
0015a2  1c44              ADDS     r4,r0,#1
0015a4  4623              MOV      r3,r4
0015a6  4a13              LDR      r2,|L144.5620|
0015a8  4913              LDR      r1,|L144.5624|
0015aa  4811              LDR      r0,|L144.5616|
0015ac  f7fffffe          BL       __2sprintf
;;;2190   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0015b0  2005              MOVS     r0,#5
0015b2  4b0b              LDR      r3,|L144.5600|
0015b4  4a11              LDR      r2,|L144.5628|
0015b6  4912              LDR      r1,|L144.5632|
0015b8  9000              STR      r0,[sp,#0]
0015ba  480d              LDR      r0,|L144.5616|
0015bc  f7fffffe          BL       send_SD
;;;2191   clear();	
0015c0  f7fffffe          BL       clear
;;;2192   k2=0;									//string array counter for uart 1
0015c4  2000              MOVS     r0,#0
0015c6  490f              LDR      r1,|L144.5636|
0015c8  6008              STR      r0,[r1,#0]  ; k2
;;;2193   tout=0;	
0015ca  4906              LDR      r1,|L144.5604|
0015cc  6008              STR      r0,[r1,#0]  ; tout
;;;2194   for(k=0;k<strlen(data);k++)
0015ce  490e              LDR      r1,|L144.5640|
0015d0  6008              STR      r0,[r1,#0]  ; k
0015d2  e035              B        |L144.5696|
                  |L144.5588|
                          DCD      0x4006b000
                  |L144.5592|
                          DCD      ||.conststring||+0x70
                  |L144.5596|
                          DCD      uart_string_gsm
                  |L144.5600|
                          DCD      ||.conststring||+0xe0
                  |L144.5604|
                          DCD      tout
                  |L144.5608|
                          DCD      data
                  |L144.5612|
                          DCD      ||.conststring||+0x430
                  |L144.5616|
                          DCD      at_
                  |L144.5620|
                          DCD      drive
                  |L144.5624|
                          DCD      ||.conststring||+0x434
                  |L144.5628|
                          DCD      ||.conststring||+0x18
                  |L144.5632|
                          DCD      ||.conststring||+0x20
                  |L144.5636|
                          DCD      ||k2||
                  |L144.5640|
                          DCD      k
                  |L144.5644|
                          DCD      ||.conststring||+0x2c
                  |L144.5648|
                          DCD      ||.conststring||+0x66c
                  |L144.5652|
                          DCD      ||.conststring||+0x67c
                  |L144.5656|
                          DCD      ||.conststring||+0x690
                  |L144.5660|
                          DCD      cond201
                  |L144.5664|
                          DCD      cond200
                  |L144.5668|
                          DCD      sleep_flag
                  |L144.5672|
;;;2195   {
;;;2196   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001628  48fd              LDR      r0,|L144.6688|
00162a  4afe              LDR      r2,|L144.6692|
00162c  6812              LDR      r2,[r2,#0]  ; k
00162e  5c81              LDRB     r1,[r0,r2]
001630  48fd              LDR      r0,|L144.6696|
001632  f7fffffe          BL       uart_putchar
001636  48fb              LDR      r0,|L144.6692|
001638  6800              LDR      r0,[r0,#0]            ;2194  ; k
00163a  1c40              ADDS     r0,r0,#1              ;2194
00163c  49f9              LDR      r1,|L144.6692|
00163e  6008              STR      r0,[r1,#0]            ;2194  ; k
                  |L144.5696|
001640  48f7              LDR      r0,|L144.6688|
001642  f7fffffe          BL       strlen
001646  49f7              LDR      r1,|L144.6692|
001648  6809              LDR      r1,[r1,#0]            ;2194  ; k
00164a  4288              CMP      r0,r1                 ;2194
00164c  d8ec              BHI      |L144.5672|
;;;2197   }	
;;;2198   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00164e  210a              MOVS     r1,#0xa
001650  48f5              LDR      r0,|L144.6696|
001652  f7fffffe          BL       uart_putchar
001656  210a              MOVS     r1,#0xa
001658  48f3              LDR      r0,|L144.6696|
00165a  f7fffffe          BL       uart_putchar
00165e  210a              MOVS     r1,#0xa
001660  48f1              LDR      r0,|L144.6696|
001662  f7fffffe          BL       uart_putchar
001666  210a              MOVS     r1,#0xa
001668  48ef              LDR      r0,|L144.6696|
00166a  e000              B        |L144.5742|
                  |L144.5740|
00166c  e100              B        |L144.6256|
                  |L144.5742|
00166e  f7fffffe          BL       uart_putchar
001672  210a              MOVS     r1,#0xa
001674  48ec              LDR      r0,|L144.6696|
001676  f7fffffe          BL       uart_putchar
00167a  210a              MOVS     r1,#0xa
00167c  48ea              LDR      r0,|L144.6696|
00167e  f7fffffe          BL       uart_putchar
001682  210a              MOVS     r1,#0xa
001684  48e8              LDR      r0,|L144.6696|
001686  f7fffffe          BL       uart_putchar
00168a  210a              MOVS     r1,#0xa
00168c  48e6              LDR      r0,|L144.6696|
00168e  f7fffffe          BL       uart_putchar
001692  210a              MOVS     r1,#0xa
001694  48e4              LDR      r0,|L144.6696|
001696  f7fffffe          BL       uart_putchar
00169a  210a              MOVS     r1,#0xa
00169c  48e2              LDR      r0,|L144.6696|
00169e  f7fffffe          BL       uart_putchar
0016a2  210a              MOVS     r1,#0xa
0016a4  48e0              LDR      r0,|L144.6696|
0016a6  f7fffffe          BL       uart_putchar
0016aa  210a              MOVS     r1,#0xa
0016ac  48de              LDR      r0,|L144.6696|
0016ae  f7fffffe          BL       uart_putchar
0016b2  210a              MOVS     r1,#0xa
0016b4  48dc              LDR      r0,|L144.6696|
0016b6  f7fffffe          BL       uart_putchar
0016ba  210a              MOVS     r1,#0xa
0016bc  48da              LDR      r0,|L144.6696|
0016be  f7fffffe          BL       uart_putchar
0016c2  210a              MOVS     r1,#0xa
0016c4  48d8              LDR      r0,|L144.6696|
0016c6  f7fffffe          BL       uart_putchar
0016ca  210a              MOVS     r1,#0xa
0016cc  48d6              LDR      r0,|L144.6696|
0016ce  f7fffffe          BL       uart_putchar
0016d2  210a              MOVS     r1,#0xa
0016d4  48d4              LDR      r0,|L144.6696|
0016d6  f7fffffe          BL       uart_putchar
0016da  210a              MOVS     r1,#0xa
0016dc  48d2              LDR      r0,|L144.6696|
0016de  f7fffffe          BL       uart_putchar
0016e2  210a              MOVS     r1,#0xa
0016e4  48d0              LDR      r0,|L144.6696|
0016e6  f7fffffe          BL       uart_putchar
0016ea  210a              MOVS     r1,#0xa
0016ec  48ce              LDR      r0,|L144.6696|
0016ee  f7fffffe          BL       uart_putchar
0016f2  210a              MOVS     r1,#0xa
0016f4  48cc              LDR      r0,|L144.6696|
0016f6  f7fffffe          BL       uart_putchar
0016fa  210a              MOVS     r1,#0xa
0016fc  48ca              LDR      r0,|L144.6696|
0016fe  f7fffffe          BL       uart_putchar
001702  210a              MOVS     r1,#0xa
001704  48c8              LDR      r0,|L144.6696|
001706  f7fffffe          BL       uart_putchar
00170a  210a              MOVS     r1,#0xa
00170c  48c6              LDR      r0,|L144.6696|
00170e  f7fffffe          BL       uart_putchar
001712  210a              MOVS     r1,#0xa
001714  48c4              LDR      r0,|L144.6696|
001716  f7fffffe          BL       uart_putchar
00171a  210a              MOVS     r1,#0xa
00171c  48c2              LDR      r0,|L144.6696|
00171e  f7fffffe          BL       uart_putchar
001722  210a              MOVS     r1,#0xa
001724  48c0              LDR      r0,|L144.6696|
001726  f7fffffe          BL       uart_putchar
00172a  210a              MOVS     r1,#0xa
00172c  48be              LDR      r0,|L144.6696|
00172e  f7fffffe          BL       uart_putchar
001732  210a              MOVS     r1,#0xa
001734  48bc              LDR      r0,|L144.6696|
001736  f7fffffe          BL       uart_putchar
00173a  210a              MOVS     r1,#0xa
00173c  48ba              LDR      r0,|L144.6696|
00173e  f7fffffe          BL       uart_putchar
001742  210a              MOVS     r1,#0xa
001744  48b8              LDR      r0,|L144.6696|
001746  f7fffffe          BL       uart_putchar
00174a  210a              MOVS     r1,#0xa
00174c  48b6              LDR      r0,|L144.6696|
00174e  f7fffffe          BL       uart_putchar
001752  210a              MOVS     r1,#0xa
001754  48b4              LDR      r0,|L144.6696|
001756  f7fffffe          BL       uart_putchar
00175a  210a              MOVS     r1,#0xa
00175c  48b2              LDR      r0,|L144.6696|
00175e  f7fffffe          BL       uart_putchar
001762  210a              MOVS     r1,#0xa
001764  48b0              LDR      r0,|L144.6696|
001766  f7fffffe          BL       uart_putchar
00176a  210a              MOVS     r1,#0xa
00176c  48ae              LDR      r0,|L144.6696|
00176e  f7fffffe          BL       uart_putchar
001772  210a              MOVS     r1,#0xa
001774  48ac              LDR      r0,|L144.6696|
001776  f7fffffe          BL       uart_putchar
00177a  210a              MOVS     r1,#0xa
00177c  48aa              LDR      r0,|L144.6696|
00177e  f7fffffe          BL       uart_putchar
001782  210a              MOVS     r1,#0xa
001784  48a8              LDR      r0,|L144.6696|
001786  f7fffffe          BL       uart_putchar
00178a  210a              MOVS     r1,#0xa
00178c  48a6              LDR      r0,|L144.6696|
00178e  f7fffffe          BL       uart_putchar
001792  210a              MOVS     r1,#0xa
001794  48a4              LDR      r0,|L144.6696|
001796  f7fffffe          BL       uart_putchar
00179a  210a              MOVS     r1,#0xa
00179c  48a2              LDR      r0,|L144.6696|
00179e  f7fffffe          BL       uart_putchar
0017a2  210a              MOVS     r1,#0xa
0017a4  48a0              LDR      r0,|L144.6696|
0017a6  f7fffffe          BL       uart_putchar
0017aa  210a              MOVS     r1,#0xa
0017ac  489e              LDR      r0,|L144.6696|
0017ae  e000              B        |L144.6066|
                  |L144.6064|
0017b0  e2df              B        |L144.7538|
                  |L144.6066|
0017b2  f7fffffe          BL       uart_putchar
0017b6  210a              MOVS     r1,#0xa
0017b8  489b              LDR      r0,|L144.6696|
0017ba  f7fffffe          BL       uart_putchar
0017be  210a              MOVS     r1,#0xa
0017c0  4899              LDR      r0,|L144.6696|
0017c2  f7fffffe          BL       uart_putchar
0017c6  210a              MOVS     r1,#0xa
0017c8  4897              LDR      r0,|L144.6696|
0017ca  f7fffffe          BL       uart_putchar
0017ce  210a              MOVS     r1,#0xa
0017d0  4895              LDR      r0,|L144.6696|
0017d2  f7fffffe          BL       uart_putchar
0017d6  210a              MOVS     r1,#0xa
0017d8  4893              LDR      r0,|L144.6696|
0017da  f7fffffe          BL       uart_putchar
0017de  210a              MOVS     r1,#0xa
0017e0  4891              LDR      r0,|L144.6696|
0017e2  f7fffffe          BL       uart_putchar
0017e6  210a              MOVS     r1,#0xa
0017e8  488f              LDR      r0,|L144.6696|
0017ea  f7fffffe          BL       uart_putchar
0017ee  210a              MOVS     r1,#0xa
0017f0  488d              LDR      r0,|L144.6696|
0017f2  f7fffffe          BL       uart_putchar
0017f6  210a              MOVS     r1,#0xa
0017f8  488b              LDR      r0,|L144.6696|
0017fa  f7fffffe          BL       uart_putchar
0017fe  210a              MOVS     r1,#0xa
001800  4889              LDR      r0,|L144.6696|
001802  f7fffffe          BL       uart_putchar
001806  210a              MOVS     r1,#0xa
001808  4887              LDR      r0,|L144.6696|
00180a  f7fffffe          BL       uart_putchar
00180e  210a              MOVS     r1,#0xa
001810  4885              LDR      r0,|L144.6696|
001812  f7fffffe          BL       uart_putchar
001816  210a              MOVS     r1,#0xa
001818  4883              LDR      r0,|L144.6696|
00181a  f7fffffe          BL       uart_putchar
;;;2199   									//memset(data,0,1000);
;;;2200   														//timer counts to wait for characters in uart 1 									
;;;2201   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00181e  bf00              NOP      
                  |L144.6176|
001820  4982              LDR      r1,|L144.6700|
001822  4883              LDR      r0,|L144.6704|
001824  f7fffffe          BL       strstr
001828  2800              CMP      r0,#0
00182a  d109              BNE      |L144.6208|
00182c  4981              LDR      r1,|L144.6708|
00182e  4880              LDR      r0,|L144.6704|
001830  f7fffffe          BL       strstr
001834  2800              CMP      r0,#0
001836  d103              BNE      |L144.6208|
001838  487f              LDR      r0,|L144.6712|
00183a  6800              LDR      r0,[r0,#0]  ; tout
00183c  2805              CMP      r0,#5
00183e  ddef              BLE      |L144.6176|
                  |L144.6208|
;;;2202   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2203   									}
;;;2204   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001840  f7fffffe          BL       clear
;;;2205   									//clear();
;;;2206   									memset(data,0,strlen(data));
001844  4876              LDR      r0,|L144.6688|
001846  f7fffffe          BL       strlen
00184a  4604              MOV      r4,r0
00184c  4621              MOV      r1,r4
00184e  4874              LDR      r0,|L144.6688|
001850  f7fffffe          BL       __aeabi_memclr
;;;2207   									clear();
001854  f7fffffe          BL       clear
;;;2208   									RESET_OFF;delay(100);
001858  2020              MOVS     r0,#0x20
00185a  4978              LDR      r1,|L144.6716|
00185c  6088              STR      r0,[r1,#8]
00185e  2064              MOVS     r0,#0x64
001860  f7fffffe          BL       delay
;;;2209   									RESET_ON;delay(100);		
001864  2020              MOVS     r0,#0x20
001866  4975              LDR      r1,|L144.6716|
001868  6048              STR      r0,[r1,#4]
00186a  2064              MOVS     r0,#0x64
00186c  f7fffffe          BL       delay
                  |L144.6256|
;;;2210   }
;;;2211   	
;;;2212   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001870  2004              MOVS     r0,#4
001872  4b73              LDR      r3,|L144.6720|
001874  4a73              LDR      r2,|L144.6724|
001876  e000              B        |L144.6266|
                  |L144.6264|
001878  e3da              B        |L144.8240|
                  |L144.6266|
00187a  4973              LDR      r1,|L144.6728|
00187c  9000              STR      r0,[sp,#0]
00187e  4873              LDR      r0,|L144.6732|
001880  f7fffffe          BL       send_GSM
;;;2213   GPS_COLLECT2();
001884  f7fffffe          BL       GPS_COLLECT2
;;;2214   strcat(data,"CH\n");	
001888  4971              LDR      r1,|L144.6736|
00188a  4865              LDR      r0,|L144.6688|
00188c  f7fffffe          BL       strcat
;;;2215   memset(at_,0,100);
001890  2164              MOVS     r1,#0x64
001892  4870              LDR      r0,|L144.6740|
001894  f7fffffe          BL       __aeabi_memclr
;;;2216   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001898  4a6f              LDR      r2,|L144.6744|
00189a  4970              LDR      r1,|L144.6748|
00189c  486d              LDR      r0,|L144.6740|
00189e  f7fffffe          BL       __2sprintf
;;;2217   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
0018a2  486f              LDR      r0,|L144.6752|
0018a4  6800              LDR      r0,[r0,#0]  ; tmeout
0018a6  4b66              LDR      r3,|L144.6720|
0018a8  4a66              LDR      r2,|L144.6724|
0018aa  4967              LDR      r1,|L144.6728|
0018ac  9000              STR      r0,[sp,#0]
0018ae  4869              LDR      r0,|L144.6740|
0018b0  f7fffffe          BL       send_GSM
;;;2218   msg_sim800(); 
0018b4  f7fffffe          BL       msg_sim800
;;;2219   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
0018b8  2004              MOVS     r0,#4
0018ba  4b6a              LDR      r3,|L144.6756|
0018bc  4a61              LDR      r2,|L144.6724|
0018be  4962              LDR      r1,|L144.6728|
0018c0  9000              STR      r0,[sp,#0]
0018c2  4869              LDR      r0,|L144.6760|
0018c4  f7fffffe          BL       send_GSM
;;;2220   GPS_COLLECT2();
0018c8  f7fffffe          BL       GPS_COLLECT2
;;;2221   strcat(data,"CH\n");	
0018cc  4960              LDR      r1,|L144.6736|
0018ce  4854              LDR      r0,|L144.6688|
0018d0  f7fffffe          BL       strcat
;;;2222   GPS_COLLECT2();
0018d4  f7fffffe          BL       GPS_COLLECT2
;;;2223   strcat(data,"CH\n");	
0018d8  495d              LDR      r1,|L144.6736|
0018da  4851              LDR      r0,|L144.6688|
0018dc  f7fffffe          BL       strcat
;;;2224   
;;;2225   
;;;2226   msg_sim800(); 
0018e0  f7fffffe          BL       msg_sim800
;;;2227   GPS_COLLECT2();
0018e4  f7fffffe          BL       GPS_COLLECT2
;;;2228   strcat(data,"CH\n");	
0018e8  4959              LDR      r1,|L144.6736|
0018ea  484d              LDR      r0,|L144.6688|
0018ec  f7fffffe          BL       strcat
;;;2229   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0018f0  f7fffffe          BL       clear
0018f4  485d              LDR      r0,|L144.6764|
0018f6  f7fffffe          BL       send_modem
0018fa  f7fffffe          BL       clear
;;;2230   					delay(20);
0018fe  2014              MOVS     r0,#0x14
001900  f7fffffe          BL       delay
;;;2231   
;;;2232   
;;;2233   msg_sim800(); 
001904  f7fffffe          BL       msg_sim800
;;;2234   
;;;2235   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001908  4b59              LDR      r3,|L144.6768|
00190a  4a5a              LDR      r2,|L144.6772|
00190c  495a              LDR      r1,|L144.6776|
00190e  4851              LDR      r0,|L144.6740|
001910  f7fffffe          BL       __2sprintf
;;;2236   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001914  4852              LDR      r0,|L144.6752|
001916  6800              LDR      r0,[r0,#0]  ; tmeout
001918  4b49              LDR      r3,|L144.6720|
00191a  4a46              LDR      r2,|L144.6708|
00191c  4957              LDR      r1,|L144.6780|
00191e  9000              STR      r0,[sp,#0]
001920  484c              LDR      r0,|L144.6740|
001922  f7fffffe          BL       send_GSM
;;;2237   						clear();
001926  f7fffffe          BL       clear
;;;2238   						
;;;2239   						
;;;2240   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
00192a  484d              LDR      r0,|L144.6752|
00192c  6800              LDR      r0,[r0,#0]  ; tmeout
00192e  4b54              LDR      r3,|L144.6784|
001930  4a40              LDR      r2,|L144.6708|
001932  4954              LDR      r1,|L144.6788|
001934  9000              STR      r0,[sp,#0]
001936  4854              LDR      r0,|L144.6792|
001938  f7fffffe          BL       send_GSM
;;;2241   //*****************************tcp_initialization ends**********************************//		
;;;2242   
;;;2243   			if(mystrstr(uart_string_gsm,'>')){
00193c  213e              MOVS     r1,#0x3e
00193e  483c              LDR      r0,|L144.6704|
001940  f7fffffe          BL       mystrstr
001944  2800              CMP      r0,#0
001946  d069              BEQ      |L144.6684|
;;;2244   									clear();
001948  f7fffffe          BL       clear
;;;2245   									memset(uart_string_gsm,0,5000);
00194c  494f              LDR      r1,|L144.6796|
00194e  4838              LDR      r0,|L144.6704|
001950  f7fffffe          BL       __aeabi_memclr
;;;2246   									qwe=strlen(data);
001954  4832              LDR      r0,|L144.6688|
001956  f7fffffe          BL       strlen
00195a  494d              LDR      r1,|L144.6800|
00195c  6008              STR      r0,[r1,#0]  ; qwe
;;;2247   									tout=0;
00195e  2000              MOVS     r0,#0
001960  4935              LDR      r1,|L144.6712|
001962  6008              STR      r0,[r1,#0]  ; tout
;;;2248   									k2=0;
001964  494b              LDR      r1,|L144.6804|
001966  6008              STR      r0,[r1,#0]  ; k2
;;;2249   									for(k=0;k<(qwe);k++)
001968  492e              LDR      r1,|L144.6692|
00196a  6008              STR      r0,[r1,#0]  ; k
00196c  e00b              B        |L144.6534|
                  |L144.6510|
;;;2250   									{
;;;2251   										uart_putchar(UART1_BASE_PTR, data[k]);
00196e  482c              LDR      r0,|L144.6688|
001970  4a2c              LDR      r2,|L144.6692|
001972  6812              LDR      r2,[r2,#0]  ; k
001974  5c81              LDRB     r1,[r0,r2]
001976  482c              LDR      r0,|L144.6696|
001978  f7fffffe          BL       uart_putchar
00197c  4829              LDR      r0,|L144.6692|
00197e  6800              LDR      r0,[r0,#0]            ;2249  ; k
001980  1c40              ADDS     r0,r0,#1              ;2249
001982  4928              LDR      r1,|L144.6692|
001984  6008              STR      r0,[r1,#0]            ;2249  ; k
                  |L144.6534|
001986  4827              LDR      r0,|L144.6692|
001988  6800              LDR      r0,[r0,#0]            ;2249  ; k
00198a  4941              LDR      r1,|L144.6800|
00198c  6809              LDR      r1,[r1,#0]            ;2249  ; qwe
00198e  4288              CMP      r0,r1                 ;2249
001990  dbed              BLT      |L144.6510|
;;;2252   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
001992  210a              MOVS     r1,#0xa
001994  4824              LDR      r0,|L144.6696|
001996  f7fffffe          BL       uart_putchar
00199a  211a              MOVS     r1,#0x1a
00199c  4822              LDR      r0,|L144.6696|
00199e  f7fffffe          BL       uart_putchar
0019a2  211a              MOVS     r1,#0x1a
0019a4  4820              LDR      r0,|L144.6696|
0019a6  f7fffffe          BL       uart_putchar
0019aa  211a              MOVS     r1,#0x1a
0019ac  481e              LDR      r0,|L144.6696|
0019ae  f7fffffe          BL       uart_putchar
0019b2  211a              MOVS     r1,#0x1a
0019b4  481c              LDR      r0,|L144.6696|
0019b6  f7fffffe          BL       uart_putchar
0019ba  211a              MOVS     r1,#0x1a
0019bc  481a              LDR      r0,|L144.6696|
0019be  f7fffffe          BL       uart_putchar
0019c2  211a              MOVS     r1,#0x1a
0019c4  4818              LDR      r0,|L144.6696|
0019c6  f7fffffe          BL       uart_putchar
;;;2253   															do
0019ca  bf00              NOP      
                  |L144.6604|
;;;2254   																{q1=strstr(uart_string_gsm,"SEND OK");
0019cc  4932              LDR      r1,|L144.6808|
0019ce  4818              LDR      r0,|L144.6704|
0019d0  f7fffffe          BL       strstr
0019d4  4931              LDR      r1,|L144.6812|
0019d6  6008              STR      r0,[r1,#0]  ; q1
;;;2255   																	q2=strstr(uart_string_gsm, "ERROR");
0019d8  4916              LDR      r1,|L144.6708|
0019da  4815              LDR      r0,|L144.6704|
0019dc  f7fffffe          BL       strstr
0019e0  492f              LDR      r1,|L144.6816|
0019e2  6008              STR      r0,[r1,#0]  ; q2
;;;2256   																		q3=strstr(uart_string_gsm, "FAIL");	
0019e4  492f              LDR      r1,|L144.6820|
0019e6  4812              LDR      r0,|L144.6704|
0019e8  f7fffffe          BL       strstr
0019ec  492e              LDR      r1,|L144.6824|
0019ee  6008              STR      r0,[r1,#0]  ; q3
;;;2257   																			q4=strstr(uart_string_gsm, "DEACT");	
0019f0  491c              LDR      r1,|L144.6756|
0019f2  480f              LDR      r0,|L144.6704|
0019f4  f7fffffe          BL       strstr
0019f8  492c              LDR      r1,|L144.6828|
0019fa  6008              STR      r0,[r1,#0]  ; q4
;;;2258   																	
;;;2259   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
0019fc  4827              LDR      r0,|L144.6812|
0019fe  6800              LDR      r0,[r0,#0]  ; q1
001a00  2800              CMP      r0,#0
001a02  d15a              BNE      |L144.6842|
001a04  4826              LDR      r0,|L144.6816|
001a06  6800              LDR      r0,[r0,#0]  ; q2
001a08  2800              CMP      r0,#0
001a0a  d156              BNE      |L144.6842|
001a0c  4826              LDR      r0,|L144.6824|
001a0e  6800              LDR      r0,[r0,#0]  ; q3
001a10  2800              CMP      r0,#0
001a12  d152              BNE      |L144.6842|
001a14  4608              MOV      r0,r1
001a16  6800              LDR      r0,[r0,#0]  ; q4
001a18  2800              CMP      r0,#0
001a1a  e049              B        |L144.6832|
                  |L144.6684|
001a1c  e1aa              B        |L144.7540|
001a1e  0000              DCW      0x0000
                  |L144.6688|
                          DCD      data
                  |L144.6692|
                          DCD      k
                  |L144.6696|
                          DCD      0x4006b000
                  |L144.6700|
                          DCD      ||.conststring||+0x70
                  |L144.6704|
                          DCD      uart_string_gsm
                  |L144.6708|
                          DCD      ||.conststring||+0xe0
                  |L144.6712|
                          DCD      tout
                  |L144.6716|
                          DCD      0x400ff080
                  |L144.6720|
                          DCD      ||.conststring||+0x10
                  |L144.6724|
                          DCD      ||.conststring||+0x18
                  |L144.6728|
                          DCD      ||.conststring||+0x2c
                  |L144.6732|
                          DCD      ||.conststring||+0x6a0
                  |L144.6736|
                          DCD      ||.conststring||+0x430
                  |L144.6740|
                          DCD      at_
                  |L144.6744|
                          DCD      apn
                  |L144.6748|
                          DCD      ||.conststring||+0x6b0
                  |L144.6752|
                          DCD      tmeout
                  |L144.6756|
                          DCD      ||.conststring||+0x61c
                  |L144.6760|
                          DCD      ||.conststring||+0x6c4
                  |L144.6764|
                          DCD      ||.conststring||+0x6d4
                  |L144.6768|
                          DCD      port
                  |L144.6772|
                          DCD      ||ip||
                  |L144.6776|
                          DCD      ||.conststring||+0x6e4
                  |L144.6780|
                          DCD      ||.conststring||+0x654
                  |L144.6784|
                          DCD      ||.conststring||+0x704
                  |L144.6788|
                          DCD      ||.conststring||+0x20
                  |L144.6792|
                          DCD      ||.conststring||+0x65c
                  |L144.6796|
                          DCD      0x00001388
                  |L144.6800|
                          DCD      qwe
                  |L144.6804|
                          DCD      ||k2||
                  |L144.6808|
                          DCD      ||.conststring||+0x60c
                  |L144.6812|
                          DCD      ||q1||
                  |L144.6816|
                          DCD      ||q2||
                  |L144.6820|
                          DCD      ||.conststring||+0x614
                  |L144.6824|
                          DCD      ||q3||
                  |L144.6828|
                          DCD      ||q4||
                  |L144.6832|
001ab0  d103              BNE      |L144.6842|
001ab2  48fe              LDR      r0,|L144.7852|
001ab4  6800              LDR      r0,[r0,#0]  ; tout
001ab6  2808              CMP      r0,#8
001ab8  dd88              BLE      |L144.6604|
                  |L144.6842|
;;;2260   															
;;;2261   																			delay(10);clear();
001aba  200a              MOVS     r0,#0xa
001abc  f7fffffe          BL       delay
001ac0  f7fffffe          BL       clear
;;;2262   														uart_putchar(UART1_BASE_PTR,0x1A);
001ac4  211a              MOVS     r1,#0x1a
001ac6  48fa              LDR      r0,|L144.7856|
001ac8  f7fffffe          BL       uart_putchar
;;;2263   												delay(10);
001acc  200a              MOVS     r0,#0xa
001ace  f7fffffe          BL       delay
;;;2264   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001ad2  211a              MOVS     r1,#0x1a
001ad4  48f6              LDR      r0,|L144.7856|
001ad6  f7fffffe          BL       uart_putchar
001ada  211a              MOVS     r1,#0x1a
001adc  48f4              LDR      r0,|L144.7856|
001ade  f7fffffe          BL       uart_putchar
001ae2  211a              MOVS     r1,#0x1a
001ae4  48f2              LDR      r0,|L144.7856|
001ae6  f7fffffe          BL       uart_putchar
;;;2265   delay(20);
001aea  2014              MOVS     r0,#0x14
001aec  f7fffffe          BL       delay
;;;2266   if(!strstr(uart_string_gsm,"SEND OK")){
001af0  49f0              LDR      r1,|L144.7860|
001af2  48f1              LDR      r0,|L144.7864|
001af4  f7fffffe          BL       strstr
001af8  2800              CMP      r0,#0
001afa  d169              BNE      |L144.7120|
;;;2267   
;;;2268   
;;;2269   	delay(100);
001afc  2064              MOVS     r0,#0x64
001afe  f7fffffe          BL       delay
;;;2270   		clear();//memset(uart_string_gsm,0,5000);
001b02  f7fffffe          BL       clear
;;;2271   	
;;;2272   	memset(at_,0,100);
001b06  2164              MOVS     r1,#0x64
001b08  48ec              LDR      r0,|L144.7868|
001b0a  f7fffffe          BL       __aeabi_memclr
;;;2273   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001b0e  48ec              LDR      r0,|L144.7872|
001b10  f7fffffe          BL       strlen
001b14  1c44              ADDS     r4,r0,#1
001b16  4623              MOV      r3,r4
001b18  4aea              LDR      r2,|L144.7876|
001b1a  49eb              LDR      r1,|L144.7880|
001b1c  48e7              LDR      r0,|L144.7868|
001b1e  f7fffffe          BL       __2sprintf
;;;2274   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001b22  2005              MOVS     r0,#5
001b24  4be9              LDR      r3,|L144.7884|
001b26  4aea              LDR      r2,|L144.7888|
001b28  49ea              LDR      r1,|L144.7892|
001b2a  9000              STR      r0,[sp,#0]
001b2c  48e3              LDR      r0,|L144.7868|
001b2e  f7fffffe          BL       send_SD
;;;2275   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2276   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2277   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2278   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2279   //	}
;;;2280   	
;;;2281   clear();	
001b32  f7fffffe          BL       clear
;;;2282   									k2=0;									//string array counter for uart 1
001b36  2000              MOVS     r0,#0
001b38  49e7              LDR      r1,|L144.7896|
001b3a  6008              STR      r0,[r1,#0]  ; k2
;;;2283   									tout=0;	
001b3c  49db              LDR      r1,|L144.7852|
001b3e  6008              STR      r0,[r1,#0]  ; tout
;;;2284   		for(k=0;k<strlen(data);k++)
001b40  49e6              LDR      r1,|L144.7900|
001b42  6008              STR      r0,[r1,#0]  ; k
001b44  e00b              B        |L144.7006|
                  |L144.6982|
;;;2285   		{
;;;2286   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001b46  48de              LDR      r0,|L144.7872|
001b48  4ae4              LDR      r2,|L144.7900|
001b4a  6812              LDR      r2,[r2,#0]  ; k
001b4c  5c81              LDRB     r1,[r0,r2]
001b4e  48d8              LDR      r0,|L144.7856|
001b50  f7fffffe          BL       uart_putchar
001b54  48e1              LDR      r0,|L144.7900|
001b56  6800              LDR      r0,[r0,#0]            ;2284  ; k
001b58  1c40              ADDS     r0,r0,#1              ;2284
001b5a  49e0              LDR      r1,|L144.7900|
001b5c  6008              STR      r0,[r1,#0]            ;2284  ; k
                  |L144.7006|
001b5e  48d8              LDR      r0,|L144.7872|
001b60  f7fffffe          BL       strlen
001b64  49dd              LDR      r1,|L144.7900|
001b66  6809              LDR      r1,[r1,#0]            ;2284  ; k
001b68  4288              CMP      r0,r1                 ;2284
001b6a  d8ec              BHI      |L144.6982|
;;;2287   		}	
;;;2288   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001b6c  210a              MOVS     r1,#0xa
001b6e  48d0              LDR      r0,|L144.7856|
001b70  f7fffffe          BL       uart_putchar
001b74  210a              MOVS     r1,#0xa
001b76  48ce              LDR      r0,|L144.7856|
001b78  f7fffffe          BL       uart_putchar
001b7c  210a              MOVS     r1,#0xa
001b7e  48cc              LDR      r0,|L144.7856|
001b80  f7fffffe          BL       uart_putchar
001b84  210a              MOVS     r1,#0xa
001b86  48ca              LDR      r0,|L144.7856|
001b88  f7fffffe          BL       uart_putchar
001b8c  210a              MOVS     r1,#0xa
001b8e  48c8              LDR      r0,|L144.7856|
001b90  f7fffffe          BL       uart_putchar
001b94  210a              MOVS     r1,#0xa
001b96  48c6              LDR      r0,|L144.7856|
001b98  f7fffffe          BL       uart_putchar
001b9c  210a              MOVS     r1,#0xa
001b9e  48c4              LDR      r0,|L144.7856|
001ba0  f7fffffe          BL       uart_putchar
001ba4  210a              MOVS     r1,#0xa
001ba6  48c2              LDR      r0,|L144.7856|
001ba8  f7fffffe          BL       uart_putchar
001bac  210a              MOVS     r1,#0xa
001bae  48c0              LDR      r0,|L144.7856|
001bb0  f7fffffe          BL       uart_putchar
001bb4  210a              MOVS     r1,#0xa
001bb6  48be              LDR      r0,|L144.7856|
001bb8  f7fffffe          BL       uart_putchar
001bbc  210a              MOVS     r1,#0xa
001bbe  48bc              LDR      r0,|L144.7856|
001bc0  f7fffffe          BL       uart_putchar
001bc4  210a              MOVS     r1,#0xa
001bc6  48ba              LDR      r0,|L144.7856|
001bc8  f7fffffe          BL       uart_putchar
001bcc  210a              MOVS     r1,#0xa
001bce  e000              B        |L144.7122|
                  |L144.7120|
001bd0  e228              B        |L144.8228|
                  |L144.7122|
001bd2  48b7              LDR      r0,|L144.7856|
001bd4  f7fffffe          BL       uart_putchar
001bd8  210a              MOVS     r1,#0xa
001bda  48b5              LDR      r0,|L144.7856|
001bdc  f7fffffe          BL       uart_putchar
001be0  210a              MOVS     r1,#0xa
001be2  48b3              LDR      r0,|L144.7856|
001be4  f7fffffe          BL       uart_putchar
001be8  210a              MOVS     r1,#0xa
001bea  48b1              LDR      r0,|L144.7856|
001bec  f7fffffe          BL       uart_putchar
001bf0  210a              MOVS     r1,#0xa
001bf2  48af              LDR      r0,|L144.7856|
001bf4  f7fffffe          BL       uart_putchar
001bf8  210a              MOVS     r1,#0xa
001bfa  48ad              LDR      r0,|L144.7856|
001bfc  f7fffffe          BL       uart_putchar
001c00  210a              MOVS     r1,#0xa
001c02  48ab              LDR      r0,|L144.7856|
001c04  f7fffffe          BL       uart_putchar
001c08  210a              MOVS     r1,#0xa
001c0a  48a9              LDR      r0,|L144.7856|
001c0c  f7fffffe          BL       uart_putchar
001c10  210a              MOVS     r1,#0xa
001c12  48a7              LDR      r0,|L144.7856|
001c14  f7fffffe          BL       uart_putchar
001c18  210a              MOVS     r1,#0xa
001c1a  48a5              LDR      r0,|L144.7856|
001c1c  f7fffffe          BL       uart_putchar
001c20  210a              MOVS     r1,#0xa
001c22  48a3              LDR      r0,|L144.7856|
001c24  f7fffffe          BL       uart_putchar
001c28  210a              MOVS     r1,#0xa
001c2a  48a1              LDR      r0,|L144.7856|
001c2c  f7fffffe          BL       uart_putchar
001c30  210a              MOVS     r1,#0xa
001c32  489f              LDR      r0,|L144.7856|
001c34  f7fffffe          BL       uart_putchar
001c38  210a              MOVS     r1,#0xa
001c3a  489d              LDR      r0,|L144.7856|
001c3c  f7fffffe          BL       uart_putchar
001c40  210a              MOVS     r1,#0xa
001c42  489b              LDR      r0,|L144.7856|
001c44  f7fffffe          BL       uart_putchar
001c48  210a              MOVS     r1,#0xa
001c4a  4899              LDR      r0,|L144.7856|
001c4c  f7fffffe          BL       uart_putchar
001c50  210a              MOVS     r1,#0xa
001c52  4897              LDR      r0,|L144.7856|
001c54  f7fffffe          BL       uart_putchar
001c58  210a              MOVS     r1,#0xa
001c5a  4895              LDR      r0,|L144.7856|
001c5c  f7fffffe          BL       uart_putchar
001c60  210a              MOVS     r1,#0xa
001c62  4893              LDR      r0,|L144.7856|
001c64  f7fffffe          BL       uart_putchar
001c68  210a              MOVS     r1,#0xa
001c6a  4891              LDR      r0,|L144.7856|
001c6c  f7fffffe          BL       uart_putchar
001c70  210a              MOVS     r1,#0xa
001c72  488f              LDR      r0,|L144.7856|
001c74  f7fffffe          BL       uart_putchar
001c78  210a              MOVS     r1,#0xa
001c7a  488d              LDR      r0,|L144.7856|
001c7c  f7fffffe          BL       uart_putchar
001c80  210a              MOVS     r1,#0xa
001c82  488b              LDR      r0,|L144.7856|
001c84  f7fffffe          BL       uart_putchar
001c88  210a              MOVS     r1,#0xa
001c8a  4889              LDR      r0,|L144.7856|
001c8c  f7fffffe          BL       uart_putchar
001c90  210a              MOVS     r1,#0xa
001c92  4887              LDR      r0,|L144.7856|
001c94  f7fffffe          BL       uart_putchar
001c98  210a              MOVS     r1,#0xa
001c9a  4885              LDR      r0,|L144.7856|
001c9c  f7fffffe          BL       uart_putchar
001ca0  210a              MOVS     r1,#0xa
001ca2  4883              LDR      r0,|L144.7856|
001ca4  f7fffffe          BL       uart_putchar
001ca8  210a              MOVS     r1,#0xa
001caa  4881              LDR      r0,|L144.7856|
001cac  f7fffffe          BL       uart_putchar
001cb0  210a              MOVS     r1,#0xa
001cb2  487f              LDR      r0,|L144.7856|
001cb4  f7fffffe          BL       uart_putchar
001cb8  210a              MOVS     r1,#0xa
001cba  487d              LDR      r0,|L144.7856|
001cbc  f7fffffe          BL       uart_putchar
001cc0  210a              MOVS     r1,#0xa
001cc2  487b              LDR      r0,|L144.7856|
001cc4  f7fffffe          BL       uart_putchar
001cc8  210a              MOVS     r1,#0xa
001cca  4879              LDR      r0,|L144.7856|
001ccc  f7fffffe          BL       uart_putchar
001cd0  210a              MOVS     r1,#0xa
001cd2  4877              LDR      r0,|L144.7856|
001cd4  f7fffffe          BL       uart_putchar
001cd8  210a              MOVS     r1,#0xa
001cda  4875              LDR      r0,|L144.7856|
001cdc  f7fffffe          BL       uart_putchar
001ce0  210a              MOVS     r1,#0xa
001ce2  4873              LDR      r0,|L144.7856|
001ce4  f7fffffe          BL       uart_putchar
001ce8  210a              MOVS     r1,#0xa
001cea  4871              LDR      r0,|L144.7856|
001cec  f7fffffe          BL       uart_putchar
001cf0  210a              MOVS     r1,#0xa
001cf2  486f              LDR      r0,|L144.7856|
001cf4  f7fffffe          BL       uart_putchar
001cf8  210a              MOVS     r1,#0xa
001cfa  486d              LDR      r0,|L144.7856|
001cfc  f7fffffe          BL       uart_putchar
001d00  210a              MOVS     r1,#0xa
001d02  486b              LDR      r0,|L144.7856|
001d04  f7fffffe          BL       uart_putchar
001d08  210a              MOVS     r1,#0xa
001d0a  4869              LDR      r0,|L144.7856|
001d0c  f7fffffe          BL       uart_putchar
001d10  210a              MOVS     r1,#0xa
001d12  4867              LDR      r0,|L144.7856|
001d14  f7fffffe          BL       uart_putchar
001d18  210a              MOVS     r1,#0xa
001d1a  4865              LDR      r0,|L144.7856|
001d1c  f7fffffe          BL       uart_putchar
001d20  210a              MOVS     r1,#0xa
001d22  4863              LDR      r0,|L144.7856|
001d24  f7fffffe          BL       uart_putchar
001d28  210a              MOVS     r1,#0xa
001d2a  4861              LDR      r0,|L144.7856|
001d2c  f7fffffe          BL       uart_putchar
001d30  210a              MOVS     r1,#0xa
001d32  485f              LDR      r0,|L144.7856|
001d34  f7fffffe          BL       uart_putchar
;;;2289   									//memset(data,0,1000);
;;;2290   														//timer counts to wait for characters in uart 1 									
;;;2291   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001d38  bf00              NOP      
                  |L144.7482|
001d3a  4969              LDR      r1,|L144.7904|
001d3c  485e              LDR      r0,|L144.7864|
001d3e  f7fffffe          BL       strstr
001d42  2800              CMP      r0,#0
001d44  d109              BNE      |L144.7514|
001d46  4961              LDR      r1,|L144.7884|
001d48  485b              LDR      r0,|L144.7864|
001d4a  f7fffffe          BL       strstr
001d4e  2800              CMP      r0,#0
001d50  d103              BNE      |L144.7514|
001d52  4856              LDR      r0,|L144.7852|
001d54  6800              LDR      r0,[r0,#0]  ; tout
001d56  2805              CMP      r0,#5
001d58  ddef              BLE      |L144.7482|
                  |L144.7514|
;;;2292   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2293   									}
;;;2294   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001d5a  f7fffffe          BL       clear
;;;2295   									//clear();
;;;2296   									memset(data,0,strlen(data));
001d5e  4858              LDR      r0,|L144.7872|
001d60  f7fffffe          BL       strlen
001d64  4604              MOV      r4,r0
001d66  4621              MOV      r1,r4
001d68  4855              LDR      r0,|L144.7872|
001d6a  f7fffffe          BL       __aeabi_memclr
;;;2297   									clear();
001d6e  f7fffffe          BL       clear
                  |L144.7538|
;;;2298   
;;;2299   								
;;;2300   break;
001d72  e165              B        |L144.8256|
                  |L144.7540|
;;;2301   //log_it();
;;;2302   }
;;;2303   			
;;;2304   			
;;;2305   			
;;;2306   			
;;;2307   			
;;;2308   			}
;;;2309   			else
;;;2310   			{
;;;2311   				
;;;2312   				
;;;2313   				
;;;2314   	delay(100);
001d74  2064              MOVS     r0,#0x64
001d76  f7fffffe          BL       delay
;;;2315   		clear();//memset(uart_string_gsm,0,5000);
001d7a  f7fffffe          BL       clear
;;;2316   	
;;;2317   	memset(at_,0,100);
001d7e  2164              MOVS     r1,#0x64
001d80  484e              LDR      r0,|L144.7868|
001d82  f7fffffe          BL       __aeabi_memclr
;;;2318   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001d86  484e              LDR      r0,|L144.7872|
001d88  f7fffffe          BL       strlen
001d8c  1c44              ADDS     r4,r0,#1
001d8e  4623              MOV      r3,r4
001d90  4a4c              LDR      r2,|L144.7876|
001d92  494d              LDR      r1,|L144.7880|
001d94  4849              LDR      r0,|L144.7868|
001d96  f7fffffe          BL       __2sprintf
;;;2319   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001d9a  2005              MOVS     r0,#5
001d9c  4b4b              LDR      r3,|L144.7884|
001d9e  4a4c              LDR      r2,|L144.7888|
001da0  494c              LDR      r1,|L144.7892|
001da2  9000              STR      r0,[sp,#0]
001da4  4845              LDR      r0,|L144.7868|
001da6  f7fffffe          BL       send_SD
;;;2320   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2321   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2322   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2323   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2324   //	}
;;;2325   	
;;;2326   clear();	
001daa  f7fffffe          BL       clear
;;;2327   									k2=0;									//string array counter for uart 1
001dae  2000              MOVS     r0,#0
001db0  4949              LDR      r1,|L144.7896|
001db2  6008              STR      r0,[r1,#0]  ; k2
;;;2328   									tout=0;	
001db4  493d              LDR      r1,|L144.7852|
001db6  6008              STR      r0,[r1,#0]  ; tout
;;;2329   		for(k=0;k<strlen(data);k++)
001db8  4948              LDR      r1,|L144.7900|
001dba  6008              STR      r0,[r1,#0]  ; k
001dbc  e00b              B        |L144.7638|
                  |L144.7614|
;;;2330   		{
;;;2331   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001dbe  4840              LDR      r0,|L144.7872|
001dc0  4a46              LDR      r2,|L144.7900|
001dc2  6812              LDR      r2,[r2,#0]  ; k
001dc4  5c81              LDRB     r1,[r0,r2]
001dc6  483a              LDR      r0,|L144.7856|
001dc8  f7fffffe          BL       uart_putchar
001dcc  4843              LDR      r0,|L144.7900|
001dce  6800              LDR      r0,[r0,#0]            ;2329  ; k
001dd0  1c40              ADDS     r0,r0,#1              ;2329
001dd2  4942              LDR      r1,|L144.7900|
001dd4  6008              STR      r0,[r1,#0]            ;2329  ; k
                  |L144.7638|
001dd6  483a              LDR      r0,|L144.7872|
001dd8  f7fffffe          BL       strlen
001ddc  493f              LDR      r1,|L144.7900|
001dde  6809              LDR      r1,[r1,#0]            ;2329  ; k
001de0  4288              CMP      r0,r1                 ;2329
001de2  d8ec              BHI      |L144.7614|
;;;2332   		}	
;;;2333   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001de4  210a              MOVS     r1,#0xa
001de6  4832              LDR      r0,|L144.7856|
001de8  f7fffffe          BL       uart_putchar
001dec  210a              MOVS     r1,#0xa
001dee  4830              LDR      r0,|L144.7856|
001df0  f7fffffe          BL       uart_putchar
001df4  210a              MOVS     r1,#0xa
001df6  482e              LDR      r0,|L144.7856|
001df8  f7fffffe          BL       uart_putchar
001dfc  210a              MOVS     r1,#0xa
001dfe  482c              LDR      r0,|L144.7856|
001e00  f7fffffe          BL       uart_putchar
001e04  210a              MOVS     r1,#0xa
001e06  482a              LDR      r0,|L144.7856|
001e08  f7fffffe          BL       uart_putchar
001e0c  210a              MOVS     r1,#0xa
001e0e  4828              LDR      r0,|L144.7856|
001e10  f7fffffe          BL       uart_putchar
001e14  210a              MOVS     r1,#0xa
001e16  4826              LDR      r0,|L144.7856|
001e18  f7fffffe          BL       uart_putchar
001e1c  210a              MOVS     r1,#0xa
001e1e  4824              LDR      r0,|L144.7856|
001e20  f7fffffe          BL       uart_putchar
001e24  210a              MOVS     r1,#0xa
001e26  4822              LDR      r0,|L144.7856|
001e28  f7fffffe          BL       uart_putchar
001e2c  210a              MOVS     r1,#0xa
001e2e  4820              LDR      r0,|L144.7856|
001e30  f7fffffe          BL       uart_putchar
001e34  210a              MOVS     r1,#0xa
001e36  481e              LDR      r0,|L144.7856|
001e38  f7fffffe          BL       uart_putchar
001e3c  210a              MOVS     r1,#0xa
001e3e  481c              LDR      r0,|L144.7856|
001e40  f7fffffe          BL       uart_putchar
001e44  210a              MOVS     r1,#0xa
001e46  481a              LDR      r0,|L144.7856|
001e48  f7fffffe          BL       uart_putchar
001e4c  210a              MOVS     r1,#0xa
001e4e  4818              LDR      r0,|L144.7856|
001e50  f7fffffe          BL       uart_putchar
001e54  210a              MOVS     r1,#0xa
001e56  4816              LDR      r0,|L144.7856|
001e58  f7fffffe          BL       uart_putchar
001e5c  210a              MOVS     r1,#0xa
001e5e  4814              LDR      r0,|L144.7856|
001e60  f7fffffe          BL       uart_putchar
001e64  210a              MOVS     r1,#0xa
001e66  4812              LDR      r0,|L144.7856|
001e68  f7fffffe          BL       uart_putchar
001e6c  210a              MOVS     r1,#0xa
001e6e  4810              LDR      r0,|L144.7856|
001e70  f7fffffe          BL       uart_putchar
001e74  210a              MOVS     r1,#0xa
001e76  480e              LDR      r0,|L144.7856|
001e78  f7fffffe          BL       uart_putchar
001e7c  210a              MOVS     r1,#0xa
001e7e  480c              LDR      r0,|L144.7856|
001e80  f7fffffe          BL       uart_putchar
001e84  210a              MOVS     r1,#0xa
001e86  480a              LDR      r0,|L144.7856|
001e88  f7fffffe          BL       uart_putchar
001e8c  210a              MOVS     r1,#0xa
001e8e  4808              LDR      r0,|L144.7856|
001e90  f7fffffe          BL       uart_putchar
001e94  210a              MOVS     r1,#0xa
001e96  4806              LDR      r0,|L144.7856|
001e98  f7fffffe          BL       uart_putchar
001e9c  210a              MOVS     r1,#0xa
001e9e  4804              LDR      r0,|L144.7856|
001ea0  f7fffffe          BL       uart_putchar
001ea4  210a              MOVS     r1,#0xa
001ea6  4802              LDR      r0,|L144.7856|
001ea8  e01c              B        |L144.7908|
001eaa  0000              DCW      0x0000
                  |L144.7852|
                          DCD      tout
                  |L144.7856|
                          DCD      0x4006b000
                  |L144.7860|
                          DCD      ||.conststring||+0x60c
                  |L144.7864|
                          DCD      uart_string_gsm
                  |L144.7868|
                          DCD      at_
                  |L144.7872|
                          DCD      data
                  |L144.7876|
                          DCD      drive
                  |L144.7880|
                          DCD      ||.conststring||+0x434
                  |L144.7884|
                          DCD      ||.conststring||+0xe0
                  |L144.7888|
                          DCD      ||.conststring||+0x18
                  |L144.7892|
                          DCD      ||.conststring||+0x20
                  |L144.7896|
                          DCD      ||k2||
                  |L144.7900|
                          DCD      k
                  |L144.7904|
                          DCD      ||.conststring||+0x70
                  |L144.7908|
001ee4  f7fffffe          BL       uart_putchar
001ee8  210a              MOVS     r1,#0xa
001eea  486b              LDR      r0,|L144.8344|
001eec  f7fffffe          BL       uart_putchar
001ef0  210a              MOVS     r1,#0xa
001ef2  4869              LDR      r0,|L144.8344|
001ef4  f7fffffe          BL       uart_putchar
001ef8  210a              MOVS     r1,#0xa
001efa  4867              LDR      r0,|L144.8344|
001efc  f7fffffe          BL       uart_putchar
001f00  210a              MOVS     r1,#0xa
001f02  4865              LDR      r0,|L144.8344|
001f04  f7fffffe          BL       uart_putchar
001f08  210a              MOVS     r1,#0xa
001f0a  4863              LDR      r0,|L144.8344|
001f0c  f7fffffe          BL       uart_putchar
001f10  210a              MOVS     r1,#0xa
001f12  4861              LDR      r0,|L144.8344|
001f14  f7fffffe          BL       uart_putchar
001f18  210a              MOVS     r1,#0xa
001f1a  485f              LDR      r0,|L144.8344|
001f1c  f7fffffe          BL       uart_putchar
001f20  210a              MOVS     r1,#0xa
001f22  485d              LDR      r0,|L144.8344|
001f24  f7fffffe          BL       uart_putchar
001f28  210a              MOVS     r1,#0xa
001f2a  485b              LDR      r0,|L144.8344|
001f2c  f7fffffe          BL       uart_putchar
001f30  210a              MOVS     r1,#0xa
001f32  4859              LDR      r0,|L144.8344|
001f34  f7fffffe          BL       uart_putchar
001f38  210a              MOVS     r1,#0xa
001f3a  4857              LDR      r0,|L144.8344|
001f3c  f7fffffe          BL       uart_putchar
001f40  210a              MOVS     r1,#0xa
001f42  4855              LDR      r0,|L144.8344|
001f44  f7fffffe          BL       uart_putchar
001f48  210a              MOVS     r1,#0xa
001f4a  4853              LDR      r0,|L144.8344|
001f4c  f7fffffe          BL       uart_putchar
001f50  210a              MOVS     r1,#0xa
001f52  4851              LDR      r0,|L144.8344|
001f54  f7fffffe          BL       uart_putchar
001f58  210a              MOVS     r1,#0xa
001f5a  484f              LDR      r0,|L144.8344|
001f5c  f7fffffe          BL       uart_putchar
001f60  210a              MOVS     r1,#0xa
001f62  484d              LDR      r0,|L144.8344|
001f64  f7fffffe          BL       uart_putchar
001f68  210a              MOVS     r1,#0xa
001f6a  484b              LDR      r0,|L144.8344|
001f6c  f7fffffe          BL       uart_putchar
001f70  210a              MOVS     r1,#0xa
001f72  4849              LDR      r0,|L144.8344|
001f74  f7fffffe          BL       uart_putchar
001f78  210a              MOVS     r1,#0xa
001f7a  4847              LDR      r0,|L144.8344|
001f7c  f7fffffe          BL       uart_putchar
001f80  210a              MOVS     r1,#0xa
001f82  4845              LDR      r0,|L144.8344|
001f84  f7fffffe          BL       uart_putchar
001f88  210a              MOVS     r1,#0xa
001f8a  4843              LDR      r0,|L144.8344|
001f8c  f7fffffe          BL       uart_putchar
001f90  210a              MOVS     r1,#0xa
001f92  4841              LDR      r0,|L144.8344|
001f94  f7fffffe          BL       uart_putchar
001f98  210a              MOVS     r1,#0xa
001f9a  483f              LDR      r0,|L144.8344|
001f9c  f7fffffe          BL       uart_putchar
001fa0  210a              MOVS     r1,#0xa
001fa2  483d              LDR      r0,|L144.8344|
001fa4  f7fffffe          BL       uart_putchar
001fa8  210a              MOVS     r1,#0xa
001faa  483b              LDR      r0,|L144.8344|
001fac  f7fffffe          BL       uart_putchar
001fb0  210a              MOVS     r1,#0xa
001fb2  4839              LDR      r0,|L144.8344|
001fb4  f7fffffe          BL       uart_putchar
001fb8  210a              MOVS     r1,#0xa
001fba  4837              LDR      r0,|L144.8344|
001fbc  f7fffffe          BL       uart_putchar
001fc0  210a              MOVS     r1,#0xa
001fc2  4835              LDR      r0,|L144.8344|
001fc4  f7fffffe          BL       uart_putchar
001fc8  210a              MOVS     r1,#0xa
001fca  4833              LDR      r0,|L144.8344|
001fcc  f7fffffe          BL       uart_putchar
001fd0  210a              MOVS     r1,#0xa
001fd2  4831              LDR      r0,|L144.8344|
001fd4  f7fffffe          BL       uart_putchar
001fd8  210a              MOVS     r1,#0xa
001fda  482f              LDR      r0,|L144.8344|
001fdc  f7fffffe          BL       uart_putchar
001fe0  210a              MOVS     r1,#0xa
001fe2  482d              LDR      r0,|L144.8344|
001fe4  f7fffffe          BL       uart_putchar
;;;2334   									//memset(data,0,1000);
;;;2335   														//timer counts to wait for characters in uart 1 									
;;;2336   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001fe8  bf00              NOP      
                  |L144.8170|
001fea  492c              LDR      r1,|L144.8348|
001fec  482c              LDR      r0,|L144.8352|
001fee  f7fffffe          BL       strstr
001ff2  2800              CMP      r0,#0
001ff4  d109              BNE      |L144.8202|
001ff6  492b              LDR      r1,|L144.8356|
001ff8  4829              LDR      r0,|L144.8352|
001ffa  f7fffffe          BL       strstr
001ffe  2800              CMP      r0,#0
002000  d103              BNE      |L144.8202|
002002  4829              LDR      r0,|L144.8360|
002004  6800              LDR      r0,[r0,#0]  ; tout
002006  2805              CMP      r0,#5
002008  ddef              BLE      |L144.8170|
                  |L144.8202|
;;;2337   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2338   									}
;;;2339   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00200a  f7fffffe          BL       clear
;;;2340   									//clear();
;;;2341   									memset(data,0,strlen(data));
00200e  4827              LDR      r0,|L144.8364|
002010  f7fffffe          BL       strlen
002014  4604              MOV      r4,r0
002016  4621              MOV      r1,r4
002018  4824              LDR      r0,|L144.8364|
00201a  f7fffffe          BL       __aeabi_memclr
;;;2342   									clear();
00201e  f7fffffe          BL       clear
;;;2343   
;;;2344   								
;;;2345   				
;;;2346   				//log_it();
;;;2347   			
;;;2348   			
;;;2349   			
;;;2350   			
;;;2351   			break;
002022  e00d              B        |L144.8256|
                  |L144.8228|
;;;2352   			}
;;;2353   //			memset(at_,0,100);
;;;2354   //			sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
;;;2355   //			send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2356   //			parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
;;;2357   //			fsz=stof(fsize);//7523.7412
;;;2358   //			times=(fsz/1256)+1;
;;;2359   		}	
;;;2360   	
;;;2361   //
;;;2362   if(rtcticks2>=1500){break;}		
002024  4822              LDR      r0,|L144.8368|
002026  6800              LDR      r0,[r0,#0]  ; rtcticks2
002028  4922              LDR      r1,|L144.8372|
00202a  4288              CMP      r0,r1
00202c  db00              BLT      |L144.8240|
00202e  e007              B        |L144.8256|
                  |L144.8240|
002030  4821              LDR      r0,|L144.8376|
002032  6800              LDR      r0,[r0,#0]            ;1820  ; k5
002034  4921              LDR      r1,|L144.8380|
002036  6809              LDR      r1,[r1,#0]            ;1820  ; times
002038  4288              CMP      r0,r1                 ;1820
00203a  dc01              BGT      |L144.8256|
00203c  f7fef81f          BL       |L144.126|
                  |L144.8256|
002040  bf00              NOP                            ;1821
;;;2363   }
;;;2364   
;;;2365   if(((k5>=times) && log0!=1)){
002042  481d              LDR      r0,|L144.8376|
002044  6800              LDR      r0,[r0,#0]  ; k5
002046  491d              LDR      r1,|L144.8380|
002048  6809              LDR      r1,[r1,#0]  ; times
00204a  4288              CMP      r0,r1
00204c  db1e              BLT      |L144.8332|
00204e  481c              LDR      r0,|L144.8384|
002050  6800              LDR      r0,[r0,#0]  ; log0
002052  2801              CMP      r0,#1
002054  d01a              BEQ      |L144.8332|
;;;2366   	cursorvaluepr=0;times=-2;k5=0;
002056  2000              MOVS     r0,#0
002058  491a              LDR      r1,|L144.8388|
00205a  6008              STR      r0,[r1,#0]  ; cursorvaluepr
00205c  1e80              SUBS     r0,r0,#2
00205e  4917              LDR      r1,|L144.8380|
002060  6008              STR      r0,[r1,#0]  ; times
002062  2000              MOVS     r0,#0
002064  4914              LDR      r1,|L144.8376|
002066  6008              STR      r0,[r1,#0]  ; k5
;;;2367   	memset(at_,0,100);
002068  2164              MOVS     r1,#0x64
00206a  4817              LDR      r0,|L144.8392|
00206c  f7fffffe          BL       __aeabi_memclr
;;;2368   	sprintf(at_,"\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
002070  4a16              LDR      r2,|L144.8396|
002072  4917              LDR      r1,|L144.8400|
002074  4814              LDR      r0,|L144.8392|
002076  f7fffffe          BL       __2sprintf
;;;2369   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00207a  4816              LDR      r0,|L144.8404|
00207c  6800              LDR      r0,[r0,#0]  ; tmeout
00207e  4b16              LDR      r3,|L144.8408|
002080  4a16              LDR      r2,|L144.8412|
002082  4917              LDR      r1,|L144.8416|
002084  9000              STR      r0,[sp,#0]
002086  4810              LDR      r0,|L144.8392|
002088  f7fffffe          BL       send_GSM
                  |L144.8332|
;;;2370   
;;;2371   }		
;;;2372   
;;;2373   int_erval=temp;
00208c  4815              LDR      r0,|L144.8420|
00208e  6800              LDR      r0,[r0,#0]  ; temp
002090  4915              LDR      r1,|L144.8424|
002092  6008              STR      r0,[r1,#0]  ; int_erval
;;;2374   }
002094  bd7c              POP      {r2-r6,pc}
;;;2375   
                          ENDP

002096  0000              DCW      0x0000
                  |L144.8344|
                          DCD      0x4006b000
                  |L144.8348|
                          DCD      ||.conststring||+0x70
                  |L144.8352|
                          DCD      uart_string_gsm
                  |L144.8356|
                          DCD      ||.conststring||+0xe0
                  |L144.8360|
                          DCD      tout
                  |L144.8364|
                          DCD      data
                  |L144.8368|
                          DCD      rtcticks2
                  |L144.8372|
                          DCD      0x000005dc
                  |L144.8376|
                          DCD      ||k5||
                  |L144.8380|
                          DCD      times
                  |L144.8384|
                          DCD      log0
                  |L144.8388|
                          DCD      cursorvaluepr
                  |L144.8392|
                          DCD      at_
                  |L144.8396|
                          DCD      drive
                  |L144.8400|
                          DCD      ||.conststring||+0x714
                  |L144.8404|
                          DCD      tmeout
                  |L144.8408|
                          DCD      ||.conststring||+0x10
                  |L144.8412|
                          DCD      ||.conststring||+0x18
                  |L144.8416|
                          DCD      ||.conststring||+0x2c
                  |L144.8420|
                          DCD      temp
                  |L144.8424|
                          DCD      int_erval

                          AREA ||i.readapn||, COMGROUP=readapn, CODE, READONLY, ALIGN=2

                  readapn PROC
;;;1181   
;;;1182   __inline void readapn()
000000  b51c              PUSH     {r2-r4,lr}
;;;1183   {
;;;1184   	memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480c              LDR      r0,|L151.56|
000006  f7fffffe          BL       __aeabi_memclr
;;;1185   		sprintf(at_, "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n");		
00000a  490c              LDR      r1,|L151.60|
00000c  480a              LDR      r0,|L151.56|
00000e  f7fffffe          BL       __2sprintf
;;;1186   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0a              LDR      r3,|L151.64|
000016  4a0b              LDR      r2,|L151.68|
000018  490b              LDR      r1,|L151.72|
00001a  9000              STR      r0,[sp,#0]
00001c  4806              LDR      r0,|L151.56|
00001e  f7fffffe          BL       send_GSM
;;;1187   	
;;;1188   		parse_g(uart_string_gsm, 1,2, '|', '|',apn);
000022  480a              LDR      r0,|L151.76|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2202              MOVS     r2,#2
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2101              MOVS     r1,#1
000030  4807              LDR      r0,|L151.80|
000032  f7fffffe          BL       parse_g
;;;1189   	
;;;1190   	
;;;1191   }
000036  bd1c              POP      {r2-r4,pc}
;;;1192   
                          ENDP

                  |L151.56|
                          DCD      at_
                  |L151.60|
                          DCD      ||.conststring||+0x730
                  |L151.64|
                          DCD      ||.conststring||+0x10
                  |L151.68|
                          DCD      ||.conststring||+0x18
                  |L151.72|
                          DCD      ||.conststring||+0x2c
                  |L151.76|
                          DCD      apn
                  |L151.80|
                          DCD      uart_string_gsm

                          AREA ||i.ignread||, COMGROUP=ignread, CODE, READONLY, ALIGN=2

                  ignread PROC
;;;1288   
;;;1289   __inline void ignread(){
000000  b508              PUSH     {r3,lr}
;;;1290   memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4813              LDR      r0,|L158.84|
000006  f7fffffe          BL       __aeabi_memclr
;;;1291   		sprintf(at_, "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n");		
00000a  4913              LDR      r1,|L158.88|
00000c  4811              LDR      r0,|L158.84|
00000e  f7fffffe          BL       __2sprintf
;;;1292   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b11              LDR      r3,|L158.92|
000016  4a12              LDR      r2,|L158.96|
000018  4912              LDR      r1,|L158.100|
00001a  9000              STR      r0,[sp,#0]
00001c  480d              LDR      r0,|L158.84|
00001e  f7fffffe          BL       send_GSM
;;;1293   if(strstr(uart_string_gsm,"ION")){IGNITION_ON;FUEL_ON;}
000022  4911              LDR      r1,|L158.104|
000024  4811              LDR      r0,|L158.108|
000026  f7fffffe          BL       strstr
00002a  2800              CMP      r0,#0
00002c  d005              BEQ      |L158.58|
00002e  2002              MOVS     r0,#2
000030  490f              LDR      r1,|L158.112|
000032  6088              STR      r0,[r1,#8]
000034  2004              MOVS     r0,#4
000036  6088              STR      r0,[r1,#8]
000038  e00a              B        |L158.80|
                  |L158.58|
;;;1294   else if(strstr(uart_string_gsm,"IOFF")){IGNITION_OFF;FUEL_OFF;}
00003a  490e              LDR      r1,|L158.116|
00003c  480b              LDR      r0,|L158.108|
00003e  f7fffffe          BL       strstr
000042  2800              CMP      r0,#0
000044  d004              BEQ      |L158.80|
000046  2002              MOVS     r0,#2
000048  4909              LDR      r1,|L158.112|
00004a  6048              STR      r0,[r1,#4]
00004c  2004              MOVS     r0,#4
00004e  6048              STR      r0,[r1,#4]
                  |L158.80|
;;;1295   
;;;1296   }	
000050  bd08              POP      {r3,pc}
;;;1297   	
                          ENDP

000052  0000              DCW      0x0000
                  |L158.84|
                          DCD      at_
                  |L158.88|
                          DCD      ||.conststring||+0x750
                  |L158.92|
                          DCD      ||.conststring||+0x10
                  |L158.96|
                          DCD      ||.conststring||+0x18
                  |L158.100|
                          DCD      ||.conststring||+0x2c
                  |L158.104|
                          DCD      ||.conststring||+0x770
                  |L158.108|
                          DCD      uart_string_gsm
                  |L158.112|
                          DCD      0x400ff000
                  |L158.116|
                          DCD      ||.conststring||+0x774

                          AREA ||i.readcursor||, COMGROUP=readcursor, CODE, READONLY, ALIGN=2

                  readcursor PROC
;;;1341   	
;;;1342   __inline void readcursor()
000000  b51c              PUSH     {r2-r4,lr}
;;;1343   {
;;;1344   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4824              LDR      r0,|L165.152|
000006  f7fffffe          BL       __aeabi_memclr
;;;1345   		sprintf(at_, "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n");		
00000a  4924              LDR      r1,|L165.156|
00000c  4822              LDR      r0,|L165.152|
00000e  f7fffffe          BL       __2sprintf
;;;1346   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b22              LDR      r3,|L165.160|
000016  4a23              LDR      r2,|L165.164|
000018  4923              LDR      r1,|L165.168|
00001a  9000              STR      r0,[sp,#0]
00001c  481e              LDR      r0,|L165.152|
00001e  f7fffffe          BL       send_GSM
;;;1347   		memset(at_,0,100);
000022  2164              MOVS     r1,#0x64
000024  481c              LDR      r0,|L165.152|
000026  f7fffffe          BL       __aeabi_memclr
;;;1348   		parse_g(uart_string_gsm, 4,5, ',', ',',at_);
00002a  481b              LDR      r0,|L165.152|
00002c  212c              MOVS     r1,#0x2c
00002e  460b              MOV      r3,r1
000030  2205              MOVS     r2,#5
000032  9100              STR      r1,[sp,#0]
000034  9001              STR      r0,[sp,#4]
000036  2104              MOVS     r1,#4
000038  481c              LDR      r0,|L165.172|
00003a  f7fffffe          BL       parse_g
;;;1349   		times=myAtoi(at_);		
00003e  4816              LDR      r0,|L165.152|
000040  f7fffffe          BL       myAtoi
000044  491a              LDR      r1,|L165.176|
000046  6008              STR      r0,[r1,#0]  ; times
;;;1350   		memset(at_,0,100);
000048  2164              MOVS     r1,#0x64
00004a  4813              LDR      r0,|L165.152|
00004c  f7fffffe          BL       __aeabi_memclr
;;;1351   		parse_g(uart_string_gsm, 5,6, ',', ',',at_);
000050  4811              LDR      r0,|L165.152|
000052  212c              MOVS     r1,#0x2c
000054  460b              MOV      r3,r1
000056  2206              MOVS     r2,#6
000058  9100              STR      r1,[sp,#0]
00005a  9001              STR      r0,[sp,#4]
00005c  2105              MOVS     r1,#5
00005e  4813              LDR      r0,|L165.172|
000060  f7fffffe          BL       parse_g
;;;1352   		k5=myAtoi(at_);		
000064  480c              LDR      r0,|L165.152|
000066  f7fffffe          BL       myAtoi
00006a  4912              LDR      r1,|L165.180|
00006c  6008              STR      r0,[r1,#0]  ; k5
;;;1353   		memset(at_,0,100);
00006e  2164              MOVS     r1,#0x64
000070  4809              LDR      r0,|L165.152|
000072  f7fffffe          BL       __aeabi_memclr
;;;1354   		parse_g(uart_string_gsm, 6,7, ',', ',',at_);
000076  4808              LDR      r0,|L165.152|
000078  212c              MOVS     r1,#0x2c
00007a  460b              MOV      r3,r1
00007c  2207              MOVS     r2,#7
00007e  9100              STR      r1,[sp,#0]
000080  9001              STR      r0,[sp,#4]
000082  2106              MOVS     r1,#6
000084  4809              LDR      r0,|L165.172|
000086  f7fffffe          BL       parse_g
;;;1355   		cursorvaluepr=myAtoi(at_);		
00008a  4803              LDR      r0,|L165.152|
00008c  f7fffffe          BL       myAtoi
000090  4909              LDR      r1,|L165.184|
000092  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1356   
;;;1357   
;;;1358   }	
000094  bd1c              POP      {r2-r4,pc}
;;;1359   	
                          ENDP

000096  0000              DCW      0x0000
                  |L165.152|
                          DCD      at_
                  |L165.156|
                          DCD      ||.conststring||+0x77c
                  |L165.160|
                          DCD      ||.conststring||+0x10
                  |L165.164|
                          DCD      ||.conststring||+0x18
                  |L165.168|
                          DCD      ||.conststring||+0x2c
                  |L165.172|
                          DCD      uart_string_gsm
                  |L165.176|
                          DCD      times
                  |L165.180|
                          DCD      ||k5||
                  |L165.184|
                          DCD      cursorvaluepr

                          AREA ||i.LED_init||, COMGROUP=LED_init, CODE, READONLY, ALIGN=2

                  LED_init PROC
;;;26     
;;;27     __inline void LED_init(void){
000000  4841              LDR      r0,|L172.264|
;;;28       
;;;29         SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK ;      //Turn on clock to PORTE & D module
000002  6b80              LDR      r0,[r0,#0x38]
000004  210f              MOVS     r1,#0xf
000006  0289              LSLS     r1,r1,#10
000008  4308              ORRS     r0,r0,r1
00000a  493f              LDR      r1,|L172.264|
00000c  6388              STR      r0,[r1,#0x38]
;;;30     
;;;31     
;;;32     	
;;;33     
;;;34     		PORTE_PCR29 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
00000e  1588              ASRS     r0,r1,#22
000010  493e              LDR      r1,|L172.268|
000012  6348              STR      r0,[r1,#0x34]
;;;35       	PORTD_PCR7 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000014  493e              LDR      r1,|L172.272|
000016  61c8              STR      r0,[r1,#0x1c]
;;;36         PORTE_PCR31 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000018  493c              LDR      r1,|L172.268|
00001a  63c8              STR      r0,[r1,#0x3c]
;;;37         PORTD_PCR5 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode
00001c  493c              LDR      r1,|L172.272|
00001e  6148              STR      r0,[r1,#0x14]
;;;38     	
;;;39         PORTC_PCR5 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000020  493c              LDR      r1,|L172.276|
000022  6148              STR      r0,[r1,#0x14]
;;;40         PORTC_PCR6 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000024  6188              STR      r0,[r1,#0x18]
;;;41         PORTC_PCR7 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	
000026  61c8              STR      r0,[r1,#0x1c]
;;;42         PORTC_PCR8 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	    
000028  6208              STR      r0,[r1,#0x20]
;;;43         PORTB_PCR2 = PORT_PCR_MUX(0x1);             //Set the PTB2 pin multiplexer to GPIO mode	   
00002a  493b              LDR      r1,|L172.280|
00002c  6088              STR      r0,[r1,#8]
;;;44     
;;;45     	
;;;46     	PORTB_PCR2 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
00002e  1c80              ADDS     r0,r0,#2
000030  6088              STR      r0,[r1,#8]
;;;47     
;;;48     
;;;49     //B1 for fuel now for Trigger should be output pulled down
;;;50     
;;;51     	PORTB_PCR1 |= PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000032  4608              MOV      r0,r1
000034  6840              LDR      r0,[r0,#4]
000036  21ff              MOVS     r1,#0xff
000038  3103              ADDS     r1,#3
00003a  4308              ORRS     r0,r0,r1
00003c  4936              LDR      r1,|L172.280|
00003e  6048              STR      r0,[r1,#4]
;;;52     	GPIOB_PCOR |= USTrigger_Shift;      //Set the initial output state to low	
000040  4836              LDR      r0,|L172.284|
000042  6880              LDR      r0,[r0,#8]
000044  2102              MOVS     r1,#2
000046  4308              ORRS     r0,r0,r1
000048  4934              LDR      r1,|L172.284|
00004a  6088              STR      r0,[r1,#8]
;;;53     	GPIOB_PDDR |= USTrigger_Shift;
00004c  4608              MOV      r0,r1
00004e  6940              LDR      r0,[r0,#0x14]
000050  2102              MOVS     r1,#2
000052  4308              ORRS     r0,r0,r1
000054  4931              LDR      r1,|L172.284|
000056  6148              STR      r0,[r1,#0x14]
;;;54     	
;;;55     	
;;;56     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;57     //	PTB->PDDR &= ~MASK(ADCIGN);
;;;58     //	GPIOD_PDDR |= (1<<7);
;;;59     
;;;60     	PORTB_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000058  20ff              MOVS     r0,#0xff
00005a  3003              ADDS     r0,#3
00005c  492e              LDR      r1,|L172.280|
00005e  6008              STR      r0,[r1,#0]
;;;61     	PORTC_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; //		GPIOB_PDDR = 0;
000060  1c40              ADDS     r0,r0,#1
000062  492c              LDR      r1,|L172.276|
000064  6008              STR      r0,[r1,#0]
;;;62     
;;;63     
;;;64     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;65     	//PTB->PDDR &= ~MASK(ADCIGN);
;;;66     //	GPIOD_PDDR |= (1<<7);
;;;67     
;;;68     	  
;;;69         GPIOE_PSOR |= RED_SHIFT | GREEN_SHIFT;      //Set the initial output state to high
000066  482d              LDR      r0,|L172.284|
000068  30c0              ADDS     r0,r0,#0xc0
00006a  6840              LDR      r0,[r0,#4]
00006c  2105              MOVS     r1,#5
00006e  0749              LSLS     r1,r1,#29
000070  4308              ORRS     r0,r0,r1
000072  492a              LDR      r1,|L172.284|
000074  31c0              ADDS     r1,r1,#0xc0
000076  6048              STR      r0,[r1,#4]
;;;70         GPIOD_PSOR |= BLUE_SHIFT;               	//Set the inital output state to high
000078  4828              LDR      r0,|L172.284|
00007a  3080              ADDS     r0,r0,#0x80
00007c  6840              LDR      r0,[r0,#4]
00007e  2120              MOVS     r1,#0x20
000080  4308              ORRS     r0,r0,r1
000082  4926              LDR      r1,|L172.284|
000084  3180              ADDS     r1,r1,#0x80
000086  6048              STR      r0,[r1,#4]
;;;71     		GPIOC_PSOR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT; 
000088  4824              LDR      r0,|L172.284|
00008a  3040              ADDS     r0,r0,#0x40
00008c  6840              LDR      r0,[r0,#4]
00008e  21ff              MOVS     r1,#0xff
000090  31c1              ADDS     r1,r1,#0xc1
000092  4308              ORRS     r0,r0,r1
000094  4921              LDR      r1,|L172.284|
000096  3140              ADDS     r1,r1,#0x40
000098  6048              STR      r0,[r1,#4]
;;;72     		GPIOC_PSOR |= RESET_SHIFT;
00009a  4608              MOV      r0,r1
00009c  6840              LDR      r0,[r0,#4]
00009e  2120              MOVS     r1,#0x20
0000a0  4308              ORRS     r0,r0,r1
0000a2  491e              LDR      r1,|L172.284|
0000a4  3140              ADDS     r1,r1,#0x40
0000a6  6048              STR      r0,[r1,#4]
;;;73         
;;;74         GPIOE_PDDR |= RED_SHIFT | GREEN_SHIFT;  //Set the pin's direction to output
0000a8  481c              LDR      r0,|L172.284|
0000aa  30c0              ADDS     r0,r0,#0xc0
0000ac  6940              LDR      r0,[r0,#0x14]
0000ae  2105              MOVS     r1,#5
0000b0  0749              LSLS     r1,r1,#29
0000b2  4308              ORRS     r0,r0,r1
0000b4  4919              LDR      r1,|L172.284|
0000b6  31c0              ADDS     r1,r1,#0xc0
0000b8  6148              STR      r0,[r1,#0x14]
;;;75         GPIOD_PDDR |= BLUE_SHIFT;               //Set the pin's direction to output
0000ba  4818              LDR      r0,|L172.284|
0000bc  3080              ADDS     r0,r0,#0x80
0000be  6940              LDR      r0,[r0,#0x14]
0000c0  2120              MOVS     r1,#0x20
0000c2  4308              ORRS     r0,r0,r1
0000c4  4915              LDR      r1,|L172.284|
0000c6  3180              ADDS     r1,r1,#0x80
0000c8  6148              STR      r0,[r1,#0x14]
;;;76     		GPIOC_PDDR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT | RESET_SHIFT; 
0000ca  4814              LDR      r0,|L172.284|
0000cc  3040              ADDS     r0,r0,#0x40
0000ce  6940              LDR      r0,[r0,#0x14]
0000d0  21ff              MOVS     r1,#0xff
0000d2  31e1              ADDS     r1,r1,#0xe1
0000d4  4308              ORRS     r0,r0,r1
0000d6  4911              LDR      r1,|L172.284|
0000d8  3140              ADDS     r1,r1,#0x40
0000da  6148              STR      r0,[r1,#0x14]
;;;77         
;;;78         RED_ON;		//Turn off RED LED
0000dc  0588              LSLS     r0,r1,#22
0000de  490f              LDR      r1,|L172.284|
0000e0  31c0              ADDS     r1,r1,#0xc0
0000e2  6088              STR      r0,[r1,#8]
;;;79         GREEN_ON;	//Turn off GREEN LED
0000e4  0080              LSLS     r0,r0,#2
0000e6  6088              STR      r0,[r1,#8]
;;;80         BLUE_ON;		//Turn off BLUE LED
0000e8  2020              MOVS     r0,#0x20
0000ea  490c              LDR      r1,|L172.284|
0000ec  3180              ADDS     r1,r1,#0x80
0000ee  6088              STR      r0,[r1,#8]
;;;81     		REDBAT_ON;
0000f0  2040              MOVS     r0,#0x40
0000f2  490a              LDR      r1,|L172.284|
0000f4  3140              ADDS     r1,r1,#0x40
0000f6  6088              STR      r0,[r1,#8]
;;;82     		GREENBAT_ON;
0000f8  2080              MOVS     r0,#0x80
0000fa  6088              STR      r0,[r1,#8]
;;;83     		BLUEBAT_ON;
0000fc  0040              LSLS     r0,r0,#1
0000fe  6088              STR      r0,[r1,#8]
;;;84     		RESET_ON;
000100  2020              MOVS     r0,#0x20
000102  6048              STR      r0,[r1,#4]
;;;85     		
;;;86     	
;;;87     }
000104  4770              BX       lr
;;;88     
                          ENDP

000106  0000              DCW      0x0000
                  |L172.264|
                          DCD      0x40048000
                  |L172.268|
                          DCD      0x4004d040
                  |L172.272|
                          DCD      0x4004c000
                  |L172.276|
                          DCD      0x4004b000
                  |L172.280|
                          DCD      0x4004a000
                  |L172.284|
                          DCD      0x400ff040

                          AREA ||i.ignstatoff||, COMGROUP=ignstatoff, CODE, READONLY, ALIGN=2

                  ignstatoff PROC
;;;1278   }	
;;;1279   __inline void ignstatoff(){
000000  b508              PUSH     {r3,lr}
;;;1280   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L179.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L179.64|
000008  4a0e              LDR      r2,|L179.68|
00000a  490f              LDR      r1,|L179.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L179.76|
000010  f7fffffe          BL       send_GSM
;;;1281   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L179.64|
000018  4a0a              LDR      r2,|L179.68|
00001a  490d              LDR      r1,|L179.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L179.84|
000020  f7fffffe          BL       send_GSM
;;;1282   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1283   send_GSM("\nIOFF\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L179.64|
00002e  4a05              LDR      r2,|L179.68|
000030  4909              LDR      r1,|L179.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L179.92|
000036  f7fffffe          BL       send_GSM
;;;1284   
;;;1285   
;;;1286   }		
00003a  bd08              POP      {r3,pc}
;;;1287   
                          ENDP

                  |L179.60|
                          DCD      tmeout
                  |L179.64|
                          DCD      ||.conststring||+0x10
                  |L179.68|
                          DCD      ||.conststring||+0x18
                  |L179.72|
                          DCD      ||.conststring||+0x2c
                  |L179.76|
                          DCD      ||.conststring||+0x30
                  |L179.80|
                          DCD      ||.conststring||+0x20
                  |L179.84|
                          DCD      ||.conststring||+0x4c
                  |L179.88|
                          DCD      ||.conststring||+0x70
                  |L179.92|
                          DCD      ||.conststring||+0x7a0

                          AREA ||i.clear2||, COMGROUP=clear2, CODE, READONLY, ALIGN=2

                  clear2 PROC
;;;1425   
;;;1426   __inline void clear2()
000000  4803              LDR      r0,|L185.16|
;;;1427   {
;;;1428   //    if (UART_S1_REG(UART2_BASE_PTR) & UART_S1_OR_MASK)
;;;1429   //    {
;;;1430   //      temp = UART_D_REG(UART2_BASE_PTR);
;;;1431   //    }
;;;1432   
;;;1433   	UART_S1_REG(UART2_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000002  7900              LDRB     r0,[r0,#4]
000004  2118              MOVS     r1,#0x18
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L185.16|
00000a  7108              STRB     r0,[r1,#4]
;;;1434   }	
00000c  4770              BX       lr
;;;1435   
                          ENDP

00000e  0000              DCW      0x0000
                  |L185.16|
                          DCD      0x4006c000

                          AREA ||i.savecursord||, COMGROUP=savecursord, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursord PROC
;;;1331   }	
;;;1332   	__inline void savecursord(){
000000  b508              PUSH     {r3,lr}
;;;1333   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4814              LDR      r0,|L191.84|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b14              LDR      r3,|L191.88|
000008  4a14              LDR      r2,|L191.92|
00000a  4915              LDR      r1,|L191.96|
00000c  9000              STR      r0,[sp,#0]
00000e  4815              LDR      r0,|L191.100|
000010  f7fffffe          BL       send_GSM
;;;1334   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b10              LDR      r3,|L191.88|
000018  4a10              LDR      r2,|L191.92|
00001a  4913              LDR      r1,|L191.104|
00001c  9000              STR      r0,[sp,#0]
00001e  4813              LDR      r0,|L191.108|
000020  f7fffffe          BL       send_GSM
;;;1335   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1336   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4810              LDR      r0,|L191.112|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1337   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",0,0,0);		
000032  2000              MOVS     r0,#0
000034  4603              MOV      r3,r0
000036  4602              MOV      r2,r0
000038  490e              LDR      r1,|L191.116|
00003a  9000              STR      r0,[sp,#0]
00003c  480c              LDR      r0,|L191.112|
00003e  f7fffffe          BL       __2sprintf
;;;1338   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000042  200a              MOVS     r0,#0xa
000044  4b04              LDR      r3,|L191.88|
000046  4a05              LDR      r2,|L191.92|
000048  4905              LDR      r1,|L191.96|
00004a  9000              STR      r0,[sp,#0]
00004c  4808              LDR      r0,|L191.112|
00004e  f7fffffe          BL       send_GSM
;;;1339   }	
000052  bd08              POP      {r3,pc}
;;;1340   		
                          ENDP

                  |L191.84|
                          DCD      tmeout
                  |L191.88|
                          DCD      ||.conststring||+0x10
                  |L191.92|
                          DCD      ||.conststring||+0x18
                  |L191.96|
                          DCD      ||.conststring||+0x2c
                  |L191.100|
                          DCD      ||.conststring||+0x7ac
                  |L191.104|
                          DCD      ||.conststring||+0x20
                  |L191.108|
                          DCD      ||.conststring||+0x7cc
                  |L191.112|
                          DCD      at_
                  |L191.116|
                          DCD      ||.conststring||+0x7f4

                          AREA ||i.read_ip_port||, COMGROUP=read_ip_port, CODE, READONLY, ALIGN=2

                  read_ip_port PROC
;;;1298   	
;;;1299   __inline void read_ip_port()
000000  b51c              PUSH     {r2-r4,lr}
;;;1300   {
;;;1301   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4811              LDR      r0,|L197.76|
000006  f7fffffe          BL       __aeabi_memclr
;;;1302   	//	memset(ip,0,strlen(ip));
;;;1303   		//memset(port,0,strlen(port));
;;;1304   		sprintf(at_, "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n");		
00000a  4911              LDR      r1,|L197.80|
00000c  480f              LDR      r0,|L197.76|
00000e  f7fffffe          BL       __2sprintf
;;;1305   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0f              LDR      r3,|L197.84|
000016  4a10              LDR      r2,|L197.88|
000018  4910              LDR      r1,|L197.92|
00001a  9000              STR      r0,[sp,#0]
00001c  480b              LDR      r0,|L197.76|
00001e  f7fffffe          BL       send_GSM
;;;1306   		parse_g(uart_string_gsm, 2,3, '|', '|',ip);
000022  480f              LDR      r0,|L197.96|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480c              LDR      r0,|L197.100|
000032  f7fffffe          BL       parse_g
;;;1307   		parse_g(uart_string_gsm, 4,5, '|', '|',port);
000036  480c              LDR      r0,|L197.104|
000038  217c              MOVS     r1,#0x7c
00003a  460b              MOV      r3,r1
00003c  2205              MOVS     r2,#5
00003e  9100              STR      r1,[sp,#0]
000040  9001              STR      r0,[sp,#4]
000042  2104              MOVS     r1,#4
000044  4807              LDR      r0,|L197.100|
000046  f7fffffe          BL       parse_g
;;;1308   	
;;;1309   }		
00004a  bd1c              POP      {r2-r4,pc}
;;;1310   	
                          ENDP

                  |L197.76|
                          DCD      at_
                  |L197.80|
                          DCD      ||.conststring||+0x838
                  |L197.84|
                          DCD      ||.conststring||+0x10
                  |L197.88|
                          DCD      ||.conststring||+0x18
                  |L197.92|
                          DCD      ||.conststring||+0x2c
                  |L197.96|
                          DCD      ||ip||
                  |L197.100|
                          DCD      uart_string_gsm
                  |L197.104|
                          DCD      port

                          AREA ||i.read_interval||, COMGROUP=read_interval, CODE, READONLY, ALIGN=2

                  read_interval PROC
;;;1310   	
;;;1311   __inline void read_interval()
000000  b51c              PUSH     {r2-r4,lr}
;;;1312   {
;;;1313   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480f              LDR      r0,|L203.68|
000006  f7fffffe          BL       __aeabi_memclr
;;;1314   		sprintf(at_, "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n");		
00000a  490f              LDR      r1,|L203.72|
00000c  480d              LDR      r0,|L203.68|
00000e  f7fffffe          BL       __2sprintf
;;;1315   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0d              LDR      r3,|L203.76|
000016  4a0e              LDR      r2,|L203.80|
000018  490e              LDR      r1,|L203.84|
00001a  9000              STR      r0,[sp,#0]
00001c  4809              LDR      r0,|L203.68|
00001e  f7fffffe          BL       send_GSM
;;;1316   		parse_g(uart_string_gsm, 2,3, '|', '|',interval);
000022  480d              LDR      r0,|L203.88|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480a              LDR      r0,|L203.92|
000032  f7fffffe          BL       parse_g
;;;1317   		int_erval=myAtoi(interval);		
000036  4808              LDR      r0,|L203.88|
000038  f7fffffe          BL       myAtoi
00003c  4908              LDR      r1,|L203.96|
00003e  6008              STR      r0,[r1,#0]  ; int_erval
;;;1318   
;;;1319   
;;;1320   }	
000040  bd1c              POP      {r2-r4,pc}
;;;1321   
                          ENDP

000042  0000              DCW      0x0000
                  |L203.68|
                          DCD      at_
                  |L203.72|
                          DCD      ||.conststring||+0x85c
                  |L203.76|
                          DCD      ||.conststring||+0x10
                  |L203.80|
                          DCD      ||.conststring||+0x18
                  |L203.84|
                          DCD      ||.conststring||+0x2c
                  |L203.88|
                          DCD      interval
                  |L203.92|
                          DCD      uart_string_gsm
                  |L203.96|
                          DCD      int_erval

                          AREA ||i.savecursor||, COMGROUP=savecursor, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursor PROC
;;;1323   
;;;1324   	__inline void savecursor(){
000000  b508              PUSH     {r3,lr}
;;;1325   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4816              LDR      r0,|L209.92|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b16              LDR      r3,|L209.96|
000008  4a16              LDR      r2,|L209.100|
00000a  4917              LDR      r1,|L209.104|
00000c  9000              STR      r0,[sp,#0]
00000e  4817              LDR      r0,|L209.108|
000010  f7fffffe          BL       send_GSM
;;;1326   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b12              LDR      r3,|L209.96|
000018  4a12              LDR      r2,|L209.100|
00001a  4915              LDR      r1,|L209.112|
00001c  9000              STR      r0,[sp,#0]
00001e  4815              LDR      r0,|L209.116|
000020  f7fffffe          BL       send_GSM
;;;1327   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1328   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4812              LDR      r0,|L209.120|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1329   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",times,k5,cursorvaluepr);		
000032  4812              LDR      r0,|L209.124|
000034  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
000036  9000              STR      r0,[sp,#0]
000038  4811              LDR      r0,|L209.128|
00003a  6803              LDR      r3,[r0,#0]  ; k5
00003c  4811              LDR      r0,|L209.132|
00003e  4912              LDR      r1,|L209.136|
000040  6802              LDR      r2,[r0,#0]  ; times
000042  480d              LDR      r0,|L209.120|
000044  f7fffffe          BL       __2sprintf
;;;1330   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000048  200a              MOVS     r0,#0xa
00004a  4b05              LDR      r3,|L209.96|
00004c  4a05              LDR      r2,|L209.100|
00004e  4906              LDR      r1,|L209.104|
000050  9000              STR      r0,[sp,#0]
000052  4809              LDR      r0,|L209.120|
000054  f7fffffe          BL       send_GSM
;;;1331   }	
000058  bd08              POP      {r3,pc}
;;;1332   	__inline void savecursord(){
                          ENDP

00005a  0000              DCW      0x0000
                  |L209.92|
                          DCD      tmeout
                  |L209.96|
                          DCD      ||.conststring||+0x10
                  |L209.100|
                          DCD      ||.conststring||+0x18
                  |L209.104|
                          DCD      ||.conststring||+0x2c
                  |L209.108|
                          DCD      ||.conststring||+0x7ac
                  |L209.112|
                          DCD      ||.conststring||+0x20
                  |L209.116|
                          DCD      ||.conststring||+0x7cc
                  |L209.120|
                          DCD      at_
                  |L209.124|
                          DCD      cursorvaluepr
                  |L209.128|
                          DCD      ||k5||
                  |L209.132|
                          DCD      times
                  |L209.136|
                          DCD      ||.conststring||+0x7f4

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L215.24|
                  |L215.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L215.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L215.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_vts_ver2_c_tout____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REVSH|
#line 462
|__asm___10_vts_ver2_c_tout____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
