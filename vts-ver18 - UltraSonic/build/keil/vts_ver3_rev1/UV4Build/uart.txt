; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\uart.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\uart.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -I"E:\bitbuck\vts-ver18 - UltraSonic\build\keil\vts_ver3_rev1\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\uart.crf ..\..\..\src\drivers\uart\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;31      */
;;;32     void uart_init (UART_MemMapPtr uartch, int sysclk, int baud)
000000  b5f8              PUSH     {r3-r7,lr}
;;;33     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;34         register uint16 sbr;
;;;35         uint8 temp;
;;;36      
;;;37           if (uartch == UART1_BASE_PTR)
000008  48b7              LDR      r0,|L1.744|
00000a  4284              CMP      r4,r0
00000c  d106              BNE      |L1.28|
;;;38             SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;
00000e  48b7              LDR      r0,|L1.748|
000010  6b40              LDR      r0,[r0,#0x34]
000012  14e1              ASRS     r1,r4,#19
000014  4308              ORRS     r0,r0,r1
000016  49b5              LDR      r1,|L1.748|
000018  6348              STR      r0,[r1,#0x34]
00001a  e006              B        |L1.42|
                  |L1.28|
;;;39           else
;;;40         	SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
00001c  48b3              LDR      r0,|L1.748|
00001e  6b40              LDR      r0,[r0,#0x34]
000020  2101              MOVS     r1,#1
000022  0309              LSLS     r1,r1,#12
000024  4308              ORRS     r0,r0,r1
000026  49b1              LDR      r1,|L1.748|
000028  6348              STR      r0,[r1,#0x34]
                  |L1.42|
;;;41           /* Make sure that the transmitter and receiver are disabled while we 
;;;42            * change settings.
;;;43            */
;;;44     			
;;;45     				NVIC_SetPriority(UART1_IRQn, 1);
00002a  2101              MOVS     r1,#1
00002c  200d              MOVS     r0,#0xd
00002e  f7fffffe          BL       __NVIC_SetPriority
;;;46     
;;;47     			
;;;48           UART_C2_REG(uartch) &= ~(UART_C2_TE_MASK
000032  78e0              LDRB     r0,[r4,#3]
000034  210c              MOVS     r1,#0xc
000036  4388              BICS     r0,r0,r1
000038  70e0              STRB     r0,[r4,#3]
;;;49     				| UART_C2_RE_MASK );
;;;50     			
;;;51     				      /* Configure the uart for 8-bit mode, no parity */
;;;52           UART_C1_REG(uartch) = 0;	/* We need all default settings, so entire register is cleared */
00003a  2000              MOVS     r0,#0
00003c  70a0              STRB     r0,[r4,#2]
;;;53         
;;;54           /* Calculate baud settings */
;;;55           sbr = (uint16)((sysclk*1000)/(baud * 16));
00003e  0139              LSLS     r1,r7,#4
000040  227d              MOVS     r2,#0x7d
000042  00d2              LSLS     r2,r2,#3
000044  4372              MULS     r2,r6,r2
000046  4610              MOV      r0,r2
000048  f7fffffe          BL       __aeabi_idivmod
00004c  b285              UXTH     r5,r0
;;;56     	//		sbr = sy/baud(OSR+1);
;;;57     			//sbr = 
;;;58             
;;;59           /* Save off the current value of the uartx_BDH except for the SBR field */
;;;60           temp = UART_BDH_REG(uartch) & ~(UART_BDH_SBR(0x1F));
00004e  7820              LDRB     r0,[r4,#0]
000050  0941              LSRS     r1,r0,#5
000052  0149              LSLS     r1,r1,#5
000054  9100              STR      r1,[sp,#0]
;;;61         
;;;62           UART_BDH_REG(uartch) = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
000056  201f              MOVS     r0,#0x1f
000058  0200              LSLS     r0,r0,#8
00005a  4028              ANDS     r0,r0,r5
00005c  1200              ASRS     r0,r0,#8
00005e  9900              LDR      r1,[sp,#0]
000060  4308              ORRS     r0,r0,r1
000062  7020              STRB     r0,[r4,#0]
;;;63           UART_BDL_REG(uartch) = (uint8)(sbr & UART_BDL_SBR_MASK);
000064  7065              STRB     r5,[r4,#1]
;;;64     			
;;;65     			
;;;66     			UART_C2_REG(uartch) |= UART_C2_RIE_MASK;			//newly added
000066  78e0              LDRB     r0,[r4,#3]
000068  2120              MOVS     r1,#0x20
00006a  4308              ORRS     r0,r0,r1
00006c  70e0              STRB     r0,[r4,#3]
;;;67     			
;;;68     
;;;69     		
;;;70     			enable_irq(UART1_IRQn);	
00006e  200d              MOVS     r0,#0xd
000070  2800              CMP      r0,#0
000072  db05              BLT      |L1.128|
000074  06c2              LSLS     r2,r0,#27
000076  0ed2              LSRS     r2,r2,#27
000078  2101              MOVS     r1,#1
00007a  4091              LSLS     r1,r1,r2
00007c  4a9c              LDR      r2,|L1.752|
00007e  6011              STR      r1,[r2,#0]
                  |L1.128|
000080  bf00              NOP      
;;;71     
;;;72     			EnableInterrupts;		//newly added
000082  b662              CPSIE    i
;;;73          		
;;;74     
;;;75     
;;;76     
;;;77     
;;;78           /* Enable receiver and transmitter */
;;;79           UART_C2_REG(uartch) |= (UART_C2_TE_MASK
000084  78e0              LDRB     r0,[r4,#3]
000086  210c              MOVS     r1,#0xc
000088  4308              ORRS     r0,r0,r1
00008a  70e0              STRB     r0,[r4,#3]
;;;80     	    		  | UART_C2_RE_MASK );
;;;81     		
;;;82     
;;;83     
;;;84     }
00008c  bdf8              POP      {r3-r7,pc}
;;;85     
                          ENDP

                  UART1_IRQHandler PROC
;;;86     void UART1_IRQHandler(void)
00008e  4896              LDR      r0,|L1.744|
;;;87     {//int32 counter=19999;
;;;88     
;;;89     		//	do
;;;90     				{
;;;91     			if( (UART_S1_REG(UART1_BASE_PTR) & UART_S1_RDRF_MASK))	
000090  7900              LDRB     r0,[r0,#4]
000092  2120              MOVS     r1,#0x20
000094  4008              ANDS     r0,r0,r1
000096  2800              CMP      r0,#0
000098  d00a              BEQ      |L1.176|
;;;92     			{uart_string_gsm[k2]=UART_D_REG(UART1_BASE_PTR);k2++;
00009a  4893              LDR      r0,|L1.744|
00009c  79c0              LDRB     r0,[r0,#7]
00009e  4995              LDR      r1,|L1.756|
0000a0  4a95              LDR      r2,|L1.760|
0000a2  6812              LDR      r2,[r2,#0]  ; k2
0000a4  5488              STRB     r0,[r1,r2]
0000a6  4894              LDR      r0,|L1.760|
0000a8  6800              LDR      r0,[r0,#0]  ; k2
0000aa  1c40              ADDS     r0,r0,#1
0000ac  4992              LDR      r1,|L1.760|
0000ae  6008              STR      r0,[r1,#0]  ; k2
                  |L1.176|
;;;93     			//	counter=19999;
;;;94     		//	if(k2>4990)k2=0;
;;;95     			}
;;;96     //				else{counter--;
;;;97     //						}
;;;98     			}//`while((UART_S1_REG(UART1_BASE_PTR) & UART_S1_RDRF_MASK)  || (counter>1));
;;;99     			
;;;100    			
;;;101    }
0000b0  4770              BX       lr
;;;102    
                          ENDP

                  UART2_IRQHandler PROC
;;;103    void UART2_IRQHandler(void)
0000b2  4770              BX       lr
;;;104    {
;;;105    //k=0;l=999999;
;;;106    //			do{
;;;107    //			if( uart_getchar_present (UART2_BASE_PTR))	
;;;108    //			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=9999;if(k>298){k=0;}}
;;;109    //				else{
;;;110    //							l--;if(l==10){}
;;;111    //						}
;;;112    //			}while(!((strstr(uart_string_gps, "OK\r\n"))
;;;113    //							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;114    //				        	||(strstr(uart_string_gps, "ERROR:"))
;;;115    //							));
;;;116    //printf("uart_string_gps -> %s",uart_string_gps);
;;;117    }
;;;118    
                          ENDP

                  uart_getchar PROC
;;;131     */
;;;132    char uart_getchar (UART_MemMapPtr channel)
0000b4  4601              MOV      r1,r0
;;;133    {
;;;134          /* Wait until character has been received */
;;;135          while (!((UART_S1_REG(channel) & UART_S1_RDRF_MASK)    ));//{timeouttt--;}
0000b6  bf00              NOP      
                  |L1.184|
0000b8  7908              LDRB     r0,[r1,#4]
0000ba  2220              MOVS     r2,#0x20
0000bc  4010              ANDS     r0,r0,r2
0000be  2800              CMP      r0,#0
0000c0  d0fa              BEQ      |L1.184|
;;;136     //   ||   (timeouttt < 1 ) 
;;;137          /* Return the 8-bit data from the receiver */
;;;138          return UART_D_REG(channel);
0000c2  79c8              LDRB     r0,[r1,#7]
;;;139    }
0000c4  4770              BX       lr
;;;140    /********************************************************************/
                          ENDP

                  uart_putchar PROC
;;;147     */ 
;;;148    void uart_putchar (UART_MemMapPtr channel, char ch)
0000c6  b510              PUSH     {r4,lr}
;;;149    {int to=19999;
0000c8  4a8c              LDR      r2,|L1.764|
;;;150          /* Wait until space is available in the FIFO */
;;;151          while(!((UART_S1_REG(channel) & UART_S1_TDRE_MASK)    ||  ( to <= 1 ))){to--;}
0000ca  e000              B        |L1.206|
                  |L1.204|
0000cc  1e52              SUBS     r2,r2,#1
                  |L1.206|
0000ce  7903              LDRB     r3,[r0,#4]
0000d0  2480              MOVS     r4,#0x80
0000d2  4023              ANDS     r3,r3,r4
0000d4  2b00              CMP      r3,#0
0000d6  d101              BNE      |L1.220|
0000d8  2a01              CMP      r2,#1
0000da  dcf7              BGT      |L1.204|
                  |L1.220|
;;;152        
;;;153          /* Send the character */
;;;154          UART_D_REG(channel) = (uint8)ch;
0000dc  71c1              STRB     r1,[r0,#7]
;;;155        
;;;156     }
0000de  bd10              POP      {r4,pc}
;;;157    /********************************************************************/
                          ENDP

                  uart_getchar_present PROC
;;;167     */
;;;168    int uart_getchar_present (UART_MemMapPtr channel)
0000e0  4601              MOV      r1,r0
;;;169    {
;;;170        return (UART_S1_REG(channel) & UART_S1_RDRF_MASK);
0000e2  7908              LDRB     r0,[r1,#4]
0000e4  2220              MOVS     r2,#0x20
0000e6  4010              ANDS     r0,r0,r2
;;;171    }
0000e8  4770              BX       lr
;;;172    /********************************************************************/
                          ENDP

                  uart0_init PROC
;;;190     */
;;;191    void uart0_init (UART0_MemMapPtr uartch, int sysclk, int baud)
0000ea  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;192    {
0000ec  b086              SUB      sp,sp,#0x18
;;;193        uint8 i;
;;;194        uint32 calculated_baud = 0;
0000ee  bf00              NOP      
;;;195        uint32 baud_diff = 0;
0000f0  2000              MOVS     r0,#0
0000f2  9005              STR      r0,[sp,#0x14]
;;;196        uint32 osr_val = 0;
0000f4  9004              STR      r0,[sp,#0x10]
;;;197        uint32 sbr_val, uart0clk;
;;;198        uint32 baud_rate;
;;;199        uint32 reg_temp = 0;
0000f6  2500              MOVS     r5,#0
;;;200        uint32 temp = 0;
0000f8  9001              STR      r0,[sp,#4]
;;;201        
;;;202        SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
0000fa  487c              LDR      r0,|L1.748|
0000fc  6b40              LDR      r0,[r0,#0x34]
0000fe  2101              MOVS     r1,#1
000100  0289              LSLS     r1,r1,#10
000102  4308              ORRS     r0,r0,r1
000104  4979              LDR      r1,|L1.748|
000106  6348              STR      r0,[r1,#0x34]
;;;203        
;;;204        // Disable UART0 before changing registers
;;;205        UART0_C2 &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
000108  487d              LDR      r0,|L1.768|
00010a  78c0              LDRB     r0,[r0,#3]
00010c  210c              MOVS     r1,#0xc
00010e  4388              BICS     r0,r0,r1
000110  497b              LDR      r1,|L1.768|
000112  70c8              STRB     r0,[r1,#3]
;;;206    	
;;;207    	
;;;208    		UART0_S2 |= UART_S2_RXINV_MASK;
000114  4608              MOV      r0,r1
000116  7940              LDRB     r0,[r0,#5]
000118  2110              MOVS     r1,#0x10
00011a  4308              ORRS     r0,r0,r1
00011c  4978              LDR      r1,|L1.768|
00011e  7148              STRB     r0,[r1,#5]
;;;209    
;;;210      
;;;211        // Verify that a valid clock value has been passed to the function 
;;;212        if ((sysclk > 50000) || (sysclk < 32))
000120  4978              LDR      r1,|L1.772|
000122  9807              LDR      r0,[sp,#0x1c]
000124  4288              CMP      r0,r1
000126  dc02              BGT      |L1.302|
000128  9807              LDR      r0,[sp,#0x1c]
00012a  2820              CMP      r0,#0x20
00012c  da0c              BGE      |L1.328|
                  |L1.302|
;;;213        {
;;;214            sysclk = 0;
00012e  bf00              NOP      
;;;215            reg_temp = SIM_SOPT2;
000130  486e              LDR      r0,|L1.748|
000132  6845              LDR      r5,[r0,#4]
;;;216            reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
000134  2103              MOVS     r1,#3
000136  0689              LSLS     r1,r1,#26
000138  4628              MOV      r0,r5
00013a  4388              BICS     r0,r0,r1
00013c  4605              MOV      r5,r0
;;;217            reg_temp |= SIM_SOPT2_UART0SRC(0);
00013e  bf00              NOP      
;;;218            SIM_SOPT2 = reg_temp;
000140  486a              LDR      r0,|L1.748|
000142  6045              STR      r5,[r0,#4]
;;;219    			
;;;220    			  // Enter inifinite loop because the 
;;;221    			  // the desired system clock value is 
;;;222    			  // invalid!!
;;;223    			  while(1)
000144  bf00              NOP      
                  |L1.326|
000146  e7fe              B        |L1.326|
                  |L1.328|
;;;224    				{}
;;;225        }
;;;226        
;;;227        // Verify that a valid value has been passed to TERM_PORT_NUM and update
;;;228        // uart0_clk_hz accordingly.  Write 0 to TERM_PORT_NUM if an invalid 
;;;229        // value has been passed.  
;;;230        if (TERM_PORT_NUM != 0)
;;;231        {
;;;232            reg_temp = SIM_SOPT2;
;;;233            reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
;;;234            reg_temp |= SIM_SOPT2_UART0SRC(0);
;;;235            SIM_SOPT2 = reg_temp;
;;;236    			
;;;237    			  // Enter inifinite loop because the 
;;;238    			  // the desired terminal port number 
;;;239    			  // invalid!!
;;;240    			  while(1)
;;;241    				{}
;;;242        }
;;;243        
;;;244        
;;;245        
;;;246        // Initialize baud rate
;;;247        baud_rate = baud;
000148  9c08              LDR      r4,[sp,#0x20]
;;;248        
;;;249        // Change units to Hz
;;;250        uart0clk = sysclk * 1000;
00014a  217d              MOVS     r1,#0x7d
00014c  00c9              LSLS     r1,r1,#3
00014e  9807              LDR      r0,[sp,#0x1c]
000150  4348              MULS     r0,r1,r0
000152  9002              STR      r0,[sp,#8]
;;;251        // Calculate the first baud rate using the lowest OSR value possible.  
;;;252        i = 4;
000154  2604              MOVS     r6,#4
;;;253        sbr_val = (uint32)(uart0clk/(baud_rate * i));
000156  4620              MOV      r0,r4
000158  4370              MULS     r0,r6,r0
00015a  4601              MOV      r1,r0
00015c  9802              LDR      r0,[sp,#8]
00015e  f7fffffe          BL       __aeabi_uidivmod
000162  9003              STR      r0,[sp,#0xc]
;;;254        calculated_baud = (uart0clk / (i * sbr_val));
000164  9803              LDR      r0,[sp,#0xc]
000166  4370              MULS     r0,r6,r0
000168  4601              MOV      r1,r0
00016a  9802              LDR      r0,[sp,#8]
00016c  f7fffffe          BL       __aeabi_uidivmod
000170  4607              MOV      r7,r0
;;;255            
;;;256        if (calculated_baud > baud_rate)
000172  42a7              CMP      r7,r4
000174  d902              BLS      |L1.380|
;;;257            baud_diff = calculated_baud - baud_rate;
000176  1b38              SUBS     r0,r7,r4
000178  9005              STR      r0,[sp,#0x14]
00017a  e001              B        |L1.384|
                  |L1.380|
;;;258        else
;;;259            baud_diff = baud_rate - calculated_baud;
00017c  1be0              SUBS     r0,r4,r7
00017e  9005              STR      r0,[sp,#0x14]
                  |L1.384|
;;;260        
;;;261        osr_val = i;
000180  9604              STR      r6,[sp,#0x10]
;;;262            
;;;263        // Select the best OSR value
;;;264        for (i = 5; i <= 32; i++)
000182  2605              MOVS     r6,#5
000184  e01d              B        |L1.450|
                  |L1.390|
;;;265        {
;;;266            sbr_val = (uint32)(uart0clk/(baud_rate * i));
000186  4620              MOV      r0,r4
000188  4370              MULS     r0,r6,r0
00018a  4601              MOV      r1,r0
00018c  9802              LDR      r0,[sp,#8]
00018e  f7fffffe          BL       __aeabi_uidivmod
000192  9003              STR      r0,[sp,#0xc]
;;;267            calculated_baud = (uart0clk / (i * sbr_val));
000194  9803              LDR      r0,[sp,#0xc]
000196  4370              MULS     r0,r6,r0
000198  4601              MOV      r1,r0
00019a  9802              LDR      r0,[sp,#8]
00019c  f7fffffe          BL       __aeabi_uidivmod
0001a0  4607              MOV      r7,r0
;;;268            
;;;269            if (calculated_baud > baud_rate)
0001a2  42a7              CMP      r7,r4
0001a4  d902              BLS      |L1.428|
;;;270                temp = calculated_baud - baud_rate;
0001a6  1b38              SUBS     r0,r7,r4
0001a8  9001              STR      r0,[sp,#4]
0001aa  e001              B        |L1.432|
                  |L1.428|
;;;271            else
;;;272                temp = baud_rate - calculated_baud;
0001ac  1be0              SUBS     r0,r4,r7
0001ae  9001              STR      r0,[sp,#4]
                  |L1.432|
;;;273            
;;;274            if (temp <= baud_diff)
0001b0  9905              LDR      r1,[sp,#0x14]
0001b2  9801              LDR      r0,[sp,#4]
0001b4  4288              CMP      r0,r1
0001b6  d802              BHI      |L1.446|
;;;275            {
;;;276                baud_diff = temp;
0001b8  9801              LDR      r0,[sp,#4]
0001ba  9005              STR      r0,[sp,#0x14]
;;;277                osr_val = i; 
0001bc  9604              STR      r6,[sp,#0x10]
                  |L1.446|
0001be  1c70              ADDS     r0,r6,#1              ;264
0001c0  b2c6              UXTB     r6,r0                 ;264
                  |L1.450|
0001c2  2e20              CMP      r6,#0x20              ;264
0001c4  dddf              BLE      |L1.390|
;;;278            }
;;;279        }
;;;280        
;;;281        if (baud_diff < ((baud_rate / 100) * 3))
0001c6  2164              MOVS     r1,#0x64
0001c8  4620              MOV      r0,r4
0001ca  f7fffffe          BL       __aeabi_uidivmod
0001ce  0041              LSLS     r1,r0,#1
0001d0  1841              ADDS     r1,r0,r1
0001d2  9805              LDR      r0,[sp,#0x14]
0001d4  4281              CMP      r1,r0
0001d6  d935              BLS      |L1.580|
;;;282        {
;;;283            // If the OSR is between 4x and 8x then both
;;;284            // edge sampling MUST be turned on.  
;;;285            if ((osr_val >3) && (osr_val < 9))
0001d8  9804              LDR      r0,[sp,#0x10]
0001da  2803              CMP      r0,#3
0001dc  d908              BLS      |L1.496|
0001de  9804              LDR      r0,[sp,#0x10]
0001e0  2809              CMP      r0,#9
0001e2  d205              BCS      |L1.496|
;;;286                UART0_C5|= UART0_C5_BOTHEDGE_MASK;
0001e4  4846              LDR      r0,|L1.768|
0001e6  7ac0              LDRB     r0,[r0,#0xb]
0001e8  2102              MOVS     r1,#2
0001ea  4308              ORRS     r0,r0,r1
0001ec  4944              LDR      r1,|L1.768|
0001ee  72c8              STRB     r0,[r1,#0xb]
                  |L1.496|
;;;287            
;;;288            // Setup OSR value 
;;;289            reg_temp = UART0_C4;
0001f0  4843              LDR      r0,|L1.768|
0001f2  7a85              LDRB     r5,[r0,#0xa]
;;;290            reg_temp &= ~UART0_C4_OSR_MASK;
0001f4  096d              LSRS     r5,r5,#5
0001f6  016d              LSLS     r5,r5,#5
;;;291            reg_temp |= UART0_C4_OSR(osr_val-1);
0001f8  9804              LDR      r0,[sp,#0x10]
0001fa  1e40              SUBS     r0,r0,#1
0001fc  06c0              LSLS     r0,r0,#27
0001fe  0ec0              LSRS     r0,r0,#27
000200  4305              ORRS     r5,r5,r0
;;;292        
;;;293            // Write reg_temp to C4 register
;;;294            UART0_C4 = reg_temp;
000202  483f              LDR      r0,|L1.768|
000204  7285              STRB     r5,[r0,#0xa]
;;;295            
;;;296            reg_temp = (reg_temp & UART0_C4_OSR_MASK) + 1;
000206  06e8              LSLS     r0,r5,#27
000208  0ec0              LSRS     r0,r0,#27
00020a  1c45              ADDS     r5,r0,#1
;;;297            sbr_val = (uint32)((uart0clk)/(baud_rate * (reg_temp)));
00020c  4620              MOV      r0,r4
00020e  4368              MULS     r0,r5,r0
000210  4601              MOV      r1,r0
000212  9802              LDR      r0,[sp,#8]
000214  f7fffffe          BL       __aeabi_uidivmod
000218  9003              STR      r0,[sp,#0xc]
;;;298            
;;;299             /* Save off the current value of the uartx_BDH except for the SBR field */
;;;300            reg_temp = UART0_BDH & ~(UART0_BDH_SBR(0x1F));
00021a  4839              LDR      r0,|L1.768|
00021c  7800              LDRB     r0,[r0,#0]
00021e  0945              LSRS     r5,r0,#5
000220  016d              LSLS     r5,r5,#5
;;;301       
;;;302            UART0_BDH = reg_temp |  UART0_BDH_SBR(((sbr_val & 0x1F00) >> 8));
000222  211f              MOVS     r1,#0x1f
000224  0209              LSLS     r1,r1,#8
000226  9803              LDR      r0,[sp,#0xc]
000228  4008              ANDS     r0,r0,r1
00022a  0a00              LSRS     r0,r0,#8
00022c  4328              ORRS     r0,r0,r5
00022e  4934              LDR      r1,|L1.768|
000230  7008              STRB     r0,[r1,#0]
;;;303            UART0_BDL = (uint8)(sbr_val & UART0_BDL_SBR_MASK);
000232  9803              LDR      r0,[sp,#0xc]
000234  7048              STRB     r0,[r1,#1]
;;;304            
;;;305            /* Enable receiver and transmitter */
;;;306            UART0_C2 |= (UART0_C2_TE_MASK
000236  4608              MOV      r0,r1
000238  78c0              LDRB     r0,[r0,#3]
00023a  210c              MOVS     r1,#0xc
00023c  4308              ORRS     r0,r0,r1
00023e  4930              LDR      r1,|L1.768|
000240  70c8              STRB     r0,[r1,#3]
000242  e001              B        |L1.584|
                  |L1.580|
;;;307                        | UART0_C2_RE_MASK );
;;;308        }
;;;309        else
;;;310        {
;;;311            // Unacceptable baud rate difference
;;;312            // More than 3% difference!!
;;;313            // Enter infinite loop!
;;;314            while(1)
000244  bf00              NOP      
                  |L1.582|
000246  e7fe              B        |L1.582|
                  |L1.584|
;;;315    	{}
;;;316        }					
;;;317        
;;;318    }
000248  b009              ADD      sp,sp,#0x24
00024a  bdf0              POP      {r4-r7,pc}
;;;319    /********************************************************************/
                          ENDP

                  uart0_getchar PROC
;;;328     */
;;;329    char uart0_getchar (UART0_MemMapPtr channel)
00024c  4601              MOV      r1,r0
;;;330    {
;;;331          /* Wait until character has been received */
;;;332          while (!(UART0_S1_REG(channel) & UART0_S1_RDRF_MASK));
00024e  bf00              NOP      
                  |L1.592|
000250  7908              LDRB     r0,[r1,#4]
000252  2220              MOVS     r2,#0x20
000254  4010              ANDS     r0,r0,r2
000256  2800              CMP      r0,#0
000258  d0fa              BEQ      |L1.592|
;;;333        
;;;334          /* Return the 8-bit data from the receiver */
;;;335          return UART0_D_REG(channel);
00025a  79c8              LDRB     r0,[r1,#7]
;;;336    }
00025c  4770              BX       lr
;;;337    /********************************************************************/
                          ENDP

                  uart0_putchar PROC
;;;344     */ 
;;;345    void uart0_putchar (UART0_MemMapPtr channel, char ch)
00025e  bf00              NOP      
                  |L1.608|
;;;346    {
;;;347          /* Wait until space is available in the FIFO */
;;;348          while(!(UART0_S1_REG(channel) & UART0_S1_TDRE_MASK));
000260  7902              LDRB     r2,[r0,#4]
000262  2380              MOVS     r3,#0x80
000264  401a              ANDS     r2,r2,r3
000266  2a00              CMP      r2,#0
000268  d0fa              BEQ      |L1.608|
;;;349        
;;;350          /* Send the character */
;;;351          UART0_D_REG(channel) = (uint8)ch;
00026a  71c1              STRB     r1,[r0,#7]
;;;352        
;;;353     }
00026c  4770              BX       lr
;;;354    /********************************************************************/
                          ENDP

                  uart0_getchar_present PROC
;;;364     */
;;;365    int uart0_getchar_present (UART0_MemMapPtr channel)
00026e  4601              MOV      r1,r0
;;;366    {
;;;367        return (UART0_S1_REG(channel) & UART0_S1_RDRF_MASK);
000270  7908              LDRB     r0,[r1,#4]
000272  2220              MOVS     r2,#0x20
000274  4010              ANDS     r0,r0,r2
;;;368    }
000276  4770              BX       lr
;;;369    /********************************************************************/
                          ENDP

                  __NVIC_SetPriority PROC
;;;824     */
;;;825    __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000278  b510              PUSH     {r4,lr}
;;;826    {
;;;827      if ((int32_t)(IRQn) >= 0)
00027a  2800              CMP      r0,#0
00027c  db19              BLT      |L1.690|
;;;828      {
;;;829        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
00027e  4a1c              LDR      r2,|L1.752|
000280  2303              MOVS     r3,#3
000282  021b              LSLS     r3,r3,#8
000284  18d2              ADDS     r2,r2,r3
000286  0883              LSRS     r3,r0,#2
000288  009b              LSLS     r3,r3,#2
00028a  58d2              LDR      r2,[r2,r3]
00028c  0783              LSLS     r3,r0,#30
00028e  0edc              LSRS     r4,r3,#27
000290  23ff              MOVS     r3,#0xff
000292  40a3              LSLS     r3,r3,r4
000294  439a              BICS     r2,r2,r3
000296  078b              LSLS     r3,r1,#30
000298  0e1b              LSRS     r3,r3,#24
00029a  0784              LSLS     r4,r0,#30
00029c  0ee4              LSRS     r4,r4,#27
00029e  40a3              LSLS     r3,r3,r4
0002a0  431a              ORRS     r2,r2,r3
0002a2  4b13              LDR      r3,|L1.752|
0002a4  2403              MOVS     r4,#3
0002a6  0224              LSLS     r4,r4,#8
0002a8  191b              ADDS     r3,r3,r4
0002aa  0884              LSRS     r4,r0,#2
0002ac  00a4              LSLS     r4,r4,#2
0002ae  511a              STR      r2,[r3,r4]
0002b0  e018              B        |L1.740|
                  |L1.690|
;;;830           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;831      }
;;;832      else
;;;833      {
;;;834        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
0002b2  4a15              LDR      r2,|L1.776|
0002b4  0703              LSLS     r3,r0,#28
0002b6  0f1b              LSRS     r3,r3,#28
0002b8  3b08              SUBS     r3,r3,#8
0002ba  089b              LSRS     r3,r3,#2
0002bc  009b              LSLS     r3,r3,#2
0002be  58d2              LDR      r2,[r2,r3]
0002c0  0783              LSLS     r3,r0,#30
0002c2  0edc              LSRS     r4,r3,#27
0002c4  23ff              MOVS     r3,#0xff
0002c6  40a3              LSLS     r3,r3,r4
0002c8  439a              BICS     r2,r2,r3
0002ca  078b              LSLS     r3,r1,#30
0002cc  0e1b              LSRS     r3,r3,#24
0002ce  0784              LSLS     r4,r0,#30
0002d0  0ee4              LSRS     r4,r4,#27
0002d2  40a3              LSLS     r3,r3,r4
0002d4  431a              ORRS     r2,r2,r3
0002d6  4b0c              LDR      r3,|L1.776|
0002d8  0704              LSLS     r4,r0,#28
0002da  0f24              LSRS     r4,r4,#28
0002dc  3c08              SUBS     r4,r4,#8
0002de  08a4              LSRS     r4,r4,#2
0002e0  00a4              LSLS     r4,r4,#2
0002e2  511a              STR      r2,[r3,r4]
                  |L1.740|
;;;835           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;836      }
;;;837    }
0002e4  bd10              POP      {r4,pc}
;;;838    
                          ENDP

0002e6  0000              DCW      0x0000
                  |L1.744|
                          DCD      0x4006b000
                  |L1.748|
                          DCD      0x40048000
                  |L1.752|
                          DCD      0xe000e100
                  |L1.756|
                          DCD      uart_string_gsm
                  |L1.760|
                          DCD      ||k2||
                  |L1.764|
                          DCD      0x00004e1f
                  |L1.768|
                          DCD      0x4006a000
                  |L1.772|
                          DCD      0x0000c350
                  |L1.776|
                          DCD      0xe000ed1c

                          AREA ||.data||, DATA, ALIGN=2

                  test
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\uart\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f64bdfb6____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f64bdfb6____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f64bdfb6____REVSH|
#line 462
|__asm___6_uart_c_f64bdfb6____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
