; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -IF:\vts-ver18\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_SD PROC
;;;54     
;;;55     void send_SD(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;56     {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;57     	clear();
00000c  f7fffffe          BL       clear
;;;58     	tout=0;
000010  2000              MOVS     r0,#0
000012  49fd              LDR      r1,|L1.1032|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;59     		memset(uart_string_gsm,0,5000);
000016  49fd              LDR      r1,|L1.1036|
000018  48fd              LDR      r0,|L1.1040|
00001a  f7fffffe          BL       __aeabi_memclr
;;;60     		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  49fc              LDR      r1,|L1.1044|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;61     		clear();
000024  f7fffffe          BL       clear
;;;62     		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;63     		
;;;64     		delay(10);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       delay
;;;65     		uart_putchar(UART1_BASE_PTR,'\r');//uart_putchar(UART1_BASE_PTR,'\r');
000034  210d              MOVS     r1,#0xd
000036  48f8              LDR      r0,|L1.1048|
000038  f7fffffe          BL       uart_putchar
;;;66     	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;67     		do
00003c  bf00              NOP      
                  |L1.62|
;;;68     		{
;;;69     			
;;;70     //					time111--;
;;;71     //				  timeout222--;
;;;72     
;;;73     			
;;;74     	cond122=strstr(uart_string_gsm, responseA);
00003e  48f4              LDR      r0,|L1.1040|
000040  9902              LDR      r1,[sp,#8]
000042  f7fffffe          BL       strstr
000046  49f5              LDR      r1,|L1.1052|
000048  6008              STR      r0,[r1,#0]  ; cond122
;;;75     	cond123=strstr(uart_string_gsm, responseB);
00004a  4621              MOV      r1,r4
00004c  48f0              LDR      r0,|L1.1040|
00004e  f7fffffe          BL       strstr
000052  49f3              LDR      r1,|L1.1056|
000054  6008              STR      r0,[r1,#0]  ; cond123
;;;76       cond124=strstr(uart_string_gsm, responseC);
000056  4629              MOV      r1,r5
000058  48ed              LDR      r0,|L1.1040|
00005a  f7fffffe          BL       strstr
00005e  49f1              LDR      r1,|L1.1060|
000060  6008              STR      r0,[r1,#0]  ; cond124
;;;77     	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
000062  48ee              LDR      r0,|L1.1052|
000064  6800              LDR      r0,[r0,#0]  ; cond122
000066  2800              CMP      r0,#0
000068  d10b              BNE      |L1.130|
00006a  48ed              LDR      r0,|L1.1056|
00006c  6800              LDR      r0,[r0,#0]  ; cond123
00006e  2800              CMP      r0,#0
000070  d107              BNE      |L1.130|
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]  ; cond124
000076  2800              CMP      r0,#0
000078  d103              BNE      |L1.130|
00007a  48e3              LDR      r0,|L1.1032|
00007c  6800              LDR      r0,[r0,#0]  ; tout
00007e  42b0              CMP      r0,r6
000080  dd01              BLE      |L1.134|
                  |L1.130|
000082  2001              MOVS     r0,#1
000084  e000              B        |L1.136|
                  |L1.134|
000086  2000              MOVS     r0,#0
                  |L1.136|
000088  49e7              LDR      r1,|L1.1064|
00008a  7008              STRB     r0,[r1,#0]
;;;78     			
;;;79     		}while (!cond121);
00008c  4608              MOV      r0,r1
00008e  7800              LDRB     r0,[r0,#0]  ; cond121
000090  2800              CMP      r0,#0
000092  d0d4              BEQ      |L1.62|
;;;80     		clear();
000094  f7fffffe          BL       clear
;;;81     		if(tout>timeout){
000098  48db              LDR      r0,|L1.1032|
00009a  6800              LDR      r0,[r0,#0]  ; tout
00009c  42b0              CMP      r0,r6
00009e  dd17              BLE      |L1.208|
;;;82     			uart_putchar(UART1_BASE_PTR,'\r');
0000a0  210d              MOVS     r1,#0xd
0000a2  48dd              LDR      r0,|L1.1048|
0000a4  f7fffffe          BL       uart_putchar
;;;83     		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000a8  210a              MOVS     r1,#0xa
0000aa  48db              LDR      r0,|L1.1048|
0000ac  f7fffffe          BL       uart_putchar
0000b0  211a              MOVS     r1,#0x1a
0000b2  48d9              LDR      r0,|L1.1048|
0000b4  f7fffffe          BL       uart_putchar
;;;84     		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000b8  211a              MOVS     r1,#0x1a
0000ba  48d7              LDR      r0,|L1.1048|
0000bc  f7fffffe          BL       uart_putchar
0000c0  210d              MOVS     r1,#0xd
0000c2  48d5              LDR      r0,|L1.1048|
0000c4  f7fffffe          BL       uart_putchar
;;;85     		uart_putchar(UART1_BASE_PTR,'\n');}
0000c8  210a              MOVS     r1,#0xa
0000ca  48d3              LDR      r0,|L1.1048|
0000cc  f7fffffe          BL       uart_putchar
                  |L1.208|
;;;86     		//return;
;;;87     //		return uart_string_gsm;
;;;88     
;;;89     }
0000d0  b005              ADD      sp,sp,#0x14
0000d2  bdf0              POP      {r4-r7,pc}
;;;90     
                          ENDP

                  mystrstr PROC
;;;59     
;;;60     char mystrstr(char* str1, char character)
0000d4  b570              PUSH     {r4-r6,lr}
;;;61     {
0000d6  4604              MOV      r4,r0
0000d8  460d              MOV      r5,r1
;;;62     	sz=strlen(str1);
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       strlen
0000e0  49d2              LDR      r1,|L1.1068|
0000e2  6008              STR      r0,[r1,#0]  ; sz
;;;63     	for(cn=0;cn<=sz;cn++)
0000e4  2000              MOVS     r0,#0
0000e6  49d2              LDR      r1,|L1.1072|
0000e8  6008              STR      r0,[r1,#0]  ; cn
0000ea  e00b              B        |L1.260|
                  |L1.236|
;;;64     	{if(str1[cn] == character)
0000ec  48d0              LDR      r0,|L1.1072|
0000ee  6800              LDR      r0,[r0,#0]  ; cn
0000f0  5c20              LDRB     r0,[r4,r0]
0000f2  42a8              CMP      r0,r5
0000f4  d101              BNE      |L1.250|
;;;65     		{return 1;}
0000f6  2001              MOVS     r0,#1
                  |L1.248|
;;;66     	}
;;;67     	return 0;
;;;68     }
0000f8  bd70              POP      {r4-r6,pc}
                  |L1.250|
0000fa  48cd              LDR      r0,|L1.1072|
0000fc  6800              LDR      r0,[r0,#0]            ;63  ; cn
0000fe  1c40              ADDS     r0,r0,#1              ;63
000100  49cb              LDR      r1,|L1.1072|
000102  6008              STR      r0,[r1,#0]            ;63  ; cn
                  |L1.260|
000104  48ca              LDR      r0,|L1.1072|
000106  6800              LDR      r0,[r0,#0]            ;63  ; cn
000108  49c8              LDR      r1,|L1.1068|
00010a  6809              LDR      r1,[r1,#0]            ;63  ; sz
00010c  4288              CMP      r0,r1                 ;63
00010e  dded              BLE      |L1.236|
000110  2000              MOVS     r0,#0                 ;67
000112  e7f1              B        |L1.248|
;;;69     
                          ENDP

                  LED_state2 PROC
;;;240    
;;;241    void LED_state2(void)
000114  b500              PUSH     {lr}
;;;242    {
;;;243    if(sleep_flag == 1)
000116  48c7              LDR      r0,|L1.1076|
000118  6800              LDR      r0,[r0,#0]  ; sleep_flag
00011a  2801              CMP      r0,#1
00011c  d102              BNE      |L1.292|
;;;244    {stateCount=99;
00011e  2063              MOVS     r0,#0x63
000120  49c5              LDR      r1,|L1.1080|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;245    }	
;;;246    			
;;;247    	switch(stateCount){
000124  48c4              LDR      r0,|L1.1080|
000126  7800              LDRB     r0,[r0,#0]  ; stateCount
000128  0003              MOVS     r3,r0
00012a  f7fffffe          BL       __ARM_common_switch8
00012e  0604              DCB      0x06,0x04
000130  0f1a2530          DCB      0x0f,0x1a,0x25,0x30
000134  3b46              DCB      0x3b,0x46
;;;248    	
;;;249    
;;;250                case 0:     //Red
;;;251                       RED_ON;
000136  2001              MOVS     r0,#1
000138  0740              LSLS     r0,r0,#29
00013a  49c0              LDR      r1,|L1.1084|
00013c  6088              STR      r0,[r1,#8]
;;;252                       GREEN_OFF;
00013e  0080              LSLS     r0,r0,#2
000140  6048              STR      r0,[r1,#4]
;;;253                       BLUE_OFF;
000142  2020              MOVS     r0,#0x20
000144  49bd              LDR      r1,|L1.1084|
000146  3940              SUBS     r1,r1,#0x40
000148  6048              STR      r0,[r1,#4]
;;;254                       break;
00014a  e044              B        |L1.470|
;;;255    
;;;256                case 1:	//Yellow
;;;257    		               RED_ON;
00014c  2001              MOVS     r0,#1
00014e  0740              LSLS     r0,r0,#29
000150  49ba              LDR      r1,|L1.1084|
000152  6088              STR      r0,[r1,#8]
;;;258    		               GREEN_ON;
000154  0080              LSLS     r0,r0,#2
000156  6088              STR      r0,[r1,#8]
;;;259    		               BLUE_OFF;
000158  2020              MOVS     r0,#0x20
00015a  49b8              LDR      r1,|L1.1084|
00015c  3940              SUBS     r1,r1,#0x40
00015e  6048              STR      r0,[r1,#4]
;;;260    		               break;
000160  e039              B        |L1.470|
;;;261    				
;;;262                case 2:	//Green
;;;263    		               RED_OFF;
000162  2001              MOVS     r0,#1
000164  0740              LSLS     r0,r0,#29
000166  49b5              LDR      r1,|L1.1084|
000168  6048              STR      r0,[r1,#4]
;;;264    		               GREEN_ON;
00016a  0080              LSLS     r0,r0,#2
00016c  6088              STR      r0,[r1,#8]
;;;265    		               BLUE_OFF;
00016e  2020              MOVS     r0,#0x20
000170  49b2              LDR      r1,|L1.1084|
000172  3940              SUBS     r1,r1,#0x40
000174  6048              STR      r0,[r1,#4]
;;;266    		               break;
000176  e02e              B        |L1.470|
;;;267    				
;;;268                case 3:	//Blue
;;;269    		               RED_OFF;
000178  2001              MOVS     r0,#1
00017a  0740              LSLS     r0,r0,#29
00017c  49af              LDR      r1,|L1.1084|
00017e  6048              STR      r0,[r1,#4]
;;;270    		               GREEN_OFF;
000180  0080              LSLS     r0,r0,#2
000182  6048              STR      r0,[r1,#4]
;;;271    		               BLUE_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L1.1084|
000188  3940              SUBS     r1,r1,#0x40
00018a  6088              STR      r0,[r1,#8]
;;;272    		               break;
00018c  e023              B        |L1.470|
;;;273    				
;;;274                case 4:	//Violet
;;;275    		               RED_ON;
00018e  2001              MOVS     r0,#1
000190  0740              LSLS     r0,r0,#29
000192  49aa              LDR      r1,|L1.1084|
000194  6088              STR      r0,[r1,#8]
;;;276    		               GREEN_OFF;
000196  0080              LSLS     r0,r0,#2
000198  6048              STR      r0,[r1,#4]
;;;277    		               BLUE_ON;
00019a  2020              MOVS     r0,#0x20
00019c  49a7              LDR      r1,|L1.1084|
00019e  3940              SUBS     r1,r1,#0x40
0001a0  6088              STR      r0,[r1,#8]
;;;278    		               break;
0001a2  e018              B        |L1.470|
;;;279    				
;;;280                case 5:	//White
;;;281    		              RED_ON;
0001a4  2001              MOVS     r0,#1
0001a6  0740              LSLS     r0,r0,#29
0001a8  49a4              LDR      r1,|L1.1084|
0001aa  6088              STR      r0,[r1,#8]
;;;282    		              GREEN_ON;
0001ac  0080              LSLS     r0,r0,#2
0001ae  6088              STR      r0,[r1,#8]
;;;283    		              BLUE_ON;
0001b0  2020              MOVS     r0,#0x20
0001b2  49a2              LDR      r1,|L1.1084|
0001b4  3940              SUBS     r1,r1,#0x40
0001b6  6088              STR      r0,[r1,#8]
;;;284    		              break;
0001b8  e00d              B        |L1.470|
;;;285    				
;;;286                default:	//Red
;;;287    
;;;288    		              RED_OFF;
0001ba  2001              MOVS     r0,#1
0001bc  0740              LSLS     r0,r0,#29
0001be  499f              LDR      r1,|L1.1084|
0001c0  6048              STR      r0,[r1,#4]
;;;289    		              GREEN_OFF;
0001c2  0080              LSLS     r0,r0,#2
0001c4  6048              STR      r0,[r1,#4]
;;;290    		              BLUE_OFF;
0001c6  2020              MOVS     r0,#0x20
0001c8  499c              LDR      r1,|L1.1084|
0001ca  3940              SUBS     r1,r1,#0x40
0001cc  6048              STR      r0,[r1,#4]
;;;291    		              stateCount = 0;	//Reset state counter
0001ce  2000              MOVS     r0,#0
0001d0  4999              LDR      r1,|L1.1080|
0001d2  7008              STRB     r0,[r1,#0]
;;;292    			      break;
0001d4  bf00              NOP      
                  |L1.470|
0001d6  bf00              NOP                            ;254
;;;293    
;;;294        }
;;;295    	
;;;296    }
0001d8  bd00              POP      {pc}
;;;297    
                          ENDP

                  parse_gsm PROC
;;;1569   
;;;1570   void parse_gsm(char *str, int first, int sec, char *string)
0001da  b5f8              PUSH     {r3-r7,lr}
;;;1571   {
0001dc  4604              MOV      r4,r0
0001de  460e              MOV      r6,r1
0001e0  4617              MOV      r7,r2
0001e2  461d              MOV      r5,r3
;;;1572   
;;;1573   		delay(10);		
0001e4  200a              MOVS     r0,#0xa
0001e6  f7fffffe          BL       delay
;;;1574   		memset(string,0,15);
0001ea  210f              MOVS     r1,#0xf
0001ec  4628              MOV      r0,r5
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1575   		for(i11=0,temp11=0;i11<100;i11++)
0001f2  2000              MOVS     r0,#0
0001f4  4992              LDR      r1,|L1.1088|
0001f6  6008              STR      r0,[r1,#0]  ; i11
0001f8  4992              LDR      r1,|L1.1092|
0001fa  6008              STR      r0,[r1,#0]  ; temp11
0001fc  e01a              B        |L1.564|
                  |L1.510|
;;;1576   		{
;;;1577   		if(str[i11]=='"')
0001fe  4890              LDR      r0,|L1.1088|
000200  6800              LDR      r0,[r0,#0]  ; i11
000202  5c20              LDRB     r0,[r4,r0]
000204  2822              CMP      r0,#0x22
000206  d108              BNE      |L1.538|
;;;1578   			{temp11++;j11=i11;}
000208  488e              LDR      r0,|L1.1092|
00020a  6800              LDR      r0,[r0,#0]  ; temp11
00020c  1c40              ADDS     r0,r0,#1
00020e  498d              LDR      r1,|L1.1092|
000210  6008              STR      r0,[r1,#0]  ; temp11
000212  488b              LDR      r0,|L1.1088|
000214  6800              LDR      r0,[r0,#0]  ; i11
000216  498c              LDR      r1,|L1.1096|
000218  6008              STR      r0,[r1,#0]  ; j11
                  |L1.538|
;;;1579   		else{}
;;;1580   			
;;;1581   		if(temp11>=sec){i11=900;}
00021a  488a              LDR      r0,|L1.1092|
00021c  6800              LDR      r0,[r0,#0]  ; temp11
00021e  42b8              CMP      r0,r7
000220  db03              BLT      |L1.554|
000222  20e1              MOVS     r0,#0xe1
000224  0080              LSLS     r0,r0,#2
000226  4986              LDR      r1,|L1.1088|
000228  6008              STR      r0,[r1,#0]  ; i11
                  |L1.554|
00022a  4885              LDR      r0,|L1.1088|
00022c  6800              LDR      r0,[r0,#0]            ;1575  ; i11
00022e  1c40              ADDS     r0,r0,#1              ;1575
000230  4983              LDR      r1,|L1.1088|
000232  6008              STR      r0,[r1,#0]            ;1575  ; i11
                  |L1.564|
000234  4882              LDR      r0,|L1.1088|
000236  6800              LDR      r0,[r0,#0]            ;1575  ; i11
000238  2864              CMP      r0,#0x64              ;1575
00023a  dbe0              BLT      |L1.510|
;;;1582   		else{}	
;;;1583   		
;;;1584   		}	
;;;1585   		
;;;1586   		for(i11=0,temp11=0;i11<100;i11++)
00023c  2000              MOVS     r0,#0
00023e  4980              LDR      r1,|L1.1088|
000240  6008              STR      r0,[r1,#0]  ; i11
000242  4980              LDR      r1,|L1.1092|
000244  6008              STR      r0,[r1,#0]  ; temp11
000246  e01a              B        |L1.638|
                  |L1.584|
;;;1587   		{
;;;1588   		if(str[i11]=='"')
000248  487d              LDR      r0,|L1.1088|
00024a  6800              LDR      r0,[r0,#0]  ; i11
00024c  5c20              LDRB     r0,[r4,r0]
00024e  2822              CMP      r0,#0x22
000250  d108              BNE      |L1.612|
;;;1589   			{temp11++;l=i11;}										
000252  487c              LDR      r0,|L1.1092|
000254  6800              LDR      r0,[r0,#0]  ; temp11
000256  1c40              ADDS     r0,r0,#1
000258  497a              LDR      r1,|L1.1092|
00025a  6008              STR      r0,[r1,#0]  ; temp11
00025c  4878              LDR      r0,|L1.1088|
00025e  6800              LDR      r0,[r0,#0]  ; i11
000260  497a              LDR      r1,|L1.1100|
000262  6008              STR      r0,[r1,#0]  ; l
                  |L1.612|
;;;1590   		else{}
;;;1591   		if(temp11>=first){i11=900;}else{}
000264  4877              LDR      r0,|L1.1092|
000266  6800              LDR      r0,[r0,#0]  ; temp11
000268  42b0              CMP      r0,r6
00026a  db03              BLT      |L1.628|
00026c  20e1              MOVS     r0,#0xe1
00026e  0080              LSLS     r0,r0,#2
000270  4973              LDR      r1,|L1.1088|
000272  6008              STR      r0,[r1,#0]  ; i11
                  |L1.628|
000274  4872              LDR      r0,|L1.1088|
000276  6800              LDR      r0,[r0,#0]            ;1586  ; i11
000278  1c40              ADDS     r0,r0,#1              ;1586
00027a  4971              LDR      r1,|L1.1088|
00027c  6008              STR      r0,[r1,#0]            ;1586  ; i11
                  |L1.638|
00027e  4870              LDR      r0,|L1.1088|
000280  6800              LDR      r0,[r0,#0]            ;1586  ; i11
000282  2864              CMP      r0,#0x64              ;1586
000284  dbe0              BLT      |L1.584|
;;;1592   		}	
;;;1593   		for(i11=0;i11<(j11-l-1);i11++)
000286  2000              MOVS     r0,#0
000288  496d              LDR      r1,|L1.1088|
00028a  6008              STR      r0,[r1,#0]  ; i11
00028c  e00e              B        |L1.684|
                  |L1.654|
;;;1594   		{
;;;1595   		string[i11] = str[l+i11+1];
00028e  486f              LDR      r0,|L1.1100|
000290  6800              LDR      r0,[r0,#0]  ; l
000292  496b              LDR      r1,|L1.1088|
000294  6809              LDR      r1,[r1,#0]  ; i11
000296  1840              ADDS     r0,r0,r1
000298  1c40              ADDS     r0,r0,#1
00029a  5c20              LDRB     r0,[r4,r0]
00029c  4968              LDR      r1,|L1.1088|
00029e  6809              LDR      r1,[r1,#0]  ; i11
0002a0  5468              STRB     r0,[r5,r1]
0002a2  4867              LDR      r0,|L1.1088|
0002a4  6800              LDR      r0,[r0,#0]            ;1593  ; i11
0002a6  1c40              ADDS     r0,r0,#1              ;1593
0002a8  4965              LDR      r1,|L1.1088|
0002aa  6008              STR      r0,[r1,#0]            ;1593  ; i11
                  |L1.684|
0002ac  4866              LDR      r0,|L1.1096|
0002ae  6800              LDR      r0,[r0,#0]            ;1593  ; j11
0002b0  4966              LDR      r1,|L1.1100|
0002b2  6809              LDR      r1,[r1,#0]            ;1593  ; l
0002b4  1a40              SUBS     r0,r0,r1              ;1593
0002b6  1e40              SUBS     r0,r0,#1              ;1593
0002b8  4961              LDR      r1,|L1.1088|
0002ba  6809              LDR      r1,[r1,#0]            ;1593  ; i11
0002bc  4288              CMP      r0,r1                 ;1593
0002be  dce6              BGT      |L1.654|
;;;1596   		}			
;;;1597   	
;;;1598   
;;;1599   }
0002c0  bdf8              POP      {r3-r7,pc}
;;;1600   
                          ENDP

                  cursor_val PROC
;;;1747   
;;;1748   int cursor_val(char * stringsd, int cur){
0002c2  b5f8              PUSH     {r3-r7,lr}
0002c4  4605              MOV      r5,r0
0002c6  460e              MOV      r6,r1
;;;1749   int curinc=0,curcounter=0,cur2=0;
0002c8  2400              MOVS     r4,#0
0002ca  2700              MOVS     r7,#0
0002cc  2000              MOVS     r0,#0
0002ce  9000              STR      r0,[sp,#0]
;;;1750   for(curinc=0;curinc<strlen(stringsd);curinc++){
0002d0  bf00              NOP      
0002d2  e007              B        |L1.740|
                  |L1.724|
;;;1751   		
;;;1752   		if(stringsd[curinc] == '\n'     &&    curcounter < cur   ){ //&& curcounter<=cur	){
0002d4  5d28              LDRB     r0,[r5,r4]
0002d6  280a              CMP      r0,#0xa
0002d8  d103              BNE      |L1.738|
0002da  42b7              CMP      r7,r6
0002dc  da01              BGE      |L1.738|
;;;1753   			++curcounter;     cur2=curinc;
0002de  1c7f              ADDS     r7,r7,#1
0002e0  9400              STR      r4,[sp,#0]
                  |L1.738|
0002e2  1c64              ADDS     r4,r4,#1              ;1750
                  |L1.740|
0002e4  4628              MOV      r0,r5                 ;1750
0002e6  f7fffffe          BL       strlen
0002ea  42a0              CMP      r0,r4                 ;1750
0002ec  d8f2              BHI      |L1.724|
;;;1754   		}
;;;1755   
;;;1756   		
;;;1757   
;;;1758   }
;;;1759   	
;;;1760   	
;;;1761   	return cur2;
0002ee  9800              LDR      r0,[sp,#0]
;;;1762   
;;;1763   }
0002f0  bdf8              POP      {r3-r7,pc}
;;;1764   
                          ENDP

                  count_char PROC
;;;1728   }
;;;1729   int count_char(char ch,char* string)
0002f2  b570              PUSH     {r4-r6,lr}
;;;1730   {count=0;
0002f4  4605              MOV      r5,r0
0002f6  460c              MOV      r4,r1
0002f8  2000              MOVS     r0,#0
0002fa  4955              LDR      r1,|L1.1104|
0002fc  6008              STR      r0,[r1,#0]  ; count
;;;1731   
;;;1732   	//remove_all_chars(string,'\0','\0');
;;;1733   //	ass=strlen(string);
;;;1734   	for(ass=0;ass<strlen(string);ass++)
0002fe  4955              LDR      r1,|L1.1108|
000300  6008              STR      r0,[r1,#0]  ; ass
000302  e00e              B        |L1.802|
                  |L1.772|
;;;1735   	{
;;;1736   		if(string[ass] == ch)
000304  4853              LDR      r0,|L1.1108|
000306  6800              LDR      r0,[r0,#0]  ; ass
000308  5c20              LDRB     r0,[r4,r0]
00030a  42a8              CMP      r0,r5
00030c  d104              BNE      |L1.792|
;;;1737   		{count++;}
00030e  4850              LDR      r0,|L1.1104|
000310  6800              LDR      r0,[r0,#0]  ; count
000312  1c40              ADDS     r0,r0,#1
000314  494e              LDR      r1,|L1.1104|
000316  6008              STR      r0,[r1,#0]  ; count
                  |L1.792|
000318  484e              LDR      r0,|L1.1108|
00031a  6800              LDR      r0,[r0,#0]            ;1734  ; ass
00031c  1c40              ADDS     r0,r0,#1              ;1734
00031e  494d              LDR      r1,|L1.1108|
000320  6008              STR      r0,[r1,#0]            ;1734  ; ass
                  |L1.802|
000322  4620              MOV      r0,r4                 ;1734
000324  f7fffffe          BL       strlen
000328  494a              LDR      r1,|L1.1108|
00032a  6809              LDR      r1,[r1,#0]            ;1734  ; ass
00032c  4288              CMP      r0,r1                 ;1734
00032e  d8e9              BHI      |L1.772|
;;;1738   		
;;;1739   	}
;;;1740   return count;
000330  4847              LDR      r0,|L1.1104|
000332  6800              LDR      r0,[r0,#0]  ; count
;;;1741   }
000334  bd70              POP      {r4-r6,pc}
;;;1742   
                          ENDP

                  send_tcp PROC
;;;93     
;;;94     void send_tcp()
000336  b538              PUSH     {r3-r5,lr}
;;;95     {	
;;;96     memset(stcond1,0,strlen(stcond1));	
000338  4847              LDR      r0,|L1.1112|
00033a  6800              LDR      r0,[r0,#0]  ; stcond1
00033c  f7fffffe          BL       strlen
000340  4604              MOV      r4,r0
000342  4621              MOV      r1,r4
000344  4844              LDR      r0,|L1.1112|
000346  6800              LDR      r0,[r0,#0]  ; stcond1
000348  f7fffffe          BL       __aeabi_memclr
;;;97     memset(con1d,0,strlen(con1d));	
00034c  4843              LDR      r0,|L1.1116|
00034e  6800              LDR      r0,[r0,#0]  ; con1d
000350  f7fffffe          BL       strlen
000354  4604              MOV      r4,r0
000356  4621              MOV      r1,r4
000358  4840              LDR      r0,|L1.1116|
00035a  6800              LDR      r0,[r0,#0]  ; con1d
00035c  f7fffffe          BL       __aeabi_memclr
;;;98     								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;99     
;;;100    								cond=mystrstr(uart_string_gsm,'>');
000360  213e              MOVS     r1,#0x3e
000362  482b              LDR      r0,|L1.1040|
000364  f7fffffe          BL       mystrstr
000368  493d              LDR      r1,|L1.1120|
00036a  7008              STRB     r0,[r1,#0]
;;;101    								if(cond)	
00036c  4608              MOV      r0,r1
00036e  7800              LDRB     r0,[r0,#0]  ; cond
000370  2800              CMP      r0,#0
000372  d048              BEQ      |L1.1030|
;;;102    								{
;;;103    									
;;;104    									clear();
000374  f7fffffe          BL       clear
;;;105    									memset(uart_string_gsm,0,5000);
000378  4924              LDR      r1,|L1.1036|
00037a  4825              LDR      r0,|L1.1040|
00037c  f7fffffe          BL       __aeabi_memclr
;;;106    									strcat(data,"\n\n");
000380  a138              ADR      r1,|L1.1124|
000382  4839              LDR      r0,|L1.1128|
000384  f7fffffe          BL       strcat
;;;107    									len=strlen(data);
000388  4837              LDR      r0,|L1.1128|
00038a  f7fffffe          BL       strlen
00038e  4937              LDR      r1,|L1.1132|
000390  6008              STR      r0,[r1,#0]  ; len
;;;108    									tout=0;
000392  2000              MOVS     r0,#0
000394  491c              LDR      r1,|L1.1032|
000396  6008              STR      r0,[r1,#0]  ; tout
;;;109    									k2=0;
000398  491e              LDR      r1,|L1.1044|
00039a  6008              STR      r0,[r1,#0]  ; k2
;;;110    									for(k=0;k<len;k++)
00039c  4934              LDR      r1,|L1.1136|
00039e  6008              STR      r0,[r1,#0]  ; k
0003a0  e00b              B        |L1.954|
                  |L1.930|
;;;111    									{
;;;112    										uart_putchar(UART1_BASE_PTR, data[k]);
0003a2  4831              LDR      r0,|L1.1128|
0003a4  4a32              LDR      r2,|L1.1136|
0003a6  6812              LDR      r2,[r2,#0]  ; k
0003a8  5c81              LDRB     r1,[r0,r2]
0003aa  481b              LDR      r0,|L1.1048|
0003ac  f7fffffe          BL       uart_putchar
0003b0  482f              LDR      r0,|L1.1136|
0003b2  6800              LDR      r0,[r0,#0]            ;110  ; k
0003b4  1c40              ADDS     r0,r0,#1              ;110
0003b6  492e              LDR      r1,|L1.1136|
0003b8  6008              STR      r0,[r1,#0]            ;110  ; k
                  |L1.954|
0003ba  482d              LDR      r0,|L1.1136|
0003bc  6800              LDR      r0,[r0,#0]            ;110  ; k
0003be  492b              LDR      r1,|L1.1132|
0003c0  6809              LDR      r1,[r1,#0]            ;110  ; len
0003c2  4288              CMP      r0,r1                 ;110
0003c4  dbed              BLT      |L1.930|
;;;113    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0003c6  210a              MOVS     r1,#0xa
0003c8  4813              LDR      r0,|L1.1048|
0003ca  f7fffffe          BL       uart_putchar
0003ce  211a              MOVS     r1,#0x1a
0003d0  4811              LDR      r0,|L1.1048|
0003d2  f7fffffe          BL       uart_putchar
0003d6  211a              MOVS     r1,#0x1a
0003d8  480f              LDR      r0,|L1.1048|
0003da  f7fffffe          BL       uart_putchar
0003de  211a              MOVS     r1,#0x1a
0003e0  480d              LDR      r0,|L1.1048|
0003e2  f7fffffe          BL       uart_putchar
0003e6  211a              MOVS     r1,#0x1a
0003e8  480b              LDR      r0,|L1.1048|
0003ea  f7fffffe          BL       uart_putchar
0003ee  211a              MOVS     r1,#0x1a
0003f0  4809              LDR      r0,|L1.1048|
0003f2  f7fffffe          BL       uart_putchar
;;;114    									do
0003f6  bf00              NOP      
                  |L1.1016|
;;;115    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0003f8  a11e              ADR      r1,|L1.1140|
0003fa  4805              LDR      r0,|L1.1040|
0003fc  f7fffffe          BL       strstr
000400  4915              LDR      r1,|L1.1112|
000402  6008              STR      r0,[r1,#0]  ; stcond1
;;;116    																	stcond2=strstr(uart_string_gsm, "ERROR");
000404  e03a              B        |L1.1148|
                  |L1.1030|
000406  e083              B        |L1.1296|
                  |L1.1032|
                          DCD      tout
                  |L1.1036|
                          DCD      0x00001388
                  |L1.1040|
                          DCD      uart_string_gsm
                  |L1.1044|
                          DCD      ||k2||
                  |L1.1048|
                          DCD      0x4006b000
                  |L1.1052|
                          DCD      cond122
                  |L1.1056|
                          DCD      cond123
                  |L1.1060|
                          DCD      cond124
                  |L1.1064|
                          DCD      cond121
                  |L1.1068|
                          DCD      ||sz||
                  |L1.1072|
                          DCD      ||cn||
                  |L1.1076|
                          DCD      sleep_flag
                  |L1.1080|
                          DCD      stateCount
                  |L1.1084|
                          DCD      0x400ff100
                  |L1.1088|
                          DCD      i11
                  |L1.1092|
                          DCD      temp11
                  |L1.1096|
                          DCD      j11
                  |L1.1100|
                          DCD      l
                  |L1.1104|
                          DCD      count
                  |L1.1108|
                          DCD      ass
                  |L1.1112|
                          DCD      stcond1
                  |L1.1116|
                          DCD      con1d
                  |L1.1120|
                          DCD      cond
                  |L1.1124|
000464  0a0a00            DCB      "\n\n",0
000467  00                DCB      0
                  |L1.1128|
                          DCD      data
                  |L1.1132|
                          DCD      len
                  |L1.1136|
                          DCD      k
                  |L1.1140|
000474  53454e44          DCB      "SEND OK",0
000478  204f4b00
                  |L1.1148|
00047c  a1fc              ADR      r1,|L1.2160|
00047e  48fe              LDR      r0,|L1.2168|
000480  f7fffffe          BL       strstr
000484  49fd              LDR      r1,|L1.2172|
000486  6008              STR      r0,[r1,#0]  ; stcond2
;;;117    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000488  a1fd              ADR      r1,|L1.2176|
00048a  48fb              LDR      r0,|L1.2168|
00048c  f7fffffe          BL       strstr
000490  49fd              LDR      r1,|L1.2184|
000492  6008              STR      r0,[r1,#0]  ; stcond3
;;;118    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000494  a1fd              ADR      r1,|L1.2188|
000496  48f8              LDR      r0,|L1.2168|
000498  f7fffffe          BL       strstr
00049c  49fd              LDR      r1,|L1.2196|
00049e  6008              STR      r0,[r1,#0]  ; stcond4
;;;119    																	
;;;120    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0004a0  48f6              LDR      r0,|L1.2172|
0004a2  6800              LDR      r0,[r0,#0]  ; stcond2
0004a4  2800              CMP      r0,#0
0004a6  d10f              BNE      |L1.1224|
0004a8  48f7              LDR      r0,|L1.2184|
0004aa  6800              LDR      r0,[r0,#0]  ; stcond3
0004ac  2800              CMP      r0,#0
0004ae  d10b              BNE      |L1.1224|
0004b0  4608              MOV      r0,r1
0004b2  6800              LDR      r0,[r0,#0]  ; stcond4
0004b4  2800              CMP      r0,#0
0004b6  d107              BNE      |L1.1224|
0004b8  48f7              LDR      r0,|L1.2200|
0004ba  6800              LDR      r0,[r0,#0]  ; stcond1
0004bc  2800              CMP      r0,#0
0004be  d103              BNE      |L1.1224|
0004c0  48f6              LDR      r0,|L1.2204|
0004c2  6800              LDR      r0,[r0,#0]  ; tout
0004c4  2804              CMP      r0,#4
0004c6  dd97              BLE      |L1.1016|
                  |L1.1224|
;;;121    																//delay(10);clear();
;;;122    														uart_putchar(UART1_BASE_PTR,0x1A);
0004c8  211a              MOVS     r1,#0x1a
0004ca  48f5              LDR      r0,|L1.2208|
0004cc  f7fffffe          BL       uart_putchar
;;;123    												//delay(10);
;;;124    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0004d0  211a              MOVS     r1,#0x1a
0004d2  48f3              LDR      r0,|L1.2208|
0004d4  f7fffffe          BL       uart_putchar
0004d8  211a              MOVS     r1,#0x1a
0004da  48f1              LDR      r0,|L1.2208|
0004dc  f7fffffe          BL       uart_putchar
0004e0  211a              MOVS     r1,#0x1a
0004e2  48ef              LDR      r0,|L1.2208|
0004e4  f7fffffe          BL       uart_putchar
;;;125    						
;;;126    									
;;;127    									
;;;128    									
;;;129    									if(flagch==1){		int_erval=temp;flagch=0;	}
0004e8  48ee              LDR      r0,|L1.2212|
0004ea  6800              LDR      r0,[r0,#0]  ; flagch
0004ec  2801              CMP      r0,#1
0004ee  d106              BNE      |L1.1278|
0004f0  48ed              LDR      r0,|L1.2216|
0004f2  6800              LDR      r0,[r0,#0]  ; temp
0004f4  49ed              LDR      r1,|L1.2220|
0004f6  6008              STR      r0,[r1,#0]  ; int_erval
0004f8  2000              MOVS     r0,#0
0004fa  49ea              LDR      r1,|L1.2212|
0004fc  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.1278|
;;;130    									
;;;131    									
;;;132    									
;;;133    
;;;134    //									for(k=0;k<len;k++)
;;;135    //									{
;;;136    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;137    //									}
;;;138    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;139    
;;;140    //									
;;;141    //													k2=0;									//string array counter for uart 1
;;;142    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;143    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;144    //																{
;;;145    //																	timeout--;
;;;146    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;147    //
;;;148    									delay(20);															
0004fe  2014              MOVS     r0,#0x14
000500  f7fffffe          BL       delay
;;;149    stcond1=strstr(uart_string_gsm,"SEND OK"); 
000504  49ea              LDR      r1,|L1.2224|
000506  48dc              LDR      r0,|L1.2168|
000508  f7fffffe          BL       strstr
00050c  49e2              LDR      r1,|L1.2200|
00050e  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.1296|
;;;150    
;;;151    								}
;;;152    
;;;153      //checks for send ok
;;;154    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
000510  48e1              LDR      r0,|L1.2200|
000512  6800              LDR      r0,[r0,#0]  ; stcond1
000514  2800              CMP      r0,#0
000516  d001              BEQ      |L1.1308|
000518  f000ff87          BL       |L1.5162|
                  |L1.1308|
;;;155    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00051c  211a              MOVS     r1,#0x1a
00051e  48e0              LDR      r0,|L1.2208|
000520  f7fffffe          BL       uart_putchar
000524  f7fffffe          BL       clear
000528  200a              MOVS     r0,#0xa
00052a  f7fffffe          BL       delay
;;;156    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00052e  211a              MOVS     r1,#0x1a
000530  48db              LDR      r0,|L1.2208|
000532  f7fffffe          BL       uart_putchar
000536  f7fffffe          BL       clear
00053a  200a              MOVS     r0,#0xa
00053c  f7fffffe          BL       delay
;;;157    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000540  211a              MOVS     r1,#0x1a
000542  48d7              LDR      r0,|L1.2208|
000544  f7fffffe          BL       uart_putchar
000548  f7fffffe          BL       clear
00054c  200a              MOVS     r0,#0xa
00054e  f7fffffe          BL       delay
;;;158    							remove_all_chars(data, '\n', '\n');
000552  220a              MOVS     r2,#0xa
000554  4611              MOV      r1,r2
000556  48d7              LDR      r0,|L1.2228|
000558  f7fffffe          BL       remove_all_chars
;;;159    	
;;;160    		strcat(data,"CH\n");	
00055c  a1d6              ADR      r1,|L1.2232|
00055e  48d5              LDR      r0,|L1.2228|
000560  f7fffffe          BL       strcat
;;;161    		
;;;162    	
;;;163    	delay(100);
000564  2064              MOVS     r0,#0x64
000566  f7fffffe          BL       delay
;;;164    		clear();//memset(uart_string_gsm,0,5000);
00056a  f7fffffe          BL       clear
;;;165    	
;;;166    	memset(at_,0,100);
00056e  2164              MOVS     r1,#0x64
000570  48d2              LDR      r0,|L1.2236|
000572  f7fffffe          BL       __aeabi_memclr
;;;167    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000576  48cf              LDR      r0,|L1.2228|
000578  f7fffffe          BL       strlen
00057c  1c44              ADDS     r4,r0,#1
00057e  4623              MOV      r3,r4
000580  4acf              LDR      r2,|L1.2240|
000582  a1d0              ADR      r1,|L1.2244|
000584  48cd              LDR      r0,|L1.2236|
000586  f7fffffe          BL       __2sprintf
;;;168    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00058a  2005              MOVS     r0,#5
00058c  a3b8              ADR      r3,|L1.2160|
00058e  a2d6              ADR      r2,|L1.2280|
000590  a1d7              ADR      r1,|L1.2288|
000592  9000              STR      r0,[sp,#0]
000594  48c9              LDR      r0,|L1.2236|
000596  f7fffffe          BL       send_SD
;;;169    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;170    //	if(strstr(uart_string_gsm,"ERROR")){
;;;171    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;172    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;173    //	}
;;;174    	
;;;175    clear();	
00059a  f7fffffe          BL       clear
;;;176    									k2=0;									//string array counter for uart 1
00059e  2000              MOVS     r0,#0
0005a0  49d4              LDR      r1,|L1.2292|
0005a2  6008              STR      r0,[r1,#0]  ; k2
;;;177    									tout=0;	
0005a4  49bd              LDR      r1,|L1.2204|
0005a6  6008              STR      r0,[r1,#0]  ; tout
;;;178    		for(k=0;k<strlen(data);k++)
0005a8  49d3              LDR      r1,|L1.2296|
0005aa  6008              STR      r0,[r1,#0]  ; k
0005ac  e00b              B        |L1.1478|
                  |L1.1454|
;;;179    		{
;;;180    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0005ae  48c1              LDR      r0,|L1.2228|
0005b0  4ad1              LDR      r2,|L1.2296|
0005b2  6812              LDR      r2,[r2,#0]  ; k
0005b4  5c81              LDRB     r1,[r0,r2]
0005b6  48ba              LDR      r0,|L1.2208|
0005b8  f7fffffe          BL       uart_putchar
0005bc  48ce              LDR      r0,|L1.2296|
0005be  6800              LDR      r0,[r0,#0]            ;178  ; k
0005c0  1c40              ADDS     r0,r0,#1              ;178
0005c2  49cd              LDR      r1,|L1.2296|
0005c4  6008              STR      r0,[r1,#0]            ;178  ; k
                  |L1.1478|
0005c6  48bb              LDR      r0,|L1.2228|
0005c8  f7fffffe          BL       strlen
0005cc  49ca              LDR      r1,|L1.2296|
0005ce  6809              LDR      r1,[r1,#0]            ;178  ; k
0005d0  4288              CMP      r0,r1                 ;178
0005d2  d8ec              BHI      |L1.1454|
;;;181    		}	
;;;182    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0005d4  210a              MOVS     r1,#0xa
0005d6  48b2              LDR      r0,|L1.2208|
0005d8  f7fffffe          BL       uart_putchar
0005dc  210a              MOVS     r1,#0xa
0005de  48b0              LDR      r0,|L1.2208|
0005e0  f7fffffe          BL       uart_putchar
0005e4  210a              MOVS     r1,#0xa
0005e6  48ae              LDR      r0,|L1.2208|
0005e8  f7fffffe          BL       uart_putchar
0005ec  210a              MOVS     r1,#0xa
0005ee  48ac              LDR      r0,|L1.2208|
0005f0  f7fffffe          BL       uart_putchar
0005f4  210a              MOVS     r1,#0xa
0005f6  48aa              LDR      r0,|L1.2208|
0005f8  f7fffffe          BL       uart_putchar
0005fc  210a              MOVS     r1,#0xa
0005fe  48a8              LDR      r0,|L1.2208|
000600  f7fffffe          BL       uart_putchar
000604  210a              MOVS     r1,#0xa
000606  48a6              LDR      r0,|L1.2208|
000608  f7fffffe          BL       uart_putchar
00060c  210a              MOVS     r1,#0xa
00060e  48a4              LDR      r0,|L1.2208|
000610  f7fffffe          BL       uart_putchar
000614  210a              MOVS     r1,#0xa
000616  48a2              LDR      r0,|L1.2208|
000618  f7fffffe          BL       uart_putchar
00061c  210a              MOVS     r1,#0xa
00061e  48a0              LDR      r0,|L1.2208|
000620  f7fffffe          BL       uart_putchar
000624  210a              MOVS     r1,#0xa
000626  489e              LDR      r0,|L1.2208|
000628  f7fffffe          BL       uart_putchar
00062c  210a              MOVS     r1,#0xa
00062e  489c              LDR      r0,|L1.2208|
000630  f7fffffe          BL       uart_putchar
000634  210a              MOVS     r1,#0xa
000636  489a              LDR      r0,|L1.2208|
000638  f7fffffe          BL       uart_putchar
00063c  210a              MOVS     r1,#0xa
00063e  4898              LDR      r0,|L1.2208|
000640  f7fffffe          BL       uart_putchar
000644  210a              MOVS     r1,#0xa
000646  4896              LDR      r0,|L1.2208|
000648  f7fffffe          BL       uart_putchar
00064c  210a              MOVS     r1,#0xa
00064e  4894              LDR      r0,|L1.2208|
000650  f7fffffe          BL       uart_putchar
000654  210a              MOVS     r1,#0xa
000656  4892              LDR      r0,|L1.2208|
000658  f7fffffe          BL       uart_putchar
00065c  210a              MOVS     r1,#0xa
00065e  4890              LDR      r0,|L1.2208|
000660  f7fffffe          BL       uart_putchar
000664  210a              MOVS     r1,#0xa
000666  488e              LDR      r0,|L1.2208|
000668  f7fffffe          BL       uart_putchar
00066c  210a              MOVS     r1,#0xa
00066e  488c              LDR      r0,|L1.2208|
000670  f7fffffe          BL       uart_putchar
000674  210a              MOVS     r1,#0xa
000676  488a              LDR      r0,|L1.2208|
000678  f7fffffe          BL       uart_putchar
00067c  210a              MOVS     r1,#0xa
00067e  4888              LDR      r0,|L1.2208|
000680  f7fffffe          BL       uart_putchar
000684  210a              MOVS     r1,#0xa
000686  4886              LDR      r0,|L1.2208|
000688  f7fffffe          BL       uart_putchar
00068c  210a              MOVS     r1,#0xa
00068e  4884              LDR      r0,|L1.2208|
000690  f7fffffe          BL       uart_putchar
000694  210a              MOVS     r1,#0xa
000696  4882              LDR      r0,|L1.2208|
000698  f7fffffe          BL       uart_putchar
00069c  210a              MOVS     r1,#0xa
00069e  4880              LDR      r0,|L1.2208|
0006a0  f7fffffe          BL       uart_putchar
0006a4  210a              MOVS     r1,#0xa
0006a6  487e              LDR      r0,|L1.2208|
0006a8  f7fffffe          BL       uart_putchar
0006ac  210a              MOVS     r1,#0xa
0006ae  487c              LDR      r0,|L1.2208|
0006b0  f7fffffe          BL       uart_putchar
0006b4  210a              MOVS     r1,#0xa
0006b6  487a              LDR      r0,|L1.2208|
0006b8  f7fffffe          BL       uart_putchar
0006bc  210a              MOVS     r1,#0xa
0006be  4878              LDR      r0,|L1.2208|
0006c0  f7fffffe          BL       uart_putchar
0006c4  210a              MOVS     r1,#0xa
0006c6  4876              LDR      r0,|L1.2208|
0006c8  f7fffffe          BL       uart_putchar
0006cc  210a              MOVS     r1,#0xa
0006ce  4874              LDR      r0,|L1.2208|
0006d0  f7fffffe          BL       uart_putchar
0006d4  210a              MOVS     r1,#0xa
0006d6  4872              LDR      r0,|L1.2208|
0006d8  f7fffffe          BL       uart_putchar
0006dc  210a              MOVS     r1,#0xa
0006de  4870              LDR      r0,|L1.2208|
0006e0  f7fffffe          BL       uart_putchar
0006e4  210a              MOVS     r1,#0xa
0006e6  486e              LDR      r0,|L1.2208|
0006e8  f7fffffe          BL       uart_putchar
0006ec  210a              MOVS     r1,#0xa
0006ee  486c              LDR      r0,|L1.2208|
0006f0  f7fffffe          BL       uart_putchar
0006f4  210a              MOVS     r1,#0xa
0006f6  486a              LDR      r0,|L1.2208|
0006f8  f7fffffe          BL       uart_putchar
0006fc  210a              MOVS     r1,#0xa
0006fe  4868              LDR      r0,|L1.2208|
000700  f7fffffe          BL       uart_putchar
000704  210a              MOVS     r1,#0xa
000706  4866              LDR      r0,|L1.2208|
000708  f7fffffe          BL       uart_putchar
00070c  210a              MOVS     r1,#0xa
00070e  4864              LDR      r0,|L1.2208|
000710  f7fffffe          BL       uart_putchar
000714  210a              MOVS     r1,#0xa
000716  4862              LDR      r0,|L1.2208|
000718  f7fffffe          BL       uart_putchar
00071c  210a              MOVS     r1,#0xa
00071e  4860              LDR      r0,|L1.2208|
000720  f7fffffe          BL       uart_putchar
000724  210a              MOVS     r1,#0xa
000726  485e              LDR      r0,|L1.2208|
000728  f7fffffe          BL       uart_putchar
00072c  210a              MOVS     r1,#0xa
00072e  485c              LDR      r0,|L1.2208|
000730  f7fffffe          BL       uart_putchar
000734  210a              MOVS     r1,#0xa
000736  485a              LDR      r0,|L1.2208|
000738  f7fffffe          BL       uart_putchar
00073c  210a              MOVS     r1,#0xa
00073e  4858              LDR      r0,|L1.2208|
000740  f7fffffe          BL       uart_putchar
000744  210a              MOVS     r1,#0xa
000746  4856              LDR      r0,|L1.2208|
000748  f7fffffe          BL       uart_putchar
00074c  210a              MOVS     r1,#0xa
00074e  4854              LDR      r0,|L1.2208|
000750  f7fffffe          BL       uart_putchar
000754  210a              MOVS     r1,#0xa
000756  4852              LDR      r0,|L1.2208|
000758  f7fffffe          BL       uart_putchar
00075c  210a              MOVS     r1,#0xa
00075e  4850              LDR      r0,|L1.2208|
000760  f7fffffe          BL       uart_putchar
000764  210a              MOVS     r1,#0xa
000766  484e              LDR      r0,|L1.2208|
000768  f7fffffe          BL       uart_putchar
00076c  210a              MOVS     r1,#0xa
00076e  484c              LDR      r0,|L1.2208|
000770  f7fffffe          BL       uart_putchar
000774  210a              MOVS     r1,#0xa
000776  484a              LDR      r0,|L1.2208|
000778  f7fffffe          BL       uart_putchar
00077c  210a              MOVS     r1,#0xa
00077e  4848              LDR      r0,|L1.2208|
000780  f7fffffe          BL       uart_putchar
000784  210a              MOVS     r1,#0xa
000786  4846              LDR      r0,|L1.2208|
000788  f7fffffe          BL       uart_putchar
00078c  210a              MOVS     r1,#0xa
00078e  4844              LDR      r0,|L1.2208|
000790  f7fffffe          BL       uart_putchar
000794  210a              MOVS     r1,#0xa
000796  4842              LDR      r0,|L1.2208|
000798  f7fffffe          BL       uart_putchar
;;;183    									//memset(data,0,1000);
;;;184    														//timer counts to wait for characters in uart 1 									
;;;185    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00079c  bf00              NOP      
                  |L1.1950|
00079e  a157              ADR      r1,|L1.2300|
0007a0  4835              LDR      r0,|L1.2168|
0007a2  f7fffffe          BL       strstr
0007a6  2800              CMP      r0,#0
0007a8  d109              BNE      |L1.1982|
0007aa  a131              ADR      r1,|L1.2160|
0007ac  4832              LDR      r0,|L1.2168|
0007ae  f7fffffe          BL       strstr
0007b2  2800              CMP      r0,#0
0007b4  d103              BNE      |L1.1982|
0007b6  4839              LDR      r0,|L1.2204|
0007b8  6800              LDR      r0,[r0,#0]  ; tout
0007ba  2805              CMP      r0,#5
0007bc  ddef              BLE      |L1.1950|
                  |L1.1982|
;;;186    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;187    									}
;;;188    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0007be  f7fffffe          BL       clear
;;;189    									//clear();
;;;190    									memset(data,0,strlen(data));
0007c2  483c              LDR      r0,|L1.2228|
0007c4  f7fffffe          BL       strlen
0007c8  4604              MOV      r4,r0
0007ca  4621              MOV      r1,r4
0007cc  4839              LDR      r0,|L1.2228|
0007ce  f7fffffe          BL       __aeabi_memclr
;;;191    									clear();
0007d2  f7fffffe          BL       clear
;;;192    
;;;193    								
;;;194    	
;;;195    	//log_it();		                         //logging
;;;196    		memset(data,0,strlen(data));	
0007d6  4837              LDR      r0,|L1.2228|
0007d8  f7fffffe          BL       strlen
0007dc  4604              MOV      r4,r0
0007de  4621              MOV      r1,r4
0007e0  4834              LDR      r0,|L1.2228|
0007e2  f7fffffe          BL       __aeabi_memclr
;;;197    
;;;198    					   	if(flagch!=1){
0007e6  482f              LDR      r0,|L1.2212|
0007e8  6800              LDR      r0,[r0,#0]  ; flagch
0007ea  2801              CMP      r0,#1
0007ec  d009              BEQ      |L1.2050|
;;;199    							temp=int_erval;				
0007ee  482f              LDR      r0,|L1.2220|
0007f0  6800              LDR      r0,[r0,#0]  ; int_erval
0007f2  492d              LDR      r1,|L1.2216|
0007f4  6008              STR      r0,[r1,#0]  ; temp
;;;200    							int_erval=4;
0007f6  2004              MOVS     r0,#4
0007f8  492c              LDR      r1,|L1.2220|
0007fa  6008              STR      r0,[r1,#0]  ; int_erval
;;;201    							flagch=1;}
0007fc  2001              MOVS     r0,#1
0007fe  4929              LDR      r1,|L1.2212|
000800  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.2050|
;;;202    							clear();	
000802  f7fffffe          BL       clear
;;;203    									GPS_COLLECT();
000806  f7fffffe          BL       GPS_COLLECT
;;;204    									strcat(data,"CH\n");	
00080a  a12b              ADR      r1,|L1.2232|
00080c  4829              LDR      r0,|L1.2228|
00080e  f7fffffe          BL       strcat
;;;205    
;;;206    //*********************************tcp_initialization();//reinitialization*************************************//
;;;207    
;;;208    	
;;;209    msg_sim800(); 
000812  f7fffffe          BL       msg_sim800
;;;210    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
000816  2005              MOVS     r0,#5
000818  a315              ADR      r3,|L1.2160|
00081a  a233              ADR      r2,|L1.2280|
00081c  a139              ADR      r1,|L1.2308|
00081e  9000              STR      r0,[sp,#0]
000820  a039              ADR      r0,|L1.2312|
000822  f7fffffe          BL       send_GSM
;;;211    delay(100);
000826  2064              MOVS     r0,#0x64
000828  f7fffffe          BL       delay
;;;212    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00082c  2004              MOVS     r0,#4
00082e  a310              ADR      r3,|L1.2160|
000830  a239              ADR      r2,|L1.2328|
000832  a134              ADR      r1,|L1.2308|
000834  9000              STR      r0,[sp,#0]
000836  a03d              ADR      r0,|L1.2348|
000838  f7fffffe          BL       send_GSM
;;;213    GPS_COLLECT2();
00083c  f7fffffe          BL       GPS_COLLECT2
;;;214    strcat(data,"CH\n");		
000840  a11d              ADR      r1,|L1.2232|
000842  481c              LDR      r0,|L1.2228|
000844  f7fffffe          BL       strcat
;;;215    GPS_COLLECT2();
000848  f7fffffe          BL       GPS_COLLECT2
;;;216    strcat(data,"CH\n");	
00084c  a11a              ADR      r1,|L1.2232|
00084e  4819              LDR      r0,|L1.2228|
000850  f7fffffe          BL       strcat
;;;217    GPS_COLLECT2();
000854  f7fffffe          BL       GPS_COLLECT2
;;;218    strcat(data,"CH\n");
000858  a117              ADR      r1,|L1.2232|
00085a  4816              LDR      r0,|L1.2228|
00085c  f7fffffe          BL       strcat
;;;219    cond201=(strstr(uart_string_gsm, "OK"));
000860  a128              ADR      r1,|L1.2308|
000862  4805              LDR      r0,|L1.2168|
000864  f7fffffe          BL       strstr
000868  4934              LDR      r1,|L1.2364|
00086a  6008              STR      r0,[r1,#0]  ; cond201
;;;220    cond200=(strstr(uart_string_gsm, "ERROR"));
00086c  a100              ADR      r1,|L1.2160|
00086e  e067              B        |L1.2368|
                  |L1.2160|
000870  4552524f          DCB      "ERROR",0
000874  5200    
000876  00                DCB      0
000877  00                DCB      0
                  |L1.2168|
                          DCD      uart_string_gsm
                  |L1.2172|
                          DCD      stcond2
                  |L1.2176|
000880  4641494c          DCB      "FAIL",0
000884  00      
000885  00                DCB      0
000886  00                DCB      0
000887  00                DCB      0
                  |L1.2184|
                          DCD      stcond3
                  |L1.2188|
00088c  44454143          DCB      "DEACT",0
000890  5400    
000892  00                DCB      0
000893  00                DCB      0
                  |L1.2196|
                          DCD      stcond4
                  |L1.2200|
                          DCD      stcond1
                  |L1.2204|
                          DCD      tout
                  |L1.2208|
                          DCD      0x4006b000
                  |L1.2212|
                          DCD      flagch
                  |L1.2216|
                          DCD      temp
                  |L1.2220|
                          DCD      int_erval
                  |L1.2224|
                          DCD      ||.text||+0x474
                  |L1.2228|
                          DCD      data
                  |L1.2232|
0008b8  43480a00          DCB      "CH\n",0
                  |L1.2236|
                          DCD      at_
                  |L1.2240|
                          DCD      drive
                  |L1.2244|
0008c4  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
0008c8  2b465357
0008cc  52495445
0008d0  3d25735c
0008d4  4c4f472e
0008d8  5458542c
0008dc  312c2564
0008e0  2c31300a
0008e4  0a00    
0008e6  00                DCB      0
0008e7  00                DCB      0
                  |L1.2280|
0008e8  4552524f          DCB      "ERROR\r\n",0
0008ec  520d0a00
                  |L1.2288|
0008f0  3e00              DCB      ">",0
0008f2  00                DCB      0
0008f3  00                DCB      0
                  |L1.2292|
                          DCD      ||k2||
                  |L1.2296|
                          DCD      k
                  |L1.2300|
0008fc  4f4b0d0a          DCB      "OK\r\n",0
000900  00      
000901  00                DCB      0
000902  00                DCB      0
000903  00                DCB      0
                  |L1.2308|
000904  4f4b00            DCB      "OK",0
000907  00                DCB      0
                  |L1.2312|
000908  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
00090c  2b434655
000910  4e3d300d
000914  0d0a0a00
                  |L1.2328|
000918  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
00091c  494e5345
000920  52544544
000924  0d0a4f4b
000928  00      
000929  00                DCB      0
00092a  00                DCB      0
00092b  00                DCB      0
                  |L1.2348|
00092c  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000930  2b434655
000934  4e3d310d
000938  0a00    
00093a  00                DCB      0
00093b  00                DCB      0
                  |L1.2364|
                          DCD      cond201
                  |L1.2368|
000940  48f6              LDR      r0,|L1.3356|
000942  f7fffffe          BL       strstr
000946  49f6              LDR      r1,|L1.3360|
000948  6008              STR      r0,[r1,#0]  ; cond200
;;;221    if((!(cond201|| cond200 ))  && sleep_flag != 1)
00094a  48f6              LDR      r0,|L1.3364|
00094c  6800              LDR      r0,[r0,#0]  ; cond201
00094e  2800              CMP      r0,#0
                  |L1.2384|
000950  d17e              BNE      |L1.2640|
000952  4608              MOV      r0,r1
000954  6800              LDR      r0,[r0,#0]  ; cond200
000956  2800              CMP      r0,#0
000958  d1fa              BNE      |L1.2384|
00095a  48f3              LDR      r0,|L1.3368|
00095c  6800              LDR      r0,[r0,#0]  ; sleep_flag
00095e  2801              CMP      r0,#1
000960  d076              BEQ      |L1.2640|
;;;222    {
;;;223    delay(100);
000962  2064              MOVS     r0,#0x64
000964  f7fffffe          BL       delay
;;;224    clear();//memset(uart_string_gsm,0,5000);
000968  f7fffffe          BL       clear
;;;225    memset(at_,0,100);
00096c  2164              MOVS     r1,#0x64
00096e  48ef              LDR      r0,|L1.3372|
000970  f7fffffe          BL       __aeabi_memclr
;;;226    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000974  48ee              LDR      r0,|L1.3376|
000976  f7fffffe          BL       strlen
00097a  1c44              ADDS     r4,r0,#1
00097c  4623              MOV      r3,r4
00097e  4aed              LDR      r2,|L1.3380|
000980  49ed              LDR      r1,|L1.3384|
000982  48ea              LDR      r0,|L1.3372|
000984  f7fffffe          BL       __2sprintf
;;;227    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000988  2005              MOVS     r0,#5
00098a  4beb              LDR      r3,|L1.3384|
00098c  3b54              SUBS     r3,r3,#0x54
00098e  461a              MOV      r2,r3
000990  3278              ADDS     r2,r2,#0x78
000992  a1ea              ADR      r1,|L1.3388|
000994  9000              STR      r0,[sp,#0]
000996  48e5              LDR      r0,|L1.3372|
000998  f7fffffe          BL       send_SD
;;;228    clear();	
00099c  f7fffffe          BL       clear
;;;229    k2=0;									//string array counter for uart 1
0009a0  2000              MOVS     r0,#0
0009a2  49e7              LDR      r1,|L1.3392|
0009a4  6008              STR      r0,[r1,#0]  ; k2
;;;230    tout=0;	
0009a6  49e7              LDR      r1,|L1.3396|
0009a8  6008              STR      r0,[r1,#0]  ; tout
;;;231    for(k=0;k<strlen(data);k++)
0009aa  49e7              LDR      r1,|L1.3400|
0009ac  6008              STR      r0,[r1,#0]  ; k
0009ae  e00b              B        |L1.2504|
                  |L1.2480|
;;;232    {
;;;233    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0009b0  48df              LDR      r0,|L1.3376|
0009b2  4ae5              LDR      r2,|L1.3400|
0009b4  6812              LDR      r2,[r2,#0]  ; k
0009b6  5c81              LDRB     r1,[r0,r2]
0009b8  48e4              LDR      r0,|L1.3404|
0009ba  f7fffffe          BL       uart_putchar
0009be  48e2              LDR      r0,|L1.3400|
0009c0  6800              LDR      r0,[r0,#0]            ;231  ; k
0009c2  1c40              ADDS     r0,r0,#1              ;231
0009c4  49e0              LDR      r1,|L1.3400|
0009c6  6008              STR      r0,[r1,#0]            ;231  ; k
                  |L1.2504|
0009c8  48d9              LDR      r0,|L1.3376|
0009ca  f7fffffe          BL       strlen
0009ce  49de              LDR      r1,|L1.3400|
0009d0  6809              LDR      r1,[r1,#0]            ;231  ; k
0009d2  4288              CMP      r0,r1                 ;231
0009d4  d8ec              BHI      |L1.2480|
;;;234    }	
;;;235    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0009d6  210a              MOVS     r1,#0xa
0009d8  48dc              LDR      r0,|L1.3404|
0009da  f7fffffe          BL       uart_putchar
0009de  210a              MOVS     r1,#0xa
0009e0  48da              LDR      r0,|L1.3404|
0009e2  f7fffffe          BL       uart_putchar
0009e6  210a              MOVS     r1,#0xa
0009e8  48d8              LDR      r0,|L1.3404|
0009ea  f7fffffe          BL       uart_putchar
0009ee  210a              MOVS     r1,#0xa
0009f0  48d6              LDR      r0,|L1.3404|
0009f2  f7fffffe          BL       uart_putchar
0009f6  210a              MOVS     r1,#0xa
0009f8  48d4              LDR      r0,|L1.3404|
0009fa  f7fffffe          BL       uart_putchar
0009fe  210a              MOVS     r1,#0xa
000a00  48d2              LDR      r0,|L1.3404|
000a02  f7fffffe          BL       uart_putchar
000a06  210a              MOVS     r1,#0xa
000a08  48d0              LDR      r0,|L1.3404|
000a0a  f7fffffe          BL       uart_putchar
000a0e  210a              MOVS     r1,#0xa
000a10  48ce              LDR      r0,|L1.3404|
000a12  f7fffffe          BL       uart_putchar
000a16  210a              MOVS     r1,#0xa
000a18  48cc              LDR      r0,|L1.3404|
000a1a  f7fffffe          BL       uart_putchar
000a1e  210a              MOVS     r1,#0xa
000a20  48ca              LDR      r0,|L1.3404|
000a22  f7fffffe          BL       uart_putchar
000a26  210a              MOVS     r1,#0xa
000a28  48c8              LDR      r0,|L1.3404|
000a2a  f7fffffe          BL       uart_putchar
000a2e  210a              MOVS     r1,#0xa
000a30  48c6              LDR      r0,|L1.3404|
000a32  f7fffffe          BL       uart_putchar
000a36  210a              MOVS     r1,#0xa
000a38  48c4              LDR      r0,|L1.3404|
000a3a  f7fffffe          BL       uart_putchar
000a3e  210a              MOVS     r1,#0xa
000a40  48c2              LDR      r0,|L1.3404|
000a42  f7fffffe          BL       uart_putchar
000a46  210a              MOVS     r1,#0xa
000a48  48c0              LDR      r0,|L1.3404|
000a4a  f7fffffe          BL       uart_putchar
000a4e  e000              B        |L1.2642|
                  |L1.2640|
000a50  e0d2              B        |L1.3064|
                  |L1.2642|
000a52  210a              MOVS     r1,#0xa
000a54  48bd              LDR      r0,|L1.3404|
000a56  f7fffffe          BL       uart_putchar
000a5a  210a              MOVS     r1,#0xa
000a5c  48bb              LDR      r0,|L1.3404|
000a5e  f7fffffe          BL       uart_putchar
000a62  210a              MOVS     r1,#0xa
000a64  48b9              LDR      r0,|L1.3404|
000a66  f7fffffe          BL       uart_putchar
000a6a  210a              MOVS     r1,#0xa
000a6c  48b7              LDR      r0,|L1.3404|
000a6e  f7fffffe          BL       uart_putchar
000a72  210a              MOVS     r1,#0xa
000a74  48b5              LDR      r0,|L1.3404|
000a76  f7fffffe          BL       uart_putchar
000a7a  210a              MOVS     r1,#0xa
000a7c  48b3              LDR      r0,|L1.3404|
000a7e  f7fffffe          BL       uart_putchar
000a82  210a              MOVS     r1,#0xa
000a84  48b1              LDR      r0,|L1.3404|
000a86  f7fffffe          BL       uart_putchar
000a8a  210a              MOVS     r1,#0xa
000a8c  48af              LDR      r0,|L1.3404|
000a8e  f7fffffe          BL       uart_putchar
000a92  210a              MOVS     r1,#0xa
000a94  48ad              LDR      r0,|L1.3404|
000a96  f7fffffe          BL       uart_putchar
000a9a  210a              MOVS     r1,#0xa
000a9c  48ab              LDR      r0,|L1.3404|
000a9e  f7fffffe          BL       uart_putchar
000aa2  210a              MOVS     r1,#0xa
000aa4  48a9              LDR      r0,|L1.3404|
000aa6  f7fffffe          BL       uart_putchar
000aaa  210a              MOVS     r1,#0xa
000aac  48a7              LDR      r0,|L1.3404|
000aae  f7fffffe          BL       uart_putchar
000ab2  210a              MOVS     r1,#0xa
000ab4  48a5              LDR      r0,|L1.3404|
000ab6  f7fffffe          BL       uart_putchar
000aba  210a              MOVS     r1,#0xa
000abc  48a3              LDR      r0,|L1.3404|
000abe  f7fffffe          BL       uart_putchar
000ac2  210a              MOVS     r1,#0xa
000ac4  48a1              LDR      r0,|L1.3404|
000ac6  f7fffffe          BL       uart_putchar
000aca  210a              MOVS     r1,#0xa
000acc  489f              LDR      r0,|L1.3404|
000ace  f7fffffe          BL       uart_putchar
000ad2  210a              MOVS     r1,#0xa
000ad4  489d              LDR      r0,|L1.3404|
000ad6  f7fffffe          BL       uart_putchar
000ada  210a              MOVS     r1,#0xa
000adc  489b              LDR      r0,|L1.3404|
000ade  f7fffffe          BL       uart_putchar
000ae2  210a              MOVS     r1,#0xa
000ae4  4899              LDR      r0,|L1.3404|
000ae6  f7fffffe          BL       uart_putchar
000aea  210a              MOVS     r1,#0xa
000aec  4897              LDR      r0,|L1.3404|
000aee  f7fffffe          BL       uart_putchar
000af2  210a              MOVS     r1,#0xa
000af4  4895              LDR      r0,|L1.3404|
000af6  f7fffffe          BL       uart_putchar
000afa  210a              MOVS     r1,#0xa
000afc  4893              LDR      r0,|L1.3404|
000afe  f7fffffe          BL       uart_putchar
000b02  210a              MOVS     r1,#0xa
000b04  4891              LDR      r0,|L1.3404|
000b06  f7fffffe          BL       uart_putchar
000b0a  210a              MOVS     r1,#0xa
000b0c  488f              LDR      r0,|L1.3404|
000b0e  f7fffffe          BL       uart_putchar
000b12  210a              MOVS     r1,#0xa
000b14  488d              LDR      r0,|L1.3404|
000b16  f7fffffe          BL       uart_putchar
000b1a  210a              MOVS     r1,#0xa
000b1c  488b              LDR      r0,|L1.3404|
000b1e  f7fffffe          BL       uart_putchar
000b22  210a              MOVS     r1,#0xa
000b24  4889              LDR      r0,|L1.3404|
000b26  f7fffffe          BL       uart_putchar
000b2a  210a              MOVS     r1,#0xa
000b2c  4887              LDR      r0,|L1.3404|
000b2e  f7fffffe          BL       uart_putchar
000b32  210a              MOVS     r1,#0xa
000b34  4885              LDR      r0,|L1.3404|
000b36  f7fffffe          BL       uart_putchar
000b3a  210a              MOVS     r1,#0xa
000b3c  4883              LDR      r0,|L1.3404|
000b3e  f7fffffe          BL       uart_putchar
000b42  210a              MOVS     r1,#0xa
000b44  4881              LDR      r0,|L1.3404|
000b46  f7fffffe          BL       uart_putchar
000b4a  210a              MOVS     r1,#0xa
000b4c  487f              LDR      r0,|L1.3404|
000b4e  f7fffffe          BL       uart_putchar
000b52  210a              MOVS     r1,#0xa
000b54  487d              LDR      r0,|L1.3404|
000b56  f7fffffe          BL       uart_putchar
000b5a  210a              MOVS     r1,#0xa
000b5c  487b              LDR      r0,|L1.3404|
000b5e  f7fffffe          BL       uart_putchar
000b62  210a              MOVS     r1,#0xa
000b64  4879              LDR      r0,|L1.3404|
000b66  f7fffffe          BL       uart_putchar
000b6a  210a              MOVS     r1,#0xa
000b6c  4877              LDR      r0,|L1.3404|
000b6e  f7fffffe          BL       uart_putchar
000b72  210a              MOVS     r1,#0xa
000b74  4875              LDR      r0,|L1.3404|
000b76  f7fffffe          BL       uart_putchar
000b7a  210a              MOVS     r1,#0xa
000b7c  4873              LDR      r0,|L1.3404|
000b7e  f7fffffe          BL       uart_putchar
000b82  210a              MOVS     r1,#0xa
000b84  4871              LDR      r0,|L1.3404|
000b86  f7fffffe          BL       uart_putchar
000b8a  210a              MOVS     r1,#0xa
000b8c  486f              LDR      r0,|L1.3404|
000b8e  f7fffffe          BL       uart_putchar
000b92  210a              MOVS     r1,#0xa
000b94  486d              LDR      r0,|L1.3404|
000b96  f7fffffe          BL       uart_putchar
000b9a  210a              MOVS     r1,#0xa
000b9c  486b              LDR      r0,|L1.3404|
000b9e  f7fffffe          BL       uart_putchar
;;;236    									//memset(data,0,1000);
;;;237    														//timer counts to wait for characters in uart 1 									
;;;238    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000ba2  bf00              NOP      
                  |L1.2980|
000ba4  4964              LDR      r1,|L1.3384|
000ba6  3138              ADDS     r1,r1,#0x38
000ba8  485c              LDR      r0,|L1.3356|
000baa  f7fffffe          BL       strstr
000bae  2800              CMP      r0,#0
000bb0  d10a              BNE      |L1.3016|
000bb2  4961              LDR      r1,|L1.3384|
000bb4  3954              SUBS     r1,r1,#0x54
000bb6  4859              LDR      r0,|L1.3356|
000bb8  f7fffffe          BL       strstr
000bbc  2800              CMP      r0,#0
000bbe  d103              BNE      |L1.3016|
000bc0  4860              LDR      r0,|L1.3396|
000bc2  6800              LDR      r0,[r0,#0]  ; tout
000bc4  2805              CMP      r0,#5
000bc6  dded              BLE      |L1.2980|
                  |L1.3016|
;;;239    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;240    									}
;;;241    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000bc8  f7fffffe          BL       clear
;;;242    									//clear();
;;;243    									memset(data,0,strlen(data));
000bcc  4858              LDR      r0,|L1.3376|
000bce  f7fffffe          BL       strlen
000bd2  4604              MOV      r4,r0
000bd4  4621              MOV      r1,r4
000bd6  4856              LDR      r0,|L1.3376|
000bd8  f7fffffe          BL       __aeabi_memclr
;;;244    									clear();
000bdc  f7fffffe          BL       clear
;;;245    									RESET_OFF;delay(100);
000be0  2020              MOVS     r0,#0x20
000be2  495b              LDR      r1,|L1.3408|
000be4  6088              STR      r0,[r1,#8]
000be6  2064              MOVS     r0,#0x64
000be8  f7fffffe          BL       delay
;;;246    									RESET_ON;delay(100);		
000bec  2020              MOVS     r0,#0x20
000bee  4958              LDR      r1,|L1.3408|
000bf0  6048              STR      r0,[r1,#4]
000bf2  2064              MOVS     r0,#0x64
000bf4  f7fffffe          BL       delay
                  |L1.3064|
;;;247    }
;;;248    	
;;;249    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000bf8  2004              MOVS     r0,#4
000bfa  a356              ADR      r3,|L1.3412|
000bfc  4a4e              LDR      r2,|L1.3384|
000bfe  3224              ADDS     r2,r2,#0x24
000c00  a156              ADR      r1,|L1.3420|
000c02  9000              STR      r0,[sp,#0]
000c04  a056              ADR      r0,|L1.3424|
000c06  f7fffffe          BL       send_GSM
;;;250    GPS_COLLECT2();
000c0a  f7fffffe          BL       GPS_COLLECT2
;;;251    strcat(data,"CH\n");	
000c0e  494a              LDR      r1,|L1.3384|
000c10  390c              SUBS     r1,r1,#0xc
000c12  4847              LDR      r0,|L1.3376|
000c14  f7fffffe          BL       strcat
;;;252    memset(at_,0,100);
000c18  2164              MOVS     r1,#0x64
000c1a  4844              LDR      r0,|L1.3372|
000c1c  f7fffffe          BL       __aeabi_memclr
;;;253    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000c20  4a53              LDR      r2,|L1.3440|
000c22  a154              ADR      r1,|L1.3444|
000c24  4841              LDR      r0,|L1.3372|
000c26  f7fffffe          BL       __2sprintf
;;;254    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000c2a  4857              LDR      r0,|L1.3464|
000c2c  6800              LDR      r0,[r0,#0]  ; tmeout
000c2e  a349              ADR      r3,|L1.3412|
000c30  4a41              LDR      r2,|L1.3384|
000c32  3224              ADDS     r2,r2,#0x24
000c34  a149              ADR      r1,|L1.3420|
000c36  9000              STR      r0,[sp,#0]
000c38  483c              LDR      r0,|L1.3372|
000c3a  f7fffffe          BL       send_GSM
;;;255    msg_sim800(); 
000c3e  f7fffffe          BL       msg_sim800
;;;256    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000c42  2004              MOVS     r0,#4
000c44  4b3c              LDR      r3,|L1.3384|
000c46  3b38              SUBS     r3,r3,#0x38
000c48  461a              MOV      r2,r3
000c4a  325c              ADDS     r2,r2,#0x5c
000c4c  a143              ADR      r1,|L1.3420|
000c4e  9000              STR      r0,[sp,#0]
000c50  a04e              ADR      r0,|L1.3468|
000c52  f7fffffe          BL       send_GSM
;;;257    GPS_COLLECT2();
000c56  f7fffffe          BL       GPS_COLLECT2
;;;258    strcat(data,"CH\n");	
000c5a  4937              LDR      r1,|L1.3384|
000c5c  390c              SUBS     r1,r1,#0xc
000c5e  4834              LDR      r0,|L1.3376|
000c60  f7fffffe          BL       strcat
;;;259    GPS_COLLECT2();
000c64  f7fffffe          BL       GPS_COLLECT2
;;;260    strcat(data,"CH\n");	
000c68  4933              LDR      r1,|L1.3384|
000c6a  390c              SUBS     r1,r1,#0xc
000c6c  4830              LDR      r0,|L1.3376|
000c6e  f7fffffe          BL       strcat
;;;261    
;;;262    
;;;263    msg_sim800(); 
000c72  f7fffffe          BL       msg_sim800
;;;264    GPS_COLLECT2();
000c76  f7fffffe          BL       GPS_COLLECT2
;;;265    strcat(data,"CH\n");	
000c7a  492f              LDR      r1,|L1.3384|
000c7c  390c              SUBS     r1,r1,#0xc
000c7e  482c              LDR      r0,|L1.3376|
000c80  f7fffffe          BL       strcat
;;;266    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000c84  f7fffffe          BL       clear
000c88  a044              ADR      r0,|L1.3484|
000c8a  f7fffffe          BL       send_modem
000c8e  f7fffffe          BL       clear
;;;267    					delay(20);
000c92  2014              MOVS     r0,#0x14
000c94  f7fffffe          BL       delay
;;;268    
;;;269    
;;;270    msg_sim800(); 
000c98  f7fffffe          BL       msg_sim800
;;;271    
;;;272    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000c9c  4b43              LDR      r3,|L1.3500|
000c9e  4a44              LDR      r2,|L1.3504|
000ca0  a144              ADR      r1,|L1.3508|
000ca2  4822              LDR      r0,|L1.3372|
000ca4  f7fffffe          BL       __2sprintf
;;;273    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000ca8  4837              LDR      r0,|L1.3464|
000caa  6800              LDR      r0,[r0,#0]  ; tmeout
000cac  a329              ADR      r3,|L1.3412|
000cae  4a22              LDR      r2,|L1.3384|
000cb0  3a54              SUBS     r2,r2,#0x54
000cb2  a148              ADR      r1,|L1.3540|
000cb4  9000              STR      r0,[sp,#0]
000cb6  481d              LDR      r0,|L1.3372|
000cb8  f7fffffe          BL       send_GSM
;;;274    						clear();
000cbc  f7fffffe          BL       clear
;;;275    						
;;;276    						
;;;277    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
000cc0  4831              LDR      r0,|L1.3464|
000cc2  6800              LDR      r0,[r0,#0]  ; tmeout
000cc4  a345              ADR      r3,|L1.3548|
000cc6  4a1c              LDR      r2,|L1.3384|
000cc8  3a54              SUBS     r2,r2,#0x54
000cca  a11c              ADR      r1,|L1.3388|
000ccc  9000              STR      r0,[sp,#0]
000cce  a047              ADR      r0,|L1.3564|
000cd0  f7fffffe          BL       send_GSM
;;;278    //*********************************tcp_initialization_ends*****************************************************//							
;;;279    									
;;;280    						clear();		
000cd4  f7fffffe          BL       clear
;;;281    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
000cd8  213e              MOVS     r1,#0x3e
000cda  4810              LDR      r0,|L1.3356|
000cdc  f7fffffe          BL       mystrstr
000ce0  4946              LDR      r1,|L1.3580|
000ce2  7008              STRB     r0,[r1,#0]
;;;282    								if(cond)	
000ce4  4608              MOV      r0,r1
000ce6  7800              LDRB     r0,[r0,#0]  ; cond
000ce8  2800              CMP      r0,#0
000cea  d016              BEQ      |L1.3354|
;;;283    								{	
;;;284    
;;;285    									clear();
000cec  f7fffffe          BL       clear
;;;286    									memset(uart_string_gsm,0,5000);
000cf0  4943              LDR      r1,|L1.3584|
000cf2  480a              LDR      r0,|L1.3356|
000cf4  f7fffffe          BL       __aeabi_memclr
;;;287    									strcat(data,"\n");
000cf8  a127              ADR      r1,|L1.3480|
000cfa  480d              LDR      r0,|L1.3376|
000cfc  f7fffffe          BL       strcat
;;;288    									len=strlen(data);
000d00  480b              LDR      r0,|L1.3376|
000d02  f7fffffe          BL       strlen
000d06  493f              LDR      r1,|L1.3588|
000d08  6008              STR      r0,[r1,#0]  ; len
;;;289    									tout=0;
000d0a  2000              MOVS     r0,#0
000d0c  490d              LDR      r1,|L1.3396|
000d0e  6008              STR      r0,[r1,#0]  ; tout
;;;290    									k2=0;
000d10  490b              LDR      r1,|L1.3392|
000d12  6008              STR      r0,[r1,#0]  ; k2
;;;291    									for(k=0;k<len;k++)
000d14  490c              LDR      r1,|L1.3400|
000d16  6008              STR      r0,[r1,#0]  ; k
000d18  e082              B        |L1.3616|
                  |L1.3354|
000d1a  e224              B        |L1.4454|
                  |L1.3356|
                          DCD      uart_string_gsm
                  |L1.3360|
                          DCD      cond200
                  |L1.3364|
                          DCD      cond201
                  |L1.3368|
                          DCD      sleep_flag
                  |L1.3372|
                          DCD      at_
                  |L1.3376|
                          DCD      data
                  |L1.3380|
                          DCD      drive
                  |L1.3384|
                          DCD      ||.text||+0x8c4
                  |L1.3388|
000d3c  3e00              DCB      ">",0
000d3e  00                DCB      0
000d3f  00                DCB      0
                  |L1.3392|
                          DCD      ||k2||
                  |L1.3396|
                          DCD      tout
                  |L1.3400|
                          DCD      k
                  |L1.3404|
                          DCD      0x4006b000
                  |L1.3408|
                          DCD      0x400ff080
                  |L1.3412|
000d54  4552524f          DCB      "ERROR:",0
000d58  523a00  
000d5b  00                DCB      0
                  |L1.3420|
000d5c  4f4b00            DCB      "OK",0
000d5f  00                DCB      0
                  |L1.3424|
000d60  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
000d64  2b434950
000d68  53485554
000d6c  0d0a00  
000d6f  00                DCB      0
                  |L1.3440|
                          DCD      apn
                  |L1.3444|
000d74  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
000d78  2b435354
000d7c  543d2225
000d80  73220d0a
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L1.3464|
                          DCD      tmeout
                  |L1.3468|
000d8c  0d0a4154          DCB      "\r\nAT+CIICR\r\r"
000d90  2b434949
000d94  43520d0d
                  |L1.3480|
000d98  0a00              DCB      "\n",0
000d9a  00                DCB      0
000d9b  00                DCB      0
                  |L1.3484|
000d9c  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
000da0  43494653
000da4  520d0d0a
000da8  00      
000da9  00                DCB      0
000daa  00                DCB      0
000dab  00                DCB      0
                  |L1.3500|
                          DCD      port
                  |L1.3504|
                          DCD      ||ip||
                  |L1.3508|
000db4  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000db8  2b434950
000dbc  53544152
000dc0  543d2254
000dc4  4350222c
000dc8  22257322
000dcc  2c222573
000dd0  220d0a00
                  |L1.3540|
000dd4  434f4e4e          DCB      "CONNECT",0
000dd8  45435400
                  |L1.3548|
000ddc  434f4e4e          DCB      "CONNECT FAIL",0
000de0  45435420
000de4  4641494c
000de8  00      
000de9  00                DCB      0
000dea  00                DCB      0
000deb  00                DCB      0
                  |L1.3564|
000dec  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
000df0  2b434950
000df4  53454e44
000df8  0d0a00  
000dfb  00                DCB      0
                  |L1.3580|
                          DCD      cond
                  |L1.3584|
                          DCD      0x00001388
                  |L1.3588|
                          DCD      len
                  |L1.3592|
;;;292    									{
;;;293    										uart_putchar(UART1_BASE_PTR, data[k]);
000e08  48fd              LDR      r0,|L1.4608|
000e0a  4afe              LDR      r2,|L1.4612|
000e0c  6812              LDR      r2,[r2,#0]  ; k
000e0e  5c81              LDRB     r1,[r0,r2]
000e10  48fd              LDR      r0,|L1.4616|
000e12  f7fffffe          BL       uart_putchar
000e16  48fb              LDR      r0,|L1.4612|
000e18  6800              LDR      r0,[r0,#0]            ;291  ; k
000e1a  1c40              ADDS     r0,r0,#1              ;291
000e1c  49f9              LDR      r1,|L1.4612|
000e1e  6008              STR      r0,[r1,#0]            ;291  ; k
                  |L1.3616|
000e20  48f8              LDR      r0,|L1.4612|
000e22  6800              LDR      r0,[r0,#0]            ;291  ; k
000e24  49f9              LDR      r1,|L1.4620|
000e26  6809              LDR      r1,[r1,#0]            ;291  ; len
000e28  4288              CMP      r0,r1                 ;291
000e2a  dbed              BLT      |L1.3592|
;;;294    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000e2c  210a              MOVS     r1,#0xa
000e2e  48f6              LDR      r0,|L1.4616|
000e30  f7fffffe          BL       uart_putchar
000e34  211a              MOVS     r1,#0x1a
000e36  48f4              LDR      r0,|L1.4616|
000e38  f7fffffe          BL       uart_putchar
000e3c  211a              MOVS     r1,#0x1a
000e3e  48f2              LDR      r0,|L1.4616|
000e40  f7fffffe          BL       uart_putchar
000e44  211a              MOVS     r1,#0x1a
000e46  48f0              LDR      r0,|L1.4616|
000e48  f7fffffe          BL       uart_putchar
;;;295    									do
000e4c  bf00              NOP      
                  |L1.3662|
;;;296    																{stcond1=strstr(uart_string_gsm,"SEND OK");
000e4e  49f0              LDR      r1,|L1.4624|
000e50  48f0              LDR      r0,|L1.4628|
000e52  f7fffffe          BL       strstr
000e56  49f0              LDR      r1,|L1.4632|
000e58  6008              STR      r0,[r1,#0]  ; stcond1
;;;297    																	stcond2=strstr(uart_string_gsm, "ERROR");
000e5a  49f0              LDR      r1,|L1.4636|
000e5c  48ed              LDR      r0,|L1.4628|
000e5e  f7fffffe          BL       strstr
000e62  49ef              LDR      r1,|L1.4640|
000e64  6008              STR      r0,[r1,#0]  ; stcond2
;;;298    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000e66  49ef              LDR      r1,|L1.4644|
000e68  48ea              LDR      r0,|L1.4628|
000e6a  f7fffffe          BL       strstr
000e6e  49ee              LDR      r1,|L1.4648|
000e70  6008              STR      r0,[r1,#0]  ; stcond3
;;;299    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000e72  49ea              LDR      r1,|L1.4636|
000e74  311c              ADDS     r1,r1,#0x1c
000e76  48e7              LDR      r0,|L1.4628|
000e78  f7fffffe          BL       strstr
000e7c  49eb              LDR      r1,|L1.4652|
000e7e  6008              STR      r0,[r1,#0]  ; stcond4
;;;300    																	
;;;301    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
000e80  48e7              LDR      r0,|L1.4640|
000e82  6800              LDR      r0,[r0,#0]  ; stcond2
000e84  2800              CMP      r0,#0
000e86  d10f              BNE      |L1.3752|
000e88  48e7              LDR      r0,|L1.4648|
000e8a  6800              LDR      r0,[r0,#0]  ; stcond3
000e8c  2800              CMP      r0,#0
000e8e  d10b              BNE      |L1.3752|
000e90  4608              MOV      r0,r1
000e92  6800              LDR      r0,[r0,#0]  ; stcond4
000e94  2800              CMP      r0,#0
000e96  d107              BNE      |L1.3752|
000e98  48df              LDR      r0,|L1.4632|
000e9a  6800              LDR      r0,[r0,#0]  ; stcond1
000e9c  2800              CMP      r0,#0
000e9e  d103              BNE      |L1.3752|
000ea0  48e3              LDR      r0,|L1.4656|
000ea2  6800              LDR      r0,[r0,#0]  ; tout
000ea4  2804              CMP      r0,#4
000ea6  ddd2              BLE      |L1.3662|
                  |L1.3752|
;;;302    															//	delay(10);clear();
;;;303    														uart_putchar(UART1_BASE_PTR,0x1A);
000ea8  211a              MOVS     r1,#0x1a
000eaa  48d7              LDR      r0,|L1.4616|
000eac  f7fffffe          BL       uart_putchar
;;;304    											//	delay(10);
;;;305    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000eb0  211a              MOVS     r1,#0x1a
000eb2  48d5              LDR      r0,|L1.4616|
000eb4  f7fffffe          BL       uart_putchar
000eb8  211a              MOVS     r1,#0x1a
000eba  48d3              LDR      r0,|L1.4616|
000ebc  f7fffffe          BL       uart_putchar
000ec0  211a              MOVS     r1,#0x1a
000ec2  48d1              LDR      r0,|L1.4616|
000ec4  f7fffffe          BL       uart_putchar
;;;306    						
;;;307    
;;;308    
;;;309    									
;;;310    															
;;;311    															
;;;312    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;313    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;314    															
;;;315    														//qwe=strlen(uart_string_gsm);
;;;316    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;317    															delay(20);
000ec8  2014              MOVS     r0,#0x14
000eca  f7fffffe          BL       delay
;;;318    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
000ece  49d0              LDR      r1,|L1.4624|
000ed0  48d0              LDR      r0,|L1.4628|
000ed2  f7fffffe          BL       strstr
000ed6  49d7              LDR      r1,|L1.4660|
000ed8  6008              STR      r0,[r1,#0]  ; con1d
;;;319    																if(!con1d)
000eda  4608              MOV      r0,r1
000edc  6800              LDR      r0,[r0,#0]  ; con1d
000ede  2800              CMP      r0,#0
000ee0  d17e              BNE      |L1.4064|
;;;320    																{
;;;321    																	
;;;322    																	
;;;323    																	
;;;324    																	
;;;325    																	
;;;326    	delay(100);
000ee2  2064              MOVS     r0,#0x64
000ee4  f7fffffe          BL       delay
;;;327    		clear();//memset(uart_string_gsm,0,5000);
000ee8  f7fffffe          BL       clear
;;;328    	
;;;329    	memset(at_,0,100);
000eec  2164              MOVS     r1,#0x64
000eee  48d2              LDR      r0,|L1.4664|
000ef0  f7fffffe          BL       __aeabi_memclr
;;;330    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000ef4  48c2              LDR      r0,|L1.4608|
000ef6  f7fffffe          BL       strlen
000efa  1c44              ADDS     r4,r0,#1
000efc  4623              MOV      r3,r4
000efe  4acf              LDR      r2,|L1.4668|
000f00  49c6              LDR      r1,|L1.4636|
000f02  3154              ADDS     r1,r1,#0x54
000f04  48cc              LDR      r0,|L1.4664|
000f06  f7fffffe          BL       __2sprintf
;;;331    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000f0a  2005              MOVS     r0,#5
000f0c  4bc3              LDR      r3,|L1.4636|
000f0e  461a              MOV      r2,r3
000f10  3278              ADDS     r2,r2,#0x78
000f12  a1cb              ADR      r1,|L1.4672|
000f14  9000              STR      r0,[sp,#0]
000f16  48c8              LDR      r0,|L1.4664|
000f18  f7fffffe          BL       send_SD
;;;332    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;333    //	if(strstr(uart_string_gsm,"ERROR")){
;;;334    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;335    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;336    //	}
;;;337    	
;;;338    clear();	
000f1c  f7fffffe          BL       clear
;;;339    									k2=0;									//string array counter for uart 1
000f20  2000              MOVS     r0,#0
000f22  49c8              LDR      r1,|L1.4676|
000f24  6008              STR      r0,[r1,#0]  ; k2
;;;340    									tout=0;	
000f26  49c2              LDR      r1,|L1.4656|
000f28  6008              STR      r0,[r1,#0]  ; tout
;;;341    		for(k=0;k<strlen(data);k++)
000f2a  49b6              LDR      r1,|L1.4612|
000f2c  6008              STR      r0,[r1,#0]  ; k
000f2e  e00b              B        |L1.3912|
                  |L1.3888|
;;;342    		{
;;;343    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000f30  48b3              LDR      r0,|L1.4608|
000f32  4ab4              LDR      r2,|L1.4612|
000f34  6812              LDR      r2,[r2,#0]  ; k
000f36  5c81              LDRB     r1,[r0,r2]
000f38  48b3              LDR      r0,|L1.4616|
000f3a  f7fffffe          BL       uart_putchar
000f3e  48b1              LDR      r0,|L1.4612|
000f40  6800              LDR      r0,[r0,#0]            ;341  ; k
000f42  1c40              ADDS     r0,r0,#1              ;341
000f44  49af              LDR      r1,|L1.4612|
000f46  6008              STR      r0,[r1,#0]            ;341  ; k
                  |L1.3912|
000f48  48ad              LDR      r0,|L1.4608|
000f4a  f7fffffe          BL       strlen
000f4e  49ad              LDR      r1,|L1.4612|
000f50  6809              LDR      r1,[r1,#0]            ;341  ; k
000f52  4288              CMP      r0,r1                 ;341
000f54  d8ec              BHI      |L1.3888|
;;;344    		}	
;;;345    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000f56  210a              MOVS     r1,#0xa
000f58  48ab              LDR      r0,|L1.4616|
000f5a  f7fffffe          BL       uart_putchar
000f5e  210a              MOVS     r1,#0xa
000f60  48a9              LDR      r0,|L1.4616|
000f62  f7fffffe          BL       uart_putchar
000f66  210a              MOVS     r1,#0xa
000f68  48a7              LDR      r0,|L1.4616|
000f6a  f7fffffe          BL       uart_putchar
000f6e  210a              MOVS     r1,#0xa
000f70  48a5              LDR      r0,|L1.4616|
000f72  f7fffffe          BL       uart_putchar
000f76  210a              MOVS     r1,#0xa
000f78  48a3              LDR      r0,|L1.4616|
000f7a  f7fffffe          BL       uart_putchar
000f7e  210a              MOVS     r1,#0xa
000f80  48a1              LDR      r0,|L1.4616|
000f82  f7fffffe          BL       uart_putchar
000f86  210a              MOVS     r1,#0xa
000f88  489f              LDR      r0,|L1.4616|
000f8a  f7fffffe          BL       uart_putchar
000f8e  210a              MOVS     r1,#0xa
000f90  489d              LDR      r0,|L1.4616|
000f92  f7fffffe          BL       uart_putchar
000f96  210a              MOVS     r1,#0xa
000f98  489b              LDR      r0,|L1.4616|
000f9a  f7fffffe          BL       uart_putchar
000f9e  210a              MOVS     r1,#0xa
000fa0  4899              LDR      r0,|L1.4616|
000fa2  f7fffffe          BL       uart_putchar
000fa6  210a              MOVS     r1,#0xa
000fa8  4897              LDR      r0,|L1.4616|
000faa  f7fffffe          BL       uart_putchar
000fae  210a              MOVS     r1,#0xa
000fb0  4895              LDR      r0,|L1.4616|
000fb2  f7fffffe          BL       uart_putchar
000fb6  210a              MOVS     r1,#0xa
000fb8  4893              LDR      r0,|L1.4616|
000fba  f7fffffe          BL       uart_putchar
000fbe  210a              MOVS     r1,#0xa
000fc0  4891              LDR      r0,|L1.4616|
000fc2  f7fffffe          BL       uart_putchar
000fc6  210a              MOVS     r1,#0xa
000fc8  488f              LDR      r0,|L1.4616|
000fca  f7fffffe          BL       uart_putchar
000fce  210a              MOVS     r1,#0xa
000fd0  488d              LDR      r0,|L1.4616|
000fd2  f7fffffe          BL       uart_putchar
000fd6  210a              MOVS     r1,#0xa
000fd8  488b              LDR      r0,|L1.4616|
000fda  f7fffffe          BL       uart_putchar
000fde  e000              B        |L1.4066|
                  |L1.4064|
000fe0  e0be              B        |L1.4448|
                  |L1.4066|
000fe2  210a              MOVS     r1,#0xa
000fe4  4888              LDR      r0,|L1.4616|
000fe6  f7fffffe          BL       uart_putchar
000fea  210a              MOVS     r1,#0xa
000fec  4886              LDR      r0,|L1.4616|
000fee  f7fffffe          BL       uart_putchar
000ff2  210a              MOVS     r1,#0xa
000ff4  4884              LDR      r0,|L1.4616|
000ff6  f7fffffe          BL       uart_putchar
000ffa  210a              MOVS     r1,#0xa
000ffc  4882              LDR      r0,|L1.4616|
000ffe  f7fffffe          BL       uart_putchar
001002  210a              MOVS     r1,#0xa
001004  4880              LDR      r0,|L1.4616|
001006  f7fffffe          BL       uart_putchar
00100a  210a              MOVS     r1,#0xa
00100c  487e              LDR      r0,|L1.4616|
00100e  f7fffffe          BL       uart_putchar
001012  210a              MOVS     r1,#0xa
001014  487c              LDR      r0,|L1.4616|
001016  f7fffffe          BL       uart_putchar
00101a  210a              MOVS     r1,#0xa
00101c  487a              LDR      r0,|L1.4616|
00101e  f7fffffe          BL       uart_putchar
001022  210a              MOVS     r1,#0xa
001024  4878              LDR      r0,|L1.4616|
001026  f7fffffe          BL       uart_putchar
00102a  210a              MOVS     r1,#0xa
00102c  4876              LDR      r0,|L1.4616|
00102e  f7fffffe          BL       uart_putchar
001032  210a              MOVS     r1,#0xa
001034  4874              LDR      r0,|L1.4616|
001036  f7fffffe          BL       uart_putchar
00103a  210a              MOVS     r1,#0xa
00103c  4872              LDR      r0,|L1.4616|
00103e  f7fffffe          BL       uart_putchar
001042  210a              MOVS     r1,#0xa
001044  4870              LDR      r0,|L1.4616|
001046  f7fffffe          BL       uart_putchar
00104a  210a              MOVS     r1,#0xa
00104c  486e              LDR      r0,|L1.4616|
00104e  f7fffffe          BL       uart_putchar
001052  210a              MOVS     r1,#0xa
001054  486c              LDR      r0,|L1.4616|
001056  f7fffffe          BL       uart_putchar
00105a  210a              MOVS     r1,#0xa
00105c  486a              LDR      r0,|L1.4616|
00105e  f7fffffe          BL       uart_putchar
001062  210a              MOVS     r1,#0xa
001064  4868              LDR      r0,|L1.4616|
001066  f7fffffe          BL       uart_putchar
00106a  210a              MOVS     r1,#0xa
00106c  4866              LDR      r0,|L1.4616|
00106e  f7fffffe          BL       uart_putchar
001072  210a              MOVS     r1,#0xa
001074  4864              LDR      r0,|L1.4616|
001076  f7fffffe          BL       uart_putchar
00107a  210a              MOVS     r1,#0xa
00107c  4862              LDR      r0,|L1.4616|
00107e  f7fffffe          BL       uart_putchar
001082  210a              MOVS     r1,#0xa
001084  4860              LDR      r0,|L1.4616|
001086  f7fffffe          BL       uart_putchar
00108a  210a              MOVS     r1,#0xa
00108c  485e              LDR      r0,|L1.4616|
00108e  f7fffffe          BL       uart_putchar
001092  210a              MOVS     r1,#0xa
001094  485c              LDR      r0,|L1.4616|
001096  f7fffffe          BL       uart_putchar
00109a  210a              MOVS     r1,#0xa
00109c  485a              LDR      r0,|L1.4616|
00109e  f7fffffe          BL       uart_putchar
0010a2  210a              MOVS     r1,#0xa
0010a4  4858              LDR      r0,|L1.4616|
0010a6  f7fffffe          BL       uart_putchar
0010aa  210a              MOVS     r1,#0xa
0010ac  4856              LDR      r0,|L1.4616|
0010ae  f7fffffe          BL       uart_putchar
0010b2  210a              MOVS     r1,#0xa
0010b4  4854              LDR      r0,|L1.4616|
0010b6  f7fffffe          BL       uart_putchar
0010ba  210a              MOVS     r1,#0xa
0010bc  4852              LDR      r0,|L1.4616|
0010be  f7fffffe          BL       uart_putchar
0010c2  210a              MOVS     r1,#0xa
0010c4  4850              LDR      r0,|L1.4616|
0010c6  f7fffffe          BL       uart_putchar
0010ca  210a              MOVS     r1,#0xa
0010cc  484e              LDR      r0,|L1.4616|
0010ce  f7fffffe          BL       uart_putchar
0010d2  210a              MOVS     r1,#0xa
0010d4  484c              LDR      r0,|L1.4616|
0010d6  f7fffffe          BL       uart_putchar
0010da  210a              MOVS     r1,#0xa
0010dc  484a              LDR      r0,|L1.4616|
0010de  f7fffffe          BL       uart_putchar
0010e2  210a              MOVS     r1,#0xa
0010e4  4848              LDR      r0,|L1.4616|
0010e6  f7fffffe          BL       uart_putchar
0010ea  210a              MOVS     r1,#0xa
0010ec  4846              LDR      r0,|L1.4616|
0010ee  f7fffffe          BL       uart_putchar
0010f2  210a              MOVS     r1,#0xa
0010f4  4844              LDR      r0,|L1.4616|
0010f6  f7fffffe          BL       uart_putchar
0010fa  210a              MOVS     r1,#0xa
0010fc  4842              LDR      r0,|L1.4616|
0010fe  f7fffffe          BL       uart_putchar
001102  210a              MOVS     r1,#0xa
001104  4840              LDR      r0,|L1.4616|
001106  f7fffffe          BL       uart_putchar
00110a  210a              MOVS     r1,#0xa
00110c  483e              LDR      r0,|L1.4616|
00110e  f7fffffe          BL       uart_putchar
001112  210a              MOVS     r1,#0xa
001114  483c              LDR      r0,|L1.4616|
001116  f7fffffe          BL       uart_putchar
00111a  210a              MOVS     r1,#0xa
00111c  483a              LDR      r0,|L1.4616|
00111e  f7fffffe          BL       uart_putchar
;;;346    									//memset(data,0,1000);
;;;347    														//timer counts to wait for characters in uart 1 									
;;;348    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001122  bf00              NOP      
                  |L1.4388|
001124  493d              LDR      r1,|L1.4636|
001126  318c              ADDS     r1,r1,#0x8c
001128  483a              LDR      r0,|L1.4628|
00112a  f7fffffe          BL       strstr
00112e  2800              CMP      r0,#0
001130  d109              BNE      |L1.4422|
001132  493a              LDR      r1,|L1.4636|
001134  4837              LDR      r0,|L1.4628|
001136  f7fffffe          BL       strstr
00113a  2800              CMP      r0,#0
00113c  d103              BNE      |L1.4422|
00113e  483c              LDR      r0,|L1.4656|
001140  6800              LDR      r0,[r0,#0]  ; tout
001142  2805              CMP      r0,#5
001144  ddee              BLE      |L1.4388|
                  |L1.4422|
;;;349    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;350    									}
;;;351    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001146  f7fffffe          BL       clear
;;;352    									//clear();
;;;353    									memset(data,0,strlen(data));
00114a  482d              LDR      r0,|L1.4608|
00114c  f7fffffe          BL       strlen
001150  4604              MOV      r4,r0
001152  4621              MOV      r1,r4
001154  482a              LDR      r0,|L1.4608|
001156  f7fffffe          BL       __aeabi_memclr
;;;354    									clear();
00115a  f7fffffe          BL       clear
00115e  e166              B        |L1.5166|
                  |L1.4448|
;;;355    
;;;356    								
;;;357    								//								log_it();								
;;;358    																}else{send_chunk();}													
001160  f7fffffe          BL       send_chunk
001164  e163              B        |L1.5166|
                  |L1.4454|
;;;359    								//checks for the sd_data available
;;;360    								}
;;;361    								//con1d=strstr(uart_string_gsm,"OK");
;;;362    								else
;;;363    								{
;;;364    									
;;;365    									
;;;366    	delay(100);
001166  2064              MOVS     r0,#0x64
001168  f7fffffe          BL       delay
;;;367    		clear();//memset(uart_string_gsm,0,5000);
00116c  f7fffffe          BL       clear
;;;368    	
;;;369    	memset(at_,0,100);
001170  2164              MOVS     r1,#0x64
001172  4831              LDR      r0,|L1.4664|
001174  f7fffffe          BL       __aeabi_memclr
;;;370    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001178  4821              LDR      r0,|L1.4608|
00117a  f7fffffe          BL       strlen
00117e  1c44              ADDS     r4,r0,#1
001180  4623              MOV      r3,r4
001182  4a2e              LDR      r2,|L1.4668|
001184  4925              LDR      r1,|L1.4636|
001186  3154              ADDS     r1,r1,#0x54
001188  482b              LDR      r0,|L1.4664|
00118a  f7fffffe          BL       __2sprintf
;;;371    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00118e  2005              MOVS     r0,#5
001190  4b22              LDR      r3,|L1.4636|
001192  461a              MOV      r2,r3
001194  3278              ADDS     r2,r2,#0x78
001196  a12a              ADR      r1,|L1.4672|
001198  9000              STR      r0,[sp,#0]
00119a  4827              LDR      r0,|L1.4664|
00119c  f7fffffe          BL       send_SD
;;;372    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;373    //	if(strstr(uart_string_gsm,"ERROR")){
;;;374    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;375    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;376    //	}
;;;377    	
;;;378    clear();	
0011a0  f7fffffe          BL       clear
;;;379    									k2=0;									//string array counter for uart 1
0011a4  2000              MOVS     r0,#0
0011a6  4927              LDR      r1,|L1.4676|
0011a8  6008              STR      r0,[r1,#0]  ; k2
;;;380    									tout=0;	
0011aa  4921              LDR      r1,|L1.4656|
0011ac  6008              STR      r0,[r1,#0]  ; tout
;;;381    		for(k=0;k<strlen(data);k++)
0011ae  4915              LDR      r1,|L1.4612|
0011b0  6008              STR      r0,[r1,#0]  ; k
0011b2  e00b              B        |L1.4556|
                  |L1.4532|
;;;382    		{
;;;383    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0011b4  4812              LDR      r0,|L1.4608|
0011b6  4a13              LDR      r2,|L1.4612|
0011b8  6812              LDR      r2,[r2,#0]  ; k
0011ba  5c81              LDRB     r1,[r0,r2]
0011bc  4812              LDR      r0,|L1.4616|
0011be  f7fffffe          BL       uart_putchar
0011c2  4810              LDR      r0,|L1.4612|
0011c4  6800              LDR      r0,[r0,#0]            ;381  ; k
0011c6  1c40              ADDS     r0,r0,#1              ;381
0011c8  490e              LDR      r1,|L1.4612|
0011ca  6008              STR      r0,[r1,#0]            ;381  ; k
                  |L1.4556|
0011cc  480c              LDR      r0,|L1.4608|
0011ce  f7fffffe          BL       strlen
0011d2  490c              LDR      r1,|L1.4612|
0011d4  6809              LDR      r1,[r1,#0]            ;381  ; k
0011d6  4288              CMP      r0,r1                 ;381
0011d8  d8ec              BHI      |L1.4532|
;;;384    		}	
;;;385    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0011da  210a              MOVS     r1,#0xa
0011dc  480a              LDR      r0,|L1.4616|
0011de  f7fffffe          BL       uart_putchar
0011e2  210a              MOVS     r1,#0xa
0011e4  4808              LDR      r0,|L1.4616|
0011e6  f7fffffe          BL       uart_putchar
0011ea  210a              MOVS     r1,#0xa
0011ec  4806              LDR      r0,|L1.4616|
0011ee  f7fffffe          BL       uart_putchar
0011f2  210a              MOVS     r1,#0xa
0011f4  4804              LDR      r0,|L1.4616|
0011f6  f7fffffe          BL       uart_putchar
0011fa  210a              MOVS     r1,#0xa
0011fc  4802              LDR      r0,|L1.4616|
0011fe  e023              B        |L1.4680|
                  |L1.4608|
                          DCD      data
                  |L1.4612|
                          DCD      k
                  |L1.4616|
                          DCD      0x4006b000
                  |L1.4620|
                          DCD      len
                  |L1.4624|
                          DCD      ||.text||+0x474
                  |L1.4628|
                          DCD      uart_string_gsm
                  |L1.4632|
                          DCD      stcond1
                  |L1.4636|
                          DCD      ||.text||+0x870
                  |L1.4640|
                          DCD      stcond2
                  |L1.4644|
                          DCD      ||.text||+0xde4
                  |L1.4648|
                          DCD      stcond3
                  |L1.4652|
                          DCD      stcond4
                  |L1.4656|
                          DCD      tout
                  |L1.4660|
                          DCD      con1d
                  |L1.4664|
                          DCD      at_
                  |L1.4668|
                          DCD      drive
                  |L1.4672|
001240  3e00              DCB      ">",0
001242  00                DCB      0
001243  00                DCB      0
                  |L1.4676|
                          DCD      ||k2||
                  |L1.4680|
001248  f7fffffe          BL       uart_putchar
00124c  210a              MOVS     r1,#0xa
00124e  48fe              LDR      r0,|L1.5704|
001250  f7fffffe          BL       uart_putchar
001254  210a              MOVS     r1,#0xa
001256  48fc              LDR      r0,|L1.5704|
001258  f7fffffe          BL       uart_putchar
00125c  210a              MOVS     r1,#0xa
00125e  48fa              LDR      r0,|L1.5704|
001260  f7fffffe          BL       uart_putchar
001264  210a              MOVS     r1,#0xa
001266  48f8              LDR      r0,|L1.5704|
001268  f7fffffe          BL       uart_putchar
00126c  210a              MOVS     r1,#0xa
00126e  48f6              LDR      r0,|L1.5704|
001270  f7fffffe          BL       uart_putchar
001274  210a              MOVS     r1,#0xa
001276  48f4              LDR      r0,|L1.5704|
001278  f7fffffe          BL       uart_putchar
00127c  210a              MOVS     r1,#0xa
00127e  48f2              LDR      r0,|L1.5704|
001280  f7fffffe          BL       uart_putchar
001284  210a              MOVS     r1,#0xa
001286  48f0              LDR      r0,|L1.5704|
001288  f7fffffe          BL       uart_putchar
00128c  210a              MOVS     r1,#0xa
00128e  48ee              LDR      r0,|L1.5704|
001290  f7fffffe          BL       uart_putchar
001294  210a              MOVS     r1,#0xa
001296  48ec              LDR      r0,|L1.5704|
001298  f7fffffe          BL       uart_putchar
00129c  210a              MOVS     r1,#0xa
00129e  48ea              LDR      r0,|L1.5704|
0012a0  f7fffffe          BL       uart_putchar
0012a4  210a              MOVS     r1,#0xa
0012a6  48e8              LDR      r0,|L1.5704|
0012a8  f7fffffe          BL       uart_putchar
0012ac  210a              MOVS     r1,#0xa
0012ae  48e6              LDR      r0,|L1.5704|
0012b0  f7fffffe          BL       uart_putchar
0012b4  210a              MOVS     r1,#0xa
0012b6  48e4              LDR      r0,|L1.5704|
0012b8  f7fffffe          BL       uart_putchar
0012bc  210a              MOVS     r1,#0xa
0012be  48e2              LDR      r0,|L1.5704|
0012c0  f7fffffe          BL       uart_putchar
0012c4  210a              MOVS     r1,#0xa
0012c6  48e0              LDR      r0,|L1.5704|
0012c8  f7fffffe          BL       uart_putchar
0012cc  210a              MOVS     r1,#0xa
0012ce  48de              LDR      r0,|L1.5704|
0012d0  f7fffffe          BL       uart_putchar
0012d4  210a              MOVS     r1,#0xa
0012d6  48dc              LDR      r0,|L1.5704|
0012d8  f7fffffe          BL       uart_putchar
0012dc  210a              MOVS     r1,#0xa
0012de  48da              LDR      r0,|L1.5704|
0012e0  f7fffffe          BL       uart_putchar
0012e4  210a              MOVS     r1,#0xa
0012e6  48d8              LDR      r0,|L1.5704|
0012e8  f7fffffe          BL       uart_putchar
0012ec  210a              MOVS     r1,#0xa
0012ee  48d6              LDR      r0,|L1.5704|
0012f0  f7fffffe          BL       uart_putchar
0012f4  210a              MOVS     r1,#0xa
0012f6  48d4              LDR      r0,|L1.5704|
0012f8  f7fffffe          BL       uart_putchar
0012fc  210a              MOVS     r1,#0xa
0012fe  48d2              LDR      r0,|L1.5704|
001300  f7fffffe          BL       uart_putchar
001304  210a              MOVS     r1,#0xa
001306  48d0              LDR      r0,|L1.5704|
001308  f7fffffe          BL       uart_putchar
00130c  210a              MOVS     r1,#0xa
00130e  48ce              LDR      r0,|L1.5704|
001310  f7fffffe          BL       uart_putchar
001314  210a              MOVS     r1,#0xa
001316  48cc              LDR      r0,|L1.5704|
001318  f7fffffe          BL       uart_putchar
00131c  210a              MOVS     r1,#0xa
00131e  48ca              LDR      r0,|L1.5704|
001320  f7fffffe          BL       uart_putchar
001324  210a              MOVS     r1,#0xa
001326  48c8              LDR      r0,|L1.5704|
001328  f7fffffe          BL       uart_putchar
00132c  210a              MOVS     r1,#0xa
00132e  48c6              LDR      r0,|L1.5704|
001330  f7fffffe          BL       uart_putchar
001334  210a              MOVS     r1,#0xa
001336  48c4              LDR      r0,|L1.5704|
001338  f7fffffe          BL       uart_putchar
00133c  210a              MOVS     r1,#0xa
00133e  48c2              LDR      r0,|L1.5704|
001340  f7fffffe          BL       uart_putchar
001344  210a              MOVS     r1,#0xa
001346  48c0              LDR      r0,|L1.5704|
001348  f7fffffe          BL       uart_putchar
00134c  210a              MOVS     r1,#0xa
00134e  48be              LDR      r0,|L1.5704|
001350  f7fffffe          BL       uart_putchar
001354  210a              MOVS     r1,#0xa
001356  48bc              LDR      r0,|L1.5704|
001358  f7fffffe          BL       uart_putchar
00135c  210a              MOVS     r1,#0xa
00135e  48ba              LDR      r0,|L1.5704|
001360  f7fffffe          BL       uart_putchar
001364  210a              MOVS     r1,#0xa
001366  48b8              LDR      r0,|L1.5704|
001368  f7fffffe          BL       uart_putchar
00136c  210a              MOVS     r1,#0xa
00136e  48b6              LDR      r0,|L1.5704|
001370  f7fffffe          BL       uart_putchar
001374  210a              MOVS     r1,#0xa
001376  48b4              LDR      r0,|L1.5704|
001378  f7fffffe          BL       uart_putchar
00137c  210a              MOVS     r1,#0xa
00137e  48b2              LDR      r0,|L1.5704|
001380  f7fffffe          BL       uart_putchar
001384  210a              MOVS     r1,#0xa
001386  48b0              LDR      r0,|L1.5704|
001388  f7fffffe          BL       uart_putchar
00138c  210a              MOVS     r1,#0xa
00138e  48ae              LDR      r0,|L1.5704|
001390  f7fffffe          BL       uart_putchar
001394  210a              MOVS     r1,#0xa
001396  48ac              LDR      r0,|L1.5704|
001398  f7fffffe          BL       uart_putchar
00139c  210a              MOVS     r1,#0xa
00139e  48aa              LDR      r0,|L1.5704|
0013a0  f7fffffe          BL       uart_putchar
0013a4  210a              MOVS     r1,#0xa
0013a6  48a8              LDR      r0,|L1.5704|
0013a8  f7fffffe          BL       uart_putchar
0013ac  210a              MOVS     r1,#0xa
0013ae  48a6              LDR      r0,|L1.5704|
0013b0  f7fffffe          BL       uart_putchar
0013b4  210a              MOVS     r1,#0xa
0013b6  48a4              LDR      r0,|L1.5704|
0013b8  f7fffffe          BL       uart_putchar
0013bc  210a              MOVS     r1,#0xa
0013be  48a2              LDR      r0,|L1.5704|
0013c0  f7fffffe          BL       uart_putchar
0013c4  210a              MOVS     r1,#0xa
0013c6  48a0              LDR      r0,|L1.5704|
0013c8  f7fffffe          BL       uart_putchar
0013cc  210a              MOVS     r1,#0xa
0013ce  489e              LDR      r0,|L1.5704|
0013d0  f7fffffe          BL       uart_putchar
0013d4  210a              MOVS     r1,#0xa
0013d6  489c              LDR      r0,|L1.5704|
0013d8  f7fffffe          BL       uart_putchar
0013dc  210a              MOVS     r1,#0xa
0013de  489a              LDR      r0,|L1.5704|
0013e0  f7fffffe          BL       uart_putchar
0013e4  210a              MOVS     r1,#0xa
0013e6  4898              LDR      r0,|L1.5704|
0013e8  f7fffffe          BL       uart_putchar
;;;386    									//memset(data,0,1000);
;;;387    														//timer counts to wait for characters in uart 1 									
;;;388    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0013ec  bf00              NOP      
                  |L1.5102|
0013ee  4997              LDR      r1,|L1.5708|
0013f0  4897              LDR      r0,|L1.5712|
0013f2  f7fffffe          BL       strstr
0013f6  2800              CMP      r0,#0
0013f8  d10a              BNE      |L1.5136|
0013fa  4994              LDR      r1,|L1.5708|
0013fc  398c              SUBS     r1,r1,#0x8c
0013fe  4894              LDR      r0,|L1.5712|
001400  f7fffffe          BL       strstr
001404  2800              CMP      r0,#0
001406  d103              BNE      |L1.5136|
001408  4892              LDR      r0,|L1.5716|
00140a  6800              LDR      r0,[r0,#0]  ; tout
00140c  2805              CMP      r0,#5
00140e  ddee              BLE      |L1.5102|
                  |L1.5136|
;;;389    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;390    									}
;;;391    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001410  f7fffffe          BL       clear
;;;392    									//clear();
;;;393    									memset(data,0,strlen(data));
001414  4890              LDR      r0,|L1.5720|
001416  f7fffffe          BL       strlen
00141a  4604              MOV      r4,r0
00141c  4621              MOV      r1,r4
00141e  488e              LDR      r0,|L1.5720|
001420  f7fffffe          BL       __aeabi_memclr
;;;394    									clear();
001424  f7fffffe          BL       clear
001428  e001              B        |L1.5166|
                  |L1.5162|
;;;395    
;;;396    								
;;;397    									
;;;398    									
;;;399    									//log_it();			//otherwize log it					
;;;400    								}
;;;401    
;;;402    																
;;;403    //delay(50);
;;;404    
;;;405    //else{
;;;406    //log_it();}
;;;407    								
;;;408    								
;;;409    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;410    	else
;;;411    	{
;;;412    		send_chunk();
00142a  f7fffffe          BL       send_chunk
                  |L1.5166|
;;;413    	}		
;;;414    								
;;;415    								
;;;416    								
;;;417    	memset(data,0,strlen(data));	
00142e  488a              LDR      r0,|L1.5720|
001430  f7fffffe          BL       strlen
001434  4604              MOV      r4,r0
001436  4621              MOV      r1,r4
001438  4887              LDR      r0,|L1.5720|
00143a  f7fffffe          BL       __aeabi_memclr
;;;418    	uart_putchar(UART1_BASE_PTR, 0x1A);
00143e  211a              MOVS     r1,#0x1a
001440  4881              LDR      r0,|L1.5704|
001442  f7fffffe          BL       uart_putchar
;;;419    	
;;;420    }
001446  bd38              POP      {r3-r5,pc}
;;;421    	
                          ENDP

                  send_tcp_bal PROC
;;;433    
;;;434    void send_tcp_bal()
001448  b538              PUSH     {r3-r5,lr}
;;;435    {	
;;;436    memset(stcond1,0,strlen(stcond1));	
00144a  4884              LDR      r0,|L1.5724|
00144c  6800              LDR      r0,[r0,#0]  ; stcond1
00144e  f7fffffe          BL       strlen
001452  4604              MOV      r4,r0
001454  4621              MOV      r1,r4
001456  4881              LDR      r0,|L1.5724|
001458  6800              LDR      r0,[r0,#0]  ; stcond1
00145a  f7fffffe          BL       __aeabi_memclr
;;;437    memset(con1d,0,strlen(con1d));	
00145e  4880              LDR      r0,|L1.5728|
001460  6800              LDR      r0,[r0,#0]  ; con1d
001462  f7fffffe          BL       strlen
001466  4604              MOV      r4,r0
001468  4621              MOV      r1,r4
00146a  487d              LDR      r0,|L1.5728|
00146c  6800              LDR      r0,[r0,#0]  ; con1d
00146e  f7fffffe          BL       __aeabi_memclr
;;;438    	
;;;439    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;440    
;;;441    								cond=mystrstr(uart_string_gsm,'>');
001472  213e              MOVS     r1,#0x3e
001474  4876              LDR      r0,|L1.5712|
001476  f7fffffe          BL       mystrstr
00147a  497a              LDR      r1,|L1.5732|
00147c  7008              STRB     r0,[r1,#0]
;;;442    								if(cond)	
00147e  4608              MOV      r0,r1
001480  7800              LDRB     r0,[r0,#0]  ; cond
001482  2800              CMP      r0,#0
001484  d07e              BEQ      |L1.5508|
;;;443    								{
;;;444    									
;;;445    									clear();
001486  f7fffffe          BL       clear
;;;446    									memset(uart_string_gsm,0,5000);
00148a  4977              LDR      r1,|L1.5736|
00148c  4870              LDR      r0,|L1.5712|
00148e  f7fffffe          BL       __aeabi_memclr
;;;447    									strcat(data,"\n\n");
001492  a176              ADR      r1,|L1.5740|
001494  4870              LDR      r0,|L1.5720|
001496  f7fffffe          BL       strcat
;;;448    									len=strlen(data);
00149a  486f              LDR      r0,|L1.5720|
00149c  f7fffffe          BL       strlen
0014a0  4973              LDR      r1,|L1.5744|
0014a2  6008              STR      r0,[r1,#0]  ; len
;;;449    									tout=0;
0014a4  2000              MOVS     r0,#0
0014a6  496b              LDR      r1,|L1.5716|
0014a8  6008              STR      r0,[r1,#0]  ; tout
;;;450    									k2=0;
0014aa  4972              LDR      r1,|L1.5748|
0014ac  6008              STR      r0,[r1,#0]  ; k2
;;;451    									for(k=0;k<len;k++)
0014ae  4972              LDR      r1,|L1.5752|
0014b0  6008              STR      r0,[r1,#0]  ; k
0014b2  e00b              B        |L1.5324|
                  |L1.5300|
;;;452    									{
;;;453    										uart_putchar(UART1_BASE_PTR, data[k]);
0014b4  4868              LDR      r0,|L1.5720|
0014b6  4a70              LDR      r2,|L1.5752|
0014b8  6812              LDR      r2,[r2,#0]  ; k
0014ba  5c81              LDRB     r1,[r0,r2]
0014bc  4862              LDR      r0,|L1.5704|
0014be  f7fffffe          BL       uart_putchar
0014c2  486d              LDR      r0,|L1.5752|
0014c4  6800              LDR      r0,[r0,#0]            ;451  ; k
0014c6  1c40              ADDS     r0,r0,#1              ;451
0014c8  496b              LDR      r1,|L1.5752|
0014ca  6008              STR      r0,[r1,#0]            ;451  ; k
                  |L1.5324|
0014cc  486a              LDR      r0,|L1.5752|
0014ce  6800              LDR      r0,[r0,#0]            ;451  ; k
0014d0  4967              LDR      r1,|L1.5744|
0014d2  6809              LDR      r1,[r1,#0]            ;451  ; len
0014d4  4288              CMP      r0,r1                 ;451
0014d6  dbed              BLT      |L1.5300|
;;;454    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0014d8  211a              MOVS     r1,#0x1a
0014da  485b              LDR      r0,|L1.5704|
0014dc  f7fffffe          BL       uart_putchar
0014e0  211a              MOVS     r1,#0x1a
0014e2  4859              LDR      r0,|L1.5704|
0014e4  f7fffffe          BL       uart_putchar
;;;455    									do
0014e8  bf00              NOP      
                  |L1.5354|
;;;456    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0014ea  4964              LDR      r1,|L1.5756|
0014ec  4858              LDR      r0,|L1.5712|
0014ee  f7fffffe          BL       strstr
0014f2  495a              LDR      r1,|L1.5724|
0014f4  6008              STR      r0,[r1,#0]  ; stcond1
;;;457    																	stcond2=strstr(uart_string_gsm, "ERROR");
0014f6  4955              LDR      r1,|L1.5708|
0014f8  398c              SUBS     r1,r1,#0x8c
0014fa  4855              LDR      r0,|L1.5712|
0014fc  f7fffffe          BL       strstr
001500  495f              LDR      r1,|L1.5760|
001502  6008              STR      r0,[r1,#0]  ; stcond2
;;;458    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001504  495f              LDR      r1,|L1.5764|
001506  4852              LDR      r0,|L1.5712|
001508  f7fffffe          BL       strstr
00150c  495e              LDR      r1,|L1.5768|
00150e  6008              STR      r0,[r1,#0]  ; stcond3
;;;459    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001510  494e              LDR      r1,|L1.5708|
001512  3970              SUBS     r1,r1,#0x70
001514  484e              LDR      r0,|L1.5712|
001516  f7fffffe          BL       strstr
00151a  495c              LDR      r1,|L1.5772|
00151c  6008              STR      r0,[r1,#0]  ; stcond4
;;;460    																	
;;;461    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
00151e  4858              LDR      r0,|L1.5760|
001520  6800              LDR      r0,[r0,#0]  ; stcond2
001522  2800              CMP      r0,#0
001524  d10f              BNE      |L1.5446|
001526  4858              LDR      r0,|L1.5768|
001528  6800              LDR      r0,[r0,#0]  ; stcond3
00152a  2800              CMP      r0,#0
00152c  d10b              BNE      |L1.5446|
00152e  4608              MOV      r0,r1
001530  6800              LDR      r0,[r0,#0]  ; stcond4
001532  2800              CMP      r0,#0
001534  d107              BNE      |L1.5446|
001536  4849              LDR      r0,|L1.5724|
001538  6800              LDR      r0,[r0,#0]  ; stcond1
00153a  2800              CMP      r0,#0
00153c  d103              BNE      |L1.5446|
00153e  4845              LDR      r0,|L1.5716|
001540  6800              LDR      r0,[r0,#0]  ; tout
001542  2805              CMP      r0,#5
001544  ddd1              BLE      |L1.5354|
                  |L1.5446|
;;;462    																//delay(10);clear();
;;;463    														uart_putchar(UART1_BASE_PTR,0x1A);
001546  211a              MOVS     r1,#0x1a
001548  483f              LDR      r0,|L1.5704|
00154a  f7fffffe          BL       uart_putchar
;;;464    												//delay(10);
;;;465    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00154e  211a              MOVS     r1,#0x1a
001550  483d              LDR      r0,|L1.5704|
001552  f7fffffe          BL       uart_putchar
001556  211a              MOVS     r1,#0x1a
001558  483b              LDR      r0,|L1.5704|
00155a  f7fffffe          BL       uart_putchar
00155e  211a              MOVS     r1,#0x1a
001560  4839              LDR      r0,|L1.5704|
001562  f7fffffe          BL       uart_putchar
;;;466    						
;;;467    									
;;;468    									
;;;469    									
;;;470    									if(flagch==1){		int_erval=temp;flagch=0;	}
001566  484a              LDR      r0,|L1.5776|
001568  6800              LDR      r0,[r0,#0]  ; flagch
00156a  2801              CMP      r0,#1
00156c  d106              BNE      |L1.5500|
00156e  4849              LDR      r0,|L1.5780|
001570  6800              LDR      r0,[r0,#0]  ; temp
001572  4949              LDR      r1,|L1.5784|
001574  6008              STR      r0,[r1,#0]  ; int_erval
001576  2000              MOVS     r0,#0
001578  4945              LDR      r1,|L1.5776|
00157a  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.5500|
;;;471    									
;;;472    									
;;;473    									
;;;474    
;;;475    //									for(k=0;k<len;k++)
;;;476    //									{
;;;477    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;478    //									}
;;;479    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;480    
;;;481    //									
;;;482    //													k2=0;									//string array counter for uart 1
;;;483    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;484    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;485    //																{
;;;486    //																	timeout--;
;;;487    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;488    //
;;;489    									delay(20);															
00157c  2014              MOVS     r0,#0x14
00157e  f7fffffe          BL       delay
;;;490    stcond1=strstr(uart_string_gsm,"SEND OK"); 
001582  e000              B        |L1.5510|
                  |L1.5508|
001584  e005              B        |L1.5522|
                  |L1.5510|
001586  493d              LDR      r1,|L1.5756|
001588  4831              LDR      r0,|L1.5712|
00158a  f7fffffe          BL       strstr
00158e  4933              LDR      r1,|L1.5724|
001590  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.5522|
;;;491    
;;;492    								}
;;;493    
;;;494      //checks for send ok
;;;495    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
001592  4832              LDR      r0,|L1.5724|
001594  6800              LDR      r0,[r0,#0]  ; stcond1
001596  2800              CMP      r0,#0
001598  d001              BEQ      |L1.5534|
00159a  f000ff2d          BL       |L1.9208|
                  |L1.5534|
;;;496    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00159e  211a              MOVS     r1,#0x1a
0015a0  4829              LDR      r0,|L1.5704|
0015a2  f7fffffe          BL       uart_putchar
0015a6  f7fffffe          BL       clear
0015aa  200a              MOVS     r0,#0xa
0015ac  f7fffffe          BL       delay
;;;497    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015b0  211a              MOVS     r1,#0x1a
0015b2  4825              LDR      r0,|L1.5704|
0015b4  f7fffffe          BL       uart_putchar
0015b8  f7fffffe          BL       clear
0015bc  200a              MOVS     r0,#0xa
0015be  f7fffffe          BL       delay
;;;498    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015c2  211a              MOVS     r1,#0x1a
0015c4  4820              LDR      r0,|L1.5704|
0015c6  f7fffffe          BL       uart_putchar
0015ca  f7fffffe          BL       clear
0015ce  200a              MOVS     r0,#0xa
0015d0  f7fffffe          BL       delay
;;;499    							//remove_all_chars(data, '\n', '\n');
;;;500    	
;;;501    		//strcat(data,"CH\n");	
;;;502    		
;;;503    	
;;;504    	
;;;505    	delay(100);
0015d4  2064              MOVS     r0,#0x64
0015d6  f7fffffe          BL       delay
;;;506    		clear();//memset(uart_string_gsm,0,5000);
0015da  f7fffffe          BL       clear
;;;507    	
;;;508    	memset(at_,0,100);
0015de  2164              MOVS     r1,#0x64
0015e0  482e              LDR      r0,|L1.5788|
0015e2  f7fffffe          BL       __aeabi_memclr
;;;509    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0015e6  481c              LDR      r0,|L1.5720|
0015e8  f7fffffe          BL       strlen
0015ec  1c44              ADDS     r4,r0,#1
0015ee  4623              MOV      r3,r4
0015f0  4a2b              LDR      r2,|L1.5792|
0015f2  4916              LDR      r1,|L1.5708|
0015f4  3938              SUBS     r1,r1,#0x38
0015f6  4829              LDR      r0,|L1.5788|
0015f8  f7fffffe          BL       __2sprintf
;;;510    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0015fc  2005              MOVS     r0,#5
0015fe  4b13              LDR      r3,|L1.5708|
001600  3b8c              SUBS     r3,r3,#0x8c
001602  461a              MOV      r2,r3
001604  3278              ADDS     r2,r2,#0x78
001606  a127              ADR      r1,|L1.5796|
001608  9000              STR      r0,[sp,#0]
00160a  4824              LDR      r0,|L1.5788|
00160c  f7fffffe          BL       send_SD
;;;511    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;512    //	if(strstr(uart_string_gsm,"ERROR")){
;;;513    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;514    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;515    //	}
;;;516    	
;;;517    clear();	
001610  f7fffffe          BL       clear
;;;518    									k2=0;									//string array counter for uart 1
001614  2000              MOVS     r0,#0
001616  4917              LDR      r1,|L1.5748|
001618  6008              STR      r0,[r1,#0]  ; k2
;;;519    									tout=0;	
00161a  490e              LDR      r1,|L1.5716|
00161c  6008              STR      r0,[r1,#0]  ; tout
;;;520    		for(k=0;k<strlen(data);k++)
00161e  4916              LDR      r1,|L1.5752|
001620  6008              STR      r0,[r1,#0]  ; k
001622  e00b              B        |L1.5692|
                  |L1.5668|
;;;521    		{
;;;522    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001624  480c              LDR      r0,|L1.5720|
001626  4a14              LDR      r2,|L1.5752|
001628  6812              LDR      r2,[r2,#0]  ; k
00162a  5c81              LDRB     r1,[r0,r2]
00162c  4806              LDR      r0,|L1.5704|
00162e  f7fffffe          BL       uart_putchar
001632  4811              LDR      r0,|L1.5752|
001634  6800              LDR      r0,[r0,#0]            ;520  ; k
001636  1c40              ADDS     r0,r0,#1              ;520
001638  490f              LDR      r1,|L1.5752|
00163a  6008              STR      r0,[r1,#0]            ;520  ; k
                  |L1.5692|
00163c  4806              LDR      r0,|L1.5720|
00163e  f7fffffe          BL       strlen
001642  490d              LDR      r1,|L1.5752|
001644  6809              LDR      r1,[r1,#0]            ;520  ; k
001646  e02f              B        |L1.5800|
                  |L1.5704|
                          DCD      0x4006b000
                  |L1.5708|
                          DCD      ||.text||+0x8fc
                  |L1.5712|
                          DCD      uart_string_gsm
                  |L1.5716|
                          DCD      tout
                  |L1.5720|
                          DCD      data
                  |L1.5724|
                          DCD      stcond1
                  |L1.5728|
                          DCD      con1d
                  |L1.5732|
                          DCD      cond
                  |L1.5736|
                          DCD      0x00001388
                  |L1.5740|
00166c  0a0a00            DCB      "\n\n",0
00166f  00                DCB      0
                  |L1.5744|
                          DCD      len
                  |L1.5748|
                          DCD      ||k2||
                  |L1.5752|
                          DCD      k
                  |L1.5756|
                          DCD      ||.text||+0x474
                  |L1.5760|
                          DCD      stcond2
                  |L1.5764|
                          DCD      ||.text||+0xde4
                  |L1.5768|
                          DCD      stcond3
                  |L1.5772|
                          DCD      stcond4
                  |L1.5776|
                          DCD      flagch
                  |L1.5780|
                          DCD      temp
                  |L1.5784|
                          DCD      int_erval
                  |L1.5788|
                          DCD      at_
                  |L1.5792|
                          DCD      drive
                  |L1.5796|
0016a4  3e00              DCB      ">",0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  4288              CMP      r0,r1                 ;520
0016aa  d8bb              BHI      |L1.5668|
;;;523    		}	
;;;524    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0016ac  210a              MOVS     r1,#0xa
0016ae  48fe              LDR      r0,|L1.6824|
0016b0  f7fffffe          BL       uart_putchar
0016b4  210a              MOVS     r1,#0xa
0016b6  48fc              LDR      r0,|L1.6824|
0016b8  f7fffffe          BL       uart_putchar
0016bc  210a              MOVS     r1,#0xa
0016be  48fa              LDR      r0,|L1.6824|
0016c0  f7fffffe          BL       uart_putchar
0016c4  210a              MOVS     r1,#0xa
0016c6  48f8              LDR      r0,|L1.6824|
0016c8  f7fffffe          BL       uart_putchar
0016cc  210a              MOVS     r1,#0xa
0016ce  48f6              LDR      r0,|L1.6824|
0016d0  f7fffffe          BL       uart_putchar
0016d4  210a              MOVS     r1,#0xa
0016d6  48f4              LDR      r0,|L1.6824|
0016d8  f7fffffe          BL       uart_putchar
0016dc  210a              MOVS     r1,#0xa
0016de  48f2              LDR      r0,|L1.6824|
0016e0  f7fffffe          BL       uart_putchar
0016e4  210a              MOVS     r1,#0xa
0016e6  48f0              LDR      r0,|L1.6824|
0016e8  f7fffffe          BL       uart_putchar
0016ec  210a              MOVS     r1,#0xa
0016ee  48ee              LDR      r0,|L1.6824|
0016f0  f7fffffe          BL       uart_putchar
0016f4  210a              MOVS     r1,#0xa
0016f6  48ec              LDR      r0,|L1.6824|
0016f8  f7fffffe          BL       uart_putchar
0016fc  210a              MOVS     r1,#0xa
0016fe  48ea              LDR      r0,|L1.6824|
001700  f7fffffe          BL       uart_putchar
001704  210a              MOVS     r1,#0xa
001706  48e8              LDR      r0,|L1.6824|
001708  f7fffffe          BL       uart_putchar
00170c  210a              MOVS     r1,#0xa
00170e  48e6              LDR      r0,|L1.6824|
001710  f7fffffe          BL       uart_putchar
001714  210a              MOVS     r1,#0xa
001716  48e4              LDR      r0,|L1.6824|
001718  f7fffffe          BL       uart_putchar
00171c  210a              MOVS     r1,#0xa
00171e  48e2              LDR      r0,|L1.6824|
001720  f7fffffe          BL       uart_putchar
001724  210a              MOVS     r1,#0xa
001726  48e0              LDR      r0,|L1.6824|
001728  f7fffffe          BL       uart_putchar
00172c  210a              MOVS     r1,#0xa
00172e  48de              LDR      r0,|L1.6824|
001730  f7fffffe          BL       uart_putchar
001734  210a              MOVS     r1,#0xa
001736  48dc              LDR      r0,|L1.6824|
001738  f7fffffe          BL       uart_putchar
00173c  210a              MOVS     r1,#0xa
00173e  48da              LDR      r0,|L1.6824|
001740  f7fffffe          BL       uart_putchar
001744  210a              MOVS     r1,#0xa
001746  48d8              LDR      r0,|L1.6824|
001748  f7fffffe          BL       uart_putchar
00174c  210a              MOVS     r1,#0xa
00174e  48d6              LDR      r0,|L1.6824|
001750  f7fffffe          BL       uart_putchar
001754  210a              MOVS     r1,#0xa
001756  48d4              LDR      r0,|L1.6824|
001758  f7fffffe          BL       uart_putchar
00175c  210a              MOVS     r1,#0xa
00175e  48d2              LDR      r0,|L1.6824|
001760  f7fffffe          BL       uart_putchar
001764  210a              MOVS     r1,#0xa
001766  48d0              LDR      r0,|L1.6824|
001768  f7fffffe          BL       uart_putchar
00176c  210a              MOVS     r1,#0xa
00176e  48ce              LDR      r0,|L1.6824|
001770  f7fffffe          BL       uart_putchar
001774  210a              MOVS     r1,#0xa
001776  48cc              LDR      r0,|L1.6824|
001778  f7fffffe          BL       uart_putchar
00177c  210a              MOVS     r1,#0xa
00177e  48ca              LDR      r0,|L1.6824|
001780  f7fffffe          BL       uart_putchar
001784  210a              MOVS     r1,#0xa
001786  48c8              LDR      r0,|L1.6824|
001788  f7fffffe          BL       uart_putchar
00178c  210a              MOVS     r1,#0xa
00178e  48c6              LDR      r0,|L1.6824|
001790  f7fffffe          BL       uart_putchar
001794  210a              MOVS     r1,#0xa
001796  48c4              LDR      r0,|L1.6824|
001798  f7fffffe          BL       uart_putchar
00179c  210a              MOVS     r1,#0xa
00179e  48c2              LDR      r0,|L1.6824|
0017a0  f7fffffe          BL       uart_putchar
0017a4  210a              MOVS     r1,#0xa
0017a6  48c0              LDR      r0,|L1.6824|
0017a8  f7fffffe          BL       uart_putchar
0017ac  210a              MOVS     r1,#0xa
0017ae  48be              LDR      r0,|L1.6824|
0017b0  f7fffffe          BL       uart_putchar
0017b4  210a              MOVS     r1,#0xa
0017b6  48bc              LDR      r0,|L1.6824|
0017b8  f7fffffe          BL       uart_putchar
0017bc  210a              MOVS     r1,#0xa
0017be  48ba              LDR      r0,|L1.6824|
0017c0  f7fffffe          BL       uart_putchar
0017c4  210a              MOVS     r1,#0xa
0017c6  48b8              LDR      r0,|L1.6824|
0017c8  f7fffffe          BL       uart_putchar
0017cc  210a              MOVS     r1,#0xa
0017ce  48b6              LDR      r0,|L1.6824|
0017d0  f7fffffe          BL       uart_putchar
0017d4  210a              MOVS     r1,#0xa
0017d6  48b4              LDR      r0,|L1.6824|
0017d8  f7fffffe          BL       uart_putchar
0017dc  210a              MOVS     r1,#0xa
0017de  48b2              LDR      r0,|L1.6824|
0017e0  f7fffffe          BL       uart_putchar
0017e4  210a              MOVS     r1,#0xa
0017e6  48b0              LDR      r0,|L1.6824|
0017e8  f7fffffe          BL       uart_putchar
0017ec  210a              MOVS     r1,#0xa
0017ee  48ae              LDR      r0,|L1.6824|
0017f0  f7fffffe          BL       uart_putchar
0017f4  210a              MOVS     r1,#0xa
0017f6  48ac              LDR      r0,|L1.6824|
0017f8  f7fffffe          BL       uart_putchar
0017fc  210a              MOVS     r1,#0xa
0017fe  48aa              LDR      r0,|L1.6824|
001800  f7fffffe          BL       uart_putchar
001804  210a              MOVS     r1,#0xa
001806  48a8              LDR      r0,|L1.6824|
001808  f7fffffe          BL       uart_putchar
00180c  210a              MOVS     r1,#0xa
00180e  48a6              LDR      r0,|L1.6824|
001810  f7fffffe          BL       uart_putchar
001814  210a              MOVS     r1,#0xa
001816  48a4              LDR      r0,|L1.6824|
001818  f7fffffe          BL       uart_putchar
00181c  210a              MOVS     r1,#0xa
00181e  48a2              LDR      r0,|L1.6824|
001820  f7fffffe          BL       uart_putchar
001824  210a              MOVS     r1,#0xa
001826  48a0              LDR      r0,|L1.6824|
001828  f7fffffe          BL       uart_putchar
00182c  210a              MOVS     r1,#0xa
00182e  489e              LDR      r0,|L1.6824|
001830  f7fffffe          BL       uart_putchar
001834  210a              MOVS     r1,#0xa
001836  489c              LDR      r0,|L1.6824|
001838  f7fffffe          BL       uart_putchar
00183c  210a              MOVS     r1,#0xa
00183e  489a              LDR      r0,|L1.6824|
001840  f7fffffe          BL       uart_putchar
001844  210a              MOVS     r1,#0xa
001846  4898              LDR      r0,|L1.6824|
001848  f7fffffe          BL       uart_putchar
00184c  210a              MOVS     r1,#0xa
00184e  4896              LDR      r0,|L1.6824|
001850  f7fffffe          BL       uart_putchar
001854  210a              MOVS     r1,#0xa
001856  4894              LDR      r0,|L1.6824|
001858  f7fffffe          BL       uart_putchar
00185c  210a              MOVS     r1,#0xa
00185e  4892              LDR      r0,|L1.6824|
001860  f7fffffe          BL       uart_putchar
001864  210a              MOVS     r1,#0xa
001866  4890              LDR      r0,|L1.6824|
001868  f7fffffe          BL       uart_putchar
00186c  210a              MOVS     r1,#0xa
00186e  488e              LDR      r0,|L1.6824|
001870  f7fffffe          BL       uart_putchar
;;;525    									//memset(data,0,1000);
;;;526    														//timer counts to wait for characters in uart 1 									
;;;527    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001874  bf00              NOP      
                  |L1.6262|
001876  498d              LDR      r1,|L1.6828|
001878  488d              LDR      r0,|L1.6832|
00187a  f7fffffe          BL       strstr
00187e  2800              CMP      r0,#0
001880  d10a              BNE      |L1.6296|
001882  498a              LDR      r1,|L1.6828|
001884  398c              SUBS     r1,r1,#0x8c
001886  488a              LDR      r0,|L1.6832|
001888  f7fffffe          BL       strstr
00188c  2800              CMP      r0,#0
00188e  d103              BNE      |L1.6296|
001890  4888              LDR      r0,|L1.6836|
001892  6800              LDR      r0,[r0,#0]  ; tout
001894  2805              CMP      r0,#5
001896  ddee              BLE      |L1.6262|
                  |L1.6296|
;;;528    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;529    									}
;;;530    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001898  f7fffffe          BL       clear
;;;531    									//clear();
;;;532    									memset(data,0,strlen(data));
00189c  4886              LDR      r0,|L1.6840|
00189e  f7fffffe          BL       strlen
0018a2  4604              MOV      r4,r0
0018a4  4621              MOV      r1,r4
0018a6  4884              LDR      r0,|L1.6840|
0018a8  f7fffffe          BL       __aeabi_memclr
;;;533    									clear();
0018ac  f7fffffe          BL       clear
;;;534    
;;;535    								
;;;536    	
;;;537    	
;;;538    	//log_it();		                         //logging
;;;539    		memset(data,0,strlen(data));	
0018b0  4881              LDR      r0,|L1.6840|
0018b2  f7fffffe          BL       strlen
0018b6  4604              MOV      r4,r0
0018b8  4621              MOV      r1,r4
0018ba  487f              LDR      r0,|L1.6840|
0018bc  f7fffffe          BL       __aeabi_memclr
;;;540    
;;;541    					   	if(flagch!=1){
0018c0  487e              LDR      r0,|L1.6844|
0018c2  6800              LDR      r0,[r0,#0]  ; flagch
0018c4  2801              CMP      r0,#1
0018c6  d009              BEQ      |L1.6364|
;;;542    							temp=int_erval;				
0018c8  487d              LDR      r0,|L1.6848|
0018ca  6800              LDR      r0,[r0,#0]  ; int_erval
0018cc  497d              LDR      r1,|L1.6852|
0018ce  6008              STR      r0,[r1,#0]  ; temp
;;;543    							int_erval=4;
0018d0  2004              MOVS     r0,#4
0018d2  497b              LDR      r1,|L1.6848|
0018d4  6008              STR      r0,[r1,#0]  ; int_erval
;;;544    							flagch=1;}
0018d6  2001              MOVS     r0,#1
0018d8  4978              LDR      r1,|L1.6844|
0018da  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.6364|
;;;545    							clear();	
0018dc  f7fffffe          BL       clear
;;;546    									GPS_COLLECT();
0018e0  f7fffffe          BL       GPS_COLLECT
;;;547    									strcat(data,"CH\n");	
0018e4  4971              LDR      r1,|L1.6828|
0018e6  3944              SUBS     r1,r1,#0x44
0018e8  4873              LDR      r0,|L1.6840|
0018ea  f7fffffe          BL       strcat
;;;548    
;;;549    //*************************************tcp_initialization();//reinitialization************************//
;;;550    
;;;551    	
;;;552    msg_sim800(); 
0018ee  f7fffffe          BL       msg_sim800
;;;553    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0018f2  2005              MOVS     r0,#5
0018f4  4b6d              LDR      r3,|L1.6828|
0018f6  3b8c              SUBS     r3,r3,#0x8c
0018f8  461a              MOV      r2,r3
0018fa  3278              ADDS     r2,r2,#0x78
0018fc  a172              ADR      r1,|L1.6856|
0018fe  9000              STR      r0,[sp,#0]
001900  4610              MOV      r0,r2
001902  3020              ADDS     r0,r0,#0x20
001904  f7fffffe          BL       send_GSM
;;;554    delay(100);
001908  2064              MOVS     r0,#0x64
00190a  f7fffffe          BL       delay
;;;555    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00190e  2004              MOVS     r0,#4
001910  4b66              LDR      r3,|L1.6828|
001912  3b8c              SUBS     r3,r3,#0x8c
001914  461a              MOV      r2,r3
001916  32a8              ADDS     r2,r2,#0xa8
001918  a16b              ADR      r1,|L1.6856|
00191a  9000              STR      r0,[sp,#0]
00191c  4610              MOV      r0,r2
00191e  3014              ADDS     r0,r0,#0x14
001920  f7fffffe          BL       send_GSM
;;;556    GPS_COLLECT2();
001924  f7fffffe          BL       GPS_COLLECT2
;;;557    strcat(data,"CH\n");		
001928  4960              LDR      r1,|L1.6828|
00192a  3944              SUBS     r1,r1,#0x44
00192c  4862              LDR      r0,|L1.6840|
00192e  f7fffffe          BL       strcat
;;;558    GPS_COLLECT2();
001932  f7fffffe          BL       GPS_COLLECT2
;;;559    strcat(data,"CH\n");	
001936  495d              LDR      r1,|L1.6828|
001938  3944              SUBS     r1,r1,#0x44
00193a  485f              LDR      r0,|L1.6840|
00193c  f7fffffe          BL       strcat
;;;560    GPS_COLLECT2();
001940  f7fffffe          BL       GPS_COLLECT2
;;;561    strcat(data,"CH\n");
001944  4959              LDR      r1,|L1.6828|
001946  3944              SUBS     r1,r1,#0x44
001948  485b              LDR      r0,|L1.6840|
00194a  f7fffffe          BL       strcat
;;;562    cond201=(strstr(uart_string_gsm, "OK"));
00194e  a15e              ADR      r1,|L1.6856|
001950  4857              LDR      r0,|L1.6832|
001952  f7fffffe          BL       strstr
001956  495d              LDR      r1,|L1.6860|
001958  6008              STR      r0,[r1,#0]  ; cond201
;;;563    cond200=(strstr(uart_string_gsm, "ERROR"));
00195a  4954              LDR      r1,|L1.6828|
00195c  398c              SUBS     r1,r1,#0x8c
00195e  4854              LDR      r0,|L1.6832|
001960  f7fffffe          BL       strstr
001964  495a              LDR      r1,|L1.6864|
001966  6008              STR      r0,[r1,#0]  ; cond200
;;;564    if((!(cond201|| cond200 ))  && sleep_flag != 1)
001968  4858              LDR      r0,|L1.6860|
00196a  6800              LDR      r0,[r0,#0]  ; cond201
00196c  2800              CMP      r0,#0
                  |L1.6510|
00196e  d17d              BNE      |L1.6764|
001970  4608              MOV      r0,r1
001972  6800              LDR      r0,[r0,#0]  ; cond200
001974  2800              CMP      r0,#0
001976  d1fa              BNE      |L1.6510|
001978  4856              LDR      r0,|L1.6868|
00197a  6800              LDR      r0,[r0,#0]  ; sleep_flag
00197c  2801              CMP      r0,#1
00197e  d075              BEQ      |L1.6764|
;;;565    {
;;;566    delay(100);
001980  2064              MOVS     r0,#0x64
001982  f7fffffe          BL       delay
;;;567    clear();//memset(uart_string_gsm,0,5000);
001986  f7fffffe          BL       clear
;;;568    memset(at_,0,100);
00198a  2164              MOVS     r1,#0x64
00198c  4852              LDR      r0,|L1.6872|
00198e  f7fffffe          BL       __aeabi_memclr
;;;569    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001992  4849              LDR      r0,|L1.6840|
001994  f7fffffe          BL       strlen
001998  1c44              ADDS     r4,r0,#1
00199a  4623              MOV      r3,r4
00199c  4a4f              LDR      r2,|L1.6876|
00199e  4943              LDR      r1,|L1.6828|
0019a0  3938              SUBS     r1,r1,#0x38
0019a2  484d              LDR      r0,|L1.6872|
0019a4  f7fffffe          BL       __2sprintf
;;;570    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0019a8  2005              MOVS     r0,#5
0019aa  4b40              LDR      r3,|L1.6828|
0019ac  3b8c              SUBS     r3,r3,#0x8c
0019ae  461a              MOV      r2,r3
0019b0  3278              ADDS     r2,r2,#0x78
0019b2  a14b              ADR      r1,|L1.6880|
0019b4  9000              STR      r0,[sp,#0]
0019b6  4848              LDR      r0,|L1.6872|
0019b8  f7fffffe          BL       send_SD
;;;571    clear();	
0019bc  f7fffffe          BL       clear
;;;572    k2=0;									//string array counter for uart 1
0019c0  2000              MOVS     r0,#0
0019c2  4948              LDR      r1,|L1.6884|
0019c4  6008              STR      r0,[r1,#0]  ; k2
;;;573    tout=0;	
0019c6  493b              LDR      r1,|L1.6836|
0019c8  6008              STR      r0,[r1,#0]  ; tout
;;;574    for(k=0;k<strlen(data);k++)
0019ca  4947              LDR      r1,|L1.6888|
0019cc  6008              STR      r0,[r1,#0]  ; k
0019ce  e00b              B        |L1.6632|
                  |L1.6608|
;;;575    {
;;;576    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0019d0  4839              LDR      r0,|L1.6840|
0019d2  4a45              LDR      r2,|L1.6888|
0019d4  6812              LDR      r2,[r2,#0]  ; k
0019d6  5c81              LDRB     r1,[r0,r2]
0019d8  4833              LDR      r0,|L1.6824|
0019da  f7fffffe          BL       uart_putchar
0019de  4842              LDR      r0,|L1.6888|
0019e0  6800              LDR      r0,[r0,#0]            ;574  ; k
0019e2  1c40              ADDS     r0,r0,#1              ;574
0019e4  4940              LDR      r1,|L1.6888|
0019e6  6008              STR      r0,[r1,#0]            ;574  ; k
                  |L1.6632|
0019e8  4833              LDR      r0,|L1.6840|
0019ea  f7fffffe          BL       strlen
0019ee  493e              LDR      r1,|L1.6888|
0019f0  6809              LDR      r1,[r1,#0]            ;574  ; k
0019f2  4288              CMP      r0,r1                 ;574
0019f4  d8ec              BHI      |L1.6608|
;;;577    }	
;;;578    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0019f6  210a              MOVS     r1,#0xa
0019f8  482b              LDR      r0,|L1.6824|
0019fa  f7fffffe          BL       uart_putchar
0019fe  210a              MOVS     r1,#0xa
001a00  4829              LDR      r0,|L1.6824|
001a02  f7fffffe          BL       uart_putchar
001a06  210a              MOVS     r1,#0xa
001a08  4827              LDR      r0,|L1.6824|
001a0a  f7fffffe          BL       uart_putchar
001a0e  210a              MOVS     r1,#0xa
001a10  4825              LDR      r0,|L1.6824|
001a12  f7fffffe          BL       uart_putchar
001a16  210a              MOVS     r1,#0xa
001a18  4823              LDR      r0,|L1.6824|
001a1a  f7fffffe          BL       uart_putchar
001a1e  210a              MOVS     r1,#0xa
001a20  4821              LDR      r0,|L1.6824|
001a22  f7fffffe          BL       uart_putchar
001a26  210a              MOVS     r1,#0xa
001a28  481f              LDR      r0,|L1.6824|
001a2a  f7fffffe          BL       uart_putchar
001a2e  210a              MOVS     r1,#0xa
001a30  481d              LDR      r0,|L1.6824|
001a32  f7fffffe          BL       uart_putchar
001a36  210a              MOVS     r1,#0xa
001a38  481b              LDR      r0,|L1.6824|
001a3a  f7fffffe          BL       uart_putchar
001a3e  210a              MOVS     r1,#0xa
001a40  4819              LDR      r0,|L1.6824|
001a42  f7fffffe          BL       uart_putchar
001a46  210a              MOVS     r1,#0xa
001a48  4817              LDR      r0,|L1.6824|
001a4a  f7fffffe          BL       uart_putchar
001a4e  210a              MOVS     r1,#0xa
001a50  4815              LDR      r0,|L1.6824|
001a52  f7fffffe          BL       uart_putchar
001a56  210a              MOVS     r1,#0xa
001a58  4813              LDR      r0,|L1.6824|
001a5a  f7fffffe          BL       uart_putchar
001a5e  210a              MOVS     r1,#0xa
001a60  4811              LDR      r0,|L1.6824|
001a62  f7fffffe          BL       uart_putchar
001a66  210a              MOVS     r1,#0xa
001a68  480f              LDR      r0,|L1.6824|
001a6a  e000              B        |L1.6766|
                  |L1.6764|
001a6c  e0f6              B        |L1.7260|
                  |L1.6766|
001a6e  f7fffffe          BL       uart_putchar
001a72  210a              MOVS     r1,#0xa
001a74  480c              LDR      r0,|L1.6824|
001a76  f7fffffe          BL       uart_putchar
001a7a  210a              MOVS     r1,#0xa
001a7c  480a              LDR      r0,|L1.6824|
001a7e  f7fffffe          BL       uart_putchar
001a82  210a              MOVS     r1,#0xa
001a84  4808              LDR      r0,|L1.6824|
001a86  f7fffffe          BL       uart_putchar
001a8a  210a              MOVS     r1,#0xa
001a8c  4806              LDR      r0,|L1.6824|
001a8e  f7fffffe          BL       uart_putchar
001a92  210a              MOVS     r1,#0xa
001a94  4804              LDR      r0,|L1.6824|
001a96  f7fffffe          BL       uart_putchar
001a9a  210a              MOVS     r1,#0xa
001a9c  4802              LDR      r0,|L1.6824|
001a9e  f7fffffe          BL       uart_putchar
001aa2  210a              MOVS     r1,#0xa
001aa4  4800              LDR      r0,|L1.6824|
001aa6  e021              B        |L1.6892|
                  |L1.6824|
                          DCD      0x4006b000
                  |L1.6828|
                          DCD      ||.text||+0x8fc
                  |L1.6832|
                          DCD      uart_string_gsm
                  |L1.6836|
                          DCD      tout
                  |L1.6840|
                          DCD      data
                  |L1.6844|
                          DCD      flagch
                  |L1.6848|
                          DCD      int_erval
                  |L1.6852|
                          DCD      temp
                  |L1.6856|
001ac8  4f4b00            DCB      "OK",0
001acb  00                DCB      0
                  |L1.6860|
                          DCD      cond201
                  |L1.6864|
                          DCD      cond200
                  |L1.6868|
                          DCD      sleep_flag
                  |L1.6872|
                          DCD      at_
                  |L1.6876|
                          DCD      drive
                  |L1.6880|
001ae0  3e00              DCB      ">",0
001ae2  00                DCB      0
001ae3  00                DCB      0
                  |L1.6884|
                          DCD      ||k2||
                  |L1.6888|
                          DCD      k
                  |L1.6892|
001aec  f7fffffe          BL       uart_putchar
001af0  210a              MOVS     r1,#0xa
001af2  48fe              LDR      r0,|L1.7916|
001af4  f7fffffe          BL       uart_putchar
001af8  210a              MOVS     r1,#0xa
001afa  48fc              LDR      r0,|L1.7916|
001afc  f7fffffe          BL       uart_putchar
001b00  210a              MOVS     r1,#0xa
001b02  48fa              LDR      r0,|L1.7916|
001b04  f7fffffe          BL       uart_putchar
001b08  210a              MOVS     r1,#0xa
001b0a  48f8              LDR      r0,|L1.7916|
001b0c  f7fffffe          BL       uart_putchar
001b10  210a              MOVS     r1,#0xa
001b12  48f6              LDR      r0,|L1.7916|
001b14  f7fffffe          BL       uart_putchar
001b18  210a              MOVS     r1,#0xa
001b1a  48f4              LDR      r0,|L1.7916|
001b1c  f7fffffe          BL       uart_putchar
001b20  210a              MOVS     r1,#0xa
001b22  48f2              LDR      r0,|L1.7916|
001b24  f7fffffe          BL       uart_putchar
001b28  210a              MOVS     r1,#0xa
001b2a  48f0              LDR      r0,|L1.7916|
001b2c  f7fffffe          BL       uart_putchar
001b30  210a              MOVS     r1,#0xa
001b32  48ee              LDR      r0,|L1.7916|
001b34  f7fffffe          BL       uart_putchar
001b38  210a              MOVS     r1,#0xa
001b3a  48ec              LDR      r0,|L1.7916|
001b3c  f7fffffe          BL       uart_putchar
001b40  210a              MOVS     r1,#0xa
001b42  48ea              LDR      r0,|L1.7916|
001b44  f7fffffe          BL       uart_putchar
001b48  210a              MOVS     r1,#0xa
001b4a  48e8              LDR      r0,|L1.7916|
001b4c  f7fffffe          BL       uart_putchar
001b50  210a              MOVS     r1,#0xa
001b52  48e6              LDR      r0,|L1.7916|
001b54  f7fffffe          BL       uart_putchar
001b58  210a              MOVS     r1,#0xa
001b5a  48e4              LDR      r0,|L1.7916|
001b5c  f7fffffe          BL       uart_putchar
001b60  210a              MOVS     r1,#0xa
001b62  48e2              LDR      r0,|L1.7916|
001b64  f7fffffe          BL       uart_putchar
001b68  210a              MOVS     r1,#0xa
001b6a  48e0              LDR      r0,|L1.7916|
001b6c  f7fffffe          BL       uart_putchar
001b70  210a              MOVS     r1,#0xa
001b72  48de              LDR      r0,|L1.7916|
001b74  f7fffffe          BL       uart_putchar
001b78  210a              MOVS     r1,#0xa
001b7a  48dc              LDR      r0,|L1.7916|
001b7c  f7fffffe          BL       uart_putchar
001b80  210a              MOVS     r1,#0xa
001b82  48da              LDR      r0,|L1.7916|
001b84  f7fffffe          BL       uart_putchar
001b88  210a              MOVS     r1,#0xa
001b8a  48d8              LDR      r0,|L1.7916|
001b8c  f7fffffe          BL       uart_putchar
001b90  210a              MOVS     r1,#0xa
001b92  48d6              LDR      r0,|L1.7916|
001b94  f7fffffe          BL       uart_putchar
001b98  210a              MOVS     r1,#0xa
001b9a  48d4              LDR      r0,|L1.7916|
001b9c  f7fffffe          BL       uart_putchar
001ba0  210a              MOVS     r1,#0xa
001ba2  48d2              LDR      r0,|L1.7916|
001ba4  f7fffffe          BL       uart_putchar
001ba8  210a              MOVS     r1,#0xa
001baa  48d0              LDR      r0,|L1.7916|
001bac  f7fffffe          BL       uart_putchar
001bb0  210a              MOVS     r1,#0xa
001bb2  48ce              LDR      r0,|L1.7916|
001bb4  f7fffffe          BL       uart_putchar
001bb8  210a              MOVS     r1,#0xa
001bba  48cc              LDR      r0,|L1.7916|
001bbc  f7fffffe          BL       uart_putchar
001bc0  210a              MOVS     r1,#0xa
001bc2  48ca              LDR      r0,|L1.7916|
001bc4  f7fffffe          BL       uart_putchar
001bc8  210a              MOVS     r1,#0xa
001bca  48c8              LDR      r0,|L1.7916|
001bcc  f7fffffe          BL       uart_putchar
001bd0  210a              MOVS     r1,#0xa
001bd2  48c6              LDR      r0,|L1.7916|
001bd4  f7fffffe          BL       uart_putchar
001bd8  210a              MOVS     r1,#0xa
001bda  48c4              LDR      r0,|L1.7916|
001bdc  f7fffffe          BL       uart_putchar
001be0  210a              MOVS     r1,#0xa
001be2  48c2              LDR      r0,|L1.7916|
001be4  f7fffffe          BL       uart_putchar
001be8  210a              MOVS     r1,#0xa
001bea  48c0              LDR      r0,|L1.7916|
001bec  f7fffffe          BL       uart_putchar
001bf0  210a              MOVS     r1,#0xa
001bf2  48be              LDR      r0,|L1.7916|
001bf4  f7fffffe          BL       uart_putchar
001bf8  210a              MOVS     r1,#0xa
001bfa  48bc              LDR      r0,|L1.7916|
001bfc  f7fffffe          BL       uart_putchar
001c00  210a              MOVS     r1,#0xa
001c02  48ba              LDR      r0,|L1.7916|
001c04  f7fffffe          BL       uart_putchar
;;;579    									//memset(data,0,1000);
;;;580    														//timer counts to wait for characters in uart 1 									
;;;581    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001c08  bf00              NOP      
                  |L1.7178|
001c0a  49b9              LDR      r1,|L1.7920|
001c0c  48b9              LDR      r0,|L1.7924|
001c0e  f7fffffe          BL       strstr
001c12  2800              CMP      r0,#0
001c14  d10a              BNE      |L1.7212|
001c16  49b6              LDR      r1,|L1.7920|
001c18  398c              SUBS     r1,r1,#0x8c
001c1a  48b6              LDR      r0,|L1.7924|
001c1c  f7fffffe          BL       strstr
001c20  2800              CMP      r0,#0
001c22  d103              BNE      |L1.7212|
001c24  48b4              LDR      r0,|L1.7928|
001c26  6800              LDR      r0,[r0,#0]  ; tout
001c28  2805              CMP      r0,#5
001c2a  ddee              BLE      |L1.7178|
                  |L1.7212|
;;;582    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;583    									}
;;;584    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001c2c  f7fffffe          BL       clear
;;;585    									//clear();
;;;586    									memset(data,0,strlen(data));
001c30  48b2              LDR      r0,|L1.7932|
001c32  f7fffffe          BL       strlen
001c36  4604              MOV      r4,r0
001c38  4621              MOV      r1,r4
001c3a  48b0              LDR      r0,|L1.7932|
001c3c  f7fffffe          BL       __aeabi_memclr
;;;587    									clear();
001c40  f7fffffe          BL       clear
;;;588    									RESET_OFF;delay(100);
001c44  2020              MOVS     r0,#0x20
001c46  49ae              LDR      r1,|L1.7936|
001c48  6088              STR      r0,[r1,#8]
001c4a  2064              MOVS     r0,#0x64
001c4c  f7fffffe          BL       delay
;;;589    									RESET_ON;delay(100);		
001c50  2020              MOVS     r0,#0x20
001c52  49ab              LDR      r1,|L1.7936|
001c54  6048              STR      r0,[r1,#4]
001c56  2064              MOVS     r0,#0x64
001c58  f7fffffe          BL       delay
                  |L1.7260|
;;;590    }
;;;591    	
;;;592    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001c5c  2004              MOVS     r0,#4
001c5e  4ba9              LDR      r3,|L1.7940|
001c60  4aa3              LDR      r2,|L1.7920|
001c62  3a14              SUBS     r2,r2,#0x14
001c64  a1a8              ADR      r1,|L1.7944|
001c66  9000              STR      r0,[sp,#0]
001c68  4618              MOV      r0,r3
001c6a  300c              ADDS     r0,r0,#0xc
001c6c  f7fffffe          BL       send_GSM
;;;593    GPS_COLLECT2();
001c70  f7fffffe          BL       GPS_COLLECT2
;;;594    strcat(data,"CH\n");	
001c74  499e              LDR      r1,|L1.7920|
001c76  3944              SUBS     r1,r1,#0x44
001c78  48a0              LDR      r0,|L1.7932|
001c7a  f7fffffe          BL       strcat
;;;595    memset(at_,0,100);
001c7e  2164              MOVS     r1,#0x64
001c80  48a2              LDR      r0,|L1.7948|
001c82  f7fffffe          BL       __aeabi_memclr
;;;596    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001c86  4aa2              LDR      r2,|L1.7952|
001c88  499e              LDR      r1,|L1.7940|
001c8a  3120              ADDS     r1,r1,#0x20
001c8c  489f              LDR      r0,|L1.7948|
001c8e  f7fffffe          BL       __2sprintf
;;;597    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
001c92  48a0              LDR      r0,|L1.7956|
001c94  6800              LDR      r0,[r0,#0]  ; tmeout
001c96  4b9b              LDR      r3,|L1.7940|
001c98  4a95              LDR      r2,|L1.7920|
001c9a  3a14              SUBS     r2,r2,#0x14
001c9c  a19a              ADR      r1,|L1.7944|
001c9e  9000              STR      r0,[sp,#0]
001ca0  489a              LDR      r0,|L1.7948|
001ca2  f7fffffe          BL       send_GSM
;;;598    msg_sim800(); 
001ca6  f7fffffe          BL       msg_sim800
;;;599    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
001caa  2004              MOVS     r0,#4
001cac  4b90              LDR      r3,|L1.7920|
001cae  3b70              SUBS     r3,r3,#0x70
001cb0  461a              MOV      r2,r3
001cb2  325c              ADDS     r2,r2,#0x5c
001cb4  a194              ADR      r1,|L1.7944|
001cb6  9000              STR      r0,[sp,#0]
001cb8  4892              LDR      r0,|L1.7940|
001cba  3038              ADDS     r0,r0,#0x38
001cbc  f7fffffe          BL       send_GSM
;;;600    GPS_COLLECT2();
001cc0  f7fffffe          BL       GPS_COLLECT2
;;;601    strcat(data,"CH\n");	
001cc4  498a              LDR      r1,|L1.7920|
001cc6  3944              SUBS     r1,r1,#0x44
001cc8  488c              LDR      r0,|L1.7932|
001cca  f7fffffe          BL       strcat
;;;602    GPS_COLLECT2();
001cce  f7fffffe          BL       GPS_COLLECT2
;;;603    strcat(data,"CH\n");	
001cd2  4987              LDR      r1,|L1.7920|
001cd4  3944              SUBS     r1,r1,#0x44
001cd6  4889              LDR      r0,|L1.7932|
001cd8  f7fffffe          BL       strcat
;;;604    
;;;605    
;;;606    msg_sim800(); 
001cdc  f7fffffe          BL       msg_sim800
;;;607    GPS_COLLECT2();
001ce0  f7fffffe          BL       GPS_COLLECT2
;;;608    strcat(data,"CH\n");	
001ce4  4982              LDR      r1,|L1.7920|
001ce6  3944              SUBS     r1,r1,#0x44
001ce8  4884              LDR      r0,|L1.7932|
001cea  f7fffffe          BL       strcat
;;;609    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
001cee  f7fffffe          BL       clear
001cf2  4884              LDR      r0,|L1.7940|
001cf4  3048              ADDS     r0,r0,#0x48
001cf6  f7fffffe          BL       send_modem
001cfa  f7fffffe          BL       clear
;;;610    					delay(20);
001cfe  2014              MOVS     r0,#0x14
001d00  f7fffffe          BL       delay
;;;611    
;;;612    
;;;613    msg_sim800(); 
001d04  f7fffffe          BL       msg_sim800
;;;614    
;;;615    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001d08  4b83              LDR      r3,|L1.7960|
001d0a  4a84              LDR      r2,|L1.7964|
001d0c  497d              LDR      r1,|L1.7940|
001d0e  3160              ADDS     r1,r1,#0x60
001d10  487e              LDR      r0,|L1.7948|
001d12  f7fffffe          BL       __2sprintf
;;;616    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001d16  487f              LDR      r0,|L1.7956|
001d18  6800              LDR      r0,[r0,#0]  ; tmeout
001d1a  4b7a              LDR      r3,|L1.7940|
001d1c  4a74              LDR      r2,|L1.7920|
001d1e  3a8c              SUBS     r2,r2,#0x8c
001d20  4619              MOV      r1,r3
001d22  3180              ADDS     r1,r1,#0x80
001d24  9000              STR      r0,[sp,#0]
001d26  4879              LDR      r0,|L1.7948|
001d28  f7fffffe          BL       send_GSM
;;;617    						clear();
001d2c  f7fffffe          BL       clear
;;;618    						
;;;619    						
;;;620    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
001d30  4878              LDR      r0,|L1.7956|
001d32  6800              LDR      r0,[r0,#0]  ; tmeout
001d34  4b73              LDR      r3,|L1.7940|
001d36  3388              ADDS     r3,r3,#0x88
001d38  4a6d              LDR      r2,|L1.7920|
001d3a  3a8c              SUBS     r2,r2,#0x8c
001d3c  a178              ADR      r1,|L1.7968|
001d3e  9000              STR      r0,[sp,#0]
001d40  4618              MOV      r0,r3
001d42  3010              ADDS     r0,r0,#0x10
001d44  f7fffffe          BL       send_GSM
;;;621    //*************************************tcp_initialization_ends****************************************//							
;;;622    									
;;;623    						clear();		
001d48  f7fffffe          BL       clear
;;;624    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
001d4c  213e              MOVS     r1,#0x3e
001d4e  4869              LDR      r0,|L1.7924|
001d50  f7fffffe          BL       mystrstr
001d54  4973              LDR      r1,|L1.7972|
001d56  7008              STRB     r0,[r1,#0]
;;;625    								if(cond)	
001d58  4608              MOV      r0,r1
001d5a  7800              LDRB     r0,[r0,#0]  ; cond
001d5c  2800              CMP      r0,#0
001d5e  d07d              BEQ      |L1.7772|
;;;626    								{	
;;;627    
;;;628    									clear();
001d60  f7fffffe          BL       clear
;;;629    									memset(uart_string_gsm,0,5000);
001d64  4970              LDR      r1,|L1.7976|
001d66  4863              LDR      r0,|L1.7924|
001d68  f7fffffe          BL       __aeabi_memclr
;;;630    									strcat(data,"\n");
001d6c  a16f              ADR      r1,|L1.7980|
001d6e  4863              LDR      r0,|L1.7932|
001d70  f7fffffe          BL       strcat
;;;631    									len=strlen(data);
001d74  4861              LDR      r0,|L1.7932|
001d76  f7fffffe          BL       strlen
001d7a  496d              LDR      r1,|L1.7984|
001d7c  6008              STR      r0,[r1,#0]  ; len
;;;632    									tout=0;
001d7e  2000              MOVS     r0,#0
001d80  495d              LDR      r1,|L1.7928|
001d82  6008              STR      r0,[r1,#0]  ; tout
;;;633    									k2=0;
001d84  496b              LDR      r1,|L1.7988|
001d86  6008              STR      r0,[r1,#0]  ; k2
;;;634    									for(k=0;k<len;k++)
001d88  496b              LDR      r1,|L1.7992|
001d8a  6008              STR      r0,[r1,#0]  ; k
001d8c  e00b              B        |L1.7590|
                  |L1.7566|
;;;635    									{
;;;636    										uart_putchar(UART1_BASE_PTR, data[k]);
001d8e  485b              LDR      r0,|L1.7932|
001d90  4a69              LDR      r2,|L1.7992|
001d92  6812              LDR      r2,[r2,#0]  ; k
001d94  5c81              LDRB     r1,[r0,r2]
001d96  4855              LDR      r0,|L1.7916|
001d98  f7fffffe          BL       uart_putchar
001d9c  4866              LDR      r0,|L1.7992|
001d9e  6800              LDR      r0,[r0,#0]            ;634  ; k
001da0  1c40              ADDS     r0,r0,#1              ;634
001da2  4965              LDR      r1,|L1.7992|
001da4  6008              STR      r0,[r1,#0]            ;634  ; k
                  |L1.7590|
001da6  4864              LDR      r0,|L1.7992|
001da8  6800              LDR      r0,[r0,#0]            ;634  ; k
001daa  4961              LDR      r1,|L1.7984|
001dac  6809              LDR      r1,[r1,#0]            ;634  ; len
001dae  4288              CMP      r0,r1                 ;634
001db0  dbed              BLT      |L1.7566|
;;;637    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001db2  211a              MOVS     r1,#0x1a
001db4  484d              LDR      r0,|L1.7916|
001db6  f7fffffe          BL       uart_putchar
001dba  211a              MOVS     r1,#0x1a
001dbc  484b              LDR      r0,|L1.7916|
001dbe  f7fffffe          BL       uart_putchar
;;;638    									do
001dc2  bf00              NOP      
                  |L1.7620|
;;;639    																{stcond1=strstr(uart_string_gsm,"SEND OK");
001dc4  495d              LDR      r1,|L1.7996|
001dc6  484b              LDR      r0,|L1.7924|
001dc8  f7fffffe          BL       strstr
001dcc  495c              LDR      r1,|L1.8000|
001dce  6008              STR      r0,[r1,#0]  ; stcond1
;;;640    																	stcond2=strstr(uart_string_gsm, "ERROR");
001dd0  4947              LDR      r1,|L1.7920|
001dd2  398c              SUBS     r1,r1,#0x8c
001dd4  4847              LDR      r0,|L1.7924|
001dd6  f7fffffe          BL       strstr
001dda  495a              LDR      r1,|L1.8004|
001ddc  6008              STR      r0,[r1,#0]  ; stcond2
;;;641    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001dde  4949              LDR      r1,|L1.7940|
001de0  3190              ADDS     r1,r1,#0x90
001de2  4844              LDR      r0,|L1.7924|
001de4  f7fffffe          BL       strstr
001de8  4957              LDR      r1,|L1.8008|
001dea  6008              STR      r0,[r1,#0]  ; stcond3
;;;642    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001dec  4940              LDR      r1,|L1.7920|
001dee  3970              SUBS     r1,r1,#0x70
001df0  4840              LDR      r0,|L1.7924|
001df2  f7fffffe          BL       strstr
001df6  4955              LDR      r1,|L1.8012|
001df8  6008              STR      r0,[r1,#0]  ; stcond4
;;;643    																	
;;;644    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
001dfa  4852              LDR      r0,|L1.8004|
001dfc  6800              LDR      r0,[r0,#0]  ; stcond2
001dfe  2800              CMP      r0,#0
001e00  d10f              BNE      |L1.7714|
001e02  4851              LDR      r0,|L1.8008|
001e04  6800              LDR      r0,[r0,#0]  ; stcond3
001e06  2800              CMP      r0,#0
001e08  d10b              BNE      |L1.7714|
001e0a  4608              MOV      r0,r1
001e0c  6800              LDR      r0,[r0,#0]  ; stcond4
001e0e  2800              CMP      r0,#0
001e10  d107              BNE      |L1.7714|
001e12  484b              LDR      r0,|L1.8000|
001e14  6800              LDR      r0,[r0,#0]  ; stcond1
001e16  2800              CMP      r0,#0
001e18  d103              BNE      |L1.7714|
001e1a  4837              LDR      r0,|L1.7928|
001e1c  6800              LDR      r0,[r0,#0]  ; tout
001e1e  2805              CMP      r0,#5
001e20  ddd0              BLE      |L1.7620|
                  |L1.7714|
;;;645    															//	delay(10);clear();
;;;646    														uart_putchar(UART1_BASE_PTR,0x1A);
001e22  211a              MOVS     r1,#0x1a
001e24  4831              LDR      r0,|L1.7916|
001e26  f7fffffe          BL       uart_putchar
;;;647    											//	delay(10);
;;;648    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001e2a  211a              MOVS     r1,#0x1a
001e2c  482f              LDR      r0,|L1.7916|
001e2e  f7fffffe          BL       uart_putchar
001e32  211a              MOVS     r1,#0x1a
001e34  482d              LDR      r0,|L1.7916|
001e36  f7fffffe          BL       uart_putchar
001e3a  211a              MOVS     r1,#0x1a
001e3c  482b              LDR      r0,|L1.7916|
001e3e  f7fffffe          BL       uart_putchar
;;;649    						
;;;650    
;;;651    
;;;652    									
;;;653    															
;;;654    															
;;;655    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;656    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;657    															
;;;658    														//qwe=strlen(uart_string_gsm);
;;;659    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;660    															delay(20);
001e42  2014              MOVS     r0,#0x14
001e44  f7fffffe          BL       delay
;;;661    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
001e48  493c              LDR      r1,|L1.7996|
001e4a  482a              LDR      r0,|L1.7924|
001e4c  f7fffffe          BL       strstr
001e50  493f              LDR      r1,|L1.8016|
001e52  6008              STR      r0,[r1,#0]  ; con1d
;;;662    																if(!con1d)
001e54  4608              MOV      r0,r1
001e56  6800              LDR      r0,[r0,#0]  ; con1d
001e58  2800              CMP      r0,#0
001e5a  e000              B        |L1.7774|
                  |L1.7772|
001e5c  e179              B        |L1.8530|
                  |L1.7774|
001e5e  d17b              BNE      |L1.8024|
;;;663    																{
;;;664    																	
;;;665    																	
;;;666    	delay(100);
001e60  2064              MOVS     r0,#0x64
001e62  f7fffffe          BL       delay
;;;667    		clear();//memset(uart_string_gsm,0,5000);
001e66  f7fffffe          BL       clear
;;;668    	
;;;669    	memset(at_,0,100);
001e6a  2164              MOVS     r1,#0x64
001e6c  4827              LDR      r0,|L1.7948|
001e6e  f7fffffe          BL       __aeabi_memclr
;;;670    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001e72  4822              LDR      r0,|L1.7932|
001e74  f7fffffe          BL       strlen
001e78  1c44              ADDS     r4,r0,#1
001e7a  4623              MOV      r3,r4
001e7c  4a35              LDR      r2,|L1.8020|
001e7e  491c              LDR      r1,|L1.7920|
001e80  3938              SUBS     r1,r1,#0x38
001e82  4822              LDR      r0,|L1.7948|
001e84  f7fffffe          BL       __2sprintf
;;;671    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001e88  2005              MOVS     r0,#5
001e8a  4b19              LDR      r3,|L1.7920|
001e8c  3b8c              SUBS     r3,r3,#0x8c
001e8e  461a              MOV      r2,r3
001e90  3278              ADDS     r2,r2,#0x78
001e92  a123              ADR      r1,|L1.7968|
001e94  9000              STR      r0,[sp,#0]
001e96  481d              LDR      r0,|L1.7948|
001e98  f7fffffe          BL       send_SD
;;;672    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;673    //	if(strstr(uart_string_gsm,"ERROR")){
;;;674    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;675    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;676    //	}
;;;677    	
;;;678    clear();	
001e9c  f7fffffe          BL       clear
;;;679    									k2=0;									//string array counter for uart 1
001ea0  2000              MOVS     r0,#0
001ea2  4924              LDR      r1,|L1.7988|
001ea4  6008              STR      r0,[r1,#0]  ; k2
;;;680    									tout=0;	
001ea6  4914              LDR      r1,|L1.7928|
001ea8  6008              STR      r0,[r1,#0]  ; tout
;;;681    		for(k=0;k<strlen(data);k++)
001eaa  4923              LDR      r1,|L1.7992|
001eac  6008              STR      r0,[r1,#0]  ; k
001eae  e00b              B        |L1.7880|
                  |L1.7856|
;;;682    		{
;;;683    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001eb0  4812              LDR      r0,|L1.7932|
001eb2  4a21              LDR      r2,|L1.7992|
001eb4  6812              LDR      r2,[r2,#0]  ; k
001eb6  5c81              LDRB     r1,[r0,r2]
001eb8  480c              LDR      r0,|L1.7916|
001eba  f7fffffe          BL       uart_putchar
001ebe  481e              LDR      r0,|L1.7992|
001ec0  6800              LDR      r0,[r0,#0]            ;681  ; k
001ec2  1c40              ADDS     r0,r0,#1              ;681
001ec4  491c              LDR      r1,|L1.7992|
001ec6  6008              STR      r0,[r1,#0]            ;681  ; k
                  |L1.7880|
001ec8  480c              LDR      r0,|L1.7932|
001eca  f7fffffe          BL       strlen
001ece  491a              LDR      r1,|L1.7992|
001ed0  6809              LDR      r1,[r1,#0]            ;681  ; k
001ed2  4288              CMP      r0,r1                 ;681
001ed4  d8ec              BHI      |L1.7856|
;;;684    		}	
;;;685    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001ed6  210a              MOVS     r1,#0xa
001ed8  4804              LDR      r0,|L1.7916|
001eda  f7fffffe          BL       uart_putchar
001ede  210a              MOVS     r1,#0xa
001ee0  4802              LDR      r0,|L1.7916|
001ee2  f7fffffe          BL       uart_putchar
001ee6  210a              MOVS     r1,#0xa
001ee8  4800              LDR      r0,|L1.7916|
001eea  e036              B        |L1.8026|
                  |L1.7916|
                          DCD      0x4006b000
                  |L1.7920|
                          DCD      ||.text||+0x8fc
                  |L1.7924|
                          DCD      uart_string_gsm
                  |L1.7928|
                          DCD      tout
                  |L1.7932|
                          DCD      data
                  |L1.7936|
                          DCD      0x400ff080
                  |L1.7940|
                          DCD      ||.text||+0xd54
                  |L1.7944|
001f08  4f4b00            DCB      "OK",0
001f0b  00                DCB      0
                  |L1.7948|
                          DCD      at_
                  |L1.7952|
                          DCD      apn
                  |L1.7956|
                          DCD      tmeout
                  |L1.7960|
                          DCD      port
                  |L1.7964|
                          DCD      ||ip||
                  |L1.7968|
001f20  3e00              DCB      ">",0
001f22  00                DCB      0
001f23  00                DCB      0
                  |L1.7972|
                          DCD      cond
                  |L1.7976|
                          DCD      0x00001388
                  |L1.7980|
001f2c  0a00              DCB      "\n",0
001f2e  00                DCB      0
001f2f  00                DCB      0
                  |L1.7984|
                          DCD      len
                  |L1.7988|
                          DCD      ||k2||
                  |L1.7992|
                          DCD      k
                  |L1.7996|
                          DCD      ||.text||+0x474
                  |L1.8000|
                          DCD      stcond1
                  |L1.8004|
                          DCD      stcond2
                  |L1.8008|
                          DCD      stcond3
                  |L1.8012|
                          DCD      stcond4
                  |L1.8016|
                          DCD      con1d
                  |L1.8020|
                          DCD      drive
                  |L1.8024|
001f58  e0f8              B        |L1.8524|
                  |L1.8026|
001f5a  f7fffffe          BL       uart_putchar
001f5e  210a              MOVS     r1,#0xa
001f60  48fe              LDR      r0,|L1.9052|
001f62  f7fffffe          BL       uart_putchar
001f66  210a              MOVS     r1,#0xa
001f68  48fc              LDR      r0,|L1.9052|
001f6a  f7fffffe          BL       uart_putchar
001f6e  210a              MOVS     r1,#0xa
001f70  48fa              LDR      r0,|L1.9052|
001f72  f7fffffe          BL       uart_putchar
001f76  210a              MOVS     r1,#0xa
001f78  48f8              LDR      r0,|L1.9052|
001f7a  f7fffffe          BL       uart_putchar
001f7e  210a              MOVS     r1,#0xa
001f80  48f6              LDR      r0,|L1.9052|
001f82  f7fffffe          BL       uart_putchar
001f86  210a              MOVS     r1,#0xa
001f88  48f4              LDR      r0,|L1.9052|
001f8a  f7fffffe          BL       uart_putchar
001f8e  210a              MOVS     r1,#0xa
001f90  48f2              LDR      r0,|L1.9052|
001f92  f7fffffe          BL       uart_putchar
001f96  210a              MOVS     r1,#0xa
001f98  48f0              LDR      r0,|L1.9052|
001f9a  f7fffffe          BL       uart_putchar
001f9e  210a              MOVS     r1,#0xa
001fa0  48ee              LDR      r0,|L1.9052|
001fa2  f7fffffe          BL       uart_putchar
001fa6  210a              MOVS     r1,#0xa
001fa8  48ec              LDR      r0,|L1.9052|
001faa  f7fffffe          BL       uart_putchar
001fae  210a              MOVS     r1,#0xa
001fb0  48ea              LDR      r0,|L1.9052|
001fb2  f7fffffe          BL       uart_putchar
001fb6  210a              MOVS     r1,#0xa
001fb8  48e8              LDR      r0,|L1.9052|
001fba  f7fffffe          BL       uart_putchar
001fbe  210a              MOVS     r1,#0xa
001fc0  48e6              LDR      r0,|L1.9052|
001fc2  f7fffffe          BL       uart_putchar
001fc6  210a              MOVS     r1,#0xa
001fc8  48e4              LDR      r0,|L1.9052|
001fca  f7fffffe          BL       uart_putchar
001fce  210a              MOVS     r1,#0xa
001fd0  48e2              LDR      r0,|L1.9052|
001fd2  f7fffffe          BL       uart_putchar
001fd6  210a              MOVS     r1,#0xa
001fd8  48e0              LDR      r0,|L1.9052|
001fda  f7fffffe          BL       uart_putchar
001fde  210a              MOVS     r1,#0xa
001fe0  48de              LDR      r0,|L1.9052|
001fe2  f7fffffe          BL       uart_putchar
001fe6  210a              MOVS     r1,#0xa
001fe8  48dc              LDR      r0,|L1.9052|
001fea  f7fffffe          BL       uart_putchar
001fee  210a              MOVS     r1,#0xa
001ff0  48da              LDR      r0,|L1.9052|
001ff2  f7fffffe          BL       uart_putchar
001ff6  210a              MOVS     r1,#0xa
001ff8  48d8              LDR      r0,|L1.9052|
001ffa  f7fffffe          BL       uart_putchar
001ffe  210a              MOVS     r1,#0xa
002000  48d6              LDR      r0,|L1.9052|
002002  f7fffffe          BL       uart_putchar
002006  210a              MOVS     r1,#0xa
002008  48d4              LDR      r0,|L1.9052|
00200a  f7fffffe          BL       uart_putchar
00200e  210a              MOVS     r1,#0xa
002010  48d2              LDR      r0,|L1.9052|
002012  f7fffffe          BL       uart_putchar
002016  210a              MOVS     r1,#0xa
002018  48d0              LDR      r0,|L1.9052|
00201a  f7fffffe          BL       uart_putchar
00201e  210a              MOVS     r1,#0xa
002020  48ce              LDR      r0,|L1.9052|
002022  f7fffffe          BL       uart_putchar
002026  210a              MOVS     r1,#0xa
002028  48cc              LDR      r0,|L1.9052|
00202a  f7fffffe          BL       uart_putchar
00202e  210a              MOVS     r1,#0xa
002030  48ca              LDR      r0,|L1.9052|
002032  f7fffffe          BL       uart_putchar
002036  210a              MOVS     r1,#0xa
002038  48c8              LDR      r0,|L1.9052|
00203a  f7fffffe          BL       uart_putchar
00203e  210a              MOVS     r1,#0xa
002040  48c6              LDR      r0,|L1.9052|
002042  f7fffffe          BL       uart_putchar
002046  210a              MOVS     r1,#0xa
002048  48c4              LDR      r0,|L1.9052|
00204a  f7fffffe          BL       uart_putchar
00204e  210a              MOVS     r1,#0xa
002050  48c2              LDR      r0,|L1.9052|
002052  f7fffffe          BL       uart_putchar
002056  210a              MOVS     r1,#0xa
002058  48c0              LDR      r0,|L1.9052|
00205a  f7fffffe          BL       uart_putchar
00205e  210a              MOVS     r1,#0xa
002060  48be              LDR      r0,|L1.9052|
002062  f7fffffe          BL       uart_putchar
002066  210a              MOVS     r1,#0xa
002068  48bc              LDR      r0,|L1.9052|
00206a  f7fffffe          BL       uart_putchar
00206e  210a              MOVS     r1,#0xa
002070  48ba              LDR      r0,|L1.9052|
002072  f7fffffe          BL       uart_putchar
002076  210a              MOVS     r1,#0xa
002078  48b8              LDR      r0,|L1.9052|
00207a  f7fffffe          BL       uart_putchar
00207e  210a              MOVS     r1,#0xa
002080  48b6              LDR      r0,|L1.9052|
002082  f7fffffe          BL       uart_putchar
002086  210a              MOVS     r1,#0xa
002088  48b4              LDR      r0,|L1.9052|
00208a  f7fffffe          BL       uart_putchar
00208e  210a              MOVS     r1,#0xa
002090  48b2              LDR      r0,|L1.9052|
002092  f7fffffe          BL       uart_putchar
002096  210a              MOVS     r1,#0xa
002098  48b0              LDR      r0,|L1.9052|
00209a  f7fffffe          BL       uart_putchar
00209e  210a              MOVS     r1,#0xa
0020a0  48ae              LDR      r0,|L1.9052|
0020a2  f7fffffe          BL       uart_putchar
0020a6  210a              MOVS     r1,#0xa
0020a8  48ac              LDR      r0,|L1.9052|
0020aa  f7fffffe          BL       uart_putchar
0020ae  210a              MOVS     r1,#0xa
0020b0  48aa              LDR      r0,|L1.9052|
0020b2  f7fffffe          BL       uart_putchar
0020b6  210a              MOVS     r1,#0xa
0020b8  48a8              LDR      r0,|L1.9052|
0020ba  f7fffffe          BL       uart_putchar
0020be  210a              MOVS     r1,#0xa
0020c0  48a6              LDR      r0,|L1.9052|
0020c2  f7fffffe          BL       uart_putchar
0020c6  210a              MOVS     r1,#0xa
0020c8  48a4              LDR      r0,|L1.9052|
0020ca  f7fffffe          BL       uart_putchar
0020ce  210a              MOVS     r1,#0xa
0020d0  48a2              LDR      r0,|L1.9052|
0020d2  f7fffffe          BL       uart_putchar
0020d6  210a              MOVS     r1,#0xa
0020d8  48a0              LDR      r0,|L1.9052|
0020da  f7fffffe          BL       uart_putchar
0020de  210a              MOVS     r1,#0xa
0020e0  489e              LDR      r0,|L1.9052|
0020e2  f7fffffe          BL       uart_putchar
0020e6  210a              MOVS     r1,#0xa
0020e8  489c              LDR      r0,|L1.9052|
0020ea  f7fffffe          BL       uart_putchar
0020ee  210a              MOVS     r1,#0xa
0020f0  489a              LDR      r0,|L1.9052|
0020f2  f7fffffe          BL       uart_putchar
0020f6  210a              MOVS     r1,#0xa
0020f8  4898              LDR      r0,|L1.9052|
0020fa  f7fffffe          BL       uart_putchar
0020fe  210a              MOVS     r1,#0xa
002100  4896              LDR      r0,|L1.9052|
002102  f7fffffe          BL       uart_putchar
002106  210a              MOVS     r1,#0xa
002108  4894              LDR      r0,|L1.9052|
00210a  f7fffffe          BL       uart_putchar
;;;686    									//memset(data,0,1000);
;;;687    														//timer counts to wait for characters in uart 1 									
;;;688    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00210e  bf00              NOP      
                  |L1.8464|
002110  4993              LDR      r1,|L1.9056|
002112  4894              LDR      r0,|L1.9060|
002114  f7fffffe          BL       strstr
002118  2800              CMP      r0,#0
00211a  d10a              BNE      |L1.8498|
00211c  4990              LDR      r1,|L1.9056|
00211e  398c              SUBS     r1,r1,#0x8c
002120  4890              LDR      r0,|L1.9060|
002122  f7fffffe          BL       strstr
002126  2800              CMP      r0,#0
002128  d103              BNE      |L1.8498|
00212a  488f              LDR      r0,|L1.9064|
00212c  6800              LDR      r0,[r0,#0]  ; tout
00212e  2805              CMP      r0,#5
002130  ddee              BLE      |L1.8464|
                  |L1.8498|
;;;689    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;690    									}
;;;691    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002132  f7fffffe          BL       clear
;;;692    									//clear();
;;;693    									memset(data,0,strlen(data));
002136  488d              LDR      r0,|L1.9068|
002138  f7fffffe          BL       strlen
00213c  4604              MOV      r4,r0
00213e  4621              MOV      r1,r4
002140  488a              LDR      r0,|L1.9068|
002142  f7fffffe          BL       __aeabi_memclr
;;;694    									clear();
002146  f7fffffe          BL       clear
00214a  e157              B        |L1.9212|
                  |L1.8524|
;;;695    
;;;696    								
;;;697    																	
;;;698    																	
;;;699    								//								log_it();								
;;;700    																}else{send_chunk();}													
00214c  f7fffffe          BL       send_chunk
002150  e154              B        |L1.9212|
                  |L1.8530|
;;;701    								//checks for the sd_data available
;;;702    								}
;;;703    								//con1d=strstr(uart_string_gsm,"OK");
;;;704    								else
;;;705    								{
;;;706    									
;;;707    									
;;;708    									
;;;709    	delay(100);
002152  2064              MOVS     r0,#0x64
002154  f7fffffe          BL       delay
;;;710    		clear();//memset(uart_string_gsm,0,5000);
002158  f7fffffe          BL       clear
;;;711    	
;;;712    	memset(at_,0,100);
00215c  2164              MOVS     r1,#0x64
00215e  4884              LDR      r0,|L1.9072|
002160  f7fffffe          BL       __aeabi_memclr
;;;713    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002164  4881              LDR      r0,|L1.9068|
002166  f7fffffe          BL       strlen
00216a  1c44              ADDS     r4,r0,#1
00216c  4623              MOV      r3,r4
00216e  4a81              LDR      r2,|L1.9076|
002170  497b              LDR      r1,|L1.9056|
002172  3938              SUBS     r1,r1,#0x38
002174  487e              LDR      r0,|L1.9072|
002176  f7fffffe          BL       __2sprintf
;;;714    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00217a  2005              MOVS     r0,#5
00217c  4b78              LDR      r3,|L1.9056|
00217e  3b8c              SUBS     r3,r3,#0x8c
002180  461a              MOV      r2,r3
002182  3278              ADDS     r2,r2,#0x78
002184  a17c              ADR      r1,|L1.9080|
002186  9000              STR      r0,[sp,#0]
002188  4879              LDR      r0,|L1.9072|
00218a  f7fffffe          BL       send_SD
;;;715    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;716    //	if(strstr(uart_string_gsm,"ERROR")){
;;;717    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;718    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;719    //	}
;;;720    	
;;;721    clear();	
00218e  f7fffffe          BL       clear
;;;722    									k2=0;									//string array counter for uart 1
002192  2000              MOVS     r0,#0
002194  4979              LDR      r1,|L1.9084|
002196  6008              STR      r0,[r1,#0]  ; k2
;;;723    									tout=0;	
002198  4973              LDR      r1,|L1.9064|
00219a  6008              STR      r0,[r1,#0]  ; tout
;;;724    		for(k=0;k<strlen(data);k++)
00219c  4978              LDR      r1,|L1.9088|
00219e  6008              STR      r0,[r1,#0]  ; k
0021a0  e00b              B        |L1.8634|
                  |L1.8610|
;;;725    		{
;;;726    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0021a2  4872              LDR      r0,|L1.9068|
0021a4  4a76              LDR      r2,|L1.9088|
0021a6  6812              LDR      r2,[r2,#0]  ; k
0021a8  5c81              LDRB     r1,[r0,r2]
0021aa  486c              LDR      r0,|L1.9052|
0021ac  f7fffffe          BL       uart_putchar
0021b0  4873              LDR      r0,|L1.9088|
0021b2  6800              LDR      r0,[r0,#0]            ;724  ; k
0021b4  1c40              ADDS     r0,r0,#1              ;724
0021b6  4972              LDR      r1,|L1.9088|
0021b8  6008              STR      r0,[r1,#0]            ;724  ; k
                  |L1.8634|
0021ba  486c              LDR      r0,|L1.9068|
0021bc  f7fffffe          BL       strlen
0021c0  496f              LDR      r1,|L1.9088|
0021c2  6809              LDR      r1,[r1,#0]            ;724  ; k
0021c4  4288              CMP      r0,r1                 ;724
0021c6  d8ec              BHI      |L1.8610|
;;;727    		}	
;;;728    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0021c8  210a              MOVS     r1,#0xa
0021ca  4864              LDR      r0,|L1.9052|
0021cc  f7fffffe          BL       uart_putchar
0021d0  210a              MOVS     r1,#0xa
0021d2  4862              LDR      r0,|L1.9052|
0021d4  f7fffffe          BL       uart_putchar
0021d8  210a              MOVS     r1,#0xa
0021da  4860              LDR      r0,|L1.9052|
0021dc  f7fffffe          BL       uart_putchar
0021e0  210a              MOVS     r1,#0xa
0021e2  485e              LDR      r0,|L1.9052|
0021e4  f7fffffe          BL       uart_putchar
0021e8  210a              MOVS     r1,#0xa
0021ea  485c              LDR      r0,|L1.9052|
0021ec  f7fffffe          BL       uart_putchar
0021f0  210a              MOVS     r1,#0xa
0021f2  485a              LDR      r0,|L1.9052|
0021f4  f7fffffe          BL       uart_putchar
0021f8  210a              MOVS     r1,#0xa
0021fa  4858              LDR      r0,|L1.9052|
0021fc  f7fffffe          BL       uart_putchar
002200  210a              MOVS     r1,#0xa
002202  4856              LDR      r0,|L1.9052|
002204  f7fffffe          BL       uart_putchar
002208  210a              MOVS     r1,#0xa
00220a  4854              LDR      r0,|L1.9052|
00220c  f7fffffe          BL       uart_putchar
002210  210a              MOVS     r1,#0xa
002212  4852              LDR      r0,|L1.9052|
002214  f7fffffe          BL       uart_putchar
002218  210a              MOVS     r1,#0xa
00221a  4850              LDR      r0,|L1.9052|
00221c  f7fffffe          BL       uart_putchar
002220  210a              MOVS     r1,#0xa
002222  484e              LDR      r0,|L1.9052|
002224  f7fffffe          BL       uart_putchar
002228  210a              MOVS     r1,#0xa
00222a  484c              LDR      r0,|L1.9052|
00222c  f7fffffe          BL       uart_putchar
002230  210a              MOVS     r1,#0xa
002232  484a              LDR      r0,|L1.9052|
002234  f7fffffe          BL       uart_putchar
002238  210a              MOVS     r1,#0xa
00223a  4848              LDR      r0,|L1.9052|
00223c  f7fffffe          BL       uart_putchar
002240  210a              MOVS     r1,#0xa
002242  4846              LDR      r0,|L1.9052|
002244  f7fffffe          BL       uart_putchar
002248  210a              MOVS     r1,#0xa
00224a  4844              LDR      r0,|L1.9052|
00224c  f7fffffe          BL       uart_putchar
002250  210a              MOVS     r1,#0xa
002252  4842              LDR      r0,|L1.9052|
002254  f7fffffe          BL       uart_putchar
002258  210a              MOVS     r1,#0xa
00225a  4840              LDR      r0,|L1.9052|
00225c  f7fffffe          BL       uart_putchar
002260  210a              MOVS     r1,#0xa
002262  483e              LDR      r0,|L1.9052|
002264  f7fffffe          BL       uart_putchar
002268  210a              MOVS     r1,#0xa
00226a  483c              LDR      r0,|L1.9052|
00226c  f7fffffe          BL       uart_putchar
002270  210a              MOVS     r1,#0xa
002272  483a              LDR      r0,|L1.9052|
002274  f7fffffe          BL       uart_putchar
002278  210a              MOVS     r1,#0xa
00227a  4838              LDR      r0,|L1.9052|
00227c  f7fffffe          BL       uart_putchar
002280  210a              MOVS     r1,#0xa
002282  4836              LDR      r0,|L1.9052|
002284  f7fffffe          BL       uart_putchar
002288  210a              MOVS     r1,#0xa
00228a  4834              LDR      r0,|L1.9052|
00228c  f7fffffe          BL       uart_putchar
002290  210a              MOVS     r1,#0xa
002292  4832              LDR      r0,|L1.9052|
002294  f7fffffe          BL       uart_putchar
002298  210a              MOVS     r1,#0xa
00229a  4830              LDR      r0,|L1.9052|
00229c  f7fffffe          BL       uart_putchar
0022a0  210a              MOVS     r1,#0xa
0022a2  482e              LDR      r0,|L1.9052|
0022a4  f7fffffe          BL       uart_putchar
0022a8  210a              MOVS     r1,#0xa
0022aa  482c              LDR      r0,|L1.9052|
0022ac  f7fffffe          BL       uart_putchar
0022b0  210a              MOVS     r1,#0xa
0022b2  482a              LDR      r0,|L1.9052|
0022b4  f7fffffe          BL       uart_putchar
0022b8  210a              MOVS     r1,#0xa
0022ba  4828              LDR      r0,|L1.9052|
0022bc  f7fffffe          BL       uart_putchar
0022c0  210a              MOVS     r1,#0xa
0022c2  4826              LDR      r0,|L1.9052|
0022c4  f7fffffe          BL       uart_putchar
0022c8  210a              MOVS     r1,#0xa
0022ca  4824              LDR      r0,|L1.9052|
0022cc  f7fffffe          BL       uart_putchar
0022d0  210a              MOVS     r1,#0xa
0022d2  4822              LDR      r0,|L1.9052|
0022d4  f7fffffe          BL       uart_putchar
0022d8  210a              MOVS     r1,#0xa
0022da  4820              LDR      r0,|L1.9052|
0022dc  f7fffffe          BL       uart_putchar
0022e0  210a              MOVS     r1,#0xa
0022e2  481e              LDR      r0,|L1.9052|
0022e4  f7fffffe          BL       uart_putchar
0022e8  210a              MOVS     r1,#0xa
0022ea  481c              LDR      r0,|L1.9052|
0022ec  f7fffffe          BL       uart_putchar
0022f0  210a              MOVS     r1,#0xa
0022f2  481a              LDR      r0,|L1.9052|
0022f4  f7fffffe          BL       uart_putchar
0022f8  210a              MOVS     r1,#0xa
0022fa  4818              LDR      r0,|L1.9052|
0022fc  f7fffffe          BL       uart_putchar
002300  210a              MOVS     r1,#0xa
002302  4816              LDR      r0,|L1.9052|
002304  f7fffffe          BL       uart_putchar
002308  210a              MOVS     r1,#0xa
00230a  4814              LDR      r0,|L1.9052|
00230c  f7fffffe          BL       uart_putchar
002310  210a              MOVS     r1,#0xa
002312  4812              LDR      r0,|L1.9052|
002314  f7fffffe          BL       uart_putchar
002318  210a              MOVS     r1,#0xa
00231a  4810              LDR      r0,|L1.9052|
00231c  f7fffffe          BL       uart_putchar
002320  210a              MOVS     r1,#0xa
002322  480e              LDR      r0,|L1.9052|
002324  f7fffffe          BL       uart_putchar
002328  210a              MOVS     r1,#0xa
00232a  480c              LDR      r0,|L1.9052|
00232c  f7fffffe          BL       uart_putchar
002330  210a              MOVS     r1,#0xa
002332  480a              LDR      r0,|L1.9052|
002334  f7fffffe          BL       uart_putchar
002338  210a              MOVS     r1,#0xa
00233a  4808              LDR      r0,|L1.9052|
00233c  f7fffffe          BL       uart_putchar
002340  210a              MOVS     r1,#0xa
002342  4806              LDR      r0,|L1.9052|
002344  f7fffffe          BL       uart_putchar
002348  210a              MOVS     r1,#0xa
00234a  4804              LDR      r0,|L1.9052|
00234c  f7fffffe          BL       uart_putchar
002350  210a              MOVS     r1,#0xa
002352  4802              LDR      r0,|L1.9052|
002354  f7fffffe          BL       uart_putchar
002358  210a              MOVS     r1,#0xa
00235a  e013              B        |L1.9092|
                  |L1.9052|
                          DCD      0x4006b000
                  |L1.9056|
                          DCD      ||.text||+0x8fc
                  |L1.9060|
                          DCD      uart_string_gsm
                  |L1.9064|
                          DCD      tout
                  |L1.9068|
                          DCD      data
                  |L1.9072|
                          DCD      at_
                  |L1.9076|
                          DCD      drive
                  |L1.9080|
002378  3e00              DCB      ">",0
00237a  00                DCB      0
00237b  00                DCB      0
                  |L1.9084|
                          DCD      ||k2||
                  |L1.9088|
                          DCD      k
                  |L1.9092|
002384  48fe              LDR      r0,|L1.10112|
002386  f7fffffe          BL       uart_putchar
00238a  210a              MOVS     r1,#0xa
00238c  48fc              LDR      r0,|L1.10112|
00238e  f7fffffe          BL       uart_putchar
002392  210a              MOVS     r1,#0xa
002394  48fa              LDR      r0,|L1.10112|
002396  f7fffffe          BL       uart_putchar
00239a  210a              MOVS     r1,#0xa
00239c  48f8              LDR      r0,|L1.10112|
00239e  f7fffffe          BL       uart_putchar
0023a2  210a              MOVS     r1,#0xa
0023a4  48f6              LDR      r0,|L1.10112|
0023a6  f7fffffe          BL       uart_putchar
0023aa  210a              MOVS     r1,#0xa
0023ac  48f4              LDR      r0,|L1.10112|
0023ae  f7fffffe          BL       uart_putchar
0023b2  210a              MOVS     r1,#0xa
0023b4  48f2              LDR      r0,|L1.10112|
0023b6  f7fffffe          BL       uart_putchar
;;;729    									//memset(data,0,1000);
;;;730    														//timer counts to wait for characters in uart 1 									
;;;731    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0023ba  bf00              NOP      
                  |L1.9148|
0023bc  49f1              LDR      r1,|L1.10116|
0023be  48f2              LDR      r0,|L1.10120|
0023c0  f7fffffe          BL       strstr
0023c4  2800              CMP      r0,#0
0023c6  d10a              BNE      |L1.9182|
0023c8  49ee              LDR      r1,|L1.10116|
0023ca  398c              SUBS     r1,r1,#0x8c
0023cc  48ee              LDR      r0,|L1.10120|
0023ce  f7fffffe          BL       strstr
0023d2  2800              CMP      r0,#0
0023d4  d103              BNE      |L1.9182|
0023d6  48ed              LDR      r0,|L1.10124|
0023d8  6800              LDR      r0,[r0,#0]  ; tout
0023da  2805              CMP      r0,#5
0023dc  ddee              BLE      |L1.9148|
                  |L1.9182|
;;;732    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;733    									}
;;;734    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0023de  f7fffffe          BL       clear
;;;735    									//clear();
;;;736    									memset(data,0,strlen(data));
0023e2  48eb              LDR      r0,|L1.10128|
0023e4  f7fffffe          BL       strlen
0023e8  4604              MOV      r4,r0
0023ea  4621              MOV      r1,r4
0023ec  48e8              LDR      r0,|L1.10128|
0023ee  f7fffffe          BL       __aeabi_memclr
;;;737    									clear();
0023f2  f7fffffe          BL       clear
0023f6  e001              B        |L1.9212|
                  |L1.9208|
;;;738    
;;;739    								
;;;740    									
;;;741    									
;;;742    									
;;;743    								//	log_it();			//otherwize log it					
;;;744    								}
;;;745    
;;;746    																
;;;747    //delay(50);
;;;748    
;;;749    //else{
;;;750    //log_it();}
;;;751    								
;;;752    								
;;;753    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;754    	else
;;;755    	{
;;;756    		send_chunk();
0023f8  f7fffffe          BL       send_chunk
                  |L1.9212|
;;;757    	}		
;;;758    								
;;;759    								
;;;760    								
;;;761    	memset(data,0,strlen(data));	
0023fc  48e4              LDR      r0,|L1.10128|
0023fe  f7fffffe          BL       strlen
002402  4604              MOV      r4,r0
002404  4621              MOV      r1,r4
002406  48e2              LDR      r0,|L1.10128|
002408  f7fffffe          BL       __aeabi_memclr
;;;762    	uart_putchar(UART1_BASE_PTR, 0x1A);
00240c  211a              MOVS     r1,#0x1a
00240e  48dc              LDR      r0,|L1.10112|
002410  f7fffffe          BL       uart_putchar
;;;763    	
;;;764    }
002414  bd38              POP      {r3-r5,pc}
;;;765    	
                          ENDP

                  send_tcp2 PROC
;;;780    
;;;781    void send_tcp2()
002416  b538              PUSH     {r3-r5,lr}
;;;782    {	
;;;783    memset(stcond1,0,strlen(stcond1));	
002418  48de              LDR      r0,|L1.10132|
00241a  6800              LDR      r0,[r0,#0]  ; stcond1
00241c  f7fffffe          BL       strlen
002420  4604              MOV      r4,r0
002422  4621              MOV      r1,r4
002424  48db              LDR      r0,|L1.10132|
002426  6800              LDR      r0,[r0,#0]  ; stcond1
002428  f7fffffe          BL       __aeabi_memclr
;;;784    memset(con1d,0,strlen(con1d));	
00242c  48da              LDR      r0,|L1.10136|
00242e  6800              LDR      r0,[r0,#0]  ; con1d
002430  f7fffffe          BL       strlen
002434  4604              MOV      r4,r0
002436  4621              MOV      r1,r4
002438  48d7              LDR      r0,|L1.10136|
00243a  6800              LDR      r0,[r0,#0]  ; con1d
00243c  f7fffffe          BL       __aeabi_memclr
;;;785    	
;;;786    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;787    						
;;;788    								cond=mystrstr(uart_string_gsm,'>');
002440  213e              MOVS     r1,#0x3e
002442  48d1              LDR      r0,|L1.10120|
002444  f7fffffe          BL       mystrstr
002448  49d4              LDR      r1,|L1.10140|
00244a  7008              STRB     r0,[r1,#0]
;;;789    								if(cond)	
00244c  4608              MOV      r0,r1
00244e  7800              LDRB     r0,[r0,#0]  ; cond
002450  2800              CMP      r0,#0
002452  d07c              BEQ      |L1.9550|
;;;790    								{
;;;791    									
;;;792    									clear();
002454  f7fffffe          BL       clear
;;;793    									memset(uart_string_gsm,0,5000);
002458  49d1              LDR      r1,|L1.10144|
00245a  48cb              LDR      r0,|L1.10120|
00245c  f7fffffe          BL       __aeabi_memclr
;;;794    									strcat(data,"\n");
002460  a1d0              ADR      r1,|L1.10148|
002462  48cb              LDR      r0,|L1.10128|
002464  f7fffffe          BL       strcat
;;;795    									len=strlen(data);
002468  48c9              LDR      r0,|L1.10128|
00246a  f7fffffe          BL       strlen
00246e  49ce              LDR      r1,|L1.10152|
002470  6008              STR      r0,[r1,#0]  ; len
;;;796    									tout=0;
002472  2000              MOVS     r0,#0
002474  49c5              LDR      r1,|L1.10124|
002476  6008              STR      r0,[r1,#0]  ; tout
;;;797    									k2=0;
002478  49cc              LDR      r1,|L1.10156|
00247a  6008              STR      r0,[r1,#0]  ; k2
;;;798    									for(k=0;k<len;k++)
00247c  49cc              LDR      r1,|L1.10160|
00247e  6008              STR      r0,[r1,#0]  ; k
002480  e00b              B        |L1.9370|
                  |L1.9346|
;;;799    									{
;;;800    										uart_putchar(UART1_BASE_PTR, data[k]);
002482  48c3              LDR      r0,|L1.10128|
002484  4aca              LDR      r2,|L1.10160|
002486  6812              LDR      r2,[r2,#0]  ; k
002488  5c81              LDRB     r1,[r0,r2]
00248a  48bd              LDR      r0,|L1.10112|
00248c  f7fffffe          BL       uart_putchar
002490  48c7              LDR      r0,|L1.10160|
002492  6800              LDR      r0,[r0,#0]            ;798  ; k
002494  1c40              ADDS     r0,r0,#1              ;798
002496  49c6              LDR      r1,|L1.10160|
002498  6008              STR      r0,[r1,#0]            ;798  ; k
                  |L1.9370|
00249a  48c5              LDR      r0,|L1.10160|
00249c  6800              LDR      r0,[r0,#0]            ;798  ; k
00249e  49c2              LDR      r1,|L1.10152|
0024a0  6809              LDR      r1,[r1,#0]            ;798  ; len
0024a2  4288              CMP      r0,r1                 ;798
0024a4  dbed              BLT      |L1.9346|
;;;801    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0024a6  211a              MOVS     r1,#0x1a
0024a8  48b5              LDR      r0,|L1.10112|
0024aa  f7fffffe          BL       uart_putchar
;;;802    									do
0024ae  bf00              NOP      
                  |L1.9392|
;;;803    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0024b0  49c0              LDR      r1,|L1.10164|
0024b2  48b5              LDR      r0,|L1.10120|
0024b4  f7fffffe          BL       strstr
0024b8  49b6              LDR      r1,|L1.10132|
0024ba  6008              STR      r0,[r1,#0]  ; stcond1
;;;804    																	stcond2=strstr(uart_string_gsm, "ERROR");
0024bc  49b1              LDR      r1,|L1.10116|
0024be  398c              SUBS     r1,r1,#0x8c
0024c0  48b1              LDR      r0,|L1.10120|
0024c2  f7fffffe          BL       strstr
0024c6  49bc              LDR      r1,|L1.10168|
0024c8  6008              STR      r0,[r1,#0]  ; stcond2
;;;805    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0024ca  49bc              LDR      r1,|L1.10172|
0024cc  48ae              LDR      r0,|L1.10120|
0024ce  f7fffffe          BL       strstr
0024d2  49bb              LDR      r1,|L1.10176|
0024d4  6008              STR      r0,[r1,#0]  ; stcond3
;;;806    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0024d6  49ab              LDR      r1,|L1.10116|
0024d8  3970              SUBS     r1,r1,#0x70
0024da  48ab              LDR      r0,|L1.10120|
0024dc  f7fffffe          BL       strstr
0024e0  49b8              LDR      r1,|L1.10180|
0024e2  6008              STR      r0,[r1,#0]  ; stcond4
;;;807    																	
;;;808    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0024e4  48b4              LDR      r0,|L1.10168|
0024e6  6800              LDR      r0,[r0,#0]  ; stcond2
0024e8  2800              CMP      r0,#0
0024ea  d10f              BNE      |L1.9484|
0024ec  48b4              LDR      r0,|L1.10176|
0024ee  6800              LDR      r0,[r0,#0]  ; stcond3
0024f0  2800              CMP      r0,#0
0024f2  d10b              BNE      |L1.9484|
0024f4  4608              MOV      r0,r1
0024f6  6800              LDR      r0,[r0,#0]  ; stcond4
0024f8  2800              CMP      r0,#0
0024fa  d107              BNE      |L1.9484|
0024fc  48a5              LDR      r0,|L1.10132|
0024fe  6800              LDR      r0,[r0,#0]  ; stcond1
002500  2800              CMP      r0,#0
002502  d103              BNE      |L1.9484|
002504  48a1              LDR      r0,|L1.10124|
002506  6800              LDR      r0,[r0,#0]  ; tout
002508  2804              CMP      r0,#4
00250a  ddd1              BLE      |L1.9392|
                  |L1.9484|
;;;809    																//delay(10);clear();
;;;810    														uart_putchar(UART1_BASE_PTR,0x1A);
00250c  211a              MOVS     r1,#0x1a
00250e  489c              LDR      r0,|L1.10112|
002510  f7fffffe          BL       uart_putchar
;;;811    												//delay(10);
;;;812    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002514  211a              MOVS     r1,#0x1a
002516  489a              LDR      r0,|L1.10112|
002518  f7fffffe          BL       uart_putchar
00251c  211a              MOVS     r1,#0x1a
00251e  4898              LDR      r0,|L1.10112|
002520  f7fffffe          BL       uart_putchar
002524  211a              MOVS     r1,#0x1a
002526  4896              LDR      r0,|L1.10112|
002528  f7fffffe          BL       uart_putchar
;;;813    						
;;;814    									
;;;815    									
;;;816    									
;;;817    									
;;;818    									
;;;819    									
;;;820    									
;;;821    
;;;822    //									for(k=0;k<len;k++)
;;;823    //									{
;;;824    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;825    //									}
;;;826    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;827    
;;;828    //									
;;;829    //													k2=0;									//string array counter for uart 1
;;;830    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;831    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;832    //																{
;;;833    //																	timeout--;
;;;834    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;835    //																}
;;;836    																if(flagch==1){		int_erval=temp;flagch=0;	}
00252c  48a6              LDR      r0,|L1.10184|
00252e  6800              LDR      r0,[r0,#0]  ; flagch
002530  2801              CMP      r0,#1
002532  d106              BNE      |L1.9538|
002534  48a5              LDR      r0,|L1.10188|
002536  6800              LDR      r0,[r0,#0]  ; temp
002538  49a5              LDR      r1,|L1.10192|
00253a  6008              STR      r0,[r1,#0]  ; int_erval
00253c  2000              MOVS     r0,#0
00253e  49a2              LDR      r1,|L1.10184|
002540  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.9538|
;;;837    delay(50);
002542  2032              MOVS     r0,#0x32
002544  f7fffffe          BL       delay
;;;838    stcond1=strstr(uart_string_gsm,"SEND OK");								
002548  499a              LDR      r1,|L1.10164|
00254a  488f              LDR      r0,|L1.10120|
00254c  e000              B        |L1.9552|
                  |L1.9550|
00254e  e003              B        |L1.9560|
                  |L1.9552|
002550  f7fffffe          BL       strstr
002554  498f              LDR      r1,|L1.10132|
002556  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.9560|
;;;839    								}
;;;840    //else{
;;;841    //log_it();
;;;842    //}
;;;843    
;;;844    
;;;845    if(!stcond1) // if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
002558  488e              LDR      r0,|L1.10132|
00255a  6800              LDR      r0,[r0,#0]  ; stcond1
00255c  2800              CMP      r0,#0
00255e  d001              BEQ      |L1.9572|
002560  f000ff35          BL       |L1.13262|
                  |L1.9572|
;;;846    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002564  211a              MOVS     r1,#0x1a
002566  4886              LDR      r0,|L1.10112|
002568  f7fffffe          BL       uart_putchar
00256c  f7fffffe          BL       clear
002570  200a              MOVS     r0,#0xa
002572  f7fffffe          BL       delay
;;;847    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002576  211a              MOVS     r1,#0x1a
002578  4881              LDR      r0,|L1.10112|
00257a  f7fffffe          BL       uart_putchar
00257e  f7fffffe          BL       clear
002582  200a              MOVS     r0,#0xa
002584  f7fffffe          BL       delay
;;;848    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002588  211a              MOVS     r1,#0x1a
00258a  487d              LDR      r0,|L1.10112|
00258c  f7fffffe          BL       uart_putchar
002590  f7fffffe          BL       clear
002594  200a              MOVS     r0,#0xa
002596  f7fffffe          BL       delay
;;;849    						//	remove_all_chars(data, '\n', '\n');
;;;850    	
;;;851    	//	strcat(data,"CH\n");	
;;;852    	
;;;853    	
;;;854    	delay(100);
00259a  2064              MOVS     r0,#0x64
00259c  f7fffffe          BL       delay
;;;855    		clear();//memset(uart_string_gsm,0,5000);
0025a0  f7fffffe          BL       clear
;;;856    	
;;;857    	memset(at_,0,100);
0025a4  2164              MOVS     r1,#0x64
0025a6  488b              LDR      r0,|L1.10196|
0025a8  f7fffffe          BL       __aeabi_memclr
;;;858    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0025ac  4878              LDR      r0,|L1.10128|
0025ae  f7fffffe          BL       strlen
0025b2  1c44              ADDS     r4,r0,#1
0025b4  4623              MOV      r3,r4
0025b6  4a88              LDR      r2,|L1.10200|
0025b8  4972              LDR      r1,|L1.10116|
0025ba  3938              SUBS     r1,r1,#0x38
0025bc  4885              LDR      r0,|L1.10196|
0025be  f7fffffe          BL       __2sprintf
;;;859    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0025c2  2005              MOVS     r0,#5
0025c4  4b6f              LDR      r3,|L1.10116|
0025c6  3b8c              SUBS     r3,r3,#0x8c
0025c8  461a              MOV      r2,r3
0025ca  3278              ADDS     r2,r2,#0x78
0025cc  a183              ADR      r1,|L1.10204|
0025ce  9000              STR      r0,[sp,#0]
0025d0  4880              LDR      r0,|L1.10196|
0025d2  f7fffffe          BL       send_SD
;;;860    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;861    //	if(strstr(uart_string_gsm,"ERROR")){
;;;862    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;863    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;864    //	}
;;;865    	
;;;866    clear();	
0025d6  f7fffffe          BL       clear
;;;867    									k2=0;									//string array counter for uart 1
0025da  2000              MOVS     r0,#0
0025dc  4973              LDR      r1,|L1.10156|
0025de  6008              STR      r0,[r1,#0]  ; k2
;;;868    									tout=0;	
0025e0  496a              LDR      r1,|L1.10124|
0025e2  6008              STR      r0,[r1,#0]  ; tout
;;;869    		for(k=0;k<strlen(data);k++)
0025e4  4972              LDR      r1,|L1.10160|
0025e6  6008              STR      r0,[r1,#0]  ; k
0025e8  e00b              B        |L1.9730|
                  |L1.9706|
;;;870    		{
;;;871    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0025ea  4869              LDR      r0,|L1.10128|
0025ec  4a70              LDR      r2,|L1.10160|
0025ee  6812              LDR      r2,[r2,#0]  ; k
0025f0  5c81              LDRB     r1,[r0,r2]
0025f2  4863              LDR      r0,|L1.10112|
0025f4  f7fffffe          BL       uart_putchar
0025f8  486d              LDR      r0,|L1.10160|
0025fa  6800              LDR      r0,[r0,#0]            ;869  ; k
0025fc  1c40              ADDS     r0,r0,#1              ;869
0025fe  496c              LDR      r1,|L1.10160|
002600  6008              STR      r0,[r1,#0]            ;869  ; k
                  |L1.9730|
002602  4863              LDR      r0,|L1.10128|
002604  f7fffffe          BL       strlen
002608  4969              LDR      r1,|L1.10160|
00260a  6809              LDR      r1,[r1,#0]            ;869  ; k
00260c  4288              CMP      r0,r1                 ;869
00260e  d8ec              BHI      |L1.9706|
;;;872    		}	
;;;873    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002610  210a              MOVS     r1,#0xa
002612  485b              LDR      r0,|L1.10112|
002614  f7fffffe          BL       uart_putchar
002618  210a              MOVS     r1,#0xa
00261a  4859              LDR      r0,|L1.10112|
00261c  f7fffffe          BL       uart_putchar
002620  210a              MOVS     r1,#0xa
002622  4857              LDR      r0,|L1.10112|
002624  f7fffffe          BL       uart_putchar
002628  210a              MOVS     r1,#0xa
00262a  4855              LDR      r0,|L1.10112|
00262c  f7fffffe          BL       uart_putchar
002630  210a              MOVS     r1,#0xa
002632  4853              LDR      r0,|L1.10112|
002634  f7fffffe          BL       uart_putchar
002638  210a              MOVS     r1,#0xa
00263a  4851              LDR      r0,|L1.10112|
00263c  f7fffffe          BL       uart_putchar
002640  210a              MOVS     r1,#0xa
002642  484f              LDR      r0,|L1.10112|
002644  f7fffffe          BL       uart_putchar
002648  210a              MOVS     r1,#0xa
00264a  484d              LDR      r0,|L1.10112|
00264c  f7fffffe          BL       uart_putchar
002650  210a              MOVS     r1,#0xa
002652  484b              LDR      r0,|L1.10112|
002654  f7fffffe          BL       uart_putchar
002658  210a              MOVS     r1,#0xa
00265a  4849              LDR      r0,|L1.10112|
00265c  f7fffffe          BL       uart_putchar
002660  210a              MOVS     r1,#0xa
002662  4847              LDR      r0,|L1.10112|
002664  f7fffffe          BL       uart_putchar
002668  210a              MOVS     r1,#0xa
00266a  4845              LDR      r0,|L1.10112|
00266c  f7fffffe          BL       uart_putchar
002670  210a              MOVS     r1,#0xa
002672  4843              LDR      r0,|L1.10112|
002674  f7fffffe          BL       uart_putchar
002678  210a              MOVS     r1,#0xa
00267a  4841              LDR      r0,|L1.10112|
00267c  f7fffffe          BL       uart_putchar
002680  210a              MOVS     r1,#0xa
002682  483f              LDR      r0,|L1.10112|
002684  f7fffffe          BL       uart_putchar
002688  210a              MOVS     r1,#0xa
00268a  483d              LDR      r0,|L1.10112|
00268c  f7fffffe          BL       uart_putchar
002690  210a              MOVS     r1,#0xa
002692  483b              LDR      r0,|L1.10112|
002694  f7fffffe          BL       uart_putchar
002698  210a              MOVS     r1,#0xa
00269a  4839              LDR      r0,|L1.10112|
00269c  f7fffffe          BL       uart_putchar
0026a0  210a              MOVS     r1,#0xa
0026a2  4837              LDR      r0,|L1.10112|
0026a4  f7fffffe          BL       uart_putchar
0026a8  210a              MOVS     r1,#0xa
0026aa  4835              LDR      r0,|L1.10112|
0026ac  f7fffffe          BL       uart_putchar
0026b0  210a              MOVS     r1,#0xa
0026b2  4833              LDR      r0,|L1.10112|
0026b4  f7fffffe          BL       uart_putchar
0026b8  210a              MOVS     r1,#0xa
0026ba  4831              LDR      r0,|L1.10112|
0026bc  f7fffffe          BL       uart_putchar
0026c0  210a              MOVS     r1,#0xa
0026c2  482f              LDR      r0,|L1.10112|
0026c4  f7fffffe          BL       uart_putchar
0026c8  210a              MOVS     r1,#0xa
0026ca  482d              LDR      r0,|L1.10112|
0026cc  f7fffffe          BL       uart_putchar
0026d0  210a              MOVS     r1,#0xa
0026d2  482b              LDR      r0,|L1.10112|
0026d4  f7fffffe          BL       uart_putchar
0026d8  210a              MOVS     r1,#0xa
0026da  4829              LDR      r0,|L1.10112|
0026dc  f7fffffe          BL       uart_putchar
0026e0  210a              MOVS     r1,#0xa
0026e2  4827              LDR      r0,|L1.10112|
0026e4  f7fffffe          BL       uart_putchar
0026e8  210a              MOVS     r1,#0xa
0026ea  4825              LDR      r0,|L1.10112|
0026ec  f7fffffe          BL       uart_putchar
0026f0  210a              MOVS     r1,#0xa
0026f2  4823              LDR      r0,|L1.10112|
0026f4  f7fffffe          BL       uart_putchar
0026f8  210a              MOVS     r1,#0xa
0026fa  4821              LDR      r0,|L1.10112|
0026fc  f7fffffe          BL       uart_putchar
002700  210a              MOVS     r1,#0xa
002702  481f              LDR      r0,|L1.10112|
002704  f7fffffe          BL       uart_putchar
002708  210a              MOVS     r1,#0xa
00270a  481d              LDR      r0,|L1.10112|
00270c  f7fffffe          BL       uart_putchar
002710  210a              MOVS     r1,#0xa
002712  481b              LDR      r0,|L1.10112|
002714  f7fffffe          BL       uart_putchar
002718  210a              MOVS     r1,#0xa
00271a  4819              LDR      r0,|L1.10112|
00271c  f7fffffe          BL       uart_putchar
002720  210a              MOVS     r1,#0xa
002722  4817              LDR      r0,|L1.10112|
002724  f7fffffe          BL       uart_putchar
002728  210a              MOVS     r1,#0xa
00272a  4815              LDR      r0,|L1.10112|
00272c  f7fffffe          BL       uart_putchar
002730  210a              MOVS     r1,#0xa
002732  4813              LDR      r0,|L1.10112|
002734  f7fffffe          BL       uart_putchar
002738  210a              MOVS     r1,#0xa
00273a  4811              LDR      r0,|L1.10112|
00273c  f7fffffe          BL       uart_putchar
002740  210a              MOVS     r1,#0xa
002742  480f              LDR      r0,|L1.10112|
002744  f7fffffe          BL       uart_putchar
002748  210a              MOVS     r1,#0xa
00274a  480d              LDR      r0,|L1.10112|
00274c  f7fffffe          BL       uart_putchar
002750  210a              MOVS     r1,#0xa
002752  480b              LDR      r0,|L1.10112|
002754  f7fffffe          BL       uart_putchar
002758  210a              MOVS     r1,#0xa
00275a  4809              LDR      r0,|L1.10112|
00275c  f7fffffe          BL       uart_putchar
002760  210a              MOVS     r1,#0xa
002762  4807              LDR      r0,|L1.10112|
002764  f7fffffe          BL       uart_putchar
002768  210a              MOVS     r1,#0xa
00276a  4805              LDR      r0,|L1.10112|
00276c  f7fffffe          BL       uart_putchar
002770  210a              MOVS     r1,#0xa
002772  4803              LDR      r0,|L1.10112|
002774  f7fffffe          BL       uart_putchar
002778  210a              MOVS     r1,#0xa
00277a  4801              LDR      r0,|L1.10112|
00277c  e030              B        |L1.10208|
00277e  0000              DCW      0x0000
                  |L1.10112|
                          DCD      0x4006b000
                  |L1.10116|
                          DCD      ||.text||+0x8fc
                  |L1.10120|
                          DCD      uart_string_gsm
                  |L1.10124|
                          DCD      tout
                  |L1.10128|
                          DCD      data
                  |L1.10132|
                          DCD      stcond1
                  |L1.10136|
                          DCD      con1d
                  |L1.10140|
                          DCD      cond
                  |L1.10144|
                          DCD      0x00001388
                  |L1.10148|
0027a4  0a00              DCB      "\n",0
0027a6  00                DCB      0
0027a7  00                DCB      0
                  |L1.10152|
                          DCD      len
                  |L1.10156|
                          DCD      ||k2||
                  |L1.10160|
                          DCD      k
                  |L1.10164|
                          DCD      ||.text||+0x474
                  |L1.10168|
                          DCD      stcond2
                  |L1.10172|
                          DCD      ||.text||+0xde4
                  |L1.10176|
                          DCD      stcond3
                  |L1.10180|
                          DCD      stcond4
                  |L1.10184|
                          DCD      flagch
                  |L1.10188|
                          DCD      temp
                  |L1.10192|
                          DCD      int_erval
                  |L1.10196|
                          DCD      at_
                  |L1.10200|
                          DCD      drive
                  |L1.10204|
0027dc  3e00              DCB      ">",0
0027de  00                DCB      0
0027df  00                DCB      0
                  |L1.10208|
0027e0  f7fffffe          BL       uart_putchar
0027e4  210a              MOVS     r1,#0xa
0027e6  48fe              LDR      r0,|L1.11232|
0027e8  f7fffffe          BL       uart_putchar
0027ec  210a              MOVS     r1,#0xa
0027ee  48fc              LDR      r0,|L1.11232|
0027f0  f7fffffe          BL       uart_putchar
0027f4  210a              MOVS     r1,#0xa
0027f6  48fa              LDR      r0,|L1.11232|
0027f8  f7fffffe          BL       uart_putchar
0027fc  210a              MOVS     r1,#0xa
0027fe  48f8              LDR      r0,|L1.11232|
002800  f7fffffe          BL       uart_putchar
002804  210a              MOVS     r1,#0xa
002806  48f6              LDR      r0,|L1.11232|
002808  f7fffffe          BL       uart_putchar
00280c  210a              MOVS     r1,#0xa
00280e  48f4              LDR      r0,|L1.11232|
002810  f7fffffe          BL       uart_putchar
002814  210a              MOVS     r1,#0xa
002816  48f2              LDR      r0,|L1.11232|
002818  f7fffffe          BL       uart_putchar
00281c  210a              MOVS     r1,#0xa
00281e  48f0              LDR      r0,|L1.11232|
002820  f7fffffe          BL       uart_putchar
002824  210a              MOVS     r1,#0xa
002826  48ee              LDR      r0,|L1.11232|
002828  f7fffffe          BL       uart_putchar
00282c  210a              MOVS     r1,#0xa
00282e  48ec              LDR      r0,|L1.11232|
002830  f7fffffe          BL       uart_putchar
002834  210a              MOVS     r1,#0xa
002836  48ea              LDR      r0,|L1.11232|
002838  f7fffffe          BL       uart_putchar
;;;874    									//memset(data,0,1000);
;;;875    														//timer counts to wait for characters in uart 1 									
;;;876    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00283c  bf00              NOP      
                  |L1.10302|
00283e  49e9              LDR      r1,|L1.11236|
002840  48e9              LDR      r0,|L1.11240|
002842  f7fffffe          BL       strstr
002846  2800              CMP      r0,#0
002848  d10a              BNE      |L1.10336|
00284a  49e6              LDR      r1,|L1.11236|
00284c  398c              SUBS     r1,r1,#0x8c
00284e  48e6              LDR      r0,|L1.11240|
002850  f7fffffe          BL       strstr
002854  2800              CMP      r0,#0
002856  d103              BNE      |L1.10336|
002858  48e4              LDR      r0,|L1.11244|
00285a  6800              LDR      r0,[r0,#0]  ; tout
00285c  2805              CMP      r0,#5
00285e  ddee              BLE      |L1.10302|
                  |L1.10336|
;;;877    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;878    									}
;;;879    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002860  f7fffffe          BL       clear
;;;880    									//clear();
;;;881    									memset(data,0,strlen(data));
002864  48e2              LDR      r0,|L1.11248|
002866  f7fffffe          BL       strlen
00286a  4604              MOV      r4,r0
00286c  4621              MOV      r1,r4
00286e  48e0              LDR      r0,|L1.11248|
002870  f7fffffe          BL       __aeabi_memclr
;;;882    									clear();
002874  f7fffffe          BL       clear
;;;883    
;;;884    								
;;;885    	
;;;886    	
;;;887    	
;;;888    	//	log_it();		
;;;889    		memset(data,0,strlen(data));	
002878  48dd              LDR      r0,|L1.11248|
00287a  f7fffffe          BL       strlen
00287e  4604              MOV      r4,r0
002880  4621              MOV      r1,r4
002882  48db              LDR      r0,|L1.11248|
002884  f7fffffe          BL       __aeabi_memclr
;;;890    									GPS_COLLECT();
002888  f7fffffe          BL       GPS_COLLECT
;;;891    									strcat(data,"CH\n");	
00288c  49d5              LDR      r1,|L1.11236|
00288e  3944              SUBS     r1,r1,#0x44
002890  48d7              LDR      r0,|L1.11248|
002892  f7fffffe          BL       strcat
;;;892    				
;;;893    					   	if(flagch!=1){
002896  48d7              LDR      r0,|L1.11252|
002898  6800              LDR      r0,[r0,#0]  ; flagch
00289a  2801              CMP      r0,#1
00289c  d009              BEQ      |L1.10418|
;;;894    							temp=int_erval;				
00289e  48d6              LDR      r0,|L1.11256|
0028a0  6800              LDR      r0,[r0,#0]  ; int_erval
0028a2  49d6              LDR      r1,|L1.11260|
0028a4  6008              STR      r0,[r1,#0]  ; temp
;;;895    							int_erval=4;
0028a6  2004              MOVS     r0,#4
0028a8  49d3              LDR      r1,|L1.11256|
0028aa  6008              STR      r0,[r1,#0]  ; int_erval
;;;896    							flagch=1;}
0028ac  2001              MOVS     r0,#1
0028ae  49d1              LDR      r1,|L1.11252|
0028b0  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.10418|
;;;897    							clear();	
0028b2  f7fffffe          BL       clear
;;;898    
;;;899    
;;;900    //**************************************tcp_initialization();********************************//
;;;901    
;;;902    	
;;;903    msg_sim800(); 
0028b6  f7fffffe          BL       msg_sim800
;;;904    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0028ba  2005              MOVS     r0,#5
0028bc  4bc9              LDR      r3,|L1.11236|
0028be  3b8c              SUBS     r3,r3,#0x8c
0028c0  461a              MOV      r2,r3
0028c2  3278              ADDS     r2,r2,#0x78
0028c4  a1ce              ADR      r1,|L1.11264|
0028c6  9000              STR      r0,[sp,#0]
0028c8  4610              MOV      r0,r2
0028ca  3020              ADDS     r0,r0,#0x20
0028cc  f7fffffe          BL       send_GSM
;;;905    delay(100);
0028d0  2064              MOVS     r0,#0x64
0028d2  f7fffffe          BL       delay
;;;906    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0028d6  2004              MOVS     r0,#4
0028d8  4bc2              LDR      r3,|L1.11236|
0028da  3b8c              SUBS     r3,r3,#0x8c
0028dc  461a              MOV      r2,r3
0028de  32a8              ADDS     r2,r2,#0xa8
0028e0  a1c7              ADR      r1,|L1.11264|
0028e2  9000              STR      r0,[sp,#0]
0028e4  4610              MOV      r0,r2
0028e6  3014              ADDS     r0,r0,#0x14
0028e8  f7fffffe          BL       send_GSM
;;;907    GPS_COLLECT2();
0028ec  f7fffffe          BL       GPS_COLLECT2
;;;908    strcat(data,"CH\n");		
0028f0  49bc              LDR      r1,|L1.11236|
0028f2  3944              SUBS     r1,r1,#0x44
0028f4  48be              LDR      r0,|L1.11248|
0028f6  f7fffffe          BL       strcat
;;;909    GPS_COLLECT2();
0028fa  f7fffffe          BL       GPS_COLLECT2
;;;910    strcat(data,"CH\n");	
0028fe  49b9              LDR      r1,|L1.11236|
002900  3944              SUBS     r1,r1,#0x44
002902  48bb              LDR      r0,|L1.11248|
002904  f7fffffe          BL       strcat
;;;911    GPS_COLLECT2();
002908  f7fffffe          BL       GPS_COLLECT2
;;;912    strcat(data,"CH\n");
00290c  49b5              LDR      r1,|L1.11236|
00290e  3944              SUBS     r1,r1,#0x44
002910  48b7              LDR      r0,|L1.11248|
002912  f7fffffe          BL       strcat
;;;913    cond201=(strstr(uart_string_gsm, "OK"));
002916  a1ba              ADR      r1,|L1.11264|
002918  48b3              LDR      r0,|L1.11240|
00291a  f7fffffe          BL       strstr
00291e  49b9              LDR      r1,|L1.11268|
002920  6008              STR      r0,[r1,#0]  ; cond201
;;;914    cond200=(strstr(uart_string_gsm, "ERROR"));
002922  49b0              LDR      r1,|L1.11236|
002924  398c              SUBS     r1,r1,#0x8c
002926  48b0              LDR      r0,|L1.11240|
002928  f7fffffe          BL       strstr
00292c  49b6              LDR      r1,|L1.11272|
00292e  6008              STR      r0,[r1,#0]  ; cond200
;;;915    if((!(cond201|| cond200 ))  && sleep_flag != 1)
002930  48b4              LDR      r0,|L1.11268|
002932  6800              LDR      r0,[r0,#0]  ; cond201
002934  2800              CMP      r0,#0
                  |L1.10550|
002936  d17d              BNE      |L1.10804|
002938  4608              MOV      r0,r1
00293a  6800              LDR      r0,[r0,#0]  ; cond200
00293c  2800              CMP      r0,#0
00293e  d1fa              BNE      |L1.10550|
002940  48b2              LDR      r0,|L1.11276|
002942  6800              LDR      r0,[r0,#0]  ; sleep_flag
002944  2801              CMP      r0,#1
002946  d075              BEQ      |L1.10804|
;;;916    {
;;;917    delay(100);
002948  2064              MOVS     r0,#0x64
00294a  f7fffffe          BL       delay
;;;918    clear();//memset(uart_string_gsm,0,5000);
00294e  f7fffffe          BL       clear
;;;919    memset(at_,0,100);
002952  2164              MOVS     r1,#0x64
002954  48ae              LDR      r0,|L1.11280|
002956  f7fffffe          BL       __aeabi_memclr
;;;920    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00295a  48a5              LDR      r0,|L1.11248|
00295c  f7fffffe          BL       strlen
002960  1c44              ADDS     r4,r0,#1
002962  4623              MOV      r3,r4
002964  4aab              LDR      r2,|L1.11284|
002966  499f              LDR      r1,|L1.11236|
002968  3938              SUBS     r1,r1,#0x38
00296a  48a9              LDR      r0,|L1.11280|
00296c  f7fffffe          BL       __2sprintf
;;;921    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002970  2005              MOVS     r0,#5
002972  4b9c              LDR      r3,|L1.11236|
002974  3b8c              SUBS     r3,r3,#0x8c
002976  461a              MOV      r2,r3
002978  3278              ADDS     r2,r2,#0x78
00297a  a1a7              ADR      r1,|L1.11288|
00297c  9000              STR      r0,[sp,#0]
00297e  48a4              LDR      r0,|L1.11280|
002980  f7fffffe          BL       send_SD
;;;922    clear();	
002984  f7fffffe          BL       clear
;;;923    k2=0;									//string array counter for uart 1
002988  2000              MOVS     r0,#0
00298a  49a4              LDR      r1,|L1.11292|
00298c  6008              STR      r0,[r1,#0]  ; k2
;;;924    tout=0;	
00298e  4997              LDR      r1,|L1.11244|
002990  6008              STR      r0,[r1,#0]  ; tout
;;;925    for(k=0;k<strlen(data);k++)
002992  49a3              LDR      r1,|L1.11296|
002994  6008              STR      r0,[r1,#0]  ; k
002996  e00b              B        |L1.10672|
                  |L1.10648|
;;;926    {
;;;927    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002998  4895              LDR      r0,|L1.11248|
00299a  4aa1              LDR      r2,|L1.11296|
00299c  6812              LDR      r2,[r2,#0]  ; k
00299e  5c81              LDRB     r1,[r0,r2]
0029a0  488f              LDR      r0,|L1.11232|
0029a2  f7fffffe          BL       uart_putchar
0029a6  489e              LDR      r0,|L1.11296|
0029a8  6800              LDR      r0,[r0,#0]            ;925  ; k
0029aa  1c40              ADDS     r0,r0,#1              ;925
0029ac  499c              LDR      r1,|L1.11296|
0029ae  6008              STR      r0,[r1,#0]            ;925  ; k
                  |L1.10672|
0029b0  488f              LDR      r0,|L1.11248|
0029b2  f7fffffe          BL       strlen
0029b6  499a              LDR      r1,|L1.11296|
0029b8  6809              LDR      r1,[r1,#0]            ;925  ; k
0029ba  4288              CMP      r0,r1                 ;925
0029bc  d8ec              BHI      |L1.10648|
;;;928    }	
;;;929    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0029be  210a              MOVS     r1,#0xa
0029c0  4887              LDR      r0,|L1.11232|
0029c2  f7fffffe          BL       uart_putchar
0029c6  210a              MOVS     r1,#0xa
0029c8  4885              LDR      r0,|L1.11232|
0029ca  f7fffffe          BL       uart_putchar
0029ce  210a              MOVS     r1,#0xa
0029d0  4883              LDR      r0,|L1.11232|
0029d2  f7fffffe          BL       uart_putchar
0029d6  210a              MOVS     r1,#0xa
0029d8  4881              LDR      r0,|L1.11232|
0029da  f7fffffe          BL       uart_putchar
0029de  210a              MOVS     r1,#0xa
0029e0  487f              LDR      r0,|L1.11232|
0029e2  f7fffffe          BL       uart_putchar
0029e6  210a              MOVS     r1,#0xa
0029e8  487d              LDR      r0,|L1.11232|
0029ea  f7fffffe          BL       uart_putchar
0029ee  210a              MOVS     r1,#0xa
0029f0  487b              LDR      r0,|L1.11232|
0029f2  f7fffffe          BL       uart_putchar
0029f6  210a              MOVS     r1,#0xa
0029f8  4879              LDR      r0,|L1.11232|
0029fa  f7fffffe          BL       uart_putchar
0029fe  210a              MOVS     r1,#0xa
002a00  4877              LDR      r0,|L1.11232|
002a02  f7fffffe          BL       uart_putchar
002a06  210a              MOVS     r1,#0xa
002a08  4875              LDR      r0,|L1.11232|
002a0a  f7fffffe          BL       uart_putchar
002a0e  210a              MOVS     r1,#0xa
002a10  4873              LDR      r0,|L1.11232|
002a12  f7fffffe          BL       uart_putchar
002a16  210a              MOVS     r1,#0xa
002a18  4871              LDR      r0,|L1.11232|
002a1a  f7fffffe          BL       uart_putchar
002a1e  210a              MOVS     r1,#0xa
002a20  486f              LDR      r0,|L1.11232|
002a22  f7fffffe          BL       uart_putchar
002a26  210a              MOVS     r1,#0xa
002a28  486d              LDR      r0,|L1.11232|
002a2a  f7fffffe          BL       uart_putchar
002a2e  210a              MOVS     r1,#0xa
002a30  486b              LDR      r0,|L1.11232|
002a32  e000              B        |L1.10806|
                  |L1.10804|
002a34  e0d3              B        |L1.11230|
                  |L1.10806|
002a36  f7fffffe          BL       uart_putchar
002a3a  210a              MOVS     r1,#0xa
002a3c  4868              LDR      r0,|L1.11232|
002a3e  f7fffffe          BL       uart_putchar
002a42  210a              MOVS     r1,#0xa
002a44  4866              LDR      r0,|L1.11232|
002a46  f7fffffe          BL       uart_putchar
002a4a  210a              MOVS     r1,#0xa
002a4c  4864              LDR      r0,|L1.11232|
002a4e  f7fffffe          BL       uart_putchar
002a52  210a              MOVS     r1,#0xa
002a54  4862              LDR      r0,|L1.11232|
002a56  f7fffffe          BL       uart_putchar
002a5a  210a              MOVS     r1,#0xa
002a5c  4860              LDR      r0,|L1.11232|
002a5e  f7fffffe          BL       uart_putchar
002a62  210a              MOVS     r1,#0xa
002a64  485e              LDR      r0,|L1.11232|
002a66  f7fffffe          BL       uart_putchar
002a6a  210a              MOVS     r1,#0xa
002a6c  485c              LDR      r0,|L1.11232|
002a6e  f7fffffe          BL       uart_putchar
002a72  210a              MOVS     r1,#0xa
002a74  485a              LDR      r0,|L1.11232|
002a76  f7fffffe          BL       uart_putchar
002a7a  210a              MOVS     r1,#0xa
002a7c  4858              LDR      r0,|L1.11232|
002a7e  f7fffffe          BL       uart_putchar
002a82  210a              MOVS     r1,#0xa
002a84  4856              LDR      r0,|L1.11232|
002a86  f7fffffe          BL       uart_putchar
002a8a  210a              MOVS     r1,#0xa
002a8c  4854              LDR      r0,|L1.11232|
002a8e  f7fffffe          BL       uart_putchar
002a92  210a              MOVS     r1,#0xa
002a94  4852              LDR      r0,|L1.11232|
002a96  f7fffffe          BL       uart_putchar
002a9a  210a              MOVS     r1,#0xa
002a9c  4850              LDR      r0,|L1.11232|
002a9e  f7fffffe          BL       uart_putchar
002aa2  210a              MOVS     r1,#0xa
002aa4  484e              LDR      r0,|L1.11232|
002aa6  f7fffffe          BL       uart_putchar
002aaa  210a              MOVS     r1,#0xa
002aac  484c              LDR      r0,|L1.11232|
002aae  f7fffffe          BL       uart_putchar
002ab2  210a              MOVS     r1,#0xa
002ab4  484a              LDR      r0,|L1.11232|
002ab6  f7fffffe          BL       uart_putchar
002aba  210a              MOVS     r1,#0xa
002abc  4848              LDR      r0,|L1.11232|
002abe  f7fffffe          BL       uart_putchar
002ac2  210a              MOVS     r1,#0xa
002ac4  4846              LDR      r0,|L1.11232|
002ac6  f7fffffe          BL       uart_putchar
002aca  210a              MOVS     r1,#0xa
002acc  4844              LDR      r0,|L1.11232|
002ace  f7fffffe          BL       uart_putchar
002ad2  210a              MOVS     r1,#0xa
002ad4  4842              LDR      r0,|L1.11232|
002ad6  f7fffffe          BL       uart_putchar
002ada  210a              MOVS     r1,#0xa
002adc  4840              LDR      r0,|L1.11232|
002ade  f7fffffe          BL       uart_putchar
002ae2  210a              MOVS     r1,#0xa
002ae4  483e              LDR      r0,|L1.11232|
002ae6  f7fffffe          BL       uart_putchar
002aea  210a              MOVS     r1,#0xa
002aec  483c              LDR      r0,|L1.11232|
002aee  f7fffffe          BL       uart_putchar
002af2  210a              MOVS     r1,#0xa
002af4  483a              LDR      r0,|L1.11232|
002af6  f7fffffe          BL       uart_putchar
002afa  210a              MOVS     r1,#0xa
002afc  4838              LDR      r0,|L1.11232|
002afe  f7fffffe          BL       uart_putchar
002b02  210a              MOVS     r1,#0xa
002b04  4836              LDR      r0,|L1.11232|
002b06  f7fffffe          BL       uart_putchar
002b0a  210a              MOVS     r1,#0xa
002b0c  4834              LDR      r0,|L1.11232|
002b0e  f7fffffe          BL       uart_putchar
002b12  210a              MOVS     r1,#0xa
002b14  4832              LDR      r0,|L1.11232|
002b16  f7fffffe          BL       uart_putchar
002b1a  210a              MOVS     r1,#0xa
002b1c  4830              LDR      r0,|L1.11232|
002b1e  f7fffffe          BL       uart_putchar
002b22  210a              MOVS     r1,#0xa
002b24  482e              LDR      r0,|L1.11232|
002b26  f7fffffe          BL       uart_putchar
002b2a  210a              MOVS     r1,#0xa
002b2c  482c              LDR      r0,|L1.11232|
002b2e  f7fffffe          BL       uart_putchar
002b32  210a              MOVS     r1,#0xa
002b34  482a              LDR      r0,|L1.11232|
002b36  f7fffffe          BL       uart_putchar
002b3a  210a              MOVS     r1,#0xa
002b3c  4828              LDR      r0,|L1.11232|
002b3e  f7fffffe          BL       uart_putchar
002b42  210a              MOVS     r1,#0xa
002b44  4826              LDR      r0,|L1.11232|
002b46  f7fffffe          BL       uart_putchar
002b4a  210a              MOVS     r1,#0xa
002b4c  4824              LDR      r0,|L1.11232|
002b4e  f7fffffe          BL       uart_putchar
002b52  210a              MOVS     r1,#0xa
002b54  4822              LDR      r0,|L1.11232|
002b56  f7fffffe          BL       uart_putchar
002b5a  210a              MOVS     r1,#0xa
002b5c  4820              LDR      r0,|L1.11232|
002b5e  f7fffffe          BL       uart_putchar
002b62  210a              MOVS     r1,#0xa
002b64  481e              LDR      r0,|L1.11232|
002b66  f7fffffe          BL       uart_putchar
002b6a  210a              MOVS     r1,#0xa
002b6c  481c              LDR      r0,|L1.11232|
002b6e  f7fffffe          BL       uart_putchar
002b72  210a              MOVS     r1,#0xa
002b74  481a              LDR      r0,|L1.11232|
002b76  f7fffffe          BL       uart_putchar
002b7a  210a              MOVS     r1,#0xa
002b7c  4818              LDR      r0,|L1.11232|
002b7e  f7fffffe          BL       uart_putchar
002b82  210a              MOVS     r1,#0xa
002b84  4816              LDR      r0,|L1.11232|
002b86  f7fffffe          BL       uart_putchar
;;;930    									//memset(data,0,1000);
;;;931    														//timer counts to wait for characters in uart 1 									
;;;932    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002b8a  bf00              NOP      
                  |L1.11148|
002b8c  4915              LDR      r1,|L1.11236|
002b8e  4816              LDR      r0,|L1.11240|
002b90  f7fffffe          BL       strstr
002b94  2800              CMP      r0,#0
002b96  d10a              BNE      |L1.11182|
002b98  4912              LDR      r1,|L1.11236|
002b9a  398c              SUBS     r1,r1,#0x8c
002b9c  4812              LDR      r0,|L1.11240|
002b9e  f7fffffe          BL       strstr
002ba2  2800              CMP      r0,#0
002ba4  d103              BNE      |L1.11182|
002ba6  4811              LDR      r0,|L1.11244|
002ba8  6800              LDR      r0,[r0,#0]  ; tout
002baa  2805              CMP      r0,#5
002bac  ddee              BLE      |L1.11148|
                  |L1.11182|
;;;933    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;934    									}
;;;935    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002bae  f7fffffe          BL       clear
;;;936    									//clear();
;;;937    									memset(data,0,strlen(data));
002bb2  480f              LDR      r0,|L1.11248|
002bb4  f7fffffe          BL       strlen
002bb8  4604              MOV      r4,r0
002bba  4621              MOV      r1,r4
002bbc  480c              LDR      r0,|L1.11248|
002bbe  f7fffffe          BL       __aeabi_memclr
;;;938    									clear();
002bc2  f7fffffe          BL       clear
;;;939    									RESET_OFF;delay(100);
002bc6  2020              MOVS     r0,#0x20
002bc8  4916              LDR      r1,|L1.11300|
002bca  6088              STR      r0,[r1,#8]
002bcc  2064              MOVS     r0,#0x64
002bce  f7fffffe          BL       delay
;;;940    									RESET_ON;delay(100);		
002bd2  2020              MOVS     r0,#0x20
002bd4  4913              LDR      r1,|L1.11300|
002bd6  6048              STR      r0,[r1,#4]
002bd8  2064              MOVS     r0,#0x64
002bda  f7fffffe          BL       delay
                  |L1.11230|
;;;941    }
;;;942    	
;;;943    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
002bde  e023              B        |L1.11304|
                  |L1.11232|
                          DCD      0x4006b000
                  |L1.11236|
                          DCD      ||.text||+0x8fc
                  |L1.11240|
                          DCD      uart_string_gsm
                  |L1.11244|
                          DCD      tout
                  |L1.11248|
                          DCD      data
                  |L1.11252|
                          DCD      flagch
                  |L1.11256|
                          DCD      int_erval
                  |L1.11260|
                          DCD      temp
                  |L1.11264|
002c00  4f4b00            DCB      "OK",0
002c03  00                DCB      0
                  |L1.11268|
                          DCD      cond201
                  |L1.11272|
                          DCD      cond200
                  |L1.11276|
                          DCD      sleep_flag
                  |L1.11280|
                          DCD      at_
                  |L1.11284|
                          DCD      drive
                  |L1.11288|
002c18  3e00              DCB      ">",0
002c1a  00                DCB      0
002c1b  00                DCB      0
                  |L1.11292|
                          DCD      ||k2||
                  |L1.11296|
                          DCD      k
                  |L1.11300|
                          DCD      0x400ff080
                  |L1.11304|
002c28  2004              MOVS     r0,#4
002c2a  4bfd              LDR      r3,|L1.12320|
002c2c  4afd              LDR      r2,|L1.12324|
002c2e  a1fe              ADR      r1,|L1.12328|
002c30  9000              STR      r0,[sp,#0]
002c32  4618              MOV      r0,r3
002c34  300c              ADDS     r0,r0,#0xc
002c36  f7fffffe          BL       send_GSM
;;;944    GPS_COLLECT2();
002c3a  f7fffffe          BL       GPS_COLLECT2
;;;945    strcat(data,"CH\n");	
002c3e  49f9              LDR      r1,|L1.12324|
002c40  3930              SUBS     r1,r1,#0x30
002c42  48fa              LDR      r0,|L1.12332|
002c44  f7fffffe          BL       strcat
;;;946    memset(at_,0,100);
002c48  2164              MOVS     r1,#0x64
002c4a  48f9              LDR      r0,|L1.12336|
002c4c  f7fffffe          BL       __aeabi_memclr
;;;947    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
002c50  4af8              LDR      r2,|L1.12340|
002c52  49f3              LDR      r1,|L1.12320|
002c54  3120              ADDS     r1,r1,#0x20
002c56  48f6              LDR      r0,|L1.12336|
002c58  f7fffffe          BL       __2sprintf
;;;948    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
002c5c  48f6              LDR      r0,|L1.12344|
002c5e  6800              LDR      r0,[r0,#0]  ; tmeout
002c60  4bef              LDR      r3,|L1.12320|
002c62  4af0              LDR      r2,|L1.12324|
002c64  a1f0              ADR      r1,|L1.12328|
002c66  9000              STR      r0,[sp,#0]
002c68  48f1              LDR      r0,|L1.12336|
002c6a  f7fffffe          BL       send_GSM
;;;949    msg_sim800(); 
002c6e  f7fffffe          BL       msg_sim800
;;;950    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
002c72  2004              MOVS     r0,#4
002c74  4beb              LDR      r3,|L1.12324|
002c76  3b5c              SUBS     r3,r3,#0x5c
002c78  4aea              LDR      r2,|L1.12324|
002c7a  a1eb              ADR      r1,|L1.12328|
002c7c  9000              STR      r0,[sp,#0]
002c7e  48e8              LDR      r0,|L1.12320|
002c80  3038              ADDS     r0,r0,#0x38
002c82  f7fffffe          BL       send_GSM
;;;951    GPS_COLLECT2();
002c86  f7fffffe          BL       GPS_COLLECT2
;;;952    strcat(data,"CH\n");	
002c8a  49e6              LDR      r1,|L1.12324|
002c8c  3930              SUBS     r1,r1,#0x30
002c8e  48e7              LDR      r0,|L1.12332|
002c90  f7fffffe          BL       strcat
;;;953    GPS_COLLECT2();
002c94  f7fffffe          BL       GPS_COLLECT2
;;;954    strcat(data,"CH\n");	
002c98  49e2              LDR      r1,|L1.12324|
002c9a  3930              SUBS     r1,r1,#0x30
002c9c  48e3              LDR      r0,|L1.12332|
002c9e  f7fffffe          BL       strcat
;;;955    
;;;956    
;;;957    msg_sim800(); 
002ca2  f7fffffe          BL       msg_sim800
;;;958    GPS_COLLECT2();
002ca6  f7fffffe          BL       GPS_COLLECT2
;;;959    strcat(data,"CH\n");	
002caa  49de              LDR      r1,|L1.12324|
002cac  3930              SUBS     r1,r1,#0x30
002cae  48df              LDR      r0,|L1.12332|
002cb0  f7fffffe          BL       strcat
;;;960    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
002cb4  f7fffffe          BL       clear
002cb8  48d9              LDR      r0,|L1.12320|
002cba  3048              ADDS     r0,r0,#0x48
002cbc  f7fffffe          BL       send_modem
002cc0  f7fffffe          BL       clear
;;;961    					delay(20);
002cc4  2014              MOVS     r0,#0x14
002cc6  f7fffffe          BL       delay
;;;962    
;;;963    
;;;964    msg_sim800(); 
002cca  f7fffffe          BL       msg_sim800
;;;965    
;;;966    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
002cce  4bdb              LDR      r3,|L1.12348|
002cd0  4adb              LDR      r2,|L1.12352|
002cd2  49d3              LDR      r1,|L1.12320|
002cd4  3160              ADDS     r1,r1,#0x60
002cd6  48d6              LDR      r0,|L1.12336|
002cd8  f7fffffe          BL       __2sprintf
;;;967    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
002cdc  48d6              LDR      r0,|L1.12344|
002cde  6800              LDR      r0,[r0,#0]  ; tmeout
002ce0  4bcf              LDR      r3,|L1.12320|
002ce2  4ad0              LDR      r2,|L1.12324|
002ce4  3a78              SUBS     r2,r2,#0x78
002ce6  4619              MOV      r1,r3
002ce8  3180              ADDS     r1,r1,#0x80
002cea  9000              STR      r0,[sp,#0]
002cec  48d0              LDR      r0,|L1.12336|
002cee  f7fffffe          BL       send_GSM
;;;968    						clear();
002cf2  f7fffffe          BL       clear
;;;969    						
;;;970    						
;;;971    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
002cf6  48d0              LDR      r0,|L1.12344|
002cf8  6800              LDR      r0,[r0,#0]  ; tmeout
002cfa  4bc9              LDR      r3,|L1.12320|
002cfc  3388              ADDS     r3,r3,#0x88
002cfe  4ac9              LDR      r2,|L1.12324|
002d00  3a78              SUBS     r2,r2,#0x78
002d02  a1d0              ADR      r1,|L1.12356|
002d04  9000              STR      r0,[sp,#0]
002d06  4618              MOV      r0,r3
002d08  3010              ADDS     r0,r0,#0x10
002d0a  f7fffffe          BL       send_GSM
;;;972    //**************************************tcp_initialization ends******************************//							
;;;973    									
;;;974    						clear();		
002d0e  f7fffffe          BL       clear
;;;975    						cond=mystrstr(uart_string_gsm,'>');
002d12  213e              MOVS     r1,#0x3e
002d14  48cc              LDR      r0,|L1.12360|
002d16  f7fffffe          BL       mystrstr
002d1a  49cc              LDR      r1,|L1.12364|
002d1c  7008              STRB     r0,[r1,#0]
;;;976    								if(cond)	
002d1e  4608              MOV      r0,r1
002d20  7800              LDRB     r0,[r0,#0]  ; cond
002d22  2800              CMP      r0,#0
002d24  d07e              BEQ      |L1.11812|
;;;977    								{	
;;;978    
;;;979    									clear();
002d26  f7fffffe          BL       clear
;;;980    									memset(uart_string_gsm,0,5000);
002d2a  49c9              LDR      r1,|L1.12368|
002d2c  48c6              LDR      r0,|L1.12360|
002d2e  f7fffffe          BL       __aeabi_memclr
;;;981    									strcat(data,"\n");
002d32  a1c8              ADR      r1,|L1.12372|
002d34  48bd              LDR      r0,|L1.12332|
002d36  f7fffffe          BL       strcat
;;;982    									len=strlen(data);
002d3a  48bc              LDR      r0,|L1.12332|
002d3c  f7fffffe          BL       strlen
002d40  49c5              LDR      r1,|L1.12376|
002d42  6008              STR      r0,[r1,#0]  ; len
;;;983    									tout=0;
002d44  2000              MOVS     r0,#0
002d46  49c5              LDR      r1,|L1.12380|
002d48  6008              STR      r0,[r1,#0]  ; tout
;;;984    									k2=0;
002d4a  49c5              LDR      r1,|L1.12384|
002d4c  6008              STR      r0,[r1,#0]  ; k2
;;;985    									for(k=0;k<len;k++)
002d4e  49c5              LDR      r1,|L1.12388|
002d50  6008              STR      r0,[r1,#0]  ; k
002d52  e00b              B        |L1.11628|
                  |L1.11604|
;;;986    									{
;;;987    										uart_putchar(UART1_BASE_PTR, data[k]);
002d54  48b5              LDR      r0,|L1.12332|
002d56  4ac3              LDR      r2,|L1.12388|
002d58  6812              LDR      r2,[r2,#0]  ; k
002d5a  5c81              LDRB     r1,[r0,r2]
002d5c  48c2              LDR      r0,|L1.12392|
002d5e  f7fffffe          BL       uart_putchar
002d62  48c0              LDR      r0,|L1.12388|
002d64  6800              LDR      r0,[r0,#0]            ;985  ; k
002d66  1c40              ADDS     r0,r0,#1              ;985
002d68  49be              LDR      r1,|L1.12388|
002d6a  6008              STR      r0,[r1,#0]            ;985  ; k
                  |L1.11628|
002d6c  48bd              LDR      r0,|L1.12388|
002d6e  6800              LDR      r0,[r0,#0]            ;985  ; k
002d70  49b9              LDR      r1,|L1.12376|
002d72  6809              LDR      r1,[r1,#0]            ;985  ; len
002d74  4288              CMP      r0,r1                 ;985
002d76  dbed              BLT      |L1.11604|
;;;988    									}uart_putchar(UART1_BASE_PTR, 0x1A);
002d78  211a              MOVS     r1,#0x1a
002d7a  48bb              LDR      r0,|L1.12392|
002d7c  f7fffffe          BL       uart_putchar
;;;989    									do
002d80  bf00              NOP      
                  |L1.11650|
;;;990    																{stcond1=strstr(uart_string_gsm,"SEND OK");
002d82  49ba              LDR      r1,|L1.12396|
002d84  48b0              LDR      r0,|L1.12360|
002d86  f7fffffe          BL       strstr
002d8a  49b9              LDR      r1,|L1.12400|
002d8c  6008              STR      r0,[r1,#0]  ; stcond1
;;;991    																	stcond2=strstr(uart_string_gsm, "ERROR");
002d8e  49a5              LDR      r1,|L1.12324|
002d90  3978              SUBS     r1,r1,#0x78
002d92  48ad              LDR      r0,|L1.12360|
002d94  f7fffffe          BL       strstr
002d98  49b6              LDR      r1,|L1.12404|
002d9a  6008              STR      r0,[r1,#0]  ; stcond2
;;;992    																		stcond3=strstr(uart_string_gsm, "FAIL");	
002d9c  49a0              LDR      r1,|L1.12320|
002d9e  3190              ADDS     r1,r1,#0x90
002da0  48a9              LDR      r0,|L1.12360|
002da2  f7fffffe          BL       strstr
002da6  49b4              LDR      r1,|L1.12408|
002da8  6008              STR      r0,[r1,#0]  ; stcond3
;;;993    																			stcond4=strstr(uart_string_gsm, "DEACT");	
002daa  499e              LDR      r1,|L1.12324|
002dac  395c              SUBS     r1,r1,#0x5c
002dae  48a6              LDR      r0,|L1.12360|
002db0  f7fffffe          BL       strstr
002db4  49b1              LDR      r1,|L1.12412|
002db6  6008              STR      r0,[r1,#0]  ; stcond4
;;;994    																	
;;;995    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
002db8  48ae              LDR      r0,|L1.12404|
002dba  6800              LDR      r0,[r0,#0]  ; stcond2
002dbc  2800              CMP      r0,#0
002dbe  d10f              BNE      |L1.11744|
002dc0  48ad              LDR      r0,|L1.12408|
002dc2  6800              LDR      r0,[r0,#0]  ; stcond3
002dc4  2800              CMP      r0,#0
002dc6  d10b              BNE      |L1.11744|
002dc8  4608              MOV      r0,r1
002dca  6800              LDR      r0,[r0,#0]  ; stcond4
002dcc  2800              CMP      r0,#0
002dce  d107              BNE      |L1.11744|
002dd0  48a7              LDR      r0,|L1.12400|
002dd2  6800              LDR      r0,[r0,#0]  ; stcond1
002dd4  2800              CMP      r0,#0
002dd6  d103              BNE      |L1.11744|
002dd8  48a0              LDR      r0,|L1.12380|
002dda  6800              LDR      r0,[r0,#0]  ; tout
002ddc  2804              CMP      r0,#4
002dde  ddd0              BLE      |L1.11650|
                  |L1.11744|
;;;996    																delay(10);clear();
002de0  200a              MOVS     r0,#0xa
002de2  f7fffffe          BL       delay
002de6  f7fffffe          BL       clear
;;;997    														uart_putchar(UART1_BASE_PTR,0x1A);
002dea  211a              MOVS     r1,#0x1a
002dec  489e              LDR      r0,|L1.12392|
002dee  f7fffffe          BL       uart_putchar
;;;998    												delay(10);
002df2  200a              MOVS     r0,#0xa
002df4  f7fffffe          BL       delay
;;;999    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002df8  211a              MOVS     r1,#0x1a
002dfa  489b              LDR      r0,|L1.12392|
002dfc  f7fffffe          BL       uart_putchar
002e00  211a              MOVS     r1,#0x1a
002e02  4899              LDR      r0,|L1.12392|
002e04  f7fffffe          BL       uart_putchar
002e08  211a              MOVS     r1,#0x1a
002e0a  4897              LDR      r0,|L1.12392|
002e0c  f7fffffe          BL       uart_putchar
;;;1000   						
;;;1001   
;;;1002   
;;;1003   									
;;;1004   															
;;;1005   															
;;;1006   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e10  211a              MOVS     r1,#0x1a
002e12  4895              LDR      r0,|L1.12392|
002e14  f7fffffe          BL       uart_putchar
002e18  f7fffffe          BL       clear
002e1c  200a              MOVS     r0,#0xa
002e1e  f7fffffe          BL       delay
;;;1007   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e22  e000              B        |L1.11814|
                  |L1.11812|
002e24  e195              B        |L1.12626|
                  |L1.11814|
002e26  211a              MOVS     r1,#0x1a
002e28  488f              LDR      r0,|L1.12392|
002e2a  f7fffffe          BL       uart_putchar
002e2e  f7fffffe          BL       clear
002e32  200a              MOVS     r0,#0xa
002e34  f7fffffe          BL       delay
;;;1008   															
;;;1009   														//qwe=strlen(uart_string_gsm);
;;;1010   														uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e38  211a              MOVS     r1,#0x1a
002e3a  488b              LDR      r0,|L1.12392|
002e3c  f7fffffe          BL       uart_putchar
002e40  f7fffffe          BL       clear
002e44  200a              MOVS     r0,#0xa
002e46  f7fffffe          BL       delay
;;;1011   								delay(50);
002e4a  2032              MOVS     r0,#0x32
002e4c  f7fffffe          BL       delay
;;;1012   								con1d=strstr(uart_string_gsm,"SEND OK");
002e50  4986              LDR      r1,|L1.12396|
002e52  487d              LDR      r0,|L1.12360|
002e54  f7fffffe          BL       strstr
002e58  4989              LDR      r1,|L1.12416|
002e5a  6008              STR      r0,[r1,#0]  ; con1d
;;;1013   								if(!con1d)
002e5c  4608              MOV      r0,r1
002e5e  6800              LDR      r0,[r0,#0]  ; con1d
002e60  2800              CMP      r0,#0
002e62  d17c              BNE      |L1.12126|
;;;1014   								{
;;;1015   									
;;;1016   									
;;;1017   	delay(100);
002e64  2064              MOVS     r0,#0x64
002e66  f7fffffe          BL       delay
;;;1018   		clear();//memset(uart_string_gsm,0,5000);
002e6a  f7fffffe          BL       clear
;;;1019   	
;;;1020   	memset(at_,0,100);
002e6e  2164              MOVS     r1,#0x64
002e70  486f              LDR      r0,|L1.12336|
002e72  f7fffffe          BL       __aeabi_memclr
;;;1021   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002e76  486d              LDR      r0,|L1.12332|
002e78  f7fffffe          BL       strlen
002e7c  1c44              ADDS     r4,r0,#1
002e7e  4623              MOV      r3,r4
002e80  4a80              LDR      r2,|L1.12420|
002e82  4968              LDR      r1,|L1.12324|
002e84  3924              SUBS     r1,r1,#0x24
002e86  486a              LDR      r0,|L1.12336|
002e88  f7fffffe          BL       __2sprintf
;;;1022   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002e8c  2005              MOVS     r0,#5
002e8e  4b65              LDR      r3,|L1.12324|
002e90  3b78              SUBS     r3,r3,#0x78
002e92  4a64              LDR      r2,|L1.12324|
002e94  a16b              ADR      r1,|L1.12356|
002e96  9000              STR      r0,[sp,#0]
002e98  4865              LDR      r0,|L1.12336|
002e9a  f7fffffe          BL       send_SD
;;;1023   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1024   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1025   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1026   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1027   //	}
;;;1028   	
;;;1029   clear();	
002e9e  f7fffffe          BL       clear
;;;1030   									k2=0;									//string array counter for uart 1
002ea2  2000              MOVS     r0,#0
002ea4  496e              LDR      r1,|L1.12384|
002ea6  6008              STR      r0,[r1,#0]  ; k2
;;;1031   									tout=0;	
002ea8  496c              LDR      r1,|L1.12380|
002eaa  6008              STR      r0,[r1,#0]  ; tout
;;;1032   		for(k=0;k<strlen(data);k++)
002eac  496d              LDR      r1,|L1.12388|
002eae  6008              STR      r0,[r1,#0]  ; k
002eb0  e00b              B        |L1.11978|
                  |L1.11954|
;;;1033   		{
;;;1034   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002eb2  485e              LDR      r0,|L1.12332|
002eb4  4a6b              LDR      r2,|L1.12388|
002eb6  6812              LDR      r2,[r2,#0]  ; k
002eb8  5c81              LDRB     r1,[r0,r2]
002eba  486b              LDR      r0,|L1.12392|
002ebc  f7fffffe          BL       uart_putchar
002ec0  4868              LDR      r0,|L1.12388|
002ec2  6800              LDR      r0,[r0,#0]            ;1032  ; k
002ec4  1c40              ADDS     r0,r0,#1              ;1032
002ec6  4967              LDR      r1,|L1.12388|
002ec8  6008              STR      r0,[r1,#0]            ;1032  ; k
                  |L1.11978|
002eca  4858              LDR      r0,|L1.12332|
002ecc  f7fffffe          BL       strlen
002ed0  4964              LDR      r1,|L1.12388|
002ed2  6809              LDR      r1,[r1,#0]            ;1032  ; k
002ed4  4288              CMP      r0,r1                 ;1032
002ed6  d8ec              BHI      |L1.11954|
;;;1035   		}	
;;;1036   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002ed8  210a              MOVS     r1,#0xa
002eda  4863              LDR      r0,|L1.12392|
002edc  f7fffffe          BL       uart_putchar
002ee0  210a              MOVS     r1,#0xa
002ee2  4861              LDR      r0,|L1.12392|
002ee4  f7fffffe          BL       uart_putchar
002ee8  210a              MOVS     r1,#0xa
002eea  485f              LDR      r0,|L1.12392|
002eec  f7fffffe          BL       uart_putchar
002ef0  210a              MOVS     r1,#0xa
002ef2  485d              LDR      r0,|L1.12392|
002ef4  f7fffffe          BL       uart_putchar
002ef8  210a              MOVS     r1,#0xa
002efa  485b              LDR      r0,|L1.12392|
002efc  f7fffffe          BL       uart_putchar
002f00  210a              MOVS     r1,#0xa
002f02  4859              LDR      r0,|L1.12392|
002f04  f7fffffe          BL       uart_putchar
002f08  210a              MOVS     r1,#0xa
002f0a  4857              LDR      r0,|L1.12392|
002f0c  f7fffffe          BL       uart_putchar
002f10  210a              MOVS     r1,#0xa
002f12  4855              LDR      r0,|L1.12392|
002f14  f7fffffe          BL       uart_putchar
002f18  210a              MOVS     r1,#0xa
002f1a  4853              LDR      r0,|L1.12392|
002f1c  f7fffffe          BL       uart_putchar
002f20  210a              MOVS     r1,#0xa
002f22  4851              LDR      r0,|L1.12392|
002f24  f7fffffe          BL       uart_putchar
002f28  210a              MOVS     r1,#0xa
002f2a  484f              LDR      r0,|L1.12392|
002f2c  f7fffffe          BL       uart_putchar
002f30  210a              MOVS     r1,#0xa
002f32  484d              LDR      r0,|L1.12392|
002f34  f7fffffe          BL       uart_putchar
002f38  210a              MOVS     r1,#0xa
002f3a  484b              LDR      r0,|L1.12392|
002f3c  f7fffffe          BL       uart_putchar
002f40  210a              MOVS     r1,#0xa
002f42  4849              LDR      r0,|L1.12392|
002f44  f7fffffe          BL       uart_putchar
002f48  210a              MOVS     r1,#0xa
002f4a  4847              LDR      r0,|L1.12392|
002f4c  f7fffffe          BL       uart_putchar
002f50  210a              MOVS     r1,#0xa
002f52  4845              LDR      r0,|L1.12392|
002f54  f7fffffe          BL       uart_putchar
002f58  210a              MOVS     r1,#0xa
002f5a  4843              LDR      r0,|L1.12392|
002f5c  e000              B        |L1.12128|
                  |L1.12126|
002f5e  e0f5              B        |L1.12620|
                  |L1.12128|
002f60  f7fffffe          BL       uart_putchar
002f64  210a              MOVS     r1,#0xa
002f66  4840              LDR      r0,|L1.12392|
002f68  f7fffffe          BL       uart_putchar
002f6c  210a              MOVS     r1,#0xa
002f6e  483e              LDR      r0,|L1.12392|
002f70  f7fffffe          BL       uart_putchar
002f74  210a              MOVS     r1,#0xa
002f76  483c              LDR      r0,|L1.12392|
002f78  f7fffffe          BL       uart_putchar
002f7c  210a              MOVS     r1,#0xa
002f7e  483a              LDR      r0,|L1.12392|
002f80  f7fffffe          BL       uart_putchar
002f84  210a              MOVS     r1,#0xa
002f86  4838              LDR      r0,|L1.12392|
002f88  f7fffffe          BL       uart_putchar
002f8c  210a              MOVS     r1,#0xa
002f8e  4836              LDR      r0,|L1.12392|
002f90  f7fffffe          BL       uart_putchar
002f94  210a              MOVS     r1,#0xa
002f96  4834              LDR      r0,|L1.12392|
002f98  f7fffffe          BL       uart_putchar
002f9c  210a              MOVS     r1,#0xa
002f9e  4832              LDR      r0,|L1.12392|
002fa0  f7fffffe          BL       uart_putchar
002fa4  210a              MOVS     r1,#0xa
002fa6  4830              LDR      r0,|L1.12392|
002fa8  f7fffffe          BL       uart_putchar
002fac  210a              MOVS     r1,#0xa
002fae  482e              LDR      r0,|L1.12392|
002fb0  f7fffffe          BL       uart_putchar
002fb4  210a              MOVS     r1,#0xa
002fb6  482c              LDR      r0,|L1.12392|
002fb8  f7fffffe          BL       uart_putchar
002fbc  210a              MOVS     r1,#0xa
002fbe  482a              LDR      r0,|L1.12392|
002fc0  f7fffffe          BL       uart_putchar
002fc4  210a              MOVS     r1,#0xa
002fc6  4828              LDR      r0,|L1.12392|
002fc8  f7fffffe          BL       uart_putchar
002fcc  210a              MOVS     r1,#0xa
002fce  4826              LDR      r0,|L1.12392|
002fd0  f7fffffe          BL       uart_putchar
002fd4  210a              MOVS     r1,#0xa
002fd6  4824              LDR      r0,|L1.12392|
002fd8  f7fffffe          BL       uart_putchar
002fdc  210a              MOVS     r1,#0xa
002fde  4822              LDR      r0,|L1.12392|
002fe0  f7fffffe          BL       uart_putchar
002fe4  210a              MOVS     r1,#0xa
002fe6  4820              LDR      r0,|L1.12392|
002fe8  f7fffffe          BL       uart_putchar
002fec  210a              MOVS     r1,#0xa
002fee  481e              LDR      r0,|L1.12392|
002ff0  f7fffffe          BL       uart_putchar
002ff4  210a              MOVS     r1,#0xa
002ff6  481c              LDR      r0,|L1.12392|
002ff8  f7fffffe          BL       uart_putchar
002ffc  210a              MOVS     r1,#0xa
002ffe  481a              LDR      r0,|L1.12392|
003000  f7fffffe          BL       uart_putchar
003004  210a              MOVS     r1,#0xa
003006  4818              LDR      r0,|L1.12392|
003008  f7fffffe          BL       uart_putchar
00300c  210a              MOVS     r1,#0xa
00300e  4816              LDR      r0,|L1.12392|
003010  f7fffffe          BL       uart_putchar
003014  210a              MOVS     r1,#0xa
003016  4814              LDR      r0,|L1.12392|
003018  f7fffffe          BL       uart_putchar
00301c  210a              MOVS     r1,#0xa
00301e  e033              B        |L1.12424|
                  |L1.12320|
                          DCD      ||.text||+0xd54
                  |L1.12324|
                          DCD      ||.text||+0x8e8
                  |L1.12328|
003028  4f4b00            DCB      "OK",0
00302b  00                DCB      0
                  |L1.12332|
                          DCD      data
                  |L1.12336|
                          DCD      at_
                  |L1.12340|
                          DCD      apn
                  |L1.12344|
                          DCD      tmeout
                  |L1.12348|
                          DCD      port
                  |L1.12352|
                          DCD      ||ip||
                  |L1.12356|
003044  3e00              DCB      ">",0
003046  00                DCB      0
003047  00                DCB      0
                  |L1.12360|
                          DCD      uart_string_gsm
                  |L1.12364|
                          DCD      cond
                  |L1.12368|
                          DCD      0x00001388
                  |L1.12372|
003054  0a00              DCB      "\n",0
003056  00                DCB      0
003057  00                DCB      0
                  |L1.12376|
                          DCD      len
                  |L1.12380|
                          DCD      tout
                  |L1.12384|
                          DCD      ||k2||
                  |L1.12388|
                          DCD      k
                  |L1.12392|
                          DCD      0x4006b000
                  |L1.12396|
                          DCD      ||.text||+0x474
                  |L1.12400|
                          DCD      stcond1
                  |L1.12404|
                          DCD      stcond2
                  |L1.12408|
                          DCD      stcond3
                  |L1.12412|
                          DCD      stcond4
                  |L1.12416|
                          DCD      con1d
                  |L1.12420|
                          DCD      drive
                  |L1.12424|
003088  48fe              LDR      r0,|L1.13444|
00308a  f7fffffe          BL       uart_putchar
00308e  210a              MOVS     r1,#0xa
003090  48fc              LDR      r0,|L1.13444|
003092  f7fffffe          BL       uart_putchar
003096  210a              MOVS     r1,#0xa
003098  48fa              LDR      r0,|L1.13444|
00309a  f7fffffe          BL       uart_putchar
00309e  210a              MOVS     r1,#0xa
0030a0  48f8              LDR      r0,|L1.13444|
0030a2  f7fffffe          BL       uart_putchar
0030a6  210a              MOVS     r1,#0xa
0030a8  48f6              LDR      r0,|L1.13444|
0030aa  f7fffffe          BL       uart_putchar
0030ae  210a              MOVS     r1,#0xa
0030b0  48f4              LDR      r0,|L1.13444|
0030b2  f7fffffe          BL       uart_putchar
0030b6  210a              MOVS     r1,#0xa
0030b8  48f2              LDR      r0,|L1.13444|
0030ba  f7fffffe          BL       uart_putchar
0030be  210a              MOVS     r1,#0xa
0030c0  48f0              LDR      r0,|L1.13444|
0030c2  f7fffffe          BL       uart_putchar
0030c6  210a              MOVS     r1,#0xa
0030c8  48ee              LDR      r0,|L1.13444|
0030ca  f7fffffe          BL       uart_putchar
0030ce  210a              MOVS     r1,#0xa
0030d0  48ec              LDR      r0,|L1.13444|
0030d2  f7fffffe          BL       uart_putchar
0030d6  210a              MOVS     r1,#0xa
0030d8  48ea              LDR      r0,|L1.13444|
0030da  f7fffffe          BL       uart_putchar
0030de  210a              MOVS     r1,#0xa
0030e0  48e8              LDR      r0,|L1.13444|
0030e2  f7fffffe          BL       uart_putchar
0030e6  210a              MOVS     r1,#0xa
0030e8  48e6              LDR      r0,|L1.13444|
0030ea  f7fffffe          BL       uart_putchar
0030ee  210a              MOVS     r1,#0xa
0030f0  48e4              LDR      r0,|L1.13444|
0030f2  f7fffffe          BL       uart_putchar
0030f6  210a              MOVS     r1,#0xa
0030f8  48e2              LDR      r0,|L1.13444|
0030fa  f7fffffe          BL       uart_putchar
0030fe  210a              MOVS     r1,#0xa
003100  48e0              LDR      r0,|L1.13444|
003102  f7fffffe          BL       uart_putchar
003106  210a              MOVS     r1,#0xa
003108  48de              LDR      r0,|L1.13444|
00310a  f7fffffe          BL       uart_putchar
;;;1037   									//memset(data,0,1000);
;;;1038   														//timer counts to wait for characters in uart 1 									
;;;1039   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00310e  bf00              NOP      
                  |L1.12560|
003110  49dd              LDR      r1,|L1.13448|
003112  48de              LDR      r0,|L1.13452|
003114  f7fffffe          BL       strstr
003118  2800              CMP      r0,#0
00311a  d10a              BNE      |L1.12594|
00311c  49da              LDR      r1,|L1.13448|
00311e  398c              SUBS     r1,r1,#0x8c
003120  48da              LDR      r0,|L1.13452|
003122  f7fffffe          BL       strstr
003126  2800              CMP      r0,#0
003128  d103              BNE      |L1.12594|
00312a  48d9              LDR      r0,|L1.13456|
00312c  6800              LDR      r0,[r0,#0]  ; tout
00312e  2805              CMP      r0,#5
003130  ddee              BLE      |L1.12560|
                  |L1.12594|
;;;1040   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1041   									}
;;;1042   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003132  f7fffffe          BL       clear
;;;1043   									//clear();
;;;1044   									memset(data,0,strlen(data));
003136  48d7              LDR      r0,|L1.13460|
003138  f7fffffe          BL       strlen
00313c  4604              MOV      r4,r0
00313e  4621              MOV      r1,r4
003140  48d4              LDR      r0,|L1.13460|
003142  f7fffffe          BL       __aeabi_memclr
;;;1045   									clear();
003146  f7fffffe          BL       clear
00314a  e142              B        |L1.13266|
                  |L1.12620|
;;;1046   
;;;1047   								
;;;1048   									
;;;1049   									
;;;1050   									
;;;1051   								//	log_it();								
;;;1052   								}else{send_chunk();}	
00314c  f7fffffe          BL       send_chunk
003150  e13f              B        |L1.13266|
                  |L1.12626|
;;;1053   
;;;1054   																
;;;1055   								}else{
;;;1056   								
;;;1057   								
;;;1058   	delay(100);
003152  2064              MOVS     r0,#0x64
003154  f7fffffe          BL       delay
;;;1059   		clear();//memset(uart_string_gsm,0,5000);
003158  f7fffffe          BL       clear
;;;1060   	
;;;1061   	memset(at_,0,100);
00315c  2164              MOVS     r1,#0x64
00315e  48ce              LDR      r0,|L1.13464|
003160  f7fffffe          BL       __aeabi_memclr
;;;1062   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003164  48cb              LDR      r0,|L1.13460|
003166  f7fffffe          BL       strlen
00316a  1c44              ADDS     r4,r0,#1
00316c  4623              MOV      r3,r4
00316e  4acb              LDR      r2,|L1.13468|
003170  49c5              LDR      r1,|L1.13448|
003172  3938              SUBS     r1,r1,#0x38
003174  48c8              LDR      r0,|L1.13464|
003176  f7fffffe          BL       __2sprintf
;;;1063   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00317a  2005              MOVS     r0,#5
00317c  4bc2              LDR      r3,|L1.13448|
00317e  3b8c              SUBS     r3,r3,#0x8c
003180  461a              MOV      r2,r3
003182  3278              ADDS     r2,r2,#0x78
003184  a1c6              ADR      r1,|L1.13472|
003186  9000              STR      r0,[sp,#0]
003188  48c3              LDR      r0,|L1.13464|
00318a  f7fffffe          BL       send_SD
;;;1064   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1065   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1066   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1067   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1068   //	}
;;;1069   	
;;;1070   clear();	
00318e  f7fffffe          BL       clear
;;;1071   									k2=0;									//string array counter for uart 1
003192  2000              MOVS     r0,#0
003194  49c3              LDR      r1,|L1.13476|
003196  6008              STR      r0,[r1,#0]  ; k2
;;;1072   									tout=0;	
003198  49bd              LDR      r1,|L1.13456|
00319a  6008              STR      r0,[r1,#0]  ; tout
;;;1073   		for(k=0;k<strlen(data);k++)
00319c  49c2              LDR      r1,|L1.13480|
00319e  6008              STR      r0,[r1,#0]  ; k
0031a0  e00b              B        |L1.12730|
                  |L1.12706|
;;;1074   		{
;;;1075   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0031a2  48bc              LDR      r0,|L1.13460|
0031a4  4ac0              LDR      r2,|L1.13480|
0031a6  6812              LDR      r2,[r2,#0]  ; k
0031a8  5c81              LDRB     r1,[r0,r2]
0031aa  48b6              LDR      r0,|L1.13444|
0031ac  f7fffffe          BL       uart_putchar
0031b0  48bd              LDR      r0,|L1.13480|
0031b2  6800              LDR      r0,[r0,#0]            ;1073  ; k
0031b4  1c40              ADDS     r0,r0,#1              ;1073
0031b6  49bc              LDR      r1,|L1.13480|
0031b8  6008              STR      r0,[r1,#0]            ;1073  ; k
                  |L1.12730|
0031ba  48b6              LDR      r0,|L1.13460|
0031bc  f7fffffe          BL       strlen
0031c0  49b9              LDR      r1,|L1.13480|
0031c2  6809              LDR      r1,[r1,#0]            ;1073  ; k
0031c4  4288              CMP      r0,r1                 ;1073
0031c6  d8ec              BHI      |L1.12706|
;;;1076   		}	
;;;1077   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0031c8  210a              MOVS     r1,#0xa
0031ca  48ae              LDR      r0,|L1.13444|
0031cc  f7fffffe          BL       uart_putchar
0031d0  210a              MOVS     r1,#0xa
0031d2  48ac              LDR      r0,|L1.13444|
0031d4  f7fffffe          BL       uart_putchar
0031d8  210a              MOVS     r1,#0xa
0031da  48aa              LDR      r0,|L1.13444|
0031dc  f7fffffe          BL       uart_putchar
0031e0  210a              MOVS     r1,#0xa
0031e2  48a8              LDR      r0,|L1.13444|
0031e4  f7fffffe          BL       uart_putchar
0031e8  210a              MOVS     r1,#0xa
0031ea  48a6              LDR      r0,|L1.13444|
0031ec  f7fffffe          BL       uart_putchar
0031f0  210a              MOVS     r1,#0xa
0031f2  48a4              LDR      r0,|L1.13444|
0031f4  f7fffffe          BL       uart_putchar
0031f8  210a              MOVS     r1,#0xa
0031fa  48a2              LDR      r0,|L1.13444|
0031fc  f7fffffe          BL       uart_putchar
003200  210a              MOVS     r1,#0xa
003202  48a0              LDR      r0,|L1.13444|
003204  f7fffffe          BL       uart_putchar
003208  210a              MOVS     r1,#0xa
00320a  489e              LDR      r0,|L1.13444|
00320c  f7fffffe          BL       uart_putchar
003210  210a              MOVS     r1,#0xa
003212  489c              LDR      r0,|L1.13444|
003214  f7fffffe          BL       uart_putchar
003218  210a              MOVS     r1,#0xa
00321a  489a              LDR      r0,|L1.13444|
00321c  f7fffffe          BL       uart_putchar
003220  210a              MOVS     r1,#0xa
003222  4898              LDR      r0,|L1.13444|
003224  f7fffffe          BL       uart_putchar
003228  210a              MOVS     r1,#0xa
00322a  4896              LDR      r0,|L1.13444|
00322c  f7fffffe          BL       uart_putchar
003230  210a              MOVS     r1,#0xa
003232  4894              LDR      r0,|L1.13444|
003234  f7fffffe          BL       uart_putchar
003238  210a              MOVS     r1,#0xa
00323a  4892              LDR      r0,|L1.13444|
00323c  f7fffffe          BL       uart_putchar
003240  210a              MOVS     r1,#0xa
003242  4890              LDR      r0,|L1.13444|
003244  f7fffffe          BL       uart_putchar
003248  210a              MOVS     r1,#0xa
00324a  488e              LDR      r0,|L1.13444|
00324c  f7fffffe          BL       uart_putchar
003250  210a              MOVS     r1,#0xa
003252  488c              LDR      r0,|L1.13444|
003254  f7fffffe          BL       uart_putchar
003258  210a              MOVS     r1,#0xa
00325a  488a              LDR      r0,|L1.13444|
00325c  f7fffffe          BL       uart_putchar
003260  210a              MOVS     r1,#0xa
003262  4888              LDR      r0,|L1.13444|
003264  f7fffffe          BL       uart_putchar
003268  210a              MOVS     r1,#0xa
00326a  4886              LDR      r0,|L1.13444|
00326c  f7fffffe          BL       uart_putchar
003270  210a              MOVS     r1,#0xa
003272  4884              LDR      r0,|L1.13444|
003274  f7fffffe          BL       uart_putchar
003278  210a              MOVS     r1,#0xa
00327a  4882              LDR      r0,|L1.13444|
00327c  f7fffffe          BL       uart_putchar
003280  210a              MOVS     r1,#0xa
003282  4880              LDR      r0,|L1.13444|
003284  f7fffffe          BL       uart_putchar
003288  210a              MOVS     r1,#0xa
00328a  487e              LDR      r0,|L1.13444|
00328c  f7fffffe          BL       uart_putchar
003290  210a              MOVS     r1,#0xa
003292  487c              LDR      r0,|L1.13444|
003294  f7fffffe          BL       uart_putchar
003298  210a              MOVS     r1,#0xa
00329a  487a              LDR      r0,|L1.13444|
00329c  f7fffffe          BL       uart_putchar
0032a0  210a              MOVS     r1,#0xa
0032a2  4878              LDR      r0,|L1.13444|
0032a4  f7fffffe          BL       uart_putchar
0032a8  210a              MOVS     r1,#0xa
0032aa  4876              LDR      r0,|L1.13444|
0032ac  f7fffffe          BL       uart_putchar
0032b0  210a              MOVS     r1,#0xa
0032b2  4874              LDR      r0,|L1.13444|
0032b4  f7fffffe          BL       uart_putchar
0032b8  210a              MOVS     r1,#0xa
0032ba  4872              LDR      r0,|L1.13444|
0032bc  f7fffffe          BL       uart_putchar
0032c0  210a              MOVS     r1,#0xa
0032c2  4870              LDR      r0,|L1.13444|
0032c4  f7fffffe          BL       uart_putchar
0032c8  210a              MOVS     r1,#0xa
0032ca  486e              LDR      r0,|L1.13444|
0032cc  f7fffffe          BL       uart_putchar
0032d0  210a              MOVS     r1,#0xa
0032d2  486c              LDR      r0,|L1.13444|
0032d4  f7fffffe          BL       uart_putchar
0032d8  210a              MOVS     r1,#0xa
0032da  486a              LDR      r0,|L1.13444|
0032dc  f7fffffe          BL       uart_putchar
0032e0  210a              MOVS     r1,#0xa
0032e2  4868              LDR      r0,|L1.13444|
0032e4  f7fffffe          BL       uart_putchar
0032e8  210a              MOVS     r1,#0xa
0032ea  4866              LDR      r0,|L1.13444|
0032ec  f7fffffe          BL       uart_putchar
0032f0  210a              MOVS     r1,#0xa
0032f2  4864              LDR      r0,|L1.13444|
0032f4  f7fffffe          BL       uart_putchar
0032f8  210a              MOVS     r1,#0xa
0032fa  4862              LDR      r0,|L1.13444|
0032fc  f7fffffe          BL       uart_putchar
003300  210a              MOVS     r1,#0xa
003302  4860              LDR      r0,|L1.13444|
003304  f7fffffe          BL       uart_putchar
003308  210a              MOVS     r1,#0xa
00330a  485e              LDR      r0,|L1.13444|
00330c  f7fffffe          BL       uart_putchar
003310  210a              MOVS     r1,#0xa
003312  485c              LDR      r0,|L1.13444|
003314  f7fffffe          BL       uart_putchar
003318  210a              MOVS     r1,#0xa
00331a  485a              LDR      r0,|L1.13444|
00331c  f7fffffe          BL       uart_putchar
003320  210a              MOVS     r1,#0xa
003322  4858              LDR      r0,|L1.13444|
003324  f7fffffe          BL       uart_putchar
003328  210a              MOVS     r1,#0xa
00332a  4856              LDR      r0,|L1.13444|
00332c  f7fffffe          BL       uart_putchar
003330  210a              MOVS     r1,#0xa
003332  4854              LDR      r0,|L1.13444|
003334  f7fffffe          BL       uart_putchar
003338  210a              MOVS     r1,#0xa
00333a  4852              LDR      r0,|L1.13444|
00333c  f7fffffe          BL       uart_putchar
003340  210a              MOVS     r1,#0xa
003342  4850              LDR      r0,|L1.13444|
003344  f7fffffe          BL       uart_putchar
003348  210a              MOVS     r1,#0xa
00334a  484e              LDR      r0,|L1.13444|
00334c  f7fffffe          BL       uart_putchar
003350  210a              MOVS     r1,#0xa
003352  484c              LDR      r0,|L1.13444|
003354  f7fffffe          BL       uart_putchar
003358  210a              MOVS     r1,#0xa
00335a  484a              LDR      r0,|L1.13444|
00335c  f7fffffe          BL       uart_putchar
003360  210a              MOVS     r1,#0xa
003362  4848              LDR      r0,|L1.13444|
003364  f7fffffe          BL       uart_putchar
003368  210a              MOVS     r1,#0xa
00336a  4846              LDR      r0,|L1.13444|
00336c  f7fffffe          BL       uart_putchar
003370  210a              MOVS     r1,#0xa
003372  4844              LDR      r0,|L1.13444|
003374  f7fffffe          BL       uart_putchar
003378  210a              MOVS     r1,#0xa
00337a  4842              LDR      r0,|L1.13444|
00337c  f7fffffe          BL       uart_putchar
003380  210a              MOVS     r1,#0xa
003382  4840              LDR      r0,|L1.13444|
003384  f7fffffe          BL       uart_putchar
003388  210a              MOVS     r1,#0xa
00338a  483e              LDR      r0,|L1.13444|
00338c  f7fffffe          BL       uart_putchar
;;;1078   									//memset(data,0,1000);
;;;1079   														//timer counts to wait for characters in uart 1 									
;;;1080   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003390  bf00              NOP      
                  |L1.13202|
003392  493d              LDR      r1,|L1.13448|
003394  483d              LDR      r0,|L1.13452|
003396  f7fffffe          BL       strstr
00339a  2800              CMP      r0,#0
00339c  d10a              BNE      |L1.13236|
00339e  493a              LDR      r1,|L1.13448|
0033a0  398c              SUBS     r1,r1,#0x8c
0033a2  483a              LDR      r0,|L1.13452|
0033a4  f7fffffe          BL       strstr
0033a8  2800              CMP      r0,#0
0033aa  d103              BNE      |L1.13236|
0033ac  4838              LDR      r0,|L1.13456|
0033ae  6800              LDR      r0,[r0,#0]  ; tout
0033b0  2805              CMP      r0,#5
0033b2  ddee              BLE      |L1.13202|
                  |L1.13236|
;;;1081   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1082   									}
;;;1083   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0033b4  f7fffffe          BL       clear
;;;1084   									//clear();
;;;1085   									memset(data,0,strlen(data));
0033b8  4836              LDR      r0,|L1.13460|
0033ba  f7fffffe          BL       strlen
0033be  4604              MOV      r4,r0
0033c0  4621              MOV      r1,r4
0033c2  4834              LDR      r0,|L1.13460|
0033c4  f7fffffe          BL       __aeabi_memclr
;;;1086   									clear();
0033c8  f7fffffe          BL       clear
0033cc  e001              B        |L1.13266|
                  |L1.13262|
;;;1087   
;;;1088   								
;;;1089   								
;;;1090   								//log_it();
;;;1091   									}			//
;;;1092   
;;;1093   							
;;;1094   
;;;1095   	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1096   	else
;;;1097   	{
;;;1098   		send_chunk();
0033ce  f7fffffe          BL       send_chunk
                  |L1.13266|
;;;1099   	}		
;;;1100   								
;;;1101   								
;;;1102   								
;;;1103   	memset(data,0,strlen(data));	
0033d2  4830              LDR      r0,|L1.13460|
0033d4  f7fffffe          BL       strlen
0033d8  4604              MOV      r4,r0
0033da  4621              MOV      r1,r4
0033dc  482d              LDR      r0,|L1.13460|
0033de  f7fffffe          BL       __aeabi_memclr
;;;1104   	uart_putchar(UART1_BASE_PTR, 0x1A);
0033e2  211a              MOVS     r1,#0x1a
0033e4  4827              LDR      r0,|L1.13444|
0033e6  f7fffffe          BL       uart_putchar
;;;1105   	
;;;1106   }
0033ea  bd38              POP      {r3-r5,pc}
;;;1107   
                          ENDP

                  log_it PROC
;;;1110   
;;;1111   void log_it()
0033ec  b538              PUSH     {r3-r5,lr}
;;;1112   {
;;;1113   	delay(100);
0033ee  2064              MOVS     r0,#0x64
0033f0  f7fffffe          BL       delay
;;;1114   		clear();//memset(uart_string_gsm,0,5000);
0033f4  f7fffffe          BL       clear
;;;1115   	
;;;1116   	memset(at_,0,100);
0033f8  2164              MOVS     r1,#0x64
0033fa  4827              LDR      r0,|L1.13464|
0033fc  f7fffffe          BL       __aeabi_memclr
;;;1117   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003400  4824              LDR      r0,|L1.13460|
003402  f7fffffe          BL       strlen
003406  1c44              ADDS     r4,r0,#1
003408  4623              MOV      r3,r4
00340a  4a24              LDR      r2,|L1.13468|
00340c  491e              LDR      r1,|L1.13448|
00340e  3938              SUBS     r1,r1,#0x38
003410  4821              LDR      r0,|L1.13464|
003412  f7fffffe          BL       __2sprintf
;;;1118   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003416  2005              MOVS     r0,#5
003418  4b1b              LDR      r3,|L1.13448|
00341a  3b8c              SUBS     r3,r3,#0x8c
00341c  461a              MOV      r2,r3
00341e  3278              ADDS     r2,r2,#0x78
003420  a11f              ADR      r1,|L1.13472|
003422  9000              STR      r0,[sp,#0]
003424  481c              LDR      r0,|L1.13464|
003426  f7fffffe          BL       send_SD
;;;1119   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1120   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1121   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1122   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1123   //	}
;;;1124   	
;;;1125   clear();	
00342a  f7fffffe          BL       clear
;;;1126   									k2=0;									//string array counter for uart 1
00342e  2000              MOVS     r0,#0
003430  491c              LDR      r1,|L1.13476|
003432  6008              STR      r0,[r1,#0]  ; k2
;;;1127   									tout=0;	
003434  4916              LDR      r1,|L1.13456|
003436  6008              STR      r0,[r1,#0]  ; tout
;;;1128   		for(k=0;k<strlen(data);k++)
003438  491b              LDR      r1,|L1.13480|
00343a  6008              STR      r0,[r1,#0]  ; k
00343c  e00b              B        |L1.13398|
                  |L1.13374|
;;;1129   		{
;;;1130   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00343e  4815              LDR      r0,|L1.13460|
003440  4a19              LDR      r2,|L1.13480|
003442  6812              LDR      r2,[r2,#0]  ; k
003444  5c81              LDRB     r1,[r0,r2]
003446  480f              LDR      r0,|L1.13444|
003448  f7fffffe          BL       uart_putchar
00344c  4816              LDR      r0,|L1.13480|
00344e  6800              LDR      r0,[r0,#0]            ;1128  ; k
003450  1c40              ADDS     r0,r0,#1              ;1128
003452  4915              LDR      r1,|L1.13480|
003454  6008              STR      r0,[r1,#0]            ;1128  ; k
                  |L1.13398|
003456  480f              LDR      r0,|L1.13460|
003458  f7fffffe          BL       strlen
00345c  4912              LDR      r1,|L1.13480|
00345e  6809              LDR      r1,[r1,#0]            ;1128  ; k
003460  4288              CMP      r0,r1                 ;1128
003462  d8ec              BHI      |L1.13374|
;;;1131   		}	
;;;1132   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
003464  210a              MOVS     r1,#0xa
003466  4807              LDR      r0,|L1.13444|
003468  f7fffffe          BL       uart_putchar
00346c  210a              MOVS     r1,#0xa
00346e  4805              LDR      r0,|L1.13444|
003470  f7fffffe          BL       uart_putchar
003474  210a              MOVS     r1,#0xa
003476  4803              LDR      r0,|L1.13444|
003478  f7fffffe          BL       uart_putchar
00347c  210a              MOVS     r1,#0xa
00347e  4801              LDR      r0,|L1.13444|
003480  e014              B        |L1.13484|
003482  0000              DCW      0x0000
                  |L1.13444|
                          DCD      0x4006b000
                  |L1.13448|
                          DCD      ||.text||+0x8fc
                  |L1.13452|
                          DCD      uart_string_gsm
                  |L1.13456|
                          DCD      tout
                  |L1.13460|
                          DCD      data
                  |L1.13464|
                          DCD      at_
                  |L1.13468|
                          DCD      drive
                  |L1.13472|
0034a0  3e00              DCB      ">",0
0034a2  00                DCB      0
0034a3  00                DCB      0
                  |L1.13476|
                          DCD      ||k2||
                  |L1.13480|
                          DCD      k
                  |L1.13484|
0034ac  f7fffffe          BL       uart_putchar
0034b0  210a              MOVS     r1,#0xa
0034b2  48fa              LDR      r0,|L1.14492|
0034b4  f7fffffe          BL       uart_putchar
0034b8  210a              MOVS     r1,#0xa
0034ba  48f8              LDR      r0,|L1.14492|
0034bc  f7fffffe          BL       uart_putchar
0034c0  210a              MOVS     r1,#0xa
0034c2  48f6              LDR      r0,|L1.14492|
0034c4  f7fffffe          BL       uart_putchar
0034c8  210a              MOVS     r1,#0xa
0034ca  48f4              LDR      r0,|L1.14492|
0034cc  f7fffffe          BL       uart_putchar
0034d0  210a              MOVS     r1,#0xa
0034d2  48f2              LDR      r0,|L1.14492|
0034d4  f7fffffe          BL       uart_putchar
0034d8  210a              MOVS     r1,#0xa
0034da  48f0              LDR      r0,|L1.14492|
0034dc  f7fffffe          BL       uart_putchar
0034e0  210a              MOVS     r1,#0xa
0034e2  48ee              LDR      r0,|L1.14492|
0034e4  f7fffffe          BL       uart_putchar
0034e8  210a              MOVS     r1,#0xa
0034ea  48ec              LDR      r0,|L1.14492|
0034ec  f7fffffe          BL       uart_putchar
0034f0  210a              MOVS     r1,#0xa
0034f2  48ea              LDR      r0,|L1.14492|
0034f4  f7fffffe          BL       uart_putchar
0034f8  210a              MOVS     r1,#0xa
0034fa  48e8              LDR      r0,|L1.14492|
0034fc  f7fffffe          BL       uart_putchar
003500  210a              MOVS     r1,#0xa
003502  48e6              LDR      r0,|L1.14492|
003504  f7fffffe          BL       uart_putchar
003508  210a              MOVS     r1,#0xa
00350a  48e4              LDR      r0,|L1.14492|
00350c  f7fffffe          BL       uart_putchar
003510  210a              MOVS     r1,#0xa
003512  48e2              LDR      r0,|L1.14492|
003514  f7fffffe          BL       uart_putchar
003518  210a              MOVS     r1,#0xa
00351a  48e0              LDR      r0,|L1.14492|
00351c  f7fffffe          BL       uart_putchar
003520  210a              MOVS     r1,#0xa
003522  48de              LDR      r0,|L1.14492|
003524  f7fffffe          BL       uart_putchar
003528  210a              MOVS     r1,#0xa
00352a  48dc              LDR      r0,|L1.14492|
00352c  f7fffffe          BL       uart_putchar
003530  210a              MOVS     r1,#0xa
003532  48da              LDR      r0,|L1.14492|
003534  f7fffffe          BL       uart_putchar
003538  210a              MOVS     r1,#0xa
00353a  48d8              LDR      r0,|L1.14492|
00353c  f7fffffe          BL       uart_putchar
003540  210a              MOVS     r1,#0xa
003542  48d6              LDR      r0,|L1.14492|
003544  f7fffffe          BL       uart_putchar
003548  210a              MOVS     r1,#0xa
00354a  48d4              LDR      r0,|L1.14492|
00354c  f7fffffe          BL       uart_putchar
003550  210a              MOVS     r1,#0xa
003552  48d2              LDR      r0,|L1.14492|
003554  f7fffffe          BL       uart_putchar
003558  210a              MOVS     r1,#0xa
00355a  48d0              LDR      r0,|L1.14492|
00355c  f7fffffe          BL       uart_putchar
003560  210a              MOVS     r1,#0xa
003562  48ce              LDR      r0,|L1.14492|
003564  f7fffffe          BL       uart_putchar
003568  210a              MOVS     r1,#0xa
00356a  48cc              LDR      r0,|L1.14492|
00356c  f7fffffe          BL       uart_putchar
003570  210a              MOVS     r1,#0xa
003572  48ca              LDR      r0,|L1.14492|
003574  f7fffffe          BL       uart_putchar
003578  210a              MOVS     r1,#0xa
00357a  48c8              LDR      r0,|L1.14492|
00357c  f7fffffe          BL       uart_putchar
003580  210a              MOVS     r1,#0xa
003582  48c6              LDR      r0,|L1.14492|
003584  f7fffffe          BL       uart_putchar
003588  210a              MOVS     r1,#0xa
00358a  48c4              LDR      r0,|L1.14492|
00358c  f7fffffe          BL       uart_putchar
003590  210a              MOVS     r1,#0xa
003592  48c2              LDR      r0,|L1.14492|
003594  f7fffffe          BL       uart_putchar
003598  210a              MOVS     r1,#0xa
00359a  48c0              LDR      r0,|L1.14492|
00359c  f7fffffe          BL       uart_putchar
0035a0  210a              MOVS     r1,#0xa
0035a2  48be              LDR      r0,|L1.14492|
0035a4  f7fffffe          BL       uart_putchar
0035a8  210a              MOVS     r1,#0xa
0035aa  48bc              LDR      r0,|L1.14492|
0035ac  f7fffffe          BL       uart_putchar
0035b0  210a              MOVS     r1,#0xa
0035b2  48ba              LDR      r0,|L1.14492|
0035b4  f7fffffe          BL       uart_putchar
0035b8  210a              MOVS     r1,#0xa
0035ba  48b8              LDR      r0,|L1.14492|
0035bc  f7fffffe          BL       uart_putchar
0035c0  210a              MOVS     r1,#0xa
0035c2  48b6              LDR      r0,|L1.14492|
0035c4  f7fffffe          BL       uart_putchar
0035c8  210a              MOVS     r1,#0xa
0035ca  48b4              LDR      r0,|L1.14492|
0035cc  f7fffffe          BL       uart_putchar
0035d0  210a              MOVS     r1,#0xa
0035d2  48b2              LDR      r0,|L1.14492|
0035d4  f7fffffe          BL       uart_putchar
0035d8  210a              MOVS     r1,#0xa
0035da  48b0              LDR      r0,|L1.14492|
0035dc  f7fffffe          BL       uart_putchar
0035e0  210a              MOVS     r1,#0xa
0035e2  48ae              LDR      r0,|L1.14492|
0035e4  f7fffffe          BL       uart_putchar
0035e8  210a              MOVS     r1,#0xa
0035ea  48ac              LDR      r0,|L1.14492|
0035ec  f7fffffe          BL       uart_putchar
0035f0  210a              MOVS     r1,#0xa
0035f2  48aa              LDR      r0,|L1.14492|
0035f4  f7fffffe          BL       uart_putchar
0035f8  210a              MOVS     r1,#0xa
0035fa  48a8              LDR      r0,|L1.14492|
0035fc  f7fffffe          BL       uart_putchar
003600  210a              MOVS     r1,#0xa
003602  48a6              LDR      r0,|L1.14492|
003604  f7fffffe          BL       uart_putchar
003608  210a              MOVS     r1,#0xa
00360a  48a4              LDR      r0,|L1.14492|
00360c  f7fffffe          BL       uart_putchar
003610  210a              MOVS     r1,#0xa
003612  48a2              LDR      r0,|L1.14492|
003614  f7fffffe          BL       uart_putchar
003618  210a              MOVS     r1,#0xa
00361a  48a0              LDR      r0,|L1.14492|
00361c  f7fffffe          BL       uart_putchar
003620  210a              MOVS     r1,#0xa
003622  489e              LDR      r0,|L1.14492|
003624  f7fffffe          BL       uart_putchar
003628  210a              MOVS     r1,#0xa
00362a  489c              LDR      r0,|L1.14492|
00362c  f7fffffe          BL       uart_putchar
003630  210a              MOVS     r1,#0xa
003632  489a              LDR      r0,|L1.14492|
003634  f7fffffe          BL       uart_putchar
003638  210a              MOVS     r1,#0xa
00363a  4898              LDR      r0,|L1.14492|
00363c  f7fffffe          BL       uart_putchar
003640  210a              MOVS     r1,#0xa
003642  4896              LDR      r0,|L1.14492|
003644  f7fffffe          BL       uart_putchar
003648  210a              MOVS     r1,#0xa
00364a  4894              LDR      r0,|L1.14492|
00364c  f7fffffe          BL       uart_putchar
003650  210a              MOVS     r1,#0xa
003652  4892              LDR      r0,|L1.14492|
003654  f7fffffe          BL       uart_putchar
;;;1133   									//memset(data,0,1000);
;;;1134   														//timer counts to wait for characters in uart 1 									
;;;1135   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003658  bf00              NOP      
                  |L1.13914|
00365a  4991              LDR      r1,|L1.14496|
00365c  4891              LDR      r0,|L1.14500|
00365e  f7fffffe          BL       strstr
003662  2800              CMP      r0,#0
003664  d10a              BNE      |L1.13948|
003666  498e              LDR      r1,|L1.14496|
003668  398c              SUBS     r1,r1,#0x8c
00366a  488e              LDR      r0,|L1.14500|
00366c  f7fffffe          BL       strstr
003670  2800              CMP      r0,#0
003672  d103              BNE      |L1.13948|
003674  488c              LDR      r0,|L1.14504|
003676  6800              LDR      r0,[r0,#0]  ; tout
003678  2805              CMP      r0,#5
00367a  ddee              BLE      |L1.13914|
                  |L1.13948|
;;;1136   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1137   									}
;;;1138   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00367c  f7fffffe          BL       clear
;;;1139   									//clear();
;;;1140   									memset(data,0,strlen(data));
003680  488a              LDR      r0,|L1.14508|
003682  f7fffffe          BL       strlen
003686  4604              MOV      r4,r0
003688  4621              MOV      r1,r4
00368a  4888              LDR      r0,|L1.14508|
00368c  f7fffffe          BL       __aeabi_memclr
;;;1141   									clear();
003690  f7fffffe          BL       clear
;;;1142   
;;;1143   								
;;;1144   						//		
;;;1145   }
003694  bd38              POP      {r3-r5,pc}
;;;1146   
                          ENDP

                  read PROC
;;;1362   
;;;1363   void read(char * A,char * B,char * C)
003696  b570              PUSH     {r4-r6,lr}
;;;1364   {k=0;l=time;
003698  4604              MOV      r4,r0
00369a  460d              MOV      r5,r1
00369c  4616              MOV      r6,r2
00369e  2000              MOVS     r0,#0
0036a0  4983              LDR      r1,|L1.14512|
0036a2  6008              STR      r0,[r1,#0]  ; k
0036a4  4883              LDR      r0,|L1.14516|
0036a6  6800              LDR      r0,[r0,#0]  ; time
0036a8  4983              LDR      r1,|L1.14520|
0036aa  6008              STR      r0,[r1,#0]  ; l
;;;1365   			do{
0036ac  bf00              NOP      
                  |L1.13998|
;;;1366   			if( uart_getchar_present (UART1_BASE_PTR))	
0036ae  487b              LDR      r0,|L1.14492|
0036b0  f7fffffe          BL       uart_getchar_present
0036b4  2800              CMP      r0,#0
0036b6  d018              BEQ      |L1.14058|
;;;1367   			{uart_string_gps[k]=UART_D_REG(UART1_BASE_PTR);k++;l=time;if(k>298){k=0;}}
0036b8  4878              LDR      r0,|L1.14492|
0036ba  79c0              LDRB     r0,[r0,#7]
0036bc  497f              LDR      r1,|L1.14524|
0036be  4a7c              LDR      r2,|L1.14512|
0036c0  6812              LDR      r2,[r2,#0]  ; k
0036c2  5488              STRB     r0,[r1,r2]
0036c4  487a              LDR      r0,|L1.14512|
0036c6  6800              LDR      r0,[r0,#0]  ; k
0036c8  1c40              ADDS     r0,r0,#1
0036ca  4979              LDR      r1,|L1.14512|
0036cc  6008              STR      r0,[r1,#0]  ; k
0036ce  4879              LDR      r0,|L1.14516|
0036d0  6800              LDR      r0,[r0,#0]  ; time
0036d2  4979              LDR      r1,|L1.14520|
0036d4  6008              STR      r0,[r1,#0]  ; l
0036d6  4876              LDR      r0,|L1.14512|
0036d8  6800              LDR      r0,[r0,#0]  ; k
0036da  21ff              MOVS     r1,#0xff
0036dc  312b              ADDS     r1,r1,#0x2b
0036de  4288              CMP      r0,r1
0036e0  dd09              BLE      |L1.14070|
0036e2  2000              MOVS     r0,#0
0036e4  4972              LDR      r1,|L1.14512|
0036e6  6008              STR      r0,[r1,#0]  ; k
0036e8  e005              B        |L1.14070|
                  |L1.14058|
;;;1368   				else{
;;;1369   							l--;if(l==10){}
0036ea  4873              LDR      r0,|L1.14520|
0036ec  6800              LDR      r0,[r0,#0]  ; l
0036ee  1e40              SUBS     r0,r0,#1
0036f0  4971              LDR      r1,|L1.14520|
0036f2  6008              STR      r0,[r1,#0]  ; l
0036f4  bf00              NOP      
                  |L1.14070|
;;;1370   						}
;;;1371   			}while(!((strstr(uart_string_gps, "OK\r\n"))
0036f6  496a              LDR      r1,|L1.14496|
0036f8  4870              LDR      r0,|L1.14524|
0036fa  f7fffffe          BL       strstr
0036fe  2800              CMP      r0,#0
003700  d110              BNE      |L1.14116|
003702  4967              LDR      r1,|L1.14496|
003704  3914              SUBS     r1,r1,#0x14
003706  486d              LDR      r0,|L1.14524|
003708  f7fffffe          BL       strstr
00370c  2800              CMP      r0,#0
00370e  d109              BNE      |L1.14116|
003710  4869              LDR      r0,|L1.14520|
003712  6800              LDR      r0,[r0,#0]  ; l
003714  2800              CMP      r0,#0
003716  dd05              BLE      |L1.14116|
003718  4969              LDR      r1,|L1.14528|
00371a  4868              LDR      r0,|L1.14524|
00371c  f7fffffe          BL       strstr
003720  2800              CMP      r0,#0
003722  d0c4              BEQ      |L1.13998|
                  |L1.14116|
;;;1372   							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;1373   				        	||(strstr(uart_string_gps, "ERROR:"))
;;;1374   							));
;;;1375   //		clear();
;;;1376   }	
003724  bd70              POP      {r4-r6,pc}
;;;1377   void read2(char * respA,char * respB,char * respC, int timeout)
                          ENDP

                  read2 PROC
003726  b5f8              PUSH     {r3-r7,lr}
;;;1378   {k=0;l=time;
003728  4604              MOV      r4,r0
00372a  460e              MOV      r6,r1
00372c  4615              MOV      r5,r2
00372e  461f              MOV      r7,r3
003730  2000              MOVS     r0,#0
003732  495f              LDR      r1,|L1.14512|
003734  6008              STR      r0,[r1,#0]  ; k
003736  485f              LDR      r0,|L1.14516|
003738  6800              LDR      r0,[r0,#0]  ; time
00373a  495f              LDR      r1,|L1.14520|
00373c  6008              STR      r0,[r1,#0]  ; l
;;;1379   			do{
00373e  bf00              NOP      
                  |L1.14144|
;;;1380   			if( uart_getchar_present (UART2_BASE_PTR))	
003740  4860              LDR      r0,|L1.14532|
003742  f7fffffe          BL       uart_getchar_present
003746  2800              CMP      r0,#0
003748  d018              BEQ      |L1.14204|
;;;1381   			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=time;if(k>298){k=0;}}
00374a  485e              LDR      r0,|L1.14532|
00374c  79c0              LDRB     r0,[r0,#7]
00374e  495b              LDR      r1,|L1.14524|
003750  4a57              LDR      r2,|L1.14512|
003752  6812              LDR      r2,[r2,#0]  ; k
003754  5488              STRB     r0,[r1,r2]
003756  4856              LDR      r0,|L1.14512|
003758  6800              LDR      r0,[r0,#0]  ; k
00375a  1c40              ADDS     r0,r0,#1
00375c  4954              LDR      r1,|L1.14512|
00375e  6008              STR      r0,[r1,#0]  ; k
003760  4854              LDR      r0,|L1.14516|
003762  6800              LDR      r0,[r0,#0]  ; time
003764  4954              LDR      r1,|L1.14520|
003766  6008              STR      r0,[r1,#0]  ; l
003768  4851              LDR      r0,|L1.14512|
00376a  6800              LDR      r0,[r0,#0]  ; k
00376c  21ff              MOVS     r1,#0xff
00376e  312b              ADDS     r1,r1,#0x2b
003770  4288              CMP      r0,r1
003772  dd08              BLE      |L1.14214|
003774  2000              MOVS     r0,#0
003776  494e              LDR      r1,|L1.14512|
003778  6008              STR      r0,[r1,#0]  ; k
00377a  e004              B        |L1.14214|
                  |L1.14204|
;;;1382   				else{				
;;;1383   								l--;
00377c  484e              LDR      r0,|L1.14520|
00377e  6800              LDR      r0,[r0,#0]  ; l
003780  1e40              SUBS     r0,r0,#1
003782  494d              LDR      r1,|L1.14520|
003784  6008              STR      r0,[r1,#0]  ; l
                  |L1.14214|
;;;1384   						}
;;;1385   			}while(!((strstr(uart_string_gps, respA))
003786  4621              MOV      r1,r4
003788  484c              LDR      r0,|L1.14524|
00378a  f7fffffe          BL       strstr
00378e  2800              CMP      r0,#0
003790  d10f              BNE      |L1.14258|
003792  4631              MOV      r1,r6
003794  4849              LDR      r0,|L1.14524|
003796  f7fffffe          BL       strstr
00379a  2800              CMP      r0,#0
00379c  d109              BNE      |L1.14258|
00379e  4846              LDR      r0,|L1.14520|
0037a0  6800              LDR      r0,[r0,#0]  ; l
0037a2  2800              CMP      r0,#0
0037a4  dd05              BLE      |L1.14258|
0037a6  4629              MOV      r1,r5
0037a8  4844              LDR      r0,|L1.14524|
0037aa  f7fffffe          BL       strstr
0037ae  2800              CMP      r0,#0
0037b0  d0c6              BEQ      |L1.14144|
                  |L1.14258|
;;;1386   							||(strstr(uart_string_gps, respB))  || (l<=0) 
;;;1387   				        	||(strstr(uart_string_gps, respC))
;;;1388   							));
;;;1389   //		clear();
;;;1390   }	
0037b2  bdf8              POP      {r3-r7,pc}
;;;1391   
                          ENDP

                  send_modem2 PROC
;;;1402   	
;;;1403   void send_modem2(char ch[])
0037b4  b570              PUSH     {r4-r6,lr}
;;;1404   	{	
0037b6  4604              MOV      r4,r0
;;;1405   						unsigned char i21;
;;;1406   						i21=0;
0037b8  2500              MOVS     r5,#0
;;;1407   						while ((*(ch+i21)) != '\0') // NULL
0037ba  e005              B        |L1.14280|
                  |L1.14268|
;;;1408   						{	
;;;1409   						// delay(1);
;;;1410   						 uart_putchar(UART2_BASE_PTR, (*(ch+i21)));
0037bc  5d61              LDRB     r1,[r4,r5]
0037be  4841              LDR      r0,|L1.14532|
0037c0  f7fffffe          BL       uart_putchar
;;;1411   						 i21++;
0037c4  1c68              ADDS     r0,r5,#1
0037c6  b2c5              UXTB     r5,r0
                  |L1.14280|
0037c8  5d60              LDRB     r0,[r4,r5]            ;1407
0037ca  2800              CMP      r0,#0                 ;1407
0037cc  d1f6              BNE      |L1.14268|
;;;1412   						}
;;;1413   		
;;;1414   	}	
0037ce  bd70              POP      {r4-r6,pc}
;;;1415   	
                          ENDP

                  gsm_gps_sleep PROC
;;;1638   
;;;1639   void gsm_gps_sleep()
0037d0  b508              PUSH     {r3,lr}
;;;1640   {
;;;1641   	
;;;1642   sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0037d2  4b3d              LDR      r3,|L1.14536|
0037d4  4a3d              LDR      r2,|L1.14540|
0037d6  493a              LDR      r1,|L1.14528|
0037d8  3160              ADDS     r1,r1,#0x60
0037da  483d              LDR      r0,|L1.14544|
0037dc  f7fffffe          BL       __2sprintf
;;;1643   send_GSM( at_ , "CONNECT", "ERROR" , "CONNECT",tmeout);										
0037e0  483c              LDR      r0,|L1.14548|
0037e2  6800              LDR      r0,[r0,#0]  ; tmeout
0037e4  4b36              LDR      r3,|L1.14528|
0037e6  3380              ADDS     r3,r3,#0x80
0037e8  4a2d              LDR      r2,|L1.14496|
0037ea  3a8c              SUBS     r2,r2,#0x8c
0037ec  4619              MOV      r1,r3
0037ee  9000              STR      r0,[sp,#0]
0037f0  4837              LDR      r0,|L1.14544|
0037f2  f7fffffe          BL       send_GSM
;;;1644   send_chunk();
0037f6  f7fffffe          BL       send_chunk
;;;1645   	//sleep modules;
;;;1646   //	do{
;;;1647   //				accel_read();
;;;1648   //				motion_samples = 0;
;;;1649   //				detect_motion();
;;;1650   //				
;;;1651   //	}while(motion != 1);
;;;1652   //	motion_samples = 0;
;;;1653   //wakeup modules;
;;;1654   
;;;1655   
;;;1656   
;;;1657   
;;;1658   }
0037fa  bd08              POP      {r3,pc}
;;;1659   
                          ENDP

                  SW1_init PROC
;;;86     
;;;87     void SW1_init(void){
0037fc  4836              LDR      r0,|L1.14552|
;;;88     
;;;89     #ifdef CMSIS
;;;90     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
0037fe  6b80              LDR      r0,[r0,#0x38]
003800  2101              MOVS     r1,#1
003802  02c9              LSLS     r1,r1,#11
003804  4308              ORRS     r0,r0,r1
003806  4934              LDR      r1,|L1.14552|
003808  6388              STR      r0,[r1,#0x38]
;;;91     	
;;;92     	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00380a  4834              LDR      r0,|L1.14556|
00380c  4934              LDR      r1,|L1.14560|
00380e  60c8              STR      r0,[r1,#0xc]
;;;93     	
;;;94     	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
003810  4831              LDR      r0,|L1.14552|
003812  6b80              LDR      r0,[r0,#0x38]
003814  2101              MOVS     r1,#1
003816  0309              LSLS     r1,r1,#12
003818  4308              ORRS     r0,r0,r1
00381a  492f              LDR      r1,|L1.14552|
00381c  6388              STR      r0,[r1,#0x38]
;;;95     	
;;;96     	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00381e  482f              LDR      r0,|L1.14556|
003820  1c40              ADDS     r0,r0,#1
003822  4930              LDR      r1,|L1.14564|
003824  6188              STR      r0,[r1,#0x18]
;;;97     	
;;;98     	PORTD_PCR0 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003826  1e40              SUBS     r0,r0,#1
003828  6008              STR      r0,[r1,#0]
;;;99     	
;;;100    	
;;;101    	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
00382a  201f              MOVS     r0,#0x1f
00382c  2101              MOVS     r1,#1
00382e  4081              LSLS     r1,r1,r0
003830  4a2d              LDR      r2,|L1.14568|
003832  6011              STR      r1,[r2,#0]
003834  bf00              NOP      
;;;102    #else
;;;103               
;;;104            enable_irq(31);
;;;105            set_irq_priority(31, 1);
;;;106            
;;;107            SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;108            
;;;109            PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;110            
;;;111    #endif
;;;112    }
003836  4770              BX       lr
;;;113    
                          ENDP

                  LED_state PROC
;;;182    
;;;183    void LED_state(void){
003838  b500              PUSH     {lr}
;;;184    if(sleep_flag == 1)
00383a  482c              LDR      r0,|L1.14572|
00383c  6800              LDR      r0,[r0,#0]  ; sleep_flag
00383e  2801              CMP      r0,#1
003840  d102              BNE      |L1.14408|
;;;185    {stateCount=99;
003842  2063              MOVS     r0,#0x63
003844  492a              LDR      r1,|L1.14576|
003846  7008              STRB     r0,[r1,#0]
                  |L1.14408|
;;;186    }	
;;;187    			
;;;188    	switch(stateCount){
003848  4829              LDR      r0,|L1.14576|
00384a  7800              LDRB     r0,[r0,#0]  ; stateCount
00384c  0003              MOVS     r3,r0
00384e  f7fffffe          BL       __ARM_common_switch8
003852  0604              DCB      0x06,0x04
003854  0c141c53          DCB      0x0c,0x14,0x1c,0x53
003858  5b63              DCB      0x5b,0x63
;;;189    
;;;190    		
;;;191                case 0:     //Red
;;;192                       REDBAT_ON;
00385a  2040              MOVS     r0,#0x40
00385c  4925              LDR      r1,|L1.14580|
00385e  6088              STR      r0,[r1,#8]
;;;193                       GREENBAT_OFF;
003860  2080              MOVS     r0,#0x80
003862  6048              STR      r0,[r1,#4]
;;;194                       BLUEBAT_OFF;
003864  0040              LSLS     r0,r0,#1
003866  6048              STR      r0,[r1,#4]
;;;195                       break;
003868  e061              B        |L1.14638|
;;;196    
;;;197                case 1:	//Yellow
;;;198    		               REDBAT_ON;
00386a  2040              MOVS     r0,#0x40
00386c  4921              LDR      r1,|L1.14580|
00386e  6088              STR      r0,[r1,#8]
;;;199    		               GREENBAT_ON;
003870  2080              MOVS     r0,#0x80
003872  6088              STR      r0,[r1,#8]
;;;200    		               BLUEBAT_OFF;
003874  0040              LSLS     r0,r0,#1
003876  6048              STR      r0,[r1,#4]
;;;201    		               break;
003878  e059              B        |L1.14638|
;;;202    				
;;;203                case 2:	//Green
;;;204    		               REDBAT_OFF;
00387a  2040              MOVS     r0,#0x40
00387c  491d              LDR      r1,|L1.14580|
00387e  6048              STR      r0,[r1,#4]
;;;205    		               GREENBAT_ON;
003880  2080              MOVS     r0,#0x80
003882  6088              STR      r0,[r1,#8]
;;;206    		               BLUEBAT_OFF;
003884  0040              LSLS     r0,r0,#1
003886  6048              STR      r0,[r1,#4]
;;;207    		               break;
003888  e051              B        |L1.14638|
;;;208    				
;;;209                case 3:	//Blue
;;;210    		               REDBAT_OFF;
00388a  2040              MOVS     r0,#0x40
00388c  4919              LDR      r1,|L1.14580|
00388e  6048              STR      r0,[r1,#4]
;;;211    		               GREENBAT_OFF;
003890  2080              MOVS     r0,#0x80
003892  6048              STR      r0,[r1,#4]
;;;212    		               BLUEBAT_ON;
003894  0040              LSLS     r0,r0,#1
003896  6088              STR      r0,[r1,#8]
;;;213    		               break;
003898  e049              B        |L1.14638|
00389a  0000              DCW      0x0000
                  |L1.14492|
                          DCD      0x4006b000
                  |L1.14496|
                          DCD      ||.text||+0x8fc
                  |L1.14500|
                          DCD      uart_string_gsm
                  |L1.14504|
                          DCD      tout
                  |L1.14508|
                          DCD      data
                  |L1.14512|
                          DCD      k
                  |L1.14516|
                          DCD      time
                  |L1.14520|
                          DCD      l
                  |L1.14524|
                          DCD      uart_string_gps
                  |L1.14528|
                          DCD      ||.text||+0xd54
                  |L1.14532|
                          DCD      0x4006c000
                  |L1.14536|
                          DCD      port
                  |L1.14540|
                          DCD      ||ip||
                  |L1.14544|
                          DCD      at_
                  |L1.14548|
                          DCD      tmeout
                  |L1.14552|
                          DCD      0x40048000
                  |L1.14556|
                          DCD      0x000a0102
                  |L1.14560|
                          DCD      0x4004b000
                  |L1.14564|
                          DCD      0x4004c000
                  |L1.14568|
                          DCD      0xe000e100
                  |L1.14572|
                          DCD      sleep_flag
                  |L1.14576|
                          DCD      stateCount
                  |L1.14580|
                          DCD      0x400ff080
;;;214    				
;;;215                case 4:	//Violet
;;;216    		               REDBAT_ON;
0038f8  2040              MOVS     r0,#0x40
0038fa  49fc              LDR      r1,|L1.15596|
0038fc  6088              STR      r0,[r1,#8]
;;;217    		               GREENBAT_OFF;
0038fe  2080              MOVS     r0,#0x80
003900  6048              STR      r0,[r1,#4]
;;;218    		               BLUEBAT_ON;
003902  0040              LSLS     r0,r0,#1
003904  6088              STR      r0,[r1,#8]
;;;219    		               break;
003906  e012              B        |L1.14638|
;;;220    				
;;;221                case 5:	//White
;;;222    		              REDBAT_ON;
003908  2040              MOVS     r0,#0x40
00390a  49f8              LDR      r1,|L1.15596|
00390c  6088              STR      r0,[r1,#8]
;;;223    		              GREENBAT_ON;
00390e  2080              MOVS     r0,#0x80
003910  6088              STR      r0,[r1,#8]
;;;224    		              BLUEBAT_ON;
003912  0040              LSLS     r0,r0,#1
003914  6088              STR      r0,[r1,#8]
;;;225    		              break;
003916  e00a              B        |L1.14638|
;;;226    				
;;;227                default:	//Red
;;;228    							
;;;229    
;;;230    		              REDBAT_OFF;
003918  2040              MOVS     r0,#0x40
00391a  49f4              LDR      r1,|L1.15596|
00391c  6048              STR      r0,[r1,#4]
;;;231    		              GREENBAT_OFF;
00391e  2080              MOVS     r0,#0x80
003920  6048              STR      r0,[r1,#4]
;;;232    		              BLUEBAT_OFF;
003922  0040              LSLS     r0,r0,#1
003924  6048              STR      r0,[r1,#4]
;;;233    		              stateCount = 0;	//Reset state counter
003926  2000              MOVS     r0,#0
003928  49f1              LDR      r1,|L1.15600|
00392a  7008              STRB     r0,[r1,#0]
;;;234    			      break;
00392c  bf00              NOP      
                  |L1.14638|
00392e  bf00              NOP                            ;195
;;;235    
;;;236        }
;;;237    	
;;;238    }
003930  bd00              POP      {pc}
;;;239    
                          ENDP

                  PORTD_IRQHandler PROC
;;;114    #ifdef CMSIS
;;;115    void PORTD_IRQHandler(void){
003932  b510              PUSH     {r4,lr}
;;;116      
;;;117    	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
003934  48ef              LDR      r0,|L1.15604|
003936  6a00              LDR      r0,[r0,#0x20]
003938  2108              MOVS     r1,#8
00393a  4008              ANDS     r0,r0,r1
00393c  2800              CMP      r0,#0
00393e  d014              BEQ      |L1.14698|
;;;118    	{
;;;119    		PORTC_ISFR |= (1 << SW_PIN);
003940  48ec              LDR      r0,|L1.15604|
003942  6a00              LDR      r0,[r0,#0x20]
003944  4308              ORRS     r0,r0,r1
003946  49eb              LDR      r1,|L1.15604|
003948  6208              STR      r0,[r1,#0x20]
;;;120    		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
00394a  48eb              LDR      r0,|L1.15608|
00394c  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
00394e  2101              MOVS     r1,#1
003950  4308              ORRS     r0,r0,r1
003952  49e9              LDR      r1,|L1.15608|
003954  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;121    ringflag=1;
003956  2001              MOVS     r0,#1
003958  49e8              LDR      r1,|L1.15612|
00395a  7008              STRB     r0,[r1,#0]
;;;122    send_SOS=1;	
00395c  49e8              LDR      r1,|L1.15616|
00395e  6008              STR      r0,[r1,#0]  ; send_SOS
;;;123    /**************ISR follows******/	
;;;124     stateCount++;
003960  48e3              LDR      r0,|L1.15600|
003962  7800              LDRB     r0,[r0,#0]  ; stateCount
003964  1c40              ADDS     r0,r0,#1
003966  49e2              LDR      r1,|L1.15600|
003968  7008              STRB     r0,[r1,#0]
                  |L1.14698|
;;;125    	}
;;;126    	
;;;127    	if(PORTD_ISFR & (1 << 0))		//Check for interrupt on PORTD Pin 6
00396a  48e6              LDR      r0,|L1.15620|
00396c  6a00              LDR      r0,[r0,#0x20]
00396e  07c0              LSLS     r0,r0,#31
003970  0fc0              LSRS     r0,r0,#31
003972  2800              CMP      r0,#0
003974  d012              BEQ      |L1.14748|
;;;128    	{
;;;129    		PORTD_ISFR |= (1 << 0);
003976  48e3              LDR      r0,|L1.15620|
003978  6a00              LDR      r0,[r0,#0x20]
00397a  2101              MOVS     r1,#1
00397c  4308              ORRS     r0,r0,r1
00397e  49e1              LDR      r1,|L1.15620|
003980  6208              STR      r0,[r1,#0x20]
;;;130    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
003982  48dd              LDR      r0,|L1.15608|
003984  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
003986  2101              MOVS     r1,#1
003988  4308              ORRS     r0,r0,r1
00398a  49db              LDR      r1,|L1.15608|
00398c  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;131    	
;;;132    /**************ISR follows******/	
;;;133    // stateCount++;
;;;134    ringflag=1;
00398e  2001              MOVS     r0,#1
003990  49da              LDR      r1,|L1.15612|
003992  7008              STRB     r0,[r1,#0]
;;;135    send_SOS=1;		
003994  49da              LDR      r1,|L1.15616|
003996  6008              STR      r0,[r1,#0]  ; send_SOS
;;;136    
;;;137    	// wakeup and reset
;;;138    	
;;;139    clear();	
003998  f7fffffe          BL       clear
                  |L1.14748|
;;;140    	}	
;;;141    	
;;;142    	
;;;143    	
;;;144    	
;;;145    	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
00399c  48d9              LDR      r0,|L1.15620|
00399e  6a00              LDR      r0,[r0,#0x20]
0039a0  2140              MOVS     r1,#0x40
0039a2  4008              ANDS     r0,r0,r1
0039a4  2800              CMP      r0,#0
0039a6  d00f              BEQ      |L1.14792|
;;;146    	{
;;;147    		PORTD_ISFR |= (1 << 6);
0039a8  48d6              LDR      r0,|L1.15620|
0039aa  6a00              LDR      r0,[r0,#0x20]
0039ac  4308              ORRS     r0,r0,r1
0039ae  49d5              LDR      r1,|L1.15620|
0039b0  6208              STR      r0,[r1,#0x20]
;;;148    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
0039b2  48d1              LDR      r0,|L1.15608|
0039b4  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
0039b6  2101              MOVS     r1,#1
0039b8  4308              ORRS     r0,r0,r1
0039ba  49cf              LDR      r1,|L1.15608|
0039bc  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;149    	
;;;150    /**************ISR follows******/	
;;;151    // stateCount++;
;;;152    		
;;;153    ringflag=1;
0039be  2001              MOVS     r0,#1
0039c0  49ce              LDR      r1,|L1.15612|
0039c2  7008              STRB     r0,[r1,#0]
;;;154    	// wakeup and reset
;;;155    	
;;;156    clear();	
0039c4  f7fffffe          BL       clear
                  |L1.14792|
;;;157    	}
;;;158    	
;;;159    	LED_state();
0039c8  f7fffffe          BL       LED_state
;;;160    }
0039cc  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  PORTC_action PROC
;;;162    void PORTC_action(void){
0039ce  4770              BX       lr
;;;163    }
;;;164    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
0039d0  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
0039d2  49cd              LDR      r1,|L1.15624|
0039d4  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
0039d6  48cd              LDR      r0,|L1.15628|
0039d8  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK;   
0039da  2005              MOVS     r0,#5
0039dc  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
0039de  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
0039e0  48c9              LDR      r0,|L1.15624|
;;;17     {
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
0039e2  6900              LDR      r0,[r0,#0x10]
0039e4  0840              LSRS     r0,r0,#1
0039e6  0040              LSLS     r0,r0,#1
0039e8  49c7              LDR      r1,|L1.15624|
0039ea  6108              STR      r0,[r1,#0x10]
;;;19     }
0039ec  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
0039ee  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
0039f0  48c5              LDR      r0,|L1.15624|
0039f2  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
0039f4  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
0039f6  1b28              SUBS     r0,r5,r4
0039f8  49c5              LDR      r1,|L1.15632|
0039fa  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
0039fc  4629              MOV      r1,r5
0039fe  a0c5              ADR      r0,|L1.15636|
003a00  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
003a04  4621              MOV      r1,r4
003a06  a0ca              ADR      r0,|L1.15664|
003a08  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
003a0c  48c0              LDR      r0,|L1.15632|
003a0e  6801              LDR      r1,[r0,#0]  ; overhead
003a10  a0ce              ADR      r0,|L1.15692|
003a12  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
003a16  bd70              POP      {r4-r6,pc}
;;;13     #include "stdlib.h"
                          ENDP

                  delay2 PROC
;;;89     }
;;;90      void delay2(int delaytime)
003a18  e00c              B        |L1.14900|
                  |L1.14874|
;;;91     {
;;;92      while(delaytime--)
;;;93         {for(i=5000;i>0;i--);  // about 1 ms
003a1a  49d7              LDR      r1,|L1.15736|
003a1c  4ad7              LDR      r2,|L1.15740|
003a1e  6011              STR      r1,[r2,#0]  ; i
003a20  e004              B        |L1.14892|
                  |L1.14882|
003a22  49d6              LDR      r1,|L1.15740|
003a24  6809              LDR      r1,[r1,#0]  ; i
003a26  1e49              SUBS     r1,r1,#1
003a28  4ad4              LDR      r2,|L1.15740|
003a2a  6011              STR      r1,[r2,#0]  ; i
                  |L1.14892|
003a2c  49d3              LDR      r1,|L1.15740|
003a2e  6809              LDR      r1,[r1,#0]  ; i
003a30  2900              CMP      r1,#0
003a32  dcf6              BGT      |L1.14882|
                  |L1.14900|
003a34  4601              MOV      r1,r0                 ;92
003a36  1e40              SUBS     r0,r0,#1              ;92
003a38  2900              CMP      r1,#0                 ;92
003a3a  d1ee              BNE      |L1.14874|
;;;94         }
;;;95     }
003a3c  4770              BX       lr
;;;96             
                          ENDP

                  main PROC
;;;126    /********************************************************************/
;;;127    int main (void)
003a3e  b51c              PUSH     {r2-r4,lr}
;;;128    {
;;;129    
;;;130    
;;;131    
;;;132    //int_erval=10;
;;;133    								memset(data,0,strlen(data));
003a40  48cf              LDR      r0,|L1.15744|
003a42  f7fffffe          BL       strlen
003a46  4601              MOV      r1,r0
003a48  9001              STR      r0,[sp,#4]
003a4a  48cd              LDR      r0,|L1.15744|
003a4c  f7fffffe          BL       __aeabi_memclr
;;;134    								memset(data2,0,strlen(data2));
003a50  48cc              LDR      r0,|L1.15748|
003a52  f7fffffe          BL       strlen
003a56  4601              MOV      r1,r0
003a58  9001              STR      r0,[sp,#4]
003a5a  48ca              LDR      r0,|L1.15748|
003a5c  f7fffffe          BL       __aeabi_memclr
;;;135    	memset(ip,0,strlen(ip));
003a60  48c9              LDR      r0,|L1.15752|
003a62  f7fffffe          BL       strlen
003a66  4601              MOV      r1,r0
003a68  9001              STR      r0,[sp,#4]
003a6a  48c7              LDR      r0,|L1.15752|
003a6c  f7fffffe          BL       __aeabi_memclr
;;;136    		memset(port,0,strlen(ip));
003a70  48c5              LDR      r0,|L1.15752|
003a72  f7fffffe          BL       strlen
003a76  4601              MOV      r1,r0
003a78  9001              STR      r0,[sp,#4]
003a7a  48c4              LDR      r0,|L1.15756|
003a7c  f7fffffe          BL       __aeabi_memclr
;;;137    
;;;138    	
;;;139    start();
003a80  f7fffffe          BL       start
;;;140    systick_init();	
003a84  f7fffffe          BL       systick_init
;;;141    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;142    
;;;143    #endif
;;;144    
;;;145    int_erval=5;
003a88  2005              MOVS     r0,#5
003a8a  49c1              LDR      r1,|L1.15760|
003a8c  6008              STR      r0,[r1,#0]  ; int_erval
;;;146    
;;;147    
;;;148    	LED_init();		//Initialize GPIO for LEDs
003a8e  f7fffffe          BL       LED_init
;;;149    	RELAY_init();		//Initialize GPIO for LEDs
003a92  bf00              NOP      
003a94  48bf              LDR      r0,|L1.15764|
003a96  6b80              LDR      r0,[r0,#0x38]
003a98  2101              MOVS     r1,#1
003a9a  0249              LSLS     r1,r1,#9
003a9c  4308              ORRS     r0,r0,r1
003a9e  49bd              LDR      r1,|L1.15764|
003aa0  6388              STR      r0,[r1,#0x38]
003aa2  1588              ASRS     r0,r1,#22
003aa4  49bc              LDR      r1,|L1.15768|
003aa6  6048              STR      r0,[r1,#4]
003aa8  6088              STR      r0,[r1,#8]
003aaa  4890              LDR      r0,|L1.15596|
003aac  3880              SUBS     r0,r0,#0x80
003aae  6840              LDR      r0,[r0,#4]
003ab0  2106              MOVS     r1,#6
003ab2  4308              ORRS     r0,r0,r1
003ab4  498d              LDR      r1,|L1.15596|
003ab6  3980              SUBS     r1,r1,#0x80
003ab8  6048              STR      r0,[r1,#4]
003aba  4608              MOV      r0,r1
003abc  6940              LDR      r0,[r0,#0x14]
003abe  2106              MOVS     r1,#6
003ac0  4308              ORRS     r0,r0,r1
003ac2  498a              LDR      r1,|L1.15596|
003ac4  3980              SUBS     r1,r1,#0x80
003ac6  6148              STR      r0,[r1,#0x14]
003ac8  2002              MOVS     r0,#2
003aca  6088              STR      r0,[r1,#8]
003acc  2004              MOVS     r0,#4
003ace  6088              STR      r0,[r1,#8]
003ad0  bf00              NOP      
;;;150    	SW1_init();		//Initialize GPIO for SW1 w/ interrupt
003ad2  f7fffffe          BL       SW1_init
;;;151    send_SOS=0;	
003ad6  2000              MOVS     r0,#0
003ad8  4989              LDR      r1,|L1.15616|
003ada  6008              STR      r0,[r1,#0]  ; send_SOS
;;;152    	//accel_init();
;;;153    	sleep_flag=0;
003adc  49af              LDR      r1,|L1.15772|
003ade  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;154    	DTR_OFF;	
003ae0  2080              MOVS     r0,#0x80
003ae2  4982              LDR      r1,|L1.15596|
003ae4  3140              ADDS     r1,r1,#0x40
003ae6  6088              STR      r0,[r1,#8]
;;;155    	lptmr_init(1000, 1);	
003ae8  2101              MOVS     r1,#1
003aea  207d              MOVS     r0,#0x7d
003aec  00c0              LSLS     r0,r0,#3
003aee  f7fffffe          BL       lptmr_init
;;;156    	ADC_Init();
003af2  bf00              NOP      
003af4  48a7              LDR      r0,|L1.15764|
003af6  6bc0              LDR      r0,[r0,#0x3c]
003af8  2101              MOVS     r1,#1
003afa  06c9              LSLS     r1,r1,#27
003afc  4308              ORRS     r0,r0,r1
003afe  49a5              LDR      r1,|L1.15764|
003b00  63c8              STR      r0,[r1,#0x3c]
003b02  202d              MOVS     r0,#0x2d
003b04  49a6              LDR      r1,|L1.15776|
003b06  6088              STR      r0,[r1,#8]
003b08  2000              MOVS     r0,#0
003b0a  60c8              STR      r0,[r1,#0xc]
003b0c  6208              STR      r0,[r1,#0x20]
003b0e  4608              MOV      r0,r1
003b10  6a40              LDR      r0,[r0,#0x24]
003b12  2108              MOVS     r1,#8
003b14  4388              BICS     r0,r0,r1
003b16  49a2              LDR      r1,|L1.15776|
003b18  6248              STR      r0,[r1,#0x24]
003b1a  bf00              NOP      
;;;157    	
;;;158    //C0
;;;159    
;;;160    //SCB->AIRCR = 0x05fA0000;
;;;161    
;;;162    	int_erval=0;
003b1c  2000              MOVS     r0,#0
003b1e  499c              LDR      r1,|L1.15760|
003b20  6008              STR      r0,[r1,#0]  ; int_erval
;;;163    
;;;164    		uart_putchar(UART1_BASE_PTR,0xA);
003b22  210a              MOVS     r1,#0xa
003b24  489f              LDR      r0,|L1.15780|
003b26  f7fffffe          BL       uart_putchar
;;;165    		uart_putchar(UART1_BASE_PTR,0x1A);			
003b2a  211a              MOVS     r1,#0x1a
003b2c  489d              LDR      r0,|L1.15780|
003b2e  f7fffffe          BL       uart_putchar
;;;166    msg_sim800();
003b32  f7fffffe          BL       msg_sim800
;;;167    send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",2);  
003b36  2002              MOVS     r0,#2
003b38  4b9b              LDR      r3,|L1.15784|
003b3a  4a9c              LDR      r2,|L1.15788|
003b3c  4611              MOV      r1,r2
003b3e  3114              ADDS     r1,r1,#0x14
003b40  9000              STR      r0,[sp,#0]
003b42  a09b              ADR      r0,|L1.15792|
003b44  f7fffffe          BL       send_GSM
;;;168     delay(100); 
003b48  2064              MOVS     r0,#0x64
003b4a  f7fffffe          BL       delay
;;;169    
;;;170    clear();delay(100);
003b4e  f7fffffe          BL       clear
003b52  2064              MOVS     r0,#0x64
003b54  f7fffffe          BL       delay
;;;171    msg_sim800();
003b58  f7fffffe          BL       msg_sim800
;;;172    
;;;173    GPS_COLLECT();
003b5c  f7fffffe          BL       GPS_COLLECT
;;;174    strcat(data,"CH'1'\n");	
003b60  a195              ADR      r1,|L1.15800|
003b62  4887              LDR      r0,|L1.15744|
003b64  f7fffffe          BL       strcat
;;;175    delay(5000);
003b68  4883              LDR      r0,|L1.15736|
003b6a  f7fffffe          BL       delay
;;;176    
;;;177    int_erval=5;
003b6e  2005              MOVS     r0,#5
003b70  4987              LDR      r1,|L1.15760|
003b72  6008              STR      r0,[r1,#0]  ; int_erval
;;;178    
;;;179    //if(!(strstr(uart_string_gsm, "OK")|| strstr(uart_string_gsm, "ERROR")))
;;;180    //{HardFault_Handler();}
;;;181    ignread();
003b74  f7fffffe          BL       ignread
;;;182    msg_sim800();
003b78  f7fffffe          BL       msg_sim800
;;;183    
;;;184    //	saveapn();
;;;185    	
;;;186    readapn();
003b7c  f7fffffe          BL       readapn
;;;187    
;;;188    //HardFault_Handler();
;;;189    
;;;190    //RESET_ON;
;;;191    
;;;192    
;;;193    //send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
;;;194    clear();	
003b80  f7fffffe          BL       clear
;;;195    //delay(10);
;;;196    
;;;197    //send_GSM("\r\nAT+CFUN=1\r\n", "Ready", "NOT INSERTED" , "ERROR",7);	
;;;198    
;;;199    msg_sim800();
003b84  f7fffffe          BL       msg_sim800
;;;200    	
;;;201    GPS_COLLECT();
003b88  f7fffffe          BL       GPS_COLLECT
;;;202    strcat(data,"CH\n");	
003b8c  4987              LDR      r1,|L1.15788|
003b8e  3930              SUBS     r1,r1,#0x30
003b90  487b              LDR      r0,|L1.15744|
003b92  f7fffffe          BL       strcat
;;;203    
;;;204    //GPS_COLLECT();
;;;205    //  strcat(data,"CH\n");	
;;;206    //	
;;;207    
;;;208    GPS_COLLECT();
003b96  f7fffffe          BL       GPS_COLLECT
;;;209    strcat(data,"CH\n");	
003b9a  4984              LDR      r1,|L1.15788|
003b9c  3930              SUBS     r1,r1,#0x30
003b9e  4878              LDR      r0,|L1.15744|
003ba0  f7fffffe          BL       strcat
;;;210    
;;;211    msg_sim800();
003ba4  f7fffffe          BL       msg_sim800
;;;212    
;;;213    stateCount=3;
003ba8  2003              MOVS     r0,#3
003baa  4951              LDR      r1,|L1.15600|
003bac  7008              STRB     r0,[r1,#0]
;;;214    LED_state();
003bae  f7fffffe          BL       LED_state
;;;215    
;;;216    
;;;217    
;;;218    
;;;219    
;;;220    	
;;;221    //send_modem2("$PMTK225,0*2B");
;;;222    //while(!strstr(uart_string_gsm,"OK\r\n"));
;;;223    
;;;224    //bat_cind();
;;;225    //delay(1000);
;;;226    
;;;227    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003bb2  4883              LDR      r0,|L1.15808|
003bb4  6800              LDR      r0,[r0,#0]  ; tmeout
003bb6  4b7c              LDR      r3,|L1.15784|
003bb8  4a7c              LDR      r2,|L1.15788|
003bba  4611              MOV      r1,r2
003bbc  3114              ADDS     r1,r1,#0x14
003bbe  9000              STR      r0,[sp,#0]
003bc0  a080              ADR      r0,|L1.15812|
003bc2  f7fffffe          BL       send_GSM
;;;228    //delay(10);
;;;229    
;;;230    send_GSM("\n\nATS0=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003bc6  487e              LDR      r0,|L1.15808|
003bc8  6800              LDR      r0,[r0,#0]  ; tmeout
003bca  4b77              LDR      r3,|L1.15784|
003bcc  4a77              LDR      r2,|L1.15788|
003bce  4611              MOV      r1,r2
003bd0  3114              ADDS     r1,r1,#0x14
003bd2  9000              STR      r0,[sp,#0]
003bd4  a07e              ADR      r0,|L1.15824|
003bd6  f7fffffe          BL       send_GSM
;;;231    	msg_sim800(); 
003bda  f7fffffe          BL       msg_sim800
;;;232    
;;;233    send_GSM("\n\nAT&F\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003bde  4878              LDR      r0,|L1.15808|
003be0  6800              LDR      r0,[r0,#0]  ; tmeout
003be2  4b71              LDR      r3,|L1.15784|
003be4  4a71              LDR      r2,|L1.15788|
003be6  4611              MOV      r1,r2
003be8  3114              ADDS     r1,r1,#0x14
003bea  9000              STR      r0,[sp,#0]
003bec  a07b              ADR      r0,|L1.15836|
003bee  f7fffffe          BL       send_GSM
;;;234    
;;;235    
;;;236    send_GSM("\n\nAT&D\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003bf2  4873              LDR      r0,|L1.15808|
003bf4  6800              LDR      r0,[r0,#0]  ; tmeout
003bf6  4b6c              LDR      r3,|L1.15784|
003bf8  4a6c              LDR      r2,|L1.15788|
003bfa  4611              MOV      r1,r2
003bfc  3114              ADDS     r1,r1,#0x14
003bfe  9000              STR      r0,[sp,#0]
003c00  a079              ADR      r0,|L1.15848|
003c02  f7fffffe          BL       send_GSM
;;;237    
;;;238    
;;;239    send_GSM("\n\nAT+IFC=0,0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c06  486e              LDR      r0,|L1.15808|
003c08  6800              LDR      r0,[r0,#0]  ; tmeout
003c0a  4b67              LDR      r3,|L1.15784|
003c0c  4a67              LDR      r2,|L1.15788|
003c0e  4611              MOV      r1,r2
003c10  3114              ADDS     r1,r1,#0x14
003c12  9000              STR      r0,[sp,#0]
003c14  a077              ADR      r0,|L1.15860|
003c16  f7fffffe          BL       send_GSM
;;;240    
;;;241    	msg_sim800(); 
003c1a  f7fffffe          BL       msg_sim800
;;;242    
;;;243    send_GSM("\n\nAT+CIPQSEND?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c1e  4868              LDR      r0,|L1.15808|
003c20  6800              LDR      r0,[r0,#0]  ; tmeout
003c22  4b61              LDR      r3,|L1.15784|
003c24  4a61              LDR      r2,|L1.15788|
003c26  4611              MOV      r1,r2
003c28  3114              ADDS     r1,r1,#0x14
003c2a  9000              STR      r0,[sp,#0]
003c2c  a075              ADR      r0,|L1.15876|
003c2e  f7fffffe          BL       send_GSM
;;;244    
;;;245    send_GSM("\n\nAT+CIPQSEND=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c32  4863              LDR      r0,|L1.15808|
003c34  6800              LDR      r0,[r0,#0]  ; tmeout
003c36  4b5c              LDR      r3,|L1.15784|
003c38  4a5c              LDR      r2,|L1.15788|
003c3a  4611              MOV      r1,r2
003c3c  3114              ADDS     r1,r1,#0x14
003c3e  9000              STR      r0,[sp,#0]
003c40  a075              ADR      r0,|L1.15896|
003c42  f7fffffe          BL       send_GSM
;;;246    
;;;247    //delay(10);
;;;248    
;;;249    
;;;250    
;;;251    
;;;252    //delay(10);
;;;253    send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c46  485e              LDR      r0,|L1.15808|
003c48  6800              LDR      r0,[r0,#0]  ; tmeout
003c4a  4b57              LDR      r3,|L1.15784|
003c4c  4a57              LDR      r2,|L1.15788|
003c4e  4611              MOV      r1,r2
003c50  3114              ADDS     r1,r1,#0x14
003c52  9000              STR      r0,[sp,#0]
003c54  a075              ADR      r0,|L1.15916|
003c56  f7fffffe          BL       send_GSM
;;;254    
;;;255    
;;;256    
;;;257    
;;;258    
;;;259    
;;;260    
;;;261    
;;;262    send_GSM("\n\nAT+SD2PCM=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c5a  4859              LDR      r0,|L1.15808|
003c5c  6800              LDR      r0,[r0,#0]  ; tmeout
003c5e  4b52              LDR      r3,|L1.15784|
003c60  4a52              LDR      r2,|L1.15788|
003c62  4611              MOV      r1,r2
003c64  3114              ADDS     r1,r1,#0x14
003c66  9000              STR      r0,[sp,#0]
003c68  a075              ADR      r0,|L1.15936|
003c6a  f7fffffe          BL       send_GSM
;;;263    //delay(10);	
;;;264    
;;;265    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c6e  4854              LDR      r0,|L1.15808|
003c70  6800              LDR      r0,[r0,#0]  ; tmeout
003c72  4b4d              LDR      r3,|L1.15784|
003c74  4a4d              LDR      r2,|L1.15788|
003c76  4611              MOV      r1,r2
003c78  3114              ADDS     r1,r1,#0x14
003c7a  9000              STR      r0,[sp,#0]
003c7c  a051              ADR      r0,|L1.15812|
003c7e  f7fffffe          BL       send_GSM
;;;266    delay(10);	
003c82  200a              MOVS     r0,#0xa
003c84  f7fffffe          BL       delay
;;;267    send_GSM("\n\nAT+FSDRIVE=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c88  484d              LDR      r0,|L1.15808|
003c8a  6800              LDR      r0,[r0,#0]  ; tmeout
003c8c  4b46              LDR      r3,|L1.15784|
003c8e  4a47              LDR      r2,|L1.15788|
003c90  4611              MOV      r1,r2
003c92  3114              ADDS     r1,r1,#0x14
003c94  9000              STR      r0,[sp,#0]
003c96  a06e              ADR      r0,|L1.15952|
003c98  f7fffffe          BL       send_GSM
;;;268    clear();
003c9c  f7fffffe          BL       clear
;;;269    delay(10);	
003ca0  200a              MOVS     r0,#0xa
003ca2  f7fffffe          BL       delay
;;;270    //;	
;;;271    //send_GSM("\n\nAT+FSCREATE=D:\\LOG.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;272    
;;;273    	GPS_COLLECT();
003ca6  f7fffffe          BL       GPS_COLLECT
;;;274      strcat(data,"CH\n");	
003caa  4940              LDR      r1,|L1.15788|
003cac  3930              SUBS     r1,r1,#0x30
003cae  4834              LDR      r0,|L1.15744|
003cb0  f7fffffe          BL       strcat
;;;275    
;;;276    send_GSM("\n\nAT+FSMEM\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003cb4  4842              LDR      r0,|L1.15808|
003cb6  6800              LDR      r0,[r0,#0]  ; tmeout
003cb8  4b3b              LDR      r3,|L1.15784|
003cba  4a3c              LDR      r2,|L1.15788|
003cbc  4611              MOV      r1,r2
003cbe  3114              ADDS     r1,r1,#0x14
003cc0  9000              STR      r0,[sp,#0]
003cc2  a068              ADR      r0,|L1.15972|
003cc4  f7fffffe          BL       send_GSM
;;;277    delay(100);	
003cc8  2064              MOVS     r0,#0x64
003cca  f7fffffe          BL       delay
;;;278    
;;;279    if(strstr(uart_string_gsm,"D:")){
003cce  a169              ADR      r1,|L1.15988|
003cd0  4869              LDR      r0,|L1.15992|
003cd2  f7fffffe          BL       strstr
003cd6  2800              CMP      r0,#0
003cd8  d007              BEQ      |L1.15594|
;;;280    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003cda  4839              LDR      r0,|L1.15808|
003cdc  6800              LDR      r0,[r0,#0]  ; tmeout
003cde  4b32              LDR      r3,|L1.15784|
003ce0  4a32              LDR      r2,|L1.15788|
003ce2  4611              MOV      r1,r2
003ce4  3114              ADDS     r1,r1,#0x14
003ce6  9000              STR      r0,[sp,#0]
003ce8  e0c8              B        |L1.15996|
                  |L1.15594|
003cea  e0e1              B        |L1.16048|
                  |L1.15596|
                          DCD      0x400ff080
                  |L1.15600|
                          DCD      stateCount
                  |L1.15604|
                          DCD      0x4004b080
                  |L1.15608|
                          DCD      gu32PortStatus
                  |L1.15612|
                          DCD      ringflag
                  |L1.15616|
                          DCD      send_SOS
                  |L1.15620|
                          DCD      0x4004c080
                  |L1.15624|
                          DCD      0xe000e000
                  |L1.15628|
                          DCD      0x00009c3f
                  |L1.15632|
                          DCD      overhead
                  |L1.15636|
003d14  73797374          DCB      "systick start value: 0x%x\n\r",0
003d18  69636b20
003d1c  73746172
003d20  74207661
003d24  6c75653a
003d28  20307825
003d2c  780a0d00
                  |L1.15664|
003d30  73797374          DCB      "systick end value: 0x%x\n\r",0
003d34  69636b20
003d38  656e6420
003d3c  76616c75
003d40  653a2030
003d44  7825780a
003d48  0d00    
003d4a  00                DCB      0
003d4b  00                DCB      0
                  |L1.15692|
003d4c  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
003d50  69636b20
003d54  63757272
003d58  656e7420
003d5c  76616c75
003d60  65207265
003d64  6164206f
003d68  76657268
003d6c  6561643a
003d70  20307825
003d74  780a0d00
                  |L1.15736|
                          DCD      0x00001388
                  |L1.15740|
                          DCD      i
                  |L1.15744|
                          DCD      data
                  |L1.15748|
                          DCD      data2
                  |L1.15752|
                          DCD      ||ip||
                  |L1.15756|
                          DCD      port
                  |L1.15760|
                          DCD      int_erval
                  |L1.15764|
                          DCD      0x40048000
                  |L1.15768|
                          DCD      0x40049000
                  |L1.15772|
                          DCD      sleep_flag
                  |L1.15776|
                          DCD      0x4003b000
                  |L1.15780|
                          DCD      0x4006b000
                  |L1.15784|
                          DCD      ||.text||+0xd54
                  |L1.15788|
                          DCD      ||.text||+0x8e8
                  |L1.15792|
003db0  0a0a4154          DCB      "\n\nAT\r\n",0
003db4  0d0a00  
003db7  00                DCB      0
                  |L1.15800|
003db8  43482731          DCB      "CH'1'\n",0
003dbc  270a00  
003dbf  00                DCB      0
                  |L1.15808|
                          DCD      tmeout
                  |L1.15812|
003dc4  0a0a4154          DCB      "\n\nAT&W\r\n",0
003dc8  26570d0a
003dcc  00      
003dcd  00                DCB      0
003dce  00                DCB      0
003dcf  00                DCB      0
                  |L1.15824|
003dd0  0a0a4154          DCB      "\n\nATS0=2\r\n",0
003dd4  53303d32
003dd8  0d0a00  
003ddb  00                DCB      0
                  |L1.15836|
003ddc  0a0a4154          DCB      "\n\nAT&F\r\n",0
003de0  26460d0a
003de4  00      
003de5  00                DCB      0
003de6  00                DCB      0
003de7  00                DCB      0
                  |L1.15848|
003de8  0a0a4154          DCB      "\n\nAT&D\r\n",0
003dec  26440d0a
003df0  00      
003df1  00                DCB      0
003df2  00                DCB      0
003df3  00                DCB      0
                  |L1.15860|
003df4  0a0a4154          DCB      "\n\nAT+IFC=0,0\r\n",0
003df8  2b494643
003dfc  3d302c30
003e00  0d0a00  
003e03  00                DCB      0
                  |L1.15876|
003e04  0a0a4154          DCB      "\n\nAT+CIPQSEND?\r\n",0
003e08  2b434950
003e0c  5153454e
003e10  443f0d0a
003e14  00      
003e15  00                DCB      0
003e16  00                DCB      0
003e17  00                DCB      0
                  |L1.15896|
003e18  0a0a4154          DCB      "\n\nAT+CIPQSEND=0\r\n",0
003e1c  2b434950
003e20  5153454e
003e24  443d300d
003e28  0a00    
003e2a  00                DCB      0
003e2b  00                DCB      0
                  |L1.15916|
003e2c  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
003e30  2b435042
003e34  533d2253
003e38  4d220d0a
003e3c  00      
003e3d  00                DCB      0
003e3e  00                DCB      0
003e3f  00                DCB      0
                  |L1.15936|
003e40  0a0a4154          DCB      "\n\nAT+SD2PCM=0\r\n",0
003e44  2b534432
003e48  50434d3d
003e4c  300d0a00
                  |L1.15952|
003e50  0a0a4154          DCB      "\n\nAT+FSDRIVE=1\r\n",0
003e54  2b465344
003e58  52495645
003e5c  3d310d0a
003e60  00      
003e61  00                DCB      0
003e62  00                DCB      0
003e63  00                DCB      0
                  |L1.15972|
003e64  0a0a4154          DCB      "\n\nAT+FSMEM\r\n",0
003e68  2b46534d
003e6c  454d0d0a
003e70  00      
003e71  00                DCB      0
003e72  00                DCB      0
003e73  00                DCB      0
                  |L1.15988|
003e74  443a00            DCB      "D:",0
003e77  00                DCB      0
                  |L1.15992|
                          DCD      uart_string_gsm
                  |L1.15996|
003e7c  a0eb              ADR      r0,|L1.16940|
003e7e  f7fffffe          BL       send_GSM
;;;281    	
;;;282    memset(at_,0,100);
003e82  2164              MOVS     r1,#0x64
003e84  48f3              LDR      r0,|L1.16980|
003e86  f7fffffe          BL       __aeabi_memclr
;;;283    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003e8a  2202              MOVS     r2,#2
003e8c  a1f2              ADR      r1,|L1.16984|
003e8e  48f1              LDR      r0,|L1.16980|
003e90  f7fffffe          BL       __2sprintf
;;;284    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003e94  200a              MOVS     r0,#0xa
003e96  4bfb              LDR      r3,|L1.17028|
003e98  4afb              LDR      r2,|L1.17032|
003e9a  a1fc              ADR      r1,|L1.17036|
003e9c  9000              STR      r0,[sp,#0]
003e9e  48ed              LDR      r0,|L1.16980|
003ea0  f7fffffe          BL       send_GSM
;;;285    	
;;;286    clear();
003ea4  f7fffffe          BL       clear
;;;287    send_modem("D:");	
003ea8  a0f9              ADR      r0,|L1.17040|
003eaa  f7fffffe          BL       send_modem
003eae  e01f              B        |L1.16112|
                  |L1.16048|
;;;288    	
;;;289    }
;;;290    else{
;;;291    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003eb0  48f8              LDR      r0,|L1.17044|
003eb2  6800              LDR      r0,[r0,#0]  ; tmeout
003eb4  4bf3              LDR      r3,|L1.17028|
003eb6  4af4              LDR      r2,|L1.17032|
003eb8  4611              MOV      r1,r2
003eba  3114              ADDS     r1,r1,#0x14
003ebc  9000              STR      r0,[sp,#0]
003ebe  a0db              ADR      r0,|L1.16940|
003ec0  f7fffffe          BL       send_GSM
;;;292    	
;;;293    memset(at_,0,100);
003ec4  2164              MOVS     r1,#0x64
003ec6  48e3              LDR      r0,|L1.16980|
003ec8  f7fffffe          BL       __aeabi_memclr
;;;294    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003ecc  2202              MOVS     r2,#2
003ece  a1e2              ADR      r1,|L1.16984|
003ed0  48e0              LDR      r0,|L1.16980|
003ed2  f7fffffe          BL       __2sprintf
;;;295    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003ed6  200a              MOVS     r0,#0xa
003ed8  4bea              LDR      r3,|L1.17028|
003eda  4aeb              LDR      r2,|L1.17032|
003edc  a1eb              ADR      r1,|L1.17036|
003ede  9000              STR      r0,[sp,#0]
003ee0  48dc              LDR      r0,|L1.16980|
003ee2  f7fffffe          BL       send_GSM
;;;296    	
;;;297    clear();
003ee6  f7fffffe          BL       clear
;;;298    send_modem("C:");		
003eea  a0eb              ADR      r0,|L1.17048|
003eec  f7fffffe          BL       send_modem
                  |L1.16112|
;;;299    	
;;;300    }	
;;;301    
;;;302    delay(100);
003ef0  2064              MOVS     r0,#0x64
003ef2  f7fffffe          BL       delay
;;;303    
;;;304    //delay(10);
;;;305    
;;;306    send_GSM("\n\nATS0=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003ef6  48e7              LDR      r0,|L1.17044|
003ef8  6800              LDR      r0,[r0,#0]  ; tmeout
003efa  4be2              LDR      r3,|L1.17028|
003efc  4ae2              LDR      r2,|L1.17032|
003efe  4611              MOV      r1,r2
003f00  3114              ADDS     r1,r1,#0x14
003f02  9000              STR      r0,[sp,#0]
003f04  a0e5              ADR      r0,|L1.17052|
003f06  f7fffffe          BL       send_GSM
;;;307    
;;;308    
;;;309    send_GSM("\n\nAT+CSCLK=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f0a  48e2              LDR      r0,|L1.17044|
003f0c  6800              LDR      r0,[r0,#0]  ; tmeout
003f0e  4bdd              LDR      r3,|L1.17028|
003f10  4add              LDR      r2,|L1.17032|
003f12  4611              MOV      r1,r2
003f14  3114              ADDS     r1,r1,#0x14
003f16  9000              STR      r0,[sp,#0]
003f18  a0e3              ADR      r0,|L1.17064|
003f1a  f7fffffe          BL       send_GSM
;;;310    
;;;311    
;;;312    send_GSM("\r\n\r\nAT+CMGD=1,4\r\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003f1e  48dd              LDR      r0,|L1.17044|
003f20  6800              LDR      r0,[r0,#0]  ; tmeout
003f22  4bd8              LDR      r3,|L1.17028|
003f24  4ad8              LDR      r2,|L1.17032|
003f26  4611              MOV      r1,r2
003f28  3114              ADDS     r1,r1,#0x14
003f2a  9000              STR      r0,[sp,#0]
003f2c  a0e2              ADR      r0,|L1.17080|
003f2e  f7fffffe          BL       send_GSM
;;;313    
;;;314    
;;;315    //send_GSM("\n\nAT+CPBW=5,\"0\",129,\"OWNER5\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;316    
;;;317    
;;;318    //send_GSM("\n\nAT+CPBW=6,\"0\",129,\"OWNER6\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;319    
;;;320    ignread();
003f32  f7fffffe          BL       ignread
;;;321    readapn();
003f36  f7fffffe          BL       readapn
;;;322    readcursor();
003f3a  f7fffffe          BL       readcursor
;;;323    
;;;324    read_interval();
003f3e  f7fffffe          BL       read_interval
;;;325    send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f42  48d4              LDR      r0,|L1.17044|
003f44  6800              LDR      r0,[r0,#0]  ; tmeout
003f46  4bcf              LDR      r3,|L1.17028|
003f48  4acf              LDR      r2,|L1.17032|
003f4a  4611              MOV      r1,r2
003f4c  3114              ADDS     r1,r1,#0x14
003f4e  9000              STR      r0,[sp,#0]
003f50  a0df              ADR      r0,|L1.17104|
003f52  f7fffffe          BL       send_GSM
;;;326    //delay(10);	
;;;327    
;;;328    send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003f56  48cf              LDR      r0,|L1.17044|
003f58  6800              LDR      r0,[r0,#0]  ; tmeout
003f5a  4bca              LDR      r3,|L1.17028|
003f5c  4aca              LDR      r2,|L1.17032|
003f5e  4611              MOV      r1,r2
003f60  3114              ADDS     r1,r1,#0x14
003f62  9000              STR      r0,[sp,#0]
003f64  a0de              ADR      r0,|L1.17120|
003f66  f7fffffe          BL       send_GSM
;;;329    							memset(at_,0,100);
003f6a  2164              MOVS     r1,#0x64
003f6c  48b9              LDR      r0,|L1.16980|
003f6e  f7fffffe          BL       __aeabi_memclr
;;;330    							memset(num_o,0,15);
003f72  210f              MOVS     r1,#0xf
003f74  48de              LDR      r0,|L1.17136|
003f76  f7fffffe          BL       __aeabi_memclr
;;;331    							parse_g(uart_string_gsm, 1, 2, '\"', '\"', num_o);
003f7a  48dd              LDR      r0,|L1.17136|
003f7c  2122              MOVS     r1,#0x22
003f7e  460b              MOV      r3,r1
003f80  2202              MOVS     r2,#2
003f82  9100              STR      r1,[sp,#0]
003f84  9001              STR      r0,[sp,#4]
003f86  2101              MOVS     r1,#1
003f88  48da              LDR      r0,|L1.17140|
003f8a  f7fffffe          BL       parse_g
;;;332    							sprintf(at_, "\r\nAT+CSCA=\"%s\"\r\n", num_o);
003f8e  4ad8              LDR      r2,|L1.17136|
003f90  a1d9              ADR      r1,|L1.17144|
003f92  48b0              LDR      r0,|L1.16980|
003f94  f7fffffe          BL       __2sprintf
;;;333    							send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f98  48be              LDR      r0,|L1.17044|
003f9a  6800              LDR      r0,[r0,#0]  ; tmeout
003f9c  4bb9              LDR      r3,|L1.17028|
003f9e  4aba              LDR      r2,|L1.17032|
003fa0  4611              MOV      r1,r2
003fa2  3114              ADDS     r1,r1,#0x14
003fa4  9000              STR      r0,[sp,#0]
003fa6  48ab              LDR      r0,|L1.16980|
003fa8  f7fffffe          BL       send_GSM
;;;334    
;;;335    
;;;336    
;;;337    read_ip_port();
003fac  f7fffffe          BL       read_ip_port
;;;338    		memset(at_,0,100);
003fb0  2164              MOVS     r1,#0x64
003fb2  48a8              LDR      r0,|L1.16980|
003fb4  f7fffffe          BL       __aeabi_memclr
;;;339    		memset(drive,0,5);
003fb8  2105              MOVS     r1,#5
003fba  48d4              LDR      r0,|L1.17164|
003fbc  f7fffffe          BL       __aeabi_memclr4
;;;340    		sprintf(at_, "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n");		
003fc0  a1d3              ADR      r1,|L1.17168|
003fc2  48a4              LDR      r0,|L1.16980|
003fc4  f7fffffe          BL       __2sprintf
;;;341    		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
003fc8  200a              MOVS     r0,#0xa
003fca  4bae              LDR      r3,|L1.17028|
003fcc  4aae              LDR      r2,|L1.17032|
003fce  a1db              ADR      r1,|L1.17212|
003fd0  9000              STR      r0,[sp,#0]
003fd2  48a0              LDR      r0,|L1.16980|
003fd4  f7fffffe          BL       send_GSM
;;;342    		parse_g(uart_string_gsm, 1,3, '\n', '\r',drive);
003fd8  48cc              LDR      r0,|L1.17164|
003fda  210d              MOVS     r1,#0xd
003fdc  230a              MOVS     r3,#0xa
003fde  2203              MOVS     r2,#3
003fe0  9100              STR      r1,[sp,#0]
003fe2  9001              STR      r0,[sp,#4]
003fe4  2101              MOVS     r1,#1
003fe6  48c3              LDR      r0,|L1.17140|
003fe8  f7fffffe          BL       parse_g
;;;343    	
;;;344    
;;;345    msg_sim800(); 
003fec  f7fffffe          BL       msg_sim800
;;;346    
;;;347    //setting interval 4
;;;348    
;;;349    temp=int_erval;				
003ff0  48d3              LDR      r0,|L1.17216|
003ff2  6800              LDR      r0,[r0,#0]  ; int_erval
003ff4  49d3              LDR      r1,|L1.17220|
003ff6  6008              STR      r0,[r1,#0]  ; temp
;;;350    int_erval=4;
003ff8  2004              MOVS     r0,#4
003ffa  49d1              LDR      r1,|L1.17216|
003ffc  6008              STR      r0,[r1,#0]  ; int_erval
;;;351    
;;;352    
;;;353    
;;;354    								//GPS_COLLECT();
;;;355    								send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",5);	
003ffe  2005              MOVS     r0,#5
004000  4ba0              LDR      r3,|L1.17028|
004002  4aa1              LDR      r2,|L1.17032|
004004  a1cd              ADR      r1,|L1.17212|
004006  9000              STR      r0,[sp,#0]
004008  4618              MOV      r0,r3
00400a  300c              ADDS     r0,r0,#0xc
00400c  f7fffffe          BL       send_GSM
;;;356    								//delay(20);		
;;;357    								GPS_COLLECT();
004010  f7fffffe          BL       GPS_COLLECT
;;;358    								strcat(data,"CH\n");	
004014  499c              LDR      r1,|L1.17032|
004016  3930              SUBS     r1,r1,#0x30
004018  48cb              LDR      r0,|L1.17224|
00401a  f7fffffe          BL       strcat
;;;359    
;;;360    
;;;361    msg_sim800(); 
00401e  f7fffffe          BL       msg_sim800
;;;362    
;;;363    	memset(at_,0,100);
004022  2164              MOVS     r1,#0x64
004024  488b              LDR      r0,|L1.16980|
004026  f7fffffe          BL       __aeabi_memclr
;;;364    		sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
00402a  4ac8              LDR      r2,|L1.17228|
00402c  4995              LDR      r1,|L1.17028|
00402e  3120              ADDS     r1,r1,#0x20
004030  4888              LDR      r0,|L1.16980|
004032  f7fffffe          BL       __2sprintf
;;;365    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
004036  4897              LDR      r0,|L1.17044|
004038  6800              LDR      r0,[r0,#0]  ; tmeout
00403a  4b92              LDR      r3,|L1.17028|
00403c  4a92              LDR      r2,|L1.17032|
00403e  a1bf              ADR      r1,|L1.17212|
004040  9000              STR      r0,[sp,#0]
004042  4884              LDR      r0,|L1.16980|
004044  f7fffffe          BL       send_GSM
;;;366    								//delay(20);
;;;367    			//					GPS_COLLECT();
;;;368    
;;;369    msg_sim800(); 
004048  f7fffffe          BL       msg_sim800
;;;370    
;;;371    	
;;;372    								send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
00404c  2005              MOVS     r0,#5
00404e  4b8e              LDR      r3,|L1.17032|
004050  3b5c              SUBS     r3,r3,#0x5c
004052  4a8d              LDR      r2,|L1.17032|
004054  a1b9              ADR      r1,|L1.17212|
004056  9000              STR      r0,[sp,#0]
004058  488a              LDR      r0,|L1.17028|
00405a  3038              ADDS     r0,r0,#0x38
00405c  f7fffffe          BL       send_GSM
;;;373    								//delay(20);
;;;374    								GPS_COLLECT();
004060  f7fffffe          BL       GPS_COLLECT
;;;375    								strcat(data,"CH\n");	
004064  4988              LDR      r1,|L1.17032|
004066  3930              SUBS     r1,r1,#0x30
004068  48b7              LDR      r0,|L1.17224|
00406a  f7fffffe          BL       strcat
;;;376    
;;;377    
;;;378    
;;;379    								GPS_COLLECT();
00406e  f7fffffe          BL       GPS_COLLECT
;;;380    								strcat(data,"CH\n");	
004072  4985              LDR      r1,|L1.17032|
004074  3930              SUBS     r1,r1,#0x30
004076  48b4              LDR      r0,|L1.17224|
004078  f7fffffe          BL       strcat
;;;381    
;;;382    msg_sim800(); 
00407c  f7fffffe          BL       msg_sim800
;;;383    
;;;384    								
;;;385    								clear();send_modem("\nAT+CIFSR\r\r\n");clear();
004080  f7fffffe          BL       clear
004084  487f              LDR      r0,|L1.17028|
004086  3048              ADDS     r0,r0,#0x48
004088  f7fffffe          BL       send_modem
00408c  f7fffffe          BL       clear
;;;386    								delay(20);
004090  2014              MOVS     r0,#0x14
004092  f7fffffe          BL       delay
;;;387    	
;;;388    
;;;389    msg_sim800(); 
004096  f7fffffe          BL       msg_sim800
;;;390    
;;;391    		
;;;392    								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
00409a  4bad              LDR      r3,|L1.17232|
00409c  4aad              LDR      r2,|L1.17236|
00409e  4979              LDR      r1,|L1.17028|
0040a0  3160              ADDS     r1,r1,#0x60
0040a2  486c              LDR      r0,|L1.16980|
0040a4  f7fffffe          BL       __2sprintf
;;;393    								send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
0040a8  487a              LDR      r0,|L1.17044|
0040aa  6800              LDR      r0,[r0,#0]  ; tmeout
0040ac  4b76              LDR      r3,|L1.17032|
0040ae  3b78              SUBS     r3,r3,#0x78
0040b0  4a75              LDR      r2,|L1.17032|
0040b2  4974              LDR      r1,|L1.17028|
0040b4  3180              ADDS     r1,r1,#0x80
0040b6  9000              STR      r0,[sp,#0]
0040b8  4866              LDR      r0,|L1.16980|
0040ba  f7fffffe          BL       send_GSM
;;;394    								clear();
0040be  f7fffffe          BL       clear
;;;395    
;;;396    								GPS_COLLECT();
0040c2  f7fffffe          BL       GPS_COLLECT
;;;397    								strcat(data,"CH\n");	
0040c6  4970              LDR      r1,|L1.17032|
0040c8  3930              SUBS     r1,r1,#0x30
0040ca  489f              LDR      r0,|L1.17224|
0040cc  f7fffffe          BL       strcat
;;;398    
;;;399    		int_erval=temp;
0040d0  489c              LDR      r0,|L1.17220|
0040d2  6800              LDR      r0,[r0,#0]  ; temp
0040d4  499a              LDR      r1,|L1.17216|
0040d6  6008              STR      r0,[r1,#0]  ; int_erval
;;;400    //resetting it to its value
;;;401    
;;;402    								send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
0040d8  486e              LDR      r0,|L1.17044|
0040da  6800              LDR      r0,[r0,#0]  ; tmeout
0040dc  4b69              LDR      r3,|L1.17028|
0040de  3388              ADDS     r3,r3,#0x88
0040e0  4a69              LDR      r2,|L1.17032|
0040e2  3a78              SUBS     r2,r2,#0x78
0040e4  a169              ADR      r1,|L1.17036|
0040e6  9000              STR      r0,[sp,#0]
0040e8  4618              MOV      r0,r3
0040ea  3010              ADDS     r0,r0,#0x10
0040ec  f7fffffe          BL       send_GSM
;;;403    
;;;404    
;;;405    memset(stcond1,0,strlen(stcond1));	
0040f0  4899              LDR      r0,|L1.17240|
0040f2  6800              LDR      r0,[r0,#0]  ; stcond1
0040f4  f7fffffe          BL       strlen
0040f8  4601              MOV      r1,r0
0040fa  9001              STR      r0,[sp,#4]
0040fc  4896              LDR      r0,|L1.17240|
0040fe  6800              LDR      r0,[r0,#0]  ; stcond1
004100  f7fffffe          BL       __aeabi_memclr
;;;406    memset(con1d,0,strlen(con1d));	
004104  4895              LDR      r0,|L1.17244|
004106  6800              LDR      r0,[r0,#0]  ; con1d
004108  f7fffffe          BL       strlen
00410c  4601              MOV      r1,r0
00410e  9001              STR      r0,[sp,#4]
004110  4892              LDR      r0,|L1.17244|
004112  6800              LDR      r0,[r0,#0]  ; con1d
004114  f7fffffe          BL       __aeabi_memclr
;;;407    	
;;;408    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;409    						
;;;410    								cond=mystrstr(uart_string_gsm,'>');
004118  213e              MOVS     r1,#0x3e
00411a  4876              LDR      r0,|L1.17140|
00411c  f7fffffe          BL       mystrstr
004120  498f              LDR      r1,|L1.17248|
004122  7008              STRB     r0,[r1,#0]
;;;411    								if(cond)	
004124  4608              MOV      r0,r1
004126  7800              LDRB     r0,[r0,#0]  ; cond
004128  2800              CMP      r0,#0
00412a  d077              BEQ      |L1.16924|
;;;412    								{
;;;413    									
;;;414    									clear();
00412c  f7fffffe          BL       clear
;;;415    									memset(uart_string_gsm,0,5000);
004130  498c              LDR      r1,|L1.17252|
004132  4870              LDR      r0,|L1.17140|
004134  f7fffffe          BL       __aeabi_memclr
;;;416    									strcat(data,"\n");
004138  a168              ADR      r1,|L1.17116|
00413a  4883              LDR      r0,|L1.17224|
00413c  f7fffffe          BL       strcat
;;;417    									len=strlen(data);
004140  4881              LDR      r0,|L1.17224|
004142  f7fffffe          BL       strlen
004146  4988              LDR      r1,|L1.17256|
004148  6008              STR      r0,[r1,#0]  ; len
;;;418    									tout=0;
00414a  2000              MOVS     r0,#0
00414c  4987              LDR      r1,|L1.17260|
00414e  6008              STR      r0,[r1,#0]  ; tout
;;;419    									k2=0;
004150  4987              LDR      r1,|L1.17264|
004152  6008              STR      r0,[r1,#0]  ; k2
;;;420    									for(k=0;k<len;k++)
004154  4987              LDR      r1,|L1.17268|
004156  6008              STR      r0,[r1,#0]  ; k
004158  e00d              B        |L1.16758|
                  |L1.16730|
;;;421    									{
;;;422    										uart_putchar(UART1_BASE_PTR, data[k]);
00415a  487b              LDR      r0,|L1.17224|
00415c  4985              LDR      r1,|L1.17268|
00415e  6809              LDR      r1,[r1,#0]  ; k
004160  5c40              LDRB     r0,[r0,r1]
004162  4601              MOV      r1,r0
004164  9001              STR      r0,[sp,#4]
004166  4884              LDR      r0,|L1.17272|
004168  f7fffffe          BL       uart_putchar
00416c  4881              LDR      r0,|L1.17268|
00416e  6800              LDR      r0,[r0,#0]            ;420  ; k
004170  1c40              ADDS     r0,r0,#1              ;420
004172  4980              LDR      r1,|L1.17268|
004174  6008              STR      r0,[r1,#0]            ;420  ; k
                  |L1.16758|
004176  487f              LDR      r0,|L1.17268|
004178  6800              LDR      r0,[r0,#0]            ;420  ; k
00417a  497b              LDR      r1,|L1.17256|
00417c  6809              LDR      r1,[r1,#0]            ;420  ; len
00417e  4288              CMP      r0,r1                 ;420
004180  dbeb              BLT      |L1.16730|
;;;423    									}uart_putchar(UART1_BASE_PTR, 0x1A);
004182  211a              MOVS     r1,#0x1a
004184  487c              LDR      r0,|L1.17272|
004186  f7fffffe          BL       uart_putchar
;;;424    									do
00418a  bf00              NOP      
                  |L1.16780|
;;;425    																{stcond1=strstr(uart_string_gsm,"SEND OK");
00418c  497b              LDR      r1,|L1.17276|
00418e  4859              LDR      r0,|L1.17140|
004190  f7fffffe          BL       strstr
004194  4970              LDR      r1,|L1.17240|
004196  6008              STR      r0,[r1,#0]  ; stcond1
;;;426    																	stcond2=strstr(uart_string_gsm, "ERROR");
004198  493b              LDR      r1,|L1.17032|
00419a  3978              SUBS     r1,r1,#0x78
00419c  4855              LDR      r0,|L1.17140|
00419e  f7fffffe          BL       strstr
0041a2  4977              LDR      r1,|L1.17280|
0041a4  6008              STR      r0,[r1,#0]  ; stcond2
;;;427    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0041a6  4937              LDR      r1,|L1.17028|
0041a8  3190              ADDS     r1,r1,#0x90
0041aa  4852              LDR      r0,|L1.17140|
0041ac  f7fffffe          BL       strstr
0041b0  4974              LDR      r1,|L1.17284|
0041b2  6008              STR      r0,[r1,#0]  ; stcond3
;;;428    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0041b4  4934              LDR      r1,|L1.17032|
0041b6  395c              SUBS     r1,r1,#0x5c
0041b8  484e              LDR      r0,|L1.17140|
0041ba  f7fffffe          BL       strstr
0041be  4972              LDR      r1,|L1.17288|
0041c0  6008              STR      r0,[r1,#0]  ; stcond4
;;;429    																	
;;;430    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0041c2  486f              LDR      r0,|L1.17280|
0041c4  6800              LDR      r0,[r0,#0]  ; stcond2
0041c6  2800              CMP      r0,#0
0041c8  d10f              BNE      |L1.16874|
0041ca  486e              LDR      r0,|L1.17284|
0041cc  6800              LDR      r0,[r0,#0]  ; stcond3
0041ce  2800              CMP      r0,#0
0041d0  d10b              BNE      |L1.16874|
0041d2  4608              MOV      r0,r1
0041d4  6800              LDR      r0,[r0,#0]  ; stcond4
0041d6  2800              CMP      r0,#0
0041d8  d107              BNE      |L1.16874|
0041da  485f              LDR      r0,|L1.17240|
0041dc  6800              LDR      r0,[r0,#0]  ; stcond1
0041de  2800              CMP      r0,#0
0041e0  d103              BNE      |L1.16874|
0041e2  4862              LDR      r0,|L1.17260|
0041e4  6800              LDR      r0,[r0,#0]  ; tout
0041e6  2808              CMP      r0,#8
0041e8  ddd0              BLE      |L1.16780|
                  |L1.16874|
;;;431    																//delay(10);clear();
;;;432    														uart_putchar(UART1_BASE_PTR,0x1A);
0041ea  211a              MOVS     r1,#0x1a
0041ec  4862              LDR      r0,|L1.17272|
0041ee  f7fffffe          BL       uart_putchar
;;;433    												//delay(10);
;;;434    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0041f2  211a              MOVS     r1,#0x1a
0041f4  4860              LDR      r0,|L1.17272|
0041f6  f7fffffe          BL       uart_putchar
0041fa  211a              MOVS     r1,#0x1a
0041fc  485e              LDR      r0,|L1.17272|
0041fe  f7fffffe          BL       uart_putchar
004202  211a              MOVS     r1,#0x1a
004204  485c              LDR      r0,|L1.17272|
004206  f7fffffe          BL       uart_putchar
;;;435    						
;;;436    									
;;;437    delay(50);
00420a  2032              MOVS     r0,#0x32
00420c  f7fffffe          BL       delay
;;;438    stcond1=strstr(uart_string_gsm,"SEND OK");								
004210  495a              LDR      r1,|L1.17276|
004212  4838              LDR      r0,|L1.17140|
004214  f7fffffe          BL       strstr
004218  494f              LDR      r1,|L1.17240|
00421a  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.16924|
;;;439    								}
;;;440    //else{
;;;441    //log_it();
;;;442    //}
;;;443    
;;;444    
;;;445    if(!(stcond1) == 1 )// if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
00421c  484e              LDR      r0,|L1.17240|
00421e  6800              LDR      r0,[r0,#0]  ; stcond1
004220  2800              CMP      r0,#0
004222  d101              BNE      |L1.16936|
004224  2001              MOVS     r0,#1
004226  e0b2              B        |L1.17294|
                  |L1.16936|
004228  e0b0              B        |L1.17292|
00422a  0000              DCW      0x0000
                  |L1.16940|
00422c  0a0a4154          DCB      "\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n",0
004230  2b465343
004234  52454154
004238  453d433a
00423c  5c4c4f47
004240  47494e47
004244  5f445249
004248  56452e54
00424c  58540d0a
004250  00      
004251  00                DCB      0
004252  00                DCB      0
004253  00                DCB      0
                  |L1.16980|
                          DCD      at_
                  |L1.16984|
004258  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",0
00425c  2b465357
004260  52495445
004264  3d433a5c
004268  4c4f4747
00426c  494e475f
004270  44524956
004274  452e5458
004278  542c302c
00427c  25642c31
004280  300d0a00
                  |L1.17028|
                          DCD      ||.text||+0xd54
                  |L1.17032|
                          DCD      ||.text||+0x8e8
                  |L1.17036|
00428c  3e00              DCB      ">",0
00428e  00                DCB      0
00428f  00                DCB      0
                  |L1.17040|
004290  443a00            DCB      "D:",0
004293  00                DCB      0
                  |L1.17044|
                          DCD      tmeout
                  |L1.17048|
004298  433a00            DCB      "C:",0
00429b  00                DCB      0
                  |L1.17052|
00429c  0a0a4154          DCB      "\n\nATS0=1\r\n",0
0042a0  53303d31
0042a4  0d0a00  
0042a7  00                DCB      0
                  |L1.17064|
0042a8  0a0a4154          DCB      "\n\nAT+CSCLK=1\r\n",0
0042ac  2b435343
0042b0  4c4b3d31
0042b4  0d0a00  
0042b7  00                DCB      0
                  |L1.17080|
0042b8  0d0a0d0a          DCB      "\r\n\r\nAT+CMGD=1,4\r\n\n\n\n",0
0042bc  41542b43
0042c0  4d47443d
0042c4  312c340d
0042c8  0a0a0a0a
0042cc  00      
0042cd  00                DCB      0
0042ce  00                DCB      0
0042cf  00                DCB      0
                  |L1.17104|
0042d0  0a0a4154          DCB      "\n\nAT+CMGF=1\n"
0042d4  2b434d47
0042d8  463d310a
                  |L1.17116|
0042dc  0a00              DCB      "\n",0
0042de  00                DCB      0
0042df  00                DCB      0
                  |L1.17120|
0042e0  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
0042e4  2b435343
0042e8  413f0d0a
0042ec  00      
0042ed  00                DCB      0
0042ee  00                DCB      0
0042ef  00                DCB      0
                  |L1.17136|
                          DCD      num_o
                  |L1.17140|
                          DCD      uart_string_gsm
                  |L1.17144|
0042f8  0d0a4154          DCB      "\r\nAT+CSCA=""%s""\r\n",0
0042fc  2b435343
004300  413d2225
004304  73220d0a
004308  00      
004309  00                DCB      0
00430a  00                DCB      0
00430b  00                DCB      0
                  |L1.17164|
                          DCD      drive
                  |L1.17168|
004310  0a41542b          DCB      "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n",0
004314  46535245
004318  41443d43
00431c  3a5c4c4f
004320  4747494e
004324  475f4452
004328  4956452e
00432c  5458542c
004330  302c3130
004334  302c310d
004338  0a00    
00433a  00                DCB      0
00433b  00                DCB      0
                  |L1.17212|
00433c  4f4b00            DCB      "OK",0
00433f  00                DCB      0
                  |L1.17216|
                          DCD      int_erval
                  |L1.17220|
                          DCD      temp
                  |L1.17224|
                          DCD      data
                  |L1.17228|
                          DCD      apn
                  |L1.17232|
                          DCD      port
                  |L1.17236|
                          DCD      ||ip||
                  |L1.17240|
                          DCD      stcond1
                  |L1.17244|
                          DCD      con1d
                  |L1.17248|
                          DCD      cond
                  |L1.17252|
                          DCD      0x00001388
                  |L1.17256|
                          DCD      len
                  |L1.17260|
                          DCD      tout
                  |L1.17264|
                          DCD      ||k2||
                  |L1.17268|
                          DCD      k
                  |L1.17272|
                          DCD      0x4006b000
                  |L1.17276|
                          DCD      ||.text||+0x474
                  |L1.17280|
                          DCD      stcond2
                  |L1.17284|
                          DCD      stcond3
                  |L1.17288|
                          DCD      stcond4
                  |L1.17292|
00438c  2000              MOVS     r0,#0
                  |L1.17294|
00438e  2801              CMP      r0,#1
004390  d17e              BNE      |L1.17552|
;;;446    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004392  211a              MOVS     r1,#0x1a
004394  48fe              LDR      r0,|L1.18320|
004396  f7fffffe          BL       uart_putchar
00439a  f7fffffe          BL       clear
00439e  200a              MOVS     r0,#0xa
0043a0  f7fffffe          BL       delay
;;;447    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0043a4  211a              MOVS     r1,#0x1a
0043a6  48fa              LDR      r0,|L1.18320|
0043a8  f7fffffe          BL       uart_putchar
0043ac  f7fffffe          BL       clear
0043b0  200a              MOVS     r0,#0xa
0043b2  f7fffffe          BL       delay
;;;448    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0043b6  211a              MOVS     r1,#0x1a
0043b8  48f5              LDR      r0,|L1.18320|
0043ba  f7fffffe          BL       uart_putchar
0043be  f7fffffe          BL       clear
0043c2  200a              MOVS     r0,#0xa
0043c4  f7fffffe          BL       delay
;;;449    
;;;450    									delay(100);
0043c8  2064              MOVS     r0,#0x64
0043ca  f7fffffe          BL       delay
;;;451    									clear();//memset(uart_string_gsm,0,5000);
0043ce  f7fffffe          BL       clear
;;;452    
;;;453    									memset(at_,0,100);
0043d2  2164              MOVS     r1,#0x64
0043d4  48ef              LDR      r0,|L1.18324|
0043d6  f7fffffe          BL       __aeabi_memclr
;;;454    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0043da  48ef              LDR      r0,|L1.18328|
0043dc  f7fffffe          BL       strlen
0043e0  1c40              ADDS     r0,r0,#1
0043e2  4603              MOV      r3,r0
0043e4  4aed              LDR      r2,|L1.18332|
0043e6  49ee              LDR      r1,|L1.18336|
0043e8  9001              STR      r0,[sp,#4]
0043ea  48ea              LDR      r0,|L1.18324|
0043ec  f7fffffe          BL       __2sprintf
;;;455    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0043f0  2005              MOVS     r0,#5
0043f2  4beb              LDR      r3,|L1.18336|
0043f4  3b54              SUBS     r3,r3,#0x54
0043f6  461a              MOV      r2,r3
0043f8  3278              ADDS     r2,r2,#0x78
0043fa  a1ea              ADR      r1,|L1.18340|
0043fc  9000              STR      r0,[sp,#0]
0043fe  48e5              LDR      r0,|L1.18324|
004400  f7fffffe          BL       send_SD
;;;456    if(strstr(uart_string_gsm,"ERROR")){
004404  49e6              LDR      r1,|L1.18336|
004406  3954              SUBS     r1,r1,#0x54
004408  48e7              LDR      r0,|L1.18344|
00440a  f7fffffe          BL       strstr
00440e  2800              CMP      r0,#0
004410  d004              BEQ      |L1.17436|
;;;457    	drive[0]='C';drive[1]=':';
004412  2043              MOVS     r0,#0x43
004414  49e1              LDR      r1,|L1.18332|
004416  7008              STRB     r0,[r1,#0]
004418  203a              MOVS     r0,#0x3a
00441a  7048              STRB     r0,[r1,#1]
                  |L1.17436|
;;;458    }	
;;;459    									clear();	
00441c  f7fffffe          BL       clear
;;;460    									k2=0;									//string array counter for uart 1
004420  2000              MOVS     r0,#0
004422  49e2              LDR      r1,|L1.18348|
004424  6008              STR      r0,[r1,#0]  ; k2
;;;461    									tout=0;	
004426  49e2              LDR      r1,|L1.18352|
004428  6008              STR      r0,[r1,#0]  ; tout
;;;462    									for(k=0;k<strlen(data);k++)
00442a  49e2              LDR      r1,|L1.18356|
00442c  6008              STR      r0,[r1,#0]  ; k
00442e  e00d              B        |L1.17484|
                  |L1.17456|
;;;463    									{
;;;464    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004430  48d9              LDR      r0,|L1.18328|
004432  49e0              LDR      r1,|L1.18356|
004434  6809              LDR      r1,[r1,#0]  ; k
004436  5c40              LDRB     r0,[r0,r1]
004438  4601              MOV      r1,r0
00443a  9001              STR      r0,[sp,#4]
00443c  48d4              LDR      r0,|L1.18320|
00443e  f7fffffe          BL       uart_putchar
004442  48dc              LDR      r0,|L1.18356|
004444  6800              LDR      r0,[r0,#0]            ;462  ; k
004446  1c40              ADDS     r0,r0,#1              ;462
004448  49da              LDR      r1,|L1.18356|
00444a  6008              STR      r0,[r1,#0]            ;462  ; k
                  |L1.17484|
00444c  48d2              LDR      r0,|L1.18328|
00444e  f7fffffe          BL       strlen
004452  49d8              LDR      r1,|L1.18356|
004454  6809              LDR      r1,[r1,#0]            ;462  ; k
004456  4288              CMP      r0,r1                 ;462
004458  d8ea              BHI      |L1.17456|
;;;465    									}	
;;;466    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00445a  210a              MOVS     r1,#0xa
00445c  48cc              LDR      r0,|L1.18320|
00445e  f7fffffe          BL       uart_putchar
004462  210a              MOVS     r1,#0xa
004464  48ca              LDR      r0,|L1.18320|
004466  f7fffffe          BL       uart_putchar
00446a  210a              MOVS     r1,#0xa
00446c  48c8              LDR      r0,|L1.18320|
00446e  f7fffffe          BL       uart_putchar
004472  210a              MOVS     r1,#0xa
004474  48c6              LDR      r0,|L1.18320|
004476  f7fffffe          BL       uart_putchar
00447a  210a              MOVS     r1,#0xa
00447c  48c4              LDR      r0,|L1.18320|
00447e  f7fffffe          BL       uart_putchar
004482  210a              MOVS     r1,#0xa
004484  48c2              LDR      r0,|L1.18320|
004486  f7fffffe          BL       uart_putchar
00448a  210a              MOVS     r1,#0xa
00448c  48c0              LDR      r0,|L1.18320|
00448e  e000              B        |L1.17554|
                  |L1.17552|
004490  e2fc              B        |L1.19084|
                  |L1.17554|
004492  f7fffffe          BL       uart_putchar
004496  210a              MOVS     r1,#0xa
004498  48bd              LDR      r0,|L1.18320|
00449a  f7fffffe          BL       uart_putchar
00449e  210a              MOVS     r1,#0xa
0044a0  48bb              LDR      r0,|L1.18320|
0044a2  f7fffffe          BL       uart_putchar
0044a6  210a              MOVS     r1,#0xa
0044a8  48b9              LDR      r0,|L1.18320|
0044aa  f7fffffe          BL       uart_putchar
0044ae  210a              MOVS     r1,#0xa
0044b0  48b7              LDR      r0,|L1.18320|
0044b2  f7fffffe          BL       uart_putchar
0044b6  210a              MOVS     r1,#0xa
0044b8  48b5              LDR      r0,|L1.18320|
0044ba  f7fffffe          BL       uart_putchar
0044be  210a              MOVS     r1,#0xa
0044c0  48b3              LDR      r0,|L1.18320|
0044c2  f7fffffe          BL       uart_putchar
0044c6  210a              MOVS     r1,#0xa
0044c8  48b1              LDR      r0,|L1.18320|
0044ca  f7fffffe          BL       uart_putchar
0044ce  210a              MOVS     r1,#0xa
0044d0  48af              LDR      r0,|L1.18320|
0044d2  f7fffffe          BL       uart_putchar
0044d6  210a              MOVS     r1,#0xa
0044d8  48ad              LDR      r0,|L1.18320|
0044da  f7fffffe          BL       uart_putchar
0044de  210a              MOVS     r1,#0xa
0044e0  48ab              LDR      r0,|L1.18320|
0044e2  f7fffffe          BL       uart_putchar
0044e6  210a              MOVS     r1,#0xa
0044e8  48a9              LDR      r0,|L1.18320|
0044ea  f7fffffe          BL       uart_putchar
0044ee  210a              MOVS     r1,#0xa
0044f0  48a7              LDR      r0,|L1.18320|
0044f2  f7fffffe          BL       uart_putchar
0044f6  210a              MOVS     r1,#0xa
0044f8  48a5              LDR      r0,|L1.18320|
0044fa  f7fffffe          BL       uart_putchar
0044fe  210a              MOVS     r1,#0xa
004500  48a3              LDR      r0,|L1.18320|
004502  f7fffffe          BL       uart_putchar
004506  210a              MOVS     r1,#0xa
004508  48a1              LDR      r0,|L1.18320|
00450a  f7fffffe          BL       uart_putchar
00450e  210a              MOVS     r1,#0xa
004510  489f              LDR      r0,|L1.18320|
004512  f7fffffe          BL       uart_putchar
004516  210a              MOVS     r1,#0xa
004518  489d              LDR      r0,|L1.18320|
00451a  f7fffffe          BL       uart_putchar
00451e  210a              MOVS     r1,#0xa
004520  489b              LDR      r0,|L1.18320|
004522  f7fffffe          BL       uart_putchar
004526  210a              MOVS     r1,#0xa
004528  4899              LDR      r0,|L1.18320|
00452a  f7fffffe          BL       uart_putchar
00452e  210a              MOVS     r1,#0xa
004530  4897              LDR      r0,|L1.18320|
004532  f7fffffe          BL       uart_putchar
004536  210a              MOVS     r1,#0xa
004538  4895              LDR      r0,|L1.18320|
00453a  f7fffffe          BL       uart_putchar
00453e  210a              MOVS     r1,#0xa
004540  4893              LDR      r0,|L1.18320|
004542  f7fffffe          BL       uart_putchar
004546  210a              MOVS     r1,#0xa
004548  4891              LDR      r0,|L1.18320|
00454a  f7fffffe          BL       uart_putchar
00454e  210a              MOVS     r1,#0xa
004550  488f              LDR      r0,|L1.18320|
004552  f7fffffe          BL       uart_putchar
004556  210a              MOVS     r1,#0xa
004558  488d              LDR      r0,|L1.18320|
00455a  f7fffffe          BL       uart_putchar
00455e  210a              MOVS     r1,#0xa
004560  488b              LDR      r0,|L1.18320|
004562  f7fffffe          BL       uart_putchar
004566  210a              MOVS     r1,#0xa
004568  4889              LDR      r0,|L1.18320|
00456a  f7fffffe          BL       uart_putchar
00456e  210a              MOVS     r1,#0xa
004570  4887              LDR      r0,|L1.18320|
004572  f7fffffe          BL       uart_putchar
004576  210a              MOVS     r1,#0xa
004578  4885              LDR      r0,|L1.18320|
00457a  f7fffffe          BL       uart_putchar
00457e  210a              MOVS     r1,#0xa
004580  4883              LDR      r0,|L1.18320|
004582  f7fffffe          BL       uart_putchar
004586  210a              MOVS     r1,#0xa
004588  4881              LDR      r0,|L1.18320|
00458a  f7fffffe          BL       uart_putchar
00458e  210a              MOVS     r1,#0xa
004590  487f              LDR      r0,|L1.18320|
004592  f7fffffe          BL       uart_putchar
004596  210a              MOVS     r1,#0xa
004598  487d              LDR      r0,|L1.18320|
00459a  f7fffffe          BL       uart_putchar
00459e  210a              MOVS     r1,#0xa
0045a0  487b              LDR      r0,|L1.18320|
0045a2  f7fffffe          BL       uart_putchar
0045a6  210a              MOVS     r1,#0xa
0045a8  4879              LDR      r0,|L1.18320|
0045aa  f7fffffe          BL       uart_putchar
0045ae  210a              MOVS     r1,#0xa
0045b0  4877              LDR      r0,|L1.18320|
0045b2  f7fffffe          BL       uart_putchar
0045b6  210a              MOVS     r1,#0xa
0045b8  4875              LDR      r0,|L1.18320|
0045ba  f7fffffe          BL       uart_putchar
0045be  210a              MOVS     r1,#0xa
0045c0  4873              LDR      r0,|L1.18320|
0045c2  f7fffffe          BL       uart_putchar
0045c6  210a              MOVS     r1,#0xa
0045c8  4871              LDR      r0,|L1.18320|
0045ca  f7fffffe          BL       uart_putchar
0045ce  210a              MOVS     r1,#0xa
0045d0  486f              LDR      r0,|L1.18320|
0045d2  f7fffffe          BL       uart_putchar
0045d6  210a              MOVS     r1,#0xa
0045d8  486d              LDR      r0,|L1.18320|
0045da  f7fffffe          BL       uart_putchar
0045de  210a              MOVS     r1,#0xa
0045e0  486b              LDR      r0,|L1.18320|
0045e2  f7fffffe          BL       uart_putchar
0045e6  210a              MOVS     r1,#0xa
0045e8  4869              LDR      r0,|L1.18320|
0045ea  f7fffffe          BL       uart_putchar
0045ee  210a              MOVS     r1,#0xa
0045f0  4867              LDR      r0,|L1.18320|
0045f2  f7fffffe          BL       uart_putchar
0045f6  210a              MOVS     r1,#0xa
0045f8  4865              LDR      r0,|L1.18320|
0045fa  f7fffffe          BL       uart_putchar
0045fe  210a              MOVS     r1,#0xa
004600  4863              LDR      r0,|L1.18320|
004602  f7fffffe          BL       uart_putchar
004606  210a              MOVS     r1,#0xa
004608  4861              LDR      r0,|L1.18320|
00460a  f7fffffe          BL       uart_putchar
00460e  210a              MOVS     r1,#0xa
004610  485f              LDR      r0,|L1.18320|
004612  f7fffffe          BL       uart_putchar
004616  210a              MOVS     r1,#0xa
004618  485d              LDR      r0,|L1.18320|
00461a  f7fffffe          BL       uart_putchar
00461e  210a              MOVS     r1,#0xa
004620  485b              LDR      r0,|L1.18320|
004622  f7fffffe          BL       uart_putchar
;;;467    									//memset(data,0,1000);
;;;468    									//timer counts to wait for characters in uart 1 									
;;;469    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004626  bf00              NOP      
                  |L1.17960|
004628  495d              LDR      r1,|L1.18336|
00462a  3138              ADDS     r1,r1,#0x38
00462c  485e              LDR      r0,|L1.18344|
00462e  f7fffffe          BL       strstr
004632  2800              CMP      r0,#0
004634  d10a              BNE      |L1.17996|
004636  495a              LDR      r1,|L1.18336|
004638  3954              SUBS     r1,r1,#0x54
00463a  485b              LDR      r0,|L1.18344|
00463c  f7fffffe          BL       strstr
004640  2800              CMP      r0,#0
004642  d103              BNE      |L1.17996|
004644  485a              LDR      r0,|L1.18352|
004646  6800              LDR      r0,[r0,#0]  ; tout
004648  2805              CMP      r0,#5
00464a  dded              BLE      |L1.17960|
                  |L1.17996|
;;;470    									{	}
;;;471    									clear();
00464c  f7fffffe          BL       clear
;;;472    									memset(data,0,strlen(data));
004650  4851              LDR      r0,|L1.18328|
004652  f7fffffe          BL       strlen
004656  4601              MOV      r1,r0
004658  9001              STR      r0,[sp,#4]
00465a  484f              LDR      r0,|L1.18328|
00465c  f7fffffe          BL       __aeabi_memclr
;;;473    									memset(data,0,strlen(data));	
004660  484d              LDR      r0,|L1.18328|
004662  f7fffffe          BL       strlen
004666  4601              MOV      r1,r0
004668  9001              STR      r0,[sp,#4]
00466a  484b              LDR      r0,|L1.18328|
00466c  f7fffffe          BL       __aeabi_memclr
;;;474    									GPS_COLLECT();
004670  f7fffffe          BL       GPS_COLLECT
;;;475    									strcat(data,"CH\n");	
004674  494a              LDR      r1,|L1.18336|
004676  390c              SUBS     r1,r1,#0xc
004678  4847              LDR      r0,|L1.18328|
00467a  f7fffffe          BL       strcat
;;;476    
;;;477    
;;;478    									clear();	
00467e  f7fffffe          BL       clear
;;;479    //*************************************tcp_initialization();*********************
;;;480    //setting interval 4
;;;481    temp=int_erval;				
004682  484d              LDR      r0,|L1.18360|
004684  6800              LDR      r0,[r0,#0]  ; int_erval
004686  494d              LDR      r1,|L1.18364|
004688  6008              STR      r0,[r1,#0]  ; temp
;;;482    int_erval=4;
00468a  2004              MOVS     r0,#4
00468c  494a              LDR      r1,|L1.18360|
00468e  6008              STR      r0,[r1,#0]  ; int_erval
;;;483    
;;;484    	
;;;485    msg_sim800(); 
004690  f7fffffe          BL       msg_sim800
;;;486    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
004694  2005              MOVS     r0,#5
004696  4b42              LDR      r3,|L1.18336|
004698  3b54              SUBS     r3,r3,#0x54
00469a  461a              MOV      r2,r3
00469c  3278              ADDS     r2,r2,#0x78
00469e  a148              ADR      r1,|L1.18368|
0046a0  9000              STR      r0,[sp,#0]
0046a2  4610              MOV      r0,r2
0046a4  3020              ADDS     r0,r0,#0x20
0046a6  f7fffffe          BL       send_GSM
;;;487    delay(100);
0046aa  2064              MOVS     r0,#0x64
0046ac  f7fffffe          BL       delay
;;;488    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0046b0  2004              MOVS     r0,#4
0046b2  4b3b              LDR      r3,|L1.18336|
0046b4  3b54              SUBS     r3,r3,#0x54
0046b6  461a              MOV      r2,r3
0046b8  32a8              ADDS     r2,r2,#0xa8
0046ba  a141              ADR      r1,|L1.18368|
0046bc  9000              STR      r0,[sp,#0]
0046be  4610              MOV      r0,r2
0046c0  3014              ADDS     r0,r0,#0x14
0046c2  f7fffffe          BL       send_GSM
;;;489    GPS_COLLECT2();
0046c6  f7fffffe          BL       GPS_COLLECT2
;;;490    strcat(data,"CH\n");		
0046ca  4935              LDR      r1,|L1.18336|
0046cc  390c              SUBS     r1,r1,#0xc
0046ce  4832              LDR      r0,|L1.18328|
0046d0  f7fffffe          BL       strcat
;;;491    GPS_COLLECT2();
0046d4  f7fffffe          BL       GPS_COLLECT2
;;;492    strcat(data,"CH\n");	
0046d8  4931              LDR      r1,|L1.18336|
0046da  390c              SUBS     r1,r1,#0xc
0046dc  482e              LDR      r0,|L1.18328|
0046de  f7fffffe          BL       strcat
;;;493    GPS_COLLECT2();
0046e2  f7fffffe          BL       GPS_COLLECT2
;;;494    strcat(data,"CH\n");
0046e6  492e              LDR      r1,|L1.18336|
0046e8  390c              SUBS     r1,r1,#0xc
0046ea  482b              LDR      r0,|L1.18328|
0046ec  f7fffffe          BL       strcat
;;;495    
;;;496    	
;;;497    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
0046f0  2004              MOVS     r0,#4
0046f2  4b34              LDR      r3,|L1.18372|
0046f4  4a2a              LDR      r2,|L1.18336|
0046f6  3224              ADDS     r2,r2,#0x24
0046f8  a131              ADR      r1,|L1.18368|
0046fa  9000              STR      r0,[sp,#0]
0046fc  4618              MOV      r0,r3
0046fe  300c              ADDS     r0,r0,#0xc
004700  f7fffffe          BL       send_GSM
;;;498    GPS_COLLECT2();
004704  f7fffffe          BL       GPS_COLLECT2
;;;499    strcat(data,"CH\n");	
004708  4925              LDR      r1,|L1.18336|
00470a  390c              SUBS     r1,r1,#0xc
00470c  4822              LDR      r0,|L1.18328|
00470e  f7fffffe          BL       strcat
;;;500    memset(at_,0,100);
004712  2164              MOVS     r1,#0x64
004714  481f              LDR      r0,|L1.18324|
004716  f7fffffe          BL       __aeabi_memclr
;;;501    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
00471a  4a2b              LDR      r2,|L1.18376|
00471c  4929              LDR      r1,|L1.18372|
00471e  3120              ADDS     r1,r1,#0x20
004720  481c              LDR      r0,|L1.18324|
004722  f7fffffe          BL       __2sprintf
;;;502    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
004726  4829              LDR      r0,|L1.18380|
004728  6800              LDR      r0,[r0,#0]  ; tmeout
00472a  4b26              LDR      r3,|L1.18372|
00472c  4a1c              LDR      r2,|L1.18336|
00472e  3224              ADDS     r2,r2,#0x24
004730  a123              ADR      r1,|L1.18368|
004732  9000              STR      r0,[sp,#0]
004734  4817              LDR      r0,|L1.18324|
004736  f7fffffe          BL       send_GSM
;;;503    msg_sim800(); 
00473a  f7fffffe          BL       msg_sim800
;;;504    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
00473e  2004              MOVS     r0,#4
004740  4b17              LDR      r3,|L1.18336|
004742  3b38              SUBS     r3,r3,#0x38
004744  461a              MOV      r2,r3
004746  325c              ADDS     r2,r2,#0x5c
004748  a11d              ADR      r1,|L1.18368|
00474a  9000              STR      r0,[sp,#0]
00474c  481d              LDR      r0,|L1.18372|
00474e  3038              ADDS     r0,r0,#0x38
004750  f7fffffe          BL       send_GSM
;;;505    GPS_COLLECT2();
004754  f7fffffe          BL       GPS_COLLECT2
;;;506    strcat(data,"CH\n");	
004758  4911              LDR      r1,|L1.18336|
00475a  390c              SUBS     r1,r1,#0xc
00475c  480e              LDR      r0,|L1.18328|
00475e  f7fffffe          BL       strcat
;;;507    GPS_COLLECT2();
004762  f7fffffe          BL       GPS_COLLECT2
;;;508    strcat(data,"CH\n");	
004766  490e              LDR      r1,|L1.18336|
004768  390c              SUBS     r1,r1,#0xc
00476a  480b              LDR      r0,|L1.18328|
00476c  f7fffffe          BL       strcat
;;;509    
;;;510    
;;;511    msg_sim800(); 
004770  f7fffffe          BL       msg_sim800
;;;512    GPS_COLLECT2();
004774  f7fffffe          BL       GPS_COLLECT2
;;;513    strcat(data,"CH\n");	
004778  4909              LDR      r1,|L1.18336|
00477a  390c              SUBS     r1,r1,#0xc
00477c  4806              LDR      r0,|L1.18328|
00477e  f7fffffe          BL       strcat
;;;514    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
004782  f7fffffe          BL       clear
004786  480f              LDR      r0,|L1.18372|
004788  3048              ADDS     r0,r0,#0x48
00478a  f7fffffe          BL       send_modem
00478e  e01f              B        |L1.18384|
                  |L1.18320|
                          DCD      0x4006b000
                  |L1.18324|
                          DCD      at_
                  |L1.18328|
                          DCD      data
                  |L1.18332|
                          DCD      drive
                  |L1.18336|
                          DCD      ||.text||+0x8c4
                  |L1.18340|
0047a4  3e00              DCB      ">",0
0047a6  00                DCB      0
0047a7  00                DCB      0
                  |L1.18344|
                          DCD      uart_string_gsm
                  |L1.18348|
                          DCD      ||k2||
                  |L1.18352|
                          DCD      tout
                  |L1.18356|
                          DCD      k
                  |L1.18360|
                          DCD      int_erval
                  |L1.18364|
                          DCD      temp
                  |L1.18368|
0047c0  4f4b00            DCB      "OK",0
0047c3  00                DCB      0
                  |L1.18372|
                          DCD      ||.text||+0xd54
                  |L1.18376|
                          DCD      apn
                  |L1.18380|
                          DCD      tmeout
                  |L1.18384|
0047d0  f7fffffe          BL       clear
;;;515    					delay(20);
0047d4  2014              MOVS     r0,#0x14
0047d6  f7fffffe          BL       delay
;;;516    
;;;517    
;;;518    msg_sim800(); 
0047da  f7fffffe          BL       msg_sim800
;;;519    int_erval=temp;
0047de  48fd              LDR      r0,|L1.19412|
0047e0  6800              LDR      r0,[r0,#0]  ; temp
0047e2  49fd              LDR      r1,|L1.19416|
0047e4  6008              STR      r0,[r1,#0]  ; int_erval
;;;520    //resetting interval 
;;;521    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0047e6  4bfd              LDR      r3,|L1.19420|
0047e8  4afd              LDR      r2,|L1.19424|
0047ea  49fe              LDR      r1,|L1.19428|
0047ec  48fe              LDR      r0,|L1.19432|
0047ee  f7fffffe          BL       __2sprintf
;;;522    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0047f2  48fe              LDR      r0,|L1.19436|
0047f4  6800              LDR      r0,[r0,#0]  ; tmeout
0047f6  4bfb              LDR      r3,|L1.19428|
0047f8  3b60              SUBS     r3,r3,#0x60
0047fa  4afd              LDR      r2,|L1.19440|
0047fc  4619              MOV      r1,r3
0047fe  3180              ADDS     r1,r1,#0x80
004800  9000              STR      r0,[sp,#0]
004802  48f9              LDR      r0,|L1.19432|
004804  f7fffffe          BL       send_GSM
;;;523    						clear();
004808  f7fffffe          BL       clear
;;;524    						
;;;525    						
;;;526    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
00480c  48f7              LDR      r0,|L1.19436|
00480e  6800              LDR      r0,[r0,#0]  ; tmeout
004810  4bf4              LDR      r3,|L1.19428|
004812  3328              ADDS     r3,r3,#0x28
004814  4af6              LDR      r2,|L1.19440|
004816  a1f7              ADR      r1,|L1.19444|
004818  9000              STR      r0,[sp,#0]
00481a  4618              MOV      r0,r3
00481c  3010              ADDS     r0,r0,#0x10
00481e  f7fffffe          BL       send_GSM
;;;527    						
;;;528    //*************************************tcp initialization*******************************/
;;;529    			clear();		
004822  f7fffffe          BL       clear
;;;530    						cond=mystrstr(uart_string_gsm,'>');
004826  213e              MOVS     r1,#0x3e
004828  48f3              LDR      r0,|L1.19448|
00482a  f7fffffe          BL       mystrstr
00482e  49f3              LDR      r1,|L1.19452|
004830  7008              STRB     r0,[r1,#0]
;;;531    								if(cond)	
004832  4608              MOV      r0,r1
004834  7800              LDRB     r0,[r0,#0]  ; cond
004836  2800              CMP      r0,#0
004838  d07d              BEQ      |L1.18742|
;;;532    								{	
;;;533    
;;;534    									clear();
00483a  f7fffffe          BL       clear
;;;535    									memset(uart_string_gsm,0,5000);
00483e  49f0              LDR      r1,|L1.19456|
004840  48ed              LDR      r0,|L1.19448|
004842  f7fffffe          BL       __aeabi_memclr
;;;536    									strcat(data,"\n");
004846  a1ef              ADR      r1,|L1.19460|
004848  48ef              LDR      r0,|L1.19464|
00484a  f7fffffe          BL       strcat
;;;537    									len=strlen(data);
00484e  48ee              LDR      r0,|L1.19464|
004850  f7fffffe          BL       strlen
004854  49ed              LDR      r1,|L1.19468|
004856  6008              STR      r0,[r1,#0]  ; len
;;;538    									tout=0;
004858  2000              MOVS     r0,#0
00485a  49ed              LDR      r1,|L1.19472|
00485c  6008              STR      r0,[r1,#0]  ; tout
;;;539    									k2=0;
00485e  49ed              LDR      r1,|L1.19476|
004860  6008              STR      r0,[r1,#0]  ; k2
;;;540    									for(k=0;k<len;k++)
004862  49ed              LDR      r1,|L1.19480|
004864  6008              STR      r0,[r1,#0]  ; k
004866  e00d              B        |L1.18564|
                  |L1.18536|
;;;541    									{
;;;542    										uart_putchar(UART1_BASE_PTR, data[k]);
004868  48e7              LDR      r0,|L1.19464|
00486a  49eb              LDR      r1,|L1.19480|
00486c  6809              LDR      r1,[r1,#0]  ; k
00486e  5c40              LDRB     r0,[r0,r1]
004870  4601              MOV      r1,r0
004872  9001              STR      r0,[sp,#4]
004874  48e9              LDR      r0,|L1.19484|
004876  f7fffffe          BL       uart_putchar
00487a  48e7              LDR      r0,|L1.19480|
00487c  6800              LDR      r0,[r0,#0]            ;540  ; k
00487e  1c40              ADDS     r0,r0,#1              ;540
004880  49e5              LDR      r1,|L1.19480|
004882  6008              STR      r0,[r1,#0]            ;540  ; k
                  |L1.18564|
004884  48e4              LDR      r0,|L1.19480|
004886  6800              LDR      r0,[r0,#0]            ;540  ; k
004888  49e0              LDR      r1,|L1.19468|
00488a  6809              LDR      r1,[r1,#0]            ;540  ; len
00488c  4288              CMP      r0,r1                 ;540
00488e  dbeb              BLT      |L1.18536|
;;;543    									}uart_putchar(UART1_BASE_PTR, 0x1A);
004890  211a              MOVS     r1,#0x1a
004892  48e2              LDR      r0,|L1.19484|
004894  f7fffffe          BL       uart_putchar
;;;544    									do
004898  bf00              NOP      
                  |L1.18586|
;;;545    																{stcond1=strstr(uart_string_gsm,"SEND OK");
00489a  49e1              LDR      r1,|L1.19488|
00489c  48d6              LDR      r0,|L1.19448|
00489e  f7fffffe          BL       strstr
0048a2  49e0              LDR      r1,|L1.19492|
0048a4  6008              STR      r0,[r1,#0]  ; stcond1
;;;546    																	stcond2=strstr(uart_string_gsm, "ERROR");
0048a6  49d2              LDR      r1,|L1.19440|
0048a8  48d3              LDR      r0,|L1.19448|
0048aa  f7fffffe          BL       strstr
0048ae  49de              LDR      r1,|L1.19496|
0048b0  6008              STR      r0,[r1,#0]  ; stcond2
;;;547    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0048b2  49cc              LDR      r1,|L1.19428|
0048b4  3130              ADDS     r1,r1,#0x30
0048b6  48d0              LDR      r0,|L1.19448|
0048b8  f7fffffe          BL       strstr
0048bc  49db              LDR      r1,|L1.19500|
0048be  6008              STR      r0,[r1,#0]  ; stcond3
;;;548    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0048c0  49cb              LDR      r1,|L1.19440|
0048c2  311c              ADDS     r1,r1,#0x1c
0048c4  48cc              LDR      r0,|L1.19448|
0048c6  f7fffffe          BL       strstr
0048ca  49d9              LDR      r1,|L1.19504|
0048cc  6008              STR      r0,[r1,#0]  ; stcond4
;;;549    																	
;;;550    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0048ce  48d6              LDR      r0,|L1.19496|
0048d0  6800              LDR      r0,[r0,#0]  ; stcond2
0048d2  2800              CMP      r0,#0
0048d4  d10f              BNE      |L1.18678|
0048d6  48d5              LDR      r0,|L1.19500|
0048d8  6800              LDR      r0,[r0,#0]  ; stcond3
0048da  2800              CMP      r0,#0
0048dc  d10b              BNE      |L1.18678|
0048de  4608              MOV      r0,r1
0048e0  6800              LDR      r0,[r0,#0]  ; stcond4
0048e2  2800              CMP      r0,#0
0048e4  d107              BNE      |L1.18678|
0048e6  48cf              LDR      r0,|L1.19492|
0048e8  6800              LDR      r0,[r0,#0]  ; stcond1
0048ea  2800              CMP      r0,#0
0048ec  d103              BNE      |L1.18678|
0048ee  48c8              LDR      r0,|L1.19472|
0048f0  6800              LDR      r0,[r0,#0]  ; tout
0048f2  2808              CMP      r0,#8
0048f4  ddd1              BLE      |L1.18586|
                  |L1.18678|
;;;551    																delay(10);clear();
0048f6  200a              MOVS     r0,#0xa
0048f8  f7fffffe          BL       delay
0048fc  f7fffffe          BL       clear
;;;552    														uart_putchar(UART1_BASE_PTR,0x1A);
004900  211a              MOVS     r1,#0x1a
004902  48c6              LDR      r0,|L1.19484|
004904  f7fffffe          BL       uart_putchar
;;;553    												delay(10);
004908  200a              MOVS     r0,#0xa
00490a  f7fffffe          BL       delay
;;;554    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00490e  211a              MOVS     r1,#0x1a
004910  48c2              LDR      r0,|L1.19484|
004912  f7fffffe          BL       uart_putchar
004916  211a              MOVS     r1,#0x1a
004918  48c0              LDR      r0,|L1.19484|
00491a  f7fffffe          BL       uart_putchar
00491e  211a              MOVS     r1,#0x1a
004920  48be              LDR      r0,|L1.19484|
004922  f7fffffe          BL       uart_putchar
;;;555    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004926  211a              MOVS     r1,#0x1a
004928  48bc              LDR      r0,|L1.19484|
00492a  f7fffffe          BL       uart_putchar
00492e  f7fffffe          BL       clear
004932  200a              MOVS     r0,#0xa
004934  e000              B        |L1.18744|
                  |L1.18742|
004936  e1ac              B        |L1.19602|
                  |L1.18744|
004938  f7fffffe          BL       delay
;;;556    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
00493c  211a              MOVS     r1,#0x1a
00493e  48b7              LDR      r0,|L1.19484|
004940  f7fffffe          BL       uart_putchar
004944  f7fffffe          BL       clear
004948  200a              MOVS     r0,#0xa
00494a  f7fffffe          BL       delay
;;;557    															
;;;558    										qwe=strlen(uart_string_gsm);
00494e  48aa              LDR      r0,|L1.19448|
004950  f7fffffe          BL       strlen
004954  49b7              LDR      r1,|L1.19508|
004956  6008              STR      r0,[r1,#0]  ; qwe
;;;559    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004958  211a              MOVS     r1,#0x1a
00495a  48b0              LDR      r0,|L1.19484|
00495c  f7fffffe          BL       uart_putchar
004960  f7fffffe          BL       clear
004964  200a              MOVS     r0,#0xa
004966  f7fffffe          BL       delay
;;;560    								delay(50);
00496a  2032              MOVS     r0,#0x32
00496c  f7fffffe          BL       delay
;;;561    								con1d=strstr(uart_string_gsm,"SEND OK");
004970  49ab              LDR      r1,|L1.19488|
004972  48a1              LDR      r0,|L1.19448|
004974  f7fffffe          BL       strstr
004978  49af              LDR      r1,|L1.19512|
00497a  6008              STR      r0,[r1,#0]  ; con1d
;;;562    								if(!(con1d) == 1 )
00497c  4608              MOV      r0,r1
00497e  6800              LDR      r0,[r0,#0]  ; con1d
004980  2800              CMP      r0,#0
004982  d101              BNE      |L1.18824|
004984  2001              MOVS     r0,#1
004986  e000              B        |L1.18826|
                  |L1.18824|
004988  2000              MOVS     r0,#0
                  |L1.18826|
00498a  2801              CMP      r0,#1
00498c  d17e              BNE      |L1.19084|
;;;563    								{
;;;564    									delay(100);
00498e  2064              MOVS     r0,#0x64
004990  f7fffffe          BL       delay
;;;565    									clear();//memset(uart_string_gsm,0,5000);
004994  f7fffffe          BL       clear
;;;566    									memset(at_,0,100);
004998  2164              MOVS     r1,#0x64
00499a  4893              LDR      r0,|L1.19432|
00499c  f7fffffe          BL       __aeabi_memclr
;;;567    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0049a0  4899              LDR      r0,|L1.19464|
0049a2  f7fffffe          BL       strlen
0049a6  1c40              ADDS     r0,r0,#1
0049a8  4603              MOV      r3,r0
0049aa  4aa4              LDR      r2,|L1.19516|
0049ac  4990              LDR      r1,|L1.19440|
0049ae  3154              ADDS     r1,r1,#0x54
0049b0  9001              STR      r0,[sp,#4]
0049b2  488d              LDR      r0,|L1.19432|
0049b4  f7fffffe          BL       __2sprintf
;;;568    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0049b8  2005              MOVS     r0,#5
0049ba  4b8d              LDR      r3,|L1.19440|
0049bc  461a              MOV      r2,r3
0049be  3278              ADDS     r2,r2,#0x78
0049c0  a18c              ADR      r1,|L1.19444|
0049c2  9000              STR      r0,[sp,#0]
0049c4  4888              LDR      r0,|L1.19432|
0049c6  f7fffffe          BL       send_SD
;;;569    if(strstr(uart_string_gsm,"ERROR")){
0049ca  4989              LDR      r1,|L1.19440|
0049cc  488a              LDR      r0,|L1.19448|
0049ce  f7fffffe          BL       strstr
0049d2  2800              CMP      r0,#0
0049d4  d004              BEQ      |L1.18912|
;;;570    	drive[0]='C';drive[1]=':';
0049d6  2043              MOVS     r0,#0x43
0049d8  4998              LDR      r1,|L1.19516|
0049da  7008              STRB     r0,[r1,#0]
0049dc  203a              MOVS     r0,#0x3a
0049de  7048              STRB     r0,[r1,#1]
                  |L1.18912|
;;;571    }	
;;;572    									clear();	
0049e0  f7fffffe          BL       clear
;;;573    									k2=0;									//string array counter for uart 1
0049e4  2000              MOVS     r0,#0
0049e6  498b              LDR      r1,|L1.19476|
0049e8  6008              STR      r0,[r1,#0]  ; k2
;;;574    									tout=0;	
0049ea  4989              LDR      r1,|L1.19472|
0049ec  6008              STR      r0,[r1,#0]  ; tout
;;;575    									for(k=0;k<strlen(data);k++)
0049ee  498a              LDR      r1,|L1.19480|
0049f0  6008              STR      r0,[r1,#0]  ; k
0049f2  e00d              B        |L1.18960|
                  |L1.18932|
;;;576    									{
;;;577    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0049f4  4884              LDR      r0,|L1.19464|
0049f6  4988              LDR      r1,|L1.19480|
0049f8  6809              LDR      r1,[r1,#0]  ; k
0049fa  5c40              LDRB     r0,[r0,r1]
0049fc  4601              MOV      r1,r0
0049fe  9001              STR      r0,[sp,#4]
004a00  4886              LDR      r0,|L1.19484|
004a02  f7fffffe          BL       uart_putchar
004a06  4884              LDR      r0,|L1.19480|
004a08  6800              LDR      r0,[r0,#0]            ;575  ; k
004a0a  1c40              ADDS     r0,r0,#1              ;575
004a0c  4982              LDR      r1,|L1.19480|
004a0e  6008              STR      r0,[r1,#0]            ;575  ; k
                  |L1.18960|
004a10  487d              LDR      r0,|L1.19464|
004a12  f7fffffe          BL       strlen
004a16  4980              LDR      r1,|L1.19480|
004a18  6809              LDR      r1,[r1,#0]            ;575  ; k
004a1a  4288              CMP      r0,r1                 ;575
004a1c  d8ea              BHI      |L1.18932|
;;;578    									}	
;;;579    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004a1e  210a              MOVS     r1,#0xa
004a20  487e              LDR      r0,|L1.19484|
004a22  f7fffffe          BL       uart_putchar
004a26  210a              MOVS     r1,#0xa
004a28  487c              LDR      r0,|L1.19484|
004a2a  f7fffffe          BL       uart_putchar
004a2e  210a              MOVS     r1,#0xa
004a30  487a              LDR      r0,|L1.19484|
004a32  f7fffffe          BL       uart_putchar
004a36  210a              MOVS     r1,#0xa
004a38  4878              LDR      r0,|L1.19484|
004a3a  f7fffffe          BL       uart_putchar
004a3e  210a              MOVS     r1,#0xa
004a40  4876              LDR      r0,|L1.19484|
004a42  f7fffffe          BL       uart_putchar
004a46  210a              MOVS     r1,#0xa
004a48  4874              LDR      r0,|L1.19484|
004a4a  f7fffffe          BL       uart_putchar
004a4e  210a              MOVS     r1,#0xa
004a50  4872              LDR      r0,|L1.19484|
004a52  f7fffffe          BL       uart_putchar
004a56  210a              MOVS     r1,#0xa
004a58  4870              LDR      r0,|L1.19484|
004a5a  f7fffffe          BL       uart_putchar
004a5e  210a              MOVS     r1,#0xa
004a60  486e              LDR      r0,|L1.19484|
004a62  f7fffffe          BL       uart_putchar
004a66  210a              MOVS     r1,#0xa
004a68  486c              LDR      r0,|L1.19484|
004a6a  f7fffffe          BL       uart_putchar
004a6e  210a              MOVS     r1,#0xa
004a70  486a              LDR      r0,|L1.19484|
004a72  f7fffffe          BL       uart_putchar
004a76  210a              MOVS     r1,#0xa
004a78  4868              LDR      r0,|L1.19484|
004a7a  f7fffffe          BL       uart_putchar
004a7e  210a              MOVS     r1,#0xa
004a80  4866              LDR      r0,|L1.19484|
004a82  f7fffffe          BL       uart_putchar
004a86  210a              MOVS     r1,#0xa
004a88  4864              LDR      r0,|L1.19484|
004a8a  e000              B        |L1.19086|
                  |L1.19084|
004a8c  e24e              B        |L1.20268|
                  |L1.19086|
004a8e  f7fffffe          BL       uart_putchar
004a92  210a              MOVS     r1,#0xa
004a94  4861              LDR      r0,|L1.19484|
004a96  f7fffffe          BL       uart_putchar
004a9a  210a              MOVS     r1,#0xa
004a9c  485f              LDR      r0,|L1.19484|
004a9e  f7fffffe          BL       uart_putchar
004aa2  210a              MOVS     r1,#0xa
004aa4  485d              LDR      r0,|L1.19484|
004aa6  f7fffffe          BL       uart_putchar
004aaa  210a              MOVS     r1,#0xa
004aac  485b              LDR      r0,|L1.19484|
004aae  f7fffffe          BL       uart_putchar
004ab2  210a              MOVS     r1,#0xa
004ab4  4859              LDR      r0,|L1.19484|
004ab6  f7fffffe          BL       uart_putchar
004aba  210a              MOVS     r1,#0xa
004abc  4857              LDR      r0,|L1.19484|
004abe  f7fffffe          BL       uart_putchar
004ac2  210a              MOVS     r1,#0xa
004ac4  4855              LDR      r0,|L1.19484|
004ac6  f7fffffe          BL       uart_putchar
004aca  210a              MOVS     r1,#0xa
004acc  4853              LDR      r0,|L1.19484|
004ace  f7fffffe          BL       uart_putchar
004ad2  210a              MOVS     r1,#0xa
004ad4  4851              LDR      r0,|L1.19484|
004ad6  f7fffffe          BL       uart_putchar
004ada  210a              MOVS     r1,#0xa
004adc  484f              LDR      r0,|L1.19484|
004ade  f7fffffe          BL       uart_putchar
004ae2  210a              MOVS     r1,#0xa
004ae4  484d              LDR      r0,|L1.19484|
004ae6  f7fffffe          BL       uart_putchar
004aea  210a              MOVS     r1,#0xa
004aec  484b              LDR      r0,|L1.19484|
004aee  f7fffffe          BL       uart_putchar
004af2  210a              MOVS     r1,#0xa
004af4  4849              LDR      r0,|L1.19484|
004af6  f7fffffe          BL       uart_putchar
004afa  210a              MOVS     r1,#0xa
004afc  4847              LDR      r0,|L1.19484|
004afe  f7fffffe          BL       uart_putchar
004b02  210a              MOVS     r1,#0xa
004b04  4845              LDR      r0,|L1.19484|
004b06  f7fffffe          BL       uart_putchar
004b0a  210a              MOVS     r1,#0xa
004b0c  4843              LDR      r0,|L1.19484|
004b0e  f7fffffe          BL       uart_putchar
004b12  210a              MOVS     r1,#0xa
004b14  4841              LDR      r0,|L1.19484|
004b16  f7fffffe          BL       uart_putchar
004b1a  210a              MOVS     r1,#0xa
004b1c  483f              LDR      r0,|L1.19484|
004b1e  f7fffffe          BL       uart_putchar
004b22  210a              MOVS     r1,#0xa
004b24  483d              LDR      r0,|L1.19484|
004b26  f7fffffe          BL       uart_putchar
004b2a  210a              MOVS     r1,#0xa
004b2c  483b              LDR      r0,|L1.19484|
004b2e  f7fffffe          BL       uart_putchar
004b32  210a              MOVS     r1,#0xa
004b34  4839              LDR      r0,|L1.19484|
004b36  f7fffffe          BL       uart_putchar
004b3a  210a              MOVS     r1,#0xa
004b3c  4837              LDR      r0,|L1.19484|
004b3e  f7fffffe          BL       uart_putchar
004b42  210a              MOVS     r1,#0xa
004b44  4835              LDR      r0,|L1.19484|
004b46  f7fffffe          BL       uart_putchar
004b4a  210a              MOVS     r1,#0xa
004b4c  4833              LDR      r0,|L1.19484|
004b4e  f7fffffe          BL       uart_putchar
004b52  210a              MOVS     r1,#0xa
004b54  4831              LDR      r0,|L1.19484|
004b56  f7fffffe          BL       uart_putchar
004b5a  210a              MOVS     r1,#0xa
004b5c  482f              LDR      r0,|L1.19484|
004b5e  f7fffffe          BL       uart_putchar
004b62  210a              MOVS     r1,#0xa
004b64  482d              LDR      r0,|L1.19484|
004b66  f7fffffe          BL       uart_putchar
004b6a  210a              MOVS     r1,#0xa
004b6c  482b              LDR      r0,|L1.19484|
004b6e  f7fffffe          BL       uart_putchar
004b72  210a              MOVS     r1,#0xa
004b74  4829              LDR      r0,|L1.19484|
004b76  f7fffffe          BL       uart_putchar
004b7a  210a              MOVS     r1,#0xa
004b7c  4827              LDR      r0,|L1.19484|
004b7e  f7fffffe          BL       uart_putchar
004b82  210a              MOVS     r1,#0xa
004b84  4825              LDR      r0,|L1.19484|
004b86  f7fffffe          BL       uart_putchar
004b8a  210a              MOVS     r1,#0xa
004b8c  4823              LDR      r0,|L1.19484|
004b8e  f7fffffe          BL       uart_putchar
004b92  210a              MOVS     r1,#0xa
004b94  4821              LDR      r0,|L1.19484|
004b96  f7fffffe          BL       uart_putchar
004b9a  210a              MOVS     r1,#0xa
004b9c  481f              LDR      r0,|L1.19484|
004b9e  f7fffffe          BL       uart_putchar
004ba2  210a              MOVS     r1,#0xa
004ba4  481d              LDR      r0,|L1.19484|
004ba6  f7fffffe          BL       uart_putchar
004baa  210a              MOVS     r1,#0xa
004bac  481b              LDR      r0,|L1.19484|
004bae  f7fffffe          BL       uart_putchar
004bb2  210a              MOVS     r1,#0xa
004bb4  4819              LDR      r0,|L1.19484|
004bb6  f7fffffe          BL       uart_putchar
004bba  210a              MOVS     r1,#0xa
004bbc  4817              LDR      r0,|L1.19484|
004bbe  f7fffffe          BL       uart_putchar
004bc2  210a              MOVS     r1,#0xa
004bc4  4815              LDR      r0,|L1.19484|
004bc6  f7fffffe          BL       uart_putchar
004bca  210a              MOVS     r1,#0xa
004bcc  4813              LDR      r0,|L1.19484|
004bce  f7fffffe          BL       uart_putchar
004bd2  e035              B        |L1.19520|
                  |L1.19412|
                          DCD      temp
                  |L1.19416|
                          DCD      int_erval
                  |L1.19420|
                          DCD      port
                  |L1.19424|
                          DCD      ||ip||
                  |L1.19428|
                          DCD      ||.text||+0xdb4
                  |L1.19432|
                          DCD      at_
                  |L1.19436|
                          DCD      tmeout
                  |L1.19440|
                          DCD      ||.text||+0x870
                  |L1.19444|
004bf4  3e00              DCB      ">",0
004bf6  00                DCB      0
004bf7  00                DCB      0
                  |L1.19448|
                          DCD      uart_string_gsm
                  |L1.19452|
                          DCD      cond
                  |L1.19456|
                          DCD      0x00001388
                  |L1.19460|
004c04  0a00              DCB      "\n",0
004c06  00                DCB      0
004c07  00                DCB      0
                  |L1.19464|
                          DCD      data
                  |L1.19468|
                          DCD      len
                  |L1.19472|
                          DCD      tout
                  |L1.19476|
                          DCD      ||k2||
                  |L1.19480|
                          DCD      k
                  |L1.19484|
                          DCD      0x4006b000
                  |L1.19488|
                          DCD      ||.text||+0x474
                  |L1.19492|
                          DCD      stcond1
                  |L1.19496|
                          DCD      stcond2
                  |L1.19500|
                          DCD      stcond3
                  |L1.19504|
                          DCD      stcond4
                  |L1.19508|
                          DCD      qwe
                  |L1.19512|
                          DCD      con1d
                  |L1.19516|
                          DCD      drive
                  |L1.19520|
004c40  210a              MOVS     r1,#0xa
004c42  48f9              LDR      r0,|L1.20520|
004c44  f7fffffe          BL       uart_putchar
004c48  210a              MOVS     r1,#0xa
004c4a  48f7              LDR      r0,|L1.20520|
004c4c  f7fffffe          BL       uart_putchar
004c50  210a              MOVS     r1,#0xa
004c52  48f5              LDR      r0,|L1.20520|
004c54  f7fffffe          BL       uart_putchar
;;;580    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004c58  bf00              NOP      
                  |L1.19546|
004c5a  49f4              LDR      r1,|L1.20524|
004c5c  48f4              LDR      r0,|L1.20528|
004c5e  f7fffffe          BL       strstr
004c62  2800              CMP      r0,#0
004c64  d10a              BNE      |L1.19580|
004c66  49f1              LDR      r1,|L1.20524|
004c68  398c              SUBS     r1,r1,#0x8c
004c6a  48f1              LDR      r0,|L1.20528|
004c6c  f7fffffe          BL       strstr
004c70  2800              CMP      r0,#0
004c72  d103              BNE      |L1.19580|
004c74  48ef              LDR      r0,|L1.20532|
004c76  6800              LDR      r0,[r0,#0]  ; tout
004c78  2805              CMP      r0,#5
004c7a  ddee              BLE      |L1.19546|
                  |L1.19580|
;;;581    									{}
;;;582    	                memset(data,0,strlen(data));
004c7c  48ee              LDR      r0,|L1.20536|
004c7e  f7fffffe          BL       strlen
004c82  4601              MOV      r1,r0
004c84  9001              STR      r0,[sp,#4]
004c86  48ec              LDR      r0,|L1.20536|
004c88  f7fffffe          BL       __aeabi_memclr
;;;583    									clear();
004c8c  f7fffffe          BL       clear
004c90  e14c              B        |L1.20268|
                  |L1.19602|
;;;584    									}else{
;;;585    									//send_chunk();
;;;586    									}	
;;;587    						}else{
;;;588    									delay(100);
004c92  2064              MOVS     r0,#0x64
004c94  f7fffffe          BL       delay
;;;589    									clear();//memset(uart_string_gsm,0,5000);
004c98  f7fffffe          BL       clear
;;;590    
;;;591    									memset(at_,0,100);
004c9c  2164              MOVS     r1,#0x64
004c9e  48e7              LDR      r0,|L1.20540|
004ca0  f7fffffe          BL       __aeabi_memclr
;;;592    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004ca4  48e4              LDR      r0,|L1.20536|
004ca6  f7fffffe          BL       strlen
004caa  1c40              ADDS     r0,r0,#1
004cac  4603              MOV      r3,r0
004cae  4ae4              LDR      r2,|L1.20544|
004cb0  49de              LDR      r1,|L1.20524|
004cb2  3938              SUBS     r1,r1,#0x38
004cb4  9001              STR      r0,[sp,#4]
004cb6  48e1              LDR      r0,|L1.20540|
004cb8  f7fffffe          BL       __2sprintf
;;;593    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004cbc  2005              MOVS     r0,#5
004cbe  4bdb              LDR      r3,|L1.20524|
004cc0  3b8c              SUBS     r3,r3,#0x8c
004cc2  461a              MOV      r2,r3
004cc4  3278              ADDS     r2,r2,#0x78
004cc6  a1df              ADR      r1,|L1.20548|
004cc8  9000              STR      r0,[sp,#0]
004cca  48dc              LDR      r0,|L1.20540|
004ccc  f7fffffe          BL       send_SD
;;;594    if(strstr(uart_string_gsm,"ERROR")){
004cd0  49d6              LDR      r1,|L1.20524|
004cd2  398c              SUBS     r1,r1,#0x8c
004cd4  48d6              LDR      r0,|L1.20528|
004cd6  f7fffffe          BL       strstr
004cda  2800              CMP      r0,#0
004cdc  d004              BEQ      |L1.19688|
;;;595    	drive[0]='C';drive[1]=':';
004cde  2043              MOVS     r0,#0x43
004ce0  49d7              LDR      r1,|L1.20544|
004ce2  7008              STRB     r0,[r1,#0]
004ce4  203a              MOVS     r0,#0x3a
004ce6  7048              STRB     r0,[r1,#1]
                  |L1.19688|
;;;596    }	
;;;597    									clear();	
004ce8  f7fffffe          BL       clear
;;;598    									k2=0;									//string array counter for uart 1
004cec  2000              MOVS     r0,#0
004cee  49d6              LDR      r1,|L1.20552|
004cf0  6008              STR      r0,[r1,#0]  ; k2
;;;599    									tout=0;	
004cf2  49d0              LDR      r1,|L1.20532|
004cf4  6008              STR      r0,[r1,#0]  ; tout
;;;600    		for(k=0;k<strlen(data);k++)
004cf6  49d5              LDR      r1,|L1.20556|
004cf8  6008              STR      r0,[r1,#0]  ; k
004cfa  e00d              B        |L1.19736|
                  |L1.19708|
;;;601    		{
;;;602    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004cfc  48ce              LDR      r0,|L1.20536|
004cfe  49d3              LDR      r1,|L1.20556|
004d00  6809              LDR      r1,[r1,#0]  ; k
004d02  5c40              LDRB     r0,[r0,r1]
004d04  4601              MOV      r1,r0
004d06  9001              STR      r0,[sp,#4]
004d08  48c7              LDR      r0,|L1.20520|
004d0a  f7fffffe          BL       uart_putchar
004d0e  48cf              LDR      r0,|L1.20556|
004d10  6800              LDR      r0,[r0,#0]            ;600  ; k
004d12  1c40              ADDS     r0,r0,#1              ;600
004d14  49cd              LDR      r1,|L1.20556|
004d16  6008              STR      r0,[r1,#0]            ;600  ; k
                  |L1.19736|
004d18  48c7              LDR      r0,|L1.20536|
004d1a  f7fffffe          BL       strlen
004d1e  49cb              LDR      r1,|L1.20556|
004d20  6809              LDR      r1,[r1,#0]            ;600  ; k
004d22  4288              CMP      r0,r1                 ;600
004d24  d8ea              BHI      |L1.19708|
;;;603    		}	
;;;604    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004d26  210a              MOVS     r1,#0xa
004d28  48bf              LDR      r0,|L1.20520|
004d2a  f7fffffe          BL       uart_putchar
004d2e  210a              MOVS     r1,#0xa
004d30  48bd              LDR      r0,|L1.20520|
004d32  f7fffffe          BL       uart_putchar
004d36  210a              MOVS     r1,#0xa
004d38  48bb              LDR      r0,|L1.20520|
004d3a  f7fffffe          BL       uart_putchar
004d3e  210a              MOVS     r1,#0xa
004d40  48b9              LDR      r0,|L1.20520|
004d42  f7fffffe          BL       uart_putchar
004d46  210a              MOVS     r1,#0xa
004d48  48b7              LDR      r0,|L1.20520|
004d4a  f7fffffe          BL       uart_putchar
004d4e  210a              MOVS     r1,#0xa
004d50  48b5              LDR      r0,|L1.20520|
004d52  f7fffffe          BL       uart_putchar
004d56  210a              MOVS     r1,#0xa
004d58  48b3              LDR      r0,|L1.20520|
004d5a  f7fffffe          BL       uart_putchar
004d5e  210a              MOVS     r1,#0xa
004d60  48b1              LDR      r0,|L1.20520|
004d62  f7fffffe          BL       uart_putchar
004d66  210a              MOVS     r1,#0xa
004d68  48af              LDR      r0,|L1.20520|
004d6a  f7fffffe          BL       uart_putchar
004d6e  210a              MOVS     r1,#0xa
004d70  48ad              LDR      r0,|L1.20520|
004d72  f7fffffe          BL       uart_putchar
004d76  210a              MOVS     r1,#0xa
004d78  48ab              LDR      r0,|L1.20520|
004d7a  f7fffffe          BL       uart_putchar
004d7e  210a              MOVS     r1,#0xa
004d80  48a9              LDR      r0,|L1.20520|
004d82  f7fffffe          BL       uart_putchar
004d86  210a              MOVS     r1,#0xa
004d88  48a7              LDR      r0,|L1.20520|
004d8a  f7fffffe          BL       uart_putchar
004d8e  210a              MOVS     r1,#0xa
004d90  48a5              LDR      r0,|L1.20520|
004d92  f7fffffe          BL       uart_putchar
004d96  210a              MOVS     r1,#0xa
004d98  48a3              LDR      r0,|L1.20520|
004d9a  f7fffffe          BL       uart_putchar
004d9e  210a              MOVS     r1,#0xa
004da0  48a1              LDR      r0,|L1.20520|
004da2  f7fffffe          BL       uart_putchar
004da6  210a              MOVS     r1,#0xa
004da8  489f              LDR      r0,|L1.20520|
004daa  f7fffffe          BL       uart_putchar
004dae  210a              MOVS     r1,#0xa
004db0  489d              LDR      r0,|L1.20520|
004db2  f7fffffe          BL       uart_putchar
004db6  210a              MOVS     r1,#0xa
004db8  489b              LDR      r0,|L1.20520|
004dba  f7fffffe          BL       uart_putchar
004dbe  210a              MOVS     r1,#0xa
004dc0  4899              LDR      r0,|L1.20520|
004dc2  f7fffffe          BL       uart_putchar
004dc6  210a              MOVS     r1,#0xa
004dc8  4897              LDR      r0,|L1.20520|
004dca  f7fffffe          BL       uart_putchar
004dce  210a              MOVS     r1,#0xa
004dd0  4895              LDR      r0,|L1.20520|
004dd2  f7fffffe          BL       uart_putchar
004dd6  210a              MOVS     r1,#0xa
004dd8  4893              LDR      r0,|L1.20520|
004dda  f7fffffe          BL       uart_putchar
004dde  210a              MOVS     r1,#0xa
004de0  4891              LDR      r0,|L1.20520|
004de2  f7fffffe          BL       uart_putchar
004de6  210a              MOVS     r1,#0xa
004de8  488f              LDR      r0,|L1.20520|
004dea  f7fffffe          BL       uart_putchar
004dee  210a              MOVS     r1,#0xa
004df0  488d              LDR      r0,|L1.20520|
004df2  f7fffffe          BL       uart_putchar
004df6  210a              MOVS     r1,#0xa
004df8  488b              LDR      r0,|L1.20520|
004dfa  f7fffffe          BL       uart_putchar
004dfe  210a              MOVS     r1,#0xa
004e00  4889              LDR      r0,|L1.20520|
004e02  f7fffffe          BL       uart_putchar
004e06  210a              MOVS     r1,#0xa
004e08  4887              LDR      r0,|L1.20520|
004e0a  f7fffffe          BL       uart_putchar
004e0e  210a              MOVS     r1,#0xa
004e10  4885              LDR      r0,|L1.20520|
004e12  f7fffffe          BL       uart_putchar
004e16  210a              MOVS     r1,#0xa
004e18  4883              LDR      r0,|L1.20520|
004e1a  f7fffffe          BL       uart_putchar
004e1e  210a              MOVS     r1,#0xa
004e20  4881              LDR      r0,|L1.20520|
004e22  f7fffffe          BL       uart_putchar
004e26  210a              MOVS     r1,#0xa
004e28  487f              LDR      r0,|L1.20520|
004e2a  f7fffffe          BL       uart_putchar
004e2e  210a              MOVS     r1,#0xa
004e30  487d              LDR      r0,|L1.20520|
004e32  f7fffffe          BL       uart_putchar
004e36  210a              MOVS     r1,#0xa
004e38  487b              LDR      r0,|L1.20520|
004e3a  f7fffffe          BL       uart_putchar
004e3e  210a              MOVS     r1,#0xa
004e40  4879              LDR      r0,|L1.20520|
004e42  f7fffffe          BL       uart_putchar
004e46  210a              MOVS     r1,#0xa
004e48  4877              LDR      r0,|L1.20520|
004e4a  f7fffffe          BL       uart_putchar
004e4e  210a              MOVS     r1,#0xa
004e50  4875              LDR      r0,|L1.20520|
004e52  f7fffffe          BL       uart_putchar
004e56  210a              MOVS     r1,#0xa
004e58  4873              LDR      r0,|L1.20520|
004e5a  f7fffffe          BL       uart_putchar
004e5e  210a              MOVS     r1,#0xa
004e60  4871              LDR      r0,|L1.20520|
004e62  f7fffffe          BL       uart_putchar
004e66  210a              MOVS     r1,#0xa
004e68  486f              LDR      r0,|L1.20520|
004e6a  f7fffffe          BL       uart_putchar
004e6e  210a              MOVS     r1,#0xa
004e70  486d              LDR      r0,|L1.20520|
004e72  f7fffffe          BL       uart_putchar
004e76  210a              MOVS     r1,#0xa
004e78  486b              LDR      r0,|L1.20520|
004e7a  f7fffffe          BL       uart_putchar
004e7e  210a              MOVS     r1,#0xa
004e80  4869              LDR      r0,|L1.20520|
004e82  f7fffffe          BL       uart_putchar
004e86  210a              MOVS     r1,#0xa
004e88  4867              LDR      r0,|L1.20520|
004e8a  f7fffffe          BL       uart_putchar
004e8e  210a              MOVS     r1,#0xa
004e90  4865              LDR      r0,|L1.20520|
004e92  f7fffffe          BL       uart_putchar
004e96  210a              MOVS     r1,#0xa
004e98  4863              LDR      r0,|L1.20520|
004e9a  f7fffffe          BL       uart_putchar
004e9e  210a              MOVS     r1,#0xa
004ea0  4861              LDR      r0,|L1.20520|
004ea2  f7fffffe          BL       uart_putchar
004ea6  210a              MOVS     r1,#0xa
004ea8  485f              LDR      r0,|L1.20520|
004eaa  f7fffffe          BL       uart_putchar
004eae  210a              MOVS     r1,#0xa
004eb0  485d              LDR      r0,|L1.20520|
004eb2  f7fffffe          BL       uart_putchar
004eb6  210a              MOVS     r1,#0xa
004eb8  485b              LDR      r0,|L1.20520|
004eba  f7fffffe          BL       uart_putchar
004ebe  210a              MOVS     r1,#0xa
004ec0  4859              LDR      r0,|L1.20520|
004ec2  f7fffffe          BL       uart_putchar
004ec6  210a              MOVS     r1,#0xa
004ec8  4857              LDR      r0,|L1.20520|
004eca  f7fffffe          BL       uart_putchar
004ece  210a              MOVS     r1,#0xa
004ed0  4855              LDR      r0,|L1.20520|
004ed2  f7fffffe          BL       uart_putchar
004ed6  210a              MOVS     r1,#0xa
004ed8  4853              LDR      r0,|L1.20520|
004eda  f7fffffe          BL       uart_putchar
004ede  210a              MOVS     r1,#0xa
004ee0  4851              LDR      r0,|L1.20520|
004ee2  f7fffffe          BL       uart_putchar
004ee6  210a              MOVS     r1,#0xa
004ee8  484f              LDR      r0,|L1.20520|
004eea  f7fffffe          BL       uart_putchar
;;;605    								
;;;606    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004eee  bf00              NOP      
                  |L1.20208|
004ef0  494e              LDR      r1,|L1.20524|
004ef2  484f              LDR      r0,|L1.20528|
004ef4  f7fffffe          BL       strstr
004ef8  2800              CMP      r0,#0
004efa  d10a              BNE      |L1.20242|
004efc  494b              LDR      r1,|L1.20524|
004efe  398c              SUBS     r1,r1,#0x8c
004f00  484b              LDR      r0,|L1.20528|
004f02  f7fffffe          BL       strstr
004f06  2800              CMP      r0,#0
004f08  d103              BNE      |L1.20242|
004f0a  484a              LDR      r0,|L1.20532|
004f0c  6800              LDR      r0,[r0,#0]  ; tout
004f0e  2805              CMP      r0,#5
004f10  ddee              BLE      |L1.20208|
                  |L1.20242|
;;;607    									{}
;;;608    	                 memset(data,0,strlen(data));
004f12  4849              LDR      r0,|L1.20536|
004f14  f7fffffe          BL       strlen
004f18  4601              MOV      r1,r0
004f1a  9001              STR      r0,[sp,#4]
004f1c  4846              LDR      r0,|L1.20536|
004f1e  f7fffffe          BL       __aeabi_memclr
;;;609    									 clear();
004f22  f7fffffe          BL       clear
;;;610      								logged=1;}			//
004f26  2001              MOVS     r0,#1
004f28  4949              LDR      r1,|L1.20560|
004f2a  6008              STR      r0,[r1,#0]  ; logged
                  |L1.20268|
;;;611    
;;;612    							
;;;613    
;;;614    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;615    	else
;;;616    	{
;;;617    		//send_chunk();
;;;618    	}		
;;;619    								
;;;620    								
;;;621    								
;;;622    	memset(data,0,strlen(data));	
004f2c  4842              LDR      r0,|L1.20536|
004f2e  f7fffffe          BL       strlen
004f32  4601              MOV      r1,r0
004f34  9001              STR      r0,[sp,#4]
004f36  4840              LDR      r0,|L1.20536|
004f38  f7fffffe          BL       __aeabi_memclr
;;;623    	uart_putchar(UART1_BASE_PTR, 0x1A);
004f3c  211a              MOVS     r1,#0x1a
004f3e  483a              LDR      r0,|L1.20520|
004f40  f7fffffe          BL       uart_putchar
                  |L1.20292|
;;;624    
;;;625    while(1)
004f44  e3fd              B        |L1.22338|
                  |L1.20294|
;;;626    {
;;;627    LED_state();
004f46  f7fffffe          BL       LED_state
;;;628    LED_state2();
004f4a  f7fffffe          BL       LED_state2
;;;629    RESET_ON; //not reset
004f4e  2020              MOVS     r0,#0x20
004f50  4940              LDR      r1,|L1.20564|
004f52  6048              STR      r0,[r1,#4]
;;;630    msg_sim800(); 
004f54  f7fffffe          BL       msg_sim800
;;;631    	DTR_OFF;		// not sleep	
004f58  2080              MOVS     r0,#0x80
004f5a  493e              LDR      r1,|L1.20564|
004f5c  3140              ADDS     r1,r1,#0x40
004f5e  6088              STR      r0,[r1,#8]
;;;632    	delay(200);
004f60  20c8              MOVS     r0,#0xc8
004f62  f7fffffe          BL       delay
;;;633    
;;;634    	sleep_flag=0;
004f66  2000              MOVS     r0,#0
004f68  493b              LDR      r1,|L1.20568|
004f6a  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;635    //	if(voltagecbc<4000){breach=1;}
;;;636    //	else{breach=0;}
;;;637    	if(	(GPIOC_PDIR & 0x00000001) || (GPIOB_PDIR & 0x00000001)){
004f6c  4839              LDR      r0,|L1.20564|
004f6e  6900              LDR      r0,[r0,#0x10]
004f70  07c0              LSLS     r0,r0,#31
004f72  0fc0              LSRS     r0,r0,#31
004f74  2800              CMP      r0,#0
004f76  d106              BNE      |L1.20358|
004f78  4836              LDR      r0,|L1.20564|
004f7a  3840              SUBS     r0,r0,#0x40
004f7c  6900              LDR      r0,[r0,#0x10]
004f7e  07c0              LSLS     r0,r0,#31
004f80  0fc0              LSRS     r0,r0,#31
004f82  2800              CMP      r0,#0
004f84  d007              BEQ      |L1.20374|
                  |L1.20358|
;;;638    	DTR_OFF;sleep_flag = 0;
004f86  2080              MOVS     r0,#0x80
004f88  4932              LDR      r1,|L1.20564|
004f8a  3140              ADDS     r1,r1,#0x40
004f8c  6088              STR      r0,[r1,#8]
004f8e  2000              MOVS     r0,#0
004f90  4931              LDR      r1,|L1.20568|
004f92  6008              STR      r0,[r1,#0]  ; sleep_flag
004f94  e006              B        |L1.20388|
                  |L1.20374|
;;;639    	}
;;;640    	else{
;;;641    	DTR_ON;sleep_flag=1;
004f96  2080              MOVS     r0,#0x80
004f98  492e              LDR      r1,|L1.20564|
004f9a  3140              ADDS     r1,r1,#0x40
004f9c  6048              STR      r0,[r1,#4]
004f9e  2001              MOVS     r0,#1
004fa0  492d              LDR      r1,|L1.20568|
004fa2  6008              STR      r0,[r1,#0]  ; sleep_flag
                  |L1.20388|
;;;642    	}
;;;643    
;;;644    	
;;;645    	
;;;646    if(rtcticks2>=1500){
004fa4  482d              LDR      r0,|L1.20572|
004fa6  6800              LDR      r0,[r0,#0]  ; rtcticks2
004fa8  492d              LDR      r1,|L1.20576|
004faa  4288              CMP      r0,r1
004fac  db3b              BLT      |L1.20518|
;;;647    	DTR_OFF;
004fae  2080              MOVS     r0,#0x80
004fb0  4928              LDR      r1,|L1.20564|
004fb2  3140              ADDS     r1,r1,#0x40
004fb4  6088              STR      r0,[r1,#8]
;;;648    	send_modem("\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n");
004fb6  a02b              ADR      r0,|L1.20580|
004fb8  f7fffffe          BL       send_modem
;;;649    	clear();
004fbc  f7fffffe          BL       clear
;;;650    		delay(100);
004fc0  2064              MOVS     r0,#0x64
004fc2  f7fffffe          BL       delay
;;;651    
;;;652    	savecursor();
004fc6  f7fffffe          BL       savecursor
;;;653    	
;;;654    				memset(at_,0,100);
004fca  2164              MOVS     r1,#0x64
004fcc  481b              LDR      r0,|L1.20540|
004fce  f7fffffe          BL       __aeabi_memclr
;;;655    				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004fd2  4819              LDR      r0,|L1.20536|
004fd4  f7fffffe          BL       strlen
004fd8  1c40              ADDS     r0,r0,#1
004fda  4603              MOV      r3,r0
004fdc  4a18              LDR      r2,|L1.20544|
004fde  4913              LDR      r1,|L1.20524|
004fe0  3938              SUBS     r1,r1,#0x38
004fe2  9001              STR      r0,[sp,#4]
004fe4  4815              LDR      r0,|L1.20540|
004fe6  f7fffffe          BL       __2sprintf
;;;656    				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004fea  2005              MOVS     r0,#5
004fec  4b0f              LDR      r3,|L1.20524|
004fee  3b8c              SUBS     r3,r3,#0x8c
004ff0  461a              MOV      r2,r3
004ff2  3278              ADDS     r2,r2,#0x78
004ff4  a113              ADR      r1,|L1.20548|
004ff6  9000              STR      r0,[sp,#0]
004ff8  4810              LDR      r0,|L1.20540|
004ffa  f7fffffe          BL       send_SD
;;;657    if(strstr(uart_string_gsm,"ERROR")){
004ffe  490b              LDR      r1,|L1.20524|
005000  398c              SUBS     r1,r1,#0x8c
005002  480b              LDR      r0,|L1.20528|
005004  f7fffffe          BL       strstr
005008  2800              CMP      r0,#0
00500a  d004              BEQ      |L1.20502|
;;;658    	drive[0]='C';drive[1]=':';
00500c  2043              MOVS     r0,#0x43
00500e  490c              LDR      r1,|L1.20544|
005010  7008              STRB     r0,[r1,#0]
005012  203a              MOVS     r0,#0x3a
005014  7048              STRB     r0,[r1,#1]
                  |L1.20502|
;;;659    }	
;;;660    				//clear();	
;;;661    				k2=0;									//string array counter for uart 1
005016  2000              MOVS     r0,#0
005018  490b              LDR      r1,|L1.20552|
00501a  6008              STR      r0,[r1,#0]  ; k2
;;;662    				tout=0;	
00501c  4905              LDR      r1,|L1.20532|
00501e  6008              STR      r0,[r1,#0]  ; tout
;;;663    				for(k=0;k<strlen(data);k++)
005020  490a              LDR      r1,|L1.20556|
005022  6008              STR      r0,[r1,#0]  ; k
005024  e04c              B        |L1.20672|
                  |L1.20518|
005026  e159              B        |L1.21212|
                  |L1.20520|
                          DCD      0x4006b000
                  |L1.20524|
                          DCD      ||.text||+0x8fc
                  |L1.20528|
                          DCD      uart_string_gsm
                  |L1.20532|
                          DCD      tout
                  |L1.20536|
                          DCD      data
                  |L1.20540|
                          DCD      at_
                  |L1.20544|
                          DCD      drive
                  |L1.20548|
005044  3e00              DCB      ">",0
005046  00                DCB      0
005047  00                DCB      0
                  |L1.20552|
                          DCD      ||k2||
                  |L1.20556|
                          DCD      k
                  |L1.20560|
                          DCD      logged
                  |L1.20564|
                          DCD      0x400ff080
                  |L1.20568|
                          DCD      sleep_flag
                  |L1.20572|
                          DCD      rtcticks2
                  |L1.20576|
                          DCD      0x000005dc
                  |L1.20580|
005064  0d0a0d0a          DCB      "\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n"
005068  0d0a0a0a
00506c  0a0a0a44
005070  45564943
005074  45204953
005078  20524553
00507c  45545449
005080  4e472e2e
005084  2e2e2e2e
005088  2e0a0a0a
00508c  0a      
00508d  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n",0
005091  0a0a0a0a
005095  0a0a0a0a
005099  0a0a0a0a
00509d  0a0a0d0a
0050a1  0a0a00  
                  |L1.20644|
;;;664    				{
;;;665    					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0050a4  48fd              LDR      r0,|L1.21660|
0050a6  49fe              LDR      r1,|L1.21664|
0050a8  6809              LDR      r1,[r1,#0]  ; k
0050aa  5c40              LDRB     r0,[r0,r1]
0050ac  4601              MOV      r1,r0
0050ae  9001              STR      r0,[sp,#4]
0050b0  48fc              LDR      r0,|L1.21668|
0050b2  f7fffffe          BL       uart_putchar
0050b6  48fa              LDR      r0,|L1.21664|
0050b8  6800              LDR      r0,[r0,#0]            ;663  ; k
0050ba  1c40              ADDS     r0,r0,#1              ;663
0050bc  49f8              LDR      r1,|L1.21664|
0050be  6008              STR      r0,[r1,#0]            ;663  ; k
                  |L1.20672|
0050c0  48f6              LDR      r0,|L1.21660|
0050c2  f7fffffe          BL       strlen
0050c6  49f6              LDR      r1,|L1.21664|
0050c8  6809              LDR      r1,[r1,#0]            ;663  ; k
0050ca  4288              CMP      r0,r1                 ;663
0050cc  d8ea              BHI      |L1.20644|
;;;666    				}	
;;;667    				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0050ce  210a              MOVS     r1,#0xa
0050d0  48f4              LDR      r0,|L1.21668|
0050d2  f7fffffe          BL       uart_putchar
0050d6  210a              MOVS     r1,#0xa
0050d8  48f2              LDR      r0,|L1.21668|
0050da  f7fffffe          BL       uart_putchar
0050de  210a              MOVS     r1,#0xa
0050e0  48f0              LDR      r0,|L1.21668|
0050e2  f7fffffe          BL       uart_putchar
0050e6  210a              MOVS     r1,#0xa
0050e8  48ee              LDR      r0,|L1.21668|
0050ea  f7fffffe          BL       uart_putchar
0050ee  210a              MOVS     r1,#0xa
0050f0  48ec              LDR      r0,|L1.21668|
0050f2  f7fffffe          BL       uart_putchar
0050f6  210a              MOVS     r1,#0xa
0050f8  48ea              LDR      r0,|L1.21668|
0050fa  f7fffffe          BL       uart_putchar
0050fe  210a              MOVS     r1,#0xa
005100  48e8              LDR      r0,|L1.21668|
005102  f7fffffe          BL       uart_putchar
005106  210a              MOVS     r1,#0xa
005108  48e6              LDR      r0,|L1.21668|
00510a  f7fffffe          BL       uart_putchar
00510e  210a              MOVS     r1,#0xa
005110  48e4              LDR      r0,|L1.21668|
005112  f7fffffe          BL       uart_putchar
005116  210a              MOVS     r1,#0xa
005118  48e2              LDR      r0,|L1.21668|
00511a  f7fffffe          BL       uart_putchar
00511e  210a              MOVS     r1,#0xa
005120  48e0              LDR      r0,|L1.21668|
005122  f7fffffe          BL       uart_putchar
005126  210a              MOVS     r1,#0xa
005128  48de              LDR      r0,|L1.21668|
00512a  f7fffffe          BL       uart_putchar
00512e  210a              MOVS     r1,#0xa
005130  48dc              LDR      r0,|L1.21668|
005132  f7fffffe          BL       uart_putchar
005136  210a              MOVS     r1,#0xa
005138  48da              LDR      r0,|L1.21668|
00513a  f7fffffe          BL       uart_putchar
00513e  210a              MOVS     r1,#0xa
005140  48d8              LDR      r0,|L1.21668|
005142  f7fffffe          BL       uart_putchar
005146  210a              MOVS     r1,#0xa
005148  48d6              LDR      r0,|L1.21668|
00514a  f7fffffe          BL       uart_putchar
00514e  210a              MOVS     r1,#0xa
005150  48d4              LDR      r0,|L1.21668|
005152  f7fffffe          BL       uart_putchar
005156  210a              MOVS     r1,#0xa
005158  48d2              LDR      r0,|L1.21668|
00515a  f7fffffe          BL       uart_putchar
00515e  210a              MOVS     r1,#0xa
005160  48d0              LDR      r0,|L1.21668|
005162  f7fffffe          BL       uart_putchar
005166  210a              MOVS     r1,#0xa
005168  48ce              LDR      r0,|L1.21668|
00516a  f7fffffe          BL       uart_putchar
00516e  210a              MOVS     r1,#0xa
005170  48cc              LDR      r0,|L1.21668|
005172  f7fffffe          BL       uart_putchar
005176  210a              MOVS     r1,#0xa
005178  48ca              LDR      r0,|L1.21668|
00517a  f7fffffe          BL       uart_putchar
00517e  210a              MOVS     r1,#0xa
005180  48c8              LDR      r0,|L1.21668|
005182  f7fffffe          BL       uart_putchar
005186  210a              MOVS     r1,#0xa
005188  48c6              LDR      r0,|L1.21668|
00518a  f7fffffe          BL       uart_putchar
00518e  210a              MOVS     r1,#0xa
005190  48c4              LDR      r0,|L1.21668|
005192  f7fffffe          BL       uart_putchar
005196  210a              MOVS     r1,#0xa
005198  48c2              LDR      r0,|L1.21668|
00519a  f7fffffe          BL       uart_putchar
00519e  210a              MOVS     r1,#0xa
0051a0  48c0              LDR      r0,|L1.21668|
0051a2  f7fffffe          BL       uart_putchar
0051a6  210a              MOVS     r1,#0xa
0051a8  48be              LDR      r0,|L1.21668|
0051aa  f7fffffe          BL       uart_putchar
0051ae  210a              MOVS     r1,#0xa
0051b0  48bc              LDR      r0,|L1.21668|
0051b2  f7fffffe          BL       uart_putchar
0051b6  210a              MOVS     r1,#0xa
0051b8  48ba              LDR      r0,|L1.21668|
0051ba  f7fffffe          BL       uart_putchar
0051be  210a              MOVS     r1,#0xa
0051c0  48b8              LDR      r0,|L1.21668|
0051c2  f7fffffe          BL       uart_putchar
0051c6  210a              MOVS     r1,#0xa
0051c8  48b6              LDR      r0,|L1.21668|
0051ca  f7fffffe          BL       uart_putchar
0051ce  210a              MOVS     r1,#0xa
0051d0  48b4              LDR      r0,|L1.21668|
0051d2  f7fffffe          BL       uart_putchar
0051d6  210a              MOVS     r1,#0xa
0051d8  48b2              LDR      r0,|L1.21668|
0051da  f7fffffe          BL       uart_putchar
0051de  210a              MOVS     r1,#0xa
0051e0  48b0              LDR      r0,|L1.21668|
0051e2  f7fffffe          BL       uart_putchar
0051e6  210a              MOVS     r1,#0xa
0051e8  48ae              LDR      r0,|L1.21668|
0051ea  f7fffffe          BL       uart_putchar
0051ee  210a              MOVS     r1,#0xa
0051f0  48ac              LDR      r0,|L1.21668|
0051f2  f7fffffe          BL       uart_putchar
0051f6  210a              MOVS     r1,#0xa
0051f8  48aa              LDR      r0,|L1.21668|
0051fa  f7fffffe          BL       uart_putchar
0051fe  210a              MOVS     r1,#0xa
005200  48a8              LDR      r0,|L1.21668|
005202  f7fffffe          BL       uart_putchar
005206  210a              MOVS     r1,#0xa
005208  48a6              LDR      r0,|L1.21668|
00520a  f7fffffe          BL       uart_putchar
00520e  210a              MOVS     r1,#0xa
005210  48a4              LDR      r0,|L1.21668|
005212  f7fffffe          BL       uart_putchar
005216  210a              MOVS     r1,#0xa
005218  48a2              LDR      r0,|L1.21668|
00521a  f7fffffe          BL       uart_putchar
00521e  210a              MOVS     r1,#0xa
005220  48a0              LDR      r0,|L1.21668|
005222  f7fffffe          BL       uart_putchar
005226  210a              MOVS     r1,#0xa
005228  489e              LDR      r0,|L1.21668|
00522a  f7fffffe          BL       uart_putchar
00522e  210a              MOVS     r1,#0xa
005230  489c              LDR      r0,|L1.21668|
005232  f7fffffe          BL       uart_putchar
005236  210a              MOVS     r1,#0xa
005238  489a              LDR      r0,|L1.21668|
00523a  f7fffffe          BL       uart_putchar
00523e  210a              MOVS     r1,#0xa
005240  4898              LDR      r0,|L1.21668|
005242  f7fffffe          BL       uart_putchar
005246  210a              MOVS     r1,#0xa
005248  4896              LDR      r0,|L1.21668|
00524a  f7fffffe          BL       uart_putchar
00524e  210a              MOVS     r1,#0xa
005250  4894              LDR      r0,|L1.21668|
005252  f7fffffe          BL       uart_putchar
005256  210a              MOVS     r1,#0xa
005258  4892              LDR      r0,|L1.21668|
00525a  f7fffffe          BL       uart_putchar
00525e  210a              MOVS     r1,#0xa
005260  4890              LDR      r0,|L1.21668|
005262  f7fffffe          BL       uart_putchar
005266  210a              MOVS     r1,#0xa
005268  488e              LDR      r0,|L1.21668|
00526a  f7fffffe          BL       uart_putchar
00526e  210a              MOVS     r1,#0xa
005270  488c              LDR      r0,|L1.21668|
005272  f7fffffe          BL       uart_putchar
005276  210a              MOVS     r1,#0xa
005278  488a              LDR      r0,|L1.21668|
00527a  f7fffffe          BL       uart_putchar
00527e  210a              MOVS     r1,#0xa
005280  4888              LDR      r0,|L1.21668|
005282  f7fffffe          BL       uart_putchar
005286  210a              MOVS     r1,#0xa
005288  4886              LDR      r0,|L1.21668|
00528a  f7fffffe          BL       uart_putchar
00528e  210a              MOVS     r1,#0xa
005290  4884              LDR      r0,|L1.21668|
005292  f7fffffe          BL       uart_putchar
;;;668    				//memset(data,0,1000);
;;;669    				//timer counts to wait for characters in uart 1 									
;;;670    				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005296  bf00              NOP      
                  |L1.21144|
005298  4983              LDR      r1,|L1.21672|
00529a  4884              LDR      r0,|L1.21676|
00529c  f7fffffe          BL       strstr
0052a0  2800              CMP      r0,#0
0052a2  d10a              BNE      |L1.21178|
0052a4  4980              LDR      r1,|L1.21672|
0052a6  398c              SUBS     r1,r1,#0x8c
0052a8  4880              LDR      r0,|L1.21676|
0052aa  f7fffffe          BL       strstr
0052ae  2800              CMP      r0,#0
0052b0  d103              BNE      |L1.21178|
0052b2  487f              LDR      r0,|L1.21680|
0052b4  6800              LDR      r0,[r0,#0]  ; tout
0052b6  2805              CMP      r0,#5
0052b8  ddee              BLE      |L1.21144|
                  |L1.21178|
;;;671    				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;672    				}
;;;673    				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;674    				//memset(data,0,strlen(data));
;;;675    				//clear();
;;;676    	RESET_OFF;
0052ba  2020              MOVS     r0,#0x20
0052bc  497d              LDR      r1,|L1.21684|
0052be  6088              STR      r0,[r1,#8]
;;;677    	RESET_OFF;
0052c0  6088              STR      r0,[r1,#8]
;;;678    	delay(100);	
0052c2  2064              MOVS     r0,#0x64
0052c4  f7fffffe          BL       delay
;;;679    	RESET_ON;
0052c8  2020              MOVS     r0,#0x20
0052ca  497a              LDR      r1,|L1.21684|
0052cc  6048              STR      r0,[r1,#4]
;;;680    	RESET_ON;	
0052ce  6048              STR      r0,[r1,#4]
;;;681    	delay(100);
0052d0  2064              MOVS     r0,#0x64
0052d2  f7fffffe          BL       delay
;;;682    	rtcticks2 =0;
0052d6  2000              MOVS     r0,#0
0052d8  4977              LDR      r1,|L1.21688|
0052da  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.21212|
;;;683    
;;;684    	}//3600	
;;;685    memset(at_,0,100);
0052dc  2164              MOVS     r1,#0x64
0052de  4877              LDR      r0,|L1.21692|
0052e0  f7fffffe          BL       __aeabi_memclr
;;;686    sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>         \n \n\n\r\n",aliveping,k5,rtcticks2);							
0052e4  4874              LDR      r0,|L1.21688|
0052e6  6800              LDR      r0,[r0,#0]  ; rtcticks2
0052e8  9000              STR      r0,[sp,#0]
0052ea  4875              LDR      r0,|L1.21696|
0052ec  6803              LDR      r3,[r0,#0]  ; k5
0052ee  4875              LDR      r0,|L1.21700|
0052f0  a175              ADR      r1,|L1.21704|
0052f2  6802              LDR      r2,[r0,#0]  ; aliveping
0052f4  4871              LDR      r0,|L1.21692|
0052f6  f7fffffe          BL       __2sprintf
;;;687    //send_modem(at_);
;;;688    //send_modem(num2);	
;;;689    	
;;;690    	
;;;691    if	((sleep_flag != 1  || (aliveping > 5) ) )			
0052fa  4881              LDR      r0,|L1.21760|
0052fc  6800              LDR      r0,[r0,#0]  ; sleep_flag
0052fe  2801              CMP      r0,#1
005300  d104              BNE      |L1.21260|
005302  4870              LDR      r0,|L1.21700|
005304  6800              LDR      r0,[r0,#0]  ; aliveping
005306  2805              CMP      r0,#5
005308  dc00              BGT      |L1.21260|
00530a  e61b              B        |L1.20292|
                  |L1.21260|
;;;692    {
;;;693    	DTR_OFF;
00530c  2080              MOVS     r0,#0x80
00530e  4969              LDR      r1,|L1.21684|
005310  3140              ADDS     r1,r1,#0x40
005312  6088              STR      r0,[r1,#8]
;;;694    	sleep_flag=0;
005314  2000              MOVS     r0,#0
005316  497a              LDR      r1,|L1.21760|
005318  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;695    	send_GSM("\r\nAT+CIPCLOSE\r\n", "CLOSE OK", "ERROR" , "ERROR:",tmeout);		
00531a  487a              LDR      r0,|L1.21764|
00531c  6800              LDR      r0,[r0,#0]  ; tmeout
00531e  4b7a              LDR      r3,|L1.21768|
005320  4a61              LDR      r2,|L1.21672|
005322  3a8c              SUBS     r2,r2,#0x8c
005324  a179              ADR      r1,|L1.21772|
005326  9000              STR      r0,[sp,#0]
005328  a07b              ADR      r0,|L1.21784|
00532a  f7fffffe          BL       send_GSM
;;;696    	memset(at_,0,100);
00532e  2164              MOVS     r1,#0x64
005330  4862              LDR      r0,|L1.21692|
005332  f7fffffe          BL       __aeabi_memclr
;;;697    	memset(data,0,strlen(data));
005336  4859              LDR      r0,|L1.21660|
005338  f7fffffe          BL       strlen
00533c  4601              MOV      r1,r0
00533e  9001              STR      r0,[sp,#4]
005340  4856              LDR      r0,|L1.21660|
005342  f7fffffe          BL       __aeabi_memclr
;;;698    
;;;699    	GPS_COLLECT();	
005346  f7fffffe          BL       GPS_COLLECT
;;;700    	
;;;701    	if((aliveping>5))	
00534a  485e              LDR      r0,|L1.21700|
00534c  6800              LDR      r0,[r0,#0]  ; aliveping
00534e  2805              CMP      r0,#5
005350  dd6e              BLE      |L1.21552|
;;;702    	{
;;;703    			memset(ignstr,0,2);
005352  4875              LDR      r0,|L1.21800|
005354  2100              MOVS     r1,#0
005356  7001              STRB     r1,[r0,#0]
005358  7041              STRB     r1,[r0,#1]
;;;704    if(GPIOB_PDIR & 0x00000001){
00535a  4856              LDR      r0,|L1.21684|
00535c  3840              SUBS     r0,r0,#0x40
00535e  6900              LDR      r0,[r0,#0x10]
005360  07c0              LSLS     r0,r0,#31
005362  0fc0              LSRS     r0,r0,#31
005364  2800              CMP      r0,#0
005366  d007              BEQ      |L1.21368|
;;;705    			sprintf(ignstr,"%d,%ld",1,rtcticks2);
005368  4853              LDR      r0,|L1.21688|
00536a  2201              MOVS     r2,#1
00536c  a16f              ADR      r1,|L1.21804|
00536e  6803              LDR      r3,[r0,#0]  ; rtcticks2
005370  486d              LDR      r0,|L1.21800|
005372  f7fffffe          BL       __2sprintf
005376  e006              B        |L1.21382|
                  |L1.21368|
;;;706    }
;;;707    else{
;;;708    				sprintf(ignstr,"%d,%ld",0,rtcticks2);
005378  484f              LDR      r0,|L1.21688|
00537a  2200              MOVS     r2,#0
00537c  a16b              ADR      r1,|L1.21804|
00537e  6803              LDR      r3,[r0,#0]  ; rtcticks2
005380  4869              LDR      r0,|L1.21800|
005382  f7fffffe          BL       __2sprintf
                  |L1.21382|
;;;709    
;;;710    }
;;;711    
;;;712    	adc_read(9);							
005386  2009              MOVS     r0,#9
005388  f7fffffe          BL       adc_read
;;;713    	memset(fuelstr,0,5);
00538c  2105              MOVS     r1,#5
00538e  4869              LDR      r0,|L1.21812|
005390  f7fffffe          BL       __aeabi_memclr4
;;;714    	sprintf(fuelstr,"%d,",fuel);
005394  4868              LDR      r0,|L1.21816|
005396  a169              ADR      r1,|L1.21820|
005398  6802              LDR      r2,[r0,#0]  ; fuel
00539a  4866              LDR      r0,|L1.21812|
00539c  f7fffffe          BL       __2sprintf
;;;715    memset(acstr,0,2); //ptb2
0053a0  4867              LDR      r0,|L1.21824|
0053a2  2100              MOVS     r1,#0
0053a4  8001              STRH     r1,[r0,#0]
;;;716    if(GPIOB_PDIR & 0x00000004){
0053a6  4843              LDR      r0,|L1.21684|
0053a8  3840              SUBS     r0,r0,#0x40
0053aa  6900              LDR      r0,[r0,#0x10]
0053ac  2104              MOVS     r1,#4
0053ae  4008              ANDS     r0,r0,r1
0053b0  2800              CMP      r0,#0
0053b2  d005              BEQ      |L1.21440|
;;;717    			sprintf(acstr,"%d",1);
0053b4  2201              MOVS     r2,#1
0053b6  a163              ADR      r1,|L1.21828|
0053b8  4861              LDR      r0,|L1.21824|
0053ba  f7fffffe          BL       __2sprintf
0053be  e004              B        |L1.21450|
                  |L1.21440|
;;;718    }
;;;719    else{
;;;720    				sprintf(acstr,"%d",0);
0053c0  2200              MOVS     r2,#0
0053c2  a160              ADR      r1,|L1.21828|
0053c4  485e              LDR      r0,|L1.21824|
0053c6  f7fffffe          BL       __2sprintf
                  |L1.21450|
;;;721    
;;;722    }
;;;723    
;;;724    		
;;;725    		aliveping=0;
0053ca  2000              MOVS     r0,#0
0053cc  493d              LDR      r1,|L1.21700|
0053ce  6008              STR      r0,[r1,#0]  ; aliveping
;;;726    		memset(data,0,strlen(data));	
0053d0  4832              LDR      r0,|L1.21660|
0053d2  f7fffffe          BL       strlen
0053d6  4601              MOV      r1,r0
0053d8  9001              STR      r0,[sp,#4]
0053da  4830              LDR      r0,|L1.21660|
0053dc  f7fffffe          BL       __aeabi_memclr
;;;727    		strcat(data,imei);strcat(data,",ALIVE,");strcat(data,num2);strcat(data,",F=");strcat(data,fuelstr);		strcat(data,",AC=");	
0053e0  4959              LDR      r1,|L1.21832|
0053e2  482e              LDR      r0,|L1.21660|
0053e4  f7fffffe          BL       strcat
0053e8  a158              ADR      r1,|L1.21836|
0053ea  482c              LDR      r0,|L1.21660|
0053ec  f7fffffe          BL       strcat
0053f0  4958              LDR      r1,|L1.21844|
0053f2  482a              LDR      r0,|L1.21660|
0053f4  f7fffffe          BL       strcat
0053f8  a157              ADR      r1,|L1.21848|
0053fa  4828              LDR      r0,|L1.21660|
0053fc  f7fffffe          BL       strcat
005400  494c              LDR      r1,|L1.21812|
005402  4826              LDR      r0,|L1.21660|
005404  f7fffffe          BL       strcat
005408  a154              ADR      r1,|L1.21852|
00540a  4824              LDR      r0,|L1.21660|
00540c  f7fffffe          BL       strcat
;;;728    		strcat(data,acstr);
005410  494b              LDR      r1,|L1.21824|
005412  4822              LDR      r0,|L1.21660|
005414  f7fffffe          BL       strcat
;;;729    		strcat(data,",I=");	
005418  a152              ADR      r1,|L1.21860|
00541a  4820              LDR      r0,|L1.21660|
00541c  f7fffffe          BL       strcat
;;;730    		strcat(data,ignstr);strcat(data,",\n\n\n"); 
005420  4941              LDR      r1,|L1.21800|
005422  481e              LDR      r0,|L1.21660|
005424  f7fffffe          BL       strcat
005428  a14f              ADR      r1,|L1.21864|
00542a  481c              LDR      r0,|L1.21660|
00542c  f7fffffe          BL       strcat
                  |L1.21552|
;;;731    	}	
;;;732    
;;;733    	msg_sim800(); 
005430  f7fffffe          BL       msg_sim800
;;;734    	
;;;735    		sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005434  4b4e              LDR      r3,|L1.21872|
005436  4a4f              LDR      r2,|L1.21876|
005438  4933              LDR      r1,|L1.21768|
00543a  3160              ADDS     r1,r1,#0x60
00543c  481f              LDR      r0,|L1.21692|
00543e  f7fffffe          BL       __2sprintf
;;;736    		send_GSM( at_ , "CONNECT", "ERROR" , "ERROR\r\n",tmeout);	
005442  4830              LDR      r0,|L1.21764|
005444  6800              LDR      r0,[r0,#0]  ; tmeout
005446  4b18              LDR      r3,|L1.21672|
005448  3b14              SUBS     r3,r3,#0x14
00544a  461a              MOV      r2,r3
00544c  3a78              SUBS     r2,r2,#0x78
00544e  492e              LDR      r1,|L1.21768|
005450  3180              ADDS     r1,r1,#0x80
005452  9000              STR      r0,[sp,#0]
005454  4819              LDR      r0,|L1.21692|
005456  f7fffffe          BL       send_GSM
;;;737    		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);	
00545a  482a              LDR      r0,|L1.21764|
00545c  6800              LDR      r0,[r0,#0]  ; tmeout
00545e  4b2a              LDR      r3,|L1.21768|
005460  3388              ADDS     r3,r3,#0x88
005462  4a11              LDR      r2,|L1.21672|
005464  3a8c              SUBS     r2,r2,#0x8c
005466  a144              ADR      r1,|L1.21880|
005468  9000              STR      r0,[sp,#0]
00546a  4618              MOV      r0,r3
00546c  3010              ADDS     r0,r0,#0x10
00546e  f7fffffe          BL       send_GSM
;;;738    		memset(stcond1,0,strlen(stcond1));
005472  4842              LDR      r0,|L1.21884|
005474  6800              LDR      r0,[r0,#0]  ; stcond1
005476  f7fffffe          BL       strlen
00547a  4601              MOV      r1,r0
00547c  9001              STR      r0,[sp,#4]
00547e  483f              LDR      r0,|L1.21884|
005480  6800              LDR      r0,[r0,#0]  ; stcond1
005482  f7fffffe          BL       __aeabi_memclr
;;;739    		memset(stcond2,0,strlen(stcond2));	
005486  483e              LDR      r0,|L1.21888|
005488  6800              LDR      r0,[r0,#0]  ; stcond2
00548a  f7fffffe          BL       strlen
00548e  4601              MOV      r1,r0
005490  9001              STR      r0,[sp,#4]
005492  483b              LDR      r0,|L1.21888|
005494  6800              LDR      r0,[r0,#0]  ; stcond2
005496  f7fffffe          BL       __aeabi_memclr
;;;740    		memset(stcond3,0,strlen(stcond3));	
00549a  e073              B        |L1.21892|
                  |L1.21660|
                          DCD      data
                  |L1.21664|
                          DCD      k
                  |L1.21668|
                          DCD      0x4006b000
                  |L1.21672|
                          DCD      ||.text||+0x8fc
                  |L1.21676|
                          DCD      uart_string_gsm
                  |L1.21680|
                          DCD      tout
                  |L1.21684|
                          DCD      0x400ff080
                  |L1.21688|
                          DCD      rtcticks2
                  |L1.21692|
                          DCD      at_
                  |L1.21696|
                          DCD      ||k5||
                  |L1.21700|
                          DCD      aliveping
                  |L1.21704|
0054c8  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>         \n \n"
0054cc  20202020
0054d0  20202020
0054d4  20202020
0054d8  20203c25
0054dc  643e2020
0054e0  203c2564
0054e4  3e202020
0054e8  3c3d2564
0054ec  3e202020
0054f0  20202020
0054f4  20200a20
0054f8  0a      
0054f9  0a0d0a00          DCB      "\n\r\n",0
0054fd  00                DCB      0
0054fe  00                DCB      0
0054ff  00                DCB      0
                  |L1.21760|
                          DCD      sleep_flag
                  |L1.21764|
                          DCD      tmeout
                  |L1.21768|
                          DCD      ||.text||+0xd54
                  |L1.21772|
00550c  434c4f53          DCB      "CLOSE OK",0
005510  45204f4b
005514  00      
005515  00                DCB      0
005516  00                DCB      0
005517  00                DCB      0
                  |L1.21784|
005518  0d0a4154          DCB      "\r\nAT+CIPCLOSE\r\n",0
00551c  2b434950
005520  434c4f53
005524  450d0a00
                  |L1.21800|
                          DCD      ignstr
                  |L1.21804|
00552c  25642c25          DCB      "%d,%ld",0
005530  6c6400  
005533  00                DCB      0
                  |L1.21812|
                          DCD      fuelstr
                  |L1.21816|
                          DCD      fuel
                  |L1.21820|
00553c  25642c00          DCB      "%d,",0
                  |L1.21824|
                          DCD      acstr
                  |L1.21828|
005544  256400            DCB      "%d",0
005547  00                DCB      0
                  |L1.21832|
                          DCD      imei
                  |L1.21836|
00554c  2c414c49          DCB      ",ALIVE,",0
005550  56452c00
                  |L1.21844|
                          DCD      num2
                  |L1.21848|
005558  2c463d00          DCB      ",F=",0
                  |L1.21852|
00555c  2c41433d          DCB      ",AC=",0
005560  00      
005561  00                DCB      0
005562  00                DCB      0
005563  00                DCB      0
                  |L1.21860|
005564  2c493d00          DCB      ",I=",0
                  |L1.21864|
005568  2c0a0a0a          DCB      ",\n\n\n",0
00556c  00      
00556d  00                DCB      0
00556e  00                DCB      0
00556f  00                DCB      0
                  |L1.21872|
                          DCD      port
                  |L1.21876|
                          DCD      ||ip||
                  |L1.21880|
005578  3e00              DCB      ">",0
00557a  00                DCB      0
00557b  00                DCB      0
                  |L1.21884|
                          DCD      stcond1
                  |L1.21888|
                          DCD      stcond2
                  |L1.21892|
005584  48fe              LDR      r0,|L1.22912|
005586  6800              LDR      r0,[r0,#0]  ; stcond3
005588  f7fffffe          BL       strlen
00558c  4601              MOV      r1,r0
00558e  9001              STR      r0,[sp,#4]
005590  48fb              LDR      r0,|L1.22912|
005592  6800              LDR      r0,[r0,#0]  ; stcond3
005594  f7fffffe          BL       __aeabi_memclr
;;;741    		memset(stcond4,0,strlen(stcond4));	
005598  48fa              LDR      r0,|L1.22916|
00559a  6800              LDR      r0,[r0,#0]  ; stcond4
00559c  f7fffffe          BL       strlen
0055a0  4601              MOV      r1,r0
0055a2  9001              STR      r0,[sp,#4]
0055a4  48f7              LDR      r0,|L1.22916|
0055a6  6800              LDR      r0,[r0,#0]  ; stcond4
0055a8  f7fffffe          BL       __aeabi_memclr
;;;742    		memset(con1d,0,strlen(con1d));	
0055ac  48f6              LDR      r0,|L1.22920|
0055ae  6800              LDR      r0,[r0,#0]  ; con1d
0055b0  f7fffffe          BL       strlen
0055b4  4601              MOV      r1,r0
0055b6  9001              STR      r0,[sp,#4]
0055b8  48f3              LDR      r0,|L1.22920|
0055ba  6800              LDR      r0,[r0,#0]  ; con1d
0055bc  f7fffffe          BL       __aeabi_memclr
;;;743    		cond=0;
0055c0  2000              MOVS     r0,#0
0055c2  49f2              LDR      r1,|L1.22924|
0055c4  7008              STRB     r0,[r1,#0]
;;;744    								cond=mystrstr(uart_string_gsm,'>');
0055c6  213e              MOVS     r1,#0x3e
0055c8  48f1              LDR      r0,|L1.22928|
0055ca  f7fffffe          BL       mystrstr
0055ce  49ef              LDR      r1,|L1.22924|
0055d0  7008              STRB     r0,[r1,#0]
;;;745    	
;;;746    								if(cond)	
0055d2  4608              MOV      r0,r1
0055d4  7800              LDRB     r0,[r0,#0]  ; cond
0055d6  2800              CMP      r0,#0
0055d8  d07e              BEQ      |L1.22232|
;;;747    								{		
;;;748    									clear();
0055da  f7fffffe          BL       clear
;;;749    									memset(uart_string_gsm,0,5000);
0055de  49ed              LDR      r1,|L1.22932|
0055e0  48eb              LDR      r0,|L1.22928|
0055e2  f7fffffe          BL       __aeabi_memclr
;;;750    									strcat(data,"\n\n");
0055e6  a1ec              ADR      r1,|L1.22936|
0055e8  48ec              LDR      r0,|L1.22940|
0055ea  f7fffffe          BL       strcat
;;;751    									len=strlen(data);
0055ee  48eb              LDR      r0,|L1.22940|
0055f0  f7fffffe          BL       strlen
0055f4  49ea              LDR      r1,|L1.22944|
0055f6  6008              STR      r0,[r1,#0]  ; len
;;;752    									tout=0;
0055f8  2000              MOVS     r0,#0
0055fa  49ea              LDR      r1,|L1.22948|
0055fc  6008              STR      r0,[r1,#0]  ; tout
;;;753    									k2=0;
0055fe  49ea              LDR      r1,|L1.22952|
005600  6008              STR      r0,[r1,#0]  ; k2
;;;754    									for(k=0;k<len;k++)
005602  49ea              LDR      r1,|L1.22956|
005604  6008              STR      r0,[r1,#0]  ; k
005606  e00d              B        |L1.22052|
                  |L1.22024|
;;;755    									{
;;;756    										uart_putchar(UART1_BASE_PTR, data[k]);
005608  48e4              LDR      r0,|L1.22940|
00560a  49e8              LDR      r1,|L1.22956|
00560c  6809              LDR      r1,[r1,#0]  ; k
00560e  5c40              LDRB     r0,[r0,r1]
005610  4601              MOV      r1,r0
005612  9001              STR      r0,[sp,#4]
005614  48e6              LDR      r0,|L1.22960|
005616  f7fffffe          BL       uart_putchar
00561a  48e4              LDR      r0,|L1.22956|
00561c  6800              LDR      r0,[r0,#0]            ;754  ; k
00561e  1c40              ADDS     r0,r0,#1              ;754
005620  49e2              LDR      r1,|L1.22956|
005622  6008              STR      r0,[r1,#0]            ;754  ; k
                  |L1.22052|
005624  48e1              LDR      r0,|L1.22956|
005626  6800              LDR      r0,[r0,#0]            ;754  ; k
005628  49dd              LDR      r1,|L1.22944|
00562a  6809              LDR      r1,[r1,#0]            ;754  ; len
00562c  4288              CMP      r0,r1                 ;754
00562e  dbeb              BLT      |L1.22024|
;;;757    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005630  210a              MOVS     r1,#0xa
005632  48df              LDR      r0,|L1.22960|
005634  f7fffffe          BL       uart_putchar
005638  211a              MOVS     r1,#0x1a
00563a  48dd              LDR      r0,|L1.22960|
00563c  f7fffffe          BL       uart_putchar
005640  211a              MOVS     r1,#0x1a
005642  48db              LDR      r0,|L1.22960|
005644  f7fffffe          BL       uart_putchar
005648  211a              MOVS     r1,#0x1a
00564a  48d9              LDR      r0,|L1.22960|
00564c  f7fffffe          BL       uart_putchar
005650  211a              MOVS     r1,#0x1a
005652  48d7              LDR      r0,|L1.22960|
005654  f7fffffe          BL       uart_putchar
005658  211a              MOVS     r1,#0x1a
00565a  48d5              LDR      r0,|L1.22960|
00565c  f7fffffe          BL       uart_putchar
;;;758    									do
005660  bf00              NOP      
                  |L1.22114|
;;;759    																{stcond1=strstr(uart_string_gsm,"SEND OK");
005662  49d4              LDR      r1,|L1.22964|
005664  48ca              LDR      r0,|L1.22928|
005666  f7fffffe          BL       strstr
00566a  49d3              LDR      r1,|L1.22968|
00566c  6008              STR      r0,[r1,#0]  ; stcond1
;;;760    																	stcond2=strstr(uart_string_gsm, "ERROR");
00566e  49d3              LDR      r1,|L1.22972|
005670  48c7              LDR      r0,|L1.22928|
005672  f7fffffe          BL       strstr
005676  49d2              LDR      r1,|L1.22976|
005678  6008              STR      r0,[r1,#0]  ; stcond2
;;;761    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00567a  49d2              LDR      r1,|L1.22980|
00567c  48c4              LDR      r0,|L1.22928|
00567e  f7fffffe          BL       strstr
005682  49bf              LDR      r1,|L1.22912|
005684  6008              STR      r0,[r1,#0]  ; stcond3
;;;762    																			stcond4=strstr(uart_string_gsm, "DEACT");	
005686  49cd              LDR      r1,|L1.22972|
005688  311c              ADDS     r1,r1,#0x1c
00568a  48c1              LDR      r0,|L1.22928|
00568c  f7fffffe          BL       strstr
005690  49bc              LDR      r1,|L1.22916|
005692  6008              STR      r0,[r1,#0]  ; stcond4
;;;763    																	
;;;764    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
005694  48ca              LDR      r0,|L1.22976|
005696  6800              LDR      r0,[r0,#0]  ; stcond2
005698  2800              CMP      r0,#0
00569a  d10f              BNE      |L1.22204|
00569c  48b8              LDR      r0,|L1.22912|
00569e  6800              LDR      r0,[r0,#0]  ; stcond3
0056a0  2800              CMP      r0,#0
0056a2  d10b              BNE      |L1.22204|
0056a4  4608              MOV      r0,r1
0056a6  6800              LDR      r0,[r0,#0]  ; stcond4
0056a8  2800              CMP      r0,#0
0056aa  d107              BNE      |L1.22204|
0056ac  48c2              LDR      r0,|L1.22968|
0056ae  6800              LDR      r0,[r0,#0]  ; stcond1
0056b0  2800              CMP      r0,#0
0056b2  d103              BNE      |L1.22204|
0056b4  48bb              LDR      r0,|L1.22948|
0056b6  6800              LDR      r0,[r0,#0]  ; tout
0056b8  2808              CMP      r0,#8
0056ba  ddd2              BLE      |L1.22114|
                  |L1.22204|
;;;765    																//delay(10);clear();
;;;766    														uart_putchar(UART1_BASE_PTR,0x1A);
0056bc  211a              MOVS     r1,#0x1a
0056be  48bc              LDR      r0,|L1.22960|
0056c0  f7fffffe          BL       uart_putchar
;;;767    												//delay(10);
;;;768    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0056c4  211a              MOVS     r1,#0x1a
0056c6  48ba              LDR      r0,|L1.22960|
0056c8  f7fffffe          BL       uart_putchar
0056cc  211a              MOVS     r1,#0x1a
0056ce  48b8              LDR      r0,|L1.22960|
0056d0  f7fffffe          BL       uart_putchar
0056d4  211a              MOVS     r1,#0x1a
0056d6  e000              B        |L1.22234|
                  |L1.22232|
0056d8  e00b              B        |L1.22258|
                  |L1.22234|
0056da  48b5              LDR      r0,|L1.22960|
0056dc  f7fffffe          BL       uart_putchar
;;;769    								
;;;770    									delay(20);															
0056e0  2014              MOVS     r0,#0x14
0056e2  f7fffffe          BL       delay
;;;771    									stcond1=strstr(uart_string_gsm,"SEND OK"); 
0056e6  49b3              LDR      r1,|L1.22964|
0056e8  48a9              LDR      r0,|L1.22928|
0056ea  f7fffffe          BL       strstr
0056ee  49b2              LDR      r1,|L1.22968|
0056f0  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.22258|
;;;772    								}else{}
;;;773    stcond1=strstr(uart_string_gsm,"SEND OK"); 
0056f2  49b0              LDR      r1,|L1.22964|
0056f4  48a6              LDR      r0,|L1.22928|
0056f6  f7fffffe          BL       strstr
0056fa  49af              LDR      r1,|L1.22968|
0056fc  6008              STR      r0,[r1,#0]  ; stcond1
;;;774    //checks for send ok
;;;775    if(!(stcond1) == 1 ) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
0056fe  4608              MOV      r0,r1
005700  6800              LDR      r0,[r0,#0]  ; stcond1
005702  2800              CMP      r0,#0
005704  d101              BNE      |L1.22282|
005706  2001              MOVS     r0,#1
005708  e000              B        |L1.22284|
                  |L1.22282|
00570a  2000              MOVS     r0,#0
                  |L1.22284|
00570c  2801              CMP      r0,#1
00570e  d001              BEQ      |L1.22292|
005710  f000fe41          BL       |L1.25494|
                  |L1.22292|
;;;776    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
005714  211a              MOVS     r1,#0x1a
005716  48a6              LDR      r0,|L1.22960|
005718  f7fffffe          BL       uart_putchar
00571c  f7fffffe          BL       clear
005720  200a              MOVS     r0,#0xa
005722  f7fffffe          BL       delay
;;;777    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
005726  211a              MOVS     r1,#0x1a
005728  48a1              LDR      r0,|L1.22960|
00572a  f7fffffe          BL       uart_putchar
00572e  f7fffffe          BL       clear
005732  200a              MOVS     r0,#0xa
005734  f7fffffe          BL       delay
;;;778    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
005738  211a              MOVS     r1,#0x1a
00573a  489d              LDR      r0,|L1.22960|
00573c  f7fffffe          BL       uart_putchar
005740  e000              B        |L1.22340|
                  |L1.22338|
005742  e3fd              B        |L1.24384|
                  |L1.22340|
005744  f7fffffe          BL       clear
005748  200a              MOVS     r0,#0xa
00574a  f7fffffe          BL       delay
;;;779    									remove_all_chars(data, '\n', '\n');
00574e  220a              MOVS     r2,#0xa
005750  4611              MOV      r1,r2
005752  4892              LDR      r0,|L1.22940|
005754  f7fffffe          BL       remove_all_chars
;;;780    									strcat(data,"CH\n");	
005758  4998              LDR      r1,|L1.22972|
00575a  3148              ADDS     r1,r1,#0x48
00575c  488f              LDR      r0,|L1.22940|
00575e  f7fffffe          BL       strcat
;;;781    									delay(100);
005762  2064              MOVS     r0,#0x64
005764  f7fffffe          BL       delay
;;;782    									clear();//memset(uart_string_gsm,0,5000);
005768  f7fffffe          BL       clear
;;;783    									memset(at_,0,100);
00576c  2164              MOVS     r1,#0x64
00576e  4896              LDR      r0,|L1.22984|
005770  f7fffffe          BL       __aeabi_memclr
;;;784    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005774  4889              LDR      r0,|L1.22940|
005776  f7fffffe          BL       strlen
00577a  1c40              ADDS     r0,r0,#1
00577c  4603              MOV      r3,r0
00577e  4a93              LDR      r2,|L1.22988|
005780  498e              LDR      r1,|L1.22972|
005782  3154              ADDS     r1,r1,#0x54
005784  9001              STR      r0,[sp,#4]
005786  4890              LDR      r0,|L1.22984|
005788  f7fffffe          BL       __2sprintf
;;;785    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00578c  2005              MOVS     r0,#5
00578e  4b8b              LDR      r3,|L1.22972|
005790  461a              MOV      r2,r3
005792  3278              ADDS     r2,r2,#0x78
005794  a18e              ADR      r1,|L1.22992|
005796  9000              STR      r0,[sp,#0]
005798  488b              LDR      r0,|L1.22984|
00579a  f7fffffe          BL       send_SD
;;;786    if(strstr(uart_string_gsm,"ERROR")){
00579e  4987              LDR      r1,|L1.22972|
0057a0  487b              LDR      r0,|L1.22928|
0057a2  f7fffffe          BL       strstr
0057a6  2800              CMP      r0,#0
0057a8  d004              BEQ      |L1.22452|
;;;787    	drive[0]='C';drive[1]=':';
0057aa  2043              MOVS     r0,#0x43
0057ac  4987              LDR      r1,|L1.22988|
0057ae  7008              STRB     r0,[r1,#0]
0057b0  203a              MOVS     r0,#0x3a
0057b2  7048              STRB     r0,[r1,#1]
                  |L1.22452|
;;;788    }	
;;;789    									clear();	
0057b4  f7fffffe          BL       clear
;;;790    									k2=0;									//string array counter for uart 1
0057b8  2000              MOVS     r0,#0
0057ba  497b              LDR      r1,|L1.22952|
0057bc  6008              STR      r0,[r1,#0]  ; k2
;;;791    									tout=0;	
0057be  4979              LDR      r1,|L1.22948|
0057c0  6008              STR      r0,[r1,#0]  ; tout
;;;792    									for(k=0;k<strlen(data);k++)
0057c2  497a              LDR      r1,|L1.22956|
0057c4  6008              STR      r0,[r1,#0]  ; k
0057c6  e00d              B        |L1.22500|
                  |L1.22472|
;;;793    									{
;;;794    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0057c8  4874              LDR      r0,|L1.22940|
0057ca  4978              LDR      r1,|L1.22956|
0057cc  6809              LDR      r1,[r1,#0]  ; k
0057ce  5c40              LDRB     r0,[r0,r1]
0057d0  4601              MOV      r1,r0
0057d2  9001              STR      r0,[sp,#4]
0057d4  4876              LDR      r0,|L1.22960|
0057d6  f7fffffe          BL       uart_putchar
0057da  4874              LDR      r0,|L1.22956|
0057dc  6800              LDR      r0,[r0,#0]            ;792  ; k
0057de  1c40              ADDS     r0,r0,#1              ;792
0057e0  4972              LDR      r1,|L1.22956|
0057e2  6008              STR      r0,[r1,#0]            ;792  ; k
                  |L1.22500|
0057e4  486d              LDR      r0,|L1.22940|
0057e6  f7fffffe          BL       strlen
0057ea  4970              LDR      r1,|L1.22956|
0057ec  6809              LDR      r1,[r1,#0]            ;792  ; k
0057ee  4288              CMP      r0,r1                 ;792
0057f0  d8ea              BHI      |L1.22472|
;;;795    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
0057f2  210a              MOVS     r1,#0xa
0057f4  486e              LDR      r0,|L1.22960|
0057f6  f7fffffe          BL       uart_putchar
0057fa  210a              MOVS     r1,#0xa
0057fc  486c              LDR      r0,|L1.22960|
0057fe  f7fffffe          BL       uart_putchar
005802  210a              MOVS     r1,#0xa
005804  486a              LDR      r0,|L1.22960|
005806  f7fffffe          BL       uart_putchar
;;;796    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');
00580a  210a              MOVS     r1,#0xa
00580c  4868              LDR      r0,|L1.22960|
00580e  f7fffffe          BL       uart_putchar
005812  210a              MOVS     r1,#0xa
005814  4866              LDR      r0,|L1.22960|
005816  f7fffffe          BL       uart_putchar
00581a  210a              MOVS     r1,#0xa
00581c  4864              LDR      r0,|L1.22960|
00581e  f7fffffe          BL       uart_putchar
;;;797    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005822  210a              MOVS     r1,#0xa
005824  4862              LDR      r0,|L1.22960|
005826  f7fffffe          BL       uart_putchar
00582a  210a              MOVS     r1,#0xa
00582c  4860              LDR      r0,|L1.22960|
00582e  f7fffffe          BL       uart_putchar
005832  210a              MOVS     r1,#0xa
005834  485e              LDR      r0,|L1.22960|
005836  f7fffffe          BL       uart_putchar
;;;798    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 8) )))
00583a  bf00              NOP      
                  |L1.22588|
00583c  495f              LDR      r1,|L1.22972|
00583e  318c              ADDS     r1,r1,#0x8c
005840  4853              LDR      r0,|L1.22928|
005842  f7fffffe          BL       strstr
005846  2800              CMP      r0,#0
005848  d109              BNE      |L1.22622|
00584a  495c              LDR      r1,|L1.22972|
00584c  4850              LDR      r0,|L1.22928|
00584e  f7fffffe          BL       strstr
005852  2800              CMP      r0,#0
005854  d103              BNE      |L1.22622|
005856  4853              LDR      r0,|L1.22948|
005858  6800              LDR      r0,[r0,#0]  ; tout
00585a  2808              CMP      r0,#8
00585c  ddee              BLE      |L1.22588|
                  |L1.22622|
;;;799    									{}
;;;800    									clear();
00585e  f7fffffe          BL       clear
;;;801    									memset(data,0,strlen(data));
005862  484e              LDR      r0,|L1.22940|
005864  f7fffffe          BL       strlen
005868  4601              MOV      r1,r0
00586a  9001              STR      r0,[sp,#4]
00586c  484b              LDR      r0,|L1.22940|
00586e  f7fffffe          BL       __aeabi_memclr
;;;802    									clear();
005872  f7fffffe          BL       clear
;;;803    									//	log_it();		                         //logging
;;;804    									memset(data,0,strlen(data));	
005876  4849              LDR      r0,|L1.22940|
005878  f7fffffe          BL       strlen
00587c  4601              MOV      r1,r0
00587e  9001              STR      r0,[sp,#4]
005880  4846              LDR      r0,|L1.22940|
005882  f7fffffe          BL       __aeabi_memclr
;;;805    temp=int_erval;				
005886  4853              LDR      r0,|L1.22996|
005888  6800              LDR      r0,[r0,#0]  ; int_erval
00588a  4953              LDR      r1,|L1.23000|
00588c  6008              STR      r0,[r1,#0]  ; temp
;;;806    int_erval=4;
00588e  2004              MOVS     r0,#4
005890  4950              LDR      r1,|L1.22996|
005892  6008              STR      r0,[r1,#0]  ; int_erval
;;;807    //setting interval 4
;;;808    									GPS_COLLECT();
005894  f7fffffe          BL       GPS_COLLECT
;;;809    									strcat(data,"CH\n");	
005898  4948              LDR      r1,|L1.22972|
00589a  3148              ADDS     r1,r1,#0x48
00589c  483f              LDR      r0,|L1.22940|
00589e  f7fffffe          BL       strcat
;;;810    //**************************************tcp_initialization();//reinitialization*********************************/
;;;811    
;;;812    		
;;;813    	msg_sim800(); 
0058a2  f7fffffe          BL       msg_sim800
;;;814    	send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0058a6  2005              MOVS     r0,#5
0058a8  4b44              LDR      r3,|L1.22972|
0058aa  461a              MOV      r2,r3
0058ac  3278              ADDS     r2,r2,#0x78
0058ae  a14b              ADR      r1,|L1.23004|
0058b0  9000              STR      r0,[sp,#0]
0058b2  4610              MOV      r0,r2
0058b4  3020              ADDS     r0,r0,#0x20
0058b6  f7fffffe          BL       send_GSM
;;;815    	delay(100);
0058ba  2064              MOVS     r0,#0x64
0058bc  f7fffffe          BL       delay
;;;816    	send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0058c0  2004              MOVS     r0,#4
0058c2  4b3e              LDR      r3,|L1.22972|
0058c4  461a              MOV      r2,r3
0058c6  32a8              ADDS     r2,r2,#0xa8
0058c8  a144              ADR      r1,|L1.23004|
0058ca  9000              STR      r0,[sp,#0]
0058cc  4610              MOV      r0,r2
0058ce  3014              ADDS     r0,r0,#0x14
0058d0  f7fffffe          BL       send_GSM
;;;817    	GPS_COLLECT2();
0058d4  f7fffffe          BL       GPS_COLLECT2
;;;818    	strcat(data,"CH\n");		
0058d8  4938              LDR      r1,|L1.22972|
0058da  3148              ADDS     r1,r1,#0x48
0058dc  482f              LDR      r0,|L1.22940|
0058de  f7fffffe          BL       strcat
;;;819    	GPS_COLLECT2();
0058e2  f7fffffe          BL       GPS_COLLECT2
;;;820    	strcat(data,"CH\n");	
0058e6  4935              LDR      r1,|L1.22972|
0058e8  3148              ADDS     r1,r1,#0x48
0058ea  482c              LDR      r0,|L1.22940|
0058ec  f7fffffe          BL       strcat
;;;821    	GPS_COLLECT2();
0058f0  f7fffffe          BL       GPS_COLLECT2
;;;822    	strcat(data,"CH\n");
0058f4  4931              LDR      r1,|L1.22972|
0058f6  3148              ADDS     r1,r1,#0x48
0058f8  4828              LDR      r0,|L1.22940|
0058fa  f7fffffe          BL       strcat
;;;823    	cond201=(strstr(uart_string_gsm, "OK"));
0058fe  a137              ADR      r1,|L1.23004|
005900  4823              LDR      r0,|L1.22928|
005902  f7fffffe          BL       strstr
005906  4936              LDR      r1,|L1.23008|
005908  6008              STR      r0,[r1,#0]  ; cond201
;;;824    	cond200=(strstr(uart_string_gsm, "ERROR"));
00590a  492c              LDR      r1,|L1.22972|
00590c  4820              LDR      r0,|L1.22928|
00590e  f7fffffe          BL       strstr
005912  4934              LDR      r1,|L1.23012|
005914  6008              STR      r0,[r1,#0]  ; cond200
;;;825    	if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
005916  4832              LDR      r0,|L1.23008|
005918  6800              LDR      r0,[r0,#0]  ; cond201
00591a  2800              CMP      r0,#0
00591c  d101              BNE      |L1.22818|
00591e  2001              MOVS     r0,#1
005920  e000              B        |L1.22820|
                  |L1.22818|
005922  2000              MOVS     r0,#0
                  |L1.22820|
005924  2800              CMP      r0,#0
                  |L1.22822|
005926  d076              BEQ      |L1.23062|
005928  482e              LDR      r0,|L1.23012|
00592a  6800              LDR      r0,[r0,#0]  ; cond200
00592c  2800              CMP      r0,#0
00592e  d101              BNE      |L1.22836|
005930  2001              MOVS     r0,#1
005932  e000              B        |L1.22838|
                  |L1.22836|
005934  2000              MOVS     r0,#0
                  |L1.22838|
005936  2800              CMP      r0,#0
005938  d0f5              BEQ      |L1.22822|
00593a  482b              LDR      r0,|L1.23016|
00593c  6800              LDR      r0,[r0,#0]  ; sleep_flag
00593e  2801              CMP      r0,#1
005940  d0f1              BEQ      |L1.22822|
;;;826    	{
;;;827    	delay(100);
005942  2064              MOVS     r0,#0x64
005944  f7fffffe          BL       delay
;;;828    	clear();//memset(uart_string_gsm,0,5000);
005948  f7fffffe          BL       clear
;;;829    	memset(at_,0,100);
00594c  2164              MOVS     r1,#0x64
00594e  481e              LDR      r0,|L1.22984|
005950  f7fffffe          BL       __aeabi_memclr
;;;830    	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005954  4811              LDR      r0,|L1.22940|
005956  f7fffffe          BL       strlen
00595a  1c40              ADDS     r0,r0,#1
00595c  4603              MOV      r3,r0
00595e  4a1b              LDR      r2,|L1.22988|
005960  4916              LDR      r1,|L1.22972|
005962  3154              ADDS     r1,r1,#0x54
005964  9001              STR      r0,[sp,#4]
005966  4818              LDR      r0,|L1.22984|
005968  f7fffffe          BL       __2sprintf
;;;831    	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00596c  2005              MOVS     r0,#5
00596e  4b13              LDR      r3,|L1.22972|
005970  461a              MOV      r2,r3
005972  3278              ADDS     r2,r2,#0x78
005974  a116              ADR      r1,|L1.22992|
005976  9000              STR      r0,[sp,#0]
005978  4813              LDR      r0,|L1.22984|
00597a  f7fffffe          BL       send_SD
;;;832    if(strstr(uart_string_gsm,"ERROR")){
00597e  e035              B        |L1.23020|
                  |L1.22912|
                          DCD      stcond3
                  |L1.22916|
                          DCD      stcond4
                  |L1.22920|
                          DCD      con1d
                  |L1.22924|
                          DCD      cond
                  |L1.22928|
                          DCD      uart_string_gsm
                  |L1.22932|
                          DCD      0x00001388
                  |L1.22936|
005998  0a0a00            DCB      "\n\n",0
00599b  00                DCB      0
                  |L1.22940|
                          DCD      data
                  |L1.22944|
                          DCD      len
                  |L1.22948|
                          DCD      tout
                  |L1.22952|
                          DCD      ||k2||
                  |L1.22956|
                          DCD      k
                  |L1.22960|
                          DCD      0x4006b000
                  |L1.22964|
                          DCD      ||.text||+0x474
                  |L1.22968|
                          DCD      stcond1
                  |L1.22972|
                          DCD      ||.text||+0x870
                  |L1.22976|
                          DCD      stcond2
                  |L1.22980|
                          DCD      ||.text||+0xde4
                  |L1.22984|
                          DCD      at_
                  |L1.22988|
                          DCD      drive
                  |L1.22992|
0059d0  3e00              DCB      ">",0
0059d2  00                DCB      0
0059d3  00                DCB      0
                  |L1.22996|
                          DCD      int_erval
                  |L1.23000|
                          DCD      temp
                  |L1.23004|
0059dc  4f4b00            DCB      "OK",0
0059df  00                DCB      0
                  |L1.23008|
                          DCD      cond201
                  |L1.23012|
                          DCD      cond200
                  |L1.23016|
                          DCD      sleep_flag
                  |L1.23020|
0059ec  49fd              LDR      r1,|L1.24036|
0059ee  48fe              LDR      r0,|L1.24040|
0059f0  f7fffffe          BL       strstr
0059f4  2800              CMP      r0,#0
0059f6  d004              BEQ      |L1.23042|
;;;833    	drive[0]='C';drive[1]=':';
0059f8  2043              MOVS     r0,#0x43
0059fa  49fc              LDR      r1,|L1.24044|
0059fc  7008              STRB     r0,[r1,#0]
0059fe  203a              MOVS     r0,#0x3a
005a00  7048              STRB     r0,[r1,#1]
                  |L1.23042|
;;;834    }	
;;;835    	clear();	
005a02  f7fffffe          BL       clear
;;;836    	k2=0;									//string array counter for uart 1
005a06  2000              MOVS     r0,#0
005a08  49f9              LDR      r1,|L1.24048|
005a0a  6008              STR      r0,[r1,#0]  ; k2
;;;837    	tout=0;	
005a0c  49f9              LDR      r1,|L1.24052|
005a0e  6008              STR      r0,[r1,#0]  ; tout
;;;838    	for(k=0;k<strlen(data);k++)
005a10  49f9              LDR      r1,|L1.24056|
005a12  6008              STR      r0,[r1,#0]  ; k
005a14  e00e              B        |L1.23092|
                  |L1.23062|
005a16  e09a              B        |L1.23374|
                  |L1.23064|
;;;839    	{
;;;840    	uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005a18  48f8              LDR      r0,|L1.24060|
005a1a  49f7              LDR      r1,|L1.24056|
005a1c  6809              LDR      r1,[r1,#0]  ; k
005a1e  5c40              LDRB     r0,[r0,r1]
005a20  4601              MOV      r1,r0
005a22  9001              STR      r0,[sp,#4]
005a24  48f6              LDR      r0,|L1.24064|
005a26  f7fffffe          BL       uart_putchar
005a2a  48f3              LDR      r0,|L1.24056|
005a2c  6800              LDR      r0,[r0,#0]            ;838  ; k
005a2e  1c40              ADDS     r0,r0,#1              ;838
005a30  49f1              LDR      r1,|L1.24056|
005a32  6008              STR      r0,[r1,#0]            ;838  ; k
                  |L1.23092|
005a34  48f1              LDR      r0,|L1.24060|
005a36  f7fffffe          BL       strlen
005a3a  49ef              LDR      r1,|L1.24056|
005a3c  6809              LDR      r1,[r1,#0]            ;838  ; k
005a3e  4288              CMP      r0,r1                 ;838
005a40  d8ea              BHI      |L1.23064|
;;;841    	}	
;;;842    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005a42  210a              MOVS     r1,#0xa
005a44  48ee              LDR      r0,|L1.24064|
005a46  f7fffffe          BL       uart_putchar
005a4a  210a              MOVS     r1,#0xa
005a4c  48ec              LDR      r0,|L1.24064|
005a4e  f7fffffe          BL       uart_putchar
005a52  210a              MOVS     r1,#0xa
005a54  48ea              LDR      r0,|L1.24064|
005a56  f7fffffe          BL       uart_putchar
005a5a  210a              MOVS     r1,#0xa
005a5c  48e8              LDR      r0,|L1.24064|
005a5e  f7fffffe          BL       uart_putchar
005a62  210a              MOVS     r1,#0xa
005a64  48e6              LDR      r0,|L1.24064|
005a66  f7fffffe          BL       uart_putchar
005a6a  210a              MOVS     r1,#0xa
005a6c  48e4              LDR      r0,|L1.24064|
005a6e  f7fffffe          BL       uart_putchar
005a72  210a              MOVS     r1,#0xa
005a74  48e2              LDR      r0,|L1.24064|
005a76  f7fffffe          BL       uart_putchar
;;;843    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005a7a  210a              MOVS     r1,#0xa
005a7c  48e0              LDR      r0,|L1.24064|
005a7e  f7fffffe          BL       uart_putchar
005a82  210a              MOVS     r1,#0xa
005a84  48de              LDR      r0,|L1.24064|
005a86  f7fffffe          BL       uart_putchar
005a8a  210a              MOVS     r1,#0xa
005a8c  48dc              LDR      r0,|L1.24064|
005a8e  f7fffffe          BL       uart_putchar
005a92  210a              MOVS     r1,#0xa
005a94  48da              LDR      r0,|L1.24064|
005a96  f7fffffe          BL       uart_putchar
005a9a  210a              MOVS     r1,#0xa
005a9c  48d8              LDR      r0,|L1.24064|
005a9e  f7fffffe          BL       uart_putchar
005aa2  210a              MOVS     r1,#0xa
005aa4  48d6              LDR      r0,|L1.24064|
005aa6  f7fffffe          BL       uart_putchar
005aaa  210a              MOVS     r1,#0xa
005aac  48d4              LDR      r0,|L1.24064|
005aae  f7fffffe          BL       uart_putchar
;;;844    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005ab2  210a              MOVS     r1,#0xa
005ab4  48d2              LDR      r0,|L1.24064|
005ab6  f7fffffe          BL       uart_putchar
005aba  210a              MOVS     r1,#0xa
005abc  48d0              LDR      r0,|L1.24064|
005abe  f7fffffe          BL       uart_putchar
005ac2  210a              MOVS     r1,#0xa
005ac4  48ce              LDR      r0,|L1.24064|
005ac6  f7fffffe          BL       uart_putchar
005aca  210a              MOVS     r1,#0xa
005acc  48cc              LDR      r0,|L1.24064|
005ace  f7fffffe          BL       uart_putchar
005ad2  210a              MOVS     r1,#0xa
005ad4  48ca              LDR      r0,|L1.24064|
005ad6  f7fffffe          BL       uart_putchar
005ada  210a              MOVS     r1,#0xa
005adc  48c8              LDR      r0,|L1.24064|
005ade  f7fffffe          BL       uart_putchar
005ae2  210a              MOVS     r1,#0xa
005ae4  48c6              LDR      r0,|L1.24064|
005ae6  f7fffffe          BL       uart_putchar
;;;845    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005aea  210a              MOVS     r1,#0xa
005aec  48c4              LDR      r0,|L1.24064|
005aee  f7fffffe          BL       uart_putchar
005af2  210a              MOVS     r1,#0xa
005af4  48c2              LDR      r0,|L1.24064|
005af6  f7fffffe          BL       uart_putchar
;;;846    										//memset(data,0,1000);
;;;847    															//timer counts to wait for characters in uart 1 									
;;;848    										while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005afa  bf00              NOP      
                  |L1.23292|
005afc  49b9              LDR      r1,|L1.24036|
005afe  318c              ADDS     r1,r1,#0x8c
005b00  48b9              LDR      r0,|L1.24040|
005b02  f7fffffe          BL       strstr
005b06  2800              CMP      r0,#0
005b08  d109              BNE      |L1.23326|
005b0a  49b6              LDR      r1,|L1.24036|
005b0c  48b6              LDR      r0,|L1.24040|
005b0e  f7fffffe          BL       strstr
005b12  2800              CMP      r0,#0
005b14  d103              BNE      |L1.23326|
005b16  48b7              LDR      r0,|L1.24052|
005b18  6800              LDR      r0,[r0,#0]  ; tout
005b1a  2805              CMP      r0,#5
005b1c  ddee              BLE      |L1.23292|
                  |L1.23326|
;;;849    										{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;850    										}
;;;851    										clear();//uart_putchar(UART1_BASE_PTR,0x1a);
005b1e  f7fffffe          BL       clear
;;;852    										//clear();
;;;853    										memset(data,0,strlen(data));
005b22  48b6              LDR      r0,|L1.24060|
005b24  f7fffffe          BL       strlen
005b28  4601              MOV      r1,r0
005b2a  9001              STR      r0,[sp,#4]
005b2c  48b3              LDR      r0,|L1.24060|
005b2e  f7fffffe          BL       __aeabi_memclr
;;;854    										clear();
005b32  f7fffffe          BL       clear
;;;855    										RESET_OFF;delay(100);
005b36  2020              MOVS     r0,#0x20
005b38  49b2              LDR      r1,|L1.24068|
005b3a  6088              STR      r0,[r1,#8]
005b3c  2064              MOVS     r0,#0x64
005b3e  f7fffffe          BL       delay
;;;856    										RESET_ON;delay(100);		
005b42  2020              MOVS     r0,#0x20
005b44  49af              LDR      r1,|L1.24068|
005b46  6048              STR      r0,[r1,#4]
005b48  2064              MOVS     r0,#0x64
005b4a  f7fffffe          BL       delay
                  |L1.23374|
;;;857    	}
;;;858    		
;;;859    	send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
005b4e  2004              MOVS     r0,#4
005b50  4bad              LDR      r3,|L1.24072|
005b52  4aa4              LDR      r2,|L1.24036|
005b54  3278              ADDS     r2,r2,#0x78
005b56  a1ad              ADR      r1,|L1.24076|
005b58  9000              STR      r0,[sp,#0]
005b5a  4618              MOV      r0,r3
005b5c  300c              ADDS     r0,r0,#0xc
005b5e  f7fffffe          BL       send_GSM
;;;860    	GPS_COLLECT2();
005b62  f7fffffe          BL       GPS_COLLECT2
;;;861    	strcat(data,"CH\n");	
005b66  499f              LDR      r1,|L1.24036|
005b68  3148              ADDS     r1,r1,#0x48
005b6a  48a4              LDR      r0,|L1.24060|
005b6c  f7fffffe          BL       strcat
;;;862    	memset(at_,0,100);
005b70  2164              MOVS     r1,#0x64
005b72  48a7              LDR      r0,|L1.24080|
005b74  f7fffffe          BL       __aeabi_memclr
;;;863    	sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
005b78  4aa6              LDR      r2,|L1.24084|
005b7a  49a3              LDR      r1,|L1.24072|
005b7c  3120              ADDS     r1,r1,#0x20
005b7e  48a4              LDR      r0,|L1.24080|
005b80  f7fffffe          BL       __2sprintf
;;;864    	send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
005b84  48a4              LDR      r0,|L1.24088|
005b86  6800              LDR      r0,[r0,#0]  ; tmeout
005b88  4b9f              LDR      r3,|L1.24072|
005b8a  4a96              LDR      r2,|L1.24036|
005b8c  3278              ADDS     r2,r2,#0x78
005b8e  a19f              ADR      r1,|L1.24076|
005b90  9000              STR      r0,[sp,#0]
005b92  489f              LDR      r0,|L1.24080|
005b94  f7fffffe          BL       send_GSM
;;;865    	msg_sim800(); 
005b98  f7fffffe          BL       msg_sim800
;;;866    	send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
005b9c  2004              MOVS     r0,#4
005b9e  4b91              LDR      r3,|L1.24036|
005ba0  331c              ADDS     r3,r3,#0x1c
005ba2  461a              MOV      r2,r3
005ba4  325c              ADDS     r2,r2,#0x5c
005ba6  a199              ADR      r1,|L1.24076|
005ba8  9000              STR      r0,[sp,#0]
005baa  4897              LDR      r0,|L1.24072|
005bac  3038              ADDS     r0,r0,#0x38
005bae  f7fffffe          BL       send_GSM
;;;867    	GPS_COLLECT2();
005bb2  f7fffffe          BL       GPS_COLLECT2
;;;868    	strcat(data,"CH\n");	
005bb6  498b              LDR      r1,|L1.24036|
005bb8  3148              ADDS     r1,r1,#0x48
005bba  4890              LDR      r0,|L1.24060|
005bbc  f7fffffe          BL       strcat
;;;869    	GPS_COLLECT2();
005bc0  f7fffffe          BL       GPS_COLLECT2
;;;870    	strcat(data,"CH\n");	
005bc4  4987              LDR      r1,|L1.24036|
005bc6  3148              ADDS     r1,r1,#0x48
005bc8  488c              LDR      r0,|L1.24060|
005bca  f7fffffe          BL       strcat
;;;871    
;;;872    
;;;873    	msg_sim800(); 
005bce  f7fffffe          BL       msg_sim800
;;;874    	GPS_COLLECT2();
005bd2  f7fffffe          BL       GPS_COLLECT2
;;;875    	strcat(data,"CH\n");	
005bd6  4983              LDR      r1,|L1.24036|
005bd8  3148              ADDS     r1,r1,#0x48
005bda  4888              LDR      r0,|L1.24060|
005bdc  f7fffffe          BL       strcat
;;;876    						clear();send_modem("\nAT+CIFSR\r\r\n");clear();
005be0  f7fffffe          BL       clear
005be4  4888              LDR      r0,|L1.24072|
005be6  3048              ADDS     r0,r0,#0x48
005be8  f7fffffe          BL       send_modem
005bec  f7fffffe          BL       clear
;;;877    						delay(20);
005bf0  2014              MOVS     r0,#0x14
005bf2  f7fffffe          BL       delay
;;;878    
;;;879    
;;;880    	msg_sim800(); 
005bf6  f7fffffe          BL       msg_sim800
;;;881    int_erval=temp;
005bfa  4888              LDR      r0,|L1.24092|
005bfc  6800              LDR      r0,[r0,#0]  ; temp
005bfe  4988              LDR      r1,|L1.24096|
005c00  6008              STR      r0,[r1,#0]  ; int_erval
;;;882    							sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005c02  4b88              LDR      r3,|L1.24100|
005c04  4a88              LDR      r2,|L1.24104|
005c06  4980              LDR      r1,|L1.24072|
005c08  3160              ADDS     r1,r1,#0x60
005c0a  4881              LDR      r0,|L1.24080|
005c0c  f7fffffe          BL       __2sprintf
;;;883    							send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
005c10  4881              LDR      r0,|L1.24088|
005c12  6800              LDR      r0,[r0,#0]  ; tmeout
005c14  4b7c              LDR      r3,|L1.24072|
005c16  4a73              LDR      r2,|L1.24036|
005c18  4619              MOV      r1,r3
005c1a  3180              ADDS     r1,r1,#0x80
005c1c  9000              STR      r0,[sp,#0]
005c1e  487c              LDR      r0,|L1.24080|
005c20  f7fffffe          BL       send_GSM
;;;884    							clear();
005c24  f7fffffe          BL       clear
;;;885    							
;;;886    							
;;;887    							send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
005c28  487b              LDR      r0,|L1.24088|
005c2a  6800              LDR      r0,[r0,#0]  ; tmeout
005c2c  4b76              LDR      r3,|L1.24072|
005c2e  3388              ADDS     r3,r3,#0x88
005c30  4a6c              LDR      r2,|L1.24036|
005c32  a17e              ADR      r1,|L1.24108|
005c34  9000              STR      r0,[sp,#0]
005c36  4618              MOV      r0,r3
005c38  3010              ADDS     r0,r0,#0x10
005c3a  f7fffffe          BL       send_GSM
;;;888    	//*****************************************tcp_initialization ends**************************//									
;;;889    										clear();		
005c3e  f7fffffe          BL       clear
;;;890    										memset(stcond1,0,strlen(stcond1));
005c42  487b              LDR      r0,|L1.24112|
005c44  6800              LDR      r0,[r0,#0]  ; stcond1
005c46  f7fffffe          BL       strlen
005c4a  4601              MOV      r1,r0
005c4c  9001              STR      r0,[sp,#4]
005c4e  4878              LDR      r0,|L1.24112|
005c50  6800              LDR      r0,[r0,#0]  ; stcond1
005c52  f7fffffe          BL       __aeabi_memclr
;;;891    										memset(stcond2,0,strlen(stcond2));	
005c56  4877              LDR      r0,|L1.24116|
005c58  6800              LDR      r0,[r0,#0]  ; stcond2
005c5a  f7fffffe          BL       strlen
005c5e  4601              MOV      r1,r0
005c60  9001              STR      r0,[sp,#4]
005c62  4874              LDR      r0,|L1.24116|
005c64  6800              LDR      r0,[r0,#0]  ; stcond2
005c66  f7fffffe          BL       __aeabi_memclr
;;;892    										memset(stcond3,0,strlen(stcond3));	
005c6a  4873              LDR      r0,|L1.24120|
005c6c  6800              LDR      r0,[r0,#0]  ; stcond3
005c6e  f7fffffe          BL       strlen
005c72  4601              MOV      r1,r0
005c74  9001              STR      r0,[sp,#4]
005c76  4870              LDR      r0,|L1.24120|
005c78  6800              LDR      r0,[r0,#0]  ; stcond3
005c7a  f7fffffe          BL       __aeabi_memclr
;;;893    										memset(stcond4,0,strlen(stcond4));								
005c7e  486f              LDR      r0,|L1.24124|
005c80  6800              LDR      r0,[r0,#0]  ; stcond4
005c82  f7fffffe          BL       strlen
005c86  4601              MOV      r1,r0
005c88  9001              STR      r0,[sp,#4]
005c8a  486c              LDR      r0,|L1.24124|
005c8c  6800              LDR      r0,[r0,#0]  ; stcond4
005c8e  f7fffffe          BL       __aeabi_memclr
;;;894    										cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
005c92  213e              MOVS     r1,#0x3e
005c94  4854              LDR      r0,|L1.24040|
005c96  f7fffffe          BL       mystrstr
005c9a  4969              LDR      r1,|L1.24128|
005c9c  7008              STRB     r0,[r1,#0]
;;;895    								
;;;896    									if(cond)	
005c9e  4608              MOV      r0,r1
005ca0  7800              LDRB     r0,[r0,#0]  ; cond
005ca2  2800              CMP      r0,#0
005ca4  d07e              BEQ      |L1.23972|
;;;897    									{	
;;;898    										clear();
005ca6  f7fffffe          BL       clear
;;;899    										memset(uart_string_gsm,0,5000);
005caa  4966              LDR      r1,|L1.24132|
005cac  484e              LDR      r0,|L1.24040|
005cae  f7fffffe          BL       __aeabi_memclr
;;;900    										strcat(data,"\n");
005cb2  a165              ADR      r1,|L1.24136|
005cb4  4851              LDR      r0,|L1.24060|
005cb6  f7fffffe          BL       strcat
;;;901    										len=strlen(data);
005cba  4850              LDR      r0,|L1.24060|
005cbc  f7fffffe          BL       strlen
005cc0  4962              LDR      r1,|L1.24140|
005cc2  6008              STR      r0,[r1,#0]  ; len
;;;902    										tout=0;
005cc4  2000              MOVS     r0,#0
005cc6  494b              LDR      r1,|L1.24052|
005cc8  6008              STR      r0,[r1,#0]  ; tout
;;;903    										k2=0;
005cca  4949              LDR      r1,|L1.24048|
005ccc  6008              STR      r0,[r1,#0]  ; k2
;;;904    										for(k=0;k<len;k++)
005cce  494a              LDR      r1,|L1.24056|
005cd0  6008              STR      r0,[r1,#0]  ; k
005cd2  e00d              B        |L1.23792|
                  |L1.23764|
;;;905    										{uart_putchar(UART1_BASE_PTR, data[k]);
005cd4  4849              LDR      r0,|L1.24060|
005cd6  4948              LDR      r1,|L1.24056|
005cd8  6809              LDR      r1,[r1,#0]  ; k
005cda  5c40              LDRB     r0,[r0,r1]
005cdc  4601              MOV      r1,r0
005cde  9001              STR      r0,[sp,#4]
005ce0  4847              LDR      r0,|L1.24064|
005ce2  f7fffffe          BL       uart_putchar
005ce6  4844              LDR      r0,|L1.24056|
005ce8  6800              LDR      r0,[r0,#0]            ;904  ; k
005cea  1c40              ADDS     r0,r0,#1              ;904
005cec  4942              LDR      r1,|L1.24056|
005cee  6008              STR      r0,[r1,#0]            ;904  ; k
                  |L1.23792|
005cf0  4841              LDR      r0,|L1.24056|
005cf2  6800              LDR      r0,[r0,#0]            ;904  ; k
005cf4  4955              LDR      r1,|L1.24140|
005cf6  6809              LDR      r1,[r1,#0]            ;904  ; len
005cf8  4288              CMP      r0,r1                 ;904
005cfa  dbeb              BLT      |L1.23764|
;;;906    										}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005cfc  210a              MOVS     r1,#0xa
005cfe  4840              LDR      r0,|L1.24064|
005d00  f7fffffe          BL       uart_putchar
005d04  211a              MOVS     r1,#0x1a
005d06  483e              LDR      r0,|L1.24064|
005d08  f7fffffe          BL       uart_putchar
005d0c  211a              MOVS     r1,#0x1a
005d0e  483c              LDR      r0,|L1.24064|
005d10  f7fffffe          BL       uart_putchar
005d14  211a              MOVS     r1,#0x1a
005d16  483a              LDR      r0,|L1.24064|
005d18  f7fffffe          BL       uart_putchar
;;;907    										do{stcond1=strstr(uart_string_gsm,"SEND OK");
005d1c  bf00              NOP      
                  |L1.23838|
005d1e  494c              LDR      r1,|L1.24144|
005d20  4831              LDR      r0,|L1.24040|
005d22  f7fffffe          BL       strstr
005d26  4942              LDR      r1,|L1.24112|
005d28  6008              STR      r0,[r1,#0]  ; stcond1
;;;908    												stcond2=strstr(uart_string_gsm, "ERROR");
005d2a  492e              LDR      r1,|L1.24036|
005d2c  482e              LDR      r0,|L1.24040|
005d2e  f7fffffe          BL       strstr
005d32  4940              LDR      r1,|L1.24116|
005d34  6008              STR      r0,[r1,#0]  ; stcond2
;;;909    													stcond3=strstr(uart_string_gsm, "FAIL");	
005d36  4934              LDR      r1,|L1.24072|
005d38  3190              ADDS     r1,r1,#0x90
005d3a  482b              LDR      r0,|L1.24040|
005d3c  f7fffffe          BL       strstr
005d40  493d              LDR      r1,|L1.24120|
005d42  6008              STR      r0,[r1,#0]  ; stcond3
;;;910    														stcond4=strstr(uart_string_gsm, "DEACT");	
005d44  4927              LDR      r1,|L1.24036|
005d46  311c              ADDS     r1,r1,#0x1c
005d48  4827              LDR      r0,|L1.24040|
005d4a  f7fffffe          BL       strstr
005d4e  493b              LDR      r1,|L1.24124|
005d50  6008              STR      r0,[r1,#0]  ; stcond4
;;;911    											}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
005d52  4838              LDR      r0,|L1.24116|
005d54  6800              LDR      r0,[r0,#0]  ; stcond2
005d56  2800              CMP      r0,#0
005d58  d10f              BNE      |L1.23930|
005d5a  4837              LDR      r0,|L1.24120|
005d5c  6800              LDR      r0,[r0,#0]  ; stcond3
005d5e  2800              CMP      r0,#0
005d60  d10b              BNE      |L1.23930|
005d62  4608              MOV      r0,r1
005d64  6800              LDR      r0,[r0,#0]  ; stcond4
005d66  2800              CMP      r0,#0
005d68  d107              BNE      |L1.23930|
005d6a  4831              LDR      r0,|L1.24112|
005d6c  6800              LDR      r0,[r0,#0]  ; stcond1
005d6e  2800              CMP      r0,#0
005d70  d103              BNE      |L1.23930|
005d72  4820              LDR      r0,|L1.24052|
005d74  6800              LDR      r0,[r0,#0]  ; tout
005d76  2808              CMP      r0,#8
005d78  ddd1              BLE      |L1.23838|
                  |L1.23930|
;;;912    										uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005d7a  211a              MOVS     r1,#0x1a
005d7c  4820              LDR      r0,|L1.24064|
005d7e  f7fffffe          BL       uart_putchar
005d82  211a              MOVS     r1,#0x1a
005d84  481e              LDR      r0,|L1.24064|
005d86  f7fffffe          BL       uart_putchar
005d8a  211a              MOVS     r1,#0x1a
005d8c  481c              LDR      r0,|L1.24064|
005d8e  f7fffffe          BL       uart_putchar
005d92  211a              MOVS     r1,#0x1a
005d94  481a              LDR      r0,|L1.24064|
005d96  f7fffffe          BL       uart_putchar
;;;913    										con1d=	(strstr(uart_string_gsm,"SEND OK"));
005d9a  492d              LDR      r1,|L1.24144|
005d9c  4812              LDR      r0,|L1.24040|
005d9e  f7fffffe          BL       strstr
005da2  e000              B        |L1.23974|
                  |L1.23972|
005da4  e197              B        |L1.24790|
                  |L1.23974|
005da6  492b              LDR      r1,|L1.24148|
005da8  6008              STR      r0,[r1,#0]  ; con1d
;;;914    																	if(!(con1d) == 1 ) 
005daa  4608              MOV      r0,r1
005dac  6800              LDR      r0,[r0,#0]  ; con1d
005dae  2800              CMP      r0,#0
005db0  d101              BNE      |L1.23990|
005db2  2001              MOVS     r0,#1
005db4  e000              B        |L1.23992|
                  |L1.23990|
005db6  2000              MOVS     r0,#0
                  |L1.23992|
005db8  2801              CMP      r0,#1
005dba  d17d              BNE      |L1.24248|
;;;915    																	{
;;;916    																			delay(100);
005dbc  2064              MOVS     r0,#0x64
005dbe  f7fffffe          BL       delay
;;;917    																			clear();//memset(uart_string_gsm,0,5000);
005dc2  f7fffffe          BL       clear
;;;918    																			memset(at_,0,100);
005dc6  2164              MOVS     r1,#0x64
005dc8  4811              LDR      r0,|L1.24080|
005dca  f7fffffe          BL       __aeabi_memclr
;;;919    																			sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005dce  480b              LDR      r0,|L1.24060|
005dd0  f7fffffe          BL       strlen
005dd4  1c40              ADDS     r0,r0,#1
005dd6  4603              MOV      r3,r0
005dd8  4a04              LDR      r2,|L1.24044|
005dda  4902              LDR      r1,|L1.24036|
005ddc  3154              ADDS     r1,r1,#0x54
005dde  9001              STR      r0,[sp,#4]
005de0  480b              LDR      r0,|L1.24080|
005de2  e039              B        |L1.24152|
                  |L1.24036|
                          DCD      ||.text||+0x870
                  |L1.24040|
                          DCD      uart_string_gsm
                  |L1.24044|
                          DCD      drive
                  |L1.24048|
                          DCD      ||k2||
                  |L1.24052|
                          DCD      tout
                  |L1.24056|
                          DCD      k
                  |L1.24060|
                          DCD      data
                  |L1.24064|
                          DCD      0x4006b000
                  |L1.24068|
                          DCD      0x400ff080
                  |L1.24072|
                          DCD      ||.text||+0xd54
                  |L1.24076|
005e0c  4f4b00            DCB      "OK",0
005e0f  00                DCB      0
                  |L1.24080|
                          DCD      at_
                  |L1.24084|
                          DCD      apn
                  |L1.24088|
                          DCD      tmeout
                  |L1.24092|
                          DCD      temp
                  |L1.24096|
                          DCD      int_erval
                  |L1.24100|
                          DCD      port
                  |L1.24104|
                          DCD      ||ip||
                  |L1.24108|
005e2c  3e00              DCB      ">",0
005e2e  00                DCB      0
005e2f  00                DCB      0
                  |L1.24112|
                          DCD      stcond1
                  |L1.24116|
                          DCD      stcond2
                  |L1.24120|
                          DCD      stcond3
                  |L1.24124|
                          DCD      stcond4
                  |L1.24128|
                          DCD      cond
                  |L1.24132|
                          DCD      0x00001388
                  |L1.24136|
005e48  0a00              DCB      "\n",0
005e4a  00                DCB      0
005e4b  00                DCB      0
                  |L1.24140|
                          DCD      len
                  |L1.24144|
                          DCD      ||.text||+0x474
                  |L1.24148|
                          DCD      con1d
                  |L1.24152|
005e58  f7fffffe          BL       __2sprintf
;;;920    																			send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005e5c  2005              MOVS     r0,#5
005e5e  4bfe              LDR      r3,|L1.25176|
005e60  461a              MOV      r2,r3
005e62  3278              ADDS     r2,r2,#0x78
005e64  a1fd              ADR      r1,|L1.25180|
005e66  9000              STR      r0,[sp,#0]
005e68  48fd              LDR      r0,|L1.25184|
005e6a  f7fffffe          BL       send_SD
;;;921    if(strstr(uart_string_gsm,"ERROR")){
005e6e  49fa              LDR      r1,|L1.25176|
005e70  48fc              LDR      r0,|L1.25188|
005e72  f7fffffe          BL       strstr
005e76  2800              CMP      r0,#0
005e78  d004              BEQ      |L1.24196|
;;;922    	drive[0]='C';drive[1]=':';
005e7a  2043              MOVS     r0,#0x43
005e7c  49fa              LDR      r1,|L1.25192|
005e7e  7008              STRB     r0,[r1,#0]
005e80  203a              MOVS     r0,#0x3a
005e82  7048              STRB     r0,[r1,#1]
                  |L1.24196|
;;;923    }	
;;;924    																			clear();	
005e84  f7fffffe          BL       clear
;;;925    																			k2=0;									//string array counter for uart 1
005e88  2000              MOVS     r0,#0
005e8a  49f8              LDR      r1,|L1.25196|
005e8c  6008              STR      r0,[r1,#0]  ; k2
;;;926    																			tout=0;	
005e8e  49f8              LDR      r1,|L1.25200|
005e90  6008              STR      r0,[r1,#0]  ; tout
;;;927    																			for(k=0;k<strlen(data);k++)
005e92  49f8              LDR      r1,|L1.25204|
005e94  6008              STR      r0,[r1,#0]  ; k
005e96  e00d              B        |L1.24244|
                  |L1.24216|
;;;928    																			{
;;;929    																				uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005e98  48f7              LDR      r0,|L1.25208|
005e9a  49f6              LDR      r1,|L1.25204|
005e9c  6809              LDR      r1,[r1,#0]  ; k
005e9e  5c40              LDRB     r0,[r0,r1]
005ea0  4601              MOV      r1,r0
005ea2  9001              STR      r0,[sp,#4]
005ea4  48f5              LDR      r0,|L1.25212|
005ea6  f7fffffe          BL       uart_putchar
005eaa  48f2              LDR      r0,|L1.25204|
005eac  6800              LDR      r0,[r0,#0]            ;927  ; k
005eae  1c40              ADDS     r0,r0,#1              ;927
005eb0  49f0              LDR      r1,|L1.25204|
005eb2  6008              STR      r0,[r1,#0]            ;927  ; k
                  |L1.24244|
005eb4  48f0              LDR      r0,|L1.25208|
005eb6  e000              B        |L1.24250|
                  |L1.24248|
005eb8  e10a              B        |L1.24784|
                  |L1.24250|
005eba  f7fffffe          BL       strlen
005ebe  49ed              LDR      r1,|L1.25204|
005ec0  6809              LDR      r1,[r1,#0]            ;927  ; k
005ec2  4288              CMP      r0,r1                 ;927
005ec4  d8e8              BHI      |L1.24216|
;;;930    																			}	
;;;931    																			uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005ec6  210a              MOVS     r1,#0xa
005ec8  48ec              LDR      r0,|L1.25212|
005eca  f7fffffe          BL       uart_putchar
005ece  210a              MOVS     r1,#0xa
005ed0  48ea              LDR      r0,|L1.25212|
005ed2  f7fffffe          BL       uart_putchar
005ed6  210a              MOVS     r1,#0xa
005ed8  48e8              LDR      r0,|L1.25212|
005eda  f7fffffe          BL       uart_putchar
005ede  210a              MOVS     r1,#0xa
005ee0  48e6              LDR      r0,|L1.25212|
005ee2  f7fffffe          BL       uart_putchar
005ee6  210a              MOVS     r1,#0xa
005ee8  48e4              LDR      r0,|L1.25212|
005eea  f7fffffe          BL       uart_putchar
005eee  210a              MOVS     r1,#0xa
005ef0  48e2              LDR      r0,|L1.25212|
005ef2  f7fffffe          BL       uart_putchar
005ef6  210a              MOVS     r1,#0xa
005ef8  48e0              LDR      r0,|L1.25212|
005efa  f7fffffe          BL       uart_putchar
005efe  210a              MOVS     r1,#0xa
005f00  48de              LDR      r0,|L1.25212|
005f02  f7fffffe          BL       uart_putchar
005f06  210a              MOVS     r1,#0xa
005f08  48dc              LDR      r0,|L1.25212|
005f0a  f7fffffe          BL       uart_putchar
005f0e  210a              MOVS     r1,#0xa
005f10  48da              LDR      r0,|L1.25212|
005f12  f7fffffe          BL       uart_putchar
005f16  210a              MOVS     r1,#0xa
005f18  48d8              LDR      r0,|L1.25212|
005f1a  f7fffffe          BL       uart_putchar
005f1e  210a              MOVS     r1,#0xa
005f20  48d6              LDR      r0,|L1.25212|
005f22  f7fffffe          BL       uart_putchar
005f26  210a              MOVS     r1,#0xa
005f28  48d4              LDR      r0,|L1.25212|
005f2a  f7fffffe          BL       uart_putchar
005f2e  210a              MOVS     r1,#0xa
005f30  48d2              LDR      r0,|L1.25212|
005f32  f7fffffe          BL       uart_putchar
005f36  210a              MOVS     r1,#0xa
005f38  48d0              LDR      r0,|L1.25212|
005f3a  f7fffffe          BL       uart_putchar
005f3e  e000              B        |L1.24386|
                  |L1.24384|
005f40  e228              B        |L1.25492|
                  |L1.24386|
005f42  210a              MOVS     r1,#0xa
005f44  48cd              LDR      r0,|L1.25212|
005f46  f7fffffe          BL       uart_putchar
005f4a  210a              MOVS     r1,#0xa
005f4c  48cb              LDR      r0,|L1.25212|
005f4e  f7fffffe          BL       uart_putchar
005f52  210a              MOVS     r1,#0xa
005f54  48c9              LDR      r0,|L1.25212|
005f56  f7fffffe          BL       uart_putchar
005f5a  210a              MOVS     r1,#0xa
005f5c  48c7              LDR      r0,|L1.25212|
005f5e  f7fffffe          BL       uart_putchar
005f62  210a              MOVS     r1,#0xa
005f64  48c5              LDR      r0,|L1.25212|
005f66  f7fffffe          BL       uart_putchar
005f6a  210a              MOVS     r1,#0xa
005f6c  48c3              LDR      r0,|L1.25212|
005f6e  f7fffffe          BL       uart_putchar
005f72  210a              MOVS     r1,#0xa
005f74  48c1              LDR      r0,|L1.25212|
005f76  f7fffffe          BL       uart_putchar
005f7a  210a              MOVS     r1,#0xa
005f7c  48bf              LDR      r0,|L1.25212|
005f7e  f7fffffe          BL       uart_putchar
005f82  210a              MOVS     r1,#0xa
005f84  48bd              LDR      r0,|L1.25212|
005f86  f7fffffe          BL       uart_putchar
005f8a  210a              MOVS     r1,#0xa
005f8c  48bb              LDR      r0,|L1.25212|
005f8e  f7fffffe          BL       uart_putchar
005f92  210a              MOVS     r1,#0xa
005f94  48b9              LDR      r0,|L1.25212|
005f96  f7fffffe          BL       uart_putchar
005f9a  210a              MOVS     r1,#0xa
005f9c  48b7              LDR      r0,|L1.25212|
005f9e  f7fffffe          BL       uart_putchar
005fa2  210a              MOVS     r1,#0xa
005fa4  48b5              LDR      r0,|L1.25212|
005fa6  f7fffffe          BL       uart_putchar
005faa  210a              MOVS     r1,#0xa
005fac  48b3              LDR      r0,|L1.25212|
005fae  f7fffffe          BL       uart_putchar
005fb2  210a              MOVS     r1,#0xa
005fb4  48b1              LDR      r0,|L1.25212|
005fb6  f7fffffe          BL       uart_putchar
005fba  210a              MOVS     r1,#0xa
005fbc  48af              LDR      r0,|L1.25212|
005fbe  f7fffffe          BL       uart_putchar
005fc2  210a              MOVS     r1,#0xa
005fc4  48ad              LDR      r0,|L1.25212|
005fc6  f7fffffe          BL       uart_putchar
005fca  210a              MOVS     r1,#0xa
005fcc  48ab              LDR      r0,|L1.25212|
005fce  f7fffffe          BL       uart_putchar
005fd2  210a              MOVS     r1,#0xa
005fd4  48a9              LDR      r0,|L1.25212|
005fd6  f7fffffe          BL       uart_putchar
005fda  210a              MOVS     r1,#0xa
005fdc  48a7              LDR      r0,|L1.25212|
005fde  f7fffffe          BL       uart_putchar
005fe2  210a              MOVS     r1,#0xa
005fe4  48a5              LDR      r0,|L1.25212|
005fe6  f7fffffe          BL       uart_putchar
005fea  210a              MOVS     r1,#0xa
005fec  48a3              LDR      r0,|L1.25212|
005fee  f7fffffe          BL       uart_putchar
005ff2  210a              MOVS     r1,#0xa
005ff4  48a1              LDR      r0,|L1.25212|
005ff6  f7fffffe          BL       uart_putchar
005ffa  210a              MOVS     r1,#0xa
005ffc  489f              LDR      r0,|L1.25212|
005ffe  f7fffffe          BL       uart_putchar
006002  210a              MOVS     r1,#0xa
006004  489d              LDR      r0,|L1.25212|
006006  f7fffffe          BL       uart_putchar
00600a  210a              MOVS     r1,#0xa
00600c  489b              LDR      r0,|L1.25212|
00600e  f7fffffe          BL       uart_putchar
006012  210a              MOVS     r1,#0xa
006014  4899              LDR      r0,|L1.25212|
006016  f7fffffe          BL       uart_putchar
00601a  210a              MOVS     r1,#0xa
00601c  4897              LDR      r0,|L1.25212|
00601e  f7fffffe          BL       uart_putchar
006022  210a              MOVS     r1,#0xa
006024  4895              LDR      r0,|L1.25212|
006026  f7fffffe          BL       uart_putchar
00602a  210a              MOVS     r1,#0xa
00602c  4893              LDR      r0,|L1.25212|
00602e  f7fffffe          BL       uart_putchar
006032  210a              MOVS     r1,#0xa
006034  4891              LDR      r0,|L1.25212|
006036  f7fffffe          BL       uart_putchar
00603a  210a              MOVS     r1,#0xa
00603c  488f              LDR      r0,|L1.25212|
00603e  f7fffffe          BL       uart_putchar
006042  210a              MOVS     r1,#0xa
006044  488d              LDR      r0,|L1.25212|
006046  f7fffffe          BL       uart_putchar
00604a  210a              MOVS     r1,#0xa
00604c  488b              LDR      r0,|L1.25212|
00604e  f7fffffe          BL       uart_putchar
006052  210a              MOVS     r1,#0xa
006054  4889              LDR      r0,|L1.25212|
006056  f7fffffe          BL       uart_putchar
00605a  210a              MOVS     r1,#0xa
00605c  4887              LDR      r0,|L1.25212|
00605e  f7fffffe          BL       uart_putchar
006062  210a              MOVS     r1,#0xa
006064  4885              LDR      r0,|L1.25212|
006066  f7fffffe          BL       uart_putchar
00606a  210a              MOVS     r1,#0xa
00606c  4883              LDR      r0,|L1.25212|
00606e  f7fffffe          BL       uart_putchar
006072  210a              MOVS     r1,#0xa
006074  4881              LDR      r0,|L1.25212|
006076  f7fffffe          BL       uart_putchar
00607a  210a              MOVS     r1,#0xa
00607c  487f              LDR      r0,|L1.25212|
00607e  f7fffffe          BL       uart_putchar
006082  210a              MOVS     r1,#0xa
006084  487d              LDR      r0,|L1.25212|
006086  f7fffffe          BL       uart_putchar
00608a  210a              MOVS     r1,#0xa
00608c  487b              LDR      r0,|L1.25212|
00608e  f7fffffe          BL       uart_putchar
;;;932    																			while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) ))){}
006092  bf00              NOP      
                  |L1.24724|
006094  4970              LDR      r1,|L1.25176|
006096  318c              ADDS     r1,r1,#0x8c
006098  4872              LDR      r0,|L1.25188|
00609a  f7fffffe          BL       strstr
00609e  2800              CMP      r0,#0
0060a0  d109              BNE      |L1.24758|
0060a2  496d              LDR      r1,|L1.25176|
0060a4  486f              LDR      r0,|L1.25188|
0060a6  f7fffffe          BL       strstr
0060aa  2800              CMP      r0,#0
0060ac  d103              BNE      |L1.24758|
0060ae  4870              LDR      r0,|L1.25200|
0060b0  6800              LDR      r0,[r0,#0]  ; tout
0060b2  2805              CMP      r0,#5
0060b4  ddee              BLE      |L1.24724|
                  |L1.24758|
;;;933    																			clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0060b6  f7fffffe          BL       clear
;;;934    																			memset(data,0,strlen(data));
0060ba  486f              LDR      r0,|L1.25208|
0060bc  f7fffffe          BL       strlen
0060c0  4601              MOV      r1,r0
0060c2  9001              STR      r0,[sp,#4]
0060c4  486c              LDR      r0,|L1.25208|
0060c6  f7fffffe          BL       __aeabi_memclr
;;;935    																			clear();
0060ca  f7fffffe          BL       clear
0060ce  e164              B        |L1.25498|
                  |L1.24784|
;;;936    																		
;;;937    																//	log_it();								
;;;938    																	}else{send_chunk();}													
0060d0  f7fffffe          BL       send_chunk
0060d4  e161              B        |L1.25498|
                  |L1.24790|
;;;939    									//checks for the sd_data available
;;;940    									}
;;;941    									//con1d=strstr(uart_string_gsm,"OK");
;;;942    									else
;;;943    									{
;;;944    											delay(100);
0060d6  2064              MOVS     r0,#0x64
0060d8  f7fffffe          BL       delay
;;;945    											clear();//memset(uart_string_gsm,0,5000);
0060dc  f7fffffe          BL       clear
;;;946    											memset(at_,0,100);
0060e0  2164              MOVS     r1,#0x64
0060e2  485f              LDR      r0,|L1.25184|
0060e4  f7fffffe          BL       __aeabi_memclr
;;;947    											sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0060e8  4863              LDR      r0,|L1.25208|
0060ea  f7fffffe          BL       strlen
0060ee  1c40              ADDS     r0,r0,#1
0060f0  4603              MOV      r3,r0
0060f2  4a5d              LDR      r2,|L1.25192|
0060f4  4958              LDR      r1,|L1.25176|
0060f6  3154              ADDS     r1,r1,#0x54
0060f8  9001              STR      r0,[sp,#4]
0060fa  4859              LDR      r0,|L1.25184|
0060fc  f7fffffe          BL       __2sprintf
;;;948    											send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
006100  2005              MOVS     r0,#5
006102  4b55              LDR      r3,|L1.25176|
006104  461a              MOV      r2,r3
006106  3278              ADDS     r2,r2,#0x78
006108  a154              ADR      r1,|L1.25180|
00610a  9000              STR      r0,[sp,#0]
00610c  4854              LDR      r0,|L1.25184|
00610e  f7fffffe          BL       send_SD
;;;949    if(strstr(uart_string_gsm,"ERROR")){
006112  4951              LDR      r1,|L1.25176|
006114  4853              LDR      r0,|L1.25188|
006116  f7fffffe          BL       strstr
00611a  2800              CMP      r0,#0
00611c  d004              BEQ      |L1.24872|
;;;950    drive[0]='C';drive[1]=':';
00611e  2043              MOVS     r0,#0x43
006120  4951              LDR      r1,|L1.25192|
006122  7008              STRB     r0,[r1,#0]
006124  203a              MOVS     r0,#0x3a
006126  7048              STRB     r0,[r1,#1]
                  |L1.24872|
;;;951    }	
;;;952    											clear();	
006128  f7fffffe          BL       clear
;;;953    											k2=0;									//string array counter for uart 1
00612c  2000              MOVS     r0,#0
00612e  494f              LDR      r1,|L1.25196|
006130  6008              STR      r0,[r1,#0]  ; k2
;;;954    											tout=0;	
006132  494f              LDR      r1,|L1.25200|
006134  6008              STR      r0,[r1,#0]  ; tout
;;;955    											for(k=0;k<strlen(data);k++)
006136  494f              LDR      r1,|L1.25204|
006138  6008              STR      r0,[r1,#0]  ; k
00613a  e00d              B        |L1.24920|
                  |L1.24892|
;;;956    											{
;;;957    											uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00613c  484e              LDR      r0,|L1.25208|
00613e  494d              LDR      r1,|L1.25204|
006140  6809              LDR      r1,[r1,#0]  ; k
006142  5c40              LDRB     r0,[r0,r1]
006144  4601              MOV      r1,r0
006146  9001              STR      r0,[sp,#4]
006148  484c              LDR      r0,|L1.25212|
00614a  f7fffffe          BL       uart_putchar
00614e  4849              LDR      r0,|L1.25204|
006150  6800              LDR      r0,[r0,#0]            ;955  ; k
006152  1c40              ADDS     r0,r0,#1              ;955
006154  4947              LDR      r1,|L1.25204|
006156  6008              STR      r0,[r1,#0]            ;955  ; k
                  |L1.24920|
006158  4847              LDR      r0,|L1.25208|
00615a  f7fffffe          BL       strlen
00615e  4945              LDR      r1,|L1.25204|
006160  6809              LDR      r1,[r1,#0]            ;955  ; k
006162  4288              CMP      r0,r1                 ;955
006164  d8ea              BHI      |L1.24892|
;;;958    											}	
;;;959    											uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
006166  210a              MOVS     r1,#0xa
006168  4844              LDR      r0,|L1.25212|
00616a  f7fffffe          BL       uart_putchar
00616e  210a              MOVS     r1,#0xa
006170  4842              LDR      r0,|L1.25212|
006172  f7fffffe          BL       uart_putchar
006176  210a              MOVS     r1,#0xa
006178  4840              LDR      r0,|L1.25212|
00617a  f7fffffe          BL       uart_putchar
00617e  210a              MOVS     r1,#0xa
006180  483e              LDR      r0,|L1.25212|
006182  f7fffffe          BL       uart_putchar
006186  210a              MOVS     r1,#0xa
006188  483c              LDR      r0,|L1.25212|
00618a  f7fffffe          BL       uart_putchar
00618e  210a              MOVS     r1,#0xa
006190  483a              LDR      r0,|L1.25212|
006192  f7fffffe          BL       uart_putchar
006196  210a              MOVS     r1,#0xa
006198  4838              LDR      r0,|L1.25212|
00619a  f7fffffe          BL       uart_putchar
00619e  210a              MOVS     r1,#0xa
0061a0  4836              LDR      r0,|L1.25212|
0061a2  f7fffffe          BL       uart_putchar
0061a6  210a              MOVS     r1,#0xa
0061a8  4834              LDR      r0,|L1.25212|
0061aa  f7fffffe          BL       uart_putchar
0061ae  210a              MOVS     r1,#0xa
0061b0  4832              LDR      r0,|L1.25212|
0061b2  f7fffffe          BL       uart_putchar
0061b6  210a              MOVS     r1,#0xa
0061b8  4830              LDR      r0,|L1.25212|
0061ba  f7fffffe          BL       uart_putchar
0061be  210a              MOVS     r1,#0xa
0061c0  482e              LDR      r0,|L1.25212|
0061c2  f7fffffe          BL       uart_putchar
0061c6  210a              MOVS     r1,#0xa
0061c8  482c              LDR      r0,|L1.25212|
0061ca  f7fffffe          BL       uart_putchar
0061ce  210a              MOVS     r1,#0xa
0061d0  482a              LDR      r0,|L1.25212|
0061d2  f7fffffe          BL       uart_putchar
0061d6  210a              MOVS     r1,#0xa
0061d8  4828              LDR      r0,|L1.25212|
0061da  f7fffffe          BL       uart_putchar
0061de  210a              MOVS     r1,#0xa
0061e0  4826              LDR      r0,|L1.25212|
0061e2  f7fffffe          BL       uart_putchar
0061e6  210a              MOVS     r1,#0xa
0061e8  4824              LDR      r0,|L1.25212|
0061ea  f7fffffe          BL       uart_putchar
0061ee  210a              MOVS     r1,#0xa
0061f0  4822              LDR      r0,|L1.25212|
0061f2  f7fffffe          BL       uart_putchar
0061f6  210a              MOVS     r1,#0xa
0061f8  4820              LDR      r0,|L1.25212|
0061fa  f7fffffe          BL       uart_putchar
0061fe  210a              MOVS     r1,#0xa
006200  481e              LDR      r0,|L1.25212|
006202  f7fffffe          BL       uart_putchar
006206  210a              MOVS     r1,#0xa
006208  481c              LDR      r0,|L1.25212|
00620a  f7fffffe          BL       uart_putchar
00620e  210a              MOVS     r1,#0xa
006210  481a              LDR      r0,|L1.25212|
006212  f7fffffe          BL       uart_putchar
006216  210a              MOVS     r1,#0xa
006218  4818              LDR      r0,|L1.25212|
00621a  f7fffffe          BL       uart_putchar
00621e  210a              MOVS     r1,#0xa
006220  4816              LDR      r0,|L1.25212|
006222  f7fffffe          BL       uart_putchar
006226  210a              MOVS     r1,#0xa
006228  4814              LDR      r0,|L1.25212|
00622a  f7fffffe          BL       uart_putchar
00622e  210a              MOVS     r1,#0xa
006230  4812              LDR      r0,|L1.25212|
006232  f7fffffe          BL       uart_putchar
006236  210a              MOVS     r1,#0xa
006238  4810              LDR      r0,|L1.25212|
00623a  f7fffffe          BL       uart_putchar
00623e  210a              MOVS     r1,#0xa
006240  480e              LDR      r0,|L1.25212|
006242  f7fffffe          BL       uart_putchar
006246  210a              MOVS     r1,#0xa
006248  480c              LDR      r0,|L1.25212|
00624a  f7fffffe          BL       uart_putchar
00624e  210a              MOVS     r1,#0xa
006250  480a              LDR      r0,|L1.25212|
006252  f7fffffe          BL       uart_putchar
006256  e013              B        |L1.25216|
                  |L1.25176|
                          DCD      ||.text||+0x870
                  |L1.25180|
00625c  3e00              DCB      ">",0
00625e  00                DCB      0
00625f  00                DCB      0
                  |L1.25184|
                          DCD      at_
                  |L1.25188|
                          DCD      uart_string_gsm
                  |L1.25192|
                          DCD      drive
                  |L1.25196|
                          DCD      ||k2||
                  |L1.25200|
                          DCD      tout
                  |L1.25204|
                          DCD      k
                  |L1.25208|
                          DCD      data
                  |L1.25212|
                          DCD      0x4006b000
                  |L1.25216|
006280  210a              MOVS     r1,#0xa
006282  48a3              LDR      r0,|L1.25872|
006284  f7fffffe          BL       uart_putchar
006288  210a              MOVS     r1,#0xa
00628a  48a1              LDR      r0,|L1.25872|
00628c  f7fffffe          BL       uart_putchar
006290  210a              MOVS     r1,#0xa
006292  489f              LDR      r0,|L1.25872|
006294  f7fffffe          BL       uart_putchar
006298  210a              MOVS     r1,#0xa
00629a  489d              LDR      r0,|L1.25872|
00629c  f7fffffe          BL       uart_putchar
0062a0  210a              MOVS     r1,#0xa
0062a2  489b              LDR      r0,|L1.25872|
0062a4  f7fffffe          BL       uart_putchar
0062a8  210a              MOVS     r1,#0xa
0062aa  4899              LDR      r0,|L1.25872|
0062ac  f7fffffe          BL       uart_putchar
0062b0  210a              MOVS     r1,#0xa
0062b2  4897              LDR      r0,|L1.25872|
0062b4  f7fffffe          BL       uart_putchar
0062b8  210a              MOVS     r1,#0xa
0062ba  4895              LDR      r0,|L1.25872|
0062bc  f7fffffe          BL       uart_putchar
0062c0  210a              MOVS     r1,#0xa
0062c2  4893              LDR      r0,|L1.25872|
0062c4  f7fffffe          BL       uart_putchar
0062c8  210a              MOVS     r1,#0xa
0062ca  4891              LDR      r0,|L1.25872|
0062cc  f7fffffe          BL       uart_putchar
0062d0  210a              MOVS     r1,#0xa
0062d2  488f              LDR      r0,|L1.25872|
0062d4  f7fffffe          BL       uart_putchar
0062d8  210a              MOVS     r1,#0xa
0062da  488d              LDR      r0,|L1.25872|
0062dc  f7fffffe          BL       uart_putchar
0062e0  210a              MOVS     r1,#0xa
0062e2  488b              LDR      r0,|L1.25872|
0062e4  f7fffffe          BL       uart_putchar
0062e8  210a              MOVS     r1,#0xa
0062ea  4889              LDR      r0,|L1.25872|
0062ec  f7fffffe          BL       uart_putchar
0062f0  210a              MOVS     r1,#0xa
0062f2  4887              LDR      r0,|L1.25872|
0062f4  f7fffffe          BL       uart_putchar
0062f8  210a              MOVS     r1,#0xa
0062fa  4885              LDR      r0,|L1.25872|
0062fc  f7fffffe          BL       uart_putchar
006300  210a              MOVS     r1,#0xa
006302  4883              LDR      r0,|L1.25872|
006304  f7fffffe          BL       uart_putchar
006308  210a              MOVS     r1,#0xa
00630a  4881              LDR      r0,|L1.25872|
00630c  f7fffffe          BL       uart_putchar
006310  210a              MOVS     r1,#0xa
006312  487f              LDR      r0,|L1.25872|
006314  f7fffffe          BL       uart_putchar
006318  210a              MOVS     r1,#0xa
00631a  487d              LDR      r0,|L1.25872|
00631c  f7fffffe          BL       uart_putchar
006320  210a              MOVS     r1,#0xa
006322  487b              LDR      r0,|L1.25872|
006324  f7fffffe          BL       uart_putchar
006328  210a              MOVS     r1,#0xa
00632a  4879              LDR      r0,|L1.25872|
00632c  f7fffffe          BL       uart_putchar
006330  210a              MOVS     r1,#0xa
006332  4877              LDR      r0,|L1.25872|
006334  f7fffffe          BL       uart_putchar
006338  210a              MOVS     r1,#0xa
00633a  4875              LDR      r0,|L1.25872|
00633c  f7fffffe          BL       uart_putchar
006340  210a              MOVS     r1,#0xa
006342  4873              LDR      r0,|L1.25872|
006344  f7fffffe          BL       uart_putchar
006348  210a              MOVS     r1,#0xa
00634a  4871              LDR      r0,|L1.25872|
00634c  f7fffffe          BL       uart_putchar
006350  210a              MOVS     r1,#0xa
006352  486f              LDR      r0,|L1.25872|
006354  f7fffffe          BL       uart_putchar
;;;960    											//memset(data,0,1000);
;;;961    											//timer counts to wait for characters in uart 1 									
;;;962    											while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
006358  bf00              NOP      
                  |L1.25434|
00635a  496e              LDR      r1,|L1.25876|
00635c  486e              LDR      r0,|L1.25880|
00635e  f7fffffe          BL       strstr
006362  2800              CMP      r0,#0
006364  d10a              BNE      |L1.25468|
006366  496b              LDR      r1,|L1.25876|
006368  398c              SUBS     r1,r1,#0x8c
00636a  486b              LDR      r0,|L1.25880|
00636c  f7fffffe          BL       strstr
006370  2800              CMP      r0,#0
006372  d103              BNE      |L1.25468|
006374  4869              LDR      r0,|L1.25884|
006376  6800              LDR      r0,[r0,#0]  ; tout
006378  2805              CMP      r0,#5
00637a  ddee              BLE      |L1.25434|
                  |L1.25468|
;;;963    											{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;964    											}
;;;965    											clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00637c  f7fffffe          BL       clear
;;;966    											memset(data,0,strlen(data));
006380  4867              LDR      r0,|L1.25888|
006382  f7fffffe          BL       strlen
006386  4601              MOV      r1,r0
006388  9001              STR      r0,[sp,#4]
00638a  4865              LDR      r0,|L1.25888|
00638c  f7fffffe          BL       __aeabi_memclr
;;;967    											clear();
006390  f7fffffe          BL       clear
                  |L1.25492|
006394  e001              B        |L1.25498|
                  |L1.25494|
;;;968    										//log_it();			//otherwize log it					
;;;969    									}
;;;970    } // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;971    else
;;;972    {
;;;973    	send_chunk();
006396  f7fffffe          BL       send_chunk
                  |L1.25498|
00639a  f7fefdd4          BL       |L1.20294|
;;;974    }		
;;;975    /******************sleep checker end**********************/		
;;;976    		}
;;;977    /******************while end**********************/		
;;;978    	} 
;;;979    /******************main end***********************/
;;;980    }
;;;981    /********************************************************************/
                          ENDP

                  HardFault_Handler PROC
;;;988    
;;;989    void HardFault_Handler()
00639e  b510              PUSH     {r4,lr}
;;;990    {	long ppp=0;
0063a0  2400              MOVS     r4,#0
;;;991    
;;;992    	RESET_OFF;
0063a2  2020              MOVS     r0,#0x20
0063a4  495f              LDR      r1,|L1.25892|
0063a6  6088              STR      r0,[r1,#8]
;;;993    	RESET_OFF;
0063a8  6088              STR      r0,[r1,#8]
;;;994    for(ppp=0;ppp<999999; ppp++);	
0063aa  bf00              NOP      
0063ac  e000              B        |L1.25520|
                  |L1.25518|
0063ae  1c64              ADDS     r4,r4,#1
                  |L1.25520|
0063b0  485d              LDR      r0,|L1.25896|
0063b2  4284              CMP      r4,r0
0063b4  dbfb              BLT      |L1.25518|
;;;995    	
;;;996    	RESET_ON;
0063b6  2020              MOVS     r0,#0x20
0063b8  495a              LDR      r1,|L1.25892|
0063ba  6048              STR      r0,[r1,#4]
;;;997    	RESET_ON;
0063bc  6048              STR      r0,[r1,#4]
;;;998    for(ppp=0;ppp<999999; ppp++);
0063be  2400              MOVS     r4,#0
0063c0  e000              B        |L1.25540|
                  |L1.25538|
0063c2  1c64              ADDS     r4,r4,#1
                  |L1.25540|
0063c4  4858              LDR      r0,|L1.25896|
0063c6  4284              CMP      r4,r0
0063c8  dbfb              BLT      |L1.25538|
;;;999    
;;;1000   RESET_OFF;
0063ca  2020              MOVS     r0,#0x20
0063cc  4955              LDR      r1,|L1.25892|
0063ce  6088              STR      r0,[r1,#8]
;;;1001   	RESET_OFF;
0063d0  6088              STR      r0,[r1,#8]
;;;1002   	delay(100);	
0063d2  2064              MOVS     r0,#0x64
0063d4  f7fffffe          BL       delay
;;;1003   	RESET_ON;
0063d8  2020              MOVS     r0,#0x20
0063da  4952              LDR      r1,|L1.25892|
0063dc  6048              STR      r0,[r1,#4]
;;;1004   	RESET_ON;	
0063de  6048              STR      r0,[r1,#4]
;;;1005   	delay(100);	
0063e0  2064              MOVS     r0,#0x64
0063e2  f7fffffe          BL       delay
;;;1006   }
0063e6  bd10              POP      {r4,pc}
;;;1007   
                          ENDP

                  LPTimer_IRQHandler PROC
;;;1009   
;;;1010    void LPTimer_IRQHandler(void)
0063e8  b510              PUSH     {r4,lr}
;;;1011   {
;;;1012   lpticks+=1;
0063ea  4850              LDR      r0,|L1.25900|
0063ec  6800              LDR      r0,[r0,#0]  ; lpticks
0063ee  1c40              ADDS     r0,r0,#1
0063f0  494e              LDR      r1,|L1.25900|
0063f2  6008              STR      r0,[r1,#0]  ; lpticks
;;;1013   //rtcticks++;
;;;1014   	tout++;tout2++;
0063f4  4849              LDR      r0,|L1.25884|
0063f6  6800              LDR      r0,[r0,#0]  ; tout
0063f8  1c40              ADDS     r0,r0,#1
0063fa  4948              LDR      r1,|L1.25884|
0063fc  6008              STR      r0,[r1,#0]  ; tout
0063fe  484c              LDR      r0,|L1.25904|
006400  6800              LDR      r0,[r0,#0]  ; tout2
006402  1c40              ADDS     r0,r0,#1
006404  494a              LDR      r1,|L1.25904|
006406  6008              STR      r0,[r1,#0]  ; tout2
;;;1015   	rtcticks2++;
006408  484a              LDR      r0,|L1.25908|
00640a  6800              LDR      r0,[r0,#0]  ; rtcticks2
00640c  1c40              ADDS     r0,r0,#1
00640e  4949              LDR      r1,|L1.25908|
006410  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;1016   	if(sleep_flag == 1){aliveping++;}
006412  4849              LDR      r0,|L1.25912|
006414  6800              LDR      r0,[r0,#0]  ; sleep_flag
006416  2801              CMP      r0,#1
006418  d104              BNE      |L1.25636|
00641a  4848              LDR      r0,|L1.25916|
00641c  6800              LDR      r0,[r0,#0]  ; aliveping
00641e  1c40              ADDS     r0,r0,#1
006420  4946              LDR      r1,|L1.25916|
006422  6008              STR      r0,[r1,#0]  ; aliveping
                  |L1.25636|
;;;1017   	if(rtcticks2 > 1600)
006424  4843              LDR      r0,|L1.25908|
006426  6800              LDR      r0,[r0,#0]  ; rtcticks2
006428  2119              MOVS     r1,#0x19
00642a  0189              LSLS     r1,r1,#6
00642c  4288              CMP      r0,r1
00642e  dd10              BLE      |L1.25682|
;;;1018   	{
;;;1019   	RESET_OFF;
006430  2020              MOVS     r0,#0x20
006432  493c              LDR      r1,|L1.25892|
006434  6088              STR      r0,[r1,#8]
;;;1020   	RESET_OFF;
006436  6088              STR      r0,[r1,#8]
;;;1021   	delay(100);	
006438  2064              MOVS     r0,#0x64
00643a  f7fffffe          BL       delay
;;;1022   	RESET_ON;
00643e  2020              MOVS     r0,#0x20
006440  4938              LDR      r1,|L1.25892|
006442  6048              STR      r0,[r1,#4]
;;;1023   	RESET_ON;	
006444  6048              STR      r0,[r1,#4]
;;;1024   	delay(100);
006446  2064              MOVS     r0,#0x64
006448  f7fffffe          BL       delay
;;;1025   	rtcticks2 =0;
00644c  2000              MOVS     r0,#0
00644e  4939              LDR      r1,|L1.25908|
006450  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.25682|
;;;1026   	}
;;;1027   
;;;1028     LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
006452  483b              LDR      r0,|L1.25920|
006454  6800              LDR      r0,[r0,#0]
006456  2180              MOVS     r1,#0x80
006458  4308              ORRS     r0,r0,r1
00645a  4939              LDR      r1,|L1.25920|
00645c  6008              STR      r0,[r1,#0]
;;;1029     LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
00645e  20c1              MOVS     r0,#0xc1
006460  6008              STR      r0,[r1,#0]
;;;1030     
;;;1031   }
006462  bd10              POP      {r4,pc}
;;;1032   
                          ENDP

                  dtr_sleep PROC
;;;1034   
;;;1035   void dtr_sleep()
006464  b538              PUSH     {r3-r5,lr}
;;;1036   {
;;;1037   
;;;1038   test2=GPIOB_PDIR;
006466  482f              LDR      r0,|L1.25892|
006468  3840              SUBS     r0,r0,#0x40
00646a  6900              LDR      r0,[r0,#0x10]
00646c  4935              LDR      r1,|L1.25924|
00646e  6008              STR      r0,[r1,#0]  ; test2
;;;1039   memset(at_,0,strlen(at_));
006470  4835              LDR      r0,|L1.25928|
006472  f7fffffe          BL       strlen
006476  4604              MOV      r4,r0
006478  4621              MOV      r1,r4
00647a  4833              LDR      r0,|L1.25928|
00647c  f7fffffe          BL       __aeabi_memclr
;;;1040   sprintf(at_,"\n\n\n GPIOB = %d \n\n\n ",test2);	
006480  4830              LDR      r0,|L1.25924|
006482  a132              ADR      r1,|L1.25932|
006484  6802              LDR      r2,[r0,#0]  ; test2
006486  4830              LDR      r0,|L1.25928|
006488  f7fffffe          BL       __2sprintf
;;;1041   send_modem(at_);
00648c  482e              LDR      r0,|L1.25928|
00648e  f7fffffe          BL       send_modem
;;;1042   if( test2 == 0 )	
006492  482c              LDR      r0,|L1.25924|
006494  6800              LDR      r0,[r0,#0]  ; test2
006496  2800              CMP      r0,#0
006498  d107              BNE      |L1.25770|
;;;1043   {
;;;1044   	sleep_flag=1;	
00649a  2001              MOVS     r0,#1
00649c  4926              LDR      r1,|L1.25912|
00649e  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1045   	DTR_ON;   //sleep
0064a0  2080              MOVS     r0,#0x80
0064a2  4920              LDR      r1,|L1.25892|
0064a4  3140              ADDS     r1,r1,#0x40
0064a6  6048              STR      r0,[r1,#4]
0064a8  e02c              B        |L1.25860|
                  |L1.25770|
;;;1046   
;;;1047   }
;;;1048   else
;;;1049   {DTR_OFF;
0064aa  2080              MOVS     r0,#0x80
0064ac  491d              LDR      r1,|L1.25892|
0064ae  3140              ADDS     r1,r1,#0x40
0064b0  6088              STR      r0,[r1,#8]
;;;1050   	
;;;1051   	if (sleep_flag != 0  )
0064b2  4821              LDR      r0,|L1.25912|
0064b4  6800              LDR      r0,[r0,#0]  ; sleep_flag
0064b6  2800              CMP      r0,#0
0064b8  d020              BEQ      |L1.25852|
;;;1052   	{
;;;1053   	// wakeup and reset
;;;1054   		sleep_flag=0;
0064ba  2000              MOVS     r0,#0
0064bc  491e              LDR      r1,|L1.25912|
0064be  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1055       		// not sleep	
;;;1056   //	  HardFault_Handler();
;;;1057   delay(1000);
0064c0  207d              MOVS     r0,#0x7d
0064c2  00c0              LSLS     r0,r0,#3
0064c4  f7fffffe          BL       delay
;;;1058   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
0064c8  4825              LDR      r0,|L1.25952|
0064ca  6800              LDR      r0,[r0,#0]  ; tmeout
0064cc  4b25              LDR      r3,|L1.25956|
0064ce  4a11              LDR      r2,|L1.25876|
0064d0  3a14              SUBS     r2,r2,#0x14
0064d2  4910              LDR      r1,|L1.25876|
0064d4  9000              STR      r0,[sp,#0]
0064d6  4824              LDR      r0,|L1.25960|
0064d8  f7fffffe          BL       send_GSM
;;;1059   		
;;;1060   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
0064dc  4820              LDR      r0,|L1.25952|
0064de  6800              LDR      r0,[r0,#0]  ; tmeout
0064e0  4b20              LDR      r3,|L1.25956|
0064e2  4a0c              LDR      r2,|L1.25876|
0064e4  3a14              SUBS     r2,r2,#0x14
0064e6  490b              LDR      r1,|L1.25876|
0064e8  9000              STR      r0,[sp,#0]
0064ea  a020              ADR      r0,|L1.25964|
0064ec  f7fffffe          BL       send_GSM
;;;1061   
;;;1062   //send_GSM("\n\nAT+CFUN=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;1063   		
;;;1064   delay(1000);	
0064f0  207d              MOVS     r0,#0x7d
0064f2  00c0              LSLS     r0,r0,#3
0064f4  f7fffffe          BL       delay
;;;1065   clear();	
0064f8  f7fffffe          BL       clear
                  |L1.25852|
;;;1066   	}  
;;;1067   	DTR_OFF;		// not sleep	
0064fc  2080              MOVS     r0,#0x80
0064fe  4909              LDR      r1,|L1.25892|
006500  3140              ADDS     r1,r1,#0x40
006502  6088              STR      r0,[r1,#8]
                  |L1.25860|
;;;1068   
;;;1069   
;;;1070   
;;;1071   }
;;;1072   
;;;1073   LED_state();LED_state2();
006504  f7fffffe          BL       LED_state
006508  f7fffffe          BL       LED_state2
;;;1074   }
00650c  bd38              POP      {r3-r5,pc}
;;;1075   
                          ENDP

00650e  0000              DCW      0x0000
                  |L1.25872|
                          DCD      0x4006b000
                  |L1.25876|
                          DCD      ||.text||+0x8fc
                  |L1.25880|
                          DCD      uart_string_gsm
                  |L1.25884|
                          DCD      tout
                  |L1.25888|
                          DCD      data
                  |L1.25892|
                          DCD      0x400ff080
                  |L1.25896|
                          DCD      0x000f423f
                  |L1.25900|
                          DCD      lpticks
                  |L1.25904|
                          DCD      tout2
                  |L1.25908|
                          DCD      rtcticks2
                  |L1.25912|
                          DCD      sleep_flag
                  |L1.25916|
                          DCD      aliveping
                  |L1.25920|
                          DCD      0x40040000
                  |L1.25924|
                          DCD      test2
                  |L1.25928|
                          DCD      at_
                  |L1.25932|
00654c  0a0a0a20          DCB      "\n\n\n GPIOB = %d \n\n\n ",0
006550  4750494f
006554  42203d20
006558  2564200a
00655c  0a0a2000
                  |L1.25952|
                          DCD      tmeout
                  |L1.25956|
                          DCD      ||.text||+0xd54
                  |L1.25960|
                          DCD      ||.text||+0x3db0
                  |L1.25964|
00656c  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
006570  2b475356
006574  0d0a00  
006577  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        30
                  latest
                          %        10
                  ignstr
                          %        9
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  uart_string_gps
                          %        3000
                  data2
                          %        300
                  exception
                          %        200
                  ||ip||
                          %        100
                  port
                          %        10
                  at_
                          %        100
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  _rtcticks
                          %        10
                  imei
                          %        20
                  sd_data
                          %        1400

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a41542b          DCB      "\nAT+CMGS=""%s""\r\n",0
000004  434d4753
000008  3d222573
00000c  220d0a00
000010  4552524f          DCB      "ERROR:",0
000014  523a00  
000017  00                DCB      0
000018  4552524f          DCB      "ERROR\r\n",0
00001c  520d0a00
000020  3e00              DCB      ">",0
000022  00                DCB      0
000023  00                DCB      0
000024  2b434d47          DCB      "+CMGS:",0
000028  533a00  
00002b  00                DCB      0
00002c  4f4b00            DCB      "OK",0
00002f  00                DCB      0
000030  0a41542b          DCB      "\nAT+FSCREATE=C:\\IGN.TXT\r\n",0
000034  46534352
000038  45415445
00003c  3d433a5c
000040  49474e2e
000044  5458540d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0
00004c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n",0
000050  2b465357
000054  52495445
000058  3d433a5c
00005c  49474e2e
000060  5458542c
000064  302c362c
000068  31300d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  4f4b0d0a          DCB      "OK\r\n",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  0a494f4e          DCB      "\nION\n\n\n\n",0
00007c  0a0a0a0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
000084  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
000088  46534352
00008c  45415445
000090  3d433a5c
000094  49505f50
000098  4f52542e
00009c  5458540d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",0
0000a8  2b465357
0000ac  52495445
0000b0  3d433a5c
0000b4  49505f50
0000b8  4f52542e
0000bc  5458542c
0000c0  302c2564
0000c4  2c31300d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
0000cc  7c49507c          DCB      "|IP|",0
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  7c504f52          DCB      "|PORT|",0
0000d8  547c00  
0000db  00                DCB      0
0000dc  7c00              DCB      "|",0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4552524f          DCB      "ERROR",0
0000e4  5200    
0000e6  00                DCB      0
0000e7  00                DCB      0
0000e8  524d4300          DCB      "RMC",0
0000ec  47474100          DCB      "GGA",0
0000f0  0d0a0a0a          DCB      "\r\n\n\nAT+GSN\r\n",0
0000f4  41542b47
0000f8  534e0d0a
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
000100  0d0a0d0a          DCB      "\r\n\r\nAT+CBC\r\n",0
000104  41542b43
000108  42430d0a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
000110  256400            DCB      "%d",0
000113  00                DCB      0
000114  256600            DCB      "%f",0
000117  00                DCB      0
000118  2c00              DCB      ",",0
00011a  00                DCB      0
00011b  00                DCB      0
00011c  24477847          DCB      "$$GxGGA",0
000120  474100  
000123  00                DCB      0
000124  2c244778          DCB      ",$$GxRMC",0
000128  524d4300
00012c  2c463d00          DCB      ",F=",0
000130  25642c00          DCB      "%d,",0
000134  2c41433d          DCB      ",AC=",0
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
00013c  2c493d00          DCB      ",I=",0
000140  2c42522a          DCB      ",BR*",0
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
000148  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
00014c  46534352
000150  45415445
000154  3d433a5c
000158  494e5445
00015c  5256414c
000160  2e545854
000164  0d0a00  
000167  00                DCB      0
000168  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",0
00016c  2b465357
000170  52495445
000174  3d433a5c
000178  494e5445
00017c  5256414c
000180  2e545854
000184  2c302c25
000188  642c3130
00018c  0d0a00  
00018f  00                DCB      0
000190  7c494e54          DCB      "|INTERVAL|",0
000194  45525641
000198  4c7c00  
00019b  00                DCB      0
00019c  0a41542b          DCB      "\nAT+FSCREATE=C:\\APN.TXT\r\n",0
0001a0  46534352
0001a4  45415445
0001a8  3d433a5c
0001ac  41504e2e
0001b0  5458540d
0001b4  0a00    
0001b6  00                DCB      0
0001b7  00                DCB      0
0001b8  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",0
0001bc  2b465357
0001c0  52495445
0001c4  3d433a5c
0001c8  41504e2e
0001cc  5458542c
0001d0  302c2564
0001d4  2c31300d
0001d8  0a00    
0001da  00                DCB      0
0001db  00                DCB      0
0001dc  0a0a4154          DCB      "\n\nAT\r\n",0
0001e0  0d0a00  
0001e3  00                DCB      0
0001e4  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
0001e8  2b475356
0001ec  0d0a00  
0001ef  00                DCB      0
0001f0  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
0001f4  2b434d47
0001f8  463d310a
0001fc  0a00    
0001fe  00                DCB      0
0001ff  00                DCB      0
000200  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
000204  2b435343
000208  413f0d0a
00020c  00      
00020d  00                DCB      0
00020e  00                DCB      0
00020f  00                DCB      0
000210  0d0a4154          DCB      "\r\nAT+CMGR=1\r\n",0
000214  2b434d47
000218  523d310d
00021c  0a00    
00021e  00                DCB      0
00021f  00                DCB      0
000220  4f574e45          DCB      "OWNER",0
000224  5200    
000226  00                DCB      0
000227  00                DCB      0
000228  4c4f4341          DCB      "LOCATION",0
00022c  54494f4e
000230  00      
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
000234  494e5445          DCB      "INTERVAL_",0
000238  5256414c
00023c  5f00    
00023e  00                DCB      0
00023f  00                DCB      0
000240  53544152          DCB      "START",0
000244  5400    
000246  00                DCB      0
000247  00                DCB      0
000248  4f574e45          DCB      "OWNER1",0
00024c  523100  
00024f  00                DCB      0
000250  4f574e45          DCB      "OWNER2",0
000254  523200  
000257  00                DCB      0
000258  4f574e45          DCB      "OWNER3",0
00025c  523300  
00025f  00                DCB      0
000260  44454255          DCB      "DEBUG",0
000264  4700    
000266  00                DCB      0
000267  00                DCB      0
000268  52455345          DCB      "RESET",0
00026c  5400    
00026e  00                DCB      0
00026f  00                DCB      0
000270  495000            DCB      "IP",0
000273  00                DCB      0
000274  53554f57          DCB      "SUOWNER",0
000278  4e455200
00027c  534f574e          DCB      "SOWNER",0
000280  455200  
000283  00                DCB      0
000284  49474e49          DCB      "IGNITION ON",0
000288  54494f4e
00028c  204f4e00
000290  49474e49          DCB      "IGNITION OFF",0
000294  54494f4e
000298  204f4646
00029c  00      
00029d  00                DCB      0
00029e  00                DCB      0
00029f  00                DCB      0
0002a0  49474e53          DCB      "IGNSTAT",0
0002a4  54415400
0002a8  0a546865          DCB      "\nThere is an Emergency please help:\nCoordinates:%sN,%"
0002ac  72652069
0002b0  7320616e
0002b4  20456d65
0002b8  7267656e
0002bc  63792070
0002c0  6c656173
0002c4  65206865
0002c8  6c703a0a
0002cc  436f6f72
0002d0  64696e61
0002d4  7465733a
0002d8  25734e2c
0002dc  25      
0002dd  73450a68          DCB      "sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&o"
0002e1  74747073
0002e5  3a2f2f77
0002e9  77772e67
0002ed  6f6f676c
0002f1  652e636f
0002f5  6d2f7365
0002f9  61726368
0002fd  3f713d25
000301  73256332
000305  43257326
000309  69653d75
00030d  74662d38
000311  266f    
000313  653d7574          DCB      "e=utf-8\n",0
000317  662d380a
00031b  00      
00031c  0d0a4154          DCB      "\r\nAT+CPBR=1\r\n",0
000320  2b435042
000324  523d310d
000328  0a00    
00032a  00                DCB      0
00032b  00                DCB      0
00032c  0d0a4154          DCB      "\r\nAT+CPBR=2\r\n",0
000330  2b435042
000334  523d320d
000338  0a00    
00033a  00                DCB      0
00033b  00                DCB      0
00033c  0a436f6f          DCB      "\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://"
000340  7264696e
000344  61746573
000348  203a2025
00034c  73204e2c
000350  20257320
000354  450a5370
000358  65656420
00035c  3a202573
000360  206b6d70
000364  680a0a68
000368  74747073
00036c  3a2f2f  
00036f  7777772e          DCB      "www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",0
000373  676f6f67
000377  6c652e63
00037b  6f6d2f73
00037f  65617263
000383  683f713d
000387  25732563
00038b  32432573
00038f  2669653d
000393  7574662d
000397  38266f65
00039b  3d757466
00039f  2d380a00
0003a3  00                DCB      0
0003a4  0d0a4154          DCB      "\r\nAT+CMGD=1,4\r\n",0
0003a8  2b434d47
0003ac  443d312c
0003b0  340d0a00
0003b4  257300            DCB      "%s",0
0003b7  00                DCB      0
0003b8  0a41542b          DCB      "\nAT+FSCREATE=D:\\LOG.TXT\r\n",0
0003bc  46534352
0003c0  45415445
0003c4  3d443a5c
0003c8  4c4f472e
0003cc  5458540d
0003d0  0a00    
0003d2  00                DCB      0
0003d3  00                DCB      0
0003d4  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
0003d8  46534352
0003dc  45415445
0003e0  3d433a5c
0003e4  4c4f472e
0003e8  5458540d
0003ec  0a00    
0003ee  00                DCB      0
0003ef  00                DCB      0
0003f0  72756472          DCB      "rudra.jellyfishtele.com",0
0003f4  612e6a65
0003f8  6c6c7966
0003fc  69736874
000400  656c652e
000404  636f6d00
000408  35353535          DCB      "5555",0
00040c  00      
00040d  00                DCB      0
00040e  00                DCB      0
00040f  00                DCB      0
000410  3500              DCB      "5",0
000412  00                DCB      0
000413  00                DCB      0
000414  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n\r\n",0
000418  542b434d
00041c  47443d31
000420  2c340d0a
000424  0d0a00  
000427  00                DCB      0
000428  0a00              DCB      "\n",0
00042a  00                DCB      0
00042b  00                DCB      0
00042c  43480a00          DCB      "CH\n",0
000430  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
000434  2b465357
000438  52495445
00043c  3d25735c
000440  4c4f472e
000444  5458542c
000448  312c2564
00044c  2c31300a
000450  0a00    
000452  00                DCB      0
000453  00                DCB      0
000454  0a0a2041          DCB      "\n\n AT+CFUN=1,1\r\n",0
000458  542b4346
00045c  554e3d31
000460  2c310d0a
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
000468  0d0d0a41          DCB      "\r\r\nAT+CMGD=1,4\r\n\n\n\n\n",0
00046c  542b434d
000470  47443d31
000474  2c340d0a
000478  0a0a0a0a
00047c  00      
00047d  00                DCB      0
00047e  00                DCB      0
00047f  00                DCB      0
000480  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
000484  2b435042
000488  533d2253
00048c  4d220d0a
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
000494  0d0a4154          DCB      "\r\nAT+CPBW=1\r\r\n\n",0
000498  2b435042
00049c  573d310d
0004a0  0d0a0a00
0004a4  0d0a4154          DCB      "\r\nAT+CPBW=1,""%s"",129,""OWNER1""\r\n",0
0004a8  2b435042
0004ac  573d312c
0004b0  22257322
0004b4  2c313239
0004b8  2c224f57
0004bc  4e455231
0004c0  220d0a00
0004c4  0a0a4154          DCB      "\n\nAT+CPBS=""ME""\r\n",0
0004c8  2b435042
0004cc  533d224d
0004d0  45220d0a
0004d4  00      
0004d5  00                DCB      0
0004d6  00                DCB      0
0004d7  00                DCB      0
0004d8  0d0a4154          DCB      "\r\nAT+CPBW=2\r\r\n\n",0
0004dc  2b435042
0004e0  573d320d
0004e4  0d0a0a00
0004e8  0d0a4154          DCB      "\r\nAT+CPBW=2,""%s"",129,""OWNER2""\r\n",0
0004ec  2b435042
0004f0  573d322c
0004f4  22257322
0004f8  2c313239
0004fc  2c224f57
000500  4e455232
000504  220d0a00
000508  0d0a4154          DCB      "\r\nAT+CPBW=3\r\r\n\n",0
00050c  2b435042
000510  573d330d
000514  0d0a0a00
000518  0d0a4154          DCB      "\r\nAT+CPBW=3,""%s"",129,""OWNER3""\r\n",0
00051c  2b435042
000520  573d332c
000524  22257322
000528  2c313239
00052c  2c224f57
000530  4e455233
000534  220d0a00
000538  0d0a4154          DCB      "\r\nAT+CPBW=4\r\r\n\n",0
00053c  2b435042
000540  573d340d
000544  0d0a0a00
000548  0d0a4154          DCB      "\r\nAT+CPBW=4,""%s"",129,""SOWNER""\r\n",0
00054c  2b435042
000550  573d342c
000554  22257322
000558  2c313239
00055c  2c22534f
000560  574e4552
000564  220d0a00
000568  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n",0
00056c  542b434d
000570  47443d31
000574  2c340d0a
000578  00      
000579  00                DCB      0
00057a  00                DCB      0
00057b  00                DCB      0
00057c  2c2000            DCB      ", ",0
00057f  00                DCB      0
000580  2c202447          DCB      ", $$GxRMC",0
000584  78524d43
000588  00      
000589  00                DCB      0
00058a  00                DCB      0
00058b  00                DCB      0
00058c  0d0a0d0a          DCB      "\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",0
000590  41542b46
000594  53464c53
000598  495a453d
00059c  25735c4c
0005a0  4f472e54
0005a4  58540d0a
0005a8  00      
0005a9  00                DCB      0
0005aa  00                DCB      0
0005ab  00                DCB      0
0005ac  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>          \r\n"
0005b0  20202020
0005b4  20202020
0005b8  20202020
0005bc  20203c25
0005c0  643e2020
0005c4  203c2564
0005c8  3e202020
0005cc  3c3d2564
0005d0  3e202020
0005d4  20202020
0005d8  2020200d
0005dc  0a      
0005dd  0d0a00            DCB      "\r\n",0
0005e0  0d0a0d0a          DCB      "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",0
0005e4  41542b46
0005e8  53524541
0005ec  443d2573
0005f0  5c4c4f47
0005f4  2e545854
0005f8  2c312c31
0005fc  3130302c
000600  25640d0a
000604  00      
000605  00                DCB      0
000606  00                DCB      0
000607  00                DCB      0
000608  53454e44          DCB      "SEND OK",0
00060c  204f4b00
000610  4641494c          DCB      "FAIL",0
000614  00      
000615  00                DCB      0
000616  00                DCB      0
000617  00                DCB      0
000618  44454143          DCB      "DEACT",0
00061c  5400    
00061e  00                DCB      0
00061f  00                DCB      0
000620  65786365          DCB      "exception : COMPARED RESPONCES IN THE DATA\n\n\n\n",0
000624  7074696f
000628  6e203a20
00062c  434f4d50
000630  41524544
000634  20524553
000638  504f4e43
00063c  45532049
000640  4e205448
000644  45204441
000648  54410a0a
00064c  0a0a00  
00064f  00                DCB      0
000650  434f4e4e          DCB      "CONNECT",0
000654  45435400
000658  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
00065c  2b434950
000660  53454e44
000664  0d0a00  
000667  00                DCB      0
000668  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
00066c  2b434655
000670  4e3d300d
000674  0d0a0a00
000678  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
00067c  494e5345
000680  52544544
000684  0d0a4f4b
000688  00      
000689  00                DCB      0
00068a  00                DCB      0
00068b  00                DCB      0
00068c  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000690  2b434655
000694  4e3d310d
000698  0a00    
00069a  00                DCB      0
00069b  00                DCB      0
00069c  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
0006a0  2b434950
0006a4  53485554
0006a8  0d0a00  
0006ab  00                DCB      0
0006ac  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
0006b0  2b435354
0006b4  543d2225
0006b8  73220d0a
0006bc  00      
0006bd  00                DCB      0
0006be  00                DCB      0
0006bf  00                DCB      0
0006c0  0d0a4154          DCB      "\r\nAT+CIICR\r\r\n",0
0006c4  2b434949
0006c8  43520d0d
0006cc  0a00    
0006ce  00                DCB      0
0006cf  00                DCB      0
0006d0  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
0006d4  43494653
0006d8  520d0d0a
0006dc  00      
0006dd  00                DCB      0
0006de  00                DCB      0
0006df  00                DCB      0
0006e0  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
0006e4  2b434950
0006e8  53544152
0006ec  543d2254
0006f0  4350222c
0006f4  22257322
0006f8  2c222573
0006fc  220d0a00
000700  434f4e4e          DCB      "CONNECT FAIL",0
000704  45435420
000708  4641494c
00070c  00      
00070d  00                DCB      0
00070e  00                DCB      0
00070f  00                DCB      0
000710  0d0a4154          DCB      "\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",0
000714  2b465343
000718  52454154
00071c  453d2573
000720  5c4c4f47
000724  2e545854
000728  0d0a00  
00072b  00                DCB      0
00072c  0a41542b          DCB      "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n",0
000730  46535245
000734  41443d43
000738  3a5c4150
00073c  4e2e5458
000740  542c302c
000744  3130302c
000748  310d0a00
00074c  0a41542b          DCB      "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n",0
000750  46535245
000754  41443d43
000758  3a5c4947
00075c  4e2e5458
000760  542c302c
000764  3130302c
000768  310d0a00
00076c  494f4e00          DCB      "ION",0
000770  494f4646          DCB      "IOFF",0
000774  00      
000775  00                DCB      0
000776  00                DCB      0
000777  00                DCB      0
000778  0a41542b          DCB      "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n",0
00077c  46535245
000780  41443d43
000784  3a5c4355
000788  52534f52
00078c  2e545854
000790  2c302c31
000794  30302c31
000798  0d0a00  
00079b  00                DCB      0
00079c  0a494f46          DCB      "\nIOFF\n\n\n\n",0
0007a0  460a0a0a
0007a4  0a00    
0007a6  00                DCB      0
0007a7  00                DCB      0
0007a8  0a41542b          DCB      "\nAT+FSCREATE=C:\\CURSOR.TXT\r\n",0
0007ac  46534352
0007b0  45415445
0007b4  3d433a5c
0007b8  43555253
0007bc  4f522e54
0007c0  58540d0a
0007c4  00      
0007c5  00                DCB      0
0007c6  00                DCB      0
0007c7  00                DCB      0
0007c8  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n",0
0007cc  2b465357
0007d0  52495445
0007d4  3d433a5c
0007d8  43555253
0007dc  4f522e54
0007e0  58542c30
0007e4  2c35302c
0007e8  31300d0a
0007ec  00      
0007ed  00                DCB      0
0007ee  00                DCB      0
0007ef  00                DCB      0
0007f0  0a2c256c          DCB      "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
0007f4  642c256c
0007f8  642c256c
0007fc  642c0a0a
000800  0a0a0a0a
000804  0a0a0a0a
000808  0a0a0a0a
00080c  0a0a0a0a
000810  0a0a    
000812  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
000816  0a0a0a0a
00081a  0a0a0a0a
00081e  0a0a0a0a
000822  0a0a0a0a
000826  0a0a0a0a
00082a  0a0a0a0a
00082e  0a0a00            DCB      "\n\n",0
000831  00                DCB      0
000832  00                DCB      0
000833  00                DCB      0
000834  0a41542b          DCB      "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n",0
000838  46535245
00083c  41443d43
000840  3a5c4950
000844  5f504f52
000848  542e5458
00084c  542c302c
000850  3130302c
000854  310d0a00
000858  0a41542b          DCB      "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n",0
00085c  46535245
000860  41443d43
000864  3a5c494e
000868  54455256
00086c  414c2e54
000870  58542c30
000874  2c313030
000878  2c310d0a
00087c  00      

                          AREA ||.data||, DATA, ALIGN=3

                  cond200
                          DCD      0x00000000
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  tout
                          DCD      0x00000000
                  tout2
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  temp
                          DCD      0x00000000
                  flagch
                          DCD      0x00000000
                  cond121
000028  00000000          DCB      0x00,0x00,0x00,0x00
                  cond122
                          DCD      0x00000000
                  cond123
                          DCD      0x00000000
                  cond124
                          DCD      0x00000000
                  len
                          DCD      0x00000000
                  cond
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                  con1d
                          DCD      0x00000000
                  stcond1
                          DCD      0x00000000
                  stcond2
                          DCD      0x00000000
                  stcond3
                          DCD      0x00000000
                  stcond4
                          DCD      0x00000000
                  time111
                          DCD      0x00000000
                  timeout222
                          DCD      0x00000000
                  qweq
                          DCD      0x00000000
                  i11
                          DCD      0x00000000
                  j11
                          DCD      0x00000000
                  temp11
                          DCD      0x00000000
                  ||sz1||
                          DCD      0x00000000
                  ||sz2||
                          DCD      0x00000000
                  send_SOS
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  stateCount
00007c  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  e
                          DCD      0x00000000
                  adcsa
                          DCD      0x00000000
                  adcin
                          DCD      0x00000000
                  adcsample
                          DCD      0x00000000
                  fuel
                          DCD      0x00000000
                  fuelstr
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
                  ||rez||
0000a8  00000000          DCFS     0x00000000 ; 0
                  fact
0000ac  3f800000          DCFS     0x3f800000 ; 1
                  d
                          DCD      0x00000000
                  point_seen
                          DCD      0x00000000
                  cond201
                          DCD      0x00000000
                  cond1
                          DCD      0x00000000
                  cond2
                          DCD      0x00000000
                  cond3
                          DCD      0x00000000
                  cond4
                          DCD      0x00000000
                  cond5
                          DCD      0x00000000
                  cond6
                          DCD      0x00000000
                  cond7
                          DCD      0x00000000
                  cond8
                          DCD      0x00000000
                  cond9
                          DCD      0x00000000
                  cond10
                          DCD      0x00000000
                  cond11
                          DCD      0x00000000
                  cond12
                          DCD      0x00000000
                  cond13
                          DCD      0x00000000
                  cond14
                          DCD      0x00000000
                  cond15
                          DCD      0x00000000
                  ass
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  ||fsz||
                          DCD      0x00000000
                  log0
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  qwe
                          DCD      0x00000000
                  ||k5||
                          DCD      0x00000000
                  enters
                          DCD      0x00000000
                  cursorvaluepr
                          DCD      0x00000000
                  cursorvaluene
                          DCD      0x00000000
                  ||q1||
                          DCD      0x00000000
                  ||q2||
                          DCD      0x00000000
                  ||q3||
                          DCD      0x00000000
                  ||q4||
                          DCD      0x00000000
                  cntendl
                          DCD      0x00000000
                  prev
                          %        8
                  ||iz||
                          DCD      0x00000000
                  a
                          %        8
                  b
                          %        8
                  c
                          %        8
                  ||hh||
                          DCD      0x00000000
                  mm1
                          DCD      0x00000000
                  mm2
                          DCD      0x00000000
                          DCD      0x00000000
                  ||a1||
                          %        8
                  ||b1||
                          %        8
                  ||c1||
                          %        8
                  hh11
                          %        8
                  mm11
                          %        8
                  mm22
                          %        8
                  logged
                          DCD      0x00000000
                  check
                          DCD      0x00000000
                  stcond5
                          DCD      0x00000000
                  acstr
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
                  breach
                          DCD      0x00000000
                  aliveping
                          DCD      0x00000000
                  sleep_flag
                          DCD      0x00000000
                  tmeout
                          DCD      0x00000004
                  int_erval
                          DCD      0x00000001
                  drive
                          DCD      0x00000000
0001c0  00                DCB      0x00
                  apn
0001c1  697361            DCB      0x69,0x73,0x61
0001c4  66650000          DCB      0x66,0x65,0x00,0x00
                          %        16
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
                  speed
0001dc  00000000          DCFS     0x00000000 ; 0
                  lpticks
                          DCD      0x00000000
                  voltagecbc
                          DCD      0x00000000
                  ||csq||
                          DCD      0x00000000
                  rtcticks
                          DCD      0x00000000
                  rtcticks2
                          DCD      0x00000000
                  imeiinc
                          DCD      0x00000000
                  ticks_ch
0001f8  00                DCB      0x00
                  save_rtcticks
0001f9  00                DCB      0x00
                  velocity
0001fa  0000              DCB      0x00,0x00
0001fc  000000            DCB      0x00,0x00,0x00
                  interval
0001ff  00                DCB      0x00
                          DCD      0x00000000
                  timeout
                          DCD      0x00000000
                  ||pr||
000208  00000000          DCFS     0x00000000 ; 0
                  ||la||
00020c  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
000224  00                DCB      0x00
                  ringflag
000225  00                DCB      0x00
                  lptmr_interrupt
000226  0000              DCB      0x00,0x00
                  time52
                          DCD      0x0000000f
                  cond277
                          DCD      0x00000000
                  cond20077
                          DCD      0x00000000
                  ||sz||
                          DCD      0x00000000
                  ||cn||
                          DCD      0x00000000
                  ||res||
                          DCD      0x00000000
                  test2
                          DCD      0x00000000

                          AREA ||i.clear||, COMGROUP=clear, CODE, READONLY, ALIGN=2

                  clear PROC
;;;1415   	
;;;1416   __inline void clear()
000000  4808              LDR      r0,|L18.36|
;;;1417   {
;;;1418     if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7900              LDRB     r0,[r0,#4]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L18.20|
;;;1419       {
;;;1420         temp = UART_D_REG(UART1_BASE_PTR);
00000c  4805              LDR      r0,|L18.36|
00000e  79c0              LDRB     r0,[r0,#7]
000010  4905              LDR      r1,|L18.40|
000012  6008              STR      r0,[r1,#0]  ; temp
                  |L18.20|
;;;1421   		}
;;;1422   		
;;;1423   		UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000014  4803              LDR      r0,|L18.36|
000016  7900              LDRB     r0,[r0,#4]
000018  2118              MOVS     r1,#0x18
00001a  4308              ORRS     r0,r0,r1
00001c  4901              LDR      r1,|L18.36|
00001e  7108              STRB     r0,[r1,#4]
;;;1424   }	
000020  4770              BX       lr
;;;1425   
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0x4006b000
                  |L18.40|
                          DCD      temp

                          AREA ||i.delay||, COMGROUP=delay, CODE, READONLY, ALIGN=2

                  delay PROC
;;;81     /*************************** delay*****************************************/
;;;82     __inline void delay(int32 delaytime)
000000  e00d              B        |L25.30|
                  |L25.2|
;;;83     {
;;;84      while(delaytime--)
;;;85         {for(i=2000;i>0;i--)
000002  217d              MOVS     r1,#0x7d
000004  0109              LSLS     r1,r1,#4
000006  4a08              LDR      r2,|L25.40|
000008  6011              STR      r1,[r2,#0]  ; i
00000a  e004              B        |L25.22|
                  |L25.12|
00000c  4906              LDR      r1,|L25.40|
00000e  6809              LDR      r1,[r1,#0]  ; i
000010  1e49              SUBS     r1,r1,#1
000012  4a05              LDR      r2,|L25.40|
000014  6011              STR      r1,[r2,#0]  ; i
                  |L25.22|
000016  4904              LDR      r1,|L25.40|
000018  6809              LDR      r1,[r1,#0]  ; i
00001a  2900              CMP      r1,#0
00001c  dcf6              BGT      |L25.12|
                  |L25.30|
00001e  4601              MOV      r1,r0                 ;84
000020  1e40              SUBS     r0,r0,#1              ;84
000022  2900              CMP      r1,#0                 ;84
000024  d1ed              BNE      |L25.2|
;;;86     			{	
;;;87     			}			// about 1 ms
;;;88         }
;;;89     }
000026  4770              BX       lr
;;;90      void delay2(int delaytime)
                          ENDP

                  |L25.40|
                          DCD      i

                          AREA ||i.send_modem||, COMGROUP=send_modem, CODE, READONLY, ALIGN=2

                  send_modem PROC
;;;1391   
;;;1392   __inline void send_modem(char ch[])
000000  b570              PUSH     {r4-r6,lr}
;;;1393   	{	
000002  4605              MOV      r5,r0
;;;1394   						unsigned char i20=0;
000004  2400              MOVS     r4,#0
;;;1395   						for(i20=0;i20<strlen(ch);i20++)
000006  bf00              NOP      
000008  e005              B        |L32.22|
                  |L32.10|
;;;1396   						{
;;;1397   							uart_putchar(UART1_BASE_PTR, ch[i20]);//clear();
00000a  5d29              LDRB     r1,[r5,r4]
00000c  4805              LDR      r0,|L32.36|
00000e  f7fffffe          BL       uart_putchar
000012  1c60              ADDS     r0,r4,#1              ;1395
000014  b2c4              UXTB     r4,r0                 ;1395
                  |L32.22|
000016  4628              MOV      r0,r5                 ;1395
000018  f7fffffe          BL       strlen
00001c  42a0              CMP      r0,r4                 ;1395
00001e  d8f4              BHI      |L32.10|
;;;1398   						}
;;;1399   						
;;;1400   	}
000020  bd70              POP      {r4-r6,pc}
;;;1401   
                          ENDP

000022  0000              DCW      0x0000
                  |L32.36|
                          DCD      0x4006b000

                          AREA ||i.send_GSM||, COMGROUP=send_GSM, CODE, READONLY, ALIGN=2

                  send_GSM PROC
;;;1437   
;;;1438   __inline void send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1439   {	 
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;1440   
;;;1441   		//uart_putchar(UART1_BASE_PTR,0xA);
;;;1442   		//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1443   	clear();
00000c  f7fffffe          BL       clear
;;;1444   	tout=0;
000010  2000              MOVS     r0,#0
000012  4932              LDR      r1,|L39.220|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;1445   //	qwe=strlen(uart_string_gsm);
;;;1446   		memset(uart_string_gsm,0,5000);
000016  4932              LDR      r1,|L39.224|
000018  4832              LDR      r0,|L39.228|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1447   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4931              LDR      r1,|L39.232|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1448   	 						//timer counts to wait for characters in uart 1 
;;;1449   		clear();
000024  f7fffffe          BL       clear
;;;1450   		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;1451   		uart_putchar(UART1_BASE_PTR,'\n');	uart_putchar(UART1_BASE_PTR,'\n');	
00002e  210a              MOVS     r1,#0xa
000030  482e              LDR      r0,|L39.236|
000032  f7fffffe          BL       uart_putchar
000036  210a              MOVS     r1,#0xa
000038  482c              LDR      r0,|L39.236|
00003a  f7fffffe          BL       uart_putchar
;;;1452   	delay(10);
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       delay
;;;1453   //	uart_putchar(UART1_BASE_PTR,'\r');
;;;1454   	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1455   		do
000044  bf00              NOP      
                  |L39.70|
;;;1456   		{
;;;1457   			
;;;1458   //					time111--;
;;;1459   //				  timeout222--;
;;;1460   
;;;1461   			
;;;1462   	cond122=strstr(uart_string_gsm, responseA);
000046  4827              LDR      r0,|L39.228|
000048  9902              LDR      r1,[sp,#8]
00004a  f7fffffe          BL       strstr
00004e  4928              LDR      r1,|L39.240|
000050  6008              STR      r0,[r1,#0]  ; cond122
;;;1463   	cond123=strstr(uart_string_gsm, responseB);
000052  4621              MOV      r1,r4
000054  4823              LDR      r0,|L39.228|
000056  f7fffffe          BL       strstr
00005a  4926              LDR      r1,|L39.244|
00005c  6008              STR      r0,[r1,#0]  ; cond123
;;;1464     cond124=strstr(uart_string_gsm, responseC);
00005e  4629              MOV      r1,r5
000060  4820              LDR      r0,|L39.228|
000062  f7fffffe          BL       strstr
000066  4924              LDR      r1,|L39.248|
000068  6008              STR      r0,[r1,#0]  ; cond124
;;;1465   	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
00006a  4821              LDR      r0,|L39.240|
00006c  6800              LDR      r0,[r0,#0]  ; cond122
00006e  2800              CMP      r0,#0
000070  d10b              BNE      |L39.138|
000072  4820              LDR      r0,|L39.244|
000074  6800              LDR      r0,[r0,#0]  ; cond123
000076  2800              CMP      r0,#0
000078  d107              BNE      |L39.138|
00007a  4608              MOV      r0,r1
00007c  6800              LDR      r0,[r0,#0]  ; cond124
00007e  2800              CMP      r0,#0
000080  d103              BNE      |L39.138|
000082  4816              LDR      r0,|L39.220|
000084  6800              LDR      r0,[r0,#0]  ; tout
000086  42b0              CMP      r0,r6
000088  dd01              BLE      |L39.142|
                  |L39.138|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L39.144|
                  |L39.142|
00008e  2000              MOVS     r0,#0
                  |L39.144|
000090  491a              LDR      r1,|L39.252|
000092  7008              STRB     r0,[r1,#0]
;;;1466   			
;;;1467   		}while (!cond121);
000094  4608              MOV      r0,r1
000096  7800              LDRB     r0,[r0,#0]  ; cond121
000098  2800              CMP      r0,#0
00009a  d0d4              BEQ      |L39.70|
;;;1468   		clear();
00009c  f7fffffe          BL       clear
;;;1469   		if(tout>timeout){
0000a0  480e              LDR      r0,|L39.220|
0000a2  6800              LDR      r0,[r0,#0]  ; tout
0000a4  42b0              CMP      r0,r6
0000a6  dd17              BLE      |L39.216|
;;;1470   			uart_putchar(UART1_BASE_PTR,'\r');
0000a8  210d              MOVS     r1,#0xd
0000aa  4810              LDR      r0,|L39.236|
0000ac  f7fffffe          BL       uart_putchar
;;;1471   		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000b0  210a              MOVS     r1,#0xa
0000b2  480e              LDR      r0,|L39.236|
0000b4  f7fffffe          BL       uart_putchar
0000b8  211a              MOVS     r1,#0x1a
0000ba  480c              LDR      r0,|L39.236|
0000bc  f7fffffe          BL       uart_putchar
;;;1472   		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000c0  211a              MOVS     r1,#0x1a
0000c2  480a              LDR      r0,|L39.236|
0000c4  f7fffffe          BL       uart_putchar
0000c8  210d              MOVS     r1,#0xd
0000ca  4808              LDR      r0,|L39.236|
0000cc  f7fffffe          BL       uart_putchar
;;;1473   		uart_putchar(UART1_BASE_PTR,'\n');}
0000d0  210a              MOVS     r1,#0xa
0000d2  4806              LDR      r0,|L39.236|
0000d4  f7fffffe          BL       uart_putchar
                  |L39.216|
;;;1474   		//return;
;;;1475   //		return uart_string_gsm;
;;;1476   
;;;1477   		
;;;1478   
;;;1479   
;;;1480   }
0000d8  b005              ADD      sp,sp,#0x14
0000da  bdf0              POP      {r4-r7,pc}
;;;1481   
                          ENDP

                  |L39.220|
                          DCD      tout
                  |L39.224|
                          DCD      0x00001388
                  |L39.228|
                          DCD      uart_string_gsm
                  |L39.232|
                          DCD      ||k2||
                  |L39.236|
                          DCD      0x4006b000
                  |L39.240|
                          DCD      cond122
                  |L39.244|
                          DCD      cond123
                  |L39.248|
                          DCD      cond124
                  |L39.252|
                          DCD      cond121

                          AREA ||i.send_MSG||, COMGROUP=send_MSG, CODE, READONLY, ALIGN=2

                  send_MSG PROC
;;;1483   
;;;1484   __inline char * send_MSG(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1485   {	
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;1486   		qwe=strlen(uart_string_gsm);
00000a  4829              LDR      r0,|L46.176|
00000c  f7fffffe          BL       strlen
000010  4928              LDR      r1,|L46.180|
000012  6008              STR      r0,[r1,#0]  ; qwe
;;;1487   
;;;1488   	
;;;1489   		memset(uart_string_gsm,0,qwe);
000014  4608              MOV      r0,r1
000016  6801              LDR      r1,[r0,#0]  ; qwe
000018  4825              LDR      r0,|L46.176|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1490   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4925              LDR      r1,|L46.184|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1491   	  time111=99999;						//timer counts to wait for characters in uart 1 
000024  4825              LDR      r0,|L46.188|
000026  4926              LDR      r1,|L46.192|
000028  6008              STR      r0,[r1,#0]  ; time111
;;;1492   		clear();
00002a  f7fffffe          BL       clear
;;;1493   		timeout222=2001;
00002e  4825              LDR      r0,|L46.196|
000030  4925              LDR      r1,|L46.200|
000032  6008              STR      r0,[r1,#0]  ; timeout222
;;;1494   		send_modem(string);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       send_modem
;;;1495   		do	{
00003a  bf00              NOP      
                  |L46.60|
;;;1496   			
;;;1497   					time111--;
00003c  4820              LDR      r0,|L46.192|
00003e  6800              LDR      r0,[r0,#0]  ; time111
000040  1e40              SUBS     r0,r0,#1
000042  491f              LDR      r1,|L46.192|
000044  6008              STR      r0,[r1,#0]  ; time111
;;;1498   				  timeout222--;
000046  4820              LDR      r0,|L46.200|
000048  6800              LDR      r0,[r0,#0]  ; timeout222
00004a  1e40              SUBS     r0,r0,#1
00004c  491e              LDR      r1,|L46.200|
00004e  6008              STR      r0,[r1,#0]  ; timeout222
;;;1499   //          if(lptmr_interrupt == 1){
;;;1500   //					//accel_read();
;;;1501   //					detect_motion();
;;;1502   //					lptmr_interrupt = 0;}		
;;;1503   //					if(timeout222 % 400 == 0)
;;;1504   //					{
;;;1505   //						//uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
;;;1506   //					}
;;;1507   			
;;;1508   	cond122=strstr(uart_string_gsm, responseA);
000050  4639              MOV      r1,r7
000052  4817              LDR      r0,|L46.176|
000054  f7fffffe          BL       strstr
000058  491c              LDR      r1,|L46.204|
00005a  6008              STR      r0,[r1,#0]  ; cond122
;;;1509   	cond123=strstr(uart_string_gsm, responseB);
00005c  4621              MOV      r1,r4
00005e  4814              LDR      r0,|L46.176|
000060  f7fffffe          BL       strstr
000064  491a              LDR      r1,|L46.208|
000066  6008              STR      r0,[r1,#0]  ; cond123
;;;1510     cond124=strstr(uart_string_gsm, responseC);
000068  4629              MOV      r1,r5
00006a  4811              LDR      r0,|L46.176|
00006c  f7fffffe          BL       strstr
000070  4918              LDR      r1,|L46.212|
000072  6008              STR      r0,[r1,#0]  ; cond124
;;;1511   	cond121 = (cond122	|| cond123	|| cond124  || (time111<=1))	;			
000074  4815              LDR      r0,|L46.204|
000076  6800              LDR      r0,[r0,#0]  ; cond122
000078  2800              CMP      r0,#0
00007a  d10b              BNE      |L46.148|
00007c  4814              LDR      r0,|L46.208|
00007e  6800              LDR      r0,[r0,#0]  ; cond123
000080  2800              CMP      r0,#0
000082  d107              BNE      |L46.148|
000084  4608              MOV      r0,r1
000086  6800              LDR      r0,[r0,#0]  ; cond124
000088  2800              CMP      r0,#0
00008a  d103              BNE      |L46.148|
00008c  480c              LDR      r0,|L46.192|
00008e  6800              LDR      r0,[r0,#0]  ; time111
000090  2801              CMP      r0,#1
000092  dc01              BGT      |L46.152|
                  |L46.148|
000094  2001              MOVS     r0,#1
000096  e000              B        |L46.154|
                  |L46.152|
000098  2000              MOVS     r0,#0
                  |L46.154|
00009a  490f              LDR      r1,|L46.216|
00009c  7008              STRB     r0,[r1,#0]
;;;1512   			
;;;1513   			
;;;1514   		}while (!cond121);
00009e  4608              MOV      r0,r1
0000a0  7800              LDRB     r0,[r0,#0]  ; cond121
0000a2  2800              CMP      r0,#0
0000a4  d0ca              BEQ      |L46.60|
;;;1515   		clear();
0000a6  f7fffffe          BL       clear
;;;1516   		return uart_string_gsm;
0000aa  4801              LDR      r0,|L46.176|
;;;1517   
;;;1518   }
0000ac  bdf8              POP      {r3-r7,pc}
;;;1519   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L46.176|
                          DCD      uart_string_gsm
                  |L46.180|
                          DCD      qwe
                  |L46.184|
                          DCD      ||k2||
                  |L46.188|
                          DCD      0x0001869f
                  |L46.192|
                          DCD      time111
                  |L46.196|
                          DCD      0x000007d1
                  |L46.200|
                          DCD      timeout222
                  |L46.204|
                          DCD      cond122
                  |L46.208|
                          DCD      cond123
                  |L46.212|
                          DCD      cond124
                  |L46.216|
                          DCD      cond121

                          AREA ||i.send_message||, COMGROUP=send_message, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  send_message PROC
;;;2343   			
;;;2344   __inline	void send_message(char * data2)
000000  b538              PUSH     {r3-r5,lr}
;;;2345   	{memset(uart_string_gsm,0,5000);
000002  4604              MOV      r4,r0
000004  4929              LDR      r1,|L53.172|
000006  482a              LDR      r0,|L53.176|
000008  f7fffffe          BL       __aeabi_memclr
;;;2346   									memset(at_,0,100);
00000c  2164              MOVS     r1,#0x64
00000e  4829              LDR      r0,|L53.180|
000010  f7fffffe          BL       __aeabi_memclr
;;;2347   									sprintf(at_, "\nAT+CMGS=\"%s\"\r\n" ,num2);
000014  4a28              LDR      r2,|L53.184|
000016  4929              LDR      r1,|L53.188|
000018  4826              LDR      r0,|L53.180|
00001a  f7fffffe          BL       __2sprintf
;;;2348   									send_MSG(at_, ">", "ERROR\r\n" , "ERROR:",tmeout);	
00001e  4828              LDR      r0,|L53.192|
000020  6800              LDR      r0,[r0,#0]  ; tmeout
000022  4b28              LDR      r3,|L53.196|
000024  4a28              LDR      r2,|L53.200|
000026  4929              LDR      r1,|L53.204|
000028  9000              STR      r0,[sp,#0]
00002a  4822              LDR      r0,|L53.180|
00002c  f7fffffe          BL       send_MSG
;;;2349   									if( strstr(uart_string_gsm, ">"))
000030  4926              LDR      r1,|L53.204|
000032  481f              LDR      r0,|L53.176|
000034  f7fffffe          BL       strstr
000038  2800              CMP      r0,#0
00003a  d031              BEQ      |L53.160|
;;;2350   									{
;;;2351   										//
;;;2352   										
;;;2353   											for(k=0;k<strlen(data2);k++)
00003c  2000              MOVS     r0,#0
00003e  4924              LDR      r1,|L53.208|
000040  6008              STR      r0,[r1,#0]  ; k
000042  e00c              B        |L53.94|
                  |L53.68|
;;;2354   											{
;;;2355   												
;;;2356   												uart_putchar(UART1_BASE_PTR, data2[k]);
000044  4822              LDR      r0,|L53.208|
000046  6800              LDR      r0,[r0,#0]  ; k
000048  5c21              LDRB     r1,[r4,r0]
00004a  4822              LDR      r0,|L53.212|
00004c  f7fffffe          BL       uart_putchar
;;;2357   												//uart0_putchar(UART0_BASE_PTR, data2[k]);
;;;2358   												clear();
000050  f7fffffe          BL       clear
000054  481e              LDR      r0,|L53.208|
000056  6800              LDR      r0,[r0,#0]            ;2353  ; k
000058  1c40              ADDS     r0,r0,#1              ;2353
00005a  491d              LDR      r1,|L53.208|
00005c  6008              STR      r0,[r1,#0]            ;2353  ; k
                  |L53.94|
00005e  4620              MOV      r0,r4                 ;2353
000060  f7fffffe          BL       strlen
000064  491a              LDR      r1,|L53.208|
000066  6809              LDR      r1,[r1,#0]            ;2353  ; k
000068  4288              CMP      r0,r1                 ;2353
00006a  d8eb              BHI      |L53.68|
;;;2359   												
;;;2360   											}		
;;;2361   											uart_putchar(UART1_BASE_PTR, 0x1A);
00006c  211a              MOVS     r1,#0x1a
00006e  4819              LDR      r0,|L53.212|
000070  f7fffffe          BL       uart_putchar
;;;2362   											k2=0;									//string array counter for uart 1
000074  2000              MOVS     r0,#0
000076  4918              LDR      r1,|L53.216|
000078  6008              STR      r0,[r1,#0]  ; k2
;;;2363   											timeout=99999;						//timer counts to wait for characters in uart 1 									
00007a  4818              LDR      r0,|L53.220|
00007c  4918              LDR      r1,|L53.224|
00007e  6008              STR      r0,[r1,#0]  ; timeout
;;;2364   											while(!(strstr(uart_string_gsm,"+CMGS:")  ||  (timeout < 1)))
000080  e004              B        |L53.140|
                  |L53.130|
;;;2365   																{
;;;2366   																	timeout--;
000082  4817              LDR      r0,|L53.224|
000084  6800              LDR      r0,[r0,#0]  ; timeout
000086  1e40              SUBS     r0,r0,#1
000088  4915              LDR      r1,|L53.224|
00008a  6008              STR      r0,[r1,#0]  ; timeout
                  |L53.140|
00008c  4915              LDR      r1,|L53.228|
00008e  4808              LDR      r0,|L53.176|
000090  f7fffffe          BL       strstr
000094  2800              CMP      r0,#0                 ;2364
000096  d103              BNE      |L53.160|
000098  4811              LDR      r0,|L53.224|
00009a  6800              LDR      r0,[r0,#0]            ;2364  ; timeout
00009c  2801              CMP      r0,#1                 ;2364
00009e  daf0              BGE      |L53.130|
                  |L53.160|
;;;2367   //																	if(timeout % 4000 == 0)
;;;2368   //																	{
;;;2369   //																		uart0_putchar(UART0_BASE_PTR,'1');
;;;2370   //																		uart_putchar(UART1_BASE_PTR,0x1A);
;;;2371   //																	}
;;;2372   																}
;;;2373   							
;;;2374   									}
;;;2375   		
;;;2376   	memset(uart_string_gsm,0,5000);								
0000a0  4902              LDR      r1,|L53.172|
0000a2  4803              LDR      r0,|L53.176|
0000a4  f7fffffe          BL       __aeabi_memclr
;;;2377   	}
0000a8  bd38              POP      {r3-r5,pc}
;;;2378   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L53.172|
                          DCD      0x00001388
                  |L53.176|
                          DCD      uart_string_gsm
                  |L53.180|
                          DCD      at_
                  |L53.184|
                          DCD      num2
                  |L53.188|
                          DCD      ||.conststring||
                  |L53.192|
                          DCD      tmeout
                  |L53.196|
                          DCD      ||.conststring||+0x10
                  |L53.200|
                          DCD      ||.conststring||+0x18
                  |L53.204|
                          DCD      ||.conststring||+0x20
                  |L53.208|
                          DCD      k
                  |L53.212|
                          DCD      0x4006b000
                  |L53.216|
                          DCD      ||k2||
                  |L53.220|
                          DCD      0x0001869f
                  |L53.224|
                          DCD      timeout
                  |L53.228|
                          DCD      ||.conststring||+0x24

                          AREA ||i.parse_g||, COMGROUP=parse_g, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;1602   
;;;1603   __inline void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1604   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f0b              LDR      r7,[sp,#0x2c]
;;;1605   
;;;1606   		sz1=	strlen(str);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  493c              LDR      r1,|L60.260|
000014  6008              STR      r0,[r1,#0]  ; sz1
;;;1607   		sz2=  strlen(string);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       strlen
00001c  493a              LDR      r1,|L60.264|
00001e  6008              STR      r0,[r1,#0]  ; sz2
;;;1608   		memset(string,0,sz2);
000020  4608              MOV      r0,r1
000022  6801              LDR      r1,[r0,#0]  ; sz2
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_memclr
;;;1609   		for(i11=0,temp11=0;i11<sz1;i11++)
00002a  2000              MOVS     r0,#0
00002c  4937              LDR      r1,|L60.268|
00002e  6008              STR      r0,[r1,#0]  ; i11
000030  4937              LDR      r1,|L60.272|
000032  6008              STR      r0,[r1,#0]  ; temp11
000034  e01a              B        |L60.108|
                  |L60.54|
;;;1610   		{
;;;1611   		if(str[i11]==s)
000036  4835              LDR      r0,|L60.268|
000038  6800              LDR      r0,[r0,#0]  ; i11
00003a  5c21              LDRB     r1,[r4,r0]
00003c  980a              LDR      r0,[sp,#0x28]
00003e  4281              CMP      r1,r0
000040  d108              BNE      |L60.84|
;;;1612   			{temp11++;j11=i11;}
000042  4833              LDR      r0,|L60.272|
000044  6800              LDR      r0,[r0,#0]  ; temp11
000046  1c40              ADDS     r0,r0,#1
000048  4931              LDR      r1,|L60.272|
00004a  6008              STR      r0,[r1,#0]  ; temp11
00004c  482f              LDR      r0,|L60.268|
00004e  6800              LDR      r0,[r0,#0]  ; i11
000050  4930              LDR      r1,|L60.276|
000052  6008              STR      r0,[r1,#0]  ; j11
                  |L60.84|
;;;1613   		else{}
;;;1614   			
;;;1615   		if(temp11>=sec){i11=9900;}
000054  482e              LDR      r0,|L60.272|
000056  6800              LDR      r0,[r0,#0]  ; temp11
000058  42b0              CMP      r0,r6
00005a  db02              BLT      |L60.98|
00005c  482e              LDR      r0,|L60.280|
00005e  492b              LDR      r1,|L60.268|
000060  6008              STR      r0,[r1,#0]  ; i11
                  |L60.98|
000062  482a              LDR      r0,|L60.268|
000064  6800              LDR      r0,[r0,#0]            ;1609  ; i11
000066  1c40              ADDS     r0,r0,#1              ;1609
000068  4928              LDR      r1,|L60.268|
00006a  6008              STR      r0,[r1,#0]            ;1609  ; i11
                  |L60.108|
00006c  4827              LDR      r0,|L60.268|
00006e  6800              LDR      r0,[r0,#0]            ;1609  ; i11
000070  4924              LDR      r1,|L60.260|
000072  6809              LDR      r1,[r1,#0]            ;1609  ; sz1
000074  4288              CMP      r0,r1                 ;1609
000076  dbde              BLT      |L60.54|
;;;1616   		else{}	
;;;1617   		
;;;1618   		}	
;;;1619   		
;;;1620   		for(i11=0,temp11=0;i11<sz1;i11++)
000078  2000              MOVS     r0,#0
00007a  4924              LDR      r1,|L60.268|
00007c  6008              STR      r0,[r1,#0]  ; i11
00007e  4924              LDR      r1,|L60.272|
000080  6008              STR      r0,[r1,#0]  ; temp11
000082  e01a              B        |L60.186|
                  |L60.132|
;;;1621   		{
;;;1622   		if(str[i11]==f)
000084  4821              LDR      r0,|L60.268|
000086  6800              LDR      r0,[r0,#0]  ; i11
000088  5c21              LDRB     r1,[r4,r0]
00008a  9804              LDR      r0,[sp,#0x10]
00008c  4281              CMP      r1,r0
00008e  d108              BNE      |L60.162|
;;;1623   			{temp11++;l=i11;}										
000090  481f              LDR      r0,|L60.272|
000092  6800              LDR      r0,[r0,#0]  ; temp11
000094  1c40              ADDS     r0,r0,#1
000096  491e              LDR      r1,|L60.272|
000098  6008              STR      r0,[r1,#0]  ; temp11
00009a  481c              LDR      r0,|L60.268|
00009c  6800              LDR      r0,[r0,#0]  ; i11
00009e  491f              LDR      r1,|L60.284|
0000a0  6008              STR      r0,[r1,#0]  ; l
                  |L60.162|
;;;1624   		else{}
;;;1625   		if(temp11>=first){i11=9900;}else{}
0000a2  481b              LDR      r0,|L60.272|
0000a4  6800              LDR      r0,[r0,#0]  ; temp11
0000a6  42a8              CMP      r0,r5
0000a8  db02              BLT      |L60.176|
0000aa  481b              LDR      r0,|L60.280|
0000ac  4917              LDR      r1,|L60.268|
0000ae  6008              STR      r0,[r1,#0]  ; i11
                  |L60.176|
0000b0  4816              LDR      r0,|L60.268|
0000b2  6800              LDR      r0,[r0,#0]            ;1620  ; i11
0000b4  1c40              ADDS     r0,r0,#1              ;1620
0000b6  4915              LDR      r1,|L60.268|
0000b8  6008              STR      r0,[r1,#0]            ;1620  ; i11
                  |L60.186|
0000ba  4814              LDR      r0,|L60.268|
0000bc  6800              LDR      r0,[r0,#0]            ;1620  ; i11
0000be  4911              LDR      r1,|L60.260|
0000c0  6809              LDR      r1,[r1,#0]            ;1620  ; sz1
0000c2  4288              CMP      r0,r1                 ;1620
0000c4  dbde              BLT      |L60.132|
;;;1626   		}	
;;;1627   		for(i11=0;i11<(j11-l-1);i11++)
0000c6  2000              MOVS     r0,#0
0000c8  4910              LDR      r1,|L60.268|
0000ca  6008              STR      r0,[r1,#0]  ; i11
0000cc  e00e              B        |L60.236|
                  |L60.206|
;;;1628   		{
;;;1629   		string[i11] = str[l+i11+1];
0000ce  4813              LDR      r0,|L60.284|
0000d0  6800              LDR      r0,[r0,#0]  ; l
0000d2  490e              LDR      r1,|L60.268|
0000d4  6809              LDR      r1,[r1,#0]  ; i11
0000d6  1840              ADDS     r0,r0,r1
0000d8  1c40              ADDS     r0,r0,#1
0000da  5c20              LDRB     r0,[r4,r0]
0000dc  490b              LDR      r1,|L60.268|
0000de  6809              LDR      r1,[r1,#0]  ; i11
0000e0  5478              STRB     r0,[r7,r1]
0000e2  480a              LDR      r0,|L60.268|
0000e4  6800              LDR      r0,[r0,#0]            ;1627  ; i11
0000e6  1c40              ADDS     r0,r0,#1              ;1627
0000e8  4908              LDR      r1,|L60.268|
0000ea  6008              STR      r0,[r1,#0]            ;1627  ; i11
                  |L60.236|
0000ec  4809              LDR      r0,|L60.276|
0000ee  6800              LDR      r0,[r0,#0]            ;1627  ; j11
0000f0  490a              LDR      r1,|L60.284|
0000f2  6809              LDR      r1,[r1,#0]            ;1627  ; l
0000f4  1a40              SUBS     r0,r0,r1              ;1627
0000f6  1e40              SUBS     r0,r0,#1              ;1627
0000f8  4904              LDR      r1,|L60.268|
0000fa  6809              LDR      r1,[r1,#0]            ;1627  ; i11
0000fc  4288              CMP      r0,r1                 ;1627
0000fe  dce6              BGT      |L60.206|
;;;1630   		}			
;;;1631   	
;;;1632   
;;;1633   
;;;1634   }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
;;;1635   
                          ENDP

                  |L60.260|
                          DCD      ||sz1||
                  |L60.264|
                          DCD      ||sz2||
                  |L60.268|
                          DCD      i11
                  |L60.272|
                          DCD      temp11
                  |L60.276|
                          DCD      j11
                  |L60.280|
                          DCD      0x000026ac
                  |L60.284|
                          DCD      l

                          AREA ||i.ignstaton||, COMGROUP=ignstaton, CODE, READONLY, ALIGN=2

                  ignstaton PROC
;;;1270   	
;;;1271   __inline void ignstaton(){
000000  b508              PUSH     {r3,lr}
;;;1272   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L67.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L67.64|
000008  4a0e              LDR      r2,|L67.68|
00000a  490f              LDR      r1,|L67.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L67.76|
000010  f7fffffe          BL       send_GSM
;;;1273   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L67.64|
000018  4a0a              LDR      r2,|L67.68|
00001a  490d              LDR      r1,|L67.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L67.84|
000020  f7fffffe          BL       send_GSM
;;;1274   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1275   send_GSM("\nION\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L67.64|
00002e  4a05              LDR      r2,|L67.68|
000030  4909              LDR      r1,|L67.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L67.92|
000036  f7fffffe          BL       send_GSM
;;;1276   
;;;1277   
;;;1278   }	
00003a  bd08              POP      {r3,pc}
;;;1279   __inline void ignstatoff(){
                          ENDP

                  |L67.60|
                          DCD      tmeout
                  |L67.64|
                          DCD      ||.conststring||+0x10
                  |L67.68|
                          DCD      ||.conststring||+0x18
                  |L67.72|
                          DCD      ||.conststring||+0x2c
                  |L67.76|
                          DCD      ||.conststring||+0x30
                  |L67.80|
                          DCD      ||.conststring||+0x20
                  |L67.84|
                          DCD      ||.conststring||+0x4c
                  |L67.88|
                          DCD      ||.conststring||+0x70
                  |L67.92|
                          DCD      ||.conststring||+0x78

                          AREA ||i.save_ip_port||, COMGROUP=save_ip_port, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_ip_port PROC
;;;1231   	
;;;1232   __inline void save_ip_port()
000000  b538              PUSH     {r3-r5,lr}
;;;1233   {
;;;1234   	
;;;1235   send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4844              LDR      r0,|L74.276|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b44              LDR      r3,|L74.280|
000008  4a44              LDR      r2,|L74.284|
00000a  4945              LDR      r1,|L74.288|
00000c  9000              STR      r0,[sp,#0]
00000e  4845              LDR      r0,|L74.292|
000010  f7fffffe          BL       send_GSM
;;;1236   	
;;;1237   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4844              LDR      r0,|L74.296|
000018  f7fffffe          BL       __aeabi_memclr
;;;1238   	sprintf(at_,"\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",strlen(ip)+12+strlen(port));	
00001c  4843              LDR      r0,|L74.300|
00001e  f7fffffe          BL       strlen
000022  4605              MOV      r5,r0
000024  350c              ADDS     r5,r5,#0xc
000026  4842              LDR      r0,|L74.304|
000028  f7fffffe          BL       strlen
00002c  182c              ADDS     r4,r5,r0
00002e  4622              MOV      r2,r4
000030  4940              LDR      r1,|L74.308|
000032  483d              LDR      r0,|L74.296|
000034  f7fffffe          BL       __2sprintf
;;;1239   send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000038  200a              MOVS     r0,#0xa
00003a  4b37              LDR      r3,|L74.280|
00003c  4a37              LDR      r2,|L74.284|
00003e  493e              LDR      r1,|L74.312|
000040  9000              STR      r0,[sp,#0]
000042  4839              LDR      r0,|L74.296|
000044  f7fffffe          BL       send_GSM
;;;1240   	clear();
000048  f7fffffe          BL       clear
;;;1241   
;;;1242   	
;;;1243   	send_modem("|IP|");
00004c  483b              LDR      r0,|L74.316|
00004e  f7fffffe          BL       send_modem
;;;1244   		for(k=0;k<strlen(ip);k++)
000052  2000              MOVS     r0,#0
000054  493a              LDR      r1,|L74.320|
000056  6008              STR      r0,[r1,#0]  ; k
000058  e00b              B        |L74.114|
                  |L74.90|
;;;1245   		{
;;;1246   			uart_putchar(UART1_BASE_PTR, ip[k]);// uart0_putchar(UART0_BASE_PTR, ip[k]);//clear();
00005a  4834              LDR      r0,|L74.300|
00005c  4a38              LDR      r2,|L74.320|
00005e  6812              LDR      r2,[r2,#0]  ; k
000060  5c81              LDRB     r1,[r0,r2]
000062  4838              LDR      r0,|L74.324|
000064  f7fffffe          BL       uart_putchar
000068  4835              LDR      r0,|L74.320|
00006a  6800              LDR      r0,[r0,#0]            ;1244  ; k
00006c  1c40              ADDS     r0,r0,#1              ;1244
00006e  4934              LDR      r1,|L74.320|
000070  6008              STR      r0,[r1,#0]            ;1244  ; k
                  |L74.114|
000072  482e              LDR      r0,|L74.300|
000074  f7fffffe          BL       strlen
000078  4931              LDR      r1,|L74.320|
00007a  6809              LDR      r1,[r1,#0]            ;1244  ; k
00007c  4288              CMP      r0,r1                 ;1244
00007e  d8ec              BHI      |L74.90|
;;;1247   		}	
;;;1248   	send_modem("|PORT|");			
000080  4831              LDR      r0,|L74.328|
000082  f7fffffe          BL       send_modem
;;;1249   		for(k=0;k<strlen(port);k++)
000086  2000              MOVS     r0,#0
000088  492d              LDR      r1,|L74.320|
00008a  6008              STR      r0,[r1,#0]  ; k
00008c  e00b              B        |L74.166|
                  |L74.142|
;;;1250   		{
;;;1251   			uart_putchar(UART1_BASE_PTR, port[k]);// uart0_putchar(UART0_BASE_PTR, port[k]);//clear();
00008e  4828              LDR      r0,|L74.304|
000090  4a2b              LDR      r2,|L74.320|
000092  6812              LDR      r2,[r2,#0]  ; k
000094  5c81              LDRB     r1,[r0,r2]
000096  482b              LDR      r0,|L74.324|
000098  f7fffffe          BL       uart_putchar
00009c  4828              LDR      r0,|L74.320|
00009e  6800              LDR      r0,[r0,#0]            ;1249  ; k
0000a0  1c40              ADDS     r0,r0,#1              ;1249
0000a2  4927              LDR      r1,|L74.320|
0000a4  6008              STR      r0,[r1,#0]            ;1249  ; k
                  |L74.166|
0000a6  4822              LDR      r0,|L74.304|
0000a8  f7fffffe          BL       strlen
0000ac  4924              LDR      r1,|L74.320|
0000ae  6809              LDR      r1,[r1,#0]            ;1249  ; k
0000b0  4288              CMP      r0,r1                 ;1249
0000b2  d8ec              BHI      |L74.142|
;;;1252   		}	
;;;1253   send_modem("|");			
0000b4  4825              LDR      r0,|L74.332|
0000b6  f7fffffe          BL       send_modem
;;;1254   									//memset(data,0,1000);
;;;1255   									k2=0;									//string array counter for uart 1
0000ba  2000              MOVS     r0,#0
0000bc  4924              LDR      r1,|L74.336|
0000be  6008              STR      r0,[r1,#0]  ; k2
;;;1256   									time=19999;						//timer counts to wait for characters in uart 1 									
0000c0  4824              LDR      r0,|L74.340|
0000c2  4925              LDR      r1,|L74.344|
0000c4  6008              STR      r0,[r1,#0]  ; time
;;;1257   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
0000c6  e014              B        |L74.242|
                  |L74.200|
;;;1258   									{
;;;1259   									time--;
0000c8  4823              LDR      r0,|L74.344|
0000ca  6800              LDR      r0,[r0,#0]  ; time
0000cc  1e40              SUBS     r0,r0,#1
0000ce  4922              LDR      r1,|L74.344|
0000d0  6008              STR      r0,[r1,#0]  ; time
;;;1260   									if(time % 2000 == 0)
0000d2  217d              MOVS     r1,#0x7d
0000d4  0109              LSLS     r1,r1,#4
0000d6  4820              LDR      r0,|L74.344|
0000d8  6800              LDR      r0,[r0,#0]  ; time
0000da  f7fffffe          BL       __aeabi_idivmod
0000de  2900              CMP      r1,#0
0000e0  d107              BNE      |L74.242|
;;;1261   										{
;;;1262   											uart0_putchar(UART0_BASE_PTR,'1');
0000e2  2131              MOVS     r1,#0x31
0000e4  481d              LDR      r0,|L74.348|
0000e6  f7fffffe          BL       uart0_putchar
;;;1263   											uart_putchar(UART1_BASE_PTR,'\n');
0000ea  210a              MOVS     r1,#0xa
0000ec  4815              LDR      r0,|L74.324|
0000ee  f7fffffe          BL       uart_putchar
                  |L74.242|
0000f2  491b              LDR      r1,|L74.352|
0000f4  481b              LDR      r0,|L74.356|
0000f6  f7fffffe          BL       strstr
0000fa  2800              CMP      r0,#0                 ;1257
0000fc  d109              BNE      |L74.274|
0000fe  4816              LDR      r0,|L74.344|
000100  6800              LDR      r0,[r0,#0]            ;1257  ; time
000102  2801              CMP      r0,#1                 ;1257
000104  db05              BLT      |L74.274|
000106  4918              LDR      r1,|L74.360|
000108  4816              LDR      r0,|L74.356|
00010a  f7fffffe          BL       strstr
00010e  2800              CMP      r0,#0                 ;1257
000110  d0da              BEQ      |L74.200|
                  |L74.274|
;;;1264   										}
;;;1265   	
;;;1266   									}
;;;1267   
;;;1268   	
;;;1269   }	
000112  bd38              POP      {r3-r5,pc}
;;;1270   	
                          ENDP

                  |L74.276|
                          DCD      tmeout
                  |L74.280|
                          DCD      ||.conststring||+0x10
                  |L74.284|
                          DCD      ||.conststring||+0x18
                  |L74.288|
                          DCD      ||.conststring||+0x2c
                  |L74.292|
                          DCD      ||.conststring||+0x84
                  |L74.296|
                          DCD      at_
                  |L74.300|
                          DCD      ||ip||
                  |L74.304|
                          DCD      port
                  |L74.308|
                          DCD      ||.conststring||+0xa4
                  |L74.312|
                          DCD      ||.conststring||+0x20
                  |L74.316|
                          DCD      ||.conststring||+0xcc
                  |L74.320|
                          DCD      k
                  |L74.324|
                          DCD      0x4006b000
                  |L74.328|
                          DCD      ||.conststring||+0xd4
                  |L74.332|
                          DCD      ||.conststring||+0xdc
                  |L74.336|
                          DCD      ||k2||
                  |L74.340|
                          DCD      0x00004e1f
                  |L74.344|
                          DCD      time
                  |L74.348|
                          DCD      0x4006a000
                  |L74.352|
                          DCD      ||.conststring||+0x70
                  |L74.356|
                          DCD      uart_string_gsm
                  |L74.360|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.adc_read||, COMGROUP=adc_read, CODE, READONLY, ALIGN=2

                  adc_read PROC
;;;32     
;;;33     __inline void adc_read(uint8_t channel)
000000  b510              PUSH     {r4,lr}
;;;34     {
000002  4604              MOV      r4,r0
;;;35     	adcin=0;fuel=0;adcsample=0;
000004  2000              MOVS     r0,#0
000006  4922              LDR      r1,|L81.144|
000008  6008              STR      r0,[r1,#0]  ; adcin
00000a  4922              LDR      r1,|L81.148|
00000c  6008              STR      r0,[r1,#0]  ; fuel
00000e  4922              LDR      r1,|L81.152|
000010  6008              STR      r0,[r1,#0]  ; adcsample
;;;36     for(e=0;e<500;){
000012  4922              LDR      r1,|L81.156|
000014  6008              STR      r0,[r1,#0]  ; e
000016  e02c              B        |L81.114|
                  |L81.24|
;;;37     	
;;;38     ADC0->SC1[0] = !ADC_SC1_AIEN_MASK | ADC_SC1_DIFF_MASK | ADC_SC1_ADCH(channel) ;
000018  06e0              LSLS     r0,r4,#27
00001a  0ec0              LSRS     r0,r0,#27
00001c  2120              MOVS     r1,#0x20
00001e  4308              ORRS     r0,r0,r1
000020  491f              LDR      r1,|L81.160|
000022  6008              STR      r0,[r1,#0]
;;;39     while(ADC0_SC2 & ADC_SC2_ADACT_MASK); //Conversion in progress
000024  bf00              NOP      
                  |L81.38|
000026  481e              LDR      r0,|L81.160|
000028  6a00              LDR      r0,[r0,#0x20]
00002a  2180              MOVS     r1,#0x80
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d1f9              BNE      |L81.38|
;;;40     while(!(ADC0_SC1A & ADC_SC1_COCO_MASK)); //Wait until conversion complete
000032  bf00              NOP      
                  |L81.52|
000034  481a              LDR      r0,|L81.160|
000036  6800              LDR      r0,[r0,#0]
000038  2180              MOVS     r1,#0x80
00003a  4008              ANDS     r0,r0,r1
00003c  2800              CMP      r0,#0
00003e  d0f9              BEQ      |L81.52|
;;;41     adcin = ADC0_RA;
000040  4817              LDR      r0,|L81.160|
000042  6900              LDR      r0,[r0,#0x10]
000044  4912              LDR      r1,|L81.144|
000046  6008              STR      r0,[r1,#0]  ; adcin
;;;42     
;;;43     
;;;44     		if(adcin>40000){adcin=0;}
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]  ; adcin
00004c  4915              LDR      r1,|L81.164|
00004e  4288              CMP      r0,r1
000050  dd03              BLE      |L81.90|
000052  2000              MOVS     r0,#0
000054  490e              LDR      r1,|L81.144|
000056  6008              STR      r0,[r1,#0]  ; adcin
000058  e006              B        |L81.104|
                  |L81.90|
;;;45     			else{
;;;46     			adcsample+=adcin;
00005a  480f              LDR      r0,|L81.152|
00005c  6800              LDR      r0,[r0,#0]  ; adcsample
00005e  490c              LDR      r1,|L81.144|
000060  6809              LDR      r1,[r1,#0]  ; adcin
000062  1840              ADDS     r0,r0,r1
000064  490c              LDR      r1,|L81.152|
000066  6008              STR      r0,[r1,#0]  ; adcsample
                  |L81.104|
;;;47     			}
;;;48     			e++;
000068  480c              LDR      r0,|L81.156|
00006a  6800              LDR      r0,[r0,#0]  ; e
00006c  1c40              ADDS     r0,r0,#1
00006e  490b              LDR      r1,|L81.156|
000070  6008              STR      r0,[r1,#0]  ; e
                  |L81.114|
000072  480a              LDR      r0,|L81.156|
000074  6800              LDR      r0,[r0,#0]            ;36  ; e
000076  21ff              MOVS     r1,#0xff              ;36
000078  31f5              ADDS     r1,r1,#0xf5           ;36
00007a  4288              CMP      r0,r1                 ;36
00007c  dbcc              BLT      |L81.24|
;;;49     	}
;;;50     fuel=adcsample/5000;	
00007e  490a              LDR      r1,|L81.168|
000080  4805              LDR      r0,|L81.152|
000082  6800              LDR      r0,[r0,#0]  ; adcsample
000084  f7fffffe          BL       __aeabi_idivmod
000088  4902              LDR      r1,|L81.148|
00008a  6008              STR      r0,[r1,#0]  ; fuel
;;;51     
;;;52     }
00008c  bd10              POP      {r4,pc}
;;;53     	
                          ENDP

00008e  0000              DCW      0x0000
                  |L81.144|
                          DCD      adcin
                  |L81.148|
                          DCD      fuel
                  |L81.152|
                          DCD      adcsample
                  |L81.156|
                          DCD      e
                  |L81.160|
                          DCD      0x4003b000
                  |L81.164|
                          DCD      0x00009c40
                  |L81.168|
                          DCD      0x00001388

                          AREA ||i.stof||, COMGROUP=stof, CODE, READONLY, ALIGN=2

                  stof PROC
;;;1104   
;;;1105   __inline float stof(const char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;1106   {rez=0;fact=1;
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  4925              LDR      r1,|L88.156|
000008  6008              STR      r0,[r1,#0]  ; rez
00000a  207f              MOVS     r0,#0x7f
00000c  05c0              LSLS     r0,r0,#23
00000e  4924              LDR      r1,|L88.160|
000010  6008              STR      r0,[r1,#0]  ; fact
;;;1107   
;;;1108     if (*s == '-'){
000012  7820              LDRB     r0,[r4,#0]
000014  282d              CMP      r0,#0x2d
000016  d102              BNE      |L88.30|
;;;1109       s++;
000018  1c64              ADDS     r4,r4,#1
;;;1110       fact = -1;
00001a  4822              LDR      r0,|L88.164|
00001c  6008              STR      r0,[r1,#0]  ; fact
                  |L88.30|
;;;1111     };
;;;1112     for (point_seen = 0; *s; s++){
00001e  2000              MOVS     r0,#0
000020  4921              LDR      r1,|L88.168|
000022  6008              STR      r0,[r1,#0]  ; point_seen
000024  e02f              B        |L88.134|
                  |L88.38|
;;;1113       if (*s == '.'){
000026  7820              LDRB     r0,[r4,#0]
000028  282e              CMP      r0,#0x2e
00002a  d103              BNE      |L88.52|
;;;1114         point_seen = 1; 
00002c  2001              MOVS     r0,#1
00002e  491e              LDR      r1,|L88.168|
000030  6008              STR      r0,[r1,#0]  ; point_seen
;;;1115         continue;
000032  e027              B        |L88.132|
                  |L88.52|
;;;1116       };
;;;1117       d = *s - '0';
000034  7820              LDRB     r0,[r4,#0]
000036  3830              SUBS     r0,r0,#0x30
000038  491c              LDR      r1,|L88.172|
00003a  6008              STR      r0,[r1,#0]  ; d
;;;1118       if (d >= 0 && d <= 9){
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]  ; d
000040  2800              CMP      r0,#0
000042  db1e              BLT      |L88.130|
000044  4608              MOV      r0,r1
000046  6800              LDR      r0,[r0,#0]  ; d
000048  2809              CMP      r0,#9
00004a  dc1a              BGT      |L88.130|
;;;1119         if (point_seen) fact /= 10.0f;
00004c  4816              LDR      r0,|L88.168|
00004e  6800              LDR      r0,[r0,#0]  ; point_seen
000050  2800              CMP      r0,#0
000052  d006              BEQ      |L88.98|
000054  4916              LDR      r1,|L88.176|
000056  4812              LDR      r0,|L88.160|
000058  6800              LDR      r0,[r0,#0]  ; fact
00005a  f7fffffe          BL       __aeabi_fdiv
00005e  4910              LDR      r1,|L88.160|
000060  6008              STR      r0,[r1,#0]  ; fact
                  |L88.98|
;;;1120         rez = rez * 10.0f + (float)d;
000062  4812              LDR      r0,|L88.172|
000064  6800              LDR      r0,[r0,#0]  ; d
000066  f7fffffe          BL       __aeabi_i2f
00006a  4605              MOV      r5,r0
00006c  4910              LDR      r1,|L88.176|
00006e  480b              LDR      r0,|L88.156|
000070  6800              LDR      r0,[r0,#0]  ; rez
000072  f7fffffe          BL       __aeabi_fmul
000076  4606              MOV      r6,r0
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       __aeabi_fadd
00007e  4907              LDR      r1,|L88.156|
000080  6008              STR      r0,[r1,#0]  ; rez
                  |L88.130|
000082  bf00              NOP                            ;1115
                  |L88.132|
000084  1c64              ADDS     r4,r4,#1              ;1112
                  |L88.134|
000086  7820              LDRB     r0,[r4,#0]            ;1112
000088  2800              CMP      r0,#0                 ;1112
00008a  d1cc              BNE      |L88.38|
;;;1121       };
;;;1122     };
;;;1123     return rez * fact;
00008c  4804              LDR      r0,|L88.160|
00008e  6801              LDR      r1,[r0,#0]  ; fact
000090  4802              LDR      r0,|L88.156|
000092  6800              LDR      r0,[r0,#0]  ; rez
000094  f7fffffe          BL       __aeabi_fmul
;;;1124   };
000098  bd70              POP      {r4-r6,pc}
;;;1125   
                          ENDP

00009a  0000              DCW      0x0000
                  |L88.156|
                          DCD      ||rez||
                  |L88.160|
                          DCD      fact
                  |L88.164|
                          DCD      0xbf800000
                  |L88.168|
                          DCD      point_seen
                  |L88.172|
                          DCD      d
                  |L88.176|
                          DCD      0x41200000

                          AREA ||i.get_gpsdata||, COMGROUP=get_gpsdata, CODE, READONLY, ALIGN=2

                  get_gpsdata PROC
;;;1323   
;;;1324   __inline void get_gpsdata()
000000  b510              PUSH     {r4,lr}
;;;1325   {
;;;1326   						clear2();
000002  f7fffffe          BL       clear2
;;;1327   						memset(uart_string_gps,0,3000);memset(gga,0,100);memset(rmc,0,100);			
000006  4952              LDR      r1,|L95.336|
000008  4852              LDR      r0,|L95.340|
00000a  f7fffffe          BL       __aeabi_memclr
00000e  2164              MOVS     r1,#0x64
000010  4851              LDR      r0,|L95.344|
000012  f7fffffe          BL       __aeabi_memclr
000016  2164              MOVS     r1,#0x64
000018  4850              LDR      r0,|L95.348|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1328   						i=0;tout2=0;
00001e  2000              MOVS     r0,#0
000020  494f              LDR      r1,|L95.352|
000022  6008              STR      r0,[r1,#0]  ; i
000024  494f              LDR      r1,|L95.356|
000026  6008              STR      r0,[r1,#0]  ; tout2
;;;1329   //						t22=9999999;
;;;1330   do{
000028  bf00              NOP      
                  |L95.42|
;;;1331   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00002a  484f              LDR      r0,|L95.360|
00002c  7900              LDRB     r0,[r0,#4]
00002e  2120              MOVS     r1,#0x20
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d00a              BEQ      |L95.76|
;;;1332   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000036  484c              LDR      r0,|L95.360|
000038  79c0              LDRB     r0,[r0,#7]
00003a  4946              LDR      r1,|L95.340|
00003c  4a48              LDR      r2,|L95.352|
00003e  6812              LDR      r2,[r2,#0]  ; i
000040  5488              STRB     r0,[r1,r2]
;;;1333   				i++;
000042  4847              LDR      r0,|L95.352|
000044  6800              LDR      r0,[r0,#0]  ; i
000046  1c40              ADDS     r0,r0,#1
000048  4945              LDR      r1,|L95.352|
00004a  6008              STR      r0,[r1,#0]  ; i
                  |L95.76|
;;;1334   	}
;;;1335   	}while(!   (strstr(uart_string_gps,"RMC")       ||  (tout2>1)  )  );
00004c  4947              LDR      r1,|L95.364|
00004e  4841              LDR      r0,|L95.340|
000050  f7fffffe          BL       strstr
000054  2800              CMP      r0,#0
000056  d103              BNE      |L95.96|
000058  4842              LDR      r0,|L95.356|
00005a  6800              LDR      r0,[r0,#0]  ; tout2
00005c  2801              CMP      r0,#1
00005e  dde4              BLE      |L95.42|
                  |L95.96|
;;;1336   i=0;tout2=0;
000060  2000              MOVS     r0,#0
000062  493f              LDR      r1,|L95.352|
000064  6008              STR      r0,[r1,#0]  ; i
000066  493f              LDR      r1,|L95.356|
000068  6008              STR      r0,[r1,#0]  ; tout2
;;;1337   do{
00006a  bf00              NOP      
                  |L95.108|
;;;1338   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00006c  483e              LDR      r0,|L95.360|
00006e  7900              LDRB     r0,[r0,#4]
000070  2120              MOVS     r1,#0x20
000072  4008              ANDS     r0,r0,r1
000074  2800              CMP      r0,#0
000076  d00a              BEQ      |L95.142|
;;;1339   	{		rmc[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000078  483b              LDR      r0,|L95.360|
00007a  79c1              LDRB     r1,[r0,#7]
00007c  4837              LDR      r0,|L95.348|
00007e  4a38              LDR      r2,|L95.352|
000080  6812              LDR      r2,[r2,#0]  ; i
000082  5481              STRB     r1,[r0,r2]
;;;1340   				i++;
000084  4836              LDR      r0,|L95.352|
000086  6800              LDR      r0,[r0,#0]  ; i
000088  1c40              ADDS     r0,r0,#1
00008a  4935              LDR      r1,|L95.352|
00008c  6008              STR      r0,[r1,#0]  ; i
                  |L95.142|
;;;1341   	}
;;;1342   }while(     !( mystrstr(rmc,'*')    ||  tout2>1) );
00008e  212a              MOVS     r1,#0x2a
000090  4832              LDR      r0,|L95.348|
000092  f7fffffe          BL       mystrstr
000096  2800              CMP      r0,#0
000098  d103              BNE      |L95.162|
00009a  4832              LDR      r0,|L95.356|
00009c  6800              LDR      r0,[r0,#0]  ; tout2
00009e  2801              CMP      r0,#1
0000a0  dde4              BLE      |L95.108|
                  |L95.162|
;;;1343   memset(uart_string_gps,0,3000);
0000a2  492b              LDR      r1,|L95.336|
0000a4  482b              LDR      r0,|L95.340|
0000a6  f7fffffe          BL       __aeabi_memclr
;;;1344   i=0;tout2=0;
0000aa  2000              MOVS     r0,#0
0000ac  492c              LDR      r1,|L95.352|
0000ae  6008              STR      r0,[r1,#0]  ; i
0000b0  492c              LDR      r1,|L95.356|
0000b2  6008              STR      r0,[r1,#0]  ; tout2
;;;1345   do{
0000b4  bf00              NOP      
                  |L95.182|
;;;1346   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000b6  482c              LDR      r0,|L95.360|
0000b8  7900              LDRB     r0,[r0,#4]
0000ba  2120              MOVS     r1,#0x20
0000bc  4008              ANDS     r0,r0,r1
0000be  2800              CMP      r0,#0
0000c0  d00a              BEQ      |L95.216|
;;;1347   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
0000c2  4829              LDR      r0,|L95.360|
0000c4  79c0              LDRB     r0,[r0,#7]
0000c6  4923              LDR      r1,|L95.340|
0000c8  4a25              LDR      r2,|L95.352|
0000ca  6812              LDR      r2,[r2,#0]  ; i
0000cc  5488              STRB     r0,[r1,r2]
;;;1348   				i++;
0000ce  4824              LDR      r0,|L95.352|
0000d0  6800              LDR      r0,[r0,#0]  ; i
0000d2  1c40              ADDS     r0,r0,#1
0000d4  4922              LDR      r1,|L95.352|
0000d6  6008              STR      r0,[r1,#0]  ; i
                  |L95.216|
;;;1349   	}
;;;1350   }while(!  (strstr(uart_string_gps,"GGA")      ||  (tout2>1) )  );
0000d8  4925              LDR      r1,|L95.368|
0000da  481e              LDR      r0,|L95.340|
0000dc  f7fffffe          BL       strstr
0000e0  2800              CMP      r0,#0
0000e2  d103              BNE      |L95.236|
0000e4  481f              LDR      r0,|L95.356|
0000e6  6800              LDR      r0,[r0,#0]  ; tout2
0000e8  2801              CMP      r0,#1
0000ea  dde4              BLE      |L95.182|
                  |L95.236|
;;;1351   i=0;tout2=0;
0000ec  2000              MOVS     r0,#0
0000ee  491c              LDR      r1,|L95.352|
0000f0  6008              STR      r0,[r1,#0]  ; i
0000f2  491c              LDR      r1,|L95.356|
0000f4  6008              STR      r0,[r1,#0]  ; tout2
;;;1352   do{
0000f6  bf00              NOP      
                  |L95.248|
;;;1353   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000f8  481b              LDR      r0,|L95.360|
0000fa  7900              LDRB     r0,[r0,#4]
0000fc  2120              MOVS     r1,#0x20
0000fe  4008              ANDS     r0,r0,r1
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L95.282|
;;;1354   	{		gga[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000104  4818              LDR      r0,|L95.360|
000106  79c1              LDRB     r1,[r0,#7]
000108  4813              LDR      r0,|L95.344|
00010a  4a15              LDR      r2,|L95.352|
00010c  6812              LDR      r2,[r2,#0]  ; i
00010e  5481              STRB     r1,[r0,r2]
;;;1355   				i++;
000110  4813              LDR      r0,|L95.352|
000112  6800              LDR      r0,[r0,#0]  ; i
000114  1c40              ADDS     r0,r0,#1
000116  4912              LDR      r1,|L95.352|
000118  6008              STR      r0,[r1,#0]  ; i
                  |L95.282|
;;;1356   	}
;;;1357   }while(!(mystrstr(gga,'*')  ||  (tout2>1) ));
00011a  212a              MOVS     r1,#0x2a
00011c  480e              LDR      r0,|L95.344|
00011e  f7fffffe          BL       mystrstr
000122  2800              CMP      r0,#0
000124  d103              BNE      |L95.302|
000126  480f              LDR      r0,|L95.356|
000128  6800              LDR      r0,[r0,#0]  ; tout2
00012a  2801              CMP      r0,#1
00012c  dde4              BLE      |L95.248|
                  |L95.302|
;;;1358   
;;;1359   clear2();
00012e  f7fffffe          BL       clear2
;;;1360   
;;;1361   		
;;;1362   
;;;1363   stateCount++; 
000132  4810              LDR      r0,|L95.372|
000134  7800              LDRB     r0,[r0,#0]  ; stateCount
000136  1c40              ADDS     r0,r0,#1
000138  490e              LDR      r1,|L95.372|
00013a  7008              STRB     r0,[r1,#0]
;;;1364   if(stateCount>5){stateCount =0;}
00013c  4608              MOV      r0,r1
00013e  7800              LDRB     r0,[r0,#0]  ; stateCount
000140  2805              CMP      r0,#5
000142  dd01              BLE      |L95.328|
000144  2000              MOVS     r0,#0
000146  7008              STRB     r0,[r1,#0]
                  |L95.328|
;;;1365   LED_state2();					
000148  f7fffffe          BL       LED_state2
;;;1366   }
00014c  bd10              POP      {r4,pc}
;;;1367   	
                          ENDP

00014e  0000              DCW      0x0000
                  |L95.336|
                          DCD      0x00000bb8
                  |L95.340|
                          DCD      uart_string_gps
                  |L95.344|
                          DCD      gga
                  |L95.348|
                          DCD      ||rmc||
                  |L95.352|
                          DCD      i
                  |L95.356|
                          DCD      tout2
                  |L95.360|
                          DCD      0x4006c000
                  |L95.364|
                          DCD      ||.conststring||+0xe8
                  |L95.368|
                          DCD      ||.conststring||+0xec
                  |L95.372|
                          DCD      stateCount

                          AREA ||i.myAtoi||, COMGROUP=myAtoi, CODE, READONLY, ALIGN=2

                  myAtoi PROC
;;;1092   
;;;1093   __inline int myAtoi(char *str)
000000  4601              MOV      r1,r0
;;;1094   {res=0;
000002  2000              MOVS     r0,#0
000004  4a0e              LDR      r2,|L102.64|
000006  6010              STR      r0,[r2,#0]  ; res
;;;1095       // Initialize result
;;;1096   
;;;1097       // Iterate through all characters of input string and update result
;;;1098       for (iz = 0; str[iz] != '\0'; ++iz)
000008  4a0e              LDR      r2,|L102.68|
00000a  6010              STR      r0,[r2,#0]  ; iz
00000c  e00f              B        |L102.46|
                  |L102.14|
;;;1099           res = res*10 + str[iz] - '0';
00000e  480c              LDR      r0,|L102.64|
000010  6800              LDR      r0,[r0,#0]  ; res
000012  220a              MOVS     r2,#0xa
000014  4350              MULS     r0,r2,r0
000016  4a0b              LDR      r2,|L102.68|
000018  6812              LDR      r2,[r2,#0]  ; iz
00001a  5c8a              LDRB     r2,[r1,r2]
00001c  1880              ADDS     r0,r0,r2
00001e  3830              SUBS     r0,r0,#0x30
000020  4a07              LDR      r2,|L102.64|
000022  6010              STR      r0,[r2,#0]  ; res
000024  4807              LDR      r0,|L102.68|
000026  6800              LDR      r0,[r0,#0]            ;1098  ; iz
000028  1c40              ADDS     r0,r0,#1              ;1098
00002a  4a06              LDR      r2,|L102.68|
00002c  6010              STR      r0,[r2,#0]            ;1098  ; iz
                  |L102.46|
00002e  4805              LDR      r0,|L102.68|
000030  6800              LDR      r0,[r0,#0]            ;1098  ; iz
000032  5c08              LDRB     r0,[r1,r0]            ;1098
000034  2800              CMP      r0,#0                 ;1098
000036  d1ea              BNE      |L102.14|
;;;1100   
;;;1101       // return result.
;;;1102       return res;
000038  4801              LDR      r0,|L102.64|
00003a  6800              LDR      r0,[r0,#0]  ; res
;;;1103   }
00003c  4770              BX       lr
;;;1104   
                          ENDP

00003e  0000              DCW      0x0000
                  |L102.64|
                          DCD      ||res||
                  |L102.68|
                          DCD      ||iz||

                          AREA ||i.GPS_COLLECT||, COMGROUP=GPS_COLLECT, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT PROC
;;;1127   
;;;1128   __inline void GPS_COLLECT()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1129   {imeiinc=0;
000002  2000              MOVS     r0,#0
000004  49db              LDR      r1,|L109.884|
000006  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1130   delay(200);
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       delay
;;;1131   clear();
00000e  f7fffffe          BL       clear
;;;1132   //adc_read(8);							
;;;1133   //memset(fuelstr,0,5);
;;;1134   //sprintf(fuelstr,"%d,",fuel);	
;;;1135   	
;;;1136   memset(imei,0,20);
000012  2114              MOVS     r1,#0x14
000014  48d8              LDR      r0,|L109.888|
000016  f7fffffe          BL       __aeabi_memclr
;;;1137   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
00001a  200a              MOVS     r0,#0xa
00001c  4bd7              LDR      r3,|L109.892|
00001e  4ad8              LDR      r2,|L109.896|
000020  49d8              LDR      r1,|L109.900|
000022  9000              STR      r0,[sp,#0]
000024  48d8              LDR      r0,|L109.904|
000026  f7fffffe          BL       send_GSM
;;;1138   for(i=0;i<strlen(uart_string_gsm);i++){
00002a  2000              MOVS     r0,#0
00002c  49d7              LDR      r1,|L109.908|
00002e  6008              STR      r0,[r1,#0]  ; i
000030  e01d              B        |L109.110|
                  |L109.50|
;;;1139   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
000032  48d7              LDR      r0,|L109.912|
000034  49d5              LDR      r1,|L109.908|
000036  6809              LDR      r1,[r1,#0]  ; i
000038  5c40              LDRB     r0,[r0,r1]
00003a  282f              CMP      r0,#0x2f
00003c  dd12              BLE      |L109.100|
00003e  48d4              LDR      r0,|L109.912|
000040  49d2              LDR      r1,|L109.908|
000042  6809              LDR      r1,[r1,#0]  ; i
000044  5c40              LDRB     r0,[r0,r1]
000046  283a              CMP      r0,#0x3a
000048  da0c              BGE      |L109.100|
;;;1140   			imei[imeiinc] = uart_string_gsm[i];
00004a  48d1              LDR      r0,|L109.912|
00004c  49cf              LDR      r1,|L109.908|
00004e  6809              LDR      r1,[r1,#0]  ; i
000050  5c41              LDRB     r1,[r0,r1]
000052  48c9              LDR      r0,|L109.888|
000054  4ac7              LDR      r2,|L109.884|
000056  6812              LDR      r2,[r2,#0]  ; imeiinc
000058  5481              STRB     r1,[r0,r2]
;;;1141   			imeiinc++;
00005a  48c6              LDR      r0,|L109.884|
00005c  6800              LDR      r0,[r0,#0]  ; imeiinc
00005e  1c40              ADDS     r0,r0,#1
000060  49c4              LDR      r1,|L109.884|
000062  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L109.100|
000064  48c9              LDR      r0,|L109.908|
000066  6800              LDR      r0,[r0,#0]            ;1138  ; i
000068  1c40              ADDS     r0,r0,#1              ;1138
00006a  49c8              LDR      r1,|L109.908|
00006c  6008              STR      r0,[r1,#0]            ;1138  ; i
                  |L109.110|
00006e  48c8              LDR      r0,|L109.912|
000070  f7fffffe          BL       strlen
000074  49c5              LDR      r1,|L109.908|
000076  6809              LDR      r1,[r1,#0]            ;1138  ; i
000078  4288              CMP      r0,r1                 ;1138
00007a  d8da              BHI      |L109.50|
;;;1142   		}
;;;1143   }
;;;1144   clear();	
00007c  f7fffffe          BL       clear
;;;1145   
;;;1146   
;;;1147   
;;;1148   
;;;1149   
;;;1150   time52=15;	
000080  200f              MOVS     r0,#0xf
000082  49c4              LDR      r1,|L109.916|
000084  6008              STR      r0,[r1,#0]  ; time52
;;;1151   
;;;1152   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
000086  48c4              LDR      r0,|L109.920|
000088  6800              LDR      r0,[r0,#0]  ; tmeout
00008a  4bc4              LDR      r3,|L109.924|
00008c  4abb              LDR      r2,|L109.892|
00008e  49bd              LDR      r1,|L109.900|
000090  9000              STR      r0,[sp,#0]
000092  48c3              LDR      r0,|L109.928|
000094  f7fffffe          BL       send_GSM
;;;1153   	// not sleep	
;;;1154   	memset(num2,0,30);
000098  211e              MOVS     r1,#0x1e
00009a  48c2              LDR      r0,|L109.932|
00009c  f7fffffe          BL       __aeabi_memclr
;;;1155   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
0000a0  48c0              LDR      r0,|L109.932|
0000a2  210d              MOVS     r1,#0xd
0000a4  232c              MOVS     r3,#0x2c
0000a6  2205              MOVS     r2,#5
0000a8  9100              STR      r1,[sp,#0]
0000aa  9001              STR      r0,[sp,#4]
0000ac  2102              MOVS     r1,#2
0000ae  48b8              LDR      r0,|L109.912|
0000b0  f7fffffe          BL       parse_g
;;;1156   	voltagecbc=myAtoi(num2);
0000b4  48bb              LDR      r0,|L109.932|
0000b6  f7fffffe          BL       myAtoi
0000ba  49bb              LDR      r1,|L109.936|
0000bc  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1157   memset(ignstr,0,2);
0000be  48bb              LDR      r0,|L109.940|
0000c0  2100              MOVS     r1,#0
0000c2  7001              STRB     r1,[r0,#0]
0000c4  7041              STRB     r1,[r0,#1]
;;;1158   if(GPIOB_PDIR & 0x00000001){
0000c6  48ba              LDR      r0,|L109.944|
0000c8  6900              LDR      r0,[r0,#0x10]
0000ca  07c0              LSLS     r0,r0,#31
0000cc  0fc0              LSRS     r0,r0,#31
0000ce  2800              CMP      r0,#0
0000d0  d005              BEQ      |L109.222|
;;;1159   			sprintf(ignstr,"%d",1);
0000d2  2201              MOVS     r2,#1
0000d4  49b7              LDR      r1,|L109.948|
0000d6  48b5              LDR      r0,|L109.940|
0000d8  f7fffffe          BL       __2sprintf
0000dc  e004              B        |L109.232|
                  |L109.222|
;;;1160   }
;;;1161   else{
;;;1162   				sprintf(ignstr,"%d",0);
0000de  2200              MOVS     r2,#0
0000e0  49b4              LDR      r1,|L109.948|
0000e2  48b2              LDR      r0,|L109.940|
0000e4  f7fffffe          BL       __2sprintf
                  |L109.232|
;;;1163   
;;;1164   }
;;;1165   
;;;1166   memset(acstr,0,2); //ptb2
0000e8  48b3              LDR      r0,|L109.952|
0000ea  2100              MOVS     r1,#0
0000ec  8001              STRH     r1,[r0,#0]
;;;1167   if(GPIOB_PDIR & 0x00000004){
0000ee  48b0              LDR      r0,|L109.944|
0000f0  6900              LDR      r0,[r0,#0x10]
0000f2  2104              MOVS     r1,#4
0000f4  4008              ANDS     r0,r0,r1
0000f6  2800              CMP      r0,#0
0000f8  d005              BEQ      |L109.262|
;;;1168   			sprintf(acstr,"%d",1);
0000fa  2201              MOVS     r2,#1
0000fc  49ad              LDR      r1,|L109.948|
0000fe  48ae              LDR      r0,|L109.952|
000100  f7fffffe          BL       __2sprintf
000104  e004              B        |L109.272|
                  |L109.262|
;;;1169   }
;;;1170   else{
;;;1171   			sprintf(acstr,"%d",0);
000106  2200              MOVS     r2,#0
000108  49aa              LDR      r1,|L109.948|
00010a  48ab              LDR      r0,|L109.952|
00010c  f7fffffe          BL       __2sprintf
                  |L109.272|
;;;1172   
;;;1173   }
;;;1174   
;;;1175   
;;;1176   if(int_erval>60){int_erval=5;}
000110  48aa              LDR      r0,|L109.956|
000112  6800              LDR      r0,[r0,#0]  ; int_erval
000114  283c              CMP      r0,#0x3c
000116  dd02              BLE      |L109.286|
000118  2005              MOVS     r0,#5
00011a  49a8              LDR      r1,|L109.956|
00011c  6008              STR      r0,[r1,#0]  ; int_erval
                  |L109.286|
;;;1177   while(lpticks<int_erval);
00011e  bf00              NOP      
                  |L109.288|
000120  48a7              LDR      r0,|L109.960|
000122  6800              LDR      r0,[r0,#0]  ; lpticks
000124  49a5              LDR      r1,|L109.956|
000126  6809              LDR      r1,[r1,#0]  ; int_erval
000128  4288              CMP      r0,r1
00012a  dbf9              BLT      |L109.288|
;;;1178   get_gpsdata();
00012c  f7fffffe          BL       get_gpsdata
;;;1179   lpticks=0;
000130  2000              MOVS     r0,#0
000132  49a3              LDR      r1,|L109.960|
000134  6008              STR      r0,[r1,#0]  ; lpticks
;;;1180   
;;;1181   parse_g(rmc, 3, 4, ',', ',' ,lati);
000136  48a3              LDR      r0,|L109.964|
000138  212c              MOVS     r1,#0x2c
00013a  460b              MOV      r3,r1
00013c  2204              MOVS     r2,#4
00013e  9100              STR      r1,[sp,#0]
000140  9001              STR      r0,[sp,#4]
000142  2103              MOVS     r1,#3
000144  48a0              LDR      r0,|L109.968|
000146  f7fffffe          BL       parse_g
;;;1182   parse_g(rmc, 5, 6, ',', ',' ,longi);
00014a  48a0              LDR      r0,|L109.972|
00014c  212c              MOVS     r1,#0x2c
00014e  460b              MOV      r3,r1
000150  2206              MOVS     r2,#6
000152  9100              STR      r1,[sp,#0]
000154  9001              STR      r0,[sp,#4]
000156  2105              MOVS     r1,#5
000158  489b              LDR      r0,|L109.968|
00015a  f7fffffe          BL       parse_g
;;;1183   parse_g(rmc, 7, 8, ',', ',' ,velocity);
00015e  489c              LDR      r0,|L109.976|
000160  212c              MOVS     r1,#0x2c
000162  460b              MOV      r3,r1
000164  2208              MOVS     r2,#8
000166  9100              STR      r1,[sp,#0]
000168  9001              STR      r0,[sp,#4]
00016a  2107              MOVS     r1,#7
00016c  4896              LDR      r0,|L109.968|
00016e  f7fffffe          BL       parse_g
;;;1184   		
;;;1185   		speed = stof(velocity);
000172  4897              LDR      r0,|L109.976|
000174  f7fffffe          BL       stof
000178  4996              LDR      r1,|L109.980|
00017a  6008              STR      r0,[r1,#0]  ; speed
;;;1186   		c=stof(lati);//7523.7412
00017c  4891              LDR      r0,|L109.964|
00017e  f7fffffe          BL       stof
000182  4604              MOV      r4,r0
000184  f7fffffe          BL       __aeabi_f2d
000188  4a93              LDR      r2,|L109.984|
00018a  c203              STM      r2!,{r0,r1}
;;;1187   		hh= c/100; //75
00018c  2200              MOVS     r2,#0
00018e  4b93              LDR      r3,|L109.988|
000190  4991              LDR      r1,|L109.984|
000192  c903              LDM      r1,{r0,r1}
000194  f7fffffe          BL       __aeabi_ddiv
000198  4604              MOV      r4,r0
00019a  f7fffffe          BL       __aeabi_d2iz
00019e  4990              LDR      r1,|L109.992|
0001a0  6008              STR      r0,[r1,#0]  ; hh
;;;1188   		hh11 = c/100; //75.237412
0001a2  2200              MOVS     r2,#0
0001a4  4b8d              LDR      r3,|L109.988|
0001a6  498c              LDR      r1,|L109.984|
0001a8  c903              LDM      r1,{r0,r1}
0001aa  f7fffffe          BL       __aeabi_ddiv
0001ae  4a8d              LDR      r2,|L109.996|
0001b0  c203              STM      r2!,{r0,r1}
;;;1189   		mm11 = hh11-hh; //.237412
0001b2  488b              LDR      r0,|L109.992|
0001b4  6800              LDR      r0,[r0,#0]  ; hh
0001b6  f7fffffe          BL       __aeabi_i2d
0001ba  4604              MOV      r4,r0
0001bc  4889              LDR      r0,|L109.996|
0001be  c80c              LDM      r0!,{r2,r3}
0001c0  4620              MOV      r0,r4
0001c2  f7fffffe          BL       __aeabi_drsub
0001c6  4a88              LDR      r2,|L109.1000|
0001c8  c203              STM      r2!,{r0,r1}
;;;1190   		mm11*=100;
0001ca  2200              MOVS     r2,#0
0001cc  4b83              LDR      r3,|L109.988|
0001ce  4986              LDR      r1,|L109.1000|
0001d0  c903              LDM      r1,{r0,r1}
0001d2  f7fffffe          BL       __aeabi_dmul
0001d6  4a84              LDR      r2,|L109.1000|
0001d8  c203              STM      r2!,{r0,r1}
;;;1191   		mm22=hh+mm11/60;	
0001da  2200              MOVS     r2,#0
0001dc  4b83              LDR      r3,|L109.1004|
0001de  4982              LDR      r1,|L109.1000|
0001e0  c903              LDM      r1,{r0,r1}
0001e2  f7fffffe          BL       __aeabi_ddiv
0001e6  4604              MOV      r4,r0
0001e8  460d              MOV      r5,r1
0001ea  487d              LDR      r0,|L109.992|
0001ec  6800              LDR      r0,[r0,#0]  ; hh
0001ee  f7fffffe          BL       __aeabi_i2d
0001f2  4606              MOV      r6,r0
0001f4  4622              MOV      r2,r4
0001f6  462b              MOV      r3,r5
0001f8  f7fffffe          BL       __aeabi_dadd
0001fc  4a7c              LDR      r2,|L109.1008|
0001fe  c203              STM      r2!,{r0,r1}
;;;1192   		memset(lati,0,15);
000200  210f              MOVS     r1,#0xf
000202  4870              LDR      r0,|L109.964|
000204  f7fffffe          BL       __aeabi_memclr
;;;1193   		sprintf(lati,"%f",mm22);
000208  4879              LDR      r0,|L109.1008|
00020a  497a              LDR      r1,|L109.1012|
00020c  c80c              LDM      r0!,{r2,r3}
00020e  486d              LDR      r0,|L109.964|
000210  f7fffffe          BL       __2sprintf
;;;1194   		c=stof(longi);//7523.7412
000214  486d              LDR      r0,|L109.972|
000216  f7fffffe          BL       stof
00021a  4604              MOV      r4,r0
00021c  f7fffffe          BL       __aeabi_f2d
000220  4a6d              LDR      r2,|L109.984|
000222  c203              STM      r2!,{r0,r1}
;;;1195   		hh= c/100; //75
000224  2200              MOVS     r2,#0
000226  4b6d              LDR      r3,|L109.988|
000228  496b              LDR      r1,|L109.984|
00022a  c903              LDM      r1,{r0,r1}
00022c  f7fffffe          BL       __aeabi_ddiv
000230  4604              MOV      r4,r0
000232  f7fffffe          BL       __aeabi_d2iz
000236  496a              LDR      r1,|L109.992|
000238  6008              STR      r0,[r1,#0]  ; hh
;;;1196   		hh11 = c/100; //75.237412
00023a  2200              MOVS     r2,#0
00023c  4b67              LDR      r3,|L109.988|
00023e  4966              LDR      r1,|L109.984|
000240  c903              LDM      r1,{r0,r1}
000242  f7fffffe          BL       __aeabi_ddiv
000246  4a67              LDR      r2,|L109.996|
000248  c203              STM      r2!,{r0,r1}
;;;1197   		mm11 = hh11-hh; //.237412
00024a  4865              LDR      r0,|L109.992|
00024c  6800              LDR      r0,[r0,#0]  ; hh
00024e  f7fffffe          BL       __aeabi_i2d
000252  4604              MOV      r4,r0
000254  4863              LDR      r0,|L109.996|
000256  c80c              LDM      r0!,{r2,r3}
000258  4620              MOV      r0,r4
00025a  f7fffffe          BL       __aeabi_drsub
00025e  4a62              LDR      r2,|L109.1000|
000260  c203              STM      r2!,{r0,r1}
;;;1198   		mm11*=100;
000262  2200              MOVS     r2,#0
000264  4b5d              LDR      r3,|L109.988|
000266  4960              LDR      r1,|L109.1000|
000268  c903              LDM      r1,{r0,r1}
00026a  f7fffffe          BL       __aeabi_dmul
00026e  4a5e              LDR      r2,|L109.1000|
000270  c203              STM      r2!,{r0,r1}
;;;1199   		mm22=hh+mm11/60;	
000272  2200              MOVS     r2,#0
000274  4b5d              LDR      r3,|L109.1004|
000276  495c              LDR      r1,|L109.1000|
000278  c903              LDM      r1,{r0,r1}
00027a  f7fffffe          BL       __aeabi_ddiv
00027e  4604              MOV      r4,r0
000280  460d              MOV      r5,r1
000282  4857              LDR      r0,|L109.992|
000284  6800              LDR      r0,[r0,#0]  ; hh
000286  f7fffffe          BL       __aeabi_i2d
00028a  4606              MOV      r6,r0
00028c  4622              MOV      r2,r4
00028e  462b              MOV      r3,r5
000290  f7fffffe          BL       __aeabi_dadd
000294  4a56              LDR      r2,|L109.1008|
000296  c203              STM      r2!,{r0,r1}
;;;1200   		memset(longi,0,15);
000298  210f              MOVS     r1,#0xf
00029a  484c              LDR      r0,|L109.972|
00029c  f7fffffe          BL       __aeabi_memclr
;;;1201   		sprintf(longi,"%f",mm22);	
0002a0  4853              LDR      r0,|L109.1008|
0002a2  4954              LDR      r1,|L109.1012|
0002a4  c80c              LDM      r0!,{r2,r3}
0002a6  4849              LDR      r0,|L109.972|
0002a8  f7fffffe          BL       __2sprintf
;;;1202   		strcat(data,imei);
0002ac  4932              LDR      r1,|L109.888|
0002ae  4852              LDR      r0,|L109.1016|
0002b0  f7fffffe          BL       strcat
;;;1203   		strcat(data,",");	
0002b4  4951              LDR      r1,|L109.1020|
0002b6  4850              LDR      r0,|L109.1016|
0002b8  f7fffffe          BL       strcat
;;;1204   		strcat(data,"$GxGGA");	
0002bc  4950              LDR      r1,|L109.1024|
0002be  484e              LDR      r0,|L109.1016|
0002c0  f7fffffe          BL       strcat
;;;1205   		strcat(data,gga);
0002c4  494f              LDR      r1,|L109.1028|
0002c6  484c              LDR      r0,|L109.1016|
0002c8  f7fffffe          BL       strcat
;;;1206   		strcat(data,",$GxRMC");	
0002cc  494e              LDR      r1,|L109.1032|
0002ce  484a              LDR      r0,|L109.1016|
0002d0  f7fffffe          BL       strcat
;;;1207   		strcat(data,rmc);	
0002d4  493c              LDR      r1,|L109.968|
0002d6  4848              LDR      r0,|L109.1016|
0002d8  f7fffffe          BL       strcat
;;;1208   		strcat(data,",");	
0002dc  4947              LDR      r1,|L109.1020|
0002de  4846              LDR      r0,|L109.1016|
0002e0  f7fffffe          BL       strcat
;;;1209   		strcat(data,num2);	
0002e4  492f              LDR      r1,|L109.932|
0002e6  4844              LDR      r0,|L109.1016|
0002e8  f7fffffe          BL       strcat
;;;1210   		strcat(data,",F=");
0002ec  4947              LDR      r1,|L109.1036|
0002ee  4842              LDR      r0,|L109.1016|
0002f0  f7fffffe          BL       strcat
;;;1211   	adc_read(9);							
0002f4  2009              MOVS     r0,#9
0002f6  f7fffffe          BL       adc_read
;;;1212   	memset(fuelstr,0,5);
0002fa  2105              MOVS     r1,#5
0002fc  4844              LDR      r0,|L109.1040|
0002fe  f7fffffe          BL       __aeabi_memclr4
;;;1213   	sprintf(fuelstr,"%d,",fuel);
000302  4844              LDR      r0,|L109.1044|
000304  4944              LDR      r1,|L109.1048|
000306  6802              LDR      r2,[r0,#0]  ; fuel
000308  4841              LDR      r0,|L109.1040|
00030a  f7fffffe          BL       __2sprintf
;;;1214   		strcat(data,fuelstr);		
00030e  4940              LDR      r1,|L109.1040|
000310  4839              LDR      r0,|L109.1016|
000312  f7fffffe          BL       strcat
;;;1215   		strcat(data,",AC=");	
000316  4941              LDR      r1,|L109.1052|
000318  4837              LDR      r0,|L109.1016|
00031a  f7fffffe          BL       strcat
;;;1216   		strcat(data,acstr);
00031e  4926              LDR      r1,|L109.952|
000320  4835              LDR      r0,|L109.1016|
000322  f7fffffe          BL       strcat
;;;1217   		strcat(data,",I=");	
000326  493e              LDR      r1,|L109.1056|
000328  4833              LDR      r0,|L109.1016|
00032a  f7fffffe          BL       strcat
;;;1218   		strcat(data,ignstr);
00032e  491f              LDR      r1,|L109.940|
000330  4831              LDR      r0,|L109.1016|
000332  f7fffffe          BL       strcat
;;;1219   		strcat(data,",");	
000336  4931              LDR      r1,|L109.1020|
000338  482f              LDR      r0,|L109.1016|
00033a  f7fffffe          BL       strcat
;;;1220   	memset(fuelstr,0,5);
00033e  2105              MOVS     r1,#5
000340  4833              LDR      r0,|L109.1040|
000342  f7fffffe          BL       __aeabi_memclr4
;;;1221   	sprintf(fuelstr,"%d,",rtcticks2);
000346  4837              LDR      r0,|L109.1060|
000348  4933              LDR      r1,|L109.1048|
00034a  6802              LDR      r2,[r0,#0]  ; rtcticks2
00034c  4830              LDR      r0,|L109.1040|
00034e  f7fffffe          BL       __2sprintf
;;;1222   		strcat(data,fuelstr);	
000352  492f              LDR      r1,|L109.1040|
000354  4828              LDR      r0,|L109.1016|
000356  f7fffffe          BL       strcat
;;;1223   		
;;;1224   		
;;;1225   //		strcat(data,sprintf(rtcticks2);
;;;1226   		if( !(GPIOC_PDIR & 0x00000001)){
00035a  4815              LDR      r0,|L109.944|
00035c  3040              ADDS     r0,r0,#0x40
00035e  6900              LDR      r0,[r0,#0x10]
000360  07c0              LSLS     r0,r0,#31
000362  0fc0              LSRS     r0,r0,#31
000364  2800              CMP      r0,#0
000366  d003              BEQ      |L109.880|
;;;1227   		}
;;;1228   		else{strcat(data,",BR*");}
000368  492f              LDR      r1,|L109.1064|
00036a  4823              LDR      r0,|L109.1016|
00036c  f7fffffe          BL       strcat
                  |L109.880|
;;;1229   //return 0;
;;;1230   }
000370  bdfe              POP      {r1-r7,pc}
;;;1231   
                          ENDP

000372  0000              DCW      0x0000
                  |L109.884|
                          DCD      imeiinc
                  |L109.888|
                          DCD      imei
                  |L109.892|
                          DCD      ||.conststring||+0xe0
                  |L109.896|
                          DCD      ||.conststring||+0x18
                  |L109.900|
                          DCD      ||.conststring||+0x2c
                  |L109.904|
                          DCD      ||.conststring||+0xf0
                  |L109.908|
                          DCD      i
                  |L109.912|
                          DCD      uart_string_gsm
                  |L109.916|
                          DCD      time52
                  |L109.920|
                          DCD      tmeout
                  |L109.924|
                          DCD      ||.conststring||+0x10
                  |L109.928|
                          DCD      ||.conststring||+0x100
                  |L109.932|
                          DCD      num2
                  |L109.936|
                          DCD      voltagecbc
                  |L109.940|
                          DCD      ignstr
                  |L109.944|
                          DCD      0x400ff040
                  |L109.948|
                          DCD      ||.conststring||+0x110
                  |L109.952|
                          DCD      acstr
                  |L109.956|
                          DCD      int_erval
                  |L109.960|
                          DCD      lpticks
                  |L109.964|
                          DCD      lati
                  |L109.968|
                          DCD      ||rmc||
                  |L109.972|
                          DCD      longi
                  |L109.976|
                          DCD      velocity
                  |L109.980|
                          DCD      speed
                  |L109.984|
                          DCD      c
                  |L109.988|
                          DCD      0x40590000
                  |L109.992|
                          DCD      ||hh||
                  |L109.996|
                          DCD      hh11
                  |L109.1000|
                          DCD      mm11
                  |L109.1004|
                          DCD      0x404e0000
                  |L109.1008|
                          DCD      mm22
                  |L109.1012|
                          DCD      ||.conststring||+0x114
                  |L109.1016|
                          DCD      data
                  |L109.1020|
                          DCD      ||.conststring||+0x118
                  |L109.1024|
                          DCD      ||.conststring||+0x11c
                  |L109.1028|
                          DCD      gga
                  |L109.1032|
                          DCD      ||.conststring||+0x124
                  |L109.1036|
                          DCD      ||.conststring||+0x12c
                  |L109.1040|
                          DCD      fuelstr
                  |L109.1044|
                          DCD      fuel
                  |L109.1048|
                          DCD      ||.conststring||+0x130
                  |L109.1052|
                          DCD      ||.conststring||+0x134
                  |L109.1056|
                          DCD      ||.conststring||+0x13c
                  |L109.1060|
                          DCD      rtcticks2
                  |L109.1064|
                          DCD      ||.conststring||+0x140

                          AREA ||i.save_interval||, COMGROUP=save_interval, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_interval PROC
;;;1194   
;;;1195   __inline void save_interval()
000000  b538              PUSH     {r3-r5,lr}
;;;1196   {
;;;1197   	
;;;1198   send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L116.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L116.208|
000008  4a32              LDR      r2,|L116.212|
00000a  4933              LDR      r1,|L116.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L116.220|
000010  f7fffffe          BL       send_GSM
;;;1199   
;;;1200   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L116.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1201   	sprintf(at_,"\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",strlen(interval)+11);	
00001c  4831              LDR      r0,|L116.228|
00001e  f7fffffe          BL       strlen
000022  4604              MOV      r4,r0
000024  340b              ADDS     r4,r4,#0xb
000026  4622              MOV      r2,r4
000028  492f              LDR      r1,|L116.232|
00002a  482d              LDR      r0,|L116.224|
00002c  f7fffffe          BL       __2sprintf
;;;1202   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000030  200a              MOVS     r0,#0xa
000032  4b27              LDR      r3,|L116.208|
000034  4a27              LDR      r2,|L116.212|
000036  492d              LDR      r1,|L116.236|
000038  9000              STR      r0,[sp,#0]
00003a  4829              LDR      r0,|L116.224|
00003c  f7fffffe          BL       send_GSM
;;;1203   	//clear();
;;;1204   
;;;1205   	
;;;1206   	send_modem("|INTERVAL|");
000040  482b              LDR      r0,|L116.240|
000042  f7fffffe          BL       send_modem
;;;1207   		for(k=0;k<strlen(interval);k++)
000046  2000              MOVS     r0,#0
000048  492a              LDR      r1,|L116.244|
00004a  6008              STR      r0,[r1,#0]  ; k
00004c  e00b              B        |L116.102|
                  |L116.78|
;;;1208   		{
;;;1209   			uart_putchar(UART1_BASE_PTR, interval[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004e  4825              LDR      r0,|L116.228|
000050  4a28              LDR      r2,|L116.244|
000052  6812              LDR      r2,[r2,#0]  ; k
000054  5c81              LDRB     r1,[r0,r2]
000056  4828              LDR      r0,|L116.248|
000058  f7fffffe          BL       uart_putchar
00005c  4825              LDR      r0,|L116.244|
00005e  6800              LDR      r0,[r0,#0]            ;1207  ; k
000060  1c40              ADDS     r0,r0,#1              ;1207
000062  4924              LDR      r1,|L116.244|
000064  6008              STR      r0,[r1,#0]            ;1207  ; k
                  |L116.102|
000066  481f              LDR      r0,|L116.228|
000068  f7fffffe          BL       strlen
00006c  4921              LDR      r1,|L116.244|
00006e  6809              LDR      r1,[r1,#0]            ;1207  ; k
000070  4288              CMP      r0,r1                 ;1207
000072  d8ec              BHI      |L116.78|
;;;1210   		}	
;;;1211   			send_modem("|");			
000074  4821              LDR      r0,|L116.252|
000076  f7fffffe          BL       send_modem
;;;1212    
;;;1213   									k2=0;									//string array counter for uart 1
00007a  2000              MOVS     r0,#0
00007c  4920              LDR      r1,|L116.256|
00007e  6008              STR      r0,[r1,#0]  ; k2
;;;1214   									time=19999;						//timer counts to wait for characters in uart 1 									
000080  4820              LDR      r0,|L116.260|
000082  4921              LDR      r1,|L116.264|
000084  6008              STR      r0,[r1,#0]  ; time
;;;1215   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000086  e010              B        |L116.170|
                  |L116.136|
;;;1216   									{
;;;1217   									time--;
000088  481f              LDR      r0,|L116.264|
00008a  6800              LDR      r0,[r0,#0]  ; time
00008c  1e40              SUBS     r0,r0,#1
00008e  491e              LDR      r1,|L116.264|
000090  6008              STR      r0,[r1,#0]  ; time
;;;1218   									if(time % 2000 == 0)
000092  217d              MOVS     r1,#0x7d
000094  0109              LSLS     r1,r1,#4
000096  481c              LDR      r0,|L116.264|
000098  6800              LDR      r0,[r0,#0]  ; time
00009a  f7fffffe          BL       __aeabi_idivmod
00009e  2900              CMP      r1,#0
0000a0  d103              BNE      |L116.170|
;;;1219   										{
;;;1220   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1221   											uart_putchar(UART1_BASE_PTR,'\n');
0000a2  210a              MOVS     r1,#0xa
0000a4  4814              LDR      r0,|L116.248|
0000a6  f7fffffe          BL       uart_putchar
                  |L116.170|
0000aa  4918              LDR      r1,|L116.268|
0000ac  4818              LDR      r0,|L116.272|
0000ae  f7fffffe          BL       strstr
0000b2  2800              CMP      r0,#0                 ;1215
0000b4  d109              BNE      |L116.202|
0000b6  4814              LDR      r0,|L116.264|
0000b8  6800              LDR      r0,[r0,#0]            ;1215  ; time
0000ba  2801              CMP      r0,#1                 ;1215
0000bc  db05              BLT      |L116.202|
0000be  4915              LDR      r1,|L116.276|
0000c0  4813              LDR      r0,|L116.272|
0000c2  f7fffffe          BL       strstr
0000c6  2800              CMP      r0,#0                 ;1215
0000c8  d0de              BEQ      |L116.136|
                  |L116.202|
;;;1222   										}
;;;1223   	
;;;1224   									}
;;;1225   
;;;1226   
;;;1227   	
;;;1228   }	
0000ca  bd38              POP      {r3-r5,pc}
;;;1229   	
                          ENDP

                  |L116.204|
                          DCD      tmeout
                  |L116.208|
                          DCD      ||.conststring||+0x10
                  |L116.212|
                          DCD      ||.conststring||+0x18
                  |L116.216|
                          DCD      ||.conststring||+0x2c
                  |L116.220|
                          DCD      ||.conststring||+0x148
                  |L116.224|
                          DCD      at_
                  |L116.228|
                          DCD      interval
                  |L116.232|
                          DCD      ||.conststring||+0x168
                  |L116.236|
                          DCD      ||.conststring||+0x20
                  |L116.240|
                          DCD      ||.conststring||+0x190
                  |L116.244|
                          DCD      k
                  |L116.248|
                          DCD      0x4006b000
                  |L116.252|
                          DCD      ||.conststring||+0xdc
                  |L116.256|
                          DCD      ||k2||
                  |L116.260|
                          DCD      0x00004e1f
                  |L116.264|
                          DCD      time
                  |L116.268|
                          DCD      ||.conststring||+0x70
                  |L116.272|
                          DCD      uart_string_gsm
                  |L116.276|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.saveapn||, COMGROUP=saveapn, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  saveapn PROC
;;;1147   
;;;1148   __inline void saveapn(){
000000  b538              PUSH     {r3-r5,lr}
;;;1149   	
;;;1150   send_GSM("\nAT+FSCREATE=C:\\APN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L123.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L123.208|
000008  4a32              LDR      r2,|L123.212|
00000a  4933              LDR      r1,|L123.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L123.220|
000010  f7fffffe          BL       send_GSM
;;;1151   
;;;1152   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L123.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1153   	sprintf(at_,"\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",strlen(apn)+3);	
00001c  4831              LDR      r0,|L123.228|
00001e  f7fffffe          BL       strlen
000022  1cc4              ADDS     r4,r0,#3
000024  4622              MOV      r2,r4
000026  4930              LDR      r1,|L123.232|
000028  482d              LDR      r0,|L123.224|
00002a  f7fffffe          BL       __2sprintf
;;;1154   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
00002e  200a              MOVS     r0,#0xa
000030  4b27              LDR      r3,|L123.208|
000032  4a28              LDR      r2,|L123.212|
000034  492d              LDR      r1,|L123.236|
000036  9000              STR      r0,[sp,#0]
000038  4829              LDR      r0,|L123.224|
00003a  f7fffffe          BL       send_GSM
;;;1155   	//clear();
;;;1156   
;;;1157   	
;;;1158   	send_modem("|");
00003e  482c              LDR      r0,|L123.240|
000040  f7fffffe          BL       send_modem
;;;1159   		for(k=0;k<strlen(apn);k++)
000044  2000              MOVS     r0,#0
000046  492b              LDR      r1,|L123.244|
000048  6008              STR      r0,[r1,#0]  ; k
00004a  e00b              B        |L123.100|
                  |L123.76|
;;;1160   		{
;;;1161   			uart_putchar(UART1_BASE_PTR, apn[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004c  4825              LDR      r0,|L123.228|
00004e  4a29              LDR      r2,|L123.244|
000050  6812              LDR      r2,[r2,#0]  ; k
000052  5c81              LDRB     r1,[r0,r2]
000054  4828              LDR      r0,|L123.248|
000056  f7fffffe          BL       uart_putchar
00005a  4826              LDR      r0,|L123.244|
00005c  6800              LDR      r0,[r0,#0]            ;1159  ; k
00005e  1c40              ADDS     r0,r0,#1              ;1159
000060  4924              LDR      r1,|L123.244|
000062  6008              STR      r0,[r1,#0]            ;1159  ; k
                  |L123.100|
000064  481f              LDR      r0,|L123.228|
000066  f7fffffe          BL       strlen
00006a  4922              LDR      r1,|L123.244|
00006c  6809              LDR      r1,[r1,#0]            ;1159  ; k
00006e  4288              CMP      r0,r1                 ;1159
000070  d8ec              BHI      |L123.76|
;;;1162   		}	
;;;1163   			send_modem("|");			
000072  481f              LDR      r0,|L123.240|
000074  f7fffffe          BL       send_modem
;;;1164    
;;;1165   									k2=0;									//string array counter for uart 1
000078  2000              MOVS     r0,#0
00007a  4920              LDR      r1,|L123.252|
00007c  6008              STR      r0,[r1,#0]  ; k2
;;;1166   									time=19999;						//timer counts to wait for characters in uart 1 									
00007e  4820              LDR      r0,|L123.256|
000080  4920              LDR      r1,|L123.260|
000082  6008              STR      r0,[r1,#0]  ; time
;;;1167   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000084  e010              B        |L123.168|
                  |L123.134|
;;;1168   									{
;;;1169   									time--;
000086  481f              LDR      r0,|L123.260|
000088  6800              LDR      r0,[r0,#0]  ; time
00008a  1e40              SUBS     r0,r0,#1
00008c  491d              LDR      r1,|L123.260|
00008e  6008              STR      r0,[r1,#0]  ; time
;;;1170   									if(time % 2000 == 0)
000090  217d              MOVS     r1,#0x7d
000092  0109              LSLS     r1,r1,#4
000094  481b              LDR      r0,|L123.260|
000096  6800              LDR      r0,[r0,#0]  ; time
000098  f7fffffe          BL       __aeabi_idivmod
00009c  2900              CMP      r1,#0
00009e  d103              BNE      |L123.168|
;;;1171   										{
;;;1172   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1173   											uart_putchar(UART1_BASE_PTR,'\n');
0000a0  210a              MOVS     r1,#0xa
0000a2  4815              LDR      r0,|L123.248|
0000a4  f7fffffe          BL       uart_putchar
                  |L123.168|
0000a8  4917              LDR      r1,|L123.264|
0000aa  4818              LDR      r0,|L123.268|
0000ac  f7fffffe          BL       strstr
0000b0  2800              CMP      r0,#0                 ;1167
0000b2  d109              BNE      |L123.200|
0000b4  4813              LDR      r0,|L123.260|
0000b6  6800              LDR      r0,[r0,#0]            ;1167  ; time
0000b8  2801              CMP      r0,#1                 ;1167
0000ba  db05              BLT      |L123.200|
0000bc  4914              LDR      r1,|L123.272|
0000be  4813              LDR      r0,|L123.268|
0000c0  f7fffffe          BL       strstr
0000c4  2800              CMP      r0,#0                 ;1167
0000c6  d0de              BEQ      |L123.134|
                  |L123.200|
;;;1174   										}
;;;1175   	
;;;1176   									}
;;;1177   
;;;1178   
;;;1179   	
;;;1180   }
0000c8  bd38              POP      {r3-r5,pc}
;;;1181   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L123.204|
                          DCD      tmeout
                  |L123.208|
                          DCD      ||.conststring||+0x10
                  |L123.212|
                          DCD      ||.conststring||+0x18
                  |L123.216|
                          DCD      ||.conststring||+0x2c
                  |L123.220|
                          DCD      ||.conststring||+0x19c
                  |L123.224|
                          DCD      at_
                  |L123.228|
                          DCD      apn
                  |L123.232|
                          DCD      ||.conststring||+0x1b8
                  |L123.236|
                          DCD      ||.conststring||+0x20
                  |L123.240|
                          DCD      ||.conststring||+0xdc
                  |L123.244|
                          DCD      k
                  |L123.248|
                          DCD      0x4006b000
                  |L123.252|
                          DCD      ||k2||
                  |L123.256|
                          DCD      0x00004e1f
                  |L123.260|
                          DCD      time
                  |L123.264|
                          DCD      ||.conststring||+0x70
                  |L123.268|
                          DCD      uart_string_gsm
                  |L123.272|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.msg_sim800||, COMGROUP=msg_sim800, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  msg_sim800 PROC
;;;1368   
;;;1369   __inline void msg_sim800() 
000000  b51f              PUSH     {r0-r4,lr}
;;;1370   {
;;;1371   		cond1=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L130.1024|
000006  6008              STR      r0,[r1,#0]  ; cond1
;;;1372   		cond2=0;
000008  49fe              LDR      r1,|L130.1028|
00000a  6008              STR      r0,[r1,#0]  ; cond2
;;;1373   		cond3=0;
00000c  49fe              LDR      r1,|L130.1032|
00000e  6008              STR      r0,[r1,#0]  ; cond3
;;;1374   		cond4=0;
000010  49fe              LDR      r1,|L130.1036|
000012  6008              STR      r0,[r1,#0]  ; cond4
;;;1375   		cond5=0;
000014  49fe              LDR      r1,|L130.1040|
000016  6008              STR      r0,[r1,#0]  ; cond5
;;;1376   		cond6=0;
000018  49fe              LDR      r1,|L130.1044|
00001a  6008              STR      r0,[r1,#0]  ; cond6
;;;1377   		cond7=0;
00001c  49fe              LDR      r1,|L130.1048|
00001e  6008              STR      r0,[r1,#0]  ; cond7
;;;1378   		cond8=0;
000020  49fe              LDR      r1,|L130.1052|
000022  6008              STR      r0,[r1,#0]  ; cond8
;;;1379   		cond9=0;
000024  49fe              LDR      r1,|L130.1056|
000026  6008              STR      r0,[r1,#0]  ; cond9
;;;1380   		cond10=0;
000028  49fe              LDR      r1,|L130.1060|
00002a  6008              STR      r0,[r1,#0]  ; cond10
;;;1381   		cond11=0;
00002c  49fe              LDR      r1,|L130.1064|
00002e  6008              STR      r0,[r1,#0]  ; cond11
;;;1382   		cond12=0;
000030  49fe              LDR      r1,|L130.1068|
000032  6008              STR      r0,[r1,#0]  ; cond12
;;;1383   		cond13=0;
000034  49fe              LDR      r1,|L130.1072|
000036  6008              STR      r0,[r1,#0]  ; cond13
;;;1384   		cond14=0;
000038  49fe              LDR      r1,|L130.1076|
00003a  6008              STR      r0,[r1,#0]  ; cond14
;;;1385   		cond15=0;		
00003c  49fe              LDR      r1,|L130.1080|
00003e  6008              STR      r0,[r1,#0]  ; cond15
;;;1386   	
;;;1387   //ringflag=1;	
;;;1388   	if(ringflag==1 )
000040  48fe              LDR      r0,|L130.1084|
000042  7800              LDRB     r0,[r0,#0]  ; ringflag
000044  2801              CMP      r0,#1
000046  d17d              BNE      |L130.324|
;;;1389   	{
;;;1390   		sleep_flag=0;
000048  2000              MOVS     r0,#0
00004a  49fd              LDR      r1,|L130.1088|
00004c  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1391       DTR_OFF;		// not sleep	
00004e  2080              MOVS     r0,#0x80
000050  49fc              LDR      r1,|L130.1092|
000052  6088              STR      r0,[r1,#8]
;;;1392   
;;;1393   delay(1000);
000054  207d              MOVS     r0,#0x7d
000056  00c0              LSLS     r0,r0,#3
000058  f7fffffe          BL       delay
;;;1394   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
00005c  48fa              LDR      r0,|L130.1096|
00005e  6800              LDR      r0,[r0,#0]  ; tmeout
000060  4bfa              LDR      r3,|L130.1100|
000062  4afb              LDR      r2,|L130.1104|
000064  49fb              LDR      r1,|L130.1108|
000066  9000              STR      r0,[sp,#0]
000068  48fb              LDR      r0,|L130.1112|
00006a  f7fffffe          BL       send_GSM
;;;1395   		
;;;1396   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);  		
00006e  48f6              LDR      r0,|L130.1096|
000070  6800              LDR      r0,[r0,#0]  ; tmeout
000072  4bf6              LDR      r3,|L130.1100|
000074  4af6              LDR      r2,|L130.1104|
000076  49f7              LDR      r1,|L130.1108|
000078  9000              STR      r0,[sp,#0]
00007a  48f8              LDR      r0,|L130.1116|
00007c  f7fffffe          BL       send_GSM
;;;1397   delay(1000);		
000080  207d              MOVS     r0,#0x7d
000082  00c0              LSLS     r0,r0,#3
000084  f7fffffe          BL       delay
;;;1398   		
;;;1399   
;;;1400   	send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000088  48ef              LDR      r0,|L130.1096|
00008a  6800              LDR      r0,[r0,#0]  ; tmeout
00008c  4bef              LDR      r3,|L130.1100|
00008e  4af0              LDR      r2,|L130.1104|
000090  49f0              LDR      r1,|L130.1108|
000092  9000              STR      r0,[sp,#0]
000094  48f2              LDR      r0,|L130.1120|
000096  f7fffffe          BL       send_GSM
;;;1401   	send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
00009a  48eb              LDR      r0,|L130.1096|
00009c  6800              LDR      r0,[r0,#0]  ; tmeout
00009e  4beb              LDR      r3,|L130.1100|
0000a0  4aeb              LDR      r2,|L130.1104|
0000a2  49ec              LDR      r1,|L130.1108|
0000a4  9000              STR      r0,[sp,#0]
0000a6  48ef              LDR      r0,|L130.1124|
0000a8  f7fffffe          BL       send_GSM
;;;1402   
;;;1403   					send_GSM("\r\nAT+CMGR=1\r\n", "OK\r\n", "ERROR" , "OK\r\n",tmeout);	
0000ac  48e6              LDR      r0,|L130.1096|
0000ae  6800              LDR      r0,[r0,#0]  ; tmeout
0000b0  4be8              LDR      r3,|L130.1108|
0000b2  4aed              LDR      r2,|L130.1128|
0000b4  4619              MOV      r1,r3
0000b6  9000              STR      r0,[sp,#0]
0000b8  48ec              LDR      r0,|L130.1132|
0000ba  f7fffffe          BL       send_GSM
;;;1404   					clear();
0000be  f7fffffe          BL       clear
;;;1405   					memset(num2,0,30);
0000c2  211e              MOVS     r1,#0x1e
0000c4  48ea              LDR      r0,|L130.1136|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1406   					parse_gsm(uart_string_gsm, 3, 4, num2);
0000ca  4be9              LDR      r3,|L130.1136|
0000cc  2204              MOVS     r2,#4
0000ce  2103              MOVS     r1,#3
0000d0  48e8              LDR      r0,|L130.1140|
0000d2  f7fffffe          BL       parse_gsm
;;;1407   			
;;;1408   						cond1=strstr(uart_string_gsm, "OWNER");	
0000d6  49e8              LDR      r1,|L130.1144|
0000d8  48e6              LDR      r0,|L130.1140|
0000da  f7fffffe          BL       strstr
0000de  49c8              LDR      r1,|L130.1024|
0000e0  6008              STR      r0,[r1,#0]  ; cond1
;;;1409   						cond2=strstr(uart_string_gsm, "LOCATION");
0000e2  49e6              LDR      r1,|L130.1148|
0000e4  48e3              LDR      r0,|L130.1140|
0000e6  f7fffffe          BL       strstr
0000ea  49c6              LDR      r1,|L130.1028|
0000ec  6008              STR      r0,[r1,#0]  ; cond2
;;;1410   						cond3=strstr(uart_string_gsm, "INTERVAL_");
0000ee  49e4              LDR      r1,|L130.1152|
0000f0  48e0              LDR      r0,|L130.1140|
0000f2  f7fffffe          BL       strstr
0000f6  49c4              LDR      r1,|L130.1032|
0000f8  6008              STR      r0,[r1,#0]  ; cond3
;;;1411   						cond4=strstr(uart_string_gsm, "START");
0000fa  49e2              LDR      r1,|L130.1156|
0000fc  48dd              LDR      r0,|L130.1140|
0000fe  f7fffffe          BL       strstr
000102  49c2              LDR      r1,|L130.1036|
000104  6008              STR      r0,[r1,#0]  ; cond4
;;;1412   						cond5=strstr(uart_string_gsm, "OWNER1");
000106  49e0              LDR      r1,|L130.1160|
000108  48da              LDR      r0,|L130.1140|
00010a  f7fffffe          BL       strstr
00010e  49c0              LDR      r1,|L130.1040|
000110  6008              STR      r0,[r1,#0]  ; cond5
;;;1413   						cond6=strstr(uart_string_gsm, "OWNER2");
000112  49de              LDR      r1,|L130.1164|
000114  48d7              LDR      r0,|L130.1140|
000116  f7fffffe          BL       strstr
00011a  49be              LDR      r1,|L130.1044|
00011c  6008              STR      r0,[r1,#0]  ; cond6
;;;1414   						cond7=strstr(uart_string_gsm, "OWNER3");
00011e  49dc              LDR      r1,|L130.1168|
000120  48d4              LDR      r0,|L130.1140|
000122  f7fffffe          BL       strstr
000126  49bc              LDR      r1,|L130.1048|
000128  6008              STR      r0,[r1,#0]  ; cond7
;;;1415   						cond8=strstr(uart_string_gsm, "DEBUG");
00012a  49da              LDR      r1,|L130.1172|
00012c  48d1              LDR      r0,|L130.1140|
00012e  f7fffffe          BL       strstr
000132  49ba              LDR      r1,|L130.1052|
000134  6008              STR      r0,[r1,#0]  ; cond8
;;;1416   						cond9=strstr(uart_string_gsm, "RESET");
000136  49d8              LDR      r1,|L130.1176|
000138  48ce              LDR      r0,|L130.1140|
00013a  f7fffffe          BL       strstr
00013e  49b8              LDR      r1,|L130.1056|
000140  6008              STR      r0,[r1,#0]  ; cond9
;;;1417   						cond10=strstr(uart_string_gsm, "IP");
000142  e000              B        |L130.326|
                  |L130.324|
000144  e3d4              B        |L130.2288|
                  |L130.326|
000146  49d5              LDR      r1,|L130.1180|
000148  48ca              LDR      r0,|L130.1140|
00014a  f7fffffe          BL       strstr
00014e  49b5              LDR      r1,|L130.1060|
000150  6008              STR      r0,[r1,#0]  ; cond10
;;;1418   						cond11=strstr(uart_string_gsm, "SUOWNER");	
000152  49d3              LDR      r1,|L130.1184|
000154  48c7              LDR      r0,|L130.1140|
000156  f7fffffe          BL       strstr
00015a  49b3              LDR      r1,|L130.1064|
00015c  6008              STR      r0,[r1,#0]  ; cond11
;;;1419   						cond12=strstr(uart_string_gsm, "SOWNER");	
00015e  49d1              LDR      r1,|L130.1188|
000160  48c4              LDR      r0,|L130.1140|
000162  f7fffffe          BL       strstr
000166  49b1              LDR      r1,|L130.1068|
000168  6008              STR      r0,[r1,#0]  ; cond12
;;;1420   						cond13=strstr(uart_string_gsm, "IGNITION ON");	
00016a  49cf              LDR      r1,|L130.1192|
00016c  48c1              LDR      r0,|L130.1140|
00016e  f7fffffe          BL       strstr
000172  49af              LDR      r1,|L130.1072|
000174  6008              STR      r0,[r1,#0]  ; cond13
;;;1421   						cond14=strstr(uart_string_gsm, "IGNITION OFF");	
000176  49cd              LDR      r1,|L130.1196|
000178  48be              LDR      r0,|L130.1140|
00017a  f7fffffe          BL       strstr
00017e  49ad              LDR      r1,|L130.1076|
000180  6008              STR      r0,[r1,#0]  ; cond14
;;;1422   						cond15=strstr(uart_string_gsm, "IGNSTAT");
000182  49cb              LDR      r1,|L130.1200|
000184  48bb              LDR      r0,|L130.1140|
000186  f7fffffe          BL       strstr
00018a  49ab              LDR      r1,|L130.1080|
00018c  6008              STR      r0,[r1,#0]  ; cond15
;;;1423   
;;;1424   							if(send_SOS==1){
00018e  48c9              LDR      r0,|L130.1204|
000190  6800              LDR      r0,[r0,#0]  ; send_SOS
000192  2801              CMP      r0,#1
000194  d147              BNE      |L130.550|
;;;1425   										
;;;1426   
;;;1427   								
;;;1428   								memset(data2,0,300);
000196  21ff              MOVS     r1,#0xff
000198  312d              ADDS     r1,r1,#0x2d
00019a  48c7              LDR      r0,|L130.1208|
00019c  f7fffffe          BL       __aeabi_memclr
;;;1429   								sprintf(data2,"\nThere is an Emergency please help:\nCoordinates:%sN,%sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,lati,'%',longi);	
0001a0  48c6              LDR      r0,|L130.1212|
0001a2  2125              MOVS     r1,#0x25
0001a4  4ac6              LDR      r2,|L130.1216|
0001a6  4603              MOV      r3,r0
0001a8  9200              STR      r2,[sp,#0]
0001aa  9101              STR      r1,[sp,#4]
0001ac  9002              STR      r0,[sp,#8]
0001ae  49c5              LDR      r1,|L130.1220|
0001b0  48c1              LDR      r0,|L130.1208|
0001b2  f7fffffe          BL       __2sprintf
;;;1430   								memset(num2,0,30);
0001b6  211e              MOVS     r1,#0x1e
0001b8  48ad              LDR      r0,|L130.1136|
0001ba  f7fffffe          BL       __aeabi_memclr
;;;1431   								send_GSM("\r\nAT+CPBR=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001be  48a2              LDR      r0,|L130.1096|
0001c0  6800              LDR      r0,[r0,#0]  ; tmeout
0001c2  4ba2              LDR      r3,|L130.1100|
0001c4  4aa2              LDR      r2,|L130.1104|
0001c6  49a3              LDR      r1,|L130.1108|
0001c8  9000              STR      r0,[sp,#0]
0001ca  48bf              LDR      r0,|L130.1224|
0001cc  f7fffffe          BL       send_GSM
;;;1432   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
0001d0  48a7              LDR      r0,|L130.1136|
0001d2  2122              MOVS     r1,#0x22
0001d4  460b              MOV      r3,r1
0001d6  2202              MOVS     r2,#2
0001d8  9100              STR      r1,[sp,#0]
0001da  9001              STR      r0,[sp,#4]
0001dc  2101              MOVS     r1,#1
0001de  48a5              LDR      r0,|L130.1140|
0001e0  f7fffffe          BL       parse_g
;;;1433   								send_message(data2);
0001e4  48b4              LDR      r0,|L130.1208|
0001e6  f7fffffe          BL       send_message
;;;1434   								memset(num2,0,30);
0001ea  211e              MOVS     r1,#0x1e
0001ec  48a0              LDR      r0,|L130.1136|
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1435   								send_GSM("\r\nAT+CPBR=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001f2  4895              LDR      r0,|L130.1096|
0001f4  6800              LDR      r0,[r0,#0]  ; tmeout
0001f6  4b95              LDR      r3,|L130.1100|
0001f8  4a95              LDR      r2,|L130.1104|
0001fa  4996              LDR      r1,|L130.1108|
0001fc  9000              STR      r0,[sp,#0]
0001fe  48b3              LDR      r0,|L130.1228|
000200  f7fffffe          BL       send_GSM
;;;1436   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
000204  489a              LDR      r0,|L130.1136|
000206  2122              MOVS     r1,#0x22
000208  460b              MOV      r3,r1
00020a  2202              MOVS     r2,#2
00020c  9100              STR      r1,[sp,#0]
00020e  9001              STR      r0,[sp,#4]
000210  2101              MOVS     r1,#1
000212  4898              LDR      r0,|L130.1140|
000214  f7fffffe          BL       parse_g
;;;1437   								send_message(data2);								
000218  48a7              LDR      r0,|L130.1208|
00021a  f7fffffe          BL       send_message
;;;1438   								send_SOS=0;
00021e  2000              MOVS     r0,#0
000220  49a4              LDR      r1,|L130.1204|
000222  6008              STR      r0,[r1,#0]  ; send_SOS
                  |L130.548|
000224  e34a              B        |L130.2236|
                  |L130.550|
;;;1439   							}
;;;1440   							else if(cond1 && cond2)
000226  4876              LDR      r0,|L130.1024|
000228  6800              LDR      r0,[r0,#0]  ; cond1
00022a  2800              CMP      r0,#0
00022c  d022              BEQ      |L130.628|
00022e  4875              LDR      r0,|L130.1028|
000230  6800              LDR      r0,[r0,#0]  ; cond2
000232  2800              CMP      r0,#0
000234  d01e              BEQ      |L130.628|
;;;1441   							{
;;;1442   								memset(data2,0,300);
000236  21ff              MOVS     r1,#0xff
000238  312d              ADDS     r1,r1,#0x2d
00023a  489f              LDR      r0,|L130.1208|
00023c  f7fffffe          BL       __aeabi_memclr
;;;1443   								sprintf(data2,"\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);	
000240  489e              LDR      r0,|L130.1212|
000242  2125              MOVS     r1,#0x25
000244  4a9e              LDR      r2,|L130.1216|
000246  4ba2              LDR      r3,|L130.1232|
000248  9300              STR      r3,[sp,#0]
00024a  9201              STR      r2,[sp,#4]
00024c  9102              STR      r1,[sp,#8]
00024e  9003              STR      r0,[sp,#0xc]
000250  4603              MOV      r3,r0
000252  49a0              LDR      r1,|L130.1236|
000254  4898              LDR      r0,|L130.1208|
000256  f7fffffe          BL       __2sprintf
;;;1444   
;;;1445   								{send_message(data2);}
00025a  4897              LDR      r0,|L130.1208|
00025c  f7fffffe          BL       send_message
;;;1446   
;;;1447   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000260  4879              LDR      r0,|L130.1096|
000262  6800              LDR      r0,[r0,#0]  ; tmeout
000264  4b79              LDR      r3,|L130.1100|
000266  4a7a              LDR      r2,|L130.1104|
000268  497a              LDR      r1,|L130.1108|
00026a  9000              STR      r0,[sp,#0]
00026c  489a              LDR      r0,|L130.1240|
00026e  f7fffffe          BL       send_GSM
000272  e7d7              B        |L130.548|
                  |L130.628|
;;;1448   								
;;;1449   								
;;;1450   							}
;;;1451   	
;;;1452   							else if(cond1 && cond3)
000274  4862              LDR      r0,|L130.1024|
000276  6800              LDR      r0,[r0,#0]  ; cond1
000278  2800              CMP      r0,#0
00027a  d026              BEQ      |L130.714|
00027c  4862              LDR      r0,|L130.1032|
00027e  6800              LDR      r0,[r0,#0]  ; cond3
000280  2800              CMP      r0,#0
000282  d022              BEQ      |L130.714|
;;;1453   							{
;;;1454   								memset(at_,0,100);
000284  2164              MOVS     r1,#0x64
000286  4895              LDR      r0,|L130.1244|
000288  f7fffffe          BL       __aeabi_memclr
;;;1455   								memset(interval,0,5);
00028c  2105              MOVS     r1,#5
00028e  4894              LDR      r0,|L130.1248|
000290  f7fffffe          BL       __aeabi_memclr
;;;1456   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', interval);		
000294  4892              LDR      r0,|L130.1248|
000296  210d              MOVS     r1,#0xd
000298  2320              MOVS     r3,#0x20
00029a  2205              MOVS     r2,#5
00029c  9100              STR      r1,[sp,#0]
00029e  9001              STR      r0,[sp,#4]
0002a0  2103              MOVS     r1,#3
0002a2  4874              LDR      r0,|L130.1140|
0002a4  f7fffffe          BL       parse_g
;;;1457   								int_erval=myAtoi(interval);
0002a8  488d              LDR      r0,|L130.1248|
0002aa  f7fffffe          BL       myAtoi
0002ae  498d              LDR      r1,|L130.1252|
0002b0  6008              STR      r0,[r1,#0]  ; int_erval
;;;1458   								save_interval();			
0002b2  f7fffffe          BL       save_interval
;;;1459   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0002b6  4864              LDR      r0,|L130.1096|
0002b8  6800              LDR      r0,[r0,#0]  ; tmeout
0002ba  4b64              LDR      r3,|L130.1100|
0002bc  4a64              LDR      r2,|L130.1104|
0002be  4965              LDR      r1,|L130.1108|
0002c0  9000              STR      r0,[sp,#0]
0002c2  4885              LDR      r0,|L130.1240|
0002c4  f7fffffe          BL       send_GSM
0002c8  e7ac              B        |L130.548|
                  |L130.714|
;;;1460   
;;;1461   								
;;;1462   							}				
;;;1463   
;;;1464   						else if(cond8)
0002ca  4854              LDR      r0,|L130.1052|
0002cc  6800              LDR      r0,[r0,#0]  ; cond8
0002ce  2800              CMP      r0,#0
0002d0  d07d              BEQ      |L130.974|
;;;1465   							{
;;;1466   								
;;;1467   									memset(at_,0,100);
0002d2  2164              MOVS     r1,#0x64
0002d4  4881              LDR      r0,|L130.1244|
0002d6  f7fffffe          BL       __aeabi_memclr
;;;1468   									for(k=0;k<450;k++)
0002da  2000              MOVS     r0,#0
0002dc  4982              LDR      r1,|L130.1256|
0002de  6008              STR      r0,[r1,#0]  ; k
0002e0  e04e              B        |L130.896|
                  |L130.738|
;;;1469   									{
;;;1470   										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
0002e2  4881              LDR      r0,|L130.1256|
0002e4  6800              LDR      r0,[r0,#0]  ; k
0002e6  1e40              SUBS     r0,r0,#1
0002e8  4962              LDR      r1,|L130.1140|
0002ea  5c08              LDRB     r0,[r1,r0]
0002ec  2820              CMP      r0,#0x20
0002ee  d142              BNE      |L130.886|
0002f0  487d              LDR      r0,|L130.1256|
0002f2  6800              LDR      r0,[r0,#0]  ; k
0002f4  1e80              SUBS     r0,r0,#2
0002f6  5c08              LDRB     r0,[r1,r0]
0002f8  2847              CMP      r0,#0x47
0002fa  d13c              BNE      |L130.886|
0002fc  487a              LDR      r0,|L130.1256|
0002fe  6800              LDR      r0,[r0,#0]  ; k
000300  1ec0              SUBS     r0,r0,#3
000302  5c08              LDRB     r0,[r1,r0]
000304  2855              CMP      r0,#0x55
000306  d136              BNE      |L130.886|
;;;1471   										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
000308  4877              LDR      r0,|L130.1256|
00030a  6800              LDR      r0,[r0,#0]  ; k
00030c  1f00              SUBS     r0,r0,#4
00030e  5c08              LDRB     r0,[r1,r0]
000310  2842              CMP      r0,#0x42
000312  d130              BNE      |L130.886|
000314  4874              LDR      r0,|L130.1256|
000316  6800              LDR      r0,[r0,#0]  ; k
000318  1f40              SUBS     r0,r0,#5
00031a  5c08              LDRB     r0,[r1,r0]
00031c  2845              CMP      r0,#0x45
00031e  d12a              BNE      |L130.886|
000320  4871              LDR      r0,|L130.1256|
000322  6800              LDR      r0,[r0,#0]  ; k
000324  1f80              SUBS     r0,r0,#6
000326  5c08              LDRB     r0,[r1,r0]
000328  2844              CMP      r0,#0x44
00032a  d124              BNE      |L130.886|
;;;1472   										{
;;;1473   											for(i=0;i<100;i++)
00032c  2000              MOVS     r0,#0
00032e  496f              LDR      r1,|L130.1260|
000330  6008              STR      r0,[r1,#0]  ; i
000332  e011              B        |L130.856|
                  |L130.820|
;;;1474   											{
;;;1475   												at_[i]=uart_string_gsm[k];
000334  484f              LDR      r0,|L130.1140|
000336  496c              LDR      r1,|L130.1256|
000338  6809              LDR      r1,[r1,#0]  ; k
00033a  5c40              LDRB     r0,[r0,r1]
00033c  4967              LDR      r1,|L130.1244|
00033e  4a6b              LDR      r2,|L130.1260|
000340  6812              LDR      r2,[r2,#0]  ; i
000342  5488              STRB     r0,[r1,r2]
;;;1476   												k++;
000344  4868              LDR      r0,|L130.1256|
000346  6800              LDR      r0,[r0,#0]  ; k
000348  1c40              ADDS     r0,r0,#1
00034a  4967              LDR      r1,|L130.1256|
00034c  6008              STR      r0,[r1,#0]  ; k
00034e  4867              LDR      r0,|L130.1260|
000350  6800              LDR      r0,[r0,#0]            ;1473  ; i
000352  1c40              ADDS     r0,r0,#1              ;1473
000354  4965              LDR      r1,|L130.1260|
000356  6008              STR      r0,[r1,#0]            ;1473  ; i
                  |L130.856|
000358  4864              LDR      r0,|L130.1260|
00035a  6800              LDR      r0,[r0,#0]            ;1473  ; i
00035c  2864              CMP      r0,#0x64              ;1473
00035e  dbe9              BLT      |L130.820|
;;;1477   											}	
;;;1478   										at_[i+1]='\r';
000360  210d              MOVS     r1,#0xd
000362  4a5e              LDR      r2,|L130.1244|
000364  4861              LDR      r0,|L130.1260|
000366  6800              LDR      r0,[r0,#0]  ; i
000368  1c40              ADDS     r0,r0,#1
00036a  5411              STRB     r1,[r2,r0]
;;;1479   										at_[i+2]='\n';	
00036c  210a              MOVS     r1,#0xa
00036e  485f              LDR      r0,|L130.1260|
000370  6800              LDR      r0,[r0,#0]  ; i
000372  1c80              ADDS     r0,r0,#2
000374  5411              STRB     r1,[r2,r0]
                  |L130.886|
000376  485c              LDR      r0,|L130.1256|
000378  6800              LDR      r0,[r0,#0]            ;1468  ; k
00037a  1c40              ADDS     r0,r0,#1              ;1468
00037c  495a              LDR      r1,|L130.1256|
00037e  6008              STR      r0,[r1,#0]            ;1468  ; k
                  |L130.896|
000380  4859              LDR      r0,|L130.1256|
000382  6800              LDR      r0,[r0,#0]            ;1468  ; k
000384  21ff              MOVS     r1,#0xff              ;1468
000386  31c3              ADDS     r1,r1,#0xc3           ;1468
000388  4288              CMP      r0,r1                 ;1468
00038a  dbaa              BLT      |L130.738|
;;;1480   										}
;;;1481   										else{}
;;;1482   									}
;;;1483   									
;;;1484   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
00038c  482e              LDR      r0,|L130.1096|
00038e  6800              LDR      r0,[r0,#0]  ; tmeout
000390  4b2e              LDR      r3,|L130.1100|
000392  4a2f              LDR      r2,|L130.1104|
000394  492f              LDR      r1,|L130.1108|
000396  9000              STR      r0,[sp,#0]
000398  484f              LDR      r0,|L130.1240|
00039a  f7fffffe          BL       send_GSM
;;;1485   									  send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);		
00039e  482a              LDR      r0,|L130.1096|
0003a0  6800              LDR      r0,[r0,#0]  ; tmeout
0003a2  4b2a              LDR      r3,|L130.1100|
0003a4  4a2a              LDR      r2,|L130.1104|
0003a6  492b              LDR      r1,|L130.1108|
0003a8  9000              STR      r0,[sp,#0]
0003aa  484c              LDR      r0,|L130.1244|
0003ac  f7fffffe          BL       send_GSM
;;;1486   										memset(data2,0,strlen(data2));
0003b0  4841              LDR      r0,|L130.1208|
0003b2  f7fffffe          BL       strlen
0003b6  4604              MOV      r4,r0
0003b8  4621              MOV      r1,r4
0003ba  483f              LDR      r0,|L130.1208|
0003bc  f7fffffe          BL       __aeabi_memclr
;;;1487   										sprintf(data2,"%s",uart_string_gsm);	
0003c0  4a2c              LDR      r2,|L130.1140|
0003c2  494b              LDR      r1,|L130.1264|
0003c4  483c              LDR      r0,|L130.1208|
0003c6  f7fffffe          BL       __2sprintf
;;;1488   										send_message(data2);
0003ca  483b              LDR      r0,|L130.1208|
0003cc  e000              B        |L130.976|
                  |L130.974|
0003ce  e002              B        |L130.982|
                  |L130.976|
0003d0  f7fffffe          BL       send_message
0003d4  e726              B        |L130.548|
                  |L130.982|
;;;1489   										
;;;1490   									
;;;1491   								
;;;1492   							}
;;;1493   										
;;;1494   							else if(cond12 && cond4)
0003d6  4815              LDR      r0,|L130.1068|
0003d8  6800              LDR      r0,[r0,#0]  ; cond12
0003da  2800              CMP      r0,#0
0003dc  d00e              BEQ      |L130.1020|
0003de  480b              LDR      r0,|L130.1036|
0003e0  6800              LDR      r0,[r0,#0]  ; cond4
0003e2  2800              CMP      r0,#0
0003e4  d00a              BEQ      |L130.1020|
;;;1495   							{
;;;1496   								memset( apn,0,25);
0003e6  2119              MOVS     r1,#0x19
0003e8  4842              LDR      r0,|L130.1268|
0003ea  f7fffffe          BL       __aeabi_memclr
;;;1497   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', apn);			
0003ee  4841              LDR      r0,|L130.1268|
0003f0  210d              MOVS     r1,#0xd
0003f2  2320              MOVS     r3,#0x20
0003f4  2205              MOVS     r2,#5
0003f6  9100              STR      r1,[sp,#0]
0003f8  9001              STR      r0,[sp,#4]
0003fa  e07d              B        |L130.1272|
                  |L130.1020|
0003fc  e0e8              B        |L130.1488|
0003fe  0000              DCW      0x0000
                  |L130.1024|
                          DCD      cond1
                  |L130.1028|
                          DCD      cond2
                  |L130.1032|
                          DCD      cond3
                  |L130.1036|
                          DCD      cond4
                  |L130.1040|
                          DCD      cond5
                  |L130.1044|
                          DCD      cond6
                  |L130.1048|
                          DCD      cond7
                  |L130.1052|
                          DCD      cond8
                  |L130.1056|
                          DCD      cond9
                  |L130.1060|
                          DCD      cond10
                  |L130.1064|
                          DCD      cond11
                  |L130.1068|
                          DCD      cond12
                  |L130.1072|
                          DCD      cond13
                  |L130.1076|
                          DCD      cond14
                  |L130.1080|
                          DCD      cond15
                  |L130.1084|
                          DCD      ringflag
                  |L130.1088|
                          DCD      sleep_flag
                  |L130.1092|
                          DCD      0x400ff0c0
                  |L130.1096|
                          DCD      tmeout
                  |L130.1100|
                          DCD      ||.conststring||+0x10
                  |L130.1104|
                          DCD      ||.conststring||+0x18
                  |L130.1108|
                          DCD      ||.conststring||+0x70
                  |L130.1112|
                          DCD      ||.conststring||+0x1dc
                  |L130.1116|
                          DCD      ||.conststring||+0x1e4
                  |L130.1120|
                          DCD      ||.conststring||+0x1f0
                  |L130.1124|
                          DCD      ||.conststring||+0x200
                  |L130.1128|
                          DCD      ||.conststring||+0xe0
                  |L130.1132|
                          DCD      ||.conststring||+0x210
                  |L130.1136|
                          DCD      num2
                  |L130.1140|
                          DCD      uart_string_gsm
                  |L130.1144|
                          DCD      ||.conststring||+0x220
                  |L130.1148|
                          DCD      ||.conststring||+0x228
                  |L130.1152|
                          DCD      ||.conststring||+0x234
                  |L130.1156|
                          DCD      ||.conststring||+0x240
                  |L130.1160|
                          DCD      ||.conststring||+0x248
                  |L130.1164|
                          DCD      ||.conststring||+0x250
                  |L130.1168|
                          DCD      ||.conststring||+0x258
                  |L130.1172|
                          DCD      ||.conststring||+0x260
                  |L130.1176|
                          DCD      ||.conststring||+0x268
                  |L130.1180|
                          DCD      ||.conststring||+0x270
                  |L130.1184|
                          DCD      ||.conststring||+0x274
                  |L130.1188|
                          DCD      ||.conststring||+0x27c
                  |L130.1192|
                          DCD      ||.conststring||+0x284
                  |L130.1196|
                          DCD      ||.conststring||+0x290
                  |L130.1200|
                          DCD      ||.conststring||+0x2a0
                  |L130.1204|
                          DCD      send_SOS
                  |L130.1208|
                          DCD      data2
                  |L130.1212|
                          DCD      longi
                  |L130.1216|
                          DCD      lati
                  |L130.1220|
                          DCD      ||.conststring||+0x2a8
                  |L130.1224|
                          DCD      ||.conststring||+0x31c
                  |L130.1228|
                          DCD      ||.conststring||+0x32c
                  |L130.1232|
                          DCD      velocity
                  |L130.1236|
                          DCD      ||.conststring||+0x33c
                  |L130.1240|
                          DCD      ||.conststring||+0x3a4
                  |L130.1244|
                          DCD      at_
                  |L130.1248|
                          DCD      interval
                  |L130.1252|
                          DCD      int_erval
                  |L130.1256|
                          DCD      k
                  |L130.1260|
                          DCD      i
                  |L130.1264|
                          DCD      ||.conststring||+0x3b4
                  |L130.1268|
                          DCD      apn
                  |L130.1272|
0004f8  2103              MOVS     r1,#3
0004fa  48fe              LDR      r0,|L130.2292|
0004fc  f7fffffe          BL       parse_g
;;;1498   								saveapn();								
000500  f7fffffe          BL       saveapn
;;;1499   								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000504  48fc              LDR      r0,|L130.2296|
000506  6800              LDR      r0,[r0,#0]  ; tmeout
000508  4bfc              LDR      r3,|L130.2300|
00050a  4afd              LDR      r2,|L130.2304|
00050c  49fd              LDR      r1,|L130.2308|
00050e  9000              STR      r0,[sp,#0]
000510  48fd              LDR      r0,|L130.2312|
000512  f7fffffe          BL       send_GSM
;;;1500   								send_GSM("\nAT+FSCREATE=D:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000516  48f8              LDR      r0,|L130.2296|
000518  6800              LDR      r0,[r0,#0]  ; tmeout
00051a  4bf8              LDR      r3,|L130.2300|
00051c  4af8              LDR      r2,|L130.2304|
00051e  49f9              LDR      r1,|L130.2308|
000520  9000              STR      r0,[sp,#0]
000522  48fa              LDR      r0,|L130.2316|
000524  f7fffffe          BL       send_GSM
;;;1501   								send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000528  48f3              LDR      r0,|L130.2296|
00052a  6800              LDR      r0,[r0,#0]  ; tmeout
00052c  4bf3              LDR      r3,|L130.2300|
00052e  4af4              LDR      r2,|L130.2304|
000530  49f4              LDR      r1,|L130.2308|
000532  9000              STR      r0,[sp,#0]
000534  48f6              LDR      r0,|L130.2320|
000536  f7fffffe          BL       send_GSM
;;;1502   								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00053a  48ef              LDR      r0,|L130.2296|
00053c  6800              LDR      r0,[r0,#0]  ; tmeout
00053e  4bef              LDR      r3,|L130.2300|
000540  4aef              LDR      r2,|L130.2304|
000542  49f0              LDR      r1,|L130.2308|
000544  9000              STR      r0,[sp,#0]
000546  48f3              LDR      r0,|L130.2324|
000548  f7fffffe          BL       send_GSM
;;;1503   								send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00054c  48ea              LDR      r0,|L130.2296|
00054e  6800              LDR      r0,[r0,#0]  ; tmeout
000550  4bea              LDR      r3,|L130.2300|
000552  4aeb              LDR      r2,|L130.2304|
000554  49eb              LDR      r1,|L130.2308|
000556  9000              STR      r0,[sp,#0]
000558  48ef              LDR      r0,|L130.2328|
00055a  f7fffffe          BL       send_GSM
;;;1504   
;;;1505   								memset(ip,0,100);
00055e  2164              MOVS     r1,#0x64
000560  48ee              LDR      r0,|L130.2332|
000562  f7fffffe          BL       __aeabi_memclr
;;;1506   								memset(port,0,10);
000566  210a              MOVS     r1,#0xa
000568  48ed              LDR      r0,|L130.2336|
00056a  f7fffffe          BL       __aeabi_memclr
;;;1507   								strcat (ip, "rudra.jellyfishtele.com");
00056e  49ed              LDR      r1,|L130.2340|
000570  48ea              LDR      r0,|L130.2332|
000572  f7fffffe          BL       strcat
;;;1508   								strcat (port, "5555");		
000576  49ec              LDR      r1,|L130.2344|
000578  48e9              LDR      r0,|L130.2336|
00057a  f7fffffe          BL       strcat
;;;1509   								memcpy (interval, "5", 1);										
00057e  48eb              LDR      r0,|L130.2348|
000580  49eb              LDR      r1,|L130.2352|
000582  7809              LDRB     r1,[r1,#0]
000584  7001              STRB     r1,[r0,#0]
;;;1510   								save_ip_port();
000586  f7fffffe          BL       save_ip_port
;;;1511   								ignstaton();
00058a  f7fffffe          BL       ignstaton
;;;1512   
;;;1513   								save_interval();	
00058e  f7fffffe          BL       save_interval
;;;1514   								int_erval=myAtoi(interval);		
000592  48e6              LDR      r0,|L130.2348|
000594  f7fffffe          BL       myAtoi
000598  49e6              LDR      r1,|L130.2356|
00059a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1515   								savecursord();
00059c  f7fffffe          BL       savecursord
;;;1516   
;;;1517   			//					printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
;;;1518   								
;;;1519   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
0005a0  48d5              LDR      r0,|L130.2296|
0005a2  6800              LDR      r0,[r0,#0]  ; tmeout
0005a4  4bd5              LDR      r3,|L130.2300|
0005a6  4ae4              LDR      r2,|L130.2360|
0005a8  49d6              LDR      r1,|L130.2308|
0005aa  9000              STR      r0,[sp,#0]
0005ac  48e3              LDR      r0,|L130.2364|
0005ae  f7fffffe          BL       send_GSM
;;;1520   
;;;1521   								
;;;1522   								
;;;1523   RESET_OFF;
0005b2  2020              MOVS     r0,#0x20
0005b4  49e2              LDR      r1,|L130.2368|
0005b6  6088              STR      r0,[r1,#8]
;;;1524   	RESET_OFF;
0005b8  6088              STR      r0,[r1,#8]
;;;1525   	delay(100);	
0005ba  2064              MOVS     r0,#0x64
0005bc  f7fffffe          BL       delay
;;;1526   	RESET_ON;
0005c0  2020              MOVS     r0,#0x20
0005c2  49df              LDR      r1,|L130.2368|
0005c4  6048              STR      r0,[r1,#4]
;;;1527   	RESET_ON;	
0005c6  6048              STR      r0,[r1,#4]
;;;1528   	delay(100);
0005c8  2064              MOVS     r0,#0x64
0005ca  f7fffffe          BL       delay
0005ce  e3c4              B        |L130.3418|
                  |L130.1488|
;;;1529   
;;;1530   								
;;;1531   								
;;;1532   							}
;;;1533   	
;;;1534   
;;;1535   							else if( cond1 && cond9)
0005d0  48dc              LDR      r0,|L130.2372|
0005d2  6800              LDR      r0,[r0,#0]  ; cond1
0005d4  2800              CMP      r0,#0
                  |L130.1494|
0005d6  d07c              BEQ      |L130.1746|
0005d8  48db              LDR      r0,|L130.2376|
0005da  6800              LDR      r0,[r0,#0]  ; cond9
0005dc  2800              CMP      r0,#0
0005de  d0fa              BEQ      |L130.1494|
;;;1536   							{
;;;1537   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0005e0  48c5              LDR      r0,|L130.2296|
0005e2  6800              LDR      r0,[r0,#0]  ; tmeout
0005e4  4bc5              LDR      r3,|L130.2300|
0005e6  4ac6              LDR      r2,|L130.2304|
0005e8  49d8              LDR      r1,|L130.2380|
0005ea  9000              STR      r0,[sp,#0]
0005ec  48d8              LDR      r0,|L130.2384|
0005ee  f7fffffe          BL       send_GSM
;;;1538   
;;;1539   strcat(data,"\n");	
0005f2  49d8              LDR      r1,|L130.2388|
0005f4  48d8              LDR      r0,|L130.2392|
0005f6  f7fffffe          BL       strcat
;;;1540   GPS_COLLECT();
0005fa  f7fffffe          BL       GPS_COLLECT
;;;1541   strcat(data,"CH\n");	
0005fe  49d7              LDR      r1,|L130.2396|
000600  48d5              LDR      r0,|L130.2392|
000602  f7fffffe          BL       strcat
;;;1542   
;;;1543   								
;;;1544   
;;;1545   	delay(100);
000606  2064              MOVS     r0,#0x64
000608  f7fffffe          BL       delay
;;;1546   		clear();//memset(uart_string_gsm,0,5000);
00060c  f7fffffe          BL       clear
;;;1547   	
;;;1548   	memset(at_,0,100);
000610  2164              MOVS     r1,#0x64
000612  48d3              LDR      r0,|L130.2400|
000614  f7fffffe          BL       __aeabi_memclr
;;;1549   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000618  48cf              LDR      r0,|L130.2392|
00061a  f7fffffe          BL       strlen
00061e  1c44              ADDS     r4,r0,#1
000620  4623              MOV      r3,r4
000622  4ad0              LDR      r2,|L130.2404|
000624  49d0              LDR      r1,|L130.2408|
000626  48ce              LDR      r0,|L130.2400|
000628  f7fffffe          BL       __2sprintf
;;;1550   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00062c  2005              MOVS     r0,#5
00062e  4bc2              LDR      r3,|L130.2360|
000630  4ab3              LDR      r2,|L130.2304|
000632  49ce              LDR      r1,|L130.2412|
000634  9000              STR      r0,[sp,#0]
000636  48ca              LDR      r0,|L130.2400|
000638  f7fffffe          BL       send_SD
;;;1551   if(strstr(uart_string_gsm,"ERROR")){
00063c  49be              LDR      r1,|L130.2360|
00063e  48ad              LDR      r0,|L130.2292|
000640  f7fffffe          BL       strstr
000644  2800              CMP      r0,#0
000646  d004              BEQ      |L130.1618|
;;;1552   	drive[0]='C';drive[1]=':';
000648  2043              MOVS     r0,#0x43
00064a  49c6              LDR      r1,|L130.2404|
00064c  7008              STRB     r0,[r1,#0]
00064e  203a              MOVS     r0,#0x3a
000650  7048              STRB     r0,[r1,#1]
                  |L130.1618|
;;;1553   }	
;;;1554   clear();	
000652  f7fffffe          BL       clear
;;;1555   									k2=0;									//string array counter for uart 1
000656  2000              MOVS     r0,#0
000658  49c5              LDR      r1,|L130.2416|
00065a  6008              STR      r0,[r1,#0]  ; k2
;;;1556   									tout=0;	
00065c  49c5              LDR      r1,|L130.2420|
00065e  6008              STR      r0,[r1,#0]  ; tout
;;;1557   		for(k=0;k<strlen(data);k++)
000660  49c5              LDR      r1,|L130.2424|
000662  6008              STR      r0,[r1,#0]  ; k
000664  e00b              B        |L130.1662|
                  |L130.1638|
;;;1558   		{
;;;1559   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000666  48bc              LDR      r0,|L130.2392|
000668  4ac3              LDR      r2,|L130.2424|
00066a  6812              LDR      r2,[r2,#0]  ; k
00066c  5c81              LDRB     r1,[r0,r2]
00066e  48c3              LDR      r0,|L130.2428|
000670  f7fffffe          BL       uart_putchar
000674  48c0              LDR      r0,|L130.2424|
000676  6800              LDR      r0,[r0,#0]            ;1557  ; k
000678  1c40              ADDS     r0,r0,#1              ;1557
00067a  49bf              LDR      r1,|L130.2424|
00067c  6008              STR      r0,[r1,#0]            ;1557  ; k
                  |L130.1662|
00067e  48b6              LDR      r0,|L130.2392|
000680  f7fffffe          BL       strlen
000684  49bc              LDR      r1,|L130.2424|
000686  6809              LDR      r1,[r1,#0]            ;1557  ; k
000688  4288              CMP      r0,r1                 ;1557
00068a  d8ec              BHI      |L130.1638|
;;;1560   		}	
;;;1561   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00068c  210a              MOVS     r1,#0xa
00068e  48bb              LDR      r0,|L130.2428|
000690  f7fffffe          BL       uart_putchar
000694  210a              MOVS     r1,#0xa
000696  48b9              LDR      r0,|L130.2428|
000698  f7fffffe          BL       uart_putchar
00069c  210a              MOVS     r1,#0xa
00069e  48b7              LDR      r0,|L130.2428|
0006a0  f7fffffe          BL       uart_putchar
0006a4  210a              MOVS     r1,#0xa
0006a6  48b5              LDR      r0,|L130.2428|
0006a8  f7fffffe          BL       uart_putchar
0006ac  210a              MOVS     r1,#0xa
0006ae  48b3              LDR      r0,|L130.2428|
0006b0  f7fffffe          BL       uart_putchar
0006b4  210a              MOVS     r1,#0xa
0006b6  48b1              LDR      r0,|L130.2428|
0006b8  f7fffffe          BL       uart_putchar
0006bc  210a              MOVS     r1,#0xa
0006be  48af              LDR      r0,|L130.2428|
0006c0  f7fffffe          BL       uart_putchar
0006c4  210a              MOVS     r1,#0xa
0006c6  48ad              LDR      r0,|L130.2428|
0006c8  f7fffffe          BL       uart_putchar
0006cc  210a              MOVS     r1,#0xa
0006ce  48ab              LDR      r0,|L130.2428|
0006d0  e000              B        |L130.1748|
                  |L130.1746|
0006d2  e0f4              B        |L130.2238|
                  |L130.1748|
0006d4  f7fffffe          BL       uart_putchar
0006d8  210a              MOVS     r1,#0xa
0006da  48a8              LDR      r0,|L130.2428|
0006dc  f7fffffe          BL       uart_putchar
0006e0  210a              MOVS     r1,#0xa
0006e2  48a6              LDR      r0,|L130.2428|
0006e4  f7fffffe          BL       uart_putchar
0006e8  210a              MOVS     r1,#0xa
0006ea  48a4              LDR      r0,|L130.2428|
0006ec  f7fffffe          BL       uart_putchar
0006f0  210a              MOVS     r1,#0xa
0006f2  48a2              LDR      r0,|L130.2428|
0006f4  f7fffffe          BL       uart_putchar
0006f8  210a              MOVS     r1,#0xa
0006fa  48a0              LDR      r0,|L130.2428|
0006fc  f7fffffe          BL       uart_putchar
000700  210a              MOVS     r1,#0xa
000702  489e              LDR      r0,|L130.2428|
000704  f7fffffe          BL       uart_putchar
000708  210a              MOVS     r1,#0xa
00070a  489c              LDR      r0,|L130.2428|
00070c  f7fffffe          BL       uart_putchar
000710  210a              MOVS     r1,#0xa
000712  489a              LDR      r0,|L130.2428|
000714  f7fffffe          BL       uart_putchar
000718  210a              MOVS     r1,#0xa
00071a  4898              LDR      r0,|L130.2428|
00071c  f7fffffe          BL       uart_putchar
000720  210a              MOVS     r1,#0xa
000722  4896              LDR      r0,|L130.2428|
000724  f7fffffe          BL       uart_putchar
000728  210a              MOVS     r1,#0xa
00072a  4894              LDR      r0,|L130.2428|
00072c  f7fffffe          BL       uart_putchar
000730  210a              MOVS     r1,#0xa
000732  4892              LDR      r0,|L130.2428|
000734  f7fffffe          BL       uart_putchar
000738  210a              MOVS     r1,#0xa
00073a  4890              LDR      r0,|L130.2428|
00073c  f7fffffe          BL       uart_putchar
000740  210a              MOVS     r1,#0xa
000742  488e              LDR      r0,|L130.2428|
000744  f7fffffe          BL       uart_putchar
000748  210a              MOVS     r1,#0xa
00074a  488c              LDR      r0,|L130.2428|
00074c  f7fffffe          BL       uart_putchar
000750  210a              MOVS     r1,#0xa
000752  488a              LDR      r0,|L130.2428|
000754  f7fffffe          BL       uart_putchar
000758  210a              MOVS     r1,#0xa
00075a  4888              LDR      r0,|L130.2428|
00075c  f7fffffe          BL       uart_putchar
000760  210a              MOVS     r1,#0xa
000762  4886              LDR      r0,|L130.2428|
000764  f7fffffe          BL       uart_putchar
000768  210a              MOVS     r1,#0xa
00076a  4884              LDR      r0,|L130.2428|
00076c  f7fffffe          BL       uart_putchar
000770  210a              MOVS     r1,#0xa
000772  4882              LDR      r0,|L130.2428|
000774  f7fffffe          BL       uart_putchar
000778  210a              MOVS     r1,#0xa
00077a  4880              LDR      r0,|L130.2428|
00077c  f7fffffe          BL       uart_putchar
000780  210a              MOVS     r1,#0xa
000782  487e              LDR      r0,|L130.2428|
000784  f7fffffe          BL       uart_putchar
000788  210a              MOVS     r1,#0xa
00078a  487c              LDR      r0,|L130.2428|
00078c  f7fffffe          BL       uart_putchar
000790  210a              MOVS     r1,#0xa
000792  487a              LDR      r0,|L130.2428|
000794  f7fffffe          BL       uart_putchar
000798  210a              MOVS     r1,#0xa
00079a  4878              LDR      r0,|L130.2428|
00079c  f7fffffe          BL       uart_putchar
0007a0  210a              MOVS     r1,#0xa
0007a2  4876              LDR      r0,|L130.2428|
0007a4  f7fffffe          BL       uart_putchar
0007a8  210a              MOVS     r1,#0xa
0007aa  4874              LDR      r0,|L130.2428|
0007ac  f7fffffe          BL       uart_putchar
0007b0  210a              MOVS     r1,#0xa
0007b2  4872              LDR      r0,|L130.2428|
0007b4  f7fffffe          BL       uart_putchar
0007b8  210a              MOVS     r1,#0xa
0007ba  4870              LDR      r0,|L130.2428|
0007bc  f7fffffe          BL       uart_putchar
0007c0  210a              MOVS     r1,#0xa
0007c2  486e              LDR      r0,|L130.2428|
0007c4  f7fffffe          BL       uart_putchar
0007c8  210a              MOVS     r1,#0xa
0007ca  486c              LDR      r0,|L130.2428|
0007cc  f7fffffe          BL       uart_putchar
0007d0  210a              MOVS     r1,#0xa
0007d2  486a              LDR      r0,|L130.2428|
0007d4  f7fffffe          BL       uart_putchar
0007d8  210a              MOVS     r1,#0xa
0007da  4868              LDR      r0,|L130.2428|
0007dc  f7fffffe          BL       uart_putchar
0007e0  210a              MOVS     r1,#0xa
0007e2  4866              LDR      r0,|L130.2428|
0007e4  f7fffffe          BL       uart_putchar
0007e8  210a              MOVS     r1,#0xa
0007ea  4864              LDR      r0,|L130.2428|
0007ec  f7fffffe          BL       uart_putchar
0007f0  210a              MOVS     r1,#0xa
0007f2  4862              LDR      r0,|L130.2428|
0007f4  f7fffffe          BL       uart_putchar
0007f8  210a              MOVS     r1,#0xa
0007fa  4860              LDR      r0,|L130.2428|
0007fc  f7fffffe          BL       uart_putchar
000800  210a              MOVS     r1,#0xa
000802  485e              LDR      r0,|L130.2428|
000804  f7fffffe          BL       uart_putchar
000808  210a              MOVS     r1,#0xa
00080a  485c              LDR      r0,|L130.2428|
00080c  f7fffffe          BL       uart_putchar
000810  210a              MOVS     r1,#0xa
000812  485a              LDR      r0,|L130.2428|
000814  f7fffffe          BL       uart_putchar
000818  210a              MOVS     r1,#0xa
00081a  4858              LDR      r0,|L130.2428|
00081c  f7fffffe          BL       uart_putchar
000820  210a              MOVS     r1,#0xa
000822  4856              LDR      r0,|L130.2428|
000824  f7fffffe          BL       uart_putchar
000828  210a              MOVS     r1,#0xa
00082a  4854              LDR      r0,|L130.2428|
00082c  f7fffffe          BL       uart_putchar
000830  210a              MOVS     r1,#0xa
000832  4852              LDR      r0,|L130.2428|
000834  f7fffffe          BL       uart_putchar
000838  210a              MOVS     r1,#0xa
00083a  4850              LDR      r0,|L130.2428|
00083c  f7fffffe          BL       uart_putchar
000840  210a              MOVS     r1,#0xa
000842  484e              LDR      r0,|L130.2428|
000844  f7fffffe          BL       uart_putchar
000848  210a              MOVS     r1,#0xa
00084a  484c              LDR      r0,|L130.2428|
00084c  f7fffffe          BL       uart_putchar
000850  210a              MOVS     r1,#0xa
000852  484a              LDR      r0,|L130.2428|
000854  f7fffffe          BL       uart_putchar
;;;1562   									//memset(data,0,1000);
;;;1563   														//timer counts to wait for characters in uart 1 									
;;;1564   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000858  bf00              NOP      
                  |L130.2138|
00085a  493c              LDR      r1,|L130.2380|
00085c  4825              LDR      r0,|L130.2292|
00085e  f7fffffe          BL       strstr
000862  2800              CMP      r0,#0
000864  d109              BNE      |L130.2170|
000866  4934              LDR      r1,|L130.2360|
000868  4822              LDR      r0,|L130.2292|
00086a  f7fffffe          BL       strstr
00086e  2800              CMP      r0,#0
000870  d103              BNE      |L130.2170|
000872  4840              LDR      r0,|L130.2420|
000874  6800              LDR      r0,[r0,#0]  ; tout
000876  2805              CMP      r0,#5
000878  ddef              BLE      |L130.2138|
                  |L130.2170|
;;;1565   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1566   									}
;;;1567   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00087a  f7fffffe          BL       clear
;;;1568   									//clear();
;;;1569   									memset(data,0,strlen(data));
00087e  4836              LDR      r0,|L130.2392|
000880  f7fffffe          BL       strlen
000884  4604              MOV      r4,r0
000886  4621              MOV      r1,r4
000888  4833              LDR      r0,|L130.2392|
00088a  f7fffffe          BL       __aeabi_memclr
;;;1570   									clear();
00088e  f7fffffe          BL       clear
;;;1571   
;;;1572   																
;;;1573   								
;;;1574   								
;;;1575   //log_it();								
;;;1576   		RESET_OFF;delay(10);
000892  2020              MOVS     r0,#0x20
000894  492a              LDR      r1,|L130.2368|
000896  6088              STR      r0,[r1,#8]
000898  200a              MOVS     r0,#0xa
00089a  f7fffffe          BL       delay
;;;1577   		RESET_ON;delay(10);
00089e  2020              MOVS     r0,#0x20
0008a0  4927              LDR      r1,|L130.2368|
0008a2  6048              STR      r0,[r1,#4]
0008a4  200a              MOVS     r0,#0xa
0008a6  f7fffffe          BL       delay
;;;1578   								send_GSM("\n\n AT+CFUN=1,1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);			
0008aa  4813              LDR      r0,|L130.2296|
0008ac  6800              LDR      r0,[r0,#0]  ; tmeout
0008ae  4b13              LDR      r3,|L130.2300|
0008b0  4a13              LDR      r2,|L130.2304|
0008b2  4926              LDR      r1,|L130.2380|
0008b4  9000              STR      r0,[sp,#0]
0008b6  4832              LDR      r0,|L130.2432|
0008b8  f7fffffe          BL       send_GSM
                  |L130.2236|
0008bc  e24d              B        |L130.3418|
                  |L130.2238|
;;;1579   							}
;;;1580   							
;;;1581   							else if(cond12 && cond10)
0008be  4831              LDR      r0,|L130.2436|
0008c0  6800              LDR      r0,[r0,#0]  ; cond12
0008c2  2800              CMP      r0,#0
0008c4  d076              BEQ      |L130.2484|
0008c6  4830              LDR      r0,|L130.2440|
0008c8  6800              LDR      r0,[r0,#0]  ; cond10
0008ca  2800              CMP      r0,#0
0008cc  d072              BEQ      |L130.2484|
;;;1582   							{
;;;1583   						//		printf("\n\n\n\t%s",uart_string_gsm);
;;;1584   								memset(ip,0,16);
0008ce  2110              MOVS     r1,#0x10
0008d0  4812              LDR      r0,|L130.2332|
0008d2  f7fffffe          BL       __aeabi_memclr
;;;1585   								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
0008d6  4811              LDR      r0,|L130.2332|
0008d8  2120              MOVS     r1,#0x20
0008da  460b              MOV      r3,r1
0008dc  2204              MOVS     r2,#4
0008de  9100              STR      r1,[sp,#0]
0008e0  9001              STR      r0,[sp,#4]
0008e2  2103              MOVS     r1,#3
0008e4  4803              LDR      r0,|L130.2292|
0008e6  f7fffffe          BL       parse_g
;;;1586   								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
0008ea  480d              LDR      r0,|L130.2336|
0008ec  210d              MOVS     r1,#0xd
0008ee  e04d              B        |L130.2444|
                  |L130.2288|
0008f0  e245              B        |L130.3454|
0008f2  e05f              B        |L130.2484|
                  |L130.2292|
                          DCD      uart_string_gsm
                  |L130.2296|
                          DCD      tmeout
                  |L130.2300|
                          DCD      ||.conststring||+0x10
                  |L130.2304|
                          DCD      ||.conststring||+0x18
                  |L130.2308|
                          DCD      ||.conststring||+0x2c
                  |L130.2312|
                          DCD      ||.conststring||+0x84
                  |L130.2316|
                          DCD      ||.conststring||+0x3b8
                  |L130.2320|
                          DCD      ||.conststring||+0x3d4
                  |L130.2324|
                          DCD      ||.conststring||+0x148
                  |L130.2328|
                          DCD      ||.conststring||+0x30
                  |L130.2332|
                          DCD      ||ip||
                  |L130.2336|
                          DCD      port
                  |L130.2340|
                          DCD      ||.conststring||+0x3f0
                  |L130.2344|
                          DCD      ||.conststring||+0x408
                  |L130.2348|
                          DCD      interval
                  |L130.2352|
                          DCD      ||.conststring||+0x410
                  |L130.2356|
                          DCD      int_erval
                  |L130.2360|
                          DCD      ||.conststring||+0xe0
                  |L130.2364|
                          DCD      ||.conststring||+0x414
                  |L130.2368|
                          DCD      0x400ff080
                  |L130.2372|
                          DCD      cond1
                  |L130.2376|
                          DCD      cond9
                  |L130.2380|
                          DCD      ||.conststring||+0x70
                  |L130.2384|
                          DCD      ||.conststring||+0x3a4
                  |L130.2388|
                          DCD      ||.conststring||+0x428
                  |L130.2392|
                          DCD      data
                  |L130.2396|
                          DCD      ||.conststring||+0x42c
                  |L130.2400|
                          DCD      at_
                  |L130.2404|
                          DCD      drive
                  |L130.2408|
                          DCD      ||.conststring||+0x430
                  |L130.2412|
                          DCD      ||.conststring||+0x20
                  |L130.2416|
                          DCD      ||k2||
                  |L130.2420|
                          DCD      tout
                  |L130.2424|
                          DCD      k
                  |L130.2428|
                          DCD      0x4006b000
                  |L130.2432|
                          DCD      ||.conststring||+0x454
                  |L130.2436|
                          DCD      cond12
                  |L130.2440|
                          DCD      cond10
                  |L130.2444|
00098c  2320              MOVS     r3,#0x20
00098e  2205              MOVS     r2,#5
000990  9100              STR      r1,[sp,#0]
000992  9001              STR      r0,[sp,#4]
000994  2106              MOVS     r1,#6
000996  48fa              LDR      r0,|L130.3456|
000998  f7fffffe          BL       parse_g
;;;1587   			//					printf("\n%s\n",port);
;;;1588   								save_ip_port();
00099c  f7fffffe          BL       save_ip_port
;;;1589   							
;;;1590   	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;1591   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009a0  48f8              LDR      r0,|L130.3460|
0009a2  6800              LDR      r0,[r0,#0]  ; tmeout
0009a4  4bf8              LDR      r3,|L130.3464|
0009a6  4af9              LDR      r2,|L130.3468|
0009a8  49f9              LDR      r1,|L130.3472|
0009aa  9000              STR      r0,[sp,#0]
0009ac  48f9              LDR      r0,|L130.3476|
0009ae  f7fffffe          BL       send_GSM
0009b2  e1d2              B        |L130.3418|
                  |L130.2484|
;;;1592   
;;;1593   //								while(1);
;;;1594   								
;;;1595   								
;;;1596   							}
;;;1597   
;;;1598   											
;;;1599   							else if(cond1 && cond13)
0009b4  48f8              LDR      r0,|L130.3480|
0009b6  6800              LDR      r0,[r0,#0]  ; cond1
0009b8  2800              CMP      r0,#0
0009ba  d01a              BEQ      |L130.2546|
0009bc  48f7              LDR      r0,|L130.3484|
0009be  6800              LDR      r0,[r0,#0]  ; cond13
0009c0  2800              CMP      r0,#0
0009c2  d016              BEQ      |L130.2546|
;;;1600   							{
;;;1601   								
;;;1602   								IGNITION_ON;FUEL_ON;
0009c4  2002              MOVS     r0,#2
0009c6  49f6              LDR      r1,|L130.3488|
0009c8  6088              STR      r0,[r1,#8]
0009ca  2004              MOVS     r0,#4
0009cc  6088              STR      r0,[r1,#8]
;;;1603   								clear();
0009ce  f7fffffe          BL       clear
;;;1604   								ignstaton();
0009d2  f7fffffe          BL       ignstaton
;;;1605   								delay(1000);
0009d6  207d              MOVS     r0,#0x7d
0009d8  00c0              LSLS     r0,r0,#3
0009da  f7fffffe          BL       delay
;;;1606   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009de  48e9              LDR      r0,|L130.3460|
0009e0  6800              LDR      r0,[r0,#0]  ; tmeout
0009e2  4be9              LDR      r3,|L130.3464|
0009e4  4ae9              LDR      r2,|L130.3468|
0009e6  49ea              LDR      r1,|L130.3472|
0009e8  9000              STR      r0,[sp,#0]
0009ea  48ee              LDR      r0,|L130.3492|
0009ec  f7fffffe          BL       send_GSM
0009f0  e1b3              B        |L130.3418|
                  |L130.2546|
;;;1607   								
;;;1608   							}
;;;1609   							else if(cond1 && cond14)
0009f2  48e9              LDR      r0,|L130.3480|
0009f4  6800              LDR      r0,[r0,#0]  ; cond1
0009f6  2800              CMP      r0,#0
0009f8  d01a              BEQ      |L130.2608|
0009fa  48eb              LDR      r0,|L130.3496|
0009fc  6800              LDR      r0,[r0,#0]  ; cond14
0009fe  2800              CMP      r0,#0
000a00  d016              BEQ      |L130.2608|
;;;1610   							{
;;;1611   								
;;;1612   								IGNITION_OFF;FUEL_OFF;
000a02  2002              MOVS     r0,#2
000a04  49e6              LDR      r1,|L130.3488|
000a06  6048              STR      r0,[r1,#4]
000a08  2004              MOVS     r0,#4
000a0a  6048              STR      r0,[r1,#4]
;;;1613   								clear();
000a0c  f7fffffe          BL       clear
;;;1614   								ignstatoff();
000a10  f7fffffe          BL       ignstatoff
;;;1615   								delay(1000);
000a14  207d              MOVS     r0,#0x7d
000a16  00c0              LSLS     r0,r0,#3
000a18  f7fffffe          BL       delay
;;;1616   								
;;;1617   								
;;;1618   								
;;;1619   								
;;;1620   								
;;;1621   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a1c  48d9              LDR      r0,|L130.3460|
000a1e  6800              LDR      r0,[r0,#0]  ; tmeout
000a20  4bd9              LDR      r3,|L130.3464|
000a22  4ada              LDR      r2,|L130.3468|
000a24  49da              LDR      r1,|L130.3472|
000a26  9000              STR      r0,[sp,#0]
000a28  48de              LDR      r0,|L130.3492|
000a2a  f7fffffe          BL       send_GSM
000a2e  e194              B        |L130.3418|
                  |L130.2608|
;;;1622   								
;;;1623   							}
;;;1624   							
;;;1625   							else if(cond1 && cond5)
000a30  48d9              LDR      r0,|L130.3480|
000a32  6800              LDR      r0,[r0,#0]  ; cond1
000a34  2800              CMP      r0,#0
000a36  d05d              BEQ      |L130.2804|
000a38  48dc              LDR      r0,|L130.3500|
000a3a  6800              LDR      r0,[r0,#0]  ; cond5
000a3c  2800              CMP      r0,#0
000a3e  d059              BEQ      |L130.2804|
;;;1626   							{
;;;1627   								
;;;1628   
;;;1629   								memset(at_,0,100);
000a40  2164              MOVS     r1,#0x64
000a42  48db              LDR      r0,|L130.3504|
000a44  f7fffffe          BL       __aeabi_memclr
;;;1630   								memset(num_o,0,15);
000a48  210f              MOVS     r1,#0xf
000a4a  48da              LDR      r0,|L130.3508|
000a4c  f7fffffe          BL       __aeabi_memclr
;;;1631   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000a50  48d8              LDR      r0,|L130.3508|
000a52  210d              MOVS     r1,#0xd
000a54  2320              MOVS     r3,#0x20
000a56  2205              MOVS     r2,#5
000a58  9100              STR      r1,[sp,#0]
000a5a  9001              STR      r0,[sp,#4]
000a5c  2103              MOVS     r1,#3
000a5e  48c8              LDR      r0,|L130.3456|
000a60  f7fffffe          BL       parse_g
;;;1632   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a64  48c7              LDR      r0,|L130.3460|
000a66  6800              LDR      r0,[r0,#0]  ; tmeout
000a68  4bc7              LDR      r3,|L130.3464|
000a6a  4ac8              LDR      r2,|L130.3468|
000a6c  49c8              LDR      r1,|L130.3472|
000a6e  9000              STR      r0,[sp,#0]
000a70  48d1              LDR      r0,|L130.3512|
000a72  f7fffffe          BL       send_GSM
;;;1633   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000a76  2004              MOVS     r0,#4
000a78  4bd0              LDR      r3,|L130.3516|
000a7a  4ac4              LDR      r2,|L130.3468|
000a7c  49d0              LDR      r1,|L130.3520|
000a7e  9000              STR      r0,[sp,#0]
000a80  48d0              LDR      r0,|L130.3524|
000a82  f7fffffe          BL       send_GSM
;;;1634   
;;;1635   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000a86  4acb              LDR      r2,|L130.3508|
000a88  49cf              LDR      r1,|L130.3528|
000a8a  48c9              LDR      r0,|L130.3504|
000a8c  f7fffffe          BL       __2sprintf
;;;1636   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a90  48bc              LDR      r0,|L130.3460|
000a92  6800              LDR      r0,[r0,#0]  ; tmeout
000a94  4bbc              LDR      r3,|L130.3464|
000a96  4abd              LDR      r2,|L130.3468|
000a98  49bd              LDR      r1,|L130.3472|
000a9a  9000              STR      r0,[sp,#0]
000a9c  48c4              LDR      r0,|L130.3504|
000a9e  f7fffffe          BL       send_GSM
;;;1637   								
;;;1638   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000aa2  48b8              LDR      r0,|L130.3460|
000aa4  6800              LDR      r0,[r0,#0]  ; tmeout
000aa6  4bb8              LDR      r3,|L130.3464|
000aa8  4ab8              LDR      r2,|L130.3468|
000aaa  49b9              LDR      r1,|L130.3472|
000aac  9000              STR      r0,[sp,#0]
000aae  48c7              LDR      r0,|L130.3532|
000ab0  f7fffffe          BL       send_GSM
;;;1639   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000ab4  2004              MOVS     r0,#4
000ab6  4bc1              LDR      r3,|L130.3516|
000ab8  4ab4              LDR      r2,|L130.3468|
000aba  49c1              LDR      r1,|L130.3520|
000abc  9000              STR      r0,[sp,#0]
000abe  48c1              LDR      r0,|L130.3524|
000ac0  f7fffffe          BL       send_GSM
;;;1640   
;;;1641   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000ac4  4abb              LDR      r2,|L130.3508|
000ac6  49c0              LDR      r1,|L130.3528|
000ac8  48b9              LDR      r0,|L130.3504|
000aca  f7fffffe          BL       __2sprintf
;;;1642   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ace  48ad              LDR      r0,|L130.3460|
000ad0  6800              LDR      r0,[r0,#0]  ; tmeout
000ad2  4bad              LDR      r3,|L130.3464|
000ad4  4aad              LDR      r2,|L130.3468|
000ad6  49ae              LDR      r1,|L130.3472|
000ad8  9000              STR      r0,[sp,#0]
000ada  48b5              LDR      r0,|L130.3504|
000adc  f7fffffe          BL       send_GSM
;;;1643   
;;;1644   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ae0  48a8              LDR      r0,|L130.3460|
000ae2  6800              LDR      r0,[r0,#0]  ; tmeout
000ae4  4ba8              LDR      r3,|L130.3464|
000ae6  4aa9              LDR      r2,|L130.3468|
000ae8  49a9              LDR      r1,|L130.3472|
000aea  9000              STR      r0,[sp,#0]
000aec  48a9              LDR      r0,|L130.3476|
000aee  f7fffffe          BL       send_GSM
000af2  e132              B        |L130.3418|
                  |L130.2804|
;;;1645   															
;;;1646   						
;;;1647   								
;;;1648   							}		
;;;1649   							else if(cond1 && cond6)
000af4  48a8              LDR      r0,|L130.3480|
000af6  6800              LDR      r0,[r0,#0]  ; cond1
000af8  2800              CMP      r0,#0
000afa  d05d              BEQ      |L130.3000|
000afc  48b4              LDR      r0,|L130.3536|
000afe  6800              LDR      r0,[r0,#0]  ; cond6
000b00  2800              CMP      r0,#0
000b02  d059              BEQ      |L130.3000|
;;;1650   							{
;;;1651   
;;;1652   								
;;;1653   								memset(at_,0,100);
000b04  2164              MOVS     r1,#0x64
000b06  48aa              LDR      r0,|L130.3504|
000b08  f7fffffe          BL       __aeabi_memclr
;;;1654   								memset(num_o,0,15);
000b0c  210f              MOVS     r1,#0xf
000b0e  48a9              LDR      r0,|L130.3508|
000b10  f7fffffe          BL       __aeabi_memclr
;;;1655   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000b14  48a7              LDR      r0,|L130.3508|
000b16  210d              MOVS     r1,#0xd
000b18  2320              MOVS     r3,#0x20
000b1a  2205              MOVS     r2,#5
000b1c  9100              STR      r1,[sp,#0]
000b1e  9001              STR      r0,[sp,#4]
000b20  2103              MOVS     r1,#3
000b22  4897              LDR      r0,|L130.3456|
000b24  f7fffffe          BL       parse_g
;;;1656   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b28  4896              LDR      r0,|L130.3460|
000b2a  6800              LDR      r0,[r0,#0]  ; tmeout
000b2c  4b96              LDR      r3,|L130.3464|
000b2e  4a97              LDR      r2,|L130.3468|
000b30  4997              LDR      r1,|L130.3472|
000b32  9000              STR      r0,[sp,#0]
000b34  48a0              LDR      r0,|L130.3512|
000b36  f7fffffe          BL       send_GSM
;;;1657   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b3a  2004              MOVS     r0,#4
000b3c  4b9f              LDR      r3,|L130.3516|
000b3e  4a93              LDR      r2,|L130.3468|
000b40  499f              LDR      r1,|L130.3520|
000b42  9000              STR      r0,[sp,#0]
000b44  48a3              LDR      r0,|L130.3540|
000b46  f7fffffe          BL       send_GSM
;;;1658   
;;;1659   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b4a  4a9a              LDR      r2,|L130.3508|
000b4c  49a2              LDR      r1,|L130.3544|
000b4e  4898              LDR      r0,|L130.3504|
000b50  f7fffffe          BL       __2sprintf
;;;1660   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b54  488b              LDR      r0,|L130.3460|
000b56  6800              LDR      r0,[r0,#0]  ; tmeout
000b58  4b8b              LDR      r3,|L130.3464|
000b5a  4a8c              LDR      r2,|L130.3468|
000b5c  498c              LDR      r1,|L130.3472|
000b5e  9000              STR      r0,[sp,#0]
000b60  4893              LDR      r0,|L130.3504|
000b62  f7fffffe          BL       send_GSM
;;;1661   								
;;;1662   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b66  4887              LDR      r0,|L130.3460|
000b68  6800              LDR      r0,[r0,#0]  ; tmeout
000b6a  4b87              LDR      r3,|L130.3464|
000b6c  4a87              LDR      r2,|L130.3468|
000b6e  4988              LDR      r1,|L130.3472|
000b70  9000              STR      r0,[sp,#0]
000b72  4896              LDR      r0,|L130.3532|
000b74  f7fffffe          BL       send_GSM
;;;1663   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b78  2004              MOVS     r0,#4
000b7a  4b90              LDR      r3,|L130.3516|
000b7c  4a83              LDR      r2,|L130.3468|
000b7e  4990              LDR      r1,|L130.3520|
000b80  9000              STR      r0,[sp,#0]
000b82  4894              LDR      r0,|L130.3540|
000b84  f7fffffe          BL       send_GSM
;;;1664   
;;;1665   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b88  4a8a              LDR      r2,|L130.3508|
000b8a  4993              LDR      r1,|L130.3544|
000b8c  4888              LDR      r0,|L130.3504|
000b8e  f7fffffe          BL       __2sprintf
;;;1666   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);								
000b92  487c              LDR      r0,|L130.3460|
000b94  6800              LDR      r0,[r0,#0]  ; tmeout
000b96  4b7c              LDR      r3,|L130.3464|
000b98  4a7c              LDR      r2,|L130.3468|
000b9a  497d              LDR      r1,|L130.3472|
000b9c  9000              STR      r0,[sp,#0]
000b9e  4884              LDR      r0,|L130.3504|
000ba0  f7fffffe          BL       send_GSM
;;;1667   
;;;1668   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ba4  4877              LDR      r0,|L130.3460|
000ba6  6800              LDR      r0,[r0,#0]  ; tmeout
000ba8  4b77              LDR      r3,|L130.3464|
000baa  4a78              LDR      r2,|L130.3468|
000bac  4978              LDR      r1,|L130.3472|
000bae  9000              STR      r0,[sp,#0]
000bb0  4878              LDR      r0,|L130.3476|
000bb2  f7fffffe          BL       send_GSM
000bb6  e0d0              B        |L130.3418|
                  |L130.3000|
;;;1669   							}									
;;;1670   							else if(cond1 && cond7)
000bb8  4877              LDR      r0,|L130.3480|
000bba  6800              LDR      r0,[r0,#0]  ; cond1
000bbc  2800              CMP      r0,#0
000bbe  d05d              BEQ      |L130.3196|
000bc0  4886              LDR      r0,|L130.3548|
000bc2  6800              LDR      r0,[r0,#0]  ; cond7
000bc4  2800              CMP      r0,#0
000bc6  d059              BEQ      |L130.3196|
;;;1671   							{
;;;1672   								
;;;1673   								memset(at_,0,100);
000bc8  2164              MOVS     r1,#0x64
000bca  4879              LDR      r0,|L130.3504|
000bcc  f7fffffe          BL       __aeabi_memclr
;;;1674   								memset(num_o,0,15);
000bd0  210f              MOVS     r1,#0xf
000bd2  4878              LDR      r0,|L130.3508|
000bd4  f7fffffe          BL       __aeabi_memclr
;;;1675   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000bd8  4876              LDR      r0,|L130.3508|
000bda  210d              MOVS     r1,#0xd
000bdc  2320              MOVS     r3,#0x20
000bde  2205              MOVS     r2,#5
000be0  9100              STR      r1,[sp,#0]
000be2  9001              STR      r0,[sp,#4]
000be4  2103              MOVS     r1,#3
000be6  4866              LDR      r0,|L130.3456|
000be8  f7fffffe          BL       parse_g
;;;1676   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000bec  4865              LDR      r0,|L130.3460|
000bee  6800              LDR      r0,[r0,#0]  ; tmeout
000bf0  4b65              LDR      r3,|L130.3464|
000bf2  4a66              LDR      r2,|L130.3468|
000bf4  4966              LDR      r1,|L130.3472|
000bf6  9000              STR      r0,[sp,#0]
000bf8  486f              LDR      r0,|L130.3512|
000bfa  f7fffffe          BL       send_GSM
;;;1677   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000bfe  2004              MOVS     r0,#4
000c00  4b6e              LDR      r3,|L130.3516|
000c02  4a62              LDR      r2,|L130.3468|
000c04  496e              LDR      r1,|L130.3520|
000c06  9000              STR      r0,[sp,#0]
000c08  4875              LDR      r0,|L130.3552|
000c0a  f7fffffe          BL       send_GSM
;;;1678   
;;;1679   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c0e  4a69              LDR      r2,|L130.3508|
000c10  4974              LDR      r1,|L130.3556|
000c12  4867              LDR      r0,|L130.3504|
000c14  f7fffffe          BL       __2sprintf
;;;1680   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c18  485a              LDR      r0,|L130.3460|
000c1a  6800              LDR      r0,[r0,#0]  ; tmeout
000c1c  4b5a              LDR      r3,|L130.3464|
000c1e  4a5b              LDR      r2,|L130.3468|
000c20  495b              LDR      r1,|L130.3472|
000c22  9000              STR      r0,[sp,#0]
000c24  4862              LDR      r0,|L130.3504|
000c26  f7fffffe          BL       send_GSM
;;;1681   								
;;;1682   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c2a  4856              LDR      r0,|L130.3460|
000c2c  6800              LDR      r0,[r0,#0]  ; tmeout
000c2e  4b56              LDR      r3,|L130.3464|
000c30  4a56              LDR      r2,|L130.3468|
000c32  4957              LDR      r1,|L130.3472|
000c34  9000              STR      r0,[sp,#0]
000c36  4865              LDR      r0,|L130.3532|
000c38  f7fffffe          BL       send_GSM
;;;1683   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000c3c  2004              MOVS     r0,#4
000c3e  4b5f              LDR      r3,|L130.3516|
000c40  4a52              LDR      r2,|L130.3468|
000c42  495f              LDR      r1,|L130.3520|
000c44  9000              STR      r0,[sp,#0]
000c46  4866              LDR      r0,|L130.3552|
000c48  f7fffffe          BL       send_GSM
;;;1684   
;;;1685   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c4c  4a59              LDR      r2,|L130.3508|
000c4e  4965              LDR      r1,|L130.3556|
000c50  4857              LDR      r0,|L130.3504|
000c52  f7fffffe          BL       __2sprintf
;;;1686   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c56  484b              LDR      r0,|L130.3460|
000c58  6800              LDR      r0,[r0,#0]  ; tmeout
000c5a  4b4b              LDR      r3,|L130.3464|
000c5c  4a4b              LDR      r2,|L130.3468|
000c5e  494c              LDR      r1,|L130.3472|
000c60  9000              STR      r0,[sp,#0]
000c62  4853              LDR      r0,|L130.3504|
000c64  f7fffffe          BL       send_GSM
;;;1687   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000c68  4846              LDR      r0,|L130.3460|
000c6a  6800              LDR      r0,[r0,#0]  ; tmeout
000c6c  4b46              LDR      r3,|L130.3464|
000c6e  4a47              LDR      r2,|L130.3468|
000c70  4947              LDR      r1,|L130.3472|
000c72  9000              STR      r0,[sp,#0]
000c74  4847              LDR      r0,|L130.3476|
000c76  f7fffffe          BL       send_GSM
000c7a  e06e              B        |L130.3418|
                  |L130.3196|
;;;1688   							}			
;;;1689   							else if(cond11)
000c7c  485a              LDR      r0,|L130.3560|
000c7e  6800              LDR      r0,[r0,#0]  ; cond11
000c80  2800              CMP      r0,#0
000c82  d059              BEQ      |L130.3384|
;;;1690   							{
;;;1691   
;;;1692   								memset(at_,0,100);
000c84  2164              MOVS     r1,#0x64
000c86  484a              LDR      r0,|L130.3504|
000c88  f7fffffe          BL       __aeabi_memclr
;;;1693   								memset(num_o,0,15);
000c8c  210f              MOVS     r1,#0xf
000c8e  4849              LDR      r0,|L130.3508|
000c90  f7fffffe          BL       __aeabi_memclr
;;;1694   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000c94  4847              LDR      r0,|L130.3508|
000c96  210d              MOVS     r1,#0xd
000c98  2320              MOVS     r3,#0x20
000c9a  2205              MOVS     r2,#5
000c9c  9100              STR      r1,[sp,#0]
000c9e  9001              STR      r0,[sp,#4]
000ca0  2103              MOVS     r1,#3
000ca2  4837              LDR      r0,|L130.3456|
000ca4  f7fffffe          BL       parse_g
;;;1695   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ca8  4836              LDR      r0,|L130.3460|
000caa  6800              LDR      r0,[r0,#0]  ; tmeout
000cac  4b36              LDR      r3,|L130.3464|
000cae  4a37              LDR      r2,|L130.3468|
000cb0  4937              LDR      r1,|L130.3472|
000cb2  9000              STR      r0,[sp,#0]
000cb4  4840              LDR      r0,|L130.3512|
000cb6  f7fffffe          BL       send_GSM
;;;1696   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cba  2004              MOVS     r0,#4
000cbc  4b3f              LDR      r3,|L130.3516|
000cbe  4a33              LDR      r2,|L130.3468|
000cc0  493f              LDR      r1,|L130.3520|
000cc2  9000              STR      r0,[sp,#0]
000cc4  4849              LDR      r0,|L130.3564|
000cc6  f7fffffe          BL       send_GSM
;;;1697   
;;;1698   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000cca  4a3a              LDR      r2,|L130.3508|
000ccc  4948              LDR      r1,|L130.3568|
000cce  4838              LDR      r0,|L130.3504|
000cd0  f7fffffe          BL       __2sprintf
;;;1699   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000cd4  482b              LDR      r0,|L130.3460|
000cd6  6800              LDR      r0,[r0,#0]  ; tmeout
000cd8  4b2b              LDR      r3,|L130.3464|
000cda  4a2c              LDR      r2,|L130.3468|
000cdc  492c              LDR      r1,|L130.3472|
000cde  9000              STR      r0,[sp,#0]
000ce0  4833              LDR      r0,|L130.3504|
000ce2  f7fffffe          BL       send_GSM
;;;1700   								
;;;1701   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ce6  4827              LDR      r0,|L130.3460|
000ce8  6800              LDR      r0,[r0,#0]  ; tmeout
000cea  4b27              LDR      r3,|L130.3464|
000cec  4a27              LDR      r2,|L130.3468|
000cee  4928              LDR      r1,|L130.3472|
000cf0  9000              STR      r0,[sp,#0]
000cf2  4836              LDR      r0,|L130.3532|
000cf4  f7fffffe          BL       send_GSM
;;;1702   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cf8  2004              MOVS     r0,#4
000cfa  4b30              LDR      r3,|L130.3516|
000cfc  4a23              LDR      r2,|L130.3468|
000cfe  4930              LDR      r1,|L130.3520|
000d00  9000              STR      r0,[sp,#0]
000d02  483a              LDR      r0,|L130.3564|
000d04  f7fffffe          BL       send_GSM
;;;1703   
;;;1704   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000d08  4a2a              LDR      r2,|L130.3508|
000d0a  4939              LDR      r1,|L130.3568|
000d0c  4828              LDR      r0,|L130.3504|
000d0e  f7fffffe          BL       __2sprintf
;;;1705   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d12  481c              LDR      r0,|L130.3460|
000d14  6800              LDR      r0,[r0,#0]  ; tmeout
000d16  4b1c              LDR      r3,|L130.3464|
000d18  4a1c              LDR      r2,|L130.3468|
000d1a  491d              LDR      r1,|L130.3472|
000d1c  9000              STR      r0,[sp,#0]
000d1e  4824              LDR      r0,|L130.3504|
000d20  f7fffffe          BL       send_GSM
;;;1706   								
;;;1707   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000d24  4817              LDR      r0,|L130.3460|
000d26  6800              LDR      r0,[r0,#0]  ; tmeout
000d28  4b17              LDR      r3,|L130.3464|
000d2a  4a18              LDR      r2,|L130.3468|
000d2c  4918              LDR      r1,|L130.3472|
000d2e  9000              STR      r0,[sp,#0]
000d30  4818              LDR      r0,|L130.3476|
000d32  f7fffffe          BL       send_GSM
000d36  e010              B        |L130.3418|
                  |L130.3384|
;;;1708   								
;;;1709   							}	
;;;1710   							else if(cond15)
000d38  482e              LDR      r0,|L130.3572|
000d3a  6800              LDR      r0,[r0,#0]  ; cond15
000d3c  2800              CMP      r0,#0
000d3e  d003              BEQ      |L130.3400|
;;;1711   							{
;;;1712   								send_message(ignstr);
000d40  482d              LDR      r0,|L130.3576|
000d42  f7fffffe          BL       send_message
000d46  e008              B        |L130.3418|
                  |L130.3400|
;;;1713   								
;;;1714   							}							
;;;1715   
;;;1716   							else
;;;1717   							{							
;;;1718   								send_GSM("\r\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000d48  480e              LDR      r0,|L130.3460|
000d4a  6800              LDR      r0,[r0,#0]  ; tmeout
000d4c  4b0e              LDR      r3,|L130.3464|
000d4e  4a0f              LDR      r2,|L130.3468|
000d50  490f              LDR      r1,|L130.3472|
000d52  9000              STR      r0,[sp,#0]
000d54  4829              LDR      r0,|L130.3580|
000d56  f7fffffe          BL       send_GSM
                  |L130.3418|
;;;1719   							}
;;;1720   
;;;1721   
;;;1722   		ringflag=0;
000d5a  2000              MOVS     r0,#0
000d5c  4928              LDR      r1,|L130.3584|
000d5e  7008              STRB     r0,[r1,#0]
;;;1723   clear();							
000d60  f7fffffe          BL       clear
;;;1724   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000d64  4807              LDR      r0,|L130.3460|
000d66  6800              LDR      r0,[r0,#0]  ; tmeout
000d68  4b07              LDR      r3,|L130.3464|
000d6a  4a14              LDR      r2,|L130.3516|
000d6c  4914              LDR      r1,|L130.3520|
000d6e  9000              STR      r0,[sp,#0]
000d70  4824              LDR      r0,|L130.3588|
000d72  f7fffffe          BL       send_GSM
;;;1725   delay(1000);					
000d76  207d              MOVS     r0,#0x7d
000d78  00c0              LSLS     r0,r0,#3
000d7a  f7fffffe          BL       delay
                  |L130.3454|
;;;1726   		}
;;;1727   		
;;;1728   }
000d7e  bd1f              POP      {r0-r4,pc}
                  |L130.3456|
                          DCD      uart_string_gsm
                  |L130.3460|
                          DCD      tmeout
                  |L130.3464|
                          DCD      ||.conststring||+0x10
                  |L130.3468|
                          DCD      ||.conststring||+0x18
                  |L130.3472|
                          DCD      ||.conststring||+0x70
                  |L130.3476|
                          DCD      ||.conststring||+0x3a4
                  |L130.3480|
                          DCD      cond1
                  |L130.3484|
                          DCD      cond13
                  |L130.3488|
                          DCD      0x400ff000
                  |L130.3492|
                          DCD      ||.conststring||+0x468
                  |L130.3496|
                          DCD      cond14
                  |L130.3500|
                          DCD      cond5
                  |L130.3504|
                          DCD      at_
                  |L130.3508|
                          DCD      num_o
                  |L130.3512|
                          DCD      ||.conststring||+0x480
                  |L130.3516|
                          DCD      ||.conststring||+0xe0
                  |L130.3520|
                          DCD      ||.conststring||+0x2c
                  |L130.3524|
                          DCD      ||.conststring||+0x494
                  |L130.3528|
                          DCD      ||.conststring||+0x4a4
                  |L130.3532|
                          DCD      ||.conststring||+0x4c4
                  |L130.3536|
                          DCD      cond6
                  |L130.3540|
                          DCD      ||.conststring||+0x4d8
                  |L130.3544|
                          DCD      ||.conststring||+0x4e8
                  |L130.3548|
                          DCD      cond7
                  |L130.3552|
                          DCD      ||.conststring||+0x508
                  |L130.3556|
                          DCD      ||.conststring||+0x518
                  |L130.3560|
                          DCD      cond11
                  |L130.3564|
                          DCD      ||.conststring||+0x538
                  |L130.3568|
                          DCD      ||.conststring||+0x548
                  |L130.3572|
                          DCD      cond15
                  |L130.3576|
                          DCD      ignstr
                  |L130.3580|
                          DCD      ||.conststring||+0x568
                  |L130.3584|
                          DCD      ringflag
                  |L130.3588|
                          DCD      ||.conststring||+0x414
                          ENDP


                          AREA ||i.GPS_COLLECT2||, COMGROUP=GPS_COLLECT2, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT2 PROC
;;;1232   
;;;1233   __inline void GPS_COLLECT2()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1234   {	
;;;1235   time52=15;	
000002  200f              MOVS     r0,#0xf
000004  49b0              LDR      r1,|L137.712|
000006  6008              STR      r0,[r1,#0]  ; time52
;;;1236   
;;;1237   //memset(imei,0,20);
;;;1238   //send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
;;;1239   //for(i=0;i<strlen(uart_string_gsm);i++){
;;;1240   //		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
;;;1241   //			imei[imeiinc] = uart_string_gsm[i];
;;;1242   //			imeiinc++;
;;;1243   //		}
;;;1244   //}
;;;1245   clear();	
000008  f7fffffe          BL       clear
;;;1246   
;;;1247   	
;;;1248   	
;;;1249   	adc_read(9);							
00000c  2009              MOVS     r0,#9
00000e  f7fffffe          BL       adc_read
;;;1250   	memset(fuelstr,0,5);
000012  2105              MOVS     r1,#5
000014  48ad              LDR      r0,|L137.716|
000016  f7fffffe          BL       __aeabi_memclr4
;;;1251   	sprintf(fuelstr,"%d,",fuel);
00001a  48ad              LDR      r0,|L137.720|
00001c  49ad              LDR      r1,|L137.724|
00001e  6802              LDR      r2,[r0,#0]  ; fuel
000020  48aa              LDR      r0,|L137.716|
000022  f7fffffe          BL       __2sprintf
;;;1252   
;;;1253   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
000026  48ac              LDR      r0,|L137.728|
000028  6800              LDR      r0,[r0,#0]  ; tmeout
00002a  4bac              LDR      r3,|L137.732|
00002c  4aac              LDR      r2,|L137.736|
00002e  49ad              LDR      r1,|L137.740|
000030  9000              STR      r0,[sp,#0]
000032  48ad              LDR      r0,|L137.744|
000034  f7fffffe          BL       send_GSM
;;;1254   	// not sleep	
;;;1255   	memset(num2,0,30);
000038  211e              MOVS     r1,#0x1e
00003a  48ac              LDR      r0,|L137.748|
00003c  f7fffffe          BL       __aeabi_memclr
;;;1256   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
000040  48aa              LDR      r0,|L137.748|
000042  210d              MOVS     r1,#0xd
000044  232c              MOVS     r3,#0x2c
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2102              MOVS     r1,#2
00004e  48a8              LDR      r0,|L137.752|
000050  f7fffffe          BL       parse_g
;;;1257   	voltagecbc=myAtoi(num2);	
000054  48a5              LDR      r0,|L137.748|
000056  f7fffffe          BL       myAtoi
00005a  49a6              LDR      r1,|L137.756|
00005c  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1258   
;;;1259   memset(ignstr,0,2);
00005e  48a6              LDR      r0,|L137.760|
000060  2100              MOVS     r1,#0
000062  7001              STRB     r1,[r0,#0]
000064  7041              STRB     r1,[r0,#1]
;;;1260   if(GPIOB_PDIR & 0x00000001){
000066  48a5              LDR      r0,|L137.764|
000068  6900              LDR      r0,[r0,#0x10]
00006a  07c0              LSLS     r0,r0,#31
00006c  0fc0              LSRS     r0,r0,#31
00006e  2800              CMP      r0,#0
000070  d005              BEQ      |L137.126|
;;;1261   			sprintf(ignstr,"%d",1);
000072  2201              MOVS     r2,#1
000074  49a2              LDR      r1,|L137.768|
000076  48a0              LDR      r0,|L137.760|
000078  f7fffffe          BL       __2sprintf
00007c  e004              B        |L137.136|
                  |L137.126|
;;;1262   }
;;;1263   else{
;;;1264   			sprintf(ignstr,"%d",0);
00007e  2200              MOVS     r2,#0
000080  499f              LDR      r1,|L137.768|
000082  489d              LDR      r0,|L137.760|
000084  f7fffffe          BL       __2sprintf
                  |L137.136|
;;;1265   
;;;1266   }
;;;1267   
;;;1268   memset(acstr,0,2); //ptb2
000088  489e              LDR      r0,|L137.772|
00008a  2100              MOVS     r1,#0
00008c  8001              STRH     r1,[r0,#0]
;;;1269   if(GPIOB_PDIR & 0x00000004){
00008e  489b              LDR      r0,|L137.764|
000090  6900              LDR      r0,[r0,#0x10]
000092  2104              MOVS     r1,#4
000094  4008              ANDS     r0,r0,r1
000096  2800              CMP      r0,#0
000098  d005              BEQ      |L137.166|
;;;1270   			sprintf(acstr,"%d",1);
00009a  2201              MOVS     r2,#1
00009c  4998              LDR      r1,|L137.768|
00009e  4899              LDR      r0,|L137.772|
0000a0  f7fffffe          BL       __2sprintf
0000a4  e004              B        |L137.176|
                  |L137.166|
;;;1271   }
;;;1272   else{
;;;1273   				sprintf(acstr,"%d",0);
0000a6  2200              MOVS     r2,#0
0000a8  4995              LDR      r1,|L137.768|
0000aa  4896              LDR      r0,|L137.772|
0000ac  f7fffffe          BL       __2sprintf
                  |L137.176|
;;;1274   
;;;1275   }
;;;1276   	
;;;1277   while(lpticks<int_erval);
0000b0  bf00              NOP      
                  |L137.178|
0000b2  4895              LDR      r0,|L137.776|
0000b4  6800              LDR      r0,[r0,#0]  ; lpticks
0000b6  4995              LDR      r1,|L137.780|
0000b8  6809              LDR      r1,[r1,#0]  ; int_erval
0000ba  4288              CMP      r0,r1
0000bc  dbf9              BLT      |L137.178|
;;;1278   get_gpsdata();
0000be  f7fffffe          BL       get_gpsdata
;;;1279   lpticks=0;
0000c2  2000              MOVS     r0,#0
0000c4  4990              LDR      r1,|L137.776|
0000c6  6008              STR      r0,[r1,#0]  ; lpticks
;;;1280   
;;;1281   parse_g(rmc, 3, 4, ',', ',' ,lati);
0000c8  4891              LDR      r0,|L137.784|
0000ca  212c              MOVS     r1,#0x2c
0000cc  460b              MOV      r3,r1
0000ce  2204              MOVS     r2,#4
0000d0  9100              STR      r1,[sp,#0]
0000d2  9001              STR      r0,[sp,#4]
0000d4  2103              MOVS     r1,#3
0000d6  488f              LDR      r0,|L137.788|
0000d8  f7fffffe          BL       parse_g
;;;1282   parse_g(rmc, 5, 6, ',', ',' ,longi);
0000dc  488e              LDR      r0,|L137.792|
0000de  212c              MOVS     r1,#0x2c
0000e0  460b              MOV      r3,r1
0000e2  2206              MOVS     r2,#6
0000e4  9100              STR      r1,[sp,#0]
0000e6  9001              STR      r0,[sp,#4]
0000e8  2105              MOVS     r1,#5
0000ea  488a              LDR      r0,|L137.788|
0000ec  f7fffffe          BL       parse_g
;;;1283   parse_g(rmc, 7, 8, ',', ',' ,velocity);
0000f0  488a              LDR      r0,|L137.796|
0000f2  212c              MOVS     r1,#0x2c
0000f4  460b              MOV      r3,r1
0000f6  2208              MOVS     r2,#8
0000f8  9100              STR      r1,[sp,#0]
0000fa  9001              STR      r0,[sp,#4]
0000fc  2107              MOVS     r1,#7
0000fe  4885              LDR      r0,|L137.788|
000100  f7fffffe          BL       parse_g
;;;1284   		
;;;1285   		speed = stof(velocity);
000104  4885              LDR      r0,|L137.796|
000106  f7fffffe          BL       stof
00010a  4985              LDR      r1,|L137.800|
00010c  6008              STR      r0,[r1,#0]  ; speed
;;;1286   		c=stof(lati);//7523.7412
00010e  4880              LDR      r0,|L137.784|
000110  f7fffffe          BL       stof
000114  4604              MOV      r4,r0
000116  f7fffffe          BL       __aeabi_f2d
00011a  4a82              LDR      r2,|L137.804|
00011c  c203              STM      r2!,{r0,r1}
;;;1287   		hh= c/100; //75
00011e  2200              MOVS     r2,#0
000120  4b81              LDR      r3,|L137.808|
000122  4980              LDR      r1,|L137.804|
000124  c903              LDM      r1,{r0,r1}
000126  f7fffffe          BL       __aeabi_ddiv
00012a  4604              MOV      r4,r0
00012c  f7fffffe          BL       __aeabi_d2iz
000130  497e              LDR      r1,|L137.812|
000132  6008              STR      r0,[r1,#0]  ; hh
;;;1288   		hh11 = c/100; //75.237412
000134  2200              MOVS     r2,#0
000136  4b7c              LDR      r3,|L137.808|
000138  497a              LDR      r1,|L137.804|
00013a  c903              LDM      r1,{r0,r1}
00013c  f7fffffe          BL       __aeabi_ddiv
000140  4a7b              LDR      r2,|L137.816|
000142  c203              STM      r2!,{r0,r1}
;;;1289   		mm11 = hh11-hh; //.237412
000144  4879              LDR      r0,|L137.812|
000146  6800              LDR      r0,[r0,#0]  ; hh
000148  f7fffffe          BL       __aeabi_i2d
00014c  4604              MOV      r4,r0
00014e  4878              LDR      r0,|L137.816|
000150  c80c              LDM      r0!,{r2,r3}
000152  4620              MOV      r0,r4
000154  f7fffffe          BL       __aeabi_drsub
000158  4a76              LDR      r2,|L137.820|
00015a  c203              STM      r2!,{r0,r1}
;;;1290   		mm11*=100;
00015c  2200              MOVS     r2,#0
00015e  4b72              LDR      r3,|L137.808|
000160  4974              LDR      r1,|L137.820|
000162  c903              LDM      r1,{r0,r1}
000164  f7fffffe          BL       __aeabi_dmul
000168  4a72              LDR      r2,|L137.820|
00016a  c203              STM      r2!,{r0,r1}
;;;1291   		mm22=hh+mm11/60;	
00016c  2200              MOVS     r2,#0
00016e  4b72              LDR      r3,|L137.824|
000170  4970              LDR      r1,|L137.820|
000172  c903              LDM      r1,{r0,r1}
000174  f7fffffe          BL       __aeabi_ddiv
000178  4604              MOV      r4,r0
00017a  460d              MOV      r5,r1
00017c  486b              LDR      r0,|L137.812|
00017e  6800              LDR      r0,[r0,#0]  ; hh
000180  f7fffffe          BL       __aeabi_i2d
000184  4606              MOV      r6,r0
000186  4622              MOV      r2,r4
000188  462b              MOV      r3,r5
00018a  f7fffffe          BL       __aeabi_dadd
00018e  4a6b              LDR      r2,|L137.828|
000190  c203              STM      r2!,{r0,r1}
;;;1292   		memset(lati,0,15);
000192  210f              MOVS     r1,#0xf
000194  485e              LDR      r0,|L137.784|
000196  f7fffffe          BL       __aeabi_memclr
;;;1293   		sprintf(lati,"%f",mm22);
00019a  4868              LDR      r0,|L137.828|
00019c  4968              LDR      r1,|L137.832|
00019e  c80c              LDM      r0!,{r2,r3}
0001a0  485b              LDR      r0,|L137.784|
0001a2  f7fffffe          BL       __2sprintf
;;;1294   		c=stof(longi);//7523.7412
0001a6  485c              LDR      r0,|L137.792|
0001a8  f7fffffe          BL       stof
0001ac  4604              MOV      r4,r0
0001ae  f7fffffe          BL       __aeabi_f2d
0001b2  4a5c              LDR      r2,|L137.804|
0001b4  c203              STM      r2!,{r0,r1}
;;;1295   		hh= c/100; //75
0001b6  2200              MOVS     r2,#0
0001b8  4b5b              LDR      r3,|L137.808|
0001ba  495a              LDR      r1,|L137.804|
0001bc  c903              LDM      r1,{r0,r1}
0001be  f7fffffe          BL       __aeabi_ddiv
0001c2  4604              MOV      r4,r0
0001c4  f7fffffe          BL       __aeabi_d2iz
0001c8  4958              LDR      r1,|L137.812|
0001ca  6008              STR      r0,[r1,#0]  ; hh
;;;1296   		hh11 = c/100; //75.237412
0001cc  2200              MOVS     r2,#0
0001ce  4b56              LDR      r3,|L137.808|
0001d0  4954              LDR      r1,|L137.804|
0001d2  c903              LDM      r1,{r0,r1}
0001d4  f7fffffe          BL       __aeabi_ddiv
0001d8  4a55              LDR      r2,|L137.816|
0001da  c203              STM      r2!,{r0,r1}
;;;1297   		mm11 = hh11-hh; //.237412
0001dc  4853              LDR      r0,|L137.812|
0001de  6800              LDR      r0,[r0,#0]  ; hh
0001e0  f7fffffe          BL       __aeabi_i2d
0001e4  4604              MOV      r4,r0
0001e6  4852              LDR      r0,|L137.816|
0001e8  c80c              LDM      r0!,{r2,r3}
0001ea  4620              MOV      r0,r4
0001ec  f7fffffe          BL       __aeabi_drsub
0001f0  4a50              LDR      r2,|L137.820|
0001f2  c203              STM      r2!,{r0,r1}
;;;1298   		mm11*=100;
0001f4  2200              MOVS     r2,#0
0001f6  4b4c              LDR      r3,|L137.808|
0001f8  494e              LDR      r1,|L137.820|
0001fa  c903              LDM      r1,{r0,r1}
0001fc  f7fffffe          BL       __aeabi_dmul
000200  4a4c              LDR      r2,|L137.820|
000202  c203              STM      r2!,{r0,r1}
;;;1299   		mm22=hh+mm11/60;	
000204  2200              MOVS     r2,#0
000206  4b4c              LDR      r3,|L137.824|
000208  494a              LDR      r1,|L137.820|
00020a  c903              LDM      r1,{r0,r1}
00020c  f7fffffe          BL       __aeabi_ddiv
000210  4604              MOV      r4,r0
000212  460d              MOV      r5,r1
000214  4845              LDR      r0,|L137.812|
000216  6800              LDR      r0,[r0,#0]  ; hh
000218  f7fffffe          BL       __aeabi_i2d
00021c  4606              MOV      r6,r0
00021e  4622              MOV      r2,r4
000220  462b              MOV      r3,r5
000222  f7fffffe          BL       __aeabi_dadd
000226  4a45              LDR      r2,|L137.828|
000228  c203              STM      r2!,{r0,r1}
;;;1300   		memset(longi,0,15);
00022a  210f              MOVS     r1,#0xf
00022c  483a              LDR      r0,|L137.792|
00022e  f7fffffe          BL       __aeabi_memclr
;;;1301   		sprintf(longi,"%f",mm22);	
000232  4842              LDR      r0,|L137.828|
000234  4942              LDR      r1,|L137.832|
000236  c80c              LDM      r0!,{r2,r3}
000238  4837              LDR      r0,|L137.792|
00023a  f7fffffe          BL       __2sprintf
;;;1302   		strcat(data,imei);
00023e  4941              LDR      r1,|L137.836|
000240  4841              LDR      r0,|L137.840|
000242  f7fffffe          BL       strcat
;;;1303   		strcat(data,", ");	
000246  4941              LDR      r1,|L137.844|
000248  483f              LDR      r0,|L137.840|
00024a  f7fffffe          BL       strcat
;;;1304   		strcat(data,"$GxGGA");	
00024e  4940              LDR      r1,|L137.848|
000250  483d              LDR      r0,|L137.840|
000252  f7fffffe          BL       strcat
;;;1305   		strcat(data,gga);
000256  493f              LDR      r1,|L137.852|
000258  483b              LDR      r0,|L137.840|
00025a  f7fffffe          BL       strcat
;;;1306   		strcat(data,", $GxRMC");	
00025e  493e              LDR      r1,|L137.856|
000260  4839              LDR      r0,|L137.840|
000262  f7fffffe          BL       strcat
;;;1307   		strcat(data,rmc);	
000266  492b              LDR      r1,|L137.788|
000268  4837              LDR      r0,|L137.840|
00026a  f7fffffe          BL       strcat
;;;1308   		strcat(data,",");	
00026e  493b              LDR      r1,|L137.860|
000270  4835              LDR      r0,|L137.840|
000272  f7fffffe          BL       strcat
;;;1309   		strcat(data,num2);
000276  491d              LDR      r1,|L137.748|
000278  4833              LDR      r0,|L137.840|
00027a  f7fffffe          BL       strcat
;;;1310   		strcat(data,",F=");	
00027e  4938              LDR      r1,|L137.864|
000280  4831              LDR      r0,|L137.840|
000282  f7fffffe          BL       strcat
;;;1311   		strcat(data,fuelstr);
000286  4911              LDR      r1,|L137.716|
000288  482f              LDR      r0,|L137.840|
00028a  f7fffffe          BL       strcat
;;;1312   		strcat(data,",AC=");	
00028e  4935              LDR      r1,|L137.868|
000290  482d              LDR      r0,|L137.840|
000292  f7fffffe          BL       strcat
;;;1313   		strcat(data,acstr);
000296  491b              LDR      r1,|L137.772|
000298  482b              LDR      r0,|L137.840|
00029a  f7fffffe          BL       strcat
;;;1314   		strcat(data,",I=");	
00029e  4932              LDR      r1,|L137.872|
0002a0  4829              LDR      r0,|L137.840|
0002a2  f7fffffe          BL       strcat
;;;1315   		strcat(data,ignstr);		
0002a6  4914              LDR      r1,|L137.760|
0002a8  4827              LDR      r0,|L137.840|
0002aa  f7fffffe          BL       strcat
;;;1316   		if(!(GPIOC_PDIR & 0x00000001)){
0002ae  4813              LDR      r0,|L137.764|
0002b0  3040              ADDS     r0,r0,#0x40
0002b2  6900              LDR      r0,[r0,#0x10]
0002b4  07c0              LSLS     r0,r0,#31
0002b6  0fc0              LSRS     r0,r0,#31
0002b8  2800              CMP      r0,#0
0002ba  d003              BEQ      |L137.708|
;;;1317   		}
;;;1318   		else{strcat(data,",BR*");}
0002bc  492b              LDR      r1,|L137.876|
0002be  4822              LDR      r0,|L137.840|
0002c0  f7fffffe          BL       strcat
                  |L137.708|
;;;1319   //return 0;
;;;1320   }
0002c4  bdfe              POP      {r1-r7,pc}
;;;1321   
                          ENDP

0002c6  0000              DCW      0x0000
                  |L137.712|
                          DCD      time52
                  |L137.716|
                          DCD      fuelstr
                  |L137.720|
                          DCD      fuel
                  |L137.724|
                          DCD      ||.conststring||+0x130
                  |L137.728|
                          DCD      tmeout
                  |L137.732|
                          DCD      ||.conststring||+0x10
                  |L137.736|
                          DCD      ||.conststring||+0xe0
                  |L137.740|
                          DCD      ||.conststring||+0x2c
                  |L137.744|
                          DCD      ||.conststring||+0x100
                  |L137.748|
                          DCD      num2
                  |L137.752|
                          DCD      uart_string_gsm
                  |L137.756|
                          DCD      voltagecbc
                  |L137.760|
                          DCD      ignstr
                  |L137.764|
                          DCD      0x400ff040
                  |L137.768|
                          DCD      ||.conststring||+0x110
                  |L137.772|
                          DCD      acstr
                  |L137.776|
                          DCD      lpticks
                  |L137.780|
                          DCD      int_erval
                  |L137.784|
                          DCD      lati
                  |L137.788|
                          DCD      ||rmc||
                  |L137.792|
                          DCD      longi
                  |L137.796|
                          DCD      velocity
                  |L137.800|
                          DCD      speed
                  |L137.804|
                          DCD      c
                  |L137.808|
                          DCD      0x40590000
                  |L137.812|
                          DCD      ||hh||
                  |L137.816|
                          DCD      hh11
                  |L137.820|
                          DCD      mm11
                  |L137.824|
                          DCD      0x404e0000
                  |L137.828|
                          DCD      mm22
                  |L137.832|
                          DCD      ||.conststring||+0x114
                  |L137.836|
                          DCD      imei
                  |L137.840|
                          DCD      data
                  |L137.844|
                          DCD      ||.conststring||+0x57c
                  |L137.848|
                          DCD      ||.conststring||+0x11c
                  |L137.852|
                          DCD      gga
                  |L137.856|
                          DCD      ||.conststring||+0x580
                  |L137.860|
                          DCD      ||.conststring||+0x118
                  |L137.864|
                          DCD      ||.conststring||+0x12c
                  |L137.868|
                          DCD      ||.conststring||+0x134
                  |L137.872|
                          DCD      ||.conststring||+0x13c
                  |L137.876|
                          DCD      ||.conststring||+0x140

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;70     
;;;71     __inline void remove_all_chars(char* str, char c, char d) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;72         char *pr = str, *pw = str;
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
;;;73         while (*pr) {
00000a  e015              B        |L144.56|
                  |L144.12|
;;;74             *pw = *pr++;
00000c  780d              LDRB     r5,[r1,#0]
00000e  7005              STRB     r5,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
;;;75     			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
000012  7805              LDRB     r5,[r0,#0]
000014  42a5              CMP      r5,r4
000016  d00d              BEQ      |L144.52|
000018  7805              LDRB     r5,[r0,#0]
00001a  4295              CMP      r5,r2
00001c  d00a              BEQ      |L144.52|
00001e  7805              LDRB     r5,[r0,#0]
000020  2d20              CMP      r5,#0x20
000022  d007              BEQ      |L144.52|
000024  7805              LDRB     r5,[r0,#0]
000026  2d2f              CMP      r5,#0x2f
000028  d004              BEQ      |L144.52|
00002a  7805              LDRB     r5,[r0,#0]
00002c  2d3a              CMP      r5,#0x3a
00002e  d001              BEQ      |L144.52|
000030  2501              MOVS     r5,#1
000032  e000              B        |L144.54|
                  |L144.52|
000034  2500              MOVS     r5,#0
                  |L144.54|
000036  1828              ADDS     r0,r5,r0
                  |L144.56|
000038  780d              LDRB     r5,[r1,#0]            ;73
00003a  2d00              CMP      r5,#0                 ;73
00003c  d1e6              BNE      |L144.12|
;;;76         }
;;;77         *pw = '\0';
00003e  7005              STRB     r5,[r0,#0]
;;;78     }
000040  bd30              POP      {r4,r5,pc}
;;;79     
                          ENDP


                          AREA ||i.send_chunk||, COMGROUP=send_chunk, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_chunk PROC
;;;1765   
;;;1766   __inline void  send_chunk(){
000000  b57c              PUSH     {r2-r6,lr}
;;;1767   fsz=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L151.1024|
000006  6008              STR      r0,[r1,#0]  ; fsz
;;;1768   times=-2;	
000008  1e80              SUBS     r0,r0,#2
00000a  49fe              LDR      r1,|L151.1028|
00000c  6008              STR      r0,[r1,#0]  ; times
;;;1769   	
;;;1770   
;;;1771   temp=int_erval;				
00000e  48fe              LDR      r0,|L151.1032|
000010  6800              LDR      r0,[r0,#0]  ; int_erval
000012  49fe              LDR      r1,|L151.1036|
000014  6008              STR      r0,[r1,#0]  ; temp
;;;1772   int_erval=1;
000016  2001              MOVS     r0,#1
000018  49fb              LDR      r1,|L151.1032|
00001a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1773   
;;;1774   	
;;;1775   memset(at_,0,100);
00001c  2164              MOVS     r1,#0x64
00001e  48fc              LDR      r0,|L151.1040|
000020  f7fffffe          BL       __aeabi_memclr
;;;1776   sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
000024  4afb              LDR      r2,|L151.1044|
000026  49fc              LDR      r1,|L151.1048|
000028  48f9              LDR      r0,|L151.1040|
00002a  f7fffffe          BL       __2sprintf
;;;1777   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00002e  48fb              LDR      r0,|L151.1052|
000030  6800              LDR      r0,[r0,#0]  ; tmeout
000032  4bfb              LDR      r3,|L151.1056|
000034  4afb              LDR      r2,|L151.1060|
000036  49fc              LDR      r1,|L151.1064|
000038  9000              STR      r0,[sp,#0]
00003a  48f5              LDR      r0,|L151.1040|
00003c  f7fffffe          BL       send_GSM
;;;1778   parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
000040  48fa              LDR      r0,|L151.1068|
000042  210d              MOVS     r1,#0xd
000044  2320              MOVS     r3,#0x20
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2101              MOVS     r1,#1
00004e  48f8              LDR      r0,|L151.1072|
000050  f7fffffe          BL       parse_g
;;;1779   fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
000054  48f5              LDR      r0,|L151.1068|
000056  f7fffffe          BL       stof
00005a  49e9              LDR      r1,|L151.1024|
00005c  6008              STR      r0,[r1,#0]  ; fsz
;;;1780   //reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1781   	
;;;1782   times =	(fsz/900) + 2;
00005e  49f5              LDR      r1,|L151.1076|
000060  48e7              LDR      r0,|L151.1024|
000062  6800              LDR      r0,[r0,#0]  ; fsz
000064  f7fffffe          BL       __aeabi_fdiv
000068  4605              MOV      r5,r0
00006a  2101              MOVS     r1,#1
00006c  0789              LSLS     r1,r1,#30
00006e  f7fffffe          BL       __aeabi_fadd
000072  4604              MOV      r4,r0
000074  f7fffffe          BL       __aeabi_f2iz
000078  49e2              LDR      r1,|L151.1028|
00007a  6008              STR      r0,[r1,#0]  ; times
;;;1783   for(;k5<=(times);){
00007c  e3fd              B        |L151.2170|
                  |L151.126|
;;;1784   if(fsz==0){log0=1;break;}
00007e  2100              MOVS     r1,#0
000080  48df              LDR      r0,|L151.1024|
000082  6800              LDR      r0,[r0,#0]  ; fsz
000084  f7fffffe          BL       __aeabi_cfcmpeq
000088  d103              BNE      |L151.146|
00008a  2001              MOVS     r0,#1
00008c  49ea              LDR      r1,|L151.1080|
00008e  6008              STR      r0,[r1,#0]  ; log0
000090  e3f4              B        |L151.2172|
                  |L151.146|
;;;1785   else log0=0;
000092  2000              MOVS     r0,#0
000094  49e8              LDR      r1,|L151.1080|
000096  6008              STR      r0,[r1,#0]  ; log0
;;;1786   
;;;1787   	RESET_ON;
000098  2020              MOVS     r0,#0x20
00009a  49e8              LDR      r1,|L151.1084|
00009c  6048              STR      r0,[r1,#4]
;;;1788   	DTR_OFF;
00009e  2080              MOVS     r0,#0x80
0000a0  49e6              LDR      r1,|L151.1084|
0000a2  3140              ADDS     r1,r1,#0x40
0000a4  6088              STR      r0,[r1,#8]
;;;1789   	
;;;1790   msg_sim800(); 
0000a6  f7fffffe          BL       msg_sim800
;;;1791   
;;;1792   memset(data,0,strlen(data));	
0000aa  48e5              LDR      r0,|L151.1088|
0000ac  f7fffffe          BL       strlen
0000b0  4604              MOV      r4,r0
0000b2  4621              MOV      r1,r4
0000b4  48e2              LDR      r0,|L151.1088|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;1793   strcat(data,"\n");	
0000ba  49e2              LDR      r1,|L151.1092|
0000bc  48e0              LDR      r0,|L151.1088|
0000be  f7fffffe          BL       strcat
;;;1794   	
;;;1795   	
;;;1796   	memset(at_,0,100);
0000c2  2164              MOVS     r1,#0x64
0000c4  48d2              LDR      r0,|L151.1040|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1797   	sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);
0000ca  4ad2              LDR      r2,|L151.1044|
0000cc  49d2              LDR      r1,|L151.1048|
0000ce  48d0              LDR      r0,|L151.1040|
0000d0  f7fffffe          BL       __2sprintf
;;;1798   GPS_COLLECT();
0000d4  f7fffffe          BL       GPS_COLLECT
;;;1799   
;;;1800   	
;;;1801   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
0000d8  48d0              LDR      r0,|L151.1052|
0000da  6800              LDR      r0,[r0,#0]  ; tmeout
0000dc  4bd0              LDR      r3,|L151.1056|
0000de  4ad1              LDR      r2,|L151.1060|
0000e0  49d1              LDR      r1,|L151.1064|
0000e2  9000              STR      r0,[sp,#0]
0000e4  48ca              LDR      r0,|L151.1040|
0000e6  f7fffffe          BL       send_GSM
;;;1802   	parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
0000ea  48d0              LDR      r0,|L151.1068|
0000ec  210d              MOVS     r1,#0xd
0000ee  2320              MOVS     r3,#0x20
0000f0  2205              MOVS     r2,#5
0000f2  9100              STR      r1,[sp,#0]
0000f4  9001              STR      r0,[sp,#4]
0000f6  2101              MOVS     r1,#1
0000f8  48cd              LDR      r0,|L151.1072|
0000fa  f7fffffe          BL       parse_g
;;;1803   	fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
0000fe  48cb              LDR      r0,|L151.1068|
000100  f7fffffe          BL       stof
000104  49be              LDR      r1,|L151.1024|
000106  6008              STR      r0,[r1,#0]  ; fsz
;;;1804   	//reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1805   	times =	(fsz/900) + 1;	
000108  49ca              LDR      r1,|L151.1076|
00010a  48bd              LDR      r0,|L151.1024|
00010c  6800              LDR      r0,[r0,#0]  ; fsz
00010e  f7fffffe          BL       __aeabi_fdiv
000112  4605              MOV      r5,r0
000114  217f              MOVS     r1,#0x7f
000116  05c9              LSLS     r1,r1,#23
000118  f7fffffe          BL       __aeabi_fadd
00011c  4604              MOV      r4,r0
00011e  f7fffffe          BL       __aeabi_f2iz
000122  49b8              LDR      r1,|L151.1028|
000124  6008              STR      r0,[r1,#0]  ; times
;;;1806   	
;;;1807   	
;;;1808   memset(at_,0,100);
000126  2164              MOVS     r1,#0x64
000128  48b9              LDR      r0,|L151.1040|
00012a  f7fffffe          BL       __aeabi_memclr
;;;1809   sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>          \r\n\r\n",times,k5,rtcticks2);							
00012e  48c6              LDR      r0,|L151.1096|
000130  6800              LDR      r0,[r0,#0]  ; rtcticks2
000132  9000              STR      r0,[sp,#0]
000134  48c5              LDR      r0,|L151.1100|
000136  6803              LDR      r3,[r0,#0]  ; k5
000138  48b2              LDR      r0,|L151.1028|
00013a  49c5              LDR      r1,|L151.1104|
00013c  6802              LDR      r2,[r0,#0]  ; times
00013e  48b4              LDR      r0,|L151.1040|
000140  f7fffffe          BL       __2sprintf
;;;1810   send_modem(at_);
000144  48b2              LDR      r0,|L151.1040|
000146  f7fffffe          BL       send_modem
;;;1811   clear();
00014a  f7fffffe          BL       clear
;;;1812   	
;;;1813   	
;;;1814   		sprintf(at_, "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",drive,cursorvaluepr );		//1256
00014e  48c1              LDR      r0,|L151.1108|
000150  4ab0              LDR      r2,|L151.1044|
000152  49c1              LDR      r1,|L151.1112|
000154  6803              LDR      r3,[r0,#0]  ; cursorvaluepr
000156  48ae              LDR      r0,|L151.1040|
000158  f7fffffe          BL       __2sprintf
;;;1815   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",5);
00015c  2005              MOVS     r0,#5
00015e  4bb0              LDR      r3,|L151.1056|
000160  4ab0              LDR      r2,|L151.1060|
000162  49b1              LDR      r1,|L151.1064|
000164  9000              STR      r0,[sp,#0]
000166  48aa              LDR      r0,|L151.1040|
000168  f7fffffe          BL       send_GSM
;;;1816   			if(strstr(uart_string_gsm,"ERROR")){
00016c  49bb              LDR      r1,|L151.1116|
00016e  48b0              LDR      r0,|L151.1072|
000170  f7fffffe          BL       strstr
000174  2800              CMP      r0,#0
000176  d00b              BEQ      |L151.400|
;;;1817   				RESET_OFF;
000178  2020              MOVS     r0,#0x20
00017a  49b0              LDR      r1,|L151.1084|
00017c  6088              STR      r0,[r1,#8]
;;;1818   				delay(50);
00017e  2032              MOVS     r0,#0x32
000180  f7fffffe          BL       delay
;;;1819   				RESET_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L151.1084|
000188  6048              STR      r0,[r1,#4]
;;;1820   				delay(50);
00018a  2032              MOVS     r0,#0x32
00018c  f7fffffe          BL       delay
                  |L151.400|
;;;1821   			}
;;;1822   		cntendl=count_char('\n',uart_string_gsm);
000190  49a7              LDR      r1,|L151.1072|
000192  200a              MOVS     r0,#0xa
000194  f7fffffe          BL       count_char
000198  49b1              LDR      r1,|L151.1120|
00019a  6008              STR      r0,[r1,#0]  ; cntendl
;;;1823      //if(cntendl!=0)
;;;1824   		enters = cntendl;		
00019c  4608              MOV      r0,r1
00019e  6800              LDR      r0,[r0,#0]  ; cntendl
0001a0  49b0              LDR      r1,|L151.1124|
0001a2  6008              STR      r0,[r1,#0]  ; enters
;;;1825   		memset(sd_data,0,1400);
0001a4  21af              MOVS     r1,#0xaf
0001a6  00c9              LSLS     r1,r1,#3
0001a8  48af              LDR      r0,|L151.1128|
0001aa  f7fffffe          BL       __aeabi_memclr
;;;1826   		parse_g(uart_string_gsm, 1,enters-2, '\n', '\n' ,sd_data);	
0001ae  48ae              LDR      r0,|L151.1128|
0001b0  210a              MOVS     r1,#0xa
0001b2  9100              STR      r1,[sp,#0]
0001b4  9001              STR      r0,[sp,#4]
0001b6  48ab              LDR      r0,|L151.1124|
0001b8  6800              LDR      r0,[r0,#0]  ; enters
0001ba  1e82              SUBS     r2,r0,#2
0001bc  460b              MOV      r3,r1
0001be  2101              MOVS     r1,#1
0001c0  489b              LDR      r0,|L151.1072|
0001c2  f7fffffe          BL       parse_g
;;;1827   		strcat(sd_data,"\n");
0001c6  499f              LDR      r1,|L151.1092|
0001c8  48a7              LDR      r0,|L151.1128|
0001ca  f7fffffe          BL       strcat
;;;1828   		strcat(sd_data,data);
0001ce  499c              LDR      r1,|L151.1088|
0001d0  48a5              LDR      r0,|L151.1128|
0001d2  f7fffffe          BL       strcat
;;;1829   		if(strstr(sd_data,"SEND OK")    ||   strstr(sd_data,"ERROR") || strstr(sd_data,"FAIL")  ||  strstr(sd_data,"DEACT"))	{
0001d6  49a5              LDR      r1,|L151.1132|
0001d8  48a3              LDR      r0,|L151.1128|
0001da  f7fffffe          BL       strstr
0001de  2800              CMP      r0,#0
0001e0  d111              BNE      |L151.518|
0001e2  499e              LDR      r1,|L151.1116|
0001e4  48a0              LDR      r0,|L151.1128|
0001e6  f7fffffe          BL       strstr
0001ea  2800              CMP      r0,#0
0001ec  d10b              BNE      |L151.518|
0001ee  49a0              LDR      r1,|L151.1136|
0001f0  489d              LDR      r0,|L151.1128|
0001f2  f7fffffe          BL       strstr
0001f6  2800              CMP      r0,#0
0001f8  d105              BNE      |L151.518|
0001fa  499e              LDR      r1,|L151.1140|
0001fc  489a              LDR      r0,|L151.1128|
0001fe  f7fffffe          BL       strstr
000202  2800              CMP      r0,#0
000204  d008              BEQ      |L151.536|
                  |L151.518|
;;;1830   		memset(exception,0,200);	
000206  21c8              MOVS     r1,#0xc8
000208  489b              LDR      r0,|L151.1144|
00020a  f7fffffe          BL       __aeabi_memclr
;;;1831   		strcat(exception,"exception : COMPARED RESPONCES IN THE DATA\n\n\n\n");	
00020e  499b              LDR      r1,|L151.1148|
000210  4899              LDR      r0,|L151.1144|
000212  f7fffffe          BL       strcat
000216  e003              B        |L151.544|
                  |L151.536|
;;;1832   		}
;;;1833   		else{memset(exception,0,200);}
000218  21c8              MOVS     r1,#0xc8
00021a  4897              LDR      r0,|L151.1144|
00021c  f7fffffe          BL       __aeabi_memclr
                  |L151.544|
;;;1834   
;;;1835   	
;;;1836   		qwe=strlen(uart_string_gsm);
000220  4883              LDR      r0,|L151.1072|
000222  f7fffffe          BL       strlen
000226  4996              LDR      r1,|L151.1152|
000228  6008              STR      r0,[r1,#0]  ; qwe
;;;1837   		memset(uart_string_gsm,0,qwe);
00022a  4608              MOV      r0,r1
00022c  6801              LDR      r1,[r0,#0]  ; qwe
00022e  4880              LDR      r0,|L151.1072|
000230  f7fffffe          BL       __aeabi_memclr
;;;1838   		
;;;1839   
;;;1840   	
;;;1841   		
;;;1842   		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT",tmeout);	
000234  4879              LDR      r0,|L151.1052|
000236  6800              LDR      r0,[r0,#0]  ; tmeout
000238  4b92              LDR      r3,|L151.1156|
00023a  4a88              LDR      r2,|L151.1116|
00023c  4992              LDR      r1,|L151.1160|
00023e  9000              STR      r0,[sp,#0]
000240  4892              LDR      r0,|L151.1164|
000242  f7fffffe          BL       send_GSM
;;;1843   								cond =mystrstr(uart_string_gsm,'>');
000246  213e              MOVS     r1,#0x3e
000248  4879              LDR      r0,|L151.1072|
00024a  f7fffffe          BL       mystrstr
00024e  4990              LDR      r1,|L151.1168|
000250  7008              STRB     r0,[r1,#0]
;;;1844   									if(cond)	
000252  4608              MOV      r0,r1
000254  7800              LDRB     r0,[r0,#0]  ; cond
000256  2800              CMP      r0,#0
000258  d101              BNE      |L151.606|
00025a  f001f801          BL       |L151.4704|
                  |L151.606|
;;;1845   									{	
;;;1846   									clear();
00025e  f7fffffe          BL       clear
;;;1847   									memset(uart_string_gsm,0,5000);
000262  498c              LDR      r1,|L151.1172|
000264  4872              LDR      r0,|L151.1072|
000266  f7fffffe          BL       __aeabi_memclr
;;;1848   									if(strlen(exception) > 5){
00026a  4883              LDR      r0,|L151.1144|
00026c  f7fffffe          BL       strlen
000270  2805              CMP      r0,#5
000272  d905              BLS      |L151.640|
;;;1849   									qwe=strlen(exception);
000274  4880              LDR      r0,|L151.1144|
000276  f7fffffe          BL       strlen
00027a  4981              LDR      r1,|L151.1152|
00027c  6008              STR      r0,[r1,#0]  ; qwe
00027e  e004              B        |L151.650|
                  |L151.640|
;;;1850   									}
;;;1851   									else{										
;;;1852   									qwe=strlen(sd_data);
000280  4879              LDR      r0,|L151.1128|
000282  f7fffffe          BL       strlen
000286  497e              LDR      r1,|L151.1152|
000288  6008              STR      r0,[r1,#0]  ; qwe
                  |L151.650|
;;;1853   									}										
;;;1854   									tout=0;
00028a  2000              MOVS     r0,#0
00028c  4982              LDR      r1,|L151.1176|
00028e  6008              STR      r0,[r1,#0]  ; tout
;;;1855   									k2=0;
000290  4982              LDR      r1,|L151.1180|
000292  6008              STR      r0,[r1,#0]  ; k2
;;;1856   									for(k=0;k<(qwe);k++)
000294  4982              LDR      r1,|L151.1184|
000296  6008              STR      r0,[r1,#0]  ; k
000298  e018              B        |L151.716|
                  |L151.666|
;;;1857   									{
;;;1858   										if(strlen(exception) > 5){
00029a  4877              LDR      r0,|L151.1144|
00029c  f7fffffe          BL       strlen
0002a0  2805              CMP      r0,#5
0002a2  d907              BLS      |L151.692|
;;;1859   										uart_putchar(UART1_BASE_PTR, exception[k]);	
0002a4  4874              LDR      r0,|L151.1144|
0002a6  4a7e              LDR      r2,|L151.1184|
0002a8  6812              LDR      r2,[r2,#0]  ; k
0002aa  5c81              LDRB     r1,[r0,r2]
0002ac  487d              LDR      r0,|L151.1188|
0002ae  f7fffffe          BL       uart_putchar
0002b2  e006              B        |L151.706|
                  |L151.692|
;;;1860   										}
;;;1861   										else{										
;;;1862   										uart_putchar(UART1_BASE_PTR, sd_data[k]);
0002b4  486c              LDR      r0,|L151.1128|
0002b6  4a7a              LDR      r2,|L151.1184|
0002b8  6812              LDR      r2,[r2,#0]  ; k
0002ba  5c81              LDRB     r1,[r0,r2]
0002bc  4879              LDR      r0,|L151.1188|
0002be  f7fffffe          BL       uart_putchar
                  |L151.706|
0002c2  4877              LDR      r0,|L151.1184|
0002c4  6800              LDR      r0,[r0,#0]            ;1856  ; k
0002c6  1c40              ADDS     r0,r0,#1              ;1856
0002c8  4975              LDR      r1,|L151.1184|
0002ca  6008              STR      r0,[r1,#0]            ;1856  ; k
                  |L151.716|
0002cc  4874              LDR      r0,|L151.1184|
0002ce  6800              LDR      r0,[r0,#0]            ;1856  ; k
0002d0  496b              LDR      r1,|L151.1152|
0002d2  6809              LDR      r1,[r1,#0]            ;1856  ; qwe
0002d4  4288              CMP      r0,r1                 ;1856
0002d6  dbe0              BLT      |L151.666|
;;;1863   										}
;;;1864   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
0002d8  210a              MOVS     r1,#0xa
0002da  4872              LDR      r0,|L151.1188|
0002dc  f7fffffe          BL       uart_putchar
0002e0  211a              MOVS     r1,#0x1a
0002e2  4870              LDR      r0,|L151.1188|
0002e4  f7fffffe          BL       uart_putchar
0002e8  211a              MOVS     r1,#0x1a
0002ea  486e              LDR      r0,|L151.1188|
0002ec  f7fffffe          BL       uart_putchar
0002f0  211a              MOVS     r1,#0x1a
0002f2  486c              LDR      r0,|L151.1188|
0002f4  f7fffffe          BL       uart_putchar
0002f8  211a              MOVS     r1,#0x1a
0002fa  486a              LDR      r0,|L151.1188|
0002fc  f7fffffe          BL       uart_putchar
000300  211a              MOVS     r1,#0x1a
000302  4868              LDR      r0,|L151.1188|
000304  f7fffffe          BL       uart_putchar
000308  211a              MOVS     r1,#0x1a
00030a  4866              LDR      r0,|L151.1188|
00030c  f7fffffe          BL       uart_putchar
;;;1865   									do
000310  bf00              NOP      
                  |L151.786|
;;;1866   																{q1=strstr(uart_string_gsm,"SEND OK");
000312  4956              LDR      r1,|L151.1132|
000314  4846              LDR      r0,|L151.1072|
000316  f7fffffe          BL       strstr
00031a  4963              LDR      r1,|L151.1192|
00031c  6008              STR      r0,[r1,#0]  ; q1
;;;1867   																	q2=strstr(uart_string_gsm, "ERROR");
00031e  494f              LDR      r1,|L151.1116|
000320  4843              LDR      r0,|L151.1072|
000322  f7fffffe          BL       strstr
000326  4961              LDR      r1,|L151.1196|
000328  6008              STR      r0,[r1,#0]  ; q2
;;;1868   																		q3=strstr(uart_string_gsm, "FAIL");	
00032a  4951              LDR      r1,|L151.1136|
00032c  4840              LDR      r0,|L151.1072|
00032e  f7fffffe          BL       strstr
000332  495f              LDR      r1,|L151.1200|
000334  6008              STR      r0,[r1,#0]  ; q3
;;;1869   																			q4=strstr(uart_string_gsm, "DEACT");	
000336  494f              LDR      r1,|L151.1140|
000338  483d              LDR      r0,|L151.1072|
00033a  f7fffffe          BL       strstr
00033e  495d              LDR      r1,|L151.1204|
000340  6008              STR      r0,[r1,#0]  ; q4
;;;1870   																	
;;;1871   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) ); //|| (timeout < 1)   
000342  4859              LDR      r0,|L151.1192|
000344  6800              LDR      r0,[r0,#0]  ; q1
000346  2800              CMP      r0,#0
000348  d10f              BNE      |L151.874|
00034a  4858              LDR      r0,|L151.1196|
00034c  6800              LDR      r0,[r0,#0]  ; q2
00034e  2800              CMP      r0,#0
000350  d10b              BNE      |L151.874|
000352  4857              LDR      r0,|L151.1200|
000354  6800              LDR      r0,[r0,#0]  ; q3
000356  2800              CMP      r0,#0
000358  d107              BNE      |L151.874|
00035a  4608              MOV      r0,r1
00035c  6800              LDR      r0,[r0,#0]  ; q4
00035e  2800              CMP      r0,#0
000360  d103              BNE      |L151.874|
000362  484d              LDR      r0,|L151.1176|
000364  6800              LDR      r0,[r0,#0]  ; tout
000366  2808              CMP      r0,#8
000368  ddd3              BLE      |L151.786|
                  |L151.874|
;;;1872   																delay(10);clear();
00036a  200a              MOVS     r0,#0xa
00036c  f7fffffe          BL       delay
000370  f7fffffe          BL       clear
;;;1873   														uart_putchar(UART1_BASE_PTR,0x1A);
000374  211a              MOVS     r1,#0x1a
000376  484b              LDR      r0,|L151.1188|
000378  f7fffffe          BL       uart_putchar
;;;1874   												delay(10);
00037c  200a              MOVS     r0,#0xa
00037e  f7fffffe          BL       delay
;;;1875   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000382  211a              MOVS     r1,#0x1a
000384  4847              LDR      r0,|L151.1188|
000386  f7fffffe          BL       uart_putchar
00038a  211a              MOVS     r1,#0x1a
00038c  4845              LDR      r0,|L151.1188|
00038e  f7fffffe          BL       uart_putchar
000392  211a              MOVS     r1,#0x1a
000394  4843              LDR      r0,|L151.1188|
000396  f7fffffe          BL       uart_putchar
;;;1876   delay(50);
00039a  2032              MOVS     r0,#0x32
00039c  f7fffffe          BL       delay
;;;1877   if(strstr(uart_string_gsm,"SEND OK"))
0003a0  4932              LDR      r1,|L151.1132|
0003a2  4823              LDR      r0,|L151.1072|
0003a4  f7fffffe          BL       strstr
0003a8  2800              CMP      r0,#0
0003aa  d013              BEQ      |L151.980|
;;;1878   {
;;;1879   cursorvaluene=cursor_val(sd_data,enters-3);
0003ac  482d              LDR      r0,|L151.1124|
0003ae  6800              LDR      r0,[r0,#0]  ; enters
0003b0  1ec1              SUBS     r1,r0,#3
0003b2  482d              LDR      r0,|L151.1128|
0003b4  f7fffffe          BL       cursor_val
0003b8  493f              LDR      r1,|L151.1208|
0003ba  6008              STR      r0,[r1,#0]  ; cursorvaluene
;;;1880   cursorvaluepr+=cursorvaluene;
0003bc  4825              LDR      r0,|L151.1108|
0003be  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
0003c0  6809              LDR      r1,[r1,#0]  ; cursorvaluene
0003c2  1840              ADDS     r0,r0,r1
0003c4  4923              LDR      r1,|L151.1108|
0003c6  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1881   k5++;
0003c8  4820              LDR      r0,|L151.1100|
0003ca  6800              LDR      r0,[r0,#0]  ; k5
0003cc  1c40              ADDS     r0,r0,#1
0003ce  491f              LDR      r1,|L151.1100|
0003d0  6008              STR      r0,[r1,#0]  ; k5
0003d2  e3fd              B        |L151.3024|
                  |L151.980|
;;;1882   }
;;;1883   else{remove_all_chars(data, '\n', '\n');
0003d4  220a              MOVS     r2,#0xa
0003d6  4611              MOV      r1,r2
0003d8  4819              LDR      r0,|L151.1088|
0003da  f7fffffe          BL       remove_all_chars
;;;1884   			strcat(data,"CH\n");
0003de  4937              LDR      r1,|L151.1212|
0003e0  4817              LDR      r0,|L151.1088|
0003e2  f7fffffe          BL       strcat
;;;1885   
;;;1886   	delay(100);
0003e6  2064              MOVS     r0,#0x64
0003e8  f7fffffe          BL       delay
;;;1887   		clear();//memset(uart_string_gsm,0,5000);
0003ec  f7fffffe          BL       clear
;;;1888   	
;;;1889   	memset(at_,0,100);
0003f0  2164              MOVS     r1,#0x64
0003f2  4807              LDR      r0,|L151.1040|
0003f4  f7fffffe          BL       __aeabi_memclr
;;;1890   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0003f8  4811              LDR      r0,|L151.1088|
0003fa  f7fffffe          BL       strlen
0003fe  e05f              B        |L151.1216|
                  |L151.1024|
                          DCD      ||fsz||
                  |L151.1028|
                          DCD      times
                  |L151.1032|
                          DCD      int_erval
                  |L151.1036|
                          DCD      temp
                  |L151.1040|
                          DCD      at_
                  |L151.1044|
                          DCD      drive
                  |L151.1048|
                          DCD      ||.conststring||+0x58c
                  |L151.1052|
                          DCD      tmeout
                  |L151.1056|
                          DCD      ||.conststring||+0x10
                  |L151.1060|
                          DCD      ||.conststring||+0x18
                  |L151.1064|
                          DCD      ||.conststring||+0x2c
                  |L151.1068|
                          DCD      fsize
                  |L151.1072|
                          DCD      uart_string_gsm
                  |L151.1076|
                          DCD      0x44610000
                  |L151.1080|
                          DCD      log0
                  |L151.1084|
                          DCD      0x400ff080
                  |L151.1088|
                          DCD      data
                  |L151.1092|
                          DCD      ||.conststring||+0x428
                  |L151.1096|
                          DCD      rtcticks2
                  |L151.1100|
                          DCD      ||k5||
                  |L151.1104|
                          DCD      ||.conststring||+0x5ac
                  |L151.1108|
                          DCD      cursorvaluepr
                  |L151.1112|
                          DCD      ||.conststring||+0x5e0
                  |L151.1116|
                          DCD      ||.conststring||+0xe0
                  |L151.1120|
                          DCD      cntendl
                  |L151.1124|
                          DCD      enters
                  |L151.1128|
                          DCD      sd_data
                  |L151.1132|
                          DCD      ||.conststring||+0x608
                  |L151.1136|
                          DCD      ||.conststring||+0x610
                  |L151.1140|
                          DCD      ||.conststring||+0x618
                  |L151.1144|
                          DCD      exception
                  |L151.1148|
                          DCD      ||.conststring||+0x620
                  |L151.1152|
                          DCD      qwe
                  |L151.1156|
                          DCD      ||.conststring||+0x650
                  |L151.1160|
                          DCD      ||.conststring||+0x20
                  |L151.1164|
                          DCD      ||.conststring||+0x658
                  |L151.1168|
                          DCD      cond
                  |L151.1172|
                          DCD      0x00001388
                  |L151.1176|
                          DCD      tout
                  |L151.1180|
                          DCD      ||k2||
                  |L151.1184|
                          DCD      k
                  |L151.1188|
                          DCD      0x4006b000
                  |L151.1192|
                          DCD      ||q1||
                  |L151.1196|
                          DCD      ||q2||
                  |L151.1200|
                          DCD      ||q3||
                  |L151.1204|
                          DCD      ||q4||
                  |L151.1208|
                          DCD      cursorvaluene
                  |L151.1212|
                          DCD      ||.conststring||+0x42c
                  |L151.1216|
0004c0  1c44              ADDS     r4,r0,#1
0004c2  4623              MOV      r3,r4
0004c4  4afd              LDR      r2,|L151.2236|
0004c6  49fe              LDR      r1,|L151.2240|
0004c8  48fe              LDR      r0,|L151.2244|
0004ca  f7fffffe          BL       __2sprintf
;;;1891   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0004ce  2005              MOVS     r0,#5
0004d0  4bfd              LDR      r3,|L151.2248|
0004d2  4afe              LDR      r2,|L151.2252|
0004d4  49fe              LDR      r1,|L151.2256|
0004d6  9000              STR      r0,[sp,#0]
0004d8  48fa              LDR      r0,|L151.2244|
0004da  f7fffffe          BL       send_SD
;;;1892   
;;;1893   	
;;;1894   clear();	
0004de  f7fffffe          BL       clear
;;;1895   									k2=0;									//string array counter for uart 1
0004e2  2000              MOVS     r0,#0
0004e4  49fb              LDR      r1,|L151.2260|
0004e6  6008              STR      r0,[r1,#0]  ; k2
;;;1896   									tout=0;	
0004e8  49fb              LDR      r1,|L151.2264|
0004ea  6008              STR      r0,[r1,#0]  ; tout
;;;1897   		for(k=0;k<strlen(data);k++)
0004ec  49fb              LDR      r1,|L151.2268|
0004ee  6008              STR      r0,[r1,#0]  ; k
0004f0  e00b              B        |L151.1290|
                  |L151.1266|
;;;1898   		{
;;;1899   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0004f2  48fb              LDR      r0,|L151.2272|
0004f4  4af9              LDR      r2,|L151.2268|
0004f6  6812              LDR      r2,[r2,#0]  ; k
0004f8  5c81              LDRB     r1,[r0,r2]
0004fa  48fa              LDR      r0,|L151.2276|
0004fc  f7fffffe          BL       uart_putchar
000500  48f6              LDR      r0,|L151.2268|
000502  6800              LDR      r0,[r0,#0]            ;1897  ; k
000504  1c40              ADDS     r0,r0,#1              ;1897
000506  49f5              LDR      r1,|L151.2268|
000508  6008              STR      r0,[r1,#0]            ;1897  ; k
                  |L151.1290|
00050a  48f5              LDR      r0,|L151.2272|
00050c  f7fffffe          BL       strlen
000510  49f2              LDR      r1,|L151.2268|
000512  6809              LDR      r1,[r1,#0]            ;1897  ; k
000514  4288              CMP      r0,r1                 ;1897
000516  d8ec              BHI      |L151.1266|
;;;1900   		}	
;;;1901   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000518  210a              MOVS     r1,#0xa
00051a  48f2              LDR      r0,|L151.2276|
00051c  f7fffffe          BL       uart_putchar
000520  210a              MOVS     r1,#0xa
000522  48f0              LDR      r0,|L151.2276|
000524  f7fffffe          BL       uart_putchar
000528  210a              MOVS     r1,#0xa
00052a  48ee              LDR      r0,|L151.2276|
00052c  f7fffffe          BL       uart_putchar
000530  210a              MOVS     r1,#0xa
000532  48ec              LDR      r0,|L151.2276|
000534  f7fffffe          BL       uart_putchar
000538  210a              MOVS     r1,#0xa
00053a  48ea              LDR      r0,|L151.2276|
00053c  f7fffffe          BL       uart_putchar
000540  210a              MOVS     r1,#0xa
000542  48e8              LDR      r0,|L151.2276|
000544  f7fffffe          BL       uart_putchar
000548  210a              MOVS     r1,#0xa
00054a  48e6              LDR      r0,|L151.2276|
00054c  f7fffffe          BL       uart_putchar
000550  210a              MOVS     r1,#0xa
000552  48e4              LDR      r0,|L151.2276|
000554  f7fffffe          BL       uart_putchar
000558  210a              MOVS     r1,#0xa
00055a  48e2              LDR      r0,|L151.2276|
00055c  f7fffffe          BL       uart_putchar
000560  210a              MOVS     r1,#0xa
000562  48e0              LDR      r0,|L151.2276|
000564  f7fffffe          BL       uart_putchar
000568  210a              MOVS     r1,#0xa
00056a  48de              LDR      r0,|L151.2276|
00056c  f7fffffe          BL       uart_putchar
000570  210a              MOVS     r1,#0xa
000572  48dc              LDR      r0,|L151.2276|
000574  f7fffffe          BL       uart_putchar
000578  210a              MOVS     r1,#0xa
00057a  48da              LDR      r0,|L151.2276|
00057c  f7fffffe          BL       uart_putchar
000580  210a              MOVS     r1,#0xa
000582  48d8              LDR      r0,|L151.2276|
000584  f7fffffe          BL       uart_putchar
000588  210a              MOVS     r1,#0xa
00058a  48d6              LDR      r0,|L151.2276|
00058c  f7fffffe          BL       uart_putchar
000590  210a              MOVS     r1,#0xa
000592  48d4              LDR      r0,|L151.2276|
000594  f7fffffe          BL       uart_putchar
000598  210a              MOVS     r1,#0xa
00059a  48d2              LDR      r0,|L151.2276|
00059c  f7fffffe          BL       uart_putchar
0005a0  210a              MOVS     r1,#0xa
0005a2  48d0              LDR      r0,|L151.2276|
0005a4  f7fffffe          BL       uart_putchar
0005a8  210a              MOVS     r1,#0xa
0005aa  48ce              LDR      r0,|L151.2276|
0005ac  f7fffffe          BL       uart_putchar
0005b0  210a              MOVS     r1,#0xa
0005b2  48cc              LDR      r0,|L151.2276|
0005b4  f7fffffe          BL       uart_putchar
0005b8  210a              MOVS     r1,#0xa
0005ba  48ca              LDR      r0,|L151.2276|
0005bc  f7fffffe          BL       uart_putchar
0005c0  210a              MOVS     r1,#0xa
0005c2  48c8              LDR      r0,|L151.2276|
0005c4  f7fffffe          BL       uart_putchar
0005c8  210a              MOVS     r1,#0xa
0005ca  48c6              LDR      r0,|L151.2276|
0005cc  f7fffffe          BL       uart_putchar
0005d0  210a              MOVS     r1,#0xa
0005d2  48c4              LDR      r0,|L151.2276|
0005d4  f7fffffe          BL       uart_putchar
0005d8  210a              MOVS     r1,#0xa
0005da  48c2              LDR      r0,|L151.2276|
0005dc  f7fffffe          BL       uart_putchar
0005e0  210a              MOVS     r1,#0xa
0005e2  48c0              LDR      r0,|L151.2276|
0005e4  f7fffffe          BL       uart_putchar
0005e8  210a              MOVS     r1,#0xa
0005ea  48be              LDR      r0,|L151.2276|
0005ec  f7fffffe          BL       uart_putchar
0005f0  210a              MOVS     r1,#0xa
0005f2  48bc              LDR      r0,|L151.2276|
0005f4  f7fffffe          BL       uart_putchar
0005f8  210a              MOVS     r1,#0xa
0005fa  48ba              LDR      r0,|L151.2276|
0005fc  f7fffffe          BL       uart_putchar
000600  210a              MOVS     r1,#0xa
000602  48b8              LDR      r0,|L151.2276|
000604  f7fffffe          BL       uart_putchar
000608  210a              MOVS     r1,#0xa
00060a  48b6              LDR      r0,|L151.2276|
00060c  f7fffffe          BL       uart_putchar
000610  210a              MOVS     r1,#0xa
000612  48b4              LDR      r0,|L151.2276|
000614  f7fffffe          BL       uart_putchar
000618  210a              MOVS     r1,#0xa
00061a  48b2              LDR      r0,|L151.2276|
00061c  f7fffffe          BL       uart_putchar
000620  210a              MOVS     r1,#0xa
000622  48b0              LDR      r0,|L151.2276|
000624  f7fffffe          BL       uart_putchar
000628  210a              MOVS     r1,#0xa
00062a  48ae              LDR      r0,|L151.2276|
00062c  f7fffffe          BL       uart_putchar
000630  210a              MOVS     r1,#0xa
000632  48ac              LDR      r0,|L151.2276|
000634  f7fffffe          BL       uart_putchar
000638  210a              MOVS     r1,#0xa
00063a  48aa              LDR      r0,|L151.2276|
00063c  f7fffffe          BL       uart_putchar
000640  210a              MOVS     r1,#0xa
000642  48a8              LDR      r0,|L151.2276|
000644  f7fffffe          BL       uart_putchar
000648  210a              MOVS     r1,#0xa
00064a  48a6              LDR      r0,|L151.2276|
00064c  f7fffffe          BL       uart_putchar
000650  210a              MOVS     r1,#0xa
000652  48a4              LDR      r0,|L151.2276|
000654  f7fffffe          BL       uart_putchar
000658  210a              MOVS     r1,#0xa
00065a  48a2              LDR      r0,|L151.2276|
00065c  f7fffffe          BL       uart_putchar
000660  210a              MOVS     r1,#0xa
000662  48a0              LDR      r0,|L151.2276|
000664  f7fffffe          BL       uart_putchar
000668  210a              MOVS     r1,#0xa
00066a  489e              LDR      r0,|L151.2276|
00066c  f7fffffe          BL       uart_putchar
000670  210a              MOVS     r1,#0xa
000672  489c              LDR      r0,|L151.2276|
000674  f7fffffe          BL       uart_putchar
000678  210a              MOVS     r1,#0xa
00067a  489a              LDR      r0,|L151.2276|
00067c  f7fffffe          BL       uart_putchar
000680  210a              MOVS     r1,#0xa
000682  4898              LDR      r0,|L151.2276|
000684  f7fffffe          BL       uart_putchar
000688  210a              MOVS     r1,#0xa
00068a  4896              LDR      r0,|L151.2276|
00068c  f7fffffe          BL       uart_putchar
000690  210a              MOVS     r1,#0xa
000692  4894              LDR      r0,|L151.2276|
000694  f7fffffe          BL       uart_putchar
000698  210a              MOVS     r1,#0xa
00069a  4892              LDR      r0,|L151.2276|
00069c  f7fffffe          BL       uart_putchar
0006a0  210a              MOVS     r1,#0xa
0006a2  4890              LDR      r0,|L151.2276|
0006a4  f7fffffe          BL       uart_putchar
0006a8  210a              MOVS     r1,#0xa
0006aa  488e              LDR      r0,|L151.2276|
0006ac  f7fffffe          BL       uart_putchar
0006b0  210a              MOVS     r1,#0xa
0006b2  488c              LDR      r0,|L151.2276|
0006b4  f7fffffe          BL       uart_putchar
0006b8  210a              MOVS     r1,#0xa
0006ba  488a              LDR      r0,|L151.2276|
0006bc  f7fffffe          BL       uart_putchar
0006c0  210a              MOVS     r1,#0xa
0006c2  4888              LDR      r0,|L151.2276|
0006c4  f7fffffe          BL       uart_putchar
0006c8  210a              MOVS     r1,#0xa
0006ca  4886              LDR      r0,|L151.2276|
0006cc  f7fffffe          BL       uart_putchar
0006d0  210a              MOVS     r1,#0xa
0006d2  4884              LDR      r0,|L151.2276|
0006d4  f7fffffe          BL       uart_putchar
0006d8  210a              MOVS     r1,#0xa
0006da  4882              LDR      r0,|L151.2276|
0006dc  f7fffffe          BL       uart_putchar
;;;1902   														//timer counts to wait for characters in uart 1 									
;;;1903   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0006e0  bf00              NOP      
                  |L151.1762|
0006e2  4981              LDR      r1,|L151.2280|
0006e4  4881              LDR      r0,|L151.2284|
0006e6  f7fffffe          BL       strstr
0006ea  2800              CMP      r0,#0
0006ec  d109              BNE      |L151.1794|
0006ee  4976              LDR      r1,|L151.2248|
0006f0  487e              LDR      r0,|L151.2284|
0006f2  f7fffffe          BL       strstr
0006f6  2800              CMP      r0,#0
0006f8  d103              BNE      |L151.1794|
0006fa  4877              LDR      r0,|L151.2264|
0006fc  6800              LDR      r0,[r0,#0]  ; tout
0006fe  2805              CMP      r0,#5
000700  ddef              BLE      |L151.1762|
                  |L151.1794|
;;;1904   									{	}
;;;1905   	                clear();
000702  f7fffffe          BL       clear
;;;1906   									memset(data,0,strlen(data));
000706  4876              LDR      r0,|L151.2272|
000708  f7fffffe          BL       strlen
00070c  4604              MOV      r4,r0
00070e  4621              MOV      r1,r4
000710  4873              LDR      r0,|L151.2272|
000712  f7fffffe          BL       __aeabi_memclr
;;;1907   									clear();
000716  f7fffffe          BL       clear
;;;1908   
;;;1909   								
;;;1910   
;;;1911   
;;;1912   
;;;1913   //	log_it();
;;;1914   
;;;1915   			memset(data,0,strlen(data));
00071a  4871              LDR      r0,|L151.2272|
00071c  f7fffffe          BL       strlen
000720  4604              MOV      r4,r0
000722  4621              MOV      r1,r4
000724  486e              LDR      r0,|L151.2272|
000726  f7fffffe          BL       __aeabi_memclr
;;;1916   //*********************************tcp_initialization();***************************************//
;;;1917   
;;;1918   	
;;;1919   msg_sim800(); 
00072a  f7fffffe          BL       msg_sim800
;;;1920   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00072e  2005              MOVS     r0,#5
000730  4b65              LDR      r3,|L151.2248|
000732  4a66              LDR      r2,|L151.2252|
000734  496e              LDR      r1,|L151.2288|
000736  9000              STR      r0,[sp,#0]
000738  486e              LDR      r0,|L151.2292|
00073a  f7fffffe          BL       send_GSM
;;;1921   delay(100);
00073e  2064              MOVS     r0,#0x64
000740  f7fffffe          BL       delay
;;;1922   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
000744  2004              MOVS     r0,#4
000746  4b60              LDR      r3,|L151.2248|
000748  4a6b              LDR      r2,|L151.2296|
00074a  4969              LDR      r1,|L151.2288|
00074c  9000              STR      r0,[sp,#0]
00074e  486b              LDR      r0,|L151.2300|
000750  f7fffffe          BL       send_GSM
;;;1923   GPS_COLLECT2();
000754  f7fffffe          BL       GPS_COLLECT2
;;;1924   strcat(data,"CH\n");		
000758  4969              LDR      r1,|L151.2304|
00075a  4861              LDR      r0,|L151.2272|
00075c  f7fffffe          BL       strcat
;;;1925   GPS_COLLECT2();
000760  f7fffffe          BL       GPS_COLLECT2
;;;1926   strcat(data,"CH\n");	
000764  4966              LDR      r1,|L151.2304|
000766  485e              LDR      r0,|L151.2272|
000768  f7fffffe          BL       strcat
;;;1927   GPS_COLLECT2();
00076c  f7fffffe          BL       GPS_COLLECT2
;;;1928   strcat(data,"CH\n");
000770  4963              LDR      r1,|L151.2304|
000772  485b              LDR      r0,|L151.2272|
000774  f7fffffe          BL       strcat
;;;1929   cond201=(strstr(uart_string_gsm, "OK"));
000778  495d              LDR      r1,|L151.2288|
00077a  485c              LDR      r0,|L151.2284|
00077c  f7fffffe          BL       strstr
000780  4960              LDR      r1,|L151.2308|
000782  6008              STR      r0,[r1,#0]  ; cond201
;;;1930   cond200=(strstr(uart_string_gsm, "ERROR"));
000784  4950              LDR      r1,|L151.2248|
000786  4859              LDR      r0,|L151.2284|
000788  f7fffffe          BL       strstr
00078c  495e              LDR      r1,|L151.2312|
00078e  6008              STR      r0,[r1,#0]  ; cond200
;;;1931   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
000790  485c              LDR      r0,|L151.2308|
000792  6800              LDR      r0,[r0,#0]  ; cond201
000794  2800              CMP      r0,#0
000796  d101              BNE      |L151.1948|
000798  2001              MOVS     r0,#1
00079a  e000              B        |L151.1950|
                  |L151.1948|
00079c  2000              MOVS     r0,#0
                  |L151.1950|
00079e  2800              CMP      r0,#0
                  |L151.1952|
0007a0  d06d              BEQ      |L151.2174|
0007a2  4859              LDR      r0,|L151.2312|
0007a4  6800              LDR      r0,[r0,#0]  ; cond200
0007a6  2800              CMP      r0,#0
0007a8  d101              BNE      |L151.1966|
0007aa  2001              MOVS     r0,#1
0007ac  e000              B        |L151.1968|
                  |L151.1966|
0007ae  2000              MOVS     r0,#0
                  |L151.1968|
0007b0  2800              CMP      r0,#0
0007b2  d0f5              BEQ      |L151.1952|
0007b4  4855              LDR      r0,|L151.2316|
0007b6  6800              LDR      r0,[r0,#0]  ; sleep_flag
0007b8  2801              CMP      r0,#1
0007ba  d0f1              BEQ      |L151.1952|
;;;1932   {
;;;1933   delay(100);
0007bc  2064              MOVS     r0,#0x64
0007be  f7fffffe          BL       delay
;;;1934   clear();//memset(uart_string_gsm,0,5000);
0007c2  f7fffffe          BL       clear
;;;1935   memset(at_,0,100);
0007c6  2164              MOVS     r1,#0x64
0007c8  483e              LDR      r0,|L151.2244|
0007ca  f7fffffe          BL       __aeabi_memclr
;;;1936   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0007ce  4844              LDR      r0,|L151.2272|
0007d0  f7fffffe          BL       strlen
0007d4  1c44              ADDS     r4,r0,#1
0007d6  4623              MOV      r3,r4
0007d8  4a38              LDR      r2,|L151.2236|
0007da  4939              LDR      r1,|L151.2240|
0007dc  4839              LDR      r0,|L151.2244|
0007de  f7fffffe          BL       __2sprintf
;;;1937   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0007e2  2005              MOVS     r0,#5
0007e4  4b38              LDR      r3,|L151.2248|
0007e6  4a39              LDR      r2,|L151.2252|
0007e8  4939              LDR      r1,|L151.2256|
0007ea  9000              STR      r0,[sp,#0]
0007ec  4835              LDR      r0,|L151.2244|
0007ee  f7fffffe          BL       send_SD
;;;1938   clear();	
0007f2  f7fffffe          BL       clear
;;;1939   k2=0;									//string array counter for uart 1
0007f6  2000              MOVS     r0,#0
0007f8  4936              LDR      r1,|L151.2260|
0007fa  6008              STR      r0,[r1,#0]  ; k2
;;;1940   tout=0;	
0007fc  4936              LDR      r1,|L151.2264|
0007fe  6008              STR      r0,[r1,#0]  ; tout
;;;1941   for(k=0;k<strlen(data);k++)
000800  4936              LDR      r1,|L151.2268|
000802  6008              STR      r0,[r1,#0]  ; k
000804  e00b              B        |L151.2078|
                  |L151.2054|
;;;1942   {
;;;1943   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000806  4836              LDR      r0,|L151.2272|
000808  4a34              LDR      r2,|L151.2268|
00080a  6812              LDR      r2,[r2,#0]  ; k
00080c  5c81              LDRB     r1,[r0,r2]
00080e  4835              LDR      r0,|L151.2276|
000810  f7fffffe          BL       uart_putchar
000814  4831              LDR      r0,|L151.2268|
000816  6800              LDR      r0,[r0,#0]            ;1941  ; k
000818  1c40              ADDS     r0,r0,#1              ;1941
00081a  4930              LDR      r1,|L151.2268|
00081c  6008              STR      r0,[r1,#0]            ;1941  ; k
                  |L151.2078|
00081e  4830              LDR      r0,|L151.2272|
000820  f7fffffe          BL       strlen
000824  492d              LDR      r1,|L151.2268|
000826  6809              LDR      r1,[r1,#0]            ;1941  ; k
000828  4288              CMP      r0,r1                 ;1941
00082a  d8ec              BHI      |L151.2054|
;;;1944   }	
;;;1945   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00082c  210a              MOVS     r1,#0xa
00082e  482d              LDR      r0,|L151.2276|
000830  f7fffffe          BL       uart_putchar
000834  210a              MOVS     r1,#0xa
000836  482b              LDR      r0,|L151.2276|
000838  f7fffffe          BL       uart_putchar
00083c  210a              MOVS     r1,#0xa
00083e  4829              LDR      r0,|L151.2276|
000840  f7fffffe          BL       uart_putchar
000844  210a              MOVS     r1,#0xa
000846  4827              LDR      r0,|L151.2276|
000848  f7fffffe          BL       uart_putchar
00084c  210a              MOVS     r1,#0xa
00084e  4825              LDR      r0,|L151.2276|
000850  f7fffffe          BL       uart_putchar
000854  210a              MOVS     r1,#0xa
000856  4823              LDR      r0,|L151.2276|
000858  f7fffffe          BL       uart_putchar
00085c  210a              MOVS     r1,#0xa
00085e  4821              LDR      r0,|L151.2276|
000860  f7fffffe          BL       uart_putchar
000864  210a              MOVS     r1,#0xa
000866  481f              LDR      r0,|L151.2276|
000868  f7fffffe          BL       uart_putchar
00086c  210a              MOVS     r1,#0xa
00086e  481d              LDR      r0,|L151.2276|
000870  f7fffffe          BL       uart_putchar
000874  210a              MOVS     r1,#0xa
000876  481b              LDR      r0,|L151.2276|
000878  e002              B        |L151.2176|
                  |L151.2170|
00087a  e3fd              B        |L151.4216|
                  |L151.2172|
00087c  e398              B        |L151.4016|
                  |L151.2174|
00087e  e112              B        |L151.2726|
                  |L151.2176|
000880  f7fffffe          BL       uart_putchar
000884  210a              MOVS     r1,#0xa
000886  4817              LDR      r0,|L151.2276|
000888  f7fffffe          BL       uart_putchar
00088c  210a              MOVS     r1,#0xa
00088e  4815              LDR      r0,|L151.2276|
000890  f7fffffe          BL       uart_putchar
000894  210a              MOVS     r1,#0xa
000896  4813              LDR      r0,|L151.2276|
000898  f7fffffe          BL       uart_putchar
00089c  210a              MOVS     r1,#0xa
00089e  4811              LDR      r0,|L151.2276|
0008a0  f7fffffe          BL       uart_putchar
0008a4  210a              MOVS     r1,#0xa
0008a6  480f              LDR      r0,|L151.2276|
0008a8  f7fffffe          BL       uart_putchar
0008ac  210a              MOVS     r1,#0xa
0008ae  480d              LDR      r0,|L151.2276|
0008b0  f7fffffe          BL       uart_putchar
0008b4  210a              MOVS     r1,#0xa
0008b6  480b              LDR      r0,|L151.2276|
0008b8  e02a              B        |L151.2320|
0008ba  0000              DCW      0x0000
                  |L151.2236|
                          DCD      drive
                  |L151.2240|
                          DCD      ||.conststring||+0x430
                  |L151.2244|
                          DCD      at_
                  |L151.2248|
                          DCD      ||.conststring||+0xe0
                  |L151.2252|
                          DCD      ||.conststring||+0x18
                  |L151.2256|
                          DCD      ||.conststring||+0x20
                  |L151.2260|
                          DCD      ||k2||
                  |L151.2264|
                          DCD      tout
                  |L151.2268|
                          DCD      k
                  |L151.2272|
                          DCD      data
                  |L151.2276|
                          DCD      0x4006b000
                  |L151.2280|
                          DCD      ||.conststring||+0x70
                  |L151.2284|
                          DCD      uart_string_gsm
                  |L151.2288|
                          DCD      ||.conststring||+0x2c
                  |L151.2292|
                          DCD      ||.conststring||+0x668
                  |L151.2296|
                          DCD      ||.conststring||+0x678
                  |L151.2300|
                          DCD      ||.conststring||+0x68c
                  |L151.2304|
                          DCD      ||.conststring||+0x42c
                  |L151.2308|
                          DCD      cond201
                  |L151.2312|
                          DCD      cond200
                  |L151.2316|
                          DCD      sleep_flag
                  |L151.2320|
000910  f7fffffe          BL       uart_putchar
000914  210a              MOVS     r1,#0xa
000916  48fe              LDR      r0,|L151.3344|
000918  f7fffffe          BL       uart_putchar
00091c  210a              MOVS     r1,#0xa
00091e  48fc              LDR      r0,|L151.3344|
000920  f7fffffe          BL       uart_putchar
000924  210a              MOVS     r1,#0xa
000926  48fa              LDR      r0,|L151.3344|
000928  f7fffffe          BL       uart_putchar
00092c  210a              MOVS     r1,#0xa
00092e  48f8              LDR      r0,|L151.3344|
000930  f7fffffe          BL       uart_putchar
000934  210a              MOVS     r1,#0xa
000936  48f6              LDR      r0,|L151.3344|
000938  f7fffffe          BL       uart_putchar
00093c  210a              MOVS     r1,#0xa
00093e  48f4              LDR      r0,|L151.3344|
000940  f7fffffe          BL       uart_putchar
000944  210a              MOVS     r1,#0xa
000946  48f2              LDR      r0,|L151.3344|
000948  f7fffffe          BL       uart_putchar
00094c  210a              MOVS     r1,#0xa
00094e  48f0              LDR      r0,|L151.3344|
000950  f7fffffe          BL       uart_putchar
000954  210a              MOVS     r1,#0xa
000956  48ee              LDR      r0,|L151.3344|
000958  f7fffffe          BL       uart_putchar
00095c  210a              MOVS     r1,#0xa
00095e  48ec              LDR      r0,|L151.3344|
000960  f7fffffe          BL       uart_putchar
000964  210a              MOVS     r1,#0xa
000966  48ea              LDR      r0,|L151.3344|
000968  f7fffffe          BL       uart_putchar
00096c  210a              MOVS     r1,#0xa
00096e  48e8              LDR      r0,|L151.3344|
000970  f7fffffe          BL       uart_putchar
000974  210a              MOVS     r1,#0xa
000976  48e6              LDR      r0,|L151.3344|
000978  f7fffffe          BL       uart_putchar
00097c  210a              MOVS     r1,#0xa
00097e  48e4              LDR      r0,|L151.3344|
000980  f7fffffe          BL       uart_putchar
000984  210a              MOVS     r1,#0xa
000986  48e2              LDR      r0,|L151.3344|
000988  f7fffffe          BL       uart_putchar
00098c  210a              MOVS     r1,#0xa
00098e  48e0              LDR      r0,|L151.3344|
000990  f7fffffe          BL       uart_putchar
000994  210a              MOVS     r1,#0xa
000996  48de              LDR      r0,|L151.3344|
000998  f7fffffe          BL       uart_putchar
00099c  210a              MOVS     r1,#0xa
00099e  48dc              LDR      r0,|L151.3344|
0009a0  f7fffffe          BL       uart_putchar
0009a4  210a              MOVS     r1,#0xa
0009a6  48da              LDR      r0,|L151.3344|
0009a8  f7fffffe          BL       uart_putchar
0009ac  210a              MOVS     r1,#0xa
0009ae  48d8              LDR      r0,|L151.3344|
0009b0  f7fffffe          BL       uart_putchar
0009b4  210a              MOVS     r1,#0xa
0009b6  48d6              LDR      r0,|L151.3344|
0009b8  f7fffffe          BL       uart_putchar
0009bc  210a              MOVS     r1,#0xa
0009be  48d4              LDR      r0,|L151.3344|
0009c0  f7fffffe          BL       uart_putchar
0009c4  210a              MOVS     r1,#0xa
0009c6  48d2              LDR      r0,|L151.3344|
0009c8  f7fffffe          BL       uart_putchar
0009cc  210a              MOVS     r1,#0xa
0009ce  48d0              LDR      r0,|L151.3344|
0009d0  f7fffffe          BL       uart_putchar
0009d4  210a              MOVS     r1,#0xa
0009d6  48ce              LDR      r0,|L151.3344|
0009d8  f7fffffe          BL       uart_putchar
0009dc  210a              MOVS     r1,#0xa
0009de  48cc              LDR      r0,|L151.3344|
0009e0  f7fffffe          BL       uart_putchar
0009e4  210a              MOVS     r1,#0xa
0009e6  48ca              LDR      r0,|L151.3344|
0009e8  f7fffffe          BL       uart_putchar
0009ec  210a              MOVS     r1,#0xa
0009ee  48c8              LDR      r0,|L151.3344|
0009f0  f7fffffe          BL       uart_putchar
0009f4  210a              MOVS     r1,#0xa
0009f6  48c6              LDR      r0,|L151.3344|
0009f8  f7fffffe          BL       uart_putchar
0009fc  210a              MOVS     r1,#0xa
0009fe  48c4              LDR      r0,|L151.3344|
000a00  f7fffffe          BL       uart_putchar
000a04  210a              MOVS     r1,#0xa
000a06  48c2              LDR      r0,|L151.3344|
000a08  f7fffffe          BL       uart_putchar
000a0c  210a              MOVS     r1,#0xa
000a0e  48c0              LDR      r0,|L151.3344|
000a10  f7fffffe          BL       uart_putchar
000a14  210a              MOVS     r1,#0xa
000a16  48be              LDR      r0,|L151.3344|
000a18  f7fffffe          BL       uart_putchar
000a1c  210a              MOVS     r1,#0xa
000a1e  48bc              LDR      r0,|L151.3344|
000a20  f7fffffe          BL       uart_putchar
000a24  210a              MOVS     r1,#0xa
000a26  48ba              LDR      r0,|L151.3344|
000a28  f7fffffe          BL       uart_putchar
000a2c  210a              MOVS     r1,#0xa
000a2e  48b8              LDR      r0,|L151.3344|
000a30  f7fffffe          BL       uart_putchar
000a34  210a              MOVS     r1,#0xa
000a36  48b6              LDR      r0,|L151.3344|
000a38  f7fffffe          BL       uart_putchar
000a3c  210a              MOVS     r1,#0xa
000a3e  48b4              LDR      r0,|L151.3344|
000a40  f7fffffe          BL       uart_putchar
000a44  210a              MOVS     r1,#0xa
000a46  48b2              LDR      r0,|L151.3344|
000a48  f7fffffe          BL       uart_putchar
000a4c  210a              MOVS     r1,#0xa
000a4e  48b0              LDR      r0,|L151.3344|
000a50  f7fffffe          BL       uart_putchar
;;;1946   									//memset(data,0,1000);
;;;1947   														//timer counts to wait for characters in uart 1 									
;;;1948   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000a54  bf00              NOP      
                  |L151.2646|
000a56  49af              LDR      r1,|L151.3348|
000a58  48af              LDR      r0,|L151.3352|
000a5a  f7fffffe          BL       strstr
000a5e  2800              CMP      r0,#0
000a60  d109              BNE      |L151.2678|
000a62  49ae              LDR      r1,|L151.3356|
000a64  48ac              LDR      r0,|L151.3352|
000a66  f7fffffe          BL       strstr
000a6a  2800              CMP      r0,#0
000a6c  d103              BNE      |L151.2678|
000a6e  48ac              LDR      r0,|L151.3360|
000a70  6800              LDR      r0,[r0,#0]  ; tout
000a72  2805              CMP      r0,#5
000a74  ddef              BLE      |L151.2646|
                  |L151.2678|
;;;1949   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1950   									}
;;;1951   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000a76  f7fffffe          BL       clear
;;;1952   									//clear();
;;;1953   									memset(data,0,strlen(data));
000a7a  48aa              LDR      r0,|L151.3364|
000a7c  f7fffffe          BL       strlen
000a80  4604              MOV      r4,r0
000a82  4621              MOV      r1,r4
000a84  48a7              LDR      r0,|L151.3364|
000a86  f7fffffe          BL       __aeabi_memclr
;;;1954   									clear();
000a8a  f7fffffe          BL       clear
;;;1955   									RESET_OFF;delay(100);
000a8e  2020              MOVS     r0,#0x20
000a90  49a5              LDR      r1,|L151.3368|
000a92  6088              STR      r0,[r1,#8]
000a94  2064              MOVS     r0,#0x64
000a96  f7fffffe          BL       delay
;;;1956   									RESET_ON;delay(100);		
000a9a  2020              MOVS     r0,#0x20
000a9c  49a2              LDR      r1,|L151.3368|
000a9e  6048              STR      r0,[r1,#4]
000aa0  2064              MOVS     r0,#0x64
000aa2  f7fffffe          BL       delay
                  |L151.2726|
;;;1957   }
;;;1958   	
;;;1959   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000aa6  2004              MOVS     r0,#4
000aa8  4ba0              LDR      r3,|L151.3372|
000aaa  4aa1              LDR      r2,|L151.3376|
000aac  49a1              LDR      r1,|L151.3380|
000aae  9000              STR      r0,[sp,#0]
000ab0  48a1              LDR      r0,|L151.3384|
000ab2  f7fffffe          BL       send_GSM
;;;1960   GPS_COLLECT2();
000ab6  f7fffffe          BL       GPS_COLLECT2
;;;1961   strcat(data,"CH\n");	
000aba  49a0              LDR      r1,|L151.3388|
000abc  4899              LDR      r0,|L151.3364|
000abe  f7fffffe          BL       strcat
;;;1962   memset(at_,0,100);
000ac2  2164              MOVS     r1,#0x64
000ac4  489e              LDR      r0,|L151.3392|
000ac6  f7fffffe          BL       __aeabi_memclr
;;;1963   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000aca  4a9e              LDR      r2,|L151.3396|
000acc  499e              LDR      r1,|L151.3400|
000ace  489c              LDR      r0,|L151.3392|
000ad0  f7fffffe          BL       __2sprintf
;;;1964   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000ad4  489d              LDR      r0,|L151.3404|
000ad6  6800              LDR      r0,[r0,#0]  ; tmeout
000ad8  4b94              LDR      r3,|L151.3372|
000ada  4a95              LDR      r2,|L151.3376|
000adc  4995              LDR      r1,|L151.3380|
000ade  9000              STR      r0,[sp,#0]
000ae0  4897              LDR      r0,|L151.3392|
000ae2  f7fffffe          BL       send_GSM
;;;1965   msg_sim800(); 
000ae6  f7fffffe          BL       msg_sim800
;;;1966   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000aea  2004              MOVS     r0,#4
000aec  4b98              LDR      r3,|L151.3408|
000aee  4a90              LDR      r2,|L151.3376|
000af0  4990              LDR      r1,|L151.3380|
000af2  9000              STR      r0,[sp,#0]
000af4  4897              LDR      r0,|L151.3412|
000af6  f7fffffe          BL       send_GSM
;;;1967   GPS_COLLECT2();
000afa  f7fffffe          BL       GPS_COLLECT2
;;;1968   strcat(data,"CH\n");	
000afe  498f              LDR      r1,|L151.3388|
000b00  4888              LDR      r0,|L151.3364|
000b02  f7fffffe          BL       strcat
;;;1969   GPS_COLLECT2();
000b06  f7fffffe          BL       GPS_COLLECT2
;;;1970   strcat(data,"CH\n");	
000b0a  498c              LDR      r1,|L151.3388|
000b0c  4885              LDR      r0,|L151.3364|
000b0e  f7fffffe          BL       strcat
;;;1971   
;;;1972   
;;;1973   msg_sim800(); 
000b12  f7fffffe          BL       msg_sim800
;;;1974   GPS_COLLECT2();
000b16  f7fffffe          BL       GPS_COLLECT2
;;;1975   strcat(data,"CH\n");	
000b1a  4988              LDR      r1,|L151.3388|
000b1c  4881              LDR      r0,|L151.3364|
000b1e  f7fffffe          BL       strcat
;;;1976   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000b22  f7fffffe          BL       clear
000b26  488c              LDR      r0,|L151.3416|
000b28  f7fffffe          BL       send_modem
000b2c  f7fffffe          BL       clear
;;;1977   					delay(20);
000b30  2014              MOVS     r0,#0x14
000b32  f7fffffe          BL       delay
;;;1978   
;;;1979   
;;;1980   msg_sim800(); 
000b36  f7fffffe          BL       msg_sim800
;;;1981   
;;;1982   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000b3a  4b88              LDR      r3,|L151.3420|
000b3c  4a88              LDR      r2,|L151.3424|
000b3e  4989              LDR      r1,|L151.3428|
000b40  487f              LDR      r0,|L151.3392|
000b42  f7fffffe          BL       __2sprintf
;;;1983   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000b46  4881              LDR      r0,|L151.3404|
000b48  6800              LDR      r0,[r0,#0]  ; tmeout
000b4a  4b78              LDR      r3,|L151.3372|
000b4c  4a73              LDR      r2,|L151.3356|
000b4e  4986              LDR      r1,|L151.3432|
000b50  9000              STR      r0,[sp,#0]
000b52  487b              LDR      r0,|L151.3392|
000b54  f7fffffe          BL       send_GSM
;;;1984   						clear();
000b58  f7fffffe          BL       clear
;;;1985   						
;;;1986   						
;;;1987   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
000b5c  487b              LDR      r0,|L151.3404|
000b5e  6800              LDR      r0,[r0,#0]  ; tmeout
000b60  4b82              LDR      r3,|L151.3436|
000b62  4a6e              LDR      r2,|L151.3356|
000b64  4982              LDR      r1,|L151.3440|
000b66  9000              STR      r0,[sp,#0]
000b68  4882              LDR      r0,|L151.3444|
000b6a  f7fffffe          BL       send_GSM
;;;1988   									
;;;1989   //*********************************tcp_initialization ends*************************************//									
;;;1990   			if(mystrstr(uart_string_gsm,'>')){
000b6e  213e              MOVS     r1,#0x3e
000b70  4869              LDR      r0,|L151.3352|
000b72  f7fffffe          BL       mystrstr
000b76  2800              CMP      r0,#0
000b78  d07e              BEQ      |L151.3192|
;;;1991   									clear();
000b7a  f7fffffe          BL       clear
;;;1992   									memset(uart_string_gsm,0,5000);
000b7e  497e              LDR      r1,|L151.3448|
000b80  4865              LDR      r0,|L151.3352|
000b82  f7fffffe          BL       __aeabi_memclr
;;;1993   									qwe=strlen(data);
000b86  4867              LDR      r0,|L151.3364|
000b88  f7fffffe          BL       strlen
000b8c  497b              LDR      r1,|L151.3452|
000b8e  6008              STR      r0,[r1,#0]  ; qwe
;;;1994   									tout=0;
000b90  2000              MOVS     r0,#0
000b92  4963              LDR      r1,|L151.3360|
000b94  6008              STR      r0,[r1,#0]  ; tout
;;;1995   									k2=0;
000b96  497a              LDR      r1,|L151.3456|
000b98  6008              STR      r0,[r1,#0]  ; k2
;;;1996   									for(k=0;k<(qwe);k++)
000b9a  497a              LDR      r1,|L151.3460|
000b9c  6008              STR      r0,[r1,#0]  ; k
000b9e  e00b              B        |L151.3000|
                  |L151.2976|
;;;1997   									{
;;;1998   										uart_putchar(UART1_BASE_PTR, data[k]);
000ba0  4860              LDR      r0,|L151.3364|
000ba2  4a78              LDR      r2,|L151.3460|
000ba4  6812              LDR      r2,[r2,#0]  ; k
000ba6  5c81              LDRB     r1,[r0,r2]
000ba8  4859              LDR      r0,|L151.3344|
000baa  f7fffffe          BL       uart_putchar
000bae  4875              LDR      r0,|L151.3460|
000bb0  6800              LDR      r0,[r0,#0]            ;1996  ; k
000bb2  1c40              ADDS     r0,r0,#1              ;1996
000bb4  4973              LDR      r1,|L151.3460|
000bb6  6008              STR      r0,[r1,#0]            ;1996  ; k
                  |L151.3000|
000bb8  4872              LDR      r0,|L151.3460|
000bba  6800              LDR      r0,[r0,#0]            ;1996  ; k
000bbc  496f              LDR      r1,|L151.3452|
000bbe  6809              LDR      r1,[r1,#0]            ;1996  ; qwe
000bc0  4288              CMP      r0,r1                 ;1996
000bc2  dbed              BLT      |L151.2976|
;;;1999   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
000bc4  210a              MOVS     r1,#0xa
000bc6  4852              LDR      r0,|L151.3344|
000bc8  f7fffffe          BL       uart_putchar
000bcc  211a              MOVS     r1,#0x1a
000bce  e000              B        |L151.3026|
                  |L151.3024|
000bd0  e3fe              B        |L151.5072|
                  |L151.3026|
000bd2  484f              LDR      r0,|L151.3344|
000bd4  f7fffffe          BL       uart_putchar
000bd8  211a              MOVS     r1,#0x1a
000bda  484d              LDR      r0,|L151.3344|
000bdc  f7fffffe          BL       uart_putchar
000be0  211a              MOVS     r1,#0x1a
000be2  484b              LDR      r0,|L151.3344|
000be4  f7fffffe          BL       uart_putchar
000be8  211a              MOVS     r1,#0x1a
000bea  4849              LDR      r0,|L151.3344|
000bec  f7fffffe          BL       uart_putchar
000bf0  211a              MOVS     r1,#0x1a
000bf2  4847              LDR      r0,|L151.3344|
000bf4  f7fffffe          BL       uart_putchar
000bf8  211a              MOVS     r1,#0x1a
000bfa  4845              LDR      r0,|L151.3344|
000bfc  f7fffffe          BL       uart_putchar
;;;2000   															do
000c00  bf00              NOP      
                  |L151.3074|
;;;2001   																{q1=strstr(uart_string_gsm,"SEND OK");
000c02  4961              LDR      r1,|L151.3464|
000c04  4844              LDR      r0,|L151.3352|
000c06  f7fffffe          BL       strstr
000c0a  4960              LDR      r1,|L151.3468|
000c0c  6008              STR      r0,[r1,#0]  ; q1
;;;2002   																	q2=strstr(uart_string_gsm, "ERROR");
000c0e  4943              LDR      r1,|L151.3356|
000c10  4841              LDR      r0,|L151.3352|
000c12  f7fffffe          BL       strstr
000c16  495e              LDR      r1,|L151.3472|
000c18  6008              STR      r0,[r1,#0]  ; q2
;;;2003   																		q3=strstr(uart_string_gsm, "FAIL");	
000c1a  495e              LDR      r1,|L151.3476|
000c1c  483e              LDR      r0,|L151.3352|
000c1e  f7fffffe          BL       strstr
000c22  495d              LDR      r1,|L151.3480|
000c24  6008              STR      r0,[r1,#0]  ; q3
;;;2004   																			q4=strstr(uart_string_gsm, "DEACT");	
000c26  494a              LDR      r1,|L151.3408|
000c28  483b              LDR      r0,|L151.3352|
000c2a  f7fffffe          BL       strstr
000c2e  495b              LDR      r1,|L151.3484|
000c30  6008              STR      r0,[r1,#0]  ; q4
;;;2005   																	
;;;2006   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
000c32  4856              LDR      r0,|L151.3468|
000c34  6800              LDR      r0,[r0,#0]  ; q1
000c36  2800              CMP      r0,#0
000c38  d10f              BNE      |L151.3162|
000c3a  4855              LDR      r0,|L151.3472|
000c3c  6800              LDR      r0,[r0,#0]  ; q2
000c3e  2800              CMP      r0,#0
000c40  d10b              BNE      |L151.3162|
000c42  4855              LDR      r0,|L151.3480|
000c44  6800              LDR      r0,[r0,#0]  ; q3
000c46  2800              CMP      r0,#0
000c48  d107              BNE      |L151.3162|
000c4a  4608              MOV      r0,r1
000c4c  6800              LDR      r0,[r0,#0]  ; q4
000c4e  2800              CMP      r0,#0
000c50  d103              BNE      |L151.3162|
000c52  4833              LDR      r0,|L151.3360|
000c54  6800              LDR      r0,[r0,#0]  ; tout
000c56  2808              CMP      r0,#8
000c58  ddd3              BLE      |L151.3074|
                  |L151.3162|
;;;2007   															
;;;2008   																			delay(10);clear();
000c5a  200a              MOVS     r0,#0xa
000c5c  f7fffffe          BL       delay
000c60  f7fffffe          BL       clear
;;;2009   														uart_putchar(UART1_BASE_PTR,0x1A);
000c64  211a              MOVS     r1,#0x1a
000c66  482a              LDR      r0,|L151.3344|
000c68  f7fffffe          BL       uart_putchar
;;;2010   												delay(10);
000c6c  200a              MOVS     r0,#0xa
000c6e  f7fffffe          BL       delay
;;;2011   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000c72  211a              MOVS     r1,#0x1a
000c74  4826              LDR      r0,|L151.3344|
000c76  e000              B        |L151.3194|
                  |L151.3192|
000c78  e19b              B        |L151.4018|
                  |L151.3194|
000c7a  f7fffffe          BL       uart_putchar
000c7e  211a              MOVS     r1,#0x1a
000c80  4823              LDR      r0,|L151.3344|
000c82  f7fffffe          BL       uart_putchar
000c86  211a              MOVS     r1,#0x1a
000c88  4821              LDR      r0,|L151.3344|
000c8a  f7fffffe          BL       uart_putchar
;;;2012   delay(20);
000c8e  2014              MOVS     r0,#0x14
000c90  f7fffffe          BL       delay
;;;2013   if(!strstr(uart_string_gsm,"SEND OK")){
000c94  493c              LDR      r1,|L151.3464|
000c96  4820              LDR      r0,|L151.3352|
000c98  f7fffffe          BL       strstr
000c9c  2800              CMP      r0,#0
000c9e  d001              BEQ      |L151.3236|
000ca0  f001f9c0          BL       |L151.8228|
                  |L151.3236|
;;;2014   
;;;2015   
;;;2016   	delay(100);
000ca4  2064              MOVS     r0,#0x64
000ca6  f7fffffe          BL       delay
;;;2017   		clear();//memset(uart_string_gsm,0,5000);
000caa  f7fffffe          BL       clear
;;;2018   	
;;;2019   	memset(at_,0,100);
000cae  2164              MOVS     r1,#0x64
000cb0  4823              LDR      r0,|L151.3392|
000cb2  f7fffffe          BL       __aeabi_memclr
;;;2020   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000cb6  481b              LDR      r0,|L151.3364|
000cb8  f7fffffe          BL       strlen
000cbc  1c44              ADDS     r4,r0,#1
000cbe  4623              MOV      r3,r4
000cc0  4a37              LDR      r2,|L151.3488|
000cc2  4938              LDR      r1,|L151.3492|
000cc4  481e              LDR      r0,|L151.3392|
000cc6  f7fffffe          BL       __2sprintf
;;;2021   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000cca  2005              MOVS     r0,#5
000ccc  4b13              LDR      r3,|L151.3356|
000cce  4a18              LDR      r2,|L151.3376|
000cd0  4927              LDR      r1,|L151.3440|
000cd2  9000              STR      r0,[sp,#0]
000cd4  481a              LDR      r0,|L151.3392|
000cd6  f7fffffe          BL       send_SD
;;;2022   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2023   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2024   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2025   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2026   //	}
;;;2027   	
;;;2028   clear();	
000cda  f7fffffe          BL       clear
;;;2029   									k2=0;									//string array counter for uart 1
000cde  2000              MOVS     r0,#0
000ce0  4927              LDR      r1,|L151.3456|
000ce2  6008              STR      r0,[r1,#0]  ; k2
;;;2030   									tout=0;	
000ce4  490e              LDR      r1,|L151.3360|
000ce6  6008              STR      r0,[r1,#0]  ; tout
;;;2031   		for(k=0;k<strlen(data);k++)
000ce8  4926              LDR      r1,|L151.3460|
000cea  6008              STR      r0,[r1,#0]  ; k
000cec  e00b              B        |L151.3334|
                  |L151.3310|
;;;2032   		{
;;;2033   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000cee  480d              LDR      r0,|L151.3364|
000cf0  4a24              LDR      r2,|L151.3460|
000cf2  6812              LDR      r2,[r2,#0]  ; k
000cf4  5c81              LDRB     r1,[r0,r2]
000cf6  4806              LDR      r0,|L151.3344|
000cf8  f7fffffe          BL       uart_putchar
000cfc  4821              LDR      r0,|L151.3460|
000cfe  6800              LDR      r0,[r0,#0]            ;2031  ; k
000d00  1c40              ADDS     r0,r0,#1              ;2031
000d02  4920              LDR      r1,|L151.3460|
000d04  6008              STR      r0,[r1,#0]            ;2031  ; k
                  |L151.3334|
000d06  4807              LDR      r0,|L151.3364|
000d08  f7fffffe          BL       strlen
000d0c  491d              LDR      r1,|L151.3460|
000d0e  e04b              B        |L151.3496|
                  |L151.3344|
                          DCD      0x4006b000
                  |L151.3348|
                          DCD      ||.conststring||+0x70
                  |L151.3352|
                          DCD      uart_string_gsm
                  |L151.3356|
                          DCD      ||.conststring||+0xe0
                  |L151.3360|
                          DCD      tout
                  |L151.3364|
                          DCD      data
                  |L151.3368|
                          DCD      0x400ff080
                  |L151.3372|
                          DCD      ||.conststring||+0x10
                  |L151.3376|
                          DCD      ||.conststring||+0x18
                  |L151.3380|
                          DCD      ||.conststring||+0x2c
                  |L151.3384|
                          DCD      ||.conststring||+0x69c
                  |L151.3388|
                          DCD      ||.conststring||+0x42c
                  |L151.3392|
                          DCD      at_
                  |L151.3396|
                          DCD      apn
                  |L151.3400|
                          DCD      ||.conststring||+0x6ac
                  |L151.3404|
                          DCD      tmeout
                  |L151.3408|
                          DCD      ||.conststring||+0x618
                  |L151.3412|
                          DCD      ||.conststring||+0x6c0
                  |L151.3416|
                          DCD      ||.conststring||+0x6d0
                  |L151.3420|
                          DCD      port
                  |L151.3424|
                          DCD      ||ip||
                  |L151.3428|
                          DCD      ||.conststring||+0x6e0
                  |L151.3432|
                          DCD      ||.conststring||+0x650
                  |L151.3436|
                          DCD      ||.conststring||+0x700
                  |L151.3440|
                          DCD      ||.conststring||+0x20
                  |L151.3444|
                          DCD      ||.conststring||+0x658
                  |L151.3448|
                          DCD      0x00001388
                  |L151.3452|
                          DCD      qwe
                  |L151.3456|
                          DCD      ||k2||
                  |L151.3460|
                          DCD      k
                  |L151.3464|
                          DCD      ||.conststring||+0x608
                  |L151.3468|
                          DCD      ||q1||
                  |L151.3472|
                          DCD      ||q2||
                  |L151.3476|
                          DCD      ||.conststring||+0x610
                  |L151.3480|
                          DCD      ||q3||
                  |L151.3484|
                          DCD      ||q4||
                  |L151.3488|
                          DCD      drive
                  |L151.3492|
                          DCD      ||.conststring||+0x430
                  |L151.3496|
000da8  6809              LDR      r1,[r1,#0]            ;2031  ; k
000daa  4288              CMP      r0,r1                 ;2031
000dac  d89f              BHI      |L151.3310|
;;;2034   		}	
;;;2035   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000dae  210a              MOVS     r1,#0xa
000db0  48fe              LDR      r0,|L151.4524|
000db2  f7fffffe          BL       uart_putchar
000db6  210a              MOVS     r1,#0xa
000db8  48fc              LDR      r0,|L151.4524|
000dba  f7fffffe          BL       uart_putchar
000dbe  210a              MOVS     r1,#0xa
000dc0  48fa              LDR      r0,|L151.4524|
000dc2  f7fffffe          BL       uart_putchar
000dc6  210a              MOVS     r1,#0xa
000dc8  48f8              LDR      r0,|L151.4524|
000dca  f7fffffe          BL       uart_putchar
000dce  210a              MOVS     r1,#0xa
000dd0  48f6              LDR      r0,|L151.4524|
000dd2  f7fffffe          BL       uart_putchar
000dd6  210a              MOVS     r1,#0xa
000dd8  48f4              LDR      r0,|L151.4524|
000dda  f7fffffe          BL       uart_putchar
000dde  210a              MOVS     r1,#0xa
000de0  48f2              LDR      r0,|L151.4524|
000de2  f7fffffe          BL       uart_putchar
000de6  210a              MOVS     r1,#0xa
000de8  48f0              LDR      r0,|L151.4524|
000dea  f7fffffe          BL       uart_putchar
000dee  210a              MOVS     r1,#0xa
000df0  48ee              LDR      r0,|L151.4524|
000df2  f7fffffe          BL       uart_putchar
000df6  210a              MOVS     r1,#0xa
000df8  48ec              LDR      r0,|L151.4524|
000dfa  f7fffffe          BL       uart_putchar
000dfe  210a              MOVS     r1,#0xa
000e00  48ea              LDR      r0,|L151.4524|
000e02  f7fffffe          BL       uart_putchar
000e06  210a              MOVS     r1,#0xa
000e08  48e8              LDR      r0,|L151.4524|
000e0a  f7fffffe          BL       uart_putchar
000e0e  210a              MOVS     r1,#0xa
000e10  48e6              LDR      r0,|L151.4524|
000e12  f7fffffe          BL       uart_putchar
000e16  210a              MOVS     r1,#0xa
000e18  48e4              LDR      r0,|L151.4524|
000e1a  f7fffffe          BL       uart_putchar
000e1e  210a              MOVS     r1,#0xa
000e20  48e2              LDR      r0,|L151.4524|
000e22  f7fffffe          BL       uart_putchar
000e26  210a              MOVS     r1,#0xa
000e28  48e0              LDR      r0,|L151.4524|
000e2a  f7fffffe          BL       uart_putchar
000e2e  210a              MOVS     r1,#0xa
000e30  48de              LDR      r0,|L151.4524|
000e32  f7fffffe          BL       uart_putchar
000e36  210a              MOVS     r1,#0xa
000e38  48dc              LDR      r0,|L151.4524|
000e3a  f7fffffe          BL       uart_putchar
000e3e  210a              MOVS     r1,#0xa
000e40  48da              LDR      r0,|L151.4524|
000e42  f7fffffe          BL       uart_putchar
000e46  210a              MOVS     r1,#0xa
000e48  48d8              LDR      r0,|L151.4524|
000e4a  f7fffffe          BL       uart_putchar
000e4e  210a              MOVS     r1,#0xa
000e50  48d6              LDR      r0,|L151.4524|
000e52  f7fffffe          BL       uart_putchar
000e56  210a              MOVS     r1,#0xa
000e58  48d4              LDR      r0,|L151.4524|
000e5a  f7fffffe          BL       uart_putchar
000e5e  210a              MOVS     r1,#0xa
000e60  48d2              LDR      r0,|L151.4524|
000e62  f7fffffe          BL       uart_putchar
000e66  210a              MOVS     r1,#0xa
000e68  48d0              LDR      r0,|L151.4524|
000e6a  f7fffffe          BL       uart_putchar
000e6e  210a              MOVS     r1,#0xa
000e70  48ce              LDR      r0,|L151.4524|
000e72  f7fffffe          BL       uart_putchar
000e76  210a              MOVS     r1,#0xa
000e78  48cc              LDR      r0,|L151.4524|
000e7a  f7fffffe          BL       uart_putchar
000e7e  210a              MOVS     r1,#0xa
000e80  48ca              LDR      r0,|L151.4524|
000e82  f7fffffe          BL       uart_putchar
000e86  210a              MOVS     r1,#0xa
000e88  48c8              LDR      r0,|L151.4524|
000e8a  f7fffffe          BL       uart_putchar
000e8e  210a              MOVS     r1,#0xa
000e90  48c6              LDR      r0,|L151.4524|
000e92  f7fffffe          BL       uart_putchar
000e96  210a              MOVS     r1,#0xa
000e98  48c4              LDR      r0,|L151.4524|
000e9a  f7fffffe          BL       uart_putchar
000e9e  210a              MOVS     r1,#0xa
000ea0  48c2              LDR      r0,|L151.4524|
000ea2  f7fffffe          BL       uart_putchar
000ea6  210a              MOVS     r1,#0xa
000ea8  48c0              LDR      r0,|L151.4524|
000eaa  f7fffffe          BL       uart_putchar
000eae  210a              MOVS     r1,#0xa
000eb0  48be              LDR      r0,|L151.4524|
000eb2  f7fffffe          BL       uart_putchar
000eb6  210a              MOVS     r1,#0xa
000eb8  48bc              LDR      r0,|L151.4524|
000eba  f7fffffe          BL       uart_putchar
000ebe  210a              MOVS     r1,#0xa
000ec0  48ba              LDR      r0,|L151.4524|
000ec2  f7fffffe          BL       uart_putchar
000ec6  210a              MOVS     r1,#0xa
000ec8  48b8              LDR      r0,|L151.4524|
000eca  f7fffffe          BL       uart_putchar
000ece  210a              MOVS     r1,#0xa
000ed0  48b6              LDR      r0,|L151.4524|
000ed2  f7fffffe          BL       uart_putchar
000ed6  210a              MOVS     r1,#0xa
000ed8  48b4              LDR      r0,|L151.4524|
000eda  f7fffffe          BL       uart_putchar
000ede  210a              MOVS     r1,#0xa
000ee0  48b2              LDR      r0,|L151.4524|
000ee2  f7fffffe          BL       uart_putchar
000ee6  210a              MOVS     r1,#0xa
000ee8  48b0              LDR      r0,|L151.4524|
000eea  f7fffffe          BL       uart_putchar
000eee  210a              MOVS     r1,#0xa
000ef0  48ae              LDR      r0,|L151.4524|
000ef2  f7fffffe          BL       uart_putchar
000ef6  210a              MOVS     r1,#0xa
000ef8  48ac              LDR      r0,|L151.4524|
000efa  f7fffffe          BL       uart_putchar
000efe  210a              MOVS     r1,#0xa
000f00  48aa              LDR      r0,|L151.4524|
000f02  f7fffffe          BL       uart_putchar
000f06  210a              MOVS     r1,#0xa
000f08  48a8              LDR      r0,|L151.4524|
000f0a  f7fffffe          BL       uart_putchar
000f0e  210a              MOVS     r1,#0xa
000f10  48a6              LDR      r0,|L151.4524|
000f12  f7fffffe          BL       uart_putchar
000f16  210a              MOVS     r1,#0xa
000f18  48a4              LDR      r0,|L151.4524|
000f1a  f7fffffe          BL       uart_putchar
000f1e  210a              MOVS     r1,#0xa
000f20  48a2              LDR      r0,|L151.4524|
000f22  f7fffffe          BL       uart_putchar
000f26  210a              MOVS     r1,#0xa
000f28  48a0              LDR      r0,|L151.4524|
000f2a  f7fffffe          BL       uart_putchar
000f2e  210a              MOVS     r1,#0xa
000f30  489e              LDR      r0,|L151.4524|
000f32  f7fffffe          BL       uart_putchar
000f36  210a              MOVS     r1,#0xa
000f38  489c              LDR      r0,|L151.4524|
000f3a  f7fffffe          BL       uart_putchar
000f3e  210a              MOVS     r1,#0xa
000f40  489a              LDR      r0,|L151.4524|
000f42  f7fffffe          BL       uart_putchar
000f46  210a              MOVS     r1,#0xa
000f48  4898              LDR      r0,|L151.4524|
000f4a  f7fffffe          BL       uart_putchar
000f4e  210a              MOVS     r1,#0xa
000f50  4896              LDR      r0,|L151.4524|
000f52  f7fffffe          BL       uart_putchar
000f56  210a              MOVS     r1,#0xa
000f58  4894              LDR      r0,|L151.4524|
000f5a  f7fffffe          BL       uart_putchar
000f5e  210a              MOVS     r1,#0xa
000f60  4892              LDR      r0,|L151.4524|
000f62  f7fffffe          BL       uart_putchar
000f66  210a              MOVS     r1,#0xa
000f68  4890              LDR      r0,|L151.4524|
000f6a  f7fffffe          BL       uart_putchar
000f6e  210a              MOVS     r1,#0xa
000f70  488e              LDR      r0,|L151.4524|
000f72  f7fffffe          BL       uart_putchar
;;;2036   									//memset(data,0,1000);
;;;2037   														//timer counts to wait for characters in uart 1 									
;;;2038   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000f76  bf00              NOP      
                  |L151.3960|
000f78  498d              LDR      r1,|L151.4528|
000f7a  488e              LDR      r0,|L151.4532|
000f7c  f7fffffe          BL       strstr
000f80  2800              CMP      r0,#0
000f82  d109              BNE      |L151.3992|
000f84  498c              LDR      r1,|L151.4536|
000f86  488b              LDR      r0,|L151.4532|
000f88  f7fffffe          BL       strstr
000f8c  2800              CMP      r0,#0
000f8e  d103              BNE      |L151.3992|
000f90  488a              LDR      r0,|L151.4540|
000f92  6800              LDR      r0,[r0,#0]  ; tout
000f94  2805              CMP      r0,#5
000f96  ddef              BLE      |L151.3960|
                  |L151.3992|
;;;2039   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2040   									}
;;;2041   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000f98  f7fffffe          BL       clear
;;;2042   									//clear();
;;;2043   									memset(data,0,strlen(data));
000f9c  4888              LDR      r0,|L151.4544|
000f9e  f7fffffe          BL       strlen
000fa2  4604              MOV      r4,r0
000fa4  4621              MOV      r1,r4
000fa6  4886              LDR      r0,|L151.4544|
000fa8  f7fffffe          BL       __aeabi_memclr
;;;2044   									clear();
000fac  f7fffffe          BL       clear
                  |L151.4016|
;;;2045   
;;;2046   								
;;;2047   
;;;2048   break;
000fb0  e3fe              B        |L151.6064|
                  |L151.4018|
;;;2049   //log_it();
;;;2050   }
;;;2051   			
;;;2052   			
;;;2053   			
;;;2054   			
;;;2055   			
;;;2056   			}
;;;2057   			else
;;;2058   			{
;;;2059   			
;;;2060   			
;;;2061   		delay(100);
000fb2  2064              MOVS     r0,#0x64
000fb4  f7fffffe          BL       delay
;;;2062   		clear();//memset(uart_string_gsm,0,5000);
000fb8  f7fffffe          BL       clear
;;;2063   	
;;;2064   	memset(at_,0,100);
000fbc  2164              MOVS     r1,#0x64
000fbe  4881              LDR      r0,|L151.4548|
000fc0  f7fffffe          BL       __aeabi_memclr
;;;2065   	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000fc4  487e              LDR      r0,|L151.4544|
000fc6  f7fffffe          BL       strlen
000fca  1c44              ADDS     r4,r0,#1
000fcc  4623              MOV      r3,r4
000fce  4a7e              LDR      r2,|L151.4552|
000fd0  497e              LDR      r1,|L151.4556|
000fd2  487c              LDR      r0,|L151.4548|
000fd4  f7fffffe          BL       __2sprintf
;;;2066   	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000fd8  2005              MOVS     r0,#5
000fda  4b77              LDR      r3,|L151.4536|
000fdc  4a7c              LDR      r2,|L151.4560|
000fde  497d              LDR      r1,|L151.4564|
000fe0  9000              STR      r0,[sp,#0]
000fe2  4878              LDR      r0,|L151.4548|
000fe4  f7fffffe          BL       send_SD
;;;2067   	
;;;2068   	clear();	
000fe8  f7fffffe          BL       clear
;;;2069   									k2=0;									//string array counter for uart 1
000fec  2000              MOVS     r0,#0
000fee  497a              LDR      r1,|L151.4568|
000ff0  6008              STR      r0,[r1,#0]  ; k2
;;;2070   									tout=0;	
000ff2  4972              LDR      r1,|L151.4540|
000ff4  6008              STR      r0,[r1,#0]  ; tout
;;;2071   		for(k=0;k<strlen(data);k++)
000ff6  4979              LDR      r1,|L151.4572|
000ff8  6008              STR      r0,[r1,#0]  ; k
000ffa  e00b              B        |L151.4116|
                  |L151.4092|
;;;2072   		{
;;;2073   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000ffc  4870              LDR      r0,|L151.4544|
000ffe  4a77              LDR      r2,|L151.4572|
001000  6812              LDR      r2,[r2,#0]  ; k
001002  5c81              LDRB     r1,[r0,r2]
001004  4869              LDR      r0,|L151.4524|
001006  f7fffffe          BL       uart_putchar
00100a  4874              LDR      r0,|L151.4572|
00100c  6800              LDR      r0,[r0,#0]            ;2071  ; k
00100e  1c40              ADDS     r0,r0,#1              ;2071
001010  4972              LDR      r1,|L151.4572|
001012  6008              STR      r0,[r1,#0]            ;2071  ; k
                  |L151.4116|
001014  486a              LDR      r0,|L151.4544|
001016  f7fffffe          BL       strlen
00101a  4970              LDR      r1,|L151.4572|
00101c  6809              LDR      r1,[r1,#0]            ;2071  ; k
00101e  4288              CMP      r0,r1                 ;2071
001020  d8ec              BHI      |L151.4092|
;;;2074   		}	
;;;2075   		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001022  210a              MOVS     r1,#0xa
001024  4861              LDR      r0,|L151.4524|
001026  f7fffffe          BL       uart_putchar
00102a  210a              MOVS     r1,#0xa
00102c  485f              LDR      r0,|L151.4524|
00102e  f7fffffe          BL       uart_putchar
001032  210a              MOVS     r1,#0xa
001034  485d              LDR      r0,|L151.4524|
001036  f7fffffe          BL       uart_putchar
00103a  210a              MOVS     r1,#0xa
00103c  485b              LDR      r0,|L151.4524|
00103e  f7fffffe          BL       uart_putchar
001042  210a              MOVS     r1,#0xa
001044  4859              LDR      r0,|L151.4524|
001046  f7fffffe          BL       uart_putchar
00104a  210a              MOVS     r1,#0xa
00104c  4857              LDR      r0,|L151.4524|
00104e  f7fffffe          BL       uart_putchar
001052  210a              MOVS     r1,#0xa
001054  4855              LDR      r0,|L151.4524|
001056  f7fffffe          BL       uart_putchar
00105a  210a              MOVS     r1,#0xa
00105c  4853              LDR      r0,|L151.4524|
00105e  f7fffffe          BL       uart_putchar
001062  210a              MOVS     r1,#0xa
001064  4851              LDR      r0,|L151.4524|
001066  f7fffffe          BL       uart_putchar
00106a  210a              MOVS     r1,#0xa
00106c  484f              LDR      r0,|L151.4524|
00106e  f7fffffe          BL       uart_putchar
001072  210a              MOVS     r1,#0xa
001074  484d              LDR      r0,|L151.4524|
001076  e000              B        |L151.4218|
                  |L151.4216|
001078  e3fe              B        |L151.6264|
                  |L151.4218|
00107a  f7fffffe          BL       uart_putchar
00107e  210a              MOVS     r1,#0xa
001080  484a              LDR      r0,|L151.4524|
001082  f7fffffe          BL       uart_putchar
001086  210a              MOVS     r1,#0xa
001088  4848              LDR      r0,|L151.4524|
00108a  f7fffffe          BL       uart_putchar
00108e  210a              MOVS     r1,#0xa
001090  4846              LDR      r0,|L151.4524|
001092  f7fffffe          BL       uart_putchar
001096  210a              MOVS     r1,#0xa
001098  4844              LDR      r0,|L151.4524|
00109a  f7fffffe          BL       uart_putchar
00109e  210a              MOVS     r1,#0xa
0010a0  4842              LDR      r0,|L151.4524|
0010a2  f7fffffe          BL       uart_putchar
0010a6  210a              MOVS     r1,#0xa
0010a8  4840              LDR      r0,|L151.4524|
0010aa  f7fffffe          BL       uart_putchar
0010ae  210a              MOVS     r1,#0xa
0010b0  483e              LDR      r0,|L151.4524|
0010b2  f7fffffe          BL       uart_putchar
0010b6  210a              MOVS     r1,#0xa
0010b8  483c              LDR      r0,|L151.4524|
0010ba  f7fffffe          BL       uart_putchar
0010be  210a              MOVS     r1,#0xa
0010c0  483a              LDR      r0,|L151.4524|
0010c2  f7fffffe          BL       uart_putchar
0010c6  210a              MOVS     r1,#0xa
0010c8  4838              LDR      r0,|L151.4524|
0010ca  f7fffffe          BL       uart_putchar
0010ce  210a              MOVS     r1,#0xa
0010d0  4836              LDR      r0,|L151.4524|
0010d2  f7fffffe          BL       uart_putchar
0010d6  210a              MOVS     r1,#0xa
0010d8  4834              LDR      r0,|L151.4524|
0010da  f7fffffe          BL       uart_putchar
0010de  210a              MOVS     r1,#0xa
0010e0  4832              LDR      r0,|L151.4524|
0010e2  f7fffffe          BL       uart_putchar
0010e6  210a              MOVS     r1,#0xa
0010e8  4830              LDR      r0,|L151.4524|
0010ea  f7fffffe          BL       uart_putchar
0010ee  210a              MOVS     r1,#0xa
0010f0  482e              LDR      r0,|L151.4524|
0010f2  f7fffffe          BL       uart_putchar
0010f6  210a              MOVS     r1,#0xa
0010f8  482c              LDR      r0,|L151.4524|
0010fa  f7fffffe          BL       uart_putchar
0010fe  210a              MOVS     r1,#0xa
001100  482a              LDR      r0,|L151.4524|
001102  f7fffffe          BL       uart_putchar
001106  210a              MOVS     r1,#0xa
001108  4828              LDR      r0,|L151.4524|
00110a  f7fffffe          BL       uart_putchar
00110e  210a              MOVS     r1,#0xa
001110  4826              LDR      r0,|L151.4524|
001112  f7fffffe          BL       uart_putchar
001116  210a              MOVS     r1,#0xa
001118  4824              LDR      r0,|L151.4524|
00111a  f7fffffe          BL       uart_putchar
00111e  210a              MOVS     r1,#0xa
001120  4822              LDR      r0,|L151.4524|
001122  f7fffffe          BL       uart_putchar
001126  210a              MOVS     r1,#0xa
001128  4820              LDR      r0,|L151.4524|
00112a  f7fffffe          BL       uart_putchar
00112e  210a              MOVS     r1,#0xa
001130  481e              LDR      r0,|L151.4524|
001132  f7fffffe          BL       uart_putchar
001136  210a              MOVS     r1,#0xa
001138  481c              LDR      r0,|L151.4524|
00113a  f7fffffe          BL       uart_putchar
00113e  210a              MOVS     r1,#0xa
001140  481a              LDR      r0,|L151.4524|
001142  f7fffffe          BL       uart_putchar
001146  210a              MOVS     r1,#0xa
001148  4818              LDR      r0,|L151.4524|
00114a  f7fffffe          BL       uart_putchar
00114e  210a              MOVS     r1,#0xa
001150  4816              LDR      r0,|L151.4524|
001152  f7fffffe          BL       uart_putchar
001156  210a              MOVS     r1,#0xa
001158  4814              LDR      r0,|L151.4524|
00115a  f7fffffe          BL       uart_putchar
00115e  210a              MOVS     r1,#0xa
001160  4812              LDR      r0,|L151.4524|
001162  f7fffffe          BL       uart_putchar
001166  210a              MOVS     r1,#0xa
001168  4810              LDR      r0,|L151.4524|
00116a  f7fffffe          BL       uart_putchar
00116e  210a              MOVS     r1,#0xa
001170  480e              LDR      r0,|L151.4524|
001172  f7fffffe          BL       uart_putchar
001176  210a              MOVS     r1,#0xa
001178  480c              LDR      r0,|L151.4524|
00117a  f7fffffe          BL       uart_putchar
00117e  210a              MOVS     r1,#0xa
001180  480a              LDR      r0,|L151.4524|
001182  f7fffffe          BL       uart_putchar
001186  210a              MOVS     r1,#0xa
001188  4808              LDR      r0,|L151.4524|
00118a  f7fffffe          BL       uart_putchar
00118e  210a              MOVS     r1,#0xa
001190  4806              LDR      r0,|L151.4524|
001192  f7fffffe          BL       uart_putchar
001196  210a              MOVS     r1,#0xa
001198  4804              LDR      r0,|L151.4524|
00119a  f7fffffe          BL       uart_putchar
00119e  210a              MOVS     r1,#0xa
0011a0  4802              LDR      r0,|L151.4524|
0011a2  f7fffffe          BL       uart_putchar
0011a6  210a              MOVS     r1,#0xa
0011a8  4800              LDR      r0,|L151.4524|
0011aa  e019              B        |L151.4576|
                  |L151.4524|
                          DCD      0x4006b000
                  |L151.4528|
                          DCD      ||.conststring||+0x70
                  |L151.4532|
                          DCD      uart_string_gsm
                  |L151.4536|
                          DCD      ||.conststring||+0xe0
                  |L151.4540|
                          DCD      tout
                  |L151.4544|
                          DCD      data
                  |L151.4548|
                          DCD      at_
                  |L151.4552|
                          DCD      drive
                  |L151.4556|
                          DCD      ||.conststring||+0x430
                  |L151.4560|
                          DCD      ||.conststring||+0x18
                  |L151.4564|
                          DCD      ||.conststring||+0x20
                  |L151.4568|
                          DCD      ||k2||
                  |L151.4572|
                          DCD      k
                  |L151.4576|
0011e0  f7fffffe          BL       uart_putchar
0011e4  210a              MOVS     r1,#0xa
0011e6  48fb              LDR      r0,|L151.5588|
0011e8  f7fffffe          BL       uart_putchar
0011ec  210a              MOVS     r1,#0xa
0011ee  48f9              LDR      r0,|L151.5588|
0011f0  f7fffffe          BL       uart_putchar
0011f4  210a              MOVS     r1,#0xa
0011f6  48f7              LDR      r0,|L151.5588|
0011f8  f7fffffe          BL       uart_putchar
0011fc  210a              MOVS     r1,#0xa
0011fe  48f5              LDR      r0,|L151.5588|
001200  f7fffffe          BL       uart_putchar
001204  210a              MOVS     r1,#0xa
001206  48f3              LDR      r0,|L151.5588|
001208  f7fffffe          BL       uart_putchar
00120c  210a              MOVS     r1,#0xa
00120e  48f1              LDR      r0,|L151.5588|
001210  f7fffffe          BL       uart_putchar
001214  210a              MOVS     r1,#0xa
001216  48ef              LDR      r0,|L151.5588|
001218  f7fffffe          BL       uart_putchar
00121c  210a              MOVS     r1,#0xa
00121e  48ed              LDR      r0,|L151.5588|
001220  f7fffffe          BL       uart_putchar
;;;2076   									//memset(data,0,1000);
;;;2077   														//timer counts to wait for characters in uart 1 									
;;;2078   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001224  bf00              NOP      
                  |L151.4646|
001226  49ec              LDR      r1,|L151.5592|
001228  48ec              LDR      r0,|L151.5596|
00122a  f7fffffe          BL       strstr
00122e  2800              CMP      r0,#0
001230  d109              BNE      |L151.4678|
001232  49eb              LDR      r1,|L151.5600|
001234  48e9              LDR      r0,|L151.5596|
001236  f7fffffe          BL       strstr
00123a  2800              CMP      r0,#0
00123c  d103              BNE      |L151.4678|
00123e  48e9              LDR      r0,|L151.5604|
001240  6800              LDR      r0,[r0,#0]  ; tout
001242  2805              CMP      r0,#5
001244  ddef              BLE      |L151.4646|
                  |L151.4678|
;;;2079   									{}
;;;2080   	                clear();
001246  f7fffffe          BL       clear
;;;2081   									memset(data,0,strlen(data));
00124a  48e7              LDR      r0,|L151.5608|
00124c  f7fffffe          BL       strlen
001250  4604              MOV      r4,r0
001252  4621              MOV      r1,r4
001254  48e4              LDR      r0,|L151.5608|
001256  f7fffffe          BL       __aeabi_memclr
;;;2082   									clear();
00125a  f7fffffe          BL       clear
;;;2083   
;;;2084   								
;;;2085   			break;
00125e  e6a7              B        |L151.4016|
                  |L151.4704|
;;;2086   			///returning; 
;;;2087   			//log_it();
;;;2088   			}
;;;2089   
;;;2090   
;;;2091   }
;;;2092   
;;;2093   //if(notsentflag==0){cursorvaluene=cursor_val(sd_data);cursorvaluepr+=cursorvaluene;}
;;;2094   
;;;2095   
;;;2096   }
;;;2097   else{
;;;2098   	remove_all_chars(data, '\n', '\n');
001260  220a              MOVS     r2,#0xa
001262  4611              MOV      r1,r2
001264  48e0              LDR      r0,|L151.5608|
001266  f7fffffe          BL       remove_all_chars
;;;2099   			strcat(data,"CH\n");	
00126a  49e0              LDR      r1,|L151.5612|
00126c  48de              LDR      r0,|L151.5608|
00126e  f7fffffe          BL       strcat
;;;2100   			
;;;2101   	
;;;2102   	  delay(100);
001272  2064              MOVS     r0,#0x64
001274  f7fffffe          BL       delay
;;;2103   		clear();//memset(uart_string_gsm,0,5000);
001278  f7fffffe          BL       clear
;;;2104   	
;;;2105   	memset(at_,0,100);
00127c  2164              MOVS     r1,#0x64
00127e  48dc              LDR      r0,|L151.5616|
001280  f7fffffe          BL       __aeabi_memclr
;;;2106   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001284  48d8              LDR      r0,|L151.5608|
001286  f7fffffe          BL       strlen
00128a  1c44              ADDS     r4,r0,#1
00128c  4623              MOV      r3,r4
00128e  4ad9              LDR      r2,|L151.5620|
001290  49d9              LDR      r1,|L151.5624|
001292  48d7              LDR      r0,|L151.5616|
001294  f7fffffe          BL       __2sprintf
;;;2107   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001298  2005              MOVS     r0,#5
00129a  4bd1              LDR      r3,|L151.5600|
00129c  4ad7              LDR      r2,|L151.5628|
00129e  49d8              LDR      r1,|L151.5632|
0012a0  9000              STR      r0,[sp,#0]
0012a2  48d3              LDR      r0,|L151.5616|
0012a4  f7fffffe          BL       send_SD
;;;2108   clear();	
0012a8  f7fffffe          BL       clear
;;;2109   									k2=0;									//string array counter for uart 1
0012ac  2000              MOVS     r0,#0
0012ae  49d5              LDR      r1,|L151.5636|
0012b0  6008              STR      r0,[r1,#0]  ; k2
;;;2110   									tout=0;	
0012b2  49cc              LDR      r1,|L151.5604|
0012b4  6008              STR      r0,[r1,#0]  ; tout
;;;2111   		for(k=0;k<strlen(data);k++)
0012b6  49d4              LDR      r1,|L151.5640|
0012b8  6008              STR      r0,[r1,#0]  ; k
0012ba  e00b              B        |L151.4820|
                  |L151.4796|
;;;2112   		{
;;;2113   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0012bc  48ca              LDR      r0,|L151.5608|
0012be  4ad2              LDR      r2,|L151.5640|
0012c0  6812              LDR      r2,[r2,#0]  ; k
0012c2  5c81              LDRB     r1,[r0,r2]
0012c4  48c3              LDR      r0,|L151.5588|
0012c6  f7fffffe          BL       uart_putchar
0012ca  48cf              LDR      r0,|L151.5640|
0012cc  6800              LDR      r0,[r0,#0]            ;2111  ; k
0012ce  1c40              ADDS     r0,r0,#1              ;2111
0012d0  49cd              LDR      r1,|L151.5640|
0012d2  6008              STR      r0,[r1,#0]            ;2111  ; k
                  |L151.4820|
0012d4  48c4              LDR      r0,|L151.5608|
0012d6  f7fffffe          BL       strlen
0012da  49cb              LDR      r1,|L151.5640|
0012dc  6809              LDR      r1,[r1,#0]            ;2111  ; k
0012de  4288              CMP      r0,r1                 ;2111
0012e0  d8ec              BHI      |L151.4796|
;;;2114   		}	
;;;2115   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0012e2  210a              MOVS     r1,#0xa
0012e4  48bb              LDR      r0,|L151.5588|
0012e6  f7fffffe          BL       uart_putchar
0012ea  210a              MOVS     r1,#0xa
0012ec  48b9              LDR      r0,|L151.5588|
0012ee  f7fffffe          BL       uart_putchar
0012f2  210a              MOVS     r1,#0xa
0012f4  48b7              LDR      r0,|L151.5588|
0012f6  f7fffffe          BL       uart_putchar
0012fa  210a              MOVS     r1,#0xa
0012fc  48b5              LDR      r0,|L151.5588|
0012fe  f7fffffe          BL       uart_putchar
001302  210a              MOVS     r1,#0xa
001304  48b3              LDR      r0,|L151.5588|
001306  f7fffffe          BL       uart_putchar
00130a  210a              MOVS     r1,#0xa
00130c  48b1              LDR      r0,|L151.5588|
00130e  f7fffffe          BL       uart_putchar
001312  210a              MOVS     r1,#0xa
001314  48af              LDR      r0,|L151.5588|
001316  f7fffffe          BL       uart_putchar
00131a  210a              MOVS     r1,#0xa
00131c  48ad              LDR      r0,|L151.5588|
00131e  f7fffffe          BL       uart_putchar
001322  210a              MOVS     r1,#0xa
001324  48ab              LDR      r0,|L151.5588|
001326  f7fffffe          BL       uart_putchar
00132a  210a              MOVS     r1,#0xa
00132c  48a9              LDR      r0,|L151.5588|
00132e  f7fffffe          BL       uart_putchar
001332  210a              MOVS     r1,#0xa
001334  48a7              LDR      r0,|L151.5588|
001336  f7fffffe          BL       uart_putchar
00133a  210a              MOVS     r1,#0xa
00133c  48a5              LDR      r0,|L151.5588|
00133e  f7fffffe          BL       uart_putchar
001342  210a              MOVS     r1,#0xa
001344  48a3              LDR      r0,|L151.5588|
001346  f7fffffe          BL       uart_putchar
00134a  210a              MOVS     r1,#0xa
00134c  48a1              LDR      r0,|L151.5588|
00134e  f7fffffe          BL       uart_putchar
001352  210a              MOVS     r1,#0xa
001354  489f              LDR      r0,|L151.5588|
001356  f7fffffe          BL       uart_putchar
00135a  210a              MOVS     r1,#0xa
00135c  489d              LDR      r0,|L151.5588|
00135e  f7fffffe          BL       uart_putchar
001362  210a              MOVS     r1,#0xa
001364  489b              LDR      r0,|L151.5588|
001366  f7fffffe          BL       uart_putchar
00136a  210a              MOVS     r1,#0xa
00136c  4899              LDR      r0,|L151.5588|
00136e  f7fffffe          BL       uart_putchar
001372  210a              MOVS     r1,#0xa
001374  4897              LDR      r0,|L151.5588|
001376  f7fffffe          BL       uart_putchar
00137a  210a              MOVS     r1,#0xa
00137c  4895              LDR      r0,|L151.5588|
00137e  f7fffffe          BL       uart_putchar
001382  210a              MOVS     r1,#0xa
001384  4893              LDR      r0,|L151.5588|
001386  f7fffffe          BL       uart_putchar
00138a  210a              MOVS     r1,#0xa
00138c  4891              LDR      r0,|L151.5588|
00138e  f7fffffe          BL       uart_putchar
001392  210a              MOVS     r1,#0xa
001394  488f              LDR      r0,|L151.5588|
001396  f7fffffe          BL       uart_putchar
00139a  210a              MOVS     r1,#0xa
00139c  488d              LDR      r0,|L151.5588|
00139e  f7fffffe          BL       uart_putchar
0013a2  210a              MOVS     r1,#0xa
0013a4  488b              LDR      r0,|L151.5588|
0013a6  f7fffffe          BL       uart_putchar
0013aa  210a              MOVS     r1,#0xa
0013ac  4889              LDR      r0,|L151.5588|
0013ae  f7fffffe          BL       uart_putchar
0013b2  210a              MOVS     r1,#0xa
0013b4  4887              LDR      r0,|L151.5588|
0013b6  f7fffffe          BL       uart_putchar
0013ba  210a              MOVS     r1,#0xa
0013bc  4885              LDR      r0,|L151.5588|
0013be  f7fffffe          BL       uart_putchar
0013c2  210a              MOVS     r1,#0xa
0013c4  4883              LDR      r0,|L151.5588|
0013c6  f7fffffe          BL       uart_putchar
0013ca  210a              MOVS     r1,#0xa
0013cc  4881              LDR      r0,|L151.5588|
0013ce  e000              B        |L151.5074|
                  |L151.5072|
0013d0  e3fe              B        |L151.7120|
                  |L151.5074|
0013d2  f7fffffe          BL       uart_putchar
0013d6  210a              MOVS     r1,#0xa
0013d8  487e              LDR      r0,|L151.5588|
0013da  f7fffffe          BL       uart_putchar
0013de  210a              MOVS     r1,#0xa
0013e0  487c              LDR      r0,|L151.5588|
0013e2  f7fffffe          BL       uart_putchar
0013e6  210a              MOVS     r1,#0xa
0013e8  487a              LDR      r0,|L151.5588|
0013ea  f7fffffe          BL       uart_putchar
0013ee  210a              MOVS     r1,#0xa
0013f0  4878              LDR      r0,|L151.5588|
0013f2  f7fffffe          BL       uart_putchar
0013f6  210a              MOVS     r1,#0xa
0013f8  4876              LDR      r0,|L151.5588|
0013fa  f7fffffe          BL       uart_putchar
0013fe  210a              MOVS     r1,#0xa
001400  4874              LDR      r0,|L151.5588|
001402  f7fffffe          BL       uart_putchar
001406  210a              MOVS     r1,#0xa
001408  4872              LDR      r0,|L151.5588|
00140a  f7fffffe          BL       uart_putchar
00140e  210a              MOVS     r1,#0xa
001410  4870              LDR      r0,|L151.5588|
001412  f7fffffe          BL       uart_putchar
001416  210a              MOVS     r1,#0xa
001418  486e              LDR      r0,|L151.5588|
00141a  f7fffffe          BL       uart_putchar
00141e  210a              MOVS     r1,#0xa
001420  486c              LDR      r0,|L151.5588|
001422  f7fffffe          BL       uart_putchar
001426  210a              MOVS     r1,#0xa
001428  486a              LDR      r0,|L151.5588|
00142a  f7fffffe          BL       uart_putchar
00142e  210a              MOVS     r1,#0xa
001430  4868              LDR      r0,|L151.5588|
001432  f7fffffe          BL       uart_putchar
001436  210a              MOVS     r1,#0xa
001438  4866              LDR      r0,|L151.5588|
00143a  f7fffffe          BL       uart_putchar
00143e  210a              MOVS     r1,#0xa
001440  4864              LDR      r0,|L151.5588|
001442  f7fffffe          BL       uart_putchar
001446  210a              MOVS     r1,#0xa
001448  4862              LDR      r0,|L151.5588|
00144a  f7fffffe          BL       uart_putchar
00144e  210a              MOVS     r1,#0xa
001450  4860              LDR      r0,|L151.5588|
001452  f7fffffe          BL       uart_putchar
001456  210a              MOVS     r1,#0xa
001458  485e              LDR      r0,|L151.5588|
00145a  f7fffffe          BL       uart_putchar
00145e  210a              MOVS     r1,#0xa
001460  485c              LDR      r0,|L151.5588|
001462  f7fffffe          BL       uart_putchar
001466  210a              MOVS     r1,#0xa
001468  485a              LDR      r0,|L151.5588|
00146a  f7fffffe          BL       uart_putchar
00146e  210a              MOVS     r1,#0xa
001470  4858              LDR      r0,|L151.5588|
001472  f7fffffe          BL       uart_putchar
001476  210a              MOVS     r1,#0xa
001478  4856              LDR      r0,|L151.5588|
00147a  f7fffffe          BL       uart_putchar
00147e  210a              MOVS     r1,#0xa
001480  4854              LDR      r0,|L151.5588|
001482  f7fffffe          BL       uart_putchar
001486  210a              MOVS     r1,#0xa
001488  4852              LDR      r0,|L151.5588|
00148a  f7fffffe          BL       uart_putchar
00148e  210a              MOVS     r1,#0xa
001490  4850              LDR      r0,|L151.5588|
001492  f7fffffe          BL       uart_putchar
001496  210a              MOVS     r1,#0xa
001498  484e              LDR      r0,|L151.5588|
00149a  f7fffffe          BL       uart_putchar
00149e  210a              MOVS     r1,#0xa
0014a0  484c              LDR      r0,|L151.5588|
0014a2  f7fffffe          BL       uart_putchar
0014a6  210a              MOVS     r1,#0xa
0014a8  484a              LDR      r0,|L151.5588|
0014aa  f7fffffe          BL       uart_putchar
;;;2116   									//memset(data,0,1000);
;;;2117   														//timer counts to wait for characters in uart 1 									
;;;2118   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0014ae  bf00              NOP      
                  |L151.5296|
0014b0  4949              LDR      r1,|L151.5592|
0014b2  484a              LDR      r0,|L151.5596|
0014b4  f7fffffe          BL       strstr
0014b8  2800              CMP      r0,#0
0014ba  d109              BNE      |L151.5328|
0014bc  4948              LDR      r1,|L151.5600|
0014be  4847              LDR      r0,|L151.5596|
0014c0  f7fffffe          BL       strstr
0014c4  2800              CMP      r0,#0
0014c6  d103              BNE      |L151.5328|
0014c8  4846              LDR      r0,|L151.5604|
0014ca  6800              LDR      r0,[r0,#0]  ; tout
0014cc  2805              CMP      r0,#5
0014ce  ddef              BLE      |L151.5296|
                  |L151.5328|
;;;2119   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2120   									}
;;;2121   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0014d0  f7fffffe          BL       clear
;;;2122   									//clear();
;;;2123   									memset(data,0,strlen(data));
0014d4  4844              LDR      r0,|L151.5608|
0014d6  f7fffffe          BL       strlen
0014da  4604              MOV      r4,r0
0014dc  4621              MOV      r1,r4
0014de  4842              LDR      r0,|L151.5608|
0014e0  f7fffffe          BL       __aeabi_memclr
;;;2124   									clear();
0014e4  f7fffffe          BL       clear
;;;2125   
;;;2126   								
;;;2127   	
;;;2128   	
;;;2129   	
;;;2130   	//log_it();
;;;2131   			memset(data,0,strlen(data));
0014e8  483f              LDR      r0,|L151.5608|
0014ea  f7fffffe          BL       strlen
0014ee  4604              MOV      r4,r0
0014f0  4621              MOV      r1,r4
0014f2  483d              LDR      r0,|L151.5608|
0014f4  f7fffffe          BL       __aeabi_memclr
;;;2132   //*****************************tcp_initialization();************************************//
;;;2133   
;;;2134   	
;;;2135   msg_sim800(); 
0014f8  f7fffffe          BL       msg_sim800
;;;2136   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0014fc  2005              MOVS     r0,#5
0014fe  4b38              LDR      r3,|L151.5600|
001500  4a3e              LDR      r2,|L151.5628|
001502  4942              LDR      r1,|L151.5644|
001504  9000              STR      r0,[sp,#0]
001506  4842              LDR      r0,|L151.5648|
001508  f7fffffe          BL       send_GSM
;;;2137   delay(100);
00150c  2064              MOVS     r0,#0x64
00150e  f7fffffe          BL       delay
;;;2138   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
001512  2004              MOVS     r0,#4
001514  4b32              LDR      r3,|L151.5600|
001516  4a3f              LDR      r2,|L151.5652|
001518  493c              LDR      r1,|L151.5644|
00151a  9000              STR      r0,[sp,#0]
00151c  483e              LDR      r0,|L151.5656|
00151e  f7fffffe          BL       send_GSM
;;;2139   GPS_COLLECT2();
001522  f7fffffe          BL       GPS_COLLECT2
;;;2140   strcat(data,"CH\n");		
001526  4931              LDR      r1,|L151.5612|
001528  482f              LDR      r0,|L151.5608|
00152a  f7fffffe          BL       strcat
;;;2141   GPS_COLLECT2();
00152e  f7fffffe          BL       GPS_COLLECT2
;;;2142   strcat(data,"CH\n");	
001532  492e              LDR      r1,|L151.5612|
001534  482c              LDR      r0,|L151.5608|
001536  f7fffffe          BL       strcat
;;;2143   GPS_COLLECT2();
00153a  f7fffffe          BL       GPS_COLLECT2
;;;2144   strcat(data,"CH\n");
00153e  492b              LDR      r1,|L151.5612|
001540  4829              LDR      r0,|L151.5608|
001542  f7fffffe          BL       strcat
;;;2145   cond201=(strstr(uart_string_gsm, "OK"));
001546  4931              LDR      r1,|L151.5644|
001548  4824              LDR      r0,|L151.5596|
00154a  f7fffffe          BL       strstr
00154e  4933              LDR      r1,|L151.5660|
001550  6008              STR      r0,[r1,#0]  ; cond201
;;;2146   cond200=(strstr(uart_string_gsm, "ERROR"));
001552  4923              LDR      r1,|L151.5600|
001554  4821              LDR      r0,|L151.5596|
001556  f7fffffe          BL       strstr
00155a  4931              LDR      r1,|L151.5664|
00155c  6008              STR      r0,[r1,#0]  ; cond200
;;;2147   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00155e  482f              LDR      r0,|L151.5660|
001560  6800              LDR      r0,[r0,#0]  ; cond201
001562  2800              CMP      r0,#0
001564  d101              BNE      |L151.5482|
001566  2001              MOVS     r0,#1
001568  e000              B        |L151.5484|
                  |L151.5482|
00156a  2000              MOVS     r0,#0
                  |L151.5484|
00156c  2800              CMP      r0,#0
                  |L151.5486|
00156e  d07d              BEQ      |L151.5740|
001570  482b              LDR      r0,|L151.5664|
001572  6800              LDR      r0,[r0,#0]  ; cond200
001574  2800              CMP      r0,#0
001576  d101              BNE      |L151.5500|
001578  2001              MOVS     r0,#1
00157a  e000              B        |L151.5502|
                  |L151.5500|
00157c  2000              MOVS     r0,#0
                  |L151.5502|
00157e  2800              CMP      r0,#0
001580  d0f5              BEQ      |L151.5486|
001582  4828              LDR      r0,|L151.5668|
001584  6800              LDR      r0,[r0,#0]  ; sleep_flag
001586  2801              CMP      r0,#1
001588  d0f1              BEQ      |L151.5486|
;;;2148   {
;;;2149   delay(100);
00158a  2064              MOVS     r0,#0x64
00158c  f7fffffe          BL       delay
;;;2150   clear();//memset(uart_string_gsm,0,5000);
001590  f7fffffe          BL       clear
;;;2151   memset(at_,0,100);
001594  2164              MOVS     r1,#0x64
001596  4816              LDR      r0,|L151.5616|
001598  f7fffffe          BL       __aeabi_memclr
;;;2152   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00159c  4812              LDR      r0,|L151.5608|
00159e  f7fffffe          BL       strlen
0015a2  1c44              ADDS     r4,r0,#1
0015a4  4623              MOV      r3,r4
0015a6  4a13              LDR      r2,|L151.5620|
0015a8  4913              LDR      r1,|L151.5624|
0015aa  4811              LDR      r0,|L151.5616|
0015ac  f7fffffe          BL       __2sprintf
;;;2153   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0015b0  2005              MOVS     r0,#5
0015b2  4b0b              LDR      r3,|L151.5600|
0015b4  4a11              LDR      r2,|L151.5628|
0015b6  4912              LDR      r1,|L151.5632|
0015b8  9000              STR      r0,[sp,#0]
0015ba  480d              LDR      r0,|L151.5616|
0015bc  f7fffffe          BL       send_SD
;;;2154   clear();	
0015c0  f7fffffe          BL       clear
;;;2155   k2=0;									//string array counter for uart 1
0015c4  2000              MOVS     r0,#0
0015c6  490f              LDR      r1,|L151.5636|
0015c8  6008              STR      r0,[r1,#0]  ; k2
;;;2156   tout=0;	
0015ca  4906              LDR      r1,|L151.5604|
0015cc  6008              STR      r0,[r1,#0]  ; tout
;;;2157   for(k=0;k<strlen(data);k++)
0015ce  490e              LDR      r1,|L151.5640|
0015d0  6008              STR      r0,[r1,#0]  ; k
0015d2  e035              B        |L151.5696|
                  |L151.5588|
                          DCD      0x4006b000
                  |L151.5592|
                          DCD      ||.conststring||+0x70
                  |L151.5596|
                          DCD      uart_string_gsm
                  |L151.5600|
                          DCD      ||.conststring||+0xe0
                  |L151.5604|
                          DCD      tout
                  |L151.5608|
                          DCD      data
                  |L151.5612|
                          DCD      ||.conststring||+0x42c
                  |L151.5616|
                          DCD      at_
                  |L151.5620|
                          DCD      drive
                  |L151.5624|
                          DCD      ||.conststring||+0x430
                  |L151.5628|
                          DCD      ||.conststring||+0x18
                  |L151.5632|
                          DCD      ||.conststring||+0x20
                  |L151.5636|
                          DCD      ||k2||
                  |L151.5640|
                          DCD      k
                  |L151.5644|
                          DCD      ||.conststring||+0x2c
                  |L151.5648|
                          DCD      ||.conststring||+0x668
                  |L151.5652|
                          DCD      ||.conststring||+0x678
                  |L151.5656|
                          DCD      ||.conststring||+0x68c
                  |L151.5660|
                          DCD      cond201
                  |L151.5664|
                          DCD      cond200
                  |L151.5668|
                          DCD      sleep_flag
                  |L151.5672|
;;;2158   {
;;;2159   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001628  48fd              LDR      r0,|L151.6688|
00162a  4afe              LDR      r2,|L151.6692|
00162c  6812              LDR      r2,[r2,#0]  ; k
00162e  5c81              LDRB     r1,[r0,r2]
001630  48fd              LDR      r0,|L151.6696|
001632  f7fffffe          BL       uart_putchar
001636  48fb              LDR      r0,|L151.6692|
001638  6800              LDR      r0,[r0,#0]            ;2157  ; k
00163a  1c40              ADDS     r0,r0,#1              ;2157
00163c  49f9              LDR      r1,|L151.6692|
00163e  6008              STR      r0,[r1,#0]            ;2157  ; k
                  |L151.5696|
001640  48f7              LDR      r0,|L151.6688|
001642  f7fffffe          BL       strlen
001646  49f7              LDR      r1,|L151.6692|
001648  6809              LDR      r1,[r1,#0]            ;2157  ; k
00164a  4288              CMP      r0,r1                 ;2157
00164c  d8ec              BHI      |L151.5672|
;;;2160   }	
;;;2161   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00164e  210a              MOVS     r1,#0xa
001650  48f5              LDR      r0,|L151.6696|
001652  f7fffffe          BL       uart_putchar
001656  210a              MOVS     r1,#0xa
001658  48f3              LDR      r0,|L151.6696|
00165a  f7fffffe          BL       uart_putchar
00165e  210a              MOVS     r1,#0xa
001660  48f1              LDR      r0,|L151.6696|
001662  f7fffffe          BL       uart_putchar
001666  210a              MOVS     r1,#0xa
001668  48ef              LDR      r0,|L151.6696|
00166a  e000              B        |L151.5742|
                  |L151.5740|
00166c  e100              B        |L151.6256|
                  |L151.5742|
00166e  f7fffffe          BL       uart_putchar
001672  210a              MOVS     r1,#0xa
001674  48ec              LDR      r0,|L151.6696|
001676  f7fffffe          BL       uart_putchar
00167a  210a              MOVS     r1,#0xa
00167c  48ea              LDR      r0,|L151.6696|
00167e  f7fffffe          BL       uart_putchar
001682  210a              MOVS     r1,#0xa
001684  48e8              LDR      r0,|L151.6696|
001686  f7fffffe          BL       uart_putchar
00168a  210a              MOVS     r1,#0xa
00168c  48e6              LDR      r0,|L151.6696|
00168e  f7fffffe          BL       uart_putchar
001692  210a              MOVS     r1,#0xa
001694  48e4              LDR      r0,|L151.6696|
001696  f7fffffe          BL       uart_putchar
00169a  210a              MOVS     r1,#0xa
00169c  48e2              LDR      r0,|L151.6696|
00169e  f7fffffe          BL       uart_putchar
0016a2  210a              MOVS     r1,#0xa
0016a4  48e0              LDR      r0,|L151.6696|
0016a6  f7fffffe          BL       uart_putchar
0016aa  210a              MOVS     r1,#0xa
0016ac  48de              LDR      r0,|L151.6696|
0016ae  f7fffffe          BL       uart_putchar
0016b2  210a              MOVS     r1,#0xa
0016b4  48dc              LDR      r0,|L151.6696|
0016b6  f7fffffe          BL       uart_putchar
0016ba  210a              MOVS     r1,#0xa
0016bc  48da              LDR      r0,|L151.6696|
0016be  f7fffffe          BL       uart_putchar
0016c2  210a              MOVS     r1,#0xa
0016c4  48d8              LDR      r0,|L151.6696|
0016c6  f7fffffe          BL       uart_putchar
0016ca  210a              MOVS     r1,#0xa
0016cc  48d6              LDR      r0,|L151.6696|
0016ce  f7fffffe          BL       uart_putchar
0016d2  210a              MOVS     r1,#0xa
0016d4  48d4              LDR      r0,|L151.6696|
0016d6  f7fffffe          BL       uart_putchar
0016da  210a              MOVS     r1,#0xa
0016dc  48d2              LDR      r0,|L151.6696|
0016de  f7fffffe          BL       uart_putchar
0016e2  210a              MOVS     r1,#0xa
0016e4  48d0              LDR      r0,|L151.6696|
0016e6  f7fffffe          BL       uart_putchar
0016ea  210a              MOVS     r1,#0xa
0016ec  48ce              LDR      r0,|L151.6696|
0016ee  f7fffffe          BL       uart_putchar
0016f2  210a              MOVS     r1,#0xa
0016f4  48cc              LDR      r0,|L151.6696|
0016f6  f7fffffe          BL       uart_putchar
0016fa  210a              MOVS     r1,#0xa
0016fc  48ca              LDR      r0,|L151.6696|
0016fe  f7fffffe          BL       uart_putchar
001702  210a              MOVS     r1,#0xa
001704  48c8              LDR      r0,|L151.6696|
001706  f7fffffe          BL       uart_putchar
00170a  210a              MOVS     r1,#0xa
00170c  48c6              LDR      r0,|L151.6696|
00170e  f7fffffe          BL       uart_putchar
001712  210a              MOVS     r1,#0xa
001714  48c4              LDR      r0,|L151.6696|
001716  f7fffffe          BL       uart_putchar
00171a  210a              MOVS     r1,#0xa
00171c  48c2              LDR      r0,|L151.6696|
00171e  f7fffffe          BL       uart_putchar
001722  210a              MOVS     r1,#0xa
001724  48c0              LDR      r0,|L151.6696|
001726  f7fffffe          BL       uart_putchar
00172a  210a              MOVS     r1,#0xa
00172c  48be              LDR      r0,|L151.6696|
00172e  f7fffffe          BL       uart_putchar
001732  210a              MOVS     r1,#0xa
001734  48bc              LDR      r0,|L151.6696|
001736  f7fffffe          BL       uart_putchar
00173a  210a              MOVS     r1,#0xa
00173c  48ba              LDR      r0,|L151.6696|
00173e  f7fffffe          BL       uart_putchar
001742  210a              MOVS     r1,#0xa
001744  48b8              LDR      r0,|L151.6696|
001746  f7fffffe          BL       uart_putchar
00174a  210a              MOVS     r1,#0xa
00174c  48b6              LDR      r0,|L151.6696|
00174e  f7fffffe          BL       uart_putchar
001752  210a              MOVS     r1,#0xa
001754  48b4              LDR      r0,|L151.6696|
001756  f7fffffe          BL       uart_putchar
00175a  210a              MOVS     r1,#0xa
00175c  48b2              LDR      r0,|L151.6696|
00175e  f7fffffe          BL       uart_putchar
001762  210a              MOVS     r1,#0xa
001764  48b0              LDR      r0,|L151.6696|
001766  f7fffffe          BL       uart_putchar
00176a  210a              MOVS     r1,#0xa
00176c  48ae              LDR      r0,|L151.6696|
00176e  f7fffffe          BL       uart_putchar
001772  210a              MOVS     r1,#0xa
001774  48ac              LDR      r0,|L151.6696|
001776  f7fffffe          BL       uart_putchar
00177a  210a              MOVS     r1,#0xa
00177c  48aa              LDR      r0,|L151.6696|
00177e  f7fffffe          BL       uart_putchar
001782  210a              MOVS     r1,#0xa
001784  48a8              LDR      r0,|L151.6696|
001786  f7fffffe          BL       uart_putchar
00178a  210a              MOVS     r1,#0xa
00178c  48a6              LDR      r0,|L151.6696|
00178e  f7fffffe          BL       uart_putchar
001792  210a              MOVS     r1,#0xa
001794  48a4              LDR      r0,|L151.6696|
001796  f7fffffe          BL       uart_putchar
00179a  210a              MOVS     r1,#0xa
00179c  48a2              LDR      r0,|L151.6696|
00179e  f7fffffe          BL       uart_putchar
0017a2  210a              MOVS     r1,#0xa
0017a4  48a0              LDR      r0,|L151.6696|
0017a6  f7fffffe          BL       uart_putchar
0017aa  210a              MOVS     r1,#0xa
0017ac  489e              LDR      r0,|L151.6696|
0017ae  e000              B        |L151.6066|
                  |L151.6064|
0017b0  e2df              B        |L151.7538|
                  |L151.6066|
0017b2  f7fffffe          BL       uart_putchar
0017b6  210a              MOVS     r1,#0xa
0017b8  489b              LDR      r0,|L151.6696|
0017ba  f7fffffe          BL       uart_putchar
0017be  210a              MOVS     r1,#0xa
0017c0  4899              LDR      r0,|L151.6696|
0017c2  f7fffffe          BL       uart_putchar
0017c6  210a              MOVS     r1,#0xa
0017c8  4897              LDR      r0,|L151.6696|
0017ca  f7fffffe          BL       uart_putchar
0017ce  210a              MOVS     r1,#0xa
0017d0  4895              LDR      r0,|L151.6696|
0017d2  f7fffffe          BL       uart_putchar
0017d6  210a              MOVS     r1,#0xa
0017d8  4893              LDR      r0,|L151.6696|
0017da  f7fffffe          BL       uart_putchar
0017de  210a              MOVS     r1,#0xa
0017e0  4891              LDR      r0,|L151.6696|
0017e2  f7fffffe          BL       uart_putchar
0017e6  210a              MOVS     r1,#0xa
0017e8  488f              LDR      r0,|L151.6696|
0017ea  f7fffffe          BL       uart_putchar
0017ee  210a              MOVS     r1,#0xa
0017f0  488d              LDR      r0,|L151.6696|
0017f2  f7fffffe          BL       uart_putchar
0017f6  210a              MOVS     r1,#0xa
0017f8  488b              LDR      r0,|L151.6696|
0017fa  f7fffffe          BL       uart_putchar
0017fe  210a              MOVS     r1,#0xa
001800  4889              LDR      r0,|L151.6696|
001802  f7fffffe          BL       uart_putchar
001806  210a              MOVS     r1,#0xa
001808  4887              LDR      r0,|L151.6696|
00180a  f7fffffe          BL       uart_putchar
00180e  210a              MOVS     r1,#0xa
001810  4885              LDR      r0,|L151.6696|
001812  f7fffffe          BL       uart_putchar
001816  210a              MOVS     r1,#0xa
001818  4883              LDR      r0,|L151.6696|
00181a  f7fffffe          BL       uart_putchar
;;;2162   									//memset(data,0,1000);
;;;2163   														//timer counts to wait for characters in uart 1 									
;;;2164   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00181e  bf00              NOP      
                  |L151.6176|
001820  4982              LDR      r1,|L151.6700|
001822  4883              LDR      r0,|L151.6704|
001824  f7fffffe          BL       strstr
001828  2800              CMP      r0,#0
00182a  d109              BNE      |L151.6208|
00182c  4981              LDR      r1,|L151.6708|
00182e  4880              LDR      r0,|L151.6704|
001830  f7fffffe          BL       strstr
001834  2800              CMP      r0,#0
001836  d103              BNE      |L151.6208|
001838  487f              LDR      r0,|L151.6712|
00183a  6800              LDR      r0,[r0,#0]  ; tout
00183c  2805              CMP      r0,#5
00183e  ddef              BLE      |L151.6176|
                  |L151.6208|
;;;2165   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2166   									}
;;;2167   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001840  f7fffffe          BL       clear
;;;2168   									//clear();
;;;2169   									memset(data,0,strlen(data));
001844  4876              LDR      r0,|L151.6688|
001846  f7fffffe          BL       strlen
00184a  4604              MOV      r4,r0
00184c  4621              MOV      r1,r4
00184e  4874              LDR      r0,|L151.6688|
001850  f7fffffe          BL       __aeabi_memclr
;;;2170   									clear();
001854  f7fffffe          BL       clear
;;;2171   									RESET_OFF;delay(100);
001858  2020              MOVS     r0,#0x20
00185a  4978              LDR      r1,|L151.6716|
00185c  6088              STR      r0,[r1,#8]
00185e  2064              MOVS     r0,#0x64
001860  f7fffffe          BL       delay
;;;2172   									RESET_ON;delay(100);		
001864  2020              MOVS     r0,#0x20
001866  4975              LDR      r1,|L151.6716|
001868  6048              STR      r0,[r1,#4]
00186a  2064              MOVS     r0,#0x64
00186c  f7fffffe          BL       delay
                  |L151.6256|
;;;2173   }
;;;2174   	
;;;2175   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001870  2004              MOVS     r0,#4
001872  4b73              LDR      r3,|L151.6720|
001874  4a73              LDR      r2,|L151.6724|
001876  e000              B        |L151.6266|
                  |L151.6264|
001878  e3da              B        |L151.8240|
                  |L151.6266|
00187a  4973              LDR      r1,|L151.6728|
00187c  9000              STR      r0,[sp,#0]
00187e  4873              LDR      r0,|L151.6732|
001880  f7fffffe          BL       send_GSM
;;;2176   GPS_COLLECT2();
001884  f7fffffe          BL       GPS_COLLECT2
;;;2177   strcat(data,"CH\n");	
001888  4971              LDR      r1,|L151.6736|
00188a  4865              LDR      r0,|L151.6688|
00188c  f7fffffe          BL       strcat
;;;2178   memset(at_,0,100);
001890  2164              MOVS     r1,#0x64
001892  4870              LDR      r0,|L151.6740|
001894  f7fffffe          BL       __aeabi_memclr
;;;2179   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001898  4a6f              LDR      r2,|L151.6744|
00189a  4970              LDR      r1,|L151.6748|
00189c  486d              LDR      r0,|L151.6740|
00189e  f7fffffe          BL       __2sprintf
;;;2180   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
0018a2  486f              LDR      r0,|L151.6752|
0018a4  6800              LDR      r0,[r0,#0]  ; tmeout
0018a6  4b66              LDR      r3,|L151.6720|
0018a8  4a66              LDR      r2,|L151.6724|
0018aa  4967              LDR      r1,|L151.6728|
0018ac  9000              STR      r0,[sp,#0]
0018ae  4869              LDR      r0,|L151.6740|
0018b0  f7fffffe          BL       send_GSM
;;;2181   msg_sim800(); 
0018b4  f7fffffe          BL       msg_sim800
;;;2182   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
0018b8  2004              MOVS     r0,#4
0018ba  4b6a              LDR      r3,|L151.6756|
0018bc  4a61              LDR      r2,|L151.6724|
0018be  4962              LDR      r1,|L151.6728|
0018c0  9000              STR      r0,[sp,#0]
0018c2  4869              LDR      r0,|L151.6760|
0018c4  f7fffffe          BL       send_GSM
;;;2183   GPS_COLLECT2();
0018c8  f7fffffe          BL       GPS_COLLECT2
;;;2184   strcat(data,"CH\n");	
0018cc  4960              LDR      r1,|L151.6736|
0018ce  4854              LDR      r0,|L151.6688|
0018d0  f7fffffe          BL       strcat
;;;2185   GPS_COLLECT2();
0018d4  f7fffffe          BL       GPS_COLLECT2
;;;2186   strcat(data,"CH\n");	
0018d8  495d              LDR      r1,|L151.6736|
0018da  4851              LDR      r0,|L151.6688|
0018dc  f7fffffe          BL       strcat
;;;2187   
;;;2188   
;;;2189   msg_sim800(); 
0018e0  f7fffffe          BL       msg_sim800
;;;2190   GPS_COLLECT2();
0018e4  f7fffffe          BL       GPS_COLLECT2
;;;2191   strcat(data,"CH\n");	
0018e8  4959              LDR      r1,|L151.6736|
0018ea  484d              LDR      r0,|L151.6688|
0018ec  f7fffffe          BL       strcat
;;;2192   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0018f0  f7fffffe          BL       clear
0018f4  485d              LDR      r0,|L151.6764|
0018f6  f7fffffe          BL       send_modem
0018fa  f7fffffe          BL       clear
;;;2193   					delay(20);
0018fe  2014              MOVS     r0,#0x14
001900  f7fffffe          BL       delay
;;;2194   
;;;2195   
;;;2196   msg_sim800(); 
001904  f7fffffe          BL       msg_sim800
;;;2197   
;;;2198   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001908  4b59              LDR      r3,|L151.6768|
00190a  4a5a              LDR      r2,|L151.6772|
00190c  495a              LDR      r1,|L151.6776|
00190e  4851              LDR      r0,|L151.6740|
001910  f7fffffe          BL       __2sprintf
;;;2199   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001914  4852              LDR      r0,|L151.6752|
001916  6800              LDR      r0,[r0,#0]  ; tmeout
001918  4b49              LDR      r3,|L151.6720|
00191a  4a46              LDR      r2,|L151.6708|
00191c  4957              LDR      r1,|L151.6780|
00191e  9000              STR      r0,[sp,#0]
001920  484c              LDR      r0,|L151.6740|
001922  f7fffffe          BL       send_GSM
;;;2200   						clear();
001926  f7fffffe          BL       clear
;;;2201   						
;;;2202   						
;;;2203   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
00192a  484d              LDR      r0,|L151.6752|
00192c  6800              LDR      r0,[r0,#0]  ; tmeout
00192e  4b54              LDR      r3,|L151.6784|
001930  4a40              LDR      r2,|L151.6708|
001932  4954              LDR      r1,|L151.6788|
001934  9000              STR      r0,[sp,#0]
001936  4854              LDR      r0,|L151.6792|
001938  f7fffffe          BL       send_GSM
;;;2204   //*****************************tcp_initialization ends**********************************//		
;;;2205   
;;;2206   			if(mystrstr(uart_string_gsm,'>')){
00193c  213e              MOVS     r1,#0x3e
00193e  483c              LDR      r0,|L151.6704|
001940  f7fffffe          BL       mystrstr
001944  2800              CMP      r0,#0
001946  d069              BEQ      |L151.6684|
;;;2207   									clear();
001948  f7fffffe          BL       clear
;;;2208   									memset(uart_string_gsm,0,5000);
00194c  494f              LDR      r1,|L151.6796|
00194e  4838              LDR      r0,|L151.6704|
001950  f7fffffe          BL       __aeabi_memclr
;;;2209   									qwe=strlen(data);
001954  4832              LDR      r0,|L151.6688|
001956  f7fffffe          BL       strlen
00195a  494d              LDR      r1,|L151.6800|
00195c  6008              STR      r0,[r1,#0]  ; qwe
;;;2210   									tout=0;
00195e  2000              MOVS     r0,#0
001960  4935              LDR      r1,|L151.6712|
001962  6008              STR      r0,[r1,#0]  ; tout
;;;2211   									k2=0;
001964  494b              LDR      r1,|L151.6804|
001966  6008              STR      r0,[r1,#0]  ; k2
;;;2212   									for(k=0;k<(qwe);k++)
001968  492e              LDR      r1,|L151.6692|
00196a  6008              STR      r0,[r1,#0]  ; k
00196c  e00b              B        |L151.6534|
                  |L151.6510|
;;;2213   									{
;;;2214   										uart_putchar(UART1_BASE_PTR, data[k]);
00196e  482c              LDR      r0,|L151.6688|
001970  4a2c              LDR      r2,|L151.6692|
001972  6812              LDR      r2,[r2,#0]  ; k
001974  5c81              LDRB     r1,[r0,r2]
001976  482c              LDR      r0,|L151.6696|
001978  f7fffffe          BL       uart_putchar
00197c  4829              LDR      r0,|L151.6692|
00197e  6800              LDR      r0,[r0,#0]            ;2212  ; k
001980  1c40              ADDS     r0,r0,#1              ;2212
001982  4928              LDR      r1,|L151.6692|
001984  6008              STR      r0,[r1,#0]            ;2212  ; k
                  |L151.6534|
001986  4827              LDR      r0,|L151.6692|
001988  6800              LDR      r0,[r0,#0]            ;2212  ; k
00198a  4941              LDR      r1,|L151.6800|
00198c  6809              LDR      r1,[r1,#0]            ;2212  ; qwe
00198e  4288              CMP      r0,r1                 ;2212
001990  dbed              BLT      |L151.6510|
;;;2215   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
001992  210a              MOVS     r1,#0xa
001994  4824              LDR      r0,|L151.6696|
001996  f7fffffe          BL       uart_putchar
00199a  211a              MOVS     r1,#0x1a
00199c  4822              LDR      r0,|L151.6696|
00199e  f7fffffe          BL       uart_putchar
0019a2  211a              MOVS     r1,#0x1a
0019a4  4820              LDR      r0,|L151.6696|
0019a6  f7fffffe          BL       uart_putchar
0019aa  211a              MOVS     r1,#0x1a
0019ac  481e              LDR      r0,|L151.6696|
0019ae  f7fffffe          BL       uart_putchar
0019b2  211a              MOVS     r1,#0x1a
0019b4  481c              LDR      r0,|L151.6696|
0019b6  f7fffffe          BL       uart_putchar
0019ba  211a              MOVS     r1,#0x1a
0019bc  481a              LDR      r0,|L151.6696|
0019be  f7fffffe          BL       uart_putchar
0019c2  211a              MOVS     r1,#0x1a
0019c4  4818              LDR      r0,|L151.6696|
0019c6  f7fffffe          BL       uart_putchar
;;;2216   															do
0019ca  bf00              NOP      
                  |L151.6604|
;;;2217   																{q1=strstr(uart_string_gsm,"SEND OK");
0019cc  4932              LDR      r1,|L151.6808|
0019ce  4818              LDR      r0,|L151.6704|
0019d0  f7fffffe          BL       strstr
0019d4  4931              LDR      r1,|L151.6812|
0019d6  6008              STR      r0,[r1,#0]  ; q1
;;;2218   																	q2=strstr(uart_string_gsm, "ERROR");
0019d8  4916              LDR      r1,|L151.6708|
0019da  4815              LDR      r0,|L151.6704|
0019dc  f7fffffe          BL       strstr
0019e0  492f              LDR      r1,|L151.6816|
0019e2  6008              STR      r0,[r1,#0]  ; q2
;;;2219   																		q3=strstr(uart_string_gsm, "FAIL");	
0019e4  492f              LDR      r1,|L151.6820|
0019e6  4812              LDR      r0,|L151.6704|
0019e8  f7fffffe          BL       strstr
0019ec  492e              LDR      r1,|L151.6824|
0019ee  6008              STR      r0,[r1,#0]  ; q3
;;;2220   																			q4=strstr(uart_string_gsm, "DEACT");	
0019f0  491c              LDR      r1,|L151.6756|
0019f2  480f              LDR      r0,|L151.6704|
0019f4  f7fffffe          BL       strstr
0019f8  492c              LDR      r1,|L151.6828|
0019fa  6008              STR      r0,[r1,#0]  ; q4
;;;2221   																	
;;;2222   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
0019fc  4827              LDR      r0,|L151.6812|
0019fe  6800              LDR      r0,[r0,#0]  ; q1
001a00  2800              CMP      r0,#0
001a02  d15a              BNE      |L151.6842|
001a04  4826              LDR      r0,|L151.6816|
001a06  6800              LDR      r0,[r0,#0]  ; q2
001a08  2800              CMP      r0,#0
001a0a  d156              BNE      |L151.6842|
001a0c  4826              LDR      r0,|L151.6824|
001a0e  6800              LDR      r0,[r0,#0]  ; q3
001a10  2800              CMP      r0,#0
001a12  d152              BNE      |L151.6842|
001a14  4608              MOV      r0,r1
001a16  6800              LDR      r0,[r0,#0]  ; q4
001a18  2800              CMP      r0,#0
001a1a  e049              B        |L151.6832|
                  |L151.6684|
001a1c  e1aa              B        |L151.7540|
001a1e  0000              DCW      0x0000
                  |L151.6688|
                          DCD      data
                  |L151.6692|
                          DCD      k
                  |L151.6696|
                          DCD      0x4006b000
                  |L151.6700|
                          DCD      ||.conststring||+0x70
                  |L151.6704|
                          DCD      uart_string_gsm
                  |L151.6708|
                          DCD      ||.conststring||+0xe0
                  |L151.6712|
                          DCD      tout
                  |L151.6716|
                          DCD      0x400ff080
                  |L151.6720|
                          DCD      ||.conststring||+0x10
                  |L151.6724|
                          DCD      ||.conststring||+0x18
                  |L151.6728|
                          DCD      ||.conststring||+0x2c
                  |L151.6732|
                          DCD      ||.conststring||+0x69c
                  |L151.6736|
                          DCD      ||.conststring||+0x42c
                  |L151.6740|
                          DCD      at_
                  |L151.6744|
                          DCD      apn
                  |L151.6748|
                          DCD      ||.conststring||+0x6ac
                  |L151.6752|
                          DCD      tmeout
                  |L151.6756|
                          DCD      ||.conststring||+0x618
                  |L151.6760|
                          DCD      ||.conststring||+0x6c0
                  |L151.6764|
                          DCD      ||.conststring||+0x6d0
                  |L151.6768|
                          DCD      port
                  |L151.6772|
                          DCD      ||ip||
                  |L151.6776|
                          DCD      ||.conststring||+0x6e0
                  |L151.6780|
                          DCD      ||.conststring||+0x650
                  |L151.6784|
                          DCD      ||.conststring||+0x700
                  |L151.6788|
                          DCD      ||.conststring||+0x20
                  |L151.6792|
                          DCD      ||.conststring||+0x658
                  |L151.6796|
                          DCD      0x00001388
                  |L151.6800|
                          DCD      qwe
                  |L151.6804|
                          DCD      ||k2||
                  |L151.6808|
                          DCD      ||.conststring||+0x608
                  |L151.6812|
                          DCD      ||q1||
                  |L151.6816|
                          DCD      ||q2||
                  |L151.6820|
                          DCD      ||.conststring||+0x610
                  |L151.6824|
                          DCD      ||q3||
                  |L151.6828|
                          DCD      ||q4||
                  |L151.6832|
001ab0  d103              BNE      |L151.6842|
001ab2  48fe              LDR      r0,|L151.7852|
001ab4  6800              LDR      r0,[r0,#0]  ; tout
001ab6  2808              CMP      r0,#8
001ab8  dd88              BLE      |L151.6604|
                  |L151.6842|
;;;2223   															
;;;2224   																			delay(10);clear();
001aba  200a              MOVS     r0,#0xa
001abc  f7fffffe          BL       delay
001ac0  f7fffffe          BL       clear
;;;2225   														uart_putchar(UART1_BASE_PTR,0x1A);
001ac4  211a              MOVS     r1,#0x1a
001ac6  48fa              LDR      r0,|L151.7856|
001ac8  f7fffffe          BL       uart_putchar
;;;2226   												delay(10);
001acc  200a              MOVS     r0,#0xa
001ace  f7fffffe          BL       delay
;;;2227   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001ad2  211a              MOVS     r1,#0x1a
001ad4  48f6              LDR      r0,|L151.7856|
001ad6  f7fffffe          BL       uart_putchar
001ada  211a              MOVS     r1,#0x1a
001adc  48f4              LDR      r0,|L151.7856|
001ade  f7fffffe          BL       uart_putchar
001ae2  211a              MOVS     r1,#0x1a
001ae4  48f2              LDR      r0,|L151.7856|
001ae6  f7fffffe          BL       uart_putchar
;;;2228   delay(20);
001aea  2014              MOVS     r0,#0x14
001aec  f7fffffe          BL       delay
;;;2229   if(!strstr(uart_string_gsm,"SEND OK")){
001af0  49f0              LDR      r1,|L151.7860|
001af2  48f1              LDR      r0,|L151.7864|
001af4  f7fffffe          BL       strstr
001af8  2800              CMP      r0,#0
001afa  d169              BNE      |L151.7120|
;;;2230   
;;;2231   
;;;2232   	delay(100);
001afc  2064              MOVS     r0,#0x64
001afe  f7fffffe          BL       delay
;;;2233   		clear();//memset(uart_string_gsm,0,5000);
001b02  f7fffffe          BL       clear
;;;2234   	
;;;2235   	memset(at_,0,100);
001b06  2164              MOVS     r1,#0x64
001b08  48ec              LDR      r0,|L151.7868|
001b0a  f7fffffe          BL       __aeabi_memclr
;;;2236   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001b0e  48ec              LDR      r0,|L151.7872|
001b10  f7fffffe          BL       strlen
001b14  1c44              ADDS     r4,r0,#1
001b16  4623              MOV      r3,r4
001b18  4aea              LDR      r2,|L151.7876|
001b1a  49eb              LDR      r1,|L151.7880|
001b1c  48e7              LDR      r0,|L151.7868|
001b1e  f7fffffe          BL       __2sprintf
;;;2237   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001b22  2005              MOVS     r0,#5
001b24  4be9              LDR      r3,|L151.7884|
001b26  4aea              LDR      r2,|L151.7888|
001b28  49ea              LDR      r1,|L151.7892|
001b2a  9000              STR      r0,[sp,#0]
001b2c  48e3              LDR      r0,|L151.7868|
001b2e  f7fffffe          BL       send_SD
;;;2238   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2239   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2240   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2241   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2242   //	}
;;;2243   	
;;;2244   clear();	
001b32  f7fffffe          BL       clear
;;;2245   									k2=0;									//string array counter for uart 1
001b36  2000              MOVS     r0,#0
001b38  49e7              LDR      r1,|L151.7896|
001b3a  6008              STR      r0,[r1,#0]  ; k2
;;;2246   									tout=0;	
001b3c  49db              LDR      r1,|L151.7852|
001b3e  6008              STR      r0,[r1,#0]  ; tout
;;;2247   		for(k=0;k<strlen(data);k++)
001b40  49e6              LDR      r1,|L151.7900|
001b42  6008              STR      r0,[r1,#0]  ; k
001b44  e00b              B        |L151.7006|
                  |L151.6982|
;;;2248   		{
;;;2249   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001b46  48de              LDR      r0,|L151.7872|
001b48  4ae4              LDR      r2,|L151.7900|
001b4a  6812              LDR      r2,[r2,#0]  ; k
001b4c  5c81              LDRB     r1,[r0,r2]
001b4e  48d8              LDR      r0,|L151.7856|
001b50  f7fffffe          BL       uart_putchar
001b54  48e1              LDR      r0,|L151.7900|
001b56  6800              LDR      r0,[r0,#0]            ;2247  ; k
001b58  1c40              ADDS     r0,r0,#1              ;2247
001b5a  49e0              LDR      r1,|L151.7900|
001b5c  6008              STR      r0,[r1,#0]            ;2247  ; k
                  |L151.7006|
001b5e  48d8              LDR      r0,|L151.7872|
001b60  f7fffffe          BL       strlen
001b64  49dd              LDR      r1,|L151.7900|
001b66  6809              LDR      r1,[r1,#0]            ;2247  ; k
001b68  4288              CMP      r0,r1                 ;2247
001b6a  d8ec              BHI      |L151.6982|
;;;2250   		}	
;;;2251   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001b6c  210a              MOVS     r1,#0xa
001b6e  48d0              LDR      r0,|L151.7856|
001b70  f7fffffe          BL       uart_putchar
001b74  210a              MOVS     r1,#0xa
001b76  48ce              LDR      r0,|L151.7856|
001b78  f7fffffe          BL       uart_putchar
001b7c  210a              MOVS     r1,#0xa
001b7e  48cc              LDR      r0,|L151.7856|
001b80  f7fffffe          BL       uart_putchar
001b84  210a              MOVS     r1,#0xa
001b86  48ca              LDR      r0,|L151.7856|
001b88  f7fffffe          BL       uart_putchar
001b8c  210a              MOVS     r1,#0xa
001b8e  48c8              LDR      r0,|L151.7856|
001b90  f7fffffe          BL       uart_putchar
001b94  210a              MOVS     r1,#0xa
001b96  48c6              LDR      r0,|L151.7856|
001b98  f7fffffe          BL       uart_putchar
001b9c  210a              MOVS     r1,#0xa
001b9e  48c4              LDR      r0,|L151.7856|
001ba0  f7fffffe          BL       uart_putchar
001ba4  210a              MOVS     r1,#0xa
001ba6  48c2              LDR      r0,|L151.7856|
001ba8  f7fffffe          BL       uart_putchar
001bac  210a              MOVS     r1,#0xa
001bae  48c0              LDR      r0,|L151.7856|
001bb0  f7fffffe          BL       uart_putchar
001bb4  210a              MOVS     r1,#0xa
001bb6  48be              LDR      r0,|L151.7856|
001bb8  f7fffffe          BL       uart_putchar
001bbc  210a              MOVS     r1,#0xa
001bbe  48bc              LDR      r0,|L151.7856|
001bc0  f7fffffe          BL       uart_putchar
001bc4  210a              MOVS     r1,#0xa
001bc6  48ba              LDR      r0,|L151.7856|
001bc8  f7fffffe          BL       uart_putchar
001bcc  210a              MOVS     r1,#0xa
001bce  e000              B        |L151.7122|
                  |L151.7120|
001bd0  e228              B        |L151.8228|
                  |L151.7122|
001bd2  48b7              LDR      r0,|L151.7856|
001bd4  f7fffffe          BL       uart_putchar
001bd8  210a              MOVS     r1,#0xa
001bda  48b5              LDR      r0,|L151.7856|
001bdc  f7fffffe          BL       uart_putchar
001be0  210a              MOVS     r1,#0xa
001be2  48b3              LDR      r0,|L151.7856|
001be4  f7fffffe          BL       uart_putchar
001be8  210a              MOVS     r1,#0xa
001bea  48b1              LDR      r0,|L151.7856|
001bec  f7fffffe          BL       uart_putchar
001bf0  210a              MOVS     r1,#0xa
001bf2  48af              LDR      r0,|L151.7856|
001bf4  f7fffffe          BL       uart_putchar
001bf8  210a              MOVS     r1,#0xa
001bfa  48ad              LDR      r0,|L151.7856|
001bfc  f7fffffe          BL       uart_putchar
001c00  210a              MOVS     r1,#0xa
001c02  48ab              LDR      r0,|L151.7856|
001c04  f7fffffe          BL       uart_putchar
001c08  210a              MOVS     r1,#0xa
001c0a  48a9              LDR      r0,|L151.7856|
001c0c  f7fffffe          BL       uart_putchar
001c10  210a              MOVS     r1,#0xa
001c12  48a7              LDR      r0,|L151.7856|
001c14  f7fffffe          BL       uart_putchar
001c18  210a              MOVS     r1,#0xa
001c1a  48a5              LDR      r0,|L151.7856|
001c1c  f7fffffe          BL       uart_putchar
001c20  210a              MOVS     r1,#0xa
001c22  48a3              LDR      r0,|L151.7856|
001c24  f7fffffe          BL       uart_putchar
001c28  210a              MOVS     r1,#0xa
001c2a  48a1              LDR      r0,|L151.7856|
001c2c  f7fffffe          BL       uart_putchar
001c30  210a              MOVS     r1,#0xa
001c32  489f              LDR      r0,|L151.7856|
001c34  f7fffffe          BL       uart_putchar
001c38  210a              MOVS     r1,#0xa
001c3a  489d              LDR      r0,|L151.7856|
001c3c  f7fffffe          BL       uart_putchar
001c40  210a              MOVS     r1,#0xa
001c42  489b              LDR      r0,|L151.7856|
001c44  f7fffffe          BL       uart_putchar
001c48  210a              MOVS     r1,#0xa
001c4a  4899              LDR      r0,|L151.7856|
001c4c  f7fffffe          BL       uart_putchar
001c50  210a              MOVS     r1,#0xa
001c52  4897              LDR      r0,|L151.7856|
001c54  f7fffffe          BL       uart_putchar
001c58  210a              MOVS     r1,#0xa
001c5a  4895              LDR      r0,|L151.7856|
001c5c  f7fffffe          BL       uart_putchar
001c60  210a              MOVS     r1,#0xa
001c62  4893              LDR      r0,|L151.7856|
001c64  f7fffffe          BL       uart_putchar
001c68  210a              MOVS     r1,#0xa
001c6a  4891              LDR      r0,|L151.7856|
001c6c  f7fffffe          BL       uart_putchar
001c70  210a              MOVS     r1,#0xa
001c72  488f              LDR      r0,|L151.7856|
001c74  f7fffffe          BL       uart_putchar
001c78  210a              MOVS     r1,#0xa
001c7a  488d              LDR      r0,|L151.7856|
001c7c  f7fffffe          BL       uart_putchar
001c80  210a              MOVS     r1,#0xa
001c82  488b              LDR      r0,|L151.7856|
001c84  f7fffffe          BL       uart_putchar
001c88  210a              MOVS     r1,#0xa
001c8a  4889              LDR      r0,|L151.7856|
001c8c  f7fffffe          BL       uart_putchar
001c90  210a              MOVS     r1,#0xa
001c92  4887              LDR      r0,|L151.7856|
001c94  f7fffffe          BL       uart_putchar
001c98  210a              MOVS     r1,#0xa
001c9a  4885              LDR      r0,|L151.7856|
001c9c  f7fffffe          BL       uart_putchar
001ca0  210a              MOVS     r1,#0xa
001ca2  4883              LDR      r0,|L151.7856|
001ca4  f7fffffe          BL       uart_putchar
001ca8  210a              MOVS     r1,#0xa
001caa  4881              LDR      r0,|L151.7856|
001cac  f7fffffe          BL       uart_putchar
001cb0  210a              MOVS     r1,#0xa
001cb2  487f              LDR      r0,|L151.7856|
001cb4  f7fffffe          BL       uart_putchar
001cb8  210a              MOVS     r1,#0xa
001cba  487d              LDR      r0,|L151.7856|
001cbc  f7fffffe          BL       uart_putchar
001cc0  210a              MOVS     r1,#0xa
001cc2  487b              LDR      r0,|L151.7856|
001cc4  f7fffffe          BL       uart_putchar
001cc8  210a              MOVS     r1,#0xa
001cca  4879              LDR      r0,|L151.7856|
001ccc  f7fffffe          BL       uart_putchar
001cd0  210a              MOVS     r1,#0xa
001cd2  4877              LDR      r0,|L151.7856|
001cd4  f7fffffe          BL       uart_putchar
001cd8  210a              MOVS     r1,#0xa
001cda  4875              LDR      r0,|L151.7856|
001cdc  f7fffffe          BL       uart_putchar
001ce0  210a              MOVS     r1,#0xa
001ce2  4873              LDR      r0,|L151.7856|
001ce4  f7fffffe          BL       uart_putchar
001ce8  210a              MOVS     r1,#0xa
001cea  4871              LDR      r0,|L151.7856|
001cec  f7fffffe          BL       uart_putchar
001cf0  210a              MOVS     r1,#0xa
001cf2  486f              LDR      r0,|L151.7856|
001cf4  f7fffffe          BL       uart_putchar
001cf8  210a              MOVS     r1,#0xa
001cfa  486d              LDR      r0,|L151.7856|
001cfc  f7fffffe          BL       uart_putchar
001d00  210a              MOVS     r1,#0xa
001d02  486b              LDR      r0,|L151.7856|
001d04  f7fffffe          BL       uart_putchar
001d08  210a              MOVS     r1,#0xa
001d0a  4869              LDR      r0,|L151.7856|
001d0c  f7fffffe          BL       uart_putchar
001d10  210a              MOVS     r1,#0xa
001d12  4867              LDR      r0,|L151.7856|
001d14  f7fffffe          BL       uart_putchar
001d18  210a              MOVS     r1,#0xa
001d1a  4865              LDR      r0,|L151.7856|
001d1c  f7fffffe          BL       uart_putchar
001d20  210a              MOVS     r1,#0xa
001d22  4863              LDR      r0,|L151.7856|
001d24  f7fffffe          BL       uart_putchar
001d28  210a              MOVS     r1,#0xa
001d2a  4861              LDR      r0,|L151.7856|
001d2c  f7fffffe          BL       uart_putchar
001d30  210a              MOVS     r1,#0xa
001d32  485f              LDR      r0,|L151.7856|
001d34  f7fffffe          BL       uart_putchar
;;;2252   									//memset(data,0,1000);
;;;2253   														//timer counts to wait for characters in uart 1 									
;;;2254   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001d38  bf00              NOP      
                  |L151.7482|
001d3a  4969              LDR      r1,|L151.7904|
001d3c  485e              LDR      r0,|L151.7864|
001d3e  f7fffffe          BL       strstr
001d42  2800              CMP      r0,#0
001d44  d109              BNE      |L151.7514|
001d46  4961              LDR      r1,|L151.7884|
001d48  485b              LDR      r0,|L151.7864|
001d4a  f7fffffe          BL       strstr
001d4e  2800              CMP      r0,#0
001d50  d103              BNE      |L151.7514|
001d52  4856              LDR      r0,|L151.7852|
001d54  6800              LDR      r0,[r0,#0]  ; tout
001d56  2805              CMP      r0,#5
001d58  ddef              BLE      |L151.7482|
                  |L151.7514|
;;;2255   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2256   									}
;;;2257   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001d5a  f7fffffe          BL       clear
;;;2258   									//clear();
;;;2259   									memset(data,0,strlen(data));
001d5e  4858              LDR      r0,|L151.7872|
001d60  f7fffffe          BL       strlen
001d64  4604              MOV      r4,r0
001d66  4621              MOV      r1,r4
001d68  4855              LDR      r0,|L151.7872|
001d6a  f7fffffe          BL       __aeabi_memclr
;;;2260   									clear();
001d6e  f7fffffe          BL       clear
                  |L151.7538|
;;;2261   
;;;2262   								
;;;2263   break;
001d72  e165              B        |L151.8256|
                  |L151.7540|
;;;2264   //log_it();
;;;2265   }
;;;2266   			
;;;2267   			
;;;2268   			
;;;2269   			
;;;2270   			
;;;2271   			}
;;;2272   			else
;;;2273   			{
;;;2274   				
;;;2275   				
;;;2276   				
;;;2277   	delay(100);
001d74  2064              MOVS     r0,#0x64
001d76  f7fffffe          BL       delay
;;;2278   		clear();//memset(uart_string_gsm,0,5000);
001d7a  f7fffffe          BL       clear
;;;2279   	
;;;2280   	memset(at_,0,100);
001d7e  2164              MOVS     r1,#0x64
001d80  484e              LDR      r0,|L151.7868|
001d82  f7fffffe          BL       __aeabi_memclr
;;;2281   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001d86  484e              LDR      r0,|L151.7872|
001d88  f7fffffe          BL       strlen
001d8c  1c44              ADDS     r4,r0,#1
001d8e  4623              MOV      r3,r4
001d90  4a4c              LDR      r2,|L151.7876|
001d92  494d              LDR      r1,|L151.7880|
001d94  4849              LDR      r0,|L151.7868|
001d96  f7fffffe          BL       __2sprintf
;;;2282   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001d9a  2005              MOVS     r0,#5
001d9c  4b4b              LDR      r3,|L151.7884|
001d9e  4a4c              LDR      r2,|L151.7888|
001da0  494c              LDR      r1,|L151.7892|
001da2  9000              STR      r0,[sp,#0]
001da4  4845              LDR      r0,|L151.7868|
001da6  f7fffffe          BL       send_SD
;;;2283   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2284   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2285   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2286   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2287   //	}
;;;2288   	
;;;2289   clear();	
001daa  f7fffffe          BL       clear
;;;2290   									k2=0;									//string array counter for uart 1
001dae  2000              MOVS     r0,#0
001db0  4949              LDR      r1,|L151.7896|
001db2  6008              STR      r0,[r1,#0]  ; k2
;;;2291   									tout=0;	
001db4  493d              LDR      r1,|L151.7852|
001db6  6008              STR      r0,[r1,#0]  ; tout
;;;2292   		for(k=0;k<strlen(data);k++)
001db8  4948              LDR      r1,|L151.7900|
001dba  6008              STR      r0,[r1,#0]  ; k
001dbc  e00b              B        |L151.7638|
                  |L151.7614|
;;;2293   		{
;;;2294   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001dbe  4840              LDR      r0,|L151.7872|
001dc0  4a46              LDR      r2,|L151.7900|
001dc2  6812              LDR      r2,[r2,#0]  ; k
001dc4  5c81              LDRB     r1,[r0,r2]
001dc6  483a              LDR      r0,|L151.7856|
001dc8  f7fffffe          BL       uart_putchar
001dcc  4843              LDR      r0,|L151.7900|
001dce  6800              LDR      r0,[r0,#0]            ;2292  ; k
001dd0  1c40              ADDS     r0,r0,#1              ;2292
001dd2  4942              LDR      r1,|L151.7900|
001dd4  6008              STR      r0,[r1,#0]            ;2292  ; k
                  |L151.7638|
001dd6  483a              LDR      r0,|L151.7872|
001dd8  f7fffffe          BL       strlen
001ddc  493f              LDR      r1,|L151.7900|
001dde  6809              LDR      r1,[r1,#0]            ;2292  ; k
001de0  4288              CMP      r0,r1                 ;2292
001de2  d8ec              BHI      |L151.7614|
;;;2295   		}	
;;;2296   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001de4  210a              MOVS     r1,#0xa
001de6  4832              LDR      r0,|L151.7856|
001de8  f7fffffe          BL       uart_putchar
001dec  210a              MOVS     r1,#0xa
001dee  4830              LDR      r0,|L151.7856|
001df0  f7fffffe          BL       uart_putchar
001df4  210a              MOVS     r1,#0xa
001df6  482e              LDR      r0,|L151.7856|
001df8  f7fffffe          BL       uart_putchar
001dfc  210a              MOVS     r1,#0xa
001dfe  482c              LDR      r0,|L151.7856|
001e00  f7fffffe          BL       uart_putchar
001e04  210a              MOVS     r1,#0xa
001e06  482a              LDR      r0,|L151.7856|
001e08  f7fffffe          BL       uart_putchar
001e0c  210a              MOVS     r1,#0xa
001e0e  4828              LDR      r0,|L151.7856|
001e10  f7fffffe          BL       uart_putchar
001e14  210a              MOVS     r1,#0xa
001e16  4826              LDR      r0,|L151.7856|
001e18  f7fffffe          BL       uart_putchar
001e1c  210a              MOVS     r1,#0xa
001e1e  4824              LDR      r0,|L151.7856|
001e20  f7fffffe          BL       uart_putchar
001e24  210a              MOVS     r1,#0xa
001e26  4822              LDR      r0,|L151.7856|
001e28  f7fffffe          BL       uart_putchar
001e2c  210a              MOVS     r1,#0xa
001e2e  4820              LDR      r0,|L151.7856|
001e30  f7fffffe          BL       uart_putchar
001e34  210a              MOVS     r1,#0xa
001e36  481e              LDR      r0,|L151.7856|
001e38  f7fffffe          BL       uart_putchar
001e3c  210a              MOVS     r1,#0xa
001e3e  481c              LDR      r0,|L151.7856|
001e40  f7fffffe          BL       uart_putchar
001e44  210a              MOVS     r1,#0xa
001e46  481a              LDR      r0,|L151.7856|
001e48  f7fffffe          BL       uart_putchar
001e4c  210a              MOVS     r1,#0xa
001e4e  4818              LDR      r0,|L151.7856|
001e50  f7fffffe          BL       uart_putchar
001e54  210a              MOVS     r1,#0xa
001e56  4816              LDR      r0,|L151.7856|
001e58  f7fffffe          BL       uart_putchar
001e5c  210a              MOVS     r1,#0xa
001e5e  4814              LDR      r0,|L151.7856|
001e60  f7fffffe          BL       uart_putchar
001e64  210a              MOVS     r1,#0xa
001e66  4812              LDR      r0,|L151.7856|
001e68  f7fffffe          BL       uart_putchar
001e6c  210a              MOVS     r1,#0xa
001e6e  4810              LDR      r0,|L151.7856|
001e70  f7fffffe          BL       uart_putchar
001e74  210a              MOVS     r1,#0xa
001e76  480e              LDR      r0,|L151.7856|
001e78  f7fffffe          BL       uart_putchar
001e7c  210a              MOVS     r1,#0xa
001e7e  480c              LDR      r0,|L151.7856|
001e80  f7fffffe          BL       uart_putchar
001e84  210a              MOVS     r1,#0xa
001e86  480a              LDR      r0,|L151.7856|
001e88  f7fffffe          BL       uart_putchar
001e8c  210a              MOVS     r1,#0xa
001e8e  4808              LDR      r0,|L151.7856|
001e90  f7fffffe          BL       uart_putchar
001e94  210a              MOVS     r1,#0xa
001e96  4806              LDR      r0,|L151.7856|
001e98  f7fffffe          BL       uart_putchar
001e9c  210a              MOVS     r1,#0xa
001e9e  4804              LDR      r0,|L151.7856|
001ea0  f7fffffe          BL       uart_putchar
001ea4  210a              MOVS     r1,#0xa
001ea6  4802              LDR      r0,|L151.7856|
001ea8  e01c              B        |L151.7908|
001eaa  0000              DCW      0x0000
                  |L151.7852|
                          DCD      tout
                  |L151.7856|
                          DCD      0x4006b000
                  |L151.7860|
                          DCD      ||.conststring||+0x608
                  |L151.7864|
                          DCD      uart_string_gsm
                  |L151.7868|
                          DCD      at_
                  |L151.7872|
                          DCD      data
                  |L151.7876|
                          DCD      drive
                  |L151.7880|
                          DCD      ||.conststring||+0x430
                  |L151.7884|
                          DCD      ||.conststring||+0xe0
                  |L151.7888|
                          DCD      ||.conststring||+0x18
                  |L151.7892|
                          DCD      ||.conststring||+0x20
                  |L151.7896|
                          DCD      ||k2||
                  |L151.7900|
                          DCD      k
                  |L151.7904|
                          DCD      ||.conststring||+0x70
                  |L151.7908|
001ee4  f7fffffe          BL       uart_putchar
001ee8  210a              MOVS     r1,#0xa
001eea  486b              LDR      r0,|L151.8344|
001eec  f7fffffe          BL       uart_putchar
001ef0  210a              MOVS     r1,#0xa
001ef2  4869              LDR      r0,|L151.8344|
001ef4  f7fffffe          BL       uart_putchar
001ef8  210a              MOVS     r1,#0xa
001efa  4867              LDR      r0,|L151.8344|
001efc  f7fffffe          BL       uart_putchar
001f00  210a              MOVS     r1,#0xa
001f02  4865              LDR      r0,|L151.8344|
001f04  f7fffffe          BL       uart_putchar
001f08  210a              MOVS     r1,#0xa
001f0a  4863              LDR      r0,|L151.8344|
001f0c  f7fffffe          BL       uart_putchar
001f10  210a              MOVS     r1,#0xa
001f12  4861              LDR      r0,|L151.8344|
001f14  f7fffffe          BL       uart_putchar
001f18  210a              MOVS     r1,#0xa
001f1a  485f              LDR      r0,|L151.8344|
001f1c  f7fffffe          BL       uart_putchar
001f20  210a              MOVS     r1,#0xa
001f22  485d              LDR      r0,|L151.8344|
001f24  f7fffffe          BL       uart_putchar
001f28  210a              MOVS     r1,#0xa
001f2a  485b              LDR      r0,|L151.8344|
001f2c  f7fffffe          BL       uart_putchar
001f30  210a              MOVS     r1,#0xa
001f32  4859              LDR      r0,|L151.8344|
001f34  f7fffffe          BL       uart_putchar
001f38  210a              MOVS     r1,#0xa
001f3a  4857              LDR      r0,|L151.8344|
001f3c  f7fffffe          BL       uart_putchar
001f40  210a              MOVS     r1,#0xa
001f42  4855              LDR      r0,|L151.8344|
001f44  f7fffffe          BL       uart_putchar
001f48  210a              MOVS     r1,#0xa
001f4a  4853              LDR      r0,|L151.8344|
001f4c  f7fffffe          BL       uart_putchar
001f50  210a              MOVS     r1,#0xa
001f52  4851              LDR      r0,|L151.8344|
001f54  f7fffffe          BL       uart_putchar
001f58  210a              MOVS     r1,#0xa
001f5a  484f              LDR      r0,|L151.8344|
001f5c  f7fffffe          BL       uart_putchar
001f60  210a              MOVS     r1,#0xa
001f62  484d              LDR      r0,|L151.8344|
001f64  f7fffffe          BL       uart_putchar
001f68  210a              MOVS     r1,#0xa
001f6a  484b              LDR      r0,|L151.8344|
001f6c  f7fffffe          BL       uart_putchar
001f70  210a              MOVS     r1,#0xa
001f72  4849              LDR      r0,|L151.8344|
001f74  f7fffffe          BL       uart_putchar
001f78  210a              MOVS     r1,#0xa
001f7a  4847              LDR      r0,|L151.8344|
001f7c  f7fffffe          BL       uart_putchar
001f80  210a              MOVS     r1,#0xa
001f82  4845              LDR      r0,|L151.8344|
001f84  f7fffffe          BL       uart_putchar
001f88  210a              MOVS     r1,#0xa
001f8a  4843              LDR      r0,|L151.8344|
001f8c  f7fffffe          BL       uart_putchar
001f90  210a              MOVS     r1,#0xa
001f92  4841              LDR      r0,|L151.8344|
001f94  f7fffffe          BL       uart_putchar
001f98  210a              MOVS     r1,#0xa
001f9a  483f              LDR      r0,|L151.8344|
001f9c  f7fffffe          BL       uart_putchar
001fa0  210a              MOVS     r1,#0xa
001fa2  483d              LDR      r0,|L151.8344|
001fa4  f7fffffe          BL       uart_putchar
001fa8  210a              MOVS     r1,#0xa
001faa  483b              LDR      r0,|L151.8344|
001fac  f7fffffe          BL       uart_putchar
001fb0  210a              MOVS     r1,#0xa
001fb2  4839              LDR      r0,|L151.8344|
001fb4  f7fffffe          BL       uart_putchar
001fb8  210a              MOVS     r1,#0xa
001fba  4837              LDR      r0,|L151.8344|
001fbc  f7fffffe          BL       uart_putchar
001fc0  210a              MOVS     r1,#0xa
001fc2  4835              LDR      r0,|L151.8344|
001fc4  f7fffffe          BL       uart_putchar
001fc8  210a              MOVS     r1,#0xa
001fca  4833              LDR      r0,|L151.8344|
001fcc  f7fffffe          BL       uart_putchar
001fd0  210a              MOVS     r1,#0xa
001fd2  4831              LDR      r0,|L151.8344|
001fd4  f7fffffe          BL       uart_putchar
001fd8  210a              MOVS     r1,#0xa
001fda  482f              LDR      r0,|L151.8344|
001fdc  f7fffffe          BL       uart_putchar
001fe0  210a              MOVS     r1,#0xa
001fe2  482d              LDR      r0,|L151.8344|
001fe4  f7fffffe          BL       uart_putchar
;;;2297   									//memset(data,0,1000);
;;;2298   														//timer counts to wait for characters in uart 1 									
;;;2299   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001fe8  bf00              NOP      
                  |L151.8170|
001fea  492c              LDR      r1,|L151.8348|
001fec  482c              LDR      r0,|L151.8352|
001fee  f7fffffe          BL       strstr
001ff2  2800              CMP      r0,#0
001ff4  d109              BNE      |L151.8202|
001ff6  492b              LDR      r1,|L151.8356|
001ff8  4829              LDR      r0,|L151.8352|
001ffa  f7fffffe          BL       strstr
001ffe  2800              CMP      r0,#0
002000  d103              BNE      |L151.8202|
002002  4829              LDR      r0,|L151.8360|
002004  6800              LDR      r0,[r0,#0]  ; tout
002006  2805              CMP      r0,#5
002008  ddef              BLE      |L151.8170|
                  |L151.8202|
;;;2300   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2301   									}
;;;2302   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00200a  f7fffffe          BL       clear
;;;2303   									//clear();
;;;2304   									memset(data,0,strlen(data));
00200e  4827              LDR      r0,|L151.8364|
002010  f7fffffe          BL       strlen
002014  4604              MOV      r4,r0
002016  4621              MOV      r1,r4
002018  4824              LDR      r0,|L151.8364|
00201a  f7fffffe          BL       __aeabi_memclr
;;;2305   									clear();
00201e  f7fffffe          BL       clear
;;;2306   
;;;2307   								
;;;2308   				
;;;2309   				//log_it();
;;;2310   			
;;;2311   			
;;;2312   			
;;;2313   			
;;;2314   			break;
002022  e00d              B        |L151.8256|
                  |L151.8228|
;;;2315   			}
;;;2316   //			memset(at_,0,100);
;;;2317   //			sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
;;;2318   //			send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2319   //			parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
;;;2320   //			fsz=stof(fsize);//7523.7412
;;;2321   //			times=(fsz/1256)+1;
;;;2322   		}	
;;;2323   	
;;;2324   //
;;;2325   if(rtcticks2>=1500){break;}		
002024  4822              LDR      r0,|L151.8368|
002026  6800              LDR      r0,[r0,#0]  ; rtcticks2
002028  4922              LDR      r1,|L151.8372|
00202a  4288              CMP      r0,r1
00202c  db00              BLT      |L151.8240|
00202e  e007              B        |L151.8256|
                  |L151.8240|
002030  4821              LDR      r0,|L151.8376|
002032  6800              LDR      r0,[r0,#0]            ;1783  ; k5
002034  4921              LDR      r1,|L151.8380|
002036  6809              LDR      r1,[r1,#0]            ;1783  ; times
002038  4288              CMP      r0,r1                 ;1783
00203a  dc01              BGT      |L151.8256|
00203c  f7fef81f          BL       |L151.126|
                  |L151.8256|
002040  bf00              NOP                            ;1784
;;;2326   }
;;;2327   
;;;2328   if(((k5>=times) && log0!=1)){
002042  481d              LDR      r0,|L151.8376|
002044  6800              LDR      r0,[r0,#0]  ; k5
002046  491d              LDR      r1,|L151.8380|
002048  6809              LDR      r1,[r1,#0]  ; times
00204a  4288              CMP      r0,r1
00204c  db1e              BLT      |L151.8332|
00204e  481c              LDR      r0,|L151.8384|
002050  6800              LDR      r0,[r0,#0]  ; log0
002052  2801              CMP      r0,#1
002054  d01a              BEQ      |L151.8332|
;;;2329   	cursorvaluepr=0;times=-2;k5=0;
002056  2000              MOVS     r0,#0
002058  491a              LDR      r1,|L151.8388|
00205a  6008              STR      r0,[r1,#0]  ; cursorvaluepr
00205c  1e80              SUBS     r0,r0,#2
00205e  4917              LDR      r1,|L151.8380|
002060  6008              STR      r0,[r1,#0]  ; times
002062  2000              MOVS     r0,#0
002064  4914              LDR      r1,|L151.8376|
002066  6008              STR      r0,[r1,#0]  ; k5
;;;2330   	memset(at_,0,100);
002068  2164              MOVS     r1,#0x64
00206a  4817              LDR      r0,|L151.8392|
00206c  f7fffffe          BL       __aeabi_memclr
;;;2331   	sprintf(at_,"\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
002070  4a16              LDR      r2,|L151.8396|
002072  4917              LDR      r1,|L151.8400|
002074  4814              LDR      r0,|L151.8392|
002076  f7fffffe          BL       __2sprintf
;;;2332   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00207a  4816              LDR      r0,|L151.8404|
00207c  6800              LDR      r0,[r0,#0]  ; tmeout
00207e  4b16              LDR      r3,|L151.8408|
002080  4a16              LDR      r2,|L151.8412|
002082  4917              LDR      r1,|L151.8416|
002084  9000              STR      r0,[sp,#0]
002086  4810              LDR      r0,|L151.8392|
002088  f7fffffe          BL       send_GSM
                  |L151.8332|
;;;2333   
;;;2334   }		
;;;2335   
;;;2336   int_erval=temp;
00208c  4815              LDR      r0,|L151.8420|
00208e  6800              LDR      r0,[r0,#0]  ; temp
002090  4915              LDR      r1,|L151.8424|
002092  6008              STR      r0,[r1,#0]  ; int_erval
;;;2337   }
002094  bd7c              POP      {r2-r6,pc}
;;;2338   
                          ENDP

002096  0000              DCW      0x0000
                  |L151.8344|
                          DCD      0x4006b000
                  |L151.8348|
                          DCD      ||.conststring||+0x70
                  |L151.8352|
                          DCD      uart_string_gsm
                  |L151.8356|
                          DCD      ||.conststring||+0xe0
                  |L151.8360|
                          DCD      tout
                  |L151.8364|
                          DCD      data
                  |L151.8368|
                          DCD      rtcticks2
                  |L151.8372|
                          DCD      0x000005dc
                  |L151.8376|
                          DCD      ||k5||
                  |L151.8380|
                          DCD      times
                  |L151.8384|
                          DCD      log0
                  |L151.8388|
                          DCD      cursorvaluepr
                  |L151.8392|
                          DCD      at_
                  |L151.8396|
                          DCD      drive
                  |L151.8400|
                          DCD      ||.conststring||+0x710
                  |L151.8404|
                          DCD      tmeout
                  |L151.8408|
                          DCD      ||.conststring||+0x10
                  |L151.8412|
                          DCD      ||.conststring||+0x18
                  |L151.8416|
                          DCD      ||.conststring||+0x2c
                  |L151.8420|
                          DCD      temp
                  |L151.8424|
                          DCD      int_erval

                          AREA ||i.readapn||, COMGROUP=readapn, CODE, READONLY, ALIGN=2

                  readapn PROC
;;;1181   
;;;1182   __inline void readapn()
000000  b51c              PUSH     {r2-r4,lr}
;;;1183   {
;;;1184   	memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480c              LDR      r0,|L158.56|
000006  f7fffffe          BL       __aeabi_memclr
;;;1185   		sprintf(at_, "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n");		
00000a  490c              LDR      r1,|L158.60|
00000c  480a              LDR      r0,|L158.56|
00000e  f7fffffe          BL       __2sprintf
;;;1186   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0a              LDR      r3,|L158.64|
000016  4a0b              LDR      r2,|L158.68|
000018  490b              LDR      r1,|L158.72|
00001a  9000              STR      r0,[sp,#0]
00001c  4806              LDR      r0,|L158.56|
00001e  f7fffffe          BL       send_GSM
;;;1187   	
;;;1188   		parse_g(uart_string_gsm, 1,2, '|', '|',apn);
000022  480a              LDR      r0,|L158.76|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2202              MOVS     r2,#2
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2101              MOVS     r1,#1
000030  4807              LDR      r0,|L158.80|
000032  f7fffffe          BL       parse_g
;;;1189   	
;;;1190   	
;;;1191   }
000036  bd1c              POP      {r2-r4,pc}
;;;1192   
                          ENDP

                  |L158.56|
                          DCD      at_
                  |L158.60|
                          DCD      ||.conststring||+0x72c
                  |L158.64|
                          DCD      ||.conststring||+0x10
                  |L158.68|
                          DCD      ||.conststring||+0x18
                  |L158.72|
                          DCD      ||.conststring||+0x2c
                  |L158.76|
                          DCD      apn
                  |L158.80|
                          DCD      uart_string_gsm

                          AREA ||i.ignread||, COMGROUP=ignread, CODE, READONLY, ALIGN=2

                  ignread PROC
;;;1288   
;;;1289   __inline void ignread(){
000000  b508              PUSH     {r3,lr}
;;;1290   memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4813              LDR      r0,|L165.84|
000006  f7fffffe          BL       __aeabi_memclr
;;;1291   		sprintf(at_, "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n");		
00000a  4913              LDR      r1,|L165.88|
00000c  4811              LDR      r0,|L165.84|
00000e  f7fffffe          BL       __2sprintf
;;;1292   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b11              LDR      r3,|L165.92|
000016  4a12              LDR      r2,|L165.96|
000018  4912              LDR      r1,|L165.100|
00001a  9000              STR      r0,[sp,#0]
00001c  480d              LDR      r0,|L165.84|
00001e  f7fffffe          BL       send_GSM
;;;1293   if(strstr(uart_string_gsm,"ION")){IGNITION_ON;FUEL_ON;}
000022  4911              LDR      r1,|L165.104|
000024  4811              LDR      r0,|L165.108|
000026  f7fffffe          BL       strstr
00002a  2800              CMP      r0,#0
00002c  d005              BEQ      |L165.58|
00002e  2002              MOVS     r0,#2
000030  490f              LDR      r1,|L165.112|
000032  6088              STR      r0,[r1,#8]
000034  2004              MOVS     r0,#4
000036  6088              STR      r0,[r1,#8]
000038  e00a              B        |L165.80|
                  |L165.58|
;;;1294   else if(strstr(uart_string_gsm,"IOFF")){IGNITION_OFF;FUEL_OFF;}
00003a  490e              LDR      r1,|L165.116|
00003c  480b              LDR      r0,|L165.108|
00003e  f7fffffe          BL       strstr
000042  2800              CMP      r0,#0
000044  d004              BEQ      |L165.80|
000046  2002              MOVS     r0,#2
000048  4909              LDR      r1,|L165.112|
00004a  6048              STR      r0,[r1,#4]
00004c  2004              MOVS     r0,#4
00004e  6048              STR      r0,[r1,#4]
                  |L165.80|
;;;1295   
;;;1296   }	
000050  bd08              POP      {r3,pc}
;;;1297   	
                          ENDP

000052  0000              DCW      0x0000
                  |L165.84|
                          DCD      at_
                  |L165.88|
                          DCD      ||.conststring||+0x74c
                  |L165.92|
                          DCD      ||.conststring||+0x10
                  |L165.96|
                          DCD      ||.conststring||+0x18
                  |L165.100|
                          DCD      ||.conststring||+0x2c
                  |L165.104|
                          DCD      ||.conststring||+0x76c
                  |L165.108|
                          DCD      uart_string_gsm
                  |L165.112|
                          DCD      0x400ff000
                  |L165.116|
                          DCD      ||.conststring||+0x770

                          AREA ||i.readcursor||, COMGROUP=readcursor, CODE, READONLY, ALIGN=2

                  readcursor PROC
;;;1341   	
;;;1342   __inline void readcursor()
000000  b51c              PUSH     {r2-r4,lr}
;;;1343   {
;;;1344   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4824              LDR      r0,|L172.152|
000006  f7fffffe          BL       __aeabi_memclr
;;;1345   		sprintf(at_, "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n");		
00000a  4924              LDR      r1,|L172.156|
00000c  4822              LDR      r0,|L172.152|
00000e  f7fffffe          BL       __2sprintf
;;;1346   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b22              LDR      r3,|L172.160|
000016  4a23              LDR      r2,|L172.164|
000018  4923              LDR      r1,|L172.168|
00001a  9000              STR      r0,[sp,#0]
00001c  481e              LDR      r0,|L172.152|
00001e  f7fffffe          BL       send_GSM
;;;1347   		memset(at_,0,100);
000022  2164              MOVS     r1,#0x64
000024  481c              LDR      r0,|L172.152|
000026  f7fffffe          BL       __aeabi_memclr
;;;1348   		parse_g(uart_string_gsm, 4,5, ',', ',',at_);
00002a  481b              LDR      r0,|L172.152|
00002c  212c              MOVS     r1,#0x2c
00002e  460b              MOV      r3,r1
000030  2205              MOVS     r2,#5
000032  9100              STR      r1,[sp,#0]
000034  9001              STR      r0,[sp,#4]
000036  2104              MOVS     r1,#4
000038  481c              LDR      r0,|L172.172|
00003a  f7fffffe          BL       parse_g
;;;1349   		times=myAtoi(at_);		
00003e  4816              LDR      r0,|L172.152|
000040  f7fffffe          BL       myAtoi
000044  491a              LDR      r1,|L172.176|
000046  6008              STR      r0,[r1,#0]  ; times
;;;1350   		memset(at_,0,100);
000048  2164              MOVS     r1,#0x64
00004a  4813              LDR      r0,|L172.152|
00004c  f7fffffe          BL       __aeabi_memclr
;;;1351   		parse_g(uart_string_gsm, 5,6, ',', ',',at_);
000050  4811              LDR      r0,|L172.152|
000052  212c              MOVS     r1,#0x2c
000054  460b              MOV      r3,r1
000056  2206              MOVS     r2,#6
000058  9100              STR      r1,[sp,#0]
00005a  9001              STR      r0,[sp,#4]
00005c  2105              MOVS     r1,#5
00005e  4813              LDR      r0,|L172.172|
000060  f7fffffe          BL       parse_g
;;;1352   		k5=myAtoi(at_);		
000064  480c              LDR      r0,|L172.152|
000066  f7fffffe          BL       myAtoi
00006a  4912              LDR      r1,|L172.180|
00006c  6008              STR      r0,[r1,#0]  ; k5
;;;1353   		memset(at_,0,100);
00006e  2164              MOVS     r1,#0x64
000070  4809              LDR      r0,|L172.152|
000072  f7fffffe          BL       __aeabi_memclr
;;;1354   		parse_g(uart_string_gsm, 6,7, ',', ',',at_);
000076  4808              LDR      r0,|L172.152|
000078  212c              MOVS     r1,#0x2c
00007a  460b              MOV      r3,r1
00007c  2207              MOVS     r2,#7
00007e  9100              STR      r1,[sp,#0]
000080  9001              STR      r0,[sp,#4]
000082  2106              MOVS     r1,#6
000084  4809              LDR      r0,|L172.172|
000086  f7fffffe          BL       parse_g
;;;1355   		cursorvaluepr=myAtoi(at_);		
00008a  4803              LDR      r0,|L172.152|
00008c  f7fffffe          BL       myAtoi
000090  4909              LDR      r1,|L172.184|
000092  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1356   
;;;1357   
;;;1358   }	
000094  bd1c              POP      {r2-r4,pc}
;;;1359   	
                          ENDP

000096  0000              DCW      0x0000
                  |L172.152|
                          DCD      at_
                  |L172.156|
                          DCD      ||.conststring||+0x778
                  |L172.160|
                          DCD      ||.conststring||+0x10
                  |L172.164|
                          DCD      ||.conststring||+0x18
                  |L172.168|
                          DCD      ||.conststring||+0x2c
                  |L172.172|
                          DCD      uart_string_gsm
                  |L172.176|
                          DCD      times
                  |L172.180|
                          DCD      ||k5||
                  |L172.184|
                          DCD      cursorvaluepr

                          AREA ||i.LED_init||, COMGROUP=LED_init, CODE, READONLY, ALIGN=2

                  LED_init PROC
;;;26     
;;;27     __inline void LED_init(void){
000000  483f              LDR      r0,|L179.256|
;;;28       
;;;29         SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK ;      //Turn on clock to PORTE & D module
000002  6b80              LDR      r0,[r0,#0x38]
000004  210f              MOVS     r1,#0xf
000006  0289              LSLS     r1,r1,#10
000008  4308              ORRS     r0,r0,r1
00000a  493d              LDR      r1,|L179.256|
00000c  6388              STR      r0,[r1,#0x38]
;;;30     
;;;31     
;;;32     	
;;;33     
;;;34     		PORTE_PCR29 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
00000e  1588              ASRS     r0,r1,#22
000010  493c              LDR      r1,|L179.260|
000012  6348              STR      r0,[r1,#0x34]
;;;35       	PORTD_PCR7 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000014  493c              LDR      r1,|L179.264|
000016  61c8              STR      r0,[r1,#0x1c]
;;;36         PORTE_PCR31 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000018  493a              LDR      r1,|L179.260|
00001a  63c8              STR      r0,[r1,#0x3c]
;;;37         PORTD_PCR5 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode
00001c  493a              LDR      r1,|L179.264|
00001e  6148              STR      r0,[r1,#0x14]
;;;38     	
;;;39         PORTC_PCR5 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000020  493a              LDR      r1,|L179.268|
000022  6148              STR      r0,[r1,#0x14]
;;;40         PORTC_PCR6 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000024  6188              STR      r0,[r1,#0x18]
;;;41         PORTC_PCR7 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	
000026  61c8              STR      r0,[r1,#0x1c]
;;;42         PORTC_PCR8 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	    
000028  6208              STR      r0,[r1,#0x20]
;;;43         PORTB_PCR2 = PORT_PCR_MUX(0x1);             //Set the PTB2 pin multiplexer to GPIO mode	   
00002a  4939              LDR      r1,|L179.272|
00002c  6088              STR      r0,[r1,#8]
;;;44     
;;;45     	
;;;46     	PORTB_PCR2 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
00002e  1c80              ADDS     r0,r0,#2
000030  6088              STR      r0,[r1,#8]
;;;47     		
;;;48     	PORTB_PCR1 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000032  6048              STR      r0,[r1,#4]
;;;49     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;50     	PTB->PDDR &= ~MASK(ADCIGN);
000034  4837              LDR      r0,|L179.276|
000036  6940              LDR      r0,[r0,#0x14]
000038  2102              MOVS     r1,#2
00003a  4388              BICS     r0,r0,r1
00003c  4935              LDR      r1,|L179.276|
00003e  6148              STR      r0,[r1,#0x14]
;;;51     	GPIOD_PDDR |= (1<<7);
000040  4834              LDR      r0,|L179.276|
000042  3080              ADDS     r0,r0,#0x80
000044  6940              LDR      r0,[r0,#0x14]
000046  2180              MOVS     r1,#0x80
000048  4308              ORRS     r0,r0,r1
00004a  4932              LDR      r1,|L179.276|
00004c  3180              ADDS     r1,r1,#0x80
00004e  6148              STR      r0,[r1,#0x14]
;;;52     
;;;53     	PORTB_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000050  20ff              MOVS     r0,#0xff
000052  3003              ADDS     r0,#3
000054  492e              LDR      r1,|L179.272|
000056  6008              STR      r0,[r1,#0]
;;;54     	PORTC_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; //		GPIOB_PDDR = 0;
000058  1c40              ADDS     r0,r0,#1
00005a  492c              LDR      r1,|L179.268|
00005c  6008              STR      r0,[r1,#0]
;;;55     
;;;56     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;57     	//PTB->PDDR &= ~MASK(ADCIGN);
;;;58     //	GPIOD_PDDR |= (1<<7);
;;;59     
;;;60     	  
;;;61         GPIOE_PSOR |= RED_SHIFT | GREEN_SHIFT;      //Set the initial output state to high
00005e  482d              LDR      r0,|L179.276|
000060  30c0              ADDS     r0,r0,#0xc0
000062  6840              LDR      r0,[r0,#4]
000064  2105              MOVS     r1,#5
000066  0749              LSLS     r1,r1,#29
000068  4308              ORRS     r0,r0,r1
00006a  492a              LDR      r1,|L179.276|
00006c  31c0              ADDS     r1,r1,#0xc0
00006e  6048              STR      r0,[r1,#4]
;;;62         GPIOD_PSOR |= BLUE_SHIFT;               	//Set the inital output state to high
000070  4828              LDR      r0,|L179.276|
000072  3080              ADDS     r0,r0,#0x80
000074  6840              LDR      r0,[r0,#4]
000076  2120              MOVS     r1,#0x20
000078  4308              ORRS     r0,r0,r1
00007a  4926              LDR      r1,|L179.276|
00007c  3180              ADDS     r1,r1,#0x80
00007e  6048              STR      r0,[r1,#4]
;;;63     		GPIOC_PSOR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT; 
000080  4824              LDR      r0,|L179.276|
000082  3040              ADDS     r0,r0,#0x40
000084  6840              LDR      r0,[r0,#4]
000086  21ff              MOVS     r1,#0xff
000088  31c1              ADDS     r1,r1,#0xc1
00008a  4308              ORRS     r0,r0,r1
00008c  4921              LDR      r1,|L179.276|
00008e  3140              ADDS     r1,r1,#0x40
000090  6048              STR      r0,[r1,#4]
;;;64     		GPIOC_PSOR |= RESET_SHIFT;
000092  4608              MOV      r0,r1
000094  6840              LDR      r0,[r0,#4]
000096  2120              MOVS     r1,#0x20
000098  4308              ORRS     r0,r0,r1
00009a  491e              LDR      r1,|L179.276|
00009c  3140              ADDS     r1,r1,#0x40
00009e  6048              STR      r0,[r1,#4]
;;;65         
;;;66         GPIOE_PDDR |= RED_SHIFT | GREEN_SHIFT;  //Set the pin's direction to output
0000a0  481c              LDR      r0,|L179.276|
0000a2  30c0              ADDS     r0,r0,#0xc0
0000a4  6940              LDR      r0,[r0,#0x14]
0000a6  2105              MOVS     r1,#5
0000a8  0749              LSLS     r1,r1,#29
0000aa  4308              ORRS     r0,r0,r1
0000ac  4919              LDR      r1,|L179.276|
0000ae  31c0              ADDS     r1,r1,#0xc0
0000b0  6148              STR      r0,[r1,#0x14]
;;;67         GPIOD_PDDR |= BLUE_SHIFT;               //Set the pin's direction to output
0000b2  4818              LDR      r0,|L179.276|
0000b4  3080              ADDS     r0,r0,#0x80
0000b6  6940              LDR      r0,[r0,#0x14]
0000b8  2120              MOVS     r1,#0x20
0000ba  4308              ORRS     r0,r0,r1
0000bc  4915              LDR      r1,|L179.276|
0000be  3180              ADDS     r1,r1,#0x80
0000c0  6148              STR      r0,[r1,#0x14]
;;;68     		GPIOC_PDDR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT | RESET_SHIFT; 
0000c2  4814              LDR      r0,|L179.276|
0000c4  3040              ADDS     r0,r0,#0x40
0000c6  6940              LDR      r0,[r0,#0x14]
0000c8  21ff              MOVS     r1,#0xff
0000ca  31e1              ADDS     r1,r1,#0xe1
0000cc  4308              ORRS     r0,r0,r1
0000ce  4911              LDR      r1,|L179.276|
0000d0  3140              ADDS     r1,r1,#0x40
0000d2  6148              STR      r0,[r1,#0x14]
;;;69         
;;;70         RED_ON;		//Turn off RED LED
0000d4  0588              LSLS     r0,r1,#22
0000d6  490f              LDR      r1,|L179.276|
0000d8  31c0              ADDS     r1,r1,#0xc0
0000da  6088              STR      r0,[r1,#8]
;;;71         GREEN_ON;	//Turn off GREEN LED
0000dc  0080              LSLS     r0,r0,#2
0000de  6088              STR      r0,[r1,#8]
;;;72         BLUE_ON;		//Turn off BLUE LED
0000e0  2020              MOVS     r0,#0x20
0000e2  490c              LDR      r1,|L179.276|
0000e4  3180              ADDS     r1,r1,#0x80
0000e6  6088              STR      r0,[r1,#8]
;;;73     		REDBAT_ON;
0000e8  2040              MOVS     r0,#0x40
0000ea  490a              LDR      r1,|L179.276|
0000ec  3140              ADDS     r1,r1,#0x40
0000ee  6088              STR      r0,[r1,#8]
;;;74     		GREENBAT_ON;
0000f0  2080              MOVS     r0,#0x80
0000f2  6088              STR      r0,[r1,#8]
;;;75     		BLUEBAT_ON;
0000f4  0040              LSLS     r0,r0,#1
0000f6  6088              STR      r0,[r1,#8]
;;;76     		RESET_ON;
0000f8  2020              MOVS     r0,#0x20
0000fa  6048              STR      r0,[r1,#4]
;;;77     		
;;;78     	
;;;79     }
0000fc  4770              BX       lr
;;;80     
                          ENDP

0000fe  0000              DCW      0x0000
                  |L179.256|
                          DCD      0x40048000
                  |L179.260|
                          DCD      0x4004d040
                  |L179.264|
                          DCD      0x4004c000
                  |L179.268|
                          DCD      0x4004b000
                  |L179.272|
                          DCD      0x4004a000
                  |L179.276|
                          DCD      0x400ff040

                          AREA ||i.ignstatoff||, COMGROUP=ignstatoff, CODE, READONLY, ALIGN=2

                  ignstatoff PROC
;;;1278   }	
;;;1279   __inline void ignstatoff(){
000000  b508              PUSH     {r3,lr}
;;;1280   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L186.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L186.64|
000008  4a0e              LDR      r2,|L186.68|
00000a  490f              LDR      r1,|L186.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L186.76|
000010  f7fffffe          BL       send_GSM
;;;1281   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L186.64|
000018  4a0a              LDR      r2,|L186.68|
00001a  490d              LDR      r1,|L186.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L186.84|
000020  f7fffffe          BL       send_GSM
;;;1282   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1283   send_GSM("\nIOFF\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L186.64|
00002e  4a05              LDR      r2,|L186.68|
000030  4909              LDR      r1,|L186.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L186.92|
000036  f7fffffe          BL       send_GSM
;;;1284   
;;;1285   
;;;1286   }		
00003a  bd08              POP      {r3,pc}
;;;1287   
                          ENDP

                  |L186.60|
                          DCD      tmeout
                  |L186.64|
                          DCD      ||.conststring||+0x10
                  |L186.68|
                          DCD      ||.conststring||+0x18
                  |L186.72|
                          DCD      ||.conststring||+0x2c
                  |L186.76|
                          DCD      ||.conststring||+0x30
                  |L186.80|
                          DCD      ||.conststring||+0x20
                  |L186.84|
                          DCD      ||.conststring||+0x4c
                  |L186.88|
                          DCD      ||.conststring||+0x70
                  |L186.92|
                          DCD      ||.conststring||+0x79c

                          AREA ||i.clear2||, COMGROUP=clear2, CODE, READONLY, ALIGN=2

                  clear2 PROC
;;;1425   
;;;1426   __inline void clear2()
000000  4803              LDR      r0,|L192.16|
;;;1427   {
;;;1428   //    if (UART_S1_REG(UART2_BASE_PTR) & UART_S1_OR_MASK)
;;;1429   //    {
;;;1430   //      temp = UART_D_REG(UART2_BASE_PTR);
;;;1431   //    }
;;;1432   
;;;1433   	UART_S1_REG(UART2_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000002  7900              LDRB     r0,[r0,#4]
000004  2118              MOVS     r1,#0x18
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L192.16|
00000a  7108              STRB     r0,[r1,#4]
;;;1434   }	
00000c  4770              BX       lr
;;;1435   
                          ENDP

00000e  0000              DCW      0x0000
                  |L192.16|
                          DCD      0x4006c000

                          AREA ||i.savecursord||, COMGROUP=savecursord, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursord PROC
;;;1331   }	
;;;1332   	__inline void savecursord(){
000000  b508              PUSH     {r3,lr}
;;;1333   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4814              LDR      r0,|L198.84|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b14              LDR      r3,|L198.88|
000008  4a14              LDR      r2,|L198.92|
00000a  4915              LDR      r1,|L198.96|
00000c  9000              STR      r0,[sp,#0]
00000e  4815              LDR      r0,|L198.100|
000010  f7fffffe          BL       send_GSM
;;;1334   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b10              LDR      r3,|L198.88|
000018  4a10              LDR      r2,|L198.92|
00001a  4913              LDR      r1,|L198.104|
00001c  9000              STR      r0,[sp,#0]
00001e  4813              LDR      r0,|L198.108|
000020  f7fffffe          BL       send_GSM
;;;1335   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1336   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4810              LDR      r0,|L198.112|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1337   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",0,0,0);		
000032  2000              MOVS     r0,#0
000034  4603              MOV      r3,r0
000036  4602              MOV      r2,r0
000038  490e              LDR      r1,|L198.116|
00003a  9000              STR      r0,[sp,#0]
00003c  480c              LDR      r0,|L198.112|
00003e  f7fffffe          BL       __2sprintf
;;;1338   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000042  200a              MOVS     r0,#0xa
000044  4b04              LDR      r3,|L198.88|
000046  4a05              LDR      r2,|L198.92|
000048  4905              LDR      r1,|L198.96|
00004a  9000              STR      r0,[sp,#0]
00004c  4808              LDR      r0,|L198.112|
00004e  f7fffffe          BL       send_GSM
;;;1339   }	
000052  bd08              POP      {r3,pc}
;;;1340   		
                          ENDP

                  |L198.84|
                          DCD      tmeout
                  |L198.88|
                          DCD      ||.conststring||+0x10
                  |L198.92|
                          DCD      ||.conststring||+0x18
                  |L198.96|
                          DCD      ||.conststring||+0x2c
                  |L198.100|
                          DCD      ||.conststring||+0x7a8
                  |L198.104|
                          DCD      ||.conststring||+0x20
                  |L198.108|
                          DCD      ||.conststring||+0x7c8
                  |L198.112|
                          DCD      at_
                  |L198.116|
                          DCD      ||.conststring||+0x7f0

                          AREA ||i.read_ip_port||, COMGROUP=read_ip_port, CODE, READONLY, ALIGN=2

                  read_ip_port PROC
;;;1298   	
;;;1299   __inline void read_ip_port()
000000  b51c              PUSH     {r2-r4,lr}
;;;1300   {
;;;1301   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4811              LDR      r0,|L204.76|
000006  f7fffffe          BL       __aeabi_memclr
;;;1302   	//	memset(ip,0,strlen(ip));
;;;1303   		//memset(port,0,strlen(port));
;;;1304   		sprintf(at_, "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n");		
00000a  4911              LDR      r1,|L204.80|
00000c  480f              LDR      r0,|L204.76|
00000e  f7fffffe          BL       __2sprintf
;;;1305   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0f              LDR      r3,|L204.84|
000016  4a10              LDR      r2,|L204.88|
000018  4910              LDR      r1,|L204.92|
00001a  9000              STR      r0,[sp,#0]
00001c  480b              LDR      r0,|L204.76|
00001e  f7fffffe          BL       send_GSM
;;;1306   		parse_g(uart_string_gsm, 2,3, '|', '|',ip);
000022  480f              LDR      r0,|L204.96|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480c              LDR      r0,|L204.100|
000032  f7fffffe          BL       parse_g
;;;1307   		parse_g(uart_string_gsm, 4,5, '|', '|',port);
000036  480c              LDR      r0,|L204.104|
000038  217c              MOVS     r1,#0x7c
00003a  460b              MOV      r3,r1
00003c  2205              MOVS     r2,#5
00003e  9100              STR      r1,[sp,#0]
000040  9001              STR      r0,[sp,#4]
000042  2104              MOVS     r1,#4
000044  4807              LDR      r0,|L204.100|
000046  f7fffffe          BL       parse_g
;;;1308   	
;;;1309   }		
00004a  bd1c              POP      {r2-r4,pc}
;;;1310   	
                          ENDP

                  |L204.76|
                          DCD      at_
                  |L204.80|
                          DCD      ||.conststring||+0x834
                  |L204.84|
                          DCD      ||.conststring||+0x10
                  |L204.88|
                          DCD      ||.conststring||+0x18
                  |L204.92|
                          DCD      ||.conststring||+0x2c
                  |L204.96|
                          DCD      ||ip||
                  |L204.100|
                          DCD      uart_string_gsm
                  |L204.104|
                          DCD      port

                          AREA ||i.read_interval||, COMGROUP=read_interval, CODE, READONLY, ALIGN=2

                  read_interval PROC
;;;1310   	
;;;1311   __inline void read_interval()
000000  b51c              PUSH     {r2-r4,lr}
;;;1312   {
;;;1313   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480f              LDR      r0,|L210.68|
000006  f7fffffe          BL       __aeabi_memclr
;;;1314   		sprintf(at_, "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n");		
00000a  490f              LDR      r1,|L210.72|
00000c  480d              LDR      r0,|L210.68|
00000e  f7fffffe          BL       __2sprintf
;;;1315   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0d              LDR      r3,|L210.76|
000016  4a0e              LDR      r2,|L210.80|
000018  490e              LDR      r1,|L210.84|
00001a  9000              STR      r0,[sp,#0]
00001c  4809              LDR      r0,|L210.68|
00001e  f7fffffe          BL       send_GSM
;;;1316   		parse_g(uart_string_gsm, 2,3, '|', '|',interval);
000022  480d              LDR      r0,|L210.88|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480a              LDR      r0,|L210.92|
000032  f7fffffe          BL       parse_g
;;;1317   		int_erval=myAtoi(interval);		
000036  4808              LDR      r0,|L210.88|
000038  f7fffffe          BL       myAtoi
00003c  4908              LDR      r1,|L210.96|
00003e  6008              STR      r0,[r1,#0]  ; int_erval
;;;1318   
;;;1319   
;;;1320   }	
000040  bd1c              POP      {r2-r4,pc}
;;;1321   
                          ENDP

000042  0000              DCW      0x0000
                  |L210.68|
                          DCD      at_
                  |L210.72|
                          DCD      ||.conststring||+0x858
                  |L210.76|
                          DCD      ||.conststring||+0x10
                  |L210.80|
                          DCD      ||.conststring||+0x18
                  |L210.84|
                          DCD      ||.conststring||+0x2c
                  |L210.88|
                          DCD      interval
                  |L210.92|
                          DCD      uart_string_gsm
                  |L210.96|
                          DCD      int_erval

                          AREA ||i.savecursor||, COMGROUP=savecursor, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursor PROC
;;;1323   
;;;1324   	__inline void savecursor(){
000000  b508              PUSH     {r3,lr}
;;;1325   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4816              LDR      r0,|L216.92|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b16              LDR      r3,|L216.96|
000008  4a16              LDR      r2,|L216.100|
00000a  4917              LDR      r1,|L216.104|
00000c  9000              STR      r0,[sp,#0]
00000e  4817              LDR      r0,|L216.108|
000010  f7fffffe          BL       send_GSM
;;;1326   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b12              LDR      r3,|L216.96|
000018  4a12              LDR      r2,|L216.100|
00001a  4915              LDR      r1,|L216.112|
00001c  9000              STR      r0,[sp,#0]
00001e  4815              LDR      r0,|L216.116|
000020  f7fffffe          BL       send_GSM
;;;1327   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1328   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4812              LDR      r0,|L216.120|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1329   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",times,k5,cursorvaluepr);		
000032  4812              LDR      r0,|L216.124|
000034  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
000036  9000              STR      r0,[sp,#0]
000038  4811              LDR      r0,|L216.128|
00003a  6803              LDR      r3,[r0,#0]  ; k5
00003c  4811              LDR      r0,|L216.132|
00003e  4912              LDR      r1,|L216.136|
000040  6802              LDR      r2,[r0,#0]  ; times
000042  480d              LDR      r0,|L216.120|
000044  f7fffffe          BL       __2sprintf
;;;1330   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000048  200a              MOVS     r0,#0xa
00004a  4b05              LDR      r3,|L216.96|
00004c  4a05              LDR      r2,|L216.100|
00004e  4906              LDR      r1,|L216.104|
000050  9000              STR      r0,[sp,#0]
000052  4809              LDR      r0,|L216.120|
000054  f7fffffe          BL       send_GSM
;;;1331   }	
000058  bd08              POP      {r3,pc}
;;;1332   	__inline void savecursord(){
                          ENDP

00005a  0000              DCW      0x0000
                  |L216.92|
                          DCD      tmeout
                  |L216.96|
                          DCD      ||.conststring||+0x10
                  |L216.100|
                          DCD      ||.conststring||+0x18
                  |L216.104|
                          DCD      ||.conststring||+0x2c
                  |L216.108|
                          DCD      ||.conststring||+0x7a8
                  |L216.112|
                          DCD      ||.conststring||+0x20
                  |L216.116|
                          DCD      ||.conststring||+0x7c8
                  |L216.120|
                          DCD      at_
                  |L216.124|
                          DCD      cursorvaluepr
                  |L216.128|
                          DCD      ||k5||
                  |L216.132|
                          DCD      times
                  |L216.136|
                          DCD      ||.conststring||+0x7f0

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L222.24|
                  |L222.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L222.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L222.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_vts_ver2_c_tout____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REVSH|
#line 402
|__asm___10_vts_ver2_c_tout____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
