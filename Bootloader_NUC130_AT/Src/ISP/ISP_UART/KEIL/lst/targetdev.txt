; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\targetdev.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\targetdev.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC100Series\Include -I..\..\..\..\Library\StdDriver\inc -I.\RTE\_ISP_UART -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\NUC100\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -Dg_u8RecDatamax=3000 -Dfirmwarechunksize=2000 --omf_browse=.\obj\targetdev.crf ..\targetdev.c]
                          THUMB

                          AREA ||i.GetApromSize||, CODE, READONLY, ALIGN=1

                  GetApromSize PROC
;;;7      //the smallest of APROM size is 32K (32K, 64K, 128K)
;;;8      uint32_t GetApromSize()
000000  b538              PUSH     {r3-r5,lr}
;;;9      {
;;;10         uint32_t size = 0x8000, data;
000002  2401              MOVS     r4,#1
000004  03e4              LSLS     r4,r4,#15
                  |L1.6|
;;;11         int result;
;;;12     
;;;13         do {
;;;14             result = FMC_Read_User(size, &data);
000006  4669              MOV      r1,sp
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       FMC_Read_User
;;;15             if(result < 0) {
00000e  2800              CMP      r0,#0
000010  da01              BGE      |L1.22|
;;;16                 return size;
000012  4620              MOV      r0,r4
;;;17             } else
;;;18                 size *= 2;
;;;19         } while(1);
;;;20     }
000014  bd38              POP      {r3-r5,pc}
                  |L1.22|
000016  0064              LSLS     r4,r4,#1              ;18
000018  e7f5              B        |L1.6|
;;;21     
                          ENDP


                          AREA ||i.GetDataFlashInfo||, CODE, READONLY, ALIGN=2

                  GetDataFlashInfo PROC
;;;21     
;;;22     void GetDataFlashInfo(uint32_t *addr, uint32_t *size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;23     {
;;;24         uint32_t uData;
;;;25     
;;;26         *size = 0;
000002  2700              MOVS     r7,#0
;;;27     
;;;28         if(g_apromSize >= 0x20000) {
000004  4e16              LDR      r6,|L2.96|
000006  600f              STR      r7,[r1,#0]
000008  460c              MOV      r4,r1                 ;23
00000a  4605              MOV      r5,r0                 ;23
00000c  2101              MOVS     r1,#1
00000e  6830              LDR      r0,[r6,#0]  ; g_apromSize
000010  0449              LSLS     r1,r1,#17
000012  4288              CMP      r0,r1
000014  d31e              BCC      |L2.84|
;;;29             FMC_Read_User(Config0, &uData);
000016  2003              MOVS     r0,#3
000018  4669              MOV      r1,sp
00001a  0500              LSLS     r0,r0,#20
00001c  f7fffffe          BL       FMC_Read_User
;;;30             if((uData&0x01) == 0) { //DFEN enable
000020  9800              LDR      r0,[sp,#0]
000022  07c0              LSLS     r0,r0,#31
000024  d003              BEQ      |L2.46|
;;;31                 FMC_Read_User(Config1, &uData);
;;;32                 if(uData > g_apromSize || (uData & 0x1FF))//avoid config1 value from error
;;;33                     uData = g_apromSize;
;;;34     
;;;35                 *addr = uData;
;;;36                 *size = g_apromSize - uData;
;;;37             } else {
;;;38                 *addr = g_apromSize;
000026  6830              LDR      r0,[r6,#0]  ; g_apromSize
;;;39                 *size = 0;
000028  6028              STR      r0,[r5,#0]
00002a  6027              STR      r7,[r4,#0]
;;;40             }
;;;41         } else {
;;;42             *addr = 0x1F000;
;;;43             *size = 4096;//4K
;;;44         }
;;;45     }
00002c  bdf8              POP      {r3-r7,pc}
                  |L2.46|
00002e  4669              MOV      r1,sp                 ;31
000030  480c              LDR      r0,|L2.100|
000032  f7fffffe          BL       FMC_Read_User
000036  9900              LDR      r1,[sp,#0]            ;32
000038  6830              LDR      r0,[r6,#0]            ;32  ; g_apromSize
00003a  4281              CMP      r1,r0                 ;32
00003c  d801              BHI      |L2.66|
00003e  05c9              LSLS     r1,r1,#23             ;32
000040  d006              BEQ      |L2.80|
                  |L2.66|
000042  9000              STR      r0,[sp,#0]            ;33
                  |L2.68|
000044  6028              STR      r0,[r5,#0]            ;36
000046  6830              LDR      r0,[r6,#0]            ;36  ; g_apromSize
000048  9900              LDR      r1,[sp,#0]            ;36
00004a  1a40              SUBS     r0,r0,r1              ;36
                  |L2.76|
00004c  6020              STR      r0,[r4,#0]            ;43
00004e  bdf8              POP      {r3-r7,pc}
                  |L2.80|
000050  9800              LDR      r0,[sp,#0]            ;33
000052  e7f7              B        |L2.68|
                  |L2.84|
000054  201f              MOVS     r0,#0x1f              ;42
000056  0300              LSLS     r0,r0,#12             ;42
000058  6028              STR      r0,[r5,#0]            ;43
00005a  2001              MOVS     r0,#1                 ;43
00005c  0300              LSLS     r0,r0,#12             ;43
00005e  e7f5              B        |L2.76|
                          ENDP

                  |L2.96|
                          DCD      g_apromSize
                  |L2.100|
                          DCD      0x00300004

;*** Start embedded assembler ***

#line 1 "..\\targetdev.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_targetdev_c_11f79a65____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_targetdev_c_11f79a65____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_targetdev_c_11f79a65____REVSH|
#line 132
|__asm___11_targetdev_c_11f79a65____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
