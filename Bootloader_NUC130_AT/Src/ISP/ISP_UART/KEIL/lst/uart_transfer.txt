; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart_transfer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart_transfer.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC100Series\Include -I..\..\..\..\Library\StdDriver\inc -I.\RTE\_ISP_UART -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\NUC100\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -Dg_u8RecDatamax=3000 -Dfirmwarechunksize=2000 --omf_browse=.\obj\uart_transfer.crf ..\uart_transfer.c]
                          THUMB

                          AREA ||i.PutString||, CODE, READONLY, ALIGN=2

                  PutString PROC
;;;74     extern __align(4) uint8_t response_buff[64];
;;;75     void PutString(void)
000000  4905              LDR      r1,|L1.24|
;;;76     {
;;;77         uint32_t i;
;;;78     
;;;79         for(i = 0; i < MAX_PKT_SIZE; i++) {
;;;80             while ((UART_N->FSR & UART_FSR_TX_FULL_Msk));
;;;81             UART_N->THR = response_buff[i];
000002  4a06              LDR      r2,|L1.28|
000004  2000              MOVS     r0,#0                 ;79
                  |L1.6|
000006  698b              LDR      r3,[r1,#0x18]         ;80
000008  021b              LSLS     r3,r3,#8              ;80
00000a  d4fc              BMI      |L1.6|
00000c  5c13              LDRB     r3,[r2,r0]
00000e  600b              STR      r3,[r1,#0]
000010  1c40              ADDS     r0,r0,#1
000012  2840              CMP      r0,#0x40              ;79
000014  d3f7              BCC      |L1.6|
;;;82         }
;;;83     }
000016  4770              BX       lr
;;;84     
                          ENDP

                  |L1.24|
                          DCD      0x40150000
                  |L1.28|
                          DCD      response_buff

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART1_IRQHandler PROC
;;;35     /*---------------------------------------------------------------------------------------------------------*/
;;;36     void UART_N_IRQHandler(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;37     {
;;;38       uint8_t uart1data;
;;;39         while(!UART_GET_RX_EMPTY(UART1)) 
;;;40         {
;;;41           uart1data = UART_READ(UART1);
;;;42           //if(uart1data != 0){
;;;43             if(f==0)
000002  480f              LDR      r0,|L2.64|
;;;44               g_u8RecData[g_u8RecDataptr] = uart1data;
000004  4d0c              LDR      r5,|L2.56|
000006  4e0d              LDR      r6,|L2.60|
000008  4f0e              LDR      r7,|L2.68|
;;;45             else{
;;;46               firmwaredata[fptr] = uart1data;fptr++;}
00000a  4a0f              LDR      r2,|L2.72|
00000c  4b0f              LDR      r3,|L2.76|
00000e  6804              LDR      r4,[r0,#0]            ;37
000010  e00a              B        |L2.40|
                  |L2.18|
000012  6830              LDR      r0,[r6,#0]            ;41
000014  2c00              CMP      r4,#0                 ;43
000016  b2c1              UXTB     r1,r0                 ;41
000018  d00a              BEQ      |L2.48|
00001a  6818              LDR      r0,[r3,#0]  ; fptr
00001c  5411              STRB     r1,[r2,r0]
00001e  1c40              ADDS     r0,r0,#1
000020  6018              STR      r0,[r3,#0]  ; fptr
                  |L2.34|
;;;47             g_u8RecDataptr++;
000022  6828              LDR      r0,[r5,#0]  ; g_u8RecDataptr
000024  1c40              ADDS     r0,r0,#1
000026  6028              STR      r0,[r5,#0]  ; g_u8RecDataptr
                  |L2.40|
000028  69b0              LDR      r0,[r6,#0x18]         ;39
00002a  0440              LSLS     r0,r0,#17             ;39
00002c  d5f1              BPL      |L2.18|
;;;48     //        if(g_u8RecDataptr == g_u8RecDatamax-1){
;;;49     //          memset(g_u8RecData,0,g_u8RecDatamax);
;;;50     //          g_u8RecDataptr = 0;
;;;51     //        }
;;;52           }
;;;53         //}
;;;54     //    /*----- Determine interrupt source -----*/
;;;55       //  uint32_t u32IntSrc = UART_N->ISR;
;;;56     
;;;57     //    if(u32IntSrc & 0x11) { //RDA FIFO interrupt & RDA timeout interrupt
;;;58     //        while(((UART_N->FSR & UART_FSR_RX_EMPTY_Msk) == 0) && (bufhead < MAX_PKT_SIZE))	//RX fifo not empty
;;;59     //            uart_rcvbuf[bufhead++] = UART_N->RBR;
;;;60     //    }
;;;61     
;;;62     //    if(bufhead == MAX_PKT_SIZE) {
;;;63     //        bUartDataReady = TRUE;
;;;64     //        bufhead = 0;
;;;65     //    } else if(u32IntSrc & 0x10) {
;;;66     //        bufhead = 0;
;;;67     //    }
;;;68     }
00002e  bdf0              POP      {r4-r7,pc}
                  |L2.48|
000030  6828              LDR      r0,[r5,#0]            ;44  ; g_u8RecDataptr
000032  5439              STRB     r1,[r7,r0]            ;44
000034  e7f5              B        |L2.34|
;;;69     
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      ||area_number.11||
                  |L2.60|
                          DCD      0x40150000
                  |L2.64|
                          DCD      f
                  |L2.68|
                          DCD      ||area_number.7||
                  |L2.72|
                          DCD      firmwaredata
                  |L2.76|
                          DCD      fptr

                          AREA ||i.UART_Init||, CODE, READONLY, ALIGN=2

                  UART_Init PROC
;;;102    
;;;103    void UART_Init()
000000  480b              LDR      r0,|L3.48|
;;;104    {
;;;105        /*---------------------------------------------------------------------------------------------------------*/
;;;106        /* Init UART                                                                                               */
;;;107        /*---------------------------------------------------------------------------------------------------------*/
;;;108    
;;;109    //  UART_N->FUN_SEL = UART_FUNC_SEL_UART;
;;;110        UART_N->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
000002  2103              MOVS     r1,#3
000004  60c1              STR      r1,[r0,#0xc]
;;;111        UART_N->FCR = UART_FCR_RFITL_14BYTES | UART_FCR_RTS_TRI_LEV_14BYTES;
000006  490b              LDR      r1,|L3.52|
000008  6081              STR      r1,[r0,#8]
;;;112    
;;;113        UART_N->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(__HIRC, 115200));
00000a  210a              MOVS     r1,#0xa
00000c  6241              STR      r1,[r0,#0x24]
;;;114    
;;;115    //  UART_N->TOR = (UART_N->TOR & ~UART_TOR_TOIC_Msk)| (0x40);
;;;116        UART_N->TOR = 0x40;
00000e  2140              MOVS     r1,#0x40
000010  6201              STR      r1,[r0,#0x20]
000012  4909              LDR      r1,|L3.56|
000014  680a              LDR      r2,[r1,#0]
000016  23ff              MOVS     r3,#0xff
000018  021b              LSLS     r3,r3,#8
00001a  439a              BICS     r2,r2,r3
00001c  2301              MOVS     r3,#1
00001e  03db              LSLS     r3,r3,#15
000020  431a              ORRS     r2,r2,r3
000022  600a              STR      r2,[r1,#0]
000024  4a05              LDR      r2,|L3.60|
000026  1099              ASRS     r1,r3,#2
000028  6011              STR      r1,[r2,#0]
;;;117    
;;;118        NVIC_SetPriority (UART_N_IRQn, 2);
;;;119        NVIC_EnableIRQ(UART_N_IRQn);
;;;120    
;;;121        UART_N->IER = (UART_IER_TIME_OUT_EN_Msk | UART_IER_TOUT_IEN_Msk | UART_IER_RDA_IEN_Msk);	
00002a  4905              LDR      r1,|L3.64|
00002c  6041              STR      r1,[r0,#4]
;;;122    }
00002e  4770              BX       lr
;;;123    
                          ENDP

                  |L3.48|
                          DCD      0x40150000
                  |L3.52|
                          DCD      0x00030030
                  |L3.56|
                          DCD      0xe000e40c
                  |L3.60|
                          DCD      0xe000e100
                  |L3.64|
                          DCD      0x00000811

                          AREA ||i.send_at||, CODE, READONLY, ALIGN=2

                  send_at PROC
;;;85     
;;;86     void send_at(char* cmd, char* response1, char* response2, char* response3)
000000  b5ff              PUSH     {r0-r7,lr}
;;;87     {   g_u8RecDataptr = 0;
000002  4604              MOV      r4,r0
000004  491a              LDR      r1,|L4.112|
000006  b081              SUB      sp,sp,#4
000008  2000              MOVS     r0,#0
;;;88         g_au32TMRINTCount = 0;
00000a  4e1a              LDR      r6,|L4.116|
00000c  6008              STR      r0,[r1,#0]  ; g_u8RecDataptr
;;;89         while ((UART_N->FSR & UART_FSR_TX_FULL_Msk));
00000e  4d1a              LDR      r5,|L4.120|
000010  461f              MOV      r7,r3                 ;87
000012  6030              STR      r0,[r6,#0]  ; g_au32TMRINTCount
                  |L4.20|
000014  69a8              LDR      r0,[r5,#0x18]
000016  0200              LSLS     r0,r0,#8
000018  d4fc              BMI      |L4.20|
;;;90         UART_N->THR = 0x0A;
00001a  200a              MOVS     r0,#0xa
00001c  6028              STR      r0,[r5,#0]
                  |L4.30|
;;;91         while ((UART_N->FSR & UART_FSR_TX_FULL_Msk));
00001e  69a8              LDR      r0,[r5,#0x18]
000020  0200              LSLS     r0,r0,#8
000022  d4fc              BMI      |L4.30|
;;;92         UART_N->THR = 0x1A;
000024  201a              MOVS     r0,#0x1a
000026  6028              STR      r0,[r5,#0]
;;;93         memset(g_u8RecData,0,g_u8RecDatamax);
000028  4914              LDR      r1,|L4.124|
00002a  4815              LDR      r0,|L4.128|
00002c  f7fffffe          BL       __aeabi_memclr
;;;94         while(*cmd != '\0'){
000030  e004              B        |L4.60|
                  |L4.50|
;;;95             while ((UART_N->FSR & UART_FSR_TX_FULL_Msk));
000032  69a9              LDR      r1,[r5,#0x18]
000034  0209              LSLS     r1,r1,#8
000036  d4fc              BMI      |L4.50|
;;;96             UART_N->THR = *cmd;
000038  6028              STR      r0,[r5,#0]
00003a  1c64              ADDS     r4,r4,#1
                  |L4.60|
00003c  7820              LDRB     r0,[r4,#0]            ;94
00003e  2800              CMP      r0,#0                 ;94
000040  d1f7              BNE      |L4.50|
                  |L4.66|
;;;97             *cmd++;
;;;98         }
;;;99         while(!((strstr(g_u8RecData, response1)) ||  (strstr(g_u8RecData, response2)) ||  (strstr(g_u8RecData, response3))) && ((g_au32TMRINTCount < 2)) );    
000042  480f              LDR      r0,|L4.128|
000044  9902              LDR      r1,[sp,#8]
000046  f7fffffe          BL       strstr
00004a  2800              CMP      r0,#0
00004c  d10e              BNE      |L4.108|
00004e  480c              LDR      r0,|L4.128|
000050  9903              LDR      r1,[sp,#0xc]
000052  f7fffffe          BL       strstr
000056  2800              CMP      r0,#0
000058  d108              BNE      |L4.108|
00005a  4639              MOV      r1,r7
00005c  4808              LDR      r0,|L4.128|
00005e  f7fffffe          BL       strstr
000062  2800              CMP      r0,#0
000064  d102              BNE      |L4.108|
000066  6830              LDR      r0,[r6,#0]  ; g_au32TMRINTCount
000068  2802              CMP      r0,#2
00006a  d3ea              BCC      |L4.66|
                  |L4.108|
;;;100    }
00006c  b005              ADD      sp,sp,#0x14
00006e  bdf0              POP      {r4-r7,pc}
;;;101    
                          ENDP

                  |L4.112|
                          DCD      ||area_number.11||
                  |L4.116|
                          DCD      g_au32TMRINTCount
                  |L4.120|
                          DCD      0x40150000
                  |L4.124|
                          DCD      0x00000bb8
                  |L4.128|
                          DCD      ||area_number.7||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  uart_rcvbuf
                          %        64

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.bss||
                  g_u8RecData
                          %        3000

                          AREA ||.data||, DATA, ALIGN=0

                  bUartDataReady
000000  00                DCB      0x00

                          AREA ||area_number.10||, DATA, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.data||
                  bufhead
000000  00                DCB      0x00

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  g_u8RecDataptr
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\uart_transfer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_uart_transfer_c_92e3c5f3____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_uart_transfer_c_92e3c5f3____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_uart_transfer_c_92e3c5f3____REVSH|
#line 132
|__asm___15_uart_transfer_c_92e3c5f3____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
