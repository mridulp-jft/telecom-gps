; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC100Series\Include -I..\..\..\..\Library\StdDriver\inc -I.\RTE\_ISP_UART -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\NUC100\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -Dg_u8RecDatamax=3000 -Dfirmwarechunksize=2000 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;66     
;;;67     void SYS_Init(void)
000000  481a              LDR      r0,|L1.108|
;;;68     {
;;;69         /*---------------------------------------------------------------------------------------------------------*/
;;;70         /* Init System Clock                                                                                       */
;;;71         /*---------------------------------------------------------------------------------------------------------*/
;;;72     
;;;73         /* Enable Internal RC 22.1184MHz clock */
;;;74         CLK->PWRCON |= (CLK_PWRCON_OSC22M_EN_Msk | CLK_PWRCON_XTL12M_EN_Msk);
000002  6801              LDR      r1,[r0,#0]
000004  2205              MOVS     r2,#5
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
                  |L1.10|
;;;75     
;;;76         /* Waiting for Internal RC clock ready */
;;;77         while(!(CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk));
00000a  68c1              LDR      r1,[r0,#0xc]
00000c  06c9              LSLS     r1,r1,#27
00000e  d5fc              BPL      |L1.10|
;;;78     
;;;79         /* Switch HCLK clock source to Internal RC and HCLK source divide 1 */
;;;80         //CLK->CLKSEL0 &= ~CLK_CLKSEL0_HCLK_S_Msk;
;;;81         //CLK->CLKSEL0 |= CLK_CLKSEL0_HCLK_S_HIRC;
;;;82         CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_HIRC;
000010  6901              LDR      r1,[r0,#0x10]
000012  2207              MOVS     r2,#7
000014  4311              ORRS     r1,r1,r2
000016  6101              STR      r1,[r0,#0x10]
;;;83         CLK->CLKDIV &= ~CLK_CLKDIV_HCLK_N_Msk;
000018  6981              LDR      r1,[r0,#0x18]
00001a  0909              LSRS     r1,r1,#4
00001c  0109              LSLS     r1,r1,#4
00001e  6181              STR      r1,[r0,#0x18]
;;;84         CLK->CLKDIV |= CLK_CLKDIV_HCLK(1);
000020  6981              LDR      r1,[r0,#0x18]
000022  6181              STR      r1,[r0,#0x18]
;;;85     
;;;86         /* Set core clock as PLL_CLOCK from PLL */
;;;87         CLK->PLLCON = PLLCON_SETTING;
000024  4912              LDR      r1,|L1.112|
000026  6201              STR      r1,[r0,#0x20]
                  |L1.40|
;;;88         while(!(CLK->CLKSTATUS & CLK_CLKSTATUS_PLL_STB_Msk));
000028  68c1              LDR      r1,[r0,#0xc]
00002a  0749              LSLS     r1,r1,#29
00002c  d5fc              BPL      |L1.40|
;;;89         //CLK->CLKSEL0 &= (~CLK_CLKSEL0_HCLK_S_Msk);
;;;90         //CLK->CLKSEL0 |= CLK_CLKSEL0_HCLK_S_PLL;
;;;91         CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_PLL;
00002e  6901              LDR      r1,[r0,#0x10]
000030  08c9              LSRS     r1,r1,#3
000032  00c9              LSLS     r1,r1,#3
000034  1c89              ADDS     r1,r1,#2
000036  6101              STR      r1,[r0,#0x10]
;;;92     
;;;93         /* Update System Core Clock */
;;;94         /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;95         //SystemCoreClockUpdate();
;;;96         //PllClock        = PLL_CLOCK;            // PLL
;;;97         //SystemCoreClock = PLL_CLOCK / 1;        // HCLK
;;;98         CyclesPerUs     = PLL_CLOCK / 1000000;  // For SYS_SysTickDelay()
000038  4a0e              LDR      r2,|L1.116|
00003a  2132              MOVS     r1,#0x32
;;;99     
;;;100        /* Enable module clock */
;;;101        CLK->APBCLK |= (CLK_APBCLK_UART1_EN_Msk) |  CLK_APBCLK_TMR0_EN_Msk;
00003c  6011              STR      r1,[r2,#0]  ; CyclesPerUs
00003e  6881              LDR      r1,[r0,#8]
000040  4a0d              LDR      r2,|L1.120|
000042  4311              ORRS     r1,r1,r2
000044  6081              STR      r1,[r0,#8]
;;;102        CLK->AHBCLK |= CLK_AHBCLK_ISP_EN_Msk;	// (1ul << 2)
000046  6841              LDR      r1,[r0,#4]
000048  2204              MOVS     r2,#4
00004a  4311              ORRS     r1,r1,r2
00004c  6041              STR      r1,[r0,#4]
;;;103    
;;;104        /* Select module clock source */
;;;105        //CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART_S_HIRC, CLK_CLKDIV_UART(1));
;;;106        /* Select UART module clock source */
;;;107        CLK->CLKSEL1 &= ~CLK_CLKSEL1_UART_S_Msk;
00004e  6942              LDR      r2,[r0,#0x14]
000050  2103              MOVS     r1,#3
000052  0609              LSLS     r1,r1,#24
000054  438a              BICS     r2,r2,r1
000056  6142              STR      r2,[r0,#0x14]
;;;108        CLK->CLKSEL1 |= CLK_CLKSEL1_UART_S_HIRC;
000058  6942              LDR      r2,[r0,#0x14]
00005a  430a              ORRS     r2,r2,r1
00005c  6142              STR      r2,[r0,#0x14]
;;;109        /*---------------------------------------------------------------------------------------------------------*/
;;;110        /* Init I/O Multi-function                                                                                 */
;;;111        /*---------------------------------------------------------------------------------------------------------*/
;;;112    
;;;113        /* Set GPB multi-function pins for UART1 RXD and TXD */
;;;114        SYS->GPB_MFP |= (SYS_GPB_MFP_PB4_UART1_RXD | SYS_GPB_MFP_PB5_UART1_TXD);
00005e  2005              MOVS     r0,#5
000060  0700              LSLS     r0,r0,#28
000062  6b41              LDR      r1,[r0,#0x34]
000064  2230              MOVS     r2,#0x30
000066  4311              ORRS     r1,r1,r2
000068  6341              STR      r1,[r0,#0x34]
;;;115    }
00006a  4770              BX       lr
;;;116    
                          ENDP

                  |L1.108|
                          DCD      0x50000200
                  |L1.112|
                          DCD      0x00085639
                  |L1.116|
                          DCD      CyclesPerUs
                  |L1.120|
                          DCD      0x00020004

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1531     */
;;;1532   static __INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1533   {
;;;1534       while(SYS->REGWRPROT != SYS_REGWRPROT_REGPROTDIS_Msk)
;;;1535       {
;;;1536           SYS->REGWRPROT = 0x59;
000002  2159              MOVS     r1,#0x59
;;;1537           SYS->REGWRPROT = 0x16;
000004  2316              MOVS     r3,#0x16
000006  4805              LDR      r0,|L2.28|
;;;1538           SYS->REGWRPROT = 0x88;
000008  2288              MOVS     r2,#0x88
00000a  e002              B        |L2.18|
                  |L2.12|
00000c  6001              STR      r1,[r0,#0]            ;1536
00000e  6003              STR      r3,[r0,#0]            ;1537
000010  6002              STR      r2,[r0,#0]
                  |L2.18|
000012  6804              LDR      r4,[r0,#0]            ;1534
000014  2c01              CMP      r4,#1                 ;1534
000016  d1f9              BNE      |L2.12|
;;;1539       }
;;;1540   }
000018  bd10              POP      {r4,pc}
;;;1541   
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x50000100

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;245    
;;;246    void TMR0_IRQHandler(void)
000000  480a              LDR      r0,|L3.44|
000002  6881              LDR      r1,[r0,#8]
000004  07c9              LSLS     r1,r1,#31
000006  0fc9              LSRS     r1,r1,#31
;;;247    {
000008  d00f              BEQ      |L3.42|
00000a  2101              MOVS     r1,#1
00000c  6081              STR      r1,[r0,#8]
;;;248        if(TIMER_GetIntFlag(TIMER0) == 1)
;;;249        {
;;;250            /* Clear Timer0 time-out interrupt flag */
;;;251            TIMER_ClearIntFlag(TIMER0);
;;;252    
;;;253            g_au32TMRINTCount++;
00000e  4808              LDR      r0,|L3.48|
000010  68c1              LDR      r1,[r0,#0xc]  ; g_au32TMRINTCount
000012  1c49              ADDS     r1,r1,#1
;;;254            tmrsec++;
000014  60c1              STR      r1,[r0,#0xc]  ; g_au32TMRINTCount
000016  6841              LDR      r1,[r0,#4]  ; tmrsec
000018  1c49              ADDS     r1,r1,#1
00001a  6041              STR      r1,[r0,#4]  ; tmrsec
;;;255          if (tmrsec>1000)
00001c  6841              LDR      r1,[r0,#4]  ; tmrsec
00001e  227d              MOVS     r2,#0x7d
000020  00d2              LSLS     r2,r2,#3
000022  4291              CMP      r1,r2
000024  dd01              BLE      |L3.42|
;;;256            tmrsec = 0;
000026  2100              MOVS     r1,#0
000028  6041              STR      r1,[r0,#4]  ; tmrsec
                  |L3.42|
;;;257        }
;;;258    }
00002a  4770              BX       lr
;;;259    
                          ENDP

                  |L3.44|
                          DCD      0x40010000
                  |L3.48|
                          DCD      ||.data||

                          AREA ||i.delay||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;240    
;;;241    void delay(int sec){
000000  4903              LDR      r1,|L4.16|
;;;242      tmrsec = 0;
000002  2200              MOVS     r2,#0
000004  604a              STR      r2,[r1,#4]  ; tmrsec
                  |L4.6|
;;;243      while(sec>tmrsec);
000006  684a              LDR      r2,[r1,#4]  ; tmrsec
000008  4290              CMP      r0,r2
00000a  dcfc              BGT      |L4.6|
;;;244    }
00000c  4770              BX       lr
;;;245    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      ||.data||

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  main PROC
;;;119    /*---------------------------------------------------------------------------------------------------------*/
;;;120    int32_t main(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;121    {
;;;122        /* Unlock write-protected registers */
;;;123        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;124        WDT->WTCR &= ~(WDT_WTCR_WTE_Msk | WDT_WTCR_DBGACK_WDT_Msk);
000006  48ae              LDR      r0,|L5.704|
000008  6801              LDR      r1,[r0,#0]
00000a  4aae              LDR      r2,|L5.708|
00000c  4011              ANDS     r1,r1,r2
00000e  6001              STR      r1,[r0,#0]
;;;125        WDT->WTCR |= (WDT_TIMEOUT_2POW18 | WDT_WTCR_WTR_Msk);
000010  6801              LDR      r1,[r0,#0]
000012  4aad              LDR      r2,|L5.712|
000014  4311              ORRS     r1,r1,r2
000016  6001              STR      r1,[r0,#0]
;;;126        /* Init system and multi-funcition I/O */
;;;127        SYS_Init();
000018  f7fffffe          BL       SYS_Init
;;;128    
;;;129        UART_Init();
00001c  f7fffffe          BL       UART_Init
;;;130      
;;;131        TIMER0->TCMPR = __HXT;
000020  48ab              LDR      r0,|L5.720|
000022  49aa              LDR      r1,|L5.716|
000024  6041              STR      r1,[r0,#4]
;;;132        TIMER0->TCSR = TIMER_TCSR_IE_Msk | TIMER_PERIODIC_MODE;
000026  2105              MOVS     r1,#5
000028  06c9              LSLS     r1,r1,#27
00002a  6001              STR      r1,[r0,#0]
;;;133        TIMER_SET_PRESCALE_VALUE(TIMER0, 0);
00002c  6801              LDR      r1,[r0,#0]
00002e  0a09              LSRS     r1,r1,#8
000030  0209              LSLS     r1,r1,#8
000032  6001              STR      r1,[r0,#0]
000034  2601              MOVS     r6,#1
000036  4aa7              LDR      r2,|L5.724|
000038  1581              ASRS     r1,r0,#22
00003a  6011              STR      r1,[r2,#0]
00003c  6801              LDR      r1,[r0,#0]
00003e  0382              LSLS     r2,r0,#14
000040  4311              ORRS     r1,r1,r2
000042  6001              STR      r1,[r0,#0]
;;;134        //CLK_SetModuleClock(USBD_MODULE, 0, CLK_CLKDIV_USB(1));
;;;135        NVIC_EnableIRQ(TMR0_IRQn);
;;;136        TIMER_Start(TIMER0); 
;;;137        FMC->ISPCON |= FMC_ISPCON_ISPEN_Msk;	// (1ul << 0)
000044  48a4              LDR      r0,|L5.728|
000046  6801              LDR      r1,[r0,#0]
000048  4331              ORRS     r1,r1,r6
00004a  6001              STR      r1,[r0,#0]
;;;138        g_apromSize = GetApromSize();
00004c  f7fffffe          BL       GetApromSize
000050  49a2              LDR      r1,|L5.732|
;;;139        GetDataFlashInfo(&g_dataFlashAddr , &g_dataFlashSize);
000052  6008              STR      r0,[r1,#0]  ; g_apromSize
000054  49a2              LDR      r1,|L5.736|
000056  48a3              LDR      r0,|L5.740|
000058  f7fffffe          BL       GetDataFlashInfo
;;;140        SysTick->LOAD = 300000 * CyclesPerUs;
00005c  48a2              LDR      r0,|L5.744|
00005e  6801              LDR      r1,[r0,#0]  ; CyclesPerUs
000060  48a2              LDR      r0,|L5.748|
000062  4341              MULS     r1,r0,r1
000064  48a2              LDR      r0,|L5.752|
000066  6141              STR      r1,[r0,#0x14]
;;;141        SysTick->VAL   =  (0x00);
000068  2100              MOVS     r1,#0
00006a  6181              STR      r1,[r0,#0x18]
;;;142        SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;//using cpu clock
00006c  6901              LDR      r1,[r0,#0x10]
00006e  2205              MOVS     r2,#5
000070  4311              ORRS     r1,r1,r2
000072  6101              STR      r1,[r0,#0x10]
;;;143        while(1) {
;;;144    
;;;145            send_at("\r\n\r\nAT+QFTPCLOSE\r\n\r\n", "+QFTPCLOSE:", "ERROR", "NOT CONNECTED");
000074  a39f              ADR      r3,|L5.756|
000076  a2a3              ADR      r2,|L5.772|
000078  a1a4              ADR      r1,|L5.780|
00007a  a0a7              ADR      r0,|L5.792|
00007c  f7fffffe          BL       send_at
;;;146            send_at("\r\n\r\nAT+QFLST=\"*\"\r\n\r\n", "OK", "ERROR", "NOT CONNECTED");
000080  a39c              ADR      r3,|L5.756|
000082  a2a0              ADR      r2,|L5.772|
000084  a1aa              ADR      r1,|L5.816|
000086  a0ab              ADR      r0,|L5.820|
000088  f7fffffe          BL       send_at
;;;147            if(!strstr(g_u8RecData,"fw.bin"))goto _APROM;
00008c  a1af              ADR      r1,|L5.844|
00008e  48b1              LDR      r0,|L5.852|
000090  f7fffffe          BL       strstr
;;;148            if(strstr(g_u8RecData,"\"fw.bin\",0"))goto _APROM;
;;;149            fsize = strstr(g_u8RecData,"fw.bin");
;;;150            *fsize++;*fsize++;*fsize++;*fsize++;*fsize++;*fsize++;*fsize++;
;;;151            memset(filesize,0,10);
;;;152            parse_g(fsize, 1,1,',','\r',filesize);
;;;153            filesize_int = atoi(filesize);      
;;;154            send_at("\r\n\r\nAT+QFOPEN=\"fw.bin\",2\r\n\r\n", "OK", "ERROR", "NOT CONNECTED");
;;;155            memset(fileinstance,0,15);
;;;156            parse_g(g_u8RecData, 1,2, ':', '\n', fileinstance);
;;;157            remove_all_chars(fileinstance, '\r', '\n');
;;;158            if(strstr(g_u8RecData,"ERROR")){
;;;159              send_at("\r\n\r\nAT+CFUN=1,1\r\n\r\n", "OK", "ERROR", "NOT CONNECTED");  
;;;160              send_at("\r\n\r\nAT+QFOPEN=\"fw.bin\",2\r\n\r\n", "OK", "ERROR", "NOT CONNECTED");
;;;161              memset(fileinstance,0,15);
;;;162              parse_g(g_u8RecData, 1,2, ':', '\n', fileinstance);
;;;163              remove_all_chars(fileinstance, '\r', '\n');
;;;164            }
;;;165            if(strstr(g_u8RecData,"ERROR")){
;;;166              SYS_UnlockReg();                          // Unlock Registers
;;;167              SYS->IPRSTC1 = 0x1; /* Reset MCU */
000094  2705              MOVS     r7,#5
000096  073f              LSLS     r7,r7,#28
000098  2800              CMP      r0,#0                 ;147
00009a  d07b              BEQ      |L5.404|
00009c  a1ae              ADR      r1,|L5.856|
00009e  48ad              LDR      r0,|L5.852|
0000a0  f7fffffe          BL       strstr
0000a4  2800              CMP      r0,#0                 ;148
0000a6  d175              BNE      |L5.404|
0000a8  a1a8              ADR      r1,|L5.844|
0000aa  48aa              LDR      r0,|L5.852|
0000ac  f7fffffe          BL       strstr
0000b0  4cac              LDR      r4,|L5.868|
0000b2  1dc5              ADDS     r5,r0,#7              ;150
0000b4  210a              MOVS     r1,#0xa               ;151
0000b6  48ac              LDR      r0,|L5.872|
0000b8  6165              STR      r5,[r4,#0x14]         ;151  ; fsize
0000ba  f7fffffe          BL       __aeabi_memclr4
0000be  49aa              LDR      r1,|L5.872|
0000c0  200d              MOVS     r0,#0xd               ;152
0000c2  2201              MOVS     r2,#1                 ;152
0000c4  9101              STR      r1,[sp,#4]            ;152
0000c6  9000              STR      r0,[sp,#0]            ;152
0000c8  232c              MOVS     r3,#0x2c              ;152
0000ca  4611              MOV      r1,r2                 ;152
0000cc  4628              MOV      r0,r5                 ;152
0000ce  f7fffffe          BL       parse_g
0000d2  48a5              LDR      r0,|L5.872|
0000d4  f7fffffe          BL       atoi
0000d8  6020              STR      r0,[r4,#0]            ;154  ; filesize_int
0000da  a386              ADR      r3,|L5.756|
0000dc  a289              ADR      r2,|L5.772|
0000de  a194              ADR      r1,|L5.816|
0000e0  a0a2              ADR      r0,|L5.876|
0000e2  f7fffffe          BL       send_at
0000e6  48a0              LDR      r0,|L5.872|
0000e8  210f              MOVS     r1,#0xf               ;155
0000ea  300a              ADDS     r0,r0,#0xa            ;155
0000ec  f7fffffe          BL       __aeabi_memclr
0000f0  4d9d              LDR      r5,|L5.872|
0000f2  200a              MOVS     r0,#0xa               ;156
0000f4  350a              ADDS     r5,r5,#0xa            ;156
0000f6  9000              STR      r0,[sp,#0]            ;156
0000f8  233a              MOVS     r3,#0x3a              ;156
0000fa  2202              MOVS     r2,#2                 ;156
0000fc  2101              MOVS     r1,#1                 ;156
0000fe  9501              STR      r5,[sp,#4]            ;156
000100  4894              LDR      r0,|L5.852|
000102  f7fffffe          BL       parse_g
000106  220a              MOVS     r2,#0xa               ;157
000108  210d              MOVS     r1,#0xd               ;157
00010a  4628              MOV      r0,r5                 ;157
00010c  f7fffffe          BL       remove_all_chars
000110  a17c              ADR      r1,|L5.772|
000112  4890              LDR      r0,|L5.852|
000114  f7fffffe          BL       strstr
000118  2800              CMP      r0,#0                 ;158
00011a  d01d              BEQ      |L5.344|
00011c  a375              ADR      r3,|L5.756|
00011e  a279              ADR      r2,|L5.772|
000120  a183              ADR      r1,|L5.816|
000122  a09a              ADR      r0,|L5.908|
000124  f7fffffe          BL       send_at
000128  a372              ADR      r3,|L5.756|
00012a  a276              ADR      r2,|L5.772|
00012c  a180              ADR      r1,|L5.816|
00012e  a08f              ADR      r0,|L5.876|
000130  f7fffffe          BL       send_at
000134  210f              MOVS     r1,#0xf               ;161
000136  4628              MOV      r0,r5                 ;161
000138  f7fffffe          BL       __aeabi_memclr
00013c  200a              MOVS     r0,#0xa               ;162
00013e  9000              STR      r0,[sp,#0]            ;162
000140  233a              MOVS     r3,#0x3a              ;162
000142  2202              MOVS     r2,#2                 ;162
000144  2101              MOVS     r1,#1                 ;162
000146  9501              STR      r5,[sp,#4]            ;162
000148  4882              LDR      r0,|L5.852|
00014a  f7fffffe          BL       parse_g
00014e  220a              MOVS     r2,#0xa               ;163
000150  210d              MOVS     r1,#0xd               ;163
000152  4628              MOV      r0,r5                 ;163
000154  f7fffffe          BL       remove_all_chars
                  |L5.344|
000158  a16a              ADR      r1,|L5.772|
00015a  487e              LDR      r0,|L5.852|
00015c  f7fffffe          BL       strstr
000160  2800              CMP      r0,#0                 ;165
000162  d002              BEQ      |L5.362|
000164  f7fffffe          BL       SYS_UnlockReg
000168  60be              STR      r6,[r7,#8]
                  |L5.362|
;;;168            }
;;;169            EraseAP(FMC_APROM_BASE, g_apromSize); // erase APROM // g_dataFlashAddr, g_apromSize
00016a  485c              LDR      r0,|L5.732|
00016c  6801              LDR      r1,[r0,#0]  ; g_apromSize
00016e  2000              MOVS     r0,#0
000170  f7fffffe          BL       EraseAP
;;;170            memset(temp, 0, 100);
000174  487c              LDR      r0,|L5.872|
000176  2164              MOVS     r1,#0x64
000178  3019              ADDS     r0,r0,#0x19
00017a  f7fffffe          BL       __aeabi_memclr
;;;171            if(filesize_int % firmwarechunksize == 0){
00017e  217d              MOVS     r1,#0x7d
000180  0109              LSLS     r1,r1,#4
000182  6820              LDR      r0,[r4,#0]  ; filesize_int
000184  f7fffffe          BL       __aeabi_idivmod
000188  2900              CMP      r1,#0
00018a  d000              BEQ      |L5.398|
00018c  1c40              ADDS     r0,r0,#1
                  |L5.398|
;;;172              times = (filesize_int/firmwarechunksize);
;;;173            }else{
;;;174              times = (filesize_int/firmwarechunksize)+1;
;;;175            }
;;;176            for(i = 0; i< times; i++){
00018e  60a0              STR      r0,[r4,#8]  ; times
000190  2000              MOVS     r0,#0
000192  e056              B        |L5.578|
                  |L5.404|
000194  e089              B        |L5.682|
                  |L5.406|
;;;177              memset(firmwaredata,0, firmwarechunksize+20);
000196  4d4c              LDR      r5,|L5.712|
000198  4873              LDR      r0,|L5.872|
00019a  35e3              ADDS     r5,r5,#0xe3
00019c  4629              MOV      r1,r5
00019e  307d              ADDS     r0,r0,#0x7d
0001a0  f7fffffe          BL       __aeabi_memclr
;;;178              memset(firmwaredata32,0, firmwarechunksize+20);   
0001a4  4629              MOV      r1,r5
0001a6  487e              LDR      r0,|L5.928|
0001a8  f7fffffe          BL       __aeabi_memclr4
;;;179              g_au32TMRINTCount = 0;
;;;180              sprintf(temp,"\r\n\r\nAT+QFREAD=%s,%d\r\n\r\n",fileinstance,firmwarechunksize);
0001ac  4a6e              LDR      r2,|L5.872|
0001ae  2000              MOVS     r0,#0                 ;179
0001b0  257d              MOVS     r5,#0x7d
0001b2  320a              ADDS     r2,r2,#0xa
0001b4  60e0              STR      r0,[r4,#0xc]  ; g_au32TMRINTCount
0001b6  012d              LSLS     r5,r5,#4
0001b8  4610              MOV      r0,r2
0001ba  462b              MOV      r3,r5
0001bc  a179              ADR      r1,|L5.932|
0001be  300f              ADDS     r0,r0,#0xf
0001c0  f7fffffe          BL       __2sprintf
;;;181              send_at(temp, "NO ACKNOWLEDGE", "NO ACKNOWLEDGE", "NO ACKNOWLEDGE\r\n");
0001c4  4868              LDR      r0,|L5.872|
0001c6  a37d              ADR      r3,|L5.956|
0001c8  a281              ADR      r2,|L5.976|
0001ca  a181              ADR      r1,|L5.976|
0001cc  3019              ADDS     r0,r0,#0x19
0001ce  f7fffffe          BL       send_at
;;;182              memset(temp, 0, 100);
0001d2  4865              LDR      r0,|L5.872|
0001d4  2164              MOVS     r1,#0x64
0001d6  3019              ADDS     r0,r0,#0x19
0001d8  f7fffffe          BL       __aeabi_memclr
;;;183              parse_g(g_u8RecData,1,2,'\n','\n',temp);
0001dc  4962              LDR      r1,|L5.872|
0001de  200a              MOVS     r0,#0xa
0001e0  3119              ADDS     r1,r1,#0x19
0001e2  4603              MOV      r3,r0
0001e4  9101              STR      r1,[sp,#4]
0001e6  9000              STR      r0,[sp,#0]
0001e8  2202              MOVS     r2,#2
0001ea  2101              MOVS     r1,#1
0001ec  4859              LDR      r0,|L5.852|
0001ee  f7fffffe          BL       parse_g
;;;184              strcat(temp, "\n");
0001f2  485d              LDR      r0,|L5.872|
0001f4  a17a              ADR      r1,|L5.992|
0001f6  3019              ADDS     r0,r0,#0x19
0001f8  f7fffffe          BL       strcat
;;;185              if(!strstr(temp,"CONNECT")){
0001fc  485a              LDR      r0,|L5.872|
0001fe  a179              ADR      r1,|L5.996|
000200  3019              ADDS     r0,r0,#0x19
000202  f7fffffe          BL       strstr
000206  2800              CMP      r0,#0
000208  d102              BNE      |L5.528|
;;;186                SYS_UnlockReg();                          // Unlock Registers
00020a  f7fffffe          BL       SYS_UnlockReg
;;;187                SYS->IPRSTC1 = 0x1; /* Reset MCU */
00020e  60be              STR      r6,[r7,#8]
                  |L5.528|
;;;188              }          
;;;189              firmwareparser(g_u8RecData, g_u8RecDatamax, temp, strlen(temp), "\r\nOK\r\n", strlen("\r\nOK\r\n"));
000210  4855              LDR      r0,|L5.872|
000212  3019              ADDS     r0,r0,#0x19
000214  f7fffffe          BL       strlen
000218  4603              MOV      r3,r0
00021a  2106              MOVS     r1,#6
00021c  a073              ADR      r0,|L5.1004|
00021e  4a52              LDR      r2,|L5.872|
000220  9101              STR      r1,[sp,#4]
000222  9000              STR      r0,[sp,#0]
000224  3219              ADDS     r2,r2,#0x19
000226  4973              LDR      r1,|L5.1012|
000228  484a              LDR      r0,|L5.852|
00022a  f7fffffe          BL       firmwareparser
;;;190              WriteData(StartAddress, StartAddress + firmwarechunksize, firmwaredata32);
00022e  6920              LDR      r0,[r4,#0x10]  ; StartAddress
000230  4a5b              LDR      r2,|L5.928|
000232  1941              ADDS     r1,r0,r5
000234  f7fffffe          BL       WriteData
;;;191              StartAddress+=firmwarechunksize;
000238  6920              LDR      r0,[r4,#0x10]  ; StartAddress
00023a  1940              ADDS     r0,r0,r5
00023c  6120              STR      r0,[r4,#0x10]         ;176  ; StartAddress
00023e  69a0              LDR      r0,[r4,#0x18]         ;176  ; i
000240  1c40              ADDS     r0,r0,#1              ;176
                  |L5.578|
000242  61a0              STR      r0,[r4,#0x18]         ;176  ; i
000244  68a1              LDR      r1,[r4,#8]            ;176  ; times
000246  4288              CMP      r0,r1                 ;176
000248  dba5              BLT      |L5.406|
;;;192              //parse_g(g_u8RecData, 2,3,'\n','\n', firmwaredata); 
;;;193              //len = strlen(firmwaredata);
;;;194              
;;;195            }
;;;196            sprintf(temp,"\r\n\r\nAT+QFCLOSE=%s\r\n\r\n",fileinstance);
00024a  4a47              LDR      r2,|L5.872|
00024c  a16a              ADR      r1,|L5.1016|
00024e  320a              ADDS     r2,r2,#0xa
000250  4610              MOV      r0,r2
000252  300f              ADDS     r0,r0,#0xf
000254  f7fffffe          BL       __2sprintf
;;;197            send_at(temp, "OK", "ERROR", "NOT CONNECTED");
000258  4843              LDR      r0,|L5.872|
00025a  a326              ADR      r3,|L5.756|
00025c  a229              ADR      r2,|L5.772|
00025e  a134              ADR      r1,|L5.816|
000260  3019              ADDS     r0,r0,#0x19
000262  f7fffffe          BL       send_at
;;;198            send_at(temp, "OK", "ERROR", "NOT CONNECTED");
000266  4840              LDR      r0,|L5.872|
000268  a322              ADR      r3,|L5.756|
00026a  a226              ADR      r2,|L5.772|
00026c  a130              ADR      r1,|L5.816|
00026e  3019              ADDS     r0,r0,#0x19
000270  f7fffffe          BL       send_at
;;;199            delay(5);
000274  2005              MOVS     r0,#5
000276  f7fffffe          BL       delay
                  |L5.634|
;;;200            //sprintf(temp,"\r\n\r\nAT+QFDEL=\"fw.bin\"\r\n\r\n",fileinstance);
;;;201            do{
;;;202              send_at("\r\n\r\nAT+CFUN=1,1\r\n\r\n", "OK", "ERROR", "NOT CONNECTED");
00027a  a31e              ADR      r3,|L5.756|
00027c  a221              ADR      r2,|L5.772|
00027e  a12c              ADR      r1,|L5.816|
000280  a042              ADR      r0,|L5.908|
000282  f7fffffe          BL       send_at
;;;203              delay(1);  
000286  2001              MOVS     r0,#1
000288  f7fffffe          BL       delay
;;;204              send_at("\r\nAT+QFDEL=\"fw.bin\"\r\n", "OK", "ERROR", "NOT CONNECTED");   
00028c  a319              ADR      r3,|L5.756|
00028e  a21d              ADR      r2,|L5.772|
000290  a127              ADR      r1,|L5.816|
000292  a05f              ADR      r0,|L5.1040|
000294  f7fffffe          BL       send_at
;;;205            }while(!strstr(g_u8RecData,"OK"));
000298  a125              ADR      r1,|L5.816|
00029a  482e              LDR      r0,|L5.852|
00029c  f7fffffe          BL       strstr
0002a0  2800              CMP      r0,#0
0002a2  d0ea              BEQ      |L5.634|
;;;206            SYS_UnlockReg();                          // Unlock Registers
0002a4  f7fffffe          BL       SYS_UnlockReg
;;;207            SYS->IPRSTC1 = 0x1; /* Reset MCU */     
0002a8  60be              STR      r6,[r7,#8]
                  |L5.682|
;;;208            goto _APROM;
;;;209          
;;;210    //        if(strstr(g_u8RecData,"fw.bin")){
;;;211    //          EraseAP(FMC_APROM_BASE, g_apromSize); // erase APROM // g_dataFlashAddr, g_apromSize
;;;212    //          
;;;213    //          //WriteData(StartAddress, StartAddress + srclen, (uint32_t*)pSrc); //WriteData(StartAddress, StartAddress + srclen, (uint32_t*)pSrc);   
;;;214    //          goto _APROM;
;;;215    //        }
;;;216    //        //if((SysTick->CTRL & (1 << 16)) != 0)//timeout, then goto APROM
;;;217    //        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
;;;218    //            goto _APROM;
;;;219          }
;;;220    
;;;221        while(1) {
;;;222            if (bUartDataReady == TRUE) {
;;;223                WDT->WTCR &= ~(WDT_WTCR_WTE_Msk | WDT_WTCR_DBGACK_WDT_Msk);
;;;224                WDT->WTCR |= (WDT_TIMEOUT_2POW18 | WDT_WTCR_WTR_Msk);
;;;225                bUartDataReady = FALSE;
;;;226                ParseCmd(uart_rcvbuf, 64);
;;;227                PutString();
;;;228            }
;;;229        }
;;;230    
;;;231    _APROM:
;;;232    
;;;233        outpw(&SYS->RSTSRC, 3);//clear bit
0002aa  2003              MOVS     r0,#3
0002ac  6078              STR      r0,[r7,#4]
;;;234        outpw(&FMC->ISPCON, inpw(&FMC->ISPCON) & 0xFFFFFFFC);
0002ae  480a              LDR      r0,|L5.728|
0002b0  6801              LDR      r1,[r0,#0]
0002b2  0889              LSRS     r1,r1,#2
0002b4  0089              LSLS     r1,r1,#2
0002b6  6001              STR      r1,[r0,#0]
;;;235        outpw(&SCB->AIRCR, (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ));
0002b8  495c              LDR      r1,|L5.1068|
0002ba  485b              LDR      r0,|L5.1064|
0002bc  60c8              STR      r0,[r1,#0xc]
                  |L5.702|
;;;236    
;;;237        /* Trap the CPU */
;;;238        while(1);
0002be  e7fe              B        |L5.702|
;;;239    }
;;;240    
                          ENDP

                  |L5.704|
                          DCD      0x40004000
                  |L5.708|
                          DCD      0x7fffff7f
                  |L5.712|
                          DCD      0x00000701
                  |L5.716|
                          DCD      0x00b71b00
                  |L5.720|
                          DCD      0x40010000
                  |L5.724|
                          DCD      0xe000e100
                  |L5.728|
                          DCD      0x5000c000
                  |L5.732|
                          DCD      g_apromSize
                  |L5.736|
                          DCD      g_dataFlashSize
                  |L5.740|
                          DCD      g_dataFlashAddr
                  |L5.744|
                          DCD      CyclesPerUs
                  |L5.748|
                          DCD      0x000493e0
                  |L5.752|
                          DCD      0xe000e000
                  |L5.756|
0002f4  4e4f5420          DCB      "NOT CONNECTED",0
0002f8  434f4e4e
0002fc  45435445
000300  4400    
000302  00                DCB      0
000303  00                DCB      0
                  |L5.772|
000304  4552524f          DCB      "ERROR",0
000308  5200    
00030a  00                DCB      0
00030b  00                DCB      0
                  |L5.780|
00030c  2b514654          DCB      "+QFTPCLOSE:",0
000310  50434c4f
000314  53453a00
                  |L5.792|
000318  0d0a0d0a          DCB      "\r\n\r\nAT+QFTPCLOSE\r\n\r\n",0
00031c  41542b51
000320  46545043
000324  4c4f5345
000328  0d0a0d0a
00032c  00      
00032d  00                DCB      0
00032e  00                DCB      0
00032f  00                DCB      0
                  |L5.816|
000330  4f4b00            DCB      "OK",0
000333  00                DCB      0
                  |L5.820|
000334  0d0a0d0a          DCB      "\r\n\r\nAT+QFLST=""*""\r\n\r\n",0
000338  41542b51
00033c  464c5354
000340  3d222a22
000344  0d0a0d0a
000348  00      
000349  00                DCB      0
00034a  00                DCB      0
00034b  00                DCB      0
                  |L5.844|
00034c  66772e62          DCB      "fw.bin",0
000350  696e00  
000353  00                DCB      0
                  |L5.852|
                          DCD      g_u8RecData
                  |L5.856|
000358  2266772e          DCB      """fw.bin"",0",0
00035c  62696e22
000360  2c3000  
000363  00                DCB      0
                  |L5.868|
                          DCD      ||.data||
                  |L5.872|
                          DCD      ||.bss||
                  |L5.876|
00036c  0d0a0d0a          DCB      "\r\n\r\nAT+QFOPEN=""fw.bin"",2\r\n\r\n",0
000370  41542b51
000374  464f5045
000378  4e3d2266
00037c  772e6269
000380  6e222c32
000384  0d0a0d0a
000388  00      
000389  00                DCB      0
00038a  00                DCB      0
00038b  00                DCB      0
                  |L5.908|
00038c  0d0a0d0a          DCB      "\r\n\r\nAT+CFUN=1,1\r\n\r\n",0
000390  41542b43
000394  46554e3d
000398  312c310d
00039c  0a0d0a00
                  |L5.928|
                          DCD      ||.bss||+0x864
                  |L5.932|
0003a4  0d0a0d0a          DCB      "\r\n\r\nAT+QFREAD=%s,%d\r\n\r\n",0
0003a8  41542b51
0003ac  46524541
0003b0  443d2573
0003b4  2c25640d
0003b8  0a0d0a00
                  |L5.956|
0003bc  4e4f2041          DCB      "NO ACKNOWLEDGE\r\n",0
0003c0  434b4e4f
0003c4  574c4544
0003c8  47450d0a
0003cc  00      
0003cd  00                DCB      0
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L5.976|
0003d0  4e4f2041          DCB      "NO ACKNOWLEDGE",0
0003d4  434b4e4f
0003d8  574c4544
0003dc  474500  
0003df  00                DCB      0
                  |L5.992|
0003e0  0a00              DCB      "\n",0
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L5.996|
0003e4  434f4e4e          DCB      "CONNECT",0
0003e8  45435400
                  |L5.1004|
0003ec  0d0a4f4b          DCB      "\r\nOK\r\n",0
0003f0  0d0a00  
0003f3  00                DCB      0
                  |L5.1012|
                          DCD      0x00000bb8
                  |L5.1016|
0003f8  0d0a0d0a          DCB      "\r\n\r\nAT+QFCLOSE=%s\r\n\r\n",0
0003fc  41542b51
000400  46434c4f
000404  53453d25
000408  730d0a0d
00040c  0a00    
00040e  00                DCB      0
00040f  00                DCB      0
                  |L5.1040|
000410  0d0a4154          DCB      "\r\nAT+QFDEL=""fw.bin""\r\n",0
000414  2b514644
000418  454c3d22
00041c  66772e62
000420  696e220d
000424  0a00    
000426  00                DCB      0
000427  00                DCB      0
                  |L5.1064|
                          DCD      0x05fa0004
                  |L5.1068|
                          DCD      0xe000ed00

                          AREA ||i.mystrstr||, CODE, READONLY, ALIGN=1

                  mystrstr PROC
;;;267    }
;;;268    char mystrstr(char* str1, char character)
000000  b570              PUSH     {r4-r6,lr}
;;;269    {int sz,cn;
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;270      sz=strlen(str1);
000006  f7fffffe          BL       strlen
;;;271    	for(cn=0;cn<=sz;cn++)
00000a  2200              MOVS     r2,#0
00000c  e005              B        |L6.26|
                  |L6.14|
;;;272    	{if(str1[cn] == character)
00000e  5ca9              LDRB     r1,[r5,r2]
000010  42a1              CMP      r1,r4
000012  d101              BNE      |L6.24|
;;;273    		{return 1;}
000014  2001              MOVS     r0,#1
;;;274    	}
;;;275    	return 0;
;;;276    }
000016  bd70              POP      {r4-r6,pc}
                  |L6.24|
000018  1c52              ADDS     r2,r2,#1
                  |L6.26|
00001a  4282              CMP      r2,r0                 ;271
00001c  ddf7              BLE      |L6.14|
00001e  2000              MOVS     r0,#0                 ;275
000020  bd70              POP      {r4-r6,pc}
;;;277    
                          ENDP


                          AREA ||i.parse_g||, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;279    
;;;280    void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;281    {int sz1,sz2,i11,temp11,j11,l;
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
;;;282        if(mystrstr(str,f) && mystrstr(str,s))
000006  9d0a              LDR      r5,[sp,#0x28]
000008  9904              LDR      r1,[sp,#0x10]
00000a  f7fffffe          BL       mystrstr
00000e  2800              CMP      r0,#0
000010  d03b              BEQ      |L7.138|
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       mystrstr
00001a  2800              CMP      r0,#0
00001c  d035              BEQ      |L7.138|
;;;283        {  
;;;284    
;;;285    		sz1=	strlen(str);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       strlen
000024  4606              MOV      r6,r0
;;;286    		sz2=	strlen(string);
000026  980b              LDR      r0,[sp,#0x2c]
000028  f7fffffe          BL       strlen
00002c  4601              MOV      r1,r0
;;;287    		memset(string,0,sz2);
00002e  980b              LDR      r0,[sp,#0x2c]
000030  f7fffffe          BL       __aeabi_memclr
;;;288    		for(i11=0,temp11=0;i11<sz1;i11++)
000034  2000              MOVS     r0,#0
000036  4601              MOV      r1,r0
000038  e009              B        |L7.78|
                  |L7.58|
;;;289    		{
;;;290    		if(str[i11]==s)
00003a  5c22              LDRB     r2,[r4,r0]
00003c  42aa              CMP      r2,r5
00003e  d101              BNE      |L7.68|
;;;291    			{
;;;292            temp11++;
;;;293            j11=i11;
000040  4607              MOV      r7,r0
000042  1c49              ADDS     r1,r1,#1
                  |L7.68|
;;;294          }
;;;295    		else{}
;;;296    			
;;;297    		if(temp11>=sec){i11=9900;}
000044  9a03              LDR      r2,[sp,#0xc]
000046  4291              CMP      r1,r2
000048  db00              BLT      |L7.76|
00004a  4811              LDR      r0,|L7.144|
                  |L7.76|
00004c  1c40              ADDS     r0,r0,#1
                  |L7.78|
00004e  42b0              CMP      r0,r6                 ;288
000050  dbf3              BLT      |L7.58|
;;;298    		else{}	
;;;299    		
;;;300    		}	
;;;301    		
;;;302    		for(i11=0,temp11=0;i11<sz1;i11++)
000052  2000              MOVS     r0,#0
000054  4601              MOV      r1,r0
000056  e00a              B        |L7.110|
                  |L7.88|
;;;303    		{
;;;304    		if(str[i11]==f)
000058  5c23              LDRB     r3,[r4,r0]
00005a  9a04              LDR      r2,[sp,#0x10]
00005c  4293              CMP      r3,r2
00005e  d101              BNE      |L7.100|
;;;305    			{
;;;306            temp11++;l=i11;
000060  4605              MOV      r5,r0
000062  1c49              ADDS     r1,r1,#1
                  |L7.100|
;;;307          }										
;;;308    		else{}
;;;309    		if(temp11>=first){i11=9900;}else{}
000064  9a02              LDR      r2,[sp,#8]
000066  4291              CMP      r1,r2
000068  db00              BLT      |L7.108|
00006a  4809              LDR      r0,|L7.144|
                  |L7.108|
00006c  1c40              ADDS     r0,r0,#1
                  |L7.110|
00006e  42b0              CMP      r0,r6                 ;302
000070  dbf2              BLT      |L7.88|
;;;310    		}	
;;;311    		for(i11=0;i11<(j11-l-1);i11++)
000072  2000              MOVS     r0,#0
000074  1b7a              SUBS     r2,r7,r5
000076  1e52              SUBS     r2,r2,#1
000078  e005              B        |L7.134|
                  |L7.122|
;;;312    		{
;;;313          string[i11] = str[l+i11+1];
00007a  1829              ADDS     r1,r5,r0
00007c  1909              ADDS     r1,r1,r4
00007e  784b              LDRB     r3,[r1,#1]
000080  990b              LDR      r1,[sp,#0x2c]
000082  540b              STRB     r3,[r1,r0]
000084  1c40              ADDS     r0,r0,#1
                  |L7.134|
000086  4282              CMP      r2,r0                 ;311
000088  dcf7              BGT      |L7.122|
                  |L7.138|
;;;314    		}
;;;315    	
;;;316    
;;;317        }
;;;318      }
00008a  b005              ADD      sp,sp,#0x14
00008c  bdf0              POP      {r4-r7,pc}
                          ENDP

00008e  0000              DCW      0x0000
                  |L7.144|
                          DCD      0x000026ac

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  filesize
                          %        10
                  fileinstance
                          %        15
                  temp
                          %        100
                  firmwaredata
                          %        2023
                  firmwaredata32
                          %        8080

                          AREA ||.data||, DATA, ALIGN=2

                  filesize_int
                          DCD      0x00000000
                  tmrsec
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  g_au32TMRINTCount
                          DCD      0x00000000
                  StartAddress
                          DCD      0x00000000
                  fsize
                          DCD      0x00000000
                  i
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  fileinstance_int
                          DCD      0x00000000

                          AREA ||area_number.13||, DATA, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.data||
                  f
                          DCD      0x00000000

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  fptr
                          DCD      0x00000000

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  ptr
                          DCD      0x00000000

                          AREA ||area_number.16||, DATA, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.data||
                  j
                          DCD      0x00000000

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  len
                          DCD      0x00000000

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;259    
;;;260    __inline void remove_all_chars(char* str, char c, char d) {
000000  b510              PUSH     {r4,lr}
;;;261        char *pr = str, *pw = str;
000002  4604              MOV      r4,r0
000004  e00f              B        |L56.38|
                  |L56.6|
;;;262        while (*pr) {
;;;263            *pw = *pr++;
000006  1c64              ADDS     r4,r4,#1
000008  7003              STRB     r3,[r0,#0]
;;;264    			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
00000a  428b              CMP      r3,r1
00000c  d009              BEQ      |L56.34|
00000e  4293              CMP      r3,r2
000010  d007              BEQ      |L56.34|
000012  2b20              CMP      r3,#0x20
000014  d005              BEQ      |L56.34|
000016  2b2f              CMP      r3,#0x2f
000018  d003              BEQ      |L56.34|
00001a  2b3a              CMP      r3,#0x3a
00001c  d001              BEQ      |L56.34|
00001e  2301              MOVS     r3,#1
000020  e000              B        |L56.36|
                  |L56.34|
000022  2300              MOVS     r3,#0
                  |L56.36|
000024  1818              ADDS     r0,r3,r0
                  |L56.38|
000026  7823              LDRB     r3,[r4,#0]            ;262
000028  2b00              CMP      r3,#0                 ;262
00002a  d1ec              BNE      |L56.6|
;;;265        }
;;;266        *pw = '\0';
00002c  2100              MOVS     r1,#0
00002e  7001              STRB     r1,[r0,#0]
;;;267    }
000030  bd10              POP      {r4,pc}
;;;268    char mystrstr(char* str1, char character)
                          ENDP


                          AREA ||i.firmwareparser||, COMGROUP=firmwareparser, CODE, READONLY, ALIGN=2

                  firmwareparser PROC
;;;41     
;;;42     __inline firmwareparser(char* recdata, int recdatalen, char* firststring, int firststringlen, char* laststring, int laststringlen){
000000  b5fe              PUSH     {r1-r7,lr}
;;;43       int recdat = 0;int fi = 0;int counter = 0;int fi32 = 0;
000002  2400              MOVS     r4,#0
000004  468c              MOV      r12,r1                ;42
000006  4605              MOV      r5,r0                 ;42
000008  4627              MOV      r7,r4
00000a  9e08              LDR      r6,[sp,#0x20]
00000c  9400              STR      r4,[sp,#0]
00000e  9401              STR      r4,[sp,#4]            ;42
000010  e022              B        |L63.88|
                  |L63.18|
;;;44       
;;;45       for(recdat = 0; recdat<recdatalen; recdat++){
;;;46         if( recdata[recdat-8] ==  firststring[0] && recdata[recdat-7] ==  firststring[1] && recdata[recdat-6] ==  firststring[2] &&\
000012  1928              ADDS     r0,r5,r4
000014  3820              SUBS     r0,r0,#0x20
000016  7e03              LDRB     r3,[r0,#0x18]
000018  7811              LDRB     r1,[r2,#0]
00001a  428b              CMP      r3,r1
00001c  d11b              BNE      |L63.86|
00001e  7e43              LDRB     r3,[r0,#0x19]
000020  7851              LDRB     r1,[r2,#1]
000022  428b              CMP      r3,r1
000024  d117              BNE      |L63.86|
000026  7e83              LDRB     r3,[r0,#0x1a]
000028  7891              LDRB     r1,[r2,#2]
00002a  428b              CMP      r3,r1
00002c  d113              BNE      |L63.86|
;;;47            recdata[recdat-5] ==  firststring[3] && recdata[recdat-4] ==  firststring[4] && recdata[recdat-3] ==  firststring[5] &&\
00002e  7ec3              LDRB     r3,[r0,#0x1b]
000030  78d1              LDRB     r1,[r2,#3]
000032  428b              CMP      r3,r1
000034  d10f              BNE      |L63.86|
000036  7f03              LDRB     r3,[r0,#0x1c]
000038  7911              LDRB     r1,[r2,#4]
00003a  428b              CMP      r3,r1
00003c  d10b              BNE      |L63.86|
00003e  7f43              LDRB     r3,[r0,#0x1d]
000040  7951              LDRB     r1,[r2,#5]
000042  428b              CMP      r3,r1
000044  d107              BNE      |L63.86|
;;;48          recdata[recdat-2] ==  firststring[6] && recdata[recdat-1] ==  firststring[7])
000046  7f83              LDRB     r3,[r0,#0x1e]
000048  7991              LDRB     r1,[r2,#6]
00004a  428b              CMP      r3,r1
00004c  d103              BNE      |L63.86|
00004e  7fc0              LDRB     r0,[r0,#0x1f]
000050  79d1              LDRB     r1,[r2,#7]
000052  4288              CMP      r0,r1
000054  d004              BEQ      |L63.96|
                  |L63.86|
000056  1c64              ADDS     r4,r4,#1
                  |L63.88|
000058  4564              CMP      r4,r12                ;45
00005a  dbda              BLT      |L63.18|
00005c  e000              B        |L63.96|
                  |L63.94|
00005e  1c64              ADDS     r4,r4,#1              ;45
                  |L63.96|
;;;49         break;
;;;50       }
;;;51       while(recdata[recdat] != '\n'){recdat++;}
000060  5d28              LDRB     r0,[r5,r4]
000062  280a              CMP      r0,#0xa
000064  d1fb              BNE      |L63.94|
000066  1c64              ADDS     r4,r4,#1
                  |L63.104|
;;;52       recdat++;
;;;53       do{
;;;54         firmwaredata[fi] = recdata[recdat];
000068  5d28              LDRB     r0,[r5,r4]
00006a  491b              LDR      r1,|L63.216|
;;;55         fi++;recdata++;counter++;
00006c  1c6d              ADDS     r5,r5,#1
00006e  55c8              STRB     r0,[r1,r7]            ;54
000070  9800              LDR      r0,[sp,#0]
000072  1c7f              ADDS     r7,r7,#1
000074  1c40              ADDS     r0,r0,#1
;;;56         if(counter == 4){
000076  9000              STR      r0,[sp,#0]
000078  2804              CMP      r0,#4
00007a  d112              BNE      |L63.162|
;;;57           counter = 0;
00007c  2000              MOVS     r0,#0
;;;58           firmwaredata32[fi32] = firmwaredata[fi-1]<<24 | firmwaredata[fi-2]<<16 | firmwaredata[fi-3]<<8 | firmwaredata[fi-4]<<0 ;  
00007e  9000              STR      r0,[sp,#0]
000080  19c8              ADDS     r0,r1,r7
000082  9002              STR      r0,[sp,#8]
000084  1ec0              SUBS     r0,r0,#3
000086  f7fffffe          BL       __aeabi_uread4
00008a  0201              LSLS     r1,r0,#8
00008c  9802              LDR      r0,[sp,#8]
00008e  4a13              LDR      r2,|L63.220|
000090  3820              SUBS     r0,r0,#0x20
000092  7f00              LDRB     r0,[r0,#0x1c]
000094  4301              ORRS     r1,r1,r0
000096  9801              LDR      r0,[sp,#4]
000098  0080              LSLS     r0,r0,#2
00009a  5011              STR      r1,[r2,r0]
;;;59           fi32++;
00009c  9801              LDR      r0,[sp,#4]
00009e  1c40              ADDS     r0,r0,#1
0000a0  9001              STR      r0,[sp,#4]
                  |L63.162|
;;;60         }
;;;61       }while(!(recdata[recdat] == laststring[0] && recdata[recdat+1] == laststring[1] && recdata[recdat+2] == laststring[2] &&\
0000a2  5d28              LDRB     r0,[r5,r4]
0000a4  7831              LDRB     r1,[r6,#0]
0000a6  4288              CMP      r0,r1
0000a8  d1de              BNE      |L63.104|
0000aa  1928              ADDS     r0,r5,r4
0000ac  7841              LDRB     r1,[r0,#1]
0000ae  7872              LDRB     r2,[r6,#1]
0000b0  4291              CMP      r1,r2
0000b2  d1d9              BNE      |L63.104|
0000b4  7881              LDRB     r1,[r0,#2]
0000b6  78b2              LDRB     r2,[r6,#2]
0000b8  4291              CMP      r1,r2
0000ba  d1d5              BNE      |L63.104|
0000bc  78c1              LDRB     r1,[r0,#3]
0000be  78f2              LDRB     r2,[r6,#3]
0000c0  4291              CMP      r1,r2
0000c2  d1d1              BNE      |L63.104|
0000c4  7901              LDRB     r1,[r0,#4]
0000c6  7932              LDRB     r2,[r6,#4]
0000c8  4291              CMP      r1,r2
0000ca  d1cd              BNE      |L63.104|
0000cc  7940              LDRB     r0,[r0,#5]
0000ce  7971              LDRB     r1,[r6,#5]
0000d0  4288              CMP      r0,r1
0000d2  d1c9              BNE      |L63.104|
;;;62       recdata[recdat+3] == laststring[3] && recdata[recdat+4] == laststring[4] && recdata[recdat+5] == laststring[5]));
;;;63       
;;;64     }
0000d4  bdfe              POP      {r1-r7,pc}
;;;65     
                          ENDP

0000d6  0000              DCW      0x0000
                  |L63.216|
                          DCD      ||.bss||+0x7d
                  |L63.220|
                          DCD      ||.bss||+0x864

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_filesize____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_filesize____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_filesize____REVSH|
#line 132
|__asm___6_main_c_filesize____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
