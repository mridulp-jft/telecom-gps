; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c.d --feedback=.\obj\Smpl_Basic01_I2C_EEPROM.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\NuEdu\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DDEBUG_PORT=UART1 --omf_browse=.\obj\i2c.crf ..\..\..\..\Library\StdDriver\src\i2c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_Open PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4d0c              LDR      r5,|L1.52|
000004  4604              MOV      r4,r0                 ;34
000006  6828              LDR      r0,[r5,#0]  ; SystemCoreClock
000008  220a              MOVS     r2,#0xa
00000a  0089              LSLS     r1,r1,#2
00000c  4350              MULS     r0,r2,r0
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  210a              MOVS     r1,#0xa
000014  1d40              ADDS     r0,r0,#5
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  1e40              SUBS     r0,r0,#1
;;;38         i2c->DIV = u32Div;
00001c  60e0              STR      r0,[r4,#0xc]
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
00001e  6821              LDR      r1,[r4,#0]
000020  2201              MOVS     r2,#1
000022  4311              ORRS     r1,r1,r2
000024  6021              STR      r1,[r4,#0]
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
000026  0081              LSLS     r1,r0,#2
000028  1d09              ADDS     r1,r1,#4
00002a  6828              LDR      r0,[r5,#0]  ; SystemCoreClock
00002c  f7fffffe          BL       __aeabi_uidivmod
;;;44     }
000030  bd70              POP      {r4-r6,pc}
;;;45     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      SystemCoreClock

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  I2C_Close PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  2105              MOVS     r1,#5
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4a09              LDR      r2,|L2.40|
000004  0709              LSLS     r1,r1,#28             ;34
000006  68cb              LDR      r3,[r1,#0xc]
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L2.16|
00000c  1582              ASRS     r2,r0,#22
00000e  e001              B        |L2.20|
                  |L2.16|
000010  2201              MOVS     r2,#1
000012  0252              LSLS     r2,r2,#9
                  |L2.20|
000014  4313              ORRS     r3,r3,r2
000016  60cb              STR      r3,[r1,#0xc]
000018  68cb              LDR      r3,[r1,#0xc]
00001a  4393              BICS     r3,r3,r2
;;;38         i2c->DIV = u32Div;
00001c  60cb              STR      r3,[r1,#0xc]
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
00001e  6801              LDR      r1,[r0,#0]
000020  0849              LSRS     r1,r1,#1
000022  0049              LSLS     r1,r1,#1
000024  6001              STR      r1,[r0,#0]
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
000026  4770              BX       lr
;;;44     }
;;;45     
                          ENDP

                  |L2.40|
                          DCD      0x40020000

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  I2C_ClearTimeoutFlag PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6841              LDR      r1,[r0,#4]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2202              MOVS     r2,#2
000004  4311              ORRS     r1,r1,r2              ;34
000006  6041              STR      r1,[r0,#4]
000008  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  I2C_Trigger PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b5f0              PUSH     {r4-r7,lr}
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  9e05              LDR      r6,[sp,#0x14]
000004  6805              LDR      r5,[r0,#0]            ;34
000006  2400              MOVS     r4,#0
000008  270e              MOVS     r7,#0xe
00000a  43bd              BICS     r5,r5,r7
00000c  2900              CMP      r1,#0
00000e  d000              BEQ      |L4.18|
000010  2408              MOVS     r4,#8
                  |L4.18|
000012  2a00              CMP      r2,#0
000014  d001              BEQ      |L4.26|
000016  2104              MOVS     r1,#4
000018  430c              ORRS     r4,r4,r1
                  |L4.26|
00001a  2b00              CMP      r3,#0
;;;38         i2c->DIV = u32Div;
00001c  d001              BEQ      |L4.34|
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
00001e  2110              MOVS     r1,#0x10
000020  430c              ORRS     r4,r4,r1
                  |L4.34|
000022  2e00              CMP      r6,#0
000024  d001              BEQ      |L4.42|
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
000026  2102              MOVS     r1,#2
000028  430c              ORRS     r4,r4,r1
                  |L4.42|
00002a  4325              ORRS     r5,r5,r4
00002c  6005              STR      r5,[r0,#0]
00002e  bdf0              POP      {r4-r7,pc}
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  I2C_DisableInt PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6801              LDR      r1,[r0,#0]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2280              MOVS     r2,#0x80
000004  4391              BICS     r1,r1,r2              ;34
000006  6001              STR      r1,[r0,#0]
000008  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  I2C_EnableInt PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6801              LDR      r1,[r0,#0]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2280              MOVS     r2,#0x80
000004  4311              ORRS     r1,r1,r2              ;34
000006  6001              STR      r1,[r0,#0]
000008  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  I2C_GetBusClockFreq PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  68c0              LDR      r0,[r0,#0xc]
000004  0081              LSLS     r1,r0,#2              ;34
000006  4803              LDR      r0,|L7.20|
000008  1d09              ADDS     r1,r1,#4
00000a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  bd10              POP      {r4,pc}
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      SystemCoreClock

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  I2C_SetBusClockFreq PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4604              MOV      r4,r0
000004  4809              LDR      r0,|L8.44|
000006  220a              MOVS     r2,#0xa
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000a  0089              LSLS     r1,r1,#2
00000c  4605              MOV      r5,r0
00000e  4350              MULS     r0,r2,r0
000010  f7fffffe          BL       __aeabi_uidivmod
000014  210a              MOVS     r1,#0xa
000016  1d40              ADDS     r0,r0,#5
000018  f7fffffe          BL       __aeabi_uidivmod
;;;38         i2c->DIV = u32Div;
00001c  1e40              SUBS     r0,r0,#1
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
00001e  60e0              STR      r0,[r4,#0xc]
000020  0081              LSLS     r1,r0,#2
000022  4628              MOV      r0,r5
000024  1d09              ADDS     r1,r1,#4
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
000026  f7fffffe          BL       __aeabi_uidivmod
00002a  bd70              POP      {r4-r6,pc}
;;;44     }
;;;45     
                          ENDP

                  |L8.44|
                          DCD      SystemCoreClock

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.9||, ||.text||
                  I2C_GetIntFlag PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6840              LDR      r0,[r0,#4]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  07c0              LSLS     r0,r0,#31
000004  0fc0              LSRS     r0,r0,#31             ;34
000006  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.10||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.10||, ||.text||
                  I2C_ClearIntFlag PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6841              LDR      r1,[r0,#4]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2201              MOVS     r2,#1
000004  4311              ORRS     r1,r1,r2              ;34
000006  6041              STR      r1,[r0,#4]
000008  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.11||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.text||
                  I2C_GetStatus PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6880              LDR      r0,[r0,#8]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.12||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.text||
                  I2C_GetData PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6940              LDR      r0,[r0,#0x14]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.13||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.13||, ||.text||
                  I2C_SetData PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6141              STR      r1,[r0,#0x14]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.14||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.text||
                  I2C_SetSlaveAddr PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  0052              LSLS     r2,r2,#1
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  431a              ORRS     r2,r2,r3
000004  2900              CMP      r1,#0                 ;34
000006  d003              BEQ      |L14.16|
000008  2901              CMP      r1,#1
00000a  d100              BNE      |L14.14|
00000c  61c2              STR      r2,[r0,#0x1c]
                  |L14.14|
00000e  4770              BX       lr
                  |L14.16|
000010  6182              STR      r2,[r0,#0x18]
000012  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.15||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.text||
                  I2C_SetSlaveAddrMask PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  0052              LSLS     r2,r2,#1
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2900              CMP      r1,#0
000004  d003              BEQ      |L15.14|
000006  2901              CMP      r1,#1
000008  d100              BNE      |L15.12|
00000a  62c2              STR      r2,[r0,#0x2c]
                  |L15.12|
00000c  4770              BX       lr
                  |L15.14|
00000e  6282              STR      r2,[r0,#0x28]
000010  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.16||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.16||, ||.text||
                  I2C_EnableTimeout PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  2202              MOVS     r2,#2
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2900              CMP      r1,#0
000004  6901              LDR      r1,[r0,#0x10]         ;34
000006  d001              BEQ      |L16.12|
000008  4311              ORRS     r1,r1,r2
00000a  e000              B        |L16.14|
                  |L16.12|
00000c  4391              BICS     r1,r1,r2
                  |L16.14|
00000e  6101              STR      r1,[r0,#0x10]
000010  6901              LDR      r1,[r0,#0x10]
000012  2201              MOVS     r2,#1
000014  4311              ORRS     r1,r1,r2
000016  6101              STR      r1,[r0,#0x10]
000018  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.17||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.17||, ||.text||
                  I2C_DisableTimeout PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6901              LDR      r1,[r0,#0x10]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1              ;34
000006  6101              STR      r1,[r0,#0x10]
000008  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.18||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.18||, ||.text||
                  I2C_EnableWakeup PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6c01              LDR      r1,[r0,#0x40]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2201              MOVS     r2,#1
000004  4311              ORRS     r1,r1,r2              ;34
000006  6401              STR      r1,[r0,#0x40]
000008  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


                          AREA ||area_number.19||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.19||, ||.text||
                  I2C_DisableWakeup PROC
;;;32       */
;;;33     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6c01              LDR      r1,[r0,#0x40]
;;;34     {
;;;35         uint32_t u32Div;
;;;36     
;;;37         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1              ;34
000006  6401              STR      r1,[r0,#0x40]
000008  4770              BX       lr
;;;38         i2c->DIV = u32Div;
;;;39     
;;;40         /* Enable I2C */
;;;41         i2c->CON |= I2C_CON_IPEN_Msk;
;;;42     
;;;43         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;44     }
;;;45     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Open____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_i2c_c_I2C_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Open____REVSH|
#line 402
|__asm___5_i2c_c_I2C_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
