; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --feedback=.\obj\Smpl_Basic01_I2C_EEPROM.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\NuEdu\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DDEBUG_PORT=UART1 --omf_browse=.\obj\retarget.crf ..\..\..\..\Library\StdDriver\src\retarget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  stackDump PROC
;;;48     
;;;49     void stackDump(uint32_t stack[])
000000  b510              PUSH     {r4,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51     	printf("r0  = 0x%x\n", stack[r0]);
000004  6801              LDR      r1,[r0,#0]
000006  a027              ADR      r0,|L1.164|
000008  f7fffffe          BL       __2printf
;;;52     	printf("r1  = 0x%x\n", stack[r1]);
00000c  a028              ADR      r0,|L1.176|
00000e  6861              LDR      r1,[r4,#4]
000010  f7fffffe          BL       __2printf
;;;53     	printf("r2  = 0x%x\n", stack[r2]);
000014  a029              ADR      r0,|L1.188|
000016  68a1              LDR      r1,[r4,#8]
000018  f7fffffe          BL       __2printf
;;;54     	printf("r3  = 0x%x\n", stack[r3]);
00001c  a02a              ADR      r0,|L1.200|
00001e  68e1              LDR      r1,[r4,#0xc]
000020  f7fffffe          BL       __2printf
;;;55     	printf("r12 = 0x%x\n", stack[r12]);
000024  a02b              ADR      r0,|L1.212|
000026  6921              LDR      r1,[r4,#0x10]
000028  f7fffffe          BL       __2printf
;;;56     	printf("lr  = 0x%x\n", stack[lr]);
00002c  a02c              ADR      r0,|L1.224|
00002e  6961              LDR      r1,[r4,#0x14]
000030  f7fffffe          BL       __2printf
;;;57     	printf("pc  = 0x%x\n", stack[pc]);
000034  a02d              ADR      r0,|L1.236|
000036  69a1              LDR      r1,[r4,#0x18]
000038  f7fffffe          BL       __2printf
;;;58     	printf("psr = 0x%x\n", stack[psr]);
00003c  a02e              ADR      r0,|L1.248|
00003e  69e1              LDR      r1,[r4,#0x1c]
000040  f7fffffe          BL       __2printf
;;;59     } 
000044  bd10              POP      {r4,pc}
;;;60     
                          ENDP

                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;61     void Hard_Fault_Handler(uint32_t stack[])
000046  4604              MOV      r4,r0
;;;62     {     
;;;63         printf("In Hard Fault Handler\n");
000048  a02e              ADR      r0,|L1.260|
00004a  f7fffffe          BL       __2printf
;;;64     
;;;65         stackDump(stack);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       stackDump
000054  2159              MOVS     r1,#0x59
000056  2316              MOVS     r3,#0x16
000058  4830              LDR      r0,|L1.284|
00005a  2288              MOVS     r2,#0x88
;;;66     	
;;;67     	//Chip Reset
;;;68     		SYS_UnlockReg();
00005c  e002              B        |L1.100|
                  |L1.94|
00005e  6001              STR      r1,[r0,#0]
000060  6003              STR      r3,[r0,#0]
000062  6002              STR      r2,[r0,#0]
                  |L1.100|
000064  6804              LDR      r4,[r0,#0]
000066  2c01              CMP      r4,#1
000068  d1f9              BNE      |L1.94|
;;;69     		SYS->IPRST_CTL1 |= SYS_IPRST_CTL1_CHIP_RST_Msk;
00006a  2005              MOVS     r0,#5
00006c  0700              LSLS     r0,r0,#28
00006e  6881              LDR      r1,[r0,#8]
000070  2201              MOVS     r2,#1
000072  4311              ORRS     r1,r1,r2
000074  6081              STR      r1,[r0,#8]
                  |L1.118|
;;;70     
;;;71         while(1);
000076  e7fe              B        |L1.118|
;;;72     }
;;;73     
                          ENDP

                  SendChar_ToUART PROC
;;;315    
;;;316    void SendChar_ToUART(int ch)
000078  4929              LDR      r1,|L1.288|
                  |L1.122|
;;;317    {
;;;318    #ifndef DISABLE_UART
;;;319        while(DEBUG_PORT->FSR & UART_FSR_TX_FULL_F_Msk);
00007a  698a              LDR      r2,[r1,#0x18]
00007c  0552              LSLS     r2,r2,#21
00007e  d4fc              BMI      |L1.122|
;;;320        DEBUG_PORT->THR = ch;
000080  6008              STR      r0,[r1,#0]
;;;321        if(ch == '\n') {
000082  280a              CMP      r0,#0xa
000084  d104              BNE      |L1.144|
                  |L1.134|
;;;322            while(DEBUG_PORT->FSR & UART_FSR_TX_FULL_F_Msk);
000086  6988              LDR      r0,[r1,#0x18]
000088  0540              LSLS     r0,r0,#21
00008a  d4fc              BMI      |L1.134|
;;;323            DEBUG_PORT->THR = '\r';
00008c  200d              MOVS     r0,#0xd
00008e  6008              STR      r0,[r1,#0]
                  |L1.144|
;;;324        }
;;;325    #endif
;;;326    }
000090  4770              BX       lr
;;;327    
                          ENDP

                  fputc PROC
;;;441    
;;;442    int fputc(int ch, FILE *f)
000092  b500              PUSH     {lr}
;;;443    {
000094  4603              MOV      r3,r0
000096  f7fffffe          BL       SendChar_ToUART
;;;444        SendChar(ch);
;;;445        return ch;
00009a  4618              MOV      r0,r3
;;;446    }
00009c  bd00              POP      {pc}
;;;447    
                          ENDP

                  ferror PROC
;;;453    
;;;454    int ferror(FILE *f)
00009e  2000              MOVS     r0,#0
;;;455    {
;;;456        return EOF;
0000a0  43c0              MVNS     r0,r0
;;;457    }
0000a2  4770              BX       lr
;;;458    
                          ENDP

                  |L1.164|
0000a4  72302020          DCB      "r0  = 0x%x\n",0
0000a8  3d203078
0000ac  25780a00
                  |L1.176|
0000b0  72312020          DCB      "r1  = 0x%x\n",0
0000b4  3d203078
0000b8  25780a00
                  |L1.188|
0000bc  72322020          DCB      "r2  = 0x%x\n",0
0000c0  3d203078
0000c4  25780a00
                  |L1.200|
0000c8  72332020          DCB      "r3  = 0x%x\n",0
0000cc  3d203078
0000d0  25780a00
                  |L1.212|
0000d4  72313220          DCB      "r12 = 0x%x\n",0
0000d8  3d203078
0000dc  25780a00
                  |L1.224|
0000e0  6c722020          DCB      "lr  = 0x%x\n",0
0000e4  3d203078
0000e8  25780a00
                  |L1.236|
0000ec  70632020          DCB      "pc  = 0x%x\n",0
0000f0  3d203078
0000f4  25780a00
                  |L1.248|
0000f8  70737220          DCB      "psr = 0x%x\n",0
0000fc  3d203078
000100  25780a00
                  |L1.260|
000104  496e2048          DCB      "In Hard Fault Handler\n",0
000108  61726420
00010c  4661756c
000110  74204861
000114  6e646c65
000118  720a00  
00011b  00                DCB      0
                  |L1.284|
                          DCD      0x50000100
                  |L1.288|
                          DCD      0x40150000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  SendChar PROC
;;;48     
;;;49     void stackDump(uint32_t stack[])
000000  b500              PUSH     {lr}
;;;50     {
000002  f7fffffe          BL       SendChar_ToUART
;;;51     	printf("r0  = 0x%x\n", stack[r0]);
000006  bd00              POP      {pc}
;;;52     	printf("r1  = 0x%x\n", stack[r1]);
;;;53     	printf("r2  = 0x%x\n", stack[r2]);
;;;54     	printf("r3  = 0x%x\n", stack[r3]);
;;;55     	printf("r12 = 0x%x\n", stack[r12]);
;;;56     	printf("lr  = 0x%x\n", stack[lr]);
;;;57     	printf("pc  = 0x%x\n", stack[pc]);
;;;58     	printf("psr = 0x%x\n", stack[psr]);
;;;59     } 
;;;60     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  GetChar PROC
;;;48     
;;;49     void stackDump(uint32_t stack[])
000000  4803              LDR      r0,|L3.16|
                  |L3.2|
;;;50     {
000002  6981              LDR      r1,[r0,#0x18]
;;;51     	printf("r0  = 0x%x\n", stack[r0]);
000004  0789              LSLS     r1,r1,#30
000006  d4fc              BMI      |L3.2|
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
;;;52     	printf("r1  = 0x%x\n", stack[r1]);
00000c  4770              BX       lr
;;;53     	printf("r2  = 0x%x\n", stack[r2]);
;;;54     	printf("r3  = 0x%x\n", stack[r3]);
;;;55     	printf("r12 = 0x%x\n", stack[r12]);
;;;56     	printf("lr  = 0x%x\n", stack[lr]);
;;;57     	printf("pc  = 0x%x\n", stack[pc]);
;;;58     	printf("psr = 0x%x\n", stack[psr]);
;;;59     } 
;;;60     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40150000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  kbhit PROC
;;;48     
;;;49     void stackDump(uint32_t stack[])
000000  4802              LDR      r0,|L4.12|
;;;50     {
000002  6980              LDR      r0,[r0,#0x18]
;;;51     	printf("r0  = 0x%x\n", stack[r0]);
000004  0780              LSLS     r0,r0,#30
000006  17c0              ASRS     r0,r0,#31
000008  1c40              ADDS     r0,r0,#1
00000a  4770              BX       lr
;;;52     	printf("r1  = 0x%x\n", stack[r1]);
;;;53     	printf("r2  = 0x%x\n", stack[r2]);
;;;54     	printf("r3  = 0x%x\n", stack[r3]);
;;;55     	printf("r12 = 0x%x\n", stack[r12]);
;;;56     	printf("lr  = 0x%x\n", stack[lr]);
;;;57     	printf("pc  = 0x%x\n", stack[pc]);
;;;58     	printf("psr = 0x%x\n", stack[psr]);
;;;59     } 
;;;60     
                          ENDP

                  |L4.12|
                          DCD      0x40150000

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  IsDebugFifoEmpty PROC
;;;48     
;;;49     void stackDump(uint32_t stack[])
000000  4802              LDR      r0,|L5.12|
;;;50     {
000002  6980              LDR      r0,[r0,#0x18]
;;;51     	printf("r0  = 0x%x\n", stack[r0]);
000004  0500              LSLS     r0,r0,#20
000006  0fc0              LSRS     r0,r0,#31
000008  4770              BX       lr
;;;52     	printf("r1  = 0x%x\n", stack[r1]);
;;;53     	printf("r2  = 0x%x\n", stack[r2]);
;;;54     	printf("r3  = 0x%x\n", stack[r3]);
;;;55     	printf("r12 = 0x%x\n", stack[r12]);
;;;56     	printf("lr  = 0x%x\n", stack[lr]);
;;;57     	printf("pc  = 0x%x\n", stack[pc]);
;;;58     	printf("psr = 0x%x\n", stack[psr]);
;;;59     } 
;;;60     
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x40150000

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  _ttywrch PROC
;;;48     
;;;49     void stackDump(uint32_t stack[])
000000  b500              PUSH     {lr}
;;;50     {
000002  f7fffffe          BL       SendChar_ToUART
;;;51     	printf("r0  = 0x%x\n", stack[r0]);
000006  bd00              POP      {pc}
;;;52     	printf("r1  = 0x%x\n", stack[r1]);
;;;53     	printf("r2  = 0x%x\n", stack[r2]);
;;;54     	printf("r3  = 0x%x\n", stack[r3]);
;;;55     	printf("r12 = 0x%x\n", stack[r12]);
;;;56     	printf("lr  = 0x%x\n", stack[lr]);
;;;57     	printf("pc  = 0x%x\n", stack[pc]);
;;;58     	printf("psr = 0x%x\n", stack[psr]);
;;;59     } 
;;;60     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.text||
                  fgetc PROC
;;;48     
;;;49     void stackDump(uint32_t stack[])
000000  b500              PUSH     {lr}
;;;50     {
000002  f7fffffe          BL       GetChar
;;;51     	printf("r0  = 0x%x\n", stack[r0]);
000006  bd00              POP      {pc}
;;;52     	printf("r1  = 0x%x\n", stack[r1]);
;;;53     	printf("r2  = 0x%x\n", stack[r2]);
;;;54     	printf("r3  = 0x%x\n", stack[r3]);
;;;55     	printf("r12 = 0x%x\n", stack[r12]);
;;;56     	printf("lr  = 0x%x\n", stack[lr]);
;;;57     	printf("pc  = 0x%x\n", stack[pc]);
;;;58     	printf("psr = 0x%x\n", stack[psr]);
;;;59     } 
;;;60     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_8c64092a____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_retarget_c_8c64092a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_8c64092a____REVSH|
#line 402
|__asm___10_retarget_c_8c64092a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 289 "..\\..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
|HardFault_Handler| PROC
#line 290

 MOVS r0, #4 
 MOV r1, LR 
 TST r0, r1 
 BEQ Stack_Use_MSP 
 MRS R0, PSP 
 B Get_LR_and_Branch 
Stack_Use_MSP 
 MRS R0, MSP 
Get_LR_and_Branch 
 MOV R1, LR 
 LDR R2,= |Hard_Fault_Handler| 
 BX R2 
	ENDP

;*** End   embedded assembler ***
