; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --feedback=.\obj\Smpl_Basic01_I2C_EEPROM.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\NuEdu\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DDEBUG_PORT=UART1 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  SYS_Init PROC
;;;19     /*---------------------------------------------------------------------------------------------------------*/
;;;20     void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2259              MOVS     r2,#0x59
000004  2016              MOVS     r0,#0x16
000006  4c41              LDR      r4,|L1.268|
000008  2188              MOVS     r1,#0x88
00000a  e002              B        |L1.18|
                  |L1.12|
00000c  6022              STR      r2,[r4,#0]
00000e  6020              STR      r0,[r4,#0]
000010  6021              STR      r1,[r4,#0]
                  |L1.18|
000012  6823              LDR      r3,[r4,#0]
000014  2b01              CMP      r3,#1
000016  d1f9              BNE      |L1.12|
;;;21     {
;;;22         /* Unlock protected registers */
;;;23         SYS_UnlockReg();
;;;24     
;;;25         /* Enable External XTAL (4~24 MHz) */
;;;26         CLK->PWRCTL |= CLK_PWRCTL_HXT_EN_Msk;
000018  483d              LDR      r0,|L1.272|
00001a  6801              LDR      r1,[r0,#0]
00001c  2201              MOVS     r2,#1
00001e  4311              ORRS     r1,r1,r2
000020  6001              STR      r1,[r0,#0]
                  |L1.34|
;;;27     
;;;28         /* Waiting for 12MHz clock ready */
;;;29         while((CLK->CLKSTATUS & CLK_CLKSTATUS_HXT_STB_Msk) == 0) {};
000022  68c1              LDR      r1,[r0,#0xc]
000024  07c9              LSLS     r1,r1,#31
000026  d0fc              BEQ      |L1.34|
;;;30     
;;;31         /* Switch PLL clock source to XTAL */
;;;32         CLK->PLLCTL &= CLK_PLLCTL_PLL_SRC_HXT;
000028  6a41              LDR      r1,[r0,#0x24]
00002a  2500              MOVS     r5,#0
00002c  6245              STR      r5,[r0,#0x24]
;;;33     
;;;34         /* Set PLL to power down mode and PLL_STB bit in CLKSTATUS register will be cleared by hardware.*/
;;;35         CLK->PLLCTL &= CLK_PLLCTL_PD_Msk;
00002e  6a41              LDR      r1,[r0,#0x24]
000030  2201              MOVS     r2,#1
000032  0412              LSLS     r2,r2,#16
000034  4011              ANDS     r1,r1,r2
000036  6241              STR      r1,[r0,#0x24]
;;;36     
;;;37         /* Set PLL frequency 84 MHz */
;;;38         CLK->PLLCTL |= 0x0218;
000038  6a41              LDR      r1,[r0,#0x24]
00003a  2243              MOVS     r2,#0x43
00003c  00d2              LSLS     r2,r2,#3
00003e  4311              ORRS     r1,r1,r2
000040  6241              STR      r1,[r0,#0x24]
                  |L1.66|
;;;39     
;;;40         /* Waiting for clock ready */
;;;41         while((CLK->CLKSTATUS & CLK_CLKSTATUS_PLL_STB_Msk) == 0) {};
000042  68c1              LDR      r1,[r0,#0xc]
000044  0749              LSLS     r1,r1,#29
000046  d5fc              BPL      |L1.66|
;;;42     
;;;43         /* Set HCLK_N = 1 */
;;;44         CLK->CLKDIV0 = (CLK->CLKDIV0 & ~CLK_CLKDIV0_HCLK_N_Msk) | 0x01;
000048  69c1              LDR      r1,[r0,#0x1c]
00004a  0909              LSRS     r1,r1,#4
00004c  0109              LSLS     r1,r1,#4
00004e  1c49              ADDS     r1,r1,#1
000050  61c1              STR      r1,[r0,#0x1c]
;;;45     
;;;46         /* Switch HCLK clock source to PLL */
;;;47         CLK->CLKSEL0 = CLK_CLKSEL0_HCLK_S_PLL;
000052  2102              MOVS     r1,#2
000054  6101              STR      r1,[r0,#0x10]
;;;48     
;;;49         /* Update System Core Clock */
;;;50         /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;51         SystemCoreClockUpdate();
000056  f7fffffe          BL       SystemCoreClockUpdate
00005a  6025              STR      r5,[r4,#0]
;;;52     
;;;53         /* Lock protected registers */
;;;54         SYS_LockReg();
;;;55     
;;;56     }
00005c  bd70              POP      {r4-r6,pc}
;;;57     
                          ENDP

                  UART1_Init PROC
;;;61     /*---------------------------------------------------------------------------------------------------------*/
;;;62     void UART1_Init(void)
00005e  482b              LDR      r0,|L1.268|
;;;63     {
;;;64         /* Set PC.10 and PC.11 multi-function pins for UART1_RXD, UART1_TXD */
;;;65         SYS->PC_H_MFP |= (SYS_PC_H_MFP_PC11_MFP_UART1_TX | SYS_PC_H_MFP_PC10_MFP_UART1_RX);
000060  38c0              SUBS     r0,r0,#0xc0
000062  6841              LDR      r1,[r0,#4]
000064  2255              MOVS     r2,#0x55
000066  0212              LSLS     r2,r2,#8
000068  4311              ORRS     r1,r1,r2
00006a  6041              STR      r1,[r0,#4]
;;;66     
;;;67         /* Enable UART1 IP clock */
;;;68         CLK->APBCLK |= CLK_APBCLK_UART1_EN_Msk;
00006c  4828              LDR      r0,|L1.272|
00006e  6881              LDR      r1,[r0,#8]
000070  0202              LSLS     r2,r0,#8
000072  4311              ORRS     r1,r1,r2
000074  6081              STR      r1,[r0,#8]
;;;69     
;;;70         /* Set UART1 IP clock source */
;;;71         CLK->CLKSEL1 |= CLK_CLKSEL1_UART_S_HXT;
000076  6941              LDR      r1,[r0,#0x14]
000078  6141              STR      r1,[r0,#0x14]
;;;72     
;;;73         /* Configure UART1 and set UART1 Baudrate */
;;;74         UART1->BAUD = UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(FREQ_12MHZ, 115200);
00007a  4826              LDR      r0,|L1.276|
00007c  2167              MOVS     r1,#0x67
00007e  6241              STR      r1,[r0,#0x24]
;;;75         UART1->TLCTL = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
000080  2103              MOVS     r1,#3
000082  6081              STR      r1,[r0,#8]
;;;76     
;;;77     }
000084  4770              BX       lr
;;;78     
                          ENDP

                  main PROC
;;;82     /*---------------------------------------------------------------------------------------------------------*/
;;;83     int main()
000086  b570              PUSH     {r4-r6,lr}
;;;84     {
;;;85         uint32_t u32Data,i;
;;;86     
;;;87         /* Initial system */
;;;88         SYS_Init();
000088  f7fffffe          BL       SYS_Init
;;;89     
;;;90         /* Initial UART1 to 115200-8n1 for print message */
;;;91         UART1_Init();
00008c  f7fffffe          BL       UART1_Init
;;;92     
;;;93         printf("Hello World.\n");
000090  a021              ADR      r0,|L1.280|
000092  f7fffffe          BL       __2printf
;;;94         printf("PLL Clock = %d Hz\n", CLK_GetPLLClockFreq());
000096  f7fffffe          BL       CLK_GetPLLClockFreq
00009a  4601              MOV      r1,r0
00009c  a022              ADR      r0,|L1.296|
00009e  f7fffffe          BL       __2printf
;;;95         printf("Core Clock = %d Hz\n\n", CLK_GetHCLKFreq());
0000a2  f7fffffe          BL       CLK_GetHCLKFreq
0000a6  4601              MOV      r1,r0
0000a8  a024              ADR      r0,|L1.316|
0000aa  f7fffffe          BL       __2printf
;;;96         printf("+-------------------------------------------------------+\n");
0000ae  a029              ADR      r0,|L1.340|
0000b0  f7fffffe          BL       __2printf
;;;97         printf("|   Nano100 Series I2C Sample Code with EEPROM 24LC64   |\n");
0000b4  a036              ADR      r0,|L1.400|
0000b6  f7fffffe          BL       __2printf
;;;98         printf("+-------------------------------------------------------+\n");
0000ba  a026              ADR      r0,|L1.340|
0000bc  f7fffffe          BL       __2printf
;;;99     
;;;100        /* Initial I2C */
;;;101        I2C_EEPROM_Init(8);
0000c0  2008              MOVS     r0,#8
0000c2  f7fffffe          BL       I2C_EEPROM_Init
;;;102    
;;;103        /* I2C EEPROM Write/Read test */
;;;104        for (i = 0; i < 2; i++) {
0000c6  2400              MOVS     r4,#0
                  |L1.200|
;;;105            printf("\n\nAddress = 0x0010, Write Data = %xh", (i*2+3));
0000c8  0065              LSLS     r5,r4,#1
0000ca  1ce9              ADDS     r1,r5,#3
0000cc  a03f              ADR      r0,|L1.460|
0000ce  f7fffffe          BL       __2printf
0000d2  1ced              ADDS     r5,r5,#3
;;;106            I2C_EEPROM_Write(0x0010,(i*2+3));
0000d4  b2e9              UXTB     r1,r5
0000d6  2010              MOVS     r0,#0x10
0000d8  f7fffffe          BL       I2C_EEPROM_Write
;;;107    
;;;108            u32Data = I2C_EEPROM_Read(0x0010);
0000dc  2010              MOVS     r0,#0x10
0000de  f7fffffe          BL       I2C_EEPROM_Read
0000e2  4606              MOV      r6,r0
;;;109            printf("\nAddress = 0x0010, Read Data = %xh", u32Data);
0000e4  4601              MOV      r1,r0
0000e6  a043              ADR      r0,|L1.500|
0000e8  f7fffffe          BL       __2printf
;;;110            if(u32Data!=(i*2+3)) {
0000ec  42b5              CMP      r5,r6
0000ee  d006              BEQ      |L1.254|
;;;111                printf("I2C Byte Write/Read Failed, Data 0x%x\n", u32Data);
0000f0  4631              MOV      r1,r6
0000f2  a049              ADR      r0,|L1.536|
0000f4  f7fffffe          BL       __2printf
;;;112                return -1;
0000f8  2000              MOVS     r0,#0
0000fa  43c0              MVNS     r0,r0
;;;113            }
;;;114        }
;;;115    
;;;116        printf("\n\nI2C Access EEPROM Test OK\n");
;;;117    
;;;118        while(1);
;;;119    
;;;120    }
0000fc  bd70              POP      {r4-r6,pc}
                  |L1.254|
0000fe  1c64              ADDS     r4,r4,#1
000100  2c02              CMP      r4,#2                 ;104
000102  d3e1              BCC      |L1.200|
000104  a04e              ADR      r0,|L1.576|
000106  f7fffffe          BL       __2printf
                  |L1.266|
00010a  e7fe              B        |L1.266|
;;;121    
                          ENDP

                  |L1.268|
                          DCD      0x50000100
                  |L1.272|
                          DCD      0x50000200
                  |L1.276|
                          DCD      0x40150000
                  |L1.280|
000118  48656c6c          DCB      "Hello World.\n",0
00011c  6f20576f
000120  726c642e
000124  0a00    
000126  00                DCB      0
000127  00                DCB      0
                  |L1.296|
000128  504c4c20          DCB      "PLL Clock = %d Hz\n",0
00012c  436c6f63
000130  6b203d20
000134  25642048
000138  7a0a00  
00013b  00                DCB      0
                  |L1.316|
00013c  436f7265          DCB      "Core Clock = %d Hz\n\n",0
000140  20436c6f
000144  636b203d
000148  20256420
00014c  487a0a0a
000150  00      
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0
                  |L1.340|
000154  2b2d2d2d          DCB      "+------------------------------------------------------"
000158  2d2d2d2d
00015c  2d2d2d2d
000160  2d2d2d2d
000164  2d2d2d2d
000168  2d2d2d2d
00016c  2d2d2d2d
000170  2d2d2d2d
000174  2d2d2d2d
000178  2d2d2d2d
00017c  2d2d2d2d
000180  2d2d2d2d
000184  2d2d2d2d
000188  2d2d2d  
00018b  2d2b0a00          DCB      "-+\n",0
00018f  00                DCB      0
                  |L1.400|
000190  7c202020          DCB      "|   Nano100 Series I2C Sample Code with EEPROM 24LC64  "
000194  4e616e6f
000198  31303020
00019c  53657269
0001a0  65732049
0001a4  32432053
0001a8  616d706c
0001ac  6520436f
0001b0  64652077
0001b4  69746820
0001b8  45455052
0001bc  4f4d2032
0001c0  344c4336
0001c4  342020  
0001c7  207c0a00          DCB      " |\n",0
0001cb  00                DCB      0
                  |L1.460|
0001cc  0a0a4164          DCB      "\n\nAddress = 0x0010, Write Data = %xh",0
0001d0  64726573
0001d4  73203d20
0001d8  30783030
0001dc  31302c20
0001e0  57726974
0001e4  65204461
0001e8  7461203d
0001ec  20257868
0001f0  00      
0001f1  00                DCB      0
0001f2  00                DCB      0
0001f3  00                DCB      0
                  |L1.500|
0001f4  0a416464          DCB      "\nAddress = 0x0010, Read Data = %xh",0
0001f8  72657373
0001fc  203d2030
000200  78303031
000204  302c2052
000208  65616420
00020c  44617461
000210  203d2025
000214  786800  
000217  00                DCB      0
                  |L1.536|
000218  49324320          DCB      "I2C Byte Write/Read Failed, Data 0x%x\n",0
00021c  42797465
000220  20577269
000224  74652f52
000228  65616420
00022c  4661696c
000230  65642c20
000234  44617461
000238  20307825
00023c  780a00  
00023f  00                DCB      0
                  |L1.576|
000240  0a0a4932          DCB      "\n\nI2C Access EEPROM Test OK\n",0
000244  43204163
000248  63657373
00024c  20454550
000250  524f4d20
000254  54657374
000258  204f4b0a
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
