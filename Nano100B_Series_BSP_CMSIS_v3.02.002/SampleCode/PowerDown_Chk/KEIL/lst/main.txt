; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --feedback=.\obj\PWRDWN_CHECK.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Enter_PowerDown||, CODE, READONLY, ALIGN=2

                  Enter_PowerDown PROC
;;;68       */
;;;69     void Enter_PowerDown()
000000  b500              PUSH     {lr}
;;;70     {
;;;71         /* Back up original setting */
;;;72         SavePinSetting();
000002  f7fffffe          BL       SavePinSetting
;;;73     
;;;74         /* Set function pin to GPIO mode */
;;;75         SYS->PA_L_MFP = 0;
000006  2000              MOVS     r0,#0
000008  2105              MOVS     r1,#5
00000a  0709              LSLS     r1,r1,#28
00000c  6308              STR      r0,[r1,#0x30]
;;;76         SYS->PA_H_MFP = 0;
00000e  6348              STR      r0,[r1,#0x34]
;;;77         SYS->PB_L_MFP = (SYS_PB_L_MFP_PB0_MFP_UART0_RX | SYS_PB_L_MFP_PB1_MFP_UART0_TX);
000010  2211              MOVS     r2,#0x11
000012  638a              STR      r2,[r1,#0x38]
;;;78         SYS->PB_H_MFP = 0;
000014  63c8              STR      r0,[r1,#0x3c]
;;;79         SYS->PC_L_MFP = 0;
000016  4912              LDR      r1,|L1.96|
000018  6008              STR      r0,[r1,#0]
;;;80         SYS->PC_H_MFP = 0;
00001a  6048              STR      r0,[r1,#4]
;;;81         SYS->PD_L_MFP = 0;
00001c  6088              STR      r0,[r1,#8]
;;;82         SYS->PD_H_MFP = 0;
00001e  60c8              STR      r0,[r1,#0xc]
;;;83         SYS->PE_L_MFP = 0;
000020  6108              STR      r0,[r1,#0x10]
;;;84         SYS->PE_H_MFP = 0;
000022  6148              STR      r0,[r1,#0x14]
;;;85         SYS->PF_L_MFP = 0x00007777; // exclude GPF0:ICE_DAT, GPF1:ICE_CLK, GPF2:HXT_OUT, GPF3:HXT_IN
000024  480f              LDR      r0,|L1.100|
000026  6188              STR      r0,[r1,#0x18]
;;;86     
;;;87         /* Enable GPIO pull up */
;;;88         PA->PUEN = 0xFFFF;
000028  4910              LDR      r1,|L1.108|
00002a  480f              LDR      r0,|L1.104|
00002c  6248              STR      r0,[r1,#0x24]
;;;89         PB->PUEN = 0xFFFF;
00002e  490f              LDR      r1,|L1.108|
000030  3140              ADDS     r1,r1,#0x40
000032  6248              STR      r0,[r1,#0x24]
;;;90         PC->PUEN = 0xFFFF;
000034  490d              LDR      r1,|L1.108|
000036  3180              ADDS     r1,r1,#0x80
000038  6248              STR      r0,[r1,#0x24]
;;;91         PD->PUEN = 0xFFFF;
00003a  490c              LDR      r1,|L1.108|
00003c  31c0              ADDS     r1,r1,#0xc0
00003e  6248              STR      r0,[r1,#0x24]
;;;92         PE->PUEN = 0xFFFF;
000040  490b              LDR      r1,|L1.112|
000042  6248              STR      r0,[r1,#0x24]
;;;93         PF->PUEN = 0x0030;      /* exclude GPF0:ICE_DAT, GPF1:ICE_CLK, GPF2:HXT_OUT, GPF3:HXT_IN */
000044  490a              LDR      r1,|L1.112|
000046  2030              MOVS     r0,#0x30
000048  3140              ADDS     r1,r1,#0x40
00004a  6248              STR      r0,[r1,#0x24]
;;;94     
;;;95         //CLK->PWRCTL |= CLK_PWRCTL_PD_WK_IE_Msk;  /* Enable wake up interrupt source */
;;;96         //NVIC_EnableIRQ(PDWU_IRQn);             /* Enable IRQ request for PDWU interrupt */
;;;97     
;;;98         SCB->SCR = SCB_SCR_SLEEPDEEP_Msk;
00004c  4909              LDR      r1,|L1.116|
00004e  2004              MOVS     r0,#4
000050  6108              STR      r0,[r1,#0x10]
;;;99         CLK->PWRCTL |= (CLK_PWRCTL_PD_EN_Msk | CLK_PWRCTL_WK_DLY_Msk );
000052  4809              LDR      r0,|L1.120|
000054  6801              LDR      r1,[r0,#0]
000056  2250              MOVS     r2,#0x50
000058  4311              ORRS     r1,r1,r2
00005a  6001              STR      r1,[r0,#0]
;;;100    
;;;101        //__WFI();   /* system really enter power down here ! */
;;;102    }
00005c  bd00              POP      {pc}
;;;103    
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      0x50000040
                  |L1.100|
                          DCD      0x00007777
                  |L1.104|
                          DCD      0x0000ffff
                  |L1.108|
                          DCD      0x50004000
                  |L1.112|
                          DCD      0x50004100
                  |L1.116|
                          DCD      0xe000ed00
                  |L1.120|
                          DCD      0x50000200

                          AREA ||i.PowerDown_Check||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  PowerDown_Check PROC
;;;103    
;;;104    void PowerDown_Check()
000000  b5f0              PUSH     {r4-r7,lr}
;;;105    {
000002  b089              SUB      sp,sp,#0x24
;;;106        uint32_t i,j;
;;;107        volatile uint32_t Tmp_NVIC_ISER;
;;;108        uint32_t gpio_error_count = 0;
000004  2600              MOVS     r6,#0
;;;109        char *symbo_gpio[6] = {"A", "B", "C", "D", "E", "F"};
000006  2218              MOVS     r2,#0x18
000008  496e              LDR      r1,|L2.452|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;110        GPIO_T *tGPIO;
;;;111        uint32_t SYS_MFP = 0xffffffff;
000010  1e74              SUBS     r4,r6,#1
;;;112    
;;;113        printf("\n/***** PowerDown Check *****/");
000012  a06d              ADR      r0,|L2.456|
000014  f7fffffe          BL       __2printf
;;;114    
;;;115        printf("\n/***** GPIO Check: *****/");
000018  a073              ADR      r0,|L2.488|
00001a  f7fffffe          BL       __2printf
;;;116    
;;;117        //save NVIC setting
;;;118        Tmp_NVIC_ISER = NVIC->ISER[0];
00001e  4879              LDR      r0,|L2.516|
000020  6800              LDR      r0,[r0,#0]
;;;119    
;;;120        //disables a device-specific interrupt in the NVIC interrupt controller
;;;121        NVIC->ICER[0] = 0xFFFFFFFF;
000022  9006              STR      r0,[sp,#0x18]
000024  4877              LDR      r0,|L2.516|
000026  3080              ADDS     r0,r0,#0x80
000028  6004              STR      r4,[r0,#0]
;;;122    
;;;123        for(j = 0; j < 11; j++) {
00002a  2500              MOVS     r5,#0
                  |L2.44|
;;;124            SYS_MFP = *((volatile unsigned int *)(SYS_BASE + 0x30 + (j *4)));
00002c  2005              MOVS     r0,#5
00002e  00a9              LSLS     r1,r5,#2
000030  0700              LSLS     r0,r0,#28
000032  1808              ADDS     r0,r1,r0
000034  6b00              LDR      r0,[r0,#0x30]
;;;125    
;;;126            for(i = 0; i < 8; i++) {
;;;127                if(SYS_MFP & (0x7 << (i*4))) {
;;;128                    gpio_error_count++;
;;;129                    printf("\nGP%s Pin %d not set GPIO !!", symbo_gpio[(j/2)], (i+(8*(j%2))) );
000036  9008              STR      r0,[sp,#0x20]
000038  07e8              LSLS     r0,r5,#31
00003a  0f00              LSRS     r0,r0,#28
00003c  9007              STR      r0,[sp,#0x1c]
00003e  2400              MOVS     r4,#0                 ;126
000040  0868              LSRS     r0,r5,#1
000042  0087              LSLS     r7,r0,#2
                  |L2.68|
000044  00a1              LSLS     r1,r4,#2              ;127
000046  2007              MOVS     r0,#7                 ;127
000048  4088              LSLS     r0,r0,r1              ;127
00004a  9908              LDR      r1,[sp,#0x20]         ;127
00004c  4208              TST      r0,r1                 ;127
00004e  d007              BEQ      |L2.96|
000050  9807              LDR      r0,[sp,#0x1c]
000052  1c76              ADDS     r6,r6,#1
000054  1902              ADDS     r2,r0,r4
000056  4668              MOV      r0,sp
000058  59c1              LDR      r1,[r0,r7]
00005a  a06b              ADR      r0,|L2.520|
00005c  f7fffffe          BL       __2printf
                  |L2.96|
000060  1c64              ADDS     r4,r4,#1
000062  2c08              CMP      r4,#8                 ;126
000064  d3ee              BCC      |L2.68|
000066  1c6d              ADDS     r5,r5,#1              ;126
000068  2d0b              CMP      r5,#0xb               ;123
00006a  d3df              BCC      |L2.44|
;;;130                }
;;;131            }
;;;132        }
;;;133    
;;;134        if( (SYS->PF_L_MFP & SYS_PF_L_MFP_PF2_MFP_HXT_OUT) != SYS_PF_L_MFP_PF2_MFP_HXT_OUT) {
00006c  4c6e              LDR      r4,|L2.552|
00006e  69a0              LDR      r0,[r4,#0x18]
000070  0540              LSLS     r0,r0,#21
000072  0f40              LSRS     r0,r0,#29
000074  2807              CMP      r0,#7
000076  d005              BEQ      |L2.132|
;;;135            printf("\nGPF Pin 2 not set HXT_OUT !!!");
000078  a06c              ADR      r0,|L2.556|
00007a  f7fffffe          BL       __2printf
;;;136            printf("\nPlease Check GPF Pin 2 not connect crystal !!!");
00007e  a073              ADR      r0,|L2.588|
000080  f7fffffe          BL       __2printf
                  |L2.132|
;;;137        }
;;;138    
;;;139        if( (SYS->PF_L_MFP & SYS_PF_L_MFP_PF3_MFP_HXT_IN) != SYS_PF_L_MFP_PF3_MFP_HXT_IN) {
000084  69a0              LDR      r0,[r4,#0x18]
000086  0440              LSLS     r0,r0,#17
000088  0f40              LSRS     r0,r0,#29
00008a  2807              CMP      r0,#7
00008c  d005              BEQ      |L2.154|
;;;140            printf("\nGPF Pin 3 not set HXT_IN !!!");
00008e  a07b              ADR      r0,|L2.636|
000090  f7fffffe          BL       __2printf
;;;141            printf("\nPlease Check GPF Pin 3 not connect crystal !!!");
000094  a081              ADR      r0,|L2.668|
000096  f7fffffe          BL       __2printf
                  |L2.154|
;;;142        }
;;;143    
;;;144        for(j = 0; j < 6; j++) {
00009a  2500              MOVS     r5,#0
                  |L2.156|
;;;145            tGPIO =(GPIO_T*)((uint32_t)PA + (j * (0x40)));
00009c  488b              LDR      r0,|L2.716|
00009e  01a9              LSLS     r1,r5,#6
0000a0  1808              ADDS     r0,r1,r0
;;;146    
;;;147            for(i = 0; i < 16; i++) {
0000a2  2400              MOVS     r4,#0
0000a4  00af              LSLS     r7,r5,#2              ;124
0000a6  9007              STR      r0,[sp,#0x1c]         ;124
                  |L2.168|
;;;148                if((j == 5) & (i > 5)) // GPF
0000a8  2d05              CMP      r5,#5
0000aa  d101              BNE      |L2.176|
0000ac  2c05              CMP      r4,#5
0000ae  d80f              BHI      |L2.208|
                  |L2.176|
;;;149                    break;
;;;150    
;;;151                if(!(tGPIO->PIN & (1 << i))) {
0000b0  9807              LDR      r0,[sp,#0x1c]
0000b2  6901              LDR      r1,[r0,#0x10]
0000b4  2001              MOVS     r0,#1
0000b6  40a0              LSLS     r0,r0,r4
0000b8  4201              TST      r1,r0
0000ba  d106              BNE      |L2.202|
;;;152                    gpio_error_count++;
;;;153                    printf("\nGP%s Pin %d can not pull high!!", symbo_gpio[j], i);
0000bc  4668              MOV      r0,sp
0000be  59c1              LDR      r1,[r0,r7]
0000c0  4622              MOV      r2,r4
0000c2  a083              ADR      r0,|L2.720|
0000c4  1c76              ADDS     r6,r6,#1
0000c6  f7fffffe          BL       __2printf
                  |L2.202|
0000ca  1c64              ADDS     r4,r4,#1
0000cc  2c10              CMP      r4,#0x10              ;147
0000ce  d3eb              BCC      |L2.168|
                  |L2.208|
0000d0  1c6d              ADDS     r5,r5,#1              ;147
0000d2  2d06              CMP      r5,#6                 ;144
0000d4  d3e2              BCC      |L2.156|
;;;154                }
;;;155            }
;;;156        }
;;;157    
;;;158        if(gpio_error_count)
0000d6  2e00              CMP      r6,#0
0000d8  d001              BEQ      |L2.222|
;;;159            printf("\nGPIO Check fail !!");
0000da  a086              ADR      r0,|L2.756|
0000dc  e000              B        |L2.224|
                  |L2.222|
;;;160        else
;;;161            printf("\nGPIO Check pass");
0000de  a08a              ADR      r0,|L2.776|
                  |L2.224|
0000e0  f7fffffe          BL       __2printf
;;;162    
;;;163        printf("\n");
0000e4  a08d              ADR      r0,|L2.796|
0000e6  f7fffffe          BL       __2printf
;;;164    
;;;165        printf("\n/***** Clock Check: *****/");
0000ea  a08d              ADR      r0,|L2.800|
0000ec  f7fffffe          BL       __2printf
;;;166    
;;;167        if(CLK->PWRCTL & CLK_PWRCTL_HXT_EN)
0000f0  4c92              LDR      r4,|L2.828|
0000f2  6820              LDR      r0,[r4,#0]
0000f4  07c0              LSLS     r0,r0,#31
0000f6  d001              BEQ      |L2.252|
;;;168            printf("\nHXT Enable");
0000f8  a091              ADR      r0,|L2.832|
0000fa  e000              B        |L2.254|
                  |L2.252|
;;;169        else
;;;170            printf("\nHXT Disable");
0000fc  a093              ADR      r0,|L2.844|
                  |L2.254|
0000fe  f7fffffe          BL       __2printf
;;;171    
;;;172        if(CLK->PWRCTL & CLK_PWRCTL_LXT_EN)
000102  6820              LDR      r0,[r4,#0]
000104  0780              LSLS     r0,r0,#30
000106  d501              BPL      |L2.268|
;;;173            printf("\nLXT Enable");
000108  a094              ADR      r0,|L2.860|
00010a  e000              B        |L2.270|
                  |L2.268|
;;;174        else
;;;175            printf("\nLXT Disable");
00010c  a096              ADR      r0,|L2.872|
                  |L2.270|
00010e  f7fffffe          BL       __2printf
;;;176    
;;;177        if(CLK->PWRCTL & CLK_PWRCTL_HIRC_EN)
000112  6820              LDR      r0,[r4,#0]
000114  0740              LSLS     r0,r0,#29
000116  d501              BPL      |L2.284|
;;;178            printf("\nHIRC Enable");
000118  a097              ADR      r0,|L2.888|
00011a  e000              B        |L2.286|
                  |L2.284|
;;;179        else
;;;180            printf("\nHIRC Disable");
00011c  a09a              ADR      r0,|L2.904|
                  |L2.286|
00011e  f7fffffe          BL       __2printf
;;;181    
;;;182        if(CLK->PWRCTL & CLK_PWRCTL_LIRC_EN)
000122  6820              LDR      r0,[r4,#0]
000124  0700              LSLS     r0,r0,#28
000126  d501              BPL      |L2.300|
;;;183            printf("\nLIRC Enable");
000128  a09b              ADR      r0,|L2.920|
00012a  e000              B        |L2.302|
                  |L2.300|
;;;184        else
;;;185            printf("\nLIRC Disable");
00012c  a09e              ADR      r0,|L2.936|
                  |L2.302|
00012e  f7fffffe          BL       __2printf
;;;186    
;;;187        printf("\n");
000132  a07a              ADR      r0,|L2.796|
000134  f7fffffe          BL       __2printf
;;;188        printf("\n/***** Power Down setting check: *****/");
000138  a09f              ADR      r0,|L2.952|
00013a  f7fffffe          BL       __2printf
;;;189        if(CLK->PWRCTL & CLK_PWRCTL_PWRDOWN_EN)
00013e  6820              LDR      r0,[r4,#0]
000140  0640              LSLS     r0,r0,#25
000142  d501              BPL      |L2.328|
;;;190            printf("\nChip Power-down mode Enable ");
000144  a0a7              ADR      r0,|L2.996|
000146  e000              B        |L2.330|
                  |L2.328|
;;;191        else
;;;192            printf("\nChip Power-down mode Disable !!!");
000148  a0ae              ADR      r0,|L2.1028|
                  |L2.330|
00014a  f7fffffe          BL       __2printf
;;;193    
;;;194        if(SCB->SCR & 0x04)
00014e  48b6              LDR      r0,|L2.1064|
000150  6901              LDR      r1,[r0,#0x10]
000152  0749              LSLS     r1,r1,#29
;;;195            printf("\nSCB->SCR set (0x%x) : ok", SCB->SCR);
;;;196        else
;;;197            printf("\nSCB->SCR set (0x%x) : error", SCB->SCR);
000154  6901              LDR      r1,[r0,#0x10]
000156  d501              BPL      |L2.348|
000158  a0b4              ADR      r0,|L2.1068|
00015a  e000              B        |L2.350|
                  |L2.348|
00015c  a0ba              ADR      r0,|L2.1096|
                  |L2.350|
00015e  f7fffffe          BL       __2printf
;;;198    
;;;199        //Restore NVIC->ISER setting
;;;200        NVIC->ISER[0] = Tmp_NVIC_ISER;
000162  4d28              LDR      r5,|L2.516|
000164  9806              LDR      r0,[sp,#0x18]
000166  6028              STR      r0,[r5,#0]
;;;201    
;;;202        printf("\n");
000168  a06c              ADR      r0,|L2.796|
00016a  f7fffffe          BL       __2printf
;;;203        printf("\n/***** Wake-up setting check: *****/");
00016e  a0be              ADR      r0,|L2.1128|
000170  f7fffffe          BL       __2printf
;;;204        if(CLK->PWRCTL & CLK_PWRCTL_DELY_EN)
000174  6820              LDR      r0,[r4,#0]
000176  06c0              LSLS     r0,r0,#27
000178  d501              BPL      |L2.382|
;;;205            printf("\nWake-up Delay Counter Enable");
00017a  a0c5              ADR      r0,|L2.1168|
00017c  e000              B        |L2.384|
                  |L2.382|
;;;206        else
;;;207            printf("\nWake-up Delay Counter Disable");
00017e  a0cc              ADR      r0,|L2.1200|
                  |L2.384|
000180  f7fffffe          BL       __2printf
;;;208    
;;;209        if(CLK->PWRCTL & CLK_PWRCTL_WAKEINT_EN)
000184  6820              LDR      r0,[r4,#0]
000186  0680              LSLS     r0,r0,#26
000188  d501              BPL      |L2.398|
;;;210            printf("\nPower-down Mode Wake-up Interrupt Enable");
00018a  a0d1              ADR      r0,|L2.1232|
00018c  e000              B        |L2.400|
                  |L2.398|
;;;211        else
;;;212            printf("\nPower-down Mode Wake-up Interrupt Disable");
00018e  a0db              ADR      r0,|L2.1276|
                  |L2.400|
000190  f7fffffe          BL       __2printf
;;;213    
;;;214        if( NVIC->ISER[0] & (1 << ((uint32_t)(PDWU_IRQn) & 0x1F)) )
000194  6828              LDR      r0,[r5,#0]
000196  00c0              LSLS     r0,r0,#3
000198  d501              BPL      |L2.414|
;;;215            printf("\nEnable PDWU_IRQn request for PDWU interrupt");
00019a  a0e3              ADR      r0,|L2.1320|
00019c  e000              B        |L2.416|
                  |L2.414|
;;;216        else
;;;217            printf("\nDisable PDWU_IRQn request for PDWU interrupt");
00019e  a0ee              ADR      r0,|L2.1368|
                  |L2.416|
0001a0  f7fffffe          BL       __2printf
;;;218    
;;;219        printf("\n");
0001a4  a05d              ADR      r0,|L2.796|
0001a6  f7fffffe          BL       __2printf
;;;220        printf("\n/***** ISR check: *****/");
0001aa  a0f7              ADR      r0,|L2.1416|
0001ac  f7fffffe          BL       __2printf
0001b0  48fc              LDR      r0,|L2.1444|
0001b2  6800              LDR      r0,[r0,#0]
0001b4  2101              MOVS     r1,#1
0001b6  0709              LSLS     r1,r1,#28
0001b8  4208              TST      r0,r1
0001ba  d001              BEQ      |L2.448|
;;;221        if(NVIC_GetPendingIRQ(PDWU_IRQn))
;;;222            printf("\nPowerDown WakeUp Interrupt status is pending. (check fail)");
0001bc  a0fa              ADR      r0,|L2.1448|
0001be  e212              B        |L2.1510|
                  |L2.448|
0001c0  e210              B        |L2.1508|
0001c2  0000              DCW      0x0000
                  |L2.452|
                          DCD      ||.constdata||
                  |L2.456|
0001c8  0a2f2a2a          DCB      "\n/***** PowerDown Check *****/",0
0001cc  2a2a2a20
0001d0  506f7765
0001d4  72446f77
0001d8  6e204368
0001dc  65636b20
0001e0  2a2a2a2a
0001e4  2a2f00  
0001e7  00                DCB      0
                  |L2.488|
0001e8  0a2f2a2a          DCB      "\n/***** GPIO Check: *****/",0
0001ec  2a2a2a20
0001f0  4750494f
0001f4  20436865
0001f8  636b3a20
0001fc  2a2a2a2a
000200  2a2f00  
000203  00                DCB      0
                  |L2.516|
                          DCD      0xe000e100
                  |L2.520|
000208  0a475025          DCB      "\nGP%s Pin %d not set GPIO !!",0
00020c  73205069
000210  6e202564
000214  206e6f74
000218  20736574
00021c  20475049
000220  4f202121
000224  00      
000225  00                DCB      0
000226  00                DCB      0
000227  00                DCB      0
                  |L2.552|
                          DCD      0x50000040
                  |L2.556|
00022c  0a475046          DCB      "\nGPF Pin 2 not set HXT_OUT !!!",0
000230  2050696e
000234  2032206e
000238  6f742073
00023c  65742048
000240  58545f4f
000244  55542021
000248  212100  
00024b  00                DCB      0
                  |L2.588|
00024c  0a506c65          DCB      "\nPlease Check GPF Pin 2 not connect crystal !!!",0
000250  61736520
000254  43686563
000258  6b204750
00025c  46205069
000260  6e203220
000264  6e6f7420
000268  636f6e6e
00026c  65637420
000270  63727973
000274  74616c20
000278  21212100
                  |L2.636|
00027c  0a475046          DCB      "\nGPF Pin 3 not set HXT_IN !!!",0
000280  2050696e
000284  2033206e
000288  6f742073
00028c  65742048
000290  58545f49
000294  4e202121
000298  2100    
00029a  00                DCB      0
00029b  00                DCB      0
                  |L2.668|
00029c  0a506c65          DCB      "\nPlease Check GPF Pin 3 not connect crystal !!!",0
0002a0  61736520
0002a4  43686563
0002a8  6b204750
0002ac  46205069
0002b0  6e203320
0002b4  6e6f7420
0002b8  636f6e6e
0002bc  65637420
0002c0  63727973
0002c4  74616c20
0002c8  21212100
                  |L2.716|
                          DCD      0x50004000
                  |L2.720|
0002d0  0a475025          DCB      "\nGP%s Pin %d can not pull high!!",0
0002d4  73205069
0002d8  6e202564
0002dc  2063616e
0002e0  206e6f74
0002e4  2070756c
0002e8  6c206869
0002ec  67682121
0002f0  00      
0002f1  00                DCB      0
0002f2  00                DCB      0
0002f3  00                DCB      0
                  |L2.756|
0002f4  0a475049          DCB      "\nGPIO Check fail !!",0
0002f8  4f204368
0002fc  65636b20
000300  6661696c
000304  20212100
                  |L2.776|
000308  0a475049          DCB      "\nGPIO Check pass",0
00030c  4f204368
000310  65636b20
000314  70617373
000318  00      
000319  00                DCB      0
00031a  00                DCB      0
00031b  00                DCB      0
                  |L2.796|
00031c  0a00              DCB      "\n",0
00031e  00                DCB      0
00031f  00                DCB      0
                  |L2.800|
000320  0a2f2a2a          DCB      "\n/***** Clock Check: *****/",0
000324  2a2a2a20
000328  436c6f63
00032c  6b204368
000330  65636b3a
000334  202a2a2a
000338  2a2a2f00
                  |L2.828|
                          DCD      0x50000200
                  |L2.832|
000340  0a485854          DCB      "\nHXT Enable",0
000344  20456e61
000348  626c6500
                  |L2.844|
00034c  0a485854          DCB      "\nHXT Disable",0
000350  20446973
000354  61626c65
000358  00      
000359  00                DCB      0
00035a  00                DCB      0
00035b  00                DCB      0
                  |L2.860|
00035c  0a4c5854          DCB      "\nLXT Enable",0
000360  20456e61
000364  626c6500
                  |L2.872|
000368  0a4c5854          DCB      "\nLXT Disable",0
00036c  20446973
000370  61626c65
000374  00      
000375  00                DCB      0
000376  00                DCB      0
000377  00                DCB      0
                  |L2.888|
000378  0a484952          DCB      "\nHIRC Enable",0
00037c  4320456e
000380  61626c65
000384  00      
000385  00                DCB      0
000386  00                DCB      0
000387  00                DCB      0
                  |L2.904|
000388  0a484952          DCB      "\nHIRC Disable",0
00038c  43204469
000390  7361626c
000394  6500    
000396  00                DCB      0
000397  00                DCB      0
                  |L2.920|
000398  0a4c4952          DCB      "\nLIRC Enable",0
00039c  4320456e
0003a0  61626c65
0003a4  00      
0003a5  00                DCB      0
0003a6  00                DCB      0
0003a7  00                DCB      0
                  |L2.936|
0003a8  0a4c4952          DCB      "\nLIRC Disable",0
0003ac  43204469
0003b0  7361626c
0003b4  6500    
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L2.952|
0003b8  0a2f2a2a          DCB      "\n/***** Power Down setting check: *****/",0
0003bc  2a2a2a20
0003c0  506f7765
0003c4  7220446f
0003c8  776e2073
0003cc  65747469
0003d0  6e672063
0003d4  6865636b
0003d8  3a202a2a
0003dc  2a2a2a2f
0003e0  00      
0003e1  00                DCB      0
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L2.996|
0003e4  0a436869          DCB      "\nChip Power-down mode Enable ",0
0003e8  7020506f
0003ec  7765722d
0003f0  646f776e
0003f4  206d6f64
0003f8  6520456e
0003fc  61626c65
000400  2000    
000402  00                DCB      0
000403  00                DCB      0
                  |L2.1028|
000404  0a436869          DCB      "\nChip Power-down mode Disable !!!",0
000408  7020506f
00040c  7765722d
000410  646f776e
000414  206d6f64
000418  65204469
00041c  7361626c
000420  65202121
000424  2100    
000426  00                DCB      0
000427  00                DCB      0
                  |L2.1064|
                          DCD      0xe000ed00
                  |L2.1068|
00042c  0a534342          DCB      "\nSCB->SCR set (0x%x) : ok",0
000430  2d3e5343
000434  52207365
000438  74202830
00043c  78257829
000440  203a206f
000444  6b00    
000446  00                DCB      0
000447  00                DCB      0
                  |L2.1096|
000448  0a534342          DCB      "\nSCB->SCR set (0x%x) : error",0
00044c  2d3e5343
000450  52207365
000454  74202830
000458  78257829
00045c  203a2065
000460  72726f72
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L2.1128|
000468  0a2f2a2a          DCB      "\n/***** Wake-up setting check: *****/",0
00046c  2a2a2a20
000470  57616b65
000474  2d757020
000478  73657474
00047c  696e6720
000480  63686563
000484  6b3a202a
000488  2a2a2a2a
00048c  2f00    
00048e  00                DCB      0
00048f  00                DCB      0
                  |L2.1168|
000490  0a57616b          DCB      "\nWake-up Delay Counter Enable",0
000494  652d7570
000498  2044656c
00049c  61792043
0004a0  6f756e74
0004a4  65722045
0004a8  6e61626c
0004ac  6500    
0004ae  00                DCB      0
0004af  00                DCB      0
                  |L2.1200|
0004b0  0a57616b          DCB      "\nWake-up Delay Counter Disable",0
0004b4  652d7570
0004b8  2044656c
0004bc  61792043
0004c0  6f756e74
0004c4  65722044
0004c8  69736162
0004cc  6c6500  
0004cf  00                DCB      0
                  |L2.1232|
0004d0  0a506f77          DCB      "\nPower-down Mode Wake-up Interrupt Enable",0
0004d4  65722d64
0004d8  6f776e20
0004dc  4d6f6465
0004e0  2057616b
0004e4  652d7570
0004e8  20496e74
0004ec  65727275
0004f0  70742045
0004f4  6e61626c
0004f8  6500    
0004fa  00                DCB      0
0004fb  00                DCB      0
                  |L2.1276|
0004fc  0a506f77          DCB      "\nPower-down Mode Wake-up Interrupt Disable",0
000500  65722d64
000504  6f776e20
000508  4d6f6465
00050c  2057616b
000510  652d7570
000514  20496e74
000518  65727275
00051c  70742044
000520  69736162
000524  6c6500  
000527  00                DCB      0
                  |L2.1320|
000528  0a456e61          DCB      "\nEnable PDWU_IRQn request for PDWU interrupt",0
00052c  626c6520
000530  50445755
000534  5f495251
000538  6e207265
00053c  71756573
000540  7420666f
000544  72205044
000548  57552069
00054c  6e746572
000550  72757074
000554  00      
000555  00                DCB      0
000556  00                DCB      0
000557  00                DCB      0
                  |L2.1368|
000558  0a446973          DCB      "\nDisable PDWU_IRQn request for PDWU interrupt",0
00055c  61626c65
000560  20504457
000564  555f4952
000568  516e2072
00056c  65717565
000570  73742066
000574  6f722050
000578  44575520
00057c  696e7465
000580  72727570
000584  7400    
000586  00                DCB      0
000587  00                DCB      0
                  |L2.1416|
000588  0a2f2a2a          DCB      "\n/***** ISR check: *****/",0
00058c  2a2a2a20
000590  49535220
000594  63686563
000598  6b3a202a
00059c  2a2a2a2a
0005a0  2f00    
0005a2  00                DCB      0
0005a3  00                DCB      0
                  |L2.1444|
                          DCD      0xe000e200
                  |L2.1448|
0005a8  0a506f77          DCB      "\nPowerDown WakeUp Interrupt status is pending. (check "
0005ac  6572446f
0005b0  776e2057
0005b4  616b6555
0005b8  7020496e
0005bc  74657272
0005c0  75707420
0005c4  73746174
0005c8  75732069
0005cc  73207065
0005d0  6e64696e
0005d4  672e2028
0005d8  63686563
0005dc  6b20    
0005de  6661696c          DCB      "fail)",0
0005e2  2900    
                  |L2.1508|
;;;223        else
;;;224            printf("\nPowerDown WakeUp Interrupt status is not pending. (check ok)");
0005e4  a009              ADR      r0,|L2.1548|
                  |L2.1510|
0005e6  f7fffffe          BL       __2printf
;;;225    
;;;226        if(CLK->WK_INTSTS & 0x1)
0005ea  6b20              LDR      r0,[r4,#0x30]
0005ec  07c0              LSLS     r0,r0,#31
0005ee  d001              BEQ      |L2.1524|
;;;227            printf("\nWake-up Interrupt Status is set. (check fail)");
0005f0  a016              ADR      r0,|L2.1612|
0005f2  e000              B        |L2.1526|
                  |L2.1524|
;;;228        else
;;;229            printf("\nWake-up Interrupt Status is not set. (check ok)");
0005f4  a021              ADR      r0,|L2.1660|
                  |L2.1526|
0005f6  f7fffffe          BL       __2printf
;;;230    
;;;231        printf("\n");
0005fa  a02d              ADR      r0,|L2.1712|
0005fc  f7fffffe          BL       __2printf
;;;232        printf("\n/***** PowerDown Check End *****/");
000600  a02c              ADR      r0,|L2.1716|
000602  f7fffffe          BL       __2printf
;;;233    }
000606  b009              ADD      sp,sp,#0x24
000608  bdf0              POP      {r4-r7,pc}
;;;234    
                          ENDP

00060a  0000              DCW      0x0000
                  |L2.1548|
00060c  0a506f77          DCB      "\nPowerDown WakeUp Interrupt status is not pending. (ch"
000610  6572446f
000614  776e2057
000618  616b6555
00061c  7020496e
000620  74657272
000624  75707420
000628  73746174
00062c  75732069
000630  73206e6f
000634  74207065
000638  6e64696e
00063c  672e2028
000640  6368    
000642  65636b20          DCB      "eck ok)",0
000646  6f6b2900
00064a  00                DCB      0
00064b  00                DCB      0
                  |L2.1612|
00064c  0a57616b          DCB      "\nWake-up Interrupt Status is set. (check fail)",0
000650  652d7570
000654  20496e74
000658  65727275
00065c  70742053
000660  74617475
000664  73206973
000668  20736574
00066c  2e202863
000670  6865636b
000674  20666169
000678  6c2900  
00067b  00                DCB      0
                  |L2.1660|
00067c  0a57616b          DCB      "\nWake-up Interrupt Status is not set. (check ok)",0
000680  652d7570
000684  20496e74
000688  65727275
00068c  70742053
000690  74617475
000694  73206973
000698  206e6f74
00069c  20736574
0006a0  2e202863
0006a4  6865636b
0006a8  206f6b29
0006ac  00      
0006ad  00                DCB      0
0006ae  00                DCB      0
0006af  00                DCB      0
                  |L2.1712|
0006b0  0a00              DCB      "\n",0
0006b2  00                DCB      0
0006b3  00                DCB      0
                  |L2.1716|
0006b4  0a2f2a2a          DCB      "\n/***** PowerDown Check End *****/",0
0006b8  2a2a2a20
0006bc  506f7765
0006c0  72446f77
0006c4  6e204368
0006c8  65636b20
0006cc  456e6420
0006d0  2a2a2a2a
0006d4  2a2f00  
0006d7  00                DCB      0

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;234    
;;;235    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  2116              MOVS     r1,#0x16
000006  4c12              LDR      r4,|L3.80|
000008  2288              MOVS     r2,#0x88
00000a  e002              B        |L3.18|
                  |L3.12|
00000c  6020              STR      r0,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6022              STR      r2,[r4,#0]
                  |L3.18|
000012  6823              LDR      r3,[r4,#0]
000014  2b01              CMP      r3,#1
000016  d1f9              BNE      |L3.12|
;;;236    {
;;;237        /*---------------------------------------------------------------------------------------------------------*/
;;;238        /* Init System Clock                                                                                       */
;;;239        /*---------------------------------------------------------------------------------------------------------*/
;;;240        /* Unlock protected registers */
;;;241        SYS_UnlockReg();
;;;242    
;;;243        /* Enable IP clock */
;;;244        CLK->APBCLK |= CLK_APBCLK_UART0_EN; // UART0 Clock Enable
000018  480e              LDR      r0,|L3.84|
00001a  6881              LDR      r1,[r0,#8]
00001c  01c2              LSLS     r2,r0,#7
00001e  4311              ORRS     r1,r1,r2
000020  6081              STR      r1,[r0,#8]
;;;245    
;;;246        /* Select IP clock source */
;;;247        CLK->CLKSEL1 &= ~CLK_CLKSEL1_UART_S_Msk;
000022  6941              LDR      r1,[r0,#0x14]
000024  0889              LSRS     r1,r1,#2
000026  0089              LSLS     r1,r1,#2
000028  6141              STR      r1,[r0,#0x14]
;;;248        CLK->CLKSEL1 |= (0x3 << CLK_CLKSEL1_UART_S_Pos);// Clock source from HIRC
00002a  6941              LDR      r1,[r0,#0x14]
00002c  2203              MOVS     r2,#3
00002e  4311              ORRS     r1,r1,r2
000030  6141              STR      r1,[r0,#0x14]
;;;249    
;;;250        /* Update System Core Clock */
;;;251        /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;252        SystemCoreClockUpdate();
000032  f7fffffe          BL       SystemCoreClockUpdate
;;;253    
;;;254        /*---------------------------------------------------------------------------------------------------------*/
;;;255        /* Init I/O Multi-function                                                                                 */
;;;256        /*---------------------------------------------------------------------------------------------------------*/
;;;257        /* Set PB multi-function pins for UART0 RXD and TXD  */
;;;258        SYS->PB_L_MFP &= ~(SYS_PB_L_MFP_PB0_MFP_Msk | SYS_PB_L_MFP_PB1_MFP_Msk);
000036  2005              MOVS     r0,#5
000038  0700              LSLS     r0,r0,#28
00003a  6b81              LDR      r1,[r0,#0x38]
00003c  2277              MOVS     r2,#0x77
00003e  4391              BICS     r1,r1,r2
000040  6381              STR      r1,[r0,#0x38]
;;;259        SYS->PB_L_MFP |= (SYS_PB_L_MFP_PB0_MFP_UART0_RX | SYS_PB_L_MFP_PB1_MFP_UART0_TX);
000042  6b81              LDR      r1,[r0,#0x38]
000044  2211              MOVS     r2,#0x11
000046  4311              ORRS     r1,r1,r2
000048  6381              STR      r1,[r0,#0x38]
00004a  2000              MOVS     r0,#0
00004c  6020              STR      r0,[r4,#0]
;;;260    
;;;261        /* Lock protected registers */
;;;262        SYS_LockReg();
;;;263    
;;;264    }
00004e  bd10              POP      {r4,pc}
;;;265    
                          ENDP

                  |L3.80|
                          DCD      0x50000100
                  |L3.84|
                          DCD      0x50000200

                          AREA ||i.SavePinSetting||, CODE, READONLY, ALIGN=2

                  SavePinSetting PROC
;;;39       */
;;;40     void SavePinSetting()
000000  2105              MOVS     r1,#5
;;;41     {
;;;42         /* Save Pin selection setting */
;;;43         _Pin_Setting[0] = SYS->PA_L_MFP;
000002  0709              LSLS     r1,r1,#28
000004  6b0a              LDR      r2,[r1,#0x30]
000006  4818              LDR      r0,|L4.104|
000008  6002              STR      r2,[r0,#0]  ; _Pin_Setting
;;;44         _Pin_Setting[1] = SYS->PA_H_MFP;
00000a  6b4a              LDR      r2,[r1,#0x34]
00000c  6042              STR      r2,[r0,#4]  ; _Pin_Setting
;;;45         _Pin_Setting[2] = SYS->PB_L_MFP;
00000e  6b8a              LDR      r2,[r1,#0x38]
000010  6082              STR      r2,[r0,#8]  ; _Pin_Setting
;;;46         _Pin_Setting[3] = SYS->PB_H_MFP;
000012  6bc9              LDR      r1,[r1,#0x3c]
000014  60c1              STR      r1,[r0,#0xc]  ; _Pin_Setting
;;;47         _Pin_Setting[4] = SYS->PC_L_MFP;
000016  4915              LDR      r1,|L4.108|
000018  680a              LDR      r2,[r1,#0]
00001a  6102              STR      r2,[r0,#0x10]  ; _Pin_Setting
;;;48         _Pin_Setting[5] = SYS->PC_H_MFP;
00001c  684a              LDR      r2,[r1,#4]
00001e  6142              STR      r2,[r0,#0x14]  ; _Pin_Setting
;;;49         _Pin_Setting[6] = SYS->PD_L_MFP;
000020  688a              LDR      r2,[r1,#8]
000022  6182              STR      r2,[r0,#0x18]  ; _Pin_Setting
;;;50         _Pin_Setting[7] = SYS->PD_H_MFP;
000024  68ca              LDR      r2,[r1,#0xc]
000026  61c2              STR      r2,[r0,#0x1c]  ; _Pin_Setting
;;;51         _Pin_Setting[8] = SYS->PE_L_MFP;
000028  690a              LDR      r2,[r1,#0x10]
00002a  6202              STR      r2,[r0,#0x20]  ; _Pin_Setting
;;;52         _Pin_Setting[9] = SYS->PE_H_MFP;
00002c  694a              LDR      r2,[r1,#0x14]
00002e  6242              STR      r2,[r0,#0x24]  ; _Pin_Setting
;;;53         _Pin_Setting[10] = SYS->PF_L_MFP;
000030  6989              LDR      r1,[r1,#0x18]
000032  6281              STR      r1,[r0,#0x28]  ; _Pin_Setting
;;;54     
;;;55         /* Save Pull-up setting */
;;;56         _PullUp_Setting[0] =  PA->PUEN;
000034  480e              LDR      r0,|L4.112|
000036  6a41              LDR      r1,[r0,#0x24]
000038  480b              LDR      r0,|L4.104|
00003a  302c              ADDS     r0,r0,#0x2c
00003c  6001              STR      r1,[r0,#0]  ; _PullUp_Setting
;;;57         _PullUp_Setting[1] =  PB->PUEN;
00003e  490c              LDR      r1,|L4.112|
000040  3140              ADDS     r1,r1,#0x40
000042  6a49              LDR      r1,[r1,#0x24]
000044  6041              STR      r1,[r0,#4]  ; _PullUp_Setting
;;;58         _PullUp_Setting[2] =  PC->PUEN;
000046  490a              LDR      r1,|L4.112|
000048  3180              ADDS     r1,r1,#0x80
00004a  6a49              LDR      r1,[r1,#0x24]
00004c  6081              STR      r1,[r0,#8]  ; _PullUp_Setting
;;;59         _PullUp_Setting[3] =  PD->PUEN;
00004e  4908              LDR      r1,|L4.112|
000050  31c0              ADDS     r1,r1,#0xc0
000052  6a49              LDR      r1,[r1,#0x24]
000054  60c1              STR      r1,[r0,#0xc]  ; _PullUp_Setting
;;;60         _PullUp_Setting[4] =  PE->PUEN;
000056  4907              LDR      r1,|L4.116|
000058  6a49              LDR      r1,[r1,#0x24]
00005a  6101              STR      r1,[r0,#0x10]  ; _PullUp_Setting
;;;61         _PullUp_Setting[5] =  PF->PUEN;
00005c  4905              LDR      r1,|L4.116|
00005e  3140              ADDS     r1,r1,#0x40
000060  6a49              LDR      r1,[r1,#0x24]
000062  6141              STR      r1,[r0,#0x14]  ; _PullUp_Setting
;;;62     }
000064  4770              BX       lr
;;;63     
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      ||.bss||
                  |L4.108|
                          DCD      0x50000040
                  |L4.112|
                          DCD      0x50004000
                  |L4.116|
                          DCD      0x50004100

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;265    
;;;266    void UART0_Init()
000000  b510              PUSH     {r4,lr}
;;;267    {
;;;268        /*---------------------------------------------------------------------------------------------------------*/
;;;269        /* Init UART                                                                                               */
;;;270        /*---------------------------------------------------------------------------------------------------------*/
;;;271        UART_Open(UART0, 115200);
000002  21e1              MOVS     r1,#0xe1
000004  0249              LSLS     r1,r1,#9
000006  4802              LDR      r0,|L5.16|
000008  f7fffffe          BL       UART_Open
;;;272    }
00000c  bd10              POP      {r4,pc}
;;;273    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40050000

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;278      */
;;;279    int32_t main(void)
000000  f7fffffe          BL       SYS_Init
;;;280    {
;;;281        SYS_Init();
;;;282        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;283    
;;;284        /* Prepare to enter power down mode, to demo the usage of PowerDown_Check(),
;;;285           this function does not actually put this system to  power down mode  */
;;;286        Enter_PowerDown();
000008  f7fffffe          BL       Enter_PowerDown
;;;287        /* Check system state before enter power down mode */
;;;288        PowerDown_Check();
00000c  f7fffffe          BL       PowerDown_Check
                  |L6.16|
;;;289    
;;;290        while(1);
000010  e7fe              B        |L6.16|
;;;291    
;;;292    }
;;;293    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _Pin_Setting
                          %        44
                  _PullUp_Setting
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x4
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x14

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4100              DCB      "A",0
000002  00                DCB      0
000003  00                DCB      0
000004  4200              DCB      "B",0
000006  00                DCB      0
000007  00                DCB      0
000008  4300              DCB      "C",0
00000a  00                DCB      0
00000b  00                DCB      0
00000c  4400              DCB      "D",0
00000e  00                DCB      0
00000f  00                DCB      0
000010  4500              DCB      "E",0
000012  00                DCB      0
000013  00                DCB      0
000014  4600              DCB      "F",0

                          AREA ||.data||, DATA, ALIGN=2

                  _Wakeup_Flag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_431424b2____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_431424b2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_431424b2____REVSH|
#line 402
|__asm___6_main_c_431424b2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
