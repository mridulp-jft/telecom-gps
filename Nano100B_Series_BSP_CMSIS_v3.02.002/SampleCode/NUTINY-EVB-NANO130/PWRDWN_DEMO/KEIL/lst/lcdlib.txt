; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcdlib.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lcdlib.d --feedback=.\obj\PWRDWN_DEMO.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\LCDLib\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\lcdlib.crf ..\..\..\..\Library\LCDLib\Source\LCDLIB.c]
                          THUMB

                          AREA ||i.LCDLIB_PrintNumber||, CODE, READONLY, ALIGN=2

                  LCDLIB_PrintNumber PROC
;;;102     */
;;;103    void LCDLIB_PrintNumber(uint32_t  u32Zone, long long value)
000000  b5f0              PUSH     {r4-r7,lr}
;;;104    {
000002  b41f              PUSH     {r0-r4}
000004  b086              SUB      sp,sp,#0x18
;;;105        int      index;
;;;106        long long num, i, com, bit, div, len, tmp;
;;;107        uint16_t bitpattern;
;;;108    
;;;109        if (value < 0) {
000006  9809              LDR      r0,[sp,#0x24]
000008  2800              CMP      r0,#0
00000a  da06              BGE      |L1.26|
;;;110            value = abs(value);
00000c  9808              LDR      r0,[sp,#0x20]
00000e  2800              CMP      r0,#0
000010  da00              BGE      |L1.20|
000012  4240              RSBS     r0,r0,#0
                  |L1.20|
000014  17c1              ASRS     r1,r0,#31
000016  9109              STR      r1,[sp,#0x24]
000018  9008              STR      r0,[sp,#0x20]
                  |L1.26|
;;;111        }
;;;112    
;;;113        /* Length of number */
;;;114        len = 0;
;;;115        tmp = value;
00001a  9909              LDR      r1,[sp,#0x24]
00001c  9808              LDR      r0,[sp,#0x20]
00001e  2400              MOVS     r4,#0                 ;110
                  |L1.32|
;;;116        while( 1 ) {
;;;117            if( (tmp/10) || (tmp%10) ) {
000020  220a              MOVS     r2,#0xa
000022  2300              MOVS     r3,#0
000024  f7fffffe          BL       __aeabi_ldivmod
000028  4605              MOV      r5,r0
00002a  4308              ORRS     r0,r0,r1
00002c  d101              BNE      |L1.50|
00002e  431a              ORRS     r2,r2,r3
000030  d002              BEQ      |L1.56|
                  |L1.50|
000032  4628              MOV      r0,r5
000034  1c64              ADDS     r4,r4,#1
;;;118                tmp = tmp / 10;
;;;119                len++;
000036  e7f3              B        |L1.32|
                  |L1.56|
000038  2000              MOVS     r0,#0
;;;120            } else
;;;121                break;
;;;122        }
;;;123    
;;;124    
;;;125        /* Extract useful digits */
;;;126        div = 1;
;;;127    
;;;128        /* fill out all characters on display */
;;;129        for (index = (LCD_ZoneInfo[u32Zone].Sub_Zone_Num-1); index >= 0; index--) {
00003a  9002              STR      r0,[sp,#8]
00003c  9806              LDR      r0,[sp,#0x18]
00003e  4929              LDR      r1,|L1.228|
000040  00c0              LSLS     r0,r0,#3
000042  580e              LDR      r6,[r1,r0]
000044  2701              MOVS     r7,#1                 ;119
000046  1e76              SUBS     r6,r6,#1
000048  d449              BMI      |L1.222|
;;;130            num = (value / div) % 10;
;;;131            num += 16;
;;;132    
;;;133            bitpattern = *(Zone_TextDisplay[u32Zone] + num);
00004a  9a06              LDR      r2,[sp,#0x18]
00004c  0092              LSLS     r2,r2,#2
;;;134    
;;;135            for (i = 0; i < LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum; i++) {
;;;136                bit = *(Zone[u32Zone]
00004e  1840              ADDS     r0,r0,r1
000050  9203              STR      r2,[sp,#0xc]
000052  9001              STR      r0,[sp,#4]
                  |L1.84|
000054  463a              MOV      r2,r7                 ;130
000056  9b02              LDR      r3,[sp,#8]            ;130
000058  9909              LDR      r1,[sp,#0x24]         ;130
00005a  9808              LDR      r0,[sp,#0x20]         ;130
00005c  f7fffffe          BL       __aeabi_ldivmod
000060  220a              MOVS     r2,#0xa               ;130
000062  2300              MOVS     r3,#0                 ;130
000064  f7fffffe          BL       __aeabi_ldivmod
000068  2010              MOVS     r0,#0x10              ;131
00006a  1810              ADDS     r0,r2,r0              ;131
00006c  4a1e              LDR      r2,|L1.232|
00006e  9903              LDR      r1,[sp,#0xc]          ;133
000070  0040              LSLS     r0,r0,#1              ;133
000072  5851              LDR      r1,[r2,r1]            ;133
000074  2400              MOVS     r4,#0                 ;133
000076  5a08              LDRH     r0,[r1,r0]            ;133
000078  4625              MOV      r5,r4                 ;133
00007a  9005              STR      r0,[sp,#0x14]         ;135
00007c  e01e              B        |L1.188|
                  |L1.126|
00007e  4a1b              LDR      r2,|L1.236|
000080  9803              LDR      r0,[sp,#0xc]
000082  4371              MULS     r1,r6,r1
000084  5810              LDR      r0,[r2,r0]
000086  004a              LSLS     r2,r1,#1
000088  4684              MOV      r12,r0
00008a  1881              ADDS     r1,r0,r2
00008c  1920              ADDS     r0,r4,r4
00008e  1c43              ADDS     r3,r0,#1
000090  5cc9              LDRB     r1,[r1,r3]
;;;137                        + index*LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum*2
;;;138                        + i*2 + 1);
;;;139                com = *(Zone[u32Zone]
000092  1812              ADDS     r2,r2,r0
000094  4660              MOV      r0,r12
000096  9100              STR      r1,[sp,#0]
000098  5c80              LDRB     r0,[r0,r2]
;;;140                        + index*LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum*2
;;;141                        + i*2 + 0);
;;;142    
;;;143                LCD_SetPixel(com, bit, 0);
00009a  2200              MOVS     r2,#0
00009c  9004              STR      r0,[sp,#0x10]
00009e  f7fffffe          BL       LCD_SetPixel
;;;144    
;;;145                if (bitpattern & (1 << i)) {
0000a2  2001              MOVS     r0,#1
0000a4  9905              LDR      r1,[sp,#0x14]
0000a6  40a0              LSLS     r0,r0,r4
0000a8  4208              TST      r0,r1
0000aa  d004              BEQ      |L1.182|
;;;146                    LCD_SetPixel(com, bit, 1);
0000ac  2201              MOVS     r2,#1
0000ae  9900              LDR      r1,[sp,#0]
0000b0  9804              LDR      r0,[sp,#0x10]
0000b2  f7fffffe          BL       LCD_SetPixel
                  |L1.182|
0000b6  2000              MOVS     r0,#0                 ;135
0000b8  1c64              ADDS     r4,r4,#1              ;135
0000ba  4145              ADCS     r5,r5,r0              ;135
                  |L1.188|
0000bc  9801              LDR      r0,[sp,#4]            ;135
0000be  2200              MOVS     r2,#0                 ;135
0000c0  6841              LDR      r1,[r0,#4]            ;135
0000c2  4628              MOV      r0,r5                 ;135
0000c4  1a63              SUBS     r3,r4,r1              ;135
0000c6  4190              SBCS     r0,r0,r2              ;135
0000c8  dbd9              BLT      |L1.126|
;;;147                }
;;;148            }
;;;149            div = div * 10;
0000ca  220a              MOVS     r2,#0xa
0000cc  2300              MOVS     r3,#0
0000ce  4638              MOV      r0,r7
0000d0  9902              LDR      r1,[sp,#8]
0000d2  f7fffffe          BL       __aeabi_lmul
0000d6  4607              MOV      r7,r0
0000d8  9102              STR      r1,[sp,#8]
0000da  1e76              SUBS     r6,r6,#1
0000dc  d5ba              BPL      |L1.84|
                  |L1.222|
;;;150    
;;;151        }
;;;152    
;;;153    }
0000de  b00b              ADD      sp,sp,#0x2c
0000e0  bdf0              POP      {r4-r7,pc}
;;;154    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L1.228|
                          DCD      LCD_ZoneInfo
                  |L1.232|
                          DCD      Zone_TextDisplay
                  |L1.236|
                          DCD      Zone

                          AREA ||i.LCDLIB_Printf||, CODE, READONLY, ALIGN=2

                  LCDLIB_Printf PROC
;;;50      */
;;;51     void LCDLIB_Printf(uint32_t  u32Zone, char *string)
000000  b5f0              PUSH     {r4-r7,lr}
;;;52     {
000002  4604              MOV      r4,r0
000004  b087              SUB      sp,sp,#0x1c
000006  460e              MOV      r6,r1
;;;53         int      data, length, index;
;;;54         uint16_t bitfield;
;;;55         uint32_t com, bit;
;;;56         int      i;
;;;57     
;;;58         length = strlen(string);
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       strlen
;;;59         index  = 0;
;;;60     
;;;61         /* fill out all characters on display */
;;;62         for (index = 0; index < LCD_ZoneInfo[u32Zone].Sub_Zone_Num; index++) {
;;;63             if (index < length) {
;;;64                 data = (int) *string;
;;;65             } else {       /* padding with space */
;;;66                 data = 0x20; /* SPACE */
;;;67             }
;;;68             /* defined letters currently starts at "SPACE" - 0x20; */
;;;69             data     = data - 0x20;
;;;70             bitfield = *(Zone_TextDisplay[u32Zone] + data);
;;;71     
;;;72             for (i = 0; i < LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum; i++) {
;;;73                 bit = *(Zone[u32Zone]
00000e  9005              STR      r0,[sp,#0x14]
000010  491f              LDR      r1,|L2.144|
000012  00e0              LSLS     r0,r4,#3
000014  2500              MOVS     r5,#0                 ;59
000016  00a7              LSLS     r7,r4,#2              ;70
000018  9003              STR      r0,[sp,#0xc]
00001a  1840              ADDS     r0,r0,r1
00001c  9002              STR      r0,[sp,#8]            ;62
00001e  e030              B        |L2.130|
                  |L2.32|
000020  9805              LDR      r0,[sp,#0x14]         ;63
000022  4285              CMP      r5,r0                 ;63
000024  da01              BGE      |L2.42|
000026  7830              LDRB     r0,[r6,#0]            ;64
000028  e000              B        |L2.44|
                  |L2.42|
00002a  2020              MOVS     r0,#0x20              ;66
                  |L2.44|
00002c  4919              LDR      r1,|L2.148|
;;;74                         + index*LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum*2
;;;75                         + i*2 + 1);
;;;76     
;;;77                 com = *(Zone[u32Zone]
;;;78                         + index*LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum*2
;;;79                         + i*2 + 0);
;;;80     
;;;81                 LCD_SetPixel(com, bit, 0);
;;;82     
;;;83                 if (bitfield & (1 << i)) {
;;;84                     /* Turn on segment */
;;;85                     LCD_SetPixel(com, bit, 1);
;;;86                 }
;;;87             }
;;;88             string++;
;;;89         }
;;;90     
;;;91     }
00002e  0040              LSLS     r0,r0,#1
000030  59c9              LDR      r1,[r1,r7]            ;70
000032  3840              SUBS     r0,r0,#0x40
000034  5a08              LDRH     r0,[r1,r0]            ;70
000036  2400              MOVS     r4,#0                 ;72
000038  9004              STR      r0,[sp,#0x10]         ;72
00003a  e01c              B        |L2.118|
                  |L2.60|
00003c  4816              LDR      r0,|L2.152|
00003e  4369              MULS     r1,r5,r1              ;73
000040  59c0              LDR      r0,[r0,r7]            ;73
000042  0049              LSLS     r1,r1,#1              ;73
000044  4684              MOV      r12,r0                ;73
000046  1843              ADDS     r3,r0,r1              ;73
000048  0060              LSLS     r0,r4,#1              ;73
00004a  1c42              ADDS     r2,r0,#1              ;73
00004c  5c9a              LDRB     r2,[r3,r2]            ;73
00004e  1809              ADDS     r1,r1,r0              ;77
000050  9200              STR      r2,[sp,#0]            ;77
000052  4660              MOV      r0,r12                ;77
000054  5c40              LDRB     r0,[r0,r1]            ;77
000056  2200              MOVS     r2,#0                 ;81
000058  9001              STR      r0,[sp,#4]            ;81
00005a  9900              LDR      r1,[sp,#0]            ;81
00005c  f7fffffe          BL       LCD_SetPixel
000060  2001              MOVS     r0,#1                 ;83
000062  9904              LDR      r1,[sp,#0x10]         ;83
000064  40a0              LSLS     r0,r0,r4              ;83
000066  4208              TST      r0,r1                 ;83
000068  d004              BEQ      |L2.116|
00006a  2201              MOVS     r2,#1                 ;85
00006c  9900              LDR      r1,[sp,#0]            ;85
00006e  9801              LDR      r0,[sp,#4]            ;85
000070  f7fffffe          BL       LCD_SetPixel
                  |L2.116|
000074  1c64              ADDS     r4,r4,#1              ;85
                  |L2.118|
000076  9802              LDR      r0,[sp,#8]            ;72
000078  6841              LDR      r1,[r0,#4]            ;72
00007a  42a1              CMP      r1,r4                 ;72
00007c  d8de              BHI      |L2.60|
00007e  1c6d              ADDS     r5,r5,#1              ;72
000080  1c76              ADDS     r6,r6,#1              ;72
                  |L2.130|
000082  4803              LDR      r0,|L2.144|
000084  9903              LDR      r1,[sp,#0xc]          ;62
000086  5840              LDR      r0,[r0,r1]            ;62
000088  42a8              CMP      r0,r5                 ;62
00008a  d8c9              BHI      |L2.32|
00008c  b007              ADD      sp,sp,#0x1c
00008e  bdf0              POP      {r4-r7,pc}
;;;92     
                          ENDP

                  |L2.144|
                          DCD      LCD_ZoneInfo
                  |L2.148|
                          DCD      Zone_TextDisplay
                  |L2.152|
                          DCD      Zone

                          AREA ||i.LCDLIB_PutChar||, CODE, READONLY, ALIGN=2

                  LCDLIB_PutChar PROC
;;;166     */
;;;167    void LCDLIB_PutChar(uint32_t u32Zone, uint32_t u32Index, uint8_t u8Ch)
000000  b5fe              PUSH     {r1-r7,lr}
;;;168    {
;;;169        int      data, index;
;;;170        uint16_t bitfield;
;;;171        uint32_t com, bit;
;;;172        int      i;
;;;173    
;;;174        index  = u32Index;
;;;175    
;;;176        data = u8Ch;
;;;177    
;;;178        if(u32Index > LCD_ZoneInfo[u32Zone].Sub_Zone_Num) return;
000002  4b19              LDR      r3,|L3.104|
000004  00c4              LSLS     r4,r0,#3
000006  591b              LDR      r3,[r3,r4]
000008  460d              MOV      r5,r1                 ;174
00000a  42ab              CMP      r3,r5
00000c  d32b              BCC      |L3.102|
;;;179    
;;;180        /* defined letters currently starts at "SPACE" - 0x20; */
;;;181        data     = data - 0x20;
;;;182        bitfield = *(Zone_TextDisplay[u32Zone] + data);
00000e  0081              LSLS     r1,r0,#2
000010  4b16              LDR      r3,|L3.108|
000012  9101              STR      r1,[sp,#4]
000014  585b              LDR      r3,[r3,r1]
;;;183    
;;;184        for (i = 0; i < LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum; i++) {
;;;185            bit = *(Zone[u32Zone]
;;;186                    + index*LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum*2
;;;187                    + i*2 + 1);
;;;188    
;;;189            com = *(Zone[u32Zone]
;;;190                    + index*LCD_ZoneInfo[u32Zone].Zone_Digit_SegNum*2
;;;191                    + i*2 + 0);
;;;192    
;;;193            LCD_SetPixel(com, bit, 0);
;;;194    
;;;195            if (bitfield & (1 << i)) {
;;;196                /* Turn on segment */
;;;197                LCD_SetPixel(com, bit, 1);
;;;198            }
;;;199        }
;;;200    
;;;201    }
000016  0051              LSLS     r1,r2,#1
000018  3940              SUBS     r1,r1,#0x40
00001a  5a59              LDRH     r1,[r3,r1]            ;182
00001c  9102              STR      r1,[sp,#8]            ;178
00001e  4912              LDR      r1,|L3.104|
000020  2400              MOVS     r4,#0                 ;184
000022  00c0              LSLS     r0,r0,#3              ;178
000024  1846              ADDS     r6,r0,r1              ;185
000026  e01b              B        |L3.96|
                  |L3.40|
000028  4a11              LDR      r2,|L3.112|
00002a  9901              LDR      r1,[sp,#4]            ;185
00002c  4368              MULS     r0,r5,r0              ;185
00002e  5851              LDR      r1,[r2,r1]            ;185
000030  0042              LSLS     r2,r0,#1              ;185
000032  0060              LSLS     r0,r4,#1              ;185
000034  1c47              ADDS     r7,r0,#1              ;185
000036  188b              ADDS     r3,r1,r2              ;185
000038  5ddb              LDRB     r3,[r3,r7]            ;185
00003a  1810              ADDS     r0,r2,r0              ;189
00003c  9300              STR      r3,[sp,#0]            ;189
00003e  5c0f              LDRB     r7,[r1,r0]            ;189
000040  2200              MOVS     r2,#0                 ;193
000042  4619              MOV      r1,r3                 ;193
000044  4638              MOV      r0,r7                 ;193
000046  f7fffffe          BL       LCD_SetPixel
00004a  2001              MOVS     r0,#1                 ;195
00004c  9902              LDR      r1,[sp,#8]            ;195
00004e  40a0              LSLS     r0,r0,r4              ;195
000050  4208              TST      r0,r1                 ;195
000052  d004              BEQ      |L3.94|
000054  2201              MOVS     r2,#1                 ;197
000056  4638              MOV      r0,r7                 ;197
000058  9900              LDR      r1,[sp,#0]            ;197
00005a  f7fffffe          BL       LCD_SetPixel
                  |L3.94|
00005e  1c64              ADDS     r4,r4,#1              ;197
                  |L3.96|
000060  6870              LDR      r0,[r6,#4]            ;184
000062  42a0              CMP      r0,r4                 ;184
000064  d8e0              BHI      |L3.40|
                  |L3.102|
000066  bdfe              POP      {r1-r7,pc}
;;;202    
                          ENDP

                  |L3.104|
                          DCD      LCD_ZoneInfo
                  |L3.108|
                          DCD      Zone_TextDisplay
                  |L3.112|
                          DCD      Zone

                          AREA ||i.LCDLIB_SetSymbol||, CODE, READONLY, ALIGN=2

                  LCDLIB_SetSymbol PROC
;;;213     */
;;;214    void LCDLIB_SetSymbol(uint32_t u32Zone, uint32_t u32Index, uint32_t u32OnOff)
000000  0083              LSLS     r3,r0,#2
;;;215    {
000002  b510              PUSH     {r4,lr}
;;;216        uint32_t com, bit;
;;;217    
;;;218        bit = *(Zone[u32Zone] + u32Index*2 + 1);
000004  4805              LDR      r0,|L4.28|
000006  58c3              LDR      r3,[r0,r3]
000008  0048              LSLS     r0,r1,#1
00000a  1c41              ADDS     r1,r0,#1
00000c  5c59              LDRB     r1,[r3,r1]
;;;219    
;;;220        com = *(Zone[u32Zone] + u32Index*2 + 0);
00000e  5c18              LDRB     r0,[r3,r0]
;;;221    
;;;222        if (u32OnOff)
000010  2a00              CMP      r2,#0
000012  d000              BEQ      |L4.22|
;;;223            LCD_SetPixel(com, bit, 1); /* Turn on segment */
000014  2201              MOVS     r2,#1
                  |L4.22|
000016  f7fffffe          BL       LCD_SetPixel
;;;224        else
;;;225            LCD_SetPixel(com, bit, 0); /* Turn off segment */
;;;226    
;;;227    }
00001a  bd10              POP      {r4,pc}
;;;228    
                          ENDP

                  |L4.28|
                          DCD      Zone

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\LCDLib\\Source\\LCDLIB.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_LCDLIB_c_25c4f267____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_LCDLIB_c_25c4f267____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_LCDLIB_c_25c4f267____REVSH|
#line 402
|__asm___8_LCDLIB_c_25c4f267____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
