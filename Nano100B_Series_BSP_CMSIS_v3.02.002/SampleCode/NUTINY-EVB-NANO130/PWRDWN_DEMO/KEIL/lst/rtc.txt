; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\rtc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\rtc.d --feedback=.\obj\PWRDWN_DEMO.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\LCDLib\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\rtc.crf ..\..\..\..\Library\StdDriver\src\rtc.c]
                          THUMB

                          AREA ||i.RTC_32KCalibration||, CODE, READONLY, ALIGN=2

                  RTC_32KCalibration PROC
;;;56      */
;;;57     void RTC_32KCalibration(int32_t i32FrequencyX100)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59         int32_t i32RegInt,i32RegFra ;
;;;60     
;;;61         /* Compute Integer and Fraction for RTC register*/
;;;62         i32RegInt = (i32FrequencyX100/100) - RTC_FCR_REFERENCE;
000002  2164              MOVS     r1,#0x64
000004  f7fffffe          BL       __aeabi_idivmod
000008  4a0c              LDR      r2,|L1.60|
00000a  1884              ADDS     r4,r0,r2
;;;63         i32RegFra = (((i32FrequencyX100%100)) * 60) / 100;
00000c  203c              MOVS     r0,#0x3c
00000e  4348              MULS     r0,r1,r0
000010  2164              MOVS     r1,#0x64
000012  f7fffffe          BL       __aeabi_idivmod
;;;64     
;;;65         /* Judge Integer part is reasonable */
;;;66         if ( (i32RegInt < 0) | (i32RegInt > 15) ) {
000016  0fe2              LSRS     r2,r4,#31
000018  2c0f              CMP      r4,#0xf
00001a  dd01              BLE      |L1.32|
00001c  2101              MOVS     r1,#1
00001e  e000              B        |L1.34|
                  |L1.32|
000020  2100              MOVS     r1,#0
                  |L1.34|
000022  430a              ORRS     r2,r2,r1
000024  d108              BNE      |L1.56|
;;;67             return;
;;;68         }
;;;69     
;;;70         RTC->AER = RTC_WRITE_KEY;
000026  4907              LDR      r1,|L1.68|
000028  4a05              LDR      r2,|L1.64|
00002a  604a              STR      r2,[r1,#4]
                  |L1.44|
;;;71         while(!(RTC->AER & RTC_AER_ENF_Msk));
00002c  684a              LDR      r2,[r1,#4]
00002e  03d2              LSLS     r2,r2,#15
000030  d5fc              BPL      |L1.44|
;;;72     
;;;73         RTC->FCR = (uint32_t)((i32RegInt<<8) | i32RegFra);
000032  0222              LSLS     r2,r4,#8
000034  4302              ORRS     r2,r2,r0
000036  608a              STR      r2,[r1,#8]
                  |L1.56|
;;;74     
;;;75     }
000038  bd10              POP      {r4,pc}
;;;76     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0xffff8007
                  |L1.64|
                          DCD      0x0000a965
                  |L1.68|
                          DCD      0x40008000

                          AREA ||i.RTC_Close||, CODE, READONLY, ALIGN=2

                  RTC_Close PROC
;;;791     */
;;;792    void RTC_Close (void)
000000  4802              LDR      r0,|L2.12|
;;;793    {
;;;794        CLK->APBCLK  &= ~CLK_APBCLK_RTC_EN_Msk;
000002  6881              LDR      r1,[r0,#8]
000004  2202              MOVS     r2,#2
000006  4391              BICS     r1,r1,r2
000008  6081              STR      r1,[r0,#8]
;;;795    }
00000a  4770              BX       lr
;;;796    
                          ENDP

                  |L2.12|
                          DCD      0x50000200

                          AREA ||i.RTC_DisableInt||, CODE, READONLY, ALIGN=2

                  RTC_DisableInt PROC
;;;764     */
;;;765    void RTC_DisableInt(uint32_t u32IntFlagMask)
000000  4a0e              LDR      r2,|L3.60|
;;;766    {
;;;767        RTC->AER = RTC_WRITE_KEY;
000002  490f              LDR      r1,|L3.64|
                  |L3.4|
;;;768        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  604a              STR      r2,[r1,#4]
000006  684b              LDR      r3,[r1,#4]
000008  03db              LSLS     r3,r3,#15
00000a  d5fb              BPL      |L3.4|
;;;769    
;;;770        if(u32IntFlagMask & RTC_RIER_TIER_Msk) {
00000c  0782              LSLS     r2,r0,#30
00000e  d504              BPL      |L3.26|
;;;771            RTC->RIER &= ~RTC_RIER_TIER_Msk;
000010  6a8b              LDR      r3,[r1,#0x28]
000012  2202              MOVS     r2,#2
000014  4393              BICS     r3,r3,r2
000016  628b              STR      r3,[r1,#0x28]
;;;772            RTC->RIIR = RTC_RIIR_TIF_Msk;
000018  62ca              STR      r2,[r1,#0x2c]
                  |L3.26|
;;;773        }
;;;774    
;;;775        if(u32IntFlagMask & RTC_RIER_AIER_Msk) {
00001a  07c2              LSLS     r2,r0,#31
00001c  d005              BEQ      |L3.42|
;;;776            RTC->RIER &= ~RTC_RIER_AIER_Msk;
00001e  6a8a              LDR      r2,[r1,#0x28]
000020  0852              LSRS     r2,r2,#1
000022  0052              LSLS     r2,r2,#1
000024  628a              STR      r2,[r1,#0x28]
;;;777            RTC->RIIR = RTC_RIIR_AIF_Msk;
000026  2201              MOVS     r2,#1
000028  62ca              STR      r2,[r1,#0x2c]
                  |L3.42|
;;;778        }
;;;779    
;;;780        if(u32IntFlagMask & RTC_RIER_SNOOPIER_Msk) {
00002a  0740              LSLS     r0,r0,#29
00002c  d504              BPL      |L3.56|
;;;781            RTC->RIER &= ~RTC_RIER_SNOOPIER_Msk;
00002e  6a8a              LDR      r2,[r1,#0x28]
000030  2004              MOVS     r0,#4
000032  4382              BICS     r2,r2,r0
000034  628a              STR      r2,[r1,#0x28]
;;;782            RTC->RIIR = RTC_RIIR_SNOOPIF_Msk;
000036  62c8              STR      r0,[r1,#0x2c]
                  |L3.56|
;;;783        }
;;;784    }
000038  4770              BX       lr
;;;785    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      0x0000a965
                  |L3.64|
                          DCD      0x40008000

                          AREA ||i.RTC_DisableTamperDetection||, CODE, READONLY, ALIGN=2

                  RTC_DisableTamperDetection PROC
;;;686     */
;;;687    void RTC_DisableTamperDetection(void)
000000  4905              LDR      r1,|L4.24|
;;;688    {
;;;689        RTC->AER = RTC_WRITE_KEY;
000002  4806              LDR      r0,|L4.28|
                  |L4.4|
;;;690        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  6041              STR      r1,[r0,#4]
000006  6842              LDR      r2,[r0,#4]
000008  03d2              LSLS     r2,r2,#15
00000a  d5fb              BPL      |L4.4|
;;;691    
;;;692        RTC->SPRCTL &= ~RTC_SPRCTL_SNOOPEN_Msk;
00000c  6bc1              LDR      r1,[r0,#0x3c]
00000e  0849              LSRS     r1,r1,#1
000010  0049              LSLS     r1,r1,#1
000012  63c1              STR      r1,[r0,#0x3c]
;;;693    }
000014  4770              BX       lr
;;;694    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x0000a965
                  |L4.28|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableInt||, CODE, READONLY, ALIGN=2

                  RTC_EnableInt PROC
;;;745     */
;;;746    void RTC_EnableInt(uint32_t u32IntFlagMask)
000000  4a04              LDR      r2,|L5.20|
;;;747    {
;;;748        RTC->AER = RTC_WRITE_KEY;
000002  4905              LDR      r1,|L5.24|
                  |L5.4|
;;;749        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  604a              STR      r2,[r1,#4]
000006  684b              LDR      r3,[r1,#4]
000008  03db              LSLS     r3,r3,#15
00000a  d5fb              BPL      |L5.4|
;;;750    
;;;751        RTC->RIER |= u32IntFlagMask;
00000c  6a8a              LDR      r2,[r1,#0x28]
00000e  4302              ORRS     r2,r2,r0
000010  628a              STR      r2,[r1,#0x28]
;;;752    }
000012  4770              BX       lr
;;;753    
                          ENDP

                  |L5.20|
                          DCD      0x0000a965
                  |L5.24|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableTamperDetection||, CODE, READONLY, ALIGN=2

                  RTC_EnableTamperDetection PROC
;;;660     */
;;;661    void RTC_EnableTamperDetection(uint32_t u32PinCondition)
000000  4a0c              LDR      r2,|L6.52|
;;;662    {
;;;663        RTC->AER = RTC_WRITE_KEY;
000002  490d              LDR      r1,|L6.56|
                  |L6.4|
;;;664        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  604a              STR      r2,[r1,#4]
000006  684b              LDR      r3,[r1,#4]
000008  03db              LSLS     r3,r3,#15
00000a  d5fb              BPL      |L6.4|
;;;665    
;;;666        /* detection edge select */
;;;667        if(u32PinCondition)
;;;668            RTC->SPRCTL |= RTC_SPRCTL_SNOOPEDGE_Msk;
00000c  2302              MOVS     r3,#2
00000e  2800              CMP      r0,#0                 ;667
;;;669        else
;;;670            RTC->SPRCTL &= ~RTC_SPRCTL_SNOOPEDGE_Msk;
000010  6bca              LDR      r2,[r1,#0x3c]
000012  4608              MOV      r0,r1
000014  d001              BEQ      |L6.26|
000016  431a              ORRS     r2,r2,r3              ;668
000018  e000              B        |L6.28|
                  |L6.26|
00001a  439a              BICS     r2,r2,r3
                  |L6.28|
00001c  63c2              STR      r2,[r0,#0x3c]         ;668
                  |L6.30|
;;;671    
;;;672        while(!(RTC->SPRCTL & RTC_SPRCTL_SPRRDY_Msk));
00001e  6bc8              LDR      r0,[r1,#0x3c]
000020  0600              LSLS     r0,r0,#24
000022  d5fc              BPL      |L6.30|
;;;673    
;;;674        /* enable snooper pin event detection */
;;;675        RTC->SPRCTL |= RTC_SPRCTL_SNOOPEN_Msk;
000024  6bc8              LDR      r0,[r1,#0x3c]
000026  2201              MOVS     r2,#1
000028  4310              ORRS     r0,r0,r2
00002a  63c8              STR      r0,[r1,#0x3c]
                  |L6.44|
;;;676        while(!(RTC->SPRCTL & RTC_SPRCTL_SPRRDY_Msk));
00002c  6bc8              LDR      r0,[r1,#0x3c]
00002e  0600              LSLS     r0,r0,#24
000030  d5fc              BPL      |L6.44|
;;;677    }
000032  4770              BX       lr
;;;678    
                          ENDP

                  |L6.52|
                          DCD      0x0000a965
                  |L6.56|
                          DCD      0x40008000

                          AREA ||i.RTC_GetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetAlarmDateAndTime PROC
;;;277     */
;;;278    void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b530              PUSH     {r4,r5,lr}
;;;279    {
;;;280        uint32_t u32Tmp;
;;;281    
;;;282        sPt->u32TimeScale = RTC->TSSR & RTC_TSSR_24H_12H_Msk;  /* 12/24-hour */
000002  4a3e              LDR      r2,|L7.252|
000004  6951              LDR      r1,[r2,#0x14]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;283        sPt->u32DayOfWeek = RTC->DWR & RTC_DWR_DWR_Msk;        /* Day of week */
00000a  61c1              STR      r1,[r0,#0x1c]
00000c  6991              LDR      r1,[r2,#0x18]
;;;284    
;;;285        RTC->AER = RTC_WRITE_KEY;
00000e  4c3c              LDR      r4,|L7.256|
000010  0749              LSLS     r1,r1,#29             ;283
000012  0f49              LSRS     r1,r1,#29             ;283
000014  60c1              STR      r1,[r0,#0xc]
000016  6054              STR      r4,[r2,#4]
                  |L7.24|
;;;286        while(!(RTC->AER & RTC_AER_ENF_Msk));
000018  6851              LDR      r1,[r2,#4]
00001a  03c9              LSLS     r1,r1,#15
00001c  d5fc              BPL      |L7.24|
;;;287    
;;;288        g_u32hiYear  = (RTC->CAR & RTC_CAR_10YEAR_Msk) >> RTC_CAR_10YEAR_Pos;
00001e  6a11              LDR      r1,[r2,#0x20]
;;;289        g_u32loYear  = (RTC->CAR & RTC_CAR_1YEAR_Msk)  >> RTC_CAR_1YEAR_Pos;
;;;290        g_u32hiMonth = (RTC->CAR & RTC_CAR_10MON_Msk)  >> RTC_CAR_10MON_Pos;
;;;291        g_u32loMonth = (RTC->CAR & RTC_CAR_1MON_Msk)   >> RTC_CAR_1MON_Pos;
;;;292        g_u32hiDay   = (RTC->CAR & RTC_CAR_10DAY_Msk)  >> RTC_CAR_10DAY_Pos;
;;;293        g_u32loDay   = (RTC->CAR & RTC_CAR_1DAY_Msk);
;;;294    
;;;295        RTC->AER = RTC_WRITE_KEY;
;;;296        while(!(RTC->AER & RTC_AER_ENF_Msk));
;;;297    
;;;298        g_u32hiHour =  (RTC->TAR & RTC_TAR_10HR_Msk)  >> RTC_TAR_10HR_Pos;
;;;299        g_u32loHour =  (RTC->TAR & RTC_TAR_1HR_Msk)   >> RTC_TAR_1HR_Pos;
;;;300        g_u32hiMin    =  (RTC->TAR & RTC_TAR_10MIN_Msk) >> RTC_TAR_10MIN_Pos;
;;;301        g_u32loMin    =  (RTC->TAR & RTC_TAR_1MIN_Msk)  >> RTC_TAR_1MIN_Pos;
;;;302        g_u32hiSec    =  (RTC->TAR & RTC_TAR_10SEC_Msk) >> RTC_TAR_10SEC_Pos;
;;;303        g_u32loSec    =  (RTC->TAR & RTC_TAR_1SEC_Msk);
;;;304    
;;;305        u32Tmp  = (g_u32hiYear * 10);                                    /* Compute to 20XX year */
;;;306        u32Tmp += g_u32loYear;
;;;307        sPt->u32Year = u32Tmp + RTC_YEAR2000;
;;;308    
;;;309        u32Tmp = (g_u32hiMonth * 10);                                    /* Compute 0~12 month */
;;;310        sPt->u32Month = u32Tmp + g_u32loMonth;
;;;311    
;;;312        u32Tmp = (g_u32hiDay * 10);                                        /* Compute 0~31 day */
;;;313        sPt->u32Day = u32Tmp + g_u32loDay;
;;;314    
;;;315        if (sPt->u32TimeScale == RTC_CLOCK_12) {                /* Compute12/24 hour */
;;;316            u32Tmp  = (g_u32hiHour * 10);
;;;317            u32Tmp += g_u32loHour;
;;;318            sPt->u32Hour = u32Tmp;                                        /* AM: 1~12. PM: 21~32. */
;;;319    
;;;320            if (sPt->u32Hour >= 21) {
;;;321                sPt->u32AmPm  = RTC_PM;
;;;322                sPt->u32Hour -= 20;
;;;323            } else {
;;;324                sPt->u32AmPm = RTC_AM;
;;;325            }
;;;326    
;;;327            u32Tmp  = (g_u32hiMin * 10);
;;;328            u32Tmp += g_u32loMin;
;;;329            sPt->u32Minute = u32Tmp;
;;;330    
;;;331            u32Tmp  = (g_u32hiSec * 10);
;;;332            u32Tmp += g_u32loSec;
;;;333            sPt->u32Second = u32Tmp;
;;;334    
;;;335        } else {
;;;336            u32Tmp  = (g_u32hiHour * 10);
;;;337            u32Tmp +=  g_u32loHour;
;;;338            sPt->u32Hour = u32Tmp;
;;;339    
;;;340            u32Tmp = (g_u32hiMin * 10);
;;;341            u32Tmp+= g_u32loMin;
;;;342            sPt->u32Minute = u32Tmp;
;;;343    
;;;344            u32Tmp  = (g_u32hiSec * 10);
;;;345            u32Tmp += g_u32loSec;
;;;346            sPt->u32Second = u32Tmp;
;;;347        }
;;;348    
;;;349    }
000020  0209              LSLS     r1,r1,#8
000022  0f0b              LSRS     r3,r1,#28
000024  4937              LDR      r1,|L7.260|
000026  604b              STR      r3,[r1,#4]            ;288  ; g_u32hiYear
000028  6a13              LDR      r3,[r2,#0x20]         ;289
00002a  031b              LSLS     r3,r3,#12
00002c  0f1b              LSRS     r3,r3,#28
00002e  608b              STR      r3,[r1,#8]            ;289  ; g_u32loYear
000030  6a13              LDR      r3,[r2,#0x20]         ;290
000032  2501              MOVS     r5,#1
000034  04db              LSLS     r3,r3,#19
000036  0fdb              LSRS     r3,r3,#31
000038  60cb              STR      r3,[r1,#0xc]          ;290  ; g_u32hiMonth
00003a  6a13              LDR      r3,[r2,#0x20]         ;291
00003c  051b              LSLS     r3,r3,#20
00003e  0f1b              LSRS     r3,r3,#28
000040  610b              STR      r3,[r1,#0x10]         ;291  ; g_u32loMonth
000042  6a13              LDR      r3,[r2,#0x20]         ;292
000044  069b              LSLS     r3,r3,#26
000046  0f9b              LSRS     r3,r3,#30
000048  614b              STR      r3,[r1,#0x14]         ;292  ; g_u32hiDay
00004a  6a13              LDR      r3,[r2,#0x20]         ;293
00004c  071b              LSLS     r3,r3,#28             ;293
00004e  0f1b              LSRS     r3,r3,#28             ;293
000050  618b              STR      r3,[r1,#0x18]         ;293  ; g_u32loDay
000052  6054              STR      r4,[r2,#4]            ;295
                  |L7.84|
000054  6853              LDR      r3,[r2,#4]            ;296
000056  03db              LSLS     r3,r3,#15             ;296
000058  d5fc              BPL      |L7.84|
00005a  69d3              LDR      r3,[r2,#0x1c]         ;298
00005c  029b              LSLS     r3,r3,#10
00005e  0f9b              LSRS     r3,r3,#30
000060  61cb              STR      r3,[r1,#0x1c]         ;298  ; g_u32hiHour
000062  69d3              LDR      r3,[r2,#0x1c]         ;299
000064  031b              LSLS     r3,r3,#12
000066  0f1b              LSRS     r3,r3,#28
000068  620b              STR      r3,[r1,#0x20]         ;299  ; g_u32loHour
00006a  69d3              LDR      r3,[r2,#0x1c]         ;300
00006c  045b              LSLS     r3,r3,#17
00006e  0f5b              LSRS     r3,r3,#29
000070  624b              STR      r3,[r1,#0x24]         ;300  ; g_u32hiMin
000072  69d3              LDR      r3,[r2,#0x1c]         ;301
000074  051b              LSLS     r3,r3,#20
000076  0f1b              LSRS     r3,r3,#28
000078  628b              STR      r3,[r1,#0x28]         ;301  ; g_u32loMin
00007a  69d3              LDR      r3,[r2,#0x1c]         ;302
00007c  065b              LSLS     r3,r3,#25
00007e  0f5b              LSRS     r3,r3,#29
000080  62cb              STR      r3,[r1,#0x2c]         ;302  ; g_u32hiSec
000082  69d2              LDR      r2,[r2,#0x1c]         ;303
000084  0712              LSLS     r2,r2,#28             ;303
000086  0f12              LSRS     r2,r2,#28             ;303
000088  630a              STR      r2,[r1,#0x30]         ;303  ; g_u32loSec
00008a  684a              LDR      r2,[r1,#4]            ;305  ; g_u32hiYear
00008c  230a              MOVS     r3,#0xa               ;305
00008e  435a              MULS     r2,r3,r2              ;305
000090  688b              LDR      r3,[r1,#8]            ;306  ; g_u32loYear
000092  18d2              ADDS     r2,r2,r3              ;306
000094  237d              MOVS     r3,#0x7d              ;307
000096  011b              LSLS     r3,r3,#4              ;307
000098  18d2              ADDS     r2,r2,r3              ;307
00009a  6002              STR      r2,[r0,#0]            ;309
00009c  68ca              LDR      r2,[r1,#0xc]          ;309  ; g_u32hiMonth
00009e  230a              MOVS     r3,#0xa               ;309
0000a0  435a              MULS     r2,r3,r2              ;309
0000a2  690b              LDR      r3,[r1,#0x10]         ;310  ; g_u32loMonth
0000a4  18d2              ADDS     r2,r2,r3              ;310
0000a6  6042              STR      r2,[r0,#4]            ;312
0000a8  694a              LDR      r2,[r1,#0x14]         ;312  ; g_u32hiDay
0000aa  230a              MOVS     r3,#0xa               ;312
0000ac  435a              MULS     r2,r3,r2              ;312
0000ae  698b              LDR      r3,[r1,#0x18]         ;313  ; g_u32loDay
0000b0  18d2              ADDS     r2,r2,r3              ;313
0000b2  6082              STR      r2,[r0,#8]            ;315
0000b4  69c2              LDR      r2,[r0,#0x1c]         ;315
0000b6  2a00              CMP      r2,#0                 ;315
0000b8  69ca              LDR      r2,[r1,#0x1c]         ;336  ; g_u32hiHour
0000ba  d004              BEQ      |L7.198|
0000bc  230a              MOVS     r3,#0xa               ;336
0000be  435a              MULS     r2,r3,r2              ;336
0000c0  6a0b              LDR      r3,[r1,#0x20]         ;337  ; g_u32loHour
0000c2  18d2              ADDS     r2,r2,r3              ;337
0000c4  e009              B        |L7.218|
                  |L7.198|
0000c6  230a              MOVS     r3,#0xa               ;316
0000c8  435a              MULS     r2,r3,r2              ;316
0000ca  6a0b              LDR      r3,[r1,#0x20]         ;317  ; g_u32loHour
0000cc  18d2              ADDS     r2,r2,r3              ;317
0000ce  6102              STR      r2,[r0,#0x10]         ;320
0000d0  2a15              CMP      r2,#0x15              ;320
0000d2  d304              BCC      |L7.222|
0000d4  2302              MOVS     r3,#2                 ;321
0000d6  3a14              SUBS     r2,r2,#0x14           ;321
0000d8  6203              STR      r3,[r0,#0x20]         ;321
                  |L7.218|
0000da  6102              STR      r2,[r0,#0x10]         ;338
0000dc  e000              B        |L7.224|
                  |L7.222|
0000de  6205              STR      r5,[r0,#0x20]         ;324
                  |L7.224|
0000e0  6a4a              LDR      r2,[r1,#0x24]         ;327  ; g_u32hiMin
0000e2  230a              MOVS     r3,#0xa               ;327
0000e4  435a              MULS     r2,r3,r2              ;327
0000e6  6a8b              LDR      r3,[r1,#0x28]         ;328  ; g_u32loMin
0000e8  18d2              ADDS     r2,r2,r3              ;328
0000ea  6142              STR      r2,[r0,#0x14]         ;331
0000ec  6aca              LDR      r2,[r1,#0x2c]         ;331  ; g_u32hiSec
0000ee  230a              MOVS     r3,#0xa               ;331
0000f0  6b09              LDR      r1,[r1,#0x30]         ;332  ; g_u32loSec
0000f2  435a              MULS     r2,r3,r2              ;331
0000f4  1851              ADDS     r1,r2,r1              ;332
0000f6  6181              STR      r1,[r0,#0x18]         ;333
0000f8  bd30              POP      {r4,r5,pc}
;;;350    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L7.252|
                          DCD      0x40008000
                  |L7.256|
                          DCD      0x0000a965
                  |L7.260|
                          DCD      ||.data||

                          AREA ||i.RTC_GetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetDateAndTime PROC
;;;190     */
;;;191    void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b530              PUSH     {r4,r5,lr}
;;;192    {
;;;193        uint32_t u32Tmp;
;;;194    
;;;195        sPt->u32TimeScale = RTC->TSSR & RTC_TSSR_24H_12H_Msk;    /* 12/24-hour */
000002  4a39              LDR      r2,|L8.232|
000004  6951              LDR      r1,[r2,#0x14]
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
;;;196        sPt->u32DayOfWeek = RTC->DWR & RTC_DWR_DWR_Msk;          /* Day of week */
00000a  61c3              STR      r3,[r0,#0x1c]
00000c  6991              LDR      r1,[r2,#0x18]
00000e  0749              LSLS     r1,r1,#29
000010  0f49              LSRS     r1,r1,#29
;;;197    
;;;198        g_u32hiYear  = (RTC->CLR & RTC_CLR_10YEAR_Msk) >> RTC_CLR_10YEAR_Pos;
000012  60c1              STR      r1,[r0,#0xc]
000014  6911              LDR      r1,[r2,#0x10]
;;;199        g_u32loYear  = (RTC->CLR & RTC_CLR_1YEAR_Msk) >> RTC_CLR_1YEAR_Pos;
;;;200        g_u32hiMonth = (RTC->CLR & RTC_CLR_10MON_Msk) >> RTC_CLR_10MON_Pos;
;;;201        g_u32loMonth = (RTC->CLR & RTC_CLR_1MON_Msk) >> RTC_CLR_1MON_Pos;
;;;202        g_u32hiDay   = (RTC->CLR & RTC_CLR_10DAY_Msk) >> RTC_CLR_10DAY_Pos;
;;;203        g_u32loDay   = (RTC->CLR & RTC_CLR_1DAY_Msk);
;;;204    
;;;205        g_u32hiHour =  (RTC->TLR & RTC_TLR_10HR_Msk) >> RTC_TLR_10HR_Pos;
;;;206        g_u32loHour =  (RTC->TLR & RTC_TLR_1HR_Msk) >> RTC_TLR_1HR_Pos;
;;;207        g_u32hiMin  =  (RTC->TLR & RTC_TLR_10MIN_Msk) >> RTC_TLR_10MIN_Pos;
;;;208        g_u32loMin  =  (RTC->TLR & RTC_TLR_1MIN_Msk) >> RTC_TLR_1MIN_Pos;
;;;209        g_u32hiSec  =  (RTC->TLR & RTC_TLR_10SEC_Msk) >> RTC_TLR_10SEC_Pos;
;;;210        g_u32loSec  =  (RTC->TLR & RTC_TLR_1SEC_Msk);
;;;211    
;;;212        u32Tmp  = (g_u32hiYear * 10);              /* Compute to 20XX year */
;;;213        u32Tmp += g_u32loYear;
;;;214        sPt->u32Year = u32Tmp + RTC_YEAR2000;
;;;215    
;;;216        u32Tmp = (g_u32hiMonth * 10);              /* Compute 0~12 month */
;;;217        sPt->u32Month = u32Tmp + g_u32loMonth;
;;;218    
;;;219        u32Tmp = (g_u32hiDay * 10);                /* Compute 0~31 day */
;;;220        sPt->u32Day   =  u32Tmp  + g_u32loDay;
;;;221    
;;;222        if (sPt->u32TimeScale == RTC_CLOCK_12) { /* Compute12/24 hour */
;;;223            u32Tmp = (g_u32hiHour * 10);
;;;224            u32Tmp+= g_u32loHour;
;;;225            sPt->u32Hour = u32Tmp;                 /* AM: 1~12. PM: 21~32. */
;;;226    
;;;227            if (sPt->u32Hour >= 21) {
;;;228                sPt->u32AmPm = RTC_PM;
;;;229                sPt->u32Hour -= 20;
;;;230            } else {
;;;231                sPt->u32AmPm = RTC_AM;
;;;232            }
;;;233    
;;;234            u32Tmp = (g_u32hiMin  * 10);
;;;235            u32Tmp+= g_u32loMin;
;;;236            sPt->u32Minute = u32Tmp;
;;;237    
;;;238            u32Tmp = (g_u32hiSec  * 10);
;;;239            u32Tmp+= g_u32loSec;
;;;240            sPt->u32Second = u32Tmp;
;;;241    
;;;242        } else {
;;;243            u32Tmp  = (g_u32hiHour * 10);
;;;244            u32Tmp += g_u32loHour;
;;;245            sPt->u32Hour = u32Tmp;
;;;246    
;;;247            u32Tmp  = (g_u32hiMin * 10);
;;;248            u32Tmp +=  g_u32loMin;
;;;249            sPt->u32Minute = u32Tmp;
;;;250    
;;;251            u32Tmp  = (g_u32hiSec * 10);
;;;252            u32Tmp += g_u32loSec;
;;;253            sPt->u32Second = u32Tmp;
;;;254        }
;;;255    
;;;256    }
000016  0209              LSLS     r1,r1,#8
000018  0f0c              LSRS     r4,r1,#28
00001a  4934              LDR      r1,|L8.236|
00001c  604c              STR      r4,[r1,#4]            ;198  ; g_u32hiYear
00001e  6914              LDR      r4,[r2,#0x10]         ;199
000020  0324              LSLS     r4,r4,#12
000022  0f24              LSRS     r4,r4,#28
000024  608c              STR      r4,[r1,#8]            ;199  ; g_u32loYear
000026  6914              LDR      r4,[r2,#0x10]         ;200
000028  04e5              LSLS     r5,r4,#19
00002a  2401              MOVS     r4,#1
00002c  0fed              LSRS     r5,r5,#31
00002e  60cd              STR      r5,[r1,#0xc]          ;200  ; g_u32hiMonth
000030  6915              LDR      r5,[r2,#0x10]         ;201
000032  052d              LSLS     r5,r5,#20
000034  0f2d              LSRS     r5,r5,#28
000036  610d              STR      r5,[r1,#0x10]         ;201  ; g_u32loMonth
000038  6915              LDR      r5,[r2,#0x10]         ;202
00003a  06ad              LSLS     r5,r5,#26
00003c  0fad              LSRS     r5,r5,#30
00003e  614d              STR      r5,[r1,#0x14]         ;202  ; g_u32hiDay
000040  6915              LDR      r5,[r2,#0x10]         ;203
000042  072d              LSLS     r5,r5,#28             ;203
000044  0f2d              LSRS     r5,r5,#28             ;203
000046  618d              STR      r5,[r1,#0x18]         ;203  ; g_u32loDay
000048  68d5              LDR      r5,[r2,#0xc]          ;205
00004a  02ad              LSLS     r5,r5,#10
00004c  0fad              LSRS     r5,r5,#30
00004e  61cd              STR      r5,[r1,#0x1c]         ;205  ; g_u32hiHour
000050  68d5              LDR      r5,[r2,#0xc]          ;206
000052  032d              LSLS     r5,r5,#12
000054  0f2d              LSRS     r5,r5,#28
000056  620d              STR      r5,[r1,#0x20]         ;206  ; g_u32loHour
000058  68d5              LDR      r5,[r2,#0xc]          ;207
00005a  046d              LSLS     r5,r5,#17
00005c  0f6d              LSRS     r5,r5,#29
00005e  624d              STR      r5,[r1,#0x24]         ;207  ; g_u32hiMin
000060  68d5              LDR      r5,[r2,#0xc]          ;208
000062  052d              LSLS     r5,r5,#20
000064  0f2d              LSRS     r5,r5,#28
000066  628d              STR      r5,[r1,#0x28]         ;208  ; g_u32loMin
000068  68d5              LDR      r5,[r2,#0xc]          ;209
00006a  066d              LSLS     r5,r5,#25
00006c  0f6d              LSRS     r5,r5,#29
00006e  62cd              STR      r5,[r1,#0x2c]         ;209  ; g_u32hiSec
000070  68d2              LDR      r2,[r2,#0xc]          ;210
000072  0712              LSLS     r2,r2,#28             ;210
000074  0f12              LSRS     r2,r2,#28             ;210
000076  630a              STR      r2,[r1,#0x30]         ;210  ; g_u32loSec
000078  684a              LDR      r2,[r1,#4]            ;212  ; g_u32hiYear
00007a  250a              MOVS     r5,#0xa               ;212
00007c  436a              MULS     r2,r5,r2              ;212
00007e  688d              LDR      r5,[r1,#8]            ;213  ; g_u32loYear
000080  1952              ADDS     r2,r2,r5              ;213
000082  257d              MOVS     r5,#0x7d              ;214
000084  012d              LSLS     r5,r5,#4              ;214
000086  1952              ADDS     r2,r2,r5              ;214
000088  6002              STR      r2,[r0,#0]            ;216
00008a  68ca              LDR      r2,[r1,#0xc]          ;216  ; g_u32hiMonth
00008c  250a              MOVS     r5,#0xa               ;216
00008e  436a              MULS     r2,r5,r2              ;216
000090  690d              LDR      r5,[r1,#0x10]         ;217  ; g_u32loMonth
000092  1952              ADDS     r2,r2,r5              ;217
000094  6042              STR      r2,[r0,#4]            ;219
000096  694a              LDR      r2,[r1,#0x14]         ;219  ; g_u32hiDay
000098  250a              MOVS     r5,#0xa               ;219
00009a  436a              MULS     r2,r5,r2              ;219
00009c  698d              LDR      r5,[r1,#0x18]         ;220  ; g_u32loDay
00009e  1952              ADDS     r2,r2,r5              ;220
0000a0  6082              STR      r2,[r0,#8]            ;222
0000a2  69ca              LDR      r2,[r1,#0x1c]         ;243  ; g_u32hiHour
0000a4  2b00              CMP      r3,#0                 ;222
0000a6  d004              BEQ      |L8.178|
0000a8  230a              MOVS     r3,#0xa               ;243
0000aa  435a              MULS     r2,r3,r2              ;243
0000ac  6a0b              LDR      r3,[r1,#0x20]         ;244  ; g_u32loHour
0000ae  18d2              ADDS     r2,r2,r3              ;244
0000b0  e009              B        |L8.198|
                  |L8.178|
0000b2  230a              MOVS     r3,#0xa               ;223
0000b4  435a              MULS     r2,r3,r2              ;223
0000b6  6a0b              LDR      r3,[r1,#0x20]         ;224  ; g_u32loHour
0000b8  18d2              ADDS     r2,r2,r3              ;224
0000ba  6102              STR      r2,[r0,#0x10]         ;227
0000bc  2a15              CMP      r2,#0x15              ;227
0000be  d304              BCC      |L8.202|
0000c0  2302              MOVS     r3,#2                 ;228
0000c2  3a14              SUBS     r2,r2,#0x14           ;228
0000c4  6203              STR      r3,[r0,#0x20]         ;228
                  |L8.198|
0000c6  6102              STR      r2,[r0,#0x10]         ;245
0000c8  e000              B        |L8.204|
                  |L8.202|
0000ca  6204              STR      r4,[r0,#0x20]         ;231
                  |L8.204|
0000cc  6a4a              LDR      r2,[r1,#0x24]         ;234  ; g_u32hiMin
0000ce  230a              MOVS     r3,#0xa               ;234
0000d0  435a              MULS     r2,r3,r2              ;234
0000d2  6a8b              LDR      r3,[r1,#0x28]         ;235  ; g_u32loMin
0000d4  18d2              ADDS     r2,r2,r3              ;235
0000d6  6142              STR      r2,[r0,#0x14]         ;238
0000d8  6aca              LDR      r2,[r1,#0x2c]         ;238  ; g_u32hiSec
0000da  230a              MOVS     r3,#0xa               ;238
0000dc  6b09              LDR      r1,[r1,#0x30]         ;239  ; g_u32loSec
0000de  435a              MULS     r2,r3,r2              ;238
0000e0  1851              ADDS     r1,r2,r1              ;239
0000e2  6181              STR      r1,[r0,#0x18]         ;240
0000e4  bd30              POP      {r4,r5,pc}
;;;257    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L8.232|
                          DCD      0x40008000
                  |L8.236|
                          DCD      ||.data||

                          AREA ||i.RTC_GetDayOfWeek||, CODE, READONLY, ALIGN=2

                  RTC_GetDayOfWeek PROC
;;;702     */
;;;703    uint32_t RTC_GetDayOfWeek(void)
000000  4802              LDR      r0,|L9.12|
;;;704    {
;;;705        return (RTC->DWR & RTC_DWR_DWR_Msk);
000002  6980              LDR      r0,[r0,#0x18]
000004  0740              LSLS     r0,r0,#29
000006  0f40              LSRS     r0,r0,#29
;;;706    }
000008  4770              BX       lr
;;;707    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40008000

                          AREA ||i.RTC_Open||, CODE, READONLY, ALIGN=2

                  RTC_Open PROC
;;;97      */
;;;98     void RTC_Open (S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;99     {
000002  4604              MOV      r4,r0
;;;100        uint32_t u32Reg;
;;;101    
;;;102        volatile int32_t i32delay=1000;
000004  207d              MOVS     r0,#0x7d
000006  00c0              LSLS     r0,r0,#3
;;;103    
;;;104        RTC->INIR = RTC_INIT_KEY;
000008  9000              STR      r0,[sp,#0]
00000a  4e38              LDR      r6,|L10.236|
00000c  4836              LDR      r0,|L10.232|
00000e  6030              STR      r0,[r6,#0]
;;;105    
;;;106        if(RTC->INIR != 0x1) {
000010  6831              LDR      r1,[r6,#0]
000012  2901              CMP      r1,#1
000014  d003              BEQ      |L10.30|
;;;107            RTC->INIR = RTC_INIT_KEY;
000016  6030              STR      r0,[r6,#0]
                  |L10.24|
;;;108    
;;;109            while(RTC->INIR != 0x1);
000018  6830              LDR      r0,[r6,#0]
00001a  2801              CMP      r0,#1
00001c  d1fc              BNE      |L10.24|
                  |L10.30|
;;;110        }
;;;111    
;;;112        if(sPt == NULL)
00001e  2c00              CMP      r4,#0
000020  d051              BEQ      |L10.198|
;;;113            return;
;;;114    
;;;115        /*-----------------------------------------------------------------------------------------------------*/
;;;116        /* Second, set RTC 24/12 hour setting                                                                  */
;;;117        /*-----------------------------------------------------------------------------------------------------*/
;;;118        if (sPt->u32TimeScale == RTC_CLOCK_12) {
000022  69e0              LDR      r0,[r4,#0x1c]
;;;119            RTC->AER = RTC_WRITE_KEY;
000024  4d32              LDR      r5,|L10.240|
000026  2800              CMP      r0,#0                 ;118
000028  d04e              BEQ      |L10.200|
                  |L10.42|
;;;120            while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
;;;121            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;122    
;;;123            /*-------------------------------------------------------------------------------------------------*/
;;;124            /* important, range of 12-hour PM mode is 21 upto 32                                               */
;;;125            /*-------------------------------------------------------------------------------------------------*/
;;;126            if (sPt->u32AmPm == RTC_PM)
;;;127                sPt->u32Hour += 20;
;;;128        } else {
;;;129            RTC->AER = RTC_WRITE_KEY;
00002a  6075              STR      r5,[r6,#4]
;;;130            while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00002c  6870              LDR      r0,[r6,#4]
00002e  03c0              LSLS     r0,r0,#15
000030  d5fb              BPL      |L10.42|
;;;131            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000032  6970              LDR      r0,[r6,#0x14]
000034  2101              MOVS     r1,#1
000036  4308              ORRS     r0,r0,r1
000038  6170              STR      r0,[r6,#0x14]
                  |L10.58|
;;;132        }
;;;133    
;;;134        /*-----------------------------------------------------------------------------------------------------*/
;;;135        /* Set RTC Calender Loading                                                                            */
;;;136        /*-----------------------------------------------------------------------------------------------------*/
;;;137        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
00003a  207d              MOVS     r0,#0x7d
00003c  6821              LDR      r1,[r4,#0]
00003e  0100              LSLS     r0,r0,#4
000040  1a08              SUBS     r0,r1,r0
000042  210a              MOVS     r1,#0xa
000044  f7fffffe          BL       __aeabi_uidivmod
;;;138        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
000048  040f              LSLS     r7,r1,#16
00004a  0500              LSLS     r0,r0,#20             ;137
00004c  4307              ORRS     r7,r7,r0
;;;139        u32Reg    |= ((sPt->u32Month  / 10) << 12);
00004e  210a              MOVS     r1,#0xa
000050  6860              LDR      r0,[r4,#4]
000052  f7fffffe          BL       __aeabi_uidivmod
000056  0300              LSLS     r0,r0,#12
000058  4338              ORRS     r0,r0,r7
;;;140        u32Reg    |= ((sPt->u32Month  % 10) << 8);
00005a  020f              LSLS     r7,r1,#8
00005c  4307              ORRS     r7,r7,r0
;;;141        u32Reg    |= ((sPt->u32Day    / 10) << 4);
00005e  210a              MOVS     r1,#0xa
000060  68a0              LDR      r0,[r4,#8]
000062  f7fffffe          BL       __aeabi_uidivmod
000066  0100              LSLS     r0,r0,#4
000068  4338              ORRS     r0,r0,r7
;;;142        u32Reg    |= (sPt->u32Day     % 10);
;;;143        g_u32Reg = u32Reg;
00006a  4f22              LDR      r7,|L10.244|
00006c  4301              ORRS     r1,r1,r0              ;142
00006e  6039              STR      r1,[r7,#0]  ; g_u32Reg
;;;144    
;;;145        RTC->AER = RTC_WRITE_KEY;
000070  481f              LDR      r0,|L10.240|
000072  6070              STR      r0,[r6,#4]
                  |L10.116|
;;;146        while(!(RTC->AER & RTC_AER_ENF_Msk));
000074  6870              LDR      r0,[r6,#4]
000076  03c0              LSLS     r0,r0,#15
000078  d5fc              BPL      |L10.116|
;;;147    
;;;148        RTC->CLR = (uint32_t)g_u32Reg;
00007a  6838              LDR      r0,[r7,#0]  ; g_u32Reg
00007c  6130              STR      r0,[r6,#0x10]
;;;149    
;;;150        /*-----------------------------------------------------------------------------------------------------*/
;;;151        /* Set RTC Time Loading                                                                                */
;;;152        /*-----------------------------------------------------------------------------------------------------*/
;;;153        u32Reg     = ((sPt->u32Hour / 10) << 20);
00007e  210a              MOVS     r1,#0xa
000080  6920              LDR      r0,[r4,#0x10]
000082  f7fffffe          BL       __aeabi_uidivmod
;;;154        u32Reg    |= ((sPt->u32Hour % 10) << 16);
000086  040d              LSLS     r5,r1,#16
000088  0500              LSLS     r0,r0,#20             ;153
00008a  4305              ORRS     r5,r5,r0
;;;155        u32Reg    |= ((sPt->u32Minute / 10) << 12);
00008c  210a              MOVS     r1,#0xa
00008e  6960              LDR      r0,[r4,#0x14]
000090  f7fffffe          BL       __aeabi_uidivmod
000094  0300              LSLS     r0,r0,#12
000096  4328              ORRS     r0,r0,r5
;;;156        u32Reg    |= ((sPt->u32Minute % 10) << 8);
000098  020d              LSLS     r5,r1,#8
00009a  4305              ORRS     r5,r5,r0
;;;157        u32Reg    |= ((sPt->u32Second / 10) << 4);
00009c  210a              MOVS     r1,#0xa
00009e  69a0              LDR      r0,[r4,#0x18]
0000a0  f7fffffe          BL       __aeabi_uidivmod
0000a4  0100              LSLS     r0,r0,#4
0000a6  4328              ORRS     r0,r0,r5
;;;158        u32Reg    |= (sPt->u32Second % 10);
0000a8  4301              ORRS     r1,r1,r0
;;;159        g_u32Reg = u32Reg;
0000aa  6039              STR      r1,[r7,#0]  ; g_u32Reg
;;;160    
;;;161        RTC->AER = RTC_WRITE_KEY;
0000ac  4810              LDR      r0,|L10.240|
0000ae  6070              STR      r0,[r6,#4]
                  |L10.176|
;;;162        while(!(RTC->AER & RTC_AER_ENF_Msk));
0000b0  6870              LDR      r0,[r6,#4]
0000b2  03c0              LSLS     r0,r0,#15
0000b4  d5fc              BPL      |L10.176|
;;;163    
;;;164        RTC->TLR = (uint32_t)g_u32Reg;
0000b6  6838              LDR      r0,[r7,#0]  ; g_u32Reg
0000b8  60f0              STR      r0,[r6,#0xc]
;;;165    
;;;166        RTC->DWR = sPt->u32DayOfWeek;
0000ba  68e0              LDR      r0,[r4,#0xc]
0000bc  61b0              STR      r0,[r6,#0x18]
                  |L10.190|
;;;167    
;;;168        /* Waiting for RTC settings stable */
;;;169        while(i32delay--);
0000be  9800              LDR      r0,[sp,#0]
0000c0  1e41              SUBS     r1,r0,#1
0000c2  9100              STR      r1,[sp,#0]
0000c4  d2fb              BCS      |L10.190|
                  |L10.198|
;;;170    
;;;171    }
0000c6  bdf8              POP      {r3-r7,pc}
                  |L10.200|
0000c8  6075              STR      r5,[r6,#4]            ;119
0000ca  6870              LDR      r0,[r6,#4]            ;120
0000cc  03c0              LSLS     r0,r0,#15             ;120
0000ce  d5fb              BPL      |L10.200|
0000d0  6970              LDR      r0,[r6,#0x14]         ;121
0000d2  0840              LSRS     r0,r0,#1              ;121
0000d4  0040              LSLS     r0,r0,#1              ;121
0000d6  6170              STR      r0,[r6,#0x14]         ;121
0000d8  6a20              LDR      r0,[r4,#0x20]         ;126
0000da  2802              CMP      r0,#2                 ;126
0000dc  d1ad              BNE      |L10.58|
0000de  6920              LDR      r0,[r4,#0x10]         ;127
0000e0  3014              ADDS     r0,r0,#0x14           ;127
0000e2  6120              STR      r0,[r4,#0x10]         ;127
0000e4  e7a9              B        |L10.58|
;;;172    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L10.232|
                          DCD      0xa5eb1357
                  |L10.236|
                          DCD      0x40008000
                  |L10.240|
                          DCD      0x0000a965
                  |L10.244|
                          DCD      ||.data||

                          AREA ||i.RTC_SetAlarmDate||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDate PROC
;;;585     */
;;;586    void RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day)
000000  b5f8              PUSH     {r3-r7,lr}
;;;587    {
;;;588        __IO uint32_t u32Reg;
;;;589    
;;;590        RTC->AER = RTC_WRITE_KEY;
000002  4d19              LDR      r5,|L11.104|
000004  4c19              LDR      r4,|L11.108|
000006  4616              MOV      r6,r2                 ;587
000008  460f              MOV      r7,r1                 ;587
                  |L11.10|
;;;591        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00000a  6065              STR      r5,[r4,#4]
00000c  6861              LDR      r1,[r4,#4]
00000e  03c9              LSLS     r1,r1,#15
000010  d5fb              BPL      |L11.10|
;;;592    
;;;593        u32Reg       = ((u32Year - RTC_YEAR2000) / 10) << 20;
000012  227d              MOVS     r2,#0x7d
000014  0112              LSLS     r2,r2,#4
000016  210a              MOVS     r1,#0xa
000018  1a80              SUBS     r0,r0,r2
00001a  f7fffffe          BL       __aeabi_uidivmod
00001e  0500              LSLS     r0,r0,#20
;;;594        u32Reg      |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000020  9000              STR      r0,[sp,#0]
000022  0408              LSLS     r0,r1,#16
000024  9900              LDR      r1,[sp,#0]
000026  4308              ORRS     r0,r0,r1
;;;595        u32Reg      |= ((u32Month  / 10) << 12);
000028  9000              STR      r0,[sp,#0]
00002a  210a              MOVS     r1,#0xa
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  9a00              LDR      r2,[sp,#0]
000034  0300              LSLS     r0,r0,#12
000036  4310              ORRS     r0,r0,r2
;;;596        u32Reg      |= ((u32Month  % 10) << 8);
000038  9000              STR      r0,[sp,#0]
00003a  0208              LSLS     r0,r1,#8
00003c  9900              LDR      r1,[sp,#0]
00003e  4308              ORRS     r0,r0,r1
;;;597        u32Reg      |= ((u32Day    / 10) << 4);
000040  9000              STR      r0,[sp,#0]
000042  210a              MOVS     r1,#0xa
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  9a00              LDR      r2,[sp,#0]
00004c  0100              LSLS     r0,r0,#4
00004e  4310              ORRS     r0,r0,r2
;;;598        u32Reg      |=  (u32Day    % 10);
000050  4301              ORRS     r1,r1,r0
;;;599        g_u32Reg   = u32Reg;
000052  4608              MOV      r0,r1
000054  9100              STR      r1,[sp,#0]
000056  4906              LDR      r1,|L11.112|
000058  6008              STR      r0,[r1,#0]  ; g_u32Reg
                  |L11.90|
;;;600    
;;;601        RTC->AER = RTC_WRITE_KEY;
;;;602        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00005a  6065              STR      r5,[r4,#4]
00005c  6860              LDR      r0,[r4,#4]
00005e  03c0              LSLS     r0,r0,#15
000060  d5fb              BPL      |L11.90|
;;;603    
;;;604        RTC->CAR = (uint32_t)g_u32Reg;
000062  6808              LDR      r0,[r1,#0]  ; g_u32Reg
000064  6220              STR      r0,[r4,#0x20]
;;;605    
;;;606    }
000066  bdf8              POP      {r3-r7,pc}
;;;607    
                          ENDP

                  |L11.104|
                          DCD      0x0000a965
                  |L11.108|
                          DCD      0x40008000
                  |L11.112|
                          DCD      ||.data||

                          AREA ||i.RTC_SetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDateAndTime PROC
;;;443     */
;;;444    void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;445    {
;;;446        uint32_t u32Reg;
;;;447    
;;;448        RTC->AER = RTC_WRITE_KEY;
000002  4e30              LDR      r6,|L12.196|
000004  4f2e              LDR      r7,|L12.192|
000006  4604              MOV      r4,r0                 ;445
000008  6077              STR      r7,[r6,#4]
                  |L12.10|
;;;449        while(!(RTC->AER & RTC_AER_ENF_Msk));
00000a  6870              LDR      r0,[r6,#4]
00000c  03c0              LSLS     r0,r0,#15
00000e  d5fc              BPL      |L12.10|
;;;450    
;;;451        if (sPt->u32TimeScale == RTC_CLOCK_12) {
000010  69e0              LDR      r0,[r4,#0x1c]
000012  2800              CMP      r0,#0
;;;452            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;453    
;;;454            /*-----------------------------------------------------------------------------------------*/
;;;455            /* important, range of 12-hour PM mode is 21 upto 32                                       */
;;;456            /*-----------------------------------------------------------------------------------------*/
;;;457            if (sPt->u32AmPm == RTC_PM)
;;;458                sPt->u32Hour += 20;
;;;459        } else {
;;;460            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000014  6970              LDR      r0,[r6,#0x14]
000016  d048              BEQ      |L12.170|
000018  2101              MOVS     r1,#1
00001a  4308              ORRS     r0,r0,r1
00001c  6170              STR      r0,[r6,#0x14]
                  |L12.30|
;;;461        }
;;;462    
;;;463        RTC->DWR = sPt->u32DayOfWeek & RTC_DWR_DWR_Msk;
00001e  7b20              LDRB     r0,[r4,#0xc]
000020  0740              LSLS     r0,r0,#29
000022  0f40              LSRS     r0,r0,#29
000024  61b0              STR      r0,[r6,#0x18]
;;;464    
;;;465    
;;;466        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
000026  207d              MOVS     r0,#0x7d
000028  6821              LDR      r1,[r4,#0]
00002a  0100              LSLS     r0,r0,#4
00002c  1a08              SUBS     r0,r1,r0
00002e  210a              MOVS     r1,#0xa
000030  f7fffffe          BL       __aeabi_uidivmod
;;;467        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
000034  040d              LSLS     r5,r1,#16
000036  0500              LSLS     r0,r0,#20             ;466
000038  4305              ORRS     r5,r5,r0
;;;468        u32Reg    |= ((sPt->u32Month  / 10) << 12);
00003a  210a              MOVS     r1,#0xa
00003c  6860              LDR      r0,[r4,#4]
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0300              LSLS     r0,r0,#12
000044  4328              ORRS     r0,r0,r5
;;;469        u32Reg    |= ((sPt->u32Month  % 10) << 8);
000046  020d              LSLS     r5,r1,#8
000048  4305              ORRS     r5,r5,r0
;;;470        u32Reg    |= ((sPt->u32Day     / 10) << 4);
00004a  210a              MOVS     r1,#0xa
00004c  68a0              LDR      r0,[r4,#8]
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  0100              LSLS     r0,r0,#4
000054  4328              ORRS     r0,r0,r5
;;;471        u32Reg    |=  (sPt->u32Day    % 10);
000056  4301              ORRS     r1,r1,r0
;;;472        g_u32Reg   = u32Reg;
000058  481b              LDR      r0,|L12.200|
00005a  6001              STR      r1,[r0,#0]  ; g_u32Reg
;;;473    
;;;474        RTC->AER = RTC_WRITE_KEY;
00005c  4918              LDR      r1,|L12.192|
00005e  6071              STR      r1,[r6,#4]
                  |L12.96|
;;;475        while(!(RTC->AER & RTC_AER_ENF_Msk));
000060  6871              LDR      r1,[r6,#4]
000062  03c9              LSLS     r1,r1,#15
000064  d5fc              BPL      |L12.96|
;;;476    
;;;477        RTC->CAR = (uint32_t)g_u32Reg;
000066  4607              MOV      r7,r0
000068  6800              LDR      r0,[r0,#0]  ; g_u32Reg
00006a  6230              STR      r0,[r6,#0x20]
;;;478    
;;;479        u32Reg     = ((sPt->u32Hour   / 10) << 20);
00006c  210a              MOVS     r1,#0xa
00006e  6920              LDR      r0,[r4,#0x10]
000070  f7fffffe          BL       __aeabi_uidivmod
;;;480        u32Reg    |= ((sPt->u32Hour   % 10) << 16);
000074  040d              LSLS     r5,r1,#16
000076  0500              LSLS     r0,r0,#20             ;479
000078  4305              ORRS     r5,r5,r0
;;;481        u32Reg    |= ((sPt->u32Minute / 10) << 12);
00007a  210a              MOVS     r1,#0xa
00007c  6960              LDR      r0,[r4,#0x14]
00007e  f7fffffe          BL       __aeabi_uidivmod
000082  0300              LSLS     r0,r0,#12
000084  4328              ORRS     r0,r0,r5
;;;482        u32Reg    |= ((sPt->u32Minute % 10) << 8);
000086  020d              LSLS     r5,r1,#8
000088  4305              ORRS     r5,r5,r0
;;;483        u32Reg    |= ((sPt->u32Second / 10) << 4);
00008a  210a              MOVS     r1,#0xa
00008c  69a0              LDR      r0,[r4,#0x18]
00008e  f7fffffe          BL       __aeabi_uidivmod
000092  0100              LSLS     r0,r0,#4
000094  4328              ORRS     r0,r0,r5
;;;484        u32Reg    |=  (sPt->u32Second % 10);
000096  4301              ORRS     r1,r1,r0
;;;485        g_u32Reg = u32Reg;
000098  6039              STR      r1,[r7,#0]  ; g_u32Reg
;;;486    
;;;487        RTC->AER = RTC_WRITE_KEY;
00009a  4809              LDR      r0,|L12.192|
00009c  6070              STR      r0,[r6,#4]
                  |L12.158|
;;;488        while(!(RTC->AER & RTC_AER_ENF_Msk));
00009e  6870              LDR      r0,[r6,#4]
0000a0  03c0              LSLS     r0,r0,#15
0000a2  d5fc              BPL      |L12.158|
;;;489    
;;;490        RTC->TAR = (uint32_t)g_u32Reg;
0000a4  6838              LDR      r0,[r7,#0]  ; g_u32Reg
0000a6  61f0              STR      r0,[r6,#0x1c]
;;;491    
;;;492    }
0000a8  bdf8              POP      {r3-r7,pc}
                  |L12.170|
0000aa  0840              LSRS     r0,r0,#1              ;452
0000ac  0040              LSLS     r0,r0,#1              ;452
0000ae  6170              STR      r0,[r6,#0x14]         ;452
0000b0  6a20              LDR      r0,[r4,#0x20]         ;457
0000b2  2802              CMP      r0,#2                 ;457
0000b4  d1b3              BNE      |L12.30|
0000b6  6920              LDR      r0,[r4,#0x10]         ;458
0000b8  3014              ADDS     r0,r0,#0x14           ;458
0000ba  6120              STR      r0,[r4,#0x10]         ;458
0000bc  e7af              B        |L12.30|
;;;493    
                          ENDP

0000be  0000              DCW      0x0000
                  |L12.192|
                          DCD      0x0000a965
                  |L12.196|
                          DCD      0x40008000
                  |L12.200|
                          DCD      ||.data||

                          AREA ||i.RTC_SetAlarmTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmTime PROC
;;;619     */
;;;620    void RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;621    {
000002  460e              MOV      r6,r1
;;;622        __IO uint32_t u32Reg;
;;;623    
;;;624        RTC->AER = RTC_WRITE_KEY;
000004  4d20              LDR      r5,|L13.136|
000006  4c21              LDR      r4,|L13.140|
000008  9906              LDR      r1,[sp,#0x18]
00000a  4617              MOV      r7,r2                 ;621
                  |L13.12|
;;;625        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00000c  6065              STR      r5,[r4,#4]
00000e  6862              LDR      r2,[r4,#4]
000010  03d2              LSLS     r2,r2,#15
000012  d5fb              BPL      |L13.12|
;;;626    
;;;627        if (u32TimeMode == RTC_CLOCK_12) {
000014  2b00              CMP      r3,#0
000016  d002              BEQ      |L13.30|
;;;628            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;629    
;;;630            if (u32AmPm == RTC_PM)    /* important, range of 12-hour PM mode is 21 upto 32 */
;;;631                u32Hour += 20;
;;;632        } else if(u32TimeMode == RTC_CLOCK_24) {
000018  2b01              CMP      r3,#1
00001a  d008              BEQ      |L13.46|
00001c  e00b              B        |L13.54|
                  |L13.30|
00001e  6962              LDR      r2,[r4,#0x14]         ;628
000020  0852              LSRS     r2,r2,#1              ;628
000022  0052              LSLS     r2,r2,#1              ;628
000024  6162              STR      r2,[r4,#0x14]         ;628
000026  2902              CMP      r1,#2                 ;630
000028  d105              BNE      |L13.54|
00002a  3014              ADDS     r0,r0,#0x14           ;630
00002c  e003              B        |L13.54|
                  |L13.46|
;;;633            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
00002e  6961              LDR      r1,[r4,#0x14]
000030  2201              MOVS     r2,#1
000032  4311              ORRS     r1,r1,r2
000034  6161              STR      r1,[r4,#0x14]
                  |L13.54|
;;;634        }
;;;635    
;;;636        u32Reg     = ((u32Hour   / 10) << 20);
000036  210a              MOVS     r1,#0xa
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  0500              LSLS     r0,r0,#20
;;;637        u32Reg    |= ((u32Hour   % 10) << 16);
00003e  9000              STR      r0,[sp,#0]
000040  0408              LSLS     r0,r1,#16
000042  9900              LDR      r1,[sp,#0]
000044  4308              ORRS     r0,r0,r1
;;;638        u32Reg    |= ((u32Minute / 10) << 12);
000046  9000              STR      r0,[sp,#0]
000048  210a              MOVS     r1,#0xa
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  9a00              LDR      r2,[sp,#0]
000052  0300              LSLS     r0,r0,#12
000054  4310              ORRS     r0,r0,r2
;;;639        u32Reg    |= ((u32Minute % 10) <<  8);
000056  9000              STR      r0,[sp,#0]
000058  0208              LSLS     r0,r1,#8
00005a  9900              LDR      r1,[sp,#0]
00005c  4308              ORRS     r0,r0,r1
;;;640        u32Reg    |= ((u32Second / 10) <<  4);
00005e  9000              STR      r0,[sp,#0]
000060  210a              MOVS     r1,#0xa
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       __aeabi_uidivmod
000068  9a00              LDR      r2,[sp,#0]
00006a  0100              LSLS     r0,r0,#4
00006c  4310              ORRS     r0,r0,r2
;;;641        u32Reg    |=  (u32Second % 10);
00006e  4301              ORRS     r1,r1,r0
;;;642    
;;;643        g_u32Reg = u32Reg;
000070  4608              MOV      r0,r1
000072  9100              STR      r1,[sp,#0]
000074  4906              LDR      r1,|L13.144|
000076  6008              STR      r0,[r1,#0]  ; g_u32Reg
                  |L13.120|
;;;644    
;;;645        RTC->AER = RTC_WRITE_KEY;
;;;646        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000078  6065              STR      r5,[r4,#4]
00007a  6860              LDR      r0,[r4,#4]
00007c  03c0              LSLS     r0,r0,#15
00007e  d5fb              BPL      |L13.120|
;;;647    
;;;648        RTC->TAR = (uint32_t)g_u32Reg;
000080  6808              LDR      r0,[r1,#0]  ; g_u32Reg
000082  61e0              STR      r0,[r4,#0x1c]
;;;649    
;;;650    }
000084  bdf8              POP      {r3-r7,pc}
;;;651    
                          ENDP

000086  0000              DCW      0x0000
                  |L13.136|
                          DCD      0x0000a965
                  |L13.140|
                          DCD      0x40008000
                  |L13.144|
                          DCD      ||.data||

                          AREA ||i.RTC_SetDate||, CODE, READONLY, ALIGN=2

                  RTC_SetDate PROC
;;;507     */
;;;508    void RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek)
000000  b5f8              PUSH     {r3-r7,lr}
;;;509    {
;;;510        __IO uint32_t u32Reg;
;;;511    
;;;512        RTC->AER = RTC_WRITE_KEY;
000002  4c1b              LDR      r4,|L14.112|
000004  4d1b              LDR      r5,|L14.116|
000006  4616              MOV      r6,r2                 ;509
000008  460f              MOV      r7,r1                 ;509
                  |L14.10|
;;;513        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00000a  606c              STR      r4,[r5,#4]
00000c  6869              LDR      r1,[r5,#4]
00000e  03c9              LSLS     r1,r1,#15
000010  d5fb              BPL      |L14.10|
;;;514    
;;;515        RTC->DWR = u32DayOfWeek & RTC_DWR_DWR_Msk;
000012  0759              LSLS     r1,r3,#29
000014  0f49              LSRS     r1,r1,#29
000016  61a9              STR      r1,[r5,#0x18]
;;;516    
;;;517        u32Reg     = ((u32Year - RTC_YEAR2000) / 10) << 20;
000018  227d              MOVS     r2,#0x7d
00001a  0112              LSLS     r2,r2,#4
00001c  210a              MOVS     r1,#0xa
00001e  1a80              SUBS     r0,r0,r2
000020  f7fffffe          BL       __aeabi_uidivmod
000024  0500              LSLS     r0,r0,#20
;;;518        u32Reg    |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000026  9000              STR      r0,[sp,#0]
000028  0408              LSLS     r0,r1,#16
00002a  9900              LDR      r1,[sp,#0]
00002c  4308              ORRS     r0,r0,r1
;;;519        u32Reg    |= ((u32Month  / 10) << 12);
00002e  9000              STR      r0,[sp,#0]
000030  210a              MOVS     r1,#0xa
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       __aeabi_uidivmod
000038  9a00              LDR      r2,[sp,#0]
00003a  0300              LSLS     r0,r0,#12
00003c  4310              ORRS     r0,r0,r2
;;;520        u32Reg    |= ((u32Month  % 10) << 8);
00003e  9000              STR      r0,[sp,#0]
000040  0208              LSLS     r0,r1,#8
000042  9900              LDR      r1,[sp,#0]
000044  4308              ORRS     r0,r0,r1
;;;521        u32Reg    |= ((u32Day    / 10) << 4);
000046  9000              STR      r0,[sp,#0]
000048  210a              MOVS     r1,#0xa
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  9a00              LDR      r2,[sp,#0]
000052  0100              LSLS     r0,r0,#4
000054  4310              ORRS     r0,r0,r2
;;;522        u32Reg    |=  (u32Day    % 10);
000056  4301              ORRS     r1,r1,r0
;;;523        g_u32Reg   = u32Reg;
000058  4608              MOV      r0,r1
00005a  9100              STR      r1,[sp,#0]
00005c  4906              LDR      r1,|L14.120|
00005e  6008              STR      r0,[r1,#0]  ; g_u32Reg
;;;524    
;;;525        RTC->AER = RTC_WRITE_KEY;
000060  606c              STR      r4,[r5,#4]
                  |L14.98|
;;;526        while(!(RTC->AER & RTC_AER_ENF_Msk));
000062  6868              LDR      r0,[r5,#4]
000064  03c0              LSLS     r0,r0,#15
000066  d5fc              BPL      |L14.98|
;;;527    
;;;528        RTC->CLR = (uint32_t)g_u32Reg;
000068  6808              LDR      r0,[r1,#0]  ; g_u32Reg
00006a  6128              STR      r0,[r5,#0x10]
;;;529    
;;;530    }
00006c  bdf8              POP      {r3-r7,pc}
;;;531    
                          ENDP

00006e  0000              DCW      0x0000
                  |L14.112|
                          DCD      0x0000a965
                  |L14.116|
                          DCD      0x40008000
                  |L14.120|
                          DCD      ||.data||

                          AREA ||i.RTC_SetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetDateAndTime PROC
;;;374     */
;;;375    void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;376    {
;;;377        uint32_t u32Reg;
;;;378    
;;;379        RTC->AER = RTC_WRITE_KEY;
000002  4e30              LDR      r6,|L15.196|
000004  4f2e              LDR      r7,|L15.192|
000006  4604              MOV      r4,r0                 ;376
000008  6077              STR      r7,[r6,#4]
                  |L15.10|
;;;380        while(!(RTC->AER & RTC_AER_ENF_Msk));
00000a  6870              LDR      r0,[r6,#4]
00000c  03c0              LSLS     r0,r0,#15
00000e  d5fc              BPL      |L15.10|
;;;381    
;;;382        if (sPt->u32TimeScale == RTC_CLOCK_12) {
000010  69e0              LDR      r0,[r4,#0x1c]
000012  2800              CMP      r0,#0
;;;383            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;384    
;;;385            /*-----------------------------------------------------------------------------------------*/
;;;386            /* important, range of 12-hour PM mode is 21 upto 32                                       */
;;;387            /*-----------------------------------------------------------------------------------------*/
;;;388            if (sPt->u32AmPm == RTC_PM)
;;;389                sPt->u32Hour += 20;
;;;390        } else {
;;;391            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000014  6970              LDR      r0,[r6,#0x14]
000016  d048              BEQ      |L15.170|
000018  2101              MOVS     r1,#1
00001a  4308              ORRS     r0,r0,r1
00001c  6170              STR      r0,[r6,#0x14]
                  |L15.30|
;;;392        }
;;;393    
;;;394        RTC->DWR = sPt->u32DayOfWeek & RTC_DWR_DWR_Msk;
00001e  7b20              LDRB     r0,[r4,#0xc]
000020  0740              LSLS     r0,r0,#29
000022  0f40              LSRS     r0,r0,#29
000024  61b0              STR      r0,[r6,#0x18]
;;;395    
;;;396        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
000026  207d              MOVS     r0,#0x7d
000028  6821              LDR      r1,[r4,#0]
00002a  0100              LSLS     r0,r0,#4
00002c  1a08              SUBS     r0,r1,r0
00002e  210a              MOVS     r1,#0xa
000030  f7fffffe          BL       __aeabi_uidivmod
;;;397        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
000034  040d              LSLS     r5,r1,#16
000036  0500              LSLS     r0,r0,#20             ;396
000038  4305              ORRS     r5,r5,r0
;;;398        u32Reg    |= ((sPt->u32Month  / 10) << 12);
00003a  210a              MOVS     r1,#0xa
00003c  6860              LDR      r0,[r4,#4]
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0300              LSLS     r0,r0,#12
000044  4328              ORRS     r0,r0,r5
;;;399        u32Reg    |= ((sPt->u32Month  % 10) << 8);
000046  020d              LSLS     r5,r1,#8
000048  4305              ORRS     r5,r5,r0
;;;400        u32Reg    |= ((sPt->u32Day    / 10) << 4);
00004a  210a              MOVS     r1,#0xa
00004c  68a0              LDR      r0,[r4,#8]
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  0100              LSLS     r0,r0,#4
000054  4328              ORRS     r0,r0,r5
;;;401        u32Reg    |=  (sPt->u32Day    % 10);
000056  4301              ORRS     r1,r1,r0
;;;402        g_u32Reg = u32Reg;
000058  481b              LDR      r0,|L15.200|
00005a  6001              STR      r1,[r0,#0]  ; g_u32Reg
;;;403    
;;;404        RTC->AER = RTC_WRITE_KEY;
00005c  4918              LDR      r1,|L15.192|
00005e  6071              STR      r1,[r6,#4]
                  |L15.96|
;;;405        while(!(RTC->AER & RTC_AER_ENF_Msk));
000060  6871              LDR      r1,[r6,#4]
000062  03c9              LSLS     r1,r1,#15
000064  d5fc              BPL      |L15.96|
;;;406    
;;;407        RTC->CLR = (uint32_t)g_u32Reg;
000066  4607              MOV      r7,r0
000068  6800              LDR      r0,[r0,#0]  ; g_u32Reg
00006a  6130              STR      r0,[r6,#0x10]
;;;408    
;;;409        u32Reg     = ((sPt->u32Hour   / 10) << 20);
00006c  210a              MOVS     r1,#0xa
00006e  6920              LDR      r0,[r4,#0x10]
000070  f7fffffe          BL       __aeabi_uidivmod
;;;410        u32Reg    |= ((sPt->u32Hour   % 10) << 16);
000074  040d              LSLS     r5,r1,#16
000076  0500              LSLS     r0,r0,#20             ;409
000078  4305              ORRS     r5,r5,r0
;;;411        u32Reg    |= ((sPt->u32Minute / 10) << 12);
00007a  210a              MOVS     r1,#0xa
00007c  6960              LDR      r0,[r4,#0x14]
00007e  f7fffffe          BL       __aeabi_uidivmod
000082  0300              LSLS     r0,r0,#12
000084  4328              ORRS     r0,r0,r5
;;;412        u32Reg    |= ((sPt->u32Minute % 10) << 8);
000086  020d              LSLS     r5,r1,#8
000088  4305              ORRS     r5,r5,r0
;;;413        u32Reg    |= ((sPt->u32Second / 10) << 4);
00008a  210a              MOVS     r1,#0xa
00008c  69a0              LDR      r0,[r4,#0x18]
00008e  f7fffffe          BL       __aeabi_uidivmod
000092  0100              LSLS     r0,r0,#4
000094  4328              ORRS     r0,r0,r5
;;;414        u32Reg    |=  (sPt->u32Second % 10);
000096  4301              ORRS     r1,r1,r0
;;;415        g_u32Reg = u32Reg;
000098  6039              STR      r1,[r7,#0]  ; g_u32Reg
;;;416    
;;;417        RTC->AER = RTC_WRITE_KEY;
00009a  4809              LDR      r0,|L15.192|
00009c  6070              STR      r0,[r6,#4]
                  |L15.158|
;;;418        while(!(RTC->AER & RTC_AER_ENF_Msk));
00009e  6870              LDR      r0,[r6,#4]
0000a0  03c0              LSLS     r0,r0,#15
0000a2  d5fc              BPL      |L15.158|
;;;419    
;;;420        RTC->TLR = (uint32_t)g_u32Reg;
0000a4  6838              LDR      r0,[r7,#0]  ; g_u32Reg
0000a6  60f0              STR      r0,[r6,#0xc]
;;;421    
;;;422    }
0000a8  bdf8              POP      {r3-r7,pc}
                  |L15.170|
0000aa  0840              LSRS     r0,r0,#1              ;383
0000ac  0040              LSLS     r0,r0,#1              ;383
0000ae  6170              STR      r0,[r6,#0x14]         ;383
0000b0  6a20              LDR      r0,[r4,#0x20]         ;388
0000b2  2802              CMP      r0,#2                 ;388
0000b4  d1b3              BNE      |L15.30|
0000b6  6920              LDR      r0,[r4,#0x10]         ;389
0000b8  3014              ADDS     r0,r0,#0x14           ;389
0000ba  6120              STR      r0,[r4,#0x10]         ;389
0000bc  e7af              B        |L15.30|
;;;423    
                          ENDP

0000be  0000              DCW      0x0000
                  |L15.192|
                          DCD      0x0000a965
                  |L15.196|
                          DCD      0x40008000
                  |L15.200|
                          DCD      ||.data||

                          AREA ||i.RTC_SetTickPeriod||, CODE, READONLY, ALIGN=2

                  RTC_SetTickPeriod PROC
;;;726     */
;;;727    void RTC_SetTickPeriod(uint32_t u32TickSelection)
000000  4a05              LDR      r2,|L16.24|
;;;728    {
;;;729        RTC->AER = RTC_WRITE_KEY;
000002  4906              LDR      r1,|L16.28|
                  |L16.4|
;;;730        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  604a              STR      r2,[r1,#4]
000006  684b              LDR      r3,[r1,#4]
000008  03db              LSLS     r3,r3,#15
00000a  d5fb              BPL      |L16.4|
;;;731    
;;;732        RTC->TTR = RTC->TTR & ~RTC_TTR_TTR_Msk | u32TickSelection;
00000c  6b0a              LDR      r2,[r1,#0x30]
00000e  08d2              LSRS     r2,r2,#3
000010  00d2              LSLS     r2,r2,#3
000012  4302              ORRS     r2,r2,r0
000014  630a              STR      r2,[r1,#0x30]
;;;733    }
000016  4770              BX       lr
;;;734    
                          ENDP

                  |L16.24|
                          DCD      0x0000a965
                  |L16.28|
                          DCD      0x40008000

                          AREA ||i.RTC_SetTime||, CODE, READONLY, ALIGN=2

                  RTC_SetTime PROC
;;;543     */
;;;544    void RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;545    {
000002  460f              MOV      r7,r1
;;;546        __IO uint32_t u32Reg;
;;;547    
;;;548        RTC->AER = RTC_WRITE_KEY;
000004  4c21              LDR      r4,|L17.140|
000006  4d20              LDR      r5,|L17.136|
000008  9906              LDR      r1,[sp,#0x18]
00000a  4616              MOV      r6,r2                 ;545
00000c  6065              STR      r5,[r4,#4]
                  |L17.14|
;;;549        while(!(RTC->AER & RTC_AER_ENF_Msk));
00000e  6862              LDR      r2,[r4,#4]
000010  03d2              LSLS     r2,r2,#15
000012  d5fc              BPL      |L17.14|
;;;550    
;;;551        if (u32TimeMode == RTC_CLOCK_12) {
000014  2b00              CMP      r3,#0
000016  d002              BEQ      |L17.30|
;;;552            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;553    
;;;554            if (u32AmPm == RTC_PM)    /* important, range of 12-hour PM mode is 21 upto 32 */
;;;555                u32Hour += 20;
;;;556        } else if(u32TimeMode == RTC_CLOCK_24) {
000018  2b01              CMP      r3,#1
00001a  d008              BEQ      |L17.46|
00001c  e00b              B        |L17.54|
                  |L17.30|
00001e  6962              LDR      r2,[r4,#0x14]         ;552
000020  0852              LSRS     r2,r2,#1              ;552
000022  0052              LSLS     r2,r2,#1              ;552
000024  6162              STR      r2,[r4,#0x14]         ;552
000026  2902              CMP      r1,#2                 ;554
000028  d105              BNE      |L17.54|
00002a  3014              ADDS     r0,r0,#0x14           ;554
00002c  e003              B        |L17.54|
                  |L17.46|
;;;557            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
00002e  6961              LDR      r1,[r4,#0x14]
000030  2201              MOVS     r2,#1
000032  4311              ORRS     r1,r1,r2
000034  6161              STR      r1,[r4,#0x14]
                  |L17.54|
;;;558        }
;;;559    
;;;560        u32Reg     = ((u32Hour   / 10) << 20);
000036  210a              MOVS     r1,#0xa
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  0500              LSLS     r0,r0,#20
;;;561        u32Reg    |= ((u32Hour   % 10) << 16);
00003e  9000              STR      r0,[sp,#0]
000040  0408              LSLS     r0,r1,#16
000042  9900              LDR      r1,[sp,#0]
000044  4308              ORRS     r0,r0,r1
;;;562        u32Reg    |= ((u32Minute / 10) << 12);
000046  9000              STR      r0,[sp,#0]
000048  210a              MOVS     r1,#0xa
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  9a00              LDR      r2,[sp,#0]
000052  0300              LSLS     r0,r0,#12
000054  4310              ORRS     r0,r0,r2
;;;563        u32Reg    |= ((u32Minute % 10) << 8);
000056  9000              STR      r0,[sp,#0]
000058  0208              LSLS     r0,r1,#8
00005a  9900              LDR      r1,[sp,#0]
00005c  4308              ORRS     r0,r0,r1
;;;564        u32Reg    |= ((u32Second / 10) << 4);
00005e  9000              STR      r0,[sp,#0]
000060  210a              MOVS     r1,#0xa
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       __aeabi_uidivmod
000068  9a00              LDR      r2,[sp,#0]
00006a  0100              LSLS     r0,r0,#4
00006c  4310              ORRS     r0,r0,r2
;;;565        u32Reg    |=  (u32Second % 10);
00006e  4301              ORRS     r1,r1,r0
;;;566    
;;;567        g_u32Reg = u32Reg;
000070  4608              MOV      r0,r1
000072  9100              STR      r1,[sp,#0]
000074  4906              LDR      r1,|L17.144|
000076  6008              STR      r0,[r1,#0]  ; g_u32Reg
;;;568    
;;;569        RTC->AER = RTC_WRITE_KEY;
000078  6065              STR      r5,[r4,#4]
                  |L17.122|
;;;570        while(!(RTC->AER & RTC_AER_ENF_Msk));
00007a  6860              LDR      r0,[r4,#4]
00007c  03c0              LSLS     r0,r0,#15
00007e  d5fc              BPL      |L17.122|
;;;571    
;;;572        RTC->TLR = (uint32_t)g_u32Reg;
000080  6808              LDR      r0,[r1,#0]  ; g_u32Reg
000082  60e0              STR      r0,[r4,#0xc]
;;;573    
;;;574    }
000084  bdf8              POP      {r3-r7,pc}
;;;575    
                          ENDP

000086  0000              DCW      0x0000
                  |L17.136|
                          DCD      0x0000a965
                  |L17.140|
                          DCD      0x40008000
                  |L17.144|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  g_u32Reg
                          DCD      0x00000000
                  g_u32hiYear
                          DCD      0x00000000
                  g_u32loYear
                          DCD      0x00000000
                  g_u32hiMonth
                          DCD      0x00000000
                  g_u32loMonth
                          DCD      0x00000000
                  g_u32hiDay
                          DCD      0x00000000
                  g_u32loDay
                          DCD      0x00000000
                  g_u32hiHour
                          DCD      0x00000000
                  g_u32loHour
                          DCD      0x00000000
                  g_u32hiMin
                          DCD      0x00000000
                  g_u32loMin
                          DCD      0x00000000
                  g_u32hiSec
                          DCD      0x00000000
                  g_u32loSec
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_f2e3968a____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_rtc_c_f2e3968a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_f2e3968a____REVSH|
#line 402
|__asm___5_rtc_c_f2e3968a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
