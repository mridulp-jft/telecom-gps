; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcd_commom.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lcd_commom.d --feedback=.\obj\PWRDWN_DEMO.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\LCDLib\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\lcd_commom.crf ..\..\COMMON\LCD_Commom.c]
                          THUMB

                          AREA ||i.ControlSegment||, CODE, READONLY, ALIGN=1

                  ControlSegment PROC
;;;70     
;;;71     void ControlSegment(uint32_t onoff, int com, int seg)
000000  b510              PUSH     {r4,lr}
;;;72     {
000002  4613              MOV      r3,r2
000004  460c              MOV      r4,r1
;;;73         LCD_SetPixel(com, seg, onoff);
000006  4602              MOV      r2,r0
000008  4619              MOV      r1,r3
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       LCD_SetPixel
;;;74     }
000010  bd10              POP      {r4,pc}
;;;75     
                          ENDP


                          AREA ||i.char_to_int||, CODE, READONLY, ALIGN=1

                  char_to_int PROC
;;;19     
;;;20     long long char_to_int(char c)
000000  2830              CMP      r0,#0x30
;;;21     {
000002  d015              BEQ      |L2.48|
;;;22         if(c=='0') return 0;
;;;23         else if(c=='1') return 1;
000004  2831              CMP      r0,#0x31
000006  d015              BEQ      |L2.52|
;;;24         else if(c=='2') return 2;
000008  2832              CMP      r0,#0x32
00000a  d015              BEQ      |L2.56|
;;;25         else if(c=='3') return 3;
00000c  2833              CMP      r0,#0x33
00000e  d015              BEQ      |L2.60|
;;;26         else if(c=='4') return 4;
000010  2834              CMP      r0,#0x34
000012  d015              BEQ      |L2.64|
;;;27         else if(c=='5') return 5;
000014  2835              CMP      r0,#0x35
000016  d015              BEQ      |L2.68|
;;;28         else if(c=='6') return 6;
000018  2836              CMP      r0,#0x36
00001a  d015              BEQ      |L2.72|
;;;29         else if(c=='7') return 7;
00001c  2837              CMP      r0,#0x37
00001e  d015              BEQ      |L2.76|
;;;30         else if(c=='8') return 8;
000020  2838              CMP      r0,#0x38
000022  d015              BEQ      |L2.80|
;;;31         else if(c=='9') return 9;
000024  2839              CMP      r0,#0x39
000026  d015              BEQ      |L2.84|
;;;32     
;;;33         return -1;
000028  2000              MOVS     r0,#0
00002a  43c0              MVNS     r0,r0
00002c  4601              MOV      r1,r0
;;;34     }
00002e  4770              BX       lr
                  |L2.48|
000030  2000              MOVS     r0,#0                 ;22
000032  e010              B        |L2.86|
                  |L2.52|
000034  2001              MOVS     r0,#1                 ;23
000036  e00e              B        |L2.86|
                  |L2.56|
000038  2002              MOVS     r0,#2                 ;24
00003a  e00c              B        |L2.86|
                  |L2.60|
00003c  2003              MOVS     r0,#3                 ;25
00003e  e00a              B        |L2.86|
                  |L2.64|
000040  2004              MOVS     r0,#4                 ;26
000042  e008              B        |L2.86|
                  |L2.68|
000044  2005              MOVS     r0,#5                 ;27
000046  e006              B        |L2.86|
                  |L2.72|
000048  2006              MOVS     r0,#6                 ;28
00004a  e004              B        |L2.86|
                  |L2.76|
00004c  2007              MOVS     r0,#7                 ;29
00004e  e002              B        |L2.86|
                  |L2.80|
000050  2008              MOVS     r0,#8                 ;30
000052  e000              B        |L2.86|
                  |L2.84|
000054  2009              MOVS     r0,#9                 ;31
                  |L2.86|
000056  2100              MOVS     r1,#0                 ;31
000058  4770              BX       lr
;;;35     
                          ENDP


                          AREA ||i.local_atoi||, CODE, READONLY, ALIGN=1

                  local_atoi PROC
;;;35     
;;;36     long long local_atoi(char text[])
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;37     {
000002  b08c              SUB      sp,sp,#0x30
;;;38         int len = strlen(text);
000004  980c              LDR      r0,[sp,#0x30]
000006  f7fffffe          BL       strlen
;;;39         int len2, negflag=0;
00000a  9002              STR      r0,[sp,#8]
00000c  2000              MOVS     r0,#0
;;;40         long long mul=len;
00000e  900a              STR      r0,[sp,#0x28]
000010  9802              LDR      r0,[sp,#8]
;;;41         long long i=0, j=0, mul2=1;
;;;42         long long result=0;
;;;43     
;;;44         if( text[0] == '-') {
000012  9a0c              LDR      r2,[sp,#0x30]
000014  17c7              ASRS     r7,r0,#31             ;40
000016  4606              MOV      r6,r0                 ;40
000018  2000              MOVS     r0,#0                 ;40
00001a  9008              STR      r0,[sp,#0x20]         ;42
00001c  9009              STR      r0,[sp,#0x24]
00001e  7812              LDRB     r2,[r2,#0]
000020  2401              MOVS     r4,#1                 ;40
000022  4601              MOV      r1,r0                 ;40
000024  4605              MOV      r5,r0                 ;40
000026  2a2d              CMP      r2,#0x2d
000028  d11a              BNE      |L3.96|
;;;45             negflag = 1;
00002a  2201              MOVS     r2,#1
;;;46             len2 = len - 1;
00002c  1e73              SUBS     r3,r6,#1
;;;47             for(i=0; i<len2; i++) {
00002e  920a              STR      r2,[sp,#0x28]
000030  17da              ASRS     r2,r3,#31
000032  4694              MOV      r12,r2
000034  e007              B        |L3.70|
                  |L3.54|
;;;48                 text[i] = text[i+1];
000036  2600              MOVS     r6,#0
000038  1c42              ADDS     r2,r0,#1
00003a  4171              ADCS     r1,r1,r6
00003c  9e0c              LDR      r6,[sp,#0x30]
00003e  9f0c              LDR      r7,[sp,#0x30]
000040  5cb6              LDRB     r6,[r6,r2]
000042  543e              STRB     r6,[r7,r0]
000044  4610              MOV      r0,r2                 ;47
                  |L3.70|
000046  4666              MOV      r6,r12                ;47
000048  460a              MOV      r2,r1                 ;47
00004a  1ac7              SUBS     r7,r0,r3              ;47
00004c  41b2              SBCS     r2,r2,r6              ;47
00004e  dbf2              BLT      |L3.54|
;;;49             }
;;;50             text[i] = '\0';
000050  990c              LDR      r1,[sp,#0x30]
000052  2200              MOVS     r2,#0
000054  540a              STRB     r2,[r1,r0]
;;;51             len--;
000056  9802              LDR      r0,[sp,#8]
000058  1e40              SUBS     r0,r0,#1
;;;52             mul = len;
00005a  4606              MOV      r6,r0
00005c  17c7              ASRS     r7,r0,#31
00005e  9002              STR      r0,[sp,#8]
                  |L3.96|
000060  2000              MOVS     r0,#0
;;;53         }
;;;54     
;;;55         for(i=0; i < len; i++) {
000062  9000              STR      r0,[sp,#0]
000064  9001              STR      r0,[sp,#4]            ;40
000066  17f0              ASRS     r0,r6,#31             ;40
000068  9003              STR      r0,[sp,#0xc]
00006a  e045              B        |L3.248|
                  |L3.108|
;;;56             if(mul==1) mul2 = 1;
00006c  2001              MOVS     r0,#1
00006e  4070              EORS     r0,r0,r6
000070  4338              ORRS     r0,r0,r7
000072  d00d              BEQ      |L3.144|
000074  2101              MOVS     r1,#1
000076  2000              MOVS     r0,#0
000078  1b89              SUBS     r1,r1,r6
00007a  41b8              SBCS     r0,r0,r7
;;;57             else if(mul>1)
00007c  da21              BGE      |L3.194|
00007e  2000              MOVS     r0,#0
;;;58                 for(j=0; j<(mul-1); j++)
000080  9006              STR      r0,[sp,#0x18]
000082  9007              STR      r0,[sp,#0x1c]
000084  1e40              SUBS     r0,r0,#1
000086  1e71              SUBS     r1,r6,#1
000088  4178              ADCS     r0,r0,r7
00008a  9104              STR      r1,[sp,#0x10]
00008c  9005              STR      r0,[sp,#0x14]
00008e  e011              B        |L3.180|
                  |L3.144|
000090  2401              MOVS     r4,#1
000092  2500              MOVS     r5,#0
000094  e015              B        |L3.194|
                  |L3.150|
000096  220a              MOVS     r2,#0xa               ;56
000098  2300              MOVS     r3,#0                 ;56
;;;59                     mul2 *= 10;
00009a  4620              MOV      r0,r4
00009c  4629              MOV      r1,r5
00009e  f7fffffe          BL       __aeabi_lmul
0000a2  4604              MOV      r4,r0
0000a4  9806              LDR      r0,[sp,#0x18]         ;58
0000a6  460d              MOV      r5,r1
0000a8  9907              LDR      r1,[sp,#0x1c]         ;58
0000aa  1c40              ADDS     r0,r0,#1              ;58
0000ac  2200              MOVS     r2,#0                 ;58
0000ae  4151              ADCS     r1,r1,r2              ;58
0000b0  9107              STR      r1,[sp,#0x1c]         ;58
0000b2  9006              STR      r0,[sp,#0x18]         ;58
                  |L3.180|
0000b4  9a04              LDR      r2,[sp,#0x10]         ;58
0000b6  9806              LDR      r0,[sp,#0x18]         ;58
0000b8  9b05              LDR      r3,[sp,#0x14]         ;58
0000ba  9907              LDR      r1,[sp,#0x1c]         ;58
0000bc  1a80              SUBS     r0,r0,r2              ;58
0000be  4199              SBCS     r1,r1,r3              ;58
0000c0  dbe9              BLT      |L3.150|
                  |L3.194|
;;;60             result += mul2*char_to_int(text[i]);
0000c2  990c              LDR      r1,[sp,#0x30]
0000c4  9800              LDR      r0,[sp,#0]
0000c6  5c08              LDRB     r0,[r1,r0]
0000c8  f7fffffe          BL       char_to_int
0000cc  4622              MOV      r2,r4
0000ce  462b              MOV      r3,r5
0000d0  f7fffffe          BL       __aeabi_lmul
0000d4  9a08              LDR      r2,[sp,#0x20]
0000d6  9b09              LDR      r3,[sp,#0x24]
0000d8  1880              ADDS     r0,r0,r2
0000da  4159              ADCS     r1,r1,r3
;;;61             mul--;
0000dc  9008              STR      r0,[sp,#0x20]
0000de  2000              MOVS     r0,#0
0000e0  43c0              MVNS     r0,r0
0000e2  1e76              SUBS     r6,r6,#1
0000e4  4147              ADCS     r7,r7,r0
0000e6  9800              LDR      r0,[sp,#0]            ;55
0000e8  9109              STR      r1,[sp,#0x24]
0000ea  9901              LDR      r1,[sp,#4]            ;55
0000ec  1c40              ADDS     r0,r0,#1              ;55
0000ee  2401              MOVS     r4,#1
0000f0  2500              MOVS     r5,#0
0000f2  4169              ADCS     r1,r1,r5              ;55
0000f4  9101              STR      r1,[sp,#4]            ;55
0000f6  9000              STR      r0,[sp,#0]            ;55
                  |L3.248|
0000f8  a801              ADD      r0,sp,#4              ;55
0000fa  c807              LDM      r0,{r0-r2}            ;55
0000fc  9b00              LDR      r3,[sp,#0]            ;55
0000fe  1a59              SUBS     r1,r3,r1              ;55
000100  4190              SBCS     r0,r0,r2              ;55
000102  dbb3              BLT      |L3.108|
;;;62             mul2=1;
;;;63         }
;;;64     
;;;65         if(negflag==1)
000104  980a              LDR      r0,[sp,#0x28]
000106  2800              CMP      r0,#0
000108  d006              BEQ      |L3.280|
;;;66             result = 0 - result;
00010a  9908              LDR      r1,[sp,#0x20]
00010c  9a09              LDR      r2,[sp,#0x24]
00010e  4249              RSBS     r1,r1,#0
000110  2000              MOVS     r0,#0
000112  4190              SBCS     r0,r0,r2
000114  9108              STR      r1,[sp,#0x20]
000116  9009              STR      r0,[sp,#0x24]
                  |L3.280|
;;;67     
;;;68         return result;
000118  9909              LDR      r1,[sp,#0x24]
00011a  9808              LDR      r0,[sp,#0x20]
;;;69     }
00011c  b00d              ADD      sp,sp,#0x34
00011e  bdf0              POP      {r4-r7,pc}
;;;70     
                          ENDP


                          AREA ||i.showTime||, CODE, READONLY, ALIGN=1

                  showTime PROC
;;;126    // hour: 24-hours
;;;127    void showTime(uint32_t hour, uint32_t minute)
000000  2264              MOVS     r2,#0x64
;;;128    {
;;;129        long long time;
;;;130        // show time
;;;131        time = hour * 100 + minute;
000002  4350              MULS     r0,r2,r0
000004  b510              PUSH     {r4,lr}               ;128
000006  1842              ADDS     r2,r0,r1
;;;132    
;;;133        LCDLIB_PrintNumber(1, time);
000008  2300              MOVS     r3,#0
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       LCDLIB_PrintNumber
;;;134        LCD_SetPixel(3,29,1);
000010  2201              MOVS     r2,#1
000012  211d              MOVS     r1,#0x1d
000014  2003              MOVS     r0,#3
000016  f7fffffe          BL       LCD_SetPixel
;;;135    }
00001a  bd10              POP      {r4,pc}
;;;136    
                          ENDP


                          AREA ||i.textticker||, CODE, READONLY, ALIGN=2

                  textticker PROC
;;;76     
;;;77     void textticker(char *string, uint32_t delayus)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;78     {
000002  b085              SUB      sp,sp,#0x14
;;;79         char showstring[7], tmpstring[7];
;;;80         int showidx, textidx, storeshowidx, storetextidx;
;;;81         int textlen;
;;;82         uint32_t i;
;;;83     
;;;84         strcpy(&showstring[0], "       ");
000004  a128              ADR      r1,|L5.168|
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       strcpy
;;;85     
;;;86         textlen = strlen(string);
00000c  9805              LDR      r0,[sp,#0x14]
00000e  f7fffffe          BL       strlen
;;;87     
;;;88         showidx = 6;
000012  2406              MOVS     r4,#6
000014  4607              MOV      r7,r0                 ;86
;;;89     
;;;90         for(textidx=0; textidx<textlen; textidx++) {
000016  2600              MOVS     r6,#0
000018  466d              MOV      r5,sp                 ;79
00001a  e01f              B        |L5.92|
                  |L5.28|
;;;91             // clear showstring
;;;92             for(storetextidx=0; storetextidx<=6; storetextidx++) showstring[storetextidx] = ' ';
00001c  2000              MOVS     r0,#0
00001e  2120              MOVS     r1,#0x20
                  |L5.32|
000020  5429              STRB     r1,[r5,r0]
000022  1c40              ADDS     r0,r0,#1
000024  2806              CMP      r0,#6
000026  ddfb              BLE      |L5.32|
;;;93     
;;;94             storetextidx = textidx;
;;;95             if((6-showidx) > 0) {
000028  2106              MOVS     r1,#6
00002a  1b09              SUBS     r1,r1,r4
00002c  4630              MOV      r0,r6                 ;94
00002e  2900              CMP      r1,#0
000030  dd00              BLE      |L5.52|
;;;96                 storetextidx -= (6-showidx);
000032  1a70              SUBS     r0,r6,r1
                  |L5.52|
;;;97             }
;;;98             for(storeshowidx=showidx; storeshowidx<=6; storeshowidx++) {
000034  4621              MOV      r1,r4
000036  e004              B        |L5.66|
                  |L5.56|
;;;99                 showstring[storeshowidx] = string[storetextidx++];
000038  9a05              LDR      r2,[sp,#0x14]
00003a  5c12              LDRB     r2,[r2,r0]
00003c  546a              STRB     r2,[r5,r1]
00003e  1c40              ADDS     r0,r0,#1
000040  1c49              ADDS     r1,r1,#1
                  |L5.66|
000042  2906              CMP      r1,#6                 ;98
000044  ddf8              BLE      |L5.56|
;;;100            }
;;;101            if(showidx!=0)
000046  2c00              CMP      r4,#0
000048  d000              BEQ      |L5.76|
00004a  1e64              SUBS     r4,r4,#1
                  |L5.76|
;;;102                showidx--;
;;;103            //printf("%s \r\n", showstring);
;;;104            LCDLIB_Printf(0, &showstring[0]);
00004c  4669              MOV      r1,sp
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       LCDLIB_Printf
;;;105            CLK_SysTickDelay(delayus);
000054  9806              LDR      r0,[sp,#0x18]
000056  f7fffffe          BL       CLK_SysTickDelay
00005a  1c76              ADDS     r6,r6,#1
                  |L5.92|
00005c  42be              CMP      r6,r7                 ;90
00005e  dbdd              BLT      |L5.28|
;;;106    
;;;107        }
;;;108    
;;;109        for(showidx=0; showidx<=6; showidx++) {
000060  2400              MOVS     r4,#0
;;;110            strcpy(tmpstring, showstring);
;;;111            for(storeshowidx=0; storeshowidx<=6; storeshowidx++) {
;;;112                for(i = 0; i < 10000; i++);
000062  4e13              LDR      r6,|L5.176|
000064  2720              MOVS     r7,#0x20              ;92
                  |L5.102|
000066  4669              MOV      r1,sp                 ;110
000068  a802              ADD      r0,sp,#8              ;110
00006a  f7fffffe          BL       strcpy
00006e  2000              MOVS     r0,#0                 ;111
000070  aa02              ADD      r2,sp,#8              ;79
                  |L5.114|
000072  2100              MOVS     r1,#0
                  |L5.116|
000074  1c49              ADDS     r1,r1,#1
000076  42b1              CMP      r1,r6
000078  d3fc              BCC      |L5.116|
;;;113    
;;;114                if((storeshowidx+1) <= 6)
00007a  1c41              ADDS     r1,r0,#1
00007c  2906              CMP      r1,#6
00007e  dc03              BGT      |L5.136|
;;;115                    showstring[storeshowidx] = tmpstring[storeshowidx+1];
000080  1811              ADDS     r1,r2,r0
000082  7849              LDRB     r1,[r1,#1]
000084  5429              STRB     r1,[r5,r0]
000086  e000              B        |L5.138|
                  |L5.136|
;;;116                else
;;;117                    showstring[storeshowidx] = ' ';
000088  542f              STRB     r7,[r5,r0]
                  |L5.138|
00008a  1c40              ADDS     r0,r0,#1
00008c  2806              CMP      r0,#6                 ;111
00008e  ddf0              BLE      |L5.114|
;;;118            }
;;;119    
;;;120            LCDLIB_Printf(0, &showstring[0]);
000090  4669              MOV      r1,sp
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       LCDLIB_Printf
;;;121            CLK_SysTickDelay(delayus);
000098  9806              LDR      r0,[sp,#0x18]
00009a  f7fffffe          BL       CLK_SysTickDelay
00009e  1c64              ADDS     r4,r4,#1
0000a0  2c06              CMP      r4,#6                 ;109
0000a2  dde0              BLE      |L5.102|
;;;122        }
;;;123    
;;;124    }
0000a4  b007              ADD      sp,sp,#0x1c
0000a6  bdf0              POP      {r4-r7,pc}
;;;125    
                          ENDP

                  |L5.168|
0000a8  20202020          DCB      "       ",0
0000ac  20202000
                  |L5.176|
                          DCD      0x00002710

;*** Start embedded assembler ***

#line 1 "..\\..\\COMMON\\LCD_Commom.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_LCD_Commom_c_e3de2c19____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_LCD_Commom_c_e3de2c19____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_LCD_Commom_c_e3de2c19____REVSH|
#line 402
|__asm___12_LCD_Commom_c_e3de2c19____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
