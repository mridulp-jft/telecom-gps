; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lcd.d --feedback=.\obj\PWRDWN_DEMO.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\LCDLib\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\lcd.crf ..\..\..\..\Library\StdDriver\src\lcd.c]
                          THUMB

                          AREA ||i.LCD_Close||, CODE, READONLY, ALIGN=2

                  LCD_Close PROC
;;;315     */
;;;316    void LCD_Close(void)
000000  4802              LDR      r0,|L1.12|
000002  6801              LDR      r1,[r0,#0]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;317    {
;;;318        LCD_DisableDisplay();
;;;319    }
00000a  4770              BX       lr
;;;320    
                          ENDP

                  |L1.12|
                          DCD      0x400b0000

                          AREA ||i.LCD_DisableBlink||, CODE, READONLY, ALIGN=2

                  LCD_DisableBlink PROC
;;;372     */
;;;373    void LCD_DisableBlink(void)
000000  4806              LDR      r0,|L2.28|
;;;374    {
;;;375        /* Disable Blink LCD */
;;;376        LCD->CTL &= ~LCD_CTL_BLINK_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2280              MOVS     r2,#0x80
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;377    
;;;378        /* Disable frame count */
;;;379        LCD->FCR = 0x00;        // disable LCD frame count
00000a  2100              MOVS     r1,#0
00000c  6301              STR      r1,[r0,#0x30]
;;;380    
;;;381        if( LCD->FCSTS & LCD_FCSTS_FCSTS_Msk)   // clear status flag
00000e  6b41              LDR      r1,[r0,#0x34]
000010  07c9              LSLS     r1,r1,#31
000012  d001              BEQ      |L2.24|
;;;382            LCD->FCSTS = LCD_FCSTS_FCSTS_Msk;
000014  2101              MOVS     r1,#1
000016  6341              STR      r1,[r0,#0x34]
                  |L2.24|
;;;383    
;;;384    }
000018  4770              BX       lr
;;;385    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x400b0000

                          AREA ||i.LCD_DisableFrameCounter||, CODE, READONLY, ALIGN=2

                  LCD_DisableFrameCounter PROC
;;;222     */
;;;223    void LCD_DisableFrameCounter(void)
000000  4804              LDR      r0,|L3.20|
;;;224    {
;;;225        LCD->FCR = 0x00;        // disable LCD frame count
000002  2100              MOVS     r1,#0
000004  6301              STR      r1,[r0,#0x30]
;;;226    
;;;227        if( LCD->FCSTS & LCD_FCSTS_FCSTS_Msk)   // clear status flag
000006  6b41              LDR      r1,[r0,#0x34]
000008  07c9              LSLS     r1,r1,#31
00000a  d001              BEQ      |L3.16|
;;;228            LCD->FCSTS = LCD_FCSTS_FCSTS_Msk;
00000c  2101              MOVS     r1,#1
00000e  6341              STR      r1,[r0,#0x34]
                  |L3.16|
;;;229    }
000010  4770              BX       lr
;;;230    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x400b0000

                          AREA ||i.LCD_DisableInt||, CODE, READONLY, ALIGN=2

                  LCD_DisableInt PROC
;;;413     */
;;;414    void LCD_DisableInt(uint32_t IntSrc)
000000  4909              LDR      r1,|L4.40|
;;;415    {
;;;416        if((IntSrc & LCD_FRAMECOUNT_INT) == LCD_FRAMECOUNT_INT ) {
000002  07c2              LSLS     r2,r0,#31
000004  d005              BEQ      |L4.18|
;;;417            LCD->FCR &= ~LCD_FCR_FCEN_Msk;
000006  6b0a              LDR      r2,[r1,#0x30]
000008  0852              LSRS     r2,r2,#1
00000a  0052              LSLS     r2,r2,#1
00000c  630a              STR      r2,[r1,#0x30]
;;;418            LCD->FCSTS = LCD_FCSTS_FCSTS_Msk;
00000e  2201              MOVS     r2,#1
000010  634a              STR      r2,[r1,#0x34]
                  |L4.18|
;;;419        }
;;;420    
;;;421        if((IntSrc & LCD_POWERDOWN_INT) == LCD_POWERDOWN_INT ) {
000012  0780              LSLS     r0,r0,#30
000014  d506              BPL      |L4.36|
;;;422            LCD->CTL &= ~LCD_CTL_PDINT_EN_Msk;
000016  6808              LDR      r0,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  0252              LSLS     r2,r2,#9
00001c  4390              BICS     r0,r0,r2
00001e  6008              STR      r0,[r1,#0]
;;;423            LCD->FCSTS = LCD_FCSTS_PDSTS_Msk;
000020  2002              MOVS     r0,#2
000022  6348              STR      r0,[r1,#0x34]
                  |L4.36|
;;;424        }
;;;425    }
000024  4770              BX       lr
;;;426    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x400b0000

                          AREA ||i.LCD_EnableBlink||, CODE, READONLY, ALIGN=2

                  LCD_EnableBlink PROC
;;;329     */
;;;330    uint32_t LCD_EnableBlink(uint32_t u32ms)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;331    {
;;;332        uint32_t prescale=LCD_FCPRESC_DIV1, div=1;
;;;333        uint32_t framecount;
;;;334    
;;;335        if((1000/u32ms) > g_LCDFrameRate) u32ms = (1000/g_LCDFrameRate);
000002  207d              MOVS     r0,#0x7d
000004  2600              MOVS     r6,#0                 ;332
000006  2401              MOVS     r4,#1                 ;332
000008  00c0              LSLS     r0,r0,#3
00000a  9900              LDR      r1,[sp,#0]
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  4605              MOV      r5,r0
000012  482c              LDR      r0,|L5.196|
000014  6807              LDR      r7,[r0,#0]  ; g_LCDFrameRate
000016  207d              MOVS     r0,#0x7d
000018  00c0              LSLS     r0,r0,#3
00001a  4639              MOV      r1,r7
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  42bd              CMP      r5,r7
000022  d900              BLS      |L5.38|
000024  9000              STR      r0,[sp,#0]
                  |L5.38|
;;;336    
;;;337        framecount = (uint32_t) (u32ms / (1000/g_LCDFrameRate)) ;
000026  4601              MOV      r1,r0
000028  9800              LDR      r0,[sp,#0]
00002a  f7fffffe          BL       __aeabi_uidivmod
00002e  4605              MOV      r5,r0
;;;338    
;;;339        if(framecount > 0x3F) {
000030  283f              CMP      r0,#0x3f
000032  d922              BLS      |L5.122|
;;;340            for(div=2; div<=8; div*=2) {
000034  2402              MOVS     r4,#2
000036  267d              MOVS     r6,#0x7d              ;335
000038  00f6              LSLS     r6,r6,#3              ;335
                  |L5.58|
;;;341                framecount = (uint32_t) (u32ms / (1000/(g_LCDFrameRate/div)) );
00003a  4621              MOV      r1,r4
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  4601              MOV      r1,r0
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  4601              MOV      r1,r0
00004c  9800              LDR      r0,[sp,#0]
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  4605              MOV      r5,r0
;;;342    
;;;343                if( framecount <= 0x40 )
000054  2840              CMP      r0,#0x40
000056  d902              BLS      |L5.94|
000058  0064              LSLS     r4,r4,#1              ;340
00005a  2c08              CMP      r4,#8                 ;340
00005c  d9ed              BLS      |L5.58|
                  |L5.94|
;;;344                    break;
;;;345            }
;;;346            if(div==2) prescale = LCD_FCPRESC_DIV2;
00005e  2c02              CMP      r4,#2
000060  d005              BEQ      |L5.110|
;;;347            else if(div==4) prescale = LCD_FCPRESC_DIV4;
000062  2c04              CMP      r4,#4
000064  d005              BEQ      |L5.114|
;;;348            else if(div==8) prescale = LCD_FCPRESC_DIV8;
000066  2c08              CMP      r4,#8
000068  d005              BEQ      |L5.118|
;;;349            else return 0;
00006a  2000              MOVS     r0,#0
;;;350        } else if(framecount == 0) {
;;;351            framecount = 1;
;;;352        }
;;;353    
;;;354        LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | prescale;
;;;355        LCD->FCR = LCD->FCR & ~LCD_FCR_FCV_Msk | ((framecount - 1) << LCD_FCR_FCV_Pos);
;;;356        LCD->FCR |= LCD_FCR_FCEN_Msk;
;;;357    
;;;358        /* Enable Blink LCD */
;;;359        LCD->CTL |= LCD_CTL_BLINK_Msk;
;;;360    
;;;361        return ( (framecount*1000)/(g_LCDFrameRate/div) );
;;;362    }
00006c  bdf8              POP      {r3-r7,pc}
                  |L5.110|
00006e  2604              MOVS     r6,#4                 ;346
000070  e006              B        |L5.128|
                  |L5.114|
000072  2608              MOVS     r6,#8                 ;347
000074  e004              B        |L5.128|
                  |L5.118|
000076  260c              MOVS     r6,#0xc               ;348
000078  e002              B        |L5.128|
                  |L5.122|
00007a  2d00              CMP      r5,#0                 ;350
00007c  d100              BNE      |L5.128|
00007e  2501              MOVS     r5,#1                 ;351
                  |L5.128|
000080  4811              LDR      r0,|L5.200|
000082  6b01              LDR      r1,[r0,#0x30]         ;354
000084  220c              MOVS     r2,#0xc               ;354
000086  4391              BICS     r1,r1,r2              ;354
000088  4331              ORRS     r1,r1,r6              ;354
00008a  6301              STR      r1,[r0,#0x30]         ;354
00008c  6b01              LDR      r1,[r0,#0x30]         ;355
00008e  223f              MOVS     r2,#0x3f              ;355
000090  0112              LSLS     r2,r2,#4              ;355
000092  4391              BICS     r1,r1,r2              ;355
000094  012a              LSLS     r2,r5,#4              ;355
000096  3a10              SUBS     r2,r2,#0x10           ;355
000098  4311              ORRS     r1,r1,r2              ;355
00009a  6301              STR      r1,[r0,#0x30]         ;355
00009c  6b01              LDR      r1,[r0,#0x30]         ;356
00009e  2201              MOVS     r2,#1                 ;356
0000a0  4311              ORRS     r1,r1,r2              ;356
0000a2  6301              STR      r1,[r0,#0x30]         ;356
0000a4  6801              LDR      r1,[r0,#0]            ;359
0000a6  2280              MOVS     r2,#0x80              ;359
0000a8  4311              ORRS     r1,r1,r2              ;359
0000aa  6001              STR      r1,[r0,#0]            ;359
0000ac  4621              MOV      r1,r4                 ;361
0000ae  4638              MOV      r0,r7                 ;361
0000b0  f7fffffe          BL       __aeabi_uidivmod
0000b4  4601              MOV      r1,r0                 ;361
0000b6  207d              MOVS     r0,#0x7d              ;361
0000b8  00c0              LSLS     r0,r0,#3              ;361
0000ba  4368              MULS     r0,r5,r0              ;361
0000bc  f7fffffe          BL       __aeabi_uidivmod
0000c0  bdf8              POP      {r3-r7,pc}
;;;363    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L5.196|
                          DCD      ||.data||
                  |L5.200|
                          DCD      0x400b0000

                          AREA ||i.LCD_EnableFrameCounter||, CODE, READONLY, ALIGN=2

                  LCD_EnableFrameCounter PROC
;;;176     */
;;;177    uint32_t LCD_EnableFrameCounter(uint32_t u32Count)
000000  b570              PUSH     {r4-r6,lr}
;;;178    {
;;;179        uint32_t div = 1;   // default prediv == LCD_FCPRESC_DIV1
000002  2401              MOVS     r4,#1
;;;180    
;;;181        LCD->FCR = 0x00;
000004  4d19              LDR      r5,|L6.108|
000006  2100              MOVS     r1,#0
000008  6329              STR      r1,[r5,#0x30]
;;;182        LCD->FCSTS |= LCD_FCSTS_FCSTS_Msk;  // clear fcsts flag
00000a  6b69              LDR      r1,[r5,#0x34]
00000c  4626              MOV      r6,r4
00000e  4331              ORRS     r1,r1,r6
000010  6369              STR      r1,[r5,#0x34]
;;;183    
;;;184        if(u32Count == 0) return 0;
000012  2800              CMP      r0,#0
000014  d029              BEQ      |L6.106|
;;;185    
;;;186        if(u32Count > 0x3F) { // top value max. 63 = 0x3F
;;;187            div = u32Count/64;
;;;188    
;;;189            if(div > 3) {
;;;190                div = 8;
;;;191                LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | LCD_FCPRESC_DIV8;
000016  220c              MOVS     r2,#0xc
000018  283f              CMP      r0,#0x3f              ;186
00001a  d918              BLS      |L6.78|
00001c  0981              LSRS     r1,r0,#6              ;187
00001e  2903              CMP      r1,#3                 ;189
000020  d903              BLS      |L6.42|
000022  6b29              LDR      r1,[r5,#0x30]
000024  2408              MOVS     r4,#8                 ;190
000026  4311              ORRS     r1,r1,r2
000028  e00a              B        |L6.64|
                  |L6.42|
;;;192            } else if(div > 1) {
00002a  2901              CMP      r1,#1
00002c  d904              BLS      |L6.56|
;;;193                div = 4;
;;;194                LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | LCD_FCPRESC_DIV4;
00002e  6b29              LDR      r1,[r5,#0x30]
000030  2404              MOVS     r4,#4                 ;193
000032  4391              BICS     r1,r1,r2
000034  3108              ADDS     r1,r1,#8
000036  e003              B        |L6.64|
                  |L6.56|
;;;195            } else {
;;;196                div = 2;
;;;197                LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | LCD_FCPRESC_DIV2;
000038  6b29              LDR      r1,[r5,#0x30]
00003a  2402              MOVS     r4,#2                 ;196
00003c  4391              BICS     r1,r1,r2
00003e  1d09              ADDS     r1,r1,#4
                  |L6.64|
000040  6329              STR      r1,[r5,#0x30]         ;194
;;;198            }
;;;199    
;;;200            u32Count = (u32Count+(div/2))/div;
000042  0861              LSRS     r1,r4,#1
000044  1808              ADDS     r0,r1,r0
000046  4621              MOV      r1,r4
000048  f7fffffe          BL       __aeabi_uidivmod
00004c  e002              B        |L6.84|
                  |L6.78|
;;;201        } else {
;;;202            div = 1;
;;;203            LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | LCD_FCPRESC_DIV1;
00004e  6b29              LDR      r1,[r5,#0x30]
000050  4391              BICS     r1,r1,r2
000052  6329              STR      r1,[r5,#0x30]
                  |L6.84|
;;;204        }
;;;205    
;;;206        LCD->FCR = LCD->FCR & ~LCD_FCR_FCV_Msk | (u32Count << LCD_FCR_FCV_Pos);
000054  6b29              LDR      r1,[r5,#0x30]
000056  223f              MOVS     r2,#0x3f
000058  0112              LSLS     r2,r2,#4
00005a  4391              BICS     r1,r1,r2
00005c  0102              LSLS     r2,r0,#4
00005e  4311              ORRS     r1,r1,r2
000060  6329              STR      r1,[r5,#0x30]
;;;207    
;;;208        u32Count = u32Count*div;
;;;209    
;;;210        LCD->FCR |= LCD_FCR_FCEN_Msk;       // enable LCD frame count
000062  6b29              LDR      r1,[r5,#0x30]
000064  4360              MULS     r0,r4,r0              ;208
000066  4331              ORRS     r1,r1,r6
000068  6329              STR      r1,[r5,#0x30]
                  |L6.106|
;;;211    
;;;212        return u32Count;
;;;213    }
00006a  bd70              POP      {r4-r6,pc}
;;;214    
                          ENDP

                  |L6.108|
                          DCD      0x400b0000

                          AREA ||i.LCD_EnableInt||, CODE, READONLY, ALIGN=2

                  LCD_EnableInt PROC
;;;393     */
;;;394    void LCD_EnableInt(uint32_t IntSrc)
000000  4907              LDR      r1,|L7.32|
;;;395    {
;;;396        if((IntSrc & LCD_FRAMECOUNT_INT) == LCD_FRAMECOUNT_INT ) {
000002  07c2              LSLS     r2,r0,#31
000004  d003              BEQ      |L7.14|
;;;397            LCD->FCR |= LCD_FCR_FCEN_Msk;
000006  6b0a              LDR      r2,[r1,#0x30]
000008  2301              MOVS     r3,#1
00000a  431a              ORRS     r2,r2,r3
00000c  630a              STR      r2,[r1,#0x30]
                  |L7.14|
;;;398        }
;;;399    
;;;400        if((IntSrc & LCD_POWERDOWN_INT) == LCD_POWERDOWN_INT ) {
00000e  0780              LSLS     r0,r0,#30
000010  d504              BPL      |L7.28|
;;;401            LCD->CTL |= LCD_CTL_PDINT_EN_Msk;
000012  6808              LDR      r0,[r1,#0]
000014  2201              MOVS     r2,#1
000016  0252              LSLS     r2,r2,#9
000018  4310              ORRS     r0,r0,r2
00001a  6008              STR      r0,[r1,#0]
                  |L7.28|
;;;402        }
;;;403    
;;;404    }
00001c  4770              BX       lr
;;;405    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x400b0000

                          AREA ||i.LCD_Open||, CODE, READONLY, ALIGN=2

                  LCD_Open PROC
;;;245     */
;;;246    uint32_t LCD_Open(uint32_t u32DrivingType, uint32_t u32ComNum, uint32_t u32BiasLevel, uint32_t u32FramerateDiv, uint32_t u32DrivingVol)
000000  b5f0              PUSH     {r4-r7,lr}
;;;247    {
000002  b08f              SUB      sp,sp,#0x3c
000004  4617              MOV      r7,r2
000006  460e              MOV      r6,r1
000008  4604              MOV      r4,r0
00000a  461d              MOV      r5,r3
;;;248        uint32_t clkdiv, muldiv;
;;;249        uint32_t lcd_freq_div[] = {32, 64, 96, 128, 192, 256, 384, 512};
00000c  2220              MOVS     r2,#0x20
00000e  4945              LDR      r1,|L8.292|
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memcpy4
;;;250        uint32_t multiplex_freq_div[] = {2, 4, 6, 8, 10, 12};
000016  4943              LDR      r1,|L8.292|
000018  2218              MOVS     r2,#0x18
00001a  3120              ADDS     r1,r1,#0x20
00001c  a808              ADD      r0,sp,#0x20
00001e  f7fffffe          BL       __aeabi_memcpy4
;;;251        uint32_t u32clk_src;
;;;252    
;;;253        /* IP reset */
;;;254        SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_LCD_RST_Msk;
000022  2005              MOVS     r0,#5
000024  0700              LSLS     r0,r0,#28
000026  68c1              LDR      r1,[r0,#0xc]
000028  2201              MOVS     r2,#1
00002a  0692              LSLS     r2,r2,#26
00002c  4311              ORRS     r1,r1,r2
00002e  60c1              STR      r1,[r0,#0xc]
;;;255        SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_LCD_RST_Msk;
000030  68c1              LDR      r1,[r0,#0xc]
000032  4391              BICS     r1,r1,r2
000034  60c1              STR      r1,[r0,#0xc]
000036  4b3c              LDR      r3,|L8.296|
000038  6818              LDR      r0,[r3,#0]
00003a  0840              LSRS     r0,r0,#1
00003c  0040              LSLS     r0,r0,#1
00003e  6018              STR      r0,[r3,#0]
;;;256    
;;;257        LCD_DisableDisplay();
;;;258    
;;;259        /* Turn all segments off */
;;;260        LCD_SetAllPixels(0);
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       LCD_SetAllPixels
;;;261    
;;;262    
;;;263        switch(u32DrivingType) {
;;;264        case LCD_C_TYPE:
;;;265        case LCD_EXTERNAL_C_TYPE:
;;;266    
;;;267            LCD->DISPCTL &= ~LCD_DISPCTL_BV_SEL_Msk;        // internal source for charge pump
000046  2040              MOVS     r0,#0x40
;;;268            LCD->DISPCTL = LCD->DISPCTL & ~LCD_DISPCTL_CPUMP_FREQ_Msk | (LCD_CPUMP_DIV1);
;;;269            LCD->DISPCTL = LCD->DISPCTL & ~LCD_DISPCTL_CPUMP_VOL_SET_Msk | (u32DrivingVol);
;;;270            LCD->DISPCTL &= ~LCD_DISPCTL_IBRL_EN_Msk;
000048  2210              MOVS     r2,#0x10
00004a  2c00              CMP      r4,#0                 ;263
00004c  d005              BEQ      |L8.90|
00004e  2c01              CMP      r4,#1                 ;263
000050  d019              BEQ      |L8.134|
000052  2c02              CMP      r4,#2                 ;263
000054  d017              BEQ      |L8.134|
000056  2c03              CMP      r4,#3                 ;263
000058  d125              BNE      |L8.166|
                  |L8.90|
00005a  6859              LDR      r1,[r3,#4]            ;267
00005c  4381              BICS     r1,r1,r0              ;267
00005e  6059              STR      r1,[r3,#4]            ;267
000060  6858              LDR      r0,[r3,#4]            ;268
000062  2107              MOVS     r1,#7                 ;268
000064  02c9              LSLS     r1,r1,#11             ;268
000066  4388              BICS     r0,r0,r1              ;268
000068  6058              STR      r0,[r3,#4]            ;268
00006a  6858              LDR      r0,[r3,#4]            ;269
00006c  10c9              ASRS     r1,r1,#3              ;269
00006e  4388              BICS     r0,r0,r1              ;269
000070  9914              LDR      r1,[sp,#0x50]         ;269
000072  4308              ORRS     r0,r0,r1              ;269
000074  6058              STR      r0,[r3,#4]            ;269
000076  6858              LDR      r0,[r3,#4]
000078  4390              BICS     r0,r0,r2
00007a  6058              STR      r0,[r3,#4]
;;;271            LCD->DISPCTL |= LCD_DISPCTL_CPUMP_EN_Msk;       // enable charge pump
00007c  6858              LDR      r0,[r3,#4]
00007e  2101              MOVS     r1,#1
000080  4308              ORRS     r0,r0,r1
000082  6058              STR      r0,[r3,#4]
;;;272    
;;;273            break;
000084  e00f              B        |L8.166|
                  |L8.134|
;;;274    
;;;275        case LCD_EXTERNAL_R_TYPE:
;;;276        case LCD_INTERNAL_R_TYPE:
;;;277    
;;;278            LCD->DISPCTL &= ~LCD_DISPCTL_CPUMP_EN_Msk;
000086  6859              LDR      r1,[r3,#4]
000088  0849              LSRS     r1,r1,#1
00008a  0049              LSLS     r1,r1,#1
00008c  6059              STR      r1,[r3,#4]
;;;279            LCD->DISPCTL |= LCD_DISPCTL_BV_SEL_Msk;
00008e  6859              LDR      r1,[r3,#4]
000090  4301              ORRS     r1,r1,r0
000092  6059              STR      r1,[r3,#4]
;;;280            LCD->DISPCTL &= ~LCD_DISPCTL_IBRL_EN_Msk;
000094  6858              LDR      r0,[r3,#4]
000096  4390              BICS     r0,r0,r2
000098  6058              STR      r0,[r3,#4]
;;;281            LCD->DISPCTL |= (u32DrivingType == LCD_INTERNAL_R_TYPE)?LCD_DISPCTL_IBRL_EN_Msk:0;
00009a  6859              LDR      r1,[r3,#4]
00009c  2c02              CMP      r4,#2
00009e  d01c              BEQ      |L8.218|
0000a0  2000              MOVS     r0,#0
                  |L8.162|
0000a2  4301              ORRS     r1,r1,r0
0000a4  6059              STR      r1,[r3,#4]
                  |L8.166|
;;;282            break;
;;;283    
;;;284        };
;;;285    
;;;286        LCD->CTL &= ~LCD_CTL_FREQ_Msk;
0000a6  6818              LDR      r0,[r3,#0]
0000a8  2170              MOVS     r1,#0x70
0000aa  4388              BICS     r0,r0,r1
0000ac  6018              STR      r0,[r3,#0]
;;;287        LCD->CTL |= u32FramerateDiv;
0000ae  6818              LDR      r0,[r3,#0]
0000b0  4328              ORRS     r0,r0,r5
0000b2  6018              STR      r0,[r3,#0]
;;;288    
;;;289        LCD->CTL = (LCD->CTL & ~LCD_CTL_MUX_Msk) | ((u32ComNum - 1) << LCD_CTL_MUX_Pos);
0000b4  6818              LDR      r0,[r3,#0]
0000b6  210e              MOVS     r1,#0xe
0000b8  4388              BICS     r0,r0,r1
0000ba  0071              LSLS     r1,r6,#1
0000bc  1e89              SUBS     r1,r1,#2
0000be  4308              ORRS     r0,r0,r1
0000c0  6018              STR      r0,[r3,#0]
;;;290        LCD->DISPCTL = LCD->DISPCTL & ~LCD_DISPCTL_BIAS_SEL_Msk | u32BiasLevel;
0000c2  6858              LDR      r0,[r3,#4]
0000c4  2106              MOVS     r1,#6
0000c6  4388              BICS     r0,r0,r1
0000c8  4338              ORRS     r0,r0,r7
0000ca  6058              STR      r0,[r3,#4]
;;;291    
;;;292        if((CLK->CLKSEL1 & CLK_CLKSEL1_LCD_S_Msk) == 0)
0000cc  4817              LDR      r0,|L8.300|
0000ce  6940              LDR      r0,[r0,#0x14]
0000d0  0340              LSLS     r0,r0,#13
0000d2  d404              BMI      |L8.222|
;;;293            u32clk_src = 32 * 1024;
0000d4  2401              MOVS     r4,#1
0000d6  03e4              LSLS     r4,r4,#15
0000d8  e003              B        |L8.226|
                  |L8.218|
0000da  2010              MOVS     r0,#0x10              ;281
0000dc  e7e1              B        |L8.162|
                  |L8.222|
;;;294        else
;;;295            u32clk_src = 10 * 1024;
0000de  2405              MOVS     r4,#5
0000e0  02e4              LSLS     r4,r4,#11
                  |L8.226|
;;;296    
;;;297        clkdiv = (LCD->CTL & LCD_CTL_FREQ_Msk) >> LCD_CTL_FREQ_Pos;
0000e2  6818              LDR      r0,[r3,#0]
;;;298        muldiv = (LCD->CTL & LCD_CTL_MUX_Msk) >> LCD_CTL_MUX_Pos;
0000e4  6819              LDR      r1,[r3,#0]
;;;299    
;;;300        g_LCDFreq = (double)u32clk_src / lcd_freq_div[clkdiv];
;;;301        g_LCDFrameRate = (uint32_t)g_LCDFreq / multiplex_freq_div[muldiv];
;;;302    
;;;303        return g_LCDFrameRate;
;;;304    }
0000e6  0640              LSLS     r0,r0,#25
0000e8  0f40              LSRS     r0,r0,#29
0000ea  0709              LSLS     r1,r1,#28
0000ec  0f4f              LSRS     r7,r1,#29
0000ee  0080              LSLS     r0,r0,#2              ;300
0000f0  4669              MOV      r1,sp                 ;300
0000f2  5808              LDR      r0,[r1,r0]            ;300
0000f4  f7fffffe          BL       __aeabi_ui2d
0000f8  4605              MOV      r5,r0                 ;300
0000fa  460e              MOV      r6,r1                 ;300
0000fc  4620              MOV      r0,r4                 ;300
0000fe  f7fffffe          BL       __aeabi_ui2d
000102  4633              MOV      r3,r6                 ;300
000104  462a              MOV      r2,r5                 ;300
000106  f7fffffe          BL       __aeabi_ddiv
00010a  4c09              LDR      r4,|L8.304|
00010c  60e1              STR      r1,[r4,#0xc]          ;301  ; g_LCDFreq
00010e  60a0              STR      r0,[r4,#8]            ;301  ; g_LCDFreq
000110  f7fffffe          BL       __aeabi_d2uiz
000114  00b9              LSLS     r1,r7,#2              ;301
000116  aa08              ADD      r2,sp,#0x20           ;301
000118  5851              LDR      r1,[r2,r1]            ;301
00011a  f7fffffe          BL       __aeabi_uidivmod
00011e  6020              STR      r0,[r4,#0]            ;301  ; g_LCDFrameRate
000120  b00f              ADD      sp,sp,#0x3c
000122  bdf0              POP      {r4-r7,pc}
;;;305    
                          ENDP

                  |L8.292|
                          DCD      ||.constdata||
                  |L8.296|
                          DCD      0x400b0000
                  |L8.300|
                          DCD      0x50000200
                  |L8.304|
                          DCD      ||.data||

                          AREA ||i.LCD_SetAllPixels||, CODE, READONLY, ALIGN=2

                  LCD_SetAllPixels PROC
;;;135     */
;;;136    void LCD_SetAllPixels(uint32_t u32OnOff)
000000  2800              CMP      r0,#0
;;;137    {
000002  d001              BEQ      |L9.8|
;;;138        uint32_t u32SetValue;
;;;139    
;;;140        if(u32OnOff) {
;;;141            u32SetValue = 0xFFFFFFFF;
000004  2000              MOVS     r0,#0
000006  43c0              MVNS     r0,r0
                  |L9.8|
;;;142        } else {
;;;143            u32SetValue = 0x00000000;
;;;144        }
;;;145    
;;;146        LCD->MEM_0 = u32SetValue;
000008  490e              LDR      r1,|L9.68|
00000a  6088              STR      r0,[r1,#8]
;;;147        LCD->MEM_1 = u32SetValue;
00000c  60c8              STR      r0,[r1,#0xc]
;;;148        LCD->MEM_2 = u32SetValue;
00000e  6108              STR      r0,[r1,#0x10]
;;;149        LCD->MEM_3 = u32SetValue;
000010  6148              STR      r0,[r1,#0x14]
;;;150        LCD->MEM_4 = u32SetValue;
000012  6188              STR      r0,[r1,#0x18]
;;;151        LCD->MEM_5 = u32SetValue;
000014  61c8              STR      r0,[r1,#0x1c]
;;;152        LCD->MEM_6 = u32SetValue;
000016  6208              STR      r0,[r1,#0x20]
;;;153        LCD->MEM_7 = u32SetValue;
000018  6248              STR      r0,[r1,#0x24]
;;;154        LCD->MEM_8 = u32SetValue;
00001a  6288              STR      r0,[r1,#0x28]
;;;155    
;;;156        if(CyclesPerUs > 0)
00001c  480a              LDR      r0,|L9.72|
;;;157            SysTick->LOAD = 300 * CyclesPerUs;
00001e  6801              LDR      r1,[r0,#0]  ; CyclesPerUs
000020  480a              LDR      r0,|L9.76|
000022  2900              CMP      r1,#0                 ;156
000024  d003              BEQ      |L9.46|
000026  22ff              MOVS     r2,#0xff
000028  322d              ADDS     r2,r2,#0x2d
00002a  4351              MULS     r1,r2,r1
00002c  e000              B        |L9.48|
                  |L9.46|
;;;158        else
;;;159            SysTick->LOAD = 15;
00002e  210f              MOVS     r1,#0xf
                  |L9.48|
000030  6141              STR      r1,[r0,#0x14]
;;;160        SysTick->VAL  =  (0x00);
000032  2100              MOVS     r1,#0
000034  6181              STR      r1,[r0,#0x18]
;;;161        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000036  2105              MOVS     r1,#5
000038  6101              STR      r1,[r0,#0x10]
                  |L9.58|
;;;162    
;;;163        /* Waiting for down-count to zero */
;;;164        while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
00003a  6901              LDR      r1,[r0,#0x10]
00003c  03c9              LSLS     r1,r1,#15
00003e  d5fc              BPL      |L9.58|
;;;165    }
000040  4770              BX       lr
;;;166    
                          ENDP

000042  0000              DCW      0x0000
                  |L9.68|
                          DCD      0x400b0000
                  |L9.72|
                          DCD      CyclesPerUs
                  |L9.76|
                          DCD      0xe000e000

                          AREA ||i.LCD_SetPixel||, CODE, READONLY, ALIGN=2

                  LCD_SetPixel PROC
;;;63      */
;;;64     void LCD_SetPixel(uint32_t u32Com, uint32_t u32Seg, uint32_t u32OnFlag)
000000  b530              PUSH     {r4,r5,lr}
;;;65     {
;;;66         int32_t memnum = u32Seg / 4;
000002  088c              LSRS     r4,r1,#2
;;;67         int32_t seg_shift = 8*(u32Seg-(4*memnum));
;;;68     
;;;69         if(u32OnFlag) {
;;;70             if(memnum==0) {
;;;71                 LCD->MEM_0 |= (1<<u32Com)<<seg_shift;
000004  2301              MOVS     r3,#1
000006  4083              LSLS     r3,r3,r0
000008  0888              LSRS     r0,r1,#2              ;66
00000a  0080              LSLS     r0,r0,#2              ;67
00000c  1a08              SUBS     r0,r1,r0              ;67
00000e  00c0              LSLS     r0,r0,#3              ;67
000010  4d42              LDR      r5,|L10.284|
000012  4083              LSLS     r3,r3,r0
000014  2a00              CMP      r2,#0                 ;69
000016  d032              BEQ      |L10.126|
000018  2c00              CMP      r4,#0                 ;70
00001a  d012              BEQ      |L10.66|
;;;72             } else if(memnum==1) {
00001c  2c01              CMP      r4,#1
00001e  d013              BEQ      |L10.72|
;;;73                 LCD->MEM_1 |= (1<<u32Com)<<seg_shift;
;;;74             } else if(memnum==2) {
000020  2c02              CMP      r4,#2
000022  d014              BEQ      |L10.78|
;;;75                 LCD->MEM_2 |= (1<<u32Com)<<seg_shift;
;;;76             } else if(memnum==3) {
000024  2c03              CMP      r4,#3
000026  d015              BEQ      |L10.84|
;;;77                 LCD->MEM_3 |= (1<<u32Com)<<seg_shift;
;;;78             } else if(memnum==4) {
000028  2c04              CMP      r4,#4
00002a  d016              BEQ      |L10.90|
;;;79                 LCD->MEM_4 |= (1<<u32Com)<<seg_shift;
;;;80             } else if(memnum==5) {
00002c  2c05              CMP      r4,#5
00002e  d017              BEQ      |L10.96|
;;;81                 LCD->MEM_5 |= (1<<u32Com)<<seg_shift;
;;;82             } else if(memnum==6) {
000030  2c06              CMP      r4,#6
000032  d018              BEQ      |L10.102|
;;;83                 LCD->MEM_6 |= (1<<u32Com)<<seg_shift;
;;;84             } else if(memnum==7) {
000034  2c07              CMP      r4,#7
000036  d019              BEQ      |L10.108|
;;;85                 LCD->MEM_7 |= (1<<u32Com)<<seg_shift;
;;;86             } else if(memnum==8) {
000038  2c08              CMP      r4,#8
00003a  d01a              BEQ      |L10.114|
;;;87                 LCD->MEM_8 |= (1<<u32Com)<<seg_shift;
;;;88             } else if(memnum==9) {
00003c  2c09              CMP      r4,#9
00003e  d01b              BEQ      |L10.120|
000040  e059              B        |L10.246|
                  |L10.66|
000042  68a8              LDR      r0,[r5,#8]            ;71
000044  4318              ORRS     r0,r0,r3              ;71
000046  e031              B        |L10.172|
                  |L10.72|
000048  68e8              LDR      r0,[r5,#0xc]          ;73
00004a  4318              ORRS     r0,r0,r3              ;73
00004c  e032              B        |L10.180|
                  |L10.78|
00004e  6928              LDR      r0,[r5,#0x10]         ;75
000050  4318              ORRS     r0,r0,r3              ;75
000052  e033              B        |L10.188|
                  |L10.84|
000054  6968              LDR      r0,[r5,#0x14]         ;77
000056  4318              ORRS     r0,r0,r3              ;77
000058  e034              B        |L10.196|
                  |L10.90|
00005a  69a8              LDR      r0,[r5,#0x18]         ;79
00005c  4318              ORRS     r0,r0,r3              ;79
00005e  e035              B        |L10.204|
                  |L10.96|
000060  69e8              LDR      r0,[r5,#0x1c]         ;81
000062  4318              ORRS     r0,r0,r3              ;81
000064  e036              B        |L10.212|
                  |L10.102|
000066  6a28              LDR      r0,[r5,#0x20]         ;83
000068  4318              ORRS     r0,r0,r3              ;83
00006a  e037              B        |L10.220|
                  |L10.108|
00006c  6a68              LDR      r0,[r5,#0x24]         ;85
00006e  4318              ORRS     r0,r0,r3              ;85
000070  e038              B        |L10.228|
                  |L10.114|
000072  6aa8              LDR      r0,[r5,#0x28]         ;87
000074  4318              ORRS     r0,r0,r3              ;87
000076  e039              B        |L10.236|
                  |L10.120|
;;;89                 LCD->MEM_9 |= (1<<u32Com)<<seg_shift;
000078  6ae8              LDR      r0,[r5,#0x2c]
00007a  4318              ORRS     r0,r0,r3
00007c  e03a              B        |L10.244|
                  |L10.126|
;;;90             }
;;;91         } else {
;;;92             if(memnum==0) {
00007e  2c00              CMP      r4,#0
000080  d012              BEQ      |L10.168|
;;;93                 LCD->MEM_0 &= ~((1<<u32Com)<<seg_shift);
;;;94             } else if(memnum==1) {
000082  2c01              CMP      r4,#1
000084  d014              BEQ      |L10.176|
;;;95                 LCD->MEM_1 &= ~((1<<u32Com)<<seg_shift);
;;;96             } else if(memnum==2) {
000086  2c02              CMP      r4,#2
000088  d016              BEQ      |L10.184|
;;;97                 LCD->MEM_2 &= ~((1<<u32Com)<<seg_shift);
;;;98             } else if(memnum==3) {
00008a  2c03              CMP      r4,#3
00008c  d018              BEQ      |L10.192|
;;;99                 LCD->MEM_3 &= ~((1<<u32Com)<<seg_shift);
;;;100            } else if(memnum==4) {
00008e  2c04              CMP      r4,#4
000090  d01a              BEQ      |L10.200|
;;;101                LCD->MEM_4 &= ~((1<<u32Com)<<seg_shift);
;;;102            } else if(memnum==5) {
000092  2c05              CMP      r4,#5
000094  d01c              BEQ      |L10.208|
;;;103                LCD->MEM_5 &= ~((1<<u32Com)<<seg_shift);
;;;104            } else if(memnum==6) {
000096  2c06              CMP      r4,#6
000098  d01e              BEQ      |L10.216|
;;;105                LCD->MEM_6 &= ~((1<<u32Com)<<seg_shift);
;;;106            } else if(memnum==7) {
00009a  2c07              CMP      r4,#7
00009c  d020              BEQ      |L10.224|
;;;107                LCD->MEM_7 &= ~((1<<u32Com)<<seg_shift);
;;;108            } else if(memnum==8) {
00009e  2c08              CMP      r4,#8
0000a0  d022              BEQ      |L10.232|
;;;109                LCD->MEM_8 &= ~((1<<u32Com)<<seg_shift);
;;;110            } else if(memnum==9) {
0000a2  2c09              CMP      r4,#9
0000a4  d024              BEQ      |L10.240|
0000a6  e026              B        |L10.246|
                  |L10.168|
0000a8  68a8              LDR      r0,[r5,#8]            ;93
0000aa  4398              BICS     r0,r0,r3              ;93
                  |L10.172|
0000ac  60a8              STR      r0,[r5,#8]            ;93
0000ae  e022              B        |L10.246|
                  |L10.176|
0000b0  68e8              LDR      r0,[r5,#0xc]          ;95
0000b2  4398              BICS     r0,r0,r3              ;95
                  |L10.180|
0000b4  60e8              STR      r0,[r5,#0xc]          ;95
0000b6  e01e              B        |L10.246|
                  |L10.184|
0000b8  6928              LDR      r0,[r5,#0x10]         ;97
0000ba  4398              BICS     r0,r0,r3              ;97
                  |L10.188|
0000bc  6128              STR      r0,[r5,#0x10]         ;97
0000be  e01a              B        |L10.246|
                  |L10.192|
0000c0  6968              LDR      r0,[r5,#0x14]         ;99
0000c2  4398              BICS     r0,r0,r3              ;99
                  |L10.196|
0000c4  6168              STR      r0,[r5,#0x14]         ;99
0000c6  e016              B        |L10.246|
                  |L10.200|
0000c8  69a8              LDR      r0,[r5,#0x18]         ;101
0000ca  4398              BICS     r0,r0,r3              ;101
                  |L10.204|
0000cc  61a8              STR      r0,[r5,#0x18]         ;101
0000ce  e012              B        |L10.246|
                  |L10.208|
0000d0  69e8              LDR      r0,[r5,#0x1c]         ;103
0000d2  4398              BICS     r0,r0,r3              ;103
                  |L10.212|
0000d4  61e8              STR      r0,[r5,#0x1c]         ;103
0000d6  e00e              B        |L10.246|
                  |L10.216|
0000d8  6a28              LDR      r0,[r5,#0x20]         ;105
0000da  4398              BICS     r0,r0,r3              ;105
                  |L10.220|
0000dc  6228              STR      r0,[r5,#0x20]         ;105
0000de  e00a              B        |L10.246|
                  |L10.224|
0000e0  6a68              LDR      r0,[r5,#0x24]         ;107
0000e2  4398              BICS     r0,r0,r3              ;107
                  |L10.228|
0000e4  6268              STR      r0,[r5,#0x24]         ;107
0000e6  e006              B        |L10.246|
                  |L10.232|
0000e8  6aa8              LDR      r0,[r5,#0x28]         ;109
0000ea  4398              BICS     r0,r0,r3              ;109
                  |L10.236|
0000ec  62a8              STR      r0,[r5,#0x28]         ;109
0000ee  e002              B        |L10.246|
                  |L10.240|
;;;111                LCD->MEM_9 &= ~((1<<u32Com)<<seg_shift);
0000f0  6ae8              LDR      r0,[r5,#0x2c]
0000f2  4398              BICS     r0,r0,r3
                  |L10.244|
0000f4  62e8              STR      r0,[r5,#0x2c]
                  |L10.246|
;;;112            }
;;;113    
;;;114        }
;;;115    
;;;116        if(CyclesPerUs > 0)
0000f6  480a              LDR      r0,|L10.288|
;;;117            SysTick->LOAD = 300 * CyclesPerUs;
0000f8  6801              LDR      r1,[r0,#0]  ; CyclesPerUs
0000fa  480a              LDR      r0,|L10.292|
0000fc  2900              CMP      r1,#0                 ;116
0000fe  d003              BEQ      |L10.264|
000100  22ff              MOVS     r2,#0xff
000102  322d              ADDS     r2,r2,#0x2d
000104  4351              MULS     r1,r2,r1
000106  e000              B        |L10.266|
                  |L10.264|
;;;118        else
;;;119            SysTick->LOAD = 15;
000108  210f              MOVS     r1,#0xf
                  |L10.266|
00010a  6141              STR      r1,[r0,#0x14]
;;;120        SysTick->VAL  =  (0x00);
00010c  2100              MOVS     r1,#0
00010e  6181              STR      r1,[r0,#0x18]
;;;121        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000110  2105              MOVS     r1,#5
000112  6101              STR      r1,[r0,#0x10]
                  |L10.276|
;;;122    
;;;123        /* Waiting for down-count to zero */
;;;124        while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000114  6901              LDR      r1,[r0,#0x10]
000116  03c9              LSLS     r1,r1,#15
000118  d5fc              BPL      |L10.276|
;;;125    }
00011a  bd30              POP      {r4,r5,pc}
;;;126    
                          ENDP

                  |L10.284|
                          DCD      0x400b0000
                  |L10.288|
                          DCD      CyclesPerUs
                  |L10.292|
                          DCD      0xe000e000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000020
                          DCD      0x00000040
                          DCD      0x00000060
                          DCD      0x00000080
                          DCD      0x000000c0
                          DCD      0x00000100
                          DCD      0x00000180
                          DCD      0x00000200
                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000006
                          DCD      0x00000008
                          DCD      0x0000000a
                          DCD      0x0000000c

                          AREA ||.data||, DATA, ALIGN=3

                  g_LCDFrameRate
                          DCD      0x00000000
                          DCD      0x00000000
                  g_LCDFreq
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_d1694e06____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_lcd_c_d1694e06____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_d1694e06____REVSH|
#line 402
|__asm___5_lcd_c_d1694e06____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
