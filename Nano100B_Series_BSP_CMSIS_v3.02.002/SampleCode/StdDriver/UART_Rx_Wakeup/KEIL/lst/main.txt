; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --feedback=.\obj\PWRDWN_DEMO.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\LCDLib\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Enter_PowerDown||, CODE, READONLY, ALIGN=2

                  Enter_PowerDown PROC
;;;67       */
;;;68     void Enter_PowerDown()
000000  b510              PUSH     {r4,lr}
;;;69     {
;;;70         SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;71     
;;;72         UART_EnableInt(UART1, UART_IER_WAKE_IE_Msk);
000006  4c0b              LDR      r4,|L1.52|
000008  2140              MOVS     r1,#0x40
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       UART_EnableInt
;;;73         UART1->CTL |= UART_CTL_WAKE_DATA_EN_Msk;
000010  6861              LDR      r1,[r4,#4]
000012  1562              ASRS     r2,r4,#21
000014  4311              ORRS     r1,r1,r2
000016  6061              STR      r1,[r4,#4]
000018  4907              LDR      r1,|L1.56|
00001a  0110              LSLS     r0,r2,#4
00001c  6008              STR      r0,[r1,#0]
;;;74         NVIC_EnableIRQ(UART1_IRQn);
;;;75     
;;;76     #ifdef ENABLE_GPIO_WAKEUP
;;;77         NVIC_EnableIRQ(GPABC_IRQn);
;;;78     #endif
;;;79     
;;;80         CLK->PWRCTL |= CLK_PWRCTL_WAKEINT_EN;
00001e  4807              LDR      r0,|L1.60|
000020  6802              LDR      r2,[r0,#0]
000022  2320              MOVS     r3,#0x20
000024  431a              ORRS     r2,r2,r3
000026  6002              STR      r2,[r0,#0]
000028  04c0              LSLS     r0,r0,#19
00002a  6008              STR      r0,[r1,#0]
;;;81         NVIC_EnableIRQ(PDWU_IRQn);
;;;82     
;;;83         CLK_PowerDown();
00002c  f7fffffe          BL       CLK_PowerDown
;;;84     }
000030  bd10              POP      {r4,pc}
;;;85     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40150000
                  |L1.56|
                          DCD      0xe000e100
                  |L1.60|
                          DCD      0x50000200

                          AREA ||i.GPABC_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPABC_IRQHandler PROC
;;;35     /*---------------------------------------------------------------------------------------------------------*/
;;;36     void GPABC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;37     {
;;;38         /* To check if PB.5 interrupt occurred */
;;;39         if (PB->ISRC & BIT4) {
000002  4805              LDR      r0,|L2.24|
000004  6a01              LDR      r1,[r0,#0x20]
000006  06c9              LSLS     r1,r1,#27
000008  d504              BPL      |L2.20|
;;;40             PB->ISRC = BIT4;
00000a  2110              MOVS     r1,#0x10
00000c  6201              STR      r1,[r0,#0x20]
;;;41             printf("PB.4 INT occurred. \n");
00000e  a003              ADR      r0,|L2.28|
000010  f7fffffe          BL       __2printf
                  |L2.20|
;;;42     
;;;43         }
;;;44     }
000014  bd10              POP      {r4,pc}
;;;45     
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x50004040
                  |L2.28|
00001c  50422e34          DCB      "PB.4 INT occurred. \n",0
000020  20494e54
000024  206f6363
000028  75727265
00002c  642e200a
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.PDWU_IRQHandler||, CODE, READONLY, ALIGN=2

                  PDWU_IRQHandler PROC
;;;25     /*---------------------------------------------------------------------------------------------------------*/
;;;26     void PDWU_IRQHandler()
000000  b510              PUSH     {r4,lr}
;;;27     {
;;;28         printf("PDWU_IRQHandler running...\n");
000002  a004              ADR      r0,|L3.20|
000004  f7fffffe          BL       __2printf
;;;29         CLK->WK_INTSTS = 1; /* clear interrupt status */
000008  4909              LDR      r1,|L3.48|
00000a  2001              MOVS     r0,#1
00000c  6308              STR      r0,[r1,#0x30]
;;;30         _Wakeup_Flag = 1;
00000e  4909              LDR      r1,|L3.52|
000010  6008              STR      r0,[r1,#0]  ; _Wakeup_Flag
;;;31     }
000012  bd10              POP      {r4,pc}
;;;32     
                          ENDP

                  |L3.20|
000014  50445755          DCB      "PDWU_IRQHandler running...\n",0
000018  5f495251
00001c  48616e64
000020  6c657220
000024  72756e6e
000028  696e672e
00002c  2e2e0a00
                  |L3.48|
                          DCD      0x50000200
                  |L3.52|
                          DCD      ||.data||

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;85     
;;;86     void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88         /*---------------------------------------------------------------------------------------------------------*/
;;;89         /* Init System Clock                                                                                       */
;;;90         /*---------------------------------------------------------------------------------------------------------*/
;;;91         /* Unlock protected registers */
;;;92         SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;93     
;;;94         /* Enable External XTAL (4~24 MHz) */
;;;95         CLK->PWRCTL |= (0x1 << CLK_PWRCTL_HXT_EN_Pos); // HXT Enabled
000006  4c1e              LDR      r4,|L4.128|
000008  6820              LDR      r0,[r4,#0]
00000a  2101              MOVS     r1,#1
00000c  4308              ORRS     r0,r0,r1
00000e  6020              STR      r0,[r4,#0]
;;;96     
;;;97         /* Waiting for 12MHz clock ready */
;;;98         CLK_WaitClockReady( CLK_CLKSTATUS_HXT_STB_Msk);
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       CLK_WaitClockReady
;;;99     
;;;100        /* Switch HCLK clock source to XTAL */
;;;101        CLK->CLKSEL0 &= ~CLK_CLKSEL0_HCLK_S_Msk;
000016  6920              LDR      r0,[r4,#0x10]
000018  08c0              LSRS     r0,r0,#3
00001a  00c0              LSLS     r0,r0,#3
00001c  6120              STR      r0,[r4,#0x10]
;;;102        CLK->CLKSEL0 |= CLK_CLKSEL0_HCLK_S_HXT;
00001e  6920              LDR      r0,[r4,#0x10]
000020  6120              STR      r0,[r4,#0x10]
;;;103    
;;;104        /* Select IP clock source */
;;;105        CLK->CLKSEL1 &= ~CLK_CLKSEL1_UART_S_Msk;
000022  6960              LDR      r0,[r4,#0x14]
000024  0880              LSRS     r0,r0,#2
000026  0080              LSLS     r0,r0,#2
000028  6160              STR      r0,[r4,#0x14]
;;;106        CLK->CLKSEL1 |= (0x0 << CLK_CLKSEL1_UART_S_Pos);// Clock source from external 12 MHz or 32 KHz crystal clock
00002a  6960              LDR      r0,[r4,#0x14]
00002c  6160              STR      r0,[r4,#0x14]
;;;107    
;;;108        CLK->CLKSEL1 &= ~CLK_CLKSEL1_LCD_S_Msk;
00002e  6960              LDR      r0,[r4,#0x14]
000030  0261              LSLS     r1,r4,#9
000032  4388              BICS     r0,r0,r1
000034  6160              STR      r0,[r4,#0x14]
;;;109        CLK->CLKSEL1 |= (0x0 << CLK_CLKSEL1_LCD_S_LXT);// Clock source from external 12 MHz or 32 KHz crystal clock
000036  6960              LDR      r0,[r4,#0x14]
000038  6160              STR      r0,[r4,#0x14]
;;;110    
;;;111        /* Enable IP clock */
;;;112        CLK->APBCLK |= CLK_APBCLK_UART0_EN; // UART0 Clock Enable
00003a  68a0              LDR      r0,[r4,#8]
00003c  1089              ASRS     r1,r1,#2
00003e  4308              ORRS     r0,r0,r1
000040  60a0              STR      r0,[r4,#8]
;;;113        CLK->APBCLK |= CLK_APBCLK_UART1_EN; // UART0 Clock Enable
000042  68a0              LDR      r0,[r4,#8]
000044  0049              LSLS     r1,r1,#1
000046  4308              ORRS     r0,r0,r1
000048  60a0              STR      r0,[r4,#8]
;;;114    
;;;115        /* Update System Core Clock */
;;;116        /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;117        SystemCoreClockUpdate();
00004a  f7fffffe          BL       SystemCoreClockUpdate
;;;118    
;;;119        /*---------------------------------------------------------------------------------------------------------*/
;;;120        /* Init I/O Multi-function                                                                                 */
;;;121        /*---------------------------------------------------------------------------------------------------------*/
;;;122        /* Set PB multi-function pins for UART0 RXD and TXD  */
;;;123        SYS->PB_L_MFP &= ~(SYS_PB_L_MFP_PB0_MFP_Msk | SYS_PB_L_MFP_PB1_MFP_Msk);
00004e  2005              MOVS     r0,#5
000050  0700              LSLS     r0,r0,#28
000052  6b81              LDR      r1,[r0,#0x38]
000054  2277              MOVS     r2,#0x77
000056  4391              BICS     r1,r1,r2
000058  6381              STR      r1,[r0,#0x38]
;;;124        SYS->PB_L_MFP |= (SYS_PB_L_MFP_PB0_MFP_UART0_RX | SYS_PB_L_MFP_PB1_MFP_UART0_TX);
00005a  6b81              LDR      r1,[r0,#0x38]
00005c  2211              MOVS     r2,#0x11
00005e  4311              ORRS     r1,r1,r2
000060  6381              STR      r1,[r0,#0x38]
;;;125    
;;;126        /* Set PB multi-function pins for UART1 RXD, TXD, RTS  */
;;;127        SYS->PB_L_MFP &= ~(SYS_PB_L_MFP_PB4_MFP_Msk | SYS_PB_L_MFP_PB5_MFP_Msk);
000062  6b81              LDR      r1,[r0,#0x38]
000064  2277              MOVS     r2,#0x77
000066  0412              LSLS     r2,r2,#16
000068  4391              BICS     r1,r1,r2
00006a  6381              STR      r1,[r0,#0x38]
;;;128        SYS->PB_L_MFP |=  (SYS_PB_L_MFP_PB4_MFP_UART1_RX | SYS_PB_L_MFP_PB5_MFP_UART1_TX);
00006c  6b81              LDR      r1,[r0,#0x38]
00006e  2211              MOVS     r2,#0x11
000070  0412              LSLS     r2,r2,#16
000072  4311              ORRS     r1,r1,r2
000074  6381              STR      r1,[r0,#0x38]
000076  4903              LDR      r1,|L4.132|
000078  2000              MOVS     r0,#0
00007a  6008              STR      r0,[r1,#0]
;;;129    
;;;130        /* Lock protected registers */
;;;131        SYS_LockReg();
;;;132    
;;;133    }
00007c  bd10              POP      {r4,pc}
;;;134    
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      0x50000200
                  |L4.132|
                          DCD      0x50000100

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;824      */
;;;825    __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;826    {
;;;827        while(SYS->RegLockAddr != SYS_RegLockAddr_RegUnLock_Msk) {
;;;828            SYS->RegLockAddr = 0x59;
000002  2159              MOVS     r1,#0x59
;;;829            SYS->RegLockAddr = 0x16;
000004  2316              MOVS     r3,#0x16
000006  4805              LDR      r0,|L5.28|
;;;830            SYS->RegLockAddr = 0x88;
000008  2288              MOVS     r2,#0x88
00000a  e002              B        |L5.18|
                  |L5.12|
00000c  6001              STR      r1,[r0,#0]            ;828
00000e  6003              STR      r3,[r0,#0]            ;829
000010  6002              STR      r2,[r0,#0]
                  |L5.18|
000012  6804              LDR      r4,[r0,#0]            ;827
000014  2c01              CMP      r4,#1                 ;827
000016  d1f9              BNE      |L5.12|
;;;831        }
;;;832    }
000018  bd10              POP      {r4,pc}
;;;833    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x50000100

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;134    
;;;135    void UART0_Init()
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137        /*---------------------------------------------------------------------------------------------------------*/
;;;138        /* Init UART                                                                                               */
;;;139        /*---------------------------------------------------------------------------------------------------------*/
;;;140        UART_Open(UART0, 115200);
000002  21e1              MOVS     r1,#0xe1
000004  0249              LSLS     r1,r1,#9
000006  4802              LDR      r0,|L6.16|
000008  f7fffffe          BL       UART_Open
;;;141    }
00000c  bd10              POP      {r4,pc}
;;;142    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x40050000

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART1_IRQHandler PROC
;;;48     /*---------------------------------------------------------------------------------------------------------*/
;;;49     void UART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;50     {
;;;51         uint32_t u32IntStatus;
;;;52     
;;;53         u32IntStatus = UART1->ISR;
000002  4c05              LDR      r4,|L7.24|
000004  6920              LDR      r0,[r4,#0x10]
;;;54     
;;;55         /* Wake Up */
;;;56         if (u32IntStatus & UART_ISR_WAKE_IS_Msk) {
000006  0640              LSLS     r0,r0,#25
000008  d504              BPL      |L7.20|
;;;57             printf("UART_Wakeup. \n");
00000a  a004              ADR      r0,|L7.28|
00000c  f7fffffe          BL       __2printf
;;;58             UART1->ISR = UART_ISR_WAKE_IS_Msk; //clear status
000010  2040              MOVS     r0,#0x40
000012  6120              STR      r0,[r4,#0x10]
                  |L7.20|
;;;59         }
;;;60     
;;;61     }
000014  bd10              POP      {r4,pc}
;;;62     
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x40150000
                  |L7.28|
00001c  55415254          DCB      "UART_Wakeup. \n",0
000020  5f57616b
000024  6575702e
000028  200a00  
00002b  00                DCB      0

                          AREA ||i.UART1_Init||, CODE, READONLY, ALIGN=2

                  UART1_Init PROC
;;;142    
;;;143    void UART1_Init()
000000  b510              PUSH     {r4,lr}
;;;144    {
;;;145        /*---------------------------------------------------------------------------------------------------------*/
;;;146        /* Init UART                                                                                               */
;;;147        /*---------------------------------------------------------------------------------------------------------*/
;;;148        UART_Open(UART1, 115200);
000002  21e1              MOVS     r1,#0xe1
000004  0249              LSLS     r1,r1,#9
000006  4802              LDR      r0,|L8.16|
000008  f7fffffe          BL       UART_Open
;;;149    }
00000c  bd10              POP      {r4,pc}
;;;150    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40150000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;155      */
;;;156    int32_t main(void)
000000  f7fffffe          BL       SYS_Init
;;;157    {
;;;158        SYS_Init();
;;;159        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;160        UART1_Init();
000008  f7fffffe          BL       UART1_Init
;;;161    
;;;162        /*---------------------------------------------------------------------------------------------------------*/
;;;163        /* SAMPLE CODE                                                                                             */
;;;164        /*---------------------------------------------------------------------------------------------------------*/
;;;165    
;;;166        printf("\n\nCPU @ %dHz\n", SystemCoreClock);
00000c  481c              LDR      r0,|L9.128|
00000e  6801              LDR      r1,[r0,#0]  ; SystemCoreClock
000010  a01c              ADR      r0,|L9.132|
000012  f7fffffe          BL       __2printf
;;;167    
;;;168        printf("+-----------------------------------------------------------+\n");
000016  a01f              ADR      r0,|L9.148|
000018  f7fffffe          BL       __2printf
;;;169        printf("|  UART Rx WAkeup Function Test                             |\n");
00001c  a02d              ADR      r0,|L9.212|
00001e  f7fffffe          BL       __2printf
;;;170        printf("+-----------------------------------------------------------+\n");
000022  a01c              ADR      r0,|L9.148|
000024  f7fffffe          BL       __2printf
;;;171        printf("|  Description :                                            |\n");
000028  a03a              ADR      r0,|L9.276|
00002a  f7fffffe          BL       __2printf
;;;172        printf("|    The sample code will demo UART1 Rx(PB.4) wakeup from   |\n");
00002e  a049              ADR      r0,|L9.340|
000030  f7fffffe          BL       __2printf
;;;173        printf("|    power down mode.                                       |\n");
000034  a057              ADR      r0,|L9.404|
000036  f7fffffe          BL       __2printf
;;;174        printf("+-----------------------------------------------------------+\n");
00003a  a016              ADR      r0,|L9.148|
00003c  f7fffffe          BL       __2printf
;;;175        printf("| Please input any data to uart1 Rx pin to wakeup system.   |\n");
000040  a064              ADR      r0,|L9.468|
000042  f7fffffe          BL       __2printf
;;;176        printf("+-----------------------------------------------------------+\n");
000046  a013              ADR      r0,|L9.148|
000048  f7fffffe          BL       __2printf
;;;177    
;;;178    #ifdef ENABLE_GPIO_WAKEUP
;;;179        GPIO_EnableInt(PB, 4, GPIO_INT_BOTH_EDGE);
;;;180        PB->ISRC = BIT4;
;;;181    #endif
;;;182    
;;;183        printf("Going to Power Down...\n\n");
00004c  a071              ADR      r0,|L9.532|
00004e  f7fffffe          BL       __2printf
;;;184    
;;;185        while(!(UART0->FSR & UART_FSR_TE_F_Msk)) ;  /* waits for message send out */
000052  4877              LDR      r0,|L9.560|
                  |L9.84|
000054  6981              LDR      r1,[r0,#0x18]
000056  0509              LSLS     r1,r1,#20
000058  d5fc              BPL      |L9.84|
;;;186    
;;;187        Enter_PowerDown();
00005a  f7fffffe          BL       Enter_PowerDown
;;;188    
;;;189        if (_Wakeup_Flag == 1) {
00005e  4875              LDR      r0,|L9.564|
000060  6801              LDR      r1,[r0,#0]  ; _Wakeup_Flag
000062  2901              CMP      r1,#1
000064  d107              BNE      |L9.118|
;;;190            _Wakeup_Flag = 0;
000066  2100              MOVS     r1,#0
000068  6001              STR      r1,[r0,#0]  ; _Wakeup_Flag
;;;191    
;;;192            printf("\n Wakeup OK!!");
00006a  a073              ADR      r0,|L9.568|
00006c  f7fffffe          BL       __2printf
;;;193    
;;;194            CLK_SysTickDelay(335000);
000070  4875              LDR      r0,|L9.584|
000072  f7fffffe          BL       CLK_SysTickDelay
                  |L9.118|
;;;195        }
;;;196    
;;;197        printf("\n Wakeup demo end.");
000076  a075              ADR      r0,|L9.588|
000078  f7fffffe          BL       __2printf
                  |L9.124|
;;;198    
;;;199        while(1);
00007c  e7fe              B        |L9.124|
;;;200    }
;;;201    
                          ENDP

00007e  0000              DCW      0x0000
                  |L9.128|
                          DCD      SystemCoreClock
                  |L9.132|
000084  0a0a4350          DCB      "\n\nCPU @ %dHz\n",0
000088  55204020
00008c  2564487a
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L9.148|
000094  2b2d2d2d          DCB      "+------------------------------------------------------"
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d2d2d2d
0000a4  2d2d2d2d
0000a8  2d2d2d2d
0000ac  2d2d2d2d
0000b0  2d2d2d2d
0000b4  2d2d2d2d
0000b8  2d2d2d2d
0000bc  2d2d2d2d
0000c0  2d2d2d2d
0000c4  2d2d2d2d
0000c8  2d2d2d  
0000cb  2d2d2d2d          DCB      "-----+\n",0
0000cf  2d2b0a00
0000d3  00                DCB      0
                  |L9.212|
0000d4  7c202055          DCB      "|  UART Rx WAkeup Function Test                        "
0000d8  41525420
0000dc  52782057
0000e0  416b6575
0000e4  70204675
0000e8  6e637469
0000ec  6f6e2054
0000f0  65737420
0000f4  20202020
0000f8  20202020
0000fc  20202020
000100  20202020
000104  20202020
000108  202020  
00010b  20202020          DCB      "     |\n",0
00010f  207c0a00
000113  00                DCB      0
                  |L9.276|
000114  7c202044          DCB      "|  Description :                                       "
000118  65736372
00011c  69707469
000120  6f6e203a
000124  20202020
000128  20202020
00012c  20202020
000130  20202020
000134  20202020
000138  20202020
00013c  20202020
000140  20202020
000144  20202020
000148  202020  
00014b  20202020          DCB      "     |\n",0
00014f  207c0a00
000153  00                DCB      0
                  |L9.340|
000154  7c202020          DCB      "|    The sample code will demo UART1 Rx(PB.4) wakeup fr"
000158  20546865
00015c  2073616d
000160  706c6520
000164  636f6465
000168  2077696c
00016c  6c206465
000170  6d6f2055
000174  41525431
000178  20527828
00017c  50422e34
000180  29207761
000184  6b657570
000188  206672  
00018b  6f6d2020          DCB      "om   |\n",0
00018f  207c0a00
000193  00                DCB      0
                  |L9.404|
000194  7c202020          DCB      "|    power down mode.                                  "
000198  20706f77
00019c  65722064
0001a0  6f776e20
0001a4  6d6f6465
0001a8  2e202020
0001ac  20202020
0001b0  20202020
0001b4  20202020
0001b8  20202020
0001bc  20202020
0001c0  20202020
0001c4  20202020
0001c8  202020  
0001cb  20202020          DCB      "     |\n",0
0001cf  207c0a00
0001d3  00                DCB      0
                  |L9.468|
0001d4  7c20506c          DCB      "| Please input any data to uart1 Rx pin to wakeup syste"
0001d8  65617365
0001dc  20696e70
0001e0  75742061
0001e4  6e792064
0001e8  61746120
0001ec  746f2075
0001f0  61727431
0001f4  20527820
0001f8  70696e20
0001fc  746f2077
000200  616b6575
000204  70207379
000208  737465  
00020b  6d2e2020          DCB      "m.   |\n",0
00020f  207c0a00
000213  00                DCB      0
                  |L9.532|
000214  476f696e          DCB      "Going to Power Down...\n\n",0
000218  6720746f
00021c  20506f77
000220  65722044
000224  6f776e2e
000228  2e2e0a0a
00022c  00      
00022d  00                DCB      0
00022e  00                DCB      0
00022f  00                DCB      0
                  |L9.560|
                          DCD      0x40050000
                  |L9.564|
                          DCD      ||.data||
                  |L9.568|
000238  0a205761          DCB      "\n Wakeup OK!!",0
00023c  6b657570
000240  204f4b21
000244  2100    
000246  00                DCB      0
000247  00                DCB      0
                  |L9.584|
                          DCD      0x00051c98
                  |L9.588|
00024c  0a205761          DCB      "\n Wakeup demo end.",0
000250  6b657570
000254  2064656d
000258  6f20656e
00025c  642e00  
00025f  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  _Wakeup_Flag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_431424b2____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_431424b2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_431424b2____REVSH|
#line 402
|__asm___6_main_c_431424b2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
