; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\pmc.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\pmc.d --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -IC:\Keil_v5\ARM\RV31\Inc -IC:\Users\Mridul\Desktop\vts_ver4\build\keil\vts_ver3\RTE -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.5.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__RTX -D__MICROLIB -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\pmc.crf ..\..\..\src\drivers\pmc\pmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LVD_Initalize PROC
;;;26     //int i;
;;;27     void LVD_Initalize(unsigned char lvd_select, 
000000  b570              PUSH     {r4-r6,lr}
;;;28                        unsigned char lvd_reset_enable,
;;;29                        unsigned char lvd_int_enable, 
;;;30                        unsigned char lvw_select,
;;;31                        unsigned char lvw_int_enable){
000002  9c04              LDR      r4,[sp,#0x10]
;;;32         PMC_LVDSC1 =  PMC_LVDSC1_LVDACK_MASK | 
000004  2540              MOVS     r5,#0x40
000006  430d              ORRS     r5,r5,r1
000008  4315              ORRS     r5,r5,r2
00000a  0786              LSLS     r6,r0,#30
00000c  0fb6              LSRS     r6,r6,#30
00000e  4335              ORRS     r5,r5,r6
000010  4e1d              LDR      r6,|L1.136|
000012  7035              STRB     r5,[r6,#0]
;;;33                      (lvd_reset_enable) |   //enable LVD Reset ?
;;;34     	          lvd_int_enable |      //LVD Interrupt ?
;;;35     	          PMC_LVDSC1_LVDV(lvd_select)   ;        //select high or low LVD
;;;36         PMC_LVDSC2  = PMC_LVDSC2_LVWACK_MASK | 
000014  2540              MOVS     r5,#0x40
000016  4325              ORRS     r5,r5,r4
000018  079e              LSLS     r6,r3,#30
00001a  0fb6              LSRS     r6,r6,#30
00001c  4335              ORRS     r5,r5,r6
00001e  4e1a              LDR      r6,|L1.136|
000020  7075              STRB     r5,[r6,#1]
;;;37                      (lvw_int_enable) |    //LVW interrupt?
;;;38                       PMC_LVDSC2_LVWV(lvw_select);  // select LVW level 1,2,3 or 4
;;;39     }
000022  bd70              POP      {r4-r6,pc}
;;;40     //******************************************************************************
                          ENDP

                  LVD_Init PROC
;;;41     void LVD_Init(void)
000024  2011              MOVS     r0,#0x11
;;;42     {
;;;43     /* setup LVD
;;;44     Low-Voltage Detect Voltage Select
;;;45     Selects the LVD trip point voltage (VLVD).
;;;46     00 Low trip point selected (VLVD = VLVDL)
;;;47     01 High trip point selected (VLVD = VLVDH)
;;;48     10 Reserved
;;;49     11 Reserved
;;;50       */
;;;51     	PMC_LVDSC1 =  PMC_LVDSC1_LVDRE_MASK |   //enable LVD Reset
000026  4918              LDR      r1,|L1.136|
000028  7008              STRB     r0,[r1,#0]
;;;52     	               PMC_LVDSC1_LVDV(1);   //Enable LVD Reset High level
;;;53     
;;;54             
;;;55     PMC_LVDSC2  = PMC_LVDSC2_LVWACK_MASK | 
00002a  2043              MOVS     r0,#0x43
00002c  7048              STRB     r0,[r1,#1]
;;;56                   PMC_LVDSC2_LVWV(3) ;
;;;57     
;;;58     
;;;59     // ack to clear initial flags
;;;60     PMC_LVDSC1 |= PMC_LVDSC1_LVDACK_MASK; 
00002e  4608              MOV      r0,r1
000030  7800              LDRB     r0,[r0,#0]
000032  2140              MOVS     r1,#0x40
000034  4308              ORRS     r0,r0,r1
000036  4914              LDR      r1,|L1.136|
000038  7008              STRB     r0,[r1,#0]
;;;61     PMC_LVDSC2 |= PMC_LVDSC2_LVWACK_MASK;
00003a  4608              MOV      r0,r1
00003c  7840              LDRB     r0,[r0,#1]
00003e  2140              MOVS     r1,#0x40
000040  4308              ORRS     r0,r0,r1
000042  4911              LDR      r1,|L1.136|
000044  7048              STRB     r0,[r1,#1]
;;;62     
;;;63     /* 
;;;64     LVWV if LVD high range selected
;;;65     2.621
;;;66     2.72
;;;67     2.82
;;;68     2.92
;;;69     LVDV if LVD low range selected
;;;70     1.74
;;;71     1.84
;;;72     1.94
;;;73     
;;;74     
;;;75     */
;;;76     }
000046  4770              BX       lr
;;;77     void pmc_lvd_isr(void)
                          ENDP

                  pmc_lvd_isr PROC
000048  b510              PUSH     {r4,lr}
;;;78     {
;;;79      
;;;80       if (PMC_LVDSC1 &PMC_LVDSC1_LVDF_MASK){
00004a  480f              LDR      r0,|L1.136|
00004c  7800              LDRB     r0,[r0,#0]
00004e  2180              MOVS     r1,#0x80
000050  4008              ANDS     r0,r0,r1
000052  2800              CMP      r0,#0
000054  d002              BEQ      |L1.92|
;;;81        printf("[LVD_isr]LV DETECT interrupt occurred");
000056  a00d              ADR      r0,|L1.140|
000058  f7fffffe          BL       __2printf
                  |L1.92|
;;;82       }
;;;83       if (PMC_LVDSC2 &PMC_LVDSC2_LVWF_MASK){
00005c  480a              LDR      r0,|L1.136|
00005e  7840              LDRB     r0,[r0,#1]
000060  2180              MOVS     r1,#0x80
000062  4008              ANDS     r0,r0,r1
000064  2800              CMP      r0,#0
000066  d002              BEQ      |L1.110|
;;;84        printf("[LVD_isr]LV WARNING interrupt occurred");
000068  a012              ADR      r0,|L1.180|
00006a  f7fffffe          BL       __2printf
                  |L1.110|
;;;85       }
;;;86      
;;;87      // ack to clear initial flags
;;;88      PMC_LVDSC1 |= PMC_LVDSC1_LVDACK_MASK; 
00006e  4806              LDR      r0,|L1.136|
000070  7800              LDRB     r0,[r0,#0]
000072  2140              MOVS     r1,#0x40
000074  4308              ORRS     r0,r0,r1
000076  4904              LDR      r1,|L1.136|
000078  7008              STRB     r0,[r1,#0]
;;;89      PMC_LVDSC2 |= PMC_LVDSC2_LVWACK_MASK;
00007a  4608              MOV      r0,r1
00007c  7840              LDRB     r0,[r0,#1]
00007e  2140              MOVS     r1,#0x40
000080  4308              ORRS     r0,r0,r1
000082  4901              LDR      r1,|L1.136|
000084  7048              STRB     r0,[r1,#1]
;;;90     
;;;91     }
000086  bd10              POP      {r4,pc}
;;;92     
                          ENDP

                  |L1.136|
                          DCD      0x4007d000
                  |L1.140|
00008c  5b4c5644          DCB      "[LVD_isr]LV DETECT interrupt occurred",0
000090  5f697372
000094  5d4c5620
000098  44455445
00009c  43542069
0000a0  6e746572
0000a4  72757074
0000a8  206f6363
0000ac  75727265
0000b0  6400    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L1.180|
0000b4  5b4c5644          DCB      "[LVD_isr]LV WARNING interrupt occurred",0
0000b8  5f697372
0000bc  5d4c5620
0000c0  5741524e
0000c4  494e4720
0000c8  696e7465
0000cc  72727570
0000d0  74206f63
0000d4  63757272
0000d8  656400  
0000db  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\pmc\\pmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_pmc_c_96ea85e0____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_pmc_c_96ea85e0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_pmc_c_96ea85e0____REVSH|
#line 144
|__asm___5_pmc_c_96ea85e0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
