; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\rtx_conf_cm.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\rtx_conf_cm.d --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -IC:\Users\Mridul\Desktop\vts_ver3\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS_RTX\INC -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.5.0\Device\Include -D__RTX -D__MICROLIB -D_RTE_ -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\rtx_conf_cm.crf RTE\CMSIS\RTX_Conf_CM.c]
                          THUMB

                          AREA ||.ARM.Collect$$$$000000FF||, CODE, READONLY, ALIGN=2

                  _main_init PROC
;;;255    void _main_init (void) __attribute__((section(".ARM.Collect$$$$000000FF")));
;;;256    void _main_init (void) {
000000  f7fffffe          BL       osKernelInitialize
;;;257      osKernelInitialize();
;;;258      osThreadCreate(&os_thread_def_main, NULL);
000004  2100              MOVS     r1,#0
000006  4803              LDR      r0,|L1.20|
000008  f7fffffe          BL       osThreadCreate
;;;259      osKernelStart();
00000c  f7fffffe          BL       osKernelStart
                  |L1.16|
;;;260      for (;;);
000010  e7fe              B        |L1.16|
;;;261    }
;;;262    #else
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.data||+0x10

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  os_idle_demon PROC
;;;216     
;;;217    void os_idle_demon (void) {
000000  bf00              NOP      
                  |L2.2|
;;;218      /* The idle demon is a system thread, running when no other thread is      */
;;;219      /* ready to run.                                                           */
;;;220     
;;;221      for (;;) {
000002  e7fe              B        |L2.2|
;;;222        /* HERE: include optional user code to be executed when no thread runs.*/
;;;223      }
;;;224    }
;;;225     
                          ENDP

                  os_error PROC
;;;268     
;;;269    void os_error (uint32_t error_code) {
000004  2801              CMP      r0,#1
;;;270      /* This function is called when a runtime error is detected.  */
;;;271      /* Parameter 'error_code' holds the runtime error code.       */
;;;272     
;;;273      /* HERE: include optional code to be executed on runtime error. */
;;;274      switch (error_code) {
000006  d004              BEQ      |L2.18|
000008  2802              CMP      r0,#2
00000a  d003              BEQ      |L2.20|
00000c  2803              CMP      r0,#3
00000e  d103              BNE      |L2.24|
000010  e001              B        |L2.22|
                  |L2.18|
;;;275        case OS_ERROR_STACK_OVF:
;;;276          /* Stack overflow detected for the currently running task. */
;;;277          /* Thread can be identified by calling svcThreadGetId().   */
;;;278          break;
000012  e001              B        |L2.24|
                  |L2.20|
;;;279        case OS_ERROR_FIFO_OVF:
;;;280          /* ISR FIFO Queue buffer overflow detected. */
;;;281          break;
000014  e000              B        |L2.24|
                  |L2.22|
;;;282        case OS_ERROR_MBX_OVF:
;;;283          /* Mailbox overflow detected. */
;;;284          break;
000016  bf00              NOP      
                  |L2.24|
000018  bf00              NOP                            ;278
;;;285      }
;;;286      for (;;);
00001a  bf00              NOP      
                  |L2.28|
00001c  e7fe              B        |L2.28|
;;;287    }
;;;288     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  mp_tcb
                          %        376
                  mp_stk
                          %        1216
                  os_stack_mem
                          %        432
                  os_fifo
                          %        132
                  os_active_TCB
                          %        28
                  os_messageQ_q_osTimerMessageQ
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  os_maxtaskrun
000000  0007              DCW      0x0007
000002  0000              DCB      0x00,0x00
                  os_stackinfo
                          DCD      0x010200c8
                  os_rrobin
                          DCD      0x00010005
                  os_tickfreq
                          DCD      0x00b71b00
                  os_tickus_i
000010  000c              DCW      0x000c
                  os_tickus_f
000012  0000              DCW      0x0000
                  os_trv
                          DCD      0x00002edf
                  os_flags
000018  01000000          DCB      0x01,0x00,0x00,0x00
                  CMSIS_RTOS_API_Version
                  ||__tagsym$$used||
                          DCD      0x00010002
                  CMSIS_RTOS_RTX_Version
                  |symbol_number.12|
                          DCD      0x0004004a
                  os_clockrate
                  |symbol_number.13|
                          DCD      0x000003e8
                  os_timernum
                  |symbol_number.14|
                          DCD      0x00000000
                  mp_tcb_size
00002c  0178              DCW      0x0178
00002e  0000              DCB      0x00,0x00
                  mp_stk_size
                          DCD      0x000004c0
                  os_stack_sz
                          DCD      0x000001b0
                  os_fifo_size
000038  10000000          DCB      0x10,0x00,0x00,0x00
                  os_thread_def_osTimerThread
                          DCD      osTimerThread
000040  0002              DCW      0x0002
000042  0000              DCB      0x00,0x00
                          DCD      0x00000001
                          DCD      0x000000c8
                  os_messageQ_def_osTimerMessageQ
                          DCD      0x00000004
                          DCD      os_messageQ_q_osTimerMessageQ
                  mp_tmr_size
000054  0000              DCW      0x0000

                          AREA ||.data||, DATA, ALIGN=2

                  osThreadId_osTimerThread
                          DCD      0x00000000
                  osMessageQId_osTimerMessageQ
                          DCD      0x00000000
                  os_tmr
                          DCD      0x00000000
                  m_tmr
                          DCD      0x00000000
                  os_thread_def_main
                          DCD      main
000014  0000              DCW      0x0000
000016  0000              DCB      0x00,0x00
                          DCD      0x00000001
                          DCD      0x000000c8
