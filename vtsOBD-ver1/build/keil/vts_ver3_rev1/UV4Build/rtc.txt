; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\rtc.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\rtc.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -I.\RTE\_KL26Z128_-_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include -D__UVISION_VERSION=524 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\rtc.crf ..\..\..\src\drivers\rtc\rtc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_i
                          REQUIRE _printf_int_dec
                  __NVIC_DisableIRQ PROC
;;;768     */
;;;769    __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;770    {
;;;771      if ((int32_t)(IRQn) >= 0)
000002  db15              BLT      |L1.48|
;;;772      {
;;;773        NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  06c2              LSLS     r2,r0,#27
000006  0ed2              LSRS     r2,r2,#27
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  4a87              LDR      r2,|L1.556|
00000e  6011              STR      r1,[r2,#0]
;;;774        __DSB();
000010  bf00              NOP      
000012  bf00              NOP      
000014  bf00              NOP      
000016  f3bf8f4f          DSB      
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;775        __ISB();
000020  bf00              NOP      
000022  bf00              NOP      
000024  bf00              NOP      
000026  f3bf8f6f          ISB      
00002a  bf00              NOP      
00002c  bf00              NOP      
00002e  bf00              NOP      
                  |L1.48|
;;;776      }
;;;777    }
000030  4770              BX       lr
;;;778    
                          ENDP

                  rtc_reg_report PROC
;;;109    
;;;110    void rtc_reg_report (void) {
000032  b510              PUSH     {r4,lr}
;;;111       printf("RTC_TSR    = 0x%02X,    ",    ((unsigned int) RTC_TSR)) ;
000034  487e              LDR      r0,|L1.560|
000036  6801              LDR      r1,[r0,#0]
000038  a07e              ADR      r0,|L1.564|
00003a  f7fffffe          BL       __2printf
;;;112      printf("RTC_TPR    = 0x%02X\n",       ((unsigned int) RTC_TPR)) ;
00003e  487c              LDR      r0,|L1.560|
000040  6841              LDR      r1,[r0,#4]
000042  a083              ADR      r0,|L1.592|
000044  f7fffffe          BL       __2printf
;;;113      printf("RTC_TAR    = 0x%02X,    ",    ((unsigned int) RTC_TAR)) ;
000048  4879              LDR      r0,|L1.560|
00004a  6881              LDR      r1,[r0,#8]
00004c  a086              ADR      r0,|L1.616|
00004e  f7fffffe          BL       __2printf
;;;114      printf("RTC_TCR    = 0x%02X\n",       ((unsigned int) RTC_TCR)) ;
000052  4877              LDR      r0,|L1.560|
000054  68c1              LDR      r1,[r0,#0xc]
000056  a08b              ADR      r0,|L1.644|
000058  f7fffffe          BL       __2printf
;;;115      printf("RTC_CR     = 0x%02X,    ",    ((unsigned int) RTC_CR)) ;
00005c  4874              LDR      r0,|L1.560|
00005e  6901              LDR      r1,[r0,#0x10]
000060  a08e              ADR      r0,|L1.668|
000062  f7fffffe          BL       __2printf
;;;116      printf("RTC_SR     = 0x%02X\n",       ((unsigned int) RTC_SR)) ;
000066  4872              LDR      r0,|L1.560|
000068  6941              LDR      r1,[r0,#0x14]
00006a  a093              ADR      r0,|L1.696|
00006c  f7fffffe          BL       __2printf
;;;117      printf("RTC_LR     = 0x%02X,    ",    ((unsigned int) RTC_LR)) ;
000070  486f              LDR      r0,|L1.560|
000072  6981              LDR      r1,[r0,#0x18]
000074  a096              ADR      r0,|L1.720|
000076  f7fffffe          BL       __2printf
;;;118      printf("RTC_IER    = 0x%02X\n",       ((unsigned int) RTC_IER)) ;
00007a  486d              LDR      r0,|L1.560|
00007c  69c1              LDR      r1,[r0,#0x1c]
00007e  a09b              ADR      r0,|L1.748|
000080  f7fffffe          BL       __2printf
;;;119    }
000084  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  rtc_init PROC
;;;34     
;;;35     void rtc_init(uint32 seconds, uint32 alarm, uint8 c_interval, uint8 c_value, uint8 interrupt) 
000086  b5ff              PUSH     {r0-r7,lr}
;;;36     {
000088  b081              SUB      sp,sp,#4
00008a  4606              MOV      r6,r0
00008c  460f              MOV      r7,r1
00008e  9c0a              LDR      r4,[sp,#0x28]
;;;37       int i;
;;;38       
;;;39       /*enable the clock to SRTC module register space*/
;;;40       SIM_SCGC6 |= SIM_SCGC6_RTC_MASK;
000090  489c              LDR      r0,|L1.772|
000092  6bc0              LDR      r0,[r0,#0x3c]
000094  2101              MOVS     r1,#1
000096  0749              LSLS     r1,r1,#29
000098  4308              ORRS     r0,r0,r1
00009a  499a              LDR      r1,|L1.772|
00009c  63c8              STR      r0,[r1,#0x3c]
;;;41       
;;;42       /*Only VBAT_POR has an effect on the SRTC, RESET to the part does not, so you must manually reset the SRTC to make sure everything is in a known state*/
;;;43       /*clear the software reset bit*/
;;;44         printf("Generating SoftWare reset to SRTC\n");
00009e  a09a              ADR      r0,|L1.776|
0000a0  f7fffffe          BL       __2printf
;;;45     #ifdef CMSIS
;;;46         NVIC_DisableIRQ((IRQn_Type)interrupt);
0000a4  b260              SXTB     r0,r4
0000a6  f7fffffe          BL       __NVIC_DisableIRQ
;;;47         NVIC_DisableIRQ((IRQn_Type)(interrupt+1));
0000aa  1c60              ADDS     r0,r4,#1
0000ac  b240              SXTB     r0,r0
0000ae  f7fffffe          BL       __NVIC_DisableIRQ
;;;48     #else
;;;49         disable_irq(interrupt);
;;;50         disable_irq(interrupt+1);
;;;51     #endif
;;;52         RTC_CR  = RTC_CR_SWR_MASK;
0000b2  2001              MOVS     r0,#1
0000b4  495e              LDR      r1,|L1.560|
0000b6  6108              STR      r0,[r1,#0x10]
;;;53         RTC_CR  &= ~RTC_CR_SWR_MASK;  
0000b8  4608              MOV      r0,r1
0000ba  6900              LDR      r0,[r0,#0x10]
0000bc  0840              LSRS     r0,r0,#1
0000be  0040              LSLS     r0,r0,#1
0000c0  6108              STR      r0,[r1,#0x10]
;;;54       
;;;55         if (RTC_SR & RTC_SR_TIF_MASK){
0000c2  4608              MOV      r0,r1
0000c4  6940              LDR      r0,[r0,#0x14]
0000c6  07c0              LSLS     r0,r0,#31
0000c8  0fc0              LSRS     r0,r0,#31
0000ca  2800              CMP      r0,#0
0000cc  d006              BEQ      |L1.220|
;;;56             RTC_TSR = 0x00000000;   //  this action clears the TIF
0000ce  2000              MOVS     r0,#0
0000d0  6008              STR      r0,[r1,#0]
;;;57             printf("RTC Invalid flag was set - Write to TSR done to clears RTC_SR =  %#02X \n",  ((unsigned int)RTC_SR) )  ;
0000d2  4608              MOV      r0,r1
0000d4  6941              LDR      r1,[r0,#0x14]
0000d6  4895              LDR      r0,|L1.812|
0000d8  f7fffffe          BL       __2printf
                  |L1.220|
;;;58         }
;;;59       /*Set time compensation parameters*/
;;;60       RTC_TCR = RTC_TCR_CIR(c_interval) | RTC_TCR_TCR(c_value);
0000dc  9803              LDR      r0,[sp,#0xc]
0000de  0200              LSLS     r0,r0,#8
0000e0  21ff              MOVS     r1,#0xff
0000e2  0209              LSLS     r1,r1,#8
0000e4  4008              ANDS     r0,r0,r1
0000e6  9904              LDR      r1,[sp,#0x10]
0000e8  b2c9              UXTB     r1,r1
0000ea  4308              ORRS     r0,r0,r1
0000ec  4950              LDR      r1,|L1.560|
0000ee  60c8              STR      r0,[r1,#0xc]
;;;61       
;;;62       /*Enable the counter*/
;;;63       if (seconds >0) {
0000f0  2e00              CMP      r6,#0
0000f2  d021              BEQ      |L1.312|
;;;64          /*Enable the interrupt*/
;;;65          if(interrupt >1){
0000f4  2c01              CMP      r4,#1
0000f6  dd02              BLE      |L1.254|
;;;66     #ifdef CMSIS
;;;67              NVIC_EnableIRQ((IRQn_Type)interrupt);
0000f8  b260              SXTB     r0,r4
0000fa  f7fffffe          BL       __NVIC_EnableIRQ
                  |L1.254|
;;;68     #else
;;;69             enable_irq(interrupt);
;;;70     #endif
;;;71          }
;;;72          /*Enable the oscillator*/
;;;73         RTC_CR |= RTC_CR_OSCE_MASK;
0000fe  484c              LDR      r0,|L1.560|
000100  6900              LDR      r0,[r0,#0x10]
000102  21ff              MOVS     r1,#0xff
000104  3101              ADDS     r1,#1
000106  4308              ORRS     r0,r0,r1
000108  4949              LDR      r1,|L1.560|
00010a  6108              STR      r0,[r1,#0x10]
;;;74       
;;;75         /*Wait to all the 32 kHz to stabilize, refer to the crystal startup time in the crystal datasheet*/
;;;76         for(i=0;i<0x600000;i++);
00010c  2500              MOVS     r5,#0
00010e  e000              B        |L1.274|
                  |L1.272|
000110  1c6d              ADDS     r5,r5,#1
                  |L1.274|
000112  2003              MOVS     r0,#3
000114  0540              LSLS     r0,r0,#21
000116  4285              CMP      r5,r0
000118  dbfa              BLT      |L1.272|
;;;77      
;;;78         RTC_IER |= RTC_IER_TSIE_MASK;
00011a  4845              LDR      r0,|L1.560|
00011c  69c0              LDR      r0,[r0,#0x1c]
00011e  2110              MOVS     r1,#0x10
000120  4308              ORRS     r0,r0,r1
000122  4943              LDR      r1,|L1.560|
000124  61c8              STR      r0,[r1,#0x1c]
;;;79         RTC_SR |= RTC_SR_TCE_MASK;
000126  4608              MOV      r0,r1
000128  6940              LDR      r0,[r0,#0x14]
00012a  2110              MOVS     r1,#0x10
00012c  4308              ORRS     r0,r0,r1
00012e  4940              LDR      r1,|L1.560|
000130  6148              STR      r0,[r1,#0x14]
;;;80         /*Configure the timer seconds and alarm registers*/
;;;81         RTC_TSR = seconds;
000132  4608              MOV      r0,r1
000134  6006              STR      r6,[r0,#0]
000136  e005              B        |L1.324|
                  |L1.312|
;;;82     
;;;83       } else {
;;;84         RTC_IER &= ~RTC_IER_TSIE_MASK;
000138  483d              LDR      r0,|L1.560|
00013a  69c0              LDR      r0,[r0,#0x1c]
00013c  2110              MOVS     r1,#0x10
00013e  4388              BICS     r0,r0,r1
000140  493b              LDR      r1,|L1.560|
000142  61c8              STR      r0,[r1,#0x1c]
                  |L1.324|
;;;85       }
;;;86       if (alarm >0) {
000144  2f00              CMP      r7,#0
000146  d021              BEQ      |L1.396|
;;;87         RTC_IER |= RTC_IER_TAIE_MASK;
000148  4839              LDR      r0,|L1.560|
00014a  69c0              LDR      r0,[r0,#0x1c]
00014c  2104              MOVS     r1,#4
00014e  4308              ORRS     r0,r0,r1
000150  4937              LDR      r1,|L1.560|
000152  61c8              STR      r0,[r1,#0x1c]
;;;88         RTC_SR |= RTC_SR_TCE_MASK;
000154  4608              MOV      r0,r1
000156  6940              LDR      r0,[r0,#0x14]
000158  2110              MOVS     r1,#0x10
00015a  4308              ORRS     r0,r0,r1
00015c  4934              LDR      r1,|L1.560|
00015e  6148              STR      r0,[r1,#0x14]
;;;89         /*Configure the timer seconds and alarm registers*/
;;;90         RTC_TAR = alarm;
000160  4608              MOV      r0,r1
000162  6087              STR      r7,[r0,#8]
;;;91          /*Enable the interrupt*/
;;;92          if(interrupt >1){
000164  2c01              CMP      r4,#1
000166  dd02              BLE      |L1.366|
;;;93     #ifdef CMSIS
;;;94              NVIC_EnableIRQ((IRQn_Type)interrupt);
000168  b260              SXTB     r0,r4
00016a  f7fffffe          BL       __NVIC_EnableIRQ
                  |L1.366|
;;;95     #else
;;;96             enable_irq(interrupt);
;;;97     #endif
;;;98          }
;;;99          /*Enable the oscillator*/
;;;100        RTC_CR |= RTC_CR_OSCE_MASK;
00016e  4830              LDR      r0,|L1.560|
000170  6900              LDR      r0,[r0,#0x10]
000172  21ff              MOVS     r1,#0xff
000174  3101              ADDS     r1,#1
000176  4308              ORRS     r0,r0,r1
000178  492d              LDR      r1,|L1.560|
00017a  6108              STR      r0,[r1,#0x10]
;;;101      
;;;102        /*Wait to all the 32 kHz to stabilize, refer to the crystal startup time in the crystal datasheet*/
;;;103        for(i=0;i<0x600000;i++);
00017c  2500              MOVS     r5,#0
00017e  e000              B        |L1.386|
                  |L1.384|
000180  1c6d              ADDS     r5,r5,#1
                  |L1.386|
000182  2003              MOVS     r0,#3
000184  0540              LSLS     r0,r0,#21
000186  4285              CMP      r5,r0
000188  dbfa              BLT      |L1.384|
00018a  e005              B        |L1.408|
                  |L1.396|
;;;104      } else {
;;;105        RTC_IER &= ~RTC_IER_TAIE_MASK;
00018c  4828              LDR      r0,|L1.560|
00018e  69c0              LDR      r0,[r0,#0x1c]
000190  2104              MOVS     r1,#4
000192  4388              BICS     r0,r0,r1
000194  4926              LDR      r1,|L1.560|
000196  61c8              STR      r0,[r1,#0x1c]
                  |L1.408|
;;;106      }
;;;107      rtc_reg_report();
000198  f7fffffe          BL       rtc_reg_report
;;;108    }
00019c  b005              ADD      sp,sp,#0x14
00019e  bdf0              POP      {r4-r7,pc}
;;;109    
                          ENDP

                  rtc_isr PROC
;;;120    
;;;121    void rtc_isr(void) 
0001a0  b510              PUSH     {r4,lr}
;;;122    {
;;;123       GPIOB_PSOR = 0x00080000;           // set Port B 19 indicate wakeup
0001a2  2001              MOVS     r0,#1
0001a4  04c0              LSLS     r0,r0,#19
0001a6  4962              LDR      r1,|L1.816|
0001a8  6048              STR      r0,[r1,#4]
;;;124       
;;;125       if((RTC_SR & RTC_SR_TIF_MASK)== 0x01)
0001aa  4821              LDR      r0,|L1.560|
0001ac  6940              LDR      r0,[r0,#0x14]
0001ae  07c0              LSLS     r0,r0,#31
0001b0  0fc0              LSRS     r0,r0,#31
0001b2  2800              CMP      r0,#0
0001b4  d00a              BEQ      |L1.460|
;;;126         {
;;;127           printf("SRTC time invalid interrupt entered...\r\n");
0001b6  a05f              ADR      r0,|L1.820|
0001b8  f7fffffe          BL       __2printf
;;;128       	   RTC_SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
0001bc  481c              LDR      r0,|L1.560|
0001be  6940              LDR      r0,[r0,#0x14]
0001c0  0740              LSLS     r0,r0,#29
0001c2  0f40              LSRS     r0,r0,#29
0001c4  491a              LDR      r1,|L1.560|
0001c6  6148              STR      r0,[r1,#0x14]
;;;129       	   RTC_TSR = 0x00000000;  //clear TIF 
0001c8  2000              MOVS     r0,#0
0001ca  6008              STR      r0,[r1,#0]
                  |L1.460|
;;;130    
;;;131    
;;;132         }	
;;;133       if((RTC_SR & RTC_SR_TOF_MASK) == 0x02)
0001cc  4818              LDR      r0,|L1.560|
0001ce  6940              LDR      r0,[r0,#0x14]
0001d0  2102              MOVS     r1,#2
0001d2  4008              ANDS     r0,r0,r1
0001d4  2802              CMP      r0,#2
0001d6  d10a              BNE      |L1.494|
;;;134       {
;;;135       	   printf("SRTC time overflow interrupt entered...\r\n");
0001d8  a061              ADR      r0,|L1.864|
0001da  f7fffffe          BL       __2printf
;;;136       	   RTC_SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
0001de  4814              LDR      r0,|L1.560|
0001e0  6940              LDR      r0,[r0,#0x14]
0001e2  0740              LSLS     r0,r0,#29
0001e4  0f40              LSRS     r0,r0,#29
0001e6  4912              LDR      r1,|L1.560|
0001e8  6148              STR      r0,[r1,#0x14]
;;;137       	   RTC_TSR = 0x00000000;  //clear TOF
0001ea  2000              MOVS     r0,#0
0001ec  6008              STR      r0,[r1,#0]
                  |L1.494|
;;;138       }	 	
;;;139       if((RTC_SR & RTC_SR_TAF_MASK) == 0x04)
0001ee  4810              LDR      r0,|L1.560|
0001f0  6940              LDR      r0,[r0,#0x14]
0001f2  2104              MOVS     r1,#4
0001f4  4008              ANDS     r0,r0,r1
0001f6  2804              CMP      r0,#4
0001f8  d10c              BNE      |L1.532|
;;;140       {
;;;141       	   printf("SRTC alarm interrupt entered...\r\n");
0001fa  a064              ADR      r0,|L1.908|
0001fc  f7fffffe          BL       __2printf
;;;142               printf("Time Seconds Register value is: %i\n", (int)RTC_TSR);
000200  480b              LDR      r0,|L1.560|
000202  6801              LDR      r1,[r0,#0]
000204  a06a              ADR      r0,|L1.944|
000206  f7fffffe          BL       __2printf
;;;143       	   RTC_TAR += 11;// Write new alarm value, to generate an alarm every second add 1
00020a  4809              LDR      r0,|L1.560|
00020c  6880              LDR      r0,[r0,#8]
00020e  300b              ADDS     r0,r0,#0xb
000210  4907              LDR      r1,|L1.560|
000212  6088              STR      r0,[r1,#8]
                  |L1.532|
;;;144       }	
;;;145        return;
;;;146    }
000214  bd10              POP      {r4,pc}
                          ENDP

                  __NVIC_EnableIRQ PROC
;;;732     */
;;;733    __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
000216  2800              CMP      r0,#0
;;;734    {
;;;735      if ((int32_t)(IRQn) >= 0)
000218  db06              BLT      |L1.552|
;;;736      {
;;;737        NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
00021a  06c2              LSLS     r2,r0,#27
00021c  0ed2              LSRS     r2,r2,#27
00021e  2101              MOVS     r1,#1
000220  4091              LSLS     r1,r1,r2
000222  4a02              LDR      r2,|L1.556|
000224  3a80              SUBS     r2,r2,#0x80
000226  6011              STR      r1,[r2,#0]
                  |L1.552|
;;;738      }
;;;739    }
000228  4770              BX       lr
;;;740    
                          ENDP

00022a  0000              DCW      0x0000
                  |L1.556|
                          DCD      0xe000e180
                  |L1.560|
                          DCD      0x4003d000
                  |L1.564|
000234  5254435f          DCB      "RTC_TSR    = 0x%02X,    ",0
000238  54535220
00023c  2020203d
000240  20307825
000244  3032582c
000248  20202020
00024c  00      
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L1.592|
000250  5254435f          DCB      "RTC_TPR    = 0x%02X\n",0
000254  54505220
000258  2020203d
00025c  20307825
000260  3032580a
000264  00      
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
                  |L1.616|
000268  5254435f          DCB      "RTC_TAR    = 0x%02X,    ",0
00026c  54415220
000270  2020203d
000274  20307825
000278  3032582c
00027c  20202020
000280  00      
000281  00                DCB      0
000282  00                DCB      0
000283  00                DCB      0
                  |L1.644|
000284  5254435f          DCB      "RTC_TCR    = 0x%02X\n",0
000288  54435220
00028c  2020203d
000290  20307825
000294  3032580a
000298  00      
000299  00                DCB      0
00029a  00                DCB      0
00029b  00                DCB      0
                  |L1.668|
00029c  5254435f          DCB      "RTC_CR     = 0x%02X,    ",0
0002a0  43522020
0002a4  2020203d
0002a8  20307825
0002ac  3032582c
0002b0  20202020
0002b4  00      
0002b5  00                DCB      0
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L1.696|
0002b8  5254435f          DCB      "RTC_SR     = 0x%02X\n",0
0002bc  53522020
0002c0  2020203d
0002c4  20307825
0002c8  3032580a
0002cc  00      
0002cd  00                DCB      0
0002ce  00                DCB      0
0002cf  00                DCB      0
                  |L1.720|
0002d0  5254435f          DCB      "RTC_LR     = 0x%02X,    ",0
0002d4  4c522020
0002d8  2020203d
0002dc  20307825
0002e0  3032582c
0002e4  20202020
0002e8  00      
0002e9  00                DCB      0
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L1.748|
0002ec  5254435f          DCB      "RTC_IER    = 0x%02X\n",0
0002f0  49455220
0002f4  2020203d
0002f8  20307825
0002fc  3032580a
000300  00      
000301  00                DCB      0
000302  00                DCB      0
000303  00                DCB      0
                  |L1.772|
                          DCD      0x40048000
                  |L1.776|
000308  47656e65          DCB      "Generating SoftWare reset to SRTC\n",0
00030c  72617469
000310  6e672053
000314  6f667457
000318  61726520
00031c  72657365
000320  7420746f
000324  20535254
000328  430a00  
00032b  00                DCB      0
                  |L1.812|
                          DCD      ||.conststring||
                  |L1.816|
                          DCD      0x400ff040
                  |L1.820|
000334  53525443          DCB      "SRTC time invalid interrupt entered...\r\n",0
000338  2074696d
00033c  6520696e
000340  76616c69
000344  6420696e
000348  74657272
00034c  75707420
000350  656e7465
000354  7265642e
000358  2e2e0d0a
00035c  00      
00035d  00                DCB      0
00035e  00                DCB      0
00035f  00                DCB      0
                  |L1.864|
000360  53525443          DCB      "SRTC time overflow interrupt entered...\r\n",0
000364  2074696d
000368  65206f76
00036c  6572666c
000370  6f772069
000374  6e746572
000378  72757074
00037c  20656e74
000380  65726564
000384  2e2e2e0d
000388  0a00    
00038a  00                DCB      0
00038b  00                DCB      0
                  |L1.908|
00038c  53525443          DCB      "SRTC alarm interrupt entered...\r\n",0
000390  20616c61
000394  726d2069
000398  6e746572
00039c  72757074
0003a0  20656e74
0003a4  65726564
0003a8  2e2e2e0d
0003ac  0a00    
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L1.944|
0003b0  54696d65          DCB      "Time Seconds Register value is: %i\n",0
0003b4  20536563
0003b8  6f6e6473
0003bc  20526567
0003c0  69737465
0003c4  72207661
0003c8  6c756520
0003cc  69733a20
0003d0  25690a00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  52544320          DCB      "RTC Invalid flag was set - Write to TSR done to clears "
000004  496e7661
000008  6c696420
00000c  666c6167
000010  20776173
000014  20736574
000018  202d2057
00001c  72697465
000020  20746f20
000024  54535220
000028  646f6e65
00002c  20746f20
000030  636c6561
000034  727320  
000037  5254435f          DCB      "RTC_SR =  %#02X \n",0
00003b  5352203d
00003f  20202523
000043  30325820
000047  0a00    

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\rtc\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_rtc_init____REV16|
#line 465 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_rtc_c_rtc_init____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_rtc_init____REVSH|
#line 480
|__asm___5_rtc_c_rtc_init____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
