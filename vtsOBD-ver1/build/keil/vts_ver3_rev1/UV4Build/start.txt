; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\start.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\start.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -IE:\bitbuck\gps-trackr\Software\vtsOBD-ver1\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\start.crf ..\..\..\src\cpu\start.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  start PROC
;;;21      */
;;;22     void start(void)
000000  b510              PUSH     {r4,lr}
;;;23     {            
;;;24     		/* Disable the watchdog timer */
;;;25         SIM_COPC = 0x00;
000002  2000              MOVS     r0,#0
000004  4988              LDR      r1,|L1.552|
000006  6008              STR      r0,[r1,#0]
;;;26         
;;;27     #ifndef CMSIS    // If conforming to CMSIS, we do not need to perform this code
;;;28     
;;;29     
;;;30     	/* Copy any vector or data sections that need to be in RAM */
;;;31     //	common_startup();
;;;32     #endif
;;;33     	/* Perform clock initialization, default UART initialization,
;;;34          * initializes clock out function, and enables the abort button
;;;35          */
;;;36     	sysinit();
000008  f7fffffe          BL       sysinit
;;;37             
;;;38       //      printf("\n\r\n\r");
;;;39     	
;;;40     	/* Determine the last cause(s) of reset */
;;;41     	//outSRS();	
;;;42     	//
;;;43     	/* Determine specific Kinetis L Family device and revision */
;;;44     	//cpu_identify();
;;;45     	
;;;46     #ifndef CMSIS    // If conforming to CMSIS, we do not need to perform this code
;;;47     	/* Jump to main process */
;;;48     	//main();
;;;49     
;;;50     	/* No actions to perform after this so wait forever */
;;;51     	while(1);
;;;52     #endif 
;;;53     }
00000c  bd10              POP      {r4,pc}
;;;54     /********************************************************************/
                          ENDP

                  cpu_identify PROC
;;;66      */
;;;67     void cpu_identify (void)
00000e  b510              PUSH     {r4,lr}
;;;68     {
;;;69       uint16 temp;
;;;70         /* Determine the Kinetis family */
;;;71         switch((SIM_SDID & SIM_SDID_FAMID(0x7))>>SIM_SDID_FAMID_SHIFT) 
000010  4886              LDR      r0,|L1.556|
000012  6a40              LDR      r0,[r0,#0x24]
000014  2107              MOVS     r1,#7
000016  0709              LSLS     r1,r1,#28
000018  4008              ANDS     r0,r0,r1
00001a  0f00              LSRS     r0,r0,#28
00001c  0003              MOVS     r3,r0
00001e  f7fffffe          BL       __ARM_common_switch8
000022  0504              DCB      0x05,0x04
000024  080c1014          DCB      0x08,0x0c,0x10,0x14
000028  1800              DCB      0x18,0x00
;;;72         {  
;;;73         	case 0x0:
;;;74         		printf("\n\rKL0");
00002a  a081              ADR      r0,|L1.560|
00002c  f7fffffe          BL       __2printf
;;;75         		break;
000030  e013              B        |L1.90|
;;;76         	case 0x1:
;;;77         		printf("\n\rKL1");
000032  a081              ADR      r0,|L1.568|
000034  f7fffffe          BL       __2printf
;;;78         		break;
000038  e00f              B        |L1.90|
;;;79         	case 0x2:
;;;80         		printf("\n\rKL2");
00003a  a081              ADR      r0,|L1.576|
00003c  f7fffffe          BL       __2printf
;;;81         		break;
000040  e00b              B        |L1.90|
;;;82         	case 0x3:
;;;83         		printf("\n\rKL3");
000042  a081              ADR      r0,|L1.584|
000044  f7fffffe          BL       __2printf
;;;84         		break;
000048  e007              B        |L1.90|
;;;85         	case 0x4:
;;;86         		printf("\n\rKL4");
00004a  a081              ADR      r0,|L1.592|
00004c  f7fffffe          BL       __2printf
;;;87         		break;
000050  e003              B        |L1.90|
;;;88     	default:
;;;89     		printf("\n\rUnrecognized Kinetis family device.\n\r");  
000052  a081              ADR      r0,|L1.600|
000054  f7fffffe          BL       __2printf
;;;90     		break;  	
000058  bf00              NOP      
                  |L1.90|
00005a  bf00              NOP                            ;75
;;;91         }
;;;92         
;;;93         /* Determine Sub-Family ID */
;;;94         switch((SIM_SDID & SIM_SDID_SUBFAMID(0x7))>>SIM_SDID_SUBFAMID_SHIFT) 
00005c  4873              LDR      r0,|L1.556|
00005e  6a40              LDR      r0,[r0,#0x24]
000060  2107              MOVS     r1,#7
000062  0609              LSLS     r1,r1,#24
000064  4008              ANDS     r0,r0,r1
000066  0e00              LSRS     r0,r0,#24
000068  2804              CMP      r0,#4
00006a  d004              BEQ      |L1.118|
00006c  2805              CMP      r0,#5
00006e  d006              BEQ      |L1.126|
000070  2806              CMP      r0,#6
000072  d10c              BNE      |L1.142|
000074  e007              B        |L1.134|
                  |L1.118|
;;;95         {  
;;;96         	case 0x4:
;;;97         		printf("4\n\r");
000076  a082              ADR      r0,|L1.640|
000078  f7fffffe          BL       __2printf
;;;98         		break;
00007c  e00b              B        |L1.150|
                  |L1.126|
;;;99         	case 0x5:
;;;100        		printf("5\n\r");
00007e  a081              ADR      r0,|L1.644|
000080  f7fffffe          BL       __2printf
;;;101        		break;
000084  e007              B        |L1.150|
                  |L1.134|
;;;102            case 0x6:
;;;103                    printf("6\n\r");
000086  a080              ADR      r0,|L1.648|
000088  f7fffffe          BL       __2printf
;;;104                    break;
00008c  e003              B        |L1.150|
                  |L1.142|
;;;105    	default:
;;;106    		printf("\n\rUnrecognized Kinetis sub-family device.\n\r");  
00008e  a07f              ADR      r0,|L1.652|
000090  f7fffffe          BL       __2printf
;;;107    		break;  	
000094  bf00              NOP      
                  |L1.150|
000096  bf00              NOP                            ;98
;;;108        }
;;;109        
;;;110        /* Determine the package size */
;;;111        switch((SIM_SDID & SIM_SDID_PINID(0xF))>>SIM_SDID_PINID_SHIFT) 
000098  4864              LDR      r0,|L1.556|
00009a  6a40              LDR      r0,[r0,#0x24]
00009c  0700              LSLS     r0,r0,#28
00009e  0f00              LSRS     r0,r0,#28
0000a0  0003              MOVS     r3,r0
0000a2  f7fffffe          BL       __ARM_common_switch8
0000a6  0906              DCB      0x09,0x06
0000a8  0a0e2212          DCB      0x0a,0x0e,0x22,0x12
0000ac  161a221e          DCB      0x16,0x1a,0x22,0x1e
0000b0  2200              DCB      0x22,0x00
;;;112        {  
;;;113        	case 0x0:
;;;114        		printf("16pin\n\r");
0000b2  a081              ADR      r0,|L1.696|
0000b4  f7fffffe          BL       __2printf
;;;115        		break;
0000b8  e01b              B        |L1.242|
;;;116        	case 0x1:
;;;117        		printf("24pin\n\r");
0000ba  a081              ADR      r0,|L1.704|
0000bc  f7fffffe          BL       __2printf
;;;118        		break;
0000c0  e017              B        |L1.242|
;;;119        	case 0x2:
;;;120        		printf("32pin\n\r");
0000c2  a081              ADR      r0,|L1.712|
0000c4  f7fffffe          BL       __2printf
;;;121        		break;
0000c8  e013              B        |L1.242|
;;;122        	case 0x4:
;;;123        		printf("48pin\n\r");
0000ca  a081              ADR      r0,|L1.720|
0000cc  f7fffffe          BL       __2printf
;;;124        		break;
0000d0  e00f              B        |L1.242|
;;;125        	case 0x5:
;;;126        		printf("64pin\n\r");
0000d2  a081              ADR      r0,|L1.728|
0000d4  f7fffffe          BL       __2printf
;;;127                    break;
0000d8  e00b              B        |L1.242|
;;;128            case 0x6:
;;;129        		printf("80pin\n\r");
0000da  a081              ADR      r0,|L1.736|
0000dc  f7fffffe          BL       __2printf
;;;130                    break;
0000e0  e007              B        |L1.242|
;;;131            case 0x8:
;;;132        		printf("100pin\n\r");        
0000e2  a081              ADR      r0,|L1.744|
0000e4  f7fffffe          BL       __2printf
;;;133        		break;
0000e8  e003              B        |L1.242|
;;;134    	default:
;;;135    		printf("\n\rUnrecognized Kinetis package code.      ");  
0000ea  a082              ADR      r0,|L1.756|
0000ec  f7fffffe          BL       __2printf
;;;136    		break;  	
0000f0  bf00              NOP      
                  |L1.242|
0000f2  bf00              NOP                            ;115
;;;137        }
;;;138        
;;;139        /* Determine Attribute ID */
;;;140        switch((SIM_SDID & SIM_SDID_SERIESID(0x7))>>SIM_SDID_SERIESID_SHIFT) 
0000f4  484d              LDR      r0,|L1.556|
0000f6  6a40              LDR      r0,[r0,#0x24]
0000f8  2107              MOVS     r1,#7
0000fa  0509              LSLS     r1,r1,#20
0000fc  4008              ANDS     r0,r0,r1
0000fe  0d00              LSRS     r0,r0,#20
000100  2801              CMP      r0,#1
000102  d103              BNE      |L1.268|
;;;141        {  
;;;142        	case 0x1:
;;;143        		printf("\n\rLow Power Line with Cortex M0+\n\r\n\r");
000104  a086              ADR      r0,|L1.800|
000106  f7fffffe          BL       __2printf
;;;144        		break;
00010a  e003              B        |L1.276|
                  |L1.268|
;;;145    	default:
;;;146    		printf("\n\rUnrecognized Kinetis family attribute.\n\r");  
00010c  a08e              ADR      r0,|L1.840|
00010e  f7fffffe          BL       __2printf
;;;147    		break;  	
000112  bf00              NOP      
                  |L1.276|
000114  bf00              NOP                            ;144
;;;148        } 
;;;149        
;;;150        /* Determine the System SRAM Size */
;;;151        switch((SIM_SDID & SIM_SDID_SRAMSIZE(0x7))>>SIM_SDID_SRAMSIZE_SHIFT) 
000116  4845              LDR      r0,|L1.556|
000118  6a40              LDR      r0,[r0,#0x24]
00011a  2107              MOVS     r1,#7
00011c  0409              LSLS     r1,r1,#16
00011e  4008              ANDS     r0,r0,r1
000120  0c00              LSRS     r0,r0,#16
000122  0003              MOVS     r3,r0
000124  f7fffffe          BL       __ARM_common_switch8
000128  0805090d          DCB      0x08,0x05,0x09,0x0d
00012c  1115191d          DCB      0x11,0x15,0x19,0x1d
000130  2125              DCB      0x21,0x25
;;;152        {  
;;;153        	case 0x0:
;;;154              printf("SRAM  size: 0.5 KB\n\r");
000132  a090              ADR      r0,|L1.884|
000134  f7fffffe          BL       __2printf
;;;155        		break;
000138  e01f              B        |L1.378|
;;;156            case 0x1:
;;;157              printf("SRAM  size:  1 KB\n\r");
00013a  a094              ADR      r0,|L1.908|
00013c  f7fffffe          BL       __2printf
;;;158              break;
000140  e01b              B        |L1.378|
;;;159            case 0x2:
;;;160              printf("SRAM  size:  2 KB\n\r");
000142  a097              ADR      r0,|L1.928|
000144  f7fffffe          BL       __2printf
;;;161              break;
000148  e017              B        |L1.378|
;;;162            case 0x3:
;;;163              printf("SRAM  size:  4 KB\n\r");
00014a  a09a              ADR      r0,|L1.948|
00014c  f7fffffe          BL       __2printf
;;;164              break;
000150  e013              B        |L1.378|
;;;165            case 0x4:
;;;166              printf("SRAM  size:  8 KB\n\r");
000152  a09d              ADR      r0,|L1.968|
000154  f7fffffe          BL       __2printf
;;;167              break;
000158  e00f              B        |L1.378|
;;;168            case 0x5:
;;;169              printf("SRAM  size:  16 KB\n\r");
00015a  a0a0              ADR      r0,|L1.988|
00015c  f7fffffe          BL       __2printf
;;;170              break;
000160  e00b              B        |L1.378|
;;;171            case 0x6:
;;;172              printf("SRAM  size:  32 KB\n\r");
000162  a0a4              ADR      r0,|L1.1012|
000164  f7fffffe          BL       __2printf
;;;173              break;
000168  e007              B        |L1.378|
;;;174            case 0x7:
;;;175              printf("SRAM  size:  64 KB\n\r");
00016a  a0a8              ADR      r0,|L1.1036|
00016c  f7fffffe          BL       __2printf
;;;176              break;
000170  e003              B        |L1.378|
;;;177    	default:
;;;178    		printf("\n\rUnrecognized SRAM Size.\n\r");  
000172  a0ac              ADR      r0,|L1.1060|
000174  f7fffffe          BL       __2printf
;;;179    		break;  	
000178  bf00              NOP      
                  |L1.378|
00017a  bf00              NOP                            ;155
;;;180        }                
;;;181        
;;;182        /* Determine the flash revision */
;;;183        //flash_identify();    
;;;184        
;;;185        /* Determine the P-flash size */
;;;186      switch((SIM_FCFG1 & SIM_FCFG1_PFSIZE(0xF))>>SIM_FCFG1_PFSIZE_SHIFT)
00017c  482b              LDR      r0,|L1.556|
00017e  3040              ADDS     r0,r0,#0x40
000180  68c0              LDR      r0,[r0,#0xc]
000182  210f              MOVS     r1,#0xf
000184  0609              LSLS     r1,r1,#24
000186  4008              ANDS     r0,r0,r1
000188  0e00              LSRS     r0,r0,#24
00018a  2805              CMP      r0,#5
00018c  d01a              BEQ      |L1.452|
00018e  dc06              BGT      |L1.414|
000190  2800              CMP      r0,#0
000192  d00b              BEQ      |L1.428|
000194  2801              CMP      r0,#1
000196  d00d              BEQ      |L1.436|
000198  2803              CMP      r0,#3
00019a  d123              BNE      |L1.484|
00019c  e00e              B        |L1.444|
                  |L1.414|
00019e  2807              CMP      r0,#7
0001a0  d014              BEQ      |L1.460|
0001a2  2809              CMP      r0,#9
0001a4  d016              BEQ      |L1.468|
0001a6  280f              CMP      r0,#0xf
0001a8  d11c              BNE      |L1.484|
0001aa  e017              B        |L1.476|
                  |L1.428|
;;;187        {
;;;188      	case 0x0:
;;;189        		printf("Flash size:  8 KB program flash, 0.25 KB protection region\n\r");
0001ac  a0a4              ADR      r0,|L1.1088|
0001ae  f7fffffe          BL       __2printf
;;;190        		break;
0001b2  e01b              B        |L1.492|
                  |L1.436|
;;;191        	case 0x1:
;;;192        		printf("Flash size:  16 KB program flash, 0.5 KB protection region\n\r");
0001b4  a0b2              ADR      r0,|L1.1152|
0001b6  f7fffffe          BL       __2printf
;;;193        		break;
0001ba  e017              B        |L1.492|
                  |L1.444|
;;;194            case 0x3:
;;;195        		printf("Flash size:  32 KB program flash, 1 KB protection region\n\r");
0001bc  a0c0              ADR      r0,|L1.1216|
0001be  f7fffffe          BL       __2printf
;;;196        		break;
0001c2  e013              B        |L1.492|
                  |L1.452|
;;;197        	case 0x5:
;;;198        		printf("Flash size:  64 KB program flash, 2 KB protection region\n\r");
0001c4  a0cd              ADR      r0,|L1.1276|
0001c6  f7fffffe          BL       __2printf
;;;199        		break;
0001ca  e00f              B        |L1.492|
                  |L1.460|
;;;200            case 0x7:
;;;201        		printf("Flash size:  128 KB program flash, 4 KB protection region\n\r");
0001cc  a0da              ADR      r0,|L1.1336|
0001ce  f7fffffe          BL       __2printf
;;;202        		break;
0001d2  e00b              B        |L1.492|
                  |L1.468|
;;;203            case 0x9:
;;;204        		printf("Flash size:  256 KB program flash, 4 KB protection region\n\r");
0001d4  a0e7              ADR      r0,|L1.1396|
0001d6  f7fffffe          BL       __2printf
;;;205        		break;
0001da  e007              B        |L1.492|
                  |L1.476|
;;;206            case 0xF:
;;;207        		printf("Flash size:  128 KB program flash, 4 KB protection region\n\r");
0001dc  a0d6              ADR      r0,|L1.1336|
0001de  f7fffffe          BL       __2printf
;;;208        		break;
0001e2  e003              B        |L1.492|
                  |L1.484|
;;;209    	default:
;;;210    		printf("ERR!! Undefined flash size\n\r");  
0001e4  a0f2              ADR      r0,|L1.1456|
0001e6  f7fffffe          BL       __2printf
;;;211    		break;  	  		
0001ea  bf00              NOP      
                  |L1.492|
0001ec  bf00              NOP                            ;190
;;;212        }
;;;213        
;;;214        /* Determine the revision ID */
;;;215        temp = ((SIM_SDID_REVID(0xF))>>SIM_SDID_REVID_SHIFT);
0001ee  240f              MOVS     r4,#0xf
;;;216        printf("Silicon rev %d\n\r", temp);       
0001f0  4621              MOV      r1,r4
0001f2  a0f7              ADR      r0,|L1.1488|
0001f4  f7fffffe          BL       __2printf
;;;217    }
0001f8  bd10              POP      {r4,pc}
;;;218    /********************************************************************/
                          ENDP

                  flash_identify PROC
;;;229     */
;;;230    void flash_identify (void)
0001fa  b510              PUSH     {r4,lr}
;;;231    {
;;;232        /* Get the flash parameter version */
;;;233    
;;;234        /* Write the flash FCCOB registers with the values for a read resource command */
;;;235        FTFA_FCCOB0 = 0x03;
0001fc  2003              MOVS     r0,#3
0001fe  49f9              LDR      r1,|L1.1508|
000200  71c8              STRB     r0,[r1,#7]
;;;236        FTFA_FCCOB1 = 0x00;
000202  2000              MOVS     r0,#0
000204  7188              STRB     r0,[r1,#6]
;;;237        FTFA_FCCOB2 = 0x00;
000206  7148              STRB     r0,[r1,#5]
;;;238        FTFA_FCCOB3 = 0x00;
000208  7108              STRB     r0,[r1,#4]
;;;239        FTFA_FCCOB8 = 0x01;
00020a  2001              MOVS     r0,#1
00020c  73c8              STRB     r0,[r1,#0xf]
;;;240    
;;;241        /* All required FCCOBx registers are written, so launch the command */
;;;242        FTFA_FSTAT = FTFA_FSTAT_CCIF_MASK;
00020e  2080              MOVS     r0,#0x80
000210  7008              STRB     r0,[r1,#0]
;;;243    
;;;244        /* Wait for the command to complete */
;;;245        while(!(FTFA_FSTAT & FTFA_FSTAT_CCIF_MASK));
000212  bf00              NOP      
                  |L1.532|
000214  48f3              LDR      r0,|L1.1508|
000216  7800              LDRB     r0,[r0,#0]
000218  2180              MOVS     r1,#0x80
00021a  4008              ANDS     r0,r0,r1
00021c  2800              CMP      r0,#0
00021e  d0f9              BEQ      |L1.532|
;;;246        
;;;247        printf("Flash parameter version %d ",FTFA_FCCOB4);
000220  48f0              LDR      r0,|L1.1508|
000222  7ac1              LDRB     r1,[r0,#0xb]
000224  e1e0              B        |L1.1512|
000226  0000              DCW      0x0000
                  |L1.552|
                          DCD      0x40048100
                  |L1.556|
                          DCD      0x40048000
                  |L1.560|
000230  0a0d4b4c          DCB      "\n\rKL0",0
000234  3000    
000236  00                DCB      0
000237  00                DCB      0
                  |L1.568|
000238  0a0d4b4c          DCB      "\n\rKL1",0
00023c  3100    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L1.576|
000240  0a0d4b4c          DCB      "\n\rKL2",0
000244  3200    
000246  00                DCB      0
000247  00                DCB      0
                  |L1.584|
000248  0a0d4b4c          DCB      "\n\rKL3",0
00024c  3300    
00024e  00                DCB      0
00024f  00                DCB      0
                  |L1.592|
000250  0a0d4b4c          DCB      "\n\rKL4",0
000254  3400    
000256  00                DCB      0
000257  00                DCB      0
                  |L1.600|
000258  0a0d556e          DCB      "\n\rUnrecognized Kinetis family device.\n\r",0
00025c  7265636f
000260  676e697a
000264  6564204b
000268  696e6574
00026c  69732066
000270  616d696c
000274  79206465
000278  76696365
00027c  2e0a0d00
                  |L1.640|
000280  340a0d00          DCB      "4\n\r",0
                  |L1.644|
000284  350a0d00          DCB      "5\n\r",0
                  |L1.648|
000288  360a0d00          DCB      "6\n\r",0
                  |L1.652|
00028c  0a0d556e          DCB      "\n\rUnrecognized Kinetis sub-family device.\n\r",0
000290  7265636f
000294  676e697a
000298  6564204b
00029c  696e6574
0002a0  69732073
0002a4  75622d66
0002a8  616d696c
0002ac  79206465
0002b0  76696365
0002b4  2e0a0d00
                  |L1.696|
0002b8  31367069          DCB      "16pin\n\r",0
0002bc  6e0a0d00
                  |L1.704|
0002c0  32347069          DCB      "24pin\n\r",0
0002c4  6e0a0d00
                  |L1.712|
0002c8  33327069          DCB      "32pin\n\r",0
0002cc  6e0a0d00
                  |L1.720|
0002d0  34387069          DCB      "48pin\n\r",0
0002d4  6e0a0d00
                  |L1.728|
0002d8  36347069          DCB      "64pin\n\r",0
0002dc  6e0a0d00
                  |L1.736|
0002e0  38307069          DCB      "80pin\n\r",0
0002e4  6e0a0d00
                  |L1.744|
0002e8  31303070          DCB      "100pin\n\r",0
0002ec  696e0a0d
0002f0  00      
0002f1  00                DCB      0
0002f2  00                DCB      0
0002f3  00                DCB      0
                  |L1.756|
0002f4  0a0d556e          DCB      "\n\rUnrecognized Kinetis package code.      ",0
0002f8  7265636f
0002fc  676e697a
000300  6564204b
000304  696e6574
000308  69732070
00030c  61636b61
000310  67652063
000314  6f64652e
000318  20202020
00031c  202000  
00031f  00                DCB      0
                  |L1.800|
000320  0a0d4c6f          DCB      "\n\rLow Power Line with Cortex M0+\n\r\n\r",0
000324  7720506f
000328  77657220
00032c  4c696e65
000330  20776974
000334  6820436f
000338  72746578
00033c  204d302b
000340  0a0d0a0d
000344  00      
000345  00                DCB      0
000346  00                DCB      0
000347  00                DCB      0
                  |L1.840|
000348  0a0d556e          DCB      "\n\rUnrecognized Kinetis family attribute.\n\r",0
00034c  7265636f
000350  676e697a
000354  6564204b
000358  696e6574
00035c  69732066
000360  616d696c
000364  79206174
000368  74726962
00036c  7574652e
000370  0a0d00  
000373  00                DCB      0
                  |L1.884|
000374  5352414d          DCB      "SRAM  size: 0.5 KB\n\r",0
000378  20207369
00037c  7a653a20
000380  302e3520
000384  4b420a0d
000388  00      
000389  00                DCB      0
00038a  00                DCB      0
00038b  00                DCB      0
                  |L1.908|
00038c  5352414d          DCB      "SRAM  size:  1 KB\n\r",0
000390  20207369
000394  7a653a20
000398  2031204b
00039c  420a0d00
                  |L1.928|
0003a0  5352414d          DCB      "SRAM  size:  2 KB\n\r",0
0003a4  20207369
0003a8  7a653a20
0003ac  2032204b
0003b0  420a0d00
                  |L1.948|
0003b4  5352414d          DCB      "SRAM  size:  4 KB\n\r",0
0003b8  20207369
0003bc  7a653a20
0003c0  2034204b
0003c4  420a0d00
                  |L1.968|
0003c8  5352414d          DCB      "SRAM  size:  8 KB\n\r",0
0003cc  20207369
0003d0  7a653a20
0003d4  2038204b
0003d8  420a0d00
                  |L1.988|
0003dc  5352414d          DCB      "SRAM  size:  16 KB\n\r",0
0003e0  20207369
0003e4  7a653a20
0003e8  20313620
0003ec  4b420a0d
0003f0  00      
0003f1  00                DCB      0
0003f2  00                DCB      0
0003f3  00                DCB      0
                  |L1.1012|
0003f4  5352414d          DCB      "SRAM  size:  32 KB\n\r",0
0003f8  20207369
0003fc  7a653a20
000400  20333220
000404  4b420a0d
000408  00      
000409  00                DCB      0
00040a  00                DCB      0
00040b  00                DCB      0
                  |L1.1036|
00040c  5352414d          DCB      "SRAM  size:  64 KB\n\r",0
000410  20207369
000414  7a653a20
000418  20363420
00041c  4b420a0d
000420  00      
000421  00                DCB      0
000422  00                DCB      0
000423  00                DCB      0
                  |L1.1060|
000424  0a0d556e          DCB      "\n\rUnrecognized SRAM Size.\n\r",0
000428  7265636f
00042c  676e697a
000430  65642053
000434  52414d20
000438  53697a65
00043c  2e0a0d00
                  |L1.1088|
000440  466c6173          DCB      "Flash size:  8 KB program flash, 0.25 KB protection reg"
000444  68207369
000448  7a653a20
00044c  2038204b
000450  42207072
000454  6f677261
000458  6d20666c
00045c  6173682c
000460  20302e32
000464  35204b42
000468  2070726f
00046c  74656374
000470  696f6e20
000474  726567  
000477  696f6e0a          DCB      "ion\n\r",0
00047b  0d00    
00047d  00                DCB      0
00047e  00                DCB      0
00047f  00                DCB      0
                  |L1.1152|
000480  466c6173          DCB      "Flash size:  16 KB program flash, 0.5 KB protection reg"
000484  68207369
000488  7a653a20
00048c  20313620
000490  4b422070
000494  726f6772
000498  616d2066
00049c  6c617368
0004a0  2c20302e
0004a4  35204b42
0004a8  2070726f
0004ac  74656374
0004b0  696f6e20
0004b4  726567  
0004b7  696f6e0a          DCB      "ion\n\r",0
0004bb  0d00    
0004bd  00                DCB      0
0004be  00                DCB      0
0004bf  00                DCB      0
                  |L1.1216|
0004c0  466c6173          DCB      "Flash size:  32 KB program flash, 1 KB protection regio"
0004c4  68207369
0004c8  7a653a20
0004cc  20333220
0004d0  4b422070
0004d4  726f6772
0004d8  616d2066
0004dc  6c617368
0004e0  2c203120
0004e4  4b422070
0004e8  726f7465
0004ec  6374696f
0004f0  6e207265
0004f4  67696f  
0004f7  6e0a0d00          DCB      "n\n\r",0
0004fb  00                DCB      0
                  |L1.1276|
0004fc  466c6173          DCB      "Flash size:  64 KB program flash, 2 KB protection regio"
000500  68207369
000504  7a653a20
000508  20363420
00050c  4b422070
000510  726f6772
000514  616d2066
000518  6c617368
00051c  2c203220
000520  4b422070
000524  726f7465
000528  6374696f
00052c  6e207265
000530  67696f  
000533  6e0a0d00          DCB      "n\n\r",0
000537  00                DCB      0
                  |L1.1336|
000538  466c6173          DCB      "Flash size:  128 KB program flash, 4 KB protection regi"
00053c  68207369
000540  7a653a20
000544  20313238
000548  204b4220
00054c  70726f67
000550  72616d20
000554  666c6173
000558  682c2034
00055c  204b4220
000560  70726f74
000564  65637469
000568  6f6e2072
00056c  656769  
00056f  6f6e0a0d          DCB      "on\n\r",0
000573  00      
                  |L1.1396|
000574  466c6173          DCB      "Flash size:  256 KB program flash, 4 KB protection regi"
000578  68207369
00057c  7a653a20
000580  20323536
000584  204b4220
000588  70726f67
00058c  72616d20
000590  666c6173
000594  682c2034
000598  204b4220
00059c  70726f74
0005a0  65637469
0005a4  6f6e2072
0005a8  656769  
0005ab  6f6e0a0d          DCB      "on\n\r",0
0005af  00      
                  |L1.1456|
0005b0  45525221          DCB      "ERR!! Undefined flash size\n\r",0
0005b4  2120556e
0005b8  64656669
0005bc  6e656420
0005c0  666c6173
0005c4  68207369
0005c8  7a650a0d
0005cc  00      
0005cd  00                DCB      0
0005ce  00                DCB      0
0005cf  00                DCB      0
                  |L1.1488|
0005d0  53696c69          DCB      "Silicon rev %d\n\r",0
0005d4  636f6e20
0005d8  72657620
0005dc  25640a0d
0005e0  00      
0005e1  00                DCB      0
0005e2  00                DCB      0
0005e3  00                DCB      0
                  |L1.1508|
                          DCD      0x40020000
                  |L1.1512|
0005e8  a01c              ADR      r0,|L1.1628|
0005ea  f7fffffe          BL       __2printf
;;;248        printf(" %d ",FTFA_FCCOB5);
0005ee  4822              LDR      r0,|L1.1656|
0005f0  7a81              LDRB     r1,[r0,#0xa]
0005f2  a022              ADR      r0,|L1.1660|
0005f4  f7fffffe          BL       __2printf
;;;249        printf(" %d ",FTFA_FCCOB6);
0005f8  481f              LDR      r0,|L1.1656|
0005fa  7a41              LDRB     r1,[r0,#9]
0005fc  a01f              ADR      r0,|L1.1660|
0005fe  f7fffffe          BL       __2printf
;;;250        printf(" %d\n\r",FTFA_FCCOB7);
000602  481d              LDR      r0,|L1.1656|
000604  7a01              LDRB     r1,[r0,#8]
000606  a01f              ADR      r0,|L1.1668|
000608  f7fffffe          BL       __2printf
;;;251    
;;;252        /* Get the flash version ID */   
;;;253    
;;;254        /* Write the flash FCCOB registers with the values for a read resource command */
;;;255        FTFA_FCCOB0 = 0x03;
00060c  2003              MOVS     r0,#3
00060e  491a              LDR      r1,|L1.1656|
000610  71c8              STRB     r0,[r1,#7]
;;;256        FTFA_FCCOB1 = 0x00;
000612  2000              MOVS     r0,#0
000614  7188              STRB     r0,[r1,#6]
;;;257        FTFA_FCCOB2 = 0x00;
000616  7148              STRB     r0,[r1,#5]
;;;258        FTFA_FCCOB3 = 0x04;
000618  2004              MOVS     r0,#4
00061a  7108              STRB     r0,[r1,#4]
;;;259        FTFA_FCCOB8 = 0x01;
00061c  2001              MOVS     r0,#1
00061e  73c8              STRB     r0,[r1,#0xf]
;;;260    
;;;261        /* All required FCCOBx registers are written, so launch the command */
;;;262        FTFA_FSTAT = FTFA_FSTAT_CCIF_MASK;
000620  2080              MOVS     r0,#0x80
000622  7008              STRB     r0,[r1,#0]
;;;263    
;;;264        /* Wait for the command to complete */
;;;265        while(!(FTFA_FSTAT & FTFA_FSTAT_CCIF_MASK));
000624  bf00              NOP      
                  |L1.1574|
000626  4814              LDR      r0,|L1.1656|
000628  7800              LDRB     r0,[r0,#0]
00062a  2180              MOVS     r1,#0x80
00062c  4008              ANDS     r0,r0,r1
00062e  2800              CMP      r0,#0
000630  d0f9              BEQ      |L1.1574|
;;;266    
;;;267        printf("Flash version ID %d ",FTFA_FCCOB4);  
000632  4811              LDR      r0,|L1.1656|
000634  7ac1              LDRB     r1,[r0,#0xb]
000636  a015              ADR      r0,|L1.1676|
000638  f7fffffe          BL       __2printf
;;;268        printf(" %d",FTFA_FCCOB5);  
00063c  480e              LDR      r0,|L1.1656|
00063e  7a81              LDRB     r1,[r0,#0xa]
000640  a018              ADR      r0,|L1.1700|
000642  f7fffffe          BL       __2printf
;;;269        printf(" %d ",FTFA_FCCOB6);  
000646  480c              LDR      r0,|L1.1656|
000648  7a41              LDRB     r1,[r0,#9]
00064a  a00c              ADR      r0,|L1.1660|
00064c  f7fffffe          BL       __2printf
;;;270        printf("%d\n\r",FTFA_FCCOB7);  
000650  4809              LDR      r0,|L1.1656|
000652  7a01              LDRB     r1,[r0,#8]
000654  4814              LDR      r0,|L1.1704|
000656  f7fffffe          BL       __2printf
;;;271    }
00065a  bd10              POP      {r4,pc}
;;;272    /********************************************************************/
                          ENDP

                  |L1.1628|
00065c  466c6173          DCB      "Flash parameter version %d ",0
000660  68207061
000664  72616d65
000668  74657220
00066c  76657273
000670  696f6e20
000674  25642000
                  |L1.1656|
                          DCD      0x40020000
                  |L1.1660|
00067c  20256420          DCB      " %d ",0
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  2025640a          DCB      " %d\n\r",0
000688  0d00    
00068a  00                DCB      0
00068b  00                DCB      0
                  |L1.1676|
00068c  466c6173          DCB      "Flash version ID %d ",0
000690  68207665
000694  7273696f
000698  6e204944
00069c  20256420
0006a0  00      
0006a1  00                DCB      0
0006a2  00                DCB      0
0006a3  00                DCB      0
                  |L1.1700|
0006a4  20256400          DCB      " %d",0
                  |L1.1704|
                          DCD      ||.text||+0x5dc

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L13.24|
                  |L13.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L13.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L13.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\cpu\\start.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_start_c_start____REV16|
#line 441 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_start_c_start____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_start_c_start____REVSH|
#line 456
|__asm___7_start_c_start____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
