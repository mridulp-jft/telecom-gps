; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -IE:\bitbuck\gps-trackr\Software\vtsOBD-ver1\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  send_modem2 PROC
;;;303    	
;;;304    void send_modem2(char ch[])
000000  b570              PUSH     {r4-r6,lr}
;;;305    	{	
000002  4604              MOV      r4,r0
;;;306    						unsigned char i21;
;;;307    						i21=0;
000004  2500              MOVS     r5,#0
;;;308    						while ((*(ch+i21)) != '\0') // NULL
000006  e005              B        |L1.20|
                  |L1.8|
;;;309    						{	
;;;310    						// delay(1);
;;;311    						 uart_putchar(UART2_BASE_PTR, (*(ch+i21)));
000008  5d61              LDRB     r1,[r4,r5]
00000a  48fe              LDR      r0,|L1.1028|
00000c  f7fffffe          BL       uart_putchar
;;;312    						 i21++;
000010  1c68              ADDS     r0,r5,#1
000012  b2c5              UXTB     r5,r0
                  |L1.20|
000014  5d60              LDRB     r0,[r4,r5]            ;308
000016  2800              CMP      r0,#0                 ;308
000018  d1f6              BNE      |L1.8|
;;;313    						}
;;;314    		
;;;315    	}	
00001a  bd70              POP      {r4-r6,pc}
;;;316    	
                          ENDP

                  parse_gsm PROC
;;;624    
;;;625    void parse_gsm(char *str, int first, int sec, char *string)
00001c  b5f8              PUSH     {r3-r7,lr}
;;;626    {
00001e  4604              MOV      r4,r0
000020  460e              MOV      r6,r1
000022  4617              MOV      r7,r2
000024  461d              MOV      r5,r3
;;;627    
;;;628    		delay(10);		
000026  200a              MOVS     r0,#0xa
000028  f7fffffe          BL       delay
;;;629    		memset(string,0,15);
00002c  210f              MOVS     r1,#0xf
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       __aeabi_memclr
;;;630    		for(i11=0,temp11=0;i11<100;i11++)
000034  2000              MOVS     r0,#0
000036  49f4              LDR      r1,|L1.1032|
000038  6008              STR      r0,[r1,#0]  ; i11
00003a  49f4              LDR      r1,|L1.1036|
00003c  6008              STR      r0,[r1,#0]  ; temp11
00003e  e01a              B        |L1.118|
                  |L1.64|
;;;631    		{
;;;632    		if(str[i11]=='"')
000040  48f1              LDR      r0,|L1.1032|
000042  6800              LDR      r0,[r0,#0]  ; i11
000044  5c20              LDRB     r0,[r4,r0]
000046  2822              CMP      r0,#0x22
000048  d108              BNE      |L1.92|
;;;633    			{temp11++;j11=i11;}
00004a  48f0              LDR      r0,|L1.1036|
00004c  6800              LDR      r0,[r0,#0]  ; temp11
00004e  1c40              ADDS     r0,r0,#1
000050  49ee              LDR      r1,|L1.1036|
000052  6008              STR      r0,[r1,#0]  ; temp11
000054  48ec              LDR      r0,|L1.1032|
000056  6800              LDR      r0,[r0,#0]  ; i11
000058  49ed              LDR      r1,|L1.1040|
00005a  6008              STR      r0,[r1,#0]  ; j11
                  |L1.92|
;;;634    		else{}
;;;635    			
;;;636    		if(temp11>=sec){i11=900;}
00005c  48eb              LDR      r0,|L1.1036|
00005e  6800              LDR      r0,[r0,#0]  ; temp11
000060  42b8              CMP      r0,r7
000062  db03              BLT      |L1.108|
000064  20e1              MOVS     r0,#0xe1
000066  0080              LSLS     r0,r0,#2
000068  49e7              LDR      r1,|L1.1032|
00006a  6008              STR      r0,[r1,#0]  ; i11
                  |L1.108|
00006c  48e6              LDR      r0,|L1.1032|
00006e  6800              LDR      r0,[r0,#0]            ;630  ; i11
000070  1c40              ADDS     r0,r0,#1              ;630
000072  49e5              LDR      r1,|L1.1032|
000074  6008              STR      r0,[r1,#0]            ;630  ; i11
                  |L1.118|
000076  48e4              LDR      r0,|L1.1032|
000078  6800              LDR      r0,[r0,#0]            ;630  ; i11
00007a  2864              CMP      r0,#0x64              ;630
00007c  dbe0              BLT      |L1.64|
;;;637    		else{}	
;;;638    		
;;;639    		}	
;;;640    		
;;;641    		for(i11=0,temp11=0;i11<100;i11++)
00007e  2000              MOVS     r0,#0
000080  49e1              LDR      r1,|L1.1032|
000082  6008              STR      r0,[r1,#0]  ; i11
000084  49e1              LDR      r1,|L1.1036|
000086  6008              STR      r0,[r1,#0]  ; temp11
000088  e01a              B        |L1.192|
                  |L1.138|
;;;642    		{
;;;643    		if(str[i11]=='"')
00008a  48df              LDR      r0,|L1.1032|
00008c  6800              LDR      r0,[r0,#0]  ; i11
00008e  5c20              LDRB     r0,[r4,r0]
000090  2822              CMP      r0,#0x22
000092  d108              BNE      |L1.166|
;;;644    			{temp11++;l=i11;}										
000094  48dd              LDR      r0,|L1.1036|
000096  6800              LDR      r0,[r0,#0]  ; temp11
000098  1c40              ADDS     r0,r0,#1
00009a  49dc              LDR      r1,|L1.1036|
00009c  6008              STR      r0,[r1,#0]  ; temp11
00009e  48da              LDR      r0,|L1.1032|
0000a0  6800              LDR      r0,[r0,#0]  ; i11
0000a2  49dc              LDR      r1,|L1.1044|
0000a4  6008              STR      r0,[r1,#0]  ; l
                  |L1.166|
;;;645    		else{}
;;;646    		if(temp11>=first){i11=900;}else{}
0000a6  48d9              LDR      r0,|L1.1036|
0000a8  6800              LDR      r0,[r0,#0]  ; temp11
0000aa  42b0              CMP      r0,r6
0000ac  db03              BLT      |L1.182|
0000ae  20e1              MOVS     r0,#0xe1
0000b0  0080              LSLS     r0,r0,#2
0000b2  49d5              LDR      r1,|L1.1032|
0000b4  6008              STR      r0,[r1,#0]  ; i11
                  |L1.182|
0000b6  48d4              LDR      r0,|L1.1032|
0000b8  6800              LDR      r0,[r0,#0]            ;641  ; i11
0000ba  1c40              ADDS     r0,r0,#1              ;641
0000bc  49d2              LDR      r1,|L1.1032|
0000be  6008              STR      r0,[r1,#0]            ;641  ; i11
                  |L1.192|
0000c0  48d1              LDR      r0,|L1.1032|
0000c2  6800              LDR      r0,[r0,#0]            ;641  ; i11
0000c4  2864              CMP      r0,#0x64              ;641
0000c6  dbe0              BLT      |L1.138|
;;;647    		}	
;;;648    		for(i11=0;i11<(j11-l-1);i11++)
0000c8  2000              MOVS     r0,#0
0000ca  49cf              LDR      r1,|L1.1032|
0000cc  6008              STR      r0,[r1,#0]  ; i11
0000ce  e00e              B        |L1.238|
                  |L1.208|
;;;649    		{
;;;650    		string[i11] = str[l+i11+1];
0000d0  48d0              LDR      r0,|L1.1044|
0000d2  6800              LDR      r0,[r0,#0]  ; l
0000d4  49cc              LDR      r1,|L1.1032|
0000d6  6809              LDR      r1,[r1,#0]  ; i11
0000d8  1840              ADDS     r0,r0,r1
0000da  1c40              ADDS     r0,r0,#1
0000dc  5c20              LDRB     r0,[r4,r0]
0000de  49ca              LDR      r1,|L1.1032|
0000e0  6809              LDR      r1,[r1,#0]  ; i11
0000e2  5468              STRB     r0,[r5,r1]
0000e4  48c8              LDR      r0,|L1.1032|
0000e6  6800              LDR      r0,[r0,#0]            ;648  ; i11
0000e8  1c40              ADDS     r0,r0,#1              ;648
0000ea  49c7              LDR      r1,|L1.1032|
0000ec  6008              STR      r0,[r1,#0]            ;648  ; i11
                  |L1.238|
0000ee  48c8              LDR      r0,|L1.1040|
0000f0  6800              LDR      r0,[r0,#0]            ;648  ; j11
0000f2  49c8              LDR      r1,|L1.1044|
0000f4  6809              LDR      r1,[r1,#0]            ;648  ; l
0000f6  1a40              SUBS     r0,r0,r1              ;648
0000f8  1e40              SUBS     r0,r0,#1              ;648
0000fa  49c3              LDR      r1,|L1.1032|
0000fc  6809              LDR      r1,[r1,#0]            ;648  ; i11
0000fe  4288              CMP      r0,r1                 ;648
000100  dce6              BGT      |L1.208|
;;;651    		}			
;;;652    	
;;;653    
;;;654    }
000102  bdf8              POP      {r3-r7,pc}
;;;655    
                          ENDP

                  SW1_init PROC
;;;77     
;;;78     void SW1_init(void){
000104  48c4              LDR      r0,|L1.1048|
;;;79     
;;;80     #ifdef CMSIS
;;;81     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
000106  6b80              LDR      r0,[r0,#0x38]
000108  2101              MOVS     r1,#1
00010a  02c9              LSLS     r1,r1,#11
00010c  4308              ORRS     r0,r0,r1
00010e  49c2              LDR      r1,|L1.1048|
000110  6388              STR      r0,[r1,#0x38]
;;;82     	
;;;83     	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
000112  48c2              LDR      r0,|L1.1052|
000114  49c2              LDR      r1,|L1.1056|
000116  60c8              STR      r0,[r1,#0xc]
;;;84     	
;;;85     	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
000118  48bf              LDR      r0,|L1.1048|
00011a  6b80              LDR      r0,[r0,#0x38]
00011c  2101              MOVS     r1,#1
00011e  0309              LSLS     r1,r1,#12
000120  4308              ORRS     r0,r0,r1
000122  49bd              LDR      r1,|L1.1048|
000124  6388              STR      r0,[r1,#0x38]
;;;86     	
;;;87     	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
000126  48bd              LDR      r0,|L1.1052|
000128  49be              LDR      r1,|L1.1060|
00012a  6188              STR      r0,[r1,#0x18]
;;;88     	
;;;89     	
;;;90     	
;;;91     	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
00012c  201f              MOVS     r0,#0x1f
00012e  2800              CMP      r0,#0
000130  db05              BLT      |L1.318|
000132  06c2              LSLS     r2,r0,#27
000134  0ed2              LSRS     r2,r2,#27
000136  2101              MOVS     r1,#1
000138  4091              LSLS     r1,r1,r2
00013a  4abb              LDR      r2,|L1.1064|
00013c  6011              STR      r1,[r2,#0]
                  |L1.318|
00013e  bf00              NOP      
;;;92     #else
;;;93                
;;;94             enable_irq(31);
;;;95             set_irq_priority(31, 1);
;;;96             
;;;97             SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;98             
;;;99             PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;100            
;;;101    #endif
;;;102    }
000140  4770              BX       lr
;;;103    
                          ENDP

                  LED_state PROC
;;;153    
;;;154    void LED_state(void){
000142  b500              PUSH     {lr}
;;;155    if(sleep_flag == 1)
000144  48b9              LDR      r0,|L1.1068|
000146  6800              LDR      r0,[r0,#0]  ; sleep_flag
000148  2801              CMP      r0,#1
00014a  d102              BNE      |L1.338|
;;;156    {stateCount=99;
00014c  2063              MOVS     r0,#0x63
00014e  49b8              LDR      r1,|L1.1072|
000150  7008              STRB     r0,[r1,#0]
                  |L1.338|
;;;157    }	
;;;158    			
;;;159    	switch(stateCount){
000152  48b7              LDR      r0,|L1.1072|
000154  7800              LDRB     r0,[r0,#0]  ; stateCount
000156  0003              MOVS     r3,r0
000158  f7fffffe          BL       __ARM_common_switch8
00015c  06040c14          DCB      0x06,0x04,0x0c,0x14
000160  1c242c34          DCB      0x1c,0x24,0x2c,0x34
;;;160    
;;;161    		
;;;162                case 0:     //Red
;;;163                       REDBAT_ON;
000164  2040              MOVS     r0,#0x40
000166  49b3              LDR      r1,|L1.1076|
000168  6088              STR      r0,[r1,#8]
;;;164                       GREENBAT_OFF;
00016a  2080              MOVS     r0,#0x80
00016c  6048              STR      r0,[r1,#4]
;;;165                       BLUEBAT_OFF;
00016e  0040              LSLS     r0,r0,#1
000170  6048              STR      r0,[r1,#4]
;;;166                       break;
000172  e032              B        |L1.474|
;;;167    
;;;168                case 1:	//Yellow
;;;169    		               REDBAT_ON;
000174  2040              MOVS     r0,#0x40
000176  49af              LDR      r1,|L1.1076|
000178  6088              STR      r0,[r1,#8]
;;;170    		               GREENBAT_ON;
00017a  2080              MOVS     r0,#0x80
00017c  6088              STR      r0,[r1,#8]
;;;171    		               BLUEBAT_OFF;
00017e  0040              LSLS     r0,r0,#1
000180  6048              STR      r0,[r1,#4]
;;;172    		               break;
000182  e02a              B        |L1.474|
;;;173    				
;;;174                case 2:	//Green
;;;175    		               REDBAT_OFF;
000184  2040              MOVS     r0,#0x40
000186  49ab              LDR      r1,|L1.1076|
000188  6048              STR      r0,[r1,#4]
;;;176    		               GREENBAT_ON;
00018a  2080              MOVS     r0,#0x80
00018c  6088              STR      r0,[r1,#8]
;;;177    		               BLUEBAT_OFF;
00018e  0040              LSLS     r0,r0,#1
000190  6048              STR      r0,[r1,#4]
;;;178    		               break;
000192  e022              B        |L1.474|
;;;179    				
;;;180                case 3:	//Blue
;;;181    		               REDBAT_OFF;
000194  2040              MOVS     r0,#0x40
000196  49a7              LDR      r1,|L1.1076|
000198  6048              STR      r0,[r1,#4]
;;;182    		               GREENBAT_OFF;
00019a  2080              MOVS     r0,#0x80
00019c  6048              STR      r0,[r1,#4]
;;;183    		               BLUEBAT_ON;
00019e  0040              LSLS     r0,r0,#1
0001a0  6088              STR      r0,[r1,#8]
;;;184    		               break;
0001a2  e01a              B        |L1.474|
;;;185    				
;;;186                case 4:	//Violet
;;;187    		               REDBAT_ON;
0001a4  2040              MOVS     r0,#0x40
0001a6  49a3              LDR      r1,|L1.1076|
0001a8  6088              STR      r0,[r1,#8]
;;;188    		               GREENBAT_OFF;
0001aa  2080              MOVS     r0,#0x80
0001ac  6048              STR      r0,[r1,#4]
;;;189    		               BLUEBAT_ON;
0001ae  0040              LSLS     r0,r0,#1
0001b0  6088              STR      r0,[r1,#8]
;;;190    		               break;
0001b2  e012              B        |L1.474|
;;;191    				
;;;192                case 5:	//White
;;;193    		              REDBAT_ON;
0001b4  2040              MOVS     r0,#0x40
0001b6  499f              LDR      r1,|L1.1076|
0001b8  6088              STR      r0,[r1,#8]
;;;194    		              GREENBAT_ON;
0001ba  2080              MOVS     r0,#0x80
0001bc  6088              STR      r0,[r1,#8]
;;;195    		              BLUEBAT_ON;
0001be  0040              LSLS     r0,r0,#1
0001c0  6088              STR      r0,[r1,#8]
;;;196    		              break;
0001c2  e00a              B        |L1.474|
;;;197    				
;;;198                default:	//Red
;;;199    							
;;;200    
;;;201    		              REDBAT_OFF;
0001c4  2040              MOVS     r0,#0x40
0001c6  499b              LDR      r1,|L1.1076|
0001c8  6048              STR      r0,[r1,#4]
;;;202    		              GREENBAT_OFF;
0001ca  2080              MOVS     r0,#0x80
0001cc  6048              STR      r0,[r1,#4]
;;;203    		              BLUEBAT_OFF;
0001ce  0040              LSLS     r0,r0,#1
0001d0  6048              STR      r0,[r1,#4]
;;;204    		              stateCount = 0;	//Reset state counter
0001d2  2000              MOVS     r0,#0
0001d4  4996              LDR      r1,|L1.1072|
0001d6  7008              STRB     r0,[r1,#0]
;;;205    			      break;
0001d8  bf00              NOP      
                  |L1.474|
0001da  bf00              NOP                            ;166
;;;206    
;;;207        }
;;;208    	
;;;209    }
0001dc  bd00              POP      {pc}
;;;210    
                          ENDP

                  PORTD_IRQHandler PROC
;;;104    #ifdef CMSIS
;;;105    void PORTD_IRQHandler(void){
0001de  b510              PUSH     {r4,lr}
;;;106      
;;;107    	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
0001e0  488f              LDR      r0,|L1.1056|
0001e2  3080              ADDS     r0,r0,#0x80
0001e4  6a00              LDR      r0,[r0,#0x20]
0001e6  2108              MOVS     r1,#8
0001e8  4008              ANDS     r0,r0,r1
0001ea  2800              CMP      r0,#0
0001ec  d011              BEQ      |L1.530|
;;;108    	{
;;;109    		PORTC_ISFR |= (1 << SW_PIN);
0001ee  488c              LDR      r0,|L1.1056|
0001f0  3080              ADDS     r0,r0,#0x80
0001f2  6a00              LDR      r0,[r0,#0x20]
0001f4  4308              ORRS     r0,r0,r1
0001f6  498a              LDR      r1,|L1.1056|
0001f8  3180              ADDS     r1,r1,#0x80
0001fa  6208              STR      r0,[r1,#0x20]
;;;110    		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
0001fc  488e              LDR      r0,|L1.1080|
0001fe  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
000200  2101              MOVS     r1,#1
000202  4308              ORRS     r0,r0,r1
000204  498c              LDR      r1,|L1.1080|
000206  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;111    	
;;;112    /**************ISR follows******/	
;;;113     stateCount++;
000208  4889              LDR      r0,|L1.1072|
00020a  7800              LDRB     r0,[r0,#0]  ; stateCount
00020c  1c40              ADDS     r0,r0,#1
00020e  4988              LDR      r1,|L1.1072|
000210  7008              STRB     r0,[r1,#0]
                  |L1.530|
;;;114    	}
;;;115    	
;;;116    	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
000212  4884              LDR      r0,|L1.1060|
000214  3080              ADDS     r0,r0,#0x80
000216  6a00              LDR      r0,[r0,#0x20]
000218  2140              MOVS     r1,#0x40
00021a  4008              ANDS     r0,r0,r1
00021c  2800              CMP      r0,#0
00021e  d011              BEQ      |L1.580|
;;;117    	{
;;;118    		PORTD_ISFR |= (1 << 6);
000220  4880              LDR      r0,|L1.1060|
000222  3080              ADDS     r0,r0,#0x80
000224  6a00              LDR      r0,[r0,#0x20]
000226  4308              ORRS     r0,r0,r1
000228  497e              LDR      r1,|L1.1060|
00022a  3180              ADDS     r1,r1,#0x80
00022c  6208              STR      r0,[r1,#0x20]
;;;119    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
00022e  4882              LDR      r0,|L1.1080|
000230  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
000232  2101              MOVS     r1,#1
000234  4308              ORRS     r0,r0,r1
000236  4980              LDR      r1,|L1.1080|
000238  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;120    	
;;;121    /**************ISR follows******/	
;;;122    // stateCount++;
;;;123    		
;;;124    ringflag=1;
00023a  2001              MOVS     r0,#1
00023c  497f              LDR      r1,|L1.1084|
00023e  7008              STRB     r0,[r1,#0]
;;;125    	// wakeup and reset
;;;126    	
;;;127    clear();	
000240  f7fffffe          BL       clear
                  |L1.580|
;;;128    	}
;;;129    	
;;;130    	LED_state();
000244  f7fffffe          BL       LED_state
;;;131    }
000248  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  PORTC_action PROC
;;;133    void PORTC_action(void){
00024a  4770              BX       lr
;;;134    }
;;;135    
                          ENDP

                  LED_state2 PROC
;;;211    
;;;212    void LED_state2(void)
00024c  b500              PUSH     {lr}
;;;213    {
;;;214    if(sleep_flag == 1)
00024e  4877              LDR      r0,|L1.1068|
000250  6800              LDR      r0,[r0,#0]  ; sleep_flag
000252  2801              CMP      r0,#1
000254  d102              BNE      |L1.604|
;;;215    {stateCount=99;
000256  2063              MOVS     r0,#0x63
000258  4975              LDR      r1,|L1.1072|
00025a  7008              STRB     r0,[r1,#0]
                  |L1.604|
;;;216    }	
;;;217    			
;;;218    	switch(stateCount){
00025c  4874              LDR      r0,|L1.1072|
00025e  7800              LDRB     r0,[r0,#0]  ; stateCount
000260  0003              MOVS     r3,r0
000262  f7fffffe          BL       __ARM_common_switch8
000266  0604              DCB      0x06,0x04
000268  101c2834          DCB      0x10,0x1c,0x28,0x34
00026c  404c              DCB      0x40,0x4c
;;;219    	
;;;220    
;;;221                case 0:     //Red
;;;222                       RED_ON;
00026e  2001              MOVS     r0,#1
000270  0740              LSLS     r0,r0,#29
000272  4970              LDR      r1,|L1.1076|
000274  3180              ADDS     r1,r1,#0x80
000276  6088              STR      r0,[r1,#8]
;;;223                       GREEN_OFF;
000278  0080              LSLS     r0,r0,#2
00027a  6048              STR      r0,[r1,#4]
;;;224                       BLUE_OFF;
00027c  2020              MOVS     r0,#0x20
00027e  496d              LDR      r1,|L1.1076|
000280  3140              ADDS     r1,r1,#0x40
000282  6048              STR      r0,[r1,#4]
;;;225                       break;
000284  e04a              B        |L1.796|
;;;226    
;;;227                case 1:	//Yellow
;;;228    		               RED_ON;
000286  2001              MOVS     r0,#1
000288  0740              LSLS     r0,r0,#29
00028a  496a              LDR      r1,|L1.1076|
00028c  3180              ADDS     r1,r1,#0x80
00028e  6088              STR      r0,[r1,#8]
;;;229    		               GREEN_ON;
000290  0080              LSLS     r0,r0,#2
000292  6088              STR      r0,[r1,#8]
;;;230    		               BLUE_OFF;
000294  2020              MOVS     r0,#0x20
000296  4967              LDR      r1,|L1.1076|
000298  3140              ADDS     r1,r1,#0x40
00029a  6048              STR      r0,[r1,#4]
;;;231    		               break;
00029c  e03e              B        |L1.796|
;;;232    				
;;;233                case 2:	//Green
;;;234    		               RED_OFF;
00029e  2001              MOVS     r0,#1
0002a0  0740              LSLS     r0,r0,#29
0002a2  4964              LDR      r1,|L1.1076|
0002a4  3180              ADDS     r1,r1,#0x80
0002a6  6048              STR      r0,[r1,#4]
;;;235    		               GREEN_ON;
0002a8  0080              LSLS     r0,r0,#2
0002aa  6088              STR      r0,[r1,#8]
;;;236    		               BLUE_OFF;
0002ac  2020              MOVS     r0,#0x20
0002ae  4961              LDR      r1,|L1.1076|
0002b0  3140              ADDS     r1,r1,#0x40
0002b2  6048              STR      r0,[r1,#4]
;;;237    		               break;
0002b4  e032              B        |L1.796|
;;;238    				
;;;239                case 3:	//Blue
;;;240    		               RED_OFF;
0002b6  2001              MOVS     r0,#1
0002b8  0740              LSLS     r0,r0,#29
0002ba  495e              LDR      r1,|L1.1076|
0002bc  3180              ADDS     r1,r1,#0x80
0002be  6048              STR      r0,[r1,#4]
;;;241    		               GREEN_OFF;
0002c0  0080              LSLS     r0,r0,#2
0002c2  6048              STR      r0,[r1,#4]
;;;242    		               BLUE_ON;
0002c4  2020              MOVS     r0,#0x20
0002c6  495b              LDR      r1,|L1.1076|
0002c8  3140              ADDS     r1,r1,#0x40
0002ca  6088              STR      r0,[r1,#8]
;;;243    		               break;
0002cc  e026              B        |L1.796|
;;;244    				
;;;245                case 4:	//Violet
;;;246    		               RED_ON;
0002ce  2001              MOVS     r0,#1
0002d0  0740              LSLS     r0,r0,#29
0002d2  4958              LDR      r1,|L1.1076|
0002d4  3180              ADDS     r1,r1,#0x80
0002d6  6088              STR      r0,[r1,#8]
;;;247    		               GREEN_OFF;
0002d8  0080              LSLS     r0,r0,#2
0002da  6048              STR      r0,[r1,#4]
;;;248    		               BLUE_ON;
0002dc  2020              MOVS     r0,#0x20
0002de  4955              LDR      r1,|L1.1076|
0002e0  3140              ADDS     r1,r1,#0x40
0002e2  6088              STR      r0,[r1,#8]
;;;249    		               break;
0002e4  e01a              B        |L1.796|
;;;250    				
;;;251                case 5:	//White
;;;252    		              RED_ON;
0002e6  2001              MOVS     r0,#1
0002e8  0740              LSLS     r0,r0,#29
0002ea  4952              LDR      r1,|L1.1076|
0002ec  3180              ADDS     r1,r1,#0x80
0002ee  6088              STR      r0,[r1,#8]
;;;253    		              GREEN_ON;
0002f0  0080              LSLS     r0,r0,#2
0002f2  6088              STR      r0,[r1,#8]
;;;254    		              BLUE_ON;
0002f4  2020              MOVS     r0,#0x20
0002f6  494f              LDR      r1,|L1.1076|
0002f8  3140              ADDS     r1,r1,#0x40
0002fa  6088              STR      r0,[r1,#8]
;;;255    		              break;
0002fc  e00e              B        |L1.796|
;;;256    				
;;;257                default:	//Red
;;;258    
;;;259    		              RED_OFF;
0002fe  2001              MOVS     r0,#1
000300  0740              LSLS     r0,r0,#29
000302  494c              LDR      r1,|L1.1076|
000304  3180              ADDS     r1,r1,#0x80
000306  6048              STR      r0,[r1,#4]
;;;260    		              GREEN_OFF;
000308  0080              LSLS     r0,r0,#2
00030a  6048              STR      r0,[r1,#4]
;;;261    		              BLUE_OFF;
00030c  2020              MOVS     r0,#0x20
00030e  4949              LDR      r1,|L1.1076|
000310  3140              ADDS     r1,r1,#0x40
000312  6048              STR      r0,[r1,#4]
;;;262    		              stateCount = 0;	//Reset state counter
000314  2000              MOVS     r0,#0
000316  4946              LDR      r1,|L1.1072|
000318  7008              STRB     r0,[r1,#0]
;;;263    			      break;
00031a  bf00              NOP      
                  |L1.796|
00031c  bf00              NOP                            ;225
;;;264    
;;;265        }
;;;266    	
;;;267    }
00031e  bd00              POP      {pc}
;;;268    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
000320  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
000322  4947              LDR      r1,|L1.1088|
000324  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
000326  4847              LDR      r0,|L1.1092|
000328  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK;   
00032a  2005              MOVS     r0,#5
00032c  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
00032e  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
000330  4843              LDR      r0,|L1.1088|
;;;17     {
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
000332  6900              LDR      r0,[r0,#0x10]
000334  0840              LSRS     r0,r0,#1
000336  0040              LSLS     r0,r0,#1
000338  4941              LDR      r1,|L1.1088|
00033a  6108              STR      r0,[r1,#0x10]
;;;19     }
00033c  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
00033e  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
000340  483f              LDR      r0,|L1.1088|
000342  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
000344  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
000346  1b28              SUBS     r0,r5,r4
000348  493f              LDR      r1,|L1.1096|
00034a  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
00034c  4629              MOV      r1,r5
00034e  a03f              ADR      r0,|L1.1100|
000350  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
000354  4621              MOV      r1,r4
000356  a044              ADR      r0,|L1.1128|
000358  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
00035c  483a              LDR      r0,|L1.1096|
00035e  6801              LDR      r1,[r0,#0]  ; overhead
000360  a048              ADR      r0,|L1.1156|
000362  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
000366  bd70              POP      {r4-r6,pc}
;;;13     #include "stdlib.h"
                          ENDP

                  mystrstr PROC
;;;58     
;;;59     char mystrstr(char* str1, char character)
000368  b570              PUSH     {r4-r6,lr}
;;;60     {
00036a  4604              MOV      r4,r0
00036c  460d              MOV      r5,r1
;;;61     	sz=strlen(str1);
00036e  4620              MOV      r0,r4
000370  f7fffffe          BL       strlen
000374  494e              LDR      r1,|L1.1200|
000376  6008              STR      r0,[r1,#0]  ; sz
;;;62     	for(cn=0;cn<=sz;cn++)
000378  2000              MOVS     r0,#0
00037a  494e              LDR      r1,|L1.1204|
00037c  6008              STR      r0,[r1,#0]  ; cn
00037e  e00b              B        |L1.920|
                  |L1.896|
;;;63     	{if(str1[cn] == character)
000380  484c              LDR      r0,|L1.1204|
000382  6800              LDR      r0,[r0,#0]  ; cn
000384  5c20              LDRB     r0,[r4,r0]
000386  42a8              CMP      r0,r5
000388  d101              BNE      |L1.910|
;;;64     		{return 1;}
00038a  2001              MOVS     r0,#1
                  |L1.908|
;;;65     	}
;;;66     	return 0;
;;;67     }
00038c  bd70              POP      {r4-r6,pc}
                  |L1.910|
00038e  4849              LDR      r0,|L1.1204|
000390  6800              LDR      r0,[r0,#0]            ;62  ; cn
000392  1c40              ADDS     r0,r0,#1              ;62
000394  4947              LDR      r1,|L1.1204|
000396  6008              STR      r0,[r1,#0]            ;62  ; cn
                  |L1.920|
000398  4846              LDR      r0,|L1.1204|
00039a  6800              LDR      r0,[r0,#0]            ;62  ; cn
00039c  4944              LDR      r1,|L1.1200|
00039e  6809              LDR      r1,[r1,#0]            ;62  ; sz
0003a0  4288              CMP      r0,r1                 ;62
0003a2  dded              BLE      |L1.896|
0003a4  2000              MOVS     r0,#0                 ;66
0003a6  e7f1              B        |L1.908|
;;;68     
                          ENDP

                  delay2 PROC
;;;88     }
;;;89      void delay2(int delaytime)
0003a8  e00c              B        |L1.964|
                  |L1.938|
;;;90     {
;;;91      while(delaytime--)
;;;92         {for(i=5000;i>0;i--);  // about 1 ms
0003aa  4943              LDR      r1,|L1.1208|
0003ac  4a43              LDR      r2,|L1.1212|
0003ae  6011              STR      r1,[r2,#0]  ; i
0003b0  e004              B        |L1.956|
                  |L1.946|
0003b2  4942              LDR      r1,|L1.1212|
0003b4  6809              LDR      r1,[r1,#0]  ; i
0003b6  1e49              SUBS     r1,r1,#1
0003b8  4a40              LDR      r2,|L1.1212|
0003ba  6011              STR      r1,[r2,#0]  ; i
                  |L1.956|
0003bc  493f              LDR      r1,|L1.1212|
0003be  6809              LDR      r1,[r1,#0]  ; i
0003c0  2900              CMP      r1,#0
0003c2  dcf6              BGT      |L1.946|
                  |L1.964|
0003c4  4601              MOV      r1,r0                 ;91
0003c6  1e40              SUBS     r0,r0,#1              ;91
0003c8  2900              CMP      r1,#0                 ;91
0003ca  d1ee              BNE      |L1.938|
;;;93         }
;;;94     }
0003cc  4770              BX       lr
;;;95             
                          ENDP

                  main PROC
;;;213    /********************************************************************/
;;;214    int main (void)
0003ce  b508              PUSH     {r3,lr}
;;;215    {
;;;216    memset(data,0,1500);
0003d0  493b              LDR      r1,|L1.1216|
0003d2  483c              LDR      r0,|L1.1220|
0003d4  f7fffffe          BL       __aeabi_memclr
;;;217    memset(data2,0,300);
0003d8  21ff              MOVS     r1,#0xff
0003da  312d              ADDS     r1,r1,#0x2d
0003dc  483a              LDR      r0,|L1.1224|
0003de  f7fffffe          BL       __aeabi_memclr
;;;218    start();
0003e2  f7fffffe          BL       start
;;;219    systick_init();	
0003e6  f7fffffe          BL       systick_init
;;;220    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;221    #endif
;;;222    
;;;223    int_erval=5;
0003ea  2005              MOVS     r0,#5
0003ec  4937              LDR      r1,|L1.1228|
0003ee  6008              STR      r0,[r1,#0]  ; int_erval
;;;224    		sent=0;
0003f0  2000              MOVS     r0,#0
0003f2  4937              LDR      r1,|L1.1232|
0003f4  6008              STR      r0,[r1,#0]  ; sent
;;;225    	//LED_init();		//Initialize GPIO for LEDs
;;;226    	RELAY_init();		//Initialize GPIO for LEDs
0003f6  bf00              NOP      
0003f8  4807              LDR      r0,|L1.1048|
0003fa  6b80              LDR      r0,[r0,#0x38]
0003fc  2101              MOVS     r1,#1
0003fe  02c9              LSLS     r1,r1,#11
000400  4308              ORRS     r0,r0,r1
000402  e067              B        |L1.1236|
                  |L1.1028|
                          DCD      0x4006c000
                  |L1.1032|
                          DCD      i11
                  |L1.1036|
                          DCD      temp11
                  |L1.1040|
                          DCD      j11
                  |L1.1044|
                          DCD      l
                  |L1.1048|
                          DCD      0x40048000
                  |L1.1052|
                          DCD      0x000a0103
                  |L1.1056|
                          DCD      0x4004b000
                  |L1.1060|
                          DCD      0x4004c000
                  |L1.1064|
                          DCD      0xe000e100
                  |L1.1068|
                          DCD      sleep_flag
                  |L1.1072|
                          DCD      stateCount
                  |L1.1076|
                          DCD      0x400ff080
                  |L1.1080|
                          DCD      gu32PortStatus
                  |L1.1084|
                          DCD      ringflag
                  |L1.1088|
                          DCD      0xe000e000
                  |L1.1092|
                          DCD      0x00009c3f
                  |L1.1096|
                          DCD      overhead
                  |L1.1100|
00044c  73797374          DCB      "systick start value: 0x%x\n\r",0
000450  69636b20
000454  73746172
000458  74207661
00045c  6c75653a
000460  20307825
000464  780a0d00
                  |L1.1128|
000468  73797374          DCB      "systick end value: 0x%x\n\r",0
00046c  69636b20
000470  656e6420
000474  76616c75
000478  653a2030
00047c  7825780a
000480  0d00    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
000488  69636b20
00048c  63757272
000490  656e7420
000494  76616c75
000498  65207265
00049c  6164206f
0004a0  76657268
0004a4  6561643a
0004a8  20307825
0004ac  780a0d00
                  |L1.1200|
                          DCD      ||sz||
                  |L1.1204|
                          DCD      ||cn||
                  |L1.1208|
                          DCD      0x00001388
                  |L1.1212|
                          DCD      i
                  |L1.1216|
                          DCD      0x000005dc
                  |L1.1220|
                          DCD      data
                  |L1.1224|
                          DCD      data2
                  |L1.1228|
                          DCD      int_erval
                  |L1.1232|
                          DCD      sent
                  |L1.1236|
0004d4  49fe              LDR      r1,|L1.2256|
0004d6  6388              STR      r0,[r1,#0x38]
0004d8  1588              ASRS     r0,r1,#22
0004da  49fe              LDR      r1,|L1.2260|
0004dc  6288              STR      r0,[r1,#0x28]
0004de  48fe              LDR      r0,|L1.2264|
0004e0  6840              LDR      r0,[r0,#4]
0004e2  1509              ASRS     r1,r1,#20
0004e4  4308              ORRS     r0,r0,r1
0004e6  49fc              LDR      r1,|L1.2264|
0004e8  6048              STR      r0,[r1,#4]
0004ea  4608              MOV      r0,r1
0004ec  6940              LDR      r0,[r0,#0x14]
0004ee  1509              ASRS     r1,r1,#20
0004f0  4308              ORRS     r0,r0,r1
0004f2  49f9              LDR      r1,|L1.2264|
0004f4  6148              STR      r0,[r1,#0x14]
0004f6  1508              ASRS     r0,r1,#20
0004f8  6048              STR      r0,[r1,#4]
0004fa  bf00              NOP      
;;;227    	//SW1_init();		//Initialize GPIO for SW1 w/ interrupt	
;;;228    	//accel_init();
;;;229    	//sleep_flag=0;
;;;230    	//DTR_OFF;	
;;;231    	lptmr_init(1000, 1);	
0004fc  2101              MOVS     r1,#1
0004fe  207d              MOVS     r0,#0x7d
000500  00c0              LSLS     r0,r0,#3
000502  f7fffffe          BL       lptmr_init
;;;232    	//ADC_Init();
;;;233    	
;;;234    
;;;235    	clear();
000506  f7fffffe          BL       clear
;;;236    	delay(100);
00050a  2064              MOVS     r0,#0x64
00050c  f7fffffe          BL       delay
;;;237    	int_erval=5;
000510  2005              MOVS     r0,#5
000512  49f2              LDR      r1,|L1.2268|
000514  6008              STR      r0,[r1,#0]  ; int_erval
;;;238    	
;;;239    RESETSTN_ON;
000516  2001              MOVS     r0,#1
000518  0280              LSLS     r0,r0,#10
00051a  49ef              LDR      r1,|L1.2264|
00051c  6048              STR      r0,[r1,#4]
;;;240    delay(500);
00051e  20ff              MOVS     r0,#0xff
000520  30f5              ADDS     r0,r0,#0xf5
000522  f7fffffe          BL       delay
;;;241    RESETSTN_OFF;
000526  2001              MOVS     r0,#1
000528  0280              LSLS     r0,r0,#10
00052a  49eb              LDR      r1,|L1.2264|
00052c  6088              STR      r0,[r1,#8]
;;;242    delay(500);
00052e  20ff              MOVS     r0,#0xff
000530  30f5              ADDS     r0,r0,#0xf5
000532  f7fffffe          BL       delay
;;;243    RESETSTN_ON;
000536  2001              MOVS     r0,#1
000538  0280              LSLS     r0,r0,#10
00053a  49e7              LDR      r1,|L1.2264|
00053c  6048              STR      r0,[r1,#4]
;;;244    delay(500);
00053e  20ff              MOVS     r0,#0xff
000540  30f5              ADDS     r0,r0,#0xf5
000542  f7fffffe          BL       delay
;;;245    RESETSTN_OFF;
000546  2001              MOVS     r0,#1
000548  0280              LSLS     r0,r0,#10
00054a  49e3              LDR      r1,|L1.2264|
00054c  6088              STR      r0,[r1,#8]
;;;246    delay(500);
00054e  20ff              MOVS     r0,#0xff
000550  30f5              ADDS     r0,r0,#0xf5
000552  f7fffffe          BL       delay
;;;247    	
;;;248    
;;;249    	
;;;250    		send_OBD("ATZ\r\n");
000556  a0e2              ADR      r0,|L1.2272|
000558  f7fffffe          BL       send_OBD
;;;251    		delay(100);
00055c  2064              MOVS     r0,#0x64
00055e  f7fffffe          BL       delay
;;;252    	//	while(1)
;;;253    			
;;;254    	delay(100);
000562  2064              MOVS     r0,#0x64
000564  f7fffffe          BL       delay
;;;255    		send_OBD("ATRV\r\n");
000568  a0df              ADR      r0,|L1.2280|
00056a  f7fffffe          BL       send_OBD
;;;256    
;;;257    		delay(100);
00056e  2064              MOVS     r0,#0x64
000570  f7fffffe          BL       delay
;;;258    		send_OBD("ATSP0\r\n");
000574  a0de              ADR      r0,|L1.2288|
000576  f7fffffe          BL       send_OBD
;;;259    		delay(1000);
00057a  207d              MOVS     r0,#0x7d
00057c  00c0              LSLS     r0,r0,#3
00057e  f7fffffe          BL       delay
;;;260    	
;;;261    
;;;262    
;;;263    memset(data,0,1500);
000582  49dd              LDR      r1,|L1.2296|
000584  48dd              LDR      r0,|L1.2300|
000586  f7fffffe          BL       __aeabi_memclr
;;;264    
;;;265    
;;;266    	
;;;267    	while(1)
00058a  e2bd              B        |L1.2824|
                  |L1.1420|
;;;268    	{
;;;269    		switch(sent)
00058c  48dc              LDR      r0,|L1.2304|
00058e  6800              LDR      r0,[r0,#0]  ; sent
000590  2800              CMP      r0,#0
000592  d002              BEQ      |L1.1434|
000594  2801              CMP      r0,#1
000596  d17c              BNE      |L1.1682|
000598  e14b              B        |L1.2098|
                  |L1.1434|
;;;270    		{
;;;271    			case 0:
;;;272    		{		
;;;273    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00059a  210a              MOVS     r1,#0xa
00059c  48d9              LDR      r0,|L1.2308|
00059e  f7fffffe          BL       uart_putchar
0005a2  211a              MOVS     r1,#0x1a
0005a4  48d7              LDR      r0,|L1.2308|
0005a6  f7fffffe          BL       uart_putchar
0005aa  211a              MOVS     r1,#0x1a
0005ac  48d5              LDR      r0,|L1.2308|
0005ae  f7fffffe          BL       uart_putchar
0005b2  211a              MOVS     r1,#0x1a
0005b4  48d3              LDR      r0,|L1.2308|
0005b6  f7fffffe          BL       uart_putchar
0005ba  211a              MOVS     r1,#0x1a
0005bc  48d1              LDR      r0,|L1.2308|
0005be  f7fffffe          BL       uart_putchar
;;;274    		
;;;275    		
;;;276    		send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
0005c2  200a              MOVS     r0,#0xa
0005c4  a3d0              ADR      r3,|L1.2312|
0005c6  a2d2              ADR      r2,|L1.2320|
0005c8  a1d3              ADR      r1,|L1.2328|
0005ca  9000              STR      r0,[sp,#0]
0005cc  a0d4              ADR      r0,|L1.2336|
0005ce  f7fffffe          BL       send_GSM
;;;277    		stateCount++; 
0005d2  48d5              LDR      r0,|L1.2344|
0005d4  7800              LDRB     r0,[r0,#0]  ; stateCount
0005d6  1c40              ADDS     r0,r0,#1
0005d8  49d3              LDR      r1,|L1.2344|
0005da  7008              STRB     r0,[r1,#0]
;;;278    		if(stateCount>5){stateCount =0;}
0005dc  4608              MOV      r0,r1
0005de  7800              LDRB     r0,[r0,#0]  ; stateCount
0005e0  2805              CMP      r0,#5
0005e2  dd01              BLE      |L1.1512|
0005e4  2000              MOVS     r0,#0
0005e6  7008              STRB     r0,[r1,#0]
                  |L1.1512|
;;;279    		LED_state2();			
0005e8  f7fffffe          BL       LED_state2
;;;280    		delay(500);
0005ec  20ff              MOVS     r0,#0xff
0005ee  30f5              ADDS     r0,r0,#0xf5
0005f0  f7fffffe          BL       delay
;;;281    		
;;;282    		memset(imei,0,20);
0005f4  2114              MOVS     r1,#0x14
0005f6  48cd              LDR      r0,|L1.2348|
0005f8  f7fffffe          BL       __aeabi_memclr
;;;283    		memset(gga,0,100);
0005fc  2164              MOVS     r1,#0x64
0005fe  48cc              LDR      r0,|L1.2352|
000600  f7fffffe          BL       __aeabi_memclr
;;;284    		memset(rmc,0,100);
000604  2164              MOVS     r1,#0x64
000606  48cb              LDR      r0,|L1.2356|
000608  f7fffffe          BL       __aeabi_memclr
;;;285    		memset(fuelstr,0,5);
00060c  2105              MOVS     r1,#5
00060e  48ca              LDR      r0,|L1.2360|
000610  f7fffffe          BL       __aeabi_memclr4
;;;286    		memset(data,0,1500);
000614  49b8              LDR      r1,|L1.2296|
000616  48b9              LDR      r0,|L1.2300|
000618  f7fffffe          BL       __aeabi_memclr
;;;287    
;;;288    		
;;;289    		
;;;290    		send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
00061c  200a              MOVS     r0,#0xa
00061e  a3c7              ADR      r3,|L1.2364|
000620  a2bb              ADR      r2,|L1.2320|
000622  a1c8              ADR      r1,|L1.2372|
000624  9000              STR      r0,[sp,#0]
000626  a0c8              ADR      r0,|L1.2376|
000628  f7fffffe          BL       send_GSM
;;;291    		imeiinc=0;
00062c  2000              MOVS     r0,#0
00062e  49ca              LDR      r1,|L1.2392|
000630  6008              STR      r0,[r1,#0]  ; imeiinc
;;;292    		for(i=0;i<strlen(uart_string_gsm);i++){
000632  49ca              LDR      r1,|L1.2396|
000634  6008              STR      r0,[r1,#0]  ; i
000636  e01d              B        |L1.1652|
                  |L1.1592|
;;;293    				if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
000638  48c9              LDR      r0,|L1.2400|
00063a  49c8              LDR      r1,|L1.2396|
00063c  6809              LDR      r1,[r1,#0]  ; i
00063e  5c40              LDRB     r0,[r0,r1]
000640  282f              CMP      r0,#0x2f
000642  dd12              BLE      |L1.1642|
000644  48c6              LDR      r0,|L1.2400|
000646  49c5              LDR      r1,|L1.2396|
000648  6809              LDR      r1,[r1,#0]  ; i
00064a  5c40              LDRB     r0,[r0,r1]
00064c  283a              CMP      r0,#0x3a
00064e  da0c              BGE      |L1.1642|
;;;294    					imei[imeiinc] = uart_string_gsm[i];
000650  48c3              LDR      r0,|L1.2400|
000652  49c2              LDR      r1,|L1.2396|
000654  6809              LDR      r1,[r1,#0]  ; i
000656  5c40              LDRB     r0,[r0,r1]
000658  49b4              LDR      r1,|L1.2348|
00065a  4abf              LDR      r2,|L1.2392|
00065c  6812              LDR      r2,[r2,#0]  ; imeiinc
00065e  5488              STRB     r0,[r1,r2]
;;;295    					imeiinc++;
000660  48bd              LDR      r0,|L1.2392|
000662  6800              LDR      r0,[r0,#0]  ; imeiinc
000664  1c40              ADDS     r0,r0,#1
000666  49bc              LDR      r1,|L1.2392|
000668  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L1.1642|
00066a  48bc              LDR      r0,|L1.2396|
00066c  6800              LDR      r0,[r0,#0]            ;292  ; i
00066e  1c40              ADDS     r0,r0,#1              ;292
000670  49ba              LDR      r1,|L1.2396|
000672  6008              STR      r0,[r1,#0]            ;292  ; i
                  |L1.1652|
000674  48ba              LDR      r0,|L1.2400|
000676  f7fffffe          BL       strlen
00067a  49b8              LDR      r1,|L1.2396|
00067c  6809              LDR      r1,[r1,#0]            ;292  ; i
00067e  4288              CMP      r0,r1                 ;292
000680  d8da              BHI      |L1.1592|
;;;296    				}
;;;297    		}
;;;298    		clear();	
000682  f7fffffe          BL       clear
;;;299    		
;;;300    //		send_GSM("\n\nAT+QGNSSC=1\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
;;;301    		
;;;302    		send_GSM("\n\nAT+CFUN=0\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
000686  200a              MOVS     r0,#0xa
000688  a39f              ADR      r3,|L1.2312|
00068a  a2a1              ADR      r2,|L1.2320|
00068c  a1a2              ADR      r1,|L1.2328|
00068e  9000              STR      r0,[sp,#0]
000690  e000              B        |L1.1684|
                  |L1.1682|
000692  e234              B        |L1.2814|
                  |L1.1684|
000694  a0b3              ADR      r0,|L1.2404|
000696  f7fffffe          BL       send_GSM
;;;303    		stateCount++; 
00069a  48a3              LDR      r0,|L1.2344|
00069c  7800              LDRB     r0,[r0,#0]  ; stateCount
00069e  1c40              ADDS     r0,r0,#1
0006a0  49a1              LDR      r1,|L1.2344|
0006a2  7008              STRB     r0,[r1,#0]
;;;304    		if(stateCount>5){stateCount =0;}
0006a4  4608              MOV      r0,r1
0006a6  7800              LDRB     r0,[r0,#0]  ; stateCount
0006a8  2805              CMP      r0,#5
0006aa  dd01              BLE      |L1.1712|
0006ac  2000              MOVS     r0,#0
0006ae  7008              STRB     r0,[r1,#0]
                  |L1.1712|
;;;305    		LED_state2();			
0006b0  f7fffffe          BL       LED_state2
;;;306    GPS_Collect();
0006b4  f7fffffe          BL       GPS_Collect
;;;307    		delay(500);
0006b8  20ff              MOVS     r0,#0xff
0006ba  30f5              ADDS     r0,r0,#0xf5
0006bc  f7fffffe          BL       delay
;;;308    				
;;;309    		send_GSM("\n\nAT+CFUN=1\r\n","SMS Ready","ERROR\r\n","DEACT",10);  
0006c0  200a              MOVS     r0,#0xa
0006c2  a3ac              ADR      r3,|L1.2420|
0006c4  a292              ADR      r2,|L1.2320|
0006c6  a1ad              ADR      r1,|L1.2428|
0006c8  9000              STR      r0,[sp,#0]
0006ca  a0af              ADR      r0,|L1.2440|
0006cc  f7fffffe          BL       send_GSM
;;;310    		stateCount++; 
0006d0  4895              LDR      r0,|L1.2344|
0006d2  7800              LDRB     r0,[r0,#0]  ; stateCount
0006d4  1c40              ADDS     r0,r0,#1
0006d6  4994              LDR      r1,|L1.2344|
0006d8  7008              STRB     r0,[r1,#0]
;;;311    		if(stateCount>5){stateCount =0;}
0006da  4608              MOV      r0,r1
0006dc  7800              LDRB     r0,[r0,#0]  ; stateCount
0006de  2805              CMP      r0,#5
0006e0  dd01              BLE      |L1.1766|
0006e2  2000              MOVS     r0,#0
0006e4  7008              STRB     r0,[r1,#0]
                  |L1.1766|
;;;312    		LED_state2();			
0006e6  f7fffffe          BL       LED_state2
;;;313    		delay(100);
0006ea  2064              MOVS     r0,#0x64
0006ec  f7fffffe          BL       delay
;;;314    GPS_Collect();				
0006f0  f7fffffe          BL       GPS_Collect
;;;315    //		send_GSM("\n\nAT+QGNSSC=1\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
;;;316    //		stateCount++; 
;;;317    //		if(stateCount>5){stateCount =0;}
;;;318    //		LED_state2();			
;;;319    //		delay(500);
;;;320    //GPS_Collect();				
;;;321    
;;;322    		
;;;323    		
;;;324    		send_GSM("\n\nAT+QIFGCNT\r\n","OK\r\n","ERROR","DEACT",10);  
0006f4  200a              MOVS     r0,#0xa
0006f6  a39f              ADR      r3,|L1.2420|
0006f8  a290              ADR      r2,|L1.2364|
0006fa  a187              ADR      r1,|L1.2328|
0006fc  9000              STR      r0,[sp,#0]
0006fe  a0a6              ADR      r0,|L1.2456|
000700  f7fffffe          BL       send_GSM
;;;325    		stateCount++; 
000704  4888              LDR      r0,|L1.2344|
000706  7800              LDRB     r0,[r0,#0]  ; stateCount
000708  1c40              ADDS     r0,r0,#1
00070a  4987              LDR      r1,|L1.2344|
00070c  7008              STRB     r0,[r1,#0]
;;;326    		if(stateCount>5){stateCount =0;}
00070e  4608              MOV      r0,r1
000710  7800              LDRB     r0,[r0,#0]  ; stateCount
000712  2805              CMP      r0,#5
000714  dd01              BLE      |L1.1818|
000716  2000              MOVS     r0,#0
000718  7008              STRB     r0,[r1,#0]
                  |L1.1818|
;;;327    		LED_state2();			
00071a  f7fffffe          BL       LED_state2
;;;328    		delay(100);		
00071e  2064              MOVS     r0,#0x64
000720  f7fffffe          BL       delay
;;;329    
;;;330    //GPS_Collect();				
;;;331    
;;;332    
;;;333    		
;;;334    		send_GSM("\n\nAT+QICSGP=1,\"isafe\"\r\n","OK\r\n","ERROR","DEACT",10);  
000724  200a              MOVS     r0,#0xa
000726  a393              ADR      r3,|L1.2420|
000728  a284              ADR      r2,|L1.2364|
00072a  a17b              ADR      r1,|L1.2328|
00072c  9000              STR      r0,[sp,#0]
00072e  a09e              ADR      r0,|L1.2472|
000730  f7fffffe          BL       send_GSM
;;;335    		stateCount++; 
000734  487c              LDR      r0,|L1.2344|
000736  7800              LDRB     r0,[r0,#0]  ; stateCount
000738  1c40              ADDS     r0,r0,#1
00073a  497b              LDR      r1,|L1.2344|
00073c  7008              STRB     r0,[r1,#0]
;;;336    		if(stateCount>5){stateCount =0;}
00073e  4608              MOV      r0,r1
000740  7800              LDRB     r0,[r0,#0]  ; stateCount
000742  2805              CMP      r0,#5
000744  dd01              BLE      |L1.1866|
000746  2000              MOVS     r0,#0
000748  7008              STRB     r0,[r1,#0]
                  |L1.1866|
;;;337    		LED_state2();			
00074a  f7fffffe          BL       LED_state2
;;;338    //GPS_Collect();				
;;;339    
;;;340    		delay(100);
00074e  2064              MOVS     r0,#0x64
000750  f7fffffe          BL       delay
;;;341    		
;;;342    		send_GSM("\n\nAT+QIMUX=0\r\n","OK\r\n","ERROR","DEACT",10);  
000754  200a              MOVS     r0,#0xa
000756  a387              ADR      r3,|L1.2420|
000758  a278              ADR      r2,|L1.2364|
00075a  a16f              ADR      r1,|L1.2328|
00075c  9000              STR      r0,[sp,#0]
00075e  a098              ADR      r0,|L1.2496|
000760  f7fffffe          BL       send_GSM
;;;343    		stateCount++; 
000764  4870              LDR      r0,|L1.2344|
000766  7800              LDRB     r0,[r0,#0]  ; stateCount
000768  1c40              ADDS     r0,r0,#1
00076a  496f              LDR      r1,|L1.2344|
00076c  7008              STRB     r0,[r1,#0]
;;;344    		if(stateCount>5){stateCount =0;}
00076e  4608              MOV      r0,r1
000770  7800              LDRB     r0,[r0,#0]  ; stateCount
000772  2805              CMP      r0,#5
000774  dd01              BLE      |L1.1914|
000776  2000              MOVS     r0,#0
000778  7008              STRB     r0,[r1,#0]
                  |L1.1914|
;;;345    		LED_state2();			
00077a  f7fffffe          BL       LED_state2
;;;346    		delay(100);		
00077e  2064              MOVS     r0,#0x64
000780  f7fffffe          BL       delay
;;;347    				
;;;348    		send_GSM("\n\nAT+QIMODE=0\r\n","OK\r\n","ERROR","DEACT",10);  
000784  200a              MOVS     r0,#0xa
000786  a37b              ADR      r3,|L1.2420|
000788  a26c              ADR      r2,|L1.2364|
00078a  a163              ADR      r1,|L1.2328|
00078c  9000              STR      r0,[sp,#0]
00078e  a090              ADR      r0,|L1.2512|
000790  f7fffffe          BL       send_GSM
;;;349    		delay(100);
000794  2064              MOVS     r0,#0x64
000796  f7fffffe          BL       delay
;;;350    				
;;;351    		send_GSM("\n\nAT+QIREGAPP\r\n","OK\r\n","ERROR","DEACT",10);  
00079a  200a              MOVS     r0,#0xa
00079c  a375              ADR      r3,|L1.2420|
00079e  a267              ADR      r2,|L1.2364|
0007a0  a15d              ADR      r1,|L1.2328|
0007a2  9000              STR      r0,[sp,#0]
0007a4  a08e              ADR      r0,|L1.2528|
0007a6  f7fffffe          BL       send_GSM
;;;352    		stateCount++; 
0007aa  485f              LDR      r0,|L1.2344|
0007ac  7800              LDRB     r0,[r0,#0]  ; stateCount
0007ae  1c40              ADDS     r0,r0,#1
0007b0  495d              LDR      r1,|L1.2344|
0007b2  7008              STRB     r0,[r1,#0]
;;;353    		if(stateCount>5){stateCount =0;}
0007b4  4608              MOV      r0,r1
0007b6  7800              LDRB     r0,[r0,#0]  ; stateCount
0007b8  2805              CMP      r0,#5
0007ba  dd01              BLE      |L1.1984|
0007bc  2000              MOVS     r0,#0
0007be  7008              STRB     r0,[r1,#0]
                  |L1.1984|
;;;354    		LED_state2();			
0007c0  f7fffffe          BL       LED_state2
;;;355    		delay(100);
0007c4  2064              MOVS     r0,#0x64
0007c6  f7fffffe          BL       delay
;;;356    				
;;;357    		send_GSM("\n\nAT+QIACT\r\n","OK\r\n","ERROR","DEACT",10);  
0007ca  200a              MOVS     r0,#0xa
0007cc  a369              ADR      r3,|L1.2420|
0007ce  a25b              ADR      r2,|L1.2364|
0007d0  a151              ADR      r1,|L1.2328|
0007d2  9000              STR      r0,[sp,#0]
0007d4  a086              ADR      r0,|L1.2544|
0007d6  f7fffffe          BL       send_GSM
;;;358    		stateCount++; 
0007da  4853              LDR      r0,|L1.2344|
0007dc  7800              LDRB     r0,[r0,#0]  ; stateCount
0007de  1c40              ADDS     r0,r0,#1
0007e0  4951              LDR      r1,|L1.2344|
0007e2  7008              STRB     r0,[r1,#0]
;;;359    		if(stateCount>5){stateCount =0;}
0007e4  4608              MOV      r0,r1
0007e6  7800              LDRB     r0,[r0,#0]  ; stateCount
0007e8  2805              CMP      r0,#5
0007ea  dd01              BLE      |L1.2032|
0007ec  2000              MOVS     r0,#0
0007ee  7008              STRB     r0,[r1,#0]
                  |L1.2032|
;;;360    		LED_state2();			
0007f0  f7fffffe          BL       LED_state2
;;;361    		delay(100);	
0007f4  2064              MOVS     r0,#0x64
0007f6  f7fffffe          BL       delay
;;;362    				
;;;363    		send_GSM("\n\nAT+QILOCIP\r\n",".","ERROR","DEACT",10);  
0007fa  200a              MOVS     r0,#0xa
0007fc  a35d              ADR      r3,|L1.2420|
0007fe  a24f              ADR      r2,|L1.2364|
000800  a17f              ADR      r1,|L1.2560|
000802  9000              STR      r0,[sp,#0]
000804  a07f              ADR      r0,|L1.2564|
000806  f7fffffe          BL       send_GSM
;;;364    		stateCount++; 
00080a  4847              LDR      r0,|L1.2344|
00080c  7800              LDRB     r0,[r0,#0]  ; stateCount
00080e  1c40              ADDS     r0,r0,#1
000810  4945              LDR      r1,|L1.2344|
000812  7008              STRB     r0,[r1,#0]
;;;365    		if(stateCount>5){stateCount =0;}
000814  4608              MOV      r0,r1
000816  7800              LDRB     r0,[r0,#0]  ; stateCount
000818  2805              CMP      r0,#5
00081a  dd01              BLE      |L1.2080|
00081c  2000              MOVS     r0,#0
00081e  7008              STRB     r0,[r1,#0]
                  |L1.2080|
;;;366    		LED_state2();			
000820  f7fffffe          BL       LED_state2
;;;367    		delay(100);
000824  2064              MOVS     r0,#0x64
000826  f7fffffe          BL       delay
;;;368    sent=1;				
00082a  2001              MOVS     r0,#1
00082c  4934              LDR      r1,|L1.2304|
00082e  6008              STR      r0,[r1,#0]  ; sent
;;;369    }
;;;370    			case 1:
000830  bf00              NOP      
                  |L1.2098|
;;;371    	{
;;;372    		send_GSM("\n\nAT+QIOPEN=\"TCP\",\"104.236.203.4\",\"5555\"\r\n","CONNECT OK\r\n","ERROR","FAIL",10);  
000832  200a              MOVS     r0,#0xa
000834  a377              ADR      r3,|L1.2580|
000836  a241              ADR      r2,|L1.2364|
000838  a178              ADR      r1,|L1.2588|
00083a  9000              STR      r0,[sp,#0]
00083c  a07b              ADR      r0,|L1.2604|
00083e  f7fffffe          BL       send_GSM
;;;373    		stateCount++; 
000842  4839              LDR      r0,|L1.2344|
000844  7800              LDRB     r0,[r0,#0]  ; stateCount
000846  1c40              ADDS     r0,r0,#1
000848  4937              LDR      r1,|L1.2344|
00084a  7008              STRB     r0,[r1,#0]
;;;374    		if(stateCount>5){stateCount =0;}
00084c  4608              MOV      r0,r1
00084e  7800              LDRB     r0,[r0,#0]  ; stateCount
000850  2805              CMP      r0,#5
000852  dd01              BLE      |L1.2136|
000854  2000              MOVS     r0,#0
000856  7008              STRB     r0,[r1,#0]
                  |L1.2136|
;;;375    		LED_state2();
000858  f7fffffe          BL       LED_state2
;;;376    		GPS_Collect();				
00085c  f7fffffe          BL       GPS_Collect
;;;377    		
;;;378    
;;;379    send_GSM("\n\nAT+QISEND\r\n",">","ERROR\r\n","FAIL",10);  
000860  200a              MOVS     r0,#0xa
000862  a36c              ADR      r3,|L1.2580|
000864  a22a              ADR      r2,|L1.2320|
000866  a17c              ADR      r1,|L1.2648|
000868  9000              STR      r0,[sp,#0]
00086a  a07c              ADR      r0,|L1.2652|
00086c  f7fffffe          BL       send_GSM
;;;380    stateCount++; 
000870  482d              LDR      r0,|L1.2344|
000872  7800              LDRB     r0,[r0,#0]  ; stateCount
000874  1c40              ADDS     r0,r0,#1
000876  492c              LDR      r1,|L1.2344|
000878  7008              STRB     r0,[r1,#0]
;;;381    if(stateCount>5){stateCount =0;}
00087a  4608              MOV      r0,r1
00087c  7800              LDRB     r0,[r0,#0]  ; stateCount
00087e  2805              CMP      r0,#5
000880  dd01              BLE      |L1.2182|
000882  2000              MOVS     r0,#0
000884  7008              STRB     r0,[r1,#0]
                  |L1.2182|
;;;382    LED_state2();			
000886  f7fffffe          BL       LED_state2
;;;383    if(strstr(uart_string_gsm,">"))
00088a  a173              ADR      r1,|L1.2648|
00088c  4834              LDR      r0,|L1.2400|
00088e  f7fffffe          BL       strstr
000892  2800              CMP      r0,#0
000894  d01a              BEQ      |L1.2252|
;;;384    	{memset(uart_string_gsm,0,5000);k2=0;	
000896  4975              LDR      r1,|L1.2668|
000898  4831              LDR      r0,|L1.2400|
00089a  f7fffffe          BL       __aeabi_memclr
00089e  2000              MOVS     r0,#0
0008a0  4973              LDR      r1,|L1.2672|
0008a2  6008              STR      r0,[r1,#0]  ; k2
;;;385    
;;;386    		for(i=0;i<strlen(data);i++){uart_putchar(UART1_BASE_PTR, data[i]);tout = 0;}
0008a4  492d              LDR      r1,|L1.2396|
0008a6  6008              STR      r0,[r1,#0]  ; i
0008a8  e00e              B        |L1.2248|
                  |L1.2218|
0008aa  4814              LDR      r0,|L1.2300|
0008ac  4a2b              LDR      r2,|L1.2396|
0008ae  6812              LDR      r2,[r2,#0]  ; i
0008b0  5c81              LDRB     r1,[r0,r2]
0008b2  4814              LDR      r0,|L1.2308|
0008b4  f7fffffe          BL       uart_putchar
0008b8  2000              MOVS     r0,#0
0008ba  496e              LDR      r1,|L1.2676|
0008bc  6008              STR      r0,[r1,#0]  ; tout
0008be  4827              LDR      r0,|L1.2396|
0008c0  6800              LDR      r0,[r0,#0]  ; i
0008c2  1c40              ADDS     r0,r0,#1
0008c4  4925              LDR      r1,|L1.2396|
0008c6  6008              STR      r0,[r1,#0]  ; i
                  |L1.2248|
0008c8  480c              LDR      r0,|L1.2300|
0008ca  e0d5              B        |L1.2680|
                  |L1.2252|
0008cc  e106              B        |L1.2780|
0008ce  0000              DCW      0x0000
                  |L1.2256|
                          DCD      0x40048000
                  |L1.2260|
                          DCD      0x4004b000
                  |L1.2264|
                          DCD      0x400ff080
                  |L1.2268|
                          DCD      int_erval
                  |L1.2272|
0008e0  41545a0d          DCB      "ATZ\r\n",0
0008e4  0a00    
0008e6  00                DCB      0
0008e7  00                DCB      0
                  |L1.2280|
0008e8  41545256          DCB      "ATRV\r\n",0
0008ec  0d0a00  
0008ef  00                DCB      0
                  |L1.2288|
0008f0  41545350          DCB      "ATSP0\r\n",0
0008f4  300d0a00
                  |L1.2296|
                          DCD      0x000005dc
                  |L1.2300|
                          DCD      data
                  |L1.2304|
                          DCD      sent
                  |L1.2308|
                          DCD      0x4006b000
                  |L1.2312|
000908  4552524f          DCB      "ERROR:",0
00090c  523a00  
00090f  00                DCB      0
                  |L1.2320|
000910  4552524f          DCB      "ERROR\r\n",0
000914  520d0a00
                  |L1.2328|
000918  4f4b0d0a          DCB      "OK\r\n",0
00091c  00      
00091d  00                DCB      0
00091e  00                DCB      0
00091f  00                DCB      0
                  |L1.2336|
000920  0a0a4154          DCB      "\n\nAT\r\n",0
000924  0d0a00  
000927  00                DCB      0
                  |L1.2344|
                          DCD      stateCount
                  |L1.2348|
                          DCD      imei
                  |L1.2352|
                          DCD      gga
                  |L1.2356|
                          DCD      ||rmc||
                  |L1.2360|
                          DCD      fuelstr
                  |L1.2364|
00093c  4552524f          DCB      "ERROR",0
000940  5200    
000942  00                DCB      0
000943  00                DCB      0
                  |L1.2372|
000944  4f4b00            DCB      "OK",0
000947  00                DCB      0
                  |L1.2376|
000948  0d0a0a0a          DCB      "\r\n\n\nAT+GSN\r\n",0
00094c  41542b47
000950  534e0d0a
000954  00      
000955  00                DCB      0
000956  00                DCB      0
000957  00                DCB      0
                  |L1.2392|
                          DCD      imeiinc
                  |L1.2396|
                          DCD      i
                  |L1.2400|
                          DCD      uart_string_gsm
                  |L1.2404|
000964  0a0a4154          DCB      "\n\nAT+CFUN=0\r\n",0
000968  2b434655
00096c  4e3d300d
000970  0a00    
000972  00                DCB      0
000973  00                DCB      0
                  |L1.2420|
000974  44454143          DCB      "DEACT",0
000978  5400    
00097a  00                DCB      0
00097b  00                DCB      0
                  |L1.2428|
00097c  534d5320          DCB      "SMS Ready",0
000980  52656164
000984  7900    
000986  00                DCB      0
000987  00                DCB      0
                  |L1.2440|
000988  0a0a4154          DCB      "\n\nAT+CFUN=1\r\n",0
00098c  2b434655
000990  4e3d310d
000994  0a00    
000996  00                DCB      0
000997  00                DCB      0
                  |L1.2456|
000998  0a0a4154          DCB      "\n\nAT+QIFGCNT\r\n",0
00099c  2b514946
0009a0  47434e54
0009a4  0d0a00  
0009a7  00                DCB      0
                  |L1.2472|
0009a8  0a0a4154          DCB      "\n\nAT+QICSGP=1,""isafe""\r\n",0
0009ac  2b514943
0009b0  5347503d
0009b4  312c2269
0009b8  73616665
0009bc  220d0a00
                  |L1.2496|
0009c0  0a0a4154          DCB      "\n\nAT+QIMUX=0\r\n",0
0009c4  2b51494d
0009c8  55583d30
0009cc  0d0a00  
0009cf  00                DCB      0
                  |L1.2512|
0009d0  0a0a4154          DCB      "\n\nAT+QIMODE=0\r\n",0
0009d4  2b51494d
0009d8  4f44453d
0009dc  300d0a00
                  |L1.2528|
0009e0  0a0a4154          DCB      "\n\nAT+QIREGAPP\r\n",0
0009e4  2b514952
0009e8  45474150
0009ec  500d0a00
                  |L1.2544|
0009f0  0a0a4154          DCB      "\n\nAT+QIACT\r\n",0
0009f4  2b514941
0009f8  43540d0a
0009fc  00      
0009fd  00                DCB      0
0009fe  00                DCB      0
0009ff  00                DCB      0
                  |L1.2560|
000a00  2e00              DCB      ".",0
000a02  00                DCB      0
000a03  00                DCB      0
                  |L1.2564|
000a04  0a0a4154          DCB      "\n\nAT+QILOCIP\r\n",0
000a08  2b51494c
000a0c  4f434950
000a10  0d0a00  
000a13  00                DCB      0
                  |L1.2580|
000a14  4641494c          DCB      "FAIL",0
000a18  00      
000a19  00                DCB      0
000a1a  00                DCB      0
000a1b  00                DCB      0
                  |L1.2588|
000a1c  434f4e4e          DCB      "CONNECT OK\r\n",0
000a20  45435420
000a24  4f4b0d0a
000a28  00      
000a29  00                DCB      0
000a2a  00                DCB      0
000a2b  00                DCB      0
                  |L1.2604|
000a2c  0a0a4154          DCB      "\n\nAT+QIOPEN=""TCP"",""104.236.203.4"",""5555""\r\n",0
000a30  2b51494f
000a34  50454e3d
000a38  22544350
000a3c  222c2231
000a40  30342e32
000a44  33362e32
000a48  30332e34
000a4c  222c2235
000a50  35353522
000a54  0d0a00  
000a57  00                DCB      0
                  |L1.2648|
000a58  3e00              DCB      ">",0
000a5a  00                DCB      0
000a5b  00                DCB      0
                  |L1.2652|
000a5c  0a0a4154          DCB      "\n\nAT+QISEND\r\n",0
000a60  2b514953
000a64  454e440d
000a68  0a00    
000a6a  00                DCB      0
000a6b  00                DCB      0
                  |L1.2668|
                          DCD      0x00001388
                  |L1.2672|
                          DCD      ||k2||
                  |L1.2676|
                          DCD      tout
                  |L1.2680|
000a78  f7fffffe          BL       strlen
000a7c  4949              LDR      r1,|L1.2980|
000a7e  6809              LDR      r1,[r1,#0]  ; i
000a80  4288              CMP      r0,r1
000a82  d900              BLS      |L1.2694|
000a84  e711              B        |L1.2218|
                  |L1.2694|
;;;387    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000a86  210a              MOVS     r1,#0xa
000a88  4847              LDR      r0,|L1.2984|
000a8a  f7fffffe          BL       uart_putchar
000a8e  211a              MOVS     r1,#0x1a
000a90  4845              LDR      r0,|L1.2984|
000a92  f7fffffe          BL       uart_putchar
000a96  211a              MOVS     r1,#0x1a
000a98  4843              LDR      r0,|L1.2984|
000a9a  f7fffffe          BL       uart_putchar
000a9e  211a              MOVS     r1,#0x1a
000aa0  4841              LDR      r0,|L1.2984|
000aa2  f7fffffe          BL       uart_putchar
000aa6  211a              MOVS     r1,#0x1a
000aa8  483f              LDR      r0,|L1.2984|
000aaa  f7fffffe          BL       uart_putchar
;;;388    		
;;;389    		while(!(strstr(uart_string_gsm,"SEND OK") || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"SEND FAIL") || tout>5));
000aae  bf00              NOP      
                  |L1.2736|
000ab0  a13e              ADR      r1,|L1.2988|
000ab2  4840              LDR      r0,|L1.2996|
000ab4  f7fffffe          BL       strstr
000ab8  2800              CMP      r0,#0
000aba  d10f              BNE      |L1.2780|
000abc  493e              LDR      r1,|L1.3000|
000abe  483d              LDR      r0,|L1.2996|
000ac0  f7fffffe          BL       strstr
000ac4  2800              CMP      r0,#0
000ac6  d109              BNE      |L1.2780|
000ac8  a13c              ADR      r1,|L1.3004|
000aca  483a              LDR      r0,|L1.2996|
000acc  f7fffffe          BL       strstr
000ad0  2800              CMP      r0,#0
000ad2  d103              BNE      |L1.2780|
000ad4  483c              LDR      r0,|L1.3016|
000ad6  6800              LDR      r0,[r0,#0]  ; tout
000ad8  2805              CMP      r0,#5
000ada  dde9              BLE      |L1.2736|
                  |L1.2780|
;;;390    		
;;;391    	}
;;;392    
;;;393    
;;;394    		if(strstr(uart_string_gsm,"SEND OK")){
000adc  a133              ADR      r1,|L1.2988|
000ade  4835              LDR      r0,|L1.2996|
000ae0  f7fffffe          BL       strstr
000ae4  2800              CMP      r0,#0
000ae6  d00b              BEQ      |L1.2816|
;;;395    			sent=1;memset(data,0,1500);
000ae8  2001              MOVS     r0,#1
000aea  4938              LDR      r1,|L1.3020|
000aec  6008              STR      r0,[r1,#0]  ; sent
000aee  4938              LDR      r1,|L1.3024|
000af0  4838              LDR      r0,|L1.3028|
000af2  f7fffffe          BL       __aeabi_memclr
;;;396    			delay(1000);
000af6  207d              MOVS     r0,#0x7d
000af8  00c0              LSLS     r0,r0,#3
000afa  f7fffffe          BL       delay
                  |L1.2814|
000afe  e002              B        |L1.2822|
                  |L1.2816|
;;;397    //					send_GSM("\n\nAT+QFOPEN=\"LOG.TXT\",0\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
;;;398    //					if(strstr(uart_string_gsm,"QFOPEN:"))
;;;399    //					{	memset(filehandler,0,20);
;;;400    //						parse_g(uart_string_gsm, 1, 3, ' ', '\r' ,filehandler);
;;;401    //						sent=0;
;;;402    //					}
;;;403    //					send_GSM("\n\nAT+QFWRITE=12451840, 10=\"LOG.TXT\",0\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
;;;404    
;;;405    		}else
;;;406    		{sent=0;}	
000b00  2000              MOVS     r0,#0
000b02  4932              LDR      r1,|L1.3020|
000b04  6008              STR      r0,[r1,#0]  ; sent
                  |L1.2822|
;;;407    		
;;;408    		}
;;;409    
;;;410    
;;;411    
;;;412    
;;;413    	}
;;;414    
;;;415    		if(rtcticks2>5000)
000b06  bf00              NOP      
                  |L1.2824|
000b08  e540              B        |L1.1420|
;;;416    		{
;;;417    			//RRESET
;;;418    		}
;;;419    	}
;;;420    
;;;421    }
;;;422    
                          ENDP

                  HardFault_Handler PROC
;;;424    
;;;425    void HardFault_Handler()
000b0a  b570              PUSH     {r4-r6,lr}
;;;426    {	long ppp=0;
000b0c  2400              MOVS     r4,#0
;;;427    
;;;428    	send_modem("Hardfault_Handler");	
000b0e  a532              ADR      r5,|L1.3032|
000b10  2600              MOVS     r6,#0
000b12  bf00              NOP      
000b14  e005              B        |L1.2850|
                  |L1.2838|
000b16  5da9              LDRB     r1,[r5,r6]
000b18  4823              LDR      r0,|L1.2984|
000b1a  f7fffffe          BL       uart_putchar
000b1e  1c70              ADDS     r0,r6,#1
000b20  b2c6              UXTB     r6,r0
                  |L1.2850|
000b22  4628              MOV      r0,r5
000b24  f7fffffe          BL       strlen
000b28  42b0              CMP      r0,r6
000b2a  d8f4              BHI      |L1.2838|
000b2c  bf00              NOP      
;;;429    	RESET_OFF;
000b2e  2020              MOVS     r0,#0x20
000b30  492e              LDR      r1,|L1.3052|
000b32  6088              STR      r0,[r1,#8]
;;;430    	RESET_OFF;
000b34  6088              STR      r0,[r1,#8]
;;;431    for(ppp=0;ppp<9999999; ppp++);	
000b36  2400              MOVS     r4,#0
000b38  e000              B        |L1.2876|
                  |L1.2874|
000b3a  1c64              ADDS     r4,r4,#1
                  |L1.2876|
000b3c  482c              LDR      r0,|L1.3056|
000b3e  4284              CMP      r4,r0
000b40  dbfb              BLT      |L1.2874|
;;;432    	
;;;433    	RESET_ON;
000b42  2020              MOVS     r0,#0x20
000b44  4929              LDR      r1,|L1.3052|
000b46  6048              STR      r0,[r1,#4]
;;;434    	RESET_ON;
000b48  6048              STR      r0,[r1,#4]
;;;435    for(ppp=0;ppp<9999999; ppp++);
000b4a  2400              MOVS     r4,#0
000b4c  e000              B        |L1.2896|
                  |L1.2894|
000b4e  1c64              ADDS     r4,r4,#1
                  |L1.2896|
000b50  4827              LDR      r0,|L1.3056|
000b52  4284              CMP      r4,r0
000b54  dbfb              BLT      |L1.2894|
;;;436    }
000b56  bd70              POP      {r4-r6,pc}
;;;437    
                          ENDP

                  LPTimer_IRQHandler PROC
;;;439    
;;;440     void LPTimer_IRQHandler(void)
000b58  4826              LDR      r0,|L1.3060|
;;;441    {
;;;442    lpticks+=1;
000b5a  6800              LDR      r0,[r0,#0]  ; lpticks
000b5c  1c40              ADDS     r0,r0,#1
000b5e  4925              LDR      r1,|L1.3060|
000b60  6008              STR      r0,[r1,#0]  ; lpticks
;;;443    //rtcticks++;
;;;444    	tout++;tout2++;
000b62  4819              LDR      r0,|L1.3016|
000b64  6800              LDR      r0,[r0,#0]  ; tout
000b66  1c40              ADDS     r0,r0,#1
000b68  4917              LDR      r1,|L1.3016|
000b6a  6008              STR      r0,[r1,#0]  ; tout
000b6c  4822              LDR      r0,|L1.3064|
000b6e  6800              LDR      r0,[r0,#0]  ; tout2
000b70  1c40              ADDS     r0,r0,#1
000b72  4921              LDR      r1,|L1.3064|
000b74  6008              STR      r0,[r1,#0]  ; tout2
;;;445    	rtcticks2++;
000b76  4821              LDR      r0,|L1.3068|
000b78  6800              LDR      r0,[r0,#0]  ; rtcticks2
000b7a  1c40              ADDS     r0,r0,#1
000b7c  491f              LDR      r1,|L1.3068|
000b7e  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;446    	if(sleep_flag == 1){aliveping++;}
000b80  481f              LDR      r0,|L1.3072|
000b82  6800              LDR      r0,[r0,#0]  ; sleep_flag
000b84  2801              CMP      r0,#1
000b86  d104              BNE      |L1.2962|
000b88  481e              LDR      r0,|L1.3076|
000b8a  6800              LDR      r0,[r0,#0]  ; aliveping
000b8c  1c40              ADDS     r0,r0,#1
000b8e  491d              LDR      r1,|L1.3076|
000b90  6008              STR      r0,[r1,#0]  ; aliveping
                  |L1.2962|
;;;447    
;;;448      LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
000b92  481d              LDR      r0,|L1.3080|
000b94  6800              LDR      r0,[r0,#0]
000b96  2180              MOVS     r1,#0x80
000b98  4308              ORRS     r0,r0,r1
000b9a  491b              LDR      r1,|L1.3080|
000b9c  6008              STR      r0,[r1,#0]
;;;449      LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
000b9e  20c1              MOVS     r0,#0xc1
000ba0  6008              STR      r0,[r1,#0]
;;;450    	
;;;451      
;;;452    }
000ba2  4770              BX       lr
;;;453    
                          ENDP

                  |L1.2980|
                          DCD      i
                  |L1.2984|
                          DCD      0x4006b000
                  |L1.2988|
000bac  53454e44          DCB      "SEND OK",0
000bb0  204f4b00
                  |L1.2996|
                          DCD      uart_string_gsm
                  |L1.3000|
                          DCD      ||.text||+0x93c
                  |L1.3004|
000bbc  53454e44          DCB      "SEND FAIL",0
000bc0  20464149
000bc4  4c00    
000bc6  00                DCB      0
000bc7  00                DCB      0
                  |L1.3016|
                          DCD      tout
                  |L1.3020|
                          DCD      sent
                  |L1.3024|
                          DCD      0x000005dc
                  |L1.3028|
                          DCD      data
                  |L1.3032|
000bd8  48617264          DCB      "Hardfault_Handler",0
000bdc  6661756c
000be0  745f4861
000be4  6e646c65
000be8  7200    
000bea  00                DCB      0
000beb  00                DCB      0
                  |L1.3052|
                          DCD      0x400ff080
                  |L1.3056|
                          DCD      0x0098967f
                  |L1.3060|
                          DCD      lpticks
                  |L1.3064|
                          DCD      tout2
                  |L1.3068|
                          DCD      rtcticks2
                  |L1.3072|
                          DCD      sleep_flag
                  |L1.3076|
                          DCD      aliveping
                  |L1.3080|
                          DCD      0x40040000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        30
                  latest
                          %        10
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  uart_string_obd
                          %        3000
                  data2
                          %        300
                  exception
                          %        200
                  filehandler
                          %        20
                  at_
                          %        100
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  _rtcticks
                          %        10
                  imei
                          %        20
                  sd_data
                          %        1400
                  data_balance
                          %        200
                  obdresp
                          %        20
                  tempobdresp
                          %        20
                  obdrespbinary
                          %        33
                  suppportedpid
                          %        700

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  30303030          DCB      "0000",0
000004  00      
000005  00                DCB      0
000006  00                DCB      0
000007  00                DCB      0
000008  30303031          DCB      "0001",0
00000c  00      
00000d  00                DCB      0
00000e  00                DCB      0
00000f  00                DCB      0
000010  30303130          DCB      "0010",0
000014  00      
000015  00                DCB      0
000016  00                DCB      0
000017  00                DCB      0
000018  30303131          DCB      "0011",0
00001c  00      
00001d  00                DCB      0
00001e  00                DCB      0
00001f  00                DCB      0
000020  30313030          DCB      "0100",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  30313031          DCB      "0101",0
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  30313130          DCB      "0110",0
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  30313131          DCB      "0111",0
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
000040  31303030          DCB      "1000",0
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
000048  31303031          DCB      "1001",0
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
000050  31303130          DCB      "1010",0
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  31303131          DCB      "1011",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
000060  31313030          DCB      "1100",0
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
000068  31313031          DCB      "1101",0
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  31313130          DCB      "1110",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  31313131          DCB      "1111",0
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
000080  0a496e76          DCB      "\nInvalid hexadecimal digit %c ",0
000084  616c6964
000088  20686578
00008c  61646563
000090  696d616c
000094  20646967
000098  69742025
00009c  632000  
00009f  00                DCB      0
0000a0  3e00              DCB      ">",0
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  4e4f4441          DCB      "NODATA",0
0000a8  544100  
0000ab  00                DCB      0
0000ac  53454152          DCB      "SEARCHING",0
0000b0  4348494e
0000b4  4700    
0000b6  00                DCB      0
0000b7  00                DCB      0
0000b8  25632563          DCB      "%c%c%c%x",0
0000bc  25632578
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
0000c4  25632563          DCB      "%c%c%x",0
0000c8  257800  
0000cb  00                DCB      0
0000cc  4552524f          DCB      "ERROR:",0
0000d0  523a00  
0000d3  00                DCB      0
0000d4  4552524f          DCB      "ERROR\r\n",0
0000d8  520d0a00
0000dc  4f4b0d0a          DCB      "OK\r\n",0
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
0000e4  0a0a4154          DCB      "\n\nAT+QGNSSC=1\r\n",0
0000e8  2b51474e
0000ec  5353433d
0000f0  310d0a00
0000f4  554e4142          DCB      "UNABLE",0
0000f8  4c4500  
0000fb  00                DCB      0
0000fc  4e4f2044          DCB      "NO DATA",0
000100  41544100
000104  30313230          DCB      "0120",0
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
00010c  30313430          DCB      "0140",0
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
000114  30313630          DCB      "0160",0
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
00011c  30313830          DCB      "0180",0
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0
000124  30314130          DCB      "01A0",0
000128  00      
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
00012c  30314330          DCB      "01C0",0
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
000134  30353031          DCB      "050100",0
000138  303000  
00013b  00                DCB      0
00013c  30393030          DCB      "0900",0
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
000144  0a0a4154          DCB      "\n\nAT+QGNSSRD=""NMEA/RMC""\r\n",0
000148  2b51474e
00014c  53535244
000150  3d224e4d
000154  45412f52
000158  4d43220d
00015c  0a00    
00015e  00                DCB      0
00015f  00                DCB      0
000160  0a0a4154          DCB      "\n\nAT+QGNSSRD=""NMEA/GGA""\r\n",0
000164  2b51474e
000168  53535244
00016c  3d224e4d
000170  45412f47
000174  4741220d
000178  0a00    
00017a  00                DCB      0
00017b  00                DCB      0
00017c  414c4956          DCB      "ALIVE",0
000180  4500    
000182  00                DCB      0
000183  00                DCB      0
000184  41545256          DCB      "ATRV\r\n",0
000188  0d0a00  
00018b  00                DCB      0
00018c  2c00              DCB      ",",0
00018e  00                DCB      0
00018f  00                DCB      0
000190  2400              DCB      "$$",0
000192  00                DCB      0
000193  00                DCB      0
000194  2c2400            DCB      ",$$",0
000197  00                DCB      0
000198  3d00              DCB      "=",0
00019a  00                DCB      0
00019b  00                DCB      0
00019c  2c3c3e0a          DCB      ",<>\n",0
0001a0  00      

                          AREA ||.data||, DATA, ALIGN=3

                  cond200
                          DCD      0x00000000
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  tout
                          DCD      0x00000000
                  tout2
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  temp
                          DCD      0x00000000
                  flagch
                          DCD      0x00000000
                  cond121
000028  00000000          DCB      0x00,0x00,0x00,0x00
                  cond122
                          DCD      0x00000000
                  cond123
                          DCD      0x00000000
                  cond124
                          DCD      0x00000000
                  len
                          DCD      0x00000000
                  cond
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                  con1d
                          DCD      0x00000000
                  stcond1
                          DCD      0x00000000
                  stcond2
                          DCD      0x00000000
                  stcond3
                          DCD      0x00000000
                  stcond4
                          DCD      0x00000000
                  time111
                          DCD      0x00000000
                  timeout222
                          DCD      0x00000000
                  qweq
                          DCD      0x00000000
                  i11
                          DCD      0x00000000
                  j11
                          DCD      0x00000000
                  temp11
                          DCD      0x00000000
                  ||sz1||
                          DCD      0x00000000
                  ||sz2||
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  stateCount
000078  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  e
                          DCD      0x00000000
                  adcsa
                          DCD      0x00000000
                  adcin
                          DCD      0x00000000
                  adcsample
                          DCD      0x00000000
                  fuel
                          DCD      0x00000000
                  fuelstr
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                  ||rez||
0000a4  00000000          DCFS     0x00000000 ; 0
                  fact
0000a8  3f800000          DCFS     0x3f800000 ; 1
                  d
                          DCD      0x00000000
                  point_seen
                          DCD      0x00000000
                  sent
                          DCD      0x00000000
                  cond201
                          DCD      0x00000000
                  cond1
                          DCD      0x00000000
                  cond2
                          DCD      0x00000000
                  cond3
                          DCD      0x00000000
                  cond4
                          DCD      0x00000000
                  cond5
                          DCD      0x00000000
                  cond6
                          DCD      0x00000000
                  cond7
                          DCD      0x00000000
                  cond8
                          DCD      0x00000000
                  cond9
                          DCD      0x00000000
                  cond10
                          DCD      0x00000000
                  cond11
                          DCD      0x00000000
                  cond12
                          DCD      0x00000000
                  cond13
                          DCD      0x00000000
                  cond14
                          DCD      0x00000000
                  ass
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  ||fsz||
                          DCD      0x00000000
                  log0
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  qwe
                          DCD      0x00000000
                  ||k5||
                          DCD      0x00000000
                  enters
                          DCD      0x00000000
                  cursorvaluepr
                          DCD      0x00000000
                  cursorvaluene
                          DCD      0x00000000
                  ||q1||
                          DCD      0x00000000
                  ||q2||
                          DCD      0x00000000
                  ||q3||
                          DCD      0x00000000
                  ||q4||
                          DCD      0x00000000
                  cntendl
                          DCD      0x00000000
                  k23
                          DCD      0x00000000
                  prev
                          %        8
                  ||iz||
                          DCD      0x00000000
                  a
                          %        8
                  b
                          %        8
                  c
                          %        8
                  ||hh||
                          DCD      0x00000000
                  mm1
                          DCD      0x00000000
                  mm2
                          DCD      0x00000000
                          DCD      0x00000000
                  ||a1||
                          %        8
                  ||b1||
                          %        8
                  ||c1||
                          %        8
                  hh11
                          %        8
                  mm11
                          %        8
                  mm22
                          %        8
                  logged
                          DCD      0x00000000
                  check
                          DCD      0x00000000
                  stcond5
                          DCD      0x00000000
                  breach
                          DCD      0x00000000
                  aliveping
                          DCD      0x00000000
                  sleep_flag
                          DCD      0x00000000
                  tmeout
                          DCD      0x00000004
                  int_erval
                          DCD      0x00000001
                  drive
                          DCD      0x00000000
0001bc  00                DCB      0x00
                  apn
0001bd  696f74            DCB      0x69,0x6f,0x74
0001c0  2e636f6d          DCB      0x2e,0x63,0x6f,0x6d
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
                  speed
0001d8  00000000          DCFS     0x00000000 ; 0
                  lpticks
                          DCD      0x00000000
                  voltagecbc
                          DCD      0x00000000
                  ||csq||
                          DCD      0x00000000
                  rtcticks
                          DCD      0x00000000
                  rtcticks2
                          DCD      0x00000000
                  imeiinc
                          DCD      0x00000000
                  ticks_ch
0001f4  00                DCB      0x00
                  save_rtcticks
0001f5  00                DCB      0x00
                  ||ip||
0001f6  3130              DCB      0x31,0x30
0001f8  342e3233          DCB      0x34,0x2e,0x32,0x33
0001fc  362e3230          DCB      0x36,0x2e,0x32,0x30
000200  332e3400          DCB      0x33,0x2e,0x34,0x00
000204  0000              DCB      0x00,0x00
                  port
000206  3535              DCB      0x35,0x35
000208  35350000          DCB      0x35,0x35,0x00,0x00
                          DCD      0x00000000
                  velocity
                          DCD      0x00000000
000214  00                DCB      0x00
                  interval
000215  000000            DCB      0x00,0x00,0x00
000218  00000000          DCB      0x00,0x00,0x00,0x00
                  timeout
                          DCD      0x00000000
                  ||pr||
000220  00000000          DCFS     0x00000000 ; 0
                  ||la||
000224  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
00023c  00                DCB      0x00
                  ringflag
00023d  00                DCB      0x00
                  lptmr_interrupt
00023e  0000              DCB      0x00,0x00
                  time52
                          DCD      0x0000000f
                  cond277
                          DCD      0x00000000
                  cond20077
                          DCD      0x00000000
                  ||sz||
                          DCD      0x00000000
                  ||cn||
                          DCD      0x00000000
                  ||res||
                          DCD      0x00000000
                  test2
                          DCD      0x00000000
                  pidcounter
                          DCD      0x00000000

                          AREA ||i.clear||, COMGROUP=clear, CODE, READONLY, ALIGN=2

                  clear PROC
;;;316    	
;;;317    __inline void clear()
000000  4808              LDR      r0,|L18.36|
;;;318    {
;;;319      if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7900              LDRB     r0,[r0,#4]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L18.20|
;;;320        {
;;;321          temp = UART_D_REG(UART1_BASE_PTR);
00000c  4805              LDR      r0,|L18.36|
00000e  79c0              LDRB     r0,[r0,#7]
000010  4905              LDR      r1,|L18.40|
000012  6008              STR      r0,[r1,#0]  ; temp
                  |L18.20|
;;;322    		}
;;;323    		
;;;324    		UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000014  4803              LDR      r0,|L18.36|
000016  7900              LDRB     r0,[r0,#4]
000018  2118              MOVS     r1,#0x18
00001a  4308              ORRS     r0,r0,r1
00001c  4901              LDR      r1,|L18.36|
00001e  7108              STRB     r0,[r1,#4]
;;;325    }	
000020  4770              BX       lr
;;;326    
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0x4006b000
                  |L18.40|
                          DCD      temp

                          AREA ||i.hextodecimal||, COMGROUP=hextodecimal, CODE, READONLY, ALIGN=2

                  hextodecimal PROC
;;;342    
;;;343    __inline int hextodecimal(char *hex){
000000  b5f1              PUSH     {r0,r4-r7,lr}
000002  b088              SUB      sp,sp,#0x20
;;;344    	
;;;345    	 double decimal, place;
;;;346        double val, lentt;
;;;347    
;;;348    	int hex2deci;
;;;349    	 
;;;350        decimal = 0;
000004  2100              MOVS     r1,#0
000006  9106              STR      r1,[sp,#0x18]
000008  9107              STR      r1,[sp,#0x1c]
;;;351        place = 1;
00000a  bf00              NOP      
;;;352    	   /* Finds the length of total number of hex digit */
;;;353        lentt = strlen(hex); 
00000c  9808              LDR      r0,[sp,#0x20]
00000e  f7fffffe          BL       strlen
000012  9004              STR      r0,[sp,#0x10]
000014  f7fffffe          BL       __aeabi_ui2d
000018  4606              MOV      r6,r0
00001a  460f              MOV      r7,r1
;;;354        lentt--;
00001c  2200              MOVS     r2,#0
00001e  4b4d              LDR      r3,|L25.340|
000020  4630              MOV      r0,r6
000022  4639              MOV      r1,r7
000024  f7fffffe          BL       __aeabi_dsub
000028  4606              MOV      r6,r0
00002a  460f              MOV      r7,r1
;;;355         
;;;356        /*
;;;357         * Converts the hexadecimal number to decimal number
;;;358         * using algorithm decimal = decimal + (hex[i] * 16 ^ digit)
;;;359         */
;;;360        for(hex2deci=0; hex[hex2deci]!='\0'; hex2deci++)
00002c  2000              MOVS     r0,#0
00002e  9005              STR      r0,[sp,#0x14]
000030  e083              B        |L25.314|
                  |L25.50|
;;;361        {
;;;362            /*
;;;363             * Finds the decimal each equivalent hexadecimal digit
;;;364             */
;;;365            switch(hex[hex2deci])
000032  9905              LDR      r1,[sp,#0x14]
000034  9808              LDR      r0,[sp,#0x20]
000036  5c40              LDRB     r0,[r0,r1]
000038  2842              CMP      r0,#0x42
00003a  d04b              BEQ      |L25.212|
00003c  dc0d              BGT      |L25.90|
00003e  3830              SUBS     r0,r0,#0x30
000040  0003              MOVS     r3,r0
000042  f7fffffe          BL       __ARM_common_switch8
000046  1223              DCB      0x12,0x23
000048  26292d30          DCB      0x26,0x29,0x2d,0x30
00004c  3336393c          DCB      0x33,0x36,0x39,0x3c
000050  3f5a5a5a          DCB      0x3f,0x5a,0x5a,0x5a
000054  5a5a5a5a          DCB      0x5a,0x5a,0x5a,0x5a
000058  435a              DCB      0x43,0x5a
                  |L25.90|
00005a  2862              CMP      r0,#0x62
00005c  d039              BEQ      |L25.210|
00005e  dc0c              BGT      |L25.122|
000060  2845              CMP      r0,#0x45
000062  d043              BEQ      |L25.236|
000064  dc04              BGT      |L25.112|
000066  2843              CMP      r0,#0x43
000068  d038              BEQ      |L25.220|
00006a  2844              CMP      r0,#0x44
00006c  d145              BNE      |L25.250|
00006e  e039              B        |L25.228|
                  |L25.112|
000070  2846              CMP      r0,#0x46
000072  d03f              BEQ      |L25.244|
000074  2861              CMP      r0,#0x61
000076  d140              BNE      |L25.250|
000078  e027              B        |L25.202|
                  |L25.122|
00007a  2863              CMP      r0,#0x63
00007c  d02d              BEQ      |L25.218|
00007e  2864              CMP      r0,#0x64
000080  d02f              BEQ      |L25.226|
000082  2865              CMP      r0,#0x65
000084  d031              BEQ      |L25.234|
000086  2866              CMP      r0,#0x66
000088  d137              BNE      |L25.250|
00008a  e032              B        |L25.242|
;;;366            {
;;;367                case '0':
;;;368                    val = 0;
00008c  2400              MOVS     r4,#0
00008e  4625              MOV      r5,r4
;;;369                    break;
000090  e033              B        |L25.250|
;;;370                case '1':
;;;371                    val = 1;
000092  2400              MOVS     r4,#0
000094  4d2f              LDR      r5,|L25.340|
;;;372                    break;
000096  e030              B        |L25.250|
;;;373                case '2':
;;;374                    val = 2;
000098  2400              MOVS     r4,#0
00009a  2501              MOVS     r5,#1
00009c  07ad              LSLS     r5,r5,#30
;;;375                    break;
00009e  e02c              B        |L25.250|
;;;376                case '3':
;;;377                    val = 3;
0000a0  2400              MOVS     r4,#0
0000a2  4d2d              LDR      r5,|L25.344|
;;;378                    break;
0000a4  e029              B        |L25.250|
;;;379                case '4':
;;;380                    val = 4;
0000a6  2400              MOVS     r4,#0
0000a8  4d2c              LDR      r5,|L25.348|
;;;381                    break;
0000aa  e026              B        |L25.250|
;;;382                case '5':
;;;383                    val = 5;
0000ac  2400              MOVS     r4,#0
0000ae  4d2c              LDR      r5,|L25.352|
;;;384                    break;
0000b0  e023              B        |L25.250|
;;;385                case '6':
;;;386                    val = 6;
0000b2  2400              MOVS     r4,#0
0000b4  4d2b              LDR      r5,|L25.356|
;;;387                    break;
0000b6  e020              B        |L25.250|
;;;388                case '7':
;;;389                    val = 7;
0000b8  2400              MOVS     r4,#0
0000ba  4d2b              LDR      r5,|L25.360|
;;;390                    break;
0000bc  e01d              B        |L25.250|
;;;391                case '8':
;;;392                    val = 8;
0000be  2400              MOVS     r4,#0
0000c0  4d2a              LDR      r5,|L25.364|
;;;393                    break;
0000c2  e01a              B        |L25.250|
;;;394                case '9':
;;;395                    val = 9;
0000c4  2400              MOVS     r4,#0
0000c6  4d2a              LDR      r5,|L25.368|
;;;396                    break;
0000c8  e017              B        |L25.250|
                  |L25.202|
;;;397                case 'a':
;;;398                case 'A':
0000ca  bf00              NOP      
;;;399                    val = 10;
0000cc  2400              MOVS     r4,#0
0000ce  4d29              LDR      r5,|L25.372|
;;;400                    break;
0000d0  e013              B        |L25.250|
                  |L25.210|
;;;401                case 'b':
;;;402                case 'B':
0000d2  bf00              NOP      
                  |L25.212|
;;;403                    val = 11;
0000d4  2400              MOVS     r4,#0
0000d6  4d28              LDR      r5,|L25.376|
;;;404                    break;
0000d8  e00f              B        |L25.250|
                  |L25.218|
;;;405                case 'c':
;;;406                case 'C':
0000da  bf00              NOP      
                  |L25.220|
;;;407                    val = 12;
0000dc  2400              MOVS     r4,#0
0000de  4d27              LDR      r5,|L25.380|
;;;408                    break;
0000e0  e00b              B        |L25.250|
                  |L25.226|
;;;409                case 'd':
;;;410                case 'D':
0000e2  bf00              NOP      
                  |L25.228|
;;;411                    val = 13;
0000e4  2400              MOVS     r4,#0
0000e6  4d26              LDR      r5,|L25.384|
;;;412                    break;
0000e8  e007              B        |L25.250|
                  |L25.234|
;;;413                case 'e':
;;;414                case 'E':
0000ea  bf00              NOP      
                  |L25.236|
;;;415                    val = 14;
0000ec  2400              MOVS     r4,#0
0000ee  4d25              LDR      r5,|L25.388|
;;;416                    break;
0000f0  e003              B        |L25.250|
                  |L25.242|
;;;417                case 'f':
;;;418                case 'F':
0000f2  bf00              NOP      
                  |L25.244|
;;;419                    val = 15;
0000f4  2400              MOVS     r4,#0
0000f6  4d24              LDR      r5,|L25.392|
;;;420                    break;
0000f8  bf00              NOP      
                  |L25.250|
0000fa  bf00              NOP                            ;369
;;;421            }
;;;422     
;;;423            decimal += val * pow(16, lentt);
0000fc  4632              MOV      r2,r6
0000fe  463b              MOV      r3,r7
000100  2000              MOVS     r0,#0
000102  4922              LDR      r1,|L25.396|
000104  f7fffffe          BL       pow
000108  4622              MOV      r2,r4
00010a  462b              MOV      r3,r5
00010c  9101              STR      r1,[sp,#4]
00010e  9000              STR      r0,[sp,#0]
000110  f7fffffe          BL       __aeabi_dmul
000114  9103              STR      r1,[sp,#0xc]
000116  9002              STR      r0,[sp,#8]
000118  9b07              LDR      r3,[sp,#0x1c]
00011a  9a06              LDR      r2,[sp,#0x18]
00011c  f7fffffe          BL       __aeabi_dadd
000120  9107              STR      r1,[sp,#0x1c]
000122  9006              STR      r0,[sp,#0x18]
;;;424            lentt--;
000124  2200              MOVS     r2,#0
000126  4b0b              LDR      r3,|L25.340|
000128  4630              MOV      r0,r6
00012a  4639              MOV      r1,r7
00012c  f7fffffe          BL       __aeabi_dsub
000130  4606              MOV      r6,r0
000132  460f              MOV      r7,r1
000134  9805              LDR      r0,[sp,#0x14]         ;360
000136  1c40              ADDS     r0,r0,#1              ;360
000138  9005              STR      r0,[sp,#0x14]         ;360
                  |L25.314|
00013a  9905              LDR      r1,[sp,#0x14]         ;360
00013c  9808              LDR      r0,[sp,#0x20]         ;360
00013e  5c40              LDRB     r0,[r0,r1]            ;360
000140  2800              CMP      r0,#0                 ;360
000142  d000              BEQ      |L25.326|
000144  e775              B        |L25.50|
                  |L25.326|
;;;425        }
;;;426    	
;;;427    return decimal;	
000146  9907              LDR      r1,[sp,#0x1c]
000148  9806              LDR      r0,[sp,#0x18]
00014a  f7fffffe          BL       __aeabi_d2iz
;;;428    	
;;;429    }
00014e  b009              ADD      sp,sp,#0x24
000150  bdf0              POP      {r4-r7,pc}
;;;430    
                          ENDP

000152  0000              DCW      0x0000
                  |L25.340|
                          DCD      0x3ff00000
                  |L25.344|
                          DCD      0x40080000
                  |L25.348|
                          DCD      0x40100000
                  |L25.352|
                          DCD      0x40140000
                  |L25.356|
                          DCD      0x40180000
                  |L25.360|
                          DCD      0x401c0000
                  |L25.364|
                          DCD      0x40200000
                  |L25.368|
                          DCD      0x40220000
                  |L25.372|
                          DCD      0x40240000
                  |L25.376|
                          DCD      0x40260000
                  |L25.380|
                          DCD      0x40280000
                  |L25.384|
                          DCD      0x402a0000
                  |L25.388|
                          DCD      0x402c0000
                  |L25.392|
                          DCD      0x402e0000
                  |L25.396|
                          DCD      0x40300000

                          AREA ||i.hextobinary||, COMGROUP=hextobinary, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  hextobinary PROC
;;;434    
;;;435    __inline void hextobinary(char* hex, char* bin){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;436    	int cou;
;;;437    			cou=0;
000006  2500              MOVS     r5,#0
;;;438    		while(hex[cou]){
000008  e0a1              B        |L32.334|
                  |L32.10|
;;;439             switch(hex[cou]){
00000a  5d60              LDRB     r0,[r4,r5]
00000c  2842              CMP      r0,#0x42
00000e  d05e              BEQ      |L32.206|
000010  dc0d              BGT      |L32.46|
000012  3830              SUBS     r0,r0,#0x30
000014  0003              MOVS     r3,r0
000016  f7fffffe          BL       __ARM_common_switch8
00001a  1223              DCB      0x12,0x23
00001c  282d3237          DCB      0x28,0x2d,0x32,0x37
000020  3c41464b          DCB      0x3c,0x41,0x46,0x4b
000024  50939393          DCB      0x50,0x93,0x93,0x93
000028  93939393          DCB      0x93,0x93,0x93,0x93
00002c  5593              DCB      0x55,0x93
                  |L32.46|
00002e  2862              CMP      r0,#0x62
000030  d06b              BEQ      |L32.266|
000032  dc0c              BGT      |L32.78|
000034  2845              CMP      r0,#0x45
000036  d059              BEQ      |L32.236|
000038  dc04              BGT      |L32.68|
00003a  2843              CMP      r0,#0x43
00003c  d04c              BEQ      |L32.216|
00003e  2844              CMP      r0,#0x44
000040  d17e              BNE      |L32.320|
000042  e04e              B        |L32.226|
                  |L32.68|
000044  2846              CMP      r0,#0x46
000046  d056              BEQ      |L32.246|
000048  2861              CMP      r0,#0x61
00004a  d179              BNE      |L32.320|
00004c  e058              B        |L32.256|
                  |L32.78|
00004e  2863              CMP      r0,#0x63
000050  d060              BEQ      |L32.276|
000052  2864              CMP      r0,#0x64
000054  d063              BEQ      |L32.286|
000056  2865              CMP      r0,#0x65
000058  d068              BEQ      |L32.300|
00005a  2866              CMP      r0,#0x66
00005c  d170              BNE      |L32.320|
00005e  e06a              B        |L32.310|
;;;440                 case '0': strcat(bin,"0000"); break;
000060  493d              LDR      r1,|L32.344|
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       strcat
000068  e06f              B        |L32.330|
;;;441                 case '1': strcat(bin,"0001"); break;
00006a  493c              LDR      r1,|L32.348|
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       strcat
000072  e06a              B        |L32.330|
;;;442                 case '2': strcat(bin,"0010"); break;
000074  493a              LDR      r1,|L32.352|
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       strcat
00007c  e065              B        |L32.330|
;;;443                 case '3': strcat(bin,"0011"); break;
00007e  4939              LDR      r1,|L32.356|
000080  4630              MOV      r0,r6
000082  f7fffffe          BL       strcat
000086  e060              B        |L32.330|
;;;444                 case '4': strcat(bin,"0100"); break;
000088  4937              LDR      r1,|L32.360|
00008a  4630              MOV      r0,r6
00008c  f7fffffe          BL       strcat
000090  e05b              B        |L32.330|
;;;445                 case '5': strcat(bin,"0101"); break;
000092  4936              LDR      r1,|L32.364|
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       strcat
00009a  e056              B        |L32.330|
;;;446                 case '6': strcat(bin,"0110"); break;
00009c  4934              LDR      r1,|L32.368|
00009e  4630              MOV      r0,r6
0000a0  f7fffffe          BL       strcat
0000a4  e051              B        |L32.330|
;;;447                 case '7': strcat(bin,"0111"); break;
0000a6  4933              LDR      r1,|L32.372|
0000a8  4630              MOV      r0,r6
0000aa  f7fffffe          BL       strcat
0000ae  e04c              B        |L32.330|
;;;448                 case '8': strcat(bin,"1000"); break;
0000b0  4931              LDR      r1,|L32.376|
0000b2  4630              MOV      r0,r6
0000b4  f7fffffe          BL       strcat
0000b8  e047              B        |L32.330|
;;;449                 case '9': strcat(bin,"1001"); break;
0000ba  4930              LDR      r1,|L32.380|
0000bc  4630              MOV      r0,r6
0000be  f7fffffe          BL       strcat
0000c2  e042              B        |L32.330|
;;;450                 case 'A': strcat(bin,"1010"); break;
0000c4  492e              LDR      r1,|L32.384|
0000c6  4630              MOV      r0,r6
0000c8  f7fffffe          BL       strcat
0000cc  e03d              B        |L32.330|
                  |L32.206|
;;;451                 case 'B': strcat(bin,"1011"); break;
0000ce  492d              LDR      r1,|L32.388|
0000d0  4630              MOV      r0,r6
0000d2  f7fffffe          BL       strcat
0000d6  e038              B        |L32.330|
                  |L32.216|
;;;452                 case 'C': strcat(bin,"1100"); break;
0000d8  492b              LDR      r1,|L32.392|
0000da  4630              MOV      r0,r6
0000dc  f7fffffe          BL       strcat
0000e0  e033              B        |L32.330|
                  |L32.226|
;;;453                 case 'D': strcat(bin,"1101"); break;
0000e2  492a              LDR      r1,|L32.396|
0000e4  4630              MOV      r0,r6
0000e6  f7fffffe          BL       strcat
0000ea  e02e              B        |L32.330|
                  |L32.236|
;;;454                 case 'E': strcat(bin,"1110"); break;
0000ec  4928              LDR      r1,|L32.400|
0000ee  4630              MOV      r0,r6
0000f0  f7fffffe          BL       strcat
0000f4  e029              B        |L32.330|
                  |L32.246|
;;;455                 case 'F': strcat(bin,"1111"); break;
0000f6  4927              LDR      r1,|L32.404|
0000f8  4630              MOV      r0,r6
0000fa  f7fffffe          BL       strcat
0000fe  e024              B        |L32.330|
                  |L32.256|
;;;456                 case 'a': strcat(bin,"1010"); break;
000100  491f              LDR      r1,|L32.384|
000102  4630              MOV      r0,r6
000104  f7fffffe          BL       strcat
000108  e01f              B        |L32.330|
                  |L32.266|
;;;457                 case 'b': strcat(bin,"1011"); break;
00010a  491e              LDR      r1,|L32.388|
00010c  4630              MOV      r0,r6
00010e  f7fffffe          BL       strcat
000112  e01a              B        |L32.330|
                  |L32.276|
;;;458                 case 'c': strcat(bin,"1100"); break;
000114  491c              LDR      r1,|L32.392|
000116  4630              MOV      r0,r6
000118  f7fffffe          BL       strcat
00011c  e015              B        |L32.330|
                  |L32.286|
;;;459                 case 'd': strcat(bin,"1101"); break;
00011e  491b              LDR      r1,|L32.396|
000120  4630              MOV      r0,r6
000122  f7fffffe          BL       strcat
000126  e010              B        |L32.330|
000128  e00a              B        |L32.320|
00012a  e7ff              B        |L32.300|
                  |L32.300|
;;;460                 case 'e': strcat(bin,"1110"); break;
00012c  4918              LDR      r1,|L32.400|
00012e  4630              MOV      r0,r6
000130  f7fffffe          BL       strcat
000134  e009              B        |L32.330|
                  |L32.310|
;;;461                 case 'f': strcat(bin,"1111"); break;
000136  4917              LDR      r1,|L32.404|
000138  4630              MOV      r0,r6
00013a  f7fffffe          BL       strcat
00013e  e004              B        |L32.330|
                  |L32.320|
;;;462                 default:  printf("\nInvalid hexadecimal digit %c ",hex[cou]); 
000140  5d61              LDRB     r1,[r4,r5]
000142  4815              LDR      r0,|L32.408|
000144  f7fffffe          BL       __2printf
000148  bf00              NOP                            ;439
                  |L32.330|
00014a  bf00              NOP                            ;440
;;;463             }
;;;464             cou++;
00014c  1c6d              ADDS     r5,r5,#1
                  |L32.334|
00014e  5d60              LDRB     r0,[r4,r5]            ;438
000150  2800              CMP      r0,#0                 ;438
000152  d000              BEQ      |L32.342|
000154  e759              B        |L32.10|
                  |L32.342|
;;;465        }
;;;466    
;;;467    
;;;468    }
000156  bd70              POP      {r4-r6,pc}
;;;469    
                          ENDP

                  |L32.344|
                          DCD      ||.conststring||
                  |L32.348|
                          DCD      ||.conststring||+0x8
                  |L32.352|
                          DCD      ||.conststring||+0x10
                  |L32.356|
                          DCD      ||.conststring||+0x18
                  |L32.360|
                          DCD      ||.conststring||+0x20
                  |L32.364|
                          DCD      ||.conststring||+0x28
                  |L32.368|
                          DCD      ||.conststring||+0x30
                  |L32.372|
                          DCD      ||.conststring||+0x38
                  |L32.376|
                          DCD      ||.conststring||+0x40
                  |L32.380|
                          DCD      ||.conststring||+0x48
                  |L32.384|
                          DCD      ||.conststring||+0x50
                  |L32.388|
                          DCD      ||.conststring||+0x58
                  |L32.392|
                          DCD      ||.conststring||+0x60
                  |L32.396|
                          DCD      ||.conststring||+0x68
                  |L32.400|
                          DCD      ||.conststring||+0x70
                  |L32.404|
                          DCD      ||.conststring||+0x78
                  |L32.408|
                          DCD      ||.conststring||+0x80

                          AREA ||i.delay||, COMGROUP=delay, CODE, READONLY, ALIGN=2

                  delay PROC
;;;80     /*************************** delay*****************************************/
;;;81     __inline void delay(int32 delaytime)
000000  e00d              B        |L39.30|
                  |L39.2|
;;;82     {
;;;83      while(delaytime--)
;;;84         {for(i=2000;i>0;i--)
000002  217d              MOVS     r1,#0x7d
000004  0109              LSLS     r1,r1,#4
000006  4a08              LDR      r2,|L39.40|
000008  6011              STR      r1,[r2,#0]  ; i
00000a  e004              B        |L39.22|
                  |L39.12|
00000c  4906              LDR      r1,|L39.40|
00000e  6809              LDR      r1,[r1,#0]  ; i
000010  1e49              SUBS     r1,r1,#1
000012  4a05              LDR      r2,|L39.40|
000014  6011              STR      r1,[r2,#0]  ; i
                  |L39.22|
000016  4904              LDR      r1,|L39.40|
000018  6809              LDR      r1,[r1,#0]  ; i
00001a  2900              CMP      r1,#0
00001c  dcf6              BGT      |L39.12|
                  |L39.30|
00001e  4601              MOV      r1,r0                 ;83
000020  1e40              SUBS     r0,r0,#1              ;83
000022  2900              CMP      r1,#0                 ;83
000024  d1ed              BNE      |L39.2|
;;;85     			{	
;;;86     			}			// about 1 ms
;;;87         }
;;;88     }
000026  4770              BX       lr
;;;89      void delay2(int delaytime)
                          ENDP

                  |L39.40|
                          DCD      i

                          AREA ||i.send_OBD||, COMGROUP=send_OBD, CODE, READONLY, ALIGN=2

                  send_OBD PROC
;;;487    
;;;488    __inline void send_OBD(char* OBDstring)//, char *OBDresponseA, char* OBDresponseB, char* OBDresponseC, int32 OBDtimeout)
000000  b570              PUSH     {r4-r6,lr}
;;;489    {
000002  4605              MOV      r5,r0
;;;490    	unsigned char i20=0;
000004  2400              MOVS     r4,#0
;;;491    tout=0;
000006  2000              MOVS     r0,#0
000008  4914              LDR      r1,|L46.92|
00000a  6008              STR      r0,[r1,#0]  ; tout
;;;492    	//clearobd();
;;;493    		memset(uart_string_obd,0,3000);k23=0;
00000c  4914              LDR      r1,|L46.96|
00000e  4815              LDR      r0,|L46.100|
000010  f7fffffe          BL       __aeabi_memclr
000014  2000              MOVS     r0,#0
000016  4914              LDR      r1,|L46.104|
000018  6008              STR      r0,[r1,#0]  ; k23
;;;494    		for(i20=0;i20<strlen(OBDstring);i20++)
00001a  bf00              NOP      
00001c  e005              B        |L46.42|
                  |L46.30|
;;;495    		{
;;;496    			uart0_putchar(UART0_BASE_PTR, OBDstring[i20]);//clear();
00001e  5d29              LDRB     r1,[r5,r4]
000020  4812              LDR      r0,|L46.108|
000022  f7fffffe          BL       uart0_putchar
000026  1c60              ADDS     r0,r4,#1              ;494
000028  b2c4              UXTB     r4,r0                 ;494
                  |L46.42|
00002a  4628              MOV      r0,r5                 ;494
00002c  f7fffffe          BL       strlen
000030  42a0              CMP      r0,r4                 ;494
000032  d8f4              BHI      |L46.30|
;;;497    		}
;;;498    			uart0_putchar(UART0_BASE_PTR, '\r');	
000034  210d              MOVS     r1,#0xd
000036  480d              LDR      r0,|L46.108|
000038  f7fffffe          BL       uart0_putchar
;;;499    
;;;500    //	uart0_putchar(UART0_BASE_PTR, '\n');
;;;501    	delay(100);
00003c  2064              MOVS     r0,#0x64
00003e  f7fffffe          BL       delay
;;;502    	while(!(strstr(uart_string_obd,">") || (tout > 5)));
000042  bf00              NOP      
                  |L46.68|
000044  490a              LDR      r1,|L46.112|
000046  4807              LDR      r0,|L46.100|
000048  f7fffffe          BL       strstr
00004c  2800              CMP      r0,#0
00004e  d103              BNE      |L46.88|
000050  4802              LDR      r0,|L46.92|
000052  6800              LDR      r0,[r0,#0]  ; tout
000054  2805              CMP      r0,#5
000056  ddf5              BLE      |L46.68|
                  |L46.88|
;;;503    //	delay(2000);
;;;504    	//clearobd();
;;;505    
;;;506    }
000058  bd70              POP      {r4-r6,pc}
;;;507    
                          ENDP

00005a  0000              DCW      0x0000
                  |L46.92|
                          DCD      tout
                  |L46.96|
                          DCD      0x00000bb8
                  |L46.100|
                          DCD      uart_string_obd
                  |L46.104|
                          DCD      k23
                  |L46.108|
                          DCD      0x4006a000
                  |L46.112|
                          DCD      ||.conststring||+0xa0

                          AREA ||i.parse_g||, COMGROUP=parse_g, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;657    
;;;658    __inline void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;659    {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f0b              LDR      r7,[sp,#0x2c]
;;;660    
;;;661    		sz1=	strlen(str);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  493c              LDR      r1,|L53.260|
000014  6008              STR      r0,[r1,#0]  ; sz1
;;;662    		sz2=  strlen(string);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       strlen
00001c  493a              LDR      r1,|L53.264|
00001e  6008              STR      r0,[r1,#0]  ; sz2
;;;663    		memset(string,0,sz2);
000020  4608              MOV      r0,r1
000022  6801              LDR      r1,[r0,#0]  ; sz2
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_memclr
;;;664    		for(i11=0,temp11=0;i11<sz1;i11++)
00002a  2000              MOVS     r0,#0
00002c  4937              LDR      r1,|L53.268|
00002e  6008              STR      r0,[r1,#0]  ; i11
000030  4937              LDR      r1,|L53.272|
000032  6008              STR      r0,[r1,#0]  ; temp11
000034  e01a              B        |L53.108|
                  |L53.54|
;;;665    		{
;;;666    		if(str[i11]==s)
000036  4835              LDR      r0,|L53.268|
000038  6800              LDR      r0,[r0,#0]  ; i11
00003a  5c21              LDRB     r1,[r4,r0]
00003c  980a              LDR      r0,[sp,#0x28]
00003e  4281              CMP      r1,r0
000040  d108              BNE      |L53.84|
;;;667    			{temp11++;j11=i11;}
000042  4833              LDR      r0,|L53.272|
000044  6800              LDR      r0,[r0,#0]  ; temp11
000046  1c40              ADDS     r0,r0,#1
000048  4931              LDR      r1,|L53.272|
00004a  6008              STR      r0,[r1,#0]  ; temp11
00004c  482f              LDR      r0,|L53.268|
00004e  6800              LDR      r0,[r0,#0]  ; i11
000050  4930              LDR      r1,|L53.276|
000052  6008              STR      r0,[r1,#0]  ; j11
                  |L53.84|
;;;668    		else{}
;;;669    			
;;;670    		if(temp11>=sec){i11=9900;}
000054  482e              LDR      r0,|L53.272|
000056  6800              LDR      r0,[r0,#0]  ; temp11
000058  42b0              CMP      r0,r6
00005a  db02              BLT      |L53.98|
00005c  482e              LDR      r0,|L53.280|
00005e  492b              LDR      r1,|L53.268|
000060  6008              STR      r0,[r1,#0]  ; i11
                  |L53.98|
000062  482a              LDR      r0,|L53.268|
000064  6800              LDR      r0,[r0,#0]            ;664  ; i11
000066  1c40              ADDS     r0,r0,#1              ;664
000068  4928              LDR      r1,|L53.268|
00006a  6008              STR      r0,[r1,#0]            ;664  ; i11
                  |L53.108|
00006c  4827              LDR      r0,|L53.268|
00006e  6800              LDR      r0,[r0,#0]            ;664  ; i11
000070  4924              LDR      r1,|L53.260|
000072  6809              LDR      r1,[r1,#0]            ;664  ; sz1
000074  4288              CMP      r0,r1                 ;664
000076  dbde              BLT      |L53.54|
;;;671    		else{}	
;;;672    		
;;;673    		}	
;;;674    		
;;;675    		for(i11=0,temp11=0;i11<sz1;i11++)
000078  2000              MOVS     r0,#0
00007a  4924              LDR      r1,|L53.268|
00007c  6008              STR      r0,[r1,#0]  ; i11
00007e  4924              LDR      r1,|L53.272|
000080  6008              STR      r0,[r1,#0]  ; temp11
000082  e01a              B        |L53.186|
                  |L53.132|
;;;676    		{
;;;677    		if(str[i11]==f)
000084  4821              LDR      r0,|L53.268|
000086  6800              LDR      r0,[r0,#0]  ; i11
000088  5c21              LDRB     r1,[r4,r0]
00008a  9804              LDR      r0,[sp,#0x10]
00008c  4281              CMP      r1,r0
00008e  d108              BNE      |L53.162|
;;;678    			{temp11++;l=i11;}										
000090  481f              LDR      r0,|L53.272|
000092  6800              LDR      r0,[r0,#0]  ; temp11
000094  1c40              ADDS     r0,r0,#1
000096  491e              LDR      r1,|L53.272|
000098  6008              STR      r0,[r1,#0]  ; temp11
00009a  481c              LDR      r0,|L53.268|
00009c  6800              LDR      r0,[r0,#0]  ; i11
00009e  491f              LDR      r1,|L53.284|
0000a0  6008              STR      r0,[r1,#0]  ; l
                  |L53.162|
;;;679    		else{}
;;;680    		if(temp11>=first){i11=9900;}else{}
0000a2  481b              LDR      r0,|L53.272|
0000a4  6800              LDR      r0,[r0,#0]  ; temp11
0000a6  42a8              CMP      r0,r5
0000a8  db02              BLT      |L53.176|
0000aa  481b              LDR      r0,|L53.280|
0000ac  4917              LDR      r1,|L53.268|
0000ae  6008              STR      r0,[r1,#0]  ; i11
                  |L53.176|
0000b0  4816              LDR      r0,|L53.268|
0000b2  6800              LDR      r0,[r0,#0]            ;675  ; i11
0000b4  1c40              ADDS     r0,r0,#1              ;675
0000b6  4915              LDR      r1,|L53.268|
0000b8  6008              STR      r0,[r1,#0]            ;675  ; i11
                  |L53.186|
0000ba  4814              LDR      r0,|L53.268|
0000bc  6800              LDR      r0,[r0,#0]            ;675  ; i11
0000be  4911              LDR      r1,|L53.260|
0000c0  6809              LDR      r1,[r1,#0]            ;675  ; sz1
0000c2  4288              CMP      r0,r1                 ;675
0000c4  dbde              BLT      |L53.132|
;;;681    		}	
;;;682    		for(i11=0;i11<(j11-l-1);i11++)
0000c6  2000              MOVS     r0,#0
0000c8  4910              LDR      r1,|L53.268|
0000ca  6008              STR      r0,[r1,#0]  ; i11
0000cc  e00e              B        |L53.236|
                  |L53.206|
;;;683    		{
;;;684    		string[i11] = str[l+i11+1];
0000ce  4813              LDR      r0,|L53.284|
0000d0  6800              LDR      r0,[r0,#0]  ; l
0000d2  490e              LDR      r1,|L53.268|
0000d4  6809              LDR      r1,[r1,#0]  ; i11
0000d6  1840              ADDS     r0,r0,r1
0000d8  1c40              ADDS     r0,r0,#1
0000da  5c20              LDRB     r0,[r4,r0]
0000dc  490b              LDR      r1,|L53.268|
0000de  6809              LDR      r1,[r1,#0]  ; i11
0000e0  5478              STRB     r0,[r7,r1]
0000e2  480a              LDR      r0,|L53.268|
0000e4  6800              LDR      r0,[r0,#0]            ;682  ; i11
0000e6  1c40              ADDS     r0,r0,#1              ;682
0000e8  4908              LDR      r1,|L53.268|
0000ea  6008              STR      r0,[r1,#0]            ;682  ; i11
                  |L53.236|
0000ec  4809              LDR      r0,|L53.276|
0000ee  6800              LDR      r0,[r0,#0]            ;682  ; j11
0000f0  490a              LDR      r1,|L53.284|
0000f2  6809              LDR      r1,[r1,#0]            ;682  ; l
0000f4  1a40              SUBS     r0,r0,r1              ;682
0000f6  1e40              SUBS     r0,r0,#1              ;682
0000f8  4904              LDR      r1,|L53.268|
0000fa  6809              LDR      r1,[r1,#0]            ;682  ; i11
0000fc  4288              CMP      r0,r1                 ;682
0000fe  dce6              BGT      |L53.206|
;;;685    		}			
;;;686    	
;;;687    
;;;688    
;;;689    }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
;;;690    
                          ENDP

                  |L53.260|
                          DCD      ||sz1||
                  |L53.264|
                          DCD      ||sz2||
                  |L53.268|
                          DCD      i11
                  |L53.272|
                          DCD      temp11
                  |L53.276|
                          DCD      j11
                  |L53.280|
                          DCD      0x000026ac
                  |L53.284|
                          DCD      l

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;69     
;;;70     __inline void remove_all_chars(char* str, char c, char d) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;71         char *pr = str, *pw = str;
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
;;;72         while (*pr) {
00000a  e015              B        |L60.56|
                  |L60.12|
;;;73             *pw = *pr++;
00000c  780d              LDRB     r5,[r1,#0]
00000e  7005              STRB     r5,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
;;;74     			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
000012  7805              LDRB     r5,[r0,#0]
000014  42a5              CMP      r5,r4
000016  d00d              BEQ      |L60.52|
000018  7805              LDRB     r5,[r0,#0]
00001a  4295              CMP      r5,r2
00001c  d00a              BEQ      |L60.52|
00001e  7805              LDRB     r5,[r0,#0]
000020  2d20              CMP      r5,#0x20
000022  d007              BEQ      |L60.52|
000024  7805              LDRB     r5,[r0,#0]
000026  2d2f              CMP      r5,#0x2f
000028  d004              BEQ      |L60.52|
00002a  7805              LDRB     r5,[r0,#0]
00002c  2d3a              CMP      r5,#0x3a
00002e  d001              BEQ      |L60.52|
000030  2501              MOVS     r5,#1
000032  e000              B        |L60.54|
                  |L60.52|
000034  2500              MOVS     r5,#0
                  |L60.54|
000036  1828              ADDS     r0,r5,r0
                  |L60.56|
000038  780d              LDRB     r5,[r1,#0]            ;72
00003a  2d00              CMP      r5,#0                 ;72
00003c  d1e6              BNE      |L60.12|
;;;75         }
;;;76         *pw = '\0';
00003e  7005              STRB     r5,[r0,#0]
;;;77     }
000040  bd30              POP      {r4,r5,pc}
;;;78     
                          ENDP


                          AREA ||i.supportedpid||, COMGROUP=supportedpid, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_c
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  supportedpid PROC
;;;705    
;;;706    __inline void supportedpid(char command[5]){
000000  b5fe              PUSH     {r1-r7,lr}
000002  4604              MOV      r4,r0
;;;707    	char* lenghtchecker;
;;;708    	char commandtemp[3];
;;;709    	int supportedfori;int cmd;
;;;710    	int  i99, j99, len99,dec99;
;;;711    	int dec999 = 0;
000004  2600              MOVS     r6,#0
;;;712    	//delay(100);
;;;713    	send_OBD(command);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       send_OBD
;;;714    		memset(obdresp,0,20);
00000c  2114              MOVS     r1,#0x14
00000e  483a              LDR      r0,|L67.248|
000010  f7fffffe          BL       __aeabi_memclr
;;;715    		memset(tempobdresp,0,20);
000014  2114              MOVS     r1,#0x14
000016  4839              LDR      r0,|L67.252|
000018  f7fffffe          BL       __aeabi_memclr
;;;716    		memset(commandtemp,0,3);
00001c  2000              MOVS     r0,#0
00001e  9002              STR      r0,[sp,#8]
;;;717    		parse_g(uart_string_obd, 1, 2, '\r', '\r' ,tempobdresp);
000020  4836              LDR      r0,|L67.252|
000022  210d              MOVS     r1,#0xd
000024  460b              MOV      r3,r1
000026  2202              MOVS     r2,#2
000028  9100              STR      r1,[sp,#0]
00002a  9001              STR      r0,[sp,#4]
00002c  2101              MOVS     r1,#1
00002e  4834              LDR      r0,|L67.256|
000030  f7fffffe          BL       parse_g
;;;718    		remove_all_chars(tempobdresp,' ','\r');	
000034  220d              MOVS     r2,#0xd
000036  2120              MOVS     r1,#0x20
000038  4830              LDR      r0,|L67.252|
00003a  f7fffffe          BL       remove_all_chars
;;;719    		strcpy(obdresp, &tempobdresp[4]);
00003e  492f              LDR      r1,|L67.252|
000040  1d09              ADDS     r1,r1,#4
000042  482d              LDR      r0,|L67.248|
000044  f7fffffe          BL       strcpy
;;;720    		strcpy(commandtemp, &command[2]);
000048  1ca1              ADDS     r1,r4,#2
00004a  a802              ADD      r0,sp,#8
00004c  f7fffffe          BL       strcpy
;;;721    		memset(obdrespbinary,0,32);
000050  2120              MOVS     r1,#0x20
000052  482c              LDR      r0,|L67.260|
000054  f7fffffe          BL       __aeabi_memclr
;;;722    		hextobinary( obdresp,  obdrespbinary);
000058  492a              LDR      r1,|L67.260|
00005a  4827              LDR      r0,|L67.248|
00005c  f7fffffe          BL       hextobinary
;;;723    	//	remove_all_chars(command,'\r','\n');	
;;;724    		
;;;725    	
;;;726    	
;;;727    //		len99 = strlen(command);
;;;728    //		for(i99=0; i99<len99; i99++){
;;;729    //		dec99 = dec99 * 10 + ( command[i99] - '0' );
;;;730    //		}
;;;731    	
;;;732    		strcpy(obdresp, &tempobdresp[4]);	
000060  4926              LDR      r1,|L67.252|
000062  1d09              ADDS     r1,r1,#4
000064  4824              LDR      r0,|L67.248|
000066  f7fffffe          BL       strcpy
;;;733    		dec999=hextodecimal(commandtemp);					
00006a  a802              ADD      r0,sp,#8
00006c  f7fffffe          BL       hextodecimal
000070  4606              MOV      r6,r0
;;;734    	
;;;735    		for(supportedfori=0;supportedfori<32;supportedfori++)
000072  2500              MOVS     r5,#0
000074  e03d              B        |L67.242|
                  |L67.118|
;;;736    		{
;;;737    			if(obdrespbinary[supportedfori]=='1' && !strstr(tempobdresp,"NODATA") && !strstr(tempobdresp,"SEARCHING"))
000076  4823              LDR      r0,|L67.260|
000078  5d40              LDRB     r0,[r0,r5]
00007a  2831              CMP      r0,#0x31
00007c  d138              BNE      |L67.240|
00007e  4922              LDR      r1,|L67.264|
000080  481e              LDR      r0,|L67.252|
000082  f7fffffe          BL       strstr
000086  2800              CMP      r0,#0
000088  d132              BNE      |L67.240|
00008a  4920              LDR      r1,|L67.268|
00008c  481b              LDR      r0,|L67.252|
00008e  f7fffffe          BL       strstr
000092  2800              CMP      r0,#0
000094  d12c              BNE      |L67.240|
;;;738    				{
;;;739    
;;;740    					if(dec999+supportedfori+1<0x10){
000096  1970              ADDS     r0,r6,r5
000098  1c40              ADDS     r0,r0,#1
00009a  2810              CMP      r0,#0x10
00009c  da15              BGE      |L67.202|
;;;741    												sprintf(suppportedpid[pidcounter],"%c%c%c%x",command[0],command[1],command[2],dec999+supportedfori+1);
00009e  1970              ADDS     r0,r6,r5
0000a0  1c40              ADDS     r0,r0,#1
0000a2  78a1              LDRB     r1,[r4,#2]
0000a4  9100              STR      r1,[sp,#0]
0000a6  9001              STR      r0,[sp,#4]
0000a8  7863              LDRB     r3,[r4,#1]
0000aa  7822              LDRB     r2,[r4,#0]
0000ac  4918              LDR      r1,|L67.272|
0000ae  6809              LDR      r1,[r1,#0]  ; pidcounter
0000b0  00cf              LSLS     r7,r1,#3
0000b2  1a79              SUBS     r1,r7,r1
0000b4  4f17              LDR      r7,|L67.276|
0000b6  19c8              ADDS     r0,r1,r7
0000b8  4917              LDR      r1,|L67.280|
0000ba  f7fffffe          BL       __2sprintf
;;;742    												pidcounter++;
0000be  4814              LDR      r0,|L67.272|
0000c0  6800              LDR      r0,[r0,#0]  ; pidcounter
0000c2  1c40              ADDS     r0,r0,#1
0000c4  4912              LDR      r1,|L67.272|
0000c6  6008              STR      r0,[r1,#0]  ; pidcounter
0000c8  e012              B        |L67.240|
                  |L67.202|
;;;743    					}
;;;744    					else
;;;745    					{
;;;746    												sprintf(suppportedpid[pidcounter],"%c%c%x",command[0],command[1],dec999+supportedfori+1);
0000ca  1970              ADDS     r0,r6,r5
0000cc  1c40              ADDS     r0,r0,#1
0000ce  9000              STR      r0,[sp,#0]
0000d0  7863              LDRB     r3,[r4,#1]
0000d2  7822              LDRB     r2,[r4,#0]
0000d4  490e              LDR      r1,|L67.272|
0000d6  6809              LDR      r1,[r1,#0]  ; pidcounter
0000d8  00cf              LSLS     r7,r1,#3
0000da  1a79              SUBS     r1,r7,r1
0000dc  4f0d              LDR      r7,|L67.276|
0000de  19c8              ADDS     r0,r1,r7
0000e0  490e              LDR      r1,|L67.284|
0000e2  f7fffffe          BL       __2sprintf
;;;747    												pidcounter++;
0000e6  480a              LDR      r0,|L67.272|
0000e8  6800              LDR      r0,[r0,#0]  ; pidcounter
0000ea  1c40              ADDS     r0,r0,#1
0000ec  4908              LDR      r1,|L67.272|
0000ee  6008              STR      r0,[r1,#0]  ; pidcounter
                  |L67.240|
0000f0  1c6d              ADDS     r5,r5,#1              ;735
                  |L67.242|
0000f2  2d20              CMP      r5,#0x20              ;735
0000f4  dbbf              BLT      |L67.118|
;;;748    						
;;;749    					}
;;;750    
;;;751    				}
;;;752    		}
;;;753    }
0000f6  bdfe              POP      {r1-r7,pc}
;;;9      //#include "accelerometer.c"
                          ENDP

                  |L67.248|
                          DCD      obdresp
                  |L67.252|
                          DCD      tempobdresp
                  |L67.256|
                          DCD      uart_string_obd
                  |L67.260|
                          DCD      obdrespbinary
                  |L67.264|
                          DCD      ||.conststring||+0xa4
                  |L67.268|
                          DCD      ||.conststring||+0xac
                  |L67.272|
                          DCD      pidcounter
                  |L67.276|
                          DCD      suppportedpid
                  |L67.280|
                          DCD      ||.conststring||+0xb8
                  |L67.284|
                          DCD      ||.conststring||+0xc4

                          AREA ||i.GPS_Collect||, COMGROUP=GPS_Collect, CODE, READONLY, ALIGN=2

                  GPS_Collect PROC
;;;117    
;;;118    __inline void GPS_Collect(){
000000  b51c              PUSH     {r2-r4,lr}
;;;119    	
;;;120    	
;;;121    memset(fuelstr,0,5);
000002  2105              MOVS     r1,#5
000004  488a              LDR      r0,|L74.560|
000006  f7fffffe          BL       __aeabi_memclr4
;;;122    memset(gga,0,100);
00000a  2164              MOVS     r1,#0x64
00000c  4889              LDR      r0,|L74.564|
00000e  f7fffffe          BL       __aeabi_memclr
;;;123    memset(rmc,0,100);	
000012  2164              MOVS     r1,#0x64
000014  4888              LDR      r0,|L74.568|
000016  f7fffffe          BL       __aeabi_memclr
;;;124    
;;;125    	
;;;126    	send_GSM("\n\nAT+QGNSSC=1\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
00001a  200a              MOVS     r0,#0xa
00001c  4b87              LDR      r3,|L74.572|
00001e  4a88              LDR      r2,|L74.576|
000020  4988              LDR      r1,|L74.580|
000022  9000              STR      r0,[sp,#0]
000024  4888              LDR      r0,|L74.584|
000026  f7fffffe          BL       send_GSM
;;;127    
;;;128    memset(suppportedpid, 0, sizeof(char)*100*7);
00002a  21af              MOVS     r1,#0xaf
00002c  0089              LSLS     r1,r1,#2
00002e  4887              LDR      r0,|L74.588|
000030  f7fffffe          BL       __aeabi_memclr
;;;129    	
;;;130    pidcounter=0;
000034  2000              MOVS     r0,#0
000036  4986              LDR      r1,|L74.592|
000038  6008              STR      r0,[r1,#0]  ; pidcounter
;;;131    
;;;132    supportedpid("0100");
00003a  4886              LDR      r0,|L74.596|
00003c  f7fffffe          BL       supportedpid
;;;133    if(!(strstr(uart_string_obd,"UNABLE") || strstr(uart_string_obd,"NO DATA")))
000040  4985              LDR      r1,|L74.600|
000042  4886              LDR      r0,|L74.604|
000044  f7fffffe          BL       strstr
000048  2800              CMP      r0,#0
00004a  d159              BNE      |L74.256|
00004c  4984              LDR      r1,|L74.608|
00004e  4883              LDR      r0,|L74.604|
000050  f7fffffe          BL       strstr
000054  2800              CMP      r0,#0
000056  d153              BNE      |L74.256|
;;;134    {	
;;;135    pidcounter=0;
000058  497d              LDR      r1,|L74.592|
00005a  6008              STR      r0,[r1,#0]  ; pidcounter
;;;136    
;;;137    //supportedpid("0100");
;;;138    supportedpid("0100");
00005c  487d              LDR      r0,|L74.596|
00005e  f7fffffe          BL       supportedpid
;;;139    supportedpid("0120");
000062  4880              LDR      r0,|L74.612|
000064  f7fffffe          BL       supportedpid
;;;140    //supportedpid("0120");
;;;141    supportedpid("0140");
000068  487f              LDR      r0,|L74.616|
00006a  f7fffffe          BL       supportedpid
;;;142    //supportedpid("0140");
;;;143    supportedpid("0160");
00006e  487f              LDR      r0,|L74.620|
000070  f7fffffe          BL       supportedpid
;;;144    //supportedpid("0160");
;;;145    supportedpid("0180");
000074  487e              LDR      r0,|L74.624|
000076  f7fffffe          BL       supportedpid
;;;146    //supportedpid("0180");
;;;147    supportedpid("01A0");
00007a  487e              LDR      r0,|L74.628|
00007c  f7fffffe          BL       supportedpid
;;;148    //supportedpid("01A0");
;;;149    supportedpid("01C0");
000080  487d              LDR      r0,|L74.632|
000082  f7fffffe          BL       supportedpid
;;;150    //supportedpid("01C0");
;;;151    supportedpid("050100");
000086  487d              LDR      r0,|L74.636|
000088  f7fffffe          BL       supportedpid
;;;152    //supportedpid("050100");
;;;153    supportedpid("0900");	
00008c  487c              LDR      r0,|L74.640|
00008e  f7fffffe          BL       supportedpid
;;;154    //supportedpid("0900");	
;;;155    	//send_GSM("\n\nAT+QGNSSRD?\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
;;;156    	
;;;157    
;;;158    		
;;;159    	send_GSM("\n\nAT+QGNSSRD=\"NMEA/RMC\"\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
000092  200a              MOVS     r0,#0xa
000094  4b69              LDR      r3,|L74.572|
000096  4a6a              LDR      r2,|L74.576|
000098  496a              LDR      r1,|L74.580|
00009a  9000              STR      r0,[sp,#0]
00009c  4879              LDR      r0,|L74.644|
00009e  f7fffffe          BL       send_GSM
;;;160    		parse_g(uart_string_gsm, 1, 3, '$', '\r' ,rmc);
0000a2  4865              LDR      r0,|L74.568|
0000a4  210d              MOVS     r1,#0xd
0000a6  2324              MOVS     r3,#0x24
0000a8  2203              MOVS     r2,#3
0000aa  9100              STR      r1,[sp,#0]
0000ac  9001              STR      r0,[sp,#4]
0000ae  2101              MOVS     r1,#1
0000b0  4875              LDR      r0,|L74.648|
0000b2  f7fffffe          BL       parse_g
;;;161    		stateCount++; 
0000b6  4875              LDR      r0,|L74.652|
0000b8  7800              LDRB     r0,[r0,#0]  ; stateCount
0000ba  1c40              ADDS     r0,r0,#1
0000bc  4973              LDR      r1,|L74.652|
0000be  7008              STRB     r0,[r1,#0]
;;;162    		if(stateCount>5){stateCount =0;}
0000c0  4608              MOV      r0,r1
0000c2  7800              LDRB     r0,[r0,#0]  ; stateCount
0000c4  2805              CMP      r0,#5
0000c6  dd01              BLE      |L74.204|
0000c8  2000              MOVS     r0,#0
0000ca  7008              STRB     r0,[r1,#0]
                  |L74.204|
;;;163    		LED_state2();			
0000cc  f7fffffe          BL       LED_state2
;;;164    		//delay(200);
;;;165    		send_GSM("\n\nAT+QGNSSRD=\"NMEA/GGA\"\r\n","OK\r\n","ERROR\r\n","ERROR:",10);  
0000d0  200a              MOVS     r0,#0xa
0000d2  4b5a              LDR      r3,|L74.572|
0000d4  4a5a              LDR      r2,|L74.576|
0000d6  495b              LDR      r1,|L74.580|
0000d8  9000              STR      r0,[sp,#0]
0000da  486d              LDR      r0,|L74.656|
0000dc  f7fffffe          BL       send_GSM
;;;166    		parse_g(uart_string_gsm, 1, 3, '$', '\r' ,gga);
0000e0  4854              LDR      r0,|L74.564|
0000e2  210d              MOVS     r1,#0xd
0000e4  2324              MOVS     r3,#0x24
0000e6  2203              MOVS     r2,#3
0000e8  9100              STR      r1,[sp,#0]
0000ea  9001              STR      r0,[sp,#4]
0000ec  2101              MOVS     r1,#1
0000ee  4866              LDR      r0,|L74.648|
0000f0  f7fffffe          BL       parse_g
;;;167    		stateCount++; 
0000f4  4865              LDR      r0,|L74.652|
0000f6  7800              LDRB     r0,[r0,#0]  ; stateCount
0000f8  1c40              ADDS     r0,r0,#1
0000fa  4964              LDR      r1,|L74.652|
0000fc  7008              STRB     r0,[r1,#0]
0000fe  e006              B        |L74.270|
                  |L74.256|
;;;168    	}
;;;169    else{
;;;170    	strcat(gga,"ALIVE");
000100  4964              LDR      r1,|L74.660|
000102  484c              LDR      r0,|L74.564|
000104  f7fffffe          BL       strcat
;;;171    	delay(5000);
000108  4863              LDR      r0,|L74.664|
00010a  f7fffffe          BL       delay
                  |L74.270|
;;;172    }
;;;173    		send_OBD("ATRV\r\n");
00010e  4863              LDR      r0,|L74.668|
000110  f7fffffe          BL       send_OBD
;;;174    		parse_g(uart_string_obd, 1, 2, '\r', '\r' ,fuelstr);	
000114  4846              LDR      r0,|L74.560|
000116  210d              MOVS     r1,#0xd
000118  460b              MOV      r3,r1
00011a  2202              MOVS     r2,#2
00011c  9100              STR      r1,[sp,#0]
00011e  9001              STR      r0,[sp,#4]
000120  2101              MOVS     r1,#1
000122  484e              LDR      r0,|L74.604|
000124  f7fffffe          BL       parse_g
;;;175    		
;;;176    		if(stateCount>5){stateCount =0;}
000128  4858              LDR      r0,|L74.652|
00012a  7800              LDRB     r0,[r0,#0]  ; stateCount
00012c  2805              CMP      r0,#5
00012e  dd02              BLE      |L74.310|
000130  2000              MOVS     r0,#0
000132  4956              LDR      r1,|L74.652|
000134  7008              STRB     r0,[r1,#0]
                  |L74.310|
;;;177    		LED_state2();			
000136  f7fffffe          BL       LED_state2
;;;178    
;;;179    	
;;;180    		strcat(data,imei);
00013a  4959              LDR      r1,|L74.672|
00013c  4859              LDR      r0,|L74.676|
00013e  f7fffffe          BL       strcat
;;;181    		strcat(data,",");	
000142  4959              LDR      r1,|L74.680|
000144  4857              LDR      r0,|L74.676|
000146  f7fffffe          BL       strcat
;;;182    		strcat(data,"$");	
00014a  4958              LDR      r1,|L74.684|
00014c  4855              LDR      r0,|L74.676|
00014e  f7fffffe          BL       strcat
;;;183    		strcat(data,gga);
000152  4938              LDR      r1,|L74.564|
000154  4853              LDR      r0,|L74.676|
000156  f7fffffe          BL       strcat
;;;184    		strcat(data,",$");	
00015a  4955              LDR      r1,|L74.688|
00015c  4851              LDR      r0,|L74.676|
00015e  f7fffffe          BL       strcat
;;;185    		strcat(data,rmc);	
000162  4935              LDR      r1,|L74.568|
000164  484f              LDR      r0,|L74.676|
000166  f7fffffe          BL       strcat
;;;186    		strcat(data,",");	
00016a  494f              LDR      r1,|L74.680|
00016c  484d              LDR      r0,|L74.676|
00016e  f7fffffe          BL       strcat
;;;187    		strcat(data,num2);
000172  4950              LDR      r1,|L74.692|
000174  484b              LDR      r0,|L74.676|
000176  f7fffffe          BL       strcat
;;;188    		strcat(data,fuelstr);			
00017a  492d              LDR      r1,|L74.560|
00017c  4849              LDR      r0,|L74.676|
00017e  f7fffffe          BL       strcat
;;;189    
;;;190    //		sprintf(fuelstr,"\n");//%c%c%c%c%c%c%c",0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1a);
;;;191    		pidcounter=0;
000182  2000              MOVS     r0,#0
000184  4932              LDR      r1,|L74.592|
000186  6008              STR      r0,[r1,#0]  ; pidcounter
;;;192    		while(strlen(suppportedpid[pidcounter])>3)
000188  e042              B        |L74.528|
                  |L74.394|
;;;193    		{
;;;194    				strcat(data,",");
00018a  4947              LDR      r1,|L74.680|
00018c  4845              LDR      r0,|L74.676|
00018e  f7fffffe          BL       strcat
;;;195    				send_OBD(suppportedpid[pidcounter]);
000192  492f              LDR      r1,|L74.592|
000194  6809              LDR      r1,[r1,#0]  ; pidcounter
000196  00ca              LSLS     r2,r1,#3
000198  1a51              SUBS     r1,r2,r1
00019a  4a2c              LDR      r2,|L74.588|
00019c  1888              ADDS     r0,r1,r2
00019e  f7fffffe          BL       send_OBD
;;;196    				memset(obdresp,0,20);
0001a2  2114              MOVS     r1,#0x14
0001a4  4844              LDR      r0,|L74.696|
0001a6  f7fffffe          BL       __aeabi_memclr
;;;197    				memset(tempobdresp,0,20);
0001aa  2114              MOVS     r1,#0x14
0001ac  4843              LDR      r0,|L74.700|
0001ae  f7fffffe          BL       __aeabi_memclr
;;;198    				parse_g(uart_string_obd, 1, 2, '\r', '\r' ,tempobdresp);
0001b2  4842              LDR      r0,|L74.700|
0001b4  210d              MOVS     r1,#0xd
0001b6  460b              MOV      r3,r1
0001b8  2202              MOVS     r2,#2
0001ba  9100              STR      r1,[sp,#0]
0001bc  9001              STR      r0,[sp,#4]
0001be  2101              MOVS     r1,#1
0001c0  4826              LDR      r0,|L74.604|
0001c2  f7fffffe          BL       parse_g
;;;199    				remove_all_chars(suppportedpid[pidcounter], '\r', '\n');
0001c6  4922              LDR      r1,|L74.592|
0001c8  6809              LDR      r1,[r1,#0]  ; pidcounter
0001ca  00ca              LSLS     r2,r1,#3
0001cc  1a51              SUBS     r1,r2,r1
0001ce  4a1f              LDR      r2,|L74.588|
0001d0  1888              ADDS     r0,r1,r2
0001d2  220a              MOVS     r2,#0xa
0001d4  210d              MOVS     r1,#0xd
0001d6  f7fffffe          BL       remove_all_chars
;;;200    				remove_all_chars(tempobdresp, '\r', ' ');
0001da  2220              MOVS     r2,#0x20
0001dc  210d              MOVS     r1,#0xd
0001de  4837              LDR      r0,|L74.700|
0001e0  f7fffffe          BL       remove_all_chars
;;;201    				strcat(data,suppportedpid[pidcounter]);
0001e4  481a              LDR      r0,|L74.592|
0001e6  6800              LDR      r0,[r0,#0]  ; pidcounter
0001e8  00c2              LSLS     r2,r0,#3
0001ea  1a10              SUBS     r0,r2,r0
0001ec  4a17              LDR      r2,|L74.588|
0001ee  1881              ADDS     r1,r0,r2
0001f0  482c              LDR      r0,|L74.676|
0001f2  f7fffffe          BL       strcat
;;;202    				strcat(data,"=");
0001f6  4932              LDR      r1,|L74.704|
0001f8  482a              LDR      r0,|L74.676|
0001fa  f7fffffe          BL       strcat
;;;203    				strcat(data,tempobdresp);
0001fe  492f              LDR      r1,|L74.700|
000200  4828              LDR      r0,|L74.676|
000202  f7fffffe          BL       strcat
;;;204    				
;;;205    				pidcounter++;
000206  4812              LDR      r0,|L74.592|
000208  6800              LDR      r0,[r0,#0]  ; pidcounter
00020a  1c40              ADDS     r0,r0,#1
00020c  4910              LDR      r1,|L74.592|
00020e  6008              STR      r0,[r1,#0]  ; pidcounter
                  |L74.528|
000210  490f              LDR      r1,|L74.592|
000212  6809              LDR      r1,[r1,#0]            ;192  ; pidcounter
000214  00ca              LSLS     r2,r1,#3              ;192
000216  1a51              SUBS     r1,r2,r1              ;192
000218  4a0c              LDR      r2,|L74.588|
00021a  1888              ADDS     r0,r1,r2              ;192
00021c  f7fffffe          BL       strlen
000220  2803              CMP      r0,#3                 ;192
000222  d8b2              BHI      |L74.394|
;;;206    		}
;;;207    		strcat(data,",<>\n");		
000224  4927              LDR      r1,|L74.708|
000226  481f              LDR      r0,|L74.676|
000228  f7fffffe          BL       strcat
;;;208    }
00022c  bd1c              POP      {r2-r4,pc}
;;;209    
                          ENDP

00022e  0000              DCW      0x0000
                  |L74.560|
                          DCD      fuelstr
                  |L74.564|
                          DCD      gga
                  |L74.568|
                          DCD      ||rmc||
                  |L74.572|
                          DCD      ||.conststring||+0xcc
                  |L74.576|
                          DCD      ||.conststring||+0xd4
                  |L74.580|
                          DCD      ||.conststring||+0xdc
                  |L74.584|
                          DCD      ||.conststring||+0xe4
                  |L74.588|
                          DCD      suppportedpid
                  |L74.592|
                          DCD      pidcounter
                  |L74.596|
                          DCD      ||.conststring||+0x20
                  |L74.600|
                          DCD      ||.conststring||+0xf4
                  |L74.604|
                          DCD      uart_string_obd
                  |L74.608|
                          DCD      ||.conststring||+0xfc
                  |L74.612|
                          DCD      ||.conststring||+0x104
                  |L74.616|
                          DCD      ||.conststring||+0x10c
                  |L74.620|
                          DCD      ||.conststring||+0x114
                  |L74.624|
                          DCD      ||.conststring||+0x11c
                  |L74.628|
                          DCD      ||.conststring||+0x124
                  |L74.632|
                          DCD      ||.conststring||+0x12c
                  |L74.636|
                          DCD      ||.conststring||+0x134
                  |L74.640|
                          DCD      ||.conststring||+0x13c
                  |L74.644|
                          DCD      ||.conststring||+0x144
                  |L74.648|
                          DCD      uart_string_gsm
                  |L74.652|
                          DCD      stateCount
                  |L74.656|
                          DCD      ||.conststring||+0x160
                  |L74.660|
                          DCD      ||.conststring||+0x17c
                  |L74.664|
                          DCD      0x00001388
                  |L74.668|
                          DCD      ||.conststring||+0x184
                  |L74.672|
                          DCD      imei
                  |L74.676|
                          DCD      data
                  |L74.680|
                          DCD      ||.conststring||+0x18c
                  |L74.684|
                          DCD      ||.conststring||+0x190
                  |L74.688|
                          DCD      ||.conststring||+0x194
                  |L74.692|
                          DCD      num2
                  |L74.696|
                          DCD      obdresp
                  |L74.700|
                          DCD      tempobdresp
                  |L74.704|
                          DCD      ||.conststring||+0x198
                  |L74.708|
                          DCD      ||.conststring||+0x19c

                          AREA ||i.send_GSM||, COMGROUP=send_GSM, CODE, READONLY, ALIGN=1

                  send_GSM PROC
;;;509    
;;;510    __inline void send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b510              PUSH     {r4,lr}
;;;511    {	 
000002  9c02              LDR      r4,[sp,#8]
;;;512    
;;;513    //							//uart_putchar(UART1_BASE_PTR,0xA);
;;;514    //							//uart_putchar(UART1_BASE_PTR,0x1A);
;;;515    //							clear();
;;;516    //							tout=0;
;;;517    //							//	qwe=strlen(uart_string_gsm);
;;;518    //							memset(uart_string_gsm,0,5000);
;;;519    //							k2=0;									//string array counter for uart 1
;;;520    //							//timer counts to wait for characters in uart 1 
;;;521    //							clear();
;;;522    //							send_modem(string);
;;;523    //							uart_putchar(UART1_BASE_PTR,'\n');	uart_putchar(UART1_BASE_PTR,'\n');	
;;;524    //							delay(10);
;;;525    //							//	uart_putchar(UART1_BASE_PTR,'\r');
;;;526    //							//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;527    //							do
;;;528    //							{
;;;529    
;;;530    //							//					time111--;
;;;531    //							//				  timeout222--;
;;;532    
;;;533    
;;;534    //							cond122=strstr(uart_string_gsm, responseA);
;;;535    //							cond123=strstr(uart_string_gsm, responseB);
;;;536    //							cond124=strstr(uart_string_gsm, responseC);
;;;537    //							cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
;;;538    
;;;539    //							}while (!cond121);
;;;540    //							clear();
;;;541    //							if(tout>timeout){
;;;542    //							uart_putchar(UART1_BASE_PTR,'\r');
;;;543    //							uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
;;;544    //							uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
;;;545    //							uart_putchar(UART1_BASE_PTR,'\n');}
;;;546    //							//return;
;;;547    //							//		return uart_string_gsm;
;;;548    
;;;549    
;;;550    
;;;551    
;;;552    }
000004  bd10              POP      {r4,pc}
;;;553    
                          ENDP


                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L87.24|
                  |L87.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L87.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L87.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REV16|
#line 441 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_vts_ver2_c_tout____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REVSH|
#line 456
|__asm___10_vts_ver2_c_tout____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
