; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -IF:\vts-ver18\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_SD PROC
;;;54     
;;;55     void send_SD(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;56     {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;57     	clear();
00000c  f7fffffe          BL       clear
;;;58     	tout=0;
000010  2000              MOVS     r0,#0
000012  49fd              LDR      r1,|L1.1032|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;59     		memset(uart_string_gsm,0,5000);
000016  49fd              LDR      r1,|L1.1036|
000018  48fd              LDR      r0,|L1.1040|
00001a  f7fffffe          BL       __aeabi_memclr
;;;60     		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  49fc              LDR      r1,|L1.1044|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;61     		clear();
000024  f7fffffe          BL       clear
;;;62     		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;63     		
;;;64     		delay(10);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       delay
;;;65     		uart_putchar(UART1_BASE_PTR,'\r');//uart_putchar(UART1_BASE_PTR,'\r');
000034  210d              MOVS     r1,#0xd
000036  48f8              LDR      r0,|L1.1048|
000038  f7fffffe          BL       uart_putchar
;;;66     	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;67     		do
00003c  bf00              NOP      
                  |L1.62|
;;;68     		{
;;;69     			
;;;70     //					time111--;
;;;71     //				  timeout222--;
;;;72     
;;;73     			
;;;74     	cond122=strstr(uart_string_gsm, responseA);
00003e  48f4              LDR      r0,|L1.1040|
000040  9902              LDR      r1,[sp,#8]
000042  f7fffffe          BL       strstr
000046  49f5              LDR      r1,|L1.1052|
000048  6008              STR      r0,[r1,#0]  ; cond122
;;;75     	cond123=strstr(uart_string_gsm, responseB);
00004a  4621              MOV      r1,r4
00004c  48f0              LDR      r0,|L1.1040|
00004e  f7fffffe          BL       strstr
000052  49f3              LDR      r1,|L1.1056|
000054  6008              STR      r0,[r1,#0]  ; cond123
;;;76       cond124=strstr(uart_string_gsm, responseC);
000056  4629              MOV      r1,r5
000058  48ed              LDR      r0,|L1.1040|
00005a  f7fffffe          BL       strstr
00005e  49f1              LDR      r1,|L1.1060|
000060  6008              STR      r0,[r1,#0]  ; cond124
;;;77     	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
000062  48ee              LDR      r0,|L1.1052|
000064  6800              LDR      r0,[r0,#0]  ; cond122
000066  2800              CMP      r0,#0
000068  d10b              BNE      |L1.130|
00006a  48ed              LDR      r0,|L1.1056|
00006c  6800              LDR      r0,[r0,#0]  ; cond123
00006e  2800              CMP      r0,#0
000070  d107              BNE      |L1.130|
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]  ; cond124
000076  2800              CMP      r0,#0
000078  d103              BNE      |L1.130|
00007a  48e3              LDR      r0,|L1.1032|
00007c  6800              LDR      r0,[r0,#0]  ; tout
00007e  42b0              CMP      r0,r6
000080  dd01              BLE      |L1.134|
                  |L1.130|
000082  2001              MOVS     r0,#1
000084  e000              B        |L1.136|
                  |L1.134|
000086  2000              MOVS     r0,#0
                  |L1.136|
000088  49e7              LDR      r1,|L1.1064|
00008a  7008              STRB     r0,[r1,#0]
;;;78     			
;;;79     		}while (!cond121);
00008c  4608              MOV      r0,r1
00008e  7800              LDRB     r0,[r0,#0]  ; cond121
000090  2800              CMP      r0,#0
000092  d0d4              BEQ      |L1.62|
;;;80     		clear();
000094  f7fffffe          BL       clear
;;;81     		if(tout>timeout){
000098  48db              LDR      r0,|L1.1032|
00009a  6800              LDR      r0,[r0,#0]  ; tout
00009c  42b0              CMP      r0,r6
00009e  dd17              BLE      |L1.208|
;;;82     			uart_putchar(UART1_BASE_PTR,'\r');
0000a0  210d              MOVS     r1,#0xd
0000a2  48dd              LDR      r0,|L1.1048|
0000a4  f7fffffe          BL       uart_putchar
;;;83     		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000a8  210a              MOVS     r1,#0xa
0000aa  48db              LDR      r0,|L1.1048|
0000ac  f7fffffe          BL       uart_putchar
0000b0  211a              MOVS     r1,#0x1a
0000b2  48d9              LDR      r0,|L1.1048|
0000b4  f7fffffe          BL       uart_putchar
;;;84     		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000b8  211a              MOVS     r1,#0x1a
0000ba  48d7              LDR      r0,|L1.1048|
0000bc  f7fffffe          BL       uart_putchar
0000c0  210d              MOVS     r1,#0xd
0000c2  48d5              LDR      r0,|L1.1048|
0000c4  f7fffffe          BL       uart_putchar
;;;85     		uart_putchar(UART1_BASE_PTR,'\n');}
0000c8  210a              MOVS     r1,#0xa
0000ca  48d3              LDR      r0,|L1.1048|
0000cc  f7fffffe          BL       uart_putchar
                  |L1.208|
;;;86     		//return;
;;;87     //		return uart_string_gsm;
;;;88     
;;;89     }
0000d0  b005              ADD      sp,sp,#0x14
0000d2  bdf0              POP      {r4-r7,pc}
;;;90     
                          ENDP

                  mystrstr PROC
;;;59     
;;;60     char mystrstr(char* str1, char character)
0000d4  b570              PUSH     {r4-r6,lr}
;;;61     {
0000d6  4604              MOV      r4,r0
0000d8  460d              MOV      r5,r1
;;;62     	sz=strlen(str1);
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       strlen
0000e0  49d2              LDR      r1,|L1.1068|
0000e2  6008              STR      r0,[r1,#0]  ; sz
;;;63     	for(cn=0;cn<=sz;cn++)
0000e4  2000              MOVS     r0,#0
0000e6  49d2              LDR      r1,|L1.1072|
0000e8  6008              STR      r0,[r1,#0]  ; cn
0000ea  e00b              B        |L1.260|
                  |L1.236|
;;;64     	{if(str1[cn] == character)
0000ec  48d0              LDR      r0,|L1.1072|
0000ee  6800              LDR      r0,[r0,#0]  ; cn
0000f0  5c20              LDRB     r0,[r4,r0]
0000f2  42a8              CMP      r0,r5
0000f4  d101              BNE      |L1.250|
;;;65     		{return 1;}
0000f6  2001              MOVS     r0,#1
                  |L1.248|
;;;66     	}
;;;67     	return 0;
;;;68     }
0000f8  bd70              POP      {r4-r6,pc}
                  |L1.250|
0000fa  48cd              LDR      r0,|L1.1072|
0000fc  6800              LDR      r0,[r0,#0]            ;63  ; cn
0000fe  1c40              ADDS     r0,r0,#1              ;63
000100  49cb              LDR      r1,|L1.1072|
000102  6008              STR      r0,[r1,#0]            ;63  ; cn
                  |L1.260|
000104  48ca              LDR      r0,|L1.1072|
000106  6800              LDR      r0,[r0,#0]            ;63  ; cn
000108  49c8              LDR      r1,|L1.1068|
00010a  6809              LDR      r1,[r1,#0]            ;63  ; sz
00010c  4288              CMP      r0,r1                 ;63
00010e  dded              BLE      |L1.236|
000110  2000              MOVS     r0,#0                 ;67
000112  e7f1              B        |L1.248|
;;;69     
                          ENDP

                  LED_state2 PROC
;;;240    
;;;241    void LED_state2(void)
000114  b500              PUSH     {lr}
;;;242    {
;;;243    if(sleep_flag == 1)
000116  48c7              LDR      r0,|L1.1076|
000118  6800              LDR      r0,[r0,#0]  ; sleep_flag
00011a  2801              CMP      r0,#1
00011c  d102              BNE      |L1.292|
;;;244    {stateCount=99;
00011e  2063              MOVS     r0,#0x63
000120  49c5              LDR      r1,|L1.1080|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;245    }	
;;;246    			
;;;247    	switch(stateCount){
000124  48c4              LDR      r0,|L1.1080|
000126  7800              LDRB     r0,[r0,#0]  ; stateCount
000128  0003              MOVS     r3,r0
00012a  f7fffffe          BL       __ARM_common_switch8
00012e  0604              DCB      0x06,0x04
000130  0f1a2530          DCB      0x0f,0x1a,0x25,0x30
000134  3b46              DCB      0x3b,0x46
;;;248    	
;;;249    
;;;250                case 0:     //Red
;;;251                       RED_ON;
000136  2001              MOVS     r0,#1
000138  0740              LSLS     r0,r0,#29
00013a  49c0              LDR      r1,|L1.1084|
00013c  6088              STR      r0,[r1,#8]
;;;252                       GREEN_OFF;
00013e  0080              LSLS     r0,r0,#2
000140  6048              STR      r0,[r1,#4]
;;;253                       BLUE_OFF;
000142  2020              MOVS     r0,#0x20
000144  49bd              LDR      r1,|L1.1084|
000146  3940              SUBS     r1,r1,#0x40
000148  6048              STR      r0,[r1,#4]
;;;254                       break;
00014a  e044              B        |L1.470|
;;;255    
;;;256                case 1:	//Yellow
;;;257    		               RED_ON;
00014c  2001              MOVS     r0,#1
00014e  0740              LSLS     r0,r0,#29
000150  49ba              LDR      r1,|L1.1084|
000152  6088              STR      r0,[r1,#8]
;;;258    		               GREEN_ON;
000154  0080              LSLS     r0,r0,#2
000156  6088              STR      r0,[r1,#8]
;;;259    		               BLUE_OFF;
000158  2020              MOVS     r0,#0x20
00015a  49b8              LDR      r1,|L1.1084|
00015c  3940              SUBS     r1,r1,#0x40
00015e  6048              STR      r0,[r1,#4]
;;;260    		               break;
000160  e039              B        |L1.470|
;;;261    				
;;;262                case 2:	//Green
;;;263    		               RED_OFF;
000162  2001              MOVS     r0,#1
000164  0740              LSLS     r0,r0,#29
000166  49b5              LDR      r1,|L1.1084|
000168  6048              STR      r0,[r1,#4]
;;;264    		               GREEN_ON;
00016a  0080              LSLS     r0,r0,#2
00016c  6088              STR      r0,[r1,#8]
;;;265    		               BLUE_OFF;
00016e  2020              MOVS     r0,#0x20
000170  49b2              LDR      r1,|L1.1084|
000172  3940              SUBS     r1,r1,#0x40
000174  6048              STR      r0,[r1,#4]
;;;266    		               break;
000176  e02e              B        |L1.470|
;;;267    				
;;;268                case 3:	//Blue
;;;269    		               RED_OFF;
000178  2001              MOVS     r0,#1
00017a  0740              LSLS     r0,r0,#29
00017c  49af              LDR      r1,|L1.1084|
00017e  6048              STR      r0,[r1,#4]
;;;270    		               GREEN_OFF;
000180  0080              LSLS     r0,r0,#2
000182  6048              STR      r0,[r1,#4]
;;;271    		               BLUE_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L1.1084|
000188  3940              SUBS     r1,r1,#0x40
00018a  6088              STR      r0,[r1,#8]
;;;272    		               break;
00018c  e023              B        |L1.470|
;;;273    				
;;;274                case 4:	//Violet
;;;275    		               RED_ON;
00018e  2001              MOVS     r0,#1
000190  0740              LSLS     r0,r0,#29
000192  49aa              LDR      r1,|L1.1084|
000194  6088              STR      r0,[r1,#8]
;;;276    		               GREEN_OFF;
000196  0080              LSLS     r0,r0,#2
000198  6048              STR      r0,[r1,#4]
;;;277    		               BLUE_ON;
00019a  2020              MOVS     r0,#0x20
00019c  49a7              LDR      r1,|L1.1084|
00019e  3940              SUBS     r1,r1,#0x40
0001a0  6088              STR      r0,[r1,#8]
;;;278    		               break;
0001a2  e018              B        |L1.470|
;;;279    				
;;;280                case 5:	//White
;;;281    		              RED_ON;
0001a4  2001              MOVS     r0,#1
0001a6  0740              LSLS     r0,r0,#29
0001a8  49a4              LDR      r1,|L1.1084|
0001aa  6088              STR      r0,[r1,#8]
;;;282    		              GREEN_ON;
0001ac  0080              LSLS     r0,r0,#2
0001ae  6088              STR      r0,[r1,#8]
;;;283    		              BLUE_ON;
0001b0  2020              MOVS     r0,#0x20
0001b2  49a2              LDR      r1,|L1.1084|
0001b4  3940              SUBS     r1,r1,#0x40
0001b6  6088              STR      r0,[r1,#8]
;;;284    		              break;
0001b8  e00d              B        |L1.470|
;;;285    				
;;;286                default:	//Red
;;;287    
;;;288    		              RED_OFF;
0001ba  2001              MOVS     r0,#1
0001bc  0740              LSLS     r0,r0,#29
0001be  499f              LDR      r1,|L1.1084|
0001c0  6048              STR      r0,[r1,#4]
;;;289    		              GREEN_OFF;
0001c2  0080              LSLS     r0,r0,#2
0001c4  6048              STR      r0,[r1,#4]
;;;290    		              BLUE_OFF;
0001c6  2020              MOVS     r0,#0x20
0001c8  499c              LDR      r1,|L1.1084|
0001ca  3940              SUBS     r1,r1,#0x40
0001cc  6048              STR      r0,[r1,#4]
;;;291    		              stateCount = 0;	//Reset state counter
0001ce  2000              MOVS     r0,#0
0001d0  4999              LDR      r1,|L1.1080|
0001d2  7008              STRB     r0,[r1,#0]
;;;292    			      break;
0001d4  bf00              NOP      
                  |L1.470|
0001d6  bf00              NOP                            ;254
;;;293    
;;;294        }
;;;295    	
;;;296    }
0001d8  bd00              POP      {pc}
;;;297    
                          ENDP

                  parse_gsm PROC
;;;1572   
;;;1573   void parse_gsm(char *str, int first, int sec, char *string)
0001da  b5f8              PUSH     {r3-r7,lr}
;;;1574   {
0001dc  4604              MOV      r4,r0
0001de  460e              MOV      r6,r1
0001e0  4617              MOV      r7,r2
0001e2  461d              MOV      r5,r3
;;;1575   
;;;1576   		delay(10);		
0001e4  200a              MOVS     r0,#0xa
0001e6  f7fffffe          BL       delay
;;;1577   		memset(string,0,15);
0001ea  210f              MOVS     r1,#0xf
0001ec  4628              MOV      r0,r5
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1578   		for(i11=0,temp11=0;i11<100;i11++)
0001f2  2000              MOVS     r0,#0
0001f4  4992              LDR      r1,|L1.1088|
0001f6  6008              STR      r0,[r1,#0]  ; i11
0001f8  4992              LDR      r1,|L1.1092|
0001fa  6008              STR      r0,[r1,#0]  ; temp11
0001fc  e01a              B        |L1.564|
                  |L1.510|
;;;1579   		{
;;;1580   		if(str[i11]=='"')
0001fe  4890              LDR      r0,|L1.1088|
000200  6800              LDR      r0,[r0,#0]  ; i11
000202  5c20              LDRB     r0,[r4,r0]
000204  2822              CMP      r0,#0x22
000206  d108              BNE      |L1.538|
;;;1581   			{temp11++;j11=i11;}
000208  488e              LDR      r0,|L1.1092|
00020a  6800              LDR      r0,[r0,#0]  ; temp11
00020c  1c40              ADDS     r0,r0,#1
00020e  498d              LDR      r1,|L1.1092|
000210  6008              STR      r0,[r1,#0]  ; temp11
000212  488b              LDR      r0,|L1.1088|
000214  6800              LDR      r0,[r0,#0]  ; i11
000216  498c              LDR      r1,|L1.1096|
000218  6008              STR      r0,[r1,#0]  ; j11
                  |L1.538|
;;;1582   		else{}
;;;1583   			
;;;1584   		if(temp11>=sec){i11=900;}
00021a  488a              LDR      r0,|L1.1092|
00021c  6800              LDR      r0,[r0,#0]  ; temp11
00021e  42b8              CMP      r0,r7
000220  db03              BLT      |L1.554|
000222  20e1              MOVS     r0,#0xe1
000224  0080              LSLS     r0,r0,#2
000226  4986              LDR      r1,|L1.1088|
000228  6008              STR      r0,[r1,#0]  ; i11
                  |L1.554|
00022a  4885              LDR      r0,|L1.1088|
00022c  6800              LDR      r0,[r0,#0]            ;1578  ; i11
00022e  1c40              ADDS     r0,r0,#1              ;1578
000230  4983              LDR      r1,|L1.1088|
000232  6008              STR      r0,[r1,#0]            ;1578  ; i11
                  |L1.564|
000234  4882              LDR      r0,|L1.1088|
000236  6800              LDR      r0,[r0,#0]            ;1578  ; i11
000238  2864              CMP      r0,#0x64              ;1578
00023a  dbe0              BLT      |L1.510|
;;;1585   		else{}	
;;;1586   		
;;;1587   		}	
;;;1588   		
;;;1589   		for(i11=0,temp11=0;i11<100;i11++)
00023c  2000              MOVS     r0,#0
00023e  4980              LDR      r1,|L1.1088|
000240  6008              STR      r0,[r1,#0]  ; i11
000242  4980              LDR      r1,|L1.1092|
000244  6008              STR      r0,[r1,#0]  ; temp11
000246  e01a              B        |L1.638|
                  |L1.584|
;;;1590   		{
;;;1591   		if(str[i11]=='"')
000248  487d              LDR      r0,|L1.1088|
00024a  6800              LDR      r0,[r0,#0]  ; i11
00024c  5c20              LDRB     r0,[r4,r0]
00024e  2822              CMP      r0,#0x22
000250  d108              BNE      |L1.612|
;;;1592   			{temp11++;l=i11;}										
000252  487c              LDR      r0,|L1.1092|
000254  6800              LDR      r0,[r0,#0]  ; temp11
000256  1c40              ADDS     r0,r0,#1
000258  497a              LDR      r1,|L1.1092|
00025a  6008              STR      r0,[r1,#0]  ; temp11
00025c  4878              LDR      r0,|L1.1088|
00025e  6800              LDR      r0,[r0,#0]  ; i11
000260  497a              LDR      r1,|L1.1100|
000262  6008              STR      r0,[r1,#0]  ; l
                  |L1.612|
;;;1593   		else{}
;;;1594   		if(temp11>=first){i11=900;}else{}
000264  4877              LDR      r0,|L1.1092|
000266  6800              LDR      r0,[r0,#0]  ; temp11
000268  42b0              CMP      r0,r6
00026a  db03              BLT      |L1.628|
00026c  20e1              MOVS     r0,#0xe1
00026e  0080              LSLS     r0,r0,#2
000270  4973              LDR      r1,|L1.1088|
000272  6008              STR      r0,[r1,#0]  ; i11
                  |L1.628|
000274  4872              LDR      r0,|L1.1088|
000276  6800              LDR      r0,[r0,#0]            ;1589  ; i11
000278  1c40              ADDS     r0,r0,#1              ;1589
00027a  4971              LDR      r1,|L1.1088|
00027c  6008              STR      r0,[r1,#0]            ;1589  ; i11
                  |L1.638|
00027e  4870              LDR      r0,|L1.1088|
000280  6800              LDR      r0,[r0,#0]            ;1589  ; i11
000282  2864              CMP      r0,#0x64              ;1589
000284  dbe0              BLT      |L1.584|
;;;1595   		}	
;;;1596   		for(i11=0;i11<(j11-l-1);i11++)
000286  2000              MOVS     r0,#0
000288  496d              LDR      r1,|L1.1088|
00028a  6008              STR      r0,[r1,#0]  ; i11
00028c  e00e              B        |L1.684|
                  |L1.654|
;;;1597   		{
;;;1598   		string[i11] = str[l+i11+1];
00028e  486f              LDR      r0,|L1.1100|
000290  6800              LDR      r0,[r0,#0]  ; l
000292  496b              LDR      r1,|L1.1088|
000294  6809              LDR      r1,[r1,#0]  ; i11
000296  1840              ADDS     r0,r0,r1
000298  1c40              ADDS     r0,r0,#1
00029a  5c20              LDRB     r0,[r4,r0]
00029c  4968              LDR      r1,|L1.1088|
00029e  6809              LDR      r1,[r1,#0]  ; i11
0002a0  5468              STRB     r0,[r5,r1]
0002a2  4867              LDR      r0,|L1.1088|
0002a4  6800              LDR      r0,[r0,#0]            ;1596  ; i11
0002a6  1c40              ADDS     r0,r0,#1              ;1596
0002a8  4965              LDR      r1,|L1.1088|
0002aa  6008              STR      r0,[r1,#0]            ;1596  ; i11
                  |L1.684|
0002ac  4866              LDR      r0,|L1.1096|
0002ae  6800              LDR      r0,[r0,#0]            ;1596  ; j11
0002b0  4966              LDR      r1,|L1.1100|
0002b2  6809              LDR      r1,[r1,#0]            ;1596  ; l
0002b4  1a40              SUBS     r0,r0,r1              ;1596
0002b6  1e40              SUBS     r0,r0,#1              ;1596
0002b8  4961              LDR      r1,|L1.1088|
0002ba  6809              LDR      r1,[r1,#0]            ;1596  ; i11
0002bc  4288              CMP      r0,r1                 ;1596
0002be  dce6              BGT      |L1.654|
;;;1599   		}			
;;;1600   	
;;;1601   
;;;1602   }
0002c0  bdf8              POP      {r3-r7,pc}
;;;1603   
                          ENDP

                  cursor_val PROC
;;;1753   
;;;1754   int cursor_val(char * stringsd, int cur){
0002c2  b5f8              PUSH     {r3-r7,lr}
0002c4  4605              MOV      r5,r0
0002c6  460e              MOV      r6,r1
;;;1755   int curinc=0,curcounter=0,cur2=0;
0002c8  2400              MOVS     r4,#0
0002ca  2700              MOVS     r7,#0
0002cc  2000              MOVS     r0,#0
0002ce  9000              STR      r0,[sp,#0]
;;;1756   for(curinc=0;curinc<strlen(stringsd);curinc++){
0002d0  bf00              NOP      
0002d2  e007              B        |L1.740|
                  |L1.724|
;;;1757   		
;;;1758   		if(stringsd[curinc] == '\n'     &&    curcounter < cur   ){ //&& curcounter<=cur	){
0002d4  5d28              LDRB     r0,[r5,r4]
0002d6  280a              CMP      r0,#0xa
0002d8  d103              BNE      |L1.738|
0002da  42b7              CMP      r7,r6
0002dc  da01              BGE      |L1.738|
;;;1759   			++curcounter;     cur2=curinc;
0002de  1c7f              ADDS     r7,r7,#1
0002e0  9400              STR      r4,[sp,#0]
                  |L1.738|
0002e2  1c64              ADDS     r4,r4,#1              ;1756
                  |L1.740|
0002e4  4628              MOV      r0,r5                 ;1756
0002e6  f7fffffe          BL       strlen
0002ea  42a0              CMP      r0,r4                 ;1756
0002ec  d8f2              BHI      |L1.724|
;;;1760   		}
;;;1761   
;;;1762   		
;;;1763   
;;;1764   }
;;;1765   	
;;;1766   	
;;;1767   	return cur2;
0002ee  9800              LDR      r0,[sp,#0]
;;;1768   
;;;1769   }
0002f0  bdf8              POP      {r3-r7,pc}
;;;1770   
                          ENDP

                  count_char PROC
;;;1734   }
;;;1735   int count_char(char ch,char* string)
0002f2  b570              PUSH     {r4-r6,lr}
;;;1736   {count=0;
0002f4  4605              MOV      r5,r0
0002f6  460c              MOV      r4,r1
0002f8  2000              MOVS     r0,#0
0002fa  4955              LDR      r1,|L1.1104|
0002fc  6008              STR      r0,[r1,#0]  ; count
;;;1737   
;;;1738   	//remove_all_chars(string,'\0','\0');
;;;1739   //	ass=strlen(string);
;;;1740   	for(ass=0;ass<strlen(string);ass++)
0002fe  4955              LDR      r1,|L1.1108|
000300  6008              STR      r0,[r1,#0]  ; ass
000302  e00e              B        |L1.802|
                  |L1.772|
;;;1741   	{
;;;1742   		if(string[ass] == ch)
000304  4853              LDR      r0,|L1.1108|
000306  6800              LDR      r0,[r0,#0]  ; ass
000308  5c20              LDRB     r0,[r4,r0]
00030a  42a8              CMP      r0,r5
00030c  d104              BNE      |L1.792|
;;;1743   		{count++;}
00030e  4850              LDR      r0,|L1.1104|
000310  6800              LDR      r0,[r0,#0]  ; count
000312  1c40              ADDS     r0,r0,#1
000314  494e              LDR      r1,|L1.1104|
000316  6008              STR      r0,[r1,#0]  ; count
                  |L1.792|
000318  484e              LDR      r0,|L1.1108|
00031a  6800              LDR      r0,[r0,#0]            ;1740  ; ass
00031c  1c40              ADDS     r0,r0,#1              ;1740
00031e  494d              LDR      r1,|L1.1108|
000320  6008              STR      r0,[r1,#0]            ;1740  ; ass
                  |L1.802|
000322  4620              MOV      r0,r4                 ;1740
000324  f7fffffe          BL       strlen
000328  494a              LDR      r1,|L1.1108|
00032a  6809              LDR      r1,[r1,#0]            ;1740  ; ass
00032c  4288              CMP      r0,r1                 ;1740
00032e  d8e9              BHI      |L1.772|
;;;1744   		
;;;1745   	}
;;;1746   return count;
000330  4847              LDR      r0,|L1.1104|
000332  6800              LDR      r0,[r0,#0]  ; count
;;;1747   }
000334  bd70              POP      {r4-r6,pc}
;;;1748   
                          ENDP

                  send_tcp PROC
;;;93     
;;;94     void send_tcp()
000336  b538              PUSH     {r3-r5,lr}
;;;95     {	
;;;96     memset(stcond1,0,strlen(stcond1));	
000338  4847              LDR      r0,|L1.1112|
00033a  6800              LDR      r0,[r0,#0]  ; stcond1
00033c  f7fffffe          BL       strlen
000340  4604              MOV      r4,r0
000342  4621              MOV      r1,r4
000344  4844              LDR      r0,|L1.1112|
000346  6800              LDR      r0,[r0,#0]  ; stcond1
000348  f7fffffe          BL       __aeabi_memclr
;;;97     memset(con1d,0,strlen(con1d));	
00034c  4843              LDR      r0,|L1.1116|
00034e  6800              LDR      r0,[r0,#0]  ; con1d
000350  f7fffffe          BL       strlen
000354  4604              MOV      r4,r0
000356  4621              MOV      r1,r4
000358  4840              LDR      r0,|L1.1116|
00035a  6800              LDR      r0,[r0,#0]  ; con1d
00035c  f7fffffe          BL       __aeabi_memclr
;;;98     								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;99     
;;;100    								cond=mystrstr(uart_string_gsm,'>');
000360  213e              MOVS     r1,#0x3e
000362  482b              LDR      r0,|L1.1040|
000364  f7fffffe          BL       mystrstr
000368  493d              LDR      r1,|L1.1120|
00036a  7008              STRB     r0,[r1,#0]
;;;101    								if(cond)	
00036c  4608              MOV      r0,r1
00036e  7800              LDRB     r0,[r0,#0]  ; cond
000370  2800              CMP      r0,#0
000372  d048              BEQ      |L1.1030|
;;;102    								{
;;;103    									
;;;104    									clear();
000374  f7fffffe          BL       clear
;;;105    									memset(uart_string_gsm,0,5000);
000378  4924              LDR      r1,|L1.1036|
00037a  4825              LDR      r0,|L1.1040|
00037c  f7fffffe          BL       __aeabi_memclr
;;;106    									strcat(data,"\n\n");
000380  a138              ADR      r1,|L1.1124|
000382  4839              LDR      r0,|L1.1128|
000384  f7fffffe          BL       strcat
;;;107    									len=strlen(data);
000388  4837              LDR      r0,|L1.1128|
00038a  f7fffffe          BL       strlen
00038e  4937              LDR      r1,|L1.1132|
000390  6008              STR      r0,[r1,#0]  ; len
;;;108    									tout=0;
000392  2000              MOVS     r0,#0
000394  491c              LDR      r1,|L1.1032|
000396  6008              STR      r0,[r1,#0]  ; tout
;;;109    									k2=0;
000398  491e              LDR      r1,|L1.1044|
00039a  6008              STR      r0,[r1,#0]  ; k2
;;;110    									for(k=0;k<len;k++)
00039c  4934              LDR      r1,|L1.1136|
00039e  6008              STR      r0,[r1,#0]  ; k
0003a0  e00b              B        |L1.954|
                  |L1.930|
;;;111    									{
;;;112    										uart_putchar(UART1_BASE_PTR, data[k]);
0003a2  4831              LDR      r0,|L1.1128|
0003a4  4a32              LDR      r2,|L1.1136|
0003a6  6812              LDR      r2,[r2,#0]  ; k
0003a8  5c81              LDRB     r1,[r0,r2]
0003aa  481b              LDR      r0,|L1.1048|
0003ac  f7fffffe          BL       uart_putchar
0003b0  482f              LDR      r0,|L1.1136|
0003b2  6800              LDR      r0,[r0,#0]            ;110  ; k
0003b4  1c40              ADDS     r0,r0,#1              ;110
0003b6  492e              LDR      r1,|L1.1136|
0003b8  6008              STR      r0,[r1,#0]            ;110  ; k
                  |L1.954|
0003ba  482d              LDR      r0,|L1.1136|
0003bc  6800              LDR      r0,[r0,#0]            ;110  ; k
0003be  492b              LDR      r1,|L1.1132|
0003c0  6809              LDR      r1,[r1,#0]            ;110  ; len
0003c2  4288              CMP      r0,r1                 ;110
0003c4  dbed              BLT      |L1.930|
;;;113    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0003c6  210a              MOVS     r1,#0xa
0003c8  4813              LDR      r0,|L1.1048|
0003ca  f7fffffe          BL       uart_putchar
0003ce  211a              MOVS     r1,#0x1a
0003d0  4811              LDR      r0,|L1.1048|
0003d2  f7fffffe          BL       uart_putchar
0003d6  211a              MOVS     r1,#0x1a
0003d8  480f              LDR      r0,|L1.1048|
0003da  f7fffffe          BL       uart_putchar
0003de  211a              MOVS     r1,#0x1a
0003e0  480d              LDR      r0,|L1.1048|
0003e2  f7fffffe          BL       uart_putchar
0003e6  211a              MOVS     r1,#0x1a
0003e8  480b              LDR      r0,|L1.1048|
0003ea  f7fffffe          BL       uart_putchar
0003ee  211a              MOVS     r1,#0x1a
0003f0  4809              LDR      r0,|L1.1048|
0003f2  f7fffffe          BL       uart_putchar
;;;114    									do
0003f6  bf00              NOP      
                  |L1.1016|
;;;115    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0003f8  a11e              ADR      r1,|L1.1140|
0003fa  4805              LDR      r0,|L1.1040|
0003fc  f7fffffe          BL       strstr
000400  4915              LDR      r1,|L1.1112|
000402  6008              STR      r0,[r1,#0]  ; stcond1
;;;116    																	stcond2=strstr(uart_string_gsm, "ERROR");
000404  e03a              B        |L1.1148|
                  |L1.1030|
000406  e083              B        |L1.1296|
                  |L1.1032|
                          DCD      tout
                  |L1.1036|
                          DCD      0x00001388
                  |L1.1040|
                          DCD      uart_string_gsm
                  |L1.1044|
                          DCD      ||k2||
                  |L1.1048|
                          DCD      0x4006b000
                  |L1.1052|
                          DCD      cond122
                  |L1.1056|
                          DCD      cond123
                  |L1.1060|
                          DCD      cond124
                  |L1.1064|
                          DCD      cond121
                  |L1.1068|
                          DCD      ||sz||
                  |L1.1072|
                          DCD      ||cn||
                  |L1.1076|
                          DCD      sleep_flag
                  |L1.1080|
                          DCD      stateCount
                  |L1.1084|
                          DCD      0x400ff100
                  |L1.1088|
                          DCD      i11
                  |L1.1092|
                          DCD      temp11
                  |L1.1096|
                          DCD      j11
                  |L1.1100|
                          DCD      l
                  |L1.1104|
                          DCD      count
                  |L1.1108|
                          DCD      ass
                  |L1.1112|
                          DCD      stcond1
                  |L1.1116|
                          DCD      con1d
                  |L1.1120|
                          DCD      cond
                  |L1.1124|
000464  0a0a00            DCB      "\n\n",0
000467  00                DCB      0
                  |L1.1128|
                          DCD      data
                  |L1.1132|
                          DCD      len
                  |L1.1136|
                          DCD      k
                  |L1.1140|
000474  53454e44          DCB      "SEND OK",0
000478  204f4b00
                  |L1.1148|
00047c  a1fc              ADR      r1,|L1.2160|
00047e  48fe              LDR      r0,|L1.2168|
000480  f7fffffe          BL       strstr
000484  49fd              LDR      r1,|L1.2172|
000486  6008              STR      r0,[r1,#0]  ; stcond2
;;;117    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000488  a1fd              ADR      r1,|L1.2176|
00048a  48fb              LDR      r0,|L1.2168|
00048c  f7fffffe          BL       strstr
000490  49fd              LDR      r1,|L1.2184|
000492  6008              STR      r0,[r1,#0]  ; stcond3
;;;118    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000494  a1fd              ADR      r1,|L1.2188|
000496  48f8              LDR      r0,|L1.2168|
000498  f7fffffe          BL       strstr
00049c  49fd              LDR      r1,|L1.2196|
00049e  6008              STR      r0,[r1,#0]  ; stcond4
;;;119    																	
;;;120    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
0004a0  48f6              LDR      r0,|L1.2172|
0004a2  6800              LDR      r0,[r0,#0]  ; stcond2
0004a4  2800              CMP      r0,#0
0004a6  d10f              BNE      |L1.1224|
0004a8  48f7              LDR      r0,|L1.2184|
0004aa  6800              LDR      r0,[r0,#0]  ; stcond3
0004ac  2800              CMP      r0,#0
0004ae  d10b              BNE      |L1.1224|
0004b0  4608              MOV      r0,r1
0004b2  6800              LDR      r0,[r0,#0]  ; stcond4
0004b4  2800              CMP      r0,#0
0004b6  d107              BNE      |L1.1224|
0004b8  48f7              LDR      r0,|L1.2200|
0004ba  6800              LDR      r0,[r0,#0]  ; stcond1
0004bc  2800              CMP      r0,#0
0004be  d103              BNE      |L1.1224|
0004c0  48f6              LDR      r0,|L1.2204|
0004c2  6800              LDR      r0,[r0,#0]  ; tout
0004c4  2805              CMP      r0,#5
0004c6  dd97              BLE      |L1.1016|
                  |L1.1224|
;;;121    																//delay(10);clear();
;;;122    														uart_putchar(UART1_BASE_PTR,0x1A);
0004c8  211a              MOVS     r1,#0x1a
0004ca  48f5              LDR      r0,|L1.2208|
0004cc  f7fffffe          BL       uart_putchar
;;;123    												//delay(10);
;;;124    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0004d0  211a              MOVS     r1,#0x1a
0004d2  48f3              LDR      r0,|L1.2208|
0004d4  f7fffffe          BL       uart_putchar
0004d8  211a              MOVS     r1,#0x1a
0004da  48f1              LDR      r0,|L1.2208|
0004dc  f7fffffe          BL       uart_putchar
0004e0  211a              MOVS     r1,#0x1a
0004e2  48ef              LDR      r0,|L1.2208|
0004e4  f7fffffe          BL       uart_putchar
;;;125    						
;;;126    									
;;;127    									
;;;128    									
;;;129    									if(flagch==1){		int_erval=temp;flagch=0;	}
0004e8  48ee              LDR      r0,|L1.2212|
0004ea  6800              LDR      r0,[r0,#0]  ; flagch
0004ec  2801              CMP      r0,#1
0004ee  d106              BNE      |L1.1278|
0004f0  48ed              LDR      r0,|L1.2216|
0004f2  6800              LDR      r0,[r0,#0]  ; temp
0004f4  49ed              LDR      r1,|L1.2220|
0004f6  6008              STR      r0,[r1,#0]  ; int_erval
0004f8  2000              MOVS     r0,#0
0004fa  49ea              LDR      r1,|L1.2212|
0004fc  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.1278|
;;;130    									
;;;131    									
;;;132    									
;;;133    
;;;134    //									for(k=0;k<len;k++)
;;;135    //									{
;;;136    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;137    //									}
;;;138    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;139    
;;;140    //									
;;;141    //													k2=0;									//string array counter for uart 1
;;;142    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;143    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;144    //																{
;;;145    //																	timeout--;
;;;146    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;147    //
;;;148    									delay(20);															
0004fe  2014              MOVS     r0,#0x14
000500  f7fffffe          BL       delay
;;;149    stcond1=strstr(uart_string_gsm,"SEND OK"); 
000504  49ea              LDR      r1,|L1.2224|
000506  48dc              LDR      r0,|L1.2168|
000508  f7fffffe          BL       strstr
00050c  49e2              LDR      r1,|L1.2200|
00050e  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.1296|
;;;150    
;;;151    								}
;;;152    
;;;153      //checks for send ok
;;;154    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
000510  48e1              LDR      r0,|L1.2200|
000512  6800              LDR      r0,[r0,#0]  ; stcond1
000514  2800              CMP      r0,#0
000516  d001              BEQ      |L1.1308|
000518  f000ff87          BL       |L1.5162|
                  |L1.1308|
;;;155    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00051c  211a              MOVS     r1,#0x1a
00051e  48e0              LDR      r0,|L1.2208|
000520  f7fffffe          BL       uart_putchar
000524  f7fffffe          BL       clear
000528  200a              MOVS     r0,#0xa
00052a  f7fffffe          BL       delay
;;;156    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00052e  211a              MOVS     r1,#0x1a
000530  48db              LDR      r0,|L1.2208|
000532  f7fffffe          BL       uart_putchar
000536  f7fffffe          BL       clear
00053a  200a              MOVS     r0,#0xa
00053c  f7fffffe          BL       delay
;;;157    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000540  211a              MOVS     r1,#0x1a
000542  48d7              LDR      r0,|L1.2208|
000544  f7fffffe          BL       uart_putchar
000548  f7fffffe          BL       clear
00054c  200a              MOVS     r0,#0xa
00054e  f7fffffe          BL       delay
;;;158    							remove_all_chars(data, '\n', '\n');
000552  220a              MOVS     r2,#0xa
000554  4611              MOV      r1,r2
000556  48d7              LDR      r0,|L1.2228|
000558  f7fffffe          BL       remove_all_chars
;;;159    	
;;;160    		strcat(data,"CH\n");	
00055c  a1d6              ADR      r1,|L1.2232|
00055e  48d5              LDR      r0,|L1.2228|
000560  f7fffffe          BL       strcat
;;;161    		
;;;162    	
;;;163    	delay(100);
000564  2064              MOVS     r0,#0x64
000566  f7fffffe          BL       delay
;;;164    		clear();//memset(uart_string_gsm,0,5000);
00056a  f7fffffe          BL       clear
;;;165    	
;;;166    	memset(at_,0,100);
00056e  2164              MOVS     r1,#0x64
000570  48d2              LDR      r0,|L1.2236|
000572  f7fffffe          BL       __aeabi_memclr
;;;167    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000576  48cf              LDR      r0,|L1.2228|
000578  f7fffffe          BL       strlen
00057c  1c44              ADDS     r4,r0,#1
00057e  4623              MOV      r3,r4
000580  4acf              LDR      r2,|L1.2240|
000582  a1d0              ADR      r1,|L1.2244|
000584  48cd              LDR      r0,|L1.2236|
000586  f7fffffe          BL       __2sprintf
;;;168    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00058a  2005              MOVS     r0,#5
00058c  a3b8              ADR      r3,|L1.2160|
00058e  a2d6              ADR      r2,|L1.2280|
000590  a1d7              ADR      r1,|L1.2288|
000592  9000              STR      r0,[sp,#0]
000594  48c9              LDR      r0,|L1.2236|
000596  f7fffffe          BL       send_SD
;;;169    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;170    //	if(strstr(uart_string_gsm,"ERROR")){
;;;171    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;172    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;173    //	}
;;;174    	
;;;175    clear();	
00059a  f7fffffe          BL       clear
;;;176    									k2=0;									//string array counter for uart 1
00059e  2000              MOVS     r0,#0
0005a0  49d4              LDR      r1,|L1.2292|
0005a2  6008              STR      r0,[r1,#0]  ; k2
;;;177    									tout=0;	
0005a4  49bd              LDR      r1,|L1.2204|
0005a6  6008              STR      r0,[r1,#0]  ; tout
;;;178    		for(k=0;k<strlen(data);k++)
0005a8  49d3              LDR      r1,|L1.2296|
0005aa  6008              STR      r0,[r1,#0]  ; k
0005ac  e00b              B        |L1.1478|
                  |L1.1454|
;;;179    		{
;;;180    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0005ae  48c1              LDR      r0,|L1.2228|
0005b0  4ad1              LDR      r2,|L1.2296|
0005b2  6812              LDR      r2,[r2,#0]  ; k
0005b4  5c81              LDRB     r1,[r0,r2]
0005b6  48ba              LDR      r0,|L1.2208|
0005b8  f7fffffe          BL       uart_putchar
0005bc  48ce              LDR      r0,|L1.2296|
0005be  6800              LDR      r0,[r0,#0]            ;178  ; k
0005c0  1c40              ADDS     r0,r0,#1              ;178
0005c2  49cd              LDR      r1,|L1.2296|
0005c4  6008              STR      r0,[r1,#0]            ;178  ; k
                  |L1.1478|
0005c6  48bb              LDR      r0,|L1.2228|
0005c8  f7fffffe          BL       strlen
0005cc  49ca              LDR      r1,|L1.2296|
0005ce  6809              LDR      r1,[r1,#0]            ;178  ; k
0005d0  4288              CMP      r0,r1                 ;178
0005d2  d8ec              BHI      |L1.1454|
;;;181    		}	
;;;182    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0005d4  210a              MOVS     r1,#0xa
0005d6  48b2              LDR      r0,|L1.2208|
0005d8  f7fffffe          BL       uart_putchar
0005dc  210a              MOVS     r1,#0xa
0005de  48b0              LDR      r0,|L1.2208|
0005e0  f7fffffe          BL       uart_putchar
0005e4  210a              MOVS     r1,#0xa
0005e6  48ae              LDR      r0,|L1.2208|
0005e8  f7fffffe          BL       uart_putchar
0005ec  210a              MOVS     r1,#0xa
0005ee  48ac              LDR      r0,|L1.2208|
0005f0  f7fffffe          BL       uart_putchar
0005f4  210a              MOVS     r1,#0xa
0005f6  48aa              LDR      r0,|L1.2208|
0005f8  f7fffffe          BL       uart_putchar
0005fc  210a              MOVS     r1,#0xa
0005fe  48a8              LDR      r0,|L1.2208|
000600  f7fffffe          BL       uart_putchar
000604  210a              MOVS     r1,#0xa
000606  48a6              LDR      r0,|L1.2208|
000608  f7fffffe          BL       uart_putchar
00060c  210a              MOVS     r1,#0xa
00060e  48a4              LDR      r0,|L1.2208|
000610  f7fffffe          BL       uart_putchar
000614  210a              MOVS     r1,#0xa
000616  48a2              LDR      r0,|L1.2208|
000618  f7fffffe          BL       uart_putchar
00061c  210a              MOVS     r1,#0xa
00061e  48a0              LDR      r0,|L1.2208|
000620  f7fffffe          BL       uart_putchar
000624  210a              MOVS     r1,#0xa
000626  489e              LDR      r0,|L1.2208|
000628  f7fffffe          BL       uart_putchar
00062c  210a              MOVS     r1,#0xa
00062e  489c              LDR      r0,|L1.2208|
000630  f7fffffe          BL       uart_putchar
000634  210a              MOVS     r1,#0xa
000636  489a              LDR      r0,|L1.2208|
000638  f7fffffe          BL       uart_putchar
00063c  210a              MOVS     r1,#0xa
00063e  4898              LDR      r0,|L1.2208|
000640  f7fffffe          BL       uart_putchar
000644  210a              MOVS     r1,#0xa
000646  4896              LDR      r0,|L1.2208|
000648  f7fffffe          BL       uart_putchar
00064c  210a              MOVS     r1,#0xa
00064e  4894              LDR      r0,|L1.2208|
000650  f7fffffe          BL       uart_putchar
000654  210a              MOVS     r1,#0xa
000656  4892              LDR      r0,|L1.2208|
000658  f7fffffe          BL       uart_putchar
00065c  210a              MOVS     r1,#0xa
00065e  4890              LDR      r0,|L1.2208|
000660  f7fffffe          BL       uart_putchar
000664  210a              MOVS     r1,#0xa
000666  488e              LDR      r0,|L1.2208|
000668  f7fffffe          BL       uart_putchar
00066c  210a              MOVS     r1,#0xa
00066e  488c              LDR      r0,|L1.2208|
000670  f7fffffe          BL       uart_putchar
000674  210a              MOVS     r1,#0xa
000676  488a              LDR      r0,|L1.2208|
000678  f7fffffe          BL       uart_putchar
00067c  210a              MOVS     r1,#0xa
00067e  4888              LDR      r0,|L1.2208|
000680  f7fffffe          BL       uart_putchar
000684  210a              MOVS     r1,#0xa
000686  4886              LDR      r0,|L1.2208|
000688  f7fffffe          BL       uart_putchar
00068c  210a              MOVS     r1,#0xa
00068e  4884              LDR      r0,|L1.2208|
000690  f7fffffe          BL       uart_putchar
000694  210a              MOVS     r1,#0xa
000696  4882              LDR      r0,|L1.2208|
000698  f7fffffe          BL       uart_putchar
00069c  210a              MOVS     r1,#0xa
00069e  4880              LDR      r0,|L1.2208|
0006a0  f7fffffe          BL       uart_putchar
0006a4  210a              MOVS     r1,#0xa
0006a6  487e              LDR      r0,|L1.2208|
0006a8  f7fffffe          BL       uart_putchar
0006ac  210a              MOVS     r1,#0xa
0006ae  487c              LDR      r0,|L1.2208|
0006b0  f7fffffe          BL       uart_putchar
0006b4  210a              MOVS     r1,#0xa
0006b6  487a              LDR      r0,|L1.2208|
0006b8  f7fffffe          BL       uart_putchar
0006bc  210a              MOVS     r1,#0xa
0006be  4878              LDR      r0,|L1.2208|
0006c0  f7fffffe          BL       uart_putchar
0006c4  210a              MOVS     r1,#0xa
0006c6  4876              LDR      r0,|L1.2208|
0006c8  f7fffffe          BL       uart_putchar
0006cc  210a              MOVS     r1,#0xa
0006ce  4874              LDR      r0,|L1.2208|
0006d0  f7fffffe          BL       uart_putchar
0006d4  210a              MOVS     r1,#0xa
0006d6  4872              LDR      r0,|L1.2208|
0006d8  f7fffffe          BL       uart_putchar
0006dc  210a              MOVS     r1,#0xa
0006de  4870              LDR      r0,|L1.2208|
0006e0  f7fffffe          BL       uart_putchar
0006e4  210a              MOVS     r1,#0xa
0006e6  486e              LDR      r0,|L1.2208|
0006e8  f7fffffe          BL       uart_putchar
0006ec  210a              MOVS     r1,#0xa
0006ee  486c              LDR      r0,|L1.2208|
0006f0  f7fffffe          BL       uart_putchar
0006f4  210a              MOVS     r1,#0xa
0006f6  486a              LDR      r0,|L1.2208|
0006f8  f7fffffe          BL       uart_putchar
0006fc  210a              MOVS     r1,#0xa
0006fe  4868              LDR      r0,|L1.2208|
000700  f7fffffe          BL       uart_putchar
000704  210a              MOVS     r1,#0xa
000706  4866              LDR      r0,|L1.2208|
000708  f7fffffe          BL       uart_putchar
00070c  210a              MOVS     r1,#0xa
00070e  4864              LDR      r0,|L1.2208|
000710  f7fffffe          BL       uart_putchar
000714  210a              MOVS     r1,#0xa
000716  4862              LDR      r0,|L1.2208|
000718  f7fffffe          BL       uart_putchar
00071c  210a              MOVS     r1,#0xa
00071e  4860              LDR      r0,|L1.2208|
000720  f7fffffe          BL       uart_putchar
000724  210a              MOVS     r1,#0xa
000726  485e              LDR      r0,|L1.2208|
000728  f7fffffe          BL       uart_putchar
00072c  210a              MOVS     r1,#0xa
00072e  485c              LDR      r0,|L1.2208|
000730  f7fffffe          BL       uart_putchar
000734  210a              MOVS     r1,#0xa
000736  485a              LDR      r0,|L1.2208|
000738  f7fffffe          BL       uart_putchar
00073c  210a              MOVS     r1,#0xa
00073e  4858              LDR      r0,|L1.2208|
000740  f7fffffe          BL       uart_putchar
000744  210a              MOVS     r1,#0xa
000746  4856              LDR      r0,|L1.2208|
000748  f7fffffe          BL       uart_putchar
00074c  210a              MOVS     r1,#0xa
00074e  4854              LDR      r0,|L1.2208|
000750  f7fffffe          BL       uart_putchar
000754  210a              MOVS     r1,#0xa
000756  4852              LDR      r0,|L1.2208|
000758  f7fffffe          BL       uart_putchar
00075c  210a              MOVS     r1,#0xa
00075e  4850              LDR      r0,|L1.2208|
000760  f7fffffe          BL       uart_putchar
000764  210a              MOVS     r1,#0xa
000766  484e              LDR      r0,|L1.2208|
000768  f7fffffe          BL       uart_putchar
00076c  210a              MOVS     r1,#0xa
00076e  484c              LDR      r0,|L1.2208|
000770  f7fffffe          BL       uart_putchar
000774  210a              MOVS     r1,#0xa
000776  484a              LDR      r0,|L1.2208|
000778  f7fffffe          BL       uart_putchar
00077c  210a              MOVS     r1,#0xa
00077e  4848              LDR      r0,|L1.2208|
000780  f7fffffe          BL       uart_putchar
000784  210a              MOVS     r1,#0xa
000786  4846              LDR      r0,|L1.2208|
000788  f7fffffe          BL       uart_putchar
00078c  210a              MOVS     r1,#0xa
00078e  4844              LDR      r0,|L1.2208|
000790  f7fffffe          BL       uart_putchar
000794  210a              MOVS     r1,#0xa
000796  4842              LDR      r0,|L1.2208|
000798  f7fffffe          BL       uart_putchar
;;;183    									//memset(data,0,1000);
;;;184    														//timer counts to wait for characters in uart 1 									
;;;185    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00079c  bf00              NOP      
                  |L1.1950|
00079e  a157              ADR      r1,|L1.2300|
0007a0  4835              LDR      r0,|L1.2168|
0007a2  f7fffffe          BL       strstr
0007a6  2800              CMP      r0,#0
0007a8  d109              BNE      |L1.1982|
0007aa  a131              ADR      r1,|L1.2160|
0007ac  4832              LDR      r0,|L1.2168|
0007ae  f7fffffe          BL       strstr
0007b2  2800              CMP      r0,#0
0007b4  d103              BNE      |L1.1982|
0007b6  4839              LDR      r0,|L1.2204|
0007b8  6800              LDR      r0,[r0,#0]  ; tout
0007ba  2805              CMP      r0,#5
0007bc  ddef              BLE      |L1.1950|
                  |L1.1982|
;;;186    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;187    									}
;;;188    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0007be  f7fffffe          BL       clear
;;;189    									//clear();
;;;190    									memset(data,0,strlen(data));
0007c2  483c              LDR      r0,|L1.2228|
0007c4  f7fffffe          BL       strlen
0007c8  4604              MOV      r4,r0
0007ca  4621              MOV      r1,r4
0007cc  4839              LDR      r0,|L1.2228|
0007ce  f7fffffe          BL       __aeabi_memclr
;;;191    									clear();
0007d2  f7fffffe          BL       clear
;;;192    
;;;193    								
;;;194    	
;;;195    	//log_it();		                         //logging
;;;196    		memset(data,0,strlen(data));	
0007d6  4837              LDR      r0,|L1.2228|
0007d8  f7fffffe          BL       strlen
0007dc  4604              MOV      r4,r0
0007de  4621              MOV      r1,r4
0007e0  4834              LDR      r0,|L1.2228|
0007e2  f7fffffe          BL       __aeabi_memclr
;;;197    
;;;198    					   	if(flagch!=1){
0007e6  482f              LDR      r0,|L1.2212|
0007e8  6800              LDR      r0,[r0,#0]  ; flagch
0007ea  2801              CMP      r0,#1
0007ec  d009              BEQ      |L1.2050|
;;;199    							temp=int_erval;				
0007ee  482f              LDR      r0,|L1.2220|
0007f0  6800              LDR      r0,[r0,#0]  ; int_erval
0007f2  492d              LDR      r1,|L1.2216|
0007f4  6008              STR      r0,[r1,#0]  ; temp
;;;200    							int_erval=4;
0007f6  2004              MOVS     r0,#4
0007f8  492c              LDR      r1,|L1.2220|
0007fa  6008              STR      r0,[r1,#0]  ; int_erval
;;;201    							flagch=1;}
0007fc  2001              MOVS     r0,#1
0007fe  4929              LDR      r1,|L1.2212|
000800  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.2050|
;;;202    							clear();	
000802  f7fffffe          BL       clear
;;;203    									GPS_COLLECT();
000806  f7fffffe          BL       GPS_COLLECT
;;;204    									strcat(data,"CH\n");	
00080a  a12b              ADR      r1,|L1.2232|
00080c  4829              LDR      r0,|L1.2228|
00080e  f7fffffe          BL       strcat
;;;205    
;;;206    //*********************************tcp_initialization();//reinitialization*************************************//
;;;207    
;;;208    	
;;;209    msg_sim800(); 
000812  f7fffffe          BL       msg_sim800
;;;210    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
000816  2005              MOVS     r0,#5
000818  a315              ADR      r3,|L1.2160|
00081a  a233              ADR      r2,|L1.2280|
00081c  a139              ADR      r1,|L1.2308|
00081e  9000              STR      r0,[sp,#0]
000820  a039              ADR      r0,|L1.2312|
000822  f7fffffe          BL       send_GSM
;;;211    delay(100);
000826  2064              MOVS     r0,#0x64
000828  f7fffffe          BL       delay
;;;212    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00082c  2004              MOVS     r0,#4
00082e  a310              ADR      r3,|L1.2160|
000830  a239              ADR      r2,|L1.2328|
000832  a134              ADR      r1,|L1.2308|
000834  9000              STR      r0,[sp,#0]
000836  a03d              ADR      r0,|L1.2348|
000838  f7fffffe          BL       send_GSM
;;;213    GPS_COLLECT2();
00083c  f7fffffe          BL       GPS_COLLECT2
;;;214    strcat(data,"CH\n");		
000840  a11d              ADR      r1,|L1.2232|
000842  481c              LDR      r0,|L1.2228|
000844  f7fffffe          BL       strcat
;;;215    GPS_COLLECT2();
000848  f7fffffe          BL       GPS_COLLECT2
;;;216    strcat(data,"CH\n");	
00084c  a11a              ADR      r1,|L1.2232|
00084e  4819              LDR      r0,|L1.2228|
000850  f7fffffe          BL       strcat
;;;217    GPS_COLLECT2();
000854  f7fffffe          BL       GPS_COLLECT2
;;;218    strcat(data,"CH\n");
000858  a117              ADR      r1,|L1.2232|
00085a  4816              LDR      r0,|L1.2228|
00085c  f7fffffe          BL       strcat
;;;219    cond201=(strstr(uart_string_gsm, "OK"));
000860  a128              ADR      r1,|L1.2308|
000862  4805              LDR      r0,|L1.2168|
000864  f7fffffe          BL       strstr
000868  4934              LDR      r1,|L1.2364|
00086a  6008              STR      r0,[r1,#0]  ; cond201
;;;220    cond200=(strstr(uart_string_gsm, "ERROR"));
00086c  a100              ADR      r1,|L1.2160|
00086e  e067              B        |L1.2368|
                  |L1.2160|
000870  4552524f          DCB      "ERROR",0
000874  5200    
000876  00                DCB      0
000877  00                DCB      0
                  |L1.2168|
                          DCD      uart_string_gsm
                  |L1.2172|
                          DCD      stcond2
                  |L1.2176|
000880  4641494c          DCB      "FAIL",0
000884  00      
000885  00                DCB      0
000886  00                DCB      0
000887  00                DCB      0
                  |L1.2184|
                          DCD      stcond3
                  |L1.2188|
00088c  44454143          DCB      "DEACT",0
000890  5400    
000892  00                DCB      0
000893  00                DCB      0
                  |L1.2196|
                          DCD      stcond4
                  |L1.2200|
                          DCD      stcond1
                  |L1.2204|
                          DCD      tout
                  |L1.2208|
                          DCD      0x4006b000
                  |L1.2212|
                          DCD      flagch
                  |L1.2216|
                          DCD      temp
                  |L1.2220|
                          DCD      int_erval
                  |L1.2224|
                          DCD      ||.text||+0x474
                  |L1.2228|
                          DCD      data
                  |L1.2232|
0008b8  43480a00          DCB      "CH\n",0
                  |L1.2236|
                          DCD      at_
                  |L1.2240|
                          DCD      drive
                  |L1.2244|
0008c4  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
0008c8  2b465357
0008cc  52495445
0008d0  3d25735c
0008d4  4c4f472e
0008d8  5458542c
0008dc  312c2564
0008e0  2c31300a
0008e4  0a00    
0008e6  00                DCB      0
0008e7  00                DCB      0
                  |L1.2280|
0008e8  4552524f          DCB      "ERROR\r\n",0
0008ec  520d0a00
                  |L1.2288|
0008f0  3e00              DCB      ">",0
0008f2  00                DCB      0
0008f3  00                DCB      0
                  |L1.2292|
                          DCD      ||k2||
                  |L1.2296|
                          DCD      k
                  |L1.2300|
0008fc  4f4b0d0a          DCB      "OK\r\n",0
000900  00      
000901  00                DCB      0
000902  00                DCB      0
000903  00                DCB      0
                  |L1.2308|
000904  4f4b00            DCB      "OK",0
000907  00                DCB      0
                  |L1.2312|
000908  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
00090c  2b434655
000910  4e3d300d
000914  0d0a0a00
                  |L1.2328|
000918  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
00091c  494e5345
000920  52544544
000924  0d0a4f4b
000928  00      
000929  00                DCB      0
00092a  00                DCB      0
00092b  00                DCB      0
                  |L1.2348|
00092c  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000930  2b434655
000934  4e3d310d
000938  0a00    
00093a  00                DCB      0
00093b  00                DCB      0
                  |L1.2364|
                          DCD      cond201
                  |L1.2368|
000940  48f6              LDR      r0,|L1.3356|
000942  f7fffffe          BL       strstr
000946  49f6              LDR      r1,|L1.3360|
000948  6008              STR      r0,[r1,#0]  ; cond200
;;;221    if((!(cond201|| cond200 ))  && sleep_flag != 1)
00094a  48f6              LDR      r0,|L1.3364|
00094c  6800              LDR      r0,[r0,#0]  ; cond201
00094e  2800              CMP      r0,#0
                  |L1.2384|
000950  d17e              BNE      |L1.2640|
000952  4608              MOV      r0,r1
000954  6800              LDR      r0,[r0,#0]  ; cond200
000956  2800              CMP      r0,#0
000958  d1fa              BNE      |L1.2384|
00095a  48f3              LDR      r0,|L1.3368|
00095c  6800              LDR      r0,[r0,#0]  ; sleep_flag
00095e  2801              CMP      r0,#1
000960  d076              BEQ      |L1.2640|
;;;222    {
;;;223    delay(100);
000962  2064              MOVS     r0,#0x64
000964  f7fffffe          BL       delay
;;;224    clear();//memset(uart_string_gsm,0,5000);
000968  f7fffffe          BL       clear
;;;225    memset(at_,0,100);
00096c  2164              MOVS     r1,#0x64
00096e  48ef              LDR      r0,|L1.3372|
000970  f7fffffe          BL       __aeabi_memclr
;;;226    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000974  48ee              LDR      r0,|L1.3376|
000976  f7fffffe          BL       strlen
00097a  1c44              ADDS     r4,r0,#1
00097c  4623              MOV      r3,r4
00097e  4aed              LDR      r2,|L1.3380|
000980  49ed              LDR      r1,|L1.3384|
000982  48ea              LDR      r0,|L1.3372|
000984  f7fffffe          BL       __2sprintf
;;;227    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000988  2005              MOVS     r0,#5
00098a  4beb              LDR      r3,|L1.3384|
00098c  3b54              SUBS     r3,r3,#0x54
00098e  461a              MOV      r2,r3
000990  3278              ADDS     r2,r2,#0x78
000992  a1ea              ADR      r1,|L1.3388|
000994  9000              STR      r0,[sp,#0]
000996  48e5              LDR      r0,|L1.3372|
000998  f7fffffe          BL       send_SD
;;;228    clear();	
00099c  f7fffffe          BL       clear
;;;229    k2=0;									//string array counter for uart 1
0009a0  2000              MOVS     r0,#0
0009a2  49e7              LDR      r1,|L1.3392|
0009a4  6008              STR      r0,[r1,#0]  ; k2
;;;230    tout=0;	
0009a6  49e7              LDR      r1,|L1.3396|
0009a8  6008              STR      r0,[r1,#0]  ; tout
;;;231    for(k=0;k<strlen(data);k++)
0009aa  49e7              LDR      r1,|L1.3400|
0009ac  6008              STR      r0,[r1,#0]  ; k
0009ae  e00b              B        |L1.2504|
                  |L1.2480|
;;;232    {
;;;233    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0009b0  48df              LDR      r0,|L1.3376|
0009b2  4ae5              LDR      r2,|L1.3400|
0009b4  6812              LDR      r2,[r2,#0]  ; k
0009b6  5c81              LDRB     r1,[r0,r2]
0009b8  48e4              LDR      r0,|L1.3404|
0009ba  f7fffffe          BL       uart_putchar
0009be  48e2              LDR      r0,|L1.3400|
0009c0  6800              LDR      r0,[r0,#0]            ;231  ; k
0009c2  1c40              ADDS     r0,r0,#1              ;231
0009c4  49e0              LDR      r1,|L1.3400|
0009c6  6008              STR      r0,[r1,#0]            ;231  ; k
                  |L1.2504|
0009c8  48d9              LDR      r0,|L1.3376|
0009ca  f7fffffe          BL       strlen
0009ce  49de              LDR      r1,|L1.3400|
0009d0  6809              LDR      r1,[r1,#0]            ;231  ; k
0009d2  4288              CMP      r0,r1                 ;231
0009d4  d8ec              BHI      |L1.2480|
;;;234    }	
;;;235    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0009d6  210a              MOVS     r1,#0xa
0009d8  48dc              LDR      r0,|L1.3404|
0009da  f7fffffe          BL       uart_putchar
0009de  210a              MOVS     r1,#0xa
0009e0  48da              LDR      r0,|L1.3404|
0009e2  f7fffffe          BL       uart_putchar
0009e6  210a              MOVS     r1,#0xa
0009e8  48d8              LDR      r0,|L1.3404|
0009ea  f7fffffe          BL       uart_putchar
0009ee  210a              MOVS     r1,#0xa
0009f0  48d6              LDR      r0,|L1.3404|
0009f2  f7fffffe          BL       uart_putchar
0009f6  210a              MOVS     r1,#0xa
0009f8  48d4              LDR      r0,|L1.3404|
0009fa  f7fffffe          BL       uart_putchar
0009fe  210a              MOVS     r1,#0xa
000a00  48d2              LDR      r0,|L1.3404|
000a02  f7fffffe          BL       uart_putchar
000a06  210a              MOVS     r1,#0xa
000a08  48d0              LDR      r0,|L1.3404|
000a0a  f7fffffe          BL       uart_putchar
000a0e  210a              MOVS     r1,#0xa
000a10  48ce              LDR      r0,|L1.3404|
000a12  f7fffffe          BL       uart_putchar
000a16  210a              MOVS     r1,#0xa
000a18  48cc              LDR      r0,|L1.3404|
000a1a  f7fffffe          BL       uart_putchar
000a1e  210a              MOVS     r1,#0xa
000a20  48ca              LDR      r0,|L1.3404|
000a22  f7fffffe          BL       uart_putchar
000a26  210a              MOVS     r1,#0xa
000a28  48c8              LDR      r0,|L1.3404|
000a2a  f7fffffe          BL       uart_putchar
000a2e  210a              MOVS     r1,#0xa
000a30  48c6              LDR      r0,|L1.3404|
000a32  f7fffffe          BL       uart_putchar
000a36  210a              MOVS     r1,#0xa
000a38  48c4              LDR      r0,|L1.3404|
000a3a  f7fffffe          BL       uart_putchar
000a3e  210a              MOVS     r1,#0xa
000a40  48c2              LDR      r0,|L1.3404|
000a42  f7fffffe          BL       uart_putchar
000a46  210a              MOVS     r1,#0xa
000a48  48c0              LDR      r0,|L1.3404|
000a4a  f7fffffe          BL       uart_putchar
000a4e  e000              B        |L1.2642|
                  |L1.2640|
000a50  e0d2              B        |L1.3064|
                  |L1.2642|
000a52  210a              MOVS     r1,#0xa
000a54  48bd              LDR      r0,|L1.3404|
000a56  f7fffffe          BL       uart_putchar
000a5a  210a              MOVS     r1,#0xa
000a5c  48bb              LDR      r0,|L1.3404|
000a5e  f7fffffe          BL       uart_putchar
000a62  210a              MOVS     r1,#0xa
000a64  48b9              LDR      r0,|L1.3404|
000a66  f7fffffe          BL       uart_putchar
000a6a  210a              MOVS     r1,#0xa
000a6c  48b7              LDR      r0,|L1.3404|
000a6e  f7fffffe          BL       uart_putchar
000a72  210a              MOVS     r1,#0xa
000a74  48b5              LDR      r0,|L1.3404|
000a76  f7fffffe          BL       uart_putchar
000a7a  210a              MOVS     r1,#0xa
000a7c  48b3              LDR      r0,|L1.3404|
000a7e  f7fffffe          BL       uart_putchar
000a82  210a              MOVS     r1,#0xa
000a84  48b1              LDR      r0,|L1.3404|
000a86  f7fffffe          BL       uart_putchar
000a8a  210a              MOVS     r1,#0xa
000a8c  48af              LDR      r0,|L1.3404|
000a8e  f7fffffe          BL       uart_putchar
000a92  210a              MOVS     r1,#0xa
000a94  48ad              LDR      r0,|L1.3404|
000a96  f7fffffe          BL       uart_putchar
000a9a  210a              MOVS     r1,#0xa
000a9c  48ab              LDR      r0,|L1.3404|
000a9e  f7fffffe          BL       uart_putchar
000aa2  210a              MOVS     r1,#0xa
000aa4  48a9              LDR      r0,|L1.3404|
000aa6  f7fffffe          BL       uart_putchar
000aaa  210a              MOVS     r1,#0xa
000aac  48a7              LDR      r0,|L1.3404|
000aae  f7fffffe          BL       uart_putchar
000ab2  210a              MOVS     r1,#0xa
000ab4  48a5              LDR      r0,|L1.3404|
000ab6  f7fffffe          BL       uart_putchar
000aba  210a              MOVS     r1,#0xa
000abc  48a3              LDR      r0,|L1.3404|
000abe  f7fffffe          BL       uart_putchar
000ac2  210a              MOVS     r1,#0xa
000ac4  48a1              LDR      r0,|L1.3404|
000ac6  f7fffffe          BL       uart_putchar
000aca  210a              MOVS     r1,#0xa
000acc  489f              LDR      r0,|L1.3404|
000ace  f7fffffe          BL       uart_putchar
000ad2  210a              MOVS     r1,#0xa
000ad4  489d              LDR      r0,|L1.3404|
000ad6  f7fffffe          BL       uart_putchar
000ada  210a              MOVS     r1,#0xa
000adc  489b              LDR      r0,|L1.3404|
000ade  f7fffffe          BL       uart_putchar
000ae2  210a              MOVS     r1,#0xa
000ae4  4899              LDR      r0,|L1.3404|
000ae6  f7fffffe          BL       uart_putchar
000aea  210a              MOVS     r1,#0xa
000aec  4897              LDR      r0,|L1.3404|
000aee  f7fffffe          BL       uart_putchar
000af2  210a              MOVS     r1,#0xa
000af4  4895              LDR      r0,|L1.3404|
000af6  f7fffffe          BL       uart_putchar
000afa  210a              MOVS     r1,#0xa
000afc  4893              LDR      r0,|L1.3404|
000afe  f7fffffe          BL       uart_putchar
000b02  210a              MOVS     r1,#0xa
000b04  4891              LDR      r0,|L1.3404|
000b06  f7fffffe          BL       uart_putchar
000b0a  210a              MOVS     r1,#0xa
000b0c  488f              LDR      r0,|L1.3404|
000b0e  f7fffffe          BL       uart_putchar
000b12  210a              MOVS     r1,#0xa
000b14  488d              LDR      r0,|L1.3404|
000b16  f7fffffe          BL       uart_putchar
000b1a  210a              MOVS     r1,#0xa
000b1c  488b              LDR      r0,|L1.3404|
000b1e  f7fffffe          BL       uart_putchar
000b22  210a              MOVS     r1,#0xa
000b24  4889              LDR      r0,|L1.3404|
000b26  f7fffffe          BL       uart_putchar
000b2a  210a              MOVS     r1,#0xa
000b2c  4887              LDR      r0,|L1.3404|
000b2e  f7fffffe          BL       uart_putchar
000b32  210a              MOVS     r1,#0xa
000b34  4885              LDR      r0,|L1.3404|
000b36  f7fffffe          BL       uart_putchar
000b3a  210a              MOVS     r1,#0xa
000b3c  4883              LDR      r0,|L1.3404|
000b3e  f7fffffe          BL       uart_putchar
000b42  210a              MOVS     r1,#0xa
000b44  4881              LDR      r0,|L1.3404|
000b46  f7fffffe          BL       uart_putchar
000b4a  210a              MOVS     r1,#0xa
000b4c  487f              LDR      r0,|L1.3404|
000b4e  f7fffffe          BL       uart_putchar
000b52  210a              MOVS     r1,#0xa
000b54  487d              LDR      r0,|L1.3404|
000b56  f7fffffe          BL       uart_putchar
000b5a  210a              MOVS     r1,#0xa
000b5c  487b              LDR      r0,|L1.3404|
000b5e  f7fffffe          BL       uart_putchar
000b62  210a              MOVS     r1,#0xa
000b64  4879              LDR      r0,|L1.3404|
000b66  f7fffffe          BL       uart_putchar
000b6a  210a              MOVS     r1,#0xa
000b6c  4877              LDR      r0,|L1.3404|
000b6e  f7fffffe          BL       uart_putchar
000b72  210a              MOVS     r1,#0xa
000b74  4875              LDR      r0,|L1.3404|
000b76  f7fffffe          BL       uart_putchar
000b7a  210a              MOVS     r1,#0xa
000b7c  4873              LDR      r0,|L1.3404|
000b7e  f7fffffe          BL       uart_putchar
000b82  210a              MOVS     r1,#0xa
000b84  4871              LDR      r0,|L1.3404|
000b86  f7fffffe          BL       uart_putchar
000b8a  210a              MOVS     r1,#0xa
000b8c  486f              LDR      r0,|L1.3404|
000b8e  f7fffffe          BL       uart_putchar
000b92  210a              MOVS     r1,#0xa
000b94  486d              LDR      r0,|L1.3404|
000b96  f7fffffe          BL       uart_putchar
000b9a  210a              MOVS     r1,#0xa
000b9c  486b              LDR      r0,|L1.3404|
000b9e  f7fffffe          BL       uart_putchar
;;;236    									//memset(data,0,1000);
;;;237    														//timer counts to wait for characters in uart 1 									
;;;238    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000ba2  bf00              NOP      
                  |L1.2980|
000ba4  4964              LDR      r1,|L1.3384|
000ba6  3138              ADDS     r1,r1,#0x38
000ba8  485c              LDR      r0,|L1.3356|
000baa  f7fffffe          BL       strstr
000bae  2800              CMP      r0,#0
000bb0  d10a              BNE      |L1.3016|
000bb2  4961              LDR      r1,|L1.3384|
000bb4  3954              SUBS     r1,r1,#0x54
000bb6  4859              LDR      r0,|L1.3356|
000bb8  f7fffffe          BL       strstr
000bbc  2800              CMP      r0,#0
000bbe  d103              BNE      |L1.3016|
000bc0  4860              LDR      r0,|L1.3396|
000bc2  6800              LDR      r0,[r0,#0]  ; tout
000bc4  2805              CMP      r0,#5
000bc6  dded              BLE      |L1.2980|
                  |L1.3016|
;;;239    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;240    									}
;;;241    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000bc8  f7fffffe          BL       clear
;;;242    									//clear();
;;;243    									memset(data,0,strlen(data));
000bcc  4858              LDR      r0,|L1.3376|
000bce  f7fffffe          BL       strlen
000bd2  4604              MOV      r4,r0
000bd4  4621              MOV      r1,r4
000bd6  4856              LDR      r0,|L1.3376|
000bd8  f7fffffe          BL       __aeabi_memclr
;;;244    									clear();
000bdc  f7fffffe          BL       clear
;;;245    									RESET_OFF;delay(100);
000be0  2020              MOVS     r0,#0x20
000be2  495b              LDR      r1,|L1.3408|
000be4  6088              STR      r0,[r1,#8]
000be6  2064              MOVS     r0,#0x64
000be8  f7fffffe          BL       delay
;;;246    									RESET_ON;delay(100);		
000bec  2020              MOVS     r0,#0x20
000bee  4958              LDR      r1,|L1.3408|
000bf0  6048              STR      r0,[r1,#4]
000bf2  2064              MOVS     r0,#0x64
000bf4  f7fffffe          BL       delay
                  |L1.3064|
;;;247    }
;;;248    	
;;;249    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000bf8  2004              MOVS     r0,#4
000bfa  a356              ADR      r3,|L1.3412|
000bfc  4a4e              LDR      r2,|L1.3384|
000bfe  3224              ADDS     r2,r2,#0x24
000c00  a156              ADR      r1,|L1.3420|
000c02  9000              STR      r0,[sp,#0]
000c04  a056              ADR      r0,|L1.3424|
000c06  f7fffffe          BL       send_GSM
;;;250    GPS_COLLECT2();
000c0a  f7fffffe          BL       GPS_COLLECT2
;;;251    strcat(data,"CH\n");	
000c0e  494a              LDR      r1,|L1.3384|
000c10  390c              SUBS     r1,r1,#0xc
000c12  4847              LDR      r0,|L1.3376|
000c14  f7fffffe          BL       strcat
;;;252    memset(at_,0,100);
000c18  2164              MOVS     r1,#0x64
000c1a  4844              LDR      r0,|L1.3372|
000c1c  f7fffffe          BL       __aeabi_memclr
;;;253    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000c20  4a53              LDR      r2,|L1.3440|
000c22  a154              ADR      r1,|L1.3444|
000c24  4841              LDR      r0,|L1.3372|
000c26  f7fffffe          BL       __2sprintf
;;;254    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000c2a  4857              LDR      r0,|L1.3464|
000c2c  6800              LDR      r0,[r0,#0]  ; tmeout
000c2e  a349              ADR      r3,|L1.3412|
000c30  4a41              LDR      r2,|L1.3384|
000c32  3224              ADDS     r2,r2,#0x24
000c34  a149              ADR      r1,|L1.3420|
000c36  9000              STR      r0,[sp,#0]
000c38  483c              LDR      r0,|L1.3372|
000c3a  f7fffffe          BL       send_GSM
;;;255    msg_sim800(); 
000c3e  f7fffffe          BL       msg_sim800
;;;256    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000c42  2004              MOVS     r0,#4
000c44  4b3c              LDR      r3,|L1.3384|
000c46  3b38              SUBS     r3,r3,#0x38
000c48  461a              MOV      r2,r3
000c4a  325c              ADDS     r2,r2,#0x5c
000c4c  a143              ADR      r1,|L1.3420|
000c4e  9000              STR      r0,[sp,#0]
000c50  a04e              ADR      r0,|L1.3468|
000c52  f7fffffe          BL       send_GSM
;;;257    GPS_COLLECT2();
000c56  f7fffffe          BL       GPS_COLLECT2
;;;258    strcat(data,"CH\n");	
000c5a  4937              LDR      r1,|L1.3384|
000c5c  390c              SUBS     r1,r1,#0xc
000c5e  4834              LDR      r0,|L1.3376|
000c60  f7fffffe          BL       strcat
;;;259    GPS_COLLECT2();
000c64  f7fffffe          BL       GPS_COLLECT2
;;;260    strcat(data,"CH\n");	
000c68  4933              LDR      r1,|L1.3384|
000c6a  390c              SUBS     r1,r1,#0xc
000c6c  4830              LDR      r0,|L1.3376|
000c6e  f7fffffe          BL       strcat
;;;261    
;;;262    
;;;263    msg_sim800(); 
000c72  f7fffffe          BL       msg_sim800
;;;264    GPS_COLLECT2();
000c76  f7fffffe          BL       GPS_COLLECT2
;;;265    strcat(data,"CH\n");	
000c7a  492f              LDR      r1,|L1.3384|
000c7c  390c              SUBS     r1,r1,#0xc
000c7e  482c              LDR      r0,|L1.3376|
000c80  f7fffffe          BL       strcat
;;;266    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR" , "DEACT",1);		
000c84  2001              MOVS     r0,#1
000c86  4b2c              LDR      r3,|L1.3384|
000c88  3b38              SUBS     r3,r3,#0x38
000c8a  461a              MOV      r2,r3
000c8c  3a1c              SUBS     r2,r2,#0x1c
000c8e  a133              ADR      r1,|L1.3420|
000c90  9000              STR      r0,[sp,#0]
000c92  a042              ADR      r0,|L1.3484|
000c94  f7fffffe          BL       send_GSM
;;;267    
;;;268    //delay(20);
;;;269    
;;;270    
;;;271    msg_sim800(); 
000c98  f7fffffe          BL       msg_sim800
;;;272    
;;;273    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000c9c  4b43              LDR      r3,|L1.3500|
000c9e  4a44              LDR      r2,|L1.3504|
000ca0  a144              ADR      r1,|L1.3508|
000ca2  4822              LDR      r0,|L1.3372|
000ca4  f7fffffe          BL       __2sprintf
;;;274    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000ca8  4837              LDR      r0,|L1.3464|
000caa  6800              LDR      r0,[r0,#0]  ; tmeout
000cac  a329              ADR      r3,|L1.3412|
000cae  4a22              LDR      r2,|L1.3384|
000cb0  3a54              SUBS     r2,r2,#0x54
000cb2  a148              ADR      r1,|L1.3540|
000cb4  9000              STR      r0,[sp,#0]
000cb6  481d              LDR      r0,|L1.3372|
000cb8  f7fffffe          BL       send_GSM
;;;275    						clear();
000cbc  f7fffffe          BL       clear
;;;276    						
;;;277    						
;;;278    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
000cc0  4831              LDR      r0,|L1.3464|
000cc2  6800              LDR      r0,[r0,#0]  ; tmeout
000cc4  a345              ADR      r3,|L1.3548|
000cc6  4a1c              LDR      r2,|L1.3384|
000cc8  3a54              SUBS     r2,r2,#0x54
000cca  a11c              ADR      r1,|L1.3388|
000ccc  9000              STR      r0,[sp,#0]
000cce  a047              ADR      r0,|L1.3564|
000cd0  f7fffffe          BL       send_GSM
;;;279    //*********************************tcp_initialization_ends*****************************************************//							
;;;280    									
;;;281    						clear();		
000cd4  f7fffffe          BL       clear
;;;282    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
000cd8  213e              MOVS     r1,#0x3e
000cda  4810              LDR      r0,|L1.3356|
000cdc  f7fffffe          BL       mystrstr
000ce0  4946              LDR      r1,|L1.3580|
000ce2  7008              STRB     r0,[r1,#0]
;;;283    								if(cond)	
000ce4  4608              MOV      r0,r1
000ce6  7800              LDRB     r0,[r0,#0]  ; cond
000ce8  2800              CMP      r0,#0
000cea  d016              BEQ      |L1.3354|
;;;284    								{	
;;;285    
;;;286    									clear();
000cec  f7fffffe          BL       clear
;;;287    									memset(uart_string_gsm,0,5000);
000cf0  4943              LDR      r1,|L1.3584|
000cf2  480a              LDR      r0,|L1.3356|
000cf4  f7fffffe          BL       __aeabi_memclr
;;;288    									strcat(data,"\n");
000cf8  a127              ADR      r1,|L1.3480|
000cfa  480d              LDR      r0,|L1.3376|
000cfc  f7fffffe          BL       strcat
;;;289    									len=strlen(data);
000d00  480b              LDR      r0,|L1.3376|
000d02  f7fffffe          BL       strlen
000d06  493f              LDR      r1,|L1.3588|
000d08  6008              STR      r0,[r1,#0]  ; len
;;;290    									tout=0;
000d0a  2000              MOVS     r0,#0
000d0c  490d              LDR      r1,|L1.3396|
000d0e  6008              STR      r0,[r1,#0]  ; tout
;;;291    									k2=0;
000d10  490b              LDR      r1,|L1.3392|
000d12  6008              STR      r0,[r1,#0]  ; k2
;;;292    									for(k=0;k<len;k++)
000d14  490c              LDR      r1,|L1.3400|
000d16  6008              STR      r0,[r1,#0]  ; k
000d18  e082              B        |L1.3616|
                  |L1.3354|
000d1a  e224              B        |L1.4454|
                  |L1.3356|
                          DCD      uart_string_gsm
                  |L1.3360|
                          DCD      cond200
                  |L1.3364|
                          DCD      cond201
                  |L1.3368|
                          DCD      sleep_flag
                  |L1.3372|
                          DCD      at_
                  |L1.3376|
                          DCD      data
                  |L1.3380|
                          DCD      drive
                  |L1.3384|
                          DCD      ||.text||+0x8c4
                  |L1.3388|
000d3c  3e00              DCB      ">",0
000d3e  00                DCB      0
000d3f  00                DCB      0
                  |L1.3392|
                          DCD      ||k2||
                  |L1.3396|
                          DCD      tout
                  |L1.3400|
                          DCD      k
                  |L1.3404|
                          DCD      0x4006b000
                  |L1.3408|
                          DCD      0x400ff080
                  |L1.3412|
000d54  4552524f          DCB      "ERROR:",0
000d58  523a00  
000d5b  00                DCB      0
                  |L1.3420|
000d5c  4f4b00            DCB      "OK",0
000d5f  00                DCB      0
                  |L1.3424|
000d60  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
000d64  2b434950
000d68  53485554
000d6c  0d0a00  
000d6f  00                DCB      0
                  |L1.3440|
                          DCD      apn
                  |L1.3444|
000d74  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
000d78  2b435354
000d7c  543d2225
000d80  73220d0a
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L1.3464|
                          DCD      tmeout
                  |L1.3468|
000d8c  0d0a4154          DCB      "\r\nAT+CIICR\r\r"
000d90  2b434949
000d94  43520d0d
                  |L1.3480|
000d98  0a00              DCB      "\n",0
000d9a  00                DCB      0
000d9b  00                DCB      0
                  |L1.3484|
000d9c  0d0a4154          DCB      "\r\nAT+CIFSR\r\r\n",0
000da0  2b434946
000da4  53520d0d
000da8  0a00    
000daa  00                DCB      0
000dab  00                DCB      0
                  |L1.3500|
                          DCD      port
                  |L1.3504|
                          DCD      ||ip||
                  |L1.3508|
000db4  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000db8  2b434950
000dbc  53544152
000dc0  543d2254
000dc4  4350222c
000dc8  22257322
000dcc  2c222573
000dd0  220d0a00
                  |L1.3540|
000dd4  434f4e4e          DCB      "CONNECT",0
000dd8  45435400
                  |L1.3548|
000ddc  434f4e4e          DCB      "CONNECT FAIL",0
000de0  45435420
000de4  4641494c
000de8  00      
000de9  00                DCB      0
000dea  00                DCB      0
000deb  00                DCB      0
                  |L1.3564|
000dec  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
000df0  2b434950
000df4  53454e44
000df8  0d0a00  
000dfb  00                DCB      0
                  |L1.3580|
                          DCD      cond
                  |L1.3584|
                          DCD      0x00001388
                  |L1.3588|
                          DCD      len
                  |L1.3592|
;;;293    									{
;;;294    										uart_putchar(UART1_BASE_PTR, data[k]);
000e08  48fd              LDR      r0,|L1.4608|
000e0a  4afe              LDR      r2,|L1.4612|
000e0c  6812              LDR      r2,[r2,#0]  ; k
000e0e  5c81              LDRB     r1,[r0,r2]
000e10  48fd              LDR      r0,|L1.4616|
000e12  f7fffffe          BL       uart_putchar
000e16  48fb              LDR      r0,|L1.4612|
000e18  6800              LDR      r0,[r0,#0]            ;292  ; k
000e1a  1c40              ADDS     r0,r0,#1              ;292
000e1c  49f9              LDR      r1,|L1.4612|
000e1e  6008              STR      r0,[r1,#0]            ;292  ; k
                  |L1.3616|
000e20  48f8              LDR      r0,|L1.4612|
000e22  6800              LDR      r0,[r0,#0]            ;292  ; k
000e24  49f9              LDR      r1,|L1.4620|
000e26  6809              LDR      r1,[r1,#0]            ;292  ; len
000e28  4288              CMP      r0,r1                 ;292
000e2a  dbed              BLT      |L1.3592|
;;;295    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000e2c  210a              MOVS     r1,#0xa
000e2e  48f6              LDR      r0,|L1.4616|
000e30  f7fffffe          BL       uart_putchar
000e34  211a              MOVS     r1,#0x1a
000e36  48f4              LDR      r0,|L1.4616|
000e38  f7fffffe          BL       uart_putchar
000e3c  211a              MOVS     r1,#0x1a
000e3e  48f2              LDR      r0,|L1.4616|
000e40  f7fffffe          BL       uart_putchar
000e44  211a              MOVS     r1,#0x1a
000e46  48f0              LDR      r0,|L1.4616|
000e48  f7fffffe          BL       uart_putchar
;;;296    									do
000e4c  bf00              NOP      
                  |L1.3662|
;;;297    																{stcond1=strstr(uart_string_gsm,"SEND OK");
000e4e  49f0              LDR      r1,|L1.4624|
000e50  48f0              LDR      r0,|L1.4628|
000e52  f7fffffe          BL       strstr
000e56  49f0              LDR      r1,|L1.4632|
000e58  6008              STR      r0,[r1,#0]  ; stcond1
;;;298    																	stcond2=strstr(uart_string_gsm, "ERROR");
000e5a  49f0              LDR      r1,|L1.4636|
000e5c  48ed              LDR      r0,|L1.4628|
000e5e  f7fffffe          BL       strstr
000e62  49ef              LDR      r1,|L1.4640|
000e64  6008              STR      r0,[r1,#0]  ; stcond2
;;;299    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000e66  49ef              LDR      r1,|L1.4644|
000e68  48ea              LDR      r0,|L1.4628|
000e6a  f7fffffe          BL       strstr
000e6e  49ee              LDR      r1,|L1.4648|
000e70  6008              STR      r0,[r1,#0]  ; stcond3
;;;300    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000e72  49ea              LDR      r1,|L1.4636|
000e74  311c              ADDS     r1,r1,#0x1c
000e76  48e7              LDR      r0,|L1.4628|
000e78  f7fffffe          BL       strstr
000e7c  49eb              LDR      r1,|L1.4652|
000e7e  6008              STR      r0,[r1,#0]  ; stcond4
;;;301    																	
;;;302    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
000e80  48e7              LDR      r0,|L1.4640|
000e82  6800              LDR      r0,[r0,#0]  ; stcond2
000e84  2800              CMP      r0,#0
000e86  d10f              BNE      |L1.3752|
000e88  48e7              LDR      r0,|L1.4648|
000e8a  6800              LDR      r0,[r0,#0]  ; stcond3
000e8c  2800              CMP      r0,#0
000e8e  d10b              BNE      |L1.3752|
000e90  4608              MOV      r0,r1
000e92  6800              LDR      r0,[r0,#0]  ; stcond4
000e94  2800              CMP      r0,#0
000e96  d107              BNE      |L1.3752|
000e98  48df              LDR      r0,|L1.4632|
000e9a  6800              LDR      r0,[r0,#0]  ; stcond1
000e9c  2800              CMP      r0,#0
000e9e  d103              BNE      |L1.3752|
000ea0  48e3              LDR      r0,|L1.4656|
000ea2  6800              LDR      r0,[r0,#0]  ; tout
000ea4  2805              CMP      r0,#5
000ea6  ddd2              BLE      |L1.3662|
                  |L1.3752|
;;;303    															//	delay(10);clear();
;;;304    														uart_putchar(UART1_BASE_PTR,0x1A);
000ea8  211a              MOVS     r1,#0x1a
000eaa  48d7              LDR      r0,|L1.4616|
000eac  f7fffffe          BL       uart_putchar
;;;305    											//	delay(10);
;;;306    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000eb0  211a              MOVS     r1,#0x1a
000eb2  48d5              LDR      r0,|L1.4616|
000eb4  f7fffffe          BL       uart_putchar
000eb8  211a              MOVS     r1,#0x1a
000eba  48d3              LDR      r0,|L1.4616|
000ebc  f7fffffe          BL       uart_putchar
000ec0  211a              MOVS     r1,#0x1a
000ec2  48d1              LDR      r0,|L1.4616|
000ec4  f7fffffe          BL       uart_putchar
;;;307    						
;;;308    
;;;309    
;;;310    									
;;;311    															
;;;312    															
;;;313    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;314    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;315    															
;;;316    														//qwe=strlen(uart_string_gsm);
;;;317    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;318    															delay(20);
000ec8  2014              MOVS     r0,#0x14
000eca  f7fffffe          BL       delay
;;;319    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
000ece  49d0              LDR      r1,|L1.4624|
000ed0  48d0              LDR      r0,|L1.4628|
000ed2  f7fffffe          BL       strstr
000ed6  49d7              LDR      r1,|L1.4660|
000ed8  6008              STR      r0,[r1,#0]  ; con1d
;;;320    																if(!con1d)
000eda  4608              MOV      r0,r1
000edc  6800              LDR      r0,[r0,#0]  ; con1d
000ede  2800              CMP      r0,#0
000ee0  d17e              BNE      |L1.4064|
;;;321    																{
;;;322    																	
;;;323    																	
;;;324    																	
;;;325    																	
;;;326    																	
;;;327    	delay(100);
000ee2  2064              MOVS     r0,#0x64
000ee4  f7fffffe          BL       delay
;;;328    		clear();//memset(uart_string_gsm,0,5000);
000ee8  f7fffffe          BL       clear
;;;329    	
;;;330    	memset(at_,0,100);
000eec  2164              MOVS     r1,#0x64
000eee  48d2              LDR      r0,|L1.4664|
000ef0  f7fffffe          BL       __aeabi_memclr
;;;331    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000ef4  48c2              LDR      r0,|L1.4608|
000ef6  f7fffffe          BL       strlen
000efa  1c44              ADDS     r4,r0,#1
000efc  4623              MOV      r3,r4
000efe  4acf              LDR      r2,|L1.4668|
000f00  49c6              LDR      r1,|L1.4636|
000f02  3154              ADDS     r1,r1,#0x54
000f04  48cc              LDR      r0,|L1.4664|
000f06  f7fffffe          BL       __2sprintf
;;;332    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000f0a  2005              MOVS     r0,#5
000f0c  4bc3              LDR      r3,|L1.4636|
000f0e  461a              MOV      r2,r3
000f10  3278              ADDS     r2,r2,#0x78
000f12  a1cb              ADR      r1,|L1.4672|
000f14  9000              STR      r0,[sp,#0]
000f16  48c8              LDR      r0,|L1.4664|
000f18  f7fffffe          BL       send_SD
;;;333    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;334    //	if(strstr(uart_string_gsm,"ERROR")){
;;;335    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;336    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;337    //	}
;;;338    	
;;;339    clear();	
000f1c  f7fffffe          BL       clear
;;;340    									k2=0;									//string array counter for uart 1
000f20  2000              MOVS     r0,#0
000f22  49c8              LDR      r1,|L1.4676|
000f24  6008              STR      r0,[r1,#0]  ; k2
;;;341    									tout=0;	
000f26  49c2              LDR      r1,|L1.4656|
000f28  6008              STR      r0,[r1,#0]  ; tout
;;;342    		for(k=0;k<strlen(data);k++)
000f2a  49b6              LDR      r1,|L1.4612|
000f2c  6008              STR      r0,[r1,#0]  ; k
000f2e  e00b              B        |L1.3912|
                  |L1.3888|
;;;343    		{
;;;344    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000f30  48b3              LDR      r0,|L1.4608|
000f32  4ab4              LDR      r2,|L1.4612|
000f34  6812              LDR      r2,[r2,#0]  ; k
000f36  5c81              LDRB     r1,[r0,r2]
000f38  48b3              LDR      r0,|L1.4616|
000f3a  f7fffffe          BL       uart_putchar
000f3e  48b1              LDR      r0,|L1.4612|
000f40  6800              LDR      r0,[r0,#0]            ;342  ; k
000f42  1c40              ADDS     r0,r0,#1              ;342
000f44  49af              LDR      r1,|L1.4612|
000f46  6008              STR      r0,[r1,#0]            ;342  ; k
                  |L1.3912|
000f48  48ad              LDR      r0,|L1.4608|
000f4a  f7fffffe          BL       strlen
000f4e  49ad              LDR      r1,|L1.4612|
000f50  6809              LDR      r1,[r1,#0]            ;342  ; k
000f52  4288              CMP      r0,r1                 ;342
000f54  d8ec              BHI      |L1.3888|
;;;345    		}	
;;;346    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000f56  210a              MOVS     r1,#0xa
000f58  48ab              LDR      r0,|L1.4616|
000f5a  f7fffffe          BL       uart_putchar
000f5e  210a              MOVS     r1,#0xa
000f60  48a9              LDR      r0,|L1.4616|
000f62  f7fffffe          BL       uart_putchar
000f66  210a              MOVS     r1,#0xa
000f68  48a7              LDR      r0,|L1.4616|
000f6a  f7fffffe          BL       uart_putchar
000f6e  210a              MOVS     r1,#0xa
000f70  48a5              LDR      r0,|L1.4616|
000f72  f7fffffe          BL       uart_putchar
000f76  210a              MOVS     r1,#0xa
000f78  48a3              LDR      r0,|L1.4616|
000f7a  f7fffffe          BL       uart_putchar
000f7e  210a              MOVS     r1,#0xa
000f80  48a1              LDR      r0,|L1.4616|
000f82  f7fffffe          BL       uart_putchar
000f86  210a              MOVS     r1,#0xa
000f88  489f              LDR      r0,|L1.4616|
000f8a  f7fffffe          BL       uart_putchar
000f8e  210a              MOVS     r1,#0xa
000f90  489d              LDR      r0,|L1.4616|
000f92  f7fffffe          BL       uart_putchar
000f96  210a              MOVS     r1,#0xa
000f98  489b              LDR      r0,|L1.4616|
000f9a  f7fffffe          BL       uart_putchar
000f9e  210a              MOVS     r1,#0xa
000fa0  4899              LDR      r0,|L1.4616|
000fa2  f7fffffe          BL       uart_putchar
000fa6  210a              MOVS     r1,#0xa
000fa8  4897              LDR      r0,|L1.4616|
000faa  f7fffffe          BL       uart_putchar
000fae  210a              MOVS     r1,#0xa
000fb0  4895              LDR      r0,|L1.4616|
000fb2  f7fffffe          BL       uart_putchar
000fb6  210a              MOVS     r1,#0xa
000fb8  4893              LDR      r0,|L1.4616|
000fba  f7fffffe          BL       uart_putchar
000fbe  210a              MOVS     r1,#0xa
000fc0  4891              LDR      r0,|L1.4616|
000fc2  f7fffffe          BL       uart_putchar
000fc6  210a              MOVS     r1,#0xa
000fc8  488f              LDR      r0,|L1.4616|
000fca  f7fffffe          BL       uart_putchar
000fce  210a              MOVS     r1,#0xa
000fd0  488d              LDR      r0,|L1.4616|
000fd2  f7fffffe          BL       uart_putchar
000fd6  210a              MOVS     r1,#0xa
000fd8  488b              LDR      r0,|L1.4616|
000fda  f7fffffe          BL       uart_putchar
000fde  e000              B        |L1.4066|
                  |L1.4064|
000fe0  e0be              B        |L1.4448|
                  |L1.4066|
000fe2  210a              MOVS     r1,#0xa
000fe4  4888              LDR      r0,|L1.4616|
000fe6  f7fffffe          BL       uart_putchar
000fea  210a              MOVS     r1,#0xa
000fec  4886              LDR      r0,|L1.4616|
000fee  f7fffffe          BL       uart_putchar
000ff2  210a              MOVS     r1,#0xa
000ff4  4884              LDR      r0,|L1.4616|
000ff6  f7fffffe          BL       uart_putchar
000ffa  210a              MOVS     r1,#0xa
000ffc  4882              LDR      r0,|L1.4616|
000ffe  f7fffffe          BL       uart_putchar
001002  210a              MOVS     r1,#0xa
001004  4880              LDR      r0,|L1.4616|
001006  f7fffffe          BL       uart_putchar
00100a  210a              MOVS     r1,#0xa
00100c  487e              LDR      r0,|L1.4616|
00100e  f7fffffe          BL       uart_putchar
001012  210a              MOVS     r1,#0xa
001014  487c              LDR      r0,|L1.4616|
001016  f7fffffe          BL       uart_putchar
00101a  210a              MOVS     r1,#0xa
00101c  487a              LDR      r0,|L1.4616|
00101e  f7fffffe          BL       uart_putchar
001022  210a              MOVS     r1,#0xa
001024  4878              LDR      r0,|L1.4616|
001026  f7fffffe          BL       uart_putchar
00102a  210a              MOVS     r1,#0xa
00102c  4876              LDR      r0,|L1.4616|
00102e  f7fffffe          BL       uart_putchar
001032  210a              MOVS     r1,#0xa
001034  4874              LDR      r0,|L1.4616|
001036  f7fffffe          BL       uart_putchar
00103a  210a              MOVS     r1,#0xa
00103c  4872              LDR      r0,|L1.4616|
00103e  f7fffffe          BL       uart_putchar
001042  210a              MOVS     r1,#0xa
001044  4870              LDR      r0,|L1.4616|
001046  f7fffffe          BL       uart_putchar
00104a  210a              MOVS     r1,#0xa
00104c  486e              LDR      r0,|L1.4616|
00104e  f7fffffe          BL       uart_putchar
001052  210a              MOVS     r1,#0xa
001054  486c              LDR      r0,|L1.4616|
001056  f7fffffe          BL       uart_putchar
00105a  210a              MOVS     r1,#0xa
00105c  486a              LDR      r0,|L1.4616|
00105e  f7fffffe          BL       uart_putchar
001062  210a              MOVS     r1,#0xa
001064  4868              LDR      r0,|L1.4616|
001066  f7fffffe          BL       uart_putchar
00106a  210a              MOVS     r1,#0xa
00106c  4866              LDR      r0,|L1.4616|
00106e  f7fffffe          BL       uart_putchar
001072  210a              MOVS     r1,#0xa
001074  4864              LDR      r0,|L1.4616|
001076  f7fffffe          BL       uart_putchar
00107a  210a              MOVS     r1,#0xa
00107c  4862              LDR      r0,|L1.4616|
00107e  f7fffffe          BL       uart_putchar
001082  210a              MOVS     r1,#0xa
001084  4860              LDR      r0,|L1.4616|
001086  f7fffffe          BL       uart_putchar
00108a  210a              MOVS     r1,#0xa
00108c  485e              LDR      r0,|L1.4616|
00108e  f7fffffe          BL       uart_putchar
001092  210a              MOVS     r1,#0xa
001094  485c              LDR      r0,|L1.4616|
001096  f7fffffe          BL       uart_putchar
00109a  210a              MOVS     r1,#0xa
00109c  485a              LDR      r0,|L1.4616|
00109e  f7fffffe          BL       uart_putchar
0010a2  210a              MOVS     r1,#0xa
0010a4  4858              LDR      r0,|L1.4616|
0010a6  f7fffffe          BL       uart_putchar
0010aa  210a              MOVS     r1,#0xa
0010ac  4856              LDR      r0,|L1.4616|
0010ae  f7fffffe          BL       uart_putchar
0010b2  210a              MOVS     r1,#0xa
0010b4  4854              LDR      r0,|L1.4616|
0010b6  f7fffffe          BL       uart_putchar
0010ba  210a              MOVS     r1,#0xa
0010bc  4852              LDR      r0,|L1.4616|
0010be  f7fffffe          BL       uart_putchar
0010c2  210a              MOVS     r1,#0xa
0010c4  4850              LDR      r0,|L1.4616|
0010c6  f7fffffe          BL       uart_putchar
0010ca  210a              MOVS     r1,#0xa
0010cc  484e              LDR      r0,|L1.4616|
0010ce  f7fffffe          BL       uart_putchar
0010d2  210a              MOVS     r1,#0xa
0010d4  484c              LDR      r0,|L1.4616|
0010d6  f7fffffe          BL       uart_putchar
0010da  210a              MOVS     r1,#0xa
0010dc  484a              LDR      r0,|L1.4616|
0010de  f7fffffe          BL       uart_putchar
0010e2  210a              MOVS     r1,#0xa
0010e4  4848              LDR      r0,|L1.4616|
0010e6  f7fffffe          BL       uart_putchar
0010ea  210a              MOVS     r1,#0xa
0010ec  4846              LDR      r0,|L1.4616|
0010ee  f7fffffe          BL       uart_putchar
0010f2  210a              MOVS     r1,#0xa
0010f4  4844              LDR      r0,|L1.4616|
0010f6  f7fffffe          BL       uart_putchar
0010fa  210a              MOVS     r1,#0xa
0010fc  4842              LDR      r0,|L1.4616|
0010fe  f7fffffe          BL       uart_putchar
001102  210a              MOVS     r1,#0xa
001104  4840              LDR      r0,|L1.4616|
001106  f7fffffe          BL       uart_putchar
00110a  210a              MOVS     r1,#0xa
00110c  483e              LDR      r0,|L1.4616|
00110e  f7fffffe          BL       uart_putchar
001112  210a              MOVS     r1,#0xa
001114  483c              LDR      r0,|L1.4616|
001116  f7fffffe          BL       uart_putchar
00111a  210a              MOVS     r1,#0xa
00111c  483a              LDR      r0,|L1.4616|
00111e  f7fffffe          BL       uart_putchar
;;;347    									//memset(data,0,1000);
;;;348    														//timer counts to wait for characters in uart 1 									
;;;349    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001122  bf00              NOP      
                  |L1.4388|
001124  493d              LDR      r1,|L1.4636|
001126  318c              ADDS     r1,r1,#0x8c
001128  483a              LDR      r0,|L1.4628|
00112a  f7fffffe          BL       strstr
00112e  2800              CMP      r0,#0
001130  d109              BNE      |L1.4422|
001132  493a              LDR      r1,|L1.4636|
001134  4837              LDR      r0,|L1.4628|
001136  f7fffffe          BL       strstr
00113a  2800              CMP      r0,#0
00113c  d103              BNE      |L1.4422|
00113e  483c              LDR      r0,|L1.4656|
001140  6800              LDR      r0,[r0,#0]  ; tout
001142  2805              CMP      r0,#5
001144  ddee              BLE      |L1.4388|
                  |L1.4422|
;;;350    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;351    									}
;;;352    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001146  f7fffffe          BL       clear
;;;353    									//clear();
;;;354    									memset(data,0,strlen(data));
00114a  482d              LDR      r0,|L1.4608|
00114c  f7fffffe          BL       strlen
001150  4604              MOV      r4,r0
001152  4621              MOV      r1,r4
001154  482a              LDR      r0,|L1.4608|
001156  f7fffffe          BL       __aeabi_memclr
;;;355    									clear();
00115a  f7fffffe          BL       clear
00115e  e166              B        |L1.5166|
                  |L1.4448|
;;;356    
;;;357    								
;;;358    								//								log_it();								
;;;359    																}else{send_chunk();}													
001160  f7fffffe          BL       send_chunk
001164  e163              B        |L1.5166|
                  |L1.4454|
;;;360    								//checks for the sd_data available
;;;361    								}
;;;362    								//con1d=strstr(uart_string_gsm,"OK");
;;;363    								else
;;;364    								{
;;;365    									
;;;366    									
;;;367    	delay(100);
001166  2064              MOVS     r0,#0x64
001168  f7fffffe          BL       delay
;;;368    		clear();//memset(uart_string_gsm,0,5000);
00116c  f7fffffe          BL       clear
;;;369    	
;;;370    	memset(at_,0,100);
001170  2164              MOVS     r1,#0x64
001172  4831              LDR      r0,|L1.4664|
001174  f7fffffe          BL       __aeabi_memclr
;;;371    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001178  4821              LDR      r0,|L1.4608|
00117a  f7fffffe          BL       strlen
00117e  1c44              ADDS     r4,r0,#1
001180  4623              MOV      r3,r4
001182  4a2e              LDR      r2,|L1.4668|
001184  4925              LDR      r1,|L1.4636|
001186  3154              ADDS     r1,r1,#0x54
001188  482b              LDR      r0,|L1.4664|
00118a  f7fffffe          BL       __2sprintf
;;;372    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00118e  2005              MOVS     r0,#5
001190  4b22              LDR      r3,|L1.4636|
001192  461a              MOV      r2,r3
001194  3278              ADDS     r2,r2,#0x78
001196  a12a              ADR      r1,|L1.4672|
001198  9000              STR      r0,[sp,#0]
00119a  4827              LDR      r0,|L1.4664|
00119c  f7fffffe          BL       send_SD
;;;373    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;374    //	if(strstr(uart_string_gsm,"ERROR")){
;;;375    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;376    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;377    //	}
;;;378    	
;;;379    clear();	
0011a0  f7fffffe          BL       clear
;;;380    									k2=0;									//string array counter for uart 1
0011a4  2000              MOVS     r0,#0
0011a6  4927              LDR      r1,|L1.4676|
0011a8  6008              STR      r0,[r1,#0]  ; k2
;;;381    									tout=0;	
0011aa  4921              LDR      r1,|L1.4656|
0011ac  6008              STR      r0,[r1,#0]  ; tout
;;;382    		for(k=0;k<strlen(data);k++)
0011ae  4915              LDR      r1,|L1.4612|
0011b0  6008              STR      r0,[r1,#0]  ; k
0011b2  e00b              B        |L1.4556|
                  |L1.4532|
;;;383    		{
;;;384    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0011b4  4812              LDR      r0,|L1.4608|
0011b6  4a13              LDR      r2,|L1.4612|
0011b8  6812              LDR      r2,[r2,#0]  ; k
0011ba  5c81              LDRB     r1,[r0,r2]
0011bc  4812              LDR      r0,|L1.4616|
0011be  f7fffffe          BL       uart_putchar
0011c2  4810              LDR      r0,|L1.4612|
0011c4  6800              LDR      r0,[r0,#0]            ;382  ; k
0011c6  1c40              ADDS     r0,r0,#1              ;382
0011c8  490e              LDR      r1,|L1.4612|
0011ca  6008              STR      r0,[r1,#0]            ;382  ; k
                  |L1.4556|
0011cc  480c              LDR      r0,|L1.4608|
0011ce  f7fffffe          BL       strlen
0011d2  490c              LDR      r1,|L1.4612|
0011d4  6809              LDR      r1,[r1,#0]            ;382  ; k
0011d6  4288              CMP      r0,r1                 ;382
0011d8  d8ec              BHI      |L1.4532|
;;;385    		}	
;;;386    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0011da  210a              MOVS     r1,#0xa
0011dc  480a              LDR      r0,|L1.4616|
0011de  f7fffffe          BL       uart_putchar
0011e2  210a              MOVS     r1,#0xa
0011e4  4808              LDR      r0,|L1.4616|
0011e6  f7fffffe          BL       uart_putchar
0011ea  210a              MOVS     r1,#0xa
0011ec  4806              LDR      r0,|L1.4616|
0011ee  f7fffffe          BL       uart_putchar
0011f2  210a              MOVS     r1,#0xa
0011f4  4804              LDR      r0,|L1.4616|
0011f6  f7fffffe          BL       uart_putchar
0011fa  210a              MOVS     r1,#0xa
0011fc  4802              LDR      r0,|L1.4616|
0011fe  e023              B        |L1.4680|
                  |L1.4608|
                          DCD      data
                  |L1.4612|
                          DCD      k
                  |L1.4616|
                          DCD      0x4006b000
                  |L1.4620|
                          DCD      len
                  |L1.4624|
                          DCD      ||.text||+0x474
                  |L1.4628|
                          DCD      uart_string_gsm
                  |L1.4632|
                          DCD      stcond1
                  |L1.4636|
                          DCD      ||.text||+0x870
                  |L1.4640|
                          DCD      stcond2
                  |L1.4644|
                          DCD      ||.text||+0xde4
                  |L1.4648|
                          DCD      stcond3
                  |L1.4652|
                          DCD      stcond4
                  |L1.4656|
                          DCD      tout
                  |L1.4660|
                          DCD      con1d
                  |L1.4664|
                          DCD      at_
                  |L1.4668|
                          DCD      drive
                  |L1.4672|
001240  3e00              DCB      ">",0
001242  00                DCB      0
001243  00                DCB      0
                  |L1.4676|
                          DCD      ||k2||
                  |L1.4680|
001248  f7fffffe          BL       uart_putchar
00124c  210a              MOVS     r1,#0xa
00124e  48fe              LDR      r0,|L1.5704|
001250  f7fffffe          BL       uart_putchar
001254  210a              MOVS     r1,#0xa
001256  48fc              LDR      r0,|L1.5704|
001258  f7fffffe          BL       uart_putchar
00125c  210a              MOVS     r1,#0xa
00125e  48fa              LDR      r0,|L1.5704|
001260  f7fffffe          BL       uart_putchar
001264  210a              MOVS     r1,#0xa
001266  48f8              LDR      r0,|L1.5704|
001268  f7fffffe          BL       uart_putchar
00126c  210a              MOVS     r1,#0xa
00126e  48f6              LDR      r0,|L1.5704|
001270  f7fffffe          BL       uart_putchar
001274  210a              MOVS     r1,#0xa
001276  48f4              LDR      r0,|L1.5704|
001278  f7fffffe          BL       uart_putchar
00127c  210a              MOVS     r1,#0xa
00127e  48f2              LDR      r0,|L1.5704|
001280  f7fffffe          BL       uart_putchar
001284  210a              MOVS     r1,#0xa
001286  48f0              LDR      r0,|L1.5704|
001288  f7fffffe          BL       uart_putchar
00128c  210a              MOVS     r1,#0xa
00128e  48ee              LDR      r0,|L1.5704|
001290  f7fffffe          BL       uart_putchar
001294  210a              MOVS     r1,#0xa
001296  48ec              LDR      r0,|L1.5704|
001298  f7fffffe          BL       uart_putchar
00129c  210a              MOVS     r1,#0xa
00129e  48ea              LDR      r0,|L1.5704|
0012a0  f7fffffe          BL       uart_putchar
0012a4  210a              MOVS     r1,#0xa
0012a6  48e8              LDR      r0,|L1.5704|
0012a8  f7fffffe          BL       uart_putchar
0012ac  210a              MOVS     r1,#0xa
0012ae  48e6              LDR      r0,|L1.5704|
0012b0  f7fffffe          BL       uart_putchar
0012b4  210a              MOVS     r1,#0xa
0012b6  48e4              LDR      r0,|L1.5704|
0012b8  f7fffffe          BL       uart_putchar
0012bc  210a              MOVS     r1,#0xa
0012be  48e2              LDR      r0,|L1.5704|
0012c0  f7fffffe          BL       uart_putchar
0012c4  210a              MOVS     r1,#0xa
0012c6  48e0              LDR      r0,|L1.5704|
0012c8  f7fffffe          BL       uart_putchar
0012cc  210a              MOVS     r1,#0xa
0012ce  48de              LDR      r0,|L1.5704|
0012d0  f7fffffe          BL       uart_putchar
0012d4  210a              MOVS     r1,#0xa
0012d6  48dc              LDR      r0,|L1.5704|
0012d8  f7fffffe          BL       uart_putchar
0012dc  210a              MOVS     r1,#0xa
0012de  48da              LDR      r0,|L1.5704|
0012e0  f7fffffe          BL       uart_putchar
0012e4  210a              MOVS     r1,#0xa
0012e6  48d8              LDR      r0,|L1.5704|
0012e8  f7fffffe          BL       uart_putchar
0012ec  210a              MOVS     r1,#0xa
0012ee  48d6              LDR      r0,|L1.5704|
0012f0  f7fffffe          BL       uart_putchar
0012f4  210a              MOVS     r1,#0xa
0012f6  48d4              LDR      r0,|L1.5704|
0012f8  f7fffffe          BL       uart_putchar
0012fc  210a              MOVS     r1,#0xa
0012fe  48d2              LDR      r0,|L1.5704|
001300  f7fffffe          BL       uart_putchar
001304  210a              MOVS     r1,#0xa
001306  48d0              LDR      r0,|L1.5704|
001308  f7fffffe          BL       uart_putchar
00130c  210a              MOVS     r1,#0xa
00130e  48ce              LDR      r0,|L1.5704|
001310  f7fffffe          BL       uart_putchar
001314  210a              MOVS     r1,#0xa
001316  48cc              LDR      r0,|L1.5704|
001318  f7fffffe          BL       uart_putchar
00131c  210a              MOVS     r1,#0xa
00131e  48ca              LDR      r0,|L1.5704|
001320  f7fffffe          BL       uart_putchar
001324  210a              MOVS     r1,#0xa
001326  48c8              LDR      r0,|L1.5704|
001328  f7fffffe          BL       uart_putchar
00132c  210a              MOVS     r1,#0xa
00132e  48c6              LDR      r0,|L1.5704|
001330  f7fffffe          BL       uart_putchar
001334  210a              MOVS     r1,#0xa
001336  48c4              LDR      r0,|L1.5704|
001338  f7fffffe          BL       uart_putchar
00133c  210a              MOVS     r1,#0xa
00133e  48c2              LDR      r0,|L1.5704|
001340  f7fffffe          BL       uart_putchar
001344  210a              MOVS     r1,#0xa
001346  48c0              LDR      r0,|L1.5704|
001348  f7fffffe          BL       uart_putchar
00134c  210a              MOVS     r1,#0xa
00134e  48be              LDR      r0,|L1.5704|
001350  f7fffffe          BL       uart_putchar
001354  210a              MOVS     r1,#0xa
001356  48bc              LDR      r0,|L1.5704|
001358  f7fffffe          BL       uart_putchar
00135c  210a              MOVS     r1,#0xa
00135e  48ba              LDR      r0,|L1.5704|
001360  f7fffffe          BL       uart_putchar
001364  210a              MOVS     r1,#0xa
001366  48b8              LDR      r0,|L1.5704|
001368  f7fffffe          BL       uart_putchar
00136c  210a              MOVS     r1,#0xa
00136e  48b6              LDR      r0,|L1.5704|
001370  f7fffffe          BL       uart_putchar
001374  210a              MOVS     r1,#0xa
001376  48b4              LDR      r0,|L1.5704|
001378  f7fffffe          BL       uart_putchar
00137c  210a              MOVS     r1,#0xa
00137e  48b2              LDR      r0,|L1.5704|
001380  f7fffffe          BL       uart_putchar
001384  210a              MOVS     r1,#0xa
001386  48b0              LDR      r0,|L1.5704|
001388  f7fffffe          BL       uart_putchar
00138c  210a              MOVS     r1,#0xa
00138e  48ae              LDR      r0,|L1.5704|
001390  f7fffffe          BL       uart_putchar
001394  210a              MOVS     r1,#0xa
001396  48ac              LDR      r0,|L1.5704|
001398  f7fffffe          BL       uart_putchar
00139c  210a              MOVS     r1,#0xa
00139e  48aa              LDR      r0,|L1.5704|
0013a0  f7fffffe          BL       uart_putchar
0013a4  210a              MOVS     r1,#0xa
0013a6  48a8              LDR      r0,|L1.5704|
0013a8  f7fffffe          BL       uart_putchar
0013ac  210a              MOVS     r1,#0xa
0013ae  48a6              LDR      r0,|L1.5704|
0013b0  f7fffffe          BL       uart_putchar
0013b4  210a              MOVS     r1,#0xa
0013b6  48a4              LDR      r0,|L1.5704|
0013b8  f7fffffe          BL       uart_putchar
0013bc  210a              MOVS     r1,#0xa
0013be  48a2              LDR      r0,|L1.5704|
0013c0  f7fffffe          BL       uart_putchar
0013c4  210a              MOVS     r1,#0xa
0013c6  48a0              LDR      r0,|L1.5704|
0013c8  f7fffffe          BL       uart_putchar
0013cc  210a              MOVS     r1,#0xa
0013ce  489e              LDR      r0,|L1.5704|
0013d0  f7fffffe          BL       uart_putchar
0013d4  210a              MOVS     r1,#0xa
0013d6  489c              LDR      r0,|L1.5704|
0013d8  f7fffffe          BL       uart_putchar
0013dc  210a              MOVS     r1,#0xa
0013de  489a              LDR      r0,|L1.5704|
0013e0  f7fffffe          BL       uart_putchar
0013e4  210a              MOVS     r1,#0xa
0013e6  4898              LDR      r0,|L1.5704|
0013e8  f7fffffe          BL       uart_putchar
;;;387    									//memset(data,0,1000);
;;;388    														//timer counts to wait for characters in uart 1 									
;;;389    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0013ec  bf00              NOP      
                  |L1.5102|
0013ee  4997              LDR      r1,|L1.5708|
0013f0  4897              LDR      r0,|L1.5712|
0013f2  f7fffffe          BL       strstr
0013f6  2800              CMP      r0,#0
0013f8  d10a              BNE      |L1.5136|
0013fa  4994              LDR      r1,|L1.5708|
0013fc  398c              SUBS     r1,r1,#0x8c
0013fe  4894              LDR      r0,|L1.5712|
001400  f7fffffe          BL       strstr
001404  2800              CMP      r0,#0
001406  d103              BNE      |L1.5136|
001408  4892              LDR      r0,|L1.5716|
00140a  6800              LDR      r0,[r0,#0]  ; tout
00140c  2805              CMP      r0,#5
00140e  ddee              BLE      |L1.5102|
                  |L1.5136|
;;;390    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;391    									}
;;;392    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001410  f7fffffe          BL       clear
;;;393    									//clear();
;;;394    									memset(data,0,strlen(data));
001414  4890              LDR      r0,|L1.5720|
001416  f7fffffe          BL       strlen
00141a  4604              MOV      r4,r0
00141c  4621              MOV      r1,r4
00141e  488e              LDR      r0,|L1.5720|
001420  f7fffffe          BL       __aeabi_memclr
;;;395    									clear();
001424  f7fffffe          BL       clear
001428  e001              B        |L1.5166|
                  |L1.5162|
;;;396    
;;;397    								
;;;398    									
;;;399    									
;;;400    									//log_it();			//otherwize log it					
;;;401    								}
;;;402    
;;;403    																
;;;404    //delay(50);
;;;405    
;;;406    //else{
;;;407    //log_it();}
;;;408    								
;;;409    								
;;;410    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;411    	else
;;;412    	{
;;;413    		send_chunk();
00142a  f7fffffe          BL       send_chunk
                  |L1.5166|
;;;414    	}		
;;;415    								
;;;416    								
;;;417    								
;;;418    	memset(data,0,strlen(data));	
00142e  488a              LDR      r0,|L1.5720|
001430  f7fffffe          BL       strlen
001434  4604              MOV      r4,r0
001436  4621              MOV      r1,r4
001438  4887              LDR      r0,|L1.5720|
00143a  f7fffffe          BL       __aeabi_memclr
;;;419    	uart_putchar(UART1_BASE_PTR, 0x1A);
00143e  211a              MOVS     r1,#0x1a
001440  4881              LDR      r0,|L1.5704|
001442  f7fffffe          BL       uart_putchar
;;;420    	
;;;421    }
001446  bd38              POP      {r3-r5,pc}
;;;422    	
                          ENDP

                  send_tcp_bal PROC
;;;434    
;;;435    void send_tcp_bal()
001448  b538              PUSH     {r3-r5,lr}
;;;436    {	
;;;437    memset(stcond1,0,strlen(stcond1));	
00144a  4884              LDR      r0,|L1.5724|
00144c  6800              LDR      r0,[r0,#0]  ; stcond1
00144e  f7fffffe          BL       strlen
001452  4604              MOV      r4,r0
001454  4621              MOV      r1,r4
001456  4881              LDR      r0,|L1.5724|
001458  6800              LDR      r0,[r0,#0]  ; stcond1
00145a  f7fffffe          BL       __aeabi_memclr
;;;438    memset(con1d,0,strlen(con1d));	
00145e  4880              LDR      r0,|L1.5728|
001460  6800              LDR      r0,[r0,#0]  ; con1d
001462  f7fffffe          BL       strlen
001466  4604              MOV      r4,r0
001468  4621              MOV      r1,r4
00146a  487d              LDR      r0,|L1.5728|
00146c  6800              LDR      r0,[r0,#0]  ; con1d
00146e  f7fffffe          BL       __aeabi_memclr
;;;439    	
;;;440    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;441    
;;;442    								cond=mystrstr(uart_string_gsm,'>');
001472  213e              MOVS     r1,#0x3e
001474  4876              LDR      r0,|L1.5712|
001476  f7fffffe          BL       mystrstr
00147a  497a              LDR      r1,|L1.5732|
00147c  7008              STRB     r0,[r1,#0]
;;;443    								if(cond)	
00147e  4608              MOV      r0,r1
001480  7800              LDRB     r0,[r0,#0]  ; cond
001482  2800              CMP      r0,#0
001484  d07e              BEQ      |L1.5508|
;;;444    								{
;;;445    									
;;;446    									clear();
001486  f7fffffe          BL       clear
;;;447    									memset(uart_string_gsm,0,5000);
00148a  4977              LDR      r1,|L1.5736|
00148c  4870              LDR      r0,|L1.5712|
00148e  f7fffffe          BL       __aeabi_memclr
;;;448    									strcat(data,"\n\n");
001492  a176              ADR      r1,|L1.5740|
001494  4870              LDR      r0,|L1.5720|
001496  f7fffffe          BL       strcat
;;;449    									len=strlen(data);
00149a  486f              LDR      r0,|L1.5720|
00149c  f7fffffe          BL       strlen
0014a0  4973              LDR      r1,|L1.5744|
0014a2  6008              STR      r0,[r1,#0]  ; len
;;;450    									tout=0;
0014a4  2000              MOVS     r0,#0
0014a6  496b              LDR      r1,|L1.5716|
0014a8  6008              STR      r0,[r1,#0]  ; tout
;;;451    									k2=0;
0014aa  4972              LDR      r1,|L1.5748|
0014ac  6008              STR      r0,[r1,#0]  ; k2
;;;452    									for(k=0;k<len;k++)
0014ae  4972              LDR      r1,|L1.5752|
0014b0  6008              STR      r0,[r1,#0]  ; k
0014b2  e00b              B        |L1.5324|
                  |L1.5300|
;;;453    									{
;;;454    										uart_putchar(UART1_BASE_PTR, data[k]);
0014b4  4868              LDR      r0,|L1.5720|
0014b6  4a70              LDR      r2,|L1.5752|
0014b8  6812              LDR      r2,[r2,#0]  ; k
0014ba  5c81              LDRB     r1,[r0,r2]
0014bc  4862              LDR      r0,|L1.5704|
0014be  f7fffffe          BL       uart_putchar
0014c2  486d              LDR      r0,|L1.5752|
0014c4  6800              LDR      r0,[r0,#0]            ;452  ; k
0014c6  1c40              ADDS     r0,r0,#1              ;452
0014c8  496b              LDR      r1,|L1.5752|
0014ca  6008              STR      r0,[r1,#0]            ;452  ; k
                  |L1.5324|
0014cc  486a              LDR      r0,|L1.5752|
0014ce  6800              LDR      r0,[r0,#0]            ;452  ; k
0014d0  4967              LDR      r1,|L1.5744|
0014d2  6809              LDR      r1,[r1,#0]            ;452  ; len
0014d4  4288              CMP      r0,r1                 ;452
0014d6  dbed              BLT      |L1.5300|
;;;455    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0014d8  211a              MOVS     r1,#0x1a
0014da  485b              LDR      r0,|L1.5704|
0014dc  f7fffffe          BL       uart_putchar
0014e0  211a              MOVS     r1,#0x1a
0014e2  4859              LDR      r0,|L1.5704|
0014e4  f7fffffe          BL       uart_putchar
;;;456    									do
0014e8  bf00              NOP      
                  |L1.5354|
;;;457    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0014ea  4964              LDR      r1,|L1.5756|
0014ec  4858              LDR      r0,|L1.5712|
0014ee  f7fffffe          BL       strstr
0014f2  495a              LDR      r1,|L1.5724|
0014f4  6008              STR      r0,[r1,#0]  ; stcond1
;;;458    																	stcond2=strstr(uart_string_gsm, "ERROR");
0014f6  4955              LDR      r1,|L1.5708|
0014f8  398c              SUBS     r1,r1,#0x8c
0014fa  4855              LDR      r0,|L1.5712|
0014fc  f7fffffe          BL       strstr
001500  495f              LDR      r1,|L1.5760|
001502  6008              STR      r0,[r1,#0]  ; stcond2
;;;459    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001504  495f              LDR      r1,|L1.5764|
001506  4852              LDR      r0,|L1.5712|
001508  f7fffffe          BL       strstr
00150c  495e              LDR      r1,|L1.5768|
00150e  6008              STR      r0,[r1,#0]  ; stcond3
;;;460    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001510  494e              LDR      r1,|L1.5708|
001512  3970              SUBS     r1,r1,#0x70
001514  484e              LDR      r0,|L1.5712|
001516  f7fffffe          BL       strstr
00151a  495c              LDR      r1,|L1.5772|
00151c  6008              STR      r0,[r1,#0]  ; stcond4
;;;461    																	
;;;462    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
00151e  4858              LDR      r0,|L1.5760|
001520  6800              LDR      r0,[r0,#0]  ; stcond2
001522  2800              CMP      r0,#0
001524  d10f              BNE      |L1.5446|
001526  4858              LDR      r0,|L1.5768|
001528  6800              LDR      r0,[r0,#0]  ; stcond3
00152a  2800              CMP      r0,#0
00152c  d10b              BNE      |L1.5446|
00152e  4608              MOV      r0,r1
001530  6800              LDR      r0,[r0,#0]  ; stcond4
001532  2800              CMP      r0,#0
001534  d107              BNE      |L1.5446|
001536  4849              LDR      r0,|L1.5724|
001538  6800              LDR      r0,[r0,#0]  ; stcond1
00153a  2800              CMP      r0,#0
00153c  d103              BNE      |L1.5446|
00153e  4845              LDR      r0,|L1.5716|
001540  6800              LDR      r0,[r0,#0]  ; tout
001542  2805              CMP      r0,#5
001544  ddd1              BLE      |L1.5354|
                  |L1.5446|
;;;463    																//delay(10);clear();
;;;464    														uart_putchar(UART1_BASE_PTR,0x1A);
001546  211a              MOVS     r1,#0x1a
001548  483f              LDR      r0,|L1.5704|
00154a  f7fffffe          BL       uart_putchar
;;;465    												//delay(10);
;;;466    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00154e  211a              MOVS     r1,#0x1a
001550  483d              LDR      r0,|L1.5704|
001552  f7fffffe          BL       uart_putchar
001556  211a              MOVS     r1,#0x1a
001558  483b              LDR      r0,|L1.5704|
00155a  f7fffffe          BL       uart_putchar
00155e  211a              MOVS     r1,#0x1a
001560  4839              LDR      r0,|L1.5704|
001562  f7fffffe          BL       uart_putchar
;;;467    						
;;;468    									
;;;469    									
;;;470    									
;;;471    									if(flagch==1){		int_erval=temp;flagch=0;	}
001566  484a              LDR      r0,|L1.5776|
001568  6800              LDR      r0,[r0,#0]  ; flagch
00156a  2801              CMP      r0,#1
00156c  d106              BNE      |L1.5500|
00156e  4849              LDR      r0,|L1.5780|
001570  6800              LDR      r0,[r0,#0]  ; temp
001572  4949              LDR      r1,|L1.5784|
001574  6008              STR      r0,[r1,#0]  ; int_erval
001576  2000              MOVS     r0,#0
001578  4945              LDR      r1,|L1.5776|
00157a  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.5500|
;;;472    									
;;;473    									
;;;474    									
;;;475    
;;;476    //									for(k=0;k<len;k++)
;;;477    //									{
;;;478    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;479    //									}
;;;480    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;481    
;;;482    //									
;;;483    //													k2=0;									//string array counter for uart 1
;;;484    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;485    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;486    //																{
;;;487    //																	timeout--;
;;;488    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;489    //
;;;490    									delay(20);															
00157c  2014              MOVS     r0,#0x14
00157e  f7fffffe          BL       delay
;;;491    stcond1=strstr(uart_string_gsm,"SEND OK"); 
001582  e000              B        |L1.5510|
                  |L1.5508|
001584  e005              B        |L1.5522|
                  |L1.5510|
001586  493d              LDR      r1,|L1.5756|
001588  4831              LDR      r0,|L1.5712|
00158a  f7fffffe          BL       strstr
00158e  4933              LDR      r1,|L1.5724|
001590  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.5522|
;;;492    
;;;493    								}
;;;494    
;;;495      //checks for send ok
;;;496    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
001592  4832              LDR      r0,|L1.5724|
001594  6800              LDR      r0,[r0,#0]  ; stcond1
001596  2800              CMP      r0,#0
001598  d001              BEQ      |L1.5534|
00159a  f000ff2d          BL       |L1.9208|
                  |L1.5534|
;;;497    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00159e  211a              MOVS     r1,#0x1a
0015a0  4829              LDR      r0,|L1.5704|
0015a2  f7fffffe          BL       uart_putchar
0015a6  f7fffffe          BL       clear
0015aa  200a              MOVS     r0,#0xa
0015ac  f7fffffe          BL       delay
;;;498    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015b0  211a              MOVS     r1,#0x1a
0015b2  4825              LDR      r0,|L1.5704|
0015b4  f7fffffe          BL       uart_putchar
0015b8  f7fffffe          BL       clear
0015bc  200a              MOVS     r0,#0xa
0015be  f7fffffe          BL       delay
;;;499    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015c2  211a              MOVS     r1,#0x1a
0015c4  4820              LDR      r0,|L1.5704|
0015c6  f7fffffe          BL       uart_putchar
0015ca  f7fffffe          BL       clear
0015ce  200a              MOVS     r0,#0xa
0015d0  f7fffffe          BL       delay
;;;500    							//remove_all_chars(data, '\n', '\n');
;;;501    	
;;;502    		//strcat(data,"CH\n");	
;;;503    		
;;;504    	
;;;505    	
;;;506    	delay(100);
0015d4  2064              MOVS     r0,#0x64
0015d6  f7fffffe          BL       delay
;;;507    		clear();//memset(uart_string_gsm,0,5000);
0015da  f7fffffe          BL       clear
;;;508    	
;;;509    	memset(at_,0,100);
0015de  2164              MOVS     r1,#0x64
0015e0  482e              LDR      r0,|L1.5788|
0015e2  f7fffffe          BL       __aeabi_memclr
;;;510    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0015e6  481c              LDR      r0,|L1.5720|
0015e8  f7fffffe          BL       strlen
0015ec  1c44              ADDS     r4,r0,#1
0015ee  4623              MOV      r3,r4
0015f0  4a2b              LDR      r2,|L1.5792|
0015f2  4916              LDR      r1,|L1.5708|
0015f4  3938              SUBS     r1,r1,#0x38
0015f6  4829              LDR      r0,|L1.5788|
0015f8  f7fffffe          BL       __2sprintf
;;;511    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0015fc  2005              MOVS     r0,#5
0015fe  4b13              LDR      r3,|L1.5708|
001600  3b8c              SUBS     r3,r3,#0x8c
001602  461a              MOV      r2,r3
001604  3278              ADDS     r2,r2,#0x78
001606  a127              ADR      r1,|L1.5796|
001608  9000              STR      r0,[sp,#0]
00160a  4824              LDR      r0,|L1.5788|
00160c  f7fffffe          BL       send_SD
;;;512    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;513    //	if(strstr(uart_string_gsm,"ERROR")){
;;;514    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;515    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;516    //	}
;;;517    	
;;;518    clear();	
001610  f7fffffe          BL       clear
;;;519    									k2=0;									//string array counter for uart 1
001614  2000              MOVS     r0,#0
001616  4917              LDR      r1,|L1.5748|
001618  6008              STR      r0,[r1,#0]  ; k2
;;;520    									tout=0;	
00161a  490e              LDR      r1,|L1.5716|
00161c  6008              STR      r0,[r1,#0]  ; tout
;;;521    		for(k=0;k<strlen(data);k++)
00161e  4916              LDR      r1,|L1.5752|
001620  6008              STR      r0,[r1,#0]  ; k
001622  e00b              B        |L1.5692|
                  |L1.5668|
;;;522    		{
;;;523    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001624  480c              LDR      r0,|L1.5720|
001626  4a14              LDR      r2,|L1.5752|
001628  6812              LDR      r2,[r2,#0]  ; k
00162a  5c81              LDRB     r1,[r0,r2]
00162c  4806              LDR      r0,|L1.5704|
00162e  f7fffffe          BL       uart_putchar
001632  4811              LDR      r0,|L1.5752|
001634  6800              LDR      r0,[r0,#0]            ;521  ; k
001636  1c40              ADDS     r0,r0,#1              ;521
001638  490f              LDR      r1,|L1.5752|
00163a  6008              STR      r0,[r1,#0]            ;521  ; k
                  |L1.5692|
00163c  4806              LDR      r0,|L1.5720|
00163e  f7fffffe          BL       strlen
001642  490d              LDR      r1,|L1.5752|
001644  6809              LDR      r1,[r1,#0]            ;521  ; k
001646  e02f              B        |L1.5800|
                  |L1.5704|
                          DCD      0x4006b000
                  |L1.5708|
                          DCD      ||.text||+0x8fc
                  |L1.5712|
                          DCD      uart_string_gsm
                  |L1.5716|
                          DCD      tout
                  |L1.5720|
                          DCD      data
                  |L1.5724|
                          DCD      stcond1
                  |L1.5728|
                          DCD      con1d
                  |L1.5732|
                          DCD      cond
                  |L1.5736|
                          DCD      0x00001388
                  |L1.5740|
00166c  0a0a00            DCB      "\n\n",0
00166f  00                DCB      0
                  |L1.5744|
                          DCD      len
                  |L1.5748|
                          DCD      ||k2||
                  |L1.5752|
                          DCD      k
                  |L1.5756|
                          DCD      ||.text||+0x474
                  |L1.5760|
                          DCD      stcond2
                  |L1.5764|
                          DCD      ||.text||+0xde4
                  |L1.5768|
                          DCD      stcond3
                  |L1.5772|
                          DCD      stcond4
                  |L1.5776|
                          DCD      flagch
                  |L1.5780|
                          DCD      temp
                  |L1.5784|
                          DCD      int_erval
                  |L1.5788|
                          DCD      at_
                  |L1.5792|
                          DCD      drive
                  |L1.5796|
0016a4  3e00              DCB      ">",0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  4288              CMP      r0,r1                 ;521
0016aa  d8bb              BHI      |L1.5668|
;;;524    		}	
;;;525    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0016ac  210a              MOVS     r1,#0xa
0016ae  48fe              LDR      r0,|L1.6824|
0016b0  f7fffffe          BL       uart_putchar
0016b4  210a              MOVS     r1,#0xa
0016b6  48fc              LDR      r0,|L1.6824|
0016b8  f7fffffe          BL       uart_putchar
0016bc  210a              MOVS     r1,#0xa
0016be  48fa              LDR      r0,|L1.6824|
0016c0  f7fffffe          BL       uart_putchar
0016c4  210a              MOVS     r1,#0xa
0016c6  48f8              LDR      r0,|L1.6824|
0016c8  f7fffffe          BL       uart_putchar
0016cc  210a              MOVS     r1,#0xa
0016ce  48f6              LDR      r0,|L1.6824|
0016d0  f7fffffe          BL       uart_putchar
0016d4  210a              MOVS     r1,#0xa
0016d6  48f4              LDR      r0,|L1.6824|
0016d8  f7fffffe          BL       uart_putchar
0016dc  210a              MOVS     r1,#0xa
0016de  48f2              LDR      r0,|L1.6824|
0016e0  f7fffffe          BL       uart_putchar
0016e4  210a              MOVS     r1,#0xa
0016e6  48f0              LDR      r0,|L1.6824|
0016e8  f7fffffe          BL       uart_putchar
0016ec  210a              MOVS     r1,#0xa
0016ee  48ee              LDR      r0,|L1.6824|
0016f0  f7fffffe          BL       uart_putchar
0016f4  210a              MOVS     r1,#0xa
0016f6  48ec              LDR      r0,|L1.6824|
0016f8  f7fffffe          BL       uart_putchar
0016fc  210a              MOVS     r1,#0xa
0016fe  48ea              LDR      r0,|L1.6824|
001700  f7fffffe          BL       uart_putchar
001704  210a              MOVS     r1,#0xa
001706  48e8              LDR      r0,|L1.6824|
001708  f7fffffe          BL       uart_putchar
00170c  210a              MOVS     r1,#0xa
00170e  48e6              LDR      r0,|L1.6824|
001710  f7fffffe          BL       uart_putchar
001714  210a              MOVS     r1,#0xa
001716  48e4              LDR      r0,|L1.6824|
001718  f7fffffe          BL       uart_putchar
00171c  210a              MOVS     r1,#0xa
00171e  48e2              LDR      r0,|L1.6824|
001720  f7fffffe          BL       uart_putchar
001724  210a              MOVS     r1,#0xa
001726  48e0              LDR      r0,|L1.6824|
001728  f7fffffe          BL       uart_putchar
00172c  210a              MOVS     r1,#0xa
00172e  48de              LDR      r0,|L1.6824|
001730  f7fffffe          BL       uart_putchar
001734  210a              MOVS     r1,#0xa
001736  48dc              LDR      r0,|L1.6824|
001738  f7fffffe          BL       uart_putchar
00173c  210a              MOVS     r1,#0xa
00173e  48da              LDR      r0,|L1.6824|
001740  f7fffffe          BL       uart_putchar
001744  210a              MOVS     r1,#0xa
001746  48d8              LDR      r0,|L1.6824|
001748  f7fffffe          BL       uart_putchar
00174c  210a              MOVS     r1,#0xa
00174e  48d6              LDR      r0,|L1.6824|
001750  f7fffffe          BL       uart_putchar
001754  210a              MOVS     r1,#0xa
001756  48d4              LDR      r0,|L1.6824|
001758  f7fffffe          BL       uart_putchar
00175c  210a              MOVS     r1,#0xa
00175e  48d2              LDR      r0,|L1.6824|
001760  f7fffffe          BL       uart_putchar
001764  210a              MOVS     r1,#0xa
001766  48d0              LDR      r0,|L1.6824|
001768  f7fffffe          BL       uart_putchar
00176c  210a              MOVS     r1,#0xa
00176e  48ce              LDR      r0,|L1.6824|
001770  f7fffffe          BL       uart_putchar
001774  210a              MOVS     r1,#0xa
001776  48cc              LDR      r0,|L1.6824|
001778  f7fffffe          BL       uart_putchar
00177c  210a              MOVS     r1,#0xa
00177e  48ca              LDR      r0,|L1.6824|
001780  f7fffffe          BL       uart_putchar
001784  210a              MOVS     r1,#0xa
001786  48c8              LDR      r0,|L1.6824|
001788  f7fffffe          BL       uart_putchar
00178c  210a              MOVS     r1,#0xa
00178e  48c6              LDR      r0,|L1.6824|
001790  f7fffffe          BL       uart_putchar
001794  210a              MOVS     r1,#0xa
001796  48c4              LDR      r0,|L1.6824|
001798  f7fffffe          BL       uart_putchar
00179c  210a              MOVS     r1,#0xa
00179e  48c2              LDR      r0,|L1.6824|
0017a0  f7fffffe          BL       uart_putchar
0017a4  210a              MOVS     r1,#0xa
0017a6  48c0              LDR      r0,|L1.6824|
0017a8  f7fffffe          BL       uart_putchar
0017ac  210a              MOVS     r1,#0xa
0017ae  48be              LDR      r0,|L1.6824|
0017b0  f7fffffe          BL       uart_putchar
0017b4  210a              MOVS     r1,#0xa
0017b6  48bc              LDR      r0,|L1.6824|
0017b8  f7fffffe          BL       uart_putchar
0017bc  210a              MOVS     r1,#0xa
0017be  48ba              LDR      r0,|L1.6824|
0017c0  f7fffffe          BL       uart_putchar
0017c4  210a              MOVS     r1,#0xa
0017c6  48b8              LDR      r0,|L1.6824|
0017c8  f7fffffe          BL       uart_putchar
0017cc  210a              MOVS     r1,#0xa
0017ce  48b6              LDR      r0,|L1.6824|
0017d0  f7fffffe          BL       uart_putchar
0017d4  210a              MOVS     r1,#0xa
0017d6  48b4              LDR      r0,|L1.6824|
0017d8  f7fffffe          BL       uart_putchar
0017dc  210a              MOVS     r1,#0xa
0017de  48b2              LDR      r0,|L1.6824|
0017e0  f7fffffe          BL       uart_putchar
0017e4  210a              MOVS     r1,#0xa
0017e6  48b0              LDR      r0,|L1.6824|
0017e8  f7fffffe          BL       uart_putchar
0017ec  210a              MOVS     r1,#0xa
0017ee  48ae              LDR      r0,|L1.6824|
0017f0  f7fffffe          BL       uart_putchar
0017f4  210a              MOVS     r1,#0xa
0017f6  48ac              LDR      r0,|L1.6824|
0017f8  f7fffffe          BL       uart_putchar
0017fc  210a              MOVS     r1,#0xa
0017fe  48aa              LDR      r0,|L1.6824|
001800  f7fffffe          BL       uart_putchar
001804  210a              MOVS     r1,#0xa
001806  48a8              LDR      r0,|L1.6824|
001808  f7fffffe          BL       uart_putchar
00180c  210a              MOVS     r1,#0xa
00180e  48a6              LDR      r0,|L1.6824|
001810  f7fffffe          BL       uart_putchar
001814  210a              MOVS     r1,#0xa
001816  48a4              LDR      r0,|L1.6824|
001818  f7fffffe          BL       uart_putchar
00181c  210a              MOVS     r1,#0xa
00181e  48a2              LDR      r0,|L1.6824|
001820  f7fffffe          BL       uart_putchar
001824  210a              MOVS     r1,#0xa
001826  48a0              LDR      r0,|L1.6824|
001828  f7fffffe          BL       uart_putchar
00182c  210a              MOVS     r1,#0xa
00182e  489e              LDR      r0,|L1.6824|
001830  f7fffffe          BL       uart_putchar
001834  210a              MOVS     r1,#0xa
001836  489c              LDR      r0,|L1.6824|
001838  f7fffffe          BL       uart_putchar
00183c  210a              MOVS     r1,#0xa
00183e  489a              LDR      r0,|L1.6824|
001840  f7fffffe          BL       uart_putchar
001844  210a              MOVS     r1,#0xa
001846  4898              LDR      r0,|L1.6824|
001848  f7fffffe          BL       uart_putchar
00184c  210a              MOVS     r1,#0xa
00184e  4896              LDR      r0,|L1.6824|
001850  f7fffffe          BL       uart_putchar
001854  210a              MOVS     r1,#0xa
001856  4894              LDR      r0,|L1.6824|
001858  f7fffffe          BL       uart_putchar
00185c  210a              MOVS     r1,#0xa
00185e  4892              LDR      r0,|L1.6824|
001860  f7fffffe          BL       uart_putchar
001864  210a              MOVS     r1,#0xa
001866  4890              LDR      r0,|L1.6824|
001868  f7fffffe          BL       uart_putchar
00186c  210a              MOVS     r1,#0xa
00186e  488e              LDR      r0,|L1.6824|
001870  f7fffffe          BL       uart_putchar
;;;526    									//memset(data,0,1000);
;;;527    														//timer counts to wait for characters in uart 1 									
;;;528    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001874  bf00              NOP      
                  |L1.6262|
001876  498d              LDR      r1,|L1.6828|
001878  488d              LDR      r0,|L1.6832|
00187a  f7fffffe          BL       strstr
00187e  2800              CMP      r0,#0
001880  d10a              BNE      |L1.6296|
001882  498a              LDR      r1,|L1.6828|
001884  398c              SUBS     r1,r1,#0x8c
001886  488a              LDR      r0,|L1.6832|
001888  f7fffffe          BL       strstr
00188c  2800              CMP      r0,#0
00188e  d103              BNE      |L1.6296|
001890  4888              LDR      r0,|L1.6836|
001892  6800              LDR      r0,[r0,#0]  ; tout
001894  2805              CMP      r0,#5
001896  ddee              BLE      |L1.6262|
                  |L1.6296|
;;;529    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;530    									}
;;;531    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001898  f7fffffe          BL       clear
;;;532    									//clear();
;;;533    									memset(data,0,strlen(data));
00189c  4886              LDR      r0,|L1.6840|
00189e  f7fffffe          BL       strlen
0018a2  4604              MOV      r4,r0
0018a4  4621              MOV      r1,r4
0018a6  4884              LDR      r0,|L1.6840|
0018a8  f7fffffe          BL       __aeabi_memclr
;;;534    									clear();
0018ac  f7fffffe          BL       clear
;;;535    
;;;536    								
;;;537    	
;;;538    	
;;;539    	//log_it();		                         //logging
;;;540    		memset(data,0,strlen(data));	
0018b0  4881              LDR      r0,|L1.6840|
0018b2  f7fffffe          BL       strlen
0018b6  4604              MOV      r4,r0
0018b8  4621              MOV      r1,r4
0018ba  487f              LDR      r0,|L1.6840|
0018bc  f7fffffe          BL       __aeabi_memclr
;;;541    
;;;542    					   	if(flagch!=1){
0018c0  487e              LDR      r0,|L1.6844|
0018c2  6800              LDR      r0,[r0,#0]  ; flagch
0018c4  2801              CMP      r0,#1
0018c6  d009              BEQ      |L1.6364|
;;;543    							temp=int_erval;				
0018c8  487d              LDR      r0,|L1.6848|
0018ca  6800              LDR      r0,[r0,#0]  ; int_erval
0018cc  497d              LDR      r1,|L1.6852|
0018ce  6008              STR      r0,[r1,#0]  ; temp
;;;544    							int_erval=4;
0018d0  2004              MOVS     r0,#4
0018d2  497b              LDR      r1,|L1.6848|
0018d4  6008              STR      r0,[r1,#0]  ; int_erval
;;;545    							flagch=1;}
0018d6  2001              MOVS     r0,#1
0018d8  4978              LDR      r1,|L1.6844|
0018da  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.6364|
;;;546    							clear();	
0018dc  f7fffffe          BL       clear
;;;547    									GPS_COLLECT();
0018e0  f7fffffe          BL       GPS_COLLECT
;;;548    									strcat(data,"CH\n");	
0018e4  4971              LDR      r1,|L1.6828|
0018e6  3944              SUBS     r1,r1,#0x44
0018e8  4873              LDR      r0,|L1.6840|
0018ea  f7fffffe          BL       strcat
;;;549    
;;;550    //*************************************tcp_initialization();//reinitialization************************//
;;;551    
;;;552    	
;;;553    msg_sim800(); 
0018ee  f7fffffe          BL       msg_sim800
;;;554    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0018f2  2005              MOVS     r0,#5
0018f4  4b6d              LDR      r3,|L1.6828|
0018f6  3b8c              SUBS     r3,r3,#0x8c
0018f8  461a              MOV      r2,r3
0018fa  3278              ADDS     r2,r2,#0x78
0018fc  a172              ADR      r1,|L1.6856|
0018fe  9000              STR      r0,[sp,#0]
001900  4610              MOV      r0,r2
001902  3020              ADDS     r0,r0,#0x20
001904  f7fffffe          BL       send_GSM
;;;555    delay(100);
001908  2064              MOVS     r0,#0x64
00190a  f7fffffe          BL       delay
;;;556    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00190e  2004              MOVS     r0,#4
001910  4b66              LDR      r3,|L1.6828|
001912  3b8c              SUBS     r3,r3,#0x8c
001914  461a              MOV      r2,r3
001916  32a8              ADDS     r2,r2,#0xa8
001918  a16b              ADR      r1,|L1.6856|
00191a  9000              STR      r0,[sp,#0]
00191c  4610              MOV      r0,r2
00191e  3014              ADDS     r0,r0,#0x14
001920  f7fffffe          BL       send_GSM
;;;557    GPS_COLLECT2();
001924  f7fffffe          BL       GPS_COLLECT2
;;;558    strcat(data,"CH\n");		
001928  4960              LDR      r1,|L1.6828|
00192a  3944              SUBS     r1,r1,#0x44
00192c  4862              LDR      r0,|L1.6840|
00192e  f7fffffe          BL       strcat
;;;559    GPS_COLLECT2();
001932  f7fffffe          BL       GPS_COLLECT2
;;;560    strcat(data,"CH\n");	
001936  495d              LDR      r1,|L1.6828|
001938  3944              SUBS     r1,r1,#0x44
00193a  485f              LDR      r0,|L1.6840|
00193c  f7fffffe          BL       strcat
;;;561    GPS_COLLECT2();
001940  f7fffffe          BL       GPS_COLLECT2
;;;562    strcat(data,"CH\n");
001944  4959              LDR      r1,|L1.6828|
001946  3944              SUBS     r1,r1,#0x44
001948  485b              LDR      r0,|L1.6840|
00194a  f7fffffe          BL       strcat
;;;563    cond201=(strstr(uart_string_gsm, "OK"));
00194e  a15e              ADR      r1,|L1.6856|
001950  4857              LDR      r0,|L1.6832|
001952  f7fffffe          BL       strstr
001956  495d              LDR      r1,|L1.6860|
001958  6008              STR      r0,[r1,#0]  ; cond201
;;;564    cond200=(strstr(uart_string_gsm, "ERROR"));
00195a  4954              LDR      r1,|L1.6828|
00195c  398c              SUBS     r1,r1,#0x8c
00195e  4854              LDR      r0,|L1.6832|
001960  f7fffffe          BL       strstr
001964  495a              LDR      r1,|L1.6864|
001966  6008              STR      r0,[r1,#0]  ; cond200
;;;565    if((!(cond201|| cond200 ))  && sleep_flag != 1)
001968  4858              LDR      r0,|L1.6860|
00196a  6800              LDR      r0,[r0,#0]  ; cond201
00196c  2800              CMP      r0,#0
                  |L1.6510|
00196e  d17d              BNE      |L1.6764|
001970  4608              MOV      r0,r1
001972  6800              LDR      r0,[r0,#0]  ; cond200
001974  2800              CMP      r0,#0
001976  d1fa              BNE      |L1.6510|
001978  4856              LDR      r0,|L1.6868|
00197a  6800              LDR      r0,[r0,#0]  ; sleep_flag
00197c  2801              CMP      r0,#1
00197e  d075              BEQ      |L1.6764|
;;;566    {
;;;567    delay(100);
001980  2064              MOVS     r0,#0x64
001982  f7fffffe          BL       delay
;;;568    clear();//memset(uart_string_gsm,0,5000);
001986  f7fffffe          BL       clear
;;;569    memset(at_,0,100);
00198a  2164              MOVS     r1,#0x64
00198c  4852              LDR      r0,|L1.6872|
00198e  f7fffffe          BL       __aeabi_memclr
;;;570    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001992  4849              LDR      r0,|L1.6840|
001994  f7fffffe          BL       strlen
001998  1c44              ADDS     r4,r0,#1
00199a  4623              MOV      r3,r4
00199c  4a4f              LDR      r2,|L1.6876|
00199e  4943              LDR      r1,|L1.6828|
0019a0  3938              SUBS     r1,r1,#0x38
0019a2  484d              LDR      r0,|L1.6872|
0019a4  f7fffffe          BL       __2sprintf
;;;571    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0019a8  2005              MOVS     r0,#5
0019aa  4b40              LDR      r3,|L1.6828|
0019ac  3b8c              SUBS     r3,r3,#0x8c
0019ae  461a              MOV      r2,r3
0019b0  3278              ADDS     r2,r2,#0x78
0019b2  a14b              ADR      r1,|L1.6880|
0019b4  9000              STR      r0,[sp,#0]
0019b6  4848              LDR      r0,|L1.6872|
0019b8  f7fffffe          BL       send_SD
;;;572    clear();	
0019bc  f7fffffe          BL       clear
;;;573    k2=0;									//string array counter for uart 1
0019c0  2000              MOVS     r0,#0
0019c2  4948              LDR      r1,|L1.6884|
0019c4  6008              STR      r0,[r1,#0]  ; k2
;;;574    tout=0;	
0019c6  493b              LDR      r1,|L1.6836|
0019c8  6008              STR      r0,[r1,#0]  ; tout
;;;575    for(k=0;k<strlen(data);k++)
0019ca  4947              LDR      r1,|L1.6888|
0019cc  6008              STR      r0,[r1,#0]  ; k
0019ce  e00b              B        |L1.6632|
                  |L1.6608|
;;;576    {
;;;577    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0019d0  4839              LDR      r0,|L1.6840|
0019d2  4a45              LDR      r2,|L1.6888|
0019d4  6812              LDR      r2,[r2,#0]  ; k
0019d6  5c81              LDRB     r1,[r0,r2]
0019d8  4833              LDR      r0,|L1.6824|
0019da  f7fffffe          BL       uart_putchar
0019de  4842              LDR      r0,|L1.6888|
0019e0  6800              LDR      r0,[r0,#0]            ;575  ; k
0019e2  1c40              ADDS     r0,r0,#1              ;575
0019e4  4940              LDR      r1,|L1.6888|
0019e6  6008              STR      r0,[r1,#0]            ;575  ; k
                  |L1.6632|
0019e8  4833              LDR      r0,|L1.6840|
0019ea  f7fffffe          BL       strlen
0019ee  493e              LDR      r1,|L1.6888|
0019f0  6809              LDR      r1,[r1,#0]            ;575  ; k
0019f2  4288              CMP      r0,r1                 ;575
0019f4  d8ec              BHI      |L1.6608|
;;;578    }	
;;;579    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0019f6  210a              MOVS     r1,#0xa
0019f8  482b              LDR      r0,|L1.6824|
0019fa  f7fffffe          BL       uart_putchar
0019fe  210a              MOVS     r1,#0xa
001a00  4829              LDR      r0,|L1.6824|
001a02  f7fffffe          BL       uart_putchar
001a06  210a              MOVS     r1,#0xa
001a08  4827              LDR      r0,|L1.6824|
001a0a  f7fffffe          BL       uart_putchar
001a0e  210a              MOVS     r1,#0xa
001a10  4825              LDR      r0,|L1.6824|
001a12  f7fffffe          BL       uart_putchar
001a16  210a              MOVS     r1,#0xa
001a18  4823              LDR      r0,|L1.6824|
001a1a  f7fffffe          BL       uart_putchar
001a1e  210a              MOVS     r1,#0xa
001a20  4821              LDR      r0,|L1.6824|
001a22  f7fffffe          BL       uart_putchar
001a26  210a              MOVS     r1,#0xa
001a28  481f              LDR      r0,|L1.6824|
001a2a  f7fffffe          BL       uart_putchar
001a2e  210a              MOVS     r1,#0xa
001a30  481d              LDR      r0,|L1.6824|
001a32  f7fffffe          BL       uart_putchar
001a36  210a              MOVS     r1,#0xa
001a38  481b              LDR      r0,|L1.6824|
001a3a  f7fffffe          BL       uart_putchar
001a3e  210a              MOVS     r1,#0xa
001a40  4819              LDR      r0,|L1.6824|
001a42  f7fffffe          BL       uart_putchar
001a46  210a              MOVS     r1,#0xa
001a48  4817              LDR      r0,|L1.6824|
001a4a  f7fffffe          BL       uart_putchar
001a4e  210a              MOVS     r1,#0xa
001a50  4815              LDR      r0,|L1.6824|
001a52  f7fffffe          BL       uart_putchar
001a56  210a              MOVS     r1,#0xa
001a58  4813              LDR      r0,|L1.6824|
001a5a  f7fffffe          BL       uart_putchar
001a5e  210a              MOVS     r1,#0xa
001a60  4811              LDR      r0,|L1.6824|
001a62  f7fffffe          BL       uart_putchar
001a66  210a              MOVS     r1,#0xa
001a68  480f              LDR      r0,|L1.6824|
001a6a  e000              B        |L1.6766|
                  |L1.6764|
001a6c  e0f6              B        |L1.7260|
                  |L1.6766|
001a6e  f7fffffe          BL       uart_putchar
001a72  210a              MOVS     r1,#0xa
001a74  480c              LDR      r0,|L1.6824|
001a76  f7fffffe          BL       uart_putchar
001a7a  210a              MOVS     r1,#0xa
001a7c  480a              LDR      r0,|L1.6824|
001a7e  f7fffffe          BL       uart_putchar
001a82  210a              MOVS     r1,#0xa
001a84  4808              LDR      r0,|L1.6824|
001a86  f7fffffe          BL       uart_putchar
001a8a  210a              MOVS     r1,#0xa
001a8c  4806              LDR      r0,|L1.6824|
001a8e  f7fffffe          BL       uart_putchar
001a92  210a              MOVS     r1,#0xa
001a94  4804              LDR      r0,|L1.6824|
001a96  f7fffffe          BL       uart_putchar
001a9a  210a              MOVS     r1,#0xa
001a9c  4802              LDR      r0,|L1.6824|
001a9e  f7fffffe          BL       uart_putchar
001aa2  210a              MOVS     r1,#0xa
001aa4  4800              LDR      r0,|L1.6824|
001aa6  e021              B        |L1.6892|
                  |L1.6824|
                          DCD      0x4006b000
                  |L1.6828|
                          DCD      ||.text||+0x8fc
                  |L1.6832|
                          DCD      uart_string_gsm
                  |L1.6836|
                          DCD      tout
                  |L1.6840|
                          DCD      data
                  |L1.6844|
                          DCD      flagch
                  |L1.6848|
                          DCD      int_erval
                  |L1.6852|
                          DCD      temp
                  |L1.6856|
001ac8  4f4b00            DCB      "OK",0
001acb  00                DCB      0
                  |L1.6860|
                          DCD      cond201
                  |L1.6864|
                          DCD      cond200
                  |L1.6868|
                          DCD      sleep_flag
                  |L1.6872|
                          DCD      at_
                  |L1.6876|
                          DCD      drive
                  |L1.6880|
001ae0  3e00              DCB      ">",0
001ae2  00                DCB      0
001ae3  00                DCB      0
                  |L1.6884|
                          DCD      ||k2||
                  |L1.6888|
                          DCD      k
                  |L1.6892|
001aec  f7fffffe          BL       uart_putchar
001af0  210a              MOVS     r1,#0xa
001af2  48fe              LDR      r0,|L1.7916|
001af4  f7fffffe          BL       uart_putchar
001af8  210a              MOVS     r1,#0xa
001afa  48fc              LDR      r0,|L1.7916|
001afc  f7fffffe          BL       uart_putchar
001b00  210a              MOVS     r1,#0xa
001b02  48fa              LDR      r0,|L1.7916|
001b04  f7fffffe          BL       uart_putchar
001b08  210a              MOVS     r1,#0xa
001b0a  48f8              LDR      r0,|L1.7916|
001b0c  f7fffffe          BL       uart_putchar
001b10  210a              MOVS     r1,#0xa
001b12  48f6              LDR      r0,|L1.7916|
001b14  f7fffffe          BL       uart_putchar
001b18  210a              MOVS     r1,#0xa
001b1a  48f4              LDR      r0,|L1.7916|
001b1c  f7fffffe          BL       uart_putchar
001b20  210a              MOVS     r1,#0xa
001b22  48f2              LDR      r0,|L1.7916|
001b24  f7fffffe          BL       uart_putchar
001b28  210a              MOVS     r1,#0xa
001b2a  48f0              LDR      r0,|L1.7916|
001b2c  f7fffffe          BL       uart_putchar
001b30  210a              MOVS     r1,#0xa
001b32  48ee              LDR      r0,|L1.7916|
001b34  f7fffffe          BL       uart_putchar
001b38  210a              MOVS     r1,#0xa
001b3a  48ec              LDR      r0,|L1.7916|
001b3c  f7fffffe          BL       uart_putchar
001b40  210a              MOVS     r1,#0xa
001b42  48ea              LDR      r0,|L1.7916|
001b44  f7fffffe          BL       uart_putchar
001b48  210a              MOVS     r1,#0xa
001b4a  48e8              LDR      r0,|L1.7916|
001b4c  f7fffffe          BL       uart_putchar
001b50  210a              MOVS     r1,#0xa
001b52  48e6              LDR      r0,|L1.7916|
001b54  f7fffffe          BL       uart_putchar
001b58  210a              MOVS     r1,#0xa
001b5a  48e4              LDR      r0,|L1.7916|
001b5c  f7fffffe          BL       uart_putchar
001b60  210a              MOVS     r1,#0xa
001b62  48e2              LDR      r0,|L1.7916|
001b64  f7fffffe          BL       uart_putchar
001b68  210a              MOVS     r1,#0xa
001b6a  48e0              LDR      r0,|L1.7916|
001b6c  f7fffffe          BL       uart_putchar
001b70  210a              MOVS     r1,#0xa
001b72  48de              LDR      r0,|L1.7916|
001b74  f7fffffe          BL       uart_putchar
001b78  210a              MOVS     r1,#0xa
001b7a  48dc              LDR      r0,|L1.7916|
001b7c  f7fffffe          BL       uart_putchar
001b80  210a              MOVS     r1,#0xa
001b82  48da              LDR      r0,|L1.7916|
001b84  f7fffffe          BL       uart_putchar
001b88  210a              MOVS     r1,#0xa
001b8a  48d8              LDR      r0,|L1.7916|
001b8c  f7fffffe          BL       uart_putchar
001b90  210a              MOVS     r1,#0xa
001b92  48d6              LDR      r0,|L1.7916|
001b94  f7fffffe          BL       uart_putchar
001b98  210a              MOVS     r1,#0xa
001b9a  48d4              LDR      r0,|L1.7916|
001b9c  f7fffffe          BL       uart_putchar
001ba0  210a              MOVS     r1,#0xa
001ba2  48d2              LDR      r0,|L1.7916|
001ba4  f7fffffe          BL       uart_putchar
001ba8  210a              MOVS     r1,#0xa
001baa  48d0              LDR      r0,|L1.7916|
001bac  f7fffffe          BL       uart_putchar
001bb0  210a              MOVS     r1,#0xa
001bb2  48ce              LDR      r0,|L1.7916|
001bb4  f7fffffe          BL       uart_putchar
001bb8  210a              MOVS     r1,#0xa
001bba  48cc              LDR      r0,|L1.7916|
001bbc  f7fffffe          BL       uart_putchar
001bc0  210a              MOVS     r1,#0xa
001bc2  48ca              LDR      r0,|L1.7916|
001bc4  f7fffffe          BL       uart_putchar
001bc8  210a              MOVS     r1,#0xa
001bca  48c8              LDR      r0,|L1.7916|
001bcc  f7fffffe          BL       uart_putchar
001bd0  210a              MOVS     r1,#0xa
001bd2  48c6              LDR      r0,|L1.7916|
001bd4  f7fffffe          BL       uart_putchar
001bd8  210a              MOVS     r1,#0xa
001bda  48c4              LDR      r0,|L1.7916|
001bdc  f7fffffe          BL       uart_putchar
001be0  210a              MOVS     r1,#0xa
001be2  48c2              LDR      r0,|L1.7916|
001be4  f7fffffe          BL       uart_putchar
001be8  210a              MOVS     r1,#0xa
001bea  48c0              LDR      r0,|L1.7916|
001bec  f7fffffe          BL       uart_putchar
001bf0  210a              MOVS     r1,#0xa
001bf2  48be              LDR      r0,|L1.7916|
001bf4  f7fffffe          BL       uart_putchar
001bf8  210a              MOVS     r1,#0xa
001bfa  48bc              LDR      r0,|L1.7916|
001bfc  f7fffffe          BL       uart_putchar
001c00  210a              MOVS     r1,#0xa
001c02  48ba              LDR      r0,|L1.7916|
001c04  f7fffffe          BL       uart_putchar
;;;580    									//memset(data,0,1000);
;;;581    														//timer counts to wait for characters in uart 1 									
;;;582    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001c08  bf00              NOP      
                  |L1.7178|
001c0a  49b9              LDR      r1,|L1.7920|
001c0c  48b9              LDR      r0,|L1.7924|
001c0e  f7fffffe          BL       strstr
001c12  2800              CMP      r0,#0
001c14  d10a              BNE      |L1.7212|
001c16  49b6              LDR      r1,|L1.7920|
001c18  398c              SUBS     r1,r1,#0x8c
001c1a  48b6              LDR      r0,|L1.7924|
001c1c  f7fffffe          BL       strstr
001c20  2800              CMP      r0,#0
001c22  d103              BNE      |L1.7212|
001c24  48b4              LDR      r0,|L1.7928|
001c26  6800              LDR      r0,[r0,#0]  ; tout
001c28  2805              CMP      r0,#5
001c2a  ddee              BLE      |L1.7178|
                  |L1.7212|
;;;583    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;584    									}
;;;585    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001c2c  f7fffffe          BL       clear
;;;586    									//clear();
;;;587    									memset(data,0,strlen(data));
001c30  48b2              LDR      r0,|L1.7932|
001c32  f7fffffe          BL       strlen
001c36  4604              MOV      r4,r0
001c38  4621              MOV      r1,r4
001c3a  48b0              LDR      r0,|L1.7932|
001c3c  f7fffffe          BL       __aeabi_memclr
;;;588    									clear();
001c40  f7fffffe          BL       clear
;;;589    									RESET_OFF;delay(100);
001c44  2020              MOVS     r0,#0x20
001c46  49ae              LDR      r1,|L1.7936|
001c48  6088              STR      r0,[r1,#8]
001c4a  2064              MOVS     r0,#0x64
001c4c  f7fffffe          BL       delay
;;;590    									RESET_ON;delay(100);		
001c50  2020              MOVS     r0,#0x20
001c52  49ab              LDR      r1,|L1.7936|
001c54  6048              STR      r0,[r1,#4]
001c56  2064              MOVS     r0,#0x64
001c58  f7fffffe          BL       delay
                  |L1.7260|
;;;591    }
;;;592    	
;;;593    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001c5c  2004              MOVS     r0,#4
001c5e  4ba9              LDR      r3,|L1.7940|
001c60  4aa3              LDR      r2,|L1.7920|
001c62  3a14              SUBS     r2,r2,#0x14
001c64  a1a8              ADR      r1,|L1.7944|
001c66  9000              STR      r0,[sp,#0]
001c68  4618              MOV      r0,r3
001c6a  300c              ADDS     r0,r0,#0xc
001c6c  f7fffffe          BL       send_GSM
;;;594    GPS_COLLECT2();
001c70  f7fffffe          BL       GPS_COLLECT2
;;;595    strcat(data,"CH\n");	
001c74  499e              LDR      r1,|L1.7920|
001c76  3944              SUBS     r1,r1,#0x44
001c78  48a0              LDR      r0,|L1.7932|
001c7a  f7fffffe          BL       strcat
;;;596    memset(at_,0,100);
001c7e  2164              MOVS     r1,#0x64
001c80  48a2              LDR      r0,|L1.7948|
001c82  f7fffffe          BL       __aeabi_memclr
;;;597    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001c86  4aa2              LDR      r2,|L1.7952|
001c88  499e              LDR      r1,|L1.7940|
001c8a  3120              ADDS     r1,r1,#0x20
001c8c  489f              LDR      r0,|L1.7948|
001c8e  f7fffffe          BL       __2sprintf
;;;598    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
001c92  48a0              LDR      r0,|L1.7956|
001c94  6800              LDR      r0,[r0,#0]  ; tmeout
001c96  4b9b              LDR      r3,|L1.7940|
001c98  4a95              LDR      r2,|L1.7920|
001c9a  3a14              SUBS     r2,r2,#0x14
001c9c  a19a              ADR      r1,|L1.7944|
001c9e  9000              STR      r0,[sp,#0]
001ca0  489a              LDR      r0,|L1.7948|
001ca2  f7fffffe          BL       send_GSM
;;;599    msg_sim800(); 
001ca6  f7fffffe          BL       msg_sim800
;;;600    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
001caa  2004              MOVS     r0,#4
001cac  4b90              LDR      r3,|L1.7920|
001cae  3b70              SUBS     r3,r3,#0x70
001cb0  461a              MOV      r2,r3
001cb2  325c              ADDS     r2,r2,#0x5c
001cb4  a194              ADR      r1,|L1.7944|
001cb6  9000              STR      r0,[sp,#0]
001cb8  4892              LDR      r0,|L1.7940|
001cba  3038              ADDS     r0,r0,#0x38
001cbc  f7fffffe          BL       send_GSM
;;;601    GPS_COLLECT2();
001cc0  f7fffffe          BL       GPS_COLLECT2
;;;602    strcat(data,"CH\n");	
001cc4  498a              LDR      r1,|L1.7920|
001cc6  3944              SUBS     r1,r1,#0x44
001cc8  488c              LDR      r0,|L1.7932|
001cca  f7fffffe          BL       strcat
;;;603    GPS_COLLECT2();
001cce  f7fffffe          BL       GPS_COLLECT2
;;;604    strcat(data,"CH\n");	
001cd2  4987              LDR      r1,|L1.7920|
001cd4  3944              SUBS     r1,r1,#0x44
001cd6  4889              LDR      r0,|L1.7932|
001cd8  f7fffffe          BL       strcat
;;;605    
;;;606    
;;;607    msg_sim800(); 
001cdc  f7fffffe          BL       msg_sim800
;;;608    GPS_COLLECT2();
001ce0  f7fffffe          BL       GPS_COLLECT2
;;;609    strcat(data,"CH\n");	
001ce4  4982              LDR      r1,|L1.7920|
001ce6  3944              SUBS     r1,r1,#0x44
001ce8  4884              LDR      r0,|L1.7932|
001cea  f7fffffe          BL       strcat
;;;610    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR" , "DEACT",1);		
001cee  2001              MOVS     r0,#1
001cf0  4b7f              LDR      r3,|L1.7920|
001cf2  3b70              SUBS     r3,r3,#0x70
001cf4  461a              MOV      r2,r3
001cf6  3a1c              SUBS     r2,r2,#0x1c
001cf8  a183              ADR      r1,|L1.7944|
001cfa  9000              STR      r0,[sp,#0]
001cfc  4881              LDR      r0,|L1.7940|
001cfe  3048              ADDS     r0,r0,#0x48
001d00  f7fffffe          BL       send_GSM
;;;611    
;;;612    //delay(20);
;;;613    
;;;614    
;;;615    msg_sim800(); 
001d04  f7fffffe          BL       msg_sim800
;;;616    
;;;617    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001d08  4b83              LDR      r3,|L1.7960|
001d0a  4a84              LDR      r2,|L1.7964|
001d0c  497d              LDR      r1,|L1.7940|
001d0e  3160              ADDS     r1,r1,#0x60
001d10  487e              LDR      r0,|L1.7948|
001d12  f7fffffe          BL       __2sprintf
;;;618    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001d16  487f              LDR      r0,|L1.7956|
001d18  6800              LDR      r0,[r0,#0]  ; tmeout
001d1a  4b7a              LDR      r3,|L1.7940|
001d1c  4a74              LDR      r2,|L1.7920|
001d1e  3a8c              SUBS     r2,r2,#0x8c
001d20  4619              MOV      r1,r3
001d22  3180              ADDS     r1,r1,#0x80
001d24  9000              STR      r0,[sp,#0]
001d26  4879              LDR      r0,|L1.7948|
001d28  f7fffffe          BL       send_GSM
;;;619    						clear();
001d2c  f7fffffe          BL       clear
;;;620    						
;;;621    						
;;;622    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
001d30  4878              LDR      r0,|L1.7956|
001d32  6800              LDR      r0,[r0,#0]  ; tmeout
001d34  4b73              LDR      r3,|L1.7940|
001d36  3388              ADDS     r3,r3,#0x88
001d38  4a6d              LDR      r2,|L1.7920|
001d3a  3a8c              SUBS     r2,r2,#0x8c
001d3c  a178              ADR      r1,|L1.7968|
001d3e  9000              STR      r0,[sp,#0]
001d40  4618              MOV      r0,r3
001d42  3010              ADDS     r0,r0,#0x10
001d44  f7fffffe          BL       send_GSM
;;;623    //*************************************tcp_initialization_ends****************************************//							
;;;624    									
;;;625    						clear();		
001d48  f7fffffe          BL       clear
;;;626    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
001d4c  213e              MOVS     r1,#0x3e
001d4e  4869              LDR      r0,|L1.7924|
001d50  f7fffffe          BL       mystrstr
001d54  4973              LDR      r1,|L1.7972|
001d56  7008              STRB     r0,[r1,#0]
;;;627    								if(cond)	
001d58  4608              MOV      r0,r1
001d5a  7800              LDRB     r0,[r0,#0]  ; cond
001d5c  2800              CMP      r0,#0
001d5e  d07d              BEQ      |L1.7772|
;;;628    								{	
;;;629    
;;;630    									clear();
001d60  f7fffffe          BL       clear
;;;631    									memset(uart_string_gsm,0,5000);
001d64  4970              LDR      r1,|L1.7976|
001d66  4863              LDR      r0,|L1.7924|
001d68  f7fffffe          BL       __aeabi_memclr
;;;632    									strcat(data,"\n");
001d6c  a16f              ADR      r1,|L1.7980|
001d6e  4863              LDR      r0,|L1.7932|
001d70  f7fffffe          BL       strcat
;;;633    									len=strlen(data);
001d74  4861              LDR      r0,|L1.7932|
001d76  f7fffffe          BL       strlen
001d7a  496d              LDR      r1,|L1.7984|
001d7c  6008              STR      r0,[r1,#0]  ; len
;;;634    									tout=0;
001d7e  2000              MOVS     r0,#0
001d80  495d              LDR      r1,|L1.7928|
001d82  6008              STR      r0,[r1,#0]  ; tout
;;;635    									k2=0;
001d84  496b              LDR      r1,|L1.7988|
001d86  6008              STR      r0,[r1,#0]  ; k2
;;;636    									for(k=0;k<len;k++)
001d88  496b              LDR      r1,|L1.7992|
001d8a  6008              STR      r0,[r1,#0]  ; k
001d8c  e00b              B        |L1.7590|
                  |L1.7566|
;;;637    									{
;;;638    										uart_putchar(UART1_BASE_PTR, data[k]);
001d8e  485b              LDR      r0,|L1.7932|
001d90  4a69              LDR      r2,|L1.7992|
001d92  6812              LDR      r2,[r2,#0]  ; k
001d94  5c81              LDRB     r1,[r0,r2]
001d96  4855              LDR      r0,|L1.7916|
001d98  f7fffffe          BL       uart_putchar
001d9c  4866              LDR      r0,|L1.7992|
001d9e  6800              LDR      r0,[r0,#0]            ;636  ; k
001da0  1c40              ADDS     r0,r0,#1              ;636
001da2  4965              LDR      r1,|L1.7992|
001da4  6008              STR      r0,[r1,#0]            ;636  ; k
                  |L1.7590|
001da6  4864              LDR      r0,|L1.7992|
001da8  6800              LDR      r0,[r0,#0]            ;636  ; k
001daa  4961              LDR      r1,|L1.7984|
001dac  6809              LDR      r1,[r1,#0]            ;636  ; len
001dae  4288              CMP      r0,r1                 ;636
001db0  dbed              BLT      |L1.7566|
;;;639    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001db2  211a              MOVS     r1,#0x1a
001db4  484d              LDR      r0,|L1.7916|
001db6  f7fffffe          BL       uart_putchar
001dba  211a              MOVS     r1,#0x1a
001dbc  484b              LDR      r0,|L1.7916|
001dbe  f7fffffe          BL       uart_putchar
;;;640    									do
001dc2  bf00              NOP      
                  |L1.7620|
;;;641    																{stcond1=strstr(uart_string_gsm,"SEND OK");
001dc4  495d              LDR      r1,|L1.7996|
001dc6  484b              LDR      r0,|L1.7924|
001dc8  f7fffffe          BL       strstr
001dcc  495c              LDR      r1,|L1.8000|
001dce  6008              STR      r0,[r1,#0]  ; stcond1
;;;642    																	stcond2=strstr(uart_string_gsm, "ERROR");
001dd0  4947              LDR      r1,|L1.7920|
001dd2  398c              SUBS     r1,r1,#0x8c
001dd4  4847              LDR      r0,|L1.7924|
001dd6  f7fffffe          BL       strstr
001dda  495a              LDR      r1,|L1.8004|
001ddc  6008              STR      r0,[r1,#0]  ; stcond2
;;;643    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001dde  4949              LDR      r1,|L1.7940|
001de0  3190              ADDS     r1,r1,#0x90
001de2  4844              LDR      r0,|L1.7924|
001de4  f7fffffe          BL       strstr
001de8  4957              LDR      r1,|L1.8008|
001dea  6008              STR      r0,[r1,#0]  ; stcond3
;;;644    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001dec  4940              LDR      r1,|L1.7920|
001dee  3970              SUBS     r1,r1,#0x70
001df0  4840              LDR      r0,|L1.7924|
001df2  f7fffffe          BL       strstr
001df6  4955              LDR      r1,|L1.8012|
001df8  6008              STR      r0,[r1,#0]  ; stcond4
;;;645    																	
;;;646    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
001dfa  4852              LDR      r0,|L1.8004|
001dfc  6800              LDR      r0,[r0,#0]  ; stcond2
001dfe  2800              CMP      r0,#0
001e00  d10f              BNE      |L1.7714|
001e02  4851              LDR      r0,|L1.8008|
001e04  6800              LDR      r0,[r0,#0]  ; stcond3
001e06  2800              CMP      r0,#0
001e08  d10b              BNE      |L1.7714|
001e0a  4608              MOV      r0,r1
001e0c  6800              LDR      r0,[r0,#0]  ; stcond4
001e0e  2800              CMP      r0,#0
001e10  d107              BNE      |L1.7714|
001e12  484b              LDR      r0,|L1.8000|
001e14  6800              LDR      r0,[r0,#0]  ; stcond1
001e16  2800              CMP      r0,#0
001e18  d103              BNE      |L1.7714|
001e1a  4837              LDR      r0,|L1.7928|
001e1c  6800              LDR      r0,[r0,#0]  ; tout
001e1e  2805              CMP      r0,#5
001e20  ddd0              BLE      |L1.7620|
                  |L1.7714|
;;;647    															//	delay(10);clear();
;;;648    														uart_putchar(UART1_BASE_PTR,0x1A);
001e22  211a              MOVS     r1,#0x1a
001e24  4831              LDR      r0,|L1.7916|
001e26  f7fffffe          BL       uart_putchar
;;;649    											//	delay(10);
;;;650    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001e2a  211a              MOVS     r1,#0x1a
001e2c  482f              LDR      r0,|L1.7916|
001e2e  f7fffffe          BL       uart_putchar
001e32  211a              MOVS     r1,#0x1a
001e34  482d              LDR      r0,|L1.7916|
001e36  f7fffffe          BL       uart_putchar
001e3a  211a              MOVS     r1,#0x1a
001e3c  482b              LDR      r0,|L1.7916|
001e3e  f7fffffe          BL       uart_putchar
;;;651    						
;;;652    
;;;653    
;;;654    									
;;;655    															
;;;656    															
;;;657    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;658    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;659    															
;;;660    														//qwe=strlen(uart_string_gsm);
;;;661    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;662    															delay(20);
001e42  2014              MOVS     r0,#0x14
001e44  f7fffffe          BL       delay
;;;663    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
001e48  493c              LDR      r1,|L1.7996|
001e4a  482a              LDR      r0,|L1.7924|
001e4c  f7fffffe          BL       strstr
001e50  493f              LDR      r1,|L1.8016|
001e52  6008              STR      r0,[r1,#0]  ; con1d
;;;664    																if(!con1d)
001e54  4608              MOV      r0,r1
001e56  6800              LDR      r0,[r0,#0]  ; con1d
001e58  2800              CMP      r0,#0
001e5a  e000              B        |L1.7774|
                  |L1.7772|
001e5c  e179              B        |L1.8530|
                  |L1.7774|
001e5e  d17b              BNE      |L1.8024|
;;;665    																{
;;;666    																	
;;;667    																	
;;;668    	delay(100);
001e60  2064              MOVS     r0,#0x64
001e62  f7fffffe          BL       delay
;;;669    		clear();//memset(uart_string_gsm,0,5000);
001e66  f7fffffe          BL       clear
;;;670    	
;;;671    	memset(at_,0,100);
001e6a  2164              MOVS     r1,#0x64
001e6c  4827              LDR      r0,|L1.7948|
001e6e  f7fffffe          BL       __aeabi_memclr
;;;672    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001e72  4822              LDR      r0,|L1.7932|
001e74  f7fffffe          BL       strlen
001e78  1c44              ADDS     r4,r0,#1
001e7a  4623              MOV      r3,r4
001e7c  4a35              LDR      r2,|L1.8020|
001e7e  491c              LDR      r1,|L1.7920|
001e80  3938              SUBS     r1,r1,#0x38
001e82  4822              LDR      r0,|L1.7948|
001e84  f7fffffe          BL       __2sprintf
;;;673    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001e88  2005              MOVS     r0,#5
001e8a  4b19              LDR      r3,|L1.7920|
001e8c  3b8c              SUBS     r3,r3,#0x8c
001e8e  461a              MOV      r2,r3
001e90  3278              ADDS     r2,r2,#0x78
001e92  a123              ADR      r1,|L1.7968|
001e94  9000              STR      r0,[sp,#0]
001e96  481d              LDR      r0,|L1.7948|
001e98  f7fffffe          BL       send_SD
;;;674    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;675    //	if(strstr(uart_string_gsm,"ERROR")){
;;;676    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;677    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;678    //	}
;;;679    	
;;;680    clear();	
001e9c  f7fffffe          BL       clear
;;;681    									k2=0;									//string array counter for uart 1
001ea0  2000              MOVS     r0,#0
001ea2  4924              LDR      r1,|L1.7988|
001ea4  6008              STR      r0,[r1,#0]  ; k2
;;;682    									tout=0;	
001ea6  4914              LDR      r1,|L1.7928|
001ea8  6008              STR      r0,[r1,#0]  ; tout
;;;683    		for(k=0;k<strlen(data);k++)
001eaa  4923              LDR      r1,|L1.7992|
001eac  6008              STR      r0,[r1,#0]  ; k
001eae  e00b              B        |L1.7880|
                  |L1.7856|
;;;684    		{
;;;685    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001eb0  4812              LDR      r0,|L1.7932|
001eb2  4a21              LDR      r2,|L1.7992|
001eb4  6812              LDR      r2,[r2,#0]  ; k
001eb6  5c81              LDRB     r1,[r0,r2]
001eb8  480c              LDR      r0,|L1.7916|
001eba  f7fffffe          BL       uart_putchar
001ebe  481e              LDR      r0,|L1.7992|
001ec0  6800              LDR      r0,[r0,#0]            ;683  ; k
001ec2  1c40              ADDS     r0,r0,#1              ;683
001ec4  491c              LDR      r1,|L1.7992|
001ec6  6008              STR      r0,[r1,#0]            ;683  ; k
                  |L1.7880|
001ec8  480c              LDR      r0,|L1.7932|
001eca  f7fffffe          BL       strlen
001ece  491a              LDR      r1,|L1.7992|
001ed0  6809              LDR      r1,[r1,#0]            ;683  ; k
001ed2  4288              CMP      r0,r1                 ;683
001ed4  d8ec              BHI      |L1.7856|
;;;686    		}	
;;;687    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001ed6  210a              MOVS     r1,#0xa
001ed8  4804              LDR      r0,|L1.7916|
001eda  f7fffffe          BL       uart_putchar
001ede  210a              MOVS     r1,#0xa
001ee0  4802              LDR      r0,|L1.7916|
001ee2  f7fffffe          BL       uart_putchar
001ee6  210a              MOVS     r1,#0xa
001ee8  4800              LDR      r0,|L1.7916|
001eea  e036              B        |L1.8026|
                  |L1.7916|
                          DCD      0x4006b000
                  |L1.7920|
                          DCD      ||.text||+0x8fc
                  |L1.7924|
                          DCD      uart_string_gsm
                  |L1.7928|
                          DCD      tout
                  |L1.7932|
                          DCD      data
                  |L1.7936|
                          DCD      0x400ff080
                  |L1.7940|
                          DCD      ||.text||+0xd54
                  |L1.7944|
001f08  4f4b00            DCB      "OK",0
001f0b  00                DCB      0
                  |L1.7948|
                          DCD      at_
                  |L1.7952|
                          DCD      apn
                  |L1.7956|
                          DCD      tmeout
                  |L1.7960|
                          DCD      port
                  |L1.7964|
                          DCD      ||ip||
                  |L1.7968|
001f20  3e00              DCB      ">",0
001f22  00                DCB      0
001f23  00                DCB      0
                  |L1.7972|
                          DCD      cond
                  |L1.7976|
                          DCD      0x00001388
                  |L1.7980|
001f2c  0a00              DCB      "\n",0
001f2e  00                DCB      0
001f2f  00                DCB      0
                  |L1.7984|
                          DCD      len
                  |L1.7988|
                          DCD      ||k2||
                  |L1.7992|
                          DCD      k
                  |L1.7996|
                          DCD      ||.text||+0x474
                  |L1.8000|
                          DCD      stcond1
                  |L1.8004|
                          DCD      stcond2
                  |L1.8008|
                          DCD      stcond3
                  |L1.8012|
                          DCD      stcond4
                  |L1.8016|
                          DCD      con1d
                  |L1.8020|
                          DCD      drive
                  |L1.8024|
001f58  e0f8              B        |L1.8524|
                  |L1.8026|
001f5a  f7fffffe          BL       uart_putchar
001f5e  210a              MOVS     r1,#0xa
001f60  48fe              LDR      r0,|L1.9052|
001f62  f7fffffe          BL       uart_putchar
001f66  210a              MOVS     r1,#0xa
001f68  48fc              LDR      r0,|L1.9052|
001f6a  f7fffffe          BL       uart_putchar
001f6e  210a              MOVS     r1,#0xa
001f70  48fa              LDR      r0,|L1.9052|
001f72  f7fffffe          BL       uart_putchar
001f76  210a              MOVS     r1,#0xa
001f78  48f8              LDR      r0,|L1.9052|
001f7a  f7fffffe          BL       uart_putchar
001f7e  210a              MOVS     r1,#0xa
001f80  48f6              LDR      r0,|L1.9052|
001f82  f7fffffe          BL       uart_putchar
001f86  210a              MOVS     r1,#0xa
001f88  48f4              LDR      r0,|L1.9052|
001f8a  f7fffffe          BL       uart_putchar
001f8e  210a              MOVS     r1,#0xa
001f90  48f2              LDR      r0,|L1.9052|
001f92  f7fffffe          BL       uart_putchar
001f96  210a              MOVS     r1,#0xa
001f98  48f0              LDR      r0,|L1.9052|
001f9a  f7fffffe          BL       uart_putchar
001f9e  210a              MOVS     r1,#0xa
001fa0  48ee              LDR      r0,|L1.9052|
001fa2  f7fffffe          BL       uart_putchar
001fa6  210a              MOVS     r1,#0xa
001fa8  48ec              LDR      r0,|L1.9052|
001faa  f7fffffe          BL       uart_putchar
001fae  210a              MOVS     r1,#0xa
001fb0  48ea              LDR      r0,|L1.9052|
001fb2  f7fffffe          BL       uart_putchar
001fb6  210a              MOVS     r1,#0xa
001fb8  48e8              LDR      r0,|L1.9052|
001fba  f7fffffe          BL       uart_putchar
001fbe  210a              MOVS     r1,#0xa
001fc0  48e6              LDR      r0,|L1.9052|
001fc2  f7fffffe          BL       uart_putchar
001fc6  210a              MOVS     r1,#0xa
001fc8  48e4              LDR      r0,|L1.9052|
001fca  f7fffffe          BL       uart_putchar
001fce  210a              MOVS     r1,#0xa
001fd0  48e2              LDR      r0,|L1.9052|
001fd2  f7fffffe          BL       uart_putchar
001fd6  210a              MOVS     r1,#0xa
001fd8  48e0              LDR      r0,|L1.9052|
001fda  f7fffffe          BL       uart_putchar
001fde  210a              MOVS     r1,#0xa
001fe0  48de              LDR      r0,|L1.9052|
001fe2  f7fffffe          BL       uart_putchar
001fe6  210a              MOVS     r1,#0xa
001fe8  48dc              LDR      r0,|L1.9052|
001fea  f7fffffe          BL       uart_putchar
001fee  210a              MOVS     r1,#0xa
001ff0  48da              LDR      r0,|L1.9052|
001ff2  f7fffffe          BL       uart_putchar
001ff6  210a              MOVS     r1,#0xa
001ff8  48d8              LDR      r0,|L1.9052|
001ffa  f7fffffe          BL       uart_putchar
001ffe  210a              MOVS     r1,#0xa
002000  48d6              LDR      r0,|L1.9052|
002002  f7fffffe          BL       uart_putchar
002006  210a              MOVS     r1,#0xa
002008  48d4              LDR      r0,|L1.9052|
00200a  f7fffffe          BL       uart_putchar
00200e  210a              MOVS     r1,#0xa
002010  48d2              LDR      r0,|L1.9052|
002012  f7fffffe          BL       uart_putchar
002016  210a              MOVS     r1,#0xa
002018  48d0              LDR      r0,|L1.9052|
00201a  f7fffffe          BL       uart_putchar
00201e  210a              MOVS     r1,#0xa
002020  48ce              LDR      r0,|L1.9052|
002022  f7fffffe          BL       uart_putchar
002026  210a              MOVS     r1,#0xa
002028  48cc              LDR      r0,|L1.9052|
00202a  f7fffffe          BL       uart_putchar
00202e  210a              MOVS     r1,#0xa
002030  48ca              LDR      r0,|L1.9052|
002032  f7fffffe          BL       uart_putchar
002036  210a              MOVS     r1,#0xa
002038  48c8              LDR      r0,|L1.9052|
00203a  f7fffffe          BL       uart_putchar
00203e  210a              MOVS     r1,#0xa
002040  48c6              LDR      r0,|L1.9052|
002042  f7fffffe          BL       uart_putchar
002046  210a              MOVS     r1,#0xa
002048  48c4              LDR      r0,|L1.9052|
00204a  f7fffffe          BL       uart_putchar
00204e  210a              MOVS     r1,#0xa
002050  48c2              LDR      r0,|L1.9052|
002052  f7fffffe          BL       uart_putchar
002056  210a              MOVS     r1,#0xa
002058  48c0              LDR      r0,|L1.9052|
00205a  f7fffffe          BL       uart_putchar
00205e  210a              MOVS     r1,#0xa
002060  48be              LDR      r0,|L1.9052|
002062  f7fffffe          BL       uart_putchar
002066  210a              MOVS     r1,#0xa
002068  48bc              LDR      r0,|L1.9052|
00206a  f7fffffe          BL       uart_putchar
00206e  210a              MOVS     r1,#0xa
002070  48ba              LDR      r0,|L1.9052|
002072  f7fffffe          BL       uart_putchar
002076  210a              MOVS     r1,#0xa
002078  48b8              LDR      r0,|L1.9052|
00207a  f7fffffe          BL       uart_putchar
00207e  210a              MOVS     r1,#0xa
002080  48b6              LDR      r0,|L1.9052|
002082  f7fffffe          BL       uart_putchar
002086  210a              MOVS     r1,#0xa
002088  48b4              LDR      r0,|L1.9052|
00208a  f7fffffe          BL       uart_putchar
00208e  210a              MOVS     r1,#0xa
002090  48b2              LDR      r0,|L1.9052|
002092  f7fffffe          BL       uart_putchar
002096  210a              MOVS     r1,#0xa
002098  48b0              LDR      r0,|L1.9052|
00209a  f7fffffe          BL       uart_putchar
00209e  210a              MOVS     r1,#0xa
0020a0  48ae              LDR      r0,|L1.9052|
0020a2  f7fffffe          BL       uart_putchar
0020a6  210a              MOVS     r1,#0xa
0020a8  48ac              LDR      r0,|L1.9052|
0020aa  f7fffffe          BL       uart_putchar
0020ae  210a              MOVS     r1,#0xa
0020b0  48aa              LDR      r0,|L1.9052|
0020b2  f7fffffe          BL       uart_putchar
0020b6  210a              MOVS     r1,#0xa
0020b8  48a8              LDR      r0,|L1.9052|
0020ba  f7fffffe          BL       uart_putchar
0020be  210a              MOVS     r1,#0xa
0020c0  48a6              LDR      r0,|L1.9052|
0020c2  f7fffffe          BL       uart_putchar
0020c6  210a              MOVS     r1,#0xa
0020c8  48a4              LDR      r0,|L1.9052|
0020ca  f7fffffe          BL       uart_putchar
0020ce  210a              MOVS     r1,#0xa
0020d0  48a2              LDR      r0,|L1.9052|
0020d2  f7fffffe          BL       uart_putchar
0020d6  210a              MOVS     r1,#0xa
0020d8  48a0              LDR      r0,|L1.9052|
0020da  f7fffffe          BL       uart_putchar
0020de  210a              MOVS     r1,#0xa
0020e0  489e              LDR      r0,|L1.9052|
0020e2  f7fffffe          BL       uart_putchar
0020e6  210a              MOVS     r1,#0xa
0020e8  489c              LDR      r0,|L1.9052|
0020ea  f7fffffe          BL       uart_putchar
0020ee  210a              MOVS     r1,#0xa
0020f0  489a              LDR      r0,|L1.9052|
0020f2  f7fffffe          BL       uart_putchar
0020f6  210a              MOVS     r1,#0xa
0020f8  4898              LDR      r0,|L1.9052|
0020fa  f7fffffe          BL       uart_putchar
0020fe  210a              MOVS     r1,#0xa
002100  4896              LDR      r0,|L1.9052|
002102  f7fffffe          BL       uart_putchar
002106  210a              MOVS     r1,#0xa
002108  4894              LDR      r0,|L1.9052|
00210a  f7fffffe          BL       uart_putchar
;;;688    									//memset(data,0,1000);
;;;689    														//timer counts to wait for characters in uart 1 									
;;;690    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00210e  bf00              NOP      
                  |L1.8464|
002110  4993              LDR      r1,|L1.9056|
002112  4894              LDR      r0,|L1.9060|
002114  f7fffffe          BL       strstr
002118  2800              CMP      r0,#0
00211a  d10a              BNE      |L1.8498|
00211c  4990              LDR      r1,|L1.9056|
00211e  398c              SUBS     r1,r1,#0x8c
002120  4890              LDR      r0,|L1.9060|
002122  f7fffffe          BL       strstr
002126  2800              CMP      r0,#0
002128  d103              BNE      |L1.8498|
00212a  488f              LDR      r0,|L1.9064|
00212c  6800              LDR      r0,[r0,#0]  ; tout
00212e  2805              CMP      r0,#5
002130  ddee              BLE      |L1.8464|
                  |L1.8498|
;;;691    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;692    									}
;;;693    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002132  f7fffffe          BL       clear
;;;694    									//clear();
;;;695    									memset(data,0,strlen(data));
002136  488d              LDR      r0,|L1.9068|
002138  f7fffffe          BL       strlen
00213c  4604              MOV      r4,r0
00213e  4621              MOV      r1,r4
002140  488a              LDR      r0,|L1.9068|
002142  f7fffffe          BL       __aeabi_memclr
;;;696    									clear();
002146  f7fffffe          BL       clear
00214a  e157              B        |L1.9212|
                  |L1.8524|
;;;697    
;;;698    								
;;;699    																	
;;;700    																	
;;;701    								//								log_it();								
;;;702    																}else{send_chunk();}													
00214c  f7fffffe          BL       send_chunk
002150  e154              B        |L1.9212|
                  |L1.8530|
;;;703    								//checks for the sd_data available
;;;704    								}
;;;705    								//con1d=strstr(uart_string_gsm,"OK");
;;;706    								else
;;;707    								{
;;;708    									
;;;709    									
;;;710    									
;;;711    	delay(100);
002152  2064              MOVS     r0,#0x64
002154  f7fffffe          BL       delay
;;;712    		clear();//memset(uart_string_gsm,0,5000);
002158  f7fffffe          BL       clear
;;;713    	
;;;714    	memset(at_,0,100);
00215c  2164              MOVS     r1,#0x64
00215e  4884              LDR      r0,|L1.9072|
002160  f7fffffe          BL       __aeabi_memclr
;;;715    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002164  4881              LDR      r0,|L1.9068|
002166  f7fffffe          BL       strlen
00216a  1c44              ADDS     r4,r0,#1
00216c  4623              MOV      r3,r4
00216e  4a81              LDR      r2,|L1.9076|
002170  497b              LDR      r1,|L1.9056|
002172  3938              SUBS     r1,r1,#0x38
002174  487e              LDR      r0,|L1.9072|
002176  f7fffffe          BL       __2sprintf
;;;716    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00217a  2005              MOVS     r0,#5
00217c  4b78              LDR      r3,|L1.9056|
00217e  3b8c              SUBS     r3,r3,#0x8c
002180  461a              MOV      r2,r3
002182  3278              ADDS     r2,r2,#0x78
002184  a17c              ADR      r1,|L1.9080|
002186  9000              STR      r0,[sp,#0]
002188  4879              LDR      r0,|L1.9072|
00218a  f7fffffe          BL       send_SD
;;;717    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;718    //	if(strstr(uart_string_gsm,"ERROR")){
;;;719    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;720    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;721    //	}
;;;722    	
;;;723    clear();	
00218e  f7fffffe          BL       clear
;;;724    									k2=0;									//string array counter for uart 1
002192  2000              MOVS     r0,#0
002194  4979              LDR      r1,|L1.9084|
002196  6008              STR      r0,[r1,#0]  ; k2
;;;725    									tout=0;	
002198  4973              LDR      r1,|L1.9064|
00219a  6008              STR      r0,[r1,#0]  ; tout
;;;726    		for(k=0;k<strlen(data);k++)
00219c  4978              LDR      r1,|L1.9088|
00219e  6008              STR      r0,[r1,#0]  ; k
0021a0  e00b              B        |L1.8634|
                  |L1.8610|
;;;727    		{
;;;728    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0021a2  4872              LDR      r0,|L1.9068|
0021a4  4a76              LDR      r2,|L1.9088|
0021a6  6812              LDR      r2,[r2,#0]  ; k
0021a8  5c81              LDRB     r1,[r0,r2]
0021aa  486c              LDR      r0,|L1.9052|
0021ac  f7fffffe          BL       uart_putchar
0021b0  4873              LDR      r0,|L1.9088|
0021b2  6800              LDR      r0,[r0,#0]            ;726  ; k
0021b4  1c40              ADDS     r0,r0,#1              ;726
0021b6  4972              LDR      r1,|L1.9088|
0021b8  6008              STR      r0,[r1,#0]            ;726  ; k
                  |L1.8634|
0021ba  486c              LDR      r0,|L1.9068|
0021bc  f7fffffe          BL       strlen
0021c0  496f              LDR      r1,|L1.9088|
0021c2  6809              LDR      r1,[r1,#0]            ;726  ; k
0021c4  4288              CMP      r0,r1                 ;726
0021c6  d8ec              BHI      |L1.8610|
;;;729    		}	
;;;730    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0021c8  210a              MOVS     r1,#0xa
0021ca  4864              LDR      r0,|L1.9052|
0021cc  f7fffffe          BL       uart_putchar
0021d0  210a              MOVS     r1,#0xa
0021d2  4862              LDR      r0,|L1.9052|
0021d4  f7fffffe          BL       uart_putchar
0021d8  210a              MOVS     r1,#0xa
0021da  4860              LDR      r0,|L1.9052|
0021dc  f7fffffe          BL       uart_putchar
0021e0  210a              MOVS     r1,#0xa
0021e2  485e              LDR      r0,|L1.9052|
0021e4  f7fffffe          BL       uart_putchar
0021e8  210a              MOVS     r1,#0xa
0021ea  485c              LDR      r0,|L1.9052|
0021ec  f7fffffe          BL       uart_putchar
0021f0  210a              MOVS     r1,#0xa
0021f2  485a              LDR      r0,|L1.9052|
0021f4  f7fffffe          BL       uart_putchar
0021f8  210a              MOVS     r1,#0xa
0021fa  4858              LDR      r0,|L1.9052|
0021fc  f7fffffe          BL       uart_putchar
002200  210a              MOVS     r1,#0xa
002202  4856              LDR      r0,|L1.9052|
002204  f7fffffe          BL       uart_putchar
002208  210a              MOVS     r1,#0xa
00220a  4854              LDR      r0,|L1.9052|
00220c  f7fffffe          BL       uart_putchar
002210  210a              MOVS     r1,#0xa
002212  4852              LDR      r0,|L1.9052|
002214  f7fffffe          BL       uart_putchar
002218  210a              MOVS     r1,#0xa
00221a  4850              LDR      r0,|L1.9052|
00221c  f7fffffe          BL       uart_putchar
002220  210a              MOVS     r1,#0xa
002222  484e              LDR      r0,|L1.9052|
002224  f7fffffe          BL       uart_putchar
002228  210a              MOVS     r1,#0xa
00222a  484c              LDR      r0,|L1.9052|
00222c  f7fffffe          BL       uart_putchar
002230  210a              MOVS     r1,#0xa
002232  484a              LDR      r0,|L1.9052|
002234  f7fffffe          BL       uart_putchar
002238  210a              MOVS     r1,#0xa
00223a  4848              LDR      r0,|L1.9052|
00223c  f7fffffe          BL       uart_putchar
002240  210a              MOVS     r1,#0xa
002242  4846              LDR      r0,|L1.9052|
002244  f7fffffe          BL       uart_putchar
002248  210a              MOVS     r1,#0xa
00224a  4844              LDR      r0,|L1.9052|
00224c  f7fffffe          BL       uart_putchar
002250  210a              MOVS     r1,#0xa
002252  4842              LDR      r0,|L1.9052|
002254  f7fffffe          BL       uart_putchar
002258  210a              MOVS     r1,#0xa
00225a  4840              LDR      r0,|L1.9052|
00225c  f7fffffe          BL       uart_putchar
002260  210a              MOVS     r1,#0xa
002262  483e              LDR      r0,|L1.9052|
002264  f7fffffe          BL       uart_putchar
002268  210a              MOVS     r1,#0xa
00226a  483c              LDR      r0,|L1.9052|
00226c  f7fffffe          BL       uart_putchar
002270  210a              MOVS     r1,#0xa
002272  483a              LDR      r0,|L1.9052|
002274  f7fffffe          BL       uart_putchar
002278  210a              MOVS     r1,#0xa
00227a  4838              LDR      r0,|L1.9052|
00227c  f7fffffe          BL       uart_putchar
002280  210a              MOVS     r1,#0xa
002282  4836              LDR      r0,|L1.9052|
002284  f7fffffe          BL       uart_putchar
002288  210a              MOVS     r1,#0xa
00228a  4834              LDR      r0,|L1.9052|
00228c  f7fffffe          BL       uart_putchar
002290  210a              MOVS     r1,#0xa
002292  4832              LDR      r0,|L1.9052|
002294  f7fffffe          BL       uart_putchar
002298  210a              MOVS     r1,#0xa
00229a  4830              LDR      r0,|L1.9052|
00229c  f7fffffe          BL       uart_putchar
0022a0  210a              MOVS     r1,#0xa
0022a2  482e              LDR      r0,|L1.9052|
0022a4  f7fffffe          BL       uart_putchar
0022a8  210a              MOVS     r1,#0xa
0022aa  482c              LDR      r0,|L1.9052|
0022ac  f7fffffe          BL       uart_putchar
0022b0  210a              MOVS     r1,#0xa
0022b2  482a              LDR      r0,|L1.9052|
0022b4  f7fffffe          BL       uart_putchar
0022b8  210a              MOVS     r1,#0xa
0022ba  4828              LDR      r0,|L1.9052|
0022bc  f7fffffe          BL       uart_putchar
0022c0  210a              MOVS     r1,#0xa
0022c2  4826              LDR      r0,|L1.9052|
0022c4  f7fffffe          BL       uart_putchar
0022c8  210a              MOVS     r1,#0xa
0022ca  4824              LDR      r0,|L1.9052|
0022cc  f7fffffe          BL       uart_putchar
0022d0  210a              MOVS     r1,#0xa
0022d2  4822              LDR      r0,|L1.9052|
0022d4  f7fffffe          BL       uart_putchar
0022d8  210a              MOVS     r1,#0xa
0022da  4820              LDR      r0,|L1.9052|
0022dc  f7fffffe          BL       uart_putchar
0022e0  210a              MOVS     r1,#0xa
0022e2  481e              LDR      r0,|L1.9052|
0022e4  f7fffffe          BL       uart_putchar
0022e8  210a              MOVS     r1,#0xa
0022ea  481c              LDR      r0,|L1.9052|
0022ec  f7fffffe          BL       uart_putchar
0022f0  210a              MOVS     r1,#0xa
0022f2  481a              LDR      r0,|L1.9052|
0022f4  f7fffffe          BL       uart_putchar
0022f8  210a              MOVS     r1,#0xa
0022fa  4818              LDR      r0,|L1.9052|
0022fc  f7fffffe          BL       uart_putchar
002300  210a              MOVS     r1,#0xa
002302  4816              LDR      r0,|L1.9052|
002304  f7fffffe          BL       uart_putchar
002308  210a              MOVS     r1,#0xa
00230a  4814              LDR      r0,|L1.9052|
00230c  f7fffffe          BL       uart_putchar
002310  210a              MOVS     r1,#0xa
002312  4812              LDR      r0,|L1.9052|
002314  f7fffffe          BL       uart_putchar
002318  210a              MOVS     r1,#0xa
00231a  4810              LDR      r0,|L1.9052|
00231c  f7fffffe          BL       uart_putchar
002320  210a              MOVS     r1,#0xa
002322  480e              LDR      r0,|L1.9052|
002324  f7fffffe          BL       uart_putchar
002328  210a              MOVS     r1,#0xa
00232a  480c              LDR      r0,|L1.9052|
00232c  f7fffffe          BL       uart_putchar
002330  210a              MOVS     r1,#0xa
002332  480a              LDR      r0,|L1.9052|
002334  f7fffffe          BL       uart_putchar
002338  210a              MOVS     r1,#0xa
00233a  4808              LDR      r0,|L1.9052|
00233c  f7fffffe          BL       uart_putchar
002340  210a              MOVS     r1,#0xa
002342  4806              LDR      r0,|L1.9052|
002344  f7fffffe          BL       uart_putchar
002348  210a              MOVS     r1,#0xa
00234a  4804              LDR      r0,|L1.9052|
00234c  f7fffffe          BL       uart_putchar
002350  210a              MOVS     r1,#0xa
002352  4802              LDR      r0,|L1.9052|
002354  f7fffffe          BL       uart_putchar
002358  210a              MOVS     r1,#0xa
00235a  e013              B        |L1.9092|
                  |L1.9052|
                          DCD      0x4006b000
                  |L1.9056|
                          DCD      ||.text||+0x8fc
                  |L1.9060|
                          DCD      uart_string_gsm
                  |L1.9064|
                          DCD      tout
                  |L1.9068|
                          DCD      data
                  |L1.9072|
                          DCD      at_
                  |L1.9076|
                          DCD      drive
                  |L1.9080|
002378  3e00              DCB      ">",0
00237a  00                DCB      0
00237b  00                DCB      0
                  |L1.9084|
                          DCD      ||k2||
                  |L1.9088|
                          DCD      k
                  |L1.9092|
002384  48fe              LDR      r0,|L1.10112|
002386  f7fffffe          BL       uart_putchar
00238a  210a              MOVS     r1,#0xa
00238c  48fc              LDR      r0,|L1.10112|
00238e  f7fffffe          BL       uart_putchar
002392  210a              MOVS     r1,#0xa
002394  48fa              LDR      r0,|L1.10112|
002396  f7fffffe          BL       uart_putchar
00239a  210a              MOVS     r1,#0xa
00239c  48f8              LDR      r0,|L1.10112|
00239e  f7fffffe          BL       uart_putchar
0023a2  210a              MOVS     r1,#0xa
0023a4  48f6              LDR      r0,|L1.10112|
0023a6  f7fffffe          BL       uart_putchar
0023aa  210a              MOVS     r1,#0xa
0023ac  48f4              LDR      r0,|L1.10112|
0023ae  f7fffffe          BL       uart_putchar
0023b2  210a              MOVS     r1,#0xa
0023b4  48f2              LDR      r0,|L1.10112|
0023b6  f7fffffe          BL       uart_putchar
;;;731    									//memset(data,0,1000);
;;;732    														//timer counts to wait for characters in uart 1 									
;;;733    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0023ba  bf00              NOP      
                  |L1.9148|
0023bc  49f1              LDR      r1,|L1.10116|
0023be  48f2              LDR      r0,|L1.10120|
0023c0  f7fffffe          BL       strstr
0023c4  2800              CMP      r0,#0
0023c6  d10a              BNE      |L1.9182|
0023c8  49ee              LDR      r1,|L1.10116|
0023ca  398c              SUBS     r1,r1,#0x8c
0023cc  48ee              LDR      r0,|L1.10120|
0023ce  f7fffffe          BL       strstr
0023d2  2800              CMP      r0,#0
0023d4  d103              BNE      |L1.9182|
0023d6  48ed              LDR      r0,|L1.10124|
0023d8  6800              LDR      r0,[r0,#0]  ; tout
0023da  2805              CMP      r0,#5
0023dc  ddee              BLE      |L1.9148|
                  |L1.9182|
;;;734    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;735    									}
;;;736    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0023de  f7fffffe          BL       clear
;;;737    									//clear();
;;;738    									memset(data,0,strlen(data));
0023e2  48eb              LDR      r0,|L1.10128|
0023e4  f7fffffe          BL       strlen
0023e8  4604              MOV      r4,r0
0023ea  4621              MOV      r1,r4
0023ec  48e8              LDR      r0,|L1.10128|
0023ee  f7fffffe          BL       __aeabi_memclr
;;;739    									clear();
0023f2  f7fffffe          BL       clear
0023f6  e001              B        |L1.9212|
                  |L1.9208|
;;;740    
;;;741    								
;;;742    									
;;;743    									
;;;744    									
;;;745    								//	log_it();			//otherwize log it					
;;;746    								}
;;;747    
;;;748    																
;;;749    //delay(50);
;;;750    
;;;751    //else{
;;;752    //log_it();}
;;;753    								
;;;754    								
;;;755    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;756    	else
;;;757    	{
;;;758    		send_chunk();
0023f8  f7fffffe          BL       send_chunk
                  |L1.9212|
;;;759    	}		
;;;760    								
;;;761    								
;;;762    								
;;;763    	memset(data,0,strlen(data));	
0023fc  48e4              LDR      r0,|L1.10128|
0023fe  f7fffffe          BL       strlen
002402  4604              MOV      r4,r0
002404  4621              MOV      r1,r4
002406  48e2              LDR      r0,|L1.10128|
002408  f7fffffe          BL       __aeabi_memclr
;;;764    	uart_putchar(UART1_BASE_PTR, 0x1A);
00240c  211a              MOVS     r1,#0x1a
00240e  48dc              LDR      r0,|L1.10112|
002410  f7fffffe          BL       uart_putchar
;;;765    	
;;;766    }
002414  bd38              POP      {r3-r5,pc}
;;;767    	
                          ENDP

                  send_tcp2 PROC
;;;782    
;;;783    void send_tcp2()
002416  b538              PUSH     {r3-r5,lr}
;;;784    {	
;;;785    memset(stcond1,0,strlen(stcond1));	
002418  48de              LDR      r0,|L1.10132|
00241a  6800              LDR      r0,[r0,#0]  ; stcond1
00241c  f7fffffe          BL       strlen
002420  4604              MOV      r4,r0
002422  4621              MOV      r1,r4
002424  48db              LDR      r0,|L1.10132|
002426  6800              LDR      r0,[r0,#0]  ; stcond1
002428  f7fffffe          BL       __aeabi_memclr
;;;786    memset(con1d,0,strlen(con1d));	
00242c  48da              LDR      r0,|L1.10136|
00242e  6800              LDR      r0,[r0,#0]  ; con1d
002430  f7fffffe          BL       strlen
002434  4604              MOV      r4,r0
002436  4621              MOV      r1,r4
002438  48d7              LDR      r0,|L1.10136|
00243a  6800              LDR      r0,[r0,#0]  ; con1d
00243c  f7fffffe          BL       __aeabi_memclr
;;;787    	
;;;788    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;789    						
;;;790    								cond=mystrstr(uart_string_gsm,'>');
002440  213e              MOVS     r1,#0x3e
002442  48d1              LDR      r0,|L1.10120|
002444  f7fffffe          BL       mystrstr
002448  49d4              LDR      r1,|L1.10140|
00244a  7008              STRB     r0,[r1,#0]
;;;791    								if(cond)	
00244c  4608              MOV      r0,r1
00244e  7800              LDRB     r0,[r0,#0]  ; cond
002450  2800              CMP      r0,#0
002452  d07c              BEQ      |L1.9550|
;;;792    								{
;;;793    									
;;;794    									clear();
002454  f7fffffe          BL       clear
;;;795    									memset(uart_string_gsm,0,5000);
002458  49d1              LDR      r1,|L1.10144|
00245a  48cb              LDR      r0,|L1.10120|
00245c  f7fffffe          BL       __aeabi_memclr
;;;796    									strcat(data,"\n");
002460  a1d0              ADR      r1,|L1.10148|
002462  48cb              LDR      r0,|L1.10128|
002464  f7fffffe          BL       strcat
;;;797    									len=strlen(data);
002468  48c9              LDR      r0,|L1.10128|
00246a  f7fffffe          BL       strlen
00246e  49ce              LDR      r1,|L1.10152|
002470  6008              STR      r0,[r1,#0]  ; len
;;;798    									tout=0;
002472  2000              MOVS     r0,#0
002474  49c5              LDR      r1,|L1.10124|
002476  6008              STR      r0,[r1,#0]  ; tout
;;;799    									k2=0;
002478  49cc              LDR      r1,|L1.10156|
00247a  6008              STR      r0,[r1,#0]  ; k2
;;;800    									for(k=0;k<len;k++)
00247c  49cc              LDR      r1,|L1.10160|
00247e  6008              STR      r0,[r1,#0]  ; k
002480  e00b              B        |L1.9370|
                  |L1.9346|
;;;801    									{
;;;802    										uart_putchar(UART1_BASE_PTR, data[k]);
002482  48c3              LDR      r0,|L1.10128|
002484  4aca              LDR      r2,|L1.10160|
002486  6812              LDR      r2,[r2,#0]  ; k
002488  5c81              LDRB     r1,[r0,r2]
00248a  48bd              LDR      r0,|L1.10112|
00248c  f7fffffe          BL       uart_putchar
002490  48c7              LDR      r0,|L1.10160|
002492  6800              LDR      r0,[r0,#0]            ;800  ; k
002494  1c40              ADDS     r0,r0,#1              ;800
002496  49c6              LDR      r1,|L1.10160|
002498  6008              STR      r0,[r1,#0]            ;800  ; k
                  |L1.9370|
00249a  48c5              LDR      r0,|L1.10160|
00249c  6800              LDR      r0,[r0,#0]            ;800  ; k
00249e  49c2              LDR      r1,|L1.10152|
0024a0  6809              LDR      r1,[r1,#0]            ;800  ; len
0024a2  4288              CMP      r0,r1                 ;800
0024a4  dbed              BLT      |L1.9346|
;;;803    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0024a6  211a              MOVS     r1,#0x1a
0024a8  48b5              LDR      r0,|L1.10112|
0024aa  f7fffffe          BL       uart_putchar
;;;804    									do
0024ae  bf00              NOP      
                  |L1.9392|
;;;805    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0024b0  49c0              LDR      r1,|L1.10164|
0024b2  48b5              LDR      r0,|L1.10120|
0024b4  f7fffffe          BL       strstr
0024b8  49b6              LDR      r1,|L1.10132|
0024ba  6008              STR      r0,[r1,#0]  ; stcond1
;;;806    																	stcond2=strstr(uart_string_gsm, "ERROR");
0024bc  49b1              LDR      r1,|L1.10116|
0024be  398c              SUBS     r1,r1,#0x8c
0024c0  48b1              LDR      r0,|L1.10120|
0024c2  f7fffffe          BL       strstr
0024c6  49bc              LDR      r1,|L1.10168|
0024c8  6008              STR      r0,[r1,#0]  ; stcond2
;;;807    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0024ca  49bc              LDR      r1,|L1.10172|
0024cc  48ae              LDR      r0,|L1.10120|
0024ce  f7fffffe          BL       strstr
0024d2  49bb              LDR      r1,|L1.10176|
0024d4  6008              STR      r0,[r1,#0]  ; stcond3
;;;808    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0024d6  49ab              LDR      r1,|L1.10116|
0024d8  3970              SUBS     r1,r1,#0x70
0024da  48ab              LDR      r0,|L1.10120|
0024dc  f7fffffe          BL       strstr
0024e0  49b8              LDR      r1,|L1.10180|
0024e2  6008              STR      r0,[r1,#0]  ; stcond4
;;;809    																	
;;;810    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0024e4  48b4              LDR      r0,|L1.10168|
0024e6  6800              LDR      r0,[r0,#0]  ; stcond2
0024e8  2800              CMP      r0,#0
0024ea  d10f              BNE      |L1.9484|
0024ec  48b4              LDR      r0,|L1.10176|
0024ee  6800              LDR      r0,[r0,#0]  ; stcond3
0024f0  2800              CMP      r0,#0
0024f2  d10b              BNE      |L1.9484|
0024f4  4608              MOV      r0,r1
0024f6  6800              LDR      r0,[r0,#0]  ; stcond4
0024f8  2800              CMP      r0,#0
0024fa  d107              BNE      |L1.9484|
0024fc  48a5              LDR      r0,|L1.10132|
0024fe  6800              LDR      r0,[r0,#0]  ; stcond1
002500  2800              CMP      r0,#0
002502  d103              BNE      |L1.9484|
002504  48a1              LDR      r0,|L1.10124|
002506  6800              LDR      r0,[r0,#0]  ; tout
002508  2804              CMP      r0,#4
00250a  ddd1              BLE      |L1.9392|
                  |L1.9484|
;;;811    																//delay(10);clear();
;;;812    														uart_putchar(UART1_BASE_PTR,0x1A);
00250c  211a              MOVS     r1,#0x1a
00250e  489c              LDR      r0,|L1.10112|
002510  f7fffffe          BL       uart_putchar
;;;813    												//delay(10);
;;;814    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002514  211a              MOVS     r1,#0x1a
002516  489a              LDR      r0,|L1.10112|
002518  f7fffffe          BL       uart_putchar
00251c  211a              MOVS     r1,#0x1a
00251e  4898              LDR      r0,|L1.10112|
002520  f7fffffe          BL       uart_putchar
002524  211a              MOVS     r1,#0x1a
002526  4896              LDR      r0,|L1.10112|
002528  f7fffffe          BL       uart_putchar
;;;815    						
;;;816    									
;;;817    									
;;;818    									
;;;819    									
;;;820    									
;;;821    									
;;;822    									
;;;823    
;;;824    //									for(k=0;k<len;k++)
;;;825    //									{
;;;826    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;827    //									}
;;;828    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;829    
;;;830    //									
;;;831    //													k2=0;									//string array counter for uart 1
;;;832    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;833    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;834    //																{
;;;835    //																	timeout--;
;;;836    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;837    //																}
;;;838    																if(flagch==1){		int_erval=temp;flagch=0;	}
00252c  48a6              LDR      r0,|L1.10184|
00252e  6800              LDR      r0,[r0,#0]  ; flagch
002530  2801              CMP      r0,#1
002532  d106              BNE      |L1.9538|
002534  48a5              LDR      r0,|L1.10188|
002536  6800              LDR      r0,[r0,#0]  ; temp
002538  49a5              LDR      r1,|L1.10192|
00253a  6008              STR      r0,[r1,#0]  ; int_erval
00253c  2000              MOVS     r0,#0
00253e  49a2              LDR      r1,|L1.10184|
002540  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.9538|
;;;839    delay(50);
002542  2032              MOVS     r0,#0x32
002544  f7fffffe          BL       delay
;;;840    stcond1=strstr(uart_string_gsm,"SEND OK");								
002548  499a              LDR      r1,|L1.10164|
00254a  488f              LDR      r0,|L1.10120|
00254c  e000              B        |L1.9552|
                  |L1.9550|
00254e  e003              B        |L1.9560|
                  |L1.9552|
002550  f7fffffe          BL       strstr
002554  498f              LDR      r1,|L1.10132|
002556  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.9560|
;;;841    								}
;;;842    //else{
;;;843    //log_it();
;;;844    //}
;;;845    
;;;846    
;;;847    if(!stcond1) // if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
002558  488e              LDR      r0,|L1.10132|
00255a  6800              LDR      r0,[r0,#0]  ; stcond1
00255c  2800              CMP      r0,#0
00255e  d001              BEQ      |L1.9572|
002560  f000ff38          BL       |L1.13268|
                  |L1.9572|
;;;848    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002564  211a              MOVS     r1,#0x1a
002566  4886              LDR      r0,|L1.10112|
002568  f7fffffe          BL       uart_putchar
00256c  f7fffffe          BL       clear
002570  200a              MOVS     r0,#0xa
002572  f7fffffe          BL       delay
;;;849    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002576  211a              MOVS     r1,#0x1a
002578  4881              LDR      r0,|L1.10112|
00257a  f7fffffe          BL       uart_putchar
00257e  f7fffffe          BL       clear
002582  200a              MOVS     r0,#0xa
002584  f7fffffe          BL       delay
;;;850    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002588  211a              MOVS     r1,#0x1a
00258a  487d              LDR      r0,|L1.10112|
00258c  f7fffffe          BL       uart_putchar
002590  f7fffffe          BL       clear
002594  200a              MOVS     r0,#0xa
002596  f7fffffe          BL       delay
;;;851    						//	remove_all_chars(data, '\n', '\n');
;;;852    	
;;;853    	//	strcat(data,"CH\n");	
;;;854    	
;;;855    	
;;;856    	delay(100);
00259a  2064              MOVS     r0,#0x64
00259c  f7fffffe          BL       delay
;;;857    		clear();//memset(uart_string_gsm,0,5000);
0025a0  f7fffffe          BL       clear
;;;858    	
;;;859    	memset(at_,0,100);
0025a4  2164              MOVS     r1,#0x64
0025a6  488b              LDR      r0,|L1.10196|
0025a8  f7fffffe          BL       __aeabi_memclr
;;;860    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0025ac  4878              LDR      r0,|L1.10128|
0025ae  f7fffffe          BL       strlen
0025b2  1c44              ADDS     r4,r0,#1
0025b4  4623              MOV      r3,r4
0025b6  4a88              LDR      r2,|L1.10200|
0025b8  4972              LDR      r1,|L1.10116|
0025ba  3938              SUBS     r1,r1,#0x38
0025bc  4885              LDR      r0,|L1.10196|
0025be  f7fffffe          BL       __2sprintf
;;;861    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0025c2  2005              MOVS     r0,#5
0025c4  4b6f              LDR      r3,|L1.10116|
0025c6  3b8c              SUBS     r3,r3,#0x8c
0025c8  461a              MOV      r2,r3
0025ca  3278              ADDS     r2,r2,#0x78
0025cc  a183              ADR      r1,|L1.10204|
0025ce  9000              STR      r0,[sp,#0]
0025d0  4880              LDR      r0,|L1.10196|
0025d2  f7fffffe          BL       send_SD
;;;862    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;863    //	if(strstr(uart_string_gsm,"ERROR")){
;;;864    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;865    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;866    //	}
;;;867    	
;;;868    clear();	
0025d6  f7fffffe          BL       clear
;;;869    									k2=0;									//string array counter for uart 1
0025da  2000              MOVS     r0,#0
0025dc  4973              LDR      r1,|L1.10156|
0025de  6008              STR      r0,[r1,#0]  ; k2
;;;870    									tout=0;	
0025e0  496a              LDR      r1,|L1.10124|
0025e2  6008              STR      r0,[r1,#0]  ; tout
;;;871    		for(k=0;k<strlen(data);k++)
0025e4  4972              LDR      r1,|L1.10160|
0025e6  6008              STR      r0,[r1,#0]  ; k
0025e8  e00b              B        |L1.9730|
                  |L1.9706|
;;;872    		{
;;;873    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0025ea  4869              LDR      r0,|L1.10128|
0025ec  4a70              LDR      r2,|L1.10160|
0025ee  6812              LDR      r2,[r2,#0]  ; k
0025f0  5c81              LDRB     r1,[r0,r2]
0025f2  4863              LDR      r0,|L1.10112|
0025f4  f7fffffe          BL       uart_putchar
0025f8  486d              LDR      r0,|L1.10160|
0025fa  6800              LDR      r0,[r0,#0]            ;871  ; k
0025fc  1c40              ADDS     r0,r0,#1              ;871
0025fe  496c              LDR      r1,|L1.10160|
002600  6008              STR      r0,[r1,#0]            ;871  ; k
                  |L1.9730|
002602  4863              LDR      r0,|L1.10128|
002604  f7fffffe          BL       strlen
002608  4969              LDR      r1,|L1.10160|
00260a  6809              LDR      r1,[r1,#0]            ;871  ; k
00260c  4288              CMP      r0,r1                 ;871
00260e  d8ec              BHI      |L1.9706|
;;;874    		}	
;;;875    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002610  210a              MOVS     r1,#0xa
002612  485b              LDR      r0,|L1.10112|
002614  f7fffffe          BL       uart_putchar
002618  210a              MOVS     r1,#0xa
00261a  4859              LDR      r0,|L1.10112|
00261c  f7fffffe          BL       uart_putchar
002620  210a              MOVS     r1,#0xa
002622  4857              LDR      r0,|L1.10112|
002624  f7fffffe          BL       uart_putchar
002628  210a              MOVS     r1,#0xa
00262a  4855              LDR      r0,|L1.10112|
00262c  f7fffffe          BL       uart_putchar
002630  210a              MOVS     r1,#0xa
002632  4853              LDR      r0,|L1.10112|
002634  f7fffffe          BL       uart_putchar
002638  210a              MOVS     r1,#0xa
00263a  4851              LDR      r0,|L1.10112|
00263c  f7fffffe          BL       uart_putchar
002640  210a              MOVS     r1,#0xa
002642  484f              LDR      r0,|L1.10112|
002644  f7fffffe          BL       uart_putchar
002648  210a              MOVS     r1,#0xa
00264a  484d              LDR      r0,|L1.10112|
00264c  f7fffffe          BL       uart_putchar
002650  210a              MOVS     r1,#0xa
002652  484b              LDR      r0,|L1.10112|
002654  f7fffffe          BL       uart_putchar
002658  210a              MOVS     r1,#0xa
00265a  4849              LDR      r0,|L1.10112|
00265c  f7fffffe          BL       uart_putchar
002660  210a              MOVS     r1,#0xa
002662  4847              LDR      r0,|L1.10112|
002664  f7fffffe          BL       uart_putchar
002668  210a              MOVS     r1,#0xa
00266a  4845              LDR      r0,|L1.10112|
00266c  f7fffffe          BL       uart_putchar
002670  210a              MOVS     r1,#0xa
002672  4843              LDR      r0,|L1.10112|
002674  f7fffffe          BL       uart_putchar
002678  210a              MOVS     r1,#0xa
00267a  4841              LDR      r0,|L1.10112|
00267c  f7fffffe          BL       uart_putchar
002680  210a              MOVS     r1,#0xa
002682  483f              LDR      r0,|L1.10112|
002684  f7fffffe          BL       uart_putchar
002688  210a              MOVS     r1,#0xa
00268a  483d              LDR      r0,|L1.10112|
00268c  f7fffffe          BL       uart_putchar
002690  210a              MOVS     r1,#0xa
002692  483b              LDR      r0,|L1.10112|
002694  f7fffffe          BL       uart_putchar
002698  210a              MOVS     r1,#0xa
00269a  4839              LDR      r0,|L1.10112|
00269c  f7fffffe          BL       uart_putchar
0026a0  210a              MOVS     r1,#0xa
0026a2  4837              LDR      r0,|L1.10112|
0026a4  f7fffffe          BL       uart_putchar
0026a8  210a              MOVS     r1,#0xa
0026aa  4835              LDR      r0,|L1.10112|
0026ac  f7fffffe          BL       uart_putchar
0026b0  210a              MOVS     r1,#0xa
0026b2  4833              LDR      r0,|L1.10112|
0026b4  f7fffffe          BL       uart_putchar
0026b8  210a              MOVS     r1,#0xa
0026ba  4831              LDR      r0,|L1.10112|
0026bc  f7fffffe          BL       uart_putchar
0026c0  210a              MOVS     r1,#0xa
0026c2  482f              LDR      r0,|L1.10112|
0026c4  f7fffffe          BL       uart_putchar
0026c8  210a              MOVS     r1,#0xa
0026ca  482d              LDR      r0,|L1.10112|
0026cc  f7fffffe          BL       uart_putchar
0026d0  210a              MOVS     r1,#0xa
0026d2  482b              LDR      r0,|L1.10112|
0026d4  f7fffffe          BL       uart_putchar
0026d8  210a              MOVS     r1,#0xa
0026da  4829              LDR      r0,|L1.10112|
0026dc  f7fffffe          BL       uart_putchar
0026e0  210a              MOVS     r1,#0xa
0026e2  4827              LDR      r0,|L1.10112|
0026e4  f7fffffe          BL       uart_putchar
0026e8  210a              MOVS     r1,#0xa
0026ea  4825              LDR      r0,|L1.10112|
0026ec  f7fffffe          BL       uart_putchar
0026f0  210a              MOVS     r1,#0xa
0026f2  4823              LDR      r0,|L1.10112|
0026f4  f7fffffe          BL       uart_putchar
0026f8  210a              MOVS     r1,#0xa
0026fa  4821              LDR      r0,|L1.10112|
0026fc  f7fffffe          BL       uart_putchar
002700  210a              MOVS     r1,#0xa
002702  481f              LDR      r0,|L1.10112|
002704  f7fffffe          BL       uart_putchar
002708  210a              MOVS     r1,#0xa
00270a  481d              LDR      r0,|L1.10112|
00270c  f7fffffe          BL       uart_putchar
002710  210a              MOVS     r1,#0xa
002712  481b              LDR      r0,|L1.10112|
002714  f7fffffe          BL       uart_putchar
002718  210a              MOVS     r1,#0xa
00271a  4819              LDR      r0,|L1.10112|
00271c  f7fffffe          BL       uart_putchar
002720  210a              MOVS     r1,#0xa
002722  4817              LDR      r0,|L1.10112|
002724  f7fffffe          BL       uart_putchar
002728  210a              MOVS     r1,#0xa
00272a  4815              LDR      r0,|L1.10112|
00272c  f7fffffe          BL       uart_putchar
002730  210a              MOVS     r1,#0xa
002732  4813              LDR      r0,|L1.10112|
002734  f7fffffe          BL       uart_putchar
002738  210a              MOVS     r1,#0xa
00273a  4811              LDR      r0,|L1.10112|
00273c  f7fffffe          BL       uart_putchar
002740  210a              MOVS     r1,#0xa
002742  480f              LDR      r0,|L1.10112|
002744  f7fffffe          BL       uart_putchar
002748  210a              MOVS     r1,#0xa
00274a  480d              LDR      r0,|L1.10112|
00274c  f7fffffe          BL       uart_putchar
002750  210a              MOVS     r1,#0xa
002752  480b              LDR      r0,|L1.10112|
002754  f7fffffe          BL       uart_putchar
002758  210a              MOVS     r1,#0xa
00275a  4809              LDR      r0,|L1.10112|
00275c  f7fffffe          BL       uart_putchar
002760  210a              MOVS     r1,#0xa
002762  4807              LDR      r0,|L1.10112|
002764  f7fffffe          BL       uart_putchar
002768  210a              MOVS     r1,#0xa
00276a  4805              LDR      r0,|L1.10112|
00276c  f7fffffe          BL       uart_putchar
002770  210a              MOVS     r1,#0xa
002772  4803              LDR      r0,|L1.10112|
002774  f7fffffe          BL       uart_putchar
002778  210a              MOVS     r1,#0xa
00277a  4801              LDR      r0,|L1.10112|
00277c  e030              B        |L1.10208|
00277e  0000              DCW      0x0000
                  |L1.10112|
                          DCD      0x4006b000
                  |L1.10116|
                          DCD      ||.text||+0x8fc
                  |L1.10120|
                          DCD      uart_string_gsm
                  |L1.10124|
                          DCD      tout
                  |L1.10128|
                          DCD      data
                  |L1.10132|
                          DCD      stcond1
                  |L1.10136|
                          DCD      con1d
                  |L1.10140|
                          DCD      cond
                  |L1.10144|
                          DCD      0x00001388
                  |L1.10148|
0027a4  0a00              DCB      "\n",0
0027a6  00                DCB      0
0027a7  00                DCB      0
                  |L1.10152|
                          DCD      len
                  |L1.10156|
                          DCD      ||k2||
                  |L1.10160|
                          DCD      k
                  |L1.10164|
                          DCD      ||.text||+0x474
                  |L1.10168|
                          DCD      stcond2
                  |L1.10172|
                          DCD      ||.text||+0xde4
                  |L1.10176|
                          DCD      stcond3
                  |L1.10180|
                          DCD      stcond4
                  |L1.10184|
                          DCD      flagch
                  |L1.10188|
                          DCD      temp
                  |L1.10192|
                          DCD      int_erval
                  |L1.10196|
                          DCD      at_
                  |L1.10200|
                          DCD      drive
                  |L1.10204|
0027dc  3e00              DCB      ">",0
0027de  00                DCB      0
0027df  00                DCB      0
                  |L1.10208|
0027e0  f7fffffe          BL       uart_putchar
0027e4  210a              MOVS     r1,#0xa
0027e6  48fe              LDR      r0,|L1.11232|
0027e8  f7fffffe          BL       uart_putchar
0027ec  210a              MOVS     r1,#0xa
0027ee  48fc              LDR      r0,|L1.11232|
0027f0  f7fffffe          BL       uart_putchar
0027f4  210a              MOVS     r1,#0xa
0027f6  48fa              LDR      r0,|L1.11232|
0027f8  f7fffffe          BL       uart_putchar
0027fc  210a              MOVS     r1,#0xa
0027fe  48f8              LDR      r0,|L1.11232|
002800  f7fffffe          BL       uart_putchar
002804  210a              MOVS     r1,#0xa
002806  48f6              LDR      r0,|L1.11232|
002808  f7fffffe          BL       uart_putchar
00280c  210a              MOVS     r1,#0xa
00280e  48f4              LDR      r0,|L1.11232|
002810  f7fffffe          BL       uart_putchar
002814  210a              MOVS     r1,#0xa
002816  48f2              LDR      r0,|L1.11232|
002818  f7fffffe          BL       uart_putchar
00281c  210a              MOVS     r1,#0xa
00281e  48f0              LDR      r0,|L1.11232|
002820  f7fffffe          BL       uart_putchar
002824  210a              MOVS     r1,#0xa
002826  48ee              LDR      r0,|L1.11232|
002828  f7fffffe          BL       uart_putchar
00282c  210a              MOVS     r1,#0xa
00282e  48ec              LDR      r0,|L1.11232|
002830  f7fffffe          BL       uart_putchar
002834  210a              MOVS     r1,#0xa
002836  48ea              LDR      r0,|L1.11232|
002838  f7fffffe          BL       uart_putchar
;;;876    									//memset(data,0,1000);
;;;877    														//timer counts to wait for characters in uart 1 									
;;;878    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00283c  bf00              NOP      
                  |L1.10302|
00283e  49e9              LDR      r1,|L1.11236|
002840  48e9              LDR      r0,|L1.11240|
002842  f7fffffe          BL       strstr
002846  2800              CMP      r0,#0
002848  d10a              BNE      |L1.10336|
00284a  49e6              LDR      r1,|L1.11236|
00284c  398c              SUBS     r1,r1,#0x8c
00284e  48e6              LDR      r0,|L1.11240|
002850  f7fffffe          BL       strstr
002854  2800              CMP      r0,#0
002856  d103              BNE      |L1.10336|
002858  48e4              LDR      r0,|L1.11244|
00285a  6800              LDR      r0,[r0,#0]  ; tout
00285c  2805              CMP      r0,#5
00285e  ddee              BLE      |L1.10302|
                  |L1.10336|
;;;879    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;880    									}
;;;881    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002860  f7fffffe          BL       clear
;;;882    									//clear();
;;;883    									memset(data,0,strlen(data));
002864  48e2              LDR      r0,|L1.11248|
002866  f7fffffe          BL       strlen
00286a  4604              MOV      r4,r0
00286c  4621              MOV      r1,r4
00286e  48e0              LDR      r0,|L1.11248|
002870  f7fffffe          BL       __aeabi_memclr
;;;884    									clear();
002874  f7fffffe          BL       clear
;;;885    
;;;886    								
;;;887    	
;;;888    	
;;;889    	
;;;890    	//	log_it();		
;;;891    		memset(data,0,strlen(data));	
002878  48dd              LDR      r0,|L1.11248|
00287a  f7fffffe          BL       strlen
00287e  4604              MOV      r4,r0
002880  4621              MOV      r1,r4
002882  48db              LDR      r0,|L1.11248|
002884  f7fffffe          BL       __aeabi_memclr
;;;892    									GPS_COLLECT();
002888  f7fffffe          BL       GPS_COLLECT
;;;893    									strcat(data,"CH\n");	
00288c  49d5              LDR      r1,|L1.11236|
00288e  3944              SUBS     r1,r1,#0x44
002890  48d7              LDR      r0,|L1.11248|
002892  f7fffffe          BL       strcat
;;;894    				
;;;895    					   	if(flagch!=1){
002896  48d7              LDR      r0,|L1.11252|
002898  6800              LDR      r0,[r0,#0]  ; flagch
00289a  2801              CMP      r0,#1
00289c  d009              BEQ      |L1.10418|
;;;896    							temp=int_erval;				
00289e  48d6              LDR      r0,|L1.11256|
0028a0  6800              LDR      r0,[r0,#0]  ; int_erval
0028a2  49d6              LDR      r1,|L1.11260|
0028a4  6008              STR      r0,[r1,#0]  ; temp
;;;897    							int_erval=4;
0028a6  2004              MOVS     r0,#4
0028a8  49d3              LDR      r1,|L1.11256|
0028aa  6008              STR      r0,[r1,#0]  ; int_erval
;;;898    							flagch=1;}
0028ac  2001              MOVS     r0,#1
0028ae  49d1              LDR      r1,|L1.11252|
0028b0  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.10418|
;;;899    							clear();	
0028b2  f7fffffe          BL       clear
;;;900    
;;;901    
;;;902    //**************************************tcp_initialization();********************************//
;;;903    
;;;904    	
;;;905    msg_sim800(); 
0028b6  f7fffffe          BL       msg_sim800
;;;906    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0028ba  2005              MOVS     r0,#5
0028bc  4bc9              LDR      r3,|L1.11236|
0028be  3b8c              SUBS     r3,r3,#0x8c
0028c0  461a              MOV      r2,r3
0028c2  3278              ADDS     r2,r2,#0x78
0028c4  a1ce              ADR      r1,|L1.11264|
0028c6  9000              STR      r0,[sp,#0]
0028c8  4610              MOV      r0,r2
0028ca  3020              ADDS     r0,r0,#0x20
0028cc  f7fffffe          BL       send_GSM
;;;907    delay(100);
0028d0  2064              MOVS     r0,#0x64
0028d2  f7fffffe          BL       delay
;;;908    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0028d6  2004              MOVS     r0,#4
0028d8  4bc2              LDR      r3,|L1.11236|
0028da  3b8c              SUBS     r3,r3,#0x8c
0028dc  461a              MOV      r2,r3
0028de  32a8              ADDS     r2,r2,#0xa8
0028e0  a1c7              ADR      r1,|L1.11264|
0028e2  9000              STR      r0,[sp,#0]
0028e4  4610              MOV      r0,r2
0028e6  3014              ADDS     r0,r0,#0x14
0028e8  f7fffffe          BL       send_GSM
;;;909    GPS_COLLECT2();
0028ec  f7fffffe          BL       GPS_COLLECT2
;;;910    strcat(data,"CH\n");		
0028f0  49bc              LDR      r1,|L1.11236|
0028f2  3944              SUBS     r1,r1,#0x44
0028f4  48be              LDR      r0,|L1.11248|
0028f6  f7fffffe          BL       strcat
;;;911    GPS_COLLECT2();
0028fa  f7fffffe          BL       GPS_COLLECT2
;;;912    strcat(data,"CH\n");	
0028fe  49b9              LDR      r1,|L1.11236|
002900  3944              SUBS     r1,r1,#0x44
002902  48bb              LDR      r0,|L1.11248|
002904  f7fffffe          BL       strcat
;;;913    GPS_COLLECT2();
002908  f7fffffe          BL       GPS_COLLECT2
;;;914    strcat(data,"CH\n");
00290c  49b5              LDR      r1,|L1.11236|
00290e  3944              SUBS     r1,r1,#0x44
002910  48b7              LDR      r0,|L1.11248|
002912  f7fffffe          BL       strcat
;;;915    cond201=(strstr(uart_string_gsm, "OK"));
002916  a1ba              ADR      r1,|L1.11264|
002918  48b3              LDR      r0,|L1.11240|
00291a  f7fffffe          BL       strstr
00291e  49b9              LDR      r1,|L1.11268|
002920  6008              STR      r0,[r1,#0]  ; cond201
;;;916    cond200=(strstr(uart_string_gsm, "ERROR"));
002922  49b0              LDR      r1,|L1.11236|
002924  398c              SUBS     r1,r1,#0x8c
002926  48b0              LDR      r0,|L1.11240|
002928  f7fffffe          BL       strstr
00292c  49b6              LDR      r1,|L1.11272|
00292e  6008              STR      r0,[r1,#0]  ; cond200
;;;917    if((!(cond201|| cond200 ))  && sleep_flag != 1)
002930  48b4              LDR      r0,|L1.11268|
002932  6800              LDR      r0,[r0,#0]  ; cond201
002934  2800              CMP      r0,#0
                  |L1.10550|
002936  d17d              BNE      |L1.10804|
002938  4608              MOV      r0,r1
00293a  6800              LDR      r0,[r0,#0]  ; cond200
00293c  2800              CMP      r0,#0
00293e  d1fa              BNE      |L1.10550|
002940  48b2              LDR      r0,|L1.11276|
002942  6800              LDR      r0,[r0,#0]  ; sleep_flag
002944  2801              CMP      r0,#1
002946  d075              BEQ      |L1.10804|
;;;918    {
;;;919    delay(100);
002948  2064              MOVS     r0,#0x64
00294a  f7fffffe          BL       delay
;;;920    clear();//memset(uart_string_gsm,0,5000);
00294e  f7fffffe          BL       clear
;;;921    memset(at_,0,100);
002952  2164              MOVS     r1,#0x64
002954  48ae              LDR      r0,|L1.11280|
002956  f7fffffe          BL       __aeabi_memclr
;;;922    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00295a  48a5              LDR      r0,|L1.11248|
00295c  f7fffffe          BL       strlen
002960  1c44              ADDS     r4,r0,#1
002962  4623              MOV      r3,r4
002964  4aab              LDR      r2,|L1.11284|
002966  499f              LDR      r1,|L1.11236|
002968  3938              SUBS     r1,r1,#0x38
00296a  48a9              LDR      r0,|L1.11280|
00296c  f7fffffe          BL       __2sprintf
;;;923    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002970  2005              MOVS     r0,#5
002972  4b9c              LDR      r3,|L1.11236|
002974  3b8c              SUBS     r3,r3,#0x8c
002976  461a              MOV      r2,r3
002978  3278              ADDS     r2,r2,#0x78
00297a  a1a7              ADR      r1,|L1.11288|
00297c  9000              STR      r0,[sp,#0]
00297e  48a4              LDR      r0,|L1.11280|
002980  f7fffffe          BL       send_SD
;;;924    clear();	
002984  f7fffffe          BL       clear
;;;925    k2=0;									//string array counter for uart 1
002988  2000              MOVS     r0,#0
00298a  49a4              LDR      r1,|L1.11292|
00298c  6008              STR      r0,[r1,#0]  ; k2
;;;926    tout=0;	
00298e  4997              LDR      r1,|L1.11244|
002990  6008              STR      r0,[r1,#0]  ; tout
;;;927    for(k=0;k<strlen(data);k++)
002992  49a3              LDR      r1,|L1.11296|
002994  6008              STR      r0,[r1,#0]  ; k
002996  e00b              B        |L1.10672|
                  |L1.10648|
;;;928    {
;;;929    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002998  4895              LDR      r0,|L1.11248|
00299a  4aa1              LDR      r2,|L1.11296|
00299c  6812              LDR      r2,[r2,#0]  ; k
00299e  5c81              LDRB     r1,[r0,r2]
0029a0  488f              LDR      r0,|L1.11232|
0029a2  f7fffffe          BL       uart_putchar
0029a6  489e              LDR      r0,|L1.11296|
0029a8  6800              LDR      r0,[r0,#0]            ;927  ; k
0029aa  1c40              ADDS     r0,r0,#1              ;927
0029ac  499c              LDR      r1,|L1.11296|
0029ae  6008              STR      r0,[r1,#0]            ;927  ; k
                  |L1.10672|
0029b0  488f              LDR      r0,|L1.11248|
0029b2  f7fffffe          BL       strlen
0029b6  499a              LDR      r1,|L1.11296|
0029b8  6809              LDR      r1,[r1,#0]            ;927  ; k
0029ba  4288              CMP      r0,r1                 ;927
0029bc  d8ec              BHI      |L1.10648|
;;;930    }	
;;;931    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0029be  210a              MOVS     r1,#0xa
0029c0  4887              LDR      r0,|L1.11232|
0029c2  f7fffffe          BL       uart_putchar
0029c6  210a              MOVS     r1,#0xa
0029c8  4885              LDR      r0,|L1.11232|
0029ca  f7fffffe          BL       uart_putchar
0029ce  210a              MOVS     r1,#0xa
0029d0  4883              LDR      r0,|L1.11232|
0029d2  f7fffffe          BL       uart_putchar
0029d6  210a              MOVS     r1,#0xa
0029d8  4881              LDR      r0,|L1.11232|
0029da  f7fffffe          BL       uart_putchar
0029de  210a              MOVS     r1,#0xa
0029e0  487f              LDR      r0,|L1.11232|
0029e2  f7fffffe          BL       uart_putchar
0029e6  210a              MOVS     r1,#0xa
0029e8  487d              LDR      r0,|L1.11232|
0029ea  f7fffffe          BL       uart_putchar
0029ee  210a              MOVS     r1,#0xa
0029f0  487b              LDR      r0,|L1.11232|
0029f2  f7fffffe          BL       uart_putchar
0029f6  210a              MOVS     r1,#0xa
0029f8  4879              LDR      r0,|L1.11232|
0029fa  f7fffffe          BL       uart_putchar
0029fe  210a              MOVS     r1,#0xa
002a00  4877              LDR      r0,|L1.11232|
002a02  f7fffffe          BL       uart_putchar
002a06  210a              MOVS     r1,#0xa
002a08  4875              LDR      r0,|L1.11232|
002a0a  f7fffffe          BL       uart_putchar
002a0e  210a              MOVS     r1,#0xa
002a10  4873              LDR      r0,|L1.11232|
002a12  f7fffffe          BL       uart_putchar
002a16  210a              MOVS     r1,#0xa
002a18  4871              LDR      r0,|L1.11232|
002a1a  f7fffffe          BL       uart_putchar
002a1e  210a              MOVS     r1,#0xa
002a20  486f              LDR      r0,|L1.11232|
002a22  f7fffffe          BL       uart_putchar
002a26  210a              MOVS     r1,#0xa
002a28  486d              LDR      r0,|L1.11232|
002a2a  f7fffffe          BL       uart_putchar
002a2e  210a              MOVS     r1,#0xa
002a30  486b              LDR      r0,|L1.11232|
002a32  e000              B        |L1.10806|
                  |L1.10804|
002a34  e0d3              B        |L1.11230|
                  |L1.10806|
002a36  f7fffffe          BL       uart_putchar
002a3a  210a              MOVS     r1,#0xa
002a3c  4868              LDR      r0,|L1.11232|
002a3e  f7fffffe          BL       uart_putchar
002a42  210a              MOVS     r1,#0xa
002a44  4866              LDR      r0,|L1.11232|
002a46  f7fffffe          BL       uart_putchar
002a4a  210a              MOVS     r1,#0xa
002a4c  4864              LDR      r0,|L1.11232|
002a4e  f7fffffe          BL       uart_putchar
002a52  210a              MOVS     r1,#0xa
002a54  4862              LDR      r0,|L1.11232|
002a56  f7fffffe          BL       uart_putchar
002a5a  210a              MOVS     r1,#0xa
002a5c  4860              LDR      r0,|L1.11232|
002a5e  f7fffffe          BL       uart_putchar
002a62  210a              MOVS     r1,#0xa
002a64  485e              LDR      r0,|L1.11232|
002a66  f7fffffe          BL       uart_putchar
002a6a  210a              MOVS     r1,#0xa
002a6c  485c              LDR      r0,|L1.11232|
002a6e  f7fffffe          BL       uart_putchar
002a72  210a              MOVS     r1,#0xa
002a74  485a              LDR      r0,|L1.11232|
002a76  f7fffffe          BL       uart_putchar
002a7a  210a              MOVS     r1,#0xa
002a7c  4858              LDR      r0,|L1.11232|
002a7e  f7fffffe          BL       uart_putchar
002a82  210a              MOVS     r1,#0xa
002a84  4856              LDR      r0,|L1.11232|
002a86  f7fffffe          BL       uart_putchar
002a8a  210a              MOVS     r1,#0xa
002a8c  4854              LDR      r0,|L1.11232|
002a8e  f7fffffe          BL       uart_putchar
002a92  210a              MOVS     r1,#0xa
002a94  4852              LDR      r0,|L1.11232|
002a96  f7fffffe          BL       uart_putchar
002a9a  210a              MOVS     r1,#0xa
002a9c  4850              LDR      r0,|L1.11232|
002a9e  f7fffffe          BL       uart_putchar
002aa2  210a              MOVS     r1,#0xa
002aa4  484e              LDR      r0,|L1.11232|
002aa6  f7fffffe          BL       uart_putchar
002aaa  210a              MOVS     r1,#0xa
002aac  484c              LDR      r0,|L1.11232|
002aae  f7fffffe          BL       uart_putchar
002ab2  210a              MOVS     r1,#0xa
002ab4  484a              LDR      r0,|L1.11232|
002ab6  f7fffffe          BL       uart_putchar
002aba  210a              MOVS     r1,#0xa
002abc  4848              LDR      r0,|L1.11232|
002abe  f7fffffe          BL       uart_putchar
002ac2  210a              MOVS     r1,#0xa
002ac4  4846              LDR      r0,|L1.11232|
002ac6  f7fffffe          BL       uart_putchar
002aca  210a              MOVS     r1,#0xa
002acc  4844              LDR      r0,|L1.11232|
002ace  f7fffffe          BL       uart_putchar
002ad2  210a              MOVS     r1,#0xa
002ad4  4842              LDR      r0,|L1.11232|
002ad6  f7fffffe          BL       uart_putchar
002ada  210a              MOVS     r1,#0xa
002adc  4840              LDR      r0,|L1.11232|
002ade  f7fffffe          BL       uart_putchar
002ae2  210a              MOVS     r1,#0xa
002ae4  483e              LDR      r0,|L1.11232|
002ae6  f7fffffe          BL       uart_putchar
002aea  210a              MOVS     r1,#0xa
002aec  483c              LDR      r0,|L1.11232|
002aee  f7fffffe          BL       uart_putchar
002af2  210a              MOVS     r1,#0xa
002af4  483a              LDR      r0,|L1.11232|
002af6  f7fffffe          BL       uart_putchar
002afa  210a              MOVS     r1,#0xa
002afc  4838              LDR      r0,|L1.11232|
002afe  f7fffffe          BL       uart_putchar
002b02  210a              MOVS     r1,#0xa
002b04  4836              LDR      r0,|L1.11232|
002b06  f7fffffe          BL       uart_putchar
002b0a  210a              MOVS     r1,#0xa
002b0c  4834              LDR      r0,|L1.11232|
002b0e  f7fffffe          BL       uart_putchar
002b12  210a              MOVS     r1,#0xa
002b14  4832              LDR      r0,|L1.11232|
002b16  f7fffffe          BL       uart_putchar
002b1a  210a              MOVS     r1,#0xa
002b1c  4830              LDR      r0,|L1.11232|
002b1e  f7fffffe          BL       uart_putchar
002b22  210a              MOVS     r1,#0xa
002b24  482e              LDR      r0,|L1.11232|
002b26  f7fffffe          BL       uart_putchar
002b2a  210a              MOVS     r1,#0xa
002b2c  482c              LDR      r0,|L1.11232|
002b2e  f7fffffe          BL       uart_putchar
002b32  210a              MOVS     r1,#0xa
002b34  482a              LDR      r0,|L1.11232|
002b36  f7fffffe          BL       uart_putchar
002b3a  210a              MOVS     r1,#0xa
002b3c  4828              LDR      r0,|L1.11232|
002b3e  f7fffffe          BL       uart_putchar
002b42  210a              MOVS     r1,#0xa
002b44  4826              LDR      r0,|L1.11232|
002b46  f7fffffe          BL       uart_putchar
002b4a  210a              MOVS     r1,#0xa
002b4c  4824              LDR      r0,|L1.11232|
002b4e  f7fffffe          BL       uart_putchar
002b52  210a              MOVS     r1,#0xa
002b54  4822              LDR      r0,|L1.11232|
002b56  f7fffffe          BL       uart_putchar
002b5a  210a              MOVS     r1,#0xa
002b5c  4820              LDR      r0,|L1.11232|
002b5e  f7fffffe          BL       uart_putchar
002b62  210a              MOVS     r1,#0xa
002b64  481e              LDR      r0,|L1.11232|
002b66  f7fffffe          BL       uart_putchar
002b6a  210a              MOVS     r1,#0xa
002b6c  481c              LDR      r0,|L1.11232|
002b6e  f7fffffe          BL       uart_putchar
002b72  210a              MOVS     r1,#0xa
002b74  481a              LDR      r0,|L1.11232|
002b76  f7fffffe          BL       uart_putchar
002b7a  210a              MOVS     r1,#0xa
002b7c  4818              LDR      r0,|L1.11232|
002b7e  f7fffffe          BL       uart_putchar
002b82  210a              MOVS     r1,#0xa
002b84  4816              LDR      r0,|L1.11232|
002b86  f7fffffe          BL       uart_putchar
;;;932    									//memset(data,0,1000);
;;;933    														//timer counts to wait for characters in uart 1 									
;;;934    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002b8a  bf00              NOP      
                  |L1.11148|
002b8c  4915              LDR      r1,|L1.11236|
002b8e  4816              LDR      r0,|L1.11240|
002b90  f7fffffe          BL       strstr
002b94  2800              CMP      r0,#0
002b96  d10a              BNE      |L1.11182|
002b98  4912              LDR      r1,|L1.11236|
002b9a  398c              SUBS     r1,r1,#0x8c
002b9c  4812              LDR      r0,|L1.11240|
002b9e  f7fffffe          BL       strstr
002ba2  2800              CMP      r0,#0
002ba4  d103              BNE      |L1.11182|
002ba6  4811              LDR      r0,|L1.11244|
002ba8  6800              LDR      r0,[r0,#0]  ; tout
002baa  2805              CMP      r0,#5
002bac  ddee              BLE      |L1.11148|
                  |L1.11182|
;;;935    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;936    									}
;;;937    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002bae  f7fffffe          BL       clear
;;;938    									//clear();
;;;939    									memset(data,0,strlen(data));
002bb2  480f              LDR      r0,|L1.11248|
002bb4  f7fffffe          BL       strlen
002bb8  4604              MOV      r4,r0
002bba  4621              MOV      r1,r4
002bbc  480c              LDR      r0,|L1.11248|
002bbe  f7fffffe          BL       __aeabi_memclr
;;;940    									clear();
002bc2  f7fffffe          BL       clear
;;;941    									RESET_OFF;delay(100);
002bc6  2020              MOVS     r0,#0x20
002bc8  4916              LDR      r1,|L1.11300|
002bca  6088              STR      r0,[r1,#8]
002bcc  2064              MOVS     r0,#0x64
002bce  f7fffffe          BL       delay
;;;942    									RESET_ON;delay(100);		
002bd2  2020              MOVS     r0,#0x20
002bd4  4913              LDR      r1,|L1.11300|
002bd6  6048              STR      r0,[r1,#4]
002bd8  2064              MOVS     r0,#0x64
002bda  f7fffffe          BL       delay
                  |L1.11230|
;;;943    }
;;;944    	
;;;945    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
002bde  e023              B        |L1.11304|
                  |L1.11232|
                          DCD      0x4006b000
                  |L1.11236|
                          DCD      ||.text||+0x8fc
                  |L1.11240|
                          DCD      uart_string_gsm
                  |L1.11244|
                          DCD      tout
                  |L1.11248|
                          DCD      data
                  |L1.11252|
                          DCD      flagch
                  |L1.11256|
                          DCD      int_erval
                  |L1.11260|
                          DCD      temp
                  |L1.11264|
002c00  4f4b00            DCB      "OK",0
002c03  00                DCB      0
                  |L1.11268|
                          DCD      cond201
                  |L1.11272|
                          DCD      cond200
                  |L1.11276|
                          DCD      sleep_flag
                  |L1.11280|
                          DCD      at_
                  |L1.11284|
                          DCD      drive
                  |L1.11288|
002c18  3e00              DCB      ">",0
002c1a  00                DCB      0
002c1b  00                DCB      0
                  |L1.11292|
                          DCD      ||k2||
                  |L1.11296|
                          DCD      k
                  |L1.11300|
                          DCD      0x400ff080
                  |L1.11304|
002c28  2004              MOVS     r0,#4
002c2a  4bfd              LDR      r3,|L1.12320|
002c2c  4afd              LDR      r2,|L1.12324|
002c2e  a1fe              ADR      r1,|L1.12328|
002c30  9000              STR      r0,[sp,#0]
002c32  4618              MOV      r0,r3
002c34  300c              ADDS     r0,r0,#0xc
002c36  f7fffffe          BL       send_GSM
;;;946    GPS_COLLECT2();
002c3a  f7fffffe          BL       GPS_COLLECT2
;;;947    strcat(data,"CH\n");	
002c3e  49f9              LDR      r1,|L1.12324|
002c40  3930              SUBS     r1,r1,#0x30
002c42  48fa              LDR      r0,|L1.12332|
002c44  f7fffffe          BL       strcat
;;;948    memset(at_,0,100);
002c48  2164              MOVS     r1,#0x64
002c4a  48f9              LDR      r0,|L1.12336|
002c4c  f7fffffe          BL       __aeabi_memclr
;;;949    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
002c50  4af8              LDR      r2,|L1.12340|
002c52  49f3              LDR      r1,|L1.12320|
002c54  3120              ADDS     r1,r1,#0x20
002c56  48f6              LDR      r0,|L1.12336|
002c58  f7fffffe          BL       __2sprintf
;;;950    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
002c5c  48f6              LDR      r0,|L1.12344|
002c5e  6800              LDR      r0,[r0,#0]  ; tmeout
002c60  4bef              LDR      r3,|L1.12320|
002c62  4af0              LDR      r2,|L1.12324|
002c64  a1f0              ADR      r1,|L1.12328|
002c66  9000              STR      r0,[sp,#0]
002c68  48f1              LDR      r0,|L1.12336|
002c6a  f7fffffe          BL       send_GSM
;;;951    msg_sim800(); 
002c6e  f7fffffe          BL       msg_sim800
;;;952    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
002c72  2004              MOVS     r0,#4
002c74  4beb              LDR      r3,|L1.12324|
002c76  3b5c              SUBS     r3,r3,#0x5c
002c78  4aea              LDR      r2,|L1.12324|
002c7a  a1eb              ADR      r1,|L1.12328|
002c7c  9000              STR      r0,[sp,#0]
002c7e  48e8              LDR      r0,|L1.12320|
002c80  3038              ADDS     r0,r0,#0x38
002c82  f7fffffe          BL       send_GSM
;;;953    GPS_COLLECT2();
002c86  f7fffffe          BL       GPS_COLLECT2
;;;954    strcat(data,"CH\n");	
002c8a  49e6              LDR      r1,|L1.12324|
002c8c  3930              SUBS     r1,r1,#0x30
002c8e  48e7              LDR      r0,|L1.12332|
002c90  f7fffffe          BL       strcat
;;;955    GPS_COLLECT2();
002c94  f7fffffe          BL       GPS_COLLECT2
;;;956    strcat(data,"CH\n");	
002c98  49e2              LDR      r1,|L1.12324|
002c9a  3930              SUBS     r1,r1,#0x30
002c9c  48e3              LDR      r0,|L1.12332|
002c9e  f7fffffe          BL       strcat
;;;957    
;;;958    
;;;959    msg_sim800(); 
002ca2  f7fffffe          BL       msg_sim800
;;;960    GPS_COLLECT2();
002ca6  f7fffffe          BL       GPS_COLLECT2
;;;961    strcat(data,"CH\n");	
002caa  49de              LDR      r1,|L1.12324|
002cac  3930              SUBS     r1,r1,#0x30
002cae  48df              LDR      r0,|L1.12332|
002cb0  f7fffffe          BL       strcat
;;;962    					clear();
002cb4  f7fffffe          BL       clear
;;;963    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR" , "DEACT",1);		
002cb8  2001              MOVS     r0,#1
002cba  4bda              LDR      r3,|L1.12324|
002cbc  3b5c              SUBS     r3,r3,#0x5c
002cbe  461a              MOV      r2,r3
002cc0  3a1c              SUBS     r2,r2,#0x1c
002cc2  a1d9              ADR      r1,|L1.12328|
002cc4  9000              STR      r0,[sp,#0]
002cc6  48d6              LDR      r0,|L1.12320|
002cc8  3048              ADDS     r0,r0,#0x48
002cca  f7fffffe          BL       send_GSM
;;;964    //					delay(20);
;;;965    
;;;966    
;;;967    msg_sim800(); 
002cce  f7fffffe          BL       msg_sim800
;;;968    
;;;969    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
002cd2  4bda              LDR      r3,|L1.12348|
002cd4  4ada              LDR      r2,|L1.12352|
002cd6  49d2              LDR      r1,|L1.12320|
002cd8  3160              ADDS     r1,r1,#0x60
002cda  48d5              LDR      r0,|L1.12336|
002cdc  f7fffffe          BL       __2sprintf
;;;970    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
002ce0  48d5              LDR      r0,|L1.12344|
002ce2  6800              LDR      r0,[r0,#0]  ; tmeout
002ce4  4bce              LDR      r3,|L1.12320|
002ce6  4acf              LDR      r2,|L1.12324|
002ce8  3a78              SUBS     r2,r2,#0x78
002cea  4619              MOV      r1,r3
002cec  3180              ADDS     r1,r1,#0x80
002cee  9000              STR      r0,[sp,#0]
002cf0  48cf              LDR      r0,|L1.12336|
002cf2  f7fffffe          BL       send_GSM
;;;971    						clear();
002cf6  f7fffffe          BL       clear
;;;972    						
;;;973    						
;;;974    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
002cfa  48cf              LDR      r0,|L1.12344|
002cfc  6800              LDR      r0,[r0,#0]  ; tmeout
002cfe  4bc8              LDR      r3,|L1.12320|
002d00  3388              ADDS     r3,r3,#0x88
002d02  4ac8              LDR      r2,|L1.12324|
002d04  3a78              SUBS     r2,r2,#0x78
002d06  a1cf              ADR      r1,|L1.12356|
002d08  9000              STR      r0,[sp,#0]
002d0a  4618              MOV      r0,r3
002d0c  3010              ADDS     r0,r0,#0x10
002d0e  f7fffffe          BL       send_GSM
;;;975    //**************************************tcp_initialization ends******************************//							
;;;976    									
;;;977    						clear();		
002d12  f7fffffe          BL       clear
;;;978    						cond=mystrstr(uart_string_gsm,'>');
002d16  213e              MOVS     r1,#0x3e
002d18  48cb              LDR      r0,|L1.12360|
002d1a  f7fffffe          BL       mystrstr
002d1e  49cb              LDR      r1,|L1.12364|
002d20  7008              STRB     r0,[r1,#0]
;;;979    								if(cond)	
002d22  4608              MOV      r0,r1
002d24  7800              LDRB     r0,[r0,#0]  ; cond
002d26  2800              CMP      r0,#0
002d28  d07e              BEQ      |L1.11816|
;;;980    								{	
;;;981    
;;;982    									clear();
002d2a  f7fffffe          BL       clear
;;;983    									memset(uart_string_gsm,0,5000);
002d2e  49c8              LDR      r1,|L1.12368|
002d30  48c5              LDR      r0,|L1.12360|
002d32  f7fffffe          BL       __aeabi_memclr
;;;984    									strcat(data,"\n");
002d36  a1c7              ADR      r1,|L1.12372|
002d38  48bc              LDR      r0,|L1.12332|
002d3a  f7fffffe          BL       strcat
;;;985    									len=strlen(data);
002d3e  48bb              LDR      r0,|L1.12332|
002d40  f7fffffe          BL       strlen
002d44  49c4              LDR      r1,|L1.12376|
002d46  6008              STR      r0,[r1,#0]  ; len
;;;986    									tout=0;
002d48  2000              MOVS     r0,#0
002d4a  49c4              LDR      r1,|L1.12380|
002d4c  6008              STR      r0,[r1,#0]  ; tout
;;;987    									k2=0;
002d4e  49c4              LDR      r1,|L1.12384|
002d50  6008              STR      r0,[r1,#0]  ; k2
;;;988    									for(k=0;k<len;k++)
002d52  49c4              LDR      r1,|L1.12388|
002d54  6008              STR      r0,[r1,#0]  ; k
002d56  e00b              B        |L1.11632|
                  |L1.11608|
;;;989    									{
;;;990    										uart_putchar(UART1_BASE_PTR, data[k]);
002d58  48b4              LDR      r0,|L1.12332|
002d5a  4ac2              LDR      r2,|L1.12388|
002d5c  6812              LDR      r2,[r2,#0]  ; k
002d5e  5c81              LDRB     r1,[r0,r2]
002d60  48c1              LDR      r0,|L1.12392|
002d62  f7fffffe          BL       uart_putchar
002d66  48bf              LDR      r0,|L1.12388|
002d68  6800              LDR      r0,[r0,#0]            ;988  ; k
002d6a  1c40              ADDS     r0,r0,#1              ;988
002d6c  49bd              LDR      r1,|L1.12388|
002d6e  6008              STR      r0,[r1,#0]            ;988  ; k
                  |L1.11632|
002d70  48bc              LDR      r0,|L1.12388|
002d72  6800              LDR      r0,[r0,#0]            ;988  ; k
002d74  49b8              LDR      r1,|L1.12376|
002d76  6809              LDR      r1,[r1,#0]            ;988  ; len
002d78  4288              CMP      r0,r1                 ;988
002d7a  dbed              BLT      |L1.11608|
;;;991    									}uart_putchar(UART1_BASE_PTR, 0x1A);
002d7c  211a              MOVS     r1,#0x1a
002d7e  48ba              LDR      r0,|L1.12392|
002d80  f7fffffe          BL       uart_putchar
;;;992    									do
002d84  bf00              NOP      
                  |L1.11654|
;;;993    																{stcond1=strstr(uart_string_gsm,"SEND OK");
002d86  49b9              LDR      r1,|L1.12396|
002d88  48af              LDR      r0,|L1.12360|
002d8a  f7fffffe          BL       strstr
002d8e  49b8              LDR      r1,|L1.12400|
002d90  6008              STR      r0,[r1,#0]  ; stcond1
;;;994    																	stcond2=strstr(uart_string_gsm, "ERROR");
002d92  49a4              LDR      r1,|L1.12324|
002d94  3978              SUBS     r1,r1,#0x78
002d96  48ac              LDR      r0,|L1.12360|
002d98  f7fffffe          BL       strstr
002d9c  49b5              LDR      r1,|L1.12404|
002d9e  6008              STR      r0,[r1,#0]  ; stcond2
;;;995    																		stcond3=strstr(uart_string_gsm, "FAIL");	
002da0  499f              LDR      r1,|L1.12320|
002da2  3190              ADDS     r1,r1,#0x90
002da4  48a8              LDR      r0,|L1.12360|
002da6  f7fffffe          BL       strstr
002daa  49b3              LDR      r1,|L1.12408|
002dac  6008              STR      r0,[r1,#0]  ; stcond3
;;;996    																			stcond4=strstr(uart_string_gsm, "DEACT");	
002dae  499d              LDR      r1,|L1.12324|
002db0  395c              SUBS     r1,r1,#0x5c
002db2  48a5              LDR      r0,|L1.12360|
002db4  f7fffffe          BL       strstr
002db8  49b0              LDR      r1,|L1.12412|
002dba  6008              STR      r0,[r1,#0]  ; stcond4
;;;997    																	
;;;998    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
002dbc  48ad              LDR      r0,|L1.12404|
002dbe  6800              LDR      r0,[r0,#0]  ; stcond2
002dc0  2800              CMP      r0,#0
002dc2  d10f              BNE      |L1.11748|
002dc4  48ac              LDR      r0,|L1.12408|
002dc6  6800              LDR      r0,[r0,#0]  ; stcond3
002dc8  2800              CMP      r0,#0
002dca  d10b              BNE      |L1.11748|
002dcc  4608              MOV      r0,r1
002dce  6800              LDR      r0,[r0,#0]  ; stcond4
002dd0  2800              CMP      r0,#0
002dd2  d107              BNE      |L1.11748|
002dd4  48a6              LDR      r0,|L1.12400|
002dd6  6800              LDR      r0,[r0,#0]  ; stcond1
002dd8  2800              CMP      r0,#0
002dda  d103              BNE      |L1.11748|
002ddc  489f              LDR      r0,|L1.12380|
002dde  6800              LDR      r0,[r0,#0]  ; tout
002de0  2804              CMP      r0,#4
002de2  ddd0              BLE      |L1.11654|
                  |L1.11748|
;;;999    																delay(10);clear();
002de4  200a              MOVS     r0,#0xa
002de6  f7fffffe          BL       delay
002dea  f7fffffe          BL       clear
;;;1000   														uart_putchar(UART1_BASE_PTR,0x1A);
002dee  211a              MOVS     r1,#0x1a
002df0  489d              LDR      r0,|L1.12392|
002df2  f7fffffe          BL       uart_putchar
;;;1001   												delay(10);
002df6  200a              MOVS     r0,#0xa
002df8  f7fffffe          BL       delay
;;;1002   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002dfc  211a              MOVS     r1,#0x1a
002dfe  489a              LDR      r0,|L1.12392|
002e00  f7fffffe          BL       uart_putchar
002e04  211a              MOVS     r1,#0x1a
002e06  4898              LDR      r0,|L1.12392|
002e08  f7fffffe          BL       uart_putchar
002e0c  211a              MOVS     r1,#0x1a
002e0e  4896              LDR      r0,|L1.12392|
002e10  f7fffffe          BL       uart_putchar
;;;1003   						
;;;1004   
;;;1005   
;;;1006   									
;;;1007   															
;;;1008   															
;;;1009   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e14  211a              MOVS     r1,#0x1a
002e16  4894              LDR      r0,|L1.12392|
002e18  f7fffffe          BL       uart_putchar
002e1c  f7fffffe          BL       clear
002e20  200a              MOVS     r0,#0xa
002e22  f7fffffe          BL       delay
;;;1010   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e26  e000              B        |L1.11818|
                  |L1.11816|
002e28  e196              B        |L1.12632|
                  |L1.11818|
002e2a  211a              MOVS     r1,#0x1a
002e2c  488e              LDR      r0,|L1.12392|
002e2e  f7fffffe          BL       uart_putchar
002e32  f7fffffe          BL       clear
002e36  200a              MOVS     r0,#0xa
002e38  f7fffffe          BL       delay
;;;1011   															
;;;1012   														//qwe=strlen(uart_string_gsm);
;;;1013   														uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e3c  211a              MOVS     r1,#0x1a
002e3e  488a              LDR      r0,|L1.12392|
002e40  f7fffffe          BL       uart_putchar
002e44  f7fffffe          BL       clear
002e48  200a              MOVS     r0,#0xa
002e4a  f7fffffe          BL       delay
;;;1014   								delay(50);
002e4e  2032              MOVS     r0,#0x32
002e50  f7fffffe          BL       delay
;;;1015   								con1d=strstr(uart_string_gsm,"SEND OK");
002e54  4985              LDR      r1,|L1.12396|
002e56  487c              LDR      r0,|L1.12360|
002e58  f7fffffe          BL       strstr
002e5c  4988              LDR      r1,|L1.12416|
002e5e  6008              STR      r0,[r1,#0]  ; con1d
;;;1016   								if(!con1d)
002e60  4608              MOV      r0,r1
002e62  6800              LDR      r0,[r0,#0]  ; con1d
002e64  2800              CMP      r0,#0
002e66  d17c              BNE      |L1.12130|
;;;1017   								{
;;;1018   									
;;;1019   									
;;;1020   	delay(100);
002e68  2064              MOVS     r0,#0x64
002e6a  f7fffffe          BL       delay
;;;1021   		clear();//memset(uart_string_gsm,0,5000);
002e6e  f7fffffe          BL       clear
;;;1022   	
;;;1023   	memset(at_,0,100);
002e72  2164              MOVS     r1,#0x64
002e74  486e              LDR      r0,|L1.12336|
002e76  f7fffffe          BL       __aeabi_memclr
;;;1024   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002e7a  486c              LDR      r0,|L1.12332|
002e7c  f7fffffe          BL       strlen
002e80  1c44              ADDS     r4,r0,#1
002e82  4623              MOV      r3,r4
002e84  4a7f              LDR      r2,|L1.12420|
002e86  4967              LDR      r1,|L1.12324|
002e88  3924              SUBS     r1,r1,#0x24
002e8a  4869              LDR      r0,|L1.12336|
002e8c  f7fffffe          BL       __2sprintf
;;;1025   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002e90  2005              MOVS     r0,#5
002e92  4b64              LDR      r3,|L1.12324|
002e94  3b78              SUBS     r3,r3,#0x78
002e96  4a63              LDR      r2,|L1.12324|
002e98  a16a              ADR      r1,|L1.12356|
002e9a  9000              STR      r0,[sp,#0]
002e9c  4864              LDR      r0,|L1.12336|
002e9e  f7fffffe          BL       send_SD
;;;1026   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1027   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1028   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1029   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1030   //	}
;;;1031   	
;;;1032   clear();	
002ea2  f7fffffe          BL       clear
;;;1033   									k2=0;									//string array counter for uart 1
002ea6  2000              MOVS     r0,#0
002ea8  496d              LDR      r1,|L1.12384|
002eaa  6008              STR      r0,[r1,#0]  ; k2
;;;1034   									tout=0;	
002eac  496b              LDR      r1,|L1.12380|
002eae  6008              STR      r0,[r1,#0]  ; tout
;;;1035   		for(k=0;k<strlen(data);k++)
002eb0  496c              LDR      r1,|L1.12388|
002eb2  6008              STR      r0,[r1,#0]  ; k
002eb4  e00b              B        |L1.11982|
                  |L1.11958|
;;;1036   		{
;;;1037   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002eb6  485d              LDR      r0,|L1.12332|
002eb8  4a6a              LDR      r2,|L1.12388|
002eba  6812              LDR      r2,[r2,#0]  ; k
002ebc  5c81              LDRB     r1,[r0,r2]
002ebe  486a              LDR      r0,|L1.12392|
002ec0  f7fffffe          BL       uart_putchar
002ec4  4867              LDR      r0,|L1.12388|
002ec6  6800              LDR      r0,[r0,#0]            ;1035  ; k
002ec8  1c40              ADDS     r0,r0,#1              ;1035
002eca  4966              LDR      r1,|L1.12388|
002ecc  6008              STR      r0,[r1,#0]            ;1035  ; k
                  |L1.11982|
002ece  4857              LDR      r0,|L1.12332|
002ed0  f7fffffe          BL       strlen
002ed4  4963              LDR      r1,|L1.12388|
002ed6  6809              LDR      r1,[r1,#0]            ;1035  ; k
002ed8  4288              CMP      r0,r1                 ;1035
002eda  d8ec              BHI      |L1.11958|
;;;1038   		}	
;;;1039   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002edc  210a              MOVS     r1,#0xa
002ede  4862              LDR      r0,|L1.12392|
002ee0  f7fffffe          BL       uart_putchar
002ee4  210a              MOVS     r1,#0xa
002ee6  4860              LDR      r0,|L1.12392|
002ee8  f7fffffe          BL       uart_putchar
002eec  210a              MOVS     r1,#0xa
002eee  485e              LDR      r0,|L1.12392|
002ef0  f7fffffe          BL       uart_putchar
002ef4  210a              MOVS     r1,#0xa
002ef6  485c              LDR      r0,|L1.12392|
002ef8  f7fffffe          BL       uart_putchar
002efc  210a              MOVS     r1,#0xa
002efe  485a              LDR      r0,|L1.12392|
002f00  f7fffffe          BL       uart_putchar
002f04  210a              MOVS     r1,#0xa
002f06  4858              LDR      r0,|L1.12392|
002f08  f7fffffe          BL       uart_putchar
002f0c  210a              MOVS     r1,#0xa
002f0e  4856              LDR      r0,|L1.12392|
002f10  f7fffffe          BL       uart_putchar
002f14  210a              MOVS     r1,#0xa
002f16  4854              LDR      r0,|L1.12392|
002f18  f7fffffe          BL       uart_putchar
002f1c  210a              MOVS     r1,#0xa
002f1e  4852              LDR      r0,|L1.12392|
002f20  f7fffffe          BL       uart_putchar
002f24  210a              MOVS     r1,#0xa
002f26  4850              LDR      r0,|L1.12392|
002f28  f7fffffe          BL       uart_putchar
002f2c  210a              MOVS     r1,#0xa
002f2e  484e              LDR      r0,|L1.12392|
002f30  f7fffffe          BL       uart_putchar
002f34  210a              MOVS     r1,#0xa
002f36  484c              LDR      r0,|L1.12392|
002f38  f7fffffe          BL       uart_putchar
002f3c  210a              MOVS     r1,#0xa
002f3e  484a              LDR      r0,|L1.12392|
002f40  f7fffffe          BL       uart_putchar
002f44  210a              MOVS     r1,#0xa
002f46  4848              LDR      r0,|L1.12392|
002f48  f7fffffe          BL       uart_putchar
002f4c  210a              MOVS     r1,#0xa
002f4e  4846              LDR      r0,|L1.12392|
002f50  f7fffffe          BL       uart_putchar
002f54  210a              MOVS     r1,#0xa
002f56  4844              LDR      r0,|L1.12392|
002f58  f7fffffe          BL       uart_putchar
002f5c  210a              MOVS     r1,#0xa
002f5e  4842              LDR      r0,|L1.12392|
002f60  e000              B        |L1.12132|
                  |L1.12130|
002f62  e0f6              B        |L1.12626|
                  |L1.12132|
002f64  f7fffffe          BL       uart_putchar
002f68  210a              MOVS     r1,#0xa
002f6a  483f              LDR      r0,|L1.12392|
002f6c  f7fffffe          BL       uart_putchar
002f70  210a              MOVS     r1,#0xa
002f72  483d              LDR      r0,|L1.12392|
002f74  f7fffffe          BL       uart_putchar
002f78  210a              MOVS     r1,#0xa
002f7a  483b              LDR      r0,|L1.12392|
002f7c  f7fffffe          BL       uart_putchar
002f80  210a              MOVS     r1,#0xa
002f82  4839              LDR      r0,|L1.12392|
002f84  f7fffffe          BL       uart_putchar
002f88  210a              MOVS     r1,#0xa
002f8a  4837              LDR      r0,|L1.12392|
002f8c  f7fffffe          BL       uart_putchar
002f90  210a              MOVS     r1,#0xa
002f92  4835              LDR      r0,|L1.12392|
002f94  f7fffffe          BL       uart_putchar
002f98  210a              MOVS     r1,#0xa
002f9a  4833              LDR      r0,|L1.12392|
002f9c  f7fffffe          BL       uart_putchar
002fa0  210a              MOVS     r1,#0xa
002fa2  4831              LDR      r0,|L1.12392|
002fa4  f7fffffe          BL       uart_putchar
002fa8  210a              MOVS     r1,#0xa
002faa  482f              LDR      r0,|L1.12392|
002fac  f7fffffe          BL       uart_putchar
002fb0  210a              MOVS     r1,#0xa
002fb2  482d              LDR      r0,|L1.12392|
002fb4  f7fffffe          BL       uart_putchar
002fb8  210a              MOVS     r1,#0xa
002fba  482b              LDR      r0,|L1.12392|
002fbc  f7fffffe          BL       uart_putchar
002fc0  210a              MOVS     r1,#0xa
002fc2  4829              LDR      r0,|L1.12392|
002fc4  f7fffffe          BL       uart_putchar
002fc8  210a              MOVS     r1,#0xa
002fca  4827              LDR      r0,|L1.12392|
002fcc  f7fffffe          BL       uart_putchar
002fd0  210a              MOVS     r1,#0xa
002fd2  4825              LDR      r0,|L1.12392|
002fd4  f7fffffe          BL       uart_putchar
002fd8  210a              MOVS     r1,#0xa
002fda  4823              LDR      r0,|L1.12392|
002fdc  f7fffffe          BL       uart_putchar
002fe0  210a              MOVS     r1,#0xa
002fe2  4821              LDR      r0,|L1.12392|
002fe4  f7fffffe          BL       uart_putchar
002fe8  210a              MOVS     r1,#0xa
002fea  481f              LDR      r0,|L1.12392|
002fec  f7fffffe          BL       uart_putchar
002ff0  210a              MOVS     r1,#0xa
002ff2  481d              LDR      r0,|L1.12392|
002ff4  f7fffffe          BL       uart_putchar
002ff8  210a              MOVS     r1,#0xa
002ffa  481b              LDR      r0,|L1.12392|
002ffc  f7fffffe          BL       uart_putchar
003000  210a              MOVS     r1,#0xa
003002  4819              LDR      r0,|L1.12392|
003004  f7fffffe          BL       uart_putchar
003008  210a              MOVS     r1,#0xa
00300a  4817              LDR      r0,|L1.12392|
00300c  f7fffffe          BL       uart_putchar
003010  210a              MOVS     r1,#0xa
003012  4815              LDR      r0,|L1.12392|
003014  f7fffffe          BL       uart_putchar
003018  210a              MOVS     r1,#0xa
00301a  4813              LDR      r0,|L1.12392|
00301c  e034              B        |L1.12424|
00301e  0000              DCW      0x0000
                  |L1.12320|
                          DCD      ||.text||+0xd54
                  |L1.12324|
                          DCD      ||.text||+0x8e8
                  |L1.12328|
003028  4f4b00            DCB      "OK",0
00302b  00                DCB      0
                  |L1.12332|
                          DCD      data
                  |L1.12336|
                          DCD      at_
                  |L1.12340|
                          DCD      apn
                  |L1.12344|
                          DCD      tmeout
                  |L1.12348|
                          DCD      port
                  |L1.12352|
                          DCD      ||ip||
                  |L1.12356|
003044  3e00              DCB      ">",0
003046  00                DCB      0
003047  00                DCB      0
                  |L1.12360|
                          DCD      uart_string_gsm
                  |L1.12364|
                          DCD      cond
                  |L1.12368|
                          DCD      0x00001388
                  |L1.12372|
003054  0a00              DCB      "\n",0
003056  00                DCB      0
003057  00                DCB      0
                  |L1.12376|
                          DCD      len
                  |L1.12380|
                          DCD      tout
                  |L1.12384|
                          DCD      ||k2||
                  |L1.12388|
                          DCD      k
                  |L1.12392|
                          DCD      0x4006b000
                  |L1.12396|
                          DCD      ||.text||+0x474
                  |L1.12400|
                          DCD      stcond1
                  |L1.12404|
                          DCD      stcond2
                  |L1.12408|
                          DCD      stcond3
                  |L1.12412|
                          DCD      stcond4
                  |L1.12416|
                          DCD      con1d
                  |L1.12420|
                          DCD      drive
                  |L1.12424|
003088  f7fffffe          BL       uart_putchar
00308c  210a              MOVS     r1,#0xa
00308e  48fe              LDR      r0,|L1.13448|
003090  f7fffffe          BL       uart_putchar
003094  210a              MOVS     r1,#0xa
003096  48fc              LDR      r0,|L1.13448|
003098  f7fffffe          BL       uart_putchar
00309c  210a              MOVS     r1,#0xa
00309e  48fa              LDR      r0,|L1.13448|
0030a0  f7fffffe          BL       uart_putchar
0030a4  210a              MOVS     r1,#0xa
0030a6  48f8              LDR      r0,|L1.13448|
0030a8  f7fffffe          BL       uart_putchar
0030ac  210a              MOVS     r1,#0xa
0030ae  48f6              LDR      r0,|L1.13448|
0030b0  f7fffffe          BL       uart_putchar
0030b4  210a              MOVS     r1,#0xa
0030b6  48f4              LDR      r0,|L1.13448|
0030b8  f7fffffe          BL       uart_putchar
0030bc  210a              MOVS     r1,#0xa
0030be  48f2              LDR      r0,|L1.13448|
0030c0  f7fffffe          BL       uart_putchar
0030c4  210a              MOVS     r1,#0xa
0030c6  48f0              LDR      r0,|L1.13448|
0030c8  f7fffffe          BL       uart_putchar
0030cc  210a              MOVS     r1,#0xa
0030ce  48ee              LDR      r0,|L1.13448|
0030d0  f7fffffe          BL       uart_putchar
0030d4  210a              MOVS     r1,#0xa
0030d6  48ec              LDR      r0,|L1.13448|
0030d8  f7fffffe          BL       uart_putchar
0030dc  210a              MOVS     r1,#0xa
0030de  48ea              LDR      r0,|L1.13448|
0030e0  f7fffffe          BL       uart_putchar
0030e4  210a              MOVS     r1,#0xa
0030e6  48e8              LDR      r0,|L1.13448|
0030e8  f7fffffe          BL       uart_putchar
0030ec  210a              MOVS     r1,#0xa
0030ee  48e6              LDR      r0,|L1.13448|
0030f0  f7fffffe          BL       uart_putchar
0030f4  210a              MOVS     r1,#0xa
0030f6  48e4              LDR      r0,|L1.13448|
0030f8  f7fffffe          BL       uart_putchar
0030fc  210a              MOVS     r1,#0xa
0030fe  48e2              LDR      r0,|L1.13448|
003100  f7fffffe          BL       uart_putchar
003104  210a              MOVS     r1,#0xa
003106  48e0              LDR      r0,|L1.13448|
003108  f7fffffe          BL       uart_putchar
00310c  210a              MOVS     r1,#0xa
00310e  48de              LDR      r0,|L1.13448|
003110  f7fffffe          BL       uart_putchar
;;;1040   									//memset(data,0,1000);
;;;1041   														//timer counts to wait for characters in uart 1 									
;;;1042   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003114  bf00              NOP      
                  |L1.12566|
003116  49dd              LDR      r1,|L1.13452|
003118  48dd              LDR      r0,|L1.13456|
00311a  f7fffffe          BL       strstr
00311e  2800              CMP      r0,#0
003120  d10a              BNE      |L1.12600|
003122  49da              LDR      r1,|L1.13452|
003124  398c              SUBS     r1,r1,#0x8c
003126  48da              LDR      r0,|L1.13456|
003128  f7fffffe          BL       strstr
00312c  2800              CMP      r0,#0
00312e  d103              BNE      |L1.12600|
003130  48d8              LDR      r0,|L1.13460|
003132  6800              LDR      r0,[r0,#0]  ; tout
003134  2805              CMP      r0,#5
003136  ddee              BLE      |L1.12566|
                  |L1.12600|
;;;1043   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1044   									}
;;;1045   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003138  f7fffffe          BL       clear
;;;1046   									//clear();
;;;1047   									memset(data,0,strlen(data));
00313c  48d6              LDR      r0,|L1.13464|
00313e  f7fffffe          BL       strlen
003142  4604              MOV      r4,r0
003144  4621              MOV      r1,r4
003146  48d4              LDR      r0,|L1.13464|
003148  f7fffffe          BL       __aeabi_memclr
;;;1048   									clear();
00314c  f7fffffe          BL       clear
003150  e142              B        |L1.13272|
                  |L1.12626|
;;;1049   
;;;1050   								
;;;1051   									
;;;1052   									
;;;1053   									
;;;1054   								//	log_it();								
;;;1055   								}else{send_chunk();}	
003152  f7fffffe          BL       send_chunk
003156  e13f              B        |L1.13272|
                  |L1.12632|
;;;1056   
;;;1057   																
;;;1058   								}else{
;;;1059   								
;;;1060   								
;;;1061   	delay(100);
003158  2064              MOVS     r0,#0x64
00315a  f7fffffe          BL       delay
;;;1062   		clear();//memset(uart_string_gsm,0,5000);
00315e  f7fffffe          BL       clear
;;;1063   	
;;;1064   	memset(at_,0,100);
003162  2164              MOVS     r1,#0x64
003164  48cd              LDR      r0,|L1.13468|
003166  f7fffffe          BL       __aeabi_memclr
;;;1065   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00316a  48cb              LDR      r0,|L1.13464|
00316c  f7fffffe          BL       strlen
003170  1c44              ADDS     r4,r0,#1
003172  4623              MOV      r3,r4
003174  4aca              LDR      r2,|L1.13472|
003176  49c5              LDR      r1,|L1.13452|
003178  3938              SUBS     r1,r1,#0x38
00317a  48c8              LDR      r0,|L1.13468|
00317c  f7fffffe          BL       __2sprintf
;;;1066   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003180  2005              MOVS     r0,#5
003182  4bc2              LDR      r3,|L1.13452|
003184  3b8c              SUBS     r3,r3,#0x8c
003186  461a              MOV      r2,r3
003188  3278              ADDS     r2,r2,#0x78
00318a  a1c6              ADR      r1,|L1.13476|
00318c  9000              STR      r0,[sp,#0]
00318e  48c3              LDR      r0,|L1.13468|
003190  f7fffffe          BL       send_SD
;;;1067   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1068   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1069   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1070   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1071   //	}
;;;1072   	
;;;1073   clear();	
003194  f7fffffe          BL       clear
;;;1074   									k2=0;									//string array counter for uart 1
003198  2000              MOVS     r0,#0
00319a  49c3              LDR      r1,|L1.13480|
00319c  6008              STR      r0,[r1,#0]  ; k2
;;;1075   									tout=0;	
00319e  49bd              LDR      r1,|L1.13460|
0031a0  6008              STR      r0,[r1,#0]  ; tout
;;;1076   		for(k=0;k<strlen(data);k++)
0031a2  49c2              LDR      r1,|L1.13484|
0031a4  6008              STR      r0,[r1,#0]  ; k
0031a6  e00b              B        |L1.12736|
                  |L1.12712|
;;;1077   		{
;;;1078   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0031a8  48bb              LDR      r0,|L1.13464|
0031aa  4ac0              LDR      r2,|L1.13484|
0031ac  6812              LDR      r2,[r2,#0]  ; k
0031ae  5c81              LDRB     r1,[r0,r2]
0031b0  48b5              LDR      r0,|L1.13448|
0031b2  f7fffffe          BL       uart_putchar
0031b6  48bd              LDR      r0,|L1.13484|
0031b8  6800              LDR      r0,[r0,#0]            ;1076  ; k
0031ba  1c40              ADDS     r0,r0,#1              ;1076
0031bc  49bb              LDR      r1,|L1.13484|
0031be  6008              STR      r0,[r1,#0]            ;1076  ; k
                  |L1.12736|
0031c0  48b5              LDR      r0,|L1.13464|
0031c2  f7fffffe          BL       strlen
0031c6  49b9              LDR      r1,|L1.13484|
0031c8  6809              LDR      r1,[r1,#0]            ;1076  ; k
0031ca  4288              CMP      r0,r1                 ;1076
0031cc  d8ec              BHI      |L1.12712|
;;;1079   		}	
;;;1080   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0031ce  210a              MOVS     r1,#0xa
0031d0  48ad              LDR      r0,|L1.13448|
0031d2  f7fffffe          BL       uart_putchar
0031d6  210a              MOVS     r1,#0xa
0031d8  48ab              LDR      r0,|L1.13448|
0031da  f7fffffe          BL       uart_putchar
0031de  210a              MOVS     r1,#0xa
0031e0  48a9              LDR      r0,|L1.13448|
0031e2  f7fffffe          BL       uart_putchar
0031e6  210a              MOVS     r1,#0xa
0031e8  48a7              LDR      r0,|L1.13448|
0031ea  f7fffffe          BL       uart_putchar
0031ee  210a              MOVS     r1,#0xa
0031f0  48a5              LDR      r0,|L1.13448|
0031f2  f7fffffe          BL       uart_putchar
0031f6  210a              MOVS     r1,#0xa
0031f8  48a3              LDR      r0,|L1.13448|
0031fa  f7fffffe          BL       uart_putchar
0031fe  210a              MOVS     r1,#0xa
003200  48a1              LDR      r0,|L1.13448|
003202  f7fffffe          BL       uart_putchar
003206  210a              MOVS     r1,#0xa
003208  489f              LDR      r0,|L1.13448|
00320a  f7fffffe          BL       uart_putchar
00320e  210a              MOVS     r1,#0xa
003210  489d              LDR      r0,|L1.13448|
003212  f7fffffe          BL       uart_putchar
003216  210a              MOVS     r1,#0xa
003218  489b              LDR      r0,|L1.13448|
00321a  f7fffffe          BL       uart_putchar
00321e  210a              MOVS     r1,#0xa
003220  4899              LDR      r0,|L1.13448|
003222  f7fffffe          BL       uart_putchar
003226  210a              MOVS     r1,#0xa
003228  4897              LDR      r0,|L1.13448|
00322a  f7fffffe          BL       uart_putchar
00322e  210a              MOVS     r1,#0xa
003230  4895              LDR      r0,|L1.13448|
003232  f7fffffe          BL       uart_putchar
003236  210a              MOVS     r1,#0xa
003238  4893              LDR      r0,|L1.13448|
00323a  f7fffffe          BL       uart_putchar
00323e  210a              MOVS     r1,#0xa
003240  4891              LDR      r0,|L1.13448|
003242  f7fffffe          BL       uart_putchar
003246  210a              MOVS     r1,#0xa
003248  488f              LDR      r0,|L1.13448|
00324a  f7fffffe          BL       uart_putchar
00324e  210a              MOVS     r1,#0xa
003250  488d              LDR      r0,|L1.13448|
003252  f7fffffe          BL       uart_putchar
003256  210a              MOVS     r1,#0xa
003258  488b              LDR      r0,|L1.13448|
00325a  f7fffffe          BL       uart_putchar
00325e  210a              MOVS     r1,#0xa
003260  4889              LDR      r0,|L1.13448|
003262  f7fffffe          BL       uart_putchar
003266  210a              MOVS     r1,#0xa
003268  4887              LDR      r0,|L1.13448|
00326a  f7fffffe          BL       uart_putchar
00326e  210a              MOVS     r1,#0xa
003270  4885              LDR      r0,|L1.13448|
003272  f7fffffe          BL       uart_putchar
003276  210a              MOVS     r1,#0xa
003278  4883              LDR      r0,|L1.13448|
00327a  f7fffffe          BL       uart_putchar
00327e  210a              MOVS     r1,#0xa
003280  4881              LDR      r0,|L1.13448|
003282  f7fffffe          BL       uart_putchar
003286  210a              MOVS     r1,#0xa
003288  487f              LDR      r0,|L1.13448|
00328a  f7fffffe          BL       uart_putchar
00328e  210a              MOVS     r1,#0xa
003290  487d              LDR      r0,|L1.13448|
003292  f7fffffe          BL       uart_putchar
003296  210a              MOVS     r1,#0xa
003298  487b              LDR      r0,|L1.13448|
00329a  f7fffffe          BL       uart_putchar
00329e  210a              MOVS     r1,#0xa
0032a0  4879              LDR      r0,|L1.13448|
0032a2  f7fffffe          BL       uart_putchar
0032a6  210a              MOVS     r1,#0xa
0032a8  4877              LDR      r0,|L1.13448|
0032aa  f7fffffe          BL       uart_putchar
0032ae  210a              MOVS     r1,#0xa
0032b0  4875              LDR      r0,|L1.13448|
0032b2  f7fffffe          BL       uart_putchar
0032b6  210a              MOVS     r1,#0xa
0032b8  4873              LDR      r0,|L1.13448|
0032ba  f7fffffe          BL       uart_putchar
0032be  210a              MOVS     r1,#0xa
0032c0  4871              LDR      r0,|L1.13448|
0032c2  f7fffffe          BL       uart_putchar
0032c6  210a              MOVS     r1,#0xa
0032c8  486f              LDR      r0,|L1.13448|
0032ca  f7fffffe          BL       uart_putchar
0032ce  210a              MOVS     r1,#0xa
0032d0  486d              LDR      r0,|L1.13448|
0032d2  f7fffffe          BL       uart_putchar
0032d6  210a              MOVS     r1,#0xa
0032d8  486b              LDR      r0,|L1.13448|
0032da  f7fffffe          BL       uart_putchar
0032de  210a              MOVS     r1,#0xa
0032e0  4869              LDR      r0,|L1.13448|
0032e2  f7fffffe          BL       uart_putchar
0032e6  210a              MOVS     r1,#0xa
0032e8  4867              LDR      r0,|L1.13448|
0032ea  f7fffffe          BL       uart_putchar
0032ee  210a              MOVS     r1,#0xa
0032f0  4865              LDR      r0,|L1.13448|
0032f2  f7fffffe          BL       uart_putchar
0032f6  210a              MOVS     r1,#0xa
0032f8  4863              LDR      r0,|L1.13448|
0032fa  f7fffffe          BL       uart_putchar
0032fe  210a              MOVS     r1,#0xa
003300  4861              LDR      r0,|L1.13448|
003302  f7fffffe          BL       uart_putchar
003306  210a              MOVS     r1,#0xa
003308  485f              LDR      r0,|L1.13448|
00330a  f7fffffe          BL       uart_putchar
00330e  210a              MOVS     r1,#0xa
003310  485d              LDR      r0,|L1.13448|
003312  f7fffffe          BL       uart_putchar
003316  210a              MOVS     r1,#0xa
003318  485b              LDR      r0,|L1.13448|
00331a  f7fffffe          BL       uart_putchar
00331e  210a              MOVS     r1,#0xa
003320  4859              LDR      r0,|L1.13448|
003322  f7fffffe          BL       uart_putchar
003326  210a              MOVS     r1,#0xa
003328  4857              LDR      r0,|L1.13448|
00332a  f7fffffe          BL       uart_putchar
00332e  210a              MOVS     r1,#0xa
003330  4855              LDR      r0,|L1.13448|
003332  f7fffffe          BL       uart_putchar
003336  210a              MOVS     r1,#0xa
003338  4853              LDR      r0,|L1.13448|
00333a  f7fffffe          BL       uart_putchar
00333e  210a              MOVS     r1,#0xa
003340  4851              LDR      r0,|L1.13448|
003342  f7fffffe          BL       uart_putchar
003346  210a              MOVS     r1,#0xa
003348  484f              LDR      r0,|L1.13448|
00334a  f7fffffe          BL       uart_putchar
00334e  210a              MOVS     r1,#0xa
003350  484d              LDR      r0,|L1.13448|
003352  f7fffffe          BL       uart_putchar
003356  210a              MOVS     r1,#0xa
003358  484b              LDR      r0,|L1.13448|
00335a  f7fffffe          BL       uart_putchar
00335e  210a              MOVS     r1,#0xa
003360  4849              LDR      r0,|L1.13448|
003362  f7fffffe          BL       uart_putchar
003366  210a              MOVS     r1,#0xa
003368  4847              LDR      r0,|L1.13448|
00336a  f7fffffe          BL       uart_putchar
00336e  210a              MOVS     r1,#0xa
003370  4845              LDR      r0,|L1.13448|
003372  f7fffffe          BL       uart_putchar
003376  210a              MOVS     r1,#0xa
003378  4843              LDR      r0,|L1.13448|
00337a  f7fffffe          BL       uart_putchar
00337e  210a              MOVS     r1,#0xa
003380  4841              LDR      r0,|L1.13448|
003382  f7fffffe          BL       uart_putchar
003386  210a              MOVS     r1,#0xa
003388  483f              LDR      r0,|L1.13448|
00338a  f7fffffe          BL       uart_putchar
00338e  210a              MOVS     r1,#0xa
003390  483d              LDR      r0,|L1.13448|
003392  f7fffffe          BL       uart_putchar
;;;1081   									//memset(data,0,1000);
;;;1082   														//timer counts to wait for characters in uart 1 									
;;;1083   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003396  bf00              NOP      
                  |L1.13208|
003398  493c              LDR      r1,|L1.13452|
00339a  483d              LDR      r0,|L1.13456|
00339c  f7fffffe          BL       strstr
0033a0  2800              CMP      r0,#0
0033a2  d10a              BNE      |L1.13242|
0033a4  4939              LDR      r1,|L1.13452|
0033a6  398c              SUBS     r1,r1,#0x8c
0033a8  4839              LDR      r0,|L1.13456|
0033aa  f7fffffe          BL       strstr
0033ae  2800              CMP      r0,#0
0033b0  d103              BNE      |L1.13242|
0033b2  4838              LDR      r0,|L1.13460|
0033b4  6800              LDR      r0,[r0,#0]  ; tout
0033b6  2805              CMP      r0,#5
0033b8  ddee              BLE      |L1.13208|
                  |L1.13242|
;;;1084   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1085   									}
;;;1086   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0033ba  f7fffffe          BL       clear
;;;1087   									//clear();
;;;1088   									memset(data,0,strlen(data));
0033be  4836              LDR      r0,|L1.13464|
0033c0  f7fffffe          BL       strlen
0033c4  4604              MOV      r4,r0
0033c6  4621              MOV      r1,r4
0033c8  4833              LDR      r0,|L1.13464|
0033ca  f7fffffe          BL       __aeabi_memclr
;;;1089   									clear();
0033ce  f7fffffe          BL       clear
0033d2  e001              B        |L1.13272|
                  |L1.13268|
;;;1090   
;;;1091   								
;;;1092   								
;;;1093   								//log_it();
;;;1094   									}			//
;;;1095   
;;;1096   							
;;;1097   
;;;1098   	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1099   	else
;;;1100   	{
;;;1101   		send_chunk();
0033d4  f7fffffe          BL       send_chunk
                  |L1.13272|
;;;1102   	}		
;;;1103   								
;;;1104   								
;;;1105   								
;;;1106   	memset(data,0,strlen(data));	
0033d8  482f              LDR      r0,|L1.13464|
0033da  f7fffffe          BL       strlen
0033de  4604              MOV      r4,r0
0033e0  4621              MOV      r1,r4
0033e2  482d              LDR      r0,|L1.13464|
0033e4  f7fffffe          BL       __aeabi_memclr
;;;1107   	uart_putchar(UART1_BASE_PTR, 0x1A);
0033e8  211a              MOVS     r1,#0x1a
0033ea  4827              LDR      r0,|L1.13448|
0033ec  f7fffffe          BL       uart_putchar
;;;1108   	
;;;1109   }
0033f0  bd38              POP      {r3-r5,pc}
;;;1110   
                          ENDP

                  log_it PROC
;;;1113   
;;;1114   void log_it()
0033f2  b538              PUSH     {r3-r5,lr}
;;;1115   {
;;;1116   	delay(100);
0033f4  2064              MOVS     r0,#0x64
0033f6  f7fffffe          BL       delay
;;;1117   		clear();//memset(uart_string_gsm,0,5000);
0033fa  f7fffffe          BL       clear
;;;1118   	
;;;1119   	memset(at_,0,100);
0033fe  2164              MOVS     r1,#0x64
003400  4826              LDR      r0,|L1.13468|
003402  f7fffffe          BL       __aeabi_memclr
;;;1120   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003406  4824              LDR      r0,|L1.13464|
003408  f7fffffe          BL       strlen
00340c  1c44              ADDS     r4,r0,#1
00340e  4623              MOV      r3,r4
003410  4a23              LDR      r2,|L1.13472|
003412  491e              LDR      r1,|L1.13452|
003414  3938              SUBS     r1,r1,#0x38
003416  4821              LDR      r0,|L1.13468|
003418  f7fffffe          BL       __2sprintf
;;;1121   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00341c  2005              MOVS     r0,#5
00341e  4b1b              LDR      r3,|L1.13452|
003420  3b8c              SUBS     r3,r3,#0x8c
003422  461a              MOV      r2,r3
003424  3278              ADDS     r2,r2,#0x78
003426  a11f              ADR      r1,|L1.13476|
003428  9000              STR      r0,[sp,#0]
00342a  481c              LDR      r0,|L1.13468|
00342c  f7fffffe          BL       send_SD
;;;1122   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1123   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1124   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1125   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1126   //	}
;;;1127   	
;;;1128   clear();	
003430  f7fffffe          BL       clear
;;;1129   									k2=0;									//string array counter for uart 1
003434  2000              MOVS     r0,#0
003436  491c              LDR      r1,|L1.13480|
003438  6008              STR      r0,[r1,#0]  ; k2
;;;1130   									tout=0;	
00343a  4916              LDR      r1,|L1.13460|
00343c  6008              STR      r0,[r1,#0]  ; tout
;;;1131   		for(k=0;k<strlen(data);k++)
00343e  491b              LDR      r1,|L1.13484|
003440  6008              STR      r0,[r1,#0]  ; k
003442  e00b              B        |L1.13404|
                  |L1.13380|
;;;1132   		{
;;;1133   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
003444  4814              LDR      r0,|L1.13464|
003446  4a19              LDR      r2,|L1.13484|
003448  6812              LDR      r2,[r2,#0]  ; k
00344a  5c81              LDRB     r1,[r0,r2]
00344c  480e              LDR      r0,|L1.13448|
00344e  f7fffffe          BL       uart_putchar
003452  4816              LDR      r0,|L1.13484|
003454  6800              LDR      r0,[r0,#0]            ;1131  ; k
003456  1c40              ADDS     r0,r0,#1              ;1131
003458  4914              LDR      r1,|L1.13484|
00345a  6008              STR      r0,[r1,#0]            ;1131  ; k
                  |L1.13404|
00345c  480e              LDR      r0,|L1.13464|
00345e  f7fffffe          BL       strlen
003462  4912              LDR      r1,|L1.13484|
003464  6809              LDR      r1,[r1,#0]            ;1131  ; k
003466  4288              CMP      r0,r1                 ;1131
003468  d8ec              BHI      |L1.13380|
;;;1134   		}	
;;;1135   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00346a  210a              MOVS     r1,#0xa
00346c  4806              LDR      r0,|L1.13448|
00346e  f7fffffe          BL       uart_putchar
003472  210a              MOVS     r1,#0xa
003474  4804              LDR      r0,|L1.13448|
003476  f7fffffe          BL       uart_putchar
00347a  210a              MOVS     r1,#0xa
00347c  4802              LDR      r0,|L1.13448|
00347e  f7fffffe          BL       uart_putchar
003482  210a              MOVS     r1,#0xa
003484  4800              LDR      r0,|L1.13448|
003486  e013              B        |L1.13488|
                  |L1.13448|
                          DCD      0x4006b000
                  |L1.13452|
                          DCD      ||.text||+0x8fc
                  |L1.13456|
                          DCD      uart_string_gsm
                  |L1.13460|
                          DCD      tout
                  |L1.13464|
                          DCD      data
                  |L1.13468|
                          DCD      at_
                  |L1.13472|
                          DCD      drive
                  |L1.13476|
0034a4  3e00              DCB      ">",0
0034a6  00                DCB      0
0034a7  00                DCB      0
                  |L1.13480|
                          DCD      ||k2||
                  |L1.13484|
                          DCD      k
                  |L1.13488|
0034b0  f7fffffe          BL       uart_putchar
0034b4  210a              MOVS     r1,#0xa
0034b6  48fa              LDR      r0,|L1.14496|
0034b8  f7fffffe          BL       uart_putchar
0034bc  210a              MOVS     r1,#0xa
0034be  48f8              LDR      r0,|L1.14496|
0034c0  f7fffffe          BL       uart_putchar
0034c4  210a              MOVS     r1,#0xa
0034c6  48f6              LDR      r0,|L1.14496|
0034c8  f7fffffe          BL       uart_putchar
0034cc  210a              MOVS     r1,#0xa
0034ce  48f4              LDR      r0,|L1.14496|
0034d0  f7fffffe          BL       uart_putchar
0034d4  210a              MOVS     r1,#0xa
0034d6  48f2              LDR      r0,|L1.14496|
0034d8  f7fffffe          BL       uart_putchar
0034dc  210a              MOVS     r1,#0xa
0034de  48f0              LDR      r0,|L1.14496|
0034e0  f7fffffe          BL       uart_putchar
0034e4  210a              MOVS     r1,#0xa
0034e6  48ee              LDR      r0,|L1.14496|
0034e8  f7fffffe          BL       uart_putchar
0034ec  210a              MOVS     r1,#0xa
0034ee  48ec              LDR      r0,|L1.14496|
0034f0  f7fffffe          BL       uart_putchar
0034f4  210a              MOVS     r1,#0xa
0034f6  48ea              LDR      r0,|L1.14496|
0034f8  f7fffffe          BL       uart_putchar
0034fc  210a              MOVS     r1,#0xa
0034fe  48e8              LDR      r0,|L1.14496|
003500  f7fffffe          BL       uart_putchar
003504  210a              MOVS     r1,#0xa
003506  48e6              LDR      r0,|L1.14496|
003508  f7fffffe          BL       uart_putchar
00350c  210a              MOVS     r1,#0xa
00350e  48e4              LDR      r0,|L1.14496|
003510  f7fffffe          BL       uart_putchar
003514  210a              MOVS     r1,#0xa
003516  48e2              LDR      r0,|L1.14496|
003518  f7fffffe          BL       uart_putchar
00351c  210a              MOVS     r1,#0xa
00351e  48e0              LDR      r0,|L1.14496|
003520  f7fffffe          BL       uart_putchar
003524  210a              MOVS     r1,#0xa
003526  48de              LDR      r0,|L1.14496|
003528  f7fffffe          BL       uart_putchar
00352c  210a              MOVS     r1,#0xa
00352e  48dc              LDR      r0,|L1.14496|
003530  f7fffffe          BL       uart_putchar
003534  210a              MOVS     r1,#0xa
003536  48da              LDR      r0,|L1.14496|
003538  f7fffffe          BL       uart_putchar
00353c  210a              MOVS     r1,#0xa
00353e  48d8              LDR      r0,|L1.14496|
003540  f7fffffe          BL       uart_putchar
003544  210a              MOVS     r1,#0xa
003546  48d6              LDR      r0,|L1.14496|
003548  f7fffffe          BL       uart_putchar
00354c  210a              MOVS     r1,#0xa
00354e  48d4              LDR      r0,|L1.14496|
003550  f7fffffe          BL       uart_putchar
003554  210a              MOVS     r1,#0xa
003556  48d2              LDR      r0,|L1.14496|
003558  f7fffffe          BL       uart_putchar
00355c  210a              MOVS     r1,#0xa
00355e  48d0              LDR      r0,|L1.14496|
003560  f7fffffe          BL       uart_putchar
003564  210a              MOVS     r1,#0xa
003566  48ce              LDR      r0,|L1.14496|
003568  f7fffffe          BL       uart_putchar
00356c  210a              MOVS     r1,#0xa
00356e  48cc              LDR      r0,|L1.14496|
003570  f7fffffe          BL       uart_putchar
003574  210a              MOVS     r1,#0xa
003576  48ca              LDR      r0,|L1.14496|
003578  f7fffffe          BL       uart_putchar
00357c  210a              MOVS     r1,#0xa
00357e  48c8              LDR      r0,|L1.14496|
003580  f7fffffe          BL       uart_putchar
003584  210a              MOVS     r1,#0xa
003586  48c6              LDR      r0,|L1.14496|
003588  f7fffffe          BL       uart_putchar
00358c  210a              MOVS     r1,#0xa
00358e  48c4              LDR      r0,|L1.14496|
003590  f7fffffe          BL       uart_putchar
003594  210a              MOVS     r1,#0xa
003596  48c2              LDR      r0,|L1.14496|
003598  f7fffffe          BL       uart_putchar
00359c  210a              MOVS     r1,#0xa
00359e  48c0              LDR      r0,|L1.14496|
0035a0  f7fffffe          BL       uart_putchar
0035a4  210a              MOVS     r1,#0xa
0035a6  48be              LDR      r0,|L1.14496|
0035a8  f7fffffe          BL       uart_putchar
0035ac  210a              MOVS     r1,#0xa
0035ae  48bc              LDR      r0,|L1.14496|
0035b0  f7fffffe          BL       uart_putchar
0035b4  210a              MOVS     r1,#0xa
0035b6  48ba              LDR      r0,|L1.14496|
0035b8  f7fffffe          BL       uart_putchar
0035bc  210a              MOVS     r1,#0xa
0035be  48b8              LDR      r0,|L1.14496|
0035c0  f7fffffe          BL       uart_putchar
0035c4  210a              MOVS     r1,#0xa
0035c6  48b6              LDR      r0,|L1.14496|
0035c8  f7fffffe          BL       uart_putchar
0035cc  210a              MOVS     r1,#0xa
0035ce  48b4              LDR      r0,|L1.14496|
0035d0  f7fffffe          BL       uart_putchar
0035d4  210a              MOVS     r1,#0xa
0035d6  48b2              LDR      r0,|L1.14496|
0035d8  f7fffffe          BL       uart_putchar
0035dc  210a              MOVS     r1,#0xa
0035de  48b0              LDR      r0,|L1.14496|
0035e0  f7fffffe          BL       uart_putchar
0035e4  210a              MOVS     r1,#0xa
0035e6  48ae              LDR      r0,|L1.14496|
0035e8  f7fffffe          BL       uart_putchar
0035ec  210a              MOVS     r1,#0xa
0035ee  48ac              LDR      r0,|L1.14496|
0035f0  f7fffffe          BL       uart_putchar
0035f4  210a              MOVS     r1,#0xa
0035f6  48aa              LDR      r0,|L1.14496|
0035f8  f7fffffe          BL       uart_putchar
0035fc  210a              MOVS     r1,#0xa
0035fe  48a8              LDR      r0,|L1.14496|
003600  f7fffffe          BL       uart_putchar
003604  210a              MOVS     r1,#0xa
003606  48a6              LDR      r0,|L1.14496|
003608  f7fffffe          BL       uart_putchar
00360c  210a              MOVS     r1,#0xa
00360e  48a4              LDR      r0,|L1.14496|
003610  f7fffffe          BL       uart_putchar
003614  210a              MOVS     r1,#0xa
003616  48a2              LDR      r0,|L1.14496|
003618  f7fffffe          BL       uart_putchar
00361c  210a              MOVS     r1,#0xa
00361e  48a0              LDR      r0,|L1.14496|
003620  f7fffffe          BL       uart_putchar
003624  210a              MOVS     r1,#0xa
003626  489e              LDR      r0,|L1.14496|
003628  f7fffffe          BL       uart_putchar
00362c  210a              MOVS     r1,#0xa
00362e  489c              LDR      r0,|L1.14496|
003630  f7fffffe          BL       uart_putchar
003634  210a              MOVS     r1,#0xa
003636  489a              LDR      r0,|L1.14496|
003638  f7fffffe          BL       uart_putchar
00363c  210a              MOVS     r1,#0xa
00363e  4898              LDR      r0,|L1.14496|
003640  f7fffffe          BL       uart_putchar
003644  210a              MOVS     r1,#0xa
003646  4896              LDR      r0,|L1.14496|
003648  f7fffffe          BL       uart_putchar
00364c  210a              MOVS     r1,#0xa
00364e  4894              LDR      r0,|L1.14496|
003650  f7fffffe          BL       uart_putchar
003654  210a              MOVS     r1,#0xa
003656  4892              LDR      r0,|L1.14496|
003658  f7fffffe          BL       uart_putchar
;;;1136   									//memset(data,0,1000);
;;;1137   														//timer counts to wait for characters in uart 1 									
;;;1138   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00365c  bf00              NOP      
                  |L1.13918|
00365e  4991              LDR      r1,|L1.14500|
003660  4891              LDR      r0,|L1.14504|
003662  f7fffffe          BL       strstr
003666  2800              CMP      r0,#0
003668  d10a              BNE      |L1.13952|
00366a  498e              LDR      r1,|L1.14500|
00366c  398c              SUBS     r1,r1,#0x8c
00366e  488e              LDR      r0,|L1.14504|
003670  f7fffffe          BL       strstr
003674  2800              CMP      r0,#0
003676  d103              BNE      |L1.13952|
003678  488c              LDR      r0,|L1.14508|
00367a  6800              LDR      r0,[r0,#0]  ; tout
00367c  2805              CMP      r0,#5
00367e  ddee              BLE      |L1.13918|
                  |L1.13952|
;;;1139   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1140   									}
;;;1141   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003680  f7fffffe          BL       clear
;;;1142   									//clear();
;;;1143   									memset(data,0,strlen(data));
003684  488a              LDR      r0,|L1.14512|
003686  f7fffffe          BL       strlen
00368a  4604              MOV      r4,r0
00368c  4621              MOV      r1,r4
00368e  4888              LDR      r0,|L1.14512|
003690  f7fffffe          BL       __aeabi_memclr
;;;1144   									clear();
003694  f7fffffe          BL       clear
;;;1145   
;;;1146   								
;;;1147   						//		
;;;1148   }
003698  bd38              POP      {r3-r5,pc}
;;;1149   
                          ENDP

                  read PROC
;;;1365   
;;;1366   void read(char * A,char * B,char * C)
00369a  b570              PUSH     {r4-r6,lr}
;;;1367   {k=0;l=time;
00369c  4604              MOV      r4,r0
00369e  460d              MOV      r5,r1
0036a0  4616              MOV      r6,r2
0036a2  2000              MOVS     r0,#0
0036a4  4983              LDR      r1,|L1.14516|
0036a6  6008              STR      r0,[r1,#0]  ; k
0036a8  4883              LDR      r0,|L1.14520|
0036aa  6800              LDR      r0,[r0,#0]  ; time
0036ac  4983              LDR      r1,|L1.14524|
0036ae  6008              STR      r0,[r1,#0]  ; l
;;;1368   			do{
0036b0  bf00              NOP      
                  |L1.14002|
;;;1369   			if( uart_getchar_present (UART1_BASE_PTR))	
0036b2  487b              LDR      r0,|L1.14496|
0036b4  f7fffffe          BL       uart_getchar_present
0036b8  2800              CMP      r0,#0
0036ba  d018              BEQ      |L1.14062|
;;;1370   			{uart_string_gps[k]=UART_D_REG(UART1_BASE_PTR);k++;l=time;if(k>298){k=0;}}
0036bc  4878              LDR      r0,|L1.14496|
0036be  79c0              LDRB     r0,[r0,#7]
0036c0  497f              LDR      r1,|L1.14528|
0036c2  4a7c              LDR      r2,|L1.14516|
0036c4  6812              LDR      r2,[r2,#0]  ; k
0036c6  5488              STRB     r0,[r1,r2]
0036c8  487a              LDR      r0,|L1.14516|
0036ca  6800              LDR      r0,[r0,#0]  ; k
0036cc  1c40              ADDS     r0,r0,#1
0036ce  4979              LDR      r1,|L1.14516|
0036d0  6008              STR      r0,[r1,#0]  ; k
0036d2  4879              LDR      r0,|L1.14520|
0036d4  6800              LDR      r0,[r0,#0]  ; time
0036d6  4979              LDR      r1,|L1.14524|
0036d8  6008              STR      r0,[r1,#0]  ; l
0036da  4876              LDR      r0,|L1.14516|
0036dc  6800              LDR      r0,[r0,#0]  ; k
0036de  21ff              MOVS     r1,#0xff
0036e0  312b              ADDS     r1,r1,#0x2b
0036e2  4288              CMP      r0,r1
0036e4  dd09              BLE      |L1.14074|
0036e6  2000              MOVS     r0,#0
0036e8  4972              LDR      r1,|L1.14516|
0036ea  6008              STR      r0,[r1,#0]  ; k
0036ec  e005              B        |L1.14074|
                  |L1.14062|
;;;1371   				else{
;;;1372   							l--;if(l==10){}
0036ee  4873              LDR      r0,|L1.14524|
0036f0  6800              LDR      r0,[r0,#0]  ; l
0036f2  1e40              SUBS     r0,r0,#1
0036f4  4971              LDR      r1,|L1.14524|
0036f6  6008              STR      r0,[r1,#0]  ; l
0036f8  bf00              NOP      
                  |L1.14074|
;;;1373   						}
;;;1374   			}while(!((strstr(uart_string_gps, "OK\r\n"))
0036fa  496a              LDR      r1,|L1.14500|
0036fc  4870              LDR      r0,|L1.14528|
0036fe  f7fffffe          BL       strstr
003702  2800              CMP      r0,#0
003704  d110              BNE      |L1.14120|
003706  4967              LDR      r1,|L1.14500|
003708  3914              SUBS     r1,r1,#0x14
00370a  486d              LDR      r0,|L1.14528|
00370c  f7fffffe          BL       strstr
003710  2800              CMP      r0,#0
003712  d109              BNE      |L1.14120|
003714  4869              LDR      r0,|L1.14524|
003716  6800              LDR      r0,[r0,#0]  ; l
003718  2800              CMP      r0,#0
00371a  dd05              BLE      |L1.14120|
00371c  4969              LDR      r1,|L1.14532|
00371e  4868              LDR      r0,|L1.14528|
003720  f7fffffe          BL       strstr
003724  2800              CMP      r0,#0
003726  d0c4              BEQ      |L1.14002|
                  |L1.14120|
;;;1375   							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;1376   				        	||(strstr(uart_string_gps, "ERROR:"))
;;;1377   							));
;;;1378   //		clear();
;;;1379   }	
003728  bd70              POP      {r4-r6,pc}
;;;1380   void read2(char * respA,char * respB,char * respC, int timeout)
                          ENDP

                  read2 PROC
00372a  b5f8              PUSH     {r3-r7,lr}
;;;1381   {k=0;l=time;
00372c  4604              MOV      r4,r0
00372e  460e              MOV      r6,r1
003730  4615              MOV      r5,r2
003732  461f              MOV      r7,r3
003734  2000              MOVS     r0,#0
003736  495f              LDR      r1,|L1.14516|
003738  6008              STR      r0,[r1,#0]  ; k
00373a  485f              LDR      r0,|L1.14520|
00373c  6800              LDR      r0,[r0,#0]  ; time
00373e  495f              LDR      r1,|L1.14524|
003740  6008              STR      r0,[r1,#0]  ; l
;;;1382   			do{
003742  bf00              NOP      
                  |L1.14148|
;;;1383   			if( uart_getchar_present (UART2_BASE_PTR))	
003744  4860              LDR      r0,|L1.14536|
003746  f7fffffe          BL       uart_getchar_present
00374a  2800              CMP      r0,#0
00374c  d018              BEQ      |L1.14208|
;;;1384   			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=time;if(k>298){k=0;}}
00374e  485e              LDR      r0,|L1.14536|
003750  79c0              LDRB     r0,[r0,#7]
003752  495b              LDR      r1,|L1.14528|
003754  4a57              LDR      r2,|L1.14516|
003756  6812              LDR      r2,[r2,#0]  ; k
003758  5488              STRB     r0,[r1,r2]
00375a  4856              LDR      r0,|L1.14516|
00375c  6800              LDR      r0,[r0,#0]  ; k
00375e  1c40              ADDS     r0,r0,#1
003760  4954              LDR      r1,|L1.14516|
003762  6008              STR      r0,[r1,#0]  ; k
003764  4854              LDR      r0,|L1.14520|
003766  6800              LDR      r0,[r0,#0]  ; time
003768  4954              LDR      r1,|L1.14524|
00376a  6008              STR      r0,[r1,#0]  ; l
00376c  4851              LDR      r0,|L1.14516|
00376e  6800              LDR      r0,[r0,#0]  ; k
003770  21ff              MOVS     r1,#0xff
003772  312b              ADDS     r1,r1,#0x2b
003774  4288              CMP      r0,r1
003776  dd08              BLE      |L1.14218|
003778  2000              MOVS     r0,#0
00377a  494e              LDR      r1,|L1.14516|
00377c  6008              STR      r0,[r1,#0]  ; k
00377e  e004              B        |L1.14218|
                  |L1.14208|
;;;1385   				else{				
;;;1386   								l--;
003780  484e              LDR      r0,|L1.14524|
003782  6800              LDR      r0,[r0,#0]  ; l
003784  1e40              SUBS     r0,r0,#1
003786  494d              LDR      r1,|L1.14524|
003788  6008              STR      r0,[r1,#0]  ; l
                  |L1.14218|
;;;1387   						}
;;;1388   			}while(!((strstr(uart_string_gps, respA))
00378a  4621              MOV      r1,r4
00378c  484c              LDR      r0,|L1.14528|
00378e  f7fffffe          BL       strstr
003792  2800              CMP      r0,#0
003794  d10f              BNE      |L1.14262|
003796  4631              MOV      r1,r6
003798  4849              LDR      r0,|L1.14528|
00379a  f7fffffe          BL       strstr
00379e  2800              CMP      r0,#0
0037a0  d109              BNE      |L1.14262|
0037a2  4846              LDR      r0,|L1.14524|
0037a4  6800              LDR      r0,[r0,#0]  ; l
0037a6  2800              CMP      r0,#0
0037a8  dd05              BLE      |L1.14262|
0037aa  4629              MOV      r1,r5
0037ac  4844              LDR      r0,|L1.14528|
0037ae  f7fffffe          BL       strstr
0037b2  2800              CMP      r0,#0
0037b4  d0c6              BEQ      |L1.14148|
                  |L1.14262|
;;;1389   							||(strstr(uart_string_gps, respB))  || (l<=0) 
;;;1390   				        	||(strstr(uart_string_gps, respC))
;;;1391   							));
;;;1392   //		clear();
;;;1393   }	
0037b6  bdf8              POP      {r3-r7,pc}
;;;1394   
                          ENDP

                  send_modem2 PROC
;;;1405   	
;;;1406   void send_modem2(char ch[])
0037b8  b570              PUSH     {r4-r6,lr}
;;;1407   	{	
0037ba  4604              MOV      r4,r0
;;;1408   						unsigned char i21;
;;;1409   						i21=0;
0037bc  2500              MOVS     r5,#0
;;;1410   						while ((*(ch+i21)) != '\0') // NULL
0037be  e005              B        |L1.14284|
                  |L1.14272|
;;;1411   						{	
;;;1412   						// delay(1);
;;;1413   						 uart_putchar(UART2_BASE_PTR, (*(ch+i21)));
0037c0  5d61              LDRB     r1,[r4,r5]
0037c2  4841              LDR      r0,|L1.14536|
0037c4  f7fffffe          BL       uart_putchar
;;;1414   						 i21++;
0037c8  1c68              ADDS     r0,r5,#1
0037ca  b2c5              UXTB     r5,r0
                  |L1.14284|
0037cc  5d60              LDRB     r0,[r4,r5]            ;1410
0037ce  2800              CMP      r0,#0                 ;1410
0037d0  d1f6              BNE      |L1.14272|
;;;1415   						}
;;;1416   		
;;;1417   	}	
0037d2  bd70              POP      {r4-r6,pc}
;;;1418   	
                          ENDP

                  gsm_gps_sleep PROC
;;;1641   
;;;1642   void gsm_gps_sleep()
0037d4  b508              PUSH     {r3,lr}
;;;1643   {
;;;1644   	
;;;1645   sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0037d6  4b3d              LDR      r3,|L1.14540|
0037d8  4a3d              LDR      r2,|L1.14544|
0037da  493a              LDR      r1,|L1.14532|
0037dc  3160              ADDS     r1,r1,#0x60
0037de  483d              LDR      r0,|L1.14548|
0037e0  f7fffffe          BL       __2sprintf
;;;1646   send_GSM( at_ , "CONNECT", "ERROR" , "CONNECT",tmeout);										
0037e4  483c              LDR      r0,|L1.14552|
0037e6  6800              LDR      r0,[r0,#0]  ; tmeout
0037e8  4b36              LDR      r3,|L1.14532|
0037ea  3380              ADDS     r3,r3,#0x80
0037ec  4a2d              LDR      r2,|L1.14500|
0037ee  3a8c              SUBS     r2,r2,#0x8c
0037f0  4619              MOV      r1,r3
0037f2  9000              STR      r0,[sp,#0]
0037f4  4837              LDR      r0,|L1.14548|
0037f6  f7fffffe          BL       send_GSM
;;;1647   send_chunk();
0037fa  f7fffffe          BL       send_chunk
;;;1648   	//sleep modules;
;;;1649   //	do{
;;;1650   //				accel_read();
;;;1651   //				motion_samples = 0;
;;;1652   //				detect_motion();
;;;1653   //				
;;;1654   //	}while(motion != 1);
;;;1655   //	motion_samples = 0;
;;;1656   //wakeup modules;
;;;1657   
;;;1658   
;;;1659   
;;;1660   
;;;1661   }
0037fe  bd08              POP      {r3,pc}
;;;1662   
                          ENDP

                  SW1_init PROC
;;;86     
;;;87     void SW1_init(void){
003800  4836              LDR      r0,|L1.14556|
;;;88     
;;;89     #ifdef CMSIS
;;;90     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
003802  6b80              LDR      r0,[r0,#0x38]
003804  2101              MOVS     r1,#1
003806  02c9              LSLS     r1,r1,#11
003808  4308              ORRS     r0,r0,r1
00380a  4934              LDR      r1,|L1.14556|
00380c  6388              STR      r0,[r1,#0x38]
;;;91     	
;;;92     	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00380e  4834              LDR      r0,|L1.14560|
003810  4934              LDR      r1,|L1.14564|
003812  60c8              STR      r0,[r1,#0xc]
;;;93     	
;;;94     	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
003814  4831              LDR      r0,|L1.14556|
003816  6b80              LDR      r0,[r0,#0x38]
003818  2101              MOVS     r1,#1
00381a  0309              LSLS     r1,r1,#12
00381c  4308              ORRS     r0,r0,r1
00381e  492f              LDR      r1,|L1.14556|
003820  6388              STR      r0,[r1,#0x38]
;;;95     	
;;;96     	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003822  482f              LDR      r0,|L1.14560|
003824  1c40              ADDS     r0,r0,#1
003826  4930              LDR      r1,|L1.14568|
003828  6188              STR      r0,[r1,#0x18]
;;;97     	
;;;98     	PORTD_PCR0 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00382a  1e40              SUBS     r0,r0,#1
00382c  6008              STR      r0,[r1,#0]
;;;99     	
;;;100    	
;;;101    	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
00382e  201f              MOVS     r0,#0x1f
003830  2101              MOVS     r1,#1
003832  4081              LSLS     r1,r1,r0
003834  4a2d              LDR      r2,|L1.14572|
003836  6011              STR      r1,[r2,#0]
003838  bf00              NOP      
;;;102    #else
;;;103               
;;;104            enable_irq(31);
;;;105            set_irq_priority(31, 1);
;;;106            
;;;107            SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;108            
;;;109            PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;110            
;;;111    #endif
;;;112    }
00383a  4770              BX       lr
;;;113    
                          ENDP

                  LED_state PROC
;;;182    
;;;183    void LED_state(void){
00383c  b500              PUSH     {lr}
;;;184    if(sleep_flag == 1)
00383e  482c              LDR      r0,|L1.14576|
003840  6800              LDR      r0,[r0,#0]  ; sleep_flag
003842  2801              CMP      r0,#1
003844  d102              BNE      |L1.14412|
;;;185    {stateCount=99;
003846  2063              MOVS     r0,#0x63
003848  492a              LDR      r1,|L1.14580|
00384a  7008              STRB     r0,[r1,#0]
                  |L1.14412|
;;;186    }	
;;;187    			
;;;188    	switch(stateCount){
00384c  4829              LDR      r0,|L1.14580|
00384e  7800              LDRB     r0,[r0,#0]  ; stateCount
003850  0003              MOVS     r3,r0
003852  f7fffffe          BL       __ARM_common_switch8
003856  0604              DCB      0x06,0x04
003858  0c141c53          DCB      0x0c,0x14,0x1c,0x53
00385c  5b63              DCB      0x5b,0x63
;;;189    
;;;190    		
;;;191                case 0:     //Red
;;;192                       REDBAT_ON;
00385e  2040              MOVS     r0,#0x40
003860  4925              LDR      r1,|L1.14584|
003862  6088              STR      r0,[r1,#8]
;;;193                       GREENBAT_OFF;
003864  2080              MOVS     r0,#0x80
003866  6048              STR      r0,[r1,#4]
;;;194                       BLUEBAT_OFF;
003868  0040              LSLS     r0,r0,#1
00386a  6048              STR      r0,[r1,#4]
;;;195                       break;
00386c  e061              B        |L1.14642|
;;;196    
;;;197                case 1:	//Yellow
;;;198    		               REDBAT_ON;
00386e  2040              MOVS     r0,#0x40
003870  4921              LDR      r1,|L1.14584|
003872  6088              STR      r0,[r1,#8]
;;;199    		               GREENBAT_ON;
003874  2080              MOVS     r0,#0x80
003876  6088              STR      r0,[r1,#8]
;;;200    		               BLUEBAT_OFF;
003878  0040              LSLS     r0,r0,#1
00387a  6048              STR      r0,[r1,#4]
;;;201    		               break;
00387c  e059              B        |L1.14642|
;;;202    				
;;;203                case 2:	//Green
;;;204    		               REDBAT_OFF;
00387e  2040              MOVS     r0,#0x40
003880  491d              LDR      r1,|L1.14584|
003882  6048              STR      r0,[r1,#4]
;;;205    		               GREENBAT_ON;
003884  2080              MOVS     r0,#0x80
003886  6088              STR      r0,[r1,#8]
;;;206    		               BLUEBAT_OFF;
003888  0040              LSLS     r0,r0,#1
00388a  6048              STR      r0,[r1,#4]
;;;207    		               break;
00388c  e051              B        |L1.14642|
;;;208    				
;;;209                case 3:	//Blue
;;;210    		               REDBAT_OFF;
00388e  2040              MOVS     r0,#0x40
003890  4919              LDR      r1,|L1.14584|
003892  6048              STR      r0,[r1,#4]
;;;211    		               GREENBAT_OFF;
003894  2080              MOVS     r0,#0x80
003896  6048              STR      r0,[r1,#4]
;;;212    		               BLUEBAT_ON;
003898  0040              LSLS     r0,r0,#1
00389a  6088              STR      r0,[r1,#8]
;;;213    		               break;
00389c  e049              B        |L1.14642|
00389e  0000              DCW      0x0000
                  |L1.14496|
                          DCD      0x4006b000
                  |L1.14500|
                          DCD      ||.text||+0x8fc
                  |L1.14504|
                          DCD      uart_string_gsm
                  |L1.14508|
                          DCD      tout
                  |L1.14512|
                          DCD      data
                  |L1.14516|
                          DCD      k
                  |L1.14520|
                          DCD      time
                  |L1.14524|
                          DCD      l
                  |L1.14528|
                          DCD      uart_string_gps
                  |L1.14532|
                          DCD      ||.text||+0xd54
                  |L1.14536|
                          DCD      0x4006c000
                  |L1.14540|
                          DCD      port
                  |L1.14544|
                          DCD      ||ip||
                  |L1.14548|
                          DCD      at_
                  |L1.14552|
                          DCD      tmeout
                  |L1.14556|
                          DCD      0x40048000
                  |L1.14560|
                          DCD      0x000a0102
                  |L1.14564|
                          DCD      0x4004b000
                  |L1.14568|
                          DCD      0x4004c000
                  |L1.14572|
                          DCD      0xe000e100
                  |L1.14576|
                          DCD      sleep_flag
                  |L1.14580|
                          DCD      stateCount
                  |L1.14584|
                          DCD      0x400ff080
;;;214    				
;;;215                case 4:	//Violet
;;;216    		               REDBAT_ON;
0038fc  2040              MOVS     r0,#0x40
0038fe  49f7              LDR      r1,|L1.15580|
003900  6088              STR      r0,[r1,#8]
;;;217    		               GREENBAT_OFF;
003902  2080              MOVS     r0,#0x80
003904  6048              STR      r0,[r1,#4]
;;;218    		               BLUEBAT_ON;
003906  0040              LSLS     r0,r0,#1
003908  6088              STR      r0,[r1,#8]
;;;219    		               break;
00390a  e012              B        |L1.14642|
;;;220    				
;;;221                case 5:	//White
;;;222    		              REDBAT_ON;
00390c  2040              MOVS     r0,#0x40
00390e  49f3              LDR      r1,|L1.15580|
003910  6088              STR      r0,[r1,#8]
;;;223    		              GREENBAT_ON;
003912  2080              MOVS     r0,#0x80
003914  6088              STR      r0,[r1,#8]
;;;224    		              BLUEBAT_ON;
003916  0040              LSLS     r0,r0,#1
003918  6088              STR      r0,[r1,#8]
;;;225    		              break;
00391a  e00a              B        |L1.14642|
;;;226    				
;;;227                default:	//Red
;;;228    							
;;;229    
;;;230    		              REDBAT_OFF;
00391c  2040              MOVS     r0,#0x40
00391e  49ef              LDR      r1,|L1.15580|
003920  6048              STR      r0,[r1,#4]
;;;231    		              GREENBAT_OFF;
003922  2080              MOVS     r0,#0x80
003924  6048              STR      r0,[r1,#4]
;;;232    		              BLUEBAT_OFF;
003926  0040              LSLS     r0,r0,#1
003928  6048              STR      r0,[r1,#4]
;;;233    		              stateCount = 0;	//Reset state counter
00392a  2000              MOVS     r0,#0
00392c  49ec              LDR      r1,|L1.15584|
00392e  7008              STRB     r0,[r1,#0]
;;;234    			      break;
003930  bf00              NOP      
                  |L1.14642|
003932  bf00              NOP                            ;195
;;;235    
;;;236        }
;;;237    	
;;;238    }
003934  bd00              POP      {pc}
;;;239    
                          ENDP

                  PORTD_IRQHandler PROC
;;;114    #ifdef CMSIS
;;;115    void PORTD_IRQHandler(void){
003936  b510              PUSH     {r4,lr}
;;;116      
;;;117    	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
003938  48ea              LDR      r0,|L1.15588|
00393a  6a00              LDR      r0,[r0,#0x20]
00393c  2108              MOVS     r1,#8
00393e  4008              ANDS     r0,r0,r1
003940  2800              CMP      r0,#0
003942  d014              BEQ      |L1.14702|
;;;118    	{
;;;119    		PORTC_ISFR |= (1 << SW_PIN);
003944  48e7              LDR      r0,|L1.15588|
003946  6a00              LDR      r0,[r0,#0x20]
003948  4308              ORRS     r0,r0,r1
00394a  49e6              LDR      r1,|L1.15588|
00394c  6208              STR      r0,[r1,#0x20]
;;;120    		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
00394e  48e6              LDR      r0,|L1.15592|
003950  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
003952  2101              MOVS     r1,#1
003954  4308              ORRS     r0,r0,r1
003956  49e4              LDR      r1,|L1.15592|
003958  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;121    ringflag=1;
00395a  2001              MOVS     r0,#1
00395c  49e3              LDR      r1,|L1.15596|
00395e  7008              STRB     r0,[r1,#0]
;;;122    send_SOS=1;	
003960  49e3              LDR      r1,|L1.15600|
003962  6008              STR      r0,[r1,#0]  ; send_SOS
;;;123    /**************ISR follows******/	
;;;124     stateCount++;
003964  48de              LDR      r0,|L1.15584|
003966  7800              LDRB     r0,[r0,#0]  ; stateCount
003968  1c40              ADDS     r0,r0,#1
00396a  49dd              LDR      r1,|L1.15584|
00396c  7008              STRB     r0,[r1,#0]
                  |L1.14702|
;;;125    	}
;;;126    	
;;;127    	if(PORTD_ISFR & (1 << 0))		//Check for interrupt on PORTD Pin 6
00396e  48e1              LDR      r0,|L1.15604|
003970  6a00              LDR      r0,[r0,#0x20]
003972  07c0              LSLS     r0,r0,#31
003974  0fc0              LSRS     r0,r0,#31
003976  2800              CMP      r0,#0
003978  d012              BEQ      |L1.14752|
;;;128    	{
;;;129    		PORTD_ISFR |= (1 << 0);
00397a  48de              LDR      r0,|L1.15604|
00397c  6a00              LDR      r0,[r0,#0x20]
00397e  2101              MOVS     r1,#1
003980  4308              ORRS     r0,r0,r1
003982  49dc              LDR      r1,|L1.15604|
003984  6208              STR      r0,[r1,#0x20]
;;;130    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
003986  48d8              LDR      r0,|L1.15592|
003988  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
00398a  2101              MOVS     r1,#1
00398c  4308              ORRS     r0,r0,r1
00398e  49d6              LDR      r1,|L1.15592|
003990  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;131    	
;;;132    /**************ISR follows******/	
;;;133    // stateCount++;
;;;134    ringflag=1;
003992  2001              MOVS     r0,#1
003994  49d5              LDR      r1,|L1.15596|
003996  7008              STRB     r0,[r1,#0]
;;;135    send_SOS=1;		
003998  49d5              LDR      r1,|L1.15600|
00399a  6008              STR      r0,[r1,#0]  ; send_SOS
;;;136    
;;;137    	// wakeup and reset
;;;138    	
;;;139    clear();	
00399c  f7fffffe          BL       clear
                  |L1.14752|
;;;140    	}	
;;;141    	
;;;142    	
;;;143    	
;;;144    	
;;;145    	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
0039a0  48d4              LDR      r0,|L1.15604|
0039a2  6a00              LDR      r0,[r0,#0x20]
0039a4  2140              MOVS     r1,#0x40
0039a6  4008              ANDS     r0,r0,r1
0039a8  2800              CMP      r0,#0
0039aa  d00f              BEQ      |L1.14796|
;;;146    	{
;;;147    		PORTD_ISFR |= (1 << 6);
0039ac  48d1              LDR      r0,|L1.15604|
0039ae  6a00              LDR      r0,[r0,#0x20]
0039b0  4308              ORRS     r0,r0,r1
0039b2  49d0              LDR      r1,|L1.15604|
0039b4  6208              STR      r0,[r1,#0x20]
;;;148    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
0039b6  48cc              LDR      r0,|L1.15592|
0039b8  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
0039ba  2101              MOVS     r1,#1
0039bc  4308              ORRS     r0,r0,r1
0039be  49ca              LDR      r1,|L1.15592|
0039c0  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;149    	
;;;150    /**************ISR follows******/	
;;;151    // stateCount++;
;;;152    		
;;;153    ringflag=1;
0039c2  2001              MOVS     r0,#1
0039c4  49c9              LDR      r1,|L1.15596|
0039c6  7008              STRB     r0,[r1,#0]
;;;154    	// wakeup and reset
;;;155    	
;;;156    clear();	
0039c8  f7fffffe          BL       clear
                  |L1.14796|
;;;157    	}
;;;158    	
;;;159    	LED_state();
0039cc  f7fffffe          BL       LED_state
;;;160    }
0039d0  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  PORTC_action PROC
;;;162    void PORTC_action(void){
0039d2  4770              BX       lr
;;;163    }
;;;164    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
0039d4  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
0039d6  49c8              LDR      r1,|L1.15608|
0039d8  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
0039da  48c8              LDR      r0,|L1.15612|
0039dc  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK;   
0039de  2005              MOVS     r0,#5
0039e0  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
0039e2  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
0039e4  48c4              LDR      r0,|L1.15608|
;;;17     {
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
0039e6  6900              LDR      r0,[r0,#0x10]
0039e8  0840              LSRS     r0,r0,#1
0039ea  0040              LSLS     r0,r0,#1
0039ec  49c2              LDR      r1,|L1.15608|
0039ee  6108              STR      r0,[r1,#0x10]
;;;19     }
0039f0  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
0039f2  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
0039f4  48c0              LDR      r0,|L1.15608|
0039f6  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
0039f8  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
0039fa  1b28              SUBS     r0,r5,r4
0039fc  49c0              LDR      r1,|L1.15616|
0039fe  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
003a00  4629              MOV      r1,r5
003a02  a0c0              ADR      r0,|L1.15620|
003a04  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
003a08  4621              MOV      r1,r4
003a0a  a0c5              ADR      r0,|L1.15648|
003a0c  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
003a10  48bb              LDR      r0,|L1.15616|
003a12  6801              LDR      r1,[r0,#0]  ; overhead
003a14  a0c9              ADR      r0,|L1.15676|
003a16  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
003a1a  bd70              POP      {r4-r6,pc}
;;;14     #include "stdlib.h"
                          ENDP

                  delay2 PROC
;;;89     }
;;;90      void delay2(int delaytime)
003a1c  e00c              B        |L1.14904|
                  |L1.14878|
;;;91     {
;;;92      while(delaytime--)
;;;93         {for(i=5000;i>0;i--);  // about 1 ms
003a1e  49d2              LDR      r1,|L1.15720|
003a20  4ad2              LDR      r2,|L1.15724|
003a22  6011              STR      r1,[r2,#0]  ; i
003a24  e004              B        |L1.14896|
                  |L1.14886|
003a26  49d1              LDR      r1,|L1.15724|
003a28  6809              LDR      r1,[r1,#0]  ; i
003a2a  1e49              SUBS     r1,r1,#1
003a2c  4acf              LDR      r2,|L1.15724|
003a2e  6011              STR      r1,[r2,#0]  ; i
                  |L1.14896|
003a30  49ce              LDR      r1,|L1.15724|
003a32  6809              LDR      r1,[r1,#0]  ; i
003a34  2900              CMP      r1,#0
003a36  dcf6              BGT      |L1.14886|
                  |L1.14904|
003a38  4601              MOV      r1,r0                 ;92
003a3a  1e40              SUBS     r0,r0,#1              ;92
003a3c  2900              CMP      r1,#0                 ;92
003a3e  d1ee              BNE      |L1.14878|
;;;94         }
;;;95     }
003a40  4770              BX       lr
;;;96             
                          ENDP

                  main PROC
;;;129    /********************************************************************/
;;;130    int main (void)
003a42  b51c              PUSH     {r2-r4,lr}
;;;131    {
;;;132    
;;;133    
;;;134    
;;;135    //int_erval=10;
;;;136    		memset(data,0,strlen(data));
003a44  48ca              LDR      r0,|L1.15728|
003a46  f7fffffe          BL       strlen
003a4a  4601              MOV      r1,r0
003a4c  9001              STR      r0,[sp,#4]
003a4e  48c8              LDR      r0,|L1.15728|
003a50  f7fffffe          BL       __aeabi_memclr
;;;137    		memset(data2,0,strlen(data2));
003a54  48c7              LDR      r0,|L1.15732|
003a56  f7fffffe          BL       strlen
003a5a  4601              MOV      r1,r0
003a5c  9001              STR      r0,[sp,#4]
003a5e  48c5              LDR      r0,|L1.15732|
003a60  f7fffffe          BL       __aeabi_memclr
;;;138    		memset(ip,0,strlen(ip));
003a64  48c4              LDR      r0,|L1.15736|
003a66  f7fffffe          BL       strlen
003a6a  4601              MOV      r1,r0
003a6c  9001              STR      r0,[sp,#4]
003a6e  48c2              LDR      r0,|L1.15736|
003a70  f7fffffe          BL       __aeabi_memclr
;;;139    		memset(port,0,strlen(ip));
003a74  48c0              LDR      r0,|L1.15736|
003a76  f7fffffe          BL       strlen
003a7a  4601              MOV      r1,r0
003a7c  9001              STR      r0,[sp,#4]
003a7e  48bf              LDR      r0,|L1.15740|
003a80  f7fffffe          BL       __aeabi_memclr
;;;140    
;;;141    	
;;;142    start();
003a84  f7fffffe          BL       start
;;;143    systick_init();	
003a88  f7fffffe          BL       systick_init
;;;144    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;145    
;;;146    #endif
;;;147    
;;;148    int_erval=5;
003a8c  2005              MOVS     r0,#5
003a8e  49bc              LDR      r1,|L1.15744|
003a90  6008              STR      r0,[r1,#0]  ; int_erval
;;;149    
;;;150    
;;;151    	LED_init();		//Initialize GPIO for LEDs
003a92  f7fffffe          BL       LED_init
;;;152    	RELAY_init();		//Initialize GPIO for LEDs
003a96  bf00              NOP      
003a98  48ba              LDR      r0,|L1.15748|
003a9a  6b80              LDR      r0,[r0,#0x38]
003a9c  2101              MOVS     r1,#1
003a9e  0249              LSLS     r1,r1,#9
003aa0  4308              ORRS     r0,r0,r1
003aa2  49b8              LDR      r1,|L1.15748|
003aa4  6388              STR      r0,[r1,#0x38]
003aa6  1588              ASRS     r0,r1,#22
003aa8  49b7              LDR      r1,|L1.15752|
003aaa  6048              STR      r0,[r1,#4]
003aac  6088              STR      r0,[r1,#8]
003aae  488b              LDR      r0,|L1.15580|
003ab0  3880              SUBS     r0,r0,#0x80
003ab2  6840              LDR      r0,[r0,#4]
003ab4  2106              MOVS     r1,#6
003ab6  4308              ORRS     r0,r0,r1
003ab8  4988              LDR      r1,|L1.15580|
003aba  3980              SUBS     r1,r1,#0x80
003abc  6048              STR      r0,[r1,#4]
003abe  4608              MOV      r0,r1
003ac0  6940              LDR      r0,[r0,#0x14]
003ac2  2106              MOVS     r1,#6
003ac4  4308              ORRS     r0,r0,r1
003ac6  4985              LDR      r1,|L1.15580|
003ac8  3980              SUBS     r1,r1,#0x80
003aca  6148              STR      r0,[r1,#0x14]
003acc  2002              MOVS     r0,#2
003ace  6088              STR      r0,[r1,#8]
003ad0  2004              MOVS     r0,#4
003ad2  6088              STR      r0,[r1,#8]
003ad4  bf00              NOP      
;;;153    	SW1_init();		//Initialize GPIO for SW1 w/ interrupt
003ad6  f7fffffe          BL       SW1_init
;;;154    send_SOS=0;	
003ada  2000              MOVS     r0,#0
003adc  4984              LDR      r1,|L1.15600|
003ade  6008              STR      r0,[r1,#0]  ; send_SOS
;;;155    	//accel_init();
;;;156    	sleep_flag=0;
003ae0  49aa              LDR      r1,|L1.15756|
003ae2  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;157    	DTR_OFF;	
003ae4  2080              MOVS     r0,#0x80
003ae6  497d              LDR      r1,|L1.15580|
003ae8  3140              ADDS     r1,r1,#0x40
003aea  6088              STR      r0,[r1,#8]
;;;158    	lptmr_init(1000, 1);	
003aec  2101              MOVS     r1,#1
003aee  207d              MOVS     r0,#0x7d
003af0  00c0              LSLS     r0,r0,#3
003af2  f7fffffe          BL       lptmr_init
;;;159    	ADC_Init();
003af6  bf00              NOP      
003af8  48a2              LDR      r0,|L1.15748|
003afa  6bc0              LDR      r0,[r0,#0x3c]
003afc  2101              MOVS     r1,#1
003afe  06c9              LSLS     r1,r1,#27
003b00  4308              ORRS     r0,r0,r1
003b02  49a0              LDR      r1,|L1.15748|
003b04  63c8              STR      r0,[r1,#0x3c]
003b06  202d              MOVS     r0,#0x2d
003b08  49a1              LDR      r1,|L1.15760|
003b0a  6088              STR      r0,[r1,#8]
003b0c  2000              MOVS     r0,#0
003b0e  60c8              STR      r0,[r1,#0xc]
003b10  6208              STR      r0,[r1,#0x20]
003b12  4608              MOV      r0,r1
003b14  6a40              LDR      r0,[r0,#0x24]
003b16  2108              MOVS     r1,#8
003b18  4388              BICS     r0,r0,r1
003b1a  499d              LDR      r1,|L1.15760|
003b1c  6248              STR      r0,[r1,#0x24]
003b1e  bf00              NOP      
;;;160    	
;;;161    //C0
;;;162    
;;;163    //SCB->AIRCR = 0x05fA0000;
;;;164    
;;;165    	int_erval=0;
003b20  2000              MOVS     r0,#0
003b22  4997              LDR      r1,|L1.15744|
003b24  6008              STR      r0,[r1,#0]  ; int_erval
;;;166    
;;;167    		uart_putchar(UART1_BASE_PTR,0xA);
003b26  210a              MOVS     r1,#0xa
003b28  489a              LDR      r0,|L1.15764|
003b2a  f7fffffe          BL       uart_putchar
;;;168    		uart_putchar(UART1_BASE_PTR,0x1A);			
003b2e  211a              MOVS     r1,#0x1a
003b30  4898              LDR      r0,|L1.15764|
003b32  f7fffffe          BL       uart_putchar
;;;169    msg_sim800();
003b36  f7fffffe          BL       msg_sim800
;;;170    send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",2);  
003b3a  2002              MOVS     r0,#2
003b3c  4b96              LDR      r3,|L1.15768|
003b3e  4a97              LDR      r2,|L1.15772|
003b40  4611              MOV      r1,r2
003b42  3114              ADDS     r1,r1,#0x14
003b44  9000              STR      r0,[sp,#0]
003b46  a096              ADR      r0,|L1.15776|
003b48  f7fffffe          BL       send_GSM
;;;171     delay(100); 
003b4c  2064              MOVS     r0,#0x64
003b4e  f7fffffe          BL       delay
;;;172    
;;;173    clear();delay(100);
003b52  f7fffffe          BL       clear
003b56  2064              MOVS     r0,#0x64
003b58  f7fffffe          BL       delay
;;;174    msg_sim800();
003b5c  f7fffffe          BL       msg_sim800
;;;175    
;;;176    GPS_COLLECT();
003b60  f7fffffe          BL       GPS_COLLECT
;;;177    strcat(data,"CH'1'\n");	
003b64  a190              ADR      r1,|L1.15784|
003b66  4882              LDR      r0,|L1.15728|
003b68  f7fffffe          BL       strcat
;;;178    delay(5000);
003b6c  487e              LDR      r0,|L1.15720|
003b6e  f7fffffe          BL       delay
;;;179    
;;;180    int_erval=5;
003b72  2005              MOVS     r0,#5
003b74  4982              LDR      r1,|L1.15744|
003b76  6008              STR      r0,[r1,#0]  ; int_erval
;;;181    
;;;182    //if(!(strstr(uart_string_gsm, "OK")|| strstr(uart_string_gsm, "ERROR")))
;;;183    //{HardFault_Handler();}
;;;184    ignread();
003b78  f7fffffe          BL       ignread
;;;185    msg_sim800();
003b7c  f7fffffe          BL       msg_sim800
;;;186    
;;;187    //	saveapn();
;;;188    	
;;;189    readapn();
003b80  f7fffffe          BL       readapn
;;;190    
;;;191    //HardFault_Handler();
;;;192    
;;;193    //RESET_ON;
;;;194    
;;;195    
;;;196    //send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
;;;197    clear();	
003b84  f7fffffe          BL       clear
;;;198    //delay(10);
;;;199    
;;;200    //send_GSM("\r\nAT+CFUN=1\r\n", "Ready", "NOT INSERTED" , "ERROR",7);	
;;;201    
;;;202    msg_sim800();
003b88  f7fffffe          BL       msg_sim800
;;;203    	
;;;204    
;;;205    //GPS_COLLECT();
;;;206    //  strcat(data,"CH\n");	
;;;207    //	
;;;208    
;;;209    GPS_COLLECT();
003b8c  f7fffffe          BL       GPS_COLLECT
;;;210    strcat(data,"CH\n");	
003b90  4982              LDR      r1,|L1.15772|
003b92  3930              SUBS     r1,r1,#0x30
003b94  4876              LDR      r0,|L1.15728|
003b96  f7fffffe          BL       strcat
;;;211    
;;;212    msg_sim800();
003b9a  f7fffffe          BL       msg_sim800
;;;213    
;;;214    stateCount=3;
003b9e  2003              MOVS     r0,#3
003ba0  494f              LDR      r1,|L1.15584|
003ba2  7008              STRB     r0,[r1,#0]
;;;215    LED_state();
003ba4  f7fffffe          BL       LED_state
;;;216    
;;;217    
;;;218    
;;;219    
;;;220    
;;;221    	
;;;222    //send_modem2("$PMTK225,0*2B");
;;;223    //while(!strstr(uart_string_gsm,"OK\r\n"));
;;;224    
;;;225    //bat_cind();
;;;226    //delay(1000);
;;;227    
;;;228    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003ba8  4881              LDR      r0,|L1.15792|
003baa  6800              LDR      r0,[r0,#0]  ; tmeout
003bac  4b7a              LDR      r3,|L1.15768|
003bae  4a7b              LDR      r2,|L1.15772|
003bb0  4611              MOV      r1,r2
003bb2  3114              ADDS     r1,r1,#0x14
003bb4  9000              STR      r0,[sp,#0]
003bb6  a07f              ADR      r0,|L1.15796|
003bb8  f7fffffe          BL       send_GSM
;;;229    //delay(10);
;;;230    
;;;231    send_GSM("\n\nATS0=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003bbc  487c              LDR      r0,|L1.15792|
003bbe  6800              LDR      r0,[r0,#0]  ; tmeout
003bc0  4b75              LDR      r3,|L1.15768|
003bc2  4a76              LDR      r2,|L1.15772|
003bc4  4611              MOV      r1,r2
003bc6  3114              ADDS     r1,r1,#0x14
003bc8  9000              STR      r0,[sp,#0]
003bca  a07d              ADR      r0,|L1.15808|
003bcc  f7fffffe          BL       send_GSM
;;;232    	msg_sim800(); 
003bd0  f7fffffe          BL       msg_sim800
;;;233    
;;;234    send_GSM("\n\nAT&F\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003bd4  4876              LDR      r0,|L1.15792|
003bd6  6800              LDR      r0,[r0,#0]  ; tmeout
003bd8  4b6f              LDR      r3,|L1.15768|
003bda  4a70              LDR      r2,|L1.15772|
003bdc  4611              MOV      r1,r2
003bde  3114              ADDS     r1,r1,#0x14
003be0  9000              STR      r0,[sp,#0]
003be2  a07a              ADR      r0,|L1.15820|
003be4  f7fffffe          BL       send_GSM
;;;235    
;;;236    
;;;237    send_GSM("\n\nAT&D\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003be8  4871              LDR      r0,|L1.15792|
003bea  6800              LDR      r0,[r0,#0]  ; tmeout
003bec  4b6a              LDR      r3,|L1.15768|
003bee  4a6b              LDR      r2,|L1.15772|
003bf0  4611              MOV      r1,r2
003bf2  3114              ADDS     r1,r1,#0x14
003bf4  9000              STR      r0,[sp,#0]
003bf6  a078              ADR      r0,|L1.15832|
003bf8  f7fffffe          BL       send_GSM
;;;238    
;;;239    
;;;240    send_GSM("\n\nAT+IFC=0,0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003bfc  486c              LDR      r0,|L1.15792|
003bfe  6800              LDR      r0,[r0,#0]  ; tmeout
003c00  4b65              LDR      r3,|L1.15768|
003c02  4a66              LDR      r2,|L1.15772|
003c04  4611              MOV      r1,r2
003c06  3114              ADDS     r1,r1,#0x14
003c08  9000              STR      r0,[sp,#0]
003c0a  a076              ADR      r0,|L1.15844|
003c0c  f7fffffe          BL       send_GSM
;;;241    
;;;242    	msg_sim800(); 
003c10  f7fffffe          BL       msg_sim800
;;;243    
;;;244    send_GSM("\n\nAT+CIPQSEND?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c14  4866              LDR      r0,|L1.15792|
003c16  6800              LDR      r0,[r0,#0]  ; tmeout
003c18  4b5f              LDR      r3,|L1.15768|
003c1a  4a60              LDR      r2,|L1.15772|
003c1c  4611              MOV      r1,r2
003c1e  3114              ADDS     r1,r1,#0x14
003c20  9000              STR      r0,[sp,#0]
003c22  a074              ADR      r0,|L1.15860|
003c24  f7fffffe          BL       send_GSM
;;;245    
;;;246    send_GSM("\n\nAT+CIPQSEND=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c28  4861              LDR      r0,|L1.15792|
003c2a  6800              LDR      r0,[r0,#0]  ; tmeout
003c2c  4b5a              LDR      r3,|L1.15768|
003c2e  4a5b              LDR      r2,|L1.15772|
003c30  4611              MOV      r1,r2
003c32  3114              ADDS     r1,r1,#0x14
003c34  9000              STR      r0,[sp,#0]
003c36  a074              ADR      r0,|L1.15880|
003c38  f7fffffe          BL       send_GSM
;;;247    
;;;248    //delay(10);
;;;249    
;;;250    
;;;251    
;;;252    
;;;253    //delay(10);
;;;254    send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c3c  485c              LDR      r0,|L1.15792|
003c3e  6800              LDR      r0,[r0,#0]  ; tmeout
003c40  4b55              LDR      r3,|L1.15768|
003c42  4a56              LDR      r2,|L1.15772|
003c44  4611              MOV      r1,r2
003c46  3114              ADDS     r1,r1,#0x14
003c48  9000              STR      r0,[sp,#0]
003c4a  a074              ADR      r0,|L1.15900|
003c4c  f7fffffe          BL       send_GSM
;;;255    
;;;256    
;;;257    send_GSM("\n\nAT+SD2PCM=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c50  4857              LDR      r0,|L1.15792|
003c52  6800              LDR      r0,[r0,#0]  ; tmeout
003c54  4b50              LDR      r3,|L1.15768|
003c56  4a51              LDR      r2,|L1.15772|
003c58  4611              MOV      r1,r2
003c5a  3114              ADDS     r1,r1,#0x14
003c5c  9000              STR      r0,[sp,#0]
003c5e  a074              ADR      r0,|L1.15920|
003c60  f7fffffe          BL       send_GSM
;;;258    //delay(10);	
;;;259    
;;;260    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c64  4852              LDR      r0,|L1.15792|
003c66  6800              LDR      r0,[r0,#0]  ; tmeout
003c68  4b4b              LDR      r3,|L1.15768|
003c6a  4a4c              LDR      r2,|L1.15772|
003c6c  4611              MOV      r1,r2
003c6e  3114              ADDS     r1,r1,#0x14
003c70  9000              STR      r0,[sp,#0]
003c72  a050              ADR      r0,|L1.15796|
003c74  f7fffffe          BL       send_GSM
;;;261    delay(10);	
003c78  200a              MOVS     r0,#0xa
003c7a  f7fffffe          BL       delay
;;;262    send_GSM("\n\nAT+FSDRIVE=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c7e  484c              LDR      r0,|L1.15792|
003c80  6800              LDR      r0,[r0,#0]  ; tmeout
003c82  4b45              LDR      r3,|L1.15768|
003c84  4a45              LDR      r2,|L1.15772|
003c86  4611              MOV      r1,r2
003c88  3114              ADDS     r1,r1,#0x14
003c8a  9000              STR      r0,[sp,#0]
003c8c  a06c              ADR      r0,|L1.15936|
003c8e  f7fffffe          BL       send_GSM
;;;263    clear();
003c92  f7fffffe          BL       clear
;;;264    delay(10);	
003c96  200a              MOVS     r0,#0xa
003c98  f7fffffe          BL       delay
;;;265    //;	
;;;266    //send_GSM("\n\nAT+FSCREATE=D:\\LOG.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;267    
;;;268    
;;;269    
;;;270    send_GSM("\n\nAT+FSMEM\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c9c  4844              LDR      r0,|L1.15792|
003c9e  6800              LDR      r0,[r0,#0]  ; tmeout
003ca0  4b3d              LDR      r3,|L1.15768|
003ca2  4a3e              LDR      r2,|L1.15772|
003ca4  4611              MOV      r1,r2
003ca6  3114              ADDS     r1,r1,#0x14
003ca8  9000              STR      r0,[sp,#0]
003caa  a06a              ADR      r0,|L1.15956|
003cac  f7fffffe          BL       send_GSM
;;;271    	GPS_COLLECT();
003cb0  f7fffffe          BL       GPS_COLLECT
;;;272      strcat(data,"CH\n");	
003cb4  4939              LDR      r1,|L1.15772|
003cb6  3930              SUBS     r1,r1,#0x30
003cb8  482d              LDR      r0,|L1.15728|
003cba  f7fffffe          BL       strcat
;;;273    if(strstr(uart_string_gsm,"D:")){
003cbe  a169              ADR      r1,|L1.15972|
003cc0  4869              LDR      r0,|L1.15976|
003cc2  f7fffffe          BL       strstr
003cc6  2800              CMP      r0,#0
003cc8  d007              BEQ      |L1.15578|
;;;274    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003cca  4839              LDR      r0,|L1.15792|
003ccc  6800              LDR      r0,[r0,#0]  ; tmeout
003cce  4b32              LDR      r3,|L1.15768|
003cd0  4a32              LDR      r2,|L1.15772|
003cd2  4611              MOV      r1,r2
003cd4  3114              ADDS     r1,r1,#0x14
003cd6  9000              STR      r0,[sp,#0]
003cd8  e0c8              B        |L1.15980|
                  |L1.15578|
003cda  e0e1              B        |L1.16032|
                  |L1.15580|
                          DCD      0x400ff080
                  |L1.15584|
                          DCD      stateCount
                  |L1.15588|
                          DCD      0x4004b080
                  |L1.15592|
                          DCD      gu32PortStatus
                  |L1.15596|
                          DCD      ringflag
                  |L1.15600|
                          DCD      send_SOS
                  |L1.15604|
                          DCD      0x4004c080
                  |L1.15608|
                          DCD      0xe000e000
                  |L1.15612|
                          DCD      0x00009c3f
                  |L1.15616|
                          DCD      overhead
                  |L1.15620|
003d04  73797374          DCB      "systick start value: 0x%x\n\r",0
003d08  69636b20
003d0c  73746172
003d10  74207661
003d14  6c75653a
003d18  20307825
003d1c  780a0d00
                  |L1.15648|
003d20  73797374          DCB      "systick end value: 0x%x\n\r",0
003d24  69636b20
003d28  656e6420
003d2c  76616c75
003d30  653a2030
003d34  7825780a
003d38  0d00    
003d3a  00                DCB      0
003d3b  00                DCB      0
                  |L1.15676|
003d3c  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
003d40  69636b20
003d44  63757272
003d48  656e7420
003d4c  76616c75
003d50  65207265
003d54  6164206f
003d58  76657268
003d5c  6561643a
003d60  20307825
003d64  780a0d00
                  |L1.15720|
                          DCD      0x00001388
                  |L1.15724|
                          DCD      i
                  |L1.15728|
                          DCD      data
                  |L1.15732|
                          DCD      data2
                  |L1.15736|
                          DCD      ||ip||
                  |L1.15740|
                          DCD      port
                  |L1.15744|
                          DCD      int_erval
                  |L1.15748|
                          DCD      0x40048000
                  |L1.15752|
                          DCD      0x40049000
                  |L1.15756|
                          DCD      sleep_flag
                  |L1.15760|
                          DCD      0x4003b000
                  |L1.15764|
                          DCD      0x4006b000
                  |L1.15768|
                          DCD      ||.text||+0xd54
                  |L1.15772|
                          DCD      ||.text||+0x8e8
                  |L1.15776|
003da0  0a0a4154          DCB      "\n\nAT\r\n",0
003da4  0d0a00  
003da7  00                DCB      0
                  |L1.15784|
003da8  43482731          DCB      "CH'1'\n",0
003dac  270a00  
003daf  00                DCB      0
                  |L1.15792|
                          DCD      tmeout
                  |L1.15796|
003db4  0a0a4154          DCB      "\n\nAT&W\r\n",0
003db8  26570d0a
003dbc  00      
003dbd  00                DCB      0
003dbe  00                DCB      0
003dbf  00                DCB      0
                  |L1.15808|
003dc0  0a0a4154          DCB      "\n\nATS0=2\r\n",0
003dc4  53303d32
003dc8  0d0a00  
003dcb  00                DCB      0
                  |L1.15820|
003dcc  0a0a4154          DCB      "\n\nAT&F\r\n",0
003dd0  26460d0a
003dd4  00      
003dd5  00                DCB      0
003dd6  00                DCB      0
003dd7  00                DCB      0
                  |L1.15832|
003dd8  0a0a4154          DCB      "\n\nAT&D\r\n",0
003ddc  26440d0a
003de0  00      
003de1  00                DCB      0
003de2  00                DCB      0
003de3  00                DCB      0
                  |L1.15844|
003de4  0a0a4154          DCB      "\n\nAT+IFC=0,0\r\n",0
003de8  2b494643
003dec  3d302c30
003df0  0d0a00  
003df3  00                DCB      0
                  |L1.15860|
003df4  0a0a4154          DCB      "\n\nAT+CIPQSEND?\r\n",0
003df8  2b434950
003dfc  5153454e
003e00  443f0d0a
003e04  00      
003e05  00                DCB      0
003e06  00                DCB      0
003e07  00                DCB      0
                  |L1.15880|
003e08  0a0a4154          DCB      "\n\nAT+CIPQSEND=0\r\n",0
003e0c  2b434950
003e10  5153454e
003e14  443d300d
003e18  0a00    
003e1a  00                DCB      0
003e1b  00                DCB      0
                  |L1.15900|
003e1c  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
003e20  2b435042
003e24  533d2253
003e28  4d220d0a
003e2c  00      
003e2d  00                DCB      0
003e2e  00                DCB      0
003e2f  00                DCB      0
                  |L1.15920|
003e30  0a0a4154          DCB      "\n\nAT+SD2PCM=0\r\n",0
003e34  2b534432
003e38  50434d3d
003e3c  300d0a00
                  |L1.15936|
003e40  0a0a4154          DCB      "\n\nAT+FSDRIVE=1\r\n",0
003e44  2b465344
003e48  52495645
003e4c  3d310d0a
003e50  00      
003e51  00                DCB      0
003e52  00                DCB      0
003e53  00                DCB      0
                  |L1.15956|
003e54  0a0a4154          DCB      "\n\nAT+FSMEM\r\n",0
003e58  2b46534d
003e5c  454d0d0a
003e60  00      
003e61  00                DCB      0
003e62  00                DCB      0
003e63  00                DCB      0
                  |L1.15972|
003e64  443a00            DCB      "D:",0
003e67  00                DCB      0
                  |L1.15976|
                          DCD      uart_string_gsm
                  |L1.15980|
003e6c  a0ed              ADR      r0,|L1.16932|
003e6e  f7fffffe          BL       send_GSM
;;;275    	
;;;276    memset(at_,0,100);
003e72  2164              MOVS     r1,#0x64
003e74  48f5              LDR      r0,|L1.16972|
003e76  f7fffffe          BL       __aeabi_memclr
;;;277    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003e7a  2202              MOVS     r2,#2
003e7c  a1f4              ADR      r1,|L1.16976|
003e7e  48f3              LDR      r0,|L1.16972|
003e80  f7fffffe          BL       __2sprintf
;;;278    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003e84  200a              MOVS     r0,#0xa
003e86  4bfd              LDR      r3,|L1.17020|
003e88  4afd              LDR      r2,|L1.17024|
003e8a  a1fe              ADR      r1,|L1.17028|
003e8c  9000              STR      r0,[sp,#0]
003e8e  48ef              LDR      r0,|L1.16972|
003e90  f7fffffe          BL       send_GSM
;;;279    	
;;;280    clear();
003e94  f7fffffe          BL       clear
;;;281    send_modem("D:");	
003e98  a0fb              ADR      r0,|L1.17032|
003e9a  f7fffffe          BL       send_modem
003e9e  e01f              B        |L1.16096|
                  |L1.16032|
;;;282    	
;;;283    }
;;;284    else{
;;;285    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003ea0  48fa              LDR      r0,|L1.17036|
003ea2  6800              LDR      r0,[r0,#0]  ; tmeout
003ea4  4bf5              LDR      r3,|L1.17020|
003ea6  4af6              LDR      r2,|L1.17024|
003ea8  4611              MOV      r1,r2
003eaa  3114              ADDS     r1,r1,#0x14
003eac  9000              STR      r0,[sp,#0]
003eae  a0dd              ADR      r0,|L1.16932|
003eb0  f7fffffe          BL       send_GSM
;;;286    	
;;;287    memset(at_,0,100);
003eb4  2164              MOVS     r1,#0x64
003eb6  48e5              LDR      r0,|L1.16972|
003eb8  f7fffffe          BL       __aeabi_memclr
;;;288    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003ebc  2202              MOVS     r2,#2
003ebe  a1e4              ADR      r1,|L1.16976|
003ec0  48e2              LDR      r0,|L1.16972|
003ec2  f7fffffe          BL       __2sprintf
;;;289    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003ec6  200a              MOVS     r0,#0xa
003ec8  4bec              LDR      r3,|L1.17020|
003eca  4aed              LDR      r2,|L1.17024|
003ecc  a1ed              ADR      r1,|L1.17028|
003ece  9000              STR      r0,[sp,#0]
003ed0  48de              LDR      r0,|L1.16972|
003ed2  f7fffffe          BL       send_GSM
;;;290    	
;;;291    clear();
003ed6  f7fffffe          BL       clear
;;;292    send_modem("C:");		
003eda  a0ed              ADR      r0,|L1.17040|
003edc  f7fffffe          BL       send_modem
                  |L1.16096|
;;;293    	
;;;294    }	
;;;295    //delay(10);
;;;296    
;;;297    send_GSM("\n\nATS0=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003ee0  48ea              LDR      r0,|L1.17036|
003ee2  6800              LDR      r0,[r0,#0]  ; tmeout
003ee4  4be5              LDR      r3,|L1.17020|
003ee6  4ae6              LDR      r2,|L1.17024|
003ee8  4611              MOV      r1,r2
003eea  3114              ADDS     r1,r1,#0x14
003eec  9000              STR      r0,[sp,#0]
003eee  a0e9              ADR      r0,|L1.17044|
003ef0  f7fffffe          BL       send_GSM
;;;298    
;;;299    
;;;300    send_GSM("\n\nAT+CSCLK=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003ef4  48e5              LDR      r0,|L1.17036|
003ef6  6800              LDR      r0,[r0,#0]  ; tmeout
003ef8  4be0              LDR      r3,|L1.17020|
003efa  4ae1              LDR      r2,|L1.17024|
003efc  4611              MOV      r1,r2
003efe  3114              ADDS     r1,r1,#0x14
003f00  9000              STR      r0,[sp,#0]
003f02  a0e7              ADR      r0,|L1.17056|
003f04  f7fffffe          BL       send_GSM
;;;301    
;;;302    
;;;303    send_GSM("\r\n\r\nAT+CMGD=1,4\r\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003f08  48e0              LDR      r0,|L1.17036|
003f0a  6800              LDR      r0,[r0,#0]  ; tmeout
003f0c  4bdb              LDR      r3,|L1.17020|
003f0e  4adc              LDR      r2,|L1.17024|
003f10  4611              MOV      r1,r2
003f12  3114              ADDS     r1,r1,#0x14
003f14  9000              STR      r0,[sp,#0]
003f16  a0e6              ADR      r0,|L1.17072|
003f18  f7fffffe          BL       send_GSM
;;;304    
;;;305    
;;;306    //send_GSM("\n\nAT+CPBW=5,\"0\",129,\"OWNER5\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;307    
;;;308    
;;;309    //send_GSM("\n\nAT+CPBW=6,\"0\",129,\"OWNER6\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;310    
;;;311    ignread();
003f1c  f7fffffe          BL       ignread
;;;312    readapn();
003f20  f7fffffe          BL       readapn
;;;313    readcursor();
003f24  f7fffffe          BL       readcursor
;;;314    
;;;315    read_interval();
003f28  f7fffffe          BL       read_interval
;;;316    send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f2c  48d7              LDR      r0,|L1.17036|
003f2e  6800              LDR      r0,[r0,#0]  ; tmeout
003f30  4bd2              LDR      r3,|L1.17020|
003f32  4ad3              LDR      r2,|L1.17024|
003f34  4611              MOV      r1,r2
003f36  3114              ADDS     r1,r1,#0x14
003f38  9000              STR      r0,[sp,#0]
003f3a  a0e3              ADR      r0,|L1.17096|
003f3c  f7fffffe          BL       send_GSM
;;;317    //delay(10);	
;;;318    
;;;319    send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003f40  48d2              LDR      r0,|L1.17036|
003f42  6800              LDR      r0,[r0,#0]  ; tmeout
003f44  4bcd              LDR      r3,|L1.17020|
003f46  4ace              LDR      r2,|L1.17024|
003f48  4611              MOV      r1,r2
003f4a  3114              ADDS     r1,r1,#0x14
003f4c  9000              STR      r0,[sp,#0]
003f4e  a0e2              ADR      r0,|L1.17112|
003f50  f7fffffe          BL       send_GSM
;;;320    							memset(at_,0,100);
003f54  2164              MOVS     r1,#0x64
003f56  48bd              LDR      r0,|L1.16972|
003f58  f7fffffe          BL       __aeabi_memclr
;;;321    							memset(num_o,0,15);
003f5c  210f              MOVS     r1,#0xf
003f5e  48e2              LDR      r0,|L1.17128|
003f60  f7fffffe          BL       __aeabi_memclr
;;;322    							parse_g(uart_string_gsm, 1, 2, '\"', '\"', num_o);
003f64  48e0              LDR      r0,|L1.17128|
003f66  2122              MOVS     r1,#0x22
003f68  460b              MOV      r3,r1
003f6a  2202              MOVS     r2,#2
003f6c  9100              STR      r1,[sp,#0]
003f6e  9001              STR      r0,[sp,#4]
003f70  2101              MOVS     r1,#1
003f72  48de              LDR      r0,|L1.17132|
003f74  f7fffffe          BL       parse_g
;;;323    							sprintf(at_, "\r\nAT+CSCA=\"%s\"\r\n", num_o);
003f78  4adb              LDR      r2,|L1.17128|
003f7a  a1dd              ADR      r1,|L1.17136|
003f7c  48b3              LDR      r0,|L1.16972|
003f7e  f7fffffe          BL       __2sprintf
;;;324    							send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f82  48c2              LDR      r0,|L1.17036|
003f84  6800              LDR      r0,[r0,#0]  ; tmeout
003f86  4bbd              LDR      r3,|L1.17020|
003f88  4abd              LDR      r2,|L1.17024|
003f8a  4611              MOV      r1,r2
003f8c  3114              ADDS     r1,r1,#0x14
003f8e  9000              STR      r0,[sp,#0]
003f90  48ae              LDR      r0,|L1.16972|
003f92  f7fffffe          BL       send_GSM
;;;325    
;;;326    
;;;327    
;;;328    read_ip_port();
003f96  f7fffffe          BL       read_ip_port
;;;329    		memset(at_,0,100);
003f9a  2164              MOVS     r1,#0x64
003f9c  48ab              LDR      r0,|L1.16972|
003f9e  f7fffffe          BL       __aeabi_memclr
;;;330    		memset(drive,0,5);
003fa2  2105              MOVS     r1,#5
003fa4  48d7              LDR      r0,|L1.17156|
003fa6  f7fffffe          BL       __aeabi_memclr4
;;;331    		sprintf(at_, "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n");		
003faa  a1d7              ADR      r1,|L1.17160|
003fac  48a7              LDR      r0,|L1.16972|
003fae  f7fffffe          BL       __2sprintf
;;;332    		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
003fb2  200a              MOVS     r0,#0xa
003fb4  4bb1              LDR      r3,|L1.17020|
003fb6  4ab2              LDR      r2,|L1.17024|
003fb8  a1de              ADR      r1,|L1.17204|
003fba  9000              STR      r0,[sp,#0]
003fbc  48a3              LDR      r0,|L1.16972|
003fbe  f7fffffe          BL       send_GSM
;;;333    		parse_g(uart_string_gsm, 1,3, '\n', '\r',drive);
003fc2  48d0              LDR      r0,|L1.17156|
003fc4  210d              MOVS     r1,#0xd
003fc6  230a              MOVS     r3,#0xa
003fc8  2203              MOVS     r2,#3
003fca  9100              STR      r1,[sp,#0]
003fcc  9001              STR      r0,[sp,#4]
003fce  2101              MOVS     r1,#1
003fd0  48c6              LDR      r0,|L1.17132|
003fd2  f7fffffe          BL       parse_g
;;;334    	
;;;335    
;;;336    msg_sim800(); 
003fd6  f7fffffe          BL       msg_sim800
;;;337    
;;;338    //setting interval 4
;;;339    
;;;340    temp=int_erval;				
003fda  48d7              LDR      r0,|L1.17208|
003fdc  6800              LDR      r0,[r0,#0]  ; int_erval
003fde  49d7              LDR      r1,|L1.17212|
003fe0  6008              STR      r0,[r1,#0]  ; temp
;;;341    int_erval=4;
003fe2  2004              MOVS     r0,#4
003fe4  49d4              LDR      r1,|L1.17208|
003fe6  6008              STR      r0,[r1,#0]  ; int_erval
;;;342    
;;;343    
;;;344    
;;;345    								//GPS_COLLECT();
;;;346    								send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",5);	
003fe8  2005              MOVS     r0,#5
003fea  4ba4              LDR      r3,|L1.17020|
003fec  4aa4              LDR      r2,|L1.17024|
003fee  a1d1              ADR      r1,|L1.17204|
003ff0  9000              STR      r0,[sp,#0]
003ff2  4618              MOV      r0,r3
003ff4  300c              ADDS     r0,r0,#0xc
003ff6  f7fffffe          BL       send_GSM
;;;347    								//delay(20);		
;;;348    								GPS_COLLECT();
003ffa  f7fffffe          BL       GPS_COLLECT
;;;349    								strcat(data,"CH\n");	
003ffe  49a0              LDR      r1,|L1.17024|
004000  3930              SUBS     r1,r1,#0x30
004002  48cf              LDR      r0,|L1.17216|
004004  f7fffffe          BL       strcat
;;;350    
;;;351    
;;;352    msg_sim800(); 
004008  f7fffffe          BL       msg_sim800
;;;353    
;;;354    	memset(at_,0,100);
00400c  2164              MOVS     r1,#0x64
00400e  488f              LDR      r0,|L1.16972|
004010  f7fffffe          BL       __aeabi_memclr
;;;355    		sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
004014  4acb              LDR      r2,|L1.17220|
004016  4999              LDR      r1,|L1.17020|
004018  3120              ADDS     r1,r1,#0x20
00401a  488c              LDR      r0,|L1.16972|
00401c  f7fffffe          BL       __2sprintf
;;;356    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
004020  489a              LDR      r0,|L1.17036|
004022  6800              LDR      r0,[r0,#0]  ; tmeout
004024  4b95              LDR      r3,|L1.17020|
004026  4a96              LDR      r2,|L1.17024|
004028  a1c2              ADR      r1,|L1.17204|
00402a  9000              STR      r0,[sp,#0]
00402c  4887              LDR      r0,|L1.16972|
00402e  f7fffffe          BL       send_GSM
;;;357    								//delay(20);
;;;358    			//					GPS_COLLECT();
;;;359    
;;;360    msg_sim800(); 
004032  f7fffffe          BL       msg_sim800
;;;361    
;;;362    	
;;;363    								send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
004036  2005              MOVS     r0,#5
004038  4b91              LDR      r3,|L1.17024|
00403a  3b5c              SUBS     r3,r3,#0x5c
00403c  4a90              LDR      r2,|L1.17024|
00403e  a1bd              ADR      r1,|L1.17204|
004040  9000              STR      r0,[sp,#0]
004042  488e              LDR      r0,|L1.17020|
004044  3038              ADDS     r0,r0,#0x38
004046  f7fffffe          BL       send_GSM
;;;364    								//delay(20);
;;;365    								GPS_COLLECT();
00404a  f7fffffe          BL       GPS_COLLECT
;;;366    								strcat(data,"CH\n");	
00404e  498c              LDR      r1,|L1.17024|
004050  3930              SUBS     r1,r1,#0x30
004052  48bb              LDR      r0,|L1.17216|
004054  f7fffffe          BL       strcat
;;;367    
;;;368    
;;;369    
;;;370    								GPS_COLLECT();
004058  f7fffffe          BL       GPS_COLLECT
;;;371    								strcat(data,"CH\n");	
00405c  4988              LDR      r1,|L1.17024|
00405e  3930              SUBS     r1,r1,#0x30
004060  48b7              LDR      r0,|L1.17216|
004062  f7fffffe          BL       strcat
;;;372    
;;;373    msg_sim800(); 
004066  f7fffffe          BL       msg_sim800
;;;374    
;;;375    								
;;;376    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);		
00406a  2001              MOVS     r0,#1
00406c  4b84              LDR      r3,|L1.17024|
00406e  3b5c              SUBS     r3,r3,#0x5c
004070  4a83              LDR      r2,|L1.17024|
004072  a1b0              ADR      r1,|L1.17204|
004074  9000              STR      r0,[sp,#0]
004076  4881              LDR      r0,|L1.17020|
004078  3048              ADDS     r0,r0,#0x48
00407a  f7fffffe          BL       send_GSM
;;;377    if(strstr(uart_string_gsm,"0.0.0.0"))
00407e  a1b2              ADR      r1,|L1.17224|
004080  489a              LDR      r0,|L1.17132|
004082  f7fffffe          BL       strstr
004086  2800              CMP      r0,#0
004088  d001              BEQ      |L1.16526|
;;;378    {
;;;379    	reset_func();
00408a  f7fffffe          BL       reset_func
                  |L1.16526|
;;;380    }	
;;;381    
;;;382    msg_sim800(); 
00408e  f7fffffe          BL       msg_sim800
;;;383    
;;;384    		
;;;385    								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
004092  4baf              LDR      r3,|L1.17232|
004094  4aaf              LDR      r2,|L1.17236|
004096  4979              LDR      r1,|L1.17020|
004098  3160              ADDS     r1,r1,#0x60
00409a  486c              LDR      r0,|L1.16972|
00409c  f7fffffe          BL       __2sprintf
;;;386    								send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
0040a0  487a              LDR      r0,|L1.17036|
0040a2  6800              LDR      r0,[r0,#0]  ; tmeout
0040a4  4b76              LDR      r3,|L1.17024|
0040a6  3b78              SUBS     r3,r3,#0x78
0040a8  4a75              LDR      r2,|L1.17024|
0040aa  4974              LDR      r1,|L1.17020|
0040ac  3180              ADDS     r1,r1,#0x80
0040ae  9000              STR      r0,[sp,#0]
0040b0  4866              LDR      r0,|L1.16972|
0040b2  f7fffffe          BL       send_GSM
;;;387    								clear();
0040b6  f7fffffe          BL       clear
;;;388    
;;;389    								GPS_COLLECT();
0040ba  f7fffffe          BL       GPS_COLLECT
;;;390    								strcat(data,"CH\n");	
0040be  4970              LDR      r1,|L1.17024|
0040c0  3930              SUBS     r1,r1,#0x30
0040c2  489f              LDR      r0,|L1.17216|
0040c4  f7fffffe          BL       strcat
;;;391    
;;;392    		int_erval=temp;
0040c8  489c              LDR      r0,|L1.17212|
0040ca  6800              LDR      r0,[r0,#0]  ; temp
0040cc  499a              LDR      r1,|L1.17208|
0040ce  6008              STR      r0,[r1,#0]  ; int_erval
;;;393    //resetting it to its value
;;;394    
;;;395    								send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
0040d0  486e              LDR      r0,|L1.17036|
0040d2  6800              LDR      r0,[r0,#0]  ; tmeout
0040d4  4b69              LDR      r3,|L1.17020|
0040d6  3388              ADDS     r3,r3,#0x88
0040d8  4a69              LDR      r2,|L1.17024|
0040da  3a78              SUBS     r2,r2,#0x78
0040dc  a169              ADR      r1,|L1.17028|
0040de  9000              STR      r0,[sp,#0]
0040e0  4618              MOV      r0,r3
0040e2  3010              ADDS     r0,r0,#0x10
0040e4  f7fffffe          BL       send_GSM
;;;396    
;;;397    
;;;398    memset(stcond1,0,strlen(stcond1));	
0040e8  489b              LDR      r0,|L1.17240|
0040ea  6800              LDR      r0,[r0,#0]  ; stcond1
0040ec  f7fffffe          BL       strlen
0040f0  4601              MOV      r1,r0
0040f2  9001              STR      r0,[sp,#4]
0040f4  4898              LDR      r0,|L1.17240|
0040f6  6800              LDR      r0,[r0,#0]  ; stcond1
0040f8  f7fffffe          BL       __aeabi_memclr
;;;399    memset(con1d,0,strlen(con1d));	
0040fc  4897              LDR      r0,|L1.17244|
0040fe  6800              LDR      r0,[r0,#0]  ; con1d
004100  f7fffffe          BL       strlen
004104  4601              MOV      r1,r0
004106  9001              STR      r0,[sp,#4]
004108  4894              LDR      r0,|L1.17244|
00410a  6800              LDR      r0,[r0,#0]  ; con1d
00410c  f7fffffe          BL       __aeabi_memclr
;;;400    	
;;;401    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;402    						
;;;403    								cond=mystrstr(uart_string_gsm,'>');
004110  213e              MOVS     r1,#0x3e
004112  4876              LDR      r0,|L1.17132|
004114  f7fffffe          BL       mystrstr
004118  4991              LDR      r1,|L1.17248|
00411a  7008              STRB     r0,[r1,#0]
;;;404    								if(cond)	
00411c  4608              MOV      r0,r1
00411e  7800              LDRB     r0,[r0,#0]  ; cond
004120  2800              CMP      r0,#0
004122  d077              BEQ      |L1.16916|
;;;405    								{
;;;406    									
;;;407    									clear();
004124  f7fffffe          BL       clear
;;;408    									memset(uart_string_gsm,0,5000);
004128  498e              LDR      r1,|L1.17252|
00412a  4870              LDR      r0,|L1.17132|
00412c  f7fffffe          BL       __aeabi_memclr
;;;409    									strcat(data,"\n");
004130  a168              ADR      r1,|L1.17108|
004132  4883              LDR      r0,|L1.17216|
004134  f7fffffe          BL       strcat
;;;410    									len=strlen(data);
004138  4881              LDR      r0,|L1.17216|
00413a  f7fffffe          BL       strlen
00413e  498a              LDR      r1,|L1.17256|
004140  6008              STR      r0,[r1,#0]  ; len
;;;411    									tout=0;
004142  2000              MOVS     r0,#0
004144  4989              LDR      r1,|L1.17260|
004146  6008              STR      r0,[r1,#0]  ; tout
;;;412    									k2=0;
004148  4989              LDR      r1,|L1.17264|
00414a  6008              STR      r0,[r1,#0]  ; k2
;;;413    									for(k=0;k<len;k++)
00414c  4989              LDR      r1,|L1.17268|
00414e  6008              STR      r0,[r1,#0]  ; k
004150  e00d              B        |L1.16750|
                  |L1.16722|
;;;414    									{
;;;415    										uart_putchar(UART1_BASE_PTR, data[k]);
004152  487b              LDR      r0,|L1.17216|
004154  4987              LDR      r1,|L1.17268|
004156  6809              LDR      r1,[r1,#0]  ; k
004158  5c40              LDRB     r0,[r0,r1]
00415a  4601              MOV      r1,r0
00415c  9001              STR      r0,[sp,#4]
00415e  4886              LDR      r0,|L1.17272|
004160  f7fffffe          BL       uart_putchar
004164  4883              LDR      r0,|L1.17268|
004166  6800              LDR      r0,[r0,#0]            ;413  ; k
004168  1c40              ADDS     r0,r0,#1              ;413
00416a  4982              LDR      r1,|L1.17268|
00416c  6008              STR      r0,[r1,#0]            ;413  ; k
                  |L1.16750|
00416e  4881              LDR      r0,|L1.17268|
004170  6800              LDR      r0,[r0,#0]            ;413  ; k
004172  497d              LDR      r1,|L1.17256|
004174  6809              LDR      r1,[r1,#0]            ;413  ; len
004176  4288              CMP      r0,r1                 ;413
004178  dbeb              BLT      |L1.16722|
;;;416    									}uart_putchar(UART1_BASE_PTR, 0x1A);
00417a  211a              MOVS     r1,#0x1a
00417c  487e              LDR      r0,|L1.17272|
00417e  f7fffffe          BL       uart_putchar
;;;417    									do
004182  bf00              NOP      
                  |L1.16772|
;;;418    																{stcond1=strstr(uart_string_gsm,"SEND OK");
004184  497d              LDR      r1,|L1.17276|
004186  4859              LDR      r0,|L1.17132|
004188  f7fffffe          BL       strstr
00418c  4972              LDR      r1,|L1.17240|
00418e  6008              STR      r0,[r1,#0]  ; stcond1
;;;419    																	stcond2=strstr(uart_string_gsm, "ERROR");
004190  493b              LDR      r1,|L1.17024|
004192  3978              SUBS     r1,r1,#0x78
004194  4855              LDR      r0,|L1.17132|
004196  f7fffffe          BL       strstr
00419a  4979              LDR      r1,|L1.17280|
00419c  6008              STR      r0,[r1,#0]  ; stcond2
;;;420    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00419e  4937              LDR      r1,|L1.17020|
0041a0  3190              ADDS     r1,r1,#0x90
0041a2  4852              LDR      r0,|L1.17132|
0041a4  f7fffffe          BL       strstr
0041a8  4976              LDR      r1,|L1.17284|
0041aa  6008              STR      r0,[r1,#0]  ; stcond3
;;;421    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0041ac  4934              LDR      r1,|L1.17024|
0041ae  395c              SUBS     r1,r1,#0x5c
0041b0  484e              LDR      r0,|L1.17132|
0041b2  f7fffffe          BL       strstr
0041b6  4974              LDR      r1,|L1.17288|
0041b8  6008              STR      r0,[r1,#0]  ; stcond4
;;;422    																	
;;;423    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0041ba  4871              LDR      r0,|L1.17280|
0041bc  6800              LDR      r0,[r0,#0]  ; stcond2
0041be  2800              CMP      r0,#0
0041c0  d10f              BNE      |L1.16866|
0041c2  4870              LDR      r0,|L1.17284|
0041c4  6800              LDR      r0,[r0,#0]  ; stcond3
0041c6  2800              CMP      r0,#0
0041c8  d10b              BNE      |L1.16866|
0041ca  4608              MOV      r0,r1
0041cc  6800              LDR      r0,[r0,#0]  ; stcond4
0041ce  2800              CMP      r0,#0
0041d0  d107              BNE      |L1.16866|
0041d2  4861              LDR      r0,|L1.17240|
0041d4  6800              LDR      r0,[r0,#0]  ; stcond1
0041d6  2800              CMP      r0,#0
0041d8  d103              BNE      |L1.16866|
0041da  4864              LDR      r0,|L1.17260|
0041dc  6800              LDR      r0,[r0,#0]  ; tout
0041de  2808              CMP      r0,#8
0041e0  ddd0              BLE      |L1.16772|
                  |L1.16866|
;;;424    																//delay(10);clear();
;;;425    														uart_putchar(UART1_BASE_PTR,0x1A);
0041e2  211a              MOVS     r1,#0x1a
0041e4  4864              LDR      r0,|L1.17272|
0041e6  f7fffffe          BL       uart_putchar
;;;426    												//delay(10);
;;;427    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0041ea  211a              MOVS     r1,#0x1a
0041ec  4862              LDR      r0,|L1.17272|
0041ee  f7fffffe          BL       uart_putchar
0041f2  211a              MOVS     r1,#0x1a
0041f4  4860              LDR      r0,|L1.17272|
0041f6  f7fffffe          BL       uart_putchar
0041fa  211a              MOVS     r1,#0x1a
0041fc  485e              LDR      r0,|L1.17272|
0041fe  f7fffffe          BL       uart_putchar
;;;428    						
;;;429    									
;;;430    delay(50);
004202  2032              MOVS     r0,#0x32
004204  f7fffffe          BL       delay
;;;431    stcond1=strstr(uart_string_gsm,"SEND OK");								
004208  495c              LDR      r1,|L1.17276|
00420a  4838              LDR      r0,|L1.17132|
00420c  f7fffffe          BL       strstr
004210  4951              LDR      r1,|L1.17240|
004212  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.16916|
;;;432    								}
;;;433    //else{
;;;434    //log_it();
;;;435    //}
;;;436    
;;;437    
;;;438    if(!(stcond1) == 1 )// if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
004214  4850              LDR      r0,|L1.17240|
004216  6800              LDR      r0,[r0,#0]  ; stcond1
004218  2800              CMP      r0,#0
00421a  d101              BNE      |L1.16928|
00421c  2001              MOVS     r0,#1
00421e  e0b6              B        |L1.17294|
                  |L1.16928|
004220  e0b4              B        |L1.17292|
004222  0000              DCW      0x0000
                  |L1.16932|
004224  0a0a4154          DCB      "\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n",0
004228  2b465343
00422c  52454154
004230  453d433a
004234  5c4c4f47
004238  47494e47
00423c  5f445249
004240  56452e54
004244  58540d0a
004248  00      
004249  00                DCB      0
00424a  00                DCB      0
00424b  00                DCB      0
                  |L1.16972|
                          DCD      at_
                  |L1.16976|
004250  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",0
004254  2b465357
004258  52495445
00425c  3d433a5c
004260  4c4f4747
004264  494e475f
004268  44524956
00426c  452e5458
004270  542c302c
004274  25642c31
004278  300d0a00
                  |L1.17020|
                          DCD      ||.text||+0xd54
                  |L1.17024|
                          DCD      ||.text||+0x8e8
                  |L1.17028|
004284  3e00              DCB      ">",0
004286  00                DCB      0
004287  00                DCB      0
                  |L1.17032|
004288  443a00            DCB      "D:",0
00428b  00                DCB      0
                  |L1.17036|
                          DCD      tmeout
                  |L1.17040|
004290  433a00            DCB      "C:",0
004293  00                DCB      0
                  |L1.17044|
004294  0a0a4154          DCB      "\n\nATS0=1\r\n",0
004298  53303d31
00429c  0d0a00  
00429f  00                DCB      0
                  |L1.17056|
0042a0  0a0a4154          DCB      "\n\nAT+CSCLK=1\r\n",0
0042a4  2b435343
0042a8  4c4b3d31
0042ac  0d0a00  
0042af  00                DCB      0
                  |L1.17072|
0042b0  0d0a0d0a          DCB      "\r\n\r\nAT+CMGD=1,4\r\n\n\n\n",0
0042b4  41542b43
0042b8  4d47443d
0042bc  312c340d
0042c0  0a0a0a0a
0042c4  00      
0042c5  00                DCB      0
0042c6  00                DCB      0
0042c7  00                DCB      0
                  |L1.17096|
0042c8  0a0a4154          DCB      "\n\nAT+CMGF=1\n"
0042cc  2b434d47
0042d0  463d310a
                  |L1.17108|
0042d4  0a00              DCB      "\n",0
0042d6  00                DCB      0
0042d7  00                DCB      0
                  |L1.17112|
0042d8  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
0042dc  2b435343
0042e0  413f0d0a
0042e4  00      
0042e5  00                DCB      0
0042e6  00                DCB      0
0042e7  00                DCB      0
                  |L1.17128|
                          DCD      num_o
                  |L1.17132|
                          DCD      uart_string_gsm
                  |L1.17136|
0042f0  0d0a4154          DCB      "\r\nAT+CSCA=""%s""\r\n",0
0042f4  2b435343
0042f8  413d2225
0042fc  73220d0a
004300  00      
004301  00                DCB      0
004302  00                DCB      0
004303  00                DCB      0
                  |L1.17156|
                          DCD      drive
                  |L1.17160|
004308  0a41542b          DCB      "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n",0
00430c  46535245
004310  41443d43
004314  3a5c4c4f
004318  4747494e
00431c  475f4452
004320  4956452e
004324  5458542c
004328  302c3130
00432c  302c310d
004330  0a00    
004332  00                DCB      0
004333  00                DCB      0
                  |L1.17204|
004334  4f4b00            DCB      "OK",0
004337  00                DCB      0
                  |L1.17208|
                          DCD      int_erval
                  |L1.17212|
                          DCD      temp
                  |L1.17216|
                          DCD      data
                  |L1.17220|
                          DCD      apn
                  |L1.17224|
004348  302e302e          DCB      "0.0.0.0",0
00434c  302e3000
                  |L1.17232|
                          DCD      port
                  |L1.17236|
                          DCD      ||ip||
                  |L1.17240|
                          DCD      stcond1
                  |L1.17244|
                          DCD      con1d
                  |L1.17248|
                          DCD      cond
                  |L1.17252|
                          DCD      0x00001388
                  |L1.17256|
                          DCD      len
                  |L1.17260|
                          DCD      tout
                  |L1.17264|
                          DCD      ||k2||
                  |L1.17268|
                          DCD      k
                  |L1.17272|
                          DCD      0x4006b000
                  |L1.17276|
                          DCD      ||.text||+0x474
                  |L1.17280|
                          DCD      stcond2
                  |L1.17284|
                          DCD      stcond3
                  |L1.17288|
                          DCD      stcond4
                  |L1.17292|
00438c  2000              MOVS     r0,#0
                  |L1.17294|
00438e  2801              CMP      r0,#1
004390  d17e              BNE      |L1.17552|
;;;439    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004392  211a              MOVS     r1,#0x1a
004394  48fe              LDR      r0,|L1.18320|
004396  f7fffffe          BL       uart_putchar
00439a  f7fffffe          BL       clear
00439e  200a              MOVS     r0,#0xa
0043a0  f7fffffe          BL       delay
;;;440    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0043a4  211a              MOVS     r1,#0x1a
0043a6  48fa              LDR      r0,|L1.18320|
0043a8  f7fffffe          BL       uart_putchar
0043ac  f7fffffe          BL       clear
0043b0  200a              MOVS     r0,#0xa
0043b2  f7fffffe          BL       delay
;;;441    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0043b6  211a              MOVS     r1,#0x1a
0043b8  48f5              LDR      r0,|L1.18320|
0043ba  f7fffffe          BL       uart_putchar
0043be  f7fffffe          BL       clear
0043c2  200a              MOVS     r0,#0xa
0043c4  f7fffffe          BL       delay
;;;442    
;;;443    									delay(100);
0043c8  2064              MOVS     r0,#0x64
0043ca  f7fffffe          BL       delay
;;;444    									clear();//memset(uart_string_gsm,0,5000);
0043ce  f7fffffe          BL       clear
;;;445    
;;;446    									memset(at_,0,100);
0043d2  2164              MOVS     r1,#0x64
0043d4  48ef              LDR      r0,|L1.18324|
0043d6  f7fffffe          BL       __aeabi_memclr
;;;447    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0043da  48ef              LDR      r0,|L1.18328|
0043dc  f7fffffe          BL       strlen
0043e0  1c40              ADDS     r0,r0,#1
0043e2  4603              MOV      r3,r0
0043e4  4aed              LDR      r2,|L1.18332|
0043e6  49ee              LDR      r1,|L1.18336|
0043e8  9001              STR      r0,[sp,#4]
0043ea  48ea              LDR      r0,|L1.18324|
0043ec  f7fffffe          BL       __2sprintf
;;;448    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0043f0  2005              MOVS     r0,#5
0043f2  4beb              LDR      r3,|L1.18336|
0043f4  3b54              SUBS     r3,r3,#0x54
0043f6  461a              MOV      r2,r3
0043f8  3278              ADDS     r2,r2,#0x78
0043fa  a1ea              ADR      r1,|L1.18340|
0043fc  9000              STR      r0,[sp,#0]
0043fe  48e5              LDR      r0,|L1.18324|
004400  f7fffffe          BL       send_SD
;;;449    if(strstr(uart_string_gsm,"ERROR")){
004404  49e6              LDR      r1,|L1.18336|
004406  3954              SUBS     r1,r1,#0x54
004408  48e7              LDR      r0,|L1.18344|
00440a  f7fffffe          BL       strstr
00440e  2800              CMP      r0,#0
004410  d004              BEQ      |L1.17436|
;;;450    	drive[0]='C';drive[1]=':';
004412  2043              MOVS     r0,#0x43
004414  49e1              LDR      r1,|L1.18332|
004416  7008              STRB     r0,[r1,#0]
004418  203a              MOVS     r0,#0x3a
00441a  7048              STRB     r0,[r1,#1]
                  |L1.17436|
;;;451    }	
;;;452    									clear();	
00441c  f7fffffe          BL       clear
;;;453    									k2=0;									//string array counter for uart 1
004420  2000              MOVS     r0,#0
004422  49e2              LDR      r1,|L1.18348|
004424  6008              STR      r0,[r1,#0]  ; k2
;;;454    									tout=0;	
004426  49e2              LDR      r1,|L1.18352|
004428  6008              STR      r0,[r1,#0]  ; tout
;;;455    									for(k=0;k<strlen(data);k++)
00442a  49e2              LDR      r1,|L1.18356|
00442c  6008              STR      r0,[r1,#0]  ; k
00442e  e00d              B        |L1.17484|
                  |L1.17456|
;;;456    									{
;;;457    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004430  48d9              LDR      r0,|L1.18328|
004432  49e0              LDR      r1,|L1.18356|
004434  6809              LDR      r1,[r1,#0]  ; k
004436  5c40              LDRB     r0,[r0,r1]
004438  4601              MOV      r1,r0
00443a  9001              STR      r0,[sp,#4]
00443c  48d4              LDR      r0,|L1.18320|
00443e  f7fffffe          BL       uart_putchar
004442  48dc              LDR      r0,|L1.18356|
004444  6800              LDR      r0,[r0,#0]            ;455  ; k
004446  1c40              ADDS     r0,r0,#1              ;455
004448  49da              LDR      r1,|L1.18356|
00444a  6008              STR      r0,[r1,#0]            ;455  ; k
                  |L1.17484|
00444c  48d2              LDR      r0,|L1.18328|
00444e  f7fffffe          BL       strlen
004452  49d8              LDR      r1,|L1.18356|
004454  6809              LDR      r1,[r1,#0]            ;455  ; k
004456  4288              CMP      r0,r1                 ;455
004458  d8ea              BHI      |L1.17456|
;;;458    									}	
;;;459    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00445a  210a              MOVS     r1,#0xa
00445c  48cc              LDR      r0,|L1.18320|
00445e  f7fffffe          BL       uart_putchar
004462  210a              MOVS     r1,#0xa
004464  48ca              LDR      r0,|L1.18320|
004466  f7fffffe          BL       uart_putchar
00446a  210a              MOVS     r1,#0xa
00446c  48c8              LDR      r0,|L1.18320|
00446e  f7fffffe          BL       uart_putchar
004472  210a              MOVS     r1,#0xa
004474  48c6              LDR      r0,|L1.18320|
004476  f7fffffe          BL       uart_putchar
00447a  210a              MOVS     r1,#0xa
00447c  48c4              LDR      r0,|L1.18320|
00447e  f7fffffe          BL       uart_putchar
004482  210a              MOVS     r1,#0xa
004484  48c2              LDR      r0,|L1.18320|
004486  f7fffffe          BL       uart_putchar
00448a  210a              MOVS     r1,#0xa
00448c  48c0              LDR      r0,|L1.18320|
00448e  e000              B        |L1.17554|
                  |L1.17552|
004490  e2fe              B        |L1.19088|
                  |L1.17554|
004492  f7fffffe          BL       uart_putchar
004496  210a              MOVS     r1,#0xa
004498  48bd              LDR      r0,|L1.18320|
00449a  f7fffffe          BL       uart_putchar
00449e  210a              MOVS     r1,#0xa
0044a0  48bb              LDR      r0,|L1.18320|
0044a2  f7fffffe          BL       uart_putchar
0044a6  210a              MOVS     r1,#0xa
0044a8  48b9              LDR      r0,|L1.18320|
0044aa  f7fffffe          BL       uart_putchar
0044ae  210a              MOVS     r1,#0xa
0044b0  48b7              LDR      r0,|L1.18320|
0044b2  f7fffffe          BL       uart_putchar
0044b6  210a              MOVS     r1,#0xa
0044b8  48b5              LDR      r0,|L1.18320|
0044ba  f7fffffe          BL       uart_putchar
0044be  210a              MOVS     r1,#0xa
0044c0  48b3              LDR      r0,|L1.18320|
0044c2  f7fffffe          BL       uart_putchar
0044c6  210a              MOVS     r1,#0xa
0044c8  48b1              LDR      r0,|L1.18320|
0044ca  f7fffffe          BL       uart_putchar
0044ce  210a              MOVS     r1,#0xa
0044d0  48af              LDR      r0,|L1.18320|
0044d2  f7fffffe          BL       uart_putchar
0044d6  210a              MOVS     r1,#0xa
0044d8  48ad              LDR      r0,|L1.18320|
0044da  f7fffffe          BL       uart_putchar
0044de  210a              MOVS     r1,#0xa
0044e0  48ab              LDR      r0,|L1.18320|
0044e2  f7fffffe          BL       uart_putchar
0044e6  210a              MOVS     r1,#0xa
0044e8  48a9              LDR      r0,|L1.18320|
0044ea  f7fffffe          BL       uart_putchar
0044ee  210a              MOVS     r1,#0xa
0044f0  48a7              LDR      r0,|L1.18320|
0044f2  f7fffffe          BL       uart_putchar
0044f6  210a              MOVS     r1,#0xa
0044f8  48a5              LDR      r0,|L1.18320|
0044fa  f7fffffe          BL       uart_putchar
0044fe  210a              MOVS     r1,#0xa
004500  48a3              LDR      r0,|L1.18320|
004502  f7fffffe          BL       uart_putchar
004506  210a              MOVS     r1,#0xa
004508  48a1              LDR      r0,|L1.18320|
00450a  f7fffffe          BL       uart_putchar
00450e  210a              MOVS     r1,#0xa
004510  489f              LDR      r0,|L1.18320|
004512  f7fffffe          BL       uart_putchar
004516  210a              MOVS     r1,#0xa
004518  489d              LDR      r0,|L1.18320|
00451a  f7fffffe          BL       uart_putchar
00451e  210a              MOVS     r1,#0xa
004520  489b              LDR      r0,|L1.18320|
004522  f7fffffe          BL       uart_putchar
004526  210a              MOVS     r1,#0xa
004528  4899              LDR      r0,|L1.18320|
00452a  f7fffffe          BL       uart_putchar
00452e  210a              MOVS     r1,#0xa
004530  4897              LDR      r0,|L1.18320|
004532  f7fffffe          BL       uart_putchar
004536  210a              MOVS     r1,#0xa
004538  4895              LDR      r0,|L1.18320|
00453a  f7fffffe          BL       uart_putchar
00453e  210a              MOVS     r1,#0xa
004540  4893              LDR      r0,|L1.18320|
004542  f7fffffe          BL       uart_putchar
004546  210a              MOVS     r1,#0xa
004548  4891              LDR      r0,|L1.18320|
00454a  f7fffffe          BL       uart_putchar
00454e  210a              MOVS     r1,#0xa
004550  488f              LDR      r0,|L1.18320|
004552  f7fffffe          BL       uart_putchar
004556  210a              MOVS     r1,#0xa
004558  488d              LDR      r0,|L1.18320|
00455a  f7fffffe          BL       uart_putchar
00455e  210a              MOVS     r1,#0xa
004560  488b              LDR      r0,|L1.18320|
004562  f7fffffe          BL       uart_putchar
004566  210a              MOVS     r1,#0xa
004568  4889              LDR      r0,|L1.18320|
00456a  f7fffffe          BL       uart_putchar
00456e  210a              MOVS     r1,#0xa
004570  4887              LDR      r0,|L1.18320|
004572  f7fffffe          BL       uart_putchar
004576  210a              MOVS     r1,#0xa
004578  4885              LDR      r0,|L1.18320|
00457a  f7fffffe          BL       uart_putchar
00457e  210a              MOVS     r1,#0xa
004580  4883              LDR      r0,|L1.18320|
004582  f7fffffe          BL       uart_putchar
004586  210a              MOVS     r1,#0xa
004588  4881              LDR      r0,|L1.18320|
00458a  f7fffffe          BL       uart_putchar
00458e  210a              MOVS     r1,#0xa
004590  487f              LDR      r0,|L1.18320|
004592  f7fffffe          BL       uart_putchar
004596  210a              MOVS     r1,#0xa
004598  487d              LDR      r0,|L1.18320|
00459a  f7fffffe          BL       uart_putchar
00459e  210a              MOVS     r1,#0xa
0045a0  487b              LDR      r0,|L1.18320|
0045a2  f7fffffe          BL       uart_putchar
0045a6  210a              MOVS     r1,#0xa
0045a8  4879              LDR      r0,|L1.18320|
0045aa  f7fffffe          BL       uart_putchar
0045ae  210a              MOVS     r1,#0xa
0045b0  4877              LDR      r0,|L1.18320|
0045b2  f7fffffe          BL       uart_putchar
0045b6  210a              MOVS     r1,#0xa
0045b8  4875              LDR      r0,|L1.18320|
0045ba  f7fffffe          BL       uart_putchar
0045be  210a              MOVS     r1,#0xa
0045c0  4873              LDR      r0,|L1.18320|
0045c2  f7fffffe          BL       uart_putchar
0045c6  210a              MOVS     r1,#0xa
0045c8  4871              LDR      r0,|L1.18320|
0045ca  f7fffffe          BL       uart_putchar
0045ce  210a              MOVS     r1,#0xa
0045d0  486f              LDR      r0,|L1.18320|
0045d2  f7fffffe          BL       uart_putchar
0045d6  210a              MOVS     r1,#0xa
0045d8  486d              LDR      r0,|L1.18320|
0045da  f7fffffe          BL       uart_putchar
0045de  210a              MOVS     r1,#0xa
0045e0  486b              LDR      r0,|L1.18320|
0045e2  f7fffffe          BL       uart_putchar
0045e6  210a              MOVS     r1,#0xa
0045e8  4869              LDR      r0,|L1.18320|
0045ea  f7fffffe          BL       uart_putchar
0045ee  210a              MOVS     r1,#0xa
0045f0  4867              LDR      r0,|L1.18320|
0045f2  f7fffffe          BL       uart_putchar
0045f6  210a              MOVS     r1,#0xa
0045f8  4865              LDR      r0,|L1.18320|
0045fa  f7fffffe          BL       uart_putchar
0045fe  210a              MOVS     r1,#0xa
004600  4863              LDR      r0,|L1.18320|
004602  f7fffffe          BL       uart_putchar
004606  210a              MOVS     r1,#0xa
004608  4861              LDR      r0,|L1.18320|
00460a  f7fffffe          BL       uart_putchar
00460e  210a              MOVS     r1,#0xa
004610  485f              LDR      r0,|L1.18320|
004612  f7fffffe          BL       uart_putchar
004616  210a              MOVS     r1,#0xa
004618  485d              LDR      r0,|L1.18320|
00461a  f7fffffe          BL       uart_putchar
00461e  210a              MOVS     r1,#0xa
004620  485b              LDR      r0,|L1.18320|
004622  f7fffffe          BL       uart_putchar
;;;460    									//memset(data,0,1000);
;;;461    									//timer counts to wait for characters in uart 1 									
;;;462    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004626  bf00              NOP      
                  |L1.17960|
004628  495d              LDR      r1,|L1.18336|
00462a  3138              ADDS     r1,r1,#0x38
00462c  485e              LDR      r0,|L1.18344|
00462e  f7fffffe          BL       strstr
004632  2800              CMP      r0,#0
004634  d10a              BNE      |L1.17996|
004636  495a              LDR      r1,|L1.18336|
004638  3954              SUBS     r1,r1,#0x54
00463a  485b              LDR      r0,|L1.18344|
00463c  f7fffffe          BL       strstr
004640  2800              CMP      r0,#0
004642  d103              BNE      |L1.17996|
004644  485a              LDR      r0,|L1.18352|
004646  6800              LDR      r0,[r0,#0]  ; tout
004648  2805              CMP      r0,#5
00464a  dded              BLE      |L1.17960|
                  |L1.17996|
;;;463    									{	}
;;;464    									clear();
00464c  f7fffffe          BL       clear
;;;465    									memset(data,0,strlen(data));
004650  4851              LDR      r0,|L1.18328|
004652  f7fffffe          BL       strlen
004656  4601              MOV      r1,r0
004658  9001              STR      r0,[sp,#4]
00465a  484f              LDR      r0,|L1.18328|
00465c  f7fffffe          BL       __aeabi_memclr
;;;466    									memset(data,0,strlen(data));	
004660  484d              LDR      r0,|L1.18328|
004662  f7fffffe          BL       strlen
004666  4601              MOV      r1,r0
004668  9001              STR      r0,[sp,#4]
00466a  484b              LDR      r0,|L1.18328|
00466c  f7fffffe          BL       __aeabi_memclr
;;;467    									GPS_COLLECT();
004670  f7fffffe          BL       GPS_COLLECT
;;;468    									strcat(data,"CH\n");	
004674  494a              LDR      r1,|L1.18336|
004676  390c              SUBS     r1,r1,#0xc
004678  4847              LDR      r0,|L1.18328|
00467a  f7fffffe          BL       strcat
;;;469    
;;;470    
;;;471    									clear();	
00467e  f7fffffe          BL       clear
;;;472    //*************************************tcp_initialization();*********************
;;;473    //setting interval 4
;;;474    temp=int_erval;				
004682  484d              LDR      r0,|L1.18360|
004684  6800              LDR      r0,[r0,#0]  ; int_erval
004686  494d              LDR      r1,|L1.18364|
004688  6008              STR      r0,[r1,#0]  ; temp
;;;475    int_erval=4;
00468a  2004              MOVS     r0,#4
00468c  494a              LDR      r1,|L1.18360|
00468e  6008              STR      r0,[r1,#0]  ; int_erval
;;;476    
;;;477    	
;;;478    msg_sim800(); 
004690  f7fffffe          BL       msg_sim800
;;;479    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
004694  2005              MOVS     r0,#5
004696  4b42              LDR      r3,|L1.18336|
004698  3b54              SUBS     r3,r3,#0x54
00469a  461a              MOV      r2,r3
00469c  3278              ADDS     r2,r2,#0x78
00469e  a148              ADR      r1,|L1.18368|
0046a0  9000              STR      r0,[sp,#0]
0046a2  4610              MOV      r0,r2
0046a4  3020              ADDS     r0,r0,#0x20
0046a6  f7fffffe          BL       send_GSM
;;;480    delay(100);
0046aa  2064              MOVS     r0,#0x64
0046ac  f7fffffe          BL       delay
;;;481    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0046b0  2004              MOVS     r0,#4
0046b2  4b3b              LDR      r3,|L1.18336|
0046b4  3b54              SUBS     r3,r3,#0x54
0046b6  461a              MOV      r2,r3
0046b8  32a8              ADDS     r2,r2,#0xa8
0046ba  a141              ADR      r1,|L1.18368|
0046bc  9000              STR      r0,[sp,#0]
0046be  4610              MOV      r0,r2
0046c0  3014              ADDS     r0,r0,#0x14
0046c2  f7fffffe          BL       send_GSM
;;;482    GPS_COLLECT2();
0046c6  f7fffffe          BL       GPS_COLLECT2
;;;483    strcat(data,"CH\n");		
0046ca  4935              LDR      r1,|L1.18336|
0046cc  390c              SUBS     r1,r1,#0xc
0046ce  4832              LDR      r0,|L1.18328|
0046d0  f7fffffe          BL       strcat
;;;484    GPS_COLLECT2();
0046d4  f7fffffe          BL       GPS_COLLECT2
;;;485    strcat(data,"CH\n");	
0046d8  4931              LDR      r1,|L1.18336|
0046da  390c              SUBS     r1,r1,#0xc
0046dc  482e              LDR      r0,|L1.18328|
0046de  f7fffffe          BL       strcat
;;;486    GPS_COLLECT2();
0046e2  f7fffffe          BL       GPS_COLLECT2
;;;487    strcat(data,"CH\n");
0046e6  492e              LDR      r1,|L1.18336|
0046e8  390c              SUBS     r1,r1,#0xc
0046ea  482b              LDR      r0,|L1.18328|
0046ec  f7fffffe          BL       strcat
;;;488    
;;;489    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
0046f0  2004              MOVS     r0,#4
0046f2  4b34              LDR      r3,|L1.18372|
0046f4  4a2a              LDR      r2,|L1.18336|
0046f6  3224              ADDS     r2,r2,#0x24
0046f8  a131              ADR      r1,|L1.18368|
0046fa  9000              STR      r0,[sp,#0]
0046fc  4618              MOV      r0,r3
0046fe  300c              ADDS     r0,r0,#0xc
004700  f7fffffe          BL       send_GSM
;;;490    
;;;491    memset(at_,0,100);
004704  2164              MOVS     r1,#0x64
004706  4823              LDR      r0,|L1.18324|
004708  f7fffffe          BL       __aeabi_memclr
;;;492    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
00470c  4a2e              LDR      r2,|L1.18376|
00470e  492d              LDR      r1,|L1.18372|
004710  3120              ADDS     r1,r1,#0x20
004712  4820              LDR      r0,|L1.18324|
004714  f7fffffe          BL       __2sprintf
;;;493    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
004718  482c              LDR      r0,|L1.18380|
00471a  6800              LDR      r0,[r0,#0]  ; tmeout
00471c  4b29              LDR      r3,|L1.18372|
00471e  4a20              LDR      r2,|L1.18336|
004720  3224              ADDS     r2,r2,#0x24
004722  a127              ADR      r1,|L1.18368|
004724  9000              STR      r0,[sp,#0]
004726  481b              LDR      r0,|L1.18324|
004728  f7fffffe          BL       send_GSM
;;;494    msg_sim800(); 
00472c  f7fffffe          BL       msg_sim800
;;;495    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
004730  2004              MOVS     r0,#4
004732  4b1b              LDR      r3,|L1.18336|
004734  3b38              SUBS     r3,r3,#0x38
004736  461a              MOV      r2,r3
004738  325c              ADDS     r2,r2,#0x5c
00473a  a121              ADR      r1,|L1.18368|
00473c  9000              STR      r0,[sp,#0]
00473e  4821              LDR      r0,|L1.18372|
004740  3038              ADDS     r0,r0,#0x38
004742  f7fffffe          BL       send_GSM
;;;496    GPS_COLLECT2();
004746  f7fffffe          BL       GPS_COLLECT2
;;;497    strcat(data,"CH\n");	
00474a  4915              LDR      r1,|L1.18336|
00474c  390c              SUBS     r1,r1,#0xc
00474e  4812              LDR      r0,|L1.18328|
004750  f7fffffe          BL       strcat
;;;498    GPS_COLLECT2();
004754  f7fffffe          BL       GPS_COLLECT2
;;;499    strcat(data,"CH\n");	
004758  4911              LDR      r1,|L1.18336|
00475a  390c              SUBS     r1,r1,#0xc
00475c  480e              LDR      r0,|L1.18328|
00475e  f7fffffe          BL       strcat
;;;500    msg_sim800(); 
004762  f7fffffe          BL       msg_sim800
;;;501    GPS_COLLECT2();
004766  f7fffffe          BL       GPS_COLLECT2
;;;502    strcat(data,"CH\n");	
00476a  490d              LDR      r1,|L1.18336|
00476c  390c              SUBS     r1,r1,#0xc
00476e  480a              LDR      r0,|L1.18328|
004770  f7fffffe          BL       strcat
;;;503    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);		
004774  2001              MOVS     r0,#1
004776  4b0a              LDR      r3,|L1.18336|
004778  3b38              SUBS     r3,r3,#0x38
00477a  461a              MOV      r2,r3
00477c  325c              ADDS     r2,r2,#0x5c
00477e  a110              ADR      r1,|L1.18368|
004780  9000              STR      r0,[sp,#0]
004782  4810              LDR      r0,|L1.18372|
004784  3048              ADDS     r0,r0,#0x48
004786  f7fffffe          BL       send_GSM
;;;504    if(strstr(uart_string_gsm,"0.0.0.0"))
00478a  4911              LDR      r1,|L1.18384|
00478c  4806              LDR      r0,|L1.18344|
00478e  e021              B        |L1.18388|
                  |L1.18320|
                          DCD      0x4006b000
                  |L1.18324|
                          DCD      at_
                  |L1.18328|
                          DCD      data
                  |L1.18332|
                          DCD      drive
                  |L1.18336|
                          DCD      ||.text||+0x8c4
                  |L1.18340|
0047a4  3e00              DCB      ">",0
0047a6  00                DCB      0
0047a7  00                DCB      0
                  |L1.18344|
                          DCD      uart_string_gsm
                  |L1.18348|
                          DCD      ||k2||
                  |L1.18352|
                          DCD      tout
                  |L1.18356|
                          DCD      k
                  |L1.18360|
                          DCD      int_erval
                  |L1.18364|
                          DCD      temp
                  |L1.18368|
0047c0  4f4b00            DCB      "OK",0
0047c3  00                DCB      0
                  |L1.18372|
                          DCD      ||.text||+0xd54
                  |L1.18376|
                          DCD      apn
                  |L1.18380|
                          DCD      tmeout
                  |L1.18384|
                          DCD      ||.text||+0x4348
                  |L1.18388|
0047d4  f7fffffe          BL       strstr
0047d8  2800              CMP      r0,#0
0047da  d001              BEQ      |L1.18400|
;;;505    {
;;;506    	reset_func();
0047dc  f7fffffe          BL       reset_func
                  |L1.18400|
;;;507    }	
;;;508    
;;;509    
;;;510    msg_sim800(); 
0047e0  f7fffffe          BL       msg_sim800
;;;511    int_erval=temp;
0047e4  48fc              LDR      r0,|L1.19416|
0047e6  6800              LDR      r0,[r0,#0]  ; temp
0047e8  49fc              LDR      r1,|L1.19420|
0047ea  6008              STR      r0,[r1,#0]  ; int_erval
;;;512    //resetting interval 
;;;513    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0047ec  4bfc              LDR      r3,|L1.19424|
0047ee  4afd              LDR      r2,|L1.19428|
0047f0  49fd              LDR      r1,|L1.19432|
0047f2  48fe              LDR      r0,|L1.19436|
0047f4  f7fffffe          BL       __2sprintf
;;;514    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0047f8  48fd              LDR      r0,|L1.19440|
0047fa  6800              LDR      r0,[r0,#0]  ; tmeout
0047fc  4bfa              LDR      r3,|L1.19432|
0047fe  3b60              SUBS     r3,r3,#0x60
004800  4afc              LDR      r2,|L1.19444|
004802  4619              MOV      r1,r3
004804  3180              ADDS     r1,r1,#0x80
004806  9000              STR      r0,[sp,#0]
004808  48f8              LDR      r0,|L1.19436|
00480a  f7fffffe          BL       send_GSM
;;;515    						clear();
00480e  f7fffffe          BL       clear
;;;516    						
;;;517    						
;;;518    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
004812  48f7              LDR      r0,|L1.19440|
004814  6800              LDR      r0,[r0,#0]  ; tmeout
004816  4bf4              LDR      r3,|L1.19432|
004818  3328              ADDS     r3,r3,#0x28
00481a  4af6              LDR      r2,|L1.19444|
00481c  a1f6              ADR      r1,|L1.19448|
00481e  9000              STR      r0,[sp,#0]
004820  4618              MOV      r0,r3
004822  3010              ADDS     r0,r0,#0x10
004824  f7fffffe          BL       send_GSM
;;;519    						
;;;520    //*************************************tcp initialization*******************************/
;;;521    			clear();		
004828  f7fffffe          BL       clear
;;;522    						cond=mystrstr(uart_string_gsm,'>');
00482c  213e              MOVS     r1,#0x3e
00482e  48f3              LDR      r0,|L1.19452|
004830  f7fffffe          BL       mystrstr
004834  49f2              LDR      r1,|L1.19456|
004836  7008              STRB     r0,[r1,#0]
;;;523    								if(cond)	
004838  4608              MOV      r0,r1
00483a  7800              LDRB     r0,[r0,#0]  ; cond
00483c  2800              CMP      r0,#0
00483e  d07d              BEQ      |L1.18748|
;;;524    								{	
;;;525    
;;;526    									clear();
004840  f7fffffe          BL       clear
;;;527    									memset(uart_string_gsm,0,5000);
004844  49ef              LDR      r1,|L1.19460|
004846  48ed              LDR      r0,|L1.19452|
004848  f7fffffe          BL       __aeabi_memclr
;;;528    									strcat(data,"\n");
00484c  a1ee              ADR      r1,|L1.19464|
00484e  48ef              LDR      r0,|L1.19468|
004850  f7fffffe          BL       strcat
;;;529    									len=strlen(data);
004854  48ed              LDR      r0,|L1.19468|
004856  f7fffffe          BL       strlen
00485a  49ed              LDR      r1,|L1.19472|
00485c  6008              STR      r0,[r1,#0]  ; len
;;;530    									tout=0;
00485e  2000              MOVS     r0,#0
004860  49ec              LDR      r1,|L1.19476|
004862  6008              STR      r0,[r1,#0]  ; tout
;;;531    									k2=0;
004864  49ec              LDR      r1,|L1.19480|
004866  6008              STR      r0,[r1,#0]  ; k2
;;;532    									for(k=0;k<len;k++)
004868  49ec              LDR      r1,|L1.19484|
00486a  6008              STR      r0,[r1,#0]  ; k
00486c  e00d              B        |L1.18570|
                  |L1.18542|
;;;533    									{
;;;534    										uart_putchar(UART1_BASE_PTR, data[k]);
00486e  48e7              LDR      r0,|L1.19468|
004870  49ea              LDR      r1,|L1.19484|
004872  6809              LDR      r1,[r1,#0]  ; k
004874  5c40              LDRB     r0,[r0,r1]
004876  4601              MOV      r1,r0
004878  9001              STR      r0,[sp,#4]
00487a  48e9              LDR      r0,|L1.19488|
00487c  f7fffffe          BL       uart_putchar
004880  48e6              LDR      r0,|L1.19484|
004882  6800              LDR      r0,[r0,#0]            ;532  ; k
004884  1c40              ADDS     r0,r0,#1              ;532
004886  49e5              LDR      r1,|L1.19484|
004888  6008              STR      r0,[r1,#0]            ;532  ; k
                  |L1.18570|
00488a  48e4              LDR      r0,|L1.19484|
00488c  6800              LDR      r0,[r0,#0]            ;532  ; k
00488e  49e0              LDR      r1,|L1.19472|
004890  6809              LDR      r1,[r1,#0]            ;532  ; len
004892  4288              CMP      r0,r1                 ;532
004894  dbeb              BLT      |L1.18542|
;;;535    									}uart_putchar(UART1_BASE_PTR, 0x1A);
004896  211a              MOVS     r1,#0x1a
004898  48e1              LDR      r0,|L1.19488|
00489a  f7fffffe          BL       uart_putchar
;;;536    									do
00489e  bf00              NOP      
                  |L1.18592|
;;;537    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0048a0  49e0              LDR      r1,|L1.19492|
0048a2  48d6              LDR      r0,|L1.19452|
0048a4  f7fffffe          BL       strstr
0048a8  49df              LDR      r1,|L1.19496|
0048aa  6008              STR      r0,[r1,#0]  ; stcond1
;;;538    																	stcond2=strstr(uart_string_gsm, "ERROR");
0048ac  49d1              LDR      r1,|L1.19444|
0048ae  48d3              LDR      r0,|L1.19452|
0048b0  f7fffffe          BL       strstr
0048b4  49dd              LDR      r1,|L1.19500|
0048b6  6008              STR      r0,[r1,#0]  ; stcond2
;;;539    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0048b8  49cb              LDR      r1,|L1.19432|
0048ba  3130              ADDS     r1,r1,#0x30
0048bc  48cf              LDR      r0,|L1.19452|
0048be  f7fffffe          BL       strstr
0048c2  49db              LDR      r1,|L1.19504|
0048c4  6008              STR      r0,[r1,#0]  ; stcond3
;;;540    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0048c6  49cb              LDR      r1,|L1.19444|
0048c8  311c              ADDS     r1,r1,#0x1c
0048ca  48cc              LDR      r0,|L1.19452|
0048cc  f7fffffe          BL       strstr
0048d0  49d8              LDR      r1,|L1.19508|
0048d2  6008              STR      r0,[r1,#0]  ; stcond4
;;;541    																	
;;;542    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0048d4  48d5              LDR      r0,|L1.19500|
0048d6  6800              LDR      r0,[r0,#0]  ; stcond2
0048d8  2800              CMP      r0,#0
0048da  d10f              BNE      |L1.18684|
0048dc  48d4              LDR      r0,|L1.19504|
0048de  6800              LDR      r0,[r0,#0]  ; stcond3
0048e0  2800              CMP      r0,#0
0048e2  d10b              BNE      |L1.18684|
0048e4  4608              MOV      r0,r1
0048e6  6800              LDR      r0,[r0,#0]  ; stcond4
0048e8  2800              CMP      r0,#0
0048ea  d107              BNE      |L1.18684|
0048ec  48ce              LDR      r0,|L1.19496|
0048ee  6800              LDR      r0,[r0,#0]  ; stcond1
0048f0  2800              CMP      r0,#0
0048f2  d103              BNE      |L1.18684|
0048f4  48c7              LDR      r0,|L1.19476|
0048f6  6800              LDR      r0,[r0,#0]  ; tout
0048f8  2808              CMP      r0,#8
0048fa  ddd1              BLE      |L1.18592|
                  |L1.18684|
;;;543    																delay(10);clear();
0048fc  200a              MOVS     r0,#0xa
0048fe  f7fffffe          BL       delay
004902  f7fffffe          BL       clear
;;;544    														uart_putchar(UART1_BASE_PTR,0x1A);
004906  211a              MOVS     r1,#0x1a
004908  48c5              LDR      r0,|L1.19488|
00490a  f7fffffe          BL       uart_putchar
;;;545    												delay(10);
00490e  200a              MOVS     r0,#0xa
004910  f7fffffe          BL       delay
;;;546    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
004914  211a              MOVS     r1,#0x1a
004916  48c2              LDR      r0,|L1.19488|
004918  f7fffffe          BL       uart_putchar
00491c  211a              MOVS     r1,#0x1a
00491e  48c0              LDR      r0,|L1.19488|
004920  f7fffffe          BL       uart_putchar
004924  211a              MOVS     r1,#0x1a
004926  48be              LDR      r0,|L1.19488|
004928  f7fffffe          BL       uart_putchar
;;;547    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
00492c  211a              MOVS     r1,#0x1a
00492e  48bc              LDR      r0,|L1.19488|
004930  f7fffffe          BL       uart_putchar
004934  f7fffffe          BL       clear
004938  200a              MOVS     r0,#0xa
00493a  e000              B        |L1.18750|
                  |L1.18748|
00493c  e1ad              B        |L1.19610|
                  |L1.18750|
00493e  f7fffffe          BL       delay
;;;548    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004942  211a              MOVS     r1,#0x1a
004944  48b6              LDR      r0,|L1.19488|
004946  f7fffffe          BL       uart_putchar
00494a  f7fffffe          BL       clear
00494e  200a              MOVS     r0,#0xa
004950  f7fffffe          BL       delay
;;;549    															
;;;550    										qwe=strlen(uart_string_gsm);
004954  48a9              LDR      r0,|L1.19452|
004956  f7fffffe          BL       strlen
00495a  49b7              LDR      r1,|L1.19512|
00495c  6008              STR      r0,[r1,#0]  ; qwe
;;;551    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
00495e  211a              MOVS     r1,#0x1a
004960  48af              LDR      r0,|L1.19488|
004962  f7fffffe          BL       uart_putchar
004966  f7fffffe          BL       clear
00496a  200a              MOVS     r0,#0xa
00496c  f7fffffe          BL       delay
;;;552    								delay(50);
004970  2032              MOVS     r0,#0x32
004972  f7fffffe          BL       delay
;;;553    								con1d=strstr(uart_string_gsm,"SEND OK");
004976  49ab              LDR      r1,|L1.19492|
004978  48a0              LDR      r0,|L1.19452|
00497a  f7fffffe          BL       strstr
00497e  49af              LDR      r1,|L1.19516|
004980  6008              STR      r0,[r1,#0]  ; con1d
;;;554    								if(!(con1d) == 1 )
004982  4608              MOV      r0,r1
004984  6800              LDR      r0,[r0,#0]  ; con1d
004986  2800              CMP      r0,#0
004988  d101              BNE      |L1.18830|
00498a  2001              MOVS     r0,#1
00498c  e000              B        |L1.18832|
                  |L1.18830|
00498e  2000              MOVS     r0,#0
                  |L1.18832|
004990  2801              CMP      r0,#1
004992  d17d              BNE      |L1.19088|
;;;555    								{
;;;556    									delay(100);
004994  2064              MOVS     r0,#0x64
004996  f7fffffe          BL       delay
;;;557    									clear();//memset(uart_string_gsm,0,5000);
00499a  f7fffffe          BL       clear
;;;558    									memset(at_,0,100);
00499e  2164              MOVS     r1,#0x64
0049a0  4892              LDR      r0,|L1.19436|
0049a2  f7fffffe          BL       __aeabi_memclr
;;;559    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0049a6  4899              LDR      r0,|L1.19468|
0049a8  f7fffffe          BL       strlen
0049ac  1c40              ADDS     r0,r0,#1
0049ae  4603              MOV      r3,r0
0049b0  4aa3              LDR      r2,|L1.19520|
0049b2  4990              LDR      r1,|L1.19444|
0049b4  3154              ADDS     r1,r1,#0x54
0049b6  9001              STR      r0,[sp,#4]
0049b8  488c              LDR      r0,|L1.19436|
0049ba  f7fffffe          BL       __2sprintf
;;;560    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0049be  2005              MOVS     r0,#5
0049c0  4b8c              LDR      r3,|L1.19444|
0049c2  461a              MOV      r2,r3
0049c4  3278              ADDS     r2,r2,#0x78
0049c6  a18c              ADR      r1,|L1.19448|
0049c8  9000              STR      r0,[sp,#0]
0049ca  4888              LDR      r0,|L1.19436|
0049cc  f7fffffe          BL       send_SD
;;;561    if(strstr(uart_string_gsm,"ERROR")){
0049d0  4988              LDR      r1,|L1.19444|
0049d2  488a              LDR      r0,|L1.19452|
0049d4  f7fffffe          BL       strstr
0049d8  2800              CMP      r0,#0
0049da  d004              BEQ      |L1.18918|
;;;562    	drive[0]='C';drive[1]=':';
0049dc  2043              MOVS     r0,#0x43
0049de  4998              LDR      r1,|L1.19520|
0049e0  7008              STRB     r0,[r1,#0]
0049e2  203a              MOVS     r0,#0x3a
0049e4  7048              STRB     r0,[r1,#1]
                  |L1.18918|
;;;563    }	
;;;564    									clear();	
0049e6  f7fffffe          BL       clear
;;;565    									k2=0;									//string array counter for uart 1
0049ea  2000              MOVS     r0,#0
0049ec  498a              LDR      r1,|L1.19480|
0049ee  6008              STR      r0,[r1,#0]  ; k2
;;;566    									tout=0;	
0049f0  4988              LDR      r1,|L1.19476|
0049f2  6008              STR      r0,[r1,#0]  ; tout
;;;567    									for(k=0;k<strlen(data);k++)
0049f4  4989              LDR      r1,|L1.19484|
0049f6  6008              STR      r0,[r1,#0]  ; k
0049f8  e00d              B        |L1.18966|
                  |L1.18938|
;;;568    									{
;;;569    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0049fa  4884              LDR      r0,|L1.19468|
0049fc  4987              LDR      r1,|L1.19484|
0049fe  6809              LDR      r1,[r1,#0]  ; k
004a00  5c40              LDRB     r0,[r0,r1]
004a02  4601              MOV      r1,r0
004a04  9001              STR      r0,[sp,#4]
004a06  4886              LDR      r0,|L1.19488|
004a08  f7fffffe          BL       uart_putchar
004a0c  4883              LDR      r0,|L1.19484|
004a0e  6800              LDR      r0,[r0,#0]            ;567  ; k
004a10  1c40              ADDS     r0,r0,#1              ;567
004a12  4982              LDR      r1,|L1.19484|
004a14  6008              STR      r0,[r1,#0]            ;567  ; k
                  |L1.18966|
004a16  487d              LDR      r0,|L1.19468|
004a18  f7fffffe          BL       strlen
004a1c  497f              LDR      r1,|L1.19484|
004a1e  6809              LDR      r1,[r1,#0]            ;567  ; k
004a20  4288              CMP      r0,r1                 ;567
004a22  d8ea              BHI      |L1.18938|
;;;570    									}	
;;;571    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004a24  210a              MOVS     r1,#0xa
004a26  487e              LDR      r0,|L1.19488|
004a28  f7fffffe          BL       uart_putchar
004a2c  210a              MOVS     r1,#0xa
004a2e  487c              LDR      r0,|L1.19488|
004a30  f7fffffe          BL       uart_putchar
004a34  210a              MOVS     r1,#0xa
004a36  487a              LDR      r0,|L1.19488|
004a38  f7fffffe          BL       uart_putchar
004a3c  210a              MOVS     r1,#0xa
004a3e  4878              LDR      r0,|L1.19488|
004a40  f7fffffe          BL       uart_putchar
004a44  210a              MOVS     r1,#0xa
004a46  4876              LDR      r0,|L1.19488|
004a48  f7fffffe          BL       uart_putchar
004a4c  210a              MOVS     r1,#0xa
004a4e  4874              LDR      r0,|L1.19488|
004a50  f7fffffe          BL       uart_putchar
004a54  210a              MOVS     r1,#0xa
004a56  4872              LDR      r0,|L1.19488|
004a58  f7fffffe          BL       uart_putchar
004a5c  210a              MOVS     r1,#0xa
004a5e  4870              LDR      r0,|L1.19488|
004a60  f7fffffe          BL       uart_putchar
004a64  210a              MOVS     r1,#0xa
004a66  486e              LDR      r0,|L1.19488|
004a68  f7fffffe          BL       uart_putchar
004a6c  210a              MOVS     r1,#0xa
004a6e  486c              LDR      r0,|L1.19488|
004a70  f7fffffe          BL       uart_putchar
004a74  210a              MOVS     r1,#0xa
004a76  486a              LDR      r0,|L1.19488|
004a78  f7fffffe          BL       uart_putchar
004a7c  210a              MOVS     r1,#0xa
004a7e  4868              LDR      r0,|L1.19488|
004a80  f7fffffe          BL       uart_putchar
004a84  210a              MOVS     r1,#0xa
004a86  4866              LDR      r0,|L1.19488|
004a88  f7fffffe          BL       uart_putchar
004a8c  210a              MOVS     r1,#0xa
004a8e  e000              B        |L1.19090|
                  |L1.19088|
004a90  e250              B        |L1.20276|
                  |L1.19090|
004a92  4863              LDR      r0,|L1.19488|
004a94  f7fffffe          BL       uart_putchar
004a98  210a              MOVS     r1,#0xa
004a9a  4861              LDR      r0,|L1.19488|
004a9c  f7fffffe          BL       uart_putchar
004aa0  210a              MOVS     r1,#0xa
004aa2  485f              LDR      r0,|L1.19488|
004aa4  f7fffffe          BL       uart_putchar
004aa8  210a              MOVS     r1,#0xa
004aaa  485d              LDR      r0,|L1.19488|
004aac  f7fffffe          BL       uart_putchar
004ab0  210a              MOVS     r1,#0xa
004ab2  485b              LDR      r0,|L1.19488|
004ab4  f7fffffe          BL       uart_putchar
004ab8  210a              MOVS     r1,#0xa
004aba  4859              LDR      r0,|L1.19488|
004abc  f7fffffe          BL       uart_putchar
004ac0  210a              MOVS     r1,#0xa
004ac2  4857              LDR      r0,|L1.19488|
004ac4  f7fffffe          BL       uart_putchar
004ac8  210a              MOVS     r1,#0xa
004aca  4855              LDR      r0,|L1.19488|
004acc  f7fffffe          BL       uart_putchar
004ad0  210a              MOVS     r1,#0xa
004ad2  4853              LDR      r0,|L1.19488|
004ad4  f7fffffe          BL       uart_putchar
004ad8  210a              MOVS     r1,#0xa
004ada  4851              LDR      r0,|L1.19488|
004adc  f7fffffe          BL       uart_putchar
004ae0  210a              MOVS     r1,#0xa
004ae2  484f              LDR      r0,|L1.19488|
004ae4  f7fffffe          BL       uart_putchar
004ae8  210a              MOVS     r1,#0xa
004aea  484d              LDR      r0,|L1.19488|
004aec  f7fffffe          BL       uart_putchar
004af0  210a              MOVS     r1,#0xa
004af2  484b              LDR      r0,|L1.19488|
004af4  f7fffffe          BL       uart_putchar
004af8  210a              MOVS     r1,#0xa
004afa  4849              LDR      r0,|L1.19488|
004afc  f7fffffe          BL       uart_putchar
004b00  210a              MOVS     r1,#0xa
004b02  4847              LDR      r0,|L1.19488|
004b04  f7fffffe          BL       uart_putchar
004b08  210a              MOVS     r1,#0xa
004b0a  4845              LDR      r0,|L1.19488|
004b0c  f7fffffe          BL       uart_putchar
004b10  210a              MOVS     r1,#0xa
004b12  4843              LDR      r0,|L1.19488|
004b14  f7fffffe          BL       uart_putchar
004b18  210a              MOVS     r1,#0xa
004b1a  4841              LDR      r0,|L1.19488|
004b1c  f7fffffe          BL       uart_putchar
004b20  210a              MOVS     r1,#0xa
004b22  483f              LDR      r0,|L1.19488|
004b24  f7fffffe          BL       uart_putchar
004b28  210a              MOVS     r1,#0xa
004b2a  483d              LDR      r0,|L1.19488|
004b2c  f7fffffe          BL       uart_putchar
004b30  210a              MOVS     r1,#0xa
004b32  483b              LDR      r0,|L1.19488|
004b34  f7fffffe          BL       uart_putchar
004b38  210a              MOVS     r1,#0xa
004b3a  4839              LDR      r0,|L1.19488|
004b3c  f7fffffe          BL       uart_putchar
004b40  210a              MOVS     r1,#0xa
004b42  4837              LDR      r0,|L1.19488|
004b44  f7fffffe          BL       uart_putchar
004b48  210a              MOVS     r1,#0xa
004b4a  4835              LDR      r0,|L1.19488|
004b4c  f7fffffe          BL       uart_putchar
004b50  210a              MOVS     r1,#0xa
004b52  4833              LDR      r0,|L1.19488|
004b54  f7fffffe          BL       uart_putchar
004b58  210a              MOVS     r1,#0xa
004b5a  4831              LDR      r0,|L1.19488|
004b5c  f7fffffe          BL       uart_putchar
004b60  210a              MOVS     r1,#0xa
004b62  482f              LDR      r0,|L1.19488|
004b64  f7fffffe          BL       uart_putchar
004b68  210a              MOVS     r1,#0xa
004b6a  482d              LDR      r0,|L1.19488|
004b6c  f7fffffe          BL       uart_putchar
004b70  210a              MOVS     r1,#0xa
004b72  482b              LDR      r0,|L1.19488|
004b74  f7fffffe          BL       uart_putchar
004b78  210a              MOVS     r1,#0xa
004b7a  4829              LDR      r0,|L1.19488|
004b7c  f7fffffe          BL       uart_putchar
004b80  210a              MOVS     r1,#0xa
004b82  4827              LDR      r0,|L1.19488|
004b84  f7fffffe          BL       uart_putchar
004b88  210a              MOVS     r1,#0xa
004b8a  4825              LDR      r0,|L1.19488|
004b8c  f7fffffe          BL       uart_putchar
004b90  210a              MOVS     r1,#0xa
004b92  4823              LDR      r0,|L1.19488|
004b94  f7fffffe          BL       uart_putchar
004b98  210a              MOVS     r1,#0xa
004b9a  4821              LDR      r0,|L1.19488|
004b9c  f7fffffe          BL       uart_putchar
004ba0  210a              MOVS     r1,#0xa
004ba2  481f              LDR      r0,|L1.19488|
004ba4  f7fffffe          BL       uart_putchar
004ba8  210a              MOVS     r1,#0xa
004baa  481d              LDR      r0,|L1.19488|
004bac  f7fffffe          BL       uart_putchar
004bb0  210a              MOVS     r1,#0xa
004bb2  481b              LDR      r0,|L1.19488|
004bb4  f7fffffe          BL       uart_putchar
004bb8  210a              MOVS     r1,#0xa
004bba  4819              LDR      r0,|L1.19488|
004bbc  f7fffffe          BL       uart_putchar
004bc0  210a              MOVS     r1,#0xa
004bc2  4817              LDR      r0,|L1.19488|
004bc4  f7fffffe          BL       uart_putchar
004bc8  210a              MOVS     r1,#0xa
004bca  4815              LDR      r0,|L1.19488|
004bcc  f7fffffe          BL       uart_putchar
004bd0  210a              MOVS     r1,#0xa
004bd2  4813              LDR      r0,|L1.19488|
004bd4  e036              B        |L1.19524|
004bd6  0000              DCW      0x0000
                  |L1.19416|
                          DCD      temp
                  |L1.19420|
                          DCD      int_erval
                  |L1.19424|
                          DCD      port
                  |L1.19428|
                          DCD      ||ip||
                  |L1.19432|
                          DCD      ||.text||+0xdb4
                  |L1.19436|
                          DCD      at_
                  |L1.19440|
                          DCD      tmeout
                  |L1.19444|
                          DCD      ||.text||+0x870
                  |L1.19448|
004bf8  3e00              DCB      ">",0
004bfa  00                DCB      0
004bfb  00                DCB      0
                  |L1.19452|
                          DCD      uart_string_gsm
                  |L1.19456|
                          DCD      cond
                  |L1.19460|
                          DCD      0x00001388
                  |L1.19464|
004c08  0a00              DCB      "\n",0
004c0a  00                DCB      0
004c0b  00                DCB      0
                  |L1.19468|
                          DCD      data
                  |L1.19472|
                          DCD      len
                  |L1.19476|
                          DCD      tout
                  |L1.19480|
                          DCD      ||k2||
                  |L1.19484|
                          DCD      k
                  |L1.19488|
                          DCD      0x4006b000
                  |L1.19492|
                          DCD      ||.text||+0x474
                  |L1.19496|
                          DCD      stcond1
                  |L1.19500|
                          DCD      stcond2
                  |L1.19504|
                          DCD      stcond3
                  |L1.19508|
                          DCD      stcond4
                  |L1.19512|
                          DCD      qwe
                  |L1.19516|
                          DCD      con1d
                  |L1.19520|
                          DCD      drive
                  |L1.19524|
004c44  f7fffffe          BL       uart_putchar
004c48  210a              MOVS     r1,#0xa
004c4a  48f7              LDR      r0,|L1.20520|
004c4c  f7fffffe          BL       uart_putchar
004c50  210a              MOVS     r1,#0xa
004c52  48f5              LDR      r0,|L1.20520|
004c54  f7fffffe          BL       uart_putchar
004c58  210a              MOVS     r1,#0xa
004c5a  48f3              LDR      r0,|L1.20520|
004c5c  f7fffffe          BL       uart_putchar
;;;572    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004c60  bf00              NOP      
                  |L1.19554|
004c62  49f2              LDR      r1,|L1.20524|
004c64  48f2              LDR      r0,|L1.20528|
004c66  f7fffffe          BL       strstr
004c6a  2800              CMP      r0,#0
004c6c  d10a              BNE      |L1.19588|
004c6e  49ef              LDR      r1,|L1.20524|
004c70  398c              SUBS     r1,r1,#0x8c
004c72  48ef              LDR      r0,|L1.20528|
004c74  f7fffffe          BL       strstr
004c78  2800              CMP      r0,#0
004c7a  d103              BNE      |L1.19588|
004c7c  48ed              LDR      r0,|L1.20532|
004c7e  6800              LDR      r0,[r0,#0]  ; tout
004c80  2805              CMP      r0,#5
004c82  ddee              BLE      |L1.19554|
                  |L1.19588|
;;;573    									{}
;;;574    	                memset(data,0,strlen(data));
004c84  48ec              LDR      r0,|L1.20536|
004c86  f7fffffe          BL       strlen
004c8a  4601              MOV      r1,r0
004c8c  9001              STR      r0,[sp,#4]
004c8e  48ea              LDR      r0,|L1.20536|
004c90  f7fffffe          BL       __aeabi_memclr
;;;575    									clear();
004c94  f7fffffe          BL       clear
004c98  e14c              B        |L1.20276|
                  |L1.19610|
;;;576    									}else{
;;;577    									//send_chunk();
;;;578    									}	
;;;579    						}else{
;;;580    									delay(100);
004c9a  2064              MOVS     r0,#0x64
004c9c  f7fffffe          BL       delay
;;;581    									clear();//memset(uart_string_gsm,0,5000);
004ca0  f7fffffe          BL       clear
;;;582    
;;;583    									memset(at_,0,100);
004ca4  2164              MOVS     r1,#0x64
004ca6  48e5              LDR      r0,|L1.20540|
004ca8  f7fffffe          BL       __aeabi_memclr
;;;584    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004cac  48e2              LDR      r0,|L1.20536|
004cae  f7fffffe          BL       strlen
004cb2  1c40              ADDS     r0,r0,#1
004cb4  4603              MOV      r3,r0
004cb6  4ae2              LDR      r2,|L1.20544|
004cb8  49dc              LDR      r1,|L1.20524|
004cba  3938              SUBS     r1,r1,#0x38
004cbc  9001              STR      r0,[sp,#4]
004cbe  48df              LDR      r0,|L1.20540|
004cc0  f7fffffe          BL       __2sprintf
;;;585    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004cc4  2005              MOVS     r0,#5
004cc6  4bd9              LDR      r3,|L1.20524|
004cc8  3b8c              SUBS     r3,r3,#0x8c
004cca  461a              MOV      r2,r3
004ccc  3278              ADDS     r2,r2,#0x78
004cce  a1dd              ADR      r1,|L1.20548|
004cd0  9000              STR      r0,[sp,#0]
004cd2  48da              LDR      r0,|L1.20540|
004cd4  f7fffffe          BL       send_SD
;;;586    if(strstr(uart_string_gsm,"ERROR")){
004cd8  49d4              LDR      r1,|L1.20524|
004cda  398c              SUBS     r1,r1,#0x8c
004cdc  48d4              LDR      r0,|L1.20528|
004cde  f7fffffe          BL       strstr
004ce2  2800              CMP      r0,#0
004ce4  d004              BEQ      |L1.19696|
;;;587    	drive[0]='C';drive[1]=':';
004ce6  2043              MOVS     r0,#0x43
004ce8  49d5              LDR      r1,|L1.20544|
004cea  7008              STRB     r0,[r1,#0]
004cec  203a              MOVS     r0,#0x3a
004cee  7048              STRB     r0,[r1,#1]
                  |L1.19696|
;;;588    }	
;;;589    									clear();	
004cf0  f7fffffe          BL       clear
;;;590    									k2=0;									//string array counter for uart 1
004cf4  2000              MOVS     r0,#0
004cf6  49d4              LDR      r1,|L1.20552|
004cf8  6008              STR      r0,[r1,#0]  ; k2
;;;591    									tout=0;	
004cfa  49ce              LDR      r1,|L1.20532|
004cfc  6008              STR      r0,[r1,#0]  ; tout
;;;592    		for(k=0;k<strlen(data);k++)
004cfe  49d3              LDR      r1,|L1.20556|
004d00  6008              STR      r0,[r1,#0]  ; k
004d02  e00d              B        |L1.19744|
                  |L1.19716|
;;;593    		{
;;;594    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004d04  48cc              LDR      r0,|L1.20536|
004d06  49d1              LDR      r1,|L1.20556|
004d08  6809              LDR      r1,[r1,#0]  ; k
004d0a  5c40              LDRB     r0,[r0,r1]
004d0c  4601              MOV      r1,r0
004d0e  9001              STR      r0,[sp,#4]
004d10  48c5              LDR      r0,|L1.20520|
004d12  f7fffffe          BL       uart_putchar
004d16  48cd              LDR      r0,|L1.20556|
004d18  6800              LDR      r0,[r0,#0]            ;592  ; k
004d1a  1c40              ADDS     r0,r0,#1              ;592
004d1c  49cb              LDR      r1,|L1.20556|
004d1e  6008              STR      r0,[r1,#0]            ;592  ; k
                  |L1.19744|
004d20  48c5              LDR      r0,|L1.20536|
004d22  f7fffffe          BL       strlen
004d26  49c9              LDR      r1,|L1.20556|
004d28  6809              LDR      r1,[r1,#0]            ;592  ; k
004d2a  4288              CMP      r0,r1                 ;592
004d2c  d8ea              BHI      |L1.19716|
;;;595    		}	
;;;596    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004d2e  210a              MOVS     r1,#0xa
004d30  48bd              LDR      r0,|L1.20520|
004d32  f7fffffe          BL       uart_putchar
004d36  210a              MOVS     r1,#0xa
004d38  48bb              LDR      r0,|L1.20520|
004d3a  f7fffffe          BL       uart_putchar
004d3e  210a              MOVS     r1,#0xa
004d40  48b9              LDR      r0,|L1.20520|
004d42  f7fffffe          BL       uart_putchar
004d46  210a              MOVS     r1,#0xa
004d48  48b7              LDR      r0,|L1.20520|
004d4a  f7fffffe          BL       uart_putchar
004d4e  210a              MOVS     r1,#0xa
004d50  48b5              LDR      r0,|L1.20520|
004d52  f7fffffe          BL       uart_putchar
004d56  210a              MOVS     r1,#0xa
004d58  48b3              LDR      r0,|L1.20520|
004d5a  f7fffffe          BL       uart_putchar
004d5e  210a              MOVS     r1,#0xa
004d60  48b1              LDR      r0,|L1.20520|
004d62  f7fffffe          BL       uart_putchar
004d66  210a              MOVS     r1,#0xa
004d68  48af              LDR      r0,|L1.20520|
004d6a  f7fffffe          BL       uart_putchar
004d6e  210a              MOVS     r1,#0xa
004d70  48ad              LDR      r0,|L1.20520|
004d72  f7fffffe          BL       uart_putchar
004d76  210a              MOVS     r1,#0xa
004d78  48ab              LDR      r0,|L1.20520|
004d7a  f7fffffe          BL       uart_putchar
004d7e  210a              MOVS     r1,#0xa
004d80  48a9              LDR      r0,|L1.20520|
004d82  f7fffffe          BL       uart_putchar
004d86  210a              MOVS     r1,#0xa
004d88  48a7              LDR      r0,|L1.20520|
004d8a  f7fffffe          BL       uart_putchar
004d8e  210a              MOVS     r1,#0xa
004d90  48a5              LDR      r0,|L1.20520|
004d92  f7fffffe          BL       uart_putchar
004d96  210a              MOVS     r1,#0xa
004d98  48a3              LDR      r0,|L1.20520|
004d9a  f7fffffe          BL       uart_putchar
004d9e  210a              MOVS     r1,#0xa
004da0  48a1              LDR      r0,|L1.20520|
004da2  f7fffffe          BL       uart_putchar
004da6  210a              MOVS     r1,#0xa
004da8  489f              LDR      r0,|L1.20520|
004daa  f7fffffe          BL       uart_putchar
004dae  210a              MOVS     r1,#0xa
004db0  489d              LDR      r0,|L1.20520|
004db2  f7fffffe          BL       uart_putchar
004db6  210a              MOVS     r1,#0xa
004db8  489b              LDR      r0,|L1.20520|
004dba  f7fffffe          BL       uart_putchar
004dbe  210a              MOVS     r1,#0xa
004dc0  4899              LDR      r0,|L1.20520|
004dc2  f7fffffe          BL       uart_putchar
004dc6  210a              MOVS     r1,#0xa
004dc8  4897              LDR      r0,|L1.20520|
004dca  f7fffffe          BL       uart_putchar
004dce  210a              MOVS     r1,#0xa
004dd0  4895              LDR      r0,|L1.20520|
004dd2  f7fffffe          BL       uart_putchar
004dd6  210a              MOVS     r1,#0xa
004dd8  4893              LDR      r0,|L1.20520|
004dda  f7fffffe          BL       uart_putchar
004dde  210a              MOVS     r1,#0xa
004de0  4891              LDR      r0,|L1.20520|
004de2  f7fffffe          BL       uart_putchar
004de6  210a              MOVS     r1,#0xa
004de8  488f              LDR      r0,|L1.20520|
004dea  f7fffffe          BL       uart_putchar
004dee  210a              MOVS     r1,#0xa
004df0  488d              LDR      r0,|L1.20520|
004df2  f7fffffe          BL       uart_putchar
004df6  210a              MOVS     r1,#0xa
004df8  488b              LDR      r0,|L1.20520|
004dfa  f7fffffe          BL       uart_putchar
004dfe  210a              MOVS     r1,#0xa
004e00  4889              LDR      r0,|L1.20520|
004e02  f7fffffe          BL       uart_putchar
004e06  210a              MOVS     r1,#0xa
004e08  4887              LDR      r0,|L1.20520|
004e0a  f7fffffe          BL       uart_putchar
004e0e  210a              MOVS     r1,#0xa
004e10  4885              LDR      r0,|L1.20520|
004e12  f7fffffe          BL       uart_putchar
004e16  210a              MOVS     r1,#0xa
004e18  4883              LDR      r0,|L1.20520|
004e1a  f7fffffe          BL       uart_putchar
004e1e  210a              MOVS     r1,#0xa
004e20  4881              LDR      r0,|L1.20520|
004e22  f7fffffe          BL       uart_putchar
004e26  210a              MOVS     r1,#0xa
004e28  487f              LDR      r0,|L1.20520|
004e2a  f7fffffe          BL       uart_putchar
004e2e  210a              MOVS     r1,#0xa
004e30  487d              LDR      r0,|L1.20520|
004e32  f7fffffe          BL       uart_putchar
004e36  210a              MOVS     r1,#0xa
004e38  487b              LDR      r0,|L1.20520|
004e3a  f7fffffe          BL       uart_putchar
004e3e  210a              MOVS     r1,#0xa
004e40  4879              LDR      r0,|L1.20520|
004e42  f7fffffe          BL       uart_putchar
004e46  210a              MOVS     r1,#0xa
004e48  4877              LDR      r0,|L1.20520|
004e4a  f7fffffe          BL       uart_putchar
004e4e  210a              MOVS     r1,#0xa
004e50  4875              LDR      r0,|L1.20520|
004e52  f7fffffe          BL       uart_putchar
004e56  210a              MOVS     r1,#0xa
004e58  4873              LDR      r0,|L1.20520|
004e5a  f7fffffe          BL       uart_putchar
004e5e  210a              MOVS     r1,#0xa
004e60  4871              LDR      r0,|L1.20520|
004e62  f7fffffe          BL       uart_putchar
004e66  210a              MOVS     r1,#0xa
004e68  486f              LDR      r0,|L1.20520|
004e6a  f7fffffe          BL       uart_putchar
004e6e  210a              MOVS     r1,#0xa
004e70  486d              LDR      r0,|L1.20520|
004e72  f7fffffe          BL       uart_putchar
004e76  210a              MOVS     r1,#0xa
004e78  486b              LDR      r0,|L1.20520|
004e7a  f7fffffe          BL       uart_putchar
004e7e  210a              MOVS     r1,#0xa
004e80  4869              LDR      r0,|L1.20520|
004e82  f7fffffe          BL       uart_putchar
004e86  210a              MOVS     r1,#0xa
004e88  4867              LDR      r0,|L1.20520|
004e8a  f7fffffe          BL       uart_putchar
004e8e  210a              MOVS     r1,#0xa
004e90  4865              LDR      r0,|L1.20520|
004e92  f7fffffe          BL       uart_putchar
004e96  210a              MOVS     r1,#0xa
004e98  4863              LDR      r0,|L1.20520|
004e9a  f7fffffe          BL       uart_putchar
004e9e  210a              MOVS     r1,#0xa
004ea0  4861              LDR      r0,|L1.20520|
004ea2  f7fffffe          BL       uart_putchar
004ea6  210a              MOVS     r1,#0xa
004ea8  485f              LDR      r0,|L1.20520|
004eaa  f7fffffe          BL       uart_putchar
004eae  210a              MOVS     r1,#0xa
004eb0  485d              LDR      r0,|L1.20520|
004eb2  f7fffffe          BL       uart_putchar
004eb6  210a              MOVS     r1,#0xa
004eb8  485b              LDR      r0,|L1.20520|
004eba  f7fffffe          BL       uart_putchar
004ebe  210a              MOVS     r1,#0xa
004ec0  4859              LDR      r0,|L1.20520|
004ec2  f7fffffe          BL       uart_putchar
004ec6  210a              MOVS     r1,#0xa
004ec8  4857              LDR      r0,|L1.20520|
004eca  f7fffffe          BL       uart_putchar
004ece  210a              MOVS     r1,#0xa
004ed0  4855              LDR      r0,|L1.20520|
004ed2  f7fffffe          BL       uart_putchar
004ed6  210a              MOVS     r1,#0xa
004ed8  4853              LDR      r0,|L1.20520|
004eda  f7fffffe          BL       uart_putchar
004ede  210a              MOVS     r1,#0xa
004ee0  4851              LDR      r0,|L1.20520|
004ee2  f7fffffe          BL       uart_putchar
004ee6  210a              MOVS     r1,#0xa
004ee8  484f              LDR      r0,|L1.20520|
004eea  f7fffffe          BL       uart_putchar
004eee  210a              MOVS     r1,#0xa
004ef0  484d              LDR      r0,|L1.20520|
004ef2  f7fffffe          BL       uart_putchar
;;;597    								
;;;598    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004ef6  bf00              NOP      
                  |L1.20216|
004ef8  494c              LDR      r1,|L1.20524|
004efa  484d              LDR      r0,|L1.20528|
004efc  f7fffffe          BL       strstr
004f00  2800              CMP      r0,#0
004f02  d10a              BNE      |L1.20250|
004f04  4949              LDR      r1,|L1.20524|
004f06  398c              SUBS     r1,r1,#0x8c
004f08  4849              LDR      r0,|L1.20528|
004f0a  f7fffffe          BL       strstr
004f0e  2800              CMP      r0,#0
004f10  d103              BNE      |L1.20250|
004f12  4848              LDR      r0,|L1.20532|
004f14  6800              LDR      r0,[r0,#0]  ; tout
004f16  2805              CMP      r0,#5
004f18  ddee              BLE      |L1.20216|
                  |L1.20250|
;;;599    									{}
;;;600    	                 memset(data,0,strlen(data));
004f1a  4847              LDR      r0,|L1.20536|
004f1c  f7fffffe          BL       strlen
004f20  4601              MOV      r1,r0
004f22  9001              STR      r0,[sp,#4]
004f24  4844              LDR      r0,|L1.20536|
004f26  f7fffffe          BL       __aeabi_memclr
;;;601    									 clear();
004f2a  f7fffffe          BL       clear
;;;602      								logged=1;}			//
004f2e  2001              MOVS     r0,#1
004f30  4947              LDR      r1,|L1.20560|
004f32  6008              STR      r0,[r1,#0]  ; logged
                  |L1.20276|
;;;603    
;;;604    							
;;;605    
;;;606    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;607    	else
;;;608    	{
;;;609    		//send_chunk();
;;;610    	}		
;;;611    								
;;;612    								
;;;613    								
;;;614    	memset(data,0,strlen(data));	
004f34  4840              LDR      r0,|L1.20536|
004f36  f7fffffe          BL       strlen
004f3a  4601              MOV      r1,r0
004f3c  9001              STR      r0,[sp,#4]
004f3e  483e              LDR      r0,|L1.20536|
004f40  f7fffffe          BL       __aeabi_memclr
;;;615    	uart_putchar(UART1_BASE_PTR, 0x1A);
004f44  211a              MOVS     r1,#0x1a
004f46  4838              LDR      r0,|L1.20520|
004f48  f7fffffe          BL       uart_putchar
                  |L1.20300|
;;;616    
;;;617    while(1)
004f4c  e3fe              B        |L1.22348|
                  |L1.20302|
;;;618    {
;;;619    LED_state();
004f4e  f7fffffe          BL       LED_state
;;;620    LED_state2();
004f52  f7fffffe          BL       LED_state2
;;;621    RESET_ON; //not reset
004f56  2020              MOVS     r0,#0x20
004f58  493e              LDR      r1,|L1.20564|
004f5a  6048              STR      r0,[r1,#4]
;;;622    msg_sim800(); 
004f5c  f7fffffe          BL       msg_sim800
;;;623    	DTR_OFF;		// not sleep	
004f60  2080              MOVS     r0,#0x80
004f62  493c              LDR      r1,|L1.20564|
004f64  3140              ADDS     r1,r1,#0x40
004f66  6088              STR      r0,[r1,#8]
;;;624    	delay(200);
004f68  20c8              MOVS     r0,#0xc8
004f6a  f7fffffe          BL       delay
;;;625    
;;;626    	sleep_flag=0;
004f6e  2000              MOVS     r0,#0
004f70  4939              LDR      r1,|L1.20568|
004f72  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;627    //	if(voltagecbc<4000){breach=1;}
;;;628    //	else{breach=0;}
;;;629    	if(	(GPIOC_PDIR & 0x00000001) || (GPIOB_PDIR & 0x00000001)){
004f74  4837              LDR      r0,|L1.20564|
004f76  6900              LDR      r0,[r0,#0x10]
004f78  07c0              LSLS     r0,r0,#31
004f7a  0fc0              LSRS     r0,r0,#31
004f7c  2800              CMP      r0,#0
004f7e  d106              BNE      |L1.20366|
004f80  4834              LDR      r0,|L1.20564|
004f82  3840              SUBS     r0,r0,#0x40
004f84  6900              LDR      r0,[r0,#0x10]
004f86  07c0              LSLS     r0,r0,#31
004f88  0fc0              LSRS     r0,r0,#31
004f8a  2800              CMP      r0,#0
004f8c  d007              BEQ      |L1.20382|
                  |L1.20366|
;;;630    	DTR_OFF;sleep_flag = 0;
004f8e  2080              MOVS     r0,#0x80
004f90  4930              LDR      r1,|L1.20564|
004f92  3140              ADDS     r1,r1,#0x40
004f94  6088              STR      r0,[r1,#8]
004f96  2000              MOVS     r0,#0
004f98  492f              LDR      r1,|L1.20568|
004f9a  6008              STR      r0,[r1,#0]  ; sleep_flag
004f9c  e006              B        |L1.20396|
                  |L1.20382|
;;;631    	}
;;;632    	else{
;;;633    	DTR_ON;sleep_flag=1;
004f9e  2080              MOVS     r0,#0x80
004fa0  492c              LDR      r1,|L1.20564|
004fa2  3140              ADDS     r1,r1,#0x40
004fa4  6048              STR      r0,[r1,#4]
004fa6  2001              MOVS     r0,#1
004fa8  492b              LDR      r1,|L1.20568|
004faa  6008              STR      r0,[r1,#0]  ; sleep_flag
                  |L1.20396|
;;;634    	}
;;;635    
;;;636    	
;;;637    	
;;;638    if(rtcticks2>=1500){
004fac  482b              LDR      r0,|L1.20572|
004fae  6800              LDR      r0,[r0,#0]  ; rtcticks2
004fb0  492b              LDR      r1,|L1.20576|
004fb2  4288              CMP      r0,r1
004fb4  db7e              BLT      |L1.20660|
;;;639    	DTR_OFF;
004fb6  2080              MOVS     r0,#0x80
004fb8  4926              LDR      r1,|L1.20564|
004fba  3140              ADDS     r1,r1,#0x40
004fbc  6088              STR      r0,[r1,#8]
;;;640    //	send_modem("\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n");
;;;641    	clear();
004fbe  f7fffffe          BL       clear
;;;642    		delay(100);
004fc2  2064              MOVS     r0,#0x64
004fc4  f7fffffe          BL       delay
;;;643    
;;;644    	savecursor();
004fc8  f7fffffe          BL       savecursor
;;;645    	
;;;646    				memset(at_,0,100);
004fcc  2164              MOVS     r1,#0x64
004fce  481b              LDR      r0,|L1.20540|
004fd0  f7fffffe          BL       __aeabi_memclr
;;;647    				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004fd4  4818              LDR      r0,|L1.20536|
004fd6  f7fffffe          BL       strlen
004fda  1c40              ADDS     r0,r0,#1
004fdc  4603              MOV      r3,r0
004fde  4a18              LDR      r2,|L1.20544|
004fe0  4912              LDR      r1,|L1.20524|
004fe2  3938              SUBS     r1,r1,#0x38
004fe4  9001              STR      r0,[sp,#4]
004fe6  4815              LDR      r0,|L1.20540|
004fe8  f7fffffe          BL       __2sprintf
;;;648    				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004fec  2005              MOVS     r0,#5
004fee  4b0f              LDR      r3,|L1.20524|
004ff0  3b8c              SUBS     r3,r3,#0x8c
004ff2  461a              MOV      r2,r3
004ff4  3278              ADDS     r2,r2,#0x78
004ff6  a113              ADR      r1,|L1.20548|
004ff8  9000              STR      r0,[sp,#0]
004ffa  4810              LDR      r0,|L1.20540|
004ffc  f7fffffe          BL       send_SD
;;;649    if(strstr(uart_string_gsm,"ERROR")){
005000  490a              LDR      r1,|L1.20524|
005002  398c              SUBS     r1,r1,#0x8c
005004  480a              LDR      r0,|L1.20528|
005006  f7fffffe          BL       strstr
00500a  2800              CMP      r0,#0
00500c  d004              BEQ      |L1.20504|
;;;650    	drive[0]='C';drive[1]=':';
00500e  2043              MOVS     r0,#0x43
005010  490b              LDR      r1,|L1.20544|
005012  7008              STRB     r0,[r1,#0]
005014  203a              MOVS     r0,#0x3a
005016  7048              STRB     r0,[r1,#1]
                  |L1.20504|
;;;651    }	
;;;652    				//clear();	
;;;653    				k2=0;									//string array counter for uart 1
005018  2000              MOVS     r0,#0
00501a  490b              LDR      r1,|L1.20552|
00501c  6008              STR      r0,[r1,#0]  ; k2
;;;654    				tout=0;	
00501e  4905              LDR      r1,|L1.20532|
005020  6008              STR      r0,[r1,#0]  ; tout
;;;655    				for(k=0;k<strlen(data);k++)
005022  490a              LDR      r1,|L1.20556|
005024  6008              STR      r0,[r1,#0]  ; k
005026  e02b              B        |L1.20608|
                  |L1.20520|
                          DCD      0x4006b000
                  |L1.20524|
                          DCD      ||.text||+0x8fc
                  |L1.20528|
                          DCD      uart_string_gsm
                  |L1.20532|
                          DCD      tout
                  |L1.20536|
                          DCD      data
                  |L1.20540|
                          DCD      at_
                  |L1.20544|
                          DCD      drive
                  |L1.20548|
005044  3e00              DCB      ">",0
005046  00                DCB      0
005047  00                DCB      0
                  |L1.20552|
                          DCD      ||k2||
                  |L1.20556|
                          DCD      k
                  |L1.20560|
                          DCD      logged
                  |L1.20564|
                          DCD      0x400ff080
                  |L1.20568|
                          DCD      sleep_flag
                  |L1.20572|
                          DCD      rtcticks2
                  |L1.20576|
                          DCD      0x000005dc
                  |L1.20580|
;;;656    				{
;;;657    					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005064  48fd              LDR      r0,|L1.21596|
005066  49fe              LDR      r1,|L1.21600|
005068  6809              LDR      r1,[r1,#0]  ; k
00506a  5c40              LDRB     r0,[r0,r1]
00506c  4601              MOV      r1,r0
00506e  9001              STR      r0,[sp,#4]
005070  48fc              LDR      r0,|L1.21604|
005072  f7fffffe          BL       uart_putchar
005076  48fa              LDR      r0,|L1.21600|
005078  6800              LDR      r0,[r0,#0]            ;655  ; k
00507a  1c40              ADDS     r0,r0,#1              ;655
00507c  49f8              LDR      r1,|L1.21600|
00507e  6008              STR      r0,[r1,#0]            ;655  ; k
                  |L1.20608|
005080  48f6              LDR      r0,|L1.21596|
005082  f7fffffe          BL       strlen
005086  49f6              LDR      r1,|L1.21600|
005088  6809              LDR      r1,[r1,#0]            ;655  ; k
00508a  4288              CMP      r0,r1                 ;655
00508c  d8ea              BHI      |L1.20580|
;;;658    				}	
;;;659    				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00508e  210a              MOVS     r1,#0xa
005090  48f4              LDR      r0,|L1.21604|
005092  f7fffffe          BL       uart_putchar
005096  210a              MOVS     r1,#0xa
005098  48f2              LDR      r0,|L1.21604|
00509a  f7fffffe          BL       uart_putchar
00509e  210a              MOVS     r1,#0xa
0050a0  48f0              LDR      r0,|L1.21604|
0050a2  f7fffffe          BL       uart_putchar
0050a6  210a              MOVS     r1,#0xa
0050a8  48ee              LDR      r0,|L1.21604|
0050aa  f7fffffe          BL       uart_putchar
0050ae  210a              MOVS     r1,#0xa
0050b0  48ec              LDR      r0,|L1.21604|
0050b2  e000              B        |L1.20662|
                  |L1.20660|
0050b4  e0f4              B        |L1.21152|
                  |L1.20662|
0050b6  f7fffffe          BL       uart_putchar
0050ba  210a              MOVS     r1,#0xa
0050bc  48e9              LDR      r0,|L1.21604|
0050be  f7fffffe          BL       uart_putchar
0050c2  210a              MOVS     r1,#0xa
0050c4  48e7              LDR      r0,|L1.21604|
0050c6  f7fffffe          BL       uart_putchar
0050ca  210a              MOVS     r1,#0xa
0050cc  48e5              LDR      r0,|L1.21604|
0050ce  f7fffffe          BL       uart_putchar
0050d2  210a              MOVS     r1,#0xa
0050d4  48e3              LDR      r0,|L1.21604|
0050d6  f7fffffe          BL       uart_putchar
0050da  210a              MOVS     r1,#0xa
0050dc  48e1              LDR      r0,|L1.21604|
0050de  f7fffffe          BL       uart_putchar
0050e2  210a              MOVS     r1,#0xa
0050e4  48df              LDR      r0,|L1.21604|
0050e6  f7fffffe          BL       uart_putchar
0050ea  210a              MOVS     r1,#0xa
0050ec  48dd              LDR      r0,|L1.21604|
0050ee  f7fffffe          BL       uart_putchar
0050f2  210a              MOVS     r1,#0xa
0050f4  48db              LDR      r0,|L1.21604|
0050f6  f7fffffe          BL       uart_putchar
0050fa  210a              MOVS     r1,#0xa
0050fc  48d9              LDR      r0,|L1.21604|
0050fe  f7fffffe          BL       uart_putchar
005102  210a              MOVS     r1,#0xa
005104  48d7              LDR      r0,|L1.21604|
005106  f7fffffe          BL       uart_putchar
00510a  210a              MOVS     r1,#0xa
00510c  48d5              LDR      r0,|L1.21604|
00510e  f7fffffe          BL       uart_putchar
005112  210a              MOVS     r1,#0xa
005114  48d3              LDR      r0,|L1.21604|
005116  f7fffffe          BL       uart_putchar
00511a  210a              MOVS     r1,#0xa
00511c  48d1              LDR      r0,|L1.21604|
00511e  f7fffffe          BL       uart_putchar
005122  210a              MOVS     r1,#0xa
005124  48cf              LDR      r0,|L1.21604|
005126  f7fffffe          BL       uart_putchar
00512a  210a              MOVS     r1,#0xa
00512c  48cd              LDR      r0,|L1.21604|
00512e  f7fffffe          BL       uart_putchar
005132  210a              MOVS     r1,#0xa
005134  48cb              LDR      r0,|L1.21604|
005136  f7fffffe          BL       uart_putchar
00513a  210a              MOVS     r1,#0xa
00513c  48c9              LDR      r0,|L1.21604|
00513e  f7fffffe          BL       uart_putchar
005142  210a              MOVS     r1,#0xa
005144  48c7              LDR      r0,|L1.21604|
005146  f7fffffe          BL       uart_putchar
00514a  210a              MOVS     r1,#0xa
00514c  48c5              LDR      r0,|L1.21604|
00514e  f7fffffe          BL       uart_putchar
005152  210a              MOVS     r1,#0xa
005154  48c3              LDR      r0,|L1.21604|
005156  f7fffffe          BL       uart_putchar
00515a  210a              MOVS     r1,#0xa
00515c  48c1              LDR      r0,|L1.21604|
00515e  f7fffffe          BL       uart_putchar
005162  210a              MOVS     r1,#0xa
005164  48bf              LDR      r0,|L1.21604|
005166  f7fffffe          BL       uart_putchar
00516a  210a              MOVS     r1,#0xa
00516c  48bd              LDR      r0,|L1.21604|
00516e  f7fffffe          BL       uart_putchar
005172  210a              MOVS     r1,#0xa
005174  48bb              LDR      r0,|L1.21604|
005176  f7fffffe          BL       uart_putchar
00517a  210a              MOVS     r1,#0xa
00517c  48b9              LDR      r0,|L1.21604|
00517e  f7fffffe          BL       uart_putchar
005182  210a              MOVS     r1,#0xa
005184  48b7              LDR      r0,|L1.21604|
005186  f7fffffe          BL       uart_putchar
00518a  210a              MOVS     r1,#0xa
00518c  48b5              LDR      r0,|L1.21604|
00518e  f7fffffe          BL       uart_putchar
005192  210a              MOVS     r1,#0xa
005194  48b3              LDR      r0,|L1.21604|
005196  f7fffffe          BL       uart_putchar
00519a  210a              MOVS     r1,#0xa
00519c  48b1              LDR      r0,|L1.21604|
00519e  f7fffffe          BL       uart_putchar
0051a2  210a              MOVS     r1,#0xa
0051a4  48af              LDR      r0,|L1.21604|
0051a6  f7fffffe          BL       uart_putchar
0051aa  210a              MOVS     r1,#0xa
0051ac  48ad              LDR      r0,|L1.21604|
0051ae  f7fffffe          BL       uart_putchar
0051b2  210a              MOVS     r1,#0xa
0051b4  48ab              LDR      r0,|L1.21604|
0051b6  f7fffffe          BL       uart_putchar
0051ba  210a              MOVS     r1,#0xa
0051bc  48a9              LDR      r0,|L1.21604|
0051be  f7fffffe          BL       uart_putchar
0051c2  210a              MOVS     r1,#0xa
0051c4  48a7              LDR      r0,|L1.21604|
0051c6  f7fffffe          BL       uart_putchar
0051ca  210a              MOVS     r1,#0xa
0051cc  48a5              LDR      r0,|L1.21604|
0051ce  f7fffffe          BL       uart_putchar
0051d2  210a              MOVS     r1,#0xa
0051d4  48a3              LDR      r0,|L1.21604|
0051d6  f7fffffe          BL       uart_putchar
0051da  210a              MOVS     r1,#0xa
0051dc  48a1              LDR      r0,|L1.21604|
0051de  f7fffffe          BL       uart_putchar
0051e2  210a              MOVS     r1,#0xa
0051e4  489f              LDR      r0,|L1.21604|
0051e6  f7fffffe          BL       uart_putchar
0051ea  210a              MOVS     r1,#0xa
0051ec  489d              LDR      r0,|L1.21604|
0051ee  f7fffffe          BL       uart_putchar
0051f2  210a              MOVS     r1,#0xa
0051f4  489b              LDR      r0,|L1.21604|
0051f6  f7fffffe          BL       uart_putchar
0051fa  210a              MOVS     r1,#0xa
0051fc  4899              LDR      r0,|L1.21604|
0051fe  f7fffffe          BL       uart_putchar
005202  210a              MOVS     r1,#0xa
005204  4897              LDR      r0,|L1.21604|
005206  f7fffffe          BL       uart_putchar
00520a  210a              MOVS     r1,#0xa
00520c  4895              LDR      r0,|L1.21604|
00520e  f7fffffe          BL       uart_putchar
005212  210a              MOVS     r1,#0xa
005214  4893              LDR      r0,|L1.21604|
005216  f7fffffe          BL       uart_putchar
00521a  210a              MOVS     r1,#0xa
00521c  4891              LDR      r0,|L1.21604|
00521e  f7fffffe          BL       uart_putchar
005222  210a              MOVS     r1,#0xa
005224  488f              LDR      r0,|L1.21604|
005226  f7fffffe          BL       uart_putchar
00522a  210a              MOVS     r1,#0xa
00522c  488d              LDR      r0,|L1.21604|
00522e  f7fffffe          BL       uart_putchar
005232  210a              MOVS     r1,#0xa
005234  488b              LDR      r0,|L1.21604|
005236  f7fffffe          BL       uart_putchar
00523a  210a              MOVS     r1,#0xa
00523c  4889              LDR      r0,|L1.21604|
00523e  f7fffffe          BL       uart_putchar
005242  210a              MOVS     r1,#0xa
005244  4887              LDR      r0,|L1.21604|
005246  f7fffffe          BL       uart_putchar
00524a  210a              MOVS     r1,#0xa
00524c  4885              LDR      r0,|L1.21604|
00524e  f7fffffe          BL       uart_putchar
005252  210a              MOVS     r1,#0xa
005254  4883              LDR      r0,|L1.21604|
005256  f7fffffe          BL       uart_putchar
;;;660    				//memset(data,0,1000);
;;;661    				//timer counts to wait for characters in uart 1 									
;;;662    				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00525a  bf00              NOP      
                  |L1.21084|
00525c  4982              LDR      r1,|L1.21608|
00525e  4883              LDR      r0,|L1.21612|
005260  f7fffffe          BL       strstr
005264  2800              CMP      r0,#0
005266  d10a              BNE      |L1.21118|
005268  497f              LDR      r1,|L1.21608|
00526a  398c              SUBS     r1,r1,#0x8c
00526c  487f              LDR      r0,|L1.21612|
00526e  f7fffffe          BL       strstr
005272  2800              CMP      r0,#0
005274  d103              BNE      |L1.21118|
005276  487e              LDR      r0,|L1.21616|
005278  6800              LDR      r0,[r0,#0]  ; tout
00527a  2805              CMP      r0,#5
00527c  ddee              BLE      |L1.21084|
                  |L1.21118|
;;;663    				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;664    				}
;;;665    				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;666    				//memset(data,0,strlen(data));
;;;667    				//clear();
;;;668    	RESET_OFF;
00527e  2020              MOVS     r0,#0x20
005280  497c              LDR      r1,|L1.21620|
005282  6088              STR      r0,[r1,#8]
;;;669    	RESET_OFF;
005284  6088              STR      r0,[r1,#8]
;;;670    	delay(100);	
005286  2064              MOVS     r0,#0x64
005288  f7fffffe          BL       delay
;;;671    	RESET_ON;
00528c  2020              MOVS     r0,#0x20
00528e  4979              LDR      r1,|L1.21620|
005290  6048              STR      r0,[r1,#4]
;;;672    	RESET_ON;	
005292  6048              STR      r0,[r1,#4]
;;;673    	delay(100);
005294  2064              MOVS     r0,#0x64
005296  f7fffffe          BL       delay
;;;674    	rtcticks2 =0;
00529a  2000              MOVS     r0,#0
00529c  4976              LDR      r1,|L1.21624|
00529e  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.21152|
;;;675    
;;;676    	}//3600	
;;;677    memset(at_,0,100);
0052a0  2164              MOVS     r1,#0x64
0052a2  4876              LDR      r0,|L1.21628|
0052a4  f7fffffe          BL       __aeabi_memclr
;;;678    sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>         \n \n\n\r\n",aliveping,k5,rtcticks2);							
0052a8  4873              LDR      r0,|L1.21624|
0052aa  6800              LDR      r0,[r0,#0]  ; rtcticks2
0052ac  9000              STR      r0,[sp,#0]
0052ae  4874              LDR      r0,|L1.21632|
0052b0  6803              LDR      r3,[r0,#0]  ; k5
0052b2  4874              LDR      r0,|L1.21636|
0052b4  a174              ADR      r1,|L1.21640|
0052b6  6802              LDR      r2,[r0,#0]  ; aliveping
0052b8  4870              LDR      r0,|L1.21628|
0052ba  f7fffffe          BL       __2sprintf
;;;679    //send_modem(at_);
;;;680    //send_modem(num2);	
;;;681    	
;;;682    	
;;;683    if	((sleep_flag != 1  || (aliveping > 5) ) )			
0052be  4880              LDR      r0,|L1.21696|
0052c0  6800              LDR      r0,[r0,#0]  ; sleep_flag
0052c2  2801              CMP      r0,#1
0052c4  d104              BNE      |L1.21200|
0052c6  486f              LDR      r0,|L1.21636|
0052c8  6800              LDR      r0,[r0,#0]  ; aliveping
0052ca  2805              CMP      r0,#5
0052cc  dc00              BGT      |L1.21200|
0052ce  e63d              B        |L1.20300|
                  |L1.21200|
;;;684    {
;;;685    	DTR_OFF;
0052d0  2080              MOVS     r0,#0x80
0052d2  4968              LDR      r1,|L1.21620|
0052d4  3140              ADDS     r1,r1,#0x40
0052d6  6088              STR      r0,[r1,#8]
;;;686    	sleep_flag=0;
0052d8  2000              MOVS     r0,#0
0052da  4979              LDR      r1,|L1.21696|
0052dc  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;687    	send_GSM("\r\nAT+CSQ\r\n", "OK", "ERROR" , "DEACT",tmeout);		
0052de  4879              LDR      r0,|L1.21700|
0052e0  6800              LDR      r0,[r0,#0]  ; tmeout
0052e2  4b61              LDR      r3,|L1.21608|
0052e4  3b70              SUBS     r3,r3,#0x70
0052e6  461a              MOV      r2,r3
0052e8  3a1c              SUBS     r2,r2,#0x1c
0052ea  a177              ADR      r1,|L1.21704|
0052ec  9000              STR      r0,[sp,#0]
0052ee  a077              ADR      r0,|L1.21708|
0052f0  f7fffffe          BL       send_GSM
;;;688    	send_GSM("\r\nAT+CIPCLOSE\r\n", "CLOSE OK", "ERROR" , "ERROR:",tmeout);		
0052f4  4873              LDR      r0,|L1.21700|
0052f6  6800              LDR      r0,[r0,#0]  ; tmeout
0052f8  4b77              LDR      r3,|L1.21720|
0052fa  4a5b              LDR      r2,|L1.21608|
0052fc  3a8c              SUBS     r2,r2,#0x8c
0052fe  a177              ADR      r1,|L1.21724|
005300  9000              STR      r0,[sp,#0]
005302  a079              ADR      r0,|L1.21736|
005304  f7fffffe          BL       send_GSM
;;;689    	memset(at_,0,100);
005308  2164              MOVS     r1,#0x64
00530a  485c              LDR      r0,|L1.21628|
00530c  f7fffffe          BL       __aeabi_memclr
;;;690    	memset(data,0,strlen(data));
005310  4852              LDR      r0,|L1.21596|
005312  f7fffffe          BL       strlen
005316  4601              MOV      r1,r0
005318  9001              STR      r0,[sp,#4]
00531a  4850              LDR      r0,|L1.21596|
00531c  f7fffffe          BL       __aeabi_memclr
;;;691    
;;;692    	GPS_COLLECT();	
005320  f7fffffe          BL       GPS_COLLECT
;;;693    	
;;;694    	if((aliveping>5))	
005324  4857              LDR      r0,|L1.21636|
005326  6800              LDR      r0,[r0,#0]  ; aliveping
005328  2805              CMP      r0,#5
00532a  dd6e              BLE      |L1.21514|
;;;695    	{
;;;696    			memset(ignstr,0,2);
00532c  4872              LDR      r0,|L1.21752|
00532e  2100              MOVS     r1,#0
005330  7001              STRB     r1,[r0,#0]
005332  7041              STRB     r1,[r0,#1]
;;;697    if(GPIOB_PDIR & 0x00000001){
005334  484f              LDR      r0,|L1.21620|
005336  3840              SUBS     r0,r0,#0x40
005338  6900              LDR      r0,[r0,#0x10]
00533a  07c0              LSLS     r0,r0,#31
00533c  0fc0              LSRS     r0,r0,#31
00533e  2800              CMP      r0,#0
005340  d007              BEQ      |L1.21330|
;;;698    			sprintf(ignstr,"%d,%ld",1,rtcticks2);
005342  484d              LDR      r0,|L1.21624|
005344  2201              MOVS     r2,#1
005346  a16d              ADR      r1,|L1.21756|
005348  6803              LDR      r3,[r0,#0]  ; rtcticks2
00534a  486b              LDR      r0,|L1.21752|
00534c  f7fffffe          BL       __2sprintf
005350  e006              B        |L1.21344|
                  |L1.21330|
;;;699    }
;;;700    else{
;;;701    				sprintf(ignstr,"%d,%ld",0,rtcticks2);
005352  4849              LDR      r0,|L1.21624|
005354  2200              MOVS     r2,#0
005356  a169              ADR      r1,|L1.21756|
005358  6803              LDR      r3,[r0,#0]  ; rtcticks2
00535a  4867              LDR      r0,|L1.21752|
00535c  f7fffffe          BL       __2sprintf
                  |L1.21344|
;;;702    
;;;703    }
;;;704    
;;;705    	adc_read(9);							
005360  2009              MOVS     r0,#9
005362  f7fffffe          BL       adc_read
;;;706    	memset(fuelstr,0,5);
005366  2105              MOVS     r1,#5
005368  4866              LDR      r0,|L1.21764|
00536a  f7fffffe          BL       __aeabi_memclr4
;;;707    	sprintf(fuelstr,"%d,",fuel);
00536e  4866              LDR      r0,|L1.21768|
005370  a166              ADR      r1,|L1.21772|
005372  6802              LDR      r2,[r0,#0]  ; fuel
005374  4863              LDR      r0,|L1.21764|
005376  f7fffffe          BL       __2sprintf
;;;708    	memset(acstr,0,2); //ptb2
00537a  4865              LDR      r0,|L1.21776|
00537c  2100              MOVS     r1,#0
00537e  8001              STRH     r1,[r0,#0]
;;;709    if(GPIOB_PDIR & 0x00000004){
005380  483c              LDR      r0,|L1.21620|
005382  3840              SUBS     r0,r0,#0x40
005384  6900              LDR      r0,[r0,#0x10]
005386  2104              MOVS     r1,#4
005388  4008              ANDS     r0,r0,r1
00538a  2800              CMP      r0,#0
00538c  d005              BEQ      |L1.21402|
;;;710    			sprintf(acstr,"%d",1);
00538e  2201              MOVS     r2,#1
005390  a160              ADR      r1,|L1.21780|
005392  485f              LDR      r0,|L1.21776|
005394  f7fffffe          BL       __2sprintf
005398  e004              B        |L1.21412|
                  |L1.21402|
;;;711    }
;;;712    else{
;;;713    				sprintf(acstr,"%d",0);
00539a  2200              MOVS     r2,#0
00539c  a15d              ADR      r1,|L1.21780|
00539e  485c              LDR      r0,|L1.21776|
0053a0  f7fffffe          BL       __2sprintf
                  |L1.21412|
;;;714    
;;;715    }
;;;716    
;;;717    		
;;;718    		aliveping=0;
0053a4  2000              MOVS     r0,#0
0053a6  4937              LDR      r1,|L1.21636|
0053a8  6008              STR      r0,[r1,#0]  ; aliveping
;;;719    		memset(data,0,strlen(data));	
0053aa  482c              LDR      r0,|L1.21596|
0053ac  f7fffffe          BL       strlen
0053b0  4601              MOV      r1,r0
0053b2  9001              STR      r0,[sp,#4]
0053b4  4829              LDR      r0,|L1.21596|
0053b6  f7fffffe          BL       __aeabi_memclr
;;;720    		strcat(data,imei);strcat(data,",ALIVE,");strcat(data,num2);strcat(data,",F=");strcat(data,fuelstr);		strcat(data,",AC=");	
0053ba  4957              LDR      r1,|L1.21784|
0053bc  4827              LDR      r0,|L1.21596|
0053be  f7fffffe          BL       strcat
0053c2  a156              ADR      r1,|L1.21788|
0053c4  4825              LDR      r0,|L1.21596|
0053c6  f7fffffe          BL       strcat
0053ca  4956              LDR      r1,|L1.21796|
0053cc  4823              LDR      r0,|L1.21596|
0053ce  f7fffffe          BL       strcat
0053d2  a155              ADR      r1,|L1.21800|
0053d4  4821              LDR      r0,|L1.21596|
0053d6  f7fffffe          BL       strcat
0053da  494a              LDR      r1,|L1.21764|
0053dc  481f              LDR      r0,|L1.21596|
0053de  f7fffffe          BL       strcat
0053e2  a152              ADR      r1,|L1.21804|
0053e4  481d              LDR      r0,|L1.21596|
0053e6  f7fffffe          BL       strcat
;;;721    		strcat(data,acstr);
0053ea  4949              LDR      r1,|L1.21776|
0053ec  481b              LDR      r0,|L1.21596|
0053ee  f7fffffe          BL       strcat
;;;722    		strcat(data,",I=");	
0053f2  a150              ADR      r1,|L1.21812|
0053f4  4819              LDR      r0,|L1.21596|
0053f6  f7fffffe          BL       strcat
;;;723    		strcat(data,ignstr);strcat(data,",\n\n\n"); 
0053fa  493f              LDR      r1,|L1.21752|
0053fc  4817              LDR      r0,|L1.21596|
0053fe  f7fffffe          BL       strcat
005402  a14d              ADR      r1,|L1.21816|
005404  4815              LDR      r0,|L1.21596|
005406  f7fffffe          BL       strcat
                  |L1.21514|
;;;724    	}	
;;;725    
;;;726    	msg_sim800(); 
00540a  f7fffffe          BL       msg_sim800
;;;727    	
;;;728    		sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
00540e  4b4c              LDR      r3,|L1.21824|
005410  4a4c              LDR      r2,|L1.21828|
005412  4931              LDR      r1,|L1.21720|
005414  3160              ADDS     r1,r1,#0x60
005416  4819              LDR      r0,|L1.21628|
005418  f7fffffe          BL       __2sprintf
;;;729    		send_GSM( at_ , "CONNECT", "ERROR" , "ERROR\r\n",tmeout);	
00541c  4829              LDR      r0,|L1.21700|
00541e  6800              LDR      r0,[r0,#0]  ; tmeout
005420  4b11              LDR      r3,|L1.21608|
005422  3b14              SUBS     r3,r3,#0x14
005424  461a              MOV      r2,r3
005426  3a78              SUBS     r2,r2,#0x78
005428  492b              LDR      r1,|L1.21720|
00542a  3180              ADDS     r1,r1,#0x80
00542c  9000              STR      r0,[sp,#0]
00542e  4813              LDR      r0,|L1.21628|
005430  f7fffffe          BL       send_GSM
;;;730    		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);	
005434  4823              LDR      r0,|L1.21700|
005436  6800              LDR      r0,[r0,#0]  ; tmeout
005438  4b27              LDR      r3,|L1.21720|
00543a  3388              ADDS     r3,r3,#0x88
00543c  4a0a              LDR      r2,|L1.21608|
00543e  3a8c              SUBS     r2,r2,#0x8c
005440  a141              ADR      r1,|L1.21832|
005442  9000              STR      r0,[sp,#0]
005444  4618              MOV      r0,r3
005446  3010              ADDS     r0,r0,#0x10
005448  f7fffffe          BL       send_GSM
;;;731    		memset(stcond1,0,strlen(stcond1));
00544c  483f              LDR      r0,|L1.21836|
00544e  6800              LDR      r0,[r0,#0]  ; stcond1
005450  f7fffffe          BL       strlen
005454  4601              MOV      r1,r0
005456  9001              STR      r0,[sp,#4]
005458  483c              LDR      r0,|L1.21836|
00545a  e079              B        |L1.21840|
                  |L1.21596|
                          DCD      data
                  |L1.21600|
                          DCD      k
                  |L1.21604|
                          DCD      0x4006b000
                  |L1.21608|
                          DCD      ||.text||+0x8fc
                  |L1.21612|
                          DCD      uart_string_gsm
                  |L1.21616|
                          DCD      tout
                  |L1.21620|
                          DCD      0x400ff080
                  |L1.21624|
                          DCD      rtcticks2
                  |L1.21628|
                          DCD      at_
                  |L1.21632|
                          DCD      ||k5||
                  |L1.21636|
                          DCD      aliveping
                  |L1.21640|
005488  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>         \n \n"
00548c  20202020
005490  20202020
005494  20202020
005498  20203c25
00549c  643e2020
0054a0  203c2564
0054a4  3e202020
0054a8  3c3d2564
0054ac  3e202020
0054b0  20202020
0054b4  20200a20
0054b8  0a      
0054b9  0a0d0a00          DCB      "\n\r\n",0
0054bd  00                DCB      0
0054be  00                DCB      0
0054bf  00                DCB      0
                  |L1.21696|
                          DCD      sleep_flag
                  |L1.21700|
                          DCD      tmeout
                  |L1.21704|
0054c8  4f4b00            DCB      "OK",0
0054cb  00                DCB      0
                  |L1.21708|
0054cc  0d0a4154          DCB      "\r\nAT+CSQ\r\n",0
0054d0  2b435351
0054d4  0d0a00  
0054d7  00                DCB      0
                  |L1.21720|
                          DCD      ||.text||+0xd54
                  |L1.21724|
0054dc  434c4f53          DCB      "CLOSE OK",0
0054e0  45204f4b
0054e4  00      
0054e5  00                DCB      0
0054e6  00                DCB      0
0054e7  00                DCB      0
                  |L1.21736|
0054e8  0d0a4154          DCB      "\r\nAT+CIPCLOSE\r\n",0
0054ec  2b434950
0054f0  434c4f53
0054f4  450d0a00
                  |L1.21752|
                          DCD      ignstr
                  |L1.21756|
0054fc  25642c25          DCB      "%d,%ld",0
005500  6c6400  
005503  00                DCB      0
                  |L1.21764|
                          DCD      fuelstr
                  |L1.21768|
                          DCD      fuel
                  |L1.21772|
00550c  25642c00          DCB      "%d,",0
                  |L1.21776|
                          DCD      acstr
                  |L1.21780|
005514  256400            DCB      "%d",0
005517  00                DCB      0
                  |L1.21784|
                          DCD      imei
                  |L1.21788|
00551c  2c414c49          DCB      ",ALIVE,",0
005520  56452c00
                  |L1.21796|
                          DCD      num2
                  |L1.21800|
005528  2c463d00          DCB      ",F=",0
                  |L1.21804|
00552c  2c41433d          DCB      ",AC=",0
005530  00      
005531  00                DCB      0
005532  00                DCB      0
005533  00                DCB      0
                  |L1.21812|
005534  2c493d00          DCB      ",I=",0
                  |L1.21816|
005538  2c0a0a0a          DCB      ",\n\n\n",0
00553c  00      
00553d  00                DCB      0
00553e  00                DCB      0
00553f  00                DCB      0
                  |L1.21824|
                          DCD      port
                  |L1.21828|
                          DCD      ||ip||
                  |L1.21832|
005548  3e00              DCB      ">",0
00554a  00                DCB      0
00554b  00                DCB      0
                  |L1.21836|
                          DCD      stcond1
                  |L1.21840|
005550  6800              LDR      r0,[r0,#0]  ; stcond1
005552  f7fffffe          BL       __aeabi_memclr
;;;732    		memset(stcond2,0,strlen(stcond2));	
005556  48fe              LDR      r0,|L1.22864|
005558  6800              LDR      r0,[r0,#0]  ; stcond2
00555a  f7fffffe          BL       strlen
00555e  4601              MOV      r1,r0
005560  9001              STR      r0,[sp,#4]
005562  48fb              LDR      r0,|L1.22864|
005564  6800              LDR      r0,[r0,#0]  ; stcond2
005566  f7fffffe          BL       __aeabi_memclr
;;;733    		memset(stcond3,0,strlen(stcond3));	
00556a  48fa              LDR      r0,|L1.22868|
00556c  6800              LDR      r0,[r0,#0]  ; stcond3
00556e  f7fffffe          BL       strlen
005572  4601              MOV      r1,r0
005574  9001              STR      r0,[sp,#4]
005576  48f7              LDR      r0,|L1.22868|
005578  6800              LDR      r0,[r0,#0]  ; stcond3
00557a  f7fffffe          BL       __aeabi_memclr
;;;734    		memset(stcond4,0,strlen(stcond4));	
00557e  48f6              LDR      r0,|L1.22872|
005580  6800              LDR      r0,[r0,#0]  ; stcond4
005582  f7fffffe          BL       strlen
005586  4601              MOV      r1,r0
005588  9001              STR      r0,[sp,#4]
00558a  48f3              LDR      r0,|L1.22872|
00558c  6800              LDR      r0,[r0,#0]  ; stcond4
00558e  f7fffffe          BL       __aeabi_memclr
;;;735    		memset(con1d,0,strlen(con1d));	
005592  48f2              LDR      r0,|L1.22876|
005594  6800              LDR      r0,[r0,#0]  ; con1d
005596  f7fffffe          BL       strlen
00559a  4601              MOV      r1,r0
00559c  9001              STR      r0,[sp,#4]
00559e  48ef              LDR      r0,|L1.22876|
0055a0  6800              LDR      r0,[r0,#0]  ; con1d
0055a2  f7fffffe          BL       __aeabi_memclr
;;;736    		cond=0;
0055a6  2000              MOVS     r0,#0
0055a8  49ed              LDR      r1,|L1.22880|
0055aa  7008              STRB     r0,[r1,#0]
;;;737    								cond=mystrstr(uart_string_gsm,'>');
0055ac  213e              MOVS     r1,#0x3e
0055ae  48ed              LDR      r0,|L1.22884|
0055b0  f7fffffe          BL       mystrstr
0055b4  49ea              LDR      r1,|L1.22880|
0055b6  7008              STRB     r0,[r1,#0]
;;;738    	
;;;739    								if(cond)	
0055b8  4608              MOV      r0,r1
0055ba  7800              LDRB     r0,[r0,#0]  ; cond
0055bc  2800              CMP      r0,#0
0055be  d07d              BEQ      |L1.22204|
;;;740    								{		
;;;741    									clear();
0055c0  f7fffffe          BL       clear
;;;742    									memset(uart_string_gsm,0,5000);
0055c4  49e8              LDR      r1,|L1.22888|
0055c6  48e7              LDR      r0,|L1.22884|
0055c8  f7fffffe          BL       __aeabi_memclr
;;;743    									strcat(data,"\n\n");
0055cc  a1e7              ADR      r1,|L1.22892|
0055ce  48e8              LDR      r0,|L1.22896|
0055d0  f7fffffe          BL       strcat
;;;744    									len=strlen(data);
0055d4  48e6              LDR      r0,|L1.22896|
0055d6  f7fffffe          BL       strlen
0055da  49e6              LDR      r1,|L1.22900|
0055dc  6008              STR      r0,[r1,#0]  ; len
;;;745    									tout=0;
0055de  2000              MOVS     r0,#0
0055e0  49e5              LDR      r1,|L1.22904|
0055e2  6008              STR      r0,[r1,#0]  ; tout
;;;746    									k2=0;
0055e4  49e5              LDR      r1,|L1.22908|
0055e6  6008              STR      r0,[r1,#0]  ; k2
;;;747    									for(k=0;k<len;k++)
0055e8  49e5              LDR      r1,|L1.22912|
0055ea  6008              STR      r0,[r1,#0]  ; k
0055ec  e00d              B        |L1.22026|
                  |L1.21998|
;;;748    									{
;;;749    										uart_putchar(UART1_BASE_PTR, data[k]);
0055ee  48e0              LDR      r0,|L1.22896|
0055f0  49e3              LDR      r1,|L1.22912|
0055f2  6809              LDR      r1,[r1,#0]  ; k
0055f4  5c40              LDRB     r0,[r0,r1]
0055f6  4601              MOV      r1,r0
0055f8  9001              STR      r0,[sp,#4]
0055fa  48e2              LDR      r0,|L1.22916|
0055fc  f7fffffe          BL       uart_putchar
005600  48df              LDR      r0,|L1.22912|
005602  6800              LDR      r0,[r0,#0]            ;747  ; k
005604  1c40              ADDS     r0,r0,#1              ;747
005606  49de              LDR      r1,|L1.22912|
005608  6008              STR      r0,[r1,#0]            ;747  ; k
                  |L1.22026|
00560a  48dd              LDR      r0,|L1.22912|
00560c  6800              LDR      r0,[r0,#0]            ;747  ; k
00560e  49d9              LDR      r1,|L1.22900|
005610  6809              LDR      r1,[r1,#0]            ;747  ; len
005612  4288              CMP      r0,r1                 ;747
005614  dbeb              BLT      |L1.21998|
;;;750    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005616  210a              MOVS     r1,#0xa
005618  48da              LDR      r0,|L1.22916|
00561a  f7fffffe          BL       uart_putchar
00561e  211a              MOVS     r1,#0x1a
005620  48d8              LDR      r0,|L1.22916|
005622  f7fffffe          BL       uart_putchar
005626  211a              MOVS     r1,#0x1a
005628  48d6              LDR      r0,|L1.22916|
00562a  f7fffffe          BL       uart_putchar
00562e  211a              MOVS     r1,#0x1a
005630  48d4              LDR      r0,|L1.22916|
005632  f7fffffe          BL       uart_putchar
005636  211a              MOVS     r1,#0x1a
005638  48d2              LDR      r0,|L1.22916|
00563a  f7fffffe          BL       uart_putchar
00563e  211a              MOVS     r1,#0x1a
005640  48d0              LDR      r0,|L1.22916|
005642  f7fffffe          BL       uart_putchar
;;;751    									do
005646  bf00              NOP      
                  |L1.22088|
;;;752    																{stcond1=strstr(uart_string_gsm,"SEND OK");
005648  49cf              LDR      r1,|L1.22920|
00564a  48c6              LDR      r0,|L1.22884|
00564c  f7fffffe          BL       strstr
005650  49ce              LDR      r1,|L1.22924|
005652  6008              STR      r0,[r1,#0]  ; stcond1
;;;753    																	stcond2=strstr(uart_string_gsm, "ERROR");
005654  49ce              LDR      r1,|L1.22928|
005656  48c3              LDR      r0,|L1.22884|
005658  f7fffffe          BL       strstr
00565c  49bc              LDR      r1,|L1.22864|
00565e  6008              STR      r0,[r1,#0]  ; stcond2
;;;754    																		stcond3=strstr(uart_string_gsm, "FAIL");	
005660  49cc              LDR      r1,|L1.22932|
005662  48c0              LDR      r0,|L1.22884|
005664  f7fffffe          BL       strstr
005668  49ba              LDR      r1,|L1.22868|
00566a  6008              STR      r0,[r1,#0]  ; stcond3
;;;755    																			stcond4=strstr(uart_string_gsm, "DEACT");	
00566c  49c8              LDR      r1,|L1.22928|
00566e  311c              ADDS     r1,r1,#0x1c
005670  48bc              LDR      r0,|L1.22884|
005672  f7fffffe          BL       strstr
005676  49b8              LDR      r1,|L1.22872|
005678  6008              STR      r0,[r1,#0]  ; stcond4
;;;756    																	
;;;757    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
00567a  48b5              LDR      r0,|L1.22864|
00567c  6800              LDR      r0,[r0,#0]  ; stcond2
00567e  2800              CMP      r0,#0
005680  d10f              BNE      |L1.22178|
005682  48b4              LDR      r0,|L1.22868|
005684  6800              LDR      r0,[r0,#0]  ; stcond3
005686  2800              CMP      r0,#0
005688  d10b              BNE      |L1.22178|
00568a  4608              MOV      r0,r1
00568c  6800              LDR      r0,[r0,#0]  ; stcond4
00568e  2800              CMP      r0,#0
005690  d107              BNE      |L1.22178|
005692  48be              LDR      r0,|L1.22924|
005694  6800              LDR      r0,[r0,#0]  ; stcond1
005696  2800              CMP      r0,#0
005698  d103              BNE      |L1.22178|
00569a  48b7              LDR      r0,|L1.22904|
00569c  6800              LDR      r0,[r0,#0]  ; tout
00569e  2808              CMP      r0,#8
0056a0  ddd2              BLE      |L1.22088|
                  |L1.22178|
;;;758    																//delay(10);clear();
;;;759    														uart_putchar(UART1_BASE_PTR,0x1A);
0056a2  211a              MOVS     r1,#0x1a
0056a4  48b7              LDR      r0,|L1.22916|
0056a6  f7fffffe          BL       uart_putchar
;;;760    												//delay(10);
;;;761    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0056aa  211a              MOVS     r1,#0x1a
0056ac  48b5              LDR      r0,|L1.22916|
0056ae  f7fffffe          BL       uart_putchar
0056b2  211a              MOVS     r1,#0x1a
0056b4  48b3              LDR      r0,|L1.22916|
0056b6  f7fffffe          BL       uart_putchar
0056ba  e000              B        |L1.22206|
                  |L1.22204|
0056bc  e00c              B        |L1.22232|
                  |L1.22206|
0056be  211a              MOVS     r1,#0x1a
0056c0  48b0              LDR      r0,|L1.22916|
0056c2  f7fffffe          BL       uart_putchar
;;;762    								
;;;763    									delay(20);															
0056c6  2014              MOVS     r0,#0x14
0056c8  f7fffffe          BL       delay
;;;764    									stcond1=strstr(uart_string_gsm,"SEND OK"); 
0056cc  49ae              LDR      r1,|L1.22920|
0056ce  48a5              LDR      r0,|L1.22884|
0056d0  f7fffffe          BL       strstr
0056d4  49ad              LDR      r1,|L1.22924|
0056d6  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.22232|
;;;765    								}else{}
;;;766    stcond1=strstr(uart_string_gsm,"SEND OK"); 
0056d8  49ab              LDR      r1,|L1.22920|
0056da  48a2              LDR      r0,|L1.22884|
0056dc  f7fffffe          BL       strstr
0056e0  49aa              LDR      r1,|L1.22924|
0056e2  6008              STR      r0,[r1,#0]  ; stcond1
;;;767    //checks for send ok
;;;768    if(!(stcond1) == 1 ) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
0056e4  4608              MOV      r0,r1
0056e6  6800              LDR      r0,[r0,#0]  ; stcond1
0056e8  2800              CMP      r0,#0
0056ea  d101              BNE      |L1.22256|
0056ec  2001              MOVS     r0,#1
0056ee  e000              B        |L1.22258|
                  |L1.22256|
0056f0  2000              MOVS     r0,#0
                  |L1.22258|
0056f2  2801              CMP      r0,#1
0056f4  d001              BEQ      |L1.22266|
0056f6  f000fe4c          BL       |L1.25490|
                  |L1.22266|
;;;769    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0056fa  211a              MOVS     r1,#0x1a
0056fc  48a1              LDR      r0,|L1.22916|
0056fe  f7fffffe          BL       uart_putchar
005702  f7fffffe          BL       clear
005706  200a              MOVS     r0,#0xa
005708  f7fffffe          BL       delay
;;;770    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00570c  211a              MOVS     r1,#0x1a
00570e  489d              LDR      r0,|L1.22916|
005710  f7fffffe          BL       uart_putchar
005714  f7fffffe          BL       clear
005718  200a              MOVS     r0,#0xa
00571a  f7fffffe          BL       delay
;;;771    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00571e  211a              MOVS     r1,#0x1a
005720  4898              LDR      r0,|L1.22916|
005722  f7fffffe          BL       uart_putchar
005726  f7fffffe          BL       clear
00572a  200a              MOVS     r0,#0xa
00572c  f7fffffe          BL       delay
;;;772    									remove_all_chars(data, '\n', '\n');
005730  220a              MOVS     r2,#0xa
005732  4611              MOV      r1,r2
005734  488e              LDR      r0,|L1.22896|
005736  f7fffffe          BL       remove_all_chars
;;;773    									strcat(data,"CH\n");	
00573a  4995              LDR      r1,|L1.22928|
00573c  3148              ADDS     r1,r1,#0x48
00573e  488c              LDR      r0,|L1.22896|
005740  f7fffffe          BL       strcat
;;;774    									delay(100);
005744  2064              MOVS     r0,#0x64
005746  f7fffffe          BL       delay
;;;775    									clear();//memset(uart_string_gsm,0,5000);
00574a  e000              B        |L1.22350|
                  |L1.22348|
00574c  e3ed              B        |L1.24362|
                  |L1.22350|
00574e  f7fffffe          BL       clear
;;;776    									memset(at_,0,100);
005752  2164              MOVS     r1,#0x64
005754  4890              LDR      r0,|L1.22936|
005756  f7fffffe          BL       __aeabi_memclr
;;;777    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00575a  4885              LDR      r0,|L1.22896|
00575c  f7fffffe          BL       strlen
005760  1c40              ADDS     r0,r0,#1
005762  4603              MOV      r3,r0
005764  4a8d              LDR      r2,|L1.22940|
005766  498a              LDR      r1,|L1.22928|
005768  3154              ADDS     r1,r1,#0x54
00576a  9001              STR      r0,[sp,#4]
00576c  488a              LDR      r0,|L1.22936|
00576e  f7fffffe          BL       __2sprintf
;;;778    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005772  2005              MOVS     r0,#5
005774  4b86              LDR      r3,|L1.22928|
005776  461a              MOV      r2,r3
005778  3278              ADDS     r2,r2,#0x78
00577a  a189              ADR      r1,|L1.22944|
00577c  9000              STR      r0,[sp,#0]
00577e  4886              LDR      r0,|L1.22936|
005780  f7fffffe          BL       send_SD
;;;779    if(strstr(uart_string_gsm,"ERROR")){
005784  4982              LDR      r1,|L1.22928|
005786  4877              LDR      r0,|L1.22884|
005788  f7fffffe          BL       strstr
00578c  2800              CMP      r0,#0
00578e  d004              BEQ      |L1.22426|
;;;780    	drive[0]='C';drive[1]=':';
005790  2043              MOVS     r0,#0x43
005792  4982              LDR      r1,|L1.22940|
005794  7008              STRB     r0,[r1,#0]
005796  203a              MOVS     r0,#0x3a
005798  7048              STRB     r0,[r1,#1]
                  |L1.22426|
;;;781    }	
;;;782    									clear();	
00579a  f7fffffe          BL       clear
;;;783    									k2=0;									//string array counter for uart 1
00579e  2000              MOVS     r0,#0
0057a0  4976              LDR      r1,|L1.22908|
0057a2  6008              STR      r0,[r1,#0]  ; k2
;;;784    									tout=0;	
0057a4  4974              LDR      r1,|L1.22904|
0057a6  6008              STR      r0,[r1,#0]  ; tout
;;;785    									for(k=0;k<strlen(data);k++)
0057a8  4975              LDR      r1,|L1.22912|
0057aa  6008              STR      r0,[r1,#0]  ; k
0057ac  e00d              B        |L1.22474|
                  |L1.22446|
;;;786    									{
;;;787    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0057ae  4870              LDR      r0,|L1.22896|
0057b0  4973              LDR      r1,|L1.22912|
0057b2  6809              LDR      r1,[r1,#0]  ; k
0057b4  5c40              LDRB     r0,[r0,r1]
0057b6  4601              MOV      r1,r0
0057b8  9001              STR      r0,[sp,#4]
0057ba  4872              LDR      r0,|L1.22916|
0057bc  f7fffffe          BL       uart_putchar
0057c0  486f              LDR      r0,|L1.22912|
0057c2  6800              LDR      r0,[r0,#0]            ;785  ; k
0057c4  1c40              ADDS     r0,r0,#1              ;785
0057c6  496e              LDR      r1,|L1.22912|
0057c8  6008              STR      r0,[r1,#0]            ;785  ; k
                  |L1.22474|
0057ca  4869              LDR      r0,|L1.22896|
0057cc  f7fffffe          BL       strlen
0057d0  496b              LDR      r1,|L1.22912|
0057d2  6809              LDR      r1,[r1,#0]            ;785  ; k
0057d4  4288              CMP      r0,r1                 ;785
0057d6  d8ea              BHI      |L1.22446|
;;;788    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
0057d8  210a              MOVS     r1,#0xa
0057da  486a              LDR      r0,|L1.22916|
0057dc  f7fffffe          BL       uart_putchar
0057e0  210a              MOVS     r1,#0xa
0057e2  4868              LDR      r0,|L1.22916|
0057e4  f7fffffe          BL       uart_putchar
0057e8  210a              MOVS     r1,#0xa
0057ea  4866              LDR      r0,|L1.22916|
0057ec  f7fffffe          BL       uart_putchar
;;;789    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');
0057f0  210a              MOVS     r1,#0xa
0057f2  4864              LDR      r0,|L1.22916|
0057f4  f7fffffe          BL       uart_putchar
0057f8  210a              MOVS     r1,#0xa
0057fa  4862              LDR      r0,|L1.22916|
0057fc  f7fffffe          BL       uart_putchar
005800  210a              MOVS     r1,#0xa
005802  4860              LDR      r0,|L1.22916|
005804  f7fffffe          BL       uart_putchar
;;;790    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005808  210a              MOVS     r1,#0xa
00580a  485e              LDR      r0,|L1.22916|
00580c  f7fffffe          BL       uart_putchar
005810  210a              MOVS     r1,#0xa
005812  485c              LDR      r0,|L1.22916|
005814  f7fffffe          BL       uart_putchar
005818  210a              MOVS     r1,#0xa
00581a  485a              LDR      r0,|L1.22916|
00581c  f7fffffe          BL       uart_putchar
;;;791    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 8) )))
005820  bf00              NOP      
                  |L1.22562|
005822  495b              LDR      r1,|L1.22928|
005824  318c              ADDS     r1,r1,#0x8c
005826  484f              LDR      r0,|L1.22884|
005828  f7fffffe          BL       strstr
00582c  2800              CMP      r0,#0
00582e  d109              BNE      |L1.22596|
005830  4957              LDR      r1,|L1.22928|
005832  484c              LDR      r0,|L1.22884|
005834  f7fffffe          BL       strstr
005838  2800              CMP      r0,#0
00583a  d103              BNE      |L1.22596|
00583c  484e              LDR      r0,|L1.22904|
00583e  6800              LDR      r0,[r0,#0]  ; tout
005840  2808              CMP      r0,#8
005842  ddee              BLE      |L1.22562|
                  |L1.22596|
;;;792    									{}
;;;793    									clear();
005844  f7fffffe          BL       clear
;;;794    									memset(data,0,strlen(data));
005848  4849              LDR      r0,|L1.22896|
00584a  f7fffffe          BL       strlen
00584e  4601              MOV      r1,r0
005850  9001              STR      r0,[sp,#4]
005852  4847              LDR      r0,|L1.22896|
005854  f7fffffe          BL       __aeabi_memclr
;;;795    									clear();
005858  f7fffffe          BL       clear
;;;796    									//	log_it();		                         //logging
;;;797    									memset(data,0,strlen(data));	
00585c  4844              LDR      r0,|L1.22896|
00585e  f7fffffe          BL       strlen
005862  4601              MOV      r1,r0
005864  9001              STR      r0,[sp,#4]
005866  4842              LDR      r0,|L1.22896|
005868  f7fffffe          BL       __aeabi_memclr
;;;798    temp=int_erval;				
00586c  484d              LDR      r0,|L1.22948|
00586e  6800              LDR      r0,[r0,#0]  ; int_erval
005870  494d              LDR      r1,|L1.22952|
005872  6008              STR      r0,[r1,#0]  ; temp
;;;799    int_erval=4;
005874  2004              MOVS     r0,#4
005876  494b              LDR      r1,|L1.22948|
005878  6008              STR      r0,[r1,#0]  ; int_erval
;;;800    //setting interval 4
;;;801    									GPS_COLLECT();
00587a  f7fffffe          BL       GPS_COLLECT
;;;802    									strcat(data,"CH\n");	
00587e  4944              LDR      r1,|L1.22928|
005880  3148              ADDS     r1,r1,#0x48
005882  483b              LDR      r0,|L1.22896|
005884  f7fffffe          BL       strcat
;;;803    //**************************************tcp_initialization();//reinitialization*********************************/
;;;804    
;;;805    		
;;;806    	msg_sim800(); 
005888  f7fffffe          BL       msg_sim800
;;;807    	send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00588c  2005              MOVS     r0,#5
00588e  4b40              LDR      r3,|L1.22928|
005890  461a              MOV      r2,r3
005892  3278              ADDS     r2,r2,#0x78
005894  a145              ADR      r1,|L1.22956|
005896  9000              STR      r0,[sp,#0]
005898  4610              MOV      r0,r2
00589a  3020              ADDS     r0,r0,#0x20
00589c  f7fffffe          BL       send_GSM
;;;808    	delay(100);
0058a0  2064              MOVS     r0,#0x64
0058a2  f7fffffe          BL       delay
;;;809    	send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0058a6  2004              MOVS     r0,#4
0058a8  4b39              LDR      r3,|L1.22928|
0058aa  461a              MOV      r2,r3
0058ac  32a8              ADDS     r2,r2,#0xa8
0058ae  a13f              ADR      r1,|L1.22956|
0058b0  9000              STR      r0,[sp,#0]
0058b2  4610              MOV      r0,r2
0058b4  3014              ADDS     r0,r0,#0x14
0058b6  f7fffffe          BL       send_GSM
;;;810    	GPS_COLLECT2();
0058ba  f7fffffe          BL       GPS_COLLECT2
;;;811    	strcat(data,"CH\n");		
0058be  4934              LDR      r1,|L1.22928|
0058c0  3148              ADDS     r1,r1,#0x48
0058c2  482b              LDR      r0,|L1.22896|
0058c4  f7fffffe          BL       strcat
;;;812    	GPS_COLLECT2();
0058c8  f7fffffe          BL       GPS_COLLECT2
;;;813    	strcat(data,"CH\n");	
0058cc  4930              LDR      r1,|L1.22928|
0058ce  3148              ADDS     r1,r1,#0x48
0058d0  4827              LDR      r0,|L1.22896|
0058d2  f7fffffe          BL       strcat
;;;814    	GPS_COLLECT2();
0058d6  f7fffffe          BL       GPS_COLLECT2
;;;815    	strcat(data,"CH\n");
0058da  492d              LDR      r1,|L1.22928|
0058dc  3148              ADDS     r1,r1,#0x48
0058de  4824              LDR      r0,|L1.22896|
0058e0  f7fffffe          BL       strcat
;;;816    	cond201=(strstr(uart_string_gsm, "OK"));
0058e4  a131              ADR      r1,|L1.22956|
0058e6  481f              LDR      r0,|L1.22884|
0058e8  f7fffffe          BL       strstr
0058ec  4930              LDR      r1,|L1.22960|
0058ee  6008              STR      r0,[r1,#0]  ; cond201
;;;817    	cond200=(strstr(uart_string_gsm, "ERROR"));
0058f0  4927              LDR      r1,|L1.22928|
0058f2  481c              LDR      r0,|L1.22884|
0058f4  f7fffffe          BL       strstr
0058f8  492e              LDR      r1,|L1.22964|
0058fa  6008              STR      r0,[r1,#0]  ; cond200
;;;818    	if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
0058fc  482c              LDR      r0,|L1.22960|
0058fe  6800              LDR      r0,[r0,#0]  ; cond201
005900  2800              CMP      r0,#0
005902  d101              BNE      |L1.22792|
005904  2001              MOVS     r0,#1
005906  e000              B        |L1.22794|
                  |L1.22792|
005908  2000              MOVS     r0,#0
                  |L1.22794|
00590a  2800              CMP      r0,#0
                  |L1.22796|
00590c  d076              BEQ      |L1.23036|
00590e  4829              LDR      r0,|L1.22964|
005910  6800              LDR      r0,[r0,#0]  ; cond200
005912  2800              CMP      r0,#0
005914  d101              BNE      |L1.22810|
005916  2001              MOVS     r0,#1
005918  e000              B        |L1.22812|
                  |L1.22810|
00591a  2000              MOVS     r0,#0
                  |L1.22812|
00591c  2800              CMP      r0,#0
00591e  d0f5              BEQ      |L1.22796|
005920  4825              LDR      r0,|L1.22968|
005922  6800              LDR      r0,[r0,#0]  ; sleep_flag
005924  2801              CMP      r0,#1
005926  d0f1              BEQ      |L1.22796|
;;;819    	{
;;;820    	delay(100);
005928  2064              MOVS     r0,#0x64
00592a  f7fffffe          BL       delay
;;;821    	clear();//memset(uart_string_gsm,0,5000);
00592e  f7fffffe          BL       clear
;;;822    	memset(at_,0,100);
005932  2164              MOVS     r1,#0x64
005934  4818              LDR      r0,|L1.22936|
005936  f7fffffe          BL       __aeabi_memclr
;;;823    	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00593a  480d              LDR      r0,|L1.22896|
00593c  f7fffffe          BL       strlen
005940  1c40              ADDS     r0,r0,#1
005942  4603              MOV      r3,r0
005944  4a15              LDR      r2,|L1.22940|
005946  4912              LDR      r1,|L1.22928|
005948  3154              ADDS     r1,r1,#0x54
00594a  9001              STR      r0,[sp,#4]
00594c  4812              LDR      r0,|L1.22936|
00594e  e035              B        |L1.22972|
                  |L1.22864|
                          DCD      stcond2
                  |L1.22868|
                          DCD      stcond3
                  |L1.22872|
                          DCD      stcond4
                  |L1.22876|
                          DCD      con1d
                  |L1.22880|
                          DCD      cond
                  |L1.22884|
                          DCD      uart_string_gsm
                  |L1.22888|
                          DCD      0x00001388
                  |L1.22892|
00596c  0a0a00            DCB      "\n\n",0
00596f  00                DCB      0
                  |L1.22896|
                          DCD      data
                  |L1.22900|
                          DCD      len
                  |L1.22904|
                          DCD      tout
                  |L1.22908|
                          DCD      ||k2||
                  |L1.22912|
                          DCD      k
                  |L1.22916|
                          DCD      0x4006b000
                  |L1.22920|
                          DCD      ||.text||+0x474
                  |L1.22924|
                          DCD      stcond1
                  |L1.22928|
                          DCD      ||.text||+0x870
                  |L1.22932|
                          DCD      ||.text||+0xde4
                  |L1.22936|
                          DCD      at_
                  |L1.22940|
                          DCD      drive
                  |L1.22944|
0059a0  3e00              DCB      ">",0
0059a2  00                DCB      0
0059a3  00                DCB      0
                  |L1.22948|
                          DCD      int_erval
                  |L1.22952|
                          DCD      temp
                  |L1.22956|
0059ac  4f4b00            DCB      "OK",0
0059af  00                DCB      0
                  |L1.22960|
                          DCD      cond201
                  |L1.22964|
                          DCD      cond200
                  |L1.22968|
                          DCD      sleep_flag
                  |L1.22972|
0059bc  f7fffffe          BL       __2sprintf
;;;824    	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0059c0  2005              MOVS     r0,#5
0059c2  4bfa              LDR      r3,|L1.23980|
0059c4  461a              MOV      r2,r3
0059c6  3278              ADDS     r2,r2,#0x78
0059c8  a1f9              ADR      r1,|L1.23984|
0059ca  9000              STR      r0,[sp,#0]
0059cc  48f9              LDR      r0,|L1.23988|
0059ce  f7fffffe          BL       send_SD
;;;825    if(strstr(uart_string_gsm,"ERROR")){
0059d2  49f6              LDR      r1,|L1.23980|
0059d4  48f8              LDR      r0,|L1.23992|
0059d6  f7fffffe          BL       strstr
0059da  2800              CMP      r0,#0
0059dc  d004              BEQ      |L1.23016|
;;;826    	drive[0]='C';drive[1]=':';
0059de  2043              MOVS     r0,#0x43
0059e0  49f6              LDR      r1,|L1.23996|
0059e2  7008              STRB     r0,[r1,#0]
0059e4  203a              MOVS     r0,#0x3a
0059e6  7048              STRB     r0,[r1,#1]
                  |L1.23016|
;;;827    }	
;;;828    	clear();	
0059e8  f7fffffe          BL       clear
;;;829    	k2=0;									//string array counter for uart 1
0059ec  2000              MOVS     r0,#0
0059ee  49f4              LDR      r1,|L1.24000|
0059f0  6008              STR      r0,[r1,#0]  ; k2
;;;830    	tout=0;	
0059f2  49f4              LDR      r1,|L1.24004|
0059f4  6008              STR      r0,[r1,#0]  ; tout
;;;831    	for(k=0;k<strlen(data);k++)
0059f6  49f4              LDR      r1,|L1.24008|
0059f8  6008              STR      r0,[r1,#0]  ; k
0059fa  e00e              B        |L1.23066|
                  |L1.23036|
0059fc  e09a              B        |L1.23348|
                  |L1.23038|
;;;832    	{
;;;833    	uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0059fe  48f3              LDR      r0,|L1.24012|
005a00  49f1              LDR      r1,|L1.24008|
005a02  6809              LDR      r1,[r1,#0]  ; k
005a04  5c40              LDRB     r0,[r0,r1]
005a06  4601              MOV      r1,r0
005a08  9001              STR      r0,[sp,#4]
005a0a  48f1              LDR      r0,|L1.24016|
005a0c  f7fffffe          BL       uart_putchar
005a10  48ed              LDR      r0,|L1.24008|
005a12  6800              LDR      r0,[r0,#0]            ;831  ; k
005a14  1c40              ADDS     r0,r0,#1              ;831
005a16  49ec              LDR      r1,|L1.24008|
005a18  6008              STR      r0,[r1,#0]            ;831  ; k
                  |L1.23066|
005a1a  48ec              LDR      r0,|L1.24012|
005a1c  f7fffffe          BL       strlen
005a20  49e9              LDR      r1,|L1.24008|
005a22  6809              LDR      r1,[r1,#0]            ;831  ; k
005a24  4288              CMP      r0,r1                 ;831
005a26  d8ea              BHI      |L1.23038|
;;;834    	}	
;;;835    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005a28  210a              MOVS     r1,#0xa
005a2a  48e9              LDR      r0,|L1.24016|
005a2c  f7fffffe          BL       uart_putchar
005a30  210a              MOVS     r1,#0xa
005a32  48e7              LDR      r0,|L1.24016|
005a34  f7fffffe          BL       uart_putchar
005a38  210a              MOVS     r1,#0xa
005a3a  48e5              LDR      r0,|L1.24016|
005a3c  f7fffffe          BL       uart_putchar
005a40  210a              MOVS     r1,#0xa
005a42  48e3              LDR      r0,|L1.24016|
005a44  f7fffffe          BL       uart_putchar
005a48  210a              MOVS     r1,#0xa
005a4a  48e1              LDR      r0,|L1.24016|
005a4c  f7fffffe          BL       uart_putchar
005a50  210a              MOVS     r1,#0xa
005a52  48df              LDR      r0,|L1.24016|
005a54  f7fffffe          BL       uart_putchar
005a58  210a              MOVS     r1,#0xa
005a5a  48dd              LDR      r0,|L1.24016|
005a5c  f7fffffe          BL       uart_putchar
;;;836    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005a60  210a              MOVS     r1,#0xa
005a62  48db              LDR      r0,|L1.24016|
005a64  f7fffffe          BL       uart_putchar
005a68  210a              MOVS     r1,#0xa
005a6a  48d9              LDR      r0,|L1.24016|
005a6c  f7fffffe          BL       uart_putchar
005a70  210a              MOVS     r1,#0xa
005a72  48d7              LDR      r0,|L1.24016|
005a74  f7fffffe          BL       uart_putchar
005a78  210a              MOVS     r1,#0xa
005a7a  48d5              LDR      r0,|L1.24016|
005a7c  f7fffffe          BL       uart_putchar
005a80  210a              MOVS     r1,#0xa
005a82  48d3              LDR      r0,|L1.24016|
005a84  f7fffffe          BL       uart_putchar
005a88  210a              MOVS     r1,#0xa
005a8a  48d1              LDR      r0,|L1.24016|
005a8c  f7fffffe          BL       uart_putchar
005a90  210a              MOVS     r1,#0xa
005a92  48cf              LDR      r0,|L1.24016|
005a94  f7fffffe          BL       uart_putchar
;;;837    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005a98  210a              MOVS     r1,#0xa
005a9a  48cd              LDR      r0,|L1.24016|
005a9c  f7fffffe          BL       uart_putchar
005aa0  210a              MOVS     r1,#0xa
005aa2  48cb              LDR      r0,|L1.24016|
005aa4  f7fffffe          BL       uart_putchar
005aa8  210a              MOVS     r1,#0xa
005aaa  48c9              LDR      r0,|L1.24016|
005aac  f7fffffe          BL       uart_putchar
005ab0  210a              MOVS     r1,#0xa
005ab2  48c7              LDR      r0,|L1.24016|
005ab4  f7fffffe          BL       uart_putchar
005ab8  210a              MOVS     r1,#0xa
005aba  48c5              LDR      r0,|L1.24016|
005abc  f7fffffe          BL       uart_putchar
005ac0  210a              MOVS     r1,#0xa
005ac2  48c3              LDR      r0,|L1.24016|
005ac4  f7fffffe          BL       uart_putchar
005ac8  210a              MOVS     r1,#0xa
005aca  48c1              LDR      r0,|L1.24016|
005acc  f7fffffe          BL       uart_putchar
;;;838    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005ad0  210a              MOVS     r1,#0xa
005ad2  48bf              LDR      r0,|L1.24016|
005ad4  f7fffffe          BL       uart_putchar
005ad8  210a              MOVS     r1,#0xa
005ada  48bd              LDR      r0,|L1.24016|
005adc  f7fffffe          BL       uart_putchar
;;;839    										//memset(data,0,1000);
;;;840    															//timer counts to wait for characters in uart 1 									
;;;841    										while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005ae0  bf00              NOP      
                  |L1.23266|
005ae2  49b2              LDR      r1,|L1.23980|
005ae4  318c              ADDS     r1,r1,#0x8c
005ae6  48b4              LDR      r0,|L1.23992|
005ae8  f7fffffe          BL       strstr
005aec  2800              CMP      r0,#0
005aee  d109              BNE      |L1.23300|
005af0  49ae              LDR      r1,|L1.23980|
005af2  48b1              LDR      r0,|L1.23992|
005af4  f7fffffe          BL       strstr
005af8  2800              CMP      r0,#0
005afa  d103              BNE      |L1.23300|
005afc  48b1              LDR      r0,|L1.24004|
005afe  6800              LDR      r0,[r0,#0]  ; tout
005b00  2805              CMP      r0,#5
005b02  ddee              BLE      |L1.23266|
                  |L1.23300|
;;;842    										{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;843    										}
;;;844    										clear();//uart_putchar(UART1_BASE_PTR,0x1a);
005b04  f7fffffe          BL       clear
;;;845    										//clear();
;;;846    										memset(data,0,strlen(data));
005b08  48b0              LDR      r0,|L1.24012|
005b0a  f7fffffe          BL       strlen
005b0e  4601              MOV      r1,r0
005b10  9001              STR      r0,[sp,#4]
005b12  48ae              LDR      r0,|L1.24012|
005b14  f7fffffe          BL       __aeabi_memclr
;;;847    										clear();
005b18  f7fffffe          BL       clear
;;;848    										RESET_OFF;delay(100);
005b1c  2020              MOVS     r0,#0x20
005b1e  49ad              LDR      r1,|L1.24020|
005b20  6088              STR      r0,[r1,#8]
005b22  2064              MOVS     r0,#0x64
005b24  f7fffffe          BL       delay
;;;849    										RESET_ON;delay(100);		
005b28  2020              MOVS     r0,#0x20
005b2a  49aa              LDR      r1,|L1.24020|
005b2c  6048              STR      r0,[r1,#4]
005b2e  2064              MOVS     r0,#0x64
005b30  f7fffffe          BL       delay
                  |L1.23348|
;;;850    	}
;;;851    		
;;;852    	send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
005b34  2004              MOVS     r0,#4
005b36  4ba8              LDR      r3,|L1.24024|
005b38  4a9c              LDR      r2,|L1.23980|
005b3a  3278              ADDS     r2,r2,#0x78
005b3c  a1a7              ADR      r1,|L1.24028|
005b3e  9000              STR      r0,[sp,#0]
005b40  4618              MOV      r0,r3
005b42  300c              ADDS     r0,r0,#0xc
005b44  f7fffffe          BL       send_GSM
;;;853    	GPS_COLLECT2();
005b48  f7fffffe          BL       GPS_COLLECT2
;;;854    	strcat(data,"CH\n");	
005b4c  4997              LDR      r1,|L1.23980|
005b4e  3148              ADDS     r1,r1,#0x48
005b50  489e              LDR      r0,|L1.24012|
005b52  f7fffffe          BL       strcat
;;;855    	memset(at_,0,100);
005b56  2164              MOVS     r1,#0x64
005b58  4896              LDR      r0,|L1.23988|
005b5a  f7fffffe          BL       __aeabi_memclr
;;;856    	sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
005b5e  4aa0              LDR      r2,|L1.24032|
005b60  499d              LDR      r1,|L1.24024|
005b62  3120              ADDS     r1,r1,#0x20
005b64  4893              LDR      r0,|L1.23988|
005b66  f7fffffe          BL       __2sprintf
;;;857    	send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
005b6a  489e              LDR      r0,|L1.24036|
005b6c  6800              LDR      r0,[r0,#0]  ; tmeout
005b6e  4b9a              LDR      r3,|L1.24024|
005b70  4a8e              LDR      r2,|L1.23980|
005b72  3278              ADDS     r2,r2,#0x78
005b74  a199              ADR      r1,|L1.24028|
005b76  9000              STR      r0,[sp,#0]
005b78  488e              LDR      r0,|L1.23988|
005b7a  f7fffffe          BL       send_GSM
;;;858    	msg_sim800(); 
005b7e  f7fffffe          BL       msg_sim800
;;;859    	send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
005b82  2004              MOVS     r0,#4
005b84  4b89              LDR      r3,|L1.23980|
005b86  331c              ADDS     r3,r3,#0x1c
005b88  461a              MOV      r2,r3
005b8a  325c              ADDS     r2,r2,#0x5c
005b8c  a193              ADR      r1,|L1.24028|
005b8e  9000              STR      r0,[sp,#0]
005b90  4891              LDR      r0,|L1.24024|
005b92  3038              ADDS     r0,r0,#0x38
005b94  f7fffffe          BL       send_GSM
;;;860    	GPS_COLLECT2();
005b98  f7fffffe          BL       GPS_COLLECT2
;;;861    	strcat(data,"CH\n");	
005b9c  4983              LDR      r1,|L1.23980|
005b9e  3148              ADDS     r1,r1,#0x48
005ba0  488a              LDR      r0,|L1.24012|
005ba2  f7fffffe          BL       strcat
;;;862    	GPS_COLLECT2();
005ba6  f7fffffe          BL       GPS_COLLECT2
;;;863    	strcat(data,"CH\n");	
005baa  4980              LDR      r1,|L1.23980|
005bac  3148              ADDS     r1,r1,#0x48
005bae  4887              LDR      r0,|L1.24012|
005bb0  f7fffffe          BL       strcat
;;;864    
;;;865    
;;;866    	msg_sim800(); 
005bb4  f7fffffe          BL       msg_sim800
;;;867    	GPS_COLLECT2();
005bb8  f7fffffe          BL       GPS_COLLECT2
;;;868    	strcat(data,"CH\n");	
005bbc  497b              LDR      r1,|L1.23980|
005bbe  3148              ADDS     r1,r1,#0x48
005bc0  4882              LDR      r0,|L1.24012|
005bc2  f7fffffe          BL       strcat
;;;869    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);		
005bc6  2001              MOVS     r0,#1
005bc8  4b78              LDR      r3,|L1.23980|
005bca  331c              ADDS     r3,r3,#0x1c
005bcc  461a              MOV      r2,r3
005bce  325c              ADDS     r2,r2,#0x5c
005bd0  a182              ADR      r1,|L1.24028|
005bd2  9000              STR      r0,[sp,#0]
005bd4  4880              LDR      r0,|L1.24024|
005bd6  3048              ADDS     r0,r0,#0x48
005bd8  f7fffffe          BL       send_GSM
;;;870    if(strstr(uart_string_gsm,"0.0.0.0"))
005bdc  4982              LDR      r1,|L1.24040|
005bde  4876              LDR      r0,|L1.23992|
005be0  f7fffffe          BL       strstr
005be4  2800              CMP      r0,#0
005be6  d001              BEQ      |L1.23532|
;;;871    {
;;;872    	reset_func();
005be8  f7fffffe          BL       reset_func
                  |L1.23532|
;;;873    }	
;;;874    
;;;875    
;;;876    	msg_sim800(); 
005bec  f7fffffe          BL       msg_sim800
;;;877    int_erval=temp;
005bf0  487e              LDR      r0,|L1.24044|
005bf2  6800              LDR      r0,[r0,#0]  ; temp
005bf4  497e              LDR      r1,|L1.24048|
005bf6  6008              STR      r0,[r1,#0]  ; int_erval
;;;878    							sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005bf8  4b7e              LDR      r3,|L1.24052|
005bfa  4a7f              LDR      r2,|L1.24056|
005bfc  4976              LDR      r1,|L1.24024|
005bfe  3160              ADDS     r1,r1,#0x60
005c00  486c              LDR      r0,|L1.23988|
005c02  f7fffffe          BL       __2sprintf
;;;879    							send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
005c06  4877              LDR      r0,|L1.24036|
005c08  6800              LDR      r0,[r0,#0]  ; tmeout
005c0a  4b73              LDR      r3,|L1.24024|
005c0c  4a67              LDR      r2,|L1.23980|
005c0e  4619              MOV      r1,r3
005c10  3180              ADDS     r1,r1,#0x80
005c12  9000              STR      r0,[sp,#0]
005c14  4867              LDR      r0,|L1.23988|
005c16  f7fffffe          BL       send_GSM
;;;880    							clear();
005c1a  f7fffffe          BL       clear
;;;881    							
;;;882    							
;;;883    							send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
005c1e  4871              LDR      r0,|L1.24036|
005c20  6800              LDR      r0,[r0,#0]  ; tmeout
005c22  4b6d              LDR      r3,|L1.24024|
005c24  3388              ADDS     r3,r3,#0x88
005c26  4a61              LDR      r2,|L1.23980|
005c28  a161              ADR      r1,|L1.23984|
005c2a  9000              STR      r0,[sp,#0]
005c2c  4618              MOV      r0,r3
005c2e  3010              ADDS     r0,r0,#0x10
005c30  f7fffffe          BL       send_GSM
;;;884    	//*****************************************tcp_initialization ends**************************//									
;;;885    										clear();		
005c34  f7fffffe          BL       clear
;;;886    										memset(stcond1,0,strlen(stcond1));
005c38  4870              LDR      r0,|L1.24060|
005c3a  6800              LDR      r0,[r0,#0]  ; stcond1
005c3c  f7fffffe          BL       strlen
005c40  4601              MOV      r1,r0
005c42  9001              STR      r0,[sp,#4]
005c44  486d              LDR      r0,|L1.24060|
005c46  6800              LDR      r0,[r0,#0]  ; stcond1
005c48  f7fffffe          BL       __aeabi_memclr
;;;887    										memset(stcond2,0,strlen(stcond2));	
005c4c  486c              LDR      r0,|L1.24064|
005c4e  6800              LDR      r0,[r0,#0]  ; stcond2
005c50  f7fffffe          BL       strlen
005c54  4601              MOV      r1,r0
005c56  9001              STR      r0,[sp,#4]
005c58  4869              LDR      r0,|L1.24064|
005c5a  6800              LDR      r0,[r0,#0]  ; stcond2
005c5c  f7fffffe          BL       __aeabi_memclr
;;;888    										memset(stcond3,0,strlen(stcond3));	
005c60  4868              LDR      r0,|L1.24068|
005c62  6800              LDR      r0,[r0,#0]  ; stcond3
005c64  f7fffffe          BL       strlen
005c68  4601              MOV      r1,r0
005c6a  9001              STR      r0,[sp,#4]
005c6c  4865              LDR      r0,|L1.24068|
005c6e  6800              LDR      r0,[r0,#0]  ; stcond3
005c70  f7fffffe          BL       __aeabi_memclr
;;;889    										memset(stcond4,0,strlen(stcond4));								
005c74  4864              LDR      r0,|L1.24072|
005c76  6800              LDR      r0,[r0,#0]  ; stcond4
005c78  f7fffffe          BL       strlen
005c7c  4601              MOV      r1,r0
005c7e  9001              STR      r0,[sp,#4]
005c80  4861              LDR      r0,|L1.24072|
005c82  6800              LDR      r0,[r0,#0]  ; stcond4
005c84  f7fffffe          BL       __aeabi_memclr
;;;890    										cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
005c88  213e              MOVS     r1,#0x3e
005c8a  484b              LDR      r0,|L1.23992|
005c8c  f7fffffe          BL       mystrstr
005c90  495e              LDR      r1,|L1.24076|
005c92  7008              STRB     r0,[r1,#0]
;;;891    								
;;;892    									if(cond)	
005c94  4608              MOV      r0,r1
005c96  7800              LDRB     r0,[r0,#0]  ; cond
005c98  2800              CMP      r0,#0
005c9a  d07c              BEQ      |L1.23958|
;;;893    									{	
;;;894    										clear();
005c9c  f7fffffe          BL       clear
;;;895    										memset(uart_string_gsm,0,5000);
005ca0  495b              LDR      r1,|L1.24080|
005ca2  4845              LDR      r0,|L1.23992|
005ca4  f7fffffe          BL       __aeabi_memclr
;;;896    										strcat(data,"\n");
005ca8  a15a              ADR      r1,|L1.24084|
005caa  4848              LDR      r0,|L1.24012|
005cac  f7fffffe          BL       strcat
;;;897    										len=strlen(data);
005cb0  4846              LDR      r0,|L1.24012|
005cb2  f7fffffe          BL       strlen
005cb6  4958              LDR      r1,|L1.24088|
005cb8  6008              STR      r0,[r1,#0]  ; len
;;;898    										tout=0;
005cba  2000              MOVS     r0,#0
005cbc  4941              LDR      r1,|L1.24004|
005cbe  6008              STR      r0,[r1,#0]  ; tout
;;;899    										k2=0;
005cc0  493f              LDR      r1,|L1.24000|
005cc2  6008              STR      r0,[r1,#0]  ; k2
;;;900    										for(k=0;k<len;k++)
005cc4  4940              LDR      r1,|L1.24008|
005cc6  6008              STR      r0,[r1,#0]  ; k
005cc8  e00d              B        |L1.23782|
                  |L1.23754|
;;;901    										{uart_putchar(UART1_BASE_PTR, data[k]);
005cca  4840              LDR      r0,|L1.24012|
005ccc  493e              LDR      r1,|L1.24008|
005cce  6809              LDR      r1,[r1,#0]  ; k
005cd0  5c40              LDRB     r0,[r0,r1]
005cd2  4601              MOV      r1,r0
005cd4  9001              STR      r0,[sp,#4]
005cd6  483e              LDR      r0,|L1.24016|
005cd8  f7fffffe          BL       uart_putchar
005cdc  483a              LDR      r0,|L1.24008|
005cde  6800              LDR      r0,[r0,#0]            ;900  ; k
005ce0  1c40              ADDS     r0,r0,#1              ;900
005ce2  4939              LDR      r1,|L1.24008|
005ce4  6008              STR      r0,[r1,#0]            ;900  ; k
                  |L1.23782|
005ce6  4838              LDR      r0,|L1.24008|
005ce8  6800              LDR      r0,[r0,#0]            ;900  ; k
005cea  494b              LDR      r1,|L1.24088|
005cec  6809              LDR      r1,[r1,#0]            ;900  ; len
005cee  4288              CMP      r0,r1                 ;900
005cf0  dbeb              BLT      |L1.23754|
;;;902    										}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005cf2  210a              MOVS     r1,#0xa
005cf4  4836              LDR      r0,|L1.24016|
005cf6  f7fffffe          BL       uart_putchar
005cfa  211a              MOVS     r1,#0x1a
005cfc  4834              LDR      r0,|L1.24016|
005cfe  f7fffffe          BL       uart_putchar
005d02  211a              MOVS     r1,#0x1a
005d04  4832              LDR      r0,|L1.24016|
005d06  f7fffffe          BL       uart_putchar
005d0a  211a              MOVS     r1,#0x1a
005d0c  4830              LDR      r0,|L1.24016|
005d0e  f7fffffe          BL       uart_putchar
;;;903    										do{stcond1=strstr(uart_string_gsm,"SEND OK");
005d12  bf00              NOP      
                  |L1.23828|
005d14  4941              LDR      r1,|L1.24092|
005d16  4828              LDR      r0,|L1.23992|
005d18  f7fffffe          BL       strstr
005d1c  4937              LDR      r1,|L1.24060|
005d1e  6008              STR      r0,[r1,#0]  ; stcond1
;;;904    												stcond2=strstr(uart_string_gsm, "ERROR");
005d20  4922              LDR      r1,|L1.23980|
005d22  4825              LDR      r0,|L1.23992|
005d24  f7fffffe          BL       strstr
005d28  4935              LDR      r1,|L1.24064|
005d2a  6008              STR      r0,[r1,#0]  ; stcond2
;;;905    													stcond3=strstr(uart_string_gsm, "FAIL");	
005d2c  492a              LDR      r1,|L1.24024|
005d2e  3190              ADDS     r1,r1,#0x90
005d30  4821              LDR      r0,|L1.23992|
005d32  f7fffffe          BL       strstr
005d36  4933              LDR      r1,|L1.24068|
005d38  6008              STR      r0,[r1,#0]  ; stcond3
;;;906    														stcond4=strstr(uart_string_gsm, "DEACT");	
005d3a  491c              LDR      r1,|L1.23980|
005d3c  311c              ADDS     r1,r1,#0x1c
005d3e  481e              LDR      r0,|L1.23992|
005d40  f7fffffe          BL       strstr
005d44  4930              LDR      r1,|L1.24072|
005d46  6008              STR      r0,[r1,#0]  ; stcond4
;;;907    											}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
005d48  482d              LDR      r0,|L1.24064|
005d4a  6800              LDR      r0,[r0,#0]  ; stcond2
005d4c  2800              CMP      r0,#0
005d4e  d10f              BNE      |L1.23920|
005d50  482c              LDR      r0,|L1.24068|
005d52  6800              LDR      r0,[r0,#0]  ; stcond3
005d54  2800              CMP      r0,#0
005d56  d10b              BNE      |L1.23920|
005d58  4608              MOV      r0,r1
005d5a  6800              LDR      r0,[r0,#0]  ; stcond4
005d5c  2800              CMP      r0,#0
005d5e  d107              BNE      |L1.23920|
005d60  4826              LDR      r0,|L1.24060|
005d62  6800              LDR      r0,[r0,#0]  ; stcond1
005d64  2800              CMP      r0,#0
005d66  d103              BNE      |L1.23920|
005d68  4816              LDR      r0,|L1.24004|
005d6a  6800              LDR      r0,[r0,#0]  ; tout
005d6c  2808              CMP      r0,#8
005d6e  ddd1              BLE      |L1.23828|
                  |L1.23920|
;;;908    										uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005d70  211a              MOVS     r1,#0x1a
005d72  4817              LDR      r0,|L1.24016|
005d74  f7fffffe          BL       uart_putchar
005d78  211a              MOVS     r1,#0x1a
005d7a  4815              LDR      r0,|L1.24016|
005d7c  f7fffffe          BL       uart_putchar
005d80  211a              MOVS     r1,#0x1a
005d82  4813              LDR      r0,|L1.24016|
005d84  f7fffffe          BL       uart_putchar
005d88  211a              MOVS     r1,#0x1a
005d8a  4811              LDR      r0,|L1.24016|
005d8c  f7fffffe          BL       uart_putchar
;;;909    										con1d=	(strstr(uart_string_gsm,"SEND OK"));
005d90  4922              LDR      r1,|L1.24092|
005d92  4809              LDR      r0,|L1.23992|
005d94  e000              B        |L1.23960|
                  |L1.23958|
005d96  e19b              B        |L1.24784|
                  |L1.23960|
005d98  f7fffffe          BL       strstr
005d9c  4920              LDR      r1,|L1.24096|
005d9e  6008              STR      r0,[r1,#0]  ; con1d
;;;910    																	if(!(con1d) == 1 ) 
005da0  4608              MOV      r0,r1
005da2  6800              LDR      r0,[r0,#0]  ; con1d
005da4  2800              CMP      r0,#0
005da6  d13d              BNE      |L1.24100|
005da8  2001              MOVS     r0,#1
005daa  e03c              B        |L1.24102|
                  |L1.23980|
                          DCD      ||.text||+0x870
                  |L1.23984|
005db0  3e00              DCB      ">",0
005db2  00                DCB      0
005db3  00                DCB      0
                  |L1.23988|
                          DCD      at_
                  |L1.23992|
                          DCD      uart_string_gsm
                  |L1.23996|
                          DCD      drive
                  |L1.24000|
                          DCD      ||k2||
                  |L1.24004|
                          DCD      tout
                  |L1.24008|
                          DCD      k
                  |L1.24012|
                          DCD      data
                  |L1.24016|
                          DCD      0x4006b000
                  |L1.24020|
                          DCD      0x400ff080
                  |L1.24024|
                          DCD      ||.text||+0xd54
                  |L1.24028|
005ddc  4f4b00            DCB      "OK",0
005ddf  00                DCB      0
                  |L1.24032|
                          DCD      apn
                  |L1.24036|
                          DCD      tmeout
                  |L1.24040|
                          DCD      ||.text||+0x4348
                  |L1.24044|
                          DCD      temp
                  |L1.24048|
                          DCD      int_erval
                  |L1.24052|
                          DCD      port
                  |L1.24056|
                          DCD      ||ip||
                  |L1.24060|
                          DCD      stcond1
                  |L1.24064|
                          DCD      stcond2
                  |L1.24068|
                          DCD      stcond3
                  |L1.24072|
                          DCD      stcond4
                  |L1.24076|
                          DCD      cond
                  |L1.24080|
                          DCD      0x00001388
                  |L1.24084|
005e14  0a00              DCB      "\n",0
005e16  00                DCB      0
005e17  00                DCB      0
                  |L1.24088|
                          DCD      len
                  |L1.24092|
                          DCD      ||.text||+0x474
                  |L1.24096|
                          DCD      con1d
                  |L1.24100|
005e24  2000              MOVS     r0,#0
                  |L1.24102|
005e26  2801              CMP      r0,#1
005e28  d17e              BNE      |L1.24360|
;;;911    																	{
;;;912    																			delay(100);
005e2a  2064              MOVS     r0,#0x64
005e2c  f7fffffe          BL       delay
;;;913    																			clear();//memset(uart_string_gsm,0,5000);
005e30  f7fffffe          BL       clear
;;;914    																			memset(at_,0,100);
005e34  2164              MOVS     r1,#0x64
005e36  48fe              LDR      r0,|L1.25136|
005e38  f7fffffe          BL       __aeabi_memclr
;;;915    																			sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005e3c  48fd              LDR      r0,|L1.25140|
005e3e  f7fffffe          BL       strlen
005e42  1c40              ADDS     r0,r0,#1
005e44  4603              MOV      r3,r0
005e46  4afc              LDR      r2,|L1.25144|
005e48  49fc              LDR      r1,|L1.25148|
005e4a  9001              STR      r0,[sp,#4]
005e4c  48f8              LDR      r0,|L1.25136|
005e4e  f7fffffe          BL       __2sprintf
;;;916    																			send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005e52  2005              MOVS     r0,#5
005e54  4bf9              LDR      r3,|L1.25148|
005e56  3b54              SUBS     r3,r3,#0x54
005e58  461a              MOV      r2,r3
005e5a  3278              ADDS     r2,r2,#0x78
005e5c  a1f8              ADR      r1,|L1.25152|
005e5e  9000              STR      r0,[sp,#0]
005e60  48f3              LDR      r0,|L1.25136|
005e62  f7fffffe          BL       send_SD
;;;917    if(strstr(uart_string_gsm,"ERROR")){
005e66  49f5              LDR      r1,|L1.25148|
005e68  3954              SUBS     r1,r1,#0x54
005e6a  48f6              LDR      r0,|L1.25156|
005e6c  f7fffffe          BL       strstr
005e70  2800              CMP      r0,#0
005e72  d004              BEQ      |L1.24190|
;;;918    	drive[0]='C';drive[1]=':';
005e74  2043              MOVS     r0,#0x43
005e76  49f0              LDR      r1,|L1.25144|
005e78  7008              STRB     r0,[r1,#0]
005e7a  203a              MOVS     r0,#0x3a
005e7c  7048              STRB     r0,[r1,#1]
                  |L1.24190|
;;;919    }	
;;;920    																			clear();	
005e7e  f7fffffe          BL       clear
;;;921    																			k2=0;									//string array counter for uart 1
005e82  2000              MOVS     r0,#0
005e84  49f0              LDR      r1,|L1.25160|
005e86  6008              STR      r0,[r1,#0]  ; k2
;;;922    																			tout=0;	
005e88  49f0              LDR      r1,|L1.25164|
005e8a  6008              STR      r0,[r1,#0]  ; tout
;;;923    																			for(k=0;k<strlen(data);k++)
005e8c  49f0              LDR      r1,|L1.25168|
005e8e  6008              STR      r0,[r1,#0]  ; k
005e90  e00d              B        |L1.24238|
                  |L1.24210|
;;;924    																			{
;;;925    																				uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005e92  48e8              LDR      r0,|L1.25140|
005e94  49ee              LDR      r1,|L1.25168|
005e96  6809              LDR      r1,[r1,#0]  ; k
005e98  5c40              LDRB     r0,[r0,r1]
005e9a  4601              MOV      r1,r0
005e9c  9001              STR      r0,[sp,#4]
005e9e  48ed              LDR      r0,|L1.25172|
005ea0  f7fffffe          BL       uart_putchar
005ea4  48ea              LDR      r0,|L1.25168|
005ea6  6800              LDR      r0,[r0,#0]            ;923  ; k
005ea8  1c40              ADDS     r0,r0,#1              ;923
005eaa  49e9              LDR      r1,|L1.25168|
005eac  6008              STR      r0,[r1,#0]            ;923  ; k
                  |L1.24238|
005eae  48e1              LDR      r0,|L1.25140|
005eb0  f7fffffe          BL       strlen
005eb4  49e6              LDR      r1,|L1.25168|
005eb6  6809              LDR      r1,[r1,#0]            ;923  ; k
005eb8  4288              CMP      r0,r1                 ;923
005eba  d8ea              BHI      |L1.24210|
;;;926    																			}	
;;;927    																			uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005ebc  210a              MOVS     r1,#0xa
005ebe  48e5              LDR      r0,|L1.25172|
005ec0  f7fffffe          BL       uart_putchar
005ec4  210a              MOVS     r1,#0xa
005ec6  48e3              LDR      r0,|L1.25172|
005ec8  f7fffffe          BL       uart_putchar
005ecc  210a              MOVS     r1,#0xa
005ece  48e1              LDR      r0,|L1.25172|
005ed0  f7fffffe          BL       uart_putchar
005ed4  210a              MOVS     r1,#0xa
005ed6  48df              LDR      r0,|L1.25172|
005ed8  f7fffffe          BL       uart_putchar
005edc  210a              MOVS     r1,#0xa
005ede  48dd              LDR      r0,|L1.25172|
005ee0  f7fffffe          BL       uart_putchar
005ee4  210a              MOVS     r1,#0xa
005ee6  48db              LDR      r0,|L1.25172|
005ee8  f7fffffe          BL       uart_putchar
005eec  210a              MOVS     r1,#0xa
005eee  48d9              LDR      r0,|L1.25172|
005ef0  f7fffffe          BL       uart_putchar
005ef4  210a              MOVS     r1,#0xa
005ef6  48d7              LDR      r0,|L1.25172|
005ef8  f7fffffe          BL       uart_putchar
005efc  210a              MOVS     r1,#0xa
005efe  48d5              LDR      r0,|L1.25172|
005f00  f7fffffe          BL       uart_putchar
005f04  210a              MOVS     r1,#0xa
005f06  48d3              LDR      r0,|L1.25172|
005f08  f7fffffe          BL       uart_putchar
005f0c  210a              MOVS     r1,#0xa
005f0e  48d1              LDR      r0,|L1.25172|
005f10  f7fffffe          BL       uart_putchar
005f14  210a              MOVS     r1,#0xa
005f16  48cf              LDR      r0,|L1.25172|
005f18  f7fffffe          BL       uart_putchar
005f1c  210a              MOVS     r1,#0xa
005f1e  48cd              LDR      r0,|L1.25172|
005f20  f7fffffe          BL       uart_putchar
005f24  210a              MOVS     r1,#0xa
005f26  e001              B        |L1.24364|
                  |L1.24360|
005f28  e0cf              B        |L1.24778|
                  |L1.24362|
005f2a  e231              B        |L1.25488|
                  |L1.24364|
005f2c  48c9              LDR      r0,|L1.25172|
005f2e  f7fffffe          BL       uart_putchar
005f32  210a              MOVS     r1,#0xa
005f34  48c7              LDR      r0,|L1.25172|
005f36  f7fffffe          BL       uart_putchar
005f3a  210a              MOVS     r1,#0xa
005f3c  48c5              LDR      r0,|L1.25172|
005f3e  f7fffffe          BL       uart_putchar
005f42  210a              MOVS     r1,#0xa
005f44  48c3              LDR      r0,|L1.25172|
005f46  f7fffffe          BL       uart_putchar
005f4a  210a              MOVS     r1,#0xa
005f4c  48c1              LDR      r0,|L1.25172|
005f4e  f7fffffe          BL       uart_putchar
005f52  210a              MOVS     r1,#0xa
005f54  48bf              LDR      r0,|L1.25172|
005f56  f7fffffe          BL       uart_putchar
005f5a  210a              MOVS     r1,#0xa
005f5c  48bd              LDR      r0,|L1.25172|
005f5e  f7fffffe          BL       uart_putchar
005f62  210a              MOVS     r1,#0xa
005f64  48bb              LDR      r0,|L1.25172|
005f66  f7fffffe          BL       uart_putchar
005f6a  210a              MOVS     r1,#0xa
005f6c  48b9              LDR      r0,|L1.25172|
005f6e  f7fffffe          BL       uart_putchar
005f72  210a              MOVS     r1,#0xa
005f74  48b7              LDR      r0,|L1.25172|
005f76  f7fffffe          BL       uart_putchar
005f7a  210a              MOVS     r1,#0xa
005f7c  48b5              LDR      r0,|L1.25172|
005f7e  f7fffffe          BL       uart_putchar
005f82  210a              MOVS     r1,#0xa
005f84  48b3              LDR      r0,|L1.25172|
005f86  f7fffffe          BL       uart_putchar
005f8a  210a              MOVS     r1,#0xa
005f8c  48b1              LDR      r0,|L1.25172|
005f8e  f7fffffe          BL       uart_putchar
005f92  210a              MOVS     r1,#0xa
005f94  48af              LDR      r0,|L1.25172|
005f96  f7fffffe          BL       uart_putchar
005f9a  210a              MOVS     r1,#0xa
005f9c  48ad              LDR      r0,|L1.25172|
005f9e  f7fffffe          BL       uart_putchar
005fa2  210a              MOVS     r1,#0xa
005fa4  48ab              LDR      r0,|L1.25172|
005fa6  f7fffffe          BL       uart_putchar
005faa  210a              MOVS     r1,#0xa
005fac  48a9              LDR      r0,|L1.25172|
005fae  f7fffffe          BL       uart_putchar
005fb2  210a              MOVS     r1,#0xa
005fb4  48a7              LDR      r0,|L1.25172|
005fb6  f7fffffe          BL       uart_putchar
005fba  210a              MOVS     r1,#0xa
005fbc  48a5              LDR      r0,|L1.25172|
005fbe  f7fffffe          BL       uart_putchar
005fc2  210a              MOVS     r1,#0xa
005fc4  48a3              LDR      r0,|L1.25172|
005fc6  f7fffffe          BL       uart_putchar
005fca  210a              MOVS     r1,#0xa
005fcc  48a1              LDR      r0,|L1.25172|
005fce  f7fffffe          BL       uart_putchar
005fd2  210a              MOVS     r1,#0xa
005fd4  489f              LDR      r0,|L1.25172|
005fd6  f7fffffe          BL       uart_putchar
005fda  210a              MOVS     r1,#0xa
005fdc  489d              LDR      r0,|L1.25172|
005fde  f7fffffe          BL       uart_putchar
005fe2  210a              MOVS     r1,#0xa
005fe4  489b              LDR      r0,|L1.25172|
005fe6  f7fffffe          BL       uart_putchar
005fea  210a              MOVS     r1,#0xa
005fec  4899              LDR      r0,|L1.25172|
005fee  f7fffffe          BL       uart_putchar
005ff2  210a              MOVS     r1,#0xa
005ff4  4897              LDR      r0,|L1.25172|
005ff6  f7fffffe          BL       uart_putchar
005ffa  210a              MOVS     r1,#0xa
005ffc  4895              LDR      r0,|L1.25172|
005ffe  f7fffffe          BL       uart_putchar
006002  210a              MOVS     r1,#0xa
006004  4893              LDR      r0,|L1.25172|
006006  f7fffffe          BL       uart_putchar
00600a  210a              MOVS     r1,#0xa
00600c  4891              LDR      r0,|L1.25172|
00600e  f7fffffe          BL       uart_putchar
006012  210a              MOVS     r1,#0xa
006014  488f              LDR      r0,|L1.25172|
006016  f7fffffe          BL       uart_putchar
00601a  210a              MOVS     r1,#0xa
00601c  488d              LDR      r0,|L1.25172|
00601e  f7fffffe          BL       uart_putchar
006022  210a              MOVS     r1,#0xa
006024  488b              LDR      r0,|L1.25172|
006026  f7fffffe          BL       uart_putchar
00602a  210a              MOVS     r1,#0xa
00602c  4889              LDR      r0,|L1.25172|
00602e  f7fffffe          BL       uart_putchar
006032  210a              MOVS     r1,#0xa
006034  4887              LDR      r0,|L1.25172|
006036  f7fffffe          BL       uart_putchar
00603a  210a              MOVS     r1,#0xa
00603c  4885              LDR      r0,|L1.25172|
00603e  f7fffffe          BL       uart_putchar
006042  210a              MOVS     r1,#0xa
006044  4883              LDR      r0,|L1.25172|
006046  f7fffffe          BL       uart_putchar
00604a  210a              MOVS     r1,#0xa
00604c  4881              LDR      r0,|L1.25172|
00604e  f7fffffe          BL       uart_putchar
006052  210a              MOVS     r1,#0xa
006054  487f              LDR      r0,|L1.25172|
006056  f7fffffe          BL       uart_putchar
00605a  210a              MOVS     r1,#0xa
00605c  487d              LDR      r0,|L1.25172|
00605e  f7fffffe          BL       uart_putchar
006062  210a              MOVS     r1,#0xa
006064  487b              LDR      r0,|L1.25172|
006066  f7fffffe          BL       uart_putchar
00606a  210a              MOVS     r1,#0xa
00606c  4879              LDR      r0,|L1.25172|
00606e  f7fffffe          BL       uart_putchar
006072  210a              MOVS     r1,#0xa
006074  4877              LDR      r0,|L1.25172|
006076  f7fffffe          BL       uart_putchar
00607a  210a              MOVS     r1,#0xa
00607c  4875              LDR      r0,|L1.25172|
00607e  f7fffffe          BL       uart_putchar
006082  210a              MOVS     r1,#0xa
006084  4873              LDR      r0,|L1.25172|
006086  f7fffffe          BL       uart_putchar
;;;928    																			while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) ))){}
00608a  bf00              NOP      
                  |L1.24716|
00608c  496b              LDR      r1,|L1.25148|
00608e  3138              ADDS     r1,r1,#0x38
006090  486c              LDR      r0,|L1.25156|
006092  f7fffffe          BL       strstr
006096  2800              CMP      r0,#0
006098  d10a              BNE      |L1.24752|
00609a  4968              LDR      r1,|L1.25148|
00609c  3954              SUBS     r1,r1,#0x54
00609e  4869              LDR      r0,|L1.25156|
0060a0  f7fffffe          BL       strstr
0060a4  2800              CMP      r0,#0
0060a6  d103              BNE      |L1.24752|
0060a8  4868              LDR      r0,|L1.25164|
0060aa  6800              LDR      r0,[r0,#0]  ; tout
0060ac  2805              CMP      r0,#5
0060ae  dded              BLE      |L1.24716|
                  |L1.24752|
;;;929    																			clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0060b0  f7fffffe          BL       clear
;;;930    																			memset(data,0,strlen(data));
0060b4  485f              LDR      r0,|L1.25140|
0060b6  f7fffffe          BL       strlen
0060ba  4601              MOV      r1,r0
0060bc  9001              STR      r0,[sp,#4]
0060be  485d              LDR      r0,|L1.25140|
0060c0  f7fffffe          BL       __aeabi_memclr
;;;931    																			clear();
0060c4  f7fffffe          BL       clear
0060c8  e165              B        |L1.25494|
                  |L1.24778|
;;;932    																		
;;;933    																//	log_it();								
;;;934    																	}else{send_chunk();}													
0060ca  f7fffffe          BL       send_chunk
0060ce  e162              B        |L1.25494|
                  |L1.24784|
;;;935    									//checks for the sd_data available
;;;936    									}
;;;937    									//con1d=strstr(uart_string_gsm,"OK");
;;;938    									else
;;;939    									{
;;;940    											delay(100);
0060d0  2064              MOVS     r0,#0x64
0060d2  f7fffffe          BL       delay
;;;941    											clear();//memset(uart_string_gsm,0,5000);
0060d6  f7fffffe          BL       clear
;;;942    											memset(at_,0,100);
0060da  2164              MOVS     r1,#0x64
0060dc  4854              LDR      r0,|L1.25136|
0060de  f7fffffe          BL       __aeabi_memclr
;;;943    											sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0060e2  4854              LDR      r0,|L1.25140|
0060e4  f7fffffe          BL       strlen
0060e8  1c40              ADDS     r0,r0,#1
0060ea  4603              MOV      r3,r0
0060ec  4a52              LDR      r2,|L1.25144|
0060ee  4953              LDR      r1,|L1.25148|
0060f0  9001              STR      r0,[sp,#4]
0060f2  484f              LDR      r0,|L1.25136|
0060f4  f7fffffe          BL       __2sprintf
;;;944    											send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0060f8  2005              MOVS     r0,#5
0060fa  4b50              LDR      r3,|L1.25148|
0060fc  3b54              SUBS     r3,r3,#0x54
0060fe  461a              MOV      r2,r3
006100  3278              ADDS     r2,r2,#0x78
006102  a14f              ADR      r1,|L1.25152|
006104  9000              STR      r0,[sp,#0]
006106  484a              LDR      r0,|L1.25136|
006108  f7fffffe          BL       send_SD
;;;945    if(strstr(uart_string_gsm,"ERROR")){
00610c  494b              LDR      r1,|L1.25148|
00610e  3954              SUBS     r1,r1,#0x54
006110  484c              LDR      r0,|L1.25156|
006112  f7fffffe          BL       strstr
006116  2800              CMP      r0,#0
006118  d004              BEQ      |L1.24868|
;;;946    drive[0]='C';drive[1]=':';
00611a  2043              MOVS     r0,#0x43
00611c  4946              LDR      r1,|L1.25144|
00611e  7008              STRB     r0,[r1,#0]
006120  203a              MOVS     r0,#0x3a
006122  7048              STRB     r0,[r1,#1]
                  |L1.24868|
;;;947    }	
;;;948    											clear();	
006124  f7fffffe          BL       clear
;;;949    											k2=0;									//string array counter for uart 1
006128  2000              MOVS     r0,#0
00612a  4947              LDR      r1,|L1.25160|
00612c  6008              STR      r0,[r1,#0]  ; k2
;;;950    											tout=0;	
00612e  4947              LDR      r1,|L1.25164|
006130  6008              STR      r0,[r1,#0]  ; tout
;;;951    											for(k=0;k<strlen(data);k++)
006132  4947              LDR      r1,|L1.25168|
006134  6008              STR      r0,[r1,#0]  ; k
006136  e00d              B        |L1.24916|
                  |L1.24888|
;;;952    											{
;;;953    											uart_putchar(UART1_BASE_PTR, data[k]);//clear();
006138  483e              LDR      r0,|L1.25140|
00613a  4945              LDR      r1,|L1.25168|
00613c  6809              LDR      r1,[r1,#0]  ; k
00613e  5c40              LDRB     r0,[r0,r1]
006140  4601              MOV      r1,r0
006142  9001              STR      r0,[sp,#4]
006144  4843              LDR      r0,|L1.25172|
006146  f7fffffe          BL       uart_putchar
00614a  4841              LDR      r0,|L1.25168|
00614c  6800              LDR      r0,[r0,#0]            ;951  ; k
00614e  1c40              ADDS     r0,r0,#1              ;951
006150  493f              LDR      r1,|L1.25168|
006152  6008              STR      r0,[r1,#0]            ;951  ; k
                  |L1.24916|
006154  4837              LDR      r0,|L1.25140|
006156  f7fffffe          BL       strlen
00615a  493d              LDR      r1,|L1.25168|
00615c  6809              LDR      r1,[r1,#0]            ;951  ; k
00615e  4288              CMP      r0,r1                 ;951
006160  d8ea              BHI      |L1.24888|
;;;954    											}	
;;;955    											uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
006162  210a              MOVS     r1,#0xa
006164  483b              LDR      r0,|L1.25172|
006166  f7fffffe          BL       uart_putchar
00616a  210a              MOVS     r1,#0xa
00616c  4839              LDR      r0,|L1.25172|
00616e  f7fffffe          BL       uart_putchar
006172  210a              MOVS     r1,#0xa
006174  4837              LDR      r0,|L1.25172|
006176  f7fffffe          BL       uart_putchar
00617a  210a              MOVS     r1,#0xa
00617c  4835              LDR      r0,|L1.25172|
00617e  f7fffffe          BL       uart_putchar
006182  210a              MOVS     r1,#0xa
006184  4833              LDR      r0,|L1.25172|
006186  f7fffffe          BL       uart_putchar
00618a  210a              MOVS     r1,#0xa
00618c  4831              LDR      r0,|L1.25172|
00618e  f7fffffe          BL       uart_putchar
006192  210a              MOVS     r1,#0xa
006194  482f              LDR      r0,|L1.25172|
006196  f7fffffe          BL       uart_putchar
00619a  210a              MOVS     r1,#0xa
00619c  482d              LDR      r0,|L1.25172|
00619e  f7fffffe          BL       uart_putchar
0061a2  210a              MOVS     r1,#0xa
0061a4  482b              LDR      r0,|L1.25172|
0061a6  f7fffffe          BL       uart_putchar
0061aa  210a              MOVS     r1,#0xa
0061ac  4829              LDR      r0,|L1.25172|
0061ae  f7fffffe          BL       uart_putchar
0061b2  210a              MOVS     r1,#0xa
0061b4  4827              LDR      r0,|L1.25172|
0061b6  f7fffffe          BL       uart_putchar
0061ba  210a              MOVS     r1,#0xa
0061bc  4825              LDR      r0,|L1.25172|
0061be  f7fffffe          BL       uart_putchar
0061c2  210a              MOVS     r1,#0xa
0061c4  4823              LDR      r0,|L1.25172|
0061c6  f7fffffe          BL       uart_putchar
0061ca  210a              MOVS     r1,#0xa
0061cc  4821              LDR      r0,|L1.25172|
0061ce  f7fffffe          BL       uart_putchar
0061d2  210a              MOVS     r1,#0xa
0061d4  481f              LDR      r0,|L1.25172|
0061d6  f7fffffe          BL       uart_putchar
0061da  210a              MOVS     r1,#0xa
0061dc  481d              LDR      r0,|L1.25172|
0061de  f7fffffe          BL       uart_putchar
0061e2  210a              MOVS     r1,#0xa
0061e4  481b              LDR      r0,|L1.25172|
0061e6  f7fffffe          BL       uart_putchar
0061ea  210a              MOVS     r1,#0xa
0061ec  4819              LDR      r0,|L1.25172|
0061ee  f7fffffe          BL       uart_putchar
0061f2  210a              MOVS     r1,#0xa
0061f4  4817              LDR      r0,|L1.25172|
0061f6  f7fffffe          BL       uart_putchar
0061fa  210a              MOVS     r1,#0xa
0061fc  4815              LDR      r0,|L1.25172|
0061fe  f7fffffe          BL       uart_putchar
006202  210a              MOVS     r1,#0xa
006204  4813              LDR      r0,|L1.25172|
006206  f7fffffe          BL       uart_putchar
00620a  210a              MOVS     r1,#0xa
00620c  4811              LDR      r0,|L1.25172|
00620e  f7fffffe          BL       uart_putchar
006212  210a              MOVS     r1,#0xa
006214  480f              LDR      r0,|L1.25172|
006216  f7fffffe          BL       uart_putchar
00621a  210a              MOVS     r1,#0xa
00621c  480d              LDR      r0,|L1.25172|
00621e  f7fffffe          BL       uart_putchar
006222  210a              MOVS     r1,#0xa
006224  480b              LDR      r0,|L1.25172|
006226  f7fffffe          BL       uart_putchar
00622a  210a              MOVS     r1,#0xa
00622c  4809              LDR      r0,|L1.25172|
00622e  e013              B        |L1.25176|
                  |L1.25136|
                          DCD      at_
                  |L1.25140|
                          DCD      data
                  |L1.25144|
                          DCD      drive
                  |L1.25148|
                          DCD      ||.text||+0x8c4
                  |L1.25152|
006240  3e00              DCB      ">",0
006242  00                DCB      0
006243  00                DCB      0
                  |L1.25156|
                          DCD      uart_string_gsm
                  |L1.25160|
                          DCD      ||k2||
                  |L1.25164|
                          DCD      tout
                  |L1.25168|
                          DCD      k
                  |L1.25172|
                          DCD      0x4006b000
                  |L1.25176|
006258  f7fffffe          BL       uart_putchar
00625c  210a              MOVS     r1,#0xa
00625e  48ab              LDR      r0,|L1.25868|
006260  f7fffffe          BL       uart_putchar
006264  210a              MOVS     r1,#0xa
006266  48a9              LDR      r0,|L1.25868|
006268  f7fffffe          BL       uart_putchar
00626c  210a              MOVS     r1,#0xa
00626e  48a7              LDR      r0,|L1.25868|
006270  f7fffffe          BL       uart_putchar
006274  210a              MOVS     r1,#0xa
006276  48a5              LDR      r0,|L1.25868|
006278  f7fffffe          BL       uart_putchar
00627c  210a              MOVS     r1,#0xa
00627e  48a3              LDR      r0,|L1.25868|
006280  f7fffffe          BL       uart_putchar
006284  210a              MOVS     r1,#0xa
006286  48a1              LDR      r0,|L1.25868|
006288  f7fffffe          BL       uart_putchar
00628c  210a              MOVS     r1,#0xa
00628e  489f              LDR      r0,|L1.25868|
006290  f7fffffe          BL       uart_putchar
006294  210a              MOVS     r1,#0xa
006296  489d              LDR      r0,|L1.25868|
006298  f7fffffe          BL       uart_putchar
00629c  210a              MOVS     r1,#0xa
00629e  489b              LDR      r0,|L1.25868|
0062a0  f7fffffe          BL       uart_putchar
0062a4  210a              MOVS     r1,#0xa
0062a6  4899              LDR      r0,|L1.25868|
0062a8  f7fffffe          BL       uart_putchar
0062ac  210a              MOVS     r1,#0xa
0062ae  4897              LDR      r0,|L1.25868|
0062b0  f7fffffe          BL       uart_putchar
0062b4  210a              MOVS     r1,#0xa
0062b6  4895              LDR      r0,|L1.25868|
0062b8  f7fffffe          BL       uart_putchar
0062bc  210a              MOVS     r1,#0xa
0062be  4893              LDR      r0,|L1.25868|
0062c0  f7fffffe          BL       uart_putchar
0062c4  210a              MOVS     r1,#0xa
0062c6  4891              LDR      r0,|L1.25868|
0062c8  f7fffffe          BL       uart_putchar
0062cc  210a              MOVS     r1,#0xa
0062ce  488f              LDR      r0,|L1.25868|
0062d0  f7fffffe          BL       uart_putchar
0062d4  210a              MOVS     r1,#0xa
0062d6  488d              LDR      r0,|L1.25868|
0062d8  f7fffffe          BL       uart_putchar
0062dc  210a              MOVS     r1,#0xa
0062de  488b              LDR      r0,|L1.25868|
0062e0  f7fffffe          BL       uart_putchar
0062e4  210a              MOVS     r1,#0xa
0062e6  4889              LDR      r0,|L1.25868|
0062e8  f7fffffe          BL       uart_putchar
0062ec  210a              MOVS     r1,#0xa
0062ee  4887              LDR      r0,|L1.25868|
0062f0  f7fffffe          BL       uart_putchar
0062f4  210a              MOVS     r1,#0xa
0062f6  4885              LDR      r0,|L1.25868|
0062f8  f7fffffe          BL       uart_putchar
0062fc  210a              MOVS     r1,#0xa
0062fe  4883              LDR      r0,|L1.25868|
006300  f7fffffe          BL       uart_putchar
006304  210a              MOVS     r1,#0xa
006306  4881              LDR      r0,|L1.25868|
006308  f7fffffe          BL       uart_putchar
00630c  210a              MOVS     r1,#0xa
00630e  487f              LDR      r0,|L1.25868|
006310  f7fffffe          BL       uart_putchar
006314  210a              MOVS     r1,#0xa
006316  487d              LDR      r0,|L1.25868|
006318  f7fffffe          BL       uart_putchar
00631c  210a              MOVS     r1,#0xa
00631e  487b              LDR      r0,|L1.25868|
006320  f7fffffe          BL       uart_putchar
006324  210a              MOVS     r1,#0xa
006326  4879              LDR      r0,|L1.25868|
006328  f7fffffe          BL       uart_putchar
00632c  210a              MOVS     r1,#0xa
00632e  4877              LDR      r0,|L1.25868|
006330  f7fffffe          BL       uart_putchar
006334  210a              MOVS     r1,#0xa
006336  4875              LDR      r0,|L1.25868|
006338  f7fffffe          BL       uart_putchar
00633c  210a              MOVS     r1,#0xa
00633e  4873              LDR      r0,|L1.25868|
006340  f7fffffe          BL       uart_putchar
006344  210a              MOVS     r1,#0xa
006346  4871              LDR      r0,|L1.25868|
006348  f7fffffe          BL       uart_putchar
00634c  210a              MOVS     r1,#0xa
00634e  486f              LDR      r0,|L1.25868|
006350  f7fffffe          BL       uart_putchar
;;;956    											//memset(data,0,1000);
;;;957    											//timer counts to wait for characters in uart 1 									
;;;958    											while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
006354  bf00              NOP      
                  |L1.25430|
006356  496e              LDR      r1,|L1.25872|
006358  486e              LDR      r0,|L1.25876|
00635a  f7fffffe          BL       strstr
00635e  2800              CMP      r0,#0
006360  d10a              BNE      |L1.25464|
006362  496b              LDR      r1,|L1.25872|
006364  398c              SUBS     r1,r1,#0x8c
006366  486b              LDR      r0,|L1.25876|
006368  f7fffffe          BL       strstr
00636c  2800              CMP      r0,#0
00636e  d103              BNE      |L1.25464|
006370  4869              LDR      r0,|L1.25880|
006372  6800              LDR      r0,[r0,#0]  ; tout
006374  2805              CMP      r0,#5
006376  ddee              BLE      |L1.25430|
                  |L1.25464|
;;;959    											{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;960    											}
;;;961    											clear();//uart_putchar(UART1_BASE_PTR,0x1a);
006378  f7fffffe          BL       clear
;;;962    											memset(data,0,strlen(data));
00637c  4867              LDR      r0,|L1.25884|
00637e  f7fffffe          BL       strlen
006382  4601              MOV      r1,r0
006384  9001              STR      r0,[sp,#4]
006386  4865              LDR      r0,|L1.25884|
006388  f7fffffe          BL       __aeabi_memclr
;;;963    											clear();
00638c  f7fffffe          BL       clear
                  |L1.25488|
006390  e001              B        |L1.25494|
                  |L1.25490|
;;;964    										//log_it();			//otherwize log it					
;;;965    									}
;;;966    } // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;967    else
;;;968    {
;;;969    	send_chunk();
006392  f7fffffe          BL       send_chunk
                  |L1.25494|
006396  f7fefdda          BL       |L1.20302|
;;;970    }		
;;;971    /******************sleep checker end**********************/		
;;;972    		}
;;;973    /******************while end**********************/		
;;;974    	} 
;;;975    /******************main end***********************/
;;;976    }
;;;977    /********************************************************************/
                          ENDP

                  HardFault_Handler PROC
;;;984    
;;;985    void HardFault_Handler()
00639a  b510              PUSH     {r4,lr}
;;;986    {	long ppp=0;
00639c  2400              MOVS     r4,#0
;;;987    
;;;988    	RESET_OFF;
00639e  2020              MOVS     r0,#0x20
0063a0  495f              LDR      r1,|L1.25888|
0063a2  6088              STR      r0,[r1,#8]
;;;989    	RESET_OFF;
0063a4  6088              STR      r0,[r1,#8]
;;;990    for(ppp=0;ppp<999999; ppp++);	
0063a6  bf00              NOP      
0063a8  e000              B        |L1.25516|
                  |L1.25514|
0063aa  1c64              ADDS     r4,r4,#1
                  |L1.25516|
0063ac  485d              LDR      r0,|L1.25892|
0063ae  4284              CMP      r4,r0
0063b0  dbfb              BLT      |L1.25514|
;;;991    	
;;;992    	RESET_ON;
0063b2  2020              MOVS     r0,#0x20
0063b4  495a              LDR      r1,|L1.25888|
0063b6  6048              STR      r0,[r1,#4]
;;;993    	RESET_ON;
0063b8  6048              STR      r0,[r1,#4]
;;;994    for(ppp=0;ppp<999999; ppp++);
0063ba  2400              MOVS     r4,#0
0063bc  e000              B        |L1.25536|
                  |L1.25534|
0063be  1c64              ADDS     r4,r4,#1
                  |L1.25536|
0063c0  4858              LDR      r0,|L1.25892|
0063c2  4284              CMP      r4,r0
0063c4  dbfb              BLT      |L1.25534|
;;;995    
;;;996    RESET_OFF;
0063c6  2020              MOVS     r0,#0x20
0063c8  4955              LDR      r1,|L1.25888|
0063ca  6088              STR      r0,[r1,#8]
;;;997    	RESET_OFF;
0063cc  6088              STR      r0,[r1,#8]
;;;998    	delay(100);	
0063ce  2064              MOVS     r0,#0x64
0063d0  f7fffffe          BL       delay
;;;999    	RESET_ON;
0063d4  2020              MOVS     r0,#0x20
0063d6  4952              LDR      r1,|L1.25888|
0063d8  6048              STR      r0,[r1,#4]
;;;1000   	RESET_ON;	
0063da  6048              STR      r0,[r1,#4]
;;;1001   	delay(100);	
0063dc  2064              MOVS     r0,#0x64
0063de  f7fffffe          BL       delay
;;;1002   }
0063e2  bd10              POP      {r4,pc}
;;;1003   
                          ENDP

                  LPTimer_IRQHandler PROC
;;;1005   
;;;1006    void LPTimer_IRQHandler(void)
0063e4  b510              PUSH     {r4,lr}
;;;1007   {
;;;1008   lpticks+=1;
0063e6  4850              LDR      r0,|L1.25896|
0063e8  6800              LDR      r0,[r0,#0]  ; lpticks
0063ea  1c40              ADDS     r0,r0,#1
0063ec  494e              LDR      r1,|L1.25896|
0063ee  6008              STR      r0,[r1,#0]  ; lpticks
;;;1009   //rtcticks++;
;;;1010   	tout++;tout2++;
0063f0  4849              LDR      r0,|L1.25880|
0063f2  6800              LDR      r0,[r0,#0]  ; tout
0063f4  1c40              ADDS     r0,r0,#1
0063f6  4948              LDR      r1,|L1.25880|
0063f8  6008              STR      r0,[r1,#0]  ; tout
0063fa  484c              LDR      r0,|L1.25900|
0063fc  6800              LDR      r0,[r0,#0]  ; tout2
0063fe  1c40              ADDS     r0,r0,#1
006400  494a              LDR      r1,|L1.25900|
006402  6008              STR      r0,[r1,#0]  ; tout2
;;;1011   	rtcticks2++;
006404  484a              LDR      r0,|L1.25904|
006406  6800              LDR      r0,[r0,#0]  ; rtcticks2
006408  1c40              ADDS     r0,r0,#1
00640a  4949              LDR      r1,|L1.25904|
00640c  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;1012   	if(sleep_flag == 1){aliveping++;}
00640e  4849              LDR      r0,|L1.25908|
006410  6800              LDR      r0,[r0,#0]  ; sleep_flag
006412  2801              CMP      r0,#1
006414  d104              BNE      |L1.25632|
006416  4848              LDR      r0,|L1.25912|
006418  6800              LDR      r0,[r0,#0]  ; aliveping
00641a  1c40              ADDS     r0,r0,#1
00641c  4946              LDR      r1,|L1.25912|
00641e  6008              STR      r0,[r1,#0]  ; aliveping
                  |L1.25632|
;;;1013   	if(rtcticks2 > 1600)
006420  4843              LDR      r0,|L1.25904|
006422  6800              LDR      r0,[r0,#0]  ; rtcticks2
006424  2119              MOVS     r1,#0x19
006426  0189              LSLS     r1,r1,#6
006428  4288              CMP      r0,r1
00642a  dd10              BLE      |L1.25678|
;;;1014   	{
;;;1015   	RESET_OFF;
00642c  2020              MOVS     r0,#0x20
00642e  493c              LDR      r1,|L1.25888|
006430  6088              STR      r0,[r1,#8]
;;;1016   	RESET_OFF;
006432  6088              STR      r0,[r1,#8]
;;;1017   	delay(100);	
006434  2064              MOVS     r0,#0x64
006436  f7fffffe          BL       delay
;;;1018   	RESET_ON;
00643a  2020              MOVS     r0,#0x20
00643c  4938              LDR      r1,|L1.25888|
00643e  6048              STR      r0,[r1,#4]
;;;1019   	RESET_ON;	
006440  6048              STR      r0,[r1,#4]
;;;1020   	delay(100);
006442  2064              MOVS     r0,#0x64
006444  f7fffffe          BL       delay
;;;1021   	rtcticks2 =0;
006448  2000              MOVS     r0,#0
00644a  4939              LDR      r1,|L1.25904|
00644c  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.25678|
;;;1022   	}
;;;1023   
;;;1024     LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
00644e  483b              LDR      r0,|L1.25916|
006450  6800              LDR      r0,[r0,#0]
006452  2180              MOVS     r1,#0x80
006454  4308              ORRS     r0,r0,r1
006456  4939              LDR      r1,|L1.25916|
006458  6008              STR      r0,[r1,#0]
;;;1025     LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
00645a  20c1              MOVS     r0,#0xc1
00645c  6008              STR      r0,[r1,#0]
;;;1026     
;;;1027   }
00645e  bd10              POP      {r4,pc}
;;;1028   
                          ENDP

                  dtr_sleep PROC
;;;1030   
;;;1031   void dtr_sleep()
006460  b538              PUSH     {r3-r5,lr}
;;;1032   {
;;;1033   
;;;1034   test2=GPIOB_PDIR;
006462  482f              LDR      r0,|L1.25888|
006464  3840              SUBS     r0,r0,#0x40
006466  6900              LDR      r0,[r0,#0x10]
006468  4935              LDR      r1,|L1.25920|
00646a  6008              STR      r0,[r1,#0]  ; test2
;;;1035   memset(at_,0,strlen(at_));
00646c  4835              LDR      r0,|L1.25924|
00646e  f7fffffe          BL       strlen
006472  4604              MOV      r4,r0
006474  4621              MOV      r1,r4
006476  4833              LDR      r0,|L1.25924|
006478  f7fffffe          BL       __aeabi_memclr
;;;1036   sprintf(at_,"\n\n\n GPIOB = %d \n\n\n ",test2);	
00647c  4830              LDR      r0,|L1.25920|
00647e  a132              ADR      r1,|L1.25928|
006480  6802              LDR      r2,[r0,#0]  ; test2
006482  4830              LDR      r0,|L1.25924|
006484  f7fffffe          BL       __2sprintf
;;;1037   send_modem(at_);
006488  482e              LDR      r0,|L1.25924|
00648a  f7fffffe          BL       send_modem
;;;1038   if( test2 == 0 )	
00648e  482c              LDR      r0,|L1.25920|
006490  6800              LDR      r0,[r0,#0]  ; test2
006492  2800              CMP      r0,#0
006494  d107              BNE      |L1.25766|
;;;1039   {
;;;1040   	sleep_flag=1;	
006496  2001              MOVS     r0,#1
006498  4926              LDR      r1,|L1.25908|
00649a  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1041   	DTR_ON;   //sleep
00649c  2080              MOVS     r0,#0x80
00649e  4920              LDR      r1,|L1.25888|
0064a0  3140              ADDS     r1,r1,#0x40
0064a2  6048              STR      r0,[r1,#4]
0064a4  e02c              B        |L1.25856|
                  |L1.25766|
;;;1042   
;;;1043   }
;;;1044   else
;;;1045   {DTR_OFF;
0064a6  2080              MOVS     r0,#0x80
0064a8  491d              LDR      r1,|L1.25888|
0064aa  3140              ADDS     r1,r1,#0x40
0064ac  6088              STR      r0,[r1,#8]
;;;1046   	
;;;1047   	if (sleep_flag != 0  )
0064ae  4821              LDR      r0,|L1.25908|
0064b0  6800              LDR      r0,[r0,#0]  ; sleep_flag
0064b2  2800              CMP      r0,#0
0064b4  d020              BEQ      |L1.25848|
;;;1048   	{
;;;1049   	// wakeup and reset
;;;1050   		sleep_flag=0;
0064b6  2000              MOVS     r0,#0
0064b8  491e              LDR      r1,|L1.25908|
0064ba  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1051       		// not sleep	
;;;1052   //	  HardFault_Handler();
;;;1053   delay(1000);
0064bc  207d              MOVS     r0,#0x7d
0064be  00c0              LSLS     r0,r0,#3
0064c0  f7fffffe          BL       delay
;;;1054   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
0064c4  4825              LDR      r0,|L1.25948|
0064c6  6800              LDR      r0,[r0,#0]  ; tmeout
0064c8  4b25              LDR      r3,|L1.25952|
0064ca  4a11              LDR      r2,|L1.25872|
0064cc  3a14              SUBS     r2,r2,#0x14
0064ce  4910              LDR      r1,|L1.25872|
0064d0  9000              STR      r0,[sp,#0]
0064d2  4824              LDR      r0,|L1.25956|
0064d4  f7fffffe          BL       send_GSM
;;;1055   		
;;;1056   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
0064d8  4820              LDR      r0,|L1.25948|
0064da  6800              LDR      r0,[r0,#0]  ; tmeout
0064dc  4b20              LDR      r3,|L1.25952|
0064de  4a0c              LDR      r2,|L1.25872|
0064e0  3a14              SUBS     r2,r2,#0x14
0064e2  490b              LDR      r1,|L1.25872|
0064e4  9000              STR      r0,[sp,#0]
0064e6  a020              ADR      r0,|L1.25960|
0064e8  f7fffffe          BL       send_GSM
;;;1057   
;;;1058   //send_GSM("\n\nAT+CFUN=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;1059   		
;;;1060   delay(1000);	
0064ec  207d              MOVS     r0,#0x7d
0064ee  00c0              LSLS     r0,r0,#3
0064f0  f7fffffe          BL       delay
;;;1061   clear();	
0064f4  f7fffffe          BL       clear
                  |L1.25848|
;;;1062   	}  
;;;1063   	DTR_OFF;		// not sleep	
0064f8  2080              MOVS     r0,#0x80
0064fa  4909              LDR      r1,|L1.25888|
0064fc  3140              ADDS     r1,r1,#0x40
0064fe  6088              STR      r0,[r1,#8]
                  |L1.25856|
;;;1064   
;;;1065   
;;;1066   
;;;1067   }
;;;1068   
;;;1069   LED_state();LED_state2();
006500  f7fffffe          BL       LED_state
006504  f7fffffe          BL       LED_state2
;;;1070   }
006508  bd38              POP      {r3-r5,pc}
;;;1071   
                          ENDP

00650a  0000              DCW      0x0000
                  |L1.25868|
                          DCD      0x4006b000
                  |L1.25872|
                          DCD      ||.text||+0x8fc
                  |L1.25876|
                          DCD      uart_string_gsm
                  |L1.25880|
                          DCD      tout
                  |L1.25884|
                          DCD      data
                  |L1.25888|
                          DCD      0x400ff080
                  |L1.25892|
                          DCD      0x000f423f
                  |L1.25896|
                          DCD      lpticks
                  |L1.25900|
                          DCD      tout2
                  |L1.25904|
                          DCD      rtcticks2
                  |L1.25908|
                          DCD      sleep_flag
                  |L1.25912|
                          DCD      aliveping
                  |L1.25916|
                          DCD      0x40040000
                  |L1.25920|
                          DCD      test2
                  |L1.25924|
                          DCD      at_
                  |L1.25928|
006548  0a0a0a20          DCB      "\n\n\n GPIOB = %d \n\n\n ",0
00654c  4750494f
006550  42203d20
006554  2564200a
006558  0a0a2000
                  |L1.25948|
                          DCD      tmeout
                  |L1.25952|
                          DCD      ||.text||+0xd54
                  |L1.25956|
                          DCD      ||.text||+0x3da0
                  |L1.25960|
006568  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
00656c  2b475356
006570  0d0a00  
006573  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        30
                  latest
                          %        10
                  ignstr
                          %        9
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  uart_string_gps
                          %        3000
                  data2
                          %        300
                  exception
                          %        200
                  ||ip||
                          %        100
                  port
                          %        10
                  at_
                          %        100
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  _rtcticks
                          %        10
                  imei
                          %        20
                  sd_data
                          %        1400

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a41542b          DCB      "\nAT+CMGS=""%s""\r\n",0
000004  434d4753
000008  3d222573
00000c  220d0a00
000010  4552524f          DCB      "ERROR:",0
000014  523a00  
000017  00                DCB      0
000018  4552524f          DCB      "ERROR\r\n",0
00001c  520d0a00
000020  3e00              DCB      ">",0
000022  00                DCB      0
000023  00                DCB      0
000024  2b434d47          DCB      "+CMGS:",0
000028  533a00  
00002b  00                DCB      0
00002c  4f4b00            DCB      "OK",0
00002f  00                DCB      0
000030  0a41542b          DCB      "\nAT+FSCREATE=C:\\IGN.TXT\r\n",0
000034  46534352
000038  45415445
00003c  3d433a5c
000040  49474e2e
000044  5458540d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0
00004c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n",0
000050  2b465357
000054  52495445
000058  3d433a5c
00005c  49474e2e
000060  5458542c
000064  302c362c
000068  31300d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  4f4b0d0a          DCB      "OK\r\n",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  0a494f4e          DCB      "\nION\n\n\n\n",0
00007c  0a0a0a0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
000084  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
000088  46534352
00008c  45415445
000090  3d433a5c
000094  49505f50
000098  4f52542e
00009c  5458540d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",0
0000a8  2b465357
0000ac  52495445
0000b0  3d433a5c
0000b4  49505f50
0000b8  4f52542e
0000bc  5458542c
0000c0  302c2564
0000c4  2c31300d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
0000cc  7c49507c          DCB      "|IP|",0
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  7c504f52          DCB      "|PORT|",0
0000d8  547c00  
0000db  00                DCB      0
0000dc  7c00              DCB      "|",0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4552524f          DCB      "ERROR",0
0000e4  5200    
0000e6  00                DCB      0
0000e7  00                DCB      0
0000e8  524d4300          DCB      "RMC",0
0000ec  47474100          DCB      "GGA",0
0000f0  0d0a0a0a          DCB      "\r\n\n\nAT+GSN\r\n",0
0000f4  41542b47
0000f8  534e0d0a
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
000100  0d0a0d0a          DCB      "\r\n\r\nAT+CBC\r\n",0
000104  41542b43
000108  42430d0a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
000110  256400            DCB      "%d",0
000113  00                DCB      0
000114  256600            DCB      "%f",0
000117  00                DCB      0
000118  2c00              DCB      ",",0
00011a  00                DCB      0
00011b  00                DCB      0
00011c  2c463d00          DCB      ",F=",0
000120  25642c00          DCB      "%d,",0
000124  41433d00          DCB      "AC=",0
000128  2c493d00          DCB      ",I=",0
00012c  2c42522a          DCB      ",BR*",0
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
000134  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
000138  46534352
00013c  45415445
000140  3d433a5c
000144  494e5445
000148  5256414c
00014c  2e545854
000150  0d0a00  
000153  00                DCB      0
000154  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",0
000158  2b465357
00015c  52495445
000160  3d433a5c
000164  494e5445
000168  5256414c
00016c  2e545854
000170  2c302c25
000174  642c3130
000178  0d0a00  
00017b  00                DCB      0
00017c  7c494e54          DCB      "|INTERVAL|",0
000180  45525641
000184  4c7c00  
000187  00                DCB      0
000188  0a41542b          DCB      "\nAT+FSCREATE=C:\\APN.TXT\r\n",0
00018c  46534352
000190  45415445
000194  3d433a5c
000198  41504e2e
00019c  5458540d
0001a0  0a00    
0001a2  00                DCB      0
0001a3  00                DCB      0
0001a4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",0
0001a8  2b465357
0001ac  52495445
0001b0  3d433a5c
0001b4  41504e2e
0001b8  5458542c
0001bc  302c2564
0001c0  2c31300d
0001c4  0a00    
0001c6  00                DCB      0
0001c7  00                DCB      0
0001c8  0a0a4154          DCB      "\n\nAT\r\n",0
0001cc  0d0a00  
0001cf  00                DCB      0
0001d0  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
0001d4  2b475356
0001d8  0d0a00  
0001db  00                DCB      0
0001dc  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
0001e0  2b434d47
0001e4  463d310a
0001e8  0a00    
0001ea  00                DCB      0
0001eb  00                DCB      0
0001ec  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
0001f0  2b435343
0001f4  413f0d0a
0001f8  00      
0001f9  00                DCB      0
0001fa  00                DCB      0
0001fb  00                DCB      0
0001fc  0d0a4154          DCB      "\r\nAT+CMGR=1\r\n",0
000200  2b434d47
000204  523d310d
000208  0a00    
00020a  00                DCB      0
00020b  00                DCB      0
00020c  4f574e45          DCB      "OWNER",0
000210  5200    
000212  00                DCB      0
000213  00                DCB      0
000214  4c4f4341          DCB      "LOCATION",0
000218  54494f4e
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0
000220  494e5445          DCB      "INTERVAL_",0
000224  5256414c
000228  5f00    
00022a  00                DCB      0
00022b  00                DCB      0
00022c  53544152          DCB      "START",0
000230  5400    
000232  00                DCB      0
000233  00                DCB      0
000234  4f574e45          DCB      "OWNER1",0
000238  523100  
00023b  00                DCB      0
00023c  4f574e45          DCB      "OWNER2",0
000240  523200  
000243  00                DCB      0
000244  4f574e45          DCB      "OWNER3",0
000248  523300  
00024b  00                DCB      0
00024c  44454255          DCB      "DEBUG",0
000250  4700    
000252  00                DCB      0
000253  00                DCB      0
000254  52455345          DCB      "RESET",0
000258  5400    
00025a  00                DCB      0
00025b  00                DCB      0
00025c  495000            DCB      "IP",0
00025f  00                DCB      0
000260  53554f57          DCB      "SUOWNER",0
000264  4e455200
000268  534f574e          DCB      "SOWNER",0
00026c  455200  
00026f  00                DCB      0
000270  49474e49          DCB      "IGNITION ON",0
000274  54494f4e
000278  204f4e00
00027c  49474e49          DCB      "IGNITION OFF",0
000280  54494f4e
000284  204f4646
000288  00      
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
00028c  49474e53          DCB      "IGNSTAT",0
000290  54415400
000294  0a546865          DCB      "\nThere is an Emergency please help:\nCoordinates:%sN,%"
000298  72652069
00029c  7320616e
0002a0  20456d65
0002a4  7267656e
0002a8  63792070
0002ac  6c656173
0002b0  65206865
0002b4  6c703a0a
0002b8  436f6f72
0002bc  64696e61
0002c0  7465733a
0002c4  25734e2c
0002c8  25      
0002c9  73450a68          DCB      "sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&o"
0002cd  74747073
0002d1  3a2f2f77
0002d5  77772e67
0002d9  6f6f676c
0002dd  652e636f
0002e1  6d2f7365
0002e5  61726368
0002e9  3f713d25
0002ed  73256332
0002f1  43257326
0002f5  69653d75
0002f9  74662d38
0002fd  266f    
0002ff  653d7574          DCB      "e=utf-8\n",0
000303  662d380a
000307  00      
000308  0d0a4154          DCB      "\r\nAT+CPBR=1\r\n",0
00030c  2b435042
000310  523d310d
000314  0a00    
000316  00                DCB      0
000317  00                DCB      0
000318  0d0a4154          DCB      "\r\nAT+CPBR=2\r\n",0
00031c  2b435042
000320  523d320d
000324  0a00    
000326  00                DCB      0
000327  00                DCB      0
000328  0a436f6f          DCB      "\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://"
00032c  7264696e
000330  61746573
000334  203a2025
000338  73204e2c
00033c  20257320
000340  450a5370
000344  65656420
000348  3a202573
00034c  206b6d70
000350  680a0a68
000354  74747073
000358  3a2f2f  
00035b  7777772e          DCB      "www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",0
00035f  676f6f67
000363  6c652e63
000367  6f6d2f73
00036b  65617263
00036f  683f713d
000373  25732563
000377  32432573
00037b  2669653d
00037f  7574662d
000383  38266f65
000387  3d757466
00038b  2d380a00
00038f  00                DCB      0
000390  0d0a4154          DCB      "\r\nAT+CMGD=1,4\r\n",0
000394  2b434d47
000398  443d312c
00039c  340d0a00
0003a0  257300            DCB      "%s",0
0003a3  00                DCB      0
0003a4  0a41542b          DCB      "\nAT+FSCREATE=D:\\LOG.TXT\r\n",0
0003a8  46534352
0003ac  45415445
0003b0  3d443a5c
0003b4  4c4f472e
0003b8  5458540d
0003bc  0a00    
0003be  00                DCB      0
0003bf  00                DCB      0
0003c0  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
0003c4  46534352
0003c8  45415445
0003cc  3d433a5c
0003d0  4c4f472e
0003d4  5458540d
0003d8  0a00    
0003da  00                DCB      0
0003db  00                DCB      0
0003dc  3130342e          DCB      "104.236.203.4",0
0003e0  3233362e
0003e4  3230332e
0003e8  3400    
0003ea  00                DCB      0
0003eb  00                DCB      0
0003ec  35353535          DCB      "5555",0
0003f0  00      
0003f1  00                DCB      0
0003f2  00                DCB      0
0003f3  00                DCB      0
0003f4  3500              DCB      "5",0
0003f6  00                DCB      0
0003f7  00                DCB      0
0003f8  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n\r\n",0
0003fc  542b434d
000400  47443d31
000404  2c340d0a
000408  0d0a00  
00040b  00                DCB      0
00040c  0a00              DCB      "\n",0
00040e  00                DCB      0
00040f  00                DCB      0
000410  43480a00          DCB      "CH\n",0
000414  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
000418  2b465357
00041c  52495445
000420  3d25735c
000424  4c4f472e
000428  5458542c
00042c  312c2564
000430  2c31300a
000434  0a00    
000436  00                DCB      0
000437  00                DCB      0
000438  0a0a2041          DCB      "\n\n AT+CFUN=1,1\r\n",0
00043c  542b4346
000440  554e3d31
000444  2c310d0a
000448  00      
000449  00                DCB      0
00044a  00                DCB      0
00044b  00                DCB      0
00044c  0d0d0a41          DCB      "\r\r\nAT+CMGD=1,4\r\n\n\n\n\n",0
000450  542b434d
000454  47443d31
000458  2c340d0a
00045c  0a0a0a0a
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
000464  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
000468  2b435042
00046c  533d2253
000470  4d220d0a
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
000478  0d0a4154          DCB      "\r\nAT+CPBW=1\r\r\n\n",0
00047c  2b435042
000480  573d310d
000484  0d0a0a00
000488  0d0a4154          DCB      "\r\nAT+CPBW=1,""%s"",129,""OWNER1""\r\n",0
00048c  2b435042
000490  573d312c
000494  22257322
000498  2c313239
00049c  2c224f57
0004a0  4e455231
0004a4  220d0a00
0004a8  0a0a4154          DCB      "\n\nAT+CPBS=""ME""\r\n",0
0004ac  2b435042
0004b0  533d224d
0004b4  45220d0a
0004b8  00      
0004b9  00                DCB      0
0004ba  00                DCB      0
0004bb  00                DCB      0
0004bc  0d0a4154          DCB      "\r\nAT+CPBW=2\r\r\n\n",0
0004c0  2b435042
0004c4  573d320d
0004c8  0d0a0a00
0004cc  0d0a4154          DCB      "\r\nAT+CPBW=2,""%s"",129,""OWNER2""\r\n",0
0004d0  2b435042
0004d4  573d322c
0004d8  22257322
0004dc  2c313239
0004e0  2c224f57
0004e4  4e455232
0004e8  220d0a00
0004ec  0d0a4154          DCB      "\r\nAT+CPBW=3\r\r\n\n",0
0004f0  2b435042
0004f4  573d330d
0004f8  0d0a0a00
0004fc  0d0a4154          DCB      "\r\nAT+CPBW=3,""%s"",129,""OWNER3""\r\n",0
000500  2b435042
000504  573d332c
000508  22257322
00050c  2c313239
000510  2c224f57
000514  4e455233
000518  220d0a00
00051c  0d0a4154          DCB      "\r\nAT+CPBW=4\r\r\n\n",0
000520  2b435042
000524  573d340d
000528  0d0a0a00
00052c  0d0a4154          DCB      "\r\nAT+CPBW=4,""%s"",129,""SOWNER""\r\n",0
000530  2b435042
000534  573d342c
000538  22257322
00053c  2c313239
000540  2c22534f
000544  574e4552
000548  220d0a00
00054c  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n",0
000550  542b434d
000554  47443d31
000558  2c340d0a
00055c  00      
00055d  00                DCB      0
00055e  00                DCB      0
00055f  00                DCB      0
000560  0a41542b          DCB      "\nAT+FSCREATE=C:\\CURSOR.TXT\r\n",0
000564  46534352
000568  45415445
00056c  3d433a5c
000570  43555253
000574  4f522e54
000578  58540d0a
00057c  00      
00057d  00                DCB      0
00057e  00                DCB      0
00057f  00                DCB      0
000580  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n",0
000584  2b465357
000588  52495445
00058c  3d433a5c
000590  43555253
000594  4f522e54
000598  58542c30
00059c  2c35302c
0005a0  31300d0a
0005a4  00      
0005a5  00                DCB      0
0005a6  00                DCB      0
0005a7  00                DCB      0
0005a8  0a2c256c          DCB      "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
0005ac  642c256c
0005b0  642c256c
0005b4  642c0a0a
0005b8  0a0a0a0a
0005bc  0a0a0a0a
0005c0  0a0a0a0a
0005c4  0a0a0a0a
0005c8  0a0a    
0005ca  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
0005ce  0a0a0a0a
0005d2  0a0a0a0a
0005d6  0a0a0a0a
0005da  0a0a0a0a
0005de  0a0a0a0a
0005e2  0a0a0a0a
0005e6  0a0a00            DCB      "\n\n",0
0005e9  00                DCB      0
0005ea  00                DCB      0
0005eb  00                DCB      0
0005ec  0d0a0d0a          DCB      "\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",0
0005f0  41542b46
0005f4  53464c53
0005f8  495a453d
0005fc  25735c4c
000600  4f472e54
000604  58540d0a
000608  00      
000609  00                DCB      0
00060a  00                DCB      0
00060b  00                DCB      0
00060c  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>          \r\n"
000610  20202020
000614  20202020
000618  20202020
00061c  20203c25
000620  643e2020
000624  203c2564
000628  3e202020
00062c  3c3d2564
000630  3e202020
000634  20202020
000638  2020200d
00063c  0a      
00063d  0d0a00            DCB      "\r\n",0
000640  0d0a0d0a          DCB      "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",0
000644  41542b46
000648  53524541
00064c  443d2573
000650  5c4c4f47
000654  2e545854
000658  2c312c31
00065c  3130302c
000660  25640d0a
000664  00      
000665  00                DCB      0
000666  00                DCB      0
000667  00                DCB      0
000668  53454e44          DCB      "SEND OK",0
00066c  204f4b00
000670  4641494c          DCB      "FAIL",0
000674  00      
000675  00                DCB      0
000676  00                DCB      0
000677  00                DCB      0
000678  44454143          DCB      "DEACT",0
00067c  5400    
00067e  00                DCB      0
00067f  00                DCB      0
000680  65786365          DCB      "exception : COMPARED RESPONCES IN THE DATA\n\n\n\n",0
000684  7074696f
000688  6e203a20
00068c  434f4d50
000690  41524544
000694  20524553
000698  504f4e43
00069c  45532049
0006a0  4e205448
0006a4  45204441
0006a8  54410a0a
0006ac  0a0a00  
0006af  00                DCB      0
0006b0  434f4e4e          DCB      "CONNECT",0
0006b4  45435400
0006b8  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
0006bc  2b434950
0006c0  53454e44
0006c4  0d0a00  
0006c7  00                DCB      0
0006c8  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
0006cc  2b434655
0006d0  4e3d300d
0006d4  0d0a0a00
0006d8  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
0006dc  494e5345
0006e0  52544544
0006e4  0d0a4f4b
0006e8  00      
0006e9  00                DCB      0
0006ea  00                DCB      0
0006eb  00                DCB      0
0006ec  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
0006f0  2b434655
0006f4  4e3d310d
0006f8  0a00    
0006fa  00                DCB      0
0006fb  00                DCB      0
0006fc  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
000700  2b434950
000704  53485554
000708  0d0a00  
00070b  00                DCB      0
00070c  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
000710  2b435354
000714  543d2225
000718  73220d0a
00071c  00      
00071d  00                DCB      0
00071e  00                DCB      0
00071f  00                DCB      0
000720  0d0a4154          DCB      "\r\nAT+CIICR\r\r\n",0
000724  2b434949
000728  43520d0d
00072c  0a00    
00072e  00                DCB      0
00072f  00                DCB      0
000730  0d0a4154          DCB      "\r\nAT+CIFSR\r\r\n",0
000734  2b434946
000738  53520d0d
00073c  0a00    
00073e  00                DCB      0
00073f  00                DCB      0
000740  302e302e          DCB      "0.0.0.0",0
000744  302e3000
000748  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
00074c  2b434950
000750  53544152
000754  543d2254
000758  4350222c
00075c  22257322
000760  2c222573
000764  220d0a00
000768  434f4e4e          DCB      "CONNECT FAIL",0
00076c  45435420
000770  4641494c
000774  00      
000775  00                DCB      0
000776  00                DCB      0
000777  00                DCB      0
000778  0d0a4154          DCB      "\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",0
00077c  2b465343
000780  52454154
000784  453d2573
000788  5c4c4f47
00078c  2e545854
000790  0d0a00  
000793  00                DCB      0
000794  0a41542b          DCB      "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n",0
000798  46535245
00079c  41443d43
0007a0  3a5c4150
0007a4  4e2e5458
0007a8  542c302c
0007ac  3130302c
0007b0  310d0a00
0007b4  0a41542b          DCB      "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n",0
0007b8  46535245
0007bc  41443d43
0007c0  3a5c4947
0007c4  4e2e5458
0007c8  542c302c
0007cc  3130302c
0007d0  310d0a00
0007d4  494f4e00          DCB      "ION",0
0007d8  494f4646          DCB      "IOFF",0
0007dc  00      
0007dd  00                DCB      0
0007de  00                DCB      0
0007df  00                DCB      0
0007e0  0a41542b          DCB      "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n",0
0007e4  46535245
0007e8  41443d43
0007ec  3a5c4355
0007f0  52534f52
0007f4  2e545854
0007f8  2c302c31
0007fc  30302c31
000800  0d0a00  
000803  00                DCB      0
000804  0a494f46          DCB      "\nIOFF\n\n\n\n",0
000808  460a0a0a
00080c  0a00    
00080e  00                DCB      0
00080f  00                DCB      0
000810  0a41542b          DCB      "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n",0
000814  46535245
000818  41443d43
00081c  3a5c4950
000820  5f504f52
000824  542e5458
000828  542c302c
00082c  3130302c
000830  310d0a00
000834  0a41542b          DCB      "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n",0
000838  46535245
00083c  41443d43
000840  3a5c494e
000844  54455256
000848  414c2e54
00084c  58542c30
000850  2c313030
000854  2c310d0a
000858  00      

                          AREA ||.data||, DATA, ALIGN=3

                  cond200
                          DCD      0x00000000
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  tout
                          DCD      0x00000000
                  tout2
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  temp
                          DCD      0x00000000
                  flagch
                          DCD      0x00000000
                  cond121
000028  00000000          DCB      0x00,0x00,0x00,0x00
                  cond122
                          DCD      0x00000000
                  cond123
                          DCD      0x00000000
                  cond124
                          DCD      0x00000000
                  len
                          DCD      0x00000000
                  cond
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                  con1d
                          DCD      0x00000000
                  stcond1
                          DCD      0x00000000
                  stcond2
                          DCD      0x00000000
                  stcond3
                          DCD      0x00000000
                  stcond4
                          DCD      0x00000000
                  time111
                          DCD      0x00000000
                  timeout222
                          DCD      0x00000000
                  qweq
                          DCD      0x00000000
                  i11
                          DCD      0x00000000
                  j11
                          DCD      0x00000000
                  temp11
                          DCD      0x00000000
                  ||sz1||
                          DCD      0x00000000
                  ||sz2||
                          DCD      0x00000000
                  send_SOS
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  stateCount
00007c  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  e
                          DCD      0x00000000
                  adcsa
                          DCD      0x00000000
                  adcin
                          DCD      0x00000000
                  adcsample
                          DCD      0x00000000
                  fuel
                          DCD      0x00000000
                  fuelstr
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
                  ||rez||
0000a8  00000000          DCFS     0x00000000 ; 0
                  fact
0000ac  3f800000          DCFS     0x3f800000 ; 1
                  d
                          DCD      0x00000000
                  point_seen
                          DCD      0x00000000
                  cond201
                          DCD      0x00000000
                  cond1
                          DCD      0x00000000
                  cond2
                          DCD      0x00000000
                  cond3
                          DCD      0x00000000
                  cond4
                          DCD      0x00000000
                  cond5
                          DCD      0x00000000
                  cond6
                          DCD      0x00000000
                  cond7
                          DCD      0x00000000
                  cond8
                          DCD      0x00000000
                  cond9
                          DCD      0x00000000
                  cond10
                          DCD      0x00000000
                  cond11
                          DCD      0x00000000
                  cond12
                          DCD      0x00000000
                  cond13
                          DCD      0x00000000
                  cond14
                          DCD      0x00000000
                  cond15
                          DCD      0x00000000
                  ass
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  ||fsz||
                          DCD      0x00000000
                  log0
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  qwe
                          DCD      0x00000000
                  ||k5||
                          DCD      0x00000000
                  enters
                          DCD      0x00000000
                  cursorvaluepr
                          DCD      0x00000000
                  cursorvaluene
                          DCD      0x00000000
                  ||q1||
                          DCD      0x00000000
                  ||q2||
                          DCD      0x00000000
                  ||q3||
                          DCD      0x00000000
                  ||q4||
                          DCD      0x00000000
                  cntendl
                          DCD      0x00000000
                  prev
                          %        8
                  ||iz||
                          DCD      0x00000000
                  a
                          %        8
                  b
                          %        8
                  c
                          %        8
                  ||hh||
                          DCD      0x00000000
                  mm1
                          DCD      0x00000000
                  mm2
                          DCD      0x00000000
                          DCD      0x00000000
                  ||a1||
                          %        8
                  ||b1||
                          %        8
                  ||c1||
                          %        8
                  hh11
                          %        8
                  mm11
                          %        8
                  mm22
                          %        8
                  logged
                          DCD      0x00000000
                  check
                          DCD      0x00000000
                  stcond5
                          DCD      0x00000000
                  acstr
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
                  breach
                          DCD      0x00000000
                  aliveping
                          DCD      0x00000000
                  sleep_flag
                          DCD      0x00000000
                  tmeout
                          DCD      0x00000007
                  int_erval
                          DCD      0x00000001
                  drive
                          DCD      0x00000000
0001c0  00                DCB      0x00
                  apn
0001c1  697361            DCB      0x69,0x73,0x61
0001c4  66650000          DCB      0x66,0x65,0x00,0x00
                          %        16
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
                  speed
0001dc  00000000          DCFS     0x00000000 ; 0
                  lpticks
                          DCD      0x00000000
                  voltagecbc
                          DCD      0x00000000
                  ||csq||
                          DCD      0x00000000
                  rtcticks
                          DCD      0x00000000
                  rtcticks2
                          DCD      0x00000000
                  imeiinc
                          DCD      0x00000000
                  ticks_ch
0001f8  00                DCB      0x00
                  save_rtcticks
0001f9  00                DCB      0x00
                  velocity
0001fa  0000              DCB      0x00,0x00
0001fc  000000            DCB      0x00,0x00,0x00
                  interval
0001ff  00                DCB      0x00
                          DCD      0x00000000
                  timeout
                          DCD      0x00000000
                  ||pr||
000208  00000000          DCFS     0x00000000 ; 0
                  ||la||
00020c  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
000224  00                DCB      0x00
                  ringflag
000225  00                DCB      0x00
                  lptmr_interrupt
000226  0000              DCB      0x00,0x00
                  time52
                          DCD      0x0000000f
                  cond277
                          DCD      0x00000000
                  cond20077
                          DCD      0x00000000
                  ||sz||
                          DCD      0x00000000
                  ||cn||
                          DCD      0x00000000
                  ||res||
                          DCD      0x00000000
                  test2
                          DCD      0x00000000

                          AREA ||i.clear||, COMGROUP=clear, CODE, READONLY, ALIGN=2

                  clear PROC
;;;1418   	
;;;1419   __inline void clear()
000000  4808              LDR      r0,|L18.36|
;;;1420   {
;;;1421     if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7900              LDRB     r0,[r0,#4]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L18.20|
;;;1422       {
;;;1423         temp = UART_D_REG(UART1_BASE_PTR);
00000c  4805              LDR      r0,|L18.36|
00000e  79c0              LDRB     r0,[r0,#7]
000010  4905              LDR      r1,|L18.40|
000012  6008              STR      r0,[r1,#0]  ; temp
                  |L18.20|
;;;1424   		}
;;;1425   		
;;;1426   		UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000014  4803              LDR      r0,|L18.36|
000016  7900              LDRB     r0,[r0,#4]
000018  2118              MOVS     r1,#0x18
00001a  4308              ORRS     r0,r0,r1
00001c  4901              LDR      r1,|L18.36|
00001e  7108              STRB     r0,[r1,#4]
;;;1427   }	
000020  4770              BX       lr
;;;1428   
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0x4006b000
                  |L18.40|
                          DCD      temp

                          AREA ||i.delay||, COMGROUP=delay, CODE, READONLY, ALIGN=2

                  delay PROC
;;;81     /*************************** delay*****************************************/
;;;82     __inline void delay(int32 delaytime)
000000  e00d              B        |L25.30|
                  |L25.2|
;;;83     {
;;;84      while(delaytime--)
;;;85         {for(i=2000;i>0;i--)
000002  217d              MOVS     r1,#0x7d
000004  0109              LSLS     r1,r1,#4
000006  4a08              LDR      r2,|L25.40|
000008  6011              STR      r1,[r2,#0]  ; i
00000a  e004              B        |L25.22|
                  |L25.12|
00000c  4906              LDR      r1,|L25.40|
00000e  6809              LDR      r1,[r1,#0]  ; i
000010  1e49              SUBS     r1,r1,#1
000012  4a05              LDR      r2,|L25.40|
000014  6011              STR      r1,[r2,#0]  ; i
                  |L25.22|
000016  4904              LDR      r1,|L25.40|
000018  6809              LDR      r1,[r1,#0]  ; i
00001a  2900              CMP      r1,#0
00001c  dcf6              BGT      |L25.12|
                  |L25.30|
00001e  4601              MOV      r1,r0                 ;84
000020  1e40              SUBS     r0,r0,#1              ;84
000022  2900              CMP      r1,#0                 ;84
000024  d1ed              BNE      |L25.2|
;;;86     			{	
;;;87     			}			// about 1 ms
;;;88         }
;;;89     }
000026  4770              BX       lr
;;;90      void delay2(int delaytime)
                          ENDP

                  |L25.40|
                          DCD      i

                          AREA ||i.send_modem||, COMGROUP=send_modem, CODE, READONLY, ALIGN=2

                  send_modem PROC
;;;1394   
;;;1395   __inline void send_modem(char ch[])
000000  b570              PUSH     {r4-r6,lr}
;;;1396   	{	
000002  4605              MOV      r5,r0
;;;1397   						unsigned char i20=0;
000004  2400              MOVS     r4,#0
;;;1398   						for(i20=0;i20<strlen(ch);i20++)
000006  bf00              NOP      
000008  e005              B        |L32.22|
                  |L32.10|
;;;1399   						{
;;;1400   							uart_putchar(UART1_BASE_PTR, ch[i20]);//clear();
00000a  5d29              LDRB     r1,[r5,r4]
00000c  4805              LDR      r0,|L32.36|
00000e  f7fffffe          BL       uart_putchar
000012  1c60              ADDS     r0,r4,#1              ;1398
000014  b2c4              UXTB     r4,r0                 ;1398
                  |L32.22|
000016  4628              MOV      r0,r5                 ;1398
000018  f7fffffe          BL       strlen
00001c  42a0              CMP      r0,r4                 ;1398
00001e  d8f4              BHI      |L32.10|
;;;1401   						}
;;;1402   						
;;;1403   	}
000020  bd70              POP      {r4-r6,pc}
;;;1404   
                          ENDP

000022  0000              DCW      0x0000
                  |L32.36|
                          DCD      0x4006b000

                          AREA ||i.send_GSM||, COMGROUP=send_GSM, CODE, READONLY, ALIGN=2

                  send_GSM PROC
;;;1440   
;;;1441   __inline void send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1442   {	 
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;1443   
;;;1444   		//uart_putchar(UART1_BASE_PTR,0xA);
;;;1445   		//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1446   	clear();
00000c  f7fffffe          BL       clear
;;;1447   	tout=0;
000010  2000              MOVS     r0,#0
000012  4932              LDR      r1,|L39.220|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;1448   //	qwe=strlen(uart_string_gsm);
;;;1449   		memset(uart_string_gsm,0,5000);
000016  4932              LDR      r1,|L39.224|
000018  4832              LDR      r0,|L39.228|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1450   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4931              LDR      r1,|L39.232|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1451   	 						//timer counts to wait for characters in uart 1 
;;;1452   		clear();
000024  f7fffffe          BL       clear
;;;1453   		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;1454   		uart_putchar(UART1_BASE_PTR,'\n');	uart_putchar(UART1_BASE_PTR,'\n');	
00002e  210a              MOVS     r1,#0xa
000030  482e              LDR      r0,|L39.236|
000032  f7fffffe          BL       uart_putchar
000036  210a              MOVS     r1,#0xa
000038  482c              LDR      r0,|L39.236|
00003a  f7fffffe          BL       uart_putchar
;;;1455   	delay(10);
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       delay
;;;1456   //	uart_putchar(UART1_BASE_PTR,'\r');
;;;1457   	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1458   		do
000044  bf00              NOP      
                  |L39.70|
;;;1459   		{
;;;1460   			
;;;1461   //					time111--;
;;;1462   //				  timeout222--;
;;;1463   
;;;1464   			
;;;1465   	cond122=strstr(uart_string_gsm, responseA);
000046  4827              LDR      r0,|L39.228|
000048  9902              LDR      r1,[sp,#8]
00004a  f7fffffe          BL       strstr
00004e  4928              LDR      r1,|L39.240|
000050  6008              STR      r0,[r1,#0]  ; cond122
;;;1466   	cond123=strstr(uart_string_gsm, responseB);
000052  4621              MOV      r1,r4
000054  4823              LDR      r0,|L39.228|
000056  f7fffffe          BL       strstr
00005a  4926              LDR      r1,|L39.244|
00005c  6008              STR      r0,[r1,#0]  ; cond123
;;;1467     cond124=strstr(uart_string_gsm, responseC);
00005e  4629              MOV      r1,r5
000060  4820              LDR      r0,|L39.228|
000062  f7fffffe          BL       strstr
000066  4924              LDR      r1,|L39.248|
000068  6008              STR      r0,[r1,#0]  ; cond124
;;;1468   	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
00006a  4821              LDR      r0,|L39.240|
00006c  6800              LDR      r0,[r0,#0]  ; cond122
00006e  2800              CMP      r0,#0
000070  d10b              BNE      |L39.138|
000072  4820              LDR      r0,|L39.244|
000074  6800              LDR      r0,[r0,#0]  ; cond123
000076  2800              CMP      r0,#0
000078  d107              BNE      |L39.138|
00007a  4608              MOV      r0,r1
00007c  6800              LDR      r0,[r0,#0]  ; cond124
00007e  2800              CMP      r0,#0
000080  d103              BNE      |L39.138|
000082  4816              LDR      r0,|L39.220|
000084  6800              LDR      r0,[r0,#0]  ; tout
000086  42b0              CMP      r0,r6
000088  dd01              BLE      |L39.142|
                  |L39.138|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L39.144|
                  |L39.142|
00008e  2000              MOVS     r0,#0
                  |L39.144|
000090  491a              LDR      r1,|L39.252|
000092  7008              STRB     r0,[r1,#0]
;;;1469   			
;;;1470   		}while (!cond121);
000094  4608              MOV      r0,r1
000096  7800              LDRB     r0,[r0,#0]  ; cond121
000098  2800              CMP      r0,#0
00009a  d0d4              BEQ      |L39.70|
;;;1471   		clear();
00009c  f7fffffe          BL       clear
;;;1472   		if(tout>timeout){
0000a0  480e              LDR      r0,|L39.220|
0000a2  6800              LDR      r0,[r0,#0]  ; tout
0000a4  42b0              CMP      r0,r6
0000a6  dd17              BLE      |L39.216|
;;;1473   			uart_putchar(UART1_BASE_PTR,'\r');
0000a8  210d              MOVS     r1,#0xd
0000aa  4810              LDR      r0,|L39.236|
0000ac  f7fffffe          BL       uart_putchar
;;;1474   		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000b0  210a              MOVS     r1,#0xa
0000b2  480e              LDR      r0,|L39.236|
0000b4  f7fffffe          BL       uart_putchar
0000b8  211a              MOVS     r1,#0x1a
0000ba  480c              LDR      r0,|L39.236|
0000bc  f7fffffe          BL       uart_putchar
;;;1475   		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000c0  211a              MOVS     r1,#0x1a
0000c2  480a              LDR      r0,|L39.236|
0000c4  f7fffffe          BL       uart_putchar
0000c8  210d              MOVS     r1,#0xd
0000ca  4808              LDR      r0,|L39.236|
0000cc  f7fffffe          BL       uart_putchar
;;;1476   		uart_putchar(UART1_BASE_PTR,'\n');}
0000d0  210a              MOVS     r1,#0xa
0000d2  4806              LDR      r0,|L39.236|
0000d4  f7fffffe          BL       uart_putchar
                  |L39.216|
;;;1477   		//return;
;;;1478   //		return uart_string_gsm;
;;;1479   
;;;1480   		
;;;1481   
;;;1482   
;;;1483   }
0000d8  b005              ADD      sp,sp,#0x14
0000da  bdf0              POP      {r4-r7,pc}
;;;1484   
                          ENDP

                  |L39.220|
                          DCD      tout
                  |L39.224|
                          DCD      0x00001388
                  |L39.228|
                          DCD      uart_string_gsm
                  |L39.232|
                          DCD      ||k2||
                  |L39.236|
                          DCD      0x4006b000
                  |L39.240|
                          DCD      cond122
                  |L39.244|
                          DCD      cond123
                  |L39.248|
                          DCD      cond124
                  |L39.252|
                          DCD      cond121

                          AREA ||i.send_MSG||, COMGROUP=send_MSG, CODE, READONLY, ALIGN=2

                  send_MSG PROC
;;;1486   
;;;1487   __inline char * send_MSG(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1488   {	
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;1489   		qwe=strlen(uart_string_gsm);
00000a  4829              LDR      r0,|L46.176|
00000c  f7fffffe          BL       strlen
000010  4928              LDR      r1,|L46.180|
000012  6008              STR      r0,[r1,#0]  ; qwe
;;;1490   
;;;1491   	
;;;1492   		memset(uart_string_gsm,0,qwe);
000014  4608              MOV      r0,r1
000016  6801              LDR      r1,[r0,#0]  ; qwe
000018  4825              LDR      r0,|L46.176|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1493   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4925              LDR      r1,|L46.184|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1494   	  time111=99999;						//timer counts to wait for characters in uart 1 
000024  4825              LDR      r0,|L46.188|
000026  4926              LDR      r1,|L46.192|
000028  6008              STR      r0,[r1,#0]  ; time111
;;;1495   		clear();
00002a  f7fffffe          BL       clear
;;;1496   		timeout222=2001;
00002e  4825              LDR      r0,|L46.196|
000030  4925              LDR      r1,|L46.200|
000032  6008              STR      r0,[r1,#0]  ; timeout222
;;;1497   		send_modem(string);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       send_modem
;;;1498   		do	{
00003a  bf00              NOP      
                  |L46.60|
;;;1499   			
;;;1500   					time111--;
00003c  4820              LDR      r0,|L46.192|
00003e  6800              LDR      r0,[r0,#0]  ; time111
000040  1e40              SUBS     r0,r0,#1
000042  491f              LDR      r1,|L46.192|
000044  6008              STR      r0,[r1,#0]  ; time111
;;;1501   				  timeout222--;
000046  4820              LDR      r0,|L46.200|
000048  6800              LDR      r0,[r0,#0]  ; timeout222
00004a  1e40              SUBS     r0,r0,#1
00004c  491e              LDR      r1,|L46.200|
00004e  6008              STR      r0,[r1,#0]  ; timeout222
;;;1502   //          if(lptmr_interrupt == 1){
;;;1503   //					//accel_read();
;;;1504   //					detect_motion();
;;;1505   //					lptmr_interrupt = 0;}		
;;;1506   //					if(timeout222 % 400 == 0)
;;;1507   //					{
;;;1508   //						//uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
;;;1509   //					}
;;;1510   			
;;;1511   	cond122=strstr(uart_string_gsm, responseA);
000050  4639              MOV      r1,r7
000052  4817              LDR      r0,|L46.176|
000054  f7fffffe          BL       strstr
000058  491c              LDR      r1,|L46.204|
00005a  6008              STR      r0,[r1,#0]  ; cond122
;;;1512   	cond123=strstr(uart_string_gsm, responseB);
00005c  4621              MOV      r1,r4
00005e  4814              LDR      r0,|L46.176|
000060  f7fffffe          BL       strstr
000064  491a              LDR      r1,|L46.208|
000066  6008              STR      r0,[r1,#0]  ; cond123
;;;1513     cond124=strstr(uart_string_gsm, responseC);
000068  4629              MOV      r1,r5
00006a  4811              LDR      r0,|L46.176|
00006c  f7fffffe          BL       strstr
000070  4918              LDR      r1,|L46.212|
000072  6008              STR      r0,[r1,#0]  ; cond124
;;;1514   	cond121 = (cond122	|| cond123	|| cond124  || (time111<=1))	;			
000074  4815              LDR      r0,|L46.204|
000076  6800              LDR      r0,[r0,#0]  ; cond122
000078  2800              CMP      r0,#0
00007a  d10b              BNE      |L46.148|
00007c  4814              LDR      r0,|L46.208|
00007e  6800              LDR      r0,[r0,#0]  ; cond123
000080  2800              CMP      r0,#0
000082  d107              BNE      |L46.148|
000084  4608              MOV      r0,r1
000086  6800              LDR      r0,[r0,#0]  ; cond124
000088  2800              CMP      r0,#0
00008a  d103              BNE      |L46.148|
00008c  480c              LDR      r0,|L46.192|
00008e  6800              LDR      r0,[r0,#0]  ; time111
000090  2801              CMP      r0,#1
000092  dc01              BGT      |L46.152|
                  |L46.148|
000094  2001              MOVS     r0,#1
000096  e000              B        |L46.154|
                  |L46.152|
000098  2000              MOVS     r0,#0
                  |L46.154|
00009a  490f              LDR      r1,|L46.216|
00009c  7008              STRB     r0,[r1,#0]
;;;1515   			
;;;1516   			
;;;1517   		}while (!cond121);
00009e  4608              MOV      r0,r1
0000a0  7800              LDRB     r0,[r0,#0]  ; cond121
0000a2  2800              CMP      r0,#0
0000a4  d0ca              BEQ      |L46.60|
;;;1518   		clear();
0000a6  f7fffffe          BL       clear
;;;1519   		return uart_string_gsm;
0000aa  4801              LDR      r0,|L46.176|
;;;1520   
;;;1521   }
0000ac  bdf8              POP      {r3-r7,pc}
;;;1522   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L46.176|
                          DCD      uart_string_gsm
                  |L46.180|
                          DCD      qwe
                  |L46.184|
                          DCD      ||k2||
                  |L46.188|
                          DCD      0x0001869f
                  |L46.192|
                          DCD      time111
                  |L46.196|
                          DCD      0x000007d1
                  |L46.200|
                          DCD      timeout222
                  |L46.204|
                          DCD      cond122
                  |L46.208|
                          DCD      cond123
                  |L46.212|
                          DCD      cond124
                  |L46.216|
                          DCD      cond121

                          AREA ||i.send_message||, COMGROUP=send_message, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  send_message PROC
;;;2357   			
;;;2358   __inline	void send_message(char * data2)
000000  b538              PUSH     {r3-r5,lr}
;;;2359   	{memset(uart_string_gsm,0,5000);
000002  4604              MOV      r4,r0
000004  4929              LDR      r1,|L53.172|
000006  482a              LDR      r0,|L53.176|
000008  f7fffffe          BL       __aeabi_memclr
;;;2360   									memset(at_,0,100);
00000c  2164              MOVS     r1,#0x64
00000e  4829              LDR      r0,|L53.180|
000010  f7fffffe          BL       __aeabi_memclr
;;;2361   									sprintf(at_, "\nAT+CMGS=\"%s\"\r\n" ,num2);
000014  4a28              LDR      r2,|L53.184|
000016  4929              LDR      r1,|L53.188|
000018  4826              LDR      r0,|L53.180|
00001a  f7fffffe          BL       __2sprintf
;;;2362   									send_MSG(at_, ">", "ERROR\r\n" , "ERROR:",tmeout);	
00001e  4828              LDR      r0,|L53.192|
000020  6800              LDR      r0,[r0,#0]  ; tmeout
000022  4b28              LDR      r3,|L53.196|
000024  4a28              LDR      r2,|L53.200|
000026  4929              LDR      r1,|L53.204|
000028  9000              STR      r0,[sp,#0]
00002a  4822              LDR      r0,|L53.180|
00002c  f7fffffe          BL       send_MSG
;;;2363   									if( strstr(uart_string_gsm, ">"))
000030  4926              LDR      r1,|L53.204|
000032  481f              LDR      r0,|L53.176|
000034  f7fffffe          BL       strstr
000038  2800              CMP      r0,#0
00003a  d031              BEQ      |L53.160|
;;;2364   									{
;;;2365   										//
;;;2366   										
;;;2367   											for(k=0;k<strlen(data2);k++)
00003c  2000              MOVS     r0,#0
00003e  4924              LDR      r1,|L53.208|
000040  6008              STR      r0,[r1,#0]  ; k
000042  e00c              B        |L53.94|
                  |L53.68|
;;;2368   											{
;;;2369   												
;;;2370   												uart_putchar(UART1_BASE_PTR, data2[k]);
000044  4822              LDR      r0,|L53.208|
000046  6800              LDR      r0,[r0,#0]  ; k
000048  5c21              LDRB     r1,[r4,r0]
00004a  4822              LDR      r0,|L53.212|
00004c  f7fffffe          BL       uart_putchar
;;;2371   												//uart0_putchar(UART0_BASE_PTR, data2[k]);
;;;2372   												clear();
000050  f7fffffe          BL       clear
000054  481e              LDR      r0,|L53.208|
000056  6800              LDR      r0,[r0,#0]            ;2367  ; k
000058  1c40              ADDS     r0,r0,#1              ;2367
00005a  491d              LDR      r1,|L53.208|
00005c  6008              STR      r0,[r1,#0]            ;2367  ; k
                  |L53.94|
00005e  4620              MOV      r0,r4                 ;2367
000060  f7fffffe          BL       strlen
000064  491a              LDR      r1,|L53.208|
000066  6809              LDR      r1,[r1,#0]            ;2367  ; k
000068  4288              CMP      r0,r1                 ;2367
00006a  d8eb              BHI      |L53.68|
;;;2373   												
;;;2374   											}		
;;;2375   											uart_putchar(UART1_BASE_PTR, 0x1A);
00006c  211a              MOVS     r1,#0x1a
00006e  4819              LDR      r0,|L53.212|
000070  f7fffffe          BL       uart_putchar
;;;2376   											k2=0;									//string array counter for uart 1
000074  2000              MOVS     r0,#0
000076  4918              LDR      r1,|L53.216|
000078  6008              STR      r0,[r1,#0]  ; k2
;;;2377   											timeout=99999;						//timer counts to wait for characters in uart 1 									
00007a  4818              LDR      r0,|L53.220|
00007c  4918              LDR      r1,|L53.224|
00007e  6008              STR      r0,[r1,#0]  ; timeout
;;;2378   											while(!(strstr(uart_string_gsm,"+CMGS:")  ||  (timeout < 1)))
000080  e004              B        |L53.140|
                  |L53.130|
;;;2379   																{
;;;2380   																	timeout--;
000082  4817              LDR      r0,|L53.224|
000084  6800              LDR      r0,[r0,#0]  ; timeout
000086  1e40              SUBS     r0,r0,#1
000088  4915              LDR      r1,|L53.224|
00008a  6008              STR      r0,[r1,#0]  ; timeout
                  |L53.140|
00008c  4915              LDR      r1,|L53.228|
00008e  4808              LDR      r0,|L53.176|
000090  f7fffffe          BL       strstr
000094  2800              CMP      r0,#0                 ;2378
000096  d103              BNE      |L53.160|
000098  4811              LDR      r0,|L53.224|
00009a  6800              LDR      r0,[r0,#0]            ;2378  ; timeout
00009c  2801              CMP      r0,#1                 ;2378
00009e  daf0              BGE      |L53.130|
                  |L53.160|
;;;2381   //																	if(timeout % 4000 == 0)
;;;2382   //																	{
;;;2383   //																		uart0_putchar(UART0_BASE_PTR,'1');
;;;2384   //																		uart_putchar(UART1_BASE_PTR,0x1A);
;;;2385   //																	}
;;;2386   																}
;;;2387   							
;;;2388   									}
;;;2389   		
;;;2390   	memset(uart_string_gsm,0,5000);								
0000a0  4902              LDR      r1,|L53.172|
0000a2  4803              LDR      r0,|L53.176|
0000a4  f7fffffe          BL       __aeabi_memclr
;;;2391   	}
0000a8  bd38              POP      {r3-r5,pc}
;;;2392   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L53.172|
                          DCD      0x00001388
                  |L53.176|
                          DCD      uart_string_gsm
                  |L53.180|
                          DCD      at_
                  |L53.184|
                          DCD      num2
                  |L53.188|
                          DCD      ||.conststring||
                  |L53.192|
                          DCD      tmeout
                  |L53.196|
                          DCD      ||.conststring||+0x10
                  |L53.200|
                          DCD      ||.conststring||+0x18
                  |L53.204|
                          DCD      ||.conststring||+0x20
                  |L53.208|
                          DCD      k
                  |L53.212|
                          DCD      0x4006b000
                  |L53.216|
                          DCD      ||k2||
                  |L53.220|
                          DCD      0x0001869f
                  |L53.224|
                          DCD      timeout
                  |L53.228|
                          DCD      ||.conststring||+0x24

                          AREA ||i.parse_g||, COMGROUP=parse_g, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;1605   
;;;1606   __inline void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1607   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f0b              LDR      r7,[sp,#0x2c]
;;;1608   
;;;1609   		sz1=	strlen(str);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  493c              LDR      r1,|L60.260|
000014  6008              STR      r0,[r1,#0]  ; sz1
;;;1610   		sz2=  strlen(string);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       strlen
00001c  493a              LDR      r1,|L60.264|
00001e  6008              STR      r0,[r1,#0]  ; sz2
;;;1611   		memset(string,0,sz2);
000020  4608              MOV      r0,r1
000022  6801              LDR      r1,[r0,#0]  ; sz2
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_memclr
;;;1612   		for(i11=0,temp11=0;i11<sz1;i11++)
00002a  2000              MOVS     r0,#0
00002c  4937              LDR      r1,|L60.268|
00002e  6008              STR      r0,[r1,#0]  ; i11
000030  4937              LDR      r1,|L60.272|
000032  6008              STR      r0,[r1,#0]  ; temp11
000034  e01a              B        |L60.108|
                  |L60.54|
;;;1613   		{
;;;1614   		if(str[i11]==s)
000036  4835              LDR      r0,|L60.268|
000038  6800              LDR      r0,[r0,#0]  ; i11
00003a  5c21              LDRB     r1,[r4,r0]
00003c  980a              LDR      r0,[sp,#0x28]
00003e  4281              CMP      r1,r0
000040  d108              BNE      |L60.84|
;;;1615   			{temp11++;j11=i11;}
000042  4833              LDR      r0,|L60.272|
000044  6800              LDR      r0,[r0,#0]  ; temp11
000046  1c40              ADDS     r0,r0,#1
000048  4931              LDR      r1,|L60.272|
00004a  6008              STR      r0,[r1,#0]  ; temp11
00004c  482f              LDR      r0,|L60.268|
00004e  6800              LDR      r0,[r0,#0]  ; i11
000050  4930              LDR      r1,|L60.276|
000052  6008              STR      r0,[r1,#0]  ; j11
                  |L60.84|
;;;1616   		else{}
;;;1617   			
;;;1618   		if(temp11>=sec){i11=9900;}
000054  482e              LDR      r0,|L60.272|
000056  6800              LDR      r0,[r0,#0]  ; temp11
000058  42b0              CMP      r0,r6
00005a  db02              BLT      |L60.98|
00005c  482e              LDR      r0,|L60.280|
00005e  492b              LDR      r1,|L60.268|
000060  6008              STR      r0,[r1,#0]  ; i11
                  |L60.98|
000062  482a              LDR      r0,|L60.268|
000064  6800              LDR      r0,[r0,#0]            ;1612  ; i11
000066  1c40              ADDS     r0,r0,#1              ;1612
000068  4928              LDR      r1,|L60.268|
00006a  6008              STR      r0,[r1,#0]            ;1612  ; i11
                  |L60.108|
00006c  4827              LDR      r0,|L60.268|
00006e  6800              LDR      r0,[r0,#0]            ;1612  ; i11
000070  4924              LDR      r1,|L60.260|
000072  6809              LDR      r1,[r1,#0]            ;1612  ; sz1
000074  4288              CMP      r0,r1                 ;1612
000076  dbde              BLT      |L60.54|
;;;1619   		else{}	
;;;1620   		
;;;1621   		}	
;;;1622   		
;;;1623   		for(i11=0,temp11=0;i11<sz1;i11++)
000078  2000              MOVS     r0,#0
00007a  4924              LDR      r1,|L60.268|
00007c  6008              STR      r0,[r1,#0]  ; i11
00007e  4924              LDR      r1,|L60.272|
000080  6008              STR      r0,[r1,#0]  ; temp11
000082  e01a              B        |L60.186|
                  |L60.132|
;;;1624   		{
;;;1625   		if(str[i11]==f)
000084  4821              LDR      r0,|L60.268|
000086  6800              LDR      r0,[r0,#0]  ; i11
000088  5c21              LDRB     r1,[r4,r0]
00008a  9804              LDR      r0,[sp,#0x10]
00008c  4281              CMP      r1,r0
00008e  d108              BNE      |L60.162|
;;;1626   			{temp11++;l=i11;}										
000090  481f              LDR      r0,|L60.272|
000092  6800              LDR      r0,[r0,#0]  ; temp11
000094  1c40              ADDS     r0,r0,#1
000096  491e              LDR      r1,|L60.272|
000098  6008              STR      r0,[r1,#0]  ; temp11
00009a  481c              LDR      r0,|L60.268|
00009c  6800              LDR      r0,[r0,#0]  ; i11
00009e  491f              LDR      r1,|L60.284|
0000a0  6008              STR      r0,[r1,#0]  ; l
                  |L60.162|
;;;1627   		else{}
;;;1628   		if(temp11>=first){i11=9900;}else{}
0000a2  481b              LDR      r0,|L60.272|
0000a4  6800              LDR      r0,[r0,#0]  ; temp11
0000a6  42a8              CMP      r0,r5
0000a8  db02              BLT      |L60.176|
0000aa  481b              LDR      r0,|L60.280|
0000ac  4917              LDR      r1,|L60.268|
0000ae  6008              STR      r0,[r1,#0]  ; i11
                  |L60.176|
0000b0  4816              LDR      r0,|L60.268|
0000b2  6800              LDR      r0,[r0,#0]            ;1623  ; i11
0000b4  1c40              ADDS     r0,r0,#1              ;1623
0000b6  4915              LDR      r1,|L60.268|
0000b8  6008              STR      r0,[r1,#0]            ;1623  ; i11
                  |L60.186|
0000ba  4814              LDR      r0,|L60.268|
0000bc  6800              LDR      r0,[r0,#0]            ;1623  ; i11
0000be  4911              LDR      r1,|L60.260|
0000c0  6809              LDR      r1,[r1,#0]            ;1623  ; sz1
0000c2  4288              CMP      r0,r1                 ;1623
0000c4  dbde              BLT      |L60.132|
;;;1629   		}	
;;;1630   		for(i11=0;i11<(j11-l-1);i11++)
0000c6  2000              MOVS     r0,#0
0000c8  4910              LDR      r1,|L60.268|
0000ca  6008              STR      r0,[r1,#0]  ; i11
0000cc  e00e              B        |L60.236|
                  |L60.206|
;;;1631   		{
;;;1632   		string[i11] = str[l+i11+1];
0000ce  4813              LDR      r0,|L60.284|
0000d0  6800              LDR      r0,[r0,#0]  ; l
0000d2  490e              LDR      r1,|L60.268|
0000d4  6809              LDR      r1,[r1,#0]  ; i11
0000d6  1840              ADDS     r0,r0,r1
0000d8  1c40              ADDS     r0,r0,#1
0000da  5c20              LDRB     r0,[r4,r0]
0000dc  490b              LDR      r1,|L60.268|
0000de  6809              LDR      r1,[r1,#0]  ; i11
0000e0  5478              STRB     r0,[r7,r1]
0000e2  480a              LDR      r0,|L60.268|
0000e4  6800              LDR      r0,[r0,#0]            ;1630  ; i11
0000e6  1c40              ADDS     r0,r0,#1              ;1630
0000e8  4908              LDR      r1,|L60.268|
0000ea  6008              STR      r0,[r1,#0]            ;1630  ; i11
                  |L60.236|
0000ec  4809              LDR      r0,|L60.276|
0000ee  6800              LDR      r0,[r0,#0]            ;1630  ; j11
0000f0  490a              LDR      r1,|L60.284|
0000f2  6809              LDR      r1,[r1,#0]            ;1630  ; l
0000f4  1a40              SUBS     r0,r0,r1              ;1630
0000f6  1e40              SUBS     r0,r0,#1              ;1630
0000f8  4904              LDR      r1,|L60.268|
0000fa  6809              LDR      r1,[r1,#0]            ;1630  ; i11
0000fc  4288              CMP      r0,r1                 ;1630
0000fe  dce6              BGT      |L60.206|
;;;1633   		}			
;;;1634   	
;;;1635   
;;;1636   
;;;1637   }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
;;;1638   
                          ENDP

                  |L60.260|
                          DCD      ||sz1||
                  |L60.264|
                          DCD      ||sz2||
                  |L60.268|
                          DCD      i11
                  |L60.272|
                          DCD      temp11
                  |L60.276|
                          DCD      j11
                  |L60.280|
                          DCD      0x000026ac
                  |L60.284|
                          DCD      l

                          AREA ||i.ignstaton||, COMGROUP=ignstaton, CODE, READONLY, ALIGN=2

                  ignstaton PROC
;;;1273   	
;;;1274   __inline void ignstaton(){
000000  b508              PUSH     {r3,lr}
;;;1275   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L67.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L67.64|
000008  4a0e              LDR      r2,|L67.68|
00000a  490f              LDR      r1,|L67.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L67.76|
000010  f7fffffe          BL       send_GSM
;;;1276   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L67.64|
000018  4a0a              LDR      r2,|L67.68|
00001a  490d              LDR      r1,|L67.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L67.84|
000020  f7fffffe          BL       send_GSM
;;;1277   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1278   send_GSM("\nION\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L67.64|
00002e  4a05              LDR      r2,|L67.68|
000030  4909              LDR      r1,|L67.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L67.92|
000036  f7fffffe          BL       send_GSM
;;;1279   
;;;1280   
;;;1281   }	
00003a  bd08              POP      {r3,pc}
;;;1282   __inline void ignstatoff(){
                          ENDP

                  |L67.60|
                          DCD      tmeout
                  |L67.64|
                          DCD      ||.conststring||+0x10
                  |L67.68|
                          DCD      ||.conststring||+0x18
                  |L67.72|
                          DCD      ||.conststring||+0x2c
                  |L67.76|
                          DCD      ||.conststring||+0x30
                  |L67.80|
                          DCD      ||.conststring||+0x20
                  |L67.84|
                          DCD      ||.conststring||+0x4c
                  |L67.88|
                          DCD      ||.conststring||+0x70
                  |L67.92|
                          DCD      ||.conststring||+0x78

                          AREA ||i.save_ip_port||, COMGROUP=save_ip_port, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_ip_port PROC
;;;1234   	
;;;1235   __inline void save_ip_port()
000000  b538              PUSH     {r3-r5,lr}
;;;1236   {
;;;1237   	
;;;1238   send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4844              LDR      r0,|L74.276|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b44              LDR      r3,|L74.280|
000008  4a44              LDR      r2,|L74.284|
00000a  4945              LDR      r1,|L74.288|
00000c  9000              STR      r0,[sp,#0]
00000e  4845              LDR      r0,|L74.292|
000010  f7fffffe          BL       send_GSM
;;;1239   	
;;;1240   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4844              LDR      r0,|L74.296|
000018  f7fffffe          BL       __aeabi_memclr
;;;1241   	sprintf(at_,"\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",strlen(ip)+12+strlen(port));	
00001c  4843              LDR      r0,|L74.300|
00001e  f7fffffe          BL       strlen
000022  4605              MOV      r5,r0
000024  350c              ADDS     r5,r5,#0xc
000026  4842              LDR      r0,|L74.304|
000028  f7fffffe          BL       strlen
00002c  182c              ADDS     r4,r5,r0
00002e  4622              MOV      r2,r4
000030  4940              LDR      r1,|L74.308|
000032  483d              LDR      r0,|L74.296|
000034  f7fffffe          BL       __2sprintf
;;;1242   send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000038  200a              MOVS     r0,#0xa
00003a  4b37              LDR      r3,|L74.280|
00003c  4a37              LDR      r2,|L74.284|
00003e  493e              LDR      r1,|L74.312|
000040  9000              STR      r0,[sp,#0]
000042  4839              LDR      r0,|L74.296|
000044  f7fffffe          BL       send_GSM
;;;1243   	clear();
000048  f7fffffe          BL       clear
;;;1244   
;;;1245   	
;;;1246   	send_modem("|IP|");
00004c  483b              LDR      r0,|L74.316|
00004e  f7fffffe          BL       send_modem
;;;1247   		for(k=0;k<strlen(ip);k++)
000052  2000              MOVS     r0,#0
000054  493a              LDR      r1,|L74.320|
000056  6008              STR      r0,[r1,#0]  ; k
000058  e00b              B        |L74.114|
                  |L74.90|
;;;1248   		{
;;;1249   			uart_putchar(UART1_BASE_PTR, ip[k]);// uart0_putchar(UART0_BASE_PTR, ip[k]);//clear();
00005a  4834              LDR      r0,|L74.300|
00005c  4a38              LDR      r2,|L74.320|
00005e  6812              LDR      r2,[r2,#0]  ; k
000060  5c81              LDRB     r1,[r0,r2]
000062  4838              LDR      r0,|L74.324|
000064  f7fffffe          BL       uart_putchar
000068  4835              LDR      r0,|L74.320|
00006a  6800              LDR      r0,[r0,#0]            ;1247  ; k
00006c  1c40              ADDS     r0,r0,#1              ;1247
00006e  4934              LDR      r1,|L74.320|
000070  6008              STR      r0,[r1,#0]            ;1247  ; k
                  |L74.114|
000072  482e              LDR      r0,|L74.300|
000074  f7fffffe          BL       strlen
000078  4931              LDR      r1,|L74.320|
00007a  6809              LDR      r1,[r1,#0]            ;1247  ; k
00007c  4288              CMP      r0,r1                 ;1247
00007e  d8ec              BHI      |L74.90|
;;;1250   		}	
;;;1251   	send_modem("|PORT|");			
000080  4831              LDR      r0,|L74.328|
000082  f7fffffe          BL       send_modem
;;;1252   		for(k=0;k<strlen(port);k++)
000086  2000              MOVS     r0,#0
000088  492d              LDR      r1,|L74.320|
00008a  6008              STR      r0,[r1,#0]  ; k
00008c  e00b              B        |L74.166|
                  |L74.142|
;;;1253   		{
;;;1254   			uart_putchar(UART1_BASE_PTR, port[k]);// uart0_putchar(UART0_BASE_PTR, port[k]);//clear();
00008e  4828              LDR      r0,|L74.304|
000090  4a2b              LDR      r2,|L74.320|
000092  6812              LDR      r2,[r2,#0]  ; k
000094  5c81              LDRB     r1,[r0,r2]
000096  482b              LDR      r0,|L74.324|
000098  f7fffffe          BL       uart_putchar
00009c  4828              LDR      r0,|L74.320|
00009e  6800              LDR      r0,[r0,#0]            ;1252  ; k
0000a0  1c40              ADDS     r0,r0,#1              ;1252
0000a2  4927              LDR      r1,|L74.320|
0000a4  6008              STR      r0,[r1,#0]            ;1252  ; k
                  |L74.166|
0000a6  4822              LDR      r0,|L74.304|
0000a8  f7fffffe          BL       strlen
0000ac  4924              LDR      r1,|L74.320|
0000ae  6809              LDR      r1,[r1,#0]            ;1252  ; k
0000b0  4288              CMP      r0,r1                 ;1252
0000b2  d8ec              BHI      |L74.142|
;;;1255   		}	
;;;1256   send_modem("|");			
0000b4  4825              LDR      r0,|L74.332|
0000b6  f7fffffe          BL       send_modem
;;;1257   									//memset(data,0,1000);
;;;1258   									k2=0;									//string array counter for uart 1
0000ba  2000              MOVS     r0,#0
0000bc  4924              LDR      r1,|L74.336|
0000be  6008              STR      r0,[r1,#0]  ; k2
;;;1259   									time=19999;						//timer counts to wait for characters in uart 1 									
0000c0  4824              LDR      r0,|L74.340|
0000c2  4925              LDR      r1,|L74.344|
0000c4  6008              STR      r0,[r1,#0]  ; time
;;;1260   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
0000c6  e014              B        |L74.242|
                  |L74.200|
;;;1261   									{
;;;1262   									time--;
0000c8  4823              LDR      r0,|L74.344|
0000ca  6800              LDR      r0,[r0,#0]  ; time
0000cc  1e40              SUBS     r0,r0,#1
0000ce  4922              LDR      r1,|L74.344|
0000d0  6008              STR      r0,[r1,#0]  ; time
;;;1263   									if(time % 2000 == 0)
0000d2  217d              MOVS     r1,#0x7d
0000d4  0109              LSLS     r1,r1,#4
0000d6  4820              LDR      r0,|L74.344|
0000d8  6800              LDR      r0,[r0,#0]  ; time
0000da  f7fffffe          BL       __aeabi_idivmod
0000de  2900              CMP      r1,#0
0000e0  d107              BNE      |L74.242|
;;;1264   										{
;;;1265   											uart0_putchar(UART0_BASE_PTR,'1');
0000e2  2131              MOVS     r1,#0x31
0000e4  481d              LDR      r0,|L74.348|
0000e6  f7fffffe          BL       uart0_putchar
;;;1266   											uart_putchar(UART1_BASE_PTR,'\n');
0000ea  210a              MOVS     r1,#0xa
0000ec  4815              LDR      r0,|L74.324|
0000ee  f7fffffe          BL       uart_putchar
                  |L74.242|
0000f2  491b              LDR      r1,|L74.352|
0000f4  481b              LDR      r0,|L74.356|
0000f6  f7fffffe          BL       strstr
0000fa  2800              CMP      r0,#0                 ;1260
0000fc  d109              BNE      |L74.274|
0000fe  4816              LDR      r0,|L74.344|
000100  6800              LDR      r0,[r0,#0]            ;1260  ; time
000102  2801              CMP      r0,#1                 ;1260
000104  db05              BLT      |L74.274|
000106  4918              LDR      r1,|L74.360|
000108  4816              LDR      r0,|L74.356|
00010a  f7fffffe          BL       strstr
00010e  2800              CMP      r0,#0                 ;1260
000110  d0da              BEQ      |L74.200|
                  |L74.274|
;;;1267   										}
;;;1268   	
;;;1269   									}
;;;1270   
;;;1271   	
;;;1272   }	
000112  bd38              POP      {r3-r5,pc}
;;;1273   	
                          ENDP

                  |L74.276|
                          DCD      tmeout
                  |L74.280|
                          DCD      ||.conststring||+0x10
                  |L74.284|
                          DCD      ||.conststring||+0x18
                  |L74.288|
                          DCD      ||.conststring||+0x2c
                  |L74.292|
                          DCD      ||.conststring||+0x84
                  |L74.296|
                          DCD      at_
                  |L74.300|
                          DCD      ||ip||
                  |L74.304|
                          DCD      port
                  |L74.308|
                          DCD      ||.conststring||+0xa4
                  |L74.312|
                          DCD      ||.conststring||+0x20
                  |L74.316|
                          DCD      ||.conststring||+0xcc
                  |L74.320|
                          DCD      k
                  |L74.324|
                          DCD      0x4006b000
                  |L74.328|
                          DCD      ||.conststring||+0xd4
                  |L74.332|
                          DCD      ||.conststring||+0xdc
                  |L74.336|
                          DCD      ||k2||
                  |L74.340|
                          DCD      0x00004e1f
                  |L74.344|
                          DCD      time
                  |L74.348|
                          DCD      0x4006a000
                  |L74.352|
                          DCD      ||.conststring||+0x70
                  |L74.356|
                          DCD      uart_string_gsm
                  |L74.360|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.adc_read||, COMGROUP=adc_read, CODE, READONLY, ALIGN=2

                  adc_read PROC
;;;32     
;;;33     __inline void adc_read(uint8_t channel)
000000  b510              PUSH     {r4,lr}
;;;34     {
000002  4604              MOV      r4,r0
;;;35     	adcin=0;fuel=0;adcsample=0;
000004  2000              MOVS     r0,#0
000006  4922              LDR      r1,|L81.144|
000008  6008              STR      r0,[r1,#0]  ; adcin
00000a  4922              LDR      r1,|L81.148|
00000c  6008              STR      r0,[r1,#0]  ; fuel
00000e  4922              LDR      r1,|L81.152|
000010  6008              STR      r0,[r1,#0]  ; adcsample
;;;36     for(e=0;e<500;){
000012  4922              LDR      r1,|L81.156|
000014  6008              STR      r0,[r1,#0]  ; e
000016  e02c              B        |L81.114|
                  |L81.24|
;;;37     	
;;;38     ADC0->SC1[0] = !ADC_SC1_AIEN_MASK | ADC_SC1_DIFF_MASK | ADC_SC1_ADCH(channel) ;
000018  06e0              LSLS     r0,r4,#27
00001a  0ec0              LSRS     r0,r0,#27
00001c  2120              MOVS     r1,#0x20
00001e  4308              ORRS     r0,r0,r1
000020  491f              LDR      r1,|L81.160|
000022  6008              STR      r0,[r1,#0]
;;;39     while(ADC0_SC2 & ADC_SC2_ADACT_MASK); //Conversion in progress
000024  bf00              NOP      
                  |L81.38|
000026  481e              LDR      r0,|L81.160|
000028  6a00              LDR      r0,[r0,#0x20]
00002a  2180              MOVS     r1,#0x80
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d1f9              BNE      |L81.38|
;;;40     while(!(ADC0_SC1A & ADC_SC1_COCO_MASK)); //Wait until conversion complete
000032  bf00              NOP      
                  |L81.52|
000034  481a              LDR      r0,|L81.160|
000036  6800              LDR      r0,[r0,#0]
000038  2180              MOVS     r1,#0x80
00003a  4008              ANDS     r0,r0,r1
00003c  2800              CMP      r0,#0
00003e  d0f9              BEQ      |L81.52|
;;;41     adcin = ADC0_RA;
000040  4817              LDR      r0,|L81.160|
000042  6900              LDR      r0,[r0,#0x10]
000044  4912              LDR      r1,|L81.144|
000046  6008              STR      r0,[r1,#0]  ; adcin
;;;42     
;;;43     
;;;44     		if(adcin>40000){adcin=0;}
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]  ; adcin
00004c  4915              LDR      r1,|L81.164|
00004e  4288              CMP      r0,r1
000050  dd03              BLE      |L81.90|
000052  2000              MOVS     r0,#0
000054  490e              LDR      r1,|L81.144|
000056  6008              STR      r0,[r1,#0]  ; adcin
000058  e006              B        |L81.104|
                  |L81.90|
;;;45     			else{
;;;46     			adcsample+=adcin;
00005a  480f              LDR      r0,|L81.152|
00005c  6800              LDR      r0,[r0,#0]  ; adcsample
00005e  490c              LDR      r1,|L81.144|
000060  6809              LDR      r1,[r1,#0]  ; adcin
000062  1840              ADDS     r0,r0,r1
000064  490c              LDR      r1,|L81.152|
000066  6008              STR      r0,[r1,#0]  ; adcsample
                  |L81.104|
;;;47     			}
;;;48     			e++;
000068  480c              LDR      r0,|L81.156|
00006a  6800              LDR      r0,[r0,#0]  ; e
00006c  1c40              ADDS     r0,r0,#1
00006e  490b              LDR      r1,|L81.156|
000070  6008              STR      r0,[r1,#0]  ; e
                  |L81.114|
000072  480a              LDR      r0,|L81.156|
000074  6800              LDR      r0,[r0,#0]            ;36  ; e
000076  21ff              MOVS     r1,#0xff              ;36
000078  31f5              ADDS     r1,r1,#0xf5           ;36
00007a  4288              CMP      r0,r1                 ;36
00007c  dbcc              BLT      |L81.24|
;;;49     	}
;;;50     fuel=adcsample/5000;	
00007e  490a              LDR      r1,|L81.168|
000080  4805              LDR      r0,|L81.152|
000082  6800              LDR      r0,[r0,#0]  ; adcsample
000084  f7fffffe          BL       __aeabi_idivmod
000088  4902              LDR      r1,|L81.148|
00008a  6008              STR      r0,[r1,#0]  ; fuel
;;;51     
;;;52     }
00008c  bd10              POP      {r4,pc}
;;;53     	
                          ENDP

00008e  0000              DCW      0x0000
                  |L81.144|
                          DCD      adcin
                  |L81.148|
                          DCD      fuel
                  |L81.152|
                          DCD      adcsample
                  |L81.156|
                          DCD      e
                  |L81.160|
                          DCD      0x4003b000
                  |L81.164|
                          DCD      0x00009c40
                  |L81.168|
                          DCD      0x00001388

                          AREA ||i.stof||, COMGROUP=stof, CODE, READONLY, ALIGN=2

                  stof PROC
;;;1100   
;;;1101   __inline float stof(const char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;1102   {rez=0;fact=1;
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  4925              LDR      r1,|L88.156|
000008  6008              STR      r0,[r1,#0]  ; rez
00000a  207f              MOVS     r0,#0x7f
00000c  05c0              LSLS     r0,r0,#23
00000e  4924              LDR      r1,|L88.160|
000010  6008              STR      r0,[r1,#0]  ; fact
;;;1103   
;;;1104     if (*s == '-'){
000012  7820              LDRB     r0,[r4,#0]
000014  282d              CMP      r0,#0x2d
000016  d102              BNE      |L88.30|
;;;1105       s++;
000018  1c64              ADDS     r4,r4,#1
;;;1106       fact = -1;
00001a  4822              LDR      r0,|L88.164|
00001c  6008              STR      r0,[r1,#0]  ; fact
                  |L88.30|
;;;1107     };
;;;1108     for (point_seen = 0; *s; s++){
00001e  2000              MOVS     r0,#0
000020  4921              LDR      r1,|L88.168|
000022  6008              STR      r0,[r1,#0]  ; point_seen
000024  e02f              B        |L88.134|
                  |L88.38|
;;;1109       if (*s == '.'){
000026  7820              LDRB     r0,[r4,#0]
000028  282e              CMP      r0,#0x2e
00002a  d103              BNE      |L88.52|
;;;1110         point_seen = 1; 
00002c  2001              MOVS     r0,#1
00002e  491e              LDR      r1,|L88.168|
000030  6008              STR      r0,[r1,#0]  ; point_seen
;;;1111         continue;
000032  e027              B        |L88.132|
                  |L88.52|
;;;1112       };
;;;1113       d = *s - '0';
000034  7820              LDRB     r0,[r4,#0]
000036  3830              SUBS     r0,r0,#0x30
000038  491c              LDR      r1,|L88.172|
00003a  6008              STR      r0,[r1,#0]  ; d
;;;1114       if (d >= 0 && d <= 9){
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]  ; d
000040  2800              CMP      r0,#0
000042  db1e              BLT      |L88.130|
000044  4608              MOV      r0,r1
000046  6800              LDR      r0,[r0,#0]  ; d
000048  2809              CMP      r0,#9
00004a  dc1a              BGT      |L88.130|
;;;1115         if (point_seen) fact /= 10.0f;
00004c  4816              LDR      r0,|L88.168|
00004e  6800              LDR      r0,[r0,#0]  ; point_seen
000050  2800              CMP      r0,#0
000052  d006              BEQ      |L88.98|
000054  4916              LDR      r1,|L88.176|
000056  4812              LDR      r0,|L88.160|
000058  6800              LDR      r0,[r0,#0]  ; fact
00005a  f7fffffe          BL       __aeabi_fdiv
00005e  4910              LDR      r1,|L88.160|
000060  6008              STR      r0,[r1,#0]  ; fact
                  |L88.98|
;;;1116         rez = rez * 10.0f + (float)d;
000062  4812              LDR      r0,|L88.172|
000064  6800              LDR      r0,[r0,#0]  ; d
000066  f7fffffe          BL       __aeabi_i2f
00006a  4605              MOV      r5,r0
00006c  4910              LDR      r1,|L88.176|
00006e  480b              LDR      r0,|L88.156|
000070  6800              LDR      r0,[r0,#0]  ; rez
000072  f7fffffe          BL       __aeabi_fmul
000076  4606              MOV      r6,r0
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       __aeabi_fadd
00007e  4907              LDR      r1,|L88.156|
000080  6008              STR      r0,[r1,#0]  ; rez
                  |L88.130|
000082  bf00              NOP                            ;1111
                  |L88.132|
000084  1c64              ADDS     r4,r4,#1              ;1108
                  |L88.134|
000086  7820              LDRB     r0,[r4,#0]            ;1108
000088  2800              CMP      r0,#0                 ;1108
00008a  d1cc              BNE      |L88.38|
;;;1117       };
;;;1118     };
;;;1119     return rez * fact;
00008c  4804              LDR      r0,|L88.160|
00008e  6801              LDR      r1,[r0,#0]  ; fact
000090  4802              LDR      r0,|L88.156|
000092  6800              LDR      r0,[r0,#0]  ; rez
000094  f7fffffe          BL       __aeabi_fmul
;;;1120   };
000098  bd70              POP      {r4-r6,pc}
;;;1121   
                          ENDP

00009a  0000              DCW      0x0000
                  |L88.156|
                          DCD      ||rez||
                  |L88.160|
                          DCD      fact
                  |L88.164|
                          DCD      0xbf800000
                  |L88.168|
                          DCD      point_seen
                  |L88.172|
                          DCD      d
                  |L88.176|
                          DCD      0x41200000

                          AREA ||i.get_gpsdata||, COMGROUP=get_gpsdata, CODE, READONLY, ALIGN=2

                  get_gpsdata PROC
;;;1329   
;;;1330   __inline void get_gpsdata()
000000  b510              PUSH     {r4,lr}
;;;1331   {
;;;1332   						clear2();
000002  f7fffffe          BL       clear2
;;;1333   						memset(uart_string_gps,0,3000);memset(gga,0,100);memset(rmc,0,100);			
000006  4952              LDR      r1,|L95.336|
000008  4852              LDR      r0,|L95.340|
00000a  f7fffffe          BL       __aeabi_memclr
00000e  2164              MOVS     r1,#0x64
000010  4851              LDR      r0,|L95.344|
000012  f7fffffe          BL       __aeabi_memclr
000016  2164              MOVS     r1,#0x64
000018  4850              LDR      r0,|L95.348|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1334   						i=0;tout2=0;
00001e  2000              MOVS     r0,#0
000020  494f              LDR      r1,|L95.352|
000022  6008              STR      r0,[r1,#0]  ; i
000024  494f              LDR      r1,|L95.356|
000026  6008              STR      r0,[r1,#0]  ; tout2
;;;1335   //						t22=9999999;
;;;1336   do{
000028  bf00              NOP      
                  |L95.42|
;;;1337   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00002a  484f              LDR      r0,|L95.360|
00002c  7900              LDRB     r0,[r0,#4]
00002e  2120              MOVS     r1,#0x20
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d00a              BEQ      |L95.76|
;;;1338   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000036  484c              LDR      r0,|L95.360|
000038  79c0              LDRB     r0,[r0,#7]
00003a  4946              LDR      r1,|L95.340|
00003c  4a48              LDR      r2,|L95.352|
00003e  6812              LDR      r2,[r2,#0]  ; i
000040  5488              STRB     r0,[r1,r2]
;;;1339   				i++;
000042  4847              LDR      r0,|L95.352|
000044  6800              LDR      r0,[r0,#0]  ; i
000046  1c40              ADDS     r0,r0,#1
000048  4945              LDR      r1,|L95.352|
00004a  6008              STR      r0,[r1,#0]  ; i
                  |L95.76|
;;;1340   	}
;;;1341   	}while(!   (strstr(uart_string_gps,"RMC")       ||  (tout2>1)  )  );
00004c  4947              LDR      r1,|L95.364|
00004e  4841              LDR      r0,|L95.340|
000050  f7fffffe          BL       strstr
000054  2800              CMP      r0,#0
000056  d103              BNE      |L95.96|
000058  4842              LDR      r0,|L95.356|
00005a  6800              LDR      r0,[r0,#0]  ; tout2
00005c  2801              CMP      r0,#1
00005e  dde4              BLE      |L95.42|
                  |L95.96|
;;;1342   i=0;tout2=0;
000060  2000              MOVS     r0,#0
000062  493f              LDR      r1,|L95.352|
000064  6008              STR      r0,[r1,#0]  ; i
000066  493f              LDR      r1,|L95.356|
000068  6008              STR      r0,[r1,#0]  ; tout2
;;;1343   do{
00006a  bf00              NOP      
                  |L95.108|
;;;1344   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00006c  483e              LDR      r0,|L95.360|
00006e  7900              LDRB     r0,[r0,#4]
000070  2120              MOVS     r1,#0x20
000072  4008              ANDS     r0,r0,r1
000074  2800              CMP      r0,#0
000076  d00a              BEQ      |L95.142|
;;;1345   	{		rmc[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000078  483b              LDR      r0,|L95.360|
00007a  79c1              LDRB     r1,[r0,#7]
00007c  4837              LDR      r0,|L95.348|
00007e  4a38              LDR      r2,|L95.352|
000080  6812              LDR      r2,[r2,#0]  ; i
000082  5481              STRB     r1,[r0,r2]
;;;1346   				i++;
000084  4836              LDR      r0,|L95.352|
000086  6800              LDR      r0,[r0,#0]  ; i
000088  1c40              ADDS     r0,r0,#1
00008a  4935              LDR      r1,|L95.352|
00008c  6008              STR      r0,[r1,#0]  ; i
                  |L95.142|
;;;1347   	}
;;;1348   }while(     !( mystrstr(rmc,'*')    ||  tout2>1) );
00008e  212a              MOVS     r1,#0x2a
000090  4832              LDR      r0,|L95.348|
000092  f7fffffe          BL       mystrstr
000096  2800              CMP      r0,#0
000098  d103              BNE      |L95.162|
00009a  4832              LDR      r0,|L95.356|
00009c  6800              LDR      r0,[r0,#0]  ; tout2
00009e  2801              CMP      r0,#1
0000a0  dde4              BLE      |L95.108|
                  |L95.162|
;;;1349   memset(uart_string_gps,0,3000);
0000a2  492b              LDR      r1,|L95.336|
0000a4  482b              LDR      r0,|L95.340|
0000a6  f7fffffe          BL       __aeabi_memclr
;;;1350   i=0;tout2=0;
0000aa  2000              MOVS     r0,#0
0000ac  492c              LDR      r1,|L95.352|
0000ae  6008              STR      r0,[r1,#0]  ; i
0000b0  492c              LDR      r1,|L95.356|
0000b2  6008              STR      r0,[r1,#0]  ; tout2
;;;1351   do{
0000b4  bf00              NOP      
                  |L95.182|
;;;1352   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000b6  482c              LDR      r0,|L95.360|
0000b8  7900              LDRB     r0,[r0,#4]
0000ba  2120              MOVS     r1,#0x20
0000bc  4008              ANDS     r0,r0,r1
0000be  2800              CMP      r0,#0
0000c0  d00a              BEQ      |L95.216|
;;;1353   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
0000c2  4829              LDR      r0,|L95.360|
0000c4  79c0              LDRB     r0,[r0,#7]
0000c6  4923              LDR      r1,|L95.340|
0000c8  4a25              LDR      r2,|L95.352|
0000ca  6812              LDR      r2,[r2,#0]  ; i
0000cc  5488              STRB     r0,[r1,r2]
;;;1354   				i++;
0000ce  4824              LDR      r0,|L95.352|
0000d0  6800              LDR      r0,[r0,#0]  ; i
0000d2  1c40              ADDS     r0,r0,#1
0000d4  4922              LDR      r1,|L95.352|
0000d6  6008              STR      r0,[r1,#0]  ; i
                  |L95.216|
;;;1355   	}
;;;1356   }while(!  (strstr(uart_string_gps,"GGA")      ||  (tout2>1) )  );
0000d8  4925              LDR      r1,|L95.368|
0000da  481e              LDR      r0,|L95.340|
0000dc  f7fffffe          BL       strstr
0000e0  2800              CMP      r0,#0
0000e2  d103              BNE      |L95.236|
0000e4  481f              LDR      r0,|L95.356|
0000e6  6800              LDR      r0,[r0,#0]  ; tout2
0000e8  2801              CMP      r0,#1
0000ea  dde4              BLE      |L95.182|
                  |L95.236|
;;;1357   i=0;tout2=0;
0000ec  2000              MOVS     r0,#0
0000ee  491c              LDR      r1,|L95.352|
0000f0  6008              STR      r0,[r1,#0]  ; i
0000f2  491c              LDR      r1,|L95.356|
0000f4  6008              STR      r0,[r1,#0]  ; tout2
;;;1358   do{
0000f6  bf00              NOP      
                  |L95.248|
;;;1359   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000f8  481b              LDR      r0,|L95.360|
0000fa  7900              LDRB     r0,[r0,#4]
0000fc  2120              MOVS     r1,#0x20
0000fe  4008              ANDS     r0,r0,r1
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L95.282|
;;;1360   	{		gga[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000104  4818              LDR      r0,|L95.360|
000106  79c1              LDRB     r1,[r0,#7]
000108  4813              LDR      r0,|L95.344|
00010a  4a15              LDR      r2,|L95.352|
00010c  6812              LDR      r2,[r2,#0]  ; i
00010e  5481              STRB     r1,[r0,r2]
;;;1361   				i++;
000110  4813              LDR      r0,|L95.352|
000112  6800              LDR      r0,[r0,#0]  ; i
000114  1c40              ADDS     r0,r0,#1
000116  4912              LDR      r1,|L95.352|
000118  6008              STR      r0,[r1,#0]  ; i
                  |L95.282|
;;;1362   	}
;;;1363   }while(!(mystrstr(gga,'*')  ||  (tout2>1) ));
00011a  212a              MOVS     r1,#0x2a
00011c  480e              LDR      r0,|L95.344|
00011e  f7fffffe          BL       mystrstr
000122  2800              CMP      r0,#0
000124  d103              BNE      |L95.302|
000126  480f              LDR      r0,|L95.356|
000128  6800              LDR      r0,[r0,#0]  ; tout2
00012a  2801              CMP      r0,#1
00012c  dde4              BLE      |L95.248|
                  |L95.302|
;;;1364   
;;;1365   clear2();
00012e  f7fffffe          BL       clear2
;;;1366   
;;;1367   		
;;;1368   
;;;1369   stateCount++; 
000132  4810              LDR      r0,|L95.372|
000134  7800              LDRB     r0,[r0,#0]  ; stateCount
000136  1c40              ADDS     r0,r0,#1
000138  490e              LDR      r1,|L95.372|
00013a  7008              STRB     r0,[r1,#0]
;;;1370   if(stateCount>5){stateCount =0;}
00013c  4608              MOV      r0,r1
00013e  7800              LDRB     r0,[r0,#0]  ; stateCount
000140  2805              CMP      r0,#5
000142  dd01              BLE      |L95.328|
000144  2000              MOVS     r0,#0
000146  7008              STRB     r0,[r1,#0]
                  |L95.328|
;;;1371   LED_state2();					
000148  f7fffffe          BL       LED_state2
;;;1372   }
00014c  bd10              POP      {r4,pc}
;;;1373   	
                          ENDP

00014e  0000              DCW      0x0000
                  |L95.336|
                          DCD      0x00000bb8
                  |L95.340|
                          DCD      uart_string_gps
                  |L95.344|
                          DCD      gga
                  |L95.348|
                          DCD      ||rmc||
                  |L95.352|
                          DCD      i
                  |L95.356|
                          DCD      tout2
                  |L95.360|
                          DCD      0x4006c000
                  |L95.364|
                          DCD      ||.conststring||+0xe8
                  |L95.368|
                          DCD      ||.conststring||+0xec
                  |L95.372|
                          DCD      stateCount

                          AREA ||i.myAtoi||, COMGROUP=myAtoi, CODE, READONLY, ALIGN=2

                  myAtoi PROC
;;;1088   
;;;1089   __inline int myAtoi(char *str)
000000  4601              MOV      r1,r0
;;;1090   {res=0;
000002  2000              MOVS     r0,#0
000004  4a0e              LDR      r2,|L102.64|
000006  6010              STR      r0,[r2,#0]  ; res
;;;1091       // Initialize result
;;;1092   
;;;1093       // Iterate through all characters of input string and update result
;;;1094       for (iz = 0; str[iz] != '\0'; ++iz)
000008  4a0e              LDR      r2,|L102.68|
00000a  6010              STR      r0,[r2,#0]  ; iz
00000c  e00f              B        |L102.46|
                  |L102.14|
;;;1095           res = res*10 + str[iz] - '0';
00000e  480c              LDR      r0,|L102.64|
000010  6800              LDR      r0,[r0,#0]  ; res
000012  220a              MOVS     r2,#0xa
000014  4350              MULS     r0,r2,r0
000016  4a0b              LDR      r2,|L102.68|
000018  6812              LDR      r2,[r2,#0]  ; iz
00001a  5c8a              LDRB     r2,[r1,r2]
00001c  1880              ADDS     r0,r0,r2
00001e  3830              SUBS     r0,r0,#0x30
000020  4a07              LDR      r2,|L102.64|
000022  6010              STR      r0,[r2,#0]  ; res
000024  4807              LDR      r0,|L102.68|
000026  6800              LDR      r0,[r0,#0]            ;1094  ; iz
000028  1c40              ADDS     r0,r0,#1              ;1094
00002a  4a06              LDR      r2,|L102.68|
00002c  6010              STR      r0,[r2,#0]            ;1094  ; iz
                  |L102.46|
00002e  4805              LDR      r0,|L102.68|
000030  6800              LDR      r0,[r0,#0]            ;1094  ; iz
000032  5c08              LDRB     r0,[r1,r0]            ;1094
000034  2800              CMP      r0,#0                 ;1094
000036  d1ea              BNE      |L102.14|
;;;1096   
;;;1097       // return result.
;;;1098       return res;
000038  4801              LDR      r0,|L102.64|
00003a  6800              LDR      r0,[r0,#0]  ; res
;;;1099   }
00003c  4770              BX       lr
;;;1100   
                          ENDP

00003e  0000              DCW      0x0000
                  |L102.64|
                          DCD      ||res||
                  |L102.68|
                          DCD      ||iz||

                          AREA ||i.GPS_COLLECT||, COMGROUP=GPS_COLLECT, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT PROC
;;;1123   
;;;1124   __inline void GPS_COLLECT()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1125   {
;;;1126   delay(200);
000002  20c8              MOVS     r0,#0xc8
000004  f7fffffe          BL       delay
;;;1127   clear();
000008  f7fffffe          BL       clear
;;;1128   //adc_read(8);							
;;;1129   //memset(fuelstr,0,5);
;;;1130   //sprintf(fuelstr,"%d,",fuel);	
;;;1131   if(strlen(imei)<14)
00000c  48d9              LDR      r0,|L109.884|
00000e  f7fffffe          BL       strlen
000012  280e              CMP      r0,#0xe
000014  d239              BCS      |L109.138|
;;;1132   {imeiinc=0;
000016  2000              MOVS     r0,#0
000018  49d7              LDR      r1,|L109.888|
00001a  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1133   memset(imei,0,20);
00001c  2114              MOVS     r1,#0x14
00001e  48d5              LDR      r0,|L109.884|
000020  f7fffffe          BL       __aeabi_memclr
;;;1134   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
000024  200a              MOVS     r0,#0xa
000026  4bd5              LDR      r3,|L109.892|
000028  4ad5              LDR      r2,|L109.896|
00002a  49d6              LDR      r1,|L109.900|
00002c  9000              STR      r0,[sp,#0]
00002e  48d6              LDR      r0,|L109.904|
000030  f7fffffe          BL       send_GSM
;;;1135   for(i=0;i<strlen(uart_string_gsm);i++){
000034  2000              MOVS     r0,#0
000036  49d5              LDR      r1,|L109.908|
000038  6008              STR      r0,[r1,#0]  ; i
00003a  e01d              B        |L109.120|
                  |L109.60|
;;;1136   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
00003c  48d4              LDR      r0,|L109.912|
00003e  49d3              LDR      r1,|L109.908|
000040  6809              LDR      r1,[r1,#0]  ; i
000042  5c40              LDRB     r0,[r0,r1]
000044  282f              CMP      r0,#0x2f
000046  dd12              BLE      |L109.110|
000048  48d1              LDR      r0,|L109.912|
00004a  49d0              LDR      r1,|L109.908|
00004c  6809              LDR      r1,[r1,#0]  ; i
00004e  5c40              LDRB     r0,[r0,r1]
000050  283a              CMP      r0,#0x3a
000052  da0c              BGE      |L109.110|
;;;1137   			imei[imeiinc] = uart_string_gsm[i];
000054  48ce              LDR      r0,|L109.912|
000056  49cd              LDR      r1,|L109.908|
000058  6809              LDR      r1,[r1,#0]  ; i
00005a  5c40              LDRB     r0,[r0,r1]
00005c  49c5              LDR      r1,|L109.884|
00005e  4ac6              LDR      r2,|L109.888|
000060  6812              LDR      r2,[r2,#0]  ; imeiinc
000062  5488              STRB     r0,[r1,r2]
;;;1138   			imeiinc++;
000064  48c4              LDR      r0,|L109.888|
000066  6800              LDR      r0,[r0,#0]  ; imeiinc
000068  1c40              ADDS     r0,r0,#1
00006a  49c3              LDR      r1,|L109.888|
00006c  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L109.110|
00006e  48c7              LDR      r0,|L109.908|
000070  6800              LDR      r0,[r0,#0]            ;1135  ; i
000072  1c40              ADDS     r0,r0,#1              ;1135
000074  49c5              LDR      r1,|L109.908|
000076  6008              STR      r0,[r1,#0]            ;1135  ; i
                  |L109.120|
000078  48c5              LDR      r0,|L109.912|
00007a  f7fffffe          BL       strlen
00007e  49c3              LDR      r1,|L109.908|
000080  6809              LDR      r1,[r1,#0]            ;1135  ; i
000082  4288              CMP      r0,r1                 ;1135
000084  d8da              BHI      |L109.60|
;;;1139   		}
;;;1140   }
;;;1141   clear();
000086  f7fffffe          BL       clear
                  |L109.138|
;;;1142   }
;;;1143   
;;;1144   
;;;1145   
;;;1146   
;;;1147   
;;;1148   time52=15;	
00008a  200f              MOVS     r0,#0xf
00008c  49c1              LDR      r1,|L109.916|
00008e  6008              STR      r0,[r1,#0]  ; time52
;;;1149   
;;;1150   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
000090  48c1              LDR      r0,|L109.920|
000092  6800              LDR      r0,[r0,#0]  ; tmeout
000094  4bc1              LDR      r3,|L109.924|
000096  4ab9              LDR      r2,|L109.892|
000098  49ba              LDR      r1,|L109.900|
00009a  9000              STR      r0,[sp,#0]
00009c  48c0              LDR      r0,|L109.928|
00009e  f7fffffe          BL       send_GSM
;;;1151   	// not sleep	
;;;1152   	memset(num2,0,30);
0000a2  211e              MOVS     r1,#0x1e
0000a4  48bf              LDR      r0,|L109.932|
0000a6  f7fffffe          BL       __aeabi_memclr
;;;1153   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
0000aa  48be              LDR      r0,|L109.932|
0000ac  210d              MOVS     r1,#0xd
0000ae  232c              MOVS     r3,#0x2c
0000b0  2205              MOVS     r2,#5
0000b2  9100              STR      r1,[sp,#0]
0000b4  9001              STR      r0,[sp,#4]
0000b6  2102              MOVS     r1,#2
0000b8  48b5              LDR      r0,|L109.912|
0000ba  f7fffffe          BL       parse_g
;;;1154   	voltagecbc=myAtoi(num2);
0000be  48b9              LDR      r0,|L109.932|
0000c0  f7fffffe          BL       myAtoi
0000c4  49b8              LDR      r1,|L109.936|
0000c6  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1155   memset(ignstr,0,2);
0000c8  48b8              LDR      r0,|L109.940|
0000ca  2100              MOVS     r1,#0
0000cc  7001              STRB     r1,[r0,#0]
0000ce  7041              STRB     r1,[r0,#1]
;;;1156   if(GPIOB_PDIR & 0x00000001){
0000d0  48b7              LDR      r0,|L109.944|
0000d2  6900              LDR      r0,[r0,#0x10]
0000d4  07c0              LSLS     r0,r0,#31
0000d6  0fc0              LSRS     r0,r0,#31
0000d8  2800              CMP      r0,#0
0000da  d005              BEQ      |L109.232|
;;;1157   			sprintf(ignstr,"%d",1);
0000dc  2201              MOVS     r2,#1
0000de  49b5              LDR      r1,|L109.948|
0000e0  48b2              LDR      r0,|L109.940|
0000e2  f7fffffe          BL       __2sprintf
0000e6  e004              B        |L109.242|
                  |L109.232|
;;;1158   }
;;;1159   else{
;;;1160   				sprintf(ignstr,"%d",0);
0000e8  2200              MOVS     r2,#0
0000ea  49b2              LDR      r1,|L109.948|
0000ec  48af              LDR      r0,|L109.940|
0000ee  f7fffffe          BL       __2sprintf
                  |L109.242|
;;;1161   
;;;1162   }
;;;1163   
;;;1164   memset(acstr,0,2); //ptb2
0000f2  48b1              LDR      r0,|L109.952|
0000f4  2100              MOVS     r1,#0
0000f6  8001              STRH     r1,[r0,#0]
;;;1165   if(GPIOB_PDIR & 0x00000004){
0000f8  48ad              LDR      r0,|L109.944|
0000fa  6900              LDR      r0,[r0,#0x10]
0000fc  2104              MOVS     r1,#4
0000fe  4008              ANDS     r0,r0,r1
000100  2800              CMP      r0,#0
000102  d005              BEQ      |L109.272|
;;;1166   			sprintf(acstr,"%d",1);
000104  2201              MOVS     r2,#1
000106  49ab              LDR      r1,|L109.948|
000108  48ab              LDR      r0,|L109.952|
00010a  f7fffffe          BL       __2sprintf
00010e  e004              B        |L109.282|
                  |L109.272|
;;;1167   }
;;;1168   else{
;;;1169   			sprintf(acstr,"%d",0);
000110  2200              MOVS     r2,#0
000112  49a8              LDR      r1,|L109.948|
000114  48a8              LDR      r0,|L109.952|
000116  f7fffffe          BL       __2sprintf
                  |L109.282|
;;;1170   
;;;1171   }
;;;1172   
;;;1173   
;;;1174   if(int_erval>60){int_erval=5;}
00011a  48a8              LDR      r0,|L109.956|
00011c  6800              LDR      r0,[r0,#0]  ; int_erval
00011e  283c              CMP      r0,#0x3c
000120  dd02              BLE      |L109.296|
000122  2005              MOVS     r0,#5
000124  49a5              LDR      r1,|L109.956|
000126  6008              STR      r0,[r1,#0]  ; int_erval
                  |L109.296|
;;;1175   while(lpticks<int_erval);
000128  bf00              NOP      
                  |L109.298|
00012a  48a5              LDR      r0,|L109.960|
00012c  6800              LDR      r0,[r0,#0]  ; lpticks
00012e  49a3              LDR      r1,|L109.956|
000130  6809              LDR      r1,[r1,#0]  ; int_erval
000132  4288              CMP      r0,r1
000134  dbf9              BLT      |L109.298|
;;;1176   get_gpsdata();
000136  f7fffffe          BL       get_gpsdata
;;;1177   lpticks=0;
00013a  2000              MOVS     r0,#0
00013c  49a0              LDR      r1,|L109.960|
00013e  6008              STR      r0,[r1,#0]  ; lpticks
;;;1178   
;;;1179   parse_g(rmc, 3, 4, ',', ',' ,lati);
000140  48a0              LDR      r0,|L109.964|
000142  212c              MOVS     r1,#0x2c
000144  460b              MOV      r3,r1
000146  2204              MOVS     r2,#4
000148  9100              STR      r1,[sp,#0]
00014a  9001              STR      r0,[sp,#4]
00014c  2103              MOVS     r1,#3
00014e  489e              LDR      r0,|L109.968|
000150  f7fffffe          BL       parse_g
;;;1180   parse_g(rmc, 5, 6, ',', ',' ,longi);
000154  489d              LDR      r0,|L109.972|
000156  212c              MOVS     r1,#0x2c
000158  460b              MOV      r3,r1
00015a  2206              MOVS     r2,#6
00015c  9100              STR      r1,[sp,#0]
00015e  9001              STR      r0,[sp,#4]
000160  2105              MOVS     r1,#5
000162  4899              LDR      r0,|L109.968|
000164  f7fffffe          BL       parse_g
;;;1181   parse_g(rmc, 7, 8, ',', ',' ,velocity);
000168  4899              LDR      r0,|L109.976|
00016a  212c              MOVS     r1,#0x2c
00016c  460b              MOV      r3,r1
00016e  2208              MOVS     r2,#8
000170  9100              STR      r1,[sp,#0]
000172  9001              STR      r0,[sp,#4]
000174  2107              MOVS     r1,#7
000176  4894              LDR      r0,|L109.968|
000178  f7fffffe          BL       parse_g
;;;1182   		
;;;1183   		speed = stof(velocity);
00017c  4894              LDR      r0,|L109.976|
00017e  f7fffffe          BL       stof
000182  4994              LDR      r1,|L109.980|
000184  6008              STR      r0,[r1,#0]  ; speed
;;;1184   		c=stof(lati);//7523.7412
000186  488f              LDR      r0,|L109.964|
000188  f7fffffe          BL       stof
00018c  4604              MOV      r4,r0
00018e  f7fffffe          BL       __aeabi_f2d
000192  4a91              LDR      r2,|L109.984|
000194  c203              STM      r2!,{r0,r1}
;;;1185   		hh= c/100; //75
000196  2200              MOVS     r2,#0
000198  4b90              LDR      r3,|L109.988|
00019a  498f              LDR      r1,|L109.984|
00019c  c903              LDM      r1,{r0,r1}
00019e  f7fffffe          BL       __aeabi_ddiv
0001a2  4604              MOV      r4,r0
0001a4  f7fffffe          BL       __aeabi_d2iz
0001a8  498d              LDR      r1,|L109.992|
0001aa  6008              STR      r0,[r1,#0]  ; hh
;;;1186   		hh11 = c/100; //75.237412
0001ac  2200              MOVS     r2,#0
0001ae  4b8b              LDR      r3,|L109.988|
0001b0  4989              LDR      r1,|L109.984|
0001b2  c903              LDM      r1,{r0,r1}
0001b4  f7fffffe          BL       __aeabi_ddiv
0001b8  4a8a              LDR      r2,|L109.996|
0001ba  c203              STM      r2!,{r0,r1}
;;;1187   		mm11 = hh11-hh; //.237412
0001bc  4888              LDR      r0,|L109.992|
0001be  6800              LDR      r0,[r0,#0]  ; hh
0001c0  f7fffffe          BL       __aeabi_i2d
0001c4  4604              MOV      r4,r0
0001c6  4887              LDR      r0,|L109.996|
0001c8  c80c              LDM      r0!,{r2,r3}
0001ca  4620              MOV      r0,r4
0001cc  f7fffffe          BL       __aeabi_drsub
0001d0  4a85              LDR      r2,|L109.1000|
0001d2  c203              STM      r2!,{r0,r1}
;;;1188   		mm11*=100;
0001d4  2200              MOVS     r2,#0
0001d6  4b81              LDR      r3,|L109.988|
0001d8  4983              LDR      r1,|L109.1000|
0001da  c903              LDM      r1,{r0,r1}
0001dc  f7fffffe          BL       __aeabi_dmul
0001e0  4a81              LDR      r2,|L109.1000|
0001e2  c203              STM      r2!,{r0,r1}
;;;1189   		mm22=hh+mm11/60;	
0001e4  2200              MOVS     r2,#0
0001e6  4b81              LDR      r3,|L109.1004|
0001e8  497f              LDR      r1,|L109.1000|
0001ea  c903              LDM      r1,{r0,r1}
0001ec  f7fffffe          BL       __aeabi_ddiv
0001f0  4604              MOV      r4,r0
0001f2  460d              MOV      r5,r1
0001f4  487a              LDR      r0,|L109.992|
0001f6  6800              LDR      r0,[r0,#0]  ; hh
0001f8  f7fffffe          BL       __aeabi_i2d
0001fc  4606              MOV      r6,r0
0001fe  4622              MOV      r2,r4
000200  462b              MOV      r3,r5
000202  f7fffffe          BL       __aeabi_dadd
000206  4a7a              LDR      r2,|L109.1008|
000208  c203              STM      r2!,{r0,r1}
;;;1190   		memset(lati,0,15);
00020a  210f              MOVS     r1,#0xf
00020c  486d              LDR      r0,|L109.964|
00020e  f7fffffe          BL       __aeabi_memclr
;;;1191   		sprintf(lati,"%f",mm22);
000212  4877              LDR      r0,|L109.1008|
000214  4977              LDR      r1,|L109.1012|
000216  c80c              LDM      r0!,{r2,r3}
000218  486a              LDR      r0,|L109.964|
00021a  f7fffffe          BL       __2sprintf
;;;1192   		c=stof(longi);//7523.7412
00021e  486b              LDR      r0,|L109.972|
000220  f7fffffe          BL       stof
000224  4604              MOV      r4,r0
000226  f7fffffe          BL       __aeabi_f2d
00022a  4a6b              LDR      r2,|L109.984|
00022c  c203              STM      r2!,{r0,r1}
;;;1193   		hh= c/100; //75
00022e  2200              MOVS     r2,#0
000230  4b6a              LDR      r3,|L109.988|
000232  4969              LDR      r1,|L109.984|
000234  c903              LDM      r1,{r0,r1}
000236  f7fffffe          BL       __aeabi_ddiv
00023a  4604              MOV      r4,r0
00023c  f7fffffe          BL       __aeabi_d2iz
000240  4967              LDR      r1,|L109.992|
000242  6008              STR      r0,[r1,#0]  ; hh
;;;1194   		hh11 = c/100; //75.237412
000244  2200              MOVS     r2,#0
000246  4b65              LDR      r3,|L109.988|
000248  4963              LDR      r1,|L109.984|
00024a  c903              LDM      r1,{r0,r1}
00024c  f7fffffe          BL       __aeabi_ddiv
000250  4a64              LDR      r2,|L109.996|
000252  c203              STM      r2!,{r0,r1}
;;;1195   		mm11 = hh11-hh; //.237412
000254  4862              LDR      r0,|L109.992|
000256  6800              LDR      r0,[r0,#0]  ; hh
000258  f7fffffe          BL       __aeabi_i2d
00025c  4604              MOV      r4,r0
00025e  4861              LDR      r0,|L109.996|
000260  c80c              LDM      r0!,{r2,r3}
000262  4620              MOV      r0,r4
000264  f7fffffe          BL       __aeabi_drsub
000268  4a5f              LDR      r2,|L109.1000|
00026a  c203              STM      r2!,{r0,r1}
;;;1196   		mm11*=100;
00026c  2200              MOVS     r2,#0
00026e  4b5b              LDR      r3,|L109.988|
000270  495d              LDR      r1,|L109.1000|
000272  c903              LDM      r1,{r0,r1}
000274  f7fffffe          BL       __aeabi_dmul
000278  4a5b              LDR      r2,|L109.1000|
00027a  c203              STM      r2!,{r0,r1}
;;;1197   		mm22=hh+mm11/60;	
00027c  2200              MOVS     r2,#0
00027e  4b5b              LDR      r3,|L109.1004|
000280  4959              LDR      r1,|L109.1000|
000282  c903              LDM      r1,{r0,r1}
000284  f7fffffe          BL       __aeabi_ddiv
000288  4604              MOV      r4,r0
00028a  460d              MOV      r5,r1
00028c  4854              LDR      r0,|L109.992|
00028e  6800              LDR      r0,[r0,#0]  ; hh
000290  f7fffffe          BL       __aeabi_i2d
000294  4606              MOV      r6,r0
000296  4622              MOV      r2,r4
000298  462b              MOV      r3,r5
00029a  f7fffffe          BL       __aeabi_dadd
00029e  4a54              LDR      r2,|L109.1008|
0002a0  c203              STM      r2!,{r0,r1}
;;;1198   		memset(longi,0,15);
0002a2  210f              MOVS     r1,#0xf
0002a4  4849              LDR      r0,|L109.972|
0002a6  f7fffffe          BL       __aeabi_memclr
;;;1199   		sprintf(longi,"%f",mm22);	
0002aa  4851              LDR      r0,|L109.1008|
0002ac  4951              LDR      r1,|L109.1012|
0002ae  c80c              LDM      r0!,{r2,r3}
0002b0  4846              LDR      r0,|L109.972|
0002b2  f7fffffe          BL       __2sprintf
;;;1200   		strcat(data,imei);
0002b6  492f              LDR      r1,|L109.884|
0002b8  484f              LDR      r0,|L109.1016|
0002ba  f7fffffe          BL       strcat
;;;1201   		strcat(data,",");	
0002be  494f              LDR      r1,|L109.1020|
0002c0  484d              LDR      r0,|L109.1016|
0002c2  f7fffffe          BL       strcat
;;;1202   //		strcat(data,"$GxGGA");	
;;;1203   		strcat(data,gga);
0002c6  494e              LDR      r1,|L109.1024|
0002c8  484b              LDR      r0,|L109.1016|
0002ca  f7fffffe          BL       strcat
;;;1204   		strcat(data,",");	
0002ce  494b              LDR      r1,|L109.1020|
0002d0  4849              LDR      r0,|L109.1016|
0002d2  f7fffffe          BL       strcat
;;;1205   		strcat(data,rmc);	
0002d6  493c              LDR      r1,|L109.968|
0002d8  4847              LDR      r0,|L109.1016|
0002da  f7fffffe          BL       strcat
;;;1206   		strcat(data,",");	
0002de  4947              LDR      r1,|L109.1020|
0002e0  4845              LDR      r0,|L109.1016|
0002e2  f7fffffe          BL       strcat
;;;1207   		strcat(data,num2);	
0002e6  492f              LDR      r1,|L109.932|
0002e8  4843              LDR      r0,|L109.1016|
0002ea  f7fffffe          BL       strcat
;;;1208   		strcat(data,",F=");
0002ee  4945              LDR      r1,|L109.1028|
0002f0  4841              LDR      r0,|L109.1016|
0002f2  f7fffffe          BL       strcat
;;;1209   	adc_read(9);							
0002f6  2009              MOVS     r0,#9
0002f8  f7fffffe          BL       adc_read
;;;1210   	memset(fuelstr,0,5);
0002fc  2105              MOVS     r1,#5
0002fe  4842              LDR      r0,|L109.1032|
000300  f7fffffe          BL       __aeabi_memclr4
;;;1211   	sprintf(fuelstr,"%d,",fuel);
000304  4841              LDR      r0,|L109.1036|
000306  4942              LDR      r1,|L109.1040|
000308  6802              LDR      r2,[r0,#0]  ; fuel
00030a  483f              LDR      r0,|L109.1032|
00030c  f7fffffe          BL       __2sprintf
;;;1212   		strcat(data,fuelstr);		
000310  493d              LDR      r1,|L109.1032|
000312  4839              LDR      r0,|L109.1016|
000314  f7fffffe          BL       strcat
;;;1213   		strcat(data,"AC=");	
000318  493e              LDR      r1,|L109.1044|
00031a  4837              LDR      r0,|L109.1016|
00031c  f7fffffe          BL       strcat
;;;1214   		strcat(data,acstr);
000320  4925              LDR      r1,|L109.952|
000322  4835              LDR      r0,|L109.1016|
000324  f7fffffe          BL       strcat
;;;1215   		strcat(data,",I=");	
000328  493b              LDR      r1,|L109.1048|
00032a  4833              LDR      r0,|L109.1016|
00032c  f7fffffe          BL       strcat
;;;1216   		strcat(data,ignstr);
000330  491e              LDR      r1,|L109.940|
000332  4831              LDR      r0,|L109.1016|
000334  f7fffffe          BL       strcat
;;;1217   		strcat(data,",");	
000338  4930              LDR      r1,|L109.1020|
00033a  482f              LDR      r0,|L109.1016|
00033c  f7fffffe          BL       strcat
;;;1218   	memset(fuelstr,0,5);
000340  2105              MOVS     r1,#5
000342  4831              LDR      r0,|L109.1032|
000344  f7fffffe          BL       __aeabi_memclr4
;;;1219   	sprintf(fuelstr,"%d",rtcticks2);
000348  4834              LDR      r0,|L109.1052|
00034a  491a              LDR      r1,|L109.948|
00034c  6802              LDR      r2,[r0,#0]  ; rtcticks2
00034e  482e              LDR      r0,|L109.1032|
000350  f7fffffe          BL       __2sprintf
;;;1220   		strcat(data,fuelstr);	
000354  492c              LDR      r1,|L109.1032|
000356  4828              LDR      r0,|L109.1016|
000358  f7fffffe          BL       strcat
;;;1221   		
;;;1222   		
;;;1223   //		strcat(data,sprintf(rtcticks2);
;;;1224   		if( !(GPIOC_PDIR & 0x00000001)){
00035c  4814              LDR      r0,|L109.944|
00035e  3040              ADDS     r0,r0,#0x40
000360  6900              LDR      r0,[r0,#0x10]
000362  07c0              LSLS     r0,r0,#31
000364  0fc0              LSRS     r0,r0,#31
000366  2800              CMP      r0,#0
000368  d003              BEQ      |L109.882|
;;;1225   		}
;;;1226   		else{strcat(data,",BR*");}
00036a  492d              LDR      r1,|L109.1056|
00036c  4822              LDR      r0,|L109.1016|
00036e  f7fffffe          BL       strcat
                  |L109.882|
;;;1227   //return 0;
;;;1228   }
000372  bdfe              POP      {r1-r7,pc}
;;;1229   
                          ENDP

                  |L109.884|
                          DCD      imei
                  |L109.888|
                          DCD      imeiinc
                  |L109.892|
                          DCD      ||.conststring||+0xe0
                  |L109.896|
                          DCD      ||.conststring||+0x18
                  |L109.900|
                          DCD      ||.conststring||+0x2c
                  |L109.904|
                          DCD      ||.conststring||+0xf0
                  |L109.908|
                          DCD      i
                  |L109.912|
                          DCD      uart_string_gsm
                  |L109.916|
                          DCD      time52
                  |L109.920|
                          DCD      tmeout
                  |L109.924|
                          DCD      ||.conststring||+0x10
                  |L109.928|
                          DCD      ||.conststring||+0x100
                  |L109.932|
                          DCD      num2
                  |L109.936|
                          DCD      voltagecbc
                  |L109.940|
                          DCD      ignstr
                  |L109.944|
                          DCD      0x400ff040
                  |L109.948|
                          DCD      ||.conststring||+0x110
                  |L109.952|
                          DCD      acstr
                  |L109.956|
                          DCD      int_erval
                  |L109.960|
                          DCD      lpticks
                  |L109.964|
                          DCD      lati
                  |L109.968|
                          DCD      ||rmc||
                  |L109.972|
                          DCD      longi
                  |L109.976|
                          DCD      velocity
                  |L109.980|
                          DCD      speed
                  |L109.984|
                          DCD      c
                  |L109.988|
                          DCD      0x40590000
                  |L109.992|
                          DCD      ||hh||
                  |L109.996|
                          DCD      hh11
                  |L109.1000|
                          DCD      mm11
                  |L109.1004|
                          DCD      0x404e0000
                  |L109.1008|
                          DCD      mm22
                  |L109.1012|
                          DCD      ||.conststring||+0x114
                  |L109.1016|
                          DCD      data
                  |L109.1020|
                          DCD      ||.conststring||+0x118
                  |L109.1024|
                          DCD      gga
                  |L109.1028|
                          DCD      ||.conststring||+0x11c
                  |L109.1032|
                          DCD      fuelstr
                  |L109.1036|
                          DCD      fuel
                  |L109.1040|
                          DCD      ||.conststring||+0x120
                  |L109.1044|
                          DCD      ||.conststring||+0x124
                  |L109.1048|
                          DCD      ||.conststring||+0x128
                  |L109.1052|
                          DCD      rtcticks2
                  |L109.1056|
                          DCD      ||.conststring||+0x12c

                          AREA ||i.save_interval||, COMGROUP=save_interval, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_interval PROC
;;;1197   
;;;1198   __inline void save_interval()
000000  b538              PUSH     {r3-r5,lr}
;;;1199   {
;;;1200   	
;;;1201   send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L116.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L116.208|
000008  4a32              LDR      r2,|L116.212|
00000a  4933              LDR      r1,|L116.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L116.220|
000010  f7fffffe          BL       send_GSM
;;;1202   
;;;1203   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L116.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1204   	sprintf(at_,"\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",strlen(interval)+11);	
00001c  4831              LDR      r0,|L116.228|
00001e  f7fffffe          BL       strlen
000022  4604              MOV      r4,r0
000024  340b              ADDS     r4,r4,#0xb
000026  4622              MOV      r2,r4
000028  492f              LDR      r1,|L116.232|
00002a  482d              LDR      r0,|L116.224|
00002c  f7fffffe          BL       __2sprintf
;;;1205   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000030  200a              MOVS     r0,#0xa
000032  4b27              LDR      r3,|L116.208|
000034  4a27              LDR      r2,|L116.212|
000036  492d              LDR      r1,|L116.236|
000038  9000              STR      r0,[sp,#0]
00003a  4829              LDR      r0,|L116.224|
00003c  f7fffffe          BL       send_GSM
;;;1206   	//clear();
;;;1207   
;;;1208   	
;;;1209   	send_modem("|INTERVAL|");
000040  482b              LDR      r0,|L116.240|
000042  f7fffffe          BL       send_modem
;;;1210   		for(k=0;k<strlen(interval);k++)
000046  2000              MOVS     r0,#0
000048  492a              LDR      r1,|L116.244|
00004a  6008              STR      r0,[r1,#0]  ; k
00004c  e00b              B        |L116.102|
                  |L116.78|
;;;1211   		{
;;;1212   			uart_putchar(UART1_BASE_PTR, interval[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004e  4825              LDR      r0,|L116.228|
000050  4a28              LDR      r2,|L116.244|
000052  6812              LDR      r2,[r2,#0]  ; k
000054  5c81              LDRB     r1,[r0,r2]
000056  4828              LDR      r0,|L116.248|
000058  f7fffffe          BL       uart_putchar
00005c  4825              LDR      r0,|L116.244|
00005e  6800              LDR      r0,[r0,#0]            ;1210  ; k
000060  1c40              ADDS     r0,r0,#1              ;1210
000062  4924              LDR      r1,|L116.244|
000064  6008              STR      r0,[r1,#0]            ;1210  ; k
                  |L116.102|
000066  481f              LDR      r0,|L116.228|
000068  f7fffffe          BL       strlen
00006c  4921              LDR      r1,|L116.244|
00006e  6809              LDR      r1,[r1,#0]            ;1210  ; k
000070  4288              CMP      r0,r1                 ;1210
000072  d8ec              BHI      |L116.78|
;;;1213   		}	
;;;1214   			send_modem("|");			
000074  4821              LDR      r0,|L116.252|
000076  f7fffffe          BL       send_modem
;;;1215    
;;;1216   									k2=0;									//string array counter for uart 1
00007a  2000              MOVS     r0,#0
00007c  4920              LDR      r1,|L116.256|
00007e  6008              STR      r0,[r1,#0]  ; k2
;;;1217   									time=19999;						//timer counts to wait for characters in uart 1 									
000080  4820              LDR      r0,|L116.260|
000082  4921              LDR      r1,|L116.264|
000084  6008              STR      r0,[r1,#0]  ; time
;;;1218   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000086  e010              B        |L116.170|
                  |L116.136|
;;;1219   									{
;;;1220   									time--;
000088  481f              LDR      r0,|L116.264|
00008a  6800              LDR      r0,[r0,#0]  ; time
00008c  1e40              SUBS     r0,r0,#1
00008e  491e              LDR      r1,|L116.264|
000090  6008              STR      r0,[r1,#0]  ; time
;;;1221   									if(time % 2000 == 0)
000092  217d              MOVS     r1,#0x7d
000094  0109              LSLS     r1,r1,#4
000096  481c              LDR      r0,|L116.264|
000098  6800              LDR      r0,[r0,#0]  ; time
00009a  f7fffffe          BL       __aeabi_idivmod
00009e  2900              CMP      r1,#0
0000a0  d103              BNE      |L116.170|
;;;1222   										{
;;;1223   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1224   											uart_putchar(UART1_BASE_PTR,'\n');
0000a2  210a              MOVS     r1,#0xa
0000a4  4814              LDR      r0,|L116.248|
0000a6  f7fffffe          BL       uart_putchar
                  |L116.170|
0000aa  4918              LDR      r1,|L116.268|
0000ac  4818              LDR      r0,|L116.272|
0000ae  f7fffffe          BL       strstr
0000b2  2800              CMP      r0,#0                 ;1218
0000b4  d109              BNE      |L116.202|
0000b6  4814              LDR      r0,|L116.264|
0000b8  6800              LDR      r0,[r0,#0]            ;1218  ; time
0000ba  2801              CMP      r0,#1                 ;1218
0000bc  db05              BLT      |L116.202|
0000be  4915              LDR      r1,|L116.276|
0000c0  4813              LDR      r0,|L116.272|
0000c2  f7fffffe          BL       strstr
0000c6  2800              CMP      r0,#0                 ;1218
0000c8  d0de              BEQ      |L116.136|
                  |L116.202|
;;;1225   										}
;;;1226   	
;;;1227   									}
;;;1228   
;;;1229   
;;;1230   	
;;;1231   }	
0000ca  bd38              POP      {r3-r5,pc}
;;;1232   	
                          ENDP

                  |L116.204|
                          DCD      tmeout
                  |L116.208|
                          DCD      ||.conststring||+0x10
                  |L116.212|
                          DCD      ||.conststring||+0x18
                  |L116.216|
                          DCD      ||.conststring||+0x2c
                  |L116.220|
                          DCD      ||.conststring||+0x134
                  |L116.224|
                          DCD      at_
                  |L116.228|
                          DCD      interval
                  |L116.232|
                          DCD      ||.conststring||+0x154
                  |L116.236|
                          DCD      ||.conststring||+0x20
                  |L116.240|
                          DCD      ||.conststring||+0x17c
                  |L116.244|
                          DCD      k
                  |L116.248|
                          DCD      0x4006b000
                  |L116.252|
                          DCD      ||.conststring||+0xdc
                  |L116.256|
                          DCD      ||k2||
                  |L116.260|
                          DCD      0x00004e1f
                  |L116.264|
                          DCD      time
                  |L116.268|
                          DCD      ||.conststring||+0x70
                  |L116.272|
                          DCD      uart_string_gsm
                  |L116.276|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.saveapn||, COMGROUP=saveapn, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  saveapn PROC
;;;1150   
;;;1151   __inline void saveapn(){
000000  b538              PUSH     {r3-r5,lr}
;;;1152   	
;;;1153   send_GSM("\nAT+FSCREATE=C:\\APN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L123.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L123.208|
000008  4a32              LDR      r2,|L123.212|
00000a  4933              LDR      r1,|L123.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L123.220|
000010  f7fffffe          BL       send_GSM
;;;1154   
;;;1155   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L123.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1156   	sprintf(at_,"\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",strlen(apn)+3);	
00001c  4831              LDR      r0,|L123.228|
00001e  f7fffffe          BL       strlen
000022  1cc4              ADDS     r4,r0,#3
000024  4622              MOV      r2,r4
000026  4930              LDR      r1,|L123.232|
000028  482d              LDR      r0,|L123.224|
00002a  f7fffffe          BL       __2sprintf
;;;1157   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
00002e  200a              MOVS     r0,#0xa
000030  4b27              LDR      r3,|L123.208|
000032  4a28              LDR      r2,|L123.212|
000034  492d              LDR      r1,|L123.236|
000036  9000              STR      r0,[sp,#0]
000038  4829              LDR      r0,|L123.224|
00003a  f7fffffe          BL       send_GSM
;;;1158   	//clear();
;;;1159   
;;;1160   	
;;;1161   	send_modem("|");
00003e  482c              LDR      r0,|L123.240|
000040  f7fffffe          BL       send_modem
;;;1162   		for(k=0;k<strlen(apn);k++)
000044  2000              MOVS     r0,#0
000046  492b              LDR      r1,|L123.244|
000048  6008              STR      r0,[r1,#0]  ; k
00004a  e00b              B        |L123.100|
                  |L123.76|
;;;1163   		{
;;;1164   			uart_putchar(UART1_BASE_PTR, apn[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004c  4825              LDR      r0,|L123.228|
00004e  4a29              LDR      r2,|L123.244|
000050  6812              LDR      r2,[r2,#0]  ; k
000052  5c81              LDRB     r1,[r0,r2]
000054  4828              LDR      r0,|L123.248|
000056  f7fffffe          BL       uart_putchar
00005a  4826              LDR      r0,|L123.244|
00005c  6800              LDR      r0,[r0,#0]            ;1162  ; k
00005e  1c40              ADDS     r0,r0,#1              ;1162
000060  4924              LDR      r1,|L123.244|
000062  6008              STR      r0,[r1,#0]            ;1162  ; k
                  |L123.100|
000064  481f              LDR      r0,|L123.228|
000066  f7fffffe          BL       strlen
00006a  4922              LDR      r1,|L123.244|
00006c  6809              LDR      r1,[r1,#0]            ;1162  ; k
00006e  4288              CMP      r0,r1                 ;1162
000070  d8ec              BHI      |L123.76|
;;;1165   		}	
;;;1166   			send_modem("|");			
000072  481f              LDR      r0,|L123.240|
000074  f7fffffe          BL       send_modem
;;;1167    
;;;1168   									k2=0;									//string array counter for uart 1
000078  2000              MOVS     r0,#0
00007a  4920              LDR      r1,|L123.252|
00007c  6008              STR      r0,[r1,#0]  ; k2
;;;1169   									time=19999;						//timer counts to wait for characters in uart 1 									
00007e  4820              LDR      r0,|L123.256|
000080  4920              LDR      r1,|L123.260|
000082  6008              STR      r0,[r1,#0]  ; time
;;;1170   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000084  e010              B        |L123.168|
                  |L123.134|
;;;1171   									{
;;;1172   									time--;
000086  481f              LDR      r0,|L123.260|
000088  6800              LDR      r0,[r0,#0]  ; time
00008a  1e40              SUBS     r0,r0,#1
00008c  491d              LDR      r1,|L123.260|
00008e  6008              STR      r0,[r1,#0]  ; time
;;;1173   									if(time % 2000 == 0)
000090  217d              MOVS     r1,#0x7d
000092  0109              LSLS     r1,r1,#4
000094  481b              LDR      r0,|L123.260|
000096  6800              LDR      r0,[r0,#0]  ; time
000098  f7fffffe          BL       __aeabi_idivmod
00009c  2900              CMP      r1,#0
00009e  d103              BNE      |L123.168|
;;;1174   										{
;;;1175   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1176   											uart_putchar(UART1_BASE_PTR,'\n');
0000a0  210a              MOVS     r1,#0xa
0000a2  4815              LDR      r0,|L123.248|
0000a4  f7fffffe          BL       uart_putchar
                  |L123.168|
0000a8  4917              LDR      r1,|L123.264|
0000aa  4818              LDR      r0,|L123.268|
0000ac  f7fffffe          BL       strstr
0000b0  2800              CMP      r0,#0                 ;1170
0000b2  d109              BNE      |L123.200|
0000b4  4813              LDR      r0,|L123.260|
0000b6  6800              LDR      r0,[r0,#0]            ;1170  ; time
0000b8  2801              CMP      r0,#1                 ;1170
0000ba  db05              BLT      |L123.200|
0000bc  4914              LDR      r1,|L123.272|
0000be  4813              LDR      r0,|L123.268|
0000c0  f7fffffe          BL       strstr
0000c4  2800              CMP      r0,#0                 ;1170
0000c6  d0de              BEQ      |L123.134|
                  |L123.200|
;;;1177   										}
;;;1178   	
;;;1179   									}
;;;1180   
;;;1181   
;;;1182   	
;;;1183   }
0000c8  bd38              POP      {r3-r5,pc}
;;;1184   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L123.204|
                          DCD      tmeout
                  |L123.208|
                          DCD      ||.conststring||+0x10
                  |L123.212|
                          DCD      ||.conststring||+0x18
                  |L123.216|
                          DCD      ||.conststring||+0x2c
                  |L123.220|
                          DCD      ||.conststring||+0x188
                  |L123.224|
                          DCD      at_
                  |L123.228|
                          DCD      apn
                  |L123.232|
                          DCD      ||.conststring||+0x1a4
                  |L123.236|
                          DCD      ||.conststring||+0x20
                  |L123.240|
                          DCD      ||.conststring||+0xdc
                  |L123.244|
                          DCD      k
                  |L123.248|
                          DCD      0x4006b000
                  |L123.252|
                          DCD      ||k2||
                  |L123.256|
                          DCD      0x00004e1f
                  |L123.260|
                          DCD      time
                  |L123.264|
                          DCD      ||.conststring||+0x70
                  |L123.268|
                          DCD      uart_string_gsm
                  |L123.272|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.msg_sim800||, COMGROUP=msg_sim800, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  msg_sim800 PROC
;;;1374   
;;;1375   __inline void msg_sim800() 
000000  b51f              PUSH     {r0-r4,lr}
;;;1376   {
;;;1377   		cond1=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L130.1024|
000006  6008              STR      r0,[r1,#0]  ; cond1
;;;1378   		cond2=0;
000008  49fe              LDR      r1,|L130.1028|
00000a  6008              STR      r0,[r1,#0]  ; cond2
;;;1379   		cond3=0;
00000c  49fe              LDR      r1,|L130.1032|
00000e  6008              STR      r0,[r1,#0]  ; cond3
;;;1380   		cond4=0;
000010  49fe              LDR      r1,|L130.1036|
000012  6008              STR      r0,[r1,#0]  ; cond4
;;;1381   		cond5=0;
000014  49fe              LDR      r1,|L130.1040|
000016  6008              STR      r0,[r1,#0]  ; cond5
;;;1382   		cond6=0;
000018  49fe              LDR      r1,|L130.1044|
00001a  6008              STR      r0,[r1,#0]  ; cond6
;;;1383   		cond7=0;
00001c  49fe              LDR      r1,|L130.1048|
00001e  6008              STR      r0,[r1,#0]  ; cond7
;;;1384   		cond8=0;
000020  49fe              LDR      r1,|L130.1052|
000022  6008              STR      r0,[r1,#0]  ; cond8
;;;1385   		cond9=0;
000024  49fe              LDR      r1,|L130.1056|
000026  6008              STR      r0,[r1,#0]  ; cond9
;;;1386   		cond10=0;
000028  49fe              LDR      r1,|L130.1060|
00002a  6008              STR      r0,[r1,#0]  ; cond10
;;;1387   		cond11=0;
00002c  49fe              LDR      r1,|L130.1064|
00002e  6008              STR      r0,[r1,#0]  ; cond11
;;;1388   		cond12=0;
000030  49fe              LDR      r1,|L130.1068|
000032  6008              STR      r0,[r1,#0]  ; cond12
;;;1389   		cond13=0;
000034  49fe              LDR      r1,|L130.1072|
000036  6008              STR      r0,[r1,#0]  ; cond13
;;;1390   		cond14=0;
000038  49fe              LDR      r1,|L130.1076|
00003a  6008              STR      r0,[r1,#0]  ; cond14
;;;1391   		cond15=0;		
00003c  49fe              LDR      r1,|L130.1080|
00003e  6008              STR      r0,[r1,#0]  ; cond15
;;;1392   	
;;;1393   //ringflag=1;	
;;;1394   	if(ringflag==1 )
000040  48fe              LDR      r0,|L130.1084|
000042  7800              LDRB     r0,[r0,#0]  ; ringflag
000044  2801              CMP      r0,#1
000046  d17d              BNE      |L130.324|
;;;1395   	{
;;;1396   		sleep_flag=0;
000048  2000              MOVS     r0,#0
00004a  49fd              LDR      r1,|L130.1088|
00004c  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1397       DTR_OFF;		// not sleep	
00004e  2080              MOVS     r0,#0x80
000050  49fc              LDR      r1,|L130.1092|
000052  6088              STR      r0,[r1,#8]
;;;1398   
;;;1399   delay(1000);
000054  207d              MOVS     r0,#0x7d
000056  00c0              LSLS     r0,r0,#3
000058  f7fffffe          BL       delay
;;;1400   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
00005c  48fa              LDR      r0,|L130.1096|
00005e  6800              LDR      r0,[r0,#0]  ; tmeout
000060  4bfa              LDR      r3,|L130.1100|
000062  4afb              LDR      r2,|L130.1104|
000064  49fb              LDR      r1,|L130.1108|
000066  9000              STR      r0,[sp,#0]
000068  48fb              LDR      r0,|L130.1112|
00006a  f7fffffe          BL       send_GSM
;;;1401   		
;;;1402   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);  		
00006e  48f6              LDR      r0,|L130.1096|
000070  6800              LDR      r0,[r0,#0]  ; tmeout
000072  4bf6              LDR      r3,|L130.1100|
000074  4af6              LDR      r2,|L130.1104|
000076  49f7              LDR      r1,|L130.1108|
000078  9000              STR      r0,[sp,#0]
00007a  48f8              LDR      r0,|L130.1116|
00007c  f7fffffe          BL       send_GSM
;;;1403   delay(1000);		
000080  207d              MOVS     r0,#0x7d
000082  00c0              LSLS     r0,r0,#3
000084  f7fffffe          BL       delay
;;;1404   		
;;;1405   
;;;1406   	send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000088  48ef              LDR      r0,|L130.1096|
00008a  6800              LDR      r0,[r0,#0]  ; tmeout
00008c  4bef              LDR      r3,|L130.1100|
00008e  4af0              LDR      r2,|L130.1104|
000090  49f0              LDR      r1,|L130.1108|
000092  9000              STR      r0,[sp,#0]
000094  48f2              LDR      r0,|L130.1120|
000096  f7fffffe          BL       send_GSM
;;;1407   	send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
00009a  48eb              LDR      r0,|L130.1096|
00009c  6800              LDR      r0,[r0,#0]  ; tmeout
00009e  4beb              LDR      r3,|L130.1100|
0000a0  4aeb              LDR      r2,|L130.1104|
0000a2  49ec              LDR      r1,|L130.1108|
0000a4  9000              STR      r0,[sp,#0]
0000a6  48ef              LDR      r0,|L130.1124|
0000a8  f7fffffe          BL       send_GSM
;;;1408   
;;;1409   					send_GSM("\r\nAT+CMGR=1\r\n", "OK\r\n", "ERROR" , "OK\r\n",tmeout);	
0000ac  48e6              LDR      r0,|L130.1096|
0000ae  6800              LDR      r0,[r0,#0]  ; tmeout
0000b0  4be8              LDR      r3,|L130.1108|
0000b2  4aed              LDR      r2,|L130.1128|
0000b4  4619              MOV      r1,r3
0000b6  9000              STR      r0,[sp,#0]
0000b8  48ec              LDR      r0,|L130.1132|
0000ba  f7fffffe          BL       send_GSM
;;;1410   					clear();
0000be  f7fffffe          BL       clear
;;;1411   					memset(num2,0,30);
0000c2  211e              MOVS     r1,#0x1e
0000c4  48ea              LDR      r0,|L130.1136|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1412   					parse_gsm(uart_string_gsm, 3, 4, num2);
0000ca  4be9              LDR      r3,|L130.1136|
0000cc  2204              MOVS     r2,#4
0000ce  2103              MOVS     r1,#3
0000d0  48e8              LDR      r0,|L130.1140|
0000d2  f7fffffe          BL       parse_gsm
;;;1413   			
;;;1414   						cond1=strstr(uart_string_gsm, "OWNER");	
0000d6  49e8              LDR      r1,|L130.1144|
0000d8  48e6              LDR      r0,|L130.1140|
0000da  f7fffffe          BL       strstr
0000de  49c8              LDR      r1,|L130.1024|
0000e0  6008              STR      r0,[r1,#0]  ; cond1
;;;1415   						cond2=strstr(uart_string_gsm, "LOCATION");
0000e2  49e6              LDR      r1,|L130.1148|
0000e4  48e3              LDR      r0,|L130.1140|
0000e6  f7fffffe          BL       strstr
0000ea  49c6              LDR      r1,|L130.1028|
0000ec  6008              STR      r0,[r1,#0]  ; cond2
;;;1416   						cond3=strstr(uart_string_gsm, "INTERVAL_");
0000ee  49e4              LDR      r1,|L130.1152|
0000f0  48e0              LDR      r0,|L130.1140|
0000f2  f7fffffe          BL       strstr
0000f6  49c4              LDR      r1,|L130.1032|
0000f8  6008              STR      r0,[r1,#0]  ; cond3
;;;1417   						cond4=strstr(uart_string_gsm, "START");
0000fa  49e2              LDR      r1,|L130.1156|
0000fc  48dd              LDR      r0,|L130.1140|
0000fe  f7fffffe          BL       strstr
000102  49c2              LDR      r1,|L130.1036|
000104  6008              STR      r0,[r1,#0]  ; cond4
;;;1418   						cond5=strstr(uart_string_gsm, "OWNER1");
000106  49e0              LDR      r1,|L130.1160|
000108  48da              LDR      r0,|L130.1140|
00010a  f7fffffe          BL       strstr
00010e  49c0              LDR      r1,|L130.1040|
000110  6008              STR      r0,[r1,#0]  ; cond5
;;;1419   						cond6=strstr(uart_string_gsm, "OWNER2");
000112  49de              LDR      r1,|L130.1164|
000114  48d7              LDR      r0,|L130.1140|
000116  f7fffffe          BL       strstr
00011a  49be              LDR      r1,|L130.1044|
00011c  6008              STR      r0,[r1,#0]  ; cond6
;;;1420   						cond7=strstr(uart_string_gsm, "OWNER3");
00011e  49dc              LDR      r1,|L130.1168|
000120  48d4              LDR      r0,|L130.1140|
000122  f7fffffe          BL       strstr
000126  49bc              LDR      r1,|L130.1048|
000128  6008              STR      r0,[r1,#0]  ; cond7
;;;1421   						cond8=strstr(uart_string_gsm, "DEBUG");
00012a  49da              LDR      r1,|L130.1172|
00012c  48d1              LDR      r0,|L130.1140|
00012e  f7fffffe          BL       strstr
000132  49ba              LDR      r1,|L130.1052|
000134  6008              STR      r0,[r1,#0]  ; cond8
;;;1422   						cond9=strstr(uart_string_gsm, "RESET");
000136  49d8              LDR      r1,|L130.1176|
000138  48ce              LDR      r0,|L130.1140|
00013a  f7fffffe          BL       strstr
00013e  49b8              LDR      r1,|L130.1056|
000140  6008              STR      r0,[r1,#0]  ; cond9
;;;1423   						cond10=strstr(uart_string_gsm, "IP");
000142  e000              B        |L130.326|
                  |L130.324|
000144  e3d4              B        |L130.2288|
                  |L130.326|
000146  49d5              LDR      r1,|L130.1180|
000148  48ca              LDR      r0,|L130.1140|
00014a  f7fffffe          BL       strstr
00014e  49b5              LDR      r1,|L130.1060|
000150  6008              STR      r0,[r1,#0]  ; cond10
;;;1424   						cond11=strstr(uart_string_gsm, "SUOWNER");	
000152  49d3              LDR      r1,|L130.1184|
000154  48c7              LDR      r0,|L130.1140|
000156  f7fffffe          BL       strstr
00015a  49b3              LDR      r1,|L130.1064|
00015c  6008              STR      r0,[r1,#0]  ; cond11
;;;1425   						cond12=strstr(uart_string_gsm, "SOWNER");	
00015e  49d1              LDR      r1,|L130.1188|
000160  48c4              LDR      r0,|L130.1140|
000162  f7fffffe          BL       strstr
000166  49b1              LDR      r1,|L130.1068|
000168  6008              STR      r0,[r1,#0]  ; cond12
;;;1426   						cond13=strstr(uart_string_gsm, "IGNITION ON");	
00016a  49cf              LDR      r1,|L130.1192|
00016c  48c1              LDR      r0,|L130.1140|
00016e  f7fffffe          BL       strstr
000172  49af              LDR      r1,|L130.1072|
000174  6008              STR      r0,[r1,#0]  ; cond13
;;;1427   						cond14=strstr(uart_string_gsm, "IGNITION OFF");	
000176  49cd              LDR      r1,|L130.1196|
000178  48be              LDR      r0,|L130.1140|
00017a  f7fffffe          BL       strstr
00017e  49ad              LDR      r1,|L130.1076|
000180  6008              STR      r0,[r1,#0]  ; cond14
;;;1428   						cond15=strstr(uart_string_gsm, "IGNSTAT");
000182  49cb              LDR      r1,|L130.1200|
000184  48bb              LDR      r0,|L130.1140|
000186  f7fffffe          BL       strstr
00018a  49ab              LDR      r1,|L130.1080|
00018c  6008              STR      r0,[r1,#0]  ; cond15
;;;1429   
;;;1430   							if(send_SOS==1){
00018e  48c9              LDR      r0,|L130.1204|
000190  6800              LDR      r0,[r0,#0]  ; send_SOS
000192  2801              CMP      r0,#1
000194  d147              BNE      |L130.550|
;;;1431   										
;;;1432   
;;;1433   								
;;;1434   								memset(data2,0,300);
000196  21ff              MOVS     r1,#0xff
000198  312d              ADDS     r1,r1,#0x2d
00019a  48c7              LDR      r0,|L130.1208|
00019c  f7fffffe          BL       __aeabi_memclr
;;;1435   								sprintf(data2,"\nThere is an Emergency please help:\nCoordinates:%sN,%sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,lati,'%',longi);	
0001a0  48c6              LDR      r0,|L130.1212|
0001a2  2125              MOVS     r1,#0x25
0001a4  4ac6              LDR      r2,|L130.1216|
0001a6  4603              MOV      r3,r0
0001a8  9200              STR      r2,[sp,#0]
0001aa  9101              STR      r1,[sp,#4]
0001ac  9002              STR      r0,[sp,#8]
0001ae  49c5              LDR      r1,|L130.1220|
0001b0  48c1              LDR      r0,|L130.1208|
0001b2  f7fffffe          BL       __2sprintf
;;;1436   								memset(num2,0,30);
0001b6  211e              MOVS     r1,#0x1e
0001b8  48ad              LDR      r0,|L130.1136|
0001ba  f7fffffe          BL       __aeabi_memclr
;;;1437   								send_GSM("\r\nAT+CPBR=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001be  48a2              LDR      r0,|L130.1096|
0001c0  6800              LDR      r0,[r0,#0]  ; tmeout
0001c2  4ba2              LDR      r3,|L130.1100|
0001c4  4aa2              LDR      r2,|L130.1104|
0001c6  49a3              LDR      r1,|L130.1108|
0001c8  9000              STR      r0,[sp,#0]
0001ca  48bf              LDR      r0,|L130.1224|
0001cc  f7fffffe          BL       send_GSM
;;;1438   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
0001d0  48a7              LDR      r0,|L130.1136|
0001d2  2122              MOVS     r1,#0x22
0001d4  460b              MOV      r3,r1
0001d6  2202              MOVS     r2,#2
0001d8  9100              STR      r1,[sp,#0]
0001da  9001              STR      r0,[sp,#4]
0001dc  2101              MOVS     r1,#1
0001de  48a5              LDR      r0,|L130.1140|
0001e0  f7fffffe          BL       parse_g
;;;1439   								send_message(data2);
0001e4  48b4              LDR      r0,|L130.1208|
0001e6  f7fffffe          BL       send_message
;;;1440   								memset(num2,0,30);
0001ea  211e              MOVS     r1,#0x1e
0001ec  48a0              LDR      r0,|L130.1136|
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1441   								send_GSM("\r\nAT+CPBR=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001f2  4895              LDR      r0,|L130.1096|
0001f4  6800              LDR      r0,[r0,#0]  ; tmeout
0001f6  4b95              LDR      r3,|L130.1100|
0001f8  4a95              LDR      r2,|L130.1104|
0001fa  4996              LDR      r1,|L130.1108|
0001fc  9000              STR      r0,[sp,#0]
0001fe  48b3              LDR      r0,|L130.1228|
000200  f7fffffe          BL       send_GSM
;;;1442   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
000204  489a              LDR      r0,|L130.1136|
000206  2122              MOVS     r1,#0x22
000208  460b              MOV      r3,r1
00020a  2202              MOVS     r2,#2
00020c  9100              STR      r1,[sp,#0]
00020e  9001              STR      r0,[sp,#4]
000210  2101              MOVS     r1,#1
000212  4898              LDR      r0,|L130.1140|
000214  f7fffffe          BL       parse_g
;;;1443   								send_message(data2);								
000218  48a7              LDR      r0,|L130.1208|
00021a  f7fffffe          BL       send_message
;;;1444   								send_SOS=0;
00021e  2000              MOVS     r0,#0
000220  49a4              LDR      r1,|L130.1204|
000222  6008              STR      r0,[r1,#0]  ; send_SOS
                  |L130.548|
000224  e34a              B        |L130.2236|
                  |L130.550|
;;;1445   							}
;;;1446   							else if(cond1 && cond2)
000226  4876              LDR      r0,|L130.1024|
000228  6800              LDR      r0,[r0,#0]  ; cond1
00022a  2800              CMP      r0,#0
00022c  d022              BEQ      |L130.628|
00022e  4875              LDR      r0,|L130.1028|
000230  6800              LDR      r0,[r0,#0]  ; cond2
000232  2800              CMP      r0,#0
000234  d01e              BEQ      |L130.628|
;;;1447   							{
;;;1448   								memset(data2,0,300);
000236  21ff              MOVS     r1,#0xff
000238  312d              ADDS     r1,r1,#0x2d
00023a  489f              LDR      r0,|L130.1208|
00023c  f7fffffe          BL       __aeabi_memclr
;;;1449   								sprintf(data2,"\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);	
000240  489e              LDR      r0,|L130.1212|
000242  2125              MOVS     r1,#0x25
000244  4a9e              LDR      r2,|L130.1216|
000246  4ba2              LDR      r3,|L130.1232|
000248  9300              STR      r3,[sp,#0]
00024a  9201              STR      r2,[sp,#4]
00024c  9102              STR      r1,[sp,#8]
00024e  9003              STR      r0,[sp,#0xc]
000250  4603              MOV      r3,r0
000252  49a0              LDR      r1,|L130.1236|
000254  4898              LDR      r0,|L130.1208|
000256  f7fffffe          BL       __2sprintf
;;;1450   
;;;1451   								{send_message(data2);}
00025a  4897              LDR      r0,|L130.1208|
00025c  f7fffffe          BL       send_message
;;;1452   
;;;1453   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000260  4879              LDR      r0,|L130.1096|
000262  6800              LDR      r0,[r0,#0]  ; tmeout
000264  4b79              LDR      r3,|L130.1100|
000266  4a7a              LDR      r2,|L130.1104|
000268  497a              LDR      r1,|L130.1108|
00026a  9000              STR      r0,[sp,#0]
00026c  489a              LDR      r0,|L130.1240|
00026e  f7fffffe          BL       send_GSM
000272  e7d7              B        |L130.548|
                  |L130.628|
;;;1454   								
;;;1455   								
;;;1456   							}
;;;1457   	
;;;1458   							else if(cond1 && cond3)
000274  4862              LDR      r0,|L130.1024|
000276  6800              LDR      r0,[r0,#0]  ; cond1
000278  2800              CMP      r0,#0
00027a  d026              BEQ      |L130.714|
00027c  4862              LDR      r0,|L130.1032|
00027e  6800              LDR      r0,[r0,#0]  ; cond3
000280  2800              CMP      r0,#0
000282  d022              BEQ      |L130.714|
;;;1459   							{
;;;1460   								memset(at_,0,100);
000284  2164              MOVS     r1,#0x64
000286  4895              LDR      r0,|L130.1244|
000288  f7fffffe          BL       __aeabi_memclr
;;;1461   								memset(interval,0,5);
00028c  2105              MOVS     r1,#5
00028e  4894              LDR      r0,|L130.1248|
000290  f7fffffe          BL       __aeabi_memclr
;;;1462   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', interval);		
000294  4892              LDR      r0,|L130.1248|
000296  210d              MOVS     r1,#0xd
000298  2320              MOVS     r3,#0x20
00029a  2205              MOVS     r2,#5
00029c  9100              STR      r1,[sp,#0]
00029e  9001              STR      r0,[sp,#4]
0002a0  2103              MOVS     r1,#3
0002a2  4874              LDR      r0,|L130.1140|
0002a4  f7fffffe          BL       parse_g
;;;1463   								int_erval=myAtoi(interval);
0002a8  488d              LDR      r0,|L130.1248|
0002aa  f7fffffe          BL       myAtoi
0002ae  498d              LDR      r1,|L130.1252|
0002b0  6008              STR      r0,[r1,#0]  ; int_erval
;;;1464   								save_interval();			
0002b2  f7fffffe          BL       save_interval
;;;1465   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0002b6  4864              LDR      r0,|L130.1096|
0002b8  6800              LDR      r0,[r0,#0]  ; tmeout
0002ba  4b64              LDR      r3,|L130.1100|
0002bc  4a64              LDR      r2,|L130.1104|
0002be  4965              LDR      r1,|L130.1108|
0002c0  9000              STR      r0,[sp,#0]
0002c2  4885              LDR      r0,|L130.1240|
0002c4  f7fffffe          BL       send_GSM
0002c8  e7ac              B        |L130.548|
                  |L130.714|
;;;1466   
;;;1467   								
;;;1468   							}				
;;;1469   
;;;1470   						else if(cond8)
0002ca  4854              LDR      r0,|L130.1052|
0002cc  6800              LDR      r0,[r0,#0]  ; cond8
0002ce  2800              CMP      r0,#0
0002d0  d07d              BEQ      |L130.974|
;;;1471   							{
;;;1472   								
;;;1473   									memset(at_,0,100);
0002d2  2164              MOVS     r1,#0x64
0002d4  4881              LDR      r0,|L130.1244|
0002d6  f7fffffe          BL       __aeabi_memclr
;;;1474   									for(k=0;k<450;k++)
0002da  2000              MOVS     r0,#0
0002dc  4982              LDR      r1,|L130.1256|
0002de  6008              STR      r0,[r1,#0]  ; k
0002e0  e04e              B        |L130.896|
                  |L130.738|
;;;1475   									{
;;;1476   										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
0002e2  4881              LDR      r0,|L130.1256|
0002e4  6800              LDR      r0,[r0,#0]  ; k
0002e6  1e40              SUBS     r0,r0,#1
0002e8  4962              LDR      r1,|L130.1140|
0002ea  5c08              LDRB     r0,[r1,r0]
0002ec  2820              CMP      r0,#0x20
0002ee  d142              BNE      |L130.886|
0002f0  487d              LDR      r0,|L130.1256|
0002f2  6800              LDR      r0,[r0,#0]  ; k
0002f4  1e80              SUBS     r0,r0,#2
0002f6  5c08              LDRB     r0,[r1,r0]
0002f8  2847              CMP      r0,#0x47
0002fa  d13c              BNE      |L130.886|
0002fc  487a              LDR      r0,|L130.1256|
0002fe  6800              LDR      r0,[r0,#0]  ; k
000300  1ec0              SUBS     r0,r0,#3
000302  5c08              LDRB     r0,[r1,r0]
000304  2855              CMP      r0,#0x55
000306  d136              BNE      |L130.886|
;;;1477   										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
000308  4877              LDR      r0,|L130.1256|
00030a  6800              LDR      r0,[r0,#0]  ; k
00030c  1f00              SUBS     r0,r0,#4
00030e  5c08              LDRB     r0,[r1,r0]
000310  2842              CMP      r0,#0x42
000312  d130              BNE      |L130.886|
000314  4874              LDR      r0,|L130.1256|
000316  6800              LDR      r0,[r0,#0]  ; k
000318  1f40              SUBS     r0,r0,#5
00031a  5c08              LDRB     r0,[r1,r0]
00031c  2845              CMP      r0,#0x45
00031e  d12a              BNE      |L130.886|
000320  4871              LDR      r0,|L130.1256|
000322  6800              LDR      r0,[r0,#0]  ; k
000324  1f80              SUBS     r0,r0,#6
000326  5c08              LDRB     r0,[r1,r0]
000328  2844              CMP      r0,#0x44
00032a  d124              BNE      |L130.886|
;;;1478   										{
;;;1479   											for(i=0;i<100;i++)
00032c  2000              MOVS     r0,#0
00032e  496f              LDR      r1,|L130.1260|
000330  6008              STR      r0,[r1,#0]  ; i
000332  e011              B        |L130.856|
                  |L130.820|
;;;1480   											{
;;;1481   												at_[i]=uart_string_gsm[k];
000334  484f              LDR      r0,|L130.1140|
000336  496c              LDR      r1,|L130.1256|
000338  6809              LDR      r1,[r1,#0]  ; k
00033a  5c40              LDRB     r0,[r0,r1]
00033c  4967              LDR      r1,|L130.1244|
00033e  4a6b              LDR      r2,|L130.1260|
000340  6812              LDR      r2,[r2,#0]  ; i
000342  5488              STRB     r0,[r1,r2]
;;;1482   												k++;
000344  4868              LDR      r0,|L130.1256|
000346  6800              LDR      r0,[r0,#0]  ; k
000348  1c40              ADDS     r0,r0,#1
00034a  4967              LDR      r1,|L130.1256|
00034c  6008              STR      r0,[r1,#0]  ; k
00034e  4867              LDR      r0,|L130.1260|
000350  6800              LDR      r0,[r0,#0]            ;1479  ; i
000352  1c40              ADDS     r0,r0,#1              ;1479
000354  4965              LDR      r1,|L130.1260|
000356  6008              STR      r0,[r1,#0]            ;1479  ; i
                  |L130.856|
000358  4864              LDR      r0,|L130.1260|
00035a  6800              LDR      r0,[r0,#0]            ;1479  ; i
00035c  2864              CMP      r0,#0x64              ;1479
00035e  dbe9              BLT      |L130.820|
;;;1483   											}	
;;;1484   										at_[i+1]='\r';
000360  210d              MOVS     r1,#0xd
000362  4a5e              LDR      r2,|L130.1244|
000364  4861              LDR      r0,|L130.1260|
000366  6800              LDR      r0,[r0,#0]  ; i
000368  1c40              ADDS     r0,r0,#1
00036a  5411              STRB     r1,[r2,r0]
;;;1485   										at_[i+2]='\n';	
00036c  210a              MOVS     r1,#0xa
00036e  485f              LDR      r0,|L130.1260|
000370  6800              LDR      r0,[r0,#0]  ; i
000372  1c80              ADDS     r0,r0,#2
000374  5411              STRB     r1,[r2,r0]
                  |L130.886|
000376  485c              LDR      r0,|L130.1256|
000378  6800              LDR      r0,[r0,#0]            ;1474  ; k
00037a  1c40              ADDS     r0,r0,#1              ;1474
00037c  495a              LDR      r1,|L130.1256|
00037e  6008              STR      r0,[r1,#0]            ;1474  ; k
                  |L130.896|
000380  4859              LDR      r0,|L130.1256|
000382  6800              LDR      r0,[r0,#0]            ;1474  ; k
000384  21ff              MOVS     r1,#0xff              ;1474
000386  31c3              ADDS     r1,r1,#0xc3           ;1474
000388  4288              CMP      r0,r1                 ;1474
00038a  dbaa              BLT      |L130.738|
;;;1486   										}
;;;1487   										else{}
;;;1488   									}
;;;1489   									
;;;1490   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
00038c  482e              LDR      r0,|L130.1096|
00038e  6800              LDR      r0,[r0,#0]  ; tmeout
000390  4b2e              LDR      r3,|L130.1100|
000392  4a2f              LDR      r2,|L130.1104|
000394  492f              LDR      r1,|L130.1108|
000396  9000              STR      r0,[sp,#0]
000398  484f              LDR      r0,|L130.1240|
00039a  f7fffffe          BL       send_GSM
;;;1491   									  send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);		
00039e  482a              LDR      r0,|L130.1096|
0003a0  6800              LDR      r0,[r0,#0]  ; tmeout
0003a2  4b2a              LDR      r3,|L130.1100|
0003a4  4a2a              LDR      r2,|L130.1104|
0003a6  492b              LDR      r1,|L130.1108|
0003a8  9000              STR      r0,[sp,#0]
0003aa  484c              LDR      r0,|L130.1244|
0003ac  f7fffffe          BL       send_GSM
;;;1492   										memset(data2,0,strlen(data2));
0003b0  4841              LDR      r0,|L130.1208|
0003b2  f7fffffe          BL       strlen
0003b6  4604              MOV      r4,r0
0003b8  4621              MOV      r1,r4
0003ba  483f              LDR      r0,|L130.1208|
0003bc  f7fffffe          BL       __aeabi_memclr
;;;1493   										sprintf(data2,"%s",uart_string_gsm);	
0003c0  4a2c              LDR      r2,|L130.1140|
0003c2  494b              LDR      r1,|L130.1264|
0003c4  483c              LDR      r0,|L130.1208|
0003c6  f7fffffe          BL       __2sprintf
;;;1494   										send_message(data2);
0003ca  483b              LDR      r0,|L130.1208|
0003cc  e000              B        |L130.976|
                  |L130.974|
0003ce  e002              B        |L130.982|
                  |L130.976|
0003d0  f7fffffe          BL       send_message
0003d4  e726              B        |L130.548|
                  |L130.982|
;;;1495   										
;;;1496   									
;;;1497   								
;;;1498   							}
;;;1499   										
;;;1500   							else if(cond12 && cond4)
0003d6  4815              LDR      r0,|L130.1068|
0003d8  6800              LDR      r0,[r0,#0]  ; cond12
0003da  2800              CMP      r0,#0
0003dc  d00e              BEQ      |L130.1020|
0003de  480b              LDR      r0,|L130.1036|
0003e0  6800              LDR      r0,[r0,#0]  ; cond4
0003e2  2800              CMP      r0,#0
0003e4  d00a              BEQ      |L130.1020|
;;;1501   							{
;;;1502   								memset( apn,0,25);
0003e6  2119              MOVS     r1,#0x19
0003e8  4842              LDR      r0,|L130.1268|
0003ea  f7fffffe          BL       __aeabi_memclr
;;;1503   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', apn);			
0003ee  4841              LDR      r0,|L130.1268|
0003f0  210d              MOVS     r1,#0xd
0003f2  2320              MOVS     r3,#0x20
0003f4  2205              MOVS     r2,#5
0003f6  9100              STR      r1,[sp,#0]
0003f8  9001              STR      r0,[sp,#4]
0003fa  e07d              B        |L130.1272|
                  |L130.1020|
0003fc  e0e8              B        |L130.1488|
0003fe  0000              DCW      0x0000
                  |L130.1024|
                          DCD      cond1
                  |L130.1028|
                          DCD      cond2
                  |L130.1032|
                          DCD      cond3
                  |L130.1036|
                          DCD      cond4
                  |L130.1040|
                          DCD      cond5
                  |L130.1044|
                          DCD      cond6
                  |L130.1048|
                          DCD      cond7
                  |L130.1052|
                          DCD      cond8
                  |L130.1056|
                          DCD      cond9
                  |L130.1060|
                          DCD      cond10
                  |L130.1064|
                          DCD      cond11
                  |L130.1068|
                          DCD      cond12
                  |L130.1072|
                          DCD      cond13
                  |L130.1076|
                          DCD      cond14
                  |L130.1080|
                          DCD      cond15
                  |L130.1084|
                          DCD      ringflag
                  |L130.1088|
                          DCD      sleep_flag
                  |L130.1092|
                          DCD      0x400ff0c0
                  |L130.1096|
                          DCD      tmeout
                  |L130.1100|
                          DCD      ||.conststring||+0x10
                  |L130.1104|
                          DCD      ||.conststring||+0x18
                  |L130.1108|
                          DCD      ||.conststring||+0x70
                  |L130.1112|
                          DCD      ||.conststring||+0x1c8
                  |L130.1116|
                          DCD      ||.conststring||+0x1d0
                  |L130.1120|
                          DCD      ||.conststring||+0x1dc
                  |L130.1124|
                          DCD      ||.conststring||+0x1ec
                  |L130.1128|
                          DCD      ||.conststring||+0xe0
                  |L130.1132|
                          DCD      ||.conststring||+0x1fc
                  |L130.1136|
                          DCD      num2
                  |L130.1140|
                          DCD      uart_string_gsm
                  |L130.1144|
                          DCD      ||.conststring||+0x20c
                  |L130.1148|
                          DCD      ||.conststring||+0x214
                  |L130.1152|
                          DCD      ||.conststring||+0x220
                  |L130.1156|
                          DCD      ||.conststring||+0x22c
                  |L130.1160|
                          DCD      ||.conststring||+0x234
                  |L130.1164|
                          DCD      ||.conststring||+0x23c
                  |L130.1168|
                          DCD      ||.conststring||+0x244
                  |L130.1172|
                          DCD      ||.conststring||+0x24c
                  |L130.1176|
                          DCD      ||.conststring||+0x254
                  |L130.1180|
                          DCD      ||.conststring||+0x25c
                  |L130.1184|
                          DCD      ||.conststring||+0x260
                  |L130.1188|
                          DCD      ||.conststring||+0x268
                  |L130.1192|
                          DCD      ||.conststring||+0x270
                  |L130.1196|
                          DCD      ||.conststring||+0x27c
                  |L130.1200|
                          DCD      ||.conststring||+0x28c
                  |L130.1204|
                          DCD      send_SOS
                  |L130.1208|
                          DCD      data2
                  |L130.1212|
                          DCD      longi
                  |L130.1216|
                          DCD      lati
                  |L130.1220|
                          DCD      ||.conststring||+0x294
                  |L130.1224|
                          DCD      ||.conststring||+0x308
                  |L130.1228|
                          DCD      ||.conststring||+0x318
                  |L130.1232|
                          DCD      velocity
                  |L130.1236|
                          DCD      ||.conststring||+0x328
                  |L130.1240|
                          DCD      ||.conststring||+0x390
                  |L130.1244|
                          DCD      at_
                  |L130.1248|
                          DCD      interval
                  |L130.1252|
                          DCD      int_erval
                  |L130.1256|
                          DCD      k
                  |L130.1260|
                          DCD      i
                  |L130.1264|
                          DCD      ||.conststring||+0x3a0
                  |L130.1268|
                          DCD      apn
                  |L130.1272|
0004f8  2103              MOVS     r1,#3
0004fa  48fe              LDR      r0,|L130.2292|
0004fc  f7fffffe          BL       parse_g
;;;1504   								saveapn();								
000500  f7fffffe          BL       saveapn
;;;1505   								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000504  48fc              LDR      r0,|L130.2296|
000506  6800              LDR      r0,[r0,#0]  ; tmeout
000508  4bfc              LDR      r3,|L130.2300|
00050a  4afd              LDR      r2,|L130.2304|
00050c  49fd              LDR      r1,|L130.2308|
00050e  9000              STR      r0,[sp,#0]
000510  48fd              LDR      r0,|L130.2312|
000512  f7fffffe          BL       send_GSM
;;;1506   								send_GSM("\nAT+FSCREATE=D:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000516  48f8              LDR      r0,|L130.2296|
000518  6800              LDR      r0,[r0,#0]  ; tmeout
00051a  4bf8              LDR      r3,|L130.2300|
00051c  4af8              LDR      r2,|L130.2304|
00051e  49f9              LDR      r1,|L130.2308|
000520  9000              STR      r0,[sp,#0]
000522  48fa              LDR      r0,|L130.2316|
000524  f7fffffe          BL       send_GSM
;;;1507   								send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000528  48f3              LDR      r0,|L130.2296|
00052a  6800              LDR      r0,[r0,#0]  ; tmeout
00052c  4bf3              LDR      r3,|L130.2300|
00052e  4af4              LDR      r2,|L130.2304|
000530  49f4              LDR      r1,|L130.2308|
000532  9000              STR      r0,[sp,#0]
000534  48f6              LDR      r0,|L130.2320|
000536  f7fffffe          BL       send_GSM
;;;1508   								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00053a  48ef              LDR      r0,|L130.2296|
00053c  6800              LDR      r0,[r0,#0]  ; tmeout
00053e  4bef              LDR      r3,|L130.2300|
000540  4aef              LDR      r2,|L130.2304|
000542  49f0              LDR      r1,|L130.2308|
000544  9000              STR      r0,[sp,#0]
000546  48f3              LDR      r0,|L130.2324|
000548  f7fffffe          BL       send_GSM
;;;1509   								send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00054c  48ea              LDR      r0,|L130.2296|
00054e  6800              LDR      r0,[r0,#0]  ; tmeout
000550  4bea              LDR      r3,|L130.2300|
000552  4aeb              LDR      r2,|L130.2304|
000554  49eb              LDR      r1,|L130.2308|
000556  9000              STR      r0,[sp,#0]
000558  48ef              LDR      r0,|L130.2328|
00055a  f7fffffe          BL       send_GSM
;;;1510   
;;;1511   								memset(ip,0,100);
00055e  2164              MOVS     r1,#0x64
000560  48ee              LDR      r0,|L130.2332|
000562  f7fffffe          BL       __aeabi_memclr
;;;1512   								memset(port,0,10);
000566  210a              MOVS     r1,#0xa
000568  48ed              LDR      r0,|L130.2336|
00056a  f7fffffe          BL       __aeabi_memclr
;;;1513   								strcat (ip, "104.236.203.4");
00056e  49ed              LDR      r1,|L130.2340|
000570  48ea              LDR      r0,|L130.2332|
000572  f7fffffe          BL       strcat
;;;1514   								strcat (port, "5555");		
000576  49ec              LDR      r1,|L130.2344|
000578  48e9              LDR      r0,|L130.2336|
00057a  f7fffffe          BL       strcat
;;;1515   								memcpy (interval, "5", 1);										
00057e  48eb              LDR      r0,|L130.2348|
000580  49eb              LDR      r1,|L130.2352|
000582  7809              LDRB     r1,[r1,#0]
000584  7001              STRB     r1,[r0,#0]
;;;1516   								save_ip_port();
000586  f7fffffe          BL       save_ip_port
;;;1517   								ignstaton();
00058a  f7fffffe          BL       ignstaton
;;;1518   
;;;1519   								save_interval();	
00058e  f7fffffe          BL       save_interval
;;;1520   								int_erval=myAtoi(interval);		
000592  48e6              LDR      r0,|L130.2348|
000594  f7fffffe          BL       myAtoi
000598  49e6              LDR      r1,|L130.2356|
00059a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1521   								savecursord();
00059c  f7fffffe          BL       savecursord
;;;1522   
;;;1523   			//					printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
;;;1524   								
;;;1525   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
0005a0  48d5              LDR      r0,|L130.2296|
0005a2  6800              LDR      r0,[r0,#0]  ; tmeout
0005a4  4bd5              LDR      r3,|L130.2300|
0005a6  4ae4              LDR      r2,|L130.2360|
0005a8  49d6              LDR      r1,|L130.2308|
0005aa  9000              STR      r0,[sp,#0]
0005ac  48e3              LDR      r0,|L130.2364|
0005ae  f7fffffe          BL       send_GSM
;;;1526   
;;;1527   								
;;;1528   								
;;;1529   RESET_OFF;
0005b2  2020              MOVS     r0,#0x20
0005b4  49e2              LDR      r1,|L130.2368|
0005b6  6088              STR      r0,[r1,#8]
;;;1530   	RESET_OFF;
0005b8  6088              STR      r0,[r1,#8]
;;;1531   	delay(100);	
0005ba  2064              MOVS     r0,#0x64
0005bc  f7fffffe          BL       delay
;;;1532   	RESET_ON;
0005c0  2020              MOVS     r0,#0x20
0005c2  49df              LDR      r1,|L130.2368|
0005c4  6048              STR      r0,[r1,#4]
;;;1533   	RESET_ON;	
0005c6  6048              STR      r0,[r1,#4]
;;;1534   	delay(100);
0005c8  2064              MOVS     r0,#0x64
0005ca  f7fffffe          BL       delay
0005ce  e3c4              B        |L130.3418|
                  |L130.1488|
;;;1535   
;;;1536   								
;;;1537   								
;;;1538   							}
;;;1539   	
;;;1540   
;;;1541   							else if( cond1 && cond9)
0005d0  48dc              LDR      r0,|L130.2372|
0005d2  6800              LDR      r0,[r0,#0]  ; cond1
0005d4  2800              CMP      r0,#0
                  |L130.1494|
0005d6  d07c              BEQ      |L130.1746|
0005d8  48db              LDR      r0,|L130.2376|
0005da  6800              LDR      r0,[r0,#0]  ; cond9
0005dc  2800              CMP      r0,#0
0005de  d0fa              BEQ      |L130.1494|
;;;1542   							{
;;;1543   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0005e0  48c5              LDR      r0,|L130.2296|
0005e2  6800              LDR      r0,[r0,#0]  ; tmeout
0005e4  4bc5              LDR      r3,|L130.2300|
0005e6  4ac6              LDR      r2,|L130.2304|
0005e8  49d8              LDR      r1,|L130.2380|
0005ea  9000              STR      r0,[sp,#0]
0005ec  48d8              LDR      r0,|L130.2384|
0005ee  f7fffffe          BL       send_GSM
;;;1544   
;;;1545   strcat(data,"\n");	
0005f2  49d8              LDR      r1,|L130.2388|
0005f4  48d8              LDR      r0,|L130.2392|
0005f6  f7fffffe          BL       strcat
;;;1546   GPS_COLLECT();
0005fa  f7fffffe          BL       GPS_COLLECT
;;;1547   strcat(data,"CH\n");	
0005fe  49d7              LDR      r1,|L130.2396|
000600  48d5              LDR      r0,|L130.2392|
000602  f7fffffe          BL       strcat
;;;1548   
;;;1549   								
;;;1550   
;;;1551   	delay(100);
000606  2064              MOVS     r0,#0x64
000608  f7fffffe          BL       delay
;;;1552   		clear();//memset(uart_string_gsm,0,5000);
00060c  f7fffffe          BL       clear
;;;1553   	
;;;1554   	memset(at_,0,100);
000610  2164              MOVS     r1,#0x64
000612  48d3              LDR      r0,|L130.2400|
000614  f7fffffe          BL       __aeabi_memclr
;;;1555   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000618  48cf              LDR      r0,|L130.2392|
00061a  f7fffffe          BL       strlen
00061e  1c44              ADDS     r4,r0,#1
000620  4623              MOV      r3,r4
000622  4ad0              LDR      r2,|L130.2404|
000624  49d0              LDR      r1,|L130.2408|
000626  48ce              LDR      r0,|L130.2400|
000628  f7fffffe          BL       __2sprintf
;;;1556   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00062c  2005              MOVS     r0,#5
00062e  4bc2              LDR      r3,|L130.2360|
000630  4ab3              LDR      r2,|L130.2304|
000632  49ce              LDR      r1,|L130.2412|
000634  9000              STR      r0,[sp,#0]
000636  48ca              LDR      r0,|L130.2400|
000638  f7fffffe          BL       send_SD
;;;1557   if(strstr(uart_string_gsm,"ERROR")){
00063c  49be              LDR      r1,|L130.2360|
00063e  48ad              LDR      r0,|L130.2292|
000640  f7fffffe          BL       strstr
000644  2800              CMP      r0,#0
000646  d004              BEQ      |L130.1618|
;;;1558   	drive[0]='C';drive[1]=':';
000648  2043              MOVS     r0,#0x43
00064a  49c6              LDR      r1,|L130.2404|
00064c  7008              STRB     r0,[r1,#0]
00064e  203a              MOVS     r0,#0x3a
000650  7048              STRB     r0,[r1,#1]
                  |L130.1618|
;;;1559   }	
;;;1560   clear();	
000652  f7fffffe          BL       clear
;;;1561   									k2=0;									//string array counter for uart 1
000656  2000              MOVS     r0,#0
000658  49c5              LDR      r1,|L130.2416|
00065a  6008              STR      r0,[r1,#0]  ; k2
;;;1562   									tout=0;	
00065c  49c5              LDR      r1,|L130.2420|
00065e  6008              STR      r0,[r1,#0]  ; tout
;;;1563   		for(k=0;k<strlen(data);k++)
000660  49c5              LDR      r1,|L130.2424|
000662  6008              STR      r0,[r1,#0]  ; k
000664  e00b              B        |L130.1662|
                  |L130.1638|
;;;1564   		{
;;;1565   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000666  48bc              LDR      r0,|L130.2392|
000668  4ac3              LDR      r2,|L130.2424|
00066a  6812              LDR      r2,[r2,#0]  ; k
00066c  5c81              LDRB     r1,[r0,r2]
00066e  48c3              LDR      r0,|L130.2428|
000670  f7fffffe          BL       uart_putchar
000674  48c0              LDR      r0,|L130.2424|
000676  6800              LDR      r0,[r0,#0]            ;1563  ; k
000678  1c40              ADDS     r0,r0,#1              ;1563
00067a  49bf              LDR      r1,|L130.2424|
00067c  6008              STR      r0,[r1,#0]            ;1563  ; k
                  |L130.1662|
00067e  48b6              LDR      r0,|L130.2392|
000680  f7fffffe          BL       strlen
000684  49bc              LDR      r1,|L130.2424|
000686  6809              LDR      r1,[r1,#0]            ;1563  ; k
000688  4288              CMP      r0,r1                 ;1563
00068a  d8ec              BHI      |L130.1638|
;;;1566   		}	
;;;1567   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00068c  210a              MOVS     r1,#0xa
00068e  48bb              LDR      r0,|L130.2428|
000690  f7fffffe          BL       uart_putchar
000694  210a              MOVS     r1,#0xa
000696  48b9              LDR      r0,|L130.2428|
000698  f7fffffe          BL       uart_putchar
00069c  210a              MOVS     r1,#0xa
00069e  48b7              LDR      r0,|L130.2428|
0006a0  f7fffffe          BL       uart_putchar
0006a4  210a              MOVS     r1,#0xa
0006a6  48b5              LDR      r0,|L130.2428|
0006a8  f7fffffe          BL       uart_putchar
0006ac  210a              MOVS     r1,#0xa
0006ae  48b3              LDR      r0,|L130.2428|
0006b0  f7fffffe          BL       uart_putchar
0006b4  210a              MOVS     r1,#0xa
0006b6  48b1              LDR      r0,|L130.2428|
0006b8  f7fffffe          BL       uart_putchar
0006bc  210a              MOVS     r1,#0xa
0006be  48af              LDR      r0,|L130.2428|
0006c0  f7fffffe          BL       uart_putchar
0006c4  210a              MOVS     r1,#0xa
0006c6  48ad              LDR      r0,|L130.2428|
0006c8  f7fffffe          BL       uart_putchar
0006cc  210a              MOVS     r1,#0xa
0006ce  48ab              LDR      r0,|L130.2428|
0006d0  e000              B        |L130.1748|
                  |L130.1746|
0006d2  e0f4              B        |L130.2238|
                  |L130.1748|
0006d4  f7fffffe          BL       uart_putchar
0006d8  210a              MOVS     r1,#0xa
0006da  48a8              LDR      r0,|L130.2428|
0006dc  f7fffffe          BL       uart_putchar
0006e0  210a              MOVS     r1,#0xa
0006e2  48a6              LDR      r0,|L130.2428|
0006e4  f7fffffe          BL       uart_putchar
0006e8  210a              MOVS     r1,#0xa
0006ea  48a4              LDR      r0,|L130.2428|
0006ec  f7fffffe          BL       uart_putchar
0006f0  210a              MOVS     r1,#0xa
0006f2  48a2              LDR      r0,|L130.2428|
0006f4  f7fffffe          BL       uart_putchar
0006f8  210a              MOVS     r1,#0xa
0006fa  48a0              LDR      r0,|L130.2428|
0006fc  f7fffffe          BL       uart_putchar
000700  210a              MOVS     r1,#0xa
000702  489e              LDR      r0,|L130.2428|
000704  f7fffffe          BL       uart_putchar
000708  210a              MOVS     r1,#0xa
00070a  489c              LDR      r0,|L130.2428|
00070c  f7fffffe          BL       uart_putchar
000710  210a              MOVS     r1,#0xa
000712  489a              LDR      r0,|L130.2428|
000714  f7fffffe          BL       uart_putchar
000718  210a              MOVS     r1,#0xa
00071a  4898              LDR      r0,|L130.2428|
00071c  f7fffffe          BL       uart_putchar
000720  210a              MOVS     r1,#0xa
000722  4896              LDR      r0,|L130.2428|
000724  f7fffffe          BL       uart_putchar
000728  210a              MOVS     r1,#0xa
00072a  4894              LDR      r0,|L130.2428|
00072c  f7fffffe          BL       uart_putchar
000730  210a              MOVS     r1,#0xa
000732  4892              LDR      r0,|L130.2428|
000734  f7fffffe          BL       uart_putchar
000738  210a              MOVS     r1,#0xa
00073a  4890              LDR      r0,|L130.2428|
00073c  f7fffffe          BL       uart_putchar
000740  210a              MOVS     r1,#0xa
000742  488e              LDR      r0,|L130.2428|
000744  f7fffffe          BL       uart_putchar
000748  210a              MOVS     r1,#0xa
00074a  488c              LDR      r0,|L130.2428|
00074c  f7fffffe          BL       uart_putchar
000750  210a              MOVS     r1,#0xa
000752  488a              LDR      r0,|L130.2428|
000754  f7fffffe          BL       uart_putchar
000758  210a              MOVS     r1,#0xa
00075a  4888              LDR      r0,|L130.2428|
00075c  f7fffffe          BL       uart_putchar
000760  210a              MOVS     r1,#0xa
000762  4886              LDR      r0,|L130.2428|
000764  f7fffffe          BL       uart_putchar
000768  210a              MOVS     r1,#0xa
00076a  4884              LDR      r0,|L130.2428|
00076c  f7fffffe          BL       uart_putchar
000770  210a              MOVS     r1,#0xa
000772  4882              LDR      r0,|L130.2428|
000774  f7fffffe          BL       uart_putchar
000778  210a              MOVS     r1,#0xa
00077a  4880              LDR      r0,|L130.2428|
00077c  f7fffffe          BL       uart_putchar
000780  210a              MOVS     r1,#0xa
000782  487e              LDR      r0,|L130.2428|
000784  f7fffffe          BL       uart_putchar
000788  210a              MOVS     r1,#0xa
00078a  487c              LDR      r0,|L130.2428|
00078c  f7fffffe          BL       uart_putchar
000790  210a              MOVS     r1,#0xa
000792  487a              LDR      r0,|L130.2428|
000794  f7fffffe          BL       uart_putchar
000798  210a              MOVS     r1,#0xa
00079a  4878              LDR      r0,|L130.2428|
00079c  f7fffffe          BL       uart_putchar
0007a0  210a              MOVS     r1,#0xa
0007a2  4876              LDR      r0,|L130.2428|
0007a4  f7fffffe          BL       uart_putchar
0007a8  210a              MOVS     r1,#0xa
0007aa  4874              LDR      r0,|L130.2428|
0007ac  f7fffffe          BL       uart_putchar
0007b0  210a              MOVS     r1,#0xa
0007b2  4872              LDR      r0,|L130.2428|
0007b4  f7fffffe          BL       uart_putchar
0007b8  210a              MOVS     r1,#0xa
0007ba  4870              LDR      r0,|L130.2428|
0007bc  f7fffffe          BL       uart_putchar
0007c0  210a              MOVS     r1,#0xa
0007c2  486e              LDR      r0,|L130.2428|
0007c4  f7fffffe          BL       uart_putchar
0007c8  210a              MOVS     r1,#0xa
0007ca  486c              LDR      r0,|L130.2428|
0007cc  f7fffffe          BL       uart_putchar
0007d0  210a              MOVS     r1,#0xa
0007d2  486a              LDR      r0,|L130.2428|
0007d4  f7fffffe          BL       uart_putchar
0007d8  210a              MOVS     r1,#0xa
0007da  4868              LDR      r0,|L130.2428|
0007dc  f7fffffe          BL       uart_putchar
0007e0  210a              MOVS     r1,#0xa
0007e2  4866              LDR      r0,|L130.2428|
0007e4  f7fffffe          BL       uart_putchar
0007e8  210a              MOVS     r1,#0xa
0007ea  4864              LDR      r0,|L130.2428|
0007ec  f7fffffe          BL       uart_putchar
0007f0  210a              MOVS     r1,#0xa
0007f2  4862              LDR      r0,|L130.2428|
0007f4  f7fffffe          BL       uart_putchar
0007f8  210a              MOVS     r1,#0xa
0007fa  4860              LDR      r0,|L130.2428|
0007fc  f7fffffe          BL       uart_putchar
000800  210a              MOVS     r1,#0xa
000802  485e              LDR      r0,|L130.2428|
000804  f7fffffe          BL       uart_putchar
000808  210a              MOVS     r1,#0xa
00080a  485c              LDR      r0,|L130.2428|
00080c  f7fffffe          BL       uart_putchar
000810  210a              MOVS     r1,#0xa
000812  485a              LDR      r0,|L130.2428|
000814  f7fffffe          BL       uart_putchar
000818  210a              MOVS     r1,#0xa
00081a  4858              LDR      r0,|L130.2428|
00081c  f7fffffe          BL       uart_putchar
000820  210a              MOVS     r1,#0xa
000822  4856              LDR      r0,|L130.2428|
000824  f7fffffe          BL       uart_putchar
000828  210a              MOVS     r1,#0xa
00082a  4854              LDR      r0,|L130.2428|
00082c  f7fffffe          BL       uart_putchar
000830  210a              MOVS     r1,#0xa
000832  4852              LDR      r0,|L130.2428|
000834  f7fffffe          BL       uart_putchar
000838  210a              MOVS     r1,#0xa
00083a  4850              LDR      r0,|L130.2428|
00083c  f7fffffe          BL       uart_putchar
000840  210a              MOVS     r1,#0xa
000842  484e              LDR      r0,|L130.2428|
000844  f7fffffe          BL       uart_putchar
000848  210a              MOVS     r1,#0xa
00084a  484c              LDR      r0,|L130.2428|
00084c  f7fffffe          BL       uart_putchar
000850  210a              MOVS     r1,#0xa
000852  484a              LDR      r0,|L130.2428|
000854  f7fffffe          BL       uart_putchar
;;;1568   									//memset(data,0,1000);
;;;1569   														//timer counts to wait for characters in uart 1 									
;;;1570   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000858  bf00              NOP      
                  |L130.2138|
00085a  493c              LDR      r1,|L130.2380|
00085c  4825              LDR      r0,|L130.2292|
00085e  f7fffffe          BL       strstr
000862  2800              CMP      r0,#0
000864  d109              BNE      |L130.2170|
000866  4934              LDR      r1,|L130.2360|
000868  4822              LDR      r0,|L130.2292|
00086a  f7fffffe          BL       strstr
00086e  2800              CMP      r0,#0
000870  d103              BNE      |L130.2170|
000872  4840              LDR      r0,|L130.2420|
000874  6800              LDR      r0,[r0,#0]  ; tout
000876  2805              CMP      r0,#5
000878  ddef              BLE      |L130.2138|
                  |L130.2170|
;;;1571   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1572   									}
;;;1573   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00087a  f7fffffe          BL       clear
;;;1574   									//clear();
;;;1575   									memset(data,0,strlen(data));
00087e  4836              LDR      r0,|L130.2392|
000880  f7fffffe          BL       strlen
000884  4604              MOV      r4,r0
000886  4621              MOV      r1,r4
000888  4833              LDR      r0,|L130.2392|
00088a  f7fffffe          BL       __aeabi_memclr
;;;1576   									clear();
00088e  f7fffffe          BL       clear
;;;1577   
;;;1578   																
;;;1579   								
;;;1580   								
;;;1581   //log_it();								
;;;1582   		RESET_OFF;delay(10);
000892  2020              MOVS     r0,#0x20
000894  492a              LDR      r1,|L130.2368|
000896  6088              STR      r0,[r1,#8]
000898  200a              MOVS     r0,#0xa
00089a  f7fffffe          BL       delay
;;;1583   		RESET_ON;delay(10);
00089e  2020              MOVS     r0,#0x20
0008a0  4927              LDR      r1,|L130.2368|
0008a2  6048              STR      r0,[r1,#4]
0008a4  200a              MOVS     r0,#0xa
0008a6  f7fffffe          BL       delay
;;;1584   								send_GSM("\n\n AT+CFUN=1,1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);			
0008aa  4813              LDR      r0,|L130.2296|
0008ac  6800              LDR      r0,[r0,#0]  ; tmeout
0008ae  4b13              LDR      r3,|L130.2300|
0008b0  4a13              LDR      r2,|L130.2304|
0008b2  4926              LDR      r1,|L130.2380|
0008b4  9000              STR      r0,[sp,#0]
0008b6  4832              LDR      r0,|L130.2432|
0008b8  f7fffffe          BL       send_GSM
                  |L130.2236|
0008bc  e24d              B        |L130.3418|
                  |L130.2238|
;;;1585   							}
;;;1586   							
;;;1587   							else if(cond12 && cond10)
0008be  4831              LDR      r0,|L130.2436|
0008c0  6800              LDR      r0,[r0,#0]  ; cond12
0008c2  2800              CMP      r0,#0
0008c4  d076              BEQ      |L130.2484|
0008c6  4830              LDR      r0,|L130.2440|
0008c8  6800              LDR      r0,[r0,#0]  ; cond10
0008ca  2800              CMP      r0,#0
0008cc  d072              BEQ      |L130.2484|
;;;1588   							{
;;;1589   						//		printf("\n\n\n\t%s",uart_string_gsm);
;;;1590   								memset(ip,0,16);
0008ce  2110              MOVS     r1,#0x10
0008d0  4812              LDR      r0,|L130.2332|
0008d2  f7fffffe          BL       __aeabi_memclr
;;;1591   								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
0008d6  4811              LDR      r0,|L130.2332|
0008d8  2120              MOVS     r1,#0x20
0008da  460b              MOV      r3,r1
0008dc  2204              MOVS     r2,#4
0008de  9100              STR      r1,[sp,#0]
0008e0  9001              STR      r0,[sp,#4]
0008e2  2103              MOVS     r1,#3
0008e4  4803              LDR      r0,|L130.2292|
0008e6  f7fffffe          BL       parse_g
;;;1592   								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
0008ea  480d              LDR      r0,|L130.2336|
0008ec  210d              MOVS     r1,#0xd
0008ee  e04d              B        |L130.2444|
                  |L130.2288|
0008f0  e245              B        |L130.3454|
0008f2  e05f              B        |L130.2484|
                  |L130.2292|
                          DCD      uart_string_gsm
                  |L130.2296|
                          DCD      tmeout
                  |L130.2300|
                          DCD      ||.conststring||+0x10
                  |L130.2304|
                          DCD      ||.conststring||+0x18
                  |L130.2308|
                          DCD      ||.conststring||+0x2c
                  |L130.2312|
                          DCD      ||.conststring||+0x84
                  |L130.2316|
                          DCD      ||.conststring||+0x3a4
                  |L130.2320|
                          DCD      ||.conststring||+0x3c0
                  |L130.2324|
                          DCD      ||.conststring||+0x134
                  |L130.2328|
                          DCD      ||.conststring||+0x30
                  |L130.2332|
                          DCD      ||ip||
                  |L130.2336|
                          DCD      port
                  |L130.2340|
                          DCD      ||.conststring||+0x3dc
                  |L130.2344|
                          DCD      ||.conststring||+0x3ec
                  |L130.2348|
                          DCD      interval
                  |L130.2352|
                          DCD      ||.conststring||+0x3f4
                  |L130.2356|
                          DCD      int_erval
                  |L130.2360|
                          DCD      ||.conststring||+0xe0
                  |L130.2364|
                          DCD      ||.conststring||+0x3f8
                  |L130.2368|
                          DCD      0x400ff080
                  |L130.2372|
                          DCD      cond1
                  |L130.2376|
                          DCD      cond9
                  |L130.2380|
                          DCD      ||.conststring||+0x70
                  |L130.2384|
                          DCD      ||.conststring||+0x390
                  |L130.2388|
                          DCD      ||.conststring||+0x40c
                  |L130.2392|
                          DCD      data
                  |L130.2396|
                          DCD      ||.conststring||+0x410
                  |L130.2400|
                          DCD      at_
                  |L130.2404|
                          DCD      drive
                  |L130.2408|
                          DCD      ||.conststring||+0x414
                  |L130.2412|
                          DCD      ||.conststring||+0x20
                  |L130.2416|
                          DCD      ||k2||
                  |L130.2420|
                          DCD      tout
                  |L130.2424|
                          DCD      k
                  |L130.2428|
                          DCD      0x4006b000
                  |L130.2432|
                          DCD      ||.conststring||+0x438
                  |L130.2436|
                          DCD      cond12
                  |L130.2440|
                          DCD      cond10
                  |L130.2444|
00098c  2320              MOVS     r3,#0x20
00098e  2205              MOVS     r2,#5
000990  9100              STR      r1,[sp,#0]
000992  9001              STR      r0,[sp,#4]
000994  2106              MOVS     r1,#6
000996  48fa              LDR      r0,|L130.3456|
000998  f7fffffe          BL       parse_g
;;;1593   			//					printf("\n%s\n",port);
;;;1594   								save_ip_port();
00099c  f7fffffe          BL       save_ip_port
;;;1595   							
;;;1596   	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;1597   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009a0  48f8              LDR      r0,|L130.3460|
0009a2  6800              LDR      r0,[r0,#0]  ; tmeout
0009a4  4bf8              LDR      r3,|L130.3464|
0009a6  4af9              LDR      r2,|L130.3468|
0009a8  49f9              LDR      r1,|L130.3472|
0009aa  9000              STR      r0,[sp,#0]
0009ac  48f9              LDR      r0,|L130.3476|
0009ae  f7fffffe          BL       send_GSM
0009b2  e1d2              B        |L130.3418|
                  |L130.2484|
;;;1598   
;;;1599   //								while(1);
;;;1600   								
;;;1601   								
;;;1602   							}
;;;1603   
;;;1604   											
;;;1605   							else if(cond1 && cond13)
0009b4  48f8              LDR      r0,|L130.3480|
0009b6  6800              LDR      r0,[r0,#0]  ; cond1
0009b8  2800              CMP      r0,#0
0009ba  d01a              BEQ      |L130.2546|
0009bc  48f7              LDR      r0,|L130.3484|
0009be  6800              LDR      r0,[r0,#0]  ; cond13
0009c0  2800              CMP      r0,#0
0009c2  d016              BEQ      |L130.2546|
;;;1606   							{
;;;1607   								
;;;1608   								IGNITION_ON;FUEL_ON;
0009c4  2002              MOVS     r0,#2
0009c6  49f6              LDR      r1,|L130.3488|
0009c8  6088              STR      r0,[r1,#8]
0009ca  2004              MOVS     r0,#4
0009cc  6088              STR      r0,[r1,#8]
;;;1609   								clear();
0009ce  f7fffffe          BL       clear
;;;1610   								ignstaton();
0009d2  f7fffffe          BL       ignstaton
;;;1611   								delay(1000);
0009d6  207d              MOVS     r0,#0x7d
0009d8  00c0              LSLS     r0,r0,#3
0009da  f7fffffe          BL       delay
;;;1612   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009de  48e9              LDR      r0,|L130.3460|
0009e0  6800              LDR      r0,[r0,#0]  ; tmeout
0009e2  4be9              LDR      r3,|L130.3464|
0009e4  4ae9              LDR      r2,|L130.3468|
0009e6  49ea              LDR      r1,|L130.3472|
0009e8  9000              STR      r0,[sp,#0]
0009ea  48ee              LDR      r0,|L130.3492|
0009ec  f7fffffe          BL       send_GSM
0009f0  e1b3              B        |L130.3418|
                  |L130.2546|
;;;1613   								
;;;1614   							}
;;;1615   							else if(cond1 && cond14)
0009f2  48e9              LDR      r0,|L130.3480|
0009f4  6800              LDR      r0,[r0,#0]  ; cond1
0009f6  2800              CMP      r0,#0
0009f8  d01a              BEQ      |L130.2608|
0009fa  48eb              LDR      r0,|L130.3496|
0009fc  6800              LDR      r0,[r0,#0]  ; cond14
0009fe  2800              CMP      r0,#0
000a00  d016              BEQ      |L130.2608|
;;;1616   							{
;;;1617   								
;;;1618   								IGNITION_OFF;FUEL_OFF;
000a02  2002              MOVS     r0,#2
000a04  49e6              LDR      r1,|L130.3488|
000a06  6048              STR      r0,[r1,#4]
000a08  2004              MOVS     r0,#4
000a0a  6048              STR      r0,[r1,#4]
;;;1619   								clear();
000a0c  f7fffffe          BL       clear
;;;1620   								ignstatoff();
000a10  f7fffffe          BL       ignstatoff
;;;1621   								delay(1000);
000a14  207d              MOVS     r0,#0x7d
000a16  00c0              LSLS     r0,r0,#3
000a18  f7fffffe          BL       delay
;;;1622   								
;;;1623   								
;;;1624   								
;;;1625   								
;;;1626   								
;;;1627   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a1c  48d9              LDR      r0,|L130.3460|
000a1e  6800              LDR      r0,[r0,#0]  ; tmeout
000a20  4bd9              LDR      r3,|L130.3464|
000a22  4ada              LDR      r2,|L130.3468|
000a24  49da              LDR      r1,|L130.3472|
000a26  9000              STR      r0,[sp,#0]
000a28  48de              LDR      r0,|L130.3492|
000a2a  f7fffffe          BL       send_GSM
000a2e  e194              B        |L130.3418|
                  |L130.2608|
;;;1628   								
;;;1629   							}
;;;1630   							
;;;1631   							else if(cond1 && cond5)
000a30  48d9              LDR      r0,|L130.3480|
000a32  6800              LDR      r0,[r0,#0]  ; cond1
000a34  2800              CMP      r0,#0
000a36  d05d              BEQ      |L130.2804|
000a38  48dc              LDR      r0,|L130.3500|
000a3a  6800              LDR      r0,[r0,#0]  ; cond5
000a3c  2800              CMP      r0,#0
000a3e  d059              BEQ      |L130.2804|
;;;1632   							{
;;;1633   								
;;;1634   
;;;1635   								memset(at_,0,100);
000a40  2164              MOVS     r1,#0x64
000a42  48db              LDR      r0,|L130.3504|
000a44  f7fffffe          BL       __aeabi_memclr
;;;1636   								memset(num_o,0,15);
000a48  210f              MOVS     r1,#0xf
000a4a  48da              LDR      r0,|L130.3508|
000a4c  f7fffffe          BL       __aeabi_memclr
;;;1637   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000a50  48d8              LDR      r0,|L130.3508|
000a52  210d              MOVS     r1,#0xd
000a54  2320              MOVS     r3,#0x20
000a56  2205              MOVS     r2,#5
000a58  9100              STR      r1,[sp,#0]
000a5a  9001              STR      r0,[sp,#4]
000a5c  2103              MOVS     r1,#3
000a5e  48c8              LDR      r0,|L130.3456|
000a60  f7fffffe          BL       parse_g
;;;1638   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a64  48c7              LDR      r0,|L130.3460|
000a66  6800              LDR      r0,[r0,#0]  ; tmeout
000a68  4bc7              LDR      r3,|L130.3464|
000a6a  4ac8              LDR      r2,|L130.3468|
000a6c  49c8              LDR      r1,|L130.3472|
000a6e  9000              STR      r0,[sp,#0]
000a70  48d1              LDR      r0,|L130.3512|
000a72  f7fffffe          BL       send_GSM
;;;1639   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000a76  2004              MOVS     r0,#4
000a78  4bd0              LDR      r3,|L130.3516|
000a7a  4ac4              LDR      r2,|L130.3468|
000a7c  49d0              LDR      r1,|L130.3520|
000a7e  9000              STR      r0,[sp,#0]
000a80  48d0              LDR      r0,|L130.3524|
000a82  f7fffffe          BL       send_GSM
;;;1640   
;;;1641   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000a86  4acb              LDR      r2,|L130.3508|
000a88  49cf              LDR      r1,|L130.3528|
000a8a  48c9              LDR      r0,|L130.3504|
000a8c  f7fffffe          BL       __2sprintf
;;;1642   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a90  48bc              LDR      r0,|L130.3460|
000a92  6800              LDR      r0,[r0,#0]  ; tmeout
000a94  4bbc              LDR      r3,|L130.3464|
000a96  4abd              LDR      r2,|L130.3468|
000a98  49bd              LDR      r1,|L130.3472|
000a9a  9000              STR      r0,[sp,#0]
000a9c  48c4              LDR      r0,|L130.3504|
000a9e  f7fffffe          BL       send_GSM
;;;1643   								
;;;1644   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000aa2  48b8              LDR      r0,|L130.3460|
000aa4  6800              LDR      r0,[r0,#0]  ; tmeout
000aa6  4bb8              LDR      r3,|L130.3464|
000aa8  4ab8              LDR      r2,|L130.3468|
000aaa  49b9              LDR      r1,|L130.3472|
000aac  9000              STR      r0,[sp,#0]
000aae  48c7              LDR      r0,|L130.3532|
000ab0  f7fffffe          BL       send_GSM
;;;1645   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000ab4  2004              MOVS     r0,#4
000ab6  4bc1              LDR      r3,|L130.3516|
000ab8  4ab4              LDR      r2,|L130.3468|
000aba  49c1              LDR      r1,|L130.3520|
000abc  9000              STR      r0,[sp,#0]
000abe  48c1              LDR      r0,|L130.3524|
000ac0  f7fffffe          BL       send_GSM
;;;1646   
;;;1647   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000ac4  4abb              LDR      r2,|L130.3508|
000ac6  49c0              LDR      r1,|L130.3528|
000ac8  48b9              LDR      r0,|L130.3504|
000aca  f7fffffe          BL       __2sprintf
;;;1648   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ace  48ad              LDR      r0,|L130.3460|
000ad0  6800              LDR      r0,[r0,#0]  ; tmeout
000ad2  4bad              LDR      r3,|L130.3464|
000ad4  4aad              LDR      r2,|L130.3468|
000ad6  49ae              LDR      r1,|L130.3472|
000ad8  9000              STR      r0,[sp,#0]
000ada  48b5              LDR      r0,|L130.3504|
000adc  f7fffffe          BL       send_GSM
;;;1649   
;;;1650   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ae0  48a8              LDR      r0,|L130.3460|
000ae2  6800              LDR      r0,[r0,#0]  ; tmeout
000ae4  4ba8              LDR      r3,|L130.3464|
000ae6  4aa9              LDR      r2,|L130.3468|
000ae8  49a9              LDR      r1,|L130.3472|
000aea  9000              STR      r0,[sp,#0]
000aec  48a9              LDR      r0,|L130.3476|
000aee  f7fffffe          BL       send_GSM
000af2  e132              B        |L130.3418|
                  |L130.2804|
;;;1651   															
;;;1652   						
;;;1653   								
;;;1654   							}		
;;;1655   							else if(cond1 && cond6)
000af4  48a8              LDR      r0,|L130.3480|
000af6  6800              LDR      r0,[r0,#0]  ; cond1
000af8  2800              CMP      r0,#0
000afa  d05d              BEQ      |L130.3000|
000afc  48b4              LDR      r0,|L130.3536|
000afe  6800              LDR      r0,[r0,#0]  ; cond6
000b00  2800              CMP      r0,#0
000b02  d059              BEQ      |L130.3000|
;;;1656   							{
;;;1657   
;;;1658   								
;;;1659   								memset(at_,0,100);
000b04  2164              MOVS     r1,#0x64
000b06  48aa              LDR      r0,|L130.3504|
000b08  f7fffffe          BL       __aeabi_memclr
;;;1660   								memset(num_o,0,15);
000b0c  210f              MOVS     r1,#0xf
000b0e  48a9              LDR      r0,|L130.3508|
000b10  f7fffffe          BL       __aeabi_memclr
;;;1661   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000b14  48a7              LDR      r0,|L130.3508|
000b16  210d              MOVS     r1,#0xd
000b18  2320              MOVS     r3,#0x20
000b1a  2205              MOVS     r2,#5
000b1c  9100              STR      r1,[sp,#0]
000b1e  9001              STR      r0,[sp,#4]
000b20  2103              MOVS     r1,#3
000b22  4897              LDR      r0,|L130.3456|
000b24  f7fffffe          BL       parse_g
;;;1662   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b28  4896              LDR      r0,|L130.3460|
000b2a  6800              LDR      r0,[r0,#0]  ; tmeout
000b2c  4b96              LDR      r3,|L130.3464|
000b2e  4a97              LDR      r2,|L130.3468|
000b30  4997              LDR      r1,|L130.3472|
000b32  9000              STR      r0,[sp,#0]
000b34  48a0              LDR      r0,|L130.3512|
000b36  f7fffffe          BL       send_GSM
;;;1663   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b3a  2004              MOVS     r0,#4
000b3c  4b9f              LDR      r3,|L130.3516|
000b3e  4a93              LDR      r2,|L130.3468|
000b40  499f              LDR      r1,|L130.3520|
000b42  9000              STR      r0,[sp,#0]
000b44  48a3              LDR      r0,|L130.3540|
000b46  f7fffffe          BL       send_GSM
;;;1664   
;;;1665   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b4a  4a9a              LDR      r2,|L130.3508|
000b4c  49a2              LDR      r1,|L130.3544|
000b4e  4898              LDR      r0,|L130.3504|
000b50  f7fffffe          BL       __2sprintf
;;;1666   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b54  488b              LDR      r0,|L130.3460|
000b56  6800              LDR      r0,[r0,#0]  ; tmeout
000b58  4b8b              LDR      r3,|L130.3464|
000b5a  4a8c              LDR      r2,|L130.3468|
000b5c  498c              LDR      r1,|L130.3472|
000b5e  9000              STR      r0,[sp,#0]
000b60  4893              LDR      r0,|L130.3504|
000b62  f7fffffe          BL       send_GSM
;;;1667   								
;;;1668   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b66  4887              LDR      r0,|L130.3460|
000b68  6800              LDR      r0,[r0,#0]  ; tmeout
000b6a  4b87              LDR      r3,|L130.3464|
000b6c  4a87              LDR      r2,|L130.3468|
000b6e  4988              LDR      r1,|L130.3472|
000b70  9000              STR      r0,[sp,#0]
000b72  4896              LDR      r0,|L130.3532|
000b74  f7fffffe          BL       send_GSM
;;;1669   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b78  2004              MOVS     r0,#4
000b7a  4b90              LDR      r3,|L130.3516|
000b7c  4a83              LDR      r2,|L130.3468|
000b7e  4990              LDR      r1,|L130.3520|
000b80  9000              STR      r0,[sp,#0]
000b82  4894              LDR      r0,|L130.3540|
000b84  f7fffffe          BL       send_GSM
;;;1670   
;;;1671   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b88  4a8a              LDR      r2,|L130.3508|
000b8a  4993              LDR      r1,|L130.3544|
000b8c  4888              LDR      r0,|L130.3504|
000b8e  f7fffffe          BL       __2sprintf
;;;1672   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);								
000b92  487c              LDR      r0,|L130.3460|
000b94  6800              LDR      r0,[r0,#0]  ; tmeout
000b96  4b7c              LDR      r3,|L130.3464|
000b98  4a7c              LDR      r2,|L130.3468|
000b9a  497d              LDR      r1,|L130.3472|
000b9c  9000              STR      r0,[sp,#0]
000b9e  4884              LDR      r0,|L130.3504|
000ba0  f7fffffe          BL       send_GSM
;;;1673   
;;;1674   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ba4  4877              LDR      r0,|L130.3460|
000ba6  6800              LDR      r0,[r0,#0]  ; tmeout
000ba8  4b77              LDR      r3,|L130.3464|
000baa  4a78              LDR      r2,|L130.3468|
000bac  4978              LDR      r1,|L130.3472|
000bae  9000              STR      r0,[sp,#0]
000bb0  4878              LDR      r0,|L130.3476|
000bb2  f7fffffe          BL       send_GSM
000bb6  e0d0              B        |L130.3418|
                  |L130.3000|
;;;1675   							}									
;;;1676   							else if(cond1 && cond7)
000bb8  4877              LDR      r0,|L130.3480|
000bba  6800              LDR      r0,[r0,#0]  ; cond1
000bbc  2800              CMP      r0,#0
000bbe  d05d              BEQ      |L130.3196|
000bc0  4886              LDR      r0,|L130.3548|
000bc2  6800              LDR      r0,[r0,#0]  ; cond7
000bc4  2800              CMP      r0,#0
000bc6  d059              BEQ      |L130.3196|
;;;1677   							{
;;;1678   								
;;;1679   								memset(at_,0,100);
000bc8  2164              MOVS     r1,#0x64
000bca  4879              LDR      r0,|L130.3504|
000bcc  f7fffffe          BL       __aeabi_memclr
;;;1680   								memset(num_o,0,15);
000bd0  210f              MOVS     r1,#0xf
000bd2  4878              LDR      r0,|L130.3508|
000bd4  f7fffffe          BL       __aeabi_memclr
;;;1681   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000bd8  4876              LDR      r0,|L130.3508|
000bda  210d              MOVS     r1,#0xd
000bdc  2320              MOVS     r3,#0x20
000bde  2205              MOVS     r2,#5
000be0  9100              STR      r1,[sp,#0]
000be2  9001              STR      r0,[sp,#4]
000be4  2103              MOVS     r1,#3
000be6  4866              LDR      r0,|L130.3456|
000be8  f7fffffe          BL       parse_g
;;;1682   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000bec  4865              LDR      r0,|L130.3460|
000bee  6800              LDR      r0,[r0,#0]  ; tmeout
000bf0  4b65              LDR      r3,|L130.3464|
000bf2  4a66              LDR      r2,|L130.3468|
000bf4  4966              LDR      r1,|L130.3472|
000bf6  9000              STR      r0,[sp,#0]
000bf8  486f              LDR      r0,|L130.3512|
000bfa  f7fffffe          BL       send_GSM
;;;1683   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000bfe  2004              MOVS     r0,#4
000c00  4b6e              LDR      r3,|L130.3516|
000c02  4a62              LDR      r2,|L130.3468|
000c04  496e              LDR      r1,|L130.3520|
000c06  9000              STR      r0,[sp,#0]
000c08  4875              LDR      r0,|L130.3552|
000c0a  f7fffffe          BL       send_GSM
;;;1684   
;;;1685   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c0e  4a69              LDR      r2,|L130.3508|
000c10  4974              LDR      r1,|L130.3556|
000c12  4867              LDR      r0,|L130.3504|
000c14  f7fffffe          BL       __2sprintf
;;;1686   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c18  485a              LDR      r0,|L130.3460|
000c1a  6800              LDR      r0,[r0,#0]  ; tmeout
000c1c  4b5a              LDR      r3,|L130.3464|
000c1e  4a5b              LDR      r2,|L130.3468|
000c20  495b              LDR      r1,|L130.3472|
000c22  9000              STR      r0,[sp,#0]
000c24  4862              LDR      r0,|L130.3504|
000c26  f7fffffe          BL       send_GSM
;;;1687   								
;;;1688   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c2a  4856              LDR      r0,|L130.3460|
000c2c  6800              LDR      r0,[r0,#0]  ; tmeout
000c2e  4b56              LDR      r3,|L130.3464|
000c30  4a56              LDR      r2,|L130.3468|
000c32  4957              LDR      r1,|L130.3472|
000c34  9000              STR      r0,[sp,#0]
000c36  4865              LDR      r0,|L130.3532|
000c38  f7fffffe          BL       send_GSM
;;;1689   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000c3c  2004              MOVS     r0,#4
000c3e  4b5f              LDR      r3,|L130.3516|
000c40  4a52              LDR      r2,|L130.3468|
000c42  495f              LDR      r1,|L130.3520|
000c44  9000              STR      r0,[sp,#0]
000c46  4866              LDR      r0,|L130.3552|
000c48  f7fffffe          BL       send_GSM
;;;1690   
;;;1691   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c4c  4a59              LDR      r2,|L130.3508|
000c4e  4965              LDR      r1,|L130.3556|
000c50  4857              LDR      r0,|L130.3504|
000c52  f7fffffe          BL       __2sprintf
;;;1692   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c56  484b              LDR      r0,|L130.3460|
000c58  6800              LDR      r0,[r0,#0]  ; tmeout
000c5a  4b4b              LDR      r3,|L130.3464|
000c5c  4a4b              LDR      r2,|L130.3468|
000c5e  494c              LDR      r1,|L130.3472|
000c60  9000              STR      r0,[sp,#0]
000c62  4853              LDR      r0,|L130.3504|
000c64  f7fffffe          BL       send_GSM
;;;1693   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000c68  4846              LDR      r0,|L130.3460|
000c6a  6800              LDR      r0,[r0,#0]  ; tmeout
000c6c  4b46              LDR      r3,|L130.3464|
000c6e  4a47              LDR      r2,|L130.3468|
000c70  4947              LDR      r1,|L130.3472|
000c72  9000              STR      r0,[sp,#0]
000c74  4847              LDR      r0,|L130.3476|
000c76  f7fffffe          BL       send_GSM
000c7a  e06e              B        |L130.3418|
                  |L130.3196|
;;;1694   							}			
;;;1695   							else if(cond11)
000c7c  485a              LDR      r0,|L130.3560|
000c7e  6800              LDR      r0,[r0,#0]  ; cond11
000c80  2800              CMP      r0,#0
000c82  d059              BEQ      |L130.3384|
;;;1696   							{
;;;1697   
;;;1698   								memset(at_,0,100);
000c84  2164              MOVS     r1,#0x64
000c86  484a              LDR      r0,|L130.3504|
000c88  f7fffffe          BL       __aeabi_memclr
;;;1699   								memset(num_o,0,15);
000c8c  210f              MOVS     r1,#0xf
000c8e  4849              LDR      r0,|L130.3508|
000c90  f7fffffe          BL       __aeabi_memclr
;;;1700   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000c94  4847              LDR      r0,|L130.3508|
000c96  210d              MOVS     r1,#0xd
000c98  2320              MOVS     r3,#0x20
000c9a  2205              MOVS     r2,#5
000c9c  9100              STR      r1,[sp,#0]
000c9e  9001              STR      r0,[sp,#4]
000ca0  2103              MOVS     r1,#3
000ca2  4837              LDR      r0,|L130.3456|
000ca4  f7fffffe          BL       parse_g
;;;1701   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ca8  4836              LDR      r0,|L130.3460|
000caa  6800              LDR      r0,[r0,#0]  ; tmeout
000cac  4b36              LDR      r3,|L130.3464|
000cae  4a37              LDR      r2,|L130.3468|
000cb0  4937              LDR      r1,|L130.3472|
000cb2  9000              STR      r0,[sp,#0]
000cb4  4840              LDR      r0,|L130.3512|
000cb6  f7fffffe          BL       send_GSM
;;;1702   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cba  2004              MOVS     r0,#4
000cbc  4b3f              LDR      r3,|L130.3516|
000cbe  4a33              LDR      r2,|L130.3468|
000cc0  493f              LDR      r1,|L130.3520|
000cc2  9000              STR      r0,[sp,#0]
000cc4  4849              LDR      r0,|L130.3564|
000cc6  f7fffffe          BL       send_GSM
;;;1703   
;;;1704   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000cca  4a3a              LDR      r2,|L130.3508|
000ccc  4948              LDR      r1,|L130.3568|
000cce  4838              LDR      r0,|L130.3504|
000cd0  f7fffffe          BL       __2sprintf
;;;1705   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000cd4  482b              LDR      r0,|L130.3460|
000cd6  6800              LDR      r0,[r0,#0]  ; tmeout
000cd8  4b2b              LDR      r3,|L130.3464|
000cda  4a2c              LDR      r2,|L130.3468|
000cdc  492c              LDR      r1,|L130.3472|
000cde  9000              STR      r0,[sp,#0]
000ce0  4833              LDR      r0,|L130.3504|
000ce2  f7fffffe          BL       send_GSM
;;;1706   								
;;;1707   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ce6  4827              LDR      r0,|L130.3460|
000ce8  6800              LDR      r0,[r0,#0]  ; tmeout
000cea  4b27              LDR      r3,|L130.3464|
000cec  4a27              LDR      r2,|L130.3468|
000cee  4928              LDR      r1,|L130.3472|
000cf0  9000              STR      r0,[sp,#0]
000cf2  4836              LDR      r0,|L130.3532|
000cf4  f7fffffe          BL       send_GSM
;;;1708   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cf8  2004              MOVS     r0,#4
000cfa  4b30              LDR      r3,|L130.3516|
000cfc  4a23              LDR      r2,|L130.3468|
000cfe  4930              LDR      r1,|L130.3520|
000d00  9000              STR      r0,[sp,#0]
000d02  483a              LDR      r0,|L130.3564|
000d04  f7fffffe          BL       send_GSM
;;;1709   
;;;1710   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000d08  4a2a              LDR      r2,|L130.3508|
000d0a  4939              LDR      r1,|L130.3568|
000d0c  4828              LDR      r0,|L130.3504|
000d0e  f7fffffe          BL       __2sprintf
;;;1711   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d12  481c              LDR      r0,|L130.3460|
000d14  6800              LDR      r0,[r0,#0]  ; tmeout
000d16  4b1c              LDR      r3,|L130.3464|
000d18  4a1c              LDR      r2,|L130.3468|
000d1a  491d              LDR      r1,|L130.3472|
000d1c  9000              STR      r0,[sp,#0]
000d1e  4824              LDR      r0,|L130.3504|
000d20  f7fffffe          BL       send_GSM
;;;1712   								
;;;1713   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000d24  4817              LDR      r0,|L130.3460|
000d26  6800              LDR      r0,[r0,#0]  ; tmeout
000d28  4b17              LDR      r3,|L130.3464|
000d2a  4a18              LDR      r2,|L130.3468|
000d2c  4918              LDR      r1,|L130.3472|
000d2e  9000              STR      r0,[sp,#0]
000d30  4818              LDR      r0,|L130.3476|
000d32  f7fffffe          BL       send_GSM
000d36  e010              B        |L130.3418|
                  |L130.3384|
;;;1714   								
;;;1715   							}	
;;;1716   							else if(cond15)
000d38  482e              LDR      r0,|L130.3572|
000d3a  6800              LDR      r0,[r0,#0]  ; cond15
000d3c  2800              CMP      r0,#0
000d3e  d003              BEQ      |L130.3400|
;;;1717   							{
;;;1718   								send_message(ignstr);
000d40  482d              LDR      r0,|L130.3576|
000d42  f7fffffe          BL       send_message
000d46  e008              B        |L130.3418|
                  |L130.3400|
;;;1719   								
;;;1720   							}							
;;;1721   
;;;1722   							else
;;;1723   							{							
;;;1724   								send_GSM("\r\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000d48  480e              LDR      r0,|L130.3460|
000d4a  6800              LDR      r0,[r0,#0]  ; tmeout
000d4c  4b0e              LDR      r3,|L130.3464|
000d4e  4a0f              LDR      r2,|L130.3468|
000d50  490f              LDR      r1,|L130.3472|
000d52  9000              STR      r0,[sp,#0]
000d54  4829              LDR      r0,|L130.3580|
000d56  f7fffffe          BL       send_GSM
                  |L130.3418|
;;;1725   							}
;;;1726   
;;;1727   
;;;1728   		ringflag=0;
000d5a  2000              MOVS     r0,#0
000d5c  4928              LDR      r1,|L130.3584|
000d5e  7008              STRB     r0,[r1,#0]
;;;1729   clear();							
000d60  f7fffffe          BL       clear
;;;1730   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000d64  4807              LDR      r0,|L130.3460|
000d66  6800              LDR      r0,[r0,#0]  ; tmeout
000d68  4b07              LDR      r3,|L130.3464|
000d6a  4a14              LDR      r2,|L130.3516|
000d6c  4914              LDR      r1,|L130.3520|
000d6e  9000              STR      r0,[sp,#0]
000d70  4824              LDR      r0,|L130.3588|
000d72  f7fffffe          BL       send_GSM
;;;1731   delay(1000);					
000d76  207d              MOVS     r0,#0x7d
000d78  00c0              LSLS     r0,r0,#3
000d7a  f7fffffe          BL       delay
                  |L130.3454|
;;;1732   		}
;;;1733   		
;;;1734   }
000d7e  bd1f              POP      {r0-r4,pc}
                  |L130.3456|
                          DCD      uart_string_gsm
                  |L130.3460|
                          DCD      tmeout
                  |L130.3464|
                          DCD      ||.conststring||+0x10
                  |L130.3468|
                          DCD      ||.conststring||+0x18
                  |L130.3472|
                          DCD      ||.conststring||+0x70
                  |L130.3476|
                          DCD      ||.conststring||+0x390
                  |L130.3480|
                          DCD      cond1
                  |L130.3484|
                          DCD      cond13
                  |L130.3488|
                          DCD      0x400ff000
                  |L130.3492|
                          DCD      ||.conststring||+0x44c
                  |L130.3496|
                          DCD      cond14
                  |L130.3500|
                          DCD      cond5
                  |L130.3504|
                          DCD      at_
                  |L130.3508|
                          DCD      num_o
                  |L130.3512|
                          DCD      ||.conststring||+0x464
                  |L130.3516|
                          DCD      ||.conststring||+0xe0
                  |L130.3520|
                          DCD      ||.conststring||+0x2c
                  |L130.3524|
                          DCD      ||.conststring||+0x478
                  |L130.3528|
                          DCD      ||.conststring||+0x488
                  |L130.3532|
                          DCD      ||.conststring||+0x4a8
                  |L130.3536|
                          DCD      cond6
                  |L130.3540|
                          DCD      ||.conststring||+0x4bc
                  |L130.3544|
                          DCD      ||.conststring||+0x4cc
                  |L130.3548|
                          DCD      cond7
                  |L130.3552|
                          DCD      ||.conststring||+0x4ec
                  |L130.3556|
                          DCD      ||.conststring||+0x4fc
                  |L130.3560|
                          DCD      cond11
                  |L130.3564|
                          DCD      ||.conststring||+0x51c
                  |L130.3568|
                          DCD      ||.conststring||+0x52c
                  |L130.3572|
                          DCD      cond15
                  |L130.3576|
                          DCD      ignstr
                  |L130.3580|
                          DCD      ||.conststring||+0x54c
                  |L130.3584|
                          DCD      ringflag
                  |L130.3588|
                          DCD      ||.conststring||+0x3f8
                          ENDP


                          AREA ||i.savecursor||, COMGROUP=savecursor, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursor PROC
;;;1326   
;;;1327   	__inline void savecursor(){
000000  b508              PUSH     {r3,lr}
;;;1328   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4816              LDR      r0,|L137.92|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b16              LDR      r3,|L137.96|
000008  4a16              LDR      r2,|L137.100|
00000a  4917              LDR      r1,|L137.104|
00000c  9000              STR      r0,[sp,#0]
00000e  4817              LDR      r0,|L137.108|
000010  f7fffffe          BL       send_GSM
;;;1329   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b12              LDR      r3,|L137.96|
000018  4a12              LDR      r2,|L137.100|
00001a  4915              LDR      r1,|L137.112|
00001c  9000              STR      r0,[sp,#0]
00001e  4815              LDR      r0,|L137.116|
000020  f7fffffe          BL       send_GSM
;;;1330   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1331   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4812              LDR      r0,|L137.120|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1332   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",times,k5,cursorvaluepr);		
000032  4812              LDR      r0,|L137.124|
000034  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
000036  9000              STR      r0,[sp,#0]
000038  4811              LDR      r0,|L137.128|
00003a  6803              LDR      r3,[r0,#0]  ; k5
00003c  4811              LDR      r0,|L137.132|
00003e  4912              LDR      r1,|L137.136|
000040  6802              LDR      r2,[r0,#0]  ; times
000042  480d              LDR      r0,|L137.120|
000044  f7fffffe          BL       __2sprintf
;;;1333   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000048  200a              MOVS     r0,#0xa
00004a  4b05              LDR      r3,|L137.96|
00004c  4a05              LDR      r2,|L137.100|
00004e  4906              LDR      r1,|L137.104|
000050  9000              STR      r0,[sp,#0]
000052  4809              LDR      r0,|L137.120|
000054  f7fffffe          BL       send_GSM
;;;1334   }	
000058  bd08              POP      {r3,pc}
;;;1335   	__inline void savecursord(){
                          ENDP

00005a  0000              DCW      0x0000
                  |L137.92|
                          DCD      tmeout
                  |L137.96|
                          DCD      ||.conststring||+0x10
                  |L137.100|
                          DCD      ||.conststring||+0x18
                  |L137.104|
                          DCD      ||.conststring||+0x2c
                  |L137.108|
                          DCD      ||.conststring||+0x560
                  |L137.112|
                          DCD      ||.conststring||+0x20
                  |L137.116|
                          DCD      ||.conststring||+0x580
                  |L137.120|
                          DCD      at_
                  |L137.124|
                          DCD      cursorvaluepr
                  |L137.128|
                          DCD      ||k5||
                  |L137.132|
                          DCD      times
                  |L137.136|
                          DCD      ||.conststring||+0x5a8

                          AREA ||i.reset_func||, COMGROUP=reset_func, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  reset_func PROC
;;;2394   
;;;2395   __inline void reset_func()
000000  b538              PUSH     {r3-r5,lr}
;;;2396   {
;;;2397   		savecursor();
000002  f7fffffe          BL       savecursor
;;;2398   	
;;;2399   				memset(at_,0,100);
000006  2164              MOVS     r1,#0x64
000008  48a0              LDR      r0,|L144.652|
00000a  f7fffffe          BL       __aeabi_memclr
;;;2400   				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00000e  48a0              LDR      r0,|L144.656|
000010  f7fffffe          BL       strlen
000014  1c44              ADDS     r4,r0,#1
000016  4623              MOV      r3,r4
000018  4a9e              LDR      r2,|L144.660|
00001a  499f              LDR      r1,|L144.664|
00001c  489b              LDR      r0,|L144.652|
00001e  f7fffffe          BL       __2sprintf
;;;2401   				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000022  2005              MOVS     r0,#5
000024  4b9d              LDR      r3,|L144.668|
000026  4a9e              LDR      r2,|L144.672|
000028  499e              LDR      r1,|L144.676|
00002a  9000              STR      r0,[sp,#0]
00002c  4897              LDR      r0,|L144.652|
00002e  f7fffffe          BL       send_SD
;;;2402   if(strstr(uart_string_gsm,"ERROR")){
000032  499a              LDR      r1,|L144.668|
000034  489c              LDR      r0,|L144.680|
000036  f7fffffe          BL       strstr
00003a  2800              CMP      r0,#0
00003c  d004              BEQ      |L144.72|
;;;2403   	drive[0]='C';drive[1]=':';
00003e  2043              MOVS     r0,#0x43
000040  4994              LDR      r1,|L144.660|
000042  7008              STRB     r0,[r1,#0]
000044  203a              MOVS     r0,#0x3a
000046  7048              STRB     r0,[r1,#1]
                  |L144.72|
;;;2404   }	
;;;2405   				//clear();	
;;;2406   				k2=0;									//string array counter for uart 1
000048  2000              MOVS     r0,#0
00004a  4998              LDR      r1,|L144.684|
00004c  6008              STR      r0,[r1,#0]  ; k2
;;;2407   				tout=0;	
00004e  4998              LDR      r1,|L144.688|
000050  6008              STR      r0,[r1,#0]  ; tout
;;;2408   				for(k=0;k<strlen(data);k++)
000052  4998              LDR      r1,|L144.692|
000054  6008              STR      r0,[r1,#0]  ; k
000056  e00b              B        |L144.112|
                  |L144.88|
;;;2409   				{
;;;2410   					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000058  488d              LDR      r0,|L144.656|
00005a  4a96              LDR      r2,|L144.692|
00005c  6812              LDR      r2,[r2,#0]  ; k
00005e  5c81              LDRB     r1,[r0,r2]
000060  4895              LDR      r0,|L144.696|
000062  f7fffffe          BL       uart_putchar
000066  4893              LDR      r0,|L144.692|
000068  6800              LDR      r0,[r0,#0]            ;2408  ; k
00006a  1c40              ADDS     r0,r0,#1              ;2408
00006c  4991              LDR      r1,|L144.692|
00006e  6008              STR      r0,[r1,#0]            ;2408  ; k
                  |L144.112|
000070  4887              LDR      r0,|L144.656|
000072  f7fffffe          BL       strlen
000076  498f              LDR      r1,|L144.692|
000078  6809              LDR      r1,[r1,#0]            ;2408  ; k
00007a  4288              CMP      r0,r1                 ;2408
00007c  d8ec              BHI      |L144.88|
;;;2411   				}	
;;;2412   				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00007e  210a              MOVS     r1,#0xa
000080  488d              LDR      r0,|L144.696|
000082  f7fffffe          BL       uart_putchar
000086  210a              MOVS     r1,#0xa
000088  488b              LDR      r0,|L144.696|
00008a  f7fffffe          BL       uart_putchar
00008e  210a              MOVS     r1,#0xa
000090  4889              LDR      r0,|L144.696|
000092  f7fffffe          BL       uart_putchar
000096  210a              MOVS     r1,#0xa
000098  4887              LDR      r0,|L144.696|
00009a  f7fffffe          BL       uart_putchar
00009e  210a              MOVS     r1,#0xa
0000a0  4885              LDR      r0,|L144.696|
0000a2  f7fffffe          BL       uart_putchar
0000a6  210a              MOVS     r1,#0xa
0000a8  4883              LDR      r0,|L144.696|
0000aa  f7fffffe          BL       uart_putchar
0000ae  210a              MOVS     r1,#0xa
0000b0  4881              LDR      r0,|L144.696|
0000b2  f7fffffe          BL       uart_putchar
0000b6  210a              MOVS     r1,#0xa
0000b8  487f              LDR      r0,|L144.696|
0000ba  f7fffffe          BL       uart_putchar
0000be  210a              MOVS     r1,#0xa
0000c0  487d              LDR      r0,|L144.696|
0000c2  f7fffffe          BL       uart_putchar
0000c6  210a              MOVS     r1,#0xa
0000c8  487b              LDR      r0,|L144.696|
0000ca  f7fffffe          BL       uart_putchar
0000ce  210a              MOVS     r1,#0xa
0000d0  4879              LDR      r0,|L144.696|
0000d2  f7fffffe          BL       uart_putchar
0000d6  210a              MOVS     r1,#0xa
0000d8  4877              LDR      r0,|L144.696|
0000da  f7fffffe          BL       uart_putchar
0000de  210a              MOVS     r1,#0xa
0000e0  4875              LDR      r0,|L144.696|
0000e2  f7fffffe          BL       uart_putchar
0000e6  210a              MOVS     r1,#0xa
0000e8  4873              LDR      r0,|L144.696|
0000ea  f7fffffe          BL       uart_putchar
0000ee  210a              MOVS     r1,#0xa
0000f0  4871              LDR      r0,|L144.696|
0000f2  f7fffffe          BL       uart_putchar
0000f6  210a              MOVS     r1,#0xa
0000f8  486f              LDR      r0,|L144.696|
0000fa  f7fffffe          BL       uart_putchar
0000fe  210a              MOVS     r1,#0xa
000100  486d              LDR      r0,|L144.696|
000102  f7fffffe          BL       uart_putchar
000106  210a              MOVS     r1,#0xa
000108  486b              LDR      r0,|L144.696|
00010a  f7fffffe          BL       uart_putchar
00010e  210a              MOVS     r1,#0xa
000110  4869              LDR      r0,|L144.696|
000112  f7fffffe          BL       uart_putchar
000116  210a              MOVS     r1,#0xa
000118  4867              LDR      r0,|L144.696|
00011a  f7fffffe          BL       uart_putchar
00011e  210a              MOVS     r1,#0xa
000120  4865              LDR      r0,|L144.696|
000122  f7fffffe          BL       uart_putchar
000126  210a              MOVS     r1,#0xa
000128  4863              LDR      r0,|L144.696|
00012a  f7fffffe          BL       uart_putchar
00012e  210a              MOVS     r1,#0xa
000130  4861              LDR      r0,|L144.696|
000132  f7fffffe          BL       uart_putchar
000136  210a              MOVS     r1,#0xa
000138  485f              LDR      r0,|L144.696|
00013a  f7fffffe          BL       uart_putchar
00013e  210a              MOVS     r1,#0xa
000140  485d              LDR      r0,|L144.696|
000142  f7fffffe          BL       uart_putchar
000146  210a              MOVS     r1,#0xa
000148  485b              LDR      r0,|L144.696|
00014a  f7fffffe          BL       uart_putchar
00014e  210a              MOVS     r1,#0xa
000150  4859              LDR      r0,|L144.696|
000152  f7fffffe          BL       uart_putchar
000156  210a              MOVS     r1,#0xa
000158  4857              LDR      r0,|L144.696|
00015a  f7fffffe          BL       uart_putchar
00015e  210a              MOVS     r1,#0xa
000160  4855              LDR      r0,|L144.696|
000162  f7fffffe          BL       uart_putchar
000166  210a              MOVS     r1,#0xa
000168  4853              LDR      r0,|L144.696|
00016a  f7fffffe          BL       uart_putchar
00016e  210a              MOVS     r1,#0xa
000170  4851              LDR      r0,|L144.696|
000172  f7fffffe          BL       uart_putchar
000176  210a              MOVS     r1,#0xa
000178  484f              LDR      r0,|L144.696|
00017a  f7fffffe          BL       uart_putchar
00017e  210a              MOVS     r1,#0xa
000180  484d              LDR      r0,|L144.696|
000182  f7fffffe          BL       uart_putchar
000186  210a              MOVS     r1,#0xa
000188  484b              LDR      r0,|L144.696|
00018a  f7fffffe          BL       uart_putchar
00018e  210a              MOVS     r1,#0xa
000190  4849              LDR      r0,|L144.696|
000192  f7fffffe          BL       uart_putchar
000196  210a              MOVS     r1,#0xa
000198  4847              LDR      r0,|L144.696|
00019a  f7fffffe          BL       uart_putchar
00019e  210a              MOVS     r1,#0xa
0001a0  4845              LDR      r0,|L144.696|
0001a2  f7fffffe          BL       uart_putchar
0001a6  210a              MOVS     r1,#0xa
0001a8  4843              LDR      r0,|L144.696|
0001aa  f7fffffe          BL       uart_putchar
0001ae  210a              MOVS     r1,#0xa
0001b0  4841              LDR      r0,|L144.696|
0001b2  f7fffffe          BL       uart_putchar
0001b6  210a              MOVS     r1,#0xa
0001b8  483f              LDR      r0,|L144.696|
0001ba  f7fffffe          BL       uart_putchar
0001be  210a              MOVS     r1,#0xa
0001c0  483d              LDR      r0,|L144.696|
0001c2  f7fffffe          BL       uart_putchar
0001c6  210a              MOVS     r1,#0xa
0001c8  483b              LDR      r0,|L144.696|
0001ca  f7fffffe          BL       uart_putchar
0001ce  210a              MOVS     r1,#0xa
0001d0  4839              LDR      r0,|L144.696|
0001d2  f7fffffe          BL       uart_putchar
0001d6  210a              MOVS     r1,#0xa
0001d8  4837              LDR      r0,|L144.696|
0001da  f7fffffe          BL       uart_putchar
0001de  210a              MOVS     r1,#0xa
0001e0  4835              LDR      r0,|L144.696|
0001e2  f7fffffe          BL       uart_putchar
0001e6  210a              MOVS     r1,#0xa
0001e8  4833              LDR      r0,|L144.696|
0001ea  f7fffffe          BL       uart_putchar
0001ee  210a              MOVS     r1,#0xa
0001f0  4831              LDR      r0,|L144.696|
0001f2  f7fffffe          BL       uart_putchar
0001f6  210a              MOVS     r1,#0xa
0001f8  482f              LDR      r0,|L144.696|
0001fa  f7fffffe          BL       uart_putchar
0001fe  210a              MOVS     r1,#0xa
000200  482d              LDR      r0,|L144.696|
000202  f7fffffe          BL       uart_putchar
000206  210a              MOVS     r1,#0xa
000208  482b              LDR      r0,|L144.696|
00020a  f7fffffe          BL       uart_putchar
00020e  210a              MOVS     r1,#0xa
000210  4829              LDR      r0,|L144.696|
000212  f7fffffe          BL       uart_putchar
000216  210a              MOVS     r1,#0xa
000218  4827              LDR      r0,|L144.696|
00021a  f7fffffe          BL       uart_putchar
00021e  210a              MOVS     r1,#0xa
000220  4825              LDR      r0,|L144.696|
000222  f7fffffe          BL       uart_putchar
000226  210a              MOVS     r1,#0xa
000228  4823              LDR      r0,|L144.696|
00022a  f7fffffe          BL       uart_putchar
00022e  210a              MOVS     r1,#0xa
000230  4821              LDR      r0,|L144.696|
000232  f7fffffe          BL       uart_putchar
000236  210a              MOVS     r1,#0xa
000238  481f              LDR      r0,|L144.696|
00023a  f7fffffe          BL       uart_putchar
00023e  210a              MOVS     r1,#0xa
000240  481d              LDR      r0,|L144.696|
000242  f7fffffe          BL       uart_putchar
;;;2413   				//memset(data,0,1000);
;;;2414   				//timer counts to wait for characters in uart 1 									
;;;2415   				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000246  bf00              NOP      
                  |L144.584|
000248  491c              LDR      r1,|L144.700|
00024a  4817              LDR      r0,|L144.680|
00024c  f7fffffe          BL       strstr
000250  2800              CMP      r0,#0
000252  d109              BNE      |L144.616|
000254  4911              LDR      r1,|L144.668|
000256  4814              LDR      r0,|L144.680|
000258  f7fffffe          BL       strstr
00025c  2800              CMP      r0,#0
00025e  d103              BNE      |L144.616|
000260  4813              LDR      r0,|L144.688|
000262  6800              LDR      r0,[r0,#0]  ; tout
000264  2805              CMP      r0,#5
000266  ddef              BLE      |L144.584|
                  |L144.616|
;;;2416   				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2417   				}
;;;2418   				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;2419   				//memset(data,0,strlen(data));
;;;2420   				//clear();
;;;2421   	RESET_OFF;
000268  2020              MOVS     r0,#0x20
00026a  4915              LDR      r1,|L144.704|
00026c  6088              STR      r0,[r1,#8]
;;;2422   	RESET_OFF;
00026e  6088              STR      r0,[r1,#8]
;;;2423   	delay(100);	
000270  2064              MOVS     r0,#0x64
000272  f7fffffe          BL       delay
;;;2424   	RESET_ON;
000276  2020              MOVS     r0,#0x20
000278  4911              LDR      r1,|L144.704|
00027a  6048              STR      r0,[r1,#4]
;;;2425   	RESET_ON;	
00027c  6048              STR      r0,[r1,#4]
;;;2426   	delay(100);
00027e  2064              MOVS     r0,#0x64
000280  f7fffffe          BL       delay
;;;2427   	rtcticks2 =0;
000284  2000              MOVS     r0,#0
000286  490f              LDR      r1,|L144.708|
000288  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;2428   	
;;;2429   }
00028a  bd38              POP      {r3-r5,pc}
;;;2430   
                          ENDP

                  |L144.652|
                          DCD      at_
                  |L144.656|
                          DCD      data
                  |L144.660|
                          DCD      drive
                  |L144.664|
                          DCD      ||.conststring||+0x414
                  |L144.668|
                          DCD      ||.conststring||+0xe0
                  |L144.672|
                          DCD      ||.conststring||+0x18
                  |L144.676|
                          DCD      ||.conststring||+0x20
                  |L144.680|
                          DCD      uart_string_gsm
                  |L144.684|
                          DCD      ||k2||
                  |L144.688|
                          DCD      tout
                  |L144.692|
                          DCD      k
                  |L144.696|
                          DCD      0x4006b000
                  |L144.700|
                          DCD      ||.conststring||+0x70
                  |L144.704|
                          DCD      0x400ff080
                  |L144.708|
                          DCD      rtcticks2

                          AREA ||i.GPS_COLLECT2||, COMGROUP=GPS_COLLECT2, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT2 PROC
;;;1230   
;;;1231   __inline void GPS_COLLECT2()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1232   {	
;;;1233   time52=15;	
000002  200f              MOVS     r0,#0xf
000004  49cf              LDR      r1,|L151.836|
000006  6008              STR      r0,[r1,#0]  ; time52
;;;1234   
;;;1235   delay(200);
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       delay
;;;1236   clear();
00000e  f7fffffe          BL       clear
;;;1237   //adc_read(8);							
;;;1238   //memset(fuelstr,0,5);
;;;1239   //sprintf(fuelstr,"%d,",fuel);	
;;;1240   if(strlen(imei)<14)
000012  48cd              LDR      r0,|L151.840|
000014  f7fffffe          BL       strlen
000018  280e              CMP      r0,#0xe
00001a  d239              BCS      |L151.144|
;;;1241   {
;;;1242   imeiinc=0;
00001c  2000              MOVS     r0,#0
00001e  49cb              LDR      r1,|L151.844|
000020  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1243   memset(imei,0,20);
000022  2114              MOVS     r1,#0x14
000024  48c8              LDR      r0,|L151.840|
000026  f7fffffe          BL       __aeabi_memclr
;;;1244   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
00002a  200a              MOVS     r0,#0xa
00002c  4bc8              LDR      r3,|L151.848|
00002e  4ac9              LDR      r2,|L151.852|
000030  49c9              LDR      r1,|L151.856|
000032  9000              STR      r0,[sp,#0]
000034  48c9              LDR      r0,|L151.860|
000036  f7fffffe          BL       send_GSM
;;;1245   for(i=0;i<strlen(uart_string_gsm);i++){
00003a  2000              MOVS     r0,#0
00003c  49c8              LDR      r1,|L151.864|
00003e  6008              STR      r0,[r1,#0]  ; i
000040  e01d              B        |L151.126|
                  |L151.66|
;;;1246   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
000042  48c8              LDR      r0,|L151.868|
000044  49c6              LDR      r1,|L151.864|
000046  6809              LDR      r1,[r1,#0]  ; i
000048  5c40              LDRB     r0,[r0,r1]
00004a  282f              CMP      r0,#0x2f
00004c  dd12              BLE      |L151.116|
00004e  48c5              LDR      r0,|L151.868|
000050  49c3              LDR      r1,|L151.864|
000052  6809              LDR      r1,[r1,#0]  ; i
000054  5c40              LDRB     r0,[r0,r1]
000056  283a              CMP      r0,#0x3a
000058  da0c              BGE      |L151.116|
;;;1247   			imei[imeiinc] = uart_string_gsm[i];
00005a  48c2              LDR      r0,|L151.868|
00005c  49c0              LDR      r1,|L151.864|
00005e  6809              LDR      r1,[r1,#0]  ; i
000060  5c40              LDRB     r0,[r0,r1]
000062  49b9              LDR      r1,|L151.840|
000064  4ab9              LDR      r2,|L151.844|
000066  6812              LDR      r2,[r2,#0]  ; imeiinc
000068  5488              STRB     r0,[r1,r2]
;;;1248   			imeiinc++;
00006a  48b8              LDR      r0,|L151.844|
00006c  6800              LDR      r0,[r0,#0]  ; imeiinc
00006e  1c40              ADDS     r0,r0,#1
000070  49b6              LDR      r1,|L151.844|
000072  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L151.116|
000074  48ba              LDR      r0,|L151.864|
000076  6800              LDR      r0,[r0,#0]            ;1245  ; i
000078  1c40              ADDS     r0,r0,#1              ;1245
00007a  49b9              LDR      r1,|L151.864|
00007c  6008              STR      r0,[r1,#0]            ;1245  ; i
                  |L151.126|
00007e  48b9              LDR      r0,|L151.868|
000080  f7fffffe          BL       strlen
000084  49b6              LDR      r1,|L151.864|
000086  6809              LDR      r1,[r1,#0]            ;1245  ; i
000088  4288              CMP      r0,r1                 ;1245
00008a  d8da              BHI      |L151.66|
;;;1249   		}
;;;1250   }
;;;1251   clear();	
00008c  f7fffffe          BL       clear
                  |L151.144|
;;;1252   }
;;;1253   	
;;;1254   	
;;;1255   	adc_read(9);							
000090  2009              MOVS     r0,#9
000092  f7fffffe          BL       adc_read
;;;1256   	memset(fuelstr,0,5);
000096  2105              MOVS     r1,#5
000098  48b3              LDR      r0,|L151.872|
00009a  f7fffffe          BL       __aeabi_memclr4
;;;1257   	sprintf(fuelstr,"%d,",fuel);
00009e  48b3              LDR      r0,|L151.876|
0000a0  49b3              LDR      r1,|L151.880|
0000a2  6802              LDR      r2,[r0,#0]  ; fuel
0000a4  48b0              LDR      r0,|L151.872|
0000a6  f7fffffe          BL       __2sprintf
;;;1258   
;;;1259   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
0000aa  48b2              LDR      r0,|L151.884|
0000ac  6800              LDR      r0,[r0,#0]  ; tmeout
0000ae  4bb2              LDR      r3,|L151.888|
0000b0  4aa7              LDR      r2,|L151.848|
0000b2  49a9              LDR      r1,|L151.856|
0000b4  9000              STR      r0,[sp,#0]
0000b6  48b1              LDR      r0,|L151.892|
0000b8  f7fffffe          BL       send_GSM
;;;1260   	// not sleep	
;;;1261   	memset(num2,0,30);
0000bc  211e              MOVS     r1,#0x1e
0000be  48b0              LDR      r0,|L151.896|
0000c0  f7fffffe          BL       __aeabi_memclr
;;;1262   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
0000c4  48ae              LDR      r0,|L151.896|
0000c6  210d              MOVS     r1,#0xd
0000c8  232c              MOVS     r3,#0x2c
0000ca  2205              MOVS     r2,#5
0000cc  9100              STR      r1,[sp,#0]
0000ce  9001              STR      r0,[sp,#4]
0000d0  2102              MOVS     r1,#2
0000d2  48a4              LDR      r0,|L151.868|
0000d4  f7fffffe          BL       parse_g
;;;1263   	voltagecbc=myAtoi(num2);	
0000d8  48a9              LDR      r0,|L151.896|
0000da  f7fffffe          BL       myAtoi
0000de  49a9              LDR      r1,|L151.900|
0000e0  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1264   
;;;1265   memset(ignstr,0,2);
0000e2  48a9              LDR      r0,|L151.904|
0000e4  2100              MOVS     r1,#0
0000e6  7001              STRB     r1,[r0,#0]
0000e8  7041              STRB     r1,[r0,#1]
;;;1266   if(GPIOB_PDIR & 0x00000001){
0000ea  48a8              LDR      r0,|L151.908|
0000ec  6900              LDR      r0,[r0,#0x10]
0000ee  07c0              LSLS     r0,r0,#31
0000f0  0fc0              LSRS     r0,r0,#31
0000f2  2800              CMP      r0,#0
0000f4  d005              BEQ      |L151.258|
;;;1267   			sprintf(ignstr,"%d",1);
0000f6  2201              MOVS     r2,#1
0000f8  49a5              LDR      r1,|L151.912|
0000fa  48a3              LDR      r0,|L151.904|
0000fc  f7fffffe          BL       __2sprintf
000100  e004              B        |L151.268|
                  |L151.258|
;;;1268   }
;;;1269   else{
;;;1270   			sprintf(ignstr,"%d",0);
000102  2200              MOVS     r2,#0
000104  49a2              LDR      r1,|L151.912|
000106  48a0              LDR      r0,|L151.904|
000108  f7fffffe          BL       __2sprintf
                  |L151.268|
;;;1271   
;;;1272   }
;;;1273   
;;;1274   memset(acstr,0,2); //ptb2
00010c  48a1              LDR      r0,|L151.916|
00010e  2100              MOVS     r1,#0
000110  8001              STRH     r1,[r0,#0]
;;;1275   if(GPIOB_PDIR & 0x00000004){
000112  489e              LDR      r0,|L151.908|
000114  6900              LDR      r0,[r0,#0x10]
000116  2104              MOVS     r1,#4
000118  4008              ANDS     r0,r0,r1
00011a  2800              CMP      r0,#0
00011c  d005              BEQ      |L151.298|
;;;1276   			sprintf(acstr,"%d",1);
00011e  2201              MOVS     r2,#1
000120  499b              LDR      r1,|L151.912|
000122  489c              LDR      r0,|L151.916|
000124  f7fffffe          BL       __2sprintf
000128  e004              B        |L151.308|
                  |L151.298|
;;;1277   }
;;;1278   else{
;;;1279   				sprintf(acstr,"%d",0);
00012a  2200              MOVS     r2,#0
00012c  4998              LDR      r1,|L151.912|
00012e  4899              LDR      r0,|L151.916|
000130  f7fffffe          BL       __2sprintf
                  |L151.308|
;;;1280   
;;;1281   }
;;;1282   	
;;;1283   while(lpticks<int_erval);
000134  bf00              NOP      
                  |L151.310|
000136  4898              LDR      r0,|L151.920|
000138  6800              LDR      r0,[r0,#0]  ; lpticks
00013a  4998              LDR      r1,|L151.924|
00013c  6809              LDR      r1,[r1,#0]  ; int_erval
00013e  4288              CMP      r0,r1
000140  dbf9              BLT      |L151.310|
;;;1284   get_gpsdata();
000142  f7fffffe          BL       get_gpsdata
;;;1285   lpticks=0;
000146  2000              MOVS     r0,#0
000148  4993              LDR      r1,|L151.920|
00014a  6008              STR      r0,[r1,#0]  ; lpticks
;;;1286   
;;;1287   parse_g(rmc, 3, 4, ',', ',' ,lati);
00014c  4894              LDR      r0,|L151.928|
00014e  212c              MOVS     r1,#0x2c
000150  460b              MOV      r3,r1
000152  2204              MOVS     r2,#4
000154  9100              STR      r1,[sp,#0]
000156  9001              STR      r0,[sp,#4]
000158  2103              MOVS     r1,#3
00015a  4892              LDR      r0,|L151.932|
00015c  f7fffffe          BL       parse_g
;;;1288   parse_g(rmc, 5, 6, ',', ',' ,longi);
000160  4891              LDR      r0,|L151.936|
000162  212c              MOVS     r1,#0x2c
000164  460b              MOV      r3,r1
000166  2206              MOVS     r2,#6
000168  9100              STR      r1,[sp,#0]
00016a  9001              STR      r0,[sp,#4]
00016c  2105              MOVS     r1,#5
00016e  488d              LDR      r0,|L151.932|
000170  f7fffffe          BL       parse_g
;;;1289   parse_g(rmc, 7, 8, ',', ',' ,velocity);
000174  488d              LDR      r0,|L151.940|
000176  212c              MOVS     r1,#0x2c
000178  460b              MOV      r3,r1
00017a  2208              MOVS     r2,#8
00017c  9100              STR      r1,[sp,#0]
00017e  9001              STR      r0,[sp,#4]
000180  2107              MOVS     r1,#7
000182  4888              LDR      r0,|L151.932|
000184  f7fffffe          BL       parse_g
;;;1290   		
;;;1291   		speed = stof(velocity);
000188  4888              LDR      r0,|L151.940|
00018a  f7fffffe          BL       stof
00018e  4988              LDR      r1,|L151.944|
000190  6008              STR      r0,[r1,#0]  ; speed
;;;1292   		c=stof(lati);//7523.7412
000192  4883              LDR      r0,|L151.928|
000194  f7fffffe          BL       stof
000198  4604              MOV      r4,r0
00019a  f7fffffe          BL       __aeabi_f2d
00019e  4a85              LDR      r2,|L151.948|
0001a0  c203              STM      r2!,{r0,r1}
;;;1293   		hh= c/100; //75
0001a2  2200              MOVS     r2,#0
0001a4  4b84              LDR      r3,|L151.952|
0001a6  4983              LDR      r1,|L151.948|
0001a8  c903              LDM      r1,{r0,r1}
0001aa  f7fffffe          BL       __aeabi_ddiv
0001ae  4604              MOV      r4,r0
0001b0  f7fffffe          BL       __aeabi_d2iz
0001b4  4981              LDR      r1,|L151.956|
0001b6  6008              STR      r0,[r1,#0]  ; hh
;;;1294   		hh11 = c/100; //75.237412
0001b8  2200              MOVS     r2,#0
0001ba  4b7f              LDR      r3,|L151.952|
0001bc  497d              LDR      r1,|L151.948|
0001be  c903              LDM      r1,{r0,r1}
0001c0  f7fffffe          BL       __aeabi_ddiv
0001c4  4a7e              LDR      r2,|L151.960|
0001c6  c203              STM      r2!,{r0,r1}
;;;1295   		mm11 = hh11-hh; //.237412
0001c8  487c              LDR      r0,|L151.956|
0001ca  6800              LDR      r0,[r0,#0]  ; hh
0001cc  f7fffffe          BL       __aeabi_i2d
0001d0  4604              MOV      r4,r0
0001d2  487b              LDR      r0,|L151.960|
0001d4  c80c              LDM      r0!,{r2,r3}
0001d6  4620              MOV      r0,r4
0001d8  f7fffffe          BL       __aeabi_drsub
0001dc  4a79              LDR      r2,|L151.964|
0001de  c203              STM      r2!,{r0,r1}
;;;1296   		mm11*=100;
0001e0  2200              MOVS     r2,#0
0001e2  4b75              LDR      r3,|L151.952|
0001e4  4977              LDR      r1,|L151.964|
0001e6  c903              LDM      r1,{r0,r1}
0001e8  f7fffffe          BL       __aeabi_dmul
0001ec  4a75              LDR      r2,|L151.964|
0001ee  c203              STM      r2!,{r0,r1}
;;;1297   		mm22=hh+mm11/60;	
0001f0  2200              MOVS     r2,#0
0001f2  4b75              LDR      r3,|L151.968|
0001f4  4973              LDR      r1,|L151.964|
0001f6  c903              LDM      r1,{r0,r1}
0001f8  f7fffffe          BL       __aeabi_ddiv
0001fc  4604              MOV      r4,r0
0001fe  460d              MOV      r5,r1
000200  486e              LDR      r0,|L151.956|
000202  6800              LDR      r0,[r0,#0]  ; hh
000204  f7fffffe          BL       __aeabi_i2d
000208  4606              MOV      r6,r0
00020a  4622              MOV      r2,r4
00020c  462b              MOV      r3,r5
00020e  f7fffffe          BL       __aeabi_dadd
000212  4a6e              LDR      r2,|L151.972|
000214  c203              STM      r2!,{r0,r1}
;;;1298   		memset(lati,0,15);
000216  210f              MOVS     r1,#0xf
000218  4861              LDR      r0,|L151.928|
00021a  f7fffffe          BL       __aeabi_memclr
;;;1299   		sprintf(lati,"%f",mm22);
00021e  486b              LDR      r0,|L151.972|
000220  496b              LDR      r1,|L151.976|
000222  c80c              LDM      r0!,{r2,r3}
000224  485e              LDR      r0,|L151.928|
000226  f7fffffe          BL       __2sprintf
;;;1300   		c=stof(longi);//7523.7412
00022a  485f              LDR      r0,|L151.936|
00022c  f7fffffe          BL       stof
000230  4604              MOV      r4,r0
000232  f7fffffe          BL       __aeabi_f2d
000236  4a5f              LDR      r2,|L151.948|
000238  c203              STM      r2!,{r0,r1}
;;;1301   		hh= c/100; //75
00023a  2200              MOVS     r2,#0
00023c  4b5e              LDR      r3,|L151.952|
00023e  495d              LDR      r1,|L151.948|
000240  c903              LDM      r1,{r0,r1}
000242  f7fffffe          BL       __aeabi_ddiv
000246  4604              MOV      r4,r0
000248  f7fffffe          BL       __aeabi_d2iz
00024c  495b              LDR      r1,|L151.956|
00024e  6008              STR      r0,[r1,#0]  ; hh
;;;1302   		hh11 = c/100; //75.237412
000250  2200              MOVS     r2,#0
000252  4b59              LDR      r3,|L151.952|
000254  4957              LDR      r1,|L151.948|
000256  c903              LDM      r1,{r0,r1}
000258  f7fffffe          BL       __aeabi_ddiv
00025c  4a58              LDR      r2,|L151.960|
00025e  c203              STM      r2!,{r0,r1}
;;;1303   		mm11 = hh11-hh; //.237412
000260  4856              LDR      r0,|L151.956|
000262  6800              LDR      r0,[r0,#0]  ; hh
000264  f7fffffe          BL       __aeabi_i2d
000268  4604              MOV      r4,r0
00026a  4855              LDR      r0,|L151.960|
00026c  c80c              LDM      r0!,{r2,r3}
00026e  4620              MOV      r0,r4
000270  f7fffffe          BL       __aeabi_drsub
000274  4a53              LDR      r2,|L151.964|
000276  c203              STM      r2!,{r0,r1}
;;;1304   		mm11*=100;
000278  2200              MOVS     r2,#0
00027a  4b4f              LDR      r3,|L151.952|
00027c  4951              LDR      r1,|L151.964|
00027e  c903              LDM      r1,{r0,r1}
000280  f7fffffe          BL       __aeabi_dmul
000284  4a4f              LDR      r2,|L151.964|
000286  c203              STM      r2!,{r0,r1}
;;;1305   		mm22=hh+mm11/60;	
000288  2200              MOVS     r2,#0
00028a  4b4f              LDR      r3,|L151.968|
00028c  494d              LDR      r1,|L151.964|
00028e  c903              LDM      r1,{r0,r1}
000290  f7fffffe          BL       __aeabi_ddiv
000294  4604              MOV      r4,r0
000296  460d              MOV      r5,r1
000298  4848              LDR      r0,|L151.956|
00029a  6800              LDR      r0,[r0,#0]  ; hh
00029c  f7fffffe          BL       __aeabi_i2d
0002a0  4606              MOV      r6,r0
0002a2  4622              MOV      r2,r4
0002a4  462b              MOV      r3,r5
0002a6  f7fffffe          BL       __aeabi_dadd
0002aa  4a48              LDR      r2,|L151.972|
0002ac  c203              STM      r2!,{r0,r1}
;;;1306   		memset(longi,0,15);
0002ae  210f              MOVS     r1,#0xf
0002b0  483d              LDR      r0,|L151.936|
0002b2  f7fffffe          BL       __aeabi_memclr
;;;1307   		sprintf(longi,"%f",mm22);	
0002b6  4845              LDR      r0,|L151.972|
0002b8  4945              LDR      r1,|L151.976|
0002ba  c80c              LDM      r0!,{r2,r3}
0002bc  483a              LDR      r0,|L151.936|
0002be  f7fffffe          BL       __2sprintf
;;;1308   		strcat(data,imei);
0002c2  4921              LDR      r1,|L151.840|
0002c4  4843              LDR      r0,|L151.980|
0002c6  f7fffffe          BL       strcat
;;;1309   		strcat(data,",");	
0002ca  4943              LDR      r1,|L151.984|
0002cc  4841              LDR      r0,|L151.980|
0002ce  f7fffffe          BL       strcat
;;;1310   	//	strcat(data,"$GxGGA");	
;;;1311   		strcat(data,gga);
0002d2  4942              LDR      r1,|L151.988|
0002d4  483f              LDR      r0,|L151.980|
0002d6  f7fffffe          BL       strcat
;;;1312   		strcat(data,",");	
0002da  493f              LDR      r1,|L151.984|
0002dc  483d              LDR      r0,|L151.980|
0002de  f7fffffe          BL       strcat
;;;1313   		strcat(data,rmc);	
0002e2  4930              LDR      r1,|L151.932|
0002e4  483b              LDR      r0,|L151.980|
0002e6  f7fffffe          BL       strcat
;;;1314   		strcat(data,",");	
0002ea  493b              LDR      r1,|L151.984|
0002ec  4839              LDR      r0,|L151.980|
0002ee  f7fffffe          BL       strcat
;;;1315   		strcat(data,num2);
0002f2  4923              LDR      r1,|L151.896|
0002f4  4837              LDR      r0,|L151.980|
0002f6  f7fffffe          BL       strcat
;;;1316   		strcat(data,",F=");	
0002fa  4939              LDR      r1,|L151.992|
0002fc  4835              LDR      r0,|L151.980|
0002fe  f7fffffe          BL       strcat
;;;1317   		strcat(data,fuelstr);
000302  4919              LDR      r1,|L151.872|
000304  4833              LDR      r0,|L151.980|
000306  f7fffffe          BL       strcat
;;;1318   		strcat(data,"AC=");	
00030a  4936              LDR      r1,|L151.996|
00030c  4831              LDR      r0,|L151.980|
00030e  f7fffffe          BL       strcat
;;;1319   		strcat(data,acstr);
000312  4920              LDR      r1,|L151.916|
000314  482f              LDR      r0,|L151.980|
000316  f7fffffe          BL       strcat
;;;1320   		strcat(data,",I=");	
00031a  4933              LDR      r1,|L151.1000|
00031c  482d              LDR      r0,|L151.980|
00031e  f7fffffe          BL       strcat
;;;1321   		strcat(data,ignstr);		
000322  4919              LDR      r1,|L151.904|
000324  482b              LDR      r0,|L151.980|
000326  f7fffffe          BL       strcat
;;;1322   		if(!(GPIOC_PDIR & 0x00000001)){
00032a  4818              LDR      r0,|L151.908|
00032c  3040              ADDS     r0,r0,#0x40
00032e  6900              LDR      r0,[r0,#0x10]
000330  07c0              LSLS     r0,r0,#31
000332  0fc0              LSRS     r0,r0,#31
000334  2800              CMP      r0,#0
000336  d003              BEQ      |L151.832|
;;;1323   		}
;;;1324   		else{strcat(data,",BR*");}
000338  492c              LDR      r1,|L151.1004|
00033a  4826              LDR      r0,|L151.980|
00033c  f7fffffe          BL       strcat
                  |L151.832|
;;;1325   //return 0;
;;;1326   }
000340  bdfe              POP      {r1-r7,pc}
;;;1327   
                          ENDP

000342  0000              DCW      0x0000
                  |L151.836|
                          DCD      time52
                  |L151.840|
                          DCD      imei
                  |L151.844|
                          DCD      imeiinc
                  |L151.848|
                          DCD      ||.conststring||+0xe0
                  |L151.852|
                          DCD      ||.conststring||+0x18
                  |L151.856|
                          DCD      ||.conststring||+0x2c
                  |L151.860|
                          DCD      ||.conststring||+0xf0
                  |L151.864|
                          DCD      i
                  |L151.868|
                          DCD      uart_string_gsm
                  |L151.872|
                          DCD      fuelstr
                  |L151.876|
                          DCD      fuel
                  |L151.880|
                          DCD      ||.conststring||+0x120
                  |L151.884|
                          DCD      tmeout
                  |L151.888|
                          DCD      ||.conststring||+0x10
                  |L151.892|
                          DCD      ||.conststring||+0x100
                  |L151.896|
                          DCD      num2
                  |L151.900|
                          DCD      voltagecbc
                  |L151.904|
                          DCD      ignstr
                  |L151.908|
                          DCD      0x400ff040
                  |L151.912|
                          DCD      ||.conststring||+0x110
                  |L151.916|
                          DCD      acstr
                  |L151.920|
                          DCD      lpticks
                  |L151.924|
                          DCD      int_erval
                  |L151.928|
                          DCD      lati
                  |L151.932|
                          DCD      ||rmc||
                  |L151.936|
                          DCD      longi
                  |L151.940|
                          DCD      velocity
                  |L151.944|
                          DCD      speed
                  |L151.948|
                          DCD      c
                  |L151.952|
                          DCD      0x40590000
                  |L151.956|
                          DCD      ||hh||
                  |L151.960|
                          DCD      hh11
                  |L151.964|
                          DCD      mm11
                  |L151.968|
                          DCD      0x404e0000
                  |L151.972|
                          DCD      mm22
                  |L151.976|
                          DCD      ||.conststring||+0x114
                  |L151.980|
                          DCD      data
                  |L151.984|
                          DCD      ||.conststring||+0x118
                  |L151.988|
                          DCD      gga
                  |L151.992|
                          DCD      ||.conststring||+0x11c
                  |L151.996|
                          DCD      ||.conststring||+0x124
                  |L151.1000|
                          DCD      ||.conststring||+0x128
                  |L151.1004|
                          DCD      ||.conststring||+0x12c

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;70     
;;;71     __inline void remove_all_chars(char* str, char c, char d) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;72         char *pr = str, *pw = str;
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
;;;73         while (*pr) {
00000a  e015              B        |L158.56|
                  |L158.12|
;;;74             *pw = *pr++;
00000c  780d              LDRB     r5,[r1,#0]
00000e  7005              STRB     r5,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
;;;75     			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
000012  7805              LDRB     r5,[r0,#0]
000014  42a5              CMP      r5,r4
000016  d00d              BEQ      |L158.52|
000018  7805              LDRB     r5,[r0,#0]
00001a  4295              CMP      r5,r2
00001c  d00a              BEQ      |L158.52|
00001e  7805              LDRB     r5,[r0,#0]
000020  2d20              CMP      r5,#0x20
000022  d007              BEQ      |L158.52|
000024  7805              LDRB     r5,[r0,#0]
000026  2d2f              CMP      r5,#0x2f
000028  d004              BEQ      |L158.52|
00002a  7805              LDRB     r5,[r0,#0]
00002c  2d3a              CMP      r5,#0x3a
00002e  d001              BEQ      |L158.52|
000030  2501              MOVS     r5,#1
000032  e000              B        |L158.54|
                  |L158.52|
000034  2500              MOVS     r5,#0
                  |L158.54|
000036  1828              ADDS     r0,r5,r0
                  |L158.56|
000038  780d              LDRB     r5,[r1,#0]            ;73
00003a  2d00              CMP      r5,#0                 ;73
00003c  d1e6              BNE      |L158.12|
;;;76         }
;;;77         *pw = '\0';
00003e  7005              STRB     r5,[r0,#0]
;;;78     }
000040  bd30              POP      {r4,r5,pc}
;;;79     
                          ENDP


                          AREA ||i.send_chunk||, COMGROUP=send_chunk, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_chunk PROC
;;;1771   
;;;1772   __inline void  send_chunk(){
000000  b57c              PUSH     {r2-r6,lr}
;;;1773   fsz=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L165.1024|
000006  6008              STR      r0,[r1,#0]  ; fsz
;;;1774   times=-2;	
000008  1e80              SUBS     r0,r0,#2
00000a  49fe              LDR      r1,|L165.1028|
00000c  6008              STR      r0,[r1,#0]  ; times
;;;1775   	
;;;1776   
;;;1777   temp=int_erval;				
00000e  48fe              LDR      r0,|L165.1032|
000010  6800              LDR      r0,[r0,#0]  ; int_erval
000012  49fe              LDR      r1,|L165.1036|
000014  6008              STR      r0,[r1,#0]  ; temp
;;;1778   int_erval=1;
000016  2001              MOVS     r0,#1
000018  49fb              LDR      r1,|L165.1032|
00001a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1779   
;;;1780   	
;;;1781   memset(at_,0,100);
00001c  2164              MOVS     r1,#0x64
00001e  48fc              LDR      r0,|L165.1040|
000020  f7fffffe          BL       __aeabi_memclr
;;;1782   sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
000024  4afb              LDR      r2,|L165.1044|
000026  49fc              LDR      r1,|L165.1048|
000028  48f9              LDR      r0,|L165.1040|
00002a  f7fffffe          BL       __2sprintf
;;;1783   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00002e  48fb              LDR      r0,|L165.1052|
000030  6800              LDR      r0,[r0,#0]  ; tmeout
000032  4bfb              LDR      r3,|L165.1056|
000034  4afb              LDR      r2,|L165.1060|
000036  49fc              LDR      r1,|L165.1064|
000038  9000              STR      r0,[sp,#0]
00003a  48f5              LDR      r0,|L165.1040|
00003c  f7fffffe          BL       send_GSM
;;;1784   parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
000040  48fa              LDR      r0,|L165.1068|
000042  210d              MOVS     r1,#0xd
000044  2320              MOVS     r3,#0x20
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2101              MOVS     r1,#1
00004e  48f8              LDR      r0,|L165.1072|
000050  f7fffffe          BL       parse_g
;;;1785   fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
000054  48f5              LDR      r0,|L165.1068|
000056  f7fffffe          BL       stof
00005a  49e9              LDR      r1,|L165.1024|
00005c  6008              STR      r0,[r1,#0]  ; fsz
;;;1786   //reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1787   	
;;;1788   times =	(fsz/900) + 2;
00005e  49f5              LDR      r1,|L165.1076|
000060  48e7              LDR      r0,|L165.1024|
000062  6800              LDR      r0,[r0,#0]  ; fsz
000064  f7fffffe          BL       __aeabi_fdiv
000068  4605              MOV      r5,r0
00006a  2101              MOVS     r1,#1
00006c  0789              LSLS     r1,r1,#30
00006e  f7fffffe          BL       __aeabi_fadd
000072  4604              MOV      r4,r0
000074  f7fffffe          BL       __aeabi_f2iz
000078  49e2              LDR      r1,|L165.1028|
00007a  6008              STR      r0,[r1,#0]  ; times
;;;1789   for(;k5<=(times);){
00007c  e3fd              B        |L165.2170|
                  |L165.126|
;;;1790   if(fsz==0){log0=1;break;}
00007e  2100              MOVS     r1,#0
000080  48df              LDR      r0,|L165.1024|
000082  6800              LDR      r0,[r0,#0]  ; fsz
000084  f7fffffe          BL       __aeabi_cfcmpeq
000088  d103              BNE      |L165.146|
00008a  2001              MOVS     r0,#1
00008c  49ea              LDR      r1,|L165.1080|
00008e  6008              STR      r0,[r1,#0]  ; log0
000090  e3f4              B        |L165.2172|
                  |L165.146|
;;;1791   else log0=0;
000092  2000              MOVS     r0,#0
000094  49e8              LDR      r1,|L165.1080|
000096  6008              STR      r0,[r1,#0]  ; log0
;;;1792   
;;;1793   	RESET_ON;
000098  2020              MOVS     r0,#0x20
00009a  49e8              LDR      r1,|L165.1084|
00009c  6048              STR      r0,[r1,#4]
;;;1794   	DTR_OFF;
00009e  2080              MOVS     r0,#0x80
0000a0  49e6              LDR      r1,|L165.1084|
0000a2  3140              ADDS     r1,r1,#0x40
0000a4  6088              STR      r0,[r1,#8]
;;;1795   	
;;;1796   msg_sim800(); 
0000a6  f7fffffe          BL       msg_sim800
;;;1797   
;;;1798   memset(data,0,strlen(data));	
0000aa  48e5              LDR      r0,|L165.1088|
0000ac  f7fffffe          BL       strlen
0000b0  4604              MOV      r4,r0
0000b2  4621              MOV      r1,r4
0000b4  48e2              LDR      r0,|L165.1088|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;1799   strcat(data,"\n");	
0000ba  49e2              LDR      r1,|L165.1092|
0000bc  48e0              LDR      r0,|L165.1088|
0000be  f7fffffe          BL       strcat
;;;1800   	
;;;1801   	
;;;1802   	memset(at_,0,100);
0000c2  2164              MOVS     r1,#0x64
0000c4  48d2              LDR      r0,|L165.1040|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1803   	sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);
0000ca  4ad2              LDR      r2,|L165.1044|
0000cc  49d2              LDR      r1,|L165.1048|
0000ce  48d0              LDR      r0,|L165.1040|
0000d0  f7fffffe          BL       __2sprintf
;;;1804   GPS_COLLECT();
0000d4  f7fffffe          BL       GPS_COLLECT
;;;1805   
;;;1806   	
;;;1807   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
0000d8  48d0              LDR      r0,|L165.1052|
0000da  6800              LDR      r0,[r0,#0]  ; tmeout
0000dc  4bd0              LDR      r3,|L165.1056|
0000de  4ad1              LDR      r2,|L165.1060|
0000e0  49d1              LDR      r1,|L165.1064|
0000e2  9000              STR      r0,[sp,#0]
0000e4  48ca              LDR      r0,|L165.1040|
0000e6  f7fffffe          BL       send_GSM
;;;1808   	parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
0000ea  48d0              LDR      r0,|L165.1068|
0000ec  210d              MOVS     r1,#0xd
0000ee  2320              MOVS     r3,#0x20
0000f0  2205              MOVS     r2,#5
0000f2  9100              STR      r1,[sp,#0]
0000f4  9001              STR      r0,[sp,#4]
0000f6  2101              MOVS     r1,#1
0000f8  48cd              LDR      r0,|L165.1072|
0000fa  f7fffffe          BL       parse_g
;;;1809   	fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
0000fe  48cb              LDR      r0,|L165.1068|
000100  f7fffffe          BL       stof
000104  49be              LDR      r1,|L165.1024|
000106  6008              STR      r0,[r1,#0]  ; fsz
;;;1810   	//reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1811   	times =	(fsz/900) + 1;	
000108  49ca              LDR      r1,|L165.1076|
00010a  48bd              LDR      r0,|L165.1024|
00010c  6800              LDR      r0,[r0,#0]  ; fsz
00010e  f7fffffe          BL       __aeabi_fdiv
000112  4605              MOV      r5,r0
000114  217f              MOVS     r1,#0x7f
000116  05c9              LSLS     r1,r1,#23
000118  f7fffffe          BL       __aeabi_fadd
00011c  4604              MOV      r4,r0
00011e  f7fffffe          BL       __aeabi_f2iz
000122  49b8              LDR      r1,|L165.1028|
000124  6008              STR      r0,[r1,#0]  ; times
;;;1812   	
;;;1813   	
;;;1814   memset(at_,0,100);
000126  2164              MOVS     r1,#0x64
000128  48b9              LDR      r0,|L165.1040|
00012a  f7fffffe          BL       __aeabi_memclr
;;;1815   sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>          \r\n\r\n",times,k5,rtcticks2);							
00012e  48c6              LDR      r0,|L165.1096|
000130  6800              LDR      r0,[r0,#0]  ; rtcticks2
000132  9000              STR      r0,[sp,#0]
000134  48c5              LDR      r0,|L165.1100|
000136  6803              LDR      r3,[r0,#0]  ; k5
000138  48b2              LDR      r0,|L165.1028|
00013a  49c5              LDR      r1,|L165.1104|
00013c  6802              LDR      r2,[r0,#0]  ; times
00013e  48b4              LDR      r0,|L165.1040|
000140  f7fffffe          BL       __2sprintf
;;;1816   send_modem(at_);
000144  48b2              LDR      r0,|L165.1040|
000146  f7fffffe          BL       send_modem
;;;1817   clear();
00014a  f7fffffe          BL       clear
;;;1818   	
;;;1819   	
;;;1820   		sprintf(at_, "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",drive,cursorvaluepr );		//1256
00014e  48c1              LDR      r0,|L165.1108|
000150  4ab0              LDR      r2,|L165.1044|
000152  49c1              LDR      r1,|L165.1112|
000154  6803              LDR      r3,[r0,#0]  ; cursorvaluepr
000156  48ae              LDR      r0,|L165.1040|
000158  f7fffffe          BL       __2sprintf
;;;1821   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",5);
00015c  2005              MOVS     r0,#5
00015e  4bb0              LDR      r3,|L165.1056|
000160  4ab0              LDR      r2,|L165.1060|
000162  49b1              LDR      r1,|L165.1064|
000164  9000              STR      r0,[sp,#0]
000166  48aa              LDR      r0,|L165.1040|
000168  f7fffffe          BL       send_GSM
;;;1822   			if(strstr(uart_string_gsm,"ERROR")){
00016c  49bb              LDR      r1,|L165.1116|
00016e  48b0              LDR      r0,|L165.1072|
000170  f7fffffe          BL       strstr
000174  2800              CMP      r0,#0
000176  d00b              BEQ      |L165.400|
;;;1823   				RESET_OFF;
000178  2020              MOVS     r0,#0x20
00017a  49b0              LDR      r1,|L165.1084|
00017c  6088              STR      r0,[r1,#8]
;;;1824   				delay(50);
00017e  2032              MOVS     r0,#0x32
000180  f7fffffe          BL       delay
;;;1825   				RESET_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L165.1084|
000188  6048              STR      r0,[r1,#4]
;;;1826   				delay(50);
00018a  2032              MOVS     r0,#0x32
00018c  f7fffffe          BL       delay
                  |L165.400|
;;;1827   			}
;;;1828   		cntendl=count_char('\n',uart_string_gsm);
000190  49a7              LDR      r1,|L165.1072|
000192  200a              MOVS     r0,#0xa
000194  f7fffffe          BL       count_char
000198  49b1              LDR      r1,|L165.1120|
00019a  6008              STR      r0,[r1,#0]  ; cntendl
;;;1829      //if(cntendl!=0)
;;;1830   		enters = cntendl;		
00019c  4608              MOV      r0,r1
00019e  6800              LDR      r0,[r0,#0]  ; cntendl
0001a0  49b0              LDR      r1,|L165.1124|
0001a2  6008              STR      r0,[r1,#0]  ; enters
;;;1831   		memset(sd_data,0,1400);
0001a4  21af              MOVS     r1,#0xaf
0001a6  00c9              LSLS     r1,r1,#3
0001a8  48af              LDR      r0,|L165.1128|
0001aa  f7fffffe          BL       __aeabi_memclr
;;;1832   		parse_g(uart_string_gsm, 1,enters-2, '\n', '\n' ,sd_data);	
0001ae  48ae              LDR      r0,|L165.1128|
0001b0  210a              MOVS     r1,#0xa
0001b2  9100              STR      r1,[sp,#0]
0001b4  9001              STR      r0,[sp,#4]
0001b6  48ab              LDR      r0,|L165.1124|
0001b8  6800              LDR      r0,[r0,#0]  ; enters
0001ba  1e82              SUBS     r2,r0,#2
0001bc  460b              MOV      r3,r1
0001be  2101              MOVS     r1,#1
0001c0  489b              LDR      r0,|L165.1072|
0001c2  f7fffffe          BL       parse_g
;;;1833   		strcat(sd_data,"\n");
0001c6  499f              LDR      r1,|L165.1092|
0001c8  48a7              LDR      r0,|L165.1128|
0001ca  f7fffffe          BL       strcat
;;;1834   		strcat(sd_data,data);
0001ce  499c              LDR      r1,|L165.1088|
0001d0  48a5              LDR      r0,|L165.1128|
0001d2  f7fffffe          BL       strcat
;;;1835   		if(strstr(sd_data,"SEND OK")    ||   strstr(sd_data,"ERROR") || strstr(sd_data,"FAIL")  ||  strstr(sd_data,"DEACT"))	{
0001d6  49a5              LDR      r1,|L165.1132|
0001d8  48a3              LDR      r0,|L165.1128|
0001da  f7fffffe          BL       strstr
0001de  2800              CMP      r0,#0
0001e0  d111              BNE      |L165.518|
0001e2  499e              LDR      r1,|L165.1116|
0001e4  48a0              LDR      r0,|L165.1128|
0001e6  f7fffffe          BL       strstr
0001ea  2800              CMP      r0,#0
0001ec  d10b              BNE      |L165.518|
0001ee  49a0              LDR      r1,|L165.1136|
0001f0  489d              LDR      r0,|L165.1128|
0001f2  f7fffffe          BL       strstr
0001f6  2800              CMP      r0,#0
0001f8  d105              BNE      |L165.518|
0001fa  499e              LDR      r1,|L165.1140|
0001fc  489a              LDR      r0,|L165.1128|
0001fe  f7fffffe          BL       strstr
000202  2800              CMP      r0,#0
000204  d008              BEQ      |L165.536|
                  |L165.518|
;;;1836   		memset(exception,0,200);	
000206  21c8              MOVS     r1,#0xc8
000208  489b              LDR      r0,|L165.1144|
00020a  f7fffffe          BL       __aeabi_memclr
;;;1837   		strcat(exception,"exception : COMPARED RESPONCES IN THE DATA\n\n\n\n");	
00020e  499b              LDR      r1,|L165.1148|
000210  4899              LDR      r0,|L165.1144|
000212  f7fffffe          BL       strcat
000216  e003              B        |L165.544|
                  |L165.536|
;;;1838   		}
;;;1839   		else{memset(exception,0,200);}
000218  21c8              MOVS     r1,#0xc8
00021a  4897              LDR      r0,|L165.1144|
00021c  f7fffffe          BL       __aeabi_memclr
                  |L165.544|
;;;1840   
;;;1841   	
;;;1842   		qwe=strlen(uart_string_gsm);
000220  4883              LDR      r0,|L165.1072|
000222  f7fffffe          BL       strlen
000226  4996              LDR      r1,|L165.1152|
000228  6008              STR      r0,[r1,#0]  ; qwe
;;;1843   		memset(uart_string_gsm,0,qwe);
00022a  4608              MOV      r0,r1
00022c  6801              LDR      r1,[r0,#0]  ; qwe
00022e  4880              LDR      r0,|L165.1072|
000230  f7fffffe          BL       __aeabi_memclr
;;;1844   		
;;;1845   
;;;1846   	
;;;1847   		
;;;1848   		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT",tmeout);	
000234  4879              LDR      r0,|L165.1052|
000236  6800              LDR      r0,[r0,#0]  ; tmeout
000238  4b92              LDR      r3,|L165.1156|
00023a  4a88              LDR      r2,|L165.1116|
00023c  4992              LDR      r1,|L165.1160|
00023e  9000              STR      r0,[sp,#0]
000240  4892              LDR      r0,|L165.1164|
000242  f7fffffe          BL       send_GSM
;;;1849   								cond =mystrstr(uart_string_gsm,'>');
000246  213e              MOVS     r1,#0x3e
000248  4879              LDR      r0,|L165.1072|
00024a  f7fffffe          BL       mystrstr
00024e  4990              LDR      r1,|L165.1168|
000250  7008              STRB     r0,[r1,#0]
;;;1850   									if(cond)	
000252  4608              MOV      r0,r1
000254  7800              LDRB     r0,[r0,#0]  ; cond
000256  2800              CMP      r0,#0
000258  d101              BNE      |L165.606|
00025a  f001f809          BL       |L165.4720|
                  |L165.606|
;;;1851   									{	
;;;1852   									clear();
00025e  f7fffffe          BL       clear
;;;1853   									memset(uart_string_gsm,0,5000);
000262  498c              LDR      r1,|L165.1172|
000264  4872              LDR      r0,|L165.1072|
000266  f7fffffe          BL       __aeabi_memclr
;;;1854   									if(strlen(exception) > 5){
00026a  4883              LDR      r0,|L165.1144|
00026c  f7fffffe          BL       strlen
000270  2805              CMP      r0,#5
000272  d905              BLS      |L165.640|
;;;1855   									qwe=strlen(exception);
000274  4880              LDR      r0,|L165.1144|
000276  f7fffffe          BL       strlen
00027a  4981              LDR      r1,|L165.1152|
00027c  6008              STR      r0,[r1,#0]  ; qwe
00027e  e004              B        |L165.650|
                  |L165.640|
;;;1856   									}
;;;1857   									else{										
;;;1858   									qwe=strlen(sd_data);
000280  4879              LDR      r0,|L165.1128|
000282  f7fffffe          BL       strlen
000286  497e              LDR      r1,|L165.1152|
000288  6008              STR      r0,[r1,#0]  ; qwe
                  |L165.650|
;;;1859   									}										
;;;1860   									tout=0;
00028a  2000              MOVS     r0,#0
00028c  4982              LDR      r1,|L165.1176|
00028e  6008              STR      r0,[r1,#0]  ; tout
;;;1861   									k2=0;
000290  4982              LDR      r1,|L165.1180|
000292  6008              STR      r0,[r1,#0]  ; k2
;;;1862   									for(k=0;k<(qwe);k++)
000294  4982              LDR      r1,|L165.1184|
000296  6008              STR      r0,[r1,#0]  ; k
000298  e018              B        |L165.716|
                  |L165.666|
;;;1863   									{
;;;1864   										if(strlen(exception) > 5){
00029a  4877              LDR      r0,|L165.1144|
00029c  f7fffffe          BL       strlen
0002a0  2805              CMP      r0,#5
0002a2  d907              BLS      |L165.692|
;;;1865   										uart_putchar(UART1_BASE_PTR, exception[k]);	
0002a4  4874              LDR      r0,|L165.1144|
0002a6  4a7e              LDR      r2,|L165.1184|
0002a8  6812              LDR      r2,[r2,#0]  ; k
0002aa  5c81              LDRB     r1,[r0,r2]
0002ac  487d              LDR      r0,|L165.1188|
0002ae  f7fffffe          BL       uart_putchar
0002b2  e006              B        |L165.706|
                  |L165.692|
;;;1866   										}
;;;1867   										else{										
;;;1868   										uart_putchar(UART1_BASE_PTR, sd_data[k]);
0002b4  486c              LDR      r0,|L165.1128|
0002b6  4a7a              LDR      r2,|L165.1184|
0002b8  6812              LDR      r2,[r2,#0]  ; k
0002ba  5c81              LDRB     r1,[r0,r2]
0002bc  4879              LDR      r0,|L165.1188|
0002be  f7fffffe          BL       uart_putchar
                  |L165.706|
0002c2  4877              LDR      r0,|L165.1184|
0002c4  6800              LDR      r0,[r0,#0]            ;1862  ; k
0002c6  1c40              ADDS     r0,r0,#1              ;1862
0002c8  4975              LDR      r1,|L165.1184|
0002ca  6008              STR      r0,[r1,#0]            ;1862  ; k
                  |L165.716|
0002cc  4874              LDR      r0,|L165.1184|
0002ce  6800              LDR      r0,[r0,#0]            ;1862  ; k
0002d0  496b              LDR      r1,|L165.1152|
0002d2  6809              LDR      r1,[r1,#0]            ;1862  ; qwe
0002d4  4288              CMP      r0,r1                 ;1862
0002d6  dbe0              BLT      |L165.666|
;;;1869   										}
;;;1870   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
0002d8  210a              MOVS     r1,#0xa
0002da  4872              LDR      r0,|L165.1188|
0002dc  f7fffffe          BL       uart_putchar
0002e0  211a              MOVS     r1,#0x1a
0002e2  4870              LDR      r0,|L165.1188|
0002e4  f7fffffe          BL       uart_putchar
0002e8  211a              MOVS     r1,#0x1a
0002ea  486e              LDR      r0,|L165.1188|
0002ec  f7fffffe          BL       uart_putchar
0002f0  211a              MOVS     r1,#0x1a
0002f2  486c              LDR      r0,|L165.1188|
0002f4  f7fffffe          BL       uart_putchar
0002f8  211a              MOVS     r1,#0x1a
0002fa  486a              LDR      r0,|L165.1188|
0002fc  f7fffffe          BL       uart_putchar
000300  211a              MOVS     r1,#0x1a
000302  4868              LDR      r0,|L165.1188|
000304  f7fffffe          BL       uart_putchar
000308  211a              MOVS     r1,#0x1a
00030a  4866              LDR      r0,|L165.1188|
00030c  f7fffffe          BL       uart_putchar
;;;1871   									do
000310  bf00              NOP      
                  |L165.786|
;;;1872   																{q1=strstr(uart_string_gsm,"SEND OK");
000312  4956              LDR      r1,|L165.1132|
000314  4846              LDR      r0,|L165.1072|
000316  f7fffffe          BL       strstr
00031a  4963              LDR      r1,|L165.1192|
00031c  6008              STR      r0,[r1,#0]  ; q1
;;;1873   																	q2=strstr(uart_string_gsm, "ERROR");
00031e  494f              LDR      r1,|L165.1116|
000320  4843              LDR      r0,|L165.1072|
000322  f7fffffe          BL       strstr
000326  4961              LDR      r1,|L165.1196|
000328  6008              STR      r0,[r1,#0]  ; q2
;;;1874   																		q3=strstr(uart_string_gsm, "FAIL");	
00032a  4951              LDR      r1,|L165.1136|
00032c  4840              LDR      r0,|L165.1072|
00032e  f7fffffe          BL       strstr
000332  495f              LDR      r1,|L165.1200|
000334  6008              STR      r0,[r1,#0]  ; q3
;;;1875   																			q4=strstr(uart_string_gsm, "DEACT");	
000336  494f              LDR      r1,|L165.1140|
000338  483d              LDR      r0,|L165.1072|
00033a  f7fffffe          BL       strstr
00033e  495d              LDR      r1,|L165.1204|
000340  6008              STR      r0,[r1,#0]  ; q4
;;;1876   																	
;;;1877   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) ); //|| (timeout < 1)   
000342  4859              LDR      r0,|L165.1192|
000344  6800              LDR      r0,[r0,#0]  ; q1
000346  2800              CMP      r0,#0
000348  d10f              BNE      |L165.874|
00034a  4858              LDR      r0,|L165.1196|
00034c  6800              LDR      r0,[r0,#0]  ; q2
00034e  2800              CMP      r0,#0
000350  d10b              BNE      |L165.874|
000352  4857              LDR      r0,|L165.1200|
000354  6800              LDR      r0,[r0,#0]  ; q3
000356  2800              CMP      r0,#0
000358  d107              BNE      |L165.874|
00035a  4608              MOV      r0,r1
00035c  6800              LDR      r0,[r0,#0]  ; q4
00035e  2800              CMP      r0,#0
000360  d103              BNE      |L165.874|
000362  484d              LDR      r0,|L165.1176|
000364  6800              LDR      r0,[r0,#0]  ; tout
000366  2808              CMP      r0,#8
000368  ddd3              BLE      |L165.786|
                  |L165.874|
;;;1878   																delay(10);clear();
00036a  200a              MOVS     r0,#0xa
00036c  f7fffffe          BL       delay
000370  f7fffffe          BL       clear
;;;1879   														uart_putchar(UART1_BASE_PTR,0x1A);
000374  211a              MOVS     r1,#0x1a
000376  484b              LDR      r0,|L165.1188|
000378  f7fffffe          BL       uart_putchar
;;;1880   												delay(10);
00037c  200a              MOVS     r0,#0xa
00037e  f7fffffe          BL       delay
;;;1881   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000382  211a              MOVS     r1,#0x1a
000384  4847              LDR      r0,|L165.1188|
000386  f7fffffe          BL       uart_putchar
00038a  211a              MOVS     r1,#0x1a
00038c  4845              LDR      r0,|L165.1188|
00038e  f7fffffe          BL       uart_putchar
000392  211a              MOVS     r1,#0x1a
000394  4843              LDR      r0,|L165.1188|
000396  f7fffffe          BL       uart_putchar
;;;1882   delay(50);
00039a  2032              MOVS     r0,#0x32
00039c  f7fffffe          BL       delay
;;;1883   if(strstr(uart_string_gsm,"SEND OK"))
0003a0  4932              LDR      r1,|L165.1132|
0003a2  4823              LDR      r0,|L165.1072|
0003a4  f7fffffe          BL       strstr
0003a8  2800              CMP      r0,#0
0003aa  d013              BEQ      |L165.980|
;;;1884   {
;;;1885   cursorvaluene=cursor_val(sd_data,enters-3);
0003ac  482d              LDR      r0,|L165.1124|
0003ae  6800              LDR      r0,[r0,#0]  ; enters
0003b0  1ec1              SUBS     r1,r0,#3
0003b2  482d              LDR      r0,|L165.1128|
0003b4  f7fffffe          BL       cursor_val
0003b8  493f              LDR      r1,|L165.1208|
0003ba  6008              STR      r0,[r1,#0]  ; cursorvaluene
;;;1886   cursorvaluepr+=cursorvaluene;
0003bc  4825              LDR      r0,|L165.1108|
0003be  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
0003c0  6809              LDR      r1,[r1,#0]  ; cursorvaluene
0003c2  1840              ADDS     r0,r0,r1
0003c4  4923              LDR      r1,|L165.1108|
0003c6  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1887   k5++;
0003c8  4820              LDR      r0,|L165.1100|
0003ca  6800              LDR      r0,[r0,#0]  ; k5
0003cc  1c40              ADDS     r0,r0,#1
0003ce  491f              LDR      r1,|L165.1100|
0003d0  6008              STR      r0,[r1,#0]  ; k5
0003d2  e3fd              B        |L165.3024|
                  |L165.980|
;;;1888   }
;;;1889   else{remove_all_chars(data, '\n', '\n');
0003d4  220a              MOVS     r2,#0xa
0003d6  4611              MOV      r1,r2
0003d8  4819              LDR      r0,|L165.1088|
0003da  f7fffffe          BL       remove_all_chars
;;;1890   			strcat(data,"CH\n");
0003de  4937              LDR      r1,|L165.1212|
0003e0  4817              LDR      r0,|L165.1088|
0003e2  f7fffffe          BL       strcat
;;;1891   
;;;1892   	delay(100);
0003e6  2064              MOVS     r0,#0x64
0003e8  f7fffffe          BL       delay
;;;1893   		clear();//memset(uart_string_gsm,0,5000);
0003ec  f7fffffe          BL       clear
;;;1894   	
;;;1895   	memset(at_,0,100);
0003f0  2164              MOVS     r1,#0x64
0003f2  4807              LDR      r0,|L165.1040|
0003f4  f7fffffe          BL       __aeabi_memclr
;;;1896   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0003f8  4811              LDR      r0,|L165.1088|
0003fa  f7fffffe          BL       strlen
0003fe  e05f              B        |L165.1216|
                  |L165.1024|
                          DCD      ||fsz||
                  |L165.1028|
                          DCD      times
                  |L165.1032|
                          DCD      int_erval
                  |L165.1036|
                          DCD      temp
                  |L165.1040|
                          DCD      at_
                  |L165.1044|
                          DCD      drive
                  |L165.1048|
                          DCD      ||.conststring||+0x5ec
                  |L165.1052|
                          DCD      tmeout
                  |L165.1056|
                          DCD      ||.conststring||+0x10
                  |L165.1060|
                          DCD      ||.conststring||+0x18
                  |L165.1064|
                          DCD      ||.conststring||+0x2c
                  |L165.1068|
                          DCD      fsize
                  |L165.1072|
                          DCD      uart_string_gsm
                  |L165.1076|
                          DCD      0x44610000
                  |L165.1080|
                          DCD      log0
                  |L165.1084|
                          DCD      0x400ff080
                  |L165.1088|
                          DCD      data
                  |L165.1092|
                          DCD      ||.conststring||+0x40c
                  |L165.1096|
                          DCD      rtcticks2
                  |L165.1100|
                          DCD      ||k5||
                  |L165.1104|
                          DCD      ||.conststring||+0x60c
                  |L165.1108|
                          DCD      cursorvaluepr
                  |L165.1112|
                          DCD      ||.conststring||+0x640
                  |L165.1116|
                          DCD      ||.conststring||+0xe0
                  |L165.1120|
                          DCD      cntendl
                  |L165.1124|
                          DCD      enters
                  |L165.1128|
                          DCD      sd_data
                  |L165.1132|
                          DCD      ||.conststring||+0x668
                  |L165.1136|
                          DCD      ||.conststring||+0x670
                  |L165.1140|
                          DCD      ||.conststring||+0x678
                  |L165.1144|
                          DCD      exception
                  |L165.1148|
                          DCD      ||.conststring||+0x680
                  |L165.1152|
                          DCD      qwe
                  |L165.1156|
                          DCD      ||.conststring||+0x6b0
                  |L165.1160|
                          DCD      ||.conststring||+0x20
                  |L165.1164|
                          DCD      ||.conststring||+0x6b8
                  |L165.1168|
                          DCD      cond
                  |L165.1172|
                          DCD      0x00001388
                  |L165.1176|
                          DCD      tout
                  |L165.1180|
                          DCD      ||k2||
                  |L165.1184|
                          DCD      k
                  |L165.1188|
                          DCD      0x4006b000
                  |L165.1192|
                          DCD      ||q1||
                  |L165.1196|
                          DCD      ||q2||
                  |L165.1200|
                          DCD      ||q3||
                  |L165.1204|
                          DCD      ||q4||
                  |L165.1208|
                          DCD      cursorvaluene
                  |L165.1212|
                          DCD      ||.conststring||+0x410
                  |L165.1216|
0004c0  1c44              ADDS     r4,r0,#1
0004c2  4623              MOV      r3,r4
0004c4  4afd              LDR      r2,|L165.2236|
0004c6  49fe              LDR      r1,|L165.2240|
0004c8  48fe              LDR      r0,|L165.2244|
0004ca  f7fffffe          BL       __2sprintf
;;;1897   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0004ce  2005              MOVS     r0,#5
0004d0  4bfd              LDR      r3,|L165.2248|
0004d2  4afe              LDR      r2,|L165.2252|
0004d4  49fe              LDR      r1,|L165.2256|
0004d6  9000              STR      r0,[sp,#0]
0004d8  48fa              LDR      r0,|L165.2244|
0004da  f7fffffe          BL       send_SD
;;;1898   
;;;1899   	
;;;1900   clear();	
0004de  f7fffffe          BL       clear
;;;1901   									k2=0;									//string array counter for uart 1
0004e2  2000              MOVS     r0,#0
0004e4  49fb              LDR      r1,|L165.2260|
0004e6  6008              STR      r0,[r1,#0]  ; k2
;;;1902   									tout=0;	
0004e8  49fb              LDR      r1,|L165.2264|
0004ea  6008              STR      r0,[r1,#0]  ; tout
;;;1903   		for(k=0;k<strlen(data);k++)
0004ec  49fb              LDR      r1,|L165.2268|
0004ee  6008              STR      r0,[r1,#0]  ; k
0004f0  e00b              B        |L165.1290|
                  |L165.1266|
;;;1904   		{
;;;1905   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0004f2  48fb              LDR      r0,|L165.2272|
0004f4  4af9              LDR      r2,|L165.2268|
0004f6  6812              LDR      r2,[r2,#0]  ; k
0004f8  5c81              LDRB     r1,[r0,r2]
0004fa  48fa              LDR      r0,|L165.2276|
0004fc  f7fffffe          BL       uart_putchar
000500  48f6              LDR      r0,|L165.2268|
000502  6800              LDR      r0,[r0,#0]            ;1903  ; k
000504  1c40              ADDS     r0,r0,#1              ;1903
000506  49f5              LDR      r1,|L165.2268|
000508  6008              STR      r0,[r1,#0]            ;1903  ; k
                  |L165.1290|
00050a  48f5              LDR      r0,|L165.2272|
00050c  f7fffffe          BL       strlen
000510  49f2              LDR      r1,|L165.2268|
000512  6809              LDR      r1,[r1,#0]            ;1903  ; k
000514  4288              CMP      r0,r1                 ;1903
000516  d8ec              BHI      |L165.1266|
;;;1906   		}	
;;;1907   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000518  210a              MOVS     r1,#0xa
00051a  48f2              LDR      r0,|L165.2276|
00051c  f7fffffe          BL       uart_putchar
000520  210a              MOVS     r1,#0xa
000522  48f0              LDR      r0,|L165.2276|
000524  f7fffffe          BL       uart_putchar
000528  210a              MOVS     r1,#0xa
00052a  48ee              LDR      r0,|L165.2276|
00052c  f7fffffe          BL       uart_putchar
000530  210a              MOVS     r1,#0xa
000532  48ec              LDR      r0,|L165.2276|
000534  f7fffffe          BL       uart_putchar
000538  210a              MOVS     r1,#0xa
00053a  48ea              LDR      r0,|L165.2276|
00053c  f7fffffe          BL       uart_putchar
000540  210a              MOVS     r1,#0xa
000542  48e8              LDR      r0,|L165.2276|
000544  f7fffffe          BL       uart_putchar
000548  210a              MOVS     r1,#0xa
00054a  48e6              LDR      r0,|L165.2276|
00054c  f7fffffe          BL       uart_putchar
000550  210a              MOVS     r1,#0xa
000552  48e4              LDR      r0,|L165.2276|
000554  f7fffffe          BL       uart_putchar
000558  210a              MOVS     r1,#0xa
00055a  48e2              LDR      r0,|L165.2276|
00055c  f7fffffe          BL       uart_putchar
000560  210a              MOVS     r1,#0xa
000562  48e0              LDR      r0,|L165.2276|
000564  f7fffffe          BL       uart_putchar
000568  210a              MOVS     r1,#0xa
00056a  48de              LDR      r0,|L165.2276|
00056c  f7fffffe          BL       uart_putchar
000570  210a              MOVS     r1,#0xa
000572  48dc              LDR      r0,|L165.2276|
000574  f7fffffe          BL       uart_putchar
000578  210a              MOVS     r1,#0xa
00057a  48da              LDR      r0,|L165.2276|
00057c  f7fffffe          BL       uart_putchar
000580  210a              MOVS     r1,#0xa
000582  48d8              LDR      r0,|L165.2276|
000584  f7fffffe          BL       uart_putchar
000588  210a              MOVS     r1,#0xa
00058a  48d6              LDR      r0,|L165.2276|
00058c  f7fffffe          BL       uart_putchar
000590  210a              MOVS     r1,#0xa
000592  48d4              LDR      r0,|L165.2276|
000594  f7fffffe          BL       uart_putchar
000598  210a              MOVS     r1,#0xa
00059a  48d2              LDR      r0,|L165.2276|
00059c  f7fffffe          BL       uart_putchar
0005a0  210a              MOVS     r1,#0xa
0005a2  48d0              LDR      r0,|L165.2276|
0005a4  f7fffffe          BL       uart_putchar
0005a8  210a              MOVS     r1,#0xa
0005aa  48ce              LDR      r0,|L165.2276|
0005ac  f7fffffe          BL       uart_putchar
0005b0  210a              MOVS     r1,#0xa
0005b2  48cc              LDR      r0,|L165.2276|
0005b4  f7fffffe          BL       uart_putchar
0005b8  210a              MOVS     r1,#0xa
0005ba  48ca              LDR      r0,|L165.2276|
0005bc  f7fffffe          BL       uart_putchar
0005c0  210a              MOVS     r1,#0xa
0005c2  48c8              LDR      r0,|L165.2276|
0005c4  f7fffffe          BL       uart_putchar
0005c8  210a              MOVS     r1,#0xa
0005ca  48c6              LDR      r0,|L165.2276|
0005cc  f7fffffe          BL       uart_putchar
0005d0  210a              MOVS     r1,#0xa
0005d2  48c4              LDR      r0,|L165.2276|
0005d4  f7fffffe          BL       uart_putchar
0005d8  210a              MOVS     r1,#0xa
0005da  48c2              LDR      r0,|L165.2276|
0005dc  f7fffffe          BL       uart_putchar
0005e0  210a              MOVS     r1,#0xa
0005e2  48c0              LDR      r0,|L165.2276|
0005e4  f7fffffe          BL       uart_putchar
0005e8  210a              MOVS     r1,#0xa
0005ea  48be              LDR      r0,|L165.2276|
0005ec  f7fffffe          BL       uart_putchar
0005f0  210a              MOVS     r1,#0xa
0005f2  48bc              LDR      r0,|L165.2276|
0005f4  f7fffffe          BL       uart_putchar
0005f8  210a              MOVS     r1,#0xa
0005fa  48ba              LDR      r0,|L165.2276|
0005fc  f7fffffe          BL       uart_putchar
000600  210a              MOVS     r1,#0xa
000602  48b8              LDR      r0,|L165.2276|
000604  f7fffffe          BL       uart_putchar
000608  210a              MOVS     r1,#0xa
00060a  48b6              LDR      r0,|L165.2276|
00060c  f7fffffe          BL       uart_putchar
000610  210a              MOVS     r1,#0xa
000612  48b4              LDR      r0,|L165.2276|
000614  f7fffffe          BL       uart_putchar
000618  210a              MOVS     r1,#0xa
00061a  48b2              LDR      r0,|L165.2276|
00061c  f7fffffe          BL       uart_putchar
000620  210a              MOVS     r1,#0xa
000622  48b0              LDR      r0,|L165.2276|
000624  f7fffffe          BL       uart_putchar
000628  210a              MOVS     r1,#0xa
00062a  48ae              LDR      r0,|L165.2276|
00062c  f7fffffe          BL       uart_putchar
000630  210a              MOVS     r1,#0xa
000632  48ac              LDR      r0,|L165.2276|
000634  f7fffffe          BL       uart_putchar
000638  210a              MOVS     r1,#0xa
00063a  48aa              LDR      r0,|L165.2276|
00063c  f7fffffe          BL       uart_putchar
000640  210a              MOVS     r1,#0xa
000642  48a8              LDR      r0,|L165.2276|
000644  f7fffffe          BL       uart_putchar
000648  210a              MOVS     r1,#0xa
00064a  48a6              LDR      r0,|L165.2276|
00064c  f7fffffe          BL       uart_putchar
000650  210a              MOVS     r1,#0xa
000652  48a4              LDR      r0,|L165.2276|
000654  f7fffffe          BL       uart_putchar
000658  210a              MOVS     r1,#0xa
00065a  48a2              LDR      r0,|L165.2276|
00065c  f7fffffe          BL       uart_putchar
000660  210a              MOVS     r1,#0xa
000662  48a0              LDR      r0,|L165.2276|
000664  f7fffffe          BL       uart_putchar
000668  210a              MOVS     r1,#0xa
00066a  489e              LDR      r0,|L165.2276|
00066c  f7fffffe          BL       uart_putchar
000670  210a              MOVS     r1,#0xa
000672  489c              LDR      r0,|L165.2276|
000674  f7fffffe          BL       uart_putchar
000678  210a              MOVS     r1,#0xa
00067a  489a              LDR      r0,|L165.2276|
00067c  f7fffffe          BL       uart_putchar
000680  210a              MOVS     r1,#0xa
000682  4898              LDR      r0,|L165.2276|
000684  f7fffffe          BL       uart_putchar
000688  210a              MOVS     r1,#0xa
00068a  4896              LDR      r0,|L165.2276|
00068c  f7fffffe          BL       uart_putchar
000690  210a              MOVS     r1,#0xa
000692  4894              LDR      r0,|L165.2276|
000694  f7fffffe          BL       uart_putchar
000698  210a              MOVS     r1,#0xa
00069a  4892              LDR      r0,|L165.2276|
00069c  f7fffffe          BL       uart_putchar
0006a0  210a              MOVS     r1,#0xa
0006a2  4890              LDR      r0,|L165.2276|
0006a4  f7fffffe          BL       uart_putchar
0006a8  210a              MOVS     r1,#0xa
0006aa  488e              LDR      r0,|L165.2276|
0006ac  f7fffffe          BL       uart_putchar
0006b0  210a              MOVS     r1,#0xa
0006b2  488c              LDR      r0,|L165.2276|
0006b4  f7fffffe          BL       uart_putchar
0006b8  210a              MOVS     r1,#0xa
0006ba  488a              LDR      r0,|L165.2276|
0006bc  f7fffffe          BL       uart_putchar
0006c0  210a              MOVS     r1,#0xa
0006c2  4888              LDR      r0,|L165.2276|
0006c4  f7fffffe          BL       uart_putchar
0006c8  210a              MOVS     r1,#0xa
0006ca  4886              LDR      r0,|L165.2276|
0006cc  f7fffffe          BL       uart_putchar
0006d0  210a              MOVS     r1,#0xa
0006d2  4884              LDR      r0,|L165.2276|
0006d4  f7fffffe          BL       uart_putchar
0006d8  210a              MOVS     r1,#0xa
0006da  4882              LDR      r0,|L165.2276|
0006dc  f7fffffe          BL       uart_putchar
;;;1908   														//timer counts to wait for characters in uart 1 									
;;;1909   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0006e0  bf00              NOP      
                  |L165.1762|
0006e2  4981              LDR      r1,|L165.2280|
0006e4  4881              LDR      r0,|L165.2284|
0006e6  f7fffffe          BL       strstr
0006ea  2800              CMP      r0,#0
0006ec  d109              BNE      |L165.1794|
0006ee  4976              LDR      r1,|L165.2248|
0006f0  487e              LDR      r0,|L165.2284|
0006f2  f7fffffe          BL       strstr
0006f6  2800              CMP      r0,#0
0006f8  d103              BNE      |L165.1794|
0006fa  4877              LDR      r0,|L165.2264|
0006fc  6800              LDR      r0,[r0,#0]  ; tout
0006fe  2805              CMP      r0,#5
000700  ddef              BLE      |L165.1762|
                  |L165.1794|
;;;1910   									{	}
;;;1911   	                clear();
000702  f7fffffe          BL       clear
;;;1912   									memset(data,0,strlen(data));
000706  4876              LDR      r0,|L165.2272|
000708  f7fffffe          BL       strlen
00070c  4604              MOV      r4,r0
00070e  4621              MOV      r1,r4
000710  4873              LDR      r0,|L165.2272|
000712  f7fffffe          BL       __aeabi_memclr
;;;1913   									clear();
000716  f7fffffe          BL       clear
;;;1914   
;;;1915   								
;;;1916   
;;;1917   
;;;1918   
;;;1919   //	log_it();
;;;1920   
;;;1921   			memset(data,0,strlen(data));
00071a  4871              LDR      r0,|L165.2272|
00071c  f7fffffe          BL       strlen
000720  4604              MOV      r4,r0
000722  4621              MOV      r1,r4
000724  486e              LDR      r0,|L165.2272|
000726  f7fffffe          BL       __aeabi_memclr
;;;1922   //*********************************tcp_initialization();***************************************//
;;;1923   
;;;1924   	
;;;1925   msg_sim800(); 
00072a  f7fffffe          BL       msg_sim800
;;;1926   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00072e  2005              MOVS     r0,#5
000730  4b65              LDR      r3,|L165.2248|
000732  4a66              LDR      r2,|L165.2252|
000734  496e              LDR      r1,|L165.2288|
000736  9000              STR      r0,[sp,#0]
000738  486e              LDR      r0,|L165.2292|
00073a  f7fffffe          BL       send_GSM
;;;1927   delay(100);
00073e  2064              MOVS     r0,#0x64
000740  f7fffffe          BL       delay
;;;1928   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
000744  2004              MOVS     r0,#4
000746  4b60              LDR      r3,|L165.2248|
000748  4a6b              LDR      r2,|L165.2296|
00074a  4969              LDR      r1,|L165.2288|
00074c  9000              STR      r0,[sp,#0]
00074e  486b              LDR      r0,|L165.2300|
000750  f7fffffe          BL       send_GSM
;;;1929   GPS_COLLECT2();
000754  f7fffffe          BL       GPS_COLLECT2
;;;1930   strcat(data,"CH\n");		
000758  4969              LDR      r1,|L165.2304|
00075a  4861              LDR      r0,|L165.2272|
00075c  f7fffffe          BL       strcat
;;;1931   GPS_COLLECT2();
000760  f7fffffe          BL       GPS_COLLECT2
;;;1932   strcat(data,"CH\n");	
000764  4966              LDR      r1,|L165.2304|
000766  485e              LDR      r0,|L165.2272|
000768  f7fffffe          BL       strcat
;;;1933   GPS_COLLECT2();
00076c  f7fffffe          BL       GPS_COLLECT2
;;;1934   strcat(data,"CH\n");
000770  4963              LDR      r1,|L165.2304|
000772  485b              LDR      r0,|L165.2272|
000774  f7fffffe          BL       strcat
;;;1935   cond201=(strstr(uart_string_gsm, "OK"));
000778  495d              LDR      r1,|L165.2288|
00077a  485c              LDR      r0,|L165.2284|
00077c  f7fffffe          BL       strstr
000780  4960              LDR      r1,|L165.2308|
000782  6008              STR      r0,[r1,#0]  ; cond201
;;;1936   cond200=(strstr(uart_string_gsm, "ERROR"));
000784  4950              LDR      r1,|L165.2248|
000786  4859              LDR      r0,|L165.2284|
000788  f7fffffe          BL       strstr
00078c  495e              LDR      r1,|L165.2312|
00078e  6008              STR      r0,[r1,#0]  ; cond200
;;;1937   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
000790  485c              LDR      r0,|L165.2308|
000792  6800              LDR      r0,[r0,#0]  ; cond201
000794  2800              CMP      r0,#0
000796  d101              BNE      |L165.1948|
000798  2001              MOVS     r0,#1
00079a  e000              B        |L165.1950|
                  |L165.1948|
00079c  2000              MOVS     r0,#0
                  |L165.1950|
00079e  2800              CMP      r0,#0
                  |L165.1952|
0007a0  d06d              BEQ      |L165.2174|
0007a2  4859              LDR      r0,|L165.2312|
0007a4  6800              LDR      r0,[r0,#0]  ; cond200
0007a6  2800              CMP      r0,#0
0007a8  d101              BNE      |L165.1966|
0007aa  2001              MOVS     r0,#1
0007ac  e000              B        |L165.1968|
                  |L165.1966|
0007ae  2000              MOVS     r0,#0
                  |L165.1968|
0007b0  2800              CMP      r0,#0
0007b2  d0f5              BEQ      |L165.1952|
0007b4  4855              LDR      r0,|L165.2316|
0007b6  6800              LDR      r0,[r0,#0]  ; sleep_flag
0007b8  2801              CMP      r0,#1
0007ba  d0f1              BEQ      |L165.1952|
;;;1938   {
;;;1939   delay(100);
0007bc  2064              MOVS     r0,#0x64
0007be  f7fffffe          BL       delay
;;;1940   clear();//memset(uart_string_gsm,0,5000);
0007c2  f7fffffe          BL       clear
;;;1941   memset(at_,0,100);
0007c6  2164              MOVS     r1,#0x64
0007c8  483e              LDR      r0,|L165.2244|
0007ca  f7fffffe          BL       __aeabi_memclr
;;;1942   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0007ce  4844              LDR      r0,|L165.2272|
0007d0  f7fffffe          BL       strlen
0007d4  1c44              ADDS     r4,r0,#1
0007d6  4623              MOV      r3,r4
0007d8  4a38              LDR      r2,|L165.2236|
0007da  4939              LDR      r1,|L165.2240|
0007dc  4839              LDR      r0,|L165.2244|
0007de  f7fffffe          BL       __2sprintf
;;;1943   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0007e2  2005              MOVS     r0,#5
0007e4  4b38              LDR      r3,|L165.2248|
0007e6  4a39              LDR      r2,|L165.2252|
0007e8  4939              LDR      r1,|L165.2256|
0007ea  9000              STR      r0,[sp,#0]
0007ec  4835              LDR      r0,|L165.2244|
0007ee  f7fffffe          BL       send_SD
;;;1944   clear();	
0007f2  f7fffffe          BL       clear
;;;1945   k2=0;									//string array counter for uart 1
0007f6  2000              MOVS     r0,#0
0007f8  4936              LDR      r1,|L165.2260|
0007fa  6008              STR      r0,[r1,#0]  ; k2
;;;1946   tout=0;	
0007fc  4936              LDR      r1,|L165.2264|
0007fe  6008              STR      r0,[r1,#0]  ; tout
;;;1947   for(k=0;k<strlen(data);k++)
000800  4936              LDR      r1,|L165.2268|
000802  6008              STR      r0,[r1,#0]  ; k
000804  e00b              B        |L165.2078|
                  |L165.2054|
;;;1948   {
;;;1949   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000806  4836              LDR      r0,|L165.2272|
000808  4a34              LDR      r2,|L165.2268|
00080a  6812              LDR      r2,[r2,#0]  ; k
00080c  5c81              LDRB     r1,[r0,r2]
00080e  4835              LDR      r0,|L165.2276|
000810  f7fffffe          BL       uart_putchar
000814  4831              LDR      r0,|L165.2268|
000816  6800              LDR      r0,[r0,#0]            ;1947  ; k
000818  1c40              ADDS     r0,r0,#1              ;1947
00081a  4930              LDR      r1,|L165.2268|
00081c  6008              STR      r0,[r1,#0]            ;1947  ; k
                  |L165.2078|
00081e  4830              LDR      r0,|L165.2272|
000820  f7fffffe          BL       strlen
000824  492d              LDR      r1,|L165.2268|
000826  6809              LDR      r1,[r1,#0]            ;1947  ; k
000828  4288              CMP      r0,r1                 ;1947
00082a  d8ec              BHI      |L165.2054|
;;;1950   }	
;;;1951   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00082c  210a              MOVS     r1,#0xa
00082e  482d              LDR      r0,|L165.2276|
000830  f7fffffe          BL       uart_putchar
000834  210a              MOVS     r1,#0xa
000836  482b              LDR      r0,|L165.2276|
000838  f7fffffe          BL       uart_putchar
00083c  210a              MOVS     r1,#0xa
00083e  4829              LDR      r0,|L165.2276|
000840  f7fffffe          BL       uart_putchar
000844  210a              MOVS     r1,#0xa
000846  4827              LDR      r0,|L165.2276|
000848  f7fffffe          BL       uart_putchar
00084c  210a              MOVS     r1,#0xa
00084e  4825              LDR      r0,|L165.2276|
000850  f7fffffe          BL       uart_putchar
000854  210a              MOVS     r1,#0xa
000856  4823              LDR      r0,|L165.2276|
000858  f7fffffe          BL       uart_putchar
00085c  210a              MOVS     r1,#0xa
00085e  4821              LDR      r0,|L165.2276|
000860  f7fffffe          BL       uart_putchar
000864  210a              MOVS     r1,#0xa
000866  481f              LDR      r0,|L165.2276|
000868  f7fffffe          BL       uart_putchar
00086c  210a              MOVS     r1,#0xa
00086e  481d              LDR      r0,|L165.2276|
000870  f7fffffe          BL       uart_putchar
000874  210a              MOVS     r1,#0xa
000876  481b              LDR      r0,|L165.2276|
000878  e002              B        |L165.2176|
                  |L165.2170|
00087a  e3fd              B        |L165.4216|
                  |L165.2172|
00087c  e3a0              B        |L165.4032|
                  |L165.2174|
00087e  e112              B        |L165.2726|
                  |L165.2176|
000880  f7fffffe          BL       uart_putchar
000884  210a              MOVS     r1,#0xa
000886  4817              LDR      r0,|L165.2276|
000888  f7fffffe          BL       uart_putchar
00088c  210a              MOVS     r1,#0xa
00088e  4815              LDR      r0,|L165.2276|
000890  f7fffffe          BL       uart_putchar
000894  210a              MOVS     r1,#0xa
000896  4813              LDR      r0,|L165.2276|
000898  f7fffffe          BL       uart_putchar
00089c  210a              MOVS     r1,#0xa
00089e  4811              LDR      r0,|L165.2276|
0008a0  f7fffffe          BL       uart_putchar
0008a4  210a              MOVS     r1,#0xa
0008a6  480f              LDR      r0,|L165.2276|
0008a8  f7fffffe          BL       uart_putchar
0008ac  210a              MOVS     r1,#0xa
0008ae  480d              LDR      r0,|L165.2276|
0008b0  f7fffffe          BL       uart_putchar
0008b4  210a              MOVS     r1,#0xa
0008b6  480b              LDR      r0,|L165.2276|
0008b8  e02a              B        |L165.2320|
0008ba  0000              DCW      0x0000
                  |L165.2236|
                          DCD      drive
                  |L165.2240|
                          DCD      ||.conststring||+0x414
                  |L165.2244|
                          DCD      at_
                  |L165.2248|
                          DCD      ||.conststring||+0xe0
                  |L165.2252|
                          DCD      ||.conststring||+0x18
                  |L165.2256|
                          DCD      ||.conststring||+0x20
                  |L165.2260|
                          DCD      ||k2||
                  |L165.2264|
                          DCD      tout
                  |L165.2268|
                          DCD      k
                  |L165.2272|
                          DCD      data
                  |L165.2276|
                          DCD      0x4006b000
                  |L165.2280|
                          DCD      ||.conststring||+0x70
                  |L165.2284|
                          DCD      uart_string_gsm
                  |L165.2288|
                          DCD      ||.conststring||+0x2c
                  |L165.2292|
                          DCD      ||.conststring||+0x6c8
                  |L165.2296|
                          DCD      ||.conststring||+0x6d8
                  |L165.2300|
                          DCD      ||.conststring||+0x6ec
                  |L165.2304|
                          DCD      ||.conststring||+0x410
                  |L165.2308|
                          DCD      cond201
                  |L165.2312|
                          DCD      cond200
                  |L165.2316|
                          DCD      sleep_flag
                  |L165.2320|
000910  f7fffffe          BL       uart_putchar
000914  210a              MOVS     r1,#0xa
000916  48f9              LDR      r0,|L165.3324|
000918  f7fffffe          BL       uart_putchar
00091c  210a              MOVS     r1,#0xa
00091e  48f7              LDR      r0,|L165.3324|
000920  f7fffffe          BL       uart_putchar
000924  210a              MOVS     r1,#0xa
000926  48f5              LDR      r0,|L165.3324|
000928  f7fffffe          BL       uart_putchar
00092c  210a              MOVS     r1,#0xa
00092e  48f3              LDR      r0,|L165.3324|
000930  f7fffffe          BL       uart_putchar
000934  210a              MOVS     r1,#0xa
000936  48f1              LDR      r0,|L165.3324|
000938  f7fffffe          BL       uart_putchar
00093c  210a              MOVS     r1,#0xa
00093e  48ef              LDR      r0,|L165.3324|
000940  f7fffffe          BL       uart_putchar
000944  210a              MOVS     r1,#0xa
000946  48ed              LDR      r0,|L165.3324|
000948  f7fffffe          BL       uart_putchar
00094c  210a              MOVS     r1,#0xa
00094e  48eb              LDR      r0,|L165.3324|
000950  f7fffffe          BL       uart_putchar
000954  210a              MOVS     r1,#0xa
000956  48e9              LDR      r0,|L165.3324|
000958  f7fffffe          BL       uart_putchar
00095c  210a              MOVS     r1,#0xa
00095e  48e7              LDR      r0,|L165.3324|
000960  f7fffffe          BL       uart_putchar
000964  210a              MOVS     r1,#0xa
000966  48e5              LDR      r0,|L165.3324|
000968  f7fffffe          BL       uart_putchar
00096c  210a              MOVS     r1,#0xa
00096e  48e3              LDR      r0,|L165.3324|
000970  f7fffffe          BL       uart_putchar
000974  210a              MOVS     r1,#0xa
000976  48e1              LDR      r0,|L165.3324|
000978  f7fffffe          BL       uart_putchar
00097c  210a              MOVS     r1,#0xa
00097e  48df              LDR      r0,|L165.3324|
000980  f7fffffe          BL       uart_putchar
000984  210a              MOVS     r1,#0xa
000986  48dd              LDR      r0,|L165.3324|
000988  f7fffffe          BL       uart_putchar
00098c  210a              MOVS     r1,#0xa
00098e  48db              LDR      r0,|L165.3324|
000990  f7fffffe          BL       uart_putchar
000994  210a              MOVS     r1,#0xa
000996  48d9              LDR      r0,|L165.3324|
000998  f7fffffe          BL       uart_putchar
00099c  210a              MOVS     r1,#0xa
00099e  48d7              LDR      r0,|L165.3324|
0009a0  f7fffffe          BL       uart_putchar
0009a4  210a              MOVS     r1,#0xa
0009a6  48d5              LDR      r0,|L165.3324|
0009a8  f7fffffe          BL       uart_putchar
0009ac  210a              MOVS     r1,#0xa
0009ae  48d3              LDR      r0,|L165.3324|
0009b0  f7fffffe          BL       uart_putchar
0009b4  210a              MOVS     r1,#0xa
0009b6  48d1              LDR      r0,|L165.3324|
0009b8  f7fffffe          BL       uart_putchar
0009bc  210a              MOVS     r1,#0xa
0009be  48cf              LDR      r0,|L165.3324|
0009c0  f7fffffe          BL       uart_putchar
0009c4  210a              MOVS     r1,#0xa
0009c6  48cd              LDR      r0,|L165.3324|
0009c8  f7fffffe          BL       uart_putchar
0009cc  210a              MOVS     r1,#0xa
0009ce  48cb              LDR      r0,|L165.3324|
0009d0  f7fffffe          BL       uart_putchar
0009d4  210a              MOVS     r1,#0xa
0009d6  48c9              LDR      r0,|L165.3324|
0009d8  f7fffffe          BL       uart_putchar
0009dc  210a              MOVS     r1,#0xa
0009de  48c7              LDR      r0,|L165.3324|
0009e0  f7fffffe          BL       uart_putchar
0009e4  210a              MOVS     r1,#0xa
0009e6  48c5              LDR      r0,|L165.3324|
0009e8  f7fffffe          BL       uart_putchar
0009ec  210a              MOVS     r1,#0xa
0009ee  48c3              LDR      r0,|L165.3324|
0009f0  f7fffffe          BL       uart_putchar
0009f4  210a              MOVS     r1,#0xa
0009f6  48c1              LDR      r0,|L165.3324|
0009f8  f7fffffe          BL       uart_putchar
0009fc  210a              MOVS     r1,#0xa
0009fe  48bf              LDR      r0,|L165.3324|
000a00  f7fffffe          BL       uart_putchar
000a04  210a              MOVS     r1,#0xa
000a06  48bd              LDR      r0,|L165.3324|
000a08  f7fffffe          BL       uart_putchar
000a0c  210a              MOVS     r1,#0xa
000a0e  48bb              LDR      r0,|L165.3324|
000a10  f7fffffe          BL       uart_putchar
000a14  210a              MOVS     r1,#0xa
000a16  48b9              LDR      r0,|L165.3324|
000a18  f7fffffe          BL       uart_putchar
000a1c  210a              MOVS     r1,#0xa
000a1e  48b7              LDR      r0,|L165.3324|
000a20  f7fffffe          BL       uart_putchar
000a24  210a              MOVS     r1,#0xa
000a26  48b5              LDR      r0,|L165.3324|
000a28  f7fffffe          BL       uart_putchar
000a2c  210a              MOVS     r1,#0xa
000a2e  48b3              LDR      r0,|L165.3324|
000a30  f7fffffe          BL       uart_putchar
000a34  210a              MOVS     r1,#0xa
000a36  48b1              LDR      r0,|L165.3324|
000a38  f7fffffe          BL       uart_putchar
000a3c  210a              MOVS     r1,#0xa
000a3e  48af              LDR      r0,|L165.3324|
000a40  f7fffffe          BL       uart_putchar
000a44  210a              MOVS     r1,#0xa
000a46  48ad              LDR      r0,|L165.3324|
000a48  f7fffffe          BL       uart_putchar
000a4c  210a              MOVS     r1,#0xa
000a4e  48ab              LDR      r0,|L165.3324|
000a50  f7fffffe          BL       uart_putchar
;;;1952   									//memset(data,0,1000);
;;;1953   														//timer counts to wait for characters in uart 1 									
;;;1954   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000a54  bf00              NOP      
                  |L165.2646|
000a56  49aa              LDR      r1,|L165.3328|
000a58  48aa              LDR      r0,|L165.3332|
000a5a  f7fffffe          BL       strstr
000a5e  2800              CMP      r0,#0
000a60  d109              BNE      |L165.2678|
000a62  49a9              LDR      r1,|L165.3336|
000a64  48a7              LDR      r0,|L165.3332|
000a66  f7fffffe          BL       strstr
000a6a  2800              CMP      r0,#0
000a6c  d103              BNE      |L165.2678|
000a6e  48a7              LDR      r0,|L165.3340|
000a70  6800              LDR      r0,[r0,#0]  ; tout
000a72  2805              CMP      r0,#5
000a74  ddef              BLE      |L165.2646|
                  |L165.2678|
;;;1955   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1956   									}
;;;1957   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000a76  f7fffffe          BL       clear
;;;1958   									//clear();
;;;1959   									memset(data,0,strlen(data));
000a7a  48a5              LDR      r0,|L165.3344|
000a7c  f7fffffe          BL       strlen
000a80  4604              MOV      r4,r0
000a82  4621              MOV      r1,r4
000a84  48a2              LDR      r0,|L165.3344|
000a86  f7fffffe          BL       __aeabi_memclr
;;;1960   									clear();
000a8a  f7fffffe          BL       clear
;;;1961   									RESET_OFF;delay(100);
000a8e  2020              MOVS     r0,#0x20
000a90  49a0              LDR      r1,|L165.3348|
000a92  6088              STR      r0,[r1,#8]
000a94  2064              MOVS     r0,#0x64
000a96  f7fffffe          BL       delay
;;;1962   									RESET_ON;delay(100);		
000a9a  2020              MOVS     r0,#0x20
000a9c  499d              LDR      r1,|L165.3348|
000a9e  6048              STR      r0,[r1,#4]
000aa0  2064              MOVS     r0,#0x64
000aa2  f7fffffe          BL       delay
                  |L165.2726|
;;;1963   }
;;;1964   	
;;;1965   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000aa6  2004              MOVS     r0,#4
000aa8  4b9b              LDR      r3,|L165.3352|
000aaa  4a9c              LDR      r2,|L165.3356|
000aac  499c              LDR      r1,|L165.3360|
000aae  9000              STR      r0,[sp,#0]
000ab0  489c              LDR      r0,|L165.3364|
000ab2  f7fffffe          BL       send_GSM
;;;1966   GPS_COLLECT2();
000ab6  f7fffffe          BL       GPS_COLLECT2
;;;1967   strcat(data,"CH\n");	
000aba  499b              LDR      r1,|L165.3368|
000abc  4894              LDR      r0,|L165.3344|
000abe  f7fffffe          BL       strcat
;;;1968   memset(at_,0,100);
000ac2  2164              MOVS     r1,#0x64
000ac4  4899              LDR      r0,|L165.3372|
000ac6  f7fffffe          BL       __aeabi_memclr
;;;1969   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000aca  4a99              LDR      r2,|L165.3376|
000acc  4999              LDR      r1,|L165.3380|
000ace  4897              LDR      r0,|L165.3372|
000ad0  f7fffffe          BL       __2sprintf
;;;1970   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000ad4  4898              LDR      r0,|L165.3384|
000ad6  6800              LDR      r0,[r0,#0]  ; tmeout
000ad8  4b8f              LDR      r3,|L165.3352|
000ada  4a90              LDR      r2,|L165.3356|
000adc  4990              LDR      r1,|L165.3360|
000ade  9000              STR      r0,[sp,#0]
000ae0  4892              LDR      r0,|L165.3372|
000ae2  f7fffffe          BL       send_GSM
;;;1971   msg_sim800(); 
000ae6  f7fffffe          BL       msg_sim800
;;;1972   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000aea  2004              MOVS     r0,#4
000aec  4b93              LDR      r3,|L165.3388|
000aee  4a8b              LDR      r2,|L165.3356|
000af0  498b              LDR      r1,|L165.3360|
000af2  9000              STR      r0,[sp,#0]
000af4  4892              LDR      r0,|L165.3392|
000af6  f7fffffe          BL       send_GSM
;;;1973   GPS_COLLECT2();
000afa  f7fffffe          BL       GPS_COLLECT2
;;;1974   strcat(data,"CH\n");	
000afe  498a              LDR      r1,|L165.3368|
000b00  4883              LDR      r0,|L165.3344|
000b02  f7fffffe          BL       strcat
;;;1975   GPS_COLLECT2();
000b06  f7fffffe          BL       GPS_COLLECT2
;;;1976   strcat(data,"CH\n");	
000b0a  4987              LDR      r1,|L165.3368|
000b0c  4880              LDR      r0,|L165.3344|
000b0e  f7fffffe          BL       strcat
;;;1977   
;;;1978   
;;;1979   msg_sim800(); 
000b12  f7fffffe          BL       msg_sim800
;;;1980   GPS_COLLECT2();
000b16  f7fffffe          BL       GPS_COLLECT2
;;;1981   strcat(data,"CH\n");	
000b1a  4983              LDR      r1,|L165.3368|
000b1c  487c              LDR      r0,|L165.3344|
000b1e  f7fffffe          BL       strcat
;;;1982   send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);		
000b22  2001              MOVS     r0,#1
000b24  4b85              LDR      r3,|L165.3388|
000b26  4a7d              LDR      r2,|L165.3356|
000b28  497d              LDR      r1,|L165.3360|
000b2a  9000              STR      r0,[sp,#0]
000b2c  4885              LDR      r0,|L165.3396|
000b2e  f7fffffe          BL       send_GSM
;;;1983   if(strstr(uart_string_gsm,"0.0.0.0"))
000b32  4985              LDR      r1,|L165.3400|
000b34  4873              LDR      r0,|L165.3332|
000b36  f7fffffe          BL       strstr
000b3a  2800              CMP      r0,#0
000b3c  d001              BEQ      |L165.2882|
;;;1984   {
;;;1985   	reset_func();
000b3e  f7fffffe          BL       reset_func
                  |L165.2882|
;;;1986   }	
;;;1987   
;;;1988   
;;;1989   msg_sim800(); 
000b42  f7fffffe          BL       msg_sim800
;;;1990   
;;;1991   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000b46  4b81              LDR      r3,|L165.3404|
000b48  4a81              LDR      r2,|L165.3408|
000b4a  4982              LDR      r1,|L165.3412|
000b4c  4877              LDR      r0,|L165.3372|
000b4e  f7fffffe          BL       __2sprintf
;;;1992   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000b52  4879              LDR      r0,|L165.3384|
000b54  6800              LDR      r0,[r0,#0]  ; tmeout
000b56  4b70              LDR      r3,|L165.3352|
000b58  4a6b              LDR      r2,|L165.3336|
000b5a  497f              LDR      r1,|L165.3416|
000b5c  9000              STR      r0,[sp,#0]
000b5e  4873              LDR      r0,|L165.3372|
000b60  f7fffffe          BL       send_GSM
;;;1993   						clear();
000b64  f7fffffe          BL       clear
;;;1994   						
;;;1995   						
;;;1996   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
000b68  4873              LDR      r0,|L165.3384|
000b6a  6800              LDR      r0,[r0,#0]  ; tmeout
000b6c  4b7b              LDR      r3,|L165.3420|
000b6e  4a66              LDR      r2,|L165.3336|
000b70  497b              LDR      r1,|L165.3424|
000b72  9000              STR      r0,[sp,#0]
000b74  487b              LDR      r0,|L165.3428|
000b76  f7fffffe          BL       send_GSM
;;;1997   									
;;;1998   //*********************************tcp_initialization ends*************************************//									
;;;1999   			if(mystrstr(uart_string_gsm,'>')){
000b7a  213e              MOVS     r1,#0x3e
000b7c  4861              LDR      r0,|L165.3332|
000b7e  f7fffffe          BL       mystrstr
000b82  2800              CMP      r0,#0
000b84  d07e              BEQ      |L165.3204|
;;;2000   									clear();
000b86  f7fffffe          BL       clear
;;;2001   									memset(uart_string_gsm,0,5000);
000b8a  4977              LDR      r1,|L165.3432|
000b8c  485d              LDR      r0,|L165.3332|
000b8e  f7fffffe          BL       __aeabi_memclr
;;;2002   									qwe=strlen(data);
000b92  485f              LDR      r0,|L165.3344|
000b94  f7fffffe          BL       strlen
000b98  4974              LDR      r1,|L165.3436|
000b9a  6008              STR      r0,[r1,#0]  ; qwe
;;;2003   									tout=0;
000b9c  2000              MOVS     r0,#0
000b9e  495b              LDR      r1,|L165.3340|
000ba0  6008              STR      r0,[r1,#0]  ; tout
;;;2004   									k2=0;
000ba2  4973              LDR      r1,|L165.3440|
000ba4  6008              STR      r0,[r1,#0]  ; k2
;;;2005   									for(k=0;k<(qwe);k++)
000ba6  4973              LDR      r1,|L165.3444|
000ba8  6008              STR      r0,[r1,#0]  ; k
000baa  e00b              B        |L165.3012|
                  |L165.2988|
;;;2006   									{
;;;2007   										uart_putchar(UART1_BASE_PTR, data[k]);
000bac  4858              LDR      r0,|L165.3344|
000bae  4a71              LDR      r2,|L165.3444|
000bb0  6812              LDR      r2,[r2,#0]  ; k
000bb2  5c81              LDRB     r1,[r0,r2]
000bb4  4851              LDR      r0,|L165.3324|
000bb6  f7fffffe          BL       uart_putchar
000bba  486e              LDR      r0,|L165.3444|
000bbc  6800              LDR      r0,[r0,#0]            ;2005  ; k
000bbe  1c40              ADDS     r0,r0,#1              ;2005
000bc0  496c              LDR      r1,|L165.3444|
000bc2  6008              STR      r0,[r1,#0]            ;2005  ; k
                  |L165.3012|
000bc4  486b              LDR      r0,|L165.3444|
000bc6  6800              LDR      r0,[r0,#0]            ;2005  ; k
000bc8  4968              LDR      r1,|L165.3436|
000bca  6809              LDR      r1,[r1,#0]            ;2005  ; qwe
000bcc  4288              CMP      r0,r1                 ;2005
000bce  e000              B        |L165.3026|
                  |L165.3024|
000bd0  e3fe              B        |L165.5072|
                  |L165.3026|
000bd2  dbeb              BLT      |L165.2988|
;;;2008   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
000bd4  210a              MOVS     r1,#0xa
000bd6  4849              LDR      r0,|L165.3324|
000bd8  f7fffffe          BL       uart_putchar
000bdc  211a              MOVS     r1,#0x1a
000bde  4847              LDR      r0,|L165.3324|
000be0  f7fffffe          BL       uart_putchar
000be4  211a              MOVS     r1,#0x1a
000be6  4845              LDR      r0,|L165.3324|
000be8  f7fffffe          BL       uart_putchar
000bec  211a              MOVS     r1,#0x1a
000bee  4843              LDR      r0,|L165.3324|
000bf0  f7fffffe          BL       uart_putchar
000bf4  211a              MOVS     r1,#0x1a
000bf6  4841              LDR      r0,|L165.3324|
000bf8  f7fffffe          BL       uart_putchar
000bfc  211a              MOVS     r1,#0x1a
000bfe  483f              LDR      r0,|L165.3324|
000c00  f7fffffe          BL       uart_putchar
000c04  211a              MOVS     r1,#0x1a
000c06  483d              LDR      r0,|L165.3324|
000c08  f7fffffe          BL       uart_putchar
;;;2009   															do
000c0c  bf00              NOP      
                  |L165.3086|
;;;2010   																{q1=strstr(uart_string_gsm,"SEND OK");
000c0e  495a              LDR      r1,|L165.3448|
000c10  483c              LDR      r0,|L165.3332|
000c12  f7fffffe          BL       strstr
000c16  4959              LDR      r1,|L165.3452|
000c18  6008              STR      r0,[r1,#0]  ; q1
;;;2011   																	q2=strstr(uart_string_gsm, "ERROR");
000c1a  493b              LDR      r1,|L165.3336|
000c1c  4839              LDR      r0,|L165.3332|
000c1e  f7fffffe          BL       strstr
000c22  4957              LDR      r1,|L165.3456|
000c24  6008              STR      r0,[r1,#0]  ; q2
;;;2012   																		q3=strstr(uart_string_gsm, "FAIL");	
000c26  4957              LDR      r1,|L165.3460|
000c28  4836              LDR      r0,|L165.3332|
000c2a  f7fffffe          BL       strstr
000c2e  4956              LDR      r1,|L165.3464|
000c30  6008              STR      r0,[r1,#0]  ; q3
;;;2013   																			q4=strstr(uart_string_gsm, "DEACT");	
000c32  4942              LDR      r1,|L165.3388|
000c34  4833              LDR      r0,|L165.3332|
000c36  f7fffffe          BL       strstr
000c3a  4954              LDR      r1,|L165.3468|
000c3c  6008              STR      r0,[r1,#0]  ; q4
;;;2014   																	
;;;2015   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
000c3e  484f              LDR      r0,|L165.3452|
000c40  6800              LDR      r0,[r0,#0]  ; q1
000c42  2800              CMP      r0,#0
000c44  d10f              BNE      |L165.3174|
000c46  484e              LDR      r0,|L165.3456|
000c48  6800              LDR      r0,[r0,#0]  ; q2
000c4a  2800              CMP      r0,#0
000c4c  d10b              BNE      |L165.3174|
000c4e  484e              LDR      r0,|L165.3464|
000c50  6800              LDR      r0,[r0,#0]  ; q3
000c52  2800              CMP      r0,#0
000c54  d107              BNE      |L165.3174|
000c56  4608              MOV      r0,r1
000c58  6800              LDR      r0,[r0,#0]  ; q4
000c5a  2800              CMP      r0,#0
000c5c  d103              BNE      |L165.3174|
000c5e  482b              LDR      r0,|L165.3340|
000c60  6800              LDR      r0,[r0,#0]  ; tout
000c62  2808              CMP      r0,#8
000c64  ddd3              BLE      |L165.3086|
                  |L165.3174|
;;;2016   															
;;;2017   																			delay(10);clear();
000c66  200a              MOVS     r0,#0xa
000c68  f7fffffe          BL       delay
000c6c  f7fffffe          BL       clear
;;;2018   														uart_putchar(UART1_BASE_PTR,0x1A);
000c70  211a              MOVS     r1,#0x1a
000c72  4822              LDR      r0,|L165.3324|
000c74  f7fffffe          BL       uart_putchar
;;;2019   												delay(10);
000c78  200a              MOVS     r0,#0xa
000c7a  f7fffffe          BL       delay
;;;2020   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000c7e  211a              MOVS     r1,#0x1a
000c80  481e              LDR      r0,|L165.3324|
000c82  e000              B        |L165.3206|
                  |L165.3204|
000c84  e19d              B        |L165.4034|
                  |L165.3206|
000c86  f7fffffe          BL       uart_putchar
000c8a  211a              MOVS     r1,#0x1a
000c8c  481b              LDR      r0,|L165.3324|
000c8e  f7fffffe          BL       uart_putchar
000c92  211a              MOVS     r1,#0x1a
000c94  4819              LDR      r0,|L165.3324|
000c96  f7fffffe          BL       uart_putchar
;;;2021   delay(20);
000c9a  2014              MOVS     r0,#0x14
000c9c  f7fffffe          BL       delay
;;;2022   if(!strstr(uart_string_gsm,"SEND OK")){
000ca0  4935              LDR      r1,|L165.3448|
000ca2  4818              LDR      r0,|L165.3332|
000ca4  f7fffffe          BL       strstr
000ca8  2800              CMP      r0,#0
000caa  d001              BEQ      |L165.3248|
000cac  f001f9d0          BL       |L165.8272|
                  |L165.3248|
;;;2023   
;;;2024   
;;;2025   	delay(100);
000cb0  2064              MOVS     r0,#0x64
000cb2  f7fffffe          BL       delay
;;;2026   		clear();//memset(uart_string_gsm,0,5000);
000cb6  f7fffffe          BL       clear
;;;2027   	
;;;2028   	memset(at_,0,100);
000cba  2164              MOVS     r1,#0x64
000cbc  481b              LDR      r0,|L165.3372|
000cbe  f7fffffe          BL       __aeabi_memclr
;;;2029   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000cc2  4813              LDR      r0,|L165.3344|
000cc4  f7fffffe          BL       strlen
000cc8  1c44              ADDS     r4,r0,#1
000cca  4623              MOV      r3,r4
000ccc  4a30              LDR      r2,|L165.3472|
000cce  4931              LDR      r1,|L165.3476|
000cd0  4816              LDR      r0,|L165.3372|
000cd2  f7fffffe          BL       __2sprintf
;;;2030   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000cd6  2005              MOVS     r0,#5
000cd8  4b0b              LDR      r3,|L165.3336|
000cda  4a10              LDR      r2,|L165.3356|
000cdc  4920              LDR      r1,|L165.3424|
000cde  9000              STR      r0,[sp,#0]
000ce0  4812              LDR      r0,|L165.3372|
000ce2  f7fffffe          BL       send_SD
;;;2031   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2032   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2033   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2034   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2035   //	}
;;;2036   	
;;;2037   clear();	
000ce6  f7fffffe          BL       clear
;;;2038   									k2=0;									//string array counter for uart 1
000cea  2000              MOVS     r0,#0
000cec  4920              LDR      r1,|L165.3440|
000cee  6008              STR      r0,[r1,#0]  ; k2
;;;2039   									tout=0;	
000cf0  4906              LDR      r1,|L165.3340|
000cf2  6008              STR      r0,[r1,#0]  ; tout
;;;2040   		for(k=0;k<strlen(data);k++)
000cf4  491f              LDR      r1,|L165.3444|
000cf6  6008              STR      r0,[r1,#0]  ; k
000cf8  e05a              B        |L165.3504|
000cfa  0000              DCW      0x0000
                  |L165.3324|
                          DCD      0x4006b000
                  |L165.3328|
                          DCD      ||.conststring||+0x70
                  |L165.3332|
                          DCD      uart_string_gsm
                  |L165.3336|
                          DCD      ||.conststring||+0xe0
                  |L165.3340|
                          DCD      tout
                  |L165.3344|
                          DCD      data
                  |L165.3348|
                          DCD      0x400ff080
                  |L165.3352|
                          DCD      ||.conststring||+0x10
                  |L165.3356|
                          DCD      ||.conststring||+0x18
                  |L165.3360|
                          DCD      ||.conststring||+0x2c
                  |L165.3364|
                          DCD      ||.conststring||+0x6fc
                  |L165.3368|
                          DCD      ||.conststring||+0x410
                  |L165.3372|
                          DCD      at_
                  |L165.3376|
                          DCD      apn
                  |L165.3380|
                          DCD      ||.conststring||+0x70c
                  |L165.3384|
                          DCD      tmeout
                  |L165.3388|
                          DCD      ||.conststring||+0x678
                  |L165.3392|
                          DCD      ||.conststring||+0x720
                  |L165.3396|
                          DCD      ||.conststring||+0x730
                  |L165.3400|
                          DCD      ||.conststring||+0x740
                  |L165.3404|
                          DCD      port
                  |L165.3408|
                          DCD      ||ip||
                  |L165.3412|
                          DCD      ||.conststring||+0x748
                  |L165.3416|
                          DCD      ||.conststring||+0x6b0
                  |L165.3420|
                          DCD      ||.conststring||+0x768
                  |L165.3424|
                          DCD      ||.conststring||+0x20
                  |L165.3428|
                          DCD      ||.conststring||+0x6b8
                  |L165.3432|
                          DCD      0x00001388
                  |L165.3436|
                          DCD      qwe
                  |L165.3440|
                          DCD      ||k2||
                  |L165.3444|
                          DCD      k
                  |L165.3448|
                          DCD      ||.conststring||+0x668
                  |L165.3452|
                          DCD      ||q1||
                  |L165.3456|
                          DCD      ||q2||
                  |L165.3460|
                          DCD      ||.conststring||+0x670
                  |L165.3464|
                          DCD      ||q3||
                  |L165.3468|
                          DCD      ||q4||
                  |L165.3472|
                          DCD      drive
                  |L165.3476|
                          DCD      ||.conststring||+0x414
                  |L165.3480|
;;;2041   		{
;;;2042   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000d98  48fd              LDR      r0,|L165.4496|
000d9a  4afe              LDR      r2,|L165.4500|
000d9c  6812              LDR      r2,[r2,#0]  ; k
000d9e  5c81              LDRB     r1,[r0,r2]
000da0  48fd              LDR      r0,|L165.4504|
000da2  f7fffffe          BL       uart_putchar
000da6  48fb              LDR      r0,|L165.4500|
000da8  6800              LDR      r0,[r0,#0]            ;2040  ; k
000daa  1c40              ADDS     r0,r0,#1              ;2040
000dac  49f9              LDR      r1,|L165.4500|
000dae  6008              STR      r0,[r1,#0]            ;2040  ; k
                  |L165.3504|
000db0  48f7              LDR      r0,|L165.4496|
000db2  f7fffffe          BL       strlen
000db6  49f7              LDR      r1,|L165.4500|
000db8  6809              LDR      r1,[r1,#0]            ;2040  ; k
000dba  4288              CMP      r0,r1                 ;2040
000dbc  d8ec              BHI      |L165.3480|
;;;2043   		}	
;;;2044   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000dbe  210a              MOVS     r1,#0xa
000dc0  48f5              LDR      r0,|L165.4504|
000dc2  f7fffffe          BL       uart_putchar
000dc6  210a              MOVS     r1,#0xa
000dc8  48f3              LDR      r0,|L165.4504|
000dca  f7fffffe          BL       uart_putchar
000dce  210a              MOVS     r1,#0xa
000dd0  48f1              LDR      r0,|L165.4504|
000dd2  f7fffffe          BL       uart_putchar
000dd6  210a              MOVS     r1,#0xa
000dd8  48ef              LDR      r0,|L165.4504|
000dda  f7fffffe          BL       uart_putchar
000dde  210a              MOVS     r1,#0xa
000de0  48ed              LDR      r0,|L165.4504|
000de2  f7fffffe          BL       uart_putchar
000de6  210a              MOVS     r1,#0xa
000de8  48eb              LDR      r0,|L165.4504|
000dea  f7fffffe          BL       uart_putchar
000dee  210a              MOVS     r1,#0xa
000df0  48e9              LDR      r0,|L165.4504|
000df2  f7fffffe          BL       uart_putchar
000df6  210a              MOVS     r1,#0xa
000df8  48e7              LDR      r0,|L165.4504|
000dfa  f7fffffe          BL       uart_putchar
000dfe  210a              MOVS     r1,#0xa
000e00  48e5              LDR      r0,|L165.4504|
000e02  f7fffffe          BL       uart_putchar
000e06  210a              MOVS     r1,#0xa
000e08  48e3              LDR      r0,|L165.4504|
000e0a  f7fffffe          BL       uart_putchar
000e0e  210a              MOVS     r1,#0xa
000e10  48e1              LDR      r0,|L165.4504|
000e12  f7fffffe          BL       uart_putchar
000e16  210a              MOVS     r1,#0xa
000e18  48df              LDR      r0,|L165.4504|
000e1a  f7fffffe          BL       uart_putchar
000e1e  210a              MOVS     r1,#0xa
000e20  48dd              LDR      r0,|L165.4504|
000e22  f7fffffe          BL       uart_putchar
000e26  210a              MOVS     r1,#0xa
000e28  48db              LDR      r0,|L165.4504|
000e2a  f7fffffe          BL       uart_putchar
000e2e  210a              MOVS     r1,#0xa
000e30  48d9              LDR      r0,|L165.4504|
000e32  f7fffffe          BL       uart_putchar
000e36  210a              MOVS     r1,#0xa
000e38  48d7              LDR      r0,|L165.4504|
000e3a  f7fffffe          BL       uart_putchar
000e3e  210a              MOVS     r1,#0xa
000e40  48d5              LDR      r0,|L165.4504|
000e42  f7fffffe          BL       uart_putchar
000e46  210a              MOVS     r1,#0xa
000e48  48d3              LDR      r0,|L165.4504|
000e4a  f7fffffe          BL       uart_putchar
000e4e  210a              MOVS     r1,#0xa
000e50  48d1              LDR      r0,|L165.4504|
000e52  f7fffffe          BL       uart_putchar
000e56  210a              MOVS     r1,#0xa
000e58  48cf              LDR      r0,|L165.4504|
000e5a  f7fffffe          BL       uart_putchar
000e5e  210a              MOVS     r1,#0xa
000e60  48cd              LDR      r0,|L165.4504|
000e62  f7fffffe          BL       uart_putchar
000e66  210a              MOVS     r1,#0xa
000e68  48cb              LDR      r0,|L165.4504|
000e6a  f7fffffe          BL       uart_putchar
000e6e  210a              MOVS     r1,#0xa
000e70  48c9              LDR      r0,|L165.4504|
000e72  f7fffffe          BL       uart_putchar
000e76  210a              MOVS     r1,#0xa
000e78  48c7              LDR      r0,|L165.4504|
000e7a  f7fffffe          BL       uart_putchar
000e7e  210a              MOVS     r1,#0xa
000e80  48c5              LDR      r0,|L165.4504|
000e82  f7fffffe          BL       uart_putchar
000e86  210a              MOVS     r1,#0xa
000e88  48c3              LDR      r0,|L165.4504|
000e8a  f7fffffe          BL       uart_putchar
000e8e  210a              MOVS     r1,#0xa
000e90  48c1              LDR      r0,|L165.4504|
000e92  f7fffffe          BL       uart_putchar
000e96  210a              MOVS     r1,#0xa
000e98  48bf              LDR      r0,|L165.4504|
000e9a  f7fffffe          BL       uart_putchar
000e9e  210a              MOVS     r1,#0xa
000ea0  48bd              LDR      r0,|L165.4504|
000ea2  f7fffffe          BL       uart_putchar
000ea6  210a              MOVS     r1,#0xa
000ea8  48bb              LDR      r0,|L165.4504|
000eaa  f7fffffe          BL       uart_putchar
000eae  210a              MOVS     r1,#0xa
000eb0  48b9              LDR      r0,|L165.4504|
000eb2  f7fffffe          BL       uart_putchar
000eb6  210a              MOVS     r1,#0xa
000eb8  48b7              LDR      r0,|L165.4504|
000eba  f7fffffe          BL       uart_putchar
000ebe  210a              MOVS     r1,#0xa
000ec0  48b5              LDR      r0,|L165.4504|
000ec2  f7fffffe          BL       uart_putchar
000ec6  210a              MOVS     r1,#0xa
000ec8  48b3              LDR      r0,|L165.4504|
000eca  f7fffffe          BL       uart_putchar
000ece  210a              MOVS     r1,#0xa
000ed0  48b1              LDR      r0,|L165.4504|
000ed2  f7fffffe          BL       uart_putchar
000ed6  210a              MOVS     r1,#0xa
000ed8  48af              LDR      r0,|L165.4504|
000eda  f7fffffe          BL       uart_putchar
000ede  210a              MOVS     r1,#0xa
000ee0  48ad              LDR      r0,|L165.4504|
000ee2  f7fffffe          BL       uart_putchar
000ee6  210a              MOVS     r1,#0xa
000ee8  48ab              LDR      r0,|L165.4504|
000eea  f7fffffe          BL       uart_putchar
000eee  210a              MOVS     r1,#0xa
000ef0  48a9              LDR      r0,|L165.4504|
000ef2  f7fffffe          BL       uart_putchar
000ef6  210a              MOVS     r1,#0xa
000ef8  48a7              LDR      r0,|L165.4504|
000efa  f7fffffe          BL       uart_putchar
000efe  210a              MOVS     r1,#0xa
000f00  48a5              LDR      r0,|L165.4504|
000f02  f7fffffe          BL       uart_putchar
000f06  210a              MOVS     r1,#0xa
000f08  48a3              LDR      r0,|L165.4504|
000f0a  f7fffffe          BL       uart_putchar
000f0e  210a              MOVS     r1,#0xa
000f10  48a1              LDR      r0,|L165.4504|
000f12  f7fffffe          BL       uart_putchar
000f16  210a              MOVS     r1,#0xa
000f18  489f              LDR      r0,|L165.4504|
000f1a  f7fffffe          BL       uart_putchar
000f1e  210a              MOVS     r1,#0xa
000f20  489d              LDR      r0,|L165.4504|
000f22  f7fffffe          BL       uart_putchar
000f26  210a              MOVS     r1,#0xa
000f28  489b              LDR      r0,|L165.4504|
000f2a  f7fffffe          BL       uart_putchar
000f2e  210a              MOVS     r1,#0xa
000f30  4899              LDR      r0,|L165.4504|
000f32  f7fffffe          BL       uart_putchar
000f36  210a              MOVS     r1,#0xa
000f38  4897              LDR      r0,|L165.4504|
000f3a  f7fffffe          BL       uart_putchar
000f3e  210a              MOVS     r1,#0xa
000f40  4895              LDR      r0,|L165.4504|
000f42  f7fffffe          BL       uart_putchar
000f46  210a              MOVS     r1,#0xa
000f48  4893              LDR      r0,|L165.4504|
000f4a  f7fffffe          BL       uart_putchar
000f4e  210a              MOVS     r1,#0xa
000f50  4891              LDR      r0,|L165.4504|
000f52  f7fffffe          BL       uart_putchar
000f56  210a              MOVS     r1,#0xa
000f58  488f              LDR      r0,|L165.4504|
000f5a  f7fffffe          BL       uart_putchar
000f5e  210a              MOVS     r1,#0xa
000f60  488d              LDR      r0,|L165.4504|
000f62  f7fffffe          BL       uart_putchar
000f66  210a              MOVS     r1,#0xa
000f68  488b              LDR      r0,|L165.4504|
000f6a  f7fffffe          BL       uart_putchar
000f6e  210a              MOVS     r1,#0xa
000f70  4889              LDR      r0,|L165.4504|
000f72  f7fffffe          BL       uart_putchar
000f76  210a              MOVS     r1,#0xa
000f78  4887              LDR      r0,|L165.4504|
000f7a  f7fffffe          BL       uart_putchar
000f7e  210a              MOVS     r1,#0xa
000f80  4885              LDR      r0,|L165.4504|
000f82  f7fffffe          BL       uart_putchar
;;;2045   									//memset(data,0,1000);
;;;2046   														//timer counts to wait for characters in uart 1 									
;;;2047   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000f86  bf00              NOP      
                  |L165.3976|
000f88  4984              LDR      r1,|L165.4508|
000f8a  4885              LDR      r0,|L165.4512|
000f8c  f7fffffe          BL       strstr
000f90  2800              CMP      r0,#0
000f92  d109              BNE      |L165.4008|
000f94  4983              LDR      r1,|L165.4516|
000f96  4882              LDR      r0,|L165.4512|
000f98  f7fffffe          BL       strstr
000f9c  2800              CMP      r0,#0
000f9e  d103              BNE      |L165.4008|
000fa0  4881              LDR      r0,|L165.4520|
000fa2  6800              LDR      r0,[r0,#0]  ; tout
000fa4  2805              CMP      r0,#5
000fa6  ddef              BLE      |L165.3976|
                  |L165.4008|
;;;2048   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2049   									}
;;;2050   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000fa8  f7fffffe          BL       clear
;;;2051   									//clear();
;;;2052   									memset(data,0,strlen(data));
000fac  4878              LDR      r0,|L165.4496|
000fae  f7fffffe          BL       strlen
000fb2  4604              MOV      r4,r0
000fb4  4621              MOV      r1,r4
000fb6  4876              LDR      r0,|L165.4496|
000fb8  f7fffffe          BL       __aeabi_memclr
;;;2053   									clear();
000fbc  f7fffffe          BL       clear
                  |L165.4032|
;;;2054   
;;;2055   								
;;;2056   
;;;2057   break;
000fc0  e3fe              B        |L165.6080|
                  |L165.4034|
;;;2058   //log_it();
;;;2059   }
;;;2060   			
;;;2061   			
;;;2062   			
;;;2063   			
;;;2064   			
;;;2065   			}
;;;2066   			else
;;;2067   			{
;;;2068   			
;;;2069   			
;;;2070   		delay(100);
000fc2  2064              MOVS     r0,#0x64
000fc4  f7fffffe          BL       delay
;;;2071   		clear();//memset(uart_string_gsm,0,5000);
000fc8  f7fffffe          BL       clear
;;;2072   	
;;;2073   	memset(at_,0,100);
000fcc  2164              MOVS     r1,#0x64
000fce  4877              LDR      r0,|L165.4524|
000fd0  f7fffffe          BL       __aeabi_memclr
;;;2074   	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000fd4  486e              LDR      r0,|L165.4496|
000fd6  f7fffffe          BL       strlen
000fda  1c44              ADDS     r4,r0,#1
000fdc  4623              MOV      r3,r4
000fde  4a74              LDR      r2,|L165.4528|
000fe0  4974              LDR      r1,|L165.4532|
000fe2  4872              LDR      r0,|L165.4524|
000fe4  f7fffffe          BL       __2sprintf
;;;2075   	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000fe8  2005              MOVS     r0,#5
000fea  4b6e              LDR      r3,|L165.4516|
000fec  4a72              LDR      r2,|L165.4536|
000fee  4973              LDR      r1,|L165.4540|
000ff0  9000              STR      r0,[sp,#0]
000ff2  486e              LDR      r0,|L165.4524|
000ff4  f7fffffe          BL       send_SD
;;;2076   	
;;;2077   	clear();	
000ff8  f7fffffe          BL       clear
;;;2078   									k2=0;									//string array counter for uart 1
000ffc  2000              MOVS     r0,#0
000ffe  4970              LDR      r1,|L165.4544|
001000  6008              STR      r0,[r1,#0]  ; k2
;;;2079   									tout=0;	
001002  4969              LDR      r1,|L165.4520|
001004  6008              STR      r0,[r1,#0]  ; tout
;;;2080   		for(k=0;k<strlen(data);k++)
001006  4963              LDR      r1,|L165.4500|
001008  6008              STR      r0,[r1,#0]  ; k
00100a  e00b              B        |L165.4132|
                  |L165.4108|
;;;2081   		{
;;;2082   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00100c  4860              LDR      r0,|L165.4496|
00100e  4a61              LDR      r2,|L165.4500|
001010  6812              LDR      r2,[r2,#0]  ; k
001012  5c81              LDRB     r1,[r0,r2]
001014  4860              LDR      r0,|L165.4504|
001016  f7fffffe          BL       uart_putchar
00101a  485e              LDR      r0,|L165.4500|
00101c  6800              LDR      r0,[r0,#0]            ;2080  ; k
00101e  1c40              ADDS     r0,r0,#1              ;2080
001020  495c              LDR      r1,|L165.4500|
001022  6008              STR      r0,[r1,#0]            ;2080  ; k
                  |L165.4132|
001024  485a              LDR      r0,|L165.4496|
001026  f7fffffe          BL       strlen
00102a  495a              LDR      r1,|L165.4500|
00102c  6809              LDR      r1,[r1,#0]            ;2080  ; k
00102e  4288              CMP      r0,r1                 ;2080
001030  d8ec              BHI      |L165.4108|
;;;2083   		}	
;;;2084   		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001032  210a              MOVS     r1,#0xa
001034  4858              LDR      r0,|L165.4504|
001036  f7fffffe          BL       uart_putchar
00103a  210a              MOVS     r1,#0xa
00103c  4856              LDR      r0,|L165.4504|
00103e  f7fffffe          BL       uart_putchar
001042  210a              MOVS     r1,#0xa
001044  4854              LDR      r0,|L165.4504|
001046  f7fffffe          BL       uart_putchar
00104a  210a              MOVS     r1,#0xa
00104c  4852              LDR      r0,|L165.4504|
00104e  f7fffffe          BL       uart_putchar
001052  210a              MOVS     r1,#0xa
001054  4850              LDR      r0,|L165.4504|
001056  f7fffffe          BL       uart_putchar
00105a  210a              MOVS     r1,#0xa
00105c  484e              LDR      r0,|L165.4504|
00105e  f7fffffe          BL       uart_putchar
001062  210a              MOVS     r1,#0xa
001064  484c              LDR      r0,|L165.4504|
001066  f7fffffe          BL       uart_putchar
00106a  210a              MOVS     r1,#0xa
00106c  484a              LDR      r0,|L165.4504|
00106e  f7fffffe          BL       uart_putchar
001072  210a              MOVS     r1,#0xa
001074  4848              LDR      r0,|L165.4504|
001076  e000              B        |L165.4218|
                  |L165.4216|
001078  e3fd              B        |L165.6262|
                  |L165.4218|
00107a  f7fffffe          BL       uart_putchar
00107e  210a              MOVS     r1,#0xa
001080  4845              LDR      r0,|L165.4504|
001082  f7fffffe          BL       uart_putchar
001086  210a              MOVS     r1,#0xa
001088  4843              LDR      r0,|L165.4504|
00108a  f7fffffe          BL       uart_putchar
00108e  210a              MOVS     r1,#0xa
001090  4841              LDR      r0,|L165.4504|
001092  f7fffffe          BL       uart_putchar
001096  210a              MOVS     r1,#0xa
001098  483f              LDR      r0,|L165.4504|
00109a  f7fffffe          BL       uart_putchar
00109e  210a              MOVS     r1,#0xa
0010a0  483d              LDR      r0,|L165.4504|
0010a2  f7fffffe          BL       uart_putchar
0010a6  210a              MOVS     r1,#0xa
0010a8  483b              LDR      r0,|L165.4504|
0010aa  f7fffffe          BL       uart_putchar
0010ae  210a              MOVS     r1,#0xa
0010b0  4839              LDR      r0,|L165.4504|
0010b2  f7fffffe          BL       uart_putchar
0010b6  210a              MOVS     r1,#0xa
0010b8  4837              LDR      r0,|L165.4504|
0010ba  f7fffffe          BL       uart_putchar
0010be  210a              MOVS     r1,#0xa
0010c0  4835              LDR      r0,|L165.4504|
0010c2  f7fffffe          BL       uart_putchar
0010c6  210a              MOVS     r1,#0xa
0010c8  4833              LDR      r0,|L165.4504|
0010ca  f7fffffe          BL       uart_putchar
0010ce  210a              MOVS     r1,#0xa
0010d0  4831              LDR      r0,|L165.4504|
0010d2  f7fffffe          BL       uart_putchar
0010d6  210a              MOVS     r1,#0xa
0010d8  482f              LDR      r0,|L165.4504|
0010da  f7fffffe          BL       uart_putchar
0010de  210a              MOVS     r1,#0xa
0010e0  482d              LDR      r0,|L165.4504|
0010e2  f7fffffe          BL       uart_putchar
0010e6  210a              MOVS     r1,#0xa
0010e8  482b              LDR      r0,|L165.4504|
0010ea  f7fffffe          BL       uart_putchar
0010ee  210a              MOVS     r1,#0xa
0010f0  4829              LDR      r0,|L165.4504|
0010f2  f7fffffe          BL       uart_putchar
0010f6  210a              MOVS     r1,#0xa
0010f8  4827              LDR      r0,|L165.4504|
0010fa  f7fffffe          BL       uart_putchar
0010fe  210a              MOVS     r1,#0xa
001100  4825              LDR      r0,|L165.4504|
001102  f7fffffe          BL       uart_putchar
001106  210a              MOVS     r1,#0xa
001108  4823              LDR      r0,|L165.4504|
00110a  f7fffffe          BL       uart_putchar
00110e  210a              MOVS     r1,#0xa
001110  4821              LDR      r0,|L165.4504|
001112  f7fffffe          BL       uart_putchar
001116  210a              MOVS     r1,#0xa
001118  481f              LDR      r0,|L165.4504|
00111a  f7fffffe          BL       uart_putchar
00111e  210a              MOVS     r1,#0xa
001120  481d              LDR      r0,|L165.4504|
001122  f7fffffe          BL       uart_putchar
001126  210a              MOVS     r1,#0xa
001128  481b              LDR      r0,|L165.4504|
00112a  f7fffffe          BL       uart_putchar
00112e  210a              MOVS     r1,#0xa
001130  4819              LDR      r0,|L165.4504|
001132  f7fffffe          BL       uart_putchar
001136  210a              MOVS     r1,#0xa
001138  4817              LDR      r0,|L165.4504|
00113a  f7fffffe          BL       uart_putchar
00113e  210a              MOVS     r1,#0xa
001140  4815              LDR      r0,|L165.4504|
001142  f7fffffe          BL       uart_putchar
001146  210a              MOVS     r1,#0xa
001148  4813              LDR      r0,|L165.4504|
00114a  f7fffffe          BL       uart_putchar
00114e  210a              MOVS     r1,#0xa
001150  4811              LDR      r0,|L165.4504|
001152  f7fffffe          BL       uart_putchar
001156  210a              MOVS     r1,#0xa
001158  480f              LDR      r0,|L165.4504|
00115a  f7fffffe          BL       uart_putchar
00115e  210a              MOVS     r1,#0xa
001160  480d              LDR      r0,|L165.4504|
001162  f7fffffe          BL       uart_putchar
001166  210a              MOVS     r1,#0xa
001168  480b              LDR      r0,|L165.4504|
00116a  f7fffffe          BL       uart_putchar
00116e  210a              MOVS     r1,#0xa
001170  4809              LDR      r0,|L165.4504|
001172  f7fffffe          BL       uart_putchar
001176  210a              MOVS     r1,#0xa
001178  4807              LDR      r0,|L165.4504|
00117a  f7fffffe          BL       uart_putchar
00117e  210a              MOVS     r1,#0xa
001180  4805              LDR      r0,|L165.4504|
001182  f7fffffe          BL       uart_putchar
001186  210a              MOVS     r1,#0xa
001188  4803              LDR      r0,|L165.4504|
00118a  f7fffffe          BL       uart_putchar
00118e  e019              B        |L165.4548|
                  |L165.4496|
                          DCD      data
                  |L165.4500|
                          DCD      k
                  |L165.4504|
                          DCD      0x4006b000
                  |L165.4508|
                          DCD      ||.conststring||+0x70
                  |L165.4512|
                          DCD      uart_string_gsm
                  |L165.4516|
                          DCD      ||.conststring||+0xe0
                  |L165.4520|
                          DCD      tout
                  |L165.4524|
                          DCD      at_
                  |L165.4528|
                          DCD      drive
                  |L165.4532|
                          DCD      ||.conststring||+0x414
                  |L165.4536|
                          DCD      ||.conststring||+0x18
                  |L165.4540|
                          DCD      ||.conststring||+0x20
                  |L165.4544|
                          DCD      ||k2||
                  |L165.4548|
0011c4  210a              MOVS     r1,#0xa
0011c6  48fe              LDR      r0,|L165.5568|
0011c8  f7fffffe          BL       uart_putchar
0011cc  210a              MOVS     r1,#0xa
0011ce  48fc              LDR      r0,|L165.5568|
0011d0  f7fffffe          BL       uart_putchar
0011d4  210a              MOVS     r1,#0xa
0011d6  48fa              LDR      r0,|L165.5568|
0011d8  f7fffffe          BL       uart_putchar
0011dc  210a              MOVS     r1,#0xa
0011de  48f8              LDR      r0,|L165.5568|
0011e0  f7fffffe          BL       uart_putchar
0011e4  210a              MOVS     r1,#0xa
0011e6  48f6              LDR      r0,|L165.5568|
0011e8  f7fffffe          BL       uart_putchar
0011ec  210a              MOVS     r1,#0xa
0011ee  48f4              LDR      r0,|L165.5568|
0011f0  f7fffffe          BL       uart_putchar
0011f4  210a              MOVS     r1,#0xa
0011f6  48f2              LDR      r0,|L165.5568|
0011f8  f7fffffe          BL       uart_putchar
0011fc  210a              MOVS     r1,#0xa
0011fe  48f0              LDR      r0,|L165.5568|
001200  f7fffffe          BL       uart_putchar
001204  210a              MOVS     r1,#0xa
001206  48ee              LDR      r0,|L165.5568|
001208  f7fffffe          BL       uart_putchar
00120c  210a              MOVS     r1,#0xa
00120e  48ec              LDR      r0,|L165.5568|
001210  f7fffffe          BL       uart_putchar
001214  210a              MOVS     r1,#0xa
001216  48ea              LDR      r0,|L165.5568|
001218  f7fffffe          BL       uart_putchar
00121c  210a              MOVS     r1,#0xa
00121e  48e8              LDR      r0,|L165.5568|
001220  f7fffffe          BL       uart_putchar
001224  210a              MOVS     r1,#0xa
001226  48e6              LDR      r0,|L165.5568|
001228  f7fffffe          BL       uart_putchar
00122c  210a              MOVS     r1,#0xa
00122e  48e4              LDR      r0,|L165.5568|
001230  f7fffffe          BL       uart_putchar
;;;2085   									//memset(data,0,1000);
;;;2086   														//timer counts to wait for characters in uart 1 									
;;;2087   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001234  bf00              NOP      
                  |L165.4662|
001236  49e3              LDR      r1,|L165.5572|
001238  48e3              LDR      r0,|L165.5576|
00123a  f7fffffe          BL       strstr
00123e  2800              CMP      r0,#0
001240  d109              BNE      |L165.4694|
001242  49e2              LDR      r1,|L165.5580|
001244  48e0              LDR      r0,|L165.5576|
001246  f7fffffe          BL       strstr
00124a  2800              CMP      r0,#0
00124c  d103              BNE      |L165.4694|
00124e  48e0              LDR      r0,|L165.5584|
001250  6800              LDR      r0,[r0,#0]  ; tout
001252  2805              CMP      r0,#5
001254  ddef              BLE      |L165.4662|
                  |L165.4694|
;;;2088   									{}
;;;2089   	                clear();
001256  f7fffffe          BL       clear
;;;2090   									memset(data,0,strlen(data));
00125a  48de              LDR      r0,|L165.5588|
00125c  f7fffffe          BL       strlen
001260  4604              MOV      r4,r0
001262  4621              MOV      r1,r4
001264  48db              LDR      r0,|L165.5588|
001266  f7fffffe          BL       __aeabi_memclr
;;;2091   									clear();
00126a  f7fffffe          BL       clear
;;;2092   
;;;2093   								
;;;2094   			break;
00126e  e6a7              B        |L165.4032|
                  |L165.4720|
;;;2095   			///returning; 
;;;2096   			//log_it();
;;;2097   			}
;;;2098   
;;;2099   
;;;2100   }
;;;2101   
;;;2102   //if(notsentflag==0){cursorvaluene=cursor_val(sd_data);cursorvaluepr+=cursorvaluene;}
;;;2103   
;;;2104   
;;;2105   }
;;;2106   else{
;;;2107   	remove_all_chars(data, '\n', '\n');
001270  220a              MOVS     r2,#0xa
001272  4611              MOV      r1,r2
001274  48d7              LDR      r0,|L165.5588|
001276  f7fffffe          BL       remove_all_chars
;;;2108   			strcat(data,"CH\n");	
00127a  49d7              LDR      r1,|L165.5592|
00127c  48d5              LDR      r0,|L165.5588|
00127e  f7fffffe          BL       strcat
;;;2109   			
;;;2110   	
;;;2111   	  delay(100);
001282  2064              MOVS     r0,#0x64
001284  f7fffffe          BL       delay
;;;2112   		clear();//memset(uart_string_gsm,0,5000);
001288  f7fffffe          BL       clear
;;;2113   	
;;;2114   	memset(at_,0,100);
00128c  2164              MOVS     r1,#0x64
00128e  48d3              LDR      r0,|L165.5596|
001290  f7fffffe          BL       __aeabi_memclr
;;;2115   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001294  48cf              LDR      r0,|L165.5588|
001296  f7fffffe          BL       strlen
00129a  1c44              ADDS     r4,r0,#1
00129c  4623              MOV      r3,r4
00129e  4ad0              LDR      r2,|L165.5600|
0012a0  49d0              LDR      r1,|L165.5604|
0012a2  48ce              LDR      r0,|L165.5596|
0012a4  f7fffffe          BL       __2sprintf
;;;2116   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0012a8  2005              MOVS     r0,#5
0012aa  4bc8              LDR      r3,|L165.5580|
0012ac  4ace              LDR      r2,|L165.5608|
0012ae  49cf              LDR      r1,|L165.5612|
0012b0  9000              STR      r0,[sp,#0]
0012b2  48ca              LDR      r0,|L165.5596|
0012b4  f7fffffe          BL       send_SD
;;;2117   clear();	
0012b8  f7fffffe          BL       clear
;;;2118   									k2=0;									//string array counter for uart 1
0012bc  2000              MOVS     r0,#0
0012be  49cc              LDR      r1,|L165.5616|
0012c0  6008              STR      r0,[r1,#0]  ; k2
;;;2119   									tout=0;	
0012c2  49c3              LDR      r1,|L165.5584|
0012c4  6008              STR      r0,[r1,#0]  ; tout
;;;2120   		for(k=0;k<strlen(data);k++)
0012c6  49cb              LDR      r1,|L165.5620|
0012c8  6008              STR      r0,[r1,#0]  ; k
0012ca  e00b              B        |L165.4836|
                  |L165.4812|
;;;2121   		{
;;;2122   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0012cc  48c1              LDR      r0,|L165.5588|
0012ce  4ac9              LDR      r2,|L165.5620|
0012d0  6812              LDR      r2,[r2,#0]  ; k
0012d2  5c81              LDRB     r1,[r0,r2]
0012d4  48ba              LDR      r0,|L165.5568|
0012d6  f7fffffe          BL       uart_putchar
0012da  48c6              LDR      r0,|L165.5620|
0012dc  6800              LDR      r0,[r0,#0]            ;2120  ; k
0012de  1c40              ADDS     r0,r0,#1              ;2120
0012e0  49c4              LDR      r1,|L165.5620|
0012e2  6008              STR      r0,[r1,#0]            ;2120  ; k
                  |L165.4836|
0012e4  48bb              LDR      r0,|L165.5588|
0012e6  f7fffffe          BL       strlen
0012ea  49c2              LDR      r1,|L165.5620|
0012ec  6809              LDR      r1,[r1,#0]            ;2120  ; k
0012ee  4288              CMP      r0,r1                 ;2120
0012f0  d8ec              BHI      |L165.4812|
;;;2123   		}	
;;;2124   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0012f2  210a              MOVS     r1,#0xa
0012f4  48b2              LDR      r0,|L165.5568|
0012f6  f7fffffe          BL       uart_putchar
0012fa  210a              MOVS     r1,#0xa
0012fc  48b0              LDR      r0,|L165.5568|
0012fe  f7fffffe          BL       uart_putchar
001302  210a              MOVS     r1,#0xa
001304  48ae              LDR      r0,|L165.5568|
001306  f7fffffe          BL       uart_putchar
00130a  210a              MOVS     r1,#0xa
00130c  48ac              LDR      r0,|L165.5568|
00130e  f7fffffe          BL       uart_putchar
001312  210a              MOVS     r1,#0xa
001314  48aa              LDR      r0,|L165.5568|
001316  f7fffffe          BL       uart_putchar
00131a  210a              MOVS     r1,#0xa
00131c  48a8              LDR      r0,|L165.5568|
00131e  f7fffffe          BL       uart_putchar
001322  210a              MOVS     r1,#0xa
001324  48a6              LDR      r0,|L165.5568|
001326  f7fffffe          BL       uart_putchar
00132a  210a              MOVS     r1,#0xa
00132c  48a4              LDR      r0,|L165.5568|
00132e  f7fffffe          BL       uart_putchar
001332  210a              MOVS     r1,#0xa
001334  48a2              LDR      r0,|L165.5568|
001336  f7fffffe          BL       uart_putchar
00133a  210a              MOVS     r1,#0xa
00133c  48a0              LDR      r0,|L165.5568|
00133e  f7fffffe          BL       uart_putchar
001342  210a              MOVS     r1,#0xa
001344  489e              LDR      r0,|L165.5568|
001346  f7fffffe          BL       uart_putchar
00134a  210a              MOVS     r1,#0xa
00134c  489c              LDR      r0,|L165.5568|
00134e  f7fffffe          BL       uart_putchar
001352  210a              MOVS     r1,#0xa
001354  489a              LDR      r0,|L165.5568|
001356  f7fffffe          BL       uart_putchar
00135a  210a              MOVS     r1,#0xa
00135c  4898              LDR      r0,|L165.5568|
00135e  f7fffffe          BL       uart_putchar
001362  210a              MOVS     r1,#0xa
001364  4896              LDR      r0,|L165.5568|
001366  f7fffffe          BL       uart_putchar
00136a  210a              MOVS     r1,#0xa
00136c  4894              LDR      r0,|L165.5568|
00136e  f7fffffe          BL       uart_putchar
001372  210a              MOVS     r1,#0xa
001374  4892              LDR      r0,|L165.5568|
001376  f7fffffe          BL       uart_putchar
00137a  210a              MOVS     r1,#0xa
00137c  4890              LDR      r0,|L165.5568|
00137e  f7fffffe          BL       uart_putchar
001382  210a              MOVS     r1,#0xa
001384  488e              LDR      r0,|L165.5568|
001386  f7fffffe          BL       uart_putchar
00138a  210a              MOVS     r1,#0xa
00138c  488c              LDR      r0,|L165.5568|
00138e  f7fffffe          BL       uart_putchar
001392  210a              MOVS     r1,#0xa
001394  488a              LDR      r0,|L165.5568|
001396  f7fffffe          BL       uart_putchar
00139a  210a              MOVS     r1,#0xa
00139c  4888              LDR      r0,|L165.5568|
00139e  f7fffffe          BL       uart_putchar
0013a2  210a              MOVS     r1,#0xa
0013a4  4886              LDR      r0,|L165.5568|
0013a6  f7fffffe          BL       uart_putchar
0013aa  210a              MOVS     r1,#0xa
0013ac  4884              LDR      r0,|L165.5568|
0013ae  f7fffffe          BL       uart_putchar
0013b2  210a              MOVS     r1,#0xa
0013b4  4882              LDR      r0,|L165.5568|
0013b6  f7fffffe          BL       uart_putchar
0013ba  210a              MOVS     r1,#0xa
0013bc  4880              LDR      r0,|L165.5568|
0013be  f7fffffe          BL       uart_putchar
0013c2  210a              MOVS     r1,#0xa
0013c4  487e              LDR      r0,|L165.5568|
0013c6  f7fffffe          BL       uart_putchar
0013ca  210a              MOVS     r1,#0xa
0013cc  487c              LDR      r0,|L165.5568|
0013ce  e000              B        |L165.5074|
                  |L165.5072|
0013d0  e3fe              B        |L165.7120|
                  |L165.5074|
0013d2  f7fffffe          BL       uart_putchar
0013d6  210a              MOVS     r1,#0xa
0013d8  4879              LDR      r0,|L165.5568|
0013da  f7fffffe          BL       uart_putchar
0013de  210a              MOVS     r1,#0xa
0013e0  4877              LDR      r0,|L165.5568|
0013e2  f7fffffe          BL       uart_putchar
0013e6  210a              MOVS     r1,#0xa
0013e8  4875              LDR      r0,|L165.5568|
0013ea  f7fffffe          BL       uart_putchar
0013ee  210a              MOVS     r1,#0xa
0013f0  4873              LDR      r0,|L165.5568|
0013f2  f7fffffe          BL       uart_putchar
0013f6  210a              MOVS     r1,#0xa
0013f8  4871              LDR      r0,|L165.5568|
0013fa  f7fffffe          BL       uart_putchar
0013fe  210a              MOVS     r1,#0xa
001400  486f              LDR      r0,|L165.5568|
001402  f7fffffe          BL       uart_putchar
001406  210a              MOVS     r1,#0xa
001408  486d              LDR      r0,|L165.5568|
00140a  f7fffffe          BL       uart_putchar
00140e  210a              MOVS     r1,#0xa
001410  486b              LDR      r0,|L165.5568|
001412  f7fffffe          BL       uart_putchar
001416  210a              MOVS     r1,#0xa
001418  4869              LDR      r0,|L165.5568|
00141a  f7fffffe          BL       uart_putchar
00141e  210a              MOVS     r1,#0xa
001420  4867              LDR      r0,|L165.5568|
001422  f7fffffe          BL       uart_putchar
001426  210a              MOVS     r1,#0xa
001428  4865              LDR      r0,|L165.5568|
00142a  f7fffffe          BL       uart_putchar
00142e  210a              MOVS     r1,#0xa
001430  4863              LDR      r0,|L165.5568|
001432  f7fffffe          BL       uart_putchar
001436  210a              MOVS     r1,#0xa
001438  4861              LDR      r0,|L165.5568|
00143a  f7fffffe          BL       uart_putchar
00143e  210a              MOVS     r1,#0xa
001440  485f              LDR      r0,|L165.5568|
001442  f7fffffe          BL       uart_putchar
001446  210a              MOVS     r1,#0xa
001448  485d              LDR      r0,|L165.5568|
00144a  f7fffffe          BL       uart_putchar
00144e  210a              MOVS     r1,#0xa
001450  485b              LDR      r0,|L165.5568|
001452  f7fffffe          BL       uart_putchar
001456  210a              MOVS     r1,#0xa
001458  4859              LDR      r0,|L165.5568|
00145a  f7fffffe          BL       uart_putchar
00145e  210a              MOVS     r1,#0xa
001460  4857              LDR      r0,|L165.5568|
001462  f7fffffe          BL       uart_putchar
001466  210a              MOVS     r1,#0xa
001468  4855              LDR      r0,|L165.5568|
00146a  f7fffffe          BL       uart_putchar
00146e  210a              MOVS     r1,#0xa
001470  4853              LDR      r0,|L165.5568|
001472  f7fffffe          BL       uart_putchar
001476  210a              MOVS     r1,#0xa
001478  4851              LDR      r0,|L165.5568|
00147a  f7fffffe          BL       uart_putchar
00147e  210a              MOVS     r1,#0xa
001480  484f              LDR      r0,|L165.5568|
001482  f7fffffe          BL       uart_putchar
001486  210a              MOVS     r1,#0xa
001488  484d              LDR      r0,|L165.5568|
00148a  f7fffffe          BL       uart_putchar
00148e  210a              MOVS     r1,#0xa
001490  484b              LDR      r0,|L165.5568|
001492  f7fffffe          BL       uart_putchar
001496  210a              MOVS     r1,#0xa
001498  4849              LDR      r0,|L165.5568|
00149a  f7fffffe          BL       uart_putchar
00149e  210a              MOVS     r1,#0xa
0014a0  4847              LDR      r0,|L165.5568|
0014a2  f7fffffe          BL       uart_putchar
0014a6  210a              MOVS     r1,#0xa
0014a8  4845              LDR      r0,|L165.5568|
0014aa  f7fffffe          BL       uart_putchar
0014ae  210a              MOVS     r1,#0xa
0014b0  4843              LDR      r0,|L165.5568|
0014b2  f7fffffe          BL       uart_putchar
0014b6  210a              MOVS     r1,#0xa
0014b8  4841              LDR      r0,|L165.5568|
0014ba  f7fffffe          BL       uart_putchar
;;;2125   									//memset(data,0,1000);
;;;2126   														//timer counts to wait for characters in uart 1 									
;;;2127   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0014be  bf00              NOP      
                  |L165.5312|
0014c0  4940              LDR      r1,|L165.5572|
0014c2  4841              LDR      r0,|L165.5576|
0014c4  f7fffffe          BL       strstr
0014c8  2800              CMP      r0,#0
0014ca  d109              BNE      |L165.5344|
0014cc  493f              LDR      r1,|L165.5580|
0014ce  483e              LDR      r0,|L165.5576|
0014d0  f7fffffe          BL       strstr
0014d4  2800              CMP      r0,#0
0014d6  d103              BNE      |L165.5344|
0014d8  483d              LDR      r0,|L165.5584|
0014da  6800              LDR      r0,[r0,#0]  ; tout
0014dc  2805              CMP      r0,#5
0014de  ddef              BLE      |L165.5312|
                  |L165.5344|
;;;2128   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2129   									}
;;;2130   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0014e0  f7fffffe          BL       clear
;;;2131   									//clear();
;;;2132   									memset(data,0,strlen(data));
0014e4  483b              LDR      r0,|L165.5588|
0014e6  f7fffffe          BL       strlen
0014ea  4604              MOV      r4,r0
0014ec  4621              MOV      r1,r4
0014ee  4839              LDR      r0,|L165.5588|
0014f0  f7fffffe          BL       __aeabi_memclr
;;;2133   									clear();
0014f4  f7fffffe          BL       clear
;;;2134   
;;;2135   								
;;;2136   	
;;;2137   	
;;;2138   	
;;;2139   	//log_it();
;;;2140   			memset(data,0,strlen(data));
0014f8  4836              LDR      r0,|L165.5588|
0014fa  f7fffffe          BL       strlen
0014fe  4604              MOV      r4,r0
001500  4621              MOV      r1,r4
001502  4834              LDR      r0,|L165.5588|
001504  f7fffffe          BL       __aeabi_memclr
;;;2141   //*****************************tcp_initialization();************************************//
;;;2142   
;;;2143   	
;;;2144   msg_sim800(); 
001508  f7fffffe          BL       msg_sim800
;;;2145   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00150c  2005              MOVS     r0,#5
00150e  4b2f              LDR      r3,|L165.5580|
001510  4a35              LDR      r2,|L165.5608|
001512  4939              LDR      r1,|L165.5624|
001514  9000              STR      r0,[sp,#0]
001516  4839              LDR      r0,|L165.5628|
001518  f7fffffe          BL       send_GSM
;;;2146   delay(100);
00151c  2064              MOVS     r0,#0x64
00151e  f7fffffe          BL       delay
;;;2147   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
001522  2004              MOVS     r0,#4
001524  4b29              LDR      r3,|L165.5580|
001526  4a36              LDR      r2,|L165.5632|
001528  4933              LDR      r1,|L165.5624|
00152a  9000              STR      r0,[sp,#0]
00152c  4835              LDR      r0,|L165.5636|
00152e  f7fffffe          BL       send_GSM
;;;2148   GPS_COLLECT2();
001532  f7fffffe          BL       GPS_COLLECT2
;;;2149   strcat(data,"CH\n");		
001536  4928              LDR      r1,|L165.5592|
001538  4826              LDR      r0,|L165.5588|
00153a  f7fffffe          BL       strcat
;;;2150   GPS_COLLECT2();
00153e  f7fffffe          BL       GPS_COLLECT2
;;;2151   strcat(data,"CH\n");	
001542  4925              LDR      r1,|L165.5592|
001544  4823              LDR      r0,|L165.5588|
001546  f7fffffe          BL       strcat
;;;2152   GPS_COLLECT2();
00154a  f7fffffe          BL       GPS_COLLECT2
;;;2153   strcat(data,"CH\n");
00154e  4922              LDR      r1,|L165.5592|
001550  4820              LDR      r0,|L165.5588|
001552  f7fffffe          BL       strcat
;;;2154   cond201=(strstr(uart_string_gsm, "OK"));
001556  4928              LDR      r1,|L165.5624|
001558  481b              LDR      r0,|L165.5576|
00155a  f7fffffe          BL       strstr
00155e  492a              LDR      r1,|L165.5640|
001560  6008              STR      r0,[r1,#0]  ; cond201
;;;2155   cond200=(strstr(uart_string_gsm, "ERROR"));
001562  491a              LDR      r1,|L165.5580|
001564  4818              LDR      r0,|L165.5576|
001566  f7fffffe          BL       strstr
00156a  4928              LDR      r1,|L165.5644|
00156c  6008              STR      r0,[r1,#0]  ; cond200
;;;2156   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00156e  4826              LDR      r0,|L165.5640|
001570  6800              LDR      r0,[r0,#0]  ; cond201
001572  2800              CMP      r0,#0
001574  d101              BNE      |L165.5498|
001576  2001              MOVS     r0,#1
001578  e000              B        |L165.5500|
                  |L165.5498|
00157a  2000              MOVS     r0,#0
                  |L165.5500|
00157c  2800              CMP      r0,#0
                  |L165.5502|
00157e  d07d              BEQ      |L165.5756|
001580  4822              LDR      r0,|L165.5644|
001582  6800              LDR      r0,[r0,#0]  ; cond200
001584  2800              CMP      r0,#0
001586  d101              BNE      |L165.5516|
001588  2001              MOVS     r0,#1
00158a  e000              B        |L165.5518|
                  |L165.5516|
00158c  2000              MOVS     r0,#0
                  |L165.5518|
00158e  2800              CMP      r0,#0
001590  d0f5              BEQ      |L165.5502|
001592  481f              LDR      r0,|L165.5648|
001594  6800              LDR      r0,[r0,#0]  ; sleep_flag
001596  2801              CMP      r0,#1
001598  d0f1              BEQ      |L165.5502|
;;;2157   {
;;;2158   delay(100);
00159a  2064              MOVS     r0,#0x64
00159c  f7fffffe          BL       delay
;;;2159   clear();//memset(uart_string_gsm,0,5000);
0015a0  f7fffffe          BL       clear
;;;2160   memset(at_,0,100);
0015a4  2164              MOVS     r1,#0x64
0015a6  480d              LDR      r0,|L165.5596|
0015a8  f7fffffe          BL       __aeabi_memclr
;;;2161   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0015ac  4809              LDR      r0,|L165.5588|
0015ae  f7fffffe          BL       strlen
0015b2  1c44              ADDS     r4,r0,#1
0015b4  4623              MOV      r3,r4
0015b6  4a0a              LDR      r2,|L165.5600|
0015b8  490a              LDR      r1,|L165.5604|
0015ba  4808              LDR      r0,|L165.5596|
0015bc  e02a              B        |L165.5652|
0015be  0000              DCW      0x0000
                  |L165.5568|
                          DCD      0x4006b000
                  |L165.5572|
                          DCD      ||.conststring||+0x70
                  |L165.5576|
                          DCD      uart_string_gsm
                  |L165.5580|
                          DCD      ||.conststring||+0xe0
                  |L165.5584|
                          DCD      tout
                  |L165.5588|
                          DCD      data
                  |L165.5592|
                          DCD      ||.conststring||+0x410
                  |L165.5596|
                          DCD      at_
                  |L165.5600|
                          DCD      drive
                  |L165.5604|
                          DCD      ||.conststring||+0x414
                  |L165.5608|
                          DCD      ||.conststring||+0x18
                  |L165.5612|
                          DCD      ||.conststring||+0x20
                  |L165.5616|
                          DCD      ||k2||
                  |L165.5620|
                          DCD      k
                  |L165.5624|
                          DCD      ||.conststring||+0x2c
                  |L165.5628|
                          DCD      ||.conststring||+0x6c8
                  |L165.5632|
                          DCD      ||.conststring||+0x6d8
                  |L165.5636|
                          DCD      ||.conststring||+0x6ec
                  |L165.5640|
                          DCD      cond201
                  |L165.5644|
                          DCD      cond200
                  |L165.5648|
                          DCD      sleep_flag
                  |L165.5652|
001614  f7fffffe          BL       __2sprintf
;;;2162   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001618  2005              MOVS     r0,#5
00161a  4bfc              LDR      r3,|L165.6668|
00161c  4afc              LDR      r2,|L165.6672|
00161e  49fd              LDR      r1,|L165.6676|
001620  9000              STR      r0,[sp,#0]
001622  48fd              LDR      r0,|L165.6680|
001624  f7fffffe          BL       send_SD
;;;2163   clear();	
001628  f7fffffe          BL       clear
;;;2164   k2=0;									//string array counter for uart 1
00162c  2000              MOVS     r0,#0
00162e  49fb              LDR      r1,|L165.6684|
001630  6008              STR      r0,[r1,#0]  ; k2
;;;2165   tout=0;	
001632  49fb              LDR      r1,|L165.6688|
001634  6008              STR      r0,[r1,#0]  ; tout
;;;2166   for(k=0;k<strlen(data);k++)
001636  49fb              LDR      r1,|L165.6692|
001638  6008              STR      r0,[r1,#0]  ; k
00163a  e00b              B        |L165.5716|
                  |L165.5692|
;;;2167   {
;;;2168   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00163c  48fa              LDR      r0,|L165.6696|
00163e  4af9              LDR      r2,|L165.6692|
001640  6812              LDR      r2,[r2,#0]  ; k
001642  5c81              LDRB     r1,[r0,r2]
001644  48f9              LDR      r0,|L165.6700|
001646  f7fffffe          BL       uart_putchar
00164a  48f6              LDR      r0,|L165.6692|
00164c  6800              LDR      r0,[r0,#0]            ;2166  ; k
00164e  1c40              ADDS     r0,r0,#1              ;2166
001650  49f4              LDR      r1,|L165.6692|
001652  6008              STR      r0,[r1,#0]            ;2166  ; k
                  |L165.5716|
001654  48f4              LDR      r0,|L165.6696|
001656  f7fffffe          BL       strlen
00165a  49f2              LDR      r1,|L165.6692|
00165c  6809              LDR      r1,[r1,#0]            ;2166  ; k
00165e  4288              CMP      r0,r1                 ;2166
001660  d8ec              BHI      |L165.5692|
;;;2169   }	
;;;2170   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001662  210a              MOVS     r1,#0xa
001664  48f1              LDR      r0,|L165.6700|
001666  f7fffffe          BL       uart_putchar
00166a  210a              MOVS     r1,#0xa
00166c  48ef              LDR      r0,|L165.6700|
00166e  f7fffffe          BL       uart_putchar
001672  210a              MOVS     r1,#0xa
001674  48ed              LDR      r0,|L165.6700|
001676  f7fffffe          BL       uart_putchar
00167a  e000              B        |L165.5758|
                  |L165.5756|
00167c  e104              B        |L165.6280|
                  |L165.5758|
00167e  210a              MOVS     r1,#0xa
001680  48ea              LDR      r0,|L165.6700|
001682  f7fffffe          BL       uart_putchar
001686  210a              MOVS     r1,#0xa
001688  48e8              LDR      r0,|L165.6700|
00168a  f7fffffe          BL       uart_putchar
00168e  210a              MOVS     r1,#0xa
001690  48e6              LDR      r0,|L165.6700|
001692  f7fffffe          BL       uart_putchar
001696  210a              MOVS     r1,#0xa
001698  48e4              LDR      r0,|L165.6700|
00169a  f7fffffe          BL       uart_putchar
00169e  210a              MOVS     r1,#0xa
0016a0  48e2              LDR      r0,|L165.6700|
0016a2  f7fffffe          BL       uart_putchar
0016a6  210a              MOVS     r1,#0xa
0016a8  48e0              LDR      r0,|L165.6700|
0016aa  f7fffffe          BL       uart_putchar
0016ae  210a              MOVS     r1,#0xa
0016b0  48de              LDR      r0,|L165.6700|
0016b2  f7fffffe          BL       uart_putchar
0016b6  210a              MOVS     r1,#0xa
0016b8  48dc              LDR      r0,|L165.6700|
0016ba  f7fffffe          BL       uart_putchar
0016be  210a              MOVS     r1,#0xa
0016c0  48da              LDR      r0,|L165.6700|
0016c2  f7fffffe          BL       uart_putchar
0016c6  210a              MOVS     r1,#0xa
0016c8  48d8              LDR      r0,|L165.6700|
0016ca  f7fffffe          BL       uart_putchar
0016ce  210a              MOVS     r1,#0xa
0016d0  48d6              LDR      r0,|L165.6700|
0016d2  f7fffffe          BL       uart_putchar
0016d6  210a              MOVS     r1,#0xa
0016d8  48d4              LDR      r0,|L165.6700|
0016da  f7fffffe          BL       uart_putchar
0016de  210a              MOVS     r1,#0xa
0016e0  48d2              LDR      r0,|L165.6700|
0016e2  f7fffffe          BL       uart_putchar
0016e6  210a              MOVS     r1,#0xa
0016e8  48d0              LDR      r0,|L165.6700|
0016ea  f7fffffe          BL       uart_putchar
0016ee  210a              MOVS     r1,#0xa
0016f0  48ce              LDR      r0,|L165.6700|
0016f2  f7fffffe          BL       uart_putchar
0016f6  210a              MOVS     r1,#0xa
0016f8  48cc              LDR      r0,|L165.6700|
0016fa  f7fffffe          BL       uart_putchar
0016fe  210a              MOVS     r1,#0xa
001700  48ca              LDR      r0,|L165.6700|
001702  f7fffffe          BL       uart_putchar
001706  210a              MOVS     r1,#0xa
001708  48c8              LDR      r0,|L165.6700|
00170a  f7fffffe          BL       uart_putchar
00170e  210a              MOVS     r1,#0xa
001710  48c6              LDR      r0,|L165.6700|
001712  f7fffffe          BL       uart_putchar
001716  210a              MOVS     r1,#0xa
001718  48c4              LDR      r0,|L165.6700|
00171a  f7fffffe          BL       uart_putchar
00171e  210a              MOVS     r1,#0xa
001720  48c2              LDR      r0,|L165.6700|
001722  f7fffffe          BL       uart_putchar
001726  210a              MOVS     r1,#0xa
001728  48c0              LDR      r0,|L165.6700|
00172a  f7fffffe          BL       uart_putchar
00172e  210a              MOVS     r1,#0xa
001730  48be              LDR      r0,|L165.6700|
001732  f7fffffe          BL       uart_putchar
001736  210a              MOVS     r1,#0xa
001738  48bc              LDR      r0,|L165.6700|
00173a  f7fffffe          BL       uart_putchar
00173e  210a              MOVS     r1,#0xa
001740  48ba              LDR      r0,|L165.6700|
001742  f7fffffe          BL       uart_putchar
001746  210a              MOVS     r1,#0xa
001748  48b8              LDR      r0,|L165.6700|
00174a  f7fffffe          BL       uart_putchar
00174e  210a              MOVS     r1,#0xa
001750  48b6              LDR      r0,|L165.6700|
001752  f7fffffe          BL       uart_putchar
001756  210a              MOVS     r1,#0xa
001758  48b4              LDR      r0,|L165.6700|
00175a  f7fffffe          BL       uart_putchar
00175e  210a              MOVS     r1,#0xa
001760  48b2              LDR      r0,|L165.6700|
001762  f7fffffe          BL       uart_putchar
001766  210a              MOVS     r1,#0xa
001768  48b0              LDR      r0,|L165.6700|
00176a  f7fffffe          BL       uart_putchar
00176e  210a              MOVS     r1,#0xa
001770  48ae              LDR      r0,|L165.6700|
001772  f7fffffe          BL       uart_putchar
001776  210a              MOVS     r1,#0xa
001778  48ac              LDR      r0,|L165.6700|
00177a  f7fffffe          BL       uart_putchar
00177e  210a              MOVS     r1,#0xa
001780  48aa              LDR      r0,|L165.6700|
001782  f7fffffe          BL       uart_putchar
001786  210a              MOVS     r1,#0xa
001788  48a8              LDR      r0,|L165.6700|
00178a  f7fffffe          BL       uart_putchar
00178e  210a              MOVS     r1,#0xa
001790  48a6              LDR      r0,|L165.6700|
001792  f7fffffe          BL       uart_putchar
001796  210a              MOVS     r1,#0xa
001798  48a4              LDR      r0,|L165.6700|
00179a  f7fffffe          BL       uart_putchar
00179e  210a              MOVS     r1,#0xa
0017a0  48a2              LDR      r0,|L165.6700|
0017a2  f7fffffe          BL       uart_putchar
0017a6  210a              MOVS     r1,#0xa
0017a8  48a0              LDR      r0,|L165.6700|
0017aa  f7fffffe          BL       uart_putchar
0017ae  210a              MOVS     r1,#0xa
0017b0  489e              LDR      r0,|L165.6700|
0017b2  f7fffffe          BL       uart_putchar
0017b6  210a              MOVS     r1,#0xa
0017b8  489c              LDR      r0,|L165.6700|
0017ba  f7fffffe          BL       uart_putchar
0017be  e000              B        |L165.6082|
                  |L165.6080|
0017c0  e2e4              B        |L165.7564|
                  |L165.6082|
0017c2  210a              MOVS     r1,#0xa
0017c4  4899              LDR      r0,|L165.6700|
0017c6  f7fffffe          BL       uart_putchar
0017ca  210a              MOVS     r1,#0xa
0017cc  4897              LDR      r0,|L165.6700|
0017ce  f7fffffe          BL       uart_putchar
0017d2  210a              MOVS     r1,#0xa
0017d4  4895              LDR      r0,|L165.6700|
0017d6  f7fffffe          BL       uart_putchar
0017da  210a              MOVS     r1,#0xa
0017dc  4893              LDR      r0,|L165.6700|
0017de  f7fffffe          BL       uart_putchar
0017e2  210a              MOVS     r1,#0xa
0017e4  4891              LDR      r0,|L165.6700|
0017e6  f7fffffe          BL       uart_putchar
0017ea  210a              MOVS     r1,#0xa
0017ec  488f              LDR      r0,|L165.6700|
0017ee  f7fffffe          BL       uart_putchar
0017f2  210a              MOVS     r1,#0xa
0017f4  488d              LDR      r0,|L165.6700|
0017f6  f7fffffe          BL       uart_putchar
0017fa  210a              MOVS     r1,#0xa
0017fc  488b              LDR      r0,|L165.6700|
0017fe  f7fffffe          BL       uart_putchar
001802  210a              MOVS     r1,#0xa
001804  4889              LDR      r0,|L165.6700|
001806  f7fffffe          BL       uart_putchar
00180a  210a              MOVS     r1,#0xa
00180c  4887              LDR      r0,|L165.6700|
00180e  f7fffffe          BL       uart_putchar
001812  210a              MOVS     r1,#0xa
001814  4885              LDR      r0,|L165.6700|
001816  f7fffffe          BL       uart_putchar
00181a  210a              MOVS     r1,#0xa
00181c  4883              LDR      r0,|L165.6700|
00181e  f7fffffe          BL       uart_putchar
001822  210a              MOVS     r1,#0xa
001824  4881              LDR      r0,|L165.6700|
001826  f7fffffe          BL       uart_putchar
00182a  210a              MOVS     r1,#0xa
00182c  487f              LDR      r0,|L165.6700|
00182e  f7fffffe          BL       uart_putchar
;;;2171   									//memset(data,0,1000);
;;;2172   														//timer counts to wait for characters in uart 1 									
;;;2173   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001832  bf00              NOP      
                  |L165.6196|
001834  497e              LDR      r1,|L165.6704|
001836  487f              LDR      r0,|L165.6708|
001838  f7fffffe          BL       strstr
00183c  2800              CMP      r0,#0
00183e  d109              BNE      |L165.6228|
001840  4972              LDR      r1,|L165.6668|
001842  487c              LDR      r0,|L165.6708|
001844  f7fffffe          BL       strstr
001848  2800              CMP      r0,#0
00184a  d103              BNE      |L165.6228|
00184c  4874              LDR      r0,|L165.6688|
00184e  6800              LDR      r0,[r0,#0]  ; tout
001850  2805              CMP      r0,#5
001852  ddef              BLE      |L165.6196|
                  |L165.6228|
;;;2174   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2175   									}
;;;2176   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001854  f7fffffe          BL       clear
;;;2177   									//clear();
;;;2178   									memset(data,0,strlen(data));
001858  4873              LDR      r0,|L165.6696|
00185a  f7fffffe          BL       strlen
00185e  4604              MOV      r4,r0
001860  4621              MOV      r1,r4
001862  4871              LDR      r0,|L165.6696|
001864  f7fffffe          BL       __aeabi_memclr
;;;2179   									clear();
001868  f7fffffe          BL       clear
;;;2180   									RESET_OFF;delay(100);
00186c  2020              MOVS     r0,#0x20
00186e  4972              LDR      r1,|L165.6712|
001870  6088              STR      r0,[r1,#8]
001872  2064              MOVS     r0,#0x64
001874  e000              B        |L165.6264|
                  |L165.6262|
001876  e3f1              B        |L165.8284|
                  |L165.6264|
001878  f7fffffe          BL       delay
;;;2181   									RESET_ON;delay(100);		
00187c  2020              MOVS     r0,#0x20
00187e  496e              LDR      r1,|L165.6712|
001880  6048              STR      r0,[r1,#4]
001882  2064              MOVS     r0,#0x64
001884  f7fffffe          BL       delay
                  |L165.6280|
;;;2182   }
;;;2183   	
;;;2184   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001888  2004              MOVS     r0,#4
00188a  4b6c              LDR      r3,|L165.6716|
00188c  4a60              LDR      r2,|L165.6672|
00188e  496c              LDR      r1,|L165.6720|
001890  9000              STR      r0,[sp,#0]
001892  486c              LDR      r0,|L165.6724|
001894  f7fffffe          BL       send_GSM
;;;2185   GPS_COLLECT2();
001898  f7fffffe          BL       GPS_COLLECT2
;;;2186   strcat(data,"CH\n");	
00189c  496a              LDR      r1,|L165.6728|
00189e  4862              LDR      r0,|L165.6696|
0018a0  f7fffffe          BL       strcat
;;;2187   memset(at_,0,100);
0018a4  2164              MOVS     r1,#0x64
0018a6  485c              LDR      r0,|L165.6680|
0018a8  f7fffffe          BL       __aeabi_memclr
;;;2188   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
0018ac  4a67              LDR      r2,|L165.6732|
0018ae  4968              LDR      r1,|L165.6736|
0018b0  4859              LDR      r0,|L165.6680|
0018b2  f7fffffe          BL       __2sprintf
;;;2189   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
0018b6  4867              LDR      r0,|L165.6740|
0018b8  6800              LDR      r0,[r0,#0]  ; tmeout
0018ba  4b60              LDR      r3,|L165.6716|
0018bc  4a54              LDR      r2,|L165.6672|
0018be  4960              LDR      r1,|L165.6720|
0018c0  9000              STR      r0,[sp,#0]
0018c2  4855              LDR      r0,|L165.6680|
0018c4  f7fffffe          BL       send_GSM
;;;2190   msg_sim800(); 
0018c8  f7fffffe          BL       msg_sim800
;;;2191   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
0018cc  2004              MOVS     r0,#4
0018ce  4b62              LDR      r3,|L165.6744|
0018d0  4a4f              LDR      r2,|L165.6672|
0018d2  495b              LDR      r1,|L165.6720|
0018d4  9000              STR      r0,[sp,#0]
0018d6  4861              LDR      r0,|L165.6748|
0018d8  f7fffffe          BL       send_GSM
;;;2192   GPS_COLLECT2();
0018dc  f7fffffe          BL       GPS_COLLECT2
;;;2193   strcat(data,"CH\n");	
0018e0  4959              LDR      r1,|L165.6728|
0018e2  4851              LDR      r0,|L165.6696|
0018e4  f7fffffe          BL       strcat
;;;2194   GPS_COLLECT2();
0018e8  f7fffffe          BL       GPS_COLLECT2
;;;2195   strcat(data,"CH\n");	
0018ec  4956              LDR      r1,|L165.6728|
0018ee  484e              LDR      r0,|L165.6696|
0018f0  f7fffffe          BL       strcat
;;;2196   
;;;2197   
;;;2198   msg_sim800(); 
0018f4  f7fffffe          BL       msg_sim800
;;;2199   GPS_COLLECT2();
0018f8  f7fffffe          BL       GPS_COLLECT2
;;;2200   strcat(data,"CH\n");	
0018fc  4952              LDR      r1,|L165.6728|
0018fe  484a              LDR      r0,|L165.6696|
001900  f7fffffe          BL       strcat
;;;2201   send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);		
001904  2001              MOVS     r0,#1
001906  4b54              LDR      r3,|L165.6744|
001908  4a41              LDR      r2,|L165.6672|
00190a  494d              LDR      r1,|L165.6720|
00190c  9000              STR      r0,[sp,#0]
00190e  4854              LDR      r0,|L165.6752|
001910  f7fffffe          BL       send_GSM
;;;2202   if(strstr(uart_string_gsm,"0.0.0.0"))
001914  4953              LDR      r1,|L165.6756|
001916  4847              LDR      r0,|L165.6708|
001918  f7fffffe          BL       strstr
00191c  2800              CMP      r0,#0
00191e  d001              BEQ      |L165.6436|
;;;2203   {
;;;2204   	reset_func();
001920  f7fffffe          BL       reset_func
                  |L165.6436|
;;;2205   }	
;;;2206   
;;;2207   //					delay(20);
;;;2208   
;;;2209   
;;;2210   msg_sim800(); 
001924  f7fffffe          BL       msg_sim800
;;;2211   
;;;2212   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001928  4b4f              LDR      r3,|L165.6760|
00192a  4a50              LDR      r2,|L165.6764|
00192c  4950              LDR      r1,|L165.6768|
00192e  483a              LDR      r0,|L165.6680|
001930  f7fffffe          BL       __2sprintf
;;;2213   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001934  4847              LDR      r0,|L165.6740|
001936  6800              LDR      r0,[r0,#0]  ; tmeout
001938  4b40              LDR      r3,|L165.6716|
00193a  4a34              LDR      r2,|L165.6668|
00193c  494d              LDR      r1,|L165.6772|
00193e  9000              STR      r0,[sp,#0]
001940  4835              LDR      r0,|L165.6680|
001942  f7fffffe          BL       send_GSM
;;;2214   						clear();
001946  f7fffffe          BL       clear
;;;2215   						
;;;2216   						
;;;2217   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
00194a  4842              LDR      r0,|L165.6740|
00194c  6800              LDR      r0,[r0,#0]  ; tmeout
00194e  4b4a              LDR      r3,|L165.6776|
001950  4a2e              LDR      r2,|L165.6668|
001952  4930              LDR      r1,|L165.6676|
001954  9000              STR      r0,[sp,#0]
001956  4849              LDR      r0,|L165.6780|
001958  f7fffffe          BL       send_GSM
;;;2218   //*****************************tcp_initialization ends**********************************//		
;;;2219   
;;;2220   			if(mystrstr(uart_string_gsm,'>')){
00195c  213e              MOVS     r1,#0x3e
00195e  4835              LDR      r0,|L165.6708|
001960  f7fffffe          BL       mystrstr
001964  2800              CMP      r0,#0
001966  d050              BEQ      |L165.6666|
;;;2221   									clear();
001968  f7fffffe          BL       clear
;;;2222   									memset(uart_string_gsm,0,5000);
00196c  4944              LDR      r1,|L165.6784|
00196e  4831              LDR      r0,|L165.6708|
001970  f7fffffe          BL       __aeabi_memclr
;;;2223   									qwe=strlen(data);
001974  482c              LDR      r0,|L165.6696|
001976  f7fffffe          BL       strlen
00197a  4942              LDR      r1,|L165.6788|
00197c  6008              STR      r0,[r1,#0]  ; qwe
;;;2224   									tout=0;
00197e  2000              MOVS     r0,#0
001980  4927              LDR      r1,|L165.6688|
001982  6008              STR      r0,[r1,#0]  ; tout
;;;2225   									k2=0;
001984  4925              LDR      r1,|L165.6684|
001986  6008              STR      r0,[r1,#0]  ; k2
;;;2226   									for(k=0;k<(qwe);k++)
001988  4926              LDR      r1,|L165.6692|
00198a  6008              STR      r0,[r1,#0]  ; k
00198c  e00b              B        |L165.6566|
                  |L165.6542|
;;;2227   									{
;;;2228   										uart_putchar(UART1_BASE_PTR, data[k]);
00198e  4826              LDR      r0,|L165.6696|
001990  4a24              LDR      r2,|L165.6692|
001992  6812              LDR      r2,[r2,#0]  ; k
001994  5c81              LDRB     r1,[r0,r2]
001996  4825              LDR      r0,|L165.6700|
001998  f7fffffe          BL       uart_putchar
00199c  4821              LDR      r0,|L165.6692|
00199e  6800              LDR      r0,[r0,#0]            ;2226  ; k
0019a0  1c40              ADDS     r0,r0,#1              ;2226
0019a2  4920              LDR      r1,|L165.6692|
0019a4  6008              STR      r0,[r1,#0]            ;2226  ; k
                  |L165.6566|
0019a6  481f              LDR      r0,|L165.6692|
0019a8  6800              LDR      r0,[r0,#0]            ;2226  ; k
0019aa  4936              LDR      r1,|L165.6788|
0019ac  6809              LDR      r1,[r1,#0]            ;2226  ; qwe
0019ae  4288              CMP      r0,r1                 ;2226
0019b0  dbed              BLT      |L165.6542|
;;;2229   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
0019b2  210a              MOVS     r1,#0xa
0019b4  481d              LDR      r0,|L165.6700|
0019b6  f7fffffe          BL       uart_putchar
0019ba  211a              MOVS     r1,#0x1a
0019bc  481b              LDR      r0,|L165.6700|
0019be  f7fffffe          BL       uart_putchar
0019c2  211a              MOVS     r1,#0x1a
0019c4  4819              LDR      r0,|L165.6700|
0019c6  f7fffffe          BL       uart_putchar
0019ca  211a              MOVS     r1,#0x1a
0019cc  4817              LDR      r0,|L165.6700|
0019ce  f7fffffe          BL       uart_putchar
0019d2  211a              MOVS     r1,#0x1a
0019d4  4815              LDR      r0,|L165.6700|
0019d6  f7fffffe          BL       uart_putchar
0019da  211a              MOVS     r1,#0x1a
0019dc  4813              LDR      r0,|L165.6700|
0019de  f7fffffe          BL       uart_putchar
0019e2  211a              MOVS     r1,#0x1a
0019e4  4811              LDR      r0,|L165.6700|
0019e6  f7fffffe          BL       uart_putchar
;;;2230   															do
0019ea  bf00              NOP      
                  |L165.6636|
;;;2231   																{q1=strstr(uart_string_gsm,"SEND OK");
0019ec  4926              LDR      r1,|L165.6792|
0019ee  4811              LDR      r0,|L165.6708|
0019f0  f7fffffe          BL       strstr
0019f4  4925              LDR      r1,|L165.6796|
0019f6  6008              STR      r0,[r1,#0]  ; q1
;;;2232   																	q2=strstr(uart_string_gsm, "ERROR");
0019f8  4904              LDR      r1,|L165.6668|
0019fa  480e              LDR      r0,|L165.6708|
0019fc  f7fffffe          BL       strstr
001a00  4923              LDR      r1,|L165.6800|
001a02  6008              STR      r0,[r1,#0]  ; q2
;;;2233   																		q3=strstr(uart_string_gsm, "FAIL");	
001a04  4923              LDR      r1,|L165.6804|
001a06  480b              LDR      r0,|L165.6708|
001a08  e046              B        |L165.6808|
                  |L165.6666|
001a0a  e1c0              B        |L165.7566|
                  |L165.6668|
                          DCD      ||.conststring||+0xe0
                  |L165.6672|
                          DCD      ||.conststring||+0x18
                  |L165.6676|
                          DCD      ||.conststring||+0x20
                  |L165.6680|
                          DCD      at_
                  |L165.6684|
                          DCD      ||k2||
                  |L165.6688|
                          DCD      tout
                  |L165.6692|
                          DCD      k
                  |L165.6696|
                          DCD      data
                  |L165.6700|
                          DCD      0x4006b000
                  |L165.6704|
                          DCD      ||.conststring||+0x70
                  |L165.6708|
                          DCD      uart_string_gsm
                  |L165.6712|
                          DCD      0x400ff080
                  |L165.6716|
                          DCD      ||.conststring||+0x10
                  |L165.6720|
                          DCD      ||.conststring||+0x2c
                  |L165.6724|
                          DCD      ||.conststring||+0x6fc
                  |L165.6728|
                          DCD      ||.conststring||+0x410
                  |L165.6732|
                          DCD      apn
                  |L165.6736|
                          DCD      ||.conststring||+0x70c
                  |L165.6740|
                          DCD      tmeout
                  |L165.6744|
                          DCD      ||.conststring||+0x678
                  |L165.6748|
                          DCD      ||.conststring||+0x720
                  |L165.6752|
                          DCD      ||.conststring||+0x730
                  |L165.6756|
                          DCD      ||.conststring||+0x740
                  |L165.6760|
                          DCD      port
                  |L165.6764|
                          DCD      ||ip||
                  |L165.6768|
                          DCD      ||.conststring||+0x748
                  |L165.6772|
                          DCD      ||.conststring||+0x6b0
                  |L165.6776|
                          DCD      ||.conststring||+0x768
                  |L165.6780|
                          DCD      ||.conststring||+0x6b8
                  |L165.6784|
                          DCD      0x00001388
                  |L165.6788|
                          DCD      qwe
                  |L165.6792|
                          DCD      ||.conststring||+0x668
                  |L165.6796|
                          DCD      ||q1||
                  |L165.6800|
                          DCD      ||q2||
                  |L165.6804|
                          DCD      ||.conststring||+0x670
                  |L165.6808|
001a98  f7fffffe          BL       strstr
001a9c  49fd              LDR      r1,|L165.7828|
001a9e  6008              STR      r0,[r1,#0]  ; q3
;;;2234   																			q4=strstr(uart_string_gsm, "DEACT");	
001aa0  49fd              LDR      r1,|L165.7832|
001aa2  48fe              LDR      r0,|L165.7836|
001aa4  f7fffffe          BL       strstr
001aa8  49fd              LDR      r1,|L165.7840|
001aaa  6008              STR      r0,[r1,#0]  ; q4
;;;2235   																	
;;;2236   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
001aac  48fd              LDR      r0,|L165.7844|
001aae  6800              LDR      r0,[r0,#0]  ; q1
001ab0  2800              CMP      r0,#0
001ab2  d10f              BNE      |L165.6868|
001ab4  48fc              LDR      r0,|L165.7848|
001ab6  6800              LDR      r0,[r0,#0]  ; q2
001ab8  2800              CMP      r0,#0
001aba  d10b              BNE      |L165.6868|
001abc  48f5              LDR      r0,|L165.7828|
001abe  6800              LDR      r0,[r0,#0]  ; q3
001ac0  2800              CMP      r0,#0
001ac2  d107              BNE      |L165.6868|
001ac4  4608              MOV      r0,r1
001ac6  6800              LDR      r0,[r0,#0]  ; q4
001ac8  2800              CMP      r0,#0
001aca  d103              BNE      |L165.6868|
001acc  48f7              LDR      r0,|L165.7852|
001ace  6800              LDR      r0,[r0,#0]  ; tout
001ad0  2808              CMP      r0,#8
001ad2  dd8b              BLE      |L165.6636|
                  |L165.6868|
;;;2237   															
;;;2238   																			delay(10);clear();
001ad4  200a              MOVS     r0,#0xa
001ad6  f7fffffe          BL       delay
001ada  f7fffffe          BL       clear
;;;2239   														uart_putchar(UART1_BASE_PTR,0x1A);
001ade  211a              MOVS     r1,#0x1a
001ae0  48f3              LDR      r0,|L165.7856|
001ae2  f7fffffe          BL       uart_putchar
;;;2240   												delay(10);
001ae6  200a              MOVS     r0,#0xa
001ae8  f7fffffe          BL       delay
;;;2241   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001aec  211a              MOVS     r1,#0x1a
001aee  48f0              LDR      r0,|L165.7856|
001af0  f7fffffe          BL       uart_putchar
001af4  211a              MOVS     r1,#0x1a
001af6  48ee              LDR      r0,|L165.7856|
001af8  f7fffffe          BL       uart_putchar
001afc  211a              MOVS     r1,#0x1a
001afe  48ec              LDR      r0,|L165.7856|
001b00  f7fffffe          BL       uart_putchar
;;;2242   delay(20);
001b04  2014              MOVS     r0,#0x14
001b06  f7fffffe          BL       delay
;;;2243   if(!strstr(uart_string_gsm,"SEND OK")){
001b0a  49ea              LDR      r1,|L165.7860|
001b0c  48e3              LDR      r0,|L165.7836|
001b0e  f7fffffe          BL       strstr
001b12  2800              CMP      r0,#0
001b14  d15c              BNE      |L165.7120|
;;;2244   
;;;2245   
;;;2246   	delay(100);
001b16  2064              MOVS     r0,#0x64
001b18  f7fffffe          BL       delay
;;;2247   		clear();//memset(uart_string_gsm,0,5000);
001b1c  f7fffffe          BL       clear
;;;2248   	
;;;2249   	memset(at_,0,100);
001b20  2164              MOVS     r1,#0x64
001b22  48e5              LDR      r0,|L165.7864|
001b24  f7fffffe          BL       __aeabi_memclr
;;;2250   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001b28  48e4              LDR      r0,|L165.7868|
001b2a  f7fffffe          BL       strlen
001b2e  1c44              ADDS     r4,r0,#1
001b30  4623              MOV      r3,r4
001b32  4ae3              LDR      r2,|L165.7872|
001b34  49e3              LDR      r1,|L165.7876|
001b36  48e0              LDR      r0,|L165.7864|
001b38  f7fffffe          BL       __2sprintf
;;;2251   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001b3c  2005              MOVS     r0,#5
001b3e  4be2              LDR      r3,|L165.7880|
001b40  4ae2              LDR      r2,|L165.7884|
001b42  49e3              LDR      r1,|L165.7888|
001b44  9000              STR      r0,[sp,#0]
001b46  48dc              LDR      r0,|L165.7864|
001b48  f7fffffe          BL       send_SD
;;;2252   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2253   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2254   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2255   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2256   //	}
;;;2257   	
;;;2258   clear();	
001b4c  f7fffffe          BL       clear
;;;2259   									k2=0;									//string array counter for uart 1
001b50  2000              MOVS     r0,#0
001b52  49e0              LDR      r1,|L165.7892|
001b54  6008              STR      r0,[r1,#0]  ; k2
;;;2260   									tout=0;	
001b56  49d5              LDR      r1,|L165.7852|
001b58  6008              STR      r0,[r1,#0]  ; tout
;;;2261   		for(k=0;k<strlen(data);k++)
001b5a  49df              LDR      r1,|L165.7896|
001b5c  6008              STR      r0,[r1,#0]  ; k
001b5e  e00b              B        |L165.7032|
                  |L165.7008|
;;;2262   		{
;;;2263   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001b60  48d6              LDR      r0,|L165.7868|
001b62  4add              LDR      r2,|L165.7896|
001b64  6812              LDR      r2,[r2,#0]  ; k
001b66  5c81              LDRB     r1,[r0,r2]
001b68  48d1              LDR      r0,|L165.7856|
001b6a  f7fffffe          BL       uart_putchar
001b6e  48da              LDR      r0,|L165.7896|
001b70  6800              LDR      r0,[r0,#0]            ;2261  ; k
001b72  1c40              ADDS     r0,r0,#1              ;2261
001b74  49d8              LDR      r1,|L165.7896|
001b76  6008              STR      r0,[r1,#0]            ;2261  ; k
                  |L165.7032|
001b78  48d0              LDR      r0,|L165.7868|
001b7a  f7fffffe          BL       strlen
001b7e  49d6              LDR      r1,|L165.7896|
001b80  6809              LDR      r1,[r1,#0]            ;2261  ; k
001b82  4288              CMP      r0,r1                 ;2261
001b84  d8ec              BHI      |L165.7008|
;;;2264   		}	
;;;2265   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001b86  210a              MOVS     r1,#0xa
001b88  48c9              LDR      r0,|L165.7856|
001b8a  f7fffffe          BL       uart_putchar
001b8e  210a              MOVS     r1,#0xa
001b90  48c7              LDR      r0,|L165.7856|
001b92  f7fffffe          BL       uart_putchar
001b96  210a              MOVS     r1,#0xa
001b98  48c5              LDR      r0,|L165.7856|
001b9a  f7fffffe          BL       uart_putchar
001b9e  210a              MOVS     r1,#0xa
001ba0  48c3              LDR      r0,|L165.7856|
001ba2  f7fffffe          BL       uart_putchar
001ba6  210a              MOVS     r1,#0xa
001ba8  48c1              LDR      r0,|L165.7856|
001baa  f7fffffe          BL       uart_putchar
001bae  210a              MOVS     r1,#0xa
001bb0  48bf              LDR      r0,|L165.7856|
001bb2  f7fffffe          BL       uart_putchar
001bb6  210a              MOVS     r1,#0xa
001bb8  48bd              LDR      r0,|L165.7856|
001bba  f7fffffe          BL       uart_putchar
001bbe  210a              MOVS     r1,#0xa
001bc0  48bb              LDR      r0,|L165.7856|
001bc2  f7fffffe          BL       uart_putchar
001bc6  210a              MOVS     r1,#0xa
001bc8  48b9              LDR      r0,|L165.7856|
001bca  f7fffffe          BL       uart_putchar
001bce  e000              B        |L165.7122|
                  |L165.7120|
001bd0  e23e              B        |L165.8272|
                  |L165.7122|
001bd2  210a              MOVS     r1,#0xa
001bd4  48b6              LDR      r0,|L165.7856|
001bd6  f7fffffe          BL       uart_putchar
001bda  210a              MOVS     r1,#0xa
001bdc  48b4              LDR      r0,|L165.7856|
001bde  f7fffffe          BL       uart_putchar
001be2  210a              MOVS     r1,#0xa
001be4  48b2              LDR      r0,|L165.7856|
001be6  f7fffffe          BL       uart_putchar
001bea  210a              MOVS     r1,#0xa
001bec  48b0              LDR      r0,|L165.7856|
001bee  f7fffffe          BL       uart_putchar
001bf2  210a              MOVS     r1,#0xa
001bf4  48ae              LDR      r0,|L165.7856|
001bf6  f7fffffe          BL       uart_putchar
001bfa  210a              MOVS     r1,#0xa
001bfc  48ac              LDR      r0,|L165.7856|
001bfe  f7fffffe          BL       uart_putchar
001c02  210a              MOVS     r1,#0xa
001c04  48aa              LDR      r0,|L165.7856|
001c06  f7fffffe          BL       uart_putchar
001c0a  210a              MOVS     r1,#0xa
001c0c  48a8              LDR      r0,|L165.7856|
001c0e  f7fffffe          BL       uart_putchar
001c12  210a              MOVS     r1,#0xa
001c14  48a6              LDR      r0,|L165.7856|
001c16  f7fffffe          BL       uart_putchar
001c1a  210a              MOVS     r1,#0xa
001c1c  48a4              LDR      r0,|L165.7856|
001c1e  f7fffffe          BL       uart_putchar
001c22  210a              MOVS     r1,#0xa
001c24  48a2              LDR      r0,|L165.7856|
001c26  f7fffffe          BL       uart_putchar
001c2a  210a              MOVS     r1,#0xa
001c2c  48a0              LDR      r0,|L165.7856|
001c2e  f7fffffe          BL       uart_putchar
001c32  210a              MOVS     r1,#0xa
001c34  489e              LDR      r0,|L165.7856|
001c36  f7fffffe          BL       uart_putchar
001c3a  210a              MOVS     r1,#0xa
001c3c  489c              LDR      r0,|L165.7856|
001c3e  f7fffffe          BL       uart_putchar
001c42  210a              MOVS     r1,#0xa
001c44  489a              LDR      r0,|L165.7856|
001c46  f7fffffe          BL       uart_putchar
001c4a  210a              MOVS     r1,#0xa
001c4c  4898              LDR      r0,|L165.7856|
001c4e  f7fffffe          BL       uart_putchar
001c52  210a              MOVS     r1,#0xa
001c54  4896              LDR      r0,|L165.7856|
001c56  f7fffffe          BL       uart_putchar
001c5a  210a              MOVS     r1,#0xa
001c5c  4894              LDR      r0,|L165.7856|
001c5e  f7fffffe          BL       uart_putchar
001c62  210a              MOVS     r1,#0xa
001c64  4892              LDR      r0,|L165.7856|
001c66  f7fffffe          BL       uart_putchar
001c6a  210a              MOVS     r1,#0xa
001c6c  4890              LDR      r0,|L165.7856|
001c6e  f7fffffe          BL       uart_putchar
001c72  210a              MOVS     r1,#0xa
001c74  488e              LDR      r0,|L165.7856|
001c76  f7fffffe          BL       uart_putchar
001c7a  210a              MOVS     r1,#0xa
001c7c  488c              LDR      r0,|L165.7856|
001c7e  f7fffffe          BL       uart_putchar
001c82  210a              MOVS     r1,#0xa
001c84  488a              LDR      r0,|L165.7856|
001c86  f7fffffe          BL       uart_putchar
001c8a  210a              MOVS     r1,#0xa
001c8c  4888              LDR      r0,|L165.7856|
001c8e  f7fffffe          BL       uart_putchar
001c92  210a              MOVS     r1,#0xa
001c94  4886              LDR      r0,|L165.7856|
001c96  f7fffffe          BL       uart_putchar
001c9a  210a              MOVS     r1,#0xa
001c9c  4884              LDR      r0,|L165.7856|
001c9e  f7fffffe          BL       uart_putchar
001ca2  210a              MOVS     r1,#0xa
001ca4  4882              LDR      r0,|L165.7856|
001ca6  f7fffffe          BL       uart_putchar
001caa  210a              MOVS     r1,#0xa
001cac  4880              LDR      r0,|L165.7856|
001cae  f7fffffe          BL       uart_putchar
001cb2  210a              MOVS     r1,#0xa
001cb4  487e              LDR      r0,|L165.7856|
001cb6  f7fffffe          BL       uart_putchar
001cba  210a              MOVS     r1,#0xa
001cbc  487c              LDR      r0,|L165.7856|
001cbe  f7fffffe          BL       uart_putchar
001cc2  210a              MOVS     r1,#0xa
001cc4  487a              LDR      r0,|L165.7856|
001cc6  f7fffffe          BL       uart_putchar
001cca  210a              MOVS     r1,#0xa
001ccc  4878              LDR      r0,|L165.7856|
001cce  f7fffffe          BL       uart_putchar
001cd2  210a              MOVS     r1,#0xa
001cd4  4876              LDR      r0,|L165.7856|
001cd6  f7fffffe          BL       uart_putchar
001cda  210a              MOVS     r1,#0xa
001cdc  4874              LDR      r0,|L165.7856|
001cde  f7fffffe          BL       uart_putchar
001ce2  210a              MOVS     r1,#0xa
001ce4  4872              LDR      r0,|L165.7856|
001ce6  f7fffffe          BL       uart_putchar
001cea  210a              MOVS     r1,#0xa
001cec  4870              LDR      r0,|L165.7856|
001cee  f7fffffe          BL       uart_putchar
001cf2  210a              MOVS     r1,#0xa
001cf4  486e              LDR      r0,|L165.7856|
001cf6  f7fffffe          BL       uart_putchar
001cfa  210a              MOVS     r1,#0xa
001cfc  486c              LDR      r0,|L165.7856|
001cfe  f7fffffe          BL       uart_putchar
001d02  210a              MOVS     r1,#0xa
001d04  486a              LDR      r0,|L165.7856|
001d06  f7fffffe          BL       uart_putchar
001d0a  210a              MOVS     r1,#0xa
001d0c  4868              LDR      r0,|L165.7856|
001d0e  f7fffffe          BL       uart_putchar
001d12  210a              MOVS     r1,#0xa
001d14  4866              LDR      r0,|L165.7856|
001d16  f7fffffe          BL       uart_putchar
001d1a  210a              MOVS     r1,#0xa
001d1c  4864              LDR      r0,|L165.7856|
001d1e  f7fffffe          BL       uart_putchar
001d22  210a              MOVS     r1,#0xa
001d24  4862              LDR      r0,|L165.7856|
001d26  f7fffffe          BL       uart_putchar
001d2a  210a              MOVS     r1,#0xa
001d2c  4860              LDR      r0,|L165.7856|
001d2e  f7fffffe          BL       uart_putchar
001d32  210a              MOVS     r1,#0xa
001d34  485e              LDR      r0,|L165.7856|
001d36  f7fffffe          BL       uart_putchar
001d3a  210a              MOVS     r1,#0xa
001d3c  485c              LDR      r0,|L165.7856|
001d3e  f7fffffe          BL       uart_putchar
001d42  210a              MOVS     r1,#0xa
001d44  485a              LDR      r0,|L165.7856|
001d46  f7fffffe          BL       uart_putchar
001d4a  210a              MOVS     r1,#0xa
001d4c  4858              LDR      r0,|L165.7856|
001d4e  f7fffffe          BL       uart_putchar
;;;2266   									//memset(data,0,1000);
;;;2267   														//timer counts to wait for characters in uart 1 									
;;;2268   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001d52  bf00              NOP      
                  |L165.7508|
001d54  4961              LDR      r1,|L165.7900|
001d56  4851              LDR      r0,|L165.7836|
001d58  f7fffffe          BL       strstr
001d5c  2800              CMP      r0,#0
001d5e  d109              BNE      |L165.7540|
001d60  4959              LDR      r1,|L165.7880|
001d62  484e              LDR      r0,|L165.7836|
001d64  f7fffffe          BL       strstr
001d68  2800              CMP      r0,#0
001d6a  d103              BNE      |L165.7540|
001d6c  484f              LDR      r0,|L165.7852|
001d6e  6800              LDR      r0,[r0,#0]  ; tout
001d70  2805              CMP      r0,#5
001d72  ddef              BLE      |L165.7508|
                  |L165.7540|
;;;2269   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2270   									}
;;;2271   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001d74  f7fffffe          BL       clear
;;;2272   									//clear();
;;;2273   									memset(data,0,strlen(data));
001d78  4850              LDR      r0,|L165.7868|
001d7a  f7fffffe          BL       strlen
001d7e  4604              MOV      r4,r0
001d80  4621              MOV      r1,r4
001d82  484e              LDR      r0,|L165.7868|
001d84  f7fffffe          BL       __aeabi_memclr
;;;2274   									clear();
001d88  f7fffffe          BL       clear
                  |L165.7564|
;;;2275   
;;;2276   								
;;;2277   break;
001d8c  e16f              B        |L165.8302|
                  |L165.7566|
;;;2278   //log_it();
;;;2279   }
;;;2280   			
;;;2281   			
;;;2282   			
;;;2283   			
;;;2284   			
;;;2285   			}
;;;2286   			else
;;;2287   			{
;;;2288   				
;;;2289   				
;;;2290   				
;;;2291   	delay(100);
001d8e  2064              MOVS     r0,#0x64
001d90  f7fffffe          BL       delay
;;;2292   		clear();//memset(uart_string_gsm,0,5000);
001d94  f7fffffe          BL       clear
;;;2293   	
;;;2294   	memset(at_,0,100);
001d98  2164              MOVS     r1,#0x64
001d9a  4847              LDR      r0,|L165.7864|
001d9c  f7fffffe          BL       __aeabi_memclr
;;;2295   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001da0  4846              LDR      r0,|L165.7868|
001da2  f7fffffe          BL       strlen
001da6  1c44              ADDS     r4,r0,#1
001da8  4623              MOV      r3,r4
001daa  4a45              LDR      r2,|L165.7872|
001dac  4945              LDR      r1,|L165.7876|
001dae  4842              LDR      r0,|L165.7864|
001db0  f7fffffe          BL       __2sprintf
;;;2296   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001db4  2005              MOVS     r0,#5
001db6  4b44              LDR      r3,|L165.7880|
001db8  4a44              LDR      r2,|L165.7884|
001dba  4945              LDR      r1,|L165.7888|
001dbc  9000              STR      r0,[sp,#0]
001dbe  483e              LDR      r0,|L165.7864|
001dc0  f7fffffe          BL       send_SD
;;;2297   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2298   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2299   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2300   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2301   //	}
;;;2302   	
;;;2303   clear();	
001dc4  f7fffffe          BL       clear
;;;2304   									k2=0;									//string array counter for uart 1
001dc8  2000              MOVS     r0,#0
001dca  4942              LDR      r1,|L165.7892|
001dcc  6008              STR      r0,[r1,#0]  ; k2
;;;2305   									tout=0;	
001dce  4937              LDR      r1,|L165.7852|
001dd0  6008              STR      r0,[r1,#0]  ; tout
;;;2306   		for(k=0;k<strlen(data);k++)
001dd2  4941              LDR      r1,|L165.7896|
001dd4  6008              STR      r0,[r1,#0]  ; k
001dd6  e00b              B        |L165.7664|
                  |L165.7640|
;;;2307   		{
;;;2308   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001dd8  4838              LDR      r0,|L165.7868|
001dda  4a3f              LDR      r2,|L165.7896|
001ddc  6812              LDR      r2,[r2,#0]  ; k
001dde  5c81              LDRB     r1,[r0,r2]
001de0  4833              LDR      r0,|L165.7856|
001de2  f7fffffe          BL       uart_putchar
001de6  483c              LDR      r0,|L165.7896|
001de8  6800              LDR      r0,[r0,#0]            ;2306  ; k
001dea  1c40              ADDS     r0,r0,#1              ;2306
001dec  493a              LDR      r1,|L165.7896|
001dee  6008              STR      r0,[r1,#0]            ;2306  ; k
                  |L165.7664|
001df0  4832              LDR      r0,|L165.7868|
001df2  f7fffffe          BL       strlen
001df6  4938              LDR      r1,|L165.7896|
001df8  6809              LDR      r1,[r1,#0]            ;2306  ; k
001dfa  4288              CMP      r0,r1                 ;2306
001dfc  d8ec              BHI      |L165.7640|
;;;2309   		}	
;;;2310   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001dfe  210a              MOVS     r1,#0xa
001e00  482b              LDR      r0,|L165.7856|
001e02  f7fffffe          BL       uart_putchar
001e06  210a              MOVS     r1,#0xa
001e08  4829              LDR      r0,|L165.7856|
001e0a  f7fffffe          BL       uart_putchar
001e0e  210a              MOVS     r1,#0xa
001e10  4827              LDR      r0,|L165.7856|
001e12  f7fffffe          BL       uart_putchar
001e16  210a              MOVS     r1,#0xa
001e18  4825              LDR      r0,|L165.7856|
001e1a  f7fffffe          BL       uart_putchar
001e1e  210a              MOVS     r1,#0xa
001e20  4823              LDR      r0,|L165.7856|
001e22  f7fffffe          BL       uart_putchar
001e26  210a              MOVS     r1,#0xa
001e28  4821              LDR      r0,|L165.7856|
001e2a  f7fffffe          BL       uart_putchar
001e2e  210a              MOVS     r1,#0xa
001e30  481f              LDR      r0,|L165.7856|
001e32  f7fffffe          BL       uart_putchar
001e36  210a              MOVS     r1,#0xa
001e38  481d              LDR      r0,|L165.7856|
001e3a  f7fffffe          BL       uart_putchar
001e3e  210a              MOVS     r1,#0xa
001e40  481b              LDR      r0,|L165.7856|
001e42  f7fffffe          BL       uart_putchar
001e46  210a              MOVS     r1,#0xa
001e48  4819              LDR      r0,|L165.7856|
001e4a  f7fffffe          BL       uart_putchar
001e4e  210a              MOVS     r1,#0xa
001e50  4817              LDR      r0,|L165.7856|
001e52  f7fffffe          BL       uart_putchar
001e56  210a              MOVS     r1,#0xa
001e58  4815              LDR      r0,|L165.7856|
001e5a  f7fffffe          BL       uart_putchar
001e5e  210a              MOVS     r1,#0xa
001e60  4813              LDR      r0,|L165.7856|
001e62  f7fffffe          BL       uart_putchar
001e66  210a              MOVS     r1,#0xa
001e68  4811              LDR      r0,|L165.7856|
001e6a  f7fffffe          BL       uart_putchar
001e6e  210a              MOVS     r1,#0xa
001e70  480f              LDR      r0,|L165.7856|
001e72  f7fffffe          BL       uart_putchar
001e76  210a              MOVS     r1,#0xa
001e78  480d              LDR      r0,|L165.7856|
001e7a  f7fffffe          BL       uart_putchar
001e7e  210a              MOVS     r1,#0xa
001e80  480b              LDR      r0,|L165.7856|
001e82  f7fffffe          BL       uart_putchar
001e86  210a              MOVS     r1,#0xa
001e88  4809              LDR      r0,|L165.7856|
001e8a  f7fffffe          BL       uart_putchar
001e8e  210a              MOVS     r1,#0xa
001e90  4807              LDR      r0,|L165.7856|
001e92  e025              B        |L165.7904|
                  |L165.7828|
                          DCD      ||q3||
                  |L165.7832|
                          DCD      ||.conststring||+0x678
                  |L165.7836|
                          DCD      uart_string_gsm
                  |L165.7840|
                          DCD      ||q4||
                  |L165.7844|
                          DCD      ||q1||
                  |L165.7848|
                          DCD      ||q2||
                  |L165.7852|
                          DCD      tout
                  |L165.7856|
                          DCD      0x4006b000
                  |L165.7860|
                          DCD      ||.conststring||+0x668
                  |L165.7864|
                          DCD      at_
                  |L165.7868|
                          DCD      data
                  |L165.7872|
                          DCD      drive
                  |L165.7876|
                          DCD      ||.conststring||+0x414
                  |L165.7880|
                          DCD      ||.conststring||+0xe0
                  |L165.7884|
                          DCD      ||.conststring||+0x18
                  |L165.7888|
                          DCD      ||.conststring||+0x20
                  |L165.7892|
                          DCD      ||k2||
                  |L165.7896|
                          DCD      k
                  |L165.7900|
                          DCD      ||.conststring||+0x70
                  |L165.7904|
001ee0  f7fffffe          BL       uart_putchar
001ee4  210a              MOVS     r1,#0xa
001ee6  4877              LDR      r0,|L165.8388|
001ee8  f7fffffe          BL       uart_putchar
001eec  210a              MOVS     r1,#0xa
001eee  4875              LDR      r0,|L165.8388|
001ef0  f7fffffe          BL       uart_putchar
001ef4  210a              MOVS     r1,#0xa
001ef6  4873              LDR      r0,|L165.8388|
001ef8  f7fffffe          BL       uart_putchar
001efc  210a              MOVS     r1,#0xa
001efe  4871              LDR      r0,|L165.8388|
001f00  f7fffffe          BL       uart_putchar
001f04  210a              MOVS     r1,#0xa
001f06  486f              LDR      r0,|L165.8388|
001f08  f7fffffe          BL       uart_putchar
001f0c  210a              MOVS     r1,#0xa
001f0e  486d              LDR      r0,|L165.8388|
001f10  f7fffffe          BL       uart_putchar
001f14  210a              MOVS     r1,#0xa
001f16  486b              LDR      r0,|L165.8388|
001f18  f7fffffe          BL       uart_putchar
001f1c  210a              MOVS     r1,#0xa
001f1e  4869              LDR      r0,|L165.8388|
001f20  f7fffffe          BL       uart_putchar
001f24  210a              MOVS     r1,#0xa
001f26  4867              LDR      r0,|L165.8388|
001f28  f7fffffe          BL       uart_putchar
001f2c  210a              MOVS     r1,#0xa
001f2e  4865              LDR      r0,|L165.8388|
001f30  f7fffffe          BL       uart_putchar
001f34  210a              MOVS     r1,#0xa
001f36  4863              LDR      r0,|L165.8388|
001f38  f7fffffe          BL       uart_putchar
001f3c  210a              MOVS     r1,#0xa
001f3e  4861              LDR      r0,|L165.8388|
001f40  f7fffffe          BL       uart_putchar
001f44  210a              MOVS     r1,#0xa
001f46  485f              LDR      r0,|L165.8388|
001f48  f7fffffe          BL       uart_putchar
001f4c  210a              MOVS     r1,#0xa
001f4e  485d              LDR      r0,|L165.8388|
001f50  f7fffffe          BL       uart_putchar
001f54  210a              MOVS     r1,#0xa
001f56  485b              LDR      r0,|L165.8388|
001f58  f7fffffe          BL       uart_putchar
001f5c  210a              MOVS     r1,#0xa
001f5e  4859              LDR      r0,|L165.8388|
001f60  f7fffffe          BL       uart_putchar
001f64  210a              MOVS     r1,#0xa
001f66  4857              LDR      r0,|L165.8388|
001f68  f7fffffe          BL       uart_putchar
001f6c  210a              MOVS     r1,#0xa
001f6e  4855              LDR      r0,|L165.8388|
001f70  f7fffffe          BL       uart_putchar
001f74  210a              MOVS     r1,#0xa
001f76  4853              LDR      r0,|L165.8388|
001f78  f7fffffe          BL       uart_putchar
001f7c  210a              MOVS     r1,#0xa
001f7e  4851              LDR      r0,|L165.8388|
001f80  f7fffffe          BL       uart_putchar
001f84  210a              MOVS     r1,#0xa
001f86  484f              LDR      r0,|L165.8388|
001f88  f7fffffe          BL       uart_putchar
001f8c  210a              MOVS     r1,#0xa
001f8e  484d              LDR      r0,|L165.8388|
001f90  f7fffffe          BL       uart_putchar
001f94  210a              MOVS     r1,#0xa
001f96  484b              LDR      r0,|L165.8388|
001f98  f7fffffe          BL       uart_putchar
001f9c  210a              MOVS     r1,#0xa
001f9e  4849              LDR      r0,|L165.8388|
001fa0  f7fffffe          BL       uart_putchar
001fa4  210a              MOVS     r1,#0xa
001fa6  4847              LDR      r0,|L165.8388|
001fa8  f7fffffe          BL       uart_putchar
001fac  210a              MOVS     r1,#0xa
001fae  4845              LDR      r0,|L165.8388|
001fb0  f7fffffe          BL       uart_putchar
001fb4  210a              MOVS     r1,#0xa
001fb6  4843              LDR      r0,|L165.8388|
001fb8  f7fffffe          BL       uart_putchar
001fbc  210a              MOVS     r1,#0xa
001fbe  4841              LDR      r0,|L165.8388|
001fc0  f7fffffe          BL       uart_putchar
001fc4  210a              MOVS     r1,#0xa
001fc6  483f              LDR      r0,|L165.8388|
001fc8  f7fffffe          BL       uart_putchar
001fcc  210a              MOVS     r1,#0xa
001fce  483d              LDR      r0,|L165.8388|
001fd0  f7fffffe          BL       uart_putchar
001fd4  210a              MOVS     r1,#0xa
001fd6  483b              LDR      r0,|L165.8388|
001fd8  f7fffffe          BL       uart_putchar
001fdc  210a              MOVS     r1,#0xa
001fde  4839              LDR      r0,|L165.8388|
001fe0  f7fffffe          BL       uart_putchar
001fe4  210a              MOVS     r1,#0xa
001fe6  4837              LDR      r0,|L165.8388|
001fe8  f7fffffe          BL       uart_putchar
001fec  210a              MOVS     r1,#0xa
001fee  4835              LDR      r0,|L165.8388|
001ff0  f7fffffe          BL       uart_putchar
001ff4  210a              MOVS     r1,#0xa
001ff6  4833              LDR      r0,|L165.8388|
001ff8  f7fffffe          BL       uart_putchar
001ffc  210a              MOVS     r1,#0xa
001ffe  4831              LDR      r0,|L165.8388|
002000  f7fffffe          BL       uart_putchar
002004  210a              MOVS     r1,#0xa
002006  482f              LDR      r0,|L165.8388|
002008  f7fffffe          BL       uart_putchar
00200c  210a              MOVS     r1,#0xa
00200e  482d              LDR      r0,|L165.8388|
002010  f7fffffe          BL       uart_putchar
;;;2311   									//memset(data,0,1000);
;;;2312   														//timer counts to wait for characters in uart 1 									
;;;2313   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002014  bf00              NOP      
                  |L165.8214|
002016  492c              LDR      r1,|L165.8392|
002018  482c              LDR      r0,|L165.8396|
00201a  f7fffffe          BL       strstr
00201e  2800              CMP      r0,#0
002020  d109              BNE      |L165.8246|
002022  492b              LDR      r1,|L165.8400|
002024  4829              LDR      r0,|L165.8396|
002026  f7fffffe          BL       strstr
00202a  2800              CMP      r0,#0
00202c  d103              BNE      |L165.8246|
00202e  4829              LDR      r0,|L165.8404|
002030  6800              LDR      r0,[r0,#0]  ; tout
002032  2805              CMP      r0,#5
002034  ddef              BLE      |L165.8214|
                  |L165.8246|
;;;2314   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2315   									}
;;;2316   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002036  f7fffffe          BL       clear
;;;2317   									//clear();
;;;2318   									memset(data,0,strlen(data));
00203a  4827              LDR      r0,|L165.8408|
00203c  f7fffffe          BL       strlen
002040  4604              MOV      r4,r0
002042  4621              MOV      r1,r4
002044  4824              LDR      r0,|L165.8408|
002046  f7fffffe          BL       __aeabi_memclr
;;;2319   									clear();
00204a  f7fffffe          BL       clear
;;;2320   
;;;2321   								
;;;2322   				
;;;2323   				//log_it();
;;;2324   			
;;;2325   			
;;;2326   			
;;;2327   			
;;;2328   			break;
00204e  e00e              B        |L165.8302|
                  |L165.8272|
;;;2329   			}
;;;2330   //			memset(at_,0,100);
;;;2331   //			sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
;;;2332   //			send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2333   //			parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
;;;2334   //			fsz=stof(fsize);//7523.7412
;;;2335   //			times=(fsz/1256)+1;
;;;2336   		}	
;;;2337   	
;;;2338   //
;;;2339   if(rtcticks2>=1500){break;}		
002050  4822              LDR      r0,|L165.8412|
002052  6800              LDR      r0,[r0,#0]  ; rtcticks2
002054  4922              LDR      r1,|L165.8416|
002056  4288              CMP      r0,r1
002058  db01              BLT      |L165.8286|
00205a  e008              B        |L165.8302|
                  |L165.8284|
00205c  e7ff              B        |L165.8286|
                  |L165.8286|
00205e  4821              LDR      r0,|L165.8420|
002060  6800              LDR      r0,[r0,#0]            ;1789  ; k5
002062  4921              LDR      r1,|L165.8424|
002064  6809              LDR      r1,[r1,#0]            ;1789  ; times
002066  4288              CMP      r0,r1                 ;1789
002068  dc01              BGT      |L165.8302|
00206a  f7fef808          BL       |L165.126|
                  |L165.8302|
00206e  bf00              NOP                            ;1790
;;;2340   }
;;;2341   
;;;2342   if(((k5>=times) && log0!=1)){
002070  481c              LDR      r0,|L165.8420|
002072  6800              LDR      r0,[r0,#0]  ; k5
002074  491c              LDR      r1,|L165.8424|
002076  6809              LDR      r1,[r1,#0]  ; times
002078  4288              CMP      r0,r1
00207a  db1e              BLT      |L165.8378|
00207c  481b              LDR      r0,|L165.8428|
00207e  6800              LDR      r0,[r0,#0]  ; log0
002080  2801              CMP      r0,#1
002082  d01a              BEQ      |L165.8378|
;;;2343   	cursorvaluepr=0;times=-2;k5=0;
002084  2000              MOVS     r0,#0
002086  491a              LDR      r1,|L165.8432|
002088  6008              STR      r0,[r1,#0]  ; cursorvaluepr
00208a  1e80              SUBS     r0,r0,#2
00208c  4916              LDR      r1,|L165.8424|
00208e  6008              STR      r0,[r1,#0]  ; times
002090  2000              MOVS     r0,#0
002092  4914              LDR      r1,|L165.8420|
002094  6008              STR      r0,[r1,#0]  ; k5
;;;2344   	memset(at_,0,100);
002096  2164              MOVS     r1,#0x64
002098  4816              LDR      r0,|L165.8436|
00209a  f7fffffe          BL       __aeabi_memclr
;;;2345   	sprintf(at_,"\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
00209e  4a16              LDR      r2,|L165.8440|
0020a0  4916              LDR      r1,|L165.8444|
0020a2  4814              LDR      r0,|L165.8436|
0020a4  f7fffffe          BL       __2sprintf
;;;2346   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
0020a8  4815              LDR      r0,|L165.8448|
0020aa  6800              LDR      r0,[r0,#0]  ; tmeout
0020ac  4b15              LDR      r3,|L165.8452|
0020ae  4a16              LDR      r2,|L165.8456|
0020b0  4916              LDR      r1,|L165.8460|
0020b2  9000              STR      r0,[sp,#0]
0020b4  480f              LDR      r0,|L165.8436|
0020b6  f7fffffe          BL       send_GSM
                  |L165.8378|
;;;2347   
;;;2348   }		
;;;2349   
;;;2350   int_erval=temp;
0020ba  4815              LDR      r0,|L165.8464|
0020bc  6800              LDR      r0,[r0,#0]  ; temp
0020be  4915              LDR      r1,|L165.8468|
0020c0  6008              STR      r0,[r1,#0]  ; int_erval
;;;2351   }
0020c2  bd7c              POP      {r2-r6,pc}
;;;2352   
                          ENDP

                  |L165.8388|
                          DCD      0x4006b000
                  |L165.8392|
                          DCD      ||.conststring||+0x70
                  |L165.8396|
                          DCD      uart_string_gsm
                  |L165.8400|
                          DCD      ||.conststring||+0xe0
                  |L165.8404|
                          DCD      tout
                  |L165.8408|
                          DCD      data
                  |L165.8412|
                          DCD      rtcticks2
                  |L165.8416|
                          DCD      0x000005dc
                  |L165.8420|
                          DCD      ||k5||
                  |L165.8424|
                          DCD      times
                  |L165.8428|
                          DCD      log0
                  |L165.8432|
                          DCD      cursorvaluepr
                  |L165.8436|
                          DCD      at_
                  |L165.8440|
                          DCD      drive
                  |L165.8444|
                          DCD      ||.conststring||+0x778
                  |L165.8448|
                          DCD      tmeout
                  |L165.8452|
                          DCD      ||.conststring||+0x10
                  |L165.8456|
                          DCD      ||.conststring||+0x18
                  |L165.8460|
                          DCD      ||.conststring||+0x2c
                  |L165.8464|
                          DCD      temp
                  |L165.8468|
                          DCD      int_erval

                          AREA ||i.readapn||, COMGROUP=readapn, CODE, READONLY, ALIGN=2

                  readapn PROC
;;;1184   
;;;1185   __inline void readapn()
000000  b51c              PUSH     {r2-r4,lr}
;;;1186   {
;;;1187   	memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480c              LDR      r0,|L172.56|
000006  f7fffffe          BL       __aeabi_memclr
;;;1188   		sprintf(at_, "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n");		
00000a  490c              LDR      r1,|L172.60|
00000c  480a              LDR      r0,|L172.56|
00000e  f7fffffe          BL       __2sprintf
;;;1189   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0a              LDR      r3,|L172.64|
000016  4a0b              LDR      r2,|L172.68|
000018  490b              LDR      r1,|L172.72|
00001a  9000              STR      r0,[sp,#0]
00001c  4806              LDR      r0,|L172.56|
00001e  f7fffffe          BL       send_GSM
;;;1190   	
;;;1191   		parse_g(uart_string_gsm, 1,2, '|', '|',apn);
000022  480a              LDR      r0,|L172.76|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2202              MOVS     r2,#2
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2101              MOVS     r1,#1
000030  4807              LDR      r0,|L172.80|
000032  f7fffffe          BL       parse_g
;;;1192   	
;;;1193   	
;;;1194   }
000036  bd1c              POP      {r2-r4,pc}
;;;1195   
                          ENDP

                  |L172.56|
                          DCD      at_
                  |L172.60|
                          DCD      ||.conststring||+0x794
                  |L172.64|
                          DCD      ||.conststring||+0x10
                  |L172.68|
                          DCD      ||.conststring||+0x18
                  |L172.72|
                          DCD      ||.conststring||+0x2c
                  |L172.76|
                          DCD      apn
                  |L172.80|
                          DCD      uart_string_gsm

                          AREA ||i.ignread||, COMGROUP=ignread, CODE, READONLY, ALIGN=2

                  ignread PROC
;;;1291   
;;;1292   __inline void ignread(){
000000  b508              PUSH     {r3,lr}
;;;1293   memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4813              LDR      r0,|L179.84|
000006  f7fffffe          BL       __aeabi_memclr
;;;1294   		sprintf(at_, "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n");		
00000a  4913              LDR      r1,|L179.88|
00000c  4811              LDR      r0,|L179.84|
00000e  f7fffffe          BL       __2sprintf
;;;1295   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b11              LDR      r3,|L179.92|
000016  4a12              LDR      r2,|L179.96|
000018  4912              LDR      r1,|L179.100|
00001a  9000              STR      r0,[sp,#0]
00001c  480d              LDR      r0,|L179.84|
00001e  f7fffffe          BL       send_GSM
;;;1296   if(strstr(uart_string_gsm,"ION")){IGNITION_ON;FUEL_ON;}
000022  4911              LDR      r1,|L179.104|
000024  4811              LDR      r0,|L179.108|
000026  f7fffffe          BL       strstr
00002a  2800              CMP      r0,#0
00002c  d005              BEQ      |L179.58|
00002e  2002              MOVS     r0,#2
000030  490f              LDR      r1,|L179.112|
000032  6088              STR      r0,[r1,#8]
000034  2004              MOVS     r0,#4
000036  6088              STR      r0,[r1,#8]
000038  e00a              B        |L179.80|
                  |L179.58|
;;;1297   else if(strstr(uart_string_gsm,"IOFF")){IGNITION_OFF;FUEL_OFF;}
00003a  490e              LDR      r1,|L179.116|
00003c  480b              LDR      r0,|L179.108|
00003e  f7fffffe          BL       strstr
000042  2800              CMP      r0,#0
000044  d004              BEQ      |L179.80|
000046  2002              MOVS     r0,#2
000048  4909              LDR      r1,|L179.112|
00004a  6048              STR      r0,[r1,#4]
00004c  2004              MOVS     r0,#4
00004e  6048              STR      r0,[r1,#4]
                  |L179.80|
;;;1298   
;;;1299   }	
000050  bd08              POP      {r3,pc}
;;;1300   	
                          ENDP

000052  0000              DCW      0x0000
                  |L179.84|
                          DCD      at_
                  |L179.88|
                          DCD      ||.conststring||+0x7b4
                  |L179.92|
                          DCD      ||.conststring||+0x10
                  |L179.96|
                          DCD      ||.conststring||+0x18
                  |L179.100|
                          DCD      ||.conststring||+0x2c
                  |L179.104|
                          DCD      ||.conststring||+0x7d4
                  |L179.108|
                          DCD      uart_string_gsm
                  |L179.112|
                          DCD      0x400ff000
                  |L179.116|
                          DCD      ||.conststring||+0x7d8

                          AREA ||i.readcursor||, COMGROUP=readcursor, CODE, READONLY, ALIGN=2

                  readcursor PROC
;;;1344   	
;;;1345   __inline void readcursor()
000000  b51c              PUSH     {r2-r4,lr}
;;;1346   {
;;;1347   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4824              LDR      r0,|L186.152|
000006  f7fffffe          BL       __aeabi_memclr
;;;1348   		sprintf(at_, "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n");		
00000a  4924              LDR      r1,|L186.156|
00000c  4822              LDR      r0,|L186.152|
00000e  f7fffffe          BL       __2sprintf
;;;1349   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b22              LDR      r3,|L186.160|
000016  4a23              LDR      r2,|L186.164|
000018  4923              LDR      r1,|L186.168|
00001a  9000              STR      r0,[sp,#0]
00001c  481e              LDR      r0,|L186.152|
00001e  f7fffffe          BL       send_GSM
;;;1350   		memset(at_,0,100);
000022  2164              MOVS     r1,#0x64
000024  481c              LDR      r0,|L186.152|
000026  f7fffffe          BL       __aeabi_memclr
;;;1351   		parse_g(uart_string_gsm, 4,5, ',', ',',at_);
00002a  481b              LDR      r0,|L186.152|
00002c  212c              MOVS     r1,#0x2c
00002e  460b              MOV      r3,r1
000030  2205              MOVS     r2,#5
000032  9100              STR      r1,[sp,#0]
000034  9001              STR      r0,[sp,#4]
000036  2104              MOVS     r1,#4
000038  481c              LDR      r0,|L186.172|
00003a  f7fffffe          BL       parse_g
;;;1352   		times=myAtoi(at_);		
00003e  4816              LDR      r0,|L186.152|
000040  f7fffffe          BL       myAtoi
000044  491a              LDR      r1,|L186.176|
000046  6008              STR      r0,[r1,#0]  ; times
;;;1353   		memset(at_,0,100);
000048  2164              MOVS     r1,#0x64
00004a  4813              LDR      r0,|L186.152|
00004c  f7fffffe          BL       __aeabi_memclr
;;;1354   		parse_g(uart_string_gsm, 5,6, ',', ',',at_);
000050  4811              LDR      r0,|L186.152|
000052  212c              MOVS     r1,#0x2c
000054  460b              MOV      r3,r1
000056  2206              MOVS     r2,#6
000058  9100              STR      r1,[sp,#0]
00005a  9001              STR      r0,[sp,#4]
00005c  2105              MOVS     r1,#5
00005e  4813              LDR      r0,|L186.172|
000060  f7fffffe          BL       parse_g
;;;1355   		k5=myAtoi(at_);		
000064  480c              LDR      r0,|L186.152|
000066  f7fffffe          BL       myAtoi
00006a  4912              LDR      r1,|L186.180|
00006c  6008              STR      r0,[r1,#0]  ; k5
;;;1356   		memset(at_,0,100);
00006e  2164              MOVS     r1,#0x64
000070  4809              LDR      r0,|L186.152|
000072  f7fffffe          BL       __aeabi_memclr
;;;1357   		parse_g(uart_string_gsm, 6,7, ',', ',',at_);
000076  4808              LDR      r0,|L186.152|
000078  212c              MOVS     r1,#0x2c
00007a  460b              MOV      r3,r1
00007c  2207              MOVS     r2,#7
00007e  9100              STR      r1,[sp,#0]
000080  9001              STR      r0,[sp,#4]
000082  2106              MOVS     r1,#6
000084  4809              LDR      r0,|L186.172|
000086  f7fffffe          BL       parse_g
;;;1358   		cursorvaluepr=myAtoi(at_);		
00008a  4803              LDR      r0,|L186.152|
00008c  f7fffffe          BL       myAtoi
000090  4909              LDR      r1,|L186.184|
000092  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1359   
;;;1360   
;;;1361   }	
000094  bd1c              POP      {r2-r4,pc}
;;;1362   	
                          ENDP

000096  0000              DCW      0x0000
                  |L186.152|
                          DCD      at_
                  |L186.156|
                          DCD      ||.conststring||+0x7e0
                  |L186.160|
                          DCD      ||.conststring||+0x10
                  |L186.164|
                          DCD      ||.conststring||+0x18
                  |L186.168|
                          DCD      ||.conststring||+0x2c
                  |L186.172|
                          DCD      uart_string_gsm
                  |L186.176|
                          DCD      times
                  |L186.180|
                          DCD      ||k5||
                  |L186.184|
                          DCD      cursorvaluepr

                          AREA ||i.LED_init||, COMGROUP=LED_init, CODE, READONLY, ALIGN=2

                  LED_init PROC
;;;26     
;;;27     __inline void LED_init(void){
000000  483f              LDR      r0,|L193.256|
;;;28       
;;;29         SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK ;      //Turn on clock to PORTE & D module
000002  6b80              LDR      r0,[r0,#0x38]
000004  210f              MOVS     r1,#0xf
000006  0289              LSLS     r1,r1,#10
000008  4308              ORRS     r0,r0,r1
00000a  493d              LDR      r1,|L193.256|
00000c  6388              STR      r0,[r1,#0x38]
;;;30     
;;;31     
;;;32     	
;;;33     
;;;34     		PORTE_PCR29 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
00000e  1588              ASRS     r0,r1,#22
000010  493c              LDR      r1,|L193.260|
000012  6348              STR      r0,[r1,#0x34]
;;;35       	PORTD_PCR7 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000014  493c              LDR      r1,|L193.264|
000016  61c8              STR      r0,[r1,#0x1c]
;;;36         PORTE_PCR31 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000018  493a              LDR      r1,|L193.260|
00001a  63c8              STR      r0,[r1,#0x3c]
;;;37         PORTD_PCR5 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode
00001c  493a              LDR      r1,|L193.264|
00001e  6148              STR      r0,[r1,#0x14]
;;;38     	
;;;39         PORTC_PCR5 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000020  493a              LDR      r1,|L193.268|
000022  6148              STR      r0,[r1,#0x14]
;;;40         PORTC_PCR6 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000024  6188              STR      r0,[r1,#0x18]
;;;41         PORTC_PCR7 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	
000026  61c8              STR      r0,[r1,#0x1c]
;;;42         PORTC_PCR8 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	    
000028  6208              STR      r0,[r1,#0x20]
;;;43         PORTB_PCR2 = PORT_PCR_MUX(0x1);             //Set the PTB2 pin multiplexer to GPIO mode	   
00002a  4939              LDR      r1,|L193.272|
00002c  6088              STR      r0,[r1,#8]
;;;44     
;;;45     	
;;;46     	PORTB_PCR2 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
00002e  1c80              ADDS     r0,r0,#2
000030  6088              STR      r0,[r1,#8]
;;;47     		
;;;48     	PORTB_PCR1 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000032  6048              STR      r0,[r1,#4]
;;;49     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;50     	PTB->PDDR &= ~MASK(ADCIGN);
000034  4837              LDR      r0,|L193.276|
000036  6940              LDR      r0,[r0,#0x14]
000038  2102              MOVS     r1,#2
00003a  4388              BICS     r0,r0,r1
00003c  4935              LDR      r1,|L193.276|
00003e  6148              STR      r0,[r1,#0x14]
;;;51     	GPIOD_PDDR |= (1<<7);
000040  4834              LDR      r0,|L193.276|
000042  3080              ADDS     r0,r0,#0x80
000044  6940              LDR      r0,[r0,#0x14]
000046  2180              MOVS     r1,#0x80
000048  4308              ORRS     r0,r0,r1
00004a  4932              LDR      r1,|L193.276|
00004c  3180              ADDS     r1,r1,#0x80
00004e  6148              STR      r0,[r1,#0x14]
;;;52     
;;;53     	PORTB_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000050  20ff              MOVS     r0,#0xff
000052  3003              ADDS     r0,#3
000054  492e              LDR      r1,|L193.272|
000056  6008              STR      r0,[r1,#0]
;;;54     	PORTC_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; //		GPIOB_PDDR = 0;
000058  1c40              ADDS     r0,r0,#1
00005a  492c              LDR      r1,|L193.268|
00005c  6008              STR      r0,[r1,#0]
;;;55     
;;;56     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;57     	//PTB->PDDR &= ~MASK(ADCIGN);
;;;58     //	GPIOD_PDDR |= (1<<7);
;;;59     
;;;60     	  
;;;61         GPIOE_PSOR |= RED_SHIFT | GREEN_SHIFT;      //Set the initial output state to high
00005e  482d              LDR      r0,|L193.276|
000060  30c0              ADDS     r0,r0,#0xc0
000062  6840              LDR      r0,[r0,#4]
000064  2105              MOVS     r1,#5
000066  0749              LSLS     r1,r1,#29
000068  4308              ORRS     r0,r0,r1
00006a  492a              LDR      r1,|L193.276|
00006c  31c0              ADDS     r1,r1,#0xc0
00006e  6048              STR      r0,[r1,#4]
;;;62         GPIOD_PSOR |= BLUE_SHIFT;               	//Set the inital output state to high
000070  4828              LDR      r0,|L193.276|
000072  3080              ADDS     r0,r0,#0x80
000074  6840              LDR      r0,[r0,#4]
000076  2120              MOVS     r1,#0x20
000078  4308              ORRS     r0,r0,r1
00007a  4926              LDR      r1,|L193.276|
00007c  3180              ADDS     r1,r1,#0x80
00007e  6048              STR      r0,[r1,#4]
;;;63     		GPIOC_PSOR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT; 
000080  4824              LDR      r0,|L193.276|
000082  3040              ADDS     r0,r0,#0x40
000084  6840              LDR      r0,[r0,#4]
000086  21ff              MOVS     r1,#0xff
000088  31c1              ADDS     r1,r1,#0xc1
00008a  4308              ORRS     r0,r0,r1
00008c  4921              LDR      r1,|L193.276|
00008e  3140              ADDS     r1,r1,#0x40
000090  6048              STR      r0,[r1,#4]
;;;64     		GPIOC_PSOR |= RESET_SHIFT;
000092  4608              MOV      r0,r1
000094  6840              LDR      r0,[r0,#4]
000096  2120              MOVS     r1,#0x20
000098  4308              ORRS     r0,r0,r1
00009a  491e              LDR      r1,|L193.276|
00009c  3140              ADDS     r1,r1,#0x40
00009e  6048              STR      r0,[r1,#4]
;;;65         
;;;66         GPIOE_PDDR |= RED_SHIFT | GREEN_SHIFT;  //Set the pin's direction to output
0000a0  481c              LDR      r0,|L193.276|
0000a2  30c0              ADDS     r0,r0,#0xc0
0000a4  6940              LDR      r0,[r0,#0x14]
0000a6  2105              MOVS     r1,#5
0000a8  0749              LSLS     r1,r1,#29
0000aa  4308              ORRS     r0,r0,r1
0000ac  4919              LDR      r1,|L193.276|
0000ae  31c0              ADDS     r1,r1,#0xc0
0000b0  6148              STR      r0,[r1,#0x14]
;;;67         GPIOD_PDDR |= BLUE_SHIFT;               //Set the pin's direction to output
0000b2  4818              LDR      r0,|L193.276|
0000b4  3080              ADDS     r0,r0,#0x80
0000b6  6940              LDR      r0,[r0,#0x14]
0000b8  2120              MOVS     r1,#0x20
0000ba  4308              ORRS     r0,r0,r1
0000bc  4915              LDR      r1,|L193.276|
0000be  3180              ADDS     r1,r1,#0x80
0000c0  6148              STR      r0,[r1,#0x14]
;;;68     		GPIOC_PDDR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT | RESET_SHIFT; 
0000c2  4814              LDR      r0,|L193.276|
0000c4  3040              ADDS     r0,r0,#0x40
0000c6  6940              LDR      r0,[r0,#0x14]
0000c8  21ff              MOVS     r1,#0xff
0000ca  31e1              ADDS     r1,r1,#0xe1
0000cc  4308              ORRS     r0,r0,r1
0000ce  4911              LDR      r1,|L193.276|
0000d0  3140              ADDS     r1,r1,#0x40
0000d2  6148              STR      r0,[r1,#0x14]
;;;69         
;;;70         RED_ON;		//Turn off RED LED
0000d4  0588              LSLS     r0,r1,#22
0000d6  490f              LDR      r1,|L193.276|
0000d8  31c0              ADDS     r1,r1,#0xc0
0000da  6088              STR      r0,[r1,#8]
;;;71         GREEN_ON;	//Turn off GREEN LED
0000dc  0080              LSLS     r0,r0,#2
0000de  6088              STR      r0,[r1,#8]
;;;72         BLUE_ON;		//Turn off BLUE LED
0000e0  2020              MOVS     r0,#0x20
0000e2  490c              LDR      r1,|L193.276|
0000e4  3180              ADDS     r1,r1,#0x80
0000e6  6088              STR      r0,[r1,#8]
;;;73     		REDBAT_ON;
0000e8  2040              MOVS     r0,#0x40
0000ea  490a              LDR      r1,|L193.276|
0000ec  3140              ADDS     r1,r1,#0x40
0000ee  6088              STR      r0,[r1,#8]
;;;74     		GREENBAT_ON;
0000f0  2080              MOVS     r0,#0x80
0000f2  6088              STR      r0,[r1,#8]
;;;75     		BLUEBAT_ON;
0000f4  0040              LSLS     r0,r0,#1
0000f6  6088              STR      r0,[r1,#8]
;;;76     		RESET_ON;
0000f8  2020              MOVS     r0,#0x20
0000fa  6048              STR      r0,[r1,#4]
;;;77     		
;;;78     	
;;;79     }
0000fc  4770              BX       lr
;;;80     
                          ENDP

0000fe  0000              DCW      0x0000
                  |L193.256|
                          DCD      0x40048000
                  |L193.260|
                          DCD      0x4004d040
                  |L193.264|
                          DCD      0x4004c000
                  |L193.268|
                          DCD      0x4004b000
                  |L193.272|
                          DCD      0x4004a000
                  |L193.276|
                          DCD      0x400ff040

                          AREA ||i.ignstatoff||, COMGROUP=ignstatoff, CODE, READONLY, ALIGN=2

                  ignstatoff PROC
;;;1281   }	
;;;1282   __inline void ignstatoff(){
000000  b508              PUSH     {r3,lr}
;;;1283   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L200.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L200.64|
000008  4a0e              LDR      r2,|L200.68|
00000a  490f              LDR      r1,|L200.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L200.76|
000010  f7fffffe          BL       send_GSM
;;;1284   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L200.64|
000018  4a0a              LDR      r2,|L200.68|
00001a  490d              LDR      r1,|L200.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L200.84|
000020  f7fffffe          BL       send_GSM
;;;1285   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1286   send_GSM("\nIOFF\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L200.64|
00002e  4a05              LDR      r2,|L200.68|
000030  4909              LDR      r1,|L200.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L200.92|
000036  f7fffffe          BL       send_GSM
;;;1287   
;;;1288   
;;;1289   }		
00003a  bd08              POP      {r3,pc}
;;;1290   
                          ENDP

                  |L200.60|
                          DCD      tmeout
                  |L200.64|
                          DCD      ||.conststring||+0x10
                  |L200.68|
                          DCD      ||.conststring||+0x18
                  |L200.72|
                          DCD      ||.conststring||+0x2c
                  |L200.76|
                          DCD      ||.conststring||+0x30
                  |L200.80|
                          DCD      ||.conststring||+0x20
                  |L200.84|
                          DCD      ||.conststring||+0x4c
                  |L200.88|
                          DCD      ||.conststring||+0x70
                  |L200.92|
                          DCD      ||.conststring||+0x804

                          AREA ||i.clear2||, COMGROUP=clear2, CODE, READONLY, ALIGN=2

                  clear2 PROC
;;;1428   
;;;1429   __inline void clear2()
000000  4803              LDR      r0,|L206.16|
;;;1430   {
;;;1431   //    if (UART_S1_REG(UART2_BASE_PTR) & UART_S1_OR_MASK)
;;;1432   //    {
;;;1433   //      temp = UART_D_REG(UART2_BASE_PTR);
;;;1434   //    }
;;;1435   
;;;1436   	UART_S1_REG(UART2_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000002  7900              LDRB     r0,[r0,#4]
000004  2118              MOVS     r1,#0x18
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L206.16|
00000a  7108              STRB     r0,[r1,#4]
;;;1437   }	
00000c  4770              BX       lr
;;;1438   
                          ENDP

00000e  0000              DCW      0x0000
                  |L206.16|
                          DCD      0x4006c000

                          AREA ||i.savecursord||, COMGROUP=savecursord, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursord PROC
;;;1334   }	
;;;1335   	__inline void savecursord(){
000000  b508              PUSH     {r3,lr}
;;;1336   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4814              LDR      r0,|L212.84|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b14              LDR      r3,|L212.88|
000008  4a14              LDR      r2,|L212.92|
00000a  4915              LDR      r1,|L212.96|
00000c  9000              STR      r0,[sp,#0]
00000e  4815              LDR      r0,|L212.100|
000010  f7fffffe          BL       send_GSM
;;;1337   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b10              LDR      r3,|L212.88|
000018  4a10              LDR      r2,|L212.92|
00001a  4913              LDR      r1,|L212.104|
00001c  9000              STR      r0,[sp,#0]
00001e  4813              LDR      r0,|L212.108|
000020  f7fffffe          BL       send_GSM
;;;1338   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1339   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4810              LDR      r0,|L212.112|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1340   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",0,0,0);		
000032  2000              MOVS     r0,#0
000034  4603              MOV      r3,r0
000036  4602              MOV      r2,r0
000038  490e              LDR      r1,|L212.116|
00003a  9000              STR      r0,[sp,#0]
00003c  480c              LDR      r0,|L212.112|
00003e  f7fffffe          BL       __2sprintf
;;;1341   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000042  200a              MOVS     r0,#0xa
000044  4b04              LDR      r3,|L212.88|
000046  4a05              LDR      r2,|L212.92|
000048  4905              LDR      r1,|L212.96|
00004a  9000              STR      r0,[sp,#0]
00004c  4808              LDR      r0,|L212.112|
00004e  f7fffffe          BL       send_GSM
;;;1342   }	
000052  bd08              POP      {r3,pc}
;;;1343   		
                          ENDP

                  |L212.84|
                          DCD      tmeout
                  |L212.88|
                          DCD      ||.conststring||+0x10
                  |L212.92|
                          DCD      ||.conststring||+0x18
                  |L212.96|
                          DCD      ||.conststring||+0x2c
                  |L212.100|
                          DCD      ||.conststring||+0x560
                  |L212.104|
                          DCD      ||.conststring||+0x20
                  |L212.108|
                          DCD      ||.conststring||+0x580
                  |L212.112|
                          DCD      at_
                  |L212.116|
                          DCD      ||.conststring||+0x5a8

                          AREA ||i.read_ip_port||, COMGROUP=read_ip_port, CODE, READONLY, ALIGN=2

                  read_ip_port PROC
;;;1301   	
;;;1302   __inline void read_ip_port()
000000  b51c              PUSH     {r2-r4,lr}
;;;1303   {
;;;1304   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4811              LDR      r0,|L218.76|
000006  f7fffffe          BL       __aeabi_memclr
;;;1305   	//	memset(ip,0,strlen(ip));
;;;1306   		//memset(port,0,strlen(port));
;;;1307   		sprintf(at_, "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n");		
00000a  4911              LDR      r1,|L218.80|
00000c  480f              LDR      r0,|L218.76|
00000e  f7fffffe          BL       __2sprintf
;;;1308   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0f              LDR      r3,|L218.84|
000016  4a10              LDR      r2,|L218.88|
000018  4910              LDR      r1,|L218.92|
00001a  9000              STR      r0,[sp,#0]
00001c  480b              LDR      r0,|L218.76|
00001e  f7fffffe          BL       send_GSM
;;;1309   		parse_g(uart_string_gsm, 2,3, '|', '|',ip);
000022  480f              LDR      r0,|L218.96|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480c              LDR      r0,|L218.100|
000032  f7fffffe          BL       parse_g
;;;1310   		parse_g(uart_string_gsm, 4,5, '|', '|',port);
000036  480c              LDR      r0,|L218.104|
000038  217c              MOVS     r1,#0x7c
00003a  460b              MOV      r3,r1
00003c  2205              MOVS     r2,#5
00003e  9100              STR      r1,[sp,#0]
000040  9001              STR      r0,[sp,#4]
000042  2104              MOVS     r1,#4
000044  4807              LDR      r0,|L218.100|
000046  f7fffffe          BL       parse_g
;;;1311   	
;;;1312   }		
00004a  bd1c              POP      {r2-r4,pc}
;;;1313   	
                          ENDP

                  |L218.76|
                          DCD      at_
                  |L218.80|
                          DCD      ||.conststring||+0x810
                  |L218.84|
                          DCD      ||.conststring||+0x10
                  |L218.88|
                          DCD      ||.conststring||+0x18
                  |L218.92|
                          DCD      ||.conststring||+0x2c
                  |L218.96|
                          DCD      ||ip||
                  |L218.100|
                          DCD      uart_string_gsm
                  |L218.104|
                          DCD      port

                          AREA ||i.read_interval||, COMGROUP=read_interval, CODE, READONLY, ALIGN=2

                  read_interval PROC
;;;1313   	
;;;1314   __inline void read_interval()
000000  b51c              PUSH     {r2-r4,lr}
;;;1315   {
;;;1316   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480f              LDR      r0,|L224.68|
000006  f7fffffe          BL       __aeabi_memclr
;;;1317   		sprintf(at_, "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n");		
00000a  490f              LDR      r1,|L224.72|
00000c  480d              LDR      r0,|L224.68|
00000e  f7fffffe          BL       __2sprintf
;;;1318   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0d              LDR      r3,|L224.76|
000016  4a0e              LDR      r2,|L224.80|
000018  490e              LDR      r1,|L224.84|
00001a  9000              STR      r0,[sp,#0]
00001c  4809              LDR      r0,|L224.68|
00001e  f7fffffe          BL       send_GSM
;;;1319   		parse_g(uart_string_gsm, 2,3, '|', '|',interval);
000022  480d              LDR      r0,|L224.88|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480a              LDR      r0,|L224.92|
000032  f7fffffe          BL       parse_g
;;;1320   		int_erval=myAtoi(interval);		
000036  4808              LDR      r0,|L224.88|
000038  f7fffffe          BL       myAtoi
00003c  4908              LDR      r1,|L224.96|
00003e  6008              STR      r0,[r1,#0]  ; int_erval
;;;1321   
;;;1322   
;;;1323   }	
000040  bd1c              POP      {r2-r4,pc}
;;;1324   
                          ENDP

000042  0000              DCW      0x0000
                  |L224.68|
                          DCD      at_
                  |L224.72|
                          DCD      ||.conststring||+0x834
                  |L224.76|
                          DCD      ||.conststring||+0x10
                  |L224.80|
                          DCD      ||.conststring||+0x18
                  |L224.84|
                          DCD      ||.conststring||+0x2c
                  |L224.88|
                          DCD      interval
                  |L224.92|
                          DCD      uart_string_gsm
                  |L224.96|
                          DCD      int_erval

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L230.24|
                  |L230.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L230.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L230.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_vts_ver2_c_tout____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REVSH|
#line 402
|__asm___10_vts_ver2_c_tout____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
