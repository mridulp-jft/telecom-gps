; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -I"F:\vts-ver18 - tESTING\build\keil\vts_ver3_rev1\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_SD PROC
;;;54     
;;;55     void send_SD(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;56     {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;57     	clear();
00000c  f7fffffe          BL       clear
;;;58     	tout=0;
000010  2000              MOVS     r0,#0
000012  49fd              LDR      r1,|L1.1032|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;59     		memset(uart_string_gsm,0,5000);
000016  49fd              LDR      r1,|L1.1036|
000018  48fd              LDR      r0,|L1.1040|
00001a  f7fffffe          BL       __aeabi_memclr
;;;60     		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  49fc              LDR      r1,|L1.1044|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;61     		clear();
000024  f7fffffe          BL       clear
;;;62     		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;63     		
;;;64     		delay(10);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       delay
;;;65     		uart_putchar(UART1_BASE_PTR,'\r');//uart_putchar(UART1_BASE_PTR,'\r');
000034  210d              MOVS     r1,#0xd
000036  48f8              LDR      r0,|L1.1048|
000038  f7fffffe          BL       uart_putchar
;;;66     	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;67     		do
00003c  bf00              NOP      
                  |L1.62|
;;;68     		{
;;;69     			
;;;70     //					time111--;
;;;71     //				  timeout222--;
;;;72     
;;;73     			
;;;74     	cond122=strstr(uart_string_gsm, responseA);
00003e  48f4              LDR      r0,|L1.1040|
000040  9902              LDR      r1,[sp,#8]
000042  f7fffffe          BL       strstr
000046  49f5              LDR      r1,|L1.1052|
000048  6008              STR      r0,[r1,#0]  ; cond122
;;;75     	cond123=strstr(uart_string_gsm, responseB);
00004a  4621              MOV      r1,r4
00004c  48f0              LDR      r0,|L1.1040|
00004e  f7fffffe          BL       strstr
000052  49f3              LDR      r1,|L1.1056|
000054  6008              STR      r0,[r1,#0]  ; cond123
;;;76       cond124=strstr(uart_string_gsm, responseC);
000056  4629              MOV      r1,r5
000058  48ed              LDR      r0,|L1.1040|
00005a  f7fffffe          BL       strstr
00005e  49f1              LDR      r1,|L1.1060|
000060  6008              STR      r0,[r1,#0]  ; cond124
;;;77     	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
000062  48ee              LDR      r0,|L1.1052|
000064  6800              LDR      r0,[r0,#0]  ; cond122
000066  2800              CMP      r0,#0
000068  d10b              BNE      |L1.130|
00006a  48ed              LDR      r0,|L1.1056|
00006c  6800              LDR      r0,[r0,#0]  ; cond123
00006e  2800              CMP      r0,#0
000070  d107              BNE      |L1.130|
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]  ; cond124
000076  2800              CMP      r0,#0
000078  d103              BNE      |L1.130|
00007a  48e3              LDR      r0,|L1.1032|
00007c  6800              LDR      r0,[r0,#0]  ; tout
00007e  42b0              CMP      r0,r6
000080  dd01              BLE      |L1.134|
                  |L1.130|
000082  2001              MOVS     r0,#1
000084  e000              B        |L1.136|
                  |L1.134|
000086  2000              MOVS     r0,#0
                  |L1.136|
000088  49e7              LDR      r1,|L1.1064|
00008a  7008              STRB     r0,[r1,#0]
;;;78     			
;;;79     		}while (!cond121);
00008c  4608              MOV      r0,r1
00008e  7800              LDRB     r0,[r0,#0]  ; cond121
000090  2800              CMP      r0,#0
000092  d0d4              BEQ      |L1.62|
;;;80     		clear();
000094  f7fffffe          BL       clear
;;;81     		if(tout>timeout){
000098  48db              LDR      r0,|L1.1032|
00009a  6800              LDR      r0,[r0,#0]  ; tout
00009c  42b0              CMP      r0,r6
00009e  dd17              BLE      |L1.208|
;;;82     			uart_putchar(UART1_BASE_PTR,'\r');
0000a0  210d              MOVS     r1,#0xd
0000a2  48dd              LDR      r0,|L1.1048|
0000a4  f7fffffe          BL       uart_putchar
;;;83     		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000a8  210a              MOVS     r1,#0xa
0000aa  48db              LDR      r0,|L1.1048|
0000ac  f7fffffe          BL       uart_putchar
0000b0  211a              MOVS     r1,#0x1a
0000b2  48d9              LDR      r0,|L1.1048|
0000b4  f7fffffe          BL       uart_putchar
;;;84     		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000b8  211a              MOVS     r1,#0x1a
0000ba  48d7              LDR      r0,|L1.1048|
0000bc  f7fffffe          BL       uart_putchar
0000c0  210d              MOVS     r1,#0xd
0000c2  48d5              LDR      r0,|L1.1048|
0000c4  f7fffffe          BL       uart_putchar
;;;85     		uart_putchar(UART1_BASE_PTR,'\n');}
0000c8  210a              MOVS     r1,#0xa
0000ca  48d3              LDR      r0,|L1.1048|
0000cc  f7fffffe          BL       uart_putchar
                  |L1.208|
;;;86     		//return;
;;;87     //		return uart_string_gsm;
;;;88     
;;;89     }
0000d0  b005              ADD      sp,sp,#0x14
0000d2  bdf0              POP      {r4-r7,pc}
;;;90     
                          ENDP

                  mystrstr PROC
;;;59     
;;;60     char mystrstr(char* str1, char character)
0000d4  b570              PUSH     {r4-r6,lr}
;;;61     {
0000d6  4604              MOV      r4,r0
0000d8  460d              MOV      r5,r1
;;;62     	sz=strlen(str1);
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       strlen
0000e0  49d2              LDR      r1,|L1.1068|
0000e2  6008              STR      r0,[r1,#0]  ; sz
;;;63     	for(cn=0;cn<=sz;cn++)
0000e4  2000              MOVS     r0,#0
0000e6  49d2              LDR      r1,|L1.1072|
0000e8  6008              STR      r0,[r1,#0]  ; cn
0000ea  e00b              B        |L1.260|
                  |L1.236|
;;;64     	{if(str1[cn] == character)
0000ec  48d0              LDR      r0,|L1.1072|
0000ee  6800              LDR      r0,[r0,#0]  ; cn
0000f0  5c20              LDRB     r0,[r4,r0]
0000f2  42a8              CMP      r0,r5
0000f4  d101              BNE      |L1.250|
;;;65     		{return 1;}
0000f6  2001              MOVS     r0,#1
                  |L1.248|
;;;66     	}
;;;67     	return 0;
;;;68     }
0000f8  bd70              POP      {r4-r6,pc}
                  |L1.250|
0000fa  48cd              LDR      r0,|L1.1072|
0000fc  6800              LDR      r0,[r0,#0]            ;63  ; cn
0000fe  1c40              ADDS     r0,r0,#1              ;63
000100  49cb              LDR      r1,|L1.1072|
000102  6008              STR      r0,[r1,#0]            ;63  ; cn
                  |L1.260|
000104  48ca              LDR      r0,|L1.1072|
000106  6800              LDR      r0,[r0,#0]            ;63  ; cn
000108  49c8              LDR      r1,|L1.1068|
00010a  6809              LDR      r1,[r1,#0]            ;63  ; sz
00010c  4288              CMP      r0,r1                 ;63
00010e  dded              BLE      |L1.236|
000110  2000              MOVS     r0,#0                 ;67
000112  e7f1              B        |L1.248|
;;;69     
                          ENDP

                  LED_state2 PROC
;;;240    
;;;241    void LED_state2(void)
000114  b500              PUSH     {lr}
;;;242    {
;;;243    if(sleep_flag == 1)
000116  48c7              LDR      r0,|L1.1076|
000118  6800              LDR      r0,[r0,#0]  ; sleep_flag
00011a  2801              CMP      r0,#1
00011c  d102              BNE      |L1.292|
;;;244    {stateCount=99;
00011e  2063              MOVS     r0,#0x63
000120  49c5              LDR      r1,|L1.1080|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;245    }	
;;;246    			
;;;247    	switch(stateCount){
000124  48c4              LDR      r0,|L1.1080|
000126  7800              LDRB     r0,[r0,#0]  ; stateCount
000128  0003              MOVS     r3,r0
00012a  f7fffffe          BL       __ARM_common_switch8
00012e  0604              DCB      0x06,0x04
000130  0f1a2530          DCB      0x0f,0x1a,0x25,0x30
000134  3b46              DCB      0x3b,0x46
;;;248    	
;;;249    
;;;250                case 0:     //Red
;;;251                       RED_ON;
000136  2001              MOVS     r0,#1
000138  0740              LSLS     r0,r0,#29
00013a  49c0              LDR      r1,|L1.1084|
00013c  6088              STR      r0,[r1,#8]
;;;252                       GREEN_OFF;
00013e  0080              LSLS     r0,r0,#2
000140  6048              STR      r0,[r1,#4]
;;;253                       BLUE_OFF;
000142  2020              MOVS     r0,#0x20
000144  49bd              LDR      r1,|L1.1084|
000146  3940              SUBS     r1,r1,#0x40
000148  6048              STR      r0,[r1,#4]
;;;254                       break;
00014a  e044              B        |L1.470|
;;;255    
;;;256                case 1:	//Yellow
;;;257    		               RED_ON;
00014c  2001              MOVS     r0,#1
00014e  0740              LSLS     r0,r0,#29
000150  49ba              LDR      r1,|L1.1084|
000152  6088              STR      r0,[r1,#8]
;;;258    		               GREEN_ON;
000154  0080              LSLS     r0,r0,#2
000156  6088              STR      r0,[r1,#8]
;;;259    		               BLUE_OFF;
000158  2020              MOVS     r0,#0x20
00015a  49b8              LDR      r1,|L1.1084|
00015c  3940              SUBS     r1,r1,#0x40
00015e  6048              STR      r0,[r1,#4]
;;;260    		               break;
000160  e039              B        |L1.470|
;;;261    				
;;;262                case 2:	//Green
;;;263    		               RED_OFF;
000162  2001              MOVS     r0,#1
000164  0740              LSLS     r0,r0,#29
000166  49b5              LDR      r1,|L1.1084|
000168  6048              STR      r0,[r1,#4]
;;;264    		               GREEN_ON;
00016a  0080              LSLS     r0,r0,#2
00016c  6088              STR      r0,[r1,#8]
;;;265    		               BLUE_OFF;
00016e  2020              MOVS     r0,#0x20
000170  49b2              LDR      r1,|L1.1084|
000172  3940              SUBS     r1,r1,#0x40
000174  6048              STR      r0,[r1,#4]
;;;266    		               break;
000176  e02e              B        |L1.470|
;;;267    				
;;;268                case 3:	//Blue
;;;269    		               RED_OFF;
000178  2001              MOVS     r0,#1
00017a  0740              LSLS     r0,r0,#29
00017c  49af              LDR      r1,|L1.1084|
00017e  6048              STR      r0,[r1,#4]
;;;270    		               GREEN_OFF;
000180  0080              LSLS     r0,r0,#2
000182  6048              STR      r0,[r1,#4]
;;;271    		               BLUE_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L1.1084|
000188  3940              SUBS     r1,r1,#0x40
00018a  6088              STR      r0,[r1,#8]
;;;272    		               break;
00018c  e023              B        |L1.470|
;;;273    				
;;;274                case 4:	//Violet
;;;275    		               RED_ON;
00018e  2001              MOVS     r0,#1
000190  0740              LSLS     r0,r0,#29
000192  49aa              LDR      r1,|L1.1084|
000194  6088              STR      r0,[r1,#8]
;;;276    		               GREEN_OFF;
000196  0080              LSLS     r0,r0,#2
000198  6048              STR      r0,[r1,#4]
;;;277    		               BLUE_ON;
00019a  2020              MOVS     r0,#0x20
00019c  49a7              LDR      r1,|L1.1084|
00019e  3940              SUBS     r1,r1,#0x40
0001a0  6088              STR      r0,[r1,#8]
;;;278    		               break;
0001a2  e018              B        |L1.470|
;;;279    				
;;;280                case 5:	//White
;;;281    		              RED_ON;
0001a4  2001              MOVS     r0,#1
0001a6  0740              LSLS     r0,r0,#29
0001a8  49a4              LDR      r1,|L1.1084|
0001aa  6088              STR      r0,[r1,#8]
;;;282    		              GREEN_ON;
0001ac  0080              LSLS     r0,r0,#2
0001ae  6088              STR      r0,[r1,#8]
;;;283    		              BLUE_ON;
0001b0  2020              MOVS     r0,#0x20
0001b2  49a2              LDR      r1,|L1.1084|
0001b4  3940              SUBS     r1,r1,#0x40
0001b6  6088              STR      r0,[r1,#8]
;;;284    		              break;
0001b8  e00d              B        |L1.470|
;;;285    				
;;;286                default:	//Red
;;;287    
;;;288    		              RED_OFF;
0001ba  2001              MOVS     r0,#1
0001bc  0740              LSLS     r0,r0,#29
0001be  499f              LDR      r1,|L1.1084|
0001c0  6048              STR      r0,[r1,#4]
;;;289    		              GREEN_OFF;
0001c2  0080              LSLS     r0,r0,#2
0001c4  6048              STR      r0,[r1,#4]
;;;290    		              BLUE_OFF;
0001c6  2020              MOVS     r0,#0x20
0001c8  499c              LDR      r1,|L1.1084|
0001ca  3940              SUBS     r1,r1,#0x40
0001cc  6048              STR      r0,[r1,#4]
;;;291    		              stateCount = 0;	//Reset state counter
0001ce  2000              MOVS     r0,#0
0001d0  4999              LDR      r1,|L1.1080|
0001d2  7008              STRB     r0,[r1,#0]
;;;292    			      break;
0001d4  bf00              NOP      
                  |L1.470|
0001d6  bf00              NOP                            ;254
;;;293    
;;;294        }
;;;295    	
;;;296    }
0001d8  bd00              POP      {pc}
;;;297    
                          ENDP

                  parse_gsm PROC
;;;1569   
;;;1570   void parse_gsm(char *str, int first, int sec, char *string)
0001da  b5f8              PUSH     {r3-r7,lr}
;;;1571   {
0001dc  4604              MOV      r4,r0
0001de  460e              MOV      r6,r1
0001e0  4617              MOV      r7,r2
0001e2  461d              MOV      r5,r3
;;;1572   
;;;1573   		delay(10);		
0001e4  200a              MOVS     r0,#0xa
0001e6  f7fffffe          BL       delay
;;;1574   		memset(string,0,15);
0001ea  210f              MOVS     r1,#0xf
0001ec  4628              MOV      r0,r5
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1575   		for(i11=0,temp11=0;i11<100;i11++)
0001f2  2000              MOVS     r0,#0
0001f4  4992              LDR      r1,|L1.1088|
0001f6  6008              STR      r0,[r1,#0]  ; i11
0001f8  4992              LDR      r1,|L1.1092|
0001fa  6008              STR      r0,[r1,#0]  ; temp11
0001fc  e01a              B        |L1.564|
                  |L1.510|
;;;1576   		{
;;;1577   		if(str[i11]=='"')
0001fe  4890              LDR      r0,|L1.1088|
000200  6800              LDR      r0,[r0,#0]  ; i11
000202  5c20              LDRB     r0,[r4,r0]
000204  2822              CMP      r0,#0x22
000206  d108              BNE      |L1.538|
;;;1578   			{temp11++;j11=i11;}
000208  488e              LDR      r0,|L1.1092|
00020a  6800              LDR      r0,[r0,#0]  ; temp11
00020c  1c40              ADDS     r0,r0,#1
00020e  498d              LDR      r1,|L1.1092|
000210  6008              STR      r0,[r1,#0]  ; temp11
000212  488b              LDR      r0,|L1.1088|
000214  6800              LDR      r0,[r0,#0]  ; i11
000216  498c              LDR      r1,|L1.1096|
000218  6008              STR      r0,[r1,#0]  ; j11
                  |L1.538|
;;;1579   		else{}
;;;1580   			
;;;1581   		if(temp11>=sec){i11=900;}
00021a  488a              LDR      r0,|L1.1092|
00021c  6800              LDR      r0,[r0,#0]  ; temp11
00021e  42b8              CMP      r0,r7
000220  db03              BLT      |L1.554|
000222  20e1              MOVS     r0,#0xe1
000224  0080              LSLS     r0,r0,#2
000226  4986              LDR      r1,|L1.1088|
000228  6008              STR      r0,[r1,#0]  ; i11
                  |L1.554|
00022a  4885              LDR      r0,|L1.1088|
00022c  6800              LDR      r0,[r0,#0]            ;1575  ; i11
00022e  1c40              ADDS     r0,r0,#1              ;1575
000230  4983              LDR      r1,|L1.1088|
000232  6008              STR      r0,[r1,#0]            ;1575  ; i11
                  |L1.564|
000234  4882              LDR      r0,|L1.1088|
000236  6800              LDR      r0,[r0,#0]            ;1575  ; i11
000238  2864              CMP      r0,#0x64              ;1575
00023a  dbe0              BLT      |L1.510|
;;;1582   		else{}	
;;;1583   		
;;;1584   		}	
;;;1585   		
;;;1586   		for(i11=0,temp11=0;i11<100;i11++)
00023c  2000              MOVS     r0,#0
00023e  4980              LDR      r1,|L1.1088|
000240  6008              STR      r0,[r1,#0]  ; i11
000242  4980              LDR      r1,|L1.1092|
000244  6008              STR      r0,[r1,#0]  ; temp11
000246  e01a              B        |L1.638|
                  |L1.584|
;;;1587   		{
;;;1588   		if(str[i11]=='"')
000248  487d              LDR      r0,|L1.1088|
00024a  6800              LDR      r0,[r0,#0]  ; i11
00024c  5c20              LDRB     r0,[r4,r0]
00024e  2822              CMP      r0,#0x22
000250  d108              BNE      |L1.612|
;;;1589   			{temp11++;l=i11;}										
000252  487c              LDR      r0,|L1.1092|
000254  6800              LDR      r0,[r0,#0]  ; temp11
000256  1c40              ADDS     r0,r0,#1
000258  497a              LDR      r1,|L1.1092|
00025a  6008              STR      r0,[r1,#0]  ; temp11
00025c  4878              LDR      r0,|L1.1088|
00025e  6800              LDR      r0,[r0,#0]  ; i11
000260  497a              LDR      r1,|L1.1100|
000262  6008              STR      r0,[r1,#0]  ; l
                  |L1.612|
;;;1590   		else{}
;;;1591   		if(temp11>=first){i11=900;}else{}
000264  4877              LDR      r0,|L1.1092|
000266  6800              LDR      r0,[r0,#0]  ; temp11
000268  42b0              CMP      r0,r6
00026a  db03              BLT      |L1.628|
00026c  20e1              MOVS     r0,#0xe1
00026e  0080              LSLS     r0,r0,#2
000270  4973              LDR      r1,|L1.1088|
000272  6008              STR      r0,[r1,#0]  ; i11
                  |L1.628|
000274  4872              LDR      r0,|L1.1088|
000276  6800              LDR      r0,[r0,#0]            ;1586  ; i11
000278  1c40              ADDS     r0,r0,#1              ;1586
00027a  4971              LDR      r1,|L1.1088|
00027c  6008              STR      r0,[r1,#0]            ;1586  ; i11
                  |L1.638|
00027e  4870              LDR      r0,|L1.1088|
000280  6800              LDR      r0,[r0,#0]            ;1586  ; i11
000282  2864              CMP      r0,#0x64              ;1586
000284  dbe0              BLT      |L1.584|
;;;1592   		}	
;;;1593   		for(i11=0;i11<(j11-l-1);i11++)
000286  2000              MOVS     r0,#0
000288  496d              LDR      r1,|L1.1088|
00028a  6008              STR      r0,[r1,#0]  ; i11
00028c  e00e              B        |L1.684|
                  |L1.654|
;;;1594   		{
;;;1595   		string[i11] = str[l+i11+1];
00028e  486f              LDR      r0,|L1.1100|
000290  6800              LDR      r0,[r0,#0]  ; l
000292  496b              LDR      r1,|L1.1088|
000294  6809              LDR      r1,[r1,#0]  ; i11
000296  1840              ADDS     r0,r0,r1
000298  1c40              ADDS     r0,r0,#1
00029a  5c20              LDRB     r0,[r4,r0]
00029c  4968              LDR      r1,|L1.1088|
00029e  6809              LDR      r1,[r1,#0]  ; i11
0002a0  5468              STRB     r0,[r5,r1]
0002a2  4867              LDR      r0,|L1.1088|
0002a4  6800              LDR      r0,[r0,#0]            ;1593  ; i11
0002a6  1c40              ADDS     r0,r0,#1              ;1593
0002a8  4965              LDR      r1,|L1.1088|
0002aa  6008              STR      r0,[r1,#0]            ;1593  ; i11
                  |L1.684|
0002ac  4866              LDR      r0,|L1.1096|
0002ae  6800              LDR      r0,[r0,#0]            ;1593  ; j11
0002b0  4966              LDR      r1,|L1.1100|
0002b2  6809              LDR      r1,[r1,#0]            ;1593  ; l
0002b4  1a40              SUBS     r0,r0,r1              ;1593
0002b6  1e40              SUBS     r0,r0,#1              ;1593
0002b8  4961              LDR      r1,|L1.1088|
0002ba  6809              LDR      r1,[r1,#0]            ;1593  ; i11
0002bc  4288              CMP      r0,r1                 ;1593
0002be  dce6              BGT      |L1.654|
;;;1596   		}			
;;;1597   	
;;;1598   
;;;1599   }
0002c0  bdf8              POP      {r3-r7,pc}
;;;1600   
                          ENDP

                  cursor_val PROC
;;;1785   
;;;1786   int cursor_val(char * stringsd, int cur){
0002c2  b5f8              PUSH     {r3-r7,lr}
0002c4  4605              MOV      r5,r0
0002c6  460e              MOV      r6,r1
;;;1787   int curinc=0,curcounter=0,cur2=0;
0002c8  2400              MOVS     r4,#0
0002ca  2700              MOVS     r7,#0
0002cc  2000              MOVS     r0,#0
0002ce  9000              STR      r0,[sp,#0]
;;;1788   for(curinc=0;curinc<strlen(stringsd);curinc++){
0002d0  bf00              NOP      
0002d2  e007              B        |L1.740|
                  |L1.724|
;;;1789   		
;;;1790   		if(stringsd[curinc] == '\n'     &&    curcounter < cur   ){ //&& curcounter<=cur	){
0002d4  5d28              LDRB     r0,[r5,r4]
0002d6  280a              CMP      r0,#0xa
0002d8  d103              BNE      |L1.738|
0002da  42b7              CMP      r7,r6
0002dc  da01              BGE      |L1.738|
;;;1791   			++curcounter;     cur2=curinc;
0002de  1c7f              ADDS     r7,r7,#1
0002e0  9400              STR      r4,[sp,#0]
                  |L1.738|
0002e2  1c64              ADDS     r4,r4,#1              ;1788
                  |L1.740|
0002e4  4628              MOV      r0,r5                 ;1788
0002e6  f7fffffe          BL       strlen
0002ea  42a0              CMP      r0,r4                 ;1788
0002ec  d8f2              BHI      |L1.724|
;;;1792   		}
;;;1793   
;;;1794   		
;;;1795   
;;;1796   }
;;;1797   	
;;;1798   	
;;;1799   	return cur2;
0002ee  9800              LDR      r0,[sp,#0]
;;;1800   
;;;1801   }
0002f0  bdf8              POP      {r3-r7,pc}
;;;1802   
                          ENDP

                  count_char PROC
;;;1766   }
;;;1767   int count_char(char ch,char* string)
0002f2  b570              PUSH     {r4-r6,lr}
;;;1768   {count=0;
0002f4  4605              MOV      r5,r0
0002f6  460c              MOV      r4,r1
0002f8  2000              MOVS     r0,#0
0002fa  4955              LDR      r1,|L1.1104|
0002fc  6008              STR      r0,[r1,#0]  ; count
;;;1769   
;;;1770   	//remove_all_chars(string,'\0','\0');
;;;1771   //	ass=strlen(string);
;;;1772   	for(ass=0;ass<strlen(string);ass++)
0002fe  4955              LDR      r1,|L1.1108|
000300  6008              STR      r0,[r1,#0]  ; ass
000302  e00e              B        |L1.802|
                  |L1.772|
;;;1773   	{
;;;1774   		if(string[ass] == ch)
000304  4853              LDR      r0,|L1.1108|
000306  6800              LDR      r0,[r0,#0]  ; ass
000308  5c20              LDRB     r0,[r4,r0]
00030a  42a8              CMP      r0,r5
00030c  d104              BNE      |L1.792|
;;;1775   		{count++;}
00030e  4850              LDR      r0,|L1.1104|
000310  6800              LDR      r0,[r0,#0]  ; count
000312  1c40              ADDS     r0,r0,#1
000314  494e              LDR      r1,|L1.1104|
000316  6008              STR      r0,[r1,#0]  ; count
                  |L1.792|
000318  484e              LDR      r0,|L1.1108|
00031a  6800              LDR      r0,[r0,#0]            ;1772  ; ass
00031c  1c40              ADDS     r0,r0,#1              ;1772
00031e  494d              LDR      r1,|L1.1108|
000320  6008              STR      r0,[r1,#0]            ;1772  ; ass
                  |L1.802|
000322  4620              MOV      r0,r4                 ;1772
000324  f7fffffe          BL       strlen
000328  494a              LDR      r1,|L1.1108|
00032a  6809              LDR      r1,[r1,#0]            ;1772  ; ass
00032c  4288              CMP      r0,r1                 ;1772
00032e  d8e9              BHI      |L1.772|
;;;1776   		
;;;1777   	}
;;;1778   return count;
000330  4847              LDR      r0,|L1.1104|
000332  6800              LDR      r0,[r0,#0]  ; count
;;;1779   }
000334  bd70              POP      {r4-r6,pc}
;;;1780   
                          ENDP

                  send_tcp PROC
;;;93     
;;;94     void send_tcp()
000336  b538              PUSH     {r3-r5,lr}
;;;95     {	
;;;96     memset(stcond1,0,strlen(stcond1));	
000338  4847              LDR      r0,|L1.1112|
00033a  6800              LDR      r0,[r0,#0]  ; stcond1
00033c  f7fffffe          BL       strlen
000340  4604              MOV      r4,r0
000342  4621              MOV      r1,r4
000344  4844              LDR      r0,|L1.1112|
000346  6800              LDR      r0,[r0,#0]  ; stcond1
000348  f7fffffe          BL       __aeabi_memclr
;;;97     memset(con1d,0,strlen(con1d));	
00034c  4843              LDR      r0,|L1.1116|
00034e  6800              LDR      r0,[r0,#0]  ; con1d
000350  f7fffffe          BL       strlen
000354  4604              MOV      r4,r0
000356  4621              MOV      r1,r4
000358  4840              LDR      r0,|L1.1116|
00035a  6800              LDR      r0,[r0,#0]  ; con1d
00035c  f7fffffe          BL       __aeabi_memclr
;;;98     								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;99     
;;;100    								cond=mystrstr(uart_string_gsm,'>');
000360  213e              MOVS     r1,#0x3e
000362  482b              LDR      r0,|L1.1040|
000364  f7fffffe          BL       mystrstr
000368  493d              LDR      r1,|L1.1120|
00036a  7008              STRB     r0,[r1,#0]
;;;101    								if(cond)	
00036c  4608              MOV      r0,r1
00036e  7800              LDRB     r0,[r0,#0]  ; cond
000370  2800              CMP      r0,#0
000372  d048              BEQ      |L1.1030|
;;;102    								{
;;;103    									
;;;104    									clear();
000374  f7fffffe          BL       clear
;;;105    									memset(uart_string_gsm,0,5000);
000378  4924              LDR      r1,|L1.1036|
00037a  4825              LDR      r0,|L1.1040|
00037c  f7fffffe          BL       __aeabi_memclr
;;;106    									strcat(data,"\n\n");
000380  a138              ADR      r1,|L1.1124|
000382  4839              LDR      r0,|L1.1128|
000384  f7fffffe          BL       strcat
;;;107    									len=strlen(data);
000388  4837              LDR      r0,|L1.1128|
00038a  f7fffffe          BL       strlen
00038e  4937              LDR      r1,|L1.1132|
000390  6008              STR      r0,[r1,#0]  ; len
;;;108    									tout=0;
000392  2000              MOVS     r0,#0
000394  491c              LDR      r1,|L1.1032|
000396  6008              STR      r0,[r1,#0]  ; tout
;;;109    									k2=0;
000398  491e              LDR      r1,|L1.1044|
00039a  6008              STR      r0,[r1,#0]  ; k2
;;;110    									for(k=0;k<len;k++)
00039c  4934              LDR      r1,|L1.1136|
00039e  6008              STR      r0,[r1,#0]  ; k
0003a0  e00b              B        |L1.954|
                  |L1.930|
;;;111    									{
;;;112    										uart_putchar(UART1_BASE_PTR, data[k]);
0003a2  4831              LDR      r0,|L1.1128|
0003a4  4a32              LDR      r2,|L1.1136|
0003a6  6812              LDR      r2,[r2,#0]  ; k
0003a8  5c81              LDRB     r1,[r0,r2]
0003aa  481b              LDR      r0,|L1.1048|
0003ac  f7fffffe          BL       uart_putchar
0003b0  482f              LDR      r0,|L1.1136|
0003b2  6800              LDR      r0,[r0,#0]            ;110  ; k
0003b4  1c40              ADDS     r0,r0,#1              ;110
0003b6  492e              LDR      r1,|L1.1136|
0003b8  6008              STR      r0,[r1,#0]            ;110  ; k
                  |L1.954|
0003ba  482d              LDR      r0,|L1.1136|
0003bc  6800              LDR      r0,[r0,#0]            ;110  ; k
0003be  492b              LDR      r1,|L1.1132|
0003c0  6809              LDR      r1,[r1,#0]            ;110  ; len
0003c2  4288              CMP      r0,r1                 ;110
0003c4  dbed              BLT      |L1.930|
;;;113    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0003c6  210a              MOVS     r1,#0xa
0003c8  4813              LDR      r0,|L1.1048|
0003ca  f7fffffe          BL       uart_putchar
0003ce  211a              MOVS     r1,#0x1a
0003d0  4811              LDR      r0,|L1.1048|
0003d2  f7fffffe          BL       uart_putchar
0003d6  211a              MOVS     r1,#0x1a
0003d8  480f              LDR      r0,|L1.1048|
0003da  f7fffffe          BL       uart_putchar
0003de  211a              MOVS     r1,#0x1a
0003e0  480d              LDR      r0,|L1.1048|
0003e2  f7fffffe          BL       uart_putchar
0003e6  211a              MOVS     r1,#0x1a
0003e8  480b              LDR      r0,|L1.1048|
0003ea  f7fffffe          BL       uart_putchar
0003ee  211a              MOVS     r1,#0x1a
0003f0  4809              LDR      r0,|L1.1048|
0003f2  f7fffffe          BL       uart_putchar
;;;114    									do
0003f6  bf00              NOP      
                  |L1.1016|
;;;115    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0003f8  a11e              ADR      r1,|L1.1140|
0003fa  4805              LDR      r0,|L1.1040|
0003fc  f7fffffe          BL       strstr
000400  4915              LDR      r1,|L1.1112|
000402  6008              STR      r0,[r1,#0]  ; stcond1
;;;116    																	stcond2=strstr(uart_string_gsm, "ERROR");
000404  e03a              B        |L1.1148|
                  |L1.1030|
000406  e083              B        |L1.1296|
                  |L1.1032|
                          DCD      tout
                  |L1.1036|
                          DCD      0x00001388
                  |L1.1040|
                          DCD      uart_string_gsm
                  |L1.1044|
                          DCD      ||k2||
                  |L1.1048|
                          DCD      0x4006b000
                  |L1.1052|
                          DCD      cond122
                  |L1.1056|
                          DCD      cond123
                  |L1.1060|
                          DCD      cond124
                  |L1.1064|
                          DCD      cond121
                  |L1.1068|
                          DCD      ||sz||
                  |L1.1072|
                          DCD      ||cn||
                  |L1.1076|
                          DCD      sleep_flag
                  |L1.1080|
                          DCD      stateCount
                  |L1.1084|
                          DCD      0x400ff100
                  |L1.1088|
                          DCD      i11
                  |L1.1092|
                          DCD      temp11
                  |L1.1096|
                          DCD      j11
                  |L1.1100|
                          DCD      l
                  |L1.1104|
                          DCD      count
                  |L1.1108|
                          DCD      ass
                  |L1.1112|
                          DCD      stcond1
                  |L1.1116|
                          DCD      con1d
                  |L1.1120|
                          DCD      cond
                  |L1.1124|
000464  0a0a00            DCB      "\n\n",0
000467  00                DCB      0
                  |L1.1128|
                          DCD      data
                  |L1.1132|
                          DCD      len
                  |L1.1136|
                          DCD      k
                  |L1.1140|
000474  53454e44          DCB      "SEND OK",0
000478  204f4b00
                  |L1.1148|
00047c  a1fc              ADR      r1,|L1.2160|
00047e  48fe              LDR      r0,|L1.2168|
000480  f7fffffe          BL       strstr
000484  49fd              LDR      r1,|L1.2172|
000486  6008              STR      r0,[r1,#0]  ; stcond2
;;;117    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000488  a1fd              ADR      r1,|L1.2176|
00048a  48fb              LDR      r0,|L1.2168|
00048c  f7fffffe          BL       strstr
000490  49fd              LDR      r1,|L1.2184|
000492  6008              STR      r0,[r1,#0]  ; stcond3
;;;118    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000494  a1fd              ADR      r1,|L1.2188|
000496  48f8              LDR      r0,|L1.2168|
000498  f7fffffe          BL       strstr
00049c  49fd              LDR      r1,|L1.2196|
00049e  6008              STR      r0,[r1,#0]  ; stcond4
;;;119    																	
;;;120    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0004a0  48f6              LDR      r0,|L1.2172|
0004a2  6800              LDR      r0,[r0,#0]  ; stcond2
0004a4  2800              CMP      r0,#0
0004a6  d10f              BNE      |L1.1224|
0004a8  48f7              LDR      r0,|L1.2184|
0004aa  6800              LDR      r0,[r0,#0]  ; stcond3
0004ac  2800              CMP      r0,#0
0004ae  d10b              BNE      |L1.1224|
0004b0  4608              MOV      r0,r1
0004b2  6800              LDR      r0,[r0,#0]  ; stcond4
0004b4  2800              CMP      r0,#0
0004b6  d107              BNE      |L1.1224|
0004b8  48f7              LDR      r0,|L1.2200|
0004ba  6800              LDR      r0,[r0,#0]  ; stcond1
0004bc  2800              CMP      r0,#0
0004be  d103              BNE      |L1.1224|
0004c0  48f6              LDR      r0,|L1.2204|
0004c2  6800              LDR      r0,[r0,#0]  ; tout
0004c4  2804              CMP      r0,#4
0004c6  dd97              BLE      |L1.1016|
                  |L1.1224|
;;;121    																//delay(10);clear();
;;;122    														uart_putchar(UART1_BASE_PTR,0x1A);
0004c8  211a              MOVS     r1,#0x1a
0004ca  48f5              LDR      r0,|L1.2208|
0004cc  f7fffffe          BL       uart_putchar
;;;123    												//delay(10);
;;;124    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0004d0  211a              MOVS     r1,#0x1a
0004d2  48f3              LDR      r0,|L1.2208|
0004d4  f7fffffe          BL       uart_putchar
0004d8  211a              MOVS     r1,#0x1a
0004da  48f1              LDR      r0,|L1.2208|
0004dc  f7fffffe          BL       uart_putchar
0004e0  211a              MOVS     r1,#0x1a
0004e2  48ef              LDR      r0,|L1.2208|
0004e4  f7fffffe          BL       uart_putchar
;;;125    						
;;;126    									
;;;127    									
;;;128    									
;;;129    									if(flagch==1){		int_erval=temp;flagch=0;	}
0004e8  48ee              LDR      r0,|L1.2212|
0004ea  6800              LDR      r0,[r0,#0]  ; flagch
0004ec  2801              CMP      r0,#1
0004ee  d106              BNE      |L1.1278|
0004f0  48ed              LDR      r0,|L1.2216|
0004f2  6800              LDR      r0,[r0,#0]  ; temp
0004f4  49ed              LDR      r1,|L1.2220|
0004f6  6008              STR      r0,[r1,#0]  ; int_erval
0004f8  2000              MOVS     r0,#0
0004fa  49ea              LDR      r1,|L1.2212|
0004fc  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.1278|
;;;130    									
;;;131    									
;;;132    									
;;;133    
;;;134    //									for(k=0;k<len;k++)
;;;135    //									{
;;;136    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;137    //									}
;;;138    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;139    
;;;140    //									
;;;141    //													k2=0;									//string array counter for uart 1
;;;142    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;143    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;144    //																{
;;;145    //																	timeout--;
;;;146    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;147    //
;;;148    									delay(20);															
0004fe  2014              MOVS     r0,#0x14
000500  f7fffffe          BL       delay
;;;149    stcond1=strstr(uart_string_gsm,"SEND OK"); 
000504  49ea              LDR      r1,|L1.2224|
000506  48dc              LDR      r0,|L1.2168|
000508  f7fffffe          BL       strstr
00050c  49e2              LDR      r1,|L1.2200|
00050e  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.1296|
;;;150    
;;;151    								}
;;;152    
;;;153      //checks for send ok
;;;154    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
000510  48e1              LDR      r0,|L1.2200|
000512  6800              LDR      r0,[r0,#0]  ; stcond1
000514  2800              CMP      r0,#0
000516  d001              BEQ      |L1.1308|
000518  f000ff87          BL       |L1.5162|
                  |L1.1308|
;;;155    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00051c  211a              MOVS     r1,#0x1a
00051e  48e0              LDR      r0,|L1.2208|
000520  f7fffffe          BL       uart_putchar
000524  f7fffffe          BL       clear
000528  200a              MOVS     r0,#0xa
00052a  f7fffffe          BL       delay
;;;156    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00052e  211a              MOVS     r1,#0x1a
000530  48db              LDR      r0,|L1.2208|
000532  f7fffffe          BL       uart_putchar
000536  f7fffffe          BL       clear
00053a  200a              MOVS     r0,#0xa
00053c  f7fffffe          BL       delay
;;;157    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000540  211a              MOVS     r1,#0x1a
000542  48d7              LDR      r0,|L1.2208|
000544  f7fffffe          BL       uart_putchar
000548  f7fffffe          BL       clear
00054c  200a              MOVS     r0,#0xa
00054e  f7fffffe          BL       delay
;;;158    							remove_all_chars(data, '\n', '\n');
000552  220a              MOVS     r2,#0xa
000554  4611              MOV      r1,r2
000556  48d7              LDR      r0,|L1.2228|
000558  f7fffffe          BL       remove_all_chars
;;;159    	
;;;160    		strcat(data,"CH\n");	
00055c  a1d6              ADR      r1,|L1.2232|
00055e  48d5              LDR      r0,|L1.2228|
000560  f7fffffe          BL       strcat
;;;161    		
;;;162    	
;;;163    	delay(100);
000564  2064              MOVS     r0,#0x64
000566  f7fffffe          BL       delay
;;;164    		clear();//memset(uart_string_gsm,0,5000);
00056a  f7fffffe          BL       clear
;;;165    	
;;;166    	memset(at_,0,100);
00056e  2164              MOVS     r1,#0x64
000570  48d2              LDR      r0,|L1.2236|
000572  f7fffffe          BL       __aeabi_memclr
;;;167    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000576  48cf              LDR      r0,|L1.2228|
000578  f7fffffe          BL       strlen
00057c  1c44              ADDS     r4,r0,#1
00057e  4623              MOV      r3,r4
000580  4acf              LDR      r2,|L1.2240|
000582  a1d0              ADR      r1,|L1.2244|
000584  48cd              LDR      r0,|L1.2236|
000586  f7fffffe          BL       __2sprintf
;;;168    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00058a  2005              MOVS     r0,#5
00058c  a3b8              ADR      r3,|L1.2160|
00058e  a2d6              ADR      r2,|L1.2280|
000590  a1d7              ADR      r1,|L1.2288|
000592  9000              STR      r0,[sp,#0]
000594  48c9              LDR      r0,|L1.2236|
000596  f7fffffe          BL       send_SD
;;;169    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;170    //	if(strstr(uart_string_gsm,"ERROR")){
;;;171    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;172    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;173    //	}
;;;174    	
;;;175    clear();	
00059a  f7fffffe          BL       clear
;;;176    									k2=0;									//string array counter for uart 1
00059e  2000              MOVS     r0,#0
0005a0  49d4              LDR      r1,|L1.2292|
0005a2  6008              STR      r0,[r1,#0]  ; k2
;;;177    									tout=0;	
0005a4  49bd              LDR      r1,|L1.2204|
0005a6  6008              STR      r0,[r1,#0]  ; tout
;;;178    		for(k=0;k<strlen(data);k++)
0005a8  49d3              LDR      r1,|L1.2296|
0005aa  6008              STR      r0,[r1,#0]  ; k
0005ac  e00b              B        |L1.1478|
                  |L1.1454|
;;;179    		{
;;;180    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0005ae  48c1              LDR      r0,|L1.2228|
0005b0  4ad1              LDR      r2,|L1.2296|
0005b2  6812              LDR      r2,[r2,#0]  ; k
0005b4  5c81              LDRB     r1,[r0,r2]
0005b6  48ba              LDR      r0,|L1.2208|
0005b8  f7fffffe          BL       uart_putchar
0005bc  48ce              LDR      r0,|L1.2296|
0005be  6800              LDR      r0,[r0,#0]            ;178  ; k
0005c0  1c40              ADDS     r0,r0,#1              ;178
0005c2  49cd              LDR      r1,|L1.2296|
0005c4  6008              STR      r0,[r1,#0]            ;178  ; k
                  |L1.1478|
0005c6  48bb              LDR      r0,|L1.2228|
0005c8  f7fffffe          BL       strlen
0005cc  49ca              LDR      r1,|L1.2296|
0005ce  6809              LDR      r1,[r1,#0]            ;178  ; k
0005d0  4288              CMP      r0,r1                 ;178
0005d2  d8ec              BHI      |L1.1454|
;;;181    		}	
;;;182    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0005d4  210a              MOVS     r1,#0xa
0005d6  48b2              LDR      r0,|L1.2208|
0005d8  f7fffffe          BL       uart_putchar
0005dc  210a              MOVS     r1,#0xa
0005de  48b0              LDR      r0,|L1.2208|
0005e0  f7fffffe          BL       uart_putchar
0005e4  210a              MOVS     r1,#0xa
0005e6  48ae              LDR      r0,|L1.2208|
0005e8  f7fffffe          BL       uart_putchar
0005ec  210a              MOVS     r1,#0xa
0005ee  48ac              LDR      r0,|L1.2208|
0005f0  f7fffffe          BL       uart_putchar
0005f4  210a              MOVS     r1,#0xa
0005f6  48aa              LDR      r0,|L1.2208|
0005f8  f7fffffe          BL       uart_putchar
0005fc  210a              MOVS     r1,#0xa
0005fe  48a8              LDR      r0,|L1.2208|
000600  f7fffffe          BL       uart_putchar
000604  210a              MOVS     r1,#0xa
000606  48a6              LDR      r0,|L1.2208|
000608  f7fffffe          BL       uart_putchar
00060c  210a              MOVS     r1,#0xa
00060e  48a4              LDR      r0,|L1.2208|
000610  f7fffffe          BL       uart_putchar
000614  210a              MOVS     r1,#0xa
000616  48a2              LDR      r0,|L1.2208|
000618  f7fffffe          BL       uart_putchar
00061c  210a              MOVS     r1,#0xa
00061e  48a0              LDR      r0,|L1.2208|
000620  f7fffffe          BL       uart_putchar
000624  210a              MOVS     r1,#0xa
000626  489e              LDR      r0,|L1.2208|
000628  f7fffffe          BL       uart_putchar
00062c  210a              MOVS     r1,#0xa
00062e  489c              LDR      r0,|L1.2208|
000630  f7fffffe          BL       uart_putchar
000634  210a              MOVS     r1,#0xa
000636  489a              LDR      r0,|L1.2208|
000638  f7fffffe          BL       uart_putchar
00063c  210a              MOVS     r1,#0xa
00063e  4898              LDR      r0,|L1.2208|
000640  f7fffffe          BL       uart_putchar
000644  210a              MOVS     r1,#0xa
000646  4896              LDR      r0,|L1.2208|
000648  f7fffffe          BL       uart_putchar
00064c  210a              MOVS     r1,#0xa
00064e  4894              LDR      r0,|L1.2208|
000650  f7fffffe          BL       uart_putchar
000654  210a              MOVS     r1,#0xa
000656  4892              LDR      r0,|L1.2208|
000658  f7fffffe          BL       uart_putchar
00065c  210a              MOVS     r1,#0xa
00065e  4890              LDR      r0,|L1.2208|
000660  f7fffffe          BL       uart_putchar
000664  210a              MOVS     r1,#0xa
000666  488e              LDR      r0,|L1.2208|
000668  f7fffffe          BL       uart_putchar
00066c  210a              MOVS     r1,#0xa
00066e  488c              LDR      r0,|L1.2208|
000670  f7fffffe          BL       uart_putchar
000674  210a              MOVS     r1,#0xa
000676  488a              LDR      r0,|L1.2208|
000678  f7fffffe          BL       uart_putchar
00067c  210a              MOVS     r1,#0xa
00067e  4888              LDR      r0,|L1.2208|
000680  f7fffffe          BL       uart_putchar
000684  210a              MOVS     r1,#0xa
000686  4886              LDR      r0,|L1.2208|
000688  f7fffffe          BL       uart_putchar
00068c  210a              MOVS     r1,#0xa
00068e  4884              LDR      r0,|L1.2208|
000690  f7fffffe          BL       uart_putchar
000694  210a              MOVS     r1,#0xa
000696  4882              LDR      r0,|L1.2208|
000698  f7fffffe          BL       uart_putchar
00069c  210a              MOVS     r1,#0xa
00069e  4880              LDR      r0,|L1.2208|
0006a0  f7fffffe          BL       uart_putchar
0006a4  210a              MOVS     r1,#0xa
0006a6  487e              LDR      r0,|L1.2208|
0006a8  f7fffffe          BL       uart_putchar
0006ac  210a              MOVS     r1,#0xa
0006ae  487c              LDR      r0,|L1.2208|
0006b0  f7fffffe          BL       uart_putchar
0006b4  210a              MOVS     r1,#0xa
0006b6  487a              LDR      r0,|L1.2208|
0006b8  f7fffffe          BL       uart_putchar
0006bc  210a              MOVS     r1,#0xa
0006be  4878              LDR      r0,|L1.2208|
0006c0  f7fffffe          BL       uart_putchar
0006c4  210a              MOVS     r1,#0xa
0006c6  4876              LDR      r0,|L1.2208|
0006c8  f7fffffe          BL       uart_putchar
0006cc  210a              MOVS     r1,#0xa
0006ce  4874              LDR      r0,|L1.2208|
0006d0  f7fffffe          BL       uart_putchar
0006d4  210a              MOVS     r1,#0xa
0006d6  4872              LDR      r0,|L1.2208|
0006d8  f7fffffe          BL       uart_putchar
0006dc  210a              MOVS     r1,#0xa
0006de  4870              LDR      r0,|L1.2208|
0006e0  f7fffffe          BL       uart_putchar
0006e4  210a              MOVS     r1,#0xa
0006e6  486e              LDR      r0,|L1.2208|
0006e8  f7fffffe          BL       uart_putchar
0006ec  210a              MOVS     r1,#0xa
0006ee  486c              LDR      r0,|L1.2208|
0006f0  f7fffffe          BL       uart_putchar
0006f4  210a              MOVS     r1,#0xa
0006f6  486a              LDR      r0,|L1.2208|
0006f8  f7fffffe          BL       uart_putchar
0006fc  210a              MOVS     r1,#0xa
0006fe  4868              LDR      r0,|L1.2208|
000700  f7fffffe          BL       uart_putchar
000704  210a              MOVS     r1,#0xa
000706  4866              LDR      r0,|L1.2208|
000708  f7fffffe          BL       uart_putchar
00070c  210a              MOVS     r1,#0xa
00070e  4864              LDR      r0,|L1.2208|
000710  f7fffffe          BL       uart_putchar
000714  210a              MOVS     r1,#0xa
000716  4862              LDR      r0,|L1.2208|
000718  f7fffffe          BL       uart_putchar
00071c  210a              MOVS     r1,#0xa
00071e  4860              LDR      r0,|L1.2208|
000720  f7fffffe          BL       uart_putchar
000724  210a              MOVS     r1,#0xa
000726  485e              LDR      r0,|L1.2208|
000728  f7fffffe          BL       uart_putchar
00072c  210a              MOVS     r1,#0xa
00072e  485c              LDR      r0,|L1.2208|
000730  f7fffffe          BL       uart_putchar
000734  210a              MOVS     r1,#0xa
000736  485a              LDR      r0,|L1.2208|
000738  f7fffffe          BL       uart_putchar
00073c  210a              MOVS     r1,#0xa
00073e  4858              LDR      r0,|L1.2208|
000740  f7fffffe          BL       uart_putchar
000744  210a              MOVS     r1,#0xa
000746  4856              LDR      r0,|L1.2208|
000748  f7fffffe          BL       uart_putchar
00074c  210a              MOVS     r1,#0xa
00074e  4854              LDR      r0,|L1.2208|
000750  f7fffffe          BL       uart_putchar
000754  210a              MOVS     r1,#0xa
000756  4852              LDR      r0,|L1.2208|
000758  f7fffffe          BL       uart_putchar
00075c  210a              MOVS     r1,#0xa
00075e  4850              LDR      r0,|L1.2208|
000760  f7fffffe          BL       uart_putchar
000764  210a              MOVS     r1,#0xa
000766  484e              LDR      r0,|L1.2208|
000768  f7fffffe          BL       uart_putchar
00076c  210a              MOVS     r1,#0xa
00076e  484c              LDR      r0,|L1.2208|
000770  f7fffffe          BL       uart_putchar
000774  210a              MOVS     r1,#0xa
000776  484a              LDR      r0,|L1.2208|
000778  f7fffffe          BL       uart_putchar
00077c  210a              MOVS     r1,#0xa
00077e  4848              LDR      r0,|L1.2208|
000780  f7fffffe          BL       uart_putchar
000784  210a              MOVS     r1,#0xa
000786  4846              LDR      r0,|L1.2208|
000788  f7fffffe          BL       uart_putchar
00078c  210a              MOVS     r1,#0xa
00078e  4844              LDR      r0,|L1.2208|
000790  f7fffffe          BL       uart_putchar
000794  210a              MOVS     r1,#0xa
000796  4842              LDR      r0,|L1.2208|
000798  f7fffffe          BL       uart_putchar
;;;183    									//memset(data,0,1000);
;;;184    														//timer counts to wait for characters in uart 1 									
;;;185    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00079c  bf00              NOP      
                  |L1.1950|
00079e  a157              ADR      r1,|L1.2300|
0007a0  4835              LDR      r0,|L1.2168|
0007a2  f7fffffe          BL       strstr
0007a6  2800              CMP      r0,#0
0007a8  d109              BNE      |L1.1982|
0007aa  a131              ADR      r1,|L1.2160|
0007ac  4832              LDR      r0,|L1.2168|
0007ae  f7fffffe          BL       strstr
0007b2  2800              CMP      r0,#0
0007b4  d103              BNE      |L1.1982|
0007b6  4839              LDR      r0,|L1.2204|
0007b8  6800              LDR      r0,[r0,#0]  ; tout
0007ba  2805              CMP      r0,#5
0007bc  ddef              BLE      |L1.1950|
                  |L1.1982|
;;;186    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;187    									}
;;;188    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0007be  f7fffffe          BL       clear
;;;189    									//clear();
;;;190    									memset(data,0,strlen(data));
0007c2  483c              LDR      r0,|L1.2228|
0007c4  f7fffffe          BL       strlen
0007c8  4604              MOV      r4,r0
0007ca  4621              MOV      r1,r4
0007cc  4839              LDR      r0,|L1.2228|
0007ce  f7fffffe          BL       __aeabi_memclr
;;;191    									clear();
0007d2  f7fffffe          BL       clear
;;;192    
;;;193    								
;;;194    	
;;;195    	//log_it();		                         //logging
;;;196    		memset(data,0,strlen(data));	
0007d6  4837              LDR      r0,|L1.2228|
0007d8  f7fffffe          BL       strlen
0007dc  4604              MOV      r4,r0
0007de  4621              MOV      r1,r4
0007e0  4834              LDR      r0,|L1.2228|
0007e2  f7fffffe          BL       __aeabi_memclr
;;;197    
;;;198    					   	if(flagch!=1){
0007e6  482f              LDR      r0,|L1.2212|
0007e8  6800              LDR      r0,[r0,#0]  ; flagch
0007ea  2801              CMP      r0,#1
0007ec  d009              BEQ      |L1.2050|
;;;199    							temp=int_erval;				
0007ee  482f              LDR      r0,|L1.2220|
0007f0  6800              LDR      r0,[r0,#0]  ; int_erval
0007f2  492d              LDR      r1,|L1.2216|
0007f4  6008              STR      r0,[r1,#0]  ; temp
;;;200    							int_erval=4;
0007f6  2004              MOVS     r0,#4
0007f8  492c              LDR      r1,|L1.2220|
0007fa  6008              STR      r0,[r1,#0]  ; int_erval
;;;201    							flagch=1;}
0007fc  2001              MOVS     r0,#1
0007fe  4929              LDR      r1,|L1.2212|
000800  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.2050|
;;;202    							clear();	
000802  f7fffffe          BL       clear
;;;203    									GPS_COLLECT();
000806  f7fffffe          BL       GPS_COLLECT
;;;204    									strcat(data,"CH\n");	
00080a  a12b              ADR      r1,|L1.2232|
00080c  4829              LDR      r0,|L1.2228|
00080e  f7fffffe          BL       strcat
;;;205    
;;;206    //*********************************tcp_initialization();//reinitialization*************************************//
;;;207    
;;;208    	
;;;209    msg_sim800(); 
000812  f7fffffe          BL       msg_sim800
;;;210    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
000816  2005              MOVS     r0,#5
000818  a315              ADR      r3,|L1.2160|
00081a  a233              ADR      r2,|L1.2280|
00081c  a139              ADR      r1,|L1.2308|
00081e  9000              STR      r0,[sp,#0]
000820  a039              ADR      r0,|L1.2312|
000822  f7fffffe          BL       send_GSM
;;;211    delay(100);
000826  2064              MOVS     r0,#0x64
000828  f7fffffe          BL       delay
;;;212    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00082c  2004              MOVS     r0,#4
00082e  a310              ADR      r3,|L1.2160|
000830  a239              ADR      r2,|L1.2328|
000832  a134              ADR      r1,|L1.2308|
000834  9000              STR      r0,[sp,#0]
000836  a03d              ADR      r0,|L1.2348|
000838  f7fffffe          BL       send_GSM
;;;213    GPS_COLLECT2();
00083c  f7fffffe          BL       GPS_COLLECT2
;;;214    strcat(data,"CH\n");		
000840  a11d              ADR      r1,|L1.2232|
000842  481c              LDR      r0,|L1.2228|
000844  f7fffffe          BL       strcat
;;;215    GPS_COLLECT2();
000848  f7fffffe          BL       GPS_COLLECT2
;;;216    strcat(data,"CH\n");	
00084c  a11a              ADR      r1,|L1.2232|
00084e  4819              LDR      r0,|L1.2228|
000850  f7fffffe          BL       strcat
;;;217    GPS_COLLECT2();
000854  f7fffffe          BL       GPS_COLLECT2
;;;218    strcat(data,"CH\n");
000858  a117              ADR      r1,|L1.2232|
00085a  4816              LDR      r0,|L1.2228|
00085c  f7fffffe          BL       strcat
;;;219    cond201=(strstr(uart_string_gsm, "OK"));
000860  a128              ADR      r1,|L1.2308|
000862  4805              LDR      r0,|L1.2168|
000864  f7fffffe          BL       strstr
000868  4934              LDR      r1,|L1.2364|
00086a  6008              STR      r0,[r1,#0]  ; cond201
;;;220    cond200=(strstr(uart_string_gsm, "ERROR"));
00086c  a100              ADR      r1,|L1.2160|
00086e  e067              B        |L1.2368|
                  |L1.2160|
000870  4552524f          DCB      "ERROR",0
000874  5200    
000876  00                DCB      0
000877  00                DCB      0
                  |L1.2168|
                          DCD      uart_string_gsm
                  |L1.2172|
                          DCD      stcond2
                  |L1.2176|
000880  4641494c          DCB      "FAIL",0
000884  00      
000885  00                DCB      0
000886  00                DCB      0
000887  00                DCB      0
                  |L1.2184|
                          DCD      stcond3
                  |L1.2188|
00088c  44454143          DCB      "DEACT",0
000890  5400    
000892  00                DCB      0
000893  00                DCB      0
                  |L1.2196|
                          DCD      stcond4
                  |L1.2200|
                          DCD      stcond1
                  |L1.2204|
                          DCD      tout
                  |L1.2208|
                          DCD      0x4006b000
                  |L1.2212|
                          DCD      flagch
                  |L1.2216|
                          DCD      temp
                  |L1.2220|
                          DCD      int_erval
                  |L1.2224|
                          DCD      ||.text||+0x474
                  |L1.2228|
                          DCD      data
                  |L1.2232|
0008b8  43480a00          DCB      "CH\n",0
                  |L1.2236|
                          DCD      at_
                  |L1.2240|
                          DCD      drive
                  |L1.2244|
0008c4  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
0008c8  2b465357
0008cc  52495445
0008d0  3d25735c
0008d4  4c4f472e
0008d8  5458542c
0008dc  312c2564
0008e0  2c31300a
0008e4  0a00    
0008e6  00                DCB      0
0008e7  00                DCB      0
                  |L1.2280|
0008e8  4552524f          DCB      "ERROR\r\n",0
0008ec  520d0a00
                  |L1.2288|
0008f0  3e00              DCB      ">",0
0008f2  00                DCB      0
0008f3  00                DCB      0
                  |L1.2292|
                          DCD      ||k2||
                  |L1.2296|
                          DCD      k
                  |L1.2300|
0008fc  4f4b0d0a          DCB      "OK\r\n",0
000900  00      
000901  00                DCB      0
000902  00                DCB      0
000903  00                DCB      0
                  |L1.2308|
000904  4f4b00            DCB      "OK",0
000907  00                DCB      0
                  |L1.2312|
000908  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
00090c  2b434655
000910  4e3d300d
000914  0d0a0a00
                  |L1.2328|
000918  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
00091c  494e5345
000920  52544544
000924  0d0a4f4b
000928  00      
000929  00                DCB      0
00092a  00                DCB      0
00092b  00                DCB      0
                  |L1.2348|
00092c  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000930  2b434655
000934  4e3d310d
000938  0a00    
00093a  00                DCB      0
00093b  00                DCB      0
                  |L1.2364|
                          DCD      cond201
                  |L1.2368|
000940  48f6              LDR      r0,|L1.3356|
000942  f7fffffe          BL       strstr
000946  49f6              LDR      r1,|L1.3360|
000948  6008              STR      r0,[r1,#0]  ; cond200
;;;221    if((!(cond201|| cond200 ))  && sleep_flag != 1)
00094a  48f6              LDR      r0,|L1.3364|
00094c  6800              LDR      r0,[r0,#0]  ; cond201
00094e  2800              CMP      r0,#0
                  |L1.2384|
000950  d17e              BNE      |L1.2640|
000952  4608              MOV      r0,r1
000954  6800              LDR      r0,[r0,#0]  ; cond200
000956  2800              CMP      r0,#0
000958  d1fa              BNE      |L1.2384|
00095a  48f3              LDR      r0,|L1.3368|
00095c  6800              LDR      r0,[r0,#0]  ; sleep_flag
00095e  2801              CMP      r0,#1
000960  d076              BEQ      |L1.2640|
;;;222    {
;;;223    delay(100);
000962  2064              MOVS     r0,#0x64
000964  f7fffffe          BL       delay
;;;224    clear();//memset(uart_string_gsm,0,5000);
000968  f7fffffe          BL       clear
;;;225    memset(at_,0,100);
00096c  2164              MOVS     r1,#0x64
00096e  48ef              LDR      r0,|L1.3372|
000970  f7fffffe          BL       __aeabi_memclr
;;;226    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000974  48ee              LDR      r0,|L1.3376|
000976  f7fffffe          BL       strlen
00097a  1c44              ADDS     r4,r0,#1
00097c  4623              MOV      r3,r4
00097e  4aed              LDR      r2,|L1.3380|
000980  49ed              LDR      r1,|L1.3384|
000982  48ea              LDR      r0,|L1.3372|
000984  f7fffffe          BL       __2sprintf
;;;227    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000988  2005              MOVS     r0,#5
00098a  4beb              LDR      r3,|L1.3384|
00098c  3b54              SUBS     r3,r3,#0x54
00098e  461a              MOV      r2,r3
000990  3278              ADDS     r2,r2,#0x78
000992  a1ea              ADR      r1,|L1.3388|
000994  9000              STR      r0,[sp,#0]
000996  48e5              LDR      r0,|L1.3372|
000998  f7fffffe          BL       send_SD
;;;228    clear();	
00099c  f7fffffe          BL       clear
;;;229    k2=0;									//string array counter for uart 1
0009a0  2000              MOVS     r0,#0
0009a2  49e7              LDR      r1,|L1.3392|
0009a4  6008              STR      r0,[r1,#0]  ; k2
;;;230    tout=0;	
0009a6  49e7              LDR      r1,|L1.3396|
0009a8  6008              STR      r0,[r1,#0]  ; tout
;;;231    for(k=0;k<strlen(data);k++)
0009aa  49e7              LDR      r1,|L1.3400|
0009ac  6008              STR      r0,[r1,#0]  ; k
0009ae  e00b              B        |L1.2504|
                  |L1.2480|
;;;232    {
;;;233    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0009b0  48df              LDR      r0,|L1.3376|
0009b2  4ae5              LDR      r2,|L1.3400|
0009b4  6812              LDR      r2,[r2,#0]  ; k
0009b6  5c81              LDRB     r1,[r0,r2]
0009b8  48e4              LDR      r0,|L1.3404|
0009ba  f7fffffe          BL       uart_putchar
0009be  48e2              LDR      r0,|L1.3400|
0009c0  6800              LDR      r0,[r0,#0]            ;231  ; k
0009c2  1c40              ADDS     r0,r0,#1              ;231
0009c4  49e0              LDR      r1,|L1.3400|
0009c6  6008              STR      r0,[r1,#0]            ;231  ; k
                  |L1.2504|
0009c8  48d9              LDR      r0,|L1.3376|
0009ca  f7fffffe          BL       strlen
0009ce  49de              LDR      r1,|L1.3400|
0009d0  6809              LDR      r1,[r1,#0]            ;231  ; k
0009d2  4288              CMP      r0,r1                 ;231
0009d4  d8ec              BHI      |L1.2480|
;;;234    }	
;;;235    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0009d6  210a              MOVS     r1,#0xa
0009d8  48dc              LDR      r0,|L1.3404|
0009da  f7fffffe          BL       uart_putchar
0009de  210a              MOVS     r1,#0xa
0009e0  48da              LDR      r0,|L1.3404|
0009e2  f7fffffe          BL       uart_putchar
0009e6  210a              MOVS     r1,#0xa
0009e8  48d8              LDR      r0,|L1.3404|
0009ea  f7fffffe          BL       uart_putchar
0009ee  210a              MOVS     r1,#0xa
0009f0  48d6              LDR      r0,|L1.3404|
0009f2  f7fffffe          BL       uart_putchar
0009f6  210a              MOVS     r1,#0xa
0009f8  48d4              LDR      r0,|L1.3404|
0009fa  f7fffffe          BL       uart_putchar
0009fe  210a              MOVS     r1,#0xa
000a00  48d2              LDR      r0,|L1.3404|
000a02  f7fffffe          BL       uart_putchar
000a06  210a              MOVS     r1,#0xa
000a08  48d0              LDR      r0,|L1.3404|
000a0a  f7fffffe          BL       uart_putchar
000a0e  210a              MOVS     r1,#0xa
000a10  48ce              LDR      r0,|L1.3404|
000a12  f7fffffe          BL       uart_putchar
000a16  210a              MOVS     r1,#0xa
000a18  48cc              LDR      r0,|L1.3404|
000a1a  f7fffffe          BL       uart_putchar
000a1e  210a              MOVS     r1,#0xa
000a20  48ca              LDR      r0,|L1.3404|
000a22  f7fffffe          BL       uart_putchar
000a26  210a              MOVS     r1,#0xa
000a28  48c8              LDR      r0,|L1.3404|
000a2a  f7fffffe          BL       uart_putchar
000a2e  210a              MOVS     r1,#0xa
000a30  48c6              LDR      r0,|L1.3404|
000a32  f7fffffe          BL       uart_putchar
000a36  210a              MOVS     r1,#0xa
000a38  48c4              LDR      r0,|L1.3404|
000a3a  f7fffffe          BL       uart_putchar
000a3e  210a              MOVS     r1,#0xa
000a40  48c2              LDR      r0,|L1.3404|
000a42  f7fffffe          BL       uart_putchar
000a46  210a              MOVS     r1,#0xa
000a48  48c0              LDR      r0,|L1.3404|
000a4a  f7fffffe          BL       uart_putchar
000a4e  e000              B        |L1.2642|
                  |L1.2640|
000a50  e0d2              B        |L1.3064|
                  |L1.2642|
000a52  210a              MOVS     r1,#0xa
000a54  48bd              LDR      r0,|L1.3404|
000a56  f7fffffe          BL       uart_putchar
000a5a  210a              MOVS     r1,#0xa
000a5c  48bb              LDR      r0,|L1.3404|
000a5e  f7fffffe          BL       uart_putchar
000a62  210a              MOVS     r1,#0xa
000a64  48b9              LDR      r0,|L1.3404|
000a66  f7fffffe          BL       uart_putchar
000a6a  210a              MOVS     r1,#0xa
000a6c  48b7              LDR      r0,|L1.3404|
000a6e  f7fffffe          BL       uart_putchar
000a72  210a              MOVS     r1,#0xa
000a74  48b5              LDR      r0,|L1.3404|
000a76  f7fffffe          BL       uart_putchar
000a7a  210a              MOVS     r1,#0xa
000a7c  48b3              LDR      r0,|L1.3404|
000a7e  f7fffffe          BL       uart_putchar
000a82  210a              MOVS     r1,#0xa
000a84  48b1              LDR      r0,|L1.3404|
000a86  f7fffffe          BL       uart_putchar
000a8a  210a              MOVS     r1,#0xa
000a8c  48af              LDR      r0,|L1.3404|
000a8e  f7fffffe          BL       uart_putchar
000a92  210a              MOVS     r1,#0xa
000a94  48ad              LDR      r0,|L1.3404|
000a96  f7fffffe          BL       uart_putchar
000a9a  210a              MOVS     r1,#0xa
000a9c  48ab              LDR      r0,|L1.3404|
000a9e  f7fffffe          BL       uart_putchar
000aa2  210a              MOVS     r1,#0xa
000aa4  48a9              LDR      r0,|L1.3404|
000aa6  f7fffffe          BL       uart_putchar
000aaa  210a              MOVS     r1,#0xa
000aac  48a7              LDR      r0,|L1.3404|
000aae  f7fffffe          BL       uart_putchar
000ab2  210a              MOVS     r1,#0xa
000ab4  48a5              LDR      r0,|L1.3404|
000ab6  f7fffffe          BL       uart_putchar
000aba  210a              MOVS     r1,#0xa
000abc  48a3              LDR      r0,|L1.3404|
000abe  f7fffffe          BL       uart_putchar
000ac2  210a              MOVS     r1,#0xa
000ac4  48a1              LDR      r0,|L1.3404|
000ac6  f7fffffe          BL       uart_putchar
000aca  210a              MOVS     r1,#0xa
000acc  489f              LDR      r0,|L1.3404|
000ace  f7fffffe          BL       uart_putchar
000ad2  210a              MOVS     r1,#0xa
000ad4  489d              LDR      r0,|L1.3404|
000ad6  f7fffffe          BL       uart_putchar
000ada  210a              MOVS     r1,#0xa
000adc  489b              LDR      r0,|L1.3404|
000ade  f7fffffe          BL       uart_putchar
000ae2  210a              MOVS     r1,#0xa
000ae4  4899              LDR      r0,|L1.3404|
000ae6  f7fffffe          BL       uart_putchar
000aea  210a              MOVS     r1,#0xa
000aec  4897              LDR      r0,|L1.3404|
000aee  f7fffffe          BL       uart_putchar
000af2  210a              MOVS     r1,#0xa
000af4  4895              LDR      r0,|L1.3404|
000af6  f7fffffe          BL       uart_putchar
000afa  210a              MOVS     r1,#0xa
000afc  4893              LDR      r0,|L1.3404|
000afe  f7fffffe          BL       uart_putchar
000b02  210a              MOVS     r1,#0xa
000b04  4891              LDR      r0,|L1.3404|
000b06  f7fffffe          BL       uart_putchar
000b0a  210a              MOVS     r1,#0xa
000b0c  488f              LDR      r0,|L1.3404|
000b0e  f7fffffe          BL       uart_putchar
000b12  210a              MOVS     r1,#0xa
000b14  488d              LDR      r0,|L1.3404|
000b16  f7fffffe          BL       uart_putchar
000b1a  210a              MOVS     r1,#0xa
000b1c  488b              LDR      r0,|L1.3404|
000b1e  f7fffffe          BL       uart_putchar
000b22  210a              MOVS     r1,#0xa
000b24  4889              LDR      r0,|L1.3404|
000b26  f7fffffe          BL       uart_putchar
000b2a  210a              MOVS     r1,#0xa
000b2c  4887              LDR      r0,|L1.3404|
000b2e  f7fffffe          BL       uart_putchar
000b32  210a              MOVS     r1,#0xa
000b34  4885              LDR      r0,|L1.3404|
000b36  f7fffffe          BL       uart_putchar
000b3a  210a              MOVS     r1,#0xa
000b3c  4883              LDR      r0,|L1.3404|
000b3e  f7fffffe          BL       uart_putchar
000b42  210a              MOVS     r1,#0xa
000b44  4881              LDR      r0,|L1.3404|
000b46  f7fffffe          BL       uart_putchar
000b4a  210a              MOVS     r1,#0xa
000b4c  487f              LDR      r0,|L1.3404|
000b4e  f7fffffe          BL       uart_putchar
000b52  210a              MOVS     r1,#0xa
000b54  487d              LDR      r0,|L1.3404|
000b56  f7fffffe          BL       uart_putchar
000b5a  210a              MOVS     r1,#0xa
000b5c  487b              LDR      r0,|L1.3404|
000b5e  f7fffffe          BL       uart_putchar
000b62  210a              MOVS     r1,#0xa
000b64  4879              LDR      r0,|L1.3404|
000b66  f7fffffe          BL       uart_putchar
000b6a  210a              MOVS     r1,#0xa
000b6c  4877              LDR      r0,|L1.3404|
000b6e  f7fffffe          BL       uart_putchar
000b72  210a              MOVS     r1,#0xa
000b74  4875              LDR      r0,|L1.3404|
000b76  f7fffffe          BL       uart_putchar
000b7a  210a              MOVS     r1,#0xa
000b7c  4873              LDR      r0,|L1.3404|
000b7e  f7fffffe          BL       uart_putchar
000b82  210a              MOVS     r1,#0xa
000b84  4871              LDR      r0,|L1.3404|
000b86  f7fffffe          BL       uart_putchar
000b8a  210a              MOVS     r1,#0xa
000b8c  486f              LDR      r0,|L1.3404|
000b8e  f7fffffe          BL       uart_putchar
000b92  210a              MOVS     r1,#0xa
000b94  486d              LDR      r0,|L1.3404|
000b96  f7fffffe          BL       uart_putchar
000b9a  210a              MOVS     r1,#0xa
000b9c  486b              LDR      r0,|L1.3404|
000b9e  f7fffffe          BL       uart_putchar
;;;236    									//memset(data,0,1000);
;;;237    														//timer counts to wait for characters in uart 1 									
;;;238    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000ba2  bf00              NOP      
                  |L1.2980|
000ba4  4964              LDR      r1,|L1.3384|
000ba6  3138              ADDS     r1,r1,#0x38
000ba8  485c              LDR      r0,|L1.3356|
000baa  f7fffffe          BL       strstr
000bae  2800              CMP      r0,#0
000bb0  d10a              BNE      |L1.3016|
000bb2  4961              LDR      r1,|L1.3384|
000bb4  3954              SUBS     r1,r1,#0x54
000bb6  4859              LDR      r0,|L1.3356|
000bb8  f7fffffe          BL       strstr
000bbc  2800              CMP      r0,#0
000bbe  d103              BNE      |L1.3016|
000bc0  4860              LDR      r0,|L1.3396|
000bc2  6800              LDR      r0,[r0,#0]  ; tout
000bc4  2805              CMP      r0,#5
000bc6  dded              BLE      |L1.2980|
                  |L1.3016|
;;;239    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;240    									}
;;;241    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000bc8  f7fffffe          BL       clear
;;;242    									//clear();
;;;243    									memset(data,0,strlen(data));
000bcc  4858              LDR      r0,|L1.3376|
000bce  f7fffffe          BL       strlen
000bd2  4604              MOV      r4,r0
000bd4  4621              MOV      r1,r4
000bd6  4856              LDR      r0,|L1.3376|
000bd8  f7fffffe          BL       __aeabi_memclr
;;;244    									clear();
000bdc  f7fffffe          BL       clear
;;;245    									RESET_OFF;delay(100);
000be0  2020              MOVS     r0,#0x20
000be2  495b              LDR      r1,|L1.3408|
000be4  6088              STR      r0,[r1,#8]
000be6  2064              MOVS     r0,#0x64
000be8  f7fffffe          BL       delay
;;;246    									RESET_ON;delay(100);		
000bec  2020              MOVS     r0,#0x20
000bee  4958              LDR      r1,|L1.3408|
000bf0  6048              STR      r0,[r1,#4]
000bf2  2064              MOVS     r0,#0x64
000bf4  f7fffffe          BL       delay
                  |L1.3064|
;;;247    }
;;;248    	
;;;249    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000bf8  2004              MOVS     r0,#4
000bfa  a356              ADR      r3,|L1.3412|
000bfc  4a4e              LDR      r2,|L1.3384|
000bfe  3224              ADDS     r2,r2,#0x24
000c00  a156              ADR      r1,|L1.3420|
000c02  9000              STR      r0,[sp,#0]
000c04  a056              ADR      r0,|L1.3424|
000c06  f7fffffe          BL       send_GSM
;;;250    GPS_COLLECT2();
000c0a  f7fffffe          BL       GPS_COLLECT2
;;;251    strcat(data,"CH\n");	
000c0e  494a              LDR      r1,|L1.3384|
000c10  390c              SUBS     r1,r1,#0xc
000c12  4847              LDR      r0,|L1.3376|
000c14  f7fffffe          BL       strcat
;;;252    memset(at_,0,100);
000c18  2164              MOVS     r1,#0x64
000c1a  4844              LDR      r0,|L1.3372|
000c1c  f7fffffe          BL       __aeabi_memclr
;;;253    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000c20  4a53              LDR      r2,|L1.3440|
000c22  a154              ADR      r1,|L1.3444|
000c24  4841              LDR      r0,|L1.3372|
000c26  f7fffffe          BL       __2sprintf
;;;254    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000c2a  4857              LDR      r0,|L1.3464|
000c2c  6800              LDR      r0,[r0,#0]  ; tmeout
000c2e  a349              ADR      r3,|L1.3412|
000c30  4a41              LDR      r2,|L1.3384|
000c32  3224              ADDS     r2,r2,#0x24
000c34  a149              ADR      r1,|L1.3420|
000c36  9000              STR      r0,[sp,#0]
000c38  483c              LDR      r0,|L1.3372|
000c3a  f7fffffe          BL       send_GSM
;;;255    msg_sim800(); 
000c3e  f7fffffe          BL       msg_sim800
;;;256    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000c42  2004              MOVS     r0,#4
000c44  4b3c              LDR      r3,|L1.3384|
000c46  3b38              SUBS     r3,r3,#0x38
000c48  461a              MOV      r2,r3
000c4a  325c              ADDS     r2,r2,#0x5c
000c4c  a143              ADR      r1,|L1.3420|
000c4e  9000              STR      r0,[sp,#0]
000c50  a04e              ADR      r0,|L1.3468|
000c52  f7fffffe          BL       send_GSM
;;;257    GPS_COLLECT2();
000c56  f7fffffe          BL       GPS_COLLECT2
;;;258    strcat(data,"CH\n");	
000c5a  4937              LDR      r1,|L1.3384|
000c5c  390c              SUBS     r1,r1,#0xc
000c5e  4834              LDR      r0,|L1.3376|
000c60  f7fffffe          BL       strcat
;;;259    GPS_COLLECT2();
000c64  f7fffffe          BL       GPS_COLLECT2
;;;260    strcat(data,"CH\n");	
000c68  4933              LDR      r1,|L1.3384|
000c6a  390c              SUBS     r1,r1,#0xc
000c6c  4830              LDR      r0,|L1.3376|
000c6e  f7fffffe          BL       strcat
;;;261    
;;;262    
;;;263    msg_sim800(); 
000c72  f7fffffe          BL       msg_sim800
;;;264    GPS_COLLECT2();
000c76  f7fffffe          BL       GPS_COLLECT2
;;;265    strcat(data,"CH\n");	
000c7a  492f              LDR      r1,|L1.3384|
000c7c  390c              SUBS     r1,r1,#0xc
000c7e  482c              LDR      r0,|L1.3376|
000c80  f7fffffe          BL       strcat
;;;266    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000c84  f7fffffe          BL       clear
000c88  a044              ADR      r0,|L1.3484|
000c8a  f7fffffe          BL       send_modem
000c8e  f7fffffe          BL       clear
;;;267    					delay(20);
000c92  2014              MOVS     r0,#0x14
000c94  f7fffffe          BL       delay
;;;268    
;;;269    
;;;270    msg_sim800(); 
000c98  f7fffffe          BL       msg_sim800
;;;271    
;;;272    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000c9c  4b43              LDR      r3,|L1.3500|
000c9e  4a44              LDR      r2,|L1.3504|
000ca0  a144              ADR      r1,|L1.3508|
000ca2  4822              LDR      r0,|L1.3372|
000ca4  f7fffffe          BL       __2sprintf
;;;273    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000ca8  4837              LDR      r0,|L1.3464|
000caa  6800              LDR      r0,[r0,#0]  ; tmeout
000cac  a329              ADR      r3,|L1.3412|
000cae  4a22              LDR      r2,|L1.3384|
000cb0  3a54              SUBS     r2,r2,#0x54
000cb2  a148              ADR      r1,|L1.3540|
000cb4  9000              STR      r0,[sp,#0]
000cb6  481d              LDR      r0,|L1.3372|
000cb8  f7fffffe          BL       send_GSM
;;;274    						clear();
000cbc  f7fffffe          BL       clear
;;;275    						
;;;276    						
;;;277    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
000cc0  4831              LDR      r0,|L1.3464|
000cc2  6800              LDR      r0,[r0,#0]  ; tmeout
000cc4  a345              ADR      r3,|L1.3548|
000cc6  4a1c              LDR      r2,|L1.3384|
000cc8  3a54              SUBS     r2,r2,#0x54
000cca  a11c              ADR      r1,|L1.3388|
000ccc  9000              STR      r0,[sp,#0]
000cce  a047              ADR      r0,|L1.3564|
000cd0  f7fffffe          BL       send_GSM
;;;278    //*********************************tcp_initialization_ends*****************************************************//							
;;;279    									
;;;280    						clear();		
000cd4  f7fffffe          BL       clear
;;;281    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
000cd8  213e              MOVS     r1,#0x3e
000cda  4810              LDR      r0,|L1.3356|
000cdc  f7fffffe          BL       mystrstr
000ce0  4946              LDR      r1,|L1.3580|
000ce2  7008              STRB     r0,[r1,#0]
;;;282    								if(cond)	
000ce4  4608              MOV      r0,r1
000ce6  7800              LDRB     r0,[r0,#0]  ; cond
000ce8  2800              CMP      r0,#0
000cea  d016              BEQ      |L1.3354|
;;;283    								{	
;;;284    
;;;285    									clear();
000cec  f7fffffe          BL       clear
;;;286    									memset(uart_string_gsm,0,5000);
000cf0  4943              LDR      r1,|L1.3584|
000cf2  480a              LDR      r0,|L1.3356|
000cf4  f7fffffe          BL       __aeabi_memclr
;;;287    									strcat(data,"\n");
000cf8  a127              ADR      r1,|L1.3480|
000cfa  480d              LDR      r0,|L1.3376|
000cfc  f7fffffe          BL       strcat
;;;288    									len=strlen(data);
000d00  480b              LDR      r0,|L1.3376|
000d02  f7fffffe          BL       strlen
000d06  493f              LDR      r1,|L1.3588|
000d08  6008              STR      r0,[r1,#0]  ; len
;;;289    									tout=0;
000d0a  2000              MOVS     r0,#0
000d0c  490d              LDR      r1,|L1.3396|
000d0e  6008              STR      r0,[r1,#0]  ; tout
;;;290    									k2=0;
000d10  490b              LDR      r1,|L1.3392|
000d12  6008              STR      r0,[r1,#0]  ; k2
;;;291    									for(k=0;k<len;k++)
000d14  490c              LDR      r1,|L1.3400|
000d16  6008              STR      r0,[r1,#0]  ; k
000d18  e082              B        |L1.3616|
                  |L1.3354|
000d1a  e224              B        |L1.4454|
                  |L1.3356|
                          DCD      uart_string_gsm
                  |L1.3360|
                          DCD      cond200
                  |L1.3364|
                          DCD      cond201
                  |L1.3368|
                          DCD      sleep_flag
                  |L1.3372|
                          DCD      at_
                  |L1.3376|
                          DCD      data
                  |L1.3380|
                          DCD      drive
                  |L1.3384|
                          DCD      ||.text||+0x8c4
                  |L1.3388|
000d3c  3e00              DCB      ">",0
000d3e  00                DCB      0
000d3f  00                DCB      0
                  |L1.3392|
                          DCD      ||k2||
                  |L1.3396|
                          DCD      tout
                  |L1.3400|
                          DCD      k
                  |L1.3404|
                          DCD      0x4006b000
                  |L1.3408|
                          DCD      0x400ff080
                  |L1.3412|
000d54  4552524f          DCB      "ERROR:",0
000d58  523a00  
000d5b  00                DCB      0
                  |L1.3420|
000d5c  4f4b00            DCB      "OK",0
000d5f  00                DCB      0
                  |L1.3424|
000d60  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
000d64  2b434950
000d68  53485554
000d6c  0d0a00  
000d6f  00                DCB      0
                  |L1.3440|
                          DCD      apn
                  |L1.3444|
000d74  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
000d78  2b435354
000d7c  543d2225
000d80  73220d0a
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L1.3464|
                          DCD      tmeout
                  |L1.3468|
000d8c  0d0a4154          DCB      "\r\nAT+CIICR\r\r"
000d90  2b434949
000d94  43520d0d
                  |L1.3480|
000d98  0a00              DCB      "\n",0
000d9a  00                DCB      0
000d9b  00                DCB      0
                  |L1.3484|
000d9c  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
000da0  43494653
000da4  520d0d0a
000da8  00      
000da9  00                DCB      0
000daa  00                DCB      0
000dab  00                DCB      0
                  |L1.3500|
                          DCD      port
                  |L1.3504|
                          DCD      ||ip||
                  |L1.3508|
000db4  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000db8  2b434950
000dbc  53544152
000dc0  543d2254
000dc4  4350222c
000dc8  22257322
000dcc  2c222573
000dd0  220d0a00
                  |L1.3540|
000dd4  434f4e4e          DCB      "CONNECT",0
000dd8  45435400
                  |L1.3548|
000ddc  434f4e4e          DCB      "CONNECT FAIL",0
000de0  45435420
000de4  4641494c
000de8  00      
000de9  00                DCB      0
000dea  00                DCB      0
000deb  00                DCB      0
                  |L1.3564|
000dec  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
000df0  2b434950
000df4  53454e44
000df8  0d0a00  
000dfb  00                DCB      0
                  |L1.3580|
                          DCD      cond
                  |L1.3584|
                          DCD      0x00001388
                  |L1.3588|
                          DCD      len
                  |L1.3592|
;;;292    									{
;;;293    										uart_putchar(UART1_BASE_PTR, data[k]);
000e08  48fd              LDR      r0,|L1.4608|
000e0a  4afe              LDR      r2,|L1.4612|
000e0c  6812              LDR      r2,[r2,#0]  ; k
000e0e  5c81              LDRB     r1,[r0,r2]
000e10  48fd              LDR      r0,|L1.4616|
000e12  f7fffffe          BL       uart_putchar
000e16  48fb              LDR      r0,|L1.4612|
000e18  6800              LDR      r0,[r0,#0]            ;291  ; k
000e1a  1c40              ADDS     r0,r0,#1              ;291
000e1c  49f9              LDR      r1,|L1.4612|
000e1e  6008              STR      r0,[r1,#0]            ;291  ; k
                  |L1.3616|
000e20  48f8              LDR      r0,|L1.4612|
000e22  6800              LDR      r0,[r0,#0]            ;291  ; k
000e24  49f9              LDR      r1,|L1.4620|
000e26  6809              LDR      r1,[r1,#0]            ;291  ; len
000e28  4288              CMP      r0,r1                 ;291
000e2a  dbed              BLT      |L1.3592|
;;;294    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000e2c  210a              MOVS     r1,#0xa
000e2e  48f6              LDR      r0,|L1.4616|
000e30  f7fffffe          BL       uart_putchar
000e34  211a              MOVS     r1,#0x1a
000e36  48f4              LDR      r0,|L1.4616|
000e38  f7fffffe          BL       uart_putchar
000e3c  211a              MOVS     r1,#0x1a
000e3e  48f2              LDR      r0,|L1.4616|
000e40  f7fffffe          BL       uart_putchar
000e44  211a              MOVS     r1,#0x1a
000e46  48f0              LDR      r0,|L1.4616|
000e48  f7fffffe          BL       uart_putchar
;;;295    									do
000e4c  bf00              NOP      
                  |L1.3662|
;;;296    																{stcond1=strstr(uart_string_gsm,"SEND OK");
000e4e  49f0              LDR      r1,|L1.4624|
000e50  48f0              LDR      r0,|L1.4628|
000e52  f7fffffe          BL       strstr
000e56  49f0              LDR      r1,|L1.4632|
000e58  6008              STR      r0,[r1,#0]  ; stcond1
;;;297    																	stcond2=strstr(uart_string_gsm, "ERROR");
000e5a  49f0              LDR      r1,|L1.4636|
000e5c  48ed              LDR      r0,|L1.4628|
000e5e  f7fffffe          BL       strstr
000e62  49ef              LDR      r1,|L1.4640|
000e64  6008              STR      r0,[r1,#0]  ; stcond2
;;;298    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000e66  49ef              LDR      r1,|L1.4644|
000e68  48ea              LDR      r0,|L1.4628|
000e6a  f7fffffe          BL       strstr
000e6e  49ee              LDR      r1,|L1.4648|
000e70  6008              STR      r0,[r1,#0]  ; stcond3
;;;299    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000e72  49ea              LDR      r1,|L1.4636|
000e74  311c              ADDS     r1,r1,#0x1c
000e76  48e7              LDR      r0,|L1.4628|
000e78  f7fffffe          BL       strstr
000e7c  49eb              LDR      r1,|L1.4652|
000e7e  6008              STR      r0,[r1,#0]  ; stcond4
;;;300    																	
;;;301    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
000e80  48e7              LDR      r0,|L1.4640|
000e82  6800              LDR      r0,[r0,#0]  ; stcond2
000e84  2800              CMP      r0,#0
000e86  d10f              BNE      |L1.3752|
000e88  48e7              LDR      r0,|L1.4648|
000e8a  6800              LDR      r0,[r0,#0]  ; stcond3
000e8c  2800              CMP      r0,#0
000e8e  d10b              BNE      |L1.3752|
000e90  4608              MOV      r0,r1
000e92  6800              LDR      r0,[r0,#0]  ; stcond4
000e94  2800              CMP      r0,#0
000e96  d107              BNE      |L1.3752|
000e98  48df              LDR      r0,|L1.4632|
000e9a  6800              LDR      r0,[r0,#0]  ; stcond1
000e9c  2800              CMP      r0,#0
000e9e  d103              BNE      |L1.3752|
000ea0  48e3              LDR      r0,|L1.4656|
000ea2  6800              LDR      r0,[r0,#0]  ; tout
000ea4  2804              CMP      r0,#4
000ea6  ddd2              BLE      |L1.3662|
                  |L1.3752|
;;;302    															//	delay(10);clear();
;;;303    														uart_putchar(UART1_BASE_PTR,0x1A);
000ea8  211a              MOVS     r1,#0x1a
000eaa  48d7              LDR      r0,|L1.4616|
000eac  f7fffffe          BL       uart_putchar
;;;304    											//	delay(10);
;;;305    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000eb0  211a              MOVS     r1,#0x1a
000eb2  48d5              LDR      r0,|L1.4616|
000eb4  f7fffffe          BL       uart_putchar
000eb8  211a              MOVS     r1,#0x1a
000eba  48d3              LDR      r0,|L1.4616|
000ebc  f7fffffe          BL       uart_putchar
000ec0  211a              MOVS     r1,#0x1a
000ec2  48d1              LDR      r0,|L1.4616|
000ec4  f7fffffe          BL       uart_putchar
;;;306    						
;;;307    
;;;308    
;;;309    									
;;;310    															
;;;311    															
;;;312    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;313    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;314    															
;;;315    														//qwe=strlen(uart_string_gsm);
;;;316    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;317    															delay(20);
000ec8  2014              MOVS     r0,#0x14
000eca  f7fffffe          BL       delay
;;;318    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
000ece  49d0              LDR      r1,|L1.4624|
000ed0  48d0              LDR      r0,|L1.4628|
000ed2  f7fffffe          BL       strstr
000ed6  49d7              LDR      r1,|L1.4660|
000ed8  6008              STR      r0,[r1,#0]  ; con1d
;;;319    																if(!con1d)
000eda  4608              MOV      r0,r1
000edc  6800              LDR      r0,[r0,#0]  ; con1d
000ede  2800              CMP      r0,#0
000ee0  d17e              BNE      |L1.4064|
;;;320    																{
;;;321    																	
;;;322    																	
;;;323    																	
;;;324    																	
;;;325    																	
;;;326    	delay(100);
000ee2  2064              MOVS     r0,#0x64
000ee4  f7fffffe          BL       delay
;;;327    		clear();//memset(uart_string_gsm,0,5000);
000ee8  f7fffffe          BL       clear
;;;328    	
;;;329    	memset(at_,0,100);
000eec  2164              MOVS     r1,#0x64
000eee  48d2              LDR      r0,|L1.4664|
000ef0  f7fffffe          BL       __aeabi_memclr
;;;330    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000ef4  48c2              LDR      r0,|L1.4608|
000ef6  f7fffffe          BL       strlen
000efa  1c44              ADDS     r4,r0,#1
000efc  4623              MOV      r3,r4
000efe  4acf              LDR      r2,|L1.4668|
000f00  49c6              LDR      r1,|L1.4636|
000f02  3154              ADDS     r1,r1,#0x54
000f04  48cc              LDR      r0,|L1.4664|
000f06  f7fffffe          BL       __2sprintf
;;;331    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000f0a  2005              MOVS     r0,#5
000f0c  4bc3              LDR      r3,|L1.4636|
000f0e  461a              MOV      r2,r3
000f10  3278              ADDS     r2,r2,#0x78
000f12  a1cb              ADR      r1,|L1.4672|
000f14  9000              STR      r0,[sp,#0]
000f16  48c8              LDR      r0,|L1.4664|
000f18  f7fffffe          BL       send_SD
;;;332    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;333    //	if(strstr(uart_string_gsm,"ERROR")){
;;;334    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;335    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;336    //	}
;;;337    	
;;;338    clear();	
000f1c  f7fffffe          BL       clear
;;;339    									k2=0;									//string array counter for uart 1
000f20  2000              MOVS     r0,#0
000f22  49c8              LDR      r1,|L1.4676|
000f24  6008              STR      r0,[r1,#0]  ; k2
;;;340    									tout=0;	
000f26  49c2              LDR      r1,|L1.4656|
000f28  6008              STR      r0,[r1,#0]  ; tout
;;;341    		for(k=0;k<strlen(data);k++)
000f2a  49b6              LDR      r1,|L1.4612|
000f2c  6008              STR      r0,[r1,#0]  ; k
000f2e  e00b              B        |L1.3912|
                  |L1.3888|
;;;342    		{
;;;343    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000f30  48b3              LDR      r0,|L1.4608|
000f32  4ab4              LDR      r2,|L1.4612|
000f34  6812              LDR      r2,[r2,#0]  ; k
000f36  5c81              LDRB     r1,[r0,r2]
000f38  48b3              LDR      r0,|L1.4616|
000f3a  f7fffffe          BL       uart_putchar
000f3e  48b1              LDR      r0,|L1.4612|
000f40  6800              LDR      r0,[r0,#0]            ;341  ; k
000f42  1c40              ADDS     r0,r0,#1              ;341
000f44  49af              LDR      r1,|L1.4612|
000f46  6008              STR      r0,[r1,#0]            ;341  ; k
                  |L1.3912|
000f48  48ad              LDR      r0,|L1.4608|
000f4a  f7fffffe          BL       strlen
000f4e  49ad              LDR      r1,|L1.4612|
000f50  6809              LDR      r1,[r1,#0]            ;341  ; k
000f52  4288              CMP      r0,r1                 ;341
000f54  d8ec              BHI      |L1.3888|
;;;344    		}	
;;;345    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000f56  210a              MOVS     r1,#0xa
000f58  48ab              LDR      r0,|L1.4616|
000f5a  f7fffffe          BL       uart_putchar
000f5e  210a              MOVS     r1,#0xa
000f60  48a9              LDR      r0,|L1.4616|
000f62  f7fffffe          BL       uart_putchar
000f66  210a              MOVS     r1,#0xa
000f68  48a7              LDR      r0,|L1.4616|
000f6a  f7fffffe          BL       uart_putchar
000f6e  210a              MOVS     r1,#0xa
000f70  48a5              LDR      r0,|L1.4616|
000f72  f7fffffe          BL       uart_putchar
000f76  210a              MOVS     r1,#0xa
000f78  48a3              LDR      r0,|L1.4616|
000f7a  f7fffffe          BL       uart_putchar
000f7e  210a              MOVS     r1,#0xa
000f80  48a1              LDR      r0,|L1.4616|
000f82  f7fffffe          BL       uart_putchar
000f86  210a              MOVS     r1,#0xa
000f88  489f              LDR      r0,|L1.4616|
000f8a  f7fffffe          BL       uart_putchar
000f8e  210a              MOVS     r1,#0xa
000f90  489d              LDR      r0,|L1.4616|
000f92  f7fffffe          BL       uart_putchar
000f96  210a              MOVS     r1,#0xa
000f98  489b              LDR      r0,|L1.4616|
000f9a  f7fffffe          BL       uart_putchar
000f9e  210a              MOVS     r1,#0xa
000fa0  4899              LDR      r0,|L1.4616|
000fa2  f7fffffe          BL       uart_putchar
000fa6  210a              MOVS     r1,#0xa
000fa8  4897              LDR      r0,|L1.4616|
000faa  f7fffffe          BL       uart_putchar
000fae  210a              MOVS     r1,#0xa
000fb0  4895              LDR      r0,|L1.4616|
000fb2  f7fffffe          BL       uart_putchar
000fb6  210a              MOVS     r1,#0xa
000fb8  4893              LDR      r0,|L1.4616|
000fba  f7fffffe          BL       uart_putchar
000fbe  210a              MOVS     r1,#0xa
000fc0  4891              LDR      r0,|L1.4616|
000fc2  f7fffffe          BL       uart_putchar
000fc6  210a              MOVS     r1,#0xa
000fc8  488f              LDR      r0,|L1.4616|
000fca  f7fffffe          BL       uart_putchar
000fce  210a              MOVS     r1,#0xa
000fd0  488d              LDR      r0,|L1.4616|
000fd2  f7fffffe          BL       uart_putchar
000fd6  210a              MOVS     r1,#0xa
000fd8  488b              LDR      r0,|L1.4616|
000fda  f7fffffe          BL       uart_putchar
000fde  e000              B        |L1.4066|
                  |L1.4064|
000fe0  e0be              B        |L1.4448|
                  |L1.4066|
000fe2  210a              MOVS     r1,#0xa
000fe4  4888              LDR      r0,|L1.4616|
000fe6  f7fffffe          BL       uart_putchar
000fea  210a              MOVS     r1,#0xa
000fec  4886              LDR      r0,|L1.4616|
000fee  f7fffffe          BL       uart_putchar
000ff2  210a              MOVS     r1,#0xa
000ff4  4884              LDR      r0,|L1.4616|
000ff6  f7fffffe          BL       uart_putchar
000ffa  210a              MOVS     r1,#0xa
000ffc  4882              LDR      r0,|L1.4616|
000ffe  f7fffffe          BL       uart_putchar
001002  210a              MOVS     r1,#0xa
001004  4880              LDR      r0,|L1.4616|
001006  f7fffffe          BL       uart_putchar
00100a  210a              MOVS     r1,#0xa
00100c  487e              LDR      r0,|L1.4616|
00100e  f7fffffe          BL       uart_putchar
001012  210a              MOVS     r1,#0xa
001014  487c              LDR      r0,|L1.4616|
001016  f7fffffe          BL       uart_putchar
00101a  210a              MOVS     r1,#0xa
00101c  487a              LDR      r0,|L1.4616|
00101e  f7fffffe          BL       uart_putchar
001022  210a              MOVS     r1,#0xa
001024  4878              LDR      r0,|L1.4616|
001026  f7fffffe          BL       uart_putchar
00102a  210a              MOVS     r1,#0xa
00102c  4876              LDR      r0,|L1.4616|
00102e  f7fffffe          BL       uart_putchar
001032  210a              MOVS     r1,#0xa
001034  4874              LDR      r0,|L1.4616|
001036  f7fffffe          BL       uart_putchar
00103a  210a              MOVS     r1,#0xa
00103c  4872              LDR      r0,|L1.4616|
00103e  f7fffffe          BL       uart_putchar
001042  210a              MOVS     r1,#0xa
001044  4870              LDR      r0,|L1.4616|
001046  f7fffffe          BL       uart_putchar
00104a  210a              MOVS     r1,#0xa
00104c  486e              LDR      r0,|L1.4616|
00104e  f7fffffe          BL       uart_putchar
001052  210a              MOVS     r1,#0xa
001054  486c              LDR      r0,|L1.4616|
001056  f7fffffe          BL       uart_putchar
00105a  210a              MOVS     r1,#0xa
00105c  486a              LDR      r0,|L1.4616|
00105e  f7fffffe          BL       uart_putchar
001062  210a              MOVS     r1,#0xa
001064  4868              LDR      r0,|L1.4616|
001066  f7fffffe          BL       uart_putchar
00106a  210a              MOVS     r1,#0xa
00106c  4866              LDR      r0,|L1.4616|
00106e  f7fffffe          BL       uart_putchar
001072  210a              MOVS     r1,#0xa
001074  4864              LDR      r0,|L1.4616|
001076  f7fffffe          BL       uart_putchar
00107a  210a              MOVS     r1,#0xa
00107c  4862              LDR      r0,|L1.4616|
00107e  f7fffffe          BL       uart_putchar
001082  210a              MOVS     r1,#0xa
001084  4860              LDR      r0,|L1.4616|
001086  f7fffffe          BL       uart_putchar
00108a  210a              MOVS     r1,#0xa
00108c  485e              LDR      r0,|L1.4616|
00108e  f7fffffe          BL       uart_putchar
001092  210a              MOVS     r1,#0xa
001094  485c              LDR      r0,|L1.4616|
001096  f7fffffe          BL       uart_putchar
00109a  210a              MOVS     r1,#0xa
00109c  485a              LDR      r0,|L1.4616|
00109e  f7fffffe          BL       uart_putchar
0010a2  210a              MOVS     r1,#0xa
0010a4  4858              LDR      r0,|L1.4616|
0010a6  f7fffffe          BL       uart_putchar
0010aa  210a              MOVS     r1,#0xa
0010ac  4856              LDR      r0,|L1.4616|
0010ae  f7fffffe          BL       uart_putchar
0010b2  210a              MOVS     r1,#0xa
0010b4  4854              LDR      r0,|L1.4616|
0010b6  f7fffffe          BL       uart_putchar
0010ba  210a              MOVS     r1,#0xa
0010bc  4852              LDR      r0,|L1.4616|
0010be  f7fffffe          BL       uart_putchar
0010c2  210a              MOVS     r1,#0xa
0010c4  4850              LDR      r0,|L1.4616|
0010c6  f7fffffe          BL       uart_putchar
0010ca  210a              MOVS     r1,#0xa
0010cc  484e              LDR      r0,|L1.4616|
0010ce  f7fffffe          BL       uart_putchar
0010d2  210a              MOVS     r1,#0xa
0010d4  484c              LDR      r0,|L1.4616|
0010d6  f7fffffe          BL       uart_putchar
0010da  210a              MOVS     r1,#0xa
0010dc  484a              LDR      r0,|L1.4616|
0010de  f7fffffe          BL       uart_putchar
0010e2  210a              MOVS     r1,#0xa
0010e4  4848              LDR      r0,|L1.4616|
0010e6  f7fffffe          BL       uart_putchar
0010ea  210a              MOVS     r1,#0xa
0010ec  4846              LDR      r0,|L1.4616|
0010ee  f7fffffe          BL       uart_putchar
0010f2  210a              MOVS     r1,#0xa
0010f4  4844              LDR      r0,|L1.4616|
0010f6  f7fffffe          BL       uart_putchar
0010fa  210a              MOVS     r1,#0xa
0010fc  4842              LDR      r0,|L1.4616|
0010fe  f7fffffe          BL       uart_putchar
001102  210a              MOVS     r1,#0xa
001104  4840              LDR      r0,|L1.4616|
001106  f7fffffe          BL       uart_putchar
00110a  210a              MOVS     r1,#0xa
00110c  483e              LDR      r0,|L1.4616|
00110e  f7fffffe          BL       uart_putchar
001112  210a              MOVS     r1,#0xa
001114  483c              LDR      r0,|L1.4616|
001116  f7fffffe          BL       uart_putchar
00111a  210a              MOVS     r1,#0xa
00111c  483a              LDR      r0,|L1.4616|
00111e  f7fffffe          BL       uart_putchar
;;;346    									//memset(data,0,1000);
;;;347    														//timer counts to wait for characters in uart 1 									
;;;348    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001122  bf00              NOP      
                  |L1.4388|
001124  493d              LDR      r1,|L1.4636|
001126  318c              ADDS     r1,r1,#0x8c
001128  483a              LDR      r0,|L1.4628|
00112a  f7fffffe          BL       strstr
00112e  2800              CMP      r0,#0
001130  d109              BNE      |L1.4422|
001132  493a              LDR      r1,|L1.4636|
001134  4837              LDR      r0,|L1.4628|
001136  f7fffffe          BL       strstr
00113a  2800              CMP      r0,#0
00113c  d103              BNE      |L1.4422|
00113e  483c              LDR      r0,|L1.4656|
001140  6800              LDR      r0,[r0,#0]  ; tout
001142  2805              CMP      r0,#5
001144  ddee              BLE      |L1.4388|
                  |L1.4422|
;;;349    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;350    									}
;;;351    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001146  f7fffffe          BL       clear
;;;352    									//clear();
;;;353    									memset(data,0,strlen(data));
00114a  482d              LDR      r0,|L1.4608|
00114c  f7fffffe          BL       strlen
001150  4604              MOV      r4,r0
001152  4621              MOV      r1,r4
001154  482a              LDR      r0,|L1.4608|
001156  f7fffffe          BL       __aeabi_memclr
;;;354    									clear();
00115a  f7fffffe          BL       clear
00115e  e166              B        |L1.5166|
                  |L1.4448|
;;;355    
;;;356    								
;;;357    								//								log_it();								
;;;358    																}else{send_chunk();}													
001160  f7fffffe          BL       send_chunk
001164  e163              B        |L1.5166|
                  |L1.4454|
;;;359    								//checks for the sd_data available
;;;360    								}
;;;361    								//con1d=strstr(uart_string_gsm,"OK");
;;;362    								else
;;;363    								{
;;;364    									
;;;365    									
;;;366    	delay(100);
001166  2064              MOVS     r0,#0x64
001168  f7fffffe          BL       delay
;;;367    		clear();//memset(uart_string_gsm,0,5000);
00116c  f7fffffe          BL       clear
;;;368    	
;;;369    	memset(at_,0,100);
001170  2164              MOVS     r1,#0x64
001172  4831              LDR      r0,|L1.4664|
001174  f7fffffe          BL       __aeabi_memclr
;;;370    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001178  4821              LDR      r0,|L1.4608|
00117a  f7fffffe          BL       strlen
00117e  1c44              ADDS     r4,r0,#1
001180  4623              MOV      r3,r4
001182  4a2e              LDR      r2,|L1.4668|
001184  4925              LDR      r1,|L1.4636|
001186  3154              ADDS     r1,r1,#0x54
001188  482b              LDR      r0,|L1.4664|
00118a  f7fffffe          BL       __2sprintf
;;;371    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00118e  2005              MOVS     r0,#5
001190  4b22              LDR      r3,|L1.4636|
001192  461a              MOV      r2,r3
001194  3278              ADDS     r2,r2,#0x78
001196  a12a              ADR      r1,|L1.4672|
001198  9000              STR      r0,[sp,#0]
00119a  4827              LDR      r0,|L1.4664|
00119c  f7fffffe          BL       send_SD
;;;372    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;373    //	if(strstr(uart_string_gsm,"ERROR")){
;;;374    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;375    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;376    //	}
;;;377    	
;;;378    clear();	
0011a0  f7fffffe          BL       clear
;;;379    									k2=0;									//string array counter for uart 1
0011a4  2000              MOVS     r0,#0
0011a6  4927              LDR      r1,|L1.4676|
0011a8  6008              STR      r0,[r1,#0]  ; k2
;;;380    									tout=0;	
0011aa  4921              LDR      r1,|L1.4656|
0011ac  6008              STR      r0,[r1,#0]  ; tout
;;;381    		for(k=0;k<strlen(data);k++)
0011ae  4915              LDR      r1,|L1.4612|
0011b0  6008              STR      r0,[r1,#0]  ; k
0011b2  e00b              B        |L1.4556|
                  |L1.4532|
;;;382    		{
;;;383    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0011b4  4812              LDR      r0,|L1.4608|
0011b6  4a13              LDR      r2,|L1.4612|
0011b8  6812              LDR      r2,[r2,#0]  ; k
0011ba  5c81              LDRB     r1,[r0,r2]
0011bc  4812              LDR      r0,|L1.4616|
0011be  f7fffffe          BL       uart_putchar
0011c2  4810              LDR      r0,|L1.4612|
0011c4  6800              LDR      r0,[r0,#0]            ;381  ; k
0011c6  1c40              ADDS     r0,r0,#1              ;381
0011c8  490e              LDR      r1,|L1.4612|
0011ca  6008              STR      r0,[r1,#0]            ;381  ; k
                  |L1.4556|
0011cc  480c              LDR      r0,|L1.4608|
0011ce  f7fffffe          BL       strlen
0011d2  490c              LDR      r1,|L1.4612|
0011d4  6809              LDR      r1,[r1,#0]            ;381  ; k
0011d6  4288              CMP      r0,r1                 ;381
0011d8  d8ec              BHI      |L1.4532|
;;;384    		}	
;;;385    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0011da  210a              MOVS     r1,#0xa
0011dc  480a              LDR      r0,|L1.4616|
0011de  f7fffffe          BL       uart_putchar
0011e2  210a              MOVS     r1,#0xa
0011e4  4808              LDR      r0,|L1.4616|
0011e6  f7fffffe          BL       uart_putchar
0011ea  210a              MOVS     r1,#0xa
0011ec  4806              LDR      r0,|L1.4616|
0011ee  f7fffffe          BL       uart_putchar
0011f2  210a              MOVS     r1,#0xa
0011f4  4804              LDR      r0,|L1.4616|
0011f6  f7fffffe          BL       uart_putchar
0011fa  210a              MOVS     r1,#0xa
0011fc  4802              LDR      r0,|L1.4616|
0011fe  e023              B        |L1.4680|
                  |L1.4608|
                          DCD      data
                  |L1.4612|
                          DCD      k
                  |L1.4616|
                          DCD      0x4006b000
                  |L1.4620|
                          DCD      len
                  |L1.4624|
                          DCD      ||.text||+0x474
                  |L1.4628|
                          DCD      uart_string_gsm
                  |L1.4632|
                          DCD      stcond1
                  |L1.4636|
                          DCD      ||.text||+0x870
                  |L1.4640|
                          DCD      stcond2
                  |L1.4644|
                          DCD      ||.text||+0xde4
                  |L1.4648|
                          DCD      stcond3
                  |L1.4652|
                          DCD      stcond4
                  |L1.4656|
                          DCD      tout
                  |L1.4660|
                          DCD      con1d
                  |L1.4664|
                          DCD      at_
                  |L1.4668|
                          DCD      drive
                  |L1.4672|
001240  3e00              DCB      ">",0
001242  00                DCB      0
001243  00                DCB      0
                  |L1.4676|
                          DCD      ||k2||
                  |L1.4680|
001248  f7fffffe          BL       uart_putchar
00124c  210a              MOVS     r1,#0xa
00124e  48fe              LDR      r0,|L1.5704|
001250  f7fffffe          BL       uart_putchar
001254  210a              MOVS     r1,#0xa
001256  48fc              LDR      r0,|L1.5704|
001258  f7fffffe          BL       uart_putchar
00125c  210a              MOVS     r1,#0xa
00125e  48fa              LDR      r0,|L1.5704|
001260  f7fffffe          BL       uart_putchar
001264  210a              MOVS     r1,#0xa
001266  48f8              LDR      r0,|L1.5704|
001268  f7fffffe          BL       uart_putchar
00126c  210a              MOVS     r1,#0xa
00126e  48f6              LDR      r0,|L1.5704|
001270  f7fffffe          BL       uart_putchar
001274  210a              MOVS     r1,#0xa
001276  48f4              LDR      r0,|L1.5704|
001278  f7fffffe          BL       uart_putchar
00127c  210a              MOVS     r1,#0xa
00127e  48f2              LDR      r0,|L1.5704|
001280  f7fffffe          BL       uart_putchar
001284  210a              MOVS     r1,#0xa
001286  48f0              LDR      r0,|L1.5704|
001288  f7fffffe          BL       uart_putchar
00128c  210a              MOVS     r1,#0xa
00128e  48ee              LDR      r0,|L1.5704|
001290  f7fffffe          BL       uart_putchar
001294  210a              MOVS     r1,#0xa
001296  48ec              LDR      r0,|L1.5704|
001298  f7fffffe          BL       uart_putchar
00129c  210a              MOVS     r1,#0xa
00129e  48ea              LDR      r0,|L1.5704|
0012a0  f7fffffe          BL       uart_putchar
0012a4  210a              MOVS     r1,#0xa
0012a6  48e8              LDR      r0,|L1.5704|
0012a8  f7fffffe          BL       uart_putchar
0012ac  210a              MOVS     r1,#0xa
0012ae  48e6              LDR      r0,|L1.5704|
0012b0  f7fffffe          BL       uart_putchar
0012b4  210a              MOVS     r1,#0xa
0012b6  48e4              LDR      r0,|L1.5704|
0012b8  f7fffffe          BL       uart_putchar
0012bc  210a              MOVS     r1,#0xa
0012be  48e2              LDR      r0,|L1.5704|
0012c0  f7fffffe          BL       uart_putchar
0012c4  210a              MOVS     r1,#0xa
0012c6  48e0              LDR      r0,|L1.5704|
0012c8  f7fffffe          BL       uart_putchar
0012cc  210a              MOVS     r1,#0xa
0012ce  48de              LDR      r0,|L1.5704|
0012d0  f7fffffe          BL       uart_putchar
0012d4  210a              MOVS     r1,#0xa
0012d6  48dc              LDR      r0,|L1.5704|
0012d8  f7fffffe          BL       uart_putchar
0012dc  210a              MOVS     r1,#0xa
0012de  48da              LDR      r0,|L1.5704|
0012e0  f7fffffe          BL       uart_putchar
0012e4  210a              MOVS     r1,#0xa
0012e6  48d8              LDR      r0,|L1.5704|
0012e8  f7fffffe          BL       uart_putchar
0012ec  210a              MOVS     r1,#0xa
0012ee  48d6              LDR      r0,|L1.5704|
0012f0  f7fffffe          BL       uart_putchar
0012f4  210a              MOVS     r1,#0xa
0012f6  48d4              LDR      r0,|L1.5704|
0012f8  f7fffffe          BL       uart_putchar
0012fc  210a              MOVS     r1,#0xa
0012fe  48d2              LDR      r0,|L1.5704|
001300  f7fffffe          BL       uart_putchar
001304  210a              MOVS     r1,#0xa
001306  48d0              LDR      r0,|L1.5704|
001308  f7fffffe          BL       uart_putchar
00130c  210a              MOVS     r1,#0xa
00130e  48ce              LDR      r0,|L1.5704|
001310  f7fffffe          BL       uart_putchar
001314  210a              MOVS     r1,#0xa
001316  48cc              LDR      r0,|L1.5704|
001318  f7fffffe          BL       uart_putchar
00131c  210a              MOVS     r1,#0xa
00131e  48ca              LDR      r0,|L1.5704|
001320  f7fffffe          BL       uart_putchar
001324  210a              MOVS     r1,#0xa
001326  48c8              LDR      r0,|L1.5704|
001328  f7fffffe          BL       uart_putchar
00132c  210a              MOVS     r1,#0xa
00132e  48c6              LDR      r0,|L1.5704|
001330  f7fffffe          BL       uart_putchar
001334  210a              MOVS     r1,#0xa
001336  48c4              LDR      r0,|L1.5704|
001338  f7fffffe          BL       uart_putchar
00133c  210a              MOVS     r1,#0xa
00133e  48c2              LDR      r0,|L1.5704|
001340  f7fffffe          BL       uart_putchar
001344  210a              MOVS     r1,#0xa
001346  48c0              LDR      r0,|L1.5704|
001348  f7fffffe          BL       uart_putchar
00134c  210a              MOVS     r1,#0xa
00134e  48be              LDR      r0,|L1.5704|
001350  f7fffffe          BL       uart_putchar
001354  210a              MOVS     r1,#0xa
001356  48bc              LDR      r0,|L1.5704|
001358  f7fffffe          BL       uart_putchar
00135c  210a              MOVS     r1,#0xa
00135e  48ba              LDR      r0,|L1.5704|
001360  f7fffffe          BL       uart_putchar
001364  210a              MOVS     r1,#0xa
001366  48b8              LDR      r0,|L1.5704|
001368  f7fffffe          BL       uart_putchar
00136c  210a              MOVS     r1,#0xa
00136e  48b6              LDR      r0,|L1.5704|
001370  f7fffffe          BL       uart_putchar
001374  210a              MOVS     r1,#0xa
001376  48b4              LDR      r0,|L1.5704|
001378  f7fffffe          BL       uart_putchar
00137c  210a              MOVS     r1,#0xa
00137e  48b2              LDR      r0,|L1.5704|
001380  f7fffffe          BL       uart_putchar
001384  210a              MOVS     r1,#0xa
001386  48b0              LDR      r0,|L1.5704|
001388  f7fffffe          BL       uart_putchar
00138c  210a              MOVS     r1,#0xa
00138e  48ae              LDR      r0,|L1.5704|
001390  f7fffffe          BL       uart_putchar
001394  210a              MOVS     r1,#0xa
001396  48ac              LDR      r0,|L1.5704|
001398  f7fffffe          BL       uart_putchar
00139c  210a              MOVS     r1,#0xa
00139e  48aa              LDR      r0,|L1.5704|
0013a0  f7fffffe          BL       uart_putchar
0013a4  210a              MOVS     r1,#0xa
0013a6  48a8              LDR      r0,|L1.5704|
0013a8  f7fffffe          BL       uart_putchar
0013ac  210a              MOVS     r1,#0xa
0013ae  48a6              LDR      r0,|L1.5704|
0013b0  f7fffffe          BL       uart_putchar
0013b4  210a              MOVS     r1,#0xa
0013b6  48a4              LDR      r0,|L1.5704|
0013b8  f7fffffe          BL       uart_putchar
0013bc  210a              MOVS     r1,#0xa
0013be  48a2              LDR      r0,|L1.5704|
0013c0  f7fffffe          BL       uart_putchar
0013c4  210a              MOVS     r1,#0xa
0013c6  48a0              LDR      r0,|L1.5704|
0013c8  f7fffffe          BL       uart_putchar
0013cc  210a              MOVS     r1,#0xa
0013ce  489e              LDR      r0,|L1.5704|
0013d0  f7fffffe          BL       uart_putchar
0013d4  210a              MOVS     r1,#0xa
0013d6  489c              LDR      r0,|L1.5704|
0013d8  f7fffffe          BL       uart_putchar
0013dc  210a              MOVS     r1,#0xa
0013de  489a              LDR      r0,|L1.5704|
0013e0  f7fffffe          BL       uart_putchar
0013e4  210a              MOVS     r1,#0xa
0013e6  4898              LDR      r0,|L1.5704|
0013e8  f7fffffe          BL       uart_putchar
;;;386    									//memset(data,0,1000);
;;;387    														//timer counts to wait for characters in uart 1 									
;;;388    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0013ec  bf00              NOP      
                  |L1.5102|
0013ee  4997              LDR      r1,|L1.5708|
0013f0  4897              LDR      r0,|L1.5712|
0013f2  f7fffffe          BL       strstr
0013f6  2800              CMP      r0,#0
0013f8  d10a              BNE      |L1.5136|
0013fa  4994              LDR      r1,|L1.5708|
0013fc  398c              SUBS     r1,r1,#0x8c
0013fe  4894              LDR      r0,|L1.5712|
001400  f7fffffe          BL       strstr
001404  2800              CMP      r0,#0
001406  d103              BNE      |L1.5136|
001408  4892              LDR      r0,|L1.5716|
00140a  6800              LDR      r0,[r0,#0]  ; tout
00140c  2805              CMP      r0,#5
00140e  ddee              BLE      |L1.5102|
                  |L1.5136|
;;;389    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;390    									}
;;;391    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001410  f7fffffe          BL       clear
;;;392    									//clear();
;;;393    									memset(data,0,strlen(data));
001414  4890              LDR      r0,|L1.5720|
001416  f7fffffe          BL       strlen
00141a  4604              MOV      r4,r0
00141c  4621              MOV      r1,r4
00141e  488e              LDR      r0,|L1.5720|
001420  f7fffffe          BL       __aeabi_memclr
;;;394    									clear();
001424  f7fffffe          BL       clear
001428  e001              B        |L1.5166|
                  |L1.5162|
;;;395    
;;;396    								
;;;397    									
;;;398    									
;;;399    									//log_it();			//otherwize log it					
;;;400    								}
;;;401    
;;;402    																
;;;403    //delay(50);
;;;404    
;;;405    //else{
;;;406    //log_it();}
;;;407    								
;;;408    								
;;;409    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;410    	else
;;;411    	{
;;;412    		send_chunk();
00142a  f7fffffe          BL       send_chunk
                  |L1.5166|
;;;413    	}		
;;;414    								
;;;415    								
;;;416    								
;;;417    	memset(data,0,strlen(data));	
00142e  488a              LDR      r0,|L1.5720|
001430  f7fffffe          BL       strlen
001434  4604              MOV      r4,r0
001436  4621              MOV      r1,r4
001438  4887              LDR      r0,|L1.5720|
00143a  f7fffffe          BL       __aeabi_memclr
;;;418    	uart_putchar(UART1_BASE_PTR, 0x1A);
00143e  211a              MOVS     r1,#0x1a
001440  4881              LDR      r0,|L1.5704|
001442  f7fffffe          BL       uart_putchar
;;;419    	
;;;420    }
001446  bd38              POP      {r3-r5,pc}
;;;421    	
                          ENDP

                  send_tcp_bal PROC
;;;433    
;;;434    void send_tcp_bal()
001448  b538              PUSH     {r3-r5,lr}
;;;435    {	
;;;436    memset(stcond1,0,strlen(stcond1));	
00144a  4884              LDR      r0,|L1.5724|
00144c  6800              LDR      r0,[r0,#0]  ; stcond1
00144e  f7fffffe          BL       strlen
001452  4604              MOV      r4,r0
001454  4621              MOV      r1,r4
001456  4881              LDR      r0,|L1.5724|
001458  6800              LDR      r0,[r0,#0]  ; stcond1
00145a  f7fffffe          BL       __aeabi_memclr
;;;437    memset(con1d,0,strlen(con1d));	
00145e  4880              LDR      r0,|L1.5728|
001460  6800              LDR      r0,[r0,#0]  ; con1d
001462  f7fffffe          BL       strlen
001466  4604              MOV      r4,r0
001468  4621              MOV      r1,r4
00146a  487d              LDR      r0,|L1.5728|
00146c  6800              LDR      r0,[r0,#0]  ; con1d
00146e  f7fffffe          BL       __aeabi_memclr
;;;438    	
;;;439    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;440    
;;;441    								cond=mystrstr(uart_string_gsm,'>');
001472  213e              MOVS     r1,#0x3e
001474  4876              LDR      r0,|L1.5712|
001476  f7fffffe          BL       mystrstr
00147a  497a              LDR      r1,|L1.5732|
00147c  7008              STRB     r0,[r1,#0]
;;;442    								if(cond)	
00147e  4608              MOV      r0,r1
001480  7800              LDRB     r0,[r0,#0]  ; cond
001482  2800              CMP      r0,#0
001484  d07e              BEQ      |L1.5508|
;;;443    								{
;;;444    									
;;;445    									clear();
001486  f7fffffe          BL       clear
;;;446    									memset(uart_string_gsm,0,5000);
00148a  4977              LDR      r1,|L1.5736|
00148c  4870              LDR      r0,|L1.5712|
00148e  f7fffffe          BL       __aeabi_memclr
;;;447    									strcat(data,"\n\n");
001492  a176              ADR      r1,|L1.5740|
001494  4870              LDR      r0,|L1.5720|
001496  f7fffffe          BL       strcat
;;;448    									len=strlen(data);
00149a  486f              LDR      r0,|L1.5720|
00149c  f7fffffe          BL       strlen
0014a0  4973              LDR      r1,|L1.5744|
0014a2  6008              STR      r0,[r1,#0]  ; len
;;;449    									tout=0;
0014a4  2000              MOVS     r0,#0
0014a6  496b              LDR      r1,|L1.5716|
0014a8  6008              STR      r0,[r1,#0]  ; tout
;;;450    									k2=0;
0014aa  4972              LDR      r1,|L1.5748|
0014ac  6008              STR      r0,[r1,#0]  ; k2
;;;451    									for(k=0;k<len;k++)
0014ae  4972              LDR      r1,|L1.5752|
0014b0  6008              STR      r0,[r1,#0]  ; k
0014b2  e00b              B        |L1.5324|
                  |L1.5300|
;;;452    									{
;;;453    										uart_putchar(UART1_BASE_PTR, data[k]);
0014b4  4868              LDR      r0,|L1.5720|
0014b6  4a70              LDR      r2,|L1.5752|
0014b8  6812              LDR      r2,[r2,#0]  ; k
0014ba  5c81              LDRB     r1,[r0,r2]
0014bc  4862              LDR      r0,|L1.5704|
0014be  f7fffffe          BL       uart_putchar
0014c2  486d              LDR      r0,|L1.5752|
0014c4  6800              LDR      r0,[r0,#0]            ;451  ; k
0014c6  1c40              ADDS     r0,r0,#1              ;451
0014c8  496b              LDR      r1,|L1.5752|
0014ca  6008              STR      r0,[r1,#0]            ;451  ; k
                  |L1.5324|
0014cc  486a              LDR      r0,|L1.5752|
0014ce  6800              LDR      r0,[r0,#0]            ;451  ; k
0014d0  4967              LDR      r1,|L1.5744|
0014d2  6809              LDR      r1,[r1,#0]            ;451  ; len
0014d4  4288              CMP      r0,r1                 ;451
0014d6  dbed              BLT      |L1.5300|
;;;454    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0014d8  211a              MOVS     r1,#0x1a
0014da  485b              LDR      r0,|L1.5704|
0014dc  f7fffffe          BL       uart_putchar
0014e0  211a              MOVS     r1,#0x1a
0014e2  4859              LDR      r0,|L1.5704|
0014e4  f7fffffe          BL       uart_putchar
;;;455    									do
0014e8  bf00              NOP      
                  |L1.5354|
;;;456    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0014ea  4964              LDR      r1,|L1.5756|
0014ec  4858              LDR      r0,|L1.5712|
0014ee  f7fffffe          BL       strstr
0014f2  495a              LDR      r1,|L1.5724|
0014f4  6008              STR      r0,[r1,#0]  ; stcond1
;;;457    																	stcond2=strstr(uart_string_gsm, "ERROR");
0014f6  4955              LDR      r1,|L1.5708|
0014f8  398c              SUBS     r1,r1,#0x8c
0014fa  4855              LDR      r0,|L1.5712|
0014fc  f7fffffe          BL       strstr
001500  495f              LDR      r1,|L1.5760|
001502  6008              STR      r0,[r1,#0]  ; stcond2
;;;458    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001504  495f              LDR      r1,|L1.5764|
001506  4852              LDR      r0,|L1.5712|
001508  f7fffffe          BL       strstr
00150c  495e              LDR      r1,|L1.5768|
00150e  6008              STR      r0,[r1,#0]  ; stcond3
;;;459    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001510  494e              LDR      r1,|L1.5708|
001512  3970              SUBS     r1,r1,#0x70
001514  484e              LDR      r0,|L1.5712|
001516  f7fffffe          BL       strstr
00151a  495c              LDR      r1,|L1.5772|
00151c  6008              STR      r0,[r1,#0]  ; stcond4
;;;460    																	
;;;461    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
00151e  4858              LDR      r0,|L1.5760|
001520  6800              LDR      r0,[r0,#0]  ; stcond2
001522  2800              CMP      r0,#0
001524  d10f              BNE      |L1.5446|
001526  4858              LDR      r0,|L1.5768|
001528  6800              LDR      r0,[r0,#0]  ; stcond3
00152a  2800              CMP      r0,#0
00152c  d10b              BNE      |L1.5446|
00152e  4608              MOV      r0,r1
001530  6800              LDR      r0,[r0,#0]  ; stcond4
001532  2800              CMP      r0,#0
001534  d107              BNE      |L1.5446|
001536  4849              LDR      r0,|L1.5724|
001538  6800              LDR      r0,[r0,#0]  ; stcond1
00153a  2800              CMP      r0,#0
00153c  d103              BNE      |L1.5446|
00153e  4845              LDR      r0,|L1.5716|
001540  6800              LDR      r0,[r0,#0]  ; tout
001542  2805              CMP      r0,#5
001544  ddd1              BLE      |L1.5354|
                  |L1.5446|
;;;462    																//delay(10);clear();
;;;463    														uart_putchar(UART1_BASE_PTR,0x1A);
001546  211a              MOVS     r1,#0x1a
001548  483f              LDR      r0,|L1.5704|
00154a  f7fffffe          BL       uart_putchar
;;;464    												//delay(10);
;;;465    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00154e  211a              MOVS     r1,#0x1a
001550  483d              LDR      r0,|L1.5704|
001552  f7fffffe          BL       uart_putchar
001556  211a              MOVS     r1,#0x1a
001558  483b              LDR      r0,|L1.5704|
00155a  f7fffffe          BL       uart_putchar
00155e  211a              MOVS     r1,#0x1a
001560  4839              LDR      r0,|L1.5704|
001562  f7fffffe          BL       uart_putchar
;;;466    						
;;;467    									
;;;468    									
;;;469    									
;;;470    									if(flagch==1){		int_erval=temp;flagch=0;	}
001566  484a              LDR      r0,|L1.5776|
001568  6800              LDR      r0,[r0,#0]  ; flagch
00156a  2801              CMP      r0,#1
00156c  d106              BNE      |L1.5500|
00156e  4849              LDR      r0,|L1.5780|
001570  6800              LDR      r0,[r0,#0]  ; temp
001572  4949              LDR      r1,|L1.5784|
001574  6008              STR      r0,[r1,#0]  ; int_erval
001576  2000              MOVS     r0,#0
001578  4945              LDR      r1,|L1.5776|
00157a  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.5500|
;;;471    									
;;;472    									
;;;473    									
;;;474    
;;;475    //									for(k=0;k<len;k++)
;;;476    //									{
;;;477    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;478    //									}
;;;479    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;480    
;;;481    //									
;;;482    //													k2=0;									//string array counter for uart 1
;;;483    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;484    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;485    //																{
;;;486    //																	timeout--;
;;;487    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;488    //
;;;489    									delay(20);															
00157c  2014              MOVS     r0,#0x14
00157e  f7fffffe          BL       delay
;;;490    stcond1=strstr(uart_string_gsm,"SEND OK"); 
001582  e000              B        |L1.5510|
                  |L1.5508|
001584  e005              B        |L1.5522|
                  |L1.5510|
001586  493d              LDR      r1,|L1.5756|
001588  4831              LDR      r0,|L1.5712|
00158a  f7fffffe          BL       strstr
00158e  4933              LDR      r1,|L1.5724|
001590  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.5522|
;;;491    
;;;492    								}
;;;493    
;;;494      //checks for send ok
;;;495    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
001592  4832              LDR      r0,|L1.5724|
001594  6800              LDR      r0,[r0,#0]  ; stcond1
001596  2800              CMP      r0,#0
001598  d001              BEQ      |L1.5534|
00159a  f000ff2d          BL       |L1.9208|
                  |L1.5534|
;;;496    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00159e  211a              MOVS     r1,#0x1a
0015a0  4829              LDR      r0,|L1.5704|
0015a2  f7fffffe          BL       uart_putchar
0015a6  f7fffffe          BL       clear
0015aa  200a              MOVS     r0,#0xa
0015ac  f7fffffe          BL       delay
;;;497    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015b0  211a              MOVS     r1,#0x1a
0015b2  4825              LDR      r0,|L1.5704|
0015b4  f7fffffe          BL       uart_putchar
0015b8  f7fffffe          BL       clear
0015bc  200a              MOVS     r0,#0xa
0015be  f7fffffe          BL       delay
;;;498    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015c2  211a              MOVS     r1,#0x1a
0015c4  4820              LDR      r0,|L1.5704|
0015c6  f7fffffe          BL       uart_putchar
0015ca  f7fffffe          BL       clear
0015ce  200a              MOVS     r0,#0xa
0015d0  f7fffffe          BL       delay
;;;499    							//remove_all_chars(data, '\n', '\n');
;;;500    	
;;;501    		//strcat(data,"CH\n");	
;;;502    		
;;;503    	
;;;504    	
;;;505    	delay(100);
0015d4  2064              MOVS     r0,#0x64
0015d6  f7fffffe          BL       delay
;;;506    		clear();//memset(uart_string_gsm,0,5000);
0015da  f7fffffe          BL       clear
;;;507    	
;;;508    	memset(at_,0,100);
0015de  2164              MOVS     r1,#0x64
0015e0  482e              LDR      r0,|L1.5788|
0015e2  f7fffffe          BL       __aeabi_memclr
;;;509    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0015e6  481c              LDR      r0,|L1.5720|
0015e8  f7fffffe          BL       strlen
0015ec  1c44              ADDS     r4,r0,#1
0015ee  4623              MOV      r3,r4
0015f0  4a2b              LDR      r2,|L1.5792|
0015f2  4916              LDR      r1,|L1.5708|
0015f4  3938              SUBS     r1,r1,#0x38
0015f6  4829              LDR      r0,|L1.5788|
0015f8  f7fffffe          BL       __2sprintf
;;;510    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0015fc  2005              MOVS     r0,#5
0015fe  4b13              LDR      r3,|L1.5708|
001600  3b8c              SUBS     r3,r3,#0x8c
001602  461a              MOV      r2,r3
001604  3278              ADDS     r2,r2,#0x78
001606  a127              ADR      r1,|L1.5796|
001608  9000              STR      r0,[sp,#0]
00160a  4824              LDR      r0,|L1.5788|
00160c  f7fffffe          BL       send_SD
;;;511    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;512    //	if(strstr(uart_string_gsm,"ERROR")){
;;;513    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;514    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;515    //	}
;;;516    	
;;;517    clear();	
001610  f7fffffe          BL       clear
;;;518    									k2=0;									//string array counter for uart 1
001614  2000              MOVS     r0,#0
001616  4917              LDR      r1,|L1.5748|
001618  6008              STR      r0,[r1,#0]  ; k2
;;;519    									tout=0;	
00161a  490e              LDR      r1,|L1.5716|
00161c  6008              STR      r0,[r1,#0]  ; tout
;;;520    		for(k=0;k<strlen(data);k++)
00161e  4916              LDR      r1,|L1.5752|
001620  6008              STR      r0,[r1,#0]  ; k
001622  e00b              B        |L1.5692|
                  |L1.5668|
;;;521    		{
;;;522    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001624  480c              LDR      r0,|L1.5720|
001626  4a14              LDR      r2,|L1.5752|
001628  6812              LDR      r2,[r2,#0]  ; k
00162a  5c81              LDRB     r1,[r0,r2]
00162c  4806              LDR      r0,|L1.5704|
00162e  f7fffffe          BL       uart_putchar
001632  4811              LDR      r0,|L1.5752|
001634  6800              LDR      r0,[r0,#0]            ;520  ; k
001636  1c40              ADDS     r0,r0,#1              ;520
001638  490f              LDR      r1,|L1.5752|
00163a  6008              STR      r0,[r1,#0]            ;520  ; k
                  |L1.5692|
00163c  4806              LDR      r0,|L1.5720|
00163e  f7fffffe          BL       strlen
001642  490d              LDR      r1,|L1.5752|
001644  6809              LDR      r1,[r1,#0]            ;520  ; k
001646  e02f              B        |L1.5800|
                  |L1.5704|
                          DCD      0x4006b000
                  |L1.5708|
                          DCD      ||.text||+0x8fc
                  |L1.5712|
                          DCD      uart_string_gsm
                  |L1.5716|
                          DCD      tout
                  |L1.5720|
                          DCD      data
                  |L1.5724|
                          DCD      stcond1
                  |L1.5728|
                          DCD      con1d
                  |L1.5732|
                          DCD      cond
                  |L1.5736|
                          DCD      0x00001388
                  |L1.5740|
00166c  0a0a00            DCB      "\n\n",0
00166f  00                DCB      0
                  |L1.5744|
                          DCD      len
                  |L1.5748|
                          DCD      ||k2||
                  |L1.5752|
                          DCD      k
                  |L1.5756|
                          DCD      ||.text||+0x474
                  |L1.5760|
                          DCD      stcond2
                  |L1.5764|
                          DCD      ||.text||+0xde4
                  |L1.5768|
                          DCD      stcond3
                  |L1.5772|
                          DCD      stcond4
                  |L1.5776|
                          DCD      flagch
                  |L1.5780|
                          DCD      temp
                  |L1.5784|
                          DCD      int_erval
                  |L1.5788|
                          DCD      at_
                  |L1.5792|
                          DCD      drive
                  |L1.5796|
0016a4  3e00              DCB      ">",0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  4288              CMP      r0,r1                 ;520
0016aa  d8bb              BHI      |L1.5668|
;;;523    		}	
;;;524    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0016ac  210a              MOVS     r1,#0xa
0016ae  48fe              LDR      r0,|L1.6824|
0016b0  f7fffffe          BL       uart_putchar
0016b4  210a              MOVS     r1,#0xa
0016b6  48fc              LDR      r0,|L1.6824|
0016b8  f7fffffe          BL       uart_putchar
0016bc  210a              MOVS     r1,#0xa
0016be  48fa              LDR      r0,|L1.6824|
0016c0  f7fffffe          BL       uart_putchar
0016c4  210a              MOVS     r1,#0xa
0016c6  48f8              LDR      r0,|L1.6824|
0016c8  f7fffffe          BL       uart_putchar
0016cc  210a              MOVS     r1,#0xa
0016ce  48f6              LDR      r0,|L1.6824|
0016d0  f7fffffe          BL       uart_putchar
0016d4  210a              MOVS     r1,#0xa
0016d6  48f4              LDR      r0,|L1.6824|
0016d8  f7fffffe          BL       uart_putchar
0016dc  210a              MOVS     r1,#0xa
0016de  48f2              LDR      r0,|L1.6824|
0016e0  f7fffffe          BL       uart_putchar
0016e4  210a              MOVS     r1,#0xa
0016e6  48f0              LDR      r0,|L1.6824|
0016e8  f7fffffe          BL       uart_putchar
0016ec  210a              MOVS     r1,#0xa
0016ee  48ee              LDR      r0,|L1.6824|
0016f0  f7fffffe          BL       uart_putchar
0016f4  210a              MOVS     r1,#0xa
0016f6  48ec              LDR      r0,|L1.6824|
0016f8  f7fffffe          BL       uart_putchar
0016fc  210a              MOVS     r1,#0xa
0016fe  48ea              LDR      r0,|L1.6824|
001700  f7fffffe          BL       uart_putchar
001704  210a              MOVS     r1,#0xa
001706  48e8              LDR      r0,|L1.6824|
001708  f7fffffe          BL       uart_putchar
00170c  210a              MOVS     r1,#0xa
00170e  48e6              LDR      r0,|L1.6824|
001710  f7fffffe          BL       uart_putchar
001714  210a              MOVS     r1,#0xa
001716  48e4              LDR      r0,|L1.6824|
001718  f7fffffe          BL       uart_putchar
00171c  210a              MOVS     r1,#0xa
00171e  48e2              LDR      r0,|L1.6824|
001720  f7fffffe          BL       uart_putchar
001724  210a              MOVS     r1,#0xa
001726  48e0              LDR      r0,|L1.6824|
001728  f7fffffe          BL       uart_putchar
00172c  210a              MOVS     r1,#0xa
00172e  48de              LDR      r0,|L1.6824|
001730  f7fffffe          BL       uart_putchar
001734  210a              MOVS     r1,#0xa
001736  48dc              LDR      r0,|L1.6824|
001738  f7fffffe          BL       uart_putchar
00173c  210a              MOVS     r1,#0xa
00173e  48da              LDR      r0,|L1.6824|
001740  f7fffffe          BL       uart_putchar
001744  210a              MOVS     r1,#0xa
001746  48d8              LDR      r0,|L1.6824|
001748  f7fffffe          BL       uart_putchar
00174c  210a              MOVS     r1,#0xa
00174e  48d6              LDR      r0,|L1.6824|
001750  f7fffffe          BL       uart_putchar
001754  210a              MOVS     r1,#0xa
001756  48d4              LDR      r0,|L1.6824|
001758  f7fffffe          BL       uart_putchar
00175c  210a              MOVS     r1,#0xa
00175e  48d2              LDR      r0,|L1.6824|
001760  f7fffffe          BL       uart_putchar
001764  210a              MOVS     r1,#0xa
001766  48d0              LDR      r0,|L1.6824|
001768  f7fffffe          BL       uart_putchar
00176c  210a              MOVS     r1,#0xa
00176e  48ce              LDR      r0,|L1.6824|
001770  f7fffffe          BL       uart_putchar
001774  210a              MOVS     r1,#0xa
001776  48cc              LDR      r0,|L1.6824|
001778  f7fffffe          BL       uart_putchar
00177c  210a              MOVS     r1,#0xa
00177e  48ca              LDR      r0,|L1.6824|
001780  f7fffffe          BL       uart_putchar
001784  210a              MOVS     r1,#0xa
001786  48c8              LDR      r0,|L1.6824|
001788  f7fffffe          BL       uart_putchar
00178c  210a              MOVS     r1,#0xa
00178e  48c6              LDR      r0,|L1.6824|
001790  f7fffffe          BL       uart_putchar
001794  210a              MOVS     r1,#0xa
001796  48c4              LDR      r0,|L1.6824|
001798  f7fffffe          BL       uart_putchar
00179c  210a              MOVS     r1,#0xa
00179e  48c2              LDR      r0,|L1.6824|
0017a0  f7fffffe          BL       uart_putchar
0017a4  210a              MOVS     r1,#0xa
0017a6  48c0              LDR      r0,|L1.6824|
0017a8  f7fffffe          BL       uart_putchar
0017ac  210a              MOVS     r1,#0xa
0017ae  48be              LDR      r0,|L1.6824|
0017b0  f7fffffe          BL       uart_putchar
0017b4  210a              MOVS     r1,#0xa
0017b6  48bc              LDR      r0,|L1.6824|
0017b8  f7fffffe          BL       uart_putchar
0017bc  210a              MOVS     r1,#0xa
0017be  48ba              LDR      r0,|L1.6824|
0017c0  f7fffffe          BL       uart_putchar
0017c4  210a              MOVS     r1,#0xa
0017c6  48b8              LDR      r0,|L1.6824|
0017c8  f7fffffe          BL       uart_putchar
0017cc  210a              MOVS     r1,#0xa
0017ce  48b6              LDR      r0,|L1.6824|
0017d0  f7fffffe          BL       uart_putchar
0017d4  210a              MOVS     r1,#0xa
0017d6  48b4              LDR      r0,|L1.6824|
0017d8  f7fffffe          BL       uart_putchar
0017dc  210a              MOVS     r1,#0xa
0017de  48b2              LDR      r0,|L1.6824|
0017e0  f7fffffe          BL       uart_putchar
0017e4  210a              MOVS     r1,#0xa
0017e6  48b0              LDR      r0,|L1.6824|
0017e8  f7fffffe          BL       uart_putchar
0017ec  210a              MOVS     r1,#0xa
0017ee  48ae              LDR      r0,|L1.6824|
0017f0  f7fffffe          BL       uart_putchar
0017f4  210a              MOVS     r1,#0xa
0017f6  48ac              LDR      r0,|L1.6824|
0017f8  f7fffffe          BL       uart_putchar
0017fc  210a              MOVS     r1,#0xa
0017fe  48aa              LDR      r0,|L1.6824|
001800  f7fffffe          BL       uart_putchar
001804  210a              MOVS     r1,#0xa
001806  48a8              LDR      r0,|L1.6824|
001808  f7fffffe          BL       uart_putchar
00180c  210a              MOVS     r1,#0xa
00180e  48a6              LDR      r0,|L1.6824|
001810  f7fffffe          BL       uart_putchar
001814  210a              MOVS     r1,#0xa
001816  48a4              LDR      r0,|L1.6824|
001818  f7fffffe          BL       uart_putchar
00181c  210a              MOVS     r1,#0xa
00181e  48a2              LDR      r0,|L1.6824|
001820  f7fffffe          BL       uart_putchar
001824  210a              MOVS     r1,#0xa
001826  48a0              LDR      r0,|L1.6824|
001828  f7fffffe          BL       uart_putchar
00182c  210a              MOVS     r1,#0xa
00182e  489e              LDR      r0,|L1.6824|
001830  f7fffffe          BL       uart_putchar
001834  210a              MOVS     r1,#0xa
001836  489c              LDR      r0,|L1.6824|
001838  f7fffffe          BL       uart_putchar
00183c  210a              MOVS     r1,#0xa
00183e  489a              LDR      r0,|L1.6824|
001840  f7fffffe          BL       uart_putchar
001844  210a              MOVS     r1,#0xa
001846  4898              LDR      r0,|L1.6824|
001848  f7fffffe          BL       uart_putchar
00184c  210a              MOVS     r1,#0xa
00184e  4896              LDR      r0,|L1.6824|
001850  f7fffffe          BL       uart_putchar
001854  210a              MOVS     r1,#0xa
001856  4894              LDR      r0,|L1.6824|
001858  f7fffffe          BL       uart_putchar
00185c  210a              MOVS     r1,#0xa
00185e  4892              LDR      r0,|L1.6824|
001860  f7fffffe          BL       uart_putchar
001864  210a              MOVS     r1,#0xa
001866  4890              LDR      r0,|L1.6824|
001868  f7fffffe          BL       uart_putchar
00186c  210a              MOVS     r1,#0xa
00186e  488e              LDR      r0,|L1.6824|
001870  f7fffffe          BL       uart_putchar
;;;525    									//memset(data,0,1000);
;;;526    														//timer counts to wait for characters in uart 1 									
;;;527    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001874  bf00              NOP      
                  |L1.6262|
001876  498d              LDR      r1,|L1.6828|
001878  488d              LDR      r0,|L1.6832|
00187a  f7fffffe          BL       strstr
00187e  2800              CMP      r0,#0
001880  d10a              BNE      |L1.6296|
001882  498a              LDR      r1,|L1.6828|
001884  398c              SUBS     r1,r1,#0x8c
001886  488a              LDR      r0,|L1.6832|
001888  f7fffffe          BL       strstr
00188c  2800              CMP      r0,#0
00188e  d103              BNE      |L1.6296|
001890  4888              LDR      r0,|L1.6836|
001892  6800              LDR      r0,[r0,#0]  ; tout
001894  2805              CMP      r0,#5
001896  ddee              BLE      |L1.6262|
                  |L1.6296|
;;;528    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;529    									}
;;;530    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001898  f7fffffe          BL       clear
;;;531    									//clear();
;;;532    									memset(data,0,strlen(data));
00189c  4886              LDR      r0,|L1.6840|
00189e  f7fffffe          BL       strlen
0018a2  4604              MOV      r4,r0
0018a4  4621              MOV      r1,r4
0018a6  4884              LDR      r0,|L1.6840|
0018a8  f7fffffe          BL       __aeabi_memclr
;;;533    									clear();
0018ac  f7fffffe          BL       clear
;;;534    
;;;535    								
;;;536    	
;;;537    	
;;;538    	//log_it();		                         //logging
;;;539    		memset(data,0,strlen(data));	
0018b0  4881              LDR      r0,|L1.6840|
0018b2  f7fffffe          BL       strlen
0018b6  4604              MOV      r4,r0
0018b8  4621              MOV      r1,r4
0018ba  487f              LDR      r0,|L1.6840|
0018bc  f7fffffe          BL       __aeabi_memclr
;;;540    
;;;541    					   	if(flagch!=1){
0018c0  487e              LDR      r0,|L1.6844|
0018c2  6800              LDR      r0,[r0,#0]  ; flagch
0018c4  2801              CMP      r0,#1
0018c6  d009              BEQ      |L1.6364|
;;;542    							temp=int_erval;				
0018c8  487d              LDR      r0,|L1.6848|
0018ca  6800              LDR      r0,[r0,#0]  ; int_erval
0018cc  497d              LDR      r1,|L1.6852|
0018ce  6008              STR      r0,[r1,#0]  ; temp
;;;543    							int_erval=4;
0018d0  2004              MOVS     r0,#4
0018d2  497b              LDR      r1,|L1.6848|
0018d4  6008              STR      r0,[r1,#0]  ; int_erval
;;;544    							flagch=1;}
0018d6  2001              MOVS     r0,#1
0018d8  4978              LDR      r1,|L1.6844|
0018da  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.6364|
;;;545    							clear();	
0018dc  f7fffffe          BL       clear
;;;546    									GPS_COLLECT();
0018e0  f7fffffe          BL       GPS_COLLECT
;;;547    									strcat(data,"CH\n");	
0018e4  4971              LDR      r1,|L1.6828|
0018e6  3944              SUBS     r1,r1,#0x44
0018e8  4873              LDR      r0,|L1.6840|
0018ea  f7fffffe          BL       strcat
;;;548    
;;;549    //*************************************tcp_initialization();//reinitialization************************//
;;;550    
;;;551    	
;;;552    msg_sim800(); 
0018ee  f7fffffe          BL       msg_sim800
;;;553    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0018f2  2005              MOVS     r0,#5
0018f4  4b6d              LDR      r3,|L1.6828|
0018f6  3b8c              SUBS     r3,r3,#0x8c
0018f8  461a              MOV      r2,r3
0018fa  3278              ADDS     r2,r2,#0x78
0018fc  a172              ADR      r1,|L1.6856|
0018fe  9000              STR      r0,[sp,#0]
001900  4610              MOV      r0,r2
001902  3020              ADDS     r0,r0,#0x20
001904  f7fffffe          BL       send_GSM
;;;554    delay(100);
001908  2064              MOVS     r0,#0x64
00190a  f7fffffe          BL       delay
;;;555    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00190e  2004              MOVS     r0,#4
001910  4b66              LDR      r3,|L1.6828|
001912  3b8c              SUBS     r3,r3,#0x8c
001914  461a              MOV      r2,r3
001916  32a8              ADDS     r2,r2,#0xa8
001918  a16b              ADR      r1,|L1.6856|
00191a  9000              STR      r0,[sp,#0]
00191c  4610              MOV      r0,r2
00191e  3014              ADDS     r0,r0,#0x14
001920  f7fffffe          BL       send_GSM
;;;556    GPS_COLLECT2();
001924  f7fffffe          BL       GPS_COLLECT2
;;;557    strcat(data,"CH\n");		
001928  4960              LDR      r1,|L1.6828|
00192a  3944              SUBS     r1,r1,#0x44
00192c  4862              LDR      r0,|L1.6840|
00192e  f7fffffe          BL       strcat
;;;558    GPS_COLLECT2();
001932  f7fffffe          BL       GPS_COLLECT2
;;;559    strcat(data,"CH\n");	
001936  495d              LDR      r1,|L1.6828|
001938  3944              SUBS     r1,r1,#0x44
00193a  485f              LDR      r0,|L1.6840|
00193c  f7fffffe          BL       strcat
;;;560    GPS_COLLECT2();
001940  f7fffffe          BL       GPS_COLLECT2
;;;561    strcat(data,"CH\n");
001944  4959              LDR      r1,|L1.6828|
001946  3944              SUBS     r1,r1,#0x44
001948  485b              LDR      r0,|L1.6840|
00194a  f7fffffe          BL       strcat
;;;562    cond201=(strstr(uart_string_gsm, "OK"));
00194e  a15e              ADR      r1,|L1.6856|
001950  4857              LDR      r0,|L1.6832|
001952  f7fffffe          BL       strstr
001956  495d              LDR      r1,|L1.6860|
001958  6008              STR      r0,[r1,#0]  ; cond201
;;;563    cond200=(strstr(uart_string_gsm, "ERROR"));
00195a  4954              LDR      r1,|L1.6828|
00195c  398c              SUBS     r1,r1,#0x8c
00195e  4854              LDR      r0,|L1.6832|
001960  f7fffffe          BL       strstr
001964  495a              LDR      r1,|L1.6864|
001966  6008              STR      r0,[r1,#0]  ; cond200
;;;564    if((!(cond201|| cond200 ))  && sleep_flag != 1)
001968  4858              LDR      r0,|L1.6860|
00196a  6800              LDR      r0,[r0,#0]  ; cond201
00196c  2800              CMP      r0,#0
                  |L1.6510|
00196e  d17d              BNE      |L1.6764|
001970  4608              MOV      r0,r1
001972  6800              LDR      r0,[r0,#0]  ; cond200
001974  2800              CMP      r0,#0
001976  d1fa              BNE      |L1.6510|
001978  4856              LDR      r0,|L1.6868|
00197a  6800              LDR      r0,[r0,#0]  ; sleep_flag
00197c  2801              CMP      r0,#1
00197e  d075              BEQ      |L1.6764|
;;;565    {
;;;566    delay(100);
001980  2064              MOVS     r0,#0x64
001982  f7fffffe          BL       delay
;;;567    clear();//memset(uart_string_gsm,0,5000);
001986  f7fffffe          BL       clear
;;;568    memset(at_,0,100);
00198a  2164              MOVS     r1,#0x64
00198c  4852              LDR      r0,|L1.6872|
00198e  f7fffffe          BL       __aeabi_memclr
;;;569    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001992  4849              LDR      r0,|L1.6840|
001994  f7fffffe          BL       strlen
001998  1c44              ADDS     r4,r0,#1
00199a  4623              MOV      r3,r4
00199c  4a4f              LDR      r2,|L1.6876|
00199e  4943              LDR      r1,|L1.6828|
0019a0  3938              SUBS     r1,r1,#0x38
0019a2  484d              LDR      r0,|L1.6872|
0019a4  f7fffffe          BL       __2sprintf
;;;570    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0019a8  2005              MOVS     r0,#5
0019aa  4b40              LDR      r3,|L1.6828|
0019ac  3b8c              SUBS     r3,r3,#0x8c
0019ae  461a              MOV      r2,r3
0019b0  3278              ADDS     r2,r2,#0x78
0019b2  a14b              ADR      r1,|L1.6880|
0019b4  9000              STR      r0,[sp,#0]
0019b6  4848              LDR      r0,|L1.6872|
0019b8  f7fffffe          BL       send_SD
;;;571    clear();	
0019bc  f7fffffe          BL       clear
;;;572    k2=0;									//string array counter for uart 1
0019c0  2000              MOVS     r0,#0
0019c2  4948              LDR      r1,|L1.6884|
0019c4  6008              STR      r0,[r1,#0]  ; k2
;;;573    tout=0;	
0019c6  493b              LDR      r1,|L1.6836|
0019c8  6008              STR      r0,[r1,#0]  ; tout
;;;574    for(k=0;k<strlen(data);k++)
0019ca  4947              LDR      r1,|L1.6888|
0019cc  6008              STR      r0,[r1,#0]  ; k
0019ce  e00b              B        |L1.6632|
                  |L1.6608|
;;;575    {
;;;576    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0019d0  4839              LDR      r0,|L1.6840|
0019d2  4a45              LDR      r2,|L1.6888|
0019d4  6812              LDR      r2,[r2,#0]  ; k
0019d6  5c81              LDRB     r1,[r0,r2]
0019d8  4833              LDR      r0,|L1.6824|
0019da  f7fffffe          BL       uart_putchar
0019de  4842              LDR      r0,|L1.6888|
0019e0  6800              LDR      r0,[r0,#0]            ;574  ; k
0019e2  1c40              ADDS     r0,r0,#1              ;574
0019e4  4940              LDR      r1,|L1.6888|
0019e6  6008              STR      r0,[r1,#0]            ;574  ; k
                  |L1.6632|
0019e8  4833              LDR      r0,|L1.6840|
0019ea  f7fffffe          BL       strlen
0019ee  493e              LDR      r1,|L1.6888|
0019f0  6809              LDR      r1,[r1,#0]            ;574  ; k
0019f2  4288              CMP      r0,r1                 ;574
0019f4  d8ec              BHI      |L1.6608|
;;;577    }	
;;;578    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0019f6  210a              MOVS     r1,#0xa
0019f8  482b              LDR      r0,|L1.6824|
0019fa  f7fffffe          BL       uart_putchar
0019fe  210a              MOVS     r1,#0xa
001a00  4829              LDR      r0,|L1.6824|
001a02  f7fffffe          BL       uart_putchar
001a06  210a              MOVS     r1,#0xa
001a08  4827              LDR      r0,|L1.6824|
001a0a  f7fffffe          BL       uart_putchar
001a0e  210a              MOVS     r1,#0xa
001a10  4825              LDR      r0,|L1.6824|
001a12  f7fffffe          BL       uart_putchar
001a16  210a              MOVS     r1,#0xa
001a18  4823              LDR      r0,|L1.6824|
001a1a  f7fffffe          BL       uart_putchar
001a1e  210a              MOVS     r1,#0xa
001a20  4821              LDR      r0,|L1.6824|
001a22  f7fffffe          BL       uart_putchar
001a26  210a              MOVS     r1,#0xa
001a28  481f              LDR      r0,|L1.6824|
001a2a  f7fffffe          BL       uart_putchar
001a2e  210a              MOVS     r1,#0xa
001a30  481d              LDR      r0,|L1.6824|
001a32  f7fffffe          BL       uart_putchar
001a36  210a              MOVS     r1,#0xa
001a38  481b              LDR      r0,|L1.6824|
001a3a  f7fffffe          BL       uart_putchar
001a3e  210a              MOVS     r1,#0xa
001a40  4819              LDR      r0,|L1.6824|
001a42  f7fffffe          BL       uart_putchar
001a46  210a              MOVS     r1,#0xa
001a48  4817              LDR      r0,|L1.6824|
001a4a  f7fffffe          BL       uart_putchar
001a4e  210a              MOVS     r1,#0xa
001a50  4815              LDR      r0,|L1.6824|
001a52  f7fffffe          BL       uart_putchar
001a56  210a              MOVS     r1,#0xa
001a58  4813              LDR      r0,|L1.6824|
001a5a  f7fffffe          BL       uart_putchar
001a5e  210a              MOVS     r1,#0xa
001a60  4811              LDR      r0,|L1.6824|
001a62  f7fffffe          BL       uart_putchar
001a66  210a              MOVS     r1,#0xa
001a68  480f              LDR      r0,|L1.6824|
001a6a  e000              B        |L1.6766|
                  |L1.6764|
001a6c  e0f6              B        |L1.7260|
                  |L1.6766|
001a6e  f7fffffe          BL       uart_putchar
001a72  210a              MOVS     r1,#0xa
001a74  480c              LDR      r0,|L1.6824|
001a76  f7fffffe          BL       uart_putchar
001a7a  210a              MOVS     r1,#0xa
001a7c  480a              LDR      r0,|L1.6824|
001a7e  f7fffffe          BL       uart_putchar
001a82  210a              MOVS     r1,#0xa
001a84  4808              LDR      r0,|L1.6824|
001a86  f7fffffe          BL       uart_putchar
001a8a  210a              MOVS     r1,#0xa
001a8c  4806              LDR      r0,|L1.6824|
001a8e  f7fffffe          BL       uart_putchar
001a92  210a              MOVS     r1,#0xa
001a94  4804              LDR      r0,|L1.6824|
001a96  f7fffffe          BL       uart_putchar
001a9a  210a              MOVS     r1,#0xa
001a9c  4802              LDR      r0,|L1.6824|
001a9e  f7fffffe          BL       uart_putchar
001aa2  210a              MOVS     r1,#0xa
001aa4  4800              LDR      r0,|L1.6824|
001aa6  e021              B        |L1.6892|
                  |L1.6824|
                          DCD      0x4006b000
                  |L1.6828|
                          DCD      ||.text||+0x8fc
                  |L1.6832|
                          DCD      uart_string_gsm
                  |L1.6836|
                          DCD      tout
                  |L1.6840|
                          DCD      data
                  |L1.6844|
                          DCD      flagch
                  |L1.6848|
                          DCD      int_erval
                  |L1.6852|
                          DCD      temp
                  |L1.6856|
001ac8  4f4b00            DCB      "OK",0
001acb  00                DCB      0
                  |L1.6860|
                          DCD      cond201
                  |L1.6864|
                          DCD      cond200
                  |L1.6868|
                          DCD      sleep_flag
                  |L1.6872|
                          DCD      at_
                  |L1.6876|
                          DCD      drive
                  |L1.6880|
001ae0  3e00              DCB      ">",0
001ae2  00                DCB      0
001ae3  00                DCB      0
                  |L1.6884|
                          DCD      ||k2||
                  |L1.6888|
                          DCD      k
                  |L1.6892|
001aec  f7fffffe          BL       uart_putchar
001af0  210a              MOVS     r1,#0xa
001af2  48fe              LDR      r0,|L1.7916|
001af4  f7fffffe          BL       uart_putchar
001af8  210a              MOVS     r1,#0xa
001afa  48fc              LDR      r0,|L1.7916|
001afc  f7fffffe          BL       uart_putchar
001b00  210a              MOVS     r1,#0xa
001b02  48fa              LDR      r0,|L1.7916|
001b04  f7fffffe          BL       uart_putchar
001b08  210a              MOVS     r1,#0xa
001b0a  48f8              LDR      r0,|L1.7916|
001b0c  f7fffffe          BL       uart_putchar
001b10  210a              MOVS     r1,#0xa
001b12  48f6              LDR      r0,|L1.7916|
001b14  f7fffffe          BL       uart_putchar
001b18  210a              MOVS     r1,#0xa
001b1a  48f4              LDR      r0,|L1.7916|
001b1c  f7fffffe          BL       uart_putchar
001b20  210a              MOVS     r1,#0xa
001b22  48f2              LDR      r0,|L1.7916|
001b24  f7fffffe          BL       uart_putchar
001b28  210a              MOVS     r1,#0xa
001b2a  48f0              LDR      r0,|L1.7916|
001b2c  f7fffffe          BL       uart_putchar
001b30  210a              MOVS     r1,#0xa
001b32  48ee              LDR      r0,|L1.7916|
001b34  f7fffffe          BL       uart_putchar
001b38  210a              MOVS     r1,#0xa
001b3a  48ec              LDR      r0,|L1.7916|
001b3c  f7fffffe          BL       uart_putchar
001b40  210a              MOVS     r1,#0xa
001b42  48ea              LDR      r0,|L1.7916|
001b44  f7fffffe          BL       uart_putchar
001b48  210a              MOVS     r1,#0xa
001b4a  48e8              LDR      r0,|L1.7916|
001b4c  f7fffffe          BL       uart_putchar
001b50  210a              MOVS     r1,#0xa
001b52  48e6              LDR      r0,|L1.7916|
001b54  f7fffffe          BL       uart_putchar
001b58  210a              MOVS     r1,#0xa
001b5a  48e4              LDR      r0,|L1.7916|
001b5c  f7fffffe          BL       uart_putchar
001b60  210a              MOVS     r1,#0xa
001b62  48e2              LDR      r0,|L1.7916|
001b64  f7fffffe          BL       uart_putchar
001b68  210a              MOVS     r1,#0xa
001b6a  48e0              LDR      r0,|L1.7916|
001b6c  f7fffffe          BL       uart_putchar
001b70  210a              MOVS     r1,#0xa
001b72  48de              LDR      r0,|L1.7916|
001b74  f7fffffe          BL       uart_putchar
001b78  210a              MOVS     r1,#0xa
001b7a  48dc              LDR      r0,|L1.7916|
001b7c  f7fffffe          BL       uart_putchar
001b80  210a              MOVS     r1,#0xa
001b82  48da              LDR      r0,|L1.7916|
001b84  f7fffffe          BL       uart_putchar
001b88  210a              MOVS     r1,#0xa
001b8a  48d8              LDR      r0,|L1.7916|
001b8c  f7fffffe          BL       uart_putchar
001b90  210a              MOVS     r1,#0xa
001b92  48d6              LDR      r0,|L1.7916|
001b94  f7fffffe          BL       uart_putchar
001b98  210a              MOVS     r1,#0xa
001b9a  48d4              LDR      r0,|L1.7916|
001b9c  f7fffffe          BL       uart_putchar
001ba0  210a              MOVS     r1,#0xa
001ba2  48d2              LDR      r0,|L1.7916|
001ba4  f7fffffe          BL       uart_putchar
001ba8  210a              MOVS     r1,#0xa
001baa  48d0              LDR      r0,|L1.7916|
001bac  f7fffffe          BL       uart_putchar
001bb0  210a              MOVS     r1,#0xa
001bb2  48ce              LDR      r0,|L1.7916|
001bb4  f7fffffe          BL       uart_putchar
001bb8  210a              MOVS     r1,#0xa
001bba  48cc              LDR      r0,|L1.7916|
001bbc  f7fffffe          BL       uart_putchar
001bc0  210a              MOVS     r1,#0xa
001bc2  48ca              LDR      r0,|L1.7916|
001bc4  f7fffffe          BL       uart_putchar
001bc8  210a              MOVS     r1,#0xa
001bca  48c8              LDR      r0,|L1.7916|
001bcc  f7fffffe          BL       uart_putchar
001bd0  210a              MOVS     r1,#0xa
001bd2  48c6              LDR      r0,|L1.7916|
001bd4  f7fffffe          BL       uart_putchar
001bd8  210a              MOVS     r1,#0xa
001bda  48c4              LDR      r0,|L1.7916|
001bdc  f7fffffe          BL       uart_putchar
001be0  210a              MOVS     r1,#0xa
001be2  48c2              LDR      r0,|L1.7916|
001be4  f7fffffe          BL       uart_putchar
001be8  210a              MOVS     r1,#0xa
001bea  48c0              LDR      r0,|L1.7916|
001bec  f7fffffe          BL       uart_putchar
001bf0  210a              MOVS     r1,#0xa
001bf2  48be              LDR      r0,|L1.7916|
001bf4  f7fffffe          BL       uart_putchar
001bf8  210a              MOVS     r1,#0xa
001bfa  48bc              LDR      r0,|L1.7916|
001bfc  f7fffffe          BL       uart_putchar
001c00  210a              MOVS     r1,#0xa
001c02  48ba              LDR      r0,|L1.7916|
001c04  f7fffffe          BL       uart_putchar
;;;579    									//memset(data,0,1000);
;;;580    														//timer counts to wait for characters in uart 1 									
;;;581    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001c08  bf00              NOP      
                  |L1.7178|
001c0a  49b9              LDR      r1,|L1.7920|
001c0c  48b9              LDR      r0,|L1.7924|
001c0e  f7fffffe          BL       strstr
001c12  2800              CMP      r0,#0
001c14  d10a              BNE      |L1.7212|
001c16  49b6              LDR      r1,|L1.7920|
001c18  398c              SUBS     r1,r1,#0x8c
001c1a  48b6              LDR      r0,|L1.7924|
001c1c  f7fffffe          BL       strstr
001c20  2800              CMP      r0,#0
001c22  d103              BNE      |L1.7212|
001c24  48b4              LDR      r0,|L1.7928|
001c26  6800              LDR      r0,[r0,#0]  ; tout
001c28  2805              CMP      r0,#5
001c2a  ddee              BLE      |L1.7178|
                  |L1.7212|
;;;582    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;583    									}
;;;584    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001c2c  f7fffffe          BL       clear
;;;585    									//clear();
;;;586    									memset(data,0,strlen(data));
001c30  48b2              LDR      r0,|L1.7932|
001c32  f7fffffe          BL       strlen
001c36  4604              MOV      r4,r0
001c38  4621              MOV      r1,r4
001c3a  48b0              LDR      r0,|L1.7932|
001c3c  f7fffffe          BL       __aeabi_memclr
;;;587    									clear();
001c40  f7fffffe          BL       clear
;;;588    									RESET_OFF;delay(100);
001c44  2020              MOVS     r0,#0x20
001c46  49ae              LDR      r1,|L1.7936|
001c48  6088              STR      r0,[r1,#8]
001c4a  2064              MOVS     r0,#0x64
001c4c  f7fffffe          BL       delay
;;;589    									RESET_ON;delay(100);		
001c50  2020              MOVS     r0,#0x20
001c52  49ab              LDR      r1,|L1.7936|
001c54  6048              STR      r0,[r1,#4]
001c56  2064              MOVS     r0,#0x64
001c58  f7fffffe          BL       delay
                  |L1.7260|
;;;590    }
;;;591    	
;;;592    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001c5c  2004              MOVS     r0,#4
001c5e  4ba9              LDR      r3,|L1.7940|
001c60  4aa3              LDR      r2,|L1.7920|
001c62  3a14              SUBS     r2,r2,#0x14
001c64  a1a8              ADR      r1,|L1.7944|
001c66  9000              STR      r0,[sp,#0]
001c68  4618              MOV      r0,r3
001c6a  300c              ADDS     r0,r0,#0xc
001c6c  f7fffffe          BL       send_GSM
;;;593    GPS_COLLECT2();
001c70  f7fffffe          BL       GPS_COLLECT2
;;;594    strcat(data,"CH\n");	
001c74  499e              LDR      r1,|L1.7920|
001c76  3944              SUBS     r1,r1,#0x44
001c78  48a0              LDR      r0,|L1.7932|
001c7a  f7fffffe          BL       strcat
;;;595    memset(at_,0,100);
001c7e  2164              MOVS     r1,#0x64
001c80  48a2              LDR      r0,|L1.7948|
001c82  f7fffffe          BL       __aeabi_memclr
;;;596    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001c86  4aa2              LDR      r2,|L1.7952|
001c88  499e              LDR      r1,|L1.7940|
001c8a  3120              ADDS     r1,r1,#0x20
001c8c  489f              LDR      r0,|L1.7948|
001c8e  f7fffffe          BL       __2sprintf
;;;597    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
001c92  48a0              LDR      r0,|L1.7956|
001c94  6800              LDR      r0,[r0,#0]  ; tmeout
001c96  4b9b              LDR      r3,|L1.7940|
001c98  4a95              LDR      r2,|L1.7920|
001c9a  3a14              SUBS     r2,r2,#0x14
001c9c  a19a              ADR      r1,|L1.7944|
001c9e  9000              STR      r0,[sp,#0]
001ca0  489a              LDR      r0,|L1.7948|
001ca2  f7fffffe          BL       send_GSM
;;;598    msg_sim800(); 
001ca6  f7fffffe          BL       msg_sim800
;;;599    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
001caa  2004              MOVS     r0,#4
001cac  4b90              LDR      r3,|L1.7920|
001cae  3b70              SUBS     r3,r3,#0x70
001cb0  461a              MOV      r2,r3
001cb2  325c              ADDS     r2,r2,#0x5c
001cb4  a194              ADR      r1,|L1.7944|
001cb6  9000              STR      r0,[sp,#0]
001cb8  4892              LDR      r0,|L1.7940|
001cba  3038              ADDS     r0,r0,#0x38
001cbc  f7fffffe          BL       send_GSM
;;;600    GPS_COLLECT2();
001cc0  f7fffffe          BL       GPS_COLLECT2
;;;601    strcat(data,"CH\n");	
001cc4  498a              LDR      r1,|L1.7920|
001cc6  3944              SUBS     r1,r1,#0x44
001cc8  488c              LDR      r0,|L1.7932|
001cca  f7fffffe          BL       strcat
;;;602    GPS_COLLECT2();
001cce  f7fffffe          BL       GPS_COLLECT2
;;;603    strcat(data,"CH\n");	
001cd2  4987              LDR      r1,|L1.7920|
001cd4  3944              SUBS     r1,r1,#0x44
001cd6  4889              LDR      r0,|L1.7932|
001cd8  f7fffffe          BL       strcat
;;;604    
;;;605    
;;;606    msg_sim800(); 
001cdc  f7fffffe          BL       msg_sim800
;;;607    GPS_COLLECT2();
001ce0  f7fffffe          BL       GPS_COLLECT2
;;;608    strcat(data,"CH\n");	
001ce4  4982              LDR      r1,|L1.7920|
001ce6  3944              SUBS     r1,r1,#0x44
001ce8  4884              LDR      r0,|L1.7932|
001cea  f7fffffe          BL       strcat
;;;609    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
001cee  f7fffffe          BL       clear
001cf2  4884              LDR      r0,|L1.7940|
001cf4  3048              ADDS     r0,r0,#0x48
001cf6  f7fffffe          BL       send_modem
001cfa  f7fffffe          BL       clear
;;;610    					delay(20);
001cfe  2014              MOVS     r0,#0x14
001d00  f7fffffe          BL       delay
;;;611    
;;;612    
;;;613    msg_sim800(); 
001d04  f7fffffe          BL       msg_sim800
;;;614    
;;;615    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001d08  4b83              LDR      r3,|L1.7960|
001d0a  4a84              LDR      r2,|L1.7964|
001d0c  497d              LDR      r1,|L1.7940|
001d0e  3160              ADDS     r1,r1,#0x60
001d10  487e              LDR      r0,|L1.7948|
001d12  f7fffffe          BL       __2sprintf
;;;616    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001d16  487f              LDR      r0,|L1.7956|
001d18  6800              LDR      r0,[r0,#0]  ; tmeout
001d1a  4b7a              LDR      r3,|L1.7940|
001d1c  4a74              LDR      r2,|L1.7920|
001d1e  3a8c              SUBS     r2,r2,#0x8c
001d20  4619              MOV      r1,r3
001d22  3180              ADDS     r1,r1,#0x80
001d24  9000              STR      r0,[sp,#0]
001d26  4879              LDR      r0,|L1.7948|
001d28  f7fffffe          BL       send_GSM
;;;617    						clear();
001d2c  f7fffffe          BL       clear
;;;618    						
;;;619    						
;;;620    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
001d30  4878              LDR      r0,|L1.7956|
001d32  6800              LDR      r0,[r0,#0]  ; tmeout
001d34  4b73              LDR      r3,|L1.7940|
001d36  3388              ADDS     r3,r3,#0x88
001d38  4a6d              LDR      r2,|L1.7920|
001d3a  3a8c              SUBS     r2,r2,#0x8c
001d3c  a178              ADR      r1,|L1.7968|
001d3e  9000              STR      r0,[sp,#0]
001d40  4618              MOV      r0,r3
001d42  3010              ADDS     r0,r0,#0x10
001d44  f7fffffe          BL       send_GSM
;;;621    //*************************************tcp_initialization_ends****************************************//							
;;;622    									
;;;623    						clear();		
001d48  f7fffffe          BL       clear
;;;624    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
001d4c  213e              MOVS     r1,#0x3e
001d4e  4869              LDR      r0,|L1.7924|
001d50  f7fffffe          BL       mystrstr
001d54  4973              LDR      r1,|L1.7972|
001d56  7008              STRB     r0,[r1,#0]
;;;625    								if(cond)	
001d58  4608              MOV      r0,r1
001d5a  7800              LDRB     r0,[r0,#0]  ; cond
001d5c  2800              CMP      r0,#0
001d5e  d07d              BEQ      |L1.7772|
;;;626    								{	
;;;627    
;;;628    									clear();
001d60  f7fffffe          BL       clear
;;;629    									memset(uart_string_gsm,0,5000);
001d64  4970              LDR      r1,|L1.7976|
001d66  4863              LDR      r0,|L1.7924|
001d68  f7fffffe          BL       __aeabi_memclr
;;;630    									strcat(data,"\n");
001d6c  a16f              ADR      r1,|L1.7980|
001d6e  4863              LDR      r0,|L1.7932|
001d70  f7fffffe          BL       strcat
;;;631    									len=strlen(data);
001d74  4861              LDR      r0,|L1.7932|
001d76  f7fffffe          BL       strlen
001d7a  496d              LDR      r1,|L1.7984|
001d7c  6008              STR      r0,[r1,#0]  ; len
;;;632    									tout=0;
001d7e  2000              MOVS     r0,#0
001d80  495d              LDR      r1,|L1.7928|
001d82  6008              STR      r0,[r1,#0]  ; tout
;;;633    									k2=0;
001d84  496b              LDR      r1,|L1.7988|
001d86  6008              STR      r0,[r1,#0]  ; k2
;;;634    									for(k=0;k<len;k++)
001d88  496b              LDR      r1,|L1.7992|
001d8a  6008              STR      r0,[r1,#0]  ; k
001d8c  e00b              B        |L1.7590|
                  |L1.7566|
;;;635    									{
;;;636    										uart_putchar(UART1_BASE_PTR, data[k]);
001d8e  485b              LDR      r0,|L1.7932|
001d90  4a69              LDR      r2,|L1.7992|
001d92  6812              LDR      r2,[r2,#0]  ; k
001d94  5c81              LDRB     r1,[r0,r2]
001d96  4855              LDR      r0,|L1.7916|
001d98  f7fffffe          BL       uart_putchar
001d9c  4866              LDR      r0,|L1.7992|
001d9e  6800              LDR      r0,[r0,#0]            ;634  ; k
001da0  1c40              ADDS     r0,r0,#1              ;634
001da2  4965              LDR      r1,|L1.7992|
001da4  6008              STR      r0,[r1,#0]            ;634  ; k
                  |L1.7590|
001da6  4864              LDR      r0,|L1.7992|
001da8  6800              LDR      r0,[r0,#0]            ;634  ; k
001daa  4961              LDR      r1,|L1.7984|
001dac  6809              LDR      r1,[r1,#0]            ;634  ; len
001dae  4288              CMP      r0,r1                 ;634
001db0  dbed              BLT      |L1.7566|
;;;637    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001db2  211a              MOVS     r1,#0x1a
001db4  484d              LDR      r0,|L1.7916|
001db6  f7fffffe          BL       uart_putchar
001dba  211a              MOVS     r1,#0x1a
001dbc  484b              LDR      r0,|L1.7916|
001dbe  f7fffffe          BL       uart_putchar
;;;638    									do
001dc2  bf00              NOP      
                  |L1.7620|
;;;639    																{stcond1=strstr(uart_string_gsm,"SEND OK");
001dc4  495d              LDR      r1,|L1.7996|
001dc6  484b              LDR      r0,|L1.7924|
001dc8  f7fffffe          BL       strstr
001dcc  495c              LDR      r1,|L1.8000|
001dce  6008              STR      r0,[r1,#0]  ; stcond1
;;;640    																	stcond2=strstr(uart_string_gsm, "ERROR");
001dd0  4947              LDR      r1,|L1.7920|
001dd2  398c              SUBS     r1,r1,#0x8c
001dd4  4847              LDR      r0,|L1.7924|
001dd6  f7fffffe          BL       strstr
001dda  495a              LDR      r1,|L1.8004|
001ddc  6008              STR      r0,[r1,#0]  ; stcond2
;;;641    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001dde  4949              LDR      r1,|L1.7940|
001de0  3190              ADDS     r1,r1,#0x90
001de2  4844              LDR      r0,|L1.7924|
001de4  f7fffffe          BL       strstr
001de8  4957              LDR      r1,|L1.8008|
001dea  6008              STR      r0,[r1,#0]  ; stcond3
;;;642    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001dec  4940              LDR      r1,|L1.7920|
001dee  3970              SUBS     r1,r1,#0x70
001df0  4840              LDR      r0,|L1.7924|
001df2  f7fffffe          BL       strstr
001df6  4955              LDR      r1,|L1.8012|
001df8  6008              STR      r0,[r1,#0]  ; stcond4
;;;643    																	
;;;644    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
001dfa  4852              LDR      r0,|L1.8004|
001dfc  6800              LDR      r0,[r0,#0]  ; stcond2
001dfe  2800              CMP      r0,#0
001e00  d10f              BNE      |L1.7714|
001e02  4851              LDR      r0,|L1.8008|
001e04  6800              LDR      r0,[r0,#0]  ; stcond3
001e06  2800              CMP      r0,#0
001e08  d10b              BNE      |L1.7714|
001e0a  4608              MOV      r0,r1
001e0c  6800              LDR      r0,[r0,#0]  ; stcond4
001e0e  2800              CMP      r0,#0
001e10  d107              BNE      |L1.7714|
001e12  484b              LDR      r0,|L1.8000|
001e14  6800              LDR      r0,[r0,#0]  ; stcond1
001e16  2800              CMP      r0,#0
001e18  d103              BNE      |L1.7714|
001e1a  4837              LDR      r0,|L1.7928|
001e1c  6800              LDR      r0,[r0,#0]  ; tout
001e1e  2805              CMP      r0,#5
001e20  ddd0              BLE      |L1.7620|
                  |L1.7714|
;;;645    															//	delay(10);clear();
;;;646    														uart_putchar(UART1_BASE_PTR,0x1A);
001e22  211a              MOVS     r1,#0x1a
001e24  4831              LDR      r0,|L1.7916|
001e26  f7fffffe          BL       uart_putchar
;;;647    											//	delay(10);
;;;648    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001e2a  211a              MOVS     r1,#0x1a
001e2c  482f              LDR      r0,|L1.7916|
001e2e  f7fffffe          BL       uart_putchar
001e32  211a              MOVS     r1,#0x1a
001e34  482d              LDR      r0,|L1.7916|
001e36  f7fffffe          BL       uart_putchar
001e3a  211a              MOVS     r1,#0x1a
001e3c  482b              LDR      r0,|L1.7916|
001e3e  f7fffffe          BL       uart_putchar
;;;649    						
;;;650    
;;;651    
;;;652    									
;;;653    															
;;;654    															
;;;655    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;656    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;657    															
;;;658    														//qwe=strlen(uart_string_gsm);
;;;659    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;660    															delay(20);
001e42  2014              MOVS     r0,#0x14
001e44  f7fffffe          BL       delay
;;;661    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
001e48  493c              LDR      r1,|L1.7996|
001e4a  482a              LDR      r0,|L1.7924|
001e4c  f7fffffe          BL       strstr
001e50  493f              LDR      r1,|L1.8016|
001e52  6008              STR      r0,[r1,#0]  ; con1d
;;;662    																if(!con1d)
001e54  4608              MOV      r0,r1
001e56  6800              LDR      r0,[r0,#0]  ; con1d
001e58  2800              CMP      r0,#0
001e5a  e000              B        |L1.7774|
                  |L1.7772|
001e5c  e179              B        |L1.8530|
                  |L1.7774|
001e5e  d17b              BNE      |L1.8024|
;;;663    																{
;;;664    																	
;;;665    																	
;;;666    	delay(100);
001e60  2064              MOVS     r0,#0x64
001e62  f7fffffe          BL       delay
;;;667    		clear();//memset(uart_string_gsm,0,5000);
001e66  f7fffffe          BL       clear
;;;668    	
;;;669    	memset(at_,0,100);
001e6a  2164              MOVS     r1,#0x64
001e6c  4827              LDR      r0,|L1.7948|
001e6e  f7fffffe          BL       __aeabi_memclr
;;;670    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001e72  4822              LDR      r0,|L1.7932|
001e74  f7fffffe          BL       strlen
001e78  1c44              ADDS     r4,r0,#1
001e7a  4623              MOV      r3,r4
001e7c  4a35              LDR      r2,|L1.8020|
001e7e  491c              LDR      r1,|L1.7920|
001e80  3938              SUBS     r1,r1,#0x38
001e82  4822              LDR      r0,|L1.7948|
001e84  f7fffffe          BL       __2sprintf
;;;671    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001e88  2005              MOVS     r0,#5
001e8a  4b19              LDR      r3,|L1.7920|
001e8c  3b8c              SUBS     r3,r3,#0x8c
001e8e  461a              MOV      r2,r3
001e90  3278              ADDS     r2,r2,#0x78
001e92  a123              ADR      r1,|L1.7968|
001e94  9000              STR      r0,[sp,#0]
001e96  481d              LDR      r0,|L1.7948|
001e98  f7fffffe          BL       send_SD
;;;672    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;673    //	if(strstr(uart_string_gsm,"ERROR")){
;;;674    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;675    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;676    //	}
;;;677    	
;;;678    clear();	
001e9c  f7fffffe          BL       clear
;;;679    									k2=0;									//string array counter for uart 1
001ea0  2000              MOVS     r0,#0
001ea2  4924              LDR      r1,|L1.7988|
001ea4  6008              STR      r0,[r1,#0]  ; k2
;;;680    									tout=0;	
001ea6  4914              LDR      r1,|L1.7928|
001ea8  6008              STR      r0,[r1,#0]  ; tout
;;;681    		for(k=0;k<strlen(data);k++)
001eaa  4923              LDR      r1,|L1.7992|
001eac  6008              STR      r0,[r1,#0]  ; k
001eae  e00b              B        |L1.7880|
                  |L1.7856|
;;;682    		{
;;;683    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001eb0  4812              LDR      r0,|L1.7932|
001eb2  4a21              LDR      r2,|L1.7992|
001eb4  6812              LDR      r2,[r2,#0]  ; k
001eb6  5c81              LDRB     r1,[r0,r2]
001eb8  480c              LDR      r0,|L1.7916|
001eba  f7fffffe          BL       uart_putchar
001ebe  481e              LDR      r0,|L1.7992|
001ec0  6800              LDR      r0,[r0,#0]            ;681  ; k
001ec2  1c40              ADDS     r0,r0,#1              ;681
001ec4  491c              LDR      r1,|L1.7992|
001ec6  6008              STR      r0,[r1,#0]            ;681  ; k
                  |L1.7880|
001ec8  480c              LDR      r0,|L1.7932|
001eca  f7fffffe          BL       strlen
001ece  491a              LDR      r1,|L1.7992|
001ed0  6809              LDR      r1,[r1,#0]            ;681  ; k
001ed2  4288              CMP      r0,r1                 ;681
001ed4  d8ec              BHI      |L1.7856|
;;;684    		}	
;;;685    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001ed6  210a              MOVS     r1,#0xa
001ed8  4804              LDR      r0,|L1.7916|
001eda  f7fffffe          BL       uart_putchar
001ede  210a              MOVS     r1,#0xa
001ee0  4802              LDR      r0,|L1.7916|
001ee2  f7fffffe          BL       uart_putchar
001ee6  210a              MOVS     r1,#0xa
001ee8  4800              LDR      r0,|L1.7916|
001eea  e036              B        |L1.8026|
                  |L1.7916|
                          DCD      0x4006b000
                  |L1.7920|
                          DCD      ||.text||+0x8fc
                  |L1.7924|
                          DCD      uart_string_gsm
                  |L1.7928|
                          DCD      tout
                  |L1.7932|
                          DCD      data
                  |L1.7936|
                          DCD      0x400ff080
                  |L1.7940|
                          DCD      ||.text||+0xd54
                  |L1.7944|
001f08  4f4b00            DCB      "OK",0
001f0b  00                DCB      0
                  |L1.7948|
                          DCD      at_
                  |L1.7952|
                          DCD      apn
                  |L1.7956|
                          DCD      tmeout
                  |L1.7960|
                          DCD      port
                  |L1.7964|
                          DCD      ||ip||
                  |L1.7968|
001f20  3e00              DCB      ">",0
001f22  00                DCB      0
001f23  00                DCB      0
                  |L1.7972|
                          DCD      cond
                  |L1.7976|
                          DCD      0x00001388
                  |L1.7980|
001f2c  0a00              DCB      "\n",0
001f2e  00                DCB      0
001f2f  00                DCB      0
                  |L1.7984|
                          DCD      len
                  |L1.7988|
                          DCD      ||k2||
                  |L1.7992|
                          DCD      k
                  |L1.7996|
                          DCD      ||.text||+0x474
                  |L1.8000|
                          DCD      stcond1
                  |L1.8004|
                          DCD      stcond2
                  |L1.8008|
                          DCD      stcond3
                  |L1.8012|
                          DCD      stcond4
                  |L1.8016|
                          DCD      con1d
                  |L1.8020|
                          DCD      drive
                  |L1.8024|
001f58  e0f8              B        |L1.8524|
                  |L1.8026|
001f5a  f7fffffe          BL       uart_putchar
001f5e  210a              MOVS     r1,#0xa
001f60  48fe              LDR      r0,|L1.9052|
001f62  f7fffffe          BL       uart_putchar
001f66  210a              MOVS     r1,#0xa
001f68  48fc              LDR      r0,|L1.9052|
001f6a  f7fffffe          BL       uart_putchar
001f6e  210a              MOVS     r1,#0xa
001f70  48fa              LDR      r0,|L1.9052|
001f72  f7fffffe          BL       uart_putchar
001f76  210a              MOVS     r1,#0xa
001f78  48f8              LDR      r0,|L1.9052|
001f7a  f7fffffe          BL       uart_putchar
001f7e  210a              MOVS     r1,#0xa
001f80  48f6              LDR      r0,|L1.9052|
001f82  f7fffffe          BL       uart_putchar
001f86  210a              MOVS     r1,#0xa
001f88  48f4              LDR      r0,|L1.9052|
001f8a  f7fffffe          BL       uart_putchar
001f8e  210a              MOVS     r1,#0xa
001f90  48f2              LDR      r0,|L1.9052|
001f92  f7fffffe          BL       uart_putchar
001f96  210a              MOVS     r1,#0xa
001f98  48f0              LDR      r0,|L1.9052|
001f9a  f7fffffe          BL       uart_putchar
001f9e  210a              MOVS     r1,#0xa
001fa0  48ee              LDR      r0,|L1.9052|
001fa2  f7fffffe          BL       uart_putchar
001fa6  210a              MOVS     r1,#0xa
001fa8  48ec              LDR      r0,|L1.9052|
001faa  f7fffffe          BL       uart_putchar
001fae  210a              MOVS     r1,#0xa
001fb0  48ea              LDR      r0,|L1.9052|
001fb2  f7fffffe          BL       uart_putchar
001fb6  210a              MOVS     r1,#0xa
001fb8  48e8              LDR      r0,|L1.9052|
001fba  f7fffffe          BL       uart_putchar
001fbe  210a              MOVS     r1,#0xa
001fc0  48e6              LDR      r0,|L1.9052|
001fc2  f7fffffe          BL       uart_putchar
001fc6  210a              MOVS     r1,#0xa
001fc8  48e4              LDR      r0,|L1.9052|
001fca  f7fffffe          BL       uart_putchar
001fce  210a              MOVS     r1,#0xa
001fd0  48e2              LDR      r0,|L1.9052|
001fd2  f7fffffe          BL       uart_putchar
001fd6  210a              MOVS     r1,#0xa
001fd8  48e0              LDR      r0,|L1.9052|
001fda  f7fffffe          BL       uart_putchar
001fde  210a              MOVS     r1,#0xa
001fe0  48de              LDR      r0,|L1.9052|
001fe2  f7fffffe          BL       uart_putchar
001fe6  210a              MOVS     r1,#0xa
001fe8  48dc              LDR      r0,|L1.9052|
001fea  f7fffffe          BL       uart_putchar
001fee  210a              MOVS     r1,#0xa
001ff0  48da              LDR      r0,|L1.9052|
001ff2  f7fffffe          BL       uart_putchar
001ff6  210a              MOVS     r1,#0xa
001ff8  48d8              LDR      r0,|L1.9052|
001ffa  f7fffffe          BL       uart_putchar
001ffe  210a              MOVS     r1,#0xa
002000  48d6              LDR      r0,|L1.9052|
002002  f7fffffe          BL       uart_putchar
002006  210a              MOVS     r1,#0xa
002008  48d4              LDR      r0,|L1.9052|
00200a  f7fffffe          BL       uart_putchar
00200e  210a              MOVS     r1,#0xa
002010  48d2              LDR      r0,|L1.9052|
002012  f7fffffe          BL       uart_putchar
002016  210a              MOVS     r1,#0xa
002018  48d0              LDR      r0,|L1.9052|
00201a  f7fffffe          BL       uart_putchar
00201e  210a              MOVS     r1,#0xa
002020  48ce              LDR      r0,|L1.9052|
002022  f7fffffe          BL       uart_putchar
002026  210a              MOVS     r1,#0xa
002028  48cc              LDR      r0,|L1.9052|
00202a  f7fffffe          BL       uart_putchar
00202e  210a              MOVS     r1,#0xa
002030  48ca              LDR      r0,|L1.9052|
002032  f7fffffe          BL       uart_putchar
002036  210a              MOVS     r1,#0xa
002038  48c8              LDR      r0,|L1.9052|
00203a  f7fffffe          BL       uart_putchar
00203e  210a              MOVS     r1,#0xa
002040  48c6              LDR      r0,|L1.9052|
002042  f7fffffe          BL       uart_putchar
002046  210a              MOVS     r1,#0xa
002048  48c4              LDR      r0,|L1.9052|
00204a  f7fffffe          BL       uart_putchar
00204e  210a              MOVS     r1,#0xa
002050  48c2              LDR      r0,|L1.9052|
002052  f7fffffe          BL       uart_putchar
002056  210a              MOVS     r1,#0xa
002058  48c0              LDR      r0,|L1.9052|
00205a  f7fffffe          BL       uart_putchar
00205e  210a              MOVS     r1,#0xa
002060  48be              LDR      r0,|L1.9052|
002062  f7fffffe          BL       uart_putchar
002066  210a              MOVS     r1,#0xa
002068  48bc              LDR      r0,|L1.9052|
00206a  f7fffffe          BL       uart_putchar
00206e  210a              MOVS     r1,#0xa
002070  48ba              LDR      r0,|L1.9052|
002072  f7fffffe          BL       uart_putchar
002076  210a              MOVS     r1,#0xa
002078  48b8              LDR      r0,|L1.9052|
00207a  f7fffffe          BL       uart_putchar
00207e  210a              MOVS     r1,#0xa
002080  48b6              LDR      r0,|L1.9052|
002082  f7fffffe          BL       uart_putchar
002086  210a              MOVS     r1,#0xa
002088  48b4              LDR      r0,|L1.9052|
00208a  f7fffffe          BL       uart_putchar
00208e  210a              MOVS     r1,#0xa
002090  48b2              LDR      r0,|L1.9052|
002092  f7fffffe          BL       uart_putchar
002096  210a              MOVS     r1,#0xa
002098  48b0              LDR      r0,|L1.9052|
00209a  f7fffffe          BL       uart_putchar
00209e  210a              MOVS     r1,#0xa
0020a0  48ae              LDR      r0,|L1.9052|
0020a2  f7fffffe          BL       uart_putchar
0020a6  210a              MOVS     r1,#0xa
0020a8  48ac              LDR      r0,|L1.9052|
0020aa  f7fffffe          BL       uart_putchar
0020ae  210a              MOVS     r1,#0xa
0020b0  48aa              LDR      r0,|L1.9052|
0020b2  f7fffffe          BL       uart_putchar
0020b6  210a              MOVS     r1,#0xa
0020b8  48a8              LDR      r0,|L1.9052|
0020ba  f7fffffe          BL       uart_putchar
0020be  210a              MOVS     r1,#0xa
0020c0  48a6              LDR      r0,|L1.9052|
0020c2  f7fffffe          BL       uart_putchar
0020c6  210a              MOVS     r1,#0xa
0020c8  48a4              LDR      r0,|L1.9052|
0020ca  f7fffffe          BL       uart_putchar
0020ce  210a              MOVS     r1,#0xa
0020d0  48a2              LDR      r0,|L1.9052|
0020d2  f7fffffe          BL       uart_putchar
0020d6  210a              MOVS     r1,#0xa
0020d8  48a0              LDR      r0,|L1.9052|
0020da  f7fffffe          BL       uart_putchar
0020de  210a              MOVS     r1,#0xa
0020e0  489e              LDR      r0,|L1.9052|
0020e2  f7fffffe          BL       uart_putchar
0020e6  210a              MOVS     r1,#0xa
0020e8  489c              LDR      r0,|L1.9052|
0020ea  f7fffffe          BL       uart_putchar
0020ee  210a              MOVS     r1,#0xa
0020f0  489a              LDR      r0,|L1.9052|
0020f2  f7fffffe          BL       uart_putchar
0020f6  210a              MOVS     r1,#0xa
0020f8  4898              LDR      r0,|L1.9052|
0020fa  f7fffffe          BL       uart_putchar
0020fe  210a              MOVS     r1,#0xa
002100  4896              LDR      r0,|L1.9052|
002102  f7fffffe          BL       uart_putchar
002106  210a              MOVS     r1,#0xa
002108  4894              LDR      r0,|L1.9052|
00210a  f7fffffe          BL       uart_putchar
;;;686    									//memset(data,0,1000);
;;;687    														//timer counts to wait for characters in uart 1 									
;;;688    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00210e  bf00              NOP      
                  |L1.8464|
002110  4993              LDR      r1,|L1.9056|
002112  4894              LDR      r0,|L1.9060|
002114  f7fffffe          BL       strstr
002118  2800              CMP      r0,#0
00211a  d10a              BNE      |L1.8498|
00211c  4990              LDR      r1,|L1.9056|
00211e  398c              SUBS     r1,r1,#0x8c
002120  4890              LDR      r0,|L1.9060|
002122  f7fffffe          BL       strstr
002126  2800              CMP      r0,#0
002128  d103              BNE      |L1.8498|
00212a  488f              LDR      r0,|L1.9064|
00212c  6800              LDR      r0,[r0,#0]  ; tout
00212e  2805              CMP      r0,#5
002130  ddee              BLE      |L1.8464|
                  |L1.8498|
;;;689    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;690    									}
;;;691    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002132  f7fffffe          BL       clear
;;;692    									//clear();
;;;693    									memset(data,0,strlen(data));
002136  488d              LDR      r0,|L1.9068|
002138  f7fffffe          BL       strlen
00213c  4604              MOV      r4,r0
00213e  4621              MOV      r1,r4
002140  488a              LDR      r0,|L1.9068|
002142  f7fffffe          BL       __aeabi_memclr
;;;694    									clear();
002146  f7fffffe          BL       clear
00214a  e157              B        |L1.9212|
                  |L1.8524|
;;;695    
;;;696    								
;;;697    																	
;;;698    																	
;;;699    								//								log_it();								
;;;700    																}else{send_chunk();}													
00214c  f7fffffe          BL       send_chunk
002150  e154              B        |L1.9212|
                  |L1.8530|
;;;701    								//checks for the sd_data available
;;;702    								}
;;;703    								//con1d=strstr(uart_string_gsm,"OK");
;;;704    								else
;;;705    								{
;;;706    									
;;;707    									
;;;708    									
;;;709    	delay(100);
002152  2064              MOVS     r0,#0x64
002154  f7fffffe          BL       delay
;;;710    		clear();//memset(uart_string_gsm,0,5000);
002158  f7fffffe          BL       clear
;;;711    	
;;;712    	memset(at_,0,100);
00215c  2164              MOVS     r1,#0x64
00215e  4884              LDR      r0,|L1.9072|
002160  f7fffffe          BL       __aeabi_memclr
;;;713    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002164  4881              LDR      r0,|L1.9068|
002166  f7fffffe          BL       strlen
00216a  1c44              ADDS     r4,r0,#1
00216c  4623              MOV      r3,r4
00216e  4a81              LDR      r2,|L1.9076|
002170  497b              LDR      r1,|L1.9056|
002172  3938              SUBS     r1,r1,#0x38
002174  487e              LDR      r0,|L1.9072|
002176  f7fffffe          BL       __2sprintf
;;;714    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00217a  2005              MOVS     r0,#5
00217c  4b78              LDR      r3,|L1.9056|
00217e  3b8c              SUBS     r3,r3,#0x8c
002180  461a              MOV      r2,r3
002182  3278              ADDS     r2,r2,#0x78
002184  a17c              ADR      r1,|L1.9080|
002186  9000              STR      r0,[sp,#0]
002188  4879              LDR      r0,|L1.9072|
00218a  f7fffffe          BL       send_SD
;;;715    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;716    //	if(strstr(uart_string_gsm,"ERROR")){
;;;717    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;718    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;719    //	}
;;;720    	
;;;721    clear();	
00218e  f7fffffe          BL       clear
;;;722    									k2=0;									//string array counter for uart 1
002192  2000              MOVS     r0,#0
002194  4979              LDR      r1,|L1.9084|
002196  6008              STR      r0,[r1,#0]  ; k2
;;;723    									tout=0;	
002198  4973              LDR      r1,|L1.9064|
00219a  6008              STR      r0,[r1,#0]  ; tout
;;;724    		for(k=0;k<strlen(data);k++)
00219c  4978              LDR      r1,|L1.9088|
00219e  6008              STR      r0,[r1,#0]  ; k
0021a0  e00b              B        |L1.8634|
                  |L1.8610|
;;;725    		{
;;;726    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0021a2  4872              LDR      r0,|L1.9068|
0021a4  4a76              LDR      r2,|L1.9088|
0021a6  6812              LDR      r2,[r2,#0]  ; k
0021a8  5c81              LDRB     r1,[r0,r2]
0021aa  486c              LDR      r0,|L1.9052|
0021ac  f7fffffe          BL       uart_putchar
0021b0  4873              LDR      r0,|L1.9088|
0021b2  6800              LDR      r0,[r0,#0]            ;724  ; k
0021b4  1c40              ADDS     r0,r0,#1              ;724
0021b6  4972              LDR      r1,|L1.9088|
0021b8  6008              STR      r0,[r1,#0]            ;724  ; k
                  |L1.8634|
0021ba  486c              LDR      r0,|L1.9068|
0021bc  f7fffffe          BL       strlen
0021c0  496f              LDR      r1,|L1.9088|
0021c2  6809              LDR      r1,[r1,#0]            ;724  ; k
0021c4  4288              CMP      r0,r1                 ;724
0021c6  d8ec              BHI      |L1.8610|
;;;727    		}	
;;;728    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0021c8  210a              MOVS     r1,#0xa
0021ca  4864              LDR      r0,|L1.9052|
0021cc  f7fffffe          BL       uart_putchar
0021d0  210a              MOVS     r1,#0xa
0021d2  4862              LDR      r0,|L1.9052|
0021d4  f7fffffe          BL       uart_putchar
0021d8  210a              MOVS     r1,#0xa
0021da  4860              LDR      r0,|L1.9052|
0021dc  f7fffffe          BL       uart_putchar
0021e0  210a              MOVS     r1,#0xa
0021e2  485e              LDR      r0,|L1.9052|
0021e4  f7fffffe          BL       uart_putchar
0021e8  210a              MOVS     r1,#0xa
0021ea  485c              LDR      r0,|L1.9052|
0021ec  f7fffffe          BL       uart_putchar
0021f0  210a              MOVS     r1,#0xa
0021f2  485a              LDR      r0,|L1.9052|
0021f4  f7fffffe          BL       uart_putchar
0021f8  210a              MOVS     r1,#0xa
0021fa  4858              LDR      r0,|L1.9052|
0021fc  f7fffffe          BL       uart_putchar
002200  210a              MOVS     r1,#0xa
002202  4856              LDR      r0,|L1.9052|
002204  f7fffffe          BL       uart_putchar
002208  210a              MOVS     r1,#0xa
00220a  4854              LDR      r0,|L1.9052|
00220c  f7fffffe          BL       uart_putchar
002210  210a              MOVS     r1,#0xa
002212  4852              LDR      r0,|L1.9052|
002214  f7fffffe          BL       uart_putchar
002218  210a              MOVS     r1,#0xa
00221a  4850              LDR      r0,|L1.9052|
00221c  f7fffffe          BL       uart_putchar
002220  210a              MOVS     r1,#0xa
002222  484e              LDR      r0,|L1.9052|
002224  f7fffffe          BL       uart_putchar
002228  210a              MOVS     r1,#0xa
00222a  484c              LDR      r0,|L1.9052|
00222c  f7fffffe          BL       uart_putchar
002230  210a              MOVS     r1,#0xa
002232  484a              LDR      r0,|L1.9052|
002234  f7fffffe          BL       uart_putchar
002238  210a              MOVS     r1,#0xa
00223a  4848              LDR      r0,|L1.9052|
00223c  f7fffffe          BL       uart_putchar
002240  210a              MOVS     r1,#0xa
002242  4846              LDR      r0,|L1.9052|
002244  f7fffffe          BL       uart_putchar
002248  210a              MOVS     r1,#0xa
00224a  4844              LDR      r0,|L1.9052|
00224c  f7fffffe          BL       uart_putchar
002250  210a              MOVS     r1,#0xa
002252  4842              LDR      r0,|L1.9052|
002254  f7fffffe          BL       uart_putchar
002258  210a              MOVS     r1,#0xa
00225a  4840              LDR      r0,|L1.9052|
00225c  f7fffffe          BL       uart_putchar
002260  210a              MOVS     r1,#0xa
002262  483e              LDR      r0,|L1.9052|
002264  f7fffffe          BL       uart_putchar
002268  210a              MOVS     r1,#0xa
00226a  483c              LDR      r0,|L1.9052|
00226c  f7fffffe          BL       uart_putchar
002270  210a              MOVS     r1,#0xa
002272  483a              LDR      r0,|L1.9052|
002274  f7fffffe          BL       uart_putchar
002278  210a              MOVS     r1,#0xa
00227a  4838              LDR      r0,|L1.9052|
00227c  f7fffffe          BL       uart_putchar
002280  210a              MOVS     r1,#0xa
002282  4836              LDR      r0,|L1.9052|
002284  f7fffffe          BL       uart_putchar
002288  210a              MOVS     r1,#0xa
00228a  4834              LDR      r0,|L1.9052|
00228c  f7fffffe          BL       uart_putchar
002290  210a              MOVS     r1,#0xa
002292  4832              LDR      r0,|L1.9052|
002294  f7fffffe          BL       uart_putchar
002298  210a              MOVS     r1,#0xa
00229a  4830              LDR      r0,|L1.9052|
00229c  f7fffffe          BL       uart_putchar
0022a0  210a              MOVS     r1,#0xa
0022a2  482e              LDR      r0,|L1.9052|
0022a4  f7fffffe          BL       uart_putchar
0022a8  210a              MOVS     r1,#0xa
0022aa  482c              LDR      r0,|L1.9052|
0022ac  f7fffffe          BL       uart_putchar
0022b0  210a              MOVS     r1,#0xa
0022b2  482a              LDR      r0,|L1.9052|
0022b4  f7fffffe          BL       uart_putchar
0022b8  210a              MOVS     r1,#0xa
0022ba  4828              LDR      r0,|L1.9052|
0022bc  f7fffffe          BL       uart_putchar
0022c0  210a              MOVS     r1,#0xa
0022c2  4826              LDR      r0,|L1.9052|
0022c4  f7fffffe          BL       uart_putchar
0022c8  210a              MOVS     r1,#0xa
0022ca  4824              LDR      r0,|L1.9052|
0022cc  f7fffffe          BL       uart_putchar
0022d0  210a              MOVS     r1,#0xa
0022d2  4822              LDR      r0,|L1.9052|
0022d4  f7fffffe          BL       uart_putchar
0022d8  210a              MOVS     r1,#0xa
0022da  4820              LDR      r0,|L1.9052|
0022dc  f7fffffe          BL       uart_putchar
0022e0  210a              MOVS     r1,#0xa
0022e2  481e              LDR      r0,|L1.9052|
0022e4  f7fffffe          BL       uart_putchar
0022e8  210a              MOVS     r1,#0xa
0022ea  481c              LDR      r0,|L1.9052|
0022ec  f7fffffe          BL       uart_putchar
0022f0  210a              MOVS     r1,#0xa
0022f2  481a              LDR      r0,|L1.9052|
0022f4  f7fffffe          BL       uart_putchar
0022f8  210a              MOVS     r1,#0xa
0022fa  4818              LDR      r0,|L1.9052|
0022fc  f7fffffe          BL       uart_putchar
002300  210a              MOVS     r1,#0xa
002302  4816              LDR      r0,|L1.9052|
002304  f7fffffe          BL       uart_putchar
002308  210a              MOVS     r1,#0xa
00230a  4814              LDR      r0,|L1.9052|
00230c  f7fffffe          BL       uart_putchar
002310  210a              MOVS     r1,#0xa
002312  4812              LDR      r0,|L1.9052|
002314  f7fffffe          BL       uart_putchar
002318  210a              MOVS     r1,#0xa
00231a  4810              LDR      r0,|L1.9052|
00231c  f7fffffe          BL       uart_putchar
002320  210a              MOVS     r1,#0xa
002322  480e              LDR      r0,|L1.9052|
002324  f7fffffe          BL       uart_putchar
002328  210a              MOVS     r1,#0xa
00232a  480c              LDR      r0,|L1.9052|
00232c  f7fffffe          BL       uart_putchar
002330  210a              MOVS     r1,#0xa
002332  480a              LDR      r0,|L1.9052|
002334  f7fffffe          BL       uart_putchar
002338  210a              MOVS     r1,#0xa
00233a  4808              LDR      r0,|L1.9052|
00233c  f7fffffe          BL       uart_putchar
002340  210a              MOVS     r1,#0xa
002342  4806              LDR      r0,|L1.9052|
002344  f7fffffe          BL       uart_putchar
002348  210a              MOVS     r1,#0xa
00234a  4804              LDR      r0,|L1.9052|
00234c  f7fffffe          BL       uart_putchar
002350  210a              MOVS     r1,#0xa
002352  4802              LDR      r0,|L1.9052|
002354  f7fffffe          BL       uart_putchar
002358  210a              MOVS     r1,#0xa
00235a  e013              B        |L1.9092|
                  |L1.9052|
                          DCD      0x4006b000
                  |L1.9056|
                          DCD      ||.text||+0x8fc
                  |L1.9060|
                          DCD      uart_string_gsm
                  |L1.9064|
                          DCD      tout
                  |L1.9068|
                          DCD      data
                  |L1.9072|
                          DCD      at_
                  |L1.9076|
                          DCD      drive
                  |L1.9080|
002378  3e00              DCB      ">",0
00237a  00                DCB      0
00237b  00                DCB      0
                  |L1.9084|
                          DCD      ||k2||
                  |L1.9088|
                          DCD      k
                  |L1.9092|
002384  48fe              LDR      r0,|L1.10112|
002386  f7fffffe          BL       uart_putchar
00238a  210a              MOVS     r1,#0xa
00238c  48fc              LDR      r0,|L1.10112|
00238e  f7fffffe          BL       uart_putchar
002392  210a              MOVS     r1,#0xa
002394  48fa              LDR      r0,|L1.10112|
002396  f7fffffe          BL       uart_putchar
00239a  210a              MOVS     r1,#0xa
00239c  48f8              LDR      r0,|L1.10112|
00239e  f7fffffe          BL       uart_putchar
0023a2  210a              MOVS     r1,#0xa
0023a4  48f6              LDR      r0,|L1.10112|
0023a6  f7fffffe          BL       uart_putchar
0023aa  210a              MOVS     r1,#0xa
0023ac  48f4              LDR      r0,|L1.10112|
0023ae  f7fffffe          BL       uart_putchar
0023b2  210a              MOVS     r1,#0xa
0023b4  48f2              LDR      r0,|L1.10112|
0023b6  f7fffffe          BL       uart_putchar
;;;729    									//memset(data,0,1000);
;;;730    														//timer counts to wait for characters in uart 1 									
;;;731    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0023ba  bf00              NOP      
                  |L1.9148|
0023bc  49f1              LDR      r1,|L1.10116|
0023be  48f2              LDR      r0,|L1.10120|
0023c0  f7fffffe          BL       strstr
0023c4  2800              CMP      r0,#0
0023c6  d10a              BNE      |L1.9182|
0023c8  49ee              LDR      r1,|L1.10116|
0023ca  398c              SUBS     r1,r1,#0x8c
0023cc  48ee              LDR      r0,|L1.10120|
0023ce  f7fffffe          BL       strstr
0023d2  2800              CMP      r0,#0
0023d4  d103              BNE      |L1.9182|
0023d6  48ed              LDR      r0,|L1.10124|
0023d8  6800              LDR      r0,[r0,#0]  ; tout
0023da  2805              CMP      r0,#5
0023dc  ddee              BLE      |L1.9148|
                  |L1.9182|
;;;732    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;733    									}
;;;734    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0023de  f7fffffe          BL       clear
;;;735    									//clear();
;;;736    									memset(data,0,strlen(data));
0023e2  48eb              LDR      r0,|L1.10128|
0023e4  f7fffffe          BL       strlen
0023e8  4604              MOV      r4,r0
0023ea  4621              MOV      r1,r4
0023ec  48e8              LDR      r0,|L1.10128|
0023ee  f7fffffe          BL       __aeabi_memclr
;;;737    									clear();
0023f2  f7fffffe          BL       clear
0023f6  e001              B        |L1.9212|
                  |L1.9208|
;;;738    
;;;739    								
;;;740    									
;;;741    									
;;;742    									
;;;743    								//	log_it();			//otherwize log it					
;;;744    								}
;;;745    
;;;746    																
;;;747    //delay(50);
;;;748    
;;;749    //else{
;;;750    //log_it();}
;;;751    								
;;;752    								
;;;753    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;754    	else
;;;755    	{
;;;756    		send_chunk();
0023f8  f7fffffe          BL       send_chunk
                  |L1.9212|
;;;757    	}		
;;;758    								
;;;759    								
;;;760    								
;;;761    	memset(data,0,strlen(data));	
0023fc  48e4              LDR      r0,|L1.10128|
0023fe  f7fffffe          BL       strlen
002402  4604              MOV      r4,r0
002404  4621              MOV      r1,r4
002406  48e2              LDR      r0,|L1.10128|
002408  f7fffffe          BL       __aeabi_memclr
;;;762    	uart_putchar(UART1_BASE_PTR, 0x1A);
00240c  211a              MOVS     r1,#0x1a
00240e  48dc              LDR      r0,|L1.10112|
002410  f7fffffe          BL       uart_putchar
;;;763    	
;;;764    }
002414  bd38              POP      {r3-r5,pc}
;;;765    	
                          ENDP

                  send_tcp2 PROC
;;;780    
;;;781    void send_tcp2()
002416  b538              PUSH     {r3-r5,lr}
;;;782    {	
;;;783    memset(stcond1,0,strlen(stcond1));	
002418  48de              LDR      r0,|L1.10132|
00241a  6800              LDR      r0,[r0,#0]  ; stcond1
00241c  f7fffffe          BL       strlen
002420  4604              MOV      r4,r0
002422  4621              MOV      r1,r4
002424  48db              LDR      r0,|L1.10132|
002426  6800              LDR      r0,[r0,#0]  ; stcond1
002428  f7fffffe          BL       __aeabi_memclr
;;;784    memset(con1d,0,strlen(con1d));	
00242c  48da              LDR      r0,|L1.10136|
00242e  6800              LDR      r0,[r0,#0]  ; con1d
002430  f7fffffe          BL       strlen
002434  4604              MOV      r4,r0
002436  4621              MOV      r1,r4
002438  48d7              LDR      r0,|L1.10136|
00243a  6800              LDR      r0,[r0,#0]  ; con1d
00243c  f7fffffe          BL       __aeabi_memclr
;;;785    	
;;;786    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;787    						
;;;788    								cond=mystrstr(uart_string_gsm,'>');
002440  213e              MOVS     r1,#0x3e
002442  48d1              LDR      r0,|L1.10120|
002444  f7fffffe          BL       mystrstr
002448  49d4              LDR      r1,|L1.10140|
00244a  7008              STRB     r0,[r1,#0]
;;;789    								if(cond)	
00244c  4608              MOV      r0,r1
00244e  7800              LDRB     r0,[r0,#0]  ; cond
002450  2800              CMP      r0,#0
002452  d07c              BEQ      |L1.9550|
;;;790    								{
;;;791    									
;;;792    									clear();
002454  f7fffffe          BL       clear
;;;793    									memset(uart_string_gsm,0,5000);
002458  49d1              LDR      r1,|L1.10144|
00245a  48cb              LDR      r0,|L1.10120|
00245c  f7fffffe          BL       __aeabi_memclr
;;;794    									strcat(data,"\n");
002460  a1d0              ADR      r1,|L1.10148|
002462  48cb              LDR      r0,|L1.10128|
002464  f7fffffe          BL       strcat
;;;795    									len=strlen(data);
002468  48c9              LDR      r0,|L1.10128|
00246a  f7fffffe          BL       strlen
00246e  49ce              LDR      r1,|L1.10152|
002470  6008              STR      r0,[r1,#0]  ; len
;;;796    									tout=0;
002472  2000              MOVS     r0,#0
002474  49c5              LDR      r1,|L1.10124|
002476  6008              STR      r0,[r1,#0]  ; tout
;;;797    									k2=0;
002478  49cc              LDR      r1,|L1.10156|
00247a  6008              STR      r0,[r1,#0]  ; k2
;;;798    									for(k=0;k<len;k++)
00247c  49cc              LDR      r1,|L1.10160|
00247e  6008              STR      r0,[r1,#0]  ; k
002480  e00b              B        |L1.9370|
                  |L1.9346|
;;;799    									{
;;;800    										uart_putchar(UART1_BASE_PTR, data[k]);
002482  48c3              LDR      r0,|L1.10128|
002484  4aca              LDR      r2,|L1.10160|
002486  6812              LDR      r2,[r2,#0]  ; k
002488  5c81              LDRB     r1,[r0,r2]
00248a  48bd              LDR      r0,|L1.10112|
00248c  f7fffffe          BL       uart_putchar
002490  48c7              LDR      r0,|L1.10160|
002492  6800              LDR      r0,[r0,#0]            ;798  ; k
002494  1c40              ADDS     r0,r0,#1              ;798
002496  49c6              LDR      r1,|L1.10160|
002498  6008              STR      r0,[r1,#0]            ;798  ; k
                  |L1.9370|
00249a  48c5              LDR      r0,|L1.10160|
00249c  6800              LDR      r0,[r0,#0]            ;798  ; k
00249e  49c2              LDR      r1,|L1.10152|
0024a0  6809              LDR      r1,[r1,#0]            ;798  ; len
0024a2  4288              CMP      r0,r1                 ;798
0024a4  dbed              BLT      |L1.9346|
;;;801    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0024a6  211a              MOVS     r1,#0x1a
0024a8  48b5              LDR      r0,|L1.10112|
0024aa  f7fffffe          BL       uart_putchar
;;;802    									do
0024ae  bf00              NOP      
                  |L1.9392|
;;;803    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0024b0  49c0              LDR      r1,|L1.10164|
0024b2  48b5              LDR      r0,|L1.10120|
0024b4  f7fffffe          BL       strstr
0024b8  49b6              LDR      r1,|L1.10132|
0024ba  6008              STR      r0,[r1,#0]  ; stcond1
;;;804    																	stcond2=strstr(uart_string_gsm, "ERROR");
0024bc  49b1              LDR      r1,|L1.10116|
0024be  398c              SUBS     r1,r1,#0x8c
0024c0  48b1              LDR      r0,|L1.10120|
0024c2  f7fffffe          BL       strstr
0024c6  49bc              LDR      r1,|L1.10168|
0024c8  6008              STR      r0,[r1,#0]  ; stcond2
;;;805    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0024ca  49bc              LDR      r1,|L1.10172|
0024cc  48ae              LDR      r0,|L1.10120|
0024ce  f7fffffe          BL       strstr
0024d2  49bb              LDR      r1,|L1.10176|
0024d4  6008              STR      r0,[r1,#0]  ; stcond3
;;;806    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0024d6  49ab              LDR      r1,|L1.10116|
0024d8  3970              SUBS     r1,r1,#0x70
0024da  48ab              LDR      r0,|L1.10120|
0024dc  f7fffffe          BL       strstr
0024e0  49b8              LDR      r1,|L1.10180|
0024e2  6008              STR      r0,[r1,#0]  ; stcond4
;;;807    																	
;;;808    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0024e4  48b4              LDR      r0,|L1.10168|
0024e6  6800              LDR      r0,[r0,#0]  ; stcond2
0024e8  2800              CMP      r0,#0
0024ea  d10f              BNE      |L1.9484|
0024ec  48b4              LDR      r0,|L1.10176|
0024ee  6800              LDR      r0,[r0,#0]  ; stcond3
0024f0  2800              CMP      r0,#0
0024f2  d10b              BNE      |L1.9484|
0024f4  4608              MOV      r0,r1
0024f6  6800              LDR      r0,[r0,#0]  ; stcond4
0024f8  2800              CMP      r0,#0
0024fa  d107              BNE      |L1.9484|
0024fc  48a5              LDR      r0,|L1.10132|
0024fe  6800              LDR      r0,[r0,#0]  ; stcond1
002500  2800              CMP      r0,#0
002502  d103              BNE      |L1.9484|
002504  48a1              LDR      r0,|L1.10124|
002506  6800              LDR      r0,[r0,#0]  ; tout
002508  2804              CMP      r0,#4
00250a  ddd1              BLE      |L1.9392|
                  |L1.9484|
;;;809    																//delay(10);clear();
;;;810    														uart_putchar(UART1_BASE_PTR,0x1A);
00250c  211a              MOVS     r1,#0x1a
00250e  489c              LDR      r0,|L1.10112|
002510  f7fffffe          BL       uart_putchar
;;;811    												//delay(10);
;;;812    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002514  211a              MOVS     r1,#0x1a
002516  489a              LDR      r0,|L1.10112|
002518  f7fffffe          BL       uart_putchar
00251c  211a              MOVS     r1,#0x1a
00251e  4898              LDR      r0,|L1.10112|
002520  f7fffffe          BL       uart_putchar
002524  211a              MOVS     r1,#0x1a
002526  4896              LDR      r0,|L1.10112|
002528  f7fffffe          BL       uart_putchar
;;;813    						
;;;814    									
;;;815    									
;;;816    									
;;;817    									
;;;818    									
;;;819    									
;;;820    									
;;;821    
;;;822    //									for(k=0;k<len;k++)
;;;823    //									{
;;;824    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;825    //									}
;;;826    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;827    
;;;828    //									
;;;829    //													k2=0;									//string array counter for uart 1
;;;830    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;831    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;832    //																{
;;;833    //																	timeout--;
;;;834    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;835    //																}
;;;836    																if(flagch==1){		int_erval=temp;flagch=0;	}
00252c  48a6              LDR      r0,|L1.10184|
00252e  6800              LDR      r0,[r0,#0]  ; flagch
002530  2801              CMP      r0,#1
002532  d106              BNE      |L1.9538|
002534  48a5              LDR      r0,|L1.10188|
002536  6800              LDR      r0,[r0,#0]  ; temp
002538  49a5              LDR      r1,|L1.10192|
00253a  6008              STR      r0,[r1,#0]  ; int_erval
00253c  2000              MOVS     r0,#0
00253e  49a2              LDR      r1,|L1.10184|
002540  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.9538|
;;;837    delay(50);
002542  2032              MOVS     r0,#0x32
002544  f7fffffe          BL       delay
;;;838    stcond1=strstr(uart_string_gsm,"SEND OK");								
002548  499a              LDR      r1,|L1.10164|
00254a  488f              LDR      r0,|L1.10120|
00254c  e000              B        |L1.9552|
                  |L1.9550|
00254e  e003              B        |L1.9560|
                  |L1.9552|
002550  f7fffffe          BL       strstr
002554  498f              LDR      r1,|L1.10132|
002556  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.9560|
;;;839    								}
;;;840    //else{
;;;841    //log_it();
;;;842    //}
;;;843    
;;;844    
;;;845    if(!stcond1) // if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
002558  488e              LDR      r0,|L1.10132|
00255a  6800              LDR      r0,[r0,#0]  ; stcond1
00255c  2800              CMP      r0,#0
00255e  d001              BEQ      |L1.9572|
002560  f000ff35          BL       |L1.13262|
                  |L1.9572|
;;;846    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002564  211a              MOVS     r1,#0x1a
002566  4886              LDR      r0,|L1.10112|
002568  f7fffffe          BL       uart_putchar
00256c  f7fffffe          BL       clear
002570  200a              MOVS     r0,#0xa
002572  f7fffffe          BL       delay
;;;847    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002576  211a              MOVS     r1,#0x1a
002578  4881              LDR      r0,|L1.10112|
00257a  f7fffffe          BL       uart_putchar
00257e  f7fffffe          BL       clear
002582  200a              MOVS     r0,#0xa
002584  f7fffffe          BL       delay
;;;848    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002588  211a              MOVS     r1,#0x1a
00258a  487d              LDR      r0,|L1.10112|
00258c  f7fffffe          BL       uart_putchar
002590  f7fffffe          BL       clear
002594  200a              MOVS     r0,#0xa
002596  f7fffffe          BL       delay
;;;849    						//	remove_all_chars(data, '\n', '\n');
;;;850    	
;;;851    	//	strcat(data,"CH\n");	
;;;852    	
;;;853    	
;;;854    	delay(100);
00259a  2064              MOVS     r0,#0x64
00259c  f7fffffe          BL       delay
;;;855    		clear();//memset(uart_string_gsm,0,5000);
0025a0  f7fffffe          BL       clear
;;;856    	
;;;857    	memset(at_,0,100);
0025a4  2164              MOVS     r1,#0x64
0025a6  488b              LDR      r0,|L1.10196|
0025a8  f7fffffe          BL       __aeabi_memclr
;;;858    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0025ac  4878              LDR      r0,|L1.10128|
0025ae  f7fffffe          BL       strlen
0025b2  1c44              ADDS     r4,r0,#1
0025b4  4623              MOV      r3,r4
0025b6  4a88              LDR      r2,|L1.10200|
0025b8  4972              LDR      r1,|L1.10116|
0025ba  3938              SUBS     r1,r1,#0x38
0025bc  4885              LDR      r0,|L1.10196|
0025be  f7fffffe          BL       __2sprintf
;;;859    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0025c2  2005              MOVS     r0,#5
0025c4  4b6f              LDR      r3,|L1.10116|
0025c6  3b8c              SUBS     r3,r3,#0x8c
0025c8  461a              MOV      r2,r3
0025ca  3278              ADDS     r2,r2,#0x78
0025cc  a183              ADR      r1,|L1.10204|
0025ce  9000              STR      r0,[sp,#0]
0025d0  4880              LDR      r0,|L1.10196|
0025d2  f7fffffe          BL       send_SD
;;;860    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;861    //	if(strstr(uart_string_gsm,"ERROR")){
;;;862    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;863    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;864    //	}
;;;865    	
;;;866    clear();	
0025d6  f7fffffe          BL       clear
;;;867    									k2=0;									//string array counter for uart 1
0025da  2000              MOVS     r0,#0
0025dc  4973              LDR      r1,|L1.10156|
0025de  6008              STR      r0,[r1,#0]  ; k2
;;;868    									tout=0;	
0025e0  496a              LDR      r1,|L1.10124|
0025e2  6008              STR      r0,[r1,#0]  ; tout
;;;869    		for(k=0;k<strlen(data);k++)
0025e4  4972              LDR      r1,|L1.10160|
0025e6  6008              STR      r0,[r1,#0]  ; k
0025e8  e00b              B        |L1.9730|
                  |L1.9706|
;;;870    		{
;;;871    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0025ea  4869              LDR      r0,|L1.10128|
0025ec  4a70              LDR      r2,|L1.10160|
0025ee  6812              LDR      r2,[r2,#0]  ; k
0025f0  5c81              LDRB     r1,[r0,r2]
0025f2  4863              LDR      r0,|L1.10112|
0025f4  f7fffffe          BL       uart_putchar
0025f8  486d              LDR      r0,|L1.10160|
0025fa  6800              LDR      r0,[r0,#0]            ;869  ; k
0025fc  1c40              ADDS     r0,r0,#1              ;869
0025fe  496c              LDR      r1,|L1.10160|
002600  6008              STR      r0,[r1,#0]            ;869  ; k
                  |L1.9730|
002602  4863              LDR      r0,|L1.10128|
002604  f7fffffe          BL       strlen
002608  4969              LDR      r1,|L1.10160|
00260a  6809              LDR      r1,[r1,#0]            ;869  ; k
00260c  4288              CMP      r0,r1                 ;869
00260e  d8ec              BHI      |L1.9706|
;;;872    		}	
;;;873    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002610  210a              MOVS     r1,#0xa
002612  485b              LDR      r0,|L1.10112|
002614  f7fffffe          BL       uart_putchar
002618  210a              MOVS     r1,#0xa
00261a  4859              LDR      r0,|L1.10112|
00261c  f7fffffe          BL       uart_putchar
002620  210a              MOVS     r1,#0xa
002622  4857              LDR      r0,|L1.10112|
002624  f7fffffe          BL       uart_putchar
002628  210a              MOVS     r1,#0xa
00262a  4855              LDR      r0,|L1.10112|
00262c  f7fffffe          BL       uart_putchar
002630  210a              MOVS     r1,#0xa
002632  4853              LDR      r0,|L1.10112|
002634  f7fffffe          BL       uart_putchar
002638  210a              MOVS     r1,#0xa
00263a  4851              LDR      r0,|L1.10112|
00263c  f7fffffe          BL       uart_putchar
002640  210a              MOVS     r1,#0xa
002642  484f              LDR      r0,|L1.10112|
002644  f7fffffe          BL       uart_putchar
002648  210a              MOVS     r1,#0xa
00264a  484d              LDR      r0,|L1.10112|
00264c  f7fffffe          BL       uart_putchar
002650  210a              MOVS     r1,#0xa
002652  484b              LDR      r0,|L1.10112|
002654  f7fffffe          BL       uart_putchar
002658  210a              MOVS     r1,#0xa
00265a  4849              LDR      r0,|L1.10112|
00265c  f7fffffe          BL       uart_putchar
002660  210a              MOVS     r1,#0xa
002662  4847              LDR      r0,|L1.10112|
002664  f7fffffe          BL       uart_putchar
002668  210a              MOVS     r1,#0xa
00266a  4845              LDR      r0,|L1.10112|
00266c  f7fffffe          BL       uart_putchar
002670  210a              MOVS     r1,#0xa
002672  4843              LDR      r0,|L1.10112|
002674  f7fffffe          BL       uart_putchar
002678  210a              MOVS     r1,#0xa
00267a  4841              LDR      r0,|L1.10112|
00267c  f7fffffe          BL       uart_putchar
002680  210a              MOVS     r1,#0xa
002682  483f              LDR      r0,|L1.10112|
002684  f7fffffe          BL       uart_putchar
002688  210a              MOVS     r1,#0xa
00268a  483d              LDR      r0,|L1.10112|
00268c  f7fffffe          BL       uart_putchar
002690  210a              MOVS     r1,#0xa
002692  483b              LDR      r0,|L1.10112|
002694  f7fffffe          BL       uart_putchar
002698  210a              MOVS     r1,#0xa
00269a  4839              LDR      r0,|L1.10112|
00269c  f7fffffe          BL       uart_putchar
0026a0  210a              MOVS     r1,#0xa
0026a2  4837              LDR      r0,|L1.10112|
0026a4  f7fffffe          BL       uart_putchar
0026a8  210a              MOVS     r1,#0xa
0026aa  4835              LDR      r0,|L1.10112|
0026ac  f7fffffe          BL       uart_putchar
0026b0  210a              MOVS     r1,#0xa
0026b2  4833              LDR      r0,|L1.10112|
0026b4  f7fffffe          BL       uart_putchar
0026b8  210a              MOVS     r1,#0xa
0026ba  4831              LDR      r0,|L1.10112|
0026bc  f7fffffe          BL       uart_putchar
0026c0  210a              MOVS     r1,#0xa
0026c2  482f              LDR      r0,|L1.10112|
0026c4  f7fffffe          BL       uart_putchar
0026c8  210a              MOVS     r1,#0xa
0026ca  482d              LDR      r0,|L1.10112|
0026cc  f7fffffe          BL       uart_putchar
0026d0  210a              MOVS     r1,#0xa
0026d2  482b              LDR      r0,|L1.10112|
0026d4  f7fffffe          BL       uart_putchar
0026d8  210a              MOVS     r1,#0xa
0026da  4829              LDR      r0,|L1.10112|
0026dc  f7fffffe          BL       uart_putchar
0026e0  210a              MOVS     r1,#0xa
0026e2  4827              LDR      r0,|L1.10112|
0026e4  f7fffffe          BL       uart_putchar
0026e8  210a              MOVS     r1,#0xa
0026ea  4825              LDR      r0,|L1.10112|
0026ec  f7fffffe          BL       uart_putchar
0026f0  210a              MOVS     r1,#0xa
0026f2  4823              LDR      r0,|L1.10112|
0026f4  f7fffffe          BL       uart_putchar
0026f8  210a              MOVS     r1,#0xa
0026fa  4821              LDR      r0,|L1.10112|
0026fc  f7fffffe          BL       uart_putchar
002700  210a              MOVS     r1,#0xa
002702  481f              LDR      r0,|L1.10112|
002704  f7fffffe          BL       uart_putchar
002708  210a              MOVS     r1,#0xa
00270a  481d              LDR      r0,|L1.10112|
00270c  f7fffffe          BL       uart_putchar
002710  210a              MOVS     r1,#0xa
002712  481b              LDR      r0,|L1.10112|
002714  f7fffffe          BL       uart_putchar
002718  210a              MOVS     r1,#0xa
00271a  4819              LDR      r0,|L1.10112|
00271c  f7fffffe          BL       uart_putchar
002720  210a              MOVS     r1,#0xa
002722  4817              LDR      r0,|L1.10112|
002724  f7fffffe          BL       uart_putchar
002728  210a              MOVS     r1,#0xa
00272a  4815              LDR      r0,|L1.10112|
00272c  f7fffffe          BL       uart_putchar
002730  210a              MOVS     r1,#0xa
002732  4813              LDR      r0,|L1.10112|
002734  f7fffffe          BL       uart_putchar
002738  210a              MOVS     r1,#0xa
00273a  4811              LDR      r0,|L1.10112|
00273c  f7fffffe          BL       uart_putchar
002740  210a              MOVS     r1,#0xa
002742  480f              LDR      r0,|L1.10112|
002744  f7fffffe          BL       uart_putchar
002748  210a              MOVS     r1,#0xa
00274a  480d              LDR      r0,|L1.10112|
00274c  f7fffffe          BL       uart_putchar
002750  210a              MOVS     r1,#0xa
002752  480b              LDR      r0,|L1.10112|
002754  f7fffffe          BL       uart_putchar
002758  210a              MOVS     r1,#0xa
00275a  4809              LDR      r0,|L1.10112|
00275c  f7fffffe          BL       uart_putchar
002760  210a              MOVS     r1,#0xa
002762  4807              LDR      r0,|L1.10112|
002764  f7fffffe          BL       uart_putchar
002768  210a              MOVS     r1,#0xa
00276a  4805              LDR      r0,|L1.10112|
00276c  f7fffffe          BL       uart_putchar
002770  210a              MOVS     r1,#0xa
002772  4803              LDR      r0,|L1.10112|
002774  f7fffffe          BL       uart_putchar
002778  210a              MOVS     r1,#0xa
00277a  4801              LDR      r0,|L1.10112|
00277c  e030              B        |L1.10208|
00277e  0000              DCW      0x0000
                  |L1.10112|
                          DCD      0x4006b000
                  |L1.10116|
                          DCD      ||.text||+0x8fc
                  |L1.10120|
                          DCD      uart_string_gsm
                  |L1.10124|
                          DCD      tout
                  |L1.10128|
                          DCD      data
                  |L1.10132|
                          DCD      stcond1
                  |L1.10136|
                          DCD      con1d
                  |L1.10140|
                          DCD      cond
                  |L1.10144|
                          DCD      0x00001388
                  |L1.10148|
0027a4  0a00              DCB      "\n",0
0027a6  00                DCB      0
0027a7  00                DCB      0
                  |L1.10152|
                          DCD      len
                  |L1.10156|
                          DCD      ||k2||
                  |L1.10160|
                          DCD      k
                  |L1.10164|
                          DCD      ||.text||+0x474
                  |L1.10168|
                          DCD      stcond2
                  |L1.10172|
                          DCD      ||.text||+0xde4
                  |L1.10176|
                          DCD      stcond3
                  |L1.10180|
                          DCD      stcond4
                  |L1.10184|
                          DCD      flagch
                  |L1.10188|
                          DCD      temp
                  |L1.10192|
                          DCD      int_erval
                  |L1.10196|
                          DCD      at_
                  |L1.10200|
                          DCD      drive
                  |L1.10204|
0027dc  3e00              DCB      ">",0
0027de  00                DCB      0
0027df  00                DCB      0
                  |L1.10208|
0027e0  f7fffffe          BL       uart_putchar
0027e4  210a              MOVS     r1,#0xa
0027e6  48fe              LDR      r0,|L1.11232|
0027e8  f7fffffe          BL       uart_putchar
0027ec  210a              MOVS     r1,#0xa
0027ee  48fc              LDR      r0,|L1.11232|
0027f0  f7fffffe          BL       uart_putchar
0027f4  210a              MOVS     r1,#0xa
0027f6  48fa              LDR      r0,|L1.11232|
0027f8  f7fffffe          BL       uart_putchar
0027fc  210a              MOVS     r1,#0xa
0027fe  48f8              LDR      r0,|L1.11232|
002800  f7fffffe          BL       uart_putchar
002804  210a              MOVS     r1,#0xa
002806  48f6              LDR      r0,|L1.11232|
002808  f7fffffe          BL       uart_putchar
00280c  210a              MOVS     r1,#0xa
00280e  48f4              LDR      r0,|L1.11232|
002810  f7fffffe          BL       uart_putchar
002814  210a              MOVS     r1,#0xa
002816  48f2              LDR      r0,|L1.11232|
002818  f7fffffe          BL       uart_putchar
00281c  210a              MOVS     r1,#0xa
00281e  48f0              LDR      r0,|L1.11232|
002820  f7fffffe          BL       uart_putchar
002824  210a              MOVS     r1,#0xa
002826  48ee              LDR      r0,|L1.11232|
002828  f7fffffe          BL       uart_putchar
00282c  210a              MOVS     r1,#0xa
00282e  48ec              LDR      r0,|L1.11232|
002830  f7fffffe          BL       uart_putchar
002834  210a              MOVS     r1,#0xa
002836  48ea              LDR      r0,|L1.11232|
002838  f7fffffe          BL       uart_putchar
;;;874    									//memset(data,0,1000);
;;;875    														//timer counts to wait for characters in uart 1 									
;;;876    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00283c  bf00              NOP      
                  |L1.10302|
00283e  49e9              LDR      r1,|L1.11236|
002840  48e9              LDR      r0,|L1.11240|
002842  f7fffffe          BL       strstr
002846  2800              CMP      r0,#0
002848  d10a              BNE      |L1.10336|
00284a  49e6              LDR      r1,|L1.11236|
00284c  398c              SUBS     r1,r1,#0x8c
00284e  48e6              LDR      r0,|L1.11240|
002850  f7fffffe          BL       strstr
002854  2800              CMP      r0,#0
002856  d103              BNE      |L1.10336|
002858  48e4              LDR      r0,|L1.11244|
00285a  6800              LDR      r0,[r0,#0]  ; tout
00285c  2805              CMP      r0,#5
00285e  ddee              BLE      |L1.10302|
                  |L1.10336|
;;;877    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;878    									}
;;;879    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002860  f7fffffe          BL       clear
;;;880    									//clear();
;;;881    									memset(data,0,strlen(data));
002864  48e2              LDR      r0,|L1.11248|
002866  f7fffffe          BL       strlen
00286a  4604              MOV      r4,r0
00286c  4621              MOV      r1,r4
00286e  48e0              LDR      r0,|L1.11248|
002870  f7fffffe          BL       __aeabi_memclr
;;;882    									clear();
002874  f7fffffe          BL       clear
;;;883    
;;;884    								
;;;885    	
;;;886    	
;;;887    	
;;;888    	//	log_it();		
;;;889    		memset(data,0,strlen(data));	
002878  48dd              LDR      r0,|L1.11248|
00287a  f7fffffe          BL       strlen
00287e  4604              MOV      r4,r0
002880  4621              MOV      r1,r4
002882  48db              LDR      r0,|L1.11248|
002884  f7fffffe          BL       __aeabi_memclr
;;;890    									GPS_COLLECT();
002888  f7fffffe          BL       GPS_COLLECT
;;;891    									strcat(data,"CH\n");	
00288c  49d5              LDR      r1,|L1.11236|
00288e  3944              SUBS     r1,r1,#0x44
002890  48d7              LDR      r0,|L1.11248|
002892  f7fffffe          BL       strcat
;;;892    				
;;;893    					   	if(flagch!=1){
002896  48d7              LDR      r0,|L1.11252|
002898  6800              LDR      r0,[r0,#0]  ; flagch
00289a  2801              CMP      r0,#1
00289c  d009              BEQ      |L1.10418|
;;;894    							temp=int_erval;				
00289e  48d6              LDR      r0,|L1.11256|
0028a0  6800              LDR      r0,[r0,#0]  ; int_erval
0028a2  49d6              LDR      r1,|L1.11260|
0028a4  6008              STR      r0,[r1,#0]  ; temp
;;;895    							int_erval=4;
0028a6  2004              MOVS     r0,#4
0028a8  49d3              LDR      r1,|L1.11256|
0028aa  6008              STR      r0,[r1,#0]  ; int_erval
;;;896    							flagch=1;}
0028ac  2001              MOVS     r0,#1
0028ae  49d1              LDR      r1,|L1.11252|
0028b0  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.10418|
;;;897    							clear();	
0028b2  f7fffffe          BL       clear
;;;898    
;;;899    
;;;900    //**************************************tcp_initialization();********************************//
;;;901    
;;;902    	
;;;903    msg_sim800(); 
0028b6  f7fffffe          BL       msg_sim800
;;;904    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0028ba  2005              MOVS     r0,#5
0028bc  4bc9              LDR      r3,|L1.11236|
0028be  3b8c              SUBS     r3,r3,#0x8c
0028c0  461a              MOV      r2,r3
0028c2  3278              ADDS     r2,r2,#0x78
0028c4  a1ce              ADR      r1,|L1.11264|
0028c6  9000              STR      r0,[sp,#0]
0028c8  4610              MOV      r0,r2
0028ca  3020              ADDS     r0,r0,#0x20
0028cc  f7fffffe          BL       send_GSM
;;;905    delay(100);
0028d0  2064              MOVS     r0,#0x64
0028d2  f7fffffe          BL       delay
;;;906    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0028d6  2004              MOVS     r0,#4
0028d8  4bc2              LDR      r3,|L1.11236|
0028da  3b8c              SUBS     r3,r3,#0x8c
0028dc  461a              MOV      r2,r3
0028de  32a8              ADDS     r2,r2,#0xa8
0028e0  a1c7              ADR      r1,|L1.11264|
0028e2  9000              STR      r0,[sp,#0]
0028e4  4610              MOV      r0,r2
0028e6  3014              ADDS     r0,r0,#0x14
0028e8  f7fffffe          BL       send_GSM
;;;907    GPS_COLLECT2();
0028ec  f7fffffe          BL       GPS_COLLECT2
;;;908    strcat(data,"CH\n");		
0028f0  49bc              LDR      r1,|L1.11236|
0028f2  3944              SUBS     r1,r1,#0x44
0028f4  48be              LDR      r0,|L1.11248|
0028f6  f7fffffe          BL       strcat
;;;909    GPS_COLLECT2();
0028fa  f7fffffe          BL       GPS_COLLECT2
;;;910    strcat(data,"CH\n");	
0028fe  49b9              LDR      r1,|L1.11236|
002900  3944              SUBS     r1,r1,#0x44
002902  48bb              LDR      r0,|L1.11248|
002904  f7fffffe          BL       strcat
;;;911    GPS_COLLECT2();
002908  f7fffffe          BL       GPS_COLLECT2
;;;912    strcat(data,"CH\n");
00290c  49b5              LDR      r1,|L1.11236|
00290e  3944              SUBS     r1,r1,#0x44
002910  48b7              LDR      r0,|L1.11248|
002912  f7fffffe          BL       strcat
;;;913    cond201=(strstr(uart_string_gsm, "OK"));
002916  a1ba              ADR      r1,|L1.11264|
002918  48b3              LDR      r0,|L1.11240|
00291a  f7fffffe          BL       strstr
00291e  49b9              LDR      r1,|L1.11268|
002920  6008              STR      r0,[r1,#0]  ; cond201
;;;914    cond200=(strstr(uart_string_gsm, "ERROR"));
002922  49b0              LDR      r1,|L1.11236|
002924  398c              SUBS     r1,r1,#0x8c
002926  48b0              LDR      r0,|L1.11240|
002928  f7fffffe          BL       strstr
00292c  49b6              LDR      r1,|L1.11272|
00292e  6008              STR      r0,[r1,#0]  ; cond200
;;;915    if((!(cond201|| cond200 ))  && sleep_flag != 1)
002930  48b4              LDR      r0,|L1.11268|
002932  6800              LDR      r0,[r0,#0]  ; cond201
002934  2800              CMP      r0,#0
                  |L1.10550|
002936  d17d              BNE      |L1.10804|
002938  4608              MOV      r0,r1
00293a  6800              LDR      r0,[r0,#0]  ; cond200
00293c  2800              CMP      r0,#0
00293e  d1fa              BNE      |L1.10550|
002940  48b2              LDR      r0,|L1.11276|
002942  6800              LDR      r0,[r0,#0]  ; sleep_flag
002944  2801              CMP      r0,#1
002946  d075              BEQ      |L1.10804|
;;;916    {
;;;917    delay(100);
002948  2064              MOVS     r0,#0x64
00294a  f7fffffe          BL       delay
;;;918    clear();//memset(uart_string_gsm,0,5000);
00294e  f7fffffe          BL       clear
;;;919    memset(at_,0,100);
002952  2164              MOVS     r1,#0x64
002954  48ae              LDR      r0,|L1.11280|
002956  f7fffffe          BL       __aeabi_memclr
;;;920    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00295a  48a5              LDR      r0,|L1.11248|
00295c  f7fffffe          BL       strlen
002960  1c44              ADDS     r4,r0,#1
002962  4623              MOV      r3,r4
002964  4aab              LDR      r2,|L1.11284|
002966  499f              LDR      r1,|L1.11236|
002968  3938              SUBS     r1,r1,#0x38
00296a  48a9              LDR      r0,|L1.11280|
00296c  f7fffffe          BL       __2sprintf
;;;921    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002970  2005              MOVS     r0,#5
002972  4b9c              LDR      r3,|L1.11236|
002974  3b8c              SUBS     r3,r3,#0x8c
002976  461a              MOV      r2,r3
002978  3278              ADDS     r2,r2,#0x78
00297a  a1a7              ADR      r1,|L1.11288|
00297c  9000              STR      r0,[sp,#0]
00297e  48a4              LDR      r0,|L1.11280|
002980  f7fffffe          BL       send_SD
;;;922    clear();	
002984  f7fffffe          BL       clear
;;;923    k2=0;									//string array counter for uart 1
002988  2000              MOVS     r0,#0
00298a  49a4              LDR      r1,|L1.11292|
00298c  6008              STR      r0,[r1,#0]  ; k2
;;;924    tout=0;	
00298e  4997              LDR      r1,|L1.11244|
002990  6008              STR      r0,[r1,#0]  ; tout
;;;925    for(k=0;k<strlen(data);k++)
002992  49a3              LDR      r1,|L1.11296|
002994  6008              STR      r0,[r1,#0]  ; k
002996  e00b              B        |L1.10672|
                  |L1.10648|
;;;926    {
;;;927    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002998  4895              LDR      r0,|L1.11248|
00299a  4aa1              LDR      r2,|L1.11296|
00299c  6812              LDR      r2,[r2,#0]  ; k
00299e  5c81              LDRB     r1,[r0,r2]
0029a0  488f              LDR      r0,|L1.11232|
0029a2  f7fffffe          BL       uart_putchar
0029a6  489e              LDR      r0,|L1.11296|
0029a8  6800              LDR      r0,[r0,#0]            ;925  ; k
0029aa  1c40              ADDS     r0,r0,#1              ;925
0029ac  499c              LDR      r1,|L1.11296|
0029ae  6008              STR      r0,[r1,#0]            ;925  ; k
                  |L1.10672|
0029b0  488f              LDR      r0,|L1.11248|
0029b2  f7fffffe          BL       strlen
0029b6  499a              LDR      r1,|L1.11296|
0029b8  6809              LDR      r1,[r1,#0]            ;925  ; k
0029ba  4288              CMP      r0,r1                 ;925
0029bc  d8ec              BHI      |L1.10648|
;;;928    }	
;;;929    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0029be  210a              MOVS     r1,#0xa
0029c0  4887              LDR      r0,|L1.11232|
0029c2  f7fffffe          BL       uart_putchar
0029c6  210a              MOVS     r1,#0xa
0029c8  4885              LDR      r0,|L1.11232|
0029ca  f7fffffe          BL       uart_putchar
0029ce  210a              MOVS     r1,#0xa
0029d0  4883              LDR      r0,|L1.11232|
0029d2  f7fffffe          BL       uart_putchar
0029d6  210a              MOVS     r1,#0xa
0029d8  4881              LDR      r0,|L1.11232|
0029da  f7fffffe          BL       uart_putchar
0029de  210a              MOVS     r1,#0xa
0029e0  487f              LDR      r0,|L1.11232|
0029e2  f7fffffe          BL       uart_putchar
0029e6  210a              MOVS     r1,#0xa
0029e8  487d              LDR      r0,|L1.11232|
0029ea  f7fffffe          BL       uart_putchar
0029ee  210a              MOVS     r1,#0xa
0029f0  487b              LDR      r0,|L1.11232|
0029f2  f7fffffe          BL       uart_putchar
0029f6  210a              MOVS     r1,#0xa
0029f8  4879              LDR      r0,|L1.11232|
0029fa  f7fffffe          BL       uart_putchar
0029fe  210a              MOVS     r1,#0xa
002a00  4877              LDR      r0,|L1.11232|
002a02  f7fffffe          BL       uart_putchar
002a06  210a              MOVS     r1,#0xa
002a08  4875              LDR      r0,|L1.11232|
002a0a  f7fffffe          BL       uart_putchar
002a0e  210a              MOVS     r1,#0xa
002a10  4873              LDR      r0,|L1.11232|
002a12  f7fffffe          BL       uart_putchar
002a16  210a              MOVS     r1,#0xa
002a18  4871              LDR      r0,|L1.11232|
002a1a  f7fffffe          BL       uart_putchar
002a1e  210a              MOVS     r1,#0xa
002a20  486f              LDR      r0,|L1.11232|
002a22  f7fffffe          BL       uart_putchar
002a26  210a              MOVS     r1,#0xa
002a28  486d              LDR      r0,|L1.11232|
002a2a  f7fffffe          BL       uart_putchar
002a2e  210a              MOVS     r1,#0xa
002a30  486b              LDR      r0,|L1.11232|
002a32  e000              B        |L1.10806|
                  |L1.10804|
002a34  e0d3              B        |L1.11230|
                  |L1.10806|
002a36  f7fffffe          BL       uart_putchar
002a3a  210a              MOVS     r1,#0xa
002a3c  4868              LDR      r0,|L1.11232|
002a3e  f7fffffe          BL       uart_putchar
002a42  210a              MOVS     r1,#0xa
002a44  4866              LDR      r0,|L1.11232|
002a46  f7fffffe          BL       uart_putchar
002a4a  210a              MOVS     r1,#0xa
002a4c  4864              LDR      r0,|L1.11232|
002a4e  f7fffffe          BL       uart_putchar
002a52  210a              MOVS     r1,#0xa
002a54  4862              LDR      r0,|L1.11232|
002a56  f7fffffe          BL       uart_putchar
002a5a  210a              MOVS     r1,#0xa
002a5c  4860              LDR      r0,|L1.11232|
002a5e  f7fffffe          BL       uart_putchar
002a62  210a              MOVS     r1,#0xa
002a64  485e              LDR      r0,|L1.11232|
002a66  f7fffffe          BL       uart_putchar
002a6a  210a              MOVS     r1,#0xa
002a6c  485c              LDR      r0,|L1.11232|
002a6e  f7fffffe          BL       uart_putchar
002a72  210a              MOVS     r1,#0xa
002a74  485a              LDR      r0,|L1.11232|
002a76  f7fffffe          BL       uart_putchar
002a7a  210a              MOVS     r1,#0xa
002a7c  4858              LDR      r0,|L1.11232|
002a7e  f7fffffe          BL       uart_putchar
002a82  210a              MOVS     r1,#0xa
002a84  4856              LDR      r0,|L1.11232|
002a86  f7fffffe          BL       uart_putchar
002a8a  210a              MOVS     r1,#0xa
002a8c  4854              LDR      r0,|L1.11232|
002a8e  f7fffffe          BL       uart_putchar
002a92  210a              MOVS     r1,#0xa
002a94  4852              LDR      r0,|L1.11232|
002a96  f7fffffe          BL       uart_putchar
002a9a  210a              MOVS     r1,#0xa
002a9c  4850              LDR      r0,|L1.11232|
002a9e  f7fffffe          BL       uart_putchar
002aa2  210a              MOVS     r1,#0xa
002aa4  484e              LDR      r0,|L1.11232|
002aa6  f7fffffe          BL       uart_putchar
002aaa  210a              MOVS     r1,#0xa
002aac  484c              LDR      r0,|L1.11232|
002aae  f7fffffe          BL       uart_putchar
002ab2  210a              MOVS     r1,#0xa
002ab4  484a              LDR      r0,|L1.11232|
002ab6  f7fffffe          BL       uart_putchar
002aba  210a              MOVS     r1,#0xa
002abc  4848              LDR      r0,|L1.11232|
002abe  f7fffffe          BL       uart_putchar
002ac2  210a              MOVS     r1,#0xa
002ac4  4846              LDR      r0,|L1.11232|
002ac6  f7fffffe          BL       uart_putchar
002aca  210a              MOVS     r1,#0xa
002acc  4844              LDR      r0,|L1.11232|
002ace  f7fffffe          BL       uart_putchar
002ad2  210a              MOVS     r1,#0xa
002ad4  4842              LDR      r0,|L1.11232|
002ad6  f7fffffe          BL       uart_putchar
002ada  210a              MOVS     r1,#0xa
002adc  4840              LDR      r0,|L1.11232|
002ade  f7fffffe          BL       uart_putchar
002ae2  210a              MOVS     r1,#0xa
002ae4  483e              LDR      r0,|L1.11232|
002ae6  f7fffffe          BL       uart_putchar
002aea  210a              MOVS     r1,#0xa
002aec  483c              LDR      r0,|L1.11232|
002aee  f7fffffe          BL       uart_putchar
002af2  210a              MOVS     r1,#0xa
002af4  483a              LDR      r0,|L1.11232|
002af6  f7fffffe          BL       uart_putchar
002afa  210a              MOVS     r1,#0xa
002afc  4838              LDR      r0,|L1.11232|
002afe  f7fffffe          BL       uart_putchar
002b02  210a              MOVS     r1,#0xa
002b04  4836              LDR      r0,|L1.11232|
002b06  f7fffffe          BL       uart_putchar
002b0a  210a              MOVS     r1,#0xa
002b0c  4834              LDR      r0,|L1.11232|
002b0e  f7fffffe          BL       uart_putchar
002b12  210a              MOVS     r1,#0xa
002b14  4832              LDR      r0,|L1.11232|
002b16  f7fffffe          BL       uart_putchar
002b1a  210a              MOVS     r1,#0xa
002b1c  4830              LDR      r0,|L1.11232|
002b1e  f7fffffe          BL       uart_putchar
002b22  210a              MOVS     r1,#0xa
002b24  482e              LDR      r0,|L1.11232|
002b26  f7fffffe          BL       uart_putchar
002b2a  210a              MOVS     r1,#0xa
002b2c  482c              LDR      r0,|L1.11232|
002b2e  f7fffffe          BL       uart_putchar
002b32  210a              MOVS     r1,#0xa
002b34  482a              LDR      r0,|L1.11232|
002b36  f7fffffe          BL       uart_putchar
002b3a  210a              MOVS     r1,#0xa
002b3c  4828              LDR      r0,|L1.11232|
002b3e  f7fffffe          BL       uart_putchar
002b42  210a              MOVS     r1,#0xa
002b44  4826              LDR      r0,|L1.11232|
002b46  f7fffffe          BL       uart_putchar
002b4a  210a              MOVS     r1,#0xa
002b4c  4824              LDR      r0,|L1.11232|
002b4e  f7fffffe          BL       uart_putchar
002b52  210a              MOVS     r1,#0xa
002b54  4822              LDR      r0,|L1.11232|
002b56  f7fffffe          BL       uart_putchar
002b5a  210a              MOVS     r1,#0xa
002b5c  4820              LDR      r0,|L1.11232|
002b5e  f7fffffe          BL       uart_putchar
002b62  210a              MOVS     r1,#0xa
002b64  481e              LDR      r0,|L1.11232|
002b66  f7fffffe          BL       uart_putchar
002b6a  210a              MOVS     r1,#0xa
002b6c  481c              LDR      r0,|L1.11232|
002b6e  f7fffffe          BL       uart_putchar
002b72  210a              MOVS     r1,#0xa
002b74  481a              LDR      r0,|L1.11232|
002b76  f7fffffe          BL       uart_putchar
002b7a  210a              MOVS     r1,#0xa
002b7c  4818              LDR      r0,|L1.11232|
002b7e  f7fffffe          BL       uart_putchar
002b82  210a              MOVS     r1,#0xa
002b84  4816              LDR      r0,|L1.11232|
002b86  f7fffffe          BL       uart_putchar
;;;930    									//memset(data,0,1000);
;;;931    														//timer counts to wait for characters in uart 1 									
;;;932    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002b8a  bf00              NOP      
                  |L1.11148|
002b8c  4915              LDR      r1,|L1.11236|
002b8e  4816              LDR      r0,|L1.11240|
002b90  f7fffffe          BL       strstr
002b94  2800              CMP      r0,#0
002b96  d10a              BNE      |L1.11182|
002b98  4912              LDR      r1,|L1.11236|
002b9a  398c              SUBS     r1,r1,#0x8c
002b9c  4812              LDR      r0,|L1.11240|
002b9e  f7fffffe          BL       strstr
002ba2  2800              CMP      r0,#0
002ba4  d103              BNE      |L1.11182|
002ba6  4811              LDR      r0,|L1.11244|
002ba8  6800              LDR      r0,[r0,#0]  ; tout
002baa  2805              CMP      r0,#5
002bac  ddee              BLE      |L1.11148|
                  |L1.11182|
;;;933    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;934    									}
;;;935    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002bae  f7fffffe          BL       clear
;;;936    									//clear();
;;;937    									memset(data,0,strlen(data));
002bb2  480f              LDR      r0,|L1.11248|
002bb4  f7fffffe          BL       strlen
002bb8  4604              MOV      r4,r0
002bba  4621              MOV      r1,r4
002bbc  480c              LDR      r0,|L1.11248|
002bbe  f7fffffe          BL       __aeabi_memclr
;;;938    									clear();
002bc2  f7fffffe          BL       clear
;;;939    									RESET_OFF;delay(100);
002bc6  2020              MOVS     r0,#0x20
002bc8  4916              LDR      r1,|L1.11300|
002bca  6088              STR      r0,[r1,#8]
002bcc  2064              MOVS     r0,#0x64
002bce  f7fffffe          BL       delay
;;;940    									RESET_ON;delay(100);		
002bd2  2020              MOVS     r0,#0x20
002bd4  4913              LDR      r1,|L1.11300|
002bd6  6048              STR      r0,[r1,#4]
002bd8  2064              MOVS     r0,#0x64
002bda  f7fffffe          BL       delay
                  |L1.11230|
;;;941    }
;;;942    	
;;;943    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
002bde  e023              B        |L1.11304|
                  |L1.11232|
                          DCD      0x4006b000
                  |L1.11236|
                          DCD      ||.text||+0x8fc
                  |L1.11240|
                          DCD      uart_string_gsm
                  |L1.11244|
                          DCD      tout
                  |L1.11248|
                          DCD      data
                  |L1.11252|
                          DCD      flagch
                  |L1.11256|
                          DCD      int_erval
                  |L1.11260|
                          DCD      temp
                  |L1.11264|
002c00  4f4b00            DCB      "OK",0
002c03  00                DCB      0
                  |L1.11268|
                          DCD      cond201
                  |L1.11272|
                          DCD      cond200
                  |L1.11276|
                          DCD      sleep_flag
                  |L1.11280|
                          DCD      at_
                  |L1.11284|
                          DCD      drive
                  |L1.11288|
002c18  3e00              DCB      ">",0
002c1a  00                DCB      0
002c1b  00                DCB      0
                  |L1.11292|
                          DCD      ||k2||
                  |L1.11296|
                          DCD      k
                  |L1.11300|
                          DCD      0x400ff080
                  |L1.11304|
002c28  2004              MOVS     r0,#4
002c2a  4bfd              LDR      r3,|L1.12320|
002c2c  4afd              LDR      r2,|L1.12324|
002c2e  a1fe              ADR      r1,|L1.12328|
002c30  9000              STR      r0,[sp,#0]
002c32  4618              MOV      r0,r3
002c34  300c              ADDS     r0,r0,#0xc
002c36  f7fffffe          BL       send_GSM
;;;944    GPS_COLLECT2();
002c3a  f7fffffe          BL       GPS_COLLECT2
;;;945    strcat(data,"CH\n");	
002c3e  49f9              LDR      r1,|L1.12324|
002c40  3930              SUBS     r1,r1,#0x30
002c42  48fa              LDR      r0,|L1.12332|
002c44  f7fffffe          BL       strcat
;;;946    memset(at_,0,100);
002c48  2164              MOVS     r1,#0x64
002c4a  48f9              LDR      r0,|L1.12336|
002c4c  f7fffffe          BL       __aeabi_memclr
;;;947    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
002c50  4af8              LDR      r2,|L1.12340|
002c52  49f3              LDR      r1,|L1.12320|
002c54  3120              ADDS     r1,r1,#0x20
002c56  48f6              LDR      r0,|L1.12336|
002c58  f7fffffe          BL       __2sprintf
;;;948    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
002c5c  48f6              LDR      r0,|L1.12344|
002c5e  6800              LDR      r0,[r0,#0]  ; tmeout
002c60  4bef              LDR      r3,|L1.12320|
002c62  4af0              LDR      r2,|L1.12324|
002c64  a1f0              ADR      r1,|L1.12328|
002c66  9000              STR      r0,[sp,#0]
002c68  48f1              LDR      r0,|L1.12336|
002c6a  f7fffffe          BL       send_GSM
;;;949    msg_sim800(); 
002c6e  f7fffffe          BL       msg_sim800
;;;950    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
002c72  2004              MOVS     r0,#4
002c74  4beb              LDR      r3,|L1.12324|
002c76  3b5c              SUBS     r3,r3,#0x5c
002c78  4aea              LDR      r2,|L1.12324|
002c7a  a1eb              ADR      r1,|L1.12328|
002c7c  9000              STR      r0,[sp,#0]
002c7e  48e8              LDR      r0,|L1.12320|
002c80  3038              ADDS     r0,r0,#0x38
002c82  f7fffffe          BL       send_GSM
;;;951    GPS_COLLECT2();
002c86  f7fffffe          BL       GPS_COLLECT2
;;;952    strcat(data,"CH\n");	
002c8a  49e6              LDR      r1,|L1.12324|
002c8c  3930              SUBS     r1,r1,#0x30
002c8e  48e7              LDR      r0,|L1.12332|
002c90  f7fffffe          BL       strcat
;;;953    GPS_COLLECT2();
002c94  f7fffffe          BL       GPS_COLLECT2
;;;954    strcat(data,"CH\n");	
002c98  49e2              LDR      r1,|L1.12324|
002c9a  3930              SUBS     r1,r1,#0x30
002c9c  48e3              LDR      r0,|L1.12332|
002c9e  f7fffffe          BL       strcat
;;;955    
;;;956    
;;;957    msg_sim800(); 
002ca2  f7fffffe          BL       msg_sim800
;;;958    GPS_COLLECT2();
002ca6  f7fffffe          BL       GPS_COLLECT2
;;;959    strcat(data,"CH\n");	
002caa  49de              LDR      r1,|L1.12324|
002cac  3930              SUBS     r1,r1,#0x30
002cae  48df              LDR      r0,|L1.12332|
002cb0  f7fffffe          BL       strcat
;;;960    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
002cb4  f7fffffe          BL       clear
002cb8  48d9              LDR      r0,|L1.12320|
002cba  3048              ADDS     r0,r0,#0x48
002cbc  f7fffffe          BL       send_modem
002cc0  f7fffffe          BL       clear
;;;961    					delay(20);
002cc4  2014              MOVS     r0,#0x14
002cc6  f7fffffe          BL       delay
;;;962    
;;;963    
;;;964    msg_sim800(); 
002cca  f7fffffe          BL       msg_sim800
;;;965    
;;;966    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
002cce  4bdb              LDR      r3,|L1.12348|
002cd0  4adb              LDR      r2,|L1.12352|
002cd2  49d3              LDR      r1,|L1.12320|
002cd4  3160              ADDS     r1,r1,#0x60
002cd6  48d6              LDR      r0,|L1.12336|
002cd8  f7fffffe          BL       __2sprintf
;;;967    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
002cdc  48d6              LDR      r0,|L1.12344|
002cde  6800              LDR      r0,[r0,#0]  ; tmeout
002ce0  4bcf              LDR      r3,|L1.12320|
002ce2  4ad0              LDR      r2,|L1.12324|
002ce4  3a78              SUBS     r2,r2,#0x78
002ce6  4619              MOV      r1,r3
002ce8  3180              ADDS     r1,r1,#0x80
002cea  9000              STR      r0,[sp,#0]
002cec  48d0              LDR      r0,|L1.12336|
002cee  f7fffffe          BL       send_GSM
;;;968    						clear();
002cf2  f7fffffe          BL       clear
;;;969    						
;;;970    						
;;;971    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
002cf6  48d0              LDR      r0,|L1.12344|
002cf8  6800              LDR      r0,[r0,#0]  ; tmeout
002cfa  4bc9              LDR      r3,|L1.12320|
002cfc  3388              ADDS     r3,r3,#0x88
002cfe  4ac9              LDR      r2,|L1.12324|
002d00  3a78              SUBS     r2,r2,#0x78
002d02  a1d0              ADR      r1,|L1.12356|
002d04  9000              STR      r0,[sp,#0]
002d06  4618              MOV      r0,r3
002d08  3010              ADDS     r0,r0,#0x10
002d0a  f7fffffe          BL       send_GSM
;;;972    //**************************************tcp_initialization ends******************************//							
;;;973    									
;;;974    						clear();		
002d0e  f7fffffe          BL       clear
;;;975    						cond=mystrstr(uart_string_gsm,'>');
002d12  213e              MOVS     r1,#0x3e
002d14  48cc              LDR      r0,|L1.12360|
002d16  f7fffffe          BL       mystrstr
002d1a  49cc              LDR      r1,|L1.12364|
002d1c  7008              STRB     r0,[r1,#0]
;;;976    								if(cond)	
002d1e  4608              MOV      r0,r1
002d20  7800              LDRB     r0,[r0,#0]  ; cond
002d22  2800              CMP      r0,#0
002d24  d07e              BEQ      |L1.11812|
;;;977    								{	
;;;978    
;;;979    									clear();
002d26  f7fffffe          BL       clear
;;;980    									memset(uart_string_gsm,0,5000);
002d2a  49c9              LDR      r1,|L1.12368|
002d2c  48c6              LDR      r0,|L1.12360|
002d2e  f7fffffe          BL       __aeabi_memclr
;;;981    									strcat(data,"\n");
002d32  a1c8              ADR      r1,|L1.12372|
002d34  48bd              LDR      r0,|L1.12332|
002d36  f7fffffe          BL       strcat
;;;982    									len=strlen(data);
002d3a  48bc              LDR      r0,|L1.12332|
002d3c  f7fffffe          BL       strlen
002d40  49c5              LDR      r1,|L1.12376|
002d42  6008              STR      r0,[r1,#0]  ; len
;;;983    									tout=0;
002d44  2000              MOVS     r0,#0
002d46  49c5              LDR      r1,|L1.12380|
002d48  6008              STR      r0,[r1,#0]  ; tout
;;;984    									k2=0;
002d4a  49c5              LDR      r1,|L1.12384|
002d4c  6008              STR      r0,[r1,#0]  ; k2
;;;985    									for(k=0;k<len;k++)
002d4e  49c5              LDR      r1,|L1.12388|
002d50  6008              STR      r0,[r1,#0]  ; k
002d52  e00b              B        |L1.11628|
                  |L1.11604|
;;;986    									{
;;;987    										uart_putchar(UART1_BASE_PTR, data[k]);
002d54  48b5              LDR      r0,|L1.12332|
002d56  4ac3              LDR      r2,|L1.12388|
002d58  6812              LDR      r2,[r2,#0]  ; k
002d5a  5c81              LDRB     r1,[r0,r2]
002d5c  48c2              LDR      r0,|L1.12392|
002d5e  f7fffffe          BL       uart_putchar
002d62  48c0              LDR      r0,|L1.12388|
002d64  6800              LDR      r0,[r0,#0]            ;985  ; k
002d66  1c40              ADDS     r0,r0,#1              ;985
002d68  49be              LDR      r1,|L1.12388|
002d6a  6008              STR      r0,[r1,#0]            ;985  ; k
                  |L1.11628|
002d6c  48bd              LDR      r0,|L1.12388|
002d6e  6800              LDR      r0,[r0,#0]            ;985  ; k
002d70  49b9              LDR      r1,|L1.12376|
002d72  6809              LDR      r1,[r1,#0]            ;985  ; len
002d74  4288              CMP      r0,r1                 ;985
002d76  dbed              BLT      |L1.11604|
;;;988    									}uart_putchar(UART1_BASE_PTR, 0x1A);
002d78  211a              MOVS     r1,#0x1a
002d7a  48bb              LDR      r0,|L1.12392|
002d7c  f7fffffe          BL       uart_putchar
;;;989    									do
002d80  bf00              NOP      
                  |L1.11650|
;;;990    																{stcond1=strstr(uart_string_gsm,"SEND OK");
002d82  49ba              LDR      r1,|L1.12396|
002d84  48b0              LDR      r0,|L1.12360|
002d86  f7fffffe          BL       strstr
002d8a  49b9              LDR      r1,|L1.12400|
002d8c  6008              STR      r0,[r1,#0]  ; stcond1
;;;991    																	stcond2=strstr(uart_string_gsm, "ERROR");
002d8e  49a5              LDR      r1,|L1.12324|
002d90  3978              SUBS     r1,r1,#0x78
002d92  48ad              LDR      r0,|L1.12360|
002d94  f7fffffe          BL       strstr
002d98  49b6              LDR      r1,|L1.12404|
002d9a  6008              STR      r0,[r1,#0]  ; stcond2
;;;992    																		stcond3=strstr(uart_string_gsm, "FAIL");	
002d9c  49a0              LDR      r1,|L1.12320|
002d9e  3190              ADDS     r1,r1,#0x90
002da0  48a9              LDR      r0,|L1.12360|
002da2  f7fffffe          BL       strstr
002da6  49b4              LDR      r1,|L1.12408|
002da8  6008              STR      r0,[r1,#0]  ; stcond3
;;;993    																			stcond4=strstr(uart_string_gsm, "DEACT");	
002daa  499e              LDR      r1,|L1.12324|
002dac  395c              SUBS     r1,r1,#0x5c
002dae  48a6              LDR      r0,|L1.12360|
002db0  f7fffffe          BL       strstr
002db4  49b1              LDR      r1,|L1.12412|
002db6  6008              STR      r0,[r1,#0]  ; stcond4
;;;994    																	
;;;995    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
002db8  48ae              LDR      r0,|L1.12404|
002dba  6800              LDR      r0,[r0,#0]  ; stcond2
002dbc  2800              CMP      r0,#0
002dbe  d10f              BNE      |L1.11744|
002dc0  48ad              LDR      r0,|L1.12408|
002dc2  6800              LDR      r0,[r0,#0]  ; stcond3
002dc4  2800              CMP      r0,#0
002dc6  d10b              BNE      |L1.11744|
002dc8  4608              MOV      r0,r1
002dca  6800              LDR      r0,[r0,#0]  ; stcond4
002dcc  2800              CMP      r0,#0
002dce  d107              BNE      |L1.11744|
002dd0  48a7              LDR      r0,|L1.12400|
002dd2  6800              LDR      r0,[r0,#0]  ; stcond1
002dd4  2800              CMP      r0,#0
002dd6  d103              BNE      |L1.11744|
002dd8  48a0              LDR      r0,|L1.12380|
002dda  6800              LDR      r0,[r0,#0]  ; tout
002ddc  2804              CMP      r0,#4
002dde  ddd0              BLE      |L1.11650|
                  |L1.11744|
;;;996    																delay(10);clear();
002de0  200a              MOVS     r0,#0xa
002de2  f7fffffe          BL       delay
002de6  f7fffffe          BL       clear
;;;997    														uart_putchar(UART1_BASE_PTR,0x1A);
002dea  211a              MOVS     r1,#0x1a
002dec  489e              LDR      r0,|L1.12392|
002dee  f7fffffe          BL       uart_putchar
;;;998    												delay(10);
002df2  200a              MOVS     r0,#0xa
002df4  f7fffffe          BL       delay
;;;999    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002df8  211a              MOVS     r1,#0x1a
002dfa  489b              LDR      r0,|L1.12392|
002dfc  f7fffffe          BL       uart_putchar
002e00  211a              MOVS     r1,#0x1a
002e02  4899              LDR      r0,|L1.12392|
002e04  f7fffffe          BL       uart_putchar
002e08  211a              MOVS     r1,#0x1a
002e0a  4897              LDR      r0,|L1.12392|
002e0c  f7fffffe          BL       uart_putchar
;;;1000   						
;;;1001   
;;;1002   
;;;1003   									
;;;1004   															
;;;1005   															
;;;1006   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e10  211a              MOVS     r1,#0x1a
002e12  4895              LDR      r0,|L1.12392|
002e14  f7fffffe          BL       uart_putchar
002e18  f7fffffe          BL       clear
002e1c  200a              MOVS     r0,#0xa
002e1e  f7fffffe          BL       delay
;;;1007   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e22  e000              B        |L1.11814|
                  |L1.11812|
002e24  e195              B        |L1.12626|
                  |L1.11814|
002e26  211a              MOVS     r1,#0x1a
002e28  488f              LDR      r0,|L1.12392|
002e2a  f7fffffe          BL       uart_putchar
002e2e  f7fffffe          BL       clear
002e32  200a              MOVS     r0,#0xa
002e34  f7fffffe          BL       delay
;;;1008   															
;;;1009   														//qwe=strlen(uart_string_gsm);
;;;1010   														uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e38  211a              MOVS     r1,#0x1a
002e3a  488b              LDR      r0,|L1.12392|
002e3c  f7fffffe          BL       uart_putchar
002e40  f7fffffe          BL       clear
002e44  200a              MOVS     r0,#0xa
002e46  f7fffffe          BL       delay
;;;1011   								delay(50);
002e4a  2032              MOVS     r0,#0x32
002e4c  f7fffffe          BL       delay
;;;1012   								con1d=strstr(uart_string_gsm,"SEND OK");
002e50  4986              LDR      r1,|L1.12396|
002e52  487d              LDR      r0,|L1.12360|
002e54  f7fffffe          BL       strstr
002e58  4989              LDR      r1,|L1.12416|
002e5a  6008              STR      r0,[r1,#0]  ; con1d
;;;1013   								if(!con1d)
002e5c  4608              MOV      r0,r1
002e5e  6800              LDR      r0,[r0,#0]  ; con1d
002e60  2800              CMP      r0,#0
002e62  d17c              BNE      |L1.12126|
;;;1014   								{
;;;1015   									
;;;1016   									
;;;1017   	delay(100);
002e64  2064              MOVS     r0,#0x64
002e66  f7fffffe          BL       delay
;;;1018   		clear();//memset(uart_string_gsm,0,5000);
002e6a  f7fffffe          BL       clear
;;;1019   	
;;;1020   	memset(at_,0,100);
002e6e  2164              MOVS     r1,#0x64
002e70  486f              LDR      r0,|L1.12336|
002e72  f7fffffe          BL       __aeabi_memclr
;;;1021   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002e76  486d              LDR      r0,|L1.12332|
002e78  f7fffffe          BL       strlen
002e7c  1c44              ADDS     r4,r0,#1
002e7e  4623              MOV      r3,r4
002e80  4a80              LDR      r2,|L1.12420|
002e82  4968              LDR      r1,|L1.12324|
002e84  3924              SUBS     r1,r1,#0x24
002e86  486a              LDR      r0,|L1.12336|
002e88  f7fffffe          BL       __2sprintf
;;;1022   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002e8c  2005              MOVS     r0,#5
002e8e  4b65              LDR      r3,|L1.12324|
002e90  3b78              SUBS     r3,r3,#0x78
002e92  4a64              LDR      r2,|L1.12324|
002e94  a16b              ADR      r1,|L1.12356|
002e96  9000              STR      r0,[sp,#0]
002e98  4865              LDR      r0,|L1.12336|
002e9a  f7fffffe          BL       send_SD
;;;1023   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1024   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1025   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1026   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1027   //	}
;;;1028   	
;;;1029   clear();	
002e9e  f7fffffe          BL       clear
;;;1030   									k2=0;									//string array counter for uart 1
002ea2  2000              MOVS     r0,#0
002ea4  496e              LDR      r1,|L1.12384|
002ea6  6008              STR      r0,[r1,#0]  ; k2
;;;1031   									tout=0;	
002ea8  496c              LDR      r1,|L1.12380|
002eaa  6008              STR      r0,[r1,#0]  ; tout
;;;1032   		for(k=0;k<strlen(data);k++)
002eac  496d              LDR      r1,|L1.12388|
002eae  6008              STR      r0,[r1,#0]  ; k
002eb0  e00b              B        |L1.11978|
                  |L1.11954|
;;;1033   		{
;;;1034   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002eb2  485e              LDR      r0,|L1.12332|
002eb4  4a6b              LDR      r2,|L1.12388|
002eb6  6812              LDR      r2,[r2,#0]  ; k
002eb8  5c81              LDRB     r1,[r0,r2]
002eba  486b              LDR      r0,|L1.12392|
002ebc  f7fffffe          BL       uart_putchar
002ec0  4868              LDR      r0,|L1.12388|
002ec2  6800              LDR      r0,[r0,#0]            ;1032  ; k
002ec4  1c40              ADDS     r0,r0,#1              ;1032
002ec6  4967              LDR      r1,|L1.12388|
002ec8  6008              STR      r0,[r1,#0]            ;1032  ; k
                  |L1.11978|
002eca  4858              LDR      r0,|L1.12332|
002ecc  f7fffffe          BL       strlen
002ed0  4964              LDR      r1,|L1.12388|
002ed2  6809              LDR      r1,[r1,#0]            ;1032  ; k
002ed4  4288              CMP      r0,r1                 ;1032
002ed6  d8ec              BHI      |L1.11954|
;;;1035   		}	
;;;1036   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002ed8  210a              MOVS     r1,#0xa
002eda  4863              LDR      r0,|L1.12392|
002edc  f7fffffe          BL       uart_putchar
002ee0  210a              MOVS     r1,#0xa
002ee2  4861              LDR      r0,|L1.12392|
002ee4  f7fffffe          BL       uart_putchar
002ee8  210a              MOVS     r1,#0xa
002eea  485f              LDR      r0,|L1.12392|
002eec  f7fffffe          BL       uart_putchar
002ef0  210a              MOVS     r1,#0xa
002ef2  485d              LDR      r0,|L1.12392|
002ef4  f7fffffe          BL       uart_putchar
002ef8  210a              MOVS     r1,#0xa
002efa  485b              LDR      r0,|L1.12392|
002efc  f7fffffe          BL       uart_putchar
002f00  210a              MOVS     r1,#0xa
002f02  4859              LDR      r0,|L1.12392|
002f04  f7fffffe          BL       uart_putchar
002f08  210a              MOVS     r1,#0xa
002f0a  4857              LDR      r0,|L1.12392|
002f0c  f7fffffe          BL       uart_putchar
002f10  210a              MOVS     r1,#0xa
002f12  4855              LDR      r0,|L1.12392|
002f14  f7fffffe          BL       uart_putchar
002f18  210a              MOVS     r1,#0xa
002f1a  4853              LDR      r0,|L1.12392|
002f1c  f7fffffe          BL       uart_putchar
002f20  210a              MOVS     r1,#0xa
002f22  4851              LDR      r0,|L1.12392|
002f24  f7fffffe          BL       uart_putchar
002f28  210a              MOVS     r1,#0xa
002f2a  484f              LDR      r0,|L1.12392|
002f2c  f7fffffe          BL       uart_putchar
002f30  210a              MOVS     r1,#0xa
002f32  484d              LDR      r0,|L1.12392|
002f34  f7fffffe          BL       uart_putchar
002f38  210a              MOVS     r1,#0xa
002f3a  484b              LDR      r0,|L1.12392|
002f3c  f7fffffe          BL       uart_putchar
002f40  210a              MOVS     r1,#0xa
002f42  4849              LDR      r0,|L1.12392|
002f44  f7fffffe          BL       uart_putchar
002f48  210a              MOVS     r1,#0xa
002f4a  4847              LDR      r0,|L1.12392|
002f4c  f7fffffe          BL       uart_putchar
002f50  210a              MOVS     r1,#0xa
002f52  4845              LDR      r0,|L1.12392|
002f54  f7fffffe          BL       uart_putchar
002f58  210a              MOVS     r1,#0xa
002f5a  4843              LDR      r0,|L1.12392|
002f5c  e000              B        |L1.12128|
                  |L1.12126|
002f5e  e0f5              B        |L1.12620|
                  |L1.12128|
002f60  f7fffffe          BL       uart_putchar
002f64  210a              MOVS     r1,#0xa
002f66  4840              LDR      r0,|L1.12392|
002f68  f7fffffe          BL       uart_putchar
002f6c  210a              MOVS     r1,#0xa
002f6e  483e              LDR      r0,|L1.12392|
002f70  f7fffffe          BL       uart_putchar
002f74  210a              MOVS     r1,#0xa
002f76  483c              LDR      r0,|L1.12392|
002f78  f7fffffe          BL       uart_putchar
002f7c  210a              MOVS     r1,#0xa
002f7e  483a              LDR      r0,|L1.12392|
002f80  f7fffffe          BL       uart_putchar
002f84  210a              MOVS     r1,#0xa
002f86  4838              LDR      r0,|L1.12392|
002f88  f7fffffe          BL       uart_putchar
002f8c  210a              MOVS     r1,#0xa
002f8e  4836              LDR      r0,|L1.12392|
002f90  f7fffffe          BL       uart_putchar
002f94  210a              MOVS     r1,#0xa
002f96  4834              LDR      r0,|L1.12392|
002f98  f7fffffe          BL       uart_putchar
002f9c  210a              MOVS     r1,#0xa
002f9e  4832              LDR      r0,|L1.12392|
002fa0  f7fffffe          BL       uart_putchar
002fa4  210a              MOVS     r1,#0xa
002fa6  4830              LDR      r0,|L1.12392|
002fa8  f7fffffe          BL       uart_putchar
002fac  210a              MOVS     r1,#0xa
002fae  482e              LDR      r0,|L1.12392|
002fb0  f7fffffe          BL       uart_putchar
002fb4  210a              MOVS     r1,#0xa
002fb6  482c              LDR      r0,|L1.12392|
002fb8  f7fffffe          BL       uart_putchar
002fbc  210a              MOVS     r1,#0xa
002fbe  482a              LDR      r0,|L1.12392|
002fc0  f7fffffe          BL       uart_putchar
002fc4  210a              MOVS     r1,#0xa
002fc6  4828              LDR      r0,|L1.12392|
002fc8  f7fffffe          BL       uart_putchar
002fcc  210a              MOVS     r1,#0xa
002fce  4826              LDR      r0,|L1.12392|
002fd0  f7fffffe          BL       uart_putchar
002fd4  210a              MOVS     r1,#0xa
002fd6  4824              LDR      r0,|L1.12392|
002fd8  f7fffffe          BL       uart_putchar
002fdc  210a              MOVS     r1,#0xa
002fde  4822              LDR      r0,|L1.12392|
002fe0  f7fffffe          BL       uart_putchar
002fe4  210a              MOVS     r1,#0xa
002fe6  4820              LDR      r0,|L1.12392|
002fe8  f7fffffe          BL       uart_putchar
002fec  210a              MOVS     r1,#0xa
002fee  481e              LDR      r0,|L1.12392|
002ff0  f7fffffe          BL       uart_putchar
002ff4  210a              MOVS     r1,#0xa
002ff6  481c              LDR      r0,|L1.12392|
002ff8  f7fffffe          BL       uart_putchar
002ffc  210a              MOVS     r1,#0xa
002ffe  481a              LDR      r0,|L1.12392|
003000  f7fffffe          BL       uart_putchar
003004  210a              MOVS     r1,#0xa
003006  4818              LDR      r0,|L1.12392|
003008  f7fffffe          BL       uart_putchar
00300c  210a              MOVS     r1,#0xa
00300e  4816              LDR      r0,|L1.12392|
003010  f7fffffe          BL       uart_putchar
003014  210a              MOVS     r1,#0xa
003016  4814              LDR      r0,|L1.12392|
003018  f7fffffe          BL       uart_putchar
00301c  210a              MOVS     r1,#0xa
00301e  e033              B        |L1.12424|
                  |L1.12320|
                          DCD      ||.text||+0xd54
                  |L1.12324|
                          DCD      ||.text||+0x8e8
                  |L1.12328|
003028  4f4b00            DCB      "OK",0
00302b  00                DCB      0
                  |L1.12332|
                          DCD      data
                  |L1.12336|
                          DCD      at_
                  |L1.12340|
                          DCD      apn
                  |L1.12344|
                          DCD      tmeout
                  |L1.12348|
                          DCD      port
                  |L1.12352|
                          DCD      ||ip||
                  |L1.12356|
003044  3e00              DCB      ">",0
003046  00                DCB      0
003047  00                DCB      0
                  |L1.12360|
                          DCD      uart_string_gsm
                  |L1.12364|
                          DCD      cond
                  |L1.12368|
                          DCD      0x00001388
                  |L1.12372|
003054  0a00              DCB      "\n",0
003056  00                DCB      0
003057  00                DCB      0
                  |L1.12376|
                          DCD      len
                  |L1.12380|
                          DCD      tout
                  |L1.12384|
                          DCD      ||k2||
                  |L1.12388|
                          DCD      k
                  |L1.12392|
                          DCD      0x4006b000
                  |L1.12396|
                          DCD      ||.text||+0x474
                  |L1.12400|
                          DCD      stcond1
                  |L1.12404|
                          DCD      stcond2
                  |L1.12408|
                          DCD      stcond3
                  |L1.12412|
                          DCD      stcond4
                  |L1.12416|
                          DCD      con1d
                  |L1.12420|
                          DCD      drive
                  |L1.12424|
003088  48fe              LDR      r0,|L1.13444|
00308a  f7fffffe          BL       uart_putchar
00308e  210a              MOVS     r1,#0xa
003090  48fc              LDR      r0,|L1.13444|
003092  f7fffffe          BL       uart_putchar
003096  210a              MOVS     r1,#0xa
003098  48fa              LDR      r0,|L1.13444|
00309a  f7fffffe          BL       uart_putchar
00309e  210a              MOVS     r1,#0xa
0030a0  48f8              LDR      r0,|L1.13444|
0030a2  f7fffffe          BL       uart_putchar
0030a6  210a              MOVS     r1,#0xa
0030a8  48f6              LDR      r0,|L1.13444|
0030aa  f7fffffe          BL       uart_putchar
0030ae  210a              MOVS     r1,#0xa
0030b0  48f4              LDR      r0,|L1.13444|
0030b2  f7fffffe          BL       uart_putchar
0030b6  210a              MOVS     r1,#0xa
0030b8  48f2              LDR      r0,|L1.13444|
0030ba  f7fffffe          BL       uart_putchar
0030be  210a              MOVS     r1,#0xa
0030c0  48f0              LDR      r0,|L1.13444|
0030c2  f7fffffe          BL       uart_putchar
0030c6  210a              MOVS     r1,#0xa
0030c8  48ee              LDR      r0,|L1.13444|
0030ca  f7fffffe          BL       uart_putchar
0030ce  210a              MOVS     r1,#0xa
0030d0  48ec              LDR      r0,|L1.13444|
0030d2  f7fffffe          BL       uart_putchar
0030d6  210a              MOVS     r1,#0xa
0030d8  48ea              LDR      r0,|L1.13444|
0030da  f7fffffe          BL       uart_putchar
0030de  210a              MOVS     r1,#0xa
0030e0  48e8              LDR      r0,|L1.13444|
0030e2  f7fffffe          BL       uart_putchar
0030e6  210a              MOVS     r1,#0xa
0030e8  48e6              LDR      r0,|L1.13444|
0030ea  f7fffffe          BL       uart_putchar
0030ee  210a              MOVS     r1,#0xa
0030f0  48e4              LDR      r0,|L1.13444|
0030f2  f7fffffe          BL       uart_putchar
0030f6  210a              MOVS     r1,#0xa
0030f8  48e2              LDR      r0,|L1.13444|
0030fa  f7fffffe          BL       uart_putchar
0030fe  210a              MOVS     r1,#0xa
003100  48e0              LDR      r0,|L1.13444|
003102  f7fffffe          BL       uart_putchar
003106  210a              MOVS     r1,#0xa
003108  48de              LDR      r0,|L1.13444|
00310a  f7fffffe          BL       uart_putchar
;;;1037   									//memset(data,0,1000);
;;;1038   														//timer counts to wait for characters in uart 1 									
;;;1039   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00310e  bf00              NOP      
                  |L1.12560|
003110  49dd              LDR      r1,|L1.13448|
003112  48de              LDR      r0,|L1.13452|
003114  f7fffffe          BL       strstr
003118  2800              CMP      r0,#0
00311a  d10a              BNE      |L1.12594|
00311c  49da              LDR      r1,|L1.13448|
00311e  398c              SUBS     r1,r1,#0x8c
003120  48da              LDR      r0,|L1.13452|
003122  f7fffffe          BL       strstr
003126  2800              CMP      r0,#0
003128  d103              BNE      |L1.12594|
00312a  48d9              LDR      r0,|L1.13456|
00312c  6800              LDR      r0,[r0,#0]  ; tout
00312e  2805              CMP      r0,#5
003130  ddee              BLE      |L1.12560|
                  |L1.12594|
;;;1040   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1041   									}
;;;1042   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003132  f7fffffe          BL       clear
;;;1043   									//clear();
;;;1044   									memset(data,0,strlen(data));
003136  48d7              LDR      r0,|L1.13460|
003138  f7fffffe          BL       strlen
00313c  4604              MOV      r4,r0
00313e  4621              MOV      r1,r4
003140  48d4              LDR      r0,|L1.13460|
003142  f7fffffe          BL       __aeabi_memclr
;;;1045   									clear();
003146  f7fffffe          BL       clear
00314a  e142              B        |L1.13266|
                  |L1.12620|
;;;1046   
;;;1047   								
;;;1048   									
;;;1049   									
;;;1050   									
;;;1051   								//	log_it();								
;;;1052   								}else{send_chunk();}	
00314c  f7fffffe          BL       send_chunk
003150  e13f              B        |L1.13266|
                  |L1.12626|
;;;1053   
;;;1054   																
;;;1055   								}else{
;;;1056   								
;;;1057   								
;;;1058   	delay(100);
003152  2064              MOVS     r0,#0x64
003154  f7fffffe          BL       delay
;;;1059   		clear();//memset(uart_string_gsm,0,5000);
003158  f7fffffe          BL       clear
;;;1060   	
;;;1061   	memset(at_,0,100);
00315c  2164              MOVS     r1,#0x64
00315e  48ce              LDR      r0,|L1.13464|
003160  f7fffffe          BL       __aeabi_memclr
;;;1062   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003164  48cb              LDR      r0,|L1.13460|
003166  f7fffffe          BL       strlen
00316a  1c44              ADDS     r4,r0,#1
00316c  4623              MOV      r3,r4
00316e  4acb              LDR      r2,|L1.13468|
003170  49c5              LDR      r1,|L1.13448|
003172  3938              SUBS     r1,r1,#0x38
003174  48c8              LDR      r0,|L1.13464|
003176  f7fffffe          BL       __2sprintf
;;;1063   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00317a  2005              MOVS     r0,#5
00317c  4bc2              LDR      r3,|L1.13448|
00317e  3b8c              SUBS     r3,r3,#0x8c
003180  461a              MOV      r2,r3
003182  3278              ADDS     r2,r2,#0x78
003184  a1c6              ADR      r1,|L1.13472|
003186  9000              STR      r0,[sp,#0]
003188  48c3              LDR      r0,|L1.13464|
00318a  f7fffffe          BL       send_SD
;;;1064   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1065   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1066   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1067   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1068   //	}
;;;1069   	
;;;1070   clear();	
00318e  f7fffffe          BL       clear
;;;1071   									k2=0;									//string array counter for uart 1
003192  2000              MOVS     r0,#0
003194  49c3              LDR      r1,|L1.13476|
003196  6008              STR      r0,[r1,#0]  ; k2
;;;1072   									tout=0;	
003198  49bd              LDR      r1,|L1.13456|
00319a  6008              STR      r0,[r1,#0]  ; tout
;;;1073   		for(k=0;k<strlen(data);k++)
00319c  49c2              LDR      r1,|L1.13480|
00319e  6008              STR      r0,[r1,#0]  ; k
0031a0  e00b              B        |L1.12730|
                  |L1.12706|
;;;1074   		{
;;;1075   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0031a2  48bc              LDR      r0,|L1.13460|
0031a4  4ac0              LDR      r2,|L1.13480|
0031a6  6812              LDR      r2,[r2,#0]  ; k
0031a8  5c81              LDRB     r1,[r0,r2]
0031aa  48b6              LDR      r0,|L1.13444|
0031ac  f7fffffe          BL       uart_putchar
0031b0  48bd              LDR      r0,|L1.13480|
0031b2  6800              LDR      r0,[r0,#0]            ;1073  ; k
0031b4  1c40              ADDS     r0,r0,#1              ;1073
0031b6  49bc              LDR      r1,|L1.13480|
0031b8  6008              STR      r0,[r1,#0]            ;1073  ; k
                  |L1.12730|
0031ba  48b6              LDR      r0,|L1.13460|
0031bc  f7fffffe          BL       strlen
0031c0  49b9              LDR      r1,|L1.13480|
0031c2  6809              LDR      r1,[r1,#0]            ;1073  ; k
0031c4  4288              CMP      r0,r1                 ;1073
0031c6  d8ec              BHI      |L1.12706|
;;;1076   		}	
;;;1077   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0031c8  210a              MOVS     r1,#0xa
0031ca  48ae              LDR      r0,|L1.13444|
0031cc  f7fffffe          BL       uart_putchar
0031d0  210a              MOVS     r1,#0xa
0031d2  48ac              LDR      r0,|L1.13444|
0031d4  f7fffffe          BL       uart_putchar
0031d8  210a              MOVS     r1,#0xa
0031da  48aa              LDR      r0,|L1.13444|
0031dc  f7fffffe          BL       uart_putchar
0031e0  210a              MOVS     r1,#0xa
0031e2  48a8              LDR      r0,|L1.13444|
0031e4  f7fffffe          BL       uart_putchar
0031e8  210a              MOVS     r1,#0xa
0031ea  48a6              LDR      r0,|L1.13444|
0031ec  f7fffffe          BL       uart_putchar
0031f0  210a              MOVS     r1,#0xa
0031f2  48a4              LDR      r0,|L1.13444|
0031f4  f7fffffe          BL       uart_putchar
0031f8  210a              MOVS     r1,#0xa
0031fa  48a2              LDR      r0,|L1.13444|
0031fc  f7fffffe          BL       uart_putchar
003200  210a              MOVS     r1,#0xa
003202  48a0              LDR      r0,|L1.13444|
003204  f7fffffe          BL       uart_putchar
003208  210a              MOVS     r1,#0xa
00320a  489e              LDR      r0,|L1.13444|
00320c  f7fffffe          BL       uart_putchar
003210  210a              MOVS     r1,#0xa
003212  489c              LDR      r0,|L1.13444|
003214  f7fffffe          BL       uart_putchar
003218  210a              MOVS     r1,#0xa
00321a  489a              LDR      r0,|L1.13444|
00321c  f7fffffe          BL       uart_putchar
003220  210a              MOVS     r1,#0xa
003222  4898              LDR      r0,|L1.13444|
003224  f7fffffe          BL       uart_putchar
003228  210a              MOVS     r1,#0xa
00322a  4896              LDR      r0,|L1.13444|
00322c  f7fffffe          BL       uart_putchar
003230  210a              MOVS     r1,#0xa
003232  4894              LDR      r0,|L1.13444|
003234  f7fffffe          BL       uart_putchar
003238  210a              MOVS     r1,#0xa
00323a  4892              LDR      r0,|L1.13444|
00323c  f7fffffe          BL       uart_putchar
003240  210a              MOVS     r1,#0xa
003242  4890              LDR      r0,|L1.13444|
003244  f7fffffe          BL       uart_putchar
003248  210a              MOVS     r1,#0xa
00324a  488e              LDR      r0,|L1.13444|
00324c  f7fffffe          BL       uart_putchar
003250  210a              MOVS     r1,#0xa
003252  488c              LDR      r0,|L1.13444|
003254  f7fffffe          BL       uart_putchar
003258  210a              MOVS     r1,#0xa
00325a  488a              LDR      r0,|L1.13444|
00325c  f7fffffe          BL       uart_putchar
003260  210a              MOVS     r1,#0xa
003262  4888              LDR      r0,|L1.13444|
003264  f7fffffe          BL       uart_putchar
003268  210a              MOVS     r1,#0xa
00326a  4886              LDR      r0,|L1.13444|
00326c  f7fffffe          BL       uart_putchar
003270  210a              MOVS     r1,#0xa
003272  4884              LDR      r0,|L1.13444|
003274  f7fffffe          BL       uart_putchar
003278  210a              MOVS     r1,#0xa
00327a  4882              LDR      r0,|L1.13444|
00327c  f7fffffe          BL       uart_putchar
003280  210a              MOVS     r1,#0xa
003282  4880              LDR      r0,|L1.13444|
003284  f7fffffe          BL       uart_putchar
003288  210a              MOVS     r1,#0xa
00328a  487e              LDR      r0,|L1.13444|
00328c  f7fffffe          BL       uart_putchar
003290  210a              MOVS     r1,#0xa
003292  487c              LDR      r0,|L1.13444|
003294  f7fffffe          BL       uart_putchar
003298  210a              MOVS     r1,#0xa
00329a  487a              LDR      r0,|L1.13444|
00329c  f7fffffe          BL       uart_putchar
0032a0  210a              MOVS     r1,#0xa
0032a2  4878              LDR      r0,|L1.13444|
0032a4  f7fffffe          BL       uart_putchar
0032a8  210a              MOVS     r1,#0xa
0032aa  4876              LDR      r0,|L1.13444|
0032ac  f7fffffe          BL       uart_putchar
0032b0  210a              MOVS     r1,#0xa
0032b2  4874              LDR      r0,|L1.13444|
0032b4  f7fffffe          BL       uart_putchar
0032b8  210a              MOVS     r1,#0xa
0032ba  4872              LDR      r0,|L1.13444|
0032bc  f7fffffe          BL       uart_putchar
0032c0  210a              MOVS     r1,#0xa
0032c2  4870              LDR      r0,|L1.13444|
0032c4  f7fffffe          BL       uart_putchar
0032c8  210a              MOVS     r1,#0xa
0032ca  486e              LDR      r0,|L1.13444|
0032cc  f7fffffe          BL       uart_putchar
0032d0  210a              MOVS     r1,#0xa
0032d2  486c              LDR      r0,|L1.13444|
0032d4  f7fffffe          BL       uart_putchar
0032d8  210a              MOVS     r1,#0xa
0032da  486a              LDR      r0,|L1.13444|
0032dc  f7fffffe          BL       uart_putchar
0032e0  210a              MOVS     r1,#0xa
0032e2  4868              LDR      r0,|L1.13444|
0032e4  f7fffffe          BL       uart_putchar
0032e8  210a              MOVS     r1,#0xa
0032ea  4866              LDR      r0,|L1.13444|
0032ec  f7fffffe          BL       uart_putchar
0032f0  210a              MOVS     r1,#0xa
0032f2  4864              LDR      r0,|L1.13444|
0032f4  f7fffffe          BL       uart_putchar
0032f8  210a              MOVS     r1,#0xa
0032fa  4862              LDR      r0,|L1.13444|
0032fc  f7fffffe          BL       uart_putchar
003300  210a              MOVS     r1,#0xa
003302  4860              LDR      r0,|L1.13444|
003304  f7fffffe          BL       uart_putchar
003308  210a              MOVS     r1,#0xa
00330a  485e              LDR      r0,|L1.13444|
00330c  f7fffffe          BL       uart_putchar
003310  210a              MOVS     r1,#0xa
003312  485c              LDR      r0,|L1.13444|
003314  f7fffffe          BL       uart_putchar
003318  210a              MOVS     r1,#0xa
00331a  485a              LDR      r0,|L1.13444|
00331c  f7fffffe          BL       uart_putchar
003320  210a              MOVS     r1,#0xa
003322  4858              LDR      r0,|L1.13444|
003324  f7fffffe          BL       uart_putchar
003328  210a              MOVS     r1,#0xa
00332a  4856              LDR      r0,|L1.13444|
00332c  f7fffffe          BL       uart_putchar
003330  210a              MOVS     r1,#0xa
003332  4854              LDR      r0,|L1.13444|
003334  f7fffffe          BL       uart_putchar
003338  210a              MOVS     r1,#0xa
00333a  4852              LDR      r0,|L1.13444|
00333c  f7fffffe          BL       uart_putchar
003340  210a              MOVS     r1,#0xa
003342  4850              LDR      r0,|L1.13444|
003344  f7fffffe          BL       uart_putchar
003348  210a              MOVS     r1,#0xa
00334a  484e              LDR      r0,|L1.13444|
00334c  f7fffffe          BL       uart_putchar
003350  210a              MOVS     r1,#0xa
003352  484c              LDR      r0,|L1.13444|
003354  f7fffffe          BL       uart_putchar
003358  210a              MOVS     r1,#0xa
00335a  484a              LDR      r0,|L1.13444|
00335c  f7fffffe          BL       uart_putchar
003360  210a              MOVS     r1,#0xa
003362  4848              LDR      r0,|L1.13444|
003364  f7fffffe          BL       uart_putchar
003368  210a              MOVS     r1,#0xa
00336a  4846              LDR      r0,|L1.13444|
00336c  f7fffffe          BL       uart_putchar
003370  210a              MOVS     r1,#0xa
003372  4844              LDR      r0,|L1.13444|
003374  f7fffffe          BL       uart_putchar
003378  210a              MOVS     r1,#0xa
00337a  4842              LDR      r0,|L1.13444|
00337c  f7fffffe          BL       uart_putchar
003380  210a              MOVS     r1,#0xa
003382  4840              LDR      r0,|L1.13444|
003384  f7fffffe          BL       uart_putchar
003388  210a              MOVS     r1,#0xa
00338a  483e              LDR      r0,|L1.13444|
00338c  f7fffffe          BL       uart_putchar
;;;1078   									//memset(data,0,1000);
;;;1079   														//timer counts to wait for characters in uart 1 									
;;;1080   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003390  bf00              NOP      
                  |L1.13202|
003392  493d              LDR      r1,|L1.13448|
003394  483d              LDR      r0,|L1.13452|
003396  f7fffffe          BL       strstr
00339a  2800              CMP      r0,#0
00339c  d10a              BNE      |L1.13236|
00339e  493a              LDR      r1,|L1.13448|
0033a0  398c              SUBS     r1,r1,#0x8c
0033a2  483a              LDR      r0,|L1.13452|
0033a4  f7fffffe          BL       strstr
0033a8  2800              CMP      r0,#0
0033aa  d103              BNE      |L1.13236|
0033ac  4838              LDR      r0,|L1.13456|
0033ae  6800              LDR      r0,[r0,#0]  ; tout
0033b0  2805              CMP      r0,#5
0033b2  ddee              BLE      |L1.13202|
                  |L1.13236|
;;;1081   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1082   									}
;;;1083   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0033b4  f7fffffe          BL       clear
;;;1084   									//clear();
;;;1085   									memset(data,0,strlen(data));
0033b8  4836              LDR      r0,|L1.13460|
0033ba  f7fffffe          BL       strlen
0033be  4604              MOV      r4,r0
0033c0  4621              MOV      r1,r4
0033c2  4834              LDR      r0,|L1.13460|
0033c4  f7fffffe          BL       __aeabi_memclr
;;;1086   									clear();
0033c8  f7fffffe          BL       clear
0033cc  e001              B        |L1.13266|
                  |L1.13262|
;;;1087   
;;;1088   								
;;;1089   								
;;;1090   								//log_it();
;;;1091   									}			//
;;;1092   
;;;1093   							
;;;1094   
;;;1095   	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1096   	else
;;;1097   	{
;;;1098   		send_chunk();
0033ce  f7fffffe          BL       send_chunk
                  |L1.13266|
;;;1099   	}		
;;;1100   								
;;;1101   								
;;;1102   								
;;;1103   	memset(data,0,strlen(data));	
0033d2  4830              LDR      r0,|L1.13460|
0033d4  f7fffffe          BL       strlen
0033d8  4604              MOV      r4,r0
0033da  4621              MOV      r1,r4
0033dc  482d              LDR      r0,|L1.13460|
0033de  f7fffffe          BL       __aeabi_memclr
;;;1104   	uart_putchar(UART1_BASE_PTR, 0x1A);
0033e2  211a              MOVS     r1,#0x1a
0033e4  4827              LDR      r0,|L1.13444|
0033e6  f7fffffe          BL       uart_putchar
;;;1105   	
;;;1106   }
0033ea  bd38              POP      {r3-r5,pc}
;;;1107   
                          ENDP

                  log_it PROC
;;;1110   
;;;1111   void log_it()
0033ec  b538              PUSH     {r3-r5,lr}
;;;1112   {
;;;1113   	delay(100);
0033ee  2064              MOVS     r0,#0x64
0033f0  f7fffffe          BL       delay
;;;1114   		clear();//memset(uart_string_gsm,0,5000);
0033f4  f7fffffe          BL       clear
;;;1115   	
;;;1116   	memset(at_,0,100);
0033f8  2164              MOVS     r1,#0x64
0033fa  4827              LDR      r0,|L1.13464|
0033fc  f7fffffe          BL       __aeabi_memclr
;;;1117   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003400  4824              LDR      r0,|L1.13460|
003402  f7fffffe          BL       strlen
003406  1c44              ADDS     r4,r0,#1
003408  4623              MOV      r3,r4
00340a  4a24              LDR      r2,|L1.13468|
00340c  491e              LDR      r1,|L1.13448|
00340e  3938              SUBS     r1,r1,#0x38
003410  4821              LDR      r0,|L1.13464|
003412  f7fffffe          BL       __2sprintf
;;;1118   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003416  2005              MOVS     r0,#5
003418  4b1b              LDR      r3,|L1.13448|
00341a  3b8c              SUBS     r3,r3,#0x8c
00341c  461a              MOV      r2,r3
00341e  3278              ADDS     r2,r2,#0x78
003420  a11f              ADR      r1,|L1.13472|
003422  9000              STR      r0,[sp,#0]
003424  481c              LDR      r0,|L1.13464|
003426  f7fffffe          BL       send_SD
;;;1119   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1120   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1121   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1122   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1123   //	}
;;;1124   	
;;;1125   clear();	
00342a  f7fffffe          BL       clear
;;;1126   									k2=0;									//string array counter for uart 1
00342e  2000              MOVS     r0,#0
003430  491c              LDR      r1,|L1.13476|
003432  6008              STR      r0,[r1,#0]  ; k2
;;;1127   									tout=0;	
003434  4916              LDR      r1,|L1.13456|
003436  6008              STR      r0,[r1,#0]  ; tout
;;;1128   		for(k=0;k<strlen(data);k++)
003438  491b              LDR      r1,|L1.13480|
00343a  6008              STR      r0,[r1,#0]  ; k
00343c  e00b              B        |L1.13398|
                  |L1.13374|
;;;1129   		{
;;;1130   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00343e  4815              LDR      r0,|L1.13460|
003440  4a19              LDR      r2,|L1.13480|
003442  6812              LDR      r2,[r2,#0]  ; k
003444  5c81              LDRB     r1,[r0,r2]
003446  480f              LDR      r0,|L1.13444|
003448  f7fffffe          BL       uart_putchar
00344c  4816              LDR      r0,|L1.13480|
00344e  6800              LDR      r0,[r0,#0]            ;1128  ; k
003450  1c40              ADDS     r0,r0,#1              ;1128
003452  4915              LDR      r1,|L1.13480|
003454  6008              STR      r0,[r1,#0]            ;1128  ; k
                  |L1.13398|
003456  480f              LDR      r0,|L1.13460|
003458  f7fffffe          BL       strlen
00345c  4912              LDR      r1,|L1.13480|
00345e  6809              LDR      r1,[r1,#0]            ;1128  ; k
003460  4288              CMP      r0,r1                 ;1128
003462  d8ec              BHI      |L1.13374|
;;;1131   		}	
;;;1132   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
003464  210a              MOVS     r1,#0xa
003466  4807              LDR      r0,|L1.13444|
003468  f7fffffe          BL       uart_putchar
00346c  210a              MOVS     r1,#0xa
00346e  4805              LDR      r0,|L1.13444|
003470  f7fffffe          BL       uart_putchar
003474  210a              MOVS     r1,#0xa
003476  4803              LDR      r0,|L1.13444|
003478  f7fffffe          BL       uart_putchar
00347c  210a              MOVS     r1,#0xa
00347e  4801              LDR      r0,|L1.13444|
003480  e014              B        |L1.13484|
003482  0000              DCW      0x0000
                  |L1.13444|
                          DCD      0x4006b000
                  |L1.13448|
                          DCD      ||.text||+0x8fc
                  |L1.13452|
                          DCD      uart_string_gsm
                  |L1.13456|
                          DCD      tout
                  |L1.13460|
                          DCD      data
                  |L1.13464|
                          DCD      at_
                  |L1.13468|
                          DCD      drive
                  |L1.13472|
0034a0  3e00              DCB      ">",0
0034a2  00                DCB      0
0034a3  00                DCB      0
                  |L1.13476|
                          DCD      ||k2||
                  |L1.13480|
                          DCD      k
                  |L1.13484|
0034ac  f7fffffe          BL       uart_putchar
0034b0  210a              MOVS     r1,#0xa
0034b2  48fa              LDR      r0,|L1.14492|
0034b4  f7fffffe          BL       uart_putchar
0034b8  210a              MOVS     r1,#0xa
0034ba  48f8              LDR      r0,|L1.14492|
0034bc  f7fffffe          BL       uart_putchar
0034c0  210a              MOVS     r1,#0xa
0034c2  48f6              LDR      r0,|L1.14492|
0034c4  f7fffffe          BL       uart_putchar
0034c8  210a              MOVS     r1,#0xa
0034ca  48f4              LDR      r0,|L1.14492|
0034cc  f7fffffe          BL       uart_putchar
0034d0  210a              MOVS     r1,#0xa
0034d2  48f2              LDR      r0,|L1.14492|
0034d4  f7fffffe          BL       uart_putchar
0034d8  210a              MOVS     r1,#0xa
0034da  48f0              LDR      r0,|L1.14492|
0034dc  f7fffffe          BL       uart_putchar
0034e0  210a              MOVS     r1,#0xa
0034e2  48ee              LDR      r0,|L1.14492|
0034e4  f7fffffe          BL       uart_putchar
0034e8  210a              MOVS     r1,#0xa
0034ea  48ec              LDR      r0,|L1.14492|
0034ec  f7fffffe          BL       uart_putchar
0034f0  210a              MOVS     r1,#0xa
0034f2  48ea              LDR      r0,|L1.14492|
0034f4  f7fffffe          BL       uart_putchar
0034f8  210a              MOVS     r1,#0xa
0034fa  48e8              LDR      r0,|L1.14492|
0034fc  f7fffffe          BL       uart_putchar
003500  210a              MOVS     r1,#0xa
003502  48e6              LDR      r0,|L1.14492|
003504  f7fffffe          BL       uart_putchar
003508  210a              MOVS     r1,#0xa
00350a  48e4              LDR      r0,|L1.14492|
00350c  f7fffffe          BL       uart_putchar
003510  210a              MOVS     r1,#0xa
003512  48e2              LDR      r0,|L1.14492|
003514  f7fffffe          BL       uart_putchar
003518  210a              MOVS     r1,#0xa
00351a  48e0              LDR      r0,|L1.14492|
00351c  f7fffffe          BL       uart_putchar
003520  210a              MOVS     r1,#0xa
003522  48de              LDR      r0,|L1.14492|
003524  f7fffffe          BL       uart_putchar
003528  210a              MOVS     r1,#0xa
00352a  48dc              LDR      r0,|L1.14492|
00352c  f7fffffe          BL       uart_putchar
003530  210a              MOVS     r1,#0xa
003532  48da              LDR      r0,|L1.14492|
003534  f7fffffe          BL       uart_putchar
003538  210a              MOVS     r1,#0xa
00353a  48d8              LDR      r0,|L1.14492|
00353c  f7fffffe          BL       uart_putchar
003540  210a              MOVS     r1,#0xa
003542  48d6              LDR      r0,|L1.14492|
003544  f7fffffe          BL       uart_putchar
003548  210a              MOVS     r1,#0xa
00354a  48d4              LDR      r0,|L1.14492|
00354c  f7fffffe          BL       uart_putchar
003550  210a              MOVS     r1,#0xa
003552  48d2              LDR      r0,|L1.14492|
003554  f7fffffe          BL       uart_putchar
003558  210a              MOVS     r1,#0xa
00355a  48d0              LDR      r0,|L1.14492|
00355c  f7fffffe          BL       uart_putchar
003560  210a              MOVS     r1,#0xa
003562  48ce              LDR      r0,|L1.14492|
003564  f7fffffe          BL       uart_putchar
003568  210a              MOVS     r1,#0xa
00356a  48cc              LDR      r0,|L1.14492|
00356c  f7fffffe          BL       uart_putchar
003570  210a              MOVS     r1,#0xa
003572  48ca              LDR      r0,|L1.14492|
003574  f7fffffe          BL       uart_putchar
003578  210a              MOVS     r1,#0xa
00357a  48c8              LDR      r0,|L1.14492|
00357c  f7fffffe          BL       uart_putchar
003580  210a              MOVS     r1,#0xa
003582  48c6              LDR      r0,|L1.14492|
003584  f7fffffe          BL       uart_putchar
003588  210a              MOVS     r1,#0xa
00358a  48c4              LDR      r0,|L1.14492|
00358c  f7fffffe          BL       uart_putchar
003590  210a              MOVS     r1,#0xa
003592  48c2              LDR      r0,|L1.14492|
003594  f7fffffe          BL       uart_putchar
003598  210a              MOVS     r1,#0xa
00359a  48c0              LDR      r0,|L1.14492|
00359c  f7fffffe          BL       uart_putchar
0035a0  210a              MOVS     r1,#0xa
0035a2  48be              LDR      r0,|L1.14492|
0035a4  f7fffffe          BL       uart_putchar
0035a8  210a              MOVS     r1,#0xa
0035aa  48bc              LDR      r0,|L1.14492|
0035ac  f7fffffe          BL       uart_putchar
0035b0  210a              MOVS     r1,#0xa
0035b2  48ba              LDR      r0,|L1.14492|
0035b4  f7fffffe          BL       uart_putchar
0035b8  210a              MOVS     r1,#0xa
0035ba  48b8              LDR      r0,|L1.14492|
0035bc  f7fffffe          BL       uart_putchar
0035c0  210a              MOVS     r1,#0xa
0035c2  48b6              LDR      r0,|L1.14492|
0035c4  f7fffffe          BL       uart_putchar
0035c8  210a              MOVS     r1,#0xa
0035ca  48b4              LDR      r0,|L1.14492|
0035cc  f7fffffe          BL       uart_putchar
0035d0  210a              MOVS     r1,#0xa
0035d2  48b2              LDR      r0,|L1.14492|
0035d4  f7fffffe          BL       uart_putchar
0035d8  210a              MOVS     r1,#0xa
0035da  48b0              LDR      r0,|L1.14492|
0035dc  f7fffffe          BL       uart_putchar
0035e0  210a              MOVS     r1,#0xa
0035e2  48ae              LDR      r0,|L1.14492|
0035e4  f7fffffe          BL       uart_putchar
0035e8  210a              MOVS     r1,#0xa
0035ea  48ac              LDR      r0,|L1.14492|
0035ec  f7fffffe          BL       uart_putchar
0035f0  210a              MOVS     r1,#0xa
0035f2  48aa              LDR      r0,|L1.14492|
0035f4  f7fffffe          BL       uart_putchar
0035f8  210a              MOVS     r1,#0xa
0035fa  48a8              LDR      r0,|L1.14492|
0035fc  f7fffffe          BL       uart_putchar
003600  210a              MOVS     r1,#0xa
003602  48a6              LDR      r0,|L1.14492|
003604  f7fffffe          BL       uart_putchar
003608  210a              MOVS     r1,#0xa
00360a  48a4              LDR      r0,|L1.14492|
00360c  f7fffffe          BL       uart_putchar
003610  210a              MOVS     r1,#0xa
003612  48a2              LDR      r0,|L1.14492|
003614  f7fffffe          BL       uart_putchar
003618  210a              MOVS     r1,#0xa
00361a  48a0              LDR      r0,|L1.14492|
00361c  f7fffffe          BL       uart_putchar
003620  210a              MOVS     r1,#0xa
003622  489e              LDR      r0,|L1.14492|
003624  f7fffffe          BL       uart_putchar
003628  210a              MOVS     r1,#0xa
00362a  489c              LDR      r0,|L1.14492|
00362c  f7fffffe          BL       uart_putchar
003630  210a              MOVS     r1,#0xa
003632  489a              LDR      r0,|L1.14492|
003634  f7fffffe          BL       uart_putchar
003638  210a              MOVS     r1,#0xa
00363a  4898              LDR      r0,|L1.14492|
00363c  f7fffffe          BL       uart_putchar
003640  210a              MOVS     r1,#0xa
003642  4896              LDR      r0,|L1.14492|
003644  f7fffffe          BL       uart_putchar
003648  210a              MOVS     r1,#0xa
00364a  4894              LDR      r0,|L1.14492|
00364c  f7fffffe          BL       uart_putchar
003650  210a              MOVS     r1,#0xa
003652  4892              LDR      r0,|L1.14492|
003654  f7fffffe          BL       uart_putchar
;;;1133   									//memset(data,0,1000);
;;;1134   														//timer counts to wait for characters in uart 1 									
;;;1135   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003658  bf00              NOP      
                  |L1.13914|
00365a  4991              LDR      r1,|L1.14496|
00365c  4891              LDR      r0,|L1.14500|
00365e  f7fffffe          BL       strstr
003662  2800              CMP      r0,#0
003664  d10a              BNE      |L1.13948|
003666  498e              LDR      r1,|L1.14496|
003668  398c              SUBS     r1,r1,#0x8c
00366a  488e              LDR      r0,|L1.14500|
00366c  f7fffffe          BL       strstr
003670  2800              CMP      r0,#0
003672  d103              BNE      |L1.13948|
003674  488c              LDR      r0,|L1.14504|
003676  6800              LDR      r0,[r0,#0]  ; tout
003678  2805              CMP      r0,#5
00367a  ddee              BLE      |L1.13914|
                  |L1.13948|
;;;1136   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1137   									}
;;;1138   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00367c  f7fffffe          BL       clear
;;;1139   									//clear();
;;;1140   									memset(data,0,strlen(data));
003680  488a              LDR      r0,|L1.14508|
003682  f7fffffe          BL       strlen
003686  4604              MOV      r4,r0
003688  4621              MOV      r1,r4
00368a  4888              LDR      r0,|L1.14508|
00368c  f7fffffe          BL       __aeabi_memclr
;;;1141   									clear();
003690  f7fffffe          BL       clear
;;;1142   
;;;1143   								
;;;1144   						//		
;;;1145   }
003694  bd38              POP      {r3-r5,pc}
;;;1146   
                          ENDP

                  read PROC
;;;1362   
;;;1363   void read(char * A,char * B,char * C)
003696  b570              PUSH     {r4-r6,lr}
;;;1364   {k=0;l=time;
003698  4604              MOV      r4,r0
00369a  460d              MOV      r5,r1
00369c  4616              MOV      r6,r2
00369e  2000              MOVS     r0,#0
0036a0  4983              LDR      r1,|L1.14512|
0036a2  6008              STR      r0,[r1,#0]  ; k
0036a4  4883              LDR      r0,|L1.14516|
0036a6  6800              LDR      r0,[r0,#0]  ; time
0036a8  4983              LDR      r1,|L1.14520|
0036aa  6008              STR      r0,[r1,#0]  ; l
;;;1365   			do{
0036ac  bf00              NOP      
                  |L1.13998|
;;;1366   			if( uart_getchar_present (UART1_BASE_PTR))	
0036ae  487b              LDR      r0,|L1.14492|
0036b0  f7fffffe          BL       uart_getchar_present
0036b4  2800              CMP      r0,#0
0036b6  d018              BEQ      |L1.14058|
;;;1367   			{uart_string_gps[k]=UART_D_REG(UART1_BASE_PTR);k++;l=time;if(k>298){k=0;}}
0036b8  4878              LDR      r0,|L1.14492|
0036ba  79c0              LDRB     r0,[r0,#7]
0036bc  497f              LDR      r1,|L1.14524|
0036be  4a7c              LDR      r2,|L1.14512|
0036c0  6812              LDR      r2,[r2,#0]  ; k
0036c2  5488              STRB     r0,[r1,r2]
0036c4  487a              LDR      r0,|L1.14512|
0036c6  6800              LDR      r0,[r0,#0]  ; k
0036c8  1c40              ADDS     r0,r0,#1
0036ca  4979              LDR      r1,|L1.14512|
0036cc  6008              STR      r0,[r1,#0]  ; k
0036ce  4879              LDR      r0,|L1.14516|
0036d0  6800              LDR      r0,[r0,#0]  ; time
0036d2  4979              LDR      r1,|L1.14520|
0036d4  6008              STR      r0,[r1,#0]  ; l
0036d6  4876              LDR      r0,|L1.14512|
0036d8  6800              LDR      r0,[r0,#0]  ; k
0036da  21ff              MOVS     r1,#0xff
0036dc  312b              ADDS     r1,r1,#0x2b
0036de  4288              CMP      r0,r1
0036e0  dd09              BLE      |L1.14070|
0036e2  2000              MOVS     r0,#0
0036e4  4972              LDR      r1,|L1.14512|
0036e6  6008              STR      r0,[r1,#0]  ; k
0036e8  e005              B        |L1.14070|
                  |L1.14058|
;;;1368   				else{
;;;1369   							l--;if(l==10){}
0036ea  4873              LDR      r0,|L1.14520|
0036ec  6800              LDR      r0,[r0,#0]  ; l
0036ee  1e40              SUBS     r0,r0,#1
0036f0  4971              LDR      r1,|L1.14520|
0036f2  6008              STR      r0,[r1,#0]  ; l
0036f4  bf00              NOP      
                  |L1.14070|
;;;1370   						}
;;;1371   			}while(!((strstr(uart_string_gps, "OK\r\n"))
0036f6  496a              LDR      r1,|L1.14496|
0036f8  4870              LDR      r0,|L1.14524|
0036fa  f7fffffe          BL       strstr
0036fe  2800              CMP      r0,#0
003700  d110              BNE      |L1.14116|
003702  4967              LDR      r1,|L1.14496|
003704  3914              SUBS     r1,r1,#0x14
003706  486d              LDR      r0,|L1.14524|
003708  f7fffffe          BL       strstr
00370c  2800              CMP      r0,#0
00370e  d109              BNE      |L1.14116|
003710  4869              LDR      r0,|L1.14520|
003712  6800              LDR      r0,[r0,#0]  ; l
003714  2800              CMP      r0,#0
003716  dd05              BLE      |L1.14116|
003718  4969              LDR      r1,|L1.14528|
00371a  4868              LDR      r0,|L1.14524|
00371c  f7fffffe          BL       strstr
003720  2800              CMP      r0,#0
003722  d0c4              BEQ      |L1.13998|
                  |L1.14116|
;;;1372   							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;1373   				        	||(strstr(uart_string_gps, "ERROR:"))
;;;1374   							));
;;;1375   //		clear();
;;;1376   }	
003724  bd70              POP      {r4-r6,pc}
;;;1377   void read2(char * respA,char * respB,char * respC, int timeout)
                          ENDP

                  read2 PROC
003726  b5f8              PUSH     {r3-r7,lr}
;;;1378   {k=0;l=time;
003728  4604              MOV      r4,r0
00372a  460e              MOV      r6,r1
00372c  4615              MOV      r5,r2
00372e  461f              MOV      r7,r3
003730  2000              MOVS     r0,#0
003732  495f              LDR      r1,|L1.14512|
003734  6008              STR      r0,[r1,#0]  ; k
003736  485f              LDR      r0,|L1.14516|
003738  6800              LDR      r0,[r0,#0]  ; time
00373a  495f              LDR      r1,|L1.14520|
00373c  6008              STR      r0,[r1,#0]  ; l
;;;1379   			do{
00373e  bf00              NOP      
                  |L1.14144|
;;;1380   			if( uart_getchar_present (UART2_BASE_PTR))	
003740  4860              LDR      r0,|L1.14532|
003742  f7fffffe          BL       uart_getchar_present
003746  2800              CMP      r0,#0
003748  d018              BEQ      |L1.14204|
;;;1381   			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=time;if(k>298){k=0;}}
00374a  485e              LDR      r0,|L1.14532|
00374c  79c0              LDRB     r0,[r0,#7]
00374e  495b              LDR      r1,|L1.14524|
003750  4a57              LDR      r2,|L1.14512|
003752  6812              LDR      r2,[r2,#0]  ; k
003754  5488              STRB     r0,[r1,r2]
003756  4856              LDR      r0,|L1.14512|
003758  6800              LDR      r0,[r0,#0]  ; k
00375a  1c40              ADDS     r0,r0,#1
00375c  4954              LDR      r1,|L1.14512|
00375e  6008              STR      r0,[r1,#0]  ; k
003760  4854              LDR      r0,|L1.14516|
003762  6800              LDR      r0,[r0,#0]  ; time
003764  4954              LDR      r1,|L1.14520|
003766  6008              STR      r0,[r1,#0]  ; l
003768  4851              LDR      r0,|L1.14512|
00376a  6800              LDR      r0,[r0,#0]  ; k
00376c  21ff              MOVS     r1,#0xff
00376e  312b              ADDS     r1,r1,#0x2b
003770  4288              CMP      r0,r1
003772  dd08              BLE      |L1.14214|
003774  2000              MOVS     r0,#0
003776  494e              LDR      r1,|L1.14512|
003778  6008              STR      r0,[r1,#0]  ; k
00377a  e004              B        |L1.14214|
                  |L1.14204|
;;;1382   				else{				
;;;1383   								l--;
00377c  484e              LDR      r0,|L1.14520|
00377e  6800              LDR      r0,[r0,#0]  ; l
003780  1e40              SUBS     r0,r0,#1
003782  494d              LDR      r1,|L1.14520|
003784  6008              STR      r0,[r1,#0]  ; l
                  |L1.14214|
;;;1384   						}
;;;1385   			}while(!((strstr(uart_string_gps, respA))
003786  4621              MOV      r1,r4
003788  484c              LDR      r0,|L1.14524|
00378a  f7fffffe          BL       strstr
00378e  2800              CMP      r0,#0
003790  d10f              BNE      |L1.14258|
003792  4631              MOV      r1,r6
003794  4849              LDR      r0,|L1.14524|
003796  f7fffffe          BL       strstr
00379a  2800              CMP      r0,#0
00379c  d109              BNE      |L1.14258|
00379e  4846              LDR      r0,|L1.14520|
0037a0  6800              LDR      r0,[r0,#0]  ; l
0037a2  2800              CMP      r0,#0
0037a4  dd05              BLE      |L1.14258|
0037a6  4629              MOV      r1,r5
0037a8  4844              LDR      r0,|L1.14524|
0037aa  f7fffffe          BL       strstr
0037ae  2800              CMP      r0,#0
0037b0  d0c6              BEQ      |L1.14144|
                  |L1.14258|
;;;1386   							||(strstr(uart_string_gps, respB))  || (l<=0) 
;;;1387   				        	||(strstr(uart_string_gps, respC))
;;;1388   							));
;;;1389   //		clear();
;;;1390   }	
0037b2  bdf8              POP      {r3-r7,pc}
;;;1391   
                          ENDP

                  send_modem2 PROC
;;;1402   	
;;;1403   void send_modem2(char ch[])
0037b4  b570              PUSH     {r4-r6,lr}
;;;1404   	{	
0037b6  4604              MOV      r4,r0
;;;1405   						unsigned char i21;
;;;1406   						i21=0;
0037b8  2500              MOVS     r5,#0
;;;1407   						while ((*(ch+i21)) != '\0') // NULL
0037ba  e005              B        |L1.14280|
                  |L1.14268|
;;;1408   						{	
;;;1409   						// delay(1);
;;;1410   						 uart_putchar(UART2_BASE_PTR, (*(ch+i21)));
0037bc  5d61              LDRB     r1,[r4,r5]
0037be  4841              LDR      r0,|L1.14532|
0037c0  f7fffffe          BL       uart_putchar
;;;1411   						 i21++;
0037c4  1c68              ADDS     r0,r5,#1
0037c6  b2c5              UXTB     r5,r0
                  |L1.14280|
0037c8  5d60              LDRB     r0,[r4,r5]            ;1407
0037ca  2800              CMP      r0,#0                 ;1407
0037cc  d1f6              BNE      |L1.14268|
;;;1412   						}
;;;1413   		
;;;1414   	}	
0037ce  bd70              POP      {r4-r6,pc}
;;;1415   	
                          ENDP

                  gsm_gps_sleep PROC
;;;1638   
;;;1639   void gsm_gps_sleep()
0037d0  b508              PUSH     {r3,lr}
;;;1640   {
;;;1641   	
;;;1642   sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0037d2  4b3d              LDR      r3,|L1.14536|
0037d4  4a3d              LDR      r2,|L1.14540|
0037d6  493a              LDR      r1,|L1.14528|
0037d8  3160              ADDS     r1,r1,#0x60
0037da  483d              LDR      r0,|L1.14544|
0037dc  f7fffffe          BL       __2sprintf
;;;1643   send_GSM( at_ , "CONNECT", "ERROR" , "CONNECT",tmeout);										
0037e0  483c              LDR      r0,|L1.14548|
0037e2  6800              LDR      r0,[r0,#0]  ; tmeout
0037e4  4b36              LDR      r3,|L1.14528|
0037e6  3380              ADDS     r3,r3,#0x80
0037e8  4a2d              LDR      r2,|L1.14496|
0037ea  3a8c              SUBS     r2,r2,#0x8c
0037ec  4619              MOV      r1,r3
0037ee  9000              STR      r0,[sp,#0]
0037f0  4837              LDR      r0,|L1.14544|
0037f2  f7fffffe          BL       send_GSM
;;;1644   send_chunk();
0037f6  f7fffffe          BL       send_chunk
;;;1645   	//sleep modules;
;;;1646   //	do{
;;;1647   //				accel_read();
;;;1648   //				motion_samples = 0;
;;;1649   //				detect_motion();
;;;1650   //				
;;;1651   //	}while(motion != 1);
;;;1652   //	motion_samples = 0;
;;;1653   //wakeup modules;
;;;1654   
;;;1655   
;;;1656   
;;;1657   
;;;1658   }
0037fa  bd08              POP      {r3,pc}
;;;1659   
                          ENDP

                  SW1_init PROC
;;;86     
;;;87     void SW1_init(void){
0037fc  4836              LDR      r0,|L1.14552|
;;;88     
;;;89     #ifdef CMSIS
;;;90     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
0037fe  6b80              LDR      r0,[r0,#0x38]
003800  2101              MOVS     r1,#1
003802  02c9              LSLS     r1,r1,#11
003804  4308              ORRS     r0,r0,r1
003806  4934              LDR      r1,|L1.14552|
003808  6388              STR      r0,[r1,#0x38]
;;;91     	
;;;92     	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00380a  4834              LDR      r0,|L1.14556|
00380c  4934              LDR      r1,|L1.14560|
00380e  60c8              STR      r0,[r1,#0xc]
;;;93     	
;;;94     	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
003810  4831              LDR      r0,|L1.14552|
003812  6b80              LDR      r0,[r0,#0x38]
003814  2101              MOVS     r1,#1
003816  0309              LSLS     r1,r1,#12
003818  4308              ORRS     r0,r0,r1
00381a  492f              LDR      r1,|L1.14552|
00381c  6388              STR      r0,[r1,#0x38]
;;;95     	
;;;96     	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00381e  482f              LDR      r0,|L1.14556|
003820  1c40              ADDS     r0,r0,#1
003822  4930              LDR      r1,|L1.14564|
003824  6188              STR      r0,[r1,#0x18]
;;;97     	
;;;98     	PORTD_PCR0 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003826  1e40              SUBS     r0,r0,#1
003828  6008              STR      r0,[r1,#0]
;;;99     	
;;;100    	
;;;101    	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
00382a  201f              MOVS     r0,#0x1f
00382c  2101              MOVS     r1,#1
00382e  4081              LSLS     r1,r1,r0
003830  4a2d              LDR      r2,|L1.14568|
003832  6011              STR      r1,[r2,#0]
003834  bf00              NOP      
;;;102    #else
;;;103               
;;;104            enable_irq(31);
;;;105            set_irq_priority(31, 1);
;;;106            
;;;107            SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;108            
;;;109            PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;110            
;;;111    #endif
;;;112    }
003836  4770              BX       lr
;;;113    
                          ENDP

                  LED_state PROC
;;;182    
;;;183    void LED_state(void){
003838  b500              PUSH     {lr}
;;;184    if(sleep_flag == 1)
00383a  482c              LDR      r0,|L1.14572|
00383c  6800              LDR      r0,[r0,#0]  ; sleep_flag
00383e  2801              CMP      r0,#1
003840  d102              BNE      |L1.14408|
;;;185    {stateCount=99;
003842  2063              MOVS     r0,#0x63
003844  492a              LDR      r1,|L1.14576|
003846  7008              STRB     r0,[r1,#0]
                  |L1.14408|
;;;186    }	
;;;187    			
;;;188    	switch(stateCount){
003848  4829              LDR      r0,|L1.14576|
00384a  7800              LDRB     r0,[r0,#0]  ; stateCount
00384c  0003              MOVS     r3,r0
00384e  f7fffffe          BL       __ARM_common_switch8
003852  0604              DCB      0x06,0x04
003854  0c141c53          DCB      0x0c,0x14,0x1c,0x53
003858  5b63              DCB      0x5b,0x63
;;;189    
;;;190    		
;;;191                case 0:     //Red
;;;192                       REDBAT_ON;
00385a  2040              MOVS     r0,#0x40
00385c  4925              LDR      r1,|L1.14580|
00385e  6088              STR      r0,[r1,#8]
;;;193                       GREENBAT_OFF;
003860  2080              MOVS     r0,#0x80
003862  6048              STR      r0,[r1,#4]
;;;194                       BLUEBAT_OFF;
003864  0040              LSLS     r0,r0,#1
003866  6048              STR      r0,[r1,#4]
;;;195                       break;
003868  e061              B        |L1.14638|
;;;196    
;;;197                case 1:	//Yellow
;;;198    		               REDBAT_ON;
00386a  2040              MOVS     r0,#0x40
00386c  4921              LDR      r1,|L1.14580|
00386e  6088              STR      r0,[r1,#8]
;;;199    		               GREENBAT_ON;
003870  2080              MOVS     r0,#0x80
003872  6088              STR      r0,[r1,#8]
;;;200    		               BLUEBAT_OFF;
003874  0040              LSLS     r0,r0,#1
003876  6048              STR      r0,[r1,#4]
;;;201    		               break;
003878  e059              B        |L1.14638|
;;;202    				
;;;203                case 2:	//Green
;;;204    		               REDBAT_OFF;
00387a  2040              MOVS     r0,#0x40
00387c  491d              LDR      r1,|L1.14580|
00387e  6048              STR      r0,[r1,#4]
;;;205    		               GREENBAT_ON;
003880  2080              MOVS     r0,#0x80
003882  6088              STR      r0,[r1,#8]
;;;206    		               BLUEBAT_OFF;
003884  0040              LSLS     r0,r0,#1
003886  6048              STR      r0,[r1,#4]
;;;207    		               break;
003888  e051              B        |L1.14638|
;;;208    				
;;;209                case 3:	//Blue
;;;210    		               REDBAT_OFF;
00388a  2040              MOVS     r0,#0x40
00388c  4919              LDR      r1,|L1.14580|
00388e  6048              STR      r0,[r1,#4]
;;;211    		               GREENBAT_OFF;
003890  2080              MOVS     r0,#0x80
003892  6048              STR      r0,[r1,#4]
;;;212    		               BLUEBAT_ON;
003894  0040              LSLS     r0,r0,#1
003896  6088              STR      r0,[r1,#8]
;;;213    		               break;
003898  e049              B        |L1.14638|
00389a  0000              DCW      0x0000
                  |L1.14492|
                          DCD      0x4006b000
                  |L1.14496|
                          DCD      ||.text||+0x8fc
                  |L1.14500|
                          DCD      uart_string_gsm
                  |L1.14504|
                          DCD      tout
                  |L1.14508|
                          DCD      data
                  |L1.14512|
                          DCD      k
                  |L1.14516|
                          DCD      time
                  |L1.14520|
                          DCD      l
                  |L1.14524|
                          DCD      uart_string_gps
                  |L1.14528|
                          DCD      ||.text||+0xd54
                  |L1.14532|
                          DCD      0x4006c000
                  |L1.14536|
                          DCD      port
                  |L1.14540|
                          DCD      ||ip||
                  |L1.14544|
                          DCD      at_
                  |L1.14548|
                          DCD      tmeout
                  |L1.14552|
                          DCD      0x40048000
                  |L1.14556|
                          DCD      0x000a0102
                  |L1.14560|
                          DCD      0x4004b000
                  |L1.14564|
                          DCD      0x4004c000
                  |L1.14568|
                          DCD      0xe000e100
                  |L1.14572|
                          DCD      sleep_flag
                  |L1.14576|
                          DCD      stateCount
                  |L1.14580|
                          DCD      0x400ff080
;;;214    				
;;;215                case 4:	//Violet
;;;216    		               REDBAT_ON;
0038f8  2040              MOVS     r0,#0x40
0038fa  49fe              LDR      r1,|L1.15604|
0038fc  6088              STR      r0,[r1,#8]
;;;217    		               GREENBAT_OFF;
0038fe  2080              MOVS     r0,#0x80
003900  6048              STR      r0,[r1,#4]
;;;218    		               BLUEBAT_ON;
003902  0040              LSLS     r0,r0,#1
003904  6088              STR      r0,[r1,#8]
;;;219    		               break;
003906  e012              B        |L1.14638|
;;;220    				
;;;221                case 5:	//White
;;;222    		              REDBAT_ON;
003908  2040              MOVS     r0,#0x40
00390a  49fa              LDR      r1,|L1.15604|
00390c  6088              STR      r0,[r1,#8]
;;;223    		              GREENBAT_ON;
00390e  2080              MOVS     r0,#0x80
003910  6088              STR      r0,[r1,#8]
;;;224    		              BLUEBAT_ON;
003912  0040              LSLS     r0,r0,#1
003914  6088              STR      r0,[r1,#8]
;;;225    		              break;
003916  e00a              B        |L1.14638|
;;;226    				
;;;227                default:	//Red
;;;228    							
;;;229    
;;;230    		              REDBAT_OFF;
003918  2040              MOVS     r0,#0x40
00391a  49f6              LDR      r1,|L1.15604|
00391c  6048              STR      r0,[r1,#4]
;;;231    		              GREENBAT_OFF;
00391e  2080              MOVS     r0,#0x80
003920  6048              STR      r0,[r1,#4]
;;;232    		              BLUEBAT_OFF;
003922  0040              LSLS     r0,r0,#1
003924  6048              STR      r0,[r1,#4]
;;;233    		              stateCount = 0;	//Reset state counter
003926  2000              MOVS     r0,#0
003928  49f3              LDR      r1,|L1.15608|
00392a  7008              STRB     r0,[r1,#0]
;;;234    			      break;
00392c  bf00              NOP      
                  |L1.14638|
00392e  bf00              NOP                            ;195
;;;235    
;;;236        }
;;;237    	
;;;238    }
003930  bd00              POP      {pc}
;;;239    
                          ENDP

                  PORTD_IRQHandler PROC
;;;114    #ifdef CMSIS
;;;115    void PORTD_IRQHandler(void){
003932  b510              PUSH     {r4,lr}
;;;116      
;;;117    	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
003934  48f1              LDR      r0,|L1.15612|
003936  6a00              LDR      r0,[r0,#0x20]
003938  2108              MOVS     r1,#8
00393a  4008              ANDS     r0,r0,r1
00393c  2800              CMP      r0,#0
00393e  d014              BEQ      |L1.14698|
;;;118    	{
;;;119    		PORTC_ISFR |= (1 << SW_PIN);
003940  48ee              LDR      r0,|L1.15612|
003942  6a00              LDR      r0,[r0,#0x20]
003944  4308              ORRS     r0,r0,r1
003946  49ed              LDR      r1,|L1.15612|
003948  6208              STR      r0,[r1,#0x20]
;;;120    		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
00394a  48ed              LDR      r0,|L1.15616|
00394c  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
00394e  2101              MOVS     r1,#1
003950  4308              ORRS     r0,r0,r1
003952  49eb              LDR      r1,|L1.15616|
003954  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;121    ringflag=1;
003956  2001              MOVS     r0,#1
003958  49ea              LDR      r1,|L1.15620|
00395a  7008              STRB     r0,[r1,#0]
;;;122    send_SOS=1;	
00395c  49ea              LDR      r1,|L1.15624|
00395e  6008              STR      r0,[r1,#0]  ; send_SOS
;;;123    /**************ISR follows******/	
;;;124     stateCount++;
003960  48e5              LDR      r0,|L1.15608|
003962  7800              LDRB     r0,[r0,#0]  ; stateCount
003964  1c40              ADDS     r0,r0,#1
003966  49e4              LDR      r1,|L1.15608|
003968  7008              STRB     r0,[r1,#0]
                  |L1.14698|
;;;125    	}
;;;126    	
;;;127    	if(PORTD_ISFR & (1 << 0))		//Check for interrupt on PORTD Pin 6
00396a  48e8              LDR      r0,|L1.15628|
00396c  6a00              LDR      r0,[r0,#0x20]
00396e  07c0              LSLS     r0,r0,#31
003970  0fc0              LSRS     r0,r0,#31
003972  2800              CMP      r0,#0
003974  d012              BEQ      |L1.14748|
;;;128    	{
;;;129    		PORTD_ISFR |= (1 << 0);
003976  48e5              LDR      r0,|L1.15628|
003978  6a00              LDR      r0,[r0,#0x20]
00397a  2101              MOVS     r1,#1
00397c  4308              ORRS     r0,r0,r1
00397e  49e3              LDR      r1,|L1.15628|
003980  6208              STR      r0,[r1,#0x20]
;;;130    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
003982  48df              LDR      r0,|L1.15616|
003984  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
003986  2101              MOVS     r1,#1
003988  4308              ORRS     r0,r0,r1
00398a  49dd              LDR      r1,|L1.15616|
00398c  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;131    	
;;;132    /**************ISR follows******/	
;;;133    // stateCount++;
;;;134    ringflag=1;
00398e  2001              MOVS     r0,#1
003990  49dc              LDR      r1,|L1.15620|
003992  7008              STRB     r0,[r1,#0]
;;;135    send_SOS=1;		
003994  49dc              LDR      r1,|L1.15624|
003996  6008              STR      r0,[r1,#0]  ; send_SOS
;;;136    
;;;137    	// wakeup and reset
;;;138    	
;;;139    clear();	
003998  f7fffffe          BL       clear
                  |L1.14748|
;;;140    	}	
;;;141    	
;;;142    	
;;;143    	
;;;144    	
;;;145    	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
00399c  48db              LDR      r0,|L1.15628|
00399e  6a00              LDR      r0,[r0,#0x20]
0039a0  2140              MOVS     r1,#0x40
0039a2  4008              ANDS     r0,r0,r1
0039a4  2800              CMP      r0,#0
0039a6  d00f              BEQ      |L1.14792|
;;;146    	{
;;;147    		PORTD_ISFR |= (1 << 6);
0039a8  48d8              LDR      r0,|L1.15628|
0039aa  6a00              LDR      r0,[r0,#0x20]
0039ac  4308              ORRS     r0,r0,r1
0039ae  49d7              LDR      r1,|L1.15628|
0039b0  6208              STR      r0,[r1,#0x20]
;;;148    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
0039b2  48d3              LDR      r0,|L1.15616|
0039b4  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
0039b6  2101              MOVS     r1,#1
0039b8  4308              ORRS     r0,r0,r1
0039ba  49d1              LDR      r1,|L1.15616|
0039bc  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;149    	
;;;150    /**************ISR follows******/	
;;;151    // stateCount++;
;;;152    		
;;;153    ringflag=1;
0039be  2001              MOVS     r0,#1
0039c0  49d0              LDR      r1,|L1.15620|
0039c2  7008              STRB     r0,[r1,#0]
;;;154    	// wakeup and reset
;;;155    	
;;;156    clear();	
0039c4  f7fffffe          BL       clear
                  |L1.14792|
;;;157    	}
;;;158    	
;;;159    	LED_state();
0039c8  f7fffffe          BL       LED_state
;;;160    }
0039cc  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  PORTC_action PROC
;;;162    void PORTC_action(void){
0039ce  4770              BX       lr
;;;163    }
;;;164    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
0039d0  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
0039d2  49cf              LDR      r1,|L1.15632|
0039d4  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
0039d6  48cf              LDR      r0,|L1.15636|
0039d8  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK;   
0039da  2005              MOVS     r0,#5
0039dc  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
0039de  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
0039e0  48cb              LDR      r0,|L1.15632|
;;;17     {
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
0039e2  6900              LDR      r0,[r0,#0x10]
0039e4  0840              LSRS     r0,r0,#1
0039e6  0040              LSLS     r0,r0,#1
0039e8  49c9              LDR      r1,|L1.15632|
0039ea  6108              STR      r0,[r1,#0x10]
;;;19     }
0039ec  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
0039ee  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
0039f0  48c7              LDR      r0,|L1.15632|
0039f2  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
0039f4  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
0039f6  1b28              SUBS     r0,r5,r4
0039f8  49c7              LDR      r1,|L1.15640|
0039fa  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
0039fc  4629              MOV      r1,r5
0039fe  a0c7              ADR      r0,|L1.15644|
003a00  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
003a04  4621              MOV      r1,r4
003a06  a0cc              ADR      r0,|L1.15672|
003a08  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
003a0c  48c2              LDR      r0,|L1.15640|
003a0e  6801              LDR      r1,[r0,#0]  ; overhead
003a10  a0d0              ADR      r0,|L1.15700|
003a12  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
003a16  bd70              POP      {r4-r6,pc}
;;;13     #include "stdlib.h"
                          ENDP

                  delay2 PROC
;;;89     }
;;;90      void delay2(int delaytime)
003a18  e00c              B        |L1.14900|
                  |L1.14874|
;;;91     {
;;;92      while(delaytime--)
;;;93         {for(i=5000;i>0;i--);  // about 1 ms
003a1a  49d9              LDR      r1,|L1.15744|
003a1c  4ad9              LDR      r2,|L1.15748|
003a1e  6011              STR      r1,[r2,#0]  ; i
003a20  e004              B        |L1.14892|
                  |L1.14882|
003a22  49d8              LDR      r1,|L1.15748|
003a24  6809              LDR      r1,[r1,#0]  ; i
003a26  1e49              SUBS     r1,r1,#1
003a28  4ad6              LDR      r2,|L1.15748|
003a2a  6011              STR      r1,[r2,#0]  ; i
                  |L1.14892|
003a2c  49d5              LDR      r1,|L1.15748|
003a2e  6809              LDR      r1,[r1,#0]  ; i
003a30  2900              CMP      r1,#0
003a32  dcf6              BGT      |L1.14882|
                  |L1.14900|
003a34  4601              MOV      r1,r0                 ;92
003a36  1e40              SUBS     r0,r0,#1              ;92
003a38  2900              CMP      r1,#0                 ;92
003a3a  d1ee              BNE      |L1.14874|
;;;94         }
;;;95     }
003a3c  4770              BX       lr
;;;96             
                          ENDP

                  main PROC
;;;128    /********************************************************************/
;;;129    int main (void)
003a3e  b508              PUSH     {r3,lr}
;;;130    {
;;;131    
;;;132    
;;;133    
;;;134    //int_erval=10;
;;;135    								memset(data,0,strlen(data));
003a40  48d1              LDR      r0,|L1.15752|
003a42  f7fffffe          BL       strlen
003a46  4601              MOV      r1,r0
003a48  9000              STR      r0,[sp,#0]
003a4a  48cf              LDR      r0,|L1.15752|
003a4c  f7fffffe          BL       __aeabi_memclr
;;;136    								memset(data2,0,strlen(data2));
003a50  48ce              LDR      r0,|L1.15756|
003a52  f7fffffe          BL       strlen
003a56  4601              MOV      r1,r0
003a58  9000              STR      r0,[sp,#0]
003a5a  48cc              LDR      r0,|L1.15756|
003a5c  f7fffffe          BL       __aeabi_memclr
;;;137    	memset(ip,0,strlen(ip));
003a60  48cb              LDR      r0,|L1.15760|
003a62  f7fffffe          BL       strlen
003a66  4601              MOV      r1,r0
003a68  9000              STR      r0,[sp,#0]
003a6a  48c9              LDR      r0,|L1.15760|
003a6c  f7fffffe          BL       __aeabi_memclr
;;;138    		memset(port,0,strlen(ip));
003a70  48c7              LDR      r0,|L1.15760|
003a72  f7fffffe          BL       strlen
003a76  4601              MOV      r1,r0
003a78  9000              STR      r0,[sp,#0]
003a7a  48c6              LDR      r0,|L1.15764|
003a7c  f7fffffe          BL       __aeabi_memclr
;;;139    
;;;140    	
;;;141    start();
003a80  f7fffffe          BL       start
;;;142    systick_init();	
003a84  f7fffffe          BL       systick_init
;;;143    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;144    
;;;145    #endif
;;;146    
;;;147    int_erval=5;
003a88  2005              MOVS     r0,#5
003a8a  49c3              LDR      r1,|L1.15768|
003a8c  6008              STR      r0,[r1,#0]  ; int_erval
;;;148    
;;;149    
;;;150    	LED_init();		//Initialize GPIO for LEDs
003a8e  f7fffffe          BL       LED_init
;;;151    	RELAY_init();		//Initialize GPIO for LEDs
003a92  bf00              NOP      
003a94  48c1              LDR      r0,|L1.15772|
003a96  6b80              LDR      r0,[r0,#0x38]
003a98  2101              MOVS     r1,#1
003a9a  0249              LSLS     r1,r1,#9
003a9c  4308              ORRS     r0,r0,r1
003a9e  49bf              LDR      r1,|L1.15772|
003aa0  6388              STR      r0,[r1,#0x38]
003aa2  1588              ASRS     r0,r1,#22
003aa4  49be              LDR      r1,|L1.15776|
003aa6  6048              STR      r0,[r1,#4]
003aa8  6088              STR      r0,[r1,#8]
003aaa  4892              LDR      r0,|L1.15604|
003aac  3880              SUBS     r0,r0,#0x80
003aae  6840              LDR      r0,[r0,#4]
003ab0  2106              MOVS     r1,#6
003ab2  4308              ORRS     r0,r0,r1
003ab4  498f              LDR      r1,|L1.15604|
003ab6  3980              SUBS     r1,r1,#0x80
003ab8  6048              STR      r0,[r1,#4]
003aba  4608              MOV      r0,r1
003abc  6940              LDR      r0,[r0,#0x14]
003abe  2106              MOVS     r1,#6
003ac0  4308              ORRS     r0,r0,r1
003ac2  498c              LDR      r1,|L1.15604|
003ac4  3980              SUBS     r1,r1,#0x80
003ac6  6148              STR      r0,[r1,#0x14]
003ac8  2002              MOVS     r0,#2
003aca  6088              STR      r0,[r1,#8]
003acc  2004              MOVS     r0,#4
003ace  6088              STR      r0,[r1,#8]
003ad0  bf00              NOP      
;;;152    	SW1_init();		//Initialize GPIO for SW1 w/ interrupt
003ad2  f7fffffe          BL       SW1_init
;;;153    send_SOS=0;	
003ad6  2000              MOVS     r0,#0
003ad8  498b              LDR      r1,|L1.15624|
003ada  6008              STR      r0,[r1,#0]  ; send_SOS
;;;154    	//accel_init();
;;;155    	sleep_flag=0;
003adc  49b1              LDR      r1,|L1.15780|
003ade  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;156    	DTR_OFF;	
003ae0  2080              MOVS     r0,#0x80
003ae2  4984              LDR      r1,|L1.15604|
003ae4  3140              ADDS     r1,r1,#0x40
003ae6  6088              STR      r0,[r1,#8]
;;;157    	lptmr_init(1000, 1);	
003ae8  2101              MOVS     r1,#1
003aea  207d              MOVS     r0,#0x7d
003aec  00c0              LSLS     r0,r0,#3
003aee  f7fffffe          BL       lptmr_init
;;;158    	ADC_Init();
003af2  bf00              NOP      
003af4  48a9              LDR      r0,|L1.15772|
003af6  6bc0              LDR      r0,[r0,#0x3c]
003af8  2101              MOVS     r1,#1
003afa  06c9              LSLS     r1,r1,#27
003afc  4308              ORRS     r0,r0,r1
003afe  49a7              LDR      r1,|L1.15772|
003b00  63c8              STR      r0,[r1,#0x3c]
003b02  202d              MOVS     r0,#0x2d
003b04  49a8              LDR      r1,|L1.15784|
003b06  6088              STR      r0,[r1,#8]
003b08  2000              MOVS     r0,#0
003b0a  60c8              STR      r0,[r1,#0xc]
003b0c  6208              STR      r0,[r1,#0x20]
003b0e  4608              MOV      r0,r1
003b10  6a40              LDR      r0,[r0,#0x24]
003b12  2108              MOVS     r1,#8
003b14  4388              BICS     r0,r0,r1
003b16  49a4              LDR      r1,|L1.15784|
003b18  6248              STR      r0,[r1,#0x24]
003b1a  bf00              NOP      
;;;159    	
;;;160    //C0
;;;161    
;;;162    //SCB->AIRCR = 0x05fA0000;
;;;163    
;;;164    	int_erval=0;
003b1c  2000              MOVS     r0,#0
003b1e  499e              LDR      r1,|L1.15768|
003b20  6008              STR      r0,[r1,#0]  ; int_erval
;;;165    
;;;166    		uart_putchar(UART1_BASE_PTR,0xA);
003b22  210a              MOVS     r1,#0xa
003b24  48a1              LDR      r0,|L1.15788|
003b26  f7fffffe          BL       uart_putchar
;;;167    		uart_putchar(UART1_BASE_PTR,0x1A);			
003b2a  211a              MOVS     r1,#0x1a
003b2c  489f              LDR      r0,|L1.15788|
003b2e  f7fffffe          BL       uart_putchar
;;;168    	
;;;169    send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",2);  
003b32  2002              MOVS     r0,#2
003b34  4b9e              LDR      r3,|L1.15792|
003b36  4a9f              LDR      r2,|L1.15796|
003b38  4611              MOV      r1,r2
003b3a  3114              ADDS     r1,r1,#0x14
003b3c  9000              STR      r0,[sp,#0]
003b3e  a09e              ADR      r0,|L1.15800|
003b40  f7fffffe          BL       send_GSM
;;;170     delay(100); 
003b44  2064              MOVS     r0,#0x64
003b46  f7fffffe          BL       delay
;;;171    
;;;172    clear();delay(100);
003b4a  f7fffffe          BL       clear
003b4e  2064              MOVS     r0,#0x64
003b50  f7fffffe          BL       delay
;;;173    GPS_COLLECT();
003b54  f7fffffe          BL       GPS_COLLECT
;;;174    strcat(data,"CH'1'\n");	
003b58  a199              ADR      r1,|L1.15808|
003b5a  488b              LDR      r0,|L1.15752|
003b5c  f7fffffe          BL       strcat
;;;175    
;;;176    
;;;177    int_erval=5;
003b60  2005              MOVS     r0,#5
003b62  498d              LDR      r1,|L1.15768|
003b64  6008              STR      r0,[r1,#0]  ; int_erval
;;;178    
;;;179    //if(!(strstr(uart_string_gsm, "OK")|| strstr(uart_string_gsm, "ERROR")))
;;;180    //{HardFault_Handler();}
;;;181    ignread();
003b66  f7fffffe          BL       ignread
;;;182    
;;;183    //	saveapn();
;;;184    	
;;;185    //readapn();
;;;186    
;;;187    //HardFault_Handler();
;;;188    
;;;189    //RESET_ON;
;;;190    
;;;191    
;;;192    
;;;193    //GPS_COLLECT();
;;;194    //  strcat(data,"CH\n");	
;;;195    //	
;;;196    
;;;197    GPS_COLLECT();
003b6a  f7fffffe          BL       GPS_COLLECT
;;;198    strcat(data,"CH\n");	
003b6e  4991              LDR      r1,|L1.15796|
003b70  3930              SUBS     r1,r1,#0x30
003b72  4885              LDR      r0,|L1.15752|
003b74  f7fffffe          BL       strcat
;;;199    
;;;200    
;;;201    stateCount=3;
003b78  2003              MOVS     r0,#3
003b7a  495f              LDR      r1,|L1.15608|
003b7c  7008              STRB     r0,[r1,#0]
;;;202    LED_state();
003b7e  f7fffffe          BL       LED_state
;;;203    
;;;204    
;;;205    
;;;206    
;;;207    
;;;208    	
;;;209    //send_modem2("$PMTK225,0*2B");
;;;210    //while(!strstr(uart_string_gsm,"OK\r\n"));
;;;211    
;;;212    //bat_cind();
;;;213    delay(4000);
003b82  207d              MOVS     r0,#0x7d
003b84  0140              LSLS     r0,r0,#5
003b86  f7fffffe          BL       delay
;;;214    
;;;215    
;;;216    
;;;217    //delay(10);
;;;218    send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003b8a  488f              LDR      r0,|L1.15816|
003b8c  6800              LDR      r0,[r0,#0]  ; tmeout
003b8e  4b88              LDR      r3,|L1.15792|
003b90  4a88              LDR      r2,|L1.15796|
003b92  4611              MOV      r1,r2
003b94  3114              ADDS     r1,r1,#0x14
003b96  9000              STR      r0,[sp,#0]
003b98  a08c              ADR      r0,|L1.15820|
003b9a  f7fffffe          BL       send_GSM
;;;219    
;;;220    send_GSM("\n\nAT+SD2PCM=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003b9e  488a              LDR      r0,|L1.15816|
003ba0  6800              LDR      r0,[r0,#0]  ; tmeout
003ba2  4b83              LDR      r3,|L1.15792|
003ba4  4a83              LDR      r2,|L1.15796|
003ba6  4611              MOV      r1,r2
003ba8  3114              ADDS     r1,r1,#0x14
003baa  9000              STR      r0,[sp,#0]
003bac  a08c              ADR      r0,|L1.15840|
003bae  f7fffffe          BL       send_GSM
;;;221    //delay(10);	
;;;222    
;;;223    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003bb2  4885              LDR      r0,|L1.15816|
003bb4  6800              LDR      r0,[r0,#0]  ; tmeout
003bb6  4b7e              LDR      r3,|L1.15792|
003bb8  4a7e              LDR      r2,|L1.15796|
003bba  4611              MOV      r1,r2
003bbc  3114              ADDS     r1,r1,#0x14
003bbe  9000              STR      r0,[sp,#0]
003bc0  a08b              ADR      r0,|L1.15856|
003bc2  f7fffffe          BL       send_GSM
;;;224    delay(10);	
003bc6  200a              MOVS     r0,#0xa
003bc8  f7fffffe          BL       delay
;;;225    send_GSM("\n\nAT+FSDRIVE=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003bcc  487e              LDR      r0,|L1.15816|
003bce  6800              LDR      r0,[r0,#0]  ; tmeout
003bd0  4b77              LDR      r3,|L1.15792|
003bd2  4a78              LDR      r2,|L1.15796|
003bd4  4611              MOV      r1,r2
003bd6  3114              ADDS     r1,r1,#0x14
003bd8  9000              STR      r0,[sp,#0]
003bda  a088              ADR      r0,|L1.15868|
003bdc  f7fffffe          BL       send_GSM
;;;226    clear();
003be0  f7fffffe          BL       clear
;;;227    delay(10);	
003be4  200a              MOVS     r0,#0xa
003be6  f7fffffe          BL       delay
;;;228    
;;;229    send_modem("\r\n\r\n\r\n\r\n\r\nDEVICE HAS STARTED\r\n\r\n");
003bea  a089              ADR      r0,|L1.15888|
003bec  f7fffffe          BL       send_modem
;;;230    
;;;231    //;	
;;;232    //send_GSM("\n\nAT+FSCREATE=D:\\LOG.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;233    
;;;234    	GPS_COLLECT();
003bf0  f7fffffe          BL       GPS_COLLECT
;;;235      strcat(data,"CH\n");	
003bf4  496f              LDR      r1,|L1.15796|
003bf6  3930              SUBS     r1,r1,#0x30
003bf8  4863              LDR      r0,|L1.15752|
003bfa  f7fffffe          BL       strcat
;;;236    
;;;237    send_GSM("\n\nAT+FSMEM\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003bfe  4872              LDR      r0,|L1.15816|
003c00  6800              LDR      r0,[r0,#0]  ; tmeout
003c02  4b6b              LDR      r3,|L1.15792|
003c04  4a6b              LDR      r2,|L1.15796|
003c06  4611              MOV      r1,r2
003c08  3114              ADDS     r1,r1,#0x14
003c0a  9000              STR      r0,[sp,#0]
003c0c  a089              ADR      r0,|L1.15924|
003c0e  f7fffffe          BL       send_GSM
;;;238    delay(100);	
003c12  2064              MOVS     r0,#0x64
003c14  f7fffffe          BL       delay
;;;239    
;;;240    strcat(ip,"rudra.jellyfishtele.com");
003c18  a18a              ADR      r1,|L1.15940|
003c1a  485d              LDR      r0,|L1.15760|
003c1c  f7fffffe          BL       strcat
;;;241    strcat(port,"5555");
003c20  a18e              ADR      r1,|L1.15964|
003c22  485c              LDR      r0,|L1.15764|
003c24  f7fffffe          BL       strcat
;;;242    
;;;243    
;;;244    
;;;245    for(testingcode=0;testingcode<5;testingcode++)
003c28  2000              MOVS     r0,#0
003c2a  498e              LDR      r1,|L1.15972|
003c2c  6008              STR      r0,[r1,#0]  ; testingcode
003c2e  e1ed              B        |L1.16396|
                  |L1.15408|
;;;246    {
;;;247    	
;;;248    memset(data,0,strlen(data));	
003c30  4855              LDR      r0,|L1.15752|
003c32  f7fffffe          BL       strlen
003c36  4601              MOV      r1,r0
003c38  9000              STR      r0,[sp,#0]
003c3a  4853              LDR      r0,|L1.15752|
003c3c  f7fffffe          BL       __aeabi_memclr
;;;249    	
;;;250    	
;;;251    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",20);	
003c40  2014              MOVS     r0,#0x14
003c42  4b5c              LDR      r3,|L1.15796|
003c44  3b78              SUBS     r3,r3,#0x78
003c46  4a5b              LDR      r2,|L1.15796|
003c48  a187              ADR      r1,|L1.15976|
003c4a  9000              STR      r0,[sp,#0]
003c4c  4610              MOV      r0,r2
003c4e  3020              ADDS     r0,r0,#0x20
003c50  f7fffffe          BL       send_GSM
;;;252    clear();	
003c54  f7fffffe          BL       clear
;;;253    //delay(10);
;;;254    
;;;255    send_GSM("\r\nAT+CFUN=1\r\n", "Ready", "NOT INSERTED" , "ERROR",20);	
003c58  2014              MOVS     r0,#0x14
003c5a  4b56              LDR      r3,|L1.15796|
003c5c  3b78              SUBS     r3,r3,#0x78
003c5e  a283              ADR      r2,|L1.15980|
003c60  a186              ADR      r1,|L1.15996|
003c62  9000              STR      r0,[sp,#0]
003c64  4618              MOV      r0,r3
003c66  30bc              ADDS     r0,r0,#0xbc
003c68  f7fffffe          BL       send_GSM
;;;256    
;;;257    	
;;;258    GPS_COLLECT();
003c6c  f7fffffe          BL       GPS_COLLECT
;;;259    strcat(data,"CH\n");	
003c70  4950              LDR      r1,|L1.15796|
003c72  3930              SUBS     r1,r1,#0x30
003c74  4844              LDR      r0,|L1.15752|
003c76  f7fffffe          BL       strcat
;;;260    
;;;261    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",15);	
003c7a  200f              MOVS     r0,#0xf
003c7c  4b4c              LDR      r3,|L1.15792|
003c7e  4a4d              LDR      r2,|L1.15796|
003c80  a179              ADR      r1,|L1.15976|
003c82  9000              STR      r0,[sp,#0]
003c84  4618              MOV      r0,r3
003c86  300c              ADDS     r0,r0,#0xc
003c88  f7fffffe          BL       send_GSM
;;;262    //delay(20);		
;;;263    
;;;264    msg_sim800(); 
003c8c  f7fffffe          BL       msg_sim800
;;;265    
;;;266    memset(at_,0,100);
003c90  2164              MOVS     r1,#0x64
003c92  487c              LDR      r0,|L1.16004|
003c94  f7fffffe          BL       __aeabi_memclr
;;;267    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
003c98  4a7b              LDR      r2,|L1.16008|
003c9a  4945              LDR      r1,|L1.15792|
003c9c  3120              ADDS     r1,r1,#0x20
003c9e  4879              LDR      r0,|L1.16004|
003ca0  f7fffffe          BL       __2sprintf
;;;268    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
003ca4  4848              LDR      r0,|L1.15816|
003ca6  6800              LDR      r0,[r0,#0]  ; tmeout
003ca8  4b41              LDR      r3,|L1.15792|
003caa  4a42              LDR      r2,|L1.15796|
003cac  a16e              ADR      r1,|L1.15976|
003cae  9000              STR      r0,[sp,#0]
003cb0  4874              LDR      r0,|L1.16004|
003cb2  f7fffffe          BL       send_GSM
;;;269    //delay(20);
;;;270    //					GPS_COLLECT();
;;;271    
;;;272    msg_sim800(); 
003cb6  f7fffffe          BL       msg_sim800
;;;273    
;;;274    
;;;275    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
003cba  2005              MOVS     r0,#5
003cbc  4b3d              LDR      r3,|L1.15796|
003cbe  3b5c              SUBS     r3,r3,#0x5c
003cc0  4a3c              LDR      r2,|L1.15796|
003cc2  a169              ADR      r1,|L1.15976|
003cc4  9000              STR      r0,[sp,#0]
003cc6  483a              LDR      r0,|L1.15792|
003cc8  3038              ADDS     r0,r0,#0x38
003cca  f7fffffe          BL       send_GSM
;;;276    //delay(20);
;;;277    
;;;278    msg_sim800(); 
003cce  f7fffffe          BL       msg_sim800
;;;279    
;;;280    
;;;281    clear();send_modem("\nAT+CIFSR\r\r\n");clear();
003cd2  f7fffffe          BL       clear
003cd6  4836              LDR      r0,|L1.15792|
003cd8  3048              ADDS     r0,r0,#0x48
003cda  f7fffffe          BL       send_modem
003cde  f7fffffe          BL       clear
;;;282    delay(20);
003ce2  2014              MOVS     r0,#0x14
003ce4  f7fffffe          BL       delay
;;;283    
;;;284    
;;;285    msg_sim800(); 
003ce8  f7fffffe          BL       msg_sim800
;;;286    
;;;287    
;;;288    sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
003cec  4b29              LDR      r3,|L1.15764|
003cee  4a28              LDR      r2,|L1.15760|
003cf0  492f              LDR      r1,|L1.15792|
003cf2  e0cb              B        |L1.16012|
                  |L1.15604|
                          DCD      0x400ff080
                  |L1.15608|
                          DCD      stateCount
                  |L1.15612|
                          DCD      0x4004b080
                  |L1.15616|
                          DCD      gu32PortStatus
                  |L1.15620|
                          DCD      ringflag
                  |L1.15624|
                          DCD      send_SOS
                  |L1.15628|
                          DCD      0x4004c080
                  |L1.15632|
                          DCD      0xe000e000
                  |L1.15636|
                          DCD      0x00009c3f
                  |L1.15640|
                          DCD      overhead
                  |L1.15644|
003d1c  73797374          DCB      "systick start value: 0x%x\n\r",0
003d20  69636b20
003d24  73746172
003d28  74207661
003d2c  6c75653a
003d30  20307825
003d34  780a0d00
                  |L1.15672|
003d38  73797374          DCB      "systick end value: 0x%x\n\r",0
003d3c  69636b20
003d40  656e6420
003d44  76616c75
003d48  653a2030
003d4c  7825780a
003d50  0d00    
003d52  00                DCB      0
003d53  00                DCB      0
                  |L1.15700|
003d54  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
003d58  69636b20
003d5c  63757272
003d60  656e7420
003d64  76616c75
003d68  65207265
003d6c  6164206f
003d70  76657268
003d74  6561643a
003d78  20307825
003d7c  780a0d00
                  |L1.15744|
                          DCD      0x00001388
                  |L1.15748|
                          DCD      i
                  |L1.15752|
                          DCD      data
                  |L1.15756|
                          DCD      data2
                  |L1.15760|
                          DCD      ||ip||
                  |L1.15764|
                          DCD      port
                  |L1.15768|
                          DCD      int_erval
                  |L1.15772|
                          DCD      0x40048000
                  |L1.15776|
                          DCD      0x40049000
                  |L1.15780|
                          DCD      sleep_flag
                  |L1.15784|
                          DCD      0x4003b000
                  |L1.15788|
                          DCD      0x4006b000
                  |L1.15792|
                          DCD      ||.text||+0xd54
                  |L1.15796|
                          DCD      ||.text||+0x8e8
                  |L1.15800|
003db8  0a0a4154          DCB      "\n\nAT\r\n",0
003dbc  0d0a00  
003dbf  00                DCB      0
                  |L1.15808|
003dc0  43482731          DCB      "CH'1'\n",0
003dc4  270a00  
003dc7  00                DCB      0
                  |L1.15816|
                          DCD      tmeout
                  |L1.15820|
003dcc  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
003dd0  2b435042
003dd4  533d2253
003dd8  4d220d0a
003ddc  00      
003ddd  00                DCB      0
003dde  00                DCB      0
003ddf  00                DCB      0
                  |L1.15840|
003de0  0a0a4154          DCB      "\n\nAT+SD2PCM=0\r\n",0
003de4  2b534432
003de8  50434d3d
003dec  300d0a00
                  |L1.15856|
003df0  0a0a4154          DCB      "\n\nAT&W\r\n",0
003df4  26570d0a
003df8  00      
003df9  00                DCB      0
003dfa  00                DCB      0
003dfb  00                DCB      0
                  |L1.15868|
003dfc  0a0a4154          DCB      "\n\nAT+FSDRIVE=1\r\n",0
003e00  2b465344
003e04  52495645
003e08  3d310d0a
003e0c  00      
003e0d  00                DCB      0
003e0e  00                DCB      0
003e0f  00                DCB      0
                  |L1.15888|
003e10  0d0a0d0a          DCB      "\r\n\r\n\r\n\r\n\r\nDEVICE HAS STARTED\r\n\r\n",0
003e14  0d0a0d0a
003e18  0d0a4445
003e1c  56494345
003e20  20484153
003e24  20535441
003e28  52544544
003e2c  0d0a0d0a
003e30  00      
003e31  00                DCB      0
003e32  00                DCB      0
003e33  00                DCB      0
                  |L1.15924|
003e34  0a0a4154          DCB      "\n\nAT+FSMEM\r\n",0
003e38  2b46534d
003e3c  454d0d0a
003e40  00      
003e41  00                DCB      0
003e42  00                DCB      0
003e43  00                DCB      0
                  |L1.15940|
003e44  72756472          DCB      "rudra.jellyfishtele.com",0
003e48  612e6a65
003e4c  6c6c7966
003e50  69736874
003e54  656c652e
003e58  636f6d00
                  |L1.15964|
003e5c  35353535          DCB      "5555",0
003e60  00      
003e61  00                DCB      0
003e62  00                DCB      0
003e63  00                DCB      0
                  |L1.15972|
                          DCD      testingcode
                  |L1.15976|
003e68  4f4b00            DCB      "OK",0
003e6b  00                DCB      0
                  |L1.15980|
003e6c  4e4f5420          DCB      "NOT INSERTED",0
003e70  494e5345
003e74  52544544
003e78  00      
003e79  00                DCB      0
003e7a  00                DCB      0
003e7b  00                DCB      0
                  |L1.15996|
003e7c  52656164          DCB      "Ready",0
003e80  7900    
003e82  00                DCB      0
003e83  00                DCB      0
                  |L1.16004|
                          DCD      at_
                  |L1.16008|
                          DCD      apn
                  |L1.16012|
003e8c  3160              ADDS     r1,r1,#0x60
003e8e  48f8              LDR      r0,|L1.17008|
003e90  f7fffffe          BL       __2sprintf
;;;289    send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
003e94  48f7              LDR      r0,|L1.17012|
003e96  6800              LDR      r0,[r0,#0]  ; tmeout
003e98  4bf7              LDR      r3,|L1.17016|
003e9a  461a              MOV      r2,r3
003e9c  3278              ADDS     r2,r2,#0x78
003e9e  49f7              LDR      r1,|L1.17020|
003ea0  9000              STR      r0,[sp,#0]
003ea2  48f3              LDR      r0,|L1.17008|
003ea4  f7fffffe          BL       send_GSM
;;;290    clear();
003ea8  f7fffffe          BL       clear
;;;291    
;;;292    GPS_COLLECT();
003eac  f7fffffe          BL       GPS_COLLECT
;;;293    strcat(data,"CH\n");	
003eb0  49f1              LDR      r1,|L1.17016|
003eb2  3148              ADDS     r1,r1,#0x48
003eb4  48f2              LDR      r0,|L1.17024|
003eb6  f7fffffe          BL       strcat
;;;294    
;;;295    int_erval=temp;
003eba  48f2              LDR      r0,|L1.17028|
003ebc  6800              LDR      r0,[r0,#0]  ; temp
003ebe  49f2              LDR      r1,|L1.17032|
003ec0  6008              STR      r0,[r1,#0]  ; int_erval
;;;296    //resetting it to its value
;;;297    
;;;298    send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
003ec2  48ec              LDR      r0,|L1.17012|
003ec4  6800              LDR      r0,[r0,#0]  ; tmeout
003ec6  4bed              LDR      r3,|L1.17020|
003ec8  3308              ADDS     r3,r3,#8
003eca  4aeb              LDR      r2,|L1.17016|
003ecc  a1ef              ADR      r1,|L1.17036|
003ece  9000              STR      r0,[sp,#0]
003ed0  4618              MOV      r0,r3
003ed2  3010              ADDS     r0,r0,#0x10
003ed4  f7fffffe          BL       send_GSM
;;;299    
;;;300    
;;;301    memset(stcond1,0,strlen(stcond1));	
003ed8  48ed              LDR      r0,|L1.17040|
003eda  6800              LDR      r0,[r0,#0]  ; stcond1
003edc  f7fffffe          BL       strlen
003ee0  4601              MOV      r1,r0
003ee2  9000              STR      r0,[sp,#0]
003ee4  48ea              LDR      r0,|L1.17040|
003ee6  6800              LDR      r0,[r0,#0]  ; stcond1
003ee8  f7fffffe          BL       __aeabi_memclr
;;;302    memset(con1d,0,strlen(con1d));	
003eec  48e9              LDR      r0,|L1.17044|
003eee  6800              LDR      r0,[r0,#0]  ; con1d
003ef0  f7fffffe          BL       strlen
003ef4  4601              MOV      r1,r0
003ef6  9000              STR      r0,[sp,#0]
003ef8  48e6              LDR      r0,|L1.17044|
003efa  6800              LDR      r0,[r0,#0]  ; con1d
003efc  f7fffffe          BL       __aeabi_memclr
;;;303    
;;;304    //sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;305    
;;;306    cond=mystrstr(uart_string_gsm,'>');
003f00  213e              MOVS     r1,#0x3e
003f02  48e5              LDR      r0,|L1.17048|
003f04  f7fffffe          BL       mystrstr
003f08  49e4              LDR      r1,|L1.17052|
003f0a  7008              STRB     r0,[r1,#0]
;;;307    if(cond)	
003f0c  4608              MOV      r0,r1
003f0e  7800              LDRB     r0,[r0,#0]  ; cond
003f10  2800              CMP      r0,#0
003f12  d076              BEQ      |L1.16386|
;;;308    {
;;;309    		clear();
003f14  f7fffffe          BL       clear
;;;310    									memset(uart_string_gsm,0,5000);
003f18  49e1              LDR      r1,|L1.17056|
003f1a  48df              LDR      r0,|L1.17048|
003f1c  f7fffffe          BL       __aeabi_memclr
;;;311    									strcat(data,"\n");
003f20  a1e0              ADR      r1,|L1.17060|
003f22  48d7              LDR      r0,|L1.17024|
003f24  f7fffffe          BL       strcat
;;;312    									len=strlen(data);
003f28  48d5              LDR      r0,|L1.17024|
003f2a  f7fffffe          BL       strlen
003f2e  49de              LDR      r1,|L1.17064|
003f30  6008              STR      r0,[r1,#0]  ; len
;;;313    									tout=0;
003f32  2000              MOVS     r0,#0
003f34  49dd              LDR      r1,|L1.17068|
003f36  6008              STR      r0,[r1,#0]  ; tout
;;;314    									k2=0;
003f38  49dd              LDR      r1,|L1.17072|
003f3a  6008              STR      r0,[r1,#0]  ; k2
;;;315    									for(k=0;k<len;k++)
003f3c  49dd              LDR      r1,|L1.17076|
003f3e  6008              STR      r0,[r1,#0]  ; k
003f40  e00d              B        |L1.16222|
                  |L1.16194|
;;;316    									{
;;;317    										uart_putchar(UART1_BASE_PTR, data[k]);
003f42  48cf              LDR      r0,|L1.17024|
003f44  49db              LDR      r1,|L1.17076|
003f46  6809              LDR      r1,[r1,#0]  ; k
003f48  5c40              LDRB     r0,[r0,r1]
003f4a  4601              MOV      r1,r0
003f4c  9000              STR      r0,[sp,#0]
003f4e  48da              LDR      r0,|L1.17080|
003f50  f7fffffe          BL       uart_putchar
003f54  48d7              LDR      r0,|L1.17076|
003f56  6800              LDR      r0,[r0,#0]            ;315  ; k
003f58  1c40              ADDS     r0,r0,#1              ;315
003f5a  49d6              LDR      r1,|L1.17076|
003f5c  6008              STR      r0,[r1,#0]            ;315  ; k
                  |L1.16222|
003f5e  48d5              LDR      r0,|L1.17076|
003f60  6800              LDR      r0,[r0,#0]            ;315  ; k
003f62  49d1              LDR      r1,|L1.17064|
003f64  6809              LDR      r1,[r1,#0]            ;315  ; len
003f66  4288              CMP      r0,r1                 ;315
003f68  dbeb              BLT      |L1.16194|
;;;318    									}
;;;319    																		
;;;320    									uart_putchar(UART1_BASE_PTR, 0x1A);
003f6a  211a              MOVS     r1,#0x1a
003f6c  48d2              LDR      r0,|L1.17080|
003f6e  f7fffffe          BL       uart_putchar
;;;321    									do
003f72  bf00              NOP      
                  |L1.16244|
;;;322    																{stcond1=strstr(uart_string_gsm,"SEND OK");
003f74  49d1              LDR      r1,|L1.17084|
003f76  48c8              LDR      r0,|L1.17048|
003f78  f7fffffe          BL       strstr
003f7c  49c4              LDR      r1,|L1.17040|
003f7e  6008              STR      r0,[r1,#0]  ; stcond1
;;;323    																	stcond2=strstr(uart_string_gsm, "ERROR");
003f80  49bd              LDR      r1,|L1.17016|
003f82  48c5              LDR      r0,|L1.17048|
003f84  f7fffffe          BL       strstr
003f88  49cd              LDR      r1,|L1.17088|
003f8a  6008              STR      r0,[r1,#0]  ; stcond2
;;;324    																		stcond3=strstr(uart_string_gsm, "FAIL");	
003f8c  49bb              LDR      r1,|L1.17020|
003f8e  3110              ADDS     r1,r1,#0x10
003f90  48c1              LDR      r0,|L1.17048|
003f92  f7fffffe          BL       strstr
003f96  49cb              LDR      r1,|L1.17092|
003f98  6008              STR      r0,[r1,#0]  ; stcond3
;;;325    																			stcond4=strstr(uart_string_gsm, "DEACT");	
003f9a  49b7              LDR      r1,|L1.17016|
003f9c  311c              ADDS     r1,r1,#0x1c
003f9e  48be              LDR      r0,|L1.17048|
003fa0  f7fffffe          BL       strstr
003fa4  49c8              LDR      r1,|L1.17096|
003fa6  6008              STR      r0,[r1,#0]  ; stcond4
;;;326    																	
;;;327    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
003fa8  48c5              LDR      r0,|L1.17088|
003faa  6800              LDR      r0,[r0,#0]  ; stcond2
003fac  2800              CMP      r0,#0
003fae  d10f              BNE      |L1.16336|
003fb0  48c4              LDR      r0,|L1.17092|
003fb2  6800              LDR      r0,[r0,#0]  ; stcond3
003fb4  2800              CMP      r0,#0
003fb6  d10b              BNE      |L1.16336|
003fb8  4608              MOV      r0,r1
003fba  6800              LDR      r0,[r0,#0]  ; stcond4
003fbc  2800              CMP      r0,#0
003fbe  d107              BNE      |L1.16336|
003fc0  48b3              LDR      r0,|L1.17040|
003fc2  6800              LDR      r0,[r0,#0]  ; stcond1
003fc4  2800              CMP      r0,#0
003fc6  d103              BNE      |L1.16336|
003fc8  48b8              LDR      r0,|L1.17068|
003fca  6800              LDR      r0,[r0,#0]  ; tout
003fcc  2808              CMP      r0,#8
003fce  ddd1              BLE      |L1.16244|
                  |L1.16336|
;;;328    																//delay(10);clear();
;;;329    														uart_putchar(UART1_BASE_PTR,0x1A);
003fd0  211a              MOVS     r1,#0x1a
003fd2  48b9              LDR      r0,|L1.17080|
003fd4  f7fffffe          BL       uart_putchar
;;;330    												//delay(10);
;;;331    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
003fd8  211a              MOVS     r1,#0x1a
003fda  48b7              LDR      r0,|L1.17080|
003fdc  f7fffffe          BL       uart_putchar
003fe0  211a              MOVS     r1,#0x1a
003fe2  48b5              LDR      r0,|L1.17080|
003fe4  f7fffffe          BL       uart_putchar
003fe8  211a              MOVS     r1,#0x1a
003fea  48b3              LDR      r0,|L1.17080|
003fec  f7fffffe          BL       uart_putchar
;;;332    						
;;;333    									
;;;334    delay(50);
003ff0  2032              MOVS     r0,#0x32
003ff2  f7fffffe          BL       delay
;;;335    stcond1=strstr(uart_string_gsm,"SEND OK");								
003ff6  49b1              LDR      r1,|L1.17084|
003ff8  48a7              LDR      r0,|L1.17048|
003ffa  f7fffffe          BL       strstr
003ffe  49a4              LDR      r1,|L1.17040|
004000  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.16386|
004002  48b2              LDR      r0,|L1.17100|
004004  6800              LDR      r0,[r0,#0]            ;245  ; testingcode
004006  1c40              ADDS     r0,r0,#1              ;245
004008  49b0              LDR      r1,|L1.17100|
00400a  6008              STR      r0,[r1,#0]            ;245  ; testingcode
                  |L1.16396|
00400c  48af              LDR      r0,|L1.17100|
00400e  6800              LDR      r0,[r0,#0]            ;245  ; testingcode
004010  2805              CMP      r0,#5                 ;245
004012  da00              BGE      |L1.16406|
004014  e60c              B        |L1.15408|
                  |L1.16406|
;;;336    								
;;;337    }
;;;338    	
;;;339    }
;;;340    
;;;341    
;;;342    
;;;343    
;;;344    
;;;345    
;;;346    
;;;347    
;;;348    
;;;349    
;;;350    
;;;351    
;;;352    
;;;353    
;;;354    
;;;355    
;;;356    								saveapn();								
004016  f7fffffe          BL       saveapn
;;;357    								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00401a  4896              LDR      r0,|L1.17012|
00401c  6800              LDR      r0,[r0,#0]  ; tmeout
00401e  4b97              LDR      r3,|L1.17020|
004020  3b80              SUBS     r3,r3,#0x80
004022  4a95              LDR      r2,|L1.17016|
004024  3278              ADDS     r2,r2,#0x78
004026  a1aa              ADR      r1,|L1.17104|
004028  9000              STR      r0,[sp,#0]
00402a  a0aa              ADR      r0,|L1.17108|
00402c  f7fffffe          BL       send_GSM
;;;358    								send_GSM("\nAT+FSCREATE=D:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
004030  4890              LDR      r0,|L1.17012|
004032  6800              LDR      r0,[r0,#0]  ; tmeout
004034  4b91              LDR      r3,|L1.17020|
004036  3b80              SUBS     r3,r3,#0x80
004038  4a8f              LDR      r2,|L1.17016|
00403a  3278              ADDS     r2,r2,#0x78
00403c  a1a4              ADR      r1,|L1.17104|
00403e  9000              STR      r0,[sp,#0]
004040  a0ac              ADR      r0,|L1.17140|
004042  f7fffffe          BL       send_GSM
;;;359    								send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
004046  488b              LDR      r0,|L1.17012|
004048  6800              LDR      r0,[r0,#0]  ; tmeout
00404a  4b8c              LDR      r3,|L1.17020|
00404c  3b80              SUBS     r3,r3,#0x80
00404e  4a8a              LDR      r2,|L1.17016|
004050  3278              ADDS     r2,r2,#0x78
004052  a19f              ADR      r1,|L1.17104|
004054  9000              STR      r0,[sp,#0]
004056  a0ae              ADR      r0,|L1.17168|
004058  f7fffffe          BL       send_GSM
;;;360    								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00405c  4885              LDR      r0,|L1.17012|
00405e  6800              LDR      r0,[r0,#0]  ; tmeout
004060  4b86              LDR      r3,|L1.17020|
004062  3b80              SUBS     r3,r3,#0x80
004064  4a84              LDR      r2,|L1.17016|
004066  3278              ADDS     r2,r2,#0x78
004068  a199              ADR      r1,|L1.17104|
00406a  9000              STR      r0,[sp,#0]
00406c  a0af              ADR      r0,|L1.17196|
00406e  f7fffffe          BL       send_GSM
;;;361    								send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
004072  4880              LDR      r0,|L1.17012|
004074  6800              LDR      r0,[r0,#0]  ; tmeout
004076  4b81              LDR      r3,|L1.17020|
004078  3b80              SUBS     r3,r3,#0x80
00407a  4a7f              LDR      r2,|L1.17016|
00407c  3278              ADDS     r2,r2,#0x78
00407e  a194              ADR      r1,|L1.17104|
004080  9000              STR      r0,[sp,#0]
004082  a0b2              ADR      r0,|L1.17228|
004084  f7fffffe          BL       send_GSM
;;;362    
;;;363    								memset(ip,0,100);
004088  2164              MOVS     r1,#0x64
00408a  48b7              LDR      r0,|L1.17256|
00408c  f7fffffe          BL       __aeabi_memclr
;;;364    								memset(port,0,10);
004090  210a              MOVS     r1,#0xa
004092  48b6              LDR      r0,|L1.17260|
004094  f7fffffe          BL       __aeabi_memclr
;;;365    								strcat (ip, "rudra.jellyfishtele.com");
004098  49b5              LDR      r1,|L1.17264|
00409a  48b3              LDR      r0,|L1.17256|
00409c  f7fffffe          BL       strcat
;;;366    								strcat (port, "5555");		
0040a0  49b3              LDR      r1,|L1.17264|
0040a2  3118              ADDS     r1,r1,#0x18
0040a4  48b1              LDR      r0,|L1.17260|
0040a6  f7fffffe          BL       strcat
;;;367    								memcpy (interval, "5", 1);										
0040aa  48b2              LDR      r0,|L1.17268|
0040ac  a1b2              ADR      r1,|L1.17272|
0040ae  7809              LDRB     r1,[r1,#0]
0040b0  7001              STRB     r1,[r0,#0]
;;;368    								save_ip_port();
0040b2  f7fffffe          BL       save_ip_port
;;;369    								ignstaton();
0040b6  f7fffffe          BL       ignstaton
;;;370    
;;;371    								save_interval();	
0040ba  f7fffffe          BL       save_interval
;;;372    								int_erval=myAtoi(interval);		
0040be  48ad              LDR      r0,|L1.17268|
0040c0  f7fffffe          BL       myAtoi
0040c4  4970              LDR      r1,|L1.17032|
0040c6  6008              STR      r0,[r1,#0]  ; int_erval
;;;373    								savecursord();
0040c8  f7fffffe          BL       savecursord
;;;374    
;;;375    			//					printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
;;;376    								
;;;377    send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
0040cc  4869              LDR      r0,|L1.17012|
0040ce  6800              LDR      r0,[r0,#0]  ; tmeout
0040d0  4b6a              LDR      r3,|L1.17020|
0040d2  3b80              SUBS     r3,r3,#0x80
0040d4  4a68              LDR      r2,|L1.17016|
0040d6  a17e              ADR      r1,|L1.17104|
0040d8  9000              STR      r0,[sp,#0]
0040da  a0a8              ADR      r0,|L1.17276|
0040dc  f7fffffe          BL       send_GSM
;;;378    				
;;;379    								
;;;380    		RESET_OFF;delay(1000);
0040e0  2020              MOVS     r0,#0x20
0040e2  49ab              LDR      r1,|L1.17296|
0040e4  6088              STR      r0,[r1,#8]
0040e6  207d              MOVS     r0,#0x7d
0040e8  00c0              LSLS     r0,r0,#3
0040ea  f7fffffe          BL       delay
;;;381    		RESET_ON;delay(1000);		
0040ee  2020              MOVS     r0,#0x20
0040f0  49a7              LDR      r1,|L1.17296|
0040f2  6048              STR      r0,[r1,#4]
0040f4  207d              MOVS     r0,#0x7d
0040f6  00c0              LSLS     r0,r0,#3
0040f8  f7fffffe          BL       delay
;;;382    
;;;383    
;;;384    
;;;385    
;;;386    
;;;387    
;;;388    
;;;389    
;;;390    
;;;391    
;;;392    
;;;393    
;;;394    
;;;395    
;;;396    
;;;397    
;;;398    
;;;399    
;;;400    
;;;401    
;;;402    
;;;403    
;;;404    
;;;405    
;;;406    
;;;407    //setting interval 4
;;;408    
;;;409    temp=int_erval;				
0040fc  4862              LDR      r0,|L1.17032|
0040fe  6800              LDR      r0,[r0,#0]  ; int_erval
004100  4960              LDR      r1,|L1.17028|
004102  6008              STR      r0,[r1,#0]  ; temp
;;;410    int_erval=4;
004104  2004              MOVS     r0,#4
004106  4960              LDR      r1,|L1.17032|
004108  6008              STR      r0,[r1,#0]  ; int_erval
;;;411    
;;;412    
;;;413    
;;;414    								//GPS_COLLECT();
;;;415    								send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",5);	
00410a  2005              MOVS     r0,#5
00410c  4b5b              LDR      r3,|L1.17020|
00410e  3b80              SUBS     r3,r3,#0x80
004110  4a59              LDR      r2,|L1.17016|
004112  3278              ADDS     r2,r2,#0x78
004114  a16e              ADR      r1,|L1.17104|
004116  9000              STR      r0,[sp,#0]
004118  4618              MOV      r0,r3
00411a  300c              ADDS     r0,r0,#0xc
00411c  f7fffffe          BL       send_GSM
;;;416    								//delay(20);		
;;;417    								GPS_COLLECT();
004120  f7fffffe          BL       GPS_COLLECT
;;;418    								strcat(data,"CH\n");	
004124  4954              LDR      r1,|L1.17016|
004126  3148              ADDS     r1,r1,#0x48
004128  4855              LDR      r0,|L1.17024|
00412a  f7fffffe          BL       strcat
;;;419    
;;;420    
;;;421    msg_sim800(); 
00412e  f7fffffe          BL       msg_sim800
;;;422    
;;;423    	memset(at_,0,100);
004132  2164              MOVS     r1,#0x64
004134  484e              LDR      r0,|L1.17008|
004136  f7fffffe          BL       __aeabi_memclr
;;;424    		sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
00413a  4a96              LDR      r2,|L1.17300|
00413c  494f              LDR      r1,|L1.17020|
00413e  3960              SUBS     r1,r1,#0x60
004140  484b              LDR      r0,|L1.17008|
004142  f7fffffe          BL       __2sprintf
;;;425    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
004146  484b              LDR      r0,|L1.17012|
004148  6800              LDR      r0,[r0,#0]  ; tmeout
00414a  4b4c              LDR      r3,|L1.17020|
00414c  3b80              SUBS     r3,r3,#0x80
00414e  4a4a              LDR      r2,|L1.17016|
004150  3278              ADDS     r2,r2,#0x78
004152  a15f              ADR      r1,|L1.17104|
004154  9000              STR      r0,[sp,#0]
004156  4846              LDR      r0,|L1.17008|
004158  f7fffffe          BL       send_GSM
;;;426    								//delay(20);
;;;427    			//					GPS_COLLECT();
;;;428    
;;;429    msg_sim800(); 
00415c  f7fffffe          BL       msg_sim800
;;;430    
;;;431    	
;;;432    								send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
004160  2005              MOVS     r0,#5
004162  4b45              LDR      r3,|L1.17016|
004164  331c              ADDS     r3,r3,#0x1c
004166  461a              MOV      r2,r3
004168  325c              ADDS     r2,r2,#0x5c
00416a  a159              ADR      r1,|L1.17104|
00416c  9000              STR      r0,[sp,#0]
00416e  4843              LDR      r0,|L1.17020|
004170  3848              SUBS     r0,r0,#0x48
004172  f7fffffe          BL       send_GSM
;;;433    								//delay(20);
;;;434    								GPS_COLLECT();
004176  f7fffffe          BL       GPS_COLLECT
;;;435    								strcat(data,"CH\n");	
00417a  493f              LDR      r1,|L1.17016|
00417c  3148              ADDS     r1,r1,#0x48
00417e  4840              LDR      r0,|L1.17024|
004180  f7fffffe          BL       strcat
;;;436    
;;;437    
;;;438    
;;;439    								GPS_COLLECT();
004184  f7fffffe          BL       GPS_COLLECT
;;;440    								strcat(data,"CH\n");	
004188  493b              LDR      r1,|L1.17016|
00418a  3148              ADDS     r1,r1,#0x48
00418c  483c              LDR      r0,|L1.17024|
00418e  f7fffffe          BL       strcat
;;;441    
;;;442    msg_sim800(); 
004192  f7fffffe          BL       msg_sim800
;;;443    
;;;444    								
;;;445    								clear();send_modem("\nAT+CIFSR\r\r\n");clear();
004196  f7fffffe          BL       clear
00419a  4838              LDR      r0,|L1.17020|
00419c  3838              SUBS     r0,r0,#0x38
00419e  f7fffffe          BL       send_modem
0041a2  f7fffffe          BL       clear
;;;446    								delay(20);
0041a6  2014              MOVS     r0,#0x14
0041a8  f7fffffe          BL       delay
;;;447    	
;;;448    
;;;449    msg_sim800(); 
0041ac  f7fffffe          BL       msg_sim800
;;;450    
;;;451    		
;;;452    								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0041b0  4b6e              LDR      r3,|L1.17260|
0041b2  4a6d              LDR      r2,|L1.17256|
0041b4  4931              LDR      r1,|L1.17020|
0041b6  3920              SUBS     r1,r1,#0x20
0041b8  482d              LDR      r0,|L1.17008|
0041ba  f7fffffe          BL       __2sprintf
;;;453    								send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
0041be  482d              LDR      r0,|L1.17012|
0041c0  6800              LDR      r0,[r0,#0]  ; tmeout
0041c2  4b2d              LDR      r3,|L1.17016|
0041c4  461a              MOV      r2,r3
0041c6  3278              ADDS     r2,r2,#0x78
0041c8  492c              LDR      r1,|L1.17020|
0041ca  9000              STR      r0,[sp,#0]
0041cc  4828              LDR      r0,|L1.17008|
0041ce  f7fffffe          BL       send_GSM
;;;454    								clear();
0041d2  f7fffffe          BL       clear
;;;455    
;;;456    								GPS_COLLECT();
0041d6  f7fffffe          BL       GPS_COLLECT
;;;457    								strcat(data,"CH\n");	
0041da  4927              LDR      r1,|L1.17016|
0041dc  3148              ADDS     r1,r1,#0x48
0041de  4828              LDR      r0,|L1.17024|
0041e0  f7fffffe          BL       strcat
;;;458    
;;;459    		int_erval=temp;
0041e4  4827              LDR      r0,|L1.17028|
0041e6  6800              LDR      r0,[r0,#0]  ; temp
0041e8  4927              LDR      r1,|L1.17032|
0041ea  6008              STR      r0,[r1,#0]  ; int_erval
;;;460    //resetting it to its value
;;;461    
;;;462    								send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
0041ec  4821              LDR      r0,|L1.17012|
0041ee  6800              LDR      r0,[r0,#0]  ; tmeout
0041f0  4b22              LDR      r3,|L1.17020|
0041f2  3308              ADDS     r3,r3,#8
0041f4  4a20              LDR      r2,|L1.17016|
0041f6  a125              ADR      r1,|L1.17036|
0041f8  9000              STR      r0,[sp,#0]
0041fa  4618              MOV      r0,r3
0041fc  3010              ADDS     r0,r0,#0x10
0041fe  f7fffffe          BL       send_GSM
;;;463    
;;;464    
;;;465    memset(stcond1,0,strlen(stcond1));	
004202  4823              LDR      r0,|L1.17040|
004204  6800              LDR      r0,[r0,#0]  ; stcond1
004206  f7fffffe          BL       strlen
00420a  4601              MOV      r1,r0
00420c  9000              STR      r0,[sp,#0]
00420e  4820              LDR      r0,|L1.17040|
004210  6800              LDR      r0,[r0,#0]  ; stcond1
004212  f7fffffe          BL       __aeabi_memclr
;;;466    memset(con1d,0,strlen(con1d));	
004216  481f              LDR      r0,|L1.17044|
004218  6800              LDR      r0,[r0,#0]  ; con1d
00421a  f7fffffe          BL       strlen
00421e  4601              MOV      r1,r0
004220  9000              STR      r0,[sp,#0]
004222  481c              LDR      r0,|L1.17044|
004224  6800              LDR      r0,[r0,#0]  ; con1d
004226  f7fffffe          BL       __aeabi_memclr
;;;467    	
;;;468    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;469    						
;;;470    								cond=mystrstr(uart_string_gsm,'>');
00422a  213e              MOVS     r1,#0x3e
00422c  481a              LDR      r0,|L1.17048|
00422e  f7fffffe          BL       mystrstr
004232  491a              LDR      r1,|L1.17052|
004234  7008              STRB     r0,[r1,#0]
;;;471    								if(cond)	
004236  4608              MOV      r0,r1
004238  7800              LDRB     r0,[r0,#0]  ; cond
00423a  2800              CMP      r0,#0
00423c  d016              BEQ      |L1.17004|
;;;472    								{
;;;473    									
;;;474    									clear();
00423e  f7fffffe          BL       clear
;;;475    									memset(uart_string_gsm,0,5000);
004242  4917              LDR      r1,|L1.17056|
004244  4814              LDR      r0,|L1.17048|
004246  f7fffffe          BL       __aeabi_memclr
;;;476    									strcat(data,"\n");
00424a  a116              ADR      r1,|L1.17060|
00424c  480c              LDR      r0,|L1.17024|
00424e  f7fffffe          BL       strcat
;;;477    									len=strlen(data);
004252  480b              LDR      r0,|L1.17024|
004254  f7fffffe          BL       strlen
004258  4913              LDR      r1,|L1.17064|
00425a  6008              STR      r0,[r1,#0]  ; len
;;;478    									tout=0;
00425c  2000              MOVS     r0,#0
00425e  4913              LDR      r1,|L1.17068|
004260  6008              STR      r0,[r1,#0]  ; tout
;;;479    									k2=0;
004262  4913              LDR      r1,|L1.17072|
004264  6008              STR      r0,[r1,#0]  ; k2
;;;480    									for(k=0;k<len;k++)
004266  4913              LDR      r1,|L1.17076|
004268  6008              STR      r0,[r1,#0]  ; k
00426a  e0a3              B        |L1.17332|
                  |L1.17004|
00426c  e0f3              B        |L1.17494|
00426e  0000              DCW      0x0000
                  |L1.17008|
                          DCD      at_
                  |L1.17012|
                          DCD      tmeout
                  |L1.17016|
                          DCD      ||.text||+0x870
                  |L1.17020|
                          DCD      ||.text||+0xdd4
                  |L1.17024|
                          DCD      data
                  |L1.17028|
                          DCD      temp
                  |L1.17032|
                          DCD      int_erval
                  |L1.17036|
00428c  3e00              DCB      ">",0
00428e  00                DCB      0
00428f  00                DCB      0
                  |L1.17040|
                          DCD      stcond1
                  |L1.17044|
                          DCD      con1d
                  |L1.17048|
                          DCD      uart_string_gsm
                  |L1.17052|
                          DCD      cond
                  |L1.17056|
                          DCD      0x00001388
                  |L1.17060|
0042a4  0a00              DCB      "\n",0
0042a6  00                DCB      0
0042a7  00                DCB      0
                  |L1.17064|
                          DCD      len
                  |L1.17068|
                          DCD      tout
                  |L1.17072|
                          DCD      ||k2||
                  |L1.17076|
                          DCD      k
                  |L1.17080|
                          DCD      0x4006b000
                  |L1.17084|
                          DCD      ||.text||+0x474
                  |L1.17088|
                          DCD      stcond2
                  |L1.17092|
                          DCD      stcond3
                  |L1.17096|
                          DCD      stcond4
                  |L1.17100|
                          DCD      testingcode
                  |L1.17104|
0042d0  4f4b00            DCB      "OK",0
0042d3  00                DCB      0
                  |L1.17108|
0042d4  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
0042d8  46534352
0042dc  45415445
0042e0  3d433a5c
0042e4  49505f50
0042e8  4f52542e
0042ec  5458540d
0042f0  0a00    
0042f2  00                DCB      0
0042f3  00                DCB      0
                  |L1.17140|
0042f4  0a41542b          DCB      "\nAT+FSCREATE=D:\\LOG.TXT\r\n",0
0042f8  46534352
0042fc  45415445
004300  3d443a5c
004304  4c4f472e
004308  5458540d
00430c  0a00    
00430e  00                DCB      0
00430f  00                DCB      0
                  |L1.17168|
004310  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
004314  46534352
004318  45415445
00431c  3d433a5c
004320  4c4f472e
004324  5458540d
004328  0a00    
00432a  00                DCB      0
00432b  00                DCB      0
                  |L1.17196|
00432c  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
004330  46534352
004334  45415445
004338  3d433a5c
00433c  494e5445
004340  5256414c
004344  2e545854
004348  0d0a00  
00434b  00                DCB      0
                  |L1.17228|
00434c  0a41542b          DCB      "\nAT+FSCREATE=C:\\IGN.TXT\r\n",0
004350  46534352
004354  45415445
004358  3d433a5c
00435c  49474e2e
004360  5458540d
004364  0a00    
004366  00                DCB      0
004367  00                DCB      0
                  |L1.17256|
                          DCD      ||ip||
                  |L1.17260|
                          DCD      port
                  |L1.17264|
                          DCD      ||.text||+0x3e44
                  |L1.17268|
                          DCD      interval
                  |L1.17272|
004378  3500              DCB      "5",0
00437a  00                DCB      0
00437b  00                DCB      0
                  |L1.17276|
00437c  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n\r\n",0
004380  542b434d
004384  47443d31
004388  2c340d0a
00438c  0d0a00  
00438f  00                DCB      0
                  |L1.17296|
                          DCD      0x400ff080
                  |L1.17300|
                          DCD      apn
                  |L1.17304|
;;;481    									{
;;;482    										uart_putchar(UART1_BASE_PTR, data[k]);
004398  48fd              LDR      r0,|L1.18320|
00439a  49fe              LDR      r1,|L1.18324|
00439c  6809              LDR      r1,[r1,#0]  ; k
00439e  5c40              LDRB     r0,[r0,r1]
0043a0  4601              MOV      r1,r0
0043a2  9000              STR      r0,[sp,#0]
0043a4  48fc              LDR      r0,|L1.18328|
0043a6  f7fffffe          BL       uart_putchar
0043aa  48fa              LDR      r0,|L1.18324|
0043ac  6800              LDR      r0,[r0,#0]            ;480  ; k
0043ae  1c40              ADDS     r0,r0,#1              ;480
0043b0  49f8              LDR      r1,|L1.18324|
0043b2  6008              STR      r0,[r1,#0]            ;480  ; k
                  |L1.17332|
0043b4  48f7              LDR      r0,|L1.18324|
0043b6  6800              LDR      r0,[r0,#0]            ;480  ; k
0043b8  49f8              LDR      r1,|L1.18332|
0043ba  6809              LDR      r1,[r1,#0]            ;480  ; len
0043bc  4288              CMP      r0,r1                 ;480
0043be  dbeb              BLT      |L1.17304|
;;;483    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0043c0  211a              MOVS     r1,#0x1a
0043c2  48f5              LDR      r0,|L1.18328|
0043c4  f7fffffe          BL       uart_putchar
;;;484    									do
0043c8  bf00              NOP      
                  |L1.17354|
;;;485    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0043ca  49f5              LDR      r1,|L1.18336|
0043cc  48f5              LDR      r0,|L1.18340|
0043ce  f7fffffe          BL       strstr
0043d2  49f5              LDR      r1,|L1.18344|
0043d4  6008              STR      r0,[r1,#0]  ; stcond1
;;;486    																	stcond2=strstr(uart_string_gsm, "ERROR");
0043d6  49f5              LDR      r1,|L1.18348|
0043d8  48f2              LDR      r0,|L1.18340|
0043da  f7fffffe          BL       strstr
0043de  49f4              LDR      r1,|L1.18352|
0043e0  6008              STR      r0,[r1,#0]  ; stcond2
;;;487    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0043e2  49f4              LDR      r1,|L1.18356|
0043e4  48ef              LDR      r0,|L1.18340|
0043e6  f7fffffe          BL       strstr
0043ea  49f3              LDR      r1,|L1.18360|
0043ec  6008              STR      r0,[r1,#0]  ; stcond3
;;;488    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0043ee  49ef              LDR      r1,|L1.18348|
0043f0  311c              ADDS     r1,r1,#0x1c
0043f2  48ec              LDR      r0,|L1.18340|
0043f4  f7fffffe          BL       strstr
0043f8  49f0              LDR      r1,|L1.18364|
0043fa  6008              STR      r0,[r1,#0]  ; stcond4
;;;489    																	
;;;490    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0043fc  48ec              LDR      r0,|L1.18352|
0043fe  6800              LDR      r0,[r0,#0]  ; stcond2
004400  2800              CMP      r0,#0
004402  d10f              BNE      |L1.17444|
004404  48ec              LDR      r0,|L1.18360|
004406  6800              LDR      r0,[r0,#0]  ; stcond3
004408  2800              CMP      r0,#0
00440a  d10b              BNE      |L1.17444|
00440c  4608              MOV      r0,r1
00440e  6800              LDR      r0,[r0,#0]  ; stcond4
004410  2800              CMP      r0,#0
004412  d107              BNE      |L1.17444|
004414  48e4              LDR      r0,|L1.18344|
004416  6800              LDR      r0,[r0,#0]  ; stcond1
004418  2800              CMP      r0,#0
00441a  d103              BNE      |L1.17444|
00441c  48e8              LDR      r0,|L1.18368|
00441e  6800              LDR      r0,[r0,#0]  ; tout
004420  2808              CMP      r0,#8
004422  ddd2              BLE      |L1.17354|
                  |L1.17444|
;;;491    																//delay(10);clear();
;;;492    														uart_putchar(UART1_BASE_PTR,0x1A);
004424  211a              MOVS     r1,#0x1a
004426  48dc              LDR      r0,|L1.18328|
004428  f7fffffe          BL       uart_putchar
;;;493    												//delay(10);
;;;494    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00442c  211a              MOVS     r1,#0x1a
00442e  48da              LDR      r0,|L1.18328|
004430  f7fffffe          BL       uart_putchar
004434  211a              MOVS     r1,#0x1a
004436  48d8              LDR      r0,|L1.18328|
004438  f7fffffe          BL       uart_putchar
00443c  211a              MOVS     r1,#0x1a
00443e  48d6              LDR      r0,|L1.18328|
004440  f7fffffe          BL       uart_putchar
;;;495    						
;;;496    									
;;;497    delay(50);
004444  2032              MOVS     r0,#0x32
004446  f7fffffe          BL       delay
;;;498    stcond1=strstr(uart_string_gsm,"SEND OK");								
00444a  49d5              LDR      r1,|L1.18336|
00444c  48d5              LDR      r0,|L1.18340|
00444e  f7fffffe          BL       strstr
004452  49d5              LDR      r1,|L1.18344|
004454  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.17494|
;;;499    								}
;;;500    //else{
;;;501    //log_it();
;;;502    //}
;;;503    
;;;504    
;;;505    if(!(stcond1) == 1 )// if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
004456  48d4              LDR      r0,|L1.18344|
004458  6800              LDR      r0,[r0,#0]  ; stcond1
00445a  2800              CMP      r0,#0
00445c  d101              BNE      |L1.17506|
00445e  2001              MOVS     r0,#1
004460  e000              B        |L1.17508|
                  |L1.17506|
004462  2000              MOVS     r0,#0
                  |L1.17508|
004464  2801              CMP      r0,#1
004466  d17d              BNE      |L1.17764|
;;;506    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004468  211a              MOVS     r1,#0x1a
00446a  48cb              LDR      r0,|L1.18328|
00446c  f7fffffe          BL       uart_putchar
004470  f7fffffe          BL       clear
004474  200a              MOVS     r0,#0xa
004476  f7fffffe          BL       delay
;;;507    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00447a  211a              MOVS     r1,#0x1a
00447c  48c6              LDR      r0,|L1.18328|
00447e  f7fffffe          BL       uart_putchar
004482  f7fffffe          BL       clear
004486  200a              MOVS     r0,#0xa
004488  f7fffffe          BL       delay
;;;508    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00448c  211a              MOVS     r1,#0x1a
00448e  48c2              LDR      r0,|L1.18328|
004490  f7fffffe          BL       uart_putchar
004494  f7fffffe          BL       clear
004498  200a              MOVS     r0,#0xa
00449a  f7fffffe          BL       delay
;;;509    
;;;510    									delay(100);
00449e  2064              MOVS     r0,#0x64
0044a0  f7fffffe          BL       delay
;;;511    									clear();//memset(uart_string_gsm,0,5000);
0044a4  f7fffffe          BL       clear
;;;512    
;;;513    									memset(at_,0,100);
0044a8  2164              MOVS     r1,#0x64
0044aa  48c6              LDR      r0,|L1.18372|
0044ac  f7fffffe          BL       __aeabi_memclr
;;;514    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0044b0  48b7              LDR      r0,|L1.18320|
0044b2  f7fffffe          BL       strlen
0044b6  1c40              ADDS     r0,r0,#1
0044b8  4603              MOV      r3,r0
0044ba  4ac3              LDR      r2,|L1.18376|
0044bc  49bb              LDR      r1,|L1.18348|
0044be  3154              ADDS     r1,r1,#0x54
0044c0  9000              STR      r0,[sp,#0]
0044c2  48c0              LDR      r0,|L1.18372|
0044c4  f7fffffe          BL       __2sprintf
;;;515    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0044c8  2005              MOVS     r0,#5
0044ca  4bb8              LDR      r3,|L1.18348|
0044cc  461a              MOV      r2,r3
0044ce  3278              ADDS     r2,r2,#0x78
0044d0  a1be              ADR      r1,|L1.18380|
0044d2  9000              STR      r0,[sp,#0]
0044d4  48bb              LDR      r0,|L1.18372|
0044d6  f7fffffe          BL       send_SD
;;;516    if(strstr(uart_string_gsm,"ERROR")){
0044da  49b4              LDR      r1,|L1.18348|
0044dc  48b1              LDR      r0,|L1.18340|
0044de  f7fffffe          BL       strstr
0044e2  2800              CMP      r0,#0
0044e4  d004              BEQ      |L1.17648|
;;;517    	drive[0]='C';drive[1]=':';
0044e6  2043              MOVS     r0,#0x43
0044e8  49b7              LDR      r1,|L1.18376|
0044ea  7008              STRB     r0,[r1,#0]
0044ec  203a              MOVS     r0,#0x3a
0044ee  7048              STRB     r0,[r1,#1]
                  |L1.17648|
;;;518    }	
;;;519    									clear();	
0044f0  f7fffffe          BL       clear
;;;520    									k2=0;									//string array counter for uart 1
0044f4  2000              MOVS     r0,#0
0044f6  49b6              LDR      r1,|L1.18384|
0044f8  6008              STR      r0,[r1,#0]  ; k2
;;;521    									tout=0;	
0044fa  49b1              LDR      r1,|L1.18368|
0044fc  6008              STR      r0,[r1,#0]  ; tout
;;;522    									for(k=0;k<strlen(data);k++)
0044fe  49a5              LDR      r1,|L1.18324|
004500  6008              STR      r0,[r1,#0]  ; k
004502  e00d              B        |L1.17696|
                  |L1.17668|
;;;523    									{
;;;524    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004504  48a2              LDR      r0,|L1.18320|
004506  49a3              LDR      r1,|L1.18324|
004508  6809              LDR      r1,[r1,#0]  ; k
00450a  5c40              LDRB     r0,[r0,r1]
00450c  4601              MOV      r1,r0
00450e  9000              STR      r0,[sp,#0]
004510  48a1              LDR      r0,|L1.18328|
004512  f7fffffe          BL       uart_putchar
004516  489f              LDR      r0,|L1.18324|
004518  6800              LDR      r0,[r0,#0]            ;522  ; k
00451a  1c40              ADDS     r0,r0,#1              ;522
00451c  499d              LDR      r1,|L1.18324|
00451e  6008              STR      r0,[r1,#0]            ;522  ; k
                  |L1.17696|
004520  489b              LDR      r0,|L1.18320|
004522  f7fffffe          BL       strlen
004526  499b              LDR      r1,|L1.18324|
004528  6809              LDR      r1,[r1,#0]            ;522  ; k
00452a  4288              CMP      r0,r1                 ;522
00452c  d8ea              BHI      |L1.17668|
;;;525    									}	
;;;526    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00452e  210a              MOVS     r1,#0xa
004530  4899              LDR      r0,|L1.18328|
004532  f7fffffe          BL       uart_putchar
004536  210a              MOVS     r1,#0xa
004538  4897              LDR      r0,|L1.18328|
00453a  f7fffffe          BL       uart_putchar
00453e  210a              MOVS     r1,#0xa
004540  4895              LDR      r0,|L1.18328|
004542  f7fffffe          BL       uart_putchar
004546  210a              MOVS     r1,#0xa
004548  4893              LDR      r0,|L1.18328|
00454a  f7fffffe          BL       uart_putchar
00454e  210a              MOVS     r1,#0xa
004550  4891              LDR      r0,|L1.18328|
004552  f7fffffe          BL       uart_putchar
004556  210a              MOVS     r1,#0xa
004558  488f              LDR      r0,|L1.18328|
00455a  f7fffffe          BL       uart_putchar
00455e  210a              MOVS     r1,#0xa
004560  488d              LDR      r0,|L1.18328|
004562  e000              B        |L1.17766|
                  |L1.17764|
004564  e2fb              B        |L1.19294|
                  |L1.17766|
004566  f7fffffe          BL       uart_putchar
00456a  210a              MOVS     r1,#0xa
00456c  488a              LDR      r0,|L1.18328|
00456e  f7fffffe          BL       uart_putchar
004572  210a              MOVS     r1,#0xa
004574  4888              LDR      r0,|L1.18328|
004576  f7fffffe          BL       uart_putchar
00457a  210a              MOVS     r1,#0xa
00457c  4886              LDR      r0,|L1.18328|
00457e  f7fffffe          BL       uart_putchar
004582  210a              MOVS     r1,#0xa
004584  4884              LDR      r0,|L1.18328|
004586  f7fffffe          BL       uart_putchar
00458a  210a              MOVS     r1,#0xa
00458c  4882              LDR      r0,|L1.18328|
00458e  f7fffffe          BL       uart_putchar
004592  210a              MOVS     r1,#0xa
004594  4880              LDR      r0,|L1.18328|
004596  f7fffffe          BL       uart_putchar
00459a  210a              MOVS     r1,#0xa
00459c  487e              LDR      r0,|L1.18328|
00459e  f7fffffe          BL       uart_putchar
0045a2  210a              MOVS     r1,#0xa
0045a4  487c              LDR      r0,|L1.18328|
0045a6  f7fffffe          BL       uart_putchar
0045aa  210a              MOVS     r1,#0xa
0045ac  487a              LDR      r0,|L1.18328|
0045ae  f7fffffe          BL       uart_putchar
0045b2  210a              MOVS     r1,#0xa
0045b4  4878              LDR      r0,|L1.18328|
0045b6  f7fffffe          BL       uart_putchar
0045ba  210a              MOVS     r1,#0xa
0045bc  4876              LDR      r0,|L1.18328|
0045be  f7fffffe          BL       uart_putchar
0045c2  210a              MOVS     r1,#0xa
0045c4  4874              LDR      r0,|L1.18328|
0045c6  f7fffffe          BL       uart_putchar
0045ca  210a              MOVS     r1,#0xa
0045cc  4872              LDR      r0,|L1.18328|
0045ce  f7fffffe          BL       uart_putchar
0045d2  210a              MOVS     r1,#0xa
0045d4  4870              LDR      r0,|L1.18328|
0045d6  f7fffffe          BL       uart_putchar
0045da  210a              MOVS     r1,#0xa
0045dc  486e              LDR      r0,|L1.18328|
0045de  f7fffffe          BL       uart_putchar
0045e2  210a              MOVS     r1,#0xa
0045e4  486c              LDR      r0,|L1.18328|
0045e6  f7fffffe          BL       uart_putchar
0045ea  210a              MOVS     r1,#0xa
0045ec  486a              LDR      r0,|L1.18328|
0045ee  f7fffffe          BL       uart_putchar
0045f2  210a              MOVS     r1,#0xa
0045f4  4868              LDR      r0,|L1.18328|
0045f6  f7fffffe          BL       uart_putchar
0045fa  210a              MOVS     r1,#0xa
0045fc  4866              LDR      r0,|L1.18328|
0045fe  f7fffffe          BL       uart_putchar
004602  210a              MOVS     r1,#0xa
004604  4864              LDR      r0,|L1.18328|
004606  f7fffffe          BL       uart_putchar
00460a  210a              MOVS     r1,#0xa
00460c  4862              LDR      r0,|L1.18328|
00460e  f7fffffe          BL       uart_putchar
004612  210a              MOVS     r1,#0xa
004614  4860              LDR      r0,|L1.18328|
004616  f7fffffe          BL       uart_putchar
00461a  210a              MOVS     r1,#0xa
00461c  485e              LDR      r0,|L1.18328|
00461e  f7fffffe          BL       uart_putchar
004622  210a              MOVS     r1,#0xa
004624  485c              LDR      r0,|L1.18328|
004626  f7fffffe          BL       uart_putchar
00462a  210a              MOVS     r1,#0xa
00462c  485a              LDR      r0,|L1.18328|
00462e  f7fffffe          BL       uart_putchar
004632  210a              MOVS     r1,#0xa
004634  4858              LDR      r0,|L1.18328|
004636  f7fffffe          BL       uart_putchar
00463a  210a              MOVS     r1,#0xa
00463c  4856              LDR      r0,|L1.18328|
00463e  f7fffffe          BL       uart_putchar
004642  210a              MOVS     r1,#0xa
004644  4854              LDR      r0,|L1.18328|
004646  f7fffffe          BL       uart_putchar
00464a  210a              MOVS     r1,#0xa
00464c  4852              LDR      r0,|L1.18328|
00464e  f7fffffe          BL       uart_putchar
004652  210a              MOVS     r1,#0xa
004654  4850              LDR      r0,|L1.18328|
004656  f7fffffe          BL       uart_putchar
00465a  210a              MOVS     r1,#0xa
00465c  484e              LDR      r0,|L1.18328|
00465e  f7fffffe          BL       uart_putchar
004662  210a              MOVS     r1,#0xa
004664  484c              LDR      r0,|L1.18328|
004666  f7fffffe          BL       uart_putchar
00466a  210a              MOVS     r1,#0xa
00466c  484a              LDR      r0,|L1.18328|
00466e  f7fffffe          BL       uart_putchar
004672  210a              MOVS     r1,#0xa
004674  4848              LDR      r0,|L1.18328|
004676  f7fffffe          BL       uart_putchar
00467a  210a              MOVS     r1,#0xa
00467c  4846              LDR      r0,|L1.18328|
00467e  f7fffffe          BL       uart_putchar
004682  210a              MOVS     r1,#0xa
004684  4844              LDR      r0,|L1.18328|
004686  f7fffffe          BL       uart_putchar
00468a  210a              MOVS     r1,#0xa
00468c  4842              LDR      r0,|L1.18328|
00468e  f7fffffe          BL       uart_putchar
004692  210a              MOVS     r1,#0xa
004694  4840              LDR      r0,|L1.18328|
004696  f7fffffe          BL       uart_putchar
00469a  210a              MOVS     r1,#0xa
00469c  483e              LDR      r0,|L1.18328|
00469e  f7fffffe          BL       uart_putchar
0046a2  210a              MOVS     r1,#0xa
0046a4  483c              LDR      r0,|L1.18328|
0046a6  f7fffffe          BL       uart_putchar
0046aa  210a              MOVS     r1,#0xa
0046ac  483a              LDR      r0,|L1.18328|
0046ae  f7fffffe          BL       uart_putchar
0046b2  210a              MOVS     r1,#0xa
0046b4  4838              LDR      r0,|L1.18328|
0046b6  f7fffffe          BL       uart_putchar
0046ba  210a              MOVS     r1,#0xa
0046bc  4836              LDR      r0,|L1.18328|
0046be  f7fffffe          BL       uart_putchar
0046c2  210a              MOVS     r1,#0xa
0046c4  4834              LDR      r0,|L1.18328|
0046c6  f7fffffe          BL       uart_putchar
0046ca  210a              MOVS     r1,#0xa
0046cc  4832              LDR      r0,|L1.18328|
0046ce  f7fffffe          BL       uart_putchar
0046d2  210a              MOVS     r1,#0xa
0046d4  4830              LDR      r0,|L1.18328|
0046d6  f7fffffe          BL       uart_putchar
0046da  210a              MOVS     r1,#0xa
0046dc  482e              LDR      r0,|L1.18328|
0046de  f7fffffe          BL       uart_putchar
0046e2  210a              MOVS     r1,#0xa
0046e4  482c              LDR      r0,|L1.18328|
0046e6  f7fffffe          BL       uart_putchar
0046ea  210a              MOVS     r1,#0xa
0046ec  482a              LDR      r0,|L1.18328|
0046ee  f7fffffe          BL       uart_putchar
0046f2  210a              MOVS     r1,#0xa
0046f4  4828              LDR      r0,|L1.18328|
0046f6  f7fffffe          BL       uart_putchar
;;;527    									//memset(data,0,1000);
;;;528    									//timer counts to wait for characters in uart 1 									
;;;529    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0046fa  bf00              NOP      
                  |L1.18172|
0046fc  492b              LDR      r1,|L1.18348|
0046fe  318c              ADDS     r1,r1,#0x8c
004700  4828              LDR      r0,|L1.18340|
004702  f7fffffe          BL       strstr
004706  2800              CMP      r0,#0
004708  d109              BNE      |L1.18206|
00470a  4928              LDR      r1,|L1.18348|
00470c  4825              LDR      r0,|L1.18340|
00470e  f7fffffe          BL       strstr
004712  2800              CMP      r0,#0
004714  d103              BNE      |L1.18206|
004716  482a              LDR      r0,|L1.18368|
004718  6800              LDR      r0,[r0,#0]  ; tout
00471a  2805              CMP      r0,#5
00471c  ddee              BLE      |L1.18172|
                  |L1.18206|
;;;530    									{	}
;;;531    									clear();
00471e  f7fffffe          BL       clear
;;;532    									memset(data,0,strlen(data));
004722  481b              LDR      r0,|L1.18320|
004724  f7fffffe          BL       strlen
004728  4601              MOV      r1,r0
00472a  9000              STR      r0,[sp,#0]
00472c  4818              LDR      r0,|L1.18320|
00472e  f7fffffe          BL       __aeabi_memclr
;;;533    									memset(data,0,strlen(data));	
004732  4817              LDR      r0,|L1.18320|
004734  f7fffffe          BL       strlen
004738  4601              MOV      r1,r0
00473a  9000              STR      r0,[sp,#0]
00473c  4814              LDR      r0,|L1.18320|
00473e  f7fffffe          BL       __aeabi_memclr
;;;534    									GPS_COLLECT();
004742  f7fffffe          BL       GPS_COLLECT
;;;535    									strcat(data,"CH\n");	
004746  4919              LDR      r1,|L1.18348|
004748  3148              ADDS     r1,r1,#0x48
00474a  4811              LDR      r0,|L1.18320|
00474c  f7fffffe          BL       strcat
;;;536    
;;;537    
;;;538    									clear();	
004750  f7fffffe          BL       clear
;;;539    //*************************************tcp_initialization();*********************
;;;540    //setting interval 4
;;;541    temp=int_erval;				
004754  481f              LDR      r0,|L1.18388|
004756  6800              LDR      r0,[r0,#0]  ; int_erval
004758  491f              LDR      r1,|L1.18392|
00475a  6008              STR      r0,[r1,#0]  ; temp
;;;542    int_erval=4;
00475c  2004              MOVS     r0,#4
00475e  491d              LDR      r1,|L1.18388|
004760  6008              STR      r0,[r1,#0]  ; int_erval
;;;543    
;;;544    	
;;;545    msg_sim800(); 
004762  f7fffffe          BL       msg_sim800
;;;546    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
004766  2005              MOVS     r0,#5
004768  4b10              LDR      r3,|L1.18348|
00476a  461a              MOV      r2,r3
00476c  3278              ADDS     r2,r2,#0x78
00476e  a11b              ADR      r1,|L1.18396|
004770  9000              STR      r0,[sp,#0]
004772  4610              MOV      r0,r2
004774  3020              ADDS     r0,r0,#0x20
004776  f7fffffe          BL       send_GSM
;;;547    delay(100);
00477a  2064              MOVS     r0,#0x64
00477c  f7fffffe          BL       delay
;;;548    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
004780  2004              MOVS     r0,#4
004782  4b0a              LDR      r3,|L1.18348|
004784  461a              MOV      r2,r3
004786  32a8              ADDS     r2,r2,#0xa8
004788  a114              ADR      r1,|L1.18396|
00478a  9000              STR      r0,[sp,#0]
00478c  4610              MOV      r0,r2
00478e  e027              B        |L1.18400|
                  |L1.18320|
                          DCD      data
                  |L1.18324|
                          DCD      k
                  |L1.18328|
                          DCD      0x4006b000
                  |L1.18332|
                          DCD      len
                  |L1.18336|
                          DCD      ||.text||+0x474
                  |L1.18340|
                          DCD      uart_string_gsm
                  |L1.18344|
                          DCD      stcond1
                  |L1.18348|
                          DCD      ||.text||+0x870
                  |L1.18352|
                          DCD      stcond2
                  |L1.18356|
                          DCD      ||.text||+0xde4
                  |L1.18360|
                          DCD      stcond3
                  |L1.18364|
                          DCD      stcond4
                  |L1.18368|
                          DCD      tout
                  |L1.18372|
                          DCD      at_
                  |L1.18376|
                          DCD      drive
                  |L1.18380|
0047cc  3e00              DCB      ">",0
0047ce  00                DCB      0
0047cf  00                DCB      0
                  |L1.18384|
                          DCD      ||k2||
                  |L1.18388|
                          DCD      int_erval
                  |L1.18392|
                          DCD      temp
                  |L1.18396|
0047dc  4f4b00            DCB      "OK",0
0047df  00                DCB      0
                  |L1.18400|
0047e0  3014              ADDS     r0,r0,#0x14
0047e2  f7fffffe          BL       send_GSM
;;;549    GPS_COLLECT2();
0047e6  f7fffffe          BL       GPS_COLLECT2
;;;550    strcat(data,"CH\n");		
0047ea  49fe              LDR      r1,|L1.19428|
0047ec  48fe              LDR      r0,|L1.19432|
0047ee  f7fffffe          BL       strcat
;;;551    GPS_COLLECT2();
0047f2  f7fffffe          BL       GPS_COLLECT2
;;;552    strcat(data,"CH\n");	
0047f6  49fb              LDR      r1,|L1.19428|
0047f8  48fb              LDR      r0,|L1.19432|
0047fa  f7fffffe          BL       strcat
;;;553    GPS_COLLECT2();
0047fe  f7fffffe          BL       GPS_COLLECT2
;;;554    strcat(data,"CH\n");
004802  49f8              LDR      r1,|L1.19428|
004804  48f8              LDR      r0,|L1.19432|
004806  f7fffffe          BL       strcat
;;;555    
;;;556    	
;;;557    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
00480a  2004              MOVS     r0,#4
00480c  4bf7              LDR      r3,|L1.19436|
00480e  4af5              LDR      r2,|L1.19428|
004810  3230              ADDS     r2,r2,#0x30
004812  a1f7              ADR      r1,|L1.19440|
004814  9000              STR      r0,[sp,#0]
004816  4618              MOV      r0,r3
004818  300c              ADDS     r0,r0,#0xc
00481a  f7fffffe          BL       send_GSM
;;;558    GPS_COLLECT2();
00481e  f7fffffe          BL       GPS_COLLECT2
;;;559    strcat(data,"CH\n");	
004822  49f0              LDR      r1,|L1.19428|
004824  48f0              LDR      r0,|L1.19432|
004826  f7fffffe          BL       strcat
;;;560    memset(at_,0,100);
00482a  2164              MOVS     r1,#0x64
00482c  48f1              LDR      r0,|L1.19444|
00482e  f7fffffe          BL       __aeabi_memclr
;;;561    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
004832  4af1              LDR      r2,|L1.19448|
004834  49ed              LDR      r1,|L1.19436|
004836  3120              ADDS     r1,r1,#0x20
004838  48ee              LDR      r0,|L1.19444|
00483a  f7fffffe          BL       __2sprintf
;;;562    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
00483e  48ef              LDR      r0,|L1.19452|
004840  6800              LDR      r0,[r0,#0]  ; tmeout
004842  4bea              LDR      r3,|L1.19436|
004844  4ae7              LDR      r2,|L1.19428|
004846  3230              ADDS     r2,r2,#0x30
004848  a1e9              ADR      r1,|L1.19440|
00484a  9000              STR      r0,[sp,#0]
00484c  48e9              LDR      r0,|L1.19444|
00484e  f7fffffe          BL       send_GSM
;;;563    msg_sim800(); 
004852  f7fffffe          BL       msg_sim800
;;;564    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
004856  2004              MOVS     r0,#4
004858  4be2              LDR      r3,|L1.19428|
00485a  3b2c              SUBS     r3,r3,#0x2c
00485c  461a              MOV      r2,r3
00485e  325c              ADDS     r2,r2,#0x5c
004860  a1e3              ADR      r1,|L1.19440|
004862  9000              STR      r0,[sp,#0]
004864  48e1              LDR      r0,|L1.19436|
004866  3038              ADDS     r0,r0,#0x38
004868  f7fffffe          BL       send_GSM
;;;565    GPS_COLLECT2();
00486c  f7fffffe          BL       GPS_COLLECT2
;;;566    strcat(data,"CH\n");	
004870  49dc              LDR      r1,|L1.19428|
004872  48dd              LDR      r0,|L1.19432|
004874  f7fffffe          BL       strcat
;;;567    GPS_COLLECT2();
004878  f7fffffe          BL       GPS_COLLECT2
;;;568    strcat(data,"CH\n");	
00487c  49d9              LDR      r1,|L1.19428|
00487e  48da              LDR      r0,|L1.19432|
004880  f7fffffe          BL       strcat
;;;569    
;;;570    
;;;571    msg_sim800(); 
004884  f7fffffe          BL       msg_sim800
;;;572    GPS_COLLECT2();
004888  f7fffffe          BL       GPS_COLLECT2
;;;573    strcat(data,"CH\n");	
00488c  49d5              LDR      r1,|L1.19428|
00488e  48d6              LDR      r0,|L1.19432|
004890  f7fffffe          BL       strcat
;;;574    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
004894  f7fffffe          BL       clear
004898  48d4              LDR      r0,|L1.19436|
00489a  3048              ADDS     r0,r0,#0x48
00489c  f7fffffe          BL       send_modem
0048a0  f7fffffe          BL       clear
;;;575    					delay(20);
0048a4  2014              MOVS     r0,#0x14
0048a6  f7fffffe          BL       delay
;;;576    
;;;577    
;;;578    msg_sim800(); 
0048aa  f7fffffe          BL       msg_sim800
;;;579    int_erval=temp;
0048ae  48d4              LDR      r0,|L1.19456|
0048b0  6800              LDR      r0,[r0,#0]  ; temp
0048b2  49d4              LDR      r1,|L1.19460|
0048b4  6008              STR      r0,[r1,#0]  ; int_erval
;;;580    //resetting interval 
;;;581    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0048b6  4bd4              LDR      r3,|L1.19464|
0048b8  4ad4              LDR      r2,|L1.19468|
0048ba  49cc              LDR      r1,|L1.19436|
0048bc  3160              ADDS     r1,r1,#0x60
0048be  48cd              LDR      r0,|L1.19444|
0048c0  f7fffffe          BL       __2sprintf
;;;582    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0048c4  48cd              LDR      r0,|L1.19452|
0048c6  6800              LDR      r0,[r0,#0]  ; tmeout
0048c8  4bc8              LDR      r3,|L1.19436|
0048ca  4ac6              LDR      r2,|L1.19428|
0048cc  3a48              SUBS     r2,r2,#0x48
0048ce  4619              MOV      r1,r3
0048d0  3180              ADDS     r1,r1,#0x80
0048d2  9000              STR      r0,[sp,#0]
0048d4  48c7              LDR      r0,|L1.19444|
0048d6  f7fffffe          BL       send_GSM
;;;583    						clear();
0048da  f7fffffe          BL       clear
;;;584    						
;;;585    						
;;;586    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
0048de  48c7              LDR      r0,|L1.19452|
0048e0  6800              LDR      r0,[r0,#0]  ; tmeout
0048e2  4bc2              LDR      r3,|L1.19436|
0048e4  3388              ADDS     r3,r3,#0x88
0048e6  4abf              LDR      r2,|L1.19428|
0048e8  3a48              SUBS     r2,r2,#0x48
0048ea  a1c9              ADR      r1,|L1.19472|
0048ec  9000              STR      r0,[sp,#0]
0048ee  4618              MOV      r0,r3
0048f0  3010              ADDS     r0,r0,#0x10
0048f2  f7fffffe          BL       send_GSM
;;;587    						
;;;588    //*************************************tcp initialization*******************************/
;;;589    			clear();		
0048f6  f7fffffe          BL       clear
;;;590    						cond=mystrstr(uart_string_gsm,'>');
0048fa  213e              MOVS     r1,#0x3e
0048fc  48c5              LDR      r0,|L1.19476|
0048fe  f7fffffe          BL       mystrstr
004902  49c5              LDR      r1,|L1.19480|
004904  7008              STRB     r0,[r1,#0]
;;;591    								if(cond)	
004906  4608              MOV      r0,r1
004908  7800              LDRB     r0,[r0,#0]  ; cond
00490a  2800              CMP      r0,#0
00490c  d07e              BEQ      |L1.18956|
;;;592    								{	
;;;593    
;;;594    									clear();
00490e  f7fffffe          BL       clear
;;;595    									memset(uart_string_gsm,0,5000);
004912  49c2              LDR      r1,|L1.19484|
004914  48bf              LDR      r0,|L1.19476|
004916  f7fffffe          BL       __aeabi_memclr
;;;596    									strcat(data,"\n");
00491a  a1c1              ADR      r1,|L1.19488|
00491c  48b2              LDR      r0,|L1.19432|
00491e  f7fffffe          BL       strcat
;;;597    									len=strlen(data);
004922  48b1              LDR      r0,|L1.19432|
004924  f7fffffe          BL       strlen
004928  49be              LDR      r1,|L1.19492|
00492a  6008              STR      r0,[r1,#0]  ; len
;;;598    									tout=0;
00492c  2000              MOVS     r0,#0
00492e  49be              LDR      r1,|L1.19496|
004930  6008              STR      r0,[r1,#0]  ; tout
;;;599    									k2=0;
004932  49be              LDR      r1,|L1.19500|
004934  6008              STR      r0,[r1,#0]  ; k2
;;;600    									for(k=0;k<len;k++)
004936  49be              LDR      r1,|L1.19504|
004938  6008              STR      r0,[r1,#0]  ; k
00493a  e00d              B        |L1.18776|
                  |L1.18748|
;;;601    									{
;;;602    										uart_putchar(UART1_BASE_PTR, data[k]);
00493c  48aa              LDR      r0,|L1.19432|
00493e  49bc              LDR      r1,|L1.19504|
004940  6809              LDR      r1,[r1,#0]  ; k
004942  5c40              LDRB     r0,[r0,r1]
004944  4601              MOV      r1,r0
004946  9000              STR      r0,[sp,#0]
004948  48ba              LDR      r0,|L1.19508|
00494a  f7fffffe          BL       uart_putchar
00494e  48b8              LDR      r0,|L1.19504|
004950  6800              LDR      r0,[r0,#0]            ;600  ; k
004952  1c40              ADDS     r0,r0,#1              ;600
004954  49b6              LDR      r1,|L1.19504|
004956  6008              STR      r0,[r1,#0]            ;600  ; k
                  |L1.18776|
004958  48b5              LDR      r0,|L1.19504|
00495a  6800              LDR      r0,[r0,#0]            ;600  ; k
00495c  49b1              LDR      r1,|L1.19492|
00495e  6809              LDR      r1,[r1,#0]            ;600  ; len
004960  4288              CMP      r0,r1                 ;600
004962  dbeb              BLT      |L1.18748|
;;;603    									}uart_putchar(UART1_BASE_PTR, 0x1A);
004964  211a              MOVS     r1,#0x1a
004966  48b3              LDR      r0,|L1.19508|
004968  f7fffffe          BL       uart_putchar
;;;604    									do
00496c  bf00              NOP      
                  |L1.18798|
;;;605    																{stcond1=strstr(uart_string_gsm,"SEND OK");
00496e  49b2              LDR      r1,|L1.19512|
004970  48a8              LDR      r0,|L1.19476|
004972  f7fffffe          BL       strstr
004976  49b1              LDR      r1,|L1.19516|
004978  6008              STR      r0,[r1,#0]  ; stcond1
;;;606    																	stcond2=strstr(uart_string_gsm, "ERROR");
00497a  499a              LDR      r1,|L1.19428|
00497c  3948              SUBS     r1,r1,#0x48
00497e  48a5              LDR      r0,|L1.19476|
004980  f7fffffe          BL       strstr
004984  49ae              LDR      r1,|L1.19520|
004986  6008              STR      r0,[r1,#0]  ; stcond2
;;;607    																		stcond3=strstr(uart_string_gsm, "FAIL");	
004988  4998              LDR      r1,|L1.19436|
00498a  3190              ADDS     r1,r1,#0x90
00498c  48a1              LDR      r0,|L1.19476|
00498e  f7fffffe          BL       strstr
004992  49ac              LDR      r1,|L1.19524|
004994  6008              STR      r0,[r1,#0]  ; stcond3
;;;608    																			stcond4=strstr(uart_string_gsm, "DEACT");	
004996  4993              LDR      r1,|L1.19428|
004998  392c              SUBS     r1,r1,#0x2c
00499a  489e              LDR      r0,|L1.19476|
00499c  f7fffffe          BL       strstr
0049a0  49a9              LDR      r1,|L1.19528|
0049a2  6008              STR      r0,[r1,#0]  ; stcond4
;;;609    																	
;;;610    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0049a4  48a6              LDR      r0,|L1.19520|
0049a6  6800              LDR      r0,[r0,#0]  ; stcond2
0049a8  2800              CMP      r0,#0
0049aa  d10f              BNE      |L1.18892|
0049ac  48a5              LDR      r0,|L1.19524|
0049ae  6800              LDR      r0,[r0,#0]  ; stcond3
0049b0  2800              CMP      r0,#0
0049b2  d10b              BNE      |L1.18892|
0049b4  4608              MOV      r0,r1
0049b6  6800              LDR      r0,[r0,#0]  ; stcond4
0049b8  2800              CMP      r0,#0
0049ba  d107              BNE      |L1.18892|
0049bc  489f              LDR      r0,|L1.19516|
0049be  6800              LDR      r0,[r0,#0]  ; stcond1
0049c0  2800              CMP      r0,#0
0049c2  d103              BNE      |L1.18892|
0049c4  4898              LDR      r0,|L1.19496|
0049c6  6800              LDR      r0,[r0,#0]  ; tout
0049c8  2808              CMP      r0,#8
0049ca  ddd0              BLE      |L1.18798|
                  |L1.18892|
;;;611    																delay(10);clear();
0049cc  200a              MOVS     r0,#0xa
0049ce  f7fffffe          BL       delay
0049d2  f7fffffe          BL       clear
;;;612    														uart_putchar(UART1_BASE_PTR,0x1A);
0049d6  211a              MOVS     r1,#0x1a
0049d8  4896              LDR      r0,|L1.19508|
0049da  f7fffffe          BL       uart_putchar
;;;613    												delay(10);
0049de  200a              MOVS     r0,#0xa
0049e0  f7fffffe          BL       delay
;;;614    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0049e4  211a              MOVS     r1,#0x1a
0049e6  4893              LDR      r0,|L1.19508|
0049e8  f7fffffe          BL       uart_putchar
0049ec  211a              MOVS     r1,#0x1a
0049ee  4891              LDR      r0,|L1.19508|
0049f0  f7fffffe          BL       uart_putchar
0049f4  211a              MOVS     r1,#0x1a
0049f6  488f              LDR      r0,|L1.19508|
0049f8  f7fffffe          BL       uart_putchar
;;;615    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
0049fc  211a              MOVS     r1,#0x1a
0049fe  488d              LDR      r0,|L1.19508|
004a00  f7fffffe          BL       uart_putchar
004a04  f7fffffe          BL       clear
004a08  200a              MOVS     r0,#0xa
004a0a  e000              B        |L1.18958|
                  |L1.18956|
004a0c  e1b3              B        |L1.19830|
                  |L1.18958|
004a0e  f7fffffe          BL       delay
;;;616    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004a12  211a              MOVS     r1,#0x1a
004a14  4887              LDR      r0,|L1.19508|
004a16  f7fffffe          BL       uart_putchar
004a1a  f7fffffe          BL       clear
004a1e  200a              MOVS     r0,#0xa
004a20  f7fffffe          BL       delay
;;;617    															
;;;618    										qwe=strlen(uart_string_gsm);
004a24  487b              LDR      r0,|L1.19476|
004a26  f7fffffe          BL       strlen
004a2a  4988              LDR      r1,|L1.19532|
004a2c  6008              STR      r0,[r1,#0]  ; qwe
;;;619    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004a2e  211a              MOVS     r1,#0x1a
004a30  4880              LDR      r0,|L1.19508|
004a32  f7fffffe          BL       uart_putchar
004a36  f7fffffe          BL       clear
004a3a  200a              MOVS     r0,#0xa
004a3c  f7fffffe          BL       delay
;;;620    								delay(50);
004a40  2032              MOVS     r0,#0x32
004a42  f7fffffe          BL       delay
;;;621    								con1d=strstr(uart_string_gsm,"SEND OK");
004a46  497c              LDR      r1,|L1.19512|
004a48  4872              LDR      r0,|L1.19476|
004a4a  f7fffffe          BL       strstr
004a4e  4980              LDR      r1,|L1.19536|
004a50  6008              STR      r0,[r1,#0]  ; con1d
;;;622    								if(!(con1d) == 1 )
004a52  4608              MOV      r0,r1
004a54  6800              LDR      r0,[r0,#0]  ; con1d
004a56  2800              CMP      r0,#0
004a58  d101              BNE      |L1.19038|
004a5a  2001              MOVS     r0,#1
004a5c  e000              B        |L1.19040|
                  |L1.19038|
004a5e  2000              MOVS     r0,#0
                  |L1.19040|
004a60  2801              CMP      r0,#1
004a62  d17c              BNE      |L1.19294|
;;;623    								{
;;;624    									delay(100);
004a64  2064              MOVS     r0,#0x64
004a66  f7fffffe          BL       delay
;;;625    									clear();//memset(uart_string_gsm,0,5000);
004a6a  f7fffffe          BL       clear
;;;626    									memset(at_,0,100);
004a6e  2164              MOVS     r1,#0x64
004a70  4860              LDR      r0,|L1.19444|
004a72  f7fffffe          BL       __aeabi_memclr
;;;627    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004a76  485c              LDR      r0,|L1.19432|
004a78  f7fffffe          BL       strlen
004a7c  1c40              ADDS     r0,r0,#1
004a7e  4603              MOV      r3,r0
004a80  4a74              LDR      r2,|L1.19540|
004a82  4958              LDR      r1,|L1.19428|
004a84  310c              ADDS     r1,r1,#0xc
004a86  9000              STR      r0,[sp,#0]
004a88  485a              LDR      r0,|L1.19444|
004a8a  f7fffffe          BL       __2sprintf
;;;628    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004a8e  2005              MOVS     r0,#5
004a90  4b54              LDR      r3,|L1.19428|
004a92  3b48              SUBS     r3,r3,#0x48
004a94  461a              MOV      r2,r3
004a96  3278              ADDS     r2,r2,#0x78
004a98  a15d              ADR      r1,|L1.19472|
004a9a  9000              STR      r0,[sp,#0]
004a9c  4855              LDR      r0,|L1.19444|
004a9e  f7fffffe          BL       send_SD
;;;629    if(strstr(uart_string_gsm,"ERROR")){
004aa2  4950              LDR      r1,|L1.19428|
004aa4  3948              SUBS     r1,r1,#0x48
004aa6  485b              LDR      r0,|L1.19476|
004aa8  f7fffffe          BL       strstr
004aac  2800              CMP      r0,#0
004aae  d004              BEQ      |L1.19130|
;;;630    	drive[0]='C';drive[1]=':';
004ab0  2043              MOVS     r0,#0x43
004ab2  4968              LDR      r1,|L1.19540|
004ab4  7008              STRB     r0,[r1,#0]
004ab6  203a              MOVS     r0,#0x3a
004ab8  7048              STRB     r0,[r1,#1]
                  |L1.19130|
;;;631    }	
;;;632    									clear();	
004aba  f7fffffe          BL       clear
;;;633    									k2=0;									//string array counter for uart 1
004abe  2000              MOVS     r0,#0
004ac0  495a              LDR      r1,|L1.19500|
004ac2  6008              STR      r0,[r1,#0]  ; k2
;;;634    									tout=0;	
004ac4  4958              LDR      r1,|L1.19496|
004ac6  6008              STR      r0,[r1,#0]  ; tout
;;;635    									for(k=0;k<strlen(data);k++)
004ac8  4959              LDR      r1,|L1.19504|
004aca  6008              STR      r0,[r1,#0]  ; k
004acc  e00d              B        |L1.19178|
                  |L1.19150|
;;;636    									{
;;;637    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004ace  4846              LDR      r0,|L1.19432|
004ad0  4957              LDR      r1,|L1.19504|
004ad2  6809              LDR      r1,[r1,#0]  ; k
004ad4  5c40              LDRB     r0,[r0,r1]
004ad6  4601              MOV      r1,r0
004ad8  9000              STR      r0,[sp,#0]
004ada  4856              LDR      r0,|L1.19508|
004adc  f7fffffe          BL       uart_putchar
004ae0  4853              LDR      r0,|L1.19504|
004ae2  6800              LDR      r0,[r0,#0]            ;635  ; k
004ae4  1c40              ADDS     r0,r0,#1              ;635
004ae6  4952              LDR      r1,|L1.19504|
004ae8  6008              STR      r0,[r1,#0]            ;635  ; k
                  |L1.19178|
004aea  483f              LDR      r0,|L1.19432|
004aec  f7fffffe          BL       strlen
004af0  494f              LDR      r1,|L1.19504|
004af2  6809              LDR      r1,[r1,#0]            ;635  ; k
004af4  4288              CMP      r0,r1                 ;635
004af6  d8ea              BHI      |L1.19150|
;;;638    									}	
;;;639    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004af8  210a              MOVS     r1,#0xa
004afa  484e              LDR      r0,|L1.19508|
004afc  f7fffffe          BL       uart_putchar
004b00  210a              MOVS     r1,#0xa
004b02  484c              LDR      r0,|L1.19508|
004b04  f7fffffe          BL       uart_putchar
004b08  210a              MOVS     r1,#0xa
004b0a  484a              LDR      r0,|L1.19508|
004b0c  f7fffffe          BL       uart_putchar
004b10  210a              MOVS     r1,#0xa
004b12  4848              LDR      r0,|L1.19508|
004b14  f7fffffe          BL       uart_putchar
004b18  210a              MOVS     r1,#0xa
004b1a  4846              LDR      r0,|L1.19508|
004b1c  f7fffffe          BL       uart_putchar
004b20  210a              MOVS     r1,#0xa
004b22  4844              LDR      r0,|L1.19508|
004b24  f7fffffe          BL       uart_putchar
004b28  210a              MOVS     r1,#0xa
004b2a  4842              LDR      r0,|L1.19508|
004b2c  f7fffffe          BL       uart_putchar
004b30  210a              MOVS     r1,#0xa
004b32  4840              LDR      r0,|L1.19508|
004b34  f7fffffe          BL       uart_putchar
004b38  210a              MOVS     r1,#0xa
004b3a  483e              LDR      r0,|L1.19508|
004b3c  f7fffffe          BL       uart_putchar
004b40  210a              MOVS     r1,#0xa
004b42  483c              LDR      r0,|L1.19508|
004b44  f7fffffe          BL       uart_putchar
004b48  210a              MOVS     r1,#0xa
004b4a  483a              LDR      r0,|L1.19508|
004b4c  f7fffffe          BL       uart_putchar
004b50  210a              MOVS     r1,#0xa
004b52  4838              LDR      r0,|L1.19508|
004b54  f7fffffe          BL       uart_putchar
004b58  210a              MOVS     r1,#0xa
004b5a  4836              LDR      r0,|L1.19508|
004b5c  e000              B        |L1.19296|
                  |L1.19294|
004b5e  e257              B        |L1.20496|
                  |L1.19296|
004b60  f7fffffe          BL       uart_putchar
004b64  210a              MOVS     r1,#0xa
004b66  4833              LDR      r0,|L1.19508|
004b68  f7fffffe          BL       uart_putchar
004b6c  210a              MOVS     r1,#0xa
004b6e  4831              LDR      r0,|L1.19508|
004b70  f7fffffe          BL       uart_putchar
004b74  210a              MOVS     r1,#0xa
004b76  482f              LDR      r0,|L1.19508|
004b78  f7fffffe          BL       uart_putchar
004b7c  210a              MOVS     r1,#0xa
004b7e  482d              LDR      r0,|L1.19508|
004b80  f7fffffe          BL       uart_putchar
004b84  210a              MOVS     r1,#0xa
004b86  482b              LDR      r0,|L1.19508|
004b88  f7fffffe          BL       uart_putchar
004b8c  210a              MOVS     r1,#0xa
004b8e  4829              LDR      r0,|L1.19508|
004b90  f7fffffe          BL       uart_putchar
004b94  210a              MOVS     r1,#0xa
004b96  4827              LDR      r0,|L1.19508|
004b98  f7fffffe          BL       uart_putchar
004b9c  210a              MOVS     r1,#0xa
004b9e  4825              LDR      r0,|L1.19508|
004ba0  f7fffffe          BL       uart_putchar
004ba4  210a              MOVS     r1,#0xa
004ba6  4823              LDR      r0,|L1.19508|
004ba8  f7fffffe          BL       uart_putchar
004bac  210a              MOVS     r1,#0xa
004bae  4821              LDR      r0,|L1.19508|
004bb0  f7fffffe          BL       uart_putchar
004bb4  210a              MOVS     r1,#0xa
004bb6  481f              LDR      r0,|L1.19508|
004bb8  f7fffffe          BL       uart_putchar
004bbc  210a              MOVS     r1,#0xa
004bbe  481d              LDR      r0,|L1.19508|
004bc0  f7fffffe          BL       uart_putchar
004bc4  210a              MOVS     r1,#0xa
004bc6  481b              LDR      r0,|L1.19508|
004bc8  f7fffffe          BL       uart_putchar
004bcc  210a              MOVS     r1,#0xa
004bce  4819              LDR      r0,|L1.19508|
004bd0  f7fffffe          BL       uart_putchar
004bd4  210a              MOVS     r1,#0xa
004bd6  4817              LDR      r0,|L1.19508|
004bd8  f7fffffe          BL       uart_putchar
004bdc  210a              MOVS     r1,#0xa
004bde  4815              LDR      r0,|L1.19508|
004be0  e03a              B        |L1.19544|
004be2  0000              DCW      0x0000
                  |L1.19428|
                          DCD      ||.text||+0x8b8
                  |L1.19432|
                          DCD      data
                  |L1.19436|
                          DCD      ||.text||+0xd54
                  |L1.19440|
004bf0  4f4b00            DCB      "OK",0
004bf3  00                DCB      0
                  |L1.19444|
                          DCD      at_
                  |L1.19448|
                          DCD      apn
                  |L1.19452|
                          DCD      tmeout
                  |L1.19456|
                          DCD      temp
                  |L1.19460|
                          DCD      int_erval
                  |L1.19464|
                          DCD      port
                  |L1.19468|
                          DCD      ||ip||
                  |L1.19472|
004c10  3e00              DCB      ">",0
004c12  00                DCB      0
004c13  00                DCB      0
                  |L1.19476|
                          DCD      uart_string_gsm
                  |L1.19480|
                          DCD      cond
                  |L1.19484|
                          DCD      0x00001388
                  |L1.19488|
004c20  0a00              DCB      "\n",0
004c22  00                DCB      0
004c23  00                DCB      0
                  |L1.19492|
                          DCD      len
                  |L1.19496|
                          DCD      tout
                  |L1.19500|
                          DCD      ||k2||
                  |L1.19504|
                          DCD      k
                  |L1.19508|
                          DCD      0x4006b000
                  |L1.19512|
                          DCD      ||.text||+0x474
                  |L1.19516|
                          DCD      stcond1
                  |L1.19520|
                          DCD      stcond2
                  |L1.19524|
                          DCD      stcond3
                  |L1.19528|
                          DCD      stcond4
                  |L1.19532|
                          DCD      qwe
                  |L1.19536|
                          DCD      con1d
                  |L1.19540|
                          DCD      drive
                  |L1.19544|
004c58  f7fffffe          BL       uart_putchar
004c5c  210a              MOVS     r1,#0xa
004c5e  48fe              LDR      r0,|L1.20568|
004c60  f7fffffe          BL       uart_putchar
004c64  210a              MOVS     r1,#0xa
004c66  48fc              LDR      r0,|L1.20568|
004c68  f7fffffe          BL       uart_putchar
004c6c  210a              MOVS     r1,#0xa
004c6e  48fa              LDR      r0,|L1.20568|
004c70  f7fffffe          BL       uart_putchar
004c74  210a              MOVS     r1,#0xa
004c76  48f8              LDR      r0,|L1.20568|
004c78  f7fffffe          BL       uart_putchar
004c7c  210a              MOVS     r1,#0xa
004c7e  48f6              LDR      r0,|L1.20568|
004c80  f7fffffe          BL       uart_putchar
004c84  210a              MOVS     r1,#0xa
004c86  48f4              LDR      r0,|L1.20568|
004c88  f7fffffe          BL       uart_putchar
004c8c  210a              MOVS     r1,#0xa
004c8e  48f2              LDR      r0,|L1.20568|
004c90  f7fffffe          BL       uart_putchar
004c94  210a              MOVS     r1,#0xa
004c96  48f0              LDR      r0,|L1.20568|
004c98  f7fffffe          BL       uart_putchar
004c9c  210a              MOVS     r1,#0xa
004c9e  48ee              LDR      r0,|L1.20568|
004ca0  f7fffffe          BL       uart_putchar
004ca4  210a              MOVS     r1,#0xa
004ca6  48ec              LDR      r0,|L1.20568|
004ca8  f7fffffe          BL       uart_putchar
004cac  210a              MOVS     r1,#0xa
004cae  48ea              LDR      r0,|L1.20568|
004cb0  f7fffffe          BL       uart_putchar
004cb4  210a              MOVS     r1,#0xa
004cb6  48e8              LDR      r0,|L1.20568|
004cb8  f7fffffe          BL       uart_putchar
004cbc  210a              MOVS     r1,#0xa
004cbe  48e6              LDR      r0,|L1.20568|
004cc0  f7fffffe          BL       uart_putchar
004cc4  210a              MOVS     r1,#0xa
004cc6  48e4              LDR      r0,|L1.20568|
004cc8  f7fffffe          BL       uart_putchar
004ccc  210a              MOVS     r1,#0xa
004cce  48e2              LDR      r0,|L1.20568|
004cd0  f7fffffe          BL       uart_putchar
004cd4  210a              MOVS     r1,#0xa
004cd6  48e0              LDR      r0,|L1.20568|
004cd8  f7fffffe          BL       uart_putchar
004cdc  210a              MOVS     r1,#0xa
004cde  48de              LDR      r0,|L1.20568|
004ce0  f7fffffe          BL       uart_putchar
004ce4  210a              MOVS     r1,#0xa
004ce6  48dc              LDR      r0,|L1.20568|
004ce8  f7fffffe          BL       uart_putchar
004cec  210a              MOVS     r1,#0xa
004cee  48da              LDR      r0,|L1.20568|
004cf0  f7fffffe          BL       uart_putchar
004cf4  210a              MOVS     r1,#0xa
004cf6  48d8              LDR      r0,|L1.20568|
004cf8  f7fffffe          BL       uart_putchar
004cfc  210a              MOVS     r1,#0xa
004cfe  48d6              LDR      r0,|L1.20568|
004d00  f7fffffe          BL       uart_putchar
004d04  210a              MOVS     r1,#0xa
004d06  48d4              LDR      r0,|L1.20568|
004d08  f7fffffe          BL       uart_putchar
004d0c  210a              MOVS     r1,#0xa
004d0e  48d2              LDR      r0,|L1.20568|
004d10  f7fffffe          BL       uart_putchar
004d14  210a              MOVS     r1,#0xa
004d16  48d0              LDR      r0,|L1.20568|
004d18  f7fffffe          BL       uart_putchar
004d1c  210a              MOVS     r1,#0xa
004d1e  48ce              LDR      r0,|L1.20568|
004d20  f7fffffe          BL       uart_putchar
004d24  210a              MOVS     r1,#0xa
004d26  48cc              LDR      r0,|L1.20568|
004d28  f7fffffe          BL       uart_putchar
004d2c  210a              MOVS     r1,#0xa
004d2e  48ca              LDR      r0,|L1.20568|
004d30  f7fffffe          BL       uart_putchar
004d34  210a              MOVS     r1,#0xa
004d36  48c8              LDR      r0,|L1.20568|
004d38  f7fffffe          BL       uart_putchar
;;;640    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004d3c  bf00              NOP      
                  |L1.19774|
004d3e  49c7              LDR      r1,|L1.20572|
004d40  48c7              LDR      r0,|L1.20576|
004d42  f7fffffe          BL       strstr
004d46  2800              CMP      r0,#0
004d48  d10a              BNE      |L1.19808|
004d4a  49c4              LDR      r1,|L1.20572|
004d4c  398c              SUBS     r1,r1,#0x8c
004d4e  48c4              LDR      r0,|L1.20576|
004d50  f7fffffe          BL       strstr
004d54  2800              CMP      r0,#0
004d56  d103              BNE      |L1.19808|
004d58  48c2              LDR      r0,|L1.20580|
004d5a  6800              LDR      r0,[r0,#0]  ; tout
004d5c  2805              CMP      r0,#5
004d5e  ddee              BLE      |L1.19774|
                  |L1.19808|
;;;641    									{}
;;;642    	                memset(data,0,strlen(data));
004d60  48c1              LDR      r0,|L1.20584|
004d62  f7fffffe          BL       strlen
004d66  4601              MOV      r1,r0
004d68  9000              STR      r0,[sp,#0]
004d6a  48bf              LDR      r0,|L1.20584|
004d6c  f7fffffe          BL       __aeabi_memclr
;;;643    									clear();
004d70  f7fffffe          BL       clear
004d74  e14c              B        |L1.20496|
                  |L1.19830|
;;;644    									}else{
;;;645    									//send_chunk();
;;;646    									}	
;;;647    						}else{
;;;648    									delay(100);
004d76  2064              MOVS     r0,#0x64
004d78  f7fffffe          BL       delay
;;;649    									clear();//memset(uart_string_gsm,0,5000);
004d7c  f7fffffe          BL       clear
;;;650    
;;;651    									memset(at_,0,100);
004d80  2164              MOVS     r1,#0x64
004d82  48ba              LDR      r0,|L1.20588|
004d84  f7fffffe          BL       __aeabi_memclr
;;;652    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004d88  48b7              LDR      r0,|L1.20584|
004d8a  f7fffffe          BL       strlen
004d8e  1c40              ADDS     r0,r0,#1
004d90  4603              MOV      r3,r0
004d92  4ab7              LDR      r2,|L1.20592|
004d94  49b1              LDR      r1,|L1.20572|
004d96  3938              SUBS     r1,r1,#0x38
004d98  9000              STR      r0,[sp,#0]
004d9a  48b4              LDR      r0,|L1.20588|
004d9c  f7fffffe          BL       __2sprintf
;;;653    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004da0  2005              MOVS     r0,#5
004da2  4bae              LDR      r3,|L1.20572|
004da4  3b8c              SUBS     r3,r3,#0x8c
004da6  461a              MOV      r2,r3
004da8  3278              ADDS     r2,r2,#0x78
004daa  a1b2              ADR      r1,|L1.20596|
004dac  9000              STR      r0,[sp,#0]
004dae  48af              LDR      r0,|L1.20588|
004db0  f7fffffe          BL       send_SD
;;;654    if(strstr(uart_string_gsm,"ERROR")){
004db4  49a9              LDR      r1,|L1.20572|
004db6  398c              SUBS     r1,r1,#0x8c
004db8  48a9              LDR      r0,|L1.20576|
004dba  f7fffffe          BL       strstr
004dbe  2800              CMP      r0,#0
004dc0  d004              BEQ      |L1.19916|
;;;655    	drive[0]='C';drive[1]=':';
004dc2  2043              MOVS     r0,#0x43
004dc4  49aa              LDR      r1,|L1.20592|
004dc6  7008              STRB     r0,[r1,#0]
004dc8  203a              MOVS     r0,#0x3a
004dca  7048              STRB     r0,[r1,#1]
                  |L1.19916|
;;;656    }	
;;;657    									clear();	
004dcc  f7fffffe          BL       clear
;;;658    									k2=0;									//string array counter for uart 1
004dd0  2000              MOVS     r0,#0
004dd2  49a9              LDR      r1,|L1.20600|
004dd4  6008              STR      r0,[r1,#0]  ; k2
;;;659    									tout=0;	
004dd6  49a3              LDR      r1,|L1.20580|
004dd8  6008              STR      r0,[r1,#0]  ; tout
;;;660    		for(k=0;k<strlen(data);k++)
004dda  49a8              LDR      r1,|L1.20604|
004ddc  6008              STR      r0,[r1,#0]  ; k
004dde  e00d              B        |L1.19964|
                  |L1.19936|
;;;661    		{
;;;662    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004de0  48a1              LDR      r0,|L1.20584|
004de2  49a6              LDR      r1,|L1.20604|
004de4  6809              LDR      r1,[r1,#0]  ; k
004de6  5c40              LDRB     r0,[r0,r1]
004de8  4601              MOV      r1,r0
004dea  9000              STR      r0,[sp,#0]
004dec  489a              LDR      r0,|L1.20568|
004dee  f7fffffe          BL       uart_putchar
004df2  48a2              LDR      r0,|L1.20604|
004df4  6800              LDR      r0,[r0,#0]            ;660  ; k
004df6  1c40              ADDS     r0,r0,#1              ;660
004df8  49a0              LDR      r1,|L1.20604|
004dfa  6008              STR      r0,[r1,#0]            ;660  ; k
                  |L1.19964|
004dfc  489a              LDR      r0,|L1.20584|
004dfe  f7fffffe          BL       strlen
004e02  499e              LDR      r1,|L1.20604|
004e04  6809              LDR      r1,[r1,#0]            ;660  ; k
004e06  4288              CMP      r0,r1                 ;660
004e08  d8ea              BHI      |L1.19936|
;;;663    		}	
;;;664    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004e0a  210a              MOVS     r1,#0xa
004e0c  4892              LDR      r0,|L1.20568|
004e0e  f7fffffe          BL       uart_putchar
004e12  210a              MOVS     r1,#0xa
004e14  4890              LDR      r0,|L1.20568|
004e16  f7fffffe          BL       uart_putchar
004e1a  210a              MOVS     r1,#0xa
004e1c  488e              LDR      r0,|L1.20568|
004e1e  f7fffffe          BL       uart_putchar
004e22  210a              MOVS     r1,#0xa
004e24  488c              LDR      r0,|L1.20568|
004e26  f7fffffe          BL       uart_putchar
004e2a  210a              MOVS     r1,#0xa
004e2c  488a              LDR      r0,|L1.20568|
004e2e  f7fffffe          BL       uart_putchar
004e32  210a              MOVS     r1,#0xa
004e34  4888              LDR      r0,|L1.20568|
004e36  f7fffffe          BL       uart_putchar
004e3a  210a              MOVS     r1,#0xa
004e3c  4886              LDR      r0,|L1.20568|
004e3e  f7fffffe          BL       uart_putchar
004e42  210a              MOVS     r1,#0xa
004e44  4884              LDR      r0,|L1.20568|
004e46  f7fffffe          BL       uart_putchar
004e4a  210a              MOVS     r1,#0xa
004e4c  4882              LDR      r0,|L1.20568|
004e4e  f7fffffe          BL       uart_putchar
004e52  210a              MOVS     r1,#0xa
004e54  4880              LDR      r0,|L1.20568|
004e56  f7fffffe          BL       uart_putchar
004e5a  210a              MOVS     r1,#0xa
004e5c  487e              LDR      r0,|L1.20568|
004e5e  f7fffffe          BL       uart_putchar
004e62  210a              MOVS     r1,#0xa
004e64  487c              LDR      r0,|L1.20568|
004e66  f7fffffe          BL       uart_putchar
004e6a  210a              MOVS     r1,#0xa
004e6c  487a              LDR      r0,|L1.20568|
004e6e  f7fffffe          BL       uart_putchar
004e72  210a              MOVS     r1,#0xa
004e74  4878              LDR      r0,|L1.20568|
004e76  f7fffffe          BL       uart_putchar
004e7a  210a              MOVS     r1,#0xa
004e7c  4876              LDR      r0,|L1.20568|
004e7e  f7fffffe          BL       uart_putchar
004e82  210a              MOVS     r1,#0xa
004e84  4874              LDR      r0,|L1.20568|
004e86  f7fffffe          BL       uart_putchar
004e8a  210a              MOVS     r1,#0xa
004e8c  4872              LDR      r0,|L1.20568|
004e8e  f7fffffe          BL       uart_putchar
004e92  210a              MOVS     r1,#0xa
004e94  4870              LDR      r0,|L1.20568|
004e96  f7fffffe          BL       uart_putchar
004e9a  210a              MOVS     r1,#0xa
004e9c  486e              LDR      r0,|L1.20568|
004e9e  f7fffffe          BL       uart_putchar
004ea2  210a              MOVS     r1,#0xa
004ea4  486c              LDR      r0,|L1.20568|
004ea6  f7fffffe          BL       uart_putchar
004eaa  210a              MOVS     r1,#0xa
004eac  486a              LDR      r0,|L1.20568|
004eae  f7fffffe          BL       uart_putchar
004eb2  210a              MOVS     r1,#0xa
004eb4  4868              LDR      r0,|L1.20568|
004eb6  f7fffffe          BL       uart_putchar
004eba  210a              MOVS     r1,#0xa
004ebc  4866              LDR      r0,|L1.20568|
004ebe  f7fffffe          BL       uart_putchar
004ec2  210a              MOVS     r1,#0xa
004ec4  4864              LDR      r0,|L1.20568|
004ec6  f7fffffe          BL       uart_putchar
004eca  210a              MOVS     r1,#0xa
004ecc  4862              LDR      r0,|L1.20568|
004ece  f7fffffe          BL       uart_putchar
004ed2  210a              MOVS     r1,#0xa
004ed4  4860              LDR      r0,|L1.20568|
004ed6  f7fffffe          BL       uart_putchar
004eda  210a              MOVS     r1,#0xa
004edc  485e              LDR      r0,|L1.20568|
004ede  f7fffffe          BL       uart_putchar
004ee2  210a              MOVS     r1,#0xa
004ee4  485c              LDR      r0,|L1.20568|
004ee6  f7fffffe          BL       uart_putchar
004eea  210a              MOVS     r1,#0xa
004eec  485a              LDR      r0,|L1.20568|
004eee  f7fffffe          BL       uart_putchar
004ef2  210a              MOVS     r1,#0xa
004ef4  4858              LDR      r0,|L1.20568|
004ef6  f7fffffe          BL       uart_putchar
004efa  210a              MOVS     r1,#0xa
004efc  4856              LDR      r0,|L1.20568|
004efe  f7fffffe          BL       uart_putchar
004f02  210a              MOVS     r1,#0xa
004f04  4854              LDR      r0,|L1.20568|
004f06  f7fffffe          BL       uart_putchar
004f0a  210a              MOVS     r1,#0xa
004f0c  4852              LDR      r0,|L1.20568|
004f0e  f7fffffe          BL       uart_putchar
004f12  210a              MOVS     r1,#0xa
004f14  4850              LDR      r0,|L1.20568|
004f16  f7fffffe          BL       uart_putchar
004f1a  210a              MOVS     r1,#0xa
004f1c  484e              LDR      r0,|L1.20568|
004f1e  f7fffffe          BL       uart_putchar
004f22  210a              MOVS     r1,#0xa
004f24  484c              LDR      r0,|L1.20568|
004f26  f7fffffe          BL       uart_putchar
004f2a  210a              MOVS     r1,#0xa
004f2c  484a              LDR      r0,|L1.20568|
004f2e  f7fffffe          BL       uart_putchar
004f32  210a              MOVS     r1,#0xa
004f34  4848              LDR      r0,|L1.20568|
004f36  f7fffffe          BL       uart_putchar
004f3a  210a              MOVS     r1,#0xa
004f3c  4846              LDR      r0,|L1.20568|
004f3e  f7fffffe          BL       uart_putchar
004f42  210a              MOVS     r1,#0xa
004f44  4844              LDR      r0,|L1.20568|
004f46  f7fffffe          BL       uart_putchar
004f4a  210a              MOVS     r1,#0xa
004f4c  4842              LDR      r0,|L1.20568|
004f4e  f7fffffe          BL       uart_putchar
004f52  210a              MOVS     r1,#0xa
004f54  4840              LDR      r0,|L1.20568|
004f56  f7fffffe          BL       uart_putchar
004f5a  210a              MOVS     r1,#0xa
004f5c  483e              LDR      r0,|L1.20568|
004f5e  f7fffffe          BL       uart_putchar
004f62  210a              MOVS     r1,#0xa
004f64  483c              LDR      r0,|L1.20568|
004f66  f7fffffe          BL       uart_putchar
004f6a  210a              MOVS     r1,#0xa
004f6c  483a              LDR      r0,|L1.20568|
004f6e  f7fffffe          BL       uart_putchar
004f72  210a              MOVS     r1,#0xa
004f74  4838              LDR      r0,|L1.20568|
004f76  f7fffffe          BL       uart_putchar
004f7a  210a              MOVS     r1,#0xa
004f7c  4836              LDR      r0,|L1.20568|
004f7e  f7fffffe          BL       uart_putchar
004f82  210a              MOVS     r1,#0xa
004f84  4834              LDR      r0,|L1.20568|
004f86  f7fffffe          BL       uart_putchar
004f8a  210a              MOVS     r1,#0xa
004f8c  4832              LDR      r0,|L1.20568|
004f8e  f7fffffe          BL       uart_putchar
004f92  210a              MOVS     r1,#0xa
004f94  4830              LDR      r0,|L1.20568|
004f96  f7fffffe          BL       uart_putchar
004f9a  210a              MOVS     r1,#0xa
004f9c  482e              LDR      r0,|L1.20568|
004f9e  f7fffffe          BL       uart_putchar
004fa2  210a              MOVS     r1,#0xa
004fa4  482c              LDR      r0,|L1.20568|
004fa6  f7fffffe          BL       uart_putchar
004faa  210a              MOVS     r1,#0xa
004fac  482a              LDR      r0,|L1.20568|
004fae  f7fffffe          BL       uart_putchar
004fb2  210a              MOVS     r1,#0xa
004fb4  4828              LDR      r0,|L1.20568|
004fb6  f7fffffe          BL       uart_putchar
004fba  210a              MOVS     r1,#0xa
004fbc  4826              LDR      r0,|L1.20568|
004fbe  f7fffffe          BL       uart_putchar
004fc2  210a              MOVS     r1,#0xa
004fc4  4824              LDR      r0,|L1.20568|
004fc6  f7fffffe          BL       uart_putchar
004fca  210a              MOVS     r1,#0xa
004fcc  4822              LDR      r0,|L1.20568|
004fce  f7fffffe          BL       uart_putchar
;;;665    								
;;;666    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004fd2  bf00              NOP      
                  |L1.20436|
004fd4  4921              LDR      r1,|L1.20572|
004fd6  4822              LDR      r0,|L1.20576|
004fd8  f7fffffe          BL       strstr
004fdc  2800              CMP      r0,#0
004fde  d10a              BNE      |L1.20470|
004fe0  491e              LDR      r1,|L1.20572|
004fe2  398c              SUBS     r1,r1,#0x8c
004fe4  481e              LDR      r0,|L1.20576|
004fe6  f7fffffe          BL       strstr
004fea  2800              CMP      r0,#0
004fec  d103              BNE      |L1.20470|
004fee  481d              LDR      r0,|L1.20580|
004ff0  6800              LDR      r0,[r0,#0]  ; tout
004ff2  2805              CMP      r0,#5
004ff4  ddee              BLE      |L1.20436|
                  |L1.20470|
;;;667    									{}
;;;668    	                 memset(data,0,strlen(data));
004ff6  481c              LDR      r0,|L1.20584|
004ff8  f7fffffe          BL       strlen
004ffc  4601              MOV      r1,r0
004ffe  9000              STR      r0,[sp,#0]
005000  4819              LDR      r0,|L1.20584|
005002  f7fffffe          BL       __aeabi_memclr
;;;669    									 clear();
005006  f7fffffe          BL       clear
;;;670      								logged=1;}			//
00500a  2001              MOVS     r0,#1
00500c  491c              LDR      r1,|L1.20608|
00500e  6008              STR      r0,[r1,#0]  ; logged
                  |L1.20496|
;;;671    
;;;672    							
;;;673    
;;;674    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;675    	else
;;;676    	{
;;;677    		//send_chunk();
;;;678    	}		
;;;679    								
;;;680    								
;;;681    								
;;;682    	memset(data,0,strlen(data));	
005010  4815              LDR      r0,|L1.20584|
005012  f7fffffe          BL       strlen
005016  4601              MOV      r1,r0
005018  9000              STR      r0,[sp,#0]
00501a  4813              LDR      r0,|L1.20584|
00501c  f7fffffe          BL       __aeabi_memclr
;;;683    	uart_putchar(UART1_BASE_PTR, 0x1A);
005020  211a              MOVS     r1,#0x1a
005022  480d              LDR      r0,|L1.20568|
005024  f7fffffe          BL       uart_putchar
                  |L1.20520|
;;;684    
;;;685    while(1)
005028  e3fe              B        |L1.22568|
                  |L1.20522|
;;;686    {
;;;687    LED_state();
00502a  f7fffffe          BL       LED_state
;;;688    LED_state2();
00502e  f7fffffe          BL       LED_state2
;;;689    RESET_ON; //not reset
005032  2020              MOVS     r0,#0x20
005034  4913              LDR      r1,|L1.20612|
005036  6048              STR      r0,[r1,#4]
;;;690    msg_sim800(); 
005038  f7fffffe          BL       msg_sim800
;;;691    	DTR_OFF;		// not sleep	
00503c  2080              MOVS     r0,#0x80
00503e  4911              LDR      r1,|L1.20612|
005040  3140              ADDS     r1,r1,#0x40
005042  6088              STR      r0,[r1,#8]
;;;692    	delay(200);
005044  20c8              MOVS     r0,#0xc8
005046  f7fffffe          BL       delay
;;;693    
;;;694    	sleep_flag=0;
00504a  2000              MOVS     r0,#0
00504c  490e              LDR      r1,|L1.20616|
00504e  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;695    //	if(voltagecbc<4000){breach=1;}
;;;696    //	else{breach=0;}
;;;697    	if(	(GPIOC_PDIR & 0x00000001) || (GPIOB_PDIR & 0x00000001)){
005050  480c              LDR      r0,|L1.20612|
005052  6900              LDR      r0,[r0,#0x10]
005054  07c0              LSLS     r0,r0,#31
005056  e019              B        |L1.20620|
                  |L1.20568|
                          DCD      0x4006b000
                  |L1.20572|
                          DCD      ||.text||+0x8fc
                  |L1.20576|
                          DCD      uart_string_gsm
                  |L1.20580|
                          DCD      tout
                  |L1.20584|
                          DCD      data
                  |L1.20588|
                          DCD      at_
                  |L1.20592|
                          DCD      drive
                  |L1.20596|
005074  3e00              DCB      ">",0
005076  00                DCB      0
005077  00                DCB      0
                  |L1.20600|
                          DCD      ||k2||
                  |L1.20604|
                          DCD      k
                  |L1.20608|
                          DCD      logged
                  |L1.20612|
                          DCD      0x400ff080
                  |L1.20616|
                          DCD      sleep_flag
                  |L1.20620|
00508c  0fc0              LSRS     r0,r0,#31
00508e  2800              CMP      r0,#0
005090  d105              BNE      |L1.20638|
005092  48fe              LDR      r0,|L1.21644|
005094  6900              LDR      r0,[r0,#0x10]
005096  07c0              LSLS     r0,r0,#31
005098  0fc0              LSRS     r0,r0,#31
00509a  2800              CMP      r0,#0
00509c  d007              BEQ      |L1.20654|
                  |L1.20638|
;;;698    	DTR_OFF;sleep_flag = 0;
00509e  2080              MOVS     r0,#0x80
0050a0  49fa              LDR      r1,|L1.21644|
0050a2  3180              ADDS     r1,r1,#0x80
0050a4  6088              STR      r0,[r1,#8]
0050a6  2000              MOVS     r0,#0
0050a8  49f9              LDR      r1,|L1.21648|
0050aa  6008              STR      r0,[r1,#0]  ; sleep_flag
0050ac  e006              B        |L1.20668|
                  |L1.20654|
;;;699    	}
;;;700    	else{
;;;701    	DTR_ON;sleep_flag=1;
0050ae  2080              MOVS     r0,#0x80
0050b0  49f6              LDR      r1,|L1.21644|
0050b2  3180              ADDS     r1,r1,#0x80
0050b4  6048              STR      r0,[r1,#4]
0050b6  2001              MOVS     r0,#1
0050b8  49f5              LDR      r1,|L1.21648|
0050ba  6008              STR      r0,[r1,#0]  ; sleep_flag
                  |L1.20668|
;;;702    	}
;;;703    
;;;704    	
;;;705    	
;;;706    if(rtcticks2>=1500){
0050bc  48f5              LDR      r0,|L1.21652|
0050be  6800              LDR      r0,[r0,#0]  ; rtcticks2
0050c0  49f5              LDR      r1,|L1.21656|
0050c2  4288              CMP      r0,r1
0050c4  db7e              BLT      |L1.20932|
;;;707    	DTR_OFF;
0050c6  2080              MOVS     r0,#0x80
0050c8  49f0              LDR      r1,|L1.21644|
0050ca  3180              ADDS     r1,r1,#0x80
0050cc  6088              STR      r0,[r1,#8]
;;;708    	send_modem("\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n");
0050ce  a0f3              ADR      r0,|L1.21660|
0050d0  f7fffffe          BL       send_modem
;;;709    	clear();
0050d4  f7fffffe          BL       clear
;;;710    		delay(100);
0050d8  2064              MOVS     r0,#0x64
0050da  f7fffffe          BL       delay
;;;711    
;;;712    	savecursor();
0050de  f7fffffe          BL       savecursor
;;;713    	
;;;714    				memset(at_,0,100);
0050e2  2164              MOVS     r1,#0x64
0050e4  48fd              LDR      r0,|L1.21724|
0050e6  f7fffffe          BL       __aeabi_memclr
;;;715    				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0050ea  48fd              LDR      r0,|L1.21728|
0050ec  f7fffffe          BL       strlen
0050f0  1c40              ADDS     r0,r0,#1
0050f2  4603              MOV      r3,r0
0050f4  4afb              LDR      r2,|L1.21732|
0050f6  49fc              LDR      r1,|L1.21736|
0050f8  9000              STR      r0,[sp,#0]
0050fa  48f8              LDR      r0,|L1.21724|
0050fc  f7fffffe          BL       __2sprintf
;;;716    				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005100  2005              MOVS     r0,#5
005102  4bf9              LDR      r3,|L1.21736|
005104  3b54              SUBS     r3,r3,#0x54
005106  461a              MOV      r2,r3
005108  3278              ADDS     r2,r2,#0x78
00510a  a1f8              ADR      r1,|L1.21740|
00510c  9000              STR      r0,[sp,#0]
00510e  48f3              LDR      r0,|L1.21724|
005110  f7fffffe          BL       send_SD
;;;717    if(strstr(uart_string_gsm,"ERROR")){
005114  49f4              LDR      r1,|L1.21736|
005116  3954              SUBS     r1,r1,#0x54
005118  48f5              LDR      r0,|L1.21744|
00511a  f7fffffe          BL       strstr
00511e  2800              CMP      r0,#0
005120  d004              BEQ      |L1.20780|
;;;718    	drive[0]='C';drive[1]=':';
005122  2043              MOVS     r0,#0x43
005124  49ef              LDR      r1,|L1.21732|
005126  7008              STRB     r0,[r1,#0]
005128  203a              MOVS     r0,#0x3a
00512a  7048              STRB     r0,[r1,#1]
                  |L1.20780|
;;;719    }	
;;;720    				//clear();	
;;;721    				k2=0;									//string array counter for uart 1
00512c  2000              MOVS     r0,#0
00512e  49f1              LDR      r1,|L1.21748|
005130  6008              STR      r0,[r1,#0]  ; k2
;;;722    				tout=0;	
005132  49f1              LDR      r1,|L1.21752|
005134  6008              STR      r0,[r1,#0]  ; tout
;;;723    				for(k=0;k<strlen(data);k++)
005136  49f1              LDR      r1,|L1.21756|
005138  6008              STR      r0,[r1,#0]  ; k
00513a  e00d              B        |L1.20824|
                  |L1.20796|
;;;724    				{
;;;725    					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00513c  48e8              LDR      r0,|L1.21728|
00513e  49ef              LDR      r1,|L1.21756|
005140  6809              LDR      r1,[r1,#0]  ; k
005142  5c40              LDRB     r0,[r0,r1]
005144  4601              MOV      r1,r0
005146  9000              STR      r0,[sp,#0]
005148  48ed              LDR      r0,|L1.21760|
00514a  f7fffffe          BL       uart_putchar
00514e  48eb              LDR      r0,|L1.21756|
005150  6800              LDR      r0,[r0,#0]            ;723  ; k
005152  1c40              ADDS     r0,r0,#1              ;723
005154  49e9              LDR      r1,|L1.21756|
005156  6008              STR      r0,[r1,#0]            ;723  ; k
                  |L1.20824|
005158  48e1              LDR      r0,|L1.21728|
00515a  f7fffffe          BL       strlen
00515e  49e7              LDR      r1,|L1.21756|
005160  6809              LDR      r1,[r1,#0]            ;723  ; k
005162  4288              CMP      r0,r1                 ;723
005164  d8ea              BHI      |L1.20796|
;;;726    				}	
;;;727    				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005166  210a              MOVS     r1,#0xa
005168  48e5              LDR      r0,|L1.21760|
00516a  f7fffffe          BL       uart_putchar
00516e  210a              MOVS     r1,#0xa
005170  48e3              LDR      r0,|L1.21760|
005172  f7fffffe          BL       uart_putchar
005176  210a              MOVS     r1,#0xa
005178  48e1              LDR      r0,|L1.21760|
00517a  f7fffffe          BL       uart_putchar
00517e  210a              MOVS     r1,#0xa
005180  48df              LDR      r0,|L1.21760|
005182  f7fffffe          BL       uart_putchar
005186  210a              MOVS     r1,#0xa
005188  48dd              LDR      r0,|L1.21760|
00518a  f7fffffe          BL       uart_putchar
00518e  210a              MOVS     r1,#0xa
005190  48db              LDR      r0,|L1.21760|
005192  f7fffffe          BL       uart_putchar
005196  210a              MOVS     r1,#0xa
005198  48d9              LDR      r0,|L1.21760|
00519a  f7fffffe          BL       uart_putchar
00519e  210a              MOVS     r1,#0xa
0051a0  48d7              LDR      r0,|L1.21760|
0051a2  f7fffffe          BL       uart_putchar
0051a6  210a              MOVS     r1,#0xa
0051a8  48d5              LDR      r0,|L1.21760|
0051aa  f7fffffe          BL       uart_putchar
0051ae  210a              MOVS     r1,#0xa
0051b0  48d3              LDR      r0,|L1.21760|
0051b2  f7fffffe          BL       uart_putchar
0051b6  210a              MOVS     r1,#0xa
0051b8  48d1              LDR      r0,|L1.21760|
0051ba  f7fffffe          BL       uart_putchar
0051be  210a              MOVS     r1,#0xa
0051c0  48cf              LDR      r0,|L1.21760|
0051c2  e000              B        |L1.20934|
                  |L1.20932|
0051c4  e0db              B        |L1.21374|
                  |L1.20934|
0051c6  f7fffffe          BL       uart_putchar
0051ca  210a              MOVS     r1,#0xa
0051cc  48cc              LDR      r0,|L1.21760|
0051ce  f7fffffe          BL       uart_putchar
0051d2  210a              MOVS     r1,#0xa
0051d4  48ca              LDR      r0,|L1.21760|
0051d6  f7fffffe          BL       uart_putchar
0051da  210a              MOVS     r1,#0xa
0051dc  48c8              LDR      r0,|L1.21760|
0051de  f7fffffe          BL       uart_putchar
0051e2  210a              MOVS     r1,#0xa
0051e4  48c6              LDR      r0,|L1.21760|
0051e6  f7fffffe          BL       uart_putchar
0051ea  210a              MOVS     r1,#0xa
0051ec  48c4              LDR      r0,|L1.21760|
0051ee  f7fffffe          BL       uart_putchar
0051f2  210a              MOVS     r1,#0xa
0051f4  48c2              LDR      r0,|L1.21760|
0051f6  f7fffffe          BL       uart_putchar
0051fa  210a              MOVS     r1,#0xa
0051fc  48c0              LDR      r0,|L1.21760|
0051fe  f7fffffe          BL       uart_putchar
005202  210a              MOVS     r1,#0xa
005204  48be              LDR      r0,|L1.21760|
005206  f7fffffe          BL       uart_putchar
00520a  210a              MOVS     r1,#0xa
00520c  48bc              LDR      r0,|L1.21760|
00520e  f7fffffe          BL       uart_putchar
005212  210a              MOVS     r1,#0xa
005214  48ba              LDR      r0,|L1.21760|
005216  f7fffffe          BL       uart_putchar
00521a  210a              MOVS     r1,#0xa
00521c  48b8              LDR      r0,|L1.21760|
00521e  f7fffffe          BL       uart_putchar
005222  210a              MOVS     r1,#0xa
005224  48b6              LDR      r0,|L1.21760|
005226  f7fffffe          BL       uart_putchar
00522a  210a              MOVS     r1,#0xa
00522c  48b4              LDR      r0,|L1.21760|
00522e  f7fffffe          BL       uart_putchar
005232  210a              MOVS     r1,#0xa
005234  48b2              LDR      r0,|L1.21760|
005236  f7fffffe          BL       uart_putchar
00523a  210a              MOVS     r1,#0xa
00523c  48b0              LDR      r0,|L1.21760|
00523e  f7fffffe          BL       uart_putchar
005242  210a              MOVS     r1,#0xa
005244  48ae              LDR      r0,|L1.21760|
005246  f7fffffe          BL       uart_putchar
00524a  210a              MOVS     r1,#0xa
00524c  48ac              LDR      r0,|L1.21760|
00524e  f7fffffe          BL       uart_putchar
005252  210a              MOVS     r1,#0xa
005254  48aa              LDR      r0,|L1.21760|
005256  f7fffffe          BL       uart_putchar
00525a  210a              MOVS     r1,#0xa
00525c  48a8              LDR      r0,|L1.21760|
00525e  f7fffffe          BL       uart_putchar
005262  210a              MOVS     r1,#0xa
005264  48a6              LDR      r0,|L1.21760|
005266  f7fffffe          BL       uart_putchar
00526a  210a              MOVS     r1,#0xa
00526c  48a4              LDR      r0,|L1.21760|
00526e  f7fffffe          BL       uart_putchar
005272  210a              MOVS     r1,#0xa
005274  48a2              LDR      r0,|L1.21760|
005276  f7fffffe          BL       uart_putchar
00527a  210a              MOVS     r1,#0xa
00527c  48a0              LDR      r0,|L1.21760|
00527e  f7fffffe          BL       uart_putchar
005282  210a              MOVS     r1,#0xa
005284  489e              LDR      r0,|L1.21760|
005286  f7fffffe          BL       uart_putchar
00528a  210a              MOVS     r1,#0xa
00528c  489c              LDR      r0,|L1.21760|
00528e  f7fffffe          BL       uart_putchar
005292  210a              MOVS     r1,#0xa
005294  489a              LDR      r0,|L1.21760|
005296  f7fffffe          BL       uart_putchar
00529a  210a              MOVS     r1,#0xa
00529c  4898              LDR      r0,|L1.21760|
00529e  f7fffffe          BL       uart_putchar
0052a2  210a              MOVS     r1,#0xa
0052a4  4896              LDR      r0,|L1.21760|
0052a6  f7fffffe          BL       uart_putchar
0052aa  210a              MOVS     r1,#0xa
0052ac  4894              LDR      r0,|L1.21760|
0052ae  f7fffffe          BL       uart_putchar
0052b2  210a              MOVS     r1,#0xa
0052b4  4892              LDR      r0,|L1.21760|
0052b6  f7fffffe          BL       uart_putchar
0052ba  210a              MOVS     r1,#0xa
0052bc  4890              LDR      r0,|L1.21760|
0052be  f7fffffe          BL       uart_putchar
0052c2  210a              MOVS     r1,#0xa
0052c4  488e              LDR      r0,|L1.21760|
0052c6  f7fffffe          BL       uart_putchar
0052ca  210a              MOVS     r1,#0xa
0052cc  488c              LDR      r0,|L1.21760|
0052ce  f7fffffe          BL       uart_putchar
0052d2  210a              MOVS     r1,#0xa
0052d4  488a              LDR      r0,|L1.21760|
0052d6  f7fffffe          BL       uart_putchar
0052da  210a              MOVS     r1,#0xa
0052dc  4888              LDR      r0,|L1.21760|
0052de  f7fffffe          BL       uart_putchar
0052e2  210a              MOVS     r1,#0xa
0052e4  4886              LDR      r0,|L1.21760|
0052e6  f7fffffe          BL       uart_putchar
0052ea  210a              MOVS     r1,#0xa
0052ec  4884              LDR      r0,|L1.21760|
0052ee  f7fffffe          BL       uart_putchar
0052f2  210a              MOVS     r1,#0xa
0052f4  4882              LDR      r0,|L1.21760|
0052f6  f7fffffe          BL       uart_putchar
0052fa  210a              MOVS     r1,#0xa
0052fc  4880              LDR      r0,|L1.21760|
0052fe  f7fffffe          BL       uart_putchar
005302  210a              MOVS     r1,#0xa
005304  487e              LDR      r0,|L1.21760|
005306  f7fffffe          BL       uart_putchar
00530a  210a              MOVS     r1,#0xa
00530c  487c              LDR      r0,|L1.21760|
00530e  f7fffffe          BL       uart_putchar
005312  210a              MOVS     r1,#0xa
005314  487a              LDR      r0,|L1.21760|
005316  f7fffffe          BL       uart_putchar
00531a  210a              MOVS     r1,#0xa
00531c  4878              LDR      r0,|L1.21760|
00531e  f7fffffe          BL       uart_putchar
005322  210a              MOVS     r1,#0xa
005324  4876              LDR      r0,|L1.21760|
005326  f7fffffe          BL       uart_putchar
00532a  210a              MOVS     r1,#0xa
00532c  4874              LDR      r0,|L1.21760|
00532e  f7fffffe          BL       uart_putchar
;;;728    				//memset(data,0,1000);
;;;729    				//timer counts to wait for characters in uart 1 									
;;;730    				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005332  bf00              NOP      
                  |L1.21300|
005334  496c              LDR      r1,|L1.21736|
005336  3138              ADDS     r1,r1,#0x38
005338  486d              LDR      r0,|L1.21744|
00533a  f7fffffe          BL       strstr
00533e  2800              CMP      r0,#0
005340  d10a              BNE      |L1.21336|
005342  4969              LDR      r1,|L1.21736|
005344  3954              SUBS     r1,r1,#0x54
005346  486a              LDR      r0,|L1.21744|
005348  f7fffffe          BL       strstr
00534c  2800              CMP      r0,#0
00534e  d103              BNE      |L1.21336|
005350  4869              LDR      r0,|L1.21752|
005352  6800              LDR      r0,[r0,#0]  ; tout
005354  2805              CMP      r0,#5
005356  dded              BLE      |L1.21300|
                  |L1.21336|
;;;731    				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;732    				}
;;;733    				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;734    				//memset(data,0,strlen(data));
;;;735    				//clear();
;;;736    	RESET_OFF;
005358  2020              MOVS     r0,#0x20
00535a  494c              LDR      r1,|L1.21644|
00535c  3140              ADDS     r1,r1,#0x40
00535e  6088              STR      r0,[r1,#8]
;;;737    	RESET_OFF;
005360  6088              STR      r0,[r1,#8]
;;;738    	delay(100);	
005362  2064              MOVS     r0,#0x64
005364  f7fffffe          BL       delay
;;;739    	RESET_ON;
005368  2020              MOVS     r0,#0x20
00536a  4948              LDR      r1,|L1.21644|
00536c  3140              ADDS     r1,r1,#0x40
00536e  6048              STR      r0,[r1,#4]
;;;740    	RESET_ON;	
005370  6048              STR      r0,[r1,#4]
;;;741    	delay(100);
005372  2064              MOVS     r0,#0x64
005374  f7fffffe          BL       delay
;;;742    	rtcticks2 =0;
005378  2000              MOVS     r0,#0
00537a  4946              LDR      r1,|L1.21652|
00537c  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.21374|
;;;743    
;;;744    	}//3600	
;;;745    memset(at_,0,100);
00537e  2164              MOVS     r1,#0x64
005380  4856              LDR      r0,|L1.21724|
005382  f7fffffe          BL       __aeabi_memclr
;;;746    sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>         \n \n\n\r\n",aliveping,k5,rtcticks2);							
005386  4843              LDR      r0,|L1.21652|
005388  6800              LDR      r0,[r0,#0]  ; rtcticks2
00538a  9000              STR      r0,[sp,#0]
00538c  485d              LDR      r0,|L1.21764|
00538e  6803              LDR      r3,[r0,#0]  ; k5
005390  485d              LDR      r0,|L1.21768|
005392  a15e              ADR      r1,|L1.21772|
005394  6802              LDR      r2,[r0,#0]  ; aliveping
005396  4851              LDR      r0,|L1.21724|
005398  f7fffffe          BL       __2sprintf
;;;747    //send_modem(at_);
;;;748    //send_modem(num2);	
;;;749    	
;;;750    	
;;;751    if	((sleep_flag != 1  || (aliveping > 5) ) )			
00539c  483c              LDR      r0,|L1.21648|
00539e  6800              LDR      r0,[r0,#0]  ; sleep_flag
0053a0  2801              CMP      r0,#1
0053a2  d104              BNE      |L1.21422|
0053a4  4858              LDR      r0,|L1.21768|
0053a6  6800              LDR      r0,[r0,#0]  ; aliveping
0053a8  2805              CMP      r0,#5
0053aa  dc00              BGT      |L1.21422|
0053ac  e63c              B        |L1.20520|
                  |L1.21422|
;;;752    {
;;;753    	DTR_OFF;
0053ae  2080              MOVS     r0,#0x80
0053b0  4936              LDR      r1,|L1.21644|
0053b2  3180              ADDS     r1,r1,#0x80
0053b4  6088              STR      r0,[r1,#8]
;;;754    	sleep_flag=0;
0053b6  2000              MOVS     r0,#0
0053b8  4935              LDR      r1,|L1.21648|
0053ba  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;755    	send_GSM("\r\nAT+CIPCLOSE\r\n", "CLOSE OK", "ERROR" , "ERROR:",tmeout);		
0053bc  4861              LDR      r0,|L1.21828|
0053be  6800              LDR      r0,[r0,#0]  ; tmeout
0053c0  4b61              LDR      r3,|L1.21832|
0053c2  4a49              LDR      r2,|L1.21736|
0053c4  3a54              SUBS     r2,r2,#0x54
0053c6  a161              ADR      r1,|L1.21836|
0053c8  9000              STR      r0,[sp,#0]
0053ca  a063              ADR      r0,|L1.21848|
0053cc  f7fffffe          BL       send_GSM
;;;756    	memset(at_,0,100);
0053d0  2164              MOVS     r1,#0x64
0053d2  4842              LDR      r0,|L1.21724|
0053d4  f7fffffe          BL       __aeabi_memclr
;;;757    	memset(data,0,strlen(data));
0053d8  4841              LDR      r0,|L1.21728|
0053da  f7fffffe          BL       strlen
0053de  4601              MOV      r1,r0
0053e0  9000              STR      r0,[sp,#0]
0053e2  483f              LDR      r0,|L1.21728|
0053e4  f7fffffe          BL       __aeabi_memclr
;;;758    
;;;759    	GPS_COLLECT();	
0053e8  f7fffffe          BL       GPS_COLLECT
;;;760    	
;;;761    	if((aliveping>5))	
0053ec  4846              LDR      r0,|L1.21768|
0053ee  6800              LDR      r0,[r0,#0]  ; aliveping
0053f0  2805              CMP      r0,#5
0053f2  dd49              BLE      |L1.21640|
;;;762    	{
;;;763    			memset(ignstr,0,2);
0053f4  485c              LDR      r0,|L1.21864|
0053f6  2100              MOVS     r1,#0
0053f8  7001              STRB     r1,[r0,#0]
0053fa  7041              STRB     r1,[r0,#1]
;;;764    if(GPIOB_PDIR & 0x00000001){
0053fc  4823              LDR      r0,|L1.21644|
0053fe  6900              LDR      r0,[r0,#0x10]
005400  07c0              LSLS     r0,r0,#31
005402  0fc0              LSRS     r0,r0,#31
005404  2800              CMP      r0,#0
005406  d007              BEQ      |L1.21528|
;;;765    			sprintf(ignstr,"%d,%ld",1,rtcticks2);
005408  4822              LDR      r0,|L1.21652|
00540a  2201              MOVS     r2,#1
00540c  a157              ADR      r1,|L1.21868|
00540e  6803              LDR      r3,[r0,#0]  ; rtcticks2
005410  4855              LDR      r0,|L1.21864|
005412  f7fffffe          BL       __2sprintf
005416  e006              B        |L1.21542|
                  |L1.21528|
;;;766    }
;;;767    else{
;;;768    				sprintf(ignstr,"%d,%ld",0,rtcticks2);
005418  481e              LDR      r0,|L1.21652|
00541a  2200              MOVS     r2,#0
00541c  a153              ADR      r1,|L1.21868|
00541e  6803              LDR      r3,[r0,#0]  ; rtcticks2
005420  4851              LDR      r0,|L1.21864|
005422  f7fffffe          BL       __2sprintf
                  |L1.21542|
;;;769    
;;;770    }
;;;771    
;;;772    memset(acstr,0,2); //ptb2
005426  4853              LDR      r0,|L1.21876|
005428  2100              MOVS     r1,#0
00542a  8001              STRH     r1,[r0,#0]
;;;773    if(GPIOB_PDIR & 0x00000004){
00542c  4817              LDR      r0,|L1.21644|
00542e  6900              LDR      r0,[r0,#0x10]
005430  2104              MOVS     r1,#4
005432  4008              ANDS     r0,r0,r1
005434  2800              CMP      r0,#0
005436  d005              BEQ      |L1.21572|
;;;774    			sprintf(acstr,"%d",1);
005438  2201              MOVS     r2,#1
00543a  a14f              ADR      r1,|L1.21880|
00543c  484d              LDR      r0,|L1.21876|
00543e  f7fffffe          BL       __2sprintf
005442  e004              B        |L1.21582|
                  |L1.21572|
;;;775    }
;;;776    else{
;;;777    				sprintf(acstr,"%d",0);
005444  2200              MOVS     r2,#0
005446  a14c              ADR      r1,|L1.21880|
005448  484a              LDR      r0,|L1.21876|
00544a  f7fffffe          BL       __2sprintf
                  |L1.21582|
;;;778    
;;;779    }
;;;780    
;;;781    		
;;;782    		aliveping=0;
00544e  2000              MOVS     r0,#0
005450  492d              LDR      r1,|L1.21768|
005452  6008              STR      r0,[r1,#0]  ; aliveping
;;;783    		memset(data,0,strlen(data));	
005454  4822              LDR      r0,|L1.21728|
005456  f7fffffe          BL       strlen
00545a  4601              MOV      r1,r0
00545c  9000              STR      r0,[sp,#0]
00545e  4820              LDR      r0,|L1.21728|
005460  f7fffffe          BL       __aeabi_memclr
;;;784    		strcat(data,imei);strcat(data,",ALIVE,");strcat(data,num2);strcat(data,",F=");strcat(data,fuelstr);		strcat(data,",AC=");	
005464  4945              LDR      r1,|L1.21884|
005466  481e              LDR      r0,|L1.21728|
005468  f7fffffe          BL       strcat
00546c  a144              ADR      r1,|L1.21888|
00546e  481c              LDR      r0,|L1.21728|
005470  f7fffffe          BL       strcat
005474  4944              LDR      r1,|L1.21896|
005476  481a              LDR      r0,|L1.21728|
005478  f7fffffe          BL       strcat
00547c  a143              ADR      r1,|L1.21900|
00547e  4818              LDR      r0,|L1.21728|
005480  f7fffffe          BL       strcat
005484  4942              LDR      r1,|L1.21904|
005486  e085              B        |L1.21908|
                  |L1.21640|
005488  e09b              B        |L1.21954|
00548a  0000              DCW      0x0000
                  |L1.21644|
                          DCD      0x400ff040
                  |L1.21648|
                          DCD      sleep_flag
                  |L1.21652|
                          DCD      rtcticks2
                  |L1.21656|
                          DCD      0x000005dc
                  |L1.21660|
00549c  0d0a0d0a          DCB      "\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n"
0054a0  0d0a0a0a
0054a4  0a0a0a44
0054a8  45564943
0054ac  45204953
0054b0  20524553
0054b4  45545449
0054b8  4e472e2e
0054bc  2e2e2e2e
0054c0  2e0a0a0a
0054c4  0a      
0054c5  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n",0
0054c9  0a0a0a0a
0054cd  0a0a0a0a
0054d1  0a0a0a0a
0054d5  0a0a0d0a
0054d9  0a0a00  
                  |L1.21724|
                          DCD      at_
                  |L1.21728|
                          DCD      data
                  |L1.21732|
                          DCD      drive
                  |L1.21736|
                          DCD      ||.text||+0x8c4
                  |L1.21740|
0054ec  3e00              DCB      ">",0
0054ee  00                DCB      0
0054ef  00                DCB      0
                  |L1.21744|
                          DCD      uart_string_gsm
                  |L1.21748|
                          DCD      ||k2||
                  |L1.21752|
                          DCD      tout
                  |L1.21756|
                          DCD      k
                  |L1.21760|
                          DCD      0x4006b000
                  |L1.21764|
                          DCD      ||k5||
                  |L1.21768|
                          DCD      aliveping
                  |L1.21772|
00550c  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>         \n \n"
005510  20202020
005514  20202020
005518  20202020
00551c  20203c25
005520  643e2020
005524  203c2564
005528  3e202020
00552c  3c3d2564
005530  3e202020
005534  20202020
005538  20200a20
00553c  0a      
00553d  0a0d0a00          DCB      "\n\r\n",0
005541  00                DCB      0
005542  00                DCB      0
005543  00                DCB      0
                  |L1.21828|
                          DCD      tmeout
                  |L1.21832|
                          DCD      ||.text||+0xd54
                  |L1.21836|
00554c  434c4f53          DCB      "CLOSE OK",0
005550  45204f4b
005554  00      
005555  00                DCB      0
005556  00                DCB      0
005557  00                DCB      0
                  |L1.21848|
005558  0d0a4154          DCB      "\r\nAT+CIPCLOSE\r\n",0
00555c  2b434950
005560  434c4f53
005564  450d0a00
                  |L1.21864|
                          DCD      ignstr
                  |L1.21868|
00556c  25642c25          DCB      "%d,%ld",0
005570  6c6400  
005573  00                DCB      0
                  |L1.21876|
                          DCD      acstr
                  |L1.21880|
005578  256400            DCB      "%d",0
00557b  00                DCB      0
                  |L1.21884|
                          DCD      imei
                  |L1.21888|
005580  2c414c49          DCB      ",ALIVE,",0
005584  56452c00
                  |L1.21896|
                          DCD      num2
                  |L1.21900|
00558c  2c463d00          DCB      ",F=",0
                  |L1.21904|
                          DCD      fuelstr
                  |L1.21908|
005594  48fe              LDR      r0,|L1.22928|
005596  f7fffffe          BL       strcat
00559a  a1fe              ADR      r1,|L1.22932|
00559c  48fc              LDR      r0,|L1.22928|
00559e  f7fffffe          BL       strcat
;;;785    		strcat(data,acstr);
0055a2  49fe              LDR      r1,|L1.22940|
0055a4  48fa              LDR      r0,|L1.22928|
0055a6  f7fffffe          BL       strcat
;;;786    		strcat(data,",I=");	
0055aa  a1fd              ADR      r1,|L1.22944|
0055ac  48f8              LDR      r0,|L1.22928|
0055ae  f7fffffe          BL       strcat
;;;787    		strcat(data,ignstr);strcat(data,",\n\n\n"); 
0055b2  49fc              LDR      r1,|L1.22948|
0055b4  48f6              LDR      r0,|L1.22928|
0055b6  f7fffffe          BL       strcat
0055ba  a1fb              ADR      r1,|L1.22952|
0055bc  48f4              LDR      r0,|L1.22928|
0055be  f7fffffe          BL       strcat
                  |L1.21954|
;;;788    	}	
;;;789    
;;;790    	msg_sim800(); 
0055c2  f7fffffe          BL       msg_sim800
;;;791    	
;;;792    		sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0055c6  4bfa              LDR      r3,|L1.22960|
0055c8  4afa              LDR      r2,|L1.22964|
0055ca  49fb              LDR      r1,|L1.22968|
0055cc  48fb              LDR      r0,|L1.22972|
0055ce  f7fffffe          BL       __2sprintf
;;;793    		send_GSM( at_ , "CONNECT", "ERROR" , "ERROR\r\n",tmeout);	
0055d2  48fb              LDR      r0,|L1.22976|
0055d4  6800              LDR      r0,[r0,#0]  ; tmeout
0055d6  4bfb              LDR      r3,|L1.22980|
0055d8  461a              MOV      r2,r3
0055da  3a78              SUBS     r2,r2,#0x78
0055dc  49f6              LDR      r1,|L1.22968|
0055de  3120              ADDS     r1,r1,#0x20
0055e0  9000              STR      r0,[sp,#0]
0055e2  48f6              LDR      r0,|L1.22972|
0055e4  f7fffffe          BL       send_GSM
;;;794    		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);	
0055e8  48f5              LDR      r0,|L1.22976|
0055ea  6800              LDR      r0,[r0,#0]  ; tmeout
0055ec  4bf2              LDR      r3,|L1.22968|
0055ee  3328              ADDS     r3,r3,#0x28
0055f0  4af4              LDR      r2,|L1.22980|
0055f2  3a78              SUBS     r2,r2,#0x78
0055f4  a1f4              ADR      r1,|L1.22984|
0055f6  9000              STR      r0,[sp,#0]
0055f8  4618              MOV      r0,r3
0055fa  3010              ADDS     r0,r0,#0x10
0055fc  f7fffffe          BL       send_GSM
;;;795    		memset(stcond1,0,strlen(stcond1));
005600  48f2              LDR      r0,|L1.22988|
005602  6800              LDR      r0,[r0,#0]  ; stcond1
005604  f7fffffe          BL       strlen
005608  4601              MOV      r1,r0
00560a  9000              STR      r0,[sp,#0]
00560c  48ef              LDR      r0,|L1.22988|
00560e  6800              LDR      r0,[r0,#0]  ; stcond1
005610  f7fffffe          BL       __aeabi_memclr
;;;796    		memset(stcond2,0,strlen(stcond2));	
005614  48ee              LDR      r0,|L1.22992|
005616  6800              LDR      r0,[r0,#0]  ; stcond2
005618  f7fffffe          BL       strlen
00561c  4601              MOV      r1,r0
00561e  9000              STR      r0,[sp,#0]
005620  48eb              LDR      r0,|L1.22992|
005622  6800              LDR      r0,[r0,#0]  ; stcond2
005624  f7fffffe          BL       __aeabi_memclr
;;;797    		memset(stcond3,0,strlen(stcond3));	
005628  48ea              LDR      r0,|L1.22996|
00562a  6800              LDR      r0,[r0,#0]  ; stcond3
00562c  f7fffffe          BL       strlen
005630  4601              MOV      r1,r0
005632  9000              STR      r0,[sp,#0]
005634  48e7              LDR      r0,|L1.22996|
005636  6800              LDR      r0,[r0,#0]  ; stcond3
005638  f7fffffe          BL       __aeabi_memclr
;;;798    		memset(stcond4,0,strlen(stcond4));	
00563c  48e6              LDR      r0,|L1.23000|
00563e  6800              LDR      r0,[r0,#0]  ; stcond4
005640  f7fffffe          BL       strlen
005644  4601              MOV      r1,r0
005646  9000              STR      r0,[sp,#0]
005648  48e3              LDR      r0,|L1.23000|
00564a  6800              LDR      r0,[r0,#0]  ; stcond4
00564c  f7fffffe          BL       __aeabi_memclr
;;;799    		memset(con1d,0,strlen(con1d));	
005650  48e2              LDR      r0,|L1.23004|
005652  6800              LDR      r0,[r0,#0]  ; con1d
005654  f7fffffe          BL       strlen
005658  4601              MOV      r1,r0
00565a  9000              STR      r0,[sp,#0]
00565c  48df              LDR      r0,|L1.23004|
00565e  6800              LDR      r0,[r0,#0]  ; con1d
005660  f7fffffe          BL       __aeabi_memclr
;;;800    		cond=0;
005664  2000              MOVS     r0,#0
005666  49de              LDR      r1,|L1.23008|
005668  7008              STRB     r0,[r1,#0]
;;;801    								cond=mystrstr(uart_string_gsm,'>');
00566a  213e              MOVS     r1,#0x3e
00566c  48dd              LDR      r0,|L1.23012|
00566e  f7fffffe          BL       mystrstr
005672  49db              LDR      r1,|L1.23008|
005674  7008              STRB     r0,[r1,#0]
;;;802    	
;;;803    								if(cond)	
005676  4608              MOV      r0,r1
005678  7800              LDRB     r0,[r0,#0]  ; cond
00567a  2800              CMP      r0,#0
00567c  d07d              BEQ      |L1.22394|
;;;804    								{		
;;;805    									clear();
00567e  f7fffffe          BL       clear
;;;806    									memset(uart_string_gsm,0,5000);
005682  49d9              LDR      r1,|L1.23016|
005684  48d7              LDR      r0,|L1.23012|
005686  f7fffffe          BL       __aeabi_memclr
;;;807    									strcat(data,"\n\n");
00568a  a1d8              ADR      r1,|L1.23020|
00568c  48c0              LDR      r0,|L1.22928|
00568e  f7fffffe          BL       strcat
;;;808    									len=strlen(data);
005692  48bf              LDR      r0,|L1.22928|
005694  f7fffffe          BL       strlen
005698  49d5              LDR      r1,|L1.23024|
00569a  6008              STR      r0,[r1,#0]  ; len
;;;809    									tout=0;
00569c  2000              MOVS     r0,#0
00569e  49d5              LDR      r1,|L1.23028|
0056a0  6008              STR      r0,[r1,#0]  ; tout
;;;810    									k2=0;
0056a2  49d5              LDR      r1,|L1.23032|
0056a4  6008              STR      r0,[r1,#0]  ; k2
;;;811    									for(k=0;k<len;k++)
0056a6  49d5              LDR      r1,|L1.23036|
0056a8  6008              STR      r0,[r1,#0]  ; k
0056aa  e00d              B        |L1.22216|
                  |L1.22188|
;;;812    									{
;;;813    										uart_putchar(UART1_BASE_PTR, data[k]);
0056ac  48b8              LDR      r0,|L1.22928|
0056ae  49d3              LDR      r1,|L1.23036|
0056b0  6809              LDR      r1,[r1,#0]  ; k
0056b2  5c40              LDRB     r0,[r0,r1]
0056b4  4601              MOV      r1,r0
0056b6  9000              STR      r0,[sp,#0]
0056b8  48d1              LDR      r0,|L1.23040|
0056ba  f7fffffe          BL       uart_putchar
0056be  48cf              LDR      r0,|L1.23036|
0056c0  6800              LDR      r0,[r0,#0]            ;811  ; k
0056c2  1c40              ADDS     r0,r0,#1              ;811
0056c4  49cd              LDR      r1,|L1.23036|
0056c6  6008              STR      r0,[r1,#0]            ;811  ; k
                  |L1.22216|
0056c8  48cc              LDR      r0,|L1.23036|
0056ca  6800              LDR      r0,[r0,#0]            ;811  ; k
0056cc  49c8              LDR      r1,|L1.23024|
0056ce  6809              LDR      r1,[r1,#0]            ;811  ; len
0056d0  4288              CMP      r0,r1                 ;811
0056d2  dbeb              BLT      |L1.22188|
;;;814    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0056d4  210a              MOVS     r1,#0xa
0056d6  48ca              LDR      r0,|L1.23040|
0056d8  f7fffffe          BL       uart_putchar
0056dc  211a              MOVS     r1,#0x1a
0056de  48c8              LDR      r0,|L1.23040|
0056e0  f7fffffe          BL       uart_putchar
0056e4  211a              MOVS     r1,#0x1a
0056e6  48c6              LDR      r0,|L1.23040|
0056e8  f7fffffe          BL       uart_putchar
0056ec  211a              MOVS     r1,#0x1a
0056ee  48c4              LDR      r0,|L1.23040|
0056f0  f7fffffe          BL       uart_putchar
0056f4  211a              MOVS     r1,#0x1a
0056f6  48c2              LDR      r0,|L1.23040|
0056f8  f7fffffe          BL       uart_putchar
0056fc  211a              MOVS     r1,#0x1a
0056fe  48c0              LDR      r0,|L1.23040|
005700  f7fffffe          BL       uart_putchar
;;;815    									do
005704  bf00              NOP      
                  |L1.22278|
;;;816    																{stcond1=strstr(uart_string_gsm,"SEND OK");
005706  49bf              LDR      r1,|L1.23044|
005708  48b6              LDR      r0,|L1.23012|
00570a  f7fffffe          BL       strstr
00570e  49af              LDR      r1,|L1.22988|
005710  6008              STR      r0,[r1,#0]  ; stcond1
;;;817    																	stcond2=strstr(uart_string_gsm, "ERROR");
005712  49ac              LDR      r1,|L1.22980|
005714  3978              SUBS     r1,r1,#0x78
005716  48b3              LDR      r0,|L1.23012|
005718  f7fffffe          BL       strstr
00571c  49ac              LDR      r1,|L1.22992|
00571e  6008              STR      r0,[r1,#0]  ; stcond2
;;;818    																		stcond3=strstr(uart_string_gsm, "FAIL");	
005720  49a5              LDR      r1,|L1.22968|
005722  3130              ADDS     r1,r1,#0x30
005724  48af              LDR      r0,|L1.23012|
005726  f7fffffe          BL       strstr
00572a  49aa              LDR      r1,|L1.22996|
00572c  6008              STR      r0,[r1,#0]  ; stcond3
;;;819    																			stcond4=strstr(uart_string_gsm, "DEACT");	
00572e  49a5              LDR      r1,|L1.22980|
005730  395c              SUBS     r1,r1,#0x5c
005732  48ac              LDR      r0,|L1.23012|
005734  f7fffffe          BL       strstr
005738  49a7              LDR      r1,|L1.23000|
00573a  6008              STR      r0,[r1,#0]  ; stcond4
;;;820    																	
;;;821    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
00573c  48a4              LDR      r0,|L1.22992|
00573e  6800              LDR      r0,[r0,#0]  ; stcond2
005740  2800              CMP      r0,#0
005742  d10f              BNE      |L1.22372|
005744  48a3              LDR      r0,|L1.22996|
005746  6800              LDR      r0,[r0,#0]  ; stcond3
005748  2800              CMP      r0,#0
00574a  d10b              BNE      |L1.22372|
00574c  4608              MOV      r0,r1
00574e  6800              LDR      r0,[r0,#0]  ; stcond4
005750  2800              CMP      r0,#0
005752  d107              BNE      |L1.22372|
005754  489d              LDR      r0,|L1.22988|
005756  6800              LDR      r0,[r0,#0]  ; stcond1
005758  2800              CMP      r0,#0
00575a  d103              BNE      |L1.22372|
00575c  48a5              LDR      r0,|L1.23028|
00575e  6800              LDR      r0,[r0,#0]  ; tout
005760  2808              CMP      r0,#8
005762  ddd0              BLE      |L1.22278|
                  |L1.22372|
;;;822    																//delay(10);clear();
;;;823    														uart_putchar(UART1_BASE_PTR,0x1A);
005764  211a              MOVS     r1,#0x1a
005766  48a6              LDR      r0,|L1.23040|
005768  f7fffffe          BL       uart_putchar
;;;824    												//delay(10);
;;;825    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00576c  211a              MOVS     r1,#0x1a
00576e  48a4              LDR      r0,|L1.23040|
005770  f7fffffe          BL       uart_putchar
005774  211a              MOVS     r1,#0x1a
005776  48a2              LDR      r0,|L1.23040|
005778  e000              B        |L1.22396|
                  |L1.22394|
00577a  e00e              B        |L1.22426|
                  |L1.22396|
00577c  f7fffffe          BL       uart_putchar
005780  211a              MOVS     r1,#0x1a
005782  489f              LDR      r0,|L1.23040|
005784  f7fffffe          BL       uart_putchar
;;;826    								
;;;827    									delay(20);															
005788  2014              MOVS     r0,#0x14
00578a  f7fffffe          BL       delay
;;;828    									stcond1=strstr(uart_string_gsm,"SEND OK"); 
00578e  499d              LDR      r1,|L1.23044|
005790  4894              LDR      r0,|L1.23012|
005792  f7fffffe          BL       strstr
005796  498d              LDR      r1,|L1.22988|
005798  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.22426|
;;;829    								}else{}
;;;830    stcond1=strstr(uart_string_gsm,"SEND OK"); 
00579a  499a              LDR      r1,|L1.23044|
00579c  4891              LDR      r0,|L1.23012|
00579e  f7fffffe          BL       strstr
0057a2  498a              LDR      r1,|L1.22988|
0057a4  6008              STR      r0,[r1,#0]  ; stcond1
;;;831    //checks for send ok
;;;832    if(!(stcond1) == 1 ) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
0057a6  4608              MOV      r0,r1
0057a8  6800              LDR      r0,[r0,#0]  ; stcond1
0057aa  2800              CMP      r0,#0
0057ac  d101              BNE      |L1.22450|
0057ae  2001              MOVS     r0,#1
0057b0  e000              B        |L1.22452|
                  |L1.22450|
0057b2  2000              MOVS     r0,#0
                  |L1.22452|
0057b4  2801              CMP      r0,#1
0057b6  d17d              BNE      |L1.22708|
;;;833    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0057b8  211a              MOVS     r1,#0x1a
0057ba  4891              LDR      r0,|L1.23040|
0057bc  f7fffffe          BL       uart_putchar
0057c0  f7fffffe          BL       clear
0057c4  200a              MOVS     r0,#0xa
0057c6  f7fffffe          BL       delay
;;;834    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0057ca  211a              MOVS     r1,#0x1a
0057cc  488c              LDR      r0,|L1.23040|
0057ce  f7fffffe          BL       uart_putchar
0057d2  f7fffffe          BL       clear
0057d6  200a              MOVS     r0,#0xa
0057d8  f7fffffe          BL       delay
;;;835    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0057dc  211a              MOVS     r1,#0x1a
0057de  4888              LDR      r0,|L1.23040|
0057e0  f7fffffe          BL       uart_putchar
0057e4  f7fffffe          BL       clear
0057e8  200a              MOVS     r0,#0xa
0057ea  f7fffffe          BL       delay
;;;836    									remove_all_chars(data, '\n', '\n');
0057ee  220a              MOVS     r2,#0xa
0057f0  4611              MOV      r1,r2
0057f2  4867              LDR      r0,|L1.22928|
0057f4  f7fffffe          BL       remove_all_chars
;;;837    									strcat(data,"CH\n");	
0057f8  4972              LDR      r1,|L1.22980|
0057fa  3930              SUBS     r1,r1,#0x30
0057fc  4864              LDR      r0,|L1.22928|
0057fe  f7fffffe          BL       strcat
;;;838    									delay(100);
005802  2064              MOVS     r0,#0x64
005804  f7fffffe          BL       delay
;;;839    									clear();//memset(uart_string_gsm,0,5000);
005808  f7fffffe          BL       clear
;;;840    									memset(at_,0,100);
00580c  2164              MOVS     r1,#0x64
00580e  486b              LDR      r0,|L1.22972|
005810  f7fffffe          BL       __aeabi_memclr
;;;841    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005814  485e              LDR      r0,|L1.22928|
005816  f7fffffe          BL       strlen
00581a  1c40              ADDS     r0,r0,#1
00581c  4603              MOV      r3,r0
00581e  4a7a              LDR      r2,|L1.23048|
005820  4968              LDR      r1,|L1.22980|
005822  3924              SUBS     r1,r1,#0x24
005824  9000              STR      r0,[sp,#0]
005826  e000              B        |L1.22570|
                  |L1.22568|
005828  e3ec              B        |L1.24580|
                  |L1.22570|
00582a  4864              LDR      r0,|L1.22972|
00582c  f7fffffe          BL       __2sprintf
;;;842    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005830  2005              MOVS     r0,#5
005832  4b64              LDR      r3,|L1.22980|
005834  3b78              SUBS     r3,r3,#0x78
005836  4a63              LDR      r2,|L1.22980|
005838  a163              ADR      r1,|L1.22984|
00583a  9000              STR      r0,[sp,#0]
00583c  485f              LDR      r0,|L1.22972|
00583e  f7fffffe          BL       send_SD
;;;843    if(strstr(uart_string_gsm,"ERROR")){
005842  4960              LDR      r1,|L1.22980|
005844  3978              SUBS     r1,r1,#0x78
005846  4867              LDR      r0,|L1.23012|
005848  f7fffffe          BL       strstr
00584c  2800              CMP      r0,#0
00584e  d004              BEQ      |L1.22618|
;;;844    	drive[0]='C';drive[1]=':';
005850  2043              MOVS     r0,#0x43
005852  496d              LDR      r1,|L1.23048|
005854  7008              STRB     r0,[r1,#0]
005856  203a              MOVS     r0,#0x3a
005858  7048              STRB     r0,[r1,#1]
                  |L1.22618|
;;;845    }	
;;;846    									clear();	
00585a  f7fffffe          BL       clear
;;;847    									k2=0;									//string array counter for uart 1
00585e  2000              MOVS     r0,#0
005860  4965              LDR      r1,|L1.23032|
005862  6008              STR      r0,[r1,#0]  ; k2
;;;848    									tout=0;	
005864  4963              LDR      r1,|L1.23028|
005866  6008              STR      r0,[r1,#0]  ; tout
;;;849    									for(k=0;k<strlen(data);k++)
005868  4964              LDR      r1,|L1.23036|
00586a  6008              STR      r0,[r1,#0]  ; k
00586c  e00d              B        |L1.22666|
                  |L1.22638|
;;;850    									{
;;;851    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00586e  4848              LDR      r0,|L1.22928|
005870  4962              LDR      r1,|L1.23036|
005872  6809              LDR      r1,[r1,#0]  ; k
005874  5c40              LDRB     r0,[r0,r1]
005876  4601              MOV      r1,r0
005878  9000              STR      r0,[sp,#0]
00587a  4861              LDR      r0,|L1.23040|
00587c  f7fffffe          BL       uart_putchar
005880  485e              LDR      r0,|L1.23036|
005882  6800              LDR      r0,[r0,#0]            ;849  ; k
005884  1c40              ADDS     r0,r0,#1              ;849
005886  495d              LDR      r1,|L1.23036|
005888  6008              STR      r0,[r1,#0]            ;849  ; k
                  |L1.22666|
00588a  4841              LDR      r0,|L1.22928|
00588c  f7fffffe          BL       strlen
005890  495a              LDR      r1,|L1.23036|
005892  6809              LDR      r1,[r1,#0]            ;849  ; k
005894  4288              CMP      r0,r1                 ;849
005896  d8ea              BHI      |L1.22638|
;;;852    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005898  210a              MOVS     r1,#0xa
00589a  4859              LDR      r0,|L1.23040|
00589c  f7fffffe          BL       uart_putchar
0058a0  210a              MOVS     r1,#0xa
0058a2  4857              LDR      r0,|L1.23040|
0058a4  f7fffffe          BL       uart_putchar
0058a8  210a              MOVS     r1,#0xa
0058aa  4855              LDR      r0,|L1.23040|
0058ac  f7fffffe          BL       uart_putchar
;;;853    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');
0058b0  210a              MOVS     r1,#0xa
0058b2  e000              B        |L1.22710|
                  |L1.22708|
0058b4  e3fe              B        |L1.24756|
                  |L1.22710|
0058b6  4852              LDR      r0,|L1.23040|
0058b8  f7fffffe          BL       uart_putchar
0058bc  210a              MOVS     r1,#0xa
0058be  4850              LDR      r0,|L1.23040|
0058c0  f7fffffe          BL       uart_putchar
0058c4  210a              MOVS     r1,#0xa
0058c6  484e              LDR      r0,|L1.23040|
0058c8  f7fffffe          BL       uart_putchar
;;;854    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0058cc  210a              MOVS     r1,#0xa
0058ce  484c              LDR      r0,|L1.23040|
0058d0  f7fffffe          BL       uart_putchar
0058d4  210a              MOVS     r1,#0xa
0058d6  484a              LDR      r0,|L1.23040|
0058d8  f7fffffe          BL       uart_putchar
0058dc  210a              MOVS     r1,#0xa
0058de  4848              LDR      r0,|L1.23040|
0058e0  f7fffffe          BL       uart_putchar
;;;855    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 8) )))
0058e4  bf00              NOP      
                  |L1.22758|
0058e6  4937              LDR      r1,|L1.22980|
0058e8  3114              ADDS     r1,r1,#0x14
0058ea  483e              LDR      r0,|L1.23012|
0058ec  f7fffffe          BL       strstr
0058f0  2800              CMP      r0,#0
0058f2  d10a              BNE      |L1.22794|
0058f4  4933              LDR      r1,|L1.22980|
0058f6  3978              SUBS     r1,r1,#0x78
0058f8  483a              LDR      r0,|L1.23012|
0058fa  f7fffffe          BL       strstr
0058fe  2800              CMP      r0,#0
005900  d103              BNE      |L1.22794|
005902  483c              LDR      r0,|L1.23028|
005904  6800              LDR      r0,[r0,#0]  ; tout
005906  2808              CMP      r0,#8
005908  dded              BLE      |L1.22758|
                  |L1.22794|
;;;856    									{}
;;;857    									clear();
00590a  f7fffffe          BL       clear
;;;858    									memset(data,0,strlen(data));
00590e  4820              LDR      r0,|L1.22928|
005910  f7fffffe          BL       strlen
005914  4601              MOV      r1,r0
005916  9000              STR      r0,[sp,#0]
005918  481d              LDR      r0,|L1.22928|
00591a  f7fffffe          BL       __aeabi_memclr
;;;859    									clear();
00591e  f7fffffe          BL       clear
;;;860    									//	log_it();		                         //logging
;;;861    									memset(data,0,strlen(data));	
005922  481b              LDR      r0,|L1.22928|
005924  f7fffffe          BL       strlen
005928  4601              MOV      r1,r0
00592a  9000              STR      r0,[sp,#0]
00592c  4818              LDR      r0,|L1.22928|
00592e  f7fffffe          BL       __aeabi_memclr
;;;862    temp=int_erval;				
005932  4836              LDR      r0,|L1.23052|
005934  6800              LDR      r0,[r0,#0]  ; int_erval
005936  4936              LDR      r1,|L1.23056|
005938  6008              STR      r0,[r1,#0]  ; temp
;;;863    int_erval=4;
00593a  2004              MOVS     r0,#4
00593c  4933              LDR      r1,|L1.23052|
00593e  6008              STR      r0,[r1,#0]  ; int_erval
;;;864    //setting interval 4
;;;865    									GPS_COLLECT();
005940  f7fffffe          BL       GPS_COLLECT
;;;866    									strcat(data,"CH\n");	
005944  491f              LDR      r1,|L1.22980|
005946  3930              SUBS     r1,r1,#0x30
005948  4811              LDR      r0,|L1.22928|
00594a  f7fffffe          BL       strcat
;;;867    //**************************************tcp_initialization();//reinitialization*********************************/
;;;868    
;;;869    		
;;;870    	msg_sim800(); 
00594e  f7fffffe          BL       msg_sim800
;;;871    	send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
005952  2005              MOVS     r0,#5
005954  4b1b              LDR      r3,|L1.22980|
005956  3b78              SUBS     r3,r3,#0x78
005958  4a1a              LDR      r2,|L1.22980|
00595a  a12e              ADR      r1,|L1.23060|
00595c  9000              STR      r0,[sp,#0]
00595e  4610              MOV      r0,r2
005960  3020              ADDS     r0,r0,#0x20
005962  f7fffffe          BL       send_GSM
;;;872    	delay(100);
005966  2064              MOVS     r0,#0x64
005968  f7fffffe          BL       delay
;;;873    	send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00596c  2004              MOVS     r0,#4
00596e  4b15              LDR      r3,|L1.22980|
005970  3b78              SUBS     r3,r3,#0x78
005972  461a              MOV      r2,r3
005974  32a8              ADDS     r2,r2,#0xa8
005976  a127              ADR      r1,|L1.23060|
005978  9000              STR      r0,[sp,#0]
00597a  4610              MOV      r0,r2
00597c  3014              ADDS     r0,r0,#0x14
00597e  f7fffffe          BL       send_GSM
;;;874    	GPS_COLLECT2();
005982  f7fffffe          BL       GPS_COLLECT2
;;;875    	strcat(data,"CH\n");		
005986  490f              LDR      r1,|L1.22980|
005988  3930              SUBS     r1,r1,#0x30
00598a  4801              LDR      r0,|L1.22928|
00598c  e044              B        |L1.23064|
00598e  0000              DCW      0x0000
                  |L1.22928|
                          DCD      data
                  |L1.22932|
005994  2c41433d          DCB      ",AC=",0
005998  00      
005999  00                DCB      0
00599a  00                DCB      0
00599b  00                DCB      0
                  |L1.22940|
                          DCD      acstr
                  |L1.22944|
0059a0  2c493d00          DCB      ",I=",0
                  |L1.22948|
                          DCD      ignstr
                  |L1.22952|
0059a8  2c0a0a0a          DCB      ",\n\n\n",0
0059ac  00      
0059ad  00                DCB      0
0059ae  00                DCB      0
0059af  00                DCB      0
                  |L1.22960|
                          DCD      port
                  |L1.22964|
                          DCD      ||ip||
                  |L1.22968|
                          DCD      ||.text||+0xdb4
                  |L1.22972|
                          DCD      at_
                  |L1.22976|
                          DCD      tmeout
                  |L1.22980|
                          DCD      ||.text||+0x8e8
                  |L1.22984|
0059c8  3e00              DCB      ">",0
0059ca  00                DCB      0
0059cb  00                DCB      0
                  |L1.22988|
                          DCD      stcond1
                  |L1.22992|
                          DCD      stcond2
                  |L1.22996|
                          DCD      stcond3
                  |L1.23000|
                          DCD      stcond4
                  |L1.23004|
                          DCD      con1d
                  |L1.23008|
                          DCD      cond
                  |L1.23012|
                          DCD      uart_string_gsm
                  |L1.23016|
                          DCD      0x00001388
                  |L1.23020|
0059ec  0a0a00            DCB      "\n\n",0
0059ef  00                DCB      0
                  |L1.23024|
                          DCD      len
                  |L1.23028|
                          DCD      tout
                  |L1.23032|
                          DCD      ||k2||
                  |L1.23036|
                          DCD      k
                  |L1.23040|
                          DCD      0x4006b000
                  |L1.23044|
                          DCD      ||.text||+0x474
                  |L1.23048|
                          DCD      drive
                  |L1.23052|
                          DCD      int_erval
                  |L1.23056|
                          DCD      temp
                  |L1.23060|
005a14  4f4b00            DCB      "OK",0
005a17  00                DCB      0
                  |L1.23064|
005a18  f7fffffe          BL       strcat
;;;876    	GPS_COLLECT2();
005a1c  f7fffffe          BL       GPS_COLLECT2
;;;877    	strcat(data,"CH\n");	
005a20  49fd              LDR      r1,|L1.24088|
005a22  48fe              LDR      r0,|L1.24092|
005a24  f7fffffe          BL       strcat
;;;878    	GPS_COLLECT2();
005a28  f7fffffe          BL       GPS_COLLECT2
;;;879    	strcat(data,"CH\n");
005a2c  49fa              LDR      r1,|L1.24088|
005a2e  48fb              LDR      r0,|L1.24092|
005a30  f7fffffe          BL       strcat
;;;880    	cond201=(strstr(uart_string_gsm, "OK"));
005a34  a1fa              ADR      r1,|L1.24096|
005a36  48fb              LDR      r0,|L1.24100|
005a38  f7fffffe          BL       strstr
005a3c  49fa              LDR      r1,|L1.24104|
005a3e  6008              STR      r0,[r1,#0]  ; cond201
;;;881    	cond200=(strstr(uart_string_gsm, "ERROR"));
005a40  49f5              LDR      r1,|L1.24088|
005a42  3948              SUBS     r1,r1,#0x48
005a44  48f7              LDR      r0,|L1.24100|
005a46  f7fffffe          BL       strstr
005a4a  49f8              LDR      r1,|L1.24108|
005a4c  6008              STR      r0,[r1,#0]  ; cond200
;;;882    	if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
005a4e  48f6              LDR      r0,|L1.24104|
005a50  6800              LDR      r0,[r0,#0]  ; cond201
005a52  2800              CMP      r0,#0
005a54  d101              BNE      |L1.23130|
005a56  2001              MOVS     r0,#1
005a58  e000              B        |L1.23132|
                  |L1.23130|
005a5a  2000              MOVS     r0,#0
                  |L1.23132|
005a5c  2800              CMP      r0,#0
                  |L1.23134|
005a5e  d07d              BEQ      |L1.23388|
005a60  48f2              LDR      r0,|L1.24108|
005a62  6800              LDR      r0,[r0,#0]  ; cond200
005a64  2800              CMP      r0,#0
005a66  d101              BNE      |L1.23148|
005a68  2001              MOVS     r0,#1
005a6a  e000              B        |L1.23150|
                  |L1.23148|
005a6c  2000              MOVS     r0,#0
                  |L1.23150|
005a6e  2800              CMP      r0,#0
005a70  d0f5              BEQ      |L1.23134|
005a72  48ef              LDR      r0,|L1.24112|
005a74  6800              LDR      r0,[r0,#0]  ; sleep_flag
005a76  2801              CMP      r0,#1
005a78  d0f1              BEQ      |L1.23134|
;;;883    	{
;;;884    	delay(100);
005a7a  2064              MOVS     r0,#0x64
005a7c  f7fffffe          BL       delay
;;;885    	clear();//memset(uart_string_gsm,0,5000);
005a80  f7fffffe          BL       clear
;;;886    	memset(at_,0,100);
005a84  2164              MOVS     r1,#0x64
005a86  48eb              LDR      r0,|L1.24116|
005a88  f7fffffe          BL       __aeabi_memclr
;;;887    	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005a8c  48e3              LDR      r0,|L1.24092|
005a8e  f7fffffe          BL       strlen
005a92  1c40              ADDS     r0,r0,#1
005a94  4603              MOV      r3,r0
005a96  4ae8              LDR      r2,|L1.24120|
005a98  49df              LDR      r1,|L1.24088|
005a9a  310c              ADDS     r1,r1,#0xc
005a9c  9000              STR      r0,[sp,#0]
005a9e  48e5              LDR      r0,|L1.24116|
005aa0  f7fffffe          BL       __2sprintf
;;;888    	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005aa4  2005              MOVS     r0,#5
005aa6  4bdc              LDR      r3,|L1.24088|
005aa8  3b48              SUBS     r3,r3,#0x48
005aaa  461a              MOV      r2,r3
005aac  3278              ADDS     r2,r2,#0x78
005aae  a1e3              ADR      r1,|L1.24124|
005ab0  9000              STR      r0,[sp,#0]
005ab2  48e0              LDR      r0,|L1.24116|
005ab4  f7fffffe          BL       send_SD
;;;889    if(strstr(uart_string_gsm,"ERROR")){
005ab8  49d7              LDR      r1,|L1.24088|
005aba  3948              SUBS     r1,r1,#0x48
005abc  48d9              LDR      r0,|L1.24100|
005abe  f7fffffe          BL       strstr
005ac2  2800              CMP      r0,#0
005ac4  d004              BEQ      |L1.23248|
;;;890    	drive[0]='C';drive[1]=':';
005ac6  2043              MOVS     r0,#0x43
005ac8  49db              LDR      r1,|L1.24120|
005aca  7008              STRB     r0,[r1,#0]
005acc  203a              MOVS     r0,#0x3a
005ace  7048              STRB     r0,[r1,#1]
                  |L1.23248|
;;;891    }	
;;;892    	clear();	
005ad0  f7fffffe          BL       clear
;;;893    	k2=0;									//string array counter for uart 1
005ad4  2000              MOVS     r0,#0
005ad6  49da              LDR      r1,|L1.24128|
005ad8  6008              STR      r0,[r1,#0]  ; k2
;;;894    	tout=0;	
005ada  49da              LDR      r1,|L1.24132|
005adc  6008              STR      r0,[r1,#0]  ; tout
;;;895    	for(k=0;k<strlen(data);k++)
005ade  49da              LDR      r1,|L1.24136|
005ae0  6008              STR      r0,[r1,#0]  ; k
005ae2  e00d              B        |L1.23296|
                  |L1.23268|
;;;896    	{
;;;897    	uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005ae4  48cd              LDR      r0,|L1.24092|
005ae6  49d8              LDR      r1,|L1.24136|
005ae8  6809              LDR      r1,[r1,#0]  ; k
005aea  5c40              LDRB     r0,[r0,r1]
005aec  4601              MOV      r1,r0
005aee  9000              STR      r0,[sp,#0]
005af0  48d6              LDR      r0,|L1.24140|
005af2  f7fffffe          BL       uart_putchar
005af6  48d4              LDR      r0,|L1.24136|
005af8  6800              LDR      r0,[r0,#0]            ;895  ; k
005afa  1c40              ADDS     r0,r0,#1              ;895
005afc  49d2              LDR      r1,|L1.24136|
005afe  6008              STR      r0,[r1,#0]            ;895  ; k
                  |L1.23296|
005b00  48c6              LDR      r0,|L1.24092|
005b02  f7fffffe          BL       strlen
005b06  49d0              LDR      r1,|L1.24136|
005b08  6809              LDR      r1,[r1,#0]            ;895  ; k
005b0a  4288              CMP      r0,r1                 ;895
005b0c  d8ea              BHI      |L1.23268|
;;;898    	}	
;;;899    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005b0e  210a              MOVS     r1,#0xa
005b10  48ce              LDR      r0,|L1.24140|
005b12  f7fffffe          BL       uart_putchar
005b16  210a              MOVS     r1,#0xa
005b18  48cc              LDR      r0,|L1.24140|
005b1a  f7fffffe          BL       uart_putchar
005b1e  210a              MOVS     r1,#0xa
005b20  48ca              LDR      r0,|L1.24140|
005b22  f7fffffe          BL       uart_putchar
005b26  210a              MOVS     r1,#0xa
005b28  48c8              LDR      r0,|L1.24140|
005b2a  f7fffffe          BL       uart_putchar
005b2e  210a              MOVS     r1,#0xa
005b30  48c6              LDR      r0,|L1.24140|
005b32  f7fffffe          BL       uart_putchar
005b36  210a              MOVS     r1,#0xa
005b38  48c4              LDR      r0,|L1.24140|
005b3a  f7fffffe          BL       uart_putchar
005b3e  210a              MOVS     r1,#0xa
005b40  48c2              LDR      r0,|L1.24140|
005b42  f7fffffe          BL       uart_putchar
;;;900    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005b46  210a              MOVS     r1,#0xa
005b48  48c0              LDR      r0,|L1.24140|
005b4a  f7fffffe          BL       uart_putchar
005b4e  210a              MOVS     r1,#0xa
005b50  48be              LDR      r0,|L1.24140|
005b52  f7fffffe          BL       uart_putchar
005b56  210a              MOVS     r1,#0xa
005b58  48bc              LDR      r0,|L1.24140|
005b5a  e000              B        |L1.23390|
                  |L1.23388|
005b5c  e060              B        |L1.23584|
                  |L1.23390|
005b5e  f7fffffe          BL       uart_putchar
005b62  210a              MOVS     r1,#0xa
005b64  48b9              LDR      r0,|L1.24140|
005b66  f7fffffe          BL       uart_putchar
005b6a  210a              MOVS     r1,#0xa
005b6c  48b7              LDR      r0,|L1.24140|
005b6e  f7fffffe          BL       uart_putchar
005b72  210a              MOVS     r1,#0xa
005b74  48b5              LDR      r0,|L1.24140|
005b76  f7fffffe          BL       uart_putchar
005b7a  210a              MOVS     r1,#0xa
005b7c  48b3              LDR      r0,|L1.24140|
005b7e  f7fffffe          BL       uart_putchar
;;;901    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005b82  210a              MOVS     r1,#0xa
005b84  48b1              LDR      r0,|L1.24140|
005b86  f7fffffe          BL       uart_putchar
005b8a  210a              MOVS     r1,#0xa
005b8c  48af              LDR      r0,|L1.24140|
005b8e  f7fffffe          BL       uart_putchar
005b92  210a              MOVS     r1,#0xa
005b94  48ad              LDR      r0,|L1.24140|
005b96  f7fffffe          BL       uart_putchar
005b9a  210a              MOVS     r1,#0xa
005b9c  48ab              LDR      r0,|L1.24140|
005b9e  f7fffffe          BL       uart_putchar
005ba2  210a              MOVS     r1,#0xa
005ba4  48a9              LDR      r0,|L1.24140|
005ba6  f7fffffe          BL       uart_putchar
005baa  210a              MOVS     r1,#0xa
005bac  48a7              LDR      r0,|L1.24140|
005bae  f7fffffe          BL       uart_putchar
005bb2  210a              MOVS     r1,#0xa
005bb4  48a5              LDR      r0,|L1.24140|
005bb6  f7fffffe          BL       uart_putchar
;;;902    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005bba  210a              MOVS     r1,#0xa
005bbc  48a3              LDR      r0,|L1.24140|
005bbe  f7fffffe          BL       uart_putchar
005bc2  210a              MOVS     r1,#0xa
005bc4  48a1              LDR      r0,|L1.24140|
005bc6  f7fffffe          BL       uart_putchar
;;;903    										//memset(data,0,1000);
;;;904    															//timer counts to wait for characters in uart 1 									
;;;905    										while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005bca  bf00              NOP      
                  |L1.23500|
005bcc  4992              LDR      r1,|L1.24088|
005bce  3144              ADDS     r1,r1,#0x44
005bd0  4894              LDR      r0,|L1.24100|
005bd2  f7fffffe          BL       strstr
005bd6  2800              CMP      r0,#0
005bd8  d10a              BNE      |L1.23536|
005bda  498f              LDR      r1,|L1.24088|
005bdc  3948              SUBS     r1,r1,#0x48
005bde  4891              LDR      r0,|L1.24100|
005be0  f7fffffe          BL       strstr
005be4  2800              CMP      r0,#0
005be6  d103              BNE      |L1.23536|
005be8  4896              LDR      r0,|L1.24132|
005bea  6800              LDR      r0,[r0,#0]  ; tout
005bec  2805              CMP      r0,#5
005bee  dded              BLE      |L1.23500|
                  |L1.23536|
;;;906    										{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;907    										}
;;;908    										clear();//uart_putchar(UART1_BASE_PTR,0x1a);
005bf0  f7fffffe          BL       clear
;;;909    										//clear();
;;;910    										memset(data,0,strlen(data));
005bf4  4889              LDR      r0,|L1.24092|
005bf6  f7fffffe          BL       strlen
005bfa  4601              MOV      r1,r0
005bfc  9000              STR      r0,[sp,#0]
005bfe  4887              LDR      r0,|L1.24092|
005c00  f7fffffe          BL       __aeabi_memclr
;;;911    										clear();
005c04  f7fffffe          BL       clear
;;;912    										RESET_OFF;delay(100);
005c08  2020              MOVS     r0,#0x20
005c0a  4991              LDR      r1,|L1.24144|
005c0c  6088              STR      r0,[r1,#8]
005c0e  2064              MOVS     r0,#0x64
005c10  f7fffffe          BL       delay
;;;913    										RESET_ON;delay(100);		
005c14  2020              MOVS     r0,#0x20
005c16  498e              LDR      r1,|L1.24144|
005c18  6048              STR      r0,[r1,#4]
005c1a  2064              MOVS     r0,#0x64
005c1c  f7fffffe          BL       delay
                  |L1.23584|
;;;914    	}
;;;915    		
;;;916    	send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
005c20  2004              MOVS     r0,#4
005c22  4b8c              LDR      r3,|L1.24148|
005c24  4a7c              LDR      r2,|L1.24088|
005c26  3230              ADDS     r2,r2,#0x30
005c28  a17d              ADR      r1,|L1.24096|
005c2a  9000              STR      r0,[sp,#0]
005c2c  4618              MOV      r0,r3
005c2e  300c              ADDS     r0,r0,#0xc
005c30  f7fffffe          BL       send_GSM
;;;917    	GPS_COLLECT2();
005c34  f7fffffe          BL       GPS_COLLECT2
;;;918    	strcat(data,"CH\n");	
005c38  4977              LDR      r1,|L1.24088|
005c3a  4878              LDR      r0,|L1.24092|
005c3c  f7fffffe          BL       strcat
;;;919    	memset(at_,0,100);
005c40  2164              MOVS     r1,#0x64
005c42  487c              LDR      r0,|L1.24116|
005c44  f7fffffe          BL       __aeabi_memclr
;;;920    	sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
005c48  4a83              LDR      r2,|L1.24152|
005c4a  4982              LDR      r1,|L1.24148|
005c4c  3120              ADDS     r1,r1,#0x20
005c4e  4879              LDR      r0,|L1.24116|
005c50  f7fffffe          BL       __2sprintf
;;;921    	send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
005c54  4881              LDR      r0,|L1.24156|
005c56  6800              LDR      r0,[r0,#0]  ; tmeout
005c58  4b7e              LDR      r3,|L1.24148|
005c5a  4a6f              LDR      r2,|L1.24088|
005c5c  3230              ADDS     r2,r2,#0x30
005c5e  a170              ADR      r1,|L1.24096|
005c60  9000              STR      r0,[sp,#0]
005c62  4874              LDR      r0,|L1.24116|
005c64  f7fffffe          BL       send_GSM
;;;922    	msg_sim800(); 
005c68  f7fffffe          BL       msg_sim800
;;;923    	send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
005c6c  2004              MOVS     r0,#4
005c6e  4b6a              LDR      r3,|L1.24088|
005c70  3b2c              SUBS     r3,r3,#0x2c
005c72  461a              MOV      r2,r3
005c74  325c              ADDS     r2,r2,#0x5c
005c76  a16a              ADR      r1,|L1.24096|
005c78  9000              STR      r0,[sp,#0]
005c7a  4876              LDR      r0,|L1.24148|
005c7c  3038              ADDS     r0,r0,#0x38
005c7e  f7fffffe          BL       send_GSM
;;;924    	GPS_COLLECT2();
005c82  f7fffffe          BL       GPS_COLLECT2
;;;925    	strcat(data,"CH\n");	
005c86  4964              LDR      r1,|L1.24088|
005c88  4864              LDR      r0,|L1.24092|
005c8a  f7fffffe          BL       strcat
;;;926    	GPS_COLLECT2();
005c8e  f7fffffe          BL       GPS_COLLECT2
;;;927    	strcat(data,"CH\n");	
005c92  4961              LDR      r1,|L1.24088|
005c94  4861              LDR      r0,|L1.24092|
005c96  f7fffffe          BL       strcat
;;;928    
;;;929    
;;;930    	msg_sim800(); 
005c9a  f7fffffe          BL       msg_sim800
;;;931    	GPS_COLLECT2();
005c9e  f7fffffe          BL       GPS_COLLECT2
;;;932    	strcat(data,"CH\n");	
005ca2  495d              LDR      r1,|L1.24088|
005ca4  485d              LDR      r0,|L1.24092|
005ca6  f7fffffe          BL       strcat
;;;933    						clear();send_modem("\nAT+CIFSR\r\r\n");clear();
005caa  f7fffffe          BL       clear
005cae  4869              LDR      r0,|L1.24148|
005cb0  3048              ADDS     r0,r0,#0x48
005cb2  f7fffffe          BL       send_modem
005cb6  f7fffffe          BL       clear
;;;934    						delay(20);
005cba  2014              MOVS     r0,#0x14
005cbc  f7fffffe          BL       delay
;;;935    
;;;936    
;;;937    	msg_sim800(); 
005cc0  f7fffffe          BL       msg_sim800
;;;938    int_erval=temp;
005cc4  4866              LDR      r0,|L1.24160|
005cc6  6800              LDR      r0,[r0,#0]  ; temp
005cc8  4966              LDR      r1,|L1.24164|
005cca  6008              STR      r0,[r1,#0]  ; int_erval
;;;939    							sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005ccc  4b66              LDR      r3,|L1.24168|
005cce  4a67              LDR      r2,|L1.24172|
005cd0  4960              LDR      r1,|L1.24148|
005cd2  3160              ADDS     r1,r1,#0x60
005cd4  4857              LDR      r0,|L1.24116|
005cd6  f7fffffe          BL       __2sprintf
;;;940    							send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
005cda  4860              LDR      r0,|L1.24156|
005cdc  6800              LDR      r0,[r0,#0]  ; tmeout
005cde  4b5d              LDR      r3,|L1.24148|
005ce0  4a4d              LDR      r2,|L1.24088|
005ce2  3a48              SUBS     r2,r2,#0x48
005ce4  4619              MOV      r1,r3
005ce6  3180              ADDS     r1,r1,#0x80
005ce8  9000              STR      r0,[sp,#0]
005cea  4852              LDR      r0,|L1.24116|
005cec  f7fffffe          BL       send_GSM
;;;941    							clear();
005cf0  f7fffffe          BL       clear
;;;942    							
;;;943    							
;;;944    							send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
005cf4  4859              LDR      r0,|L1.24156|
005cf6  6800              LDR      r0,[r0,#0]  ; tmeout
005cf8  4b56              LDR      r3,|L1.24148|
005cfa  3388              ADDS     r3,r3,#0x88
005cfc  4a46              LDR      r2,|L1.24088|
005cfe  3a48              SUBS     r2,r2,#0x48
005d00  a14e              ADR      r1,|L1.24124|
005d02  9000              STR      r0,[sp,#0]
005d04  4618              MOV      r0,r3
005d06  3010              ADDS     r0,r0,#0x10
005d08  f7fffffe          BL       send_GSM
;;;945    	//*****************************************tcp_initialization ends**************************//									
;;;946    										clear();		
005d0c  f7fffffe          BL       clear
;;;947    										memset(stcond1,0,strlen(stcond1));
005d10  4857              LDR      r0,|L1.24176|
005d12  6800              LDR      r0,[r0,#0]  ; stcond1
005d14  f7fffffe          BL       strlen
005d18  4601              MOV      r1,r0
005d1a  9000              STR      r0,[sp,#0]
005d1c  4854              LDR      r0,|L1.24176|
005d1e  6800              LDR      r0,[r0,#0]  ; stcond1
005d20  f7fffffe          BL       __aeabi_memclr
;;;948    										memset(stcond2,0,strlen(stcond2));	
005d24  4853              LDR      r0,|L1.24180|
005d26  6800              LDR      r0,[r0,#0]  ; stcond2
005d28  f7fffffe          BL       strlen
005d2c  4601              MOV      r1,r0
005d2e  9000              STR      r0,[sp,#0]
005d30  4850              LDR      r0,|L1.24180|
005d32  6800              LDR      r0,[r0,#0]  ; stcond2
005d34  f7fffffe          BL       __aeabi_memclr
;;;949    										memset(stcond3,0,strlen(stcond3));	
005d38  484f              LDR      r0,|L1.24184|
005d3a  6800              LDR      r0,[r0,#0]  ; stcond3
005d3c  f7fffffe          BL       strlen
005d40  4601              MOV      r1,r0
005d42  9000              STR      r0,[sp,#0]
005d44  484c              LDR      r0,|L1.24184|
005d46  6800              LDR      r0,[r0,#0]  ; stcond3
005d48  f7fffffe          BL       __aeabi_memclr
;;;950    										memset(stcond4,0,strlen(stcond4));								
005d4c  484b              LDR      r0,|L1.24188|
005d4e  6800              LDR      r0,[r0,#0]  ; stcond4
005d50  f7fffffe          BL       strlen
005d54  4601              MOV      r1,r0
005d56  9000              STR      r0,[sp,#0]
005d58  4848              LDR      r0,|L1.24188|
005d5a  6800              LDR      r0,[r0,#0]  ; stcond4
005d5c  f7fffffe          BL       __aeabi_memclr
;;;951    										cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
005d60  213e              MOVS     r1,#0x3e
005d62  4830              LDR      r0,|L1.24100|
005d64  f7fffffe          BL       mystrstr
005d68  4945              LDR      r1,|L1.24192|
005d6a  7008              STRB     r0,[r1,#0]
;;;952    								
;;;953    									if(cond)	
005d6c  4608              MOV      r0,r1
005d6e  7800              LDRB     r0,[r0,#0]  ; cond
005d70  2800              CMP      r0,#0
005d72  d04f              BEQ      |L1.24084|
;;;954    									{	
;;;955    										clear();
005d74  f7fffffe          BL       clear
;;;956    										memset(uart_string_gsm,0,5000);
005d78  4942              LDR      r1,|L1.24196|
005d7a  482a              LDR      r0,|L1.24100|
005d7c  f7fffffe          BL       __aeabi_memclr
;;;957    										strcat(data,"\n");
005d80  a141              ADR      r1,|L1.24200|
005d82  4826              LDR      r0,|L1.24092|
005d84  f7fffffe          BL       strcat
;;;958    										len=strlen(data);
005d88  4824              LDR      r0,|L1.24092|
005d8a  f7fffffe          BL       strlen
005d8e  493f              LDR      r1,|L1.24204|
005d90  6008              STR      r0,[r1,#0]  ; len
;;;959    										tout=0;
005d92  2000              MOVS     r0,#0
005d94  492b              LDR      r1,|L1.24132|
005d96  6008              STR      r0,[r1,#0]  ; tout
;;;960    										k2=0;
005d98  4929              LDR      r1,|L1.24128|
005d9a  6008              STR      r0,[r1,#0]  ; k2
;;;961    										for(k=0;k<len;k++)
005d9c  492a              LDR      r1,|L1.24136|
005d9e  6008              STR      r0,[r1,#0]  ; k
005da0  e00d              B        |L1.23998|
                  |L1.23970|
;;;962    										{uart_putchar(UART1_BASE_PTR, data[k]);
005da2  481e              LDR      r0,|L1.24092|
005da4  4928              LDR      r1,|L1.24136|
005da6  6809              LDR      r1,[r1,#0]  ; k
005da8  5c40              LDRB     r0,[r0,r1]
005daa  4601              MOV      r1,r0
005dac  9000              STR      r0,[sp,#0]
005dae  4827              LDR      r0,|L1.24140|
005db0  f7fffffe          BL       uart_putchar
005db4  4824              LDR      r0,|L1.24136|
005db6  6800              LDR      r0,[r0,#0]            ;961  ; k
005db8  1c40              ADDS     r0,r0,#1              ;961
005dba  4923              LDR      r1,|L1.24136|
005dbc  6008              STR      r0,[r1,#0]            ;961  ; k
                  |L1.23998|
005dbe  4822              LDR      r0,|L1.24136|
005dc0  6800              LDR      r0,[r0,#0]            ;961  ; k
005dc2  4932              LDR      r1,|L1.24204|
005dc4  6809              LDR      r1,[r1,#0]            ;961  ; len
005dc6  4288              CMP      r0,r1                 ;961
005dc8  dbeb              BLT      |L1.23970|
;;;963    										}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005dca  210a              MOVS     r1,#0xa
005dcc  481f              LDR      r0,|L1.24140|
005dce  f7fffffe          BL       uart_putchar
005dd2  211a              MOVS     r1,#0x1a
005dd4  481d              LDR      r0,|L1.24140|
005dd6  f7fffffe          BL       uart_putchar
005dda  211a              MOVS     r1,#0x1a
005ddc  481b              LDR      r0,|L1.24140|
005dde  f7fffffe          BL       uart_putchar
005de2  211a              MOVS     r1,#0x1a
005de4  4819              LDR      r0,|L1.24140|
005de6  f7fffffe          BL       uart_putchar
;;;964    										do{stcond1=strstr(uart_string_gsm,"SEND OK");
005dea  bf00              NOP      
                  |L1.24044|
005dec  4928              LDR      r1,|L1.24208|
005dee  480d              LDR      r0,|L1.24100|
005df0  f7fffffe          BL       strstr
005df4  491e              LDR      r1,|L1.24176|
005df6  6008              STR      r0,[r1,#0]  ; stcond1
;;;965    												stcond2=strstr(uart_string_gsm, "ERROR");
005df8  4907              LDR      r1,|L1.24088|
005dfa  3948              SUBS     r1,r1,#0x48
005dfc  4809              LDR      r0,|L1.24100|
005dfe  f7fffffe          BL       strstr
005e02  491c              LDR      r1,|L1.24180|
005e04  6008              STR      r0,[r1,#0]  ; stcond2
;;;966    													stcond3=strstr(uart_string_gsm, "FAIL");	
005e06  4913              LDR      r1,|L1.24148|
005e08  3190              ADDS     r1,r1,#0x90
005e0a  4806              LDR      r0,|L1.24100|
005e0c  f7fffffe          BL       strstr
005e10  4919              LDR      r1,|L1.24184|
005e12  e03f              B        |L1.24212|
                  |L1.24084|
005e14  e1ce              B        |L1.25012|
005e16  0000              DCW      0x0000
                  |L1.24088|
                          DCD      ||.text||+0x8b8
                  |L1.24092|
                          DCD      data
                  |L1.24096|
005e20  4f4b00            DCB      "OK",0
005e23  00                DCB      0
                  |L1.24100|
                          DCD      uart_string_gsm
                  |L1.24104|
                          DCD      cond201
                  |L1.24108|
                          DCD      cond200
                  |L1.24112|
                          DCD      sleep_flag
                  |L1.24116|
                          DCD      at_
                  |L1.24120|
                          DCD      drive
                  |L1.24124|
005e3c  3e00              DCB      ">",0
005e3e  00                DCB      0
005e3f  00                DCB      0
                  |L1.24128|
                          DCD      ||k2||
                  |L1.24132|
                          DCD      tout
                  |L1.24136|
                          DCD      k
                  |L1.24140|
                          DCD      0x4006b000
                  |L1.24144|
                          DCD      0x400ff080
                  |L1.24148|
                          DCD      ||.text||+0xd54
                  |L1.24152|
                          DCD      apn
                  |L1.24156|
                          DCD      tmeout
                  |L1.24160|
                          DCD      temp
                  |L1.24164|
                          DCD      int_erval
                  |L1.24168|
                          DCD      port
                  |L1.24172|
                          DCD      ||ip||
                  |L1.24176|
                          DCD      stcond1
                  |L1.24180|
                          DCD      stcond2
                  |L1.24184|
                          DCD      stcond3
                  |L1.24188|
                          DCD      stcond4
                  |L1.24192|
                          DCD      cond
                  |L1.24196|
                          DCD      0x00001388
                  |L1.24200|
005e88  0a00              DCB      "\n",0
005e8a  00                DCB      0
005e8b  00                DCB      0
                  |L1.24204|
                          DCD      len
                  |L1.24208|
                          DCD      ||.text||+0x474
                  |L1.24212|
005e94  6008              STR      r0,[r1,#0]  ; stcond3
;;;967    														stcond4=strstr(uart_string_gsm, "DEACT");	
005e96  49fe              LDR      r1,|L1.25232|
005e98  48fe              LDR      r0,|L1.25236|
005e9a  f7fffffe          BL       strstr
005e9e  49fe              LDR      r1,|L1.25240|
005ea0  6008              STR      r0,[r1,#0]  ; stcond4
;;;968    											}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
005ea2  48fe              LDR      r0,|L1.25244|
005ea4  6800              LDR      r0,[r0,#0]  ; stcond2
005ea6  2800              CMP      r0,#0
005ea8  d10f              BNE      |L1.24266|
005eaa  48fd              LDR      r0,|L1.25248|
005eac  6800              LDR      r0,[r0,#0]  ; stcond3
005eae  2800              CMP      r0,#0
005eb0  d10b              BNE      |L1.24266|
005eb2  4608              MOV      r0,r1
005eb4  6800              LDR      r0,[r0,#0]  ; stcond4
005eb6  2800              CMP      r0,#0
005eb8  d107              BNE      |L1.24266|
005eba  48fa              LDR      r0,|L1.25252|
005ebc  6800              LDR      r0,[r0,#0]  ; stcond1
005ebe  2800              CMP      r0,#0
005ec0  d103              BNE      |L1.24266|
005ec2  48f9              LDR      r0,|L1.25256|
005ec4  6800              LDR      r0,[r0,#0]  ; tout
005ec6  2808              CMP      r0,#8
005ec8  dd90              BLE      |L1.24044|
                  |L1.24266|
;;;969    										uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005eca  211a              MOVS     r1,#0x1a
005ecc  48f7              LDR      r0,|L1.25260|
005ece  f7fffffe          BL       uart_putchar
005ed2  211a              MOVS     r1,#0x1a
005ed4  48f5              LDR      r0,|L1.25260|
005ed6  f7fffffe          BL       uart_putchar
005eda  211a              MOVS     r1,#0x1a
005edc  48f3              LDR      r0,|L1.25260|
005ede  f7fffffe          BL       uart_putchar
005ee2  211a              MOVS     r1,#0x1a
005ee4  48f1              LDR      r0,|L1.25260|
005ee6  f7fffffe          BL       uart_putchar
;;;970    										con1d=	(strstr(uart_string_gsm,"SEND OK"));
005eea  49f1              LDR      r1,|L1.25264|
005eec  48e9              LDR      r0,|L1.25236|
005eee  f7fffffe          BL       strstr
005ef2  49f0              LDR      r1,|L1.25268|
005ef4  6008              STR      r0,[r1,#0]  ; con1d
;;;971    																	if(!(con1d) == 1 ) 
005ef6  4608              MOV      r0,r1
005ef8  6800              LDR      r0,[r0,#0]  ; con1d
005efa  2800              CMP      r0,#0
005efc  d101              BNE      |L1.24322|
005efe  2001              MOVS     r0,#1
005f00  e000              B        |L1.24324|
                  |L1.24322|
005f02  2000              MOVS     r0,#0
                  |L1.24324|
005f04  2801              CMP      r0,#1
005f06  d17c              BNE      |L1.24578|
;;;972    																	{
;;;973    																			delay(100);
005f08  2064              MOVS     r0,#0x64
005f0a  f7fffffe          BL       delay
;;;974    																			clear();//memset(uart_string_gsm,0,5000);
005f0e  f7fffffe          BL       clear
;;;975    																			memset(at_,0,100);
005f12  2164              MOVS     r1,#0x64
005f14  48e8              LDR      r0,|L1.25272|
005f16  f7fffffe          BL       __aeabi_memclr
;;;976    																			sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005f1a  48e8              LDR      r0,|L1.25276|
005f1c  f7fffffe          BL       strlen
005f20  1c40              ADDS     r0,r0,#1
005f22  4603              MOV      r3,r0
005f24  4ae6              LDR      r2,|L1.25280|
005f26  49da              LDR      r1,|L1.25232|
005f28  3138              ADDS     r1,r1,#0x38
005f2a  9000              STR      r0,[sp,#0]
005f2c  48e2              LDR      r0,|L1.25272|
005f2e  f7fffffe          BL       __2sprintf
;;;977    																			send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005f32  2005              MOVS     r0,#5
005f34  4bd6              LDR      r3,|L1.25232|
005f36  3b1c              SUBS     r3,r3,#0x1c
005f38  461a              MOV      r2,r3
005f3a  3278              ADDS     r2,r2,#0x78
005f3c  a1e1              ADR      r1,|L1.25284|
005f3e  9000              STR      r0,[sp,#0]
005f40  48dd              LDR      r0,|L1.25272|
005f42  f7fffffe          BL       send_SD
;;;978    if(strstr(uart_string_gsm,"ERROR")){
005f46  49d2              LDR      r1,|L1.25232|
005f48  391c              SUBS     r1,r1,#0x1c
005f4a  48d2              LDR      r0,|L1.25236|
005f4c  f7fffffe          BL       strstr
005f50  2800              CMP      r0,#0
005f52  d004              BEQ      |L1.24414|
;;;979    	drive[0]='C';drive[1]=':';
005f54  2043              MOVS     r0,#0x43
005f56  49da              LDR      r1,|L1.25280|
005f58  7008              STRB     r0,[r1,#0]
005f5a  203a              MOVS     r0,#0x3a
005f5c  7048              STRB     r0,[r1,#1]
                  |L1.24414|
;;;980    }	
;;;981    																			clear();	
005f5e  f7fffffe          BL       clear
;;;982    																			k2=0;									//string array counter for uart 1
005f62  2000              MOVS     r0,#0
005f64  49d8              LDR      r1,|L1.25288|
005f66  6008              STR      r0,[r1,#0]  ; k2
;;;983    																			tout=0;	
005f68  49cf              LDR      r1,|L1.25256|
005f6a  6008              STR      r0,[r1,#0]  ; tout
;;;984    																			for(k=0;k<strlen(data);k++)
005f6c  49d7              LDR      r1,|L1.25292|
005f6e  6008              STR      r0,[r1,#0]  ; k
005f70  e00d              B        |L1.24462|
                  |L1.24434|
;;;985    																			{
;;;986    																				uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005f72  48d2              LDR      r0,|L1.25276|
005f74  49d5              LDR      r1,|L1.25292|
005f76  6809              LDR      r1,[r1,#0]  ; k
005f78  5c40              LDRB     r0,[r0,r1]
005f7a  4601              MOV      r1,r0
005f7c  9000              STR      r0,[sp,#0]
005f7e  48cb              LDR      r0,|L1.25260|
005f80  f7fffffe          BL       uart_putchar
005f84  48d1              LDR      r0,|L1.25292|
005f86  6800              LDR      r0,[r0,#0]            ;984  ; k
005f88  1c40              ADDS     r0,r0,#1              ;984
005f8a  49d0              LDR      r1,|L1.25292|
005f8c  6008              STR      r0,[r1,#0]            ;984  ; k
                  |L1.24462|
005f8e  48cb              LDR      r0,|L1.25276|
005f90  f7fffffe          BL       strlen
005f94  49cd              LDR      r1,|L1.25292|
005f96  6809              LDR      r1,[r1,#0]            ;984  ; k
005f98  4288              CMP      r0,r1                 ;984
005f9a  d8ea              BHI      |L1.24434|
;;;987    																			}	
;;;988    																			uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005f9c  210a              MOVS     r1,#0xa
005f9e  48c3              LDR      r0,|L1.25260|
005fa0  f7fffffe          BL       uart_putchar
005fa4  210a              MOVS     r1,#0xa
005fa6  48c1              LDR      r0,|L1.25260|
005fa8  f7fffffe          BL       uart_putchar
005fac  210a              MOVS     r1,#0xa
005fae  48bf              LDR      r0,|L1.25260|
005fb0  f7fffffe          BL       uart_putchar
005fb4  210a              MOVS     r1,#0xa
005fb6  48bd              LDR      r0,|L1.25260|
005fb8  f7fffffe          BL       uart_putchar
005fbc  210a              MOVS     r1,#0xa
005fbe  48bb              LDR      r0,|L1.25260|
005fc0  f7fffffe          BL       uart_putchar
005fc4  210a              MOVS     r1,#0xa
005fc6  48b9              LDR      r0,|L1.25260|
005fc8  f7fffffe          BL       uart_putchar
005fcc  210a              MOVS     r1,#0xa
005fce  48b7              LDR      r0,|L1.25260|
005fd0  f7fffffe          BL       uart_putchar
005fd4  210a              MOVS     r1,#0xa
005fd6  48b5              LDR      r0,|L1.25260|
005fd8  f7fffffe          BL       uart_putchar
005fdc  210a              MOVS     r1,#0xa
005fde  48b3              LDR      r0,|L1.25260|
005fe0  f7fffffe          BL       uart_putchar
005fe4  210a              MOVS     r1,#0xa
005fe6  48b1              LDR      r0,|L1.25260|
005fe8  f7fffffe          BL       uart_putchar
005fec  210a              MOVS     r1,#0xa
005fee  48af              LDR      r0,|L1.25260|
005ff0  f7fffffe          BL       uart_putchar
005ff4  210a              MOVS     r1,#0xa
005ff6  48ad              LDR      r0,|L1.25260|
005ff8  f7fffffe          BL       uart_putchar
005ffc  210a              MOVS     r1,#0xa
005ffe  48ab              LDR      r0,|L1.25260|
006000  e001              B        |L1.24582|
                  |L1.24578|
006002  e0d4              B        |L1.25006|
                  |L1.24580|
006004  e244              B        |L1.25744|
                  |L1.24582|
006006  f7fffffe          BL       uart_putchar
00600a  210a              MOVS     r1,#0xa
00600c  48a7              LDR      r0,|L1.25260|
00600e  f7fffffe          BL       uart_putchar
006012  210a              MOVS     r1,#0xa
006014  48a5              LDR      r0,|L1.25260|
006016  f7fffffe          BL       uart_putchar
00601a  210a              MOVS     r1,#0xa
00601c  48a3              LDR      r0,|L1.25260|
00601e  f7fffffe          BL       uart_putchar
006022  210a              MOVS     r1,#0xa
006024  48a1              LDR      r0,|L1.25260|
006026  f7fffffe          BL       uart_putchar
00602a  210a              MOVS     r1,#0xa
00602c  489f              LDR      r0,|L1.25260|
00602e  f7fffffe          BL       uart_putchar
006032  210a              MOVS     r1,#0xa
006034  489d              LDR      r0,|L1.25260|
006036  f7fffffe          BL       uart_putchar
00603a  210a              MOVS     r1,#0xa
00603c  489b              LDR      r0,|L1.25260|
00603e  f7fffffe          BL       uart_putchar
006042  210a              MOVS     r1,#0xa
006044  4899              LDR      r0,|L1.25260|
006046  f7fffffe          BL       uart_putchar
00604a  210a              MOVS     r1,#0xa
00604c  4897              LDR      r0,|L1.25260|
00604e  f7fffffe          BL       uart_putchar
006052  210a              MOVS     r1,#0xa
006054  4895              LDR      r0,|L1.25260|
006056  f7fffffe          BL       uart_putchar
00605a  210a              MOVS     r1,#0xa
00605c  4893              LDR      r0,|L1.25260|
00605e  f7fffffe          BL       uart_putchar
006062  210a              MOVS     r1,#0xa
006064  4891              LDR      r0,|L1.25260|
006066  f7fffffe          BL       uart_putchar
00606a  210a              MOVS     r1,#0xa
00606c  488f              LDR      r0,|L1.25260|
00606e  f7fffffe          BL       uart_putchar
006072  210a              MOVS     r1,#0xa
006074  488d              LDR      r0,|L1.25260|
006076  f7fffffe          BL       uart_putchar
00607a  210a              MOVS     r1,#0xa
00607c  488b              LDR      r0,|L1.25260|
00607e  f7fffffe          BL       uart_putchar
006082  210a              MOVS     r1,#0xa
006084  4889              LDR      r0,|L1.25260|
006086  f7fffffe          BL       uart_putchar
00608a  210a              MOVS     r1,#0xa
00608c  4887              LDR      r0,|L1.25260|
00608e  f7fffffe          BL       uart_putchar
006092  210a              MOVS     r1,#0xa
006094  4885              LDR      r0,|L1.25260|
006096  f7fffffe          BL       uart_putchar
00609a  210a              MOVS     r1,#0xa
00609c  4883              LDR      r0,|L1.25260|
00609e  f7fffffe          BL       uart_putchar
0060a2  210a              MOVS     r1,#0xa
0060a4  4881              LDR      r0,|L1.25260|
0060a6  f7fffffe          BL       uart_putchar
0060aa  210a              MOVS     r1,#0xa
0060ac  487f              LDR      r0,|L1.25260|
0060ae  f7fffffe          BL       uart_putchar
0060b2  e000              B        |L1.24758|
                  |L1.24756|
0060b4  e1ed              B        |L1.25746|
                  |L1.24758|
0060b6  210a              MOVS     r1,#0xa
0060b8  487c              LDR      r0,|L1.25260|
0060ba  f7fffffe          BL       uart_putchar
0060be  210a              MOVS     r1,#0xa
0060c0  487a              LDR      r0,|L1.25260|
0060c2  f7fffffe          BL       uart_putchar
0060c6  210a              MOVS     r1,#0xa
0060c8  4878              LDR      r0,|L1.25260|
0060ca  f7fffffe          BL       uart_putchar
0060ce  210a              MOVS     r1,#0xa
0060d0  4876              LDR      r0,|L1.25260|
0060d2  f7fffffe          BL       uart_putchar
0060d6  210a              MOVS     r1,#0xa
0060d8  4874              LDR      r0,|L1.25260|
0060da  f7fffffe          BL       uart_putchar
0060de  210a              MOVS     r1,#0xa
0060e0  4872              LDR      r0,|L1.25260|
0060e2  f7fffffe          BL       uart_putchar
0060e6  210a              MOVS     r1,#0xa
0060e8  4870              LDR      r0,|L1.25260|
0060ea  f7fffffe          BL       uart_putchar
0060ee  210a              MOVS     r1,#0xa
0060f0  486e              LDR      r0,|L1.25260|
0060f2  f7fffffe          BL       uart_putchar
0060f6  210a              MOVS     r1,#0xa
0060f8  486c              LDR      r0,|L1.25260|
0060fa  f7fffffe          BL       uart_putchar
0060fe  210a              MOVS     r1,#0xa
006100  486a              LDR      r0,|L1.25260|
006102  f7fffffe          BL       uart_putchar
006106  210a              MOVS     r1,#0xa
006108  4868              LDR      r0,|L1.25260|
00610a  f7fffffe          BL       uart_putchar
00610e  210a              MOVS     r1,#0xa
006110  4866              LDR      r0,|L1.25260|
006112  f7fffffe          BL       uart_putchar
006116  210a              MOVS     r1,#0xa
006118  4864              LDR      r0,|L1.25260|
00611a  f7fffffe          BL       uart_putchar
00611e  210a              MOVS     r1,#0xa
006120  4862              LDR      r0,|L1.25260|
006122  f7fffffe          BL       uart_putchar
006126  210a              MOVS     r1,#0xa
006128  4860              LDR      r0,|L1.25260|
00612a  f7fffffe          BL       uart_putchar
00612e  210a              MOVS     r1,#0xa
006130  485e              LDR      r0,|L1.25260|
006132  f7fffffe          BL       uart_putchar
006136  210a              MOVS     r1,#0xa
006138  485c              LDR      r0,|L1.25260|
00613a  f7fffffe          BL       uart_putchar
00613e  210a              MOVS     r1,#0xa
006140  485a              LDR      r0,|L1.25260|
006142  f7fffffe          BL       uart_putchar
006146  210a              MOVS     r1,#0xa
006148  4858              LDR      r0,|L1.25260|
00614a  f7fffffe          BL       uart_putchar
00614e  210a              MOVS     r1,#0xa
006150  4856              LDR      r0,|L1.25260|
006152  f7fffffe          BL       uart_putchar
006156  210a              MOVS     r1,#0xa
006158  4854              LDR      r0,|L1.25260|
00615a  f7fffffe          BL       uart_putchar
00615e  210a              MOVS     r1,#0xa
006160  4852              LDR      r0,|L1.25260|
006162  f7fffffe          BL       uart_putchar
006166  210a              MOVS     r1,#0xa
006168  4850              LDR      r0,|L1.25260|
00616a  f7fffffe          BL       uart_putchar
;;;989    																			while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) ))){}
00616e  bf00              NOP      
                  |L1.24944|
006170  4947              LDR      r1,|L1.25232|
006172  3170              ADDS     r1,r1,#0x70
006174  4847              LDR      r0,|L1.25236|
006176  f7fffffe          BL       strstr
00617a  2800              CMP      r0,#0
00617c  d10a              BNE      |L1.24980|
00617e  4944              LDR      r1,|L1.25232|
006180  391c              SUBS     r1,r1,#0x1c
006182  4844              LDR      r0,|L1.25236|
006184  f7fffffe          BL       strstr
006188  2800              CMP      r0,#0
00618a  d103              BNE      |L1.24980|
00618c  4846              LDR      r0,|L1.25256|
00618e  6800              LDR      r0,[r0,#0]  ; tout
006190  2805              CMP      r0,#5
006192  dded              BLE      |L1.24944|
                  |L1.24980|
;;;990    																			clear();//uart_putchar(UART1_BASE_PTR,0x1a);
006194  f7fffffe          BL       clear
;;;991    																			memset(data,0,strlen(data));
006198  4848              LDR      r0,|L1.25276|
00619a  f7fffffe          BL       strlen
00619e  4601              MOV      r1,r0
0061a0  9000              STR      r0,[sp,#0]
0061a2  4846              LDR      r0,|L1.25276|
0061a4  f7fffffe          BL       __aeabi_memclr
;;;992    																			clear();
0061a8  f7fffffe          BL       clear
0061ac  e173              B        |L1.25750|
                  |L1.25006|
;;;993    																		
;;;994    																//	log_it();								
;;;995    																	}else{send_chunk();}													
0061ae  f7fffffe          BL       send_chunk
0061b2  e170              B        |L1.25750|
                  |L1.25012|
;;;996    									//checks for the sd_data available
;;;997    									}
;;;998    									//con1d=strstr(uart_string_gsm,"OK");
;;;999    									else
;;;1000   									{
;;;1001   											delay(100);
0061b4  2064              MOVS     r0,#0x64
0061b6  f7fffffe          BL       delay
;;;1002   											clear();//memset(uart_string_gsm,0,5000);
0061ba  f7fffffe          BL       clear
;;;1003   											memset(at_,0,100);
0061be  2164              MOVS     r1,#0x64
0061c0  483d              LDR      r0,|L1.25272|
0061c2  f7fffffe          BL       __aeabi_memclr
;;;1004   											sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0061c6  483d              LDR      r0,|L1.25276|
0061c8  f7fffffe          BL       strlen
0061cc  1c40              ADDS     r0,r0,#1
0061ce  4603              MOV      r3,r0
0061d0  4a3b              LDR      r2,|L1.25280|
0061d2  492f              LDR      r1,|L1.25232|
0061d4  3138              ADDS     r1,r1,#0x38
0061d6  9000              STR      r0,[sp,#0]
0061d8  4837              LDR      r0,|L1.25272|
0061da  f7fffffe          BL       __2sprintf
;;;1005   											send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0061de  2005              MOVS     r0,#5
0061e0  4b2b              LDR      r3,|L1.25232|
0061e2  3b1c              SUBS     r3,r3,#0x1c
0061e4  461a              MOV      r2,r3
0061e6  3278              ADDS     r2,r2,#0x78
0061e8  a136              ADR      r1,|L1.25284|
0061ea  9000              STR      r0,[sp,#0]
0061ec  4832              LDR      r0,|L1.25272|
0061ee  f7fffffe          BL       send_SD
;;;1006   if(strstr(uart_string_gsm,"ERROR")){
0061f2  4927              LDR      r1,|L1.25232|
0061f4  391c              SUBS     r1,r1,#0x1c
0061f6  4827              LDR      r0,|L1.25236|
0061f8  f7fffffe          BL       strstr
0061fc  2800              CMP      r0,#0
0061fe  d004              BEQ      |L1.25098|
;;;1007   drive[0]='C';drive[1]=':';
006200  2043              MOVS     r0,#0x43
006202  492f              LDR      r1,|L1.25280|
006204  7008              STRB     r0,[r1,#0]
006206  203a              MOVS     r0,#0x3a
006208  7048              STRB     r0,[r1,#1]
                  |L1.25098|
;;;1008   }	
;;;1009   											clear();	
00620a  f7fffffe          BL       clear
;;;1010   											k2=0;									//string array counter for uart 1
00620e  2000              MOVS     r0,#0
006210  492d              LDR      r1,|L1.25288|
006212  6008              STR      r0,[r1,#0]  ; k2
;;;1011   											tout=0;	
006214  4924              LDR      r1,|L1.25256|
006216  6008              STR      r0,[r1,#0]  ; tout
;;;1012   											for(k=0;k<strlen(data);k++)
006218  492c              LDR      r1,|L1.25292|
00621a  6008              STR      r0,[r1,#0]  ; k
00621c  e00d              B        |L1.25146|
                  |L1.25118|
;;;1013   											{
;;;1014   											uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00621e  4827              LDR      r0,|L1.25276|
006220  492a              LDR      r1,|L1.25292|
006222  6809              LDR      r1,[r1,#0]  ; k
006224  5c40              LDRB     r0,[r0,r1]
006226  4601              MOV      r1,r0
006228  9000              STR      r0,[sp,#0]
00622a  4820              LDR      r0,|L1.25260|
00622c  f7fffffe          BL       uart_putchar
006230  4826              LDR      r0,|L1.25292|
006232  6800              LDR      r0,[r0,#0]            ;1012  ; k
006234  1c40              ADDS     r0,r0,#1              ;1012
006236  4925              LDR      r1,|L1.25292|
006238  6008              STR      r0,[r1,#0]            ;1012  ; k
                  |L1.25146|
00623a  4820              LDR      r0,|L1.25276|
00623c  f7fffffe          BL       strlen
006240  4922              LDR      r1,|L1.25292|
006242  6809              LDR      r1,[r1,#0]            ;1012  ; k
006244  4288              CMP      r0,r1                 ;1012
006246  d8ea              BHI      |L1.25118|
;;;1015   											}	
;;;1016   											uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
006248  210a              MOVS     r1,#0xa
00624a  4818              LDR      r0,|L1.25260|
00624c  f7fffffe          BL       uart_putchar
006250  210a              MOVS     r1,#0xa
006252  4816              LDR      r0,|L1.25260|
006254  f7fffffe          BL       uart_putchar
006258  210a              MOVS     r1,#0xa
00625a  4814              LDR      r0,|L1.25260|
00625c  f7fffffe          BL       uart_putchar
006260  210a              MOVS     r1,#0xa
006262  4812              LDR      r0,|L1.25260|
006264  f7fffffe          BL       uart_putchar
006268  210a              MOVS     r1,#0xa
00626a  4810              LDR      r0,|L1.25260|
00626c  f7fffffe          BL       uart_putchar
006270  210a              MOVS     r1,#0xa
006272  480e              LDR      r0,|L1.25260|
006274  f7fffffe          BL       uart_putchar
006278  210a              MOVS     r1,#0xa
00627a  480c              LDR      r0,|L1.25260|
00627c  f7fffffe          BL       uart_putchar
006280  210a              MOVS     r1,#0xa
006282  480a              LDR      r0,|L1.25260|
006284  f7fffffe          BL       uart_putchar
006288  210a              MOVS     r1,#0xa
00628a  4808              LDR      r0,|L1.25260|
00628c  e020              B        |L1.25296|
00628e  0000              DCW      0x0000
                  |L1.25232|
                          DCD      ||.text||+0x88c
                  |L1.25236|
                          DCD      uart_string_gsm
                  |L1.25240|
                          DCD      stcond4
                  |L1.25244|
                          DCD      stcond2
                  |L1.25248|
                          DCD      stcond3
                  |L1.25252|
                          DCD      stcond1
                  |L1.25256|
                          DCD      tout
                  |L1.25260|
                          DCD      0x4006b000
                  |L1.25264|
                          DCD      ||.text||+0x474
                  |L1.25268|
                          DCD      con1d
                  |L1.25272|
                          DCD      at_
                  |L1.25276|
                          DCD      data
                  |L1.25280|
                          DCD      drive
                  |L1.25284|
0062c4  3e00              DCB      ">",0
0062c6  00                DCB      0
0062c7  00                DCB      0
                  |L1.25288|
                          DCD      ||k2||
                  |L1.25292|
                          DCD      k
                  |L1.25296|
0062d0  f7fffffe          BL       uart_putchar
0062d4  210a              MOVS     r1,#0xa
0062d6  48c7              LDR      r0,|L1.26100|
0062d8  f7fffffe          BL       uart_putchar
0062dc  210a              MOVS     r1,#0xa
0062de  48c5              LDR      r0,|L1.26100|
0062e0  f7fffffe          BL       uart_putchar
0062e4  210a              MOVS     r1,#0xa
0062e6  48c3              LDR      r0,|L1.26100|
0062e8  f7fffffe          BL       uart_putchar
0062ec  210a              MOVS     r1,#0xa
0062ee  48c1              LDR      r0,|L1.26100|
0062f0  f7fffffe          BL       uart_putchar
0062f4  210a              MOVS     r1,#0xa
0062f6  48bf              LDR      r0,|L1.26100|
0062f8  f7fffffe          BL       uart_putchar
0062fc  210a              MOVS     r1,#0xa
0062fe  48bd              LDR      r0,|L1.26100|
006300  f7fffffe          BL       uart_putchar
006304  210a              MOVS     r1,#0xa
006306  48bb              LDR      r0,|L1.26100|
006308  f7fffffe          BL       uart_putchar
00630c  210a              MOVS     r1,#0xa
00630e  48b9              LDR      r0,|L1.26100|
006310  f7fffffe          BL       uart_putchar
006314  210a              MOVS     r1,#0xa
006316  48b7              LDR      r0,|L1.26100|
006318  f7fffffe          BL       uart_putchar
00631c  210a              MOVS     r1,#0xa
00631e  48b5              LDR      r0,|L1.26100|
006320  f7fffffe          BL       uart_putchar
006324  210a              MOVS     r1,#0xa
006326  48b3              LDR      r0,|L1.26100|
006328  f7fffffe          BL       uart_putchar
00632c  210a              MOVS     r1,#0xa
00632e  48b1              LDR      r0,|L1.26100|
006330  f7fffffe          BL       uart_putchar
006334  210a              MOVS     r1,#0xa
006336  48af              LDR      r0,|L1.26100|
006338  f7fffffe          BL       uart_putchar
00633c  210a              MOVS     r1,#0xa
00633e  48ad              LDR      r0,|L1.26100|
006340  f7fffffe          BL       uart_putchar
006344  210a              MOVS     r1,#0xa
006346  48ab              LDR      r0,|L1.26100|
006348  f7fffffe          BL       uart_putchar
00634c  210a              MOVS     r1,#0xa
00634e  48a9              LDR      r0,|L1.26100|
006350  f7fffffe          BL       uart_putchar
006354  210a              MOVS     r1,#0xa
006356  48a7              LDR      r0,|L1.26100|
006358  f7fffffe          BL       uart_putchar
00635c  210a              MOVS     r1,#0xa
00635e  48a5              LDR      r0,|L1.26100|
006360  f7fffffe          BL       uart_putchar
006364  210a              MOVS     r1,#0xa
006366  48a3              LDR      r0,|L1.26100|
006368  f7fffffe          BL       uart_putchar
00636c  210a              MOVS     r1,#0xa
00636e  48a1              LDR      r0,|L1.26100|
006370  f7fffffe          BL       uart_putchar
006374  210a              MOVS     r1,#0xa
006376  489f              LDR      r0,|L1.26100|
006378  f7fffffe          BL       uart_putchar
00637c  210a              MOVS     r1,#0xa
00637e  489d              LDR      r0,|L1.26100|
006380  f7fffffe          BL       uart_putchar
006384  210a              MOVS     r1,#0xa
006386  489b              LDR      r0,|L1.26100|
006388  f7fffffe          BL       uart_putchar
00638c  210a              MOVS     r1,#0xa
00638e  4899              LDR      r0,|L1.26100|
006390  f7fffffe          BL       uart_putchar
006394  210a              MOVS     r1,#0xa
006396  4897              LDR      r0,|L1.26100|
006398  f7fffffe          BL       uart_putchar
00639c  210a              MOVS     r1,#0xa
00639e  4895              LDR      r0,|L1.26100|
0063a0  f7fffffe          BL       uart_putchar
0063a4  210a              MOVS     r1,#0xa
0063a6  4893              LDR      r0,|L1.26100|
0063a8  f7fffffe          BL       uart_putchar
0063ac  210a              MOVS     r1,#0xa
0063ae  4891              LDR      r0,|L1.26100|
0063b0  f7fffffe          BL       uart_putchar
0063b4  210a              MOVS     r1,#0xa
0063b6  488f              LDR      r0,|L1.26100|
0063b8  f7fffffe          BL       uart_putchar
0063bc  210a              MOVS     r1,#0xa
0063be  488d              LDR      r0,|L1.26100|
0063c0  f7fffffe          BL       uart_putchar
0063c4  210a              MOVS     r1,#0xa
0063c6  488b              LDR      r0,|L1.26100|
0063c8  f7fffffe          BL       uart_putchar
0063cc  210a              MOVS     r1,#0xa
0063ce  4889              LDR      r0,|L1.26100|
0063d0  f7fffffe          BL       uart_putchar
0063d4  210a              MOVS     r1,#0xa
0063d6  4887              LDR      r0,|L1.26100|
0063d8  f7fffffe          BL       uart_putchar
0063dc  210a              MOVS     r1,#0xa
0063de  4885              LDR      r0,|L1.26100|
0063e0  f7fffffe          BL       uart_putchar
0063e4  210a              MOVS     r1,#0xa
0063e6  4883              LDR      r0,|L1.26100|
0063e8  f7fffffe          BL       uart_putchar
0063ec  210a              MOVS     r1,#0xa
0063ee  4881              LDR      r0,|L1.26100|
0063f0  f7fffffe          BL       uart_putchar
0063f4  210a              MOVS     r1,#0xa
0063f6  487f              LDR      r0,|L1.26100|
0063f8  f7fffffe          BL       uart_putchar
0063fc  210a              MOVS     r1,#0xa
0063fe  487d              LDR      r0,|L1.26100|
006400  f7fffffe          BL       uart_putchar
006404  210a              MOVS     r1,#0xa
006406  487b              LDR      r0,|L1.26100|
006408  f7fffffe          BL       uart_putchar
00640c  210a              MOVS     r1,#0xa
00640e  4879              LDR      r0,|L1.26100|
006410  f7fffffe          BL       uart_putchar
006414  210a              MOVS     r1,#0xa
006416  4877              LDR      r0,|L1.26100|
006418  f7fffffe          BL       uart_putchar
00641c  210a              MOVS     r1,#0xa
00641e  4875              LDR      r0,|L1.26100|
006420  f7fffffe          BL       uart_putchar
006424  210a              MOVS     r1,#0xa
006426  4873              LDR      r0,|L1.26100|
006428  f7fffffe          BL       uart_putchar
00642c  210a              MOVS     r1,#0xa
00642e  4871              LDR      r0,|L1.26100|
006430  f7fffffe          BL       uart_putchar
006434  210a              MOVS     r1,#0xa
006436  486f              LDR      r0,|L1.26100|
006438  f7fffffe          BL       uart_putchar
00643c  210a              MOVS     r1,#0xa
00643e  486d              LDR      r0,|L1.26100|
006440  f7fffffe          BL       uart_putchar
006444  210a              MOVS     r1,#0xa
006446  486b              LDR      r0,|L1.26100|
006448  f7fffffe          BL       uart_putchar
00644c  210a              MOVS     r1,#0xa
00644e  4869              LDR      r0,|L1.26100|
006450  f7fffffe          BL       uart_putchar
;;;1017   											//memset(data,0,1000);
;;;1018   											//timer counts to wait for characters in uart 1 									
;;;1019   											while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
006454  bf00              NOP      
                  |L1.25686|
006456  4968              LDR      r1,|L1.26104|
006458  4868              LDR      r0,|L1.26108|
00645a  f7fffffe          BL       strstr
00645e  2800              CMP      r0,#0
006460  d10a              BNE      |L1.25720|
006462  4965              LDR      r1,|L1.26104|
006464  398c              SUBS     r1,r1,#0x8c
006466  4865              LDR      r0,|L1.26108|
006468  f7fffffe          BL       strstr
00646c  2800              CMP      r0,#0
00646e  d103              BNE      |L1.25720|
006470  4863              LDR      r0,|L1.26112|
006472  6800              LDR      r0,[r0,#0]  ; tout
006474  2805              CMP      r0,#5
006476  ddee              BLE      |L1.25686|
                  |L1.25720|
;;;1020   											{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1021   											}
;;;1022   											clear();//uart_putchar(UART1_BASE_PTR,0x1a);
006478  f7fffffe          BL       clear
;;;1023   											memset(data,0,strlen(data));
00647c  4861              LDR      r0,|L1.26116|
00647e  f7fffffe          BL       strlen
006482  4601              MOV      r1,r0
006484  9000              STR      r0,[sp,#0]
006486  485f              LDR      r0,|L1.26116|
006488  f7fffffe          BL       __aeabi_memclr
;;;1024   											clear();
00648c  f7fffffe          BL       clear
                  |L1.25744|
006490  e001              B        |L1.25750|
                  |L1.25746|
;;;1025   										//log_it();			//otherwize log it					
;;;1026   									}
;;;1027   } // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1028   else
;;;1029   {
;;;1030   	send_chunk();
006492  f7fffffe          BL       send_chunk
                  |L1.25750|
006496  f7fefdc8          BL       |L1.20522|
;;;1031   }		
;;;1032   /******************sleep checker end**********************/		
;;;1033   		}
;;;1034   /******************while end**********************/		
;;;1035   	} 
;;;1036   /******************main end***********************/
;;;1037   }
;;;1038   /********************************************************************/
                          ENDP

                  HardFault_Handler PROC
;;;1045   
;;;1046   void HardFault_Handler()
00649a  b510              PUSH     {r4,lr}
;;;1047   {	long ppp=0;
00649c  2400              MOVS     r4,#0
;;;1048   send_modem("Hardfault_Handler");	
00649e  a05a              ADR      r0,|L1.26120|
0064a0  f7fffffe          BL       send_modem
;;;1049   
;;;1050   
;;;1051   	RESET_OFF;
0064a4  2020              MOVS     r0,#0x20
0064a6  495d              LDR      r1,|L1.26140|
0064a8  6088              STR      r0,[r1,#8]
;;;1052   	RESET_OFF;
0064aa  6088              STR      r0,[r1,#8]
;;;1053   for(ppp=0;ppp<999999; ppp++);	
0064ac  bf00              NOP      
0064ae  e000              B        |L1.25778|
                  |L1.25776|
0064b0  1c64              ADDS     r4,r4,#1
                  |L1.25778|
0064b2  485b              LDR      r0,|L1.26144|
0064b4  4284              CMP      r4,r0
0064b6  dbfb              BLT      |L1.25776|
;;;1054   	
;;;1055   	RESET_ON;
0064b8  2020              MOVS     r0,#0x20
0064ba  4958              LDR      r1,|L1.26140|
0064bc  6048              STR      r0,[r1,#4]
;;;1056   	RESET_ON;
0064be  6048              STR      r0,[r1,#4]
;;;1057   for(ppp=0;ppp<999999; ppp++);
0064c0  2400              MOVS     r4,#0
0064c2  e000              B        |L1.25798|
                  |L1.25796|
0064c4  1c64              ADDS     r4,r4,#1
                  |L1.25798|
0064c6  4856              LDR      r0,|L1.26144|
0064c8  4284              CMP      r4,r0
0064ca  dbfb              BLT      |L1.25796|
;;;1058   }
0064cc  bd10              POP      {r4,pc}
;;;1059   
                          ENDP

                  LPTimer_IRQHandler PROC
;;;1061   
;;;1062    void LPTimer_IRQHandler(void)
0064ce  4855              LDR      r0,|L1.26148|
;;;1063   {
;;;1064   lpticks+=1;
0064d0  6800              LDR      r0,[r0,#0]  ; lpticks
0064d2  1c40              ADDS     r0,r0,#1
0064d4  4953              LDR      r1,|L1.26148|
0064d6  6008              STR      r0,[r1,#0]  ; lpticks
;;;1065   //rtcticks++;
;;;1066   	tout++;tout2++;
0064d8  4849              LDR      r0,|L1.26112|
0064da  6800              LDR      r0,[r0,#0]  ; tout
0064dc  1c40              ADDS     r0,r0,#1
0064de  4948              LDR      r1,|L1.26112|
0064e0  6008              STR      r0,[r1,#0]  ; tout
0064e2  4851              LDR      r0,|L1.26152|
0064e4  6800              LDR      r0,[r0,#0]  ; tout2
0064e6  1c40              ADDS     r0,r0,#1
0064e8  494f              LDR      r1,|L1.26152|
0064ea  6008              STR      r0,[r1,#0]  ; tout2
;;;1067   	rtcticks2++;
0064ec  484f              LDR      r0,|L1.26156|
0064ee  6800              LDR      r0,[r0,#0]  ; rtcticks2
0064f0  1c40              ADDS     r0,r0,#1
0064f2  494e              LDR      r1,|L1.26156|
0064f4  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;1068   	if(sleep_flag == 1){aliveping++;}
0064f6  484e              LDR      r0,|L1.26160|
0064f8  6800              LDR      r0,[r0,#0]  ; sleep_flag
0064fa  2801              CMP      r0,#1
0064fc  d104              BNE      |L1.25864|
0064fe  484d              LDR      r0,|L1.26164|
006500  6800              LDR      r0,[r0,#0]  ; aliveping
006502  1c40              ADDS     r0,r0,#1
006504  494b              LDR      r1,|L1.26164|
006506  6008              STR      r0,[r1,#0]  ; aliveping
                  |L1.25864|
;;;1069   	if(rtcticks2 > 10)
006508  4848              LDR      r0,|L1.26156|
00650a  6800              LDR      r0,[r0,#0]  ; rtcticks2
00650c  280a              CMP      r0,#0xa
00650e  dd09              BLE      |L1.25892|
;;;1070   	{
;;;1071   	IGNITION_ON;FUEL_ON;
006510  2002              MOVS     r0,#2
006512  4942              LDR      r1,|L1.26140|
006514  3980              SUBS     r1,r1,#0x80
006516  6088              STR      r0,[r1,#8]
006518  2004              MOVS     r0,#4
00651a  6088              STR      r0,[r1,#8]
;;;1072   				rtcticks2=0;
00651c  2000              MOVS     r0,#0
00651e  4943              LDR      r1,|L1.26156|
006520  6008              STR      r0,[r1,#0]  ; rtcticks2
006522  e009              B        |L1.25912|
                  |L1.25892|
;;;1073   	}
;;;1074   	else if (rtcticks2 > 5){
006524  4841              LDR      r0,|L1.26156|
006526  6800              LDR      r0,[r0,#0]  ; rtcticks2
006528  2805              CMP      r0,#5
00652a  dd05              BLE      |L1.25912|
;;;1075   	IGNITION_OFF;FUEL_OFF;	
00652c  2002              MOVS     r0,#2
00652e  493b              LDR      r1,|L1.26140|
006530  3980              SUBS     r1,r1,#0x80
006532  6048              STR      r0,[r1,#4]
006534  2004              MOVS     r0,#4
006536  6048              STR      r0,[r1,#4]
                  |L1.25912|
;;;1076   
;;;1077   	}
;;;1078   
;;;1079     LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
006538  483f              LDR      r0,|L1.26168|
00653a  6800              LDR      r0,[r0,#0]
00653c  2180              MOVS     r1,#0x80
00653e  4308              ORRS     r0,r0,r1
006540  493d              LDR      r1,|L1.26168|
006542  6008              STR      r0,[r1,#0]
;;;1080     LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
006544  20c1              MOVS     r0,#0xc1
006546  6008              STR      r0,[r1,#0]
;;;1081     
;;;1082   }
006548  4770              BX       lr
;;;1083   
                          ENDP

                  dtr_sleep PROC
;;;1085   
;;;1086   void dtr_sleep()
00654a  b538              PUSH     {r3-r5,lr}
;;;1087   {
;;;1088   
;;;1089   test2=GPIOB_PDIR;
00654c  4833              LDR      r0,|L1.26140|
00654e  3840              SUBS     r0,r0,#0x40
006550  6900              LDR      r0,[r0,#0x10]
006552  493a              LDR      r1,|L1.26172|
006554  6008              STR      r0,[r1,#0]  ; test2
;;;1090   memset(at_,0,strlen(at_));
006556  483a              LDR      r0,|L1.26176|
006558  f7fffffe          BL       strlen
00655c  4604              MOV      r4,r0
00655e  4621              MOV      r1,r4
006560  4837              LDR      r0,|L1.26176|
006562  f7fffffe          BL       __aeabi_memclr
;;;1091   sprintf(at_,"\n\n\n GPIOB = %d \n\n\n ",test2);	
006566  4835              LDR      r0,|L1.26172|
006568  a136              ADR      r1,|L1.26180|
00656a  6802              LDR      r2,[r0,#0]  ; test2
00656c  4834              LDR      r0,|L1.26176|
00656e  f7fffffe          BL       __2sprintf
;;;1092   send_modem(at_);
006572  4833              LDR      r0,|L1.26176|
006574  f7fffffe          BL       send_modem
;;;1093   if( test2 == 0 )	
006578  4830              LDR      r0,|L1.26172|
00657a  6800              LDR      r0,[r0,#0]  ; test2
00657c  2800              CMP      r0,#0
00657e  d107              BNE      |L1.26000|
;;;1094   {
;;;1095   	sleep_flag=1;	
006580  2001              MOVS     r0,#1
006582  492b              LDR      r1,|L1.26160|
006584  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1096   	DTR_ON;   //sleep
006586  2080              MOVS     r0,#0x80
006588  4924              LDR      r1,|L1.26140|
00658a  3140              ADDS     r1,r1,#0x40
00658c  6048              STR      r0,[r1,#4]
00658e  e02c              B        |L1.26090|
                  |L1.26000|
;;;1097   
;;;1098   }
;;;1099   else
;;;1100   {DTR_OFF;
006590  2080              MOVS     r0,#0x80
006592  4922              LDR      r1,|L1.26140|
006594  3140              ADDS     r1,r1,#0x40
006596  6088              STR      r0,[r1,#8]
;;;1101   	
;;;1102   	if (sleep_flag != 0  )
006598  4825              LDR      r0,|L1.26160|
00659a  6800              LDR      r0,[r0,#0]  ; sleep_flag
00659c  2800              CMP      r0,#0
00659e  d020              BEQ      |L1.26082|
;;;1103   	{
;;;1104   	// wakeup and reset
;;;1105   		sleep_flag=0;
0065a0  2000              MOVS     r0,#0
0065a2  4923              LDR      r1,|L1.26160|
0065a4  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1106       		// not sleep	
;;;1107   //	  HardFault_Handler();
;;;1108   delay(1000);
0065a6  207d              MOVS     r0,#0x7d
0065a8  00c0              LSLS     r0,r0,#3
0065aa  f7fffffe          BL       delay
;;;1109   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
0065ae  482a              LDR      r0,|L1.26200|
0065b0  6800              LDR      r0,[r0,#0]  ; tmeout
0065b2  4b2a              LDR      r3,|L1.26204|
0065b4  4a10              LDR      r2,|L1.26104|
0065b6  3a14              SUBS     r2,r2,#0x14
0065b8  490f              LDR      r1,|L1.26104|
0065ba  9000              STR      r0,[sp,#0]
0065bc  4828              LDR      r0,|L1.26208|
0065be  f7fffffe          BL       send_GSM
;;;1110   		
;;;1111   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
0065c2  4825              LDR      r0,|L1.26200|
0065c4  6800              LDR      r0,[r0,#0]  ; tmeout
0065c6  4b25              LDR      r3,|L1.26204|
0065c8  4a0b              LDR      r2,|L1.26104|
0065ca  3a14              SUBS     r2,r2,#0x14
0065cc  490a              LDR      r1,|L1.26104|
0065ce  9000              STR      r0,[sp,#0]
0065d0  a024              ADR      r0,|L1.26212|
0065d2  f7fffffe          BL       send_GSM
;;;1112   
;;;1113   //send_GSM("\n\nAT+CFUN=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;1114   		
;;;1115   delay(1000);	
0065d6  207d              MOVS     r0,#0x7d
0065d8  00c0              LSLS     r0,r0,#3
0065da  f7fffffe          BL       delay
;;;1116   clear();	
0065de  f7fffffe          BL       clear
                  |L1.26082|
;;;1117   	}  
;;;1118   	DTR_OFF;		// not sleep	
0065e2  2080              MOVS     r0,#0x80
0065e4  490d              LDR      r1,|L1.26140|
0065e6  3140              ADDS     r1,r1,#0x40
0065e8  6088              STR      r0,[r1,#8]
                  |L1.26090|
;;;1119   
;;;1120   
;;;1121   
;;;1122   }
;;;1123   
;;;1124   LED_state();LED_state2();
0065ea  f7fffffe          BL       LED_state
0065ee  f7fffffe          BL       LED_state2
;;;1125   }
0065f2  bd38              POP      {r3-r5,pc}
;;;1126   
                          ENDP

                  |L1.26100|
                          DCD      0x4006b000
                  |L1.26104|
                          DCD      ||.text||+0x8fc
                  |L1.26108|
                          DCD      uart_string_gsm
                  |L1.26112|
                          DCD      tout
                  |L1.26116|
                          DCD      data
                  |L1.26120|
006608  48617264          DCB      "Hardfault_Handler",0
00660c  6661756c
006610  745f4861
006614  6e646c65
006618  7200    
00661a  00                DCB      0
00661b  00                DCB      0
                  |L1.26140|
                          DCD      0x400ff080
                  |L1.26144|
                          DCD      0x000f423f
                  |L1.26148|
                          DCD      lpticks
                  |L1.26152|
                          DCD      tout2
                  |L1.26156|
                          DCD      rtcticks2
                  |L1.26160|
                          DCD      sleep_flag
                  |L1.26164|
                          DCD      aliveping
                  |L1.26168|
                          DCD      0x40040000
                  |L1.26172|
                          DCD      test2
                  |L1.26176|
                          DCD      at_
                  |L1.26180|
006644  0a0a0a20          DCB      "\n\n\n GPIOB = %d \n\n\n ",0
006648  4750494f
00664c  42203d20
006650  2564200a
006654  0a0a2000
                  |L1.26200|
                          DCD      tmeout
                  |L1.26204|
                          DCD      ||.text||+0xd54
                  |L1.26208|
                          DCD      ||.text||+0x3db8
                  |L1.26212|
006664  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
006668  2b475356
00666c  0d0a00  
00666f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        30
                  latest
                          %        10
                  ignstr
                          %        9
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  uart_string_gps
                          %        3000
                  data2
                          %        300
                  exception
                          %        200
                  ||ip||
                          %        100
                  port
                          %        10
                  at_
                          %        100
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  _rtcticks
                          %        10
                  imei
                          %        20
                  sd_data
                          %        1400

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a41542b          DCB      "\nAT+CMGS=""%s""\r\n",0
000004  434d4753
000008  3d222573
00000c  220d0a00
000010  4552524f          DCB      "ERROR:",0
000014  523a00  
000017  00                DCB      0
000018  4552524f          DCB      "ERROR\r\n",0
00001c  520d0a00
000020  3e00              DCB      ">",0
000022  00                DCB      0
000023  00                DCB      0
000024  2b434d47          DCB      "+CMGS:",0
000028  533a00  
00002b  00                DCB      0
00002c  4f4b00            DCB      "OK",0
00002f  00                DCB      0
000030  0a41542b          DCB      "\nAT+FSCREATE=C:\\IGN.TXT\r\n",0
000034  46534352
000038  45415445
00003c  3d433a5c
000040  49474e2e
000044  5458540d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0
00004c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n",0
000050  2b465357
000054  52495445
000058  3d433a5c
00005c  49474e2e
000060  5458542c
000064  302c362c
000068  31300d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  4f4b0d0a          DCB      "OK\r\n",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  0a494f4e          DCB      "\nION\n\n\n\n",0
00007c  0a0a0a0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
000084  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
000088  46534352
00008c  45415445
000090  3d433a5c
000094  49505f50
000098  4f52542e
00009c  5458540d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",0
0000a8  2b465357
0000ac  52495445
0000b0  3d433a5c
0000b4  49505f50
0000b8  4f52542e
0000bc  5458542c
0000c0  302c2564
0000c4  2c31300d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
0000cc  7c49507c          DCB      "|IP|",0
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  7c504f52          DCB      "|PORT|",0
0000d8  547c00  
0000db  00                DCB      0
0000dc  7c00              DCB      "|",0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4552524f          DCB      "ERROR",0
0000e4  5200    
0000e6  00                DCB      0
0000e7  00                DCB      0
0000e8  524d4300          DCB      "RMC",0
0000ec  47474100          DCB      "GGA",0
0000f0  0d0a0a0a          DCB      "\r\n\n\nAT+GSN\r\n",0
0000f4  41542b47
0000f8  534e0d0a
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
000100  25642c00          DCB      "%d,",0
000104  0d0a0d0a          DCB      "\r\n\r\nAT+CBC\r\n",0
000108  41542b43
00010c  42430d0a
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
000114  256400            DCB      "%d",0
000117  00                DCB      0
000118  256600            DCB      "%f",0
00011b  00                DCB      0
00011c  2c00              DCB      ",",0
00011e  00                DCB      0
00011f  00                DCB      0
000120  24477847          DCB      "$$GxGGA",0
000124  474100  
000127  00                DCB      0
000128  2c244778          DCB      ",$$GxRMC",0
00012c  524d4300
000130  2c463d00          DCB      ",F=",0
000134  2c41433d          DCB      ",AC=",0
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
00013c  2c493d00          DCB      ",I=",0
000140  2c42522a          DCB      ",BR*",0
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
000148  0a41542b          DCB      "\nAT+FSCREATE=C:\\CURSOR.TXT\r\n",0
00014c  46534352
000150  45415445
000154  3d433a5c
000158  43555253
00015c  4f522e54
000160  58540d0a
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
000168  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n",0
00016c  2b465357
000170  52495445
000174  3d433a5c
000178  43555253
00017c  4f522e54
000180  58542c30
000184  2c35302c
000188  31300d0a
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
000190  0a2c256c          DCB      "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
000194  642c256c
000198  642c256c
00019c  642c0a0a
0001a0  0a0a0a0a
0001a4  0a0a0a0a
0001a8  0a0a0a0a
0001ac  0a0a0a0a
0001b0  0a0a    
0001b2  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
0001b6  0a0a0a0a
0001ba  0a0a0a0a
0001be  0a0a0a0a
0001c2  0a0a0a0a
0001c6  0a0a0a0a
0001ca  0a0a0a0a
0001ce  0a0a00            DCB      "\n\n",0
0001d1  00                DCB      0
0001d2  00                DCB      0
0001d3  00                DCB      0
0001d4  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
0001d8  46534352
0001dc  45415445
0001e0  3d433a5c
0001e4  494e5445
0001e8  5256414c
0001ec  2e545854
0001f0  0d0a00  
0001f3  00                DCB      0
0001f4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",0
0001f8  2b465357
0001fc  52495445
000200  3d433a5c
000204  494e5445
000208  5256414c
00020c  2e545854
000210  2c302c25
000214  642c3130
000218  0d0a00  
00021b  00                DCB      0
00021c  7c494e54          DCB      "|INTERVAL|",0
000220  45525641
000224  4c7c00  
000227  00                DCB      0
000228  0a41542b          DCB      "\nAT+FSCREATE=C:\\APN.TXT\r\n",0
00022c  46534352
000230  45415445
000234  3d433a5c
000238  41504e2e
00023c  5458540d
000240  0a00    
000242  00                DCB      0
000243  00                DCB      0
000244  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",0
000248  2b465357
00024c  52495445
000250  3d433a5c
000254  41504e2e
000258  5458542c
00025c  302c2564
000260  2c31300d
000264  0a00    
000266  00                DCB      0
000267  00                DCB      0
000268  0a0a4154          DCB      "\n\nAT\r\n",0
00026c  0d0a00  
00026f  00                DCB      0
000270  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
000274  2b475356
000278  0d0a00  
00027b  00                DCB      0
00027c  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
000280  2b434d47
000284  463d310a
000288  0a00    
00028a  00                DCB      0
00028b  00                DCB      0
00028c  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
000290  2b435343
000294  413f0d0a
000298  00      
000299  00                DCB      0
00029a  00                DCB      0
00029b  00                DCB      0
00029c  0d0a4154          DCB      "\r\nAT+CMGR=1\r\n",0
0002a0  2b434d47
0002a4  523d310d
0002a8  0a00    
0002aa  00                DCB      0
0002ab  00                DCB      0
0002ac  4f574e45          DCB      "OWNER",0
0002b0  5200    
0002b2  00                DCB      0
0002b3  00                DCB      0
0002b4  4c4f4341          DCB      "LOCATION",0
0002b8  54494f4e
0002bc  00      
0002bd  00                DCB      0
0002be  00                DCB      0
0002bf  00                DCB      0
0002c0  494e5445          DCB      "INTERVAL",0
0002c4  5256414c
0002c8  00      
0002c9  00                DCB      0
0002ca  00                DCB      0
0002cb  00                DCB      0
0002cc  53544152          DCB      "START",0
0002d0  5400    
0002d2  00                DCB      0
0002d3  00                DCB      0
0002d4  4f574e45          DCB      "OWNER1",0
0002d8  523100  
0002db  00                DCB      0
0002dc  4f574e45          DCB      "OWNER2",0
0002e0  523200  
0002e3  00                DCB      0
0002e4  4f574e45          DCB      "OWNER3",0
0002e8  523300  
0002eb  00                DCB      0
0002ec  44454255          DCB      "DEBUG",0
0002f0  4700    
0002f2  00                DCB      0
0002f3  00                DCB      0
0002f4  52455345          DCB      "RESET",0
0002f8  5400    
0002fa  00                DCB      0
0002fb  00                DCB      0
0002fc  495000            DCB      "IP",0
0002ff  00                DCB      0
000300  53554f57          DCB      "SUOWNER",0
000304  4e455200
000308  534f574e          DCB      "SOWNER",0
00030c  455200  
00030f  00                DCB      0
000310  49474e49          DCB      "IGNITION ON",0
000314  54494f4e
000318  204f4e00
00031c  49474e49          DCB      "IGNITION OFF",0
000320  54494f4e
000324  204f4646
000328  00      
000329  00                DCB      0
00032a  00                DCB      0
00032b  00                DCB      0
00032c  49474e53          DCB      "IGNSTAT",0
000330  54415400
000334  0a546865          DCB      "\nThere is an Emergency please help:\nCoordinates:%sN,%"
000338  72652069
00033c  7320616e
000340  20456d65
000344  7267656e
000348  63792070
00034c  6c656173
000350  65206865
000354  6c703a0a
000358  436f6f72
00035c  64696e61
000360  7465733a
000364  25734e2c
000368  25      
000369  73450a68          DCB      "sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&o"
00036d  74747073
000371  3a2f2f77
000375  77772e67
000379  6f6f676c
00037d  652e636f
000381  6d2f7365
000385  61726368
000389  3f713d25
00038d  73256332
000391  43257326
000395  69653d75
000399  74662d38
00039d  266f    
00039f  653d7574          DCB      "e=utf-8\n",0
0003a3  662d380a
0003a7  00      
0003a8  0d0a4154          DCB      "\r\nAT+CPBR=1\r\n",0
0003ac  2b435042
0003b0  523d310d
0003b4  0a00    
0003b6  00                DCB      0
0003b7  00                DCB      0
0003b8  0d0a4154          DCB      "\r\nAT+CPBR=2\r\n",0
0003bc  2b435042
0003c0  523d320d
0003c4  0a00    
0003c6  00                DCB      0
0003c7  00                DCB      0
0003c8  0a436f6f          DCB      "\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://"
0003cc  7264696e
0003d0  61746573
0003d4  203a2025
0003d8  73204e2c
0003dc  20257320
0003e0  450a5370
0003e4  65656420
0003e8  3a202573
0003ec  206b6d70
0003f0  680a0a68
0003f4  74747073
0003f8  3a2f2f  
0003fb  7777772e          DCB      "www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",0
0003ff  676f6f67
000403  6c652e63
000407  6f6d2f73
00040b  65617263
00040f  683f713d
000413  25732563
000417  32432573
00041b  2669653d
00041f  7574662d
000423  38266f65
000427  3d757466
00042b  2d380a00
00042f  00                DCB      0
000430  0d0a4154          DCB      "\r\nAT+CMGD=1,4\r\n",0
000434  2b434d47
000438  443d312c
00043c  340d0a00
000440  0a41542b          DCB      "\nAT+FSCREATE=D:\\LOG.TXT\r\n",0
000444  46534352
000448  45415445
00044c  3d443a5c
000450  4c4f472e
000454  5458540d
000458  0a00    
00045a  00                DCB      0
00045b  00                DCB      0
00045c  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
000460  46534352
000464  45415445
000468  3d433a5c
00046c  4c4f472e
000470  5458540d
000474  0a00    
000476  00                DCB      0
000477  00                DCB      0
000478  72756472          DCB      "rudra.jellyfishtele.com",0
00047c  612e6a65
000480  6c6c7966
000484  69736874
000488  656c652e
00048c  636f6d00
000490  35353535          DCB      "5555",0
000494  00      
000495  00                DCB      0
000496  00                DCB      0
000497  00                DCB      0
000498  3500              DCB      "5",0
00049a  00                DCB      0
00049b  00                DCB      0
00049c  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n\r\n",0
0004a0  542b434d
0004a4  47443d31
0004a8  2c340d0a
0004ac  0d0a00  
0004af  00                DCB      0
0004b0  257300            DCB      "%s",0
0004b3  00                DCB      0
0004b4  0a00              DCB      "\n",0
0004b6  00                DCB      0
0004b7  00                DCB      0
0004b8  43480a00          DCB      "CH\n",0
0004bc  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
0004c0  2b465357
0004c4  52495445
0004c8  3d25735c
0004cc  4c4f472e
0004d0  5458542c
0004d4  312c2564
0004d8  2c31300a
0004dc  0a00    
0004de  00                DCB      0
0004df  00                DCB      0
0004e0  0a0a2041          DCB      "\n\n AT+CFUN=1,1\r\n",0
0004e4  542b4346
0004e8  554e3d31
0004ec  2c310d0a
0004f0  00      
0004f1  00                DCB      0
0004f2  00                DCB      0
0004f3  00                DCB      0
0004f4  0d0d0a41          DCB      "\r\r\nAT+CMGD=1,4\r\n\n\n\n\n",0
0004f8  542b434d
0004fc  47443d31
000500  2c340d0a
000504  0a0a0a0a
000508  00      
000509  00                DCB      0
00050a  00                DCB      0
00050b  00                DCB      0
00050c  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
000510  2b435042
000514  533d2253
000518  4d220d0a
00051c  00      
00051d  00                DCB      0
00051e  00                DCB      0
00051f  00                DCB      0
000520  0d0a4154          DCB      "\r\nAT+CPBW=1\r\r\n\n",0
000524  2b435042
000528  573d310d
00052c  0d0a0a00
000530  0d0a4154          DCB      "\r\nAT+CPBW=1,""%s"",129,""OWNER1""\r\n",0
000534  2b435042
000538  573d312c
00053c  22257322
000540  2c313239
000544  2c224f57
000548  4e455231
00054c  220d0a00
000550  0a0a4154          DCB      "\n\nAT+CPBS=""ME""\r\n",0
000554  2b435042
000558  533d224d
00055c  45220d0a
000560  00      
000561  00                DCB      0
000562  00                DCB      0
000563  00                DCB      0
000564  0d0a4154          DCB      "\r\nAT+CPBW=2\r\r\n\n",0
000568  2b435042
00056c  573d320d
000570  0d0a0a00
000574  0d0a4154          DCB      "\r\nAT+CPBW=2,""%s"",129,""OWNER2""\r\n",0
000578  2b435042
00057c  573d322c
000580  22257322
000584  2c313239
000588  2c224f57
00058c  4e455232
000590  220d0a00
000594  0d0a4154          DCB      "\r\nAT+CPBW=3\r\r\n\n",0
000598  2b435042
00059c  573d330d
0005a0  0d0a0a00
0005a4  0d0a4154          DCB      "\r\nAT+CPBW=3,""%s"",129,""OWNER3""\r\n",0
0005a8  2b435042
0005ac  573d332c
0005b0  22257322
0005b4  2c313239
0005b8  2c224f57
0005bc  4e455233
0005c0  220d0a00
0005c4  0d0a4154          DCB      "\r\nAT+CPBW=4\r\r\n\n",0
0005c8  2b435042
0005cc  573d340d
0005d0  0d0a0a00
0005d4  0d0a4154          DCB      "\r\nAT+CPBW=4,""%s"",129,""SOWNER""\r\n",0
0005d8  2b435042
0005dc  573d342c
0005e0  22257322
0005e4  2c313239
0005e8  2c22534f
0005ec  574e4552
0005f0  220d0a00
0005f4  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n",0
0005f8  542b434d
0005fc  47443d31
000600  2c340d0a
000604  00      
000605  00                DCB      0
000606  00                DCB      0
000607  00                DCB      0
000608  2c2000            DCB      ", ",0
00060b  00                DCB      0
00060c  2c202447          DCB      ", $$GxRMC",0
000610  78524d43
000614  00      
000615  00                DCB      0
000616  00                DCB      0
000617  00                DCB      0
000618  0d0a0d0a          DCB      "\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",0
00061c  41542b46
000620  53464c53
000624  495a453d
000628  25735c4c
00062c  4f472e54
000630  58540d0a
000634  00      
000635  00                DCB      0
000636  00                DCB      0
000637  00                DCB      0
000638  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>          \r\n"
00063c  20202020
000640  20202020
000644  20202020
000648  20203c25
00064c  643e2020
000650  203c2564
000654  3e202020
000658  3c3d2564
00065c  3e202020
000660  20202020
000664  2020200d
000668  0a      
000669  0d0a00            DCB      "\r\n",0
00066c  0d0a0d0a          DCB      "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",0
000670  41542b46
000674  53524541
000678  443d2573
00067c  5c4c4f47
000680  2e545854
000684  2c312c31
000688  3130302c
00068c  25640d0a
000690  00      
000691  00                DCB      0
000692  00                DCB      0
000693  00                DCB      0
000694  53454e44          DCB      "SEND OK",0
000698  204f4b00
00069c  4641494c          DCB      "FAIL",0
0006a0  00      
0006a1  00                DCB      0
0006a2  00                DCB      0
0006a3  00                DCB      0
0006a4  44454143          DCB      "DEACT",0
0006a8  5400    
0006aa  00                DCB      0
0006ab  00                DCB      0
0006ac  65786365          DCB      "exception : COMPARED RESPONCES IN THE DATA\n\n\n\n",0
0006b0  7074696f
0006b4  6e203a20
0006b8  434f4d50
0006bc  41524544
0006c0  20524553
0006c4  504f4e43
0006c8  45532049
0006cc  4e205448
0006d0  45204441
0006d4  54410a0a
0006d8  0a0a00  
0006db  00                DCB      0
0006dc  434f4e4e          DCB      "CONNECT",0
0006e0  45435400
0006e4  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
0006e8  2b434950
0006ec  53454e44
0006f0  0d0a00  
0006f3  00                DCB      0
0006f4  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
0006f8  2b434655
0006fc  4e3d300d
000700  0d0a0a00
000704  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
000708  494e5345
00070c  52544544
000710  0d0a4f4b
000714  00      
000715  00                DCB      0
000716  00                DCB      0
000717  00                DCB      0
000718  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
00071c  2b434655
000720  4e3d310d
000724  0a00    
000726  00                DCB      0
000727  00                DCB      0
000728  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
00072c  2b434950
000730  53485554
000734  0d0a00  
000737  00                DCB      0
000738  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
00073c  2b435354
000740  543d2225
000744  73220d0a
000748  00      
000749  00                DCB      0
00074a  00                DCB      0
00074b  00                DCB      0
00074c  0d0a4154          DCB      "\r\nAT+CIICR\r\r\n",0
000750  2b434949
000754  43520d0d
000758  0a00    
00075a  00                DCB      0
00075b  00                DCB      0
00075c  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
000760  43494653
000764  520d0d0a
000768  00      
000769  00                DCB      0
00076a  00                DCB      0
00076b  00                DCB      0
00076c  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000770  2b434950
000774  53544152
000778  543d2254
00077c  4350222c
000780  22257322
000784  2c222573
000788  220d0a00
00078c  434f4e4e          DCB      "CONNECT FAIL",0
000790  45435420
000794  4641494c
000798  00      
000799  00                DCB      0
00079a  00                DCB      0
00079b  00                DCB      0
00079c  0d0a4154          DCB      "\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",0
0007a0  2b465343
0007a4  52454154
0007a8  453d2573
0007ac  5c4c4f47
0007b0  2e545854
0007b4  0d0a00  
0007b7  00                DCB      0
0007b8  0a494f46          DCB      "\nIOFF\n\n\n\n",0
0007bc  460a0a0a
0007c0  0a00    
0007c2  00                DCB      0
0007c3  00                DCB      0
0007c4  0a41542b          DCB      "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n",0
0007c8  46535245
0007cc  41443d43
0007d0  3a5c4947
0007d4  4e2e5458
0007d8  542c302c
0007dc  3130302c
0007e0  310d0a00
0007e4  494f4e00          DCB      "ION",0
0007e8  494f4646          DCB      "IOFF",0
0007ec  00      

                          AREA ||.data||, DATA, ALIGN=3

                  cond200
                          DCD      0x00000000
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  tout
                          DCD      0x00000000
                  tout2
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  temp
                          DCD      0x00000000
                  flagch
                          DCD      0x00000000
                  cond121
000028  00000000          DCB      0x00,0x00,0x00,0x00
                  cond122
                          DCD      0x00000000
                  cond123
                          DCD      0x00000000
                  cond124
                          DCD      0x00000000
                  len
                          DCD      0x00000000
                  cond
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                  con1d
                          DCD      0x00000000
                  stcond1
                          DCD      0x00000000
                  stcond2
                          DCD      0x00000000
                  stcond3
                          DCD      0x00000000
                  stcond4
                          DCD      0x00000000
                  time111
                          DCD      0x00000000
                  timeout222
                          DCD      0x00000000
                  qweq
                          DCD      0x00000000
                  i11
                          DCD      0x00000000
                  j11
                          DCD      0x00000000
                  temp11
                          DCD      0x00000000
                  ||sz1||
                          DCD      0x00000000
                  ||sz2||
                          DCD      0x00000000
                  send_SOS
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  stateCount
00007c  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  e
                          DCD      0x00000000
                  adcsa
                          DCD      0x00000000
                  adcin
                          DCD      0x00000000
                  adcsample
                          DCD      0x00000000
                  fuel
                          DCD      0x00000000
                  apn
0000a0  69736166          DCB      0x69,0x73,0x61,0x66
0000a4  65000000          DCB      0x65,0x00,0x00,0x00
                          %        16
0000b8  00                DCB      0x00
                  fuelstr
0000b9  000000            DCB      0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
                  ||rez||
0000c0  00000000          DCFS     0x00000000 ; 0
                  fact
0000c4  3f800000          DCFS     0x3f800000 ; 1
                  d
                          DCD      0x00000000
                  point_seen
                          DCD      0x00000000
                  cond201
                          DCD      0x00000000
                  cond1
                          DCD      0x00000000
                  cond2
                          DCD      0x00000000
                  cond3
                          DCD      0x00000000
                  cond4
                          DCD      0x00000000
                  cond5
                          DCD      0x00000000
                  cond6
                          DCD      0x00000000
                  cond7
                          DCD      0x00000000
                  cond8
                          DCD      0x00000000
                  cond9
                          DCD      0x00000000
                  cond10
                          DCD      0x00000000
                  cond11
                          DCD      0x00000000
                  cond12
                          DCD      0x00000000
                  cond13
                          DCD      0x00000000
                  cond14
                          DCD      0x00000000
                  cond15
                          DCD      0x00000000
                  ass
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  ||fsz||
                          DCD      0x00000000
                  log0
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  qwe
                          DCD      0x00000000
                  ||k5||
                          DCD      0x00000000
                  enters
                          DCD      0x00000000
                  cursorvaluepr
                          DCD      0x00000000
                  cursorvaluene
                          DCD      0x00000000
                  ||q1||
                          DCD      0x00000000
                  ||q2||
                          DCD      0x00000000
                  ||q3||
                          DCD      0x00000000
                  ||q4||
                          DCD      0x00000000
                  cntendl
                          DCD      0x00000000
                  prev
                          %        8
                  ||iz||
                          DCD      0x00000000
                  a
                          %        8
                  b
                          %        8
                  c
                          %        8
                  ||hh||
                          DCD      0x00000000
                  mm1
                          DCD      0x00000000
                  mm2
                          DCD      0x00000000
                          DCD      0x00000000
                  ||a1||
                          %        8
                  ||b1||
                          %        8
                  ||c1||
                          %        8
                  hh11
                          %        8
                  mm11
                          %        8
                  mm22
                          %        8
                  logged
                          DCD      0x00000000
                  check
                          DCD      0x00000000
                  stcond5
                          DCD      0x00000000
                  acstr
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
                  breach
                          DCD      0x00000000
                  aliveping
                          DCD      0x00000000
                  sleep_flag
                          DCD      0x00000000
                  tmeout
                          DCD      0x00000004
                  int_erval
                          DCD      0x00000001
                  drive
                          DCD      0x00000000
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
                  speed
0001dc  00000000          DCFS     0x00000000 ; 0
                  lpticks
                          DCD      0x00000000
                  voltagecbc
                          DCD      0x00000000
                  ||csq||
                          DCD      0x00000000
                  rtcticks
                          DCD      0x00000000
                  rtcticks2
                          DCD      0x00000000
                  imeiinc
                          DCD      0x00000000
                  ticks_ch
0001f8  00                DCB      0x00
                  save_rtcticks
0001f9  00                DCB      0x00
                  velocity
0001fa  0000              DCB      0x00,0x00
0001fc  000000            DCB      0x00,0x00,0x00
                  interval
0001ff  00                DCB      0x00
                          DCD      0x00000000
                  timeout
                          DCD      0x00000000
                  ||pr||
000208  00000000          DCFS     0x00000000 ; 0
                  ||la||
00020c  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
000224  00                DCB      0x00
                  ringflag
000225  00                DCB      0x00
                  lptmr_interrupt
000226  0000              DCB      0x00,0x00
                  time52
                          DCD      0x0000000f
                  cond277
                          DCD      0x00000000
                  cond20077
                          DCD      0x00000000
                  ||sz||
                          DCD      0x00000000
                  ||cn||
                          DCD      0x00000000
                  ||res||
                          DCD      0x00000000
                  test2
                          DCD      0x00000000
                  testingcode
                          DCD      0x00000000

                          AREA ||i.clear||, COMGROUP=clear, CODE, READONLY, ALIGN=2

                  clear PROC
;;;1415   	
;;;1416   __inline void clear()
000000  4808              LDR      r0,|L18.36|
;;;1417   {
;;;1418     if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7900              LDRB     r0,[r0,#4]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L18.20|
;;;1419       {
;;;1420         temp = UART_D_REG(UART1_BASE_PTR);
00000c  4805              LDR      r0,|L18.36|
00000e  79c0              LDRB     r0,[r0,#7]
000010  4905              LDR      r1,|L18.40|
000012  6008              STR      r0,[r1,#0]  ; temp
                  |L18.20|
;;;1421   		}
;;;1422   		
;;;1423   		UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000014  4803              LDR      r0,|L18.36|
000016  7900              LDRB     r0,[r0,#4]
000018  2118              MOVS     r1,#0x18
00001a  4308              ORRS     r0,r0,r1
00001c  4901              LDR      r1,|L18.36|
00001e  7108              STRB     r0,[r1,#4]
;;;1424   }	
000020  4770              BX       lr
;;;1425   
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0x4006b000
                  |L18.40|
                          DCD      temp

                          AREA ||i.delay||, COMGROUP=delay, CODE, READONLY, ALIGN=2

                  delay PROC
;;;81     /*************************** delay*****************************************/
;;;82     __inline void delay(int32 delaytime)
000000  e00d              B        |L25.30|
                  |L25.2|
;;;83     {
;;;84      while(delaytime--)
;;;85         {for(i=2000;i>0;i--)
000002  217d              MOVS     r1,#0x7d
000004  0109              LSLS     r1,r1,#4
000006  4a08              LDR      r2,|L25.40|
000008  6011              STR      r1,[r2,#0]  ; i
00000a  e004              B        |L25.22|
                  |L25.12|
00000c  4906              LDR      r1,|L25.40|
00000e  6809              LDR      r1,[r1,#0]  ; i
000010  1e49              SUBS     r1,r1,#1
000012  4a05              LDR      r2,|L25.40|
000014  6011              STR      r1,[r2,#0]  ; i
                  |L25.22|
000016  4904              LDR      r1,|L25.40|
000018  6809              LDR      r1,[r1,#0]  ; i
00001a  2900              CMP      r1,#0
00001c  dcf6              BGT      |L25.12|
                  |L25.30|
00001e  4601              MOV      r1,r0                 ;84
000020  1e40              SUBS     r0,r0,#1              ;84
000022  2900              CMP      r1,#0                 ;84
000024  d1ed              BNE      |L25.2|
;;;86     			{	
;;;87     			}			// about 1 ms
;;;88         }
;;;89     }
000026  4770              BX       lr
;;;90      void delay2(int delaytime)
                          ENDP

                  |L25.40|
                          DCD      i

                          AREA ||i.send_modem||, COMGROUP=send_modem, CODE, READONLY, ALIGN=2

                  send_modem PROC
;;;1391   
;;;1392   __inline void send_modem(char ch[])
000000  b570              PUSH     {r4-r6,lr}
;;;1393   	{	
000002  4605              MOV      r5,r0
;;;1394   						unsigned char i20=0;
000004  2400              MOVS     r4,#0
;;;1395   						for(i20=0;i20<strlen(ch);i20++)
000006  bf00              NOP      
000008  e005              B        |L32.22|
                  |L32.10|
;;;1396   						{
;;;1397   							uart_putchar(UART1_BASE_PTR, ch[i20]);//clear();
00000a  5d29              LDRB     r1,[r5,r4]
00000c  4805              LDR      r0,|L32.36|
00000e  f7fffffe          BL       uart_putchar
000012  1c60              ADDS     r0,r4,#1              ;1395
000014  b2c4              UXTB     r4,r0                 ;1395
                  |L32.22|
000016  4628              MOV      r0,r5                 ;1395
000018  f7fffffe          BL       strlen
00001c  42a0              CMP      r0,r4                 ;1395
00001e  d8f4              BHI      |L32.10|
;;;1398   						}
;;;1399   						
;;;1400   	}
000020  bd70              POP      {r4-r6,pc}
;;;1401   
                          ENDP

000022  0000              DCW      0x0000
                  |L32.36|
                          DCD      0x4006b000

                          AREA ||i.send_GSM||, COMGROUP=send_GSM, CODE, READONLY, ALIGN=2

                  send_GSM PROC
;;;1437   
;;;1438   __inline void send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1439   {	 
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;1440   
;;;1441   		//uart_putchar(UART1_BASE_PTR,0xA);
;;;1442   		//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1443   	clear();
00000c  f7fffffe          BL       clear
;;;1444   	tout=0;
000010  2000              MOVS     r0,#0
000012  4932              LDR      r1,|L39.220|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;1445   //	qwe=strlen(uart_string_gsm);
;;;1446   		memset(uart_string_gsm,0,5000);
000016  4932              LDR      r1,|L39.224|
000018  4832              LDR      r0,|L39.228|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1447   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4931              LDR      r1,|L39.232|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1448   	 						//timer counts to wait for characters in uart 1 
;;;1449   		clear();
000024  f7fffffe          BL       clear
;;;1450   		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;1451   		uart_putchar(UART1_BASE_PTR,'\n');	uart_putchar(UART1_BASE_PTR,'\n');	
00002e  210a              MOVS     r1,#0xa
000030  482e              LDR      r0,|L39.236|
000032  f7fffffe          BL       uart_putchar
000036  210a              MOVS     r1,#0xa
000038  482c              LDR      r0,|L39.236|
00003a  f7fffffe          BL       uart_putchar
;;;1452   	delay(10);
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       delay
;;;1453   //	uart_putchar(UART1_BASE_PTR,'\r');
;;;1454   	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1455   		do
000044  bf00              NOP      
                  |L39.70|
;;;1456   		{
;;;1457   			
;;;1458   //					time111--;
;;;1459   //				  timeout222--;
;;;1460   
;;;1461   			
;;;1462   	cond122=strstr(uart_string_gsm, responseA);
000046  4827              LDR      r0,|L39.228|
000048  9902              LDR      r1,[sp,#8]
00004a  f7fffffe          BL       strstr
00004e  4928              LDR      r1,|L39.240|
000050  6008              STR      r0,[r1,#0]  ; cond122
;;;1463   	cond123=strstr(uart_string_gsm, responseB);
000052  4621              MOV      r1,r4
000054  4823              LDR      r0,|L39.228|
000056  f7fffffe          BL       strstr
00005a  4926              LDR      r1,|L39.244|
00005c  6008              STR      r0,[r1,#0]  ; cond123
;;;1464     cond124=strstr(uart_string_gsm, responseC);
00005e  4629              MOV      r1,r5
000060  4820              LDR      r0,|L39.228|
000062  f7fffffe          BL       strstr
000066  4924              LDR      r1,|L39.248|
000068  6008              STR      r0,[r1,#0]  ; cond124
;;;1465   	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
00006a  4821              LDR      r0,|L39.240|
00006c  6800              LDR      r0,[r0,#0]  ; cond122
00006e  2800              CMP      r0,#0
000070  d10b              BNE      |L39.138|
000072  4820              LDR      r0,|L39.244|
000074  6800              LDR      r0,[r0,#0]  ; cond123
000076  2800              CMP      r0,#0
000078  d107              BNE      |L39.138|
00007a  4608              MOV      r0,r1
00007c  6800              LDR      r0,[r0,#0]  ; cond124
00007e  2800              CMP      r0,#0
000080  d103              BNE      |L39.138|
000082  4816              LDR      r0,|L39.220|
000084  6800              LDR      r0,[r0,#0]  ; tout
000086  42b0              CMP      r0,r6
000088  dd01              BLE      |L39.142|
                  |L39.138|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L39.144|
                  |L39.142|
00008e  2000              MOVS     r0,#0
                  |L39.144|
000090  491a              LDR      r1,|L39.252|
000092  7008              STRB     r0,[r1,#0]
;;;1466   			
;;;1467   		}while (!cond121);
000094  4608              MOV      r0,r1
000096  7800              LDRB     r0,[r0,#0]  ; cond121
000098  2800              CMP      r0,#0
00009a  d0d4              BEQ      |L39.70|
;;;1468   		clear();
00009c  f7fffffe          BL       clear
;;;1469   		if(tout>timeout){
0000a0  480e              LDR      r0,|L39.220|
0000a2  6800              LDR      r0,[r0,#0]  ; tout
0000a4  42b0              CMP      r0,r6
0000a6  dd17              BLE      |L39.216|
;;;1470   			uart_putchar(UART1_BASE_PTR,'\r');
0000a8  210d              MOVS     r1,#0xd
0000aa  4810              LDR      r0,|L39.236|
0000ac  f7fffffe          BL       uart_putchar
;;;1471   		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000b0  210a              MOVS     r1,#0xa
0000b2  480e              LDR      r0,|L39.236|
0000b4  f7fffffe          BL       uart_putchar
0000b8  211a              MOVS     r1,#0x1a
0000ba  480c              LDR      r0,|L39.236|
0000bc  f7fffffe          BL       uart_putchar
;;;1472   		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000c0  211a              MOVS     r1,#0x1a
0000c2  480a              LDR      r0,|L39.236|
0000c4  f7fffffe          BL       uart_putchar
0000c8  210d              MOVS     r1,#0xd
0000ca  4808              LDR      r0,|L39.236|
0000cc  f7fffffe          BL       uart_putchar
;;;1473   		uart_putchar(UART1_BASE_PTR,'\n');}
0000d0  210a              MOVS     r1,#0xa
0000d2  4806              LDR      r0,|L39.236|
0000d4  f7fffffe          BL       uart_putchar
                  |L39.216|
;;;1474   		//return;
;;;1475   //		return uart_string_gsm;
;;;1476   
;;;1477   		
;;;1478   
;;;1479   
;;;1480   }
0000d8  b005              ADD      sp,sp,#0x14
0000da  bdf0              POP      {r4-r7,pc}
;;;1481   
                          ENDP

                  |L39.220|
                          DCD      tout
                  |L39.224|
                          DCD      0x00001388
                  |L39.228|
                          DCD      uart_string_gsm
                  |L39.232|
                          DCD      ||k2||
                  |L39.236|
                          DCD      0x4006b000
                  |L39.240|
                          DCD      cond122
                  |L39.244|
                          DCD      cond123
                  |L39.248|
                          DCD      cond124
                  |L39.252|
                          DCD      cond121

                          AREA ||i.send_MSG||, COMGROUP=send_MSG, CODE, READONLY, ALIGN=2

                  send_MSG PROC
;;;1483   
;;;1484   __inline char * send_MSG(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1485   {	
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;1486   		qwe=strlen(uart_string_gsm);
00000a  4829              LDR      r0,|L46.176|
00000c  f7fffffe          BL       strlen
000010  4928              LDR      r1,|L46.180|
000012  6008              STR      r0,[r1,#0]  ; qwe
;;;1487   
;;;1488   	
;;;1489   		memset(uart_string_gsm,0,qwe);
000014  4608              MOV      r0,r1
000016  6801              LDR      r1,[r0,#0]  ; qwe
000018  4825              LDR      r0,|L46.176|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1490   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4925              LDR      r1,|L46.184|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1491   	  time111=99999;						//timer counts to wait for characters in uart 1 
000024  4825              LDR      r0,|L46.188|
000026  4926              LDR      r1,|L46.192|
000028  6008              STR      r0,[r1,#0]  ; time111
;;;1492   		clear();
00002a  f7fffffe          BL       clear
;;;1493   		timeout222=2001;
00002e  4825              LDR      r0,|L46.196|
000030  4925              LDR      r1,|L46.200|
000032  6008              STR      r0,[r1,#0]  ; timeout222
;;;1494   		send_modem(string);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       send_modem
;;;1495   		do	{
00003a  bf00              NOP      
                  |L46.60|
;;;1496   			
;;;1497   					time111--;
00003c  4820              LDR      r0,|L46.192|
00003e  6800              LDR      r0,[r0,#0]  ; time111
000040  1e40              SUBS     r0,r0,#1
000042  491f              LDR      r1,|L46.192|
000044  6008              STR      r0,[r1,#0]  ; time111
;;;1498   				  timeout222--;
000046  4820              LDR      r0,|L46.200|
000048  6800              LDR      r0,[r0,#0]  ; timeout222
00004a  1e40              SUBS     r0,r0,#1
00004c  491e              LDR      r1,|L46.200|
00004e  6008              STR      r0,[r1,#0]  ; timeout222
;;;1499   //          if(lptmr_interrupt == 1){
;;;1500   //					//accel_read();
;;;1501   //					detect_motion();
;;;1502   //					lptmr_interrupt = 0;}		
;;;1503   //					if(timeout222 % 400 == 0)
;;;1504   //					{
;;;1505   //						//uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
;;;1506   //					}
;;;1507   			
;;;1508   	cond122=strstr(uart_string_gsm, responseA);
000050  4639              MOV      r1,r7
000052  4817              LDR      r0,|L46.176|
000054  f7fffffe          BL       strstr
000058  491c              LDR      r1,|L46.204|
00005a  6008              STR      r0,[r1,#0]  ; cond122
;;;1509   	cond123=strstr(uart_string_gsm, responseB);
00005c  4621              MOV      r1,r4
00005e  4814              LDR      r0,|L46.176|
000060  f7fffffe          BL       strstr
000064  491a              LDR      r1,|L46.208|
000066  6008              STR      r0,[r1,#0]  ; cond123
;;;1510     cond124=strstr(uart_string_gsm, responseC);
000068  4629              MOV      r1,r5
00006a  4811              LDR      r0,|L46.176|
00006c  f7fffffe          BL       strstr
000070  4918              LDR      r1,|L46.212|
000072  6008              STR      r0,[r1,#0]  ; cond124
;;;1511   	cond121 = (cond122	|| cond123	|| cond124  || (time111<=1))	;			
000074  4815              LDR      r0,|L46.204|
000076  6800              LDR      r0,[r0,#0]  ; cond122
000078  2800              CMP      r0,#0
00007a  d10b              BNE      |L46.148|
00007c  4814              LDR      r0,|L46.208|
00007e  6800              LDR      r0,[r0,#0]  ; cond123
000080  2800              CMP      r0,#0
000082  d107              BNE      |L46.148|
000084  4608              MOV      r0,r1
000086  6800              LDR      r0,[r0,#0]  ; cond124
000088  2800              CMP      r0,#0
00008a  d103              BNE      |L46.148|
00008c  480c              LDR      r0,|L46.192|
00008e  6800              LDR      r0,[r0,#0]  ; time111
000090  2801              CMP      r0,#1
000092  dc01              BGT      |L46.152|
                  |L46.148|
000094  2001              MOVS     r0,#1
000096  e000              B        |L46.154|
                  |L46.152|
000098  2000              MOVS     r0,#0
                  |L46.154|
00009a  490f              LDR      r1,|L46.216|
00009c  7008              STRB     r0,[r1,#0]
;;;1512   			
;;;1513   			
;;;1514   		}while (!cond121);
00009e  4608              MOV      r0,r1
0000a0  7800              LDRB     r0,[r0,#0]  ; cond121
0000a2  2800              CMP      r0,#0
0000a4  d0ca              BEQ      |L46.60|
;;;1515   		clear();
0000a6  f7fffffe          BL       clear
;;;1516   		return uart_string_gsm;
0000aa  4801              LDR      r0,|L46.176|
;;;1517   
;;;1518   }
0000ac  bdf8              POP      {r3-r7,pc}
;;;1519   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L46.176|
                          DCD      uart_string_gsm
                  |L46.180|
                          DCD      qwe
                  |L46.184|
                          DCD      ||k2||
                  |L46.188|
                          DCD      0x0001869f
                  |L46.192|
                          DCD      time111
                  |L46.196|
                          DCD      0x000007d1
                  |L46.200|
                          DCD      timeout222
                  |L46.204|
                          DCD      cond122
                  |L46.208|
                          DCD      cond123
                  |L46.212|
                          DCD      cond124
                  |L46.216|
                          DCD      cond121

                          AREA ||i.send_message||, COMGROUP=send_message, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  send_message PROC
;;;2381   			
;;;2382   __inline	void send_message(char * data2)
000000  b538              PUSH     {r3-r5,lr}
;;;2383   	{memset(uart_string_gsm,0,5000);
000002  4604              MOV      r4,r0
000004  4929              LDR      r1,|L53.172|
000006  482a              LDR      r0,|L53.176|
000008  f7fffffe          BL       __aeabi_memclr
;;;2384   									memset(at_,0,100);
00000c  2164              MOVS     r1,#0x64
00000e  4829              LDR      r0,|L53.180|
000010  f7fffffe          BL       __aeabi_memclr
;;;2385   									sprintf(at_, "\nAT+CMGS=\"%s\"\r\n" ,num2);
000014  4a28              LDR      r2,|L53.184|
000016  4929              LDR      r1,|L53.188|
000018  4826              LDR      r0,|L53.180|
00001a  f7fffffe          BL       __2sprintf
;;;2386   									send_MSG(at_, ">", "ERROR\r\n" , "ERROR:",tmeout);	
00001e  4828              LDR      r0,|L53.192|
000020  6800              LDR      r0,[r0,#0]  ; tmeout
000022  4b28              LDR      r3,|L53.196|
000024  4a28              LDR      r2,|L53.200|
000026  4929              LDR      r1,|L53.204|
000028  9000              STR      r0,[sp,#0]
00002a  4822              LDR      r0,|L53.180|
00002c  f7fffffe          BL       send_MSG
;;;2387   									if( strstr(uart_string_gsm, ">"))
000030  4926              LDR      r1,|L53.204|
000032  481f              LDR      r0,|L53.176|
000034  f7fffffe          BL       strstr
000038  2800              CMP      r0,#0
00003a  d031              BEQ      |L53.160|
;;;2388   									{
;;;2389   										//
;;;2390   										
;;;2391   											for(k=0;k<strlen(data2);k++)
00003c  2000              MOVS     r0,#0
00003e  4924              LDR      r1,|L53.208|
000040  6008              STR      r0,[r1,#0]  ; k
000042  e00c              B        |L53.94|
                  |L53.68|
;;;2392   											{
;;;2393   												
;;;2394   												uart_putchar(UART1_BASE_PTR, data2[k]);
000044  4822              LDR      r0,|L53.208|
000046  6800              LDR      r0,[r0,#0]  ; k
000048  5c21              LDRB     r1,[r4,r0]
00004a  4822              LDR      r0,|L53.212|
00004c  f7fffffe          BL       uart_putchar
;;;2395   												//uart0_putchar(UART0_BASE_PTR, data2[k]);
;;;2396   												clear();
000050  f7fffffe          BL       clear
000054  481e              LDR      r0,|L53.208|
000056  6800              LDR      r0,[r0,#0]            ;2391  ; k
000058  1c40              ADDS     r0,r0,#1              ;2391
00005a  491d              LDR      r1,|L53.208|
00005c  6008              STR      r0,[r1,#0]            ;2391  ; k
                  |L53.94|
00005e  4620              MOV      r0,r4                 ;2391
000060  f7fffffe          BL       strlen
000064  491a              LDR      r1,|L53.208|
000066  6809              LDR      r1,[r1,#0]            ;2391  ; k
000068  4288              CMP      r0,r1                 ;2391
00006a  d8eb              BHI      |L53.68|
;;;2397   												
;;;2398   											}		
;;;2399   											uart_putchar(UART1_BASE_PTR, 0x1A);
00006c  211a              MOVS     r1,#0x1a
00006e  4819              LDR      r0,|L53.212|
000070  f7fffffe          BL       uart_putchar
;;;2400   											k2=0;									//string array counter for uart 1
000074  2000              MOVS     r0,#0
000076  4918              LDR      r1,|L53.216|
000078  6008              STR      r0,[r1,#0]  ; k2
;;;2401   											timeout=99999;						//timer counts to wait for characters in uart 1 									
00007a  4818              LDR      r0,|L53.220|
00007c  4918              LDR      r1,|L53.224|
00007e  6008              STR      r0,[r1,#0]  ; timeout
;;;2402   											while(!(strstr(uart_string_gsm,"+CMGS:")  ||  (timeout < 1)))
000080  e004              B        |L53.140|
                  |L53.130|
;;;2403   																{
;;;2404   																	timeout--;
000082  4817              LDR      r0,|L53.224|
000084  6800              LDR      r0,[r0,#0]  ; timeout
000086  1e40              SUBS     r0,r0,#1
000088  4915              LDR      r1,|L53.224|
00008a  6008              STR      r0,[r1,#0]  ; timeout
                  |L53.140|
00008c  4915              LDR      r1,|L53.228|
00008e  4808              LDR      r0,|L53.176|
000090  f7fffffe          BL       strstr
000094  2800              CMP      r0,#0                 ;2402
000096  d103              BNE      |L53.160|
000098  4811              LDR      r0,|L53.224|
00009a  6800              LDR      r0,[r0,#0]            ;2402  ; timeout
00009c  2801              CMP      r0,#1                 ;2402
00009e  daf0              BGE      |L53.130|
                  |L53.160|
;;;2405   //																	if(timeout % 4000 == 0)
;;;2406   //																	{
;;;2407   //																		uart0_putchar(UART0_BASE_PTR,'1');
;;;2408   //																		uart_putchar(UART1_BASE_PTR,0x1A);
;;;2409   //																	}
;;;2410   																}
;;;2411   							
;;;2412   									}
;;;2413   		
;;;2414   	memset(uart_string_gsm,0,5000);								
0000a0  4902              LDR      r1,|L53.172|
0000a2  4803              LDR      r0,|L53.176|
0000a4  f7fffffe          BL       __aeabi_memclr
;;;2415   	}
0000a8  bd38              POP      {r3-r5,pc}
;;;2416   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L53.172|
                          DCD      0x00001388
                  |L53.176|
                          DCD      uart_string_gsm
                  |L53.180|
                          DCD      at_
                  |L53.184|
                          DCD      num2
                  |L53.188|
                          DCD      ||.conststring||
                  |L53.192|
                          DCD      tmeout
                  |L53.196|
                          DCD      ||.conststring||+0x10
                  |L53.200|
                          DCD      ||.conststring||+0x18
                  |L53.204|
                          DCD      ||.conststring||+0x20
                  |L53.208|
                          DCD      k
                  |L53.212|
                          DCD      0x4006b000
                  |L53.216|
                          DCD      ||k2||
                  |L53.220|
                          DCD      0x0001869f
                  |L53.224|
                          DCD      timeout
                  |L53.228|
                          DCD      ||.conststring||+0x24

                          AREA ||i.parse_g||, COMGROUP=parse_g, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;1602   
;;;1603   __inline void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1604   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f0b              LDR      r7,[sp,#0x2c]
;;;1605   
;;;1606   		sz1=	strlen(str);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  493c              LDR      r1,|L60.260|
000014  6008              STR      r0,[r1,#0]  ; sz1
;;;1607   		sz2=  strlen(string);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       strlen
00001c  493a              LDR      r1,|L60.264|
00001e  6008              STR      r0,[r1,#0]  ; sz2
;;;1608   		memset(string,0,sz2);
000020  4608              MOV      r0,r1
000022  6801              LDR      r1,[r0,#0]  ; sz2
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_memclr
;;;1609   		for(i11=0,temp11=0;i11<sz1;i11++)
00002a  2000              MOVS     r0,#0
00002c  4937              LDR      r1,|L60.268|
00002e  6008              STR      r0,[r1,#0]  ; i11
000030  4937              LDR      r1,|L60.272|
000032  6008              STR      r0,[r1,#0]  ; temp11
000034  e01a              B        |L60.108|
                  |L60.54|
;;;1610   		{
;;;1611   		if(str[i11]==s)
000036  4835              LDR      r0,|L60.268|
000038  6800              LDR      r0,[r0,#0]  ; i11
00003a  5c21              LDRB     r1,[r4,r0]
00003c  980a              LDR      r0,[sp,#0x28]
00003e  4281              CMP      r1,r0
000040  d108              BNE      |L60.84|
;;;1612   			{temp11++;j11=i11;}
000042  4833              LDR      r0,|L60.272|
000044  6800              LDR      r0,[r0,#0]  ; temp11
000046  1c40              ADDS     r0,r0,#1
000048  4931              LDR      r1,|L60.272|
00004a  6008              STR      r0,[r1,#0]  ; temp11
00004c  482f              LDR      r0,|L60.268|
00004e  6800              LDR      r0,[r0,#0]  ; i11
000050  4930              LDR      r1,|L60.276|
000052  6008              STR      r0,[r1,#0]  ; j11
                  |L60.84|
;;;1613   		else{}
;;;1614   			
;;;1615   		if(temp11>=sec){i11=9900;}
000054  482e              LDR      r0,|L60.272|
000056  6800              LDR      r0,[r0,#0]  ; temp11
000058  42b0              CMP      r0,r6
00005a  db02              BLT      |L60.98|
00005c  482e              LDR      r0,|L60.280|
00005e  492b              LDR      r1,|L60.268|
000060  6008              STR      r0,[r1,#0]  ; i11
                  |L60.98|
000062  482a              LDR      r0,|L60.268|
000064  6800              LDR      r0,[r0,#0]            ;1609  ; i11
000066  1c40              ADDS     r0,r0,#1              ;1609
000068  4928              LDR      r1,|L60.268|
00006a  6008              STR      r0,[r1,#0]            ;1609  ; i11
                  |L60.108|
00006c  4827              LDR      r0,|L60.268|
00006e  6800              LDR      r0,[r0,#0]            ;1609  ; i11
000070  4924              LDR      r1,|L60.260|
000072  6809              LDR      r1,[r1,#0]            ;1609  ; sz1
000074  4288              CMP      r0,r1                 ;1609
000076  dbde              BLT      |L60.54|
;;;1616   		else{}	
;;;1617   		
;;;1618   		}	
;;;1619   		
;;;1620   		for(i11=0,temp11=0;i11<sz1;i11++)
000078  2000              MOVS     r0,#0
00007a  4924              LDR      r1,|L60.268|
00007c  6008              STR      r0,[r1,#0]  ; i11
00007e  4924              LDR      r1,|L60.272|
000080  6008              STR      r0,[r1,#0]  ; temp11
000082  e01a              B        |L60.186|
                  |L60.132|
;;;1621   		{
;;;1622   		if(str[i11]==f)
000084  4821              LDR      r0,|L60.268|
000086  6800              LDR      r0,[r0,#0]  ; i11
000088  5c21              LDRB     r1,[r4,r0]
00008a  9804              LDR      r0,[sp,#0x10]
00008c  4281              CMP      r1,r0
00008e  d108              BNE      |L60.162|
;;;1623   			{temp11++;l=i11;}										
000090  481f              LDR      r0,|L60.272|
000092  6800              LDR      r0,[r0,#0]  ; temp11
000094  1c40              ADDS     r0,r0,#1
000096  491e              LDR      r1,|L60.272|
000098  6008              STR      r0,[r1,#0]  ; temp11
00009a  481c              LDR      r0,|L60.268|
00009c  6800              LDR      r0,[r0,#0]  ; i11
00009e  491f              LDR      r1,|L60.284|
0000a0  6008              STR      r0,[r1,#0]  ; l
                  |L60.162|
;;;1624   		else{}
;;;1625   		if(temp11>=first){i11=9900;}else{}
0000a2  481b              LDR      r0,|L60.272|
0000a4  6800              LDR      r0,[r0,#0]  ; temp11
0000a6  42a8              CMP      r0,r5
0000a8  db02              BLT      |L60.176|
0000aa  481b              LDR      r0,|L60.280|
0000ac  4917              LDR      r1,|L60.268|
0000ae  6008              STR      r0,[r1,#0]  ; i11
                  |L60.176|
0000b0  4816              LDR      r0,|L60.268|
0000b2  6800              LDR      r0,[r0,#0]            ;1620  ; i11
0000b4  1c40              ADDS     r0,r0,#1              ;1620
0000b6  4915              LDR      r1,|L60.268|
0000b8  6008              STR      r0,[r1,#0]            ;1620  ; i11
                  |L60.186|
0000ba  4814              LDR      r0,|L60.268|
0000bc  6800              LDR      r0,[r0,#0]            ;1620  ; i11
0000be  4911              LDR      r1,|L60.260|
0000c0  6809              LDR      r1,[r1,#0]            ;1620  ; sz1
0000c2  4288              CMP      r0,r1                 ;1620
0000c4  dbde              BLT      |L60.132|
;;;1626   		}	
;;;1627   		for(i11=0;i11<(j11-l-1);i11++)
0000c6  2000              MOVS     r0,#0
0000c8  4910              LDR      r1,|L60.268|
0000ca  6008              STR      r0,[r1,#0]  ; i11
0000cc  e00e              B        |L60.236|
                  |L60.206|
;;;1628   		{
;;;1629   		string[i11] = str[l+i11+1];
0000ce  4813              LDR      r0,|L60.284|
0000d0  6800              LDR      r0,[r0,#0]  ; l
0000d2  490e              LDR      r1,|L60.268|
0000d4  6809              LDR      r1,[r1,#0]  ; i11
0000d6  1840              ADDS     r0,r0,r1
0000d8  1c40              ADDS     r0,r0,#1
0000da  5c20              LDRB     r0,[r4,r0]
0000dc  490b              LDR      r1,|L60.268|
0000de  6809              LDR      r1,[r1,#0]  ; i11
0000e0  5478              STRB     r0,[r7,r1]
0000e2  480a              LDR      r0,|L60.268|
0000e4  6800              LDR      r0,[r0,#0]            ;1627  ; i11
0000e6  1c40              ADDS     r0,r0,#1              ;1627
0000e8  4908              LDR      r1,|L60.268|
0000ea  6008              STR      r0,[r1,#0]            ;1627  ; i11
                  |L60.236|
0000ec  4809              LDR      r0,|L60.276|
0000ee  6800              LDR      r0,[r0,#0]            ;1627  ; j11
0000f0  490a              LDR      r1,|L60.284|
0000f2  6809              LDR      r1,[r1,#0]            ;1627  ; l
0000f4  1a40              SUBS     r0,r0,r1              ;1627
0000f6  1e40              SUBS     r0,r0,#1              ;1627
0000f8  4904              LDR      r1,|L60.268|
0000fa  6809              LDR      r1,[r1,#0]            ;1627  ; i11
0000fc  4288              CMP      r0,r1                 ;1627
0000fe  dce6              BGT      |L60.206|
;;;1630   		}			
;;;1631   	
;;;1632   
;;;1633   
;;;1634   }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
;;;1635   
                          ENDP

                  |L60.260|
                          DCD      ||sz1||
                  |L60.264|
                          DCD      ||sz2||
                  |L60.268|
                          DCD      i11
                  |L60.272|
                          DCD      temp11
                  |L60.276|
                          DCD      j11
                  |L60.280|
                          DCD      0x000026ac
                  |L60.284|
                          DCD      l

                          AREA ||i.ignstaton||, COMGROUP=ignstaton, CODE, READONLY, ALIGN=2

                  ignstaton PROC
;;;1270   	
;;;1271   __inline void ignstaton(){
000000  b508              PUSH     {r3,lr}
;;;1272   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L67.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L67.64|
000008  4a0e              LDR      r2,|L67.68|
00000a  490f              LDR      r1,|L67.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L67.76|
000010  f7fffffe          BL       send_GSM
;;;1273   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L67.64|
000018  4a0a              LDR      r2,|L67.68|
00001a  490d              LDR      r1,|L67.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L67.84|
000020  f7fffffe          BL       send_GSM
;;;1274   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1275   send_GSM("\nION\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L67.64|
00002e  4a05              LDR      r2,|L67.68|
000030  4909              LDR      r1,|L67.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L67.92|
000036  f7fffffe          BL       send_GSM
;;;1276   
;;;1277   
;;;1278   }	
00003a  bd08              POP      {r3,pc}
;;;1279   __inline void ignstatoff(){
                          ENDP

                  |L67.60|
                          DCD      tmeout
                  |L67.64|
                          DCD      ||.conststring||+0x10
                  |L67.68|
                          DCD      ||.conststring||+0x18
                  |L67.72|
                          DCD      ||.conststring||+0x2c
                  |L67.76|
                          DCD      ||.conststring||+0x30
                  |L67.80|
                          DCD      ||.conststring||+0x20
                  |L67.84|
                          DCD      ||.conststring||+0x4c
                  |L67.88|
                          DCD      ||.conststring||+0x70
                  |L67.92|
                          DCD      ||.conststring||+0x78

                          AREA ||i.save_ip_port||, COMGROUP=save_ip_port, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_ip_port PROC
;;;1231   	
;;;1232   __inline void save_ip_port()
000000  b538              PUSH     {r3-r5,lr}
;;;1233   {
;;;1234   	
;;;1235   send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4844              LDR      r0,|L74.276|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b44              LDR      r3,|L74.280|
000008  4a44              LDR      r2,|L74.284|
00000a  4945              LDR      r1,|L74.288|
00000c  9000              STR      r0,[sp,#0]
00000e  4845              LDR      r0,|L74.292|
000010  f7fffffe          BL       send_GSM
;;;1236   	
;;;1237   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4844              LDR      r0,|L74.296|
000018  f7fffffe          BL       __aeabi_memclr
;;;1238   	sprintf(at_,"\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",strlen(ip)+12+strlen(port));	
00001c  4843              LDR      r0,|L74.300|
00001e  f7fffffe          BL       strlen
000022  4605              MOV      r5,r0
000024  350c              ADDS     r5,r5,#0xc
000026  4842              LDR      r0,|L74.304|
000028  f7fffffe          BL       strlen
00002c  182c              ADDS     r4,r5,r0
00002e  4622              MOV      r2,r4
000030  4940              LDR      r1,|L74.308|
000032  483d              LDR      r0,|L74.296|
000034  f7fffffe          BL       __2sprintf
;;;1239   send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000038  200a              MOVS     r0,#0xa
00003a  4b37              LDR      r3,|L74.280|
00003c  4a37              LDR      r2,|L74.284|
00003e  493e              LDR      r1,|L74.312|
000040  9000              STR      r0,[sp,#0]
000042  4839              LDR      r0,|L74.296|
000044  f7fffffe          BL       send_GSM
;;;1240   	clear();
000048  f7fffffe          BL       clear
;;;1241   
;;;1242   	
;;;1243   	send_modem("|IP|");
00004c  483b              LDR      r0,|L74.316|
00004e  f7fffffe          BL       send_modem
;;;1244   		for(k=0;k<strlen(ip);k++)
000052  2000              MOVS     r0,#0
000054  493a              LDR      r1,|L74.320|
000056  6008              STR      r0,[r1,#0]  ; k
000058  e00b              B        |L74.114|
                  |L74.90|
;;;1245   		{
;;;1246   			uart_putchar(UART1_BASE_PTR, ip[k]);// uart0_putchar(UART0_BASE_PTR, ip[k]);//clear();
00005a  4834              LDR      r0,|L74.300|
00005c  4a38              LDR      r2,|L74.320|
00005e  6812              LDR      r2,[r2,#0]  ; k
000060  5c81              LDRB     r1,[r0,r2]
000062  4838              LDR      r0,|L74.324|
000064  f7fffffe          BL       uart_putchar
000068  4835              LDR      r0,|L74.320|
00006a  6800              LDR      r0,[r0,#0]            ;1244  ; k
00006c  1c40              ADDS     r0,r0,#1              ;1244
00006e  4934              LDR      r1,|L74.320|
000070  6008              STR      r0,[r1,#0]            ;1244  ; k
                  |L74.114|
000072  482e              LDR      r0,|L74.300|
000074  f7fffffe          BL       strlen
000078  4931              LDR      r1,|L74.320|
00007a  6809              LDR      r1,[r1,#0]            ;1244  ; k
00007c  4288              CMP      r0,r1                 ;1244
00007e  d8ec              BHI      |L74.90|
;;;1247   		}	
;;;1248   	send_modem("|PORT|");			
000080  4831              LDR      r0,|L74.328|
000082  f7fffffe          BL       send_modem
;;;1249   		for(k=0;k<strlen(port);k++)
000086  2000              MOVS     r0,#0
000088  492d              LDR      r1,|L74.320|
00008a  6008              STR      r0,[r1,#0]  ; k
00008c  e00b              B        |L74.166|
                  |L74.142|
;;;1250   		{
;;;1251   			uart_putchar(UART1_BASE_PTR, port[k]);// uart0_putchar(UART0_BASE_PTR, port[k]);//clear();
00008e  4828              LDR      r0,|L74.304|
000090  4a2b              LDR      r2,|L74.320|
000092  6812              LDR      r2,[r2,#0]  ; k
000094  5c81              LDRB     r1,[r0,r2]
000096  482b              LDR      r0,|L74.324|
000098  f7fffffe          BL       uart_putchar
00009c  4828              LDR      r0,|L74.320|
00009e  6800              LDR      r0,[r0,#0]            ;1249  ; k
0000a0  1c40              ADDS     r0,r0,#1              ;1249
0000a2  4927              LDR      r1,|L74.320|
0000a4  6008              STR      r0,[r1,#0]            ;1249  ; k
                  |L74.166|
0000a6  4822              LDR      r0,|L74.304|
0000a8  f7fffffe          BL       strlen
0000ac  4924              LDR      r1,|L74.320|
0000ae  6809              LDR      r1,[r1,#0]            ;1249  ; k
0000b0  4288              CMP      r0,r1                 ;1249
0000b2  d8ec              BHI      |L74.142|
;;;1252   		}	
;;;1253   send_modem("|");			
0000b4  4825              LDR      r0,|L74.332|
0000b6  f7fffffe          BL       send_modem
;;;1254   									//memset(data,0,1000);
;;;1255   									k2=0;									//string array counter for uart 1
0000ba  2000              MOVS     r0,#0
0000bc  4924              LDR      r1,|L74.336|
0000be  6008              STR      r0,[r1,#0]  ; k2
;;;1256   									time=19999;						//timer counts to wait for characters in uart 1 									
0000c0  4824              LDR      r0,|L74.340|
0000c2  4925              LDR      r1,|L74.344|
0000c4  6008              STR      r0,[r1,#0]  ; time
;;;1257   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
0000c6  e014              B        |L74.242|
                  |L74.200|
;;;1258   									{
;;;1259   									time--;
0000c8  4823              LDR      r0,|L74.344|
0000ca  6800              LDR      r0,[r0,#0]  ; time
0000cc  1e40              SUBS     r0,r0,#1
0000ce  4922              LDR      r1,|L74.344|
0000d0  6008              STR      r0,[r1,#0]  ; time
;;;1260   									if(time % 2000 == 0)
0000d2  217d              MOVS     r1,#0x7d
0000d4  0109              LSLS     r1,r1,#4
0000d6  4820              LDR      r0,|L74.344|
0000d8  6800              LDR      r0,[r0,#0]  ; time
0000da  f7fffffe          BL       __aeabi_idivmod
0000de  2900              CMP      r1,#0
0000e0  d107              BNE      |L74.242|
;;;1261   										{
;;;1262   											uart0_putchar(UART0_BASE_PTR,'1');
0000e2  2131              MOVS     r1,#0x31
0000e4  481d              LDR      r0,|L74.348|
0000e6  f7fffffe          BL       uart0_putchar
;;;1263   											uart_putchar(UART1_BASE_PTR,'\n');
0000ea  210a              MOVS     r1,#0xa
0000ec  4815              LDR      r0,|L74.324|
0000ee  f7fffffe          BL       uart_putchar
                  |L74.242|
0000f2  491b              LDR      r1,|L74.352|
0000f4  481b              LDR      r0,|L74.356|
0000f6  f7fffffe          BL       strstr
0000fa  2800              CMP      r0,#0                 ;1257
0000fc  d109              BNE      |L74.274|
0000fe  4816              LDR      r0,|L74.344|
000100  6800              LDR      r0,[r0,#0]            ;1257  ; time
000102  2801              CMP      r0,#1                 ;1257
000104  db05              BLT      |L74.274|
000106  4918              LDR      r1,|L74.360|
000108  4816              LDR      r0,|L74.356|
00010a  f7fffffe          BL       strstr
00010e  2800              CMP      r0,#0                 ;1257
000110  d0da              BEQ      |L74.200|
                  |L74.274|
;;;1264   										}
;;;1265   	
;;;1266   									}
;;;1267   
;;;1268   	
;;;1269   }	
000112  bd38              POP      {r3-r5,pc}
;;;1270   	
                          ENDP

                  |L74.276|
                          DCD      tmeout
                  |L74.280|
                          DCD      ||.conststring||+0x10
                  |L74.284|
                          DCD      ||.conststring||+0x18
                  |L74.288|
                          DCD      ||.conststring||+0x2c
                  |L74.292|
                          DCD      ||.conststring||+0x84
                  |L74.296|
                          DCD      at_
                  |L74.300|
                          DCD      ||ip||
                  |L74.304|
                          DCD      port
                  |L74.308|
                          DCD      ||.conststring||+0xa4
                  |L74.312|
                          DCD      ||.conststring||+0x20
                  |L74.316|
                          DCD      ||.conststring||+0xcc
                  |L74.320|
                          DCD      k
                  |L74.324|
                          DCD      0x4006b000
                  |L74.328|
                          DCD      ||.conststring||+0xd4
                  |L74.332|
                          DCD      ||.conststring||+0xdc
                  |L74.336|
                          DCD      ||k2||
                  |L74.340|
                          DCD      0x00004e1f
                  |L74.344|
                          DCD      time
                  |L74.348|
                          DCD      0x4006a000
                  |L74.352|
                          DCD      ||.conststring||+0x70
                  |L74.356|
                          DCD      uart_string_gsm
                  |L74.360|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.stof||, COMGROUP=stof, CODE, READONLY, ALIGN=2

                  stof PROC
;;;1155   
;;;1156   __inline float stof(const char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;1157   {rez=0;fact=1;
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  4925              LDR      r1,|L81.156|
000008  6008              STR      r0,[r1,#0]  ; rez
00000a  207f              MOVS     r0,#0x7f
00000c  05c0              LSLS     r0,r0,#23
00000e  4924              LDR      r1,|L81.160|
000010  6008              STR      r0,[r1,#0]  ; fact
;;;1158   
;;;1159     if (*s == '-'){
000012  7820              LDRB     r0,[r4,#0]
000014  282d              CMP      r0,#0x2d
000016  d102              BNE      |L81.30|
;;;1160       s++;
000018  1c64              ADDS     r4,r4,#1
;;;1161       fact = -1;
00001a  4822              LDR      r0,|L81.164|
00001c  6008              STR      r0,[r1,#0]  ; fact
                  |L81.30|
;;;1162     };
;;;1163     for (point_seen = 0; *s; s++){
00001e  2000              MOVS     r0,#0
000020  4921              LDR      r1,|L81.168|
000022  6008              STR      r0,[r1,#0]  ; point_seen
000024  e02f              B        |L81.134|
                  |L81.38|
;;;1164       if (*s == '.'){
000026  7820              LDRB     r0,[r4,#0]
000028  282e              CMP      r0,#0x2e
00002a  d103              BNE      |L81.52|
;;;1165         point_seen = 1; 
00002c  2001              MOVS     r0,#1
00002e  491e              LDR      r1,|L81.168|
000030  6008              STR      r0,[r1,#0]  ; point_seen
;;;1166         continue;
000032  e027              B        |L81.132|
                  |L81.52|
;;;1167       };
;;;1168       d = *s - '0';
000034  7820              LDRB     r0,[r4,#0]
000036  3830              SUBS     r0,r0,#0x30
000038  491c              LDR      r1,|L81.172|
00003a  6008              STR      r0,[r1,#0]  ; d
;;;1169       if (d >= 0 && d <= 9){
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]  ; d
000040  2800              CMP      r0,#0
000042  db1e              BLT      |L81.130|
000044  4608              MOV      r0,r1
000046  6800              LDR      r0,[r0,#0]  ; d
000048  2809              CMP      r0,#9
00004a  dc1a              BGT      |L81.130|
;;;1170         if (point_seen) fact /= 10.0f;
00004c  4816              LDR      r0,|L81.168|
00004e  6800              LDR      r0,[r0,#0]  ; point_seen
000050  2800              CMP      r0,#0
000052  d006              BEQ      |L81.98|
000054  4916              LDR      r1,|L81.176|
000056  4812              LDR      r0,|L81.160|
000058  6800              LDR      r0,[r0,#0]  ; fact
00005a  f7fffffe          BL       __aeabi_fdiv
00005e  4910              LDR      r1,|L81.160|
000060  6008              STR      r0,[r1,#0]  ; fact
                  |L81.98|
;;;1171         rez = rez * 10.0f + (float)d;
000062  4812              LDR      r0,|L81.172|
000064  6800              LDR      r0,[r0,#0]  ; d
000066  f7fffffe          BL       __aeabi_i2f
00006a  4605              MOV      r5,r0
00006c  4910              LDR      r1,|L81.176|
00006e  480b              LDR      r0,|L81.156|
000070  6800              LDR      r0,[r0,#0]  ; rez
000072  f7fffffe          BL       __aeabi_fmul
000076  4606              MOV      r6,r0
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       __aeabi_fadd
00007e  4907              LDR      r1,|L81.156|
000080  6008              STR      r0,[r1,#0]  ; rez
                  |L81.130|
000082  bf00              NOP                            ;1166
                  |L81.132|
000084  1c64              ADDS     r4,r4,#1              ;1163
                  |L81.134|
000086  7820              LDRB     r0,[r4,#0]            ;1163
000088  2800              CMP      r0,#0                 ;1163
00008a  d1cc              BNE      |L81.38|
;;;1172       };
;;;1173     };
;;;1174     return rez * fact;
00008c  4804              LDR      r0,|L81.160|
00008e  6801              LDR      r1,[r0,#0]  ; fact
000090  4802              LDR      r0,|L81.156|
000092  6800              LDR      r0,[r0,#0]  ; rez
000094  f7fffffe          BL       __aeabi_fmul
;;;1175   };
000098  bd70              POP      {r4-r6,pc}
;;;1176   
                          ENDP

00009a  0000              DCW      0x0000
                  |L81.156|
                          DCD      ||rez||
                  |L81.160|
                          DCD      fact
                  |L81.164|
                          DCD      0xbf800000
                  |L81.168|
                          DCD      point_seen
                  |L81.172|
                          DCD      d
                  |L81.176|
                          DCD      0x41200000

                          AREA ||i.get_gpsdata||, COMGROUP=get_gpsdata, CODE, READONLY, ALIGN=2

                  get_gpsdata PROC
;;;1365   
;;;1366   __inline void get_gpsdata()
000000  b510              PUSH     {r4,lr}
;;;1367   {
;;;1368   						clear2();
000002  f7fffffe          BL       clear2
;;;1369   						memset(uart_string_gps,0,3000);memset(gga,0,100);memset(rmc,0,100);			
000006  4952              LDR      r1,|L88.336|
000008  4852              LDR      r0,|L88.340|
00000a  f7fffffe          BL       __aeabi_memclr
00000e  2164              MOVS     r1,#0x64
000010  4851              LDR      r0,|L88.344|
000012  f7fffffe          BL       __aeabi_memclr
000016  2164              MOVS     r1,#0x64
000018  4850              LDR      r0,|L88.348|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1370   						i=0;tout2=0;
00001e  2000              MOVS     r0,#0
000020  494f              LDR      r1,|L88.352|
000022  6008              STR      r0,[r1,#0]  ; i
000024  494f              LDR      r1,|L88.356|
000026  6008              STR      r0,[r1,#0]  ; tout2
;;;1371   //						t22=9999999;
;;;1372   do{
000028  bf00              NOP      
                  |L88.42|
;;;1373   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00002a  484f              LDR      r0,|L88.360|
00002c  7900              LDRB     r0,[r0,#4]
00002e  2120              MOVS     r1,#0x20
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d00a              BEQ      |L88.76|
;;;1374   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000036  484c              LDR      r0,|L88.360|
000038  79c0              LDRB     r0,[r0,#7]
00003a  4946              LDR      r1,|L88.340|
00003c  4a48              LDR      r2,|L88.352|
00003e  6812              LDR      r2,[r2,#0]  ; i
000040  5488              STRB     r0,[r1,r2]
;;;1375   				i++;
000042  4847              LDR      r0,|L88.352|
000044  6800              LDR      r0,[r0,#0]  ; i
000046  1c40              ADDS     r0,r0,#1
000048  4945              LDR      r1,|L88.352|
00004a  6008              STR      r0,[r1,#0]  ; i
                  |L88.76|
;;;1376   	}
;;;1377   	}while(!   (strstr(uart_string_gps,"RMC")       ||  (tout2>1)  )  );
00004c  4947              LDR      r1,|L88.364|
00004e  4841              LDR      r0,|L88.340|
000050  f7fffffe          BL       strstr
000054  2800              CMP      r0,#0
000056  d103              BNE      |L88.96|
000058  4842              LDR      r0,|L88.356|
00005a  6800              LDR      r0,[r0,#0]  ; tout2
00005c  2801              CMP      r0,#1
00005e  dde4              BLE      |L88.42|
                  |L88.96|
;;;1378   i=0;tout2=0;
000060  2000              MOVS     r0,#0
000062  493f              LDR      r1,|L88.352|
000064  6008              STR      r0,[r1,#0]  ; i
000066  493f              LDR      r1,|L88.356|
000068  6008              STR      r0,[r1,#0]  ; tout2
;;;1379   do{
00006a  bf00              NOP      
                  |L88.108|
;;;1380   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00006c  483e              LDR      r0,|L88.360|
00006e  7900              LDRB     r0,[r0,#4]
000070  2120              MOVS     r1,#0x20
000072  4008              ANDS     r0,r0,r1
000074  2800              CMP      r0,#0
000076  d00a              BEQ      |L88.142|
;;;1381   	{		rmc[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000078  483b              LDR      r0,|L88.360|
00007a  79c1              LDRB     r1,[r0,#7]
00007c  4837              LDR      r0,|L88.348|
00007e  4a38              LDR      r2,|L88.352|
000080  6812              LDR      r2,[r2,#0]  ; i
000082  5481              STRB     r1,[r0,r2]
;;;1382   				i++;
000084  4836              LDR      r0,|L88.352|
000086  6800              LDR      r0,[r0,#0]  ; i
000088  1c40              ADDS     r0,r0,#1
00008a  4935              LDR      r1,|L88.352|
00008c  6008              STR      r0,[r1,#0]  ; i
                  |L88.142|
;;;1383   	}
;;;1384   }while(     !( mystrstr(rmc,'*')    ||  tout2>1) );
00008e  212a              MOVS     r1,#0x2a
000090  4832              LDR      r0,|L88.348|
000092  f7fffffe          BL       mystrstr
000096  2800              CMP      r0,#0
000098  d103              BNE      |L88.162|
00009a  4832              LDR      r0,|L88.356|
00009c  6800              LDR      r0,[r0,#0]  ; tout2
00009e  2801              CMP      r0,#1
0000a0  dde4              BLE      |L88.108|
                  |L88.162|
;;;1385   memset(uart_string_gps,0,3000);
0000a2  492b              LDR      r1,|L88.336|
0000a4  482b              LDR      r0,|L88.340|
0000a6  f7fffffe          BL       __aeabi_memclr
;;;1386   i=0;tout2=0;
0000aa  2000              MOVS     r0,#0
0000ac  492c              LDR      r1,|L88.352|
0000ae  6008              STR      r0,[r1,#0]  ; i
0000b0  492c              LDR      r1,|L88.356|
0000b2  6008              STR      r0,[r1,#0]  ; tout2
;;;1387   do{
0000b4  bf00              NOP      
                  |L88.182|
;;;1388   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000b6  482c              LDR      r0,|L88.360|
0000b8  7900              LDRB     r0,[r0,#4]
0000ba  2120              MOVS     r1,#0x20
0000bc  4008              ANDS     r0,r0,r1
0000be  2800              CMP      r0,#0
0000c0  d00a              BEQ      |L88.216|
;;;1389   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
0000c2  4829              LDR      r0,|L88.360|
0000c4  79c0              LDRB     r0,[r0,#7]
0000c6  4923              LDR      r1,|L88.340|
0000c8  4a25              LDR      r2,|L88.352|
0000ca  6812              LDR      r2,[r2,#0]  ; i
0000cc  5488              STRB     r0,[r1,r2]
;;;1390   				i++;
0000ce  4824              LDR      r0,|L88.352|
0000d0  6800              LDR      r0,[r0,#0]  ; i
0000d2  1c40              ADDS     r0,r0,#1
0000d4  4922              LDR      r1,|L88.352|
0000d6  6008              STR      r0,[r1,#0]  ; i
                  |L88.216|
;;;1391   	}
;;;1392   }while(!  (strstr(uart_string_gps,"GGA")      ||  (tout2>1) )  );
0000d8  4925              LDR      r1,|L88.368|
0000da  481e              LDR      r0,|L88.340|
0000dc  f7fffffe          BL       strstr
0000e0  2800              CMP      r0,#0
0000e2  d103              BNE      |L88.236|
0000e4  481f              LDR      r0,|L88.356|
0000e6  6800              LDR      r0,[r0,#0]  ; tout2
0000e8  2801              CMP      r0,#1
0000ea  dde4              BLE      |L88.182|
                  |L88.236|
;;;1393   i=0;tout2=0;
0000ec  2000              MOVS     r0,#0
0000ee  491c              LDR      r1,|L88.352|
0000f0  6008              STR      r0,[r1,#0]  ; i
0000f2  491c              LDR      r1,|L88.356|
0000f4  6008              STR      r0,[r1,#0]  ; tout2
;;;1394   do{
0000f6  bf00              NOP      
                  |L88.248|
;;;1395   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000f8  481b              LDR      r0,|L88.360|
0000fa  7900              LDRB     r0,[r0,#4]
0000fc  2120              MOVS     r1,#0x20
0000fe  4008              ANDS     r0,r0,r1
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L88.282|
;;;1396   	{		gga[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000104  4818              LDR      r0,|L88.360|
000106  79c1              LDRB     r1,[r0,#7]
000108  4813              LDR      r0,|L88.344|
00010a  4a15              LDR      r2,|L88.352|
00010c  6812              LDR      r2,[r2,#0]  ; i
00010e  5481              STRB     r1,[r0,r2]
;;;1397   				i++;
000110  4813              LDR      r0,|L88.352|
000112  6800              LDR      r0,[r0,#0]  ; i
000114  1c40              ADDS     r0,r0,#1
000116  4912              LDR      r1,|L88.352|
000118  6008              STR      r0,[r1,#0]  ; i
                  |L88.282|
;;;1398   	}
;;;1399   }while(!(mystrstr(gga,'*')  ||  (tout2>1) ));
00011a  212a              MOVS     r1,#0x2a
00011c  480e              LDR      r0,|L88.344|
00011e  f7fffffe          BL       mystrstr
000122  2800              CMP      r0,#0
000124  d103              BNE      |L88.302|
000126  480f              LDR      r0,|L88.356|
000128  6800              LDR      r0,[r0,#0]  ; tout2
00012a  2801              CMP      r0,#1
00012c  dde4              BLE      |L88.248|
                  |L88.302|
;;;1400   
;;;1401   clear2();
00012e  f7fffffe          BL       clear2
;;;1402   
;;;1403   		
;;;1404   
;;;1405   stateCount++; 
000132  4810              LDR      r0,|L88.372|
000134  7800              LDRB     r0,[r0,#0]  ; stateCount
000136  1c40              ADDS     r0,r0,#1
000138  490e              LDR      r1,|L88.372|
00013a  7008              STRB     r0,[r1,#0]
;;;1406   if(stateCount>5){stateCount =0;}
00013c  4608              MOV      r0,r1
00013e  7800              LDRB     r0,[r0,#0]  ; stateCount
000140  2805              CMP      r0,#5
000142  dd01              BLE      |L88.328|
000144  2000              MOVS     r0,#0
000146  7008              STRB     r0,[r1,#0]
                  |L88.328|
;;;1407   LED_state2();					
000148  f7fffffe          BL       LED_state2
;;;1408   }
00014c  bd10              POP      {r4,pc}
;;;1409   	
                          ENDP

00014e  0000              DCW      0x0000
                  |L88.336|
                          DCD      0x00000bb8
                  |L88.340|
                          DCD      uart_string_gps
                  |L88.344|
                          DCD      gga
                  |L88.348|
                          DCD      ||rmc||
                  |L88.352|
                          DCD      i
                  |L88.356|
                          DCD      tout2
                  |L88.360|
                          DCD      0x4006c000
                  |L88.364|
                          DCD      ||.conststring||+0xe8
                  |L88.368|
                          DCD      ||.conststring||+0xec
                  |L88.372|
                          DCD      stateCount

                          AREA ||i.myAtoi||, COMGROUP=myAtoi, CODE, READONLY, ALIGN=2

                  myAtoi PROC
;;;1143   
;;;1144   __inline int myAtoi(char *str)
000000  4601              MOV      r1,r0
;;;1145   {res=0;
000002  2000              MOVS     r0,#0
000004  4a0e              LDR      r2,|L95.64|
000006  6010              STR      r0,[r2,#0]  ; res
;;;1146       // Initialize result
;;;1147   
;;;1148       // Iterate through all characters of input string and update result
;;;1149       for (iz = 0; str[iz] != '\0'; ++iz)
000008  4a0e              LDR      r2,|L95.68|
00000a  6010              STR      r0,[r2,#0]  ; iz
00000c  e00f              B        |L95.46|
                  |L95.14|
;;;1150           res = res*10 + str[iz] - '0';
00000e  480c              LDR      r0,|L95.64|
000010  6800              LDR      r0,[r0,#0]  ; res
000012  220a              MOVS     r2,#0xa
000014  4350              MULS     r0,r2,r0
000016  4a0b              LDR      r2,|L95.68|
000018  6812              LDR      r2,[r2,#0]  ; iz
00001a  5c8a              LDRB     r2,[r1,r2]
00001c  1880              ADDS     r0,r0,r2
00001e  3830              SUBS     r0,r0,#0x30
000020  4a07              LDR      r2,|L95.64|
000022  6010              STR      r0,[r2,#0]  ; res
000024  4807              LDR      r0,|L95.68|
000026  6800              LDR      r0,[r0,#0]            ;1149  ; iz
000028  1c40              ADDS     r0,r0,#1              ;1149
00002a  4a06              LDR      r2,|L95.68|
00002c  6010              STR      r0,[r2,#0]            ;1149  ; iz
                  |L95.46|
00002e  4805              LDR      r0,|L95.68|
000030  6800              LDR      r0,[r0,#0]            ;1149  ; iz
000032  5c08              LDRB     r0,[r1,r0]            ;1149
000034  2800              CMP      r0,#0                 ;1149
000036  d1ea              BNE      |L95.14|
;;;1151   
;;;1152       // return result.
;;;1153       return res;
000038  4801              LDR      r0,|L95.64|
00003a  6800              LDR      r0,[r0,#0]  ; res
;;;1154   }
00003c  4770              BX       lr
;;;1155   
                          ENDP

00003e  0000              DCW      0x0000
                  |L95.64|
                          DCD      ||res||
                  |L95.68|
                          DCD      ||iz||

                          AREA ||i.adc_read||, COMGROUP=adc_read, CODE, READONLY, ALIGN=2

                  adc_read PROC
;;;32     
;;;33     __inline void adc_read(uint8_t channel)
000000  b510              PUSH     {r4,lr}
;;;34     {
000002  4604              MOV      r4,r0
;;;35     	adcin=0;fuel=0;adcsample=0;
000004  2000              MOVS     r0,#0
000006  4922              LDR      r1,|L102.144|
000008  6008              STR      r0,[r1,#0]  ; adcin
00000a  4922              LDR      r1,|L102.148|
00000c  6008              STR      r0,[r1,#0]  ; fuel
00000e  4922              LDR      r1,|L102.152|
000010  6008              STR      r0,[r1,#0]  ; adcsample
;;;36     for(e=0;e<500;){
000012  4922              LDR      r1,|L102.156|
000014  6008              STR      r0,[r1,#0]  ; e
000016  e02c              B        |L102.114|
                  |L102.24|
;;;37     	
;;;38     ADC0->SC1[0] = !ADC_SC1_AIEN_MASK | ADC_SC1_DIFF_MASK | ADC_SC1_ADCH(channel) ;
000018  06e0              LSLS     r0,r4,#27
00001a  0ec0              LSRS     r0,r0,#27
00001c  2120              MOVS     r1,#0x20
00001e  4308              ORRS     r0,r0,r1
000020  491f              LDR      r1,|L102.160|
000022  6008              STR      r0,[r1,#0]
;;;39     while(ADC0_SC2 & ADC_SC2_ADACT_MASK); //Conversion in progress
000024  bf00              NOP      
                  |L102.38|
000026  481e              LDR      r0,|L102.160|
000028  6a00              LDR      r0,[r0,#0x20]
00002a  2180              MOVS     r1,#0x80
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d1f9              BNE      |L102.38|
;;;40     while(!(ADC0_SC1A & ADC_SC1_COCO_MASK)); //Wait until conversion complete
000032  bf00              NOP      
                  |L102.52|
000034  481a              LDR      r0,|L102.160|
000036  6800              LDR      r0,[r0,#0]
000038  2180              MOVS     r1,#0x80
00003a  4008              ANDS     r0,r0,r1
00003c  2800              CMP      r0,#0
00003e  d0f9              BEQ      |L102.52|
;;;41     adcin = ADC0_RA;
000040  4817              LDR      r0,|L102.160|
000042  6900              LDR      r0,[r0,#0x10]
000044  4912              LDR      r1,|L102.144|
000046  6008              STR      r0,[r1,#0]  ; adcin
;;;42     
;;;43     
;;;44     		if(adcin>40000){adcin=0;}
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]  ; adcin
00004c  4915              LDR      r1,|L102.164|
00004e  4288              CMP      r0,r1
000050  dd03              BLE      |L102.90|
000052  2000              MOVS     r0,#0
000054  490e              LDR      r1,|L102.144|
000056  6008              STR      r0,[r1,#0]  ; adcin
000058  e006              B        |L102.104|
                  |L102.90|
;;;45     			else{
;;;46     			adcsample+=adcin;
00005a  480f              LDR      r0,|L102.152|
00005c  6800              LDR      r0,[r0,#0]  ; adcsample
00005e  490c              LDR      r1,|L102.144|
000060  6809              LDR      r1,[r1,#0]  ; adcin
000062  1840              ADDS     r0,r0,r1
000064  490c              LDR      r1,|L102.152|
000066  6008              STR      r0,[r1,#0]  ; adcsample
                  |L102.104|
;;;47     			}
;;;48     			e++;
000068  480c              LDR      r0,|L102.156|
00006a  6800              LDR      r0,[r0,#0]  ; e
00006c  1c40              ADDS     r0,r0,#1
00006e  490b              LDR      r1,|L102.156|
000070  6008              STR      r0,[r1,#0]  ; e
                  |L102.114|
000072  480a              LDR      r0,|L102.156|
000074  6800              LDR      r0,[r0,#0]            ;36  ; e
000076  21ff              MOVS     r1,#0xff              ;36
000078  31f5              ADDS     r1,r1,#0xf5           ;36
00007a  4288              CMP      r0,r1                 ;36
00007c  dbcc              BLT      |L102.24|
;;;49     	}
;;;50     fuel=adcsample/5000;	
00007e  490a              LDR      r1,|L102.168|
000080  4805              LDR      r0,|L102.152|
000082  6800              LDR      r0,[r0,#0]  ; adcsample
000084  f7fffffe          BL       __aeabi_idivmod
000088  4902              LDR      r1,|L102.148|
00008a  6008              STR      r0,[r1,#0]  ; fuel
;;;51     
;;;52     }
00008c  bd10              POP      {r4,pc}
;;;53     	
                          ENDP

00008e  0000              DCW      0x0000
                  |L102.144|
                          DCD      adcin
                  |L102.148|
                          DCD      fuel
                  |L102.152|
                          DCD      adcsample
                  |L102.156|
                          DCD      e
                  |L102.160|
                          DCD      0x4003b000
                  |L102.164|
                          DCD      0x00009c40
                  |L102.168|
                          DCD      0x00001388

                          AREA ||i.GPS_COLLECT||, COMGROUP=GPS_COLLECT, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT PROC
;;;1178   
;;;1179   __inline void GPS_COLLECT()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1180   {imeiinc=0;
000002  2000              MOVS     r0,#0
000004  49d2              LDR      r1,|L109.848|
000006  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1181   delay(200);
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       delay
;;;1182   clear();
00000e  f7fffffe          BL       clear
;;;1183   //adc_read(8);							
;;;1184   //memset(fuelstr,0,5);
;;;1185   //sprintf(fuelstr,"%d,",fuel);	
;;;1186   	
;;;1187   memset(imei,0,20);
000012  2114              MOVS     r1,#0x14
000014  48cf              LDR      r0,|L109.852|
000016  f7fffffe          BL       __aeabi_memclr
;;;1188   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
00001a  200a              MOVS     r0,#0xa
00001c  4bce              LDR      r3,|L109.856|
00001e  4acf              LDR      r2,|L109.860|
000020  49cf              LDR      r1,|L109.864|
000022  9000              STR      r0,[sp,#0]
000024  48cf              LDR      r0,|L109.868|
000026  f7fffffe          BL       send_GSM
;;;1189   for(i=0;i<strlen(uart_string_gsm);i++){
00002a  2000              MOVS     r0,#0
00002c  49ce              LDR      r1,|L109.872|
00002e  6008              STR      r0,[r1,#0]  ; i
000030  e01d              B        |L109.110|
                  |L109.50|
;;;1190   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
000032  48ce              LDR      r0,|L109.876|
000034  49cc              LDR      r1,|L109.872|
000036  6809              LDR      r1,[r1,#0]  ; i
000038  5c40              LDRB     r0,[r0,r1]
00003a  282f              CMP      r0,#0x2f
00003c  dd12              BLE      |L109.100|
00003e  48cb              LDR      r0,|L109.876|
000040  49c9              LDR      r1,|L109.872|
000042  6809              LDR      r1,[r1,#0]  ; i
000044  5c40              LDRB     r0,[r0,r1]
000046  283a              CMP      r0,#0x3a
000048  da0c              BGE      |L109.100|
;;;1191   			imei[imeiinc] = uart_string_gsm[i];
00004a  48c8              LDR      r0,|L109.876|
00004c  49c6              LDR      r1,|L109.872|
00004e  6809              LDR      r1,[r1,#0]  ; i
000050  5c41              LDRB     r1,[r0,r1]
000052  48c0              LDR      r0,|L109.852|
000054  4abe              LDR      r2,|L109.848|
000056  6812              LDR      r2,[r2,#0]  ; imeiinc
000058  5481              STRB     r1,[r0,r2]
;;;1192   			imeiinc++;
00005a  48bd              LDR      r0,|L109.848|
00005c  6800              LDR      r0,[r0,#0]  ; imeiinc
00005e  1c40              ADDS     r0,r0,#1
000060  49bb              LDR      r1,|L109.848|
000062  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L109.100|
000064  48c0              LDR      r0,|L109.872|
000066  6800              LDR      r0,[r0,#0]            ;1189  ; i
000068  1c40              ADDS     r0,r0,#1              ;1189
00006a  49bf              LDR      r1,|L109.872|
00006c  6008              STR      r0,[r1,#0]            ;1189  ; i
                  |L109.110|
00006e  48bf              LDR      r0,|L109.876|
000070  f7fffffe          BL       strlen
000074  49bc              LDR      r1,|L109.872|
000076  6809              LDR      r1,[r1,#0]            ;1189  ; i
000078  4288              CMP      r0,r1                 ;1189
00007a  d8da              BHI      |L109.50|
;;;1193   		}
;;;1194   }
;;;1195   clear();	
00007c  f7fffffe          BL       clear
;;;1196   
;;;1197   
;;;1198   	adc_read(9);							
000080  2009              MOVS     r0,#9
000082  f7fffffe          BL       adc_read
;;;1199   	memset(fuelstr,0,5);
000086  2105              MOVS     r1,#5
000088  48b9              LDR      r0,|L109.880|
00008a  f7fffffe          BL       __aeabi_memclr
;;;1200   	sprintf(fuelstr,"%d,",fuel);
00008e  48b9              LDR      r0,|L109.884|
000090  49b9              LDR      r1,|L109.888|
000092  6802              LDR      r2,[r0,#0]  ; fuel
000094  48b6              LDR      r0,|L109.880|
000096  f7fffffe          BL       __2sprintf
;;;1201   
;;;1202   time52=15;	
00009a  200f              MOVS     r0,#0xf
00009c  49b7              LDR      r1,|L109.892|
00009e  6008              STR      r0,[r1,#0]  ; time52
;;;1203   
;;;1204   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
0000a0  48b7              LDR      r0,|L109.896|
0000a2  6800              LDR      r0,[r0,#0]  ; tmeout
0000a4  4bb7              LDR      r3,|L109.900|
0000a6  4aac              LDR      r2,|L109.856|
0000a8  49ad              LDR      r1,|L109.864|
0000aa  9000              STR      r0,[sp,#0]
0000ac  48b6              LDR      r0,|L109.904|
0000ae  f7fffffe          BL       send_GSM
;;;1205   	// not sleep	
;;;1206   	memset(num2,0,30);
0000b2  211e              MOVS     r1,#0x1e
0000b4  48b5              LDR      r0,|L109.908|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;1207   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
0000ba  48b4              LDR      r0,|L109.908|
0000bc  210d              MOVS     r1,#0xd
0000be  232c              MOVS     r3,#0x2c
0000c0  2205              MOVS     r2,#5
0000c2  9100              STR      r1,[sp,#0]
0000c4  9001              STR      r0,[sp,#4]
0000c6  2102              MOVS     r1,#2
0000c8  48a8              LDR      r0,|L109.876|
0000ca  f7fffffe          BL       parse_g
;;;1208   	voltagecbc=myAtoi(num2);
0000ce  48af              LDR      r0,|L109.908|
0000d0  f7fffffe          BL       myAtoi
0000d4  49ae              LDR      r1,|L109.912|
0000d6  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1209   memset(ignstr,0,2);
0000d8  48ae              LDR      r0,|L109.916|
0000da  2100              MOVS     r1,#0
0000dc  7001              STRB     r1,[r0,#0]
0000de  7041              STRB     r1,[r0,#1]
;;;1210   if(GPIOB_PDIR & 0x00000001){
0000e0  48ad              LDR      r0,|L109.920|
0000e2  6900              LDR      r0,[r0,#0x10]
0000e4  07c0              LSLS     r0,r0,#31
0000e6  0fc0              LSRS     r0,r0,#31
0000e8  2800              CMP      r0,#0
0000ea  d005              BEQ      |L109.248|
;;;1211   			sprintf(ignstr,"%d",1);
0000ec  2201              MOVS     r2,#1
0000ee  49ab              LDR      r1,|L109.924|
0000f0  48a8              LDR      r0,|L109.916|
0000f2  f7fffffe          BL       __2sprintf
0000f6  e004              B        |L109.258|
                  |L109.248|
;;;1212   }
;;;1213   else{
;;;1214   				sprintf(ignstr,"%d",0);
0000f8  2200              MOVS     r2,#0
0000fa  49a8              LDR      r1,|L109.924|
0000fc  48a5              LDR      r0,|L109.916|
0000fe  f7fffffe          BL       __2sprintf
                  |L109.258|
;;;1215   
;;;1216   }
;;;1217   
;;;1218   memset(acstr,0,2); //ptb2
000102  48a7              LDR      r0,|L109.928|
000104  2100              MOVS     r1,#0
000106  8001              STRH     r1,[r0,#0]
;;;1219   if(GPIOB_PDIR & 0x00000004){
000108  48a3              LDR      r0,|L109.920|
00010a  6900              LDR      r0,[r0,#0x10]
00010c  2104              MOVS     r1,#4
00010e  4008              ANDS     r0,r0,r1
000110  2800              CMP      r0,#0
000112  d005              BEQ      |L109.288|
;;;1220   			sprintf(acstr,"%d",1);
000114  2201              MOVS     r2,#1
000116  49a1              LDR      r1,|L109.924|
000118  48a1              LDR      r0,|L109.928|
00011a  f7fffffe          BL       __2sprintf
00011e  e004              B        |L109.298|
                  |L109.288|
;;;1221   }
;;;1222   else{
;;;1223   			sprintf(acstr,"%d",0);
000120  2200              MOVS     r2,#0
000122  499e              LDR      r1,|L109.924|
000124  489e              LDR      r0,|L109.928|
000126  f7fffffe          BL       __2sprintf
                  |L109.298|
;;;1224   
;;;1225   }
;;;1226   
;;;1227   
;;;1228   if(int_erval>60){int_erval=5;}
00012a  489e              LDR      r0,|L109.932|
00012c  6800              LDR      r0,[r0,#0]  ; int_erval
00012e  283c              CMP      r0,#0x3c
000130  dd02              BLE      |L109.312|
000132  2005              MOVS     r0,#5
000134  499b              LDR      r1,|L109.932|
000136  6008              STR      r0,[r1,#0]  ; int_erval
                  |L109.312|
;;;1229   while(lpticks<int_erval);
000138  bf00              NOP      
                  |L109.314|
00013a  489b              LDR      r0,|L109.936|
00013c  6800              LDR      r0,[r0,#0]  ; lpticks
00013e  4999              LDR      r1,|L109.932|
000140  6809              LDR      r1,[r1,#0]  ; int_erval
000142  4288              CMP      r0,r1
000144  dbf9              BLT      |L109.314|
;;;1230   get_gpsdata();
000146  f7fffffe          BL       get_gpsdata
;;;1231   lpticks=0;
00014a  2000              MOVS     r0,#0
00014c  4996              LDR      r1,|L109.936|
00014e  6008              STR      r0,[r1,#0]  ; lpticks
;;;1232   
;;;1233   parse_g(rmc, 3, 4, ',', ',' ,lati);
000150  4896              LDR      r0,|L109.940|
000152  212c              MOVS     r1,#0x2c
000154  460b              MOV      r3,r1
000156  2204              MOVS     r2,#4
000158  9100              STR      r1,[sp,#0]
00015a  9001              STR      r0,[sp,#4]
00015c  2103              MOVS     r1,#3
00015e  4894              LDR      r0,|L109.944|
000160  f7fffffe          BL       parse_g
;;;1234   parse_g(rmc, 5, 6, ',', ',' ,longi);
000164  4893              LDR      r0,|L109.948|
000166  212c              MOVS     r1,#0x2c
000168  460b              MOV      r3,r1
00016a  2206              MOVS     r2,#6
00016c  9100              STR      r1,[sp,#0]
00016e  9001              STR      r0,[sp,#4]
000170  2105              MOVS     r1,#5
000172  488f              LDR      r0,|L109.944|
000174  f7fffffe          BL       parse_g
;;;1235   parse_g(rmc, 7, 8, ',', ',' ,velocity);
000178  488f              LDR      r0,|L109.952|
00017a  212c              MOVS     r1,#0x2c
00017c  460b              MOV      r3,r1
00017e  2208              MOVS     r2,#8
000180  9100              STR      r1,[sp,#0]
000182  9001              STR      r0,[sp,#4]
000184  2107              MOVS     r1,#7
000186  488a              LDR      r0,|L109.944|
000188  f7fffffe          BL       parse_g
;;;1236   		
;;;1237   		speed = stof(velocity);
00018c  488a              LDR      r0,|L109.952|
00018e  f7fffffe          BL       stof
000192  498a              LDR      r1,|L109.956|
000194  6008              STR      r0,[r1,#0]  ; speed
;;;1238   		c=stof(lati);//7523.7412
000196  4885              LDR      r0,|L109.940|
000198  f7fffffe          BL       stof
00019c  4604              MOV      r4,r0
00019e  f7fffffe          BL       __aeabi_f2d
0001a2  4a87              LDR      r2,|L109.960|
0001a4  c203              STM      r2!,{r0,r1}
;;;1239   		hh= c/100; //75
0001a6  2200              MOVS     r2,#0
0001a8  4b86              LDR      r3,|L109.964|
0001aa  4985              LDR      r1,|L109.960|
0001ac  c903              LDM      r1,{r0,r1}
0001ae  f7fffffe          BL       __aeabi_ddiv
0001b2  4604              MOV      r4,r0
0001b4  f7fffffe          BL       __aeabi_d2iz
0001b8  4983              LDR      r1,|L109.968|
0001ba  6008              STR      r0,[r1,#0]  ; hh
;;;1240   		hh11 = c/100; //75.237412
0001bc  2200              MOVS     r2,#0
0001be  4b81              LDR      r3,|L109.964|
0001c0  497f              LDR      r1,|L109.960|
0001c2  c903              LDM      r1,{r0,r1}
0001c4  f7fffffe          BL       __aeabi_ddiv
0001c8  4a80              LDR      r2,|L109.972|
0001ca  c203              STM      r2!,{r0,r1}
;;;1241   		mm11 = hh11-hh; //.237412
0001cc  487e              LDR      r0,|L109.968|
0001ce  6800              LDR      r0,[r0,#0]  ; hh
0001d0  f7fffffe          BL       __aeabi_i2d
0001d4  4604              MOV      r4,r0
0001d6  487d              LDR      r0,|L109.972|
0001d8  c80c              LDM      r0!,{r2,r3}
0001da  4620              MOV      r0,r4
0001dc  f7fffffe          BL       __aeabi_drsub
0001e0  4a7b              LDR      r2,|L109.976|
0001e2  c203              STM      r2!,{r0,r1}
;;;1242   		mm11*=100;
0001e4  2200              MOVS     r2,#0
0001e6  4b77              LDR      r3,|L109.964|
0001e8  4979              LDR      r1,|L109.976|
0001ea  c903              LDM      r1,{r0,r1}
0001ec  f7fffffe          BL       __aeabi_dmul
0001f0  4a77              LDR      r2,|L109.976|
0001f2  c203              STM      r2!,{r0,r1}
;;;1243   		mm22=hh+mm11/60;	
0001f4  2200              MOVS     r2,#0
0001f6  4b77              LDR      r3,|L109.980|
0001f8  4975              LDR      r1,|L109.976|
0001fa  c903              LDM      r1,{r0,r1}
0001fc  f7fffffe          BL       __aeabi_ddiv
000200  4604              MOV      r4,r0
000202  460d              MOV      r5,r1
000204  4870              LDR      r0,|L109.968|
000206  6800              LDR      r0,[r0,#0]  ; hh
000208  f7fffffe          BL       __aeabi_i2d
00020c  4606              MOV      r6,r0
00020e  4622              MOV      r2,r4
000210  462b              MOV      r3,r5
000212  f7fffffe          BL       __aeabi_dadd
000216  4a70              LDR      r2,|L109.984|
000218  c203              STM      r2!,{r0,r1}
;;;1244   		memset(lati,0,15);
00021a  210f              MOVS     r1,#0xf
00021c  4863              LDR      r0,|L109.940|
00021e  f7fffffe          BL       __aeabi_memclr
;;;1245   		sprintf(lati,"%f",mm22);
000222  486d              LDR      r0,|L109.984|
000224  496d              LDR      r1,|L109.988|
000226  c80c              LDM      r0!,{r2,r3}
000228  4860              LDR      r0,|L109.940|
00022a  f7fffffe          BL       __2sprintf
;;;1246   		c=stof(longi);//7523.7412
00022e  4861              LDR      r0,|L109.948|
000230  f7fffffe          BL       stof
000234  4604              MOV      r4,r0
000236  f7fffffe          BL       __aeabi_f2d
00023a  4a61              LDR      r2,|L109.960|
00023c  c203              STM      r2!,{r0,r1}
;;;1247   		hh= c/100; //75
00023e  2200              MOVS     r2,#0
000240  4b60              LDR      r3,|L109.964|
000242  495f              LDR      r1,|L109.960|
000244  c903              LDM      r1,{r0,r1}
000246  f7fffffe          BL       __aeabi_ddiv
00024a  4604              MOV      r4,r0
00024c  f7fffffe          BL       __aeabi_d2iz
000250  495d              LDR      r1,|L109.968|
000252  6008              STR      r0,[r1,#0]  ; hh
;;;1248   		hh11 = c/100; //75.237412
000254  2200              MOVS     r2,#0
000256  4b5b              LDR      r3,|L109.964|
000258  4959              LDR      r1,|L109.960|
00025a  c903              LDM      r1,{r0,r1}
00025c  f7fffffe          BL       __aeabi_ddiv
000260  4a5a              LDR      r2,|L109.972|
000262  c203              STM      r2!,{r0,r1}
;;;1249   		mm11 = hh11-hh; //.237412
000264  4858              LDR      r0,|L109.968|
000266  6800              LDR      r0,[r0,#0]  ; hh
000268  f7fffffe          BL       __aeabi_i2d
00026c  4604              MOV      r4,r0
00026e  4857              LDR      r0,|L109.972|
000270  c80c              LDM      r0!,{r2,r3}
000272  4620              MOV      r0,r4
000274  f7fffffe          BL       __aeabi_drsub
000278  4a55              LDR      r2,|L109.976|
00027a  c203              STM      r2!,{r0,r1}
;;;1250   		mm11*=100;
00027c  2200              MOVS     r2,#0
00027e  4b51              LDR      r3,|L109.964|
000280  4953              LDR      r1,|L109.976|
000282  c903              LDM      r1,{r0,r1}
000284  f7fffffe          BL       __aeabi_dmul
000288  4a51              LDR      r2,|L109.976|
00028a  c203              STM      r2!,{r0,r1}
;;;1251   		mm22=hh+mm11/60;	
00028c  2200              MOVS     r2,#0
00028e  4b51              LDR      r3,|L109.980|
000290  494f              LDR      r1,|L109.976|
000292  c903              LDM      r1,{r0,r1}
000294  f7fffffe          BL       __aeabi_ddiv
000298  4604              MOV      r4,r0
00029a  460d              MOV      r5,r1
00029c  484a              LDR      r0,|L109.968|
00029e  6800              LDR      r0,[r0,#0]  ; hh
0002a0  f7fffffe          BL       __aeabi_i2d
0002a4  4606              MOV      r6,r0
0002a6  4622              MOV      r2,r4
0002a8  462b              MOV      r3,r5
0002aa  f7fffffe          BL       __aeabi_dadd
0002ae  4a4a              LDR      r2,|L109.984|
0002b0  c203              STM      r2!,{r0,r1}
;;;1252   		memset(longi,0,15);
0002b2  210f              MOVS     r1,#0xf
0002b4  483f              LDR      r0,|L109.948|
0002b6  f7fffffe          BL       __aeabi_memclr
;;;1253   		sprintf(longi,"%f",mm22);	
0002ba  4847              LDR      r0,|L109.984|
0002bc  4947              LDR      r1,|L109.988|
0002be  c80c              LDM      r0!,{r2,r3}
0002c0  483c              LDR      r0,|L109.948|
0002c2  f7fffffe          BL       __2sprintf
;;;1254   		strcat(data,imei);
0002c6  4923              LDR      r1,|L109.852|
0002c8  4845              LDR      r0,|L109.992|
0002ca  f7fffffe          BL       strcat
;;;1255   		strcat(data,",");	
0002ce  4945              LDR      r1,|L109.996|
0002d0  4843              LDR      r0,|L109.992|
0002d2  f7fffffe          BL       strcat
;;;1256   		strcat(data,"$GxGGA");	
0002d6  4944              LDR      r1,|L109.1000|
0002d8  4841              LDR      r0,|L109.992|
0002da  f7fffffe          BL       strcat
;;;1257   		strcat(data,gga);
0002de  4943              LDR      r1,|L109.1004|
0002e0  483f              LDR      r0,|L109.992|
0002e2  f7fffffe          BL       strcat
;;;1258   		strcat(data,",$GxRMC");	
0002e6  4942              LDR      r1,|L109.1008|
0002e8  483d              LDR      r0,|L109.992|
0002ea  f7fffffe          BL       strcat
;;;1259   		strcat(data,rmc);	
0002ee  4930              LDR      r1,|L109.944|
0002f0  483b              LDR      r0,|L109.992|
0002f2  f7fffffe          BL       strcat
;;;1260   		strcat(data,",");	
0002f6  493b              LDR      r1,|L109.996|
0002f8  4839              LDR      r0,|L109.992|
0002fa  f7fffffe          BL       strcat
;;;1261   		strcat(data,num2);	
0002fe  4923              LDR      r1,|L109.908|
000300  4837              LDR      r0,|L109.992|
000302  f7fffffe          BL       strcat
;;;1262   		strcat(data,",F=");	
000306  493b              LDR      r1,|L109.1012|
000308  4835              LDR      r0,|L109.992|
00030a  f7fffffe          BL       strcat
;;;1263   		strcat(data,fuelstr);		
00030e  4918              LDR      r1,|L109.880|
000310  4833              LDR      r0,|L109.992|
000312  f7fffffe          BL       strcat
;;;1264   		strcat(data,",AC=");	
000316  4938              LDR      r1,|L109.1016|
000318  4831              LDR      r0,|L109.992|
00031a  f7fffffe          BL       strcat
;;;1265   		strcat(data,acstr);
00031e  4920              LDR      r1,|L109.928|
000320  482f              LDR      r0,|L109.992|
000322  f7fffffe          BL       strcat
;;;1266   		strcat(data,",I=");	
000326  4935              LDR      r1,|L109.1020|
000328  482d              LDR      r0,|L109.992|
00032a  f7fffffe          BL       strcat
;;;1267   		strcat(data,ignstr);	
00032e  4919              LDR      r1,|L109.916|
000330  482b              LDR      r0,|L109.992|
000332  f7fffffe          BL       strcat
;;;1268   		if( !(GPIOC_PDIR & 0x00000001)){
000336  4818              LDR      r0,|L109.920|
000338  3040              ADDS     r0,r0,#0x40
00033a  6900              LDR      r0,[r0,#0x10]
00033c  07c0              LSLS     r0,r0,#31
00033e  0fc0              LSRS     r0,r0,#31
000340  2800              CMP      r0,#0
000342  d003              BEQ      |L109.844|
;;;1269   		}
;;;1270   		else{strcat(data,",BR*");}
000344  492e              LDR      r1,|L109.1024|
000346  4826              LDR      r0,|L109.992|
000348  f7fffffe          BL       strcat
                  |L109.844|
;;;1271   //return 0;
;;;1272   }
00034c  bdfe              POP      {r1-r7,pc}
;;;1273   
                          ENDP

00034e  0000              DCW      0x0000
                  |L109.848|
                          DCD      imeiinc
                  |L109.852|
                          DCD      imei
                  |L109.856|
                          DCD      ||.conststring||+0xe0
                  |L109.860|
                          DCD      ||.conststring||+0x18
                  |L109.864|
                          DCD      ||.conststring||+0x2c
                  |L109.868|
                          DCD      ||.conststring||+0xf0
                  |L109.872|
                          DCD      i
                  |L109.876|
                          DCD      uart_string_gsm
                  |L109.880|
                          DCD      fuelstr
                  |L109.884|
                          DCD      fuel
                  |L109.888|
                          DCD      ||.conststring||+0x100
                  |L109.892|
                          DCD      time52
                  |L109.896|
                          DCD      tmeout
                  |L109.900|
                          DCD      ||.conststring||+0x10
                  |L109.904|
                          DCD      ||.conststring||+0x104
                  |L109.908|
                          DCD      num2
                  |L109.912|
                          DCD      voltagecbc
                  |L109.916|
                          DCD      ignstr
                  |L109.920|
                          DCD      0x400ff040
                  |L109.924|
                          DCD      ||.conststring||+0x114
                  |L109.928|
                          DCD      acstr
                  |L109.932|
                          DCD      int_erval
                  |L109.936|
                          DCD      lpticks
                  |L109.940|
                          DCD      lati
                  |L109.944|
                          DCD      ||rmc||
                  |L109.948|
                          DCD      longi
                  |L109.952|
                          DCD      velocity
                  |L109.956|
                          DCD      speed
                  |L109.960|
                          DCD      c
                  |L109.964|
                          DCD      0x40590000
                  |L109.968|
                          DCD      ||hh||
                  |L109.972|
                          DCD      hh11
                  |L109.976|
                          DCD      mm11
                  |L109.980|
                          DCD      0x404e0000
                  |L109.984|
                          DCD      mm22
                  |L109.988|
                          DCD      ||.conststring||+0x118
                  |L109.992|
                          DCD      data
                  |L109.996|
                          DCD      ||.conststring||+0x11c
                  |L109.1000|
                          DCD      ||.conststring||+0x120
                  |L109.1004|
                          DCD      gga
                  |L109.1008|
                          DCD      ||.conststring||+0x128
                  |L109.1012|
                          DCD      ||.conststring||+0x130
                  |L109.1016|
                          DCD      ||.conststring||+0x134
                  |L109.1020|
                          DCD      ||.conststring||+0x13c
                  |L109.1024|
                          DCD      ||.conststring||+0x140

                          AREA ||i.savecursord||, COMGROUP=savecursord, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursord PROC
;;;1331   }	
;;;1332   	__inline void savecursord(){
000000  b508              PUSH     {r3,lr}
;;;1333   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4814              LDR      r0,|L116.84|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b14              LDR      r3,|L116.88|
000008  4a14              LDR      r2,|L116.92|
00000a  4915              LDR      r1,|L116.96|
00000c  9000              STR      r0,[sp,#0]
00000e  4815              LDR      r0,|L116.100|
000010  f7fffffe          BL       send_GSM
;;;1334   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b10              LDR      r3,|L116.88|
000018  4a10              LDR      r2,|L116.92|
00001a  4913              LDR      r1,|L116.104|
00001c  9000              STR      r0,[sp,#0]
00001e  4813              LDR      r0,|L116.108|
000020  f7fffffe          BL       send_GSM
;;;1335   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1336   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4810              LDR      r0,|L116.112|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1337   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",0,0,0);		
000032  2000              MOVS     r0,#0
000034  4603              MOV      r3,r0
000036  4602              MOV      r2,r0
000038  490e              LDR      r1,|L116.116|
00003a  9000              STR      r0,[sp,#0]
00003c  480c              LDR      r0,|L116.112|
00003e  f7fffffe          BL       __2sprintf
;;;1338   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000042  200a              MOVS     r0,#0xa
000044  4b04              LDR      r3,|L116.88|
000046  4a05              LDR      r2,|L116.92|
000048  4905              LDR      r1,|L116.96|
00004a  9000              STR      r0,[sp,#0]
00004c  4808              LDR      r0,|L116.112|
00004e  f7fffffe          BL       send_GSM
;;;1339   }	
000052  bd08              POP      {r3,pc}
;;;1340   		
                          ENDP

                  |L116.84|
                          DCD      tmeout
                  |L116.88|
                          DCD      ||.conststring||+0x10
                  |L116.92|
                          DCD      ||.conststring||+0x18
                  |L116.96|
                          DCD      ||.conststring||+0x2c
                  |L116.100|
                          DCD      ||.conststring||+0x148
                  |L116.104|
                          DCD      ||.conststring||+0x20
                  |L116.108|
                          DCD      ||.conststring||+0x168
                  |L116.112|
                          DCD      at_
                  |L116.116|
                          DCD      ||.conststring||+0x190

                          AREA ||i.save_interval||, COMGROUP=save_interval, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_interval PROC
;;;1194   
;;;1195   __inline void save_interval()
000000  b538              PUSH     {r3-r5,lr}
;;;1196   {
;;;1197   	
;;;1198   send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L123.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L123.208|
000008  4a32              LDR      r2,|L123.212|
00000a  4933              LDR      r1,|L123.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L123.220|
000010  f7fffffe          BL       send_GSM
;;;1199   
;;;1200   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L123.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1201   	sprintf(at_,"\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",strlen(interval)+11);	
00001c  4831              LDR      r0,|L123.228|
00001e  f7fffffe          BL       strlen
000022  4604              MOV      r4,r0
000024  340b              ADDS     r4,r4,#0xb
000026  4622              MOV      r2,r4
000028  492f              LDR      r1,|L123.232|
00002a  482d              LDR      r0,|L123.224|
00002c  f7fffffe          BL       __2sprintf
;;;1202   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000030  200a              MOVS     r0,#0xa
000032  4b27              LDR      r3,|L123.208|
000034  4a27              LDR      r2,|L123.212|
000036  492d              LDR      r1,|L123.236|
000038  9000              STR      r0,[sp,#0]
00003a  4829              LDR      r0,|L123.224|
00003c  f7fffffe          BL       send_GSM
;;;1203   	//clear();
;;;1204   
;;;1205   	
;;;1206   	send_modem("|INTERVAL|");
000040  482b              LDR      r0,|L123.240|
000042  f7fffffe          BL       send_modem
;;;1207   		for(k=0;k<strlen(interval);k++)
000046  2000              MOVS     r0,#0
000048  492a              LDR      r1,|L123.244|
00004a  6008              STR      r0,[r1,#0]  ; k
00004c  e00b              B        |L123.102|
                  |L123.78|
;;;1208   		{
;;;1209   			uart_putchar(UART1_BASE_PTR, interval[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004e  4825              LDR      r0,|L123.228|
000050  4a28              LDR      r2,|L123.244|
000052  6812              LDR      r2,[r2,#0]  ; k
000054  5c81              LDRB     r1,[r0,r2]
000056  4828              LDR      r0,|L123.248|
000058  f7fffffe          BL       uart_putchar
00005c  4825              LDR      r0,|L123.244|
00005e  6800              LDR      r0,[r0,#0]            ;1207  ; k
000060  1c40              ADDS     r0,r0,#1              ;1207
000062  4924              LDR      r1,|L123.244|
000064  6008              STR      r0,[r1,#0]            ;1207  ; k
                  |L123.102|
000066  481f              LDR      r0,|L123.228|
000068  f7fffffe          BL       strlen
00006c  4921              LDR      r1,|L123.244|
00006e  6809              LDR      r1,[r1,#0]            ;1207  ; k
000070  4288              CMP      r0,r1                 ;1207
000072  d8ec              BHI      |L123.78|
;;;1210   		}	
;;;1211   			send_modem("|");			
000074  4821              LDR      r0,|L123.252|
000076  f7fffffe          BL       send_modem
;;;1212    
;;;1213   									k2=0;									//string array counter for uart 1
00007a  2000              MOVS     r0,#0
00007c  4920              LDR      r1,|L123.256|
00007e  6008              STR      r0,[r1,#0]  ; k2
;;;1214   									time=19999;						//timer counts to wait for characters in uart 1 									
000080  4820              LDR      r0,|L123.260|
000082  4921              LDR      r1,|L123.264|
000084  6008              STR      r0,[r1,#0]  ; time
;;;1215   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000086  e010              B        |L123.170|
                  |L123.136|
;;;1216   									{
;;;1217   									time--;
000088  481f              LDR      r0,|L123.264|
00008a  6800              LDR      r0,[r0,#0]  ; time
00008c  1e40              SUBS     r0,r0,#1
00008e  491e              LDR      r1,|L123.264|
000090  6008              STR      r0,[r1,#0]  ; time
;;;1218   									if(time % 2000 == 0)
000092  217d              MOVS     r1,#0x7d
000094  0109              LSLS     r1,r1,#4
000096  481c              LDR      r0,|L123.264|
000098  6800              LDR      r0,[r0,#0]  ; time
00009a  f7fffffe          BL       __aeabi_idivmod
00009e  2900              CMP      r1,#0
0000a0  d103              BNE      |L123.170|
;;;1219   										{
;;;1220   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1221   											uart_putchar(UART1_BASE_PTR,'\n');
0000a2  210a              MOVS     r1,#0xa
0000a4  4814              LDR      r0,|L123.248|
0000a6  f7fffffe          BL       uart_putchar
                  |L123.170|
0000aa  4918              LDR      r1,|L123.268|
0000ac  4818              LDR      r0,|L123.272|
0000ae  f7fffffe          BL       strstr
0000b2  2800              CMP      r0,#0                 ;1215
0000b4  d109              BNE      |L123.202|
0000b6  4814              LDR      r0,|L123.264|
0000b8  6800              LDR      r0,[r0,#0]            ;1215  ; time
0000ba  2801              CMP      r0,#1                 ;1215
0000bc  db05              BLT      |L123.202|
0000be  4915              LDR      r1,|L123.276|
0000c0  4813              LDR      r0,|L123.272|
0000c2  f7fffffe          BL       strstr
0000c6  2800              CMP      r0,#0                 ;1215
0000c8  d0de              BEQ      |L123.136|
                  |L123.202|
;;;1222   										}
;;;1223   	
;;;1224   									}
;;;1225   
;;;1226   
;;;1227   	
;;;1228   }	
0000ca  bd38              POP      {r3-r5,pc}
;;;1229   	
                          ENDP

                  |L123.204|
                          DCD      tmeout
                  |L123.208|
                          DCD      ||.conststring||+0x10
                  |L123.212|
                          DCD      ||.conststring||+0x18
                  |L123.216|
                          DCD      ||.conststring||+0x2c
                  |L123.220|
                          DCD      ||.conststring||+0x1d4
                  |L123.224|
                          DCD      at_
                  |L123.228|
                          DCD      interval
                  |L123.232|
                          DCD      ||.conststring||+0x1f4
                  |L123.236|
                          DCD      ||.conststring||+0x20
                  |L123.240|
                          DCD      ||.conststring||+0x21c
                  |L123.244|
                          DCD      k
                  |L123.248|
                          DCD      0x4006b000
                  |L123.252|
                          DCD      ||.conststring||+0xdc
                  |L123.256|
                          DCD      ||k2||
                  |L123.260|
                          DCD      0x00004e1f
                  |L123.264|
                          DCD      time
                  |L123.268|
                          DCD      ||.conststring||+0x70
                  |L123.272|
                          DCD      uart_string_gsm
                  |L123.276|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.saveapn||, COMGROUP=saveapn, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  saveapn PROC
;;;1147   
;;;1148   __inline void saveapn(){
000000  b538              PUSH     {r3-r5,lr}
;;;1149   	
;;;1150   send_GSM("\nAT+FSCREATE=C:\\APN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L130.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L130.208|
000008  4a32              LDR      r2,|L130.212|
00000a  4933              LDR      r1,|L130.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L130.220|
000010  f7fffffe          BL       send_GSM
;;;1151   
;;;1152   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L130.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1153   	sprintf(at_,"\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",strlen(apn)+3);	
00001c  4831              LDR      r0,|L130.228|
00001e  f7fffffe          BL       strlen
000022  1cc4              ADDS     r4,r0,#3
000024  4622              MOV      r2,r4
000026  4930              LDR      r1,|L130.232|
000028  482d              LDR      r0,|L130.224|
00002a  f7fffffe          BL       __2sprintf
;;;1154   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
00002e  200a              MOVS     r0,#0xa
000030  4b27              LDR      r3,|L130.208|
000032  4a28              LDR      r2,|L130.212|
000034  492d              LDR      r1,|L130.236|
000036  9000              STR      r0,[sp,#0]
000038  4829              LDR      r0,|L130.224|
00003a  f7fffffe          BL       send_GSM
;;;1155   	//clear();
;;;1156   
;;;1157   	
;;;1158   	send_modem("|");
00003e  482c              LDR      r0,|L130.240|
000040  f7fffffe          BL       send_modem
;;;1159   		for(k=0;k<strlen(apn);k++)
000044  2000              MOVS     r0,#0
000046  492b              LDR      r1,|L130.244|
000048  6008              STR      r0,[r1,#0]  ; k
00004a  e00b              B        |L130.100|
                  |L130.76|
;;;1160   		{
;;;1161   			uart_putchar(UART1_BASE_PTR, apn[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004c  4825              LDR      r0,|L130.228|
00004e  4a29              LDR      r2,|L130.244|
000050  6812              LDR      r2,[r2,#0]  ; k
000052  5c81              LDRB     r1,[r0,r2]
000054  4828              LDR      r0,|L130.248|
000056  f7fffffe          BL       uart_putchar
00005a  4826              LDR      r0,|L130.244|
00005c  6800              LDR      r0,[r0,#0]            ;1159  ; k
00005e  1c40              ADDS     r0,r0,#1              ;1159
000060  4924              LDR      r1,|L130.244|
000062  6008              STR      r0,[r1,#0]            ;1159  ; k
                  |L130.100|
000064  481f              LDR      r0,|L130.228|
000066  f7fffffe          BL       strlen
00006a  4922              LDR      r1,|L130.244|
00006c  6809              LDR      r1,[r1,#0]            ;1159  ; k
00006e  4288              CMP      r0,r1                 ;1159
000070  d8ec              BHI      |L130.76|
;;;1162   		}	
;;;1163   			send_modem("|");			
000072  481f              LDR      r0,|L130.240|
000074  f7fffffe          BL       send_modem
;;;1164    
;;;1165   									k2=0;									//string array counter for uart 1
000078  2000              MOVS     r0,#0
00007a  4920              LDR      r1,|L130.252|
00007c  6008              STR      r0,[r1,#0]  ; k2
;;;1166   									time=19999;						//timer counts to wait for characters in uart 1 									
00007e  4820              LDR      r0,|L130.256|
000080  4920              LDR      r1,|L130.260|
000082  6008              STR      r0,[r1,#0]  ; time
;;;1167   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000084  e010              B        |L130.168|
                  |L130.134|
;;;1168   									{
;;;1169   									time--;
000086  481f              LDR      r0,|L130.260|
000088  6800              LDR      r0,[r0,#0]  ; time
00008a  1e40              SUBS     r0,r0,#1
00008c  491d              LDR      r1,|L130.260|
00008e  6008              STR      r0,[r1,#0]  ; time
;;;1170   									if(time % 2000 == 0)
000090  217d              MOVS     r1,#0x7d
000092  0109              LSLS     r1,r1,#4
000094  481b              LDR      r0,|L130.260|
000096  6800              LDR      r0,[r0,#0]  ; time
000098  f7fffffe          BL       __aeabi_idivmod
00009c  2900              CMP      r1,#0
00009e  d103              BNE      |L130.168|
;;;1171   										{
;;;1172   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1173   											uart_putchar(UART1_BASE_PTR,'\n');
0000a0  210a              MOVS     r1,#0xa
0000a2  4815              LDR      r0,|L130.248|
0000a4  f7fffffe          BL       uart_putchar
                  |L130.168|
0000a8  4917              LDR      r1,|L130.264|
0000aa  4818              LDR      r0,|L130.268|
0000ac  f7fffffe          BL       strstr
0000b0  2800              CMP      r0,#0                 ;1167
0000b2  d109              BNE      |L130.200|
0000b4  4813              LDR      r0,|L130.260|
0000b6  6800              LDR      r0,[r0,#0]            ;1167  ; time
0000b8  2801              CMP      r0,#1                 ;1167
0000ba  db05              BLT      |L130.200|
0000bc  4914              LDR      r1,|L130.272|
0000be  4813              LDR      r0,|L130.268|
0000c0  f7fffffe          BL       strstr
0000c4  2800              CMP      r0,#0                 ;1167
0000c6  d0de              BEQ      |L130.134|
                  |L130.200|
;;;1174   										}
;;;1175   	
;;;1176   									}
;;;1177   
;;;1178   
;;;1179   	
;;;1180   }
0000c8  bd38              POP      {r3-r5,pc}
;;;1181   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L130.204|
                          DCD      tmeout
                  |L130.208|
                          DCD      ||.conststring||+0x10
                  |L130.212|
                          DCD      ||.conststring||+0x18
                  |L130.216|
                          DCD      ||.conststring||+0x2c
                  |L130.220|
                          DCD      ||.conststring||+0x228
                  |L130.224|
                          DCD      at_
                  |L130.228|
                          DCD      apn
                  |L130.232|
                          DCD      ||.conststring||+0x244
                  |L130.236|
                          DCD      ||.conststring||+0x20
                  |L130.240|
                          DCD      ||.conststring||+0xdc
                  |L130.244|
                          DCD      k
                  |L130.248|
                          DCD      0x4006b000
                  |L130.252|
                          DCD      ||k2||
                  |L130.256|
                          DCD      0x00004e1f
                  |L130.260|
                          DCD      time
                  |L130.264|
                          DCD      ||.conststring||+0x70
                  |L130.268|
                          DCD      uart_string_gsm
                  |L130.272|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.msg_sim800||, COMGROUP=msg_sim800, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  msg_sim800 PROC
;;;1410   
;;;1411   __inline void msg_sim800() 
000000  b51f              PUSH     {r0-r4,lr}
;;;1412   {
;;;1413   		cond1=0;
000002  2000              MOVS     r0,#0
000004  49f7              LDR      r1,|L137.996|
000006  6008              STR      r0,[r1,#0]  ; cond1
;;;1414   		cond2=0;
000008  49f7              LDR      r1,|L137.1000|
00000a  6008              STR      r0,[r1,#0]  ; cond2
;;;1415   		cond3=0;
00000c  49f7              LDR      r1,|L137.1004|
00000e  6008              STR      r0,[r1,#0]  ; cond3
;;;1416   		cond4=0;
000010  49f7              LDR      r1,|L137.1008|
000012  6008              STR      r0,[r1,#0]  ; cond4
;;;1417   		cond5=0;
000014  49f7              LDR      r1,|L137.1012|
000016  6008              STR      r0,[r1,#0]  ; cond5
;;;1418   		cond6=0;
000018  49f7              LDR      r1,|L137.1016|
00001a  6008              STR      r0,[r1,#0]  ; cond6
;;;1419   		cond7=0;
00001c  49f7              LDR      r1,|L137.1020|
00001e  6008              STR      r0,[r1,#0]  ; cond7
;;;1420   		cond8=0;
000020  49f7              LDR      r1,|L137.1024|
000022  6008              STR      r0,[r1,#0]  ; cond8
;;;1421   		cond9=0;
000024  49f7              LDR      r1,|L137.1028|
000026  6008              STR      r0,[r1,#0]  ; cond9
;;;1422   		cond10=0;
000028  49f7              LDR      r1,|L137.1032|
00002a  6008              STR      r0,[r1,#0]  ; cond10
;;;1423   		cond11=0;
00002c  49f7              LDR      r1,|L137.1036|
00002e  6008              STR      r0,[r1,#0]  ; cond11
;;;1424   		cond12=0;
000030  49f7              LDR      r1,|L137.1040|
000032  6008              STR      r0,[r1,#0]  ; cond12
;;;1425   		cond13=0;
000034  49f7              LDR      r1,|L137.1044|
000036  6008              STR      r0,[r1,#0]  ; cond13
;;;1426   		cond14=0;
000038  49f7              LDR      r1,|L137.1048|
00003a  6008              STR      r0,[r1,#0]  ; cond14
;;;1427   		cond15=0;		
00003c  49f7              LDR      r1,|L137.1052|
00003e  6008              STR      r0,[r1,#0]  ; cond15
;;;1428   	
;;;1429   //ringflag=1;	
;;;1430   	if(ringflag==1 )
000040  48f7              LDR      r0,|L137.1056|
000042  7800              LDRB     r0,[r0,#0]  ; ringflag
000044  2801              CMP      r0,#1
000046  d17d              BNE      |L137.324|
;;;1431   	{
;;;1432   		sleep_flag=0;
000048  2000              MOVS     r0,#0
00004a  49f6              LDR      r1,|L137.1060|
00004c  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1433       DTR_OFF;		// not sleep	
00004e  2080              MOVS     r0,#0x80
000050  49f5              LDR      r1,|L137.1064|
000052  6088              STR      r0,[r1,#8]
;;;1434   
;;;1435   delay(1000);
000054  207d              MOVS     r0,#0x7d
000056  00c0              LSLS     r0,r0,#3
000058  f7fffffe          BL       delay
;;;1436   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
00005c  48f3              LDR      r0,|L137.1068|
00005e  6800              LDR      r0,[r0,#0]  ; tmeout
000060  4bf3              LDR      r3,|L137.1072|
000062  4af4              LDR      r2,|L137.1076|
000064  49f4              LDR      r1,|L137.1080|
000066  9000              STR      r0,[sp,#0]
000068  48f4              LDR      r0,|L137.1084|
00006a  f7fffffe          BL       send_GSM
;;;1437   		
;;;1438   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);  		
00006e  48ef              LDR      r0,|L137.1068|
000070  6800              LDR      r0,[r0,#0]  ; tmeout
000072  4bef              LDR      r3,|L137.1072|
000074  4aef              LDR      r2,|L137.1076|
000076  49f0              LDR      r1,|L137.1080|
000078  9000              STR      r0,[sp,#0]
00007a  48f1              LDR      r0,|L137.1088|
00007c  f7fffffe          BL       send_GSM
;;;1439   delay(1000);		
000080  207d              MOVS     r0,#0x7d
000082  00c0              LSLS     r0,r0,#3
000084  f7fffffe          BL       delay
;;;1440   		
;;;1441   
;;;1442   	send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000088  48e8              LDR      r0,|L137.1068|
00008a  6800              LDR      r0,[r0,#0]  ; tmeout
00008c  4be8              LDR      r3,|L137.1072|
00008e  4ae9              LDR      r2,|L137.1076|
000090  49e9              LDR      r1,|L137.1080|
000092  9000              STR      r0,[sp,#0]
000094  48eb              LDR      r0,|L137.1092|
000096  f7fffffe          BL       send_GSM
;;;1443   	send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
00009a  48e4              LDR      r0,|L137.1068|
00009c  6800              LDR      r0,[r0,#0]  ; tmeout
00009e  4be4              LDR      r3,|L137.1072|
0000a0  4ae4              LDR      r2,|L137.1076|
0000a2  49e5              LDR      r1,|L137.1080|
0000a4  9000              STR      r0,[sp,#0]
0000a6  48e8              LDR      r0,|L137.1096|
0000a8  f7fffffe          BL       send_GSM
;;;1444   
;;;1445   					send_GSM("\r\nAT+CMGR=1\r\n", "OK\r\n", "ERROR" , "OK\r\n",tmeout);	
0000ac  48df              LDR      r0,|L137.1068|
0000ae  6800              LDR      r0,[r0,#0]  ; tmeout
0000b0  4be1              LDR      r3,|L137.1080|
0000b2  4ae6              LDR      r2,|L137.1100|
0000b4  4619              MOV      r1,r3
0000b6  9000              STR      r0,[sp,#0]
0000b8  48e5              LDR      r0,|L137.1104|
0000ba  f7fffffe          BL       send_GSM
;;;1446   					clear();
0000be  f7fffffe          BL       clear
;;;1447   					memset(num2,0,30);
0000c2  211e              MOVS     r1,#0x1e
0000c4  48e3              LDR      r0,|L137.1108|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1448   					parse_gsm(uart_string_gsm, 3, 4, num2);
0000ca  4be2              LDR      r3,|L137.1108|
0000cc  2204              MOVS     r2,#4
0000ce  2103              MOVS     r1,#3
0000d0  48e1              LDR      r0,|L137.1112|
0000d2  f7fffffe          BL       parse_gsm
;;;1449   			
;;;1450   						cond1=strstr(uart_string_gsm, "OWNER");	
0000d6  49e1              LDR      r1,|L137.1116|
0000d8  48df              LDR      r0,|L137.1112|
0000da  f7fffffe          BL       strstr
0000de  49c1              LDR      r1,|L137.996|
0000e0  6008              STR      r0,[r1,#0]  ; cond1
;;;1451   						cond2=strstr(uart_string_gsm, "LOCATION");
0000e2  49df              LDR      r1,|L137.1120|
0000e4  48dc              LDR      r0,|L137.1112|
0000e6  f7fffffe          BL       strstr
0000ea  49bf              LDR      r1,|L137.1000|
0000ec  6008              STR      r0,[r1,#0]  ; cond2
;;;1452   						cond3=strstr(uart_string_gsm, "INTERVAL");
0000ee  49dd              LDR      r1,|L137.1124|
0000f0  48d9              LDR      r0,|L137.1112|
0000f2  f7fffffe          BL       strstr
0000f6  49bd              LDR      r1,|L137.1004|
0000f8  6008              STR      r0,[r1,#0]  ; cond3
;;;1453   						cond4=strstr(uart_string_gsm, "START");
0000fa  49db              LDR      r1,|L137.1128|
0000fc  48d6              LDR      r0,|L137.1112|
0000fe  f7fffffe          BL       strstr
000102  49bb              LDR      r1,|L137.1008|
000104  6008              STR      r0,[r1,#0]  ; cond4
;;;1454   						cond5=strstr(uart_string_gsm, "OWNER1");
000106  49d9              LDR      r1,|L137.1132|
000108  48d3              LDR      r0,|L137.1112|
00010a  f7fffffe          BL       strstr
00010e  49b9              LDR      r1,|L137.1012|
000110  6008              STR      r0,[r1,#0]  ; cond5
;;;1455   						cond6=strstr(uart_string_gsm, "OWNER2");
000112  49d7              LDR      r1,|L137.1136|
000114  48d0              LDR      r0,|L137.1112|
000116  f7fffffe          BL       strstr
00011a  49b7              LDR      r1,|L137.1016|
00011c  6008              STR      r0,[r1,#0]  ; cond6
;;;1456   						cond7=strstr(uart_string_gsm, "OWNER3");
00011e  49d5              LDR      r1,|L137.1140|
000120  48cd              LDR      r0,|L137.1112|
000122  f7fffffe          BL       strstr
000126  49b5              LDR      r1,|L137.1020|
000128  6008              STR      r0,[r1,#0]  ; cond7
;;;1457   						cond8=strstr(uart_string_gsm, "DEBUG");
00012a  49d3              LDR      r1,|L137.1144|
00012c  48ca              LDR      r0,|L137.1112|
00012e  f7fffffe          BL       strstr
000132  49b3              LDR      r1,|L137.1024|
000134  6008              STR      r0,[r1,#0]  ; cond8
;;;1458   						cond9=strstr(uart_string_gsm, "RESET");
000136  49d1              LDR      r1,|L137.1148|
000138  48c7              LDR      r0,|L137.1112|
00013a  f7fffffe          BL       strstr
00013e  49b1              LDR      r1,|L137.1028|
000140  6008              STR      r0,[r1,#0]  ; cond9
;;;1459   						cond10=strstr(uart_string_gsm, "IP");
000142  e000              B        |L137.326|
                  |L137.324|
000144  e3ce              B        |L137.2276|
                  |L137.326|
000146  49ce              LDR      r1,|L137.1152|
000148  48c3              LDR      r0,|L137.1112|
00014a  f7fffffe          BL       strstr
00014e  49ae              LDR      r1,|L137.1032|
000150  6008              STR      r0,[r1,#0]  ; cond10
;;;1460   						cond11=strstr(uart_string_gsm, "SUOWNER");	
000152  49cc              LDR      r1,|L137.1156|
000154  48c0              LDR      r0,|L137.1112|
000156  f7fffffe          BL       strstr
00015a  49ac              LDR      r1,|L137.1036|
00015c  6008              STR      r0,[r1,#0]  ; cond11
;;;1461   						cond12=strstr(uart_string_gsm, "SOWNER");	
00015e  49ca              LDR      r1,|L137.1160|
000160  48bd              LDR      r0,|L137.1112|
000162  f7fffffe          BL       strstr
000166  49aa              LDR      r1,|L137.1040|
000168  6008              STR      r0,[r1,#0]  ; cond12
;;;1462   						cond13=strstr(uart_string_gsm, "IGNITION ON");	
00016a  49c8              LDR      r1,|L137.1164|
00016c  48ba              LDR      r0,|L137.1112|
00016e  f7fffffe          BL       strstr
000172  49a8              LDR      r1,|L137.1044|
000174  6008              STR      r0,[r1,#0]  ; cond13
;;;1463   						cond14=strstr(uart_string_gsm, "IGNITION OFF");	
000176  49c6              LDR      r1,|L137.1168|
000178  48b7              LDR      r0,|L137.1112|
00017a  f7fffffe          BL       strstr
00017e  49a6              LDR      r1,|L137.1048|
000180  6008              STR      r0,[r1,#0]  ; cond14
;;;1464   						cond15=strstr(uart_string_gsm, "IGNSTAT");
000182  49c4              LDR      r1,|L137.1172|
000184  48b4              LDR      r0,|L137.1112|
000186  f7fffffe          BL       strstr
00018a  49a4              LDR      r1,|L137.1052|
00018c  6008              STR      r0,[r1,#0]  ; cond15
;;;1465   
;;;1466   							if(send_SOS==1){
00018e  48c2              LDR      r0,|L137.1176|
000190  6800              LDR      r0,[r0,#0]  ; send_SOS
000192  2801              CMP      r0,#1
000194  d147              BNE      |L137.550|
;;;1467   										
;;;1468   
;;;1469   								
;;;1470   								memset(data2,0,300);
000196  21ff              MOVS     r1,#0xff
000198  312d              ADDS     r1,r1,#0x2d
00019a  48c0              LDR      r0,|L137.1180|
00019c  f7fffffe          BL       __aeabi_memclr
;;;1471   								sprintf(data2,"\nThere is an Emergency please help:\nCoordinates:%sN,%sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,lati,'%',longi);	
0001a0  48bf              LDR      r0,|L137.1184|
0001a2  2125              MOVS     r1,#0x25
0001a4  4abf              LDR      r2,|L137.1188|
0001a6  4603              MOV      r3,r0
0001a8  9200              STR      r2,[sp,#0]
0001aa  9101              STR      r1,[sp,#4]
0001ac  9002              STR      r0,[sp,#8]
0001ae  49be              LDR      r1,|L137.1192|
0001b0  48ba              LDR      r0,|L137.1180|
0001b2  f7fffffe          BL       __2sprintf
;;;1472   								memset(num2,0,30);
0001b6  211e              MOVS     r1,#0x1e
0001b8  48a6              LDR      r0,|L137.1108|
0001ba  f7fffffe          BL       __aeabi_memclr
;;;1473   								send_GSM("\r\nAT+CPBR=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001be  489b              LDR      r0,|L137.1068|
0001c0  6800              LDR      r0,[r0,#0]  ; tmeout
0001c2  4b9b              LDR      r3,|L137.1072|
0001c4  4a9b              LDR      r2,|L137.1076|
0001c6  499c              LDR      r1,|L137.1080|
0001c8  9000              STR      r0,[sp,#0]
0001ca  48b8              LDR      r0,|L137.1196|
0001cc  f7fffffe          BL       send_GSM
;;;1474   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
0001d0  48a0              LDR      r0,|L137.1108|
0001d2  2122              MOVS     r1,#0x22
0001d4  460b              MOV      r3,r1
0001d6  2202              MOVS     r2,#2
0001d8  9100              STR      r1,[sp,#0]
0001da  9001              STR      r0,[sp,#4]
0001dc  2101              MOVS     r1,#1
0001de  489e              LDR      r0,|L137.1112|
0001e0  f7fffffe          BL       parse_g
;;;1475   								send_message(data2);
0001e4  48ad              LDR      r0,|L137.1180|
0001e6  f7fffffe          BL       send_message
;;;1476   								memset(num2,0,30);
0001ea  211e              MOVS     r1,#0x1e
0001ec  4899              LDR      r0,|L137.1108|
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1477   								send_GSM("\r\nAT+CPBR=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001f2  488e              LDR      r0,|L137.1068|
0001f4  6800              LDR      r0,[r0,#0]  ; tmeout
0001f6  4b8e              LDR      r3,|L137.1072|
0001f8  4a8e              LDR      r2,|L137.1076|
0001fa  498f              LDR      r1,|L137.1080|
0001fc  9000              STR      r0,[sp,#0]
0001fe  48ac              LDR      r0,|L137.1200|
000200  f7fffffe          BL       send_GSM
;;;1478   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
000204  4893              LDR      r0,|L137.1108|
000206  2122              MOVS     r1,#0x22
000208  460b              MOV      r3,r1
00020a  2202              MOVS     r2,#2
00020c  9100              STR      r1,[sp,#0]
00020e  9001              STR      r0,[sp,#4]
000210  2101              MOVS     r1,#1
000212  4891              LDR      r0,|L137.1112|
000214  f7fffffe          BL       parse_g
;;;1479   								send_message(data2);								
000218  48a0              LDR      r0,|L137.1180|
00021a  f7fffffe          BL       send_message
;;;1480   								send_SOS=0;
00021e  2000              MOVS     r0,#0
000220  499d              LDR      r1,|L137.1176|
000222  6008              STR      r0,[r1,#0]  ; send_SOS
                  |L137.548|
000224  e35d              B        |L137.2274|
                  |L137.550|
;;;1481   							}
;;;1482   							else if(cond1 && cond2)
000226  486f              LDR      r0,|L137.996|
000228  6800              LDR      r0,[r0,#0]  ; cond1
00022a  2800              CMP      r0,#0
00022c  d022              BEQ      |L137.628|
00022e  486e              LDR      r0,|L137.1000|
000230  6800              LDR      r0,[r0,#0]  ; cond2
000232  2800              CMP      r0,#0
000234  d01e              BEQ      |L137.628|
;;;1483   							{
;;;1484   								memset(data2,0,300);
000236  21ff              MOVS     r1,#0xff
000238  312d              ADDS     r1,r1,#0x2d
00023a  4898              LDR      r0,|L137.1180|
00023c  f7fffffe          BL       __aeabi_memclr
;;;1485   								sprintf(data2,"\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);	
000240  4897              LDR      r0,|L137.1184|
000242  2125              MOVS     r1,#0x25
000244  4a97              LDR      r2,|L137.1188|
000246  4b9b              LDR      r3,|L137.1204|
000248  9300              STR      r3,[sp,#0]
00024a  9201              STR      r2,[sp,#4]
00024c  9102              STR      r1,[sp,#8]
00024e  9003              STR      r0,[sp,#0xc]
000250  4603              MOV      r3,r0
000252  4999              LDR      r1,|L137.1208|
000254  4891              LDR      r0,|L137.1180|
000256  f7fffffe          BL       __2sprintf
;;;1486   
;;;1487   								{send_message(data2);}
00025a  4890              LDR      r0,|L137.1180|
00025c  f7fffffe          BL       send_message
;;;1488   
;;;1489   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000260  4872              LDR      r0,|L137.1068|
000262  6800              LDR      r0,[r0,#0]  ; tmeout
000264  4b72              LDR      r3,|L137.1072|
000266  4a73              LDR      r2,|L137.1076|
000268  4973              LDR      r1,|L137.1080|
00026a  9000              STR      r0,[sp,#0]
00026c  4893              LDR      r0,|L137.1212|
00026e  f7fffffe          BL       send_GSM
000272  e7d7              B        |L137.548|
                  |L137.628|
;;;1490   								
;;;1491   								
;;;1492   							}
;;;1493   	
;;;1494   							else if(cond1 && cond3)
000274  485b              LDR      r0,|L137.996|
000276  6800              LDR      r0,[r0,#0]  ; cond1
000278  2800              CMP      r0,#0
00027a  d026              BEQ      |L137.714|
00027c  485b              LDR      r0,|L137.1004|
00027e  6800              LDR      r0,[r0,#0]  ; cond3
000280  2800              CMP      r0,#0
000282  d022              BEQ      |L137.714|
;;;1495   							{
;;;1496   								memset(at_,0,100);
000284  2164              MOVS     r1,#0x64
000286  488e              LDR      r0,|L137.1216|
000288  f7fffffe          BL       __aeabi_memclr
;;;1497   								memset(interval,0,5);
00028c  2105              MOVS     r1,#5
00028e  488d              LDR      r0,|L137.1220|
000290  f7fffffe          BL       __aeabi_memclr
;;;1498   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', interval);		
000294  488b              LDR      r0,|L137.1220|
000296  210d              MOVS     r1,#0xd
000298  2320              MOVS     r3,#0x20
00029a  2205              MOVS     r2,#5
00029c  9100              STR      r1,[sp,#0]
00029e  9001              STR      r0,[sp,#4]
0002a0  2103              MOVS     r1,#3
0002a2  486d              LDR      r0,|L137.1112|
0002a4  f7fffffe          BL       parse_g
;;;1499   								int_erval=myAtoi(interval);
0002a8  4886              LDR      r0,|L137.1220|
0002aa  f7fffffe          BL       myAtoi
0002ae  4986              LDR      r1,|L137.1224|
0002b0  6008              STR      r0,[r1,#0]  ; int_erval
;;;1500   								save_interval();			
0002b2  f7fffffe          BL       save_interval
;;;1501   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0002b6  485d              LDR      r0,|L137.1068|
0002b8  6800              LDR      r0,[r0,#0]  ; tmeout
0002ba  4b5d              LDR      r3,|L137.1072|
0002bc  4a5d              LDR      r2,|L137.1076|
0002be  495e              LDR      r1,|L137.1080|
0002c0  9000              STR      r0,[sp,#0]
0002c2  487e              LDR      r0,|L137.1212|
0002c4  f7fffffe          BL       send_GSM
0002c8  e7ac              B        |L137.548|
                  |L137.714|
;;;1502   
;;;1503   								
;;;1504   							}				
;;;1505   
;;;1506   			
;;;1507   							else if(cond12 && cond4)
0002ca  4851              LDR      r0,|L137.1040|
0002cc  6800              LDR      r0,[r0,#0]  ; cond12
0002ce  2800              CMP      r0,#0
0002d0  d07a              BEQ      |L137.968|
0002d2  4847              LDR      r0,|L137.1008|
0002d4  6800              LDR      r0,[r0,#0]  ; cond4
0002d6  2800              CMP      r0,#0
0002d8  d076              BEQ      |L137.968|
;;;1508   							{
;;;1509   								memset( apn,0,25);
0002da  2119              MOVS     r1,#0x19
0002dc  487b              LDR      r0,|L137.1228|
0002de  f7fffffe          BL       __aeabi_memclr4
;;;1510   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', apn);			
0002e2  487a              LDR      r0,|L137.1228|
0002e4  210d              MOVS     r1,#0xd
0002e6  2320              MOVS     r3,#0x20
0002e8  2205              MOVS     r2,#5
0002ea  9100              STR      r1,[sp,#0]
0002ec  9001              STR      r0,[sp,#4]
0002ee  2103              MOVS     r1,#3
0002f0  4859              LDR      r0,|L137.1112|
0002f2  f7fffffe          BL       parse_g
;;;1511   								saveapn();								
0002f6  f7fffffe          BL       saveapn
;;;1512   								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
0002fa  484c              LDR      r0,|L137.1068|
0002fc  6800              LDR      r0,[r0,#0]  ; tmeout
0002fe  4b4c              LDR      r3,|L137.1072|
000300  4a4c              LDR      r2,|L137.1076|
000302  4973              LDR      r1,|L137.1232|
000304  9000              STR      r0,[sp,#0]
000306  4873              LDR      r0,|L137.1236|
000308  f7fffffe          BL       send_GSM
;;;1513   								send_GSM("\nAT+FSCREATE=D:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00030c  4847              LDR      r0,|L137.1068|
00030e  6800              LDR      r0,[r0,#0]  ; tmeout
000310  4b47              LDR      r3,|L137.1072|
000312  4a48              LDR      r2,|L137.1076|
000314  496e              LDR      r1,|L137.1232|
000316  9000              STR      r0,[sp,#0]
000318  486f              LDR      r0,|L137.1240|
00031a  f7fffffe          BL       send_GSM
;;;1514   								send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00031e  4843              LDR      r0,|L137.1068|
000320  6800              LDR      r0,[r0,#0]  ; tmeout
000322  4b43              LDR      r3,|L137.1072|
000324  4a43              LDR      r2,|L137.1076|
000326  496a              LDR      r1,|L137.1232|
000328  9000              STR      r0,[sp,#0]
00032a  486c              LDR      r0,|L137.1244|
00032c  f7fffffe          BL       send_GSM
;;;1515   								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000330  483e              LDR      r0,|L137.1068|
000332  6800              LDR      r0,[r0,#0]  ; tmeout
000334  4b3e              LDR      r3,|L137.1072|
000336  4a3f              LDR      r2,|L137.1076|
000338  4965              LDR      r1,|L137.1232|
00033a  9000              STR      r0,[sp,#0]
00033c  4868              LDR      r0,|L137.1248|
00033e  f7fffffe          BL       send_GSM
;;;1516   								send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000342  483a              LDR      r0,|L137.1068|
000344  6800              LDR      r0,[r0,#0]  ; tmeout
000346  4b3a              LDR      r3,|L137.1072|
000348  4a3a              LDR      r2,|L137.1076|
00034a  4961              LDR      r1,|L137.1232|
00034c  9000              STR      r0,[sp,#0]
00034e  4865              LDR      r0,|L137.1252|
000350  f7fffffe          BL       send_GSM
;;;1517   
;;;1518   								memset(ip,0,100);
000354  2164              MOVS     r1,#0x64
000356  4864              LDR      r0,|L137.1256|
000358  f7fffffe          BL       __aeabi_memclr
;;;1519   								memset(port,0,10);
00035c  210a              MOVS     r1,#0xa
00035e  4863              LDR      r0,|L137.1260|
000360  f7fffffe          BL       __aeabi_memclr
;;;1520   								strcat (ip, "rudra.jellyfishtele.com");
000364  4962              LDR      r1,|L137.1264|
000366  4860              LDR      r0,|L137.1256|
000368  f7fffffe          BL       strcat
;;;1521   								strcat (port, "5555");		
00036c  4961              LDR      r1,|L137.1268|
00036e  485f              LDR      r0,|L137.1260|
000370  f7fffffe          BL       strcat
;;;1522   								memcpy (interval, "5", 1);										
000374  4853              LDR      r0,|L137.1220|
000376  4960              LDR      r1,|L137.1272|
000378  7809              LDRB     r1,[r1,#0]
00037a  7001              STRB     r1,[r0,#0]
;;;1523   								save_ip_port();
00037c  f7fffffe          BL       save_ip_port
;;;1524   								ignstaton();
000380  f7fffffe          BL       ignstaton
;;;1525   
;;;1526   								save_interval();	
000384  f7fffffe          BL       save_interval
;;;1527   								int_erval=myAtoi(interval);		
000388  484e              LDR      r0,|L137.1220|
00038a  f7fffffe          BL       myAtoi
00038e  494e              LDR      r1,|L137.1224|
000390  6008              STR      r0,[r1,#0]  ; int_erval
;;;1528   								savecursord();
000392  f7fffffe          BL       savecursord
;;;1529   
;;;1530   			//					printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
;;;1531   								
;;;1532   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000396  4825              LDR      r0,|L137.1068|
000398  6800              LDR      r0,[r0,#0]  ; tmeout
00039a  4b25              LDR      r3,|L137.1072|
00039c  4a2b              LDR      r2,|L137.1100|
00039e  494c              LDR      r1,|L137.1232|
0003a0  9000              STR      r0,[sp,#0]
0003a2  4856              LDR      r0,|L137.1276|
0003a4  f7fffffe          BL       send_GSM
;;;1533   
;;;1534   								
;;;1535   								
;;;1536   		RESET_OFF;delay(10);
0003a8  2020              MOVS     r0,#0x20
0003aa  491f              LDR      r1,|L137.1064|
0003ac  3940              SUBS     r1,r1,#0x40
0003ae  6088              STR      r0,[r1,#8]
0003b0  200a              MOVS     r0,#0xa
0003b2  f7fffffe          BL       delay
;;;1537   		RESET_ON;delay(10);		
0003b6  2020              MOVS     r0,#0x20
0003b8  491b              LDR      r1,|L137.1064|
0003ba  3940              SUBS     r1,r1,#0x40
0003bc  6048              STR      r0,[r1,#4]
0003be  200a              MOVS     r0,#0xa
0003c0  f7fffffe          BL       delay
0003c4  e72e              B        |L137.548|
0003c6  e7ff              B        |L137.968|
                  |L137.968|
;;;1538   
;;;1539   								
;;;1540   								
;;;1541   							}
;;;1542   	
;;;1543   						else if(cond8)
0003c8  480d              LDR      r0,|L137.1024|
0003ca  6800              LDR      r0,[r0,#0]  ; cond8
0003cc  2800              CMP      r0,#0
0003ce  d007              BEQ      |L137.992|
;;;1544   							{
;;;1545   								
;;;1546   									memset(at_,0,100);
0003d0  2164              MOVS     r1,#0x64
0003d2  483b              LDR      r0,|L137.1216|
0003d4  f7fffffe          BL       __aeabi_memclr
;;;1547   									for(k=0;k<450;k++)
0003d8  2000              MOVS     r0,#0
0003da  4949              LDR      r1,|L137.1280|
0003dc  6008              STR      r0,[r1,#0]  ; k
0003de  e0e1              B        |L137.1444|
                  |L137.992|
0003e0  e109              B        |L137.1526|
0003e2  0000              DCW      0x0000
                  |L137.996|
                          DCD      cond1
                  |L137.1000|
                          DCD      cond2
                  |L137.1004|
                          DCD      cond3
                  |L137.1008|
                          DCD      cond4
                  |L137.1012|
                          DCD      cond5
                  |L137.1016|
                          DCD      cond6
                  |L137.1020|
                          DCD      cond7
                  |L137.1024|
                          DCD      cond8
                  |L137.1028|
                          DCD      cond9
                  |L137.1032|
                          DCD      cond10
                  |L137.1036|
                          DCD      cond11
                  |L137.1040|
                          DCD      cond12
                  |L137.1044|
                          DCD      cond13
                  |L137.1048|
                          DCD      cond14
                  |L137.1052|
                          DCD      cond15
                  |L137.1056|
                          DCD      ringflag
                  |L137.1060|
                          DCD      sleep_flag
                  |L137.1064|
                          DCD      0x400ff0c0
                  |L137.1068|
                          DCD      tmeout
                  |L137.1072|
                          DCD      ||.conststring||+0x10
                  |L137.1076|
                          DCD      ||.conststring||+0x18
                  |L137.1080|
                          DCD      ||.conststring||+0x70
                  |L137.1084|
                          DCD      ||.conststring||+0x268
                  |L137.1088|
                          DCD      ||.conststring||+0x270
                  |L137.1092|
                          DCD      ||.conststring||+0x27c
                  |L137.1096|
                          DCD      ||.conststring||+0x28c
                  |L137.1100|
                          DCD      ||.conststring||+0xe0
                  |L137.1104|
                          DCD      ||.conststring||+0x29c
                  |L137.1108|
                          DCD      num2
                  |L137.1112|
                          DCD      uart_string_gsm
                  |L137.1116|
                          DCD      ||.conststring||+0x2ac
                  |L137.1120|
                          DCD      ||.conststring||+0x2b4
                  |L137.1124|
                          DCD      ||.conststring||+0x2c0
                  |L137.1128|
                          DCD      ||.conststring||+0x2cc
                  |L137.1132|
                          DCD      ||.conststring||+0x2d4
                  |L137.1136|
                          DCD      ||.conststring||+0x2dc
                  |L137.1140|
                          DCD      ||.conststring||+0x2e4
                  |L137.1144|
                          DCD      ||.conststring||+0x2ec
                  |L137.1148|
                          DCD      ||.conststring||+0x2f4
                  |L137.1152|
                          DCD      ||.conststring||+0x2fc
                  |L137.1156|
                          DCD      ||.conststring||+0x300
                  |L137.1160|
                          DCD      ||.conststring||+0x308
                  |L137.1164|
                          DCD      ||.conststring||+0x310
                  |L137.1168|
                          DCD      ||.conststring||+0x31c
                  |L137.1172|
                          DCD      ||.conststring||+0x32c
                  |L137.1176|
                          DCD      send_SOS
                  |L137.1180|
                          DCD      data2
                  |L137.1184|
                          DCD      longi
                  |L137.1188|
                          DCD      lati
                  |L137.1192|
                          DCD      ||.conststring||+0x334
                  |L137.1196|
                          DCD      ||.conststring||+0x3a8
                  |L137.1200|
                          DCD      ||.conststring||+0x3b8
                  |L137.1204|
                          DCD      velocity
                  |L137.1208|
                          DCD      ||.conststring||+0x3c8
                  |L137.1212|
                          DCD      ||.conststring||+0x430
                  |L137.1216|
                          DCD      at_
                  |L137.1220|
                          DCD      interval
                  |L137.1224|
                          DCD      int_erval
                  |L137.1228|
                          DCD      apn
                  |L137.1232|
                          DCD      ||.conststring||+0x2c
                  |L137.1236|
                          DCD      ||.conststring||+0x84
                  |L137.1240|
                          DCD      ||.conststring||+0x440
                  |L137.1244|
                          DCD      ||.conststring||+0x45c
                  |L137.1248|
                          DCD      ||.conststring||+0x1d4
                  |L137.1252|
                          DCD      ||.conststring||+0x30
                  |L137.1256|
                          DCD      ||ip||
                  |L137.1260|
                          DCD      port
                  |L137.1264|
                          DCD      ||.conststring||+0x478
                  |L137.1268|
                          DCD      ||.conststring||+0x490
                  |L137.1272|
                          DCD      ||.conststring||+0x498
                  |L137.1276|
                          DCD      ||.conststring||+0x49c
                  |L137.1280|
                          DCD      k
                  |L137.1284|
;;;1548   									{
;;;1549   										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
000504  48f8              LDR      r0,|L137.2280|
000506  6800              LDR      r0,[r0,#0]  ; k
000508  1e40              SUBS     r0,r0,#1
00050a  49f8              LDR      r1,|L137.2284|
00050c  5c08              LDRB     r0,[r1,r0]
00050e  2820              CMP      r0,#0x20
000510  d143              BNE      |L137.1434|
000512  48f5              LDR      r0,|L137.2280|
000514  6800              LDR      r0,[r0,#0]  ; k
000516  1e80              SUBS     r0,r0,#2
000518  5c08              LDRB     r0,[r1,r0]
00051a  2847              CMP      r0,#0x47
00051c  d13d              BNE      |L137.1434|
00051e  48f2              LDR      r0,|L137.2280|
000520  6800              LDR      r0,[r0,#0]  ; k
000522  1ec0              SUBS     r0,r0,#3
000524  5c08              LDRB     r0,[r1,r0]
000526  2855              CMP      r0,#0x55
000528  d137              BNE      |L137.1434|
;;;1550   										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
00052a  48ef              LDR      r0,|L137.2280|
00052c  6800              LDR      r0,[r0,#0]  ; k
00052e  1f00              SUBS     r0,r0,#4
000530  5c08              LDRB     r0,[r1,r0]
000532  2842              CMP      r0,#0x42
000534  d131              BNE      |L137.1434|
000536  48ec              LDR      r0,|L137.2280|
000538  6800              LDR      r0,[r0,#0]  ; k
00053a  1f40              SUBS     r0,r0,#5
00053c  5c08              LDRB     r0,[r1,r0]
00053e  2845              CMP      r0,#0x45
000540  d12b              BNE      |L137.1434|
000542  48e9              LDR      r0,|L137.2280|
000544  6800              LDR      r0,[r0,#0]  ; k
000546  1f80              SUBS     r0,r0,#6
000548  5c08              LDRB     r0,[r1,r0]
00054a  2844              CMP      r0,#0x44
00054c  d125              BNE      |L137.1434|
;;;1551   										{
;;;1552   											for(i=0;i<100;i++)
00054e  2000              MOVS     r0,#0
000550  49e7              LDR      r1,|L137.2288|
000552  6008              STR      r0,[r1,#0]  ; i
000554  e011              B        |L137.1402|
                  |L137.1366|
;;;1553   											{
;;;1554   												at_[i]=uart_string_gsm[k];
000556  48e5              LDR      r0,|L137.2284|
000558  49e3              LDR      r1,|L137.2280|
00055a  6809              LDR      r1,[r1,#0]  ; k
00055c  5c40              LDRB     r0,[r0,r1]
00055e  49e5              LDR      r1,|L137.2292|
000560  4ae3              LDR      r2,|L137.2288|
000562  6812              LDR      r2,[r2,#0]  ; i
000564  5488              STRB     r0,[r1,r2]
;;;1555   												k++;
000566  48e0              LDR      r0,|L137.2280|
000568  6800              LDR      r0,[r0,#0]  ; k
00056a  1c40              ADDS     r0,r0,#1
00056c  49de              LDR      r1,|L137.2280|
00056e  6008              STR      r0,[r1,#0]  ; k
000570  48df              LDR      r0,|L137.2288|
000572  6800              LDR      r0,[r0,#0]            ;1552  ; i
000574  1c40              ADDS     r0,r0,#1              ;1552
000576  49de              LDR      r1,|L137.2288|
000578  6008              STR      r0,[r1,#0]            ;1552  ; i
                  |L137.1402|
00057a  48dd              LDR      r0,|L137.2288|
00057c  6800              LDR      r0,[r0,#0]            ;1552  ; i
00057e  2864              CMP      r0,#0x64              ;1552
000580  dbe9              BLT      |L137.1366|
;;;1556   											}	
;;;1557   										at_[i+1]='\r';
000582  210d              MOVS     r1,#0xd
000584  4adb              LDR      r2,|L137.2292|
000586  48da              LDR      r0,|L137.2288|
000588  6800              LDR      r0,[r0,#0]  ; i
00058a  1c40              ADDS     r0,r0,#1
00058c  5411              STRB     r1,[r2,r0]
;;;1558   										at_[i+2]='\n';	
00058e  220a              MOVS     r2,#0xa
000590  49d8              LDR      r1,|L137.2292|
000592  48d7              LDR      r0,|L137.2288|
000594  6800              LDR      r0,[r0,#0]  ; i
000596  1c80              ADDS     r0,r0,#2
000598  540a              STRB     r2,[r1,r0]
                  |L137.1434|
00059a  48d3              LDR      r0,|L137.2280|
00059c  6800              LDR      r0,[r0,#0]            ;1547  ; k
00059e  1c40              ADDS     r0,r0,#1              ;1547
0005a0  49d1              LDR      r1,|L137.2280|
0005a2  6008              STR      r0,[r1,#0]            ;1547  ; k
                  |L137.1444|
0005a4  48d0              LDR      r0,|L137.2280|
0005a6  6800              LDR      r0,[r0,#0]            ;1547  ; k
0005a8  21ff              MOVS     r1,#0xff              ;1547
0005aa  31c3              ADDS     r1,r1,#0xc3           ;1547
0005ac  4288              CMP      r0,r1                 ;1547
0005ae  dba9              BLT      |L137.1284|
;;;1559   										}
;;;1560   										else{}
;;;1561   									}
;;;1562   									
;;;1563   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0005b0  48d1              LDR      r0,|L137.2296|
0005b2  6800              LDR      r0,[r0,#0]  ; tmeout
0005b4  4bd1              LDR      r3,|L137.2300|
0005b6  4ad2              LDR      r2,|L137.2304|
0005b8  49d2              LDR      r1,|L137.2308|
0005ba  9000              STR      r0,[sp,#0]
0005bc  48d2              LDR      r0,|L137.2312|
0005be  f7fffffe          BL       send_GSM
;;;1564   									  send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);		
0005c2  48cd              LDR      r0,|L137.2296|
0005c4  6800              LDR      r0,[r0,#0]  ; tmeout
0005c6  4bcd              LDR      r3,|L137.2300|
0005c8  4acd              LDR      r2,|L137.2304|
0005ca  49ce              LDR      r1,|L137.2308|
0005cc  9000              STR      r0,[sp,#0]
0005ce  48c9              LDR      r0,|L137.2292|
0005d0  f7fffffe          BL       send_GSM
;;;1565   										memset(data2,0,strlen(data2));
0005d4  48cd              LDR      r0,|L137.2316|
0005d6  f7fffffe          BL       strlen
0005da  4604              MOV      r4,r0
0005dc  4621              MOV      r1,r4
0005de  48cb              LDR      r0,|L137.2316|
0005e0  f7fffffe          BL       __aeabi_memclr
;;;1566   										sprintf(data2,"%s",uart_string_gsm);	
0005e4  4ac1              LDR      r2,|L137.2284|
0005e6  49ca              LDR      r1,|L137.2320|
0005e8  48c8              LDR      r0,|L137.2316|
0005ea  f7fffffe          BL       __2sprintf
;;;1567   										send_message(data2);
0005ee  48c7              LDR      r0,|L137.2316|
0005f0  f7fffffe          BL       send_message
0005f4  e3ed              B        |L137.3538|
                  |L137.1526|
;;;1568   										
;;;1569   									
;;;1570   								
;;;1571   							}
;;;1572   							
;;;1573   							else if( cond1 && cond9)
0005f6  48c7              LDR      r0,|L137.2324|
0005f8  6800              LDR      r0,[r0,#0]  ; cond1
0005fa  2800              CMP      r0,#0
                  |L137.1532|
0005fc  d07e              BEQ      |L137.1788|
0005fe  48c6              LDR      r0,|L137.2328|
000600  6800              LDR      r0,[r0,#0]  ; cond9
000602  2800              CMP      r0,#0
000604  d0fa              BEQ      |L137.1532|
;;;1574   							{
;;;1575   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000606  48bc              LDR      r0,|L137.2296|
000608  6800              LDR      r0,[r0,#0]  ; tmeout
00060a  4bbc              LDR      r3,|L137.2300|
00060c  4abc              LDR      r2,|L137.2304|
00060e  49bd              LDR      r1,|L137.2308|
000610  9000              STR      r0,[sp,#0]
000612  48bd              LDR      r0,|L137.2312|
000614  f7fffffe          BL       send_GSM
;;;1576   
;;;1577   strcat(data,"\n");	
000618  49c0              LDR      r1,|L137.2332|
00061a  48c1              LDR      r0,|L137.2336|
00061c  f7fffffe          BL       strcat
;;;1578   GPS_COLLECT();
000620  f7fffffe          BL       GPS_COLLECT
;;;1579   strcat(data,"CH\n");	
000624  49bf              LDR      r1,|L137.2340|
000626  48be              LDR      r0,|L137.2336|
000628  f7fffffe          BL       strcat
;;;1580   
;;;1581   								
;;;1582   
;;;1583   	delay(100);
00062c  2064              MOVS     r0,#0x64
00062e  f7fffffe          BL       delay
;;;1584   		clear();//memset(uart_string_gsm,0,5000);
000632  f7fffffe          BL       clear
;;;1585   	
;;;1586   	memset(at_,0,100);
000636  2164              MOVS     r1,#0x64
000638  48ae              LDR      r0,|L137.2292|
00063a  f7fffffe          BL       __aeabi_memclr
;;;1587   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00063e  48b8              LDR      r0,|L137.2336|
000640  f7fffffe          BL       strlen
000644  1c44              ADDS     r4,r0,#1
000646  4623              MOV      r3,r4
000648  4ab7              LDR      r2,|L137.2344|
00064a  49b8              LDR      r1,|L137.2348|
00064c  48a9              LDR      r0,|L137.2292|
00064e  f7fffffe          BL       __2sprintf
;;;1588   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000652  2005              MOVS     r0,#5
000654  4bb6              LDR      r3,|L137.2352|
000656  4aaa              LDR      r2,|L137.2304|
000658  49b6              LDR      r1,|L137.2356|
00065a  9000              STR      r0,[sp,#0]
00065c  48a5              LDR      r0,|L137.2292|
00065e  f7fffffe          BL       send_SD
;;;1589   if(strstr(uart_string_gsm,"ERROR")){
000662  49b3              LDR      r1,|L137.2352|
000664  48a1              LDR      r0,|L137.2284|
000666  f7fffffe          BL       strstr
00066a  2800              CMP      r0,#0
00066c  d004              BEQ      |L137.1656|
;;;1590   	drive[0]='C';drive[1]=':';
00066e  2043              MOVS     r0,#0x43
000670  49ad              LDR      r1,|L137.2344|
000672  7008              STRB     r0,[r1,#0]
000674  203a              MOVS     r0,#0x3a
000676  7048              STRB     r0,[r1,#1]
                  |L137.1656|
;;;1591   }	
;;;1592   clear();	
000678  f7fffffe          BL       clear
;;;1593   									k2=0;									//string array counter for uart 1
00067c  2000              MOVS     r0,#0
00067e  49ae              LDR      r1,|L137.2360|
000680  6008              STR      r0,[r1,#0]  ; k2
;;;1594   									tout=0;	
000682  49ae              LDR      r1,|L137.2364|
000684  6008              STR      r0,[r1,#0]  ; tout
;;;1595   		for(k=0;k<strlen(data);k++)
000686  4998              LDR      r1,|L137.2280|
000688  6008              STR      r0,[r1,#0]  ; k
00068a  e00b              B        |L137.1700|
                  |L137.1676|
;;;1596   		{
;;;1597   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00068c  48a4              LDR      r0,|L137.2336|
00068e  4a96              LDR      r2,|L137.2280|
000690  6812              LDR      r2,[r2,#0]  ; k
000692  5c81              LDRB     r1,[r0,r2]
000694  48aa              LDR      r0,|L137.2368|
000696  f7fffffe          BL       uart_putchar
00069a  4893              LDR      r0,|L137.2280|
00069c  6800              LDR      r0,[r0,#0]            ;1595  ; k
00069e  1c40              ADDS     r0,r0,#1              ;1595
0006a0  4991              LDR      r1,|L137.2280|
0006a2  6008              STR      r0,[r1,#0]            ;1595  ; k
                  |L137.1700|
0006a4  489e              LDR      r0,|L137.2336|
0006a6  f7fffffe          BL       strlen
0006aa  498f              LDR      r1,|L137.2280|
0006ac  6809              LDR      r1,[r1,#0]            ;1595  ; k
0006ae  4288              CMP      r0,r1                 ;1595
0006b0  d8ec              BHI      |L137.1676|
;;;1598   		}	
;;;1599   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0006b2  210a              MOVS     r1,#0xa
0006b4  48a2              LDR      r0,|L137.2368|
0006b6  f7fffffe          BL       uart_putchar
0006ba  210a              MOVS     r1,#0xa
0006bc  48a0              LDR      r0,|L137.2368|
0006be  f7fffffe          BL       uart_putchar
0006c2  210a              MOVS     r1,#0xa
0006c4  489e              LDR      r0,|L137.2368|
0006c6  f7fffffe          BL       uart_putchar
0006ca  210a              MOVS     r1,#0xa
0006cc  489c              LDR      r0,|L137.2368|
0006ce  f7fffffe          BL       uart_putchar
0006d2  210a              MOVS     r1,#0xa
0006d4  489a              LDR      r0,|L137.2368|
0006d6  f7fffffe          BL       uart_putchar
0006da  210a              MOVS     r1,#0xa
0006dc  4898              LDR      r0,|L137.2368|
0006de  f7fffffe          BL       uart_putchar
0006e2  210a              MOVS     r1,#0xa
0006e4  4896              LDR      r0,|L137.2368|
0006e6  f7fffffe          BL       uart_putchar
0006ea  210a              MOVS     r1,#0xa
0006ec  4894              LDR      r0,|L137.2368|
0006ee  f7fffffe          BL       uart_putchar
0006f2  210a              MOVS     r1,#0xa
0006f4  4892              LDR      r0,|L137.2368|
0006f6  f7fffffe          BL       uart_putchar
0006fa  e000              B        |L137.1790|
                  |L137.1788|
0006fc  e126              B        |L137.2380|
                  |L137.1790|
0006fe  210a              MOVS     r1,#0xa
000700  488f              LDR      r0,|L137.2368|
000702  f7fffffe          BL       uart_putchar
000706  210a              MOVS     r1,#0xa
000708  488d              LDR      r0,|L137.2368|
00070a  f7fffffe          BL       uart_putchar
00070e  210a              MOVS     r1,#0xa
000710  488b              LDR      r0,|L137.2368|
000712  f7fffffe          BL       uart_putchar
000716  210a              MOVS     r1,#0xa
000718  4889              LDR      r0,|L137.2368|
00071a  f7fffffe          BL       uart_putchar
00071e  210a              MOVS     r1,#0xa
000720  4887              LDR      r0,|L137.2368|
000722  f7fffffe          BL       uart_putchar
000726  210a              MOVS     r1,#0xa
000728  4885              LDR      r0,|L137.2368|
00072a  f7fffffe          BL       uart_putchar
00072e  210a              MOVS     r1,#0xa
000730  4883              LDR      r0,|L137.2368|
000732  f7fffffe          BL       uart_putchar
000736  210a              MOVS     r1,#0xa
000738  4881              LDR      r0,|L137.2368|
00073a  f7fffffe          BL       uart_putchar
00073e  210a              MOVS     r1,#0xa
000740  487f              LDR      r0,|L137.2368|
000742  f7fffffe          BL       uart_putchar
000746  210a              MOVS     r1,#0xa
000748  487d              LDR      r0,|L137.2368|
00074a  f7fffffe          BL       uart_putchar
00074e  210a              MOVS     r1,#0xa
000750  487b              LDR      r0,|L137.2368|
000752  f7fffffe          BL       uart_putchar
000756  210a              MOVS     r1,#0xa
000758  4879              LDR      r0,|L137.2368|
00075a  f7fffffe          BL       uart_putchar
00075e  210a              MOVS     r1,#0xa
000760  4877              LDR      r0,|L137.2368|
000762  f7fffffe          BL       uart_putchar
000766  210a              MOVS     r1,#0xa
000768  4875              LDR      r0,|L137.2368|
00076a  f7fffffe          BL       uart_putchar
00076e  210a              MOVS     r1,#0xa
000770  4873              LDR      r0,|L137.2368|
000772  f7fffffe          BL       uart_putchar
000776  210a              MOVS     r1,#0xa
000778  4871              LDR      r0,|L137.2368|
00077a  f7fffffe          BL       uart_putchar
00077e  210a              MOVS     r1,#0xa
000780  486f              LDR      r0,|L137.2368|
000782  f7fffffe          BL       uart_putchar
000786  210a              MOVS     r1,#0xa
000788  486d              LDR      r0,|L137.2368|
00078a  f7fffffe          BL       uart_putchar
00078e  210a              MOVS     r1,#0xa
000790  486b              LDR      r0,|L137.2368|
000792  f7fffffe          BL       uart_putchar
000796  210a              MOVS     r1,#0xa
000798  4869              LDR      r0,|L137.2368|
00079a  f7fffffe          BL       uart_putchar
00079e  210a              MOVS     r1,#0xa
0007a0  4867              LDR      r0,|L137.2368|
0007a2  f7fffffe          BL       uart_putchar
0007a6  210a              MOVS     r1,#0xa
0007a8  4865              LDR      r0,|L137.2368|
0007aa  f7fffffe          BL       uart_putchar
0007ae  210a              MOVS     r1,#0xa
0007b0  4863              LDR      r0,|L137.2368|
0007b2  f7fffffe          BL       uart_putchar
0007b6  210a              MOVS     r1,#0xa
0007b8  4861              LDR      r0,|L137.2368|
0007ba  f7fffffe          BL       uart_putchar
0007be  210a              MOVS     r1,#0xa
0007c0  485f              LDR      r0,|L137.2368|
0007c2  f7fffffe          BL       uart_putchar
0007c6  210a              MOVS     r1,#0xa
0007c8  485d              LDR      r0,|L137.2368|
0007ca  f7fffffe          BL       uart_putchar
0007ce  210a              MOVS     r1,#0xa
0007d0  485b              LDR      r0,|L137.2368|
0007d2  f7fffffe          BL       uart_putchar
0007d6  210a              MOVS     r1,#0xa
0007d8  4859              LDR      r0,|L137.2368|
0007da  f7fffffe          BL       uart_putchar
0007de  210a              MOVS     r1,#0xa
0007e0  4857              LDR      r0,|L137.2368|
0007e2  f7fffffe          BL       uart_putchar
0007e6  210a              MOVS     r1,#0xa
0007e8  4855              LDR      r0,|L137.2368|
0007ea  f7fffffe          BL       uart_putchar
0007ee  210a              MOVS     r1,#0xa
0007f0  4853              LDR      r0,|L137.2368|
0007f2  f7fffffe          BL       uart_putchar
0007f6  210a              MOVS     r1,#0xa
0007f8  4851              LDR      r0,|L137.2368|
0007fa  f7fffffe          BL       uart_putchar
0007fe  210a              MOVS     r1,#0xa
000800  484f              LDR      r0,|L137.2368|
000802  f7fffffe          BL       uart_putchar
000806  210a              MOVS     r1,#0xa
000808  484d              LDR      r0,|L137.2368|
00080a  f7fffffe          BL       uart_putchar
00080e  210a              MOVS     r1,#0xa
000810  484b              LDR      r0,|L137.2368|
000812  f7fffffe          BL       uart_putchar
000816  210a              MOVS     r1,#0xa
000818  4849              LDR      r0,|L137.2368|
00081a  f7fffffe          BL       uart_putchar
00081e  210a              MOVS     r1,#0xa
000820  4847              LDR      r0,|L137.2368|
000822  f7fffffe          BL       uart_putchar
000826  210a              MOVS     r1,#0xa
000828  4845              LDR      r0,|L137.2368|
00082a  f7fffffe          BL       uart_putchar
00082e  210a              MOVS     r1,#0xa
000830  4843              LDR      r0,|L137.2368|
000832  f7fffffe          BL       uart_putchar
000836  210a              MOVS     r1,#0xa
000838  4841              LDR      r0,|L137.2368|
00083a  f7fffffe          BL       uart_putchar
00083e  210a              MOVS     r1,#0xa
000840  483f              LDR      r0,|L137.2368|
000842  f7fffffe          BL       uart_putchar
000846  210a              MOVS     r1,#0xa
000848  483d              LDR      r0,|L137.2368|
00084a  f7fffffe          BL       uart_putchar
00084e  210a              MOVS     r1,#0xa
000850  483b              LDR      r0,|L137.2368|
000852  f7fffffe          BL       uart_putchar
000856  210a              MOVS     r1,#0xa
000858  4839              LDR      r0,|L137.2368|
00085a  f7fffffe          BL       uart_putchar
00085e  210a              MOVS     r1,#0xa
000860  4837              LDR      r0,|L137.2368|
000862  f7fffffe          BL       uart_putchar
000866  210a              MOVS     r1,#0xa
000868  4835              LDR      r0,|L137.2368|
00086a  f7fffffe          BL       uart_putchar
00086e  210a              MOVS     r1,#0xa
000870  4833              LDR      r0,|L137.2368|
000872  f7fffffe          BL       uart_putchar
000876  210a              MOVS     r1,#0xa
000878  4831              LDR      r0,|L137.2368|
00087a  f7fffffe          BL       uart_putchar
;;;1600   									//memset(data,0,1000);
;;;1601   														//timer counts to wait for characters in uart 1 									
;;;1602   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00087e  bf00              NOP      
                  |L137.2176|
000880  4920              LDR      r1,|L137.2308|
000882  481a              LDR      r0,|L137.2284|
000884  f7fffffe          BL       strstr
000888  2800              CMP      r0,#0
00088a  d109              BNE      |L137.2208|
00088c  4928              LDR      r1,|L137.2352|
00088e  4817              LDR      r0,|L137.2284|
000890  f7fffffe          BL       strstr
000894  2800              CMP      r0,#0
000896  d103              BNE      |L137.2208|
000898  4828              LDR      r0,|L137.2364|
00089a  6800              LDR      r0,[r0,#0]  ; tout
00089c  2805              CMP      r0,#5
00089e  ddef              BLE      |L137.2176|
                  |L137.2208|
;;;1603   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1604   									}
;;;1605   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0008a0  f7fffffe          BL       clear
;;;1606   									//clear();
;;;1607   									memset(data,0,strlen(data));
0008a4  481e              LDR      r0,|L137.2336|
0008a6  f7fffffe          BL       strlen
0008aa  4604              MOV      r4,r0
0008ac  4621              MOV      r1,r4
0008ae  481c              LDR      r0,|L137.2336|
0008b0  f7fffffe          BL       __aeabi_memclr
;;;1608   									clear();
0008b4  f7fffffe          BL       clear
;;;1609   
;;;1610   																
;;;1611   								
;;;1612   								
;;;1613   //log_it();								
;;;1614   		RESET_OFF;delay(10);
0008b8  2020              MOVS     r0,#0x20
0008ba  4922              LDR      r1,|L137.2372|
0008bc  6088              STR      r0,[r1,#8]
0008be  200a              MOVS     r0,#0xa
0008c0  f7fffffe          BL       delay
;;;1615   		RESET_ON;delay(10);
0008c4  2020              MOVS     r0,#0x20
0008c6  491f              LDR      r1,|L137.2372|
0008c8  6048              STR      r0,[r1,#4]
0008ca  200a              MOVS     r0,#0xa
0008cc  f7fffffe          BL       delay
;;;1616   								send_GSM("\n\n AT+CFUN=1,1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);			
0008d0  4809              LDR      r0,|L137.2296|
0008d2  6800              LDR      r0,[r0,#0]  ; tmeout
0008d4  4b09              LDR      r3,|L137.2300|
0008d6  4a0a              LDR      r2,|L137.2304|
0008d8  490a              LDR      r1,|L137.2308|
0008da  9000              STR      r0,[sp,#0]
0008dc  481a              LDR      r0,|L137.2376|
0008de  f7fffffe          BL       send_GSM
                  |L137.2274|
0008e2  e276              B        |L137.3538|
                  |L137.2276|
0008e4  e287              B        |L137.3574|
0008e6  0000              DCW      0x0000
                  |L137.2280|
                          DCD      k
                  |L137.2284|
                          DCD      uart_string_gsm
                  |L137.2288|
                          DCD      i
                  |L137.2292|
                          DCD      at_
                  |L137.2296|
                          DCD      tmeout
                  |L137.2300|
                          DCD      ||.conststring||+0x10
                  |L137.2304|
                          DCD      ||.conststring||+0x18
                  |L137.2308|
                          DCD      ||.conststring||+0x70
                  |L137.2312|
                          DCD      ||.conststring||+0x430
                  |L137.2316|
                          DCD      data2
                  |L137.2320|
                          DCD      ||.conststring||+0x4b0
                  |L137.2324|
                          DCD      cond1
                  |L137.2328|
                          DCD      cond9
                  |L137.2332|
                          DCD      ||.conststring||+0x4b4
                  |L137.2336|
                          DCD      data
                  |L137.2340|
                          DCD      ||.conststring||+0x4b8
                  |L137.2344|
                          DCD      drive
                  |L137.2348|
                          DCD      ||.conststring||+0x4bc
                  |L137.2352|
                          DCD      ||.conststring||+0xe0
                  |L137.2356|
                          DCD      ||.conststring||+0x20
                  |L137.2360|
                          DCD      ||k2||
                  |L137.2364|
                          DCD      tout
                  |L137.2368|
                          DCD      0x4006b000
                  |L137.2372|
                          DCD      0x400ff080
                  |L137.2376|
                          DCD      ||.conststring||+0x4e0
                  |L137.2380|
;;;1617   							}
;;;1618   							
;;;1619   							else if(cond12 && cond10)
00094c  48f7              LDR      r0,|L137.3372|
00094e  6800              LDR      r0,[r0,#0]  ; cond12
000950  2800              CMP      r0,#0
000952  d027              BEQ      |L137.2468|
000954  48f6              LDR      r0,|L137.3376|
000956  6800              LDR      r0,[r0,#0]  ; cond10
000958  2800              CMP      r0,#0
00095a  d023              BEQ      |L137.2468|
;;;1620   							{
;;;1621   						//		printf("\n\n\n\t%s",uart_string_gsm);
;;;1622   								memset(ip,0,16);
00095c  2110              MOVS     r1,#0x10
00095e  48f5              LDR      r0,|L137.3380|
000960  f7fffffe          BL       __aeabi_memclr
;;;1623   								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
000964  48f3              LDR      r0,|L137.3380|
000966  2120              MOVS     r1,#0x20
000968  460b              MOV      r3,r1
00096a  2204              MOVS     r2,#4
00096c  9100              STR      r1,[sp,#0]
00096e  9001              STR      r0,[sp,#4]
000970  2103              MOVS     r1,#3
000972  48f1              LDR      r0,|L137.3384|
000974  f7fffffe          BL       parse_g
;;;1624   								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
000978  48f0              LDR      r0,|L137.3388|
00097a  210d              MOVS     r1,#0xd
00097c  2320              MOVS     r3,#0x20
00097e  2205              MOVS     r2,#5
000980  9100              STR      r1,[sp,#0]
000982  9001              STR      r0,[sp,#4]
000984  2106              MOVS     r1,#6
000986  48ec              LDR      r0,|L137.3384|
000988  f7fffffe          BL       parse_g
;;;1625   			//					printf("\n%s\n",port);
;;;1626   								save_ip_port();
00098c  f7fffffe          BL       save_ip_port
;;;1627   							
;;;1628   	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;1629   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000990  48eb              LDR      r0,|L137.3392|
000992  6800              LDR      r0,[r0,#0]  ; tmeout
000994  4beb              LDR      r3,|L137.3396|
000996  4aec              LDR      r2,|L137.3400|
000998  49ec              LDR      r1,|L137.3404|
00099a  9000              STR      r0,[sp,#0]
00099c  48ec              LDR      r0,|L137.3408|
00099e  f7fffffe          BL       send_GSM
0009a2  e216              B        |L137.3538|
                  |L137.2468|
;;;1630   
;;;1631   //								while(1);
;;;1632   								
;;;1633   								
;;;1634   							}
;;;1635   
;;;1636   											
;;;1637   							else if(cond1 && cond13)
0009a4  48eb              LDR      r0,|L137.3412|
0009a6  6800              LDR      r0,[r0,#0]  ; cond1
0009a8  2800              CMP      r0,#0
0009aa  d01a              BEQ      |L137.2530|
0009ac  48ea              LDR      r0,|L137.3416|
0009ae  6800              LDR      r0,[r0,#0]  ; cond13
0009b0  2800              CMP      r0,#0
0009b2  d016              BEQ      |L137.2530|
;;;1638   							{
;;;1639   								
;;;1640   								IGNITION_ON;FUEL_ON;
0009b4  2002              MOVS     r0,#2
0009b6  49e9              LDR      r1,|L137.3420|
0009b8  6088              STR      r0,[r1,#8]
0009ba  2004              MOVS     r0,#4
0009bc  6088              STR      r0,[r1,#8]
;;;1641   								clear();
0009be  f7fffffe          BL       clear
;;;1642   								ignstaton();
0009c2  f7fffffe          BL       ignstaton
;;;1643   								delay(1000);
0009c6  207d              MOVS     r0,#0x7d
0009c8  00c0              LSLS     r0,r0,#3
0009ca  f7fffffe          BL       delay
;;;1644   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009ce  48dc              LDR      r0,|L137.3392|
0009d0  6800              LDR      r0,[r0,#0]  ; tmeout
0009d2  4bdc              LDR      r3,|L137.3396|
0009d4  4adc              LDR      r2,|L137.3400|
0009d6  49dd              LDR      r1,|L137.3404|
0009d8  9000              STR      r0,[sp,#0]
0009da  48e1              LDR      r0,|L137.3424|
0009dc  f7fffffe          BL       send_GSM
0009e0  e1f7              B        |L137.3538|
                  |L137.2530|
;;;1645   								
;;;1646   							}
;;;1647   							else if(cond1 && cond14)
0009e2  48dc              LDR      r0,|L137.3412|
0009e4  6800              LDR      r0,[r0,#0]  ; cond1
0009e6  2800              CMP      r0,#0
0009e8  d01a              BEQ      |L137.2592|
0009ea  48de              LDR      r0,|L137.3428|
0009ec  6800              LDR      r0,[r0,#0]  ; cond14
0009ee  2800              CMP      r0,#0
0009f0  d016              BEQ      |L137.2592|
;;;1648   							{
;;;1649   								
;;;1650   								IGNITION_OFF;FUEL_OFF;
0009f2  2002              MOVS     r0,#2
0009f4  49d9              LDR      r1,|L137.3420|
0009f6  6048              STR      r0,[r1,#4]
0009f8  2004              MOVS     r0,#4
0009fa  6048              STR      r0,[r1,#4]
;;;1651   								clear();
0009fc  f7fffffe          BL       clear
;;;1652   								ignstatoff();
000a00  f7fffffe          BL       ignstatoff
;;;1653   								delay(1000);
000a04  207d              MOVS     r0,#0x7d
000a06  00c0              LSLS     r0,r0,#3
000a08  f7fffffe          BL       delay
;;;1654   								
;;;1655   								
;;;1656   								
;;;1657   								
;;;1658   								
;;;1659   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a0c  48cc              LDR      r0,|L137.3392|
000a0e  6800              LDR      r0,[r0,#0]  ; tmeout
000a10  4bcc              LDR      r3,|L137.3396|
000a12  4acd              LDR      r2,|L137.3400|
000a14  49cd              LDR      r1,|L137.3404|
000a16  9000              STR      r0,[sp,#0]
000a18  48d1              LDR      r0,|L137.3424|
000a1a  f7fffffe          BL       send_GSM
000a1e  e1d8              B        |L137.3538|
                  |L137.2592|
;;;1660   								
;;;1661   							}
;;;1662   							
;;;1663   							else if(cond1 && cond5)
000a20  48cc              LDR      r0,|L137.3412|
000a22  6800              LDR      r0,[r0,#0]  ; cond1
000a24  2800              CMP      r0,#0
000a26  d05d              BEQ      |L137.2788|
000a28  48cf              LDR      r0,|L137.3432|
000a2a  6800              LDR      r0,[r0,#0]  ; cond5
000a2c  2800              CMP      r0,#0
000a2e  d059              BEQ      |L137.2788|
;;;1664   							{
;;;1665   								
;;;1666   
;;;1667   								memset(at_,0,100);
000a30  2164              MOVS     r1,#0x64
000a32  48ce              LDR      r0,|L137.3436|
000a34  f7fffffe          BL       __aeabi_memclr
;;;1668   								memset(num_o,0,15);
000a38  210f              MOVS     r1,#0xf
000a3a  48cd              LDR      r0,|L137.3440|
000a3c  f7fffffe          BL       __aeabi_memclr
;;;1669   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000a40  48cb              LDR      r0,|L137.3440|
000a42  210d              MOVS     r1,#0xd
000a44  2320              MOVS     r3,#0x20
000a46  2205              MOVS     r2,#5
000a48  9100              STR      r1,[sp,#0]
000a4a  9001              STR      r0,[sp,#4]
000a4c  2103              MOVS     r1,#3
000a4e  48ba              LDR      r0,|L137.3384|
000a50  f7fffffe          BL       parse_g
;;;1670   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a54  48ba              LDR      r0,|L137.3392|
000a56  6800              LDR      r0,[r0,#0]  ; tmeout
000a58  4bba              LDR      r3,|L137.3396|
000a5a  4abb              LDR      r2,|L137.3400|
000a5c  49bb              LDR      r1,|L137.3404|
000a5e  9000              STR      r0,[sp,#0]
000a60  48c4              LDR      r0,|L137.3444|
000a62  f7fffffe          BL       send_GSM
;;;1671   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000a66  2004              MOVS     r0,#4
000a68  4bc3              LDR      r3,|L137.3448|
000a6a  4ab7              LDR      r2,|L137.3400|
000a6c  49c3              LDR      r1,|L137.3452|
000a6e  9000              STR      r0,[sp,#0]
000a70  48c3              LDR      r0,|L137.3456|
000a72  f7fffffe          BL       send_GSM
;;;1672   
;;;1673   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000a76  4abe              LDR      r2,|L137.3440|
000a78  49c2              LDR      r1,|L137.3460|
000a7a  48bc              LDR      r0,|L137.3436|
000a7c  f7fffffe          BL       __2sprintf
;;;1674   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a80  48af              LDR      r0,|L137.3392|
000a82  6800              LDR      r0,[r0,#0]  ; tmeout
000a84  4baf              LDR      r3,|L137.3396|
000a86  4ab0              LDR      r2,|L137.3400|
000a88  49b0              LDR      r1,|L137.3404|
000a8a  9000              STR      r0,[sp,#0]
000a8c  48b7              LDR      r0,|L137.3436|
000a8e  f7fffffe          BL       send_GSM
;;;1675   								
;;;1676   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a92  48ab              LDR      r0,|L137.3392|
000a94  6800              LDR      r0,[r0,#0]  ; tmeout
000a96  4bab              LDR      r3,|L137.3396|
000a98  4aab              LDR      r2,|L137.3400|
000a9a  49ac              LDR      r1,|L137.3404|
000a9c  9000              STR      r0,[sp,#0]
000a9e  48ba              LDR      r0,|L137.3464|
000aa0  f7fffffe          BL       send_GSM
;;;1677   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000aa4  2004              MOVS     r0,#4
000aa6  4bb4              LDR      r3,|L137.3448|
000aa8  4aa7              LDR      r2,|L137.3400|
000aaa  49b4              LDR      r1,|L137.3452|
000aac  9000              STR      r0,[sp,#0]
000aae  48b4              LDR      r0,|L137.3456|
000ab0  f7fffffe          BL       send_GSM
;;;1678   
;;;1679   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000ab4  4aae              LDR      r2,|L137.3440|
000ab6  49b3              LDR      r1,|L137.3460|
000ab8  48ac              LDR      r0,|L137.3436|
000aba  f7fffffe          BL       __2sprintf
;;;1680   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000abe  48a0              LDR      r0,|L137.3392|
000ac0  6800              LDR      r0,[r0,#0]  ; tmeout
000ac2  4ba0              LDR      r3,|L137.3396|
000ac4  4aa0              LDR      r2,|L137.3400|
000ac6  49a1              LDR      r1,|L137.3404|
000ac8  9000              STR      r0,[sp,#0]
000aca  48a8              LDR      r0,|L137.3436|
000acc  f7fffffe          BL       send_GSM
;;;1681   
;;;1682   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ad0  489b              LDR      r0,|L137.3392|
000ad2  6800              LDR      r0,[r0,#0]  ; tmeout
000ad4  4b9b              LDR      r3,|L137.3396|
000ad6  4a9c              LDR      r2,|L137.3400|
000ad8  499c              LDR      r1,|L137.3404|
000ada  9000              STR      r0,[sp,#0]
000adc  489c              LDR      r0,|L137.3408|
000ade  f7fffffe          BL       send_GSM
000ae2  e176              B        |L137.3538|
                  |L137.2788|
;;;1683   															
;;;1684   						
;;;1685   								
;;;1686   							}		
;;;1687   							else if(cond1 && cond6)
000ae4  489b              LDR      r0,|L137.3412|
000ae6  6800              LDR      r0,[r0,#0]  ; cond1
000ae8  2800              CMP      r0,#0
000aea  d05d              BEQ      |L137.2984|
000aec  48a7              LDR      r0,|L137.3468|
000aee  6800              LDR      r0,[r0,#0]  ; cond6
000af0  2800              CMP      r0,#0
000af2  d059              BEQ      |L137.2984|
;;;1688   							{
;;;1689   
;;;1690   								
;;;1691   								memset(at_,0,100);
000af4  2164              MOVS     r1,#0x64
000af6  489d              LDR      r0,|L137.3436|
000af8  f7fffffe          BL       __aeabi_memclr
;;;1692   								memset(num_o,0,15);
000afc  210f              MOVS     r1,#0xf
000afe  489c              LDR      r0,|L137.3440|
000b00  f7fffffe          BL       __aeabi_memclr
;;;1693   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000b04  489a              LDR      r0,|L137.3440|
000b06  210d              MOVS     r1,#0xd
000b08  2320              MOVS     r3,#0x20
000b0a  2205              MOVS     r2,#5
000b0c  9100              STR      r1,[sp,#0]
000b0e  9001              STR      r0,[sp,#4]
000b10  2103              MOVS     r1,#3
000b12  4889              LDR      r0,|L137.3384|
000b14  f7fffffe          BL       parse_g
;;;1694   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b18  4889              LDR      r0,|L137.3392|
000b1a  6800              LDR      r0,[r0,#0]  ; tmeout
000b1c  4b89              LDR      r3,|L137.3396|
000b1e  4a8a              LDR      r2,|L137.3400|
000b20  498a              LDR      r1,|L137.3404|
000b22  9000              STR      r0,[sp,#0]
000b24  4893              LDR      r0,|L137.3444|
000b26  f7fffffe          BL       send_GSM
;;;1695   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b2a  2004              MOVS     r0,#4
000b2c  4b92              LDR      r3,|L137.3448|
000b2e  4a86              LDR      r2,|L137.3400|
000b30  4992              LDR      r1,|L137.3452|
000b32  9000              STR      r0,[sp,#0]
000b34  4896              LDR      r0,|L137.3472|
000b36  f7fffffe          BL       send_GSM
;;;1696   
;;;1697   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b3a  4a8d              LDR      r2,|L137.3440|
000b3c  4995              LDR      r1,|L137.3476|
000b3e  488b              LDR      r0,|L137.3436|
000b40  f7fffffe          BL       __2sprintf
;;;1698   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b44  487e              LDR      r0,|L137.3392|
000b46  6800              LDR      r0,[r0,#0]  ; tmeout
000b48  4b7e              LDR      r3,|L137.3396|
000b4a  4a7f              LDR      r2,|L137.3400|
000b4c  497f              LDR      r1,|L137.3404|
000b4e  9000              STR      r0,[sp,#0]
000b50  4886              LDR      r0,|L137.3436|
000b52  f7fffffe          BL       send_GSM
;;;1699   								
;;;1700   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b56  487a              LDR      r0,|L137.3392|
000b58  6800              LDR      r0,[r0,#0]  ; tmeout
000b5a  4b7a              LDR      r3,|L137.3396|
000b5c  4a7a              LDR      r2,|L137.3400|
000b5e  497b              LDR      r1,|L137.3404|
000b60  9000              STR      r0,[sp,#0]
000b62  4889              LDR      r0,|L137.3464|
000b64  f7fffffe          BL       send_GSM
;;;1701   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b68  2004              MOVS     r0,#4
000b6a  4b83              LDR      r3,|L137.3448|
000b6c  4a76              LDR      r2,|L137.3400|
000b6e  4983              LDR      r1,|L137.3452|
000b70  9000              STR      r0,[sp,#0]
000b72  4887              LDR      r0,|L137.3472|
000b74  f7fffffe          BL       send_GSM
;;;1702   
;;;1703   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b78  4a7d              LDR      r2,|L137.3440|
000b7a  4986              LDR      r1,|L137.3476|
000b7c  487b              LDR      r0,|L137.3436|
000b7e  f7fffffe          BL       __2sprintf
;;;1704   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);								
000b82  486f              LDR      r0,|L137.3392|
000b84  6800              LDR      r0,[r0,#0]  ; tmeout
000b86  4b6f              LDR      r3,|L137.3396|
000b88  4a6f              LDR      r2,|L137.3400|
000b8a  4970              LDR      r1,|L137.3404|
000b8c  9000              STR      r0,[sp,#0]
000b8e  4877              LDR      r0,|L137.3436|
000b90  f7fffffe          BL       send_GSM
;;;1705   
;;;1706   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000b94  486a              LDR      r0,|L137.3392|
000b96  6800              LDR      r0,[r0,#0]  ; tmeout
000b98  4b6a              LDR      r3,|L137.3396|
000b9a  4a6b              LDR      r2,|L137.3400|
000b9c  496b              LDR      r1,|L137.3404|
000b9e  9000              STR      r0,[sp,#0]
000ba0  486b              LDR      r0,|L137.3408|
000ba2  f7fffffe          BL       send_GSM
000ba6  e114              B        |L137.3538|
                  |L137.2984|
;;;1707   							}									
;;;1708   							else if(cond1 && cond7)
000ba8  486a              LDR      r0,|L137.3412|
000baa  6800              LDR      r0,[r0,#0]  ; cond1
000bac  2800              CMP      r0,#0
000bae  d05d              BEQ      |L137.3180|
000bb0  4879              LDR      r0,|L137.3480|
000bb2  6800              LDR      r0,[r0,#0]  ; cond7
000bb4  2800              CMP      r0,#0
000bb6  d059              BEQ      |L137.3180|
;;;1709   							{
;;;1710   								
;;;1711   								memset(at_,0,100);
000bb8  2164              MOVS     r1,#0x64
000bba  486c              LDR      r0,|L137.3436|
000bbc  f7fffffe          BL       __aeabi_memclr
;;;1712   								memset(num_o,0,15);
000bc0  210f              MOVS     r1,#0xf
000bc2  486b              LDR      r0,|L137.3440|
000bc4  f7fffffe          BL       __aeabi_memclr
;;;1713   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000bc8  4869              LDR      r0,|L137.3440|
000bca  210d              MOVS     r1,#0xd
000bcc  2320              MOVS     r3,#0x20
000bce  2205              MOVS     r2,#5
000bd0  9100              STR      r1,[sp,#0]
000bd2  9001              STR      r0,[sp,#4]
000bd4  2103              MOVS     r1,#3
000bd6  4858              LDR      r0,|L137.3384|
000bd8  f7fffffe          BL       parse_g
;;;1714   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000bdc  4858              LDR      r0,|L137.3392|
000bde  6800              LDR      r0,[r0,#0]  ; tmeout
000be0  4b58              LDR      r3,|L137.3396|
000be2  4a59              LDR      r2,|L137.3400|
000be4  4959              LDR      r1,|L137.3404|
000be6  9000              STR      r0,[sp,#0]
000be8  4862              LDR      r0,|L137.3444|
000bea  f7fffffe          BL       send_GSM
;;;1715   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000bee  2004              MOVS     r0,#4
000bf0  4b61              LDR      r3,|L137.3448|
000bf2  4a55              LDR      r2,|L137.3400|
000bf4  4961              LDR      r1,|L137.3452|
000bf6  9000              STR      r0,[sp,#0]
000bf8  4868              LDR      r0,|L137.3484|
000bfa  f7fffffe          BL       send_GSM
;;;1716   
;;;1717   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000bfe  4a5c              LDR      r2,|L137.3440|
000c00  4967              LDR      r1,|L137.3488|
000c02  485a              LDR      r0,|L137.3436|
000c04  f7fffffe          BL       __2sprintf
;;;1718   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c08  484d              LDR      r0,|L137.3392|
000c0a  6800              LDR      r0,[r0,#0]  ; tmeout
000c0c  4b4d              LDR      r3,|L137.3396|
000c0e  4a4e              LDR      r2,|L137.3400|
000c10  494e              LDR      r1,|L137.3404|
000c12  9000              STR      r0,[sp,#0]
000c14  4855              LDR      r0,|L137.3436|
000c16  f7fffffe          BL       send_GSM
;;;1719   								
;;;1720   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c1a  4849              LDR      r0,|L137.3392|
000c1c  6800              LDR      r0,[r0,#0]  ; tmeout
000c1e  4b49              LDR      r3,|L137.3396|
000c20  4a49              LDR      r2,|L137.3400|
000c22  494a              LDR      r1,|L137.3404|
000c24  9000              STR      r0,[sp,#0]
000c26  4858              LDR      r0,|L137.3464|
000c28  f7fffffe          BL       send_GSM
;;;1721   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000c2c  2004              MOVS     r0,#4
000c2e  4b52              LDR      r3,|L137.3448|
000c30  4a45              LDR      r2,|L137.3400|
000c32  4952              LDR      r1,|L137.3452|
000c34  9000              STR      r0,[sp,#0]
000c36  4859              LDR      r0,|L137.3484|
000c38  f7fffffe          BL       send_GSM
;;;1722   
;;;1723   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c3c  4a4c              LDR      r2,|L137.3440|
000c3e  4958              LDR      r1,|L137.3488|
000c40  484a              LDR      r0,|L137.3436|
000c42  f7fffffe          BL       __2sprintf
;;;1724   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c46  483e              LDR      r0,|L137.3392|
000c48  6800              LDR      r0,[r0,#0]  ; tmeout
000c4a  4b3e              LDR      r3,|L137.3396|
000c4c  4a3e              LDR      r2,|L137.3400|
000c4e  493f              LDR      r1,|L137.3404|
000c50  9000              STR      r0,[sp,#0]
000c52  4846              LDR      r0,|L137.3436|
000c54  f7fffffe          BL       send_GSM
;;;1725   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000c58  4839              LDR      r0,|L137.3392|
000c5a  6800              LDR      r0,[r0,#0]  ; tmeout
000c5c  4b39              LDR      r3,|L137.3396|
000c5e  4a3a              LDR      r2,|L137.3400|
000c60  493a              LDR      r1,|L137.3404|
000c62  9000              STR      r0,[sp,#0]
000c64  483a              LDR      r0,|L137.3408|
000c66  f7fffffe          BL       send_GSM
000c6a  e0b2              B        |L137.3538|
                  |L137.3180|
;;;1726   							}			
;;;1727   							else if(cond11)
000c6c  484d              LDR      r0,|L137.3492|
000c6e  6800              LDR      r0,[r0,#0]  ; cond11
000c70  2800              CMP      r0,#0
000c72  d059              BEQ      |L137.3368|
;;;1728   							{
;;;1729   
;;;1730   								memset(at_,0,100);
000c74  2164              MOVS     r1,#0x64
000c76  483d              LDR      r0,|L137.3436|
000c78  f7fffffe          BL       __aeabi_memclr
;;;1731   								memset(num_o,0,15);
000c7c  210f              MOVS     r1,#0xf
000c7e  483c              LDR      r0,|L137.3440|
000c80  f7fffffe          BL       __aeabi_memclr
;;;1732   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000c84  483a              LDR      r0,|L137.3440|
000c86  210d              MOVS     r1,#0xd
000c88  2320              MOVS     r3,#0x20
000c8a  2205              MOVS     r2,#5
000c8c  9100              STR      r1,[sp,#0]
000c8e  9001              STR      r0,[sp,#4]
000c90  2103              MOVS     r1,#3
000c92  4829              LDR      r0,|L137.3384|
000c94  f7fffffe          BL       parse_g
;;;1733   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c98  4829              LDR      r0,|L137.3392|
000c9a  6800              LDR      r0,[r0,#0]  ; tmeout
000c9c  4b29              LDR      r3,|L137.3396|
000c9e  4a2a              LDR      r2,|L137.3400|
000ca0  492a              LDR      r1,|L137.3404|
000ca2  9000              STR      r0,[sp,#0]
000ca4  4833              LDR      r0,|L137.3444|
000ca6  f7fffffe          BL       send_GSM
;;;1734   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000caa  2004              MOVS     r0,#4
000cac  4b32              LDR      r3,|L137.3448|
000cae  4a26              LDR      r2,|L137.3400|
000cb0  4932              LDR      r1,|L137.3452|
000cb2  9000              STR      r0,[sp,#0]
000cb4  483c              LDR      r0,|L137.3496|
000cb6  f7fffffe          BL       send_GSM
;;;1735   
;;;1736   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000cba  4a2d              LDR      r2,|L137.3440|
000cbc  493b              LDR      r1,|L137.3500|
000cbe  482b              LDR      r0,|L137.3436|
000cc0  f7fffffe          BL       __2sprintf
;;;1737   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000cc4  481e              LDR      r0,|L137.3392|
000cc6  6800              LDR      r0,[r0,#0]  ; tmeout
000cc8  4b1e              LDR      r3,|L137.3396|
000cca  4a1f              LDR      r2,|L137.3400|
000ccc  491f              LDR      r1,|L137.3404|
000cce  9000              STR      r0,[sp,#0]
000cd0  4826              LDR      r0,|L137.3436|
000cd2  f7fffffe          BL       send_GSM
;;;1738   								
;;;1739   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000cd6  481a              LDR      r0,|L137.3392|
000cd8  6800              LDR      r0,[r0,#0]  ; tmeout
000cda  4b1a              LDR      r3,|L137.3396|
000cdc  4a1a              LDR      r2,|L137.3400|
000cde  491b              LDR      r1,|L137.3404|
000ce0  9000              STR      r0,[sp,#0]
000ce2  4829              LDR      r0,|L137.3464|
000ce4  f7fffffe          BL       send_GSM
;;;1740   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000ce8  2004              MOVS     r0,#4
000cea  4b23              LDR      r3,|L137.3448|
000cec  4a16              LDR      r2,|L137.3400|
000cee  4923              LDR      r1,|L137.3452|
000cf0  9000              STR      r0,[sp,#0]
000cf2  482d              LDR      r0,|L137.3496|
000cf4  f7fffffe          BL       send_GSM
;;;1741   
;;;1742   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000cf8  4a1d              LDR      r2,|L137.3440|
000cfa  492c              LDR      r1,|L137.3500|
000cfc  481b              LDR      r0,|L137.3436|
000cfe  f7fffffe          BL       __2sprintf
;;;1743   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d02  480f              LDR      r0,|L137.3392|
000d04  6800              LDR      r0,[r0,#0]  ; tmeout
000d06  4b0f              LDR      r3,|L137.3396|
000d08  4a0f              LDR      r2,|L137.3400|
000d0a  4910              LDR      r1,|L137.3404|
000d0c  9000              STR      r0,[sp,#0]
000d0e  4817              LDR      r0,|L137.3436|
000d10  f7fffffe          BL       send_GSM
;;;1744   								
;;;1745   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000d14  480a              LDR      r0,|L137.3392|
000d16  6800              LDR      r0,[r0,#0]  ; tmeout
000d18  4b0a              LDR      r3,|L137.3396|
000d1a  4a0b              LDR      r2,|L137.3400|
000d1c  490b              LDR      r1,|L137.3404|
000d1e  9000              STR      r0,[sp,#0]
000d20  480b              LDR      r0,|L137.3408|
000d22  f7fffffe          BL       send_GSM
000d26  e054              B        |L137.3538|
                  |L137.3368|
000d28  e042              B        |L137.3504|
000d2a  0000              DCW      0x0000
                  |L137.3372|
                          DCD      cond12
                  |L137.3376|
                          DCD      cond10
                  |L137.3380|
                          DCD      ||ip||
                  |L137.3384|
                          DCD      uart_string_gsm
                  |L137.3388|
                          DCD      port
                  |L137.3392|
                          DCD      tmeout
                  |L137.3396|
                          DCD      ||.conststring||+0x10
                  |L137.3400|
                          DCD      ||.conststring||+0x18
                  |L137.3404|
                          DCD      ||.conststring||+0x70
                  |L137.3408|
                          DCD      ||.conststring||+0x430
                  |L137.3412|
                          DCD      cond1
                  |L137.3416|
                          DCD      cond13
                  |L137.3420|
                          DCD      0x400ff000
                  |L137.3424|
                          DCD      ||.conststring||+0x4f4
                  |L137.3428|
                          DCD      cond14
                  |L137.3432|
                          DCD      cond5
                  |L137.3436|
                          DCD      at_
                  |L137.3440|
                          DCD      num_o
                  |L137.3444|
                          DCD      ||.conststring||+0x50c
                  |L137.3448|
                          DCD      ||.conststring||+0xe0
                  |L137.3452|
                          DCD      ||.conststring||+0x2c
                  |L137.3456|
                          DCD      ||.conststring||+0x520
                  |L137.3460|
                          DCD      ||.conststring||+0x530
                  |L137.3464|
                          DCD      ||.conststring||+0x550
                  |L137.3468|
                          DCD      cond6
                  |L137.3472|
                          DCD      ||.conststring||+0x564
                  |L137.3476|
                          DCD      ||.conststring||+0x574
                  |L137.3480|
                          DCD      cond7
                  |L137.3484|
                          DCD      ||.conststring||+0x594
                  |L137.3488|
                          DCD      ||.conststring||+0x5a4
                  |L137.3492|
                          DCD      cond11
                  |L137.3496|
                          DCD      ||.conststring||+0x5c4
                  |L137.3500|
                          DCD      ||.conststring||+0x5d4
                  |L137.3504|
;;;1746   								
;;;1747   							}	
;;;1748   							else if(cond15)
000db0  4811              LDR      r0,|L137.3576|
000db2  6800              LDR      r0,[r0,#0]  ; cond15
000db4  2800              CMP      r0,#0
000db6  d003              BEQ      |L137.3520|
;;;1749   							{
;;;1750   								send_message(ignstr);
000db8  4810              LDR      r0,|L137.3580|
000dba  f7fffffe          BL       send_message
000dbe  e008              B        |L137.3538|
                  |L137.3520|
;;;1751   								
;;;1752   							}							
;;;1753   
;;;1754   							else
;;;1755   							{							
;;;1756   								send_GSM("\r\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000dc0  480f              LDR      r0,|L137.3584|
000dc2  6800              LDR      r0,[r0,#0]  ; tmeout
000dc4  4b0f              LDR      r3,|L137.3588|
000dc6  4a10              LDR      r2,|L137.3592|
000dc8  4910              LDR      r1,|L137.3596|
000dca  9000              STR      r0,[sp,#0]
000dcc  4810              LDR      r0,|L137.3600|
000dce  f7fffffe          BL       send_GSM
                  |L137.3538|
;;;1757   							}
;;;1758   
;;;1759   
;;;1760   		ringflag=0;
000dd2  2000              MOVS     r0,#0
000dd4  490f              LDR      r1,|L137.3604|
000dd6  7008              STRB     r0,[r1,#0]
;;;1761   clear();							
000dd8  f7fffffe          BL       clear
;;;1762   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000ddc  4808              LDR      r0,|L137.3584|
000dde  6800              LDR      r0,[r0,#0]  ; tmeout
000de0  4b08              LDR      r3,|L137.3588|
000de2  4a0d              LDR      r2,|L137.3608|
000de4  490d              LDR      r1,|L137.3612|
000de6  9000              STR      r0,[sp,#0]
000de8  480d              LDR      r0,|L137.3616|
000dea  f7fffffe          BL       send_GSM
;;;1763   delay(1000);					
000dee  207d              MOVS     r0,#0x7d
000df0  00c0              LSLS     r0,r0,#3
000df2  f7fffffe          BL       delay
                  |L137.3574|
;;;1764   		}
;;;1765   		
;;;1766   }
000df6  bd1f              POP      {r0-r4,pc}
;;;1767   int count_char(char ch,char* string)
                          ENDP

                  |L137.3576|
                          DCD      cond15
                  |L137.3580|
                          DCD      ignstr
                  |L137.3584|
                          DCD      tmeout
                  |L137.3588|
                          DCD      ||.conststring||+0x10
                  |L137.3592|
                          DCD      ||.conststring||+0x18
                  |L137.3596|
                          DCD      ||.conststring||+0x70
                  |L137.3600|
                          DCD      ||.conststring||+0x5f4
                  |L137.3604|
                          DCD      ringflag
                  |L137.3608|
                          DCD      ||.conststring||+0xe0
                  |L137.3612|
                          DCD      ||.conststring||+0x2c
                  |L137.3616|
                          DCD      ||.conststring||+0x49c

                          AREA ||i.GPS_COLLECT2||, COMGROUP=GPS_COLLECT2, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT2 PROC
;;;1274   
;;;1275   __inline void GPS_COLLECT2()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1276   {	
;;;1277   time52=15;	
000002  200f              MOVS     r0,#0xf
000004  49b0              LDR      r1,|L144.712|
000006  6008              STR      r0,[r1,#0]  ; time52
;;;1278   
;;;1279   //memset(imei,0,20);
;;;1280   //send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
;;;1281   //for(i=0;i<strlen(uart_string_gsm);i++){
;;;1282   //		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
;;;1283   //			imei[imeiinc] = uart_string_gsm[i];
;;;1284   //			imeiinc++;
;;;1285   //		}
;;;1286   //}
;;;1287   clear();	
000008  f7fffffe          BL       clear
;;;1288   
;;;1289   	
;;;1290   	
;;;1291   	adc_read(9);							
00000c  2009              MOVS     r0,#9
00000e  f7fffffe          BL       adc_read
;;;1292   	memset(fuelstr,0,5);
000012  2105              MOVS     r1,#5
000014  48ad              LDR      r0,|L144.716|
000016  f7fffffe          BL       __aeabi_memclr
;;;1293   	sprintf(fuelstr,"%d,",fuel);
00001a  48ad              LDR      r0,|L144.720|
00001c  49ad              LDR      r1,|L144.724|
00001e  6802              LDR      r2,[r0,#0]  ; fuel
000020  48aa              LDR      r0,|L144.716|
000022  f7fffffe          BL       __2sprintf
;;;1294   
;;;1295   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
000026  48ac              LDR      r0,|L144.728|
000028  6800              LDR      r0,[r0,#0]  ; tmeout
00002a  4bac              LDR      r3,|L144.732|
00002c  4aac              LDR      r2,|L144.736|
00002e  49ad              LDR      r1,|L144.740|
000030  9000              STR      r0,[sp,#0]
000032  48ad              LDR      r0,|L144.744|
000034  f7fffffe          BL       send_GSM
;;;1296   	// not sleep	
;;;1297   	memset(num2,0,30);
000038  211e              MOVS     r1,#0x1e
00003a  48ac              LDR      r0,|L144.748|
00003c  f7fffffe          BL       __aeabi_memclr
;;;1298   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
000040  48aa              LDR      r0,|L144.748|
000042  210d              MOVS     r1,#0xd
000044  232c              MOVS     r3,#0x2c
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2102              MOVS     r1,#2
00004e  48a8              LDR      r0,|L144.752|
000050  f7fffffe          BL       parse_g
;;;1299   	voltagecbc=myAtoi(num2);	
000054  48a5              LDR      r0,|L144.748|
000056  f7fffffe          BL       myAtoi
00005a  49a6              LDR      r1,|L144.756|
00005c  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1300   
;;;1301   memset(ignstr,0,2);
00005e  48a6              LDR      r0,|L144.760|
000060  2100              MOVS     r1,#0
000062  7001              STRB     r1,[r0,#0]
000064  7041              STRB     r1,[r0,#1]
;;;1302   if(GPIOB_PDIR & 0x00000001){
000066  48a5              LDR      r0,|L144.764|
000068  6900              LDR      r0,[r0,#0x10]
00006a  07c0              LSLS     r0,r0,#31
00006c  0fc0              LSRS     r0,r0,#31
00006e  2800              CMP      r0,#0
000070  d005              BEQ      |L144.126|
;;;1303   			sprintf(ignstr,"%d",1);
000072  2201              MOVS     r2,#1
000074  49a2              LDR      r1,|L144.768|
000076  48a0              LDR      r0,|L144.760|
000078  f7fffffe          BL       __2sprintf
00007c  e004              B        |L144.136|
                  |L144.126|
;;;1304   }
;;;1305   else{
;;;1306   			sprintf(ignstr,"%d",0);
00007e  2200              MOVS     r2,#0
000080  499f              LDR      r1,|L144.768|
000082  489d              LDR      r0,|L144.760|
000084  f7fffffe          BL       __2sprintf
                  |L144.136|
;;;1307   
;;;1308   }
;;;1309   
;;;1310   memset(acstr,0,2); //ptb2
000088  489e              LDR      r0,|L144.772|
00008a  2100              MOVS     r1,#0
00008c  8001              STRH     r1,[r0,#0]
;;;1311   if(GPIOB_PDIR & 0x00000004){
00008e  489b              LDR      r0,|L144.764|
000090  6900              LDR      r0,[r0,#0x10]
000092  2104              MOVS     r1,#4
000094  4008              ANDS     r0,r0,r1
000096  2800              CMP      r0,#0
000098  d005              BEQ      |L144.166|
;;;1312   			sprintf(acstr,"%d",1);
00009a  2201              MOVS     r2,#1
00009c  4998              LDR      r1,|L144.768|
00009e  4899              LDR      r0,|L144.772|
0000a0  f7fffffe          BL       __2sprintf
0000a4  e004              B        |L144.176|
                  |L144.166|
;;;1313   }
;;;1314   else{
;;;1315   				sprintf(acstr,"%d",0);
0000a6  2200              MOVS     r2,#0
0000a8  4995              LDR      r1,|L144.768|
0000aa  4896              LDR      r0,|L144.772|
0000ac  f7fffffe          BL       __2sprintf
                  |L144.176|
;;;1316   
;;;1317   }
;;;1318   	
;;;1319   while(lpticks<int_erval);
0000b0  bf00              NOP      
                  |L144.178|
0000b2  4895              LDR      r0,|L144.776|
0000b4  6800              LDR      r0,[r0,#0]  ; lpticks
0000b6  4995              LDR      r1,|L144.780|
0000b8  6809              LDR      r1,[r1,#0]  ; int_erval
0000ba  4288              CMP      r0,r1
0000bc  dbf9              BLT      |L144.178|
;;;1320   get_gpsdata();
0000be  f7fffffe          BL       get_gpsdata
;;;1321   lpticks=0;
0000c2  2000              MOVS     r0,#0
0000c4  4990              LDR      r1,|L144.776|
0000c6  6008              STR      r0,[r1,#0]  ; lpticks
;;;1322   
;;;1323   parse_g(rmc, 3, 4, ',', ',' ,lati);
0000c8  4891              LDR      r0,|L144.784|
0000ca  212c              MOVS     r1,#0x2c
0000cc  460b              MOV      r3,r1
0000ce  2204              MOVS     r2,#4
0000d0  9100              STR      r1,[sp,#0]
0000d2  9001              STR      r0,[sp,#4]
0000d4  2103              MOVS     r1,#3
0000d6  488f              LDR      r0,|L144.788|
0000d8  f7fffffe          BL       parse_g
;;;1324   parse_g(rmc, 5, 6, ',', ',' ,longi);
0000dc  488e              LDR      r0,|L144.792|
0000de  212c              MOVS     r1,#0x2c
0000e0  460b              MOV      r3,r1
0000e2  2206              MOVS     r2,#6
0000e4  9100              STR      r1,[sp,#0]
0000e6  9001              STR      r0,[sp,#4]
0000e8  2105              MOVS     r1,#5
0000ea  488a              LDR      r0,|L144.788|
0000ec  f7fffffe          BL       parse_g
;;;1325   parse_g(rmc, 7, 8, ',', ',' ,velocity);
0000f0  488a              LDR      r0,|L144.796|
0000f2  212c              MOVS     r1,#0x2c
0000f4  460b              MOV      r3,r1
0000f6  2208              MOVS     r2,#8
0000f8  9100              STR      r1,[sp,#0]
0000fa  9001              STR      r0,[sp,#4]
0000fc  2107              MOVS     r1,#7
0000fe  4885              LDR      r0,|L144.788|
000100  f7fffffe          BL       parse_g
;;;1326   		
;;;1327   		speed = stof(velocity);
000104  4885              LDR      r0,|L144.796|
000106  f7fffffe          BL       stof
00010a  4985              LDR      r1,|L144.800|
00010c  6008              STR      r0,[r1,#0]  ; speed
;;;1328   		c=stof(lati);//7523.7412
00010e  4880              LDR      r0,|L144.784|
000110  f7fffffe          BL       stof
000114  4604              MOV      r4,r0
000116  f7fffffe          BL       __aeabi_f2d
00011a  4a82              LDR      r2,|L144.804|
00011c  c203              STM      r2!,{r0,r1}
;;;1329   		hh= c/100; //75
00011e  2200              MOVS     r2,#0
000120  4b81              LDR      r3,|L144.808|
000122  4980              LDR      r1,|L144.804|
000124  c903              LDM      r1,{r0,r1}
000126  f7fffffe          BL       __aeabi_ddiv
00012a  4604              MOV      r4,r0
00012c  f7fffffe          BL       __aeabi_d2iz
000130  497e              LDR      r1,|L144.812|
000132  6008              STR      r0,[r1,#0]  ; hh
;;;1330   		hh11 = c/100; //75.237412
000134  2200              MOVS     r2,#0
000136  4b7c              LDR      r3,|L144.808|
000138  497a              LDR      r1,|L144.804|
00013a  c903              LDM      r1,{r0,r1}
00013c  f7fffffe          BL       __aeabi_ddiv
000140  4a7b              LDR      r2,|L144.816|
000142  c203              STM      r2!,{r0,r1}
;;;1331   		mm11 = hh11-hh; //.237412
000144  4879              LDR      r0,|L144.812|
000146  6800              LDR      r0,[r0,#0]  ; hh
000148  f7fffffe          BL       __aeabi_i2d
00014c  4604              MOV      r4,r0
00014e  4878              LDR      r0,|L144.816|
000150  c80c              LDM      r0!,{r2,r3}
000152  4620              MOV      r0,r4
000154  f7fffffe          BL       __aeabi_drsub
000158  4a76              LDR      r2,|L144.820|
00015a  c203              STM      r2!,{r0,r1}
;;;1332   		mm11*=100;
00015c  2200              MOVS     r2,#0
00015e  4b72              LDR      r3,|L144.808|
000160  4974              LDR      r1,|L144.820|
000162  c903              LDM      r1,{r0,r1}
000164  f7fffffe          BL       __aeabi_dmul
000168  4a72              LDR      r2,|L144.820|
00016a  c203              STM      r2!,{r0,r1}
;;;1333   		mm22=hh+mm11/60;	
00016c  2200              MOVS     r2,#0
00016e  4b72              LDR      r3,|L144.824|
000170  4970              LDR      r1,|L144.820|
000172  c903              LDM      r1,{r0,r1}
000174  f7fffffe          BL       __aeabi_ddiv
000178  4604              MOV      r4,r0
00017a  460d              MOV      r5,r1
00017c  486b              LDR      r0,|L144.812|
00017e  6800              LDR      r0,[r0,#0]  ; hh
000180  f7fffffe          BL       __aeabi_i2d
000184  4606              MOV      r6,r0
000186  4622              MOV      r2,r4
000188  462b              MOV      r3,r5
00018a  f7fffffe          BL       __aeabi_dadd
00018e  4a6b              LDR      r2,|L144.828|
000190  c203              STM      r2!,{r0,r1}
;;;1334   		memset(lati,0,15);
000192  210f              MOVS     r1,#0xf
000194  485e              LDR      r0,|L144.784|
000196  f7fffffe          BL       __aeabi_memclr
;;;1335   		sprintf(lati,"%f",mm22);
00019a  4868              LDR      r0,|L144.828|
00019c  4968              LDR      r1,|L144.832|
00019e  c80c              LDM      r0!,{r2,r3}
0001a0  485b              LDR      r0,|L144.784|
0001a2  f7fffffe          BL       __2sprintf
;;;1336   		c=stof(longi);//7523.7412
0001a6  485c              LDR      r0,|L144.792|
0001a8  f7fffffe          BL       stof
0001ac  4604              MOV      r4,r0
0001ae  f7fffffe          BL       __aeabi_f2d
0001b2  4a5c              LDR      r2,|L144.804|
0001b4  c203              STM      r2!,{r0,r1}
;;;1337   		hh= c/100; //75
0001b6  2200              MOVS     r2,#0
0001b8  4b5b              LDR      r3,|L144.808|
0001ba  495a              LDR      r1,|L144.804|
0001bc  c903              LDM      r1,{r0,r1}
0001be  f7fffffe          BL       __aeabi_ddiv
0001c2  4604              MOV      r4,r0
0001c4  f7fffffe          BL       __aeabi_d2iz
0001c8  4958              LDR      r1,|L144.812|
0001ca  6008              STR      r0,[r1,#0]  ; hh
;;;1338   		hh11 = c/100; //75.237412
0001cc  2200              MOVS     r2,#0
0001ce  4b56              LDR      r3,|L144.808|
0001d0  4954              LDR      r1,|L144.804|
0001d2  c903              LDM      r1,{r0,r1}
0001d4  f7fffffe          BL       __aeabi_ddiv
0001d8  4a55              LDR      r2,|L144.816|
0001da  c203              STM      r2!,{r0,r1}
;;;1339   		mm11 = hh11-hh; //.237412
0001dc  4853              LDR      r0,|L144.812|
0001de  6800              LDR      r0,[r0,#0]  ; hh
0001e0  f7fffffe          BL       __aeabi_i2d
0001e4  4604              MOV      r4,r0
0001e6  4852              LDR      r0,|L144.816|
0001e8  c80c              LDM      r0!,{r2,r3}
0001ea  4620              MOV      r0,r4
0001ec  f7fffffe          BL       __aeabi_drsub
0001f0  4a50              LDR      r2,|L144.820|
0001f2  c203              STM      r2!,{r0,r1}
;;;1340   		mm11*=100;
0001f4  2200              MOVS     r2,#0
0001f6  4b4c              LDR      r3,|L144.808|
0001f8  494e              LDR      r1,|L144.820|
0001fa  c903              LDM      r1,{r0,r1}
0001fc  f7fffffe          BL       __aeabi_dmul
000200  4a4c              LDR      r2,|L144.820|
000202  c203              STM      r2!,{r0,r1}
;;;1341   		mm22=hh+mm11/60;	
000204  2200              MOVS     r2,#0
000206  4b4c              LDR      r3,|L144.824|
000208  494a              LDR      r1,|L144.820|
00020a  c903              LDM      r1,{r0,r1}
00020c  f7fffffe          BL       __aeabi_ddiv
000210  4604              MOV      r4,r0
000212  460d              MOV      r5,r1
000214  4845              LDR      r0,|L144.812|
000216  6800              LDR      r0,[r0,#0]  ; hh
000218  f7fffffe          BL       __aeabi_i2d
00021c  4606              MOV      r6,r0
00021e  4622              MOV      r2,r4
000220  462b              MOV      r3,r5
000222  f7fffffe          BL       __aeabi_dadd
000226  4a45              LDR      r2,|L144.828|
000228  c203              STM      r2!,{r0,r1}
;;;1342   		memset(longi,0,15);
00022a  210f              MOVS     r1,#0xf
00022c  483a              LDR      r0,|L144.792|
00022e  f7fffffe          BL       __aeabi_memclr
;;;1343   		sprintf(longi,"%f",mm22);	
000232  4842              LDR      r0,|L144.828|
000234  4942              LDR      r1,|L144.832|
000236  c80c              LDM      r0!,{r2,r3}
000238  4837              LDR      r0,|L144.792|
00023a  f7fffffe          BL       __2sprintf
;;;1344   		strcat(data,imei);
00023e  4941              LDR      r1,|L144.836|
000240  4841              LDR      r0,|L144.840|
000242  f7fffffe          BL       strcat
;;;1345   		strcat(data,", ");	
000246  4941              LDR      r1,|L144.844|
000248  483f              LDR      r0,|L144.840|
00024a  f7fffffe          BL       strcat
;;;1346   		strcat(data,"$GxGGA");	
00024e  4940              LDR      r1,|L144.848|
000250  483d              LDR      r0,|L144.840|
000252  f7fffffe          BL       strcat
;;;1347   		strcat(data,gga);
000256  493f              LDR      r1,|L144.852|
000258  483b              LDR      r0,|L144.840|
00025a  f7fffffe          BL       strcat
;;;1348   		strcat(data,", $GxRMC");	
00025e  493e              LDR      r1,|L144.856|
000260  4839              LDR      r0,|L144.840|
000262  f7fffffe          BL       strcat
;;;1349   		strcat(data,rmc);	
000266  492b              LDR      r1,|L144.788|
000268  4837              LDR      r0,|L144.840|
00026a  f7fffffe          BL       strcat
;;;1350   		strcat(data,",");	
00026e  493b              LDR      r1,|L144.860|
000270  4835              LDR      r0,|L144.840|
000272  f7fffffe          BL       strcat
;;;1351   		strcat(data,num2);
000276  491d              LDR      r1,|L144.748|
000278  4833              LDR      r0,|L144.840|
00027a  f7fffffe          BL       strcat
;;;1352   		strcat(data,",F=");	
00027e  4938              LDR      r1,|L144.864|
000280  4831              LDR      r0,|L144.840|
000282  f7fffffe          BL       strcat
;;;1353   		strcat(data,fuelstr);
000286  4911              LDR      r1,|L144.716|
000288  482f              LDR      r0,|L144.840|
00028a  f7fffffe          BL       strcat
;;;1354   		strcat(data,",AC=");	
00028e  4935              LDR      r1,|L144.868|
000290  482d              LDR      r0,|L144.840|
000292  f7fffffe          BL       strcat
;;;1355   		strcat(data,acstr);
000296  491b              LDR      r1,|L144.772|
000298  482b              LDR      r0,|L144.840|
00029a  f7fffffe          BL       strcat
;;;1356   		strcat(data,",I=");	
00029e  4932              LDR      r1,|L144.872|
0002a0  4829              LDR      r0,|L144.840|
0002a2  f7fffffe          BL       strcat
;;;1357   		strcat(data,ignstr);		
0002a6  4914              LDR      r1,|L144.760|
0002a8  4827              LDR      r0,|L144.840|
0002aa  f7fffffe          BL       strcat
;;;1358   		if(!(GPIOC_PDIR & 0x00000001)){
0002ae  4813              LDR      r0,|L144.764|
0002b0  3040              ADDS     r0,r0,#0x40
0002b2  6900              LDR      r0,[r0,#0x10]
0002b4  07c0              LSLS     r0,r0,#31
0002b6  0fc0              LSRS     r0,r0,#31
0002b8  2800              CMP      r0,#0
0002ba  d003              BEQ      |L144.708|
;;;1359   		}
;;;1360   		else{strcat(data,",BR*");}
0002bc  492b              LDR      r1,|L144.876|
0002be  4822              LDR      r0,|L144.840|
0002c0  f7fffffe          BL       strcat
                  |L144.708|
;;;1361   //return 0;
;;;1362   }
0002c4  bdfe              POP      {r1-r7,pc}
;;;1363   
                          ENDP

0002c6  0000              DCW      0x0000
                  |L144.712|
                          DCD      time52
                  |L144.716|
                          DCD      fuelstr
                  |L144.720|
                          DCD      fuel
                  |L144.724|
                          DCD      ||.conststring||+0x100
                  |L144.728|
                          DCD      tmeout
                  |L144.732|
                          DCD      ||.conststring||+0x10
                  |L144.736|
                          DCD      ||.conststring||+0xe0
                  |L144.740|
                          DCD      ||.conststring||+0x2c
                  |L144.744|
                          DCD      ||.conststring||+0x104
                  |L144.748|
                          DCD      num2
                  |L144.752|
                          DCD      uart_string_gsm
                  |L144.756|
                          DCD      voltagecbc
                  |L144.760|
                          DCD      ignstr
                  |L144.764|
                          DCD      0x400ff040
                  |L144.768|
                          DCD      ||.conststring||+0x114
                  |L144.772|
                          DCD      acstr
                  |L144.776|
                          DCD      lpticks
                  |L144.780|
                          DCD      int_erval
                  |L144.784|
                          DCD      lati
                  |L144.788|
                          DCD      ||rmc||
                  |L144.792|
                          DCD      longi
                  |L144.796|
                          DCD      velocity
                  |L144.800|
                          DCD      speed
                  |L144.804|
                          DCD      c
                  |L144.808|
                          DCD      0x40590000
                  |L144.812|
                          DCD      ||hh||
                  |L144.816|
                          DCD      hh11
                  |L144.820|
                          DCD      mm11
                  |L144.824|
                          DCD      0x404e0000
                  |L144.828|
                          DCD      mm22
                  |L144.832|
                          DCD      ||.conststring||+0x118
                  |L144.836|
                          DCD      imei
                  |L144.840|
                          DCD      data
                  |L144.844|
                          DCD      ||.conststring||+0x608
                  |L144.848|
                          DCD      ||.conststring||+0x120
                  |L144.852|
                          DCD      gga
                  |L144.856|
                          DCD      ||.conststring||+0x60c
                  |L144.860|
                          DCD      ||.conststring||+0x11c
                  |L144.864|
                          DCD      ||.conststring||+0x130
                  |L144.868|
                          DCD      ||.conststring||+0x134
                  |L144.872|
                          DCD      ||.conststring||+0x13c
                  |L144.876|
                          DCD      ||.conststring||+0x140

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;70     
;;;71     __inline void remove_all_chars(char* str, char c, char d) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;72         char *pr = str, *pw = str;
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
;;;73         while (*pr) {
00000a  e015              B        |L151.56|
                  |L151.12|
;;;74             *pw = *pr++;
00000c  780d              LDRB     r5,[r1,#0]
00000e  7005              STRB     r5,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
;;;75     			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
000012  7805              LDRB     r5,[r0,#0]
000014  42a5              CMP      r5,r4
000016  d00d              BEQ      |L151.52|
000018  7805              LDRB     r5,[r0,#0]
00001a  4295              CMP      r5,r2
00001c  d00a              BEQ      |L151.52|
00001e  7805              LDRB     r5,[r0,#0]
000020  2d20              CMP      r5,#0x20
000022  d007              BEQ      |L151.52|
000024  7805              LDRB     r5,[r0,#0]
000026  2d2f              CMP      r5,#0x2f
000028  d004              BEQ      |L151.52|
00002a  7805              LDRB     r5,[r0,#0]
00002c  2d3a              CMP      r5,#0x3a
00002e  d001              BEQ      |L151.52|
000030  2501              MOVS     r5,#1
000032  e000              B        |L151.54|
                  |L151.52|
000034  2500              MOVS     r5,#0
                  |L151.54|
000036  1828              ADDS     r0,r5,r0
                  |L151.56|
000038  780d              LDRB     r5,[r1,#0]            ;73
00003a  2d00              CMP      r5,#0                 ;73
00003c  d1e6              BNE      |L151.12|
;;;76         }
;;;77         *pw = '\0';
00003e  7005              STRB     r5,[r0,#0]
;;;78     }
000040  bd30              POP      {r4,r5,pc}
;;;79     
                          ENDP


                          AREA ||i.send_chunk||, COMGROUP=send_chunk, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_chunk PROC
;;;1803   
;;;1804   __inline void  send_chunk(){
000000  b57c              PUSH     {r2-r6,lr}
;;;1805   fsz=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L158.1024|
000006  6008              STR      r0,[r1,#0]  ; fsz
;;;1806   times=-2;	
000008  1e80              SUBS     r0,r0,#2
00000a  49fe              LDR      r1,|L158.1028|
00000c  6008              STR      r0,[r1,#0]  ; times
;;;1807   	
;;;1808   
;;;1809   temp=int_erval;				
00000e  48fe              LDR      r0,|L158.1032|
000010  6800              LDR      r0,[r0,#0]  ; int_erval
000012  49fe              LDR      r1,|L158.1036|
000014  6008              STR      r0,[r1,#0]  ; temp
;;;1810   int_erval=1;
000016  2001              MOVS     r0,#1
000018  49fb              LDR      r1,|L158.1032|
00001a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1811   
;;;1812   	
;;;1813   memset(at_,0,100);
00001c  2164              MOVS     r1,#0x64
00001e  48fc              LDR      r0,|L158.1040|
000020  f7fffffe          BL       __aeabi_memclr
;;;1814   sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
000024  4afb              LDR      r2,|L158.1044|
000026  49fc              LDR      r1,|L158.1048|
000028  48f9              LDR      r0,|L158.1040|
00002a  f7fffffe          BL       __2sprintf
;;;1815   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00002e  48fb              LDR      r0,|L158.1052|
000030  6800              LDR      r0,[r0,#0]  ; tmeout
000032  4bfb              LDR      r3,|L158.1056|
000034  4afb              LDR      r2,|L158.1060|
000036  49fc              LDR      r1,|L158.1064|
000038  9000              STR      r0,[sp,#0]
00003a  48f5              LDR      r0,|L158.1040|
00003c  f7fffffe          BL       send_GSM
;;;1816   parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
000040  48fa              LDR      r0,|L158.1068|
000042  210d              MOVS     r1,#0xd
000044  2320              MOVS     r3,#0x20
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2101              MOVS     r1,#1
00004e  48f8              LDR      r0,|L158.1072|
000050  f7fffffe          BL       parse_g
;;;1817   fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
000054  48f5              LDR      r0,|L158.1068|
000056  f7fffffe          BL       stof
00005a  49e9              LDR      r1,|L158.1024|
00005c  6008              STR      r0,[r1,#0]  ; fsz
;;;1818   //reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1819   	
;;;1820   times =	(fsz/900) + 2;
00005e  49f5              LDR      r1,|L158.1076|
000060  48e7              LDR      r0,|L158.1024|
000062  6800              LDR      r0,[r0,#0]  ; fsz
000064  f7fffffe          BL       __aeabi_fdiv
000068  4605              MOV      r5,r0
00006a  2101              MOVS     r1,#1
00006c  0789              LSLS     r1,r1,#30
00006e  f7fffffe          BL       __aeabi_fadd
000072  4604              MOV      r4,r0
000074  f7fffffe          BL       __aeabi_f2iz
000078  49e2              LDR      r1,|L158.1028|
00007a  6008              STR      r0,[r1,#0]  ; times
;;;1821   for(;k5<=(times);){
00007c  e3fd              B        |L158.2170|
                  |L158.126|
;;;1822   if(fsz==0){log0=1;break;}
00007e  2100              MOVS     r1,#0
000080  48df              LDR      r0,|L158.1024|
000082  6800              LDR      r0,[r0,#0]  ; fsz
000084  f7fffffe          BL       __aeabi_cfcmpeq
000088  d103              BNE      |L158.146|
00008a  2001              MOVS     r0,#1
00008c  49ea              LDR      r1,|L158.1080|
00008e  6008              STR      r0,[r1,#0]  ; log0
000090  e3f4              B        |L158.2172|
                  |L158.146|
;;;1823   else log0=0;
000092  2000              MOVS     r0,#0
000094  49e8              LDR      r1,|L158.1080|
000096  6008              STR      r0,[r1,#0]  ; log0
;;;1824   
;;;1825   	RESET_ON;
000098  2020              MOVS     r0,#0x20
00009a  49e8              LDR      r1,|L158.1084|
00009c  6048              STR      r0,[r1,#4]
;;;1826   	DTR_OFF;
00009e  2080              MOVS     r0,#0x80
0000a0  49e6              LDR      r1,|L158.1084|
0000a2  3140              ADDS     r1,r1,#0x40
0000a4  6088              STR      r0,[r1,#8]
;;;1827   	
;;;1828   msg_sim800(); 
0000a6  f7fffffe          BL       msg_sim800
;;;1829   
;;;1830   memset(data,0,strlen(data));	
0000aa  48e5              LDR      r0,|L158.1088|
0000ac  f7fffffe          BL       strlen
0000b0  4604              MOV      r4,r0
0000b2  4621              MOV      r1,r4
0000b4  48e2              LDR      r0,|L158.1088|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;1831   strcat(data,"\n");	
0000ba  49e2              LDR      r1,|L158.1092|
0000bc  48e0              LDR      r0,|L158.1088|
0000be  f7fffffe          BL       strcat
;;;1832   	
;;;1833   	
;;;1834   	memset(at_,0,100);
0000c2  2164              MOVS     r1,#0x64
0000c4  48d2              LDR      r0,|L158.1040|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1835   	sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);
0000ca  4ad2              LDR      r2,|L158.1044|
0000cc  49d2              LDR      r1,|L158.1048|
0000ce  48d0              LDR      r0,|L158.1040|
0000d0  f7fffffe          BL       __2sprintf
;;;1836   GPS_COLLECT();
0000d4  f7fffffe          BL       GPS_COLLECT
;;;1837   
;;;1838   	
;;;1839   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
0000d8  48d0              LDR      r0,|L158.1052|
0000da  6800              LDR      r0,[r0,#0]  ; tmeout
0000dc  4bd0              LDR      r3,|L158.1056|
0000de  4ad1              LDR      r2,|L158.1060|
0000e0  49d1              LDR      r1,|L158.1064|
0000e2  9000              STR      r0,[sp,#0]
0000e4  48ca              LDR      r0,|L158.1040|
0000e6  f7fffffe          BL       send_GSM
;;;1840   	parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
0000ea  48d0              LDR      r0,|L158.1068|
0000ec  210d              MOVS     r1,#0xd
0000ee  2320              MOVS     r3,#0x20
0000f0  2205              MOVS     r2,#5
0000f2  9100              STR      r1,[sp,#0]
0000f4  9001              STR      r0,[sp,#4]
0000f6  2101              MOVS     r1,#1
0000f8  48cd              LDR      r0,|L158.1072|
0000fa  f7fffffe          BL       parse_g
;;;1841   	fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
0000fe  48cb              LDR      r0,|L158.1068|
000100  f7fffffe          BL       stof
000104  49be              LDR      r1,|L158.1024|
000106  6008              STR      r0,[r1,#0]  ; fsz
;;;1842   	//reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1843   	times =	(fsz/900) + 1;	
000108  49ca              LDR      r1,|L158.1076|
00010a  48bd              LDR      r0,|L158.1024|
00010c  6800              LDR      r0,[r0,#0]  ; fsz
00010e  f7fffffe          BL       __aeabi_fdiv
000112  4605              MOV      r5,r0
000114  217f              MOVS     r1,#0x7f
000116  05c9              LSLS     r1,r1,#23
000118  f7fffffe          BL       __aeabi_fadd
00011c  4604              MOV      r4,r0
00011e  f7fffffe          BL       __aeabi_f2iz
000122  49b8              LDR      r1,|L158.1028|
000124  6008              STR      r0,[r1,#0]  ; times
;;;1844   	
;;;1845   	
;;;1846   memset(at_,0,100);
000126  2164              MOVS     r1,#0x64
000128  48b9              LDR      r0,|L158.1040|
00012a  f7fffffe          BL       __aeabi_memclr
;;;1847   sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>          \r\n\r\n",times,k5,rtcticks2);							
00012e  48c6              LDR      r0,|L158.1096|
000130  6800              LDR      r0,[r0,#0]  ; rtcticks2
000132  9000              STR      r0,[sp,#0]
000134  48c5              LDR      r0,|L158.1100|
000136  6803              LDR      r3,[r0,#0]  ; k5
000138  48b2              LDR      r0,|L158.1028|
00013a  49c5              LDR      r1,|L158.1104|
00013c  6802              LDR      r2,[r0,#0]  ; times
00013e  48b4              LDR      r0,|L158.1040|
000140  f7fffffe          BL       __2sprintf
;;;1848   send_modem(at_);
000144  48b2              LDR      r0,|L158.1040|
000146  f7fffffe          BL       send_modem
;;;1849   clear();
00014a  f7fffffe          BL       clear
;;;1850   	
;;;1851   	
;;;1852   		sprintf(at_, "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",drive,cursorvaluepr );		//1256
00014e  48c1              LDR      r0,|L158.1108|
000150  4ab0              LDR      r2,|L158.1044|
000152  49c1              LDR      r1,|L158.1112|
000154  6803              LDR      r3,[r0,#0]  ; cursorvaluepr
000156  48ae              LDR      r0,|L158.1040|
000158  f7fffffe          BL       __2sprintf
;;;1853   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",5);
00015c  2005              MOVS     r0,#5
00015e  4bb0              LDR      r3,|L158.1056|
000160  4ab0              LDR      r2,|L158.1060|
000162  49b1              LDR      r1,|L158.1064|
000164  9000              STR      r0,[sp,#0]
000166  48aa              LDR      r0,|L158.1040|
000168  f7fffffe          BL       send_GSM
;;;1854   			if(strstr(uart_string_gsm,"ERROR")){
00016c  49bb              LDR      r1,|L158.1116|
00016e  48b0              LDR      r0,|L158.1072|
000170  f7fffffe          BL       strstr
000174  2800              CMP      r0,#0
000176  d00b              BEQ      |L158.400|
;;;1855   				RESET_OFF;
000178  2020              MOVS     r0,#0x20
00017a  49b0              LDR      r1,|L158.1084|
00017c  6088              STR      r0,[r1,#8]
;;;1856   				delay(50);
00017e  2032              MOVS     r0,#0x32
000180  f7fffffe          BL       delay
;;;1857   				RESET_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L158.1084|
000188  6048              STR      r0,[r1,#4]
;;;1858   				delay(50);
00018a  2032              MOVS     r0,#0x32
00018c  f7fffffe          BL       delay
                  |L158.400|
;;;1859   			}
;;;1860   		cntendl=count_char('\n',uart_string_gsm);
000190  49a7              LDR      r1,|L158.1072|
000192  200a              MOVS     r0,#0xa
000194  f7fffffe          BL       count_char
000198  49b1              LDR      r1,|L158.1120|
00019a  6008              STR      r0,[r1,#0]  ; cntendl
;;;1861      //if(cntendl!=0)
;;;1862   		enters = cntendl;		
00019c  4608              MOV      r0,r1
00019e  6800              LDR      r0,[r0,#0]  ; cntendl
0001a0  49b0              LDR      r1,|L158.1124|
0001a2  6008              STR      r0,[r1,#0]  ; enters
;;;1863   		memset(sd_data,0,1400);
0001a4  21af              MOVS     r1,#0xaf
0001a6  00c9              LSLS     r1,r1,#3
0001a8  48af              LDR      r0,|L158.1128|
0001aa  f7fffffe          BL       __aeabi_memclr
;;;1864   		parse_g(uart_string_gsm, 1,enters-2, '\n', '\n' ,sd_data);	
0001ae  48ae              LDR      r0,|L158.1128|
0001b0  210a              MOVS     r1,#0xa
0001b2  9100              STR      r1,[sp,#0]
0001b4  9001              STR      r0,[sp,#4]
0001b6  48ab              LDR      r0,|L158.1124|
0001b8  6800              LDR      r0,[r0,#0]  ; enters
0001ba  1e82              SUBS     r2,r0,#2
0001bc  460b              MOV      r3,r1
0001be  2101              MOVS     r1,#1
0001c0  489b              LDR      r0,|L158.1072|
0001c2  f7fffffe          BL       parse_g
;;;1865   		strcat(sd_data,"\n");
0001c6  499f              LDR      r1,|L158.1092|
0001c8  48a7              LDR      r0,|L158.1128|
0001ca  f7fffffe          BL       strcat
;;;1866   		strcat(sd_data,data);
0001ce  499c              LDR      r1,|L158.1088|
0001d0  48a5              LDR      r0,|L158.1128|
0001d2  f7fffffe          BL       strcat
;;;1867   		if(strstr(sd_data,"SEND OK")    ||   strstr(sd_data,"ERROR") || strstr(sd_data,"FAIL")  ||  strstr(sd_data,"DEACT"))	{
0001d6  49a5              LDR      r1,|L158.1132|
0001d8  48a3              LDR      r0,|L158.1128|
0001da  f7fffffe          BL       strstr
0001de  2800              CMP      r0,#0
0001e0  d111              BNE      |L158.518|
0001e2  499e              LDR      r1,|L158.1116|
0001e4  48a0              LDR      r0,|L158.1128|
0001e6  f7fffffe          BL       strstr
0001ea  2800              CMP      r0,#0
0001ec  d10b              BNE      |L158.518|
0001ee  49a0              LDR      r1,|L158.1136|
0001f0  489d              LDR      r0,|L158.1128|
0001f2  f7fffffe          BL       strstr
0001f6  2800              CMP      r0,#0
0001f8  d105              BNE      |L158.518|
0001fa  499e              LDR      r1,|L158.1140|
0001fc  489a              LDR      r0,|L158.1128|
0001fe  f7fffffe          BL       strstr
000202  2800              CMP      r0,#0
000204  d008              BEQ      |L158.536|
                  |L158.518|
;;;1868   		memset(exception,0,200);	
000206  21c8              MOVS     r1,#0xc8
000208  489b              LDR      r0,|L158.1144|
00020a  f7fffffe          BL       __aeabi_memclr
;;;1869   		strcat(exception,"exception : COMPARED RESPONCES IN THE DATA\n\n\n\n");	
00020e  499b              LDR      r1,|L158.1148|
000210  4899              LDR      r0,|L158.1144|
000212  f7fffffe          BL       strcat
000216  e003              B        |L158.544|
                  |L158.536|
;;;1870   		}
;;;1871   		else{memset(exception,0,200);}
000218  21c8              MOVS     r1,#0xc8
00021a  4897              LDR      r0,|L158.1144|
00021c  f7fffffe          BL       __aeabi_memclr
                  |L158.544|
;;;1872   
;;;1873   	
;;;1874   		qwe=strlen(uart_string_gsm);
000220  4883              LDR      r0,|L158.1072|
000222  f7fffffe          BL       strlen
000226  4996              LDR      r1,|L158.1152|
000228  6008              STR      r0,[r1,#0]  ; qwe
;;;1875   		memset(uart_string_gsm,0,qwe);
00022a  4608              MOV      r0,r1
00022c  6801              LDR      r1,[r0,#0]  ; qwe
00022e  4880              LDR      r0,|L158.1072|
000230  f7fffffe          BL       __aeabi_memclr
;;;1876   		
;;;1877   
;;;1878   	
;;;1879   		
;;;1880   		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT",tmeout);	
000234  4879              LDR      r0,|L158.1052|
000236  6800              LDR      r0,[r0,#0]  ; tmeout
000238  4b92              LDR      r3,|L158.1156|
00023a  4a88              LDR      r2,|L158.1116|
00023c  4992              LDR      r1,|L158.1160|
00023e  9000              STR      r0,[sp,#0]
000240  4892              LDR      r0,|L158.1164|
000242  f7fffffe          BL       send_GSM
;;;1881   								cond =mystrstr(uart_string_gsm,'>');
000246  213e              MOVS     r1,#0x3e
000248  4879              LDR      r0,|L158.1072|
00024a  f7fffffe          BL       mystrstr
00024e  4990              LDR      r1,|L158.1168|
000250  7008              STRB     r0,[r1,#0]
;;;1882   									if(cond)	
000252  4608              MOV      r0,r1
000254  7800              LDRB     r0,[r0,#0]  ; cond
000256  2800              CMP      r0,#0
000258  d101              BNE      |L158.606|
00025a  f001f801          BL       |L158.4704|
                  |L158.606|
;;;1883   									{	
;;;1884   									clear();
00025e  f7fffffe          BL       clear
;;;1885   									memset(uart_string_gsm,0,5000);
000262  498c              LDR      r1,|L158.1172|
000264  4872              LDR      r0,|L158.1072|
000266  f7fffffe          BL       __aeabi_memclr
;;;1886   									if(strlen(exception) > 5){
00026a  4883              LDR      r0,|L158.1144|
00026c  f7fffffe          BL       strlen
000270  2805              CMP      r0,#5
000272  d905              BLS      |L158.640|
;;;1887   									qwe=strlen(exception);
000274  4880              LDR      r0,|L158.1144|
000276  f7fffffe          BL       strlen
00027a  4981              LDR      r1,|L158.1152|
00027c  6008              STR      r0,[r1,#0]  ; qwe
00027e  e004              B        |L158.650|
                  |L158.640|
;;;1888   									}
;;;1889   									else{										
;;;1890   									qwe=strlen(sd_data);
000280  4879              LDR      r0,|L158.1128|
000282  f7fffffe          BL       strlen
000286  497e              LDR      r1,|L158.1152|
000288  6008              STR      r0,[r1,#0]  ; qwe
                  |L158.650|
;;;1891   									}										
;;;1892   									tout=0;
00028a  2000              MOVS     r0,#0
00028c  4982              LDR      r1,|L158.1176|
00028e  6008              STR      r0,[r1,#0]  ; tout
;;;1893   									k2=0;
000290  4982              LDR      r1,|L158.1180|
000292  6008              STR      r0,[r1,#0]  ; k2
;;;1894   									for(k=0;k<(qwe);k++)
000294  4982              LDR      r1,|L158.1184|
000296  6008              STR      r0,[r1,#0]  ; k
000298  e018              B        |L158.716|
                  |L158.666|
;;;1895   									{
;;;1896   										if(strlen(exception) > 5){
00029a  4877              LDR      r0,|L158.1144|
00029c  f7fffffe          BL       strlen
0002a0  2805              CMP      r0,#5
0002a2  d907              BLS      |L158.692|
;;;1897   										uart_putchar(UART1_BASE_PTR, exception[k]);	
0002a4  4874              LDR      r0,|L158.1144|
0002a6  4a7e              LDR      r2,|L158.1184|
0002a8  6812              LDR      r2,[r2,#0]  ; k
0002aa  5c81              LDRB     r1,[r0,r2]
0002ac  487d              LDR      r0,|L158.1188|
0002ae  f7fffffe          BL       uart_putchar
0002b2  e006              B        |L158.706|
                  |L158.692|
;;;1898   										}
;;;1899   										else{										
;;;1900   										uart_putchar(UART1_BASE_PTR, sd_data[k]);
0002b4  486c              LDR      r0,|L158.1128|
0002b6  4a7a              LDR      r2,|L158.1184|
0002b8  6812              LDR      r2,[r2,#0]  ; k
0002ba  5c81              LDRB     r1,[r0,r2]
0002bc  4879              LDR      r0,|L158.1188|
0002be  f7fffffe          BL       uart_putchar
                  |L158.706|
0002c2  4877              LDR      r0,|L158.1184|
0002c4  6800              LDR      r0,[r0,#0]            ;1894  ; k
0002c6  1c40              ADDS     r0,r0,#1              ;1894
0002c8  4975              LDR      r1,|L158.1184|
0002ca  6008              STR      r0,[r1,#0]            ;1894  ; k
                  |L158.716|
0002cc  4874              LDR      r0,|L158.1184|
0002ce  6800              LDR      r0,[r0,#0]            ;1894  ; k
0002d0  496b              LDR      r1,|L158.1152|
0002d2  6809              LDR      r1,[r1,#0]            ;1894  ; qwe
0002d4  4288              CMP      r0,r1                 ;1894
0002d6  dbe0              BLT      |L158.666|
;;;1901   										}
;;;1902   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
0002d8  210a              MOVS     r1,#0xa
0002da  4872              LDR      r0,|L158.1188|
0002dc  f7fffffe          BL       uart_putchar
0002e0  211a              MOVS     r1,#0x1a
0002e2  4870              LDR      r0,|L158.1188|
0002e4  f7fffffe          BL       uart_putchar
0002e8  211a              MOVS     r1,#0x1a
0002ea  486e              LDR      r0,|L158.1188|
0002ec  f7fffffe          BL       uart_putchar
0002f0  211a              MOVS     r1,#0x1a
0002f2  486c              LDR      r0,|L158.1188|
0002f4  f7fffffe          BL       uart_putchar
0002f8  211a              MOVS     r1,#0x1a
0002fa  486a              LDR      r0,|L158.1188|
0002fc  f7fffffe          BL       uart_putchar
000300  211a              MOVS     r1,#0x1a
000302  4868              LDR      r0,|L158.1188|
000304  f7fffffe          BL       uart_putchar
000308  211a              MOVS     r1,#0x1a
00030a  4866              LDR      r0,|L158.1188|
00030c  f7fffffe          BL       uart_putchar
;;;1903   									do
000310  bf00              NOP      
                  |L158.786|
;;;1904   																{q1=strstr(uart_string_gsm,"SEND OK");
000312  4956              LDR      r1,|L158.1132|
000314  4846              LDR      r0,|L158.1072|
000316  f7fffffe          BL       strstr
00031a  4963              LDR      r1,|L158.1192|
00031c  6008              STR      r0,[r1,#0]  ; q1
;;;1905   																	q2=strstr(uart_string_gsm, "ERROR");
00031e  494f              LDR      r1,|L158.1116|
000320  4843              LDR      r0,|L158.1072|
000322  f7fffffe          BL       strstr
000326  4961              LDR      r1,|L158.1196|
000328  6008              STR      r0,[r1,#0]  ; q2
;;;1906   																		q3=strstr(uart_string_gsm, "FAIL");	
00032a  4951              LDR      r1,|L158.1136|
00032c  4840              LDR      r0,|L158.1072|
00032e  f7fffffe          BL       strstr
000332  495f              LDR      r1,|L158.1200|
000334  6008              STR      r0,[r1,#0]  ; q3
;;;1907   																			q4=strstr(uart_string_gsm, "DEACT");	
000336  494f              LDR      r1,|L158.1140|
000338  483d              LDR      r0,|L158.1072|
00033a  f7fffffe          BL       strstr
00033e  495d              LDR      r1,|L158.1204|
000340  6008              STR      r0,[r1,#0]  ; q4
;;;1908   																	
;;;1909   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) ); //|| (timeout < 1)   
000342  4859              LDR      r0,|L158.1192|
000344  6800              LDR      r0,[r0,#0]  ; q1
000346  2800              CMP      r0,#0
000348  d10f              BNE      |L158.874|
00034a  4858              LDR      r0,|L158.1196|
00034c  6800              LDR      r0,[r0,#0]  ; q2
00034e  2800              CMP      r0,#0
000350  d10b              BNE      |L158.874|
000352  4857              LDR      r0,|L158.1200|
000354  6800              LDR      r0,[r0,#0]  ; q3
000356  2800              CMP      r0,#0
000358  d107              BNE      |L158.874|
00035a  4608              MOV      r0,r1
00035c  6800              LDR      r0,[r0,#0]  ; q4
00035e  2800              CMP      r0,#0
000360  d103              BNE      |L158.874|
000362  484d              LDR      r0,|L158.1176|
000364  6800              LDR      r0,[r0,#0]  ; tout
000366  2808              CMP      r0,#8
000368  ddd3              BLE      |L158.786|
                  |L158.874|
;;;1910   																delay(10);clear();
00036a  200a              MOVS     r0,#0xa
00036c  f7fffffe          BL       delay
000370  f7fffffe          BL       clear
;;;1911   														uart_putchar(UART1_BASE_PTR,0x1A);
000374  211a              MOVS     r1,#0x1a
000376  484b              LDR      r0,|L158.1188|
000378  f7fffffe          BL       uart_putchar
;;;1912   												delay(10);
00037c  200a              MOVS     r0,#0xa
00037e  f7fffffe          BL       delay
;;;1913   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000382  211a              MOVS     r1,#0x1a
000384  4847              LDR      r0,|L158.1188|
000386  f7fffffe          BL       uart_putchar
00038a  211a              MOVS     r1,#0x1a
00038c  4845              LDR      r0,|L158.1188|
00038e  f7fffffe          BL       uart_putchar
000392  211a              MOVS     r1,#0x1a
000394  4843              LDR      r0,|L158.1188|
000396  f7fffffe          BL       uart_putchar
;;;1914   delay(50);
00039a  2032              MOVS     r0,#0x32
00039c  f7fffffe          BL       delay
;;;1915   if(strstr(uart_string_gsm,"SEND OK"))
0003a0  4932              LDR      r1,|L158.1132|
0003a2  4823              LDR      r0,|L158.1072|
0003a4  f7fffffe          BL       strstr
0003a8  2800              CMP      r0,#0
0003aa  d013              BEQ      |L158.980|
;;;1916   {
;;;1917   cursorvaluene=cursor_val(sd_data,enters-3);
0003ac  482d              LDR      r0,|L158.1124|
0003ae  6800              LDR      r0,[r0,#0]  ; enters
0003b0  1ec1              SUBS     r1,r0,#3
0003b2  482d              LDR      r0,|L158.1128|
0003b4  f7fffffe          BL       cursor_val
0003b8  493f              LDR      r1,|L158.1208|
0003ba  6008              STR      r0,[r1,#0]  ; cursorvaluene
;;;1918   cursorvaluepr+=cursorvaluene;
0003bc  4825              LDR      r0,|L158.1108|
0003be  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
0003c0  6809              LDR      r1,[r1,#0]  ; cursorvaluene
0003c2  1840              ADDS     r0,r0,r1
0003c4  4923              LDR      r1,|L158.1108|
0003c6  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1919   k5++;
0003c8  4820              LDR      r0,|L158.1100|
0003ca  6800              LDR      r0,[r0,#0]  ; k5
0003cc  1c40              ADDS     r0,r0,#1
0003ce  491f              LDR      r1,|L158.1100|
0003d0  6008              STR      r0,[r1,#0]  ; k5
0003d2  e3fd              B        |L158.3024|
                  |L158.980|
;;;1920   }
;;;1921   else{remove_all_chars(data, '\n', '\n');
0003d4  220a              MOVS     r2,#0xa
0003d6  4611              MOV      r1,r2
0003d8  4819              LDR      r0,|L158.1088|
0003da  f7fffffe          BL       remove_all_chars
;;;1922   			strcat(data,"CH\n");
0003de  4937              LDR      r1,|L158.1212|
0003e0  4817              LDR      r0,|L158.1088|
0003e2  f7fffffe          BL       strcat
;;;1923   
;;;1924   	delay(100);
0003e6  2064              MOVS     r0,#0x64
0003e8  f7fffffe          BL       delay
;;;1925   		clear();//memset(uart_string_gsm,0,5000);
0003ec  f7fffffe          BL       clear
;;;1926   	
;;;1927   	memset(at_,0,100);
0003f0  2164              MOVS     r1,#0x64
0003f2  4807              LDR      r0,|L158.1040|
0003f4  f7fffffe          BL       __aeabi_memclr
;;;1928   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0003f8  4811              LDR      r0,|L158.1088|
0003fa  f7fffffe          BL       strlen
0003fe  e05f              B        |L158.1216|
                  |L158.1024|
                          DCD      ||fsz||
                  |L158.1028|
                          DCD      times
                  |L158.1032|
                          DCD      int_erval
                  |L158.1036|
                          DCD      temp
                  |L158.1040|
                          DCD      at_
                  |L158.1044|
                          DCD      drive
                  |L158.1048|
                          DCD      ||.conststring||+0x618
                  |L158.1052|
                          DCD      tmeout
                  |L158.1056|
                          DCD      ||.conststring||+0x10
                  |L158.1060|
                          DCD      ||.conststring||+0x18
                  |L158.1064|
                          DCD      ||.conststring||+0x2c
                  |L158.1068|
                          DCD      fsize
                  |L158.1072|
                          DCD      uart_string_gsm
                  |L158.1076|
                          DCD      0x44610000
                  |L158.1080|
                          DCD      log0
                  |L158.1084|
                          DCD      0x400ff080
                  |L158.1088|
                          DCD      data
                  |L158.1092|
                          DCD      ||.conststring||+0x4b4
                  |L158.1096|
                          DCD      rtcticks2
                  |L158.1100|
                          DCD      ||k5||
                  |L158.1104|
                          DCD      ||.conststring||+0x638
                  |L158.1108|
                          DCD      cursorvaluepr
                  |L158.1112|
                          DCD      ||.conststring||+0x66c
                  |L158.1116|
                          DCD      ||.conststring||+0xe0
                  |L158.1120|
                          DCD      cntendl
                  |L158.1124|
                          DCD      enters
                  |L158.1128|
                          DCD      sd_data
                  |L158.1132|
                          DCD      ||.conststring||+0x694
                  |L158.1136|
                          DCD      ||.conststring||+0x69c
                  |L158.1140|
                          DCD      ||.conststring||+0x6a4
                  |L158.1144|
                          DCD      exception
                  |L158.1148|
                          DCD      ||.conststring||+0x6ac
                  |L158.1152|
                          DCD      qwe
                  |L158.1156|
                          DCD      ||.conststring||+0x6dc
                  |L158.1160|
                          DCD      ||.conststring||+0x20
                  |L158.1164|
                          DCD      ||.conststring||+0x6e4
                  |L158.1168|
                          DCD      cond
                  |L158.1172|
                          DCD      0x00001388
                  |L158.1176|
                          DCD      tout
                  |L158.1180|
                          DCD      ||k2||
                  |L158.1184|
                          DCD      k
                  |L158.1188|
                          DCD      0x4006b000
                  |L158.1192|
                          DCD      ||q1||
                  |L158.1196|
                          DCD      ||q2||
                  |L158.1200|
                          DCD      ||q3||
                  |L158.1204|
                          DCD      ||q4||
                  |L158.1208|
                          DCD      cursorvaluene
                  |L158.1212|
                          DCD      ||.conststring||+0x4b8
                  |L158.1216|
0004c0  1c44              ADDS     r4,r0,#1
0004c2  4623              MOV      r3,r4
0004c4  4afd              LDR      r2,|L158.2236|
0004c6  49fe              LDR      r1,|L158.2240|
0004c8  48fe              LDR      r0,|L158.2244|
0004ca  f7fffffe          BL       __2sprintf
;;;1929   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0004ce  2005              MOVS     r0,#5
0004d0  4bfd              LDR      r3,|L158.2248|
0004d2  4afe              LDR      r2,|L158.2252|
0004d4  49fe              LDR      r1,|L158.2256|
0004d6  9000              STR      r0,[sp,#0]
0004d8  48fa              LDR      r0,|L158.2244|
0004da  f7fffffe          BL       send_SD
;;;1930   
;;;1931   	
;;;1932   clear();	
0004de  f7fffffe          BL       clear
;;;1933   									k2=0;									//string array counter for uart 1
0004e2  2000              MOVS     r0,#0
0004e4  49fb              LDR      r1,|L158.2260|
0004e6  6008              STR      r0,[r1,#0]  ; k2
;;;1934   									tout=0;	
0004e8  49fb              LDR      r1,|L158.2264|
0004ea  6008              STR      r0,[r1,#0]  ; tout
;;;1935   		for(k=0;k<strlen(data);k++)
0004ec  49fb              LDR      r1,|L158.2268|
0004ee  6008              STR      r0,[r1,#0]  ; k
0004f0  e00b              B        |L158.1290|
                  |L158.1266|
;;;1936   		{
;;;1937   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0004f2  48fb              LDR      r0,|L158.2272|
0004f4  4af9              LDR      r2,|L158.2268|
0004f6  6812              LDR      r2,[r2,#0]  ; k
0004f8  5c81              LDRB     r1,[r0,r2]
0004fa  48fa              LDR      r0,|L158.2276|
0004fc  f7fffffe          BL       uart_putchar
000500  48f6              LDR      r0,|L158.2268|
000502  6800              LDR      r0,[r0,#0]            ;1935  ; k
000504  1c40              ADDS     r0,r0,#1              ;1935
000506  49f5              LDR      r1,|L158.2268|
000508  6008              STR      r0,[r1,#0]            ;1935  ; k
                  |L158.1290|
00050a  48f5              LDR      r0,|L158.2272|
00050c  f7fffffe          BL       strlen
000510  49f2              LDR      r1,|L158.2268|
000512  6809              LDR      r1,[r1,#0]            ;1935  ; k
000514  4288              CMP      r0,r1                 ;1935
000516  d8ec              BHI      |L158.1266|
;;;1938   		}	
;;;1939   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000518  210a              MOVS     r1,#0xa
00051a  48f2              LDR      r0,|L158.2276|
00051c  f7fffffe          BL       uart_putchar
000520  210a              MOVS     r1,#0xa
000522  48f0              LDR      r0,|L158.2276|
000524  f7fffffe          BL       uart_putchar
000528  210a              MOVS     r1,#0xa
00052a  48ee              LDR      r0,|L158.2276|
00052c  f7fffffe          BL       uart_putchar
000530  210a              MOVS     r1,#0xa
000532  48ec              LDR      r0,|L158.2276|
000534  f7fffffe          BL       uart_putchar
000538  210a              MOVS     r1,#0xa
00053a  48ea              LDR      r0,|L158.2276|
00053c  f7fffffe          BL       uart_putchar
000540  210a              MOVS     r1,#0xa
000542  48e8              LDR      r0,|L158.2276|
000544  f7fffffe          BL       uart_putchar
000548  210a              MOVS     r1,#0xa
00054a  48e6              LDR      r0,|L158.2276|
00054c  f7fffffe          BL       uart_putchar
000550  210a              MOVS     r1,#0xa
000552  48e4              LDR      r0,|L158.2276|
000554  f7fffffe          BL       uart_putchar
000558  210a              MOVS     r1,#0xa
00055a  48e2              LDR      r0,|L158.2276|
00055c  f7fffffe          BL       uart_putchar
000560  210a              MOVS     r1,#0xa
000562  48e0              LDR      r0,|L158.2276|
000564  f7fffffe          BL       uart_putchar
000568  210a              MOVS     r1,#0xa
00056a  48de              LDR      r0,|L158.2276|
00056c  f7fffffe          BL       uart_putchar
000570  210a              MOVS     r1,#0xa
000572  48dc              LDR      r0,|L158.2276|
000574  f7fffffe          BL       uart_putchar
000578  210a              MOVS     r1,#0xa
00057a  48da              LDR      r0,|L158.2276|
00057c  f7fffffe          BL       uart_putchar
000580  210a              MOVS     r1,#0xa
000582  48d8              LDR      r0,|L158.2276|
000584  f7fffffe          BL       uart_putchar
000588  210a              MOVS     r1,#0xa
00058a  48d6              LDR      r0,|L158.2276|
00058c  f7fffffe          BL       uart_putchar
000590  210a              MOVS     r1,#0xa
000592  48d4              LDR      r0,|L158.2276|
000594  f7fffffe          BL       uart_putchar
000598  210a              MOVS     r1,#0xa
00059a  48d2              LDR      r0,|L158.2276|
00059c  f7fffffe          BL       uart_putchar
0005a0  210a              MOVS     r1,#0xa
0005a2  48d0              LDR      r0,|L158.2276|
0005a4  f7fffffe          BL       uart_putchar
0005a8  210a              MOVS     r1,#0xa
0005aa  48ce              LDR      r0,|L158.2276|
0005ac  f7fffffe          BL       uart_putchar
0005b0  210a              MOVS     r1,#0xa
0005b2  48cc              LDR      r0,|L158.2276|
0005b4  f7fffffe          BL       uart_putchar
0005b8  210a              MOVS     r1,#0xa
0005ba  48ca              LDR      r0,|L158.2276|
0005bc  f7fffffe          BL       uart_putchar
0005c0  210a              MOVS     r1,#0xa
0005c2  48c8              LDR      r0,|L158.2276|
0005c4  f7fffffe          BL       uart_putchar
0005c8  210a              MOVS     r1,#0xa
0005ca  48c6              LDR      r0,|L158.2276|
0005cc  f7fffffe          BL       uart_putchar
0005d0  210a              MOVS     r1,#0xa
0005d2  48c4              LDR      r0,|L158.2276|
0005d4  f7fffffe          BL       uart_putchar
0005d8  210a              MOVS     r1,#0xa
0005da  48c2              LDR      r0,|L158.2276|
0005dc  f7fffffe          BL       uart_putchar
0005e0  210a              MOVS     r1,#0xa
0005e2  48c0              LDR      r0,|L158.2276|
0005e4  f7fffffe          BL       uart_putchar
0005e8  210a              MOVS     r1,#0xa
0005ea  48be              LDR      r0,|L158.2276|
0005ec  f7fffffe          BL       uart_putchar
0005f0  210a              MOVS     r1,#0xa
0005f2  48bc              LDR      r0,|L158.2276|
0005f4  f7fffffe          BL       uart_putchar
0005f8  210a              MOVS     r1,#0xa
0005fa  48ba              LDR      r0,|L158.2276|
0005fc  f7fffffe          BL       uart_putchar
000600  210a              MOVS     r1,#0xa
000602  48b8              LDR      r0,|L158.2276|
000604  f7fffffe          BL       uart_putchar
000608  210a              MOVS     r1,#0xa
00060a  48b6              LDR      r0,|L158.2276|
00060c  f7fffffe          BL       uart_putchar
000610  210a              MOVS     r1,#0xa
000612  48b4              LDR      r0,|L158.2276|
000614  f7fffffe          BL       uart_putchar
000618  210a              MOVS     r1,#0xa
00061a  48b2              LDR      r0,|L158.2276|
00061c  f7fffffe          BL       uart_putchar
000620  210a              MOVS     r1,#0xa
000622  48b0              LDR      r0,|L158.2276|
000624  f7fffffe          BL       uart_putchar
000628  210a              MOVS     r1,#0xa
00062a  48ae              LDR      r0,|L158.2276|
00062c  f7fffffe          BL       uart_putchar
000630  210a              MOVS     r1,#0xa
000632  48ac              LDR      r0,|L158.2276|
000634  f7fffffe          BL       uart_putchar
000638  210a              MOVS     r1,#0xa
00063a  48aa              LDR      r0,|L158.2276|
00063c  f7fffffe          BL       uart_putchar
000640  210a              MOVS     r1,#0xa
000642  48a8              LDR      r0,|L158.2276|
000644  f7fffffe          BL       uart_putchar
000648  210a              MOVS     r1,#0xa
00064a  48a6              LDR      r0,|L158.2276|
00064c  f7fffffe          BL       uart_putchar
000650  210a              MOVS     r1,#0xa
000652  48a4              LDR      r0,|L158.2276|
000654  f7fffffe          BL       uart_putchar
000658  210a              MOVS     r1,#0xa
00065a  48a2              LDR      r0,|L158.2276|
00065c  f7fffffe          BL       uart_putchar
000660  210a              MOVS     r1,#0xa
000662  48a0              LDR      r0,|L158.2276|
000664  f7fffffe          BL       uart_putchar
000668  210a              MOVS     r1,#0xa
00066a  489e              LDR      r0,|L158.2276|
00066c  f7fffffe          BL       uart_putchar
000670  210a              MOVS     r1,#0xa
000672  489c              LDR      r0,|L158.2276|
000674  f7fffffe          BL       uart_putchar
000678  210a              MOVS     r1,#0xa
00067a  489a              LDR      r0,|L158.2276|
00067c  f7fffffe          BL       uart_putchar
000680  210a              MOVS     r1,#0xa
000682  4898              LDR      r0,|L158.2276|
000684  f7fffffe          BL       uart_putchar
000688  210a              MOVS     r1,#0xa
00068a  4896              LDR      r0,|L158.2276|
00068c  f7fffffe          BL       uart_putchar
000690  210a              MOVS     r1,#0xa
000692  4894              LDR      r0,|L158.2276|
000694  f7fffffe          BL       uart_putchar
000698  210a              MOVS     r1,#0xa
00069a  4892              LDR      r0,|L158.2276|
00069c  f7fffffe          BL       uart_putchar
0006a0  210a              MOVS     r1,#0xa
0006a2  4890              LDR      r0,|L158.2276|
0006a4  f7fffffe          BL       uart_putchar
0006a8  210a              MOVS     r1,#0xa
0006aa  488e              LDR      r0,|L158.2276|
0006ac  f7fffffe          BL       uart_putchar
0006b0  210a              MOVS     r1,#0xa
0006b2  488c              LDR      r0,|L158.2276|
0006b4  f7fffffe          BL       uart_putchar
0006b8  210a              MOVS     r1,#0xa
0006ba  488a              LDR      r0,|L158.2276|
0006bc  f7fffffe          BL       uart_putchar
0006c0  210a              MOVS     r1,#0xa
0006c2  4888              LDR      r0,|L158.2276|
0006c4  f7fffffe          BL       uart_putchar
0006c8  210a              MOVS     r1,#0xa
0006ca  4886              LDR      r0,|L158.2276|
0006cc  f7fffffe          BL       uart_putchar
0006d0  210a              MOVS     r1,#0xa
0006d2  4884              LDR      r0,|L158.2276|
0006d4  f7fffffe          BL       uart_putchar
0006d8  210a              MOVS     r1,#0xa
0006da  4882              LDR      r0,|L158.2276|
0006dc  f7fffffe          BL       uart_putchar
;;;1940   														//timer counts to wait for characters in uart 1 									
;;;1941   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0006e0  bf00              NOP      
                  |L158.1762|
0006e2  4981              LDR      r1,|L158.2280|
0006e4  4881              LDR      r0,|L158.2284|
0006e6  f7fffffe          BL       strstr
0006ea  2800              CMP      r0,#0
0006ec  d109              BNE      |L158.1794|
0006ee  4976              LDR      r1,|L158.2248|
0006f0  487e              LDR      r0,|L158.2284|
0006f2  f7fffffe          BL       strstr
0006f6  2800              CMP      r0,#0
0006f8  d103              BNE      |L158.1794|
0006fa  4877              LDR      r0,|L158.2264|
0006fc  6800              LDR      r0,[r0,#0]  ; tout
0006fe  2805              CMP      r0,#5
000700  ddef              BLE      |L158.1762|
                  |L158.1794|
;;;1942   									{	}
;;;1943   	                clear();
000702  f7fffffe          BL       clear
;;;1944   									memset(data,0,strlen(data));
000706  4876              LDR      r0,|L158.2272|
000708  f7fffffe          BL       strlen
00070c  4604              MOV      r4,r0
00070e  4621              MOV      r1,r4
000710  4873              LDR      r0,|L158.2272|
000712  f7fffffe          BL       __aeabi_memclr
;;;1945   									clear();
000716  f7fffffe          BL       clear
;;;1946   
;;;1947   								
;;;1948   
;;;1949   
;;;1950   
;;;1951   //	log_it();
;;;1952   
;;;1953   			memset(data,0,strlen(data));
00071a  4871              LDR      r0,|L158.2272|
00071c  f7fffffe          BL       strlen
000720  4604              MOV      r4,r0
000722  4621              MOV      r1,r4
000724  486e              LDR      r0,|L158.2272|
000726  f7fffffe          BL       __aeabi_memclr
;;;1954   //*********************************tcp_initialization();***************************************//
;;;1955   
;;;1956   	
;;;1957   msg_sim800(); 
00072a  f7fffffe          BL       msg_sim800
;;;1958   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00072e  2005              MOVS     r0,#5
000730  4b65              LDR      r3,|L158.2248|
000732  4a66              LDR      r2,|L158.2252|
000734  496e              LDR      r1,|L158.2288|
000736  9000              STR      r0,[sp,#0]
000738  486e              LDR      r0,|L158.2292|
00073a  f7fffffe          BL       send_GSM
;;;1959   delay(100);
00073e  2064              MOVS     r0,#0x64
000740  f7fffffe          BL       delay
;;;1960   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
000744  2004              MOVS     r0,#4
000746  4b60              LDR      r3,|L158.2248|
000748  4a6b              LDR      r2,|L158.2296|
00074a  4969              LDR      r1,|L158.2288|
00074c  9000              STR      r0,[sp,#0]
00074e  486b              LDR      r0,|L158.2300|
000750  f7fffffe          BL       send_GSM
;;;1961   GPS_COLLECT2();
000754  f7fffffe          BL       GPS_COLLECT2
;;;1962   strcat(data,"CH\n");		
000758  4969              LDR      r1,|L158.2304|
00075a  4861              LDR      r0,|L158.2272|
00075c  f7fffffe          BL       strcat
;;;1963   GPS_COLLECT2();
000760  f7fffffe          BL       GPS_COLLECT2
;;;1964   strcat(data,"CH\n");	
000764  4966              LDR      r1,|L158.2304|
000766  485e              LDR      r0,|L158.2272|
000768  f7fffffe          BL       strcat
;;;1965   GPS_COLLECT2();
00076c  f7fffffe          BL       GPS_COLLECT2
;;;1966   strcat(data,"CH\n");
000770  4963              LDR      r1,|L158.2304|
000772  485b              LDR      r0,|L158.2272|
000774  f7fffffe          BL       strcat
;;;1967   cond201=(strstr(uart_string_gsm, "OK"));
000778  495d              LDR      r1,|L158.2288|
00077a  485c              LDR      r0,|L158.2284|
00077c  f7fffffe          BL       strstr
000780  4960              LDR      r1,|L158.2308|
000782  6008              STR      r0,[r1,#0]  ; cond201
;;;1968   cond200=(strstr(uart_string_gsm, "ERROR"));
000784  4950              LDR      r1,|L158.2248|
000786  4859              LDR      r0,|L158.2284|
000788  f7fffffe          BL       strstr
00078c  495e              LDR      r1,|L158.2312|
00078e  6008              STR      r0,[r1,#0]  ; cond200
;;;1969   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
000790  485c              LDR      r0,|L158.2308|
000792  6800              LDR      r0,[r0,#0]  ; cond201
000794  2800              CMP      r0,#0
000796  d101              BNE      |L158.1948|
000798  2001              MOVS     r0,#1
00079a  e000              B        |L158.1950|
                  |L158.1948|
00079c  2000              MOVS     r0,#0
                  |L158.1950|
00079e  2800              CMP      r0,#0
                  |L158.1952|
0007a0  d06d              BEQ      |L158.2174|
0007a2  4859              LDR      r0,|L158.2312|
0007a4  6800              LDR      r0,[r0,#0]  ; cond200
0007a6  2800              CMP      r0,#0
0007a8  d101              BNE      |L158.1966|
0007aa  2001              MOVS     r0,#1
0007ac  e000              B        |L158.1968|
                  |L158.1966|
0007ae  2000              MOVS     r0,#0
                  |L158.1968|
0007b0  2800              CMP      r0,#0
0007b2  d0f5              BEQ      |L158.1952|
0007b4  4855              LDR      r0,|L158.2316|
0007b6  6800              LDR      r0,[r0,#0]  ; sleep_flag
0007b8  2801              CMP      r0,#1
0007ba  d0f1              BEQ      |L158.1952|
;;;1970   {
;;;1971   delay(100);
0007bc  2064              MOVS     r0,#0x64
0007be  f7fffffe          BL       delay
;;;1972   clear();//memset(uart_string_gsm,0,5000);
0007c2  f7fffffe          BL       clear
;;;1973   memset(at_,0,100);
0007c6  2164              MOVS     r1,#0x64
0007c8  483e              LDR      r0,|L158.2244|
0007ca  f7fffffe          BL       __aeabi_memclr
;;;1974   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0007ce  4844              LDR      r0,|L158.2272|
0007d0  f7fffffe          BL       strlen
0007d4  1c44              ADDS     r4,r0,#1
0007d6  4623              MOV      r3,r4
0007d8  4a38              LDR      r2,|L158.2236|
0007da  4939              LDR      r1,|L158.2240|
0007dc  4839              LDR      r0,|L158.2244|
0007de  f7fffffe          BL       __2sprintf
;;;1975   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0007e2  2005              MOVS     r0,#5
0007e4  4b38              LDR      r3,|L158.2248|
0007e6  4a39              LDR      r2,|L158.2252|
0007e8  4939              LDR      r1,|L158.2256|
0007ea  9000              STR      r0,[sp,#0]
0007ec  4835              LDR      r0,|L158.2244|
0007ee  f7fffffe          BL       send_SD
;;;1976   clear();	
0007f2  f7fffffe          BL       clear
;;;1977   k2=0;									//string array counter for uart 1
0007f6  2000              MOVS     r0,#0
0007f8  4936              LDR      r1,|L158.2260|
0007fa  6008              STR      r0,[r1,#0]  ; k2
;;;1978   tout=0;	
0007fc  4936              LDR      r1,|L158.2264|
0007fe  6008              STR      r0,[r1,#0]  ; tout
;;;1979   for(k=0;k<strlen(data);k++)
000800  4936              LDR      r1,|L158.2268|
000802  6008              STR      r0,[r1,#0]  ; k
000804  e00b              B        |L158.2078|
                  |L158.2054|
;;;1980   {
;;;1981   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000806  4836              LDR      r0,|L158.2272|
000808  4a34              LDR      r2,|L158.2268|
00080a  6812              LDR      r2,[r2,#0]  ; k
00080c  5c81              LDRB     r1,[r0,r2]
00080e  4835              LDR      r0,|L158.2276|
000810  f7fffffe          BL       uart_putchar
000814  4831              LDR      r0,|L158.2268|
000816  6800              LDR      r0,[r0,#0]            ;1979  ; k
000818  1c40              ADDS     r0,r0,#1              ;1979
00081a  4930              LDR      r1,|L158.2268|
00081c  6008              STR      r0,[r1,#0]            ;1979  ; k
                  |L158.2078|
00081e  4830              LDR      r0,|L158.2272|
000820  f7fffffe          BL       strlen
000824  492d              LDR      r1,|L158.2268|
000826  6809              LDR      r1,[r1,#0]            ;1979  ; k
000828  4288              CMP      r0,r1                 ;1979
00082a  d8ec              BHI      |L158.2054|
;;;1982   }	
;;;1983   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00082c  210a              MOVS     r1,#0xa
00082e  482d              LDR      r0,|L158.2276|
000830  f7fffffe          BL       uart_putchar
000834  210a              MOVS     r1,#0xa
000836  482b              LDR      r0,|L158.2276|
000838  f7fffffe          BL       uart_putchar
00083c  210a              MOVS     r1,#0xa
00083e  4829              LDR      r0,|L158.2276|
000840  f7fffffe          BL       uart_putchar
000844  210a              MOVS     r1,#0xa
000846  4827              LDR      r0,|L158.2276|
000848  f7fffffe          BL       uart_putchar
00084c  210a              MOVS     r1,#0xa
00084e  4825              LDR      r0,|L158.2276|
000850  f7fffffe          BL       uart_putchar
000854  210a              MOVS     r1,#0xa
000856  4823              LDR      r0,|L158.2276|
000858  f7fffffe          BL       uart_putchar
00085c  210a              MOVS     r1,#0xa
00085e  4821              LDR      r0,|L158.2276|
000860  f7fffffe          BL       uart_putchar
000864  210a              MOVS     r1,#0xa
000866  481f              LDR      r0,|L158.2276|
000868  f7fffffe          BL       uart_putchar
00086c  210a              MOVS     r1,#0xa
00086e  481d              LDR      r0,|L158.2276|
000870  f7fffffe          BL       uart_putchar
000874  210a              MOVS     r1,#0xa
000876  481b              LDR      r0,|L158.2276|
000878  e002              B        |L158.2176|
                  |L158.2170|
00087a  e3fd              B        |L158.4216|
                  |L158.2172|
00087c  e398              B        |L158.4016|
                  |L158.2174|
00087e  e112              B        |L158.2726|
                  |L158.2176|
000880  f7fffffe          BL       uart_putchar
000884  210a              MOVS     r1,#0xa
000886  4817              LDR      r0,|L158.2276|
000888  f7fffffe          BL       uart_putchar
00088c  210a              MOVS     r1,#0xa
00088e  4815              LDR      r0,|L158.2276|
000890  f7fffffe          BL       uart_putchar
000894  210a              MOVS     r1,#0xa
000896  4813              LDR      r0,|L158.2276|
000898  f7fffffe          BL       uart_putchar
00089c  210a              MOVS     r1,#0xa
00089e  4811              LDR      r0,|L158.2276|
0008a0  f7fffffe          BL       uart_putchar
0008a4  210a              MOVS     r1,#0xa
0008a6  480f              LDR      r0,|L158.2276|
0008a8  f7fffffe          BL       uart_putchar
0008ac  210a              MOVS     r1,#0xa
0008ae  480d              LDR      r0,|L158.2276|
0008b0  f7fffffe          BL       uart_putchar
0008b4  210a              MOVS     r1,#0xa
0008b6  480b              LDR      r0,|L158.2276|
0008b8  e02a              B        |L158.2320|
0008ba  0000              DCW      0x0000
                  |L158.2236|
                          DCD      drive
                  |L158.2240|
                          DCD      ||.conststring||+0x4bc
                  |L158.2244|
                          DCD      at_
                  |L158.2248|
                          DCD      ||.conststring||+0xe0
                  |L158.2252|
                          DCD      ||.conststring||+0x18
                  |L158.2256|
                          DCD      ||.conststring||+0x20
                  |L158.2260|
                          DCD      ||k2||
                  |L158.2264|
                          DCD      tout
                  |L158.2268|
                          DCD      k
                  |L158.2272|
                          DCD      data
                  |L158.2276|
                          DCD      0x4006b000
                  |L158.2280|
                          DCD      ||.conststring||+0x70
                  |L158.2284|
                          DCD      uart_string_gsm
                  |L158.2288|
                          DCD      ||.conststring||+0x2c
                  |L158.2292|
                          DCD      ||.conststring||+0x6f4
                  |L158.2296|
                          DCD      ||.conststring||+0x704
                  |L158.2300|
                          DCD      ||.conststring||+0x718
                  |L158.2304|
                          DCD      ||.conststring||+0x4b8
                  |L158.2308|
                          DCD      cond201
                  |L158.2312|
                          DCD      cond200
                  |L158.2316|
                          DCD      sleep_flag
                  |L158.2320|
000910  f7fffffe          BL       uart_putchar
000914  210a              MOVS     r1,#0xa
000916  48fe              LDR      r0,|L158.3344|
000918  f7fffffe          BL       uart_putchar
00091c  210a              MOVS     r1,#0xa
00091e  48fc              LDR      r0,|L158.3344|
000920  f7fffffe          BL       uart_putchar
000924  210a              MOVS     r1,#0xa
000926  48fa              LDR      r0,|L158.3344|
000928  f7fffffe          BL       uart_putchar
00092c  210a              MOVS     r1,#0xa
00092e  48f8              LDR      r0,|L158.3344|
000930  f7fffffe          BL       uart_putchar
000934  210a              MOVS     r1,#0xa
000936  48f6              LDR      r0,|L158.3344|
000938  f7fffffe          BL       uart_putchar
00093c  210a              MOVS     r1,#0xa
00093e  48f4              LDR      r0,|L158.3344|
000940  f7fffffe          BL       uart_putchar
000944  210a              MOVS     r1,#0xa
000946  48f2              LDR      r0,|L158.3344|
000948  f7fffffe          BL       uart_putchar
00094c  210a              MOVS     r1,#0xa
00094e  48f0              LDR      r0,|L158.3344|
000950  f7fffffe          BL       uart_putchar
000954  210a              MOVS     r1,#0xa
000956  48ee              LDR      r0,|L158.3344|
000958  f7fffffe          BL       uart_putchar
00095c  210a              MOVS     r1,#0xa
00095e  48ec              LDR      r0,|L158.3344|
000960  f7fffffe          BL       uart_putchar
000964  210a              MOVS     r1,#0xa
000966  48ea              LDR      r0,|L158.3344|
000968  f7fffffe          BL       uart_putchar
00096c  210a              MOVS     r1,#0xa
00096e  48e8              LDR      r0,|L158.3344|
000970  f7fffffe          BL       uart_putchar
000974  210a              MOVS     r1,#0xa
000976  48e6              LDR      r0,|L158.3344|
000978  f7fffffe          BL       uart_putchar
00097c  210a              MOVS     r1,#0xa
00097e  48e4              LDR      r0,|L158.3344|
000980  f7fffffe          BL       uart_putchar
000984  210a              MOVS     r1,#0xa
000986  48e2              LDR      r0,|L158.3344|
000988  f7fffffe          BL       uart_putchar
00098c  210a              MOVS     r1,#0xa
00098e  48e0              LDR      r0,|L158.3344|
000990  f7fffffe          BL       uart_putchar
000994  210a              MOVS     r1,#0xa
000996  48de              LDR      r0,|L158.3344|
000998  f7fffffe          BL       uart_putchar
00099c  210a              MOVS     r1,#0xa
00099e  48dc              LDR      r0,|L158.3344|
0009a0  f7fffffe          BL       uart_putchar
0009a4  210a              MOVS     r1,#0xa
0009a6  48da              LDR      r0,|L158.3344|
0009a8  f7fffffe          BL       uart_putchar
0009ac  210a              MOVS     r1,#0xa
0009ae  48d8              LDR      r0,|L158.3344|
0009b0  f7fffffe          BL       uart_putchar
0009b4  210a              MOVS     r1,#0xa
0009b6  48d6              LDR      r0,|L158.3344|
0009b8  f7fffffe          BL       uart_putchar
0009bc  210a              MOVS     r1,#0xa
0009be  48d4              LDR      r0,|L158.3344|
0009c0  f7fffffe          BL       uart_putchar
0009c4  210a              MOVS     r1,#0xa
0009c6  48d2              LDR      r0,|L158.3344|
0009c8  f7fffffe          BL       uart_putchar
0009cc  210a              MOVS     r1,#0xa
0009ce  48d0              LDR      r0,|L158.3344|
0009d0  f7fffffe          BL       uart_putchar
0009d4  210a              MOVS     r1,#0xa
0009d6  48ce              LDR      r0,|L158.3344|
0009d8  f7fffffe          BL       uart_putchar
0009dc  210a              MOVS     r1,#0xa
0009de  48cc              LDR      r0,|L158.3344|
0009e0  f7fffffe          BL       uart_putchar
0009e4  210a              MOVS     r1,#0xa
0009e6  48ca              LDR      r0,|L158.3344|
0009e8  f7fffffe          BL       uart_putchar
0009ec  210a              MOVS     r1,#0xa
0009ee  48c8              LDR      r0,|L158.3344|
0009f0  f7fffffe          BL       uart_putchar
0009f4  210a              MOVS     r1,#0xa
0009f6  48c6              LDR      r0,|L158.3344|
0009f8  f7fffffe          BL       uart_putchar
0009fc  210a              MOVS     r1,#0xa
0009fe  48c4              LDR      r0,|L158.3344|
000a00  f7fffffe          BL       uart_putchar
000a04  210a              MOVS     r1,#0xa
000a06  48c2              LDR      r0,|L158.3344|
000a08  f7fffffe          BL       uart_putchar
000a0c  210a              MOVS     r1,#0xa
000a0e  48c0              LDR      r0,|L158.3344|
000a10  f7fffffe          BL       uart_putchar
000a14  210a              MOVS     r1,#0xa
000a16  48be              LDR      r0,|L158.3344|
000a18  f7fffffe          BL       uart_putchar
000a1c  210a              MOVS     r1,#0xa
000a1e  48bc              LDR      r0,|L158.3344|
000a20  f7fffffe          BL       uart_putchar
000a24  210a              MOVS     r1,#0xa
000a26  48ba              LDR      r0,|L158.3344|
000a28  f7fffffe          BL       uart_putchar
000a2c  210a              MOVS     r1,#0xa
000a2e  48b8              LDR      r0,|L158.3344|
000a30  f7fffffe          BL       uart_putchar
000a34  210a              MOVS     r1,#0xa
000a36  48b6              LDR      r0,|L158.3344|
000a38  f7fffffe          BL       uart_putchar
000a3c  210a              MOVS     r1,#0xa
000a3e  48b4              LDR      r0,|L158.3344|
000a40  f7fffffe          BL       uart_putchar
000a44  210a              MOVS     r1,#0xa
000a46  48b2              LDR      r0,|L158.3344|
000a48  f7fffffe          BL       uart_putchar
000a4c  210a              MOVS     r1,#0xa
000a4e  48b0              LDR      r0,|L158.3344|
000a50  f7fffffe          BL       uart_putchar
;;;1984   									//memset(data,0,1000);
;;;1985   														//timer counts to wait for characters in uart 1 									
;;;1986   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000a54  bf00              NOP      
                  |L158.2646|
000a56  49af              LDR      r1,|L158.3348|
000a58  48af              LDR      r0,|L158.3352|
000a5a  f7fffffe          BL       strstr
000a5e  2800              CMP      r0,#0
000a60  d109              BNE      |L158.2678|
000a62  49ae              LDR      r1,|L158.3356|
000a64  48ac              LDR      r0,|L158.3352|
000a66  f7fffffe          BL       strstr
000a6a  2800              CMP      r0,#0
000a6c  d103              BNE      |L158.2678|
000a6e  48ac              LDR      r0,|L158.3360|
000a70  6800              LDR      r0,[r0,#0]  ; tout
000a72  2805              CMP      r0,#5
000a74  ddef              BLE      |L158.2646|
                  |L158.2678|
;;;1987   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1988   									}
;;;1989   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000a76  f7fffffe          BL       clear
;;;1990   									//clear();
;;;1991   									memset(data,0,strlen(data));
000a7a  48aa              LDR      r0,|L158.3364|
000a7c  f7fffffe          BL       strlen
000a80  4604              MOV      r4,r0
000a82  4621              MOV      r1,r4
000a84  48a7              LDR      r0,|L158.3364|
000a86  f7fffffe          BL       __aeabi_memclr
;;;1992   									clear();
000a8a  f7fffffe          BL       clear
;;;1993   									RESET_OFF;delay(100);
000a8e  2020              MOVS     r0,#0x20
000a90  49a5              LDR      r1,|L158.3368|
000a92  6088              STR      r0,[r1,#8]
000a94  2064              MOVS     r0,#0x64
000a96  f7fffffe          BL       delay
;;;1994   									RESET_ON;delay(100);		
000a9a  2020              MOVS     r0,#0x20
000a9c  49a2              LDR      r1,|L158.3368|
000a9e  6048              STR      r0,[r1,#4]
000aa0  2064              MOVS     r0,#0x64
000aa2  f7fffffe          BL       delay
                  |L158.2726|
;;;1995   }
;;;1996   	
;;;1997   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000aa6  2004              MOVS     r0,#4
000aa8  4ba0              LDR      r3,|L158.3372|
000aaa  4aa1              LDR      r2,|L158.3376|
000aac  49a1              LDR      r1,|L158.3380|
000aae  9000              STR      r0,[sp,#0]
000ab0  48a1              LDR      r0,|L158.3384|
000ab2  f7fffffe          BL       send_GSM
;;;1998   GPS_COLLECT2();
000ab6  f7fffffe          BL       GPS_COLLECT2
;;;1999   strcat(data,"CH\n");	
000aba  49a0              LDR      r1,|L158.3388|
000abc  4899              LDR      r0,|L158.3364|
000abe  f7fffffe          BL       strcat
;;;2000   memset(at_,0,100);
000ac2  2164              MOVS     r1,#0x64
000ac4  489e              LDR      r0,|L158.3392|
000ac6  f7fffffe          BL       __aeabi_memclr
;;;2001   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000aca  4a9e              LDR      r2,|L158.3396|
000acc  499e              LDR      r1,|L158.3400|
000ace  489c              LDR      r0,|L158.3392|
000ad0  f7fffffe          BL       __2sprintf
;;;2002   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000ad4  489d              LDR      r0,|L158.3404|
000ad6  6800              LDR      r0,[r0,#0]  ; tmeout
000ad8  4b94              LDR      r3,|L158.3372|
000ada  4a95              LDR      r2,|L158.3376|
000adc  4995              LDR      r1,|L158.3380|
000ade  9000              STR      r0,[sp,#0]
000ae0  4897              LDR      r0,|L158.3392|
000ae2  f7fffffe          BL       send_GSM
;;;2003   msg_sim800(); 
000ae6  f7fffffe          BL       msg_sim800
;;;2004   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000aea  2004              MOVS     r0,#4
000aec  4b98              LDR      r3,|L158.3408|
000aee  4a90              LDR      r2,|L158.3376|
000af0  4990              LDR      r1,|L158.3380|
000af2  9000              STR      r0,[sp,#0]
000af4  4897              LDR      r0,|L158.3412|
000af6  f7fffffe          BL       send_GSM
;;;2005   GPS_COLLECT2();
000afa  f7fffffe          BL       GPS_COLLECT2
;;;2006   strcat(data,"CH\n");	
000afe  498f              LDR      r1,|L158.3388|
000b00  4888              LDR      r0,|L158.3364|
000b02  f7fffffe          BL       strcat
;;;2007   GPS_COLLECT2();
000b06  f7fffffe          BL       GPS_COLLECT2
;;;2008   strcat(data,"CH\n");	
000b0a  498c              LDR      r1,|L158.3388|
000b0c  4885              LDR      r0,|L158.3364|
000b0e  f7fffffe          BL       strcat
;;;2009   
;;;2010   
;;;2011   msg_sim800(); 
000b12  f7fffffe          BL       msg_sim800
;;;2012   GPS_COLLECT2();
000b16  f7fffffe          BL       GPS_COLLECT2
;;;2013   strcat(data,"CH\n");	
000b1a  4988              LDR      r1,|L158.3388|
000b1c  4881              LDR      r0,|L158.3364|
000b1e  f7fffffe          BL       strcat
;;;2014   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000b22  f7fffffe          BL       clear
000b26  488c              LDR      r0,|L158.3416|
000b28  f7fffffe          BL       send_modem
000b2c  f7fffffe          BL       clear
;;;2015   					delay(20);
000b30  2014              MOVS     r0,#0x14
000b32  f7fffffe          BL       delay
;;;2016   
;;;2017   
;;;2018   msg_sim800(); 
000b36  f7fffffe          BL       msg_sim800
;;;2019   
;;;2020   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000b3a  4b88              LDR      r3,|L158.3420|
000b3c  4a88              LDR      r2,|L158.3424|
000b3e  4989              LDR      r1,|L158.3428|
000b40  487f              LDR      r0,|L158.3392|
000b42  f7fffffe          BL       __2sprintf
;;;2021   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000b46  4881              LDR      r0,|L158.3404|
000b48  6800              LDR      r0,[r0,#0]  ; tmeout
000b4a  4b78              LDR      r3,|L158.3372|
000b4c  4a73              LDR      r2,|L158.3356|
000b4e  4986              LDR      r1,|L158.3432|
000b50  9000              STR      r0,[sp,#0]
000b52  487b              LDR      r0,|L158.3392|
000b54  f7fffffe          BL       send_GSM
;;;2022   						clear();
000b58  f7fffffe          BL       clear
;;;2023   						
;;;2024   						
;;;2025   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
000b5c  487b              LDR      r0,|L158.3404|
000b5e  6800              LDR      r0,[r0,#0]  ; tmeout
000b60  4b82              LDR      r3,|L158.3436|
000b62  4a6e              LDR      r2,|L158.3356|
000b64  4982              LDR      r1,|L158.3440|
000b66  9000              STR      r0,[sp,#0]
000b68  4882              LDR      r0,|L158.3444|
000b6a  f7fffffe          BL       send_GSM
;;;2026   									
;;;2027   //*********************************tcp_initialization ends*************************************//									
;;;2028   			if(mystrstr(uart_string_gsm,'>')){
000b6e  213e              MOVS     r1,#0x3e
000b70  4869              LDR      r0,|L158.3352|
000b72  f7fffffe          BL       mystrstr
000b76  2800              CMP      r0,#0
000b78  d07e              BEQ      |L158.3192|
;;;2029   									clear();
000b7a  f7fffffe          BL       clear
;;;2030   									memset(uart_string_gsm,0,5000);
000b7e  497e              LDR      r1,|L158.3448|
000b80  4865              LDR      r0,|L158.3352|
000b82  f7fffffe          BL       __aeabi_memclr
;;;2031   									qwe=strlen(data);
000b86  4867              LDR      r0,|L158.3364|
000b88  f7fffffe          BL       strlen
000b8c  497b              LDR      r1,|L158.3452|
000b8e  6008              STR      r0,[r1,#0]  ; qwe
;;;2032   									tout=0;
000b90  2000              MOVS     r0,#0
000b92  4963              LDR      r1,|L158.3360|
000b94  6008              STR      r0,[r1,#0]  ; tout
;;;2033   									k2=0;
000b96  497a              LDR      r1,|L158.3456|
000b98  6008              STR      r0,[r1,#0]  ; k2
;;;2034   									for(k=0;k<(qwe);k++)
000b9a  497a              LDR      r1,|L158.3460|
000b9c  6008              STR      r0,[r1,#0]  ; k
000b9e  e00b              B        |L158.3000|
                  |L158.2976|
;;;2035   									{
;;;2036   										uart_putchar(UART1_BASE_PTR, data[k]);
000ba0  4860              LDR      r0,|L158.3364|
000ba2  4a78              LDR      r2,|L158.3460|
000ba4  6812              LDR      r2,[r2,#0]  ; k
000ba6  5c81              LDRB     r1,[r0,r2]
000ba8  4859              LDR      r0,|L158.3344|
000baa  f7fffffe          BL       uart_putchar
000bae  4875              LDR      r0,|L158.3460|
000bb0  6800              LDR      r0,[r0,#0]            ;2034  ; k
000bb2  1c40              ADDS     r0,r0,#1              ;2034
000bb4  4973              LDR      r1,|L158.3460|
000bb6  6008              STR      r0,[r1,#0]            ;2034  ; k
                  |L158.3000|
000bb8  4872              LDR      r0,|L158.3460|
000bba  6800              LDR      r0,[r0,#0]            ;2034  ; k
000bbc  496f              LDR      r1,|L158.3452|
000bbe  6809              LDR      r1,[r1,#0]            ;2034  ; qwe
000bc0  4288              CMP      r0,r1                 ;2034
000bc2  dbed              BLT      |L158.2976|
;;;2037   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
000bc4  210a              MOVS     r1,#0xa
000bc6  4852              LDR      r0,|L158.3344|
000bc8  f7fffffe          BL       uart_putchar
000bcc  211a              MOVS     r1,#0x1a
000bce  e000              B        |L158.3026|
                  |L158.3024|
000bd0  e3fe              B        |L158.5072|
                  |L158.3026|
000bd2  484f              LDR      r0,|L158.3344|
000bd4  f7fffffe          BL       uart_putchar
000bd8  211a              MOVS     r1,#0x1a
000bda  484d              LDR      r0,|L158.3344|
000bdc  f7fffffe          BL       uart_putchar
000be0  211a              MOVS     r1,#0x1a
000be2  484b              LDR      r0,|L158.3344|
000be4  f7fffffe          BL       uart_putchar
000be8  211a              MOVS     r1,#0x1a
000bea  4849              LDR      r0,|L158.3344|
000bec  f7fffffe          BL       uart_putchar
000bf0  211a              MOVS     r1,#0x1a
000bf2  4847              LDR      r0,|L158.3344|
000bf4  f7fffffe          BL       uart_putchar
000bf8  211a              MOVS     r1,#0x1a
000bfa  4845              LDR      r0,|L158.3344|
000bfc  f7fffffe          BL       uart_putchar
;;;2038   															do
000c00  bf00              NOP      
                  |L158.3074|
;;;2039   																{q1=strstr(uart_string_gsm,"SEND OK");
000c02  4961              LDR      r1,|L158.3464|
000c04  4844              LDR      r0,|L158.3352|
000c06  f7fffffe          BL       strstr
000c0a  4960              LDR      r1,|L158.3468|
000c0c  6008              STR      r0,[r1,#0]  ; q1
;;;2040   																	q2=strstr(uart_string_gsm, "ERROR");
000c0e  4943              LDR      r1,|L158.3356|
000c10  4841              LDR      r0,|L158.3352|
000c12  f7fffffe          BL       strstr
000c16  495e              LDR      r1,|L158.3472|
000c18  6008              STR      r0,[r1,#0]  ; q2
;;;2041   																		q3=strstr(uart_string_gsm, "FAIL");	
000c1a  495e              LDR      r1,|L158.3476|
000c1c  483e              LDR      r0,|L158.3352|
000c1e  f7fffffe          BL       strstr
000c22  495d              LDR      r1,|L158.3480|
000c24  6008              STR      r0,[r1,#0]  ; q3
;;;2042   																			q4=strstr(uart_string_gsm, "DEACT");	
000c26  494a              LDR      r1,|L158.3408|
000c28  483b              LDR      r0,|L158.3352|
000c2a  f7fffffe          BL       strstr
000c2e  495b              LDR      r1,|L158.3484|
000c30  6008              STR      r0,[r1,#0]  ; q4
;;;2043   																	
;;;2044   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
000c32  4856              LDR      r0,|L158.3468|
000c34  6800              LDR      r0,[r0,#0]  ; q1
000c36  2800              CMP      r0,#0
000c38  d10f              BNE      |L158.3162|
000c3a  4855              LDR      r0,|L158.3472|
000c3c  6800              LDR      r0,[r0,#0]  ; q2
000c3e  2800              CMP      r0,#0
000c40  d10b              BNE      |L158.3162|
000c42  4855              LDR      r0,|L158.3480|
000c44  6800              LDR      r0,[r0,#0]  ; q3
000c46  2800              CMP      r0,#0
000c48  d107              BNE      |L158.3162|
000c4a  4608              MOV      r0,r1
000c4c  6800              LDR      r0,[r0,#0]  ; q4
000c4e  2800              CMP      r0,#0
000c50  d103              BNE      |L158.3162|
000c52  4833              LDR      r0,|L158.3360|
000c54  6800              LDR      r0,[r0,#0]  ; tout
000c56  2808              CMP      r0,#8
000c58  ddd3              BLE      |L158.3074|
                  |L158.3162|
;;;2045   															
;;;2046   																			delay(10);clear();
000c5a  200a              MOVS     r0,#0xa
000c5c  f7fffffe          BL       delay
000c60  f7fffffe          BL       clear
;;;2047   														uart_putchar(UART1_BASE_PTR,0x1A);
000c64  211a              MOVS     r1,#0x1a
000c66  482a              LDR      r0,|L158.3344|
000c68  f7fffffe          BL       uart_putchar
;;;2048   												delay(10);
000c6c  200a              MOVS     r0,#0xa
000c6e  f7fffffe          BL       delay
;;;2049   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000c72  211a              MOVS     r1,#0x1a
000c74  4826              LDR      r0,|L158.3344|
000c76  e000              B        |L158.3194|
                  |L158.3192|
000c78  e19b              B        |L158.4018|
                  |L158.3194|
000c7a  f7fffffe          BL       uart_putchar
000c7e  211a              MOVS     r1,#0x1a
000c80  4823              LDR      r0,|L158.3344|
000c82  f7fffffe          BL       uart_putchar
000c86  211a              MOVS     r1,#0x1a
000c88  4821              LDR      r0,|L158.3344|
000c8a  f7fffffe          BL       uart_putchar
;;;2050   delay(20);
000c8e  2014              MOVS     r0,#0x14
000c90  f7fffffe          BL       delay
;;;2051   if(!strstr(uart_string_gsm,"SEND OK")){
000c94  493c              LDR      r1,|L158.3464|
000c96  4820              LDR      r0,|L158.3352|
000c98  f7fffffe          BL       strstr
000c9c  2800              CMP      r0,#0
000c9e  d001              BEQ      |L158.3236|
000ca0  f001f9c0          BL       |L158.8228|
                  |L158.3236|
;;;2052   
;;;2053   
;;;2054   	delay(100);
000ca4  2064              MOVS     r0,#0x64
000ca6  f7fffffe          BL       delay
;;;2055   		clear();//memset(uart_string_gsm,0,5000);
000caa  f7fffffe          BL       clear
;;;2056   	
;;;2057   	memset(at_,0,100);
000cae  2164              MOVS     r1,#0x64
000cb0  4823              LDR      r0,|L158.3392|
000cb2  f7fffffe          BL       __aeabi_memclr
;;;2058   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000cb6  481b              LDR      r0,|L158.3364|
000cb8  f7fffffe          BL       strlen
000cbc  1c44              ADDS     r4,r0,#1
000cbe  4623              MOV      r3,r4
000cc0  4a37              LDR      r2,|L158.3488|
000cc2  4938              LDR      r1,|L158.3492|
000cc4  481e              LDR      r0,|L158.3392|
000cc6  f7fffffe          BL       __2sprintf
;;;2059   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000cca  2005              MOVS     r0,#5
000ccc  4b13              LDR      r3,|L158.3356|
000cce  4a18              LDR      r2,|L158.3376|
000cd0  4927              LDR      r1,|L158.3440|
000cd2  9000              STR      r0,[sp,#0]
000cd4  481a              LDR      r0,|L158.3392|
000cd6  f7fffffe          BL       send_SD
;;;2060   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2061   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2062   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2063   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2064   //	}
;;;2065   	
;;;2066   clear();	
000cda  f7fffffe          BL       clear
;;;2067   									k2=0;									//string array counter for uart 1
000cde  2000              MOVS     r0,#0
000ce0  4927              LDR      r1,|L158.3456|
000ce2  6008              STR      r0,[r1,#0]  ; k2
;;;2068   									tout=0;	
000ce4  490e              LDR      r1,|L158.3360|
000ce6  6008              STR      r0,[r1,#0]  ; tout
;;;2069   		for(k=0;k<strlen(data);k++)
000ce8  4926              LDR      r1,|L158.3460|
000cea  6008              STR      r0,[r1,#0]  ; k
000cec  e00b              B        |L158.3334|
                  |L158.3310|
;;;2070   		{
;;;2071   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000cee  480d              LDR      r0,|L158.3364|
000cf0  4a24              LDR      r2,|L158.3460|
000cf2  6812              LDR      r2,[r2,#0]  ; k
000cf4  5c81              LDRB     r1,[r0,r2]
000cf6  4806              LDR      r0,|L158.3344|
000cf8  f7fffffe          BL       uart_putchar
000cfc  4821              LDR      r0,|L158.3460|
000cfe  6800              LDR      r0,[r0,#0]            ;2069  ; k
000d00  1c40              ADDS     r0,r0,#1              ;2069
000d02  4920              LDR      r1,|L158.3460|
000d04  6008              STR      r0,[r1,#0]            ;2069  ; k
                  |L158.3334|
000d06  4807              LDR      r0,|L158.3364|
000d08  f7fffffe          BL       strlen
000d0c  491d              LDR      r1,|L158.3460|
000d0e  e04b              B        |L158.3496|
                  |L158.3344|
                          DCD      0x4006b000
                  |L158.3348|
                          DCD      ||.conststring||+0x70
                  |L158.3352|
                          DCD      uart_string_gsm
                  |L158.3356|
                          DCD      ||.conststring||+0xe0
                  |L158.3360|
                          DCD      tout
                  |L158.3364|
                          DCD      data
                  |L158.3368|
                          DCD      0x400ff080
                  |L158.3372|
                          DCD      ||.conststring||+0x10
                  |L158.3376|
                          DCD      ||.conststring||+0x18
                  |L158.3380|
                          DCD      ||.conststring||+0x2c
                  |L158.3384|
                          DCD      ||.conststring||+0x728
                  |L158.3388|
                          DCD      ||.conststring||+0x4b8
                  |L158.3392|
                          DCD      at_
                  |L158.3396|
                          DCD      apn
                  |L158.3400|
                          DCD      ||.conststring||+0x738
                  |L158.3404|
                          DCD      tmeout
                  |L158.3408|
                          DCD      ||.conststring||+0x6a4
                  |L158.3412|
                          DCD      ||.conststring||+0x74c
                  |L158.3416|
                          DCD      ||.conststring||+0x75c
                  |L158.3420|
                          DCD      port
                  |L158.3424|
                          DCD      ||ip||
                  |L158.3428|
                          DCD      ||.conststring||+0x76c
                  |L158.3432|
                          DCD      ||.conststring||+0x6dc
                  |L158.3436|
                          DCD      ||.conststring||+0x78c
                  |L158.3440|
                          DCD      ||.conststring||+0x20
                  |L158.3444|
                          DCD      ||.conststring||+0x6e4
                  |L158.3448|
                          DCD      0x00001388
                  |L158.3452|
                          DCD      qwe
                  |L158.3456|
                          DCD      ||k2||
                  |L158.3460|
                          DCD      k
                  |L158.3464|
                          DCD      ||.conststring||+0x694
                  |L158.3468|
                          DCD      ||q1||
                  |L158.3472|
                          DCD      ||q2||
                  |L158.3476|
                          DCD      ||.conststring||+0x69c
                  |L158.3480|
                          DCD      ||q3||
                  |L158.3484|
                          DCD      ||q4||
                  |L158.3488|
                          DCD      drive
                  |L158.3492|
                          DCD      ||.conststring||+0x4bc
                  |L158.3496|
000da8  6809              LDR      r1,[r1,#0]            ;2069  ; k
000daa  4288              CMP      r0,r1                 ;2069
000dac  d89f              BHI      |L158.3310|
;;;2072   		}	
;;;2073   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000dae  210a              MOVS     r1,#0xa
000db0  48fe              LDR      r0,|L158.4524|
000db2  f7fffffe          BL       uart_putchar
000db6  210a              MOVS     r1,#0xa
000db8  48fc              LDR      r0,|L158.4524|
000dba  f7fffffe          BL       uart_putchar
000dbe  210a              MOVS     r1,#0xa
000dc0  48fa              LDR      r0,|L158.4524|
000dc2  f7fffffe          BL       uart_putchar
000dc6  210a              MOVS     r1,#0xa
000dc8  48f8              LDR      r0,|L158.4524|
000dca  f7fffffe          BL       uart_putchar
000dce  210a              MOVS     r1,#0xa
000dd0  48f6              LDR      r0,|L158.4524|
000dd2  f7fffffe          BL       uart_putchar
000dd6  210a              MOVS     r1,#0xa
000dd8  48f4              LDR      r0,|L158.4524|
000dda  f7fffffe          BL       uart_putchar
000dde  210a              MOVS     r1,#0xa
000de0  48f2              LDR      r0,|L158.4524|
000de2  f7fffffe          BL       uart_putchar
000de6  210a              MOVS     r1,#0xa
000de8  48f0              LDR      r0,|L158.4524|
000dea  f7fffffe          BL       uart_putchar
000dee  210a              MOVS     r1,#0xa
000df0  48ee              LDR      r0,|L158.4524|
000df2  f7fffffe          BL       uart_putchar
000df6  210a              MOVS     r1,#0xa
000df8  48ec              LDR      r0,|L158.4524|
000dfa  f7fffffe          BL       uart_putchar
000dfe  210a              MOVS     r1,#0xa
000e00  48ea              LDR      r0,|L158.4524|
000e02  f7fffffe          BL       uart_putchar
000e06  210a              MOVS     r1,#0xa
000e08  48e8              LDR      r0,|L158.4524|
000e0a  f7fffffe          BL       uart_putchar
000e0e  210a              MOVS     r1,#0xa
000e10  48e6              LDR      r0,|L158.4524|
000e12  f7fffffe          BL       uart_putchar
000e16  210a              MOVS     r1,#0xa
000e18  48e4              LDR      r0,|L158.4524|
000e1a  f7fffffe          BL       uart_putchar
000e1e  210a              MOVS     r1,#0xa
000e20  48e2              LDR      r0,|L158.4524|
000e22  f7fffffe          BL       uart_putchar
000e26  210a              MOVS     r1,#0xa
000e28  48e0              LDR      r0,|L158.4524|
000e2a  f7fffffe          BL       uart_putchar
000e2e  210a              MOVS     r1,#0xa
000e30  48de              LDR      r0,|L158.4524|
000e32  f7fffffe          BL       uart_putchar
000e36  210a              MOVS     r1,#0xa
000e38  48dc              LDR      r0,|L158.4524|
000e3a  f7fffffe          BL       uart_putchar
000e3e  210a              MOVS     r1,#0xa
000e40  48da              LDR      r0,|L158.4524|
000e42  f7fffffe          BL       uart_putchar
000e46  210a              MOVS     r1,#0xa
000e48  48d8              LDR      r0,|L158.4524|
000e4a  f7fffffe          BL       uart_putchar
000e4e  210a              MOVS     r1,#0xa
000e50  48d6              LDR      r0,|L158.4524|
000e52  f7fffffe          BL       uart_putchar
000e56  210a              MOVS     r1,#0xa
000e58  48d4              LDR      r0,|L158.4524|
000e5a  f7fffffe          BL       uart_putchar
000e5e  210a              MOVS     r1,#0xa
000e60  48d2              LDR      r0,|L158.4524|
000e62  f7fffffe          BL       uart_putchar
000e66  210a              MOVS     r1,#0xa
000e68  48d0              LDR      r0,|L158.4524|
000e6a  f7fffffe          BL       uart_putchar
000e6e  210a              MOVS     r1,#0xa
000e70  48ce              LDR      r0,|L158.4524|
000e72  f7fffffe          BL       uart_putchar
000e76  210a              MOVS     r1,#0xa
000e78  48cc              LDR      r0,|L158.4524|
000e7a  f7fffffe          BL       uart_putchar
000e7e  210a              MOVS     r1,#0xa
000e80  48ca              LDR      r0,|L158.4524|
000e82  f7fffffe          BL       uart_putchar
000e86  210a              MOVS     r1,#0xa
000e88  48c8              LDR      r0,|L158.4524|
000e8a  f7fffffe          BL       uart_putchar
000e8e  210a              MOVS     r1,#0xa
000e90  48c6              LDR      r0,|L158.4524|
000e92  f7fffffe          BL       uart_putchar
000e96  210a              MOVS     r1,#0xa
000e98  48c4              LDR      r0,|L158.4524|
000e9a  f7fffffe          BL       uart_putchar
000e9e  210a              MOVS     r1,#0xa
000ea0  48c2              LDR      r0,|L158.4524|
000ea2  f7fffffe          BL       uart_putchar
000ea6  210a              MOVS     r1,#0xa
000ea8  48c0              LDR      r0,|L158.4524|
000eaa  f7fffffe          BL       uart_putchar
000eae  210a              MOVS     r1,#0xa
000eb0  48be              LDR      r0,|L158.4524|
000eb2  f7fffffe          BL       uart_putchar
000eb6  210a              MOVS     r1,#0xa
000eb8  48bc              LDR      r0,|L158.4524|
000eba  f7fffffe          BL       uart_putchar
000ebe  210a              MOVS     r1,#0xa
000ec0  48ba              LDR      r0,|L158.4524|
000ec2  f7fffffe          BL       uart_putchar
000ec6  210a              MOVS     r1,#0xa
000ec8  48b8              LDR      r0,|L158.4524|
000eca  f7fffffe          BL       uart_putchar
000ece  210a              MOVS     r1,#0xa
000ed0  48b6              LDR      r0,|L158.4524|
000ed2  f7fffffe          BL       uart_putchar
000ed6  210a              MOVS     r1,#0xa
000ed8  48b4              LDR      r0,|L158.4524|
000eda  f7fffffe          BL       uart_putchar
000ede  210a              MOVS     r1,#0xa
000ee0  48b2              LDR      r0,|L158.4524|
000ee2  f7fffffe          BL       uart_putchar
000ee6  210a              MOVS     r1,#0xa
000ee8  48b0              LDR      r0,|L158.4524|
000eea  f7fffffe          BL       uart_putchar
000eee  210a              MOVS     r1,#0xa
000ef0  48ae              LDR      r0,|L158.4524|
000ef2  f7fffffe          BL       uart_putchar
000ef6  210a              MOVS     r1,#0xa
000ef8  48ac              LDR      r0,|L158.4524|
000efa  f7fffffe          BL       uart_putchar
000efe  210a              MOVS     r1,#0xa
000f00  48aa              LDR      r0,|L158.4524|
000f02  f7fffffe          BL       uart_putchar
000f06  210a              MOVS     r1,#0xa
000f08  48a8              LDR      r0,|L158.4524|
000f0a  f7fffffe          BL       uart_putchar
000f0e  210a              MOVS     r1,#0xa
000f10  48a6              LDR      r0,|L158.4524|
000f12  f7fffffe          BL       uart_putchar
000f16  210a              MOVS     r1,#0xa
000f18  48a4              LDR      r0,|L158.4524|
000f1a  f7fffffe          BL       uart_putchar
000f1e  210a              MOVS     r1,#0xa
000f20  48a2              LDR      r0,|L158.4524|
000f22  f7fffffe          BL       uart_putchar
000f26  210a              MOVS     r1,#0xa
000f28  48a0              LDR      r0,|L158.4524|
000f2a  f7fffffe          BL       uart_putchar
000f2e  210a              MOVS     r1,#0xa
000f30  489e              LDR      r0,|L158.4524|
000f32  f7fffffe          BL       uart_putchar
000f36  210a              MOVS     r1,#0xa
000f38  489c              LDR      r0,|L158.4524|
000f3a  f7fffffe          BL       uart_putchar
000f3e  210a              MOVS     r1,#0xa
000f40  489a              LDR      r0,|L158.4524|
000f42  f7fffffe          BL       uart_putchar
000f46  210a              MOVS     r1,#0xa
000f48  4898              LDR      r0,|L158.4524|
000f4a  f7fffffe          BL       uart_putchar
000f4e  210a              MOVS     r1,#0xa
000f50  4896              LDR      r0,|L158.4524|
000f52  f7fffffe          BL       uart_putchar
000f56  210a              MOVS     r1,#0xa
000f58  4894              LDR      r0,|L158.4524|
000f5a  f7fffffe          BL       uart_putchar
000f5e  210a              MOVS     r1,#0xa
000f60  4892              LDR      r0,|L158.4524|
000f62  f7fffffe          BL       uart_putchar
000f66  210a              MOVS     r1,#0xa
000f68  4890              LDR      r0,|L158.4524|
000f6a  f7fffffe          BL       uart_putchar
000f6e  210a              MOVS     r1,#0xa
000f70  488e              LDR      r0,|L158.4524|
000f72  f7fffffe          BL       uart_putchar
;;;2074   									//memset(data,0,1000);
;;;2075   														//timer counts to wait for characters in uart 1 									
;;;2076   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000f76  bf00              NOP      
                  |L158.3960|
000f78  498d              LDR      r1,|L158.4528|
000f7a  488e              LDR      r0,|L158.4532|
000f7c  f7fffffe          BL       strstr
000f80  2800              CMP      r0,#0
000f82  d109              BNE      |L158.3992|
000f84  498c              LDR      r1,|L158.4536|
000f86  488b              LDR      r0,|L158.4532|
000f88  f7fffffe          BL       strstr
000f8c  2800              CMP      r0,#0
000f8e  d103              BNE      |L158.3992|
000f90  488a              LDR      r0,|L158.4540|
000f92  6800              LDR      r0,[r0,#0]  ; tout
000f94  2805              CMP      r0,#5
000f96  ddef              BLE      |L158.3960|
                  |L158.3992|
;;;2077   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2078   									}
;;;2079   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000f98  f7fffffe          BL       clear
;;;2080   									//clear();
;;;2081   									memset(data,0,strlen(data));
000f9c  4888              LDR      r0,|L158.4544|
000f9e  f7fffffe          BL       strlen
000fa2  4604              MOV      r4,r0
000fa4  4621              MOV      r1,r4
000fa6  4886              LDR      r0,|L158.4544|
000fa8  f7fffffe          BL       __aeabi_memclr
;;;2082   									clear();
000fac  f7fffffe          BL       clear
                  |L158.4016|
;;;2083   
;;;2084   								
;;;2085   
;;;2086   break;
000fb0  e3fe              B        |L158.6064|
                  |L158.4018|
;;;2087   //log_it();
;;;2088   }
;;;2089   			
;;;2090   			
;;;2091   			
;;;2092   			
;;;2093   			
;;;2094   			}
;;;2095   			else
;;;2096   			{
;;;2097   			
;;;2098   			
;;;2099   		delay(100);
000fb2  2064              MOVS     r0,#0x64
000fb4  f7fffffe          BL       delay
;;;2100   		clear();//memset(uart_string_gsm,0,5000);
000fb8  f7fffffe          BL       clear
;;;2101   	
;;;2102   	memset(at_,0,100);
000fbc  2164              MOVS     r1,#0x64
000fbe  4881              LDR      r0,|L158.4548|
000fc0  f7fffffe          BL       __aeabi_memclr
;;;2103   	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000fc4  487e              LDR      r0,|L158.4544|
000fc6  f7fffffe          BL       strlen
000fca  1c44              ADDS     r4,r0,#1
000fcc  4623              MOV      r3,r4
000fce  4a7e              LDR      r2,|L158.4552|
000fd0  497e              LDR      r1,|L158.4556|
000fd2  487c              LDR      r0,|L158.4548|
000fd4  f7fffffe          BL       __2sprintf
;;;2104   	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000fd8  2005              MOVS     r0,#5
000fda  4b77              LDR      r3,|L158.4536|
000fdc  4a7c              LDR      r2,|L158.4560|
000fde  497d              LDR      r1,|L158.4564|
000fe0  9000              STR      r0,[sp,#0]
000fe2  4878              LDR      r0,|L158.4548|
000fe4  f7fffffe          BL       send_SD
;;;2105   	
;;;2106   	clear();	
000fe8  f7fffffe          BL       clear
;;;2107   									k2=0;									//string array counter for uart 1
000fec  2000              MOVS     r0,#0
000fee  497a              LDR      r1,|L158.4568|
000ff0  6008              STR      r0,[r1,#0]  ; k2
;;;2108   									tout=0;	
000ff2  4972              LDR      r1,|L158.4540|
000ff4  6008              STR      r0,[r1,#0]  ; tout
;;;2109   		for(k=0;k<strlen(data);k++)
000ff6  4979              LDR      r1,|L158.4572|
000ff8  6008              STR      r0,[r1,#0]  ; k
000ffa  e00b              B        |L158.4116|
                  |L158.4092|
;;;2110   		{
;;;2111   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000ffc  4870              LDR      r0,|L158.4544|
000ffe  4a77              LDR      r2,|L158.4572|
001000  6812              LDR      r2,[r2,#0]  ; k
001002  5c81              LDRB     r1,[r0,r2]
001004  4869              LDR      r0,|L158.4524|
001006  f7fffffe          BL       uart_putchar
00100a  4874              LDR      r0,|L158.4572|
00100c  6800              LDR      r0,[r0,#0]            ;2109  ; k
00100e  1c40              ADDS     r0,r0,#1              ;2109
001010  4972              LDR      r1,|L158.4572|
001012  6008              STR      r0,[r1,#0]            ;2109  ; k
                  |L158.4116|
001014  486a              LDR      r0,|L158.4544|
001016  f7fffffe          BL       strlen
00101a  4970              LDR      r1,|L158.4572|
00101c  6809              LDR      r1,[r1,#0]            ;2109  ; k
00101e  4288              CMP      r0,r1                 ;2109
001020  d8ec              BHI      |L158.4092|
;;;2112   		}	
;;;2113   		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001022  210a              MOVS     r1,#0xa
001024  4861              LDR      r0,|L158.4524|
001026  f7fffffe          BL       uart_putchar
00102a  210a              MOVS     r1,#0xa
00102c  485f              LDR      r0,|L158.4524|
00102e  f7fffffe          BL       uart_putchar
001032  210a              MOVS     r1,#0xa
001034  485d              LDR      r0,|L158.4524|
001036  f7fffffe          BL       uart_putchar
00103a  210a              MOVS     r1,#0xa
00103c  485b              LDR      r0,|L158.4524|
00103e  f7fffffe          BL       uart_putchar
001042  210a              MOVS     r1,#0xa
001044  4859              LDR      r0,|L158.4524|
001046  f7fffffe          BL       uart_putchar
00104a  210a              MOVS     r1,#0xa
00104c  4857              LDR      r0,|L158.4524|
00104e  f7fffffe          BL       uart_putchar
001052  210a              MOVS     r1,#0xa
001054  4855              LDR      r0,|L158.4524|
001056  f7fffffe          BL       uart_putchar
00105a  210a              MOVS     r1,#0xa
00105c  4853              LDR      r0,|L158.4524|
00105e  f7fffffe          BL       uart_putchar
001062  210a              MOVS     r1,#0xa
001064  4851              LDR      r0,|L158.4524|
001066  f7fffffe          BL       uart_putchar
00106a  210a              MOVS     r1,#0xa
00106c  484f              LDR      r0,|L158.4524|
00106e  f7fffffe          BL       uart_putchar
001072  210a              MOVS     r1,#0xa
001074  484d              LDR      r0,|L158.4524|
001076  e000              B        |L158.4218|
                  |L158.4216|
001078  e3fe              B        |L158.6264|
                  |L158.4218|
00107a  f7fffffe          BL       uart_putchar
00107e  210a              MOVS     r1,#0xa
001080  484a              LDR      r0,|L158.4524|
001082  f7fffffe          BL       uart_putchar
001086  210a              MOVS     r1,#0xa
001088  4848              LDR      r0,|L158.4524|
00108a  f7fffffe          BL       uart_putchar
00108e  210a              MOVS     r1,#0xa
001090  4846              LDR      r0,|L158.4524|
001092  f7fffffe          BL       uart_putchar
001096  210a              MOVS     r1,#0xa
001098  4844              LDR      r0,|L158.4524|
00109a  f7fffffe          BL       uart_putchar
00109e  210a              MOVS     r1,#0xa
0010a0  4842              LDR      r0,|L158.4524|
0010a2  f7fffffe          BL       uart_putchar
0010a6  210a              MOVS     r1,#0xa
0010a8  4840              LDR      r0,|L158.4524|
0010aa  f7fffffe          BL       uart_putchar
0010ae  210a              MOVS     r1,#0xa
0010b0  483e              LDR      r0,|L158.4524|
0010b2  f7fffffe          BL       uart_putchar
0010b6  210a              MOVS     r1,#0xa
0010b8  483c              LDR      r0,|L158.4524|
0010ba  f7fffffe          BL       uart_putchar
0010be  210a              MOVS     r1,#0xa
0010c0  483a              LDR      r0,|L158.4524|
0010c2  f7fffffe          BL       uart_putchar
0010c6  210a              MOVS     r1,#0xa
0010c8  4838              LDR      r0,|L158.4524|
0010ca  f7fffffe          BL       uart_putchar
0010ce  210a              MOVS     r1,#0xa
0010d0  4836              LDR      r0,|L158.4524|
0010d2  f7fffffe          BL       uart_putchar
0010d6  210a              MOVS     r1,#0xa
0010d8  4834              LDR      r0,|L158.4524|
0010da  f7fffffe          BL       uart_putchar
0010de  210a              MOVS     r1,#0xa
0010e0  4832              LDR      r0,|L158.4524|
0010e2  f7fffffe          BL       uart_putchar
0010e6  210a              MOVS     r1,#0xa
0010e8  4830              LDR      r0,|L158.4524|
0010ea  f7fffffe          BL       uart_putchar
0010ee  210a              MOVS     r1,#0xa
0010f0  482e              LDR      r0,|L158.4524|
0010f2  f7fffffe          BL       uart_putchar
0010f6  210a              MOVS     r1,#0xa
0010f8  482c              LDR      r0,|L158.4524|
0010fa  f7fffffe          BL       uart_putchar
0010fe  210a              MOVS     r1,#0xa
001100  482a              LDR      r0,|L158.4524|
001102  f7fffffe          BL       uart_putchar
001106  210a              MOVS     r1,#0xa
001108  4828              LDR      r0,|L158.4524|
00110a  f7fffffe          BL       uart_putchar
00110e  210a              MOVS     r1,#0xa
001110  4826              LDR      r0,|L158.4524|
001112  f7fffffe          BL       uart_putchar
001116  210a              MOVS     r1,#0xa
001118  4824              LDR      r0,|L158.4524|
00111a  f7fffffe          BL       uart_putchar
00111e  210a              MOVS     r1,#0xa
001120  4822              LDR      r0,|L158.4524|
001122  f7fffffe          BL       uart_putchar
001126  210a              MOVS     r1,#0xa
001128  4820              LDR      r0,|L158.4524|
00112a  f7fffffe          BL       uart_putchar
00112e  210a              MOVS     r1,#0xa
001130  481e              LDR      r0,|L158.4524|
001132  f7fffffe          BL       uart_putchar
001136  210a              MOVS     r1,#0xa
001138  481c              LDR      r0,|L158.4524|
00113a  f7fffffe          BL       uart_putchar
00113e  210a              MOVS     r1,#0xa
001140  481a              LDR      r0,|L158.4524|
001142  f7fffffe          BL       uart_putchar
001146  210a              MOVS     r1,#0xa
001148  4818              LDR      r0,|L158.4524|
00114a  f7fffffe          BL       uart_putchar
00114e  210a              MOVS     r1,#0xa
001150  4816              LDR      r0,|L158.4524|
001152  f7fffffe          BL       uart_putchar
001156  210a              MOVS     r1,#0xa
001158  4814              LDR      r0,|L158.4524|
00115a  f7fffffe          BL       uart_putchar
00115e  210a              MOVS     r1,#0xa
001160  4812              LDR      r0,|L158.4524|
001162  f7fffffe          BL       uart_putchar
001166  210a              MOVS     r1,#0xa
001168  4810              LDR      r0,|L158.4524|
00116a  f7fffffe          BL       uart_putchar
00116e  210a              MOVS     r1,#0xa
001170  480e              LDR      r0,|L158.4524|
001172  f7fffffe          BL       uart_putchar
001176  210a              MOVS     r1,#0xa
001178  480c              LDR      r0,|L158.4524|
00117a  f7fffffe          BL       uart_putchar
00117e  210a              MOVS     r1,#0xa
001180  480a              LDR      r0,|L158.4524|
001182  f7fffffe          BL       uart_putchar
001186  210a              MOVS     r1,#0xa
001188  4808              LDR      r0,|L158.4524|
00118a  f7fffffe          BL       uart_putchar
00118e  210a              MOVS     r1,#0xa
001190  4806              LDR      r0,|L158.4524|
001192  f7fffffe          BL       uart_putchar
001196  210a              MOVS     r1,#0xa
001198  4804              LDR      r0,|L158.4524|
00119a  f7fffffe          BL       uart_putchar
00119e  210a              MOVS     r1,#0xa
0011a0  4802              LDR      r0,|L158.4524|
0011a2  f7fffffe          BL       uart_putchar
0011a6  210a              MOVS     r1,#0xa
0011a8  4800              LDR      r0,|L158.4524|
0011aa  e019              B        |L158.4576|
                  |L158.4524|
                          DCD      0x4006b000
                  |L158.4528|
                          DCD      ||.conststring||+0x70
                  |L158.4532|
                          DCD      uart_string_gsm
                  |L158.4536|
                          DCD      ||.conststring||+0xe0
                  |L158.4540|
                          DCD      tout
                  |L158.4544|
                          DCD      data
                  |L158.4548|
                          DCD      at_
                  |L158.4552|
                          DCD      drive
                  |L158.4556|
                          DCD      ||.conststring||+0x4bc
                  |L158.4560|
                          DCD      ||.conststring||+0x18
                  |L158.4564|
                          DCD      ||.conststring||+0x20
                  |L158.4568|
                          DCD      ||k2||
                  |L158.4572|
                          DCD      k
                  |L158.4576|
0011e0  f7fffffe          BL       uart_putchar
0011e4  210a              MOVS     r1,#0xa
0011e6  48fb              LDR      r0,|L158.5588|
0011e8  f7fffffe          BL       uart_putchar
0011ec  210a              MOVS     r1,#0xa
0011ee  48f9              LDR      r0,|L158.5588|
0011f0  f7fffffe          BL       uart_putchar
0011f4  210a              MOVS     r1,#0xa
0011f6  48f7              LDR      r0,|L158.5588|
0011f8  f7fffffe          BL       uart_putchar
0011fc  210a              MOVS     r1,#0xa
0011fe  48f5              LDR      r0,|L158.5588|
001200  f7fffffe          BL       uart_putchar
001204  210a              MOVS     r1,#0xa
001206  48f3              LDR      r0,|L158.5588|
001208  f7fffffe          BL       uart_putchar
00120c  210a              MOVS     r1,#0xa
00120e  48f1              LDR      r0,|L158.5588|
001210  f7fffffe          BL       uart_putchar
001214  210a              MOVS     r1,#0xa
001216  48ef              LDR      r0,|L158.5588|
001218  f7fffffe          BL       uart_putchar
00121c  210a              MOVS     r1,#0xa
00121e  48ed              LDR      r0,|L158.5588|
001220  f7fffffe          BL       uart_putchar
;;;2114   									//memset(data,0,1000);
;;;2115   														//timer counts to wait for characters in uart 1 									
;;;2116   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001224  bf00              NOP      
                  |L158.4646|
001226  49ec              LDR      r1,|L158.5592|
001228  48ec              LDR      r0,|L158.5596|
00122a  f7fffffe          BL       strstr
00122e  2800              CMP      r0,#0
001230  d109              BNE      |L158.4678|
001232  49eb              LDR      r1,|L158.5600|
001234  48e9              LDR      r0,|L158.5596|
001236  f7fffffe          BL       strstr
00123a  2800              CMP      r0,#0
00123c  d103              BNE      |L158.4678|
00123e  48e9              LDR      r0,|L158.5604|
001240  6800              LDR      r0,[r0,#0]  ; tout
001242  2805              CMP      r0,#5
001244  ddef              BLE      |L158.4646|
                  |L158.4678|
;;;2117   									{}
;;;2118   	                clear();
001246  f7fffffe          BL       clear
;;;2119   									memset(data,0,strlen(data));
00124a  48e7              LDR      r0,|L158.5608|
00124c  f7fffffe          BL       strlen
001250  4604              MOV      r4,r0
001252  4621              MOV      r1,r4
001254  48e4              LDR      r0,|L158.5608|
001256  f7fffffe          BL       __aeabi_memclr
;;;2120   									clear();
00125a  f7fffffe          BL       clear
;;;2121   
;;;2122   								
;;;2123   			break;
00125e  e6a7              B        |L158.4016|
                  |L158.4704|
;;;2124   			///returning; 
;;;2125   			//log_it();
;;;2126   			}
;;;2127   
;;;2128   
;;;2129   }
;;;2130   
;;;2131   //if(notsentflag==0){cursorvaluene=cursor_val(sd_data);cursorvaluepr+=cursorvaluene;}
;;;2132   
;;;2133   
;;;2134   }
;;;2135   else{
;;;2136   	remove_all_chars(data, '\n', '\n');
001260  220a              MOVS     r2,#0xa
001262  4611              MOV      r1,r2
001264  48e0              LDR      r0,|L158.5608|
001266  f7fffffe          BL       remove_all_chars
;;;2137   			strcat(data,"CH\n");	
00126a  49e0              LDR      r1,|L158.5612|
00126c  48de              LDR      r0,|L158.5608|
00126e  f7fffffe          BL       strcat
;;;2138   			
;;;2139   	
;;;2140   	  delay(100);
001272  2064              MOVS     r0,#0x64
001274  f7fffffe          BL       delay
;;;2141   		clear();//memset(uart_string_gsm,0,5000);
001278  f7fffffe          BL       clear
;;;2142   	
;;;2143   	memset(at_,0,100);
00127c  2164              MOVS     r1,#0x64
00127e  48dc              LDR      r0,|L158.5616|
001280  f7fffffe          BL       __aeabi_memclr
;;;2144   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001284  48d8              LDR      r0,|L158.5608|
001286  f7fffffe          BL       strlen
00128a  1c44              ADDS     r4,r0,#1
00128c  4623              MOV      r3,r4
00128e  4ad9              LDR      r2,|L158.5620|
001290  49d9              LDR      r1,|L158.5624|
001292  48d7              LDR      r0,|L158.5616|
001294  f7fffffe          BL       __2sprintf
;;;2145   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001298  2005              MOVS     r0,#5
00129a  4bd1              LDR      r3,|L158.5600|
00129c  4ad7              LDR      r2,|L158.5628|
00129e  49d8              LDR      r1,|L158.5632|
0012a0  9000              STR      r0,[sp,#0]
0012a2  48d3              LDR      r0,|L158.5616|
0012a4  f7fffffe          BL       send_SD
;;;2146   clear();	
0012a8  f7fffffe          BL       clear
;;;2147   									k2=0;									//string array counter for uart 1
0012ac  2000              MOVS     r0,#0
0012ae  49d5              LDR      r1,|L158.5636|
0012b0  6008              STR      r0,[r1,#0]  ; k2
;;;2148   									tout=0;	
0012b2  49cc              LDR      r1,|L158.5604|
0012b4  6008              STR      r0,[r1,#0]  ; tout
;;;2149   		for(k=0;k<strlen(data);k++)
0012b6  49d4              LDR      r1,|L158.5640|
0012b8  6008              STR      r0,[r1,#0]  ; k
0012ba  e00b              B        |L158.4820|
                  |L158.4796|
;;;2150   		{
;;;2151   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0012bc  48ca              LDR      r0,|L158.5608|
0012be  4ad2              LDR      r2,|L158.5640|
0012c0  6812              LDR      r2,[r2,#0]  ; k
0012c2  5c81              LDRB     r1,[r0,r2]
0012c4  48c3              LDR      r0,|L158.5588|
0012c6  f7fffffe          BL       uart_putchar
0012ca  48cf              LDR      r0,|L158.5640|
0012cc  6800              LDR      r0,[r0,#0]            ;2149  ; k
0012ce  1c40              ADDS     r0,r0,#1              ;2149
0012d0  49cd              LDR      r1,|L158.5640|
0012d2  6008              STR      r0,[r1,#0]            ;2149  ; k
                  |L158.4820|
0012d4  48c4              LDR      r0,|L158.5608|
0012d6  f7fffffe          BL       strlen
0012da  49cb              LDR      r1,|L158.5640|
0012dc  6809              LDR      r1,[r1,#0]            ;2149  ; k
0012de  4288              CMP      r0,r1                 ;2149
0012e0  d8ec              BHI      |L158.4796|
;;;2152   		}	
;;;2153   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0012e2  210a              MOVS     r1,#0xa
0012e4  48bb              LDR      r0,|L158.5588|
0012e6  f7fffffe          BL       uart_putchar
0012ea  210a              MOVS     r1,#0xa
0012ec  48b9              LDR      r0,|L158.5588|
0012ee  f7fffffe          BL       uart_putchar
0012f2  210a              MOVS     r1,#0xa
0012f4  48b7              LDR      r0,|L158.5588|
0012f6  f7fffffe          BL       uart_putchar
0012fa  210a              MOVS     r1,#0xa
0012fc  48b5              LDR      r0,|L158.5588|
0012fe  f7fffffe          BL       uart_putchar
001302  210a              MOVS     r1,#0xa
001304  48b3              LDR      r0,|L158.5588|
001306  f7fffffe          BL       uart_putchar
00130a  210a              MOVS     r1,#0xa
00130c  48b1              LDR      r0,|L158.5588|
00130e  f7fffffe          BL       uart_putchar
001312  210a              MOVS     r1,#0xa
001314  48af              LDR      r0,|L158.5588|
001316  f7fffffe          BL       uart_putchar
00131a  210a              MOVS     r1,#0xa
00131c  48ad              LDR      r0,|L158.5588|
00131e  f7fffffe          BL       uart_putchar
001322  210a              MOVS     r1,#0xa
001324  48ab              LDR      r0,|L158.5588|
001326  f7fffffe          BL       uart_putchar
00132a  210a              MOVS     r1,#0xa
00132c  48a9              LDR      r0,|L158.5588|
00132e  f7fffffe          BL       uart_putchar
001332  210a              MOVS     r1,#0xa
001334  48a7              LDR      r0,|L158.5588|
001336  f7fffffe          BL       uart_putchar
00133a  210a              MOVS     r1,#0xa
00133c  48a5              LDR      r0,|L158.5588|
00133e  f7fffffe          BL       uart_putchar
001342  210a              MOVS     r1,#0xa
001344  48a3              LDR      r0,|L158.5588|
001346  f7fffffe          BL       uart_putchar
00134a  210a              MOVS     r1,#0xa
00134c  48a1              LDR      r0,|L158.5588|
00134e  f7fffffe          BL       uart_putchar
001352  210a              MOVS     r1,#0xa
001354  489f              LDR      r0,|L158.5588|
001356  f7fffffe          BL       uart_putchar
00135a  210a              MOVS     r1,#0xa
00135c  489d              LDR      r0,|L158.5588|
00135e  f7fffffe          BL       uart_putchar
001362  210a              MOVS     r1,#0xa
001364  489b              LDR      r0,|L158.5588|
001366  f7fffffe          BL       uart_putchar
00136a  210a              MOVS     r1,#0xa
00136c  4899              LDR      r0,|L158.5588|
00136e  f7fffffe          BL       uart_putchar
001372  210a              MOVS     r1,#0xa
001374  4897              LDR      r0,|L158.5588|
001376  f7fffffe          BL       uart_putchar
00137a  210a              MOVS     r1,#0xa
00137c  4895              LDR      r0,|L158.5588|
00137e  f7fffffe          BL       uart_putchar
001382  210a              MOVS     r1,#0xa
001384  4893              LDR      r0,|L158.5588|
001386  f7fffffe          BL       uart_putchar
00138a  210a              MOVS     r1,#0xa
00138c  4891              LDR      r0,|L158.5588|
00138e  f7fffffe          BL       uart_putchar
001392  210a              MOVS     r1,#0xa
001394  488f              LDR      r0,|L158.5588|
001396  f7fffffe          BL       uart_putchar
00139a  210a              MOVS     r1,#0xa
00139c  488d              LDR      r0,|L158.5588|
00139e  f7fffffe          BL       uart_putchar
0013a2  210a              MOVS     r1,#0xa
0013a4  488b              LDR      r0,|L158.5588|
0013a6  f7fffffe          BL       uart_putchar
0013aa  210a              MOVS     r1,#0xa
0013ac  4889              LDR      r0,|L158.5588|
0013ae  f7fffffe          BL       uart_putchar
0013b2  210a              MOVS     r1,#0xa
0013b4  4887              LDR      r0,|L158.5588|
0013b6  f7fffffe          BL       uart_putchar
0013ba  210a              MOVS     r1,#0xa
0013bc  4885              LDR      r0,|L158.5588|
0013be  f7fffffe          BL       uart_putchar
0013c2  210a              MOVS     r1,#0xa
0013c4  4883              LDR      r0,|L158.5588|
0013c6  f7fffffe          BL       uart_putchar
0013ca  210a              MOVS     r1,#0xa
0013cc  4881              LDR      r0,|L158.5588|
0013ce  e000              B        |L158.5074|
                  |L158.5072|
0013d0  e3fe              B        |L158.7120|
                  |L158.5074|
0013d2  f7fffffe          BL       uart_putchar
0013d6  210a              MOVS     r1,#0xa
0013d8  487e              LDR      r0,|L158.5588|
0013da  f7fffffe          BL       uart_putchar
0013de  210a              MOVS     r1,#0xa
0013e0  487c              LDR      r0,|L158.5588|
0013e2  f7fffffe          BL       uart_putchar
0013e6  210a              MOVS     r1,#0xa
0013e8  487a              LDR      r0,|L158.5588|
0013ea  f7fffffe          BL       uart_putchar
0013ee  210a              MOVS     r1,#0xa
0013f0  4878              LDR      r0,|L158.5588|
0013f2  f7fffffe          BL       uart_putchar
0013f6  210a              MOVS     r1,#0xa
0013f8  4876              LDR      r0,|L158.5588|
0013fa  f7fffffe          BL       uart_putchar
0013fe  210a              MOVS     r1,#0xa
001400  4874              LDR      r0,|L158.5588|
001402  f7fffffe          BL       uart_putchar
001406  210a              MOVS     r1,#0xa
001408  4872              LDR      r0,|L158.5588|
00140a  f7fffffe          BL       uart_putchar
00140e  210a              MOVS     r1,#0xa
001410  4870              LDR      r0,|L158.5588|
001412  f7fffffe          BL       uart_putchar
001416  210a              MOVS     r1,#0xa
001418  486e              LDR      r0,|L158.5588|
00141a  f7fffffe          BL       uart_putchar
00141e  210a              MOVS     r1,#0xa
001420  486c              LDR      r0,|L158.5588|
001422  f7fffffe          BL       uart_putchar
001426  210a              MOVS     r1,#0xa
001428  486a              LDR      r0,|L158.5588|
00142a  f7fffffe          BL       uart_putchar
00142e  210a              MOVS     r1,#0xa
001430  4868              LDR      r0,|L158.5588|
001432  f7fffffe          BL       uart_putchar
001436  210a              MOVS     r1,#0xa
001438  4866              LDR      r0,|L158.5588|
00143a  f7fffffe          BL       uart_putchar
00143e  210a              MOVS     r1,#0xa
001440  4864              LDR      r0,|L158.5588|
001442  f7fffffe          BL       uart_putchar
001446  210a              MOVS     r1,#0xa
001448  4862              LDR      r0,|L158.5588|
00144a  f7fffffe          BL       uart_putchar
00144e  210a              MOVS     r1,#0xa
001450  4860              LDR      r0,|L158.5588|
001452  f7fffffe          BL       uart_putchar
001456  210a              MOVS     r1,#0xa
001458  485e              LDR      r0,|L158.5588|
00145a  f7fffffe          BL       uart_putchar
00145e  210a              MOVS     r1,#0xa
001460  485c              LDR      r0,|L158.5588|
001462  f7fffffe          BL       uart_putchar
001466  210a              MOVS     r1,#0xa
001468  485a              LDR      r0,|L158.5588|
00146a  f7fffffe          BL       uart_putchar
00146e  210a              MOVS     r1,#0xa
001470  4858              LDR      r0,|L158.5588|
001472  f7fffffe          BL       uart_putchar
001476  210a              MOVS     r1,#0xa
001478  4856              LDR      r0,|L158.5588|
00147a  f7fffffe          BL       uart_putchar
00147e  210a              MOVS     r1,#0xa
001480  4854              LDR      r0,|L158.5588|
001482  f7fffffe          BL       uart_putchar
001486  210a              MOVS     r1,#0xa
001488  4852              LDR      r0,|L158.5588|
00148a  f7fffffe          BL       uart_putchar
00148e  210a              MOVS     r1,#0xa
001490  4850              LDR      r0,|L158.5588|
001492  f7fffffe          BL       uart_putchar
001496  210a              MOVS     r1,#0xa
001498  484e              LDR      r0,|L158.5588|
00149a  f7fffffe          BL       uart_putchar
00149e  210a              MOVS     r1,#0xa
0014a0  484c              LDR      r0,|L158.5588|
0014a2  f7fffffe          BL       uart_putchar
0014a6  210a              MOVS     r1,#0xa
0014a8  484a              LDR      r0,|L158.5588|
0014aa  f7fffffe          BL       uart_putchar
;;;2154   									//memset(data,0,1000);
;;;2155   														//timer counts to wait for characters in uart 1 									
;;;2156   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0014ae  bf00              NOP      
                  |L158.5296|
0014b0  4949              LDR      r1,|L158.5592|
0014b2  484a              LDR      r0,|L158.5596|
0014b4  f7fffffe          BL       strstr
0014b8  2800              CMP      r0,#0
0014ba  d109              BNE      |L158.5328|
0014bc  4948              LDR      r1,|L158.5600|
0014be  4847              LDR      r0,|L158.5596|
0014c0  f7fffffe          BL       strstr
0014c4  2800              CMP      r0,#0
0014c6  d103              BNE      |L158.5328|
0014c8  4846              LDR      r0,|L158.5604|
0014ca  6800              LDR      r0,[r0,#0]  ; tout
0014cc  2805              CMP      r0,#5
0014ce  ddef              BLE      |L158.5296|
                  |L158.5328|
;;;2157   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2158   									}
;;;2159   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0014d0  f7fffffe          BL       clear
;;;2160   									//clear();
;;;2161   									memset(data,0,strlen(data));
0014d4  4844              LDR      r0,|L158.5608|
0014d6  f7fffffe          BL       strlen
0014da  4604              MOV      r4,r0
0014dc  4621              MOV      r1,r4
0014de  4842              LDR      r0,|L158.5608|
0014e0  f7fffffe          BL       __aeabi_memclr
;;;2162   									clear();
0014e4  f7fffffe          BL       clear
;;;2163   
;;;2164   								
;;;2165   	
;;;2166   	
;;;2167   	
;;;2168   	//log_it();
;;;2169   			memset(data,0,strlen(data));
0014e8  483f              LDR      r0,|L158.5608|
0014ea  f7fffffe          BL       strlen
0014ee  4604              MOV      r4,r0
0014f0  4621              MOV      r1,r4
0014f2  483d              LDR      r0,|L158.5608|
0014f4  f7fffffe          BL       __aeabi_memclr
;;;2170   //*****************************tcp_initialization();************************************//
;;;2171   
;;;2172   	
;;;2173   msg_sim800(); 
0014f8  f7fffffe          BL       msg_sim800
;;;2174   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0014fc  2005              MOVS     r0,#5
0014fe  4b38              LDR      r3,|L158.5600|
001500  4a3e              LDR      r2,|L158.5628|
001502  4942              LDR      r1,|L158.5644|
001504  9000              STR      r0,[sp,#0]
001506  4842              LDR      r0,|L158.5648|
001508  f7fffffe          BL       send_GSM
;;;2175   delay(100);
00150c  2064              MOVS     r0,#0x64
00150e  f7fffffe          BL       delay
;;;2176   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
001512  2004              MOVS     r0,#4
001514  4b32              LDR      r3,|L158.5600|
001516  4a3f              LDR      r2,|L158.5652|
001518  493c              LDR      r1,|L158.5644|
00151a  9000              STR      r0,[sp,#0]
00151c  483e              LDR      r0,|L158.5656|
00151e  f7fffffe          BL       send_GSM
;;;2177   GPS_COLLECT2();
001522  f7fffffe          BL       GPS_COLLECT2
;;;2178   strcat(data,"CH\n");		
001526  4931              LDR      r1,|L158.5612|
001528  482f              LDR      r0,|L158.5608|
00152a  f7fffffe          BL       strcat
;;;2179   GPS_COLLECT2();
00152e  f7fffffe          BL       GPS_COLLECT2
;;;2180   strcat(data,"CH\n");	
001532  492e              LDR      r1,|L158.5612|
001534  482c              LDR      r0,|L158.5608|
001536  f7fffffe          BL       strcat
;;;2181   GPS_COLLECT2();
00153a  f7fffffe          BL       GPS_COLLECT2
;;;2182   strcat(data,"CH\n");
00153e  492b              LDR      r1,|L158.5612|
001540  4829              LDR      r0,|L158.5608|
001542  f7fffffe          BL       strcat
;;;2183   cond201=(strstr(uart_string_gsm, "OK"));
001546  4931              LDR      r1,|L158.5644|
001548  4824              LDR      r0,|L158.5596|
00154a  f7fffffe          BL       strstr
00154e  4933              LDR      r1,|L158.5660|
001550  6008              STR      r0,[r1,#0]  ; cond201
;;;2184   cond200=(strstr(uart_string_gsm, "ERROR"));
001552  4923              LDR      r1,|L158.5600|
001554  4821              LDR      r0,|L158.5596|
001556  f7fffffe          BL       strstr
00155a  4931              LDR      r1,|L158.5664|
00155c  6008              STR      r0,[r1,#0]  ; cond200
;;;2185   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00155e  482f              LDR      r0,|L158.5660|
001560  6800              LDR      r0,[r0,#0]  ; cond201
001562  2800              CMP      r0,#0
001564  d101              BNE      |L158.5482|
001566  2001              MOVS     r0,#1
001568  e000              B        |L158.5484|
                  |L158.5482|
00156a  2000              MOVS     r0,#0
                  |L158.5484|
00156c  2800              CMP      r0,#0
                  |L158.5486|
00156e  d07d              BEQ      |L158.5740|
001570  482b              LDR      r0,|L158.5664|
001572  6800              LDR      r0,[r0,#0]  ; cond200
001574  2800              CMP      r0,#0
001576  d101              BNE      |L158.5500|
001578  2001              MOVS     r0,#1
00157a  e000              B        |L158.5502|
                  |L158.5500|
00157c  2000              MOVS     r0,#0
                  |L158.5502|
00157e  2800              CMP      r0,#0
001580  d0f5              BEQ      |L158.5486|
001582  4828              LDR      r0,|L158.5668|
001584  6800              LDR      r0,[r0,#0]  ; sleep_flag
001586  2801              CMP      r0,#1
001588  d0f1              BEQ      |L158.5486|
;;;2186   {
;;;2187   delay(100);
00158a  2064              MOVS     r0,#0x64
00158c  f7fffffe          BL       delay
;;;2188   clear();//memset(uart_string_gsm,0,5000);
001590  f7fffffe          BL       clear
;;;2189   memset(at_,0,100);
001594  2164              MOVS     r1,#0x64
001596  4816              LDR      r0,|L158.5616|
001598  f7fffffe          BL       __aeabi_memclr
;;;2190   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00159c  4812              LDR      r0,|L158.5608|
00159e  f7fffffe          BL       strlen
0015a2  1c44              ADDS     r4,r0,#1
0015a4  4623              MOV      r3,r4
0015a6  4a13              LDR      r2,|L158.5620|
0015a8  4913              LDR      r1,|L158.5624|
0015aa  4811              LDR      r0,|L158.5616|
0015ac  f7fffffe          BL       __2sprintf
;;;2191   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0015b0  2005              MOVS     r0,#5
0015b2  4b0b              LDR      r3,|L158.5600|
0015b4  4a11              LDR      r2,|L158.5628|
0015b6  4912              LDR      r1,|L158.5632|
0015b8  9000              STR      r0,[sp,#0]
0015ba  480d              LDR      r0,|L158.5616|
0015bc  f7fffffe          BL       send_SD
;;;2192   clear();	
0015c0  f7fffffe          BL       clear
;;;2193   k2=0;									//string array counter for uart 1
0015c4  2000              MOVS     r0,#0
0015c6  490f              LDR      r1,|L158.5636|
0015c8  6008              STR      r0,[r1,#0]  ; k2
;;;2194   tout=0;	
0015ca  4906              LDR      r1,|L158.5604|
0015cc  6008              STR      r0,[r1,#0]  ; tout
;;;2195   for(k=0;k<strlen(data);k++)
0015ce  490e              LDR      r1,|L158.5640|
0015d0  6008              STR      r0,[r1,#0]  ; k
0015d2  e035              B        |L158.5696|
                  |L158.5588|
                          DCD      0x4006b000
                  |L158.5592|
                          DCD      ||.conststring||+0x70
                  |L158.5596|
                          DCD      uart_string_gsm
                  |L158.5600|
                          DCD      ||.conststring||+0xe0
                  |L158.5604|
                          DCD      tout
                  |L158.5608|
                          DCD      data
                  |L158.5612|
                          DCD      ||.conststring||+0x4b8
                  |L158.5616|
                          DCD      at_
                  |L158.5620|
                          DCD      drive
                  |L158.5624|
                          DCD      ||.conststring||+0x4bc
                  |L158.5628|
                          DCD      ||.conststring||+0x18
                  |L158.5632|
                          DCD      ||.conststring||+0x20
                  |L158.5636|
                          DCD      ||k2||
                  |L158.5640|
                          DCD      k
                  |L158.5644|
                          DCD      ||.conststring||+0x2c
                  |L158.5648|
                          DCD      ||.conststring||+0x6f4
                  |L158.5652|
                          DCD      ||.conststring||+0x704
                  |L158.5656|
                          DCD      ||.conststring||+0x718
                  |L158.5660|
                          DCD      cond201
                  |L158.5664|
                          DCD      cond200
                  |L158.5668|
                          DCD      sleep_flag
                  |L158.5672|
;;;2196   {
;;;2197   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001628  48fd              LDR      r0,|L158.6688|
00162a  4afe              LDR      r2,|L158.6692|
00162c  6812              LDR      r2,[r2,#0]  ; k
00162e  5c81              LDRB     r1,[r0,r2]
001630  48fd              LDR      r0,|L158.6696|
001632  f7fffffe          BL       uart_putchar
001636  48fb              LDR      r0,|L158.6692|
001638  6800              LDR      r0,[r0,#0]            ;2195  ; k
00163a  1c40              ADDS     r0,r0,#1              ;2195
00163c  49f9              LDR      r1,|L158.6692|
00163e  6008              STR      r0,[r1,#0]            ;2195  ; k
                  |L158.5696|
001640  48f7              LDR      r0,|L158.6688|
001642  f7fffffe          BL       strlen
001646  49f7              LDR      r1,|L158.6692|
001648  6809              LDR      r1,[r1,#0]            ;2195  ; k
00164a  4288              CMP      r0,r1                 ;2195
00164c  d8ec              BHI      |L158.5672|
;;;2198   }	
;;;2199   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00164e  210a              MOVS     r1,#0xa
001650  48f5              LDR      r0,|L158.6696|
001652  f7fffffe          BL       uart_putchar
001656  210a              MOVS     r1,#0xa
001658  48f3              LDR      r0,|L158.6696|
00165a  f7fffffe          BL       uart_putchar
00165e  210a              MOVS     r1,#0xa
001660  48f1              LDR      r0,|L158.6696|
001662  f7fffffe          BL       uart_putchar
001666  210a              MOVS     r1,#0xa
001668  48ef              LDR      r0,|L158.6696|
00166a  e000              B        |L158.5742|
                  |L158.5740|
00166c  e100              B        |L158.6256|
                  |L158.5742|
00166e  f7fffffe          BL       uart_putchar
001672  210a              MOVS     r1,#0xa
001674  48ec              LDR      r0,|L158.6696|
001676  f7fffffe          BL       uart_putchar
00167a  210a              MOVS     r1,#0xa
00167c  48ea              LDR      r0,|L158.6696|
00167e  f7fffffe          BL       uart_putchar
001682  210a              MOVS     r1,#0xa
001684  48e8              LDR      r0,|L158.6696|
001686  f7fffffe          BL       uart_putchar
00168a  210a              MOVS     r1,#0xa
00168c  48e6              LDR      r0,|L158.6696|
00168e  f7fffffe          BL       uart_putchar
001692  210a              MOVS     r1,#0xa
001694  48e4              LDR      r0,|L158.6696|
001696  f7fffffe          BL       uart_putchar
00169a  210a              MOVS     r1,#0xa
00169c  48e2              LDR      r0,|L158.6696|
00169e  f7fffffe          BL       uart_putchar
0016a2  210a              MOVS     r1,#0xa
0016a4  48e0              LDR      r0,|L158.6696|
0016a6  f7fffffe          BL       uart_putchar
0016aa  210a              MOVS     r1,#0xa
0016ac  48de              LDR      r0,|L158.6696|
0016ae  f7fffffe          BL       uart_putchar
0016b2  210a              MOVS     r1,#0xa
0016b4  48dc              LDR      r0,|L158.6696|
0016b6  f7fffffe          BL       uart_putchar
0016ba  210a              MOVS     r1,#0xa
0016bc  48da              LDR      r0,|L158.6696|
0016be  f7fffffe          BL       uart_putchar
0016c2  210a              MOVS     r1,#0xa
0016c4  48d8              LDR      r0,|L158.6696|
0016c6  f7fffffe          BL       uart_putchar
0016ca  210a              MOVS     r1,#0xa
0016cc  48d6              LDR      r0,|L158.6696|
0016ce  f7fffffe          BL       uart_putchar
0016d2  210a              MOVS     r1,#0xa
0016d4  48d4              LDR      r0,|L158.6696|
0016d6  f7fffffe          BL       uart_putchar
0016da  210a              MOVS     r1,#0xa
0016dc  48d2              LDR      r0,|L158.6696|
0016de  f7fffffe          BL       uart_putchar
0016e2  210a              MOVS     r1,#0xa
0016e4  48d0              LDR      r0,|L158.6696|
0016e6  f7fffffe          BL       uart_putchar
0016ea  210a              MOVS     r1,#0xa
0016ec  48ce              LDR      r0,|L158.6696|
0016ee  f7fffffe          BL       uart_putchar
0016f2  210a              MOVS     r1,#0xa
0016f4  48cc              LDR      r0,|L158.6696|
0016f6  f7fffffe          BL       uart_putchar
0016fa  210a              MOVS     r1,#0xa
0016fc  48ca              LDR      r0,|L158.6696|
0016fe  f7fffffe          BL       uart_putchar
001702  210a              MOVS     r1,#0xa
001704  48c8              LDR      r0,|L158.6696|
001706  f7fffffe          BL       uart_putchar
00170a  210a              MOVS     r1,#0xa
00170c  48c6              LDR      r0,|L158.6696|
00170e  f7fffffe          BL       uart_putchar
001712  210a              MOVS     r1,#0xa
001714  48c4              LDR      r0,|L158.6696|
001716  f7fffffe          BL       uart_putchar
00171a  210a              MOVS     r1,#0xa
00171c  48c2              LDR      r0,|L158.6696|
00171e  f7fffffe          BL       uart_putchar
001722  210a              MOVS     r1,#0xa
001724  48c0              LDR      r0,|L158.6696|
001726  f7fffffe          BL       uart_putchar
00172a  210a              MOVS     r1,#0xa
00172c  48be              LDR      r0,|L158.6696|
00172e  f7fffffe          BL       uart_putchar
001732  210a              MOVS     r1,#0xa
001734  48bc              LDR      r0,|L158.6696|
001736  f7fffffe          BL       uart_putchar
00173a  210a              MOVS     r1,#0xa
00173c  48ba              LDR      r0,|L158.6696|
00173e  f7fffffe          BL       uart_putchar
001742  210a              MOVS     r1,#0xa
001744  48b8              LDR      r0,|L158.6696|
001746  f7fffffe          BL       uart_putchar
00174a  210a              MOVS     r1,#0xa
00174c  48b6              LDR      r0,|L158.6696|
00174e  f7fffffe          BL       uart_putchar
001752  210a              MOVS     r1,#0xa
001754  48b4              LDR      r0,|L158.6696|
001756  f7fffffe          BL       uart_putchar
00175a  210a              MOVS     r1,#0xa
00175c  48b2              LDR      r0,|L158.6696|
00175e  f7fffffe          BL       uart_putchar
001762  210a              MOVS     r1,#0xa
001764  48b0              LDR      r0,|L158.6696|
001766  f7fffffe          BL       uart_putchar
00176a  210a              MOVS     r1,#0xa
00176c  48ae              LDR      r0,|L158.6696|
00176e  f7fffffe          BL       uart_putchar
001772  210a              MOVS     r1,#0xa
001774  48ac              LDR      r0,|L158.6696|
001776  f7fffffe          BL       uart_putchar
00177a  210a              MOVS     r1,#0xa
00177c  48aa              LDR      r0,|L158.6696|
00177e  f7fffffe          BL       uart_putchar
001782  210a              MOVS     r1,#0xa
001784  48a8              LDR      r0,|L158.6696|
001786  f7fffffe          BL       uart_putchar
00178a  210a              MOVS     r1,#0xa
00178c  48a6              LDR      r0,|L158.6696|
00178e  f7fffffe          BL       uart_putchar
001792  210a              MOVS     r1,#0xa
001794  48a4              LDR      r0,|L158.6696|
001796  f7fffffe          BL       uart_putchar
00179a  210a              MOVS     r1,#0xa
00179c  48a2              LDR      r0,|L158.6696|
00179e  f7fffffe          BL       uart_putchar
0017a2  210a              MOVS     r1,#0xa
0017a4  48a0              LDR      r0,|L158.6696|
0017a6  f7fffffe          BL       uart_putchar
0017aa  210a              MOVS     r1,#0xa
0017ac  489e              LDR      r0,|L158.6696|
0017ae  e000              B        |L158.6066|
                  |L158.6064|
0017b0  e2df              B        |L158.7538|
                  |L158.6066|
0017b2  f7fffffe          BL       uart_putchar
0017b6  210a              MOVS     r1,#0xa
0017b8  489b              LDR      r0,|L158.6696|
0017ba  f7fffffe          BL       uart_putchar
0017be  210a              MOVS     r1,#0xa
0017c0  4899              LDR      r0,|L158.6696|
0017c2  f7fffffe          BL       uart_putchar
0017c6  210a              MOVS     r1,#0xa
0017c8  4897              LDR      r0,|L158.6696|
0017ca  f7fffffe          BL       uart_putchar
0017ce  210a              MOVS     r1,#0xa
0017d0  4895              LDR      r0,|L158.6696|
0017d2  f7fffffe          BL       uart_putchar
0017d6  210a              MOVS     r1,#0xa
0017d8  4893              LDR      r0,|L158.6696|
0017da  f7fffffe          BL       uart_putchar
0017de  210a              MOVS     r1,#0xa
0017e0  4891              LDR      r0,|L158.6696|
0017e2  f7fffffe          BL       uart_putchar
0017e6  210a              MOVS     r1,#0xa
0017e8  488f              LDR      r0,|L158.6696|
0017ea  f7fffffe          BL       uart_putchar
0017ee  210a              MOVS     r1,#0xa
0017f0  488d              LDR      r0,|L158.6696|
0017f2  f7fffffe          BL       uart_putchar
0017f6  210a              MOVS     r1,#0xa
0017f8  488b              LDR      r0,|L158.6696|
0017fa  f7fffffe          BL       uart_putchar
0017fe  210a              MOVS     r1,#0xa
001800  4889              LDR      r0,|L158.6696|
001802  f7fffffe          BL       uart_putchar
001806  210a              MOVS     r1,#0xa
001808  4887              LDR      r0,|L158.6696|
00180a  f7fffffe          BL       uart_putchar
00180e  210a              MOVS     r1,#0xa
001810  4885              LDR      r0,|L158.6696|
001812  f7fffffe          BL       uart_putchar
001816  210a              MOVS     r1,#0xa
001818  4883              LDR      r0,|L158.6696|
00181a  f7fffffe          BL       uart_putchar
;;;2200   									//memset(data,0,1000);
;;;2201   														//timer counts to wait for characters in uart 1 									
;;;2202   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00181e  bf00              NOP      
                  |L158.6176|
001820  4982              LDR      r1,|L158.6700|
001822  4883              LDR      r0,|L158.6704|
001824  f7fffffe          BL       strstr
001828  2800              CMP      r0,#0
00182a  d109              BNE      |L158.6208|
00182c  4981              LDR      r1,|L158.6708|
00182e  4880              LDR      r0,|L158.6704|
001830  f7fffffe          BL       strstr
001834  2800              CMP      r0,#0
001836  d103              BNE      |L158.6208|
001838  487f              LDR      r0,|L158.6712|
00183a  6800              LDR      r0,[r0,#0]  ; tout
00183c  2805              CMP      r0,#5
00183e  ddef              BLE      |L158.6176|
                  |L158.6208|
;;;2203   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2204   									}
;;;2205   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001840  f7fffffe          BL       clear
;;;2206   									//clear();
;;;2207   									memset(data,0,strlen(data));
001844  4876              LDR      r0,|L158.6688|
001846  f7fffffe          BL       strlen
00184a  4604              MOV      r4,r0
00184c  4621              MOV      r1,r4
00184e  4874              LDR      r0,|L158.6688|
001850  f7fffffe          BL       __aeabi_memclr
;;;2208   									clear();
001854  f7fffffe          BL       clear
;;;2209   									RESET_OFF;delay(100);
001858  2020              MOVS     r0,#0x20
00185a  4978              LDR      r1,|L158.6716|
00185c  6088              STR      r0,[r1,#8]
00185e  2064              MOVS     r0,#0x64
001860  f7fffffe          BL       delay
;;;2210   									RESET_ON;delay(100);		
001864  2020              MOVS     r0,#0x20
001866  4975              LDR      r1,|L158.6716|
001868  6048              STR      r0,[r1,#4]
00186a  2064              MOVS     r0,#0x64
00186c  f7fffffe          BL       delay
                  |L158.6256|
;;;2211   }
;;;2212   	
;;;2213   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001870  2004              MOVS     r0,#4
001872  4b73              LDR      r3,|L158.6720|
001874  4a73              LDR      r2,|L158.6724|
001876  e000              B        |L158.6266|
                  |L158.6264|
001878  e3da              B        |L158.8240|
                  |L158.6266|
00187a  4973              LDR      r1,|L158.6728|
00187c  9000              STR      r0,[sp,#0]
00187e  4873              LDR      r0,|L158.6732|
001880  f7fffffe          BL       send_GSM
;;;2214   GPS_COLLECT2();
001884  f7fffffe          BL       GPS_COLLECT2
;;;2215   strcat(data,"CH\n");	
001888  4971              LDR      r1,|L158.6736|
00188a  4865              LDR      r0,|L158.6688|
00188c  f7fffffe          BL       strcat
;;;2216   memset(at_,0,100);
001890  2164              MOVS     r1,#0x64
001892  4870              LDR      r0,|L158.6740|
001894  f7fffffe          BL       __aeabi_memclr
;;;2217   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001898  4a6f              LDR      r2,|L158.6744|
00189a  4970              LDR      r1,|L158.6748|
00189c  486d              LDR      r0,|L158.6740|
00189e  f7fffffe          BL       __2sprintf
;;;2218   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
0018a2  486f              LDR      r0,|L158.6752|
0018a4  6800              LDR      r0,[r0,#0]  ; tmeout
0018a6  4b66              LDR      r3,|L158.6720|
0018a8  4a66              LDR      r2,|L158.6724|
0018aa  4967              LDR      r1,|L158.6728|
0018ac  9000              STR      r0,[sp,#0]
0018ae  4869              LDR      r0,|L158.6740|
0018b0  f7fffffe          BL       send_GSM
;;;2219   msg_sim800(); 
0018b4  f7fffffe          BL       msg_sim800
;;;2220   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
0018b8  2004              MOVS     r0,#4
0018ba  4b6a              LDR      r3,|L158.6756|
0018bc  4a61              LDR      r2,|L158.6724|
0018be  4962              LDR      r1,|L158.6728|
0018c0  9000              STR      r0,[sp,#0]
0018c2  4869              LDR      r0,|L158.6760|
0018c4  f7fffffe          BL       send_GSM
;;;2221   GPS_COLLECT2();
0018c8  f7fffffe          BL       GPS_COLLECT2
;;;2222   strcat(data,"CH\n");	
0018cc  4960              LDR      r1,|L158.6736|
0018ce  4854              LDR      r0,|L158.6688|
0018d0  f7fffffe          BL       strcat
;;;2223   GPS_COLLECT2();
0018d4  f7fffffe          BL       GPS_COLLECT2
;;;2224   strcat(data,"CH\n");	
0018d8  495d              LDR      r1,|L158.6736|
0018da  4851              LDR      r0,|L158.6688|
0018dc  f7fffffe          BL       strcat
;;;2225   
;;;2226   
;;;2227   msg_sim800(); 
0018e0  f7fffffe          BL       msg_sim800
;;;2228   GPS_COLLECT2();
0018e4  f7fffffe          BL       GPS_COLLECT2
;;;2229   strcat(data,"CH\n");	
0018e8  4959              LDR      r1,|L158.6736|
0018ea  484d              LDR      r0,|L158.6688|
0018ec  f7fffffe          BL       strcat
;;;2230   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0018f0  f7fffffe          BL       clear
0018f4  485d              LDR      r0,|L158.6764|
0018f6  f7fffffe          BL       send_modem
0018fa  f7fffffe          BL       clear
;;;2231   					delay(20);
0018fe  2014              MOVS     r0,#0x14
001900  f7fffffe          BL       delay
;;;2232   
;;;2233   
;;;2234   msg_sim800(); 
001904  f7fffffe          BL       msg_sim800
;;;2235   
;;;2236   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001908  4b59              LDR      r3,|L158.6768|
00190a  4a5a              LDR      r2,|L158.6772|
00190c  495a              LDR      r1,|L158.6776|
00190e  4851              LDR      r0,|L158.6740|
001910  f7fffffe          BL       __2sprintf
;;;2237   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001914  4852              LDR      r0,|L158.6752|
001916  6800              LDR      r0,[r0,#0]  ; tmeout
001918  4b49              LDR      r3,|L158.6720|
00191a  4a46              LDR      r2,|L158.6708|
00191c  4957              LDR      r1,|L158.6780|
00191e  9000              STR      r0,[sp,#0]
001920  484c              LDR      r0,|L158.6740|
001922  f7fffffe          BL       send_GSM
;;;2238   						clear();
001926  f7fffffe          BL       clear
;;;2239   						
;;;2240   						
;;;2241   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
00192a  484d              LDR      r0,|L158.6752|
00192c  6800              LDR      r0,[r0,#0]  ; tmeout
00192e  4b54              LDR      r3,|L158.6784|
001930  4a40              LDR      r2,|L158.6708|
001932  4954              LDR      r1,|L158.6788|
001934  9000              STR      r0,[sp,#0]
001936  4854              LDR      r0,|L158.6792|
001938  f7fffffe          BL       send_GSM
;;;2242   //*****************************tcp_initialization ends**********************************//		
;;;2243   
;;;2244   			if(mystrstr(uart_string_gsm,'>')){
00193c  213e              MOVS     r1,#0x3e
00193e  483c              LDR      r0,|L158.6704|
001940  f7fffffe          BL       mystrstr
001944  2800              CMP      r0,#0
001946  d069              BEQ      |L158.6684|
;;;2245   									clear();
001948  f7fffffe          BL       clear
;;;2246   									memset(uart_string_gsm,0,5000);
00194c  494f              LDR      r1,|L158.6796|
00194e  4838              LDR      r0,|L158.6704|
001950  f7fffffe          BL       __aeabi_memclr
;;;2247   									qwe=strlen(data);
001954  4832              LDR      r0,|L158.6688|
001956  f7fffffe          BL       strlen
00195a  494d              LDR      r1,|L158.6800|
00195c  6008              STR      r0,[r1,#0]  ; qwe
;;;2248   									tout=0;
00195e  2000              MOVS     r0,#0
001960  4935              LDR      r1,|L158.6712|
001962  6008              STR      r0,[r1,#0]  ; tout
;;;2249   									k2=0;
001964  494b              LDR      r1,|L158.6804|
001966  6008              STR      r0,[r1,#0]  ; k2
;;;2250   									for(k=0;k<(qwe);k++)
001968  492e              LDR      r1,|L158.6692|
00196a  6008              STR      r0,[r1,#0]  ; k
00196c  e00b              B        |L158.6534|
                  |L158.6510|
;;;2251   									{
;;;2252   										uart_putchar(UART1_BASE_PTR, data[k]);
00196e  482c              LDR      r0,|L158.6688|
001970  4a2c              LDR      r2,|L158.6692|
001972  6812              LDR      r2,[r2,#0]  ; k
001974  5c81              LDRB     r1,[r0,r2]
001976  482c              LDR      r0,|L158.6696|
001978  f7fffffe          BL       uart_putchar
00197c  4829              LDR      r0,|L158.6692|
00197e  6800              LDR      r0,[r0,#0]            ;2250  ; k
001980  1c40              ADDS     r0,r0,#1              ;2250
001982  4928              LDR      r1,|L158.6692|
001984  6008              STR      r0,[r1,#0]            ;2250  ; k
                  |L158.6534|
001986  4827              LDR      r0,|L158.6692|
001988  6800              LDR      r0,[r0,#0]            ;2250  ; k
00198a  4941              LDR      r1,|L158.6800|
00198c  6809              LDR      r1,[r1,#0]            ;2250  ; qwe
00198e  4288              CMP      r0,r1                 ;2250
001990  dbed              BLT      |L158.6510|
;;;2253   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
001992  210a              MOVS     r1,#0xa
001994  4824              LDR      r0,|L158.6696|
001996  f7fffffe          BL       uart_putchar
00199a  211a              MOVS     r1,#0x1a
00199c  4822              LDR      r0,|L158.6696|
00199e  f7fffffe          BL       uart_putchar
0019a2  211a              MOVS     r1,#0x1a
0019a4  4820              LDR      r0,|L158.6696|
0019a6  f7fffffe          BL       uart_putchar
0019aa  211a              MOVS     r1,#0x1a
0019ac  481e              LDR      r0,|L158.6696|
0019ae  f7fffffe          BL       uart_putchar
0019b2  211a              MOVS     r1,#0x1a
0019b4  481c              LDR      r0,|L158.6696|
0019b6  f7fffffe          BL       uart_putchar
0019ba  211a              MOVS     r1,#0x1a
0019bc  481a              LDR      r0,|L158.6696|
0019be  f7fffffe          BL       uart_putchar
0019c2  211a              MOVS     r1,#0x1a
0019c4  4818              LDR      r0,|L158.6696|
0019c6  f7fffffe          BL       uart_putchar
;;;2254   															do
0019ca  bf00              NOP      
                  |L158.6604|
;;;2255   																{q1=strstr(uart_string_gsm,"SEND OK");
0019cc  4932              LDR      r1,|L158.6808|
0019ce  4818              LDR      r0,|L158.6704|
0019d0  f7fffffe          BL       strstr
0019d4  4931              LDR      r1,|L158.6812|
0019d6  6008              STR      r0,[r1,#0]  ; q1
;;;2256   																	q2=strstr(uart_string_gsm, "ERROR");
0019d8  4916              LDR      r1,|L158.6708|
0019da  4815              LDR      r0,|L158.6704|
0019dc  f7fffffe          BL       strstr
0019e0  492f              LDR      r1,|L158.6816|
0019e2  6008              STR      r0,[r1,#0]  ; q2
;;;2257   																		q3=strstr(uart_string_gsm, "FAIL");	
0019e4  492f              LDR      r1,|L158.6820|
0019e6  4812              LDR      r0,|L158.6704|
0019e8  f7fffffe          BL       strstr
0019ec  492e              LDR      r1,|L158.6824|
0019ee  6008              STR      r0,[r1,#0]  ; q3
;;;2258   																			q4=strstr(uart_string_gsm, "DEACT");	
0019f0  491c              LDR      r1,|L158.6756|
0019f2  480f              LDR      r0,|L158.6704|
0019f4  f7fffffe          BL       strstr
0019f8  492c              LDR      r1,|L158.6828|
0019fa  6008              STR      r0,[r1,#0]  ; q4
;;;2259   																	
;;;2260   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
0019fc  4827              LDR      r0,|L158.6812|
0019fe  6800              LDR      r0,[r0,#0]  ; q1
001a00  2800              CMP      r0,#0
001a02  d15a              BNE      |L158.6842|
001a04  4826              LDR      r0,|L158.6816|
001a06  6800              LDR      r0,[r0,#0]  ; q2
001a08  2800              CMP      r0,#0
001a0a  d156              BNE      |L158.6842|
001a0c  4826              LDR      r0,|L158.6824|
001a0e  6800              LDR      r0,[r0,#0]  ; q3
001a10  2800              CMP      r0,#0
001a12  d152              BNE      |L158.6842|
001a14  4608              MOV      r0,r1
001a16  6800              LDR      r0,[r0,#0]  ; q4
001a18  2800              CMP      r0,#0
001a1a  e049              B        |L158.6832|
                  |L158.6684|
001a1c  e1aa              B        |L158.7540|
001a1e  0000              DCW      0x0000
                  |L158.6688|
                          DCD      data
                  |L158.6692|
                          DCD      k
                  |L158.6696|
                          DCD      0x4006b000
                  |L158.6700|
                          DCD      ||.conststring||+0x70
                  |L158.6704|
                          DCD      uart_string_gsm
                  |L158.6708|
                          DCD      ||.conststring||+0xe0
                  |L158.6712|
                          DCD      tout
                  |L158.6716|
                          DCD      0x400ff080
                  |L158.6720|
                          DCD      ||.conststring||+0x10
                  |L158.6724|
                          DCD      ||.conststring||+0x18
                  |L158.6728|
                          DCD      ||.conststring||+0x2c
                  |L158.6732|
                          DCD      ||.conststring||+0x728
                  |L158.6736|
                          DCD      ||.conststring||+0x4b8
                  |L158.6740|
                          DCD      at_
                  |L158.6744|
                          DCD      apn
                  |L158.6748|
                          DCD      ||.conststring||+0x738
                  |L158.6752|
                          DCD      tmeout
                  |L158.6756|
                          DCD      ||.conststring||+0x6a4
                  |L158.6760|
                          DCD      ||.conststring||+0x74c
                  |L158.6764|
                          DCD      ||.conststring||+0x75c
                  |L158.6768|
                          DCD      port
                  |L158.6772|
                          DCD      ||ip||
                  |L158.6776|
                          DCD      ||.conststring||+0x76c
                  |L158.6780|
                          DCD      ||.conststring||+0x6dc
                  |L158.6784|
                          DCD      ||.conststring||+0x78c
                  |L158.6788|
                          DCD      ||.conststring||+0x20
                  |L158.6792|
                          DCD      ||.conststring||+0x6e4
                  |L158.6796|
                          DCD      0x00001388
                  |L158.6800|
                          DCD      qwe
                  |L158.6804|
                          DCD      ||k2||
                  |L158.6808|
                          DCD      ||.conststring||+0x694
                  |L158.6812|
                          DCD      ||q1||
                  |L158.6816|
                          DCD      ||q2||
                  |L158.6820|
                          DCD      ||.conststring||+0x69c
                  |L158.6824|
                          DCD      ||q3||
                  |L158.6828|
                          DCD      ||q4||
                  |L158.6832|
001ab0  d103              BNE      |L158.6842|
001ab2  48fe              LDR      r0,|L158.7852|
001ab4  6800              LDR      r0,[r0,#0]  ; tout
001ab6  2808              CMP      r0,#8
001ab8  dd88              BLE      |L158.6604|
                  |L158.6842|
;;;2261   															
;;;2262   																			delay(10);clear();
001aba  200a              MOVS     r0,#0xa
001abc  f7fffffe          BL       delay
001ac0  f7fffffe          BL       clear
;;;2263   														uart_putchar(UART1_BASE_PTR,0x1A);
001ac4  211a              MOVS     r1,#0x1a
001ac6  48fa              LDR      r0,|L158.7856|
001ac8  f7fffffe          BL       uart_putchar
;;;2264   												delay(10);
001acc  200a              MOVS     r0,#0xa
001ace  f7fffffe          BL       delay
;;;2265   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001ad2  211a              MOVS     r1,#0x1a
001ad4  48f6              LDR      r0,|L158.7856|
001ad6  f7fffffe          BL       uart_putchar
001ada  211a              MOVS     r1,#0x1a
001adc  48f4              LDR      r0,|L158.7856|
001ade  f7fffffe          BL       uart_putchar
001ae2  211a              MOVS     r1,#0x1a
001ae4  48f2              LDR      r0,|L158.7856|
001ae6  f7fffffe          BL       uart_putchar
;;;2266   delay(20);
001aea  2014              MOVS     r0,#0x14
001aec  f7fffffe          BL       delay
;;;2267   if(!strstr(uart_string_gsm,"SEND OK")){
001af0  49f0              LDR      r1,|L158.7860|
001af2  48f1              LDR      r0,|L158.7864|
001af4  f7fffffe          BL       strstr
001af8  2800              CMP      r0,#0
001afa  d169              BNE      |L158.7120|
;;;2268   
;;;2269   
;;;2270   	delay(100);
001afc  2064              MOVS     r0,#0x64
001afe  f7fffffe          BL       delay
;;;2271   		clear();//memset(uart_string_gsm,0,5000);
001b02  f7fffffe          BL       clear
;;;2272   	
;;;2273   	memset(at_,0,100);
001b06  2164              MOVS     r1,#0x64
001b08  48ec              LDR      r0,|L158.7868|
001b0a  f7fffffe          BL       __aeabi_memclr
;;;2274   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001b0e  48ec              LDR      r0,|L158.7872|
001b10  f7fffffe          BL       strlen
001b14  1c44              ADDS     r4,r0,#1
001b16  4623              MOV      r3,r4
001b18  4aea              LDR      r2,|L158.7876|
001b1a  49eb              LDR      r1,|L158.7880|
001b1c  48e7              LDR      r0,|L158.7868|
001b1e  f7fffffe          BL       __2sprintf
;;;2275   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001b22  2005              MOVS     r0,#5
001b24  4be9              LDR      r3,|L158.7884|
001b26  4aea              LDR      r2,|L158.7888|
001b28  49ea              LDR      r1,|L158.7892|
001b2a  9000              STR      r0,[sp,#0]
001b2c  48e3              LDR      r0,|L158.7868|
001b2e  f7fffffe          BL       send_SD
;;;2276   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2277   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2278   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2279   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2280   //	}
;;;2281   	
;;;2282   clear();	
001b32  f7fffffe          BL       clear
;;;2283   									k2=0;									//string array counter for uart 1
001b36  2000              MOVS     r0,#0
001b38  49e7              LDR      r1,|L158.7896|
001b3a  6008              STR      r0,[r1,#0]  ; k2
;;;2284   									tout=0;	
001b3c  49db              LDR      r1,|L158.7852|
001b3e  6008              STR      r0,[r1,#0]  ; tout
;;;2285   		for(k=0;k<strlen(data);k++)
001b40  49e6              LDR      r1,|L158.7900|
001b42  6008              STR      r0,[r1,#0]  ; k
001b44  e00b              B        |L158.7006|
                  |L158.6982|
;;;2286   		{
;;;2287   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001b46  48de              LDR      r0,|L158.7872|
001b48  4ae4              LDR      r2,|L158.7900|
001b4a  6812              LDR      r2,[r2,#0]  ; k
001b4c  5c81              LDRB     r1,[r0,r2]
001b4e  48d8              LDR      r0,|L158.7856|
001b50  f7fffffe          BL       uart_putchar
001b54  48e1              LDR      r0,|L158.7900|
001b56  6800              LDR      r0,[r0,#0]            ;2285  ; k
001b58  1c40              ADDS     r0,r0,#1              ;2285
001b5a  49e0              LDR      r1,|L158.7900|
001b5c  6008              STR      r0,[r1,#0]            ;2285  ; k
                  |L158.7006|
001b5e  48d8              LDR      r0,|L158.7872|
001b60  f7fffffe          BL       strlen
001b64  49dd              LDR      r1,|L158.7900|
001b66  6809              LDR      r1,[r1,#0]            ;2285  ; k
001b68  4288              CMP      r0,r1                 ;2285
001b6a  d8ec              BHI      |L158.6982|
;;;2288   		}	
;;;2289   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001b6c  210a              MOVS     r1,#0xa
001b6e  48d0              LDR      r0,|L158.7856|
001b70  f7fffffe          BL       uart_putchar
001b74  210a              MOVS     r1,#0xa
001b76  48ce              LDR      r0,|L158.7856|
001b78  f7fffffe          BL       uart_putchar
001b7c  210a              MOVS     r1,#0xa
001b7e  48cc              LDR      r0,|L158.7856|
001b80  f7fffffe          BL       uart_putchar
001b84  210a              MOVS     r1,#0xa
001b86  48ca              LDR      r0,|L158.7856|
001b88  f7fffffe          BL       uart_putchar
001b8c  210a              MOVS     r1,#0xa
001b8e  48c8              LDR      r0,|L158.7856|
001b90  f7fffffe          BL       uart_putchar
001b94  210a              MOVS     r1,#0xa
001b96  48c6              LDR      r0,|L158.7856|
001b98  f7fffffe          BL       uart_putchar
001b9c  210a              MOVS     r1,#0xa
001b9e  48c4              LDR      r0,|L158.7856|
001ba0  f7fffffe          BL       uart_putchar
001ba4  210a              MOVS     r1,#0xa
001ba6  48c2              LDR      r0,|L158.7856|
001ba8  f7fffffe          BL       uart_putchar
001bac  210a              MOVS     r1,#0xa
001bae  48c0              LDR      r0,|L158.7856|
001bb0  f7fffffe          BL       uart_putchar
001bb4  210a              MOVS     r1,#0xa
001bb6  48be              LDR      r0,|L158.7856|
001bb8  f7fffffe          BL       uart_putchar
001bbc  210a              MOVS     r1,#0xa
001bbe  48bc              LDR      r0,|L158.7856|
001bc0  f7fffffe          BL       uart_putchar
001bc4  210a              MOVS     r1,#0xa
001bc6  48ba              LDR      r0,|L158.7856|
001bc8  f7fffffe          BL       uart_putchar
001bcc  210a              MOVS     r1,#0xa
001bce  e000              B        |L158.7122|
                  |L158.7120|
001bd0  e228              B        |L158.8228|
                  |L158.7122|
001bd2  48b7              LDR      r0,|L158.7856|
001bd4  f7fffffe          BL       uart_putchar
001bd8  210a              MOVS     r1,#0xa
001bda  48b5              LDR      r0,|L158.7856|
001bdc  f7fffffe          BL       uart_putchar
001be0  210a              MOVS     r1,#0xa
001be2  48b3              LDR      r0,|L158.7856|
001be4  f7fffffe          BL       uart_putchar
001be8  210a              MOVS     r1,#0xa
001bea  48b1              LDR      r0,|L158.7856|
001bec  f7fffffe          BL       uart_putchar
001bf0  210a              MOVS     r1,#0xa
001bf2  48af              LDR      r0,|L158.7856|
001bf4  f7fffffe          BL       uart_putchar
001bf8  210a              MOVS     r1,#0xa
001bfa  48ad              LDR      r0,|L158.7856|
001bfc  f7fffffe          BL       uart_putchar
001c00  210a              MOVS     r1,#0xa
001c02  48ab              LDR      r0,|L158.7856|
001c04  f7fffffe          BL       uart_putchar
001c08  210a              MOVS     r1,#0xa
001c0a  48a9              LDR      r0,|L158.7856|
001c0c  f7fffffe          BL       uart_putchar
001c10  210a              MOVS     r1,#0xa
001c12  48a7              LDR      r0,|L158.7856|
001c14  f7fffffe          BL       uart_putchar
001c18  210a              MOVS     r1,#0xa
001c1a  48a5              LDR      r0,|L158.7856|
001c1c  f7fffffe          BL       uart_putchar
001c20  210a              MOVS     r1,#0xa
001c22  48a3              LDR      r0,|L158.7856|
001c24  f7fffffe          BL       uart_putchar
001c28  210a              MOVS     r1,#0xa
001c2a  48a1              LDR      r0,|L158.7856|
001c2c  f7fffffe          BL       uart_putchar
001c30  210a              MOVS     r1,#0xa
001c32  489f              LDR      r0,|L158.7856|
001c34  f7fffffe          BL       uart_putchar
001c38  210a              MOVS     r1,#0xa
001c3a  489d              LDR      r0,|L158.7856|
001c3c  f7fffffe          BL       uart_putchar
001c40  210a              MOVS     r1,#0xa
001c42  489b              LDR      r0,|L158.7856|
001c44  f7fffffe          BL       uart_putchar
001c48  210a              MOVS     r1,#0xa
001c4a  4899              LDR      r0,|L158.7856|
001c4c  f7fffffe          BL       uart_putchar
001c50  210a              MOVS     r1,#0xa
001c52  4897              LDR      r0,|L158.7856|
001c54  f7fffffe          BL       uart_putchar
001c58  210a              MOVS     r1,#0xa
001c5a  4895              LDR      r0,|L158.7856|
001c5c  f7fffffe          BL       uart_putchar
001c60  210a              MOVS     r1,#0xa
001c62  4893              LDR      r0,|L158.7856|
001c64  f7fffffe          BL       uart_putchar
001c68  210a              MOVS     r1,#0xa
001c6a  4891              LDR      r0,|L158.7856|
001c6c  f7fffffe          BL       uart_putchar
001c70  210a              MOVS     r1,#0xa
001c72  488f              LDR      r0,|L158.7856|
001c74  f7fffffe          BL       uart_putchar
001c78  210a              MOVS     r1,#0xa
001c7a  488d              LDR      r0,|L158.7856|
001c7c  f7fffffe          BL       uart_putchar
001c80  210a              MOVS     r1,#0xa
001c82  488b              LDR      r0,|L158.7856|
001c84  f7fffffe          BL       uart_putchar
001c88  210a              MOVS     r1,#0xa
001c8a  4889              LDR      r0,|L158.7856|
001c8c  f7fffffe          BL       uart_putchar
001c90  210a              MOVS     r1,#0xa
001c92  4887              LDR      r0,|L158.7856|
001c94  f7fffffe          BL       uart_putchar
001c98  210a              MOVS     r1,#0xa
001c9a  4885              LDR      r0,|L158.7856|
001c9c  f7fffffe          BL       uart_putchar
001ca0  210a              MOVS     r1,#0xa
001ca2  4883              LDR      r0,|L158.7856|
001ca4  f7fffffe          BL       uart_putchar
001ca8  210a              MOVS     r1,#0xa
001caa  4881              LDR      r0,|L158.7856|
001cac  f7fffffe          BL       uart_putchar
001cb0  210a              MOVS     r1,#0xa
001cb2  487f              LDR      r0,|L158.7856|
001cb4  f7fffffe          BL       uart_putchar
001cb8  210a              MOVS     r1,#0xa
001cba  487d              LDR      r0,|L158.7856|
001cbc  f7fffffe          BL       uart_putchar
001cc0  210a              MOVS     r1,#0xa
001cc2  487b              LDR      r0,|L158.7856|
001cc4  f7fffffe          BL       uart_putchar
001cc8  210a              MOVS     r1,#0xa
001cca  4879              LDR      r0,|L158.7856|
001ccc  f7fffffe          BL       uart_putchar
001cd0  210a              MOVS     r1,#0xa
001cd2  4877              LDR      r0,|L158.7856|
001cd4  f7fffffe          BL       uart_putchar
001cd8  210a              MOVS     r1,#0xa
001cda  4875              LDR      r0,|L158.7856|
001cdc  f7fffffe          BL       uart_putchar
001ce0  210a              MOVS     r1,#0xa
001ce2  4873              LDR      r0,|L158.7856|
001ce4  f7fffffe          BL       uart_putchar
001ce8  210a              MOVS     r1,#0xa
001cea  4871              LDR      r0,|L158.7856|
001cec  f7fffffe          BL       uart_putchar
001cf0  210a              MOVS     r1,#0xa
001cf2  486f              LDR      r0,|L158.7856|
001cf4  f7fffffe          BL       uart_putchar
001cf8  210a              MOVS     r1,#0xa
001cfa  486d              LDR      r0,|L158.7856|
001cfc  f7fffffe          BL       uart_putchar
001d00  210a              MOVS     r1,#0xa
001d02  486b              LDR      r0,|L158.7856|
001d04  f7fffffe          BL       uart_putchar
001d08  210a              MOVS     r1,#0xa
001d0a  4869              LDR      r0,|L158.7856|
001d0c  f7fffffe          BL       uart_putchar
001d10  210a              MOVS     r1,#0xa
001d12  4867              LDR      r0,|L158.7856|
001d14  f7fffffe          BL       uart_putchar
001d18  210a              MOVS     r1,#0xa
001d1a  4865              LDR      r0,|L158.7856|
001d1c  f7fffffe          BL       uart_putchar
001d20  210a              MOVS     r1,#0xa
001d22  4863              LDR      r0,|L158.7856|
001d24  f7fffffe          BL       uart_putchar
001d28  210a              MOVS     r1,#0xa
001d2a  4861              LDR      r0,|L158.7856|
001d2c  f7fffffe          BL       uart_putchar
001d30  210a              MOVS     r1,#0xa
001d32  485f              LDR      r0,|L158.7856|
001d34  f7fffffe          BL       uart_putchar
;;;2290   									//memset(data,0,1000);
;;;2291   														//timer counts to wait for characters in uart 1 									
;;;2292   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001d38  bf00              NOP      
                  |L158.7482|
001d3a  4969              LDR      r1,|L158.7904|
001d3c  485e              LDR      r0,|L158.7864|
001d3e  f7fffffe          BL       strstr
001d42  2800              CMP      r0,#0
001d44  d109              BNE      |L158.7514|
001d46  4961              LDR      r1,|L158.7884|
001d48  485b              LDR      r0,|L158.7864|
001d4a  f7fffffe          BL       strstr
001d4e  2800              CMP      r0,#0
001d50  d103              BNE      |L158.7514|
001d52  4856              LDR      r0,|L158.7852|
001d54  6800              LDR      r0,[r0,#0]  ; tout
001d56  2805              CMP      r0,#5
001d58  ddef              BLE      |L158.7482|
                  |L158.7514|
;;;2293   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2294   									}
;;;2295   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001d5a  f7fffffe          BL       clear
;;;2296   									//clear();
;;;2297   									memset(data,0,strlen(data));
001d5e  4858              LDR      r0,|L158.7872|
001d60  f7fffffe          BL       strlen
001d64  4604              MOV      r4,r0
001d66  4621              MOV      r1,r4
001d68  4855              LDR      r0,|L158.7872|
001d6a  f7fffffe          BL       __aeabi_memclr
;;;2298   									clear();
001d6e  f7fffffe          BL       clear
                  |L158.7538|
;;;2299   
;;;2300   								
;;;2301   break;
001d72  e165              B        |L158.8256|
                  |L158.7540|
;;;2302   //log_it();
;;;2303   }
;;;2304   			
;;;2305   			
;;;2306   			
;;;2307   			
;;;2308   			
;;;2309   			}
;;;2310   			else
;;;2311   			{
;;;2312   				
;;;2313   				
;;;2314   				
;;;2315   	delay(100);
001d74  2064              MOVS     r0,#0x64
001d76  f7fffffe          BL       delay
;;;2316   		clear();//memset(uart_string_gsm,0,5000);
001d7a  f7fffffe          BL       clear
;;;2317   	
;;;2318   	memset(at_,0,100);
001d7e  2164              MOVS     r1,#0x64
001d80  484e              LDR      r0,|L158.7868|
001d82  f7fffffe          BL       __aeabi_memclr
;;;2319   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001d86  484e              LDR      r0,|L158.7872|
001d88  f7fffffe          BL       strlen
001d8c  1c44              ADDS     r4,r0,#1
001d8e  4623              MOV      r3,r4
001d90  4a4c              LDR      r2,|L158.7876|
001d92  494d              LDR      r1,|L158.7880|
001d94  4849              LDR      r0,|L158.7868|
001d96  f7fffffe          BL       __2sprintf
;;;2320   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001d9a  2005              MOVS     r0,#5
001d9c  4b4b              LDR      r3,|L158.7884|
001d9e  4a4c              LDR      r2,|L158.7888|
001da0  494c              LDR      r1,|L158.7892|
001da2  9000              STR      r0,[sp,#0]
001da4  4845              LDR      r0,|L158.7868|
001da6  f7fffffe          BL       send_SD
;;;2321   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2322   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2323   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2324   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2325   //	}
;;;2326   	
;;;2327   clear();	
001daa  f7fffffe          BL       clear
;;;2328   									k2=0;									//string array counter for uart 1
001dae  2000              MOVS     r0,#0
001db0  4949              LDR      r1,|L158.7896|
001db2  6008              STR      r0,[r1,#0]  ; k2
;;;2329   									tout=0;	
001db4  493d              LDR      r1,|L158.7852|
001db6  6008              STR      r0,[r1,#0]  ; tout
;;;2330   		for(k=0;k<strlen(data);k++)
001db8  4948              LDR      r1,|L158.7900|
001dba  6008              STR      r0,[r1,#0]  ; k
001dbc  e00b              B        |L158.7638|
                  |L158.7614|
;;;2331   		{
;;;2332   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001dbe  4840              LDR      r0,|L158.7872|
001dc0  4a46              LDR      r2,|L158.7900|
001dc2  6812              LDR      r2,[r2,#0]  ; k
001dc4  5c81              LDRB     r1,[r0,r2]
001dc6  483a              LDR      r0,|L158.7856|
001dc8  f7fffffe          BL       uart_putchar
001dcc  4843              LDR      r0,|L158.7900|
001dce  6800              LDR      r0,[r0,#0]            ;2330  ; k
001dd0  1c40              ADDS     r0,r0,#1              ;2330
001dd2  4942              LDR      r1,|L158.7900|
001dd4  6008              STR      r0,[r1,#0]            ;2330  ; k
                  |L158.7638|
001dd6  483a              LDR      r0,|L158.7872|
001dd8  f7fffffe          BL       strlen
001ddc  493f              LDR      r1,|L158.7900|
001dde  6809              LDR      r1,[r1,#0]            ;2330  ; k
001de0  4288              CMP      r0,r1                 ;2330
001de2  d8ec              BHI      |L158.7614|
;;;2333   		}	
;;;2334   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001de4  210a              MOVS     r1,#0xa
001de6  4832              LDR      r0,|L158.7856|
001de8  f7fffffe          BL       uart_putchar
001dec  210a              MOVS     r1,#0xa
001dee  4830              LDR      r0,|L158.7856|
001df0  f7fffffe          BL       uart_putchar
001df4  210a              MOVS     r1,#0xa
001df6  482e              LDR      r0,|L158.7856|
001df8  f7fffffe          BL       uart_putchar
001dfc  210a              MOVS     r1,#0xa
001dfe  482c              LDR      r0,|L158.7856|
001e00  f7fffffe          BL       uart_putchar
001e04  210a              MOVS     r1,#0xa
001e06  482a              LDR      r0,|L158.7856|
001e08  f7fffffe          BL       uart_putchar
001e0c  210a              MOVS     r1,#0xa
001e0e  4828              LDR      r0,|L158.7856|
001e10  f7fffffe          BL       uart_putchar
001e14  210a              MOVS     r1,#0xa
001e16  4826              LDR      r0,|L158.7856|
001e18  f7fffffe          BL       uart_putchar
001e1c  210a              MOVS     r1,#0xa
001e1e  4824              LDR      r0,|L158.7856|
001e20  f7fffffe          BL       uart_putchar
001e24  210a              MOVS     r1,#0xa
001e26  4822              LDR      r0,|L158.7856|
001e28  f7fffffe          BL       uart_putchar
001e2c  210a              MOVS     r1,#0xa
001e2e  4820              LDR      r0,|L158.7856|
001e30  f7fffffe          BL       uart_putchar
001e34  210a              MOVS     r1,#0xa
001e36  481e              LDR      r0,|L158.7856|
001e38  f7fffffe          BL       uart_putchar
001e3c  210a              MOVS     r1,#0xa
001e3e  481c              LDR      r0,|L158.7856|
001e40  f7fffffe          BL       uart_putchar
001e44  210a              MOVS     r1,#0xa
001e46  481a              LDR      r0,|L158.7856|
001e48  f7fffffe          BL       uart_putchar
001e4c  210a              MOVS     r1,#0xa
001e4e  4818              LDR      r0,|L158.7856|
001e50  f7fffffe          BL       uart_putchar
001e54  210a              MOVS     r1,#0xa
001e56  4816              LDR      r0,|L158.7856|
001e58  f7fffffe          BL       uart_putchar
001e5c  210a              MOVS     r1,#0xa
001e5e  4814              LDR      r0,|L158.7856|
001e60  f7fffffe          BL       uart_putchar
001e64  210a              MOVS     r1,#0xa
001e66  4812              LDR      r0,|L158.7856|
001e68  f7fffffe          BL       uart_putchar
001e6c  210a              MOVS     r1,#0xa
001e6e  4810              LDR      r0,|L158.7856|
001e70  f7fffffe          BL       uart_putchar
001e74  210a              MOVS     r1,#0xa
001e76  480e              LDR      r0,|L158.7856|
001e78  f7fffffe          BL       uart_putchar
001e7c  210a              MOVS     r1,#0xa
001e7e  480c              LDR      r0,|L158.7856|
001e80  f7fffffe          BL       uart_putchar
001e84  210a              MOVS     r1,#0xa
001e86  480a              LDR      r0,|L158.7856|
001e88  f7fffffe          BL       uart_putchar
001e8c  210a              MOVS     r1,#0xa
001e8e  4808              LDR      r0,|L158.7856|
001e90  f7fffffe          BL       uart_putchar
001e94  210a              MOVS     r1,#0xa
001e96  4806              LDR      r0,|L158.7856|
001e98  f7fffffe          BL       uart_putchar
001e9c  210a              MOVS     r1,#0xa
001e9e  4804              LDR      r0,|L158.7856|
001ea0  f7fffffe          BL       uart_putchar
001ea4  210a              MOVS     r1,#0xa
001ea6  4802              LDR      r0,|L158.7856|
001ea8  e01c              B        |L158.7908|
001eaa  0000              DCW      0x0000
                  |L158.7852|
                          DCD      tout
                  |L158.7856|
                          DCD      0x4006b000
                  |L158.7860|
                          DCD      ||.conststring||+0x694
                  |L158.7864|
                          DCD      uart_string_gsm
                  |L158.7868|
                          DCD      at_
                  |L158.7872|
                          DCD      data
                  |L158.7876|
                          DCD      drive
                  |L158.7880|
                          DCD      ||.conststring||+0x4bc
                  |L158.7884|
                          DCD      ||.conststring||+0xe0
                  |L158.7888|
                          DCD      ||.conststring||+0x18
                  |L158.7892|
                          DCD      ||.conststring||+0x20
                  |L158.7896|
                          DCD      ||k2||
                  |L158.7900|
                          DCD      k
                  |L158.7904|
                          DCD      ||.conststring||+0x70
                  |L158.7908|
001ee4  f7fffffe          BL       uart_putchar
001ee8  210a              MOVS     r1,#0xa
001eea  486b              LDR      r0,|L158.8344|
001eec  f7fffffe          BL       uart_putchar
001ef0  210a              MOVS     r1,#0xa
001ef2  4869              LDR      r0,|L158.8344|
001ef4  f7fffffe          BL       uart_putchar
001ef8  210a              MOVS     r1,#0xa
001efa  4867              LDR      r0,|L158.8344|
001efc  f7fffffe          BL       uart_putchar
001f00  210a              MOVS     r1,#0xa
001f02  4865              LDR      r0,|L158.8344|
001f04  f7fffffe          BL       uart_putchar
001f08  210a              MOVS     r1,#0xa
001f0a  4863              LDR      r0,|L158.8344|
001f0c  f7fffffe          BL       uart_putchar
001f10  210a              MOVS     r1,#0xa
001f12  4861              LDR      r0,|L158.8344|
001f14  f7fffffe          BL       uart_putchar
001f18  210a              MOVS     r1,#0xa
001f1a  485f              LDR      r0,|L158.8344|
001f1c  f7fffffe          BL       uart_putchar
001f20  210a              MOVS     r1,#0xa
001f22  485d              LDR      r0,|L158.8344|
001f24  f7fffffe          BL       uart_putchar
001f28  210a              MOVS     r1,#0xa
001f2a  485b              LDR      r0,|L158.8344|
001f2c  f7fffffe          BL       uart_putchar
001f30  210a              MOVS     r1,#0xa
001f32  4859              LDR      r0,|L158.8344|
001f34  f7fffffe          BL       uart_putchar
001f38  210a              MOVS     r1,#0xa
001f3a  4857              LDR      r0,|L158.8344|
001f3c  f7fffffe          BL       uart_putchar
001f40  210a              MOVS     r1,#0xa
001f42  4855              LDR      r0,|L158.8344|
001f44  f7fffffe          BL       uart_putchar
001f48  210a              MOVS     r1,#0xa
001f4a  4853              LDR      r0,|L158.8344|
001f4c  f7fffffe          BL       uart_putchar
001f50  210a              MOVS     r1,#0xa
001f52  4851              LDR      r0,|L158.8344|
001f54  f7fffffe          BL       uart_putchar
001f58  210a              MOVS     r1,#0xa
001f5a  484f              LDR      r0,|L158.8344|
001f5c  f7fffffe          BL       uart_putchar
001f60  210a              MOVS     r1,#0xa
001f62  484d              LDR      r0,|L158.8344|
001f64  f7fffffe          BL       uart_putchar
001f68  210a              MOVS     r1,#0xa
001f6a  484b              LDR      r0,|L158.8344|
001f6c  f7fffffe          BL       uart_putchar
001f70  210a              MOVS     r1,#0xa
001f72  4849              LDR      r0,|L158.8344|
001f74  f7fffffe          BL       uart_putchar
001f78  210a              MOVS     r1,#0xa
001f7a  4847              LDR      r0,|L158.8344|
001f7c  f7fffffe          BL       uart_putchar
001f80  210a              MOVS     r1,#0xa
001f82  4845              LDR      r0,|L158.8344|
001f84  f7fffffe          BL       uart_putchar
001f88  210a              MOVS     r1,#0xa
001f8a  4843              LDR      r0,|L158.8344|
001f8c  f7fffffe          BL       uart_putchar
001f90  210a              MOVS     r1,#0xa
001f92  4841              LDR      r0,|L158.8344|
001f94  f7fffffe          BL       uart_putchar
001f98  210a              MOVS     r1,#0xa
001f9a  483f              LDR      r0,|L158.8344|
001f9c  f7fffffe          BL       uart_putchar
001fa0  210a              MOVS     r1,#0xa
001fa2  483d              LDR      r0,|L158.8344|
001fa4  f7fffffe          BL       uart_putchar
001fa8  210a              MOVS     r1,#0xa
001faa  483b              LDR      r0,|L158.8344|
001fac  f7fffffe          BL       uart_putchar
001fb0  210a              MOVS     r1,#0xa
001fb2  4839              LDR      r0,|L158.8344|
001fb4  f7fffffe          BL       uart_putchar
001fb8  210a              MOVS     r1,#0xa
001fba  4837              LDR      r0,|L158.8344|
001fbc  f7fffffe          BL       uart_putchar
001fc0  210a              MOVS     r1,#0xa
001fc2  4835              LDR      r0,|L158.8344|
001fc4  f7fffffe          BL       uart_putchar
001fc8  210a              MOVS     r1,#0xa
001fca  4833              LDR      r0,|L158.8344|
001fcc  f7fffffe          BL       uart_putchar
001fd0  210a              MOVS     r1,#0xa
001fd2  4831              LDR      r0,|L158.8344|
001fd4  f7fffffe          BL       uart_putchar
001fd8  210a              MOVS     r1,#0xa
001fda  482f              LDR      r0,|L158.8344|
001fdc  f7fffffe          BL       uart_putchar
001fe0  210a              MOVS     r1,#0xa
001fe2  482d              LDR      r0,|L158.8344|
001fe4  f7fffffe          BL       uart_putchar
;;;2335   									//memset(data,0,1000);
;;;2336   														//timer counts to wait for characters in uart 1 									
;;;2337   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001fe8  bf00              NOP      
                  |L158.8170|
001fea  492c              LDR      r1,|L158.8348|
001fec  482c              LDR      r0,|L158.8352|
001fee  f7fffffe          BL       strstr
001ff2  2800              CMP      r0,#0
001ff4  d109              BNE      |L158.8202|
001ff6  492b              LDR      r1,|L158.8356|
001ff8  4829              LDR      r0,|L158.8352|
001ffa  f7fffffe          BL       strstr
001ffe  2800              CMP      r0,#0
002000  d103              BNE      |L158.8202|
002002  4829              LDR      r0,|L158.8360|
002004  6800              LDR      r0,[r0,#0]  ; tout
002006  2805              CMP      r0,#5
002008  ddef              BLE      |L158.8170|
                  |L158.8202|
;;;2338   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2339   									}
;;;2340   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00200a  f7fffffe          BL       clear
;;;2341   									//clear();
;;;2342   									memset(data,0,strlen(data));
00200e  4827              LDR      r0,|L158.8364|
002010  f7fffffe          BL       strlen
002014  4604              MOV      r4,r0
002016  4621              MOV      r1,r4
002018  4824              LDR      r0,|L158.8364|
00201a  f7fffffe          BL       __aeabi_memclr
;;;2343   									clear();
00201e  f7fffffe          BL       clear
;;;2344   
;;;2345   								
;;;2346   				
;;;2347   				//log_it();
;;;2348   			
;;;2349   			
;;;2350   			
;;;2351   			
;;;2352   			break;
002022  e00d              B        |L158.8256|
                  |L158.8228|
;;;2353   			}
;;;2354   //			memset(at_,0,100);
;;;2355   //			sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
;;;2356   //			send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2357   //			parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
;;;2358   //			fsz=stof(fsize);//7523.7412
;;;2359   //			times=(fsz/1256)+1;
;;;2360   		}	
;;;2361   	
;;;2362   //
;;;2363   if(rtcticks2>=1500){break;}		
002024  4822              LDR      r0,|L158.8368|
002026  6800              LDR      r0,[r0,#0]  ; rtcticks2
002028  4922              LDR      r1,|L158.8372|
00202a  4288              CMP      r0,r1
00202c  db00              BLT      |L158.8240|
00202e  e007              B        |L158.8256|
                  |L158.8240|
002030  4821              LDR      r0,|L158.8376|
002032  6800              LDR      r0,[r0,#0]            ;1821  ; k5
002034  4921              LDR      r1,|L158.8380|
002036  6809              LDR      r1,[r1,#0]            ;1821  ; times
002038  4288              CMP      r0,r1                 ;1821
00203a  dc01              BGT      |L158.8256|
00203c  f7fef81f          BL       |L158.126|
                  |L158.8256|
002040  bf00              NOP                            ;1822
;;;2364   }
;;;2365   
;;;2366   if(((k5>=times) && log0!=1)){
002042  481d              LDR      r0,|L158.8376|
002044  6800              LDR      r0,[r0,#0]  ; k5
002046  491d              LDR      r1,|L158.8380|
002048  6809              LDR      r1,[r1,#0]  ; times
00204a  4288              CMP      r0,r1
00204c  db1e              BLT      |L158.8332|
00204e  481c              LDR      r0,|L158.8384|
002050  6800              LDR      r0,[r0,#0]  ; log0
002052  2801              CMP      r0,#1
002054  d01a              BEQ      |L158.8332|
;;;2367   	cursorvaluepr=0;times=-2;k5=0;
002056  2000              MOVS     r0,#0
002058  491a              LDR      r1,|L158.8388|
00205a  6008              STR      r0,[r1,#0]  ; cursorvaluepr
00205c  1e80              SUBS     r0,r0,#2
00205e  4917              LDR      r1,|L158.8380|
002060  6008              STR      r0,[r1,#0]  ; times
002062  2000              MOVS     r0,#0
002064  4914              LDR      r1,|L158.8376|
002066  6008              STR      r0,[r1,#0]  ; k5
;;;2368   	memset(at_,0,100);
002068  2164              MOVS     r1,#0x64
00206a  4817              LDR      r0,|L158.8392|
00206c  f7fffffe          BL       __aeabi_memclr
;;;2369   	sprintf(at_,"\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
002070  4a16              LDR      r2,|L158.8396|
002072  4917              LDR      r1,|L158.8400|
002074  4814              LDR      r0,|L158.8392|
002076  f7fffffe          BL       __2sprintf
;;;2370   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00207a  4816              LDR      r0,|L158.8404|
00207c  6800              LDR      r0,[r0,#0]  ; tmeout
00207e  4b16              LDR      r3,|L158.8408|
002080  4a16              LDR      r2,|L158.8412|
002082  4917              LDR      r1,|L158.8416|
002084  9000              STR      r0,[sp,#0]
002086  4810              LDR      r0,|L158.8392|
002088  f7fffffe          BL       send_GSM
                  |L158.8332|
;;;2371   
;;;2372   }		
;;;2373   
;;;2374   int_erval=temp;
00208c  4815              LDR      r0,|L158.8420|
00208e  6800              LDR      r0,[r0,#0]  ; temp
002090  4915              LDR      r1,|L158.8424|
002092  6008              STR      r0,[r1,#0]  ; int_erval
;;;2375   }
002094  bd7c              POP      {r2-r6,pc}
;;;2376   
                          ENDP

002096  0000              DCW      0x0000
                  |L158.8344|
                          DCD      0x4006b000
                  |L158.8348|
                          DCD      ||.conststring||+0x70
                  |L158.8352|
                          DCD      uart_string_gsm
                  |L158.8356|
                          DCD      ||.conststring||+0xe0
                  |L158.8360|
                          DCD      tout
                  |L158.8364|
                          DCD      data
                  |L158.8368|
                          DCD      rtcticks2
                  |L158.8372|
                          DCD      0x000005dc
                  |L158.8376|
                          DCD      ||k5||
                  |L158.8380|
                          DCD      times
                  |L158.8384|
                          DCD      log0
                  |L158.8388|
                          DCD      cursorvaluepr
                  |L158.8392|
                          DCD      at_
                  |L158.8396|
                          DCD      drive
                  |L158.8400|
                          DCD      ||.conststring||+0x79c
                  |L158.8404|
                          DCD      tmeout
                  |L158.8408|
                          DCD      ||.conststring||+0x10
                  |L158.8412|
                          DCD      ||.conststring||+0x18
                  |L158.8416|
                          DCD      ||.conststring||+0x2c
                  |L158.8420|
                          DCD      temp
                  |L158.8424|
                          DCD      int_erval

                          AREA ||i.LED_init||, COMGROUP=LED_init, CODE, READONLY, ALIGN=2

                  LED_init PROC
;;;26     
;;;27     __inline void LED_init(void){
000000  483f              LDR      r0,|L165.256|
;;;28       
;;;29         SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK ;      //Turn on clock to PORTE & D module
000002  6b80              LDR      r0,[r0,#0x38]
000004  210f              MOVS     r1,#0xf
000006  0289              LSLS     r1,r1,#10
000008  4308              ORRS     r0,r0,r1
00000a  493d              LDR      r1,|L165.256|
00000c  6388              STR      r0,[r1,#0x38]
;;;30     
;;;31     
;;;32     	
;;;33     
;;;34     		PORTE_PCR29 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
00000e  1588              ASRS     r0,r1,#22
000010  493c              LDR      r1,|L165.260|
000012  6348              STR      r0,[r1,#0x34]
;;;35       	PORTD_PCR7 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000014  493c              LDR      r1,|L165.264|
000016  61c8              STR      r0,[r1,#0x1c]
;;;36         PORTE_PCR31 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000018  493a              LDR      r1,|L165.260|
00001a  63c8              STR      r0,[r1,#0x3c]
;;;37         PORTD_PCR5 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode
00001c  493a              LDR      r1,|L165.264|
00001e  6148              STR      r0,[r1,#0x14]
;;;38     	
;;;39         PORTC_PCR5 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000020  493a              LDR      r1,|L165.268|
000022  6148              STR      r0,[r1,#0x14]
;;;40         PORTC_PCR6 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000024  6188              STR      r0,[r1,#0x18]
;;;41         PORTC_PCR7 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	
000026  61c8              STR      r0,[r1,#0x1c]
;;;42         PORTC_PCR8 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	    
000028  6208              STR      r0,[r1,#0x20]
;;;43         PORTB_PCR2 = PORT_PCR_MUX(0x1);             //Set the PTB2 pin multiplexer to GPIO mode	   
00002a  4939              LDR      r1,|L165.272|
00002c  6088              STR      r0,[r1,#8]
;;;44     
;;;45     	
;;;46     	PORTB_PCR2 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
00002e  1c80              ADDS     r0,r0,#2
000030  6088              STR      r0,[r1,#8]
;;;47     		
;;;48     	PORTB_PCR1 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000032  6048              STR      r0,[r1,#4]
;;;49     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;50     	PTB->PDDR &= ~MASK(ADCIGN);
000034  4837              LDR      r0,|L165.276|
000036  6940              LDR      r0,[r0,#0x14]
000038  2102              MOVS     r1,#2
00003a  4388              BICS     r0,r0,r1
00003c  4935              LDR      r1,|L165.276|
00003e  6148              STR      r0,[r1,#0x14]
;;;51     	GPIOD_PDDR |= (1<<7);
000040  4834              LDR      r0,|L165.276|
000042  3080              ADDS     r0,r0,#0x80
000044  6940              LDR      r0,[r0,#0x14]
000046  2180              MOVS     r1,#0x80
000048  4308              ORRS     r0,r0,r1
00004a  4932              LDR      r1,|L165.276|
00004c  3180              ADDS     r1,r1,#0x80
00004e  6148              STR      r0,[r1,#0x14]
;;;52     
;;;53     	PORTB_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000050  20ff              MOVS     r0,#0xff
000052  3003              ADDS     r0,#3
000054  492e              LDR      r1,|L165.272|
000056  6008              STR      r0,[r1,#0]
;;;54     	PORTC_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; //		GPIOB_PDDR = 0;
000058  1c40              ADDS     r0,r0,#1
00005a  492c              LDR      r1,|L165.268|
00005c  6008              STR      r0,[r1,#0]
;;;55     
;;;56     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;57     	//PTB->PDDR &= ~MASK(ADCIGN);
;;;58     //	GPIOD_PDDR |= (1<<7);
;;;59     
;;;60     	  
;;;61         GPIOE_PSOR |= RED_SHIFT | GREEN_SHIFT;      //Set the initial output state to high
00005e  482d              LDR      r0,|L165.276|
000060  30c0              ADDS     r0,r0,#0xc0
000062  6840              LDR      r0,[r0,#4]
000064  2105              MOVS     r1,#5
000066  0749              LSLS     r1,r1,#29
000068  4308              ORRS     r0,r0,r1
00006a  492a              LDR      r1,|L165.276|
00006c  31c0              ADDS     r1,r1,#0xc0
00006e  6048              STR      r0,[r1,#4]
;;;62         GPIOD_PSOR |= BLUE_SHIFT;               	//Set the inital output state to high
000070  4828              LDR      r0,|L165.276|
000072  3080              ADDS     r0,r0,#0x80
000074  6840              LDR      r0,[r0,#4]
000076  2120              MOVS     r1,#0x20
000078  4308              ORRS     r0,r0,r1
00007a  4926              LDR      r1,|L165.276|
00007c  3180              ADDS     r1,r1,#0x80
00007e  6048              STR      r0,[r1,#4]
;;;63     		GPIOC_PSOR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT; 
000080  4824              LDR      r0,|L165.276|
000082  3040              ADDS     r0,r0,#0x40
000084  6840              LDR      r0,[r0,#4]
000086  21ff              MOVS     r1,#0xff
000088  31c1              ADDS     r1,r1,#0xc1
00008a  4308              ORRS     r0,r0,r1
00008c  4921              LDR      r1,|L165.276|
00008e  3140              ADDS     r1,r1,#0x40
000090  6048              STR      r0,[r1,#4]
;;;64     		GPIOC_PSOR |= RESET_SHIFT;
000092  4608              MOV      r0,r1
000094  6840              LDR      r0,[r0,#4]
000096  2120              MOVS     r1,#0x20
000098  4308              ORRS     r0,r0,r1
00009a  491e              LDR      r1,|L165.276|
00009c  3140              ADDS     r1,r1,#0x40
00009e  6048              STR      r0,[r1,#4]
;;;65         
;;;66         GPIOE_PDDR |= RED_SHIFT | GREEN_SHIFT;  //Set the pin's direction to output
0000a0  481c              LDR      r0,|L165.276|
0000a2  30c0              ADDS     r0,r0,#0xc0
0000a4  6940              LDR      r0,[r0,#0x14]
0000a6  2105              MOVS     r1,#5
0000a8  0749              LSLS     r1,r1,#29
0000aa  4308              ORRS     r0,r0,r1
0000ac  4919              LDR      r1,|L165.276|
0000ae  31c0              ADDS     r1,r1,#0xc0
0000b0  6148              STR      r0,[r1,#0x14]
;;;67         GPIOD_PDDR |= BLUE_SHIFT;               //Set the pin's direction to output
0000b2  4818              LDR      r0,|L165.276|
0000b4  3080              ADDS     r0,r0,#0x80
0000b6  6940              LDR      r0,[r0,#0x14]
0000b8  2120              MOVS     r1,#0x20
0000ba  4308              ORRS     r0,r0,r1
0000bc  4915              LDR      r1,|L165.276|
0000be  3180              ADDS     r1,r1,#0x80
0000c0  6148              STR      r0,[r1,#0x14]
;;;68     		GPIOC_PDDR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT | RESET_SHIFT; 
0000c2  4814              LDR      r0,|L165.276|
0000c4  3040              ADDS     r0,r0,#0x40
0000c6  6940              LDR      r0,[r0,#0x14]
0000c8  21ff              MOVS     r1,#0xff
0000ca  31e1              ADDS     r1,r1,#0xe1
0000cc  4308              ORRS     r0,r0,r1
0000ce  4911              LDR      r1,|L165.276|
0000d0  3140              ADDS     r1,r1,#0x40
0000d2  6148              STR      r0,[r1,#0x14]
;;;69         
;;;70         RED_ON;		//Turn off RED LED
0000d4  0588              LSLS     r0,r1,#22
0000d6  490f              LDR      r1,|L165.276|
0000d8  31c0              ADDS     r1,r1,#0xc0
0000da  6088              STR      r0,[r1,#8]
;;;71         GREEN_ON;	//Turn off GREEN LED
0000dc  0080              LSLS     r0,r0,#2
0000de  6088              STR      r0,[r1,#8]
;;;72         BLUE_ON;		//Turn off BLUE LED
0000e0  2020              MOVS     r0,#0x20
0000e2  490c              LDR      r1,|L165.276|
0000e4  3180              ADDS     r1,r1,#0x80
0000e6  6088              STR      r0,[r1,#8]
;;;73     		REDBAT_ON;
0000e8  2040              MOVS     r0,#0x40
0000ea  490a              LDR      r1,|L165.276|
0000ec  3140              ADDS     r1,r1,#0x40
0000ee  6088              STR      r0,[r1,#8]
;;;74     		GREENBAT_ON;
0000f0  2080              MOVS     r0,#0x80
0000f2  6088              STR      r0,[r1,#8]
;;;75     		BLUEBAT_ON;
0000f4  0040              LSLS     r0,r0,#1
0000f6  6088              STR      r0,[r1,#8]
;;;76     		RESET_ON;
0000f8  2020              MOVS     r0,#0x20
0000fa  6048              STR      r0,[r1,#4]
;;;77     		
;;;78     	
;;;79     }
0000fc  4770              BX       lr
;;;80     
                          ENDP

0000fe  0000              DCW      0x0000
                  |L165.256|
                          DCD      0x40048000
                  |L165.260|
                          DCD      0x4004d040
                  |L165.264|
                          DCD      0x4004c000
                  |L165.268|
                          DCD      0x4004b000
                  |L165.272|
                          DCD      0x4004a000
                  |L165.276|
                          DCD      0x400ff040

                          AREA ||i.ignstatoff||, COMGROUP=ignstatoff, CODE, READONLY, ALIGN=2

                  ignstatoff PROC
;;;1278   }	
;;;1279   __inline void ignstatoff(){
000000  b508              PUSH     {r3,lr}
;;;1280   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L172.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L172.64|
000008  4a0e              LDR      r2,|L172.68|
00000a  490f              LDR      r1,|L172.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L172.76|
000010  f7fffffe          BL       send_GSM
;;;1281   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L172.64|
000018  4a0a              LDR      r2,|L172.68|
00001a  490d              LDR      r1,|L172.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L172.84|
000020  f7fffffe          BL       send_GSM
;;;1282   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1283   send_GSM("\nIOFF\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L172.64|
00002e  4a05              LDR      r2,|L172.68|
000030  4909              LDR      r1,|L172.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L172.92|
000036  f7fffffe          BL       send_GSM
;;;1284   
;;;1285   
;;;1286   }		
00003a  bd08              POP      {r3,pc}
;;;1287   
                          ENDP

                  |L172.60|
                          DCD      tmeout
                  |L172.64|
                          DCD      ||.conststring||+0x10
                  |L172.68|
                          DCD      ||.conststring||+0x18
                  |L172.72|
                          DCD      ||.conststring||+0x2c
                  |L172.76|
                          DCD      ||.conststring||+0x30
                  |L172.80|
                          DCD      ||.conststring||+0x20
                  |L172.84|
                          DCD      ||.conststring||+0x4c
                  |L172.88|
                          DCD      ||.conststring||+0x70
                  |L172.92|
                          DCD      ||.conststring||+0x7b8

                          AREA ||i.clear2||, COMGROUP=clear2, CODE, READONLY, ALIGN=2

                  clear2 PROC
;;;1425   
;;;1426   __inline void clear2()
000000  4803              LDR      r0,|L178.16|
;;;1427   {
;;;1428   //    if (UART_S1_REG(UART2_BASE_PTR) & UART_S1_OR_MASK)
;;;1429   //    {
;;;1430   //      temp = UART_D_REG(UART2_BASE_PTR);
;;;1431   //    }
;;;1432   
;;;1433   	UART_S1_REG(UART2_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000002  7900              LDRB     r0,[r0,#4]
000004  2118              MOVS     r1,#0x18
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L178.16|
00000a  7108              STRB     r0,[r1,#4]
;;;1434   }	
00000c  4770              BX       lr
;;;1435   
                          ENDP

00000e  0000              DCW      0x0000
                  |L178.16|
                          DCD      0x4006c000

                          AREA ||i.ignread||, COMGROUP=ignread, CODE, READONLY, ALIGN=2

                  ignread PROC
;;;1288   
;;;1289   __inline void ignread(){
000000  b508              PUSH     {r3,lr}
;;;1290   memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4813              LDR      r0,|L184.84|
000006  f7fffffe          BL       __aeabi_memclr
;;;1291   		sprintf(at_, "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n");		
00000a  4913              LDR      r1,|L184.88|
00000c  4811              LDR      r0,|L184.84|
00000e  f7fffffe          BL       __2sprintf
;;;1292   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b11              LDR      r3,|L184.92|
000016  4a12              LDR      r2,|L184.96|
000018  4912              LDR      r1,|L184.100|
00001a  9000              STR      r0,[sp,#0]
00001c  480d              LDR      r0,|L184.84|
00001e  f7fffffe          BL       send_GSM
;;;1293   if(strstr(uart_string_gsm,"ION")){IGNITION_ON;FUEL_ON;}
000022  4911              LDR      r1,|L184.104|
000024  4811              LDR      r0,|L184.108|
000026  f7fffffe          BL       strstr
00002a  2800              CMP      r0,#0
00002c  d005              BEQ      |L184.58|
00002e  2002              MOVS     r0,#2
000030  490f              LDR      r1,|L184.112|
000032  6088              STR      r0,[r1,#8]
000034  2004              MOVS     r0,#4
000036  6088              STR      r0,[r1,#8]
000038  e00a              B        |L184.80|
                  |L184.58|
;;;1294   else if(strstr(uart_string_gsm,"IOFF")){IGNITION_OFF;FUEL_OFF;}
00003a  490e              LDR      r1,|L184.116|
00003c  480b              LDR      r0,|L184.108|
00003e  f7fffffe          BL       strstr
000042  2800              CMP      r0,#0
000044  d004              BEQ      |L184.80|
000046  2002              MOVS     r0,#2
000048  4909              LDR      r1,|L184.112|
00004a  6048              STR      r0,[r1,#4]
00004c  2004              MOVS     r0,#4
00004e  6048              STR      r0,[r1,#4]
                  |L184.80|
;;;1295   
;;;1296   }	
000050  bd08              POP      {r3,pc}
;;;1297   	
                          ENDP

000052  0000              DCW      0x0000
                  |L184.84|
                          DCD      at_
                  |L184.88|
                          DCD      ||.conststring||+0x7c4
                  |L184.92|
                          DCD      ||.conststring||+0x10
                  |L184.96|
                          DCD      ||.conststring||+0x18
                  |L184.100|
                          DCD      ||.conststring||+0x2c
                  |L184.104|
                          DCD      ||.conststring||+0x7e4
                  |L184.108|
                          DCD      uart_string_gsm
                  |L184.112|
                          DCD      0x400ff000
                  |L184.116|
                          DCD      ||.conststring||+0x7e8

                          AREA ||i.savecursor||, COMGROUP=savecursor, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursor PROC
;;;1323   
;;;1324   	__inline void savecursor(){
000000  b508              PUSH     {r3,lr}
;;;1325   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4816              LDR      r0,|L190.92|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b16              LDR      r3,|L190.96|
000008  4a16              LDR      r2,|L190.100|
00000a  4917              LDR      r1,|L190.104|
00000c  9000              STR      r0,[sp,#0]
00000e  4817              LDR      r0,|L190.108|
000010  f7fffffe          BL       send_GSM
;;;1326   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b12              LDR      r3,|L190.96|
000018  4a12              LDR      r2,|L190.100|
00001a  4915              LDR      r1,|L190.112|
00001c  9000              STR      r0,[sp,#0]
00001e  4815              LDR      r0,|L190.116|
000020  f7fffffe          BL       send_GSM
;;;1327   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1328   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4812              LDR      r0,|L190.120|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1329   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",times,k5,cursorvaluepr);		
000032  4812              LDR      r0,|L190.124|
000034  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
000036  9000              STR      r0,[sp,#0]
000038  4811              LDR      r0,|L190.128|
00003a  6803              LDR      r3,[r0,#0]  ; k5
00003c  4811              LDR      r0,|L190.132|
00003e  4912              LDR      r1,|L190.136|
000040  6802              LDR      r2,[r0,#0]  ; times
000042  480d              LDR      r0,|L190.120|
000044  f7fffffe          BL       __2sprintf
;;;1330   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000048  200a              MOVS     r0,#0xa
00004a  4b05              LDR      r3,|L190.96|
00004c  4a05              LDR      r2,|L190.100|
00004e  4906              LDR      r1,|L190.104|
000050  9000              STR      r0,[sp,#0]
000052  4809              LDR      r0,|L190.120|
000054  f7fffffe          BL       send_GSM
;;;1331   }	
000058  bd08              POP      {r3,pc}
;;;1332   	__inline void savecursord(){
                          ENDP

00005a  0000              DCW      0x0000
                  |L190.92|
                          DCD      tmeout
                  |L190.96|
                          DCD      ||.conststring||+0x10
                  |L190.100|
                          DCD      ||.conststring||+0x18
                  |L190.104|
                          DCD      ||.conststring||+0x2c
                  |L190.108|
                          DCD      ||.conststring||+0x148
                  |L190.112|
                          DCD      ||.conststring||+0x20
                  |L190.116|
                          DCD      ||.conststring||+0x168
                  |L190.120|
                          DCD      at_
                  |L190.124|
                          DCD      cursorvaluepr
                  |L190.128|
                          DCD      ||k5||
                  |L190.132|
                          DCD      times
                  |L190.136|
                          DCD      ||.conststring||+0x190

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L196.24|
                  |L196.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L196.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L196.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_vts_ver2_c_tout____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REVSH|
#line 402
|__asm___10_vts_ver2_c_tout____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
