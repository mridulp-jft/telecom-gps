; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -IE:\bitbuck\gps-trackr\Software\vts-ver18+\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.11.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_SD PROC
;;;54     
;;;55     void send_SD(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;56     {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;57     	clear();
00000c  f7fffffe          BL       clear
;;;58     	tout=0;
000010  2000              MOVS     r0,#0
000012  49fd              LDR      r1,|L1.1032|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;59     		memset(uart_string_gsm,0,5000);
000016  49fd              LDR      r1,|L1.1036|
000018  48fd              LDR      r0,|L1.1040|
00001a  f7fffffe          BL       __aeabi_memclr
;;;60     		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  49fc              LDR      r1,|L1.1044|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;61     		clear();
000024  f7fffffe          BL       clear
;;;62     		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;63     		
;;;64     		delay(10);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       delay
;;;65     		uart_putchar(UART1_BASE_PTR,'\r');//uart_putchar(UART1_BASE_PTR,'\r');
000034  210d              MOVS     r1,#0xd
000036  48f8              LDR      r0,|L1.1048|
000038  f7fffffe          BL       uart_putchar
;;;66     	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;67     		do
00003c  bf00              NOP      
                  |L1.62|
;;;68     		{
;;;69     			
;;;70     //					time111--;
;;;71     //				  timeout222--;
;;;72     
;;;73     			
;;;74     	cond122=strstr(uart_string_gsm, responseA);
00003e  48f4              LDR      r0,|L1.1040|
000040  9902              LDR      r1,[sp,#8]
000042  f7fffffe          BL       strstr
000046  49f5              LDR      r1,|L1.1052|
000048  6008              STR      r0,[r1,#0]  ; cond122
;;;75     	cond123=strstr(uart_string_gsm, responseB);
00004a  4621              MOV      r1,r4
00004c  48f0              LDR      r0,|L1.1040|
00004e  f7fffffe          BL       strstr
000052  49f3              LDR      r1,|L1.1056|
000054  6008              STR      r0,[r1,#0]  ; cond123
;;;76       cond124=strstr(uart_string_gsm, responseC);
000056  4629              MOV      r1,r5
000058  48ed              LDR      r0,|L1.1040|
00005a  f7fffffe          BL       strstr
00005e  49f1              LDR      r1,|L1.1060|
000060  6008              STR      r0,[r1,#0]  ; cond124
;;;77     	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
000062  48ee              LDR      r0,|L1.1052|
000064  6800              LDR      r0,[r0,#0]  ; cond122
000066  2800              CMP      r0,#0
000068  d10b              BNE      |L1.130|
00006a  48ed              LDR      r0,|L1.1056|
00006c  6800              LDR      r0,[r0,#0]  ; cond123
00006e  2800              CMP      r0,#0
000070  d107              BNE      |L1.130|
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]  ; cond124
000076  2800              CMP      r0,#0
000078  d103              BNE      |L1.130|
00007a  48e3              LDR      r0,|L1.1032|
00007c  6800              LDR      r0,[r0,#0]  ; tout
00007e  42b0              CMP      r0,r6
000080  dd01              BLE      |L1.134|
                  |L1.130|
000082  2001              MOVS     r0,#1
000084  e000              B        |L1.136|
                  |L1.134|
000086  2000              MOVS     r0,#0
                  |L1.136|
000088  49e7              LDR      r1,|L1.1064|
00008a  7008              STRB     r0,[r1,#0]
;;;78     			
;;;79     		}while (!cond121);
00008c  4608              MOV      r0,r1
00008e  7800              LDRB     r0,[r0,#0]  ; cond121
000090  2800              CMP      r0,#0
000092  d0d4              BEQ      |L1.62|
;;;80     		clear();
000094  f7fffffe          BL       clear
;;;81     		if(tout>timeout){
000098  48db              LDR      r0,|L1.1032|
00009a  6800              LDR      r0,[r0,#0]  ; tout
00009c  42b0              CMP      r0,r6
00009e  dd17              BLE      |L1.208|
;;;82     			uart_putchar(UART1_BASE_PTR,'\r');
0000a0  210d              MOVS     r1,#0xd
0000a2  48dd              LDR      r0,|L1.1048|
0000a4  f7fffffe          BL       uart_putchar
;;;83     		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000a8  210a              MOVS     r1,#0xa
0000aa  48db              LDR      r0,|L1.1048|
0000ac  f7fffffe          BL       uart_putchar
0000b0  211a              MOVS     r1,#0x1a
0000b2  48d9              LDR      r0,|L1.1048|
0000b4  f7fffffe          BL       uart_putchar
;;;84     		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000b8  211a              MOVS     r1,#0x1a
0000ba  48d7              LDR      r0,|L1.1048|
0000bc  f7fffffe          BL       uart_putchar
0000c0  210d              MOVS     r1,#0xd
0000c2  48d5              LDR      r0,|L1.1048|
0000c4  f7fffffe          BL       uart_putchar
;;;85     		uart_putchar(UART1_BASE_PTR,'\n');}
0000c8  210a              MOVS     r1,#0xa
0000ca  48d3              LDR      r0,|L1.1048|
0000cc  f7fffffe          BL       uart_putchar
                  |L1.208|
;;;86     		//return;
;;;87     //		return uart_string_gsm;
;;;88     
;;;89     }
0000d0  b005              ADD      sp,sp,#0x14
0000d2  bdf0              POP      {r4-r7,pc}
;;;90     
                          ENDP

                  mystrstr PROC
;;;59     
;;;60     char mystrstr(char* str1, char character)
0000d4  b570              PUSH     {r4-r6,lr}
;;;61     {
0000d6  4604              MOV      r4,r0
0000d8  460d              MOV      r5,r1
;;;62     	sz=strlen(str1);
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       strlen
0000e0  49d2              LDR      r1,|L1.1068|
0000e2  6008              STR      r0,[r1,#0]  ; sz
;;;63     	for(cn=0;cn<=sz;cn++)
0000e4  2000              MOVS     r0,#0
0000e6  49d2              LDR      r1,|L1.1072|
0000e8  6008              STR      r0,[r1,#0]  ; cn
0000ea  e00b              B        |L1.260|
                  |L1.236|
;;;64     	{if(str1[cn] == character)
0000ec  48d0              LDR      r0,|L1.1072|
0000ee  6800              LDR      r0,[r0,#0]  ; cn
0000f0  5c20              LDRB     r0,[r4,r0]
0000f2  42a8              CMP      r0,r5
0000f4  d101              BNE      |L1.250|
;;;65     		{return 1;}
0000f6  2001              MOVS     r0,#1
                  |L1.248|
;;;66     	}
;;;67     	return 0;
;;;68     }
0000f8  bd70              POP      {r4-r6,pc}
                  |L1.250|
0000fa  48cd              LDR      r0,|L1.1072|
0000fc  6800              LDR      r0,[r0,#0]            ;63  ; cn
0000fe  1c40              ADDS     r0,r0,#1              ;63
000100  49cb              LDR      r1,|L1.1072|
000102  6008              STR      r0,[r1,#0]            ;63  ; cn
                  |L1.260|
000104  48ca              LDR      r0,|L1.1072|
000106  6800              LDR      r0,[r0,#0]            ;63  ; cn
000108  49c8              LDR      r1,|L1.1068|
00010a  6809              LDR      r1,[r1,#0]            ;63  ; sz
00010c  4288              CMP      r0,r1                 ;63
00010e  dded              BLE      |L1.236|
000110  2000              MOVS     r0,#0                 ;67
000112  e7f1              B        |L1.248|
;;;69     
                          ENDP

                  LED_state2 PROC
;;;240    
;;;241    void LED_state2(void)
000114  b500              PUSH     {lr}
;;;242    {
;;;243    if(sleep_flag == 1)
000116  48c7              LDR      r0,|L1.1076|
000118  6800              LDR      r0,[r0,#0]  ; sleep_flag
00011a  2801              CMP      r0,#1
00011c  d102              BNE      |L1.292|
;;;244    {stateCount=99;
00011e  2063              MOVS     r0,#0x63
000120  49c5              LDR      r1,|L1.1080|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;245    }	
;;;246    			
;;;247    	switch(stateCount){
000124  48c4              LDR      r0,|L1.1080|
000126  7800              LDRB     r0,[r0,#0]  ; stateCount
000128  0003              MOVS     r3,r0
00012a  f7fffffe          BL       __ARM_common_switch8
00012e  0604              DCB      0x06,0x04
000130  0f1a2530          DCB      0x0f,0x1a,0x25,0x30
000134  3b46              DCB      0x3b,0x46
;;;248    	
;;;249    
;;;250                case 0:     //Red
;;;251                       RED_ON;
000136  2001              MOVS     r0,#1
000138  0740              LSLS     r0,r0,#29
00013a  49c0              LDR      r1,|L1.1084|
00013c  6088              STR      r0,[r1,#8]
;;;252                       GREEN_OFF;
00013e  0080              LSLS     r0,r0,#2
000140  6048              STR      r0,[r1,#4]
;;;253                       BLUE_OFF;
000142  2020              MOVS     r0,#0x20
000144  49bd              LDR      r1,|L1.1084|
000146  3940              SUBS     r1,r1,#0x40
000148  6048              STR      r0,[r1,#4]
;;;254                       break;
00014a  e044              B        |L1.470|
;;;255    
;;;256                case 1:	//Yellow
;;;257    		               RED_ON;
00014c  2001              MOVS     r0,#1
00014e  0740              LSLS     r0,r0,#29
000150  49ba              LDR      r1,|L1.1084|
000152  6088              STR      r0,[r1,#8]
;;;258    		               GREEN_ON;
000154  0080              LSLS     r0,r0,#2
000156  6088              STR      r0,[r1,#8]
;;;259    		               BLUE_OFF;
000158  2020              MOVS     r0,#0x20
00015a  49b8              LDR      r1,|L1.1084|
00015c  3940              SUBS     r1,r1,#0x40
00015e  6048              STR      r0,[r1,#4]
;;;260    		               break;
000160  e039              B        |L1.470|
;;;261    				
;;;262                case 2:	//Green
;;;263    		               RED_OFF;
000162  2001              MOVS     r0,#1
000164  0740              LSLS     r0,r0,#29
000166  49b5              LDR      r1,|L1.1084|
000168  6048              STR      r0,[r1,#4]
;;;264    		               GREEN_ON;
00016a  0080              LSLS     r0,r0,#2
00016c  6088              STR      r0,[r1,#8]
;;;265    		               BLUE_OFF;
00016e  2020              MOVS     r0,#0x20
000170  49b2              LDR      r1,|L1.1084|
000172  3940              SUBS     r1,r1,#0x40
000174  6048              STR      r0,[r1,#4]
;;;266    		               break;
000176  e02e              B        |L1.470|
;;;267    				
;;;268                case 3:	//Blue
;;;269    		               RED_OFF;
000178  2001              MOVS     r0,#1
00017a  0740              LSLS     r0,r0,#29
00017c  49af              LDR      r1,|L1.1084|
00017e  6048              STR      r0,[r1,#4]
;;;270    		               GREEN_OFF;
000180  0080              LSLS     r0,r0,#2
000182  6048              STR      r0,[r1,#4]
;;;271    		               BLUE_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L1.1084|
000188  3940              SUBS     r1,r1,#0x40
00018a  6088              STR      r0,[r1,#8]
;;;272    		               break;
00018c  e023              B        |L1.470|
;;;273    				
;;;274                case 4:	//Violet
;;;275    		               RED_ON;
00018e  2001              MOVS     r0,#1
000190  0740              LSLS     r0,r0,#29
000192  49aa              LDR      r1,|L1.1084|
000194  6088              STR      r0,[r1,#8]
;;;276    		               GREEN_OFF;
000196  0080              LSLS     r0,r0,#2
000198  6048              STR      r0,[r1,#4]
;;;277    		               BLUE_ON;
00019a  2020              MOVS     r0,#0x20
00019c  49a7              LDR      r1,|L1.1084|
00019e  3940              SUBS     r1,r1,#0x40
0001a0  6088              STR      r0,[r1,#8]
;;;278    		               break;
0001a2  e018              B        |L1.470|
;;;279    				
;;;280                case 5:	//White
;;;281    		              RED_ON;
0001a4  2001              MOVS     r0,#1
0001a6  0740              LSLS     r0,r0,#29
0001a8  49a4              LDR      r1,|L1.1084|
0001aa  6088              STR      r0,[r1,#8]
;;;282    		              GREEN_ON;
0001ac  0080              LSLS     r0,r0,#2
0001ae  6088              STR      r0,[r1,#8]
;;;283    		              BLUE_ON;
0001b0  2020              MOVS     r0,#0x20
0001b2  49a2              LDR      r1,|L1.1084|
0001b4  3940              SUBS     r1,r1,#0x40
0001b6  6088              STR      r0,[r1,#8]
;;;284    		              break;
0001b8  e00d              B        |L1.470|
;;;285    				
;;;286                default:	//Red
;;;287    
;;;288    		              RED_OFF;
0001ba  2001              MOVS     r0,#1
0001bc  0740              LSLS     r0,r0,#29
0001be  499f              LDR      r1,|L1.1084|
0001c0  6048              STR      r0,[r1,#4]
;;;289    		              GREEN_OFF;
0001c2  0080              LSLS     r0,r0,#2
0001c4  6048              STR      r0,[r1,#4]
;;;290    		              BLUE_OFF;
0001c6  2020              MOVS     r0,#0x20
0001c8  499c              LDR      r1,|L1.1084|
0001ca  3940              SUBS     r1,r1,#0x40
0001cc  6048              STR      r0,[r1,#4]
;;;291    		              stateCount = 0;	//Reset state counter
0001ce  2000              MOVS     r0,#0
0001d0  4999              LDR      r1,|L1.1080|
0001d2  7008              STRB     r0,[r1,#0]
;;;292    			      break;
0001d4  bf00              NOP      
                  |L1.470|
0001d6  bf00              NOP                            ;254
;;;293    
;;;294        }
;;;295    	
;;;296    }
0001d8  bd00              POP      {pc}
;;;297    
                          ENDP

                  parse_gsm PROC
;;;1569   
;;;1570   void parse_gsm(char *str, int first, int sec, char *string)
0001da  b5f8              PUSH     {r3-r7,lr}
;;;1571   {
0001dc  4604              MOV      r4,r0
0001de  460e              MOV      r6,r1
0001e0  4617              MOV      r7,r2
0001e2  461d              MOV      r5,r3
;;;1572   
;;;1573   		delay(10);		
0001e4  200a              MOVS     r0,#0xa
0001e6  f7fffffe          BL       delay
;;;1574   		memset(string,0,15);
0001ea  210f              MOVS     r1,#0xf
0001ec  4628              MOV      r0,r5
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1575   		for(i11=0,temp11=0;i11<100;i11++)
0001f2  2000              MOVS     r0,#0
0001f4  4992              LDR      r1,|L1.1088|
0001f6  6008              STR      r0,[r1,#0]  ; i11
0001f8  4992              LDR      r1,|L1.1092|
0001fa  6008              STR      r0,[r1,#0]  ; temp11
0001fc  e01a              B        |L1.564|
                  |L1.510|
;;;1576   		{
;;;1577   		if(str[i11]=='"')
0001fe  4890              LDR      r0,|L1.1088|
000200  6800              LDR      r0,[r0,#0]  ; i11
000202  5c20              LDRB     r0,[r4,r0]
000204  2822              CMP      r0,#0x22
000206  d108              BNE      |L1.538|
;;;1578   			{temp11++;j11=i11;}
000208  488e              LDR      r0,|L1.1092|
00020a  6800              LDR      r0,[r0,#0]  ; temp11
00020c  1c40              ADDS     r0,r0,#1
00020e  498d              LDR      r1,|L1.1092|
000210  6008              STR      r0,[r1,#0]  ; temp11
000212  488b              LDR      r0,|L1.1088|
000214  6800              LDR      r0,[r0,#0]  ; i11
000216  498c              LDR      r1,|L1.1096|
000218  6008              STR      r0,[r1,#0]  ; j11
                  |L1.538|
;;;1579   		else{}
;;;1580   			
;;;1581   		if(temp11>=sec){i11=900;}
00021a  488a              LDR      r0,|L1.1092|
00021c  6800              LDR      r0,[r0,#0]  ; temp11
00021e  42b8              CMP      r0,r7
000220  db03              BLT      |L1.554|
000222  20e1              MOVS     r0,#0xe1
000224  0080              LSLS     r0,r0,#2
000226  4986              LDR      r1,|L1.1088|
000228  6008              STR      r0,[r1,#0]  ; i11
                  |L1.554|
00022a  4885              LDR      r0,|L1.1088|
00022c  6800              LDR      r0,[r0,#0]            ;1575  ; i11
00022e  1c40              ADDS     r0,r0,#1              ;1575
000230  4983              LDR      r1,|L1.1088|
000232  6008              STR      r0,[r1,#0]            ;1575  ; i11
                  |L1.564|
000234  4882              LDR      r0,|L1.1088|
000236  6800              LDR      r0,[r0,#0]            ;1575  ; i11
000238  2864              CMP      r0,#0x64              ;1575
00023a  dbe0              BLT      |L1.510|
;;;1582   		else{}	
;;;1583   		
;;;1584   		}	
;;;1585   		
;;;1586   		for(i11=0,temp11=0;i11<100;i11++)
00023c  2000              MOVS     r0,#0
00023e  4980              LDR      r1,|L1.1088|
000240  6008              STR      r0,[r1,#0]  ; i11
000242  4980              LDR      r1,|L1.1092|
000244  6008              STR      r0,[r1,#0]  ; temp11
000246  e01a              B        |L1.638|
                  |L1.584|
;;;1587   		{
;;;1588   		if(str[i11]=='"')
000248  487d              LDR      r0,|L1.1088|
00024a  6800              LDR      r0,[r0,#0]  ; i11
00024c  5c20              LDRB     r0,[r4,r0]
00024e  2822              CMP      r0,#0x22
000250  d108              BNE      |L1.612|
;;;1589   			{temp11++;l=i11;}										
000252  487c              LDR      r0,|L1.1092|
000254  6800              LDR      r0,[r0,#0]  ; temp11
000256  1c40              ADDS     r0,r0,#1
000258  497a              LDR      r1,|L1.1092|
00025a  6008              STR      r0,[r1,#0]  ; temp11
00025c  4878              LDR      r0,|L1.1088|
00025e  6800              LDR      r0,[r0,#0]  ; i11
000260  497a              LDR      r1,|L1.1100|
000262  6008              STR      r0,[r1,#0]  ; l
                  |L1.612|
;;;1590   		else{}
;;;1591   		if(temp11>=first){i11=900;}else{}
000264  4877              LDR      r0,|L1.1092|
000266  6800              LDR      r0,[r0,#0]  ; temp11
000268  42b0              CMP      r0,r6
00026a  db03              BLT      |L1.628|
00026c  20e1              MOVS     r0,#0xe1
00026e  0080              LSLS     r0,r0,#2
000270  4973              LDR      r1,|L1.1088|
000272  6008              STR      r0,[r1,#0]  ; i11
                  |L1.628|
000274  4872              LDR      r0,|L1.1088|
000276  6800              LDR      r0,[r0,#0]            ;1586  ; i11
000278  1c40              ADDS     r0,r0,#1              ;1586
00027a  4971              LDR      r1,|L1.1088|
00027c  6008              STR      r0,[r1,#0]            ;1586  ; i11
                  |L1.638|
00027e  4870              LDR      r0,|L1.1088|
000280  6800              LDR      r0,[r0,#0]            ;1586  ; i11
000282  2864              CMP      r0,#0x64              ;1586
000284  dbe0              BLT      |L1.584|
;;;1592   		}	
;;;1593   		for(i11=0;i11<(j11-l-1);i11++)
000286  2000              MOVS     r0,#0
000288  496d              LDR      r1,|L1.1088|
00028a  6008              STR      r0,[r1,#0]  ; i11
00028c  e00e              B        |L1.684|
                  |L1.654|
;;;1594   		{
;;;1595   		string[i11] = str[l+i11+1];
00028e  486f              LDR      r0,|L1.1100|
000290  6800              LDR      r0,[r0,#0]  ; l
000292  496b              LDR      r1,|L1.1088|
000294  6809              LDR      r1,[r1,#0]  ; i11
000296  1840              ADDS     r0,r0,r1
000298  1c40              ADDS     r0,r0,#1
00029a  5c20              LDRB     r0,[r4,r0]
00029c  4968              LDR      r1,|L1.1088|
00029e  6809              LDR      r1,[r1,#0]  ; i11
0002a0  5468              STRB     r0,[r5,r1]
0002a2  4867              LDR      r0,|L1.1088|
0002a4  6800              LDR      r0,[r0,#0]            ;1593  ; i11
0002a6  1c40              ADDS     r0,r0,#1              ;1593
0002a8  4965              LDR      r1,|L1.1088|
0002aa  6008              STR      r0,[r1,#0]            ;1593  ; i11
                  |L1.684|
0002ac  4866              LDR      r0,|L1.1096|
0002ae  6800              LDR      r0,[r0,#0]            ;1593  ; j11
0002b0  4966              LDR      r1,|L1.1100|
0002b2  6809              LDR      r1,[r1,#0]            ;1593  ; l
0002b4  1a40              SUBS     r0,r0,r1              ;1593
0002b6  1e40              SUBS     r0,r0,#1              ;1593
0002b8  4961              LDR      r1,|L1.1088|
0002ba  6809              LDR      r1,[r1,#0]            ;1593  ; i11
0002bc  4288              CMP      r0,r1                 ;1593
0002be  dce6              BGT      |L1.654|
;;;1596   		}			
;;;1597   	
;;;1598   
;;;1599   }
0002c0  bdf8              POP      {r3-r7,pc}
;;;1600   
                          ENDP

                  cursor_val PROC
;;;1764   
;;;1765   int cursor_val(char * stringsd, int cur){
0002c2  b5f8              PUSH     {r3-r7,lr}
0002c4  4605              MOV      r5,r0
0002c6  460e              MOV      r6,r1
;;;1766   int curinc=0,curcounter=0,cur2=0;
0002c8  2400              MOVS     r4,#0
0002ca  2700              MOVS     r7,#0
0002cc  2000              MOVS     r0,#0
0002ce  9000              STR      r0,[sp,#0]
;;;1767   for(curinc=0;curinc<strlen(stringsd);curinc++){
0002d0  bf00              NOP      
0002d2  e007              B        |L1.740|
                  |L1.724|
;;;1768   		
;;;1769   		if(stringsd[curinc] == '\n'     &&    curcounter < cur   ){ //&& curcounter<=cur	){
0002d4  5d28              LDRB     r0,[r5,r4]
0002d6  280a              CMP      r0,#0xa
0002d8  d103              BNE      |L1.738|
0002da  42b7              CMP      r7,r6
0002dc  da01              BGE      |L1.738|
;;;1770   			++curcounter;     cur2=curinc;
0002de  1c7f              ADDS     r7,r7,#1
0002e0  9400              STR      r4,[sp,#0]
                  |L1.738|
0002e2  1c64              ADDS     r4,r4,#1              ;1767
                  |L1.740|
0002e4  4628              MOV      r0,r5                 ;1767
0002e6  f7fffffe          BL       strlen
0002ea  42a0              CMP      r0,r4                 ;1767
0002ec  d8f2              BHI      |L1.724|
;;;1771   		}
;;;1772   
;;;1773   		
;;;1774   
;;;1775   }
;;;1776   	
;;;1777   	
;;;1778   	return cur2;
0002ee  9800              LDR      r0,[sp,#0]
;;;1779   
;;;1780   }
0002f0  bdf8              POP      {r3-r7,pc}
;;;1781   
                          ENDP

                  count_char PROC
;;;1745   }
;;;1746   int count_char(char ch,char* string)
0002f2  b570              PUSH     {r4-r6,lr}
;;;1747   {count=0;
0002f4  4605              MOV      r5,r0
0002f6  460c              MOV      r4,r1
0002f8  2000              MOVS     r0,#0
0002fa  4955              LDR      r1,|L1.1104|
0002fc  6008              STR      r0,[r1,#0]  ; count
;;;1748   
;;;1749   	//remove_all_chars(string,'\0','\0');
;;;1750   //	ass=strlen(string);
;;;1751   	for(ass=0;ass<strlen(string);ass++)
0002fe  4955              LDR      r1,|L1.1108|
000300  6008              STR      r0,[r1,#0]  ; ass
000302  e00e              B        |L1.802|
                  |L1.772|
;;;1752   	{
;;;1753   		if(string[ass] == ch)
000304  4853              LDR      r0,|L1.1108|
000306  6800              LDR      r0,[r0,#0]  ; ass
000308  5c20              LDRB     r0,[r4,r0]
00030a  42a8              CMP      r0,r5
00030c  d104              BNE      |L1.792|
;;;1754   		{count++;}
00030e  4850              LDR      r0,|L1.1104|
000310  6800              LDR      r0,[r0,#0]  ; count
000312  1c40              ADDS     r0,r0,#1
000314  494e              LDR      r1,|L1.1104|
000316  6008              STR      r0,[r1,#0]  ; count
                  |L1.792|
000318  484e              LDR      r0,|L1.1108|
00031a  6800              LDR      r0,[r0,#0]            ;1751  ; ass
00031c  1c40              ADDS     r0,r0,#1              ;1751
00031e  494d              LDR      r1,|L1.1108|
000320  6008              STR      r0,[r1,#0]            ;1751  ; ass
                  |L1.802|
000322  4620              MOV      r0,r4                 ;1751
000324  f7fffffe          BL       strlen
000328  494a              LDR      r1,|L1.1108|
00032a  6809              LDR      r1,[r1,#0]            ;1751  ; ass
00032c  4288              CMP      r0,r1                 ;1751
00032e  d8e9              BHI      |L1.772|
;;;1755   		
;;;1756   	}
;;;1757   return count;
000330  4847              LDR      r0,|L1.1104|
000332  6800              LDR      r0,[r0,#0]  ; count
;;;1758   }
000334  bd70              POP      {r4-r6,pc}
;;;1759   
                          ENDP

                  send_tcp PROC
;;;93     
;;;94     void send_tcp()
000336  b538              PUSH     {r3-r5,lr}
;;;95     {	
;;;96     memset(stcond1,0,strlen(stcond1));	
000338  4847              LDR      r0,|L1.1112|
00033a  6800              LDR      r0,[r0,#0]  ; stcond1
00033c  f7fffffe          BL       strlen
000340  4604              MOV      r4,r0
000342  4621              MOV      r1,r4
000344  4844              LDR      r0,|L1.1112|
000346  6800              LDR      r0,[r0,#0]  ; stcond1
000348  f7fffffe          BL       __aeabi_memclr
;;;97     memset(con1d,0,strlen(con1d));	
00034c  4843              LDR      r0,|L1.1116|
00034e  6800              LDR      r0,[r0,#0]  ; con1d
000350  f7fffffe          BL       strlen
000354  4604              MOV      r4,r0
000356  4621              MOV      r1,r4
000358  4840              LDR      r0,|L1.1116|
00035a  6800              LDR      r0,[r0,#0]  ; con1d
00035c  f7fffffe          BL       __aeabi_memclr
;;;98     								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;99     
;;;100    								cond=mystrstr(uart_string_gsm,'>');
000360  213e              MOVS     r1,#0x3e
000362  482b              LDR      r0,|L1.1040|
000364  f7fffffe          BL       mystrstr
000368  493d              LDR      r1,|L1.1120|
00036a  7008              STRB     r0,[r1,#0]
;;;101    								if(cond)	
00036c  4608              MOV      r0,r1
00036e  7800              LDRB     r0,[r0,#0]  ; cond
000370  2800              CMP      r0,#0
000372  d048              BEQ      |L1.1030|
;;;102    								{
;;;103    									
;;;104    									clear();
000374  f7fffffe          BL       clear
;;;105    									memset(uart_string_gsm,0,5000);
000378  4924              LDR      r1,|L1.1036|
00037a  4825              LDR      r0,|L1.1040|
00037c  f7fffffe          BL       __aeabi_memclr
;;;106    									strcat(data,"\n\n");
000380  a138              ADR      r1,|L1.1124|
000382  4839              LDR      r0,|L1.1128|
000384  f7fffffe          BL       strcat
;;;107    									len=strlen(data);
000388  4837              LDR      r0,|L1.1128|
00038a  f7fffffe          BL       strlen
00038e  4937              LDR      r1,|L1.1132|
000390  6008              STR      r0,[r1,#0]  ; len
;;;108    									tout=0;
000392  2000              MOVS     r0,#0
000394  491c              LDR      r1,|L1.1032|
000396  6008              STR      r0,[r1,#0]  ; tout
;;;109    									k2=0;
000398  491e              LDR      r1,|L1.1044|
00039a  6008              STR      r0,[r1,#0]  ; k2
;;;110    									for(k=0;k<len;k++)
00039c  4934              LDR      r1,|L1.1136|
00039e  6008              STR      r0,[r1,#0]  ; k
0003a0  e00b              B        |L1.954|
                  |L1.930|
;;;111    									{
;;;112    										uart_putchar(UART1_BASE_PTR, data[k]);
0003a2  4831              LDR      r0,|L1.1128|
0003a4  4a32              LDR      r2,|L1.1136|
0003a6  6812              LDR      r2,[r2,#0]  ; k
0003a8  5c81              LDRB     r1,[r0,r2]
0003aa  481b              LDR      r0,|L1.1048|
0003ac  f7fffffe          BL       uart_putchar
0003b0  482f              LDR      r0,|L1.1136|
0003b2  6800              LDR      r0,[r0,#0]            ;110  ; k
0003b4  1c40              ADDS     r0,r0,#1              ;110
0003b6  492e              LDR      r1,|L1.1136|
0003b8  6008              STR      r0,[r1,#0]            ;110  ; k
                  |L1.954|
0003ba  482d              LDR      r0,|L1.1136|
0003bc  6800              LDR      r0,[r0,#0]            ;110  ; k
0003be  492b              LDR      r1,|L1.1132|
0003c0  6809              LDR      r1,[r1,#0]            ;110  ; len
0003c2  4288              CMP      r0,r1                 ;110
0003c4  dbed              BLT      |L1.930|
;;;113    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0003c6  210a              MOVS     r1,#0xa
0003c8  4813              LDR      r0,|L1.1048|
0003ca  f7fffffe          BL       uart_putchar
0003ce  211a              MOVS     r1,#0x1a
0003d0  4811              LDR      r0,|L1.1048|
0003d2  f7fffffe          BL       uart_putchar
0003d6  211a              MOVS     r1,#0x1a
0003d8  480f              LDR      r0,|L1.1048|
0003da  f7fffffe          BL       uart_putchar
0003de  211a              MOVS     r1,#0x1a
0003e0  480d              LDR      r0,|L1.1048|
0003e2  f7fffffe          BL       uart_putchar
0003e6  211a              MOVS     r1,#0x1a
0003e8  480b              LDR      r0,|L1.1048|
0003ea  f7fffffe          BL       uart_putchar
0003ee  211a              MOVS     r1,#0x1a
0003f0  4809              LDR      r0,|L1.1048|
0003f2  f7fffffe          BL       uart_putchar
;;;114    									do
0003f6  bf00              NOP      
                  |L1.1016|
;;;115    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0003f8  a11e              ADR      r1,|L1.1140|
0003fa  4805              LDR      r0,|L1.1040|
0003fc  f7fffffe          BL       strstr
000400  4915              LDR      r1,|L1.1112|
000402  6008              STR      r0,[r1,#0]  ; stcond1
;;;116    																	stcond2=strstr(uart_string_gsm, "ERROR");
000404  e03a              B        |L1.1148|
                  |L1.1030|
000406  e083              B        |L1.1296|
                  |L1.1032|
                          DCD      tout
                  |L1.1036|
                          DCD      0x00001388
                  |L1.1040|
                          DCD      uart_string_gsm
                  |L1.1044|
                          DCD      ||k2||
                  |L1.1048|
                          DCD      0x4006b000
                  |L1.1052|
                          DCD      cond122
                  |L1.1056|
                          DCD      cond123
                  |L1.1060|
                          DCD      cond124
                  |L1.1064|
                          DCD      cond121
                  |L1.1068|
                          DCD      ||sz||
                  |L1.1072|
                          DCD      ||cn||
                  |L1.1076|
                          DCD      sleep_flag
                  |L1.1080|
                          DCD      stateCount
                  |L1.1084|
                          DCD      0x400ff100
                  |L1.1088|
                          DCD      i11
                  |L1.1092|
                          DCD      temp11
                  |L1.1096|
                          DCD      j11
                  |L1.1100|
                          DCD      l
                  |L1.1104|
                          DCD      count
                  |L1.1108|
                          DCD      ass
                  |L1.1112|
                          DCD      stcond1
                  |L1.1116|
                          DCD      con1d
                  |L1.1120|
                          DCD      cond
                  |L1.1124|
000464  0a0a00            DCB      "\n\n",0
000467  00                DCB      0
                  |L1.1128|
                          DCD      data
                  |L1.1132|
                          DCD      len
                  |L1.1136|
                          DCD      k
                  |L1.1140|
000474  53454e44          DCB      "SEND OK",0
000478  204f4b00
                  |L1.1148|
00047c  a1fc              ADR      r1,|L1.2160|
00047e  48fe              LDR      r0,|L1.2168|
000480  f7fffffe          BL       strstr
000484  49fd              LDR      r1,|L1.2172|
000486  6008              STR      r0,[r1,#0]  ; stcond2
;;;117    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000488  a1fd              ADR      r1,|L1.2176|
00048a  48fb              LDR      r0,|L1.2168|
00048c  f7fffffe          BL       strstr
000490  49fd              LDR      r1,|L1.2184|
000492  6008              STR      r0,[r1,#0]  ; stcond3
;;;118    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000494  a1fd              ADR      r1,|L1.2188|
000496  48f8              LDR      r0,|L1.2168|
000498  f7fffffe          BL       strstr
00049c  49fd              LDR      r1,|L1.2196|
00049e  6008              STR      r0,[r1,#0]  ; stcond4
;;;119    																	
;;;120    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0004a0  48f6              LDR      r0,|L1.2172|
0004a2  6800              LDR      r0,[r0,#0]  ; stcond2
0004a4  2800              CMP      r0,#0
0004a6  d10f              BNE      |L1.1224|
0004a8  48f7              LDR      r0,|L1.2184|
0004aa  6800              LDR      r0,[r0,#0]  ; stcond3
0004ac  2800              CMP      r0,#0
0004ae  d10b              BNE      |L1.1224|
0004b0  4608              MOV      r0,r1
0004b2  6800              LDR      r0,[r0,#0]  ; stcond4
0004b4  2800              CMP      r0,#0
0004b6  d107              BNE      |L1.1224|
0004b8  48f7              LDR      r0,|L1.2200|
0004ba  6800              LDR      r0,[r0,#0]  ; stcond1
0004bc  2800              CMP      r0,#0
0004be  d103              BNE      |L1.1224|
0004c0  48f6              LDR      r0,|L1.2204|
0004c2  6800              LDR      r0,[r0,#0]  ; tout
0004c4  2804              CMP      r0,#4
0004c6  dd97              BLE      |L1.1016|
                  |L1.1224|
;;;121    																//delay(10);clear();
;;;122    														uart_putchar(UART1_BASE_PTR,0x1A);
0004c8  211a              MOVS     r1,#0x1a
0004ca  48f5              LDR      r0,|L1.2208|
0004cc  f7fffffe          BL       uart_putchar
;;;123    												//delay(10);
;;;124    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0004d0  211a              MOVS     r1,#0x1a
0004d2  48f3              LDR      r0,|L1.2208|
0004d4  f7fffffe          BL       uart_putchar
0004d8  211a              MOVS     r1,#0x1a
0004da  48f1              LDR      r0,|L1.2208|
0004dc  f7fffffe          BL       uart_putchar
0004e0  211a              MOVS     r1,#0x1a
0004e2  48ef              LDR      r0,|L1.2208|
0004e4  f7fffffe          BL       uart_putchar
;;;125    						
;;;126    									
;;;127    									
;;;128    									
;;;129    									if(flagch==1){		int_erval=temp;flagch=0;	}
0004e8  48ee              LDR      r0,|L1.2212|
0004ea  6800              LDR      r0,[r0,#0]  ; flagch
0004ec  2801              CMP      r0,#1
0004ee  d106              BNE      |L1.1278|
0004f0  48ed              LDR      r0,|L1.2216|
0004f2  6800              LDR      r0,[r0,#0]  ; temp
0004f4  49ed              LDR      r1,|L1.2220|
0004f6  6008              STR      r0,[r1,#0]  ; int_erval
0004f8  2000              MOVS     r0,#0
0004fa  49ea              LDR      r1,|L1.2212|
0004fc  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.1278|
;;;130    									
;;;131    									
;;;132    									
;;;133    
;;;134    //									for(k=0;k<len;k++)
;;;135    //									{
;;;136    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;137    //									}
;;;138    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;139    
;;;140    //									
;;;141    //													k2=0;									//string array counter for uart 1
;;;142    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;143    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;144    //																{
;;;145    //																	timeout--;
;;;146    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;147    //
;;;148    									delay(20);															
0004fe  2014              MOVS     r0,#0x14
000500  f7fffffe          BL       delay
;;;149    stcond1=strstr(uart_string_gsm,"SEND OK"); 
000504  49ea              LDR      r1,|L1.2224|
000506  48dc              LDR      r0,|L1.2168|
000508  f7fffffe          BL       strstr
00050c  49e2              LDR      r1,|L1.2200|
00050e  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.1296|
;;;150    
;;;151    								}
;;;152    
;;;153      //checks for send ok
;;;154    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
000510  48e1              LDR      r0,|L1.2200|
000512  6800              LDR      r0,[r0,#0]  ; stcond1
000514  2800              CMP      r0,#0
000516  d001              BEQ      |L1.1308|
000518  f000ff87          BL       |L1.5162|
                  |L1.1308|
;;;155    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00051c  211a              MOVS     r1,#0x1a
00051e  48e0              LDR      r0,|L1.2208|
000520  f7fffffe          BL       uart_putchar
000524  f7fffffe          BL       clear
000528  200a              MOVS     r0,#0xa
00052a  f7fffffe          BL       delay
;;;156    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00052e  211a              MOVS     r1,#0x1a
000530  48db              LDR      r0,|L1.2208|
000532  f7fffffe          BL       uart_putchar
000536  f7fffffe          BL       clear
00053a  200a              MOVS     r0,#0xa
00053c  f7fffffe          BL       delay
;;;157    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000540  211a              MOVS     r1,#0x1a
000542  48d7              LDR      r0,|L1.2208|
000544  f7fffffe          BL       uart_putchar
000548  f7fffffe          BL       clear
00054c  200a              MOVS     r0,#0xa
00054e  f7fffffe          BL       delay
;;;158    							remove_all_chars(data, '\n', '\n');
000552  220a              MOVS     r2,#0xa
000554  4611              MOV      r1,r2
000556  48d7              LDR      r0,|L1.2228|
000558  f7fffffe          BL       remove_all_chars
;;;159    	
;;;160    		strcat(data,"CH\n");	
00055c  a1d6              ADR      r1,|L1.2232|
00055e  48d5              LDR      r0,|L1.2228|
000560  f7fffffe          BL       strcat
;;;161    		
;;;162    	
;;;163    	delay(100);
000564  2064              MOVS     r0,#0x64
000566  f7fffffe          BL       delay
;;;164    		clear();//memset(uart_string_gsm,0,5000);
00056a  f7fffffe          BL       clear
;;;165    	
;;;166    	memset(at_,0,100);
00056e  2164              MOVS     r1,#0x64
000570  48d2              LDR      r0,|L1.2236|
000572  f7fffffe          BL       __aeabi_memclr
;;;167    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000576  48cf              LDR      r0,|L1.2228|
000578  f7fffffe          BL       strlen
00057c  1c44              ADDS     r4,r0,#1
00057e  4623              MOV      r3,r4
000580  4acf              LDR      r2,|L1.2240|
000582  a1d0              ADR      r1,|L1.2244|
000584  48cd              LDR      r0,|L1.2236|
000586  f7fffffe          BL       __2sprintf
;;;168    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00058a  2005              MOVS     r0,#5
00058c  a3b8              ADR      r3,|L1.2160|
00058e  a2d6              ADR      r2,|L1.2280|
000590  a1d7              ADR      r1,|L1.2288|
000592  9000              STR      r0,[sp,#0]
000594  48c9              LDR      r0,|L1.2236|
000596  f7fffffe          BL       send_SD
;;;169    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;170    //	if(strstr(uart_string_gsm,"ERROR")){
;;;171    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;172    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;173    //	}
;;;174    	
;;;175    clear();	
00059a  f7fffffe          BL       clear
;;;176    									k2=0;									//string array counter for uart 1
00059e  2000              MOVS     r0,#0
0005a0  49d4              LDR      r1,|L1.2292|
0005a2  6008              STR      r0,[r1,#0]  ; k2
;;;177    									tout=0;	
0005a4  49bd              LDR      r1,|L1.2204|
0005a6  6008              STR      r0,[r1,#0]  ; tout
;;;178    		for(k=0;k<strlen(data);k++)
0005a8  49d3              LDR      r1,|L1.2296|
0005aa  6008              STR      r0,[r1,#0]  ; k
0005ac  e00b              B        |L1.1478|
                  |L1.1454|
;;;179    		{
;;;180    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0005ae  48c1              LDR      r0,|L1.2228|
0005b0  4ad1              LDR      r2,|L1.2296|
0005b2  6812              LDR      r2,[r2,#0]  ; k
0005b4  5c81              LDRB     r1,[r0,r2]
0005b6  48ba              LDR      r0,|L1.2208|
0005b8  f7fffffe          BL       uart_putchar
0005bc  48ce              LDR      r0,|L1.2296|
0005be  6800              LDR      r0,[r0,#0]            ;178  ; k
0005c0  1c40              ADDS     r0,r0,#1              ;178
0005c2  49cd              LDR      r1,|L1.2296|
0005c4  6008              STR      r0,[r1,#0]            ;178  ; k
                  |L1.1478|
0005c6  48bb              LDR      r0,|L1.2228|
0005c8  f7fffffe          BL       strlen
0005cc  49ca              LDR      r1,|L1.2296|
0005ce  6809              LDR      r1,[r1,#0]            ;178  ; k
0005d0  4288              CMP      r0,r1                 ;178
0005d2  d8ec              BHI      |L1.1454|
;;;181    		}	
;;;182    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0005d4  210a              MOVS     r1,#0xa
0005d6  48b2              LDR      r0,|L1.2208|
0005d8  f7fffffe          BL       uart_putchar
0005dc  210a              MOVS     r1,#0xa
0005de  48b0              LDR      r0,|L1.2208|
0005e0  f7fffffe          BL       uart_putchar
0005e4  210a              MOVS     r1,#0xa
0005e6  48ae              LDR      r0,|L1.2208|
0005e8  f7fffffe          BL       uart_putchar
0005ec  210a              MOVS     r1,#0xa
0005ee  48ac              LDR      r0,|L1.2208|
0005f0  f7fffffe          BL       uart_putchar
0005f4  210a              MOVS     r1,#0xa
0005f6  48aa              LDR      r0,|L1.2208|
0005f8  f7fffffe          BL       uart_putchar
0005fc  210a              MOVS     r1,#0xa
0005fe  48a8              LDR      r0,|L1.2208|
000600  f7fffffe          BL       uart_putchar
000604  210a              MOVS     r1,#0xa
000606  48a6              LDR      r0,|L1.2208|
000608  f7fffffe          BL       uart_putchar
00060c  210a              MOVS     r1,#0xa
00060e  48a4              LDR      r0,|L1.2208|
000610  f7fffffe          BL       uart_putchar
000614  210a              MOVS     r1,#0xa
000616  48a2              LDR      r0,|L1.2208|
000618  f7fffffe          BL       uart_putchar
00061c  210a              MOVS     r1,#0xa
00061e  48a0              LDR      r0,|L1.2208|
000620  f7fffffe          BL       uart_putchar
000624  210a              MOVS     r1,#0xa
000626  489e              LDR      r0,|L1.2208|
000628  f7fffffe          BL       uart_putchar
00062c  210a              MOVS     r1,#0xa
00062e  489c              LDR      r0,|L1.2208|
000630  f7fffffe          BL       uart_putchar
000634  210a              MOVS     r1,#0xa
000636  489a              LDR      r0,|L1.2208|
000638  f7fffffe          BL       uart_putchar
00063c  210a              MOVS     r1,#0xa
00063e  4898              LDR      r0,|L1.2208|
000640  f7fffffe          BL       uart_putchar
000644  210a              MOVS     r1,#0xa
000646  4896              LDR      r0,|L1.2208|
000648  f7fffffe          BL       uart_putchar
00064c  210a              MOVS     r1,#0xa
00064e  4894              LDR      r0,|L1.2208|
000650  f7fffffe          BL       uart_putchar
000654  210a              MOVS     r1,#0xa
000656  4892              LDR      r0,|L1.2208|
000658  f7fffffe          BL       uart_putchar
00065c  210a              MOVS     r1,#0xa
00065e  4890              LDR      r0,|L1.2208|
000660  f7fffffe          BL       uart_putchar
000664  210a              MOVS     r1,#0xa
000666  488e              LDR      r0,|L1.2208|
000668  f7fffffe          BL       uart_putchar
00066c  210a              MOVS     r1,#0xa
00066e  488c              LDR      r0,|L1.2208|
000670  f7fffffe          BL       uart_putchar
000674  210a              MOVS     r1,#0xa
000676  488a              LDR      r0,|L1.2208|
000678  f7fffffe          BL       uart_putchar
00067c  210a              MOVS     r1,#0xa
00067e  4888              LDR      r0,|L1.2208|
000680  f7fffffe          BL       uart_putchar
000684  210a              MOVS     r1,#0xa
000686  4886              LDR      r0,|L1.2208|
000688  f7fffffe          BL       uart_putchar
00068c  210a              MOVS     r1,#0xa
00068e  4884              LDR      r0,|L1.2208|
000690  f7fffffe          BL       uart_putchar
000694  210a              MOVS     r1,#0xa
000696  4882              LDR      r0,|L1.2208|
000698  f7fffffe          BL       uart_putchar
00069c  210a              MOVS     r1,#0xa
00069e  4880              LDR      r0,|L1.2208|
0006a0  f7fffffe          BL       uart_putchar
0006a4  210a              MOVS     r1,#0xa
0006a6  487e              LDR      r0,|L1.2208|
0006a8  f7fffffe          BL       uart_putchar
0006ac  210a              MOVS     r1,#0xa
0006ae  487c              LDR      r0,|L1.2208|
0006b0  f7fffffe          BL       uart_putchar
0006b4  210a              MOVS     r1,#0xa
0006b6  487a              LDR      r0,|L1.2208|
0006b8  f7fffffe          BL       uart_putchar
0006bc  210a              MOVS     r1,#0xa
0006be  4878              LDR      r0,|L1.2208|
0006c0  f7fffffe          BL       uart_putchar
0006c4  210a              MOVS     r1,#0xa
0006c6  4876              LDR      r0,|L1.2208|
0006c8  f7fffffe          BL       uart_putchar
0006cc  210a              MOVS     r1,#0xa
0006ce  4874              LDR      r0,|L1.2208|
0006d0  f7fffffe          BL       uart_putchar
0006d4  210a              MOVS     r1,#0xa
0006d6  4872              LDR      r0,|L1.2208|
0006d8  f7fffffe          BL       uart_putchar
0006dc  210a              MOVS     r1,#0xa
0006de  4870              LDR      r0,|L1.2208|
0006e0  f7fffffe          BL       uart_putchar
0006e4  210a              MOVS     r1,#0xa
0006e6  486e              LDR      r0,|L1.2208|
0006e8  f7fffffe          BL       uart_putchar
0006ec  210a              MOVS     r1,#0xa
0006ee  486c              LDR      r0,|L1.2208|
0006f0  f7fffffe          BL       uart_putchar
0006f4  210a              MOVS     r1,#0xa
0006f6  486a              LDR      r0,|L1.2208|
0006f8  f7fffffe          BL       uart_putchar
0006fc  210a              MOVS     r1,#0xa
0006fe  4868              LDR      r0,|L1.2208|
000700  f7fffffe          BL       uart_putchar
000704  210a              MOVS     r1,#0xa
000706  4866              LDR      r0,|L1.2208|
000708  f7fffffe          BL       uart_putchar
00070c  210a              MOVS     r1,#0xa
00070e  4864              LDR      r0,|L1.2208|
000710  f7fffffe          BL       uart_putchar
000714  210a              MOVS     r1,#0xa
000716  4862              LDR      r0,|L1.2208|
000718  f7fffffe          BL       uart_putchar
00071c  210a              MOVS     r1,#0xa
00071e  4860              LDR      r0,|L1.2208|
000720  f7fffffe          BL       uart_putchar
000724  210a              MOVS     r1,#0xa
000726  485e              LDR      r0,|L1.2208|
000728  f7fffffe          BL       uart_putchar
00072c  210a              MOVS     r1,#0xa
00072e  485c              LDR      r0,|L1.2208|
000730  f7fffffe          BL       uart_putchar
000734  210a              MOVS     r1,#0xa
000736  485a              LDR      r0,|L1.2208|
000738  f7fffffe          BL       uart_putchar
00073c  210a              MOVS     r1,#0xa
00073e  4858              LDR      r0,|L1.2208|
000740  f7fffffe          BL       uart_putchar
000744  210a              MOVS     r1,#0xa
000746  4856              LDR      r0,|L1.2208|
000748  f7fffffe          BL       uart_putchar
00074c  210a              MOVS     r1,#0xa
00074e  4854              LDR      r0,|L1.2208|
000750  f7fffffe          BL       uart_putchar
000754  210a              MOVS     r1,#0xa
000756  4852              LDR      r0,|L1.2208|
000758  f7fffffe          BL       uart_putchar
00075c  210a              MOVS     r1,#0xa
00075e  4850              LDR      r0,|L1.2208|
000760  f7fffffe          BL       uart_putchar
000764  210a              MOVS     r1,#0xa
000766  484e              LDR      r0,|L1.2208|
000768  f7fffffe          BL       uart_putchar
00076c  210a              MOVS     r1,#0xa
00076e  484c              LDR      r0,|L1.2208|
000770  f7fffffe          BL       uart_putchar
000774  210a              MOVS     r1,#0xa
000776  484a              LDR      r0,|L1.2208|
000778  f7fffffe          BL       uart_putchar
00077c  210a              MOVS     r1,#0xa
00077e  4848              LDR      r0,|L1.2208|
000780  f7fffffe          BL       uart_putchar
000784  210a              MOVS     r1,#0xa
000786  4846              LDR      r0,|L1.2208|
000788  f7fffffe          BL       uart_putchar
00078c  210a              MOVS     r1,#0xa
00078e  4844              LDR      r0,|L1.2208|
000790  f7fffffe          BL       uart_putchar
000794  210a              MOVS     r1,#0xa
000796  4842              LDR      r0,|L1.2208|
000798  f7fffffe          BL       uart_putchar
;;;183    									//memset(data,0,1000);
;;;184    														//timer counts to wait for characters in uart 1 									
;;;185    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00079c  bf00              NOP      
                  |L1.1950|
00079e  a157              ADR      r1,|L1.2300|
0007a0  4835              LDR      r0,|L1.2168|
0007a2  f7fffffe          BL       strstr
0007a6  2800              CMP      r0,#0
0007a8  d109              BNE      |L1.1982|
0007aa  a131              ADR      r1,|L1.2160|
0007ac  4832              LDR      r0,|L1.2168|
0007ae  f7fffffe          BL       strstr
0007b2  2800              CMP      r0,#0
0007b4  d103              BNE      |L1.1982|
0007b6  4839              LDR      r0,|L1.2204|
0007b8  6800              LDR      r0,[r0,#0]  ; tout
0007ba  2805              CMP      r0,#5
0007bc  ddef              BLE      |L1.1950|
                  |L1.1982|
;;;186    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;187    									}
;;;188    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0007be  f7fffffe          BL       clear
;;;189    									//clear();
;;;190    									memset(data,0,strlen(data));
0007c2  483c              LDR      r0,|L1.2228|
0007c4  f7fffffe          BL       strlen
0007c8  4604              MOV      r4,r0
0007ca  4621              MOV      r1,r4
0007cc  4839              LDR      r0,|L1.2228|
0007ce  f7fffffe          BL       __aeabi_memclr
;;;191    									clear();
0007d2  f7fffffe          BL       clear
;;;192    
;;;193    								
;;;194    	
;;;195    	//log_it();		                         //logging
;;;196    		memset(data,0,strlen(data));	
0007d6  4837              LDR      r0,|L1.2228|
0007d8  f7fffffe          BL       strlen
0007dc  4604              MOV      r4,r0
0007de  4621              MOV      r1,r4
0007e0  4834              LDR      r0,|L1.2228|
0007e2  f7fffffe          BL       __aeabi_memclr
;;;197    
;;;198    					   	if(flagch!=1){
0007e6  482f              LDR      r0,|L1.2212|
0007e8  6800              LDR      r0,[r0,#0]  ; flagch
0007ea  2801              CMP      r0,#1
0007ec  d009              BEQ      |L1.2050|
;;;199    							temp=int_erval;				
0007ee  482f              LDR      r0,|L1.2220|
0007f0  6800              LDR      r0,[r0,#0]  ; int_erval
0007f2  492d              LDR      r1,|L1.2216|
0007f4  6008              STR      r0,[r1,#0]  ; temp
;;;200    							int_erval=4;
0007f6  2004              MOVS     r0,#4
0007f8  492c              LDR      r1,|L1.2220|
0007fa  6008              STR      r0,[r1,#0]  ; int_erval
;;;201    							flagch=1;}
0007fc  2001              MOVS     r0,#1
0007fe  4929              LDR      r1,|L1.2212|
000800  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.2050|
;;;202    							clear();	
000802  f7fffffe          BL       clear
;;;203    									GPS_COLLECT();
000806  f7fffffe          BL       GPS_COLLECT
;;;204    									strcat(data,"CH\n");	
00080a  a12b              ADR      r1,|L1.2232|
00080c  4829              LDR      r0,|L1.2228|
00080e  f7fffffe          BL       strcat
;;;205    
;;;206    //*********************************tcp_initialization();//reinitialization*************************************//
;;;207    
;;;208    	
;;;209    msg_sim800(); 
000812  f7fffffe          BL       msg_sim800
;;;210    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
000816  2005              MOVS     r0,#5
000818  a315              ADR      r3,|L1.2160|
00081a  a233              ADR      r2,|L1.2280|
00081c  a139              ADR      r1,|L1.2308|
00081e  9000              STR      r0,[sp,#0]
000820  a039              ADR      r0,|L1.2312|
000822  f7fffffe          BL       send_GSM
;;;211    delay(100);
000826  2064              MOVS     r0,#0x64
000828  f7fffffe          BL       delay
;;;212    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00082c  2004              MOVS     r0,#4
00082e  a310              ADR      r3,|L1.2160|
000830  a239              ADR      r2,|L1.2328|
000832  a134              ADR      r1,|L1.2308|
000834  9000              STR      r0,[sp,#0]
000836  a03d              ADR      r0,|L1.2348|
000838  f7fffffe          BL       send_GSM
;;;213    GPS_COLLECT2();
00083c  f7fffffe          BL       GPS_COLLECT2
;;;214    strcat(data,"CH\n");		
000840  a11d              ADR      r1,|L1.2232|
000842  481c              LDR      r0,|L1.2228|
000844  f7fffffe          BL       strcat
;;;215    GPS_COLLECT2();
000848  f7fffffe          BL       GPS_COLLECT2
;;;216    strcat(data,"CH\n");	
00084c  a11a              ADR      r1,|L1.2232|
00084e  4819              LDR      r0,|L1.2228|
000850  f7fffffe          BL       strcat
;;;217    GPS_COLLECT2();
000854  f7fffffe          BL       GPS_COLLECT2
;;;218    strcat(data,"CH\n");
000858  a117              ADR      r1,|L1.2232|
00085a  4816              LDR      r0,|L1.2228|
00085c  f7fffffe          BL       strcat
;;;219    cond201=(strstr(uart_string_gsm, "OK"));
000860  a128              ADR      r1,|L1.2308|
000862  4805              LDR      r0,|L1.2168|
000864  f7fffffe          BL       strstr
000868  4934              LDR      r1,|L1.2364|
00086a  6008              STR      r0,[r1,#0]  ; cond201
;;;220    cond200=(strstr(uart_string_gsm, "ERROR"));
00086c  a100              ADR      r1,|L1.2160|
00086e  e067              B        |L1.2368|
                  |L1.2160|
000870  4552524f          DCB      "ERROR",0
000874  5200    
000876  00                DCB      0
000877  00                DCB      0
                  |L1.2168|
                          DCD      uart_string_gsm
                  |L1.2172|
                          DCD      stcond2
                  |L1.2176|
000880  4641494c          DCB      "FAIL",0
000884  00      
000885  00                DCB      0
000886  00                DCB      0
000887  00                DCB      0
                  |L1.2184|
                          DCD      stcond3
                  |L1.2188|
00088c  44454143          DCB      "DEACT",0
000890  5400    
000892  00                DCB      0
000893  00                DCB      0
                  |L1.2196|
                          DCD      stcond4
                  |L1.2200|
                          DCD      stcond1
                  |L1.2204|
                          DCD      tout
                  |L1.2208|
                          DCD      0x4006b000
                  |L1.2212|
                          DCD      flagch
                  |L1.2216|
                          DCD      temp
                  |L1.2220|
                          DCD      int_erval
                  |L1.2224|
                          DCD      ||.text||+0x474
                  |L1.2228|
                          DCD      data
                  |L1.2232|
0008b8  43480a00          DCB      "CH\n",0
                  |L1.2236|
                          DCD      at_
                  |L1.2240|
                          DCD      drive
                  |L1.2244|
0008c4  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
0008c8  2b465357
0008cc  52495445
0008d0  3d25735c
0008d4  4c4f472e
0008d8  5458542c
0008dc  312c2564
0008e0  2c31300a
0008e4  0a00    
0008e6  00                DCB      0
0008e7  00                DCB      0
                  |L1.2280|
0008e8  4552524f          DCB      "ERROR\r\n",0
0008ec  520d0a00
                  |L1.2288|
0008f0  3e00              DCB      ">",0
0008f2  00                DCB      0
0008f3  00                DCB      0
                  |L1.2292|
                          DCD      ||k2||
                  |L1.2296|
                          DCD      k
                  |L1.2300|
0008fc  4f4b0d0a          DCB      "OK\r\n",0
000900  00      
000901  00                DCB      0
000902  00                DCB      0
000903  00                DCB      0
                  |L1.2308|
000904  4f4b00            DCB      "OK",0
000907  00                DCB      0
                  |L1.2312|
000908  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
00090c  2b434655
000910  4e3d300d
000914  0d0a0a00
                  |L1.2328|
000918  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
00091c  494e5345
000920  52544544
000924  0d0a4f4b
000928  00      
000929  00                DCB      0
00092a  00                DCB      0
00092b  00                DCB      0
                  |L1.2348|
00092c  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000930  2b434655
000934  4e3d310d
000938  0a00    
00093a  00                DCB      0
00093b  00                DCB      0
                  |L1.2364|
                          DCD      cond201
                  |L1.2368|
000940  48f6              LDR      r0,|L1.3356|
000942  f7fffffe          BL       strstr
000946  49f6              LDR      r1,|L1.3360|
000948  6008              STR      r0,[r1,#0]  ; cond200
;;;221    if((!(cond201|| cond200 ))  && sleep_flag != 1)
00094a  48f6              LDR      r0,|L1.3364|
00094c  6800              LDR      r0,[r0,#0]  ; cond201
00094e  2800              CMP      r0,#0
                  |L1.2384|
000950  d17e              BNE      |L1.2640|
000952  4608              MOV      r0,r1
000954  6800              LDR      r0,[r0,#0]  ; cond200
000956  2800              CMP      r0,#0
000958  d1fa              BNE      |L1.2384|
00095a  48f3              LDR      r0,|L1.3368|
00095c  6800              LDR      r0,[r0,#0]  ; sleep_flag
00095e  2801              CMP      r0,#1
000960  d076              BEQ      |L1.2640|
;;;222    {
;;;223    delay(100);
000962  2064              MOVS     r0,#0x64
000964  f7fffffe          BL       delay
;;;224    clear();//memset(uart_string_gsm,0,5000);
000968  f7fffffe          BL       clear
;;;225    memset(at_,0,100);
00096c  2164              MOVS     r1,#0x64
00096e  48ef              LDR      r0,|L1.3372|
000970  f7fffffe          BL       __aeabi_memclr
;;;226    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000974  48ee              LDR      r0,|L1.3376|
000976  f7fffffe          BL       strlen
00097a  1c44              ADDS     r4,r0,#1
00097c  4623              MOV      r3,r4
00097e  4aed              LDR      r2,|L1.3380|
000980  49ed              LDR      r1,|L1.3384|
000982  48ea              LDR      r0,|L1.3372|
000984  f7fffffe          BL       __2sprintf
;;;227    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000988  2005              MOVS     r0,#5
00098a  4beb              LDR      r3,|L1.3384|
00098c  3b54              SUBS     r3,r3,#0x54
00098e  461a              MOV      r2,r3
000990  3278              ADDS     r2,r2,#0x78
000992  a1ea              ADR      r1,|L1.3388|
000994  9000              STR      r0,[sp,#0]
000996  48e5              LDR      r0,|L1.3372|
000998  f7fffffe          BL       send_SD
;;;228    clear();	
00099c  f7fffffe          BL       clear
;;;229    k2=0;									//string array counter for uart 1
0009a0  2000              MOVS     r0,#0
0009a2  49e7              LDR      r1,|L1.3392|
0009a4  6008              STR      r0,[r1,#0]  ; k2
;;;230    tout=0;	
0009a6  49e7              LDR      r1,|L1.3396|
0009a8  6008              STR      r0,[r1,#0]  ; tout
;;;231    for(k=0;k<strlen(data);k++)
0009aa  49e7              LDR      r1,|L1.3400|
0009ac  6008              STR      r0,[r1,#0]  ; k
0009ae  e00b              B        |L1.2504|
                  |L1.2480|
;;;232    {
;;;233    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0009b0  48df              LDR      r0,|L1.3376|
0009b2  4ae5              LDR      r2,|L1.3400|
0009b4  6812              LDR      r2,[r2,#0]  ; k
0009b6  5c81              LDRB     r1,[r0,r2]
0009b8  48e4              LDR      r0,|L1.3404|
0009ba  f7fffffe          BL       uart_putchar
0009be  48e2              LDR      r0,|L1.3400|
0009c0  6800              LDR      r0,[r0,#0]            ;231  ; k
0009c2  1c40              ADDS     r0,r0,#1              ;231
0009c4  49e0              LDR      r1,|L1.3400|
0009c6  6008              STR      r0,[r1,#0]            ;231  ; k
                  |L1.2504|
0009c8  48d9              LDR      r0,|L1.3376|
0009ca  f7fffffe          BL       strlen
0009ce  49de              LDR      r1,|L1.3400|
0009d0  6809              LDR      r1,[r1,#0]            ;231  ; k
0009d2  4288              CMP      r0,r1                 ;231
0009d4  d8ec              BHI      |L1.2480|
;;;234    }	
;;;235    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0009d6  210a              MOVS     r1,#0xa
0009d8  48dc              LDR      r0,|L1.3404|
0009da  f7fffffe          BL       uart_putchar
0009de  210a              MOVS     r1,#0xa
0009e0  48da              LDR      r0,|L1.3404|
0009e2  f7fffffe          BL       uart_putchar
0009e6  210a              MOVS     r1,#0xa
0009e8  48d8              LDR      r0,|L1.3404|
0009ea  f7fffffe          BL       uart_putchar
0009ee  210a              MOVS     r1,#0xa
0009f0  48d6              LDR      r0,|L1.3404|
0009f2  f7fffffe          BL       uart_putchar
0009f6  210a              MOVS     r1,#0xa
0009f8  48d4              LDR      r0,|L1.3404|
0009fa  f7fffffe          BL       uart_putchar
0009fe  210a              MOVS     r1,#0xa
000a00  48d2              LDR      r0,|L1.3404|
000a02  f7fffffe          BL       uart_putchar
000a06  210a              MOVS     r1,#0xa
000a08  48d0              LDR      r0,|L1.3404|
000a0a  f7fffffe          BL       uart_putchar
000a0e  210a              MOVS     r1,#0xa
000a10  48ce              LDR      r0,|L1.3404|
000a12  f7fffffe          BL       uart_putchar
000a16  210a              MOVS     r1,#0xa
000a18  48cc              LDR      r0,|L1.3404|
000a1a  f7fffffe          BL       uart_putchar
000a1e  210a              MOVS     r1,#0xa
000a20  48ca              LDR      r0,|L1.3404|
000a22  f7fffffe          BL       uart_putchar
000a26  210a              MOVS     r1,#0xa
000a28  48c8              LDR      r0,|L1.3404|
000a2a  f7fffffe          BL       uart_putchar
000a2e  210a              MOVS     r1,#0xa
000a30  48c6              LDR      r0,|L1.3404|
000a32  f7fffffe          BL       uart_putchar
000a36  210a              MOVS     r1,#0xa
000a38  48c4              LDR      r0,|L1.3404|
000a3a  f7fffffe          BL       uart_putchar
000a3e  210a              MOVS     r1,#0xa
000a40  48c2              LDR      r0,|L1.3404|
000a42  f7fffffe          BL       uart_putchar
000a46  210a              MOVS     r1,#0xa
000a48  48c0              LDR      r0,|L1.3404|
000a4a  f7fffffe          BL       uart_putchar
000a4e  e000              B        |L1.2642|
                  |L1.2640|
000a50  e0d2              B        |L1.3064|
                  |L1.2642|
000a52  210a              MOVS     r1,#0xa
000a54  48bd              LDR      r0,|L1.3404|
000a56  f7fffffe          BL       uart_putchar
000a5a  210a              MOVS     r1,#0xa
000a5c  48bb              LDR      r0,|L1.3404|
000a5e  f7fffffe          BL       uart_putchar
000a62  210a              MOVS     r1,#0xa
000a64  48b9              LDR      r0,|L1.3404|
000a66  f7fffffe          BL       uart_putchar
000a6a  210a              MOVS     r1,#0xa
000a6c  48b7              LDR      r0,|L1.3404|
000a6e  f7fffffe          BL       uart_putchar
000a72  210a              MOVS     r1,#0xa
000a74  48b5              LDR      r0,|L1.3404|
000a76  f7fffffe          BL       uart_putchar
000a7a  210a              MOVS     r1,#0xa
000a7c  48b3              LDR      r0,|L1.3404|
000a7e  f7fffffe          BL       uart_putchar
000a82  210a              MOVS     r1,#0xa
000a84  48b1              LDR      r0,|L1.3404|
000a86  f7fffffe          BL       uart_putchar
000a8a  210a              MOVS     r1,#0xa
000a8c  48af              LDR      r0,|L1.3404|
000a8e  f7fffffe          BL       uart_putchar
000a92  210a              MOVS     r1,#0xa
000a94  48ad              LDR      r0,|L1.3404|
000a96  f7fffffe          BL       uart_putchar
000a9a  210a              MOVS     r1,#0xa
000a9c  48ab              LDR      r0,|L1.3404|
000a9e  f7fffffe          BL       uart_putchar
000aa2  210a              MOVS     r1,#0xa
000aa4  48a9              LDR      r0,|L1.3404|
000aa6  f7fffffe          BL       uart_putchar
000aaa  210a              MOVS     r1,#0xa
000aac  48a7              LDR      r0,|L1.3404|
000aae  f7fffffe          BL       uart_putchar
000ab2  210a              MOVS     r1,#0xa
000ab4  48a5              LDR      r0,|L1.3404|
000ab6  f7fffffe          BL       uart_putchar
000aba  210a              MOVS     r1,#0xa
000abc  48a3              LDR      r0,|L1.3404|
000abe  f7fffffe          BL       uart_putchar
000ac2  210a              MOVS     r1,#0xa
000ac4  48a1              LDR      r0,|L1.3404|
000ac6  f7fffffe          BL       uart_putchar
000aca  210a              MOVS     r1,#0xa
000acc  489f              LDR      r0,|L1.3404|
000ace  f7fffffe          BL       uart_putchar
000ad2  210a              MOVS     r1,#0xa
000ad4  489d              LDR      r0,|L1.3404|
000ad6  f7fffffe          BL       uart_putchar
000ada  210a              MOVS     r1,#0xa
000adc  489b              LDR      r0,|L1.3404|
000ade  f7fffffe          BL       uart_putchar
000ae2  210a              MOVS     r1,#0xa
000ae4  4899              LDR      r0,|L1.3404|
000ae6  f7fffffe          BL       uart_putchar
000aea  210a              MOVS     r1,#0xa
000aec  4897              LDR      r0,|L1.3404|
000aee  f7fffffe          BL       uart_putchar
000af2  210a              MOVS     r1,#0xa
000af4  4895              LDR      r0,|L1.3404|
000af6  f7fffffe          BL       uart_putchar
000afa  210a              MOVS     r1,#0xa
000afc  4893              LDR      r0,|L1.3404|
000afe  f7fffffe          BL       uart_putchar
000b02  210a              MOVS     r1,#0xa
000b04  4891              LDR      r0,|L1.3404|
000b06  f7fffffe          BL       uart_putchar
000b0a  210a              MOVS     r1,#0xa
000b0c  488f              LDR      r0,|L1.3404|
000b0e  f7fffffe          BL       uart_putchar
000b12  210a              MOVS     r1,#0xa
000b14  488d              LDR      r0,|L1.3404|
000b16  f7fffffe          BL       uart_putchar
000b1a  210a              MOVS     r1,#0xa
000b1c  488b              LDR      r0,|L1.3404|
000b1e  f7fffffe          BL       uart_putchar
000b22  210a              MOVS     r1,#0xa
000b24  4889              LDR      r0,|L1.3404|
000b26  f7fffffe          BL       uart_putchar
000b2a  210a              MOVS     r1,#0xa
000b2c  4887              LDR      r0,|L1.3404|
000b2e  f7fffffe          BL       uart_putchar
000b32  210a              MOVS     r1,#0xa
000b34  4885              LDR      r0,|L1.3404|
000b36  f7fffffe          BL       uart_putchar
000b3a  210a              MOVS     r1,#0xa
000b3c  4883              LDR      r0,|L1.3404|
000b3e  f7fffffe          BL       uart_putchar
000b42  210a              MOVS     r1,#0xa
000b44  4881              LDR      r0,|L1.3404|
000b46  f7fffffe          BL       uart_putchar
000b4a  210a              MOVS     r1,#0xa
000b4c  487f              LDR      r0,|L1.3404|
000b4e  f7fffffe          BL       uart_putchar
000b52  210a              MOVS     r1,#0xa
000b54  487d              LDR      r0,|L1.3404|
000b56  f7fffffe          BL       uart_putchar
000b5a  210a              MOVS     r1,#0xa
000b5c  487b              LDR      r0,|L1.3404|
000b5e  f7fffffe          BL       uart_putchar
000b62  210a              MOVS     r1,#0xa
000b64  4879              LDR      r0,|L1.3404|
000b66  f7fffffe          BL       uart_putchar
000b6a  210a              MOVS     r1,#0xa
000b6c  4877              LDR      r0,|L1.3404|
000b6e  f7fffffe          BL       uart_putchar
000b72  210a              MOVS     r1,#0xa
000b74  4875              LDR      r0,|L1.3404|
000b76  f7fffffe          BL       uart_putchar
000b7a  210a              MOVS     r1,#0xa
000b7c  4873              LDR      r0,|L1.3404|
000b7e  f7fffffe          BL       uart_putchar
000b82  210a              MOVS     r1,#0xa
000b84  4871              LDR      r0,|L1.3404|
000b86  f7fffffe          BL       uart_putchar
000b8a  210a              MOVS     r1,#0xa
000b8c  486f              LDR      r0,|L1.3404|
000b8e  f7fffffe          BL       uart_putchar
000b92  210a              MOVS     r1,#0xa
000b94  486d              LDR      r0,|L1.3404|
000b96  f7fffffe          BL       uart_putchar
000b9a  210a              MOVS     r1,#0xa
000b9c  486b              LDR      r0,|L1.3404|
000b9e  f7fffffe          BL       uart_putchar
;;;236    									//memset(data,0,1000);
;;;237    														//timer counts to wait for characters in uart 1 									
;;;238    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000ba2  bf00              NOP      
                  |L1.2980|
000ba4  4964              LDR      r1,|L1.3384|
000ba6  3138              ADDS     r1,r1,#0x38
000ba8  485c              LDR      r0,|L1.3356|
000baa  f7fffffe          BL       strstr
000bae  2800              CMP      r0,#0
000bb0  d10a              BNE      |L1.3016|
000bb2  4961              LDR      r1,|L1.3384|
000bb4  3954              SUBS     r1,r1,#0x54
000bb6  4859              LDR      r0,|L1.3356|
000bb8  f7fffffe          BL       strstr
000bbc  2800              CMP      r0,#0
000bbe  d103              BNE      |L1.3016|
000bc0  4860              LDR      r0,|L1.3396|
000bc2  6800              LDR      r0,[r0,#0]  ; tout
000bc4  2805              CMP      r0,#5
000bc6  dded              BLE      |L1.2980|
                  |L1.3016|
;;;239    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;240    									}
;;;241    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000bc8  f7fffffe          BL       clear
;;;242    									//clear();
;;;243    									memset(data,0,strlen(data));
000bcc  4858              LDR      r0,|L1.3376|
000bce  f7fffffe          BL       strlen
000bd2  4604              MOV      r4,r0
000bd4  4621              MOV      r1,r4
000bd6  4856              LDR      r0,|L1.3376|
000bd8  f7fffffe          BL       __aeabi_memclr
;;;244    									clear();
000bdc  f7fffffe          BL       clear
;;;245    									RESET_OFF;delay(100);
000be0  2020              MOVS     r0,#0x20
000be2  495b              LDR      r1,|L1.3408|
000be4  6088              STR      r0,[r1,#8]
000be6  2064              MOVS     r0,#0x64
000be8  f7fffffe          BL       delay
;;;246    									RESET_ON;delay(100);		
000bec  2020              MOVS     r0,#0x20
000bee  4958              LDR      r1,|L1.3408|
000bf0  6048              STR      r0,[r1,#4]
000bf2  2064              MOVS     r0,#0x64
000bf4  f7fffffe          BL       delay
                  |L1.3064|
;;;247    }
;;;248    	
;;;249    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000bf8  2004              MOVS     r0,#4
000bfa  a356              ADR      r3,|L1.3412|
000bfc  4a4e              LDR      r2,|L1.3384|
000bfe  3224              ADDS     r2,r2,#0x24
000c00  a156              ADR      r1,|L1.3420|
000c02  9000              STR      r0,[sp,#0]
000c04  a056              ADR      r0,|L1.3424|
000c06  f7fffffe          BL       send_GSM
;;;250    GPS_COLLECT2();
000c0a  f7fffffe          BL       GPS_COLLECT2
;;;251    strcat(data,"CH\n");	
000c0e  494a              LDR      r1,|L1.3384|
000c10  390c              SUBS     r1,r1,#0xc
000c12  4847              LDR      r0,|L1.3376|
000c14  f7fffffe          BL       strcat
;;;252    memset(at_,0,100);
000c18  2164              MOVS     r1,#0x64
000c1a  4844              LDR      r0,|L1.3372|
000c1c  f7fffffe          BL       __aeabi_memclr
;;;253    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000c20  4a53              LDR      r2,|L1.3440|
000c22  a154              ADR      r1,|L1.3444|
000c24  4841              LDR      r0,|L1.3372|
000c26  f7fffffe          BL       __2sprintf
;;;254    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000c2a  4857              LDR      r0,|L1.3464|
000c2c  6800              LDR      r0,[r0,#0]  ; tmeout
000c2e  a349              ADR      r3,|L1.3412|
000c30  4a41              LDR      r2,|L1.3384|
000c32  3224              ADDS     r2,r2,#0x24
000c34  a149              ADR      r1,|L1.3420|
000c36  9000              STR      r0,[sp,#0]
000c38  483c              LDR      r0,|L1.3372|
000c3a  f7fffffe          BL       send_GSM
;;;255    msg_sim800(); 
000c3e  f7fffffe          BL       msg_sim800
;;;256    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000c42  2004              MOVS     r0,#4
000c44  4b3c              LDR      r3,|L1.3384|
000c46  3b38              SUBS     r3,r3,#0x38
000c48  461a              MOV      r2,r3
000c4a  325c              ADDS     r2,r2,#0x5c
000c4c  a143              ADR      r1,|L1.3420|
000c4e  9000              STR      r0,[sp,#0]
000c50  a04e              ADR      r0,|L1.3468|
000c52  f7fffffe          BL       send_GSM
;;;257    GPS_COLLECT2();
000c56  f7fffffe          BL       GPS_COLLECT2
;;;258    strcat(data,"CH\n");	
000c5a  4937              LDR      r1,|L1.3384|
000c5c  390c              SUBS     r1,r1,#0xc
000c5e  4834              LDR      r0,|L1.3376|
000c60  f7fffffe          BL       strcat
;;;259    GPS_COLLECT2();
000c64  f7fffffe          BL       GPS_COLLECT2
;;;260    strcat(data,"CH\n");	
000c68  4933              LDR      r1,|L1.3384|
000c6a  390c              SUBS     r1,r1,#0xc
000c6c  4830              LDR      r0,|L1.3376|
000c6e  f7fffffe          BL       strcat
;;;261    
;;;262    
;;;263    msg_sim800(); 
000c72  f7fffffe          BL       msg_sim800
;;;264    GPS_COLLECT2();
000c76  f7fffffe          BL       GPS_COLLECT2
;;;265    strcat(data,"CH\n");	
000c7a  492f              LDR      r1,|L1.3384|
000c7c  390c              SUBS     r1,r1,#0xc
000c7e  482c              LDR      r0,|L1.3376|
000c80  f7fffffe          BL       strcat
;;;266    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000c84  f7fffffe          BL       clear
000c88  a044              ADR      r0,|L1.3484|
000c8a  f7fffffe          BL       send_modem
000c8e  f7fffffe          BL       clear
;;;267    					delay(20);
000c92  2014              MOVS     r0,#0x14
000c94  f7fffffe          BL       delay
;;;268    
;;;269    
;;;270    msg_sim800(); 
000c98  f7fffffe          BL       msg_sim800
;;;271    
;;;272    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000c9c  4b43              LDR      r3,|L1.3500|
000c9e  4a44              LDR      r2,|L1.3504|
000ca0  a144              ADR      r1,|L1.3508|
000ca2  4822              LDR      r0,|L1.3372|
000ca4  f7fffffe          BL       __2sprintf
;;;273    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000ca8  4837              LDR      r0,|L1.3464|
000caa  6800              LDR      r0,[r0,#0]  ; tmeout
000cac  a329              ADR      r3,|L1.3412|
000cae  4a22              LDR      r2,|L1.3384|
000cb0  3a54              SUBS     r2,r2,#0x54
000cb2  a148              ADR      r1,|L1.3540|
000cb4  9000              STR      r0,[sp,#0]
000cb6  481d              LDR      r0,|L1.3372|
000cb8  f7fffffe          BL       send_GSM
;;;274    						clear();
000cbc  f7fffffe          BL       clear
;;;275    						
;;;276    						
;;;277    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
000cc0  4831              LDR      r0,|L1.3464|
000cc2  6800              LDR      r0,[r0,#0]  ; tmeout
000cc4  a345              ADR      r3,|L1.3548|
000cc6  4a1c              LDR      r2,|L1.3384|
000cc8  3a54              SUBS     r2,r2,#0x54
000cca  a11c              ADR      r1,|L1.3388|
000ccc  9000              STR      r0,[sp,#0]
000cce  a047              ADR      r0,|L1.3564|
000cd0  f7fffffe          BL       send_GSM
;;;278    //*********************************tcp_initialization_ends*****************************************************//							
;;;279    									
;;;280    						clear();		
000cd4  f7fffffe          BL       clear
;;;281    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
000cd8  213e              MOVS     r1,#0x3e
000cda  4810              LDR      r0,|L1.3356|
000cdc  f7fffffe          BL       mystrstr
000ce0  4946              LDR      r1,|L1.3580|
000ce2  7008              STRB     r0,[r1,#0]
;;;282    								if(cond)	
000ce4  4608              MOV      r0,r1
000ce6  7800              LDRB     r0,[r0,#0]  ; cond
000ce8  2800              CMP      r0,#0
000cea  d016              BEQ      |L1.3354|
;;;283    								{	
;;;284    
;;;285    									clear();
000cec  f7fffffe          BL       clear
;;;286    									memset(uart_string_gsm,0,5000);
000cf0  4943              LDR      r1,|L1.3584|
000cf2  480a              LDR      r0,|L1.3356|
000cf4  f7fffffe          BL       __aeabi_memclr
;;;287    									strcat(data,"\n");
000cf8  a127              ADR      r1,|L1.3480|
000cfa  480d              LDR      r0,|L1.3376|
000cfc  f7fffffe          BL       strcat
;;;288    									len=strlen(data);
000d00  480b              LDR      r0,|L1.3376|
000d02  f7fffffe          BL       strlen
000d06  493f              LDR      r1,|L1.3588|
000d08  6008              STR      r0,[r1,#0]  ; len
;;;289    									tout=0;
000d0a  2000              MOVS     r0,#0
000d0c  490d              LDR      r1,|L1.3396|
000d0e  6008              STR      r0,[r1,#0]  ; tout
;;;290    									k2=0;
000d10  490b              LDR      r1,|L1.3392|
000d12  6008              STR      r0,[r1,#0]  ; k2
;;;291    									for(k=0;k<len;k++)
000d14  490c              LDR      r1,|L1.3400|
000d16  6008              STR      r0,[r1,#0]  ; k
000d18  e082              B        |L1.3616|
                  |L1.3354|
000d1a  e224              B        |L1.4454|
                  |L1.3356|
                          DCD      uart_string_gsm
                  |L1.3360|
                          DCD      cond200
                  |L1.3364|
                          DCD      cond201
                  |L1.3368|
                          DCD      sleep_flag
                  |L1.3372|
                          DCD      at_
                  |L1.3376|
                          DCD      data
                  |L1.3380|
                          DCD      drive
                  |L1.3384|
                          DCD      ||.text||+0x8c4
                  |L1.3388|
000d3c  3e00              DCB      ">",0
000d3e  00                DCB      0
000d3f  00                DCB      0
                  |L1.3392|
                          DCD      ||k2||
                  |L1.3396|
                          DCD      tout
                  |L1.3400|
                          DCD      k
                  |L1.3404|
                          DCD      0x4006b000
                  |L1.3408|
                          DCD      0x400ff080
                  |L1.3412|
000d54  4552524f          DCB      "ERROR:",0
000d58  523a00  
000d5b  00                DCB      0
                  |L1.3420|
000d5c  4f4b00            DCB      "OK",0
000d5f  00                DCB      0
                  |L1.3424|
000d60  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
000d64  2b434950
000d68  53485554
000d6c  0d0a00  
000d6f  00                DCB      0
                  |L1.3440|
                          DCD      apn
                  |L1.3444|
000d74  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
000d78  2b435354
000d7c  543d2225
000d80  73220d0a
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L1.3464|
                          DCD      tmeout
                  |L1.3468|
000d8c  0d0a4154          DCB      "\r\nAT+CIICR\r\r"
000d90  2b434949
000d94  43520d0d
                  |L1.3480|
000d98  0a00              DCB      "\n",0
000d9a  00                DCB      0
000d9b  00                DCB      0
                  |L1.3484|
000d9c  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
000da0  43494653
000da4  520d0d0a
000da8  00      
000da9  00                DCB      0
000daa  00                DCB      0
000dab  00                DCB      0
                  |L1.3500|
                          DCD      port
                  |L1.3504|
                          DCD      ||ip||
                  |L1.3508|
000db4  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000db8  2b434950
000dbc  53544152
000dc0  543d2254
000dc4  4350222c
000dc8  22257322
000dcc  2c222573
000dd0  220d0a00
                  |L1.3540|
000dd4  434f4e4e          DCB      "CONNECT",0
000dd8  45435400
                  |L1.3548|
000ddc  434f4e4e          DCB      "CONNECT FAIL",0
000de0  45435420
000de4  4641494c
000de8  00      
000de9  00                DCB      0
000dea  00                DCB      0
000deb  00                DCB      0
                  |L1.3564|
000dec  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
000df0  2b434950
000df4  53454e44
000df8  0d0a00  
000dfb  00                DCB      0
                  |L1.3580|
                          DCD      cond
                  |L1.3584|
                          DCD      0x00001388
                  |L1.3588|
                          DCD      len
                  |L1.3592|
;;;292    									{
;;;293    										uart_putchar(UART1_BASE_PTR, data[k]);
000e08  48fd              LDR      r0,|L1.4608|
000e0a  4afe              LDR      r2,|L1.4612|
000e0c  6812              LDR      r2,[r2,#0]  ; k
000e0e  5c81              LDRB     r1,[r0,r2]
000e10  48fd              LDR      r0,|L1.4616|
000e12  f7fffffe          BL       uart_putchar
000e16  48fb              LDR      r0,|L1.4612|
000e18  6800              LDR      r0,[r0,#0]            ;291  ; k
000e1a  1c40              ADDS     r0,r0,#1              ;291
000e1c  49f9              LDR      r1,|L1.4612|
000e1e  6008              STR      r0,[r1,#0]            ;291  ; k
                  |L1.3616|
000e20  48f8              LDR      r0,|L1.4612|
000e22  6800              LDR      r0,[r0,#0]            ;291  ; k
000e24  49f9              LDR      r1,|L1.4620|
000e26  6809              LDR      r1,[r1,#0]            ;291  ; len
000e28  4288              CMP      r0,r1                 ;291
000e2a  dbed              BLT      |L1.3592|
;;;294    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000e2c  210a              MOVS     r1,#0xa
000e2e  48f6              LDR      r0,|L1.4616|
000e30  f7fffffe          BL       uart_putchar
000e34  211a              MOVS     r1,#0x1a
000e36  48f4              LDR      r0,|L1.4616|
000e38  f7fffffe          BL       uart_putchar
000e3c  211a              MOVS     r1,#0x1a
000e3e  48f2              LDR      r0,|L1.4616|
000e40  f7fffffe          BL       uart_putchar
000e44  211a              MOVS     r1,#0x1a
000e46  48f0              LDR      r0,|L1.4616|
000e48  f7fffffe          BL       uart_putchar
;;;295    									do
000e4c  bf00              NOP      
                  |L1.3662|
;;;296    																{stcond1=strstr(uart_string_gsm,"SEND OK");
000e4e  49f0              LDR      r1,|L1.4624|
000e50  48f0              LDR      r0,|L1.4628|
000e52  f7fffffe          BL       strstr
000e56  49f0              LDR      r1,|L1.4632|
000e58  6008              STR      r0,[r1,#0]  ; stcond1
;;;297    																	stcond2=strstr(uart_string_gsm, "ERROR");
000e5a  49f0              LDR      r1,|L1.4636|
000e5c  48ed              LDR      r0,|L1.4628|
000e5e  f7fffffe          BL       strstr
000e62  49ef              LDR      r1,|L1.4640|
000e64  6008              STR      r0,[r1,#0]  ; stcond2
;;;298    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000e66  49ef              LDR      r1,|L1.4644|
000e68  48ea              LDR      r0,|L1.4628|
000e6a  f7fffffe          BL       strstr
000e6e  49ee              LDR      r1,|L1.4648|
000e70  6008              STR      r0,[r1,#0]  ; stcond3
;;;299    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000e72  49ea              LDR      r1,|L1.4636|
000e74  311c              ADDS     r1,r1,#0x1c
000e76  48e7              LDR      r0,|L1.4628|
000e78  f7fffffe          BL       strstr
000e7c  49eb              LDR      r1,|L1.4652|
000e7e  6008              STR      r0,[r1,#0]  ; stcond4
;;;300    																	
;;;301    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
000e80  48e7              LDR      r0,|L1.4640|
000e82  6800              LDR      r0,[r0,#0]  ; stcond2
000e84  2800              CMP      r0,#0
000e86  d10f              BNE      |L1.3752|
000e88  48e7              LDR      r0,|L1.4648|
000e8a  6800              LDR      r0,[r0,#0]  ; stcond3
000e8c  2800              CMP      r0,#0
000e8e  d10b              BNE      |L1.3752|
000e90  4608              MOV      r0,r1
000e92  6800              LDR      r0,[r0,#0]  ; stcond4
000e94  2800              CMP      r0,#0
000e96  d107              BNE      |L1.3752|
000e98  48df              LDR      r0,|L1.4632|
000e9a  6800              LDR      r0,[r0,#0]  ; stcond1
000e9c  2800              CMP      r0,#0
000e9e  d103              BNE      |L1.3752|
000ea0  48e3              LDR      r0,|L1.4656|
000ea2  6800              LDR      r0,[r0,#0]  ; tout
000ea4  2804              CMP      r0,#4
000ea6  ddd2              BLE      |L1.3662|
                  |L1.3752|
;;;302    															//	delay(10);clear();
;;;303    														uart_putchar(UART1_BASE_PTR,0x1A);
000ea8  211a              MOVS     r1,#0x1a
000eaa  48d7              LDR      r0,|L1.4616|
000eac  f7fffffe          BL       uart_putchar
;;;304    											//	delay(10);
;;;305    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000eb0  211a              MOVS     r1,#0x1a
000eb2  48d5              LDR      r0,|L1.4616|
000eb4  f7fffffe          BL       uart_putchar
000eb8  211a              MOVS     r1,#0x1a
000eba  48d3              LDR      r0,|L1.4616|
000ebc  f7fffffe          BL       uart_putchar
000ec0  211a              MOVS     r1,#0x1a
000ec2  48d1              LDR      r0,|L1.4616|
000ec4  f7fffffe          BL       uart_putchar
;;;306    						
;;;307    
;;;308    
;;;309    									
;;;310    															
;;;311    															
;;;312    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;313    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;314    															
;;;315    														//qwe=strlen(uart_string_gsm);
;;;316    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;317    															delay(20);
000ec8  2014              MOVS     r0,#0x14
000eca  f7fffffe          BL       delay
;;;318    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
000ece  49d0              LDR      r1,|L1.4624|
000ed0  48d0              LDR      r0,|L1.4628|
000ed2  f7fffffe          BL       strstr
000ed6  49d7              LDR      r1,|L1.4660|
000ed8  6008              STR      r0,[r1,#0]  ; con1d
;;;319    																if(!con1d)
000eda  4608              MOV      r0,r1
000edc  6800              LDR      r0,[r0,#0]  ; con1d
000ede  2800              CMP      r0,#0
000ee0  d17e              BNE      |L1.4064|
;;;320    																{
;;;321    																	
;;;322    																	
;;;323    																	
;;;324    																	
;;;325    																	
;;;326    	delay(100);
000ee2  2064              MOVS     r0,#0x64
000ee4  f7fffffe          BL       delay
;;;327    		clear();//memset(uart_string_gsm,0,5000);
000ee8  f7fffffe          BL       clear
;;;328    	
;;;329    	memset(at_,0,100);
000eec  2164              MOVS     r1,#0x64
000eee  48d2              LDR      r0,|L1.4664|
000ef0  f7fffffe          BL       __aeabi_memclr
;;;330    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000ef4  48c2              LDR      r0,|L1.4608|
000ef6  f7fffffe          BL       strlen
000efa  1c44              ADDS     r4,r0,#1
000efc  4623              MOV      r3,r4
000efe  4acf              LDR      r2,|L1.4668|
000f00  49c6              LDR      r1,|L1.4636|
000f02  3154              ADDS     r1,r1,#0x54
000f04  48cc              LDR      r0,|L1.4664|
000f06  f7fffffe          BL       __2sprintf
;;;331    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000f0a  2005              MOVS     r0,#5
000f0c  4bc3              LDR      r3,|L1.4636|
000f0e  461a              MOV      r2,r3
000f10  3278              ADDS     r2,r2,#0x78
000f12  a1cb              ADR      r1,|L1.4672|
000f14  9000              STR      r0,[sp,#0]
000f16  48c8              LDR      r0,|L1.4664|
000f18  f7fffffe          BL       send_SD
;;;332    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;333    //	if(strstr(uart_string_gsm,"ERROR")){
;;;334    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;335    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;336    //	}
;;;337    	
;;;338    clear();	
000f1c  f7fffffe          BL       clear
;;;339    									k2=0;									//string array counter for uart 1
000f20  2000              MOVS     r0,#0
000f22  49c8              LDR      r1,|L1.4676|
000f24  6008              STR      r0,[r1,#0]  ; k2
;;;340    									tout=0;	
000f26  49c2              LDR      r1,|L1.4656|
000f28  6008              STR      r0,[r1,#0]  ; tout
;;;341    		for(k=0;k<strlen(data);k++)
000f2a  49b6              LDR      r1,|L1.4612|
000f2c  6008              STR      r0,[r1,#0]  ; k
000f2e  e00b              B        |L1.3912|
                  |L1.3888|
;;;342    		{
;;;343    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000f30  48b3              LDR      r0,|L1.4608|
000f32  4ab4              LDR      r2,|L1.4612|
000f34  6812              LDR      r2,[r2,#0]  ; k
000f36  5c81              LDRB     r1,[r0,r2]
000f38  48b3              LDR      r0,|L1.4616|
000f3a  f7fffffe          BL       uart_putchar
000f3e  48b1              LDR      r0,|L1.4612|
000f40  6800              LDR      r0,[r0,#0]            ;341  ; k
000f42  1c40              ADDS     r0,r0,#1              ;341
000f44  49af              LDR      r1,|L1.4612|
000f46  6008              STR      r0,[r1,#0]            ;341  ; k
                  |L1.3912|
000f48  48ad              LDR      r0,|L1.4608|
000f4a  f7fffffe          BL       strlen
000f4e  49ad              LDR      r1,|L1.4612|
000f50  6809              LDR      r1,[r1,#0]            ;341  ; k
000f52  4288              CMP      r0,r1                 ;341
000f54  d8ec              BHI      |L1.3888|
;;;344    		}	
;;;345    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000f56  210a              MOVS     r1,#0xa
000f58  48ab              LDR      r0,|L1.4616|
000f5a  f7fffffe          BL       uart_putchar
000f5e  210a              MOVS     r1,#0xa
000f60  48a9              LDR      r0,|L1.4616|
000f62  f7fffffe          BL       uart_putchar
000f66  210a              MOVS     r1,#0xa
000f68  48a7              LDR      r0,|L1.4616|
000f6a  f7fffffe          BL       uart_putchar
000f6e  210a              MOVS     r1,#0xa
000f70  48a5              LDR      r0,|L1.4616|
000f72  f7fffffe          BL       uart_putchar
000f76  210a              MOVS     r1,#0xa
000f78  48a3              LDR      r0,|L1.4616|
000f7a  f7fffffe          BL       uart_putchar
000f7e  210a              MOVS     r1,#0xa
000f80  48a1              LDR      r0,|L1.4616|
000f82  f7fffffe          BL       uart_putchar
000f86  210a              MOVS     r1,#0xa
000f88  489f              LDR      r0,|L1.4616|
000f8a  f7fffffe          BL       uart_putchar
000f8e  210a              MOVS     r1,#0xa
000f90  489d              LDR      r0,|L1.4616|
000f92  f7fffffe          BL       uart_putchar
000f96  210a              MOVS     r1,#0xa
000f98  489b              LDR      r0,|L1.4616|
000f9a  f7fffffe          BL       uart_putchar
000f9e  210a              MOVS     r1,#0xa
000fa0  4899              LDR      r0,|L1.4616|
000fa2  f7fffffe          BL       uart_putchar
000fa6  210a              MOVS     r1,#0xa
000fa8  4897              LDR      r0,|L1.4616|
000faa  f7fffffe          BL       uart_putchar
000fae  210a              MOVS     r1,#0xa
000fb0  4895              LDR      r0,|L1.4616|
000fb2  f7fffffe          BL       uart_putchar
000fb6  210a              MOVS     r1,#0xa
000fb8  4893              LDR      r0,|L1.4616|
000fba  f7fffffe          BL       uart_putchar
000fbe  210a              MOVS     r1,#0xa
000fc0  4891              LDR      r0,|L1.4616|
000fc2  f7fffffe          BL       uart_putchar
000fc6  210a              MOVS     r1,#0xa
000fc8  488f              LDR      r0,|L1.4616|
000fca  f7fffffe          BL       uart_putchar
000fce  210a              MOVS     r1,#0xa
000fd0  488d              LDR      r0,|L1.4616|
000fd2  f7fffffe          BL       uart_putchar
000fd6  210a              MOVS     r1,#0xa
000fd8  488b              LDR      r0,|L1.4616|
000fda  f7fffffe          BL       uart_putchar
000fde  e000              B        |L1.4066|
                  |L1.4064|
000fe0  e0be              B        |L1.4448|
                  |L1.4066|
000fe2  210a              MOVS     r1,#0xa
000fe4  4888              LDR      r0,|L1.4616|
000fe6  f7fffffe          BL       uart_putchar
000fea  210a              MOVS     r1,#0xa
000fec  4886              LDR      r0,|L1.4616|
000fee  f7fffffe          BL       uart_putchar
000ff2  210a              MOVS     r1,#0xa
000ff4  4884              LDR      r0,|L1.4616|
000ff6  f7fffffe          BL       uart_putchar
000ffa  210a              MOVS     r1,#0xa
000ffc  4882              LDR      r0,|L1.4616|
000ffe  f7fffffe          BL       uart_putchar
001002  210a              MOVS     r1,#0xa
001004  4880              LDR      r0,|L1.4616|
001006  f7fffffe          BL       uart_putchar
00100a  210a              MOVS     r1,#0xa
00100c  487e              LDR      r0,|L1.4616|
00100e  f7fffffe          BL       uart_putchar
001012  210a              MOVS     r1,#0xa
001014  487c              LDR      r0,|L1.4616|
001016  f7fffffe          BL       uart_putchar
00101a  210a              MOVS     r1,#0xa
00101c  487a              LDR      r0,|L1.4616|
00101e  f7fffffe          BL       uart_putchar
001022  210a              MOVS     r1,#0xa
001024  4878              LDR      r0,|L1.4616|
001026  f7fffffe          BL       uart_putchar
00102a  210a              MOVS     r1,#0xa
00102c  4876              LDR      r0,|L1.4616|
00102e  f7fffffe          BL       uart_putchar
001032  210a              MOVS     r1,#0xa
001034  4874              LDR      r0,|L1.4616|
001036  f7fffffe          BL       uart_putchar
00103a  210a              MOVS     r1,#0xa
00103c  4872              LDR      r0,|L1.4616|
00103e  f7fffffe          BL       uart_putchar
001042  210a              MOVS     r1,#0xa
001044  4870              LDR      r0,|L1.4616|
001046  f7fffffe          BL       uart_putchar
00104a  210a              MOVS     r1,#0xa
00104c  486e              LDR      r0,|L1.4616|
00104e  f7fffffe          BL       uart_putchar
001052  210a              MOVS     r1,#0xa
001054  486c              LDR      r0,|L1.4616|
001056  f7fffffe          BL       uart_putchar
00105a  210a              MOVS     r1,#0xa
00105c  486a              LDR      r0,|L1.4616|
00105e  f7fffffe          BL       uart_putchar
001062  210a              MOVS     r1,#0xa
001064  4868              LDR      r0,|L1.4616|
001066  f7fffffe          BL       uart_putchar
00106a  210a              MOVS     r1,#0xa
00106c  4866              LDR      r0,|L1.4616|
00106e  f7fffffe          BL       uart_putchar
001072  210a              MOVS     r1,#0xa
001074  4864              LDR      r0,|L1.4616|
001076  f7fffffe          BL       uart_putchar
00107a  210a              MOVS     r1,#0xa
00107c  4862              LDR      r0,|L1.4616|
00107e  f7fffffe          BL       uart_putchar
001082  210a              MOVS     r1,#0xa
001084  4860              LDR      r0,|L1.4616|
001086  f7fffffe          BL       uart_putchar
00108a  210a              MOVS     r1,#0xa
00108c  485e              LDR      r0,|L1.4616|
00108e  f7fffffe          BL       uart_putchar
001092  210a              MOVS     r1,#0xa
001094  485c              LDR      r0,|L1.4616|
001096  f7fffffe          BL       uart_putchar
00109a  210a              MOVS     r1,#0xa
00109c  485a              LDR      r0,|L1.4616|
00109e  f7fffffe          BL       uart_putchar
0010a2  210a              MOVS     r1,#0xa
0010a4  4858              LDR      r0,|L1.4616|
0010a6  f7fffffe          BL       uart_putchar
0010aa  210a              MOVS     r1,#0xa
0010ac  4856              LDR      r0,|L1.4616|
0010ae  f7fffffe          BL       uart_putchar
0010b2  210a              MOVS     r1,#0xa
0010b4  4854              LDR      r0,|L1.4616|
0010b6  f7fffffe          BL       uart_putchar
0010ba  210a              MOVS     r1,#0xa
0010bc  4852              LDR      r0,|L1.4616|
0010be  f7fffffe          BL       uart_putchar
0010c2  210a              MOVS     r1,#0xa
0010c4  4850              LDR      r0,|L1.4616|
0010c6  f7fffffe          BL       uart_putchar
0010ca  210a              MOVS     r1,#0xa
0010cc  484e              LDR      r0,|L1.4616|
0010ce  f7fffffe          BL       uart_putchar
0010d2  210a              MOVS     r1,#0xa
0010d4  484c              LDR      r0,|L1.4616|
0010d6  f7fffffe          BL       uart_putchar
0010da  210a              MOVS     r1,#0xa
0010dc  484a              LDR      r0,|L1.4616|
0010de  f7fffffe          BL       uart_putchar
0010e2  210a              MOVS     r1,#0xa
0010e4  4848              LDR      r0,|L1.4616|
0010e6  f7fffffe          BL       uart_putchar
0010ea  210a              MOVS     r1,#0xa
0010ec  4846              LDR      r0,|L1.4616|
0010ee  f7fffffe          BL       uart_putchar
0010f2  210a              MOVS     r1,#0xa
0010f4  4844              LDR      r0,|L1.4616|
0010f6  f7fffffe          BL       uart_putchar
0010fa  210a              MOVS     r1,#0xa
0010fc  4842              LDR      r0,|L1.4616|
0010fe  f7fffffe          BL       uart_putchar
001102  210a              MOVS     r1,#0xa
001104  4840              LDR      r0,|L1.4616|
001106  f7fffffe          BL       uart_putchar
00110a  210a              MOVS     r1,#0xa
00110c  483e              LDR      r0,|L1.4616|
00110e  f7fffffe          BL       uart_putchar
001112  210a              MOVS     r1,#0xa
001114  483c              LDR      r0,|L1.4616|
001116  f7fffffe          BL       uart_putchar
00111a  210a              MOVS     r1,#0xa
00111c  483a              LDR      r0,|L1.4616|
00111e  f7fffffe          BL       uart_putchar
;;;346    									//memset(data,0,1000);
;;;347    														//timer counts to wait for characters in uart 1 									
;;;348    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001122  bf00              NOP      
                  |L1.4388|
001124  493d              LDR      r1,|L1.4636|
001126  318c              ADDS     r1,r1,#0x8c
001128  483a              LDR      r0,|L1.4628|
00112a  f7fffffe          BL       strstr
00112e  2800              CMP      r0,#0
001130  d109              BNE      |L1.4422|
001132  493a              LDR      r1,|L1.4636|
001134  4837              LDR      r0,|L1.4628|
001136  f7fffffe          BL       strstr
00113a  2800              CMP      r0,#0
00113c  d103              BNE      |L1.4422|
00113e  483c              LDR      r0,|L1.4656|
001140  6800              LDR      r0,[r0,#0]  ; tout
001142  2805              CMP      r0,#5
001144  ddee              BLE      |L1.4388|
                  |L1.4422|
;;;349    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;350    									}
;;;351    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001146  f7fffffe          BL       clear
;;;352    									//clear();
;;;353    									memset(data,0,strlen(data));
00114a  482d              LDR      r0,|L1.4608|
00114c  f7fffffe          BL       strlen
001150  4604              MOV      r4,r0
001152  4621              MOV      r1,r4
001154  482a              LDR      r0,|L1.4608|
001156  f7fffffe          BL       __aeabi_memclr
;;;354    									clear();
00115a  f7fffffe          BL       clear
00115e  e166              B        |L1.5166|
                  |L1.4448|
;;;355    
;;;356    								
;;;357    								//								log_it();								
;;;358    																}else{send_chunk();}													
001160  f7fffffe          BL       send_chunk
001164  e163              B        |L1.5166|
                  |L1.4454|
;;;359    								//checks for the sd_data available
;;;360    								}
;;;361    								//con1d=strstr(uart_string_gsm,"OK");
;;;362    								else
;;;363    								{
;;;364    									
;;;365    									
;;;366    	delay(100);
001166  2064              MOVS     r0,#0x64
001168  f7fffffe          BL       delay
;;;367    		clear();//memset(uart_string_gsm,0,5000);
00116c  f7fffffe          BL       clear
;;;368    	
;;;369    	memset(at_,0,100);
001170  2164              MOVS     r1,#0x64
001172  4831              LDR      r0,|L1.4664|
001174  f7fffffe          BL       __aeabi_memclr
;;;370    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001178  4821              LDR      r0,|L1.4608|
00117a  f7fffffe          BL       strlen
00117e  1c44              ADDS     r4,r0,#1
001180  4623              MOV      r3,r4
001182  4a2e              LDR      r2,|L1.4668|
001184  4925              LDR      r1,|L1.4636|
001186  3154              ADDS     r1,r1,#0x54
001188  482b              LDR      r0,|L1.4664|
00118a  f7fffffe          BL       __2sprintf
;;;371    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00118e  2005              MOVS     r0,#5
001190  4b22              LDR      r3,|L1.4636|
001192  461a              MOV      r2,r3
001194  3278              ADDS     r2,r2,#0x78
001196  a12a              ADR      r1,|L1.4672|
001198  9000              STR      r0,[sp,#0]
00119a  4827              LDR      r0,|L1.4664|
00119c  f7fffffe          BL       send_SD
;;;372    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;373    //	if(strstr(uart_string_gsm,"ERROR")){
;;;374    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;375    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;376    //	}
;;;377    	
;;;378    clear();	
0011a0  f7fffffe          BL       clear
;;;379    									k2=0;									//string array counter for uart 1
0011a4  2000              MOVS     r0,#0
0011a6  4927              LDR      r1,|L1.4676|
0011a8  6008              STR      r0,[r1,#0]  ; k2
;;;380    									tout=0;	
0011aa  4921              LDR      r1,|L1.4656|
0011ac  6008              STR      r0,[r1,#0]  ; tout
;;;381    		for(k=0;k<strlen(data);k++)
0011ae  4915              LDR      r1,|L1.4612|
0011b0  6008              STR      r0,[r1,#0]  ; k
0011b2  e00b              B        |L1.4556|
                  |L1.4532|
;;;382    		{
;;;383    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0011b4  4812              LDR      r0,|L1.4608|
0011b6  4a13              LDR      r2,|L1.4612|
0011b8  6812              LDR      r2,[r2,#0]  ; k
0011ba  5c81              LDRB     r1,[r0,r2]
0011bc  4812              LDR      r0,|L1.4616|
0011be  f7fffffe          BL       uart_putchar
0011c2  4810              LDR      r0,|L1.4612|
0011c4  6800              LDR      r0,[r0,#0]            ;381  ; k
0011c6  1c40              ADDS     r0,r0,#1              ;381
0011c8  490e              LDR      r1,|L1.4612|
0011ca  6008              STR      r0,[r1,#0]            ;381  ; k
                  |L1.4556|
0011cc  480c              LDR      r0,|L1.4608|
0011ce  f7fffffe          BL       strlen
0011d2  490c              LDR      r1,|L1.4612|
0011d4  6809              LDR      r1,[r1,#0]            ;381  ; k
0011d6  4288              CMP      r0,r1                 ;381
0011d8  d8ec              BHI      |L1.4532|
;;;384    		}	
;;;385    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0011da  210a              MOVS     r1,#0xa
0011dc  480a              LDR      r0,|L1.4616|
0011de  f7fffffe          BL       uart_putchar
0011e2  210a              MOVS     r1,#0xa
0011e4  4808              LDR      r0,|L1.4616|
0011e6  f7fffffe          BL       uart_putchar
0011ea  210a              MOVS     r1,#0xa
0011ec  4806              LDR      r0,|L1.4616|
0011ee  f7fffffe          BL       uart_putchar
0011f2  210a              MOVS     r1,#0xa
0011f4  4804              LDR      r0,|L1.4616|
0011f6  f7fffffe          BL       uart_putchar
0011fa  210a              MOVS     r1,#0xa
0011fc  4802              LDR      r0,|L1.4616|
0011fe  e023              B        |L1.4680|
                  |L1.4608|
                          DCD      data
                  |L1.4612|
                          DCD      k
                  |L1.4616|
                          DCD      0x4006b000
                  |L1.4620|
                          DCD      len
                  |L1.4624|
                          DCD      ||.text||+0x474
                  |L1.4628|
                          DCD      uart_string_gsm
                  |L1.4632|
                          DCD      stcond1
                  |L1.4636|
                          DCD      ||.text||+0x870
                  |L1.4640|
                          DCD      stcond2
                  |L1.4644|
                          DCD      ||.text||+0xde4
                  |L1.4648|
                          DCD      stcond3
                  |L1.4652|
                          DCD      stcond4
                  |L1.4656|
                          DCD      tout
                  |L1.4660|
                          DCD      con1d
                  |L1.4664|
                          DCD      at_
                  |L1.4668|
                          DCD      drive
                  |L1.4672|
001240  3e00              DCB      ">",0
001242  00                DCB      0
001243  00                DCB      0
                  |L1.4676|
                          DCD      ||k2||
                  |L1.4680|
001248  f7fffffe          BL       uart_putchar
00124c  210a              MOVS     r1,#0xa
00124e  48fe              LDR      r0,|L1.5704|
001250  f7fffffe          BL       uart_putchar
001254  210a              MOVS     r1,#0xa
001256  48fc              LDR      r0,|L1.5704|
001258  f7fffffe          BL       uart_putchar
00125c  210a              MOVS     r1,#0xa
00125e  48fa              LDR      r0,|L1.5704|
001260  f7fffffe          BL       uart_putchar
001264  210a              MOVS     r1,#0xa
001266  48f8              LDR      r0,|L1.5704|
001268  f7fffffe          BL       uart_putchar
00126c  210a              MOVS     r1,#0xa
00126e  48f6              LDR      r0,|L1.5704|
001270  f7fffffe          BL       uart_putchar
001274  210a              MOVS     r1,#0xa
001276  48f4              LDR      r0,|L1.5704|
001278  f7fffffe          BL       uart_putchar
00127c  210a              MOVS     r1,#0xa
00127e  48f2              LDR      r0,|L1.5704|
001280  f7fffffe          BL       uart_putchar
001284  210a              MOVS     r1,#0xa
001286  48f0              LDR      r0,|L1.5704|
001288  f7fffffe          BL       uart_putchar
00128c  210a              MOVS     r1,#0xa
00128e  48ee              LDR      r0,|L1.5704|
001290  f7fffffe          BL       uart_putchar
001294  210a              MOVS     r1,#0xa
001296  48ec              LDR      r0,|L1.5704|
001298  f7fffffe          BL       uart_putchar
00129c  210a              MOVS     r1,#0xa
00129e  48ea              LDR      r0,|L1.5704|
0012a0  f7fffffe          BL       uart_putchar
0012a4  210a              MOVS     r1,#0xa
0012a6  48e8              LDR      r0,|L1.5704|
0012a8  f7fffffe          BL       uart_putchar
0012ac  210a              MOVS     r1,#0xa
0012ae  48e6              LDR      r0,|L1.5704|
0012b0  f7fffffe          BL       uart_putchar
0012b4  210a              MOVS     r1,#0xa
0012b6  48e4              LDR      r0,|L1.5704|
0012b8  f7fffffe          BL       uart_putchar
0012bc  210a              MOVS     r1,#0xa
0012be  48e2              LDR      r0,|L1.5704|
0012c0  f7fffffe          BL       uart_putchar
0012c4  210a              MOVS     r1,#0xa
0012c6  48e0              LDR      r0,|L1.5704|
0012c8  f7fffffe          BL       uart_putchar
0012cc  210a              MOVS     r1,#0xa
0012ce  48de              LDR      r0,|L1.5704|
0012d0  f7fffffe          BL       uart_putchar
0012d4  210a              MOVS     r1,#0xa
0012d6  48dc              LDR      r0,|L1.5704|
0012d8  f7fffffe          BL       uart_putchar
0012dc  210a              MOVS     r1,#0xa
0012de  48da              LDR      r0,|L1.5704|
0012e0  f7fffffe          BL       uart_putchar
0012e4  210a              MOVS     r1,#0xa
0012e6  48d8              LDR      r0,|L1.5704|
0012e8  f7fffffe          BL       uart_putchar
0012ec  210a              MOVS     r1,#0xa
0012ee  48d6              LDR      r0,|L1.5704|
0012f0  f7fffffe          BL       uart_putchar
0012f4  210a              MOVS     r1,#0xa
0012f6  48d4              LDR      r0,|L1.5704|
0012f8  f7fffffe          BL       uart_putchar
0012fc  210a              MOVS     r1,#0xa
0012fe  48d2              LDR      r0,|L1.5704|
001300  f7fffffe          BL       uart_putchar
001304  210a              MOVS     r1,#0xa
001306  48d0              LDR      r0,|L1.5704|
001308  f7fffffe          BL       uart_putchar
00130c  210a              MOVS     r1,#0xa
00130e  48ce              LDR      r0,|L1.5704|
001310  f7fffffe          BL       uart_putchar
001314  210a              MOVS     r1,#0xa
001316  48cc              LDR      r0,|L1.5704|
001318  f7fffffe          BL       uart_putchar
00131c  210a              MOVS     r1,#0xa
00131e  48ca              LDR      r0,|L1.5704|
001320  f7fffffe          BL       uart_putchar
001324  210a              MOVS     r1,#0xa
001326  48c8              LDR      r0,|L1.5704|
001328  f7fffffe          BL       uart_putchar
00132c  210a              MOVS     r1,#0xa
00132e  48c6              LDR      r0,|L1.5704|
001330  f7fffffe          BL       uart_putchar
001334  210a              MOVS     r1,#0xa
001336  48c4              LDR      r0,|L1.5704|
001338  f7fffffe          BL       uart_putchar
00133c  210a              MOVS     r1,#0xa
00133e  48c2              LDR      r0,|L1.5704|
001340  f7fffffe          BL       uart_putchar
001344  210a              MOVS     r1,#0xa
001346  48c0              LDR      r0,|L1.5704|
001348  f7fffffe          BL       uart_putchar
00134c  210a              MOVS     r1,#0xa
00134e  48be              LDR      r0,|L1.5704|
001350  f7fffffe          BL       uart_putchar
001354  210a              MOVS     r1,#0xa
001356  48bc              LDR      r0,|L1.5704|
001358  f7fffffe          BL       uart_putchar
00135c  210a              MOVS     r1,#0xa
00135e  48ba              LDR      r0,|L1.5704|
001360  f7fffffe          BL       uart_putchar
001364  210a              MOVS     r1,#0xa
001366  48b8              LDR      r0,|L1.5704|
001368  f7fffffe          BL       uart_putchar
00136c  210a              MOVS     r1,#0xa
00136e  48b6              LDR      r0,|L1.5704|
001370  f7fffffe          BL       uart_putchar
001374  210a              MOVS     r1,#0xa
001376  48b4              LDR      r0,|L1.5704|
001378  f7fffffe          BL       uart_putchar
00137c  210a              MOVS     r1,#0xa
00137e  48b2              LDR      r0,|L1.5704|
001380  f7fffffe          BL       uart_putchar
001384  210a              MOVS     r1,#0xa
001386  48b0              LDR      r0,|L1.5704|
001388  f7fffffe          BL       uart_putchar
00138c  210a              MOVS     r1,#0xa
00138e  48ae              LDR      r0,|L1.5704|
001390  f7fffffe          BL       uart_putchar
001394  210a              MOVS     r1,#0xa
001396  48ac              LDR      r0,|L1.5704|
001398  f7fffffe          BL       uart_putchar
00139c  210a              MOVS     r1,#0xa
00139e  48aa              LDR      r0,|L1.5704|
0013a0  f7fffffe          BL       uart_putchar
0013a4  210a              MOVS     r1,#0xa
0013a6  48a8              LDR      r0,|L1.5704|
0013a8  f7fffffe          BL       uart_putchar
0013ac  210a              MOVS     r1,#0xa
0013ae  48a6              LDR      r0,|L1.5704|
0013b0  f7fffffe          BL       uart_putchar
0013b4  210a              MOVS     r1,#0xa
0013b6  48a4              LDR      r0,|L1.5704|
0013b8  f7fffffe          BL       uart_putchar
0013bc  210a              MOVS     r1,#0xa
0013be  48a2              LDR      r0,|L1.5704|
0013c0  f7fffffe          BL       uart_putchar
0013c4  210a              MOVS     r1,#0xa
0013c6  48a0              LDR      r0,|L1.5704|
0013c8  f7fffffe          BL       uart_putchar
0013cc  210a              MOVS     r1,#0xa
0013ce  489e              LDR      r0,|L1.5704|
0013d0  f7fffffe          BL       uart_putchar
0013d4  210a              MOVS     r1,#0xa
0013d6  489c              LDR      r0,|L1.5704|
0013d8  f7fffffe          BL       uart_putchar
0013dc  210a              MOVS     r1,#0xa
0013de  489a              LDR      r0,|L1.5704|
0013e0  f7fffffe          BL       uart_putchar
0013e4  210a              MOVS     r1,#0xa
0013e6  4898              LDR      r0,|L1.5704|
0013e8  f7fffffe          BL       uart_putchar
;;;386    									//memset(data,0,1000);
;;;387    														//timer counts to wait for characters in uart 1 									
;;;388    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0013ec  bf00              NOP      
                  |L1.5102|
0013ee  4997              LDR      r1,|L1.5708|
0013f0  4897              LDR      r0,|L1.5712|
0013f2  f7fffffe          BL       strstr
0013f6  2800              CMP      r0,#0
0013f8  d10a              BNE      |L1.5136|
0013fa  4994              LDR      r1,|L1.5708|
0013fc  398c              SUBS     r1,r1,#0x8c
0013fe  4894              LDR      r0,|L1.5712|
001400  f7fffffe          BL       strstr
001404  2800              CMP      r0,#0
001406  d103              BNE      |L1.5136|
001408  4892              LDR      r0,|L1.5716|
00140a  6800              LDR      r0,[r0,#0]  ; tout
00140c  2805              CMP      r0,#5
00140e  ddee              BLE      |L1.5102|
                  |L1.5136|
;;;389    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;390    									}
;;;391    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001410  f7fffffe          BL       clear
;;;392    									//clear();
;;;393    									memset(data,0,strlen(data));
001414  4890              LDR      r0,|L1.5720|
001416  f7fffffe          BL       strlen
00141a  4604              MOV      r4,r0
00141c  4621              MOV      r1,r4
00141e  488e              LDR      r0,|L1.5720|
001420  f7fffffe          BL       __aeabi_memclr
;;;394    									clear();
001424  f7fffffe          BL       clear
001428  e001              B        |L1.5166|
                  |L1.5162|
;;;395    
;;;396    								
;;;397    									
;;;398    									
;;;399    									//log_it();			//otherwize log it					
;;;400    								}
;;;401    
;;;402    																
;;;403    //delay(50);
;;;404    
;;;405    //else{
;;;406    //log_it();}
;;;407    								
;;;408    								
;;;409    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;410    	else
;;;411    	{
;;;412    		send_chunk();
00142a  f7fffffe          BL       send_chunk
                  |L1.5166|
;;;413    	}		
;;;414    								
;;;415    								
;;;416    								
;;;417    	memset(data,0,strlen(data));	
00142e  488a              LDR      r0,|L1.5720|
001430  f7fffffe          BL       strlen
001434  4604              MOV      r4,r0
001436  4621              MOV      r1,r4
001438  4887              LDR      r0,|L1.5720|
00143a  f7fffffe          BL       __aeabi_memclr
;;;418    	uart_putchar(UART1_BASE_PTR, 0x1A);
00143e  211a              MOVS     r1,#0x1a
001440  4881              LDR      r0,|L1.5704|
001442  f7fffffe          BL       uart_putchar
;;;419    	
;;;420    }
001446  bd38              POP      {r3-r5,pc}
;;;421    	
                          ENDP

                  send_tcp_bal PROC
;;;433    
;;;434    void send_tcp_bal()
001448  b538              PUSH     {r3-r5,lr}
;;;435    {	
;;;436    memset(stcond1,0,strlen(stcond1));	
00144a  4884              LDR      r0,|L1.5724|
00144c  6800              LDR      r0,[r0,#0]  ; stcond1
00144e  f7fffffe          BL       strlen
001452  4604              MOV      r4,r0
001454  4621              MOV      r1,r4
001456  4881              LDR      r0,|L1.5724|
001458  6800              LDR      r0,[r0,#0]  ; stcond1
00145a  f7fffffe          BL       __aeabi_memclr
;;;437    memset(con1d,0,strlen(con1d));	
00145e  4880              LDR      r0,|L1.5728|
001460  6800              LDR      r0,[r0,#0]  ; con1d
001462  f7fffffe          BL       strlen
001466  4604              MOV      r4,r0
001468  4621              MOV      r1,r4
00146a  487d              LDR      r0,|L1.5728|
00146c  6800              LDR      r0,[r0,#0]  ; con1d
00146e  f7fffffe          BL       __aeabi_memclr
;;;438    	
;;;439    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;440    
;;;441    								cond=mystrstr(uart_string_gsm,'>');
001472  213e              MOVS     r1,#0x3e
001474  4876              LDR      r0,|L1.5712|
001476  f7fffffe          BL       mystrstr
00147a  497a              LDR      r1,|L1.5732|
00147c  7008              STRB     r0,[r1,#0]
;;;442    								if(cond)	
00147e  4608              MOV      r0,r1
001480  7800              LDRB     r0,[r0,#0]  ; cond
001482  2800              CMP      r0,#0
001484  d07e              BEQ      |L1.5508|
;;;443    								{
;;;444    									
;;;445    									clear();
001486  f7fffffe          BL       clear
;;;446    									memset(uart_string_gsm,0,5000);
00148a  4977              LDR      r1,|L1.5736|
00148c  4870              LDR      r0,|L1.5712|
00148e  f7fffffe          BL       __aeabi_memclr
;;;447    									strcat(data,"\n\n");
001492  a176              ADR      r1,|L1.5740|
001494  4870              LDR      r0,|L1.5720|
001496  f7fffffe          BL       strcat
;;;448    									len=strlen(data);
00149a  486f              LDR      r0,|L1.5720|
00149c  f7fffffe          BL       strlen
0014a0  4973              LDR      r1,|L1.5744|
0014a2  6008              STR      r0,[r1,#0]  ; len
;;;449    									tout=0;
0014a4  2000              MOVS     r0,#0
0014a6  496b              LDR      r1,|L1.5716|
0014a8  6008              STR      r0,[r1,#0]  ; tout
;;;450    									k2=0;
0014aa  4972              LDR      r1,|L1.5748|
0014ac  6008              STR      r0,[r1,#0]  ; k2
;;;451    									for(k=0;k<len;k++)
0014ae  4972              LDR      r1,|L1.5752|
0014b0  6008              STR      r0,[r1,#0]  ; k
0014b2  e00b              B        |L1.5324|
                  |L1.5300|
;;;452    									{
;;;453    										uart_putchar(UART1_BASE_PTR, data[k]);
0014b4  4868              LDR      r0,|L1.5720|
0014b6  4a70              LDR      r2,|L1.5752|
0014b8  6812              LDR      r2,[r2,#0]  ; k
0014ba  5c81              LDRB     r1,[r0,r2]
0014bc  4862              LDR      r0,|L1.5704|
0014be  f7fffffe          BL       uart_putchar
0014c2  486d              LDR      r0,|L1.5752|
0014c4  6800              LDR      r0,[r0,#0]            ;451  ; k
0014c6  1c40              ADDS     r0,r0,#1              ;451
0014c8  496b              LDR      r1,|L1.5752|
0014ca  6008              STR      r0,[r1,#0]            ;451  ; k
                  |L1.5324|
0014cc  486a              LDR      r0,|L1.5752|
0014ce  6800              LDR      r0,[r0,#0]            ;451  ; k
0014d0  4967              LDR      r1,|L1.5744|
0014d2  6809              LDR      r1,[r1,#0]            ;451  ; len
0014d4  4288              CMP      r0,r1                 ;451
0014d6  dbed              BLT      |L1.5300|
;;;454    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0014d8  211a              MOVS     r1,#0x1a
0014da  485b              LDR      r0,|L1.5704|
0014dc  f7fffffe          BL       uart_putchar
0014e0  211a              MOVS     r1,#0x1a
0014e2  4859              LDR      r0,|L1.5704|
0014e4  f7fffffe          BL       uart_putchar
;;;455    									do
0014e8  bf00              NOP      
                  |L1.5354|
;;;456    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0014ea  4964              LDR      r1,|L1.5756|
0014ec  4858              LDR      r0,|L1.5712|
0014ee  f7fffffe          BL       strstr
0014f2  495a              LDR      r1,|L1.5724|
0014f4  6008              STR      r0,[r1,#0]  ; stcond1
;;;457    																	stcond2=strstr(uart_string_gsm, "ERROR");
0014f6  4955              LDR      r1,|L1.5708|
0014f8  398c              SUBS     r1,r1,#0x8c
0014fa  4855              LDR      r0,|L1.5712|
0014fc  f7fffffe          BL       strstr
001500  495f              LDR      r1,|L1.5760|
001502  6008              STR      r0,[r1,#0]  ; stcond2
;;;458    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001504  495f              LDR      r1,|L1.5764|
001506  4852              LDR      r0,|L1.5712|
001508  f7fffffe          BL       strstr
00150c  495e              LDR      r1,|L1.5768|
00150e  6008              STR      r0,[r1,#0]  ; stcond3
;;;459    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001510  494e              LDR      r1,|L1.5708|
001512  3970              SUBS     r1,r1,#0x70
001514  484e              LDR      r0,|L1.5712|
001516  f7fffffe          BL       strstr
00151a  495c              LDR      r1,|L1.5772|
00151c  6008              STR      r0,[r1,#0]  ; stcond4
;;;460    																	
;;;461    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
00151e  4858              LDR      r0,|L1.5760|
001520  6800              LDR      r0,[r0,#0]  ; stcond2
001522  2800              CMP      r0,#0
001524  d10f              BNE      |L1.5446|
001526  4858              LDR      r0,|L1.5768|
001528  6800              LDR      r0,[r0,#0]  ; stcond3
00152a  2800              CMP      r0,#0
00152c  d10b              BNE      |L1.5446|
00152e  4608              MOV      r0,r1
001530  6800              LDR      r0,[r0,#0]  ; stcond4
001532  2800              CMP      r0,#0
001534  d107              BNE      |L1.5446|
001536  4849              LDR      r0,|L1.5724|
001538  6800              LDR      r0,[r0,#0]  ; stcond1
00153a  2800              CMP      r0,#0
00153c  d103              BNE      |L1.5446|
00153e  4845              LDR      r0,|L1.5716|
001540  6800              LDR      r0,[r0,#0]  ; tout
001542  2805              CMP      r0,#5
001544  ddd1              BLE      |L1.5354|
                  |L1.5446|
;;;462    																//delay(10);clear();
;;;463    														uart_putchar(UART1_BASE_PTR,0x1A);
001546  211a              MOVS     r1,#0x1a
001548  483f              LDR      r0,|L1.5704|
00154a  f7fffffe          BL       uart_putchar
;;;464    												//delay(10);
;;;465    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00154e  211a              MOVS     r1,#0x1a
001550  483d              LDR      r0,|L1.5704|
001552  f7fffffe          BL       uart_putchar
001556  211a              MOVS     r1,#0x1a
001558  483b              LDR      r0,|L1.5704|
00155a  f7fffffe          BL       uart_putchar
00155e  211a              MOVS     r1,#0x1a
001560  4839              LDR      r0,|L1.5704|
001562  f7fffffe          BL       uart_putchar
;;;466    						
;;;467    									
;;;468    									
;;;469    									
;;;470    									if(flagch==1){		int_erval=temp;flagch=0;	}
001566  484a              LDR      r0,|L1.5776|
001568  6800              LDR      r0,[r0,#0]  ; flagch
00156a  2801              CMP      r0,#1
00156c  d106              BNE      |L1.5500|
00156e  4849              LDR      r0,|L1.5780|
001570  6800              LDR      r0,[r0,#0]  ; temp
001572  4949              LDR      r1,|L1.5784|
001574  6008              STR      r0,[r1,#0]  ; int_erval
001576  2000              MOVS     r0,#0
001578  4945              LDR      r1,|L1.5776|
00157a  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.5500|
;;;471    									
;;;472    									
;;;473    									
;;;474    
;;;475    //									for(k=0;k<len;k++)
;;;476    //									{
;;;477    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;478    //									}
;;;479    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;480    
;;;481    //									
;;;482    //													k2=0;									//string array counter for uart 1
;;;483    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;484    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;485    //																{
;;;486    //																	timeout--;
;;;487    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;488    //
;;;489    									delay(20);															
00157c  2014              MOVS     r0,#0x14
00157e  f7fffffe          BL       delay
;;;490    stcond1=strstr(uart_string_gsm,"SEND OK"); 
001582  e000              B        |L1.5510|
                  |L1.5508|
001584  e005              B        |L1.5522|
                  |L1.5510|
001586  493d              LDR      r1,|L1.5756|
001588  4831              LDR      r0,|L1.5712|
00158a  f7fffffe          BL       strstr
00158e  4933              LDR      r1,|L1.5724|
001590  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.5522|
;;;491    
;;;492    								}
;;;493    
;;;494      //checks for send ok
;;;495    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
001592  4832              LDR      r0,|L1.5724|
001594  6800              LDR      r0,[r0,#0]  ; stcond1
001596  2800              CMP      r0,#0
001598  d001              BEQ      |L1.5534|
00159a  f000ff2d          BL       |L1.9208|
                  |L1.5534|
;;;496    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00159e  211a              MOVS     r1,#0x1a
0015a0  4829              LDR      r0,|L1.5704|
0015a2  f7fffffe          BL       uart_putchar
0015a6  f7fffffe          BL       clear
0015aa  200a              MOVS     r0,#0xa
0015ac  f7fffffe          BL       delay
;;;497    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015b0  211a              MOVS     r1,#0x1a
0015b2  4825              LDR      r0,|L1.5704|
0015b4  f7fffffe          BL       uart_putchar
0015b8  f7fffffe          BL       clear
0015bc  200a              MOVS     r0,#0xa
0015be  f7fffffe          BL       delay
;;;498    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015c2  211a              MOVS     r1,#0x1a
0015c4  4820              LDR      r0,|L1.5704|
0015c6  f7fffffe          BL       uart_putchar
0015ca  f7fffffe          BL       clear
0015ce  200a              MOVS     r0,#0xa
0015d0  f7fffffe          BL       delay
;;;499    							//remove_all_chars(data, '\n', '\n');
;;;500    	
;;;501    		//strcat(data,"CH\n");	
;;;502    		
;;;503    	
;;;504    	
;;;505    	delay(100);
0015d4  2064              MOVS     r0,#0x64
0015d6  f7fffffe          BL       delay
;;;506    		clear();//memset(uart_string_gsm,0,5000);
0015da  f7fffffe          BL       clear
;;;507    	
;;;508    	memset(at_,0,100);
0015de  2164              MOVS     r1,#0x64
0015e0  482e              LDR      r0,|L1.5788|
0015e2  f7fffffe          BL       __aeabi_memclr
;;;509    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0015e6  481c              LDR      r0,|L1.5720|
0015e8  f7fffffe          BL       strlen
0015ec  1c44              ADDS     r4,r0,#1
0015ee  4623              MOV      r3,r4
0015f0  4a2b              LDR      r2,|L1.5792|
0015f2  4916              LDR      r1,|L1.5708|
0015f4  3938              SUBS     r1,r1,#0x38
0015f6  4829              LDR      r0,|L1.5788|
0015f8  f7fffffe          BL       __2sprintf
;;;510    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0015fc  2005              MOVS     r0,#5
0015fe  4b13              LDR      r3,|L1.5708|
001600  3b8c              SUBS     r3,r3,#0x8c
001602  461a              MOV      r2,r3
001604  3278              ADDS     r2,r2,#0x78
001606  a127              ADR      r1,|L1.5796|
001608  9000              STR      r0,[sp,#0]
00160a  4824              LDR      r0,|L1.5788|
00160c  f7fffffe          BL       send_SD
;;;511    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;512    //	if(strstr(uart_string_gsm,"ERROR")){
;;;513    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;514    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;515    //	}
;;;516    	
;;;517    clear();	
001610  f7fffffe          BL       clear
;;;518    									k2=0;									//string array counter for uart 1
001614  2000              MOVS     r0,#0
001616  4917              LDR      r1,|L1.5748|
001618  6008              STR      r0,[r1,#0]  ; k2
;;;519    									tout=0;	
00161a  490e              LDR      r1,|L1.5716|
00161c  6008              STR      r0,[r1,#0]  ; tout
;;;520    		for(k=0;k<strlen(data);k++)
00161e  4916              LDR      r1,|L1.5752|
001620  6008              STR      r0,[r1,#0]  ; k
001622  e00b              B        |L1.5692|
                  |L1.5668|
;;;521    		{
;;;522    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001624  480c              LDR      r0,|L1.5720|
001626  4a14              LDR      r2,|L1.5752|
001628  6812              LDR      r2,[r2,#0]  ; k
00162a  5c81              LDRB     r1,[r0,r2]
00162c  4806              LDR      r0,|L1.5704|
00162e  f7fffffe          BL       uart_putchar
001632  4811              LDR      r0,|L1.5752|
001634  6800              LDR      r0,[r0,#0]            ;520  ; k
001636  1c40              ADDS     r0,r0,#1              ;520
001638  490f              LDR      r1,|L1.5752|
00163a  6008              STR      r0,[r1,#0]            ;520  ; k
                  |L1.5692|
00163c  4806              LDR      r0,|L1.5720|
00163e  f7fffffe          BL       strlen
001642  490d              LDR      r1,|L1.5752|
001644  6809              LDR      r1,[r1,#0]            ;520  ; k
001646  e02f              B        |L1.5800|
                  |L1.5704|
                          DCD      0x4006b000
                  |L1.5708|
                          DCD      ||.text||+0x8fc
                  |L1.5712|
                          DCD      uart_string_gsm
                  |L1.5716|
                          DCD      tout
                  |L1.5720|
                          DCD      data
                  |L1.5724|
                          DCD      stcond1
                  |L1.5728|
                          DCD      con1d
                  |L1.5732|
                          DCD      cond
                  |L1.5736|
                          DCD      0x00001388
                  |L1.5740|
00166c  0a0a00            DCB      "\n\n",0
00166f  00                DCB      0
                  |L1.5744|
                          DCD      len
                  |L1.5748|
                          DCD      ||k2||
                  |L1.5752|
                          DCD      k
                  |L1.5756|
                          DCD      ||.text||+0x474
                  |L1.5760|
                          DCD      stcond2
                  |L1.5764|
                          DCD      ||.text||+0xde4
                  |L1.5768|
                          DCD      stcond3
                  |L1.5772|
                          DCD      stcond4
                  |L1.5776|
                          DCD      flagch
                  |L1.5780|
                          DCD      temp
                  |L1.5784|
                          DCD      int_erval
                  |L1.5788|
                          DCD      at_
                  |L1.5792|
                          DCD      drive
                  |L1.5796|
0016a4  3e00              DCB      ">",0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  4288              CMP      r0,r1                 ;520
0016aa  d8bb              BHI      |L1.5668|
;;;523    		}	
;;;524    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0016ac  210a              MOVS     r1,#0xa
0016ae  48fe              LDR      r0,|L1.6824|
0016b0  f7fffffe          BL       uart_putchar
0016b4  210a              MOVS     r1,#0xa
0016b6  48fc              LDR      r0,|L1.6824|
0016b8  f7fffffe          BL       uart_putchar
0016bc  210a              MOVS     r1,#0xa
0016be  48fa              LDR      r0,|L1.6824|
0016c0  f7fffffe          BL       uart_putchar
0016c4  210a              MOVS     r1,#0xa
0016c6  48f8              LDR      r0,|L1.6824|
0016c8  f7fffffe          BL       uart_putchar
0016cc  210a              MOVS     r1,#0xa
0016ce  48f6              LDR      r0,|L1.6824|
0016d0  f7fffffe          BL       uart_putchar
0016d4  210a              MOVS     r1,#0xa
0016d6  48f4              LDR      r0,|L1.6824|
0016d8  f7fffffe          BL       uart_putchar
0016dc  210a              MOVS     r1,#0xa
0016de  48f2              LDR      r0,|L1.6824|
0016e0  f7fffffe          BL       uart_putchar
0016e4  210a              MOVS     r1,#0xa
0016e6  48f0              LDR      r0,|L1.6824|
0016e8  f7fffffe          BL       uart_putchar
0016ec  210a              MOVS     r1,#0xa
0016ee  48ee              LDR      r0,|L1.6824|
0016f0  f7fffffe          BL       uart_putchar
0016f4  210a              MOVS     r1,#0xa
0016f6  48ec              LDR      r0,|L1.6824|
0016f8  f7fffffe          BL       uart_putchar
0016fc  210a              MOVS     r1,#0xa
0016fe  48ea              LDR      r0,|L1.6824|
001700  f7fffffe          BL       uart_putchar
001704  210a              MOVS     r1,#0xa
001706  48e8              LDR      r0,|L1.6824|
001708  f7fffffe          BL       uart_putchar
00170c  210a              MOVS     r1,#0xa
00170e  48e6              LDR      r0,|L1.6824|
001710  f7fffffe          BL       uart_putchar
001714  210a              MOVS     r1,#0xa
001716  48e4              LDR      r0,|L1.6824|
001718  f7fffffe          BL       uart_putchar
00171c  210a              MOVS     r1,#0xa
00171e  48e2              LDR      r0,|L1.6824|
001720  f7fffffe          BL       uart_putchar
001724  210a              MOVS     r1,#0xa
001726  48e0              LDR      r0,|L1.6824|
001728  f7fffffe          BL       uart_putchar
00172c  210a              MOVS     r1,#0xa
00172e  48de              LDR      r0,|L1.6824|
001730  f7fffffe          BL       uart_putchar
001734  210a              MOVS     r1,#0xa
001736  48dc              LDR      r0,|L1.6824|
001738  f7fffffe          BL       uart_putchar
00173c  210a              MOVS     r1,#0xa
00173e  48da              LDR      r0,|L1.6824|
001740  f7fffffe          BL       uart_putchar
001744  210a              MOVS     r1,#0xa
001746  48d8              LDR      r0,|L1.6824|
001748  f7fffffe          BL       uart_putchar
00174c  210a              MOVS     r1,#0xa
00174e  48d6              LDR      r0,|L1.6824|
001750  f7fffffe          BL       uart_putchar
001754  210a              MOVS     r1,#0xa
001756  48d4              LDR      r0,|L1.6824|
001758  f7fffffe          BL       uart_putchar
00175c  210a              MOVS     r1,#0xa
00175e  48d2              LDR      r0,|L1.6824|
001760  f7fffffe          BL       uart_putchar
001764  210a              MOVS     r1,#0xa
001766  48d0              LDR      r0,|L1.6824|
001768  f7fffffe          BL       uart_putchar
00176c  210a              MOVS     r1,#0xa
00176e  48ce              LDR      r0,|L1.6824|
001770  f7fffffe          BL       uart_putchar
001774  210a              MOVS     r1,#0xa
001776  48cc              LDR      r0,|L1.6824|
001778  f7fffffe          BL       uart_putchar
00177c  210a              MOVS     r1,#0xa
00177e  48ca              LDR      r0,|L1.6824|
001780  f7fffffe          BL       uart_putchar
001784  210a              MOVS     r1,#0xa
001786  48c8              LDR      r0,|L1.6824|
001788  f7fffffe          BL       uart_putchar
00178c  210a              MOVS     r1,#0xa
00178e  48c6              LDR      r0,|L1.6824|
001790  f7fffffe          BL       uart_putchar
001794  210a              MOVS     r1,#0xa
001796  48c4              LDR      r0,|L1.6824|
001798  f7fffffe          BL       uart_putchar
00179c  210a              MOVS     r1,#0xa
00179e  48c2              LDR      r0,|L1.6824|
0017a0  f7fffffe          BL       uart_putchar
0017a4  210a              MOVS     r1,#0xa
0017a6  48c0              LDR      r0,|L1.6824|
0017a8  f7fffffe          BL       uart_putchar
0017ac  210a              MOVS     r1,#0xa
0017ae  48be              LDR      r0,|L1.6824|
0017b0  f7fffffe          BL       uart_putchar
0017b4  210a              MOVS     r1,#0xa
0017b6  48bc              LDR      r0,|L1.6824|
0017b8  f7fffffe          BL       uart_putchar
0017bc  210a              MOVS     r1,#0xa
0017be  48ba              LDR      r0,|L1.6824|
0017c0  f7fffffe          BL       uart_putchar
0017c4  210a              MOVS     r1,#0xa
0017c6  48b8              LDR      r0,|L1.6824|
0017c8  f7fffffe          BL       uart_putchar
0017cc  210a              MOVS     r1,#0xa
0017ce  48b6              LDR      r0,|L1.6824|
0017d0  f7fffffe          BL       uart_putchar
0017d4  210a              MOVS     r1,#0xa
0017d6  48b4              LDR      r0,|L1.6824|
0017d8  f7fffffe          BL       uart_putchar
0017dc  210a              MOVS     r1,#0xa
0017de  48b2              LDR      r0,|L1.6824|
0017e0  f7fffffe          BL       uart_putchar
0017e4  210a              MOVS     r1,#0xa
0017e6  48b0              LDR      r0,|L1.6824|
0017e8  f7fffffe          BL       uart_putchar
0017ec  210a              MOVS     r1,#0xa
0017ee  48ae              LDR      r0,|L1.6824|
0017f0  f7fffffe          BL       uart_putchar
0017f4  210a              MOVS     r1,#0xa
0017f6  48ac              LDR      r0,|L1.6824|
0017f8  f7fffffe          BL       uart_putchar
0017fc  210a              MOVS     r1,#0xa
0017fe  48aa              LDR      r0,|L1.6824|
001800  f7fffffe          BL       uart_putchar
001804  210a              MOVS     r1,#0xa
001806  48a8              LDR      r0,|L1.6824|
001808  f7fffffe          BL       uart_putchar
00180c  210a              MOVS     r1,#0xa
00180e  48a6              LDR      r0,|L1.6824|
001810  f7fffffe          BL       uart_putchar
001814  210a              MOVS     r1,#0xa
001816  48a4              LDR      r0,|L1.6824|
001818  f7fffffe          BL       uart_putchar
00181c  210a              MOVS     r1,#0xa
00181e  48a2              LDR      r0,|L1.6824|
001820  f7fffffe          BL       uart_putchar
001824  210a              MOVS     r1,#0xa
001826  48a0              LDR      r0,|L1.6824|
001828  f7fffffe          BL       uart_putchar
00182c  210a              MOVS     r1,#0xa
00182e  489e              LDR      r0,|L1.6824|
001830  f7fffffe          BL       uart_putchar
001834  210a              MOVS     r1,#0xa
001836  489c              LDR      r0,|L1.6824|
001838  f7fffffe          BL       uart_putchar
00183c  210a              MOVS     r1,#0xa
00183e  489a              LDR      r0,|L1.6824|
001840  f7fffffe          BL       uart_putchar
001844  210a              MOVS     r1,#0xa
001846  4898              LDR      r0,|L1.6824|
001848  f7fffffe          BL       uart_putchar
00184c  210a              MOVS     r1,#0xa
00184e  4896              LDR      r0,|L1.6824|
001850  f7fffffe          BL       uart_putchar
001854  210a              MOVS     r1,#0xa
001856  4894              LDR      r0,|L1.6824|
001858  f7fffffe          BL       uart_putchar
00185c  210a              MOVS     r1,#0xa
00185e  4892              LDR      r0,|L1.6824|
001860  f7fffffe          BL       uart_putchar
001864  210a              MOVS     r1,#0xa
001866  4890              LDR      r0,|L1.6824|
001868  f7fffffe          BL       uart_putchar
00186c  210a              MOVS     r1,#0xa
00186e  488e              LDR      r0,|L1.6824|
001870  f7fffffe          BL       uart_putchar
;;;525    									//memset(data,0,1000);
;;;526    														//timer counts to wait for characters in uart 1 									
;;;527    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001874  bf00              NOP      
                  |L1.6262|
001876  498d              LDR      r1,|L1.6828|
001878  488d              LDR      r0,|L1.6832|
00187a  f7fffffe          BL       strstr
00187e  2800              CMP      r0,#0
001880  d10a              BNE      |L1.6296|
001882  498a              LDR      r1,|L1.6828|
001884  398c              SUBS     r1,r1,#0x8c
001886  488a              LDR      r0,|L1.6832|
001888  f7fffffe          BL       strstr
00188c  2800              CMP      r0,#0
00188e  d103              BNE      |L1.6296|
001890  4888              LDR      r0,|L1.6836|
001892  6800              LDR      r0,[r0,#0]  ; tout
001894  2805              CMP      r0,#5
001896  ddee              BLE      |L1.6262|
                  |L1.6296|
;;;528    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;529    									}
;;;530    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001898  f7fffffe          BL       clear
;;;531    									//clear();
;;;532    									memset(data,0,strlen(data));
00189c  4886              LDR      r0,|L1.6840|
00189e  f7fffffe          BL       strlen
0018a2  4604              MOV      r4,r0
0018a4  4621              MOV      r1,r4
0018a6  4884              LDR      r0,|L1.6840|
0018a8  f7fffffe          BL       __aeabi_memclr
;;;533    									clear();
0018ac  f7fffffe          BL       clear
;;;534    
;;;535    								
;;;536    	
;;;537    	
;;;538    	//log_it();		                         //logging
;;;539    		memset(data,0,strlen(data));	
0018b0  4881              LDR      r0,|L1.6840|
0018b2  f7fffffe          BL       strlen
0018b6  4604              MOV      r4,r0
0018b8  4621              MOV      r1,r4
0018ba  487f              LDR      r0,|L1.6840|
0018bc  f7fffffe          BL       __aeabi_memclr
;;;540    
;;;541    					   	if(flagch!=1){
0018c0  487e              LDR      r0,|L1.6844|
0018c2  6800              LDR      r0,[r0,#0]  ; flagch
0018c4  2801              CMP      r0,#1
0018c6  d009              BEQ      |L1.6364|
;;;542    							temp=int_erval;				
0018c8  487d              LDR      r0,|L1.6848|
0018ca  6800              LDR      r0,[r0,#0]  ; int_erval
0018cc  497d              LDR      r1,|L1.6852|
0018ce  6008              STR      r0,[r1,#0]  ; temp
;;;543    							int_erval=4;
0018d0  2004              MOVS     r0,#4
0018d2  497b              LDR      r1,|L1.6848|
0018d4  6008              STR      r0,[r1,#0]  ; int_erval
;;;544    							flagch=1;}
0018d6  2001              MOVS     r0,#1
0018d8  4978              LDR      r1,|L1.6844|
0018da  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.6364|
;;;545    							clear();	
0018dc  f7fffffe          BL       clear
;;;546    									GPS_COLLECT();
0018e0  f7fffffe          BL       GPS_COLLECT
;;;547    									strcat(data,"CH\n");	
0018e4  4971              LDR      r1,|L1.6828|
0018e6  3944              SUBS     r1,r1,#0x44
0018e8  4873              LDR      r0,|L1.6840|
0018ea  f7fffffe          BL       strcat
;;;548    
;;;549    //*************************************tcp_initialization();//reinitialization************************//
;;;550    
;;;551    	
;;;552    msg_sim800(); 
0018ee  f7fffffe          BL       msg_sim800
;;;553    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0018f2  2005              MOVS     r0,#5
0018f4  4b6d              LDR      r3,|L1.6828|
0018f6  3b8c              SUBS     r3,r3,#0x8c
0018f8  461a              MOV      r2,r3
0018fa  3278              ADDS     r2,r2,#0x78
0018fc  a172              ADR      r1,|L1.6856|
0018fe  9000              STR      r0,[sp,#0]
001900  4610              MOV      r0,r2
001902  3020              ADDS     r0,r0,#0x20
001904  f7fffffe          BL       send_GSM
;;;554    delay(100);
001908  2064              MOVS     r0,#0x64
00190a  f7fffffe          BL       delay
;;;555    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00190e  2004              MOVS     r0,#4
001910  4b66              LDR      r3,|L1.6828|
001912  3b8c              SUBS     r3,r3,#0x8c
001914  461a              MOV      r2,r3
001916  32a8              ADDS     r2,r2,#0xa8
001918  a16b              ADR      r1,|L1.6856|
00191a  9000              STR      r0,[sp,#0]
00191c  4610              MOV      r0,r2
00191e  3014              ADDS     r0,r0,#0x14
001920  f7fffffe          BL       send_GSM
;;;556    GPS_COLLECT2();
001924  f7fffffe          BL       GPS_COLLECT2
;;;557    strcat(data,"CH\n");		
001928  4960              LDR      r1,|L1.6828|
00192a  3944              SUBS     r1,r1,#0x44
00192c  4862              LDR      r0,|L1.6840|
00192e  f7fffffe          BL       strcat
;;;558    GPS_COLLECT2();
001932  f7fffffe          BL       GPS_COLLECT2
;;;559    strcat(data,"CH\n");	
001936  495d              LDR      r1,|L1.6828|
001938  3944              SUBS     r1,r1,#0x44
00193a  485f              LDR      r0,|L1.6840|
00193c  f7fffffe          BL       strcat
;;;560    GPS_COLLECT2();
001940  f7fffffe          BL       GPS_COLLECT2
;;;561    strcat(data,"CH\n");
001944  4959              LDR      r1,|L1.6828|
001946  3944              SUBS     r1,r1,#0x44
001948  485b              LDR      r0,|L1.6840|
00194a  f7fffffe          BL       strcat
;;;562    cond201=(strstr(uart_string_gsm, "OK"));
00194e  a15e              ADR      r1,|L1.6856|
001950  4857              LDR      r0,|L1.6832|
001952  f7fffffe          BL       strstr
001956  495d              LDR      r1,|L1.6860|
001958  6008              STR      r0,[r1,#0]  ; cond201
;;;563    cond200=(strstr(uart_string_gsm, "ERROR"));
00195a  4954              LDR      r1,|L1.6828|
00195c  398c              SUBS     r1,r1,#0x8c
00195e  4854              LDR      r0,|L1.6832|
001960  f7fffffe          BL       strstr
001964  495a              LDR      r1,|L1.6864|
001966  6008              STR      r0,[r1,#0]  ; cond200
;;;564    if((!(cond201|| cond200 ))  && sleep_flag != 1)
001968  4858              LDR      r0,|L1.6860|
00196a  6800              LDR      r0,[r0,#0]  ; cond201
00196c  2800              CMP      r0,#0
                  |L1.6510|
00196e  d17d              BNE      |L1.6764|
001970  4608              MOV      r0,r1
001972  6800              LDR      r0,[r0,#0]  ; cond200
001974  2800              CMP      r0,#0
001976  d1fa              BNE      |L1.6510|
001978  4856              LDR      r0,|L1.6868|
00197a  6800              LDR      r0,[r0,#0]  ; sleep_flag
00197c  2801              CMP      r0,#1
00197e  d075              BEQ      |L1.6764|
;;;565    {
;;;566    delay(100);
001980  2064              MOVS     r0,#0x64
001982  f7fffffe          BL       delay
;;;567    clear();//memset(uart_string_gsm,0,5000);
001986  f7fffffe          BL       clear
;;;568    memset(at_,0,100);
00198a  2164              MOVS     r1,#0x64
00198c  4852              LDR      r0,|L1.6872|
00198e  f7fffffe          BL       __aeabi_memclr
;;;569    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001992  4849              LDR      r0,|L1.6840|
001994  f7fffffe          BL       strlen
001998  1c44              ADDS     r4,r0,#1
00199a  4623              MOV      r3,r4
00199c  4a4f              LDR      r2,|L1.6876|
00199e  4943              LDR      r1,|L1.6828|
0019a0  3938              SUBS     r1,r1,#0x38
0019a2  484d              LDR      r0,|L1.6872|
0019a4  f7fffffe          BL       __2sprintf
;;;570    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0019a8  2005              MOVS     r0,#5
0019aa  4b40              LDR      r3,|L1.6828|
0019ac  3b8c              SUBS     r3,r3,#0x8c
0019ae  461a              MOV      r2,r3
0019b0  3278              ADDS     r2,r2,#0x78
0019b2  a14b              ADR      r1,|L1.6880|
0019b4  9000              STR      r0,[sp,#0]
0019b6  4848              LDR      r0,|L1.6872|
0019b8  f7fffffe          BL       send_SD
;;;571    clear();	
0019bc  f7fffffe          BL       clear
;;;572    k2=0;									//string array counter for uart 1
0019c0  2000              MOVS     r0,#0
0019c2  4948              LDR      r1,|L1.6884|
0019c4  6008              STR      r0,[r1,#0]  ; k2
;;;573    tout=0;	
0019c6  493b              LDR      r1,|L1.6836|
0019c8  6008              STR      r0,[r1,#0]  ; tout
;;;574    for(k=0;k<strlen(data);k++)
0019ca  4947              LDR      r1,|L1.6888|
0019cc  6008              STR      r0,[r1,#0]  ; k
0019ce  e00b              B        |L1.6632|
                  |L1.6608|
;;;575    {
;;;576    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0019d0  4839              LDR      r0,|L1.6840|
0019d2  4a45              LDR      r2,|L1.6888|
0019d4  6812              LDR      r2,[r2,#0]  ; k
0019d6  5c81              LDRB     r1,[r0,r2]
0019d8  4833              LDR      r0,|L1.6824|
0019da  f7fffffe          BL       uart_putchar
0019de  4842              LDR      r0,|L1.6888|
0019e0  6800              LDR      r0,[r0,#0]            ;574  ; k
0019e2  1c40              ADDS     r0,r0,#1              ;574
0019e4  4940              LDR      r1,|L1.6888|
0019e6  6008              STR      r0,[r1,#0]            ;574  ; k
                  |L1.6632|
0019e8  4833              LDR      r0,|L1.6840|
0019ea  f7fffffe          BL       strlen
0019ee  493e              LDR      r1,|L1.6888|
0019f0  6809              LDR      r1,[r1,#0]            ;574  ; k
0019f2  4288              CMP      r0,r1                 ;574
0019f4  d8ec              BHI      |L1.6608|
;;;577    }	
;;;578    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0019f6  210a              MOVS     r1,#0xa
0019f8  482b              LDR      r0,|L1.6824|
0019fa  f7fffffe          BL       uart_putchar
0019fe  210a              MOVS     r1,#0xa
001a00  4829              LDR      r0,|L1.6824|
001a02  f7fffffe          BL       uart_putchar
001a06  210a              MOVS     r1,#0xa
001a08  4827              LDR      r0,|L1.6824|
001a0a  f7fffffe          BL       uart_putchar
001a0e  210a              MOVS     r1,#0xa
001a10  4825              LDR      r0,|L1.6824|
001a12  f7fffffe          BL       uart_putchar
001a16  210a              MOVS     r1,#0xa
001a18  4823              LDR      r0,|L1.6824|
001a1a  f7fffffe          BL       uart_putchar
001a1e  210a              MOVS     r1,#0xa
001a20  4821              LDR      r0,|L1.6824|
001a22  f7fffffe          BL       uart_putchar
001a26  210a              MOVS     r1,#0xa
001a28  481f              LDR      r0,|L1.6824|
001a2a  f7fffffe          BL       uart_putchar
001a2e  210a              MOVS     r1,#0xa
001a30  481d              LDR      r0,|L1.6824|
001a32  f7fffffe          BL       uart_putchar
001a36  210a              MOVS     r1,#0xa
001a38  481b              LDR      r0,|L1.6824|
001a3a  f7fffffe          BL       uart_putchar
001a3e  210a              MOVS     r1,#0xa
001a40  4819              LDR      r0,|L1.6824|
001a42  f7fffffe          BL       uart_putchar
001a46  210a              MOVS     r1,#0xa
001a48  4817              LDR      r0,|L1.6824|
001a4a  f7fffffe          BL       uart_putchar
001a4e  210a              MOVS     r1,#0xa
001a50  4815              LDR      r0,|L1.6824|
001a52  f7fffffe          BL       uart_putchar
001a56  210a              MOVS     r1,#0xa
001a58  4813              LDR      r0,|L1.6824|
001a5a  f7fffffe          BL       uart_putchar
001a5e  210a              MOVS     r1,#0xa
001a60  4811              LDR      r0,|L1.6824|
001a62  f7fffffe          BL       uart_putchar
001a66  210a              MOVS     r1,#0xa
001a68  480f              LDR      r0,|L1.6824|
001a6a  e000              B        |L1.6766|
                  |L1.6764|
001a6c  e0f6              B        |L1.7260|
                  |L1.6766|
001a6e  f7fffffe          BL       uart_putchar
001a72  210a              MOVS     r1,#0xa
001a74  480c              LDR      r0,|L1.6824|
001a76  f7fffffe          BL       uart_putchar
001a7a  210a              MOVS     r1,#0xa
001a7c  480a              LDR      r0,|L1.6824|
001a7e  f7fffffe          BL       uart_putchar
001a82  210a              MOVS     r1,#0xa
001a84  4808              LDR      r0,|L1.6824|
001a86  f7fffffe          BL       uart_putchar
001a8a  210a              MOVS     r1,#0xa
001a8c  4806              LDR      r0,|L1.6824|
001a8e  f7fffffe          BL       uart_putchar
001a92  210a              MOVS     r1,#0xa
001a94  4804              LDR      r0,|L1.6824|
001a96  f7fffffe          BL       uart_putchar
001a9a  210a              MOVS     r1,#0xa
001a9c  4802              LDR      r0,|L1.6824|
001a9e  f7fffffe          BL       uart_putchar
001aa2  210a              MOVS     r1,#0xa
001aa4  4800              LDR      r0,|L1.6824|
001aa6  e021              B        |L1.6892|
                  |L1.6824|
                          DCD      0x4006b000
                  |L1.6828|
                          DCD      ||.text||+0x8fc
                  |L1.6832|
                          DCD      uart_string_gsm
                  |L1.6836|
                          DCD      tout
                  |L1.6840|
                          DCD      data
                  |L1.6844|
                          DCD      flagch
                  |L1.6848|
                          DCD      int_erval
                  |L1.6852|
                          DCD      temp
                  |L1.6856|
001ac8  4f4b00            DCB      "OK",0
001acb  00                DCB      0
                  |L1.6860|
                          DCD      cond201
                  |L1.6864|
                          DCD      cond200
                  |L1.6868|
                          DCD      sleep_flag
                  |L1.6872|
                          DCD      at_
                  |L1.6876|
                          DCD      drive
                  |L1.6880|
001ae0  3e00              DCB      ">",0
001ae2  00                DCB      0
001ae3  00                DCB      0
                  |L1.6884|
                          DCD      ||k2||
                  |L1.6888|
                          DCD      k
                  |L1.6892|
001aec  f7fffffe          BL       uart_putchar
001af0  210a              MOVS     r1,#0xa
001af2  48fe              LDR      r0,|L1.7916|
001af4  f7fffffe          BL       uart_putchar
001af8  210a              MOVS     r1,#0xa
001afa  48fc              LDR      r0,|L1.7916|
001afc  f7fffffe          BL       uart_putchar
001b00  210a              MOVS     r1,#0xa
001b02  48fa              LDR      r0,|L1.7916|
001b04  f7fffffe          BL       uart_putchar
001b08  210a              MOVS     r1,#0xa
001b0a  48f8              LDR      r0,|L1.7916|
001b0c  f7fffffe          BL       uart_putchar
001b10  210a              MOVS     r1,#0xa
001b12  48f6              LDR      r0,|L1.7916|
001b14  f7fffffe          BL       uart_putchar
001b18  210a              MOVS     r1,#0xa
001b1a  48f4              LDR      r0,|L1.7916|
001b1c  f7fffffe          BL       uart_putchar
001b20  210a              MOVS     r1,#0xa
001b22  48f2              LDR      r0,|L1.7916|
001b24  f7fffffe          BL       uart_putchar
001b28  210a              MOVS     r1,#0xa
001b2a  48f0              LDR      r0,|L1.7916|
001b2c  f7fffffe          BL       uart_putchar
001b30  210a              MOVS     r1,#0xa
001b32  48ee              LDR      r0,|L1.7916|
001b34  f7fffffe          BL       uart_putchar
001b38  210a              MOVS     r1,#0xa
001b3a  48ec              LDR      r0,|L1.7916|
001b3c  f7fffffe          BL       uart_putchar
001b40  210a              MOVS     r1,#0xa
001b42  48ea              LDR      r0,|L1.7916|
001b44  f7fffffe          BL       uart_putchar
001b48  210a              MOVS     r1,#0xa
001b4a  48e8              LDR      r0,|L1.7916|
001b4c  f7fffffe          BL       uart_putchar
001b50  210a              MOVS     r1,#0xa
001b52  48e6              LDR      r0,|L1.7916|
001b54  f7fffffe          BL       uart_putchar
001b58  210a              MOVS     r1,#0xa
001b5a  48e4              LDR      r0,|L1.7916|
001b5c  f7fffffe          BL       uart_putchar
001b60  210a              MOVS     r1,#0xa
001b62  48e2              LDR      r0,|L1.7916|
001b64  f7fffffe          BL       uart_putchar
001b68  210a              MOVS     r1,#0xa
001b6a  48e0              LDR      r0,|L1.7916|
001b6c  f7fffffe          BL       uart_putchar
001b70  210a              MOVS     r1,#0xa
001b72  48de              LDR      r0,|L1.7916|
001b74  f7fffffe          BL       uart_putchar
001b78  210a              MOVS     r1,#0xa
001b7a  48dc              LDR      r0,|L1.7916|
001b7c  f7fffffe          BL       uart_putchar
001b80  210a              MOVS     r1,#0xa
001b82  48da              LDR      r0,|L1.7916|
001b84  f7fffffe          BL       uart_putchar
001b88  210a              MOVS     r1,#0xa
001b8a  48d8              LDR      r0,|L1.7916|
001b8c  f7fffffe          BL       uart_putchar
001b90  210a              MOVS     r1,#0xa
001b92  48d6              LDR      r0,|L1.7916|
001b94  f7fffffe          BL       uart_putchar
001b98  210a              MOVS     r1,#0xa
001b9a  48d4              LDR      r0,|L1.7916|
001b9c  f7fffffe          BL       uart_putchar
001ba0  210a              MOVS     r1,#0xa
001ba2  48d2              LDR      r0,|L1.7916|
001ba4  f7fffffe          BL       uart_putchar
001ba8  210a              MOVS     r1,#0xa
001baa  48d0              LDR      r0,|L1.7916|
001bac  f7fffffe          BL       uart_putchar
001bb0  210a              MOVS     r1,#0xa
001bb2  48ce              LDR      r0,|L1.7916|
001bb4  f7fffffe          BL       uart_putchar
001bb8  210a              MOVS     r1,#0xa
001bba  48cc              LDR      r0,|L1.7916|
001bbc  f7fffffe          BL       uart_putchar
001bc0  210a              MOVS     r1,#0xa
001bc2  48ca              LDR      r0,|L1.7916|
001bc4  f7fffffe          BL       uart_putchar
001bc8  210a              MOVS     r1,#0xa
001bca  48c8              LDR      r0,|L1.7916|
001bcc  f7fffffe          BL       uart_putchar
001bd0  210a              MOVS     r1,#0xa
001bd2  48c6              LDR      r0,|L1.7916|
001bd4  f7fffffe          BL       uart_putchar
001bd8  210a              MOVS     r1,#0xa
001bda  48c4              LDR      r0,|L1.7916|
001bdc  f7fffffe          BL       uart_putchar
001be0  210a              MOVS     r1,#0xa
001be2  48c2              LDR      r0,|L1.7916|
001be4  f7fffffe          BL       uart_putchar
001be8  210a              MOVS     r1,#0xa
001bea  48c0              LDR      r0,|L1.7916|
001bec  f7fffffe          BL       uart_putchar
001bf0  210a              MOVS     r1,#0xa
001bf2  48be              LDR      r0,|L1.7916|
001bf4  f7fffffe          BL       uart_putchar
001bf8  210a              MOVS     r1,#0xa
001bfa  48bc              LDR      r0,|L1.7916|
001bfc  f7fffffe          BL       uart_putchar
001c00  210a              MOVS     r1,#0xa
001c02  48ba              LDR      r0,|L1.7916|
001c04  f7fffffe          BL       uart_putchar
;;;579    									//memset(data,0,1000);
;;;580    														//timer counts to wait for characters in uart 1 									
;;;581    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001c08  bf00              NOP      
                  |L1.7178|
001c0a  49b9              LDR      r1,|L1.7920|
001c0c  48b9              LDR      r0,|L1.7924|
001c0e  f7fffffe          BL       strstr
001c12  2800              CMP      r0,#0
001c14  d10a              BNE      |L1.7212|
001c16  49b6              LDR      r1,|L1.7920|
001c18  398c              SUBS     r1,r1,#0x8c
001c1a  48b6              LDR      r0,|L1.7924|
001c1c  f7fffffe          BL       strstr
001c20  2800              CMP      r0,#0
001c22  d103              BNE      |L1.7212|
001c24  48b4              LDR      r0,|L1.7928|
001c26  6800              LDR      r0,[r0,#0]  ; tout
001c28  2805              CMP      r0,#5
001c2a  ddee              BLE      |L1.7178|
                  |L1.7212|
;;;582    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;583    									}
;;;584    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001c2c  f7fffffe          BL       clear
;;;585    									//clear();
;;;586    									memset(data,0,strlen(data));
001c30  48b2              LDR      r0,|L1.7932|
001c32  f7fffffe          BL       strlen
001c36  4604              MOV      r4,r0
001c38  4621              MOV      r1,r4
001c3a  48b0              LDR      r0,|L1.7932|
001c3c  f7fffffe          BL       __aeabi_memclr
;;;587    									clear();
001c40  f7fffffe          BL       clear
;;;588    									RESET_OFF;delay(100);
001c44  2020              MOVS     r0,#0x20
001c46  49ae              LDR      r1,|L1.7936|
001c48  6088              STR      r0,[r1,#8]
001c4a  2064              MOVS     r0,#0x64
001c4c  f7fffffe          BL       delay
;;;589    									RESET_ON;delay(100);		
001c50  2020              MOVS     r0,#0x20
001c52  49ab              LDR      r1,|L1.7936|
001c54  6048              STR      r0,[r1,#4]
001c56  2064              MOVS     r0,#0x64
001c58  f7fffffe          BL       delay
                  |L1.7260|
;;;590    }
;;;591    	
;;;592    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001c5c  2004              MOVS     r0,#4
001c5e  4ba9              LDR      r3,|L1.7940|
001c60  4aa3              LDR      r2,|L1.7920|
001c62  3a14              SUBS     r2,r2,#0x14
001c64  a1a8              ADR      r1,|L1.7944|
001c66  9000              STR      r0,[sp,#0]
001c68  4618              MOV      r0,r3
001c6a  300c              ADDS     r0,r0,#0xc
001c6c  f7fffffe          BL       send_GSM
;;;593    GPS_COLLECT2();
001c70  f7fffffe          BL       GPS_COLLECT2
;;;594    strcat(data,"CH\n");	
001c74  499e              LDR      r1,|L1.7920|
001c76  3944              SUBS     r1,r1,#0x44
001c78  48a0              LDR      r0,|L1.7932|
001c7a  f7fffffe          BL       strcat
;;;595    memset(at_,0,100);
001c7e  2164              MOVS     r1,#0x64
001c80  48a2              LDR      r0,|L1.7948|
001c82  f7fffffe          BL       __aeabi_memclr
;;;596    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001c86  4aa2              LDR      r2,|L1.7952|
001c88  499e              LDR      r1,|L1.7940|
001c8a  3120              ADDS     r1,r1,#0x20
001c8c  489f              LDR      r0,|L1.7948|
001c8e  f7fffffe          BL       __2sprintf
;;;597    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
001c92  48a0              LDR      r0,|L1.7956|
001c94  6800              LDR      r0,[r0,#0]  ; tmeout
001c96  4b9b              LDR      r3,|L1.7940|
001c98  4a95              LDR      r2,|L1.7920|
001c9a  3a14              SUBS     r2,r2,#0x14
001c9c  a19a              ADR      r1,|L1.7944|
001c9e  9000              STR      r0,[sp,#0]
001ca0  489a              LDR      r0,|L1.7948|
001ca2  f7fffffe          BL       send_GSM
;;;598    msg_sim800(); 
001ca6  f7fffffe          BL       msg_sim800
;;;599    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
001caa  2004              MOVS     r0,#4
001cac  4b90              LDR      r3,|L1.7920|
001cae  3b70              SUBS     r3,r3,#0x70
001cb0  461a              MOV      r2,r3
001cb2  325c              ADDS     r2,r2,#0x5c
001cb4  a194              ADR      r1,|L1.7944|
001cb6  9000              STR      r0,[sp,#0]
001cb8  4892              LDR      r0,|L1.7940|
001cba  3038              ADDS     r0,r0,#0x38
001cbc  f7fffffe          BL       send_GSM
;;;600    GPS_COLLECT2();
001cc0  f7fffffe          BL       GPS_COLLECT2
;;;601    strcat(data,"CH\n");	
001cc4  498a              LDR      r1,|L1.7920|
001cc6  3944              SUBS     r1,r1,#0x44
001cc8  488c              LDR      r0,|L1.7932|
001cca  f7fffffe          BL       strcat
;;;602    GPS_COLLECT2();
001cce  f7fffffe          BL       GPS_COLLECT2
;;;603    strcat(data,"CH\n");	
001cd2  4987              LDR      r1,|L1.7920|
001cd4  3944              SUBS     r1,r1,#0x44
001cd6  4889              LDR      r0,|L1.7932|
001cd8  f7fffffe          BL       strcat
;;;604    
;;;605    
;;;606    msg_sim800(); 
001cdc  f7fffffe          BL       msg_sim800
;;;607    GPS_COLLECT2();
001ce0  f7fffffe          BL       GPS_COLLECT2
;;;608    strcat(data,"CH\n");	
001ce4  4982              LDR      r1,|L1.7920|
001ce6  3944              SUBS     r1,r1,#0x44
001ce8  4884              LDR      r0,|L1.7932|
001cea  f7fffffe          BL       strcat
;;;609    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
001cee  f7fffffe          BL       clear
001cf2  4884              LDR      r0,|L1.7940|
001cf4  3048              ADDS     r0,r0,#0x48
001cf6  f7fffffe          BL       send_modem
001cfa  f7fffffe          BL       clear
;;;610    					delay(20);
001cfe  2014              MOVS     r0,#0x14
001d00  f7fffffe          BL       delay
;;;611    
;;;612    
;;;613    msg_sim800(); 
001d04  f7fffffe          BL       msg_sim800
;;;614    
;;;615    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001d08  4b83              LDR      r3,|L1.7960|
001d0a  4a84              LDR      r2,|L1.7964|
001d0c  497d              LDR      r1,|L1.7940|
001d0e  3160              ADDS     r1,r1,#0x60
001d10  487e              LDR      r0,|L1.7948|
001d12  f7fffffe          BL       __2sprintf
;;;616    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001d16  487f              LDR      r0,|L1.7956|
001d18  6800              LDR      r0,[r0,#0]  ; tmeout
001d1a  4b7a              LDR      r3,|L1.7940|
001d1c  4a74              LDR      r2,|L1.7920|
001d1e  3a8c              SUBS     r2,r2,#0x8c
001d20  4619              MOV      r1,r3
001d22  3180              ADDS     r1,r1,#0x80
001d24  9000              STR      r0,[sp,#0]
001d26  4879              LDR      r0,|L1.7948|
001d28  f7fffffe          BL       send_GSM
;;;617    						clear();
001d2c  f7fffffe          BL       clear
;;;618    						
;;;619    						
;;;620    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
001d30  4878              LDR      r0,|L1.7956|
001d32  6800              LDR      r0,[r0,#0]  ; tmeout
001d34  4b73              LDR      r3,|L1.7940|
001d36  3388              ADDS     r3,r3,#0x88
001d38  4a6d              LDR      r2,|L1.7920|
001d3a  3a8c              SUBS     r2,r2,#0x8c
001d3c  a178              ADR      r1,|L1.7968|
001d3e  9000              STR      r0,[sp,#0]
001d40  4618              MOV      r0,r3
001d42  3010              ADDS     r0,r0,#0x10
001d44  f7fffffe          BL       send_GSM
;;;621    //*************************************tcp_initialization_ends****************************************//							
;;;622    									
;;;623    						clear();		
001d48  f7fffffe          BL       clear
;;;624    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
001d4c  213e              MOVS     r1,#0x3e
001d4e  4869              LDR      r0,|L1.7924|
001d50  f7fffffe          BL       mystrstr
001d54  4973              LDR      r1,|L1.7972|
001d56  7008              STRB     r0,[r1,#0]
;;;625    								if(cond)	
001d58  4608              MOV      r0,r1
001d5a  7800              LDRB     r0,[r0,#0]  ; cond
001d5c  2800              CMP      r0,#0
001d5e  d07d              BEQ      |L1.7772|
;;;626    								{	
;;;627    
;;;628    									clear();
001d60  f7fffffe          BL       clear
;;;629    									memset(uart_string_gsm,0,5000);
001d64  4970              LDR      r1,|L1.7976|
001d66  4863              LDR      r0,|L1.7924|
001d68  f7fffffe          BL       __aeabi_memclr
;;;630    									strcat(data,"\n");
001d6c  a16f              ADR      r1,|L1.7980|
001d6e  4863              LDR      r0,|L1.7932|
001d70  f7fffffe          BL       strcat
;;;631    									len=strlen(data);
001d74  4861              LDR      r0,|L1.7932|
001d76  f7fffffe          BL       strlen
001d7a  496d              LDR      r1,|L1.7984|
001d7c  6008              STR      r0,[r1,#0]  ; len
;;;632    									tout=0;
001d7e  2000              MOVS     r0,#0
001d80  495d              LDR      r1,|L1.7928|
001d82  6008              STR      r0,[r1,#0]  ; tout
;;;633    									k2=0;
001d84  496b              LDR      r1,|L1.7988|
001d86  6008              STR      r0,[r1,#0]  ; k2
;;;634    									for(k=0;k<len;k++)
001d88  496b              LDR      r1,|L1.7992|
001d8a  6008              STR      r0,[r1,#0]  ; k
001d8c  e00b              B        |L1.7590|
                  |L1.7566|
;;;635    									{
;;;636    										uart_putchar(UART1_BASE_PTR, data[k]);
001d8e  485b              LDR      r0,|L1.7932|
001d90  4a69              LDR      r2,|L1.7992|
001d92  6812              LDR      r2,[r2,#0]  ; k
001d94  5c81              LDRB     r1,[r0,r2]
001d96  4855              LDR      r0,|L1.7916|
001d98  f7fffffe          BL       uart_putchar
001d9c  4866              LDR      r0,|L1.7992|
001d9e  6800              LDR      r0,[r0,#0]            ;634  ; k
001da0  1c40              ADDS     r0,r0,#1              ;634
001da2  4965              LDR      r1,|L1.7992|
001da4  6008              STR      r0,[r1,#0]            ;634  ; k
                  |L1.7590|
001da6  4864              LDR      r0,|L1.7992|
001da8  6800              LDR      r0,[r0,#0]            ;634  ; k
001daa  4961              LDR      r1,|L1.7984|
001dac  6809              LDR      r1,[r1,#0]            ;634  ; len
001dae  4288              CMP      r0,r1                 ;634
001db0  dbed              BLT      |L1.7566|
;;;637    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001db2  211a              MOVS     r1,#0x1a
001db4  484d              LDR      r0,|L1.7916|
001db6  f7fffffe          BL       uart_putchar
001dba  211a              MOVS     r1,#0x1a
001dbc  484b              LDR      r0,|L1.7916|
001dbe  f7fffffe          BL       uart_putchar
;;;638    									do
001dc2  bf00              NOP      
                  |L1.7620|
;;;639    																{stcond1=strstr(uart_string_gsm,"SEND OK");
001dc4  495d              LDR      r1,|L1.7996|
001dc6  484b              LDR      r0,|L1.7924|
001dc8  f7fffffe          BL       strstr
001dcc  495c              LDR      r1,|L1.8000|
001dce  6008              STR      r0,[r1,#0]  ; stcond1
;;;640    																	stcond2=strstr(uart_string_gsm, "ERROR");
001dd0  4947              LDR      r1,|L1.7920|
001dd2  398c              SUBS     r1,r1,#0x8c
001dd4  4847              LDR      r0,|L1.7924|
001dd6  f7fffffe          BL       strstr
001dda  495a              LDR      r1,|L1.8004|
001ddc  6008              STR      r0,[r1,#0]  ; stcond2
;;;641    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001dde  4949              LDR      r1,|L1.7940|
001de0  3190              ADDS     r1,r1,#0x90
001de2  4844              LDR      r0,|L1.7924|
001de4  f7fffffe          BL       strstr
001de8  4957              LDR      r1,|L1.8008|
001dea  6008              STR      r0,[r1,#0]  ; stcond3
;;;642    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001dec  4940              LDR      r1,|L1.7920|
001dee  3970              SUBS     r1,r1,#0x70
001df0  4840              LDR      r0,|L1.7924|
001df2  f7fffffe          BL       strstr
001df6  4955              LDR      r1,|L1.8012|
001df8  6008              STR      r0,[r1,#0]  ; stcond4
;;;643    																	
;;;644    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
001dfa  4852              LDR      r0,|L1.8004|
001dfc  6800              LDR      r0,[r0,#0]  ; stcond2
001dfe  2800              CMP      r0,#0
001e00  d10f              BNE      |L1.7714|
001e02  4851              LDR      r0,|L1.8008|
001e04  6800              LDR      r0,[r0,#0]  ; stcond3
001e06  2800              CMP      r0,#0
001e08  d10b              BNE      |L1.7714|
001e0a  4608              MOV      r0,r1
001e0c  6800              LDR      r0,[r0,#0]  ; stcond4
001e0e  2800              CMP      r0,#0
001e10  d107              BNE      |L1.7714|
001e12  484b              LDR      r0,|L1.8000|
001e14  6800              LDR      r0,[r0,#0]  ; stcond1
001e16  2800              CMP      r0,#0
001e18  d103              BNE      |L1.7714|
001e1a  4837              LDR      r0,|L1.7928|
001e1c  6800              LDR      r0,[r0,#0]  ; tout
001e1e  2805              CMP      r0,#5
001e20  ddd0              BLE      |L1.7620|
                  |L1.7714|
;;;645    															//	delay(10);clear();
;;;646    														uart_putchar(UART1_BASE_PTR,0x1A);
001e22  211a              MOVS     r1,#0x1a
001e24  4831              LDR      r0,|L1.7916|
001e26  f7fffffe          BL       uart_putchar
;;;647    											//	delay(10);
;;;648    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001e2a  211a              MOVS     r1,#0x1a
001e2c  482f              LDR      r0,|L1.7916|
001e2e  f7fffffe          BL       uart_putchar
001e32  211a              MOVS     r1,#0x1a
001e34  482d              LDR      r0,|L1.7916|
001e36  f7fffffe          BL       uart_putchar
001e3a  211a              MOVS     r1,#0x1a
001e3c  482b              LDR      r0,|L1.7916|
001e3e  f7fffffe          BL       uart_putchar
;;;649    						
;;;650    
;;;651    
;;;652    									
;;;653    															
;;;654    															
;;;655    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;656    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;657    															
;;;658    														//qwe=strlen(uart_string_gsm);
;;;659    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;660    															delay(20);
001e42  2014              MOVS     r0,#0x14
001e44  f7fffffe          BL       delay
;;;661    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
001e48  493c              LDR      r1,|L1.7996|
001e4a  482a              LDR      r0,|L1.7924|
001e4c  f7fffffe          BL       strstr
001e50  493f              LDR      r1,|L1.8016|
001e52  6008              STR      r0,[r1,#0]  ; con1d
;;;662    																if(!con1d)
001e54  4608              MOV      r0,r1
001e56  6800              LDR      r0,[r0,#0]  ; con1d
001e58  2800              CMP      r0,#0
001e5a  e000              B        |L1.7774|
                  |L1.7772|
001e5c  e179              B        |L1.8530|
                  |L1.7774|
001e5e  d17b              BNE      |L1.8024|
;;;663    																{
;;;664    																	
;;;665    																	
;;;666    	delay(100);
001e60  2064              MOVS     r0,#0x64
001e62  f7fffffe          BL       delay
;;;667    		clear();//memset(uart_string_gsm,0,5000);
001e66  f7fffffe          BL       clear
;;;668    	
;;;669    	memset(at_,0,100);
001e6a  2164              MOVS     r1,#0x64
001e6c  4827              LDR      r0,|L1.7948|
001e6e  f7fffffe          BL       __aeabi_memclr
;;;670    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001e72  4822              LDR      r0,|L1.7932|
001e74  f7fffffe          BL       strlen
001e78  1c44              ADDS     r4,r0,#1
001e7a  4623              MOV      r3,r4
001e7c  4a35              LDR      r2,|L1.8020|
001e7e  491c              LDR      r1,|L1.7920|
001e80  3938              SUBS     r1,r1,#0x38
001e82  4822              LDR      r0,|L1.7948|
001e84  f7fffffe          BL       __2sprintf
;;;671    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001e88  2005              MOVS     r0,#5
001e8a  4b19              LDR      r3,|L1.7920|
001e8c  3b8c              SUBS     r3,r3,#0x8c
001e8e  461a              MOV      r2,r3
001e90  3278              ADDS     r2,r2,#0x78
001e92  a123              ADR      r1,|L1.7968|
001e94  9000              STR      r0,[sp,#0]
001e96  481d              LDR      r0,|L1.7948|
001e98  f7fffffe          BL       send_SD
;;;672    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;673    //	if(strstr(uart_string_gsm,"ERROR")){
;;;674    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;675    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;676    //	}
;;;677    	
;;;678    clear();	
001e9c  f7fffffe          BL       clear
;;;679    									k2=0;									//string array counter for uart 1
001ea0  2000              MOVS     r0,#0
001ea2  4924              LDR      r1,|L1.7988|
001ea4  6008              STR      r0,[r1,#0]  ; k2
;;;680    									tout=0;	
001ea6  4914              LDR      r1,|L1.7928|
001ea8  6008              STR      r0,[r1,#0]  ; tout
;;;681    		for(k=0;k<strlen(data);k++)
001eaa  4923              LDR      r1,|L1.7992|
001eac  6008              STR      r0,[r1,#0]  ; k
001eae  e00b              B        |L1.7880|
                  |L1.7856|
;;;682    		{
;;;683    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001eb0  4812              LDR      r0,|L1.7932|
001eb2  4a21              LDR      r2,|L1.7992|
001eb4  6812              LDR      r2,[r2,#0]  ; k
001eb6  5c81              LDRB     r1,[r0,r2]
001eb8  480c              LDR      r0,|L1.7916|
001eba  f7fffffe          BL       uart_putchar
001ebe  481e              LDR      r0,|L1.7992|
001ec0  6800              LDR      r0,[r0,#0]            ;681  ; k
001ec2  1c40              ADDS     r0,r0,#1              ;681
001ec4  491c              LDR      r1,|L1.7992|
001ec6  6008              STR      r0,[r1,#0]            ;681  ; k
                  |L1.7880|
001ec8  480c              LDR      r0,|L1.7932|
001eca  f7fffffe          BL       strlen
001ece  491a              LDR      r1,|L1.7992|
001ed0  6809              LDR      r1,[r1,#0]            ;681  ; k
001ed2  4288              CMP      r0,r1                 ;681
001ed4  d8ec              BHI      |L1.7856|
;;;684    		}	
;;;685    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001ed6  210a              MOVS     r1,#0xa
001ed8  4804              LDR      r0,|L1.7916|
001eda  f7fffffe          BL       uart_putchar
001ede  210a              MOVS     r1,#0xa
001ee0  4802              LDR      r0,|L1.7916|
001ee2  f7fffffe          BL       uart_putchar
001ee6  210a              MOVS     r1,#0xa
001ee8  4800              LDR      r0,|L1.7916|
001eea  e036              B        |L1.8026|
                  |L1.7916|
                          DCD      0x4006b000
                  |L1.7920|
                          DCD      ||.text||+0x8fc
                  |L1.7924|
                          DCD      uart_string_gsm
                  |L1.7928|
                          DCD      tout
                  |L1.7932|
                          DCD      data
                  |L1.7936|
                          DCD      0x400ff080
                  |L1.7940|
                          DCD      ||.text||+0xd54
                  |L1.7944|
001f08  4f4b00            DCB      "OK",0
001f0b  00                DCB      0
                  |L1.7948|
                          DCD      at_
                  |L1.7952|
                          DCD      apn
                  |L1.7956|
                          DCD      tmeout
                  |L1.7960|
                          DCD      port
                  |L1.7964|
                          DCD      ||ip||
                  |L1.7968|
001f20  3e00              DCB      ">",0
001f22  00                DCB      0
001f23  00                DCB      0
                  |L1.7972|
                          DCD      cond
                  |L1.7976|
                          DCD      0x00001388
                  |L1.7980|
001f2c  0a00              DCB      "\n",0
001f2e  00                DCB      0
001f2f  00                DCB      0
                  |L1.7984|
                          DCD      len
                  |L1.7988|
                          DCD      ||k2||
                  |L1.7992|
                          DCD      k
                  |L1.7996|
                          DCD      ||.text||+0x474
                  |L1.8000|
                          DCD      stcond1
                  |L1.8004|
                          DCD      stcond2
                  |L1.8008|
                          DCD      stcond3
                  |L1.8012|
                          DCD      stcond4
                  |L1.8016|
                          DCD      con1d
                  |L1.8020|
                          DCD      drive
                  |L1.8024|
001f58  e0f8              B        |L1.8524|
                  |L1.8026|
001f5a  f7fffffe          BL       uart_putchar
001f5e  210a              MOVS     r1,#0xa
001f60  48fe              LDR      r0,|L1.9052|
001f62  f7fffffe          BL       uart_putchar
001f66  210a              MOVS     r1,#0xa
001f68  48fc              LDR      r0,|L1.9052|
001f6a  f7fffffe          BL       uart_putchar
001f6e  210a              MOVS     r1,#0xa
001f70  48fa              LDR      r0,|L1.9052|
001f72  f7fffffe          BL       uart_putchar
001f76  210a              MOVS     r1,#0xa
001f78  48f8              LDR      r0,|L1.9052|
001f7a  f7fffffe          BL       uart_putchar
001f7e  210a              MOVS     r1,#0xa
001f80  48f6              LDR      r0,|L1.9052|
001f82  f7fffffe          BL       uart_putchar
001f86  210a              MOVS     r1,#0xa
001f88  48f4              LDR      r0,|L1.9052|
001f8a  f7fffffe          BL       uart_putchar
001f8e  210a              MOVS     r1,#0xa
001f90  48f2              LDR      r0,|L1.9052|
001f92  f7fffffe          BL       uart_putchar
001f96  210a              MOVS     r1,#0xa
001f98  48f0              LDR      r0,|L1.9052|
001f9a  f7fffffe          BL       uart_putchar
001f9e  210a              MOVS     r1,#0xa
001fa0  48ee              LDR      r0,|L1.9052|
001fa2  f7fffffe          BL       uart_putchar
001fa6  210a              MOVS     r1,#0xa
001fa8  48ec              LDR      r0,|L1.9052|
001faa  f7fffffe          BL       uart_putchar
001fae  210a              MOVS     r1,#0xa
001fb0  48ea              LDR      r0,|L1.9052|
001fb2  f7fffffe          BL       uart_putchar
001fb6  210a              MOVS     r1,#0xa
001fb8  48e8              LDR      r0,|L1.9052|
001fba  f7fffffe          BL       uart_putchar
001fbe  210a              MOVS     r1,#0xa
001fc0  48e6              LDR      r0,|L1.9052|
001fc2  f7fffffe          BL       uart_putchar
001fc6  210a              MOVS     r1,#0xa
001fc8  48e4              LDR      r0,|L1.9052|
001fca  f7fffffe          BL       uart_putchar
001fce  210a              MOVS     r1,#0xa
001fd0  48e2              LDR      r0,|L1.9052|
001fd2  f7fffffe          BL       uart_putchar
001fd6  210a              MOVS     r1,#0xa
001fd8  48e0              LDR      r0,|L1.9052|
001fda  f7fffffe          BL       uart_putchar
001fde  210a              MOVS     r1,#0xa
001fe0  48de              LDR      r0,|L1.9052|
001fe2  f7fffffe          BL       uart_putchar
001fe6  210a              MOVS     r1,#0xa
001fe8  48dc              LDR      r0,|L1.9052|
001fea  f7fffffe          BL       uart_putchar
001fee  210a              MOVS     r1,#0xa
001ff0  48da              LDR      r0,|L1.9052|
001ff2  f7fffffe          BL       uart_putchar
001ff6  210a              MOVS     r1,#0xa
001ff8  48d8              LDR      r0,|L1.9052|
001ffa  f7fffffe          BL       uart_putchar
001ffe  210a              MOVS     r1,#0xa
002000  48d6              LDR      r0,|L1.9052|
002002  f7fffffe          BL       uart_putchar
002006  210a              MOVS     r1,#0xa
002008  48d4              LDR      r0,|L1.9052|
00200a  f7fffffe          BL       uart_putchar
00200e  210a              MOVS     r1,#0xa
002010  48d2              LDR      r0,|L1.9052|
002012  f7fffffe          BL       uart_putchar
002016  210a              MOVS     r1,#0xa
002018  48d0              LDR      r0,|L1.9052|
00201a  f7fffffe          BL       uart_putchar
00201e  210a              MOVS     r1,#0xa
002020  48ce              LDR      r0,|L1.9052|
002022  f7fffffe          BL       uart_putchar
002026  210a              MOVS     r1,#0xa
002028  48cc              LDR      r0,|L1.9052|
00202a  f7fffffe          BL       uart_putchar
00202e  210a              MOVS     r1,#0xa
002030  48ca              LDR      r0,|L1.9052|
002032  f7fffffe          BL       uart_putchar
002036  210a              MOVS     r1,#0xa
002038  48c8              LDR      r0,|L1.9052|
00203a  f7fffffe          BL       uart_putchar
00203e  210a              MOVS     r1,#0xa
002040  48c6              LDR      r0,|L1.9052|
002042  f7fffffe          BL       uart_putchar
002046  210a              MOVS     r1,#0xa
002048  48c4              LDR      r0,|L1.9052|
00204a  f7fffffe          BL       uart_putchar
00204e  210a              MOVS     r1,#0xa
002050  48c2              LDR      r0,|L1.9052|
002052  f7fffffe          BL       uart_putchar
002056  210a              MOVS     r1,#0xa
002058  48c0              LDR      r0,|L1.9052|
00205a  f7fffffe          BL       uart_putchar
00205e  210a              MOVS     r1,#0xa
002060  48be              LDR      r0,|L1.9052|
002062  f7fffffe          BL       uart_putchar
002066  210a              MOVS     r1,#0xa
002068  48bc              LDR      r0,|L1.9052|
00206a  f7fffffe          BL       uart_putchar
00206e  210a              MOVS     r1,#0xa
002070  48ba              LDR      r0,|L1.9052|
002072  f7fffffe          BL       uart_putchar
002076  210a              MOVS     r1,#0xa
002078  48b8              LDR      r0,|L1.9052|
00207a  f7fffffe          BL       uart_putchar
00207e  210a              MOVS     r1,#0xa
002080  48b6              LDR      r0,|L1.9052|
002082  f7fffffe          BL       uart_putchar
002086  210a              MOVS     r1,#0xa
002088  48b4              LDR      r0,|L1.9052|
00208a  f7fffffe          BL       uart_putchar
00208e  210a              MOVS     r1,#0xa
002090  48b2              LDR      r0,|L1.9052|
002092  f7fffffe          BL       uart_putchar
002096  210a              MOVS     r1,#0xa
002098  48b0              LDR      r0,|L1.9052|
00209a  f7fffffe          BL       uart_putchar
00209e  210a              MOVS     r1,#0xa
0020a0  48ae              LDR      r0,|L1.9052|
0020a2  f7fffffe          BL       uart_putchar
0020a6  210a              MOVS     r1,#0xa
0020a8  48ac              LDR      r0,|L1.9052|
0020aa  f7fffffe          BL       uart_putchar
0020ae  210a              MOVS     r1,#0xa
0020b0  48aa              LDR      r0,|L1.9052|
0020b2  f7fffffe          BL       uart_putchar
0020b6  210a              MOVS     r1,#0xa
0020b8  48a8              LDR      r0,|L1.9052|
0020ba  f7fffffe          BL       uart_putchar
0020be  210a              MOVS     r1,#0xa
0020c0  48a6              LDR      r0,|L1.9052|
0020c2  f7fffffe          BL       uart_putchar
0020c6  210a              MOVS     r1,#0xa
0020c8  48a4              LDR      r0,|L1.9052|
0020ca  f7fffffe          BL       uart_putchar
0020ce  210a              MOVS     r1,#0xa
0020d0  48a2              LDR      r0,|L1.9052|
0020d2  f7fffffe          BL       uart_putchar
0020d6  210a              MOVS     r1,#0xa
0020d8  48a0              LDR      r0,|L1.9052|
0020da  f7fffffe          BL       uart_putchar
0020de  210a              MOVS     r1,#0xa
0020e0  489e              LDR      r0,|L1.9052|
0020e2  f7fffffe          BL       uart_putchar
0020e6  210a              MOVS     r1,#0xa
0020e8  489c              LDR      r0,|L1.9052|
0020ea  f7fffffe          BL       uart_putchar
0020ee  210a              MOVS     r1,#0xa
0020f0  489a              LDR      r0,|L1.9052|
0020f2  f7fffffe          BL       uart_putchar
0020f6  210a              MOVS     r1,#0xa
0020f8  4898              LDR      r0,|L1.9052|
0020fa  f7fffffe          BL       uart_putchar
0020fe  210a              MOVS     r1,#0xa
002100  4896              LDR      r0,|L1.9052|
002102  f7fffffe          BL       uart_putchar
002106  210a              MOVS     r1,#0xa
002108  4894              LDR      r0,|L1.9052|
00210a  f7fffffe          BL       uart_putchar
;;;686    									//memset(data,0,1000);
;;;687    														//timer counts to wait for characters in uart 1 									
;;;688    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00210e  bf00              NOP      
                  |L1.8464|
002110  4993              LDR      r1,|L1.9056|
002112  4894              LDR      r0,|L1.9060|
002114  f7fffffe          BL       strstr
002118  2800              CMP      r0,#0
00211a  d10a              BNE      |L1.8498|
00211c  4990              LDR      r1,|L1.9056|
00211e  398c              SUBS     r1,r1,#0x8c
002120  4890              LDR      r0,|L1.9060|
002122  f7fffffe          BL       strstr
002126  2800              CMP      r0,#0
002128  d103              BNE      |L1.8498|
00212a  488f              LDR      r0,|L1.9064|
00212c  6800              LDR      r0,[r0,#0]  ; tout
00212e  2805              CMP      r0,#5
002130  ddee              BLE      |L1.8464|
                  |L1.8498|
;;;689    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;690    									}
;;;691    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002132  f7fffffe          BL       clear
;;;692    									//clear();
;;;693    									memset(data,0,strlen(data));
002136  488d              LDR      r0,|L1.9068|
002138  f7fffffe          BL       strlen
00213c  4604              MOV      r4,r0
00213e  4621              MOV      r1,r4
002140  488a              LDR      r0,|L1.9068|
002142  f7fffffe          BL       __aeabi_memclr
;;;694    									clear();
002146  f7fffffe          BL       clear
00214a  e157              B        |L1.9212|
                  |L1.8524|
;;;695    
;;;696    								
;;;697    																	
;;;698    																	
;;;699    								//								log_it();								
;;;700    																}else{send_chunk();}													
00214c  f7fffffe          BL       send_chunk
002150  e154              B        |L1.9212|
                  |L1.8530|
;;;701    								//checks for the sd_data available
;;;702    								}
;;;703    								//con1d=strstr(uart_string_gsm,"OK");
;;;704    								else
;;;705    								{
;;;706    									
;;;707    									
;;;708    									
;;;709    	delay(100);
002152  2064              MOVS     r0,#0x64
002154  f7fffffe          BL       delay
;;;710    		clear();//memset(uart_string_gsm,0,5000);
002158  f7fffffe          BL       clear
;;;711    	
;;;712    	memset(at_,0,100);
00215c  2164              MOVS     r1,#0x64
00215e  4884              LDR      r0,|L1.9072|
002160  f7fffffe          BL       __aeabi_memclr
;;;713    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002164  4881              LDR      r0,|L1.9068|
002166  f7fffffe          BL       strlen
00216a  1c44              ADDS     r4,r0,#1
00216c  4623              MOV      r3,r4
00216e  4a81              LDR      r2,|L1.9076|
002170  497b              LDR      r1,|L1.9056|
002172  3938              SUBS     r1,r1,#0x38
002174  487e              LDR      r0,|L1.9072|
002176  f7fffffe          BL       __2sprintf
;;;714    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00217a  2005              MOVS     r0,#5
00217c  4b78              LDR      r3,|L1.9056|
00217e  3b8c              SUBS     r3,r3,#0x8c
002180  461a              MOV      r2,r3
002182  3278              ADDS     r2,r2,#0x78
002184  a17c              ADR      r1,|L1.9080|
002186  9000              STR      r0,[sp,#0]
002188  4879              LDR      r0,|L1.9072|
00218a  f7fffffe          BL       send_SD
;;;715    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;716    //	if(strstr(uart_string_gsm,"ERROR")){
;;;717    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;718    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;719    //	}
;;;720    	
;;;721    clear();	
00218e  f7fffffe          BL       clear
;;;722    									k2=0;									//string array counter for uart 1
002192  2000              MOVS     r0,#0
002194  4979              LDR      r1,|L1.9084|
002196  6008              STR      r0,[r1,#0]  ; k2
;;;723    									tout=0;	
002198  4973              LDR      r1,|L1.9064|
00219a  6008              STR      r0,[r1,#0]  ; tout
;;;724    		for(k=0;k<strlen(data);k++)
00219c  4978              LDR      r1,|L1.9088|
00219e  6008              STR      r0,[r1,#0]  ; k
0021a0  e00b              B        |L1.8634|
                  |L1.8610|
;;;725    		{
;;;726    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0021a2  4872              LDR      r0,|L1.9068|
0021a4  4a76              LDR      r2,|L1.9088|
0021a6  6812              LDR      r2,[r2,#0]  ; k
0021a8  5c81              LDRB     r1,[r0,r2]
0021aa  486c              LDR      r0,|L1.9052|
0021ac  f7fffffe          BL       uart_putchar
0021b0  4873              LDR      r0,|L1.9088|
0021b2  6800              LDR      r0,[r0,#0]            ;724  ; k
0021b4  1c40              ADDS     r0,r0,#1              ;724
0021b6  4972              LDR      r1,|L1.9088|
0021b8  6008              STR      r0,[r1,#0]            ;724  ; k
                  |L1.8634|
0021ba  486c              LDR      r0,|L1.9068|
0021bc  f7fffffe          BL       strlen
0021c0  496f              LDR      r1,|L1.9088|
0021c2  6809              LDR      r1,[r1,#0]            ;724  ; k
0021c4  4288              CMP      r0,r1                 ;724
0021c6  d8ec              BHI      |L1.8610|
;;;727    		}	
;;;728    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0021c8  210a              MOVS     r1,#0xa
0021ca  4864              LDR      r0,|L1.9052|
0021cc  f7fffffe          BL       uart_putchar
0021d0  210a              MOVS     r1,#0xa
0021d2  4862              LDR      r0,|L1.9052|
0021d4  f7fffffe          BL       uart_putchar
0021d8  210a              MOVS     r1,#0xa
0021da  4860              LDR      r0,|L1.9052|
0021dc  f7fffffe          BL       uart_putchar
0021e0  210a              MOVS     r1,#0xa
0021e2  485e              LDR      r0,|L1.9052|
0021e4  f7fffffe          BL       uart_putchar
0021e8  210a              MOVS     r1,#0xa
0021ea  485c              LDR      r0,|L1.9052|
0021ec  f7fffffe          BL       uart_putchar
0021f0  210a              MOVS     r1,#0xa
0021f2  485a              LDR      r0,|L1.9052|
0021f4  f7fffffe          BL       uart_putchar
0021f8  210a              MOVS     r1,#0xa
0021fa  4858              LDR      r0,|L1.9052|
0021fc  f7fffffe          BL       uart_putchar
002200  210a              MOVS     r1,#0xa
002202  4856              LDR      r0,|L1.9052|
002204  f7fffffe          BL       uart_putchar
002208  210a              MOVS     r1,#0xa
00220a  4854              LDR      r0,|L1.9052|
00220c  f7fffffe          BL       uart_putchar
002210  210a              MOVS     r1,#0xa
002212  4852              LDR      r0,|L1.9052|
002214  f7fffffe          BL       uart_putchar
002218  210a              MOVS     r1,#0xa
00221a  4850              LDR      r0,|L1.9052|
00221c  f7fffffe          BL       uart_putchar
002220  210a              MOVS     r1,#0xa
002222  484e              LDR      r0,|L1.9052|
002224  f7fffffe          BL       uart_putchar
002228  210a              MOVS     r1,#0xa
00222a  484c              LDR      r0,|L1.9052|
00222c  f7fffffe          BL       uart_putchar
002230  210a              MOVS     r1,#0xa
002232  484a              LDR      r0,|L1.9052|
002234  f7fffffe          BL       uart_putchar
002238  210a              MOVS     r1,#0xa
00223a  4848              LDR      r0,|L1.9052|
00223c  f7fffffe          BL       uart_putchar
002240  210a              MOVS     r1,#0xa
002242  4846              LDR      r0,|L1.9052|
002244  f7fffffe          BL       uart_putchar
002248  210a              MOVS     r1,#0xa
00224a  4844              LDR      r0,|L1.9052|
00224c  f7fffffe          BL       uart_putchar
002250  210a              MOVS     r1,#0xa
002252  4842              LDR      r0,|L1.9052|
002254  f7fffffe          BL       uart_putchar
002258  210a              MOVS     r1,#0xa
00225a  4840              LDR      r0,|L1.9052|
00225c  f7fffffe          BL       uart_putchar
002260  210a              MOVS     r1,#0xa
002262  483e              LDR      r0,|L1.9052|
002264  f7fffffe          BL       uart_putchar
002268  210a              MOVS     r1,#0xa
00226a  483c              LDR      r0,|L1.9052|
00226c  f7fffffe          BL       uart_putchar
002270  210a              MOVS     r1,#0xa
002272  483a              LDR      r0,|L1.9052|
002274  f7fffffe          BL       uart_putchar
002278  210a              MOVS     r1,#0xa
00227a  4838              LDR      r0,|L1.9052|
00227c  f7fffffe          BL       uart_putchar
002280  210a              MOVS     r1,#0xa
002282  4836              LDR      r0,|L1.9052|
002284  f7fffffe          BL       uart_putchar
002288  210a              MOVS     r1,#0xa
00228a  4834              LDR      r0,|L1.9052|
00228c  f7fffffe          BL       uart_putchar
002290  210a              MOVS     r1,#0xa
002292  4832              LDR      r0,|L1.9052|
002294  f7fffffe          BL       uart_putchar
002298  210a              MOVS     r1,#0xa
00229a  4830              LDR      r0,|L1.9052|
00229c  f7fffffe          BL       uart_putchar
0022a0  210a              MOVS     r1,#0xa
0022a2  482e              LDR      r0,|L1.9052|
0022a4  f7fffffe          BL       uart_putchar
0022a8  210a              MOVS     r1,#0xa
0022aa  482c              LDR      r0,|L1.9052|
0022ac  f7fffffe          BL       uart_putchar
0022b0  210a              MOVS     r1,#0xa
0022b2  482a              LDR      r0,|L1.9052|
0022b4  f7fffffe          BL       uart_putchar
0022b8  210a              MOVS     r1,#0xa
0022ba  4828              LDR      r0,|L1.9052|
0022bc  f7fffffe          BL       uart_putchar
0022c0  210a              MOVS     r1,#0xa
0022c2  4826              LDR      r0,|L1.9052|
0022c4  f7fffffe          BL       uart_putchar
0022c8  210a              MOVS     r1,#0xa
0022ca  4824              LDR      r0,|L1.9052|
0022cc  f7fffffe          BL       uart_putchar
0022d0  210a              MOVS     r1,#0xa
0022d2  4822              LDR      r0,|L1.9052|
0022d4  f7fffffe          BL       uart_putchar
0022d8  210a              MOVS     r1,#0xa
0022da  4820              LDR      r0,|L1.9052|
0022dc  f7fffffe          BL       uart_putchar
0022e0  210a              MOVS     r1,#0xa
0022e2  481e              LDR      r0,|L1.9052|
0022e4  f7fffffe          BL       uart_putchar
0022e8  210a              MOVS     r1,#0xa
0022ea  481c              LDR      r0,|L1.9052|
0022ec  f7fffffe          BL       uart_putchar
0022f0  210a              MOVS     r1,#0xa
0022f2  481a              LDR      r0,|L1.9052|
0022f4  f7fffffe          BL       uart_putchar
0022f8  210a              MOVS     r1,#0xa
0022fa  4818              LDR      r0,|L1.9052|
0022fc  f7fffffe          BL       uart_putchar
002300  210a              MOVS     r1,#0xa
002302  4816              LDR      r0,|L1.9052|
002304  f7fffffe          BL       uart_putchar
002308  210a              MOVS     r1,#0xa
00230a  4814              LDR      r0,|L1.9052|
00230c  f7fffffe          BL       uart_putchar
002310  210a              MOVS     r1,#0xa
002312  4812              LDR      r0,|L1.9052|
002314  f7fffffe          BL       uart_putchar
002318  210a              MOVS     r1,#0xa
00231a  4810              LDR      r0,|L1.9052|
00231c  f7fffffe          BL       uart_putchar
002320  210a              MOVS     r1,#0xa
002322  480e              LDR      r0,|L1.9052|
002324  f7fffffe          BL       uart_putchar
002328  210a              MOVS     r1,#0xa
00232a  480c              LDR      r0,|L1.9052|
00232c  f7fffffe          BL       uart_putchar
002330  210a              MOVS     r1,#0xa
002332  480a              LDR      r0,|L1.9052|
002334  f7fffffe          BL       uart_putchar
002338  210a              MOVS     r1,#0xa
00233a  4808              LDR      r0,|L1.9052|
00233c  f7fffffe          BL       uart_putchar
002340  210a              MOVS     r1,#0xa
002342  4806              LDR      r0,|L1.9052|
002344  f7fffffe          BL       uart_putchar
002348  210a              MOVS     r1,#0xa
00234a  4804              LDR      r0,|L1.9052|
00234c  f7fffffe          BL       uart_putchar
002350  210a              MOVS     r1,#0xa
002352  4802              LDR      r0,|L1.9052|
002354  f7fffffe          BL       uart_putchar
002358  210a              MOVS     r1,#0xa
00235a  e013              B        |L1.9092|
                  |L1.9052|
                          DCD      0x4006b000
                  |L1.9056|
                          DCD      ||.text||+0x8fc
                  |L1.9060|
                          DCD      uart_string_gsm
                  |L1.9064|
                          DCD      tout
                  |L1.9068|
                          DCD      data
                  |L1.9072|
                          DCD      at_
                  |L1.9076|
                          DCD      drive
                  |L1.9080|
002378  3e00              DCB      ">",0
00237a  00                DCB      0
00237b  00                DCB      0
                  |L1.9084|
                          DCD      ||k2||
                  |L1.9088|
                          DCD      k
                  |L1.9092|
002384  48fe              LDR      r0,|L1.10112|
002386  f7fffffe          BL       uart_putchar
00238a  210a              MOVS     r1,#0xa
00238c  48fc              LDR      r0,|L1.10112|
00238e  f7fffffe          BL       uart_putchar
002392  210a              MOVS     r1,#0xa
002394  48fa              LDR      r0,|L1.10112|
002396  f7fffffe          BL       uart_putchar
00239a  210a              MOVS     r1,#0xa
00239c  48f8              LDR      r0,|L1.10112|
00239e  f7fffffe          BL       uart_putchar
0023a2  210a              MOVS     r1,#0xa
0023a4  48f6              LDR      r0,|L1.10112|
0023a6  f7fffffe          BL       uart_putchar
0023aa  210a              MOVS     r1,#0xa
0023ac  48f4              LDR      r0,|L1.10112|
0023ae  f7fffffe          BL       uart_putchar
0023b2  210a              MOVS     r1,#0xa
0023b4  48f2              LDR      r0,|L1.10112|
0023b6  f7fffffe          BL       uart_putchar
;;;729    									//memset(data,0,1000);
;;;730    														//timer counts to wait for characters in uart 1 									
;;;731    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0023ba  bf00              NOP      
                  |L1.9148|
0023bc  49f1              LDR      r1,|L1.10116|
0023be  48f2              LDR      r0,|L1.10120|
0023c0  f7fffffe          BL       strstr
0023c4  2800              CMP      r0,#0
0023c6  d10a              BNE      |L1.9182|
0023c8  49ee              LDR      r1,|L1.10116|
0023ca  398c              SUBS     r1,r1,#0x8c
0023cc  48ee              LDR      r0,|L1.10120|
0023ce  f7fffffe          BL       strstr
0023d2  2800              CMP      r0,#0
0023d4  d103              BNE      |L1.9182|
0023d6  48ed              LDR      r0,|L1.10124|
0023d8  6800              LDR      r0,[r0,#0]  ; tout
0023da  2805              CMP      r0,#5
0023dc  ddee              BLE      |L1.9148|
                  |L1.9182|
;;;732    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;733    									}
;;;734    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0023de  f7fffffe          BL       clear
;;;735    									//clear();
;;;736    									memset(data,0,strlen(data));
0023e2  48eb              LDR      r0,|L1.10128|
0023e4  f7fffffe          BL       strlen
0023e8  4604              MOV      r4,r0
0023ea  4621              MOV      r1,r4
0023ec  48e8              LDR      r0,|L1.10128|
0023ee  f7fffffe          BL       __aeabi_memclr
;;;737    									clear();
0023f2  f7fffffe          BL       clear
0023f6  e001              B        |L1.9212|
                  |L1.9208|
;;;738    
;;;739    								
;;;740    									
;;;741    									
;;;742    									
;;;743    								//	log_it();			//otherwize log it					
;;;744    								}
;;;745    
;;;746    																
;;;747    //delay(50);
;;;748    
;;;749    //else{
;;;750    //log_it();}
;;;751    								
;;;752    								
;;;753    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;754    	else
;;;755    	{
;;;756    		send_chunk();
0023f8  f7fffffe          BL       send_chunk
                  |L1.9212|
;;;757    	}		
;;;758    								
;;;759    								
;;;760    								
;;;761    	memset(data,0,strlen(data));	
0023fc  48e4              LDR      r0,|L1.10128|
0023fe  f7fffffe          BL       strlen
002402  4604              MOV      r4,r0
002404  4621              MOV      r1,r4
002406  48e2              LDR      r0,|L1.10128|
002408  f7fffffe          BL       __aeabi_memclr
;;;762    	uart_putchar(UART1_BASE_PTR, 0x1A);
00240c  211a              MOVS     r1,#0x1a
00240e  48dc              LDR      r0,|L1.10112|
002410  f7fffffe          BL       uart_putchar
;;;763    	
;;;764    }
002414  bd38              POP      {r3-r5,pc}
;;;765    	
                          ENDP

                  send_tcp2 PROC
;;;780    
;;;781    void send_tcp2()
002416  b538              PUSH     {r3-r5,lr}
;;;782    {	
;;;783    memset(stcond1,0,strlen(stcond1));	
002418  48de              LDR      r0,|L1.10132|
00241a  6800              LDR      r0,[r0,#0]  ; stcond1
00241c  f7fffffe          BL       strlen
002420  4604              MOV      r4,r0
002422  4621              MOV      r1,r4
002424  48db              LDR      r0,|L1.10132|
002426  6800              LDR      r0,[r0,#0]  ; stcond1
002428  f7fffffe          BL       __aeabi_memclr
;;;784    memset(con1d,0,strlen(con1d));	
00242c  48da              LDR      r0,|L1.10136|
00242e  6800              LDR      r0,[r0,#0]  ; con1d
002430  f7fffffe          BL       strlen
002434  4604              MOV      r4,r0
002436  4621              MOV      r1,r4
002438  48d7              LDR      r0,|L1.10136|
00243a  6800              LDR      r0,[r0,#0]  ; con1d
00243c  f7fffffe          BL       __aeabi_memclr
;;;785    	
;;;786    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;787    						
;;;788    								cond=mystrstr(uart_string_gsm,'>');
002440  213e              MOVS     r1,#0x3e
002442  48d1              LDR      r0,|L1.10120|
002444  f7fffffe          BL       mystrstr
002448  49d4              LDR      r1,|L1.10140|
00244a  7008              STRB     r0,[r1,#0]
;;;789    								if(cond)	
00244c  4608              MOV      r0,r1
00244e  7800              LDRB     r0,[r0,#0]  ; cond
002450  2800              CMP      r0,#0
002452  d07c              BEQ      |L1.9550|
;;;790    								{
;;;791    									
;;;792    									clear();
002454  f7fffffe          BL       clear
;;;793    									memset(uart_string_gsm,0,5000);
002458  49d1              LDR      r1,|L1.10144|
00245a  48cb              LDR      r0,|L1.10120|
00245c  f7fffffe          BL       __aeabi_memclr
;;;794    									strcat(data,"\n");
002460  a1d0              ADR      r1,|L1.10148|
002462  48cb              LDR      r0,|L1.10128|
002464  f7fffffe          BL       strcat
;;;795    									len=strlen(data);
002468  48c9              LDR      r0,|L1.10128|
00246a  f7fffffe          BL       strlen
00246e  49ce              LDR      r1,|L1.10152|
002470  6008              STR      r0,[r1,#0]  ; len
;;;796    									tout=0;
002472  2000              MOVS     r0,#0
002474  49c5              LDR      r1,|L1.10124|
002476  6008              STR      r0,[r1,#0]  ; tout
;;;797    									k2=0;
002478  49cc              LDR      r1,|L1.10156|
00247a  6008              STR      r0,[r1,#0]  ; k2
;;;798    									for(k=0;k<len;k++)
00247c  49cc              LDR      r1,|L1.10160|
00247e  6008              STR      r0,[r1,#0]  ; k
002480  e00b              B        |L1.9370|
                  |L1.9346|
;;;799    									{
;;;800    										uart_putchar(UART1_BASE_PTR, data[k]);
002482  48c3              LDR      r0,|L1.10128|
002484  4aca              LDR      r2,|L1.10160|
002486  6812              LDR      r2,[r2,#0]  ; k
002488  5c81              LDRB     r1,[r0,r2]
00248a  48bd              LDR      r0,|L1.10112|
00248c  f7fffffe          BL       uart_putchar
002490  48c7              LDR      r0,|L1.10160|
002492  6800              LDR      r0,[r0,#0]            ;798  ; k
002494  1c40              ADDS     r0,r0,#1              ;798
002496  49c6              LDR      r1,|L1.10160|
002498  6008              STR      r0,[r1,#0]            ;798  ; k
                  |L1.9370|
00249a  48c5              LDR      r0,|L1.10160|
00249c  6800              LDR      r0,[r0,#0]            ;798  ; k
00249e  49c2              LDR      r1,|L1.10152|
0024a0  6809              LDR      r1,[r1,#0]            ;798  ; len
0024a2  4288              CMP      r0,r1                 ;798
0024a4  dbed              BLT      |L1.9346|
;;;801    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0024a6  211a              MOVS     r1,#0x1a
0024a8  48b5              LDR      r0,|L1.10112|
0024aa  f7fffffe          BL       uart_putchar
;;;802    									do
0024ae  bf00              NOP      
                  |L1.9392|
;;;803    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0024b0  49c0              LDR      r1,|L1.10164|
0024b2  48b5              LDR      r0,|L1.10120|
0024b4  f7fffffe          BL       strstr
0024b8  49b6              LDR      r1,|L1.10132|
0024ba  6008              STR      r0,[r1,#0]  ; stcond1
;;;804    																	stcond2=strstr(uart_string_gsm, "ERROR");
0024bc  49b1              LDR      r1,|L1.10116|
0024be  398c              SUBS     r1,r1,#0x8c
0024c0  48b1              LDR      r0,|L1.10120|
0024c2  f7fffffe          BL       strstr
0024c6  49bc              LDR      r1,|L1.10168|
0024c8  6008              STR      r0,[r1,#0]  ; stcond2
;;;805    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0024ca  49bc              LDR      r1,|L1.10172|
0024cc  48ae              LDR      r0,|L1.10120|
0024ce  f7fffffe          BL       strstr
0024d2  49bb              LDR      r1,|L1.10176|
0024d4  6008              STR      r0,[r1,#0]  ; stcond3
;;;806    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0024d6  49ab              LDR      r1,|L1.10116|
0024d8  3970              SUBS     r1,r1,#0x70
0024da  48ab              LDR      r0,|L1.10120|
0024dc  f7fffffe          BL       strstr
0024e0  49b8              LDR      r1,|L1.10180|
0024e2  6008              STR      r0,[r1,#0]  ; stcond4
;;;807    																	
;;;808    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
0024e4  48b4              LDR      r0,|L1.10168|
0024e6  6800              LDR      r0,[r0,#0]  ; stcond2
0024e8  2800              CMP      r0,#0
0024ea  d10f              BNE      |L1.9484|
0024ec  48b4              LDR      r0,|L1.10176|
0024ee  6800              LDR      r0,[r0,#0]  ; stcond3
0024f0  2800              CMP      r0,#0
0024f2  d10b              BNE      |L1.9484|
0024f4  4608              MOV      r0,r1
0024f6  6800              LDR      r0,[r0,#0]  ; stcond4
0024f8  2800              CMP      r0,#0
0024fa  d107              BNE      |L1.9484|
0024fc  48a5              LDR      r0,|L1.10132|
0024fe  6800              LDR      r0,[r0,#0]  ; stcond1
002500  2800              CMP      r0,#0
002502  d103              BNE      |L1.9484|
002504  48a1              LDR      r0,|L1.10124|
002506  6800              LDR      r0,[r0,#0]  ; tout
002508  2804              CMP      r0,#4
00250a  ddd1              BLE      |L1.9392|
                  |L1.9484|
;;;809    																//delay(10);clear();
;;;810    														uart_putchar(UART1_BASE_PTR,0x1A);
00250c  211a              MOVS     r1,#0x1a
00250e  489c              LDR      r0,|L1.10112|
002510  f7fffffe          BL       uart_putchar
;;;811    												//delay(10);
;;;812    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002514  211a              MOVS     r1,#0x1a
002516  489a              LDR      r0,|L1.10112|
002518  f7fffffe          BL       uart_putchar
00251c  211a              MOVS     r1,#0x1a
00251e  4898              LDR      r0,|L1.10112|
002520  f7fffffe          BL       uart_putchar
002524  211a              MOVS     r1,#0x1a
002526  4896              LDR      r0,|L1.10112|
002528  f7fffffe          BL       uart_putchar
;;;813    						
;;;814    									
;;;815    									
;;;816    									
;;;817    									
;;;818    									
;;;819    									
;;;820    									
;;;821    
;;;822    //									for(k=0;k<len;k++)
;;;823    //									{
;;;824    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;825    //									}
;;;826    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;827    
;;;828    //									
;;;829    //													k2=0;									//string array counter for uart 1
;;;830    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;831    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;832    //																{
;;;833    //																	timeout--;
;;;834    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;835    //																}
;;;836    																if(flagch==1){		int_erval=temp;flagch=0;	}
00252c  48a6              LDR      r0,|L1.10184|
00252e  6800              LDR      r0,[r0,#0]  ; flagch
002530  2801              CMP      r0,#1
002532  d106              BNE      |L1.9538|
002534  48a5              LDR      r0,|L1.10188|
002536  6800              LDR      r0,[r0,#0]  ; temp
002538  49a5              LDR      r1,|L1.10192|
00253a  6008              STR      r0,[r1,#0]  ; int_erval
00253c  2000              MOVS     r0,#0
00253e  49a2              LDR      r1,|L1.10184|
002540  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.9538|
;;;837    delay(50);
002542  2032              MOVS     r0,#0x32
002544  f7fffffe          BL       delay
;;;838    stcond1=strstr(uart_string_gsm,"SEND OK");								
002548  499a              LDR      r1,|L1.10164|
00254a  488f              LDR      r0,|L1.10120|
00254c  e000              B        |L1.9552|
                  |L1.9550|
00254e  e003              B        |L1.9560|
                  |L1.9552|
002550  f7fffffe          BL       strstr
002554  498f              LDR      r1,|L1.10132|
002556  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.9560|
;;;839    								}
;;;840    //else{
;;;841    //log_it();
;;;842    //}
;;;843    
;;;844    
;;;845    if(!stcond1) // if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
002558  488e              LDR      r0,|L1.10132|
00255a  6800              LDR      r0,[r0,#0]  ; stcond1
00255c  2800              CMP      r0,#0
00255e  d001              BEQ      |L1.9572|
002560  f000ff35          BL       |L1.13262|
                  |L1.9572|
;;;846    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002564  211a              MOVS     r1,#0x1a
002566  4886              LDR      r0,|L1.10112|
002568  f7fffffe          BL       uart_putchar
00256c  f7fffffe          BL       clear
002570  200a              MOVS     r0,#0xa
002572  f7fffffe          BL       delay
;;;847    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002576  211a              MOVS     r1,#0x1a
002578  4881              LDR      r0,|L1.10112|
00257a  f7fffffe          BL       uart_putchar
00257e  f7fffffe          BL       clear
002582  200a              MOVS     r0,#0xa
002584  f7fffffe          BL       delay
;;;848    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002588  211a              MOVS     r1,#0x1a
00258a  487d              LDR      r0,|L1.10112|
00258c  f7fffffe          BL       uart_putchar
002590  f7fffffe          BL       clear
002594  200a              MOVS     r0,#0xa
002596  f7fffffe          BL       delay
;;;849    						//	remove_all_chars(data, '\n', '\n');
;;;850    	
;;;851    	//	strcat(data,"CH\n");	
;;;852    	
;;;853    	
;;;854    	delay(100);
00259a  2064              MOVS     r0,#0x64
00259c  f7fffffe          BL       delay
;;;855    		clear();//memset(uart_string_gsm,0,5000);
0025a0  f7fffffe          BL       clear
;;;856    	
;;;857    	memset(at_,0,100);
0025a4  2164              MOVS     r1,#0x64
0025a6  488b              LDR      r0,|L1.10196|
0025a8  f7fffffe          BL       __aeabi_memclr
;;;858    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0025ac  4878              LDR      r0,|L1.10128|
0025ae  f7fffffe          BL       strlen
0025b2  1c44              ADDS     r4,r0,#1
0025b4  4623              MOV      r3,r4
0025b6  4a88              LDR      r2,|L1.10200|
0025b8  4972              LDR      r1,|L1.10116|
0025ba  3938              SUBS     r1,r1,#0x38
0025bc  4885              LDR      r0,|L1.10196|
0025be  f7fffffe          BL       __2sprintf
;;;859    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0025c2  2005              MOVS     r0,#5
0025c4  4b6f              LDR      r3,|L1.10116|
0025c6  3b8c              SUBS     r3,r3,#0x8c
0025c8  461a              MOV      r2,r3
0025ca  3278              ADDS     r2,r2,#0x78
0025cc  a183              ADR      r1,|L1.10204|
0025ce  9000              STR      r0,[sp,#0]
0025d0  4880              LDR      r0,|L1.10196|
0025d2  f7fffffe          BL       send_SD
;;;860    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;861    //	if(strstr(uart_string_gsm,"ERROR")){
;;;862    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;863    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;864    //	}
;;;865    	
;;;866    clear();	
0025d6  f7fffffe          BL       clear
;;;867    									k2=0;									//string array counter for uart 1
0025da  2000              MOVS     r0,#0
0025dc  4973              LDR      r1,|L1.10156|
0025de  6008              STR      r0,[r1,#0]  ; k2
;;;868    									tout=0;	
0025e0  496a              LDR      r1,|L1.10124|
0025e2  6008              STR      r0,[r1,#0]  ; tout
;;;869    		for(k=0;k<strlen(data);k++)
0025e4  4972              LDR      r1,|L1.10160|
0025e6  6008              STR      r0,[r1,#0]  ; k
0025e8  e00b              B        |L1.9730|
                  |L1.9706|
;;;870    		{
;;;871    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0025ea  4869              LDR      r0,|L1.10128|
0025ec  4a70              LDR      r2,|L1.10160|
0025ee  6812              LDR      r2,[r2,#0]  ; k
0025f0  5c81              LDRB     r1,[r0,r2]
0025f2  4863              LDR      r0,|L1.10112|
0025f4  f7fffffe          BL       uart_putchar
0025f8  486d              LDR      r0,|L1.10160|
0025fa  6800              LDR      r0,[r0,#0]            ;869  ; k
0025fc  1c40              ADDS     r0,r0,#1              ;869
0025fe  496c              LDR      r1,|L1.10160|
002600  6008              STR      r0,[r1,#0]            ;869  ; k
                  |L1.9730|
002602  4863              LDR      r0,|L1.10128|
002604  f7fffffe          BL       strlen
002608  4969              LDR      r1,|L1.10160|
00260a  6809              LDR      r1,[r1,#0]            ;869  ; k
00260c  4288              CMP      r0,r1                 ;869
00260e  d8ec              BHI      |L1.9706|
;;;872    		}	
;;;873    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002610  210a              MOVS     r1,#0xa
002612  485b              LDR      r0,|L1.10112|
002614  f7fffffe          BL       uart_putchar
002618  210a              MOVS     r1,#0xa
00261a  4859              LDR      r0,|L1.10112|
00261c  f7fffffe          BL       uart_putchar
002620  210a              MOVS     r1,#0xa
002622  4857              LDR      r0,|L1.10112|
002624  f7fffffe          BL       uart_putchar
002628  210a              MOVS     r1,#0xa
00262a  4855              LDR      r0,|L1.10112|
00262c  f7fffffe          BL       uart_putchar
002630  210a              MOVS     r1,#0xa
002632  4853              LDR      r0,|L1.10112|
002634  f7fffffe          BL       uart_putchar
002638  210a              MOVS     r1,#0xa
00263a  4851              LDR      r0,|L1.10112|
00263c  f7fffffe          BL       uart_putchar
002640  210a              MOVS     r1,#0xa
002642  484f              LDR      r0,|L1.10112|
002644  f7fffffe          BL       uart_putchar
002648  210a              MOVS     r1,#0xa
00264a  484d              LDR      r0,|L1.10112|
00264c  f7fffffe          BL       uart_putchar
002650  210a              MOVS     r1,#0xa
002652  484b              LDR      r0,|L1.10112|
002654  f7fffffe          BL       uart_putchar
002658  210a              MOVS     r1,#0xa
00265a  4849              LDR      r0,|L1.10112|
00265c  f7fffffe          BL       uart_putchar
002660  210a              MOVS     r1,#0xa
002662  4847              LDR      r0,|L1.10112|
002664  f7fffffe          BL       uart_putchar
002668  210a              MOVS     r1,#0xa
00266a  4845              LDR      r0,|L1.10112|
00266c  f7fffffe          BL       uart_putchar
002670  210a              MOVS     r1,#0xa
002672  4843              LDR      r0,|L1.10112|
002674  f7fffffe          BL       uart_putchar
002678  210a              MOVS     r1,#0xa
00267a  4841              LDR      r0,|L1.10112|
00267c  f7fffffe          BL       uart_putchar
002680  210a              MOVS     r1,#0xa
002682  483f              LDR      r0,|L1.10112|
002684  f7fffffe          BL       uart_putchar
002688  210a              MOVS     r1,#0xa
00268a  483d              LDR      r0,|L1.10112|
00268c  f7fffffe          BL       uart_putchar
002690  210a              MOVS     r1,#0xa
002692  483b              LDR      r0,|L1.10112|
002694  f7fffffe          BL       uart_putchar
002698  210a              MOVS     r1,#0xa
00269a  4839              LDR      r0,|L1.10112|
00269c  f7fffffe          BL       uart_putchar
0026a0  210a              MOVS     r1,#0xa
0026a2  4837              LDR      r0,|L1.10112|
0026a4  f7fffffe          BL       uart_putchar
0026a8  210a              MOVS     r1,#0xa
0026aa  4835              LDR      r0,|L1.10112|
0026ac  f7fffffe          BL       uart_putchar
0026b0  210a              MOVS     r1,#0xa
0026b2  4833              LDR      r0,|L1.10112|
0026b4  f7fffffe          BL       uart_putchar
0026b8  210a              MOVS     r1,#0xa
0026ba  4831              LDR      r0,|L1.10112|
0026bc  f7fffffe          BL       uart_putchar
0026c0  210a              MOVS     r1,#0xa
0026c2  482f              LDR      r0,|L1.10112|
0026c4  f7fffffe          BL       uart_putchar
0026c8  210a              MOVS     r1,#0xa
0026ca  482d              LDR      r0,|L1.10112|
0026cc  f7fffffe          BL       uart_putchar
0026d0  210a              MOVS     r1,#0xa
0026d2  482b              LDR      r0,|L1.10112|
0026d4  f7fffffe          BL       uart_putchar
0026d8  210a              MOVS     r1,#0xa
0026da  4829              LDR      r0,|L1.10112|
0026dc  f7fffffe          BL       uart_putchar
0026e0  210a              MOVS     r1,#0xa
0026e2  4827              LDR      r0,|L1.10112|
0026e4  f7fffffe          BL       uart_putchar
0026e8  210a              MOVS     r1,#0xa
0026ea  4825              LDR      r0,|L1.10112|
0026ec  f7fffffe          BL       uart_putchar
0026f0  210a              MOVS     r1,#0xa
0026f2  4823              LDR      r0,|L1.10112|
0026f4  f7fffffe          BL       uart_putchar
0026f8  210a              MOVS     r1,#0xa
0026fa  4821              LDR      r0,|L1.10112|
0026fc  f7fffffe          BL       uart_putchar
002700  210a              MOVS     r1,#0xa
002702  481f              LDR      r0,|L1.10112|
002704  f7fffffe          BL       uart_putchar
002708  210a              MOVS     r1,#0xa
00270a  481d              LDR      r0,|L1.10112|
00270c  f7fffffe          BL       uart_putchar
002710  210a              MOVS     r1,#0xa
002712  481b              LDR      r0,|L1.10112|
002714  f7fffffe          BL       uart_putchar
002718  210a              MOVS     r1,#0xa
00271a  4819              LDR      r0,|L1.10112|
00271c  f7fffffe          BL       uart_putchar
002720  210a              MOVS     r1,#0xa
002722  4817              LDR      r0,|L1.10112|
002724  f7fffffe          BL       uart_putchar
002728  210a              MOVS     r1,#0xa
00272a  4815              LDR      r0,|L1.10112|
00272c  f7fffffe          BL       uart_putchar
002730  210a              MOVS     r1,#0xa
002732  4813              LDR      r0,|L1.10112|
002734  f7fffffe          BL       uart_putchar
002738  210a              MOVS     r1,#0xa
00273a  4811              LDR      r0,|L1.10112|
00273c  f7fffffe          BL       uart_putchar
002740  210a              MOVS     r1,#0xa
002742  480f              LDR      r0,|L1.10112|
002744  f7fffffe          BL       uart_putchar
002748  210a              MOVS     r1,#0xa
00274a  480d              LDR      r0,|L1.10112|
00274c  f7fffffe          BL       uart_putchar
002750  210a              MOVS     r1,#0xa
002752  480b              LDR      r0,|L1.10112|
002754  f7fffffe          BL       uart_putchar
002758  210a              MOVS     r1,#0xa
00275a  4809              LDR      r0,|L1.10112|
00275c  f7fffffe          BL       uart_putchar
002760  210a              MOVS     r1,#0xa
002762  4807              LDR      r0,|L1.10112|
002764  f7fffffe          BL       uart_putchar
002768  210a              MOVS     r1,#0xa
00276a  4805              LDR      r0,|L1.10112|
00276c  f7fffffe          BL       uart_putchar
002770  210a              MOVS     r1,#0xa
002772  4803              LDR      r0,|L1.10112|
002774  f7fffffe          BL       uart_putchar
002778  210a              MOVS     r1,#0xa
00277a  4801              LDR      r0,|L1.10112|
00277c  e030              B        |L1.10208|
00277e  0000              DCW      0x0000
                  |L1.10112|
                          DCD      0x4006b000
                  |L1.10116|
                          DCD      ||.text||+0x8fc
                  |L1.10120|
                          DCD      uart_string_gsm
                  |L1.10124|
                          DCD      tout
                  |L1.10128|
                          DCD      data
                  |L1.10132|
                          DCD      stcond1
                  |L1.10136|
                          DCD      con1d
                  |L1.10140|
                          DCD      cond
                  |L1.10144|
                          DCD      0x00001388
                  |L1.10148|
0027a4  0a00              DCB      "\n",0
0027a6  00                DCB      0
0027a7  00                DCB      0
                  |L1.10152|
                          DCD      len
                  |L1.10156|
                          DCD      ||k2||
                  |L1.10160|
                          DCD      k
                  |L1.10164|
                          DCD      ||.text||+0x474
                  |L1.10168|
                          DCD      stcond2
                  |L1.10172|
                          DCD      ||.text||+0xde4
                  |L1.10176|
                          DCD      stcond3
                  |L1.10180|
                          DCD      stcond4
                  |L1.10184|
                          DCD      flagch
                  |L1.10188|
                          DCD      temp
                  |L1.10192|
                          DCD      int_erval
                  |L1.10196|
                          DCD      at_
                  |L1.10200|
                          DCD      drive
                  |L1.10204|
0027dc  3e00              DCB      ">",0
0027de  00                DCB      0
0027df  00                DCB      0
                  |L1.10208|
0027e0  f7fffffe          BL       uart_putchar
0027e4  210a              MOVS     r1,#0xa
0027e6  48fe              LDR      r0,|L1.11232|
0027e8  f7fffffe          BL       uart_putchar
0027ec  210a              MOVS     r1,#0xa
0027ee  48fc              LDR      r0,|L1.11232|
0027f0  f7fffffe          BL       uart_putchar
0027f4  210a              MOVS     r1,#0xa
0027f6  48fa              LDR      r0,|L1.11232|
0027f8  f7fffffe          BL       uart_putchar
0027fc  210a              MOVS     r1,#0xa
0027fe  48f8              LDR      r0,|L1.11232|
002800  f7fffffe          BL       uart_putchar
002804  210a              MOVS     r1,#0xa
002806  48f6              LDR      r0,|L1.11232|
002808  f7fffffe          BL       uart_putchar
00280c  210a              MOVS     r1,#0xa
00280e  48f4              LDR      r0,|L1.11232|
002810  f7fffffe          BL       uart_putchar
002814  210a              MOVS     r1,#0xa
002816  48f2              LDR      r0,|L1.11232|
002818  f7fffffe          BL       uart_putchar
00281c  210a              MOVS     r1,#0xa
00281e  48f0              LDR      r0,|L1.11232|
002820  f7fffffe          BL       uart_putchar
002824  210a              MOVS     r1,#0xa
002826  48ee              LDR      r0,|L1.11232|
002828  f7fffffe          BL       uart_putchar
00282c  210a              MOVS     r1,#0xa
00282e  48ec              LDR      r0,|L1.11232|
002830  f7fffffe          BL       uart_putchar
002834  210a              MOVS     r1,#0xa
002836  48ea              LDR      r0,|L1.11232|
002838  f7fffffe          BL       uart_putchar
;;;874    									//memset(data,0,1000);
;;;875    														//timer counts to wait for characters in uart 1 									
;;;876    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00283c  bf00              NOP      
                  |L1.10302|
00283e  49e9              LDR      r1,|L1.11236|
002840  48e9              LDR      r0,|L1.11240|
002842  f7fffffe          BL       strstr
002846  2800              CMP      r0,#0
002848  d10a              BNE      |L1.10336|
00284a  49e6              LDR      r1,|L1.11236|
00284c  398c              SUBS     r1,r1,#0x8c
00284e  48e6              LDR      r0,|L1.11240|
002850  f7fffffe          BL       strstr
002854  2800              CMP      r0,#0
002856  d103              BNE      |L1.10336|
002858  48e4              LDR      r0,|L1.11244|
00285a  6800              LDR      r0,[r0,#0]  ; tout
00285c  2805              CMP      r0,#5
00285e  ddee              BLE      |L1.10302|
                  |L1.10336|
;;;877    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;878    									}
;;;879    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002860  f7fffffe          BL       clear
;;;880    									//clear();
;;;881    									memset(data,0,strlen(data));
002864  48e2              LDR      r0,|L1.11248|
002866  f7fffffe          BL       strlen
00286a  4604              MOV      r4,r0
00286c  4621              MOV      r1,r4
00286e  48e0              LDR      r0,|L1.11248|
002870  f7fffffe          BL       __aeabi_memclr
;;;882    									clear();
002874  f7fffffe          BL       clear
;;;883    
;;;884    								
;;;885    	
;;;886    	
;;;887    	
;;;888    	//	log_it();		
;;;889    		memset(data,0,strlen(data));	
002878  48dd              LDR      r0,|L1.11248|
00287a  f7fffffe          BL       strlen
00287e  4604              MOV      r4,r0
002880  4621              MOV      r1,r4
002882  48db              LDR      r0,|L1.11248|
002884  f7fffffe          BL       __aeabi_memclr
;;;890    									GPS_COLLECT();
002888  f7fffffe          BL       GPS_COLLECT
;;;891    									strcat(data,"CH\n");	
00288c  49d5              LDR      r1,|L1.11236|
00288e  3944              SUBS     r1,r1,#0x44
002890  48d7              LDR      r0,|L1.11248|
002892  f7fffffe          BL       strcat
;;;892    				
;;;893    					   	if(flagch!=1){
002896  48d7              LDR      r0,|L1.11252|
002898  6800              LDR      r0,[r0,#0]  ; flagch
00289a  2801              CMP      r0,#1
00289c  d009              BEQ      |L1.10418|
;;;894    							temp=int_erval;				
00289e  48d6              LDR      r0,|L1.11256|
0028a0  6800              LDR      r0,[r0,#0]  ; int_erval
0028a2  49d6              LDR      r1,|L1.11260|
0028a4  6008              STR      r0,[r1,#0]  ; temp
;;;895    							int_erval=4;
0028a6  2004              MOVS     r0,#4
0028a8  49d3              LDR      r1,|L1.11256|
0028aa  6008              STR      r0,[r1,#0]  ; int_erval
;;;896    							flagch=1;}
0028ac  2001              MOVS     r0,#1
0028ae  49d1              LDR      r1,|L1.11252|
0028b0  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.10418|
;;;897    							clear();	
0028b2  f7fffffe          BL       clear
;;;898    
;;;899    
;;;900    //**************************************tcp_initialization();********************************//
;;;901    
;;;902    	
;;;903    msg_sim800(); 
0028b6  f7fffffe          BL       msg_sim800
;;;904    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0028ba  2005              MOVS     r0,#5
0028bc  4bc9              LDR      r3,|L1.11236|
0028be  3b8c              SUBS     r3,r3,#0x8c
0028c0  461a              MOV      r2,r3
0028c2  3278              ADDS     r2,r2,#0x78
0028c4  a1ce              ADR      r1,|L1.11264|
0028c6  9000              STR      r0,[sp,#0]
0028c8  4610              MOV      r0,r2
0028ca  3020              ADDS     r0,r0,#0x20
0028cc  f7fffffe          BL       send_GSM
;;;905    delay(100);
0028d0  2064              MOVS     r0,#0x64
0028d2  f7fffffe          BL       delay
;;;906    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0028d6  2004              MOVS     r0,#4
0028d8  4bc2              LDR      r3,|L1.11236|
0028da  3b8c              SUBS     r3,r3,#0x8c
0028dc  461a              MOV      r2,r3
0028de  32a8              ADDS     r2,r2,#0xa8
0028e0  a1c7              ADR      r1,|L1.11264|
0028e2  9000              STR      r0,[sp,#0]
0028e4  4610              MOV      r0,r2
0028e6  3014              ADDS     r0,r0,#0x14
0028e8  f7fffffe          BL       send_GSM
;;;907    GPS_COLLECT2();
0028ec  f7fffffe          BL       GPS_COLLECT2
;;;908    strcat(data,"CH\n");		
0028f0  49bc              LDR      r1,|L1.11236|
0028f2  3944              SUBS     r1,r1,#0x44
0028f4  48be              LDR      r0,|L1.11248|
0028f6  f7fffffe          BL       strcat
;;;909    GPS_COLLECT2();
0028fa  f7fffffe          BL       GPS_COLLECT2
;;;910    strcat(data,"CH\n");	
0028fe  49b9              LDR      r1,|L1.11236|
002900  3944              SUBS     r1,r1,#0x44
002902  48bb              LDR      r0,|L1.11248|
002904  f7fffffe          BL       strcat
;;;911    GPS_COLLECT2();
002908  f7fffffe          BL       GPS_COLLECT2
;;;912    strcat(data,"CH\n");
00290c  49b5              LDR      r1,|L1.11236|
00290e  3944              SUBS     r1,r1,#0x44
002910  48b7              LDR      r0,|L1.11248|
002912  f7fffffe          BL       strcat
;;;913    cond201=(strstr(uart_string_gsm, "OK"));
002916  a1ba              ADR      r1,|L1.11264|
002918  48b3              LDR      r0,|L1.11240|
00291a  f7fffffe          BL       strstr
00291e  49b9              LDR      r1,|L1.11268|
002920  6008              STR      r0,[r1,#0]  ; cond201
;;;914    cond200=(strstr(uart_string_gsm, "ERROR"));
002922  49b0              LDR      r1,|L1.11236|
002924  398c              SUBS     r1,r1,#0x8c
002926  48b0              LDR      r0,|L1.11240|
002928  f7fffffe          BL       strstr
00292c  49b6              LDR      r1,|L1.11272|
00292e  6008              STR      r0,[r1,#0]  ; cond200
;;;915    if((!(cond201|| cond200 ))  && sleep_flag != 1)
002930  48b4              LDR      r0,|L1.11268|
002932  6800              LDR      r0,[r0,#0]  ; cond201
002934  2800              CMP      r0,#0
                  |L1.10550|
002936  d17d              BNE      |L1.10804|
002938  4608              MOV      r0,r1
00293a  6800              LDR      r0,[r0,#0]  ; cond200
00293c  2800              CMP      r0,#0
00293e  d1fa              BNE      |L1.10550|
002940  48b2              LDR      r0,|L1.11276|
002942  6800              LDR      r0,[r0,#0]  ; sleep_flag
002944  2801              CMP      r0,#1
002946  d075              BEQ      |L1.10804|
;;;916    {
;;;917    delay(100);
002948  2064              MOVS     r0,#0x64
00294a  f7fffffe          BL       delay
;;;918    clear();//memset(uart_string_gsm,0,5000);
00294e  f7fffffe          BL       clear
;;;919    memset(at_,0,100);
002952  2164              MOVS     r1,#0x64
002954  48ae              LDR      r0,|L1.11280|
002956  f7fffffe          BL       __aeabi_memclr
;;;920    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00295a  48a5              LDR      r0,|L1.11248|
00295c  f7fffffe          BL       strlen
002960  1c44              ADDS     r4,r0,#1
002962  4623              MOV      r3,r4
002964  4aab              LDR      r2,|L1.11284|
002966  499f              LDR      r1,|L1.11236|
002968  3938              SUBS     r1,r1,#0x38
00296a  48a9              LDR      r0,|L1.11280|
00296c  f7fffffe          BL       __2sprintf
;;;921    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002970  2005              MOVS     r0,#5
002972  4b9c              LDR      r3,|L1.11236|
002974  3b8c              SUBS     r3,r3,#0x8c
002976  461a              MOV      r2,r3
002978  3278              ADDS     r2,r2,#0x78
00297a  a1a7              ADR      r1,|L1.11288|
00297c  9000              STR      r0,[sp,#0]
00297e  48a4              LDR      r0,|L1.11280|
002980  f7fffffe          BL       send_SD
;;;922    clear();	
002984  f7fffffe          BL       clear
;;;923    k2=0;									//string array counter for uart 1
002988  2000              MOVS     r0,#0
00298a  49a4              LDR      r1,|L1.11292|
00298c  6008              STR      r0,[r1,#0]  ; k2
;;;924    tout=0;	
00298e  4997              LDR      r1,|L1.11244|
002990  6008              STR      r0,[r1,#0]  ; tout
;;;925    for(k=0;k<strlen(data);k++)
002992  49a3              LDR      r1,|L1.11296|
002994  6008              STR      r0,[r1,#0]  ; k
002996  e00b              B        |L1.10672|
                  |L1.10648|
;;;926    {
;;;927    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002998  4895              LDR      r0,|L1.11248|
00299a  4aa1              LDR      r2,|L1.11296|
00299c  6812              LDR      r2,[r2,#0]  ; k
00299e  5c81              LDRB     r1,[r0,r2]
0029a0  488f              LDR      r0,|L1.11232|
0029a2  f7fffffe          BL       uart_putchar
0029a6  489e              LDR      r0,|L1.11296|
0029a8  6800              LDR      r0,[r0,#0]            ;925  ; k
0029aa  1c40              ADDS     r0,r0,#1              ;925
0029ac  499c              LDR      r1,|L1.11296|
0029ae  6008              STR      r0,[r1,#0]            ;925  ; k
                  |L1.10672|
0029b0  488f              LDR      r0,|L1.11248|
0029b2  f7fffffe          BL       strlen
0029b6  499a              LDR      r1,|L1.11296|
0029b8  6809              LDR      r1,[r1,#0]            ;925  ; k
0029ba  4288              CMP      r0,r1                 ;925
0029bc  d8ec              BHI      |L1.10648|
;;;928    }	
;;;929    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0029be  210a              MOVS     r1,#0xa
0029c0  4887              LDR      r0,|L1.11232|
0029c2  f7fffffe          BL       uart_putchar
0029c6  210a              MOVS     r1,#0xa
0029c8  4885              LDR      r0,|L1.11232|
0029ca  f7fffffe          BL       uart_putchar
0029ce  210a              MOVS     r1,#0xa
0029d0  4883              LDR      r0,|L1.11232|
0029d2  f7fffffe          BL       uart_putchar
0029d6  210a              MOVS     r1,#0xa
0029d8  4881              LDR      r0,|L1.11232|
0029da  f7fffffe          BL       uart_putchar
0029de  210a              MOVS     r1,#0xa
0029e0  487f              LDR      r0,|L1.11232|
0029e2  f7fffffe          BL       uart_putchar
0029e6  210a              MOVS     r1,#0xa
0029e8  487d              LDR      r0,|L1.11232|
0029ea  f7fffffe          BL       uart_putchar
0029ee  210a              MOVS     r1,#0xa
0029f0  487b              LDR      r0,|L1.11232|
0029f2  f7fffffe          BL       uart_putchar
0029f6  210a              MOVS     r1,#0xa
0029f8  4879              LDR      r0,|L1.11232|
0029fa  f7fffffe          BL       uart_putchar
0029fe  210a              MOVS     r1,#0xa
002a00  4877              LDR      r0,|L1.11232|
002a02  f7fffffe          BL       uart_putchar
002a06  210a              MOVS     r1,#0xa
002a08  4875              LDR      r0,|L1.11232|
002a0a  f7fffffe          BL       uart_putchar
002a0e  210a              MOVS     r1,#0xa
002a10  4873              LDR      r0,|L1.11232|
002a12  f7fffffe          BL       uart_putchar
002a16  210a              MOVS     r1,#0xa
002a18  4871              LDR      r0,|L1.11232|
002a1a  f7fffffe          BL       uart_putchar
002a1e  210a              MOVS     r1,#0xa
002a20  486f              LDR      r0,|L1.11232|
002a22  f7fffffe          BL       uart_putchar
002a26  210a              MOVS     r1,#0xa
002a28  486d              LDR      r0,|L1.11232|
002a2a  f7fffffe          BL       uart_putchar
002a2e  210a              MOVS     r1,#0xa
002a30  486b              LDR      r0,|L1.11232|
002a32  e000              B        |L1.10806|
                  |L1.10804|
002a34  e0d3              B        |L1.11230|
                  |L1.10806|
002a36  f7fffffe          BL       uart_putchar
002a3a  210a              MOVS     r1,#0xa
002a3c  4868              LDR      r0,|L1.11232|
002a3e  f7fffffe          BL       uart_putchar
002a42  210a              MOVS     r1,#0xa
002a44  4866              LDR      r0,|L1.11232|
002a46  f7fffffe          BL       uart_putchar
002a4a  210a              MOVS     r1,#0xa
002a4c  4864              LDR      r0,|L1.11232|
002a4e  f7fffffe          BL       uart_putchar
002a52  210a              MOVS     r1,#0xa
002a54  4862              LDR      r0,|L1.11232|
002a56  f7fffffe          BL       uart_putchar
002a5a  210a              MOVS     r1,#0xa
002a5c  4860              LDR      r0,|L1.11232|
002a5e  f7fffffe          BL       uart_putchar
002a62  210a              MOVS     r1,#0xa
002a64  485e              LDR      r0,|L1.11232|
002a66  f7fffffe          BL       uart_putchar
002a6a  210a              MOVS     r1,#0xa
002a6c  485c              LDR      r0,|L1.11232|
002a6e  f7fffffe          BL       uart_putchar
002a72  210a              MOVS     r1,#0xa
002a74  485a              LDR      r0,|L1.11232|
002a76  f7fffffe          BL       uart_putchar
002a7a  210a              MOVS     r1,#0xa
002a7c  4858              LDR      r0,|L1.11232|
002a7e  f7fffffe          BL       uart_putchar
002a82  210a              MOVS     r1,#0xa
002a84  4856              LDR      r0,|L1.11232|
002a86  f7fffffe          BL       uart_putchar
002a8a  210a              MOVS     r1,#0xa
002a8c  4854              LDR      r0,|L1.11232|
002a8e  f7fffffe          BL       uart_putchar
002a92  210a              MOVS     r1,#0xa
002a94  4852              LDR      r0,|L1.11232|
002a96  f7fffffe          BL       uart_putchar
002a9a  210a              MOVS     r1,#0xa
002a9c  4850              LDR      r0,|L1.11232|
002a9e  f7fffffe          BL       uart_putchar
002aa2  210a              MOVS     r1,#0xa
002aa4  484e              LDR      r0,|L1.11232|
002aa6  f7fffffe          BL       uart_putchar
002aaa  210a              MOVS     r1,#0xa
002aac  484c              LDR      r0,|L1.11232|
002aae  f7fffffe          BL       uart_putchar
002ab2  210a              MOVS     r1,#0xa
002ab4  484a              LDR      r0,|L1.11232|
002ab6  f7fffffe          BL       uart_putchar
002aba  210a              MOVS     r1,#0xa
002abc  4848              LDR      r0,|L1.11232|
002abe  f7fffffe          BL       uart_putchar
002ac2  210a              MOVS     r1,#0xa
002ac4  4846              LDR      r0,|L1.11232|
002ac6  f7fffffe          BL       uart_putchar
002aca  210a              MOVS     r1,#0xa
002acc  4844              LDR      r0,|L1.11232|
002ace  f7fffffe          BL       uart_putchar
002ad2  210a              MOVS     r1,#0xa
002ad4  4842              LDR      r0,|L1.11232|
002ad6  f7fffffe          BL       uart_putchar
002ada  210a              MOVS     r1,#0xa
002adc  4840              LDR      r0,|L1.11232|
002ade  f7fffffe          BL       uart_putchar
002ae2  210a              MOVS     r1,#0xa
002ae4  483e              LDR      r0,|L1.11232|
002ae6  f7fffffe          BL       uart_putchar
002aea  210a              MOVS     r1,#0xa
002aec  483c              LDR      r0,|L1.11232|
002aee  f7fffffe          BL       uart_putchar
002af2  210a              MOVS     r1,#0xa
002af4  483a              LDR      r0,|L1.11232|
002af6  f7fffffe          BL       uart_putchar
002afa  210a              MOVS     r1,#0xa
002afc  4838              LDR      r0,|L1.11232|
002afe  f7fffffe          BL       uart_putchar
002b02  210a              MOVS     r1,#0xa
002b04  4836              LDR      r0,|L1.11232|
002b06  f7fffffe          BL       uart_putchar
002b0a  210a              MOVS     r1,#0xa
002b0c  4834              LDR      r0,|L1.11232|
002b0e  f7fffffe          BL       uart_putchar
002b12  210a              MOVS     r1,#0xa
002b14  4832              LDR      r0,|L1.11232|
002b16  f7fffffe          BL       uart_putchar
002b1a  210a              MOVS     r1,#0xa
002b1c  4830              LDR      r0,|L1.11232|
002b1e  f7fffffe          BL       uart_putchar
002b22  210a              MOVS     r1,#0xa
002b24  482e              LDR      r0,|L1.11232|
002b26  f7fffffe          BL       uart_putchar
002b2a  210a              MOVS     r1,#0xa
002b2c  482c              LDR      r0,|L1.11232|
002b2e  f7fffffe          BL       uart_putchar
002b32  210a              MOVS     r1,#0xa
002b34  482a              LDR      r0,|L1.11232|
002b36  f7fffffe          BL       uart_putchar
002b3a  210a              MOVS     r1,#0xa
002b3c  4828              LDR      r0,|L1.11232|
002b3e  f7fffffe          BL       uart_putchar
002b42  210a              MOVS     r1,#0xa
002b44  4826              LDR      r0,|L1.11232|
002b46  f7fffffe          BL       uart_putchar
002b4a  210a              MOVS     r1,#0xa
002b4c  4824              LDR      r0,|L1.11232|
002b4e  f7fffffe          BL       uart_putchar
002b52  210a              MOVS     r1,#0xa
002b54  4822              LDR      r0,|L1.11232|
002b56  f7fffffe          BL       uart_putchar
002b5a  210a              MOVS     r1,#0xa
002b5c  4820              LDR      r0,|L1.11232|
002b5e  f7fffffe          BL       uart_putchar
002b62  210a              MOVS     r1,#0xa
002b64  481e              LDR      r0,|L1.11232|
002b66  f7fffffe          BL       uart_putchar
002b6a  210a              MOVS     r1,#0xa
002b6c  481c              LDR      r0,|L1.11232|
002b6e  f7fffffe          BL       uart_putchar
002b72  210a              MOVS     r1,#0xa
002b74  481a              LDR      r0,|L1.11232|
002b76  f7fffffe          BL       uart_putchar
002b7a  210a              MOVS     r1,#0xa
002b7c  4818              LDR      r0,|L1.11232|
002b7e  f7fffffe          BL       uart_putchar
002b82  210a              MOVS     r1,#0xa
002b84  4816              LDR      r0,|L1.11232|
002b86  f7fffffe          BL       uart_putchar
;;;930    									//memset(data,0,1000);
;;;931    														//timer counts to wait for characters in uart 1 									
;;;932    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002b8a  bf00              NOP      
                  |L1.11148|
002b8c  4915              LDR      r1,|L1.11236|
002b8e  4816              LDR      r0,|L1.11240|
002b90  f7fffffe          BL       strstr
002b94  2800              CMP      r0,#0
002b96  d10a              BNE      |L1.11182|
002b98  4912              LDR      r1,|L1.11236|
002b9a  398c              SUBS     r1,r1,#0x8c
002b9c  4812              LDR      r0,|L1.11240|
002b9e  f7fffffe          BL       strstr
002ba2  2800              CMP      r0,#0
002ba4  d103              BNE      |L1.11182|
002ba6  4811              LDR      r0,|L1.11244|
002ba8  6800              LDR      r0,[r0,#0]  ; tout
002baa  2805              CMP      r0,#5
002bac  ddee              BLE      |L1.11148|
                  |L1.11182|
;;;933    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;934    									}
;;;935    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002bae  f7fffffe          BL       clear
;;;936    									//clear();
;;;937    									memset(data,0,strlen(data));
002bb2  480f              LDR      r0,|L1.11248|
002bb4  f7fffffe          BL       strlen
002bb8  4604              MOV      r4,r0
002bba  4621              MOV      r1,r4
002bbc  480c              LDR      r0,|L1.11248|
002bbe  f7fffffe          BL       __aeabi_memclr
;;;938    									clear();
002bc2  f7fffffe          BL       clear
;;;939    									RESET_OFF;delay(100);
002bc6  2020              MOVS     r0,#0x20
002bc8  4916              LDR      r1,|L1.11300|
002bca  6088              STR      r0,[r1,#8]
002bcc  2064              MOVS     r0,#0x64
002bce  f7fffffe          BL       delay
;;;940    									RESET_ON;delay(100);		
002bd2  2020              MOVS     r0,#0x20
002bd4  4913              LDR      r1,|L1.11300|
002bd6  6048              STR      r0,[r1,#4]
002bd8  2064              MOVS     r0,#0x64
002bda  f7fffffe          BL       delay
                  |L1.11230|
;;;941    }
;;;942    	
;;;943    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
002bde  e023              B        |L1.11304|
                  |L1.11232|
                          DCD      0x4006b000
                  |L1.11236|
                          DCD      ||.text||+0x8fc
                  |L1.11240|
                          DCD      uart_string_gsm
                  |L1.11244|
                          DCD      tout
                  |L1.11248|
                          DCD      data
                  |L1.11252|
                          DCD      flagch
                  |L1.11256|
                          DCD      int_erval
                  |L1.11260|
                          DCD      temp
                  |L1.11264|
002c00  4f4b00            DCB      "OK",0
002c03  00                DCB      0
                  |L1.11268|
                          DCD      cond201
                  |L1.11272|
                          DCD      cond200
                  |L1.11276|
                          DCD      sleep_flag
                  |L1.11280|
                          DCD      at_
                  |L1.11284|
                          DCD      drive
                  |L1.11288|
002c18  3e00              DCB      ">",0
002c1a  00                DCB      0
002c1b  00                DCB      0
                  |L1.11292|
                          DCD      ||k2||
                  |L1.11296|
                          DCD      k
                  |L1.11300|
                          DCD      0x400ff080
                  |L1.11304|
002c28  2004              MOVS     r0,#4
002c2a  4bfd              LDR      r3,|L1.12320|
002c2c  4afd              LDR      r2,|L1.12324|
002c2e  a1fe              ADR      r1,|L1.12328|
002c30  9000              STR      r0,[sp,#0]
002c32  4618              MOV      r0,r3
002c34  300c              ADDS     r0,r0,#0xc
002c36  f7fffffe          BL       send_GSM
;;;944    GPS_COLLECT2();
002c3a  f7fffffe          BL       GPS_COLLECT2
;;;945    strcat(data,"CH\n");	
002c3e  49f9              LDR      r1,|L1.12324|
002c40  3930              SUBS     r1,r1,#0x30
002c42  48fa              LDR      r0,|L1.12332|
002c44  f7fffffe          BL       strcat
;;;946    memset(at_,0,100);
002c48  2164              MOVS     r1,#0x64
002c4a  48f9              LDR      r0,|L1.12336|
002c4c  f7fffffe          BL       __aeabi_memclr
;;;947    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
002c50  4af8              LDR      r2,|L1.12340|
002c52  49f3              LDR      r1,|L1.12320|
002c54  3120              ADDS     r1,r1,#0x20
002c56  48f6              LDR      r0,|L1.12336|
002c58  f7fffffe          BL       __2sprintf
;;;948    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
002c5c  48f6              LDR      r0,|L1.12344|
002c5e  6800              LDR      r0,[r0,#0]  ; tmeout
002c60  4bef              LDR      r3,|L1.12320|
002c62  4af0              LDR      r2,|L1.12324|
002c64  a1f0              ADR      r1,|L1.12328|
002c66  9000              STR      r0,[sp,#0]
002c68  48f1              LDR      r0,|L1.12336|
002c6a  f7fffffe          BL       send_GSM
;;;949    msg_sim800(); 
002c6e  f7fffffe          BL       msg_sim800
;;;950    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
002c72  2004              MOVS     r0,#4
002c74  4beb              LDR      r3,|L1.12324|
002c76  3b5c              SUBS     r3,r3,#0x5c
002c78  4aea              LDR      r2,|L1.12324|
002c7a  a1eb              ADR      r1,|L1.12328|
002c7c  9000              STR      r0,[sp,#0]
002c7e  48e8              LDR      r0,|L1.12320|
002c80  3038              ADDS     r0,r0,#0x38
002c82  f7fffffe          BL       send_GSM
;;;951    GPS_COLLECT2();
002c86  f7fffffe          BL       GPS_COLLECT2
;;;952    strcat(data,"CH\n");	
002c8a  49e6              LDR      r1,|L1.12324|
002c8c  3930              SUBS     r1,r1,#0x30
002c8e  48e7              LDR      r0,|L1.12332|
002c90  f7fffffe          BL       strcat
;;;953    GPS_COLLECT2();
002c94  f7fffffe          BL       GPS_COLLECT2
;;;954    strcat(data,"CH\n");	
002c98  49e2              LDR      r1,|L1.12324|
002c9a  3930              SUBS     r1,r1,#0x30
002c9c  48e3              LDR      r0,|L1.12332|
002c9e  f7fffffe          BL       strcat
;;;955    
;;;956    
;;;957    msg_sim800(); 
002ca2  f7fffffe          BL       msg_sim800
;;;958    GPS_COLLECT2();
002ca6  f7fffffe          BL       GPS_COLLECT2
;;;959    strcat(data,"CH\n");	
002caa  49de              LDR      r1,|L1.12324|
002cac  3930              SUBS     r1,r1,#0x30
002cae  48df              LDR      r0,|L1.12332|
002cb0  f7fffffe          BL       strcat
;;;960    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
002cb4  f7fffffe          BL       clear
002cb8  48d9              LDR      r0,|L1.12320|
002cba  3048              ADDS     r0,r0,#0x48
002cbc  f7fffffe          BL       send_modem
002cc0  f7fffffe          BL       clear
;;;961    					delay(20);
002cc4  2014              MOVS     r0,#0x14
002cc6  f7fffffe          BL       delay
;;;962    
;;;963    
;;;964    msg_sim800(); 
002cca  f7fffffe          BL       msg_sim800
;;;965    
;;;966    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
002cce  4bdb              LDR      r3,|L1.12348|
002cd0  4adb              LDR      r2,|L1.12352|
002cd2  49d3              LDR      r1,|L1.12320|
002cd4  3160              ADDS     r1,r1,#0x60
002cd6  48d6              LDR      r0,|L1.12336|
002cd8  f7fffffe          BL       __2sprintf
;;;967    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
002cdc  48d6              LDR      r0,|L1.12344|
002cde  6800              LDR      r0,[r0,#0]  ; tmeout
002ce0  4bcf              LDR      r3,|L1.12320|
002ce2  4ad0              LDR      r2,|L1.12324|
002ce4  3a78              SUBS     r2,r2,#0x78
002ce6  4619              MOV      r1,r3
002ce8  3180              ADDS     r1,r1,#0x80
002cea  9000              STR      r0,[sp,#0]
002cec  48d0              LDR      r0,|L1.12336|
002cee  f7fffffe          BL       send_GSM
;;;968    						clear();
002cf2  f7fffffe          BL       clear
;;;969    						
;;;970    						
;;;971    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
002cf6  48d0              LDR      r0,|L1.12344|
002cf8  6800              LDR      r0,[r0,#0]  ; tmeout
002cfa  4bc9              LDR      r3,|L1.12320|
002cfc  3388              ADDS     r3,r3,#0x88
002cfe  4ac9              LDR      r2,|L1.12324|
002d00  3a78              SUBS     r2,r2,#0x78
002d02  a1d0              ADR      r1,|L1.12356|
002d04  9000              STR      r0,[sp,#0]
002d06  4618              MOV      r0,r3
002d08  3010              ADDS     r0,r0,#0x10
002d0a  f7fffffe          BL       send_GSM
;;;972    //**************************************tcp_initialization ends******************************//							
;;;973    									
;;;974    						clear();		
002d0e  f7fffffe          BL       clear
;;;975    						cond=mystrstr(uart_string_gsm,'>');
002d12  213e              MOVS     r1,#0x3e
002d14  48cc              LDR      r0,|L1.12360|
002d16  f7fffffe          BL       mystrstr
002d1a  49cc              LDR      r1,|L1.12364|
002d1c  7008              STRB     r0,[r1,#0]
;;;976    								if(cond)	
002d1e  4608              MOV      r0,r1
002d20  7800              LDRB     r0,[r0,#0]  ; cond
002d22  2800              CMP      r0,#0
002d24  d07e              BEQ      |L1.11812|
;;;977    								{	
;;;978    
;;;979    									clear();
002d26  f7fffffe          BL       clear
;;;980    									memset(uart_string_gsm,0,5000);
002d2a  49c9              LDR      r1,|L1.12368|
002d2c  48c6              LDR      r0,|L1.12360|
002d2e  f7fffffe          BL       __aeabi_memclr
;;;981    									strcat(data,"\n");
002d32  a1c8              ADR      r1,|L1.12372|
002d34  48bd              LDR      r0,|L1.12332|
002d36  f7fffffe          BL       strcat
;;;982    									len=strlen(data);
002d3a  48bc              LDR      r0,|L1.12332|
002d3c  f7fffffe          BL       strlen
002d40  49c5              LDR      r1,|L1.12376|
002d42  6008              STR      r0,[r1,#0]  ; len
;;;983    									tout=0;
002d44  2000              MOVS     r0,#0
002d46  49c5              LDR      r1,|L1.12380|
002d48  6008              STR      r0,[r1,#0]  ; tout
;;;984    									k2=0;
002d4a  49c5              LDR      r1,|L1.12384|
002d4c  6008              STR      r0,[r1,#0]  ; k2
;;;985    									for(k=0;k<len;k++)
002d4e  49c5              LDR      r1,|L1.12388|
002d50  6008              STR      r0,[r1,#0]  ; k
002d52  e00b              B        |L1.11628|
                  |L1.11604|
;;;986    									{
;;;987    										uart_putchar(UART1_BASE_PTR, data[k]);
002d54  48b5              LDR      r0,|L1.12332|
002d56  4ac3              LDR      r2,|L1.12388|
002d58  6812              LDR      r2,[r2,#0]  ; k
002d5a  5c81              LDRB     r1,[r0,r2]
002d5c  48c2              LDR      r0,|L1.12392|
002d5e  f7fffffe          BL       uart_putchar
002d62  48c0              LDR      r0,|L1.12388|
002d64  6800              LDR      r0,[r0,#0]            ;985  ; k
002d66  1c40              ADDS     r0,r0,#1              ;985
002d68  49be              LDR      r1,|L1.12388|
002d6a  6008              STR      r0,[r1,#0]            ;985  ; k
                  |L1.11628|
002d6c  48bd              LDR      r0,|L1.12388|
002d6e  6800              LDR      r0,[r0,#0]            ;985  ; k
002d70  49b9              LDR      r1,|L1.12376|
002d72  6809              LDR      r1,[r1,#0]            ;985  ; len
002d74  4288              CMP      r0,r1                 ;985
002d76  dbed              BLT      |L1.11604|
;;;988    									}uart_putchar(UART1_BASE_PTR, 0x1A);
002d78  211a              MOVS     r1,#0x1a
002d7a  48bb              LDR      r0,|L1.12392|
002d7c  f7fffffe          BL       uart_putchar
;;;989    									do
002d80  bf00              NOP      
                  |L1.11650|
;;;990    																{stcond1=strstr(uart_string_gsm,"SEND OK");
002d82  49ba              LDR      r1,|L1.12396|
002d84  48b0              LDR      r0,|L1.12360|
002d86  f7fffffe          BL       strstr
002d8a  49b9              LDR      r1,|L1.12400|
002d8c  6008              STR      r0,[r1,#0]  ; stcond1
;;;991    																	stcond2=strstr(uart_string_gsm, "ERROR");
002d8e  49a5              LDR      r1,|L1.12324|
002d90  3978              SUBS     r1,r1,#0x78
002d92  48ad              LDR      r0,|L1.12360|
002d94  f7fffffe          BL       strstr
002d98  49b6              LDR      r1,|L1.12404|
002d9a  6008              STR      r0,[r1,#0]  ; stcond2
;;;992    																		stcond3=strstr(uart_string_gsm, "FAIL");	
002d9c  49a0              LDR      r1,|L1.12320|
002d9e  3190              ADDS     r1,r1,#0x90
002da0  48a9              LDR      r0,|L1.12360|
002da2  f7fffffe          BL       strstr
002da6  49b4              LDR      r1,|L1.12408|
002da8  6008              STR      r0,[r1,#0]  ; stcond3
;;;993    																			stcond4=strstr(uart_string_gsm, "DEACT");	
002daa  499e              LDR      r1,|L1.12324|
002dac  395c              SUBS     r1,r1,#0x5c
002dae  48a6              LDR      r0,|L1.12360|
002db0  f7fffffe          BL       strstr
002db4  49b1              LDR      r1,|L1.12412|
002db6  6008              STR      r0,[r1,#0]  ; stcond4
;;;994    																	
;;;995    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
002db8  48ae              LDR      r0,|L1.12404|
002dba  6800              LDR      r0,[r0,#0]  ; stcond2
002dbc  2800              CMP      r0,#0
002dbe  d10f              BNE      |L1.11744|
002dc0  48ad              LDR      r0,|L1.12408|
002dc2  6800              LDR      r0,[r0,#0]  ; stcond3
002dc4  2800              CMP      r0,#0
002dc6  d10b              BNE      |L1.11744|
002dc8  4608              MOV      r0,r1
002dca  6800              LDR      r0,[r0,#0]  ; stcond4
002dcc  2800              CMP      r0,#0
002dce  d107              BNE      |L1.11744|
002dd0  48a7              LDR      r0,|L1.12400|
002dd2  6800              LDR      r0,[r0,#0]  ; stcond1
002dd4  2800              CMP      r0,#0
002dd6  d103              BNE      |L1.11744|
002dd8  48a0              LDR      r0,|L1.12380|
002dda  6800              LDR      r0,[r0,#0]  ; tout
002ddc  2804              CMP      r0,#4
002dde  ddd0              BLE      |L1.11650|
                  |L1.11744|
;;;996    																delay(10);clear();
002de0  200a              MOVS     r0,#0xa
002de2  f7fffffe          BL       delay
002de6  f7fffffe          BL       clear
;;;997    														uart_putchar(UART1_BASE_PTR,0x1A);
002dea  211a              MOVS     r1,#0x1a
002dec  489e              LDR      r0,|L1.12392|
002dee  f7fffffe          BL       uart_putchar
;;;998    												delay(10);
002df2  200a              MOVS     r0,#0xa
002df4  f7fffffe          BL       delay
;;;999    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002df8  211a              MOVS     r1,#0x1a
002dfa  489b              LDR      r0,|L1.12392|
002dfc  f7fffffe          BL       uart_putchar
002e00  211a              MOVS     r1,#0x1a
002e02  4899              LDR      r0,|L1.12392|
002e04  f7fffffe          BL       uart_putchar
002e08  211a              MOVS     r1,#0x1a
002e0a  4897              LDR      r0,|L1.12392|
002e0c  f7fffffe          BL       uart_putchar
;;;1000   						
;;;1001   
;;;1002   
;;;1003   									
;;;1004   															
;;;1005   															
;;;1006   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e10  211a              MOVS     r1,#0x1a
002e12  4895              LDR      r0,|L1.12392|
002e14  f7fffffe          BL       uart_putchar
002e18  f7fffffe          BL       clear
002e1c  200a              MOVS     r0,#0xa
002e1e  f7fffffe          BL       delay
;;;1007   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e22  e000              B        |L1.11814|
                  |L1.11812|
002e24  e195              B        |L1.12626|
                  |L1.11814|
002e26  211a              MOVS     r1,#0x1a
002e28  488f              LDR      r0,|L1.12392|
002e2a  f7fffffe          BL       uart_putchar
002e2e  f7fffffe          BL       clear
002e32  200a              MOVS     r0,#0xa
002e34  f7fffffe          BL       delay
;;;1008   															
;;;1009   														//qwe=strlen(uart_string_gsm);
;;;1010   														uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e38  211a              MOVS     r1,#0x1a
002e3a  488b              LDR      r0,|L1.12392|
002e3c  f7fffffe          BL       uart_putchar
002e40  f7fffffe          BL       clear
002e44  200a              MOVS     r0,#0xa
002e46  f7fffffe          BL       delay
;;;1011   								delay(50);
002e4a  2032              MOVS     r0,#0x32
002e4c  f7fffffe          BL       delay
;;;1012   								con1d=strstr(uart_string_gsm,"SEND OK");
002e50  4986              LDR      r1,|L1.12396|
002e52  487d              LDR      r0,|L1.12360|
002e54  f7fffffe          BL       strstr
002e58  4989              LDR      r1,|L1.12416|
002e5a  6008              STR      r0,[r1,#0]  ; con1d
;;;1013   								if(!con1d)
002e5c  4608              MOV      r0,r1
002e5e  6800              LDR      r0,[r0,#0]  ; con1d
002e60  2800              CMP      r0,#0
002e62  d17c              BNE      |L1.12126|
;;;1014   								{
;;;1015   									
;;;1016   									
;;;1017   	delay(100);
002e64  2064              MOVS     r0,#0x64
002e66  f7fffffe          BL       delay
;;;1018   		clear();//memset(uart_string_gsm,0,5000);
002e6a  f7fffffe          BL       clear
;;;1019   	
;;;1020   	memset(at_,0,100);
002e6e  2164              MOVS     r1,#0x64
002e70  486f              LDR      r0,|L1.12336|
002e72  f7fffffe          BL       __aeabi_memclr
;;;1021   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002e76  486d              LDR      r0,|L1.12332|
002e78  f7fffffe          BL       strlen
002e7c  1c44              ADDS     r4,r0,#1
002e7e  4623              MOV      r3,r4
002e80  4a80              LDR      r2,|L1.12420|
002e82  4968              LDR      r1,|L1.12324|
002e84  3924              SUBS     r1,r1,#0x24
002e86  486a              LDR      r0,|L1.12336|
002e88  f7fffffe          BL       __2sprintf
;;;1022   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002e8c  2005              MOVS     r0,#5
002e8e  4b65              LDR      r3,|L1.12324|
002e90  3b78              SUBS     r3,r3,#0x78
002e92  4a64              LDR      r2,|L1.12324|
002e94  a16b              ADR      r1,|L1.12356|
002e96  9000              STR      r0,[sp,#0]
002e98  4865              LDR      r0,|L1.12336|
002e9a  f7fffffe          BL       send_SD
;;;1023   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1024   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1025   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1026   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1027   //	}
;;;1028   	
;;;1029   clear();	
002e9e  f7fffffe          BL       clear
;;;1030   									k2=0;									//string array counter for uart 1
002ea2  2000              MOVS     r0,#0
002ea4  496e              LDR      r1,|L1.12384|
002ea6  6008              STR      r0,[r1,#0]  ; k2
;;;1031   									tout=0;	
002ea8  496c              LDR      r1,|L1.12380|
002eaa  6008              STR      r0,[r1,#0]  ; tout
;;;1032   		for(k=0;k<strlen(data);k++)
002eac  496d              LDR      r1,|L1.12388|
002eae  6008              STR      r0,[r1,#0]  ; k
002eb0  e00b              B        |L1.11978|
                  |L1.11954|
;;;1033   		{
;;;1034   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002eb2  485e              LDR      r0,|L1.12332|
002eb4  4a6b              LDR      r2,|L1.12388|
002eb6  6812              LDR      r2,[r2,#0]  ; k
002eb8  5c81              LDRB     r1,[r0,r2]
002eba  486b              LDR      r0,|L1.12392|
002ebc  f7fffffe          BL       uart_putchar
002ec0  4868              LDR      r0,|L1.12388|
002ec2  6800              LDR      r0,[r0,#0]            ;1032  ; k
002ec4  1c40              ADDS     r0,r0,#1              ;1032
002ec6  4967              LDR      r1,|L1.12388|
002ec8  6008              STR      r0,[r1,#0]            ;1032  ; k
                  |L1.11978|
002eca  4858              LDR      r0,|L1.12332|
002ecc  f7fffffe          BL       strlen
002ed0  4964              LDR      r1,|L1.12388|
002ed2  6809              LDR      r1,[r1,#0]            ;1032  ; k
002ed4  4288              CMP      r0,r1                 ;1032
002ed6  d8ec              BHI      |L1.11954|
;;;1035   		}	
;;;1036   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002ed8  210a              MOVS     r1,#0xa
002eda  4863              LDR      r0,|L1.12392|
002edc  f7fffffe          BL       uart_putchar
002ee0  210a              MOVS     r1,#0xa
002ee2  4861              LDR      r0,|L1.12392|
002ee4  f7fffffe          BL       uart_putchar
002ee8  210a              MOVS     r1,#0xa
002eea  485f              LDR      r0,|L1.12392|
002eec  f7fffffe          BL       uart_putchar
002ef0  210a              MOVS     r1,#0xa
002ef2  485d              LDR      r0,|L1.12392|
002ef4  f7fffffe          BL       uart_putchar
002ef8  210a              MOVS     r1,#0xa
002efa  485b              LDR      r0,|L1.12392|
002efc  f7fffffe          BL       uart_putchar
002f00  210a              MOVS     r1,#0xa
002f02  4859              LDR      r0,|L1.12392|
002f04  f7fffffe          BL       uart_putchar
002f08  210a              MOVS     r1,#0xa
002f0a  4857              LDR      r0,|L1.12392|
002f0c  f7fffffe          BL       uart_putchar
002f10  210a              MOVS     r1,#0xa
002f12  4855              LDR      r0,|L1.12392|
002f14  f7fffffe          BL       uart_putchar
002f18  210a              MOVS     r1,#0xa
002f1a  4853              LDR      r0,|L1.12392|
002f1c  f7fffffe          BL       uart_putchar
002f20  210a              MOVS     r1,#0xa
002f22  4851              LDR      r0,|L1.12392|
002f24  f7fffffe          BL       uart_putchar
002f28  210a              MOVS     r1,#0xa
002f2a  484f              LDR      r0,|L1.12392|
002f2c  f7fffffe          BL       uart_putchar
002f30  210a              MOVS     r1,#0xa
002f32  484d              LDR      r0,|L1.12392|
002f34  f7fffffe          BL       uart_putchar
002f38  210a              MOVS     r1,#0xa
002f3a  484b              LDR      r0,|L1.12392|
002f3c  f7fffffe          BL       uart_putchar
002f40  210a              MOVS     r1,#0xa
002f42  4849              LDR      r0,|L1.12392|
002f44  f7fffffe          BL       uart_putchar
002f48  210a              MOVS     r1,#0xa
002f4a  4847              LDR      r0,|L1.12392|
002f4c  f7fffffe          BL       uart_putchar
002f50  210a              MOVS     r1,#0xa
002f52  4845              LDR      r0,|L1.12392|
002f54  f7fffffe          BL       uart_putchar
002f58  210a              MOVS     r1,#0xa
002f5a  4843              LDR      r0,|L1.12392|
002f5c  e000              B        |L1.12128|
                  |L1.12126|
002f5e  e0f5              B        |L1.12620|
                  |L1.12128|
002f60  f7fffffe          BL       uart_putchar
002f64  210a              MOVS     r1,#0xa
002f66  4840              LDR      r0,|L1.12392|
002f68  f7fffffe          BL       uart_putchar
002f6c  210a              MOVS     r1,#0xa
002f6e  483e              LDR      r0,|L1.12392|
002f70  f7fffffe          BL       uart_putchar
002f74  210a              MOVS     r1,#0xa
002f76  483c              LDR      r0,|L1.12392|
002f78  f7fffffe          BL       uart_putchar
002f7c  210a              MOVS     r1,#0xa
002f7e  483a              LDR      r0,|L1.12392|
002f80  f7fffffe          BL       uart_putchar
002f84  210a              MOVS     r1,#0xa
002f86  4838              LDR      r0,|L1.12392|
002f88  f7fffffe          BL       uart_putchar
002f8c  210a              MOVS     r1,#0xa
002f8e  4836              LDR      r0,|L1.12392|
002f90  f7fffffe          BL       uart_putchar
002f94  210a              MOVS     r1,#0xa
002f96  4834              LDR      r0,|L1.12392|
002f98  f7fffffe          BL       uart_putchar
002f9c  210a              MOVS     r1,#0xa
002f9e  4832              LDR      r0,|L1.12392|
002fa0  f7fffffe          BL       uart_putchar
002fa4  210a              MOVS     r1,#0xa
002fa6  4830              LDR      r0,|L1.12392|
002fa8  f7fffffe          BL       uart_putchar
002fac  210a              MOVS     r1,#0xa
002fae  482e              LDR      r0,|L1.12392|
002fb0  f7fffffe          BL       uart_putchar
002fb4  210a              MOVS     r1,#0xa
002fb6  482c              LDR      r0,|L1.12392|
002fb8  f7fffffe          BL       uart_putchar
002fbc  210a              MOVS     r1,#0xa
002fbe  482a              LDR      r0,|L1.12392|
002fc0  f7fffffe          BL       uart_putchar
002fc4  210a              MOVS     r1,#0xa
002fc6  4828              LDR      r0,|L1.12392|
002fc8  f7fffffe          BL       uart_putchar
002fcc  210a              MOVS     r1,#0xa
002fce  4826              LDR      r0,|L1.12392|
002fd0  f7fffffe          BL       uart_putchar
002fd4  210a              MOVS     r1,#0xa
002fd6  4824              LDR      r0,|L1.12392|
002fd8  f7fffffe          BL       uart_putchar
002fdc  210a              MOVS     r1,#0xa
002fde  4822              LDR      r0,|L1.12392|
002fe0  f7fffffe          BL       uart_putchar
002fe4  210a              MOVS     r1,#0xa
002fe6  4820              LDR      r0,|L1.12392|
002fe8  f7fffffe          BL       uart_putchar
002fec  210a              MOVS     r1,#0xa
002fee  481e              LDR      r0,|L1.12392|
002ff0  f7fffffe          BL       uart_putchar
002ff4  210a              MOVS     r1,#0xa
002ff6  481c              LDR      r0,|L1.12392|
002ff8  f7fffffe          BL       uart_putchar
002ffc  210a              MOVS     r1,#0xa
002ffe  481a              LDR      r0,|L1.12392|
003000  f7fffffe          BL       uart_putchar
003004  210a              MOVS     r1,#0xa
003006  4818              LDR      r0,|L1.12392|
003008  f7fffffe          BL       uart_putchar
00300c  210a              MOVS     r1,#0xa
00300e  4816              LDR      r0,|L1.12392|
003010  f7fffffe          BL       uart_putchar
003014  210a              MOVS     r1,#0xa
003016  4814              LDR      r0,|L1.12392|
003018  f7fffffe          BL       uart_putchar
00301c  210a              MOVS     r1,#0xa
00301e  e033              B        |L1.12424|
                  |L1.12320|
                          DCD      ||.text||+0xd54
                  |L1.12324|
                          DCD      ||.text||+0x8e8
                  |L1.12328|
003028  4f4b00            DCB      "OK",0
00302b  00                DCB      0
                  |L1.12332|
                          DCD      data
                  |L1.12336|
                          DCD      at_
                  |L1.12340|
                          DCD      apn
                  |L1.12344|
                          DCD      tmeout
                  |L1.12348|
                          DCD      port
                  |L1.12352|
                          DCD      ||ip||
                  |L1.12356|
003044  3e00              DCB      ">",0
003046  00                DCB      0
003047  00                DCB      0
                  |L1.12360|
                          DCD      uart_string_gsm
                  |L1.12364|
                          DCD      cond
                  |L1.12368|
                          DCD      0x00001388
                  |L1.12372|
003054  0a00              DCB      "\n",0
003056  00                DCB      0
003057  00                DCB      0
                  |L1.12376|
                          DCD      len
                  |L1.12380|
                          DCD      tout
                  |L1.12384|
                          DCD      ||k2||
                  |L1.12388|
                          DCD      k
                  |L1.12392|
                          DCD      0x4006b000
                  |L1.12396|
                          DCD      ||.text||+0x474
                  |L1.12400|
                          DCD      stcond1
                  |L1.12404|
                          DCD      stcond2
                  |L1.12408|
                          DCD      stcond3
                  |L1.12412|
                          DCD      stcond4
                  |L1.12416|
                          DCD      con1d
                  |L1.12420|
                          DCD      drive
                  |L1.12424|
003088  48fe              LDR      r0,|L1.13444|
00308a  f7fffffe          BL       uart_putchar
00308e  210a              MOVS     r1,#0xa
003090  48fc              LDR      r0,|L1.13444|
003092  f7fffffe          BL       uart_putchar
003096  210a              MOVS     r1,#0xa
003098  48fa              LDR      r0,|L1.13444|
00309a  f7fffffe          BL       uart_putchar
00309e  210a              MOVS     r1,#0xa
0030a0  48f8              LDR      r0,|L1.13444|
0030a2  f7fffffe          BL       uart_putchar
0030a6  210a              MOVS     r1,#0xa
0030a8  48f6              LDR      r0,|L1.13444|
0030aa  f7fffffe          BL       uart_putchar
0030ae  210a              MOVS     r1,#0xa
0030b0  48f4              LDR      r0,|L1.13444|
0030b2  f7fffffe          BL       uart_putchar
0030b6  210a              MOVS     r1,#0xa
0030b8  48f2              LDR      r0,|L1.13444|
0030ba  f7fffffe          BL       uart_putchar
0030be  210a              MOVS     r1,#0xa
0030c0  48f0              LDR      r0,|L1.13444|
0030c2  f7fffffe          BL       uart_putchar
0030c6  210a              MOVS     r1,#0xa
0030c8  48ee              LDR      r0,|L1.13444|
0030ca  f7fffffe          BL       uart_putchar
0030ce  210a              MOVS     r1,#0xa
0030d0  48ec              LDR      r0,|L1.13444|
0030d2  f7fffffe          BL       uart_putchar
0030d6  210a              MOVS     r1,#0xa
0030d8  48ea              LDR      r0,|L1.13444|
0030da  f7fffffe          BL       uart_putchar
0030de  210a              MOVS     r1,#0xa
0030e0  48e8              LDR      r0,|L1.13444|
0030e2  f7fffffe          BL       uart_putchar
0030e6  210a              MOVS     r1,#0xa
0030e8  48e6              LDR      r0,|L1.13444|
0030ea  f7fffffe          BL       uart_putchar
0030ee  210a              MOVS     r1,#0xa
0030f0  48e4              LDR      r0,|L1.13444|
0030f2  f7fffffe          BL       uart_putchar
0030f6  210a              MOVS     r1,#0xa
0030f8  48e2              LDR      r0,|L1.13444|
0030fa  f7fffffe          BL       uart_putchar
0030fe  210a              MOVS     r1,#0xa
003100  48e0              LDR      r0,|L1.13444|
003102  f7fffffe          BL       uart_putchar
003106  210a              MOVS     r1,#0xa
003108  48de              LDR      r0,|L1.13444|
00310a  f7fffffe          BL       uart_putchar
;;;1037   									//memset(data,0,1000);
;;;1038   														//timer counts to wait for characters in uart 1 									
;;;1039   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00310e  bf00              NOP      
                  |L1.12560|
003110  49dd              LDR      r1,|L1.13448|
003112  48de              LDR      r0,|L1.13452|
003114  f7fffffe          BL       strstr
003118  2800              CMP      r0,#0
00311a  d10a              BNE      |L1.12594|
00311c  49da              LDR      r1,|L1.13448|
00311e  398c              SUBS     r1,r1,#0x8c
003120  48da              LDR      r0,|L1.13452|
003122  f7fffffe          BL       strstr
003126  2800              CMP      r0,#0
003128  d103              BNE      |L1.12594|
00312a  48d9              LDR      r0,|L1.13456|
00312c  6800              LDR      r0,[r0,#0]  ; tout
00312e  2805              CMP      r0,#5
003130  ddee              BLE      |L1.12560|
                  |L1.12594|
;;;1040   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1041   									}
;;;1042   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003132  f7fffffe          BL       clear
;;;1043   									//clear();
;;;1044   									memset(data,0,strlen(data));
003136  48d7              LDR      r0,|L1.13460|
003138  f7fffffe          BL       strlen
00313c  4604              MOV      r4,r0
00313e  4621              MOV      r1,r4
003140  48d4              LDR      r0,|L1.13460|
003142  f7fffffe          BL       __aeabi_memclr
;;;1045   									clear();
003146  f7fffffe          BL       clear
00314a  e142              B        |L1.13266|
                  |L1.12620|
;;;1046   
;;;1047   								
;;;1048   									
;;;1049   									
;;;1050   									
;;;1051   								//	log_it();								
;;;1052   								}else{send_chunk();}	
00314c  f7fffffe          BL       send_chunk
003150  e13f              B        |L1.13266|
                  |L1.12626|
;;;1053   
;;;1054   																
;;;1055   								}else{
;;;1056   								
;;;1057   								
;;;1058   	delay(100);
003152  2064              MOVS     r0,#0x64
003154  f7fffffe          BL       delay
;;;1059   		clear();//memset(uart_string_gsm,0,5000);
003158  f7fffffe          BL       clear
;;;1060   	
;;;1061   	memset(at_,0,100);
00315c  2164              MOVS     r1,#0x64
00315e  48ce              LDR      r0,|L1.13464|
003160  f7fffffe          BL       __aeabi_memclr
;;;1062   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003164  48cb              LDR      r0,|L1.13460|
003166  f7fffffe          BL       strlen
00316a  1c44              ADDS     r4,r0,#1
00316c  4623              MOV      r3,r4
00316e  4acb              LDR      r2,|L1.13468|
003170  49c5              LDR      r1,|L1.13448|
003172  3938              SUBS     r1,r1,#0x38
003174  48c8              LDR      r0,|L1.13464|
003176  f7fffffe          BL       __2sprintf
;;;1063   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00317a  2005              MOVS     r0,#5
00317c  4bc2              LDR      r3,|L1.13448|
00317e  3b8c              SUBS     r3,r3,#0x8c
003180  461a              MOV      r2,r3
003182  3278              ADDS     r2,r2,#0x78
003184  a1c6              ADR      r1,|L1.13472|
003186  9000              STR      r0,[sp,#0]
003188  48c3              LDR      r0,|L1.13464|
00318a  f7fffffe          BL       send_SD
;;;1064   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1065   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1066   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1067   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1068   //	}
;;;1069   	
;;;1070   clear();	
00318e  f7fffffe          BL       clear
;;;1071   									k2=0;									//string array counter for uart 1
003192  2000              MOVS     r0,#0
003194  49c3              LDR      r1,|L1.13476|
003196  6008              STR      r0,[r1,#0]  ; k2
;;;1072   									tout=0;	
003198  49bd              LDR      r1,|L1.13456|
00319a  6008              STR      r0,[r1,#0]  ; tout
;;;1073   		for(k=0;k<strlen(data);k++)
00319c  49c2              LDR      r1,|L1.13480|
00319e  6008              STR      r0,[r1,#0]  ; k
0031a0  e00b              B        |L1.12730|
                  |L1.12706|
;;;1074   		{
;;;1075   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0031a2  48bc              LDR      r0,|L1.13460|
0031a4  4ac0              LDR      r2,|L1.13480|
0031a6  6812              LDR      r2,[r2,#0]  ; k
0031a8  5c81              LDRB     r1,[r0,r2]
0031aa  48b6              LDR      r0,|L1.13444|
0031ac  f7fffffe          BL       uart_putchar
0031b0  48bd              LDR      r0,|L1.13480|
0031b2  6800              LDR      r0,[r0,#0]            ;1073  ; k
0031b4  1c40              ADDS     r0,r0,#1              ;1073
0031b6  49bc              LDR      r1,|L1.13480|
0031b8  6008              STR      r0,[r1,#0]            ;1073  ; k
                  |L1.12730|
0031ba  48b6              LDR      r0,|L1.13460|
0031bc  f7fffffe          BL       strlen
0031c0  49b9              LDR      r1,|L1.13480|
0031c2  6809              LDR      r1,[r1,#0]            ;1073  ; k
0031c4  4288              CMP      r0,r1                 ;1073
0031c6  d8ec              BHI      |L1.12706|
;;;1076   		}	
;;;1077   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0031c8  210a              MOVS     r1,#0xa
0031ca  48ae              LDR      r0,|L1.13444|
0031cc  f7fffffe          BL       uart_putchar
0031d0  210a              MOVS     r1,#0xa
0031d2  48ac              LDR      r0,|L1.13444|
0031d4  f7fffffe          BL       uart_putchar
0031d8  210a              MOVS     r1,#0xa
0031da  48aa              LDR      r0,|L1.13444|
0031dc  f7fffffe          BL       uart_putchar
0031e0  210a              MOVS     r1,#0xa
0031e2  48a8              LDR      r0,|L1.13444|
0031e4  f7fffffe          BL       uart_putchar
0031e8  210a              MOVS     r1,#0xa
0031ea  48a6              LDR      r0,|L1.13444|
0031ec  f7fffffe          BL       uart_putchar
0031f0  210a              MOVS     r1,#0xa
0031f2  48a4              LDR      r0,|L1.13444|
0031f4  f7fffffe          BL       uart_putchar
0031f8  210a              MOVS     r1,#0xa
0031fa  48a2              LDR      r0,|L1.13444|
0031fc  f7fffffe          BL       uart_putchar
003200  210a              MOVS     r1,#0xa
003202  48a0              LDR      r0,|L1.13444|
003204  f7fffffe          BL       uart_putchar
003208  210a              MOVS     r1,#0xa
00320a  489e              LDR      r0,|L1.13444|
00320c  f7fffffe          BL       uart_putchar
003210  210a              MOVS     r1,#0xa
003212  489c              LDR      r0,|L1.13444|
003214  f7fffffe          BL       uart_putchar
003218  210a              MOVS     r1,#0xa
00321a  489a              LDR      r0,|L1.13444|
00321c  f7fffffe          BL       uart_putchar
003220  210a              MOVS     r1,#0xa
003222  4898              LDR      r0,|L1.13444|
003224  f7fffffe          BL       uart_putchar
003228  210a              MOVS     r1,#0xa
00322a  4896              LDR      r0,|L1.13444|
00322c  f7fffffe          BL       uart_putchar
003230  210a              MOVS     r1,#0xa
003232  4894              LDR      r0,|L1.13444|
003234  f7fffffe          BL       uart_putchar
003238  210a              MOVS     r1,#0xa
00323a  4892              LDR      r0,|L1.13444|
00323c  f7fffffe          BL       uart_putchar
003240  210a              MOVS     r1,#0xa
003242  4890              LDR      r0,|L1.13444|
003244  f7fffffe          BL       uart_putchar
003248  210a              MOVS     r1,#0xa
00324a  488e              LDR      r0,|L1.13444|
00324c  f7fffffe          BL       uart_putchar
003250  210a              MOVS     r1,#0xa
003252  488c              LDR      r0,|L1.13444|
003254  f7fffffe          BL       uart_putchar
003258  210a              MOVS     r1,#0xa
00325a  488a              LDR      r0,|L1.13444|
00325c  f7fffffe          BL       uart_putchar
003260  210a              MOVS     r1,#0xa
003262  4888              LDR      r0,|L1.13444|
003264  f7fffffe          BL       uart_putchar
003268  210a              MOVS     r1,#0xa
00326a  4886              LDR      r0,|L1.13444|
00326c  f7fffffe          BL       uart_putchar
003270  210a              MOVS     r1,#0xa
003272  4884              LDR      r0,|L1.13444|
003274  f7fffffe          BL       uart_putchar
003278  210a              MOVS     r1,#0xa
00327a  4882              LDR      r0,|L1.13444|
00327c  f7fffffe          BL       uart_putchar
003280  210a              MOVS     r1,#0xa
003282  4880              LDR      r0,|L1.13444|
003284  f7fffffe          BL       uart_putchar
003288  210a              MOVS     r1,#0xa
00328a  487e              LDR      r0,|L1.13444|
00328c  f7fffffe          BL       uart_putchar
003290  210a              MOVS     r1,#0xa
003292  487c              LDR      r0,|L1.13444|
003294  f7fffffe          BL       uart_putchar
003298  210a              MOVS     r1,#0xa
00329a  487a              LDR      r0,|L1.13444|
00329c  f7fffffe          BL       uart_putchar
0032a0  210a              MOVS     r1,#0xa
0032a2  4878              LDR      r0,|L1.13444|
0032a4  f7fffffe          BL       uart_putchar
0032a8  210a              MOVS     r1,#0xa
0032aa  4876              LDR      r0,|L1.13444|
0032ac  f7fffffe          BL       uart_putchar
0032b0  210a              MOVS     r1,#0xa
0032b2  4874              LDR      r0,|L1.13444|
0032b4  f7fffffe          BL       uart_putchar
0032b8  210a              MOVS     r1,#0xa
0032ba  4872              LDR      r0,|L1.13444|
0032bc  f7fffffe          BL       uart_putchar
0032c0  210a              MOVS     r1,#0xa
0032c2  4870              LDR      r0,|L1.13444|
0032c4  f7fffffe          BL       uart_putchar
0032c8  210a              MOVS     r1,#0xa
0032ca  486e              LDR      r0,|L1.13444|
0032cc  f7fffffe          BL       uart_putchar
0032d0  210a              MOVS     r1,#0xa
0032d2  486c              LDR      r0,|L1.13444|
0032d4  f7fffffe          BL       uart_putchar
0032d8  210a              MOVS     r1,#0xa
0032da  486a              LDR      r0,|L1.13444|
0032dc  f7fffffe          BL       uart_putchar
0032e0  210a              MOVS     r1,#0xa
0032e2  4868              LDR      r0,|L1.13444|
0032e4  f7fffffe          BL       uart_putchar
0032e8  210a              MOVS     r1,#0xa
0032ea  4866              LDR      r0,|L1.13444|
0032ec  f7fffffe          BL       uart_putchar
0032f0  210a              MOVS     r1,#0xa
0032f2  4864              LDR      r0,|L1.13444|
0032f4  f7fffffe          BL       uart_putchar
0032f8  210a              MOVS     r1,#0xa
0032fa  4862              LDR      r0,|L1.13444|
0032fc  f7fffffe          BL       uart_putchar
003300  210a              MOVS     r1,#0xa
003302  4860              LDR      r0,|L1.13444|
003304  f7fffffe          BL       uart_putchar
003308  210a              MOVS     r1,#0xa
00330a  485e              LDR      r0,|L1.13444|
00330c  f7fffffe          BL       uart_putchar
003310  210a              MOVS     r1,#0xa
003312  485c              LDR      r0,|L1.13444|
003314  f7fffffe          BL       uart_putchar
003318  210a              MOVS     r1,#0xa
00331a  485a              LDR      r0,|L1.13444|
00331c  f7fffffe          BL       uart_putchar
003320  210a              MOVS     r1,#0xa
003322  4858              LDR      r0,|L1.13444|
003324  f7fffffe          BL       uart_putchar
003328  210a              MOVS     r1,#0xa
00332a  4856              LDR      r0,|L1.13444|
00332c  f7fffffe          BL       uart_putchar
003330  210a              MOVS     r1,#0xa
003332  4854              LDR      r0,|L1.13444|
003334  f7fffffe          BL       uart_putchar
003338  210a              MOVS     r1,#0xa
00333a  4852              LDR      r0,|L1.13444|
00333c  f7fffffe          BL       uart_putchar
003340  210a              MOVS     r1,#0xa
003342  4850              LDR      r0,|L1.13444|
003344  f7fffffe          BL       uart_putchar
003348  210a              MOVS     r1,#0xa
00334a  484e              LDR      r0,|L1.13444|
00334c  f7fffffe          BL       uart_putchar
003350  210a              MOVS     r1,#0xa
003352  484c              LDR      r0,|L1.13444|
003354  f7fffffe          BL       uart_putchar
003358  210a              MOVS     r1,#0xa
00335a  484a              LDR      r0,|L1.13444|
00335c  f7fffffe          BL       uart_putchar
003360  210a              MOVS     r1,#0xa
003362  4848              LDR      r0,|L1.13444|
003364  f7fffffe          BL       uart_putchar
003368  210a              MOVS     r1,#0xa
00336a  4846              LDR      r0,|L1.13444|
00336c  f7fffffe          BL       uart_putchar
003370  210a              MOVS     r1,#0xa
003372  4844              LDR      r0,|L1.13444|
003374  f7fffffe          BL       uart_putchar
003378  210a              MOVS     r1,#0xa
00337a  4842              LDR      r0,|L1.13444|
00337c  f7fffffe          BL       uart_putchar
003380  210a              MOVS     r1,#0xa
003382  4840              LDR      r0,|L1.13444|
003384  f7fffffe          BL       uart_putchar
003388  210a              MOVS     r1,#0xa
00338a  483e              LDR      r0,|L1.13444|
00338c  f7fffffe          BL       uart_putchar
;;;1078   									//memset(data,0,1000);
;;;1079   														//timer counts to wait for characters in uart 1 									
;;;1080   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003390  bf00              NOP      
                  |L1.13202|
003392  493d              LDR      r1,|L1.13448|
003394  483d              LDR      r0,|L1.13452|
003396  f7fffffe          BL       strstr
00339a  2800              CMP      r0,#0
00339c  d10a              BNE      |L1.13236|
00339e  493a              LDR      r1,|L1.13448|
0033a0  398c              SUBS     r1,r1,#0x8c
0033a2  483a              LDR      r0,|L1.13452|
0033a4  f7fffffe          BL       strstr
0033a8  2800              CMP      r0,#0
0033aa  d103              BNE      |L1.13236|
0033ac  4838              LDR      r0,|L1.13456|
0033ae  6800              LDR      r0,[r0,#0]  ; tout
0033b0  2805              CMP      r0,#5
0033b2  ddee              BLE      |L1.13202|
                  |L1.13236|
;;;1081   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1082   									}
;;;1083   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0033b4  f7fffffe          BL       clear
;;;1084   									//clear();
;;;1085   									memset(data,0,strlen(data));
0033b8  4836              LDR      r0,|L1.13460|
0033ba  f7fffffe          BL       strlen
0033be  4604              MOV      r4,r0
0033c0  4621              MOV      r1,r4
0033c2  4834              LDR      r0,|L1.13460|
0033c4  f7fffffe          BL       __aeabi_memclr
;;;1086   									clear();
0033c8  f7fffffe          BL       clear
0033cc  e001              B        |L1.13266|
                  |L1.13262|
;;;1087   
;;;1088   								
;;;1089   								
;;;1090   								//log_it();
;;;1091   									}			//
;;;1092   
;;;1093   							
;;;1094   
;;;1095   	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1096   	else
;;;1097   	{
;;;1098   		send_chunk();
0033ce  f7fffffe          BL       send_chunk
                  |L1.13266|
;;;1099   	}		
;;;1100   								
;;;1101   								
;;;1102   								
;;;1103   	memset(data,0,strlen(data));	
0033d2  4830              LDR      r0,|L1.13460|
0033d4  f7fffffe          BL       strlen
0033d8  4604              MOV      r4,r0
0033da  4621              MOV      r1,r4
0033dc  482d              LDR      r0,|L1.13460|
0033de  f7fffffe          BL       __aeabi_memclr
;;;1104   	uart_putchar(UART1_BASE_PTR, 0x1A);
0033e2  211a              MOVS     r1,#0x1a
0033e4  4827              LDR      r0,|L1.13444|
0033e6  f7fffffe          BL       uart_putchar
;;;1105   	
;;;1106   }
0033ea  bd38              POP      {r3-r5,pc}
;;;1107   
                          ENDP

                  log_it PROC
;;;1110   
;;;1111   void log_it()
0033ec  b538              PUSH     {r3-r5,lr}
;;;1112   {
;;;1113   	delay(100);
0033ee  2064              MOVS     r0,#0x64
0033f0  f7fffffe          BL       delay
;;;1114   		clear();//memset(uart_string_gsm,0,5000);
0033f4  f7fffffe          BL       clear
;;;1115   	
;;;1116   	memset(at_,0,100);
0033f8  2164              MOVS     r1,#0x64
0033fa  4827              LDR      r0,|L1.13464|
0033fc  f7fffffe          BL       __aeabi_memclr
;;;1117   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003400  4824              LDR      r0,|L1.13460|
003402  f7fffffe          BL       strlen
003406  1c44              ADDS     r4,r0,#1
003408  4623              MOV      r3,r4
00340a  4a24              LDR      r2,|L1.13468|
00340c  491e              LDR      r1,|L1.13448|
00340e  3938              SUBS     r1,r1,#0x38
003410  4821              LDR      r0,|L1.13464|
003412  f7fffffe          BL       __2sprintf
;;;1118   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003416  2005              MOVS     r0,#5
003418  4b1b              LDR      r3,|L1.13448|
00341a  3b8c              SUBS     r3,r3,#0x8c
00341c  461a              MOV      r2,r3
00341e  3278              ADDS     r2,r2,#0x78
003420  a11f              ADR      r1,|L1.13472|
003422  9000              STR      r0,[sp,#0]
003424  481c              LDR      r0,|L1.13464|
003426  f7fffffe          BL       send_SD
;;;1119   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1120   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1121   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1122   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1123   //	}
;;;1124   	
;;;1125   clear();	
00342a  f7fffffe          BL       clear
;;;1126   									k2=0;									//string array counter for uart 1
00342e  2000              MOVS     r0,#0
003430  491c              LDR      r1,|L1.13476|
003432  6008              STR      r0,[r1,#0]  ; k2
;;;1127   									tout=0;	
003434  4916              LDR      r1,|L1.13456|
003436  6008              STR      r0,[r1,#0]  ; tout
;;;1128   		for(k=0;k<strlen(data);k++)
003438  491b              LDR      r1,|L1.13480|
00343a  6008              STR      r0,[r1,#0]  ; k
00343c  e00b              B        |L1.13398|
                  |L1.13374|
;;;1129   		{
;;;1130   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00343e  4815              LDR      r0,|L1.13460|
003440  4a19              LDR      r2,|L1.13480|
003442  6812              LDR      r2,[r2,#0]  ; k
003444  5c81              LDRB     r1,[r0,r2]
003446  480f              LDR      r0,|L1.13444|
003448  f7fffffe          BL       uart_putchar
00344c  4816              LDR      r0,|L1.13480|
00344e  6800              LDR      r0,[r0,#0]            ;1128  ; k
003450  1c40              ADDS     r0,r0,#1              ;1128
003452  4915              LDR      r1,|L1.13480|
003454  6008              STR      r0,[r1,#0]            ;1128  ; k
                  |L1.13398|
003456  480f              LDR      r0,|L1.13460|
003458  f7fffffe          BL       strlen
00345c  4912              LDR      r1,|L1.13480|
00345e  6809              LDR      r1,[r1,#0]            ;1128  ; k
003460  4288              CMP      r0,r1                 ;1128
003462  d8ec              BHI      |L1.13374|
;;;1131   		}	
;;;1132   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
003464  210a              MOVS     r1,#0xa
003466  4807              LDR      r0,|L1.13444|
003468  f7fffffe          BL       uart_putchar
00346c  210a              MOVS     r1,#0xa
00346e  4805              LDR      r0,|L1.13444|
003470  f7fffffe          BL       uart_putchar
003474  210a              MOVS     r1,#0xa
003476  4803              LDR      r0,|L1.13444|
003478  f7fffffe          BL       uart_putchar
00347c  210a              MOVS     r1,#0xa
00347e  4801              LDR      r0,|L1.13444|
003480  e014              B        |L1.13484|
003482  0000              DCW      0x0000
                  |L1.13444|
                          DCD      0x4006b000
                  |L1.13448|
                          DCD      ||.text||+0x8fc
                  |L1.13452|
                          DCD      uart_string_gsm
                  |L1.13456|
                          DCD      tout
                  |L1.13460|
                          DCD      data
                  |L1.13464|
                          DCD      at_
                  |L1.13468|
                          DCD      drive
                  |L1.13472|
0034a0  3e00              DCB      ">",0
0034a2  00                DCB      0
0034a3  00                DCB      0
                  |L1.13476|
                          DCD      ||k2||
                  |L1.13480|
                          DCD      k
                  |L1.13484|
0034ac  f7fffffe          BL       uart_putchar
0034b0  210a              MOVS     r1,#0xa
0034b2  48f8              LDR      r0,|L1.14484|
0034b4  f7fffffe          BL       uart_putchar
0034b8  210a              MOVS     r1,#0xa
0034ba  48f6              LDR      r0,|L1.14484|
0034bc  f7fffffe          BL       uart_putchar
0034c0  210a              MOVS     r1,#0xa
0034c2  48f4              LDR      r0,|L1.14484|
0034c4  f7fffffe          BL       uart_putchar
0034c8  210a              MOVS     r1,#0xa
0034ca  48f2              LDR      r0,|L1.14484|
0034cc  f7fffffe          BL       uart_putchar
0034d0  210a              MOVS     r1,#0xa
0034d2  48f0              LDR      r0,|L1.14484|
0034d4  f7fffffe          BL       uart_putchar
0034d8  210a              MOVS     r1,#0xa
0034da  48ee              LDR      r0,|L1.14484|
0034dc  f7fffffe          BL       uart_putchar
0034e0  210a              MOVS     r1,#0xa
0034e2  48ec              LDR      r0,|L1.14484|
0034e4  f7fffffe          BL       uart_putchar
0034e8  210a              MOVS     r1,#0xa
0034ea  48ea              LDR      r0,|L1.14484|
0034ec  f7fffffe          BL       uart_putchar
0034f0  210a              MOVS     r1,#0xa
0034f2  48e8              LDR      r0,|L1.14484|
0034f4  f7fffffe          BL       uart_putchar
0034f8  210a              MOVS     r1,#0xa
0034fa  48e6              LDR      r0,|L1.14484|
0034fc  f7fffffe          BL       uart_putchar
003500  210a              MOVS     r1,#0xa
003502  48e4              LDR      r0,|L1.14484|
003504  f7fffffe          BL       uart_putchar
003508  210a              MOVS     r1,#0xa
00350a  48e2              LDR      r0,|L1.14484|
00350c  f7fffffe          BL       uart_putchar
003510  210a              MOVS     r1,#0xa
003512  48e0              LDR      r0,|L1.14484|
003514  f7fffffe          BL       uart_putchar
003518  210a              MOVS     r1,#0xa
00351a  48de              LDR      r0,|L1.14484|
00351c  f7fffffe          BL       uart_putchar
003520  210a              MOVS     r1,#0xa
003522  48dc              LDR      r0,|L1.14484|
003524  f7fffffe          BL       uart_putchar
003528  210a              MOVS     r1,#0xa
00352a  48da              LDR      r0,|L1.14484|
00352c  f7fffffe          BL       uart_putchar
003530  210a              MOVS     r1,#0xa
003532  48d8              LDR      r0,|L1.14484|
003534  f7fffffe          BL       uart_putchar
003538  210a              MOVS     r1,#0xa
00353a  48d6              LDR      r0,|L1.14484|
00353c  f7fffffe          BL       uart_putchar
003540  210a              MOVS     r1,#0xa
003542  48d4              LDR      r0,|L1.14484|
003544  f7fffffe          BL       uart_putchar
003548  210a              MOVS     r1,#0xa
00354a  48d2              LDR      r0,|L1.14484|
00354c  f7fffffe          BL       uart_putchar
003550  210a              MOVS     r1,#0xa
003552  48d0              LDR      r0,|L1.14484|
003554  f7fffffe          BL       uart_putchar
003558  210a              MOVS     r1,#0xa
00355a  48ce              LDR      r0,|L1.14484|
00355c  f7fffffe          BL       uart_putchar
003560  210a              MOVS     r1,#0xa
003562  48cc              LDR      r0,|L1.14484|
003564  f7fffffe          BL       uart_putchar
003568  210a              MOVS     r1,#0xa
00356a  48ca              LDR      r0,|L1.14484|
00356c  f7fffffe          BL       uart_putchar
003570  210a              MOVS     r1,#0xa
003572  48c8              LDR      r0,|L1.14484|
003574  f7fffffe          BL       uart_putchar
003578  210a              MOVS     r1,#0xa
00357a  48c6              LDR      r0,|L1.14484|
00357c  f7fffffe          BL       uart_putchar
003580  210a              MOVS     r1,#0xa
003582  48c4              LDR      r0,|L1.14484|
003584  f7fffffe          BL       uart_putchar
003588  210a              MOVS     r1,#0xa
00358a  48c2              LDR      r0,|L1.14484|
00358c  f7fffffe          BL       uart_putchar
003590  210a              MOVS     r1,#0xa
003592  48c0              LDR      r0,|L1.14484|
003594  f7fffffe          BL       uart_putchar
003598  210a              MOVS     r1,#0xa
00359a  48be              LDR      r0,|L1.14484|
00359c  f7fffffe          BL       uart_putchar
0035a0  210a              MOVS     r1,#0xa
0035a2  48bc              LDR      r0,|L1.14484|
0035a4  f7fffffe          BL       uart_putchar
0035a8  210a              MOVS     r1,#0xa
0035aa  48ba              LDR      r0,|L1.14484|
0035ac  f7fffffe          BL       uart_putchar
0035b0  210a              MOVS     r1,#0xa
0035b2  48b8              LDR      r0,|L1.14484|
0035b4  f7fffffe          BL       uart_putchar
0035b8  210a              MOVS     r1,#0xa
0035ba  48b6              LDR      r0,|L1.14484|
0035bc  f7fffffe          BL       uart_putchar
0035c0  210a              MOVS     r1,#0xa
0035c2  48b4              LDR      r0,|L1.14484|
0035c4  f7fffffe          BL       uart_putchar
0035c8  210a              MOVS     r1,#0xa
0035ca  48b2              LDR      r0,|L1.14484|
0035cc  f7fffffe          BL       uart_putchar
0035d0  210a              MOVS     r1,#0xa
0035d2  48b0              LDR      r0,|L1.14484|
0035d4  f7fffffe          BL       uart_putchar
0035d8  210a              MOVS     r1,#0xa
0035da  48ae              LDR      r0,|L1.14484|
0035dc  f7fffffe          BL       uart_putchar
0035e0  210a              MOVS     r1,#0xa
0035e2  48ac              LDR      r0,|L1.14484|
0035e4  f7fffffe          BL       uart_putchar
0035e8  210a              MOVS     r1,#0xa
0035ea  48aa              LDR      r0,|L1.14484|
0035ec  f7fffffe          BL       uart_putchar
0035f0  210a              MOVS     r1,#0xa
0035f2  48a8              LDR      r0,|L1.14484|
0035f4  f7fffffe          BL       uart_putchar
0035f8  210a              MOVS     r1,#0xa
0035fa  48a6              LDR      r0,|L1.14484|
0035fc  f7fffffe          BL       uart_putchar
003600  210a              MOVS     r1,#0xa
003602  48a4              LDR      r0,|L1.14484|
003604  f7fffffe          BL       uart_putchar
003608  210a              MOVS     r1,#0xa
00360a  48a2              LDR      r0,|L1.14484|
00360c  f7fffffe          BL       uart_putchar
003610  210a              MOVS     r1,#0xa
003612  48a0              LDR      r0,|L1.14484|
003614  f7fffffe          BL       uart_putchar
003618  210a              MOVS     r1,#0xa
00361a  489e              LDR      r0,|L1.14484|
00361c  f7fffffe          BL       uart_putchar
003620  210a              MOVS     r1,#0xa
003622  489c              LDR      r0,|L1.14484|
003624  f7fffffe          BL       uart_putchar
003628  210a              MOVS     r1,#0xa
00362a  489a              LDR      r0,|L1.14484|
00362c  f7fffffe          BL       uart_putchar
003630  210a              MOVS     r1,#0xa
003632  4898              LDR      r0,|L1.14484|
003634  f7fffffe          BL       uart_putchar
003638  210a              MOVS     r1,#0xa
00363a  4896              LDR      r0,|L1.14484|
00363c  f7fffffe          BL       uart_putchar
003640  210a              MOVS     r1,#0xa
003642  4894              LDR      r0,|L1.14484|
003644  f7fffffe          BL       uart_putchar
003648  210a              MOVS     r1,#0xa
00364a  4892              LDR      r0,|L1.14484|
00364c  f7fffffe          BL       uart_putchar
003650  210a              MOVS     r1,#0xa
003652  4890              LDR      r0,|L1.14484|
003654  f7fffffe          BL       uart_putchar
;;;1133   									//memset(data,0,1000);
;;;1134   														//timer counts to wait for characters in uart 1 									
;;;1135   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003658  bf00              NOP      
                  |L1.13914|
00365a  498f              LDR      r1,|L1.14488|
00365c  488f              LDR      r0,|L1.14492|
00365e  f7fffffe          BL       strstr
003662  2800              CMP      r0,#0
003664  d10a              BNE      |L1.13948|
003666  498c              LDR      r1,|L1.14488|
003668  398c              SUBS     r1,r1,#0x8c
00366a  488c              LDR      r0,|L1.14492|
00366c  f7fffffe          BL       strstr
003670  2800              CMP      r0,#0
003672  d103              BNE      |L1.13948|
003674  488a              LDR      r0,|L1.14496|
003676  6800              LDR      r0,[r0,#0]  ; tout
003678  2805              CMP      r0,#5
00367a  ddee              BLE      |L1.13914|
                  |L1.13948|
;;;1136   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1137   									}
;;;1138   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00367c  f7fffffe          BL       clear
;;;1139   									//clear();
;;;1140   									memset(data,0,strlen(data));
003680  4888              LDR      r0,|L1.14500|
003682  f7fffffe          BL       strlen
003686  4604              MOV      r4,r0
003688  4621              MOV      r1,r4
00368a  4886              LDR      r0,|L1.14500|
00368c  f7fffffe          BL       __aeabi_memclr
;;;1141   									clear();
003690  f7fffffe          BL       clear
;;;1142   
;;;1143   								
;;;1144   						//		
;;;1145   }
003694  bd38              POP      {r3-r5,pc}
;;;1146   
                          ENDP

                  read PROC
;;;1362   
;;;1363   void read(char * A,char * B,char * C)
003696  b570              PUSH     {r4-r6,lr}
;;;1364   {k=0;l=time;
003698  4604              MOV      r4,r0
00369a  460d              MOV      r5,r1
00369c  4616              MOV      r6,r2
00369e  2000              MOVS     r0,#0
0036a0  4981              LDR      r1,|L1.14504|
0036a2  6008              STR      r0,[r1,#0]  ; k
0036a4  4881              LDR      r0,|L1.14508|
0036a6  6800              LDR      r0,[r0,#0]  ; time
0036a8  4981              LDR      r1,|L1.14512|
0036aa  6008              STR      r0,[r1,#0]  ; l
;;;1365   			do{
0036ac  bf00              NOP      
                  |L1.13998|
;;;1366   			if( uart_getchar_present (UART1_BASE_PTR))	
0036ae  4879              LDR      r0,|L1.14484|
0036b0  f7fffffe          BL       uart_getchar_present
0036b4  2800              CMP      r0,#0
0036b6  d018              BEQ      |L1.14058|
;;;1367   			{uart_string_gps[k]=UART_D_REG(UART1_BASE_PTR);k++;l=time;if(k>298){k=0;}}
0036b8  4876              LDR      r0,|L1.14484|
0036ba  79c0              LDRB     r0,[r0,#7]
0036bc  497d              LDR      r1,|L1.14516|
0036be  4a7a              LDR      r2,|L1.14504|
0036c0  6812              LDR      r2,[r2,#0]  ; k
0036c2  5488              STRB     r0,[r1,r2]
0036c4  4878              LDR      r0,|L1.14504|
0036c6  6800              LDR      r0,[r0,#0]  ; k
0036c8  1c40              ADDS     r0,r0,#1
0036ca  4977              LDR      r1,|L1.14504|
0036cc  6008              STR      r0,[r1,#0]  ; k
0036ce  4877              LDR      r0,|L1.14508|
0036d0  6800              LDR      r0,[r0,#0]  ; time
0036d2  4977              LDR      r1,|L1.14512|
0036d4  6008              STR      r0,[r1,#0]  ; l
0036d6  4874              LDR      r0,|L1.14504|
0036d8  6800              LDR      r0,[r0,#0]  ; k
0036da  21ff              MOVS     r1,#0xff
0036dc  312b              ADDS     r1,r1,#0x2b
0036de  4288              CMP      r0,r1
0036e0  dd09              BLE      |L1.14070|
0036e2  2000              MOVS     r0,#0
0036e4  4970              LDR      r1,|L1.14504|
0036e6  6008              STR      r0,[r1,#0]  ; k
0036e8  e005              B        |L1.14070|
                  |L1.14058|
;;;1368   				else{
;;;1369   							l--;if(l==10){}
0036ea  4871              LDR      r0,|L1.14512|
0036ec  6800              LDR      r0,[r0,#0]  ; l
0036ee  1e40              SUBS     r0,r0,#1
0036f0  496f              LDR      r1,|L1.14512|
0036f2  6008              STR      r0,[r1,#0]  ; l
0036f4  bf00              NOP      
                  |L1.14070|
;;;1370   						}
;;;1371   			}while(!((strstr(uart_string_gps, "OK\r\n"))
0036f6  4968              LDR      r1,|L1.14488|
0036f8  486e              LDR      r0,|L1.14516|
0036fa  f7fffffe          BL       strstr
0036fe  2800              CMP      r0,#0
003700  d110              BNE      |L1.14116|
003702  4965              LDR      r1,|L1.14488|
003704  3914              SUBS     r1,r1,#0x14
003706  486b              LDR      r0,|L1.14516|
003708  f7fffffe          BL       strstr
00370c  2800              CMP      r0,#0
00370e  d109              BNE      |L1.14116|
003710  4867              LDR      r0,|L1.14512|
003712  6800              LDR      r0,[r0,#0]  ; l
003714  2800              CMP      r0,#0
003716  dd05              BLE      |L1.14116|
003718  4967              LDR      r1,|L1.14520|
00371a  4866              LDR      r0,|L1.14516|
00371c  f7fffffe          BL       strstr
003720  2800              CMP      r0,#0
003722  d0c4              BEQ      |L1.13998|
                  |L1.14116|
;;;1372   							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;1373   				        	||(strstr(uart_string_gps, "ERROR:"))
;;;1374   							));
;;;1375   //		clear();
;;;1376   }	
003724  bd70              POP      {r4-r6,pc}
;;;1377   void read2(char * respA,char * respB,char * respC, int timeout)
                          ENDP

                  read2 PROC
003726  b5f8              PUSH     {r3-r7,lr}
;;;1378   {k=0;l=time;
003728  4604              MOV      r4,r0
00372a  460e              MOV      r6,r1
00372c  4615              MOV      r5,r2
00372e  461f              MOV      r7,r3
003730  2000              MOVS     r0,#0
003732  495d              LDR      r1,|L1.14504|
003734  6008              STR      r0,[r1,#0]  ; k
003736  485d              LDR      r0,|L1.14508|
003738  6800              LDR      r0,[r0,#0]  ; time
00373a  495d              LDR      r1,|L1.14512|
00373c  6008              STR      r0,[r1,#0]  ; l
;;;1379   			do{
00373e  bf00              NOP      
                  |L1.14144|
;;;1380   			if( uart_getchar_present (UART2_BASE_PTR))	
003740  485e              LDR      r0,|L1.14524|
003742  f7fffffe          BL       uart_getchar_present
003746  2800              CMP      r0,#0
003748  d018              BEQ      |L1.14204|
;;;1381   			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=time;if(k>298){k=0;}}
00374a  485c              LDR      r0,|L1.14524|
00374c  79c0              LDRB     r0,[r0,#7]
00374e  4959              LDR      r1,|L1.14516|
003750  4a55              LDR      r2,|L1.14504|
003752  6812              LDR      r2,[r2,#0]  ; k
003754  5488              STRB     r0,[r1,r2]
003756  4854              LDR      r0,|L1.14504|
003758  6800              LDR      r0,[r0,#0]  ; k
00375a  1c40              ADDS     r0,r0,#1
00375c  4952              LDR      r1,|L1.14504|
00375e  6008              STR      r0,[r1,#0]  ; k
003760  4852              LDR      r0,|L1.14508|
003762  6800              LDR      r0,[r0,#0]  ; time
003764  4952              LDR      r1,|L1.14512|
003766  6008              STR      r0,[r1,#0]  ; l
003768  484f              LDR      r0,|L1.14504|
00376a  6800              LDR      r0,[r0,#0]  ; k
00376c  21ff              MOVS     r1,#0xff
00376e  312b              ADDS     r1,r1,#0x2b
003770  4288              CMP      r0,r1
003772  dd08              BLE      |L1.14214|
003774  2000              MOVS     r0,#0
003776  494c              LDR      r1,|L1.14504|
003778  6008              STR      r0,[r1,#0]  ; k
00377a  e004              B        |L1.14214|
                  |L1.14204|
;;;1382   				else{				
;;;1383   								l--;
00377c  484c              LDR      r0,|L1.14512|
00377e  6800              LDR      r0,[r0,#0]  ; l
003780  1e40              SUBS     r0,r0,#1
003782  494b              LDR      r1,|L1.14512|
003784  6008              STR      r0,[r1,#0]  ; l
                  |L1.14214|
;;;1384   						}
;;;1385   			}while(!((strstr(uart_string_gps, respA))
003786  4621              MOV      r1,r4
003788  484a              LDR      r0,|L1.14516|
00378a  f7fffffe          BL       strstr
00378e  2800              CMP      r0,#0
003790  d10f              BNE      |L1.14258|
003792  4631              MOV      r1,r6
003794  4847              LDR      r0,|L1.14516|
003796  f7fffffe          BL       strstr
00379a  2800              CMP      r0,#0
00379c  d109              BNE      |L1.14258|
00379e  4844              LDR      r0,|L1.14512|
0037a0  6800              LDR      r0,[r0,#0]  ; l
0037a2  2800              CMP      r0,#0
0037a4  dd05              BLE      |L1.14258|
0037a6  4629              MOV      r1,r5
0037a8  4842              LDR      r0,|L1.14516|
0037aa  f7fffffe          BL       strstr
0037ae  2800              CMP      r0,#0
0037b0  d0c6              BEQ      |L1.14144|
                  |L1.14258|
;;;1386   							||(strstr(uart_string_gps, respB))  || (l<=0) 
;;;1387   				        	||(strstr(uart_string_gps, respC))
;;;1388   							));
;;;1389   //		clear();
;;;1390   }	
0037b2  bdf8              POP      {r3-r7,pc}
;;;1391   
                          ENDP

                  send_modem2 PROC
;;;1402   	
;;;1403   void send_modem2(char ch[])
0037b4  b570              PUSH     {r4-r6,lr}
;;;1404   	{	
0037b6  4604              MOV      r4,r0
;;;1405   						unsigned char i21;
;;;1406   						i21=0;
0037b8  2500              MOVS     r5,#0
;;;1407   						while ((*(ch+i21)) != '\0') // NULL
0037ba  e005              B        |L1.14280|
                  |L1.14268|
;;;1408   						{	
;;;1409   						// delay(1);
;;;1410   						 uart_putchar(UART2_BASE_PTR, (*(ch+i21)));
0037bc  5d61              LDRB     r1,[r4,r5]
0037be  483f              LDR      r0,|L1.14524|
0037c0  f7fffffe          BL       uart_putchar
;;;1411   						 i21++;
0037c4  1c68              ADDS     r0,r5,#1
0037c6  b2c5              UXTB     r5,r0
                  |L1.14280|
0037c8  5d60              LDRB     r0,[r4,r5]            ;1407
0037ca  2800              CMP      r0,#0                 ;1407
0037cc  d1f6              BNE      |L1.14268|
;;;1412   						}
;;;1413   		
;;;1414   	}	
0037ce  bd70              POP      {r4-r6,pc}
;;;1415   	
                          ENDP

                  gsm_gps_sleep PROC
;;;1638   
;;;1639   void gsm_gps_sleep()
0037d0  b508              PUSH     {r3,lr}
;;;1640   {
;;;1641   	
;;;1642   sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0037d2  4b3b              LDR      r3,|L1.14528|
0037d4  4a3b              LDR      r2,|L1.14532|
0037d6  4938              LDR      r1,|L1.14520|
0037d8  3160              ADDS     r1,r1,#0x60
0037da  483b              LDR      r0,|L1.14536|
0037dc  f7fffffe          BL       __2sprintf
;;;1643   send_GSM( at_ , "CONNECT", "ERROR" , "CONNECT",tmeout);										
0037e0  483a              LDR      r0,|L1.14540|
0037e2  6800              LDR      r0,[r0,#0]  ; tmeout
0037e4  4b34              LDR      r3,|L1.14520|
0037e6  3380              ADDS     r3,r3,#0x80
0037e8  4a2b              LDR      r2,|L1.14488|
0037ea  3a8c              SUBS     r2,r2,#0x8c
0037ec  4619              MOV      r1,r3
0037ee  9000              STR      r0,[sp,#0]
0037f0  4835              LDR      r0,|L1.14536|
0037f2  f7fffffe          BL       send_GSM
;;;1644   send_chunk();
0037f6  f7fffffe          BL       send_chunk
;;;1645   	//sleep modules;
;;;1646   //	do{
;;;1647   //				accel_read();
;;;1648   //				motion_samples = 0;
;;;1649   //				detect_motion();
;;;1650   //				
;;;1651   //	}while(motion != 1);
;;;1652   //	motion_samples = 0;
;;;1653   //wakeup modules;
;;;1654   
;;;1655   
;;;1656   
;;;1657   
;;;1658   }
0037fa  bd08              POP      {r3,pc}
;;;1659   
                          ENDP

                  SW1_init PROC
;;;86     
;;;87     void SW1_init(void){
0037fc  4834              LDR      r0,|L1.14544|
;;;88     
;;;89     #ifdef CMSIS
;;;90     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
0037fe  6b80              LDR      r0,[r0,#0x38]
003800  2101              MOVS     r1,#1
003802  02c9              LSLS     r1,r1,#11
003804  4308              ORRS     r0,r0,r1
003806  4932              LDR      r1,|L1.14544|
003808  6388              STR      r0,[r1,#0x38]
;;;91     	
;;;92     	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00380a  4832              LDR      r0,|L1.14548|
00380c  4932              LDR      r1,|L1.14552|
00380e  60c8              STR      r0,[r1,#0xc]
;;;93     	
;;;94     	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
003810  482f              LDR      r0,|L1.14544|
003812  6b80              LDR      r0,[r0,#0x38]
003814  2101              MOVS     r1,#1
003816  0309              LSLS     r1,r1,#12
003818  4308              ORRS     r0,r0,r1
00381a  492d              LDR      r1,|L1.14544|
00381c  6388              STR      r0,[r1,#0x38]
;;;95     	
;;;96     	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00381e  482d              LDR      r0,|L1.14548|
003820  1c40              ADDS     r0,r0,#1
003822  492e              LDR      r1,|L1.14556|
003824  6188              STR      r0,[r1,#0x18]
;;;97     	
;;;98     	PORTD_PCR0 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003826  1e40              SUBS     r0,r0,#1
003828  6008              STR      r0,[r1,#0]
;;;99     	
;;;100    	
;;;101    	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
00382a  201f              MOVS     r0,#0x1f
00382c  2800              CMP      r0,#0
00382e  db05              BLT      |L1.14396|
003830  06c2              LSLS     r2,r0,#27
003832  0ed2              LSRS     r2,r2,#27
003834  2101              MOVS     r1,#1
003836  4091              LSLS     r1,r1,r2
003838  4a29              LDR      r2,|L1.14560|
00383a  6011              STR      r1,[r2,#0]
                  |L1.14396|
00383c  bf00              NOP      
;;;102    #else
;;;103               
;;;104            enable_irq(31);
;;;105            set_irq_priority(31, 1);
;;;106            
;;;107            SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;108            
;;;109            PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;110            
;;;111    #endif
;;;112    }
00383e  4770              BX       lr
;;;113    
                          ENDP

                  LED_state PROC
;;;182    
;;;183    void LED_state(void){
003840  b500              PUSH     {lr}
;;;184    if(sleep_flag == 1)
003842  4828              LDR      r0,|L1.14564|
003844  6800              LDR      r0,[r0,#0]  ; sleep_flag
003846  2801              CMP      r0,#1
003848  d102              BNE      |L1.14416|
;;;185    {stateCount=99;
00384a  2063              MOVS     r0,#0x63
00384c  4926              LDR      r1,|L1.14568|
00384e  7008              STRB     r0,[r1,#0]
                  |L1.14416|
;;;186    }	
;;;187    			
;;;188    	switch(stateCount){
003850  4825              LDR      r0,|L1.14568|
003852  7800              LDRB     r0,[r0,#0]  ; stateCount
003854  0003              MOVS     r3,r0
003856  f7fffffe          BL       __ARM_common_switch8
00385a  0604              DCB      0x06,0x04
00385c  0c144b53          DCB      0x0c,0x14,0x4b,0x53
003860  5b63              DCB      0x5b,0x63
;;;189    
;;;190    		
;;;191                case 0:     //Red
;;;192                       REDBAT_ON;
003862  2040              MOVS     r0,#0x40
003864  4921              LDR      r1,|L1.14572|
003866  6088              STR      r0,[r1,#8]
;;;193                       GREENBAT_OFF;
003868  2080              MOVS     r0,#0x80
00386a  6048              STR      r0,[r1,#4]
;;;194                       BLUEBAT_OFF;
00386c  0040              LSLS     r0,r0,#1
00386e  6048              STR      r0,[r1,#4]
;;;195                       break;
003870  e061              B        |L1.14646|
;;;196    
;;;197                case 1:	//Yellow
;;;198    		               REDBAT_ON;
003872  2040              MOVS     r0,#0x40
003874  491d              LDR      r1,|L1.14572|
003876  6088              STR      r0,[r1,#8]
;;;199    		               GREENBAT_ON;
003878  2080              MOVS     r0,#0x80
00387a  6088              STR      r0,[r1,#8]
;;;200    		               BLUEBAT_OFF;
00387c  0040              LSLS     r0,r0,#1
00387e  6048              STR      r0,[r1,#4]
;;;201    		               break;
003880  e059              B        |L1.14646|
;;;202    				
;;;203                case 2:	//Green
;;;204    		               REDBAT_OFF;
003882  2040              MOVS     r0,#0x40
003884  4919              LDR      r1,|L1.14572|
003886  6048              STR      r0,[r1,#4]
;;;205    		               GREENBAT_ON;
003888  2080              MOVS     r0,#0x80
00388a  6088              STR      r0,[r1,#8]
;;;206    		               BLUEBAT_OFF;
00388c  0040              LSLS     r0,r0,#1
00388e  6048              STR      r0,[r1,#4]
;;;207    		               break;
003890  e051              B        |L1.14646|
003892  0000              DCW      0x0000
                  |L1.14484|
                          DCD      0x4006b000
                  |L1.14488|
                          DCD      ||.text||+0x8fc
                  |L1.14492|
                          DCD      uart_string_gsm
                  |L1.14496|
                          DCD      tout
                  |L1.14500|
                          DCD      data
                  |L1.14504|
                          DCD      k
                  |L1.14508|
                          DCD      time
                  |L1.14512|
                          DCD      l
                  |L1.14516|
                          DCD      uart_string_gps
                  |L1.14520|
                          DCD      ||.text||+0xd54
                  |L1.14524|
                          DCD      0x4006c000
                  |L1.14528|
                          DCD      port
                  |L1.14532|
                          DCD      ||ip||
                  |L1.14536|
                          DCD      at_
                  |L1.14540|
                          DCD      tmeout
                  |L1.14544|
                          DCD      0x40048000
                  |L1.14548|
                          DCD      0x000a0102
                  |L1.14552|
                          DCD      0x4004b000
                  |L1.14556|
                          DCD      0x4004c000
                  |L1.14560|
                          DCD      0xe000e100
                  |L1.14564|
                          DCD      sleep_flag
                  |L1.14568|
                          DCD      stateCount
                  |L1.14572|
                          DCD      0x400ff080
;;;208    				
;;;209                case 3:	//Blue
;;;210    		               REDBAT_OFF;
0038f0  2040              MOVS     r0,#0x40
0038f2  49fd              LDR      r1,|L1.15592|
0038f4  6048              STR      r0,[r1,#4]
;;;211    		               GREENBAT_OFF;
0038f6  2080              MOVS     r0,#0x80
0038f8  6048              STR      r0,[r1,#4]
;;;212    		               BLUEBAT_ON;
0038fa  0040              LSLS     r0,r0,#1
0038fc  6088              STR      r0,[r1,#8]
;;;213    		               break;
0038fe  e01a              B        |L1.14646|
;;;214    				
;;;215                case 4:	//Violet
;;;216    		               REDBAT_ON;
003900  2040              MOVS     r0,#0x40
003902  49f9              LDR      r1,|L1.15592|
003904  6088              STR      r0,[r1,#8]
;;;217    		               GREENBAT_OFF;
003906  2080              MOVS     r0,#0x80
003908  6048              STR      r0,[r1,#4]
;;;218    		               BLUEBAT_ON;
00390a  0040              LSLS     r0,r0,#1
00390c  6088              STR      r0,[r1,#8]
;;;219    		               break;
00390e  e012              B        |L1.14646|
;;;220    				
;;;221                case 5:	//White
;;;222    		              REDBAT_ON;
003910  2040              MOVS     r0,#0x40
003912  49f5              LDR      r1,|L1.15592|
003914  6088              STR      r0,[r1,#8]
;;;223    		              GREENBAT_ON;
003916  2080              MOVS     r0,#0x80
003918  6088              STR      r0,[r1,#8]
;;;224    		              BLUEBAT_ON;
00391a  0040              LSLS     r0,r0,#1
00391c  6088              STR      r0,[r1,#8]
;;;225    		              break;
00391e  e00a              B        |L1.14646|
;;;226    				
;;;227                default:	//Red
;;;228    							
;;;229    
;;;230    		              REDBAT_OFF;
003920  2040              MOVS     r0,#0x40
003922  49f1              LDR      r1,|L1.15592|
003924  6048              STR      r0,[r1,#4]
;;;231    		              GREENBAT_OFF;
003926  2080              MOVS     r0,#0x80
003928  6048              STR      r0,[r1,#4]
;;;232    		              BLUEBAT_OFF;
00392a  0040              LSLS     r0,r0,#1
00392c  6048              STR      r0,[r1,#4]
;;;233    		              stateCount = 0;	//Reset state counter
00392e  2000              MOVS     r0,#0
003930  49ee              LDR      r1,|L1.15596|
003932  7008              STRB     r0,[r1,#0]
;;;234    			      break;
003934  bf00              NOP      
                  |L1.14646|
003936  bf00              NOP                            ;195
;;;235    
;;;236        }
;;;237    	
;;;238    }
003938  bd00              POP      {pc}
;;;239    
                          ENDP

                  PORTD_IRQHandler PROC
;;;114    #ifdef CMSIS
;;;115    void PORTD_IRQHandler(void){
00393a  b510              PUSH     {r4,lr}
;;;116      
;;;117    	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
00393c  48ec              LDR      r0,|L1.15600|
00393e  6a00              LDR      r0,[r0,#0x20]
003940  2108              MOVS     r1,#8
003942  4008              ANDS     r0,r0,r1
003944  2800              CMP      r0,#0
003946  d014              BEQ      |L1.14706|
;;;118    	{
;;;119    		PORTC_ISFR |= (1 << SW_PIN);
003948  48e9              LDR      r0,|L1.15600|
00394a  6a00              LDR      r0,[r0,#0x20]
00394c  4308              ORRS     r0,r0,r1
00394e  49e8              LDR      r1,|L1.15600|
003950  6208              STR      r0,[r1,#0x20]
;;;120    		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
003952  48e8              LDR      r0,|L1.15604|
003954  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
003956  2101              MOVS     r1,#1
003958  4308              ORRS     r0,r0,r1
00395a  49e6              LDR      r1,|L1.15604|
00395c  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;121    ringflag=1;
00395e  2001              MOVS     r0,#1
003960  49e5              LDR      r1,|L1.15608|
003962  7008              STRB     r0,[r1,#0]
;;;122    send_SOS=1;	
003964  49e5              LDR      r1,|L1.15612|
003966  6008              STR      r0,[r1,#0]  ; send_SOS
;;;123    /**************ISR follows******/	
;;;124     stateCount++;
003968  48e0              LDR      r0,|L1.15596|
00396a  7800              LDRB     r0,[r0,#0]  ; stateCount
00396c  1c40              ADDS     r0,r0,#1
00396e  49df              LDR      r1,|L1.15596|
003970  7008              STRB     r0,[r1,#0]
                  |L1.14706|
;;;125    	}
;;;126    	
;;;127    	if(PORTD_ISFR & (1 << 0))		//Check for interrupt on PORTD Pin 6
003972  48e3              LDR      r0,|L1.15616|
003974  6a00              LDR      r0,[r0,#0x20]
003976  07c0              LSLS     r0,r0,#31
003978  0fc0              LSRS     r0,r0,#31
00397a  2800              CMP      r0,#0
00397c  d012              BEQ      |L1.14756|
;;;128    	{
;;;129    		PORTD_ISFR |= (1 << 0);
00397e  48e0              LDR      r0,|L1.15616|
003980  6a00              LDR      r0,[r0,#0x20]
003982  2101              MOVS     r1,#1
003984  4308              ORRS     r0,r0,r1
003986  49de              LDR      r1,|L1.15616|
003988  6208              STR      r0,[r1,#0x20]
;;;130    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
00398a  48da              LDR      r0,|L1.15604|
00398c  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
00398e  2101              MOVS     r1,#1
003990  4308              ORRS     r0,r0,r1
003992  49d8              LDR      r1,|L1.15604|
003994  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;131    	
;;;132    /**************ISR follows******/	
;;;133    // stateCount++;
;;;134    ringflag=1;
003996  2001              MOVS     r0,#1
003998  49d7              LDR      r1,|L1.15608|
00399a  7008              STRB     r0,[r1,#0]
;;;135    send_SOS=1;		
00399c  49d7              LDR      r1,|L1.15612|
00399e  6008              STR      r0,[r1,#0]  ; send_SOS
;;;136    
;;;137    	// wakeup and reset
;;;138    	
;;;139    clear();	
0039a0  f7fffffe          BL       clear
                  |L1.14756|
;;;140    	}	
;;;141    	
;;;142    	
;;;143    	
;;;144    	
;;;145    	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
0039a4  48d6              LDR      r0,|L1.15616|
0039a6  6a00              LDR      r0,[r0,#0x20]
0039a8  2140              MOVS     r1,#0x40
0039aa  4008              ANDS     r0,r0,r1
0039ac  2800              CMP      r0,#0
0039ae  d00f              BEQ      |L1.14800|
;;;146    	{
;;;147    		PORTD_ISFR |= (1 << 6);
0039b0  48d3              LDR      r0,|L1.15616|
0039b2  6a00              LDR      r0,[r0,#0x20]
0039b4  4308              ORRS     r0,r0,r1
0039b6  49d2              LDR      r1,|L1.15616|
0039b8  6208              STR      r0,[r1,#0x20]
;;;148    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
0039ba  48ce              LDR      r0,|L1.15604|
0039bc  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
0039be  2101              MOVS     r1,#1
0039c0  4308              ORRS     r0,r0,r1
0039c2  49cc              LDR      r1,|L1.15604|
0039c4  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;149    	
;;;150    /**************ISR follows******/	
;;;151    // stateCount++;
;;;152    		
;;;153    ringflag=1;
0039c6  2001              MOVS     r0,#1
0039c8  49cb              LDR      r1,|L1.15608|
0039ca  7008              STRB     r0,[r1,#0]
;;;154    	// wakeup and reset
;;;155    	
;;;156    clear();	
0039cc  f7fffffe          BL       clear
                  |L1.14800|
;;;157    	}
;;;158    	
;;;159    	LED_state();
0039d0  f7fffffe          BL       LED_state
;;;160    }
0039d4  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  PORTC_action PROC
;;;162    void PORTC_action(void){
0039d6  4770              BX       lr
;;;163    }
;;;164    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
0039d8  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
0039da  49ca              LDR      r1,|L1.15620|
0039dc  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
0039de  48ca              LDR      r0,|L1.15624|
0039e0  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK | SysTick_CSR_TICKINT_MASK;   
0039e2  2007              MOVS     r0,#7
0039e4  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
0039e6  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
0039e8  48c6              LDR      r0,|L1.15620|
;;;17     {	
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
0039ea  6900              LDR      r0,[r0,#0x10]
0039ec  0840              LSRS     r0,r0,#1
0039ee  0040              LSLS     r0,r0,#1
0039f0  49c4              LDR      r1,|L1.15620|
0039f2  6108              STR      r0,[r1,#0x10]
;;;19     }
0039f4  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
0039f6  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
0039f8  48c2              LDR      r0,|L1.15620|
0039fa  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
0039fc  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
0039fe  1b28              SUBS     r0,r5,r4
003a00  49c2              LDR      r1,|L1.15628|
003a02  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
003a04  4629              MOV      r1,r5
003a06  a0c2              ADR      r0,|L1.15632|
003a08  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
003a0c  4621              MOV      r1,r4
003a0e  a0c7              ADR      r0,|L1.15660|
003a10  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
003a14  48bd              LDR      r0,|L1.15628|
003a16  6801              LDR      r1,[r0,#0]  ; overhead
003a18  a0cb              ADR      r0,|L1.15688|
003a1a  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
003a1e  bd70              POP      {r4-r6,pc}
;;;13     #include "stdlib.h"
                          ENDP

                  delay2 PROC
;;;89     }
;;;90      void delay2(int delaytime)
003a20  e00c              B        |L1.14908|
                  |L1.14882|
;;;91     {
;;;92      while(delaytime--)
;;;93         {for(i=5000;i>0;i--);  // about 1 ms
003a22  49d4              LDR      r1,|L1.15732|
003a24  4ad4              LDR      r2,|L1.15736|
003a26  6011              STR      r1,[r2,#0]  ; i
003a28  e004              B        |L1.14900|
                  |L1.14890|
003a2a  49d3              LDR      r1,|L1.15736|
003a2c  6809              LDR      r1,[r1,#0]  ; i
003a2e  1e49              SUBS     r1,r1,#1
003a30  4ad1              LDR      r2,|L1.15736|
003a32  6011              STR      r1,[r2,#0]  ; i
                  |L1.14900|
003a34  49d0              LDR      r1,|L1.15736|
003a36  6809              LDR      r1,[r1,#0]  ; i
003a38  2900              CMP      r1,#0
003a3a  dcf6              BGT      |L1.14890|
                  |L1.14908|
003a3c  4601              MOV      r1,r0                 ;92
003a3e  1e40              SUBS     r0,r0,#1              ;92
003a40  2900              CMP      r1,#0                 ;92
003a42  d1ee              BNE      |L1.14882|
;;;94         }
;;;95     }
003a44  4770              BX       lr
;;;96             
                          ENDP

                  main PROC
;;;129    /********************************************************************/
;;;130    int main (void)
003a46  b51c              PUSH     {r2-r4,lr}
;;;131    {
;;;132    
;;;133    
;;;134    
;;;135    //int_erval=10;
;;;136    								memset(data,0,strlen(data));
003a48  48cc              LDR      r0,|L1.15740|
003a4a  f7fffffe          BL       strlen
003a4e  4601              MOV      r1,r0
003a50  9001              STR      r0,[sp,#4]
003a52  48ca              LDR      r0,|L1.15740|
003a54  f7fffffe          BL       __aeabi_memclr
;;;137    								memset(data2,0,strlen(data2));
003a58  48c9              LDR      r0,|L1.15744|
003a5a  f7fffffe          BL       strlen
003a5e  4601              MOV      r1,r0
003a60  9001              STR      r0,[sp,#4]
003a62  48c7              LDR      r0,|L1.15744|
003a64  f7fffffe          BL       __aeabi_memclr
;;;138    	memset(ip,0,strlen(ip));
003a68  48c6              LDR      r0,|L1.15748|
003a6a  f7fffffe          BL       strlen
003a6e  4601              MOV      r1,r0
003a70  9001              STR      r0,[sp,#4]
003a72  48c4              LDR      r0,|L1.15748|
003a74  f7fffffe          BL       __aeabi_memclr
;;;139    		memset(port,0,strlen(ip));
003a78  48c2              LDR      r0,|L1.15748|
003a7a  f7fffffe          BL       strlen
003a7e  4601              MOV      r1,r0
003a80  9001              STR      r0,[sp,#4]
003a82  48c1              LDR      r0,|L1.15752|
003a84  f7fffffe          BL       __aeabi_memclr
;;;140    
;;;141    	
;;;142    start();
003a88  f7fffffe          BL       start
;;;143    systick_init();	
003a8c  f7fffffe          BL       systick_init
;;;144    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;145    
;;;146    #endif
;;;147    
;;;148    int_erval=5;
003a90  2005              MOVS     r0,#5
003a92  49be              LDR      r1,|L1.15756|
003a94  6008              STR      r0,[r1,#0]  ; int_erval
;;;149    
;;;150    
;;;151    	LED_init();		//Initialize GPIO for LEDs
003a96  f7fffffe          BL       LED_init
;;;152    	RELAY_init();		//Initialize GPIO for LEDs
003a9a  bf00              NOP      
003a9c  48bc              LDR      r0,|L1.15760|
003a9e  6b80              LDR      r0,[r0,#0x38]
003aa0  2101              MOVS     r1,#1
003aa2  0249              LSLS     r1,r1,#9
003aa4  4308              ORRS     r0,r0,r1
003aa6  49ba              LDR      r1,|L1.15760|
003aa8  6388              STR      r0,[r1,#0x38]
003aaa  1588              ASRS     r0,r1,#22
003aac  49b9              LDR      r1,|L1.15764|
003aae  6048              STR      r0,[r1,#4]
003ab0  6088              STR      r0,[r1,#8]
003ab2  488d              LDR      r0,|L1.15592|
003ab4  3880              SUBS     r0,r0,#0x80
003ab6  6840              LDR      r0,[r0,#4]
003ab8  2106              MOVS     r1,#6
003aba  4308              ORRS     r0,r0,r1
003abc  498a              LDR      r1,|L1.15592|
003abe  3980              SUBS     r1,r1,#0x80
003ac0  6048              STR      r0,[r1,#4]
003ac2  4608              MOV      r0,r1
003ac4  6940              LDR      r0,[r0,#0x14]
003ac6  2106              MOVS     r1,#6
003ac8  4308              ORRS     r0,r0,r1
003aca  4987              LDR      r1,|L1.15592|
003acc  3980              SUBS     r1,r1,#0x80
003ace  6148              STR      r0,[r1,#0x14]
003ad0  2002              MOVS     r0,#2
003ad2  6088              STR      r0,[r1,#8]
003ad4  2004              MOVS     r0,#4
003ad6  6088              STR      r0,[r1,#8]
003ad8  bf00              NOP      
;;;153    	SW1_init();		//Initialize GPIO for SW1 w/ interrupt
003ada  f7fffffe          BL       SW1_init
;;;154    send_SOS=0;	
003ade  2000              MOVS     r0,#0
003ae0  4986              LDR      r1,|L1.15612|
003ae2  6008              STR      r0,[r1,#0]  ; send_SOS
;;;155    	//accel_init();
;;;156    	sleep_flag=0;
003ae4  49ac              LDR      r1,|L1.15768|
003ae6  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;157    	DTR_OFF;	
003ae8  2080              MOVS     r0,#0x80
003aea  497f              LDR      r1,|L1.15592|
003aec  3140              ADDS     r1,r1,#0x40
003aee  6088              STR      r0,[r1,#8]
;;;158    	lptmr_init(1000, 1);	
003af0  2101              MOVS     r1,#1
003af2  207d              MOVS     r0,#0x7d
003af4  00c0              LSLS     r0,r0,#3
003af6  f7fffffe          BL       lptmr_init
;;;159    	ADC_Init();
003afa  bf00              NOP      
003afc  48a4              LDR      r0,|L1.15760|
003afe  6bc0              LDR      r0,[r0,#0x3c]
003b00  2101              MOVS     r1,#1
003b02  06c9              LSLS     r1,r1,#27
003b04  4308              ORRS     r0,r0,r1
003b06  49a2              LDR      r1,|L1.15760|
003b08  63c8              STR      r0,[r1,#0x3c]
003b0a  202d              MOVS     r0,#0x2d
003b0c  49a3              LDR      r1,|L1.15772|
003b0e  6088              STR      r0,[r1,#8]
003b10  2000              MOVS     r0,#0
003b12  60c8              STR      r0,[r1,#0xc]
003b14  6208              STR      r0,[r1,#0x20]
003b16  4608              MOV      r0,r1
003b18  6a40              LDR      r0,[r0,#0x24]
003b1a  2108              MOVS     r1,#8
003b1c  4388              BICS     r0,r0,r1
003b1e  499f              LDR      r1,|L1.15772|
003b20  6248              STR      r0,[r1,#0x24]
003b22  bf00              NOP      
;;;160    	memset(at_,0,strlen(at_));
003b24  489e              LDR      r0,|L1.15776|
003b26  f7fffffe          BL       strlen
003b2a  4601              MOV      r1,r0
003b2c  9001              STR      r0,[sp,#4]
003b2e  489c              LDR      r0,|L1.15776|
003b30  f7fffffe          BL       __aeabi_memclr
;;;161    	i=0;
003b34  2000              MOVS     r0,#0
003b36  4990              LDR      r1,|L1.15736|
003b38  6008              STR      r0,[r1,#0]  ; i
;;;162    
;;;163    	
;;;164    	
;;;165    	
;;;166    	
;;;167    //C0
;;;168    
;;;169    //SCB->AIRCR = 0x05fA0000;
;;;170    
;;;171    	int_erval=0;
003b3a  4994              LDR      r1,|L1.15756|
003b3c  6008              STR      r0,[r1,#0]  ; int_erval
;;;172    
;;;173    		uart_putchar(UART1_BASE_PTR,0xA);
003b3e  210a              MOVS     r1,#0xa
003b40  4898              LDR      r0,|L1.15780|
003b42  f7fffffe          BL       uart_putchar
;;;174    		uart_putchar(UART1_BASE_PTR,0x1A);			
003b46  211a              MOVS     r1,#0x1a
003b48  4896              LDR      r0,|L1.15780|
003b4a  f7fffffe          BL       uart_putchar
;;;175    	
;;;176    send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",2);  
003b4e  2002              MOVS     r0,#2
003b50  4b95              LDR      r3,|L1.15784|
003b52  4a96              LDR      r2,|L1.15788|
003b54  4611              MOV      r1,r2
003b56  3114              ADDS     r1,r1,#0x14
003b58  9000              STR      r0,[sp,#0]
003b5a  a095              ADR      r0,|L1.15792|
003b5c  f7fffffe          BL       send_GSM
;;;177     delay(100); 
003b60  2064              MOVS     r0,#0x64
003b62  f7fffffe          BL       delay
;;;178    
;;;179    clear();delay(100);
003b66  f7fffffe          BL       clear
003b6a  2064              MOVS     r0,#0x64
003b6c  f7fffffe          BL       delay
;;;180    GPS_COLLECT();
003b70  f7fffffe          BL       GPS_COLLECT
;;;181    strcat(data,"CH'1'\n");	
003b74  a190              ADR      r1,|L1.15800|
003b76  4881              LDR      r0,|L1.15740|
003b78  f7fffffe          BL       strcat
;;;182    
;;;183    
;;;184    int_erval=5;
003b7c  2005              MOVS     r0,#5
003b7e  4983              LDR      r1,|L1.15756|
003b80  6008              STR      r0,[r1,#0]  ; int_erval
;;;185    
;;;186    //if(!(strstr(uart_string_gsm, "OK")|| strstr(uart_string_gsm, "ERROR")))
;;;187    //{HardFault_Handler();}
;;;188    ignread();
003b82  f7fffffe          BL       ignread
;;;189    
;;;190    //	saveapn();
;;;191    	
;;;192    readapn();
003b86  f7fffffe          BL       readapn
;;;193    
;;;194    //HardFault_Handler();
;;;195    
;;;196    //RESET_ON;
;;;197    
;;;198    
;;;199    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
003b8a  2004              MOVS     r0,#4
003b8c  4b87              LDR      r3,|L1.15788|
003b8e  3b78              SUBS     r3,r3,#0x78
003b90  4a86              LDR      r2,|L1.15788|
003b92  a18b              ADR      r1,|L1.15808|
003b94  9000              STR      r0,[sp,#0]
003b96  4610              MOV      r0,r2
003b98  3020              ADDS     r0,r0,#0x20
003b9a  f7fffffe          BL       send_GSM
;;;200    clear();	
003b9e  f7fffffe          BL       clear
;;;201    //delay(10);
;;;202    
;;;203    send_GSM("\r\nAT+CFUN=1\r\n", "Ready", "NOT INSERTED" , "ERROR",7);	
003ba2  2007              MOVS     r0,#7
003ba4  4b81              LDR      r3,|L1.15788|
003ba6  3b78              SUBS     r3,r3,#0x78
003ba8  a286              ADR      r2,|L1.15812|
003baa  a18a              ADR      r1,|L1.15828|
003bac  9000              STR      r0,[sp,#0]
003bae  4618              MOV      r0,r3
003bb0  30bc              ADDS     r0,r0,#0xbc
003bb2  f7fffffe          BL       send_GSM
;;;204    
;;;205    	
;;;206    GPS_COLLECT();
003bb6  f7fffffe          BL       GPS_COLLECT
;;;207    strcat(data,"CH\n");	
003bba  497c              LDR      r1,|L1.15788|
003bbc  3930              SUBS     r1,r1,#0x30
003bbe  486f              LDR      r0,|L1.15740|
003bc0  f7fffffe          BL       strcat
;;;208    
;;;209    //GPS_COLLECT();
;;;210    //  strcat(data,"CH\n");	
;;;211    //	
;;;212    
;;;213    GPS_COLLECT();
003bc4  f7fffffe          BL       GPS_COLLECT
;;;214    strcat(data,"CH\n");	
003bc8  4978              LDR      r1,|L1.15788|
003bca  3930              SUBS     r1,r1,#0x30
003bcc  486b              LDR      r0,|L1.15740|
003bce  f7fffffe          BL       strcat
;;;215    
;;;216    
;;;217    stateCount=3;
003bd2  2003              MOVS     r0,#3
003bd4  4945              LDR      r1,|L1.15596|
003bd6  7008              STRB     r0,[r1,#0]
;;;218    LED_state();
003bd8  f7fffffe          BL       LED_state
;;;219    
;;;220    
;;;221    
;;;222    
;;;223    
;;;224    	
;;;225    //send_modem2("$PMTK225,0*2B");
;;;226    //while(!strstr(uart_string_gsm,"OK\r\n"));
;;;227    
;;;228    //bat_cind();
;;;229    //delay(1000);
;;;230    
;;;231    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003bdc  487f              LDR      r0,|L1.15836|
003bde  6800              LDR      r0,[r0,#0]  ; tmeout
003be0  4b71              LDR      r3,|L1.15784|
003be2  4a72              LDR      r2,|L1.15788|
003be4  4611              MOV      r1,r2
003be6  3114              ADDS     r1,r1,#0x14
003be8  9000              STR      r0,[sp,#0]
003bea  a07d              ADR      r0,|L1.15840|
003bec  f7fffffe          BL       send_GSM
;;;232    //delay(10);
;;;233    
;;;234    send_GSM("\n\nATS0=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003bf0  487a              LDR      r0,|L1.15836|
003bf2  6800              LDR      r0,[r0,#0]  ; tmeout
003bf4  4b6c              LDR      r3,|L1.15784|
003bf6  4a6d              LDR      r2,|L1.15788|
003bf8  4611              MOV      r1,r2
003bfa  3114              ADDS     r1,r1,#0x14
003bfc  9000              STR      r0,[sp,#0]
003bfe  a07b              ADR      r0,|L1.15852|
003c00  f7fffffe          BL       send_GSM
;;;235    
;;;236    send_GSM("\n\nAT&F\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003c04  4875              LDR      r0,|L1.15836|
003c06  6800              LDR      r0,[r0,#0]  ; tmeout
003c08  4b67              LDR      r3,|L1.15784|
003c0a  4a68              LDR      r2,|L1.15788|
003c0c  4611              MOV      r1,r2
003c0e  3114              ADDS     r1,r1,#0x14
003c10  9000              STR      r0,[sp,#0]
003c12  a079              ADR      r0,|L1.15864|
003c14  f7fffffe          BL       send_GSM
;;;237    
;;;238    
;;;239    send_GSM("\n\nAT&D\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003c18  4870              LDR      r0,|L1.15836|
003c1a  6800              LDR      r0,[r0,#0]  ; tmeout
003c1c  4b62              LDR      r3,|L1.15784|
003c1e  4a63              LDR      r2,|L1.15788|
003c20  4611              MOV      r1,r2
003c22  3114              ADDS     r1,r1,#0x14
003c24  9000              STR      r0,[sp,#0]
003c26  a077              ADR      r0,|L1.15876|
003c28  f7fffffe          BL       send_GSM
;;;240    
;;;241    
;;;242    send_GSM("\n\nAT+IFC=0,0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c2c  486b              LDR      r0,|L1.15836|
003c2e  6800              LDR      r0,[r0,#0]  ; tmeout
003c30  4b5d              LDR      r3,|L1.15784|
003c32  4a5e              LDR      r2,|L1.15788|
003c34  4611              MOV      r1,r2
003c36  3114              ADDS     r1,r1,#0x14
003c38  9000              STR      r0,[sp,#0]
003c3a  a075              ADR      r0,|L1.15888|
003c3c  f7fffffe          BL       send_GSM
;;;243    
;;;244    
;;;245    send_GSM("\n\nAT+CIPQSEND?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c40  4866              LDR      r0,|L1.15836|
003c42  6800              LDR      r0,[r0,#0]  ; tmeout
003c44  4b58              LDR      r3,|L1.15784|
003c46  4a59              LDR      r2,|L1.15788|
003c48  4611              MOV      r1,r2
003c4a  3114              ADDS     r1,r1,#0x14
003c4c  9000              STR      r0,[sp,#0]
003c4e  a074              ADR      r0,|L1.15904|
003c50  f7fffffe          BL       send_GSM
;;;246    
;;;247    send_GSM("\n\nAT+CIPQSEND=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c54  4861              LDR      r0,|L1.15836|
003c56  6800              LDR      r0,[r0,#0]  ; tmeout
003c58  4b53              LDR      r3,|L1.15784|
003c5a  4a54              LDR      r2,|L1.15788|
003c5c  4611              MOV      r1,r2
003c5e  3114              ADDS     r1,r1,#0x14
003c60  9000              STR      r0,[sp,#0]
003c62  a074              ADR      r0,|L1.15924|
003c64  f7fffffe          BL       send_GSM
;;;248    
;;;249    //delay(10);
;;;250    
;;;251    
;;;252    
;;;253    
;;;254    //delay(10);
;;;255    send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c68  485c              LDR      r0,|L1.15836|
003c6a  6800              LDR      r0,[r0,#0]  ; tmeout
003c6c  4b4e              LDR      r3,|L1.15784|
003c6e  4a4f              LDR      r2,|L1.15788|
003c70  4611              MOV      r1,r2
003c72  3114              ADDS     r1,r1,#0x14
003c74  9000              STR      r0,[sp,#0]
003c76  a074              ADR      r0,|L1.15944|
003c78  f7fffffe          BL       send_GSM
;;;256    
;;;257    
;;;258    
;;;259    
;;;260    
;;;261    
;;;262    
;;;263    
;;;264    send_GSM("\n\nAT+SD2PCM=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c7c  4857              LDR      r0,|L1.15836|
003c7e  6800              LDR      r0,[r0,#0]  ; tmeout
003c80  4b49              LDR      r3,|L1.15784|
003c82  4a4a              LDR      r2,|L1.15788|
003c84  4611              MOV      r1,r2
003c86  3114              ADDS     r1,r1,#0x14
003c88  9000              STR      r0,[sp,#0]
003c8a  a074              ADR      r0,|L1.15964|
003c8c  f7fffffe          BL       send_GSM
;;;265    //delay(10);	
;;;266    
;;;267    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c90  4852              LDR      r0,|L1.15836|
003c92  6800              LDR      r0,[r0,#0]  ; tmeout
003c94  4b44              LDR      r3,|L1.15784|
003c96  4a45              LDR      r2,|L1.15788|
003c98  4611              MOV      r1,r2
003c9a  3114              ADDS     r1,r1,#0x14
003c9c  9000              STR      r0,[sp,#0]
003c9e  a050              ADR      r0,|L1.15840|
003ca0  f7fffffe          BL       send_GSM
;;;268    delay(10);	
003ca4  200a              MOVS     r0,#0xa
003ca6  f7fffffe          BL       delay
;;;269    send_GSM("\n\nAT+FSDRIVE=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003caa  484c              LDR      r0,|L1.15836|
003cac  6800              LDR      r0,[r0,#0]  ; tmeout
003cae  4b3e              LDR      r3,|L1.15784|
003cb0  4a3e              LDR      r2,|L1.15788|
003cb2  4611              MOV      r1,r2
003cb4  3114              ADDS     r1,r1,#0x14
003cb6  9000              STR      r0,[sp,#0]
003cb8  a06c              ADR      r0,|L1.15980|
003cba  f7fffffe          BL       send_GSM
;;;270    clear();
003cbe  f7fffffe          BL       clear
;;;271    delay(10);	
003cc2  200a              MOVS     r0,#0xa
003cc4  f7fffffe          BL       delay
;;;272    //;	
;;;273    //send_GSM("\n\nAT+FSCREATE=D:\\LOG.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;274    
;;;275    	GPS_COLLECT();
003cc8  f7fffffe          BL       GPS_COLLECT
;;;276      strcat(data,"CH\n");	
003ccc  4937              LDR      r1,|L1.15788|
003cce  3930              SUBS     r1,r1,#0x30
003cd0  482a              LDR      r0,|L1.15740|
003cd2  f7fffffe          BL       strcat
;;;277    
;;;278    send_GSM("\n\nAT+FSMEM\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003cd6  4841              LDR      r0,|L1.15836|
003cd8  6800              LDR      r0,[r0,#0]  ; tmeout
003cda  4b33              LDR      r3,|L1.15784|
003cdc  4a33              LDR      r2,|L1.15788|
003cde  4611              MOV      r1,r2
003ce0  3114              ADDS     r1,r1,#0x14
003ce2  9000              STR      r0,[sp,#0]
003ce4  e0cc              B        |L1.16000|
003ce6  0000              DCW      0x0000
                  |L1.15592|
                          DCD      0x400ff080
                  |L1.15596|
                          DCD      stateCount
                  |L1.15600|
                          DCD      0x4004b080
                  |L1.15604|
                          DCD      gu32PortStatus
                  |L1.15608|
                          DCD      ringflag
                  |L1.15612|
                          DCD      send_SOS
                  |L1.15616|
                          DCD      0x4004c080
                  |L1.15620|
                          DCD      0xe000e000
                  |L1.15624|
                          DCD      0x00009c3f
                  |L1.15628|
                          DCD      overhead
                  |L1.15632|
003d10  73797374          DCB      "systick start value: 0x%x\n\r",0
003d14  69636b20
003d18  73746172
003d1c  74207661
003d20  6c75653a
003d24  20307825
003d28  780a0d00
                  |L1.15660|
003d2c  73797374          DCB      "systick end value: 0x%x\n\r",0
003d30  69636b20
003d34  656e6420
003d38  76616c75
003d3c  653a2030
003d40  7825780a
003d44  0d00    
003d46  00                DCB      0
003d47  00                DCB      0
                  |L1.15688|
003d48  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
003d4c  69636b20
003d50  63757272
003d54  656e7420
003d58  76616c75
003d5c  65207265
003d60  6164206f
003d64  76657268
003d68  6561643a
003d6c  20307825
003d70  780a0d00
                  |L1.15732|
                          DCD      0x00001388
                  |L1.15736|
                          DCD      i
                  |L1.15740|
                          DCD      data
                  |L1.15744|
                          DCD      data2
                  |L1.15748|
                          DCD      ||ip||
                  |L1.15752|
                          DCD      port
                  |L1.15756|
                          DCD      int_erval
                  |L1.15760|
                          DCD      0x40048000
                  |L1.15764|
                          DCD      0x40049000
                  |L1.15768|
                          DCD      sleep_flag
                  |L1.15772|
                          DCD      0x4003b000
                  |L1.15776|
                          DCD      at_
                  |L1.15780|
                          DCD      0x4006b000
                  |L1.15784|
                          DCD      ||.text||+0xd54
                  |L1.15788|
                          DCD      ||.text||+0x8e8
                  |L1.15792|
003db0  0a0a4154          DCB      "\n\nAT\r\n",0
003db4  0d0a00  
003db7  00                DCB      0
                  |L1.15800|
003db8  43482731          DCB      "CH'1'\n",0
003dbc  270a00  
003dbf  00                DCB      0
                  |L1.15808|
003dc0  4f4b00            DCB      "OK",0
003dc3  00                DCB      0
                  |L1.15812|
003dc4  4e4f5420          DCB      "NOT INSERTED",0
003dc8  494e5345
003dcc  52544544
003dd0  00      
003dd1  00                DCB      0
003dd2  00                DCB      0
003dd3  00                DCB      0
                  |L1.15828|
003dd4  52656164          DCB      "Ready",0
003dd8  7900    
003dda  00                DCB      0
003ddb  00                DCB      0
                  |L1.15836|
                          DCD      tmeout
                  |L1.15840|
003de0  0a0a4154          DCB      "\n\nAT&W\r\n",0
003de4  26570d0a
003de8  00      
003de9  00                DCB      0
003dea  00                DCB      0
003deb  00                DCB      0
                  |L1.15852|
003dec  0a0a4154          DCB      "\n\nATS0=2\r\n",0
003df0  53303d32
003df4  0d0a00  
003df7  00                DCB      0
                  |L1.15864|
003df8  0a0a4154          DCB      "\n\nAT&F\r\n",0
003dfc  26460d0a
003e00  00      
003e01  00                DCB      0
003e02  00                DCB      0
003e03  00                DCB      0
                  |L1.15876|
003e04  0a0a4154          DCB      "\n\nAT&D\r\n",0
003e08  26440d0a
003e0c  00      
003e0d  00                DCB      0
003e0e  00                DCB      0
003e0f  00                DCB      0
                  |L1.15888|
003e10  0a0a4154          DCB      "\n\nAT+IFC=0,0\r\n",0
003e14  2b494643
003e18  3d302c30
003e1c  0d0a00  
003e1f  00                DCB      0
                  |L1.15904|
003e20  0a0a4154          DCB      "\n\nAT+CIPQSEND?\r\n",0
003e24  2b434950
003e28  5153454e
003e2c  443f0d0a
003e30  00      
003e31  00                DCB      0
003e32  00                DCB      0
003e33  00                DCB      0
                  |L1.15924|
003e34  0a0a4154          DCB      "\n\nAT+CIPQSEND=0\r\n",0
003e38  2b434950
003e3c  5153454e
003e40  443d300d
003e44  0a00    
003e46  00                DCB      0
003e47  00                DCB      0
                  |L1.15944|
003e48  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
003e4c  2b435042
003e50  533d2253
003e54  4d220d0a
003e58  00      
003e59  00                DCB      0
003e5a  00                DCB      0
003e5b  00                DCB      0
                  |L1.15964|
003e5c  0a0a4154          DCB      "\n\nAT+SD2PCM=0\r\n",0
003e60  2b534432
003e64  50434d3d
003e68  300d0a00
                  |L1.15980|
003e6c  0a0a4154          DCB      "\n\nAT+FSDRIVE=1\r\n",0
003e70  2b465344
003e74  52495645
003e78  3d310d0a
003e7c  00      
003e7d  00                DCB      0
003e7e  00                DCB      0
003e7f  00                DCB      0
                  |L1.16000|
003e80  a0ef              ADR      r0,|L1.16960|
003e82  f7fffffe          BL       send_GSM
;;;279    delay(100);	
003e86  2064              MOVS     r0,#0x64
003e88  f7fffffe          BL       delay
;;;280    
;;;281    if(strstr(uart_string_gsm,"D:")){
003e8c  a1f0              ADR      r1,|L1.16976|
003e8e  48f1              LDR      r0,|L1.16980|
003e90  f7fffffe          BL       strstr
003e94  2800              CMP      r0,#0
003e96  d020              BEQ      |L1.16090|
;;;282    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003e98  48ef              LDR      r0,|L1.16984|
003e9a  6800              LDR      r0,[r0,#0]  ; tmeout
003e9c  4bef              LDR      r3,|L1.16988|
003e9e  4af0              LDR      r2,|L1.16992|
003ea0  4611              MOV      r1,r2
003ea2  3114              ADDS     r1,r1,#0x14
003ea4  9000              STR      r0,[sp,#0]
003ea6  a0ef              ADR      r0,|L1.16996|
003ea8  f7fffffe          BL       send_GSM
;;;283    	
;;;284    memset(at_,0,100);
003eac  2164              MOVS     r1,#0x64
003eae  48f7              LDR      r0,|L1.17036|
003eb0  f7fffffe          BL       __aeabi_memclr
;;;285    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003eb4  2202              MOVS     r2,#2
003eb6  a1f6              ADR      r1,|L1.17040|
003eb8  48f4              LDR      r0,|L1.17036|
003eba  f7fffffe          BL       __2sprintf
;;;286    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003ebe  200a              MOVS     r0,#0xa
003ec0  4be6              LDR      r3,|L1.16988|
003ec2  4ae7              LDR      r2,|L1.16992|
003ec4  a1fd              ADR      r1,|L1.17084|
003ec6  9000              STR      r0,[sp,#0]
003ec8  48f0              LDR      r0,|L1.17036|
003eca  f7fffffe          BL       send_GSM
;;;287    	
;;;288    clear();
003ece  f7fffffe          BL       clear
;;;289    send_modem("D:");	
003ed2  a0df              ADR      r0,|L1.16976|
003ed4  f7fffffe          BL       send_modem
003ed8  e01f              B        |L1.16154|
                  |L1.16090|
;;;290    	
;;;291    }
;;;292    else{
;;;293    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003eda  48df              LDR      r0,|L1.16984|
003edc  6800              LDR      r0,[r0,#0]  ; tmeout
003ede  4bdf              LDR      r3,|L1.16988|
003ee0  4adf              LDR      r2,|L1.16992|
003ee2  4611              MOV      r1,r2
003ee4  3114              ADDS     r1,r1,#0x14
003ee6  9000              STR      r0,[sp,#0]
003ee8  a0de              ADR      r0,|L1.16996|
003eea  f7fffffe          BL       send_GSM
;;;294    	
;;;295    memset(at_,0,100);
003eee  2164              MOVS     r1,#0x64
003ef0  48e6              LDR      r0,|L1.17036|
003ef2  f7fffffe          BL       __aeabi_memclr
;;;296    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003ef6  2202              MOVS     r2,#2
003ef8  a1e5              ADR      r1,|L1.17040|
003efa  48e4              LDR      r0,|L1.17036|
003efc  f7fffffe          BL       __2sprintf
;;;297    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003f00  200a              MOVS     r0,#0xa
003f02  4bd6              LDR      r3,|L1.16988|
003f04  4ad6              LDR      r2,|L1.16992|
003f06  a1ed              ADR      r1,|L1.17084|
003f08  9000              STR      r0,[sp,#0]
003f0a  48e0              LDR      r0,|L1.17036|
003f0c  f7fffffe          BL       send_GSM
;;;298    	
;;;299    clear();
003f10  f7fffffe          BL       clear
;;;300    send_modem("C:");		
003f14  a0ea              ADR      r0,|L1.17088|
003f16  f7fffffe          BL       send_modem
                  |L1.16154|
;;;301    	
;;;302    }	
;;;303    
;;;304    delay(100);
003f1a  2064              MOVS     r0,#0x64
003f1c  f7fffffe          BL       delay
;;;305    
;;;306    //delay(10);
;;;307    
;;;308    send_GSM("\n\nATS0=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f20  48cd              LDR      r0,|L1.16984|
003f22  6800              LDR      r0,[r0,#0]  ; tmeout
003f24  4bcd              LDR      r3,|L1.16988|
003f26  4ace              LDR      r2,|L1.16992|
003f28  4611              MOV      r1,r2
003f2a  3114              ADDS     r1,r1,#0x14
003f2c  9000              STR      r0,[sp,#0]
003f2e  a0e5              ADR      r0,|L1.17092|
003f30  f7fffffe          BL       send_GSM
;;;309    
;;;310    
;;;311    send_GSM("\n\nAT+CSCLK=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f34  48c8              LDR      r0,|L1.16984|
003f36  6800              LDR      r0,[r0,#0]  ; tmeout
003f38  4bc8              LDR      r3,|L1.16988|
003f3a  4ac9              LDR      r2,|L1.16992|
003f3c  4611              MOV      r1,r2
003f3e  3114              ADDS     r1,r1,#0x14
003f40  9000              STR      r0,[sp,#0]
003f42  a0e3              ADR      r0,|L1.17104|
003f44  f7fffffe          BL       send_GSM
;;;312    
;;;313    
;;;314    send_GSM("\r\n\r\nAT+CMGD=1,4\r\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003f48  48c3              LDR      r0,|L1.16984|
003f4a  6800              LDR      r0,[r0,#0]  ; tmeout
003f4c  4bc3              LDR      r3,|L1.16988|
003f4e  4ac4              LDR      r2,|L1.16992|
003f50  4611              MOV      r1,r2
003f52  3114              ADDS     r1,r1,#0x14
003f54  9000              STR      r0,[sp,#0]
003f56  a0e2              ADR      r0,|L1.17120|
003f58  f7fffffe          BL       send_GSM
;;;315    
;;;316    
;;;317    //send_GSM("\n\nAT+CPBW=5,\"0\",129,\"OWNER5\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;318    
;;;319    
;;;320    //send_GSM("\n\nAT+CPBW=6,\"0\",129,\"OWNER6\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;321    
;;;322    ignread();
003f5c  f7fffffe          BL       ignread
;;;323    readapn();
003f60  f7fffffe          BL       readapn
;;;324    readcursor();
003f64  f7fffffe          BL       readcursor
;;;325    
;;;326    read_interval();
003f68  f7fffffe          BL       read_interval
;;;327    send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f6c  48ba              LDR      r0,|L1.16984|
003f6e  6800              LDR      r0,[r0,#0]  ; tmeout
003f70  4bba              LDR      r3,|L1.16988|
003f72  4abb              LDR      r2,|L1.16992|
003f74  4611              MOV      r1,r2
003f76  3114              ADDS     r1,r1,#0x14
003f78  9000              STR      r0,[sp,#0]
003f7a  a0df              ADR      r0,|L1.17144|
003f7c  f7fffffe          BL       send_GSM
;;;328    //delay(10);	
;;;329    
;;;330    send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003f80  48b5              LDR      r0,|L1.16984|
003f82  6800              LDR      r0,[r0,#0]  ; tmeout
003f84  4bb5              LDR      r3,|L1.16988|
003f86  4ab6              LDR      r2,|L1.16992|
003f88  4611              MOV      r1,r2
003f8a  3114              ADDS     r1,r1,#0x14
003f8c  9000              STR      r0,[sp,#0]
003f8e  a0de              ADR      r0,|L1.17160|
003f90  f7fffffe          BL       send_GSM
;;;331    							memset(at_,0,100);
003f94  2164              MOVS     r1,#0x64
003f96  48bd              LDR      r0,|L1.17036|
003f98  f7fffffe          BL       __aeabi_memclr
;;;332    							memset(num_o,0,15);
003f9c  210f              MOVS     r1,#0xf
003f9e  48de              LDR      r0,|L1.17176|
003fa0  f7fffffe          BL       __aeabi_memclr
;;;333    							parse_g(uart_string_gsm, 1, 2, '\"', '\"', num_o);
003fa4  48dc              LDR      r0,|L1.17176|
003fa6  2122              MOVS     r1,#0x22
003fa8  460b              MOV      r3,r1
003faa  2202              MOVS     r2,#2
003fac  9100              STR      r1,[sp,#0]
003fae  9001              STR      r0,[sp,#4]
003fb0  2101              MOVS     r1,#1
003fb2  48a8              LDR      r0,|L1.16980|
003fb4  f7fffffe          BL       parse_g
;;;334    							sprintf(at_, "\r\nAT+CSCA=\"%s\"\r\n", num_o);
003fb8  4ad7              LDR      r2,|L1.17176|
003fba  a1d8              ADR      r1,|L1.17180|
003fbc  48b3              LDR      r0,|L1.17036|
003fbe  f7fffffe          BL       __2sprintf
;;;335    							send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
003fc2  48a5              LDR      r0,|L1.16984|
003fc4  6800              LDR      r0,[r0,#0]  ; tmeout
003fc6  4ba5              LDR      r3,|L1.16988|
003fc8  4aa5              LDR      r2,|L1.16992|
003fca  4611              MOV      r1,r2
003fcc  3114              ADDS     r1,r1,#0x14
003fce  9000              STR      r0,[sp,#0]
003fd0  48ae              LDR      r0,|L1.17036|
003fd2  f7fffffe          BL       send_GSM
;;;336    
;;;337    
;;;338    
;;;339    read_ip_port();
003fd6  f7fffffe          BL       read_ip_port
;;;340    		memset(at_,0,100);
003fda  2164              MOVS     r1,#0x64
003fdc  48ab              LDR      r0,|L1.17036|
003fde  f7fffffe          BL       __aeabi_memclr
;;;341    		memset(drive,0,5);
003fe2  2105              MOVS     r1,#5
003fe4  48d2              LDR      r0,|L1.17200|
003fe6  f7fffffe          BL       __aeabi_memclr4
;;;342    		sprintf(at_, "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n");		
003fea  a1d2              ADR      r1,|L1.17204|
003fec  48a7              LDR      r0,|L1.17036|
003fee  f7fffffe          BL       __2sprintf
;;;343    		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
003ff2  200a              MOVS     r0,#0xa
003ff4  4b99              LDR      r3,|L1.16988|
003ff6  4a9a              LDR      r2,|L1.16992|
003ff8  a1d9              ADR      r1,|L1.17248|
003ffa  9000              STR      r0,[sp,#0]
003ffc  48a3              LDR      r0,|L1.17036|
003ffe  f7fffffe          BL       send_GSM
;;;344    		parse_g(uart_string_gsm, 1,3, '\n', '\r',drive);
004002  48cb              LDR      r0,|L1.17200|
004004  210d              MOVS     r1,#0xd
004006  230a              MOVS     r3,#0xa
004008  2203              MOVS     r2,#3
00400a  9100              STR      r1,[sp,#0]
00400c  9001              STR      r0,[sp,#4]
00400e  2101              MOVS     r1,#1
004010  4890              LDR      r0,|L1.16980|
004012  f7fffffe          BL       parse_g
;;;345    	
;;;346    
;;;347    msg_sim800(); 
004016  f7fffffe          BL       msg_sim800
;;;348    
;;;349    //setting interval 4
;;;350    
;;;351    temp=int_erval;				
00401a  48d2              LDR      r0,|L1.17252|
00401c  6800              LDR      r0,[r0,#0]  ; int_erval
00401e  49d2              LDR      r1,|L1.17256|
004020  6008              STR      r0,[r1,#0]  ; temp
;;;352    int_erval=4;
004022  2004              MOVS     r0,#4
004024  49cf              LDR      r1,|L1.17252|
004026  6008              STR      r0,[r1,#0]  ; int_erval
;;;353    
;;;354    
;;;355    
;;;356    								//GPS_COLLECT();
;;;357    								send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",5);	
004028  2005              MOVS     r0,#5
00402a  4b8c              LDR      r3,|L1.16988|
00402c  4a8c              LDR      r2,|L1.16992|
00402e  a1cc              ADR      r1,|L1.17248|
004030  9000              STR      r0,[sp,#0]
004032  4618              MOV      r0,r3
004034  300c              ADDS     r0,r0,#0xc
004036  f7fffffe          BL       send_GSM
;;;358    								//delay(20);		
;;;359    								GPS_COLLECT();
00403a  f7fffffe          BL       GPS_COLLECT
;;;360    								strcat(data,"CH\n");	
00403e  4988              LDR      r1,|L1.16992|
004040  3930              SUBS     r1,r1,#0x30
004042  48ca              LDR      r0,|L1.17260|
004044  f7fffffe          BL       strcat
;;;361    
;;;362    
;;;363    msg_sim800(); 
004048  f7fffffe          BL       msg_sim800
;;;364    
;;;365    	memset(at_,0,100);
00404c  2164              MOVS     r1,#0x64
00404e  488f              LDR      r0,|L1.17036|
004050  f7fffffe          BL       __aeabi_memclr
;;;366    		sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
004054  4ac6              LDR      r2,|L1.17264|
004056  4981              LDR      r1,|L1.16988|
004058  3120              ADDS     r1,r1,#0x20
00405a  488c              LDR      r0,|L1.17036|
00405c  f7fffffe          BL       __2sprintf
;;;367    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
004060  487d              LDR      r0,|L1.16984|
004062  6800              LDR      r0,[r0,#0]  ; tmeout
004064  4b7d              LDR      r3,|L1.16988|
004066  4a7e              LDR      r2,|L1.16992|
004068  a1bd              ADR      r1,|L1.17248|
00406a  9000              STR      r0,[sp,#0]
00406c  4887              LDR      r0,|L1.17036|
00406e  f7fffffe          BL       send_GSM
;;;368    								//delay(20);
;;;369    			//					GPS_COLLECT();
;;;370    
;;;371    msg_sim800(); 
004072  f7fffffe          BL       msg_sim800
;;;372    
;;;373    	
;;;374    								send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
004076  2005              MOVS     r0,#5
004078  4b79              LDR      r3,|L1.16992|
00407a  3b5c              SUBS     r3,r3,#0x5c
00407c  4a78              LDR      r2,|L1.16992|
00407e  a1b8              ADR      r1,|L1.17248|
004080  9000              STR      r0,[sp,#0]
004082  4876              LDR      r0,|L1.16988|
004084  3038              ADDS     r0,r0,#0x38
004086  f7fffffe          BL       send_GSM
;;;375    								//delay(20);
;;;376    								GPS_COLLECT();
00408a  f7fffffe          BL       GPS_COLLECT
;;;377    								strcat(data,"CH\n");	
00408e  4974              LDR      r1,|L1.16992|
004090  3930              SUBS     r1,r1,#0x30
004092  48b6              LDR      r0,|L1.17260|
004094  f7fffffe          BL       strcat
;;;378    
;;;379    
;;;380    
;;;381    								GPS_COLLECT();
004098  f7fffffe          BL       GPS_COLLECT
;;;382    								strcat(data,"CH\n");	
00409c  4970              LDR      r1,|L1.16992|
00409e  3930              SUBS     r1,r1,#0x30
0040a0  48b2              LDR      r0,|L1.17260|
0040a2  f7fffffe          BL       strcat
;;;383    
;;;384    msg_sim800(); 
0040a6  f7fffffe          BL       msg_sim800
;;;385    
;;;386    								
;;;387    								clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0040aa  f7fffffe          BL       clear
0040ae  486b              LDR      r0,|L1.16988|
0040b0  3048              ADDS     r0,r0,#0x48
0040b2  f7fffffe          BL       send_modem
0040b6  f7fffffe          BL       clear
;;;388    								delay(20);
0040ba  2014              MOVS     r0,#0x14
0040bc  f7fffffe          BL       delay
;;;389    	
;;;390    
;;;391    msg_sim800(); 
0040c0  f7fffffe          BL       msg_sim800
;;;392    
;;;393    		
;;;394    								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0040c4  4bab              LDR      r3,|L1.17268|
0040c6  4aac              LDR      r2,|L1.17272|
0040c8  4964              LDR      r1,|L1.16988|
0040ca  3160              ADDS     r1,r1,#0x60
0040cc  486f              LDR      r0,|L1.17036|
0040ce  f7fffffe          BL       __2sprintf
;;;395    								send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
0040d2  4861              LDR      r0,|L1.16984|
0040d4  6800              LDR      r0,[r0,#0]  ; tmeout
0040d6  4b62              LDR      r3,|L1.16992|
0040d8  3b78              SUBS     r3,r3,#0x78
0040da  4a61              LDR      r2,|L1.16992|
0040dc  495f              LDR      r1,|L1.16988|
0040de  3180              ADDS     r1,r1,#0x80
0040e0  9000              STR      r0,[sp,#0]
0040e2  486a              LDR      r0,|L1.17036|
0040e4  f7fffffe          BL       send_GSM
;;;396    								clear();
0040e8  f7fffffe          BL       clear
;;;397    
;;;398    
;;;399    		int_erval=temp;
0040ec  489e              LDR      r0,|L1.17256|
0040ee  6800              LDR      r0,[r0,#0]  ; temp
0040f0  499c              LDR      r1,|L1.17252|
0040f2  6008              STR      r0,[r1,#0]  ; int_erval
;;;400    //resetting it to its value
;;;401    
;;;402    								send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
0040f4  4858              LDR      r0,|L1.16984|
0040f6  6800              LDR      r0,[r0,#0]  ; tmeout
0040f8  4b58              LDR      r3,|L1.16988|
0040fa  3388              ADDS     r3,r3,#0x88
0040fc  4a58              LDR      r2,|L1.16992|
0040fe  3a78              SUBS     r2,r2,#0x78
004100  a16e              ADR      r1,|L1.17084|
004102  9000              STR      r0,[sp,#0]
004104  4618              MOV      r0,r3
004106  3010              ADDS     r0,r0,#0x10
004108  f7fffffe          BL       send_GSM
;;;403    
;;;404    
;;;405    memset(stcond1,0,strlen(stcond1));	
00410c  489b              LDR      r0,|L1.17276|
00410e  6800              LDR      r0,[r0,#0]  ; stcond1
004110  f7fffffe          BL       strlen
004114  4601              MOV      r1,r0
004116  9001              STR      r0,[sp,#4]
004118  4898              LDR      r0,|L1.17276|
00411a  6800              LDR      r0,[r0,#0]  ; stcond1
00411c  f7fffffe          BL       __aeabi_memclr
;;;406    memset(con1d,0,strlen(con1d));	
004120  4897              LDR      r0,|L1.17280|
004122  6800              LDR      r0,[r0,#0]  ; con1d
004124  f7fffffe          BL       strlen
004128  4601              MOV      r1,r0
00412a  9001              STR      r0,[sp,#4]
00412c  4894              LDR      r0,|L1.17280|
00412e  6800              LDR      r0,[r0,#0]  ; con1d
004130  f7fffffe          BL       __aeabi_memclr
;;;407    	
;;;408    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;409    						
;;;410    								cond=mystrstr(uart_string_gsm,'>');
004134  213e              MOVS     r1,#0x3e
004136  4847              LDR      r0,|L1.16980|
004138  f7fffffe          BL       mystrstr
00413c  4991              LDR      r1,|L1.17284|
00413e  7008              STRB     r0,[r1,#0]
;;;411    								if(cond)	
004140  4608              MOV      r0,r1
004142  7800              LDRB     r0,[r0,#0]  ; cond
004144  2800              CMP      r0,#0
004146  d077              BEQ      |L1.16952|
;;;412    								{
;;;413    									
;;;414    									clear();
004148  f7fffffe          BL       clear
;;;415    									memset(uart_string_gsm,0,5000);
00414c  498e              LDR      r1,|L1.17288|
00414e  4841              LDR      r0,|L1.16980|
004150  f7fffffe          BL       __aeabi_memclr
;;;416    									strcat(data,"\n");
004154  a16b              ADR      r1,|L1.17156|
004156  4885              LDR      r0,|L1.17260|
004158  f7fffffe          BL       strcat
;;;417    									len=strlen(data);
00415c  4883              LDR      r0,|L1.17260|
00415e  f7fffffe          BL       strlen
004162  498a              LDR      r1,|L1.17292|
004164  6008              STR      r0,[r1,#0]  ; len
;;;418    									tout=0;
004166  2000              MOVS     r0,#0
004168  4989              LDR      r1,|L1.17296|
00416a  6008              STR      r0,[r1,#0]  ; tout
;;;419    									k2=0;
00416c  4989              LDR      r1,|L1.17300|
00416e  6008              STR      r0,[r1,#0]  ; k2
;;;420    									for(k=0;k<len;k++)
004170  4989              LDR      r1,|L1.17304|
004172  6008              STR      r0,[r1,#0]  ; k
004174  e00d              B        |L1.16786|
                  |L1.16758|
;;;421    									{
;;;422    										uart_putchar(UART1_BASE_PTR, data[k]);
004176  487d              LDR      r0,|L1.17260|
004178  4987              LDR      r1,|L1.17304|
00417a  6809              LDR      r1,[r1,#0]  ; k
00417c  5c40              LDRB     r0,[r0,r1]
00417e  4601              MOV      r1,r0
004180  9001              STR      r0,[sp,#4]
004182  4886              LDR      r0,|L1.17308|
004184  f7fffffe          BL       uart_putchar
004188  4883              LDR      r0,|L1.17304|
00418a  6800              LDR      r0,[r0,#0]            ;420  ; k
00418c  1c40              ADDS     r0,r0,#1              ;420
00418e  4982              LDR      r1,|L1.17304|
004190  6008              STR      r0,[r1,#0]            ;420  ; k
                  |L1.16786|
004192  4881              LDR      r0,|L1.17304|
004194  6800              LDR      r0,[r0,#0]            ;420  ; k
004196  497d              LDR      r1,|L1.17292|
004198  6809              LDR      r1,[r1,#0]            ;420  ; len
00419a  4288              CMP      r0,r1                 ;420
00419c  dbeb              BLT      |L1.16758|
;;;423    									}uart_putchar(UART1_BASE_PTR, 0x1A);
00419e  211a              MOVS     r1,#0x1a
0041a0  487e              LDR      r0,|L1.17308|
0041a2  f7fffffe          BL       uart_putchar
;;;424    									do
0041a6  bf00              NOP      
                  |L1.16808|
;;;425    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0041a8  497d              LDR      r1,|L1.17312|
0041aa  482a              LDR      r0,|L1.16980|
0041ac  f7fffffe          BL       strstr
0041b0  4972              LDR      r1,|L1.17276|
0041b2  6008              STR      r0,[r1,#0]  ; stcond1
;;;426    																	stcond2=strstr(uart_string_gsm, "ERROR");
0041b4  492a              LDR      r1,|L1.16992|
0041b6  3978              SUBS     r1,r1,#0x78
0041b8  4826              LDR      r0,|L1.16980|
0041ba  f7fffffe          BL       strstr
0041be  4979              LDR      r1,|L1.17316|
0041c0  6008              STR      r0,[r1,#0]  ; stcond2
;;;427    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0041c2  4926              LDR      r1,|L1.16988|
0041c4  3190              ADDS     r1,r1,#0x90
0041c6  4823              LDR      r0,|L1.16980|
0041c8  f7fffffe          BL       strstr
0041cc  4976              LDR      r1,|L1.17320|
0041ce  6008              STR      r0,[r1,#0]  ; stcond3
;;;428    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0041d0  4923              LDR      r1,|L1.16992|
0041d2  395c              SUBS     r1,r1,#0x5c
0041d4  481f              LDR      r0,|L1.16980|
0041d6  f7fffffe          BL       strstr
0041da  4974              LDR      r1,|L1.17324|
0041dc  6008              STR      r0,[r1,#0]  ; stcond4
;;;429    																	
;;;430    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0041de  4871              LDR      r0,|L1.17316|
0041e0  6800              LDR      r0,[r0,#0]  ; stcond2
0041e2  2800              CMP      r0,#0
0041e4  d10f              BNE      |L1.16902|
0041e6  4870              LDR      r0,|L1.17320|
0041e8  6800              LDR      r0,[r0,#0]  ; stcond3
0041ea  2800              CMP      r0,#0
0041ec  d10b              BNE      |L1.16902|
0041ee  4608              MOV      r0,r1
0041f0  6800              LDR      r0,[r0,#0]  ; stcond4
0041f2  2800              CMP      r0,#0
0041f4  d107              BNE      |L1.16902|
0041f6  4861              LDR      r0,|L1.17276|
0041f8  6800              LDR      r0,[r0,#0]  ; stcond1
0041fa  2800              CMP      r0,#0
0041fc  d103              BNE      |L1.16902|
0041fe  4864              LDR      r0,|L1.17296|
004200  6800              LDR      r0,[r0,#0]  ; tout
004202  2808              CMP      r0,#8
004204  ddd0              BLE      |L1.16808|
                  |L1.16902|
;;;431    																//delay(10);clear();
;;;432    														uart_putchar(UART1_BASE_PTR,0x1A);
004206  211a              MOVS     r1,#0x1a
004208  4864              LDR      r0,|L1.17308|
00420a  f7fffffe          BL       uart_putchar
;;;433    												//delay(10);
;;;434    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00420e  211a              MOVS     r1,#0x1a
004210  4862              LDR      r0,|L1.17308|
004212  f7fffffe          BL       uart_putchar
004216  211a              MOVS     r1,#0x1a
004218  4860              LDR      r0,|L1.17308|
00421a  f7fffffe          BL       uart_putchar
00421e  211a              MOVS     r1,#0x1a
004220  485e              LDR      r0,|L1.17308|
004222  f7fffffe          BL       uart_putchar
;;;435    						
;;;436    									
;;;437    delay(50);
004226  2032              MOVS     r0,#0x32
004228  f7fffffe          BL       delay
;;;438    stcond1=strstr(uart_string_gsm,"SEND OK");								
00422c  495c              LDR      r1,|L1.17312|
00422e  4809              LDR      r0,|L1.16980|
004230  f7fffffe          BL       strstr
004234  4951              LDR      r1,|L1.17276|
004236  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.16952|
;;;439    								}
;;;440    //else{
;;;441    //log_it();
;;;442    //}
;;;443    
;;;444    
;;;445    if(!(stcond1) == 1 )// if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
004238  4850              LDR      r0,|L1.17276|
00423a  6800              LDR      r0,[r0,#0]  ; stcond1
00423c  2800              CMP      r0,#0
00423e  e0b7              B        |L1.17328|
                  |L1.16960|
004240  0a0a4154          DCB      "\n\nAT+FSMEM\r\n",0
004244  2b46534d
004248  454d0d0a
00424c  00      
00424d  00                DCB      0
00424e  00                DCB      0
00424f  00                DCB      0
                  |L1.16976|
004250  443a00            DCB      "D:",0
004253  00                DCB      0
                  |L1.16980|
                          DCD      uart_string_gsm
                  |L1.16984|
                          DCD      tmeout
                  |L1.16988|
                          DCD      ||.text||+0xd54
                  |L1.16992|
                          DCD      ||.text||+0x8e8
                  |L1.16996|
004264  0a0a4154          DCB      "\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n",0
004268  2b465343
00426c  52454154
004270  453d433a
004274  5c4c4f47
004278  47494e47
00427c  5f445249
004280  56452e54
004284  58540d0a
004288  00      
004289  00                DCB      0
00428a  00                DCB      0
00428b  00                DCB      0
                  |L1.17036|
                          DCD      at_
                  |L1.17040|
004290  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",0
004294  2b465357
004298  52495445
00429c  3d433a5c
0042a0  4c4f4747
0042a4  494e475f
0042a8  44524956
0042ac  452e5458
0042b0  542c302c
0042b4  25642c31
0042b8  300d0a00
                  |L1.17084|
0042bc  3e00              DCB      ">",0
0042be  00                DCB      0
0042bf  00                DCB      0
                  |L1.17088|
0042c0  433a00            DCB      "C:",0
0042c3  00                DCB      0
                  |L1.17092|
0042c4  0a0a4154          DCB      "\n\nATS0=1\r\n",0
0042c8  53303d31
0042cc  0d0a00  
0042cf  00                DCB      0
                  |L1.17104|
0042d0  0a0a4154          DCB      "\n\nAT+CSCLK=1\r\n",0
0042d4  2b435343
0042d8  4c4b3d31
0042dc  0d0a00  
0042df  00                DCB      0
                  |L1.17120|
0042e0  0d0a0d0a          DCB      "\r\n\r\nAT+CMGD=1,4\r\n\n\n\n",0
0042e4  41542b43
0042e8  4d47443d
0042ec  312c340d
0042f0  0a0a0a0a
0042f4  00      
0042f5  00                DCB      0
0042f6  00                DCB      0
0042f7  00                DCB      0
                  |L1.17144|
0042f8  0a0a4154          DCB      "\n\nAT+CMGF=1\n"
0042fc  2b434d47
004300  463d310a
                  |L1.17156|
004304  0a00              DCB      "\n",0
004306  00                DCB      0
004307  00                DCB      0
                  |L1.17160|
004308  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
00430c  2b435343
004310  413f0d0a
004314  00      
004315  00                DCB      0
004316  00                DCB      0
004317  00                DCB      0
                  |L1.17176|
                          DCD      num_o
                  |L1.17180|
00431c  0d0a4154          DCB      "\r\nAT+CSCA=""%s""\r\n",0
004320  2b435343
004324  413d2225
004328  73220d0a
00432c  00      
00432d  00                DCB      0
00432e  00                DCB      0
00432f  00                DCB      0
                  |L1.17200|
                          DCD      drive
                  |L1.17204|
004334  0a41542b          DCB      "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n",0
004338  46535245
00433c  41443d43
004340  3a5c4c4f
004344  4747494e
004348  475f4452
00434c  4956452e
004350  5458542c
004354  302c3130
004358  302c310d
00435c  0a00    
00435e  00                DCB      0
00435f  00                DCB      0
                  |L1.17248|
004360  4f4b00            DCB      "OK",0
004363  00                DCB      0
                  |L1.17252|
                          DCD      int_erval
                  |L1.17256|
                          DCD      temp
                  |L1.17260|
                          DCD      data
                  |L1.17264|
                          DCD      apn
                  |L1.17268|
                          DCD      port
                  |L1.17272|
                          DCD      ||ip||
                  |L1.17276|
                          DCD      stcond1
                  |L1.17280|
                          DCD      con1d
                  |L1.17284|
                          DCD      cond
                  |L1.17288|
                          DCD      0x00001388
                  |L1.17292|
                          DCD      len
                  |L1.17296|
                          DCD      tout
                  |L1.17300|
                          DCD      ||k2||
                  |L1.17304|
                          DCD      k
                  |L1.17308|
                          DCD      0x4006b000
                  |L1.17312|
                          DCD      ||.text||+0x474
                  |L1.17316|
                          DCD      stcond2
                  |L1.17320|
                          DCD      stcond3
                  |L1.17324|
                          DCD      stcond4
                  |L1.17328|
0043b0  d101              BNE      |L1.17334|
0043b2  2001              MOVS     r0,#1
0043b4  e000              B        |L1.17336|
                  |L1.17334|
0043b6  2000              MOVS     r0,#0
                  |L1.17336|
0043b8  2801              CMP      r0,#1
0043ba  d17d              BNE      |L1.17592|
;;;446    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0043bc  211a              MOVS     r1,#0x1a
0043be  48fe              LDR      r0,|L1.18360|
0043c0  f7fffffe          BL       uart_putchar
0043c4  f7fffffe          BL       clear
0043c8  200a              MOVS     r0,#0xa
0043ca  f7fffffe          BL       delay
;;;447    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0043ce  211a              MOVS     r1,#0x1a
0043d0  48f9              LDR      r0,|L1.18360|
0043d2  f7fffffe          BL       uart_putchar
0043d6  f7fffffe          BL       clear
0043da  200a              MOVS     r0,#0xa
0043dc  f7fffffe          BL       delay
;;;448    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0043e0  211a              MOVS     r1,#0x1a
0043e2  48f5              LDR      r0,|L1.18360|
0043e4  f7fffffe          BL       uart_putchar
0043e8  f7fffffe          BL       clear
0043ec  200a              MOVS     r0,#0xa
0043ee  f7fffffe          BL       delay
;;;449    
;;;450    									delay(100);
0043f2  2064              MOVS     r0,#0x64
0043f4  f7fffffe          BL       delay
;;;451    									clear();//memset(uart_string_gsm,0,5000);
0043f8  f7fffffe          BL       clear
;;;452    
;;;453    									memset(at_,0,100);
0043fc  2164              MOVS     r1,#0x64
0043fe  48ef              LDR      r0,|L1.18364|
004400  f7fffffe          BL       __aeabi_memclr
;;;454    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004404  48ee              LDR      r0,|L1.18368|
004406  f7fffffe          BL       strlen
00440a  1c40              ADDS     r0,r0,#1
00440c  4603              MOV      r3,r0
00440e  4aed              LDR      r2,|L1.18372|
004410  49ed              LDR      r1,|L1.18376|
004412  9001              STR      r0,[sp,#4]
004414  48e9              LDR      r0,|L1.18364|
004416  f7fffffe          BL       __2sprintf
;;;455    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00441a  2005              MOVS     r0,#5
00441c  4bea              LDR      r3,|L1.18376|
00441e  3b54              SUBS     r3,r3,#0x54
004420  461a              MOV      r2,r3
004422  3278              ADDS     r2,r2,#0x78
004424  a1e9              ADR      r1,|L1.18380|
004426  9000              STR      r0,[sp,#0]
004428  48e4              LDR      r0,|L1.18364|
00442a  f7fffffe          BL       send_SD
;;;456    if(strstr(uart_string_gsm,"ERROR")){
00442e  49e6              LDR      r1,|L1.18376|
004430  3954              SUBS     r1,r1,#0x54
004432  48e7              LDR      r0,|L1.18384|
004434  f7fffffe          BL       strstr
004438  2800              CMP      r0,#0
00443a  d004              BEQ      |L1.17478|
;;;457    	drive[0]='C';drive[1]=':';
00443c  2043              MOVS     r0,#0x43
00443e  49e1              LDR      r1,|L1.18372|
004440  7008              STRB     r0,[r1,#0]
004442  203a              MOVS     r0,#0x3a
004444  7048              STRB     r0,[r1,#1]
                  |L1.17478|
;;;458    }	
;;;459    									clear();	
004446  f7fffffe          BL       clear
;;;460    									k2=0;									//string array counter for uart 1
00444a  2000              MOVS     r0,#0
00444c  49e1              LDR      r1,|L1.18388|
00444e  6008              STR      r0,[r1,#0]  ; k2
;;;461    									tout=0;	
004450  49e1              LDR      r1,|L1.18392|
004452  6008              STR      r0,[r1,#0]  ; tout
;;;462    									for(k=0;k<strlen(data);k++)
004454  49e1              LDR      r1,|L1.18396|
004456  6008              STR      r0,[r1,#0]  ; k
004458  e00d              B        |L1.17526|
                  |L1.17498|
;;;463    									{
;;;464    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00445a  48d9              LDR      r0,|L1.18368|
00445c  49df              LDR      r1,|L1.18396|
00445e  6809              LDR      r1,[r1,#0]  ; k
004460  5c40              LDRB     r0,[r0,r1]
004462  4601              MOV      r1,r0
004464  9001              STR      r0,[sp,#4]
004466  48d4              LDR      r0,|L1.18360|
004468  f7fffffe          BL       uart_putchar
00446c  48db              LDR      r0,|L1.18396|
00446e  6800              LDR      r0,[r0,#0]            ;462  ; k
004470  1c40              ADDS     r0,r0,#1              ;462
004472  49da              LDR      r1,|L1.18396|
004474  6008              STR      r0,[r1,#0]            ;462  ; k
                  |L1.17526|
004476  48d2              LDR      r0,|L1.18368|
004478  f7fffffe          BL       strlen
00447c  49d7              LDR      r1,|L1.18396|
00447e  6809              LDR      r1,[r1,#0]            ;462  ; k
004480  4288              CMP      r0,r1                 ;462
004482  d8ea              BHI      |L1.17498|
;;;465    									}	
;;;466    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004484  210a              MOVS     r1,#0xa
004486  48cc              LDR      r0,|L1.18360|
004488  f7fffffe          BL       uart_putchar
00448c  210a              MOVS     r1,#0xa
00448e  48ca              LDR      r0,|L1.18360|
004490  f7fffffe          BL       uart_putchar
004494  210a              MOVS     r1,#0xa
004496  48c8              LDR      r0,|L1.18360|
004498  f7fffffe          BL       uart_putchar
00449c  210a              MOVS     r1,#0xa
00449e  48c6              LDR      r0,|L1.18360|
0044a0  f7fffffe          BL       uart_putchar
0044a4  210a              MOVS     r1,#0xa
0044a6  48c4              LDR      r0,|L1.18360|
0044a8  f7fffffe          BL       uart_putchar
0044ac  210a              MOVS     r1,#0xa
0044ae  48c2              LDR      r0,|L1.18360|
0044b0  f7fffffe          BL       uart_putchar
0044b4  210a              MOVS     r1,#0xa
0044b6  e000              B        |L1.17594|
                  |L1.17592|
0044b8  e2f8              B        |L1.19116|
                  |L1.17594|
0044ba  48bf              LDR      r0,|L1.18360|
0044bc  f7fffffe          BL       uart_putchar
0044c0  210a              MOVS     r1,#0xa
0044c2  48bd              LDR      r0,|L1.18360|
0044c4  f7fffffe          BL       uart_putchar
0044c8  210a              MOVS     r1,#0xa
0044ca  48bb              LDR      r0,|L1.18360|
0044cc  f7fffffe          BL       uart_putchar
0044d0  210a              MOVS     r1,#0xa
0044d2  48b9              LDR      r0,|L1.18360|
0044d4  f7fffffe          BL       uart_putchar
0044d8  210a              MOVS     r1,#0xa
0044da  48b7              LDR      r0,|L1.18360|
0044dc  f7fffffe          BL       uart_putchar
0044e0  210a              MOVS     r1,#0xa
0044e2  48b5              LDR      r0,|L1.18360|
0044e4  f7fffffe          BL       uart_putchar
0044e8  210a              MOVS     r1,#0xa
0044ea  48b3              LDR      r0,|L1.18360|
0044ec  f7fffffe          BL       uart_putchar
0044f0  210a              MOVS     r1,#0xa
0044f2  48b1              LDR      r0,|L1.18360|
0044f4  f7fffffe          BL       uart_putchar
0044f8  210a              MOVS     r1,#0xa
0044fa  48af              LDR      r0,|L1.18360|
0044fc  f7fffffe          BL       uart_putchar
004500  210a              MOVS     r1,#0xa
004502  48ad              LDR      r0,|L1.18360|
004504  f7fffffe          BL       uart_putchar
004508  210a              MOVS     r1,#0xa
00450a  48ab              LDR      r0,|L1.18360|
00450c  f7fffffe          BL       uart_putchar
004510  210a              MOVS     r1,#0xa
004512  48a9              LDR      r0,|L1.18360|
004514  f7fffffe          BL       uart_putchar
004518  210a              MOVS     r1,#0xa
00451a  48a7              LDR      r0,|L1.18360|
00451c  f7fffffe          BL       uart_putchar
004520  210a              MOVS     r1,#0xa
004522  48a5              LDR      r0,|L1.18360|
004524  f7fffffe          BL       uart_putchar
004528  210a              MOVS     r1,#0xa
00452a  48a3              LDR      r0,|L1.18360|
00452c  f7fffffe          BL       uart_putchar
004530  210a              MOVS     r1,#0xa
004532  48a1              LDR      r0,|L1.18360|
004534  f7fffffe          BL       uart_putchar
004538  210a              MOVS     r1,#0xa
00453a  489f              LDR      r0,|L1.18360|
00453c  f7fffffe          BL       uart_putchar
004540  210a              MOVS     r1,#0xa
004542  489d              LDR      r0,|L1.18360|
004544  f7fffffe          BL       uart_putchar
004548  210a              MOVS     r1,#0xa
00454a  489b              LDR      r0,|L1.18360|
00454c  f7fffffe          BL       uart_putchar
004550  210a              MOVS     r1,#0xa
004552  4899              LDR      r0,|L1.18360|
004554  f7fffffe          BL       uart_putchar
004558  210a              MOVS     r1,#0xa
00455a  4897              LDR      r0,|L1.18360|
00455c  f7fffffe          BL       uart_putchar
004560  210a              MOVS     r1,#0xa
004562  4895              LDR      r0,|L1.18360|
004564  f7fffffe          BL       uart_putchar
004568  210a              MOVS     r1,#0xa
00456a  4893              LDR      r0,|L1.18360|
00456c  f7fffffe          BL       uart_putchar
004570  210a              MOVS     r1,#0xa
004572  4891              LDR      r0,|L1.18360|
004574  f7fffffe          BL       uart_putchar
004578  210a              MOVS     r1,#0xa
00457a  488f              LDR      r0,|L1.18360|
00457c  f7fffffe          BL       uart_putchar
004580  210a              MOVS     r1,#0xa
004582  488d              LDR      r0,|L1.18360|
004584  f7fffffe          BL       uart_putchar
004588  210a              MOVS     r1,#0xa
00458a  488b              LDR      r0,|L1.18360|
00458c  f7fffffe          BL       uart_putchar
004590  210a              MOVS     r1,#0xa
004592  4889              LDR      r0,|L1.18360|
004594  f7fffffe          BL       uart_putchar
004598  210a              MOVS     r1,#0xa
00459a  4887              LDR      r0,|L1.18360|
00459c  f7fffffe          BL       uart_putchar
0045a0  210a              MOVS     r1,#0xa
0045a2  4885              LDR      r0,|L1.18360|
0045a4  f7fffffe          BL       uart_putchar
0045a8  210a              MOVS     r1,#0xa
0045aa  4883              LDR      r0,|L1.18360|
0045ac  f7fffffe          BL       uart_putchar
0045b0  210a              MOVS     r1,#0xa
0045b2  4881              LDR      r0,|L1.18360|
0045b4  f7fffffe          BL       uart_putchar
0045b8  210a              MOVS     r1,#0xa
0045ba  487f              LDR      r0,|L1.18360|
0045bc  f7fffffe          BL       uart_putchar
0045c0  210a              MOVS     r1,#0xa
0045c2  487d              LDR      r0,|L1.18360|
0045c4  f7fffffe          BL       uart_putchar
0045c8  210a              MOVS     r1,#0xa
0045ca  487b              LDR      r0,|L1.18360|
0045cc  f7fffffe          BL       uart_putchar
0045d0  210a              MOVS     r1,#0xa
0045d2  4879              LDR      r0,|L1.18360|
0045d4  f7fffffe          BL       uart_putchar
0045d8  210a              MOVS     r1,#0xa
0045da  4877              LDR      r0,|L1.18360|
0045dc  f7fffffe          BL       uart_putchar
0045e0  210a              MOVS     r1,#0xa
0045e2  4875              LDR      r0,|L1.18360|
0045e4  f7fffffe          BL       uart_putchar
0045e8  210a              MOVS     r1,#0xa
0045ea  4873              LDR      r0,|L1.18360|
0045ec  f7fffffe          BL       uart_putchar
0045f0  210a              MOVS     r1,#0xa
0045f2  4871              LDR      r0,|L1.18360|
0045f4  f7fffffe          BL       uart_putchar
0045f8  210a              MOVS     r1,#0xa
0045fa  486f              LDR      r0,|L1.18360|
0045fc  f7fffffe          BL       uart_putchar
004600  210a              MOVS     r1,#0xa
004602  486d              LDR      r0,|L1.18360|
004604  f7fffffe          BL       uart_putchar
004608  210a              MOVS     r1,#0xa
00460a  486b              LDR      r0,|L1.18360|
00460c  f7fffffe          BL       uart_putchar
004610  210a              MOVS     r1,#0xa
004612  4869              LDR      r0,|L1.18360|
004614  f7fffffe          BL       uart_putchar
004618  210a              MOVS     r1,#0xa
00461a  4867              LDR      r0,|L1.18360|
00461c  f7fffffe          BL       uart_putchar
004620  210a              MOVS     r1,#0xa
004622  4865              LDR      r0,|L1.18360|
004624  f7fffffe          BL       uart_putchar
004628  210a              MOVS     r1,#0xa
00462a  4863              LDR      r0,|L1.18360|
00462c  f7fffffe          BL       uart_putchar
004630  210a              MOVS     r1,#0xa
004632  4861              LDR      r0,|L1.18360|
004634  f7fffffe          BL       uart_putchar
004638  210a              MOVS     r1,#0xa
00463a  485f              LDR      r0,|L1.18360|
00463c  f7fffffe          BL       uart_putchar
004640  210a              MOVS     r1,#0xa
004642  485d              LDR      r0,|L1.18360|
004644  f7fffffe          BL       uart_putchar
004648  210a              MOVS     r1,#0xa
00464a  485b              LDR      r0,|L1.18360|
00464c  f7fffffe          BL       uart_putchar
;;;467    									//memset(data,0,1000);
;;;468    									//timer counts to wait for characters in uart 1 									
;;;469    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004650  bf00              NOP      
                  |L1.18002|
004652  495d              LDR      r1,|L1.18376|
004654  3138              ADDS     r1,r1,#0x38
004656  485e              LDR      r0,|L1.18384|
004658  f7fffffe          BL       strstr
00465c  2800              CMP      r0,#0
00465e  d10a              BNE      |L1.18038|
004660  4959              LDR      r1,|L1.18376|
004662  3954              SUBS     r1,r1,#0x54
004664  485a              LDR      r0,|L1.18384|
004666  f7fffffe          BL       strstr
00466a  2800              CMP      r0,#0
00466c  d103              BNE      |L1.18038|
00466e  485a              LDR      r0,|L1.18392|
004670  6800              LDR      r0,[r0,#0]  ; tout
004672  2805              CMP      r0,#5
004674  dded              BLE      |L1.18002|
                  |L1.18038|
;;;470    									{	}
;;;471    									clear();
004676  f7fffffe          BL       clear
;;;472    									memset(data,0,strlen(data));
00467a  4851              LDR      r0,|L1.18368|
00467c  f7fffffe          BL       strlen
004680  4601              MOV      r1,r0
004682  9001              STR      r0,[sp,#4]
004684  484e              LDR      r0,|L1.18368|
004686  f7fffffe          BL       __aeabi_memclr
;;;473    									memset(data,0,strlen(data));	
00468a  484d              LDR      r0,|L1.18368|
00468c  f7fffffe          BL       strlen
004690  4601              MOV      r1,r0
004692  9001              STR      r0,[sp,#4]
004694  484a              LDR      r0,|L1.18368|
004696  f7fffffe          BL       __aeabi_memclr
;;;474    									GPS_COLLECT();
00469a  f7fffffe          BL       GPS_COLLECT
;;;475    									strcat(data,"CH\n");	
00469e  494a              LDR      r1,|L1.18376|
0046a0  390c              SUBS     r1,r1,#0xc
0046a2  4847              LDR      r0,|L1.18368|
0046a4  f7fffffe          BL       strcat
;;;476    
;;;477    
;;;478    									clear();	
0046a8  f7fffffe          BL       clear
;;;479    //*************************************tcp_initialization();*********************
;;;480    //setting interval 4
;;;481    temp=int_erval;				
0046ac  484c              LDR      r0,|L1.18400|
0046ae  6800              LDR      r0,[r0,#0]  ; int_erval
0046b0  494c              LDR      r1,|L1.18404|
0046b2  6008              STR      r0,[r1,#0]  ; temp
;;;482    int_erval=4;
0046b4  2004              MOVS     r0,#4
0046b6  494a              LDR      r1,|L1.18400|
0046b8  6008              STR      r0,[r1,#0]  ; int_erval
;;;483    
;;;484    	
;;;485    msg_sim800(); 
0046ba  f7fffffe          BL       msg_sim800
;;;486    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0046be  2005              MOVS     r0,#5
0046c0  4b41              LDR      r3,|L1.18376|
0046c2  3b54              SUBS     r3,r3,#0x54
0046c4  461a              MOV      r2,r3
0046c6  3278              ADDS     r2,r2,#0x78
0046c8  a147              ADR      r1,|L1.18408|
0046ca  9000              STR      r0,[sp,#0]
0046cc  4610              MOV      r0,r2
0046ce  3020              ADDS     r0,r0,#0x20
0046d0  f7fffffe          BL       send_GSM
;;;487    delay(100);
0046d4  2064              MOVS     r0,#0x64
0046d6  f7fffffe          BL       delay
;;;488    send_GSM("\r\nAT+CFUN=1\r\n", "ERROR", "NOT INSERTED" , "Ready", 4);	
0046da  2004              MOVS     r0,#4
0046dc  4b43              LDR      r3,|L1.18412|
0046de  461a              MOV      r2,r3
0046e0  3a10              SUBS     r2,r2,#0x10
0046e2  4939              LDR      r1,|L1.18376|
0046e4  3954              SUBS     r1,r1,#0x54
0046e6  9000              STR      r0,[sp,#0]
0046e8  4608              MOV      r0,r1
0046ea  30bc              ADDS     r0,r0,#0xbc
0046ec  f7fffffe          BL       send_GSM
;;;489    GPS_COLLECT2();
0046f0  f7fffffe          BL       GPS_COLLECT2
;;;490    strcat(data,"CH\n");		
0046f4  4934              LDR      r1,|L1.18376|
0046f6  390c              SUBS     r1,r1,#0xc
0046f8  4831              LDR      r0,|L1.18368|
0046fa  f7fffffe          BL       strcat
;;;491    GPS_COLLECT2();
0046fe  f7fffffe          BL       GPS_COLLECT2
;;;492    strcat(data,"CH\n");	
004702  4931              LDR      r1,|L1.18376|
004704  390c              SUBS     r1,r1,#0xc
004706  482e              LDR      r0,|L1.18368|
004708  f7fffffe          BL       strcat
;;;493    
;;;494    	
;;;495    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
00470c  2004              MOVS     r0,#4
00470e  4b38              LDR      r3,|L1.18416|
004710  4a2d              LDR      r2,|L1.18376|
004712  3224              ADDS     r2,r2,#0x24
004714  a134              ADR      r1,|L1.18408|
004716  9000              STR      r0,[sp,#0]
004718  4618              MOV      r0,r3
00471a  300c              ADDS     r0,r0,#0xc
00471c  f7fffffe          BL       send_GSM
;;;496    GPS_COLLECT2();
004720  f7fffffe          BL       GPS_COLLECT2
;;;497    strcat(data,"CH\n");	
004724  4928              LDR      r1,|L1.18376|
004726  390c              SUBS     r1,r1,#0xc
004728  4825              LDR      r0,|L1.18368|
00472a  f7fffffe          BL       strcat
;;;498    memset(at_,0,100);
00472e  2164              MOVS     r1,#0x64
004730  4822              LDR      r0,|L1.18364|
004732  f7fffffe          BL       __aeabi_memclr
;;;499    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
004736  4a2f              LDR      r2,|L1.18420|
004738  492d              LDR      r1,|L1.18416|
00473a  3120              ADDS     r1,r1,#0x20
00473c  481f              LDR      r0,|L1.18364|
00473e  f7fffffe          BL       __2sprintf
;;;500    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
004742  482d              LDR      r0,|L1.18424|
004744  6800              LDR      r0,[r0,#0]  ; tmeout
004746  4b2a              LDR      r3,|L1.18416|
004748  4a1f              LDR      r2,|L1.18376|
00474a  3224              ADDS     r2,r2,#0x24
00474c  a126              ADR      r1,|L1.18408|
00474e  9000              STR      r0,[sp,#0]
004750  481a              LDR      r0,|L1.18364|
004752  f7fffffe          BL       send_GSM
;;;501    msg_sim800(); 
004756  f7fffffe          BL       msg_sim800
;;;502    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
00475a  2004              MOVS     r0,#4
00475c  4b1a              LDR      r3,|L1.18376|
00475e  3b38              SUBS     r3,r3,#0x38
004760  461a              MOV      r2,r3
004762  325c              ADDS     r2,r2,#0x5c
004764  a120              ADR      r1,|L1.18408|
004766  9000              STR      r0,[sp,#0]
004768  4821              LDR      r0,|L1.18416|
00476a  3038              ADDS     r0,r0,#0x38
00476c  f7fffffe          BL       send_GSM
;;;503    GPS_COLLECT2();
004770  f7fffffe          BL       GPS_COLLECT2
;;;504    strcat(data,"CH\n");	
004774  4914              LDR      r1,|L1.18376|
004776  390c              SUBS     r1,r1,#0xc
004778  4811              LDR      r0,|L1.18368|
00477a  f7fffffe          BL       strcat
;;;505    GPS_COLLECT2();
00477e  f7fffffe          BL       GPS_COLLECT2
;;;506    strcat(data,"CH\n");	
004782  4911              LDR      r1,|L1.18376|
004784  390c              SUBS     r1,r1,#0xc
004786  480e              LDR      r0,|L1.18368|
004788  f7fffffe          BL       strcat
;;;507    
;;;508    
;;;509    msg_sim800(); 
00478c  f7fffffe          BL       msg_sim800
;;;510    GPS_COLLECT2();
004790  f7fffffe          BL       GPS_COLLECT2
;;;511    strcat(data,"CH\n");	
004794  490c              LDR      r1,|L1.18376|
004796  390c              SUBS     r1,r1,#0xc
004798  4809              LDR      r0,|L1.18368|
00479a  f7fffffe          BL       strcat
;;;512    					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
00479e  f7fffffe          BL       clear
0047a2  4813              LDR      r0,|L1.18416|
0047a4  3048              ADDS     r0,r0,#0x48
0047a6  f7fffffe          BL       send_modem
0047aa  f7fffffe          BL       clear
;;;513    					delay(20);
0047ae  2014              MOVS     r0,#0x14
0047b0  f7fffffe          BL       delay
;;;514    
;;;515    
;;;516    msg_sim800(); 
0047b4  e022              B        |L1.18428|
0047b6  0000              DCW      0x0000
                  |L1.18360|
                          DCD      0x4006b000
                  |L1.18364|
                          DCD      at_
                  |L1.18368|
                          DCD      data
                  |L1.18372|
                          DCD      drive
                  |L1.18376|
                          DCD      ||.text||+0x8c4
                  |L1.18380|
0047cc  3e00              DCB      ">",0
0047ce  00                DCB      0
0047cf  00                DCB      0
                  |L1.18384|
                          DCD      uart_string_gsm
                  |L1.18388|
                          DCD      ||k2||
                  |L1.18392|
                          DCD      tout
                  |L1.18396|
                          DCD      k
                  |L1.18400|
                          DCD      int_erval
                  |L1.18404|
                          DCD      temp
                  |L1.18408|
0047e8  4f4b00            DCB      "OK",0
0047eb  00                DCB      0
                  |L1.18412|
                          DCD      ||.text||+0x3dd4
                  |L1.18416|
                          DCD      ||.text||+0xd54
                  |L1.18420|
                          DCD      apn
                  |L1.18424|
                          DCD      tmeout
                  |L1.18428|
0047fc  f7fffffe          BL       msg_sim800
;;;517    int_erval=temp;
004800  48fc              LDR      r0,|L1.19444|
004802  6800              LDR      r0,[r0,#0]  ; temp
004804  49fc              LDR      r1,|L1.19448|
004806  6008              STR      r0,[r1,#0]  ; int_erval
;;;518    //resetting interval 
;;;519    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
004808  4bfc              LDR      r3,|L1.19452|
00480a  4afd              LDR      r2,|L1.19456|
00480c  49fd              LDR      r1,|L1.19460|
00480e  48fe              LDR      r0,|L1.19464|
004810  f7fffffe          BL       __2sprintf
;;;520    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
004814  48fd              LDR      r0,|L1.19468|
004816  6800              LDR      r0,[r0,#0]  ; tmeout
004818  4bfa              LDR      r3,|L1.19460|
00481a  3b60              SUBS     r3,r3,#0x60
00481c  4afc              LDR      r2,|L1.19472|
00481e  4619              MOV      r1,r3
004820  3180              ADDS     r1,r1,#0x80
004822  9000              STR      r0,[sp,#0]
004824  48f8              LDR      r0,|L1.19464|
004826  f7fffffe          BL       send_GSM
;;;521    						clear();
00482a  f7fffffe          BL       clear
;;;522    						
;;;523    						
;;;524    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
00482e  48f7              LDR      r0,|L1.19468|
004830  6800              LDR      r0,[r0,#0]  ; tmeout
004832  4bf4              LDR      r3,|L1.19460|
004834  3328              ADDS     r3,r3,#0x28
004836  4af6              LDR      r2,|L1.19472|
004838  a1f6              ADR      r1,|L1.19476|
00483a  9000              STR      r0,[sp,#0]
00483c  4618              MOV      r0,r3
00483e  3010              ADDS     r0,r0,#0x10
004840  f7fffffe          BL       send_GSM
;;;525    						
;;;526    //*************************************tcp initialization*******************************/
;;;527    			clear();		
004844  f7fffffe          BL       clear
;;;528    						cond=mystrstr(uart_string_gsm,'>');
004848  213e              MOVS     r1,#0x3e
00484a  48f3              LDR      r0,|L1.19480|
00484c  f7fffffe          BL       mystrstr
004850  49f2              LDR      r1,|L1.19484|
004852  7008              STRB     r0,[r1,#0]
;;;529    								if(cond)	
004854  4608              MOV      r0,r1
004856  7800              LDRB     r0,[r0,#0]  ; cond
004858  2800              CMP      r0,#0
00485a  d07d              BEQ      |L1.18776|
;;;530    								{	
;;;531    
;;;532    									clear();
00485c  f7fffffe          BL       clear
;;;533    									memset(uart_string_gsm,0,5000);
004860  49ef              LDR      r1,|L1.19488|
004862  48ed              LDR      r0,|L1.19480|
004864  f7fffffe          BL       __aeabi_memclr
;;;534    									strcat(data,"\n");
004868  a1ee              ADR      r1,|L1.19492|
00486a  48ef              LDR      r0,|L1.19496|
00486c  f7fffffe          BL       strcat
;;;535    									len=strlen(data);
004870  48ed              LDR      r0,|L1.19496|
004872  f7fffffe          BL       strlen
004876  49ed              LDR      r1,|L1.19500|
004878  6008              STR      r0,[r1,#0]  ; len
;;;536    									tout=0;
00487a  2000              MOVS     r0,#0
00487c  49ec              LDR      r1,|L1.19504|
00487e  6008              STR      r0,[r1,#0]  ; tout
;;;537    									k2=0;
004880  49ec              LDR      r1,|L1.19508|
004882  6008              STR      r0,[r1,#0]  ; k2
;;;538    									for(k=0;k<len;k++)
004884  49ec              LDR      r1,|L1.19512|
004886  6008              STR      r0,[r1,#0]  ; k
004888  e00d              B        |L1.18598|
                  |L1.18570|
;;;539    									{
;;;540    										uart_putchar(UART1_BASE_PTR, data[k]);
00488a  48e7              LDR      r0,|L1.19496|
00488c  49ea              LDR      r1,|L1.19512|
00488e  6809              LDR      r1,[r1,#0]  ; k
004890  5c40              LDRB     r0,[r0,r1]
004892  4601              MOV      r1,r0
004894  9001              STR      r0,[sp,#4]
004896  48e9              LDR      r0,|L1.19516|
004898  f7fffffe          BL       uart_putchar
00489c  48e6              LDR      r0,|L1.19512|
00489e  6800              LDR      r0,[r0,#0]            ;538  ; k
0048a0  1c40              ADDS     r0,r0,#1              ;538
0048a2  49e5              LDR      r1,|L1.19512|
0048a4  6008              STR      r0,[r1,#0]            ;538  ; k
                  |L1.18598|
0048a6  48e4              LDR      r0,|L1.19512|
0048a8  6800              LDR      r0,[r0,#0]            ;538  ; k
0048aa  49e0              LDR      r1,|L1.19500|
0048ac  6809              LDR      r1,[r1,#0]            ;538  ; len
0048ae  4288              CMP      r0,r1                 ;538
0048b0  dbeb              BLT      |L1.18570|
;;;541    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0048b2  211a              MOVS     r1,#0x1a
0048b4  48e1              LDR      r0,|L1.19516|
0048b6  f7fffffe          BL       uart_putchar
;;;542    									do
0048ba  bf00              NOP      
                  |L1.18620|
;;;543    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0048bc  49e0              LDR      r1,|L1.19520|
0048be  48d6              LDR      r0,|L1.19480|
0048c0  f7fffffe          BL       strstr
0048c4  49df              LDR      r1,|L1.19524|
0048c6  6008              STR      r0,[r1,#0]  ; stcond1
;;;544    																	stcond2=strstr(uart_string_gsm, "ERROR");
0048c8  49d1              LDR      r1,|L1.19472|
0048ca  48d3              LDR      r0,|L1.19480|
0048cc  f7fffffe          BL       strstr
0048d0  49dd              LDR      r1,|L1.19528|
0048d2  6008              STR      r0,[r1,#0]  ; stcond2
;;;545    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0048d4  49cb              LDR      r1,|L1.19460|
0048d6  3130              ADDS     r1,r1,#0x30
0048d8  48cf              LDR      r0,|L1.19480|
0048da  f7fffffe          BL       strstr
0048de  49db              LDR      r1,|L1.19532|
0048e0  6008              STR      r0,[r1,#0]  ; stcond3
;;;546    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0048e2  49cb              LDR      r1,|L1.19472|
0048e4  311c              ADDS     r1,r1,#0x1c
0048e6  48cc              LDR      r0,|L1.19480|
0048e8  f7fffffe          BL       strstr
0048ec  49d8              LDR      r1,|L1.19536|
0048ee  6008              STR      r0,[r1,#0]  ; stcond4
;;;547    																	
;;;548    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0048f0  48d5              LDR      r0,|L1.19528|
0048f2  6800              LDR      r0,[r0,#0]  ; stcond2
0048f4  2800              CMP      r0,#0
0048f6  d10f              BNE      |L1.18712|
0048f8  48d4              LDR      r0,|L1.19532|
0048fa  6800              LDR      r0,[r0,#0]  ; stcond3
0048fc  2800              CMP      r0,#0
0048fe  d10b              BNE      |L1.18712|
004900  4608              MOV      r0,r1
004902  6800              LDR      r0,[r0,#0]  ; stcond4
004904  2800              CMP      r0,#0
004906  d107              BNE      |L1.18712|
004908  48ce              LDR      r0,|L1.19524|
00490a  6800              LDR      r0,[r0,#0]  ; stcond1
00490c  2800              CMP      r0,#0
00490e  d103              BNE      |L1.18712|
004910  48c7              LDR      r0,|L1.19504|
004912  6800              LDR      r0,[r0,#0]  ; tout
004914  2808              CMP      r0,#8
004916  ddd1              BLE      |L1.18620|
                  |L1.18712|
;;;549    																delay(10);clear();
004918  200a              MOVS     r0,#0xa
00491a  f7fffffe          BL       delay
00491e  f7fffffe          BL       clear
;;;550    														uart_putchar(UART1_BASE_PTR,0x1A);
004922  211a              MOVS     r1,#0x1a
004924  48c5              LDR      r0,|L1.19516|
004926  f7fffffe          BL       uart_putchar
;;;551    												delay(10);
00492a  200a              MOVS     r0,#0xa
00492c  f7fffffe          BL       delay
;;;552    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
004930  211a              MOVS     r1,#0x1a
004932  48c2              LDR      r0,|L1.19516|
004934  f7fffffe          BL       uart_putchar
004938  211a              MOVS     r1,#0x1a
00493a  48c0              LDR      r0,|L1.19516|
00493c  f7fffffe          BL       uart_putchar
004940  211a              MOVS     r1,#0x1a
004942  48be              LDR      r0,|L1.19516|
004944  f7fffffe          BL       uart_putchar
;;;553    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004948  211a              MOVS     r1,#0x1a
00494a  48bc              LDR      r0,|L1.19516|
00494c  f7fffffe          BL       uart_putchar
004950  f7fffffe          BL       clear
004954  200a              MOVS     r0,#0xa
004956  e000              B        |L1.18778|
                  |L1.18776|
004958  e1ad              B        |L1.19638|
                  |L1.18778|
00495a  f7fffffe          BL       delay
;;;554    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
00495e  211a              MOVS     r1,#0x1a
004960  48b6              LDR      r0,|L1.19516|
004962  f7fffffe          BL       uart_putchar
004966  f7fffffe          BL       clear
00496a  200a              MOVS     r0,#0xa
00496c  f7fffffe          BL       delay
;;;555    															
;;;556    										qwe=strlen(uart_string_gsm);
004970  48a9              LDR      r0,|L1.19480|
004972  f7fffffe          BL       strlen
004976  49b7              LDR      r1,|L1.19540|
004978  6008              STR      r0,[r1,#0]  ; qwe
;;;557    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
00497a  211a              MOVS     r1,#0x1a
00497c  48af              LDR      r0,|L1.19516|
00497e  f7fffffe          BL       uart_putchar
004982  f7fffffe          BL       clear
004986  200a              MOVS     r0,#0xa
004988  f7fffffe          BL       delay
;;;558    								delay(50);
00498c  2032              MOVS     r0,#0x32
00498e  f7fffffe          BL       delay
;;;559    								con1d=strstr(uart_string_gsm,"SEND OK");
004992  49ab              LDR      r1,|L1.19520|
004994  48a0              LDR      r0,|L1.19480|
004996  f7fffffe          BL       strstr
00499a  49af              LDR      r1,|L1.19544|
00499c  6008              STR      r0,[r1,#0]  ; con1d
;;;560    								if(!(con1d) == 1 )
00499e  4608              MOV      r0,r1
0049a0  6800              LDR      r0,[r0,#0]  ; con1d
0049a2  2800              CMP      r0,#0
0049a4  d101              BNE      |L1.18858|
0049a6  2001              MOVS     r0,#1
0049a8  e000              B        |L1.18860|
                  |L1.18858|
0049aa  2000              MOVS     r0,#0
                  |L1.18860|
0049ac  2801              CMP      r0,#1
0049ae  d17d              BNE      |L1.19116|
;;;561    								{
;;;562    									delay(100);
0049b0  2064              MOVS     r0,#0x64
0049b2  f7fffffe          BL       delay
;;;563    									clear();//memset(uart_string_gsm,0,5000);
0049b6  f7fffffe          BL       clear
;;;564    									memset(at_,0,100);
0049ba  2164              MOVS     r1,#0x64
0049bc  4892              LDR      r0,|L1.19464|
0049be  f7fffffe          BL       __aeabi_memclr
;;;565    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0049c2  4899              LDR      r0,|L1.19496|
0049c4  f7fffffe          BL       strlen
0049c8  1c40              ADDS     r0,r0,#1
0049ca  4603              MOV      r3,r0
0049cc  4aa3              LDR      r2,|L1.19548|
0049ce  4990              LDR      r1,|L1.19472|
0049d0  3154              ADDS     r1,r1,#0x54
0049d2  9001              STR      r0,[sp,#4]
0049d4  488c              LDR      r0,|L1.19464|
0049d6  f7fffffe          BL       __2sprintf
;;;566    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0049da  2005              MOVS     r0,#5
0049dc  4b8c              LDR      r3,|L1.19472|
0049de  461a              MOV      r2,r3
0049e0  3278              ADDS     r2,r2,#0x78
0049e2  a18c              ADR      r1,|L1.19476|
0049e4  9000              STR      r0,[sp,#0]
0049e6  4888              LDR      r0,|L1.19464|
0049e8  f7fffffe          BL       send_SD
;;;567    if(strstr(uart_string_gsm,"ERROR")){
0049ec  4988              LDR      r1,|L1.19472|
0049ee  488a              LDR      r0,|L1.19480|
0049f0  f7fffffe          BL       strstr
0049f4  2800              CMP      r0,#0
0049f6  d004              BEQ      |L1.18946|
;;;568    	drive[0]='C';drive[1]=':';
0049f8  2043              MOVS     r0,#0x43
0049fa  4998              LDR      r1,|L1.19548|
0049fc  7008              STRB     r0,[r1,#0]
0049fe  203a              MOVS     r0,#0x3a
004a00  7048              STRB     r0,[r1,#1]
                  |L1.18946|
;;;569    }	
;;;570    									clear();	
004a02  f7fffffe          BL       clear
;;;571    									k2=0;									//string array counter for uart 1
004a06  2000              MOVS     r0,#0
004a08  498a              LDR      r1,|L1.19508|
004a0a  6008              STR      r0,[r1,#0]  ; k2
;;;572    									tout=0;	
004a0c  4988              LDR      r1,|L1.19504|
004a0e  6008              STR      r0,[r1,#0]  ; tout
;;;573    									for(k=0;k<strlen(data);k++)
004a10  4989              LDR      r1,|L1.19512|
004a12  6008              STR      r0,[r1,#0]  ; k
004a14  e00d              B        |L1.18994|
                  |L1.18966|
;;;574    									{
;;;575    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004a16  4884              LDR      r0,|L1.19496|
004a18  4987              LDR      r1,|L1.19512|
004a1a  6809              LDR      r1,[r1,#0]  ; k
004a1c  5c40              LDRB     r0,[r0,r1]
004a1e  4601              MOV      r1,r0
004a20  9001              STR      r0,[sp,#4]
004a22  4886              LDR      r0,|L1.19516|
004a24  f7fffffe          BL       uart_putchar
004a28  4883              LDR      r0,|L1.19512|
004a2a  6800              LDR      r0,[r0,#0]            ;573  ; k
004a2c  1c40              ADDS     r0,r0,#1              ;573
004a2e  4982              LDR      r1,|L1.19512|
004a30  6008              STR      r0,[r1,#0]            ;573  ; k
                  |L1.18994|
004a32  487d              LDR      r0,|L1.19496|
004a34  f7fffffe          BL       strlen
004a38  497f              LDR      r1,|L1.19512|
004a3a  6809              LDR      r1,[r1,#0]            ;573  ; k
004a3c  4288              CMP      r0,r1                 ;573
004a3e  d8ea              BHI      |L1.18966|
;;;576    									}	
;;;577    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004a40  210a              MOVS     r1,#0xa
004a42  487e              LDR      r0,|L1.19516|
004a44  f7fffffe          BL       uart_putchar
004a48  210a              MOVS     r1,#0xa
004a4a  487c              LDR      r0,|L1.19516|
004a4c  f7fffffe          BL       uart_putchar
004a50  210a              MOVS     r1,#0xa
004a52  487a              LDR      r0,|L1.19516|
004a54  f7fffffe          BL       uart_putchar
004a58  210a              MOVS     r1,#0xa
004a5a  4878              LDR      r0,|L1.19516|
004a5c  f7fffffe          BL       uart_putchar
004a60  210a              MOVS     r1,#0xa
004a62  4876              LDR      r0,|L1.19516|
004a64  f7fffffe          BL       uart_putchar
004a68  210a              MOVS     r1,#0xa
004a6a  4874              LDR      r0,|L1.19516|
004a6c  f7fffffe          BL       uart_putchar
004a70  210a              MOVS     r1,#0xa
004a72  4872              LDR      r0,|L1.19516|
004a74  f7fffffe          BL       uart_putchar
004a78  210a              MOVS     r1,#0xa
004a7a  4870              LDR      r0,|L1.19516|
004a7c  f7fffffe          BL       uart_putchar
004a80  210a              MOVS     r1,#0xa
004a82  486e              LDR      r0,|L1.19516|
004a84  f7fffffe          BL       uart_putchar
004a88  210a              MOVS     r1,#0xa
004a8a  486c              LDR      r0,|L1.19516|
004a8c  f7fffffe          BL       uart_putchar
004a90  210a              MOVS     r1,#0xa
004a92  486a              LDR      r0,|L1.19516|
004a94  f7fffffe          BL       uart_putchar
004a98  210a              MOVS     r1,#0xa
004a9a  4868              LDR      r0,|L1.19516|
004a9c  f7fffffe          BL       uart_putchar
004aa0  210a              MOVS     r1,#0xa
004aa2  4866              LDR      r0,|L1.19516|
004aa4  f7fffffe          BL       uart_putchar
004aa8  210a              MOVS     r1,#0xa
004aaa  e000              B        |L1.19118|
                  |L1.19116|
004aac  e250              B        |L1.20304|
                  |L1.19118|
004aae  4863              LDR      r0,|L1.19516|
004ab0  f7fffffe          BL       uart_putchar
004ab4  210a              MOVS     r1,#0xa
004ab6  4861              LDR      r0,|L1.19516|
004ab8  f7fffffe          BL       uart_putchar
004abc  210a              MOVS     r1,#0xa
004abe  485f              LDR      r0,|L1.19516|
004ac0  f7fffffe          BL       uart_putchar
004ac4  210a              MOVS     r1,#0xa
004ac6  485d              LDR      r0,|L1.19516|
004ac8  f7fffffe          BL       uart_putchar
004acc  210a              MOVS     r1,#0xa
004ace  485b              LDR      r0,|L1.19516|
004ad0  f7fffffe          BL       uart_putchar
004ad4  210a              MOVS     r1,#0xa
004ad6  4859              LDR      r0,|L1.19516|
004ad8  f7fffffe          BL       uart_putchar
004adc  210a              MOVS     r1,#0xa
004ade  4857              LDR      r0,|L1.19516|
004ae0  f7fffffe          BL       uart_putchar
004ae4  210a              MOVS     r1,#0xa
004ae6  4855              LDR      r0,|L1.19516|
004ae8  f7fffffe          BL       uart_putchar
004aec  210a              MOVS     r1,#0xa
004aee  4853              LDR      r0,|L1.19516|
004af0  f7fffffe          BL       uart_putchar
004af4  210a              MOVS     r1,#0xa
004af6  4851              LDR      r0,|L1.19516|
004af8  f7fffffe          BL       uart_putchar
004afc  210a              MOVS     r1,#0xa
004afe  484f              LDR      r0,|L1.19516|
004b00  f7fffffe          BL       uart_putchar
004b04  210a              MOVS     r1,#0xa
004b06  484d              LDR      r0,|L1.19516|
004b08  f7fffffe          BL       uart_putchar
004b0c  210a              MOVS     r1,#0xa
004b0e  484b              LDR      r0,|L1.19516|
004b10  f7fffffe          BL       uart_putchar
004b14  210a              MOVS     r1,#0xa
004b16  4849              LDR      r0,|L1.19516|
004b18  f7fffffe          BL       uart_putchar
004b1c  210a              MOVS     r1,#0xa
004b1e  4847              LDR      r0,|L1.19516|
004b20  f7fffffe          BL       uart_putchar
004b24  210a              MOVS     r1,#0xa
004b26  4845              LDR      r0,|L1.19516|
004b28  f7fffffe          BL       uart_putchar
004b2c  210a              MOVS     r1,#0xa
004b2e  4843              LDR      r0,|L1.19516|
004b30  f7fffffe          BL       uart_putchar
004b34  210a              MOVS     r1,#0xa
004b36  4841              LDR      r0,|L1.19516|
004b38  f7fffffe          BL       uart_putchar
004b3c  210a              MOVS     r1,#0xa
004b3e  483f              LDR      r0,|L1.19516|
004b40  f7fffffe          BL       uart_putchar
004b44  210a              MOVS     r1,#0xa
004b46  483d              LDR      r0,|L1.19516|
004b48  f7fffffe          BL       uart_putchar
004b4c  210a              MOVS     r1,#0xa
004b4e  483b              LDR      r0,|L1.19516|
004b50  f7fffffe          BL       uart_putchar
004b54  210a              MOVS     r1,#0xa
004b56  4839              LDR      r0,|L1.19516|
004b58  f7fffffe          BL       uart_putchar
004b5c  210a              MOVS     r1,#0xa
004b5e  4837              LDR      r0,|L1.19516|
004b60  f7fffffe          BL       uart_putchar
004b64  210a              MOVS     r1,#0xa
004b66  4835              LDR      r0,|L1.19516|
004b68  f7fffffe          BL       uart_putchar
004b6c  210a              MOVS     r1,#0xa
004b6e  4833              LDR      r0,|L1.19516|
004b70  f7fffffe          BL       uart_putchar
004b74  210a              MOVS     r1,#0xa
004b76  4831              LDR      r0,|L1.19516|
004b78  f7fffffe          BL       uart_putchar
004b7c  210a              MOVS     r1,#0xa
004b7e  482f              LDR      r0,|L1.19516|
004b80  f7fffffe          BL       uart_putchar
004b84  210a              MOVS     r1,#0xa
004b86  482d              LDR      r0,|L1.19516|
004b88  f7fffffe          BL       uart_putchar
004b8c  210a              MOVS     r1,#0xa
004b8e  482b              LDR      r0,|L1.19516|
004b90  f7fffffe          BL       uart_putchar
004b94  210a              MOVS     r1,#0xa
004b96  4829              LDR      r0,|L1.19516|
004b98  f7fffffe          BL       uart_putchar
004b9c  210a              MOVS     r1,#0xa
004b9e  4827              LDR      r0,|L1.19516|
004ba0  f7fffffe          BL       uart_putchar
004ba4  210a              MOVS     r1,#0xa
004ba6  4825              LDR      r0,|L1.19516|
004ba8  f7fffffe          BL       uart_putchar
004bac  210a              MOVS     r1,#0xa
004bae  4823              LDR      r0,|L1.19516|
004bb0  f7fffffe          BL       uart_putchar
004bb4  210a              MOVS     r1,#0xa
004bb6  4821              LDR      r0,|L1.19516|
004bb8  f7fffffe          BL       uart_putchar
004bbc  210a              MOVS     r1,#0xa
004bbe  481f              LDR      r0,|L1.19516|
004bc0  f7fffffe          BL       uart_putchar
004bc4  210a              MOVS     r1,#0xa
004bc6  481d              LDR      r0,|L1.19516|
004bc8  f7fffffe          BL       uart_putchar
004bcc  210a              MOVS     r1,#0xa
004bce  481b              LDR      r0,|L1.19516|
004bd0  f7fffffe          BL       uart_putchar
004bd4  210a              MOVS     r1,#0xa
004bd6  4819              LDR      r0,|L1.19516|
004bd8  f7fffffe          BL       uart_putchar
004bdc  210a              MOVS     r1,#0xa
004bde  4817              LDR      r0,|L1.19516|
004be0  f7fffffe          BL       uart_putchar
004be4  210a              MOVS     r1,#0xa
004be6  4815              LDR      r0,|L1.19516|
004be8  f7fffffe          BL       uart_putchar
004bec  210a              MOVS     r1,#0xa
004bee  4813              LDR      r0,|L1.19516|
004bf0  e036              B        |L1.19552|
004bf2  0000              DCW      0x0000
                  |L1.19444|
                          DCD      temp
                  |L1.19448|
                          DCD      int_erval
                  |L1.19452|
                          DCD      port
                  |L1.19456|
                          DCD      ||ip||
                  |L1.19460|
                          DCD      ||.text||+0xdb4
                  |L1.19464|
                          DCD      at_
                  |L1.19468|
                          DCD      tmeout
                  |L1.19472|
                          DCD      ||.text||+0x870
                  |L1.19476|
004c14  3e00              DCB      ">",0
004c16  00                DCB      0
004c17  00                DCB      0
                  |L1.19480|
                          DCD      uart_string_gsm
                  |L1.19484|
                          DCD      cond
                  |L1.19488|
                          DCD      0x00001388
                  |L1.19492|
004c24  0a00              DCB      "\n",0
004c26  00                DCB      0
004c27  00                DCB      0
                  |L1.19496|
                          DCD      data
                  |L1.19500|
                          DCD      len
                  |L1.19504|
                          DCD      tout
                  |L1.19508|
                          DCD      ||k2||
                  |L1.19512|
                          DCD      k
                  |L1.19516|
                          DCD      0x4006b000
                  |L1.19520|
                          DCD      ||.text||+0x474
                  |L1.19524|
                          DCD      stcond1
                  |L1.19528|
                          DCD      stcond2
                  |L1.19532|
                          DCD      stcond3
                  |L1.19536|
                          DCD      stcond4
                  |L1.19540|
                          DCD      qwe
                  |L1.19544|
                          DCD      con1d
                  |L1.19548|
                          DCD      drive
                  |L1.19552|
004c60  f7fffffe          BL       uart_putchar
004c64  210a              MOVS     r1,#0xa
004c66  48f9              LDR      r0,|L1.20556|
004c68  f7fffffe          BL       uart_putchar
004c6c  210a              MOVS     r1,#0xa
004c6e  48f7              LDR      r0,|L1.20556|
004c70  f7fffffe          BL       uart_putchar
004c74  210a              MOVS     r1,#0xa
004c76  48f5              LDR      r0,|L1.20556|
004c78  f7fffffe          BL       uart_putchar
;;;578    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004c7c  bf00              NOP      
                  |L1.19582|
004c7e  49f4              LDR      r1,|L1.20560|
004c80  48f4              LDR      r0,|L1.20564|
004c82  f7fffffe          BL       strstr
004c86  2800              CMP      r0,#0
004c88  d10a              BNE      |L1.19616|
004c8a  49f1              LDR      r1,|L1.20560|
004c8c  398c              SUBS     r1,r1,#0x8c
004c8e  48f1              LDR      r0,|L1.20564|
004c90  f7fffffe          BL       strstr
004c94  2800              CMP      r0,#0
004c96  d103              BNE      |L1.19616|
004c98  48ef              LDR      r0,|L1.20568|
004c9a  6800              LDR      r0,[r0,#0]  ; tout
004c9c  2805              CMP      r0,#5
004c9e  ddee              BLE      |L1.19582|
                  |L1.19616|
;;;579    									{}
;;;580    	                memset(data,0,strlen(data));
004ca0  48ee              LDR      r0,|L1.20572|
004ca2  f7fffffe          BL       strlen
004ca6  4601              MOV      r1,r0
004ca8  9001              STR      r0,[sp,#4]
004caa  48ec              LDR      r0,|L1.20572|
004cac  f7fffffe          BL       __aeabi_memclr
;;;581    									clear();
004cb0  f7fffffe          BL       clear
004cb4  e14c              B        |L1.20304|
                  |L1.19638|
;;;582    									}else{
;;;583    									//send_chunk();
;;;584    									}	
;;;585    						}else{
;;;586    									delay(100);
004cb6  2064              MOVS     r0,#0x64
004cb8  f7fffffe          BL       delay
;;;587    									clear();//memset(uart_string_gsm,0,5000);
004cbc  f7fffffe          BL       clear
;;;588    
;;;589    									memset(at_,0,100);
004cc0  2164              MOVS     r1,#0x64
004cc2  48e7              LDR      r0,|L1.20576|
004cc4  f7fffffe          BL       __aeabi_memclr
;;;590    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004cc8  48e4              LDR      r0,|L1.20572|
004cca  f7fffffe          BL       strlen
004cce  1c40              ADDS     r0,r0,#1
004cd0  4603              MOV      r3,r0
004cd2  4ae4              LDR      r2,|L1.20580|
004cd4  49de              LDR      r1,|L1.20560|
004cd6  3938              SUBS     r1,r1,#0x38
004cd8  9001              STR      r0,[sp,#4]
004cda  48e1              LDR      r0,|L1.20576|
004cdc  f7fffffe          BL       __2sprintf
;;;591    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004ce0  2005              MOVS     r0,#5
004ce2  4bdb              LDR      r3,|L1.20560|
004ce4  3b8c              SUBS     r3,r3,#0x8c
004ce6  461a              MOV      r2,r3
004ce8  3278              ADDS     r2,r2,#0x78
004cea  a1df              ADR      r1,|L1.20584|
004cec  9000              STR      r0,[sp,#0]
004cee  48dc              LDR      r0,|L1.20576|
004cf0  f7fffffe          BL       send_SD
;;;592    if(strstr(uart_string_gsm,"ERROR")){
004cf4  49d6              LDR      r1,|L1.20560|
004cf6  398c              SUBS     r1,r1,#0x8c
004cf8  48d6              LDR      r0,|L1.20564|
004cfa  f7fffffe          BL       strstr
004cfe  2800              CMP      r0,#0
004d00  d004              BEQ      |L1.19724|
;;;593    	drive[0]='C';drive[1]=':';
004d02  2043              MOVS     r0,#0x43
004d04  49d7              LDR      r1,|L1.20580|
004d06  7008              STRB     r0,[r1,#0]
004d08  203a              MOVS     r0,#0x3a
004d0a  7048              STRB     r0,[r1,#1]
                  |L1.19724|
;;;594    }	
;;;595    									clear();	
004d0c  f7fffffe          BL       clear
;;;596    									k2=0;									//string array counter for uart 1
004d10  2000              MOVS     r0,#0
004d12  49d6              LDR      r1,|L1.20588|
004d14  6008              STR      r0,[r1,#0]  ; k2
;;;597    									tout=0;	
004d16  49d0              LDR      r1,|L1.20568|
004d18  6008              STR      r0,[r1,#0]  ; tout
;;;598    		for(k=0;k<strlen(data);k++)
004d1a  49d5              LDR      r1,|L1.20592|
004d1c  6008              STR      r0,[r1,#0]  ; k
004d1e  e00d              B        |L1.19772|
                  |L1.19744|
;;;599    		{
;;;600    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004d20  48ce              LDR      r0,|L1.20572|
004d22  49d3              LDR      r1,|L1.20592|
004d24  6809              LDR      r1,[r1,#0]  ; k
004d26  5c40              LDRB     r0,[r0,r1]
004d28  4601              MOV      r1,r0
004d2a  9001              STR      r0,[sp,#4]
004d2c  48c7              LDR      r0,|L1.20556|
004d2e  f7fffffe          BL       uart_putchar
004d32  48cf              LDR      r0,|L1.20592|
004d34  6800              LDR      r0,[r0,#0]            ;598  ; k
004d36  1c40              ADDS     r0,r0,#1              ;598
004d38  49cd              LDR      r1,|L1.20592|
004d3a  6008              STR      r0,[r1,#0]            ;598  ; k
                  |L1.19772|
004d3c  48c7              LDR      r0,|L1.20572|
004d3e  f7fffffe          BL       strlen
004d42  49cb              LDR      r1,|L1.20592|
004d44  6809              LDR      r1,[r1,#0]            ;598  ; k
004d46  4288              CMP      r0,r1                 ;598
004d48  d8ea              BHI      |L1.19744|
;;;601    		}	
;;;602    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004d4a  210a              MOVS     r1,#0xa
004d4c  48bf              LDR      r0,|L1.20556|
004d4e  f7fffffe          BL       uart_putchar
004d52  210a              MOVS     r1,#0xa
004d54  48bd              LDR      r0,|L1.20556|
004d56  f7fffffe          BL       uart_putchar
004d5a  210a              MOVS     r1,#0xa
004d5c  48bb              LDR      r0,|L1.20556|
004d5e  f7fffffe          BL       uart_putchar
004d62  210a              MOVS     r1,#0xa
004d64  48b9              LDR      r0,|L1.20556|
004d66  f7fffffe          BL       uart_putchar
004d6a  210a              MOVS     r1,#0xa
004d6c  48b7              LDR      r0,|L1.20556|
004d6e  f7fffffe          BL       uart_putchar
004d72  210a              MOVS     r1,#0xa
004d74  48b5              LDR      r0,|L1.20556|
004d76  f7fffffe          BL       uart_putchar
004d7a  210a              MOVS     r1,#0xa
004d7c  48b3              LDR      r0,|L1.20556|
004d7e  f7fffffe          BL       uart_putchar
004d82  210a              MOVS     r1,#0xa
004d84  48b1              LDR      r0,|L1.20556|
004d86  f7fffffe          BL       uart_putchar
004d8a  210a              MOVS     r1,#0xa
004d8c  48af              LDR      r0,|L1.20556|
004d8e  f7fffffe          BL       uart_putchar
004d92  210a              MOVS     r1,#0xa
004d94  48ad              LDR      r0,|L1.20556|
004d96  f7fffffe          BL       uart_putchar
004d9a  210a              MOVS     r1,#0xa
004d9c  48ab              LDR      r0,|L1.20556|
004d9e  f7fffffe          BL       uart_putchar
004da2  210a              MOVS     r1,#0xa
004da4  48a9              LDR      r0,|L1.20556|
004da6  f7fffffe          BL       uart_putchar
004daa  210a              MOVS     r1,#0xa
004dac  48a7              LDR      r0,|L1.20556|
004dae  f7fffffe          BL       uart_putchar
004db2  210a              MOVS     r1,#0xa
004db4  48a5              LDR      r0,|L1.20556|
004db6  f7fffffe          BL       uart_putchar
004dba  210a              MOVS     r1,#0xa
004dbc  48a3              LDR      r0,|L1.20556|
004dbe  f7fffffe          BL       uart_putchar
004dc2  210a              MOVS     r1,#0xa
004dc4  48a1              LDR      r0,|L1.20556|
004dc6  f7fffffe          BL       uart_putchar
004dca  210a              MOVS     r1,#0xa
004dcc  489f              LDR      r0,|L1.20556|
004dce  f7fffffe          BL       uart_putchar
004dd2  210a              MOVS     r1,#0xa
004dd4  489d              LDR      r0,|L1.20556|
004dd6  f7fffffe          BL       uart_putchar
004dda  210a              MOVS     r1,#0xa
004ddc  489b              LDR      r0,|L1.20556|
004dde  f7fffffe          BL       uart_putchar
004de2  210a              MOVS     r1,#0xa
004de4  4899              LDR      r0,|L1.20556|
004de6  f7fffffe          BL       uart_putchar
004dea  210a              MOVS     r1,#0xa
004dec  4897              LDR      r0,|L1.20556|
004dee  f7fffffe          BL       uart_putchar
004df2  210a              MOVS     r1,#0xa
004df4  4895              LDR      r0,|L1.20556|
004df6  f7fffffe          BL       uart_putchar
004dfa  210a              MOVS     r1,#0xa
004dfc  4893              LDR      r0,|L1.20556|
004dfe  f7fffffe          BL       uart_putchar
004e02  210a              MOVS     r1,#0xa
004e04  4891              LDR      r0,|L1.20556|
004e06  f7fffffe          BL       uart_putchar
004e0a  210a              MOVS     r1,#0xa
004e0c  488f              LDR      r0,|L1.20556|
004e0e  f7fffffe          BL       uart_putchar
004e12  210a              MOVS     r1,#0xa
004e14  488d              LDR      r0,|L1.20556|
004e16  f7fffffe          BL       uart_putchar
004e1a  210a              MOVS     r1,#0xa
004e1c  488b              LDR      r0,|L1.20556|
004e1e  f7fffffe          BL       uart_putchar
004e22  210a              MOVS     r1,#0xa
004e24  4889              LDR      r0,|L1.20556|
004e26  f7fffffe          BL       uart_putchar
004e2a  210a              MOVS     r1,#0xa
004e2c  4887              LDR      r0,|L1.20556|
004e2e  f7fffffe          BL       uart_putchar
004e32  210a              MOVS     r1,#0xa
004e34  4885              LDR      r0,|L1.20556|
004e36  f7fffffe          BL       uart_putchar
004e3a  210a              MOVS     r1,#0xa
004e3c  4883              LDR      r0,|L1.20556|
004e3e  f7fffffe          BL       uart_putchar
004e42  210a              MOVS     r1,#0xa
004e44  4881              LDR      r0,|L1.20556|
004e46  f7fffffe          BL       uart_putchar
004e4a  210a              MOVS     r1,#0xa
004e4c  487f              LDR      r0,|L1.20556|
004e4e  f7fffffe          BL       uart_putchar
004e52  210a              MOVS     r1,#0xa
004e54  487d              LDR      r0,|L1.20556|
004e56  f7fffffe          BL       uart_putchar
004e5a  210a              MOVS     r1,#0xa
004e5c  487b              LDR      r0,|L1.20556|
004e5e  f7fffffe          BL       uart_putchar
004e62  210a              MOVS     r1,#0xa
004e64  4879              LDR      r0,|L1.20556|
004e66  f7fffffe          BL       uart_putchar
004e6a  210a              MOVS     r1,#0xa
004e6c  4877              LDR      r0,|L1.20556|
004e6e  f7fffffe          BL       uart_putchar
004e72  210a              MOVS     r1,#0xa
004e74  4875              LDR      r0,|L1.20556|
004e76  f7fffffe          BL       uart_putchar
004e7a  210a              MOVS     r1,#0xa
004e7c  4873              LDR      r0,|L1.20556|
004e7e  f7fffffe          BL       uart_putchar
004e82  210a              MOVS     r1,#0xa
004e84  4871              LDR      r0,|L1.20556|
004e86  f7fffffe          BL       uart_putchar
004e8a  210a              MOVS     r1,#0xa
004e8c  486f              LDR      r0,|L1.20556|
004e8e  f7fffffe          BL       uart_putchar
004e92  210a              MOVS     r1,#0xa
004e94  486d              LDR      r0,|L1.20556|
004e96  f7fffffe          BL       uart_putchar
004e9a  210a              MOVS     r1,#0xa
004e9c  486b              LDR      r0,|L1.20556|
004e9e  f7fffffe          BL       uart_putchar
004ea2  210a              MOVS     r1,#0xa
004ea4  4869              LDR      r0,|L1.20556|
004ea6  f7fffffe          BL       uart_putchar
004eaa  210a              MOVS     r1,#0xa
004eac  4867              LDR      r0,|L1.20556|
004eae  f7fffffe          BL       uart_putchar
004eb2  210a              MOVS     r1,#0xa
004eb4  4865              LDR      r0,|L1.20556|
004eb6  f7fffffe          BL       uart_putchar
004eba  210a              MOVS     r1,#0xa
004ebc  4863              LDR      r0,|L1.20556|
004ebe  f7fffffe          BL       uart_putchar
004ec2  210a              MOVS     r1,#0xa
004ec4  4861              LDR      r0,|L1.20556|
004ec6  f7fffffe          BL       uart_putchar
004eca  210a              MOVS     r1,#0xa
004ecc  485f              LDR      r0,|L1.20556|
004ece  f7fffffe          BL       uart_putchar
004ed2  210a              MOVS     r1,#0xa
004ed4  485d              LDR      r0,|L1.20556|
004ed6  f7fffffe          BL       uart_putchar
004eda  210a              MOVS     r1,#0xa
004edc  485b              LDR      r0,|L1.20556|
004ede  f7fffffe          BL       uart_putchar
004ee2  210a              MOVS     r1,#0xa
004ee4  4859              LDR      r0,|L1.20556|
004ee6  f7fffffe          BL       uart_putchar
004eea  210a              MOVS     r1,#0xa
004eec  4857              LDR      r0,|L1.20556|
004eee  f7fffffe          BL       uart_putchar
004ef2  210a              MOVS     r1,#0xa
004ef4  4855              LDR      r0,|L1.20556|
004ef6  f7fffffe          BL       uart_putchar
004efa  210a              MOVS     r1,#0xa
004efc  4853              LDR      r0,|L1.20556|
004efe  f7fffffe          BL       uart_putchar
004f02  210a              MOVS     r1,#0xa
004f04  4851              LDR      r0,|L1.20556|
004f06  f7fffffe          BL       uart_putchar
004f0a  210a              MOVS     r1,#0xa
004f0c  484f              LDR      r0,|L1.20556|
004f0e  f7fffffe          BL       uart_putchar
;;;603    								
;;;604    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004f12  bf00              NOP      
                  |L1.20244|
004f14  494e              LDR      r1,|L1.20560|
004f16  484f              LDR      r0,|L1.20564|
004f18  f7fffffe          BL       strstr
004f1c  2800              CMP      r0,#0
004f1e  d10a              BNE      |L1.20278|
004f20  494b              LDR      r1,|L1.20560|
004f22  398c              SUBS     r1,r1,#0x8c
004f24  484b              LDR      r0,|L1.20564|
004f26  f7fffffe          BL       strstr
004f2a  2800              CMP      r0,#0
004f2c  d103              BNE      |L1.20278|
004f2e  484a              LDR      r0,|L1.20568|
004f30  6800              LDR      r0,[r0,#0]  ; tout
004f32  2805              CMP      r0,#5
004f34  ddee              BLE      |L1.20244|
                  |L1.20278|
;;;605    									{}
;;;606    	                 memset(data,0,strlen(data));
004f36  4849              LDR      r0,|L1.20572|
004f38  f7fffffe          BL       strlen
004f3c  4601              MOV      r1,r0
004f3e  9001              STR      r0,[sp,#4]
004f40  4846              LDR      r0,|L1.20572|
004f42  f7fffffe          BL       __aeabi_memclr
;;;607    									 clear();
004f46  f7fffffe          BL       clear
;;;608      								logged=1;}			//
004f4a  2001              MOVS     r0,#1
004f4c  4949              LDR      r1,|L1.20596|
004f4e  6008              STR      r0,[r1,#0]  ; logged
                  |L1.20304|
;;;609    
;;;610    							
;;;611    
;;;612    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;613    	else
;;;614    	{
;;;615    		//send_chunk();
;;;616    	}		
;;;617    								
;;;618    								
;;;619    								
;;;620    	memset(data,0,strlen(data));	
004f50  4842              LDR      r0,|L1.20572|
004f52  f7fffffe          BL       strlen
004f56  4601              MOV      r1,r0
004f58  9001              STR      r0,[sp,#4]
004f5a  4840              LDR      r0,|L1.20572|
004f5c  f7fffffe          BL       __aeabi_memclr
;;;621    	uart_putchar(UART1_BASE_PTR, 0x1A);
004f60  211a              MOVS     r1,#0x1a
004f62  483a              LDR      r0,|L1.20556|
004f64  f7fffffe          BL       uart_putchar
                  |L1.20328|
;;;622    
;;;623    while(1)
004f68  e3fe              B        |L1.22376|
                  |L1.20330|
;;;624    {
;;;625    LED_state();
004f6a  f7fffffe          BL       LED_state
;;;626    LED_state2();
004f6e  f7fffffe          BL       LED_state2
;;;627    RESET_ON; //not reset
004f72  2020              MOVS     r0,#0x20
004f74  4940              LDR      r1,|L1.20600|
004f76  6048              STR      r0,[r1,#4]
;;;628    msg_sim800(); 
004f78  f7fffffe          BL       msg_sim800
;;;629    	DTR_OFF;		// not sleep	
004f7c  2080              MOVS     r0,#0x80
004f7e  493e              LDR      r1,|L1.20600|
004f80  3140              ADDS     r1,r1,#0x40
004f82  6088              STR      r0,[r1,#8]
;;;630    	delay(200);
004f84  20c8              MOVS     r0,#0xc8
004f86  f7fffffe          BL       delay
;;;631    
;;;632    	sleep_flag=0;
004f8a  2000              MOVS     r0,#0
004f8c  493b              LDR      r1,|L1.20604|
004f8e  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;633    //	if(voltagecbc<4000){breach=1;}
;;;634    //	else{breach=0;}
;;;635    	if(	(GPIOC_PDIR & 0x00000001) || (GPIOB_PDIR & 0x00000001)){
004f90  4839              LDR      r0,|L1.20600|
004f92  6900              LDR      r0,[r0,#0x10]
004f94  07c0              LSLS     r0,r0,#31
004f96  0fc0              LSRS     r0,r0,#31
004f98  2800              CMP      r0,#0
004f9a  d106              BNE      |L1.20394|
004f9c  4836              LDR      r0,|L1.20600|
004f9e  3840              SUBS     r0,r0,#0x40
004fa0  6900              LDR      r0,[r0,#0x10]
004fa2  07c0              LSLS     r0,r0,#31
004fa4  0fc0              LSRS     r0,r0,#31
004fa6  2800              CMP      r0,#0
004fa8  d007              BEQ      |L1.20410|
                  |L1.20394|
;;;636    	DTR_OFF;sleep_flag = 0;
004faa  2080              MOVS     r0,#0x80
004fac  4932              LDR      r1,|L1.20600|
004fae  3140              ADDS     r1,r1,#0x40
004fb0  6088              STR      r0,[r1,#8]
004fb2  2000              MOVS     r0,#0
004fb4  4931              LDR      r1,|L1.20604|
004fb6  6008              STR      r0,[r1,#0]  ; sleep_flag
004fb8  e006              B        |L1.20424|
                  |L1.20410|
;;;637    	}
;;;638    	else{
;;;639    	DTR_ON;sleep_flag=1;
004fba  2080              MOVS     r0,#0x80
004fbc  492e              LDR      r1,|L1.20600|
004fbe  3140              ADDS     r1,r1,#0x40
004fc0  6048              STR      r0,[r1,#4]
004fc2  2001              MOVS     r0,#1
004fc4  492d              LDR      r1,|L1.20604|
004fc6  6008              STR      r0,[r1,#0]  ; sleep_flag
                  |L1.20424|
;;;640    	}
;;;641    
;;;642    	
;;;643    	
;;;644    if(rtcticks2>=1500){
004fc8  482d              LDR      r0,|L1.20608|
004fca  6800              LDR      r0,[r0,#0]  ; rtcticks2
004fcc  492d              LDR      r1,|L1.20612|
004fce  4288              CMP      r0,r1
004fd0  db3b              BLT      |L1.20554|
;;;645    	DTR_OFF;
004fd2  2080              MOVS     r0,#0x80
004fd4  4928              LDR      r1,|L1.20600|
004fd6  3140              ADDS     r1,r1,#0x40
004fd8  6088              STR      r0,[r1,#8]
;;;646    	send_modem("\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n");
004fda  a02b              ADR      r0,|L1.20616|
004fdc  f7fffffe          BL       send_modem
;;;647    	clear();
004fe0  f7fffffe          BL       clear
;;;648    		delay(100);
004fe4  2064              MOVS     r0,#0x64
004fe6  f7fffffe          BL       delay
;;;649    
;;;650    	savecursor();
004fea  f7fffffe          BL       savecursor
;;;651    	
;;;652    				memset(at_,0,100);
004fee  2164              MOVS     r1,#0x64
004ff0  481b              LDR      r0,|L1.20576|
004ff2  f7fffffe          BL       __aeabi_memclr
;;;653    				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004ff6  4819              LDR      r0,|L1.20572|
004ff8  f7fffffe          BL       strlen
004ffc  1c40              ADDS     r0,r0,#1
004ffe  4603              MOV      r3,r0
005000  4a18              LDR      r2,|L1.20580|
005002  4913              LDR      r1,|L1.20560|
005004  3938              SUBS     r1,r1,#0x38
005006  9001              STR      r0,[sp,#4]
005008  4815              LDR      r0,|L1.20576|
00500a  f7fffffe          BL       __2sprintf
;;;654    				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00500e  2005              MOVS     r0,#5
005010  4b0f              LDR      r3,|L1.20560|
005012  3b8c              SUBS     r3,r3,#0x8c
005014  461a              MOV      r2,r3
005016  3278              ADDS     r2,r2,#0x78
005018  a113              ADR      r1,|L1.20584|
00501a  9000              STR      r0,[sp,#0]
00501c  4810              LDR      r0,|L1.20576|
00501e  f7fffffe          BL       send_SD
;;;655    if(strstr(uart_string_gsm,"ERROR")){
005022  490b              LDR      r1,|L1.20560|
005024  398c              SUBS     r1,r1,#0x8c
005026  480b              LDR      r0,|L1.20564|
005028  f7fffffe          BL       strstr
00502c  2800              CMP      r0,#0
00502e  d004              BEQ      |L1.20538|
;;;656    	drive[0]='C';drive[1]=':';
005030  2043              MOVS     r0,#0x43
005032  490c              LDR      r1,|L1.20580|
005034  7008              STRB     r0,[r1,#0]
005036  203a              MOVS     r0,#0x3a
005038  7048              STRB     r0,[r1,#1]
                  |L1.20538|
;;;657    }	
;;;658    				//clear();	
;;;659    				k2=0;									//string array counter for uart 1
00503a  2000              MOVS     r0,#0
00503c  490b              LDR      r1,|L1.20588|
00503e  6008              STR      r0,[r1,#0]  ; k2
;;;660    				tout=0;	
005040  4905              LDR      r1,|L1.20568|
005042  6008              STR      r0,[r1,#0]  ; tout
;;;661    				for(k=0;k<strlen(data);k++)
005044  490a              LDR      r1,|L1.20592|
005046  6008              STR      r0,[r1,#0]  ; k
005048  e04c              B        |L1.20708|
                  |L1.20554|
00504a  e159              B        |L1.21248|
                  |L1.20556|
                          DCD      0x4006b000
                  |L1.20560|
                          DCD      ||.text||+0x8fc
                  |L1.20564|
                          DCD      uart_string_gsm
                  |L1.20568|
                          DCD      tout
                  |L1.20572|
                          DCD      data
                  |L1.20576|
                          DCD      at_
                  |L1.20580|
                          DCD      drive
                  |L1.20584|
005068  3e00              DCB      ">",0
00506a  00                DCB      0
00506b  00                DCB      0
                  |L1.20588|
                          DCD      ||k2||
                  |L1.20592|
                          DCD      k
                  |L1.20596|
                          DCD      logged
                  |L1.20600|
                          DCD      0x400ff080
                  |L1.20604|
                          DCD      sleep_flag
                  |L1.20608|
                          DCD      rtcticks2
                  |L1.20612|
                          DCD      0x000005dc
                  |L1.20616|
005088  0d0a0d0a          DCB      "\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n"
00508c  0d0a0a0a
005090  0a0a0a44
005094  45564943
005098  45204953
00509c  20524553
0050a0  45545449
0050a4  4e472e2e
0050a8  2e2e2e2e
0050ac  2e0a0a0a
0050b0  0a      
0050b1  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n",0
0050b5  0a0a0a0a
0050b9  0a0a0a0a
0050bd  0a0a0a0a
0050c1  0a0a0d0a
0050c5  0a0a00  
                  |L1.20680|
;;;662    				{
;;;663    					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0050c8  48fd              LDR      r0,|L1.21696|
0050ca  49fe              LDR      r1,|L1.21700|
0050cc  6809              LDR      r1,[r1,#0]  ; k
0050ce  5c40              LDRB     r0,[r0,r1]
0050d0  4601              MOV      r1,r0
0050d2  9001              STR      r0,[sp,#4]
0050d4  48fc              LDR      r0,|L1.21704|
0050d6  f7fffffe          BL       uart_putchar
0050da  48fa              LDR      r0,|L1.21700|
0050dc  6800              LDR      r0,[r0,#0]            ;661  ; k
0050de  1c40              ADDS     r0,r0,#1              ;661
0050e0  49f8              LDR      r1,|L1.21700|
0050e2  6008              STR      r0,[r1,#0]            ;661  ; k
                  |L1.20708|
0050e4  48f6              LDR      r0,|L1.21696|
0050e6  f7fffffe          BL       strlen
0050ea  49f6              LDR      r1,|L1.21700|
0050ec  6809              LDR      r1,[r1,#0]            ;661  ; k
0050ee  4288              CMP      r0,r1                 ;661
0050f0  d8ea              BHI      |L1.20680|
;;;664    				}	
;;;665    				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0050f2  210a              MOVS     r1,#0xa
0050f4  48f4              LDR      r0,|L1.21704|
0050f6  f7fffffe          BL       uart_putchar
0050fa  210a              MOVS     r1,#0xa
0050fc  48f2              LDR      r0,|L1.21704|
0050fe  f7fffffe          BL       uart_putchar
005102  210a              MOVS     r1,#0xa
005104  48f0              LDR      r0,|L1.21704|
005106  f7fffffe          BL       uart_putchar
00510a  210a              MOVS     r1,#0xa
00510c  48ee              LDR      r0,|L1.21704|
00510e  f7fffffe          BL       uart_putchar
005112  210a              MOVS     r1,#0xa
005114  48ec              LDR      r0,|L1.21704|
005116  f7fffffe          BL       uart_putchar
00511a  210a              MOVS     r1,#0xa
00511c  48ea              LDR      r0,|L1.21704|
00511e  f7fffffe          BL       uart_putchar
005122  210a              MOVS     r1,#0xa
005124  48e8              LDR      r0,|L1.21704|
005126  f7fffffe          BL       uart_putchar
00512a  210a              MOVS     r1,#0xa
00512c  48e6              LDR      r0,|L1.21704|
00512e  f7fffffe          BL       uart_putchar
005132  210a              MOVS     r1,#0xa
005134  48e4              LDR      r0,|L1.21704|
005136  f7fffffe          BL       uart_putchar
00513a  210a              MOVS     r1,#0xa
00513c  48e2              LDR      r0,|L1.21704|
00513e  f7fffffe          BL       uart_putchar
005142  210a              MOVS     r1,#0xa
005144  48e0              LDR      r0,|L1.21704|
005146  f7fffffe          BL       uart_putchar
00514a  210a              MOVS     r1,#0xa
00514c  48de              LDR      r0,|L1.21704|
00514e  f7fffffe          BL       uart_putchar
005152  210a              MOVS     r1,#0xa
005154  48dc              LDR      r0,|L1.21704|
005156  f7fffffe          BL       uart_putchar
00515a  210a              MOVS     r1,#0xa
00515c  48da              LDR      r0,|L1.21704|
00515e  f7fffffe          BL       uart_putchar
005162  210a              MOVS     r1,#0xa
005164  48d8              LDR      r0,|L1.21704|
005166  f7fffffe          BL       uart_putchar
00516a  210a              MOVS     r1,#0xa
00516c  48d6              LDR      r0,|L1.21704|
00516e  f7fffffe          BL       uart_putchar
005172  210a              MOVS     r1,#0xa
005174  48d4              LDR      r0,|L1.21704|
005176  f7fffffe          BL       uart_putchar
00517a  210a              MOVS     r1,#0xa
00517c  48d2              LDR      r0,|L1.21704|
00517e  f7fffffe          BL       uart_putchar
005182  210a              MOVS     r1,#0xa
005184  48d0              LDR      r0,|L1.21704|
005186  f7fffffe          BL       uart_putchar
00518a  210a              MOVS     r1,#0xa
00518c  48ce              LDR      r0,|L1.21704|
00518e  f7fffffe          BL       uart_putchar
005192  210a              MOVS     r1,#0xa
005194  48cc              LDR      r0,|L1.21704|
005196  f7fffffe          BL       uart_putchar
00519a  210a              MOVS     r1,#0xa
00519c  48ca              LDR      r0,|L1.21704|
00519e  f7fffffe          BL       uart_putchar
0051a2  210a              MOVS     r1,#0xa
0051a4  48c8              LDR      r0,|L1.21704|
0051a6  f7fffffe          BL       uart_putchar
0051aa  210a              MOVS     r1,#0xa
0051ac  48c6              LDR      r0,|L1.21704|
0051ae  f7fffffe          BL       uart_putchar
0051b2  210a              MOVS     r1,#0xa
0051b4  48c4              LDR      r0,|L1.21704|
0051b6  f7fffffe          BL       uart_putchar
0051ba  210a              MOVS     r1,#0xa
0051bc  48c2              LDR      r0,|L1.21704|
0051be  f7fffffe          BL       uart_putchar
0051c2  210a              MOVS     r1,#0xa
0051c4  48c0              LDR      r0,|L1.21704|
0051c6  f7fffffe          BL       uart_putchar
0051ca  210a              MOVS     r1,#0xa
0051cc  48be              LDR      r0,|L1.21704|
0051ce  f7fffffe          BL       uart_putchar
0051d2  210a              MOVS     r1,#0xa
0051d4  48bc              LDR      r0,|L1.21704|
0051d6  f7fffffe          BL       uart_putchar
0051da  210a              MOVS     r1,#0xa
0051dc  48ba              LDR      r0,|L1.21704|
0051de  f7fffffe          BL       uart_putchar
0051e2  210a              MOVS     r1,#0xa
0051e4  48b8              LDR      r0,|L1.21704|
0051e6  f7fffffe          BL       uart_putchar
0051ea  210a              MOVS     r1,#0xa
0051ec  48b6              LDR      r0,|L1.21704|
0051ee  f7fffffe          BL       uart_putchar
0051f2  210a              MOVS     r1,#0xa
0051f4  48b4              LDR      r0,|L1.21704|
0051f6  f7fffffe          BL       uart_putchar
0051fa  210a              MOVS     r1,#0xa
0051fc  48b2              LDR      r0,|L1.21704|
0051fe  f7fffffe          BL       uart_putchar
005202  210a              MOVS     r1,#0xa
005204  48b0              LDR      r0,|L1.21704|
005206  f7fffffe          BL       uart_putchar
00520a  210a              MOVS     r1,#0xa
00520c  48ae              LDR      r0,|L1.21704|
00520e  f7fffffe          BL       uart_putchar
005212  210a              MOVS     r1,#0xa
005214  48ac              LDR      r0,|L1.21704|
005216  f7fffffe          BL       uart_putchar
00521a  210a              MOVS     r1,#0xa
00521c  48aa              LDR      r0,|L1.21704|
00521e  f7fffffe          BL       uart_putchar
005222  210a              MOVS     r1,#0xa
005224  48a8              LDR      r0,|L1.21704|
005226  f7fffffe          BL       uart_putchar
00522a  210a              MOVS     r1,#0xa
00522c  48a6              LDR      r0,|L1.21704|
00522e  f7fffffe          BL       uart_putchar
005232  210a              MOVS     r1,#0xa
005234  48a4              LDR      r0,|L1.21704|
005236  f7fffffe          BL       uart_putchar
00523a  210a              MOVS     r1,#0xa
00523c  48a2              LDR      r0,|L1.21704|
00523e  f7fffffe          BL       uart_putchar
005242  210a              MOVS     r1,#0xa
005244  48a0              LDR      r0,|L1.21704|
005246  f7fffffe          BL       uart_putchar
00524a  210a              MOVS     r1,#0xa
00524c  489e              LDR      r0,|L1.21704|
00524e  f7fffffe          BL       uart_putchar
005252  210a              MOVS     r1,#0xa
005254  489c              LDR      r0,|L1.21704|
005256  f7fffffe          BL       uart_putchar
00525a  210a              MOVS     r1,#0xa
00525c  489a              LDR      r0,|L1.21704|
00525e  f7fffffe          BL       uart_putchar
005262  210a              MOVS     r1,#0xa
005264  4898              LDR      r0,|L1.21704|
005266  f7fffffe          BL       uart_putchar
00526a  210a              MOVS     r1,#0xa
00526c  4896              LDR      r0,|L1.21704|
00526e  f7fffffe          BL       uart_putchar
005272  210a              MOVS     r1,#0xa
005274  4894              LDR      r0,|L1.21704|
005276  f7fffffe          BL       uart_putchar
00527a  210a              MOVS     r1,#0xa
00527c  4892              LDR      r0,|L1.21704|
00527e  f7fffffe          BL       uart_putchar
005282  210a              MOVS     r1,#0xa
005284  4890              LDR      r0,|L1.21704|
005286  f7fffffe          BL       uart_putchar
00528a  210a              MOVS     r1,#0xa
00528c  488e              LDR      r0,|L1.21704|
00528e  f7fffffe          BL       uart_putchar
005292  210a              MOVS     r1,#0xa
005294  488c              LDR      r0,|L1.21704|
005296  f7fffffe          BL       uart_putchar
00529a  210a              MOVS     r1,#0xa
00529c  488a              LDR      r0,|L1.21704|
00529e  f7fffffe          BL       uart_putchar
0052a2  210a              MOVS     r1,#0xa
0052a4  4888              LDR      r0,|L1.21704|
0052a6  f7fffffe          BL       uart_putchar
0052aa  210a              MOVS     r1,#0xa
0052ac  4886              LDR      r0,|L1.21704|
0052ae  f7fffffe          BL       uart_putchar
0052b2  210a              MOVS     r1,#0xa
0052b4  4884              LDR      r0,|L1.21704|
0052b6  f7fffffe          BL       uart_putchar
;;;666    				//memset(data,0,1000);
;;;667    				//timer counts to wait for characters in uart 1 									
;;;668    				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0052ba  bf00              NOP      
                  |L1.21180|
0052bc  4983              LDR      r1,|L1.21708|
0052be  4884              LDR      r0,|L1.21712|
0052c0  f7fffffe          BL       strstr
0052c4  2800              CMP      r0,#0
0052c6  d10a              BNE      |L1.21214|
0052c8  4980              LDR      r1,|L1.21708|
0052ca  398c              SUBS     r1,r1,#0x8c
0052cc  4880              LDR      r0,|L1.21712|
0052ce  f7fffffe          BL       strstr
0052d2  2800              CMP      r0,#0
0052d4  d103              BNE      |L1.21214|
0052d6  487f              LDR      r0,|L1.21716|
0052d8  6800              LDR      r0,[r0,#0]  ; tout
0052da  2805              CMP      r0,#5
0052dc  ddee              BLE      |L1.21180|
                  |L1.21214|
;;;669    				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;670    				}
;;;671    				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;672    				//memset(data,0,strlen(data));
;;;673    				//clear();
;;;674    	RESET_OFF;
0052de  2020              MOVS     r0,#0x20
0052e0  497d              LDR      r1,|L1.21720|
0052e2  6088              STR      r0,[r1,#8]
;;;675    	RESET_OFF;
0052e4  6088              STR      r0,[r1,#8]
;;;676    	delay(100);	
0052e6  2064              MOVS     r0,#0x64
0052e8  f7fffffe          BL       delay
;;;677    	RESET_ON;
0052ec  2020              MOVS     r0,#0x20
0052ee  497a              LDR      r1,|L1.21720|
0052f0  6048              STR      r0,[r1,#4]
;;;678    	RESET_ON;	
0052f2  6048              STR      r0,[r1,#4]
;;;679    	delay(100);
0052f4  2064              MOVS     r0,#0x64
0052f6  f7fffffe          BL       delay
;;;680    	rtcticks2 =0;
0052fa  2000              MOVS     r0,#0
0052fc  4977              LDR      r1,|L1.21724|
0052fe  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.21248|
;;;681    
;;;682    	}//3600	
;;;683    memset(at_,0,100);
005300  2164              MOVS     r1,#0x64
005302  4877              LDR      r0,|L1.21728|
005304  f7fffffe          BL       __aeabi_memclr
;;;684    sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>         \n \n\n\r\n",aliveping,k5,rtcticks2);							
005308  4874              LDR      r0,|L1.21724|
00530a  6800              LDR      r0,[r0,#0]  ; rtcticks2
00530c  9000              STR      r0,[sp,#0]
00530e  4875              LDR      r0,|L1.21732|
005310  6803              LDR      r3,[r0,#0]  ; k5
005312  4875              LDR      r0,|L1.21736|
005314  a175              ADR      r1,|L1.21740|
005316  6802              LDR      r2,[r0,#0]  ; aliveping
005318  4871              LDR      r0,|L1.21728|
00531a  f7fffffe          BL       __2sprintf
;;;685    //send_modem(at_);
;;;686    //send_modem(num2);	
;;;687    	
;;;688    
;;;689    	
;;;690    if	((sleep_flag != 1  || (aliveping > 5) ) )			
00531e  4881              LDR      r0,|L1.21796|
005320  6800              LDR      r0,[r0,#0]  ; sleep_flag
005322  2801              CMP      r0,#1
005324  d104              BNE      |L1.21296|
005326  4870              LDR      r0,|L1.21736|
005328  6800              LDR      r0,[r0,#0]  ; aliveping
00532a  2805              CMP      r0,#5
00532c  dc00              BGT      |L1.21296|
00532e  e61b              B        |L1.20328|
                  |L1.21296|
;;;691    {
;;;692    	DTR_OFF;
005330  2080              MOVS     r0,#0x80
005332  4969              LDR      r1,|L1.21720|
005334  3140              ADDS     r1,r1,#0x40
005336  6088              STR      r0,[r1,#8]
;;;693    	sleep_flag=0;
005338  2000              MOVS     r0,#0
00533a  497a              LDR      r1,|L1.21796|
00533c  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;694    	send_GSM("\r\nAT+CIPCLOSE\r\n", "CLOSE OK", "ERROR" , "ERROR:",tmeout);		
00533e  487a              LDR      r0,|L1.21800|
005340  6800              LDR      r0,[r0,#0]  ; tmeout
005342  4b7a              LDR      r3,|L1.21804|
005344  4a61              LDR      r2,|L1.21708|
005346  3a8c              SUBS     r2,r2,#0x8c
005348  a179              ADR      r1,|L1.21808|
00534a  9000              STR      r0,[sp,#0]
00534c  a07b              ADR      r0,|L1.21820|
00534e  f7fffffe          BL       send_GSM
;;;695    	memset(at_,0,100);
005352  2164              MOVS     r1,#0x64
005354  4862              LDR      r0,|L1.21728|
005356  f7fffffe          BL       __aeabi_memclr
;;;696    	memset(data,0,strlen(data));
00535a  4859              LDR      r0,|L1.21696|
00535c  f7fffffe          BL       strlen
005360  4601              MOV      r1,r0
005362  9001              STR      r0,[sp,#4]
005364  4856              LDR      r0,|L1.21696|
005366  f7fffffe          BL       __aeabi_memclr
;;;697    
;;;698    	
;;;699    	if((aliveping>5))	
00536a  485f              LDR      r0,|L1.21736|
00536c  6800              LDR      r0,[r0,#0]  ; aliveping
00536e  2805              CMP      r0,#5
005370  dd73              BLE      |L1.21594|
;;;700    	{
;;;701    			memset(ignstr,0,2);
005372  4876              LDR      r0,|L1.21836|
005374  2100              MOVS     r1,#0
005376  7001              STRB     r1,[r0,#0]
005378  7041              STRB     r1,[r0,#1]
;;;702    if(GPIOB_PDIR & 0x00000001){
00537a  4857              LDR      r0,|L1.21720|
00537c  3840              SUBS     r0,r0,#0x40
00537e  6900              LDR      r0,[r0,#0x10]
005380  07c0              LSLS     r0,r0,#31
005382  0fc0              LSRS     r0,r0,#31
005384  2800              CMP      r0,#0
005386  d007              BEQ      |L1.21400|
;;;703    			sprintf(ignstr,"%d,%ld",1,rtcticks2);
005388  4854              LDR      r0,|L1.21724|
00538a  2201              MOVS     r2,#1
00538c  a170              ADR      r1,|L1.21840|
00538e  6803              LDR      r3,[r0,#0]  ; rtcticks2
005390  486e              LDR      r0,|L1.21836|
005392  f7fffffe          BL       __2sprintf
005396  e006              B        |L1.21414|
                  |L1.21400|
;;;704    }
;;;705    else{
;;;706    				sprintf(ignstr,"%d,%ld",0,rtcticks2);
005398  4850              LDR      r0,|L1.21724|
00539a  2200              MOVS     r2,#0
00539c  a16c              ADR      r1,|L1.21840|
00539e  6803              LDR      r3,[r0,#0]  ; rtcticks2
0053a0  486a              LDR      r0,|L1.21836|
0053a2  f7fffffe          BL       __2sprintf
                  |L1.21414|
;;;707    
;;;708    }
;;;709    
;;;710    memset(acstr,0,2); //ptb2
0053a6  486c              LDR      r0,|L1.21848|
0053a8  2100              MOVS     r1,#0
0053aa  8001              STRH     r1,[r0,#0]
;;;711    if(GPIOB_PDIR & 0x00000004){
0053ac  484a              LDR      r0,|L1.21720|
0053ae  3840              SUBS     r0,r0,#0x40
0053b0  6900              LDR      r0,[r0,#0x10]
0053b2  2104              MOVS     r1,#4
0053b4  4008              ANDS     r0,r0,r1
0053b6  2800              CMP      r0,#0
0053b8  d005              BEQ      |L1.21446|
;;;712    			sprintf(acstr,"%d",1);
0053ba  2201              MOVS     r2,#1
0053bc  a167              ADR      r1,|L1.21852|
0053be  4866              LDR      r0,|L1.21848|
0053c0  f7fffffe          BL       __2sprintf
0053c4  e004              B        |L1.21456|
                  |L1.21446|
;;;713    }
;;;714    else{
;;;715    				sprintf(acstr,"%d",0);
0053c6  2200              MOVS     r2,#0
0053c8  a164              ADR      r1,|L1.21852|
0053ca  4863              LDR      r0,|L1.21848|
0053cc  f7fffffe          BL       __2sprintf
                  |L1.21456|
;;;716    
;;;717    }
;;;718    
;;;719    		
;;;720    		aliveping=0;
0053d0  2000              MOVS     r0,#0
0053d2  4945              LDR      r1,|L1.21736|
0053d4  6008              STR      r0,[r1,#0]  ; aliveping
;;;721    		memset(data,0,strlen(data));	
0053d6  483a              LDR      r0,|L1.21696|
0053d8  f7fffffe          BL       strlen
0053dc  4601              MOV      r1,r0
0053de  9001              STR      r0,[sp,#4]
0053e0  4837              LDR      r0,|L1.21696|
0053e2  f7fffffe          BL       __aeabi_memclr
;;;722    		strcat(data,imei);strcat(data,",ALIVE,");strcat(data,num2);strcat(data,",F=");strcat(data,fuelstr);		strcat(data,",AC=");	
0053e6  495e              LDR      r1,|L1.21856|
0053e8  4835              LDR      r0,|L1.21696|
0053ea  f7fffffe          BL       strcat
0053ee  a15d              ADR      r1,|L1.21860|
0053f0  4833              LDR      r0,|L1.21696|
0053f2  f7fffffe          BL       strcat
0053f6  495d              LDR      r1,|L1.21868|
0053f8  4831              LDR      r0,|L1.21696|
0053fa  f7fffffe          BL       strcat
0053fe  a15c              ADR      r1,|L1.21872|
005400  482f              LDR      r0,|L1.21696|
005402  f7fffffe          BL       strcat
005406  495b              LDR      r1,|L1.21876|
005408  482d              LDR      r0,|L1.21696|
00540a  f7fffffe          BL       strcat
00540e  a15a              ADR      r1,|L1.21880|
005410  482b              LDR      r0,|L1.21696|
005412  f7fffffe          BL       strcat
;;;723    		strcat(data,acstr);
005416  4950              LDR      r1,|L1.21848|
005418  4829              LDR      r0,|L1.21696|
00541a  f7fffffe          BL       strcat
;;;724    		strcat(data,",I=");	
00541e  a158              ADR      r1,|L1.21888|
005420  4827              LDR      r0,|L1.21696|
005422  f7fffffe          BL       strcat
;;;725    		strcat(data,ignstr);
005426  4949              LDR      r1,|L1.21836|
005428  4825              LDR      r0,|L1.21696|
00542a  f7fffffe          BL       strcat
;;;726    		strcat(data,",RS232=");
00542e  a155              ADR      r1,|L1.21892|
005430  4823              LDR      r0,|L1.21696|
005432  f7fffffe          BL       strcat
;;;727    		strcat(data,id);
005436  4955              LDR      r1,|L1.21900|
005438  4821              LDR      r0,|L1.21696|
00543a  f7fffffe          BL       strcat
;;;728    		strcat(data,",");
00543e  a154              ADR      r1,|L1.21904|
005440  481f              LDR      r0,|L1.21696|
005442  f7fffffe          BL       strcat
;;;729    		memset(id,0,30);
005446  211e              MOVS     r1,#0x1e
005448  4850              LDR      r0,|L1.21900|
00544a  f7fffffe          BL       __aeabi_memclr
;;;730    		strcat(data,",\n\n\n"); 
00544e  a151              ADR      r1,|L1.21908|
005450  481b              LDR      r0,|L1.21696|
005452  f7fffffe          BL       strcat
005456  e002              B        |L1.21598|
005458  e7ff              B        |L1.21594|
                  |L1.21594|
;;;731    	}	
;;;732    	else{
;;;733    			GPS_COLLECT();	
00545a  f7fffffe          BL       GPS_COLLECT
                  |L1.21598|
;;;734    	}
;;;735    
;;;736    	msg_sim800(); 
00545e  f7fffffe          BL       msg_sim800
;;;737    	
;;;738    		sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005462  4b4e              LDR      r3,|L1.21916|
005464  4a4e              LDR      r2,|L1.21920|
005466  4931              LDR      r1,|L1.21804|
005468  3160              ADDS     r1,r1,#0x60
00546a  481d              LDR      r0,|L1.21728|
00546c  f7fffffe          BL       __2sprintf
;;;739    		send_GSM( at_ , "CONNECT", "ERROR" , "ERROR\r\n",tmeout);	
005470  482d              LDR      r0,|L1.21800|
005472  6800              LDR      r0,[r0,#0]  ; tmeout
005474  4b15              LDR      r3,|L1.21708|
005476  3b14              SUBS     r3,r3,#0x14
005478  461a              MOV      r2,r3
00547a  3a78              SUBS     r2,r2,#0x78
00547c  492b              LDR      r1,|L1.21804|
00547e  3180              ADDS     r1,r1,#0x80
005480  9000              STR      r0,[sp,#0]
005482  4817              LDR      r0,|L1.21728|
005484  f7fffffe          BL       send_GSM
;;;740    		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);	
005488  4827              LDR      r0,|L1.21800|
00548a  6800              LDR      r0,[r0,#0]  ; tmeout
00548c  4b27              LDR      r3,|L1.21804|
00548e  3388              ADDS     r3,r3,#0x88
005490  4a0e              LDR      r2,|L1.21708|
005492  3a8c              SUBS     r2,r2,#0x8c
005494  a143              ADR      r1,|L1.21924|
005496  9000              STR      r0,[sp,#0]
005498  4618              MOV      r0,r3
00549a  3010              ADDS     r0,r0,#0x10
00549c  f7fffffe          BL       send_GSM
;;;741    		memset(stcond1,0,strlen(stcond1));
0054a0  4841              LDR      r0,|L1.21928|
0054a2  6800              LDR      r0,[r0,#0]  ; stcond1
0054a4  f7fffffe          BL       strlen
0054a8  4601              MOV      r1,r0
0054aa  9001              STR      r0,[sp,#4]
0054ac  483e              LDR      r0,|L1.21928|
0054ae  6800              LDR      r0,[r0,#0]  ; stcond1
0054b0  f7fffffe          BL       __aeabi_memclr
;;;742    		memset(stcond2,0,strlen(stcond2));	
0054b4  483d              LDR      r0,|L1.21932|
0054b6  6800              LDR      r0,[r0,#0]  ; stcond2
0054b8  f7fffffe          BL       strlen
0054bc  4601              MOV      r1,r0
0054be  e077              B        |L1.21936|
                  |L1.21696|
                          DCD      data
                  |L1.21700|
                          DCD      k
                  |L1.21704|
                          DCD      0x4006b000
                  |L1.21708|
                          DCD      ||.text||+0x8fc
                  |L1.21712|
                          DCD      uart_string_gsm
                  |L1.21716|
                          DCD      tout
                  |L1.21720|
                          DCD      0x400ff080
                  |L1.21724|
                          DCD      rtcticks2
                  |L1.21728|
                          DCD      at_
                  |L1.21732|
                          DCD      ||k5||
                  |L1.21736|
                          DCD      aliveping
                  |L1.21740|
0054ec  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>         \n \n"
0054f0  20202020
0054f4  20202020
0054f8  20202020
0054fc  20203c25
005500  643e2020
005504  203c2564
005508  3e202020
00550c  3c3d2564
005510  3e202020
005514  20202020
005518  20200a20
00551c  0a      
00551d  0a0d0a00          DCB      "\n\r\n",0
005521  00                DCB      0
005522  00                DCB      0
005523  00                DCB      0
                  |L1.21796|
                          DCD      sleep_flag
                  |L1.21800|
                          DCD      tmeout
                  |L1.21804|
                          DCD      ||.text||+0xd54
                  |L1.21808|
005530  434c4f53          DCB      "CLOSE OK",0
005534  45204f4b
005538  00      
005539  00                DCB      0
00553a  00                DCB      0
00553b  00                DCB      0
                  |L1.21820|
00553c  0d0a4154          DCB      "\r\nAT+CIPCLOSE\r\n",0
005540  2b434950
005544  434c4f53
005548  450d0a00
                  |L1.21836|
                          DCD      ignstr
                  |L1.21840|
005550  25642c25          DCB      "%d,%ld",0
005554  6c6400  
005557  00                DCB      0
                  |L1.21848|
                          DCD      acstr
                  |L1.21852|
00555c  256400            DCB      "%d",0
00555f  00                DCB      0
                  |L1.21856|
                          DCD      imei
                  |L1.21860|
005564  2c414c49          DCB      ",ALIVE,",0
005568  56452c00
                  |L1.21868|
                          DCD      num2
                  |L1.21872|
005570  2c463d00          DCB      ",F=",0
                  |L1.21876|
                          DCD      fuelstr
                  |L1.21880|
005578  2c41433d          DCB      ",AC=",0
00557c  00      
00557d  00                DCB      0
00557e  00                DCB      0
00557f  00                DCB      0
                  |L1.21888|
005580  2c493d00          DCB      ",I=",0
                  |L1.21892|
005584  2c525332          DCB      ",RS232=",0
005588  33323d00
                  |L1.21900|
                          DCD      ||id||
                  |L1.21904|
005590  2c00              DCB      ",",0
005592  00                DCB      0
005593  00                DCB      0
                  |L1.21908|
005594  2c0a0a0a          DCB      ",\n\n\n",0
005598  00      
005599  00                DCB      0
00559a  00                DCB      0
00559b  00                DCB      0
                  |L1.21916|
                          DCD      port
                  |L1.21920|
                          DCD      ||ip||
                  |L1.21924|
0055a4  3e00              DCB      ">",0
0055a6  00                DCB      0
0055a7  00                DCB      0
                  |L1.21928|
                          DCD      stcond1
                  |L1.21932|
                          DCD      stcond2
                  |L1.21936|
0055b0  9001              STR      r0,[sp,#4]
0055b2  48fe              LDR      r0,|L1.22956|
0055b4  6800              LDR      r0,[r0,#0]  ; stcond2
0055b6  f7fffffe          BL       __aeabi_memclr
;;;743    		memset(stcond3,0,strlen(stcond3));	
0055ba  48fd              LDR      r0,|L1.22960|
0055bc  6800              LDR      r0,[r0,#0]  ; stcond3
0055be  f7fffffe          BL       strlen
0055c2  4601              MOV      r1,r0
0055c4  9001              STR      r0,[sp,#4]
0055c6  48fa              LDR      r0,|L1.22960|
0055c8  6800              LDR      r0,[r0,#0]  ; stcond3
0055ca  f7fffffe          BL       __aeabi_memclr
;;;744    		memset(stcond4,0,strlen(stcond4));	
0055ce  48f9              LDR      r0,|L1.22964|
0055d0  6800              LDR      r0,[r0,#0]  ; stcond4
0055d2  f7fffffe          BL       strlen
0055d6  4601              MOV      r1,r0
0055d8  9001              STR      r0,[sp,#4]
0055da  48f6              LDR      r0,|L1.22964|
0055dc  6800              LDR      r0,[r0,#0]  ; stcond4
0055de  f7fffffe          BL       __aeabi_memclr
;;;745    		memset(con1d,0,strlen(con1d));	
0055e2  48f5              LDR      r0,|L1.22968|
0055e4  6800              LDR      r0,[r0,#0]  ; con1d
0055e6  f7fffffe          BL       strlen
0055ea  4601              MOV      r1,r0
0055ec  9001              STR      r0,[sp,#4]
0055ee  48f2              LDR      r0,|L1.22968|
0055f0  6800              LDR      r0,[r0,#0]  ; con1d
0055f2  f7fffffe          BL       __aeabi_memclr
;;;746    		cond=0;
0055f6  2000              MOVS     r0,#0
0055f8  49f0              LDR      r1,|L1.22972|
0055fa  7008              STRB     r0,[r1,#0]
;;;747    								cond=mystrstr(uart_string_gsm,'>');
0055fc  213e              MOVS     r1,#0x3e
0055fe  48f0              LDR      r0,|L1.22976|
005600  f7fffffe          BL       mystrstr
005604  49ed              LDR      r1,|L1.22972|
005606  7008              STRB     r0,[r1,#0]
;;;748    	
;;;749    								if(cond)	
005608  4608              MOV      r0,r1
00560a  7800              LDRB     r0,[r0,#0]  ; cond
00560c  2800              CMP      r0,#0
00560e  d07d              BEQ      |L1.22284|
;;;750    								{		
;;;751    									clear();
005610  f7fffffe          BL       clear
;;;752    									memset(uart_string_gsm,0,5000);
005614  49eb              LDR      r1,|L1.22980|
005616  48ea              LDR      r0,|L1.22976|
005618  f7fffffe          BL       __aeabi_memclr
;;;753    									strcat(data,"\n\n");
00561c  a1ea              ADR      r1,|L1.22984|
00561e  48eb              LDR      r0,|L1.22988|
005620  f7fffffe          BL       strcat
;;;754    									len=strlen(data);
005624  48e9              LDR      r0,|L1.22988|
005626  f7fffffe          BL       strlen
00562a  49e9              LDR      r1,|L1.22992|
00562c  6008              STR      r0,[r1,#0]  ; len
;;;755    									tout=0;
00562e  2000              MOVS     r0,#0
005630  49e8              LDR      r1,|L1.22996|
005632  6008              STR      r0,[r1,#0]  ; tout
;;;756    									k2=0;
005634  49e8              LDR      r1,|L1.23000|
005636  6008              STR      r0,[r1,#0]  ; k2
;;;757    									for(k=0;k<len;k++)
005638  49e8              LDR      r1,|L1.23004|
00563a  6008              STR      r0,[r1,#0]  ; k
00563c  e00d              B        |L1.22106|
                  |L1.22078|
;;;758    									{
;;;759    										uart_putchar(UART1_BASE_PTR, data[k]);
00563e  48e3              LDR      r0,|L1.22988|
005640  49e6              LDR      r1,|L1.23004|
005642  6809              LDR      r1,[r1,#0]  ; k
005644  5c40              LDRB     r0,[r0,r1]
005646  4601              MOV      r1,r0
005648  9001              STR      r0,[sp,#4]
00564a  48e5              LDR      r0,|L1.23008|
00564c  f7fffffe          BL       uart_putchar
005650  48e2              LDR      r0,|L1.23004|
005652  6800              LDR      r0,[r0,#0]            ;757  ; k
005654  1c40              ADDS     r0,r0,#1              ;757
005656  49e1              LDR      r1,|L1.23004|
005658  6008              STR      r0,[r1,#0]            ;757  ; k
                  |L1.22106|
00565a  48e0              LDR      r0,|L1.23004|
00565c  6800              LDR      r0,[r0,#0]            ;757  ; k
00565e  49dc              LDR      r1,|L1.22992|
005660  6809              LDR      r1,[r1,#0]            ;757  ; len
005662  4288              CMP      r0,r1                 ;757
005664  dbeb              BLT      |L1.22078|
;;;760    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005666  210a              MOVS     r1,#0xa
005668  48dd              LDR      r0,|L1.23008|
00566a  f7fffffe          BL       uart_putchar
00566e  211a              MOVS     r1,#0x1a
005670  48db              LDR      r0,|L1.23008|
005672  f7fffffe          BL       uart_putchar
005676  211a              MOVS     r1,#0x1a
005678  48d9              LDR      r0,|L1.23008|
00567a  f7fffffe          BL       uart_putchar
00567e  211a              MOVS     r1,#0x1a
005680  48d7              LDR      r0,|L1.23008|
005682  f7fffffe          BL       uart_putchar
005686  211a              MOVS     r1,#0x1a
005688  48d5              LDR      r0,|L1.23008|
00568a  f7fffffe          BL       uart_putchar
00568e  211a              MOVS     r1,#0x1a
005690  48d3              LDR      r0,|L1.23008|
005692  f7fffffe          BL       uart_putchar
;;;761    									do
005696  bf00              NOP      
                  |L1.22168|
;;;762    																{stcond1=strstr(uart_string_gsm,"SEND OK");
005698  49d2              LDR      r1,|L1.23012|
00569a  48c9              LDR      r0,|L1.22976|
00569c  f7fffffe          BL       strstr
0056a0  49d1              LDR      r1,|L1.23016|
0056a2  6008              STR      r0,[r1,#0]  ; stcond1
;;;763    																	stcond2=strstr(uart_string_gsm, "ERROR");
0056a4  49d1              LDR      r1,|L1.23020|
0056a6  48c6              LDR      r0,|L1.22976|
0056a8  f7fffffe          BL       strstr
0056ac  49bf              LDR      r1,|L1.22956|
0056ae  6008              STR      r0,[r1,#0]  ; stcond2
;;;764    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0056b0  49cf              LDR      r1,|L1.23024|
0056b2  48c3              LDR      r0,|L1.22976|
0056b4  f7fffffe          BL       strstr
0056b8  49bd              LDR      r1,|L1.22960|
0056ba  6008              STR      r0,[r1,#0]  ; stcond3
;;;765    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0056bc  49cb              LDR      r1,|L1.23020|
0056be  311c              ADDS     r1,r1,#0x1c
0056c0  48bf              LDR      r0,|L1.22976|
0056c2  f7fffffe          BL       strstr
0056c6  49bb              LDR      r1,|L1.22964|
0056c8  6008              STR      r0,[r1,#0]  ; stcond4
;;;766    																	
;;;767    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0056ca  48b8              LDR      r0,|L1.22956|
0056cc  6800              LDR      r0,[r0,#0]  ; stcond2
0056ce  2800              CMP      r0,#0
0056d0  d10f              BNE      |L1.22258|
0056d2  48b7              LDR      r0,|L1.22960|
0056d4  6800              LDR      r0,[r0,#0]  ; stcond3
0056d6  2800              CMP      r0,#0
0056d8  d10b              BNE      |L1.22258|
0056da  4608              MOV      r0,r1
0056dc  6800              LDR      r0,[r0,#0]  ; stcond4
0056de  2800              CMP      r0,#0
0056e0  d107              BNE      |L1.22258|
0056e2  48c1              LDR      r0,|L1.23016|
0056e4  6800              LDR      r0,[r0,#0]  ; stcond1
0056e6  2800              CMP      r0,#0
0056e8  d103              BNE      |L1.22258|
0056ea  48ba              LDR      r0,|L1.22996|
0056ec  6800              LDR      r0,[r0,#0]  ; tout
0056ee  2808              CMP      r0,#8
0056f0  ddd2              BLE      |L1.22168|
                  |L1.22258|
;;;768    																//delay(10);clear();
;;;769    														uart_putchar(UART1_BASE_PTR,0x1A);
0056f2  211a              MOVS     r1,#0x1a
0056f4  48ba              LDR      r0,|L1.23008|
0056f6  f7fffffe          BL       uart_putchar
;;;770    												//delay(10);
;;;771    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0056fa  211a              MOVS     r1,#0x1a
0056fc  48b8              LDR      r0,|L1.23008|
0056fe  f7fffffe          BL       uart_putchar
005702  211a              MOVS     r1,#0x1a
005704  48b6              LDR      r0,|L1.23008|
005706  f7fffffe          BL       uart_putchar
00570a  e000              B        |L1.22286|
                  |L1.22284|
00570c  e00c              B        |L1.22312|
                  |L1.22286|
00570e  211a              MOVS     r1,#0x1a
005710  48b3              LDR      r0,|L1.23008|
005712  f7fffffe          BL       uart_putchar
;;;772    								
;;;773    									delay(20);															
005716  2014              MOVS     r0,#0x14
005718  f7fffffe          BL       delay
;;;774    									stcond1=strstr(uart_string_gsm,"SEND OK"); 
00571c  49b1              LDR      r1,|L1.23012|
00571e  48a8              LDR      r0,|L1.22976|
005720  f7fffffe          BL       strstr
005724  49b0              LDR      r1,|L1.23016|
005726  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.22312|
;;;775    								}else{}
;;;776    stcond1=strstr(uart_string_gsm,"SEND OK"); 
005728  49ae              LDR      r1,|L1.23012|
00572a  48a5              LDR      r0,|L1.22976|
00572c  f7fffffe          BL       strstr
005730  49ad              LDR      r1,|L1.23016|
005732  6008              STR      r0,[r1,#0]  ; stcond1
;;;777    //checks for send ok
;;;778    if(!(stcond1) == 1 ) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
005734  4608              MOV      r0,r1
005736  6800              LDR      r0,[r0,#0]  ; stcond1
005738  2800              CMP      r0,#0
00573a  d101              BNE      |L1.22336|
00573c  2001              MOVS     r0,#1
00573e  e000              B        |L1.22338|
                  |L1.22336|
005740  2000              MOVS     r0,#0
                  |L1.22338|
005742  2801              CMP      r0,#1
005744  d17d              BNE      |L1.22594|
;;;779    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
005746  211a              MOVS     r1,#0x1a
005748  48a5              LDR      r0,|L1.23008|
00574a  f7fffffe          BL       uart_putchar
00574e  f7fffffe          BL       clear
005752  200a              MOVS     r0,#0xa
005754  f7fffffe          BL       delay
;;;780    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
005758  211a              MOVS     r1,#0x1a
00575a  48a1              LDR      r0,|L1.23008|
00575c  f7fffffe          BL       uart_putchar
005760  f7fffffe          BL       clear
005764  200a              MOVS     r0,#0xa
005766  e000              B        |L1.22378|
                  |L1.22376|
005768  e3fe              B        |L1.24424|
                  |L1.22378|
00576a  f7fffffe          BL       delay
;;;781    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00576e  211a              MOVS     r1,#0x1a
005770  489b              LDR      r0,|L1.23008|
005772  f7fffffe          BL       uart_putchar
005776  f7fffffe          BL       clear
00577a  200a              MOVS     r0,#0xa
00577c  f7fffffe          BL       delay
;;;782    									remove_all_chars(data, '\n', '\n');
005780  220a              MOVS     r2,#0xa
005782  4611              MOV      r1,r2
005784  4891              LDR      r0,|L1.22988|
005786  f7fffffe          BL       remove_all_chars
;;;783    									strcat(data,"CH\n");	
00578a  4998              LDR      r1,|L1.23020|
00578c  3148              ADDS     r1,r1,#0x48
00578e  488f              LDR      r0,|L1.22988|
005790  f7fffffe          BL       strcat
;;;784    									delay(100);
005794  2064              MOVS     r0,#0x64
005796  f7fffffe          BL       delay
;;;785    									clear();//memset(uart_string_gsm,0,5000);
00579a  f7fffffe          BL       clear
;;;786    									memset(at_,0,100);
00579e  2164              MOVS     r1,#0x64
0057a0  4894              LDR      r0,|L1.23028|
0057a2  f7fffffe          BL       __aeabi_memclr
;;;787    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0057a6  4889              LDR      r0,|L1.22988|
0057a8  f7fffffe          BL       strlen
0057ac  1c40              ADDS     r0,r0,#1
0057ae  4603              MOV      r3,r0
0057b0  4a91              LDR      r2,|L1.23032|
0057b2  498e              LDR      r1,|L1.23020|
0057b4  3154              ADDS     r1,r1,#0x54
0057b6  9001              STR      r0,[sp,#4]
0057b8  488e              LDR      r0,|L1.23028|
0057ba  f7fffffe          BL       __2sprintf
;;;788    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0057be  2005              MOVS     r0,#5
0057c0  4b8a              LDR      r3,|L1.23020|
0057c2  461a              MOV      r2,r3
0057c4  3278              ADDS     r2,r2,#0x78
0057c6  a18d              ADR      r1,|L1.23036|
0057c8  9000              STR      r0,[sp,#0]
0057ca  488a              LDR      r0,|L1.23028|
0057cc  f7fffffe          BL       send_SD
;;;789    if(strstr(uart_string_gsm,"ERROR")){
0057d0  4986              LDR      r1,|L1.23020|
0057d2  487b              LDR      r0,|L1.22976|
0057d4  f7fffffe          BL       strstr
0057d8  2800              CMP      r0,#0
0057da  d004              BEQ      |L1.22502|
;;;790    	drive[0]='C';drive[1]=':';
0057dc  2043              MOVS     r0,#0x43
0057de  4986              LDR      r1,|L1.23032|
0057e0  7008              STRB     r0,[r1,#0]
0057e2  203a              MOVS     r0,#0x3a
0057e4  7048              STRB     r0,[r1,#1]
                  |L1.22502|
;;;791    }	
;;;792    									clear();	
0057e6  f7fffffe          BL       clear
;;;793    									k2=0;									//string array counter for uart 1
0057ea  2000              MOVS     r0,#0
0057ec  497a              LDR      r1,|L1.23000|
0057ee  6008              STR      r0,[r1,#0]  ; k2
;;;794    									tout=0;	
0057f0  4978              LDR      r1,|L1.22996|
0057f2  6008              STR      r0,[r1,#0]  ; tout
;;;795    									for(k=0;k<strlen(data);k++)
0057f4  4979              LDR      r1,|L1.23004|
0057f6  6008              STR      r0,[r1,#0]  ; k
0057f8  e00d              B        |L1.22550|
                  |L1.22522|
;;;796    									{
;;;797    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0057fa  4874              LDR      r0,|L1.22988|
0057fc  4977              LDR      r1,|L1.23004|
0057fe  6809              LDR      r1,[r1,#0]  ; k
005800  5c40              LDRB     r0,[r0,r1]
005802  4601              MOV      r1,r0
005804  9001              STR      r0,[sp,#4]
005806  4876              LDR      r0,|L1.23008|
005808  f7fffffe          BL       uart_putchar
00580c  4873              LDR      r0,|L1.23004|
00580e  6800              LDR      r0,[r0,#0]            ;795  ; k
005810  1c40              ADDS     r0,r0,#1              ;795
005812  4972              LDR      r1,|L1.23004|
005814  6008              STR      r0,[r1,#0]            ;795  ; k
                  |L1.22550|
005816  486d              LDR      r0,|L1.22988|
005818  f7fffffe          BL       strlen
00581c  496f              LDR      r1,|L1.23004|
00581e  6809              LDR      r1,[r1,#0]            ;795  ; k
005820  4288              CMP      r0,r1                 ;795
005822  d8ea              BHI      |L1.22522|
;;;798    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005824  210a              MOVS     r1,#0xa
005826  486e              LDR      r0,|L1.23008|
005828  f7fffffe          BL       uart_putchar
00582c  210a              MOVS     r1,#0xa
00582e  486c              LDR      r0,|L1.23008|
005830  f7fffffe          BL       uart_putchar
005834  210a              MOVS     r1,#0xa
005836  486a              LDR      r0,|L1.23008|
005838  f7fffffe          BL       uart_putchar
;;;799    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');
00583c  210a              MOVS     r1,#0xa
00583e  4868              LDR      r0,|L1.23008|
005840  e000              B        |L1.22596|
                  |L1.22594|
005842  e3fd              B        |L1.24640|
                  |L1.22596|
005844  f7fffffe          BL       uart_putchar
005848  210a              MOVS     r1,#0xa
00584a  4865              LDR      r0,|L1.23008|
00584c  f7fffffe          BL       uart_putchar
005850  210a              MOVS     r1,#0xa
005852  4863              LDR      r0,|L1.23008|
005854  f7fffffe          BL       uart_putchar
;;;800    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005858  210a              MOVS     r1,#0xa
00585a  4861              LDR      r0,|L1.23008|
00585c  f7fffffe          BL       uart_putchar
005860  210a              MOVS     r1,#0xa
005862  485f              LDR      r0,|L1.23008|
005864  f7fffffe          BL       uart_putchar
005868  210a              MOVS     r1,#0xa
00586a  485d              LDR      r0,|L1.23008|
00586c  f7fffffe          BL       uart_putchar
;;;801    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 8) )))
005870  bf00              NOP      
                  |L1.22642|
005872  495e              LDR      r1,|L1.23020|
005874  318c              ADDS     r1,r1,#0x8c
005876  4852              LDR      r0,|L1.22976|
005878  f7fffffe          BL       strstr
00587c  2800              CMP      r0,#0
00587e  d109              BNE      |L1.22676|
005880  495a              LDR      r1,|L1.23020|
005882  484f              LDR      r0,|L1.22976|
005884  f7fffffe          BL       strstr
005888  2800              CMP      r0,#0
00588a  d103              BNE      |L1.22676|
00588c  4851              LDR      r0,|L1.22996|
00588e  6800              LDR      r0,[r0,#0]  ; tout
005890  2808              CMP      r0,#8
005892  ddee              BLE      |L1.22642|
                  |L1.22676|
;;;802    									{}
;;;803    									clear();
005894  f7fffffe          BL       clear
;;;804    									memset(data,0,strlen(data));
005898  484c              LDR      r0,|L1.22988|
00589a  f7fffffe          BL       strlen
00589e  4601              MOV      r1,r0
0058a0  9001              STR      r0,[sp,#4]
0058a2  484a              LDR      r0,|L1.22988|
0058a4  f7fffffe          BL       __aeabi_memclr
;;;805    									clear();
0058a8  f7fffffe          BL       clear
;;;806    									//	log_it();		                         //logging
;;;807    									memset(data,0,strlen(data));	
0058ac  4847              LDR      r0,|L1.22988|
0058ae  f7fffffe          BL       strlen
0058b2  4601              MOV      r1,r0
0058b4  9001              STR      r0,[sp,#4]
0058b6  4845              LDR      r0,|L1.22988|
0058b8  f7fffffe          BL       __aeabi_memclr
;;;808    temp=int_erval;				
0058bc  4850              LDR      r0,|L1.23040|
0058be  6800              LDR      r0,[r0,#0]  ; int_erval
0058c0  4950              LDR      r1,|L1.23044|
0058c2  6008              STR      r0,[r1,#0]  ; temp
;;;809    int_erval=4;
0058c4  2004              MOVS     r0,#4
0058c6  494e              LDR      r1,|L1.23040|
0058c8  6008              STR      r0,[r1,#0]  ; int_erval
;;;810    //setting interval 4
;;;811    									GPS_COLLECT();
0058ca  f7fffffe          BL       GPS_COLLECT
;;;812    									strcat(data,"CH\n");	
0058ce  4947              LDR      r1,|L1.23020|
0058d0  3148              ADDS     r1,r1,#0x48
0058d2  483e              LDR      r0,|L1.22988|
0058d4  f7fffffe          BL       strcat
;;;813    //**************************************tcp_initialization();//reinitialization*********************************/
;;;814    
;;;815    		
;;;816    	msg_sim800(); 
0058d8  f7fffffe          BL       msg_sim800
;;;817    	send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0058dc  2005              MOVS     r0,#5
0058de  4b43              LDR      r3,|L1.23020|
0058e0  461a              MOV      r2,r3
0058e2  3278              ADDS     r2,r2,#0x78
0058e4  a148              ADR      r1,|L1.23048|
0058e6  9000              STR      r0,[sp,#0]
0058e8  4610              MOV      r0,r2
0058ea  3020              ADDS     r0,r0,#0x20
0058ec  f7fffffe          BL       send_GSM
;;;818    	delay(100);
0058f0  2064              MOVS     r0,#0x64
0058f2  f7fffffe          BL       delay
;;;819    	send_GSM("\r\nAT+CFUN=1\r\n", "ERROR", "NOT INSERTED" , "Ready", 4);	
0058f6  2004              MOVS     r0,#4
0058f8  4b44              LDR      r3,|L1.23052|
0058fa  461a              MOV      r2,r3
0058fc  3a10              SUBS     r2,r2,#0x10
0058fe  493b              LDR      r1,|L1.23020|
005900  9000              STR      r0,[sp,#0]
005902  4608              MOV      r0,r1
005904  30bc              ADDS     r0,r0,#0xbc
005906  f7fffffe          BL       send_GSM
;;;820    	GPS_COLLECT2();
00590a  f7fffffe          BL       GPS_COLLECT2
;;;821    	strcat(data,"CH\n");		
00590e  4937              LDR      r1,|L1.23020|
005910  3148              ADDS     r1,r1,#0x48
005912  482e              LDR      r0,|L1.22988|
005914  f7fffffe          BL       strcat
;;;822    	GPS_COLLECT2();
005918  f7fffffe          BL       GPS_COLLECT2
;;;823    	strcat(data,"CH\n");	
00591c  4933              LDR      r1,|L1.23020|
00591e  3148              ADDS     r1,r1,#0x48
005920  482a              LDR      r0,|L1.22988|
005922  f7fffffe          BL       strcat
;;;824    
;;;825    	cond201=(strstr(uart_string_gsm, "OK"));
005926  a138              ADR      r1,|L1.23048|
005928  4825              LDR      r0,|L1.22976|
00592a  f7fffffe          BL       strstr
00592e  4938              LDR      r1,|L1.23056|
005930  6008              STR      r0,[r1,#0]  ; cond201
;;;826    	cond200=(strstr(uart_string_gsm, "ERROR"));
005932  492e              LDR      r1,|L1.23020|
005934  4822              LDR      r0,|L1.22976|
005936  f7fffffe          BL       strstr
00593a  4936              LDR      r1,|L1.23060|
00593c  6008              STR      r0,[r1,#0]  ; cond200
;;;827    	if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00593e  4834              LDR      r0,|L1.23056|
005940  6800              LDR      r0,[r0,#0]  ; cond201
005942  2800              CMP      r0,#0
005944  d101              BNE      |L1.22858|
005946  2001              MOVS     r0,#1
005948  e000              B        |L1.22860|
                  |L1.22858|
00594a  2000              MOVS     r0,#0
                  |L1.22860|
00594c  2800              CMP      r0,#0
                  |L1.22862|
00594e  d065              BEQ      |L1.23068|
005950  4830              LDR      r0,|L1.23060|
005952  6800              LDR      r0,[r0,#0]  ; cond200
005954  2800              CMP      r0,#0
005956  d101              BNE      |L1.22876|
005958  2001              MOVS     r0,#1
00595a  e000              B        |L1.22878|
                  |L1.22876|
00595c  2000              MOVS     r0,#0
                  |L1.22878|
00595e  2800              CMP      r0,#0
005960  d0f5              BEQ      |L1.22862|
005962  482d              LDR      r0,|L1.23064|
005964  6800              LDR      r0,[r0,#0]  ; sleep_flag
005966  2801              CMP      r0,#1
005968  d0f1              BEQ      |L1.22862|
;;;828    	{
;;;829    	delay(100);
00596a  2064              MOVS     r0,#0x64
00596c  f7fffffe          BL       delay
;;;830    	clear();//memset(uart_string_gsm,0,5000);
005970  f7fffffe          BL       clear
;;;831    	memset(at_,0,100);
005974  2164              MOVS     r1,#0x64
005976  481f              LDR      r0,|L1.23028|
005978  f7fffffe          BL       __aeabi_memclr
;;;832    	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00597c  4813              LDR      r0,|L1.22988|
00597e  f7fffffe          BL       strlen
005982  1c40              ADDS     r0,r0,#1
005984  4603              MOV      r3,r0
005986  4a1c              LDR      r2,|L1.23032|
005988  4918              LDR      r1,|L1.23020|
00598a  3154              ADDS     r1,r1,#0x54
00598c  9001              STR      r0,[sp,#4]
00598e  4819              LDR      r0,|L1.23028|
005990  f7fffffe          BL       __2sprintf
;;;833    	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005994  2005              MOVS     r0,#5
005996  4b15              LDR      r3,|L1.23020|
005998  461a              MOV      r2,r3
00599a  3278              ADDS     r2,r2,#0x78
00599c  a117              ADR      r1,|L1.23036|
00599e  9000              STR      r0,[sp,#0]
0059a0  4814              LDR      r0,|L1.23028|
0059a2  f7fffffe          BL       send_SD
;;;834    if(strstr(uart_string_gsm,"ERROR")){
0059a6  4911              LDR      r1,|L1.23020|
0059a8  4805              LDR      r0,|L1.22976|
0059aa  e038              B        |L1.23070|
                  |L1.22956|
                          DCD      stcond2
                  |L1.22960|
                          DCD      stcond3
                  |L1.22964|
                          DCD      stcond4
                  |L1.22968|
                          DCD      con1d
                  |L1.22972|
                          DCD      cond
                  |L1.22976|
                          DCD      uart_string_gsm
                  |L1.22980|
                          DCD      0x00001388
                  |L1.22984|
0059c8  0a0a00            DCB      "\n\n",0
0059cb  00                DCB      0
                  |L1.22988|
                          DCD      data
                  |L1.22992|
                          DCD      len
                  |L1.22996|
                          DCD      tout
                  |L1.23000|
                          DCD      ||k2||
                  |L1.23004|
                          DCD      k
                  |L1.23008|
                          DCD      0x4006b000
                  |L1.23012|
                          DCD      ||.text||+0x474
                  |L1.23016|
                          DCD      stcond1
                  |L1.23020|
                          DCD      ||.text||+0x870
                  |L1.23024|
                          DCD      ||.text||+0xde4
                  |L1.23028|
                          DCD      at_
                  |L1.23032|
                          DCD      drive
                  |L1.23036|
0059fc  3e00              DCB      ">",0
0059fe  00                DCB      0
0059ff  00                DCB      0
                  |L1.23040|
                          DCD      int_erval
                  |L1.23044|
                          DCD      temp
                  |L1.23048|
005a08  4f4b00            DCB      "OK",0
005a0b  00                DCB      0
                  |L1.23052|
                          DCD      ||.text||+0x3dd4
                  |L1.23056|
                          DCD      cond201
                  |L1.23060|
                          DCD      cond200
                  |L1.23064|
                          DCD      sleep_flag
                  |L1.23068|
005a1c  e0ad              B        |L1.23418|
                  |L1.23070|
005a1e  f7fffffe          BL       strstr
005a22  2800              CMP      r0,#0
005a24  d004              BEQ      |L1.23088|
;;;835    	drive[0]='C';drive[1]=':';
005a26  2043              MOVS     r0,#0x43
005a28  49fe              LDR      r1,|L1.24100|
005a2a  7008              STRB     r0,[r1,#0]
005a2c  203a              MOVS     r0,#0x3a
005a2e  7048              STRB     r0,[r1,#1]
                  |L1.23088|
;;;836    }	
;;;837    	clear();	
005a30  f7fffffe          BL       clear
;;;838    	k2=0;									//string array counter for uart 1
005a34  2000              MOVS     r0,#0
005a36  49fc              LDR      r1,|L1.24104|
005a38  6008              STR      r0,[r1,#0]  ; k2
;;;839    	tout=0;	
005a3a  49fc              LDR      r1,|L1.24108|
005a3c  6008              STR      r0,[r1,#0]  ; tout
;;;840    	for(k=0;k<strlen(data);k++)
005a3e  49fc              LDR      r1,|L1.24112|
005a40  6008              STR      r0,[r1,#0]  ; k
005a42  e00d              B        |L1.23136|
                  |L1.23108|
;;;841    	{
;;;842    	uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005a44  48fb              LDR      r0,|L1.24116|
005a46  49fa              LDR      r1,|L1.24112|
005a48  6809              LDR      r1,[r1,#0]  ; k
005a4a  5c40              LDRB     r0,[r0,r1]
005a4c  4601              MOV      r1,r0
005a4e  9001              STR      r0,[sp,#4]
005a50  48f9              LDR      r0,|L1.24120|
005a52  f7fffffe          BL       uart_putchar
005a56  48f6              LDR      r0,|L1.24112|
005a58  6800              LDR      r0,[r0,#0]            ;840  ; k
005a5a  1c40              ADDS     r0,r0,#1              ;840
005a5c  49f4              LDR      r1,|L1.24112|
005a5e  6008              STR      r0,[r1,#0]            ;840  ; k
                  |L1.23136|
005a60  48f4              LDR      r0,|L1.24116|
005a62  f7fffffe          BL       strlen
005a66  49f2              LDR      r1,|L1.24112|
005a68  6809              LDR      r1,[r1,#0]            ;840  ; k
005a6a  4288              CMP      r0,r1                 ;840
005a6c  d8ea              BHI      |L1.23108|
;;;843    	}	
;;;844    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005a6e  210a              MOVS     r1,#0xa
005a70  48f1              LDR      r0,|L1.24120|
005a72  f7fffffe          BL       uart_putchar
005a76  210a              MOVS     r1,#0xa
005a78  48ef              LDR      r0,|L1.24120|
005a7a  f7fffffe          BL       uart_putchar
005a7e  210a              MOVS     r1,#0xa
005a80  48ed              LDR      r0,|L1.24120|
005a82  f7fffffe          BL       uart_putchar
005a86  210a              MOVS     r1,#0xa
005a88  48eb              LDR      r0,|L1.24120|
005a8a  f7fffffe          BL       uart_putchar
005a8e  210a              MOVS     r1,#0xa
005a90  48e9              LDR      r0,|L1.24120|
005a92  f7fffffe          BL       uart_putchar
005a96  210a              MOVS     r1,#0xa
005a98  48e7              LDR      r0,|L1.24120|
005a9a  f7fffffe          BL       uart_putchar
005a9e  210a              MOVS     r1,#0xa
005aa0  48e5              LDR      r0,|L1.24120|
005aa2  f7fffffe          BL       uart_putchar
;;;845    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005aa6  210a              MOVS     r1,#0xa
005aa8  48e3              LDR      r0,|L1.24120|
005aaa  f7fffffe          BL       uart_putchar
005aae  210a              MOVS     r1,#0xa
005ab0  48e1              LDR      r0,|L1.24120|
005ab2  f7fffffe          BL       uart_putchar
005ab6  210a              MOVS     r1,#0xa
005ab8  48df              LDR      r0,|L1.24120|
005aba  f7fffffe          BL       uart_putchar
005abe  210a              MOVS     r1,#0xa
005ac0  48dd              LDR      r0,|L1.24120|
005ac2  f7fffffe          BL       uart_putchar
005ac6  210a              MOVS     r1,#0xa
005ac8  48db              LDR      r0,|L1.24120|
005aca  f7fffffe          BL       uart_putchar
005ace  210a              MOVS     r1,#0xa
005ad0  48d9              LDR      r0,|L1.24120|
005ad2  f7fffffe          BL       uart_putchar
005ad6  210a              MOVS     r1,#0xa
005ad8  48d7              LDR      r0,|L1.24120|
005ada  f7fffffe          BL       uart_putchar
;;;846    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005ade  210a              MOVS     r1,#0xa
005ae0  48d5              LDR      r0,|L1.24120|
005ae2  f7fffffe          BL       uart_putchar
005ae6  210a              MOVS     r1,#0xa
005ae8  48d3              LDR      r0,|L1.24120|
005aea  f7fffffe          BL       uart_putchar
005aee  210a              MOVS     r1,#0xa
005af0  48d1              LDR      r0,|L1.24120|
005af2  f7fffffe          BL       uart_putchar
005af6  210a              MOVS     r1,#0xa
005af8  48cf              LDR      r0,|L1.24120|
005afa  f7fffffe          BL       uart_putchar
005afe  210a              MOVS     r1,#0xa
005b00  48cd              LDR      r0,|L1.24120|
005b02  f7fffffe          BL       uart_putchar
005b06  210a              MOVS     r1,#0xa
005b08  48cb              LDR      r0,|L1.24120|
005b0a  f7fffffe          BL       uart_putchar
005b0e  210a              MOVS     r1,#0xa
005b10  48c9              LDR      r0,|L1.24120|
005b12  f7fffffe          BL       uart_putchar
;;;847    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005b16  210a              MOVS     r1,#0xa
005b18  48c7              LDR      r0,|L1.24120|
005b1a  f7fffffe          BL       uart_putchar
005b1e  210a              MOVS     r1,#0xa
005b20  48c5              LDR      r0,|L1.24120|
005b22  f7fffffe          BL       uart_putchar
;;;848    										//memset(data,0,1000);
;;;849    															//timer counts to wait for characters in uart 1 									
;;;850    										while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005b26  bf00              NOP      
                  |L1.23336|
005b28  49c4              LDR      r1,|L1.24124|
005b2a  48c5              LDR      r0,|L1.24128|
005b2c  f7fffffe          BL       strstr
005b30  2800              CMP      r0,#0
005b32  d10a              BNE      |L1.23370|
005b34  49c1              LDR      r1,|L1.24124|
005b36  398c              SUBS     r1,r1,#0x8c
005b38  48c1              LDR      r0,|L1.24128|
005b3a  f7fffffe          BL       strstr
005b3e  2800              CMP      r0,#0
005b40  d103              BNE      |L1.23370|
005b42  48ba              LDR      r0,|L1.24108|
005b44  6800              LDR      r0,[r0,#0]  ; tout
005b46  2805              CMP      r0,#5
005b48  ddee              BLE      |L1.23336|
                  |L1.23370|
;;;851    										{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;852    										}
;;;853    										clear();//uart_putchar(UART1_BASE_PTR,0x1a);
005b4a  f7fffffe          BL       clear
;;;854    										//clear();
;;;855    										memset(data,0,strlen(data));
005b4e  48b9              LDR      r0,|L1.24116|
005b50  f7fffffe          BL       strlen
005b54  4601              MOV      r1,r0
005b56  9001              STR      r0,[sp,#4]
005b58  48b6              LDR      r0,|L1.24116|
005b5a  f7fffffe          BL       __aeabi_memclr
;;;856    										clear();
005b5e  f7fffffe          BL       clear
;;;857    										RESET_OFF;delay(100);
005b62  2020              MOVS     r0,#0x20
005b64  49b7              LDR      r1,|L1.24132|
005b66  6088              STR      r0,[r1,#8]
005b68  2064              MOVS     r0,#0x64
005b6a  f7fffffe          BL       delay
;;;858    										RESET_ON;delay(100);		
005b6e  2020              MOVS     r0,#0x20
005b70  49b4              LDR      r1,|L1.24132|
005b72  6048              STR      r0,[r1,#4]
005b74  2064              MOVS     r0,#0x64
005b76  f7fffffe          BL       delay
                  |L1.23418|
;;;859    	}
;;;860    		
;;;861    	send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
005b7a  2004              MOVS     r0,#4
005b7c  4bb2              LDR      r3,|L1.24136|
005b7e  4aaf              LDR      r2,|L1.24124|
005b80  3a14              SUBS     r2,r2,#0x14
005b82  a1b2              ADR      r1,|L1.24140|
005b84  9000              STR      r0,[sp,#0]
005b86  4618              MOV      r0,r3
005b88  300c              ADDS     r0,r0,#0xc
005b8a  f7fffffe          BL       send_GSM
;;;862    	GPS_COLLECT2();
005b8e  f7fffffe          BL       GPS_COLLECT2
;;;863    	strcat(data,"CH\n");	
005b92  49aa              LDR      r1,|L1.24124|
005b94  3944              SUBS     r1,r1,#0x44
005b96  48a7              LDR      r0,|L1.24116|
005b98  f7fffffe          BL       strcat
;;;864    	memset(at_,0,100);
005b9c  2164              MOVS     r1,#0x64
005b9e  48ac              LDR      r0,|L1.24144|
005ba0  f7fffffe          BL       __aeabi_memclr
;;;865    	sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
005ba4  4aab              LDR      r2,|L1.24148|
005ba6  49a8              LDR      r1,|L1.24136|
005ba8  3120              ADDS     r1,r1,#0x20
005baa  48a9              LDR      r0,|L1.24144|
005bac  f7fffffe          BL       __2sprintf
;;;866    	send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
005bb0  48a9              LDR      r0,|L1.24152|
005bb2  6800              LDR      r0,[r0,#0]  ; tmeout
005bb4  4ba4              LDR      r3,|L1.24136|
005bb6  4aa1              LDR      r2,|L1.24124|
005bb8  3a14              SUBS     r2,r2,#0x14
005bba  a1a4              ADR      r1,|L1.24140|
005bbc  9000              STR      r0,[sp,#0]
005bbe  48a4              LDR      r0,|L1.24144|
005bc0  f7fffffe          BL       send_GSM
;;;867    	msg_sim800(); 
005bc4  f7fffffe          BL       msg_sim800
;;;868    	send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
005bc8  2004              MOVS     r0,#4
005bca  4b9c              LDR      r3,|L1.24124|
005bcc  3b70              SUBS     r3,r3,#0x70
005bce  461a              MOV      r2,r3
005bd0  325c              ADDS     r2,r2,#0x5c
005bd2  a19e              ADR      r1,|L1.24140|
005bd4  9000              STR      r0,[sp,#0]
005bd6  489c              LDR      r0,|L1.24136|
005bd8  3038              ADDS     r0,r0,#0x38
005bda  f7fffffe          BL       send_GSM
;;;869    	GPS_COLLECT2();
005bde  f7fffffe          BL       GPS_COLLECT2
;;;870    	strcat(data,"CH\n");	
005be2  4996              LDR      r1,|L1.24124|
005be4  3944              SUBS     r1,r1,#0x44
005be6  4893              LDR      r0,|L1.24116|
005be8  f7fffffe          BL       strcat
;;;871    	GPS_COLLECT2();
005bec  f7fffffe          BL       GPS_COLLECT2
;;;872    	strcat(data,"CH\n");	
005bf0  4992              LDR      r1,|L1.24124|
005bf2  3944              SUBS     r1,r1,#0x44
005bf4  488f              LDR      r0,|L1.24116|
005bf6  f7fffffe          BL       strcat
;;;873    
;;;874    
;;;875    	msg_sim800(); 
005bfa  f7fffffe          BL       msg_sim800
;;;876    	GPS_COLLECT2();
005bfe  f7fffffe          BL       GPS_COLLECT2
;;;877    	strcat(data,"CH\n");	
005c02  498e              LDR      r1,|L1.24124|
005c04  3944              SUBS     r1,r1,#0x44
005c06  488b              LDR      r0,|L1.24116|
005c08  f7fffffe          BL       strcat
;;;878    						clear();send_modem("\nAT+CIFSR\r\r\n");clear();
005c0c  f7fffffe          BL       clear
005c10  488d              LDR      r0,|L1.24136|
005c12  3048              ADDS     r0,r0,#0x48
005c14  f7fffffe          BL       send_modem
005c18  f7fffffe          BL       clear
;;;879    						delay(20);
005c1c  2014              MOVS     r0,#0x14
005c1e  f7fffffe          BL       delay
;;;880    
;;;881    
;;;882    	msg_sim800(); 
005c22  f7fffffe          BL       msg_sim800
;;;883    int_erval=temp;
005c26  488d              LDR      r0,|L1.24156|
005c28  6800              LDR      r0,[r0,#0]  ; temp
005c2a  498d              LDR      r1,|L1.24160|
005c2c  6008              STR      r0,[r1,#0]  ; int_erval
;;;884    							sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005c2e  4b8d              LDR      r3,|L1.24164|
005c30  4a8d              LDR      r2,|L1.24168|
005c32  4985              LDR      r1,|L1.24136|
005c34  3160              ADDS     r1,r1,#0x60
005c36  4886              LDR      r0,|L1.24144|
005c38  f7fffffe          BL       __2sprintf
;;;885    							send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
005c3c  4886              LDR      r0,|L1.24152|
005c3e  6800              LDR      r0,[r0,#0]  ; tmeout
005c40  4b81              LDR      r3,|L1.24136|
005c42  4a7e              LDR      r2,|L1.24124|
005c44  3a8c              SUBS     r2,r2,#0x8c
005c46  4619              MOV      r1,r3
005c48  3180              ADDS     r1,r1,#0x80
005c4a  9000              STR      r0,[sp,#0]
005c4c  4880              LDR      r0,|L1.24144|
005c4e  f7fffffe          BL       send_GSM
;;;886    							clear();
005c52  f7fffffe          BL       clear
;;;887    							
;;;888    							
;;;889    							send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
005c56  4880              LDR      r0,|L1.24152|
005c58  6800              LDR      r0,[r0,#0]  ; tmeout
005c5a  4b7b              LDR      r3,|L1.24136|
005c5c  3388              ADDS     r3,r3,#0x88
005c5e  4a77              LDR      r2,|L1.24124|
005c60  3a8c              SUBS     r2,r2,#0x8c
005c62  a182              ADR      r1,|L1.24172|
005c64  9000              STR      r0,[sp,#0]
005c66  4618              MOV      r0,r3
005c68  3010              ADDS     r0,r0,#0x10
005c6a  f7fffffe          BL       send_GSM
;;;890    	//*****************************************tcp_initialization ends**************************//									
;;;891    										clear();		
005c6e  f7fffffe          BL       clear
;;;892    										memset(stcond1,0,strlen(stcond1));
005c72  487f              LDR      r0,|L1.24176|
005c74  6800              LDR      r0,[r0,#0]  ; stcond1
005c76  f7fffffe          BL       strlen
005c7a  4601              MOV      r1,r0
005c7c  9001              STR      r0,[sp,#4]
005c7e  487c              LDR      r0,|L1.24176|
005c80  6800              LDR      r0,[r0,#0]  ; stcond1
005c82  f7fffffe          BL       __aeabi_memclr
;;;893    										memset(stcond2,0,strlen(stcond2));	
005c86  487b              LDR      r0,|L1.24180|
005c88  6800              LDR      r0,[r0,#0]  ; stcond2
005c8a  f7fffffe          BL       strlen
005c8e  4601              MOV      r1,r0
005c90  9001              STR      r0,[sp,#4]
005c92  4878              LDR      r0,|L1.24180|
005c94  6800              LDR      r0,[r0,#0]  ; stcond2
005c96  f7fffffe          BL       __aeabi_memclr
;;;894    										memset(stcond3,0,strlen(stcond3));	
005c9a  4877              LDR      r0,|L1.24184|
005c9c  6800              LDR      r0,[r0,#0]  ; stcond3
005c9e  f7fffffe          BL       strlen
005ca2  4601              MOV      r1,r0
005ca4  9001              STR      r0,[sp,#4]
005ca6  4874              LDR      r0,|L1.24184|
005ca8  6800              LDR      r0,[r0,#0]  ; stcond3
005caa  f7fffffe          BL       __aeabi_memclr
;;;895    										memset(stcond4,0,strlen(stcond4));								
005cae  4873              LDR      r0,|L1.24188|
005cb0  6800              LDR      r0,[r0,#0]  ; stcond4
005cb2  f7fffffe          BL       strlen
005cb6  4601              MOV      r1,r0
005cb8  9001              STR      r0,[sp,#4]
005cba  4870              LDR      r0,|L1.24188|
005cbc  6800              LDR      r0,[r0,#0]  ; stcond4
005cbe  f7fffffe          BL       __aeabi_memclr
;;;896    										cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
005cc2  213e              MOVS     r1,#0x3e
005cc4  485e              LDR      r0,|L1.24128|
005cc6  f7fffffe          BL       mystrstr
005cca  496d              LDR      r1,|L1.24192|
005ccc  7008              STRB     r0,[r1,#0]
;;;897    								
;;;898    									if(cond)	
005cce  4608              MOV      r0,r1
005cd0  7800              LDRB     r0,[r0,#0]  ; cond
005cd2  2800              CMP      r0,#0
005cd4  d07d              BEQ      |L1.24018|
;;;899    									{	
;;;900    										clear();
005cd6  f7fffffe          BL       clear
;;;901    										memset(uart_string_gsm,0,5000);
005cda  496a              LDR      r1,|L1.24196|
005cdc  4858              LDR      r0,|L1.24128|
005cde  f7fffffe          BL       __aeabi_memclr
;;;902    										strcat(data,"\n");
005ce2  a169              ADR      r1,|L1.24200|
005ce4  4853              LDR      r0,|L1.24116|
005ce6  f7fffffe          BL       strcat
;;;903    										len=strlen(data);
005cea  4852              LDR      r0,|L1.24116|
005cec  f7fffffe          BL       strlen
005cf0  4966              LDR      r1,|L1.24204|
005cf2  6008              STR      r0,[r1,#0]  ; len
;;;904    										tout=0;
005cf4  2000              MOVS     r0,#0
005cf6  494d              LDR      r1,|L1.24108|
005cf8  6008              STR      r0,[r1,#0]  ; tout
;;;905    										k2=0;
005cfa  494b              LDR      r1,|L1.24104|
005cfc  6008              STR      r0,[r1,#0]  ; k2
;;;906    										for(k=0;k<len;k++)
005cfe  494c              LDR      r1,|L1.24112|
005d00  6008              STR      r0,[r1,#0]  ; k
005d02  e00d              B        |L1.23840|
                  |L1.23812|
;;;907    										{uart_putchar(UART1_BASE_PTR, data[k]);
005d04  484b              LDR      r0,|L1.24116|
005d06  494a              LDR      r1,|L1.24112|
005d08  6809              LDR      r1,[r1,#0]  ; k
005d0a  5c40              LDRB     r0,[r0,r1]
005d0c  4601              MOV      r1,r0
005d0e  9001              STR      r0,[sp,#4]
005d10  4849              LDR      r0,|L1.24120|
005d12  f7fffffe          BL       uart_putchar
005d16  4846              LDR      r0,|L1.24112|
005d18  6800              LDR      r0,[r0,#0]            ;906  ; k
005d1a  1c40              ADDS     r0,r0,#1              ;906
005d1c  4944              LDR      r1,|L1.24112|
005d1e  6008              STR      r0,[r1,#0]            ;906  ; k
                  |L1.23840|
005d20  4843              LDR      r0,|L1.24112|
005d22  6800              LDR      r0,[r0,#0]            ;906  ; k
005d24  4959              LDR      r1,|L1.24204|
005d26  6809              LDR      r1,[r1,#0]            ;906  ; len
005d28  4288              CMP      r0,r1                 ;906
005d2a  dbeb              BLT      |L1.23812|
;;;908    										}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005d2c  210a              MOVS     r1,#0xa
005d2e  4842              LDR      r0,|L1.24120|
005d30  f7fffffe          BL       uart_putchar
005d34  211a              MOVS     r1,#0x1a
005d36  4840              LDR      r0,|L1.24120|
005d38  f7fffffe          BL       uart_putchar
005d3c  211a              MOVS     r1,#0x1a
005d3e  483e              LDR      r0,|L1.24120|
005d40  f7fffffe          BL       uart_putchar
005d44  211a              MOVS     r1,#0x1a
005d46  483c              LDR      r0,|L1.24120|
005d48  f7fffffe          BL       uart_putchar
;;;909    										do{stcond1=strstr(uart_string_gsm,"SEND OK");
005d4c  bf00              NOP      
                  |L1.23886|
005d4e  4950              LDR      r1,|L1.24208|
005d50  483b              LDR      r0,|L1.24128|
005d52  f7fffffe          BL       strstr
005d56  4946              LDR      r1,|L1.24176|
005d58  6008              STR      r0,[r1,#0]  ; stcond1
;;;910    												stcond2=strstr(uart_string_gsm, "ERROR");
005d5a  4938              LDR      r1,|L1.24124|
005d5c  398c              SUBS     r1,r1,#0x8c
005d5e  4838              LDR      r0,|L1.24128|
005d60  f7fffffe          BL       strstr
005d64  4943              LDR      r1,|L1.24180|
005d66  6008              STR      r0,[r1,#0]  ; stcond2
;;;911    													stcond3=strstr(uart_string_gsm, "FAIL");	
005d68  4937              LDR      r1,|L1.24136|
005d6a  3190              ADDS     r1,r1,#0x90
005d6c  4834              LDR      r0,|L1.24128|
005d6e  f7fffffe          BL       strstr
005d72  4941              LDR      r1,|L1.24184|
005d74  6008              STR      r0,[r1,#0]  ; stcond3
;;;912    														stcond4=strstr(uart_string_gsm, "DEACT");	
005d76  4931              LDR      r1,|L1.24124|
005d78  3970              SUBS     r1,r1,#0x70
005d7a  4831              LDR      r0,|L1.24128|
005d7c  f7fffffe          BL       strstr
005d80  493e              LDR      r1,|L1.24188|
005d82  6008              STR      r0,[r1,#0]  ; stcond4
;;;913    											}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
005d84  483b              LDR      r0,|L1.24180|
005d86  6800              LDR      r0,[r0,#0]  ; stcond2
005d88  2800              CMP      r0,#0
005d8a  d10f              BNE      |L1.23980|
005d8c  483a              LDR      r0,|L1.24184|
005d8e  6800              LDR      r0,[r0,#0]  ; stcond3
005d90  2800              CMP      r0,#0
005d92  d10b              BNE      |L1.23980|
005d94  4608              MOV      r0,r1
005d96  6800              LDR      r0,[r0,#0]  ; stcond4
005d98  2800              CMP      r0,#0
005d9a  d107              BNE      |L1.23980|
005d9c  4834              LDR      r0,|L1.24176|
005d9e  6800              LDR      r0,[r0,#0]  ; stcond1
005da0  2800              CMP      r0,#0
005da2  d103              BNE      |L1.23980|
005da4  4821              LDR      r0,|L1.24108|
005da6  6800              LDR      r0,[r0,#0]  ; tout
005da8  2808              CMP      r0,#8
005daa  ddd0              BLE      |L1.23886|
                  |L1.23980|
;;;914    										uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005dac  211a              MOVS     r1,#0x1a
005dae  4822              LDR      r0,|L1.24120|
005db0  f7fffffe          BL       uart_putchar
005db4  211a              MOVS     r1,#0x1a
005db6  4820              LDR      r0,|L1.24120|
005db8  f7fffffe          BL       uart_putchar
005dbc  211a              MOVS     r1,#0x1a
005dbe  481e              LDR      r0,|L1.24120|
005dc0  f7fffffe          BL       uart_putchar
005dc4  211a              MOVS     r1,#0x1a
005dc6  481c              LDR      r0,|L1.24120|
005dc8  f7fffffe          BL       uart_putchar
;;;915    										con1d=	(strstr(uart_string_gsm,"SEND OK"));
005dcc  4930              LDR      r1,|L1.24208|
005dce  481c              LDR      r0,|L1.24128|
005dd0  e000              B        |L1.24020|
                  |L1.24018|
005dd2  e19c              B        |L1.24846|
                  |L1.24020|
005dd4  f7fffffe          BL       strstr
005dd8  492e              LDR      r1,|L1.24212|
005dda  6008              STR      r0,[r1,#0]  ; con1d
;;;916    																	if(!(con1d) == 1 ) 
005ddc  4608              MOV      r0,r1
005dde  6800              LDR      r0,[r0,#0]  ; con1d
005de0  2800              CMP      r0,#0
005de2  d101              BNE      |L1.24040|
005de4  2001              MOVS     r0,#1
005de6  e000              B        |L1.24042|
                  |L1.24040|
005de8  2000              MOVS     r0,#0
                  |L1.24042|
005dea  2801              CMP      r0,#1
005dec  d17e              BNE      |L1.24300|
;;;917    																	{
;;;918    																			delay(100);
005dee  2064              MOVS     r0,#0x64
005df0  f7fffffe          BL       delay
;;;919    																			clear();//memset(uart_string_gsm,0,5000);
005df4  f7fffffe          BL       clear
;;;920    																			memset(at_,0,100);
005df8  2164              MOVS     r1,#0x64
005dfa  4815              LDR      r0,|L1.24144|
005dfc  f7fffffe          BL       __aeabi_memclr
;;;921    																			sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005e00  480c              LDR      r0,|L1.24116|
005e02  f7fffffe          BL       strlen
005e06  1c40              ADDS     r0,r0,#1
005e08  4603              MOV      r3,r0
005e0a  4a06              LDR      r2,|L1.24100|
005e0c  490b              LDR      r1,|L1.24124|
005e0e  3938              SUBS     r1,r1,#0x38
005e10  9001              STR      r0,[sp,#4]
005e12  480f              LDR      r0,|L1.24144|
005e14  f7fffffe          BL       __2sprintf
;;;922    																			send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005e18  2005              MOVS     r0,#5
005e1a  4b08              LDR      r3,|L1.24124|
005e1c  3b8c              SUBS     r3,r3,#0x8c
005e1e  461a              MOV      r2,r3
005e20  3278              ADDS     r2,r2,#0x78
005e22  e039              B        |L1.24216|
                  |L1.24100|
                          DCD      drive
                  |L1.24104|
                          DCD      ||k2||
                  |L1.24108|
                          DCD      tout
                  |L1.24112|
                          DCD      k
                  |L1.24116|
                          DCD      data
                  |L1.24120|
                          DCD      0x4006b000
                  |L1.24124|
                          DCD      ||.text||+0x8fc
                  |L1.24128|
                          DCD      uart_string_gsm
                  |L1.24132|
                          DCD      0x400ff080
                  |L1.24136|
                          DCD      ||.text||+0xd54
                  |L1.24140|
005e4c  4f4b00            DCB      "OK",0
005e4f  00                DCB      0
                  |L1.24144|
                          DCD      at_
                  |L1.24148|
                          DCD      apn
                  |L1.24152|
                          DCD      tmeout
                  |L1.24156|
                          DCD      temp
                  |L1.24160|
                          DCD      int_erval
                  |L1.24164|
                          DCD      port
                  |L1.24168|
                          DCD      ||ip||
                  |L1.24172|
005e6c  3e00              DCB      ">",0
005e6e  00                DCB      0
005e6f  00                DCB      0
                  |L1.24176|
                          DCD      stcond1
                  |L1.24180|
                          DCD      stcond2
                  |L1.24184|
                          DCD      stcond3
                  |L1.24188|
                          DCD      stcond4
                  |L1.24192|
                          DCD      cond
                  |L1.24196|
                          DCD      0x00001388
                  |L1.24200|
005e88  0a00              DCB      "\n",0
005e8a  00                DCB      0
005e8b  00                DCB      0
                  |L1.24204|
                          DCD      len
                  |L1.24208|
                          DCD      ||.text||+0x474
                  |L1.24212|
                          DCD      con1d
                  |L1.24216|
005e98  a1fe              ADR      r1,|L1.25236|
005e9a  9000              STR      r0,[sp,#0]
005e9c  48fe              LDR      r0,|L1.25240|
005e9e  f7fffffe          BL       send_SD
;;;923    if(strstr(uart_string_gsm,"ERROR")){
005ea2  49fe              LDR      r1,|L1.25244|
005ea4  48fe              LDR      r0,|L1.25248|
005ea6  f7fffffe          BL       strstr
005eaa  2800              CMP      r0,#0
005eac  d004              BEQ      |L1.24248|
;;;924    	drive[0]='C';drive[1]=':';
005eae  2043              MOVS     r0,#0x43
005eb0  49fc              LDR      r1,|L1.25252|
005eb2  7008              STRB     r0,[r1,#0]
005eb4  203a              MOVS     r0,#0x3a
005eb6  7048              STRB     r0,[r1,#1]
                  |L1.24248|
;;;925    }	
;;;926    																			clear();	
005eb8  f7fffffe          BL       clear
;;;927    																			k2=0;									//string array counter for uart 1
005ebc  2000              MOVS     r0,#0
005ebe  49fa              LDR      r1,|L1.25256|
005ec0  6008              STR      r0,[r1,#0]  ; k2
;;;928    																			tout=0;	
005ec2  49fa              LDR      r1,|L1.25260|
005ec4  6008              STR      r0,[r1,#0]  ; tout
;;;929    																			for(k=0;k<strlen(data);k++)
005ec6  49fa              LDR      r1,|L1.25264|
005ec8  6008              STR      r0,[r1,#0]  ; k
005eca  e00d              B        |L1.24296|
                  |L1.24268|
;;;930    																			{
;;;931    																				uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005ecc  48f9              LDR      r0,|L1.25268|
005ece  49f8              LDR      r1,|L1.25264|
005ed0  6809              LDR      r1,[r1,#0]  ; k
005ed2  5c40              LDRB     r0,[r0,r1]
005ed4  4601              MOV      r1,r0
005ed6  9001              STR      r0,[sp,#4]
005ed8  48f7              LDR      r0,|L1.25272|
005eda  f7fffffe          BL       uart_putchar
005ede  48f4              LDR      r0,|L1.25264|
005ee0  6800              LDR      r0,[r0,#0]            ;929  ; k
005ee2  1c40              ADDS     r0,r0,#1              ;929
005ee4  49f2              LDR      r1,|L1.25264|
005ee6  6008              STR      r0,[r1,#0]            ;929  ; k
                  |L1.24296|
005ee8  48f2              LDR      r0,|L1.25268|
005eea  e000              B        |L1.24302|
                  |L1.24300|
005eec  e10c              B        |L1.24840|
                  |L1.24302|
005eee  f7fffffe          BL       strlen
005ef2  49ef              LDR      r1,|L1.25264|
005ef4  6809              LDR      r1,[r1,#0]            ;929  ; k
005ef6  4288              CMP      r0,r1                 ;929
005ef8  d8e8              BHI      |L1.24268|
;;;932    																			}	
;;;933    																			uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005efa  210a              MOVS     r1,#0xa
005efc  48ee              LDR      r0,|L1.25272|
005efe  f7fffffe          BL       uart_putchar
005f02  210a              MOVS     r1,#0xa
005f04  48ec              LDR      r0,|L1.25272|
005f06  f7fffffe          BL       uart_putchar
005f0a  210a              MOVS     r1,#0xa
005f0c  48ea              LDR      r0,|L1.25272|
005f0e  f7fffffe          BL       uart_putchar
005f12  210a              MOVS     r1,#0xa
005f14  48e8              LDR      r0,|L1.25272|
005f16  f7fffffe          BL       uart_putchar
005f1a  210a              MOVS     r1,#0xa
005f1c  48e6              LDR      r0,|L1.25272|
005f1e  f7fffffe          BL       uart_putchar
005f22  210a              MOVS     r1,#0xa
005f24  48e4              LDR      r0,|L1.25272|
005f26  f7fffffe          BL       uart_putchar
005f2a  210a              MOVS     r1,#0xa
005f2c  48e2              LDR      r0,|L1.25272|
005f2e  f7fffffe          BL       uart_putchar
005f32  210a              MOVS     r1,#0xa
005f34  48e0              LDR      r0,|L1.25272|
005f36  f7fffffe          BL       uart_putchar
005f3a  210a              MOVS     r1,#0xa
005f3c  48de              LDR      r0,|L1.25272|
005f3e  f7fffffe          BL       uart_putchar
005f42  210a              MOVS     r1,#0xa
005f44  48dc              LDR      r0,|L1.25272|
005f46  f7fffffe          BL       uart_putchar
005f4a  210a              MOVS     r1,#0xa
005f4c  48da              LDR      r0,|L1.25272|
005f4e  f7fffffe          BL       uart_putchar
005f52  210a              MOVS     r1,#0xa
005f54  48d8              LDR      r0,|L1.25272|
005f56  f7fffffe          BL       uart_putchar
005f5a  210a              MOVS     r1,#0xa
005f5c  48d6              LDR      r0,|L1.25272|
005f5e  f7fffffe          BL       uart_putchar
005f62  210a              MOVS     r1,#0xa
005f64  48d4              LDR      r0,|L1.25272|
005f66  e000              B        |L1.24426|
                  |L1.24424|
005f68  e230              B        |L1.25548|
                  |L1.24426|
005f6a  f7fffffe          BL       uart_putchar
005f6e  210a              MOVS     r1,#0xa
005f70  48d1              LDR      r0,|L1.25272|
005f72  f7fffffe          BL       uart_putchar
005f76  210a              MOVS     r1,#0xa
005f78  48cf              LDR      r0,|L1.25272|
005f7a  f7fffffe          BL       uart_putchar
005f7e  210a              MOVS     r1,#0xa
005f80  48cd              LDR      r0,|L1.25272|
005f82  f7fffffe          BL       uart_putchar
005f86  210a              MOVS     r1,#0xa
005f88  48cb              LDR      r0,|L1.25272|
005f8a  f7fffffe          BL       uart_putchar
005f8e  210a              MOVS     r1,#0xa
005f90  48c9              LDR      r0,|L1.25272|
005f92  f7fffffe          BL       uart_putchar
005f96  210a              MOVS     r1,#0xa
005f98  48c7              LDR      r0,|L1.25272|
005f9a  f7fffffe          BL       uart_putchar
005f9e  210a              MOVS     r1,#0xa
005fa0  48c5              LDR      r0,|L1.25272|
005fa2  f7fffffe          BL       uart_putchar
005fa6  210a              MOVS     r1,#0xa
005fa8  48c3              LDR      r0,|L1.25272|
005faa  f7fffffe          BL       uart_putchar
005fae  210a              MOVS     r1,#0xa
005fb0  48c1              LDR      r0,|L1.25272|
005fb2  f7fffffe          BL       uart_putchar
005fb6  210a              MOVS     r1,#0xa
005fb8  48bf              LDR      r0,|L1.25272|
005fba  f7fffffe          BL       uart_putchar
005fbe  210a              MOVS     r1,#0xa
005fc0  48bd              LDR      r0,|L1.25272|
005fc2  f7fffffe          BL       uart_putchar
005fc6  210a              MOVS     r1,#0xa
005fc8  48bb              LDR      r0,|L1.25272|
005fca  f7fffffe          BL       uart_putchar
005fce  210a              MOVS     r1,#0xa
005fd0  48b9              LDR      r0,|L1.25272|
005fd2  f7fffffe          BL       uart_putchar
005fd6  210a              MOVS     r1,#0xa
005fd8  48b7              LDR      r0,|L1.25272|
005fda  f7fffffe          BL       uart_putchar
005fde  210a              MOVS     r1,#0xa
005fe0  48b5              LDR      r0,|L1.25272|
005fe2  f7fffffe          BL       uart_putchar
005fe6  210a              MOVS     r1,#0xa
005fe8  48b3              LDR      r0,|L1.25272|
005fea  f7fffffe          BL       uart_putchar
005fee  210a              MOVS     r1,#0xa
005ff0  48b1              LDR      r0,|L1.25272|
005ff2  f7fffffe          BL       uart_putchar
005ff6  210a              MOVS     r1,#0xa
005ff8  48af              LDR      r0,|L1.25272|
005ffa  f7fffffe          BL       uart_putchar
005ffe  210a              MOVS     r1,#0xa
006000  48ad              LDR      r0,|L1.25272|
006002  f7fffffe          BL       uart_putchar
006006  210a              MOVS     r1,#0xa
006008  48ab              LDR      r0,|L1.25272|
00600a  f7fffffe          BL       uart_putchar
00600e  210a              MOVS     r1,#0xa
006010  48a9              LDR      r0,|L1.25272|
006012  f7fffffe          BL       uart_putchar
006016  210a              MOVS     r1,#0xa
006018  48a7              LDR      r0,|L1.25272|
00601a  f7fffffe          BL       uart_putchar
00601e  210a              MOVS     r1,#0xa
006020  48a5              LDR      r0,|L1.25272|
006022  f7fffffe          BL       uart_putchar
006026  210a              MOVS     r1,#0xa
006028  48a3              LDR      r0,|L1.25272|
00602a  f7fffffe          BL       uart_putchar
00602e  210a              MOVS     r1,#0xa
006030  48a1              LDR      r0,|L1.25272|
006032  f7fffffe          BL       uart_putchar
006036  210a              MOVS     r1,#0xa
006038  489f              LDR      r0,|L1.25272|
00603a  f7fffffe          BL       uart_putchar
00603e  e000              B        |L1.24642|
                  |L1.24640|
006040  e1c5              B        |L1.25550|
                  |L1.24642|
006042  210a              MOVS     r1,#0xa
006044  489c              LDR      r0,|L1.25272|
006046  f7fffffe          BL       uart_putchar
00604a  210a              MOVS     r1,#0xa
00604c  489a              LDR      r0,|L1.25272|
00604e  f7fffffe          BL       uart_putchar
006052  210a              MOVS     r1,#0xa
006054  4898              LDR      r0,|L1.25272|
006056  f7fffffe          BL       uart_putchar
00605a  210a              MOVS     r1,#0xa
00605c  4896              LDR      r0,|L1.25272|
00605e  f7fffffe          BL       uart_putchar
006062  210a              MOVS     r1,#0xa
006064  4894              LDR      r0,|L1.25272|
006066  f7fffffe          BL       uart_putchar
00606a  210a              MOVS     r1,#0xa
00606c  4892              LDR      r0,|L1.25272|
00606e  f7fffffe          BL       uart_putchar
006072  210a              MOVS     r1,#0xa
006074  4890              LDR      r0,|L1.25272|
006076  f7fffffe          BL       uart_putchar
00607a  210a              MOVS     r1,#0xa
00607c  488e              LDR      r0,|L1.25272|
00607e  f7fffffe          BL       uart_putchar
006082  210a              MOVS     r1,#0xa
006084  488c              LDR      r0,|L1.25272|
006086  f7fffffe          BL       uart_putchar
00608a  210a              MOVS     r1,#0xa
00608c  488a              LDR      r0,|L1.25272|
00608e  f7fffffe          BL       uart_putchar
006092  210a              MOVS     r1,#0xa
006094  4888              LDR      r0,|L1.25272|
006096  f7fffffe          BL       uart_putchar
00609a  210a              MOVS     r1,#0xa
00609c  4886              LDR      r0,|L1.25272|
00609e  f7fffffe          BL       uart_putchar
0060a2  210a              MOVS     r1,#0xa
0060a4  4884              LDR      r0,|L1.25272|
0060a6  f7fffffe          BL       uart_putchar
0060aa  210a              MOVS     r1,#0xa
0060ac  4882              LDR      r0,|L1.25272|
0060ae  f7fffffe          BL       uart_putchar
0060b2  210a              MOVS     r1,#0xa
0060b4  4880              LDR      r0,|L1.25272|
0060b6  f7fffffe          BL       uart_putchar
0060ba  210a              MOVS     r1,#0xa
0060bc  487e              LDR      r0,|L1.25272|
0060be  f7fffffe          BL       uart_putchar
0060c2  210a              MOVS     r1,#0xa
0060c4  487c              LDR      r0,|L1.25272|
0060c6  f7fffffe          BL       uart_putchar
;;;934    																			while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) ))){}
0060ca  bf00              NOP      
                  |L1.24780|
0060cc  4973              LDR      r1,|L1.25244|
0060ce  318c              ADDS     r1,r1,#0x8c
0060d0  4873              LDR      r0,|L1.25248|
0060d2  f7fffffe          BL       strstr
0060d6  2800              CMP      r0,#0
0060d8  d109              BNE      |L1.24814|
0060da  4970              LDR      r1,|L1.25244|
0060dc  4870              LDR      r0,|L1.25248|
0060de  f7fffffe          BL       strstr
0060e2  2800              CMP      r0,#0
0060e4  d103              BNE      |L1.24814|
0060e6  4871              LDR      r0,|L1.25260|
0060e8  6800              LDR      r0,[r0,#0]  ; tout
0060ea  2805              CMP      r0,#5
0060ec  ddee              BLE      |L1.24780|
                  |L1.24814|
;;;935    																			clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0060ee  f7fffffe          BL       clear
;;;936    																			memset(data,0,strlen(data));
0060f2  4870              LDR      r0,|L1.25268|
0060f4  f7fffffe          BL       strlen
0060f8  4601              MOV      r1,r0
0060fa  9001              STR      r0,[sp,#4]
0060fc  486d              LDR      r0,|L1.25268|
0060fe  f7fffffe          BL       __aeabi_memclr
;;;937    																			clear();
006102  f7fffffe          BL       clear
006106  e164              B        |L1.25554|
                  |L1.24840|
;;;938    																		
;;;939    																//	log_it();								
;;;940    																	}else{send_chunk();}													
006108  f7fffffe          BL       send_chunk
00610c  e161              B        |L1.25554|
                  |L1.24846|
;;;941    									//checks for the sd_data available
;;;942    									}
;;;943    									//con1d=strstr(uart_string_gsm,"OK");
;;;944    									else
;;;945    									{
;;;946    											delay(100);
00610e  2064              MOVS     r0,#0x64
006110  f7fffffe          BL       delay
;;;947    											clear();//memset(uart_string_gsm,0,5000);
006114  f7fffffe          BL       clear
;;;948    											memset(at_,0,100);
006118  2164              MOVS     r1,#0x64
00611a  485f              LDR      r0,|L1.25240|
00611c  f7fffffe          BL       __aeabi_memclr
;;;949    											sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
006120  4864              LDR      r0,|L1.25268|
006122  f7fffffe          BL       strlen
006126  1c40              ADDS     r0,r0,#1
006128  4603              MOV      r3,r0
00612a  4a5e              LDR      r2,|L1.25252|
00612c  495b              LDR      r1,|L1.25244|
00612e  3154              ADDS     r1,r1,#0x54
006130  9001              STR      r0,[sp,#4]
006132  4859              LDR      r0,|L1.25240|
006134  f7fffffe          BL       __2sprintf
;;;950    											send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
006138  2005              MOVS     r0,#5
00613a  4b58              LDR      r3,|L1.25244|
00613c  461a              MOV      r2,r3
00613e  3278              ADDS     r2,r2,#0x78
006140  a154              ADR      r1,|L1.25236|
006142  9000              STR      r0,[sp,#0]
006144  4854              LDR      r0,|L1.25240|
006146  f7fffffe          BL       send_SD
;;;951    if(strstr(uart_string_gsm,"ERROR")){
00614a  4954              LDR      r1,|L1.25244|
00614c  4854              LDR      r0,|L1.25248|
00614e  f7fffffe          BL       strstr
006152  2800              CMP      r0,#0
006154  d004              BEQ      |L1.24928|
;;;952    drive[0]='C';drive[1]=':';
006156  2043              MOVS     r0,#0x43
006158  4952              LDR      r1,|L1.25252|
00615a  7008              STRB     r0,[r1,#0]
00615c  203a              MOVS     r0,#0x3a
00615e  7048              STRB     r0,[r1,#1]
                  |L1.24928|
;;;953    }	
;;;954    											clear();	
006160  f7fffffe          BL       clear
;;;955    											k2=0;									//string array counter for uart 1
006164  2000              MOVS     r0,#0
006166  4950              LDR      r1,|L1.25256|
006168  6008              STR      r0,[r1,#0]  ; k2
;;;956    											tout=0;	
00616a  4950              LDR      r1,|L1.25260|
00616c  6008              STR      r0,[r1,#0]  ; tout
;;;957    											for(k=0;k<strlen(data);k++)
00616e  4950              LDR      r1,|L1.25264|
006170  6008              STR      r0,[r1,#0]  ; k
006172  e00d              B        |L1.24976|
                  |L1.24948|
;;;958    											{
;;;959    											uart_putchar(UART1_BASE_PTR, data[k]);//clear();
006174  484f              LDR      r0,|L1.25268|
006176  494e              LDR      r1,|L1.25264|
006178  6809              LDR      r1,[r1,#0]  ; k
00617a  5c40              LDRB     r0,[r0,r1]
00617c  4601              MOV      r1,r0
00617e  9001              STR      r0,[sp,#4]
006180  484d              LDR      r0,|L1.25272|
006182  f7fffffe          BL       uart_putchar
006186  484a              LDR      r0,|L1.25264|
006188  6800              LDR      r0,[r0,#0]            ;957  ; k
00618a  1c40              ADDS     r0,r0,#1              ;957
00618c  4948              LDR      r1,|L1.25264|
00618e  6008              STR      r0,[r1,#0]            ;957  ; k
                  |L1.24976|
006190  4848              LDR      r0,|L1.25268|
006192  f7fffffe          BL       strlen
006196  4946              LDR      r1,|L1.25264|
006198  6809              LDR      r1,[r1,#0]            ;957  ; k
00619a  4288              CMP      r0,r1                 ;957
00619c  d8ea              BHI      |L1.24948|
;;;960    											}	
;;;961    											uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00619e  210a              MOVS     r1,#0xa
0061a0  4845              LDR      r0,|L1.25272|
0061a2  f7fffffe          BL       uart_putchar
0061a6  210a              MOVS     r1,#0xa
0061a8  4843              LDR      r0,|L1.25272|
0061aa  f7fffffe          BL       uart_putchar
0061ae  210a              MOVS     r1,#0xa
0061b0  4841              LDR      r0,|L1.25272|
0061b2  f7fffffe          BL       uart_putchar
0061b6  210a              MOVS     r1,#0xa
0061b8  483f              LDR      r0,|L1.25272|
0061ba  f7fffffe          BL       uart_putchar
0061be  210a              MOVS     r1,#0xa
0061c0  483d              LDR      r0,|L1.25272|
0061c2  f7fffffe          BL       uart_putchar
0061c6  210a              MOVS     r1,#0xa
0061c8  483b              LDR      r0,|L1.25272|
0061ca  f7fffffe          BL       uart_putchar
0061ce  210a              MOVS     r1,#0xa
0061d0  4839              LDR      r0,|L1.25272|
0061d2  f7fffffe          BL       uart_putchar
0061d6  210a              MOVS     r1,#0xa
0061d8  4837              LDR      r0,|L1.25272|
0061da  f7fffffe          BL       uart_putchar
0061de  210a              MOVS     r1,#0xa
0061e0  4835              LDR      r0,|L1.25272|
0061e2  f7fffffe          BL       uart_putchar
0061e6  210a              MOVS     r1,#0xa
0061e8  4833              LDR      r0,|L1.25272|
0061ea  f7fffffe          BL       uart_putchar
0061ee  210a              MOVS     r1,#0xa
0061f0  4831              LDR      r0,|L1.25272|
0061f2  f7fffffe          BL       uart_putchar
0061f6  210a              MOVS     r1,#0xa
0061f8  482f              LDR      r0,|L1.25272|
0061fa  f7fffffe          BL       uart_putchar
0061fe  210a              MOVS     r1,#0xa
006200  482d              LDR      r0,|L1.25272|
006202  f7fffffe          BL       uart_putchar
006206  210a              MOVS     r1,#0xa
006208  482b              LDR      r0,|L1.25272|
00620a  f7fffffe          BL       uart_putchar
00620e  210a              MOVS     r1,#0xa
006210  4829              LDR      r0,|L1.25272|
006212  f7fffffe          BL       uart_putchar
006216  210a              MOVS     r1,#0xa
006218  4827              LDR      r0,|L1.25272|
00621a  f7fffffe          BL       uart_putchar
00621e  210a              MOVS     r1,#0xa
006220  4825              LDR      r0,|L1.25272|
006222  f7fffffe          BL       uart_putchar
006226  210a              MOVS     r1,#0xa
006228  4823              LDR      r0,|L1.25272|
00622a  f7fffffe          BL       uart_putchar
00622e  210a              MOVS     r1,#0xa
006230  4821              LDR      r0,|L1.25272|
006232  f7fffffe          BL       uart_putchar
006236  210a              MOVS     r1,#0xa
006238  481f              LDR      r0,|L1.25272|
00623a  f7fffffe          BL       uart_putchar
00623e  210a              MOVS     r1,#0xa
006240  481d              LDR      r0,|L1.25272|
006242  f7fffffe          BL       uart_putchar
006246  210a              MOVS     r1,#0xa
006248  481b              LDR      r0,|L1.25272|
00624a  f7fffffe          BL       uart_putchar
00624e  210a              MOVS     r1,#0xa
006250  4819              LDR      r0,|L1.25272|
006252  f7fffffe          BL       uart_putchar
006256  210a              MOVS     r1,#0xa
006258  4817              LDR      r0,|L1.25272|
00625a  f7fffffe          BL       uart_putchar
00625e  210a              MOVS     r1,#0xa
006260  4815              LDR      r0,|L1.25272|
006262  f7fffffe          BL       uart_putchar
006266  210a              MOVS     r1,#0xa
006268  4813              LDR      r0,|L1.25272|
00626a  f7fffffe          BL       uart_putchar
00626e  210a              MOVS     r1,#0xa
006270  4811              LDR      r0,|L1.25272|
006272  f7fffffe          BL       uart_putchar
006276  210a              MOVS     r1,#0xa
006278  480f              LDR      r0,|L1.25272|
00627a  f7fffffe          BL       uart_putchar
00627e  210a              MOVS     r1,#0xa
006280  480d              LDR      r0,|L1.25272|
006282  f7fffffe          BL       uart_putchar
006286  210a              MOVS     r1,#0xa
006288  480b              LDR      r0,|L1.25272|
00628a  f7fffffe          BL       uart_putchar
00628e  210a              MOVS     r1,#0xa
006290  4809              LDR      r0,|L1.25272|
006292  e013              B        |L1.25276|
                  |L1.25236|
006294  3e00              DCB      ">",0
006296  00                DCB      0
006297  00                DCB      0
                  |L1.25240|
                          DCD      at_
                  |L1.25244|
                          DCD      ||.text||+0x870
                  |L1.25248|
                          DCD      uart_string_gsm
                  |L1.25252|
                          DCD      drive
                  |L1.25256|
                          DCD      ||k2||
                  |L1.25260|
                          DCD      tout
                  |L1.25264|
                          DCD      k
                  |L1.25268|
                          DCD      data
                  |L1.25272|
                          DCD      0x4006b000
                  |L1.25276|
0062bc  f7fffffe          BL       uart_putchar
0062c0  210a              MOVS     r1,#0xa
0062c2  48a3              LDR      r0,|L1.25936|
0062c4  f7fffffe          BL       uart_putchar
0062c8  210a              MOVS     r1,#0xa
0062ca  48a1              LDR      r0,|L1.25936|
0062cc  f7fffffe          BL       uart_putchar
0062d0  210a              MOVS     r1,#0xa
0062d2  489f              LDR      r0,|L1.25936|
0062d4  f7fffffe          BL       uart_putchar
0062d8  210a              MOVS     r1,#0xa
0062da  489d              LDR      r0,|L1.25936|
0062dc  f7fffffe          BL       uart_putchar
0062e0  210a              MOVS     r1,#0xa
0062e2  489b              LDR      r0,|L1.25936|
0062e4  f7fffffe          BL       uart_putchar
0062e8  210a              MOVS     r1,#0xa
0062ea  4899              LDR      r0,|L1.25936|
0062ec  f7fffffe          BL       uart_putchar
0062f0  210a              MOVS     r1,#0xa
0062f2  4897              LDR      r0,|L1.25936|
0062f4  f7fffffe          BL       uart_putchar
0062f8  210a              MOVS     r1,#0xa
0062fa  4895              LDR      r0,|L1.25936|
0062fc  f7fffffe          BL       uart_putchar
006300  210a              MOVS     r1,#0xa
006302  4893              LDR      r0,|L1.25936|
006304  f7fffffe          BL       uart_putchar
006308  210a              MOVS     r1,#0xa
00630a  4891              LDR      r0,|L1.25936|
00630c  f7fffffe          BL       uart_putchar
006310  210a              MOVS     r1,#0xa
006312  488f              LDR      r0,|L1.25936|
006314  f7fffffe          BL       uart_putchar
006318  210a              MOVS     r1,#0xa
00631a  488d              LDR      r0,|L1.25936|
00631c  f7fffffe          BL       uart_putchar
006320  210a              MOVS     r1,#0xa
006322  488b              LDR      r0,|L1.25936|
006324  f7fffffe          BL       uart_putchar
006328  210a              MOVS     r1,#0xa
00632a  4889              LDR      r0,|L1.25936|
00632c  f7fffffe          BL       uart_putchar
006330  210a              MOVS     r1,#0xa
006332  4887              LDR      r0,|L1.25936|
006334  f7fffffe          BL       uart_putchar
006338  210a              MOVS     r1,#0xa
00633a  4885              LDR      r0,|L1.25936|
00633c  f7fffffe          BL       uart_putchar
006340  210a              MOVS     r1,#0xa
006342  4883              LDR      r0,|L1.25936|
006344  f7fffffe          BL       uart_putchar
006348  210a              MOVS     r1,#0xa
00634a  4881              LDR      r0,|L1.25936|
00634c  f7fffffe          BL       uart_putchar
006350  210a              MOVS     r1,#0xa
006352  487f              LDR      r0,|L1.25936|
006354  f7fffffe          BL       uart_putchar
006358  210a              MOVS     r1,#0xa
00635a  487d              LDR      r0,|L1.25936|
00635c  f7fffffe          BL       uart_putchar
006360  210a              MOVS     r1,#0xa
006362  487b              LDR      r0,|L1.25936|
006364  f7fffffe          BL       uart_putchar
006368  210a              MOVS     r1,#0xa
00636a  4879              LDR      r0,|L1.25936|
00636c  f7fffffe          BL       uart_putchar
006370  210a              MOVS     r1,#0xa
006372  4877              LDR      r0,|L1.25936|
006374  f7fffffe          BL       uart_putchar
006378  210a              MOVS     r1,#0xa
00637a  4875              LDR      r0,|L1.25936|
00637c  f7fffffe          BL       uart_putchar
006380  210a              MOVS     r1,#0xa
006382  4873              LDR      r0,|L1.25936|
006384  f7fffffe          BL       uart_putchar
006388  210a              MOVS     r1,#0xa
00638a  4871              LDR      r0,|L1.25936|
00638c  f7fffffe          BL       uart_putchar
;;;962    											//memset(data,0,1000);
;;;963    											//timer counts to wait for characters in uart 1 									
;;;964    											while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
006390  bf00              NOP      
                  |L1.25490|
006392  4970              LDR      r1,|L1.25940|
006394  4870              LDR      r0,|L1.25944|
006396  f7fffffe          BL       strstr
00639a  2800              CMP      r0,#0
00639c  d10a              BNE      |L1.25524|
00639e  496d              LDR      r1,|L1.25940|
0063a0  398c              SUBS     r1,r1,#0x8c
0063a2  486d              LDR      r0,|L1.25944|
0063a4  f7fffffe          BL       strstr
0063a8  2800              CMP      r0,#0
0063aa  d103              BNE      |L1.25524|
0063ac  486b              LDR      r0,|L1.25948|
0063ae  6800              LDR      r0,[r0,#0]  ; tout
0063b0  2805              CMP      r0,#5
0063b2  ddee              BLE      |L1.25490|
                  |L1.25524|
;;;965    											{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;966    											}
;;;967    											clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0063b4  f7fffffe          BL       clear
;;;968    											memset(data,0,strlen(data));
0063b8  4869              LDR      r0,|L1.25952|
0063ba  f7fffffe          BL       strlen
0063be  4601              MOV      r1,r0
0063c0  9001              STR      r0,[sp,#4]
0063c2  4867              LDR      r0,|L1.25952|
0063c4  f7fffffe          BL       __aeabi_memclr
;;;969    											clear();
0063c8  f7fffffe          BL       clear
                  |L1.25548|
0063cc  e001              B        |L1.25554|
                  |L1.25550|
;;;970    										//log_it();			//otherwize log it					
;;;971    									}
;;;972    } // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;973    else
;;;974    {
;;;975    	send_chunk();
0063ce  f7fffffe          BL       send_chunk
                  |L1.25554|
0063d2  f7fefdca          BL       |L1.20330|
;;;976    }		
;;;977    /******************sleep checker end**********************/		
;;;978    		}
;;;979    /******************while end**********************/		
;;;980    	} 
;;;981    /******************main end***********************/
;;;982    }
;;;983    /********************************************************************/
                          ENDP

                  HardFault_Handler PROC
;;;990    
;;;991    void HardFault_Handler()
0063d6  b510              PUSH     {r4,lr}
;;;992    {	long ppp=0;
0063d8  2400              MOVS     r4,#0
;;;993    send_modem("Hardfault_Handler");	
0063da  a062              ADR      r0,|L1.25956|
0063dc  f7fffffe          BL       send_modem
;;;994    
;;;995    
;;;996    	RESET_OFF;
0063e0  2020              MOVS     r0,#0x20
0063e2  4965              LDR      r1,|L1.25976|
0063e4  6088              STR      r0,[r1,#8]
;;;997    	RESET_OFF;
0063e6  6088              STR      r0,[r1,#8]
;;;998    for(ppp=0;ppp<999999; ppp++);	
0063e8  bf00              NOP      
0063ea  e000              B        |L1.25582|
                  |L1.25580|
0063ec  1c64              ADDS     r4,r4,#1
                  |L1.25582|
0063ee  4863              LDR      r0,|L1.25980|
0063f0  4284              CMP      r4,r0
0063f2  dbfb              BLT      |L1.25580|
;;;999    	
;;;1000   	RESET_ON;
0063f4  2020              MOVS     r0,#0x20
0063f6  4960              LDR      r1,|L1.25976|
0063f8  6048              STR      r0,[r1,#4]
;;;1001   	RESET_ON;
0063fa  6048              STR      r0,[r1,#4]
;;;1002   for(ppp=0;ppp<999999; ppp++);
0063fc  2400              MOVS     r4,#0
0063fe  e000              B        |L1.25602|
                  |L1.25600|
006400  1c64              ADDS     r4,r4,#1
                  |L1.25602|
006402  485e              LDR      r0,|L1.25980|
006404  4284              CMP      r4,r0
006406  dbfb              BLT      |L1.25600|
;;;1003   }
006408  bd10              POP      {r4,pc}
;;;1004   
                          ENDP

                  LPTimer_IRQHandler PROC
;;;1006   
;;;1007    void LPTimer_IRQHandler(void)
00640a  b510              PUSH     {r4,lr}
;;;1008   {
;;;1009   lpticks+=1;
00640c  485c              LDR      r0,|L1.25984|
00640e  6800              LDR      r0,[r0,#0]  ; lpticks
006410  1c40              ADDS     r0,r0,#1
006412  495b              LDR      r1,|L1.25984|
006414  6008              STR      r0,[r1,#0]  ; lpticks
;;;1010   //rtcticks++;
;;;1011   	tout++;tout2++;
006416  4851              LDR      r0,|L1.25948|
006418  6800              LDR      r0,[r0,#0]  ; tout
00641a  1c40              ADDS     r0,r0,#1
00641c  494f              LDR      r1,|L1.25948|
00641e  6008              STR      r0,[r1,#0]  ; tout
006420  4858              LDR      r0,|L1.25988|
006422  6800              LDR      r0,[r0,#0]  ; tout2
006424  1c40              ADDS     r0,r0,#1
006426  4957              LDR      r1,|L1.25988|
006428  6008              STR      r0,[r1,#0]  ; tout2
;;;1012   	rtcticks2++;
00642a  4857              LDR      r0,|L1.25992|
00642c  6800              LDR      r0,[r0,#0]  ; rtcticks2
00642e  1c40              ADDS     r0,r0,#1
006430  4955              LDR      r1,|L1.25992|
006432  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;1013   	if(sleep_flag == 1){aliveping++;}
006434  4855              LDR      r0,|L1.25996|
006436  6800              LDR      r0,[r0,#0]  ; sleep_flag
006438  2801              CMP      r0,#1
00643a  d104              BNE      |L1.25670|
00643c  4854              LDR      r0,|L1.26000|
00643e  6800              LDR      r0,[r0,#0]  ; aliveping
006440  1c40              ADDS     r0,r0,#1
006442  4953              LDR      r1,|L1.26000|
006444  6008              STR      r0,[r1,#0]  ; aliveping
                  |L1.25670|
;;;1014   	if(rtcticks2 > 1600)
006446  4850              LDR      r0,|L1.25992|
006448  6800              LDR      r0,[r0,#0]  ; rtcticks2
00644a  2119              MOVS     r1,#0x19
00644c  0189              LSLS     r1,r1,#6
00644e  4288              CMP      r0,r1
006450  dd10              BLE      |L1.25716|
;;;1015   	{
;;;1016   	RESET_OFF;
006452  2020              MOVS     r0,#0x20
006454  4948              LDR      r1,|L1.25976|
006456  6088              STR      r0,[r1,#8]
;;;1017   	RESET_OFF;
006458  6088              STR      r0,[r1,#8]
;;;1018   	delay(100);	
00645a  2064              MOVS     r0,#0x64
00645c  f7fffffe          BL       delay
;;;1019   	RESET_ON;
006460  2020              MOVS     r0,#0x20
006462  4945              LDR      r1,|L1.25976|
006464  6048              STR      r0,[r1,#4]
;;;1020   	RESET_ON;	
006466  6048              STR      r0,[r1,#4]
;;;1021   	delay(100);
006468  2064              MOVS     r0,#0x64
00646a  f7fffffe          BL       delay
;;;1022   	rtcticks2 =0;
00646e  2000              MOVS     r0,#0
006470  4945              LDR      r1,|L1.25992|
006472  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.25716|
;;;1023   	}
;;;1024   	
;;;1025   
;;;1026   	
;;;1027     LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
006474  4847              LDR      r0,|L1.26004|
006476  6800              LDR      r0,[r0,#0]
006478  2180              MOVS     r1,#0x80
00647a  4308              ORRS     r0,r0,r1
00647c  4945              LDR      r1,|L1.26004|
00647e  6008              STR      r0,[r1,#0]
;;;1028     LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
006480  20c1              MOVS     r0,#0xc1
006482  6008              STR      r0,[r1,#0]
;;;1029     
;;;1030   }
006484  bd10              POP      {r4,pc}
;;;1031   
                          ENDP

                  SysTick_Handler PROC
;;;1033   
;;;1034   void SysTick_Handler(void)
006486  4844              LDR      r0,|L1.26008|
;;;1035   {	
;;;1036   	//syscounter++;
;;;1037   	if( intrtmr > 1)
006488  6800              LDR      r0,[r0,#0]  ; intrtmr
00648a  2801              CMP      r0,#1
00648c  dd05              BLE      |L1.25754|
;;;1038   	{
;;;1039   		uart0buffinc = 0;
00648e  2000              MOVS     r0,#0
006490  4942              LDR      r1,|L1.26012|
006492  6008              STR      r0,[r1,#0]  ; uart0buffinc
;;;1040   		intrtmr=0;
006494  4940              LDR      r1,|L1.26008|
006496  6008              STR      r0,[r1,#0]  ; intrtmr
006498  e004              B        |L1.25764|
                  |L1.25754|
;;;1041   	}
;;;1042   	else{
;;;1043   		intrtmr++;
00649a  483f              LDR      r0,|L1.26008|
00649c  6800              LDR      r0,[r0,#0]  ; intrtmr
00649e  1c40              ADDS     r0,r0,#1
0064a0  493d              LDR      r1,|L1.26008|
0064a2  6008              STR      r0,[r1,#0]  ; intrtmr
                  |L1.25764|
;;;1044   	}
;;;1045   		
;;;1046   	
;;;1047   
;;;1048   
;;;1049   }
0064a4  4770              BX       lr
;;;1050   
                          ENDP

                  dtr_sleep PROC
;;;1054   
;;;1055   void dtr_sleep()
0064a6  b538              PUSH     {r3-r5,lr}
;;;1056   {
;;;1057   
;;;1058   test2=GPIOB_PDIR;
0064a8  4833              LDR      r0,|L1.25976|
0064aa  3840              SUBS     r0,r0,#0x40
0064ac  6900              LDR      r0,[r0,#0x10]
0064ae  493c              LDR      r1,|L1.26016|
0064b0  6008              STR      r0,[r1,#0]  ; test2
;;;1059   memset(at_,0,strlen(at_));
0064b2  483c              LDR      r0,|L1.26020|
0064b4  f7fffffe          BL       strlen
0064b8  4604              MOV      r4,r0
0064ba  4621              MOV      r1,r4
0064bc  4839              LDR      r0,|L1.26020|
0064be  f7fffffe          BL       __aeabi_memclr
;;;1060   sprintf(at_,"\n\n\n GPIOB = %d \n\n\n ",test2);	
0064c2  4837              LDR      r0,|L1.26016|
0064c4  a138              ADR      r1,|L1.26024|
0064c6  6802              LDR      r2,[r0,#0]  ; test2
0064c8  4836              LDR      r0,|L1.26020|
0064ca  f7fffffe          BL       __2sprintf
;;;1061   send_modem(at_);
0064ce  4835              LDR      r0,|L1.26020|
0064d0  f7fffffe          BL       send_modem
;;;1062   if( test2 == 0 )	
0064d4  4832              LDR      r0,|L1.26016|
0064d6  6800              LDR      r0,[r0,#0]  ; test2
0064d8  2800              CMP      r0,#0
0064da  d107              BNE      |L1.25836|
;;;1063   {
;;;1064   	sleep_flag=1;	
0064dc  2001              MOVS     r0,#1
0064de  492b              LDR      r1,|L1.25996|
0064e0  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1065   	DTR_ON;   //sleep
0064e2  2080              MOVS     r0,#0x80
0064e4  4924              LDR      r1,|L1.25976|
0064e6  3140              ADDS     r1,r1,#0x40
0064e8  6048              STR      r0,[r1,#4]
0064ea  e02c              B        |L1.25926|
                  |L1.25836|
;;;1066   
;;;1067   }
;;;1068   else
;;;1069   {DTR_OFF;
0064ec  2080              MOVS     r0,#0x80
0064ee  4922              LDR      r1,|L1.25976|
0064f0  3140              ADDS     r1,r1,#0x40
0064f2  6088              STR      r0,[r1,#8]
;;;1070   	
;;;1071   	if (sleep_flag != 0  )
0064f4  4825              LDR      r0,|L1.25996|
0064f6  6800              LDR      r0,[r0,#0]  ; sleep_flag
0064f8  2800              CMP      r0,#0
0064fa  d020              BEQ      |L1.25918|
;;;1072   	{
;;;1073   	// wakeup and reset
;;;1074   		sleep_flag=0;
0064fc  2000              MOVS     r0,#0
0064fe  4923              LDR      r1,|L1.25996|
006500  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1075       		// not sleep	
;;;1076   //	  HardFault_Handler();
;;;1077   delay(1000);
006502  207d              MOVS     r0,#0x7d
006504  00c0              LSLS     r0,r0,#3
006506  f7fffffe          BL       delay
;;;1078   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
00650a  482c              LDR      r0,|L1.26044|
00650c  6800              LDR      r0,[r0,#0]  ; tmeout
00650e  4b2c              LDR      r3,|L1.26048|
006510  4a10              LDR      r2,|L1.25940|
006512  3a14              SUBS     r2,r2,#0x14
006514  490f              LDR      r1,|L1.25940|
006516  9000              STR      r0,[sp,#0]
006518  482a              LDR      r0,|L1.26052|
00651a  f7fffffe          BL       send_GSM
;;;1079   		
;;;1080   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
00651e  4827              LDR      r0,|L1.26044|
006520  6800              LDR      r0,[r0,#0]  ; tmeout
006522  4b27              LDR      r3,|L1.26048|
006524  4a0b              LDR      r2,|L1.25940|
006526  3a14              SUBS     r2,r2,#0x14
006528  490a              LDR      r1,|L1.25940|
00652a  9000              STR      r0,[sp,#0]
00652c  a026              ADR      r0,|L1.26056|
00652e  f7fffffe          BL       send_GSM
;;;1081   
;;;1082   //send_GSM("\n\nAT+CFUN=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;1083   		
;;;1084   delay(1000);	
006532  207d              MOVS     r0,#0x7d
006534  00c0              LSLS     r0,r0,#3
006536  f7fffffe          BL       delay
;;;1085   clear();	
00653a  f7fffffe          BL       clear
                  |L1.25918|
;;;1086   	}  
;;;1087   	DTR_OFF;		// not sleep	
00653e  2080              MOVS     r0,#0x80
006540  490d              LDR      r1,|L1.25976|
006542  3140              ADDS     r1,r1,#0x40
006544  6088              STR      r0,[r1,#8]
                  |L1.25926|
;;;1088   
;;;1089   
;;;1090   
;;;1091   }
;;;1092   
;;;1093   LED_state();LED_state2();
006546  f7fffffe          BL       LED_state
00654a  f7fffffe          BL       LED_state2
;;;1094   }
00654e  bd38              POP      {r3-r5,pc}
;;;1095   
                          ENDP

                  |L1.25936|
                          DCD      0x4006b000
                  |L1.25940|
                          DCD      ||.text||+0x8fc
                  |L1.25944|
                          DCD      uart_string_gsm
                  |L1.25948|
                          DCD      tout
                  |L1.25952|
                          DCD      data
                  |L1.25956|
006564  48617264          DCB      "Hardfault_Handler",0
006568  6661756c
00656c  745f4861
006570  6e646c65
006574  7200    
006576  00                DCB      0
006577  00                DCB      0
                  |L1.25976|
                          DCD      0x400ff080
                  |L1.25980|
                          DCD      0x000f423f
                  |L1.25984|
                          DCD      lpticks
                  |L1.25988|
                          DCD      tout2
                  |L1.25992|
                          DCD      rtcticks2
                  |L1.25996|
                          DCD      sleep_flag
                  |L1.26000|
                          DCD      aliveping
                  |L1.26004|
                          DCD      0x40040000
                  |L1.26008|
                          DCD      intrtmr
                  |L1.26012|
                          DCD      uart0buffinc
                  |L1.26016|
                          DCD      test2
                  |L1.26020|
                          DCD      at_
                  |L1.26024|
0065a8  0a0a0a20          DCB      "\n\n\n GPIOB = %d \n\n\n ",0
0065ac  4750494f
0065b0  42203d20
0065b4  2564200a
0065b8  0a0a2000
                  |L1.26044|
                          DCD      tmeout
                  |L1.26048|
                          DCD      ||.text||+0xd54
                  |L1.26052|
                          DCD      ||.text||+0x3db0
                  |L1.26056|
0065c8  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
0065cc  2b475356
0065d0  0d0a00  
0065d3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        30
                  latest
                          %        10
                  ignstr
                          %        9
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  uart_string_gps
                          %        3000
                  data2
                          %        300
                  exception
                          %        200
                  ||ip||
                          %        100
                  port
                          %        10
                  at_
                          %        100
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  _rtcticks
                          %        10
                  imei
                          %        20
                  sd_data
                          %        1400
                  ||id||
                          %        30

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a41542b          DCB      "\nAT+CMGS=""%s""\r\n",0
000004  434d4753
000008  3d222573
00000c  220d0a00
000010  4552524f          DCB      "ERROR:",0
000014  523a00  
000017  00                DCB      0
000018  4552524f          DCB      "ERROR\r\n",0
00001c  520d0a00
000020  3e00              DCB      ">",0
000022  00                DCB      0
000023  00                DCB      0
000024  2b434d47          DCB      "+CMGS:",0
000028  533a00  
00002b  00                DCB      0
00002c  4f4b00            DCB      "OK",0
00002f  00                DCB      0
000030  0a41542b          DCB      "\nAT+FSCREATE=C:\\IGN.TXT\r\n",0
000034  46534352
000038  45415445
00003c  3d433a5c
000040  49474e2e
000044  5458540d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0
00004c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n",0
000050  2b465357
000054  52495445
000058  3d433a5c
00005c  49474e2e
000060  5458542c
000064  302c362c
000068  31300d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  4f4b0d0a          DCB      "OK\r\n",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  0a494f4e          DCB      "\nION\n\n\n\n",0
00007c  0a0a0a0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
000084  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
000088  46534352
00008c  45415445
000090  3d433a5c
000094  49505f50
000098  4f52542e
00009c  5458540d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",0
0000a8  2b465357
0000ac  52495445
0000b0  3d433a5c
0000b4  49505f50
0000b8  4f52542e
0000bc  5458542c
0000c0  302c2564
0000c4  2c31300d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
0000cc  7c49507c          DCB      "|IP|",0
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  7c504f52          DCB      "|PORT|",0
0000d8  547c00  
0000db  00                DCB      0
0000dc  7c00              DCB      "|",0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4552524f          DCB      "ERROR",0
0000e4  5200    
0000e6  00                DCB      0
0000e7  00                DCB      0
0000e8  524d4300          DCB      "RMC",0
0000ec  47474100          DCB      "GGA",0
0000f0  0d0a0a0a          DCB      "\r\n\n\nAT+GSN\r\n",0
0000f4  41542b47
0000f8  534e0d0a
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
000100  25642c00          DCB      "%d,",0
000104  0d0a0d0a          DCB      "\r\n\r\nAT+CBC\r\n",0
000108  41542b43
00010c  42430d0a
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
000114  256400            DCB      "%d",0
000117  00                DCB      0
000118  256600            DCB      "%f",0
00011b  00                DCB      0
00011c  2c00              DCB      ",",0
00011e  00                DCB      0
00011f  00                DCB      0
000120  24477847          DCB      "$$GxGGA",0
000124  474100  
000127  00                DCB      0
000128  2c244778          DCB      ",$$GxRMC",0
00012c  524d4300
000130  2c463d00          DCB      ",F=",0
000134  2c41433d          DCB      ",AC=",0
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
00013c  2c493d00          DCB      ",I=",0
000140  2c525332          DCB      ",RS232=",0
000144  33323d00
000148  2c42522a          DCB      ",BR*",0
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
000150  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
000154  46534352
000158  45415445
00015c  3d433a5c
000160  494e5445
000164  5256414c
000168  2e545854
00016c  0d0a00  
00016f  00                DCB      0
000170  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",0
000174  2b465357
000178  52495445
00017c  3d433a5c
000180  494e5445
000184  5256414c
000188  2e545854
00018c  2c302c25
000190  642c3130
000194  0d0a00  
000197  00                DCB      0
000198  7c494e54          DCB      "|INTERVAL|",0
00019c  45525641
0001a0  4c7c00  
0001a3  00                DCB      0
0001a4  0a41542b          DCB      "\nAT+FSCREATE=C:\\APN.TXT\r\n",0
0001a8  46534352
0001ac  45415445
0001b0  3d433a5c
0001b4  41504e2e
0001b8  5458540d
0001bc  0a00    
0001be  00                DCB      0
0001bf  00                DCB      0
0001c0  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",0
0001c4  2b465357
0001c8  52495445
0001cc  3d433a5c
0001d0  41504e2e
0001d4  5458542c
0001d8  302c2564
0001dc  2c31300d
0001e0  0a00    
0001e2  00                DCB      0
0001e3  00                DCB      0
0001e4  0a0a4154          DCB      "\n\nAT\r\n",0
0001e8  0d0a00  
0001eb  00                DCB      0
0001ec  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
0001f0  2b475356
0001f4  0d0a00  
0001f7  00                DCB      0
0001f8  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
0001fc  2b434d47
000200  463d310a
000204  0a00    
000206  00                DCB      0
000207  00                DCB      0
000208  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
00020c  2b435343
000210  413f0d0a
000214  00      
000215  00                DCB      0
000216  00                DCB      0
000217  00                DCB      0
000218  0d0a4154          DCB      "\r\nAT+CMGR=1\r\n",0
00021c  2b434d47
000220  523d310d
000224  0a00    
000226  00                DCB      0
000227  00                DCB      0
000228  4f574e45          DCB      "OWNER",0
00022c  5200    
00022e  00                DCB      0
00022f  00                DCB      0
000230  4c4f4341          DCB      "LOCATION",0
000234  54494f4e
000238  00      
000239  00                DCB      0
00023a  00                DCB      0
00023b  00                DCB      0
00023c  494e5445          DCB      "INTERVAL",0
000240  5256414c
000244  00      
000245  00                DCB      0
000246  00                DCB      0
000247  00                DCB      0
000248  53544152          DCB      "START",0
00024c  5400    
00024e  00                DCB      0
00024f  00                DCB      0
000250  4f574e45          DCB      "OWNER1",0
000254  523100  
000257  00                DCB      0
000258  4f574e45          DCB      "OWNER2",0
00025c  523200  
00025f  00                DCB      0
000260  4f574e45          DCB      "OWNER3",0
000264  523300  
000267  00                DCB      0
000268  44454255          DCB      "DEBUG",0
00026c  4700    
00026e  00                DCB      0
00026f  00                DCB      0
000270  52455345          DCB      "RESET",0
000274  5400    
000276  00                DCB      0
000277  00                DCB      0
000278  495000            DCB      "IP",0
00027b  00                DCB      0
00027c  53554f57          DCB      "SUOWNER",0
000280  4e455200
000284  534f574e          DCB      "SOWNER",0
000288  455200  
00028b  00                DCB      0
00028c  49474e49          DCB      "IGNITION ON",0
000290  54494f4e
000294  204f4e00
000298  49474e49          DCB      "IGNITION OFF",0
00029c  54494f4e
0002a0  204f4646
0002a4  00      
0002a5  00                DCB      0
0002a6  00                DCB      0
0002a7  00                DCB      0
0002a8  49474e53          DCB      "IGNSTAT",0
0002ac  54415400
0002b0  0a546865          DCB      "\nThere is an Emergency please help:\nCoordinates:%sN,%"
0002b4  72652069
0002b8  7320616e
0002bc  20456d65
0002c0  7267656e
0002c4  63792070
0002c8  6c656173
0002cc  65206865
0002d0  6c703a0a
0002d4  436f6f72
0002d8  64696e61
0002dc  7465733a
0002e0  25734e2c
0002e4  25      
0002e5  73450a68          DCB      "sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&o"
0002e9  74747073
0002ed  3a2f2f77
0002f1  77772e67
0002f5  6f6f676c
0002f9  652e636f
0002fd  6d2f7365
000301  61726368
000305  3f713d25
000309  73256332
00030d  43257326
000311  69653d75
000315  74662d38
000319  266f    
00031b  653d7574          DCB      "e=utf-8\n",0
00031f  662d380a
000323  00      
000324  0d0a4154          DCB      "\r\nAT+CPBR=1\r\n",0
000328  2b435042
00032c  523d310d
000330  0a00    
000332  00                DCB      0
000333  00                DCB      0
000334  0d0a4154          DCB      "\r\nAT+CPBR=2\r\n",0
000338  2b435042
00033c  523d320d
000340  0a00    
000342  00                DCB      0
000343  00                DCB      0
000344  0a436f6f          DCB      "\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://"
000348  7264696e
00034c  61746573
000350  203a2025
000354  73204e2c
000358  20257320
00035c  450a5370
000360  65656420
000364  3a202573
000368  206b6d70
00036c  680a0a68
000370  74747073
000374  3a2f2f  
000377  7777772e          DCB      "www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",0
00037b  676f6f67
00037f  6c652e63
000383  6f6d2f73
000387  65617263
00038b  683f713d
00038f  25732563
000393  32432573
000397  2669653d
00039b  7574662d
00039f  38266f65
0003a3  3d757466
0003a7  2d380a00
0003ab  00                DCB      0
0003ac  0d0a4154          DCB      "\r\nAT+CMGD=1,4\r\n",0
0003b0  2b434d47
0003b4  443d312c
0003b8  340d0a00
0003bc  0a41542b          DCB      "\nAT+FSCREATE=D:\\LOG.TXT\r\n",0
0003c0  46534352
0003c4  45415445
0003c8  3d443a5c
0003cc  4c4f472e
0003d0  5458540d
0003d4  0a00    
0003d6  00                DCB      0
0003d7  00                DCB      0
0003d8  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
0003dc  46534352
0003e0  45415445
0003e4  3d433a5c
0003e8  4c4f472e
0003ec  5458540d
0003f0  0a00    
0003f2  00                DCB      0
0003f3  00                DCB      0
0003f4  72756472          DCB      "rudra.jellyfishtele.com",0
0003f8  612e6a65
0003fc  6c6c7966
000400  69736874
000404  656c652e
000408  636f6d00
00040c  35353535          DCB      "5555",0
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
000414  3500              DCB      "5",0
000416  00                DCB      0
000417  00                DCB      0
000418  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n\r\n",0
00041c  542b434d
000420  47443d31
000424  2c340d0a
000428  0d0a00  
00042b  00                DCB      0
00042c  257300            DCB      "%s",0
00042f  00                DCB      0
000430  0a00              DCB      "\n",0
000432  00                DCB      0
000433  00                DCB      0
000434  43480a00          DCB      "CH\n",0
000438  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
00043c  2b465357
000440  52495445
000444  3d25735c
000448  4c4f472e
00044c  5458542c
000450  312c2564
000454  2c31300a
000458  0a00    
00045a  00                DCB      0
00045b  00                DCB      0
00045c  4e4f5420          DCB      "NOT INSERTED:",0
000460  494e5345
000464  52544544
000468  3a00    
00046a  00                DCB      0
00046b  00                DCB      0
00046c  52656164          DCB      "Ready",0
000470  7900    
000472  00                DCB      0
000473  00                DCB      0
000474  0a0a2041          DCB      "\n\n AT+CFUN=1,1\r\n",0
000478  542b4346
00047c  554e3d31
000480  2c310d0a
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
000488  0d0d0a41          DCB      "\r\r\nAT+CMGD=1,4\r\n\n\n\n\n",0
00048c  542b434d
000490  47443d31
000494  2c340d0a
000498  0a0a0a0a
00049c  00      
00049d  00                DCB      0
00049e  00                DCB      0
00049f  00                DCB      0
0004a0  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
0004a4  2b435042
0004a8  533d2253
0004ac  4d220d0a
0004b0  00      
0004b1  00                DCB      0
0004b2  00                DCB      0
0004b3  00                DCB      0
0004b4  0d0a4154          DCB      "\r\nAT+CPBW=1\r\r\n\n",0
0004b8  2b435042
0004bc  573d310d
0004c0  0d0a0a00
0004c4  0d0a4154          DCB      "\r\nAT+CPBW=1,""%s"",129,""OWNER1""\r\n",0
0004c8  2b435042
0004cc  573d312c
0004d0  22257322
0004d4  2c313239
0004d8  2c224f57
0004dc  4e455231
0004e0  220d0a00
0004e4  0a0a4154          DCB      "\n\nAT+CPBS=""ME""\r\n",0
0004e8  2b435042
0004ec  533d224d
0004f0  45220d0a
0004f4  00      
0004f5  00                DCB      0
0004f6  00                DCB      0
0004f7  00                DCB      0
0004f8  0d0a4154          DCB      "\r\nAT+CPBW=2\r\r\n\n",0
0004fc  2b435042
000500  573d320d
000504  0d0a0a00
000508  0d0a4154          DCB      "\r\nAT+CPBW=2,""%s"",129,""OWNER2""\r\n",0
00050c  2b435042
000510  573d322c
000514  22257322
000518  2c313239
00051c  2c224f57
000520  4e455232
000524  220d0a00
000528  0d0a4154          DCB      "\r\nAT+CPBW=3\r\r\n\n",0
00052c  2b435042
000530  573d330d
000534  0d0a0a00
000538  0d0a4154          DCB      "\r\nAT+CPBW=3,""%s"",129,""OWNER3""\r\n",0
00053c  2b435042
000540  573d332c
000544  22257322
000548  2c313239
00054c  2c224f57
000550  4e455233
000554  220d0a00
000558  0d0a4154          DCB      "\r\nAT+CPBW=4\r\r\n\n",0
00055c  2b435042
000560  573d340d
000564  0d0a0a00
000568  0d0a4154          DCB      "\r\nAT+CPBW=4,""%s"",129,""SOWNER""\r\n",0
00056c  2b435042
000570  573d342c
000574  22257322
000578  2c313239
00057c  2c22534f
000580  574e4552
000584  220d0a00
000588  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n",0
00058c  542b434d
000590  47443d31
000594  2c340d0a
000598  00      
000599  00                DCB      0
00059a  00                DCB      0
00059b  00                DCB      0
00059c  2c2000            DCB      ", ",0
00059f  00                DCB      0
0005a0  2c202447          DCB      ", $$GxRMC",0
0005a4  78524d43
0005a8  00      
0005a9  00                DCB      0
0005aa  00                DCB      0
0005ab  00                DCB      0
0005ac  0d0a0d0a          DCB      "\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",0
0005b0  41542b46
0005b4  53464c53
0005b8  495a453d
0005bc  25735c4c
0005c0  4f472e54
0005c4  58540d0a
0005c8  00      
0005c9  00                DCB      0
0005ca  00                DCB      0
0005cb  00                DCB      0
0005cc  0d0a0d0a          DCB      "\r\n\r\n              <%d>   <%d>   <=%d>          \r\n"
0005d0  20202020
0005d4  20202020
0005d8  20202020
0005dc  20203c25
0005e0  643e2020
0005e4  203c2564
0005e8  3e202020
0005ec  3c3d2564
0005f0  3e202020
0005f4  20202020
0005f8  2020200d
0005fc  0a      
0005fd  0d0a00            DCB      "\r\n",0
000600  0d0a0d0a          DCB      "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",0
000604  41542b46
000608  53524541
00060c  443d2573
000610  5c4c4f47
000614  2e545854
000618  2c312c31
00061c  3130302c
000620  25640d0a
000624  00      
000625  00                DCB      0
000626  00                DCB      0
000627  00                DCB      0
000628  53454e44          DCB      "SEND OK",0
00062c  204f4b00
000630  4641494c          DCB      "FAIL",0
000634  00      
000635  00                DCB      0
000636  00                DCB      0
000637  00                DCB      0
000638  44454143          DCB      "DEACT",0
00063c  5400    
00063e  00                DCB      0
00063f  00                DCB      0
000640  65786365          DCB      "exception : COMPARED RESPONCES IN THE DATA\n\n\n\n",0
000644  7074696f
000648  6e203a20
00064c  434f4d50
000650  41524544
000654  20524553
000658  504f4e43
00065c  45532049
000660  4e205448
000664  45204441
000668  54410a0a
00066c  0a0a00  
00066f  00                DCB      0
000670  434f4e4e          DCB      "CONNECT",0
000674  45435400
000678  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
00067c  2b434950
000680  53454e44
000684  0d0a00  
000687  00                DCB      0
000688  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
00068c  2b434655
000690  4e3d300d
000694  0d0a0a00
000698  4e4f5420          DCB      "NOT INSERTED",0
00069c  494e5345
0006a0  52544544
0006a4  00      
0006a5  00                DCB      0
0006a6  00                DCB      0
0006a7  00                DCB      0
0006a8  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
0006ac  2b434655
0006b0  4e3d310d
0006b4  0a00    
0006b6  00                DCB      0
0006b7  00                DCB      0
0006b8  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
0006bc  2b434950
0006c0  53485554
0006c4  0d0a00  
0006c7  00                DCB      0
0006c8  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
0006cc  2b435354
0006d0  543d2225
0006d4  73220d0a
0006d8  00      
0006d9  00                DCB      0
0006da  00                DCB      0
0006db  00                DCB      0
0006dc  0d0a4154          DCB      "\r\nAT+CIICR\r\r\n",0
0006e0  2b434949
0006e4  43520d0d
0006e8  0a00    
0006ea  00                DCB      0
0006eb  00                DCB      0
0006ec  0a41542b          DCB      "\nAT+CIFSR\r\r\n",0
0006f0  43494653
0006f4  520d0d0a
0006f8  00      
0006f9  00                DCB      0
0006fa  00                DCB      0
0006fb  00                DCB      0
0006fc  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000700  2b434950
000704  53544152
000708  543d2254
00070c  4350222c
000710  22257322
000714  2c222573
000718  220d0a00
00071c  434f4e4e          DCB      "CONNECT FAIL",0
000720  45435420
000724  4641494c
000728  00      
000729  00                DCB      0
00072a  00                DCB      0
00072b  00                DCB      0
00072c  0d0a4154          DCB      "\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",0
000730  2b465343
000734  52454154
000738  453d2573
00073c  5c4c4f47
000740  2e545854
000744  0d0a00  
000747  00                DCB      0
000748  0a41542b          DCB      "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n",0
00074c  46535245
000750  41443d43
000754  3a5c4150
000758  4e2e5458
00075c  542c302c
000760  3130302c
000764  310d0a00
000768  0a41542b          DCB      "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n",0
00076c  46535245
000770  41443d43
000774  3a5c4947
000778  4e2e5458
00077c  542c302c
000780  3130302c
000784  310d0a00
000788  494f4e00          DCB      "ION",0
00078c  494f4646          DCB      "IOFF",0
000790  00      
000791  00                DCB      0
000792  00                DCB      0
000793  00                DCB      0
000794  0a41542b          DCB      "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n",0
000798  46535245
00079c  41443d43
0007a0  3a5c4355
0007a4  52534f52
0007a8  2e545854
0007ac  2c302c31
0007b0  30302c31
0007b4  0d0a00  
0007b7  00                DCB      0
0007b8  0a494f46          DCB      "\nIOFF\n\n\n\n",0
0007bc  460a0a0a
0007c0  0a00    
0007c2  00                DCB      0
0007c3  00                DCB      0
0007c4  0a41542b          DCB      "\nAT+FSCREATE=C:\\CURSOR.TXT\r\n",0
0007c8  46534352
0007cc  45415445
0007d0  3d433a5c
0007d4  43555253
0007d8  4f522e54
0007dc  58540d0a
0007e0  00      
0007e1  00                DCB      0
0007e2  00                DCB      0
0007e3  00                DCB      0
0007e4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n",0
0007e8  2b465357
0007ec  52495445
0007f0  3d433a5c
0007f4  43555253
0007f8  4f522e54
0007fc  58542c30
000800  2c35302c
000804  31300d0a
000808  00      
000809  00                DCB      0
00080a  00                DCB      0
00080b  00                DCB      0
00080c  0a2c256c          DCB      "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
000810  642c256c
000814  642c256c
000818  642c0a0a
00081c  0a0a0a0a
000820  0a0a0a0a
000824  0a0a0a0a
000828  0a0a0a0a
00082c  0a0a    
00082e  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
000832  0a0a0a0a
000836  0a0a0a0a
00083a  0a0a0a0a
00083e  0a0a0a0a
000842  0a0a0a0a
000846  0a0a0a0a
00084a  0a0a00            DCB      "\n\n",0
00084d  00                DCB      0
00084e  00                DCB      0
00084f  00                DCB      0
000850  0a41542b          DCB      "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n",0
000854  46535245
000858  41443d43
00085c  3a5c4950
000860  5f504f52
000864  542e5458
000868  542c302c
00086c  3130302c
000870  310d0a00
000874  0a41542b          DCB      "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n",0
000878  46535245
00087c  41443d43
000880  3a5c494e
000884  54455256
000888  414c2e54
00088c  58542c30
000890  2c313030
000894  2c310d0a
000898  00      

                          AREA ||.data||, DATA, ALIGN=3

                  cond200
                          DCD      0x00000000
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  tout
                          DCD      0x00000000
                  tout2
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  temp
                          DCD      0x00000000
                  flagch
                          DCD      0x00000000
                  cond121
000028  00000000          DCB      0x00,0x00,0x00,0x00
                  cond122
                          DCD      0x00000000
                  cond123
                          DCD      0x00000000
                  cond124
                          DCD      0x00000000
                  len
                          DCD      0x00000000
                  cond
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                  con1d
                          DCD      0x00000000
                  stcond1
                          DCD      0x00000000
                  stcond2
                          DCD      0x00000000
                  stcond3
                          DCD      0x00000000
                  stcond4
                          DCD      0x00000000
                  time111
                          DCD      0x00000000
                  timeout222
                          DCD      0x00000000
                  qweq
                          DCD      0x00000000
                  i11
                          DCD      0x00000000
                  j11
                          DCD      0x00000000
                  temp11
                          DCD      0x00000000
                  ||sz1||
                          DCD      0x00000000
                  ||sz2||
                          DCD      0x00000000
                  send_SOS
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  stateCount
00007c  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  e
                          DCD      0x00000000
                  adcsa
                          DCD      0x00000000
                  adcin
                          DCD      0x00000000
                  adcsample
                          DCD      0x00000000
                  fuel
                          DCD      0x00000000
                  fuelstr
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
                  ||rez||
0000a8  00000000          DCFS     0x00000000 ; 0
                  fact
0000ac  3f800000          DCFS     0x3f800000 ; 1
                  d
                          DCD      0x00000000
                  point_seen
                          DCD      0x00000000
                  cond201
                          DCD      0x00000000
                  cond1
                          DCD      0x00000000
                  cond2
                          DCD      0x00000000
                  cond3
                          DCD      0x00000000
                  cond4
                          DCD      0x00000000
                  cond5
                          DCD      0x00000000
                  cond6
                          DCD      0x00000000
                  cond7
                          DCD      0x00000000
                  cond8
                          DCD      0x00000000
                  cond9
                          DCD      0x00000000
                  cond10
                          DCD      0x00000000
                  cond11
                          DCD      0x00000000
                  cond12
                          DCD      0x00000000
                  cond13
                          DCD      0x00000000
                  cond14
                          DCD      0x00000000
                  cond15
                          DCD      0x00000000
                  ass
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  ||fsz||
                          DCD      0x00000000
                  log0
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  qwe
                          DCD      0x00000000
                  ||k5||
                          DCD      0x00000000
                  enters
                          DCD      0x00000000
                  cursorvaluepr
                          DCD      0x00000000
                  cursorvaluene
                          DCD      0x00000000
                  ||q1||
                          DCD      0x00000000
                  ||q2||
                          DCD      0x00000000
                  ||q3||
                          DCD      0x00000000
                  ||q4||
                          DCD      0x00000000
                  cntendl
                          DCD      0x00000000
                  prev
                          %        8
                  ||iz||
                          DCD      0x00000000
                  a
                          %        8
                  b
                          %        8
                  c
                          %        8
                  ||hh||
                          DCD      0x00000000
                  mm1
                          DCD      0x00000000
                  mm2
                          DCD      0x00000000
                          DCD      0x00000000
                  ||a1||
                          %        8
                  ||b1||
                          %        8
                  ||c1||
                          %        8
                  hh11
                          %        8
                  mm11
                          %        8
                  mm22
                          %        8
                  logged
                          DCD      0x00000000
                  check
                          DCD      0x00000000
                  stcond5
                          DCD      0x00000000
                  acstr
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
                  breach
                          DCD      0x00000000
                  aliveping
                          DCD      0x00000000
                  sleep_flag
                          DCD      0x00000000
                  tmeout
                          DCD      0x00000004
                  int_erval
                          DCD      0x00000001
                  drive
                          DCD      0x00000000
0001c0  00                DCB      0x00
                  apn
0001c1  697361            DCB      0x69,0x73,0x61
0001c4  66650000          DCB      0x66,0x65,0x00,0x00
                          %        16
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
                  speed
0001dc  00000000          DCFS     0x00000000 ; 0
                  lpticks
                          DCD      0x00000000
                  voltagecbc
                          DCD      0x00000000
                  ||csq||
                          DCD      0x00000000
                  rtcticks
                          DCD      0x00000000
                  rtcticks2
                          DCD      0x00000000
                  imeiinc
                          DCD      0x00000000
                  ticks_ch
0001f8  00                DCB      0x00
                  save_rtcticks
0001f9  000000            DCB      0x00,0x00,0x00
                  syscounter
                          DCD      0x00000000
                  velocity
                          DCD      0x00000000
000204  00                DCB      0x00
                  interval
000205  000000            DCB      0x00,0x00,0x00
000208  00000000          DCB      0x00,0x00,0x00,0x00
                  timeout
                          DCD      0x00000000
                  ||pr||
000210  00000000          DCFS     0x00000000 ; 0
                  ||la||
000214  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
00022c  00                DCB      0x00
                  ringflag
00022d  00                DCB      0x00
                  lptmr_interrupt
00022e  0000              DCB      0x00,0x00
                  time52
                          DCD      0x0000000f
                  cond277
                          DCD      0x00000000
                  cond20077
                          DCD      0x00000000
                  ||sz||
                          DCD      0x00000000
                  ||cn||
                          DCD      0x00000000
                  ||res||
                          DCD      0x00000000
                  test2
                          DCD      0x00000000

                          AREA ||i.clear||, COMGROUP=clear, CODE, READONLY, ALIGN=2

                  clear PROC
;;;1415   	
;;;1416   __inline void clear()
000000  4808              LDR      r0,|L18.36|
;;;1417   {
;;;1418     if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7900              LDRB     r0,[r0,#4]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L18.20|
;;;1419       {
;;;1420         temp = UART_D_REG(UART1_BASE_PTR);
00000c  4805              LDR      r0,|L18.36|
00000e  79c0              LDRB     r0,[r0,#7]
000010  4905              LDR      r1,|L18.40|
000012  6008              STR      r0,[r1,#0]  ; temp
                  |L18.20|
;;;1421   		}
;;;1422   		
;;;1423   		UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000014  4803              LDR      r0,|L18.36|
000016  7900              LDRB     r0,[r0,#4]
000018  2118              MOVS     r1,#0x18
00001a  4308              ORRS     r0,r0,r1
00001c  4901              LDR      r1,|L18.36|
00001e  7108              STRB     r0,[r1,#4]
;;;1424   }	
000020  4770              BX       lr
;;;1425   
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0x4006b000
                  |L18.40|
                          DCD      temp

                          AREA ||i.delay||, COMGROUP=delay, CODE, READONLY, ALIGN=2

                  delay PROC
;;;81     /*************************** delay*****************************************/
;;;82     __inline void delay(int32 delaytime)
000000  e00d              B        |L25.30|
                  |L25.2|
;;;83     {
;;;84      while(delaytime--)
;;;85         {for(i=2000;i>0;i--)
000002  217d              MOVS     r1,#0x7d
000004  0109              LSLS     r1,r1,#4
000006  4a08              LDR      r2,|L25.40|
000008  6011              STR      r1,[r2,#0]  ; i
00000a  e004              B        |L25.22|
                  |L25.12|
00000c  4906              LDR      r1,|L25.40|
00000e  6809              LDR      r1,[r1,#0]  ; i
000010  1e49              SUBS     r1,r1,#1
000012  4a05              LDR      r2,|L25.40|
000014  6011              STR      r1,[r2,#0]  ; i
                  |L25.22|
000016  4904              LDR      r1,|L25.40|
000018  6809              LDR      r1,[r1,#0]  ; i
00001a  2900              CMP      r1,#0
00001c  dcf6              BGT      |L25.12|
                  |L25.30|
00001e  4601              MOV      r1,r0                 ;84
000020  1e40              SUBS     r0,r0,#1              ;84
000022  2900              CMP      r1,#0                 ;84
000024  d1ed              BNE      |L25.2|
;;;86     			{	
;;;87     			}			// about 1 ms
;;;88         }
;;;89     }
000026  4770              BX       lr
;;;90      void delay2(int delaytime)
                          ENDP

                  |L25.40|
                          DCD      i

                          AREA ||i.send_modem||, COMGROUP=send_modem, CODE, READONLY, ALIGN=2

                  send_modem PROC
;;;1391   
;;;1392   __inline void send_modem(char ch[])
000000  b570              PUSH     {r4-r6,lr}
;;;1393   	{	
000002  4605              MOV      r5,r0
;;;1394   						unsigned char i20=0;
000004  2400              MOVS     r4,#0
;;;1395   						for(i20=0;i20<strlen(ch);i20++)
000006  bf00              NOP      
000008  e005              B        |L32.22|
                  |L32.10|
;;;1396   						{
;;;1397   							uart_putchar(UART1_BASE_PTR, ch[i20]);//clear();
00000a  5d29              LDRB     r1,[r5,r4]
00000c  4805              LDR      r0,|L32.36|
00000e  f7fffffe          BL       uart_putchar
000012  1c60              ADDS     r0,r4,#1              ;1395
000014  b2c4              UXTB     r4,r0                 ;1395
                  |L32.22|
000016  4628              MOV      r0,r5                 ;1395
000018  f7fffffe          BL       strlen
00001c  42a0              CMP      r0,r4                 ;1395
00001e  d8f4              BHI      |L32.10|
;;;1398   						}
;;;1399   						
;;;1400   	}
000020  bd70              POP      {r4-r6,pc}
;;;1401   
                          ENDP

000022  0000              DCW      0x0000
                  |L32.36|
                          DCD      0x4006b000

                          AREA ||i.send_GSM||, COMGROUP=send_GSM, CODE, READONLY, ALIGN=2

                  send_GSM PROC
;;;1437   
;;;1438   __inline void send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1439   {	 
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;1440   
;;;1441   		//uart_putchar(UART1_BASE_PTR,0xA);
;;;1442   		//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1443   	clear();
00000c  f7fffffe          BL       clear
;;;1444   	tout=0;
000010  2000              MOVS     r0,#0
000012  4932              LDR      r1,|L39.220|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;1445   //	qwe=strlen(uart_string_gsm);
;;;1446   		memset(uart_string_gsm,0,5000);
000016  4932              LDR      r1,|L39.224|
000018  4832              LDR      r0,|L39.228|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1447   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4931              LDR      r1,|L39.232|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1448   	 						//timer counts to wait for characters in uart 1 
;;;1449   		clear();
000024  f7fffffe          BL       clear
;;;1450   		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;1451   		uart_putchar(UART1_BASE_PTR,'\n');	uart_putchar(UART1_BASE_PTR,'\n');	
00002e  210a              MOVS     r1,#0xa
000030  482e              LDR      r0,|L39.236|
000032  f7fffffe          BL       uart_putchar
000036  210a              MOVS     r1,#0xa
000038  482c              LDR      r0,|L39.236|
00003a  f7fffffe          BL       uart_putchar
;;;1452   	delay(10);
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       delay
;;;1453   //	uart_putchar(UART1_BASE_PTR,'\r');
;;;1454   	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1455   		do
000044  bf00              NOP      
                  |L39.70|
;;;1456   		{
;;;1457   			
;;;1458   //					time111--;
;;;1459   //				  timeout222--;
;;;1460   
;;;1461   			
;;;1462   	cond122=strstr(uart_string_gsm, responseA);
000046  4827              LDR      r0,|L39.228|
000048  9902              LDR      r1,[sp,#8]
00004a  f7fffffe          BL       strstr
00004e  4928              LDR      r1,|L39.240|
000050  6008              STR      r0,[r1,#0]  ; cond122
;;;1463   	cond123=strstr(uart_string_gsm, responseB);
000052  4621              MOV      r1,r4
000054  4823              LDR      r0,|L39.228|
000056  f7fffffe          BL       strstr
00005a  4926              LDR      r1,|L39.244|
00005c  6008              STR      r0,[r1,#0]  ; cond123
;;;1464     cond124=strstr(uart_string_gsm, responseC);
00005e  4629              MOV      r1,r5
000060  4820              LDR      r0,|L39.228|
000062  f7fffffe          BL       strstr
000066  4924              LDR      r1,|L39.248|
000068  6008              STR      r0,[r1,#0]  ; cond124
;;;1465   	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
00006a  4821              LDR      r0,|L39.240|
00006c  6800              LDR      r0,[r0,#0]  ; cond122
00006e  2800              CMP      r0,#0
000070  d10b              BNE      |L39.138|
000072  4820              LDR      r0,|L39.244|
000074  6800              LDR      r0,[r0,#0]  ; cond123
000076  2800              CMP      r0,#0
000078  d107              BNE      |L39.138|
00007a  4608              MOV      r0,r1
00007c  6800              LDR      r0,[r0,#0]  ; cond124
00007e  2800              CMP      r0,#0
000080  d103              BNE      |L39.138|
000082  4816              LDR      r0,|L39.220|
000084  6800              LDR      r0,[r0,#0]  ; tout
000086  42b0              CMP      r0,r6
000088  dd01              BLE      |L39.142|
                  |L39.138|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L39.144|
                  |L39.142|
00008e  2000              MOVS     r0,#0
                  |L39.144|
000090  491a              LDR      r1,|L39.252|
000092  7008              STRB     r0,[r1,#0]
;;;1466   			
;;;1467   		}while (!cond121);
000094  4608              MOV      r0,r1
000096  7800              LDRB     r0,[r0,#0]  ; cond121
000098  2800              CMP      r0,#0
00009a  d0d4              BEQ      |L39.70|
;;;1468   		clear();
00009c  f7fffffe          BL       clear
;;;1469   		if(tout>timeout){
0000a0  480e              LDR      r0,|L39.220|
0000a2  6800              LDR      r0,[r0,#0]  ; tout
0000a4  42b0              CMP      r0,r6
0000a6  dd17              BLE      |L39.216|
;;;1470   			uart_putchar(UART1_BASE_PTR,'\r');
0000a8  210d              MOVS     r1,#0xd
0000aa  4810              LDR      r0,|L39.236|
0000ac  f7fffffe          BL       uart_putchar
;;;1471   		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000b0  210a              MOVS     r1,#0xa
0000b2  480e              LDR      r0,|L39.236|
0000b4  f7fffffe          BL       uart_putchar
0000b8  211a              MOVS     r1,#0x1a
0000ba  480c              LDR      r0,|L39.236|
0000bc  f7fffffe          BL       uart_putchar
;;;1472   		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000c0  211a              MOVS     r1,#0x1a
0000c2  480a              LDR      r0,|L39.236|
0000c4  f7fffffe          BL       uart_putchar
0000c8  210d              MOVS     r1,#0xd
0000ca  4808              LDR      r0,|L39.236|
0000cc  f7fffffe          BL       uart_putchar
;;;1473   		uart_putchar(UART1_BASE_PTR,'\n');}
0000d0  210a              MOVS     r1,#0xa
0000d2  4806              LDR      r0,|L39.236|
0000d4  f7fffffe          BL       uart_putchar
                  |L39.216|
;;;1474   		//return;
;;;1475   //		return uart_string_gsm;
;;;1476   
;;;1477   		
;;;1478   
;;;1479   
;;;1480   }
0000d8  b005              ADD      sp,sp,#0x14
0000da  bdf0              POP      {r4-r7,pc}
;;;1481   
                          ENDP

                  |L39.220|
                          DCD      tout
                  |L39.224|
                          DCD      0x00001388
                  |L39.228|
                          DCD      uart_string_gsm
                  |L39.232|
                          DCD      ||k2||
                  |L39.236|
                          DCD      0x4006b000
                  |L39.240|
                          DCD      cond122
                  |L39.244|
                          DCD      cond123
                  |L39.248|
                          DCD      cond124
                  |L39.252|
                          DCD      cond121

                          AREA ||i.send_MSG||, COMGROUP=send_MSG, CODE, READONLY, ALIGN=2

                  send_MSG PROC
;;;1483   
;;;1484   __inline char * send_MSG(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1485   {	
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;1486   		qwe=strlen(uart_string_gsm);
00000a  4829              LDR      r0,|L46.176|
00000c  f7fffffe          BL       strlen
000010  4928              LDR      r1,|L46.180|
000012  6008              STR      r0,[r1,#0]  ; qwe
;;;1487   
;;;1488   	
;;;1489   		memset(uart_string_gsm,0,qwe);
000014  4608              MOV      r0,r1
000016  6801              LDR      r1,[r0,#0]  ; qwe
000018  4825              LDR      r0,|L46.176|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1490   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4925              LDR      r1,|L46.184|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1491   	  time111=99999;						//timer counts to wait for characters in uart 1 
000024  4825              LDR      r0,|L46.188|
000026  4926              LDR      r1,|L46.192|
000028  6008              STR      r0,[r1,#0]  ; time111
;;;1492   		clear();
00002a  f7fffffe          BL       clear
;;;1493   		timeout222=2001;
00002e  4825              LDR      r0,|L46.196|
000030  4925              LDR      r1,|L46.200|
000032  6008              STR      r0,[r1,#0]  ; timeout222
;;;1494   		send_modem(string);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       send_modem
;;;1495   		do	{
00003a  bf00              NOP      
                  |L46.60|
;;;1496   			
;;;1497   					time111--;
00003c  4820              LDR      r0,|L46.192|
00003e  6800              LDR      r0,[r0,#0]  ; time111
000040  1e40              SUBS     r0,r0,#1
000042  491f              LDR      r1,|L46.192|
000044  6008              STR      r0,[r1,#0]  ; time111
;;;1498   				  timeout222--;
000046  4820              LDR      r0,|L46.200|
000048  6800              LDR      r0,[r0,#0]  ; timeout222
00004a  1e40              SUBS     r0,r0,#1
00004c  491e              LDR      r1,|L46.200|
00004e  6008              STR      r0,[r1,#0]  ; timeout222
;;;1499   //          if(lptmr_interrupt == 1){
;;;1500   //					//accel_read();
;;;1501   //					detect_motion();
;;;1502   //					lptmr_interrupt = 0;}		
;;;1503   //					if(timeout222 % 400 == 0)
;;;1504   //					{
;;;1505   //						//uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
;;;1506   //					}
;;;1507   			
;;;1508   	cond122=strstr(uart_string_gsm, responseA);
000050  4639              MOV      r1,r7
000052  4817              LDR      r0,|L46.176|
000054  f7fffffe          BL       strstr
000058  491c              LDR      r1,|L46.204|
00005a  6008              STR      r0,[r1,#0]  ; cond122
;;;1509   	cond123=strstr(uart_string_gsm, responseB);
00005c  4621              MOV      r1,r4
00005e  4814              LDR      r0,|L46.176|
000060  f7fffffe          BL       strstr
000064  491a              LDR      r1,|L46.208|
000066  6008              STR      r0,[r1,#0]  ; cond123
;;;1510     cond124=strstr(uart_string_gsm, responseC);
000068  4629              MOV      r1,r5
00006a  4811              LDR      r0,|L46.176|
00006c  f7fffffe          BL       strstr
000070  4918              LDR      r1,|L46.212|
000072  6008              STR      r0,[r1,#0]  ; cond124
;;;1511   	cond121 = (cond122	|| cond123	|| cond124  || (time111<=1))	;			
000074  4815              LDR      r0,|L46.204|
000076  6800              LDR      r0,[r0,#0]  ; cond122
000078  2800              CMP      r0,#0
00007a  d10b              BNE      |L46.148|
00007c  4814              LDR      r0,|L46.208|
00007e  6800              LDR      r0,[r0,#0]  ; cond123
000080  2800              CMP      r0,#0
000082  d107              BNE      |L46.148|
000084  4608              MOV      r0,r1
000086  6800              LDR      r0,[r0,#0]  ; cond124
000088  2800              CMP      r0,#0
00008a  d103              BNE      |L46.148|
00008c  480c              LDR      r0,|L46.192|
00008e  6800              LDR      r0,[r0,#0]  ; time111
000090  2801              CMP      r0,#1
000092  dc01              BGT      |L46.152|
                  |L46.148|
000094  2001              MOVS     r0,#1
000096  e000              B        |L46.154|
                  |L46.152|
000098  2000              MOVS     r0,#0
                  |L46.154|
00009a  490f              LDR      r1,|L46.216|
00009c  7008              STRB     r0,[r1,#0]
;;;1512   			
;;;1513   			
;;;1514   		}while (!cond121);
00009e  4608              MOV      r0,r1
0000a0  7800              LDRB     r0,[r0,#0]  ; cond121
0000a2  2800              CMP      r0,#0
0000a4  d0ca              BEQ      |L46.60|
;;;1515   		clear();
0000a6  f7fffffe          BL       clear
;;;1516   		return uart_string_gsm;
0000aa  4801              LDR      r0,|L46.176|
;;;1517   
;;;1518   }
0000ac  bdf8              POP      {r3-r7,pc}
;;;1519   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L46.176|
                          DCD      uart_string_gsm
                  |L46.180|
                          DCD      qwe
                  |L46.184|
                          DCD      ||k2||
                  |L46.188|
                          DCD      0x0001869f
                  |L46.192|
                          DCD      time111
                  |L46.196|
                          DCD      0x000007d1
                  |L46.200|
                          DCD      timeout222
                  |L46.204|
                          DCD      cond122
                  |L46.208|
                          DCD      cond123
                  |L46.212|
                          DCD      cond124
                  |L46.216|
                          DCD      cond121

                          AREA ||i.send_message||, COMGROUP=send_message, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  send_message PROC
;;;2360   			
;;;2361   __inline	void send_message(char * data2)
000000  b538              PUSH     {r3-r5,lr}
;;;2362   	{memset(uart_string_gsm,0,5000);
000002  4604              MOV      r4,r0
000004  4929              LDR      r1,|L53.172|
000006  482a              LDR      r0,|L53.176|
000008  f7fffffe          BL       __aeabi_memclr
;;;2363   									memset(at_,0,100);
00000c  2164              MOVS     r1,#0x64
00000e  4829              LDR      r0,|L53.180|
000010  f7fffffe          BL       __aeabi_memclr
;;;2364   									sprintf(at_, "\nAT+CMGS=\"%s\"\r\n" ,num2);
000014  4a28              LDR      r2,|L53.184|
000016  4929              LDR      r1,|L53.188|
000018  4826              LDR      r0,|L53.180|
00001a  f7fffffe          BL       __2sprintf
;;;2365   									send_MSG(at_, ">", "ERROR\r\n" , "ERROR:",tmeout);	
00001e  4828              LDR      r0,|L53.192|
000020  6800              LDR      r0,[r0,#0]  ; tmeout
000022  4b28              LDR      r3,|L53.196|
000024  4a28              LDR      r2,|L53.200|
000026  4929              LDR      r1,|L53.204|
000028  9000              STR      r0,[sp,#0]
00002a  4822              LDR      r0,|L53.180|
00002c  f7fffffe          BL       send_MSG
;;;2366   									if( strstr(uart_string_gsm, ">"))
000030  4926              LDR      r1,|L53.204|
000032  481f              LDR      r0,|L53.176|
000034  f7fffffe          BL       strstr
000038  2800              CMP      r0,#0
00003a  d031              BEQ      |L53.160|
;;;2367   									{
;;;2368   										//
;;;2369   										
;;;2370   											for(k=0;k<strlen(data2);k++)
00003c  2000              MOVS     r0,#0
00003e  4924              LDR      r1,|L53.208|
000040  6008              STR      r0,[r1,#0]  ; k
000042  e00c              B        |L53.94|
                  |L53.68|
;;;2371   											{
;;;2372   												
;;;2373   												uart_putchar(UART1_BASE_PTR, data2[k]);
000044  4822              LDR      r0,|L53.208|
000046  6800              LDR      r0,[r0,#0]  ; k
000048  5c21              LDRB     r1,[r4,r0]
00004a  4822              LDR      r0,|L53.212|
00004c  f7fffffe          BL       uart_putchar
;;;2374   												//uart0_putchar(UART0_BASE_PTR, data2[k]);
;;;2375   												clear();
000050  f7fffffe          BL       clear
000054  481e              LDR      r0,|L53.208|
000056  6800              LDR      r0,[r0,#0]            ;2370  ; k
000058  1c40              ADDS     r0,r0,#1              ;2370
00005a  491d              LDR      r1,|L53.208|
00005c  6008              STR      r0,[r1,#0]            ;2370  ; k
                  |L53.94|
00005e  4620              MOV      r0,r4                 ;2370
000060  f7fffffe          BL       strlen
000064  491a              LDR      r1,|L53.208|
000066  6809              LDR      r1,[r1,#0]            ;2370  ; k
000068  4288              CMP      r0,r1                 ;2370
00006a  d8eb              BHI      |L53.68|
;;;2376   												
;;;2377   											}		
;;;2378   											uart_putchar(UART1_BASE_PTR, 0x1A);
00006c  211a              MOVS     r1,#0x1a
00006e  4819              LDR      r0,|L53.212|
000070  f7fffffe          BL       uart_putchar
;;;2379   											k2=0;									//string array counter for uart 1
000074  2000              MOVS     r0,#0
000076  4918              LDR      r1,|L53.216|
000078  6008              STR      r0,[r1,#0]  ; k2
;;;2380   											timeout=99999;						//timer counts to wait for characters in uart 1 									
00007a  4818              LDR      r0,|L53.220|
00007c  4918              LDR      r1,|L53.224|
00007e  6008              STR      r0,[r1,#0]  ; timeout
;;;2381   											while(!(strstr(uart_string_gsm,"+CMGS:")  ||  (timeout < 1)))
000080  e004              B        |L53.140|
                  |L53.130|
;;;2382   																{
;;;2383   																	timeout--;
000082  4817              LDR      r0,|L53.224|
000084  6800              LDR      r0,[r0,#0]  ; timeout
000086  1e40              SUBS     r0,r0,#1
000088  4915              LDR      r1,|L53.224|
00008a  6008              STR      r0,[r1,#0]  ; timeout
                  |L53.140|
00008c  4915              LDR      r1,|L53.228|
00008e  4808              LDR      r0,|L53.176|
000090  f7fffffe          BL       strstr
000094  2800              CMP      r0,#0                 ;2381
000096  d103              BNE      |L53.160|
000098  4811              LDR      r0,|L53.224|
00009a  6800              LDR      r0,[r0,#0]            ;2381  ; timeout
00009c  2801              CMP      r0,#1                 ;2381
00009e  daf0              BGE      |L53.130|
                  |L53.160|
;;;2384   //																	if(timeout % 4000 == 0)
;;;2385   //																	{
;;;2386   //																		uart0_putchar(UART0_BASE_PTR,'1');
;;;2387   //																		uart_putchar(UART1_BASE_PTR,0x1A);
;;;2388   //																	}
;;;2389   																}
;;;2390   							
;;;2391   									}
;;;2392   		
;;;2393   	memset(uart_string_gsm,0,5000);								
0000a0  4902              LDR      r1,|L53.172|
0000a2  4803              LDR      r0,|L53.176|
0000a4  f7fffffe          BL       __aeabi_memclr
;;;2394   	}
0000a8  bd38              POP      {r3-r5,pc}
;;;2395   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L53.172|
                          DCD      0x00001388
                  |L53.176|
                          DCD      uart_string_gsm
                  |L53.180|
                          DCD      at_
                  |L53.184|
                          DCD      num2
                  |L53.188|
                          DCD      ||.conststring||
                  |L53.192|
                          DCD      tmeout
                  |L53.196|
                          DCD      ||.conststring||+0x10
                  |L53.200|
                          DCD      ||.conststring||+0x18
                  |L53.204|
                          DCD      ||.conststring||+0x20
                  |L53.208|
                          DCD      k
                  |L53.212|
                          DCD      0x4006b000
                  |L53.216|
                          DCD      ||k2||
                  |L53.220|
                          DCD      0x0001869f
                  |L53.224|
                          DCD      timeout
                  |L53.228|
                          DCD      ||.conststring||+0x24

                          AREA ||i.parse_g||, COMGROUP=parse_g, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;1602   
;;;1603   __inline void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1604   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f0b              LDR      r7,[sp,#0x2c]
;;;1605   
;;;1606   		sz1=	strlen(str);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  493c              LDR      r1,|L60.260|
000014  6008              STR      r0,[r1,#0]  ; sz1
;;;1607   		sz2=  strlen(string);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       strlen
00001c  493a              LDR      r1,|L60.264|
00001e  6008              STR      r0,[r1,#0]  ; sz2
;;;1608   		memset(string,0,sz2);
000020  4608              MOV      r0,r1
000022  6801              LDR      r1,[r0,#0]  ; sz2
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_memclr
;;;1609   		for(i11=0,temp11=0;i11<sz1;i11++)
00002a  2000              MOVS     r0,#0
00002c  4937              LDR      r1,|L60.268|
00002e  6008              STR      r0,[r1,#0]  ; i11
000030  4937              LDR      r1,|L60.272|
000032  6008              STR      r0,[r1,#0]  ; temp11
000034  e01a              B        |L60.108|
                  |L60.54|
;;;1610   		{
;;;1611   		if(str[i11]==s)
000036  4835              LDR      r0,|L60.268|
000038  6800              LDR      r0,[r0,#0]  ; i11
00003a  5c21              LDRB     r1,[r4,r0]
00003c  980a              LDR      r0,[sp,#0x28]
00003e  4281              CMP      r1,r0
000040  d108              BNE      |L60.84|
;;;1612   			{temp11++;j11=i11;}
000042  4833              LDR      r0,|L60.272|
000044  6800              LDR      r0,[r0,#0]  ; temp11
000046  1c40              ADDS     r0,r0,#1
000048  4931              LDR      r1,|L60.272|
00004a  6008              STR      r0,[r1,#0]  ; temp11
00004c  482f              LDR      r0,|L60.268|
00004e  6800              LDR      r0,[r0,#0]  ; i11
000050  4930              LDR      r1,|L60.276|
000052  6008              STR      r0,[r1,#0]  ; j11
                  |L60.84|
;;;1613   		else{}
;;;1614   			
;;;1615   		if(temp11>=sec){i11=9900;}
000054  482e              LDR      r0,|L60.272|
000056  6800              LDR      r0,[r0,#0]  ; temp11
000058  42b0              CMP      r0,r6
00005a  db02              BLT      |L60.98|
00005c  482e              LDR      r0,|L60.280|
00005e  492b              LDR      r1,|L60.268|
000060  6008              STR      r0,[r1,#0]  ; i11
                  |L60.98|
000062  482a              LDR      r0,|L60.268|
000064  6800              LDR      r0,[r0,#0]            ;1609  ; i11
000066  1c40              ADDS     r0,r0,#1              ;1609
000068  4928              LDR      r1,|L60.268|
00006a  6008              STR      r0,[r1,#0]            ;1609  ; i11
                  |L60.108|
00006c  4827              LDR      r0,|L60.268|
00006e  6800              LDR      r0,[r0,#0]            ;1609  ; i11
000070  4924              LDR      r1,|L60.260|
000072  6809              LDR      r1,[r1,#0]            ;1609  ; sz1
000074  4288              CMP      r0,r1                 ;1609
000076  dbde              BLT      |L60.54|
;;;1616   		else{}	
;;;1617   		
;;;1618   		}	
;;;1619   		
;;;1620   		for(i11=0,temp11=0;i11<sz1;i11++)
000078  2000              MOVS     r0,#0
00007a  4924              LDR      r1,|L60.268|
00007c  6008              STR      r0,[r1,#0]  ; i11
00007e  4924              LDR      r1,|L60.272|
000080  6008              STR      r0,[r1,#0]  ; temp11
000082  e01a              B        |L60.186|
                  |L60.132|
;;;1621   		{
;;;1622   		if(str[i11]==f)
000084  4821              LDR      r0,|L60.268|
000086  6800              LDR      r0,[r0,#0]  ; i11
000088  5c21              LDRB     r1,[r4,r0]
00008a  9804              LDR      r0,[sp,#0x10]
00008c  4281              CMP      r1,r0
00008e  d108              BNE      |L60.162|
;;;1623   			{temp11++;l=i11;}										
000090  481f              LDR      r0,|L60.272|
000092  6800              LDR      r0,[r0,#0]  ; temp11
000094  1c40              ADDS     r0,r0,#1
000096  491e              LDR      r1,|L60.272|
000098  6008              STR      r0,[r1,#0]  ; temp11
00009a  481c              LDR      r0,|L60.268|
00009c  6800              LDR      r0,[r0,#0]  ; i11
00009e  491f              LDR      r1,|L60.284|
0000a0  6008              STR      r0,[r1,#0]  ; l
                  |L60.162|
;;;1624   		else{}
;;;1625   		if(temp11>=first){i11=9900;}else{}
0000a2  481b              LDR      r0,|L60.272|
0000a4  6800              LDR      r0,[r0,#0]  ; temp11
0000a6  42a8              CMP      r0,r5
0000a8  db02              BLT      |L60.176|
0000aa  481b              LDR      r0,|L60.280|
0000ac  4917              LDR      r1,|L60.268|
0000ae  6008              STR      r0,[r1,#0]  ; i11
                  |L60.176|
0000b0  4816              LDR      r0,|L60.268|
0000b2  6800              LDR      r0,[r0,#0]            ;1620  ; i11
0000b4  1c40              ADDS     r0,r0,#1              ;1620
0000b6  4915              LDR      r1,|L60.268|
0000b8  6008              STR      r0,[r1,#0]            ;1620  ; i11
                  |L60.186|
0000ba  4814              LDR      r0,|L60.268|
0000bc  6800              LDR      r0,[r0,#0]            ;1620  ; i11
0000be  4911              LDR      r1,|L60.260|
0000c0  6809              LDR      r1,[r1,#0]            ;1620  ; sz1
0000c2  4288              CMP      r0,r1                 ;1620
0000c4  dbde              BLT      |L60.132|
;;;1626   		}	
;;;1627   		for(i11=0;i11<(j11-l-1);i11++)
0000c6  2000              MOVS     r0,#0
0000c8  4910              LDR      r1,|L60.268|
0000ca  6008              STR      r0,[r1,#0]  ; i11
0000cc  e00e              B        |L60.236|
                  |L60.206|
;;;1628   		{
;;;1629   		string[i11] = str[l+i11+1];
0000ce  4813              LDR      r0,|L60.284|
0000d0  6800              LDR      r0,[r0,#0]  ; l
0000d2  490e              LDR      r1,|L60.268|
0000d4  6809              LDR      r1,[r1,#0]  ; i11
0000d6  1840              ADDS     r0,r0,r1
0000d8  1c40              ADDS     r0,r0,#1
0000da  5c20              LDRB     r0,[r4,r0]
0000dc  490b              LDR      r1,|L60.268|
0000de  6809              LDR      r1,[r1,#0]  ; i11
0000e0  5478              STRB     r0,[r7,r1]
0000e2  480a              LDR      r0,|L60.268|
0000e4  6800              LDR      r0,[r0,#0]            ;1627  ; i11
0000e6  1c40              ADDS     r0,r0,#1              ;1627
0000e8  4908              LDR      r1,|L60.268|
0000ea  6008              STR      r0,[r1,#0]            ;1627  ; i11
                  |L60.236|
0000ec  4809              LDR      r0,|L60.276|
0000ee  6800              LDR      r0,[r0,#0]            ;1627  ; j11
0000f0  490a              LDR      r1,|L60.284|
0000f2  6809              LDR      r1,[r1,#0]            ;1627  ; l
0000f4  1a40              SUBS     r0,r0,r1              ;1627
0000f6  1e40              SUBS     r0,r0,#1              ;1627
0000f8  4904              LDR      r1,|L60.268|
0000fa  6809              LDR      r1,[r1,#0]            ;1627  ; i11
0000fc  4288              CMP      r0,r1                 ;1627
0000fe  dce6              BGT      |L60.206|
;;;1630   		}			
;;;1631   	
;;;1632   
;;;1633   
;;;1634   }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
;;;1635   
                          ENDP

                  |L60.260|
                          DCD      ||sz1||
                  |L60.264|
                          DCD      ||sz2||
                  |L60.268|
                          DCD      i11
                  |L60.272|
                          DCD      temp11
                  |L60.276|
                          DCD      j11
                  |L60.280|
                          DCD      0x000026ac
                  |L60.284|
                          DCD      l

                          AREA ||i.ignstaton||, COMGROUP=ignstaton, CODE, READONLY, ALIGN=2

                  ignstaton PROC
;;;1270   	
;;;1271   __inline void ignstaton(){
000000  b508              PUSH     {r3,lr}
;;;1272   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L67.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L67.64|
000008  4a0e              LDR      r2,|L67.68|
00000a  490f              LDR      r1,|L67.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L67.76|
000010  f7fffffe          BL       send_GSM
;;;1273   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L67.64|
000018  4a0a              LDR      r2,|L67.68|
00001a  490d              LDR      r1,|L67.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L67.84|
000020  f7fffffe          BL       send_GSM
;;;1274   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1275   send_GSM("\nION\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L67.64|
00002e  4a05              LDR      r2,|L67.68|
000030  4909              LDR      r1,|L67.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L67.92|
000036  f7fffffe          BL       send_GSM
;;;1276   
;;;1277   
;;;1278   }	
00003a  bd08              POP      {r3,pc}
;;;1279   __inline void ignstatoff(){
                          ENDP

                  |L67.60|
                          DCD      tmeout
                  |L67.64|
                          DCD      ||.conststring||+0x10
                  |L67.68|
                          DCD      ||.conststring||+0x18
                  |L67.72|
                          DCD      ||.conststring||+0x2c
                  |L67.76|
                          DCD      ||.conststring||+0x30
                  |L67.80|
                          DCD      ||.conststring||+0x20
                  |L67.84|
                          DCD      ||.conststring||+0x4c
                  |L67.88|
                          DCD      ||.conststring||+0x70
                  |L67.92|
                          DCD      ||.conststring||+0x78

                          AREA ||i.save_ip_port||, COMGROUP=save_ip_port, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_ip_port PROC
;;;1231   	
;;;1232   __inline void save_ip_port()
000000  b538              PUSH     {r3-r5,lr}
;;;1233   {
;;;1234   	
;;;1235   send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4844              LDR      r0,|L74.276|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b44              LDR      r3,|L74.280|
000008  4a44              LDR      r2,|L74.284|
00000a  4945              LDR      r1,|L74.288|
00000c  9000              STR      r0,[sp,#0]
00000e  4845              LDR      r0,|L74.292|
000010  f7fffffe          BL       send_GSM
;;;1236   	
;;;1237   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4844              LDR      r0,|L74.296|
000018  f7fffffe          BL       __aeabi_memclr
;;;1238   	sprintf(at_,"\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",strlen(ip)+12+strlen(port));	
00001c  4843              LDR      r0,|L74.300|
00001e  f7fffffe          BL       strlen
000022  4605              MOV      r5,r0
000024  350c              ADDS     r5,r5,#0xc
000026  4842              LDR      r0,|L74.304|
000028  f7fffffe          BL       strlen
00002c  182c              ADDS     r4,r5,r0
00002e  4622              MOV      r2,r4
000030  4940              LDR      r1,|L74.308|
000032  483d              LDR      r0,|L74.296|
000034  f7fffffe          BL       __2sprintf
;;;1239   send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000038  200a              MOVS     r0,#0xa
00003a  4b37              LDR      r3,|L74.280|
00003c  4a37              LDR      r2,|L74.284|
00003e  493e              LDR      r1,|L74.312|
000040  9000              STR      r0,[sp,#0]
000042  4839              LDR      r0,|L74.296|
000044  f7fffffe          BL       send_GSM
;;;1240   	clear();
000048  f7fffffe          BL       clear
;;;1241   
;;;1242   	
;;;1243   	send_modem("|IP|");
00004c  483b              LDR      r0,|L74.316|
00004e  f7fffffe          BL       send_modem
;;;1244   		for(k=0;k<strlen(ip);k++)
000052  2000              MOVS     r0,#0
000054  493a              LDR      r1,|L74.320|
000056  6008              STR      r0,[r1,#0]  ; k
000058  e00b              B        |L74.114|
                  |L74.90|
;;;1245   		{
;;;1246   			uart_putchar(UART1_BASE_PTR, ip[k]);// uart0_putchar(UART0_BASE_PTR, ip[k]);//clear();
00005a  4834              LDR      r0,|L74.300|
00005c  4a38              LDR      r2,|L74.320|
00005e  6812              LDR      r2,[r2,#0]  ; k
000060  5c81              LDRB     r1,[r0,r2]
000062  4838              LDR      r0,|L74.324|
000064  f7fffffe          BL       uart_putchar
000068  4835              LDR      r0,|L74.320|
00006a  6800              LDR      r0,[r0,#0]            ;1244  ; k
00006c  1c40              ADDS     r0,r0,#1              ;1244
00006e  4934              LDR      r1,|L74.320|
000070  6008              STR      r0,[r1,#0]            ;1244  ; k
                  |L74.114|
000072  482e              LDR      r0,|L74.300|
000074  f7fffffe          BL       strlen
000078  4931              LDR      r1,|L74.320|
00007a  6809              LDR      r1,[r1,#0]            ;1244  ; k
00007c  4288              CMP      r0,r1                 ;1244
00007e  d8ec              BHI      |L74.90|
;;;1247   		}	
;;;1248   	send_modem("|PORT|");			
000080  4831              LDR      r0,|L74.328|
000082  f7fffffe          BL       send_modem
;;;1249   		for(k=0;k<strlen(port);k++)
000086  2000              MOVS     r0,#0
000088  492d              LDR      r1,|L74.320|
00008a  6008              STR      r0,[r1,#0]  ; k
00008c  e00b              B        |L74.166|
                  |L74.142|
;;;1250   		{
;;;1251   			uart_putchar(UART1_BASE_PTR, port[k]);// uart0_putchar(UART0_BASE_PTR, port[k]);//clear();
00008e  4828              LDR      r0,|L74.304|
000090  4a2b              LDR      r2,|L74.320|
000092  6812              LDR      r2,[r2,#0]  ; k
000094  5c81              LDRB     r1,[r0,r2]
000096  482b              LDR      r0,|L74.324|
000098  f7fffffe          BL       uart_putchar
00009c  4828              LDR      r0,|L74.320|
00009e  6800              LDR      r0,[r0,#0]            ;1249  ; k
0000a0  1c40              ADDS     r0,r0,#1              ;1249
0000a2  4927              LDR      r1,|L74.320|
0000a4  6008              STR      r0,[r1,#0]            ;1249  ; k
                  |L74.166|
0000a6  4822              LDR      r0,|L74.304|
0000a8  f7fffffe          BL       strlen
0000ac  4924              LDR      r1,|L74.320|
0000ae  6809              LDR      r1,[r1,#0]            ;1249  ; k
0000b0  4288              CMP      r0,r1                 ;1249
0000b2  d8ec              BHI      |L74.142|
;;;1252   		}	
;;;1253   send_modem("|");			
0000b4  4825              LDR      r0,|L74.332|
0000b6  f7fffffe          BL       send_modem
;;;1254   									//memset(data,0,1000);
;;;1255   									k2=0;									//string array counter for uart 1
0000ba  2000              MOVS     r0,#0
0000bc  4924              LDR      r1,|L74.336|
0000be  6008              STR      r0,[r1,#0]  ; k2
;;;1256   									time=19999;						//timer counts to wait for characters in uart 1 									
0000c0  4824              LDR      r0,|L74.340|
0000c2  4925              LDR      r1,|L74.344|
0000c4  6008              STR      r0,[r1,#0]  ; time
;;;1257   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
0000c6  e014              B        |L74.242|
                  |L74.200|
;;;1258   									{
;;;1259   									time--;
0000c8  4823              LDR      r0,|L74.344|
0000ca  6800              LDR      r0,[r0,#0]  ; time
0000cc  1e40              SUBS     r0,r0,#1
0000ce  4922              LDR      r1,|L74.344|
0000d0  6008              STR      r0,[r1,#0]  ; time
;;;1260   									if(time % 2000 == 0)
0000d2  217d              MOVS     r1,#0x7d
0000d4  0109              LSLS     r1,r1,#4
0000d6  4820              LDR      r0,|L74.344|
0000d8  6800              LDR      r0,[r0,#0]  ; time
0000da  f7fffffe          BL       __aeabi_idivmod
0000de  2900              CMP      r1,#0
0000e0  d107              BNE      |L74.242|
;;;1261   										{
;;;1262   											uart0_putchar(UART0_BASE_PTR,'1');
0000e2  2131              MOVS     r1,#0x31
0000e4  481d              LDR      r0,|L74.348|
0000e6  f7fffffe          BL       uart0_putchar
;;;1263   											uart_putchar(UART1_BASE_PTR,'\n');
0000ea  210a              MOVS     r1,#0xa
0000ec  4815              LDR      r0,|L74.324|
0000ee  f7fffffe          BL       uart_putchar
                  |L74.242|
0000f2  491b              LDR      r1,|L74.352|
0000f4  481b              LDR      r0,|L74.356|
0000f6  f7fffffe          BL       strstr
0000fa  2800              CMP      r0,#0                 ;1257
0000fc  d109              BNE      |L74.274|
0000fe  4816              LDR      r0,|L74.344|
000100  6800              LDR      r0,[r0,#0]            ;1257  ; time
000102  2801              CMP      r0,#1                 ;1257
000104  db05              BLT      |L74.274|
000106  4918              LDR      r1,|L74.360|
000108  4816              LDR      r0,|L74.356|
00010a  f7fffffe          BL       strstr
00010e  2800              CMP      r0,#0                 ;1257
000110  d0da              BEQ      |L74.200|
                  |L74.274|
;;;1264   										}
;;;1265   	
;;;1266   									}
;;;1267   
;;;1268   	
;;;1269   }	
000112  bd38              POP      {r3-r5,pc}
;;;1270   	
                          ENDP

                  |L74.276|
                          DCD      tmeout
                  |L74.280|
                          DCD      ||.conststring||+0x10
                  |L74.284|
                          DCD      ||.conststring||+0x18
                  |L74.288|
                          DCD      ||.conststring||+0x2c
                  |L74.292|
                          DCD      ||.conststring||+0x84
                  |L74.296|
                          DCD      at_
                  |L74.300|
                          DCD      ||ip||
                  |L74.304|
                          DCD      port
                  |L74.308|
                          DCD      ||.conststring||+0xa4
                  |L74.312|
                          DCD      ||.conststring||+0x20
                  |L74.316|
                          DCD      ||.conststring||+0xcc
                  |L74.320|
                          DCD      k
                  |L74.324|
                          DCD      0x4006b000
                  |L74.328|
                          DCD      ||.conststring||+0xd4
                  |L74.332|
                          DCD      ||.conststring||+0xdc
                  |L74.336|
                          DCD      ||k2||
                  |L74.340|
                          DCD      0x00004e1f
                  |L74.344|
                          DCD      time
                  |L74.348|
                          DCD      0x4006a000
                  |L74.352|
                          DCD      ||.conststring||+0x70
                  |L74.356|
                          DCD      uart_string_gsm
                  |L74.360|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.stof||, COMGROUP=stof, CODE, READONLY, ALIGN=2

                  stof PROC
;;;1124   
;;;1125   __inline float stof(const char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;1126   {rez=0;fact=1;
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  4925              LDR      r1,|L81.156|
000008  6008              STR      r0,[r1,#0]  ; rez
00000a  207f              MOVS     r0,#0x7f
00000c  05c0              LSLS     r0,r0,#23
00000e  4924              LDR      r1,|L81.160|
000010  6008              STR      r0,[r1,#0]  ; fact
;;;1127   
;;;1128     if (*s == '-'){
000012  7820              LDRB     r0,[r4,#0]
000014  282d              CMP      r0,#0x2d
000016  d102              BNE      |L81.30|
;;;1129       s++;
000018  1c64              ADDS     r4,r4,#1
;;;1130       fact = -1;
00001a  4822              LDR      r0,|L81.164|
00001c  6008              STR      r0,[r1,#0]  ; fact
                  |L81.30|
;;;1131     };
;;;1132     for (point_seen = 0; *s; s++){
00001e  2000              MOVS     r0,#0
000020  4921              LDR      r1,|L81.168|
000022  6008              STR      r0,[r1,#0]  ; point_seen
000024  e02f              B        |L81.134|
                  |L81.38|
;;;1133       if (*s == '.'){
000026  7820              LDRB     r0,[r4,#0]
000028  282e              CMP      r0,#0x2e
00002a  d103              BNE      |L81.52|
;;;1134         point_seen = 1; 
00002c  2001              MOVS     r0,#1
00002e  491e              LDR      r1,|L81.168|
000030  6008              STR      r0,[r1,#0]  ; point_seen
;;;1135         continue;
000032  e027              B        |L81.132|
                  |L81.52|
;;;1136       };
;;;1137       d = *s - '0';
000034  7820              LDRB     r0,[r4,#0]
000036  3830              SUBS     r0,r0,#0x30
000038  491c              LDR      r1,|L81.172|
00003a  6008              STR      r0,[r1,#0]  ; d
;;;1138       if (d >= 0 && d <= 9){
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]  ; d
000040  2800              CMP      r0,#0
000042  db1e              BLT      |L81.130|
000044  4608              MOV      r0,r1
000046  6800              LDR      r0,[r0,#0]  ; d
000048  2809              CMP      r0,#9
00004a  dc1a              BGT      |L81.130|
;;;1139         if (point_seen) fact /= 10.0f;
00004c  4816              LDR      r0,|L81.168|
00004e  6800              LDR      r0,[r0,#0]  ; point_seen
000050  2800              CMP      r0,#0
000052  d006              BEQ      |L81.98|
000054  4916              LDR      r1,|L81.176|
000056  4812              LDR      r0,|L81.160|
000058  6800              LDR      r0,[r0,#0]  ; fact
00005a  f7fffffe          BL       __aeabi_fdiv
00005e  4910              LDR      r1,|L81.160|
000060  6008              STR      r0,[r1,#0]  ; fact
                  |L81.98|
;;;1140         rez = rez * 10.0f + (float)d;
000062  4812              LDR      r0,|L81.172|
000064  6800              LDR      r0,[r0,#0]  ; d
000066  f7fffffe          BL       __aeabi_i2f
00006a  4605              MOV      r5,r0
00006c  4910              LDR      r1,|L81.176|
00006e  480b              LDR      r0,|L81.156|
000070  6800              LDR      r0,[r0,#0]  ; rez
000072  f7fffffe          BL       __aeabi_fmul
000076  4606              MOV      r6,r0
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       __aeabi_fadd
00007e  4907              LDR      r1,|L81.156|
000080  6008              STR      r0,[r1,#0]  ; rez
                  |L81.130|
000082  bf00              NOP                            ;1135
                  |L81.132|
000084  1c64              ADDS     r4,r4,#1              ;1132
                  |L81.134|
000086  7820              LDRB     r0,[r4,#0]            ;1132
000088  2800              CMP      r0,#0                 ;1132
00008a  d1cc              BNE      |L81.38|
;;;1141       };
;;;1142     };
;;;1143     return rez * fact;
00008c  4804              LDR      r0,|L81.160|
00008e  6801              LDR      r1,[r0,#0]  ; fact
000090  4802              LDR      r0,|L81.156|
000092  6800              LDR      r0,[r0,#0]  ; rez
000094  f7fffffe          BL       __aeabi_fmul
;;;1144   };
000098  bd70              POP      {r4-r6,pc}
;;;1145   
                          ENDP

00009a  0000              DCW      0x0000
                  |L81.156|
                          DCD      ||rez||
                  |L81.160|
                          DCD      fact
                  |L81.164|
                          DCD      0xbf800000
                  |L81.168|
                          DCD      point_seen
                  |L81.172|
                          DCD      d
                  |L81.176|
                          DCD      0x41200000

                          AREA ||i.get_gpsdata||, COMGROUP=get_gpsdata, CODE, READONLY, ALIGN=2

                  get_gpsdata PROC
;;;1344   
;;;1345   __inline void get_gpsdata()
000000  b510              PUSH     {r4,lr}
;;;1346   {
;;;1347   						clear2();
000002  f7fffffe          BL       clear2
;;;1348   						memset(uart_string_gps,0,3000);memset(gga,0,100);memset(rmc,0,100);			
000006  4952              LDR      r1,|L88.336|
000008  4852              LDR      r0,|L88.340|
00000a  f7fffffe          BL       __aeabi_memclr
00000e  2164              MOVS     r1,#0x64
000010  4851              LDR      r0,|L88.344|
000012  f7fffffe          BL       __aeabi_memclr
000016  2164              MOVS     r1,#0x64
000018  4850              LDR      r0,|L88.348|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1349   						i=0;tout2=0;
00001e  2000              MOVS     r0,#0
000020  494f              LDR      r1,|L88.352|
000022  6008              STR      r0,[r1,#0]  ; i
000024  494f              LDR      r1,|L88.356|
000026  6008              STR      r0,[r1,#0]  ; tout2
;;;1350   //						t22=9999999;
;;;1351   do{
000028  bf00              NOP      
                  |L88.42|
;;;1352   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00002a  484f              LDR      r0,|L88.360|
00002c  7900              LDRB     r0,[r0,#4]
00002e  2120              MOVS     r1,#0x20
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d00a              BEQ      |L88.76|
;;;1353   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000036  484c              LDR      r0,|L88.360|
000038  79c0              LDRB     r0,[r0,#7]
00003a  4946              LDR      r1,|L88.340|
00003c  4a48              LDR      r2,|L88.352|
00003e  6812              LDR      r2,[r2,#0]  ; i
000040  5488              STRB     r0,[r1,r2]
;;;1354   				i++;
000042  4847              LDR      r0,|L88.352|
000044  6800              LDR      r0,[r0,#0]  ; i
000046  1c40              ADDS     r0,r0,#1
000048  4945              LDR      r1,|L88.352|
00004a  6008              STR      r0,[r1,#0]  ; i
                  |L88.76|
;;;1355   	}
;;;1356   	}while(!   (strstr(uart_string_gps,"RMC")       ||  (tout2>1)  )  );
00004c  4947              LDR      r1,|L88.364|
00004e  4841              LDR      r0,|L88.340|
000050  f7fffffe          BL       strstr
000054  2800              CMP      r0,#0
000056  d103              BNE      |L88.96|
000058  4842              LDR      r0,|L88.356|
00005a  6800              LDR      r0,[r0,#0]  ; tout2
00005c  2801              CMP      r0,#1
00005e  dde4              BLE      |L88.42|
                  |L88.96|
;;;1357   i=0;tout2=0;
000060  2000              MOVS     r0,#0
000062  493f              LDR      r1,|L88.352|
000064  6008              STR      r0,[r1,#0]  ; i
000066  493f              LDR      r1,|L88.356|
000068  6008              STR      r0,[r1,#0]  ; tout2
;;;1358   do{
00006a  bf00              NOP      
                  |L88.108|
;;;1359   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00006c  483e              LDR      r0,|L88.360|
00006e  7900              LDRB     r0,[r0,#4]
000070  2120              MOVS     r1,#0x20
000072  4008              ANDS     r0,r0,r1
000074  2800              CMP      r0,#0
000076  d00a              BEQ      |L88.142|
;;;1360   	{		rmc[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000078  483b              LDR      r0,|L88.360|
00007a  79c1              LDRB     r1,[r0,#7]
00007c  4837              LDR      r0,|L88.348|
00007e  4a38              LDR      r2,|L88.352|
000080  6812              LDR      r2,[r2,#0]  ; i
000082  5481              STRB     r1,[r0,r2]
;;;1361   				i++;
000084  4836              LDR      r0,|L88.352|
000086  6800              LDR      r0,[r0,#0]  ; i
000088  1c40              ADDS     r0,r0,#1
00008a  4935              LDR      r1,|L88.352|
00008c  6008              STR      r0,[r1,#0]  ; i
                  |L88.142|
;;;1362   	}
;;;1363   }while(     !( mystrstr(rmc,'*')    ||  tout2>1) );
00008e  212a              MOVS     r1,#0x2a
000090  4832              LDR      r0,|L88.348|
000092  f7fffffe          BL       mystrstr
000096  2800              CMP      r0,#0
000098  d103              BNE      |L88.162|
00009a  4832              LDR      r0,|L88.356|
00009c  6800              LDR      r0,[r0,#0]  ; tout2
00009e  2801              CMP      r0,#1
0000a0  dde4              BLE      |L88.108|
                  |L88.162|
;;;1364   memset(uart_string_gps,0,3000);
0000a2  492b              LDR      r1,|L88.336|
0000a4  482b              LDR      r0,|L88.340|
0000a6  f7fffffe          BL       __aeabi_memclr
;;;1365   i=0;tout2=0;
0000aa  2000              MOVS     r0,#0
0000ac  492c              LDR      r1,|L88.352|
0000ae  6008              STR      r0,[r1,#0]  ; i
0000b0  492c              LDR      r1,|L88.356|
0000b2  6008              STR      r0,[r1,#0]  ; tout2
;;;1366   do{
0000b4  bf00              NOP      
                  |L88.182|
;;;1367   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000b6  482c              LDR      r0,|L88.360|
0000b8  7900              LDRB     r0,[r0,#4]
0000ba  2120              MOVS     r1,#0x20
0000bc  4008              ANDS     r0,r0,r1
0000be  2800              CMP      r0,#0
0000c0  d00a              BEQ      |L88.216|
;;;1368   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
0000c2  4829              LDR      r0,|L88.360|
0000c4  79c0              LDRB     r0,[r0,#7]
0000c6  4923              LDR      r1,|L88.340|
0000c8  4a25              LDR      r2,|L88.352|
0000ca  6812              LDR      r2,[r2,#0]  ; i
0000cc  5488              STRB     r0,[r1,r2]
;;;1369   				i++;
0000ce  4824              LDR      r0,|L88.352|
0000d0  6800              LDR      r0,[r0,#0]  ; i
0000d2  1c40              ADDS     r0,r0,#1
0000d4  4922              LDR      r1,|L88.352|
0000d6  6008              STR      r0,[r1,#0]  ; i
                  |L88.216|
;;;1370   	}
;;;1371   }while(!  (strstr(uart_string_gps,"GGA")      ||  (tout2>1) )  );
0000d8  4925              LDR      r1,|L88.368|
0000da  481e              LDR      r0,|L88.340|
0000dc  f7fffffe          BL       strstr
0000e0  2800              CMP      r0,#0
0000e2  d103              BNE      |L88.236|
0000e4  481f              LDR      r0,|L88.356|
0000e6  6800              LDR      r0,[r0,#0]  ; tout2
0000e8  2801              CMP      r0,#1
0000ea  dde4              BLE      |L88.182|
                  |L88.236|
;;;1372   i=0;tout2=0;
0000ec  2000              MOVS     r0,#0
0000ee  491c              LDR      r1,|L88.352|
0000f0  6008              STR      r0,[r1,#0]  ; i
0000f2  491c              LDR      r1,|L88.356|
0000f4  6008              STR      r0,[r1,#0]  ; tout2
;;;1373   do{
0000f6  bf00              NOP      
                  |L88.248|
;;;1374   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000f8  481b              LDR      r0,|L88.360|
0000fa  7900              LDRB     r0,[r0,#4]
0000fc  2120              MOVS     r1,#0x20
0000fe  4008              ANDS     r0,r0,r1
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L88.282|
;;;1375   	{		gga[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000104  4818              LDR      r0,|L88.360|
000106  79c1              LDRB     r1,[r0,#7]
000108  4813              LDR      r0,|L88.344|
00010a  4a15              LDR      r2,|L88.352|
00010c  6812              LDR      r2,[r2,#0]  ; i
00010e  5481              STRB     r1,[r0,r2]
;;;1376   				i++;
000110  4813              LDR      r0,|L88.352|
000112  6800              LDR      r0,[r0,#0]  ; i
000114  1c40              ADDS     r0,r0,#1
000116  4912              LDR      r1,|L88.352|
000118  6008              STR      r0,[r1,#0]  ; i
                  |L88.282|
;;;1377   	}
;;;1378   }while(!(mystrstr(gga,'*')  ||  (tout2>1) ));
00011a  212a              MOVS     r1,#0x2a
00011c  480e              LDR      r0,|L88.344|
00011e  f7fffffe          BL       mystrstr
000122  2800              CMP      r0,#0
000124  d103              BNE      |L88.302|
000126  480f              LDR      r0,|L88.356|
000128  6800              LDR      r0,[r0,#0]  ; tout2
00012a  2801              CMP      r0,#1
00012c  dde4              BLE      |L88.248|
                  |L88.302|
;;;1379   
;;;1380   clear2();
00012e  f7fffffe          BL       clear2
;;;1381   
;;;1382   		
;;;1383   
;;;1384   stateCount++; 
000132  4810              LDR      r0,|L88.372|
000134  7800              LDRB     r0,[r0,#0]  ; stateCount
000136  1c40              ADDS     r0,r0,#1
000138  490e              LDR      r1,|L88.372|
00013a  7008              STRB     r0,[r1,#0]
;;;1385   if(stateCount>5){stateCount =0;}
00013c  4608              MOV      r0,r1
00013e  7800              LDRB     r0,[r0,#0]  ; stateCount
000140  2805              CMP      r0,#5
000142  dd01              BLE      |L88.328|
000144  2000              MOVS     r0,#0
000146  7008              STRB     r0,[r1,#0]
                  |L88.328|
;;;1386   LED_state2();					
000148  f7fffffe          BL       LED_state2
;;;1387   }
00014c  bd10              POP      {r4,pc}
;;;1388   	
                          ENDP

00014e  0000              DCW      0x0000
                  |L88.336|
                          DCD      0x00000bb8
                  |L88.340|
                          DCD      uart_string_gps
                  |L88.344|
                          DCD      gga
                  |L88.348|
                          DCD      ||rmc||
                  |L88.352|
                          DCD      i
                  |L88.356|
                          DCD      tout2
                  |L88.360|
                          DCD      0x4006c000
                  |L88.364|
                          DCD      ||.conststring||+0xe8
                  |L88.368|
                          DCD      ||.conststring||+0xec
                  |L88.372|
                          DCD      stateCount

                          AREA ||i.myAtoi||, COMGROUP=myAtoi, CODE, READONLY, ALIGN=2

                  myAtoi PROC
;;;1112   
;;;1113   __inline int myAtoi(char *str)
000000  4601              MOV      r1,r0
;;;1114   {res=0;
000002  2000              MOVS     r0,#0
000004  4a0e              LDR      r2,|L95.64|
000006  6010              STR      r0,[r2,#0]  ; res
;;;1115       // Initialize result
;;;1116   
;;;1117       // Iterate through all characters of input string and update result
;;;1118       for (iz = 0; str[iz] != '\0'; ++iz)
000008  4a0e              LDR      r2,|L95.68|
00000a  6010              STR      r0,[r2,#0]  ; iz
00000c  e00f              B        |L95.46|
                  |L95.14|
;;;1119           res = res*10 + str[iz] - '0';
00000e  480c              LDR      r0,|L95.64|
000010  6800              LDR      r0,[r0,#0]  ; res
000012  220a              MOVS     r2,#0xa
000014  4350              MULS     r0,r2,r0
000016  4a0b              LDR      r2,|L95.68|
000018  6812              LDR      r2,[r2,#0]  ; iz
00001a  5c8a              LDRB     r2,[r1,r2]
00001c  1880              ADDS     r0,r0,r2
00001e  3830              SUBS     r0,r0,#0x30
000020  4a07              LDR      r2,|L95.64|
000022  6010              STR      r0,[r2,#0]  ; res
000024  4807              LDR      r0,|L95.68|
000026  6800              LDR      r0,[r0,#0]            ;1118  ; iz
000028  1c40              ADDS     r0,r0,#1              ;1118
00002a  4a06              LDR      r2,|L95.68|
00002c  6010              STR      r0,[r2,#0]            ;1118  ; iz
                  |L95.46|
00002e  4805              LDR      r0,|L95.68|
000030  6800              LDR      r0,[r0,#0]            ;1118  ; iz
000032  5c08              LDRB     r0,[r1,r0]            ;1118
000034  2800              CMP      r0,#0                 ;1118
000036  d1ea              BNE      |L95.14|
;;;1120   
;;;1121       // return result.
;;;1122       return res;
000038  4801              LDR      r0,|L95.64|
00003a  6800              LDR      r0,[r0,#0]  ; res
;;;1123   }
00003c  4770              BX       lr
;;;1124   
                          ENDP

00003e  0000              DCW      0x0000
                  |L95.64|
                          DCD      ||res||
                  |L95.68|
                          DCD      ||iz||

                          AREA ||i.adc_read||, COMGROUP=adc_read, CODE, READONLY, ALIGN=2

                  adc_read PROC
;;;32     
;;;33     __inline void adc_read(uint8_t channel)
000000  b510              PUSH     {r4,lr}
;;;34     {
000002  4604              MOV      r4,r0
;;;35     	adcin=0;fuel=0;adcsample=0;
000004  2000              MOVS     r0,#0
000006  4922              LDR      r1,|L102.144|
000008  6008              STR      r0,[r1,#0]  ; adcin
00000a  4922              LDR      r1,|L102.148|
00000c  6008              STR      r0,[r1,#0]  ; fuel
00000e  4922              LDR      r1,|L102.152|
000010  6008              STR      r0,[r1,#0]  ; adcsample
;;;36     for(e=0;e<500;){
000012  4922              LDR      r1,|L102.156|
000014  6008              STR      r0,[r1,#0]  ; e
000016  e02c              B        |L102.114|
                  |L102.24|
;;;37     	
;;;38     ADC0->SC1[0] = !ADC_SC1_AIEN_MASK | ADC_SC1_DIFF_MASK | ADC_SC1_ADCH(channel) ;
000018  06e0              LSLS     r0,r4,#27
00001a  0ec0              LSRS     r0,r0,#27
00001c  2120              MOVS     r1,#0x20
00001e  4308              ORRS     r0,r0,r1
000020  491f              LDR      r1,|L102.160|
000022  6008              STR      r0,[r1,#0]
;;;39     while(ADC0_SC2 & ADC_SC2_ADACT_MASK); //Conversion in progress
000024  bf00              NOP      
                  |L102.38|
000026  481e              LDR      r0,|L102.160|
000028  6a00              LDR      r0,[r0,#0x20]
00002a  2180              MOVS     r1,#0x80
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d1f9              BNE      |L102.38|
;;;40     while(!(ADC0_SC1A & ADC_SC1_COCO_MASK)); //Wait until conversion complete
000032  bf00              NOP      
                  |L102.52|
000034  481a              LDR      r0,|L102.160|
000036  6800              LDR      r0,[r0,#0]
000038  2180              MOVS     r1,#0x80
00003a  4008              ANDS     r0,r0,r1
00003c  2800              CMP      r0,#0
00003e  d0f9              BEQ      |L102.52|
;;;41     adcin = ADC0_RA;
000040  4817              LDR      r0,|L102.160|
000042  6900              LDR      r0,[r0,#0x10]
000044  4912              LDR      r1,|L102.144|
000046  6008              STR      r0,[r1,#0]  ; adcin
;;;42     
;;;43     
;;;44     		if(adcin>40000){adcin=0;}
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]  ; adcin
00004c  4915              LDR      r1,|L102.164|
00004e  4288              CMP      r0,r1
000050  dd03              BLE      |L102.90|
000052  2000              MOVS     r0,#0
000054  490e              LDR      r1,|L102.144|
000056  6008              STR      r0,[r1,#0]  ; adcin
000058  e006              B        |L102.104|
                  |L102.90|
;;;45     			else{
;;;46     			adcsample+=adcin;
00005a  480f              LDR      r0,|L102.152|
00005c  6800              LDR      r0,[r0,#0]  ; adcsample
00005e  490c              LDR      r1,|L102.144|
000060  6809              LDR      r1,[r1,#0]  ; adcin
000062  1840              ADDS     r0,r0,r1
000064  490c              LDR      r1,|L102.152|
000066  6008              STR      r0,[r1,#0]  ; adcsample
                  |L102.104|
;;;47     			}
;;;48     			e++;
000068  480c              LDR      r0,|L102.156|
00006a  6800              LDR      r0,[r0,#0]  ; e
00006c  1c40              ADDS     r0,r0,#1
00006e  490b              LDR      r1,|L102.156|
000070  6008              STR      r0,[r1,#0]  ; e
                  |L102.114|
000072  480a              LDR      r0,|L102.156|
000074  6800              LDR      r0,[r0,#0]            ;36  ; e
000076  21ff              MOVS     r1,#0xff              ;36
000078  31f5              ADDS     r1,r1,#0xf5           ;36
00007a  4288              CMP      r0,r1                 ;36
00007c  dbcc              BLT      |L102.24|
;;;49     	}
;;;50     fuel=adcsample/5000;	
00007e  490a              LDR      r1,|L102.168|
000080  4805              LDR      r0,|L102.152|
000082  6800              LDR      r0,[r0,#0]  ; adcsample
000084  f7fffffe          BL       __aeabi_idivmod
000088  4902              LDR      r1,|L102.148|
00008a  6008              STR      r0,[r1,#0]  ; fuel
;;;51     
;;;52     }
00008c  bd10              POP      {r4,pc}
;;;53     	
                          ENDP

00008e  0000              DCW      0x0000
                  |L102.144|
                          DCD      adcin
                  |L102.148|
                          DCD      fuel
                  |L102.152|
                          DCD      adcsample
                  |L102.156|
                          DCD      e
                  |L102.160|
                          DCD      0x4003b000
                  |L102.164|
                          DCD      0x00009c40
                  |L102.168|
                          DCD      0x00001388

                          AREA ||i.GPS_COLLECT||, COMGROUP=GPS_COLLECT, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT PROC
;;;1147   
;;;1148   __inline void GPS_COLLECT()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1149   {imeiinc=0;
000002  2000              MOVS     r0,#0
000004  49da              LDR      r1,|L109.880|
000006  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1150   delay(200);
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       delay
;;;1151   clear();
00000e  f7fffffe          BL       clear
;;;1152   //adc_read(8);							
;;;1153   //memset(fuelstr,0,5);
;;;1154   //sprintf(fuelstr,"%d,",fuel);	
;;;1155   	
;;;1156   memset(imei,0,20);
000012  2114              MOVS     r1,#0x14
000014  48d7              LDR      r0,|L109.884|
000016  f7fffffe          BL       __aeabi_memclr
;;;1157   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
00001a  200a              MOVS     r0,#0xa
00001c  4bd6              LDR      r3,|L109.888|
00001e  4ad7              LDR      r2,|L109.892|
000020  49d7              LDR      r1,|L109.896|
000022  9000              STR      r0,[sp,#0]
000024  48d7              LDR      r0,|L109.900|
000026  f7fffffe          BL       send_GSM
;;;1158   for(i=0;i<strlen(uart_string_gsm);i++){
00002a  2000              MOVS     r0,#0
00002c  49d6              LDR      r1,|L109.904|
00002e  6008              STR      r0,[r1,#0]  ; i
000030  e01d              B        |L109.110|
                  |L109.50|
;;;1159   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
000032  48d6              LDR      r0,|L109.908|
000034  49d4              LDR      r1,|L109.904|
000036  6809              LDR      r1,[r1,#0]  ; i
000038  5c40              LDRB     r0,[r0,r1]
00003a  282f              CMP      r0,#0x2f
00003c  dd12              BLE      |L109.100|
00003e  48d3              LDR      r0,|L109.908|
000040  49d1              LDR      r1,|L109.904|
000042  6809              LDR      r1,[r1,#0]  ; i
000044  5c40              LDRB     r0,[r0,r1]
000046  283a              CMP      r0,#0x3a
000048  da0c              BGE      |L109.100|
;;;1160   			imei[imeiinc] = uart_string_gsm[i];
00004a  48d0              LDR      r0,|L109.908|
00004c  49ce              LDR      r1,|L109.904|
00004e  6809              LDR      r1,[r1,#0]  ; i
000050  5c41              LDRB     r1,[r0,r1]
000052  48c8              LDR      r0,|L109.884|
000054  4ac6              LDR      r2,|L109.880|
000056  6812              LDR      r2,[r2,#0]  ; imeiinc
000058  5481              STRB     r1,[r0,r2]
;;;1161   			imeiinc++;
00005a  48c5              LDR      r0,|L109.880|
00005c  6800              LDR      r0,[r0,#0]  ; imeiinc
00005e  1c40              ADDS     r0,r0,#1
000060  49c3              LDR      r1,|L109.880|
000062  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L109.100|
000064  48c8              LDR      r0,|L109.904|
000066  6800              LDR      r0,[r0,#0]            ;1158  ; i
000068  1c40              ADDS     r0,r0,#1              ;1158
00006a  49c7              LDR      r1,|L109.904|
00006c  6008              STR      r0,[r1,#0]            ;1158  ; i
                  |L109.110|
00006e  48c7              LDR      r0,|L109.908|
000070  f7fffffe          BL       strlen
000074  49c4              LDR      r1,|L109.904|
000076  6809              LDR      r1,[r1,#0]            ;1158  ; i
000078  4288              CMP      r0,r1                 ;1158
00007a  d8da              BHI      |L109.50|
;;;1162   		}
;;;1163   }
;;;1164   clear();	
00007c  f7fffffe          BL       clear
;;;1165   
;;;1166   
;;;1167   	adc_read(9);							
000080  2009              MOVS     r0,#9
000082  f7fffffe          BL       adc_read
;;;1168   	memset(fuelstr,0,5);
000086  2105              MOVS     r1,#5
000088  48c1              LDR      r0,|L109.912|
00008a  f7fffffe          BL       __aeabi_memclr4
;;;1169   	sprintf(fuelstr,"%d,",fuel);
00008e  48c1              LDR      r0,|L109.916|
000090  49c1              LDR      r1,|L109.920|
000092  6802              LDR      r2,[r0,#0]  ; fuel
000094  48be              LDR      r0,|L109.912|
000096  f7fffffe          BL       __2sprintf
;;;1170   
;;;1171   time52=15;	
00009a  200f              MOVS     r0,#0xf
00009c  49bf              LDR      r1,|L109.924|
00009e  6008              STR      r0,[r1,#0]  ; time52
;;;1172   
;;;1173   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
0000a0  48bf              LDR      r0,|L109.928|
0000a2  6800              LDR      r0,[r0,#0]  ; tmeout
0000a4  4bbf              LDR      r3,|L109.932|
0000a6  4ab4              LDR      r2,|L109.888|
0000a8  49b5              LDR      r1,|L109.896|
0000aa  9000              STR      r0,[sp,#0]
0000ac  48be              LDR      r0,|L109.936|
0000ae  f7fffffe          BL       send_GSM
;;;1174   	// not sleep	
;;;1175   	memset(num2,0,30);
0000b2  211e              MOVS     r1,#0x1e
0000b4  48bd              LDR      r0,|L109.940|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;1176   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
0000ba  48bc              LDR      r0,|L109.940|
0000bc  210d              MOVS     r1,#0xd
0000be  232c              MOVS     r3,#0x2c
0000c0  2205              MOVS     r2,#5
0000c2  9100              STR      r1,[sp,#0]
0000c4  9001              STR      r0,[sp,#4]
0000c6  2102              MOVS     r1,#2
0000c8  48b0              LDR      r0,|L109.908|
0000ca  f7fffffe          BL       parse_g
;;;1177   	voltagecbc=myAtoi(num2);
0000ce  48b7              LDR      r0,|L109.940|
0000d0  f7fffffe          BL       myAtoi
0000d4  49b6              LDR      r1,|L109.944|
0000d6  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1178   memset(ignstr,0,2);
0000d8  48b6              LDR      r0,|L109.948|
0000da  2100              MOVS     r1,#0
0000dc  7001              STRB     r1,[r0,#0]
0000de  7041              STRB     r1,[r0,#1]
;;;1179   if(GPIOB_PDIR & 0x00000001){
0000e0  48b5              LDR      r0,|L109.952|
0000e2  6900              LDR      r0,[r0,#0x10]
0000e4  07c0              LSLS     r0,r0,#31
0000e6  0fc0              LSRS     r0,r0,#31
0000e8  2800              CMP      r0,#0
0000ea  d005              BEQ      |L109.248|
;;;1180   			sprintf(ignstr,"%d",1);
0000ec  2201              MOVS     r2,#1
0000ee  49b3              LDR      r1,|L109.956|
0000f0  48b0              LDR      r0,|L109.948|
0000f2  f7fffffe          BL       __2sprintf
0000f6  e004              B        |L109.258|
                  |L109.248|
;;;1181   }
;;;1182   else{
;;;1183   				sprintf(ignstr,"%d",0);
0000f8  2200              MOVS     r2,#0
0000fa  49b0              LDR      r1,|L109.956|
0000fc  48ad              LDR      r0,|L109.948|
0000fe  f7fffffe          BL       __2sprintf
                  |L109.258|
;;;1184   
;;;1185   }
;;;1186   
;;;1187   memset(acstr,0,2); //ptb2
000102  48af              LDR      r0,|L109.960|
000104  2100              MOVS     r1,#0
000106  8001              STRH     r1,[r0,#0]
;;;1188   if(GPIOB_PDIR & 0x00000004){
000108  48ab              LDR      r0,|L109.952|
00010a  6900              LDR      r0,[r0,#0x10]
00010c  2104              MOVS     r1,#4
00010e  4008              ANDS     r0,r0,r1
000110  2800              CMP      r0,#0
000112  d005              BEQ      |L109.288|
;;;1189   			sprintf(acstr,"%d",1);
000114  2201              MOVS     r2,#1
000116  49a9              LDR      r1,|L109.956|
000118  48a9              LDR      r0,|L109.960|
00011a  f7fffffe          BL       __2sprintf
00011e  e004              B        |L109.298|
                  |L109.288|
;;;1190   }
;;;1191   else{
;;;1192   			sprintf(acstr,"%d",0);
000120  2200              MOVS     r2,#0
000122  49a6              LDR      r1,|L109.956|
000124  48a6              LDR      r0,|L109.960|
000126  f7fffffe          BL       __2sprintf
                  |L109.298|
;;;1193   
;;;1194   }
;;;1195   
;;;1196   
;;;1197   if(int_erval>60){int_erval=5;}
00012a  48a6              LDR      r0,|L109.964|
00012c  6800              LDR      r0,[r0,#0]  ; int_erval
00012e  283c              CMP      r0,#0x3c
000130  dd02              BLE      |L109.312|
000132  2005              MOVS     r0,#5
000134  49a3              LDR      r1,|L109.964|
000136  6008              STR      r0,[r1,#0]  ; int_erval
                  |L109.312|
;;;1198   while(lpticks<int_erval);
000138  bf00              NOP      
                  |L109.314|
00013a  48a3              LDR      r0,|L109.968|
00013c  6800              LDR      r0,[r0,#0]  ; lpticks
00013e  49a1              LDR      r1,|L109.964|
000140  6809              LDR      r1,[r1,#0]  ; int_erval
000142  4288              CMP      r0,r1
000144  dbf9              BLT      |L109.314|
;;;1199   get_gpsdata();
000146  f7fffffe          BL       get_gpsdata
;;;1200   lpticks=0;
00014a  2000              MOVS     r0,#0
00014c  499e              LDR      r1,|L109.968|
00014e  6008              STR      r0,[r1,#0]  ; lpticks
;;;1201   
;;;1202   parse_g(rmc, 3, 4, ',', ',' ,lati);
000150  489e              LDR      r0,|L109.972|
000152  212c              MOVS     r1,#0x2c
000154  460b              MOV      r3,r1
000156  2204              MOVS     r2,#4
000158  9100              STR      r1,[sp,#0]
00015a  9001              STR      r0,[sp,#4]
00015c  2103              MOVS     r1,#3
00015e  489c              LDR      r0,|L109.976|
000160  f7fffffe          BL       parse_g
;;;1203   parse_g(rmc, 5, 6, ',', ',' ,longi);
000164  489b              LDR      r0,|L109.980|
000166  212c              MOVS     r1,#0x2c
000168  460b              MOV      r3,r1
00016a  2206              MOVS     r2,#6
00016c  9100              STR      r1,[sp,#0]
00016e  9001              STR      r0,[sp,#4]
000170  2105              MOVS     r1,#5
000172  4897              LDR      r0,|L109.976|
000174  f7fffffe          BL       parse_g
;;;1204   parse_g(rmc, 7, 8, ',', ',' ,velocity);
000178  4897              LDR      r0,|L109.984|
00017a  212c              MOVS     r1,#0x2c
00017c  460b              MOV      r3,r1
00017e  2208              MOVS     r2,#8
000180  9100              STR      r1,[sp,#0]
000182  9001              STR      r0,[sp,#4]
000184  2107              MOVS     r1,#7
000186  4892              LDR      r0,|L109.976|
000188  f7fffffe          BL       parse_g
;;;1205   		
;;;1206   		speed = stof(velocity);
00018c  4892              LDR      r0,|L109.984|
00018e  f7fffffe          BL       stof
000192  4992              LDR      r1,|L109.988|
000194  6008              STR      r0,[r1,#0]  ; speed
;;;1207   		c=stof(lati);//7523.7412
000196  488d              LDR      r0,|L109.972|
000198  f7fffffe          BL       stof
00019c  4604              MOV      r4,r0
00019e  f7fffffe          BL       __aeabi_f2d
0001a2  4a8f              LDR      r2,|L109.992|
0001a4  c203              STM      r2!,{r0,r1}
;;;1208   		hh= c/100; //75
0001a6  2200              MOVS     r2,#0
0001a8  4b8e              LDR      r3,|L109.996|
0001aa  498d              LDR      r1,|L109.992|
0001ac  c903              LDM      r1,{r0,r1}
0001ae  f7fffffe          BL       __aeabi_ddiv
0001b2  4604              MOV      r4,r0
0001b4  f7fffffe          BL       __aeabi_d2iz
0001b8  498b              LDR      r1,|L109.1000|
0001ba  6008              STR      r0,[r1,#0]  ; hh
;;;1209   		hh11 = c/100; //75.237412
0001bc  2200              MOVS     r2,#0
0001be  4b89              LDR      r3,|L109.996|
0001c0  4987              LDR      r1,|L109.992|
0001c2  c903              LDM      r1,{r0,r1}
0001c4  f7fffffe          BL       __aeabi_ddiv
0001c8  4a88              LDR      r2,|L109.1004|
0001ca  c203              STM      r2!,{r0,r1}
;;;1210   		mm11 = hh11-hh; //.237412
0001cc  4886              LDR      r0,|L109.1000|
0001ce  6800              LDR      r0,[r0,#0]  ; hh
0001d0  f7fffffe          BL       __aeabi_i2d
0001d4  4604              MOV      r4,r0
0001d6  4885              LDR      r0,|L109.1004|
0001d8  c80c              LDM      r0!,{r2,r3}
0001da  4620              MOV      r0,r4
0001dc  f7fffffe          BL       __aeabi_drsub
0001e0  4a83              LDR      r2,|L109.1008|
0001e2  c203              STM      r2!,{r0,r1}
;;;1211   		mm11*=100;
0001e4  2200              MOVS     r2,#0
0001e6  4b7f              LDR      r3,|L109.996|
0001e8  4981              LDR      r1,|L109.1008|
0001ea  c903              LDM      r1,{r0,r1}
0001ec  f7fffffe          BL       __aeabi_dmul
0001f0  4a7f              LDR      r2,|L109.1008|
0001f2  c203              STM      r2!,{r0,r1}
;;;1212   		mm22=hh+mm11/60;	
0001f4  2200              MOVS     r2,#0
0001f6  4b7f              LDR      r3,|L109.1012|
0001f8  497d              LDR      r1,|L109.1008|
0001fa  c903              LDM      r1,{r0,r1}
0001fc  f7fffffe          BL       __aeabi_ddiv
000200  4604              MOV      r4,r0
000202  460d              MOV      r5,r1
000204  4878              LDR      r0,|L109.1000|
000206  6800              LDR      r0,[r0,#0]  ; hh
000208  f7fffffe          BL       __aeabi_i2d
00020c  4606              MOV      r6,r0
00020e  4622              MOV      r2,r4
000210  462b              MOV      r3,r5
000212  f7fffffe          BL       __aeabi_dadd
000216  4a78              LDR      r2,|L109.1016|
000218  c203              STM      r2!,{r0,r1}
;;;1213   		memset(lati,0,15);
00021a  210f              MOVS     r1,#0xf
00021c  486b              LDR      r0,|L109.972|
00021e  f7fffffe          BL       __aeabi_memclr
;;;1214   		sprintf(lati,"%f",mm22);
000222  4875              LDR      r0,|L109.1016|
000224  4975              LDR      r1,|L109.1020|
000226  c80c              LDM      r0!,{r2,r3}
000228  4868              LDR      r0,|L109.972|
00022a  f7fffffe          BL       __2sprintf
;;;1215   		c=stof(longi);//7523.7412
00022e  4869              LDR      r0,|L109.980|
000230  f7fffffe          BL       stof
000234  4604              MOV      r4,r0
000236  f7fffffe          BL       __aeabi_f2d
00023a  4a69              LDR      r2,|L109.992|
00023c  c203              STM      r2!,{r0,r1}
;;;1216   		hh= c/100; //75
00023e  2200              MOVS     r2,#0
000240  4b68              LDR      r3,|L109.996|
000242  4967              LDR      r1,|L109.992|
000244  c903              LDM      r1,{r0,r1}
000246  f7fffffe          BL       __aeabi_ddiv
00024a  4604              MOV      r4,r0
00024c  f7fffffe          BL       __aeabi_d2iz
000250  4965              LDR      r1,|L109.1000|
000252  6008              STR      r0,[r1,#0]  ; hh
;;;1217   		hh11 = c/100; //75.237412
000254  2200              MOVS     r2,#0
000256  4b63              LDR      r3,|L109.996|
000258  4961              LDR      r1,|L109.992|
00025a  c903              LDM      r1,{r0,r1}
00025c  f7fffffe          BL       __aeabi_ddiv
000260  4a62              LDR      r2,|L109.1004|
000262  c203              STM      r2!,{r0,r1}
;;;1218   		mm11 = hh11-hh; //.237412
000264  4860              LDR      r0,|L109.1000|
000266  6800              LDR      r0,[r0,#0]  ; hh
000268  f7fffffe          BL       __aeabi_i2d
00026c  4604              MOV      r4,r0
00026e  485f              LDR      r0,|L109.1004|
000270  c80c              LDM      r0!,{r2,r3}
000272  4620              MOV      r0,r4
000274  f7fffffe          BL       __aeabi_drsub
000278  4a5d              LDR      r2,|L109.1008|
00027a  c203              STM      r2!,{r0,r1}
;;;1219   		mm11*=100;
00027c  2200              MOVS     r2,#0
00027e  4b59              LDR      r3,|L109.996|
000280  495b              LDR      r1,|L109.1008|
000282  c903              LDM      r1,{r0,r1}
000284  f7fffffe          BL       __aeabi_dmul
000288  4a59              LDR      r2,|L109.1008|
00028a  c203              STM      r2!,{r0,r1}
;;;1220   		mm22=hh+mm11/60;	
00028c  2200              MOVS     r2,#0
00028e  4b59              LDR      r3,|L109.1012|
000290  4957              LDR      r1,|L109.1008|
000292  c903              LDM      r1,{r0,r1}
000294  f7fffffe          BL       __aeabi_ddiv
000298  4604              MOV      r4,r0
00029a  460d              MOV      r5,r1
00029c  4852              LDR      r0,|L109.1000|
00029e  6800              LDR      r0,[r0,#0]  ; hh
0002a0  f7fffffe          BL       __aeabi_i2d
0002a4  4606              MOV      r6,r0
0002a6  4622              MOV      r2,r4
0002a8  462b              MOV      r3,r5
0002aa  f7fffffe          BL       __aeabi_dadd
0002ae  4a52              LDR      r2,|L109.1016|
0002b0  c203              STM      r2!,{r0,r1}
;;;1221   		memset(longi,0,15);
0002b2  210f              MOVS     r1,#0xf
0002b4  4847              LDR      r0,|L109.980|
0002b6  f7fffffe          BL       __aeabi_memclr
;;;1222   		sprintf(longi,"%f",mm22);	
0002ba  484f              LDR      r0,|L109.1016|
0002bc  494f              LDR      r1,|L109.1020|
0002be  c80c              LDM      r0!,{r2,r3}
0002c0  4844              LDR      r0,|L109.980|
0002c2  f7fffffe          BL       __2sprintf
;;;1223   		strcat(data,imei);
0002c6  492b              LDR      r1,|L109.884|
0002c8  484d              LDR      r0,|L109.1024|
0002ca  f7fffffe          BL       strcat
;;;1224   		strcat(data,",");	
0002ce  494d              LDR      r1,|L109.1028|
0002d0  484b              LDR      r0,|L109.1024|
0002d2  f7fffffe          BL       strcat
;;;1225   		strcat(data,"$GxGGA");	
0002d6  494c              LDR      r1,|L109.1032|
0002d8  4849              LDR      r0,|L109.1024|
0002da  f7fffffe          BL       strcat
;;;1226   		strcat(data,gga);
0002de  494b              LDR      r1,|L109.1036|
0002e0  4847              LDR      r0,|L109.1024|
0002e2  f7fffffe          BL       strcat
;;;1227   		strcat(data,",$GxRMC");	
0002e6  494a              LDR      r1,|L109.1040|
0002e8  4845              LDR      r0,|L109.1024|
0002ea  f7fffffe          BL       strcat
;;;1228   		strcat(data,rmc);	
0002ee  4938              LDR      r1,|L109.976|
0002f0  4843              LDR      r0,|L109.1024|
0002f2  f7fffffe          BL       strcat
;;;1229   		strcat(data,",");	
0002f6  4943              LDR      r1,|L109.1028|
0002f8  4841              LDR      r0,|L109.1024|
0002fa  f7fffffe          BL       strcat
;;;1230   		strcat(data,num2);	
0002fe  492b              LDR      r1,|L109.940|
000300  483f              LDR      r0,|L109.1024|
000302  f7fffffe          BL       strcat
;;;1231   		strcat(data,",F=");	
000306  4943              LDR      r1,|L109.1044|
000308  483d              LDR      r0,|L109.1024|
00030a  f7fffffe          BL       strcat
;;;1232   		strcat(data,fuelstr);		
00030e  4920              LDR      r1,|L109.912|
000310  483b              LDR      r0,|L109.1024|
000312  f7fffffe          BL       strcat
;;;1233   		strcat(data,",AC=");	
000316  4940              LDR      r1,|L109.1048|
000318  4839              LDR      r0,|L109.1024|
00031a  f7fffffe          BL       strcat
;;;1234   		strcat(data,acstr);
00031e  4928              LDR      r1,|L109.960|
000320  4837              LDR      r0,|L109.1024|
000322  f7fffffe          BL       strcat
;;;1235   		strcat(data,",I=");	
000326  493d              LDR      r1,|L109.1052|
000328  4835              LDR      r0,|L109.1024|
00032a  f7fffffe          BL       strcat
;;;1236   		strcat(data,ignstr);	
00032e  4921              LDR      r1,|L109.948|
000330  4833              LDR      r0,|L109.1024|
000332  f7fffffe          BL       strcat
;;;1237   		strcat(data,",RS232=");
000336  493a              LDR      r1,|L109.1056|
000338  4831              LDR      r0,|L109.1024|
00033a  f7fffffe          BL       strcat
;;;1238   		strcat(data,id);
00033e  4939              LDR      r1,|L109.1060|
000340  482f              LDR      r0,|L109.1024|
000342  f7fffffe          BL       strcat
;;;1239   		strcat(data,",");
000346  492f              LDR      r1,|L109.1028|
000348  482d              LDR      r0,|L109.1024|
00034a  f7fffffe          BL       strcat
;;;1240   		memset(id,0,30);
00034e  211e              MOVS     r1,#0x1e
000350  4834              LDR      r0,|L109.1060|
000352  f7fffffe          BL       __aeabi_memclr
;;;1241   		
;;;1242   		if( !(GPIOC_PDIR & 0x00000001)){
000356  4818              LDR      r0,|L109.952|
000358  3040              ADDS     r0,r0,#0x40
00035a  6900              LDR      r0,[r0,#0x10]
00035c  07c0              LSLS     r0,r0,#31
00035e  0fc0              LSRS     r0,r0,#31
000360  2800              CMP      r0,#0
000362  d003              BEQ      |L109.876|
;;;1243   		}
;;;1244   		else{strcat(data,",BR*");}
000364  4930              LDR      r1,|L109.1064|
000366  4826              LDR      r0,|L109.1024|
000368  f7fffffe          BL       strcat
                  |L109.876|
;;;1245   //return 0;
;;;1246   }
00036c  bdfe              POP      {r1-r7,pc}
;;;1247   
                          ENDP

00036e  0000              DCW      0x0000
                  |L109.880|
                          DCD      imeiinc
                  |L109.884|
                          DCD      imei
                  |L109.888|
                          DCD      ||.conststring||+0xe0
                  |L109.892|
                          DCD      ||.conststring||+0x18
                  |L109.896|
                          DCD      ||.conststring||+0x2c
                  |L109.900|
                          DCD      ||.conststring||+0xf0
                  |L109.904|
                          DCD      i
                  |L109.908|
                          DCD      uart_string_gsm
                  |L109.912|
                          DCD      fuelstr
                  |L109.916|
                          DCD      fuel
                  |L109.920|
                          DCD      ||.conststring||+0x100
                  |L109.924|
                          DCD      time52
                  |L109.928|
                          DCD      tmeout
                  |L109.932|
                          DCD      ||.conststring||+0x10
                  |L109.936|
                          DCD      ||.conststring||+0x104
                  |L109.940|
                          DCD      num2
                  |L109.944|
                          DCD      voltagecbc
                  |L109.948|
                          DCD      ignstr
                  |L109.952|
                          DCD      0x400ff040
                  |L109.956|
                          DCD      ||.conststring||+0x114
                  |L109.960|
                          DCD      acstr
                  |L109.964|
                          DCD      int_erval
                  |L109.968|
                          DCD      lpticks
                  |L109.972|
                          DCD      lati
                  |L109.976|
                          DCD      ||rmc||
                  |L109.980|
                          DCD      longi
                  |L109.984|
                          DCD      velocity
                  |L109.988|
                          DCD      speed
                  |L109.992|
                          DCD      c
                  |L109.996|
                          DCD      0x40590000
                  |L109.1000|
                          DCD      ||hh||
                  |L109.1004|
                          DCD      hh11
                  |L109.1008|
                          DCD      mm11
                  |L109.1012|
                          DCD      0x404e0000
                  |L109.1016|
                          DCD      mm22
                  |L109.1020|
                          DCD      ||.conststring||+0x118
                  |L109.1024|
                          DCD      data
                  |L109.1028|
                          DCD      ||.conststring||+0x11c
                  |L109.1032|
                          DCD      ||.conststring||+0x120
                  |L109.1036|
                          DCD      gga
                  |L109.1040|
                          DCD      ||.conststring||+0x128
                  |L109.1044|
                          DCD      ||.conststring||+0x130
                  |L109.1048|
                          DCD      ||.conststring||+0x134
                  |L109.1052|
                          DCD      ||.conststring||+0x13c
                  |L109.1056|
                          DCD      ||.conststring||+0x140
                  |L109.1060|
                          DCD      ||id||
                  |L109.1064|
                          DCD      ||.conststring||+0x148

                          AREA ||i.save_interval||, COMGROUP=save_interval, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_interval PROC
;;;1194   
;;;1195   __inline void save_interval()
000000  b538              PUSH     {r3-r5,lr}
;;;1196   {
;;;1197   	
;;;1198   send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L116.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L116.208|
000008  4a32              LDR      r2,|L116.212|
00000a  4933              LDR      r1,|L116.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L116.220|
000010  f7fffffe          BL       send_GSM
;;;1199   
;;;1200   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L116.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1201   	sprintf(at_,"\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",strlen(interval)+11);	
00001c  4831              LDR      r0,|L116.228|
00001e  f7fffffe          BL       strlen
000022  4604              MOV      r4,r0
000024  340b              ADDS     r4,r4,#0xb
000026  4622              MOV      r2,r4
000028  492f              LDR      r1,|L116.232|
00002a  482d              LDR      r0,|L116.224|
00002c  f7fffffe          BL       __2sprintf
;;;1202   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000030  200a              MOVS     r0,#0xa
000032  4b27              LDR      r3,|L116.208|
000034  4a27              LDR      r2,|L116.212|
000036  492d              LDR      r1,|L116.236|
000038  9000              STR      r0,[sp,#0]
00003a  4829              LDR      r0,|L116.224|
00003c  f7fffffe          BL       send_GSM
;;;1203   	//clear();
;;;1204   
;;;1205   	
;;;1206   	send_modem("|INTERVAL|");
000040  482b              LDR      r0,|L116.240|
000042  f7fffffe          BL       send_modem
;;;1207   		for(k=0;k<strlen(interval);k++)
000046  2000              MOVS     r0,#0
000048  492a              LDR      r1,|L116.244|
00004a  6008              STR      r0,[r1,#0]  ; k
00004c  e00b              B        |L116.102|
                  |L116.78|
;;;1208   		{
;;;1209   			uart_putchar(UART1_BASE_PTR, interval[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004e  4825              LDR      r0,|L116.228|
000050  4a28              LDR      r2,|L116.244|
000052  6812              LDR      r2,[r2,#0]  ; k
000054  5c81              LDRB     r1,[r0,r2]
000056  4828              LDR      r0,|L116.248|
000058  f7fffffe          BL       uart_putchar
00005c  4825              LDR      r0,|L116.244|
00005e  6800              LDR      r0,[r0,#0]            ;1207  ; k
000060  1c40              ADDS     r0,r0,#1              ;1207
000062  4924              LDR      r1,|L116.244|
000064  6008              STR      r0,[r1,#0]            ;1207  ; k
                  |L116.102|
000066  481f              LDR      r0,|L116.228|
000068  f7fffffe          BL       strlen
00006c  4921              LDR      r1,|L116.244|
00006e  6809              LDR      r1,[r1,#0]            ;1207  ; k
000070  4288              CMP      r0,r1                 ;1207
000072  d8ec              BHI      |L116.78|
;;;1210   		}	
;;;1211   			send_modem("|");			
000074  4821              LDR      r0,|L116.252|
000076  f7fffffe          BL       send_modem
;;;1212    
;;;1213   									k2=0;									//string array counter for uart 1
00007a  2000              MOVS     r0,#0
00007c  4920              LDR      r1,|L116.256|
00007e  6008              STR      r0,[r1,#0]  ; k2
;;;1214   									time=19999;						//timer counts to wait for characters in uart 1 									
000080  4820              LDR      r0,|L116.260|
000082  4921              LDR      r1,|L116.264|
000084  6008              STR      r0,[r1,#0]  ; time
;;;1215   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000086  e010              B        |L116.170|
                  |L116.136|
;;;1216   									{
;;;1217   									time--;
000088  481f              LDR      r0,|L116.264|
00008a  6800              LDR      r0,[r0,#0]  ; time
00008c  1e40              SUBS     r0,r0,#1
00008e  491e              LDR      r1,|L116.264|
000090  6008              STR      r0,[r1,#0]  ; time
;;;1218   									if(time % 2000 == 0)
000092  217d              MOVS     r1,#0x7d
000094  0109              LSLS     r1,r1,#4
000096  481c              LDR      r0,|L116.264|
000098  6800              LDR      r0,[r0,#0]  ; time
00009a  f7fffffe          BL       __aeabi_idivmod
00009e  2900              CMP      r1,#0
0000a0  d103              BNE      |L116.170|
;;;1219   										{
;;;1220   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1221   											uart_putchar(UART1_BASE_PTR,'\n');
0000a2  210a              MOVS     r1,#0xa
0000a4  4814              LDR      r0,|L116.248|
0000a6  f7fffffe          BL       uart_putchar
                  |L116.170|
0000aa  4918              LDR      r1,|L116.268|
0000ac  4818              LDR      r0,|L116.272|
0000ae  f7fffffe          BL       strstr
0000b2  2800              CMP      r0,#0                 ;1215
0000b4  d109              BNE      |L116.202|
0000b6  4814              LDR      r0,|L116.264|
0000b8  6800              LDR      r0,[r0,#0]            ;1215  ; time
0000ba  2801              CMP      r0,#1                 ;1215
0000bc  db05              BLT      |L116.202|
0000be  4915              LDR      r1,|L116.276|
0000c0  4813              LDR      r0,|L116.272|
0000c2  f7fffffe          BL       strstr
0000c6  2800              CMP      r0,#0                 ;1215
0000c8  d0de              BEQ      |L116.136|
                  |L116.202|
;;;1222   										}
;;;1223   	
;;;1224   									}
;;;1225   
;;;1226   
;;;1227   	
;;;1228   }	
0000ca  bd38              POP      {r3-r5,pc}
;;;1229   	
                          ENDP

                  |L116.204|
                          DCD      tmeout
                  |L116.208|
                          DCD      ||.conststring||+0x10
                  |L116.212|
                          DCD      ||.conststring||+0x18
                  |L116.216|
                          DCD      ||.conststring||+0x2c
                  |L116.220|
                          DCD      ||.conststring||+0x150
                  |L116.224|
                          DCD      at_
                  |L116.228|
                          DCD      interval
                  |L116.232|
                          DCD      ||.conststring||+0x170
                  |L116.236|
                          DCD      ||.conststring||+0x20
                  |L116.240|
                          DCD      ||.conststring||+0x198
                  |L116.244|
                          DCD      k
                  |L116.248|
                          DCD      0x4006b000
                  |L116.252|
                          DCD      ||.conststring||+0xdc
                  |L116.256|
                          DCD      ||k2||
                  |L116.260|
                          DCD      0x00004e1f
                  |L116.264|
                          DCD      time
                  |L116.268|
                          DCD      ||.conststring||+0x70
                  |L116.272|
                          DCD      uart_string_gsm
                  |L116.276|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.saveapn||, COMGROUP=saveapn, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  saveapn PROC
;;;1147   
;;;1148   __inline void saveapn(){
000000  b538              PUSH     {r3-r5,lr}
;;;1149   	
;;;1150   send_GSM("\nAT+FSCREATE=C:\\APN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L123.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L123.208|
000008  4a32              LDR      r2,|L123.212|
00000a  4933              LDR      r1,|L123.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L123.220|
000010  f7fffffe          BL       send_GSM
;;;1151   
;;;1152   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L123.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1153   	sprintf(at_,"\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",strlen(apn)+3);	
00001c  4831              LDR      r0,|L123.228|
00001e  f7fffffe          BL       strlen
000022  1cc4              ADDS     r4,r0,#3
000024  4622              MOV      r2,r4
000026  4930              LDR      r1,|L123.232|
000028  482d              LDR      r0,|L123.224|
00002a  f7fffffe          BL       __2sprintf
;;;1154   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
00002e  200a              MOVS     r0,#0xa
000030  4b27              LDR      r3,|L123.208|
000032  4a28              LDR      r2,|L123.212|
000034  492d              LDR      r1,|L123.236|
000036  9000              STR      r0,[sp,#0]
000038  4829              LDR      r0,|L123.224|
00003a  f7fffffe          BL       send_GSM
;;;1155   	//clear();
;;;1156   
;;;1157   	
;;;1158   	send_modem("|");
00003e  482c              LDR      r0,|L123.240|
000040  f7fffffe          BL       send_modem
;;;1159   		for(k=0;k<strlen(apn);k++)
000044  2000              MOVS     r0,#0
000046  492b              LDR      r1,|L123.244|
000048  6008              STR      r0,[r1,#0]  ; k
00004a  e00b              B        |L123.100|
                  |L123.76|
;;;1160   		{
;;;1161   			uart_putchar(UART1_BASE_PTR, apn[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004c  4825              LDR      r0,|L123.228|
00004e  4a29              LDR      r2,|L123.244|
000050  6812              LDR      r2,[r2,#0]  ; k
000052  5c81              LDRB     r1,[r0,r2]
000054  4828              LDR      r0,|L123.248|
000056  f7fffffe          BL       uart_putchar
00005a  4826              LDR      r0,|L123.244|
00005c  6800              LDR      r0,[r0,#0]            ;1159  ; k
00005e  1c40              ADDS     r0,r0,#1              ;1159
000060  4924              LDR      r1,|L123.244|
000062  6008              STR      r0,[r1,#0]            ;1159  ; k
                  |L123.100|
000064  481f              LDR      r0,|L123.228|
000066  f7fffffe          BL       strlen
00006a  4922              LDR      r1,|L123.244|
00006c  6809              LDR      r1,[r1,#0]            ;1159  ; k
00006e  4288              CMP      r0,r1                 ;1159
000070  d8ec              BHI      |L123.76|
;;;1162   		}	
;;;1163   			send_modem("|");			
000072  481f              LDR      r0,|L123.240|
000074  f7fffffe          BL       send_modem
;;;1164    
;;;1165   									k2=0;									//string array counter for uart 1
000078  2000              MOVS     r0,#0
00007a  4920              LDR      r1,|L123.252|
00007c  6008              STR      r0,[r1,#0]  ; k2
;;;1166   									time=19999;						//timer counts to wait for characters in uart 1 									
00007e  4820              LDR      r0,|L123.256|
000080  4920              LDR      r1,|L123.260|
000082  6008              STR      r0,[r1,#0]  ; time
;;;1167   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000084  e010              B        |L123.168|
                  |L123.134|
;;;1168   									{
;;;1169   									time--;
000086  481f              LDR      r0,|L123.260|
000088  6800              LDR      r0,[r0,#0]  ; time
00008a  1e40              SUBS     r0,r0,#1
00008c  491d              LDR      r1,|L123.260|
00008e  6008              STR      r0,[r1,#0]  ; time
;;;1170   									if(time % 2000 == 0)
000090  217d              MOVS     r1,#0x7d
000092  0109              LSLS     r1,r1,#4
000094  481b              LDR      r0,|L123.260|
000096  6800              LDR      r0,[r0,#0]  ; time
000098  f7fffffe          BL       __aeabi_idivmod
00009c  2900              CMP      r1,#0
00009e  d103              BNE      |L123.168|
;;;1171   										{
;;;1172   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1173   											uart_putchar(UART1_BASE_PTR,'\n');
0000a0  210a              MOVS     r1,#0xa
0000a2  4815              LDR      r0,|L123.248|
0000a4  f7fffffe          BL       uart_putchar
                  |L123.168|
0000a8  4917              LDR      r1,|L123.264|
0000aa  4818              LDR      r0,|L123.268|
0000ac  f7fffffe          BL       strstr
0000b0  2800              CMP      r0,#0                 ;1167
0000b2  d109              BNE      |L123.200|
0000b4  4813              LDR      r0,|L123.260|
0000b6  6800              LDR      r0,[r0,#0]            ;1167  ; time
0000b8  2801              CMP      r0,#1                 ;1167
0000ba  db05              BLT      |L123.200|
0000bc  4914              LDR      r1,|L123.272|
0000be  4813              LDR      r0,|L123.268|
0000c0  f7fffffe          BL       strstr
0000c4  2800              CMP      r0,#0                 ;1167
0000c6  d0de              BEQ      |L123.134|
                  |L123.200|
;;;1174   										}
;;;1175   	
;;;1176   									}
;;;1177   
;;;1178   
;;;1179   	
;;;1180   }
0000c8  bd38              POP      {r3-r5,pc}
;;;1181   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L123.204|
                          DCD      tmeout
                  |L123.208|
                          DCD      ||.conststring||+0x10
                  |L123.212|
                          DCD      ||.conststring||+0x18
                  |L123.216|
                          DCD      ||.conststring||+0x2c
                  |L123.220|
                          DCD      ||.conststring||+0x1a4
                  |L123.224|
                          DCD      at_
                  |L123.228|
                          DCD      apn
                  |L123.232|
                          DCD      ||.conststring||+0x1c0
                  |L123.236|
                          DCD      ||.conststring||+0x20
                  |L123.240|
                          DCD      ||.conststring||+0xdc
                  |L123.244|
                          DCD      k
                  |L123.248|
                          DCD      0x4006b000
                  |L123.252|
                          DCD      ||k2||
                  |L123.256|
                          DCD      0x00004e1f
                  |L123.260|
                          DCD      time
                  |L123.264|
                          DCD      ||.conststring||+0x70
                  |L123.268|
                          DCD      uart_string_gsm
                  |L123.272|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.msg_sim800||, COMGROUP=msg_sim800, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  msg_sim800 PROC
;;;1389   
;;;1390   __inline void msg_sim800() 
000000  b51f              PUSH     {r0-r4,lr}
;;;1391   {
;;;1392   		cond1=0;
000002  2000              MOVS     r0,#0
000004  49f7              LDR      r1,|L130.996|
000006  6008              STR      r0,[r1,#0]  ; cond1
;;;1393   		cond2=0;
000008  49f7              LDR      r1,|L130.1000|
00000a  6008              STR      r0,[r1,#0]  ; cond2
;;;1394   		cond3=0;
00000c  49f7              LDR      r1,|L130.1004|
00000e  6008              STR      r0,[r1,#0]  ; cond3
;;;1395   		cond4=0;
000010  49f7              LDR      r1,|L130.1008|
000012  6008              STR      r0,[r1,#0]  ; cond4
;;;1396   		cond5=0;
000014  49f7              LDR      r1,|L130.1012|
000016  6008              STR      r0,[r1,#0]  ; cond5
;;;1397   		cond6=0;
000018  49f7              LDR      r1,|L130.1016|
00001a  6008              STR      r0,[r1,#0]  ; cond6
;;;1398   		cond7=0;
00001c  49f7              LDR      r1,|L130.1020|
00001e  6008              STR      r0,[r1,#0]  ; cond7
;;;1399   		cond8=0;
000020  49f7              LDR      r1,|L130.1024|
000022  6008              STR      r0,[r1,#0]  ; cond8
;;;1400   		cond9=0;
000024  49f7              LDR      r1,|L130.1028|
000026  6008              STR      r0,[r1,#0]  ; cond9
;;;1401   		cond10=0;
000028  49f7              LDR      r1,|L130.1032|
00002a  6008              STR      r0,[r1,#0]  ; cond10
;;;1402   		cond11=0;
00002c  49f7              LDR      r1,|L130.1036|
00002e  6008              STR      r0,[r1,#0]  ; cond11
;;;1403   		cond12=0;
000030  49f7              LDR      r1,|L130.1040|
000032  6008              STR      r0,[r1,#0]  ; cond12
;;;1404   		cond13=0;
000034  49f7              LDR      r1,|L130.1044|
000036  6008              STR      r0,[r1,#0]  ; cond13
;;;1405   		cond14=0;
000038  49f7              LDR      r1,|L130.1048|
00003a  6008              STR      r0,[r1,#0]  ; cond14
;;;1406   		cond15=0;		
00003c  49f7              LDR      r1,|L130.1052|
00003e  6008              STR      r0,[r1,#0]  ; cond15
;;;1407   	
;;;1408   //ringflag=1;	
;;;1409   	if(ringflag==1 )
000040  48f7              LDR      r0,|L130.1056|
000042  7800              LDRB     r0,[r0,#0]  ; ringflag
000044  2801              CMP      r0,#1
000046  d17d              BNE      |L130.324|
;;;1410   	{
;;;1411   		sleep_flag=0;
000048  2000              MOVS     r0,#0
00004a  49f6              LDR      r1,|L130.1060|
00004c  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1412       DTR_OFF;		// not sleep	
00004e  2080              MOVS     r0,#0x80
000050  49f5              LDR      r1,|L130.1064|
000052  6088              STR      r0,[r1,#8]
;;;1413   
;;;1414   delay(1000);
000054  207d              MOVS     r0,#0x7d
000056  00c0              LSLS     r0,r0,#3
000058  f7fffffe          BL       delay
;;;1415   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
00005c  48f3              LDR      r0,|L130.1068|
00005e  6800              LDR      r0,[r0,#0]  ; tmeout
000060  4bf3              LDR      r3,|L130.1072|
000062  4af4              LDR      r2,|L130.1076|
000064  49f4              LDR      r1,|L130.1080|
000066  9000              STR      r0,[sp,#0]
000068  48f4              LDR      r0,|L130.1084|
00006a  f7fffffe          BL       send_GSM
;;;1416   		
;;;1417   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);  		
00006e  48ef              LDR      r0,|L130.1068|
000070  6800              LDR      r0,[r0,#0]  ; tmeout
000072  4bef              LDR      r3,|L130.1072|
000074  4aef              LDR      r2,|L130.1076|
000076  49f0              LDR      r1,|L130.1080|
000078  9000              STR      r0,[sp,#0]
00007a  48f1              LDR      r0,|L130.1088|
00007c  f7fffffe          BL       send_GSM
;;;1418   delay(1000);		
000080  207d              MOVS     r0,#0x7d
000082  00c0              LSLS     r0,r0,#3
000084  f7fffffe          BL       delay
;;;1419   		
;;;1420   
;;;1421   	send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000088  48e8              LDR      r0,|L130.1068|
00008a  6800              LDR      r0,[r0,#0]  ; tmeout
00008c  4be8              LDR      r3,|L130.1072|
00008e  4ae9              LDR      r2,|L130.1076|
000090  49e9              LDR      r1,|L130.1080|
000092  9000              STR      r0,[sp,#0]
000094  48eb              LDR      r0,|L130.1092|
000096  f7fffffe          BL       send_GSM
;;;1422   	send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
00009a  48e4              LDR      r0,|L130.1068|
00009c  6800              LDR      r0,[r0,#0]  ; tmeout
00009e  4be4              LDR      r3,|L130.1072|
0000a0  4ae4              LDR      r2,|L130.1076|
0000a2  49e5              LDR      r1,|L130.1080|
0000a4  9000              STR      r0,[sp,#0]
0000a6  48e8              LDR      r0,|L130.1096|
0000a8  f7fffffe          BL       send_GSM
;;;1423   
;;;1424   					send_GSM("\r\nAT+CMGR=1\r\n", "OK\r\n", "ERROR" , "OK\r\n",tmeout);	
0000ac  48df              LDR      r0,|L130.1068|
0000ae  6800              LDR      r0,[r0,#0]  ; tmeout
0000b0  4be1              LDR      r3,|L130.1080|
0000b2  4ae6              LDR      r2,|L130.1100|
0000b4  4619              MOV      r1,r3
0000b6  9000              STR      r0,[sp,#0]
0000b8  48e5              LDR      r0,|L130.1104|
0000ba  f7fffffe          BL       send_GSM
;;;1425   					clear();
0000be  f7fffffe          BL       clear
;;;1426   					memset(num2,0,30);
0000c2  211e              MOVS     r1,#0x1e
0000c4  48e3              LDR      r0,|L130.1108|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1427   					parse_gsm(uart_string_gsm, 3, 4, num2);
0000ca  4be2              LDR      r3,|L130.1108|
0000cc  2204              MOVS     r2,#4
0000ce  2103              MOVS     r1,#3
0000d0  48e1              LDR      r0,|L130.1112|
0000d2  f7fffffe          BL       parse_gsm
;;;1428   			
;;;1429   						cond1=strstr(uart_string_gsm, "OWNER");	
0000d6  49e1              LDR      r1,|L130.1116|
0000d8  48df              LDR      r0,|L130.1112|
0000da  f7fffffe          BL       strstr
0000de  49c1              LDR      r1,|L130.996|
0000e0  6008              STR      r0,[r1,#0]  ; cond1
;;;1430   						cond2=strstr(uart_string_gsm, "LOCATION");
0000e2  49df              LDR      r1,|L130.1120|
0000e4  48dc              LDR      r0,|L130.1112|
0000e6  f7fffffe          BL       strstr
0000ea  49bf              LDR      r1,|L130.1000|
0000ec  6008              STR      r0,[r1,#0]  ; cond2
;;;1431   						cond3=strstr(uart_string_gsm, "INTERVAL");
0000ee  49dd              LDR      r1,|L130.1124|
0000f0  48d9              LDR      r0,|L130.1112|
0000f2  f7fffffe          BL       strstr
0000f6  49bd              LDR      r1,|L130.1004|
0000f8  6008              STR      r0,[r1,#0]  ; cond3
;;;1432   						cond4=strstr(uart_string_gsm, "START");
0000fa  49db              LDR      r1,|L130.1128|
0000fc  48d6              LDR      r0,|L130.1112|
0000fe  f7fffffe          BL       strstr
000102  49bb              LDR      r1,|L130.1008|
000104  6008              STR      r0,[r1,#0]  ; cond4
;;;1433   						cond5=strstr(uart_string_gsm, "OWNER1");
000106  49d9              LDR      r1,|L130.1132|
000108  48d3              LDR      r0,|L130.1112|
00010a  f7fffffe          BL       strstr
00010e  49b9              LDR      r1,|L130.1012|
000110  6008              STR      r0,[r1,#0]  ; cond5
;;;1434   						cond6=strstr(uart_string_gsm, "OWNER2");
000112  49d7              LDR      r1,|L130.1136|
000114  48d0              LDR      r0,|L130.1112|
000116  f7fffffe          BL       strstr
00011a  49b7              LDR      r1,|L130.1016|
00011c  6008              STR      r0,[r1,#0]  ; cond6
;;;1435   						cond7=strstr(uart_string_gsm, "OWNER3");
00011e  49d5              LDR      r1,|L130.1140|
000120  48cd              LDR      r0,|L130.1112|
000122  f7fffffe          BL       strstr
000126  49b5              LDR      r1,|L130.1020|
000128  6008              STR      r0,[r1,#0]  ; cond7
;;;1436   						cond8=strstr(uart_string_gsm, "DEBUG");
00012a  49d3              LDR      r1,|L130.1144|
00012c  48ca              LDR      r0,|L130.1112|
00012e  f7fffffe          BL       strstr
000132  49b3              LDR      r1,|L130.1024|
000134  6008              STR      r0,[r1,#0]  ; cond8
;;;1437   						cond9=strstr(uart_string_gsm, "RESET");
000136  49d1              LDR      r1,|L130.1148|
000138  48c7              LDR      r0,|L130.1112|
00013a  f7fffffe          BL       strstr
00013e  49b1              LDR      r1,|L130.1028|
000140  6008              STR      r0,[r1,#0]  ; cond9
;;;1438   						cond10=strstr(uart_string_gsm, "IP");
000142  e000              B        |L130.326|
                  |L130.324|
000144  e3ce              B        |L130.2276|
                  |L130.326|
000146  49ce              LDR      r1,|L130.1152|
000148  48c3              LDR      r0,|L130.1112|
00014a  f7fffffe          BL       strstr
00014e  49ae              LDR      r1,|L130.1032|
000150  6008              STR      r0,[r1,#0]  ; cond10
;;;1439   						cond11=strstr(uart_string_gsm, "SUOWNER");	
000152  49cc              LDR      r1,|L130.1156|
000154  48c0              LDR      r0,|L130.1112|
000156  f7fffffe          BL       strstr
00015a  49ac              LDR      r1,|L130.1036|
00015c  6008              STR      r0,[r1,#0]  ; cond11
;;;1440   						cond12=strstr(uart_string_gsm, "SOWNER");	
00015e  49ca              LDR      r1,|L130.1160|
000160  48bd              LDR      r0,|L130.1112|
000162  f7fffffe          BL       strstr
000166  49aa              LDR      r1,|L130.1040|
000168  6008              STR      r0,[r1,#0]  ; cond12
;;;1441   						cond13=strstr(uart_string_gsm, "IGNITION ON");	
00016a  49c8              LDR      r1,|L130.1164|
00016c  48ba              LDR      r0,|L130.1112|
00016e  f7fffffe          BL       strstr
000172  49a8              LDR      r1,|L130.1044|
000174  6008              STR      r0,[r1,#0]  ; cond13
;;;1442   						cond14=strstr(uart_string_gsm, "IGNITION OFF");	
000176  49c6              LDR      r1,|L130.1168|
000178  48b7              LDR      r0,|L130.1112|
00017a  f7fffffe          BL       strstr
00017e  49a6              LDR      r1,|L130.1048|
000180  6008              STR      r0,[r1,#0]  ; cond14
;;;1443   						cond15=strstr(uart_string_gsm, "IGNSTAT");
000182  49c4              LDR      r1,|L130.1172|
000184  48b4              LDR      r0,|L130.1112|
000186  f7fffffe          BL       strstr
00018a  49a4              LDR      r1,|L130.1052|
00018c  6008              STR      r0,[r1,#0]  ; cond15
;;;1444   
;;;1445   							if(send_SOS==1){
00018e  48c2              LDR      r0,|L130.1176|
000190  6800              LDR      r0,[r0,#0]  ; send_SOS
000192  2801              CMP      r0,#1
000194  d147              BNE      |L130.550|
;;;1446   										
;;;1447   
;;;1448   								
;;;1449   								memset(data2,0,300);
000196  21ff              MOVS     r1,#0xff
000198  312d              ADDS     r1,r1,#0x2d
00019a  48c0              LDR      r0,|L130.1180|
00019c  f7fffffe          BL       __aeabi_memclr
;;;1450   								sprintf(data2,"\nThere is an Emergency please help:\nCoordinates:%sN,%sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,lati,'%',longi);	
0001a0  48bf              LDR      r0,|L130.1184|
0001a2  2125              MOVS     r1,#0x25
0001a4  4abf              LDR      r2,|L130.1188|
0001a6  4603              MOV      r3,r0
0001a8  9200              STR      r2,[sp,#0]
0001aa  9101              STR      r1,[sp,#4]
0001ac  9002              STR      r0,[sp,#8]
0001ae  49be              LDR      r1,|L130.1192|
0001b0  48ba              LDR      r0,|L130.1180|
0001b2  f7fffffe          BL       __2sprintf
;;;1451   								memset(num2,0,30);
0001b6  211e              MOVS     r1,#0x1e
0001b8  48a6              LDR      r0,|L130.1108|
0001ba  f7fffffe          BL       __aeabi_memclr
;;;1452   								send_GSM("\r\nAT+CPBR=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001be  489b              LDR      r0,|L130.1068|
0001c0  6800              LDR      r0,[r0,#0]  ; tmeout
0001c2  4b9b              LDR      r3,|L130.1072|
0001c4  4a9b              LDR      r2,|L130.1076|
0001c6  499c              LDR      r1,|L130.1080|
0001c8  9000              STR      r0,[sp,#0]
0001ca  48b8              LDR      r0,|L130.1196|
0001cc  f7fffffe          BL       send_GSM
;;;1453   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
0001d0  48a0              LDR      r0,|L130.1108|
0001d2  2122              MOVS     r1,#0x22
0001d4  460b              MOV      r3,r1
0001d6  2202              MOVS     r2,#2
0001d8  9100              STR      r1,[sp,#0]
0001da  9001              STR      r0,[sp,#4]
0001dc  2101              MOVS     r1,#1
0001de  489e              LDR      r0,|L130.1112|
0001e0  f7fffffe          BL       parse_g
;;;1454   								send_message(data2);
0001e4  48ad              LDR      r0,|L130.1180|
0001e6  f7fffffe          BL       send_message
;;;1455   								memset(num2,0,30);
0001ea  211e              MOVS     r1,#0x1e
0001ec  4899              LDR      r0,|L130.1108|
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1456   								send_GSM("\r\nAT+CPBR=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001f2  488e              LDR      r0,|L130.1068|
0001f4  6800              LDR      r0,[r0,#0]  ; tmeout
0001f6  4b8e              LDR      r3,|L130.1072|
0001f8  4a8e              LDR      r2,|L130.1076|
0001fa  498f              LDR      r1,|L130.1080|
0001fc  9000              STR      r0,[sp,#0]
0001fe  48ac              LDR      r0,|L130.1200|
000200  f7fffffe          BL       send_GSM
;;;1457   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
000204  4893              LDR      r0,|L130.1108|
000206  2122              MOVS     r1,#0x22
000208  460b              MOV      r3,r1
00020a  2202              MOVS     r2,#2
00020c  9100              STR      r1,[sp,#0]
00020e  9001              STR      r0,[sp,#4]
000210  2101              MOVS     r1,#1
000212  4891              LDR      r0,|L130.1112|
000214  f7fffffe          BL       parse_g
;;;1458   								send_message(data2);								
000218  48a0              LDR      r0,|L130.1180|
00021a  f7fffffe          BL       send_message
;;;1459   								send_SOS=0;
00021e  2000              MOVS     r0,#0
000220  499d              LDR      r1,|L130.1176|
000222  6008              STR      r0,[r1,#0]  ; send_SOS
                  |L130.548|
000224  e35d              B        |L130.2274|
                  |L130.550|
;;;1460   							}
;;;1461   							else if(cond1 && cond2)
000226  486f              LDR      r0,|L130.996|
000228  6800              LDR      r0,[r0,#0]  ; cond1
00022a  2800              CMP      r0,#0
00022c  d022              BEQ      |L130.628|
00022e  486e              LDR      r0,|L130.1000|
000230  6800              LDR      r0,[r0,#0]  ; cond2
000232  2800              CMP      r0,#0
000234  d01e              BEQ      |L130.628|
;;;1462   							{
;;;1463   								memset(data2,0,300);
000236  21ff              MOVS     r1,#0xff
000238  312d              ADDS     r1,r1,#0x2d
00023a  4898              LDR      r0,|L130.1180|
00023c  f7fffffe          BL       __aeabi_memclr
;;;1464   								sprintf(data2,"\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);	
000240  4897              LDR      r0,|L130.1184|
000242  2125              MOVS     r1,#0x25
000244  4a97              LDR      r2,|L130.1188|
000246  4b9b              LDR      r3,|L130.1204|
000248  9300              STR      r3,[sp,#0]
00024a  9201              STR      r2,[sp,#4]
00024c  9102              STR      r1,[sp,#8]
00024e  9003              STR      r0,[sp,#0xc]
000250  4603              MOV      r3,r0
000252  4999              LDR      r1,|L130.1208|
000254  4891              LDR      r0,|L130.1180|
000256  f7fffffe          BL       __2sprintf
;;;1465   
;;;1466   								{send_message(data2);}
00025a  4890              LDR      r0,|L130.1180|
00025c  f7fffffe          BL       send_message
;;;1467   
;;;1468   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000260  4872              LDR      r0,|L130.1068|
000262  6800              LDR      r0,[r0,#0]  ; tmeout
000264  4b72              LDR      r3,|L130.1072|
000266  4a73              LDR      r2,|L130.1076|
000268  4973              LDR      r1,|L130.1080|
00026a  9000              STR      r0,[sp,#0]
00026c  4893              LDR      r0,|L130.1212|
00026e  f7fffffe          BL       send_GSM
000272  e7d7              B        |L130.548|
                  |L130.628|
;;;1469   								
;;;1470   								
;;;1471   							}
;;;1472   	
;;;1473   							else if(cond1 && cond3)
000274  485b              LDR      r0,|L130.996|
000276  6800              LDR      r0,[r0,#0]  ; cond1
000278  2800              CMP      r0,#0
00027a  d026              BEQ      |L130.714|
00027c  485b              LDR      r0,|L130.1004|
00027e  6800              LDR      r0,[r0,#0]  ; cond3
000280  2800              CMP      r0,#0
000282  d022              BEQ      |L130.714|
;;;1474   							{
;;;1475   								memset(at_,0,100);
000284  2164              MOVS     r1,#0x64
000286  488e              LDR      r0,|L130.1216|
000288  f7fffffe          BL       __aeabi_memclr
;;;1476   								memset(interval,0,5);
00028c  2105              MOVS     r1,#5
00028e  488d              LDR      r0,|L130.1220|
000290  f7fffffe          BL       __aeabi_memclr
;;;1477   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', interval);		
000294  488b              LDR      r0,|L130.1220|
000296  210d              MOVS     r1,#0xd
000298  2320              MOVS     r3,#0x20
00029a  2205              MOVS     r2,#5
00029c  9100              STR      r1,[sp,#0]
00029e  9001              STR      r0,[sp,#4]
0002a0  2103              MOVS     r1,#3
0002a2  486d              LDR      r0,|L130.1112|
0002a4  f7fffffe          BL       parse_g
;;;1478   								int_erval=myAtoi(interval);
0002a8  4886              LDR      r0,|L130.1220|
0002aa  f7fffffe          BL       myAtoi
0002ae  4986              LDR      r1,|L130.1224|
0002b0  6008              STR      r0,[r1,#0]  ; int_erval
;;;1479   								save_interval();			
0002b2  f7fffffe          BL       save_interval
;;;1480   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0002b6  485d              LDR      r0,|L130.1068|
0002b8  6800              LDR      r0,[r0,#0]  ; tmeout
0002ba  4b5d              LDR      r3,|L130.1072|
0002bc  4a5d              LDR      r2,|L130.1076|
0002be  495e              LDR      r1,|L130.1080|
0002c0  9000              STR      r0,[sp,#0]
0002c2  487e              LDR      r0,|L130.1212|
0002c4  f7fffffe          BL       send_GSM
0002c8  e7ac              B        |L130.548|
                  |L130.714|
;;;1481   
;;;1482   								
;;;1483   							}				
;;;1484   
;;;1485   			
;;;1486   							else if(cond12 && cond4)
0002ca  4851              LDR      r0,|L130.1040|
0002cc  6800              LDR      r0,[r0,#0]  ; cond12
0002ce  2800              CMP      r0,#0
0002d0  d07a              BEQ      |L130.968|
0002d2  4847              LDR      r0,|L130.1008|
0002d4  6800              LDR      r0,[r0,#0]  ; cond4
0002d6  2800              CMP      r0,#0
0002d8  d076              BEQ      |L130.968|
;;;1487   							{
;;;1488   								memset( apn,0,25);
0002da  2119              MOVS     r1,#0x19
0002dc  487b              LDR      r0,|L130.1228|
0002de  f7fffffe          BL       __aeabi_memclr
;;;1489   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', apn);			
0002e2  487a              LDR      r0,|L130.1228|
0002e4  210d              MOVS     r1,#0xd
0002e6  2320              MOVS     r3,#0x20
0002e8  2205              MOVS     r2,#5
0002ea  9100              STR      r1,[sp,#0]
0002ec  9001              STR      r0,[sp,#4]
0002ee  2103              MOVS     r1,#3
0002f0  4859              LDR      r0,|L130.1112|
0002f2  f7fffffe          BL       parse_g
;;;1490   								saveapn();								
0002f6  f7fffffe          BL       saveapn
;;;1491   								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
0002fa  484c              LDR      r0,|L130.1068|
0002fc  6800              LDR      r0,[r0,#0]  ; tmeout
0002fe  4b4c              LDR      r3,|L130.1072|
000300  4a4c              LDR      r2,|L130.1076|
000302  4973              LDR      r1,|L130.1232|
000304  9000              STR      r0,[sp,#0]
000306  4873              LDR      r0,|L130.1236|
000308  f7fffffe          BL       send_GSM
;;;1492   								send_GSM("\nAT+FSCREATE=D:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00030c  4847              LDR      r0,|L130.1068|
00030e  6800              LDR      r0,[r0,#0]  ; tmeout
000310  4b47              LDR      r3,|L130.1072|
000312  4a48              LDR      r2,|L130.1076|
000314  496e              LDR      r1,|L130.1232|
000316  9000              STR      r0,[sp,#0]
000318  486f              LDR      r0,|L130.1240|
00031a  f7fffffe          BL       send_GSM
;;;1493   								send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00031e  4843              LDR      r0,|L130.1068|
000320  6800              LDR      r0,[r0,#0]  ; tmeout
000322  4b43              LDR      r3,|L130.1072|
000324  4a43              LDR      r2,|L130.1076|
000326  496a              LDR      r1,|L130.1232|
000328  9000              STR      r0,[sp,#0]
00032a  486c              LDR      r0,|L130.1244|
00032c  f7fffffe          BL       send_GSM
;;;1494   								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000330  483e              LDR      r0,|L130.1068|
000332  6800              LDR      r0,[r0,#0]  ; tmeout
000334  4b3e              LDR      r3,|L130.1072|
000336  4a3f              LDR      r2,|L130.1076|
000338  4965              LDR      r1,|L130.1232|
00033a  9000              STR      r0,[sp,#0]
00033c  4868              LDR      r0,|L130.1248|
00033e  f7fffffe          BL       send_GSM
;;;1495   								send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000342  483a              LDR      r0,|L130.1068|
000344  6800              LDR      r0,[r0,#0]  ; tmeout
000346  4b3a              LDR      r3,|L130.1072|
000348  4a3a              LDR      r2,|L130.1076|
00034a  4961              LDR      r1,|L130.1232|
00034c  9000              STR      r0,[sp,#0]
00034e  4865              LDR      r0,|L130.1252|
000350  f7fffffe          BL       send_GSM
;;;1496   
;;;1497   								memset(ip,0,100);
000354  2164              MOVS     r1,#0x64
000356  4864              LDR      r0,|L130.1256|
000358  f7fffffe          BL       __aeabi_memclr
;;;1498   								memset(port,0,10);
00035c  210a              MOVS     r1,#0xa
00035e  4863              LDR      r0,|L130.1260|
000360  f7fffffe          BL       __aeabi_memclr
;;;1499   								strcat (ip, "rudra.jellyfishtele.com");
000364  4962              LDR      r1,|L130.1264|
000366  4860              LDR      r0,|L130.1256|
000368  f7fffffe          BL       strcat
;;;1500   								strcat (port, "5555");		
00036c  4961              LDR      r1,|L130.1268|
00036e  485f              LDR      r0,|L130.1260|
000370  f7fffffe          BL       strcat
;;;1501   								memcpy (interval, "5", 1);										
000374  4853              LDR      r0,|L130.1220|
000376  4960              LDR      r1,|L130.1272|
000378  7809              LDRB     r1,[r1,#0]
00037a  7001              STRB     r1,[r0,#0]
;;;1502   								save_ip_port();
00037c  f7fffffe          BL       save_ip_port
;;;1503   								ignstaton();
000380  f7fffffe          BL       ignstaton
;;;1504   
;;;1505   								save_interval();	
000384  f7fffffe          BL       save_interval
;;;1506   								int_erval=myAtoi(interval);		
000388  484e              LDR      r0,|L130.1220|
00038a  f7fffffe          BL       myAtoi
00038e  494e              LDR      r1,|L130.1224|
000390  6008              STR      r0,[r1,#0]  ; int_erval
;;;1507   								savecursord();
000392  f7fffffe          BL       savecursord
;;;1508   
;;;1509   			//					printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
;;;1510   								
;;;1511   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000396  4825              LDR      r0,|L130.1068|
000398  6800              LDR      r0,[r0,#0]  ; tmeout
00039a  4b25              LDR      r3,|L130.1072|
00039c  4a2b              LDR      r2,|L130.1100|
00039e  494c              LDR      r1,|L130.1232|
0003a0  9000              STR      r0,[sp,#0]
0003a2  4856              LDR      r0,|L130.1276|
0003a4  f7fffffe          BL       send_GSM
;;;1512   
;;;1513   								
;;;1514   								
;;;1515   		RESET_OFF;delay(10);
0003a8  2020              MOVS     r0,#0x20
0003aa  491f              LDR      r1,|L130.1064|
0003ac  3940              SUBS     r1,r1,#0x40
0003ae  6088              STR      r0,[r1,#8]
0003b0  200a              MOVS     r0,#0xa
0003b2  f7fffffe          BL       delay
;;;1516   		RESET_ON;delay(10);		
0003b6  2020              MOVS     r0,#0x20
0003b8  491b              LDR      r1,|L130.1064|
0003ba  3940              SUBS     r1,r1,#0x40
0003bc  6048              STR      r0,[r1,#4]
0003be  200a              MOVS     r0,#0xa
0003c0  f7fffffe          BL       delay
0003c4  e72e              B        |L130.548|
0003c6  e7ff              B        |L130.968|
                  |L130.968|
;;;1517   
;;;1518   								
;;;1519   								
;;;1520   							}
;;;1521   	
;;;1522   						else if(cond8)
0003c8  480d              LDR      r0,|L130.1024|
0003ca  6800              LDR      r0,[r0,#0]  ; cond8
0003cc  2800              CMP      r0,#0
0003ce  d007              BEQ      |L130.992|
;;;1523   							{
;;;1524   								
;;;1525   									memset(at_,0,100);
0003d0  2164              MOVS     r1,#0x64
0003d2  483b              LDR      r0,|L130.1216|
0003d4  f7fffffe          BL       __aeabi_memclr
;;;1526   									for(k=0;k<450;k++)
0003d8  2000              MOVS     r0,#0
0003da  4949              LDR      r1,|L130.1280|
0003dc  6008              STR      r0,[r1,#0]  ; k
0003de  e0e1              B        |L130.1444|
                  |L130.992|
0003e0  e109              B        |L130.1526|
0003e2  0000              DCW      0x0000
                  |L130.996|
                          DCD      cond1
                  |L130.1000|
                          DCD      cond2
                  |L130.1004|
                          DCD      cond3
                  |L130.1008|
                          DCD      cond4
                  |L130.1012|
                          DCD      cond5
                  |L130.1016|
                          DCD      cond6
                  |L130.1020|
                          DCD      cond7
                  |L130.1024|
                          DCD      cond8
                  |L130.1028|
                          DCD      cond9
                  |L130.1032|
                          DCD      cond10
                  |L130.1036|
                          DCD      cond11
                  |L130.1040|
                          DCD      cond12
                  |L130.1044|
                          DCD      cond13
                  |L130.1048|
                          DCD      cond14
                  |L130.1052|
                          DCD      cond15
                  |L130.1056|
                          DCD      ringflag
                  |L130.1060|
                          DCD      sleep_flag
                  |L130.1064|
                          DCD      0x400ff0c0
                  |L130.1068|
                          DCD      tmeout
                  |L130.1072|
                          DCD      ||.conststring||+0x10
                  |L130.1076|
                          DCD      ||.conststring||+0x18
                  |L130.1080|
                          DCD      ||.conststring||+0x70
                  |L130.1084|
                          DCD      ||.conststring||+0x1e4
                  |L130.1088|
                          DCD      ||.conststring||+0x1ec
                  |L130.1092|
                          DCD      ||.conststring||+0x1f8
                  |L130.1096|
                          DCD      ||.conststring||+0x208
                  |L130.1100|
                          DCD      ||.conststring||+0xe0
                  |L130.1104|
                          DCD      ||.conststring||+0x218
                  |L130.1108|
                          DCD      num2
                  |L130.1112|
                          DCD      uart_string_gsm
                  |L130.1116|
                          DCD      ||.conststring||+0x228
                  |L130.1120|
                          DCD      ||.conststring||+0x230
                  |L130.1124|
                          DCD      ||.conststring||+0x23c
                  |L130.1128|
                          DCD      ||.conststring||+0x248
                  |L130.1132|
                          DCD      ||.conststring||+0x250
                  |L130.1136|
                          DCD      ||.conststring||+0x258
                  |L130.1140|
                          DCD      ||.conststring||+0x260
                  |L130.1144|
                          DCD      ||.conststring||+0x268
                  |L130.1148|
                          DCD      ||.conststring||+0x270
                  |L130.1152|
                          DCD      ||.conststring||+0x278
                  |L130.1156|
                          DCD      ||.conststring||+0x27c
                  |L130.1160|
                          DCD      ||.conststring||+0x284
                  |L130.1164|
                          DCD      ||.conststring||+0x28c
                  |L130.1168|
                          DCD      ||.conststring||+0x298
                  |L130.1172|
                          DCD      ||.conststring||+0x2a8
                  |L130.1176|
                          DCD      send_SOS
                  |L130.1180|
                          DCD      data2
                  |L130.1184|
                          DCD      longi
                  |L130.1188|
                          DCD      lati
                  |L130.1192|
                          DCD      ||.conststring||+0x2b0
                  |L130.1196|
                          DCD      ||.conststring||+0x324
                  |L130.1200|
                          DCD      ||.conststring||+0x334
                  |L130.1204|
                          DCD      velocity
                  |L130.1208|
                          DCD      ||.conststring||+0x344
                  |L130.1212|
                          DCD      ||.conststring||+0x3ac
                  |L130.1216|
                          DCD      at_
                  |L130.1220|
                          DCD      interval
                  |L130.1224|
                          DCD      int_erval
                  |L130.1228|
                          DCD      apn
                  |L130.1232|
                          DCD      ||.conststring||+0x2c
                  |L130.1236|
                          DCD      ||.conststring||+0x84
                  |L130.1240|
                          DCD      ||.conststring||+0x3bc
                  |L130.1244|
                          DCD      ||.conststring||+0x3d8
                  |L130.1248|
                          DCD      ||.conststring||+0x150
                  |L130.1252|
                          DCD      ||.conststring||+0x30
                  |L130.1256|
                          DCD      ||ip||
                  |L130.1260|
                          DCD      port
                  |L130.1264|
                          DCD      ||.conststring||+0x3f4
                  |L130.1268|
                          DCD      ||.conststring||+0x40c
                  |L130.1272|
                          DCD      ||.conststring||+0x414
                  |L130.1276|
                          DCD      ||.conststring||+0x418
                  |L130.1280|
                          DCD      k
                  |L130.1284|
;;;1527   									{
;;;1528   										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
000504  48f8              LDR      r0,|L130.2280|
000506  6800              LDR      r0,[r0,#0]  ; k
000508  1e40              SUBS     r0,r0,#1
00050a  49f8              LDR      r1,|L130.2284|
00050c  5c08              LDRB     r0,[r1,r0]
00050e  2820              CMP      r0,#0x20
000510  d143              BNE      |L130.1434|
000512  48f5              LDR      r0,|L130.2280|
000514  6800              LDR      r0,[r0,#0]  ; k
000516  1e80              SUBS     r0,r0,#2
000518  5c08              LDRB     r0,[r1,r0]
00051a  2847              CMP      r0,#0x47
00051c  d13d              BNE      |L130.1434|
00051e  48f2              LDR      r0,|L130.2280|
000520  6800              LDR      r0,[r0,#0]  ; k
000522  1ec0              SUBS     r0,r0,#3
000524  5c08              LDRB     r0,[r1,r0]
000526  2855              CMP      r0,#0x55
000528  d137              BNE      |L130.1434|
;;;1529   										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
00052a  48ef              LDR      r0,|L130.2280|
00052c  6800              LDR      r0,[r0,#0]  ; k
00052e  1f00              SUBS     r0,r0,#4
000530  5c08              LDRB     r0,[r1,r0]
000532  2842              CMP      r0,#0x42
000534  d131              BNE      |L130.1434|
000536  48ec              LDR      r0,|L130.2280|
000538  6800              LDR      r0,[r0,#0]  ; k
00053a  1f40              SUBS     r0,r0,#5
00053c  5c08              LDRB     r0,[r1,r0]
00053e  2845              CMP      r0,#0x45
000540  d12b              BNE      |L130.1434|
000542  48e9              LDR      r0,|L130.2280|
000544  6800              LDR      r0,[r0,#0]  ; k
000546  1f80              SUBS     r0,r0,#6
000548  5c08              LDRB     r0,[r1,r0]
00054a  2844              CMP      r0,#0x44
00054c  d125              BNE      |L130.1434|
;;;1530   										{
;;;1531   											for(i=0;i<100;i++)
00054e  2000              MOVS     r0,#0
000550  49e7              LDR      r1,|L130.2288|
000552  6008              STR      r0,[r1,#0]  ; i
000554  e011              B        |L130.1402|
                  |L130.1366|
;;;1532   											{
;;;1533   												at_[i]=uart_string_gsm[k];
000556  48e5              LDR      r0,|L130.2284|
000558  49e3              LDR      r1,|L130.2280|
00055a  6809              LDR      r1,[r1,#0]  ; k
00055c  5c40              LDRB     r0,[r0,r1]
00055e  49e5              LDR      r1,|L130.2292|
000560  4ae3              LDR      r2,|L130.2288|
000562  6812              LDR      r2,[r2,#0]  ; i
000564  5488              STRB     r0,[r1,r2]
;;;1534   												k++;
000566  48e0              LDR      r0,|L130.2280|
000568  6800              LDR      r0,[r0,#0]  ; k
00056a  1c40              ADDS     r0,r0,#1
00056c  49de              LDR      r1,|L130.2280|
00056e  6008              STR      r0,[r1,#0]  ; k
000570  48df              LDR      r0,|L130.2288|
000572  6800              LDR      r0,[r0,#0]            ;1531  ; i
000574  1c40              ADDS     r0,r0,#1              ;1531
000576  49de              LDR      r1,|L130.2288|
000578  6008              STR      r0,[r1,#0]            ;1531  ; i
                  |L130.1402|
00057a  48dd              LDR      r0,|L130.2288|
00057c  6800              LDR      r0,[r0,#0]            ;1531  ; i
00057e  2864              CMP      r0,#0x64              ;1531
000580  dbe9              BLT      |L130.1366|
;;;1535   											}	
;;;1536   										at_[i+1]='\r';
000582  210d              MOVS     r1,#0xd
000584  4adb              LDR      r2,|L130.2292|
000586  48da              LDR      r0,|L130.2288|
000588  6800              LDR      r0,[r0,#0]  ; i
00058a  1c40              ADDS     r0,r0,#1
00058c  5411              STRB     r1,[r2,r0]
;;;1537   										at_[i+2]='\n';	
00058e  220a              MOVS     r2,#0xa
000590  49d8              LDR      r1,|L130.2292|
000592  48d7              LDR      r0,|L130.2288|
000594  6800              LDR      r0,[r0,#0]  ; i
000596  1c80              ADDS     r0,r0,#2
000598  540a              STRB     r2,[r1,r0]
                  |L130.1434|
00059a  48d3              LDR      r0,|L130.2280|
00059c  6800              LDR      r0,[r0,#0]            ;1526  ; k
00059e  1c40              ADDS     r0,r0,#1              ;1526
0005a0  49d1              LDR      r1,|L130.2280|
0005a2  6008              STR      r0,[r1,#0]            ;1526  ; k
                  |L130.1444|
0005a4  48d0              LDR      r0,|L130.2280|
0005a6  6800              LDR      r0,[r0,#0]            ;1526  ; k
0005a8  21ff              MOVS     r1,#0xff              ;1526
0005aa  31c3              ADDS     r1,r1,#0xc3           ;1526
0005ac  4288              CMP      r0,r1                 ;1526
0005ae  dba9              BLT      |L130.1284|
;;;1538   										}
;;;1539   										else{}
;;;1540   									}
;;;1541   									
;;;1542   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0005b0  48d1              LDR      r0,|L130.2296|
0005b2  6800              LDR      r0,[r0,#0]  ; tmeout
0005b4  4bd1              LDR      r3,|L130.2300|
0005b6  4ad2              LDR      r2,|L130.2304|
0005b8  49d2              LDR      r1,|L130.2308|
0005ba  9000              STR      r0,[sp,#0]
0005bc  48d2              LDR      r0,|L130.2312|
0005be  f7fffffe          BL       send_GSM
;;;1543   									  send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);		
0005c2  48cd              LDR      r0,|L130.2296|
0005c4  6800              LDR      r0,[r0,#0]  ; tmeout
0005c6  4bcd              LDR      r3,|L130.2300|
0005c8  4acd              LDR      r2,|L130.2304|
0005ca  49ce              LDR      r1,|L130.2308|
0005cc  9000              STR      r0,[sp,#0]
0005ce  48c9              LDR      r0,|L130.2292|
0005d0  f7fffffe          BL       send_GSM
;;;1544   										memset(data2,0,strlen(data2));
0005d4  48cd              LDR      r0,|L130.2316|
0005d6  f7fffffe          BL       strlen
0005da  4604              MOV      r4,r0
0005dc  4621              MOV      r1,r4
0005de  48cb              LDR      r0,|L130.2316|
0005e0  f7fffffe          BL       __aeabi_memclr
;;;1545   										sprintf(data2,"%s",uart_string_gsm);	
0005e4  4ac1              LDR      r2,|L130.2284|
0005e6  49ca              LDR      r1,|L130.2320|
0005e8  48c8              LDR      r0,|L130.2316|
0005ea  f7fffffe          BL       __2sprintf
;;;1546   										send_message(data2);
0005ee  48c7              LDR      r0,|L130.2316|
0005f0  f7fffffe          BL       send_message
0005f4  e3f1              B        |L130.3546|
                  |L130.1526|
;;;1547   										
;;;1548   									
;;;1549   								
;;;1550   							}
;;;1551   							
;;;1552   							else if( cond1 && cond9)
0005f6  48c7              LDR      r0,|L130.2324|
0005f8  6800              LDR      r0,[r0,#0]  ; cond1
0005fa  2800              CMP      r0,#0
                  |L130.1532|
0005fc  d07e              BEQ      |L130.1788|
0005fe  48c6              LDR      r0,|L130.2328|
000600  6800              LDR      r0,[r0,#0]  ; cond9
000602  2800              CMP      r0,#0
000604  d0fa              BEQ      |L130.1532|
;;;1553   							{
;;;1554   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000606  48bc              LDR      r0,|L130.2296|
000608  6800              LDR      r0,[r0,#0]  ; tmeout
00060a  4bbc              LDR      r3,|L130.2300|
00060c  4abc              LDR      r2,|L130.2304|
00060e  49bd              LDR      r1,|L130.2308|
000610  9000              STR      r0,[sp,#0]
000612  48bd              LDR      r0,|L130.2312|
000614  f7fffffe          BL       send_GSM
;;;1555   
;;;1556   strcat(data,"\n");	
000618  49c0              LDR      r1,|L130.2332|
00061a  48c1              LDR      r0,|L130.2336|
00061c  f7fffffe          BL       strcat
;;;1557   GPS_COLLECT();
000620  f7fffffe          BL       GPS_COLLECT
;;;1558   strcat(data,"CH\n");	
000624  49bf              LDR      r1,|L130.2340|
000626  48be              LDR      r0,|L130.2336|
000628  f7fffffe          BL       strcat
;;;1559   
;;;1560   								
;;;1561   
;;;1562   	delay(100);
00062c  2064              MOVS     r0,#0x64
00062e  f7fffffe          BL       delay
;;;1563   		clear();//memset(uart_string_gsm,0,5000);
000632  f7fffffe          BL       clear
;;;1564   	
;;;1565   	memset(at_,0,100);
000636  2164              MOVS     r1,#0x64
000638  48ae              LDR      r0,|L130.2292|
00063a  f7fffffe          BL       __aeabi_memclr
;;;1566   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00063e  48b8              LDR      r0,|L130.2336|
000640  f7fffffe          BL       strlen
000644  1c44              ADDS     r4,r0,#1
000646  4623              MOV      r3,r4
000648  4ab7              LDR      r2,|L130.2344|
00064a  49b8              LDR      r1,|L130.2348|
00064c  48a9              LDR      r0,|L130.2292|
00064e  f7fffffe          BL       __2sprintf
;;;1567   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000652  2005              MOVS     r0,#5
000654  4bb6              LDR      r3,|L130.2352|
000656  4aaa              LDR      r2,|L130.2304|
000658  49b6              LDR      r1,|L130.2356|
00065a  9000              STR      r0,[sp,#0]
00065c  48a5              LDR      r0,|L130.2292|
00065e  f7fffffe          BL       send_SD
;;;1568   if(strstr(uart_string_gsm,"ERROR")){
000662  49b3              LDR      r1,|L130.2352|
000664  48a1              LDR      r0,|L130.2284|
000666  f7fffffe          BL       strstr
00066a  2800              CMP      r0,#0
00066c  d004              BEQ      |L130.1656|
;;;1569   	drive[0]='C';drive[1]=':';
00066e  2043              MOVS     r0,#0x43
000670  49ad              LDR      r1,|L130.2344|
000672  7008              STRB     r0,[r1,#0]
000674  203a              MOVS     r0,#0x3a
000676  7048              STRB     r0,[r1,#1]
                  |L130.1656|
;;;1570   }	
;;;1571   clear();	
000678  f7fffffe          BL       clear
;;;1572   									k2=0;									//string array counter for uart 1
00067c  2000              MOVS     r0,#0
00067e  49ae              LDR      r1,|L130.2360|
000680  6008              STR      r0,[r1,#0]  ; k2
;;;1573   									tout=0;	
000682  49ae              LDR      r1,|L130.2364|
000684  6008              STR      r0,[r1,#0]  ; tout
;;;1574   		for(k=0;k<strlen(data);k++)
000686  4998              LDR      r1,|L130.2280|
000688  6008              STR      r0,[r1,#0]  ; k
00068a  e00b              B        |L130.1700|
                  |L130.1676|
;;;1575   		{
;;;1576   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00068c  48a4              LDR      r0,|L130.2336|
00068e  4a96              LDR      r2,|L130.2280|
000690  6812              LDR      r2,[r2,#0]  ; k
000692  5c81              LDRB     r1,[r0,r2]
000694  48aa              LDR      r0,|L130.2368|
000696  f7fffffe          BL       uart_putchar
00069a  4893              LDR      r0,|L130.2280|
00069c  6800              LDR      r0,[r0,#0]            ;1574  ; k
00069e  1c40              ADDS     r0,r0,#1              ;1574
0006a0  4991              LDR      r1,|L130.2280|
0006a2  6008              STR      r0,[r1,#0]            ;1574  ; k
                  |L130.1700|
0006a4  489e              LDR      r0,|L130.2336|
0006a6  f7fffffe          BL       strlen
0006aa  498f              LDR      r1,|L130.2280|
0006ac  6809              LDR      r1,[r1,#0]            ;1574  ; k
0006ae  4288              CMP      r0,r1                 ;1574
0006b0  d8ec              BHI      |L130.1676|
;;;1577   		}	
;;;1578   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0006b2  210a              MOVS     r1,#0xa
0006b4  48a2              LDR      r0,|L130.2368|
0006b6  f7fffffe          BL       uart_putchar
0006ba  210a              MOVS     r1,#0xa
0006bc  48a0              LDR      r0,|L130.2368|
0006be  f7fffffe          BL       uart_putchar
0006c2  210a              MOVS     r1,#0xa
0006c4  489e              LDR      r0,|L130.2368|
0006c6  f7fffffe          BL       uart_putchar
0006ca  210a              MOVS     r1,#0xa
0006cc  489c              LDR      r0,|L130.2368|
0006ce  f7fffffe          BL       uart_putchar
0006d2  210a              MOVS     r1,#0xa
0006d4  489a              LDR      r0,|L130.2368|
0006d6  f7fffffe          BL       uart_putchar
0006da  210a              MOVS     r1,#0xa
0006dc  4898              LDR      r0,|L130.2368|
0006de  f7fffffe          BL       uart_putchar
0006e2  210a              MOVS     r1,#0xa
0006e4  4896              LDR      r0,|L130.2368|
0006e6  f7fffffe          BL       uart_putchar
0006ea  210a              MOVS     r1,#0xa
0006ec  4894              LDR      r0,|L130.2368|
0006ee  f7fffffe          BL       uart_putchar
0006f2  210a              MOVS     r1,#0xa
0006f4  4892              LDR      r0,|L130.2368|
0006f6  f7fffffe          BL       uart_putchar
0006fa  e000              B        |L130.1790|
                  |L130.1788|
0006fc  e12a              B        |L130.2388|
                  |L130.1790|
0006fe  210a              MOVS     r1,#0xa
000700  488f              LDR      r0,|L130.2368|
000702  f7fffffe          BL       uart_putchar
000706  210a              MOVS     r1,#0xa
000708  488d              LDR      r0,|L130.2368|
00070a  f7fffffe          BL       uart_putchar
00070e  210a              MOVS     r1,#0xa
000710  488b              LDR      r0,|L130.2368|
000712  f7fffffe          BL       uart_putchar
000716  210a              MOVS     r1,#0xa
000718  4889              LDR      r0,|L130.2368|
00071a  f7fffffe          BL       uart_putchar
00071e  210a              MOVS     r1,#0xa
000720  4887              LDR      r0,|L130.2368|
000722  f7fffffe          BL       uart_putchar
000726  210a              MOVS     r1,#0xa
000728  4885              LDR      r0,|L130.2368|
00072a  f7fffffe          BL       uart_putchar
00072e  210a              MOVS     r1,#0xa
000730  4883              LDR      r0,|L130.2368|
000732  f7fffffe          BL       uart_putchar
000736  210a              MOVS     r1,#0xa
000738  4881              LDR      r0,|L130.2368|
00073a  f7fffffe          BL       uart_putchar
00073e  210a              MOVS     r1,#0xa
000740  487f              LDR      r0,|L130.2368|
000742  f7fffffe          BL       uart_putchar
000746  210a              MOVS     r1,#0xa
000748  487d              LDR      r0,|L130.2368|
00074a  f7fffffe          BL       uart_putchar
00074e  210a              MOVS     r1,#0xa
000750  487b              LDR      r0,|L130.2368|
000752  f7fffffe          BL       uart_putchar
000756  210a              MOVS     r1,#0xa
000758  4879              LDR      r0,|L130.2368|
00075a  f7fffffe          BL       uart_putchar
00075e  210a              MOVS     r1,#0xa
000760  4877              LDR      r0,|L130.2368|
000762  f7fffffe          BL       uart_putchar
000766  210a              MOVS     r1,#0xa
000768  4875              LDR      r0,|L130.2368|
00076a  f7fffffe          BL       uart_putchar
00076e  210a              MOVS     r1,#0xa
000770  4873              LDR      r0,|L130.2368|
000772  f7fffffe          BL       uart_putchar
000776  210a              MOVS     r1,#0xa
000778  4871              LDR      r0,|L130.2368|
00077a  f7fffffe          BL       uart_putchar
00077e  210a              MOVS     r1,#0xa
000780  486f              LDR      r0,|L130.2368|
000782  f7fffffe          BL       uart_putchar
000786  210a              MOVS     r1,#0xa
000788  486d              LDR      r0,|L130.2368|
00078a  f7fffffe          BL       uart_putchar
00078e  210a              MOVS     r1,#0xa
000790  486b              LDR      r0,|L130.2368|
000792  f7fffffe          BL       uart_putchar
000796  210a              MOVS     r1,#0xa
000798  4869              LDR      r0,|L130.2368|
00079a  f7fffffe          BL       uart_putchar
00079e  210a              MOVS     r1,#0xa
0007a0  4867              LDR      r0,|L130.2368|
0007a2  f7fffffe          BL       uart_putchar
0007a6  210a              MOVS     r1,#0xa
0007a8  4865              LDR      r0,|L130.2368|
0007aa  f7fffffe          BL       uart_putchar
0007ae  210a              MOVS     r1,#0xa
0007b0  4863              LDR      r0,|L130.2368|
0007b2  f7fffffe          BL       uart_putchar
0007b6  210a              MOVS     r1,#0xa
0007b8  4861              LDR      r0,|L130.2368|
0007ba  f7fffffe          BL       uart_putchar
0007be  210a              MOVS     r1,#0xa
0007c0  485f              LDR      r0,|L130.2368|
0007c2  f7fffffe          BL       uart_putchar
0007c6  210a              MOVS     r1,#0xa
0007c8  485d              LDR      r0,|L130.2368|
0007ca  f7fffffe          BL       uart_putchar
0007ce  210a              MOVS     r1,#0xa
0007d0  485b              LDR      r0,|L130.2368|
0007d2  f7fffffe          BL       uart_putchar
0007d6  210a              MOVS     r1,#0xa
0007d8  4859              LDR      r0,|L130.2368|
0007da  f7fffffe          BL       uart_putchar
0007de  210a              MOVS     r1,#0xa
0007e0  4857              LDR      r0,|L130.2368|
0007e2  f7fffffe          BL       uart_putchar
0007e6  210a              MOVS     r1,#0xa
0007e8  4855              LDR      r0,|L130.2368|
0007ea  f7fffffe          BL       uart_putchar
0007ee  210a              MOVS     r1,#0xa
0007f0  4853              LDR      r0,|L130.2368|
0007f2  f7fffffe          BL       uart_putchar
0007f6  210a              MOVS     r1,#0xa
0007f8  4851              LDR      r0,|L130.2368|
0007fa  f7fffffe          BL       uart_putchar
0007fe  210a              MOVS     r1,#0xa
000800  484f              LDR      r0,|L130.2368|
000802  f7fffffe          BL       uart_putchar
000806  210a              MOVS     r1,#0xa
000808  484d              LDR      r0,|L130.2368|
00080a  f7fffffe          BL       uart_putchar
00080e  210a              MOVS     r1,#0xa
000810  484b              LDR      r0,|L130.2368|
000812  f7fffffe          BL       uart_putchar
000816  210a              MOVS     r1,#0xa
000818  4849              LDR      r0,|L130.2368|
00081a  f7fffffe          BL       uart_putchar
00081e  210a              MOVS     r1,#0xa
000820  4847              LDR      r0,|L130.2368|
000822  f7fffffe          BL       uart_putchar
000826  210a              MOVS     r1,#0xa
000828  4845              LDR      r0,|L130.2368|
00082a  f7fffffe          BL       uart_putchar
00082e  210a              MOVS     r1,#0xa
000830  4843              LDR      r0,|L130.2368|
000832  f7fffffe          BL       uart_putchar
000836  210a              MOVS     r1,#0xa
000838  4841              LDR      r0,|L130.2368|
00083a  f7fffffe          BL       uart_putchar
00083e  210a              MOVS     r1,#0xa
000840  483f              LDR      r0,|L130.2368|
000842  f7fffffe          BL       uart_putchar
000846  210a              MOVS     r1,#0xa
000848  483d              LDR      r0,|L130.2368|
00084a  f7fffffe          BL       uart_putchar
00084e  210a              MOVS     r1,#0xa
000850  483b              LDR      r0,|L130.2368|
000852  f7fffffe          BL       uart_putchar
000856  210a              MOVS     r1,#0xa
000858  4839              LDR      r0,|L130.2368|
00085a  f7fffffe          BL       uart_putchar
00085e  210a              MOVS     r1,#0xa
000860  4837              LDR      r0,|L130.2368|
000862  f7fffffe          BL       uart_putchar
000866  210a              MOVS     r1,#0xa
000868  4835              LDR      r0,|L130.2368|
00086a  f7fffffe          BL       uart_putchar
00086e  210a              MOVS     r1,#0xa
000870  4833              LDR      r0,|L130.2368|
000872  f7fffffe          BL       uart_putchar
000876  210a              MOVS     r1,#0xa
000878  4831              LDR      r0,|L130.2368|
00087a  f7fffffe          BL       uart_putchar
;;;1579   									//memset(data,0,1000);
;;;1580   														//timer counts to wait for characters in uart 1 									
;;;1581   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00087e  bf00              NOP      
                  |L130.2176|
000880  4920              LDR      r1,|L130.2308|
000882  481a              LDR      r0,|L130.2284|
000884  f7fffffe          BL       strstr
000888  2800              CMP      r0,#0
00088a  d109              BNE      |L130.2208|
00088c  4928              LDR      r1,|L130.2352|
00088e  4817              LDR      r0,|L130.2284|
000890  f7fffffe          BL       strstr
000894  2800              CMP      r0,#0
000896  d103              BNE      |L130.2208|
000898  4828              LDR      r0,|L130.2364|
00089a  6800              LDR      r0,[r0,#0]  ; tout
00089c  2805              CMP      r0,#5
00089e  ddef              BLE      |L130.2176|
                  |L130.2208|
;;;1582   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1583   									}
;;;1584   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0008a0  f7fffffe          BL       clear
;;;1585   									//clear();
;;;1586   									memset(data,0,strlen(data));
0008a4  481e              LDR      r0,|L130.2336|
0008a6  f7fffffe          BL       strlen
0008aa  4604              MOV      r4,r0
0008ac  4621              MOV      r1,r4
0008ae  481c              LDR      r0,|L130.2336|
0008b0  f7fffffe          BL       __aeabi_memclr
;;;1587   									clear();
0008b4  f7fffffe          BL       clear
;;;1588   
;;;1589   																
;;;1590   								
;;;1591   								
;;;1592   //log_it();								
;;;1593   		RESET_OFF;delay(10);
0008b8  2020              MOVS     r0,#0x20
0008ba  4922              LDR      r1,|L130.2372|
0008bc  6088              STR      r0,[r1,#8]
0008be  200a              MOVS     r0,#0xa
0008c0  f7fffffe          BL       delay
;;;1594   		RESET_ON;delay(10);
0008c4  2020              MOVS     r0,#0x20
0008c6  491f              LDR      r1,|L130.2372|
0008c8  6048              STR      r0,[r1,#4]
0008ca  200a              MOVS     r0,#0xa
0008cc  f7fffffe          BL       delay
;;;1595   								send_GSM("\n\n AT+CFUN=1,1\r\n","Ready","ERROR\r\n","NOT INSERTED:",tmeout);			
0008d0  4809              LDR      r0,|L130.2296|
0008d2  6800              LDR      r0,[r0,#0]  ; tmeout
0008d4  4b1c              LDR      r3,|L130.2376|
0008d6  4a0a              LDR      r2,|L130.2304|
0008d8  491c              LDR      r1,|L130.2380|
0008da  9000              STR      r0,[sp,#0]
0008dc  481c              LDR      r0,|L130.2384|
0008de  f7fffffe          BL       send_GSM
                  |L130.2274|
0008e2  e27a              B        |L130.3546|
                  |L130.2276|
0008e4  e28b              B        |L130.3582|
0008e6  0000              DCW      0x0000
                  |L130.2280|
                          DCD      k
                  |L130.2284|
                          DCD      uart_string_gsm
                  |L130.2288|
                          DCD      i
                  |L130.2292|
                          DCD      at_
                  |L130.2296|
                          DCD      tmeout
                  |L130.2300|
                          DCD      ||.conststring||+0x10
                  |L130.2304|
                          DCD      ||.conststring||+0x18
                  |L130.2308|
                          DCD      ||.conststring||+0x70
                  |L130.2312|
                          DCD      ||.conststring||+0x3ac
                  |L130.2316|
                          DCD      data2
                  |L130.2320|
                          DCD      ||.conststring||+0x42c
                  |L130.2324|
                          DCD      cond1
                  |L130.2328|
                          DCD      cond9
                  |L130.2332|
                          DCD      ||.conststring||+0x430
                  |L130.2336|
                          DCD      data
                  |L130.2340|
                          DCD      ||.conststring||+0x434
                  |L130.2344|
                          DCD      drive
                  |L130.2348|
                          DCD      ||.conststring||+0x438
                  |L130.2352|
                          DCD      ||.conststring||+0xe0
                  |L130.2356|
                          DCD      ||.conststring||+0x20
                  |L130.2360|
                          DCD      ||k2||
                  |L130.2364|
                          DCD      tout
                  |L130.2368|
                          DCD      0x4006b000
                  |L130.2372|
                          DCD      0x400ff080
                  |L130.2376|
                          DCD      ||.conststring||+0x45c
                  |L130.2380|
                          DCD      ||.conststring||+0x46c
                  |L130.2384|
                          DCD      ||.conststring||+0x474
                  |L130.2388|
;;;1596   							}
;;;1597   							
;;;1598   							else if(cond12 && cond10)
000954  48f7              LDR      r0,|L130.3380|
000956  6800              LDR      r0,[r0,#0]  ; cond12
000958  2800              CMP      r0,#0
00095a  d027              BEQ      |L130.2476|
00095c  48f6              LDR      r0,|L130.3384|
00095e  6800              LDR      r0,[r0,#0]  ; cond10
000960  2800              CMP      r0,#0
000962  d023              BEQ      |L130.2476|
;;;1599   							{
;;;1600   						//		printf("\n\n\n\t%s",uart_string_gsm);
;;;1601   								memset(ip,0,16);
000964  2110              MOVS     r1,#0x10
000966  48f5              LDR      r0,|L130.3388|
000968  f7fffffe          BL       __aeabi_memclr
;;;1602   								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
00096c  48f3              LDR      r0,|L130.3388|
00096e  2120              MOVS     r1,#0x20
000970  460b              MOV      r3,r1
000972  2204              MOVS     r2,#4
000974  9100              STR      r1,[sp,#0]
000976  9001              STR      r0,[sp,#4]
000978  2103              MOVS     r1,#3
00097a  48f1              LDR      r0,|L130.3392|
00097c  f7fffffe          BL       parse_g
;;;1603   								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
000980  48f0              LDR      r0,|L130.3396|
000982  210d              MOVS     r1,#0xd
000984  2320              MOVS     r3,#0x20
000986  2205              MOVS     r2,#5
000988  9100              STR      r1,[sp,#0]
00098a  9001              STR      r0,[sp,#4]
00098c  2106              MOVS     r1,#6
00098e  48ec              LDR      r0,|L130.3392|
000990  f7fffffe          BL       parse_g
;;;1604   			//					printf("\n%s\n",port);
;;;1605   								save_ip_port();
000994  f7fffffe          BL       save_ip_port
;;;1606   							
;;;1607   	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;1608   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000998  48eb              LDR      r0,|L130.3400|
00099a  6800              LDR      r0,[r0,#0]  ; tmeout
00099c  4beb              LDR      r3,|L130.3404|
00099e  4aec              LDR      r2,|L130.3408|
0009a0  49ec              LDR      r1,|L130.3412|
0009a2  9000              STR      r0,[sp,#0]
0009a4  48ec              LDR      r0,|L130.3416|
0009a6  f7fffffe          BL       send_GSM
0009aa  e216              B        |L130.3546|
                  |L130.2476|
;;;1609   
;;;1610   //								while(1);
;;;1611   								
;;;1612   								
;;;1613   							}
;;;1614   
;;;1615   											
;;;1616   							else if(cond1 && cond13)
0009ac  48eb              LDR      r0,|L130.3420|
0009ae  6800              LDR      r0,[r0,#0]  ; cond1
0009b0  2800              CMP      r0,#0
0009b2  d01a              BEQ      |L130.2538|
0009b4  48ea              LDR      r0,|L130.3424|
0009b6  6800              LDR      r0,[r0,#0]  ; cond13
0009b8  2800              CMP      r0,#0
0009ba  d016              BEQ      |L130.2538|
;;;1617   							{
;;;1618   								
;;;1619   								IGNITION_ON;FUEL_ON;
0009bc  2002              MOVS     r0,#2
0009be  49e9              LDR      r1,|L130.3428|
0009c0  6088              STR      r0,[r1,#8]
0009c2  2004              MOVS     r0,#4
0009c4  6088              STR      r0,[r1,#8]
;;;1620   								clear();
0009c6  f7fffffe          BL       clear
;;;1621   								ignstaton();
0009ca  f7fffffe          BL       ignstaton
;;;1622   								delay(1000);
0009ce  207d              MOVS     r0,#0x7d
0009d0  00c0              LSLS     r0,r0,#3
0009d2  f7fffffe          BL       delay
;;;1623   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0009d6  48dc              LDR      r0,|L130.3400|
0009d8  6800              LDR      r0,[r0,#0]  ; tmeout
0009da  4bdc              LDR      r3,|L130.3404|
0009dc  4adc              LDR      r2,|L130.3408|
0009de  49dd              LDR      r1,|L130.3412|
0009e0  9000              STR      r0,[sp,#0]
0009e2  48e1              LDR      r0,|L130.3432|
0009e4  f7fffffe          BL       send_GSM
0009e8  e1f7              B        |L130.3546|
                  |L130.2538|
;;;1624   								
;;;1625   							}
;;;1626   							else if(cond1 && cond14)
0009ea  48dc              LDR      r0,|L130.3420|
0009ec  6800              LDR      r0,[r0,#0]  ; cond1
0009ee  2800              CMP      r0,#0
0009f0  d01a              BEQ      |L130.2600|
0009f2  48de              LDR      r0,|L130.3436|
0009f4  6800              LDR      r0,[r0,#0]  ; cond14
0009f6  2800              CMP      r0,#0
0009f8  d016              BEQ      |L130.2600|
;;;1627   							{
;;;1628   								
;;;1629   								IGNITION_OFF;FUEL_OFF;
0009fa  2002              MOVS     r0,#2
0009fc  49d9              LDR      r1,|L130.3428|
0009fe  6048              STR      r0,[r1,#4]
000a00  2004              MOVS     r0,#4
000a02  6048              STR      r0,[r1,#4]
;;;1630   								clear();
000a04  f7fffffe          BL       clear
;;;1631   								ignstatoff();
000a08  f7fffffe          BL       ignstatoff
;;;1632   								delay(1000);
000a0c  207d              MOVS     r0,#0x7d
000a0e  00c0              LSLS     r0,r0,#3
000a10  f7fffffe          BL       delay
;;;1633   								
;;;1634   								
;;;1635   								
;;;1636   								
;;;1637   								
;;;1638   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a14  48cc              LDR      r0,|L130.3400|
000a16  6800              LDR      r0,[r0,#0]  ; tmeout
000a18  4bcc              LDR      r3,|L130.3404|
000a1a  4acd              LDR      r2,|L130.3408|
000a1c  49cd              LDR      r1,|L130.3412|
000a1e  9000              STR      r0,[sp,#0]
000a20  48d1              LDR      r0,|L130.3432|
000a22  f7fffffe          BL       send_GSM
000a26  e1d8              B        |L130.3546|
                  |L130.2600|
;;;1639   								
;;;1640   							}
;;;1641   							
;;;1642   							else if(cond1 && cond5)
000a28  48cc              LDR      r0,|L130.3420|
000a2a  6800              LDR      r0,[r0,#0]  ; cond1
000a2c  2800              CMP      r0,#0
000a2e  d05d              BEQ      |L130.2796|
000a30  48cf              LDR      r0,|L130.3440|
000a32  6800              LDR      r0,[r0,#0]  ; cond5
000a34  2800              CMP      r0,#0
000a36  d059              BEQ      |L130.2796|
;;;1643   							{
;;;1644   								
;;;1645   
;;;1646   								memset(at_,0,100);
000a38  2164              MOVS     r1,#0x64
000a3a  48ce              LDR      r0,|L130.3444|
000a3c  f7fffffe          BL       __aeabi_memclr
;;;1647   								memset(num_o,0,15);
000a40  210f              MOVS     r1,#0xf
000a42  48cd              LDR      r0,|L130.3448|
000a44  f7fffffe          BL       __aeabi_memclr
;;;1648   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000a48  48cb              LDR      r0,|L130.3448|
000a4a  210d              MOVS     r1,#0xd
000a4c  2320              MOVS     r3,#0x20
000a4e  2205              MOVS     r2,#5
000a50  9100              STR      r1,[sp,#0]
000a52  9001              STR      r0,[sp,#4]
000a54  2103              MOVS     r1,#3
000a56  48ba              LDR      r0,|L130.3392|
000a58  f7fffffe          BL       parse_g
;;;1649   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a5c  48ba              LDR      r0,|L130.3400|
000a5e  6800              LDR      r0,[r0,#0]  ; tmeout
000a60  4bba              LDR      r3,|L130.3404|
000a62  4abb              LDR      r2,|L130.3408|
000a64  49bb              LDR      r1,|L130.3412|
000a66  9000              STR      r0,[sp,#0]
000a68  48c4              LDR      r0,|L130.3452|
000a6a  f7fffffe          BL       send_GSM
;;;1650   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000a6e  2004              MOVS     r0,#4
000a70  4bc3              LDR      r3,|L130.3456|
000a72  4ab7              LDR      r2,|L130.3408|
000a74  49c3              LDR      r1,|L130.3460|
000a76  9000              STR      r0,[sp,#0]
000a78  48c3              LDR      r0,|L130.3464|
000a7a  f7fffffe          BL       send_GSM
;;;1651   
;;;1652   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000a7e  4abe              LDR      r2,|L130.3448|
000a80  49c2              LDR      r1,|L130.3468|
000a82  48bc              LDR      r0,|L130.3444|
000a84  f7fffffe          BL       __2sprintf
;;;1653   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a88  48af              LDR      r0,|L130.3400|
000a8a  6800              LDR      r0,[r0,#0]  ; tmeout
000a8c  4baf              LDR      r3,|L130.3404|
000a8e  4ab0              LDR      r2,|L130.3408|
000a90  49b0              LDR      r1,|L130.3412|
000a92  9000              STR      r0,[sp,#0]
000a94  48b7              LDR      r0,|L130.3444|
000a96  f7fffffe          BL       send_GSM
;;;1654   								
;;;1655   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000a9a  48ab              LDR      r0,|L130.3400|
000a9c  6800              LDR      r0,[r0,#0]  ; tmeout
000a9e  4bab              LDR      r3,|L130.3404|
000aa0  4aab              LDR      r2,|L130.3408|
000aa2  49ac              LDR      r1,|L130.3412|
000aa4  9000              STR      r0,[sp,#0]
000aa6  48ba              LDR      r0,|L130.3472|
000aa8  f7fffffe          BL       send_GSM
;;;1656   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000aac  2004              MOVS     r0,#4
000aae  4bb4              LDR      r3,|L130.3456|
000ab0  4aa7              LDR      r2,|L130.3408|
000ab2  49b4              LDR      r1,|L130.3460|
000ab4  9000              STR      r0,[sp,#0]
000ab6  48b4              LDR      r0,|L130.3464|
000ab8  f7fffffe          BL       send_GSM
;;;1657   
;;;1658   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000abc  4aae              LDR      r2,|L130.3448|
000abe  49b3              LDR      r1,|L130.3468|
000ac0  48ac              LDR      r0,|L130.3444|
000ac2  f7fffffe          BL       __2sprintf
;;;1659   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ac6  48a0              LDR      r0,|L130.3400|
000ac8  6800              LDR      r0,[r0,#0]  ; tmeout
000aca  4ba0              LDR      r3,|L130.3404|
000acc  4aa0              LDR      r2,|L130.3408|
000ace  49a1              LDR      r1,|L130.3412|
000ad0  9000              STR      r0,[sp,#0]
000ad2  48a8              LDR      r0,|L130.3444|
000ad4  f7fffffe          BL       send_GSM
;;;1660   
;;;1661   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000ad8  489b              LDR      r0,|L130.3400|
000ada  6800              LDR      r0,[r0,#0]  ; tmeout
000adc  4b9b              LDR      r3,|L130.3404|
000ade  4a9c              LDR      r2,|L130.3408|
000ae0  499c              LDR      r1,|L130.3412|
000ae2  9000              STR      r0,[sp,#0]
000ae4  489c              LDR      r0,|L130.3416|
000ae6  f7fffffe          BL       send_GSM
000aea  e176              B        |L130.3546|
                  |L130.2796|
;;;1662   															
;;;1663   						
;;;1664   								
;;;1665   							}		
;;;1666   							else if(cond1 && cond6)
000aec  489b              LDR      r0,|L130.3420|
000aee  6800              LDR      r0,[r0,#0]  ; cond1
000af0  2800              CMP      r0,#0
000af2  d05d              BEQ      |L130.2992|
000af4  48a7              LDR      r0,|L130.3476|
000af6  6800              LDR      r0,[r0,#0]  ; cond6
000af8  2800              CMP      r0,#0
000afa  d059              BEQ      |L130.2992|
;;;1667   							{
;;;1668   
;;;1669   								
;;;1670   								memset(at_,0,100);
000afc  2164              MOVS     r1,#0x64
000afe  489d              LDR      r0,|L130.3444|
000b00  f7fffffe          BL       __aeabi_memclr
;;;1671   								memset(num_o,0,15);
000b04  210f              MOVS     r1,#0xf
000b06  489c              LDR      r0,|L130.3448|
000b08  f7fffffe          BL       __aeabi_memclr
;;;1672   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000b0c  489a              LDR      r0,|L130.3448|
000b0e  210d              MOVS     r1,#0xd
000b10  2320              MOVS     r3,#0x20
000b12  2205              MOVS     r2,#5
000b14  9100              STR      r1,[sp,#0]
000b16  9001              STR      r0,[sp,#4]
000b18  2103              MOVS     r1,#3
000b1a  4889              LDR      r0,|L130.3392|
000b1c  f7fffffe          BL       parse_g
;;;1673   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b20  4889              LDR      r0,|L130.3400|
000b22  6800              LDR      r0,[r0,#0]  ; tmeout
000b24  4b89              LDR      r3,|L130.3404|
000b26  4a8a              LDR      r2,|L130.3408|
000b28  498a              LDR      r1,|L130.3412|
000b2a  9000              STR      r0,[sp,#0]
000b2c  4893              LDR      r0,|L130.3452|
000b2e  f7fffffe          BL       send_GSM
;;;1674   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b32  2004              MOVS     r0,#4
000b34  4b92              LDR      r3,|L130.3456|
000b36  4a86              LDR      r2,|L130.3408|
000b38  4992              LDR      r1,|L130.3460|
000b3a  9000              STR      r0,[sp,#0]
000b3c  4896              LDR      r0,|L130.3480|
000b3e  f7fffffe          BL       send_GSM
;;;1675   
;;;1676   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b42  4a8d              LDR      r2,|L130.3448|
000b44  4995              LDR      r1,|L130.3484|
000b46  488b              LDR      r0,|L130.3444|
000b48  f7fffffe          BL       __2sprintf
;;;1677   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b4c  487e              LDR      r0,|L130.3400|
000b4e  6800              LDR      r0,[r0,#0]  ; tmeout
000b50  4b7e              LDR      r3,|L130.3404|
000b52  4a7f              LDR      r2,|L130.3408|
000b54  497f              LDR      r1,|L130.3412|
000b56  9000              STR      r0,[sp,#0]
000b58  4886              LDR      r0,|L130.3444|
000b5a  f7fffffe          BL       send_GSM
;;;1678   								
;;;1679   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b5e  487a              LDR      r0,|L130.3400|
000b60  6800              LDR      r0,[r0,#0]  ; tmeout
000b62  4b7a              LDR      r3,|L130.3404|
000b64  4a7a              LDR      r2,|L130.3408|
000b66  497b              LDR      r1,|L130.3412|
000b68  9000              STR      r0,[sp,#0]
000b6a  4889              LDR      r0,|L130.3472|
000b6c  f7fffffe          BL       send_GSM
;;;1680   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b70  2004              MOVS     r0,#4
000b72  4b83              LDR      r3,|L130.3456|
000b74  4a76              LDR      r2,|L130.3408|
000b76  4983              LDR      r1,|L130.3460|
000b78  9000              STR      r0,[sp,#0]
000b7a  4887              LDR      r0,|L130.3480|
000b7c  f7fffffe          BL       send_GSM
;;;1681   
;;;1682   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000b80  4a7d              LDR      r2,|L130.3448|
000b82  4986              LDR      r1,|L130.3484|
000b84  487b              LDR      r0,|L130.3444|
000b86  f7fffffe          BL       __2sprintf
;;;1683   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);								
000b8a  486f              LDR      r0,|L130.3400|
000b8c  6800              LDR      r0,[r0,#0]  ; tmeout
000b8e  4b6f              LDR      r3,|L130.3404|
000b90  4a6f              LDR      r2,|L130.3408|
000b92  4970              LDR      r1,|L130.3412|
000b94  9000              STR      r0,[sp,#0]
000b96  4877              LDR      r0,|L130.3444|
000b98  f7fffffe          BL       send_GSM
;;;1684   
;;;1685   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000b9c  486a              LDR      r0,|L130.3400|
000b9e  6800              LDR      r0,[r0,#0]  ; tmeout
000ba0  4b6a              LDR      r3,|L130.3404|
000ba2  4a6b              LDR      r2,|L130.3408|
000ba4  496b              LDR      r1,|L130.3412|
000ba6  9000              STR      r0,[sp,#0]
000ba8  486b              LDR      r0,|L130.3416|
000baa  f7fffffe          BL       send_GSM
000bae  e114              B        |L130.3546|
                  |L130.2992|
;;;1686   							}									
;;;1687   							else if(cond1 && cond7)
000bb0  486a              LDR      r0,|L130.3420|
000bb2  6800              LDR      r0,[r0,#0]  ; cond1
000bb4  2800              CMP      r0,#0
000bb6  d05d              BEQ      |L130.3188|
000bb8  4879              LDR      r0,|L130.3488|
000bba  6800              LDR      r0,[r0,#0]  ; cond7
000bbc  2800              CMP      r0,#0
000bbe  d059              BEQ      |L130.3188|
;;;1688   							{
;;;1689   								
;;;1690   								memset(at_,0,100);
000bc0  2164              MOVS     r1,#0x64
000bc2  486c              LDR      r0,|L130.3444|
000bc4  f7fffffe          BL       __aeabi_memclr
;;;1691   								memset(num_o,0,15);
000bc8  210f              MOVS     r1,#0xf
000bca  486b              LDR      r0,|L130.3448|
000bcc  f7fffffe          BL       __aeabi_memclr
;;;1692   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000bd0  4869              LDR      r0,|L130.3448|
000bd2  210d              MOVS     r1,#0xd
000bd4  2320              MOVS     r3,#0x20
000bd6  2205              MOVS     r2,#5
000bd8  9100              STR      r1,[sp,#0]
000bda  9001              STR      r0,[sp,#4]
000bdc  2103              MOVS     r1,#3
000bde  4858              LDR      r0,|L130.3392|
000be0  f7fffffe          BL       parse_g
;;;1693   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000be4  4858              LDR      r0,|L130.3400|
000be6  6800              LDR      r0,[r0,#0]  ; tmeout
000be8  4b58              LDR      r3,|L130.3404|
000bea  4a59              LDR      r2,|L130.3408|
000bec  4959              LDR      r1,|L130.3412|
000bee  9000              STR      r0,[sp,#0]
000bf0  4862              LDR      r0,|L130.3452|
000bf2  f7fffffe          BL       send_GSM
;;;1694   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000bf6  2004              MOVS     r0,#4
000bf8  4b61              LDR      r3,|L130.3456|
000bfa  4a55              LDR      r2,|L130.3408|
000bfc  4961              LDR      r1,|L130.3460|
000bfe  9000              STR      r0,[sp,#0]
000c00  4868              LDR      r0,|L130.3492|
000c02  f7fffffe          BL       send_GSM
;;;1695   
;;;1696   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c06  4a5c              LDR      r2,|L130.3448|
000c08  4967              LDR      r1,|L130.3496|
000c0a  485a              LDR      r0,|L130.3444|
000c0c  f7fffffe          BL       __2sprintf
;;;1697   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c10  484d              LDR      r0,|L130.3400|
000c12  6800              LDR      r0,[r0,#0]  ; tmeout
000c14  4b4d              LDR      r3,|L130.3404|
000c16  4a4e              LDR      r2,|L130.3408|
000c18  494e              LDR      r1,|L130.3412|
000c1a  9000              STR      r0,[sp,#0]
000c1c  4855              LDR      r0,|L130.3444|
000c1e  f7fffffe          BL       send_GSM
;;;1698   								
;;;1699   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c22  4849              LDR      r0,|L130.3400|
000c24  6800              LDR      r0,[r0,#0]  ; tmeout
000c26  4b49              LDR      r3,|L130.3404|
000c28  4a49              LDR      r2,|L130.3408|
000c2a  494a              LDR      r1,|L130.3412|
000c2c  9000              STR      r0,[sp,#0]
000c2e  4858              LDR      r0,|L130.3472|
000c30  f7fffffe          BL       send_GSM
;;;1700   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000c34  2004              MOVS     r0,#4
000c36  4b52              LDR      r3,|L130.3456|
000c38  4a45              LDR      r2,|L130.3408|
000c3a  4952              LDR      r1,|L130.3460|
000c3c  9000              STR      r0,[sp,#0]
000c3e  4859              LDR      r0,|L130.3492|
000c40  f7fffffe          BL       send_GSM
;;;1701   
;;;1702   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c44  4a4c              LDR      r2,|L130.3448|
000c46  4958              LDR      r1,|L130.3496|
000c48  484a              LDR      r0,|L130.3444|
000c4a  f7fffffe          BL       __2sprintf
;;;1703   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c4e  483e              LDR      r0,|L130.3400|
000c50  6800              LDR      r0,[r0,#0]  ; tmeout
000c52  4b3e              LDR      r3,|L130.3404|
000c54  4a3e              LDR      r2,|L130.3408|
000c56  493f              LDR      r1,|L130.3412|
000c58  9000              STR      r0,[sp,#0]
000c5a  4846              LDR      r0,|L130.3444|
000c5c  f7fffffe          BL       send_GSM
;;;1704   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000c60  4839              LDR      r0,|L130.3400|
000c62  6800              LDR      r0,[r0,#0]  ; tmeout
000c64  4b39              LDR      r3,|L130.3404|
000c66  4a3a              LDR      r2,|L130.3408|
000c68  493a              LDR      r1,|L130.3412|
000c6a  9000              STR      r0,[sp,#0]
000c6c  483a              LDR      r0,|L130.3416|
000c6e  f7fffffe          BL       send_GSM
000c72  e0b2              B        |L130.3546|
                  |L130.3188|
;;;1705   							}			
;;;1706   							else if(cond11)
000c74  484d              LDR      r0,|L130.3500|
000c76  6800              LDR      r0,[r0,#0]  ; cond11
000c78  2800              CMP      r0,#0
000c7a  d059              BEQ      |L130.3376|
;;;1707   							{
;;;1708   
;;;1709   								memset(at_,0,100);
000c7c  2164              MOVS     r1,#0x64
000c7e  483d              LDR      r0,|L130.3444|
000c80  f7fffffe          BL       __aeabi_memclr
;;;1710   								memset(num_o,0,15);
000c84  210f              MOVS     r1,#0xf
000c86  483c              LDR      r0,|L130.3448|
000c88  f7fffffe          BL       __aeabi_memclr
;;;1711   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000c8c  483a              LDR      r0,|L130.3448|
000c8e  210d              MOVS     r1,#0xd
000c90  2320              MOVS     r3,#0x20
000c92  2205              MOVS     r2,#5
000c94  9100              STR      r1,[sp,#0]
000c96  9001              STR      r0,[sp,#4]
000c98  2103              MOVS     r1,#3
000c9a  4829              LDR      r0,|L130.3392|
000c9c  f7fffffe          BL       parse_g
;;;1712   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ca0  4829              LDR      r0,|L130.3400|
000ca2  6800              LDR      r0,[r0,#0]  ; tmeout
000ca4  4b29              LDR      r3,|L130.3404|
000ca6  4a2a              LDR      r2,|L130.3408|
000ca8  492a              LDR      r1,|L130.3412|
000caa  9000              STR      r0,[sp,#0]
000cac  4833              LDR      r0,|L130.3452|
000cae  f7fffffe          BL       send_GSM
;;;1713   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cb2  2004              MOVS     r0,#4
000cb4  4b32              LDR      r3,|L130.3456|
000cb6  4a26              LDR      r2,|L130.3408|
000cb8  4932              LDR      r1,|L130.3460|
000cba  9000              STR      r0,[sp,#0]
000cbc  483c              LDR      r0,|L130.3504|
000cbe  f7fffffe          BL       send_GSM
;;;1714   
;;;1715   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000cc2  4a2d              LDR      r2,|L130.3448|
000cc4  493b              LDR      r1,|L130.3508|
000cc6  482b              LDR      r0,|L130.3444|
000cc8  f7fffffe          BL       __2sprintf
;;;1716   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ccc  481e              LDR      r0,|L130.3400|
000cce  6800              LDR      r0,[r0,#0]  ; tmeout
000cd0  4b1e              LDR      r3,|L130.3404|
000cd2  4a1f              LDR      r2,|L130.3408|
000cd4  491f              LDR      r1,|L130.3412|
000cd6  9000              STR      r0,[sp,#0]
000cd8  4826              LDR      r0,|L130.3444|
000cda  f7fffffe          BL       send_GSM
;;;1717   								
;;;1718   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000cde  481a              LDR      r0,|L130.3400|
000ce0  6800              LDR      r0,[r0,#0]  ; tmeout
000ce2  4b1a              LDR      r3,|L130.3404|
000ce4  4a1a              LDR      r2,|L130.3408|
000ce6  491b              LDR      r1,|L130.3412|
000ce8  9000              STR      r0,[sp,#0]
000cea  4829              LDR      r0,|L130.3472|
000cec  f7fffffe          BL       send_GSM
;;;1719   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cf0  2004              MOVS     r0,#4
000cf2  4b23              LDR      r3,|L130.3456|
000cf4  4a16              LDR      r2,|L130.3408|
000cf6  4923              LDR      r1,|L130.3460|
000cf8  9000              STR      r0,[sp,#0]
000cfa  482d              LDR      r0,|L130.3504|
000cfc  f7fffffe          BL       send_GSM
;;;1720   
;;;1721   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000d00  4a1d              LDR      r2,|L130.3448|
000d02  492c              LDR      r1,|L130.3508|
000d04  481b              LDR      r0,|L130.3444|
000d06  f7fffffe          BL       __2sprintf
;;;1722   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d0a  480f              LDR      r0,|L130.3400|
000d0c  6800              LDR      r0,[r0,#0]  ; tmeout
000d0e  4b0f              LDR      r3,|L130.3404|
000d10  4a0f              LDR      r2,|L130.3408|
000d12  4910              LDR      r1,|L130.3412|
000d14  9000              STR      r0,[sp,#0]
000d16  4817              LDR      r0,|L130.3444|
000d18  f7fffffe          BL       send_GSM
;;;1723   								
;;;1724   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000d1c  480a              LDR      r0,|L130.3400|
000d1e  6800              LDR      r0,[r0,#0]  ; tmeout
000d20  4b0a              LDR      r3,|L130.3404|
000d22  4a0b              LDR      r2,|L130.3408|
000d24  490b              LDR      r1,|L130.3412|
000d26  9000              STR      r0,[sp,#0]
000d28  480b              LDR      r0,|L130.3416|
000d2a  f7fffffe          BL       send_GSM
000d2e  e054              B        |L130.3546|
                  |L130.3376|
000d30  e042              B        |L130.3512|
000d32  0000              DCW      0x0000
                  |L130.3380|
                          DCD      cond12
                  |L130.3384|
                          DCD      cond10
                  |L130.3388|
                          DCD      ||ip||
                  |L130.3392|
                          DCD      uart_string_gsm
                  |L130.3396|
                          DCD      port
                  |L130.3400|
                          DCD      tmeout
                  |L130.3404|
                          DCD      ||.conststring||+0x10
                  |L130.3408|
                          DCD      ||.conststring||+0x18
                  |L130.3412|
                          DCD      ||.conststring||+0x70
                  |L130.3416|
                          DCD      ||.conststring||+0x3ac
                  |L130.3420|
                          DCD      cond1
                  |L130.3424|
                          DCD      cond13
                  |L130.3428|
                          DCD      0x400ff000
                  |L130.3432|
                          DCD      ||.conststring||+0x488
                  |L130.3436|
                          DCD      cond14
                  |L130.3440|
                          DCD      cond5
                  |L130.3444|
                          DCD      at_
                  |L130.3448|
                          DCD      num_o
                  |L130.3452|
                          DCD      ||.conststring||+0x4a0
                  |L130.3456|
                          DCD      ||.conststring||+0xe0
                  |L130.3460|
                          DCD      ||.conststring||+0x2c
                  |L130.3464|
                          DCD      ||.conststring||+0x4b4
                  |L130.3468|
                          DCD      ||.conststring||+0x4c4
                  |L130.3472|
                          DCD      ||.conststring||+0x4e4
                  |L130.3476|
                          DCD      cond6
                  |L130.3480|
                          DCD      ||.conststring||+0x4f8
                  |L130.3484|
                          DCD      ||.conststring||+0x508
                  |L130.3488|
                          DCD      cond7
                  |L130.3492|
                          DCD      ||.conststring||+0x528
                  |L130.3496|
                          DCD      ||.conststring||+0x538
                  |L130.3500|
                          DCD      cond11
                  |L130.3504|
                          DCD      ||.conststring||+0x558
                  |L130.3508|
                          DCD      ||.conststring||+0x568
                  |L130.3512|
;;;1725   								
;;;1726   							}	
;;;1727   							else if(cond15)
000db8  4811              LDR      r0,|L130.3584|
000dba  6800              LDR      r0,[r0,#0]  ; cond15
000dbc  2800              CMP      r0,#0
000dbe  d003              BEQ      |L130.3528|
;;;1728   							{
;;;1729   								send_message(ignstr);
000dc0  4810              LDR      r0,|L130.3588|
000dc2  f7fffffe          BL       send_message
000dc6  e008              B        |L130.3546|
                  |L130.3528|
;;;1730   								
;;;1731   							}							
;;;1732   
;;;1733   							else
;;;1734   							{							
;;;1735   								send_GSM("\r\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000dc8  480f              LDR      r0,|L130.3592|
000dca  6800              LDR      r0,[r0,#0]  ; tmeout
000dcc  4b0f              LDR      r3,|L130.3596|
000dce  4a10              LDR      r2,|L130.3600|
000dd0  4910              LDR      r1,|L130.3604|
000dd2  9000              STR      r0,[sp,#0]
000dd4  4810              LDR      r0,|L130.3608|
000dd6  f7fffffe          BL       send_GSM
                  |L130.3546|
;;;1736   							}
;;;1737   
;;;1738   
;;;1739   		ringflag=0;
000dda  2000              MOVS     r0,#0
000ddc  490f              LDR      r1,|L130.3612|
000dde  7008              STRB     r0,[r1,#0]
;;;1740   clear();							
000de0  f7fffffe          BL       clear
;;;1741   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000de4  4808              LDR      r0,|L130.3592|
000de6  6800              LDR      r0,[r0,#0]  ; tmeout
000de8  4b08              LDR      r3,|L130.3596|
000dea  4a0d              LDR      r2,|L130.3616|
000dec  490d              LDR      r1,|L130.3620|
000dee  9000              STR      r0,[sp,#0]
000df0  480d              LDR      r0,|L130.3624|
000df2  f7fffffe          BL       send_GSM
;;;1742   delay(1000);					
000df6  207d              MOVS     r0,#0x7d
000df8  00c0              LSLS     r0,r0,#3
000dfa  f7fffffe          BL       delay
                  |L130.3582|
;;;1743   		}
;;;1744   		
;;;1745   }
000dfe  bd1f              POP      {r0-r4,pc}
;;;1746   int count_char(char ch,char* string)
                          ENDP

                  |L130.3584|
                          DCD      cond15
                  |L130.3588|
                          DCD      ignstr
                  |L130.3592|
                          DCD      tmeout
                  |L130.3596|
                          DCD      ||.conststring||+0x10
                  |L130.3600|
                          DCD      ||.conststring||+0x18
                  |L130.3604|
                          DCD      ||.conststring||+0x70
                  |L130.3608|
                          DCD      ||.conststring||+0x588
                  |L130.3612|
                          DCD      ringflag
                  |L130.3616|
                          DCD      ||.conststring||+0xe0
                  |L130.3620|
                          DCD      ||.conststring||+0x2c
                  |L130.3624|
                          DCD      ||.conststring||+0x418

                          AREA ||i.GPS_COLLECT2||, COMGROUP=GPS_COLLECT2, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT2 PROC
;;;1248   
;;;1249   __inline void GPS_COLLECT2()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1250   {	
;;;1251   time52=15;	
000002  200f              MOVS     r0,#0xf
000004  49b8              LDR      r1,|L137.744|
000006  6008              STR      r0,[r1,#0]  ; time52
;;;1252   
;;;1253   //memset(imei,0,20);
;;;1254   //send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
;;;1255   //for(i=0;i<strlen(uart_string_gsm);i++){
;;;1256   //		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
;;;1257   //			imei[imeiinc] = uart_string_gsm[i];
;;;1258   //			imeiinc++;
;;;1259   //		}
;;;1260   //}
;;;1261   clear();	
000008  f7fffffe          BL       clear
;;;1262   
;;;1263   	
;;;1264   	
;;;1265   	adc_read(9);							
00000c  2009              MOVS     r0,#9
00000e  f7fffffe          BL       adc_read
;;;1266   	memset(fuelstr,0,5);
000012  2105              MOVS     r1,#5
000014  48b5              LDR      r0,|L137.748|
000016  f7fffffe          BL       __aeabi_memclr4
;;;1267   	sprintf(fuelstr,"%d,",fuel);
00001a  48b5              LDR      r0,|L137.752|
00001c  49b5              LDR      r1,|L137.756|
00001e  6802              LDR      r2,[r0,#0]  ; fuel
000020  48b2              LDR      r0,|L137.748|
000022  f7fffffe          BL       __2sprintf
;;;1268   
;;;1269   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
000026  48b4              LDR      r0,|L137.760|
000028  6800              LDR      r0,[r0,#0]  ; tmeout
00002a  4bb4              LDR      r3,|L137.764|
00002c  4ab4              LDR      r2,|L137.768|
00002e  49b5              LDR      r1,|L137.772|
000030  9000              STR      r0,[sp,#0]
000032  48b5              LDR      r0,|L137.776|
000034  f7fffffe          BL       send_GSM
;;;1270   	// not sleep	
;;;1271   	memset(num2,0,30);
000038  211e              MOVS     r1,#0x1e
00003a  48b4              LDR      r0,|L137.780|
00003c  f7fffffe          BL       __aeabi_memclr
;;;1272   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
000040  48b2              LDR      r0,|L137.780|
000042  210d              MOVS     r1,#0xd
000044  232c              MOVS     r3,#0x2c
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2102              MOVS     r1,#2
00004e  48b0              LDR      r0,|L137.784|
000050  f7fffffe          BL       parse_g
;;;1273   	voltagecbc=myAtoi(num2);	
000054  48ad              LDR      r0,|L137.780|
000056  f7fffffe          BL       myAtoi
00005a  49ae              LDR      r1,|L137.788|
00005c  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1274   
;;;1275   memset(ignstr,0,2);
00005e  48ae              LDR      r0,|L137.792|
000060  2100              MOVS     r1,#0
000062  7001              STRB     r1,[r0,#0]
000064  7041              STRB     r1,[r0,#1]
;;;1276   if(GPIOB_PDIR & 0x00000001){
000066  48ad              LDR      r0,|L137.796|
000068  6900              LDR      r0,[r0,#0x10]
00006a  07c0              LSLS     r0,r0,#31
00006c  0fc0              LSRS     r0,r0,#31
00006e  2800              CMP      r0,#0
000070  d005              BEQ      |L137.126|
;;;1277   			sprintf(ignstr,"%d",1);
000072  2201              MOVS     r2,#1
000074  49aa              LDR      r1,|L137.800|
000076  48a8              LDR      r0,|L137.792|
000078  f7fffffe          BL       __2sprintf
00007c  e004              B        |L137.136|
                  |L137.126|
;;;1278   }
;;;1279   else{
;;;1280   			sprintf(ignstr,"%d",0);
00007e  2200              MOVS     r2,#0
000080  49a7              LDR      r1,|L137.800|
000082  48a5              LDR      r0,|L137.792|
000084  f7fffffe          BL       __2sprintf
                  |L137.136|
;;;1281   
;;;1282   }
;;;1283   
;;;1284   memset(acstr,0,2); //ptb2
000088  48a6              LDR      r0,|L137.804|
00008a  2100              MOVS     r1,#0
00008c  8001              STRH     r1,[r0,#0]
;;;1285   if(GPIOB_PDIR & 0x00000004){
00008e  48a3              LDR      r0,|L137.796|
000090  6900              LDR      r0,[r0,#0x10]
000092  2104              MOVS     r1,#4
000094  4008              ANDS     r0,r0,r1
000096  2800              CMP      r0,#0
000098  d005              BEQ      |L137.166|
;;;1286   			sprintf(acstr,"%d",1);
00009a  2201              MOVS     r2,#1
00009c  49a0              LDR      r1,|L137.800|
00009e  48a1              LDR      r0,|L137.804|
0000a0  f7fffffe          BL       __2sprintf
0000a4  e004              B        |L137.176|
                  |L137.166|
;;;1287   }
;;;1288   else{
;;;1289   				sprintf(acstr,"%d",0);
0000a6  2200              MOVS     r2,#0
0000a8  499d              LDR      r1,|L137.800|
0000aa  489e              LDR      r0,|L137.804|
0000ac  f7fffffe          BL       __2sprintf
                  |L137.176|
;;;1290   
;;;1291   }
;;;1292   	
;;;1293   while(lpticks<int_erval);
0000b0  bf00              NOP      
                  |L137.178|
0000b2  489d              LDR      r0,|L137.808|
0000b4  6800              LDR      r0,[r0,#0]  ; lpticks
0000b6  499d              LDR      r1,|L137.812|
0000b8  6809              LDR      r1,[r1,#0]  ; int_erval
0000ba  4288              CMP      r0,r1
0000bc  dbf9              BLT      |L137.178|
;;;1294   get_gpsdata();
0000be  f7fffffe          BL       get_gpsdata
;;;1295   lpticks=0;
0000c2  2000              MOVS     r0,#0
0000c4  4998              LDR      r1,|L137.808|
0000c6  6008              STR      r0,[r1,#0]  ; lpticks
;;;1296   
;;;1297   parse_g(rmc, 3, 4, ',', ',' ,lati);
0000c8  4899              LDR      r0,|L137.816|
0000ca  212c              MOVS     r1,#0x2c
0000cc  460b              MOV      r3,r1
0000ce  2204              MOVS     r2,#4
0000d0  9100              STR      r1,[sp,#0]
0000d2  9001              STR      r0,[sp,#4]
0000d4  2103              MOVS     r1,#3
0000d6  4897              LDR      r0,|L137.820|
0000d8  f7fffffe          BL       parse_g
;;;1298   parse_g(rmc, 5, 6, ',', ',' ,longi);
0000dc  4896              LDR      r0,|L137.824|
0000de  212c              MOVS     r1,#0x2c
0000e0  460b              MOV      r3,r1
0000e2  2206              MOVS     r2,#6
0000e4  9100              STR      r1,[sp,#0]
0000e6  9001              STR      r0,[sp,#4]
0000e8  2105              MOVS     r1,#5
0000ea  4892              LDR      r0,|L137.820|
0000ec  f7fffffe          BL       parse_g
;;;1299   parse_g(rmc, 7, 8, ',', ',' ,velocity);
0000f0  4892              LDR      r0,|L137.828|
0000f2  212c              MOVS     r1,#0x2c
0000f4  460b              MOV      r3,r1
0000f6  2208              MOVS     r2,#8
0000f8  9100              STR      r1,[sp,#0]
0000fa  9001              STR      r0,[sp,#4]
0000fc  2107              MOVS     r1,#7
0000fe  488d              LDR      r0,|L137.820|
000100  f7fffffe          BL       parse_g
;;;1300   		
;;;1301   		speed = stof(velocity);
000104  488d              LDR      r0,|L137.828|
000106  f7fffffe          BL       stof
00010a  498d              LDR      r1,|L137.832|
00010c  6008              STR      r0,[r1,#0]  ; speed
;;;1302   		c=stof(lati);//7523.7412
00010e  4888              LDR      r0,|L137.816|
000110  f7fffffe          BL       stof
000114  4604              MOV      r4,r0
000116  f7fffffe          BL       __aeabi_f2d
00011a  4a8a              LDR      r2,|L137.836|
00011c  c203              STM      r2!,{r0,r1}
;;;1303   		hh= c/100; //75
00011e  2200              MOVS     r2,#0
000120  4b89              LDR      r3,|L137.840|
000122  4988              LDR      r1,|L137.836|
000124  c903              LDM      r1,{r0,r1}
000126  f7fffffe          BL       __aeabi_ddiv
00012a  4604              MOV      r4,r0
00012c  f7fffffe          BL       __aeabi_d2iz
000130  4986              LDR      r1,|L137.844|
000132  6008              STR      r0,[r1,#0]  ; hh
;;;1304   		hh11 = c/100; //75.237412
000134  2200              MOVS     r2,#0
000136  4b84              LDR      r3,|L137.840|
000138  4982              LDR      r1,|L137.836|
00013a  c903              LDM      r1,{r0,r1}
00013c  f7fffffe          BL       __aeabi_ddiv
000140  4a83              LDR      r2,|L137.848|
000142  c203              STM      r2!,{r0,r1}
;;;1305   		mm11 = hh11-hh; //.237412
000144  4881              LDR      r0,|L137.844|
000146  6800              LDR      r0,[r0,#0]  ; hh
000148  f7fffffe          BL       __aeabi_i2d
00014c  4604              MOV      r4,r0
00014e  4880              LDR      r0,|L137.848|
000150  c80c              LDM      r0!,{r2,r3}
000152  4620              MOV      r0,r4
000154  f7fffffe          BL       __aeabi_drsub
000158  4a7e              LDR      r2,|L137.852|
00015a  c203              STM      r2!,{r0,r1}
;;;1306   		mm11*=100;
00015c  2200              MOVS     r2,#0
00015e  4b7a              LDR      r3,|L137.840|
000160  497c              LDR      r1,|L137.852|
000162  c903              LDM      r1,{r0,r1}
000164  f7fffffe          BL       __aeabi_dmul
000168  4a7a              LDR      r2,|L137.852|
00016a  c203              STM      r2!,{r0,r1}
;;;1307   		mm22=hh+mm11/60;	
00016c  2200              MOVS     r2,#0
00016e  4b7a              LDR      r3,|L137.856|
000170  4978              LDR      r1,|L137.852|
000172  c903              LDM      r1,{r0,r1}
000174  f7fffffe          BL       __aeabi_ddiv
000178  4604              MOV      r4,r0
00017a  460d              MOV      r5,r1
00017c  4873              LDR      r0,|L137.844|
00017e  6800              LDR      r0,[r0,#0]  ; hh
000180  f7fffffe          BL       __aeabi_i2d
000184  4606              MOV      r6,r0
000186  4622              MOV      r2,r4
000188  462b              MOV      r3,r5
00018a  f7fffffe          BL       __aeabi_dadd
00018e  4a73              LDR      r2,|L137.860|
000190  c203              STM      r2!,{r0,r1}
;;;1308   		memset(lati,0,15);
000192  210f              MOVS     r1,#0xf
000194  4866              LDR      r0,|L137.816|
000196  f7fffffe          BL       __aeabi_memclr
;;;1309   		sprintf(lati,"%f",mm22);
00019a  4870              LDR      r0,|L137.860|
00019c  4970              LDR      r1,|L137.864|
00019e  c80c              LDM      r0!,{r2,r3}
0001a0  4863              LDR      r0,|L137.816|
0001a2  f7fffffe          BL       __2sprintf
;;;1310   		c=stof(longi);//7523.7412
0001a6  4864              LDR      r0,|L137.824|
0001a8  f7fffffe          BL       stof
0001ac  4604              MOV      r4,r0
0001ae  f7fffffe          BL       __aeabi_f2d
0001b2  4a64              LDR      r2,|L137.836|
0001b4  c203              STM      r2!,{r0,r1}
;;;1311   		hh= c/100; //75
0001b6  2200              MOVS     r2,#0
0001b8  4b63              LDR      r3,|L137.840|
0001ba  4962              LDR      r1,|L137.836|
0001bc  c903              LDM      r1,{r0,r1}
0001be  f7fffffe          BL       __aeabi_ddiv
0001c2  4604              MOV      r4,r0
0001c4  f7fffffe          BL       __aeabi_d2iz
0001c8  4960              LDR      r1,|L137.844|
0001ca  6008              STR      r0,[r1,#0]  ; hh
;;;1312   		hh11 = c/100; //75.237412
0001cc  2200              MOVS     r2,#0
0001ce  4b5e              LDR      r3,|L137.840|
0001d0  495c              LDR      r1,|L137.836|
0001d2  c903              LDM      r1,{r0,r1}
0001d4  f7fffffe          BL       __aeabi_ddiv
0001d8  4a5d              LDR      r2,|L137.848|
0001da  c203              STM      r2!,{r0,r1}
;;;1313   		mm11 = hh11-hh; //.237412
0001dc  485b              LDR      r0,|L137.844|
0001de  6800              LDR      r0,[r0,#0]  ; hh
0001e0  f7fffffe          BL       __aeabi_i2d
0001e4  4604              MOV      r4,r0
0001e6  485a              LDR      r0,|L137.848|
0001e8  c80c              LDM      r0!,{r2,r3}
0001ea  4620              MOV      r0,r4
0001ec  f7fffffe          BL       __aeabi_drsub
0001f0  4a58              LDR      r2,|L137.852|
0001f2  c203              STM      r2!,{r0,r1}
;;;1314   		mm11*=100;
0001f4  2200              MOVS     r2,#0
0001f6  4b54              LDR      r3,|L137.840|
0001f8  4956              LDR      r1,|L137.852|
0001fa  c903              LDM      r1,{r0,r1}
0001fc  f7fffffe          BL       __aeabi_dmul
000200  4a54              LDR      r2,|L137.852|
000202  c203              STM      r2!,{r0,r1}
;;;1315   		mm22=hh+mm11/60;	
000204  2200              MOVS     r2,#0
000206  4b54              LDR      r3,|L137.856|
000208  4952              LDR      r1,|L137.852|
00020a  c903              LDM      r1,{r0,r1}
00020c  f7fffffe          BL       __aeabi_ddiv
000210  4604              MOV      r4,r0
000212  460d              MOV      r5,r1
000214  484d              LDR      r0,|L137.844|
000216  6800              LDR      r0,[r0,#0]  ; hh
000218  f7fffffe          BL       __aeabi_i2d
00021c  4606              MOV      r6,r0
00021e  4622              MOV      r2,r4
000220  462b              MOV      r3,r5
000222  f7fffffe          BL       __aeabi_dadd
000226  4a4d              LDR      r2,|L137.860|
000228  c203              STM      r2!,{r0,r1}
;;;1316   		memset(longi,0,15);
00022a  210f              MOVS     r1,#0xf
00022c  4842              LDR      r0,|L137.824|
00022e  f7fffffe          BL       __aeabi_memclr
;;;1317   		sprintf(longi,"%f",mm22);	
000232  484a              LDR      r0,|L137.860|
000234  494a              LDR      r1,|L137.864|
000236  c80c              LDM      r0!,{r2,r3}
000238  483f              LDR      r0,|L137.824|
00023a  f7fffffe          BL       __2sprintf
;;;1318   		strcat(data,imei);
00023e  4949              LDR      r1,|L137.868|
000240  4849              LDR      r0,|L137.872|
000242  f7fffffe          BL       strcat
;;;1319   		strcat(data,", ");	
000246  4949              LDR      r1,|L137.876|
000248  4847              LDR      r0,|L137.872|
00024a  f7fffffe          BL       strcat
;;;1320   		strcat(data,"$GxGGA");	
00024e  4948              LDR      r1,|L137.880|
000250  4845              LDR      r0,|L137.872|
000252  f7fffffe          BL       strcat
;;;1321   		strcat(data,gga);
000256  4947              LDR      r1,|L137.884|
000258  4843              LDR      r0,|L137.872|
00025a  f7fffffe          BL       strcat
;;;1322   		strcat(data,", $GxRMC");	
00025e  4946              LDR      r1,|L137.888|
000260  4841              LDR      r0,|L137.872|
000262  f7fffffe          BL       strcat
;;;1323   		strcat(data,rmc);	
000266  4933              LDR      r1,|L137.820|
000268  483f              LDR      r0,|L137.872|
00026a  f7fffffe          BL       strcat
;;;1324   		strcat(data,",");	
00026e  4943              LDR      r1,|L137.892|
000270  483d              LDR      r0,|L137.872|
000272  f7fffffe          BL       strcat
;;;1325   		strcat(data,num2);
000276  4925              LDR      r1,|L137.780|
000278  483b              LDR      r0,|L137.872|
00027a  f7fffffe          BL       strcat
;;;1326   		strcat(data,",F=");	
00027e  4940              LDR      r1,|L137.896|
000280  4839              LDR      r0,|L137.872|
000282  f7fffffe          BL       strcat
;;;1327   		strcat(data,fuelstr);
000286  4919              LDR      r1,|L137.748|
000288  4837              LDR      r0,|L137.872|
00028a  f7fffffe          BL       strcat
;;;1328   		strcat(data,",AC=");	
00028e  493d              LDR      r1,|L137.900|
000290  4835              LDR      r0,|L137.872|
000292  f7fffffe          BL       strcat
;;;1329   		strcat(data,acstr);
000296  4923              LDR      r1,|L137.804|
000298  4833              LDR      r0,|L137.872|
00029a  f7fffffe          BL       strcat
;;;1330   		strcat(data,",I=");	
00029e  493a              LDR      r1,|L137.904|
0002a0  4831              LDR      r0,|L137.872|
0002a2  f7fffffe          BL       strcat
;;;1331   		strcat(data,ignstr);	
0002a6  491c              LDR      r1,|L137.792|
0002a8  482f              LDR      r0,|L137.872|
0002aa  f7fffffe          BL       strcat
;;;1332   
;;;1333   		strcat(data,",RS232=");
0002ae  4937              LDR      r1,|L137.908|
0002b0  482d              LDR      r0,|L137.872|
0002b2  f7fffffe          BL       strcat
;;;1334   		strcat(data,id);
0002b6  4936              LDR      r1,|L137.912|
0002b8  482b              LDR      r0,|L137.872|
0002ba  f7fffffe          BL       strcat
;;;1335   		strcat(data,",");
0002be  492f              LDR      r1,|L137.892|
0002c0  4829              LDR      r0,|L137.872|
0002c2  f7fffffe          BL       strcat
;;;1336   		memset(id,0,30);
0002c6  211e              MOVS     r1,#0x1e
0002c8  4831              LDR      r0,|L137.912|
0002ca  f7fffffe          BL       __aeabi_memclr
;;;1337   		if(!(GPIOC_PDIR & 0x00000001)){
0002ce  4813              LDR      r0,|L137.796|
0002d0  3040              ADDS     r0,r0,#0x40
0002d2  6900              LDR      r0,[r0,#0x10]
0002d4  07c0              LSLS     r0,r0,#31
0002d6  0fc0              LSRS     r0,r0,#31
0002d8  2800              CMP      r0,#0
0002da  d003              BEQ      |L137.740|
;;;1338   		}
;;;1339   		else{strcat(data,",BR*");}
0002dc  492d              LDR      r1,|L137.916|
0002de  4822              LDR      r0,|L137.872|
0002e0  f7fffffe          BL       strcat
                  |L137.740|
;;;1340   //return 0;
;;;1341   }
0002e4  bdfe              POP      {r1-r7,pc}
;;;1342   
                          ENDP

0002e6  0000              DCW      0x0000
                  |L137.744|
                          DCD      time52
                  |L137.748|
                          DCD      fuelstr
                  |L137.752|
                          DCD      fuel
                  |L137.756|
                          DCD      ||.conststring||+0x100
                  |L137.760|
                          DCD      tmeout
                  |L137.764|
                          DCD      ||.conststring||+0x10
                  |L137.768|
                          DCD      ||.conststring||+0xe0
                  |L137.772|
                          DCD      ||.conststring||+0x2c
                  |L137.776|
                          DCD      ||.conststring||+0x104
                  |L137.780|
                          DCD      num2
                  |L137.784|
                          DCD      uart_string_gsm
                  |L137.788|
                          DCD      voltagecbc
                  |L137.792|
                          DCD      ignstr
                  |L137.796|
                          DCD      0x400ff040
                  |L137.800|
                          DCD      ||.conststring||+0x114
                  |L137.804|
                          DCD      acstr
                  |L137.808|
                          DCD      lpticks
                  |L137.812|
                          DCD      int_erval
                  |L137.816|
                          DCD      lati
                  |L137.820|
                          DCD      ||rmc||
                  |L137.824|
                          DCD      longi
                  |L137.828|
                          DCD      velocity
                  |L137.832|
                          DCD      speed
                  |L137.836|
                          DCD      c
                  |L137.840|
                          DCD      0x40590000
                  |L137.844|
                          DCD      ||hh||
                  |L137.848|
                          DCD      hh11
                  |L137.852|
                          DCD      mm11
                  |L137.856|
                          DCD      0x404e0000
                  |L137.860|
                          DCD      mm22
                  |L137.864|
                          DCD      ||.conststring||+0x118
                  |L137.868|
                          DCD      imei
                  |L137.872|
                          DCD      data
                  |L137.876|
                          DCD      ||.conststring||+0x59c
                  |L137.880|
                          DCD      ||.conststring||+0x120
                  |L137.884|
                          DCD      gga
                  |L137.888|
                          DCD      ||.conststring||+0x5a0
                  |L137.892|
                          DCD      ||.conststring||+0x11c
                  |L137.896|
                          DCD      ||.conststring||+0x130
                  |L137.900|
                          DCD      ||.conststring||+0x134
                  |L137.904|
                          DCD      ||.conststring||+0x13c
                  |L137.908|
                          DCD      ||.conststring||+0x140
                  |L137.912|
                          DCD      ||id||
                  |L137.916|
                          DCD      ||.conststring||+0x148

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;70     
;;;71     __inline void remove_all_chars(char* str, char c, char d) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;72         char *pr = str, *pw = str;
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
;;;73         while (*pr) {
00000a  e015              B        |L144.56|
                  |L144.12|
;;;74             *pw = *pr++;
00000c  780d              LDRB     r5,[r1,#0]
00000e  7005              STRB     r5,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
;;;75     			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
000012  7805              LDRB     r5,[r0,#0]
000014  42a5              CMP      r5,r4
000016  d00d              BEQ      |L144.52|
000018  7805              LDRB     r5,[r0,#0]
00001a  4295              CMP      r5,r2
00001c  d00a              BEQ      |L144.52|
00001e  7805              LDRB     r5,[r0,#0]
000020  2d20              CMP      r5,#0x20
000022  d007              BEQ      |L144.52|
000024  7805              LDRB     r5,[r0,#0]
000026  2d2f              CMP      r5,#0x2f
000028  d004              BEQ      |L144.52|
00002a  7805              LDRB     r5,[r0,#0]
00002c  2d3a              CMP      r5,#0x3a
00002e  d001              BEQ      |L144.52|
000030  2501              MOVS     r5,#1
000032  e000              B        |L144.54|
                  |L144.52|
000034  2500              MOVS     r5,#0
                  |L144.54|
000036  1828              ADDS     r0,r5,r0
                  |L144.56|
000038  780d              LDRB     r5,[r1,#0]            ;73
00003a  2d00              CMP      r5,#0                 ;73
00003c  d1e6              BNE      |L144.12|
;;;76         }
;;;77         *pw = '\0';
00003e  7005              STRB     r5,[r0,#0]
;;;78     }
000040  bd30              POP      {r4,r5,pc}
;;;79     
                          ENDP


                          AREA ||i.send_chunk||, COMGROUP=send_chunk, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_chunk PROC
;;;1782   
;;;1783   __inline void  send_chunk(){
000000  b57c              PUSH     {r2-r6,lr}
;;;1784   fsz=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L151.1024|
000006  6008              STR      r0,[r1,#0]  ; fsz
;;;1785   times=-2;	
000008  1e80              SUBS     r0,r0,#2
00000a  49fe              LDR      r1,|L151.1028|
00000c  6008              STR      r0,[r1,#0]  ; times
;;;1786   	
;;;1787   
;;;1788   temp=int_erval;				
00000e  48fe              LDR      r0,|L151.1032|
000010  6800              LDR      r0,[r0,#0]  ; int_erval
000012  49fe              LDR      r1,|L151.1036|
000014  6008              STR      r0,[r1,#0]  ; temp
;;;1789   int_erval=1;
000016  2001              MOVS     r0,#1
000018  49fb              LDR      r1,|L151.1032|
00001a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1790   
;;;1791   	
;;;1792   memset(at_,0,100);
00001c  2164              MOVS     r1,#0x64
00001e  48fc              LDR      r0,|L151.1040|
000020  f7fffffe          BL       __aeabi_memclr
;;;1793   sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
000024  4afb              LDR      r2,|L151.1044|
000026  49fc              LDR      r1,|L151.1048|
000028  48f9              LDR      r0,|L151.1040|
00002a  f7fffffe          BL       __2sprintf
;;;1794   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00002e  48fb              LDR      r0,|L151.1052|
000030  6800              LDR      r0,[r0,#0]  ; tmeout
000032  4bfb              LDR      r3,|L151.1056|
000034  4afb              LDR      r2,|L151.1060|
000036  49fc              LDR      r1,|L151.1064|
000038  9000              STR      r0,[sp,#0]
00003a  48f5              LDR      r0,|L151.1040|
00003c  f7fffffe          BL       send_GSM
;;;1795   parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
000040  48fa              LDR      r0,|L151.1068|
000042  210d              MOVS     r1,#0xd
000044  2320              MOVS     r3,#0x20
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2101              MOVS     r1,#1
00004e  48f8              LDR      r0,|L151.1072|
000050  f7fffffe          BL       parse_g
;;;1796   fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
000054  48f5              LDR      r0,|L151.1068|
000056  f7fffffe          BL       stof
00005a  49e9              LDR      r1,|L151.1024|
00005c  6008              STR      r0,[r1,#0]  ; fsz
;;;1797   //reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1798   	
;;;1799   times =	(fsz/900) + 2;
00005e  49f5              LDR      r1,|L151.1076|
000060  48e7              LDR      r0,|L151.1024|
000062  6800              LDR      r0,[r0,#0]  ; fsz
000064  f7fffffe          BL       __aeabi_fdiv
000068  4605              MOV      r5,r0
00006a  2101              MOVS     r1,#1
00006c  0789              LSLS     r1,r1,#30
00006e  f7fffffe          BL       __aeabi_fadd
000072  4604              MOV      r4,r0
000074  f7fffffe          BL       __aeabi_f2iz
000078  49e2              LDR      r1,|L151.1028|
00007a  6008              STR      r0,[r1,#0]  ; times
;;;1800   for(;k5<=(times);){
00007c  e3fd              B        |L151.2170|
                  |L151.126|
;;;1801   if(fsz==0){log0=1;break;}
00007e  2100              MOVS     r1,#0
000080  48df              LDR      r0,|L151.1024|
000082  6800              LDR      r0,[r0,#0]  ; fsz
000084  f7fffffe          BL       __aeabi_cfcmpeq
000088  d103              BNE      |L151.146|
00008a  2001              MOVS     r0,#1
00008c  49ea              LDR      r1,|L151.1080|
00008e  6008              STR      r0,[r1,#0]  ; log0
000090  e3f4              B        |L151.2172|
                  |L151.146|
;;;1802   else log0=0;
000092  2000              MOVS     r0,#0
000094  49e8              LDR      r1,|L151.1080|
000096  6008              STR      r0,[r1,#0]  ; log0
;;;1803   
;;;1804   	RESET_ON;
000098  2020              MOVS     r0,#0x20
00009a  49e8              LDR      r1,|L151.1084|
00009c  6048              STR      r0,[r1,#4]
;;;1805   	DTR_OFF;
00009e  2080              MOVS     r0,#0x80
0000a0  49e6              LDR      r1,|L151.1084|
0000a2  3140              ADDS     r1,r1,#0x40
0000a4  6088              STR      r0,[r1,#8]
;;;1806   	
;;;1807   msg_sim800(); 
0000a6  f7fffffe          BL       msg_sim800
;;;1808   
;;;1809   memset(data,0,strlen(data));	
0000aa  48e5              LDR      r0,|L151.1088|
0000ac  f7fffffe          BL       strlen
0000b0  4604              MOV      r4,r0
0000b2  4621              MOV      r1,r4
0000b4  48e2              LDR      r0,|L151.1088|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;1810   strcat(data,"\n");	
0000ba  49e2              LDR      r1,|L151.1092|
0000bc  48e0              LDR      r0,|L151.1088|
0000be  f7fffffe          BL       strcat
;;;1811   	
;;;1812   	
;;;1813   	memset(at_,0,100);
0000c2  2164              MOVS     r1,#0x64
0000c4  48d2              LDR      r0,|L151.1040|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;1814   	sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);
0000ca  4ad2              LDR      r2,|L151.1044|
0000cc  49d2              LDR      r1,|L151.1048|
0000ce  48d0              LDR      r0,|L151.1040|
0000d0  f7fffffe          BL       __2sprintf
;;;1815   GPS_COLLECT();
0000d4  f7fffffe          BL       GPS_COLLECT
;;;1816   
;;;1817   	
;;;1818   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
0000d8  48d0              LDR      r0,|L151.1052|
0000da  6800              LDR      r0,[r0,#0]  ; tmeout
0000dc  4bd0              LDR      r3,|L151.1056|
0000de  4ad1              LDR      r2,|L151.1060|
0000e0  49d1              LDR      r1,|L151.1064|
0000e2  9000              STR      r0,[sp,#0]
0000e4  48ca              LDR      r0,|L151.1040|
0000e6  f7fffffe          BL       send_GSM
;;;1819   	parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
0000ea  48d0              LDR      r0,|L151.1068|
0000ec  210d              MOVS     r1,#0xd
0000ee  2320              MOVS     r3,#0x20
0000f0  2205              MOVS     r2,#5
0000f2  9100              STR      r1,[sp,#0]
0000f4  9001              STR      r0,[sp,#4]
0000f6  2101              MOVS     r1,#1
0000f8  48cd              LDR      r0,|L151.1072|
0000fa  f7fffffe          BL       parse_g
;;;1820   	fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
0000fe  48cb              LDR      r0,|L151.1068|
000100  f7fffffe          BL       stof
000104  49be              LDR      r1,|L151.1024|
000106  6008              STR      r0,[r1,#0]  ; fsz
;;;1821   	//reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;1822   	times =	(fsz/900) + 1;	
000108  49ca              LDR      r1,|L151.1076|
00010a  48bd              LDR      r0,|L151.1024|
00010c  6800              LDR      r0,[r0,#0]  ; fsz
00010e  f7fffffe          BL       __aeabi_fdiv
000112  4605              MOV      r5,r0
000114  217f              MOVS     r1,#0x7f
000116  05c9              LSLS     r1,r1,#23
000118  f7fffffe          BL       __aeabi_fadd
00011c  4604              MOV      r4,r0
00011e  f7fffffe          BL       __aeabi_f2iz
000122  49b8              LDR      r1,|L151.1028|
000124  6008              STR      r0,[r1,#0]  ; times
;;;1823   	
;;;1824   	
;;;1825   memset(at_,0,100);
000126  2164              MOVS     r1,#0x64
000128  48b9              LDR      r0,|L151.1040|
00012a  f7fffffe          BL       __aeabi_memclr
;;;1826   sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>          \r\n\r\n",times,k5,rtcticks2);							
00012e  48c6              LDR      r0,|L151.1096|
000130  6800              LDR      r0,[r0,#0]  ; rtcticks2
000132  9000              STR      r0,[sp,#0]
000134  48c5              LDR      r0,|L151.1100|
000136  6803              LDR      r3,[r0,#0]  ; k5
000138  48b2              LDR      r0,|L151.1028|
00013a  49c5              LDR      r1,|L151.1104|
00013c  6802              LDR      r2,[r0,#0]  ; times
00013e  48b4              LDR      r0,|L151.1040|
000140  f7fffffe          BL       __2sprintf
;;;1827   send_modem(at_);
000144  48b2              LDR      r0,|L151.1040|
000146  f7fffffe          BL       send_modem
;;;1828   clear();
00014a  f7fffffe          BL       clear
;;;1829   	
;;;1830   	
;;;1831   		sprintf(at_, "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",drive,cursorvaluepr );		//1256
00014e  48c1              LDR      r0,|L151.1108|
000150  4ab0              LDR      r2,|L151.1044|
000152  49c1              LDR      r1,|L151.1112|
000154  6803              LDR      r3,[r0,#0]  ; cursorvaluepr
000156  48ae              LDR      r0,|L151.1040|
000158  f7fffffe          BL       __2sprintf
;;;1832   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",5);
00015c  2005              MOVS     r0,#5
00015e  4bb0              LDR      r3,|L151.1056|
000160  4ab0              LDR      r2,|L151.1060|
000162  49b1              LDR      r1,|L151.1064|
000164  9000              STR      r0,[sp,#0]
000166  48aa              LDR      r0,|L151.1040|
000168  f7fffffe          BL       send_GSM
;;;1833   			if(strstr(uart_string_gsm,"ERROR")){
00016c  49bb              LDR      r1,|L151.1116|
00016e  48b0              LDR      r0,|L151.1072|
000170  f7fffffe          BL       strstr
000174  2800              CMP      r0,#0
000176  d00b              BEQ      |L151.400|
;;;1834   				RESET_OFF;
000178  2020              MOVS     r0,#0x20
00017a  49b0              LDR      r1,|L151.1084|
00017c  6088              STR      r0,[r1,#8]
;;;1835   				delay(50);
00017e  2032              MOVS     r0,#0x32
000180  f7fffffe          BL       delay
;;;1836   				RESET_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L151.1084|
000188  6048              STR      r0,[r1,#4]
;;;1837   				delay(50);
00018a  2032              MOVS     r0,#0x32
00018c  f7fffffe          BL       delay
                  |L151.400|
;;;1838   			}
;;;1839   		cntendl=count_char('\n',uart_string_gsm);
000190  49a7              LDR      r1,|L151.1072|
000192  200a              MOVS     r0,#0xa
000194  f7fffffe          BL       count_char
000198  49b1              LDR      r1,|L151.1120|
00019a  6008              STR      r0,[r1,#0]  ; cntendl
;;;1840      //if(cntendl!=0)
;;;1841   		enters = cntendl;		
00019c  4608              MOV      r0,r1
00019e  6800              LDR      r0,[r0,#0]  ; cntendl
0001a0  49b0              LDR      r1,|L151.1124|
0001a2  6008              STR      r0,[r1,#0]  ; enters
;;;1842   		memset(sd_data,0,1400);
0001a4  21af              MOVS     r1,#0xaf
0001a6  00c9              LSLS     r1,r1,#3
0001a8  48af              LDR      r0,|L151.1128|
0001aa  f7fffffe          BL       __aeabi_memclr
;;;1843   		parse_g(uart_string_gsm, 1,enters-2, '\n', '\n' ,sd_data);	
0001ae  48ae              LDR      r0,|L151.1128|
0001b0  210a              MOVS     r1,#0xa
0001b2  9100              STR      r1,[sp,#0]
0001b4  9001              STR      r0,[sp,#4]
0001b6  48ab              LDR      r0,|L151.1124|
0001b8  6800              LDR      r0,[r0,#0]  ; enters
0001ba  1e82              SUBS     r2,r0,#2
0001bc  460b              MOV      r3,r1
0001be  2101              MOVS     r1,#1
0001c0  489b              LDR      r0,|L151.1072|
0001c2  f7fffffe          BL       parse_g
;;;1844   		strcat(sd_data,"\n");
0001c6  499f              LDR      r1,|L151.1092|
0001c8  48a7              LDR      r0,|L151.1128|
0001ca  f7fffffe          BL       strcat
;;;1845   		strcat(sd_data,data);
0001ce  499c              LDR      r1,|L151.1088|
0001d0  48a5              LDR      r0,|L151.1128|
0001d2  f7fffffe          BL       strcat
;;;1846   		if(strstr(sd_data,"SEND OK")    ||   strstr(sd_data,"ERROR") || strstr(sd_data,"FAIL")  ||  strstr(sd_data,"DEACT"))	{
0001d6  49a5              LDR      r1,|L151.1132|
0001d8  48a3              LDR      r0,|L151.1128|
0001da  f7fffffe          BL       strstr
0001de  2800              CMP      r0,#0
0001e0  d111              BNE      |L151.518|
0001e2  499e              LDR      r1,|L151.1116|
0001e4  48a0              LDR      r0,|L151.1128|
0001e6  f7fffffe          BL       strstr
0001ea  2800              CMP      r0,#0
0001ec  d10b              BNE      |L151.518|
0001ee  49a0              LDR      r1,|L151.1136|
0001f0  489d              LDR      r0,|L151.1128|
0001f2  f7fffffe          BL       strstr
0001f6  2800              CMP      r0,#0
0001f8  d105              BNE      |L151.518|
0001fa  499e              LDR      r1,|L151.1140|
0001fc  489a              LDR      r0,|L151.1128|
0001fe  f7fffffe          BL       strstr
000202  2800              CMP      r0,#0
000204  d008              BEQ      |L151.536|
                  |L151.518|
;;;1847   		memset(exception,0,200);	
000206  21c8              MOVS     r1,#0xc8
000208  489b              LDR      r0,|L151.1144|
00020a  f7fffffe          BL       __aeabi_memclr
;;;1848   		strcat(exception,"exception : COMPARED RESPONCES IN THE DATA\n\n\n\n");	
00020e  499b              LDR      r1,|L151.1148|
000210  4899              LDR      r0,|L151.1144|
000212  f7fffffe          BL       strcat
000216  e003              B        |L151.544|
                  |L151.536|
;;;1849   		}
;;;1850   		else{memset(exception,0,200);}
000218  21c8              MOVS     r1,#0xc8
00021a  4897              LDR      r0,|L151.1144|
00021c  f7fffffe          BL       __aeabi_memclr
                  |L151.544|
;;;1851   
;;;1852   	
;;;1853   		qwe=strlen(uart_string_gsm);
000220  4883              LDR      r0,|L151.1072|
000222  f7fffffe          BL       strlen
000226  4996              LDR      r1,|L151.1152|
000228  6008              STR      r0,[r1,#0]  ; qwe
;;;1854   		memset(uart_string_gsm,0,qwe);
00022a  4608              MOV      r0,r1
00022c  6801              LDR      r1,[r0,#0]  ; qwe
00022e  4880              LDR      r0,|L151.1072|
000230  f7fffffe          BL       __aeabi_memclr
;;;1855   		
;;;1856   
;;;1857   	
;;;1858   		
;;;1859   		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT",tmeout);	
000234  4879              LDR      r0,|L151.1052|
000236  6800              LDR      r0,[r0,#0]  ; tmeout
000238  4b92              LDR      r3,|L151.1156|
00023a  4a88              LDR      r2,|L151.1116|
00023c  4992              LDR      r1,|L151.1160|
00023e  9000              STR      r0,[sp,#0]
000240  4892              LDR      r0,|L151.1164|
000242  f7fffffe          BL       send_GSM
;;;1860   								cond =mystrstr(uart_string_gsm,'>');
000246  213e              MOVS     r1,#0x3e
000248  4879              LDR      r0,|L151.1072|
00024a  f7fffffe          BL       mystrstr
00024e  4990              LDR      r1,|L151.1168|
000250  7008              STRB     r0,[r1,#0]
;;;1861   									if(cond)	
000252  4608              MOV      r0,r1
000254  7800              LDRB     r0,[r0,#0]  ; cond
000256  2800              CMP      r0,#0
000258  d101              BNE      |L151.606|
00025a  f001f803          BL       |L151.4708|
                  |L151.606|
;;;1862   									{	
;;;1863   									clear();
00025e  f7fffffe          BL       clear
;;;1864   									memset(uart_string_gsm,0,5000);
000262  498c              LDR      r1,|L151.1172|
000264  4872              LDR      r0,|L151.1072|
000266  f7fffffe          BL       __aeabi_memclr
;;;1865   									if(strlen(exception) > 5){
00026a  4883              LDR      r0,|L151.1144|
00026c  f7fffffe          BL       strlen
000270  2805              CMP      r0,#5
000272  d905              BLS      |L151.640|
;;;1866   									qwe=strlen(exception);
000274  4880              LDR      r0,|L151.1144|
000276  f7fffffe          BL       strlen
00027a  4981              LDR      r1,|L151.1152|
00027c  6008              STR      r0,[r1,#0]  ; qwe
00027e  e004              B        |L151.650|
                  |L151.640|
;;;1867   									}
;;;1868   									else{										
;;;1869   									qwe=strlen(sd_data);
000280  4879              LDR      r0,|L151.1128|
000282  f7fffffe          BL       strlen
000286  497e              LDR      r1,|L151.1152|
000288  6008              STR      r0,[r1,#0]  ; qwe
                  |L151.650|
;;;1870   									}										
;;;1871   									tout=0;
00028a  2000              MOVS     r0,#0
00028c  4982              LDR      r1,|L151.1176|
00028e  6008              STR      r0,[r1,#0]  ; tout
;;;1872   									k2=0;
000290  4982              LDR      r1,|L151.1180|
000292  6008              STR      r0,[r1,#0]  ; k2
;;;1873   									for(k=0;k<(qwe);k++)
000294  4982              LDR      r1,|L151.1184|
000296  6008              STR      r0,[r1,#0]  ; k
000298  e018              B        |L151.716|
                  |L151.666|
;;;1874   									{
;;;1875   										if(strlen(exception) > 5){
00029a  4877              LDR      r0,|L151.1144|
00029c  f7fffffe          BL       strlen
0002a0  2805              CMP      r0,#5
0002a2  d907              BLS      |L151.692|
;;;1876   										uart_putchar(UART1_BASE_PTR, exception[k]);	
0002a4  4874              LDR      r0,|L151.1144|
0002a6  4a7e              LDR      r2,|L151.1184|
0002a8  6812              LDR      r2,[r2,#0]  ; k
0002aa  5c81              LDRB     r1,[r0,r2]
0002ac  487d              LDR      r0,|L151.1188|
0002ae  f7fffffe          BL       uart_putchar
0002b2  e006              B        |L151.706|
                  |L151.692|
;;;1877   										}
;;;1878   										else{										
;;;1879   										uart_putchar(UART1_BASE_PTR, sd_data[k]);
0002b4  486c              LDR      r0,|L151.1128|
0002b6  4a7a              LDR      r2,|L151.1184|
0002b8  6812              LDR      r2,[r2,#0]  ; k
0002ba  5c81              LDRB     r1,[r0,r2]
0002bc  4879              LDR      r0,|L151.1188|
0002be  f7fffffe          BL       uart_putchar
                  |L151.706|
0002c2  4877              LDR      r0,|L151.1184|
0002c4  6800              LDR      r0,[r0,#0]            ;1873  ; k
0002c6  1c40              ADDS     r0,r0,#1              ;1873
0002c8  4975              LDR      r1,|L151.1184|
0002ca  6008              STR      r0,[r1,#0]            ;1873  ; k
                  |L151.716|
0002cc  4874              LDR      r0,|L151.1184|
0002ce  6800              LDR      r0,[r0,#0]            ;1873  ; k
0002d0  496b              LDR      r1,|L151.1152|
0002d2  6809              LDR      r1,[r1,#0]            ;1873  ; qwe
0002d4  4288              CMP      r0,r1                 ;1873
0002d6  dbe0              BLT      |L151.666|
;;;1880   										}
;;;1881   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
0002d8  210a              MOVS     r1,#0xa
0002da  4872              LDR      r0,|L151.1188|
0002dc  f7fffffe          BL       uart_putchar
0002e0  211a              MOVS     r1,#0x1a
0002e2  4870              LDR      r0,|L151.1188|
0002e4  f7fffffe          BL       uart_putchar
0002e8  211a              MOVS     r1,#0x1a
0002ea  486e              LDR      r0,|L151.1188|
0002ec  f7fffffe          BL       uart_putchar
0002f0  211a              MOVS     r1,#0x1a
0002f2  486c              LDR      r0,|L151.1188|
0002f4  f7fffffe          BL       uart_putchar
0002f8  211a              MOVS     r1,#0x1a
0002fa  486a              LDR      r0,|L151.1188|
0002fc  f7fffffe          BL       uart_putchar
000300  211a              MOVS     r1,#0x1a
000302  4868              LDR      r0,|L151.1188|
000304  f7fffffe          BL       uart_putchar
000308  211a              MOVS     r1,#0x1a
00030a  4866              LDR      r0,|L151.1188|
00030c  f7fffffe          BL       uart_putchar
;;;1882   									do
000310  bf00              NOP      
                  |L151.786|
;;;1883   																{q1=strstr(uart_string_gsm,"SEND OK");
000312  4956              LDR      r1,|L151.1132|
000314  4846              LDR      r0,|L151.1072|
000316  f7fffffe          BL       strstr
00031a  4963              LDR      r1,|L151.1192|
00031c  6008              STR      r0,[r1,#0]  ; q1
;;;1884   																	q2=strstr(uart_string_gsm, "ERROR");
00031e  494f              LDR      r1,|L151.1116|
000320  4843              LDR      r0,|L151.1072|
000322  f7fffffe          BL       strstr
000326  4961              LDR      r1,|L151.1196|
000328  6008              STR      r0,[r1,#0]  ; q2
;;;1885   																		q3=strstr(uart_string_gsm, "FAIL");	
00032a  4951              LDR      r1,|L151.1136|
00032c  4840              LDR      r0,|L151.1072|
00032e  f7fffffe          BL       strstr
000332  495f              LDR      r1,|L151.1200|
000334  6008              STR      r0,[r1,#0]  ; q3
;;;1886   																			q4=strstr(uart_string_gsm, "DEACT");	
000336  494f              LDR      r1,|L151.1140|
000338  483d              LDR      r0,|L151.1072|
00033a  f7fffffe          BL       strstr
00033e  495d              LDR      r1,|L151.1204|
000340  6008              STR      r0,[r1,#0]  ; q4
;;;1887   																	
;;;1888   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) ); //|| (timeout < 1)   
000342  4859              LDR      r0,|L151.1192|
000344  6800              LDR      r0,[r0,#0]  ; q1
000346  2800              CMP      r0,#0
000348  d10f              BNE      |L151.874|
00034a  4858              LDR      r0,|L151.1196|
00034c  6800              LDR      r0,[r0,#0]  ; q2
00034e  2800              CMP      r0,#0
000350  d10b              BNE      |L151.874|
000352  4857              LDR      r0,|L151.1200|
000354  6800              LDR      r0,[r0,#0]  ; q3
000356  2800              CMP      r0,#0
000358  d107              BNE      |L151.874|
00035a  4608              MOV      r0,r1
00035c  6800              LDR      r0,[r0,#0]  ; q4
00035e  2800              CMP      r0,#0
000360  d103              BNE      |L151.874|
000362  484d              LDR      r0,|L151.1176|
000364  6800              LDR      r0,[r0,#0]  ; tout
000366  2808              CMP      r0,#8
000368  ddd3              BLE      |L151.786|
                  |L151.874|
;;;1889   																delay(10);clear();
00036a  200a              MOVS     r0,#0xa
00036c  f7fffffe          BL       delay
000370  f7fffffe          BL       clear
;;;1890   														uart_putchar(UART1_BASE_PTR,0x1A);
000374  211a              MOVS     r1,#0x1a
000376  484b              LDR      r0,|L151.1188|
000378  f7fffffe          BL       uart_putchar
;;;1891   												delay(10);
00037c  200a              MOVS     r0,#0xa
00037e  f7fffffe          BL       delay
;;;1892   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000382  211a              MOVS     r1,#0x1a
000384  4847              LDR      r0,|L151.1188|
000386  f7fffffe          BL       uart_putchar
00038a  211a              MOVS     r1,#0x1a
00038c  4845              LDR      r0,|L151.1188|
00038e  f7fffffe          BL       uart_putchar
000392  211a              MOVS     r1,#0x1a
000394  4843              LDR      r0,|L151.1188|
000396  f7fffffe          BL       uart_putchar
;;;1893   delay(50);
00039a  2032              MOVS     r0,#0x32
00039c  f7fffffe          BL       delay
;;;1894   if(strstr(uart_string_gsm,"SEND OK"))
0003a0  4932              LDR      r1,|L151.1132|
0003a2  4823              LDR      r0,|L151.1072|
0003a4  f7fffffe          BL       strstr
0003a8  2800              CMP      r0,#0
0003aa  d013              BEQ      |L151.980|
;;;1895   {
;;;1896   cursorvaluene=cursor_val(sd_data,enters-3);
0003ac  482d              LDR      r0,|L151.1124|
0003ae  6800              LDR      r0,[r0,#0]  ; enters
0003b0  1ec1              SUBS     r1,r0,#3
0003b2  482d              LDR      r0,|L151.1128|
0003b4  f7fffffe          BL       cursor_val
0003b8  493f              LDR      r1,|L151.1208|
0003ba  6008              STR      r0,[r1,#0]  ; cursorvaluene
;;;1897   cursorvaluepr+=cursorvaluene;
0003bc  4825              LDR      r0,|L151.1108|
0003be  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
0003c0  6809              LDR      r1,[r1,#0]  ; cursorvaluene
0003c2  1840              ADDS     r0,r0,r1
0003c4  4923              LDR      r1,|L151.1108|
0003c6  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1898   k5++;
0003c8  4820              LDR      r0,|L151.1100|
0003ca  6800              LDR      r0,[r0,#0]  ; k5
0003cc  1c40              ADDS     r0,r0,#1
0003ce  491f              LDR      r1,|L151.1100|
0003d0  6008              STR      r0,[r1,#0]  ; k5
0003d2  e3fc              B        |L151.3022|
                  |L151.980|
;;;1899   }
;;;1900   else{remove_all_chars(data, '\n', '\n');
0003d4  220a              MOVS     r2,#0xa
0003d6  4611              MOV      r1,r2
0003d8  4819              LDR      r0,|L151.1088|
0003da  f7fffffe          BL       remove_all_chars
;;;1901   			strcat(data,"CH\n");
0003de  4937              LDR      r1,|L151.1212|
0003e0  4817              LDR      r0,|L151.1088|
0003e2  f7fffffe          BL       strcat
;;;1902   
;;;1903   	delay(100);
0003e6  2064              MOVS     r0,#0x64
0003e8  f7fffffe          BL       delay
;;;1904   		clear();//memset(uart_string_gsm,0,5000);
0003ec  f7fffffe          BL       clear
;;;1905   	
;;;1906   	memset(at_,0,100);
0003f0  2164              MOVS     r1,#0x64
0003f2  4807              LDR      r0,|L151.1040|
0003f4  f7fffffe          BL       __aeabi_memclr
;;;1907   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0003f8  4811              LDR      r0,|L151.1088|
0003fa  f7fffffe          BL       strlen
0003fe  e05f              B        |L151.1216|
                  |L151.1024|
                          DCD      ||fsz||
                  |L151.1028|
                          DCD      times
                  |L151.1032|
                          DCD      int_erval
                  |L151.1036|
                          DCD      temp
                  |L151.1040|
                          DCD      at_
                  |L151.1044|
                          DCD      drive
                  |L151.1048|
                          DCD      ||.conststring||+0x5ac
                  |L151.1052|
                          DCD      tmeout
                  |L151.1056|
                          DCD      ||.conststring||+0x10
                  |L151.1060|
                          DCD      ||.conststring||+0x18
                  |L151.1064|
                          DCD      ||.conststring||+0x2c
                  |L151.1068|
                          DCD      fsize
                  |L151.1072|
                          DCD      uart_string_gsm
                  |L151.1076|
                          DCD      0x44610000
                  |L151.1080|
                          DCD      log0
                  |L151.1084|
                          DCD      0x400ff080
                  |L151.1088|
                          DCD      data
                  |L151.1092|
                          DCD      ||.conststring||+0x430
                  |L151.1096|
                          DCD      rtcticks2
                  |L151.1100|
                          DCD      ||k5||
                  |L151.1104|
                          DCD      ||.conststring||+0x5cc
                  |L151.1108|
                          DCD      cursorvaluepr
                  |L151.1112|
                          DCD      ||.conststring||+0x600
                  |L151.1116|
                          DCD      ||.conststring||+0xe0
                  |L151.1120|
                          DCD      cntendl
                  |L151.1124|
                          DCD      enters
                  |L151.1128|
                          DCD      sd_data
                  |L151.1132|
                          DCD      ||.conststring||+0x628
                  |L151.1136|
                          DCD      ||.conststring||+0x630
                  |L151.1140|
                          DCD      ||.conststring||+0x638
                  |L151.1144|
                          DCD      exception
                  |L151.1148|
                          DCD      ||.conststring||+0x640
                  |L151.1152|
                          DCD      qwe
                  |L151.1156|
                          DCD      ||.conststring||+0x670
                  |L151.1160|
                          DCD      ||.conststring||+0x20
                  |L151.1164|
                          DCD      ||.conststring||+0x678
                  |L151.1168|
                          DCD      cond
                  |L151.1172|
                          DCD      0x00001388
                  |L151.1176|
                          DCD      tout
                  |L151.1180|
                          DCD      ||k2||
                  |L151.1184|
                          DCD      k
                  |L151.1188|
                          DCD      0x4006b000
                  |L151.1192|
                          DCD      ||q1||
                  |L151.1196|
                          DCD      ||q2||
                  |L151.1200|
                          DCD      ||q3||
                  |L151.1204|
                          DCD      ||q4||
                  |L151.1208|
                          DCD      cursorvaluene
                  |L151.1212|
                          DCD      ||.conststring||+0x434
                  |L151.1216|
0004c0  1c44              ADDS     r4,r0,#1
0004c2  4623              MOV      r3,r4
0004c4  4afd              LDR      r2,|L151.2236|
0004c6  49fe              LDR      r1,|L151.2240|
0004c8  48fe              LDR      r0,|L151.2244|
0004ca  f7fffffe          BL       __2sprintf
;;;1908   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0004ce  2005              MOVS     r0,#5
0004d0  4bfd              LDR      r3,|L151.2248|
0004d2  4afe              LDR      r2,|L151.2252|
0004d4  49fe              LDR      r1,|L151.2256|
0004d6  9000              STR      r0,[sp,#0]
0004d8  48fa              LDR      r0,|L151.2244|
0004da  f7fffffe          BL       send_SD
;;;1909   
;;;1910   	
;;;1911   clear();	
0004de  f7fffffe          BL       clear
;;;1912   									k2=0;									//string array counter for uart 1
0004e2  2000              MOVS     r0,#0
0004e4  49fb              LDR      r1,|L151.2260|
0004e6  6008              STR      r0,[r1,#0]  ; k2
;;;1913   									tout=0;	
0004e8  49fb              LDR      r1,|L151.2264|
0004ea  6008              STR      r0,[r1,#0]  ; tout
;;;1914   		for(k=0;k<strlen(data);k++)
0004ec  49fb              LDR      r1,|L151.2268|
0004ee  6008              STR      r0,[r1,#0]  ; k
0004f0  e00b              B        |L151.1290|
                  |L151.1266|
;;;1915   		{
;;;1916   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0004f2  48fb              LDR      r0,|L151.2272|
0004f4  4af9              LDR      r2,|L151.2268|
0004f6  6812              LDR      r2,[r2,#0]  ; k
0004f8  5c81              LDRB     r1,[r0,r2]
0004fa  48fa              LDR      r0,|L151.2276|
0004fc  f7fffffe          BL       uart_putchar
000500  48f6              LDR      r0,|L151.2268|
000502  6800              LDR      r0,[r0,#0]            ;1914  ; k
000504  1c40              ADDS     r0,r0,#1              ;1914
000506  49f5              LDR      r1,|L151.2268|
000508  6008              STR      r0,[r1,#0]            ;1914  ; k
                  |L151.1290|
00050a  48f5              LDR      r0,|L151.2272|
00050c  f7fffffe          BL       strlen
000510  49f2              LDR      r1,|L151.2268|
000512  6809              LDR      r1,[r1,#0]            ;1914  ; k
000514  4288              CMP      r0,r1                 ;1914
000516  d8ec              BHI      |L151.1266|
;;;1917   		}	
;;;1918   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000518  210a              MOVS     r1,#0xa
00051a  48f2              LDR      r0,|L151.2276|
00051c  f7fffffe          BL       uart_putchar
000520  210a              MOVS     r1,#0xa
000522  48f0              LDR      r0,|L151.2276|
000524  f7fffffe          BL       uart_putchar
000528  210a              MOVS     r1,#0xa
00052a  48ee              LDR      r0,|L151.2276|
00052c  f7fffffe          BL       uart_putchar
000530  210a              MOVS     r1,#0xa
000532  48ec              LDR      r0,|L151.2276|
000534  f7fffffe          BL       uart_putchar
000538  210a              MOVS     r1,#0xa
00053a  48ea              LDR      r0,|L151.2276|
00053c  f7fffffe          BL       uart_putchar
000540  210a              MOVS     r1,#0xa
000542  48e8              LDR      r0,|L151.2276|
000544  f7fffffe          BL       uart_putchar
000548  210a              MOVS     r1,#0xa
00054a  48e6              LDR      r0,|L151.2276|
00054c  f7fffffe          BL       uart_putchar
000550  210a              MOVS     r1,#0xa
000552  48e4              LDR      r0,|L151.2276|
000554  f7fffffe          BL       uart_putchar
000558  210a              MOVS     r1,#0xa
00055a  48e2              LDR      r0,|L151.2276|
00055c  f7fffffe          BL       uart_putchar
000560  210a              MOVS     r1,#0xa
000562  48e0              LDR      r0,|L151.2276|
000564  f7fffffe          BL       uart_putchar
000568  210a              MOVS     r1,#0xa
00056a  48de              LDR      r0,|L151.2276|
00056c  f7fffffe          BL       uart_putchar
000570  210a              MOVS     r1,#0xa
000572  48dc              LDR      r0,|L151.2276|
000574  f7fffffe          BL       uart_putchar
000578  210a              MOVS     r1,#0xa
00057a  48da              LDR      r0,|L151.2276|
00057c  f7fffffe          BL       uart_putchar
000580  210a              MOVS     r1,#0xa
000582  48d8              LDR      r0,|L151.2276|
000584  f7fffffe          BL       uart_putchar
000588  210a              MOVS     r1,#0xa
00058a  48d6              LDR      r0,|L151.2276|
00058c  f7fffffe          BL       uart_putchar
000590  210a              MOVS     r1,#0xa
000592  48d4              LDR      r0,|L151.2276|
000594  f7fffffe          BL       uart_putchar
000598  210a              MOVS     r1,#0xa
00059a  48d2              LDR      r0,|L151.2276|
00059c  f7fffffe          BL       uart_putchar
0005a0  210a              MOVS     r1,#0xa
0005a2  48d0              LDR      r0,|L151.2276|
0005a4  f7fffffe          BL       uart_putchar
0005a8  210a              MOVS     r1,#0xa
0005aa  48ce              LDR      r0,|L151.2276|
0005ac  f7fffffe          BL       uart_putchar
0005b0  210a              MOVS     r1,#0xa
0005b2  48cc              LDR      r0,|L151.2276|
0005b4  f7fffffe          BL       uart_putchar
0005b8  210a              MOVS     r1,#0xa
0005ba  48ca              LDR      r0,|L151.2276|
0005bc  f7fffffe          BL       uart_putchar
0005c0  210a              MOVS     r1,#0xa
0005c2  48c8              LDR      r0,|L151.2276|
0005c4  f7fffffe          BL       uart_putchar
0005c8  210a              MOVS     r1,#0xa
0005ca  48c6              LDR      r0,|L151.2276|
0005cc  f7fffffe          BL       uart_putchar
0005d0  210a              MOVS     r1,#0xa
0005d2  48c4              LDR      r0,|L151.2276|
0005d4  f7fffffe          BL       uart_putchar
0005d8  210a              MOVS     r1,#0xa
0005da  48c2              LDR      r0,|L151.2276|
0005dc  f7fffffe          BL       uart_putchar
0005e0  210a              MOVS     r1,#0xa
0005e2  48c0              LDR      r0,|L151.2276|
0005e4  f7fffffe          BL       uart_putchar
0005e8  210a              MOVS     r1,#0xa
0005ea  48be              LDR      r0,|L151.2276|
0005ec  f7fffffe          BL       uart_putchar
0005f0  210a              MOVS     r1,#0xa
0005f2  48bc              LDR      r0,|L151.2276|
0005f4  f7fffffe          BL       uart_putchar
0005f8  210a              MOVS     r1,#0xa
0005fa  48ba              LDR      r0,|L151.2276|
0005fc  f7fffffe          BL       uart_putchar
000600  210a              MOVS     r1,#0xa
000602  48b8              LDR      r0,|L151.2276|
000604  f7fffffe          BL       uart_putchar
000608  210a              MOVS     r1,#0xa
00060a  48b6              LDR      r0,|L151.2276|
00060c  f7fffffe          BL       uart_putchar
000610  210a              MOVS     r1,#0xa
000612  48b4              LDR      r0,|L151.2276|
000614  f7fffffe          BL       uart_putchar
000618  210a              MOVS     r1,#0xa
00061a  48b2              LDR      r0,|L151.2276|
00061c  f7fffffe          BL       uart_putchar
000620  210a              MOVS     r1,#0xa
000622  48b0              LDR      r0,|L151.2276|
000624  f7fffffe          BL       uart_putchar
000628  210a              MOVS     r1,#0xa
00062a  48ae              LDR      r0,|L151.2276|
00062c  f7fffffe          BL       uart_putchar
000630  210a              MOVS     r1,#0xa
000632  48ac              LDR      r0,|L151.2276|
000634  f7fffffe          BL       uart_putchar
000638  210a              MOVS     r1,#0xa
00063a  48aa              LDR      r0,|L151.2276|
00063c  f7fffffe          BL       uart_putchar
000640  210a              MOVS     r1,#0xa
000642  48a8              LDR      r0,|L151.2276|
000644  f7fffffe          BL       uart_putchar
000648  210a              MOVS     r1,#0xa
00064a  48a6              LDR      r0,|L151.2276|
00064c  f7fffffe          BL       uart_putchar
000650  210a              MOVS     r1,#0xa
000652  48a4              LDR      r0,|L151.2276|
000654  f7fffffe          BL       uart_putchar
000658  210a              MOVS     r1,#0xa
00065a  48a2              LDR      r0,|L151.2276|
00065c  f7fffffe          BL       uart_putchar
000660  210a              MOVS     r1,#0xa
000662  48a0              LDR      r0,|L151.2276|
000664  f7fffffe          BL       uart_putchar
000668  210a              MOVS     r1,#0xa
00066a  489e              LDR      r0,|L151.2276|
00066c  f7fffffe          BL       uart_putchar
000670  210a              MOVS     r1,#0xa
000672  489c              LDR      r0,|L151.2276|
000674  f7fffffe          BL       uart_putchar
000678  210a              MOVS     r1,#0xa
00067a  489a              LDR      r0,|L151.2276|
00067c  f7fffffe          BL       uart_putchar
000680  210a              MOVS     r1,#0xa
000682  4898              LDR      r0,|L151.2276|
000684  f7fffffe          BL       uart_putchar
000688  210a              MOVS     r1,#0xa
00068a  4896              LDR      r0,|L151.2276|
00068c  f7fffffe          BL       uart_putchar
000690  210a              MOVS     r1,#0xa
000692  4894              LDR      r0,|L151.2276|
000694  f7fffffe          BL       uart_putchar
000698  210a              MOVS     r1,#0xa
00069a  4892              LDR      r0,|L151.2276|
00069c  f7fffffe          BL       uart_putchar
0006a0  210a              MOVS     r1,#0xa
0006a2  4890              LDR      r0,|L151.2276|
0006a4  f7fffffe          BL       uart_putchar
0006a8  210a              MOVS     r1,#0xa
0006aa  488e              LDR      r0,|L151.2276|
0006ac  f7fffffe          BL       uart_putchar
0006b0  210a              MOVS     r1,#0xa
0006b2  488c              LDR      r0,|L151.2276|
0006b4  f7fffffe          BL       uart_putchar
0006b8  210a              MOVS     r1,#0xa
0006ba  488a              LDR      r0,|L151.2276|
0006bc  f7fffffe          BL       uart_putchar
0006c0  210a              MOVS     r1,#0xa
0006c2  4888              LDR      r0,|L151.2276|
0006c4  f7fffffe          BL       uart_putchar
0006c8  210a              MOVS     r1,#0xa
0006ca  4886              LDR      r0,|L151.2276|
0006cc  f7fffffe          BL       uart_putchar
0006d0  210a              MOVS     r1,#0xa
0006d2  4884              LDR      r0,|L151.2276|
0006d4  f7fffffe          BL       uart_putchar
0006d8  210a              MOVS     r1,#0xa
0006da  4882              LDR      r0,|L151.2276|
0006dc  f7fffffe          BL       uart_putchar
;;;1919   														//timer counts to wait for characters in uart 1 									
;;;1920   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0006e0  bf00              NOP      
                  |L151.1762|
0006e2  4981              LDR      r1,|L151.2280|
0006e4  4881              LDR      r0,|L151.2284|
0006e6  f7fffffe          BL       strstr
0006ea  2800              CMP      r0,#0
0006ec  d109              BNE      |L151.1794|
0006ee  4976              LDR      r1,|L151.2248|
0006f0  487e              LDR      r0,|L151.2284|
0006f2  f7fffffe          BL       strstr
0006f6  2800              CMP      r0,#0
0006f8  d103              BNE      |L151.1794|
0006fa  4877              LDR      r0,|L151.2264|
0006fc  6800              LDR      r0,[r0,#0]  ; tout
0006fe  2805              CMP      r0,#5
000700  ddef              BLE      |L151.1762|
                  |L151.1794|
;;;1921   									{	}
;;;1922   	                clear();
000702  f7fffffe          BL       clear
;;;1923   									memset(data,0,strlen(data));
000706  4876              LDR      r0,|L151.2272|
000708  f7fffffe          BL       strlen
00070c  4604              MOV      r4,r0
00070e  4621              MOV      r1,r4
000710  4873              LDR      r0,|L151.2272|
000712  f7fffffe          BL       __aeabi_memclr
;;;1924   									clear();
000716  f7fffffe          BL       clear
;;;1925   
;;;1926   								
;;;1927   
;;;1928   
;;;1929   
;;;1930   //	log_it();
;;;1931   
;;;1932   			memset(data,0,strlen(data));
00071a  4871              LDR      r0,|L151.2272|
00071c  f7fffffe          BL       strlen
000720  4604              MOV      r4,r0
000722  4621              MOV      r1,r4
000724  486e              LDR      r0,|L151.2272|
000726  f7fffffe          BL       __aeabi_memclr
;;;1933   //*********************************tcp_initialization();***************************************//
;;;1934   
;;;1935   	
;;;1936   msg_sim800(); 
00072a  f7fffffe          BL       msg_sim800
;;;1937   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00072e  2005              MOVS     r0,#5
000730  4b65              LDR      r3,|L151.2248|
000732  4a66              LDR      r2,|L151.2252|
000734  496e              LDR      r1,|L151.2288|
000736  9000              STR      r0,[sp,#0]
000738  486e              LDR      r0,|L151.2292|
00073a  f7fffffe          BL       send_GSM
;;;1938   delay(100);
00073e  2064              MOVS     r0,#0x64
000740  f7fffffe          BL       delay
;;;1939   send_GSM("\r\nAT+CFUN=1\r\n", "Ready", "NOT INSERTED" , "ERROR", 4);	
000744  2004              MOVS     r0,#4
000746  4b60              LDR      r3,|L151.2248|
000748  4a6b              LDR      r2,|L151.2296|
00074a  496c              LDR      r1,|L151.2300|
00074c  9000              STR      r0,[sp,#0]
00074e  486c              LDR      r0,|L151.2304|
000750  f7fffffe          BL       send_GSM
;;;1940   GPS_COLLECT2();
000754  f7fffffe          BL       GPS_COLLECT2
;;;1941   strcat(data,"CH\n");		
000758  496a              LDR      r1,|L151.2308|
00075a  4861              LDR      r0,|L151.2272|
00075c  f7fffffe          BL       strcat
;;;1942   GPS_COLLECT2();
000760  f7fffffe          BL       GPS_COLLECT2
;;;1943   strcat(data,"CH\n");	
000764  4967              LDR      r1,|L151.2308|
000766  485e              LDR      r0,|L151.2272|
000768  f7fffffe          BL       strcat
;;;1944   GPS_COLLECT2();
00076c  f7fffffe          BL       GPS_COLLECT2
;;;1945   strcat(data,"CH\n");
000770  4964              LDR      r1,|L151.2308|
000772  485b              LDR      r0,|L151.2272|
000774  f7fffffe          BL       strcat
;;;1946   cond201=(strstr(uart_string_gsm, "OK"));
000778  495d              LDR      r1,|L151.2288|
00077a  485c              LDR      r0,|L151.2284|
00077c  f7fffffe          BL       strstr
000780  4961              LDR      r1,|L151.2312|
000782  6008              STR      r0,[r1,#0]  ; cond201
;;;1947   cond200=(strstr(uart_string_gsm, "ERROR"));
000784  4950              LDR      r1,|L151.2248|
000786  4859              LDR      r0,|L151.2284|
000788  f7fffffe          BL       strstr
00078c  495f              LDR      r1,|L151.2316|
00078e  6008              STR      r0,[r1,#0]  ; cond200
;;;1948   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
000790  485d              LDR      r0,|L151.2312|
000792  6800              LDR      r0,[r0,#0]  ; cond201
000794  2800              CMP      r0,#0
000796  d101              BNE      |L151.1948|
000798  2001              MOVS     r0,#1
00079a  e000              B        |L151.1950|
                  |L151.1948|
00079c  2000              MOVS     r0,#0
                  |L151.1950|
00079e  2800              CMP      r0,#0
                  |L151.1952|
0007a0  d06d              BEQ      |L151.2174|
0007a2  485a              LDR      r0,|L151.2316|
0007a4  6800              LDR      r0,[r0,#0]  ; cond200
0007a6  2800              CMP      r0,#0
0007a8  d101              BNE      |L151.1966|
0007aa  2001              MOVS     r0,#1
0007ac  e000              B        |L151.1968|
                  |L151.1966|
0007ae  2000              MOVS     r0,#0
                  |L151.1968|
0007b0  2800              CMP      r0,#0
0007b2  d0f5              BEQ      |L151.1952|
0007b4  4856              LDR      r0,|L151.2320|
0007b6  6800              LDR      r0,[r0,#0]  ; sleep_flag
0007b8  2801              CMP      r0,#1
0007ba  d0f1              BEQ      |L151.1952|
;;;1949   {
;;;1950   delay(100);
0007bc  2064              MOVS     r0,#0x64
0007be  f7fffffe          BL       delay
;;;1951   clear();//memset(uart_string_gsm,0,5000);
0007c2  f7fffffe          BL       clear
;;;1952   memset(at_,0,100);
0007c6  2164              MOVS     r1,#0x64
0007c8  483e              LDR      r0,|L151.2244|
0007ca  f7fffffe          BL       __aeabi_memclr
;;;1953   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0007ce  4844              LDR      r0,|L151.2272|
0007d0  f7fffffe          BL       strlen
0007d4  1c44              ADDS     r4,r0,#1
0007d6  4623              MOV      r3,r4
0007d8  4a38              LDR      r2,|L151.2236|
0007da  4939              LDR      r1,|L151.2240|
0007dc  4839              LDR      r0,|L151.2244|
0007de  f7fffffe          BL       __2sprintf
;;;1954   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0007e2  2005              MOVS     r0,#5
0007e4  4b38              LDR      r3,|L151.2248|
0007e6  4a39              LDR      r2,|L151.2252|
0007e8  4939              LDR      r1,|L151.2256|
0007ea  9000              STR      r0,[sp,#0]
0007ec  4835              LDR      r0,|L151.2244|
0007ee  f7fffffe          BL       send_SD
;;;1955   clear();	
0007f2  f7fffffe          BL       clear
;;;1956   k2=0;									//string array counter for uart 1
0007f6  2000              MOVS     r0,#0
0007f8  4936              LDR      r1,|L151.2260|
0007fa  6008              STR      r0,[r1,#0]  ; k2
;;;1957   tout=0;	
0007fc  4936              LDR      r1,|L151.2264|
0007fe  6008              STR      r0,[r1,#0]  ; tout
;;;1958   for(k=0;k<strlen(data);k++)
000800  4936              LDR      r1,|L151.2268|
000802  6008              STR      r0,[r1,#0]  ; k
000804  e00b              B        |L151.2078|
                  |L151.2054|
;;;1959   {
;;;1960   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000806  4836              LDR      r0,|L151.2272|
000808  4a34              LDR      r2,|L151.2268|
00080a  6812              LDR      r2,[r2,#0]  ; k
00080c  5c81              LDRB     r1,[r0,r2]
00080e  4835              LDR      r0,|L151.2276|
000810  f7fffffe          BL       uart_putchar
000814  4831              LDR      r0,|L151.2268|
000816  6800              LDR      r0,[r0,#0]            ;1958  ; k
000818  1c40              ADDS     r0,r0,#1              ;1958
00081a  4930              LDR      r1,|L151.2268|
00081c  6008              STR      r0,[r1,#0]            ;1958  ; k
                  |L151.2078|
00081e  4830              LDR      r0,|L151.2272|
000820  f7fffffe          BL       strlen
000824  492d              LDR      r1,|L151.2268|
000826  6809              LDR      r1,[r1,#0]            ;1958  ; k
000828  4288              CMP      r0,r1                 ;1958
00082a  d8ec              BHI      |L151.2054|
;;;1961   }	
;;;1962   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00082c  210a              MOVS     r1,#0xa
00082e  482d              LDR      r0,|L151.2276|
000830  f7fffffe          BL       uart_putchar
000834  210a              MOVS     r1,#0xa
000836  482b              LDR      r0,|L151.2276|
000838  f7fffffe          BL       uart_putchar
00083c  210a              MOVS     r1,#0xa
00083e  4829              LDR      r0,|L151.2276|
000840  f7fffffe          BL       uart_putchar
000844  210a              MOVS     r1,#0xa
000846  4827              LDR      r0,|L151.2276|
000848  f7fffffe          BL       uart_putchar
00084c  210a              MOVS     r1,#0xa
00084e  4825              LDR      r0,|L151.2276|
000850  f7fffffe          BL       uart_putchar
000854  210a              MOVS     r1,#0xa
000856  4823              LDR      r0,|L151.2276|
000858  f7fffffe          BL       uart_putchar
00085c  210a              MOVS     r1,#0xa
00085e  4821              LDR      r0,|L151.2276|
000860  f7fffffe          BL       uart_putchar
000864  210a              MOVS     r1,#0xa
000866  481f              LDR      r0,|L151.2276|
000868  f7fffffe          BL       uart_putchar
00086c  210a              MOVS     r1,#0xa
00086e  481d              LDR      r0,|L151.2276|
000870  f7fffffe          BL       uart_putchar
000874  210a              MOVS     r1,#0xa
000876  481b              LDR      r0,|L151.2276|
000878  e002              B        |L151.2176|
                  |L151.2170|
00087a  e3fd              B        |L151.4216|
                  |L151.2172|
00087c  e39a              B        |L151.4020|
                  |L151.2174|
00087e  e114              B        |L151.2730|
                  |L151.2176|
000880  f7fffffe          BL       uart_putchar
000884  210a              MOVS     r1,#0xa
000886  4817              LDR      r0,|L151.2276|
000888  f7fffffe          BL       uart_putchar
00088c  210a              MOVS     r1,#0xa
00088e  4815              LDR      r0,|L151.2276|
000890  f7fffffe          BL       uart_putchar
000894  210a              MOVS     r1,#0xa
000896  4813              LDR      r0,|L151.2276|
000898  f7fffffe          BL       uart_putchar
00089c  210a              MOVS     r1,#0xa
00089e  4811              LDR      r0,|L151.2276|
0008a0  f7fffffe          BL       uart_putchar
0008a4  210a              MOVS     r1,#0xa
0008a6  480f              LDR      r0,|L151.2276|
0008a8  f7fffffe          BL       uart_putchar
0008ac  210a              MOVS     r1,#0xa
0008ae  480d              LDR      r0,|L151.2276|
0008b0  f7fffffe          BL       uart_putchar
0008b4  210a              MOVS     r1,#0xa
0008b6  480b              LDR      r0,|L151.2276|
0008b8  e02c              B        |L151.2324|
0008ba  0000              DCW      0x0000
                  |L151.2236|
                          DCD      drive
                  |L151.2240|
                          DCD      ||.conststring||+0x438
                  |L151.2244|
                          DCD      at_
                  |L151.2248|
                          DCD      ||.conststring||+0xe0
                  |L151.2252|
                          DCD      ||.conststring||+0x18
                  |L151.2256|
                          DCD      ||.conststring||+0x20
                  |L151.2260|
                          DCD      ||k2||
                  |L151.2264|
                          DCD      tout
                  |L151.2268|
                          DCD      k
                  |L151.2272|
                          DCD      data
                  |L151.2276|
                          DCD      0x4006b000
                  |L151.2280|
                          DCD      ||.conststring||+0x70
                  |L151.2284|
                          DCD      uart_string_gsm
                  |L151.2288|
                          DCD      ||.conststring||+0x2c
                  |L151.2292|
                          DCD      ||.conststring||+0x688
                  |L151.2296|
                          DCD      ||.conststring||+0x698
                  |L151.2300|
                          DCD      ||.conststring||+0x46c
                  |L151.2304|
                          DCD      ||.conststring||+0x6a8
                  |L151.2308|
                          DCD      ||.conststring||+0x434
                  |L151.2312|
                          DCD      cond201
                  |L151.2316|
                          DCD      cond200
                  |L151.2320|
                          DCD      sleep_flag
                  |L151.2324|
000914  f7fffffe          BL       uart_putchar
000918  210a              MOVS     r1,#0xa
00091a  48fe              LDR      r0,|L151.3348|
00091c  f7fffffe          BL       uart_putchar
000920  210a              MOVS     r1,#0xa
000922  48fc              LDR      r0,|L151.3348|
000924  f7fffffe          BL       uart_putchar
000928  210a              MOVS     r1,#0xa
00092a  48fa              LDR      r0,|L151.3348|
00092c  f7fffffe          BL       uart_putchar
000930  210a              MOVS     r1,#0xa
000932  48f8              LDR      r0,|L151.3348|
000934  f7fffffe          BL       uart_putchar
000938  210a              MOVS     r1,#0xa
00093a  48f6              LDR      r0,|L151.3348|
00093c  f7fffffe          BL       uart_putchar
000940  210a              MOVS     r1,#0xa
000942  48f4              LDR      r0,|L151.3348|
000944  f7fffffe          BL       uart_putchar
000948  210a              MOVS     r1,#0xa
00094a  48f2              LDR      r0,|L151.3348|
00094c  f7fffffe          BL       uart_putchar
000950  210a              MOVS     r1,#0xa
000952  48f0              LDR      r0,|L151.3348|
000954  f7fffffe          BL       uart_putchar
000958  210a              MOVS     r1,#0xa
00095a  48ee              LDR      r0,|L151.3348|
00095c  f7fffffe          BL       uart_putchar
000960  210a              MOVS     r1,#0xa
000962  48ec              LDR      r0,|L151.3348|
000964  f7fffffe          BL       uart_putchar
000968  210a              MOVS     r1,#0xa
00096a  48ea              LDR      r0,|L151.3348|
00096c  f7fffffe          BL       uart_putchar
000970  210a              MOVS     r1,#0xa
000972  48e8              LDR      r0,|L151.3348|
000974  f7fffffe          BL       uart_putchar
000978  210a              MOVS     r1,#0xa
00097a  48e6              LDR      r0,|L151.3348|
00097c  f7fffffe          BL       uart_putchar
000980  210a              MOVS     r1,#0xa
000982  48e4              LDR      r0,|L151.3348|
000984  f7fffffe          BL       uart_putchar
000988  210a              MOVS     r1,#0xa
00098a  48e2              LDR      r0,|L151.3348|
00098c  f7fffffe          BL       uart_putchar
000990  210a              MOVS     r1,#0xa
000992  48e0              LDR      r0,|L151.3348|
000994  f7fffffe          BL       uart_putchar
000998  210a              MOVS     r1,#0xa
00099a  48de              LDR      r0,|L151.3348|
00099c  f7fffffe          BL       uart_putchar
0009a0  210a              MOVS     r1,#0xa
0009a2  48dc              LDR      r0,|L151.3348|
0009a4  f7fffffe          BL       uart_putchar
0009a8  210a              MOVS     r1,#0xa
0009aa  48da              LDR      r0,|L151.3348|
0009ac  f7fffffe          BL       uart_putchar
0009b0  210a              MOVS     r1,#0xa
0009b2  48d8              LDR      r0,|L151.3348|
0009b4  f7fffffe          BL       uart_putchar
0009b8  210a              MOVS     r1,#0xa
0009ba  48d6              LDR      r0,|L151.3348|
0009bc  f7fffffe          BL       uart_putchar
0009c0  210a              MOVS     r1,#0xa
0009c2  48d4              LDR      r0,|L151.3348|
0009c4  f7fffffe          BL       uart_putchar
0009c8  210a              MOVS     r1,#0xa
0009ca  48d2              LDR      r0,|L151.3348|
0009cc  f7fffffe          BL       uart_putchar
0009d0  210a              MOVS     r1,#0xa
0009d2  48d0              LDR      r0,|L151.3348|
0009d4  f7fffffe          BL       uart_putchar
0009d8  210a              MOVS     r1,#0xa
0009da  48ce              LDR      r0,|L151.3348|
0009dc  f7fffffe          BL       uart_putchar
0009e0  210a              MOVS     r1,#0xa
0009e2  48cc              LDR      r0,|L151.3348|
0009e4  f7fffffe          BL       uart_putchar
0009e8  210a              MOVS     r1,#0xa
0009ea  48ca              LDR      r0,|L151.3348|
0009ec  f7fffffe          BL       uart_putchar
0009f0  210a              MOVS     r1,#0xa
0009f2  48c8              LDR      r0,|L151.3348|
0009f4  f7fffffe          BL       uart_putchar
0009f8  210a              MOVS     r1,#0xa
0009fa  48c6              LDR      r0,|L151.3348|
0009fc  f7fffffe          BL       uart_putchar
000a00  210a              MOVS     r1,#0xa
000a02  48c4              LDR      r0,|L151.3348|
000a04  f7fffffe          BL       uart_putchar
000a08  210a              MOVS     r1,#0xa
000a0a  48c2              LDR      r0,|L151.3348|
000a0c  f7fffffe          BL       uart_putchar
000a10  210a              MOVS     r1,#0xa
000a12  48c0              LDR      r0,|L151.3348|
000a14  f7fffffe          BL       uart_putchar
000a18  210a              MOVS     r1,#0xa
000a1a  48be              LDR      r0,|L151.3348|
000a1c  f7fffffe          BL       uart_putchar
000a20  210a              MOVS     r1,#0xa
000a22  48bc              LDR      r0,|L151.3348|
000a24  f7fffffe          BL       uart_putchar
000a28  210a              MOVS     r1,#0xa
000a2a  48ba              LDR      r0,|L151.3348|
000a2c  f7fffffe          BL       uart_putchar
000a30  210a              MOVS     r1,#0xa
000a32  48b8              LDR      r0,|L151.3348|
000a34  f7fffffe          BL       uart_putchar
000a38  210a              MOVS     r1,#0xa
000a3a  48b6              LDR      r0,|L151.3348|
000a3c  f7fffffe          BL       uart_putchar
000a40  210a              MOVS     r1,#0xa
000a42  48b4              LDR      r0,|L151.3348|
000a44  f7fffffe          BL       uart_putchar
000a48  210a              MOVS     r1,#0xa
000a4a  48b2              LDR      r0,|L151.3348|
000a4c  f7fffffe          BL       uart_putchar
000a50  210a              MOVS     r1,#0xa
000a52  48b0              LDR      r0,|L151.3348|
000a54  f7fffffe          BL       uart_putchar
;;;1963   									//memset(data,0,1000);
;;;1964   														//timer counts to wait for characters in uart 1 									
;;;1965   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000a58  bf00              NOP      
                  |L151.2650|
000a5a  49af              LDR      r1,|L151.3352|
000a5c  48af              LDR      r0,|L151.3356|
000a5e  f7fffffe          BL       strstr
000a62  2800              CMP      r0,#0
000a64  d109              BNE      |L151.2682|
000a66  49ae              LDR      r1,|L151.3360|
000a68  48ac              LDR      r0,|L151.3356|
000a6a  f7fffffe          BL       strstr
000a6e  2800              CMP      r0,#0
000a70  d103              BNE      |L151.2682|
000a72  48ac              LDR      r0,|L151.3364|
000a74  6800              LDR      r0,[r0,#0]  ; tout
000a76  2805              CMP      r0,#5
000a78  ddef              BLE      |L151.2650|
                  |L151.2682|
;;;1966   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1967   									}
;;;1968   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000a7a  f7fffffe          BL       clear
;;;1969   									//clear();
;;;1970   									memset(data,0,strlen(data));
000a7e  48aa              LDR      r0,|L151.3368|
000a80  f7fffffe          BL       strlen
000a84  4604              MOV      r4,r0
000a86  4621              MOV      r1,r4
000a88  48a7              LDR      r0,|L151.3368|
000a8a  f7fffffe          BL       __aeabi_memclr
;;;1971   									clear();
000a8e  f7fffffe          BL       clear
;;;1972   									RESET_OFF;delay(100);
000a92  2020              MOVS     r0,#0x20
000a94  49a5              LDR      r1,|L151.3372|
000a96  6088              STR      r0,[r1,#8]
000a98  2064              MOVS     r0,#0x64
000a9a  f7fffffe          BL       delay
;;;1973   									RESET_ON;delay(100);		
000a9e  2020              MOVS     r0,#0x20
000aa0  49a2              LDR      r1,|L151.3372|
000aa2  6048              STR      r0,[r1,#4]
000aa4  2064              MOVS     r0,#0x64
000aa6  f7fffffe          BL       delay
                  |L151.2730|
;;;1974   }
;;;1975   	
;;;1976   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000aaa  2004              MOVS     r0,#4
000aac  4ba0              LDR      r3,|L151.3376|
000aae  4aa1              LDR      r2,|L151.3380|
000ab0  49a1              LDR      r1,|L151.3384|
000ab2  9000              STR      r0,[sp,#0]
000ab4  48a1              LDR      r0,|L151.3388|
000ab6  f7fffffe          BL       send_GSM
;;;1977   GPS_COLLECT2();
000aba  f7fffffe          BL       GPS_COLLECT2
;;;1978   strcat(data,"CH\n");	
000abe  49a0              LDR      r1,|L151.3392|
000ac0  4899              LDR      r0,|L151.3368|
000ac2  f7fffffe          BL       strcat
;;;1979   memset(at_,0,100);
000ac6  2164              MOVS     r1,#0x64
000ac8  489e              LDR      r0,|L151.3396|
000aca  f7fffffe          BL       __aeabi_memclr
;;;1980   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000ace  4a9e              LDR      r2,|L151.3400|
000ad0  499e              LDR      r1,|L151.3404|
000ad2  489c              LDR      r0,|L151.3396|
000ad4  f7fffffe          BL       __2sprintf
;;;1981   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000ad8  489d              LDR      r0,|L151.3408|
000ada  6800              LDR      r0,[r0,#0]  ; tmeout
000adc  4b94              LDR      r3,|L151.3376|
000ade  4a95              LDR      r2,|L151.3380|
000ae0  4995              LDR      r1,|L151.3384|
000ae2  9000              STR      r0,[sp,#0]
000ae4  4897              LDR      r0,|L151.3396|
000ae6  f7fffffe          BL       send_GSM
;;;1982   msg_sim800(); 
000aea  f7fffffe          BL       msg_sim800
;;;1983   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000aee  2004              MOVS     r0,#4
000af0  4b98              LDR      r3,|L151.3412|
000af2  4a90              LDR      r2,|L151.3380|
000af4  4990              LDR      r1,|L151.3384|
000af6  9000              STR      r0,[sp,#0]
000af8  4897              LDR      r0,|L151.3416|
000afa  f7fffffe          BL       send_GSM
;;;1984   GPS_COLLECT2();
000afe  f7fffffe          BL       GPS_COLLECT2
;;;1985   strcat(data,"CH\n");	
000b02  498f              LDR      r1,|L151.3392|
000b04  4888              LDR      r0,|L151.3368|
000b06  f7fffffe          BL       strcat
;;;1986   GPS_COLLECT2();
000b0a  f7fffffe          BL       GPS_COLLECT2
;;;1987   strcat(data,"CH\n");	
000b0e  498c              LDR      r1,|L151.3392|
000b10  4885              LDR      r0,|L151.3368|
000b12  f7fffffe          BL       strcat
;;;1988   
;;;1989   
;;;1990   msg_sim800(); 
000b16  f7fffffe          BL       msg_sim800
;;;1991   GPS_COLLECT2();
000b1a  f7fffffe          BL       GPS_COLLECT2
;;;1992   strcat(data,"CH\n");	
000b1e  4988              LDR      r1,|L151.3392|
000b20  4881              LDR      r0,|L151.3368|
000b22  f7fffffe          BL       strcat
;;;1993   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
000b26  f7fffffe          BL       clear
000b2a  488c              LDR      r0,|L151.3420|
000b2c  f7fffffe          BL       send_modem
000b30  f7fffffe          BL       clear
;;;1994   					delay(20);
000b34  2014              MOVS     r0,#0x14
000b36  f7fffffe          BL       delay
;;;1995   
;;;1996   
;;;1997   msg_sim800(); 
000b3a  f7fffffe          BL       msg_sim800
;;;1998   
;;;1999   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000b3e  4b88              LDR      r3,|L151.3424|
000b40  4a88              LDR      r2,|L151.3428|
000b42  4989              LDR      r1,|L151.3432|
000b44  487f              LDR      r0,|L151.3396|
000b46  f7fffffe          BL       __2sprintf
;;;2000   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000b4a  4881              LDR      r0,|L151.3408|
000b4c  6800              LDR      r0,[r0,#0]  ; tmeout
000b4e  4b78              LDR      r3,|L151.3376|
000b50  4a73              LDR      r2,|L151.3360|
000b52  4986              LDR      r1,|L151.3436|
000b54  9000              STR      r0,[sp,#0]
000b56  487b              LDR      r0,|L151.3396|
000b58  f7fffffe          BL       send_GSM
;;;2001   						clear();
000b5c  f7fffffe          BL       clear
;;;2002   						
;;;2003   						
;;;2004   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
000b60  487b              LDR      r0,|L151.3408|
000b62  6800              LDR      r0,[r0,#0]  ; tmeout
000b64  4b82              LDR      r3,|L151.3440|
000b66  4a6e              LDR      r2,|L151.3360|
000b68  4982              LDR      r1,|L151.3444|
000b6a  9000              STR      r0,[sp,#0]
000b6c  4882              LDR      r0,|L151.3448|
000b6e  f7fffffe          BL       send_GSM
;;;2005   									
;;;2006   //*********************************tcp_initialization ends*************************************//									
;;;2007   			if(mystrstr(uart_string_gsm,'>')){
000b72  213e              MOVS     r1,#0x3e
000b74  4869              LDR      r0,|L151.3356|
000b76  f7fffffe          BL       mystrstr
000b7a  2800              CMP      r0,#0
000b7c  d07e              BEQ      |L151.3196|
;;;2008   									clear();
000b7e  f7fffffe          BL       clear
;;;2009   									memset(uart_string_gsm,0,5000);
000b82  497e              LDR      r1,|L151.3452|
000b84  4865              LDR      r0,|L151.3356|
000b86  f7fffffe          BL       __aeabi_memclr
;;;2010   									qwe=strlen(data);
000b8a  4867              LDR      r0,|L151.3368|
000b8c  f7fffffe          BL       strlen
000b90  497b              LDR      r1,|L151.3456|
000b92  6008              STR      r0,[r1,#0]  ; qwe
;;;2011   									tout=0;
000b94  2000              MOVS     r0,#0
000b96  4963              LDR      r1,|L151.3364|
000b98  6008              STR      r0,[r1,#0]  ; tout
;;;2012   									k2=0;
000b9a  497a              LDR      r1,|L151.3460|
000b9c  6008              STR      r0,[r1,#0]  ; k2
;;;2013   									for(k=0;k<(qwe);k++)
000b9e  497a              LDR      r1,|L151.3464|
000ba0  6008              STR      r0,[r1,#0]  ; k
000ba2  e00b              B        |L151.3004|
                  |L151.2980|
;;;2014   									{
;;;2015   										uart_putchar(UART1_BASE_PTR, data[k]);
000ba4  4860              LDR      r0,|L151.3368|
000ba6  4a78              LDR      r2,|L151.3464|
000ba8  6812              LDR      r2,[r2,#0]  ; k
000baa  5c81              LDRB     r1,[r0,r2]
000bac  4859              LDR      r0,|L151.3348|
000bae  f7fffffe          BL       uart_putchar
000bb2  4875              LDR      r0,|L151.3464|
000bb4  6800              LDR      r0,[r0,#0]            ;2013  ; k
000bb6  1c40              ADDS     r0,r0,#1              ;2013
000bb8  4973              LDR      r1,|L151.3464|
000bba  6008              STR      r0,[r1,#0]            ;2013  ; k
                  |L151.3004|
000bbc  4872              LDR      r0,|L151.3464|
000bbe  6800              LDR      r0,[r0,#0]            ;2013  ; k
000bc0  496f              LDR      r1,|L151.3456|
000bc2  6809              LDR      r1,[r1,#0]            ;2013  ; qwe
000bc4  4288              CMP      r0,r1                 ;2013
000bc6  dbed              BLT      |L151.2980|
;;;2016   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
000bc8  210a              MOVS     r1,#0xa
000bca  4852              LDR      r0,|L151.3348|
000bcc  e000              B        |L151.3024|
                  |L151.3022|
000bce  e3fd              B        |L151.5068|
                  |L151.3024|
000bd0  f7fffffe          BL       uart_putchar
000bd4  211a              MOVS     r1,#0x1a
000bd6  484f              LDR      r0,|L151.3348|
000bd8  f7fffffe          BL       uart_putchar
000bdc  211a              MOVS     r1,#0x1a
000bde  484d              LDR      r0,|L151.3348|
000be0  f7fffffe          BL       uart_putchar
000be4  211a              MOVS     r1,#0x1a
000be6  484b              LDR      r0,|L151.3348|
000be8  f7fffffe          BL       uart_putchar
000bec  211a              MOVS     r1,#0x1a
000bee  4849              LDR      r0,|L151.3348|
000bf0  f7fffffe          BL       uart_putchar
000bf4  211a              MOVS     r1,#0x1a
000bf6  4847              LDR      r0,|L151.3348|
000bf8  f7fffffe          BL       uart_putchar
000bfc  211a              MOVS     r1,#0x1a
000bfe  4845              LDR      r0,|L151.3348|
000c00  f7fffffe          BL       uart_putchar
;;;2017   															do
000c04  bf00              NOP      
                  |L151.3078|
;;;2018   																{q1=strstr(uart_string_gsm,"SEND OK");
000c06  4961              LDR      r1,|L151.3468|
000c08  4844              LDR      r0,|L151.3356|
000c0a  f7fffffe          BL       strstr
000c0e  4960              LDR      r1,|L151.3472|
000c10  6008              STR      r0,[r1,#0]  ; q1
;;;2019   																	q2=strstr(uart_string_gsm, "ERROR");
000c12  4943              LDR      r1,|L151.3360|
000c14  4841              LDR      r0,|L151.3356|
000c16  f7fffffe          BL       strstr
000c1a  495e              LDR      r1,|L151.3476|
000c1c  6008              STR      r0,[r1,#0]  ; q2
;;;2020   																		q3=strstr(uart_string_gsm, "FAIL");	
000c1e  495e              LDR      r1,|L151.3480|
000c20  483e              LDR      r0,|L151.3356|
000c22  f7fffffe          BL       strstr
000c26  495d              LDR      r1,|L151.3484|
000c28  6008              STR      r0,[r1,#0]  ; q3
;;;2021   																			q4=strstr(uart_string_gsm, "DEACT");	
000c2a  494a              LDR      r1,|L151.3412|
000c2c  483b              LDR      r0,|L151.3356|
000c2e  f7fffffe          BL       strstr
000c32  495b              LDR      r1,|L151.3488|
000c34  6008              STR      r0,[r1,#0]  ; q4
;;;2022   																	
;;;2023   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
000c36  4856              LDR      r0,|L151.3472|
000c38  6800              LDR      r0,[r0,#0]  ; q1
000c3a  2800              CMP      r0,#0
000c3c  d10f              BNE      |L151.3166|
000c3e  4855              LDR      r0,|L151.3476|
000c40  6800              LDR      r0,[r0,#0]  ; q2
000c42  2800              CMP      r0,#0
000c44  d10b              BNE      |L151.3166|
000c46  4855              LDR      r0,|L151.3484|
000c48  6800              LDR      r0,[r0,#0]  ; q3
000c4a  2800              CMP      r0,#0
000c4c  d107              BNE      |L151.3166|
000c4e  4608              MOV      r0,r1
000c50  6800              LDR      r0,[r0,#0]  ; q4
000c52  2800              CMP      r0,#0
000c54  d103              BNE      |L151.3166|
000c56  4833              LDR      r0,|L151.3364|
000c58  6800              LDR      r0,[r0,#0]  ; tout
000c5a  2808              CMP      r0,#8
000c5c  ddd3              BLE      |L151.3078|
                  |L151.3166|
;;;2024   															
;;;2025   																			delay(10);clear();
000c5e  200a              MOVS     r0,#0xa
000c60  f7fffffe          BL       delay
000c64  f7fffffe          BL       clear
;;;2026   														uart_putchar(UART1_BASE_PTR,0x1A);
000c68  211a              MOVS     r1,#0x1a
000c6a  482a              LDR      r0,|L151.3348|
000c6c  f7fffffe          BL       uart_putchar
;;;2027   												delay(10);
000c70  200a              MOVS     r0,#0xa
000c72  f7fffffe          BL       delay
;;;2028   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000c76  211a              MOVS     r1,#0x1a
000c78  4826              LDR      r0,|L151.3348|
000c7a  e000              B        |L151.3198|
                  |L151.3196|
000c7c  e19b              B        |L151.4022|
                  |L151.3198|
000c7e  f7fffffe          BL       uart_putchar
000c82  211a              MOVS     r1,#0x1a
000c84  4823              LDR      r0,|L151.3348|
000c86  f7fffffe          BL       uart_putchar
000c8a  211a              MOVS     r1,#0x1a
000c8c  4821              LDR      r0,|L151.3348|
000c8e  f7fffffe          BL       uart_putchar
;;;2029   delay(20);
000c92  2014              MOVS     r0,#0x14
000c94  f7fffffe          BL       delay
;;;2030   if(!strstr(uart_string_gsm,"SEND OK")){
000c98  493c              LDR      r1,|L151.3468|
000c9a  4820              LDR      r0,|L151.3356|
000c9c  f7fffffe          BL       strstr
000ca0  2800              CMP      r0,#0
000ca2  d001              BEQ      |L151.3240|
000ca4  f001f9c2          BL       |L151.8236|
                  |L151.3240|
;;;2031   
;;;2032   
;;;2033   	delay(100);
000ca8  2064              MOVS     r0,#0x64
000caa  f7fffffe          BL       delay
;;;2034   		clear();//memset(uart_string_gsm,0,5000);
000cae  f7fffffe          BL       clear
;;;2035   	
;;;2036   	memset(at_,0,100);
000cb2  2164              MOVS     r1,#0x64
000cb4  4823              LDR      r0,|L151.3396|
000cb6  f7fffffe          BL       __aeabi_memclr
;;;2037   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000cba  481b              LDR      r0,|L151.3368|
000cbc  f7fffffe          BL       strlen
000cc0  1c44              ADDS     r4,r0,#1
000cc2  4623              MOV      r3,r4
000cc4  4a37              LDR      r2,|L151.3492|
000cc6  4938              LDR      r1,|L151.3496|
000cc8  481e              LDR      r0,|L151.3396|
000cca  f7fffffe          BL       __2sprintf
;;;2038   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000cce  2005              MOVS     r0,#5
000cd0  4b13              LDR      r3,|L151.3360|
000cd2  4a18              LDR      r2,|L151.3380|
000cd4  4927              LDR      r1,|L151.3444|
000cd6  9000              STR      r0,[sp,#0]
000cd8  481a              LDR      r0,|L151.3396|
000cda  f7fffffe          BL       send_SD
;;;2039   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2040   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2041   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2042   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2043   //	}
;;;2044   	
;;;2045   clear();	
000cde  f7fffffe          BL       clear
;;;2046   									k2=0;									//string array counter for uart 1
000ce2  2000              MOVS     r0,#0
000ce4  4927              LDR      r1,|L151.3460|
000ce6  6008              STR      r0,[r1,#0]  ; k2
;;;2047   									tout=0;	
000ce8  490e              LDR      r1,|L151.3364|
000cea  6008              STR      r0,[r1,#0]  ; tout
;;;2048   		for(k=0;k<strlen(data);k++)
000cec  4926              LDR      r1,|L151.3464|
000cee  6008              STR      r0,[r1,#0]  ; k
000cf0  e00b              B        |L151.3338|
                  |L151.3314|
;;;2049   		{
;;;2050   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000cf2  480d              LDR      r0,|L151.3368|
000cf4  4a24              LDR      r2,|L151.3464|
000cf6  6812              LDR      r2,[r2,#0]  ; k
000cf8  5c81              LDRB     r1,[r0,r2]
000cfa  4806              LDR      r0,|L151.3348|
000cfc  f7fffffe          BL       uart_putchar
000d00  4821              LDR      r0,|L151.3464|
000d02  6800              LDR      r0,[r0,#0]            ;2048  ; k
000d04  1c40              ADDS     r0,r0,#1              ;2048
000d06  4920              LDR      r1,|L151.3464|
000d08  6008              STR      r0,[r1,#0]            ;2048  ; k
                  |L151.3338|
000d0a  4807              LDR      r0,|L151.3368|
000d0c  f7fffffe          BL       strlen
000d10  491d              LDR      r1,|L151.3464|
000d12  e04b              B        |L151.3500|
                  |L151.3348|
                          DCD      0x4006b000
                  |L151.3352|
                          DCD      ||.conststring||+0x70
                  |L151.3356|
                          DCD      uart_string_gsm
                  |L151.3360|
                          DCD      ||.conststring||+0xe0
                  |L151.3364|
                          DCD      tout
                  |L151.3368|
                          DCD      data
                  |L151.3372|
                          DCD      0x400ff080
                  |L151.3376|
                          DCD      ||.conststring||+0x10
                  |L151.3380|
                          DCD      ||.conststring||+0x18
                  |L151.3384|
                          DCD      ||.conststring||+0x2c
                  |L151.3388|
                          DCD      ||.conststring||+0x6b8
                  |L151.3392|
                          DCD      ||.conststring||+0x434
                  |L151.3396|
                          DCD      at_
                  |L151.3400|
                          DCD      apn
                  |L151.3404|
                          DCD      ||.conststring||+0x6c8
                  |L151.3408|
                          DCD      tmeout
                  |L151.3412|
                          DCD      ||.conststring||+0x638
                  |L151.3416|
                          DCD      ||.conststring||+0x6dc
                  |L151.3420|
                          DCD      ||.conststring||+0x6ec
                  |L151.3424|
                          DCD      port
                  |L151.3428|
                          DCD      ||ip||
                  |L151.3432|
                          DCD      ||.conststring||+0x6fc
                  |L151.3436|
                          DCD      ||.conststring||+0x670
                  |L151.3440|
                          DCD      ||.conststring||+0x71c
                  |L151.3444|
                          DCD      ||.conststring||+0x20
                  |L151.3448|
                          DCD      ||.conststring||+0x678
                  |L151.3452|
                          DCD      0x00001388
                  |L151.3456|
                          DCD      qwe
                  |L151.3460|
                          DCD      ||k2||
                  |L151.3464|
                          DCD      k
                  |L151.3468|
                          DCD      ||.conststring||+0x628
                  |L151.3472|
                          DCD      ||q1||
                  |L151.3476|
                          DCD      ||q2||
                  |L151.3480|
                          DCD      ||.conststring||+0x630
                  |L151.3484|
                          DCD      ||q3||
                  |L151.3488|
                          DCD      ||q4||
                  |L151.3492|
                          DCD      drive
                  |L151.3496|
                          DCD      ||.conststring||+0x438
                  |L151.3500|
000dac  6809              LDR      r1,[r1,#0]            ;2048  ; k
000dae  4288              CMP      r0,r1                 ;2048
000db0  d89f              BHI      |L151.3314|
;;;2051   		}	
;;;2052   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000db2  210a              MOVS     r1,#0xa
000db4  48fe              LDR      r0,|L151.4528|
000db6  f7fffffe          BL       uart_putchar
000dba  210a              MOVS     r1,#0xa
000dbc  48fc              LDR      r0,|L151.4528|
000dbe  f7fffffe          BL       uart_putchar
000dc2  210a              MOVS     r1,#0xa
000dc4  48fa              LDR      r0,|L151.4528|
000dc6  f7fffffe          BL       uart_putchar
000dca  210a              MOVS     r1,#0xa
000dcc  48f8              LDR      r0,|L151.4528|
000dce  f7fffffe          BL       uart_putchar
000dd2  210a              MOVS     r1,#0xa
000dd4  48f6              LDR      r0,|L151.4528|
000dd6  f7fffffe          BL       uart_putchar
000dda  210a              MOVS     r1,#0xa
000ddc  48f4              LDR      r0,|L151.4528|
000dde  f7fffffe          BL       uart_putchar
000de2  210a              MOVS     r1,#0xa
000de4  48f2              LDR      r0,|L151.4528|
000de6  f7fffffe          BL       uart_putchar
000dea  210a              MOVS     r1,#0xa
000dec  48f0              LDR      r0,|L151.4528|
000dee  f7fffffe          BL       uart_putchar
000df2  210a              MOVS     r1,#0xa
000df4  48ee              LDR      r0,|L151.4528|
000df6  f7fffffe          BL       uart_putchar
000dfa  210a              MOVS     r1,#0xa
000dfc  48ec              LDR      r0,|L151.4528|
000dfe  f7fffffe          BL       uart_putchar
000e02  210a              MOVS     r1,#0xa
000e04  48ea              LDR      r0,|L151.4528|
000e06  f7fffffe          BL       uart_putchar
000e0a  210a              MOVS     r1,#0xa
000e0c  48e8              LDR      r0,|L151.4528|
000e0e  f7fffffe          BL       uart_putchar
000e12  210a              MOVS     r1,#0xa
000e14  48e6              LDR      r0,|L151.4528|
000e16  f7fffffe          BL       uart_putchar
000e1a  210a              MOVS     r1,#0xa
000e1c  48e4              LDR      r0,|L151.4528|
000e1e  f7fffffe          BL       uart_putchar
000e22  210a              MOVS     r1,#0xa
000e24  48e2              LDR      r0,|L151.4528|
000e26  f7fffffe          BL       uart_putchar
000e2a  210a              MOVS     r1,#0xa
000e2c  48e0              LDR      r0,|L151.4528|
000e2e  f7fffffe          BL       uart_putchar
000e32  210a              MOVS     r1,#0xa
000e34  48de              LDR      r0,|L151.4528|
000e36  f7fffffe          BL       uart_putchar
000e3a  210a              MOVS     r1,#0xa
000e3c  48dc              LDR      r0,|L151.4528|
000e3e  f7fffffe          BL       uart_putchar
000e42  210a              MOVS     r1,#0xa
000e44  48da              LDR      r0,|L151.4528|
000e46  f7fffffe          BL       uart_putchar
000e4a  210a              MOVS     r1,#0xa
000e4c  48d8              LDR      r0,|L151.4528|
000e4e  f7fffffe          BL       uart_putchar
000e52  210a              MOVS     r1,#0xa
000e54  48d6              LDR      r0,|L151.4528|
000e56  f7fffffe          BL       uart_putchar
000e5a  210a              MOVS     r1,#0xa
000e5c  48d4              LDR      r0,|L151.4528|
000e5e  f7fffffe          BL       uart_putchar
000e62  210a              MOVS     r1,#0xa
000e64  48d2              LDR      r0,|L151.4528|
000e66  f7fffffe          BL       uart_putchar
000e6a  210a              MOVS     r1,#0xa
000e6c  48d0              LDR      r0,|L151.4528|
000e6e  f7fffffe          BL       uart_putchar
000e72  210a              MOVS     r1,#0xa
000e74  48ce              LDR      r0,|L151.4528|
000e76  f7fffffe          BL       uart_putchar
000e7a  210a              MOVS     r1,#0xa
000e7c  48cc              LDR      r0,|L151.4528|
000e7e  f7fffffe          BL       uart_putchar
000e82  210a              MOVS     r1,#0xa
000e84  48ca              LDR      r0,|L151.4528|
000e86  f7fffffe          BL       uart_putchar
000e8a  210a              MOVS     r1,#0xa
000e8c  48c8              LDR      r0,|L151.4528|
000e8e  f7fffffe          BL       uart_putchar
000e92  210a              MOVS     r1,#0xa
000e94  48c6              LDR      r0,|L151.4528|
000e96  f7fffffe          BL       uart_putchar
000e9a  210a              MOVS     r1,#0xa
000e9c  48c4              LDR      r0,|L151.4528|
000e9e  f7fffffe          BL       uart_putchar
000ea2  210a              MOVS     r1,#0xa
000ea4  48c2              LDR      r0,|L151.4528|
000ea6  f7fffffe          BL       uart_putchar
000eaa  210a              MOVS     r1,#0xa
000eac  48c0              LDR      r0,|L151.4528|
000eae  f7fffffe          BL       uart_putchar
000eb2  210a              MOVS     r1,#0xa
000eb4  48be              LDR      r0,|L151.4528|
000eb6  f7fffffe          BL       uart_putchar
000eba  210a              MOVS     r1,#0xa
000ebc  48bc              LDR      r0,|L151.4528|
000ebe  f7fffffe          BL       uart_putchar
000ec2  210a              MOVS     r1,#0xa
000ec4  48ba              LDR      r0,|L151.4528|
000ec6  f7fffffe          BL       uart_putchar
000eca  210a              MOVS     r1,#0xa
000ecc  48b8              LDR      r0,|L151.4528|
000ece  f7fffffe          BL       uart_putchar
000ed2  210a              MOVS     r1,#0xa
000ed4  48b6              LDR      r0,|L151.4528|
000ed6  f7fffffe          BL       uart_putchar
000eda  210a              MOVS     r1,#0xa
000edc  48b4              LDR      r0,|L151.4528|
000ede  f7fffffe          BL       uart_putchar
000ee2  210a              MOVS     r1,#0xa
000ee4  48b2              LDR      r0,|L151.4528|
000ee6  f7fffffe          BL       uart_putchar
000eea  210a              MOVS     r1,#0xa
000eec  48b0              LDR      r0,|L151.4528|
000eee  f7fffffe          BL       uart_putchar
000ef2  210a              MOVS     r1,#0xa
000ef4  48ae              LDR      r0,|L151.4528|
000ef6  f7fffffe          BL       uart_putchar
000efa  210a              MOVS     r1,#0xa
000efc  48ac              LDR      r0,|L151.4528|
000efe  f7fffffe          BL       uart_putchar
000f02  210a              MOVS     r1,#0xa
000f04  48aa              LDR      r0,|L151.4528|
000f06  f7fffffe          BL       uart_putchar
000f0a  210a              MOVS     r1,#0xa
000f0c  48a8              LDR      r0,|L151.4528|
000f0e  f7fffffe          BL       uart_putchar
000f12  210a              MOVS     r1,#0xa
000f14  48a6              LDR      r0,|L151.4528|
000f16  f7fffffe          BL       uart_putchar
000f1a  210a              MOVS     r1,#0xa
000f1c  48a4              LDR      r0,|L151.4528|
000f1e  f7fffffe          BL       uart_putchar
000f22  210a              MOVS     r1,#0xa
000f24  48a2              LDR      r0,|L151.4528|
000f26  f7fffffe          BL       uart_putchar
000f2a  210a              MOVS     r1,#0xa
000f2c  48a0              LDR      r0,|L151.4528|
000f2e  f7fffffe          BL       uart_putchar
000f32  210a              MOVS     r1,#0xa
000f34  489e              LDR      r0,|L151.4528|
000f36  f7fffffe          BL       uart_putchar
000f3a  210a              MOVS     r1,#0xa
000f3c  489c              LDR      r0,|L151.4528|
000f3e  f7fffffe          BL       uart_putchar
000f42  210a              MOVS     r1,#0xa
000f44  489a              LDR      r0,|L151.4528|
000f46  f7fffffe          BL       uart_putchar
000f4a  210a              MOVS     r1,#0xa
000f4c  4898              LDR      r0,|L151.4528|
000f4e  f7fffffe          BL       uart_putchar
000f52  210a              MOVS     r1,#0xa
000f54  4896              LDR      r0,|L151.4528|
000f56  f7fffffe          BL       uart_putchar
000f5a  210a              MOVS     r1,#0xa
000f5c  4894              LDR      r0,|L151.4528|
000f5e  f7fffffe          BL       uart_putchar
000f62  210a              MOVS     r1,#0xa
000f64  4892              LDR      r0,|L151.4528|
000f66  f7fffffe          BL       uart_putchar
000f6a  210a              MOVS     r1,#0xa
000f6c  4890              LDR      r0,|L151.4528|
000f6e  f7fffffe          BL       uart_putchar
000f72  210a              MOVS     r1,#0xa
000f74  488e              LDR      r0,|L151.4528|
000f76  f7fffffe          BL       uart_putchar
;;;2053   									//memset(data,0,1000);
;;;2054   														//timer counts to wait for characters in uart 1 									
;;;2055   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000f7a  bf00              NOP      
                  |L151.3964|
000f7c  498d              LDR      r1,|L151.4532|
000f7e  488e              LDR      r0,|L151.4536|
000f80  f7fffffe          BL       strstr
000f84  2800              CMP      r0,#0
000f86  d109              BNE      |L151.3996|
000f88  498c              LDR      r1,|L151.4540|
000f8a  488b              LDR      r0,|L151.4536|
000f8c  f7fffffe          BL       strstr
000f90  2800              CMP      r0,#0
000f92  d103              BNE      |L151.3996|
000f94  488a              LDR      r0,|L151.4544|
000f96  6800              LDR      r0,[r0,#0]  ; tout
000f98  2805              CMP      r0,#5
000f9a  ddef              BLE      |L151.3964|
                  |L151.3996|
;;;2056   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2057   									}
;;;2058   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000f9c  f7fffffe          BL       clear
;;;2059   									//clear();
;;;2060   									memset(data,0,strlen(data));
000fa0  4888              LDR      r0,|L151.4548|
000fa2  f7fffffe          BL       strlen
000fa6  4604              MOV      r4,r0
000fa8  4621              MOV      r1,r4
000faa  4886              LDR      r0,|L151.4548|
000fac  f7fffffe          BL       __aeabi_memclr
;;;2061   									clear();
000fb0  f7fffffe          BL       clear
                  |L151.4020|
;;;2062   
;;;2063   								
;;;2064   
;;;2065   break;
000fb4  e3fe              B        |L151.6068|
                  |L151.4022|
;;;2066   //log_it();
;;;2067   }
;;;2068   			
;;;2069   			
;;;2070   			
;;;2071   			
;;;2072   			
;;;2073   			}
;;;2074   			else
;;;2075   			{
;;;2076   			
;;;2077   			
;;;2078   		delay(100);
000fb6  2064              MOVS     r0,#0x64
000fb8  f7fffffe          BL       delay
;;;2079   		clear();//memset(uart_string_gsm,0,5000);
000fbc  f7fffffe          BL       clear
;;;2080   	
;;;2081   	memset(at_,0,100);
000fc0  2164              MOVS     r1,#0x64
000fc2  4881              LDR      r0,|L151.4552|
000fc4  f7fffffe          BL       __aeabi_memclr
;;;2082   	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000fc8  487e              LDR      r0,|L151.4548|
000fca  f7fffffe          BL       strlen
000fce  1c44              ADDS     r4,r0,#1
000fd0  4623              MOV      r3,r4
000fd2  4a7e              LDR      r2,|L151.4556|
000fd4  497e              LDR      r1,|L151.4560|
000fd6  487c              LDR      r0,|L151.4552|
000fd8  f7fffffe          BL       __2sprintf
;;;2083   	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000fdc  2005              MOVS     r0,#5
000fde  4b77              LDR      r3,|L151.4540|
000fe0  4a7c              LDR      r2,|L151.4564|
000fe2  497d              LDR      r1,|L151.4568|
000fe4  9000              STR      r0,[sp,#0]
000fe6  4878              LDR      r0,|L151.4552|
000fe8  f7fffffe          BL       send_SD
;;;2084   	
;;;2085   	clear();	
000fec  f7fffffe          BL       clear
;;;2086   									k2=0;									//string array counter for uart 1
000ff0  2000              MOVS     r0,#0
000ff2  497a              LDR      r1,|L151.4572|
000ff4  6008              STR      r0,[r1,#0]  ; k2
;;;2087   									tout=0;	
000ff6  4972              LDR      r1,|L151.4544|
000ff8  6008              STR      r0,[r1,#0]  ; tout
;;;2088   		for(k=0;k<strlen(data);k++)
000ffa  4979              LDR      r1,|L151.4576|
000ffc  6008              STR      r0,[r1,#0]  ; k
000ffe  e00b              B        |L151.4120|
                  |L151.4096|
;;;2089   		{
;;;2090   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001000  4870              LDR      r0,|L151.4548|
001002  4a77              LDR      r2,|L151.4576|
001004  6812              LDR      r2,[r2,#0]  ; k
001006  5c81              LDRB     r1,[r0,r2]
001008  4869              LDR      r0,|L151.4528|
00100a  f7fffffe          BL       uart_putchar
00100e  4874              LDR      r0,|L151.4576|
001010  6800              LDR      r0,[r0,#0]            ;2088  ; k
001012  1c40              ADDS     r0,r0,#1              ;2088
001014  4972              LDR      r1,|L151.4576|
001016  6008              STR      r0,[r1,#0]            ;2088  ; k
                  |L151.4120|
001018  486a              LDR      r0,|L151.4548|
00101a  f7fffffe          BL       strlen
00101e  4970              LDR      r1,|L151.4576|
001020  6809              LDR      r1,[r1,#0]            ;2088  ; k
001022  4288              CMP      r0,r1                 ;2088
001024  d8ec              BHI      |L151.4096|
;;;2091   		}	
;;;2092   		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001026  210a              MOVS     r1,#0xa
001028  4861              LDR      r0,|L151.4528|
00102a  f7fffffe          BL       uart_putchar
00102e  210a              MOVS     r1,#0xa
001030  485f              LDR      r0,|L151.4528|
001032  f7fffffe          BL       uart_putchar
001036  210a              MOVS     r1,#0xa
001038  485d              LDR      r0,|L151.4528|
00103a  f7fffffe          BL       uart_putchar
00103e  210a              MOVS     r1,#0xa
001040  485b              LDR      r0,|L151.4528|
001042  f7fffffe          BL       uart_putchar
001046  210a              MOVS     r1,#0xa
001048  4859              LDR      r0,|L151.4528|
00104a  f7fffffe          BL       uart_putchar
00104e  210a              MOVS     r1,#0xa
001050  4857              LDR      r0,|L151.4528|
001052  f7fffffe          BL       uart_putchar
001056  210a              MOVS     r1,#0xa
001058  4855              LDR      r0,|L151.4528|
00105a  f7fffffe          BL       uart_putchar
00105e  210a              MOVS     r1,#0xa
001060  4853              LDR      r0,|L151.4528|
001062  f7fffffe          BL       uart_putchar
001066  210a              MOVS     r1,#0xa
001068  4851              LDR      r0,|L151.4528|
00106a  f7fffffe          BL       uart_putchar
00106e  210a              MOVS     r1,#0xa
001070  484f              LDR      r0,|L151.4528|
001072  f7fffffe          BL       uart_putchar
001076  e000              B        |L151.4218|
                  |L151.4216|
001078  e3fd              B        |L151.6262|
                  |L151.4218|
00107a  210a              MOVS     r1,#0xa
00107c  484c              LDR      r0,|L151.4528|
00107e  f7fffffe          BL       uart_putchar
001082  210a              MOVS     r1,#0xa
001084  484a              LDR      r0,|L151.4528|
001086  f7fffffe          BL       uart_putchar
00108a  210a              MOVS     r1,#0xa
00108c  4848              LDR      r0,|L151.4528|
00108e  f7fffffe          BL       uart_putchar
001092  210a              MOVS     r1,#0xa
001094  4846              LDR      r0,|L151.4528|
001096  f7fffffe          BL       uart_putchar
00109a  210a              MOVS     r1,#0xa
00109c  4844              LDR      r0,|L151.4528|
00109e  f7fffffe          BL       uart_putchar
0010a2  210a              MOVS     r1,#0xa
0010a4  4842              LDR      r0,|L151.4528|
0010a6  f7fffffe          BL       uart_putchar
0010aa  210a              MOVS     r1,#0xa
0010ac  4840              LDR      r0,|L151.4528|
0010ae  f7fffffe          BL       uart_putchar
0010b2  210a              MOVS     r1,#0xa
0010b4  483e              LDR      r0,|L151.4528|
0010b6  f7fffffe          BL       uart_putchar
0010ba  210a              MOVS     r1,#0xa
0010bc  483c              LDR      r0,|L151.4528|
0010be  f7fffffe          BL       uart_putchar
0010c2  210a              MOVS     r1,#0xa
0010c4  483a              LDR      r0,|L151.4528|
0010c6  f7fffffe          BL       uart_putchar
0010ca  210a              MOVS     r1,#0xa
0010cc  4838              LDR      r0,|L151.4528|
0010ce  f7fffffe          BL       uart_putchar
0010d2  210a              MOVS     r1,#0xa
0010d4  4836              LDR      r0,|L151.4528|
0010d6  f7fffffe          BL       uart_putchar
0010da  210a              MOVS     r1,#0xa
0010dc  4834              LDR      r0,|L151.4528|
0010de  f7fffffe          BL       uart_putchar
0010e2  210a              MOVS     r1,#0xa
0010e4  4832              LDR      r0,|L151.4528|
0010e6  f7fffffe          BL       uart_putchar
0010ea  210a              MOVS     r1,#0xa
0010ec  4830              LDR      r0,|L151.4528|
0010ee  f7fffffe          BL       uart_putchar
0010f2  210a              MOVS     r1,#0xa
0010f4  482e              LDR      r0,|L151.4528|
0010f6  f7fffffe          BL       uart_putchar
0010fa  210a              MOVS     r1,#0xa
0010fc  482c              LDR      r0,|L151.4528|
0010fe  f7fffffe          BL       uart_putchar
001102  210a              MOVS     r1,#0xa
001104  482a              LDR      r0,|L151.4528|
001106  f7fffffe          BL       uart_putchar
00110a  210a              MOVS     r1,#0xa
00110c  4828              LDR      r0,|L151.4528|
00110e  f7fffffe          BL       uart_putchar
001112  210a              MOVS     r1,#0xa
001114  4826              LDR      r0,|L151.4528|
001116  f7fffffe          BL       uart_putchar
00111a  210a              MOVS     r1,#0xa
00111c  4824              LDR      r0,|L151.4528|
00111e  f7fffffe          BL       uart_putchar
001122  210a              MOVS     r1,#0xa
001124  4822              LDR      r0,|L151.4528|
001126  f7fffffe          BL       uart_putchar
00112a  210a              MOVS     r1,#0xa
00112c  4820              LDR      r0,|L151.4528|
00112e  f7fffffe          BL       uart_putchar
001132  210a              MOVS     r1,#0xa
001134  481e              LDR      r0,|L151.4528|
001136  f7fffffe          BL       uart_putchar
00113a  210a              MOVS     r1,#0xa
00113c  481c              LDR      r0,|L151.4528|
00113e  f7fffffe          BL       uart_putchar
001142  210a              MOVS     r1,#0xa
001144  481a              LDR      r0,|L151.4528|
001146  f7fffffe          BL       uart_putchar
00114a  210a              MOVS     r1,#0xa
00114c  4818              LDR      r0,|L151.4528|
00114e  f7fffffe          BL       uart_putchar
001152  210a              MOVS     r1,#0xa
001154  4816              LDR      r0,|L151.4528|
001156  f7fffffe          BL       uart_putchar
00115a  210a              MOVS     r1,#0xa
00115c  4814              LDR      r0,|L151.4528|
00115e  f7fffffe          BL       uart_putchar
001162  210a              MOVS     r1,#0xa
001164  4812              LDR      r0,|L151.4528|
001166  f7fffffe          BL       uart_putchar
00116a  210a              MOVS     r1,#0xa
00116c  4810              LDR      r0,|L151.4528|
00116e  f7fffffe          BL       uart_putchar
001172  210a              MOVS     r1,#0xa
001174  480e              LDR      r0,|L151.4528|
001176  f7fffffe          BL       uart_putchar
00117a  210a              MOVS     r1,#0xa
00117c  480c              LDR      r0,|L151.4528|
00117e  f7fffffe          BL       uart_putchar
001182  210a              MOVS     r1,#0xa
001184  480a              LDR      r0,|L151.4528|
001186  f7fffffe          BL       uart_putchar
00118a  210a              MOVS     r1,#0xa
00118c  4808              LDR      r0,|L151.4528|
00118e  f7fffffe          BL       uart_putchar
001192  210a              MOVS     r1,#0xa
001194  4806              LDR      r0,|L151.4528|
001196  f7fffffe          BL       uart_putchar
00119a  210a              MOVS     r1,#0xa
00119c  4804              LDR      r0,|L151.4528|
00119e  f7fffffe          BL       uart_putchar
0011a2  210a              MOVS     r1,#0xa
0011a4  4802              LDR      r0,|L151.4528|
0011a6  f7fffffe          BL       uart_putchar
0011aa  210a              MOVS     r1,#0xa
0011ac  4800              LDR      r0,|L151.4528|
0011ae  e019              B        |L151.4580|
                  |L151.4528|
                          DCD      0x4006b000
                  |L151.4532|
                          DCD      ||.conststring||+0x70
                  |L151.4536|
                          DCD      uart_string_gsm
                  |L151.4540|
                          DCD      ||.conststring||+0xe0
                  |L151.4544|
                          DCD      tout
                  |L151.4548|
                          DCD      data
                  |L151.4552|
                          DCD      at_
                  |L151.4556|
                          DCD      drive
                  |L151.4560|
                          DCD      ||.conststring||+0x438
                  |L151.4564|
                          DCD      ||.conststring||+0x18
                  |L151.4568|
                          DCD      ||.conststring||+0x20
                  |L151.4572|
                          DCD      ||k2||
                  |L151.4576|
                          DCD      k
                  |L151.4580|
0011e4  f7fffffe          BL       uart_putchar
0011e8  210a              MOVS     r1,#0xa
0011ea  48fb              LDR      r0,|L151.5592|
0011ec  f7fffffe          BL       uart_putchar
0011f0  210a              MOVS     r1,#0xa
0011f2  48f9              LDR      r0,|L151.5592|
0011f4  f7fffffe          BL       uart_putchar
0011f8  210a              MOVS     r1,#0xa
0011fa  48f7              LDR      r0,|L151.5592|
0011fc  f7fffffe          BL       uart_putchar
001200  210a              MOVS     r1,#0xa
001202  48f5              LDR      r0,|L151.5592|
001204  f7fffffe          BL       uart_putchar
001208  210a              MOVS     r1,#0xa
00120a  48f3              LDR      r0,|L151.5592|
00120c  f7fffffe          BL       uart_putchar
001210  210a              MOVS     r1,#0xa
001212  48f1              LDR      r0,|L151.5592|
001214  f7fffffe          BL       uart_putchar
001218  210a              MOVS     r1,#0xa
00121a  48ef              LDR      r0,|L151.5592|
00121c  f7fffffe          BL       uart_putchar
001220  210a              MOVS     r1,#0xa
001222  48ed              LDR      r0,|L151.5592|
001224  f7fffffe          BL       uart_putchar
;;;2093   									//memset(data,0,1000);
;;;2094   														//timer counts to wait for characters in uart 1 									
;;;2095   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001228  bf00              NOP      
                  |L151.4650|
00122a  49ec              LDR      r1,|L151.5596|
00122c  48ec              LDR      r0,|L151.5600|
00122e  f7fffffe          BL       strstr
001232  2800              CMP      r0,#0
001234  d109              BNE      |L151.4682|
001236  49eb              LDR      r1,|L151.5604|
001238  48e9              LDR      r0,|L151.5600|
00123a  f7fffffe          BL       strstr
00123e  2800              CMP      r0,#0
001240  d103              BNE      |L151.4682|
001242  48e9              LDR      r0,|L151.5608|
001244  6800              LDR      r0,[r0,#0]  ; tout
001246  2805              CMP      r0,#5
001248  ddef              BLE      |L151.4650|
                  |L151.4682|
;;;2096   									{}
;;;2097   	                clear();
00124a  f7fffffe          BL       clear
;;;2098   									memset(data,0,strlen(data));
00124e  48e7              LDR      r0,|L151.5612|
001250  f7fffffe          BL       strlen
001254  4604              MOV      r4,r0
001256  4621              MOV      r1,r4
001258  48e4              LDR      r0,|L151.5612|
00125a  f7fffffe          BL       __aeabi_memclr
;;;2099   									clear();
00125e  f7fffffe          BL       clear
;;;2100   
;;;2101   								
;;;2102   			break;
001262  e6a7              B        |L151.4020|
                  |L151.4708|
;;;2103   			///returning; 
;;;2104   			//log_it();
;;;2105   			}
;;;2106   
;;;2107   
;;;2108   }
;;;2109   
;;;2110   //if(notsentflag==0){cursorvaluene=cursor_val(sd_data);cursorvaluepr+=cursorvaluene;}
;;;2111   
;;;2112   
;;;2113   }
;;;2114   else{
;;;2115   	remove_all_chars(data, '\n', '\n');
001264  220a              MOVS     r2,#0xa
001266  4611              MOV      r1,r2
001268  48e0              LDR      r0,|L151.5612|
00126a  f7fffffe          BL       remove_all_chars
;;;2116   			strcat(data,"CH\n");	
00126e  49e0              LDR      r1,|L151.5616|
001270  48de              LDR      r0,|L151.5612|
001272  f7fffffe          BL       strcat
;;;2117   			
;;;2118   	
;;;2119   	  delay(100);
001276  2064              MOVS     r0,#0x64
001278  f7fffffe          BL       delay
;;;2120   		clear();//memset(uart_string_gsm,0,5000);
00127c  f7fffffe          BL       clear
;;;2121   	
;;;2122   	memset(at_,0,100);
001280  2164              MOVS     r1,#0x64
001282  48dc              LDR      r0,|L151.5620|
001284  f7fffffe          BL       __aeabi_memclr
;;;2123   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001288  48d8              LDR      r0,|L151.5612|
00128a  f7fffffe          BL       strlen
00128e  1c44              ADDS     r4,r0,#1
001290  4623              MOV      r3,r4
001292  4ad9              LDR      r2,|L151.5624|
001294  49d9              LDR      r1,|L151.5628|
001296  48d7              LDR      r0,|L151.5620|
001298  f7fffffe          BL       __2sprintf
;;;2124   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00129c  2005              MOVS     r0,#5
00129e  4bd1              LDR      r3,|L151.5604|
0012a0  4ad7              LDR      r2,|L151.5632|
0012a2  49d8              LDR      r1,|L151.5636|
0012a4  9000              STR      r0,[sp,#0]
0012a6  48d3              LDR      r0,|L151.5620|
0012a8  f7fffffe          BL       send_SD
;;;2125   clear();	
0012ac  f7fffffe          BL       clear
;;;2126   									k2=0;									//string array counter for uart 1
0012b0  2000              MOVS     r0,#0
0012b2  49d5              LDR      r1,|L151.5640|
0012b4  6008              STR      r0,[r1,#0]  ; k2
;;;2127   									tout=0;	
0012b6  49cc              LDR      r1,|L151.5608|
0012b8  6008              STR      r0,[r1,#0]  ; tout
;;;2128   		for(k=0;k<strlen(data);k++)
0012ba  49d4              LDR      r1,|L151.5644|
0012bc  6008              STR      r0,[r1,#0]  ; k
0012be  e00b              B        |L151.4824|
                  |L151.4800|
;;;2129   		{
;;;2130   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0012c0  48ca              LDR      r0,|L151.5612|
0012c2  4ad2              LDR      r2,|L151.5644|
0012c4  6812              LDR      r2,[r2,#0]  ; k
0012c6  5c81              LDRB     r1,[r0,r2]
0012c8  48c3              LDR      r0,|L151.5592|
0012ca  f7fffffe          BL       uart_putchar
0012ce  48cf              LDR      r0,|L151.5644|
0012d0  6800              LDR      r0,[r0,#0]            ;2128  ; k
0012d2  1c40              ADDS     r0,r0,#1              ;2128
0012d4  49cd              LDR      r1,|L151.5644|
0012d6  6008              STR      r0,[r1,#0]            ;2128  ; k
                  |L151.4824|
0012d8  48c4              LDR      r0,|L151.5612|
0012da  f7fffffe          BL       strlen
0012de  49cb              LDR      r1,|L151.5644|
0012e0  6809              LDR      r1,[r1,#0]            ;2128  ; k
0012e2  4288              CMP      r0,r1                 ;2128
0012e4  d8ec              BHI      |L151.4800|
;;;2131   		}	
;;;2132   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0012e6  210a              MOVS     r1,#0xa
0012e8  48bb              LDR      r0,|L151.5592|
0012ea  f7fffffe          BL       uart_putchar
0012ee  210a              MOVS     r1,#0xa
0012f0  48b9              LDR      r0,|L151.5592|
0012f2  f7fffffe          BL       uart_putchar
0012f6  210a              MOVS     r1,#0xa
0012f8  48b7              LDR      r0,|L151.5592|
0012fa  f7fffffe          BL       uart_putchar
0012fe  210a              MOVS     r1,#0xa
001300  48b5              LDR      r0,|L151.5592|
001302  f7fffffe          BL       uart_putchar
001306  210a              MOVS     r1,#0xa
001308  48b3              LDR      r0,|L151.5592|
00130a  f7fffffe          BL       uart_putchar
00130e  210a              MOVS     r1,#0xa
001310  48b1              LDR      r0,|L151.5592|
001312  f7fffffe          BL       uart_putchar
001316  210a              MOVS     r1,#0xa
001318  48af              LDR      r0,|L151.5592|
00131a  f7fffffe          BL       uart_putchar
00131e  210a              MOVS     r1,#0xa
001320  48ad              LDR      r0,|L151.5592|
001322  f7fffffe          BL       uart_putchar
001326  210a              MOVS     r1,#0xa
001328  48ab              LDR      r0,|L151.5592|
00132a  f7fffffe          BL       uart_putchar
00132e  210a              MOVS     r1,#0xa
001330  48a9              LDR      r0,|L151.5592|
001332  f7fffffe          BL       uart_putchar
001336  210a              MOVS     r1,#0xa
001338  48a7              LDR      r0,|L151.5592|
00133a  f7fffffe          BL       uart_putchar
00133e  210a              MOVS     r1,#0xa
001340  48a5              LDR      r0,|L151.5592|
001342  f7fffffe          BL       uart_putchar
001346  210a              MOVS     r1,#0xa
001348  48a3              LDR      r0,|L151.5592|
00134a  f7fffffe          BL       uart_putchar
00134e  210a              MOVS     r1,#0xa
001350  48a1              LDR      r0,|L151.5592|
001352  f7fffffe          BL       uart_putchar
001356  210a              MOVS     r1,#0xa
001358  489f              LDR      r0,|L151.5592|
00135a  f7fffffe          BL       uart_putchar
00135e  210a              MOVS     r1,#0xa
001360  489d              LDR      r0,|L151.5592|
001362  f7fffffe          BL       uart_putchar
001366  210a              MOVS     r1,#0xa
001368  489b              LDR      r0,|L151.5592|
00136a  f7fffffe          BL       uart_putchar
00136e  210a              MOVS     r1,#0xa
001370  4899              LDR      r0,|L151.5592|
001372  f7fffffe          BL       uart_putchar
001376  210a              MOVS     r1,#0xa
001378  4897              LDR      r0,|L151.5592|
00137a  f7fffffe          BL       uart_putchar
00137e  210a              MOVS     r1,#0xa
001380  4895              LDR      r0,|L151.5592|
001382  f7fffffe          BL       uart_putchar
001386  210a              MOVS     r1,#0xa
001388  4893              LDR      r0,|L151.5592|
00138a  f7fffffe          BL       uart_putchar
00138e  210a              MOVS     r1,#0xa
001390  4891              LDR      r0,|L151.5592|
001392  f7fffffe          BL       uart_putchar
001396  210a              MOVS     r1,#0xa
001398  488f              LDR      r0,|L151.5592|
00139a  f7fffffe          BL       uart_putchar
00139e  210a              MOVS     r1,#0xa
0013a0  488d              LDR      r0,|L151.5592|
0013a2  f7fffffe          BL       uart_putchar
0013a6  210a              MOVS     r1,#0xa
0013a8  488b              LDR      r0,|L151.5592|
0013aa  f7fffffe          BL       uart_putchar
0013ae  210a              MOVS     r1,#0xa
0013b0  4889              LDR      r0,|L151.5592|
0013b2  f7fffffe          BL       uart_putchar
0013b6  210a              MOVS     r1,#0xa
0013b8  4887              LDR      r0,|L151.5592|
0013ba  f7fffffe          BL       uart_putchar
0013be  210a              MOVS     r1,#0xa
0013c0  4885              LDR      r0,|L151.5592|
0013c2  f7fffffe          BL       uart_putchar
0013c6  210a              MOVS     r1,#0xa
0013c8  4883              LDR      r0,|L151.5592|
0013ca  e000              B        |L151.5070|
                  |L151.5068|
0013cc  e3fd              B        |L151.7114|
                  |L151.5070|
0013ce  f7fffffe          BL       uart_putchar
0013d2  210a              MOVS     r1,#0xa
0013d4  4880              LDR      r0,|L151.5592|
0013d6  f7fffffe          BL       uart_putchar
0013da  210a              MOVS     r1,#0xa
0013dc  487e              LDR      r0,|L151.5592|
0013de  f7fffffe          BL       uart_putchar
0013e2  210a              MOVS     r1,#0xa
0013e4  487c              LDR      r0,|L151.5592|
0013e6  f7fffffe          BL       uart_putchar
0013ea  210a              MOVS     r1,#0xa
0013ec  487a              LDR      r0,|L151.5592|
0013ee  f7fffffe          BL       uart_putchar
0013f2  210a              MOVS     r1,#0xa
0013f4  4878              LDR      r0,|L151.5592|
0013f6  f7fffffe          BL       uart_putchar
0013fa  210a              MOVS     r1,#0xa
0013fc  4876              LDR      r0,|L151.5592|
0013fe  f7fffffe          BL       uart_putchar
001402  210a              MOVS     r1,#0xa
001404  4874              LDR      r0,|L151.5592|
001406  f7fffffe          BL       uart_putchar
00140a  210a              MOVS     r1,#0xa
00140c  4872              LDR      r0,|L151.5592|
00140e  f7fffffe          BL       uart_putchar
001412  210a              MOVS     r1,#0xa
001414  4870              LDR      r0,|L151.5592|
001416  f7fffffe          BL       uart_putchar
00141a  210a              MOVS     r1,#0xa
00141c  486e              LDR      r0,|L151.5592|
00141e  f7fffffe          BL       uart_putchar
001422  210a              MOVS     r1,#0xa
001424  486c              LDR      r0,|L151.5592|
001426  f7fffffe          BL       uart_putchar
00142a  210a              MOVS     r1,#0xa
00142c  486a              LDR      r0,|L151.5592|
00142e  f7fffffe          BL       uart_putchar
001432  210a              MOVS     r1,#0xa
001434  4868              LDR      r0,|L151.5592|
001436  f7fffffe          BL       uart_putchar
00143a  210a              MOVS     r1,#0xa
00143c  4866              LDR      r0,|L151.5592|
00143e  f7fffffe          BL       uart_putchar
001442  210a              MOVS     r1,#0xa
001444  4864              LDR      r0,|L151.5592|
001446  f7fffffe          BL       uart_putchar
00144a  210a              MOVS     r1,#0xa
00144c  4862              LDR      r0,|L151.5592|
00144e  f7fffffe          BL       uart_putchar
001452  210a              MOVS     r1,#0xa
001454  4860              LDR      r0,|L151.5592|
001456  f7fffffe          BL       uart_putchar
00145a  210a              MOVS     r1,#0xa
00145c  485e              LDR      r0,|L151.5592|
00145e  f7fffffe          BL       uart_putchar
001462  210a              MOVS     r1,#0xa
001464  485c              LDR      r0,|L151.5592|
001466  f7fffffe          BL       uart_putchar
00146a  210a              MOVS     r1,#0xa
00146c  485a              LDR      r0,|L151.5592|
00146e  f7fffffe          BL       uart_putchar
001472  210a              MOVS     r1,#0xa
001474  4858              LDR      r0,|L151.5592|
001476  f7fffffe          BL       uart_putchar
00147a  210a              MOVS     r1,#0xa
00147c  4856              LDR      r0,|L151.5592|
00147e  f7fffffe          BL       uart_putchar
001482  210a              MOVS     r1,#0xa
001484  4854              LDR      r0,|L151.5592|
001486  f7fffffe          BL       uart_putchar
00148a  210a              MOVS     r1,#0xa
00148c  4852              LDR      r0,|L151.5592|
00148e  f7fffffe          BL       uart_putchar
001492  210a              MOVS     r1,#0xa
001494  4850              LDR      r0,|L151.5592|
001496  f7fffffe          BL       uart_putchar
00149a  210a              MOVS     r1,#0xa
00149c  484e              LDR      r0,|L151.5592|
00149e  f7fffffe          BL       uart_putchar
0014a2  210a              MOVS     r1,#0xa
0014a4  484c              LDR      r0,|L151.5592|
0014a6  f7fffffe          BL       uart_putchar
0014aa  210a              MOVS     r1,#0xa
0014ac  484a              LDR      r0,|L151.5592|
0014ae  f7fffffe          BL       uart_putchar
;;;2133   									//memset(data,0,1000);
;;;2134   														//timer counts to wait for characters in uart 1 									
;;;2135   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0014b2  bf00              NOP      
                  |L151.5300|
0014b4  4949              LDR      r1,|L151.5596|
0014b6  484a              LDR      r0,|L151.5600|
0014b8  f7fffffe          BL       strstr
0014bc  2800              CMP      r0,#0
0014be  d109              BNE      |L151.5332|
0014c0  4948              LDR      r1,|L151.5604|
0014c2  4847              LDR      r0,|L151.5600|
0014c4  f7fffffe          BL       strstr
0014c8  2800              CMP      r0,#0
0014ca  d103              BNE      |L151.5332|
0014cc  4846              LDR      r0,|L151.5608|
0014ce  6800              LDR      r0,[r0,#0]  ; tout
0014d0  2805              CMP      r0,#5
0014d2  ddef              BLE      |L151.5300|
                  |L151.5332|
;;;2136   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2137   									}
;;;2138   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0014d4  f7fffffe          BL       clear
;;;2139   									//clear();
;;;2140   									memset(data,0,strlen(data));
0014d8  4844              LDR      r0,|L151.5612|
0014da  f7fffffe          BL       strlen
0014de  4604              MOV      r4,r0
0014e0  4621              MOV      r1,r4
0014e2  4842              LDR      r0,|L151.5612|
0014e4  f7fffffe          BL       __aeabi_memclr
;;;2141   									clear();
0014e8  f7fffffe          BL       clear
;;;2142   
;;;2143   								
;;;2144   	
;;;2145   	
;;;2146   	
;;;2147   	//log_it();
;;;2148   			memset(data,0,strlen(data));
0014ec  483f              LDR      r0,|L151.5612|
0014ee  f7fffffe          BL       strlen
0014f2  4604              MOV      r4,r0
0014f4  4621              MOV      r1,r4
0014f6  483d              LDR      r0,|L151.5612|
0014f8  f7fffffe          BL       __aeabi_memclr
;;;2149   //*****************************tcp_initialization();************************************//
;;;2150   
;;;2151   	
;;;2152   msg_sim800(); 
0014fc  f7fffffe          BL       msg_sim800
;;;2153   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
001500  2005              MOVS     r0,#5
001502  4b38              LDR      r3,|L151.5604|
001504  4a3e              LDR      r2,|L151.5632|
001506  4942              LDR      r1,|L151.5648|
001508  9000              STR      r0,[sp,#0]
00150a  4842              LDR      r0,|L151.5652|
00150c  f7fffffe          BL       send_GSM
;;;2154   delay(100);
001510  2064              MOVS     r0,#0x64
001512  f7fffffe          BL       delay
;;;2155   send_GSM("\r\nAT+CFUN=1\r\n", "ERROR", "NOT INSERTED" , "Ready", 4);	
001516  2004              MOVS     r0,#4
001518  4b3f              LDR      r3,|L151.5656|
00151a  4a40              LDR      r2,|L151.5660|
00151c  4931              LDR      r1,|L151.5604|
00151e  9000              STR      r0,[sp,#0]
001520  483f              LDR      r0,|L151.5664|
001522  f7fffffe          BL       send_GSM
;;;2156   GPS_COLLECT2();
001526  f7fffffe          BL       GPS_COLLECT2
;;;2157   strcat(data,"CH\n");		
00152a  4931              LDR      r1,|L151.5616|
00152c  482f              LDR      r0,|L151.5612|
00152e  f7fffffe          BL       strcat
;;;2158   GPS_COLLECT2();
001532  f7fffffe          BL       GPS_COLLECT2
;;;2159   strcat(data,"CH\n");	
001536  492e              LDR      r1,|L151.5616|
001538  482c              LDR      r0,|L151.5612|
00153a  f7fffffe          BL       strcat
;;;2160   GPS_COLLECT2();
00153e  f7fffffe          BL       GPS_COLLECT2
;;;2161   strcat(data,"CH\n");
001542  492b              LDR      r1,|L151.5616|
001544  4829              LDR      r0,|L151.5612|
001546  f7fffffe          BL       strcat
;;;2162   cond201=(strstr(uart_string_gsm, "OK"));
00154a  4931              LDR      r1,|L151.5648|
00154c  4824              LDR      r0,|L151.5600|
00154e  f7fffffe          BL       strstr
001552  4934              LDR      r1,|L151.5668|
001554  6008              STR      r0,[r1,#0]  ; cond201
;;;2163   cond200=(strstr(uart_string_gsm, "ERROR"));
001556  4923              LDR      r1,|L151.5604|
001558  4821              LDR      r0,|L151.5600|
00155a  f7fffffe          BL       strstr
00155e  4932              LDR      r1,|L151.5672|
001560  6008              STR      r0,[r1,#0]  ; cond200
;;;2164   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
001562  4830              LDR      r0,|L151.5668|
001564  6800              LDR      r0,[r0,#0]  ; cond201
001566  2800              CMP      r0,#0
001568  d101              BNE      |L151.5486|
00156a  2001              MOVS     r0,#1
00156c  e000              B        |L151.5488|
                  |L151.5486|
00156e  2000              MOVS     r0,#0
                  |L151.5488|
001570  2800              CMP      r0,#0
                  |L151.5490|
001572  d07d              BEQ      |L151.5744|
001574  482c              LDR      r0,|L151.5672|
001576  6800              LDR      r0,[r0,#0]  ; cond200
001578  2800              CMP      r0,#0
00157a  d101              BNE      |L151.5504|
00157c  2001              MOVS     r0,#1
00157e  e000              B        |L151.5506|
                  |L151.5504|
001580  2000              MOVS     r0,#0
                  |L151.5506|
001582  2800              CMP      r0,#0
001584  d0f5              BEQ      |L151.5490|
001586  4829              LDR      r0,|L151.5676|
001588  6800              LDR      r0,[r0,#0]  ; sleep_flag
00158a  2801              CMP      r0,#1
00158c  d0f1              BEQ      |L151.5490|
;;;2165   {
;;;2166   delay(100);
00158e  2064              MOVS     r0,#0x64
001590  f7fffffe          BL       delay
;;;2167   clear();//memset(uart_string_gsm,0,5000);
001594  f7fffffe          BL       clear
;;;2168   memset(at_,0,100);
001598  2164              MOVS     r1,#0x64
00159a  4816              LDR      r0,|L151.5620|
00159c  f7fffffe          BL       __aeabi_memclr
;;;2169   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0015a0  4812              LDR      r0,|L151.5612|
0015a2  f7fffffe          BL       strlen
0015a6  1c44              ADDS     r4,r0,#1
0015a8  4623              MOV      r3,r4
0015aa  4a13              LDR      r2,|L151.5624|
0015ac  4913              LDR      r1,|L151.5628|
0015ae  4811              LDR      r0,|L151.5620|
0015b0  f7fffffe          BL       __2sprintf
;;;2170   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0015b4  2005              MOVS     r0,#5
0015b6  4b0b              LDR      r3,|L151.5604|
0015b8  4a11              LDR      r2,|L151.5632|
0015ba  4912              LDR      r1,|L151.5636|
0015bc  9000              STR      r0,[sp,#0]
0015be  480d              LDR      r0,|L151.5620|
0015c0  f7fffffe          BL       send_SD
;;;2171   clear();	
0015c4  f7fffffe          BL       clear
;;;2172   k2=0;									//string array counter for uart 1
0015c8  2000              MOVS     r0,#0
0015ca  490f              LDR      r1,|L151.5640|
0015cc  6008              STR      r0,[r1,#0]  ; k2
;;;2173   tout=0;	
0015ce  4906              LDR      r1,|L151.5608|
0015d0  6008              STR      r0,[r1,#0]  ; tout
;;;2174   for(k=0;k<strlen(data);k++)
0015d2  490e              LDR      r1,|L151.5644|
0015d4  6008              STR      r0,[r1,#0]  ; k
0015d6  e037              B        |L151.5704|
                  |L151.5592|
                          DCD      0x4006b000
                  |L151.5596|
                          DCD      ||.conststring||+0x70
                  |L151.5600|
                          DCD      uart_string_gsm
                  |L151.5604|
                          DCD      ||.conststring||+0xe0
                  |L151.5608|
                          DCD      tout
                  |L151.5612|
                          DCD      data
                  |L151.5616|
                          DCD      ||.conststring||+0x434
                  |L151.5620|
                          DCD      at_
                  |L151.5624|
                          DCD      drive
                  |L151.5628|
                          DCD      ||.conststring||+0x438
                  |L151.5632|
                          DCD      ||.conststring||+0x18
                  |L151.5636|
                          DCD      ||.conststring||+0x20
                  |L151.5640|
                          DCD      ||k2||
                  |L151.5644|
                          DCD      k
                  |L151.5648|
                          DCD      ||.conststring||+0x2c
                  |L151.5652|
                          DCD      ||.conststring||+0x688
                  |L151.5656|
                          DCD      ||.conststring||+0x46c
                  |L151.5660|
                          DCD      ||.conststring||+0x698
                  |L151.5664|
                          DCD      ||.conststring||+0x6a8
                  |L151.5668|
                          DCD      cond201
                  |L151.5672|
                          DCD      cond200
                  |L151.5676|
                          DCD      sleep_flag
                  |L151.5680|
;;;2175   {
;;;2176   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001630  48fd              LDR      r0,|L151.6696|
001632  4afe              LDR      r2,|L151.6700|
001634  6812              LDR      r2,[r2,#0]  ; k
001636  5c81              LDRB     r1,[r0,r2]
001638  48fd              LDR      r0,|L151.6704|
00163a  f7fffffe          BL       uart_putchar
00163e  48fb              LDR      r0,|L151.6700|
001640  6800              LDR      r0,[r0,#0]            ;2174  ; k
001642  1c40              ADDS     r0,r0,#1              ;2174
001644  49f9              LDR      r1,|L151.6700|
001646  6008              STR      r0,[r1,#0]            ;2174  ; k
                  |L151.5704|
001648  48f7              LDR      r0,|L151.6696|
00164a  f7fffffe          BL       strlen
00164e  49f7              LDR      r1,|L151.6700|
001650  6809              LDR      r1,[r1,#0]            ;2174  ; k
001652  4288              CMP      r0,r1                 ;2174
001654  d8ec              BHI      |L151.5680|
;;;2177   }	
;;;2178   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001656  210a              MOVS     r1,#0xa
001658  48f5              LDR      r0,|L151.6704|
00165a  f7fffffe          BL       uart_putchar
00165e  210a              MOVS     r1,#0xa
001660  48f3              LDR      r0,|L151.6704|
001662  f7fffffe          BL       uart_putchar
001666  210a              MOVS     r1,#0xa
001668  48f1              LDR      r0,|L151.6704|
00166a  f7fffffe          BL       uart_putchar
00166e  e000              B        |L151.5746|
                  |L151.5744|
001670  e104              B        |L151.6268|
                  |L151.5746|
001672  210a              MOVS     r1,#0xa
001674  48ee              LDR      r0,|L151.6704|
001676  f7fffffe          BL       uart_putchar
00167a  210a              MOVS     r1,#0xa
00167c  48ec              LDR      r0,|L151.6704|
00167e  f7fffffe          BL       uart_putchar
001682  210a              MOVS     r1,#0xa
001684  48ea              LDR      r0,|L151.6704|
001686  f7fffffe          BL       uart_putchar
00168a  210a              MOVS     r1,#0xa
00168c  48e8              LDR      r0,|L151.6704|
00168e  f7fffffe          BL       uart_putchar
001692  210a              MOVS     r1,#0xa
001694  48e6              LDR      r0,|L151.6704|
001696  f7fffffe          BL       uart_putchar
00169a  210a              MOVS     r1,#0xa
00169c  48e4              LDR      r0,|L151.6704|
00169e  f7fffffe          BL       uart_putchar
0016a2  210a              MOVS     r1,#0xa
0016a4  48e2              LDR      r0,|L151.6704|
0016a6  f7fffffe          BL       uart_putchar
0016aa  210a              MOVS     r1,#0xa
0016ac  48e0              LDR      r0,|L151.6704|
0016ae  f7fffffe          BL       uart_putchar
0016b2  210a              MOVS     r1,#0xa
0016b4  48de              LDR      r0,|L151.6704|
0016b6  f7fffffe          BL       uart_putchar
0016ba  210a              MOVS     r1,#0xa
0016bc  48dc              LDR      r0,|L151.6704|
0016be  f7fffffe          BL       uart_putchar
0016c2  210a              MOVS     r1,#0xa
0016c4  48da              LDR      r0,|L151.6704|
0016c6  f7fffffe          BL       uart_putchar
0016ca  210a              MOVS     r1,#0xa
0016cc  48d8              LDR      r0,|L151.6704|
0016ce  f7fffffe          BL       uart_putchar
0016d2  210a              MOVS     r1,#0xa
0016d4  48d6              LDR      r0,|L151.6704|
0016d6  f7fffffe          BL       uart_putchar
0016da  210a              MOVS     r1,#0xa
0016dc  48d4              LDR      r0,|L151.6704|
0016de  f7fffffe          BL       uart_putchar
0016e2  210a              MOVS     r1,#0xa
0016e4  48d2              LDR      r0,|L151.6704|
0016e6  f7fffffe          BL       uart_putchar
0016ea  210a              MOVS     r1,#0xa
0016ec  48d0              LDR      r0,|L151.6704|
0016ee  f7fffffe          BL       uart_putchar
0016f2  210a              MOVS     r1,#0xa
0016f4  48ce              LDR      r0,|L151.6704|
0016f6  f7fffffe          BL       uart_putchar
0016fa  210a              MOVS     r1,#0xa
0016fc  48cc              LDR      r0,|L151.6704|
0016fe  f7fffffe          BL       uart_putchar
001702  210a              MOVS     r1,#0xa
001704  48ca              LDR      r0,|L151.6704|
001706  f7fffffe          BL       uart_putchar
00170a  210a              MOVS     r1,#0xa
00170c  48c8              LDR      r0,|L151.6704|
00170e  f7fffffe          BL       uart_putchar
001712  210a              MOVS     r1,#0xa
001714  48c6              LDR      r0,|L151.6704|
001716  f7fffffe          BL       uart_putchar
00171a  210a              MOVS     r1,#0xa
00171c  48c4              LDR      r0,|L151.6704|
00171e  f7fffffe          BL       uart_putchar
001722  210a              MOVS     r1,#0xa
001724  48c2              LDR      r0,|L151.6704|
001726  f7fffffe          BL       uart_putchar
00172a  210a              MOVS     r1,#0xa
00172c  48c0              LDR      r0,|L151.6704|
00172e  f7fffffe          BL       uart_putchar
001732  210a              MOVS     r1,#0xa
001734  48be              LDR      r0,|L151.6704|
001736  f7fffffe          BL       uart_putchar
00173a  210a              MOVS     r1,#0xa
00173c  48bc              LDR      r0,|L151.6704|
00173e  f7fffffe          BL       uart_putchar
001742  210a              MOVS     r1,#0xa
001744  48ba              LDR      r0,|L151.6704|
001746  f7fffffe          BL       uart_putchar
00174a  210a              MOVS     r1,#0xa
00174c  48b8              LDR      r0,|L151.6704|
00174e  f7fffffe          BL       uart_putchar
001752  210a              MOVS     r1,#0xa
001754  48b6              LDR      r0,|L151.6704|
001756  f7fffffe          BL       uart_putchar
00175a  210a              MOVS     r1,#0xa
00175c  48b4              LDR      r0,|L151.6704|
00175e  f7fffffe          BL       uart_putchar
001762  210a              MOVS     r1,#0xa
001764  48b2              LDR      r0,|L151.6704|
001766  f7fffffe          BL       uart_putchar
00176a  210a              MOVS     r1,#0xa
00176c  48b0              LDR      r0,|L151.6704|
00176e  f7fffffe          BL       uart_putchar
001772  210a              MOVS     r1,#0xa
001774  48ae              LDR      r0,|L151.6704|
001776  f7fffffe          BL       uart_putchar
00177a  210a              MOVS     r1,#0xa
00177c  48ac              LDR      r0,|L151.6704|
00177e  f7fffffe          BL       uart_putchar
001782  210a              MOVS     r1,#0xa
001784  48aa              LDR      r0,|L151.6704|
001786  f7fffffe          BL       uart_putchar
00178a  210a              MOVS     r1,#0xa
00178c  48a8              LDR      r0,|L151.6704|
00178e  f7fffffe          BL       uart_putchar
001792  210a              MOVS     r1,#0xa
001794  48a6              LDR      r0,|L151.6704|
001796  f7fffffe          BL       uart_putchar
00179a  210a              MOVS     r1,#0xa
00179c  48a4              LDR      r0,|L151.6704|
00179e  f7fffffe          BL       uart_putchar
0017a2  210a              MOVS     r1,#0xa
0017a4  48a2              LDR      r0,|L151.6704|
0017a6  f7fffffe          BL       uart_putchar
0017aa  210a              MOVS     r1,#0xa
0017ac  48a0              LDR      r0,|L151.6704|
0017ae  f7fffffe          BL       uart_putchar
0017b2  e000              B        |L151.6070|
                  |L151.6068|
0017b4  e2e1              B        |L151.7546|
                  |L151.6070|
0017b6  210a              MOVS     r1,#0xa
0017b8  489d              LDR      r0,|L151.6704|
0017ba  f7fffffe          BL       uart_putchar
0017be  210a              MOVS     r1,#0xa
0017c0  489b              LDR      r0,|L151.6704|
0017c2  f7fffffe          BL       uart_putchar
0017c6  210a              MOVS     r1,#0xa
0017c8  4899              LDR      r0,|L151.6704|
0017ca  f7fffffe          BL       uart_putchar
0017ce  210a              MOVS     r1,#0xa
0017d0  4897              LDR      r0,|L151.6704|
0017d2  f7fffffe          BL       uart_putchar
0017d6  210a              MOVS     r1,#0xa
0017d8  4895              LDR      r0,|L151.6704|
0017da  f7fffffe          BL       uart_putchar
0017de  210a              MOVS     r1,#0xa
0017e0  4893              LDR      r0,|L151.6704|
0017e2  f7fffffe          BL       uart_putchar
0017e6  210a              MOVS     r1,#0xa
0017e8  4891              LDR      r0,|L151.6704|
0017ea  f7fffffe          BL       uart_putchar
0017ee  210a              MOVS     r1,#0xa
0017f0  488f              LDR      r0,|L151.6704|
0017f2  f7fffffe          BL       uart_putchar
0017f6  210a              MOVS     r1,#0xa
0017f8  488d              LDR      r0,|L151.6704|
0017fa  f7fffffe          BL       uart_putchar
0017fe  210a              MOVS     r1,#0xa
001800  488b              LDR      r0,|L151.6704|
001802  f7fffffe          BL       uart_putchar
001806  210a              MOVS     r1,#0xa
001808  4889              LDR      r0,|L151.6704|
00180a  f7fffffe          BL       uart_putchar
00180e  210a              MOVS     r1,#0xa
001810  4887              LDR      r0,|L151.6704|
001812  f7fffffe          BL       uart_putchar
001816  210a              MOVS     r1,#0xa
001818  4885              LDR      r0,|L151.6704|
00181a  f7fffffe          BL       uart_putchar
00181e  210a              MOVS     r1,#0xa
001820  4883              LDR      r0,|L151.6704|
001822  f7fffffe          BL       uart_putchar
;;;2179   									//memset(data,0,1000);
;;;2180   														//timer counts to wait for characters in uart 1 									
;;;2181   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001826  bf00              NOP      
                  |L151.6184|
001828  4982              LDR      r1,|L151.6708|
00182a  4883              LDR      r0,|L151.6712|
00182c  f7fffffe          BL       strstr
001830  2800              CMP      r0,#0
001832  d109              BNE      |L151.6216|
001834  4981              LDR      r1,|L151.6716|
001836  4880              LDR      r0,|L151.6712|
001838  f7fffffe          BL       strstr
00183c  2800              CMP      r0,#0
00183e  d103              BNE      |L151.6216|
001840  487f              LDR      r0,|L151.6720|
001842  6800              LDR      r0,[r0,#0]  ; tout
001844  2805              CMP      r0,#5
001846  ddef              BLE      |L151.6184|
                  |L151.6216|
;;;2182   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2183   									}
;;;2184   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001848  f7fffffe          BL       clear
;;;2185   									//clear();
;;;2186   									memset(data,0,strlen(data));
00184c  4876              LDR      r0,|L151.6696|
00184e  f7fffffe          BL       strlen
001852  4604              MOV      r4,r0
001854  4621              MOV      r1,r4
001856  4874              LDR      r0,|L151.6696|
001858  f7fffffe          BL       __aeabi_memclr
;;;2187   									clear();
00185c  f7fffffe          BL       clear
;;;2188   									RESET_OFF;delay(100);
001860  2020              MOVS     r0,#0x20
001862  4978              LDR      r1,|L151.6724|
001864  6088              STR      r0,[r1,#8]
001866  2064              MOVS     r0,#0x64
001868  f7fffffe          BL       delay
;;;2189   									RESET_ON;delay(100);		
00186c  2020              MOVS     r0,#0x20
00186e  4975              LDR      r1,|L151.6724|
001870  6048              STR      r0,[r1,#4]
001872  2064              MOVS     r0,#0x64
001874  e000              B        |L151.6264|
                  |L151.6262|
001876  e3df              B        |L151.8248|
                  |L151.6264|
001878  f7fffffe          BL       delay
                  |L151.6268|
;;;2190   }
;;;2191   	
;;;2192   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
00187c  2004              MOVS     r0,#4
00187e  4b72              LDR      r3,|L151.6728|
001880  4a72              LDR      r2,|L151.6732|
001882  4973              LDR      r1,|L151.6736|
001884  9000              STR      r0,[sp,#0]
001886  4873              LDR      r0,|L151.6740|
001888  f7fffffe          BL       send_GSM
;;;2193   GPS_COLLECT2();
00188c  f7fffffe          BL       GPS_COLLECT2
;;;2194   strcat(data,"CH\n");	
001890  4971              LDR      r1,|L151.6744|
001892  4865              LDR      r0,|L151.6696|
001894  f7fffffe          BL       strcat
;;;2195   memset(at_,0,100);
001898  2164              MOVS     r1,#0x64
00189a  4870              LDR      r0,|L151.6748|
00189c  f7fffffe          BL       __aeabi_memclr
;;;2196   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
0018a0  4a6f              LDR      r2,|L151.6752|
0018a2  4970              LDR      r1,|L151.6756|
0018a4  486d              LDR      r0,|L151.6748|
0018a6  f7fffffe          BL       __2sprintf
;;;2197   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
0018aa  486f              LDR      r0,|L151.6760|
0018ac  6800              LDR      r0,[r0,#0]  ; tmeout
0018ae  4b66              LDR      r3,|L151.6728|
0018b0  4a66              LDR      r2,|L151.6732|
0018b2  4967              LDR      r1,|L151.6736|
0018b4  9000              STR      r0,[sp,#0]
0018b6  4869              LDR      r0,|L151.6748|
0018b8  f7fffffe          BL       send_GSM
;;;2198   msg_sim800(); 
0018bc  f7fffffe          BL       msg_sim800
;;;2199   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
0018c0  2004              MOVS     r0,#4
0018c2  4b6a              LDR      r3,|L151.6764|
0018c4  4a61              LDR      r2,|L151.6732|
0018c6  4962              LDR      r1,|L151.6736|
0018c8  9000              STR      r0,[sp,#0]
0018ca  4869              LDR      r0,|L151.6768|
0018cc  f7fffffe          BL       send_GSM
;;;2200   GPS_COLLECT2();
0018d0  f7fffffe          BL       GPS_COLLECT2
;;;2201   strcat(data,"CH\n");	
0018d4  4960              LDR      r1,|L151.6744|
0018d6  4854              LDR      r0,|L151.6696|
0018d8  f7fffffe          BL       strcat
;;;2202   GPS_COLLECT2();
0018dc  f7fffffe          BL       GPS_COLLECT2
;;;2203   strcat(data,"CH\n");	
0018e0  495d              LDR      r1,|L151.6744|
0018e2  4851              LDR      r0,|L151.6696|
0018e4  f7fffffe          BL       strcat
;;;2204   
;;;2205   
;;;2206   msg_sim800(); 
0018e8  f7fffffe          BL       msg_sim800
;;;2207   GPS_COLLECT2();
0018ec  f7fffffe          BL       GPS_COLLECT2
;;;2208   strcat(data,"CH\n");	
0018f0  4959              LDR      r1,|L151.6744|
0018f2  484d              LDR      r0,|L151.6696|
0018f4  f7fffffe          BL       strcat
;;;2209   					clear();send_modem("\nAT+CIFSR\r\r\n");clear();
0018f8  f7fffffe          BL       clear
0018fc  485d              LDR      r0,|L151.6772|
0018fe  f7fffffe          BL       send_modem
001902  f7fffffe          BL       clear
;;;2210   					delay(20);
001906  2014              MOVS     r0,#0x14
001908  f7fffffe          BL       delay
;;;2211   
;;;2212   
;;;2213   msg_sim800(); 
00190c  f7fffffe          BL       msg_sim800
;;;2214   
;;;2215   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001910  4b59              LDR      r3,|L151.6776|
001912  4a5a              LDR      r2,|L151.6780|
001914  495a              LDR      r1,|L151.6784|
001916  4851              LDR      r0,|L151.6748|
001918  f7fffffe          BL       __2sprintf
;;;2216   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
00191c  4852              LDR      r0,|L151.6760|
00191e  6800              LDR      r0,[r0,#0]  ; tmeout
001920  4b49              LDR      r3,|L151.6728|
001922  4a46              LDR      r2,|L151.6716|
001924  4957              LDR      r1,|L151.6788|
001926  9000              STR      r0,[sp,#0]
001928  484c              LDR      r0,|L151.6748|
00192a  f7fffffe          BL       send_GSM
;;;2217   						clear();
00192e  f7fffffe          BL       clear
;;;2218   						
;;;2219   						
;;;2220   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
001932  484d              LDR      r0,|L151.6760|
001934  6800              LDR      r0,[r0,#0]  ; tmeout
001936  4b54              LDR      r3,|L151.6792|
001938  4a40              LDR      r2,|L151.6716|
00193a  4954              LDR      r1,|L151.6796|
00193c  9000              STR      r0,[sp,#0]
00193e  4854              LDR      r0,|L151.6800|
001940  f7fffffe          BL       send_GSM
;;;2221   //*****************************tcp_initialization ends**********************************//		
;;;2222   
;;;2223   			if(mystrstr(uart_string_gsm,'>')){
001944  213e              MOVS     r1,#0x3e
001946  483c              LDR      r0,|L151.6712|
001948  f7fffffe          BL       mystrstr
00194c  2800              CMP      r0,#0
00194e  d069              BEQ      |L151.6692|
;;;2224   									clear();
001950  f7fffffe          BL       clear
;;;2225   									memset(uart_string_gsm,0,5000);
001954  494f              LDR      r1,|L151.6804|
001956  4838              LDR      r0,|L151.6712|
001958  f7fffffe          BL       __aeabi_memclr
;;;2226   									qwe=strlen(data);
00195c  4832              LDR      r0,|L151.6696|
00195e  f7fffffe          BL       strlen
001962  494d              LDR      r1,|L151.6808|
001964  6008              STR      r0,[r1,#0]  ; qwe
;;;2227   									tout=0;
001966  2000              MOVS     r0,#0
001968  4935              LDR      r1,|L151.6720|
00196a  6008              STR      r0,[r1,#0]  ; tout
;;;2228   									k2=0;
00196c  494b              LDR      r1,|L151.6812|
00196e  6008              STR      r0,[r1,#0]  ; k2
;;;2229   									for(k=0;k<(qwe);k++)
001970  492e              LDR      r1,|L151.6700|
001972  6008              STR      r0,[r1,#0]  ; k
001974  e00b              B        |L151.6542|
                  |L151.6518|
;;;2230   									{
;;;2231   										uart_putchar(UART1_BASE_PTR, data[k]);
001976  482c              LDR      r0,|L151.6696|
001978  4a2c              LDR      r2,|L151.6700|
00197a  6812              LDR      r2,[r2,#0]  ; k
00197c  5c81              LDRB     r1,[r0,r2]
00197e  482c              LDR      r0,|L151.6704|
001980  f7fffffe          BL       uart_putchar
001984  4829              LDR      r0,|L151.6700|
001986  6800              LDR      r0,[r0,#0]            ;2229  ; k
001988  1c40              ADDS     r0,r0,#1              ;2229
00198a  4928              LDR      r1,|L151.6700|
00198c  6008              STR      r0,[r1,#0]            ;2229  ; k
                  |L151.6542|
00198e  4827              LDR      r0,|L151.6700|
001990  6800              LDR      r0,[r0,#0]            ;2229  ; k
001992  4941              LDR      r1,|L151.6808|
001994  6809              LDR      r1,[r1,#0]            ;2229  ; qwe
001996  4288              CMP      r0,r1                 ;2229
001998  dbed              BLT      |L151.6518|
;;;2232   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
00199a  210a              MOVS     r1,#0xa
00199c  4824              LDR      r0,|L151.6704|
00199e  f7fffffe          BL       uart_putchar
0019a2  211a              MOVS     r1,#0x1a
0019a4  4822              LDR      r0,|L151.6704|
0019a6  f7fffffe          BL       uart_putchar
0019aa  211a              MOVS     r1,#0x1a
0019ac  4820              LDR      r0,|L151.6704|
0019ae  f7fffffe          BL       uart_putchar
0019b2  211a              MOVS     r1,#0x1a
0019b4  481e              LDR      r0,|L151.6704|
0019b6  f7fffffe          BL       uart_putchar
0019ba  211a              MOVS     r1,#0x1a
0019bc  481c              LDR      r0,|L151.6704|
0019be  f7fffffe          BL       uart_putchar
0019c2  211a              MOVS     r1,#0x1a
0019c4  481a              LDR      r0,|L151.6704|
0019c6  f7fffffe          BL       uart_putchar
0019ca  211a              MOVS     r1,#0x1a
0019cc  4818              LDR      r0,|L151.6704|
0019ce  f7fffffe          BL       uart_putchar
;;;2233   															do
0019d2  bf00              NOP      
                  |L151.6612|
;;;2234   																{q1=strstr(uart_string_gsm,"SEND OK");
0019d4  4932              LDR      r1,|L151.6816|
0019d6  4818              LDR      r0,|L151.6712|
0019d8  f7fffffe          BL       strstr
0019dc  4931              LDR      r1,|L151.6820|
0019de  6008              STR      r0,[r1,#0]  ; q1
;;;2235   																	q2=strstr(uart_string_gsm, "ERROR");
0019e0  4916              LDR      r1,|L151.6716|
0019e2  4815              LDR      r0,|L151.6712|
0019e4  f7fffffe          BL       strstr
0019e8  492f              LDR      r1,|L151.6824|
0019ea  6008              STR      r0,[r1,#0]  ; q2
;;;2236   																		q3=strstr(uart_string_gsm, "FAIL");	
0019ec  492f              LDR      r1,|L151.6828|
0019ee  4812              LDR      r0,|L151.6712|
0019f0  f7fffffe          BL       strstr
0019f4  492e              LDR      r1,|L151.6832|
0019f6  6008              STR      r0,[r1,#0]  ; q3
;;;2237   																			q4=strstr(uart_string_gsm, "DEACT");	
0019f8  491c              LDR      r1,|L151.6764|
0019fa  480f              LDR      r0,|L151.6712|
0019fc  f7fffffe          BL       strstr
001a00  492c              LDR      r1,|L151.6836|
001a02  6008              STR      r0,[r1,#0]  ; q4
;;;2238   																	
;;;2239   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
001a04  4827              LDR      r0,|L151.6820|
001a06  6800              LDR      r0,[r0,#0]  ; q1
001a08  2800              CMP      r0,#0
001a0a  d15a              BNE      |L151.6850|
001a0c  4826              LDR      r0,|L151.6824|
001a0e  6800              LDR      r0,[r0,#0]  ; q2
001a10  2800              CMP      r0,#0
001a12  d156              BNE      |L151.6850|
001a14  4826              LDR      r0,|L151.6832|
001a16  6800              LDR      r0,[r0,#0]  ; q3
001a18  2800              CMP      r0,#0
001a1a  d152              BNE      |L151.6850|
001a1c  4608              MOV      r0,r1
001a1e  6800              LDR      r0,[r0,#0]  ; q4
001a20  2800              CMP      r0,#0
001a22  e049              B        |L151.6840|
                  |L151.6692|
001a24  e1aa              B        |L151.7548|
001a26  0000              DCW      0x0000
                  |L151.6696|
                          DCD      data
                  |L151.6700|
                          DCD      k
                  |L151.6704|
                          DCD      0x4006b000
                  |L151.6708|
                          DCD      ||.conststring||+0x70
                  |L151.6712|
                          DCD      uart_string_gsm
                  |L151.6716|
                          DCD      ||.conststring||+0xe0
                  |L151.6720|
                          DCD      tout
                  |L151.6724|
                          DCD      0x400ff080
                  |L151.6728|
                          DCD      ||.conststring||+0x10
                  |L151.6732|
                          DCD      ||.conststring||+0x18
                  |L151.6736|
                          DCD      ||.conststring||+0x2c
                  |L151.6740|
                          DCD      ||.conststring||+0x6b8
                  |L151.6744|
                          DCD      ||.conststring||+0x434
                  |L151.6748|
                          DCD      at_
                  |L151.6752|
                          DCD      apn
                  |L151.6756|
                          DCD      ||.conststring||+0x6c8
                  |L151.6760|
                          DCD      tmeout
                  |L151.6764|
                          DCD      ||.conststring||+0x638
                  |L151.6768|
                          DCD      ||.conststring||+0x6dc
                  |L151.6772|
                          DCD      ||.conststring||+0x6ec
                  |L151.6776|
                          DCD      port
                  |L151.6780|
                          DCD      ||ip||
                  |L151.6784|
                          DCD      ||.conststring||+0x6fc
                  |L151.6788|
                          DCD      ||.conststring||+0x670
                  |L151.6792|
                          DCD      ||.conststring||+0x71c
                  |L151.6796|
                          DCD      ||.conststring||+0x20
                  |L151.6800|
                          DCD      ||.conststring||+0x678
                  |L151.6804|
                          DCD      0x00001388
                  |L151.6808|
                          DCD      qwe
                  |L151.6812|
                          DCD      ||k2||
                  |L151.6816|
                          DCD      ||.conststring||+0x628
                  |L151.6820|
                          DCD      ||q1||
                  |L151.6824|
                          DCD      ||q2||
                  |L151.6828|
                          DCD      ||.conststring||+0x630
                  |L151.6832|
                          DCD      ||q3||
                  |L151.6836|
                          DCD      ||q4||
                  |L151.6840|
001ab8  d103              BNE      |L151.6850|
001aba  48fe              LDR      r0,|L151.7860|
001abc  6800              LDR      r0,[r0,#0]  ; tout
001abe  2808              CMP      r0,#8
001ac0  dd88              BLE      |L151.6612|
                  |L151.6850|
;;;2240   															
;;;2241   																			delay(10);clear();
001ac2  200a              MOVS     r0,#0xa
001ac4  f7fffffe          BL       delay
001ac8  f7fffffe          BL       clear
;;;2242   														uart_putchar(UART1_BASE_PTR,0x1A);
001acc  211a              MOVS     r1,#0x1a
001ace  48fa              LDR      r0,|L151.7864|
001ad0  f7fffffe          BL       uart_putchar
;;;2243   												delay(10);
001ad4  200a              MOVS     r0,#0xa
001ad6  f7fffffe          BL       delay
;;;2244   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001ada  211a              MOVS     r1,#0x1a
001adc  48f6              LDR      r0,|L151.7864|
001ade  f7fffffe          BL       uart_putchar
001ae2  211a              MOVS     r1,#0x1a
001ae4  48f4              LDR      r0,|L151.7864|
001ae6  f7fffffe          BL       uart_putchar
001aea  211a              MOVS     r1,#0x1a
001aec  48f2              LDR      r0,|L151.7864|
001aee  f7fffffe          BL       uart_putchar
;;;2245   delay(20);
001af2  2014              MOVS     r0,#0x14
001af4  f7fffffe          BL       delay
;;;2246   if(!strstr(uart_string_gsm,"SEND OK")){
001af8  49f0              LDR      r1,|L151.7868|
001afa  48f1              LDR      r0,|L151.7872|
001afc  f7fffffe          BL       strstr
001b00  2800              CMP      r0,#0
001b02  d162              BNE      |L151.7114|
;;;2247   
;;;2248   
;;;2249   	delay(100);
001b04  2064              MOVS     r0,#0x64
001b06  f7fffffe          BL       delay
;;;2250   		clear();//memset(uart_string_gsm,0,5000);
001b0a  f7fffffe          BL       clear
;;;2251   	
;;;2252   	memset(at_,0,100);
001b0e  2164              MOVS     r1,#0x64
001b10  48ec              LDR      r0,|L151.7876|
001b12  f7fffffe          BL       __aeabi_memclr
;;;2253   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001b16  48ec              LDR      r0,|L151.7880|
001b18  f7fffffe          BL       strlen
001b1c  1c44              ADDS     r4,r0,#1
001b1e  4623              MOV      r3,r4
001b20  4aea              LDR      r2,|L151.7884|
001b22  49eb              LDR      r1,|L151.7888|
001b24  48e7              LDR      r0,|L151.7876|
001b26  f7fffffe          BL       __2sprintf
;;;2254   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001b2a  2005              MOVS     r0,#5
001b2c  4be9              LDR      r3,|L151.7892|
001b2e  4aea              LDR      r2,|L151.7896|
001b30  49ea              LDR      r1,|L151.7900|
001b32  9000              STR      r0,[sp,#0]
001b34  48e3              LDR      r0,|L151.7876|
001b36  f7fffffe          BL       send_SD
;;;2255   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2256   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2257   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2258   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2259   //	}
;;;2260   	
;;;2261   clear();	
001b3a  f7fffffe          BL       clear
;;;2262   									k2=0;									//string array counter for uart 1
001b3e  2000              MOVS     r0,#0
001b40  49e7              LDR      r1,|L151.7904|
001b42  6008              STR      r0,[r1,#0]  ; k2
;;;2263   									tout=0;	
001b44  49db              LDR      r1,|L151.7860|
001b46  6008              STR      r0,[r1,#0]  ; tout
;;;2264   		for(k=0;k<strlen(data);k++)
001b48  49e6              LDR      r1,|L151.7908|
001b4a  6008              STR      r0,[r1,#0]  ; k
001b4c  e00b              B        |L151.7014|
                  |L151.6990|
;;;2265   		{
;;;2266   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001b4e  48de              LDR      r0,|L151.7880|
001b50  4ae4              LDR      r2,|L151.7908|
001b52  6812              LDR      r2,[r2,#0]  ; k
001b54  5c81              LDRB     r1,[r0,r2]
001b56  48d8              LDR      r0,|L151.7864|
001b58  f7fffffe          BL       uart_putchar
001b5c  48e1              LDR      r0,|L151.7908|
001b5e  6800              LDR      r0,[r0,#0]            ;2264  ; k
001b60  1c40              ADDS     r0,r0,#1              ;2264
001b62  49e0              LDR      r1,|L151.7908|
001b64  6008              STR      r0,[r1,#0]            ;2264  ; k
                  |L151.7014|
001b66  48d8              LDR      r0,|L151.7880|
001b68  f7fffffe          BL       strlen
001b6c  49dd              LDR      r1,|L151.7908|
001b6e  6809              LDR      r1,[r1,#0]            ;2264  ; k
001b70  4288              CMP      r0,r1                 ;2264
001b72  d8ec              BHI      |L151.6990|
;;;2267   		}	
;;;2268   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001b74  210a              MOVS     r1,#0xa
001b76  48d0              LDR      r0,|L151.7864|
001b78  f7fffffe          BL       uart_putchar
001b7c  210a              MOVS     r1,#0xa
001b7e  48ce              LDR      r0,|L151.7864|
001b80  f7fffffe          BL       uart_putchar
001b84  210a              MOVS     r1,#0xa
001b86  48cc              LDR      r0,|L151.7864|
001b88  f7fffffe          BL       uart_putchar
001b8c  210a              MOVS     r1,#0xa
001b8e  48ca              LDR      r0,|L151.7864|
001b90  f7fffffe          BL       uart_putchar
001b94  210a              MOVS     r1,#0xa
001b96  48c8              LDR      r0,|L151.7864|
001b98  f7fffffe          BL       uart_putchar
001b9c  210a              MOVS     r1,#0xa
001b9e  48c6              LDR      r0,|L151.7864|
001ba0  f7fffffe          BL       uart_putchar
001ba4  210a              MOVS     r1,#0xa
001ba6  48c4              LDR      r0,|L151.7864|
001ba8  f7fffffe          BL       uart_putchar
001bac  210a              MOVS     r1,#0xa
001bae  48c2              LDR      r0,|L151.7864|
001bb0  f7fffffe          BL       uart_putchar
001bb4  210a              MOVS     r1,#0xa
001bb6  48c0              LDR      r0,|L151.7864|
001bb8  f7fffffe          BL       uart_putchar
001bbc  210a              MOVS     r1,#0xa
001bbe  48be              LDR      r0,|L151.7864|
001bc0  f7fffffe          BL       uart_putchar
001bc4  210a              MOVS     r1,#0xa
001bc6  48bc              LDR      r0,|L151.7864|
001bc8  e000              B        |L151.7116|
                  |L151.7114|
001bca  e22f              B        |L151.8236|
                  |L151.7116|
001bcc  f7fffffe          BL       uart_putchar
001bd0  210a              MOVS     r1,#0xa
001bd2  48b9              LDR      r0,|L151.7864|
001bd4  f7fffffe          BL       uart_putchar
001bd8  210a              MOVS     r1,#0xa
001bda  48b7              LDR      r0,|L151.7864|
001bdc  f7fffffe          BL       uart_putchar
001be0  210a              MOVS     r1,#0xa
001be2  48b5              LDR      r0,|L151.7864|
001be4  f7fffffe          BL       uart_putchar
001be8  210a              MOVS     r1,#0xa
001bea  48b3              LDR      r0,|L151.7864|
001bec  f7fffffe          BL       uart_putchar
001bf0  210a              MOVS     r1,#0xa
001bf2  48b1              LDR      r0,|L151.7864|
001bf4  f7fffffe          BL       uart_putchar
001bf8  210a              MOVS     r1,#0xa
001bfa  48af              LDR      r0,|L151.7864|
001bfc  f7fffffe          BL       uart_putchar
001c00  210a              MOVS     r1,#0xa
001c02  48ad              LDR      r0,|L151.7864|
001c04  f7fffffe          BL       uart_putchar
001c08  210a              MOVS     r1,#0xa
001c0a  48ab              LDR      r0,|L151.7864|
001c0c  f7fffffe          BL       uart_putchar
001c10  210a              MOVS     r1,#0xa
001c12  48a9              LDR      r0,|L151.7864|
001c14  f7fffffe          BL       uart_putchar
001c18  210a              MOVS     r1,#0xa
001c1a  48a7              LDR      r0,|L151.7864|
001c1c  f7fffffe          BL       uart_putchar
001c20  210a              MOVS     r1,#0xa
001c22  48a5              LDR      r0,|L151.7864|
001c24  f7fffffe          BL       uart_putchar
001c28  210a              MOVS     r1,#0xa
001c2a  48a3              LDR      r0,|L151.7864|
001c2c  f7fffffe          BL       uart_putchar
001c30  210a              MOVS     r1,#0xa
001c32  48a1              LDR      r0,|L151.7864|
001c34  f7fffffe          BL       uart_putchar
001c38  210a              MOVS     r1,#0xa
001c3a  489f              LDR      r0,|L151.7864|
001c3c  f7fffffe          BL       uart_putchar
001c40  210a              MOVS     r1,#0xa
001c42  489d              LDR      r0,|L151.7864|
001c44  f7fffffe          BL       uart_putchar
001c48  210a              MOVS     r1,#0xa
001c4a  489b              LDR      r0,|L151.7864|
001c4c  f7fffffe          BL       uart_putchar
001c50  210a              MOVS     r1,#0xa
001c52  4899              LDR      r0,|L151.7864|
001c54  f7fffffe          BL       uart_putchar
001c58  210a              MOVS     r1,#0xa
001c5a  4897              LDR      r0,|L151.7864|
001c5c  f7fffffe          BL       uart_putchar
001c60  210a              MOVS     r1,#0xa
001c62  4895              LDR      r0,|L151.7864|
001c64  f7fffffe          BL       uart_putchar
001c68  210a              MOVS     r1,#0xa
001c6a  4893              LDR      r0,|L151.7864|
001c6c  f7fffffe          BL       uart_putchar
001c70  210a              MOVS     r1,#0xa
001c72  4891              LDR      r0,|L151.7864|
001c74  f7fffffe          BL       uart_putchar
001c78  210a              MOVS     r1,#0xa
001c7a  488f              LDR      r0,|L151.7864|
001c7c  f7fffffe          BL       uart_putchar
001c80  210a              MOVS     r1,#0xa
001c82  488d              LDR      r0,|L151.7864|
001c84  f7fffffe          BL       uart_putchar
001c88  210a              MOVS     r1,#0xa
001c8a  488b              LDR      r0,|L151.7864|
001c8c  f7fffffe          BL       uart_putchar
001c90  210a              MOVS     r1,#0xa
001c92  4889              LDR      r0,|L151.7864|
001c94  f7fffffe          BL       uart_putchar
001c98  210a              MOVS     r1,#0xa
001c9a  4887              LDR      r0,|L151.7864|
001c9c  f7fffffe          BL       uart_putchar
001ca0  210a              MOVS     r1,#0xa
001ca2  4885              LDR      r0,|L151.7864|
001ca4  f7fffffe          BL       uart_putchar
001ca8  210a              MOVS     r1,#0xa
001caa  4883              LDR      r0,|L151.7864|
001cac  f7fffffe          BL       uart_putchar
001cb0  210a              MOVS     r1,#0xa
001cb2  4881              LDR      r0,|L151.7864|
001cb4  f7fffffe          BL       uart_putchar
001cb8  210a              MOVS     r1,#0xa
001cba  487f              LDR      r0,|L151.7864|
001cbc  f7fffffe          BL       uart_putchar
001cc0  210a              MOVS     r1,#0xa
001cc2  487d              LDR      r0,|L151.7864|
001cc4  f7fffffe          BL       uart_putchar
001cc8  210a              MOVS     r1,#0xa
001cca  487b              LDR      r0,|L151.7864|
001ccc  f7fffffe          BL       uart_putchar
001cd0  210a              MOVS     r1,#0xa
001cd2  4879              LDR      r0,|L151.7864|
001cd4  f7fffffe          BL       uart_putchar
001cd8  210a              MOVS     r1,#0xa
001cda  4877              LDR      r0,|L151.7864|
001cdc  f7fffffe          BL       uart_putchar
001ce0  210a              MOVS     r1,#0xa
001ce2  4875              LDR      r0,|L151.7864|
001ce4  f7fffffe          BL       uart_putchar
001ce8  210a              MOVS     r1,#0xa
001cea  4873              LDR      r0,|L151.7864|
001cec  f7fffffe          BL       uart_putchar
001cf0  210a              MOVS     r1,#0xa
001cf2  4871              LDR      r0,|L151.7864|
001cf4  f7fffffe          BL       uart_putchar
001cf8  210a              MOVS     r1,#0xa
001cfa  486f              LDR      r0,|L151.7864|
001cfc  f7fffffe          BL       uart_putchar
001d00  210a              MOVS     r1,#0xa
001d02  486d              LDR      r0,|L151.7864|
001d04  f7fffffe          BL       uart_putchar
001d08  210a              MOVS     r1,#0xa
001d0a  486b              LDR      r0,|L151.7864|
001d0c  f7fffffe          BL       uart_putchar
001d10  210a              MOVS     r1,#0xa
001d12  4869              LDR      r0,|L151.7864|
001d14  f7fffffe          BL       uart_putchar
001d18  210a              MOVS     r1,#0xa
001d1a  4867              LDR      r0,|L151.7864|
001d1c  f7fffffe          BL       uart_putchar
001d20  210a              MOVS     r1,#0xa
001d22  4865              LDR      r0,|L151.7864|
001d24  f7fffffe          BL       uart_putchar
001d28  210a              MOVS     r1,#0xa
001d2a  4863              LDR      r0,|L151.7864|
001d2c  f7fffffe          BL       uart_putchar
001d30  210a              MOVS     r1,#0xa
001d32  4861              LDR      r0,|L151.7864|
001d34  f7fffffe          BL       uart_putchar
001d38  210a              MOVS     r1,#0xa
001d3a  485f              LDR      r0,|L151.7864|
001d3c  f7fffffe          BL       uart_putchar
;;;2269   									//memset(data,0,1000);
;;;2270   														//timer counts to wait for characters in uart 1 									
;;;2271   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001d40  bf00              NOP      
                  |L151.7490|
001d42  4969              LDR      r1,|L151.7912|
001d44  485e              LDR      r0,|L151.7872|
001d46  f7fffffe          BL       strstr
001d4a  2800              CMP      r0,#0
001d4c  d109              BNE      |L151.7522|
001d4e  4961              LDR      r1,|L151.7892|
001d50  485b              LDR      r0,|L151.7872|
001d52  f7fffffe          BL       strstr
001d56  2800              CMP      r0,#0
001d58  d103              BNE      |L151.7522|
001d5a  4856              LDR      r0,|L151.7860|
001d5c  6800              LDR      r0,[r0,#0]  ; tout
001d5e  2805              CMP      r0,#5
001d60  ddef              BLE      |L151.7490|
                  |L151.7522|
;;;2272   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2273   									}
;;;2274   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001d62  f7fffffe          BL       clear
;;;2275   									//clear();
;;;2276   									memset(data,0,strlen(data));
001d66  4858              LDR      r0,|L151.7880|
001d68  f7fffffe          BL       strlen
001d6c  4604              MOV      r4,r0
001d6e  4621              MOV      r1,r4
001d70  4855              LDR      r0,|L151.7880|
001d72  f7fffffe          BL       __aeabi_memclr
;;;2277   									clear();
001d76  f7fffffe          BL       clear
                  |L151.7546|
;;;2278   
;;;2279   								
;;;2280   break;
001d7a  e165              B        |L151.8264|
                  |L151.7548|
;;;2281   //log_it();
;;;2282   }
;;;2283   			
;;;2284   			
;;;2285   			
;;;2286   			
;;;2287   			
;;;2288   			}
;;;2289   			else
;;;2290   			{
;;;2291   				
;;;2292   				
;;;2293   				
;;;2294   	delay(100);
001d7c  2064              MOVS     r0,#0x64
001d7e  f7fffffe          BL       delay
;;;2295   		clear();//memset(uart_string_gsm,0,5000);
001d82  f7fffffe          BL       clear
;;;2296   	
;;;2297   	memset(at_,0,100);
001d86  2164              MOVS     r1,#0x64
001d88  484e              LDR      r0,|L151.7876|
001d8a  f7fffffe          BL       __aeabi_memclr
;;;2298   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001d8e  484e              LDR      r0,|L151.7880|
001d90  f7fffffe          BL       strlen
001d94  1c44              ADDS     r4,r0,#1
001d96  4623              MOV      r3,r4
001d98  4a4c              LDR      r2,|L151.7884|
001d9a  494d              LDR      r1,|L151.7888|
001d9c  4849              LDR      r0,|L151.7876|
001d9e  f7fffffe          BL       __2sprintf
;;;2299   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001da2  2005              MOVS     r0,#5
001da4  4b4b              LDR      r3,|L151.7892|
001da6  4a4c              LDR      r2,|L151.7896|
001da8  494c              LDR      r1,|L151.7900|
001daa  9000              STR      r0,[sp,#0]
001dac  4845              LDR      r0,|L151.7876|
001dae  f7fffffe          BL       send_SD
;;;2300   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2301   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2302   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2303   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2304   //	}
;;;2305   	
;;;2306   clear();	
001db2  f7fffffe          BL       clear
;;;2307   									k2=0;									//string array counter for uart 1
001db6  2000              MOVS     r0,#0
001db8  4949              LDR      r1,|L151.7904|
001dba  6008              STR      r0,[r1,#0]  ; k2
;;;2308   									tout=0;	
001dbc  493d              LDR      r1,|L151.7860|
001dbe  6008              STR      r0,[r1,#0]  ; tout
;;;2309   		for(k=0;k<strlen(data);k++)
001dc0  4948              LDR      r1,|L151.7908|
001dc2  6008              STR      r0,[r1,#0]  ; k
001dc4  e00b              B        |L151.7646|
                  |L151.7622|
;;;2310   		{
;;;2311   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001dc6  4840              LDR      r0,|L151.7880|
001dc8  4a46              LDR      r2,|L151.7908|
001dca  6812              LDR      r2,[r2,#0]  ; k
001dcc  5c81              LDRB     r1,[r0,r2]
001dce  483a              LDR      r0,|L151.7864|
001dd0  f7fffffe          BL       uart_putchar
001dd4  4843              LDR      r0,|L151.7908|
001dd6  6800              LDR      r0,[r0,#0]            ;2309  ; k
001dd8  1c40              ADDS     r0,r0,#1              ;2309
001dda  4942              LDR      r1,|L151.7908|
001ddc  6008              STR      r0,[r1,#0]            ;2309  ; k
                  |L151.7646|
001dde  483a              LDR      r0,|L151.7880|
001de0  f7fffffe          BL       strlen
001de4  493f              LDR      r1,|L151.7908|
001de6  6809              LDR      r1,[r1,#0]            ;2309  ; k
001de8  4288              CMP      r0,r1                 ;2309
001dea  d8ec              BHI      |L151.7622|
;;;2312   		}	
;;;2313   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001dec  210a              MOVS     r1,#0xa
001dee  4832              LDR      r0,|L151.7864|
001df0  f7fffffe          BL       uart_putchar
001df4  210a              MOVS     r1,#0xa
001df6  4830              LDR      r0,|L151.7864|
001df8  f7fffffe          BL       uart_putchar
001dfc  210a              MOVS     r1,#0xa
001dfe  482e              LDR      r0,|L151.7864|
001e00  f7fffffe          BL       uart_putchar
001e04  210a              MOVS     r1,#0xa
001e06  482c              LDR      r0,|L151.7864|
001e08  f7fffffe          BL       uart_putchar
001e0c  210a              MOVS     r1,#0xa
001e0e  482a              LDR      r0,|L151.7864|
001e10  f7fffffe          BL       uart_putchar
001e14  210a              MOVS     r1,#0xa
001e16  4828              LDR      r0,|L151.7864|
001e18  f7fffffe          BL       uart_putchar
001e1c  210a              MOVS     r1,#0xa
001e1e  4826              LDR      r0,|L151.7864|
001e20  f7fffffe          BL       uart_putchar
001e24  210a              MOVS     r1,#0xa
001e26  4824              LDR      r0,|L151.7864|
001e28  f7fffffe          BL       uart_putchar
001e2c  210a              MOVS     r1,#0xa
001e2e  4822              LDR      r0,|L151.7864|
001e30  f7fffffe          BL       uart_putchar
001e34  210a              MOVS     r1,#0xa
001e36  4820              LDR      r0,|L151.7864|
001e38  f7fffffe          BL       uart_putchar
001e3c  210a              MOVS     r1,#0xa
001e3e  481e              LDR      r0,|L151.7864|
001e40  f7fffffe          BL       uart_putchar
001e44  210a              MOVS     r1,#0xa
001e46  481c              LDR      r0,|L151.7864|
001e48  f7fffffe          BL       uart_putchar
001e4c  210a              MOVS     r1,#0xa
001e4e  481a              LDR      r0,|L151.7864|
001e50  f7fffffe          BL       uart_putchar
001e54  210a              MOVS     r1,#0xa
001e56  4818              LDR      r0,|L151.7864|
001e58  f7fffffe          BL       uart_putchar
001e5c  210a              MOVS     r1,#0xa
001e5e  4816              LDR      r0,|L151.7864|
001e60  f7fffffe          BL       uart_putchar
001e64  210a              MOVS     r1,#0xa
001e66  4814              LDR      r0,|L151.7864|
001e68  f7fffffe          BL       uart_putchar
001e6c  210a              MOVS     r1,#0xa
001e6e  4812              LDR      r0,|L151.7864|
001e70  f7fffffe          BL       uart_putchar
001e74  210a              MOVS     r1,#0xa
001e76  4810              LDR      r0,|L151.7864|
001e78  f7fffffe          BL       uart_putchar
001e7c  210a              MOVS     r1,#0xa
001e7e  480e              LDR      r0,|L151.7864|
001e80  f7fffffe          BL       uart_putchar
001e84  210a              MOVS     r1,#0xa
001e86  480c              LDR      r0,|L151.7864|
001e88  f7fffffe          BL       uart_putchar
001e8c  210a              MOVS     r1,#0xa
001e8e  480a              LDR      r0,|L151.7864|
001e90  f7fffffe          BL       uart_putchar
001e94  210a              MOVS     r1,#0xa
001e96  4808              LDR      r0,|L151.7864|
001e98  f7fffffe          BL       uart_putchar
001e9c  210a              MOVS     r1,#0xa
001e9e  4806              LDR      r0,|L151.7864|
001ea0  f7fffffe          BL       uart_putchar
001ea4  210a              MOVS     r1,#0xa
001ea6  4804              LDR      r0,|L151.7864|
001ea8  f7fffffe          BL       uart_putchar
001eac  210a              MOVS     r1,#0xa
001eae  4802              LDR      r0,|L151.7864|
001eb0  e01c              B        |L151.7916|
001eb2  0000              DCW      0x0000
                  |L151.7860|
                          DCD      tout
                  |L151.7864|
                          DCD      0x4006b000
                  |L151.7868|
                          DCD      ||.conststring||+0x628
                  |L151.7872|
                          DCD      uart_string_gsm
                  |L151.7876|
                          DCD      at_
                  |L151.7880|
                          DCD      data
                  |L151.7884|
                          DCD      drive
                  |L151.7888|
                          DCD      ||.conststring||+0x438
                  |L151.7892|
                          DCD      ||.conststring||+0xe0
                  |L151.7896|
                          DCD      ||.conststring||+0x18
                  |L151.7900|
                          DCD      ||.conststring||+0x20
                  |L151.7904|
                          DCD      ||k2||
                  |L151.7908|
                          DCD      k
                  |L151.7912|
                          DCD      ||.conststring||+0x70
                  |L151.7916|
001eec  f7fffffe          BL       uart_putchar
001ef0  210a              MOVS     r1,#0xa
001ef2  486b              LDR      r0,|L151.8352|
001ef4  f7fffffe          BL       uart_putchar
001ef8  210a              MOVS     r1,#0xa
001efa  4869              LDR      r0,|L151.8352|
001efc  f7fffffe          BL       uart_putchar
001f00  210a              MOVS     r1,#0xa
001f02  4867              LDR      r0,|L151.8352|
001f04  f7fffffe          BL       uart_putchar
001f08  210a              MOVS     r1,#0xa
001f0a  4865              LDR      r0,|L151.8352|
001f0c  f7fffffe          BL       uart_putchar
001f10  210a              MOVS     r1,#0xa
001f12  4863              LDR      r0,|L151.8352|
001f14  f7fffffe          BL       uart_putchar
001f18  210a              MOVS     r1,#0xa
001f1a  4861              LDR      r0,|L151.8352|
001f1c  f7fffffe          BL       uart_putchar
001f20  210a              MOVS     r1,#0xa
001f22  485f              LDR      r0,|L151.8352|
001f24  f7fffffe          BL       uart_putchar
001f28  210a              MOVS     r1,#0xa
001f2a  485d              LDR      r0,|L151.8352|
001f2c  f7fffffe          BL       uart_putchar
001f30  210a              MOVS     r1,#0xa
001f32  485b              LDR      r0,|L151.8352|
001f34  f7fffffe          BL       uart_putchar
001f38  210a              MOVS     r1,#0xa
001f3a  4859              LDR      r0,|L151.8352|
001f3c  f7fffffe          BL       uart_putchar
001f40  210a              MOVS     r1,#0xa
001f42  4857              LDR      r0,|L151.8352|
001f44  f7fffffe          BL       uart_putchar
001f48  210a              MOVS     r1,#0xa
001f4a  4855              LDR      r0,|L151.8352|
001f4c  f7fffffe          BL       uart_putchar
001f50  210a              MOVS     r1,#0xa
001f52  4853              LDR      r0,|L151.8352|
001f54  f7fffffe          BL       uart_putchar
001f58  210a              MOVS     r1,#0xa
001f5a  4851              LDR      r0,|L151.8352|
001f5c  f7fffffe          BL       uart_putchar
001f60  210a              MOVS     r1,#0xa
001f62  484f              LDR      r0,|L151.8352|
001f64  f7fffffe          BL       uart_putchar
001f68  210a              MOVS     r1,#0xa
001f6a  484d              LDR      r0,|L151.8352|
001f6c  f7fffffe          BL       uart_putchar
001f70  210a              MOVS     r1,#0xa
001f72  484b              LDR      r0,|L151.8352|
001f74  f7fffffe          BL       uart_putchar
001f78  210a              MOVS     r1,#0xa
001f7a  4849              LDR      r0,|L151.8352|
001f7c  f7fffffe          BL       uart_putchar
001f80  210a              MOVS     r1,#0xa
001f82  4847              LDR      r0,|L151.8352|
001f84  f7fffffe          BL       uart_putchar
001f88  210a              MOVS     r1,#0xa
001f8a  4845              LDR      r0,|L151.8352|
001f8c  f7fffffe          BL       uart_putchar
001f90  210a              MOVS     r1,#0xa
001f92  4843              LDR      r0,|L151.8352|
001f94  f7fffffe          BL       uart_putchar
001f98  210a              MOVS     r1,#0xa
001f9a  4841              LDR      r0,|L151.8352|
001f9c  f7fffffe          BL       uart_putchar
001fa0  210a              MOVS     r1,#0xa
001fa2  483f              LDR      r0,|L151.8352|
001fa4  f7fffffe          BL       uart_putchar
001fa8  210a              MOVS     r1,#0xa
001faa  483d              LDR      r0,|L151.8352|
001fac  f7fffffe          BL       uart_putchar
001fb0  210a              MOVS     r1,#0xa
001fb2  483b              LDR      r0,|L151.8352|
001fb4  f7fffffe          BL       uart_putchar
001fb8  210a              MOVS     r1,#0xa
001fba  4839              LDR      r0,|L151.8352|
001fbc  f7fffffe          BL       uart_putchar
001fc0  210a              MOVS     r1,#0xa
001fc2  4837              LDR      r0,|L151.8352|
001fc4  f7fffffe          BL       uart_putchar
001fc8  210a              MOVS     r1,#0xa
001fca  4835              LDR      r0,|L151.8352|
001fcc  f7fffffe          BL       uart_putchar
001fd0  210a              MOVS     r1,#0xa
001fd2  4833              LDR      r0,|L151.8352|
001fd4  f7fffffe          BL       uart_putchar
001fd8  210a              MOVS     r1,#0xa
001fda  4831              LDR      r0,|L151.8352|
001fdc  f7fffffe          BL       uart_putchar
001fe0  210a              MOVS     r1,#0xa
001fe2  482f              LDR      r0,|L151.8352|
001fe4  f7fffffe          BL       uart_putchar
001fe8  210a              MOVS     r1,#0xa
001fea  482d              LDR      r0,|L151.8352|
001fec  f7fffffe          BL       uart_putchar
;;;2314   									//memset(data,0,1000);
;;;2315   														//timer counts to wait for characters in uart 1 									
;;;2316   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001ff0  bf00              NOP      
                  |L151.8178|
001ff2  492c              LDR      r1,|L151.8356|
001ff4  482c              LDR      r0,|L151.8360|
001ff6  f7fffffe          BL       strstr
001ffa  2800              CMP      r0,#0
001ffc  d109              BNE      |L151.8210|
001ffe  492b              LDR      r1,|L151.8364|
002000  4829              LDR      r0,|L151.8360|
002002  f7fffffe          BL       strstr
002006  2800              CMP      r0,#0
002008  d103              BNE      |L151.8210|
00200a  4829              LDR      r0,|L151.8368|
00200c  6800              LDR      r0,[r0,#0]  ; tout
00200e  2805              CMP      r0,#5
002010  ddef              BLE      |L151.8178|
                  |L151.8210|
;;;2317   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2318   									}
;;;2319   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002012  f7fffffe          BL       clear
;;;2320   									//clear();
;;;2321   									memset(data,0,strlen(data));
002016  4827              LDR      r0,|L151.8372|
002018  f7fffffe          BL       strlen
00201c  4604              MOV      r4,r0
00201e  4621              MOV      r1,r4
002020  4824              LDR      r0,|L151.8372|
002022  f7fffffe          BL       __aeabi_memclr
;;;2322   									clear();
002026  f7fffffe          BL       clear
;;;2323   
;;;2324   								
;;;2325   				
;;;2326   				//log_it();
;;;2327   			
;;;2328   			
;;;2329   			
;;;2330   			
;;;2331   			break;
00202a  e00d              B        |L151.8264|
                  |L151.8236|
;;;2332   			}
;;;2333   //			memset(at_,0,100);
;;;2334   //			sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
;;;2335   //			send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2336   //			parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
;;;2337   //			fsz=stof(fsize);//7523.7412
;;;2338   //			times=(fsz/1256)+1;
;;;2339   		}	
;;;2340   	
;;;2341   //
;;;2342   if(rtcticks2>=1500){break;}		
00202c  4822              LDR      r0,|L151.8376|
00202e  6800              LDR      r0,[r0,#0]  ; rtcticks2
002030  4922              LDR      r1,|L151.8380|
002032  4288              CMP      r0,r1
002034  db00              BLT      |L151.8248|
002036  e007              B        |L151.8264|
                  |L151.8248|
002038  4821              LDR      r0,|L151.8384|
00203a  6800              LDR      r0,[r0,#0]            ;1800  ; k5
00203c  4921              LDR      r1,|L151.8388|
00203e  6809              LDR      r1,[r1,#0]            ;1800  ; times
002040  4288              CMP      r0,r1                 ;1800
002042  dc01              BGT      |L151.8264|
002044  f7fef81b          BL       |L151.126|
                  |L151.8264|
002048  bf00              NOP                            ;1801
;;;2343   }
;;;2344   
;;;2345   if(((k5>=times) && log0!=1)){
00204a  481d              LDR      r0,|L151.8384|
00204c  6800              LDR      r0,[r0,#0]  ; k5
00204e  491d              LDR      r1,|L151.8388|
002050  6809              LDR      r1,[r1,#0]  ; times
002052  4288              CMP      r0,r1
002054  db1e              BLT      |L151.8340|
002056  481c              LDR      r0,|L151.8392|
002058  6800              LDR      r0,[r0,#0]  ; log0
00205a  2801              CMP      r0,#1
00205c  d01a              BEQ      |L151.8340|
;;;2346   	cursorvaluepr=0;times=-2;k5=0;
00205e  2000              MOVS     r0,#0
002060  491a              LDR      r1,|L151.8396|
002062  6008              STR      r0,[r1,#0]  ; cursorvaluepr
002064  1e80              SUBS     r0,r0,#2
002066  4917              LDR      r1,|L151.8388|
002068  6008              STR      r0,[r1,#0]  ; times
00206a  2000              MOVS     r0,#0
00206c  4914              LDR      r1,|L151.8384|
00206e  6008              STR      r0,[r1,#0]  ; k5
;;;2347   	memset(at_,0,100);
002070  2164              MOVS     r1,#0x64
002072  4817              LDR      r0,|L151.8400|
002074  f7fffffe          BL       __aeabi_memclr
;;;2348   	sprintf(at_,"\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
002078  4a16              LDR      r2,|L151.8404|
00207a  4917              LDR      r1,|L151.8408|
00207c  4814              LDR      r0,|L151.8400|
00207e  f7fffffe          BL       __2sprintf
;;;2349   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
002082  4816              LDR      r0,|L151.8412|
002084  6800              LDR      r0,[r0,#0]  ; tmeout
002086  4b16              LDR      r3,|L151.8416|
002088  4a16              LDR      r2,|L151.8420|
00208a  4917              LDR      r1,|L151.8424|
00208c  9000              STR      r0,[sp,#0]
00208e  4810              LDR      r0,|L151.8400|
002090  f7fffffe          BL       send_GSM
                  |L151.8340|
;;;2350   
;;;2351   }		
;;;2352   
;;;2353   int_erval=temp;
002094  4815              LDR      r0,|L151.8428|
002096  6800              LDR      r0,[r0,#0]  ; temp
002098  4915              LDR      r1,|L151.8432|
00209a  6008              STR      r0,[r1,#0]  ; int_erval
;;;2354   }
00209c  bd7c              POP      {r2-r6,pc}
;;;2355   
                          ENDP

00209e  0000              DCW      0x0000
                  |L151.8352|
                          DCD      0x4006b000
                  |L151.8356|
                          DCD      ||.conststring||+0x70
                  |L151.8360|
                          DCD      uart_string_gsm
                  |L151.8364|
                          DCD      ||.conststring||+0xe0
                  |L151.8368|
                          DCD      tout
                  |L151.8372|
                          DCD      data
                  |L151.8376|
                          DCD      rtcticks2
                  |L151.8380|
                          DCD      0x000005dc
                  |L151.8384|
                          DCD      ||k5||
                  |L151.8388|
                          DCD      times
                  |L151.8392|
                          DCD      log0
                  |L151.8396|
                          DCD      cursorvaluepr
                  |L151.8400|
                          DCD      at_
                  |L151.8404|
                          DCD      drive
                  |L151.8408|
                          DCD      ||.conststring||+0x72c
                  |L151.8412|
                          DCD      tmeout
                  |L151.8416|
                          DCD      ||.conststring||+0x10
                  |L151.8420|
                          DCD      ||.conststring||+0x18
                  |L151.8424|
                          DCD      ||.conststring||+0x2c
                  |L151.8428|
                          DCD      temp
                  |L151.8432|
                          DCD      int_erval

                          AREA ||i.readapn||, COMGROUP=readapn, CODE, READONLY, ALIGN=2

                  readapn PROC
;;;1181   
;;;1182   __inline void readapn()
000000  b51c              PUSH     {r2-r4,lr}
;;;1183   {
;;;1184   	memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480c              LDR      r0,|L158.56|
000006  f7fffffe          BL       __aeabi_memclr
;;;1185   		sprintf(at_, "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n");		
00000a  490c              LDR      r1,|L158.60|
00000c  480a              LDR      r0,|L158.56|
00000e  f7fffffe          BL       __2sprintf
;;;1186   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0a              LDR      r3,|L158.64|
000016  4a0b              LDR      r2,|L158.68|
000018  490b              LDR      r1,|L158.72|
00001a  9000              STR      r0,[sp,#0]
00001c  4806              LDR      r0,|L158.56|
00001e  f7fffffe          BL       send_GSM
;;;1187   	
;;;1188   		parse_g(uart_string_gsm, 1,2, '|', '|',apn);
000022  480a              LDR      r0,|L158.76|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2202              MOVS     r2,#2
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2101              MOVS     r1,#1
000030  4807              LDR      r0,|L158.80|
000032  f7fffffe          BL       parse_g
;;;1189   	
;;;1190   	
;;;1191   }
000036  bd1c              POP      {r2-r4,pc}
;;;1192   
                          ENDP

                  |L158.56|
                          DCD      at_
                  |L158.60|
                          DCD      ||.conststring||+0x748
                  |L158.64|
                          DCD      ||.conststring||+0x10
                  |L158.68|
                          DCD      ||.conststring||+0x18
                  |L158.72|
                          DCD      ||.conststring||+0x2c
                  |L158.76|
                          DCD      apn
                  |L158.80|
                          DCD      uart_string_gsm

                          AREA ||i.ignread||, COMGROUP=ignread, CODE, READONLY, ALIGN=2

                  ignread PROC
;;;1288   
;;;1289   __inline void ignread(){
000000  b508              PUSH     {r3,lr}
;;;1290   memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4813              LDR      r0,|L165.84|
000006  f7fffffe          BL       __aeabi_memclr
;;;1291   		sprintf(at_, "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n");		
00000a  4913              LDR      r1,|L165.88|
00000c  4811              LDR      r0,|L165.84|
00000e  f7fffffe          BL       __2sprintf
;;;1292   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b11              LDR      r3,|L165.92|
000016  4a12              LDR      r2,|L165.96|
000018  4912              LDR      r1,|L165.100|
00001a  9000              STR      r0,[sp,#0]
00001c  480d              LDR      r0,|L165.84|
00001e  f7fffffe          BL       send_GSM
;;;1293   if(strstr(uart_string_gsm,"ION")){IGNITION_ON;FUEL_ON;}
000022  4911              LDR      r1,|L165.104|
000024  4811              LDR      r0,|L165.108|
000026  f7fffffe          BL       strstr
00002a  2800              CMP      r0,#0
00002c  d005              BEQ      |L165.58|
00002e  2002              MOVS     r0,#2
000030  490f              LDR      r1,|L165.112|
000032  6088              STR      r0,[r1,#8]
000034  2004              MOVS     r0,#4
000036  6088              STR      r0,[r1,#8]
000038  e00a              B        |L165.80|
                  |L165.58|
;;;1294   else if(strstr(uart_string_gsm,"IOFF")){IGNITION_OFF;FUEL_OFF;}
00003a  490e              LDR      r1,|L165.116|
00003c  480b              LDR      r0,|L165.108|
00003e  f7fffffe          BL       strstr
000042  2800              CMP      r0,#0
000044  d004              BEQ      |L165.80|
000046  2002              MOVS     r0,#2
000048  4909              LDR      r1,|L165.112|
00004a  6048              STR      r0,[r1,#4]
00004c  2004              MOVS     r0,#4
00004e  6048              STR      r0,[r1,#4]
                  |L165.80|
;;;1295   
;;;1296   }	
000050  bd08              POP      {r3,pc}
;;;1297   	
                          ENDP

000052  0000              DCW      0x0000
                  |L165.84|
                          DCD      at_
                  |L165.88|
                          DCD      ||.conststring||+0x768
                  |L165.92|
                          DCD      ||.conststring||+0x10
                  |L165.96|
                          DCD      ||.conststring||+0x18
                  |L165.100|
                          DCD      ||.conststring||+0x2c
                  |L165.104|
                          DCD      ||.conststring||+0x788
                  |L165.108|
                          DCD      uart_string_gsm
                  |L165.112|
                          DCD      0x400ff000
                  |L165.116|
                          DCD      ||.conststring||+0x78c

                          AREA ||i.readcursor||, COMGROUP=readcursor, CODE, READONLY, ALIGN=2

                  readcursor PROC
;;;1341   	
;;;1342   __inline void readcursor()
000000  b51c              PUSH     {r2-r4,lr}
;;;1343   {
;;;1344   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4824              LDR      r0,|L172.152|
000006  f7fffffe          BL       __aeabi_memclr
;;;1345   		sprintf(at_, "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n");		
00000a  4924              LDR      r1,|L172.156|
00000c  4822              LDR      r0,|L172.152|
00000e  f7fffffe          BL       __2sprintf
;;;1346   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b22              LDR      r3,|L172.160|
000016  4a23              LDR      r2,|L172.164|
000018  4923              LDR      r1,|L172.168|
00001a  9000              STR      r0,[sp,#0]
00001c  481e              LDR      r0,|L172.152|
00001e  f7fffffe          BL       send_GSM
;;;1347   		memset(at_,0,100);
000022  2164              MOVS     r1,#0x64
000024  481c              LDR      r0,|L172.152|
000026  f7fffffe          BL       __aeabi_memclr
;;;1348   		parse_g(uart_string_gsm, 4,5, ',', ',',at_);
00002a  481b              LDR      r0,|L172.152|
00002c  212c              MOVS     r1,#0x2c
00002e  460b              MOV      r3,r1
000030  2205              MOVS     r2,#5
000032  9100              STR      r1,[sp,#0]
000034  9001              STR      r0,[sp,#4]
000036  2104              MOVS     r1,#4
000038  481c              LDR      r0,|L172.172|
00003a  f7fffffe          BL       parse_g
;;;1349   		times=myAtoi(at_);		
00003e  4816              LDR      r0,|L172.152|
000040  f7fffffe          BL       myAtoi
000044  491a              LDR      r1,|L172.176|
000046  6008              STR      r0,[r1,#0]  ; times
;;;1350   		memset(at_,0,100);
000048  2164              MOVS     r1,#0x64
00004a  4813              LDR      r0,|L172.152|
00004c  f7fffffe          BL       __aeabi_memclr
;;;1351   		parse_g(uart_string_gsm, 5,6, ',', ',',at_);
000050  4811              LDR      r0,|L172.152|
000052  212c              MOVS     r1,#0x2c
000054  460b              MOV      r3,r1
000056  2206              MOVS     r2,#6
000058  9100              STR      r1,[sp,#0]
00005a  9001              STR      r0,[sp,#4]
00005c  2105              MOVS     r1,#5
00005e  4813              LDR      r0,|L172.172|
000060  f7fffffe          BL       parse_g
;;;1352   		k5=myAtoi(at_);		
000064  480c              LDR      r0,|L172.152|
000066  f7fffffe          BL       myAtoi
00006a  4912              LDR      r1,|L172.180|
00006c  6008              STR      r0,[r1,#0]  ; k5
;;;1353   		memset(at_,0,100);
00006e  2164              MOVS     r1,#0x64
000070  4809              LDR      r0,|L172.152|
000072  f7fffffe          BL       __aeabi_memclr
;;;1354   		parse_g(uart_string_gsm, 6,7, ',', ',',at_);
000076  4808              LDR      r0,|L172.152|
000078  212c              MOVS     r1,#0x2c
00007a  460b              MOV      r3,r1
00007c  2207              MOVS     r2,#7
00007e  9100              STR      r1,[sp,#0]
000080  9001              STR      r0,[sp,#4]
000082  2106              MOVS     r1,#6
000084  4809              LDR      r0,|L172.172|
000086  f7fffffe          BL       parse_g
;;;1355   		cursorvaluepr=myAtoi(at_);		
00008a  4803              LDR      r0,|L172.152|
00008c  f7fffffe          BL       myAtoi
000090  4909              LDR      r1,|L172.184|
000092  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1356   
;;;1357   
;;;1358   }	
000094  bd1c              POP      {r2-r4,pc}
;;;1359   	
                          ENDP

000096  0000              DCW      0x0000
                  |L172.152|
                          DCD      at_
                  |L172.156|
                          DCD      ||.conststring||+0x794
                  |L172.160|
                          DCD      ||.conststring||+0x10
                  |L172.164|
                          DCD      ||.conststring||+0x18
                  |L172.168|
                          DCD      ||.conststring||+0x2c
                  |L172.172|
                          DCD      uart_string_gsm
                  |L172.176|
                          DCD      times
                  |L172.180|
                          DCD      ||k5||
                  |L172.184|
                          DCD      cursorvaluepr

                          AREA ||i.LED_init||, COMGROUP=LED_init, CODE, READONLY, ALIGN=2

                  LED_init PROC
;;;26     
;;;27     __inline void LED_init(void){
000000  483f              LDR      r0,|L179.256|
;;;28       
;;;29         SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK ;      //Turn on clock to PORTE & D module
000002  6b80              LDR      r0,[r0,#0x38]
000004  210f              MOVS     r1,#0xf
000006  0289              LSLS     r1,r1,#10
000008  4308              ORRS     r0,r0,r1
00000a  493d              LDR      r1,|L179.256|
00000c  6388              STR      r0,[r1,#0x38]
;;;30     
;;;31     
;;;32     	
;;;33     
;;;34     		PORTE_PCR29 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
00000e  1588              ASRS     r0,r1,#22
000010  493c              LDR      r1,|L179.260|
000012  6348              STR      r0,[r1,#0x34]
;;;35       	PORTD_PCR7 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000014  493c              LDR      r1,|L179.264|
000016  61c8              STR      r0,[r1,#0x1c]
;;;36         PORTE_PCR31 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000018  493a              LDR      r1,|L179.260|
00001a  63c8              STR      r0,[r1,#0x3c]
;;;37         PORTD_PCR5 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode
00001c  493a              LDR      r1,|L179.264|
00001e  6148              STR      r0,[r1,#0x14]
;;;38     	
;;;39         PORTC_PCR5 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000020  493a              LDR      r1,|L179.268|
000022  6148              STR      r0,[r1,#0x14]
;;;40         PORTC_PCR6 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000024  6188              STR      r0,[r1,#0x18]
;;;41         PORTC_PCR7 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	
000026  61c8              STR      r0,[r1,#0x1c]
;;;42         PORTC_PCR8 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	    
000028  6208              STR      r0,[r1,#0x20]
;;;43         PORTB_PCR2 = PORT_PCR_MUX(0x1);             //Set the PTB2 pin multiplexer to GPIO mode	   
00002a  4939              LDR      r1,|L179.272|
00002c  6088              STR      r0,[r1,#8]
;;;44     
;;;45     	
;;;46     	PORTB_PCR2 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
00002e  1c80              ADDS     r0,r0,#2
000030  6088              STR      r0,[r1,#8]
;;;47     		
;;;48     	PORTB_PCR1 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000032  6048              STR      r0,[r1,#4]
;;;49     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;50     	PTB->PDDR &= ~MASK(ADCIGN);
000034  4837              LDR      r0,|L179.276|
000036  6940              LDR      r0,[r0,#0x14]
000038  2102              MOVS     r1,#2
00003a  4388              BICS     r0,r0,r1
00003c  4935              LDR      r1,|L179.276|
00003e  6148              STR      r0,[r1,#0x14]
;;;51     	GPIOD_PDDR |= (1<<7);
000040  4834              LDR      r0,|L179.276|
000042  3080              ADDS     r0,r0,#0x80
000044  6940              LDR      r0,[r0,#0x14]
000046  2180              MOVS     r1,#0x80
000048  4308              ORRS     r0,r0,r1
00004a  4932              LDR      r1,|L179.276|
00004c  3180              ADDS     r1,r1,#0x80
00004e  6148              STR      r0,[r1,#0x14]
;;;52     
;;;53     	PORTB_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000050  20ff              MOVS     r0,#0xff
000052  3003              ADDS     r0,#3
000054  492e              LDR      r1,|L179.272|
000056  6008              STR      r0,[r1,#0]
;;;54     	PORTC_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; //		GPIOB_PDDR = 0;
000058  1c40              ADDS     r0,r0,#1
00005a  492c              LDR      r1,|L179.268|
00005c  6008              STR      r0,[r1,#0]
;;;55     
;;;56     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;57     	//PTB->PDDR &= ~MASK(ADCIGN);
;;;58     //	GPIOD_PDDR |= (1<<7);
;;;59     
;;;60     	  
;;;61         GPIOE_PSOR |= RED_SHIFT | GREEN_SHIFT;      //Set the initial output state to high
00005e  482d              LDR      r0,|L179.276|
000060  30c0              ADDS     r0,r0,#0xc0
000062  6840              LDR      r0,[r0,#4]
000064  2105              MOVS     r1,#5
000066  0749              LSLS     r1,r1,#29
000068  4308              ORRS     r0,r0,r1
00006a  492a              LDR      r1,|L179.276|
00006c  31c0              ADDS     r1,r1,#0xc0
00006e  6048              STR      r0,[r1,#4]
;;;62         GPIOD_PSOR |= BLUE_SHIFT;               	//Set the inital output state to high
000070  4828              LDR      r0,|L179.276|
000072  3080              ADDS     r0,r0,#0x80
000074  6840              LDR      r0,[r0,#4]
000076  2120              MOVS     r1,#0x20
000078  4308              ORRS     r0,r0,r1
00007a  4926              LDR      r1,|L179.276|
00007c  3180              ADDS     r1,r1,#0x80
00007e  6048              STR      r0,[r1,#4]
;;;63     		GPIOC_PSOR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT; 
000080  4824              LDR      r0,|L179.276|
000082  3040              ADDS     r0,r0,#0x40
000084  6840              LDR      r0,[r0,#4]
000086  21ff              MOVS     r1,#0xff
000088  31c1              ADDS     r1,r1,#0xc1
00008a  4308              ORRS     r0,r0,r1
00008c  4921              LDR      r1,|L179.276|
00008e  3140              ADDS     r1,r1,#0x40
000090  6048              STR      r0,[r1,#4]
;;;64     		GPIOC_PSOR |= RESET_SHIFT;
000092  4608              MOV      r0,r1
000094  6840              LDR      r0,[r0,#4]
000096  2120              MOVS     r1,#0x20
000098  4308              ORRS     r0,r0,r1
00009a  491e              LDR      r1,|L179.276|
00009c  3140              ADDS     r1,r1,#0x40
00009e  6048              STR      r0,[r1,#4]
;;;65         
;;;66         GPIOE_PDDR |= RED_SHIFT | GREEN_SHIFT;  //Set the pin's direction to output
0000a0  481c              LDR      r0,|L179.276|
0000a2  30c0              ADDS     r0,r0,#0xc0
0000a4  6940              LDR      r0,[r0,#0x14]
0000a6  2105              MOVS     r1,#5
0000a8  0749              LSLS     r1,r1,#29
0000aa  4308              ORRS     r0,r0,r1
0000ac  4919              LDR      r1,|L179.276|
0000ae  31c0              ADDS     r1,r1,#0xc0
0000b0  6148              STR      r0,[r1,#0x14]
;;;67         GPIOD_PDDR |= BLUE_SHIFT;               //Set the pin's direction to output
0000b2  4818              LDR      r0,|L179.276|
0000b4  3080              ADDS     r0,r0,#0x80
0000b6  6940              LDR      r0,[r0,#0x14]
0000b8  2120              MOVS     r1,#0x20
0000ba  4308              ORRS     r0,r0,r1
0000bc  4915              LDR      r1,|L179.276|
0000be  3180              ADDS     r1,r1,#0x80
0000c0  6148              STR      r0,[r1,#0x14]
;;;68     		GPIOC_PDDR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT | RESET_SHIFT; 
0000c2  4814              LDR      r0,|L179.276|
0000c4  3040              ADDS     r0,r0,#0x40
0000c6  6940              LDR      r0,[r0,#0x14]
0000c8  21ff              MOVS     r1,#0xff
0000ca  31e1              ADDS     r1,r1,#0xe1
0000cc  4308              ORRS     r0,r0,r1
0000ce  4911              LDR      r1,|L179.276|
0000d0  3140              ADDS     r1,r1,#0x40
0000d2  6148              STR      r0,[r1,#0x14]
;;;69         
;;;70         RED_ON;		//Turn off RED LED
0000d4  0588              LSLS     r0,r1,#22
0000d6  490f              LDR      r1,|L179.276|
0000d8  31c0              ADDS     r1,r1,#0xc0
0000da  6088              STR      r0,[r1,#8]
;;;71         GREEN_ON;	//Turn off GREEN LED
0000dc  0080              LSLS     r0,r0,#2
0000de  6088              STR      r0,[r1,#8]
;;;72         BLUE_ON;		//Turn off BLUE LED
0000e0  2020              MOVS     r0,#0x20
0000e2  490c              LDR      r1,|L179.276|
0000e4  3180              ADDS     r1,r1,#0x80
0000e6  6088              STR      r0,[r1,#8]
;;;73     		REDBAT_ON;
0000e8  2040              MOVS     r0,#0x40
0000ea  490a              LDR      r1,|L179.276|
0000ec  3140              ADDS     r1,r1,#0x40
0000ee  6088              STR      r0,[r1,#8]
;;;74     		GREENBAT_ON;
0000f0  2080              MOVS     r0,#0x80
0000f2  6088              STR      r0,[r1,#8]
;;;75     		BLUEBAT_ON;
0000f4  0040              LSLS     r0,r0,#1
0000f6  6088              STR      r0,[r1,#8]
;;;76     		RESET_ON;
0000f8  2020              MOVS     r0,#0x20
0000fa  6048              STR      r0,[r1,#4]
;;;77     		
;;;78     	
;;;79     }
0000fc  4770              BX       lr
;;;80     
                          ENDP

0000fe  0000              DCW      0x0000
                  |L179.256|
                          DCD      0x40048000
                  |L179.260|
                          DCD      0x4004d040
                  |L179.264|
                          DCD      0x4004c000
                  |L179.268|
                          DCD      0x4004b000
                  |L179.272|
                          DCD      0x4004a000
                  |L179.276|
                          DCD      0x400ff040

                          AREA ||i.ignstatoff||, COMGROUP=ignstatoff, CODE, READONLY, ALIGN=2

                  ignstatoff PROC
;;;1278   }	
;;;1279   __inline void ignstatoff(){
000000  b508              PUSH     {r3,lr}
;;;1280   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L186.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L186.64|
000008  4a0e              LDR      r2,|L186.68|
00000a  490f              LDR      r1,|L186.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L186.76|
000010  f7fffffe          BL       send_GSM
;;;1281   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L186.64|
000018  4a0a              LDR      r2,|L186.68|
00001a  490d              LDR      r1,|L186.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L186.84|
000020  f7fffffe          BL       send_GSM
;;;1282   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1283   send_GSM("\nIOFF\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L186.64|
00002e  4a05              LDR      r2,|L186.68|
000030  4909              LDR      r1,|L186.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L186.92|
000036  f7fffffe          BL       send_GSM
;;;1284   
;;;1285   
;;;1286   }		
00003a  bd08              POP      {r3,pc}
;;;1287   
                          ENDP

                  |L186.60|
                          DCD      tmeout
                  |L186.64|
                          DCD      ||.conststring||+0x10
                  |L186.68|
                          DCD      ||.conststring||+0x18
                  |L186.72|
                          DCD      ||.conststring||+0x2c
                  |L186.76|
                          DCD      ||.conststring||+0x30
                  |L186.80|
                          DCD      ||.conststring||+0x20
                  |L186.84|
                          DCD      ||.conststring||+0x4c
                  |L186.88|
                          DCD      ||.conststring||+0x70
                  |L186.92|
                          DCD      ||.conststring||+0x7b8

                          AREA ||i.clear2||, COMGROUP=clear2, CODE, READONLY, ALIGN=2

                  clear2 PROC
;;;1425   
;;;1426   __inline void clear2()
000000  4803              LDR      r0,|L192.16|
;;;1427   {
;;;1428   //    if (UART_S1_REG(UART2_BASE_PTR) & UART_S1_OR_MASK)
;;;1429   //    {
;;;1430   //      temp = UART_D_REG(UART2_BASE_PTR);
;;;1431   //    }
;;;1432   
;;;1433   	UART_S1_REG(UART2_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000002  7900              LDRB     r0,[r0,#4]
000004  2118              MOVS     r1,#0x18
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L192.16|
00000a  7108              STRB     r0,[r1,#4]
;;;1434   }	
00000c  4770              BX       lr
;;;1435   
                          ENDP

00000e  0000              DCW      0x0000
                  |L192.16|
                          DCD      0x4006c000

                          AREA ||i.savecursord||, COMGROUP=savecursord, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursord PROC
;;;1331   }	
;;;1332   	__inline void savecursord(){
000000  b508              PUSH     {r3,lr}
;;;1333   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4814              LDR      r0,|L198.84|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b14              LDR      r3,|L198.88|
000008  4a14              LDR      r2,|L198.92|
00000a  4915              LDR      r1,|L198.96|
00000c  9000              STR      r0,[sp,#0]
00000e  4815              LDR      r0,|L198.100|
000010  f7fffffe          BL       send_GSM
;;;1334   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b10              LDR      r3,|L198.88|
000018  4a10              LDR      r2,|L198.92|
00001a  4913              LDR      r1,|L198.104|
00001c  9000              STR      r0,[sp,#0]
00001e  4813              LDR      r0,|L198.108|
000020  f7fffffe          BL       send_GSM
;;;1335   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1336   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4810              LDR      r0,|L198.112|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1337   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",0,0,0);		
000032  2000              MOVS     r0,#0
000034  4603              MOV      r3,r0
000036  4602              MOV      r2,r0
000038  490e              LDR      r1,|L198.116|
00003a  9000              STR      r0,[sp,#0]
00003c  480c              LDR      r0,|L198.112|
00003e  f7fffffe          BL       __2sprintf
;;;1338   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000042  200a              MOVS     r0,#0xa
000044  4b04              LDR      r3,|L198.88|
000046  4a05              LDR      r2,|L198.92|
000048  4905              LDR      r1,|L198.96|
00004a  9000              STR      r0,[sp,#0]
00004c  4808              LDR      r0,|L198.112|
00004e  f7fffffe          BL       send_GSM
;;;1339   }	
000052  bd08              POP      {r3,pc}
;;;1340   		
                          ENDP

                  |L198.84|
                          DCD      tmeout
                  |L198.88|
                          DCD      ||.conststring||+0x10
                  |L198.92|
                          DCD      ||.conststring||+0x18
                  |L198.96|
                          DCD      ||.conststring||+0x2c
                  |L198.100|
                          DCD      ||.conststring||+0x7c4
                  |L198.104|
                          DCD      ||.conststring||+0x20
                  |L198.108|
                          DCD      ||.conststring||+0x7e4
                  |L198.112|
                          DCD      at_
                  |L198.116|
                          DCD      ||.conststring||+0x80c

                          AREA ||i.read_ip_port||, COMGROUP=read_ip_port, CODE, READONLY, ALIGN=2

                  read_ip_port PROC
;;;1298   	
;;;1299   __inline void read_ip_port()
000000  b51c              PUSH     {r2-r4,lr}
;;;1300   {
;;;1301   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4811              LDR      r0,|L204.76|
000006  f7fffffe          BL       __aeabi_memclr
;;;1302   	//	memset(ip,0,strlen(ip));
;;;1303   		//memset(port,0,strlen(port));
;;;1304   		sprintf(at_, "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n");		
00000a  4911              LDR      r1,|L204.80|
00000c  480f              LDR      r0,|L204.76|
00000e  f7fffffe          BL       __2sprintf
;;;1305   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0f              LDR      r3,|L204.84|
000016  4a10              LDR      r2,|L204.88|
000018  4910              LDR      r1,|L204.92|
00001a  9000              STR      r0,[sp,#0]
00001c  480b              LDR      r0,|L204.76|
00001e  f7fffffe          BL       send_GSM
;;;1306   		parse_g(uart_string_gsm, 2,3, '|', '|',ip);
000022  480f              LDR      r0,|L204.96|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480c              LDR      r0,|L204.100|
000032  f7fffffe          BL       parse_g
;;;1307   		parse_g(uart_string_gsm, 4,5, '|', '|',port);
000036  480c              LDR      r0,|L204.104|
000038  217c              MOVS     r1,#0x7c
00003a  460b              MOV      r3,r1
00003c  2205              MOVS     r2,#5
00003e  9100              STR      r1,[sp,#0]
000040  9001              STR      r0,[sp,#4]
000042  2104              MOVS     r1,#4
000044  4807              LDR      r0,|L204.100|
000046  f7fffffe          BL       parse_g
;;;1308   	
;;;1309   }		
00004a  bd1c              POP      {r2-r4,pc}
;;;1310   	
                          ENDP

                  |L204.76|
                          DCD      at_
                  |L204.80|
                          DCD      ||.conststring||+0x850
                  |L204.84|
                          DCD      ||.conststring||+0x10
                  |L204.88|
                          DCD      ||.conststring||+0x18
                  |L204.92|
                          DCD      ||.conststring||+0x2c
                  |L204.96|
                          DCD      ||ip||
                  |L204.100|
                          DCD      uart_string_gsm
                  |L204.104|
                          DCD      port

                          AREA ||i.read_interval||, COMGROUP=read_interval, CODE, READONLY, ALIGN=2

                  read_interval PROC
;;;1310   	
;;;1311   __inline void read_interval()
000000  b51c              PUSH     {r2-r4,lr}
;;;1312   {
;;;1313   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480f              LDR      r0,|L210.68|
000006  f7fffffe          BL       __aeabi_memclr
;;;1314   		sprintf(at_, "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n");		
00000a  490f              LDR      r1,|L210.72|
00000c  480d              LDR      r0,|L210.68|
00000e  f7fffffe          BL       __2sprintf
;;;1315   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0d              LDR      r3,|L210.76|
000016  4a0e              LDR      r2,|L210.80|
000018  490e              LDR      r1,|L210.84|
00001a  9000              STR      r0,[sp,#0]
00001c  4809              LDR      r0,|L210.68|
00001e  f7fffffe          BL       send_GSM
;;;1316   		parse_g(uart_string_gsm, 2,3, '|', '|',interval);
000022  480d              LDR      r0,|L210.88|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480a              LDR      r0,|L210.92|
000032  f7fffffe          BL       parse_g
;;;1317   		int_erval=myAtoi(interval);		
000036  4808              LDR      r0,|L210.88|
000038  f7fffffe          BL       myAtoi
00003c  4908              LDR      r1,|L210.96|
00003e  6008              STR      r0,[r1,#0]  ; int_erval
;;;1318   
;;;1319   
;;;1320   }	
000040  bd1c              POP      {r2-r4,pc}
;;;1321   
                          ENDP

000042  0000              DCW      0x0000
                  |L210.68|
                          DCD      at_
                  |L210.72|
                          DCD      ||.conststring||+0x874
                  |L210.76|
                          DCD      ||.conststring||+0x10
                  |L210.80|
                          DCD      ||.conststring||+0x18
                  |L210.84|
                          DCD      ||.conststring||+0x2c
                  |L210.88|
                          DCD      interval
                  |L210.92|
                          DCD      uart_string_gsm
                  |L210.96|
                          DCD      int_erval

                          AREA ||i.savecursor||, COMGROUP=savecursor, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursor PROC
;;;1323   
;;;1324   	__inline void savecursor(){
000000  b508              PUSH     {r3,lr}
;;;1325   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4816              LDR      r0,|L216.92|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b16              LDR      r3,|L216.96|
000008  4a16              LDR      r2,|L216.100|
00000a  4917              LDR      r1,|L216.104|
00000c  9000              STR      r0,[sp,#0]
00000e  4817              LDR      r0,|L216.108|
000010  f7fffffe          BL       send_GSM
;;;1326   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b12              LDR      r3,|L216.96|
000018  4a12              LDR      r2,|L216.100|
00001a  4915              LDR      r1,|L216.112|
00001c  9000              STR      r0,[sp,#0]
00001e  4815              LDR      r0,|L216.116|
000020  f7fffffe          BL       send_GSM
;;;1327   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1328   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4812              LDR      r0,|L216.120|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1329   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",times,k5,cursorvaluepr);		
000032  4812              LDR      r0,|L216.124|
000034  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
000036  9000              STR      r0,[sp,#0]
000038  4811              LDR      r0,|L216.128|
00003a  6803              LDR      r3,[r0,#0]  ; k5
00003c  4811              LDR      r0,|L216.132|
00003e  4912              LDR      r1,|L216.136|
000040  6802              LDR      r2,[r0,#0]  ; times
000042  480d              LDR      r0,|L216.120|
000044  f7fffffe          BL       __2sprintf
;;;1330   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000048  200a              MOVS     r0,#0xa
00004a  4b05              LDR      r3,|L216.96|
00004c  4a05              LDR      r2,|L216.100|
00004e  4906              LDR      r1,|L216.104|
000050  9000              STR      r0,[sp,#0]
000052  4809              LDR      r0,|L216.120|
000054  f7fffffe          BL       send_GSM
;;;1331   }	
000058  bd08              POP      {r3,pc}
;;;1332   	__inline void savecursord(){
                          ENDP

00005a  0000              DCW      0x0000
                  |L216.92|
                          DCD      tmeout
                  |L216.96|
                          DCD      ||.conststring||+0x10
                  |L216.100|
                          DCD      ||.conststring||+0x18
                  |L216.104|
                          DCD      ||.conststring||+0x2c
                  |L216.108|
                          DCD      ||.conststring||+0x7c4
                  |L216.112|
                          DCD      ||.conststring||+0x20
                  |L216.116|
                          DCD      ||.conststring||+0x7e4
                  |L216.120|
                          DCD      at_
                  |L216.124|
                          DCD      cursorvaluepr
                  |L216.128|
                          DCD      ||k5||
                  |L216.132|
                          DCD      times
                  |L216.136|
                          DCD      ||.conststring||+0x80c

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L222.24|
                  |L222.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L222.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L222.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REV16|
#line 383 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0-Beta4\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_vts_ver2_c_tout____REV16| PROC
#line 384

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_tout____REVSH|
#line 397
|__asm___10_vts_ver2_c_tout____REVSH| PROC
#line 398

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
